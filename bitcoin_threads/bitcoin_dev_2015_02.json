[
    {
        "title": "[Bitcoin-development] Is there a way to estimate the maximum number of transactions per minute Bitcoin can handle as it is today?",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2015-02-01T06:50:41",
                "message_text_only": "On 1/31/2015 5:11 AM, Wladimir wrote:\n> The block chain is a single channel broadcasted over the entire world, \n> and I don't believe it will ever be possible nor desirable to \n> broadcast all the world's transactions over one channel.\n>\n> The everyone-validates-everything approach doesn't scale. It is however\n> useful to settle larger transactions in an irreversible, zero-trust \n> way. That's what makes the bitcoin system, as it is now, valuable.\n>\n> But it is absurd for the whole world to have to validate every \n> purchase of a cup of coffee or a bus ticket by six billion others.\n\nWell to be fair, nobody suggested 6 billion full nodes.  Although some \nresidential connections today do have Angel's 15G/10min... (sadly, not \nmine).\n\nOne of the best points Gavin made is, it would be unwise to artificially \nlimit the number of transactions below the technical capabilities of the \nnetwork.  That's how competitions are lost. \nhttp://gavintech.blogspot.com/2015/01/twenty-megabytes-testing-results.html"
            }
        ],
        "thread_summary": {
            "title": "Is there a way to estimate the maximum number of transactions per minute Bitcoin can handle as it is today?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tom Harding"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1010
        }
    },
    {
        "title": "[Bitcoin-development] var_int ambiguous serialization consequences",
        "thread_messages": [
            {
                "author": "Tamas Blummer",
                "date": "2015-02-01T09:33:48",
                "message_text_only": "I wonder of consequences if var_int is used in its longer than necessary forms (e.g encoding 1 as 0xfd0100 instead of 0x01)\n\nThis is already of interest if applying size limit to a block, since transaction count is var_int but is not part of the hashed header or the merkle tree.\n\nIt could also be used to create variants of the same transaction message by altered representation of txIn and txout counts, that would remain valid provided signatures validate with the shortest form, as that is created while re-serializing for signature hashing. An implementation that holds mempool by raw message hashes could be tricked to believe that a modified encoded version of the same transaction is a real double spend. One could also mine a valid block with transactions that have a different hash if regularly parsed and re-serialized. An SPV client could be confused by such a transaction as it was present in the merkle tree proof with a different hash than it gets for the tx with its own serialization or from the raw message.\n\nTamas Blummer\nBits of Proof\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/ca581637/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/ca581637/attachment.sig>"
            },
            {
                "author": "Wladimir",
                "date": "2015-02-01T10:44:46",
                "message_text_only": "On Sun, 1 Feb 2015, Tamas Blummer wrote:\n\n> I wonder of consequences if var_int is used in its longer than necessary forms (e.g encoding 1 as 0xfd0100 instead of 0x01)\n\nIn serialize.h lingo you are talking about CompactSize, not VarInt.\n\nCompactSizes indeed have redundancy in their representation, i.e. the same \nnumber can be represented as up to four different byte sequences.\n\nVARINTs have a different format that (AFAIK) isn't used anywhere in \nthe block chain. See WriteVarInt / ReadVarInt. These were designed to \nnot have any redundancy in their representation.\n\n> This is already of interest if applying size limit to a block, since transaction count is var_int but is not part of the hashed header or the\n> merkle tree.\n\nAre you sure that this is a current concern? Non-canonical CompactSizes \nare forbidden - in serialize.h this is flagged in ReadCompactSize.\n\nWladimir"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-01T11:42:05",
                "message_text_only": "Thanks for the clarification. Yes, I referred to CompactSize using the lingo of https://en.bitcoin.it/wiki/Protocol_documentation\n\nI am not sure if it is current concern. Apparently an exception is thrown if non-canonical CompactSize in a transaction s parsed.\nIs it ensured that transactions are always parsed before computing their hash?\n\nTamas Blummer\n\nOn Feb 1, 2015, at 11:44 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> \n> On Sun, 1 Feb 2015, Tamas Blummer wrote:\n> \n>> I wonder of consequences if var_int is used in its longer than necessary forms (e.g encoding 1 as 0xfd0100 instead of 0x01)\n> \n> In serialize.h lingo you are talking about CompactSize, not VarInt.\n> \n> CompactSizes indeed have redundancy in their representation, i.e. the same number can be represented as up to four different byte sequences.\n> \n> VARINTs have a different format that (AFAIK) isn't used anywhere in the block chain. See WriteVarInt / ReadVarInt. These were designed to not have any redundancy in their representation.\n> \n>> This is already of interest if applying size limit to a block, since transaction count is var_int but is not part of the hashed header or the\n>> merkle tree.\n> \n> Are you sure that this is a current concern? Non-canonical CompactSizes are forbidden - in serialize.h this is flagged in ReadCompactSize.\n> \n> Wladimir\n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/189a978e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/189a978e/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-02-01T15:00:39",
                "message_text_only": "Hashes are always computed by reserializing data structures, never by\nhashing wire data directly. This has been the case in every version of the\nreference client's code that I know of.\n\nThis even meant that for example a block of 999999 bytes with non-shortest\nlength for the transaction count could be over the mazimum block size, but\nstill be valid.\n\nAs Wladimir says, more recently we switched to just failing to deserialize\n(by throwing an exception) whenever a non-shortest form is used.\nOn Feb 1, 2015 1:34 AM, \"Tamas Blummer\" <tamas at bitsofproof.com> wrote:\n\n> I wonder of consequences if var_int is used in its longer than necessary\n> forms (e.g encoding 1 as 0xfd0100 instead of 0x01)\n>\n> This is already of interest if applying size limit to a block, since\n> transaction count is var_int but is not part of the hashed header or the\n> merkle tree.\n>\n> It could also be used to create variants of the same transaction message\n> by altered representation of txIn and txout counts, that would remain valid\n> provided signatures validate with the shortest form, as that is created\n> while re-serializing for signature hashing. An implementation that holds\n> mempool by raw message hashes could be tricked to believe that a modified\n> encoded version of the same transaction is a real double spend. One could\n> also mine a valid block with transactions that have a different hash if\n> regularly parsed and re-serialized. An SPV client could be confused by such\n> a transaction as it was present in the merkle tree proof with a different\n> hash than it gets for the tx with its own serialization or from the raw\n> message.\n>\n> Tamas Blummer\n> Bits of Proof\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/f217c6d5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "var_int ambiguous serialization consequences",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille",
                "Tamas Blummer",
                "Wladimir"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6751
        }
    },
    {
        "title": "[Bitcoin-development] Proposal to address Bitcoin malware",
        "thread_messages": [
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-01T12:49:05",
                "message_text_only": "In online banking, the banks generate account numbers.  An attacker cannot generate their own account number and the likelihood of an attacker having the same account number that I am trying to transfer funds to is low and this is why OCRA is effective with online banking.\n\nWith Bitcoin, the Bitcoin address is comparable to the recipient\u2019s bank account number.   I now see how an an attacker can brute force the bitcoin address with vanitygen.  Is there any way to generate an 8 digit number from the bitcoin address that can be used to verify transactions in such a way (possibly with hashing?) that brute forcing a bitcoin address would take longer than a reasonable period of time (say 60 seconds) so a system could time out if a transaction was not completed in that time?\n\nI\u2019ve also looked into BIP70 (Payment Protocol) that claims protection against man-in-the-middle/man-in-the-browser (MitB) based attacks.  A common way to protect against this is with out-of-band transaction verification (http://en.wikipedia.org/wiki/Man-in-the-browser#Out-of-band_transaction_verification <http://en.wikipedia.org/wiki/Man-in-the-browser#Out-of-band_transaction_verification>).  I see how BIP 70 verifies the payment request, however, is there any way to verify that the transaction signed by the wallet matches the request before it is sent to the blockchain (and how can this support out of band verification)?  Perhaps this is something that can only be supported when sending money with web based wallets.\n\nBrian Erdelyi\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/608c2e89/attachment.html>"
            },
            {
                "author": "Martin Habov\u0161tiak",
                "date": "2015-02-01T13:31:28",
                "message_text_only": "BIP70 is quite safe agains MitB. If user copies URL belonging to other\nmerchant, he would see the fact after entering it into his wallet\napplication. The only problem is, attacker can buy from the same\nmerchant with user's money. (sending him different URL) This can be\nmitigated by merchant setting \"memo\" to the description of the basket\nand some user info (e.g. address to which goods are sent).\n\nBut if whole computer is compromised, you're already screwed. Trezor\nshould help, but I'm not sure if it supports BIP70.\n\n2015-02-01 14:49 GMT+02:00 Brian Erdelyi <brian.erdelyi at gmail.com>:\n>\n> In online banking, the banks generate account numbers.  An attacker cannot\n> generate their own account number and the likelihood of an attacker having\n> the same account number that I am trying to transfer funds to is low and\n> this is why OCRA is effective with online banking.\n>\n> With Bitcoin, the Bitcoin address is comparable to the recipient\u2019s bank\n> account number.   I now see how an an attacker can brute force the bitcoin\n> address with vanitygen.  Is there any way to generate an 8 digit number from\n> the bitcoin address that can be used to verify transactions in such a way\n> (possibly with hashing?) that brute forcing a bitcoin address would take\n> longer than a reasonable period of time (say 60 seconds) so a system could\n> time out if a transaction was not completed in that time?\n>\n> I\u2019ve also looked into BIP70 (Payment Protocol) that claims protection\n> against man-in-the-middle/man-in-the-browser (MitB) based attacks.  A common\n> way to protect against this is with out-of-band transaction verification\n> (http://en.wikipedia.org/wiki/Man-in-the-browser#Out-of-band_transaction_verification).\n> I see how BIP 70 verifies the payment request, however, is there any way to\n> verify that the transaction signed by the wallet matches the request before\n> it is sent to the blockchain (and how can this support out of band\n> verification)?  Perhaps this is something that can only be supported when\n> sending money with web based wallets.\n>\n> Brian Erdelyi\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-01T13:46:52",
                "message_text_only": "TREZOR does not support BIP70. I think they planned to work on it after\nmulti-sig support, which is now done, so I'm hoping that it's next on their\nroadmap.\n\nThe signing features of BIP70 have (fortunately!) been implemented by\npayment processors quite early, before we really have the client side fully\nfigured out and implemented. Mobile wallets (Android, iOS) do implement it\nand they are reasonably secure, for desktops we need TREZOR and we need the\nBitcoin Authenticator 2-factor wallet to support it. I think they do, but\ncan't remember exactly. Either they do, or it's on their roadmap.\n\nOn Sun, Feb 1, 2015 at 2:31 PM, Martin Habov\u0161tiak <\nmartin.habovstiak at gmail.com> wrote:\n\n> BIP70 is quite safe agains MitB. If user copies URL belonging to other\n> merchant, he would see the fact after entering it into his wallet\n> application. The only problem is, attacker can buy from the same\n> merchant with user's money. (sending him different URL) This can be\n> mitigated by merchant setting \"memo\" to the description of the basket\n> and some user info (e.g. address to which goods are sent).\n>\n> But if whole computer is compromised, you're already screwed. Trezor\n> should help, but I'm not sure if it supports BIP70.\n>\n> 2015-02-01 14:49 GMT+02:00 Brian Erdelyi <brian.erdelyi at gmail.com>:\n> >\n> > In online banking, the banks generate account numbers.  An attacker\n> cannot\n> > generate their own account number and the likelihood of an attacker\n> having\n> > the same account number that I am trying to transfer funds to is low and\n> > this is why OCRA is effective with online banking.\n> >\n> > With Bitcoin, the Bitcoin address is comparable to the recipient\u2019s bank\n> > account number.   I now see how an an attacker can brute force the\n> bitcoin\n> > address with vanitygen.  Is there any way to generate an 8 digit number\n> from\n> > the bitcoin address that can be used to verify transactions in such a way\n> > (possibly with hashing?) that brute forcing a bitcoin address would take\n> > longer than a reasonable period of time (say 60 seconds) so a system\n> could\n> > time out if a transaction was not completed in that time?\n> >\n> > I\u2019ve also looked into BIP70 (Payment Protocol) that claims protection\n> > against man-in-the-middle/man-in-the-browser (MitB) based attacks.  A\n> common\n> > way to protect against this is with out-of-band transaction verification\n> > (\n> http://en.wikipedia.org/wiki/Man-in-the-browser#Out-of-band_transaction_verification\n> ).\n> > I see how BIP 70 verifies the payment request, however, is there any way\n> to\n> > verify that the transaction signed by the wallet matches the request\n> before\n> > it is sent to the blockchain (and how can this support out of band\n> > verification)?  Perhaps this is something that can only be supported when\n> > sending money with web based wallets.\n> >\n> > Brian Erdelyi\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Dive into the World of Parallel Programming. The Go Parallel Website,\n> > sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> > hub for all things parallel software development, from weekly thought\n> > leadership blogs to news, videos, case studies, tutorials and more. Take\n> a\n> > look and join the conversation now. http://goparallel.sourceforge.net/\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/cdd9de8c/attachment.html>"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-01T13:54:08",
                "message_text_only": "> BIP70 is quite safe agains MitB. If user copies URL belonging to other\n> merchant, he would see the fact after entering it into his wallet\n> application. The only problem is, attacker can buy from the same\n> merchant with user's money. (sending him different URL) This can be\n> mitigated by merchant setting \"memo\" to the description of the basket\n> and some user info (e.g. address to which goods are sent).\n\nI think BIP 70 does a good job at verifying where the payment request came from.  I\u2019m not convinced this is the same as verifying the transaction (ideally OOB).\n\n> But if whole computer is compromised, you're already screwed. Trezor\n> should help, but I'm not sure if it supports BIP70.\n\nThe reason for OOB verification is if the entire computer is compromised.  Again, this may only be possible with a trusted intermediary or a web wallet.\n\nBrian Erdelyi"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-01T13:48:15",
                "message_text_only": ">\n> I see how BIP 70 verifies the payment request, however, is there any way\n> to verify that the transaction signed by the wallet matches the request\n> before it is sent to the blockchain (and how can this support out of band\n> verification)?\n>\n\nNo. It cannot be done in the Bitcoin context. Your wallet MUST be secure.\nOtherwise BIP70 is irrelevant - if the attacker can make your wallet sign\nsome other transaction than what you expect, they can also just steal your\nprivate keys and use them directly. BIP70 is based on the assumption of a\nsecure signing core that cannot  be compromised, with devices like the\nTREZOR and 2-factor pairings of desktops and mobiles being an obvious use\ncase.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/dec9b252/attachment.html>"
            },
            {
                "author": "mbde at bitwatch.co",
                "date": "2015-02-01T14:28:38",
                "message_text_only": "> This video demonstrates how HSBC uses a security token to verify\ntransactions online.  https://www.youtube.com/watch?v=Sh2Iha88agE.\n\nSince it's not very widely used outside of Austria and Germany, this may\nbe interesting for some: there is a second factor scheme called\n\"cardTAN\" or \"chipTAN\" where authentication codes are generated on a\ndevice which is not specifically linked to an accout. When\nauthenticating an online banking transaction the process is as follows:\n\nhttp://i.imgur.com/eWsffsp.jpg\n\n1. Insert bank card into TAN generator\n2. Scan flickering code on screen with the device's photodetector\n3. Confirm amount to transfer and recipient on the generator\n4. Finalize online banking transaction by entering a challenge-response\ngenerated by the device\n\nhttps://www.youtube.com/watch?v=5gyBC9irTsM&t=22s\nhttp://en.wikipedia.org/wiki/Transaction_authentication_number#chipTAN_.2F_cardTAN\n\n-------- Original Message --------\n*Subject: *[Bitcoin-development] Proposal to address Bitcoin malware\n*From: *Brian Erdelyi <brian.erdelyi at gmail.com>\n*To: *bitcoin-development at lists.sourceforge.net\n*Date: *Sat, 31 Jan 2015 18:15:53 -0400\n> Hello all,\n>\n> The number of incidents involving malware targeting bitcoin users\n> continues to rise.  One category of virus I find particularly nasty is\n> when the bitcoin address you are trying to send money to is modified\n> before the transaction is signed and recorded in the block chain.\n>  This behaviour allows the malware to evade two-factor authentication\n> by becoming active only when the bitcoin address is entered.  This is\n> very similar to how man-in-the-browser malware attack online banking\n> websites.\n>\n> Out of band transaction verification/signing is one method used with\n> online banking to help protect against this.  This can be done in a\n> variety of ways with SMS, voice, mobile app or even security tokens.\n>  This video demonstrates how HSBC uses a security token to verify\n> transactions online.  https://www.youtube.com/watch?v=Sh2Iha88agE.\n>\n> Many Bitcoin wallets and services already use Open Authentication\n> (OATH) based one-time passwords (OTP).  Is there any interest (or\n> existing work) in in the Bitcoin community adopting the OATH\n> Challenge-Response Algorithm (OCRA) for verifying transactions?\n>\n> I know there are other forms of malware, however, I want to get\n> thoughts on this approach as it would involve the use of a decimal\n> representation of the bitcoin address (depending on particular\n> application).  In the HSBC example (see YouTube video above), this was\n> the last 8 digits of the recipient\u2019s account number.  Would it make\n> sense to convert a bitcoin address to decimal and then truncate to 8\n> digits for this purpose?  I understand that truncating the number in\n> some way only increases the likelihood for collisions\u2026 however, would\n> this still be practical or could the malware generate a rogue bitcoin\n> address that would produce the same 8 digits of the legitimate bitcoin\n> address?\n>\n> Brian Erdelyi\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-02T17:40:11",
                "message_text_only": "Another concept...\n\nIt should be possible to use multisig wallets to protect against malware.  For example, a user could generate a wallet with 3 keys and require a transaction that has been signed by 2 of those keys.  One key is placed in cold storage and anther sent to a third-party.\n\nIt is now possible to generate and sign transactions on the users computer and send this signed transaction to the third-party for the second signature.  This now permits the use of out of band transaction verification techniques before the third party signs the transaction and sends to the blockchain.\n\nIf the third-party is malicious or becomes compromised they would not have the ability to complete transactions as they only have one private key.  If the third-party disappeared, the user could use the key in cold storage to sign transactions and send funds to a new wallet.\n\nThoughts?"
            },
            {
                "author": "Martin Habov\u0161tiak",
                "date": "2015-02-02T17:54:55",
                "message_text_only": "Good idea. I think this could be even better:\n\ninstead of using third party, send partially signed TX from computer\nto smartphone. In case, you are paranoid, make 3oo5 address made of\ntwo cold storage keys, one on desktop/laptop, one on smartphone, one\nusing third party.\nIf it isn't enough, add requirement of another four keys, so you have\nthree desktops with different OS (Linux, Windows, Mac) and three\nmobile OS (Android, iOS, Windows Phone), third party and some keys in\ncold storage. Also, I forgot HW wallets, so at least Trezor and\nLedger. I believe this scheme is unpenetrable by anyone, including\nNSA, FBI, CIA, NBU...\n\nJokes aside, I think leaving out third party is important for privacy reasons.\n\nStay safe!\n\n2015-02-02 18:40 GMT+01:00 Brian Erdelyi <brian.erdelyi at gmail.com>:\n> Another concept...\n>\n> It should be possible to use multisig wallets to protect against malware.  For example, a user could generate a wallet with 3 keys and require a transaction that has been signed by 2 of those keys.  One key is placed in cold storage and anther sent to a third-party.\n>\n> It is now possible to generate and sign transactions on the users computer and send this signed transaction to the third-party for the second signature.  This now permits the use of out of band transaction verification techniques before the third party signs the transaction and sends to the blockchain.\n>\n> If the third-party is malicious or becomes compromised they would not have the ability to complete transactions as they only have one private key.  If the third-party disappeared, the user could use the key in cold storage to sign transactions and send funds to a new wallet.\n>\n> Thoughts?\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-02T17:59:54",
                "message_text_only": "We're way ahead of you guys ;)\n\nOn Mon, Feb 2, 2015 at 6:54 PM, Martin Habov\u0161tiak <\nmartin.habovstiak at gmail.com> wrote:\n\n> Good idea. I think this could be even better:\n>\n> instead of using third party, send partially signed TX from computer\n> to smartphone. In case, you are paranoid, make 3oo5 address made of\n> two cold storage keys, one on desktop/laptop, one on smartphone, one\n> using third party.\n>\n\nhttps://www.bitcoinauthenticator.org/      - does this already, currently\nin alpha\n\n\n> > It should be possible to use multisig wallets to protect against\n> malware.  For example, a user could generate a wallet with 3 keys and\n> require a transaction that has been signed by 2 of those keys.  One key is\n> placed in cold storage and anther sent to a third-party.\n>\n\nBitGo, CryptoCorp and (slight variant) GreenAddress all offer this model.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/3025f642/attachment.html>"
            },
            {
                "author": "Martin Habov\u0161tiak",
                "date": "2015-02-02T18:02:39",
                "message_text_only": "Do you have anything that is NOT some web application?\n\n2015-02-02 18:59 GMT+01:00 Mike Hearn <mike at plan99.net>:\n> We're way ahead of you guys ;)\n>\n> On Mon, Feb 2, 2015 at 6:54 PM, Martin Habov\u0161tiak\n> <martin.habovstiak at gmail.com> wrote:\n>>\n>> Good idea. I think this could be even better:\n>>\n>> instead of using third party, send partially signed TX from computer\n>> to smartphone. In case, you are paranoid, make 3oo5 address made of\n>> two cold storage keys, one on desktop/laptop, one on smartphone, one\n>> using third party.\n>\n>\n> https://www.bitcoinauthenticator.org/      - does this already, currently in\n> alpha\n>\n>>\n>> > It should be possible to use multisig wallets to protect against\n>> > malware.  For example, a user could generate a wallet with 3 keys and\n>> > require a transaction that has been signed by 2 of those keys.  One key is\n>> > placed in cold storage and anther sent to a third-party.\n>\n>\n> BitGo, CryptoCorp and (slight variant) GreenAddress all offer this model."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-02T18:25:14",
                "message_text_only": ">\n> Do you have anything that is NOT some web application?\n>\n\nBitcoin Authenticator is a desktop app+mobile app pair. It pairs with your\nphone over wifi, cloud push, maybe Bluetooth as well. I forget exactly.\n\nIt's done in the same way as Lighthouse, so it runs Win/Mac/Linux on\ndesktop and Android on mobile.\n\nIt could be adapted to use BitGo as a third party key holder with SMS\nauthenticator relatively easily, I think. We did the bulk of all the needed\nwork last year as part of the bitcoinj multisig work. Then you'd have a\nserver involved, but not a web app.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/634c4a3c/attachment.html>"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-02T18:35:59",
                "message_text_only": "> Bitcoin Authenticator is a desktop app+mobile app pair. It pairs with your phone over wifi, cloud push, maybe Bluetooth as well. I forget exactly. \n> \n> It's done in the same way as Lighthouse, so it runs Win/Mac/Linux on desktop and Android on mobile.\n> \n> It could be adapted to use BitGo as a third party key holder with SMS authenticator relatively easily, I think. We did the bulk of all the needed work last year as part of the bitcoinj multisig work. Then you'd have a server involved, but not a web app.\n\nI really like the concept of Bitcoin Authenticator and think it\u2019s exactly what I was describing (without a third-party).\n\nI think it\u2019s a bit confusing when they describe Bitcoin Authenticator as 2FA.  I think it may be more accurate to describe it as out of band transaction verification/signing or dual transaction signing.  Regardless, it\u2019s very exciting to see others are thinking about this too.\n\nBrian Erdelyi"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-02T18:45:49",
                "message_text_only": "Confusing or not, the reliance on multiple signatures as offering greater security than single relies on the independence of multiple secrets. If the secrets cannot be shown to retain independence in the envisioned threat scenario (e.g. a user's compromised operating system) then the benefit reduces to making the exploit more difficult to write, which, once written, reduces to no benefit. Yet the user still suffers the reduced utility arising from greater complexity, while being led to believe in a false promise.\n\n\n> On Feb 2, 2015, at 11:35 AM, Brian Erdelyi <brian.erdelyi at gmail.com> wrote:\n> \n> \n>> Bitcoin Authenticator is a desktop app+mobile app pair. It pairs with your phone over wifi, cloud push, maybe Bluetooth as well. I forget exactly. \n>> \n>> It's done in the same way as Lighthouse, so it runs Win/Mac/Linux on desktop and Android on mobile.\n>> \n>> It could be adapted to use BitGo as a third party key holder with SMS authenticator relatively easily, I think. We did the bulk of all the needed work last year as part of the bitcoinj multisig work. Then you'd have a server involved, but not a web app.\n> \n> I really like the concept of Bitcoin Authenticator and think it\u2019s exactly what I was describing (without a third-party).\n> \n> I think it\u2019s a bit confusing when they describe Bitcoin Authenticator as 2FA.  I think it may be more accurate to describe it as out of band transaction verification/signing or dual transaction signing.  Regardless, it\u2019s very exciting to see others are thinking about this too.\n> \n> Brian Erdelyi\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-02T19:58:11",
                "message_text_only": "> Confusing or not, the reliance on multiple signatures as offering greater security than single relies on the independence of multiple secrets. If the secrets cannot be shown to retain independence in the envisioned threat scenario (e.g. a user's compromised operating system) then the benefit reduces to making the exploit more difficult to write, which, once written, reduces to no benefit. Yet the user still suffers the reduced utility arising from greater complexity, while being led to believe in a false promise.\n\nJust trying to make sure I understand what you\u2019re saying.  Are you eluding to that if two of the three private keys get compromised there is no gain in security?  Although the likelihood of this occurring is lower, it is possible.\n\nAs more malware targets bitcoins I think the utility is evident.  Given how final Bitcoin transactions are, I think it\u2019s worth trying to find methods to help verify those transactions (if a user deems it to be high-risk enough) before the transaction is completed.  The balance is trying to devise something that users do not find too burdensome.\n\nBrian Erdelyi"
            },
            {
                "author": "Joel Joonatan Kaartinen",
                "date": "2015-02-02T20:57:04",
                "message_text_only": "If the attacker has your desktop computer but not the mobile that's acting\nas an independent second factor, how are you then supposed to be able to\ntell you're not signing the correct transaction on the mobile? If the\naddress was replaced with the attacker's address, it'll look like\neverything is ok.\n\n- Joel\n\nOn Mon, Feb 2, 2015 at 9:58 PM, Brian Erdelyi <brian.erdelyi at gmail.com>\nwrote:\n\n>\n> > Confusing or not, the reliance on multiple signatures as offering\n> greater security than single relies on the independence of multiple\n> secrets. If the secrets cannot be shown to retain independence in the\n> envisioned threat scenario (e.g. a user's compromised operating system)\n> then the benefit reduces to making the exploit more difficult to write,\n> which, once written, reduces to no benefit. Yet the user still suffers the\n> reduced utility arising from greater complexity, while being led to believe\n> in a false promise.\n>\n> Just trying to make sure I understand what you\u2019re saying.  Are you eluding\n> to that if two of the three private keys get compromised there is no gain\n> in security?  Although the likelihood of this occurring is lower, it is\n> possible.\n>\n> As more malware targets bitcoins I think the utility is evident.  Given\n> how final Bitcoin transactions are, I think it\u2019s worth trying to find\n> methods to help verify those transactions (if a user deems it to be\n> high-risk enough) before the transaction is completed.  The balance is\n> trying to devise something that users do not find too burdensome.\n>\n> Brian Erdelyi\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/c75f7707/attachment.html>"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-02T21:03:42",
                "message_text_only": "Joel,\n\nThe mobile device should show you the details of the transaction (i.e. amount and bitcoin address).  Once you verify this is the intended recipient and amount you approve it on the mobile device.  If the address was replaced, you should see this on the mobile device as it won\u2019t match where you were intending to send it.  You can then not provide the second signature.\n\nBrian Erdelyi\n\n> On Feb 2, 2015, at 4:57 PM, Joel Joonatan Kaartinen <joel.kaartinen at gmail.com> wrote:\n> \n> If the attacker has your desktop computer but not the mobile that's acting as an independent second factor, how are you then supposed to be able to tell you're not signing the correct transaction on the mobile? If the address was replaced with the attacker's address, it'll look like everything is ok.\n> \n> - Joel\n> \n> On Mon, Feb 2, 2015 at 9:58 PM, Brian Erdelyi <brian.erdelyi at gmail.com <mailto:brian.erdelyi at gmail.com>> wrote:\n> \n> > Confusing or not, the reliance on multiple signatures as offering greater security than single relies on the independence of multiple secrets. If the secrets cannot be shown to retain independence in the envisioned threat scenario (e.g. a user's compromised operating system) then the benefit reduces to making the exploit more difficult to write, which, once written, reduces to no benefit. Yet the user still suffers the reduced utility arising from greater complexity, while being led to believe in a false promise.\n> \n> Just trying to make sure I understand what you\u2019re saying.  Are you eluding to that if two of the three private keys get compromised there is no gain in security?  Although the likelihood of this occurring is lower, it is possible.\n> \n> As more malware targets bitcoins I think the utility is evident.  Given how final Bitcoin transactions are, I think it\u2019s worth trying to find methods to help verify those transactions (if a user deems it to be high-risk enough) before the transaction is completed.  The balance is trying to devise something that users do not find too burdensome.\n> \n> Brian Erdelyi\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/ <http://goparallel.sourceforge.net/>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development <https://lists.sourceforge.net/lists/listinfo/bitcoin-development>\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/ed32b523/attachment.html>"
            },
            {
                "author": "Pedro Worcel",
                "date": "2015-02-02T21:09:20",
                "message_text_only": "Where would you verify that?\n\nOn 2/3/2015 10:03 AM, Brian Erdelyi wrote:\n> Joel,\n>\n> The mobile device should show you the details of the transaction (i.e. \n> amount and bitcoin address).  Once you verify this is the intended \n> recipient and amount you approve it on the mobile device.  If the \n> address was replaced, you should see this on the mobile device as it \n> won\u2019t match where you were intending to send it.  You can then not \n> provide the second signature.\n>\n> Brian Erdelyi\n>\n>> On Feb 2, 2015, at 4:57 PM, Joel Joonatan Kaartinen \n>> <joel.kaartinen at gmail.com <mailto:joel.kaartinen at gmail.com>> wrote:\n>>\n>> If the attacker has your desktop computer but not the mobile that's \n>> acting as an independent second factor, how are you then supposed to \n>> be able to tell you're not signing the correct transaction on the \n>> mobile? If the address was replaced with the attacker's address, \n>> it'll look like everything is ok.\n>>\n>> - Joel\n>>\n>> On Mon, Feb 2, 2015 at 9:58 PM, Brian Erdelyi \n>> <brian.erdelyi at gmail.com <mailto:brian.erdelyi at gmail.com>> wrote:\n>>\n>>\n>>     > Confusing or not, the reliance on multiple signatures as\n>>     offering greater security than single relies on the independence\n>>     of multiple secrets. If the secrets cannot be shown to retain\n>>     independence in the envisioned threat scenario (e.g. a user's\n>>     compromised operating system) then the benefit reduces to making\n>>     the exploit more difficult to write, which, once written, reduces\n>>     to no benefit. Yet the user still suffers the reduced utility\n>>     arising from greater complexity, while being led to believe in a\n>>     false promise.\n>>\n>>     Just trying to make sure I understand what you\u2019re saying.  Are\n>>     you eluding to that if two of the three private keys get\n>>     compromised there is no gain in security?  Although the\n>>     likelihood of this occurring is lower, it is possible.\n>>\n>>     As more malware targets bitcoins I think the utility is evident. \n>>     Given how final Bitcoin transactions are, I think it\u2019s worth\n>>     trying to find methods to help verify those transactions (if a\n>>     user deems it to be high-risk enough) before the transaction is\n>>     completed.  The balance is trying to devise something that users\n>>     do not find too burdensome.\n>>\n>>     Brian Erdelyi\n>>     ------------------------------------------------------------------------------\n>>     Dive into the World of Parallel Programming. The Go Parallel Website,\n>>     sponsored by Intel and developed in partnership with Slashdot\n>>     Media, is your\n>>     hub for all things parallel software development, from weekly thought\n>>     leadership blogs to news, videos, case studies, tutorials and\n>>     more. Take a\n>>     look and join the conversation now.\n>>     http://goparallel.sourceforge.net/\n>>     _______________________________________________\n>>     Bitcoin-development mailing list\n>>     Bitcoin-development at lists.sourceforge.net\n>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/3878832d/attachment.html>"
            },
            {
                "author": "devrandom",
                "date": "2015-02-02T21:30:03",
                "message_text_only": "There are a couple of attack vectors to consider:\n\n* The recipient's machine is compromised\n* The sender's machine is compromised\n\nBIP-70 and other ways of having the sender verify the destination on a\nsecond device will help protect against sender compromise.  For a\nperson-to-person situation, you could verify the address by voice.\n\nFor the case where the recipient is compromised, you would want to\nverify the address with the recipient's multisig security service.\nExtending BIP-70 to allow multiple signatures would be one way to go\nabout this.  You would at least want to have a web page controlled by\nthe security service where you can verify addresses.\n\nOn 2015-02-02 01:09 PM, Pedro Worcel wrote:\n> Where would you verify that?\n> \n> On 2/3/2015 10:03 AM, Brian Erdelyi wrote:\n>> Joel,\n>>\n>> The mobile device should show you the details of the transaction (i.e.\n>> amount and bitcoin address).  Once you verify this is the intended\n>> recipient and amount you approve it on the mobile device.  If the\n>> address was replaced, you should see this on the mobile device as it\n>> won\u2019t match where you were intending to send it.  You can then not\n>> provide the second signature.\n>>\n>> Brian Erdelyi\n>>\n>>> On Feb 2, 2015, at 4:57 PM, Joel Joonatan Kaartinen\n>>> <joel.kaartinen at gmail.com <mailto:joel.kaartinen at gmail.com>> wrote:\n>>>\n>>> If the attacker has your desktop computer but not the mobile that's\n>>> acting as an independent second factor, how are you then supposed to\n>>> be able to tell you're not signing the correct transaction on the\n>>> mobile? If the address was replaced with the attacker's address,\n>>> it'll look like everything is ok.\n>>>\n>>> - Joel\n>>>\n>>> On Mon, Feb 2, 2015 at 9:58 PM, Brian Erdelyi\n>>> <brian.erdelyi at gmail.com <mailto:brian.erdelyi at gmail.com>> wrote:\n>>>\n>>>\n>>>     > Confusing or not, the reliance on multiple signatures as\n>>>     offering greater security than single relies on the independence\n>>>     of multiple secrets. If the secrets cannot be shown to retain\n>>>     independence in the envisioned threat scenario (e.g. a user's\n>>>     compromised operating system) then the benefit reduces to making\n>>>     the exploit more difficult to write, which, once written, reduces\n>>>     to no benefit. Yet the user still suffers the reduced utility\n>>>     arising from greater complexity, while being led to believe in a\n>>>     false promise.\n>>>\n>>>     Just trying to make sure I understand what you\u2019re saying.  Are\n>>>     you eluding to that if two of the three private keys get\n>>>     compromised there is no gain in security?  Although the\n>>>     likelihood of this occurring is lower, it is possible.\n>>>\n>>>     As more malware targets bitcoins I think the utility is evident. \n>>>     Given how final Bitcoin transactions are, I think it\u2019s worth\n>>>     trying to find methods to help verify those transactions (if a\n>>>     user deems it to be high-risk enough) before the transaction is\n>>>     completed.  The balance is trying to devise something that users\n>>>     do not find too burdensome.\n>>>\n>>>     Brian Erdelyi\n>>>     ------------------------------------------------------------------------------\n>>>     Dive into the World of Parallel Programming. The Go Parallel Website,\n>>>     sponsored by Intel and developed in partnership with Slashdot\n>>>     Media, is your\n>>>     hub for all things parallel software development, from weekly thought\n>>>     leadership blogs to news, videos, case studies, tutorials and\n>>>     more. Take a\n>>>     look and join the conversation now.\n>>>     http://goparallel.sourceforge.net/\n>>>     _______________________________________________\n>>>     Bitcoin-development mailing list\n>>>     Bitcoin-development at lists.sourceforge.net\n>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more. Take a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-- \ndevrandom / Miron"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-02T21:49:11",
                "message_text_only": "> There are a couple of attack vectors to consider:\n> \n> * The recipient's machine is compromised\n> * The sender's machine is compromised\n\n\nExcellent point of the recipient being compromised."
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-02T21:42:34",
                "message_text_only": "Transaction initiated and signed on device #1.  Transaction is sent to device #2.  On device #2 you verify the transaction and if authorized you provide the second signature.\n\nBrian Erdelyi\n\nSent from my iPhone\n\n> On Feb 2, 2015, at 5:09 PM, Pedro Worcel <pedro at worcel.com> wrote:\n> \n> Where would you verify that?\n> \n>> On 2/3/2015 10:03 AM, Brian Erdelyi wrote:\n>> Joel,\n>> \n>> The mobile device should show you the details of the transaction (i.e. amount and bitcoin address).  Once you verify this is the intended recipient and amount you approve it on the mobile device.  If the address was replaced, you should see this on the mobile device as it won\u2019t match where you were intending to send it.  You can then not provide the second signature.\n>> \n>> Brian Erdelyi\n>> \n>>> On Feb 2, 2015, at 4:57 PM, Joel Joonatan Kaartinen <joel.kaartinen at gmail.com> wrote:\n>>> \n>>> If the attacker has your desktop computer but not the mobile that's acting as an independent second factor, how are you then supposed to be able to tell you're not signing the correct transaction on the mobile? If the address was replaced with the attacker's address, it'll look like everything is ok.\n>>> \n>>> - Joel\n>>> \n>>> On Mon, Feb 2, 2015 at 9:58 PM, Brian Erdelyi <brian.erdelyi at gmail.com> wrote:\n>>>> \n>>>> > Confusing or not, the reliance on multiple signatures as offering greater security than single relies on the independence of multiple secrets. If the secrets cannot be shown to retain independence in the envisioned threat scenario (e.g. a user's compromised operating system) then the benefit reduces to making the exploit more difficult to write, which, once written, reduces to no benefit. Yet the user still                           suffers the reduced utility arising from greater complexity, while being led to believe in a false promise.\n>>>> \n>>>> Just trying to make sure I understand what you\u2019re saying.  Are you eluding to that if two of the three private keys get compromised there is no gain in security?  Although the likelihood of this occurring is lower, it is possible.\n>>>> \n>>>> As more malware targets bitcoins I think the utility is evident.  Given how final Bitcoin transactions are, I think it\u2019s worth trying to find methods to help verify those transactions (if a user deems it to be high-risk enough) before the transaction is completed.  The balance is trying to devise something that users do not find too burdensome.\n>>>> \n>>>> Brian Erdelyi\n>>>> ------------------------------------------------------------------------------\n>>>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>>>> sponsored by Intel and developed in partnership with Slashdot Media, is your\n>>>> hub for all things parallel software development, from weekly thought\n>>>> leadership blogs to news, videos, case                             studies, tutorials and more. Take a\n>>>> look and join the conversation now. http://goparallel.sourceforge.net/\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more. Take a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>> \n>> \n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/3d529fe0/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 2358 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/3d529fe0/attachment.p7s>"
            },
            {
                "author": "Pedro Worcel",
                "date": "2015-02-02T21:02:13",
                "message_text_only": "I think what he is saying is that there is no point in having three \nsignatures if they are not segregated in a secure manner. This is to \nsay, if you use your computer as one \"factor\", and a third party website \nas another, but you use the same computer to access the website, there \nis no gain in security.\n\nAnother example would be an android phone. If your computer is \ncompromised and your browser is authenticated to your Google account, \nyou could remotely install an \"app\" on your phone.\n\nI don't know if I understood/explained myself correctly; I think two \nfactor is better than one and there is a security gain if implemented \nsecurely.\n\nCheers!\nPedro\n\nOn 2/3/2015 8:58 AM, Brian Erdelyi wrote:\n>> Confusing or not, the reliance on multiple signatures as offering greater security than single relies on the independence of multiple secrets. If the secrets cannot be shown to retain independence in the envisioned threat scenario (e.g. a user's compromised operating system) then the benefit reduces to making the exploit more difficult to write, which, once written, reduces to no benefit. Yet the user still suffers the reduced utility arising from greater complexity, while being led to believe in a false promise.\n> Just trying to make sure I understand what you\u2019re saying.  Are you eluding to that if two of the three private keys get compromised there is no gain in security?  Although the likelihood of this occurring is lower, it is possible.\n>\n> As more malware targets bitcoins I think the utility is evident.  Given how final Bitcoin transactions are, I think it\u2019s worth trying to find methods to help verify those transactions (if a user deems it to be high-risk enough) before the transaction is completed.  The balance is trying to devise something that users do not find too burdensome.\n>\n> Brian Erdelyi\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-03T07:38:07",
                "message_text_only": "On 02/02/2015 11:58 AM, Brian Erdelyi wrote:>\n>>Confusing or not, the reliance on multiple signatures as offering\n>>greater security than single relies on the independence of multiple\n>secrets. If the secrets cannot be shown to retain independence in the\n>>envisioned threat scenario (e.g. a user's compromised operating\n>>system) then the benefit reduces to making the exploit more difficult\n>>to write, which, once written, reduces to no benefit. Yet the user\n>>still suffers the reduced utility arising from greater complexity,\n>>while being led to believe in a false promise.\n>\n>Just trying to make sure I understand what you\u2019re saying.  Are you\n>eluding to that if two of the three private keys get compromised there\n>is no gain in security?  Although the likelihood of this occurring is\n>lower, it is possible.\n\nNo, that's not it. Sorry for not being clear. Independence of control is\nthe central issue in the analysis of a multiple factor system. If an\nattack compromises one factor there must be no way for that attack to\nreduce the difficulty of obtaining the other factors.\n\nSome factors (secrets), like a fingerprint, aren't very secret at all.\nBut getting someone's fingerprint doesn't also help the attacker get a\nPIN. That factor must be attacked independently. But if the PIN is\nencrypted with the fingerprint in a public store, then the PIN is not\nindependent of the fingerprint and there is really only one secret.\n\nIf multiple factors are coincident (located within the same security\nperimeter) they are compromized coincidentally. Coincidence has the same\neffect as dependence. Consider a credit card with a \"security code\"\nprinted on the back. A successful attack on the leather wallet yields\nboth secrets.\n\nIndividual environments can be compromised with some difficulty (e.g.\ndesktop malware, fingerprint lift, dictionary attack, brute force PIN,\netc.). For the sake of simplicity, let that chance of successful\nindependent attack on any factor be 1 in 2 and the resulting probability\nof successful concurrent attack on any n factors be 1 in 2^n. If m\nfactors are dependent/coincident on others the relation becomes 1 in\n2^(n-m).\n\nAny multi-factor web wallet that handles the user's keys in the browser\nand authenticates the user in the browser to authorize service signing\nis effectively single factor. One attack may be launched by an insider,\nor externally, against the web app, executing in the browser, gaining\ncoincident access to two secrets. Browser/desktop malware can accomplish\nthe same. The difficulty is 1 in 2 vs. the expected 1 in 4.\n\n>As more malware targets bitcoins I think the utility is evident.\n>Given how final Bitcoin transactions are, I think it\u2019s worth trying to\n>find methods to help verify those transactions (if a user deems it to\n>be high-risk enough) before the transaction is completed.  The balance\n>is trying to devise something that users do not find too burdensome.\n\nI'm not questioning the motive, I agree it's worth trying. But trying is\nnot succeeding. Increasing user (and/or system) complexity without\nincreasing integrity or privacy is a poor trade, and worse if the user\nis misled.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/8c1a7db5/attachment.sig>"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-02T18:10:12",
                "message_text_only": "> We're way ahead of you guys ;)\n> \n> https://www.bitcoinauthenticator.org/ <https://www.bitcoinauthenticator.org/>      - does this already, currently in alpha\n\nI\u2019m just late to the party I guess.  Thanks for the links.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/4adf4d36/attachment.html>"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-02T18:07:52",
                "message_text_only": "Martin,\n\nYes, the second signing could be done by a mobile device that I owned and controlled (I wasn't thinking that initially).  I was thinking that online services are popular because of convenience and there should be a better way to address security (privacy issues not withstanding).\n\nI think these are practical approaches and just doing a sanity check.  Thanks for the vote of confidence.\n\nBrian Erdelyi\n\nSent from my iPad\n\n> On Feb 2, 2015, at 1:54 PM, Martin Habov\u0161tiak <martin.habovstiak at gmail.com> wrote:\n> \n> Good idea. I think this could be even better:\n> \n> instead of using third party, send partially signed TX from computer\n> to smartphone. In case, you are paranoid, make 3oo5 address made of\n> two cold storage keys, one on desktop/laptop, one on smartphone, one\n> using third party.\n> If it isn't enough, add requirement of another four keys, so you have\n> three desktops with different OS (Linux, Windows, Mac) and three\n> mobile OS (Android, iOS, Windows Phone), third party and some keys in\n> cold storage. Also, I forgot HW wallets, so at least Trezor and\n> Ledger. I believe this scheme is unpenetrable by anyone, including\n> NSA, FBI, CIA, NBU...\n> \n> Jokes aside, I think leaving out third party is important for privacy reasons.\n> \n> Stay safe!\n> \n> 2015-02-02 18:40 GMT+01:00 Brian Erdelyi <brian.erdelyi at gmail.com>:\n>> Another concept...\n>> \n>> It should be possible to use multisig wallets to protect against malware.  For example, a user could generate a wallet with 3 keys and require a transaction that has been signed by 2 of those keys.  One key is placed in cold storage and anther sent to a third-party.\n>> \n>> It is now possible to generate and sign transactions on the users computer and send this signed transaction to the third-party for the second signature.  This now permits the use of out of band transaction verification techniques before the third party signs the transaction and sends to the blockchain.\n>> \n>> If the third-party is malicious or becomes compromised they would not have the ability to complete transactions as they only have one private key.  If the third-party disappeared, the user could use the key in cold storage to sign transactions and send funds to a new wallet.\n>> \n>> Thoughts?\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more. Take a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-02T18:05:57",
                "message_text_only": "In sending the first-signed transaction to another for second signature, how does the first signer authenticate to the second without compromising the  independence of the two factors?\n\nSent from my iPhone\n\n> On Feb 2, 2015, at 10:40 AM, Brian Erdelyi <brian.erdelyi at gmail.com> wrote:\n> \n> Another concept...\n> \n> It should be possible to use multisig wallets to protect against malware.  For example, a user could generate a wallet with 3 keys and require a transaction that has been signed by 2 of those keys.  One key is placed in cold storage and anther sent to a third-party.\n> \n> It is now possible to generate and sign transactions on the users computer and send this signed transaction to the third-party for the second signature.  This now permits the use of out of band transaction verification techniques before the third party signs the transaction and sends to the blockchain.\n> \n> If the third-party is malicious or becomes compromised they would not have the ability to complete transactions as they only have one private key.  If the third-party disappeared, the user could use the key in cold storage to sign transactions and send funds to a new wallet.\n> \n> Thoughts?\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-02T18:53:14",
                "message_text_only": ">\n> In sending the first-signed transaction to another for second signature,\n> how does the first signer authenticate to the second without compromising\n> the  independence of the two factors?\n\n\nNot sure what you mean. The idea is the second factor displays the\ntransaction and the user confirms it matches what they input to the first\nfactor. Ideally, using BIP70, but I don't know if BA actually uses that\ncurrently.\n\nIt's the same model as the TREZOR, except with a desktop app instead of\nmyTREZOR and a phone instead of a dedicated hardware device.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/3f6e46b1/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-02T22:54:25",
                "message_text_only": "On Feb 2, 2015, at 11:53 AM, Mike Hearn <mike at plan99.net> wrote:\n>> In sending the first-signed transaction to another for second signature, how does the first signer authenticate to the second without compromising the  independence of the two factors?\n> \n> Not sure what you mean. The idea is the second factor displays the transaction and the user confirms it matches what they input to the first factor. Ideally, using BIP70, but I don't know if BA actually uses that currently.\n> \n> It's the same model as the TREZOR, except with a desktop app instead of myTREZOR and a phone instead of a dedicated hardware device. \n\nSorry for the slow reply, traveling.\n\nMy comments were made in reference to this proposal:\n\n> On Feb 2, 2015, at 10:40 AM, Brian Erdelyi <brian.erdelyi at gmail.com> wrote:\n> \n> Another concept...\n> \n> It should be possible to use multisig wallets to protect against malware.  For example, a user could generate a wallet with 3 keys and require a transaction that has been signed by 2 of those keys.  One key is placed in cold storage and anther sent to a third-party.\n> \n> It is now possible to generate and sign transactions on the users computer and send this signed transaction to the third-party for the second signature.  This now permits the use of out of band transaction verification techniques before the third party signs the transaction and sends to the blockchain.\n> \n> If the third-party is malicious or becomes compromised they would not have the ability to complete transactions as they only have one private key.  If the third-party disappeared, the user could use the key in cold storage to sign transactions and send funds to a new wallet.\n> \n> Thoughts?\n\nIn the multisig scenario the presumption is of a user platform compromised by malware. It envisions a user signing a 2 of 3 output with a first signature. The precondition that the platform is compromised implies that this process results in a loss of integrity of the private key, and as such if it were not for the second signature requirement, the malware would be able to spend the output. This may be extended to all of the keys in the wallet.\n\nThe scenario envisions sending the signed transaction to an another (\"third\") party. The objective is for the third party to provide the second signature, thereby spending the output as intended by the user, who is not necessarily the first signer. The send must be authenticated to the user. Otherwise the third party would have to sign anything it received, obviously rendering the second signature pointless. This implies that the compromised platform must transmit a secret, or proof of a secret, to the third party.\n\nThe problem is that the two secrets are not independent if the first platform is compromised. So of course the malware has the ability to sign, impersonate the user and send to the third party. So the third party *must* send the transaction to an *independent* platform for verification by the user, and obtain consent before adding the second signature. The user, upon receiving the transaction details, must be able to verify, on the independent platform, that the details match those of the transaction that user presumably signed. Even for simple transactions this must include amount, address and fees.\n\nThe central assumptions are that, while the second user platform may be compromised, the attack against the second platform is not coordinated with that of the first, nor is the third party in collusion with the first platform.\n\nUpon these assumptions rests the actual security benefit (increased difficulty of the coordinated attack). The strength of these assumptions is an interesting question, since it is hard to quantify. But without independence the entire security model is destroyed and there is thus no protection whatsoever against malware.\n\nSo for example a web-based or other third-party-provisioned implementation of the first platform breaks the anti-collusion assumption. Also, weak comsec allows an attack against the second platform to be carried out against its network. So for example a simple SMS-based confirmation could be executed by the first platform alone and thereby also break the the anti-collusion assumption. This is why I asked how independence is maintained.\n\nThe assumption of a hardware wallet scenario is that the device itself is not compromised. So the scenario is not the same. If the user signs with a hardware wallet, nothing can collude with that process, with one caveat.\n\nWhile a hardware wallet is not subject to onboard malware, it is not inconceivable that its keys could be extracted through probing or other direct attack against the hardware. It's nevertheless an assumption of hardware wallets that these attacks require loss of the hardware. Physical possession constitutes compromise. So the collusion model with a hardware wallet does exist, it just requires device possession. Depending on the implementation the extraction may require a non-trivial amount of time and money.\n\nIn a scenario where the user signs with HW, then sends the transaction to a third party for a second of three signatures, and finally to a second platform for user verification, a HW thief needs to collude with the third party or the second platform before the owner becomes aware of the theft (notifying the third party). This of course implies that keeping both the fist and second platforms in close proximity constitutes collusion from a physical security standpoint. This is probably sufficient justification for not implementing such a model, especially given the cost and complexity of stealing and cracking a well-designed device. A device backup would provide comparable time to recover with far less complexity (and loss of privacy).\n\nIncidentally the hardware wallet idea breaks down once any aspect of the platform or network to which it connects must be trusted, so for these purposes I do not consider certain hybrid models as hardware wallets at all. For example one such device trusts that the compromised computer does not carry out a MITM attack between the signing device and a shared secret entered in parts over time by the user. This reduces to a single factor with no protection against a compromised platform.\n\nOf course these questions address integrity, not privacy. Use of a third party implies loss of privacy to that party, and with weak comsec to the network. Similarly, use of hardware signing devices implies loss of privacy to the compromised platforms with which they exchange transactions.\n\ne\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/ce6eb12b/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-03T00:41:20",
                "message_text_only": "One clarification below.\n\ne\n\nOn 02/02/2015 02:54 PM, Eric Voskuil wrote:\n> On Feb 2, 2015, at 11:53 AM, Mike Hearn wrote:\n>>\n>> In sending the first-signed transaction to another for second\n>> signature, how does the first signer authenticate to the second\n>> without compromising the  independence of the two factors?\n>>\n>> Not sure what you mean. The idea is the second factor displays the\n>> transaction and the user confirms it matches what they input to the\n>> first factor. Ideally, using BIP70, but I don't know if BA actually\n>> uses that currently.\n>>\n>> It's the same model as the TREZOR, except with a desktop app instead\n>> of myTREZOR and a phone instead of a dedicated hardware device. \n> \n> Sorry for the slow reply, traveling.\n> \n> My comments were made in reference to this proposal:\n> \n>>> On Feb 2, 2015, at 10:40 AM, Brian Erdelyi <brian.erdelyi at gmail.com\n>>> <mailto:brian.erdelyi at gmail.com>> wrote:\n>>>\n>>> Another concept...\n>>>\n>>> It should be possible to use multisig wallets to protect against\n>>> malware.  For example, a user could generate a wallet with 3 keys and\n>>> require a transaction that has been signed by 2 of those keys.  One\n>>> key is placed in cold storage and anther sent to a third-party.\n>>>\n>>> It is now possible to generate and sign transactions on the users\n>>> computer and send this signed transaction to the third-party for the\n>>> second signature.  This now permits the use of out of band transaction\n>>> verification techniques before the third party signs the transaction\n>>> and sends to the blockchain.\n>>>\n>>> If the third-party is malicious or becomes compromised they would not\n>>> have the ability to complete transactions as they only have one\n>>> private key.  If the third-party disappeared, the user could use the\n>>> key in cold storage to sign transactions and send funds to a new wallet.\n>>>\n>>> Thoughts?\n\nMy comments below start out with the presumption of user platform\ncompromise, but the same analysis holds for the case where the user\nplatform is clean but a web wallet is compromised. Obviously the idea is\nthat either or both may be compromised, but integrity is retained as\nlong as both are not compromised and in collusion.\n\n> In the multisig scenario the presumption is of a user platform\n> compromised by malware. It envisions a user signing a 2 of 3 output with\n> a first signature. The precondition that the platform is compromised\n> implies that this process results in a loss of integrity of the private\n> key, and as such if it were not for the second signature requirement,\n> the malware would be able to spend the output. This may be extended to\n> all of the keys in the wallet.\n> \n> The scenario envisions sending the signed transaction to an another\n> (\"third\") party. The objective is for the third party to provide the\n> second signature, thereby spending the output as intended by the user,\n> who is not necessarily the first signer. The send must be authenticated\n> to the user. Otherwise the third party would have to sign anything it\n> received, obviously rendering the second signature pointless. This\n> implies that the compromised platform must transmit a secret, or proof\n> of a secret, to the third party.\n> \n> The problem is that the two secrets are not independent if the first\n> platform is compromised. So of course the malware has the ability to\n> sign, impersonate the user and send to the third party. So the third\n> party *must* send the transaction to an *independent* platform for\n> verification by the user, and obtain consent before adding the second\n> signature. The user, upon receiving the transaction details, must be\n> able to verify, on the independent platform, that the details match\n> those of the transaction that user presumably signed. Even for simple\n> transactions this must include amount, address and fees.\n> \n> The central assumptions are that, while the second user platform may be\n> compromised, the attack against the second platform is not coordinated\n> with that of the first, nor is the third party in collusion with the\n> first platform.\n> \n> Upon these assumptions rests the actual security benefit (increased\n> difficulty of the coordinated attack). The strength of these assumptions\n> is an interesting question, since it is hard to quantify. But without\n> independence the entire security model is destroyed and there is thus no\n> protection whatsoever against malware.\n> \n> So for example a web-based or other third-party-provisioned\n> implementation of the first platform breaks the anti-collusion\n> assumption. Also, weak comsec allows an attack against the second\n> platform to be carried out against its network. So for example a simple\n> SMS-based confirmation could be executed by the first platform alone and\n> thereby also break the the anti-collusion assumption. This is why I\n> asked how independence is maintained.\n> \n> The assumption of a hardware wallet scenario is that the device itself\n> is not compromised. So the scenario is not the same. If the user signs\n> with a hardware wallet, nothing can collude with that process, with one\n> caveat.\n> \n> While a hardware wallet is not subject to onboard malware, it is not\n> inconceivable that its keys could be extracted through probing or other\n> direct attack against the hardware. It's nevertheless an assumption of\n> hardware wallets that these attacks require loss of the hardware.\n> Physical possession constitutes compromise. So the collusion model with\n> a hardware wallet does exist, it just requires device possession.\n> Depending on the implementation the extraction may require a non-trivial\n> amount of time and money.\n> \n> In a scenario where the user signs with HW, then sends the transaction\n> to a third party for a second of three signatures, and finally to a\n> second platform for user verification, a HW thief needs to collude with\n> the third party or the second platform before the owner becomes aware of\n> the theft (notifying the third party). This of course implies that\n> keeping both the fist and second platforms in close proximity\n> constitutes collusion from a physical security standpoint. This is\n> probably sufficient justification for not implementing such a model,\n> especially given the cost and complexity of stealing and cracking a\n> well-designed device. A device backup would provide comparable time to\n> recover with far less complexity (and loss of privacy).\n> \n> Incidentally the hardware wallet idea breaks down once any aspect of the\n> platform or network to which it connects must be trusted, so for these\n> purposes I do not consider certain hybrid models as hardware wallets at\n> all. For example one such device trusts that the compromised computer\n> does not carry out a MITM attack between the signing device and a shared\n> secret entered in parts over time by the user. This reduces to a single\n> factor with no protection against a compromised platform.\n> \n> Of course these questions address integrity, not privacy. Use of a third\n> party implies loss of privacy to that party, and with weak comsec to the\n> network. Similarly, use of hardware signing devices implies loss of\n> privacy to the compromised platforms with which they exchange transactions.\n> \n> e\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/458e45cf/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Proposal to address Bitcoin malware",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Voskuil",
                "Brian Erdelyi",
                "Mike Hearn",
                "Martin Habov\u0161tiak",
                "Pedro Worcel",
                "mbde at bitwatch.co",
                "devrandom",
                "Joel Joonatan Kaartinen"
            ],
            "messages_count": 28,
            "total_messages_chars_count": 70439
        }
    },
    {
        "title": "[Bitcoin-development] New BIP: protocol for multisignature payments",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2015-02-01T13:43:45",
                "message_text_only": "If you decide to implement this in an existing or new bitcoinj based\nwallet, then I'm happy to give you pointers on how to do it. Making\none-off, cross platform app specific wallets is pretty easy these days. For\n2-of-3 dispute mediation transactions they'd start out being kind of\nspecialist so asking people to move money from their general spending\nwallet into dispute mediation app isn't unthinkable. Eventually general\npurpose wallets would integrate protocol, UI ideas and maybe code.\n\nAt least, that's how I'd do it.\n\nOn Sun, Feb 1, 2015 at 12:02 AM, Martin Habov\u0161tiak <\nmartin.habovstiak at gmail.com> wrote:\n\n> I didn't consider that, thank you for feedback! I will try to find\n> some time for implementing it. I'll write again then.\n>\n> 2015-01-31 23:50 GMT+02:00 Gavin Andresen <gavinandresen at gmail.com>:\n> > I agree- standards should be descriptive (\"here is how this thing I did\n> > works\") and NOT proscriptive (\"here's what I think will work, lets all\n> try\n> > to do it this way.\").\n> >\n> >\n> > On Sat, Jan 31, 2015 at 2:07 PM, Mike Hearn <mike at plan99.net> wrote:\n> >>>\n> >>> I could look at implementing it someday, but now I'd like to receive\n> >>> feedback from community.\n> >>\n> >>\n> >> IMO it's better to pair a protocol spec with an implementation.\n> >\n> >\n> > --\n> > --\n> > Gavin Andresen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/2b8c8ff8/attachment.html>"
            },
            {
                "author": "Martin Habov\u0161tiak",
                "date": "2015-02-01T14:14:03",
                "message_text_only": "Both wallet and server side implementations will be based on existing\ncode in me-friendly language (C++>Python>anything else). I don't have\na time for it right now but Crypto hackathon in Parallel Polis\n(http://cryptohack.org/) seems like good opportunity for it. I will\nlet you know then.\n\n2015-02-01 14:43 GMT+01:00 Mike Hearn <mike at plan99.net>:\n> If you decide to implement this in an existing or new bitcoinj based wallet,\n> then I'm happy to give you pointers on how to do it. Making one-off, cross\n> platform app specific wallets is pretty easy these days. For 2-of-3 dispute\n> mediation transactions they'd start out being kind of specialist so asking\n> people to move money from their general spending wallet into dispute\n> mediation app isn't unthinkable. Eventually general purpose wallets would\n> integrate protocol, UI ideas and maybe code.\n>\n> At least, that's how I'd do it.\n>\n> On Sun, Feb 1, 2015 at 12:02 AM, Martin Habov\u0161tiak\n> <martin.habovstiak at gmail.com> wrote:\n>>\n>> I didn't consider that, thank you for feedback! I will try to find\n>> some time for implementing it. I'll write again then.\n>>\n>> 2015-01-31 23:50 GMT+02:00 Gavin Andresen <gavinandresen at gmail.com>:\n>> > I agree- standards should be descriptive (\"here is how this thing I did\n>> > works\") and NOT proscriptive (\"here's what I think will work, lets all\n>> > try\n>> > to do it this way.\").\n>> >\n>> >\n>> > On Sat, Jan 31, 2015 at 2:07 PM, Mike Hearn <mike at plan99.net> wrote:\n>> >>>\n>> >>> I could look at implementing it someday, but now I'd like to receive\n>> >>> feedback from community.\n>> >>\n>> >>\n>> >> IMO it's better to pair a protocol spec with an implementation.\n>> >\n>> >\n>> > --\n>> > --\n>> > Gavin Andresen\n>\n>"
            }
        ],
        "thread_summary": {
            "title": "New BIP: protocol for multisignature payments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Martin Habov\u0161tiak"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3221
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Core 0.9.4 not on bitcoin.org?",
        "thread_messages": [
            {
                "author": "xor",
                "date": "2015-02-01T20:08:51",
                "message_text_only": "Why is that?\n\nAlso, is it correct that there wasn't a release candidate before the release? \nSounds dangerous to me.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150201/33933d24/attachment.sig>"
            },
            {
                "author": "Wladimir",
                "date": "2015-02-01T20:40:57",
                "message_text_only": "On Sun, 1 Feb 2015, xor wrote:\n\n> Why is that?\n\nv0.9.4 is not really a release, just a tag in git.\n\nIt contains merely a workaround for a change in OpenSSL which caused \nproblems - see Gregory Maxwell's post.\nAs the releases are statically built against OpenSSL, it is not\nnecessary to upgrade if you use releases from bitcoin.org. Hence no change \non the site.\n\n(but it can be used by people building from source, or distributions \npackages such as the Ubuntu PPA, which unwisely dynamically link OpenSSL)\n\n> Also, is it correct that there wasn't a release candidate before the release?\n> Sounds dangerous to me.\n\nAgain, there hasn't been any 0.9.4 release, neither a release candidate or \nanything else.\nTesting and such should be focused on the 0.10 release candidates.\n\nWladimir"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-02-01T20:41:35",
                "message_text_only": "On Sun, Feb 1, 2015 at 8:08 PM, xor <xor at freenetproject.org> wrote:\n> Why is that?\n\nBecause Binaries on Bitcoin.org have always been unaffected by the\nissue 0.9.4 was released to address.\n\n> Also, is it correct that there wasn't a release candidate before the release?\n> Sounds dangerous to me.\n\nThe changes were tried first by many people as part of git master.\nThis was narrow bug fix backport required to prevent the software from\nno longer working at all for people who compiled it themselves and\nreceived software updates for their system."
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.9.4 not on bitcoin.org?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell",
                "xor",
                "Wladimir"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 1745
        }
    },
    {
        "title": "[Bitcoin-development] Export format for xpub",
        "thread_messages": [
            {
                "author": "Levin Keller",
                "date": "2015-02-02T08:56:51",
                "message_text_only": "Hello everyone,\n\nI think this is my first email to this mailinglist so I will shortly\nintroduce myself:\n\nI am Levin and the CEO of Coyno (www.coyno.com). Based in Berlin,\nmathematician. Bitcoiner since 2011.\n\nAnd now the reason for this email: Andreas (Schildbach) just released a new\nupdate of his wallet. It now provides an export functionality for the m/0'\nkey in order to run read only copies on other devices. We already support\nthe format on our website. Of course we would love for this to become\nstandard. I also updated the Wiki article for Andreas' Wallet:\nhttps://en.bitcoin.it/wiki/Bitcoin_Wallet\n\nHow do you like it? How does this format get standard? Shall I try to get a\npull request to BIP32 passed?\n\nCheers\n\nLevin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/37a91920/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-02T11:33:26",
                "message_text_only": "We generally don't edit BIPs like that after they've been written except to\nadd helpful links, examples etc and other things that don't add new\nfunctionality. For this you'd write a new BIP. It doesn't have to be hard.\nThe process is:\n\n1) Adapt the template BIP and fill it out with your motivation, design,\nrationale and ideally some examples.\n\n2) Post it here and ask Gregory for a BIP number. He will select one\nthrough some magic algorithm I am still reverse engineering ;)\n\n3) People will give feedback and try to spot problems in your spec.\n\nI looked at what Andreas is doing a few days ago - basically it's just an\nxpub string with a ?a=b&c=d query string added to the end, with a hierarchy\ntype specifier and something else I forgot, encoded into a QR code. So it\nshould be a very easy BIP to add.\n\nWhilst you're at it you might want to add an HTTP POST based method,\nthough. Web apps scanning QR codes is kind of clunky compared to just\npicking Coyno from a list in the wallet app and having it all\nauto-magically activate.\n\nOn Mon, Feb 2, 2015 at 9:56 AM, Levin Keller <post at levinkeller.de> wrote:\n\n> Hello everyone,\n>\n> I think this is my first email to this mailinglist so I will shortly\n> introduce myself:\n>\n> I am Levin and the CEO of Coyno (www.coyno.com). Based in Berlin,\n> mathematician. Bitcoiner since 2011.\n>\n> And now the reason for this email: Andreas (Schildbach) just released a\n> new update of his wallet. It now provides an export functionality for the\n> m/0' key in order to run read only copies on other devices. We already\n> support the format on our website. Of course we would love for this to\n> become standard. I also updated the Wiki article for Andreas' Wallet:\n> https://en.bitcoin.it/wiki/Bitcoin_Wallet\n>\n> How do you like it? How does this format get standard? Shall I try to get\n> a pull request to BIP32 passed?\n>\n> Cheers\n>\n> Levin\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150202/c0b014a7/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-02T12:38:53",
                "message_text_only": "On 02/02/2015 12:33 PM, Mike Hearn wrote:\n\n> I looked at what Andreas is doing a few days ago - basically it's just\n> an xpub string with a ?a=b&c=d query string added to the end, with a\n> hierarchy type specifier and something else I forgot, encoded into a QR\n> code.\n\nIt's h=bip32 for the hierarchy used and\nc=123456 for the creation date of the wallet (in seconds since epoch).\n\nI pondered about if we should add a scheme (e.g. \"bitcoin-xpub:\") but\ndecided to start without. The only advantage I currently see would be it\ncould be used on Android to dispatch intents to the right app(s)."
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-02-02T12:59:17",
                "message_text_only": "On 02/02/15 13:38, Andreas Schildbach wrote:\n> It's h=bip32 for the hierarchy used and\n\nDo I understand this correctly and h=bip32 hierarchy means that both\n\nxpub/0/i and xpub/1/j chains are scanned? (So it applies to BIP44\ngenerated xpubs as well?)\n\n> c=123456 for the creation date of the wallet (in seconds since epoch).\n\nUff, I would expect YYYYMMDD there so it's human readable as well.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-02T14:17:41",
                "message_text_only": "On 02/02/2015 01:59 PM, Pavol Rusnak wrote:\n>> It's h=bip32 for the hierarchy used and\n>\n> Do I understand this correctly and h=bip32 hierarchy means that both\n>\n> xpub/0/i and xpub/1/j chains are scanned? (So it applies to BIP44\n> generated xpubs as well?)\n\nYes, except that BIP32-hierarchy and BIP44 differ in some requirements\n(e.g. gap limit).\n\n>> c=123456 for the creation date of the wallet (in seconds since epoch).\n>\n> Uff, I would expect YYYYMMDD there so it's human readable as well.\n\nThose strings are not meant to be read by humans. YYYYMMDD is more\ncomplicated than necessary, given that Bitcoin deals with seconds since\nepoch everywhere."
            },
            {
                "author": "vv01f",
                "date": "2015-02-02T14:47:44",
                "message_text_only": "On 02.02.2015 15:17, Andreas Schildbach wrote:\n>> Uff, I would expect YYYYMMDD there so it's human readable as well.\n> \n> Those strings are not meant to be read by humans. YYYYMMDD is more\n> complicated than necessary, given that Bitcoin deals with seconds since\n> epoch everywhere.\n\nFirst that is a pitty .. as its simply a waste of storage.\n\nbut back to Pavol's point: IMHO no harm to anything, as Bitcoin never\nhas any valid timestamp below ~1230768000 (jan2009) and thus will always\nhave 10 digits.. you can easily identify 8 char long timestamp as the\nproposed format.\nAnd there never is anything wrong with having a transparent, human\nreadable option - especially when it saves 2 bytes in e.g. qr-codes."
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-03T00:02:28",
                "message_text_only": "On 02/02/2015 03:47 PM, vv01f wrote:\n\n>>> Uff, I would expect YYYYMMDD there so it's human readable as well.\n>>\n>> Those strings are not meant to be read by humans. YYYYMMDD is more\n>> complicated than necessary, given that Bitcoin deals with seconds since\n>> epoch everywhere.\n> \n> First that is a pitty .. as its simply a waste of storage.\n> \n> but back to Pavol's point: IMHO no harm to anything, as Bitcoin never\n> has any valid timestamp below ~1230768000 (jan2009) and thus will always\n> have 10 digits.. you can easily identify 8 char long timestamp as the\n> proposed format.\n> And there never is anything wrong with having a transparent, human\n> readable option - especially when it saves 2 bytes in e.g. qr-codes.\n\nPavol's suggestion saves 2 chars only because its just a date. I think\nthe creation date should be at least precise to the hour, if not to the\nminute.\n\nBut anyhow, if everyone prefers a human readble date format I will bow\nto the majority."
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-02-02T14:56:22",
                "message_text_only": "On 02/02/15 15:17, Andreas Schildbach wrote:\n> Yes, except that BIP32-hierarchy and BIP44 differ in some requirements\n> (e.g. gap limit).\n\nRight.\n\nTo me it seems more important to describe how addresses should be\ndiscovered (i.e. to scan xpub/0/i and xpub/1/j chains using gap limit G)\ninstead of how the xpub was created/obtained (bip32 vs bip44).\n\nWhat do you thing about changing ?h=bip32 to something like\n\n?t=01&g=20\n\n- t=01 meaning that chains 0 and 1 should be scanned (feel free to\nchange \"01\" into any other descriptive string)\n- g=20 meaning that gap 20 should be used\n\n> Those strings are not meant to be read by humans. YYYYMMDD is more\n> complicated than necessary, given that Bitcoin deals with seconds since\n> epoch everywhere.\n\nOK :-)\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-03T00:05:06",
                "message_text_only": "On 02/02/2015 03:56 PM, Pavol Rusnak wrote:\n\n> To me it seems more important to describe how addresses should be\n> discovered (i.e. to scan xpub/0/i and xpub/1/j chains using gap limit G)\n> instead of how the xpub was created/obtained (bip32 vs bip44).\n> \n> What do you thing about changing ?h=bip32 to something like\n> \n> ?t=01&g=20\n> \n> - t=01 meaning that chains 0 and 1 should be scanned (feel free to\n> change \"01\" into any other descriptive string)\n> - g=20 meaning that gap 20 should be used\n\nI don't think that parameterizing will work, we can't predict future\nBIPs. It's the same as for BIP43, in the end we agreed on just putting\nthe BIP number."
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-02-03T00:22:51",
                "message_text_only": "On 03/02/15 01:05, Andreas Schildbach wrote:\n> I don't think that parameterizing will work, we can't predict future\n> BIPs. It's the same as for BIP43, in the end we agreed on just putting\n> the BIP number.\n\nHm, let me put the questions the other way around:\n\nWhat gap limit should a wallet use if it encounters h=bip32?\n\nWhat h value should I use for myTREZOR wallets? Which is essentially a\nBIP44 wallet that produces h=bip32 xpubs with gap limit 20 ...\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Levin Keller",
                "date": "2015-02-03T09:33:16",
                "message_text_only": "Why even bother with the specific HD scheme such as BIP32  or BIP44. What\nare the interesting parameters?\n\nRequired:\n\n   - gap limit\n\nOptional:\n\n   - which node of the derivation chain is actually exported (m0' for\n   BIP32, m44'0'account' for BIP44)\n   - which subnodes are used for external and internal purposes\n   - creation date\n\nTo import the data in a read only application it is not important which\nnode one actually gets and in all implementations the subnode of the\nexported node \"0\" is used for external addresses and \"1\" for internal\naddresses.\n\nThere is no usecase to export any higher node than m0' in BIP32 or\nm44'0'account' as one can only derive any child nodes of the higher nodes *with\nthe private master key*. As for lower nodes (like further down the path)\nthere is also no need to export because in all implementations today they\nwill only give around half of the used addresses.\n\nSo I think a more general but very useful export scheme would be:\n\nbitcoin-pub-export:xpub[gibberish]?gaplimit=[number]&path=[path in\nderivation tree]&subchains=[numbers]&creationdate=[unixtimestamp]\n\nWhy not have more descriptive parameters? Saving on data?\n\nI am a big fan of unix timestamps. Would vote for Andreas' format on the\ncreation date.\n\nCheers\n\nLevin\n\n2015-02-03 1:22 GMT+01:00 Pavol Rusnak <stick at gk2.sk>:\n\n> On 03/02/15 01:05, Andreas Schildbach wrote:\n> > I don't think that parameterizing will work, we can't predict future\n> > BIPs. It's the same as for BIP43, in the end we agreed on just putting\n> > the BIP number.\n>\n> Hm, let me put the questions the other way around:\n>\n> What gap limit should a wallet use if it encounters h=bip32?\n>\n> What h value should I use for myTREZOR wallets? Which is essentially a\n> BIP44 wallet that produces h=bip32 xpubs with gap limit 20 ...\n>\n> --\n> Best Regards / S pozdravom,\n>\n> Pavol Rusnak <stick at gk2.sk>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/80057add/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-02-03T10:10:59",
                "message_text_only": "On 03/02/15 10:33, Levin Keller wrote:\n> bitcoin-pub-export:xpub[gibberish]?gaplimit=[number]&path=[path in\n> derivation tree]&subchains=[numbers]&creationdate=[unixtimestamp]\n\nI cannot come up with an usecase where \"path\" parameter would be needed.\nFWIW childnumber and depth are already expressed in xpub itself.\n\nI like the general idea of \"subchains\" parameter, but I would like to\nfurther specify it:\n\na) parameter should contain values described as comma separated\n   list of values (such as 0,1,2,3,4)\n\nb) consecutive values can be shortened via dash (0,1,2,3 == 0-3)\n\nc) should we allow non-consecutive values (e.g. 0,1,3,8)?\n   I am not sure. If not the \"subchains\" param can contain just upper\n   bound of indexes to scan (e.g. \"3\")\n\nd) a wallet uses just the first specified chain to generate receiving\n   addresses, uses the other chains just to add to the balance\n\n   OR should a wallet be able to generate receiving address for second,\n   third, etc. external chain? if yes, we should split \"subchains\" param\n   into \"external\" and \"internal\" params both containing a list of\n   numbers. this seems like an overkill to me and I am fine with using\n   just the first chain as the external one.\n\n> Why not have more descriptive parameters? Saving on data?\n\nYes. The longer the string, the bigger the QR code.\n\n> I am a big fan of unix timestamps. Would vote for Andreas' format on the\n> creation date.\n\nI am not against Unix timestamps, I just said I expected something else\nthere. Unix timestamps have a lot of advantages. Another option that\nmight make sense is the block number.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-03T10:37:31",
                "message_text_only": "On 02/03/2015 11:10 AM, Pavol Rusnak wrote:\n\n> Another option that might make sense is the block number.\n\nNot really IMHO. Keys can be used on multiple blockchains."
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-02-03T10:44:43",
                "message_text_only": "On 03/02/15 11:37, Andreas Schildbach wrote:\n> Not really IMHO. Keys can be used on multiple blockchains.\n\nAh, correct. Timestamp it is.\n\nNitpick: They cannot be used on multiple blockchains according to BIP32.\nIn BIP43 we fixed that. :-)\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-03T10:35:38",
                "message_text_only": "On 02/03/2015 10:33 AM, Levin Keller wrote:\n\n> Why not have more descriptive parameters? Saving on data?\n\nYes. QR codes are very size sensitive."
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-03T10:34:31",
                "message_text_only": "On 02/03/2015 01:22 AM, Pavol Rusnak wrote:\n\n> Hm, let me put the questions the other way around:\n> \n> What gap limit should a wallet use if it encounters h=bip32?\n\nIt should follow the spec. I know BIP32-hierarchy is short on gap\nlimits, which is why (amongst other reasons) I expect\nBIP32-hierarchy-based wallets migrate to a better standard at some time.\n\n> What h value should I use for myTREZOR wallets? Which is essentially a\n> BIP44 wallet that produces h=bip32 xpubs with gap limit 20 ...\n\nIf it follows BIP32, h=bip32 is fine."
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-02-02T12:57:12",
                "message_text_only": "On 02/02/15 12:33, Mike Hearn wrote:\n> We generally don't edit BIPs like that after they've been written except to\n\nI think this could end up in BIP43, which deals with hierarchies and is\nstill in Draft state although widely used. Allocating new BIP seems like\na overkill to me.\n\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Wladimir",
                "date": "2015-02-02T11:38:12",
                "message_text_only": "On Mon, 2 Feb 2015, Levin Keller wrote:\n\n> Hello everyone,\n> I think this is my first email to this mailinglist so I will shortly introduce myself:\n> \n> I am Levin and the CEO of Coyno (www.coyno.com). Based in Berlin, mathematician. Bitcoiner since 2011.\n> \n> And now the reason for this email: Andreas (Schildbach) just released a new update of his wallet. It now provides an export functionality for the m/0' key in order to run read only copies\n> on other devices. We already support the format on our website. Of course we would love for this to become standard. I also updated the Wiki article for Andreas'\n> Wallet:\u00a0https://en.bitcoin.it/wiki/Bitcoin_Wallet\n\nYes, standardizing on a format could be useful.\n\n> How do you like it? How does this format get standard? Shall I try to get a pull request to BIP32 passed?\n\nJust administrative trivia: this would be a new BIP, and not an \namandment to BIP32. Excluding small language errors and \nclarifications in examples, BIPs are not changed after the fact.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Export format for xpub",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Andreas Schildbach",
                "Pavol Rusnak",
                "Mike Hearn",
                "vv01f",
                "Levin Keller"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 15879
        }
    },
    {
        "title": "[Bitcoin-development] [softfork proposal] Strict DER signatures",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2015-02-03T00:44:37",
                "message_text_only": "On Sun, Jan 25, 2015 at 6:48 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> So I think we should just go ahead with R/S length upper bounds as\n> both IsStandard and in STRICTDER.\n\nI would like to fix this at some point in any case.\n\nIf we want to do that, we must at least have signatures with too-long\nR or S values as non-standard.\n\nOne way to do that is to just - right now - add a patch to 0.10 to\nmake those non-standard. This requires another validation flag, with a\nbunch of switching logic.\n\nThe much simpler alternative is just adding this to BIP66's DERSIG\nright now, which is a one-line change that's obviously softforking. Is\nanyone opposed to doing so at this stage?\n\n-- \nPieter"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-02-03T02:21:24",
                "message_text_only": "On Tue, Feb 3, 2015 at 12:44 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> The much simpler alternative is just adding this to BIP66's DERSIG\n> right now, which is a one-line change that's obviously softforking. Is\n> anyone opposed to doing so at this stage?\n\nThats my preference."
            },
            {
                "author": "Wladimir",
                "date": "2015-02-03T12:00:54",
                "message_text_only": "> One way to do that is to just - right now - add a patch to 0.10 to\n> make those non-standard. This requires another validation flag, with a\n> bunch of switching logic.\n>\n> The much simpler alternative is just adding this to BIP66's DERSIG\n> right now, which is a one-line change that's obviously softforking. Is\n> anyone opposed to doing so at this stage?\n\nNot opposed, but is kind of late for 0.10, I had hoped to tag rc4 today.\n\nWladimir"
            },
            {
                "author": "Alex Morcos",
                "date": "2015-02-03T14:30:21",
                "message_text_only": "Could we see a PR that adds it to BIP 66?   Perhaps we'd all agree quickly\nthat its so simple we can just add it...\nIn either case it doesn't seem strictly necessary to me that it was\nnon-standard before it becomes a soft-fork...\n\n\nOn Tue, Feb 3, 2015 at 7:00 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> > One way to do that is to just - right now - add a patch to 0.10 to\n> > make those non-standard. This requires another validation flag, with a\n> > bunch of switching logic.\n> >\n> > The much simpler alternative is just adding this to BIP66's DERSIG\n> > right now, which is a one-line change that's obviously softforking. Is\n> > anyone opposed to doing so at this stage?\n>\n> Not opposed, but is kind of late for 0.10, I had hoped to tag rc4 today.\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/aa4477a0/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-02-03T18:15:18",
                "message_text_only": "On Tue, Feb 3, 2015 at 4:00 AM, Wladimir <laanwj at gmail.com> wrote:\n>> One way to do that is to just - right now - add a patch to 0.10 to\n>> make those non-standard. This requires another validation flag, with a\n>> bunch of switching logic.\n>>\n>> The much simpler alternative is just adding this to BIP66's DERSIG\n>> right now, which is a one-line change that's obviously softforking. Is\n>> anyone opposed to doing so at this stage?\n>\n> Not opposed, but is kind of late for 0.10, I had hoped to tag rc4 today.\n\nI understand it's late, which is also why I ask for opinions. It's\nalso not a priority, but if we release 0.10 without, it will first\nneed a cycle of making this non-standard, and then in a further\nrelease doing a second softfork to enforce it.\n\nIt's a 2-line change; see #5743.\n\n-- \nPieter"
            },
            {
                "author": "Gavin Andresen",
                "date": "2015-02-03T18:19:50",
                "message_text_only": "I think we should just do it, and include it with the other DERSIG changes\nfor 0.10.\n\nOn Tue, Feb 3, 2015 at 1:15 PM, Pieter Wuille <pieter.wuille at gmail.com>\nwrote:\n\n>\n> I understand it's late, which is also why I ask for opinions. It's\n> also not a priority, but if we release 0.10 without, it will first\n> need a cycle of making this non-standard, and then in a further\n> release doing a second softfork to enforce it.\n>\n> It's a 2-line change; see #5743.\n>\n> --\n> Pieter\n>\n>\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/ca2236e4/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-02-03T19:22:07",
                "message_text_only": "+1   I just ran an it-works test on #5743.  Not exhaustive, but I do agree\nit should be included w/ other DERSIG changes.\n\n\nOn Tue, Feb 3, 2015 at 1:19 PM, Gavin Andresen <gavinandresen at gmail.com>\nwrote:\n\n> I think we should just do it, and include it with the other DERSIG changes\n> for 0.10.\n>\n> On Tue, Feb 3, 2015 at 1:15 PM, Pieter Wuille <pieter.wuille at gmail.com>\n> wrote:\n>\n>>\n>> I understand it's late, which is also why I ask for opinions. It's\n>> also not a priority, but if we release 0.10 without, it will first\n>> need a cycle of making this non-standard, and then in a further\n>> release doing a second softfork to enforce it.\n>>\n>> It's a 2-line change; see #5743.\n>>\n>> --\n>> Pieter\n>>\n>>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/664d3568/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-02-03T23:38:42",
                "message_text_only": "On Tue, Feb 3, 2015 at 10:15 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>>> The much simpler alternative is just adding this to BIP66's DERSIG\n>>> right now, which is a one-line change that's obviously softforking. Is\n>>> anyone opposed to doing so at this stage?\n\nI'm retracting this proposed change.\n\nSuhar Daftuas pointed out that there remain edge-cases which are not\ncovered (a 33-byte R or S whose first byte is not a zero). The intent\nhere is really making sure that signature validation and parsing can\nbe entirely separated, and that signature checking itself does not\nneed a third return value (\"invalid encoding\", in addition to \"valid\nsignature\" and \"invalid signature\"). If we don't want to make\nassumptions about how that implementation works, the only guaranteed\nway of doing that is requiring that R and S are in fact within the\nrange allowed by secp256k1, which would require an integer decoder\ninside the signature encoding checker. I consider that to be\nunreasonable.\n\nIn addition, a much cleaner solution that covers this as well has\nalready been proposed: only allow 0 (the empty byte vector) as invalid\nsignature. That would 100% align signature validity with decoding, and\nis much simpler to implement.\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2015-02-06T21:38:40",
                "message_text_only": "On Mon, Jan 26, 2015 at 10:35 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> I'd like to request a BIP number for this.\n>\n> Sure. BIP0066.\n\nFour implementations exist now:\n* for master: https://github.com/bitcoin/bitcoin/pull/5713 (merged)\n* for 0.10.0: https://github.com/bitcoin/bitcoin/pull/5714 (merged,\nand included in 0.10.0rc4)\n* for 0.9.4: https://github.com/bitcoin/bitcoin/pull/5762\n* for 0.8.6: https://github.com/bitcoin/bitcoin/pull/5765\n\nThe 0.8 and 0.9 version have reduced test code, as many tests rely on\nnew test framework code in 0.10 and later, but the implementation code\nis identical. Work to improve that is certainly welcome.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "Strict DER signatures",
            "categories": [
                "Bitcoin-development",
                "softfork proposal"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Alex Morcos",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Pieter Wuille"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 8129
        }
    },
    {
        "title": "[Bitcoin-development] Subject: Re: Proposal to address Bitcoin malware",
        "thread_messages": [
            {
                "author": "Will",
                "date": "2015-02-03T12:04:21",
                "message_text_only": "An idea for the bitcoin malware proposal below, the idea is at the bottom\u2026\n\nUsing a desktop website and mobile device for 2/3 multisig in lieu of a hardware device (trezor) and desktop website (mytrezor) works, but the key is that the device used to input the two signatures\u00a0cannot be in the same band. \u00a0What you are protecting against are MITM attacks. \u00a0The issue is that if a single\u00a0device or network is compromised by malware, or if a party is connecting to a counterparty through a channel with compromised security, inputing 2 signatures through the\u00a0same device/band defeats\u00a0the purpose of 2/3 multisig. \u00a0This is the same as how MITM defeats 2FA via mobile phone if the token is entered into the same website as the password - the token is simply passed through by the attacker to the secure session with the provider, allowing unfettered access or reuse of tokens for transactions other than those intended by the real user.\n\nCompanies have\u00a0found clever ways around MITM attacks using SSL sniff and derivatives by embedding code in mobile apps that communicate not with the website authenticating the user, but with 3rd party company that authenticates the token and passes the authentication to the website through a different secure channel, making the MITM attack far much more difficult. \u00a0The trick here is that instead of one channel, we now have two channels that must be compromised. \u00a0Also, the second channel is between a security company and a (hopefully) professionally run\u00a0financial\u00a0services website. \u00a0There are other approaches to defeat MITM, such as fingerprinting pages to detect spoofs. \u00a0The former (secure 3rd party channel) is very secure but requires a trusted third party. \u00a0The latter (fingerprinting) is a crap shoot with very high\u00a0false positive rates. \u00a0\n\nAnyway, the exact same principles apply here to this conversation. \u00a0The second signature must be presented from a separate band to maintain a higher\u00a0degree of security. \u00a0If one signature occurs via HTTP(s) from application 1, another should be SMS through a carrier network, etc via application 2.\n\nThe trick we need to look at is how to use the bitcoin network as a delivery mechanism to bypass the need for the trusted third party in the example above. \u00a0Instead of the second factor routing through a 3rd party to the intended recipient, we have another option - one that doesn\u2019t require core development either.\n\n1) Sender > signs signature 1 via desktop > bitcoin network 2/3 P2SH\n2) Mobile app also used by sender receives req. from bitcoin network to sign signature - not through the site in 1 (similar to the 2nd channel between the website and security company above)\n3) Sender > signs signature 2 via mobile app (or any separate device\u00a0operating on a different network - heck could be radio) > 2/3 signatures,\u00a0transaction\u00a0authorized\n\nAny wallet service provider can use this model,\u00a0all they must do is develop two independent applications\u00a0such a secure browser plugin and a website, or a mobile app and a website that use 2/3 multisig to authorize transactions. \u00a0No core development required - just better security design and execution by those developing wallets. \u00a0If the protocol could natively communicate via two\u00a0separate\u00a0networks, that might be something to consider, but really developers should already\u00a0have all the tools they need, assuming they are competent.\n\nIf there was a way to perform 2/3 multisig without requiring a second band, performing the function safely by somehow knowing if the service is performed from a compromised device through some sort of on-blockchain anti-malware check by validating the signature of the signing\u00a0application by comparing it to a signature recorded when the multisig address was funded, \u00a0that would be a really neat breakthrough. \u00a0Food for thought, but I can\u2019t see how that could be executed in a way where signatures couldn\u2019t be spoofed from a compromised device. \u00a0If someone cracks that problem, it\u2019s a really big advance for information security.\n\nOn 02/02/2015 02:54 PM, Eric Voskuil wrote:\u00a0\n>\u00a0On Feb 2, 2015, at 11:53 AM, Mike Hearn wrote:\u00a0\n>>\u00a0\n>> In sending the first-signed transaction to another for second\u00a0\n>> signature, how does the first signer authenticate to the second\u00a0\n>> without compromising the independence of the two factors?\u00a0\n>>\u00a0\n>> Not sure what you mean. The idea is the second factor displays the\u00a0\n>> transaction and the user confirms it matches what they input to the\u00a0\n>> first factor. Ideally, using BIP70, but I don't know if BA actually\u00a0\n>> uses that currently.\u00a0\n>>\u00a0\n>> It's the same model as the TREZOR, except with a desktop app instead\u00a0\n>> of myTREZOR and a phone instead of a dedicated hardware device.\u00a0\n>\u00a0\n> Sorry for the slow reply, traveling.\u00a0\n>\u00a0\n> My comments were made in reference to this proposal:\u00a0\n>\u00a0\n>>>\u00a0On Feb 2, 2015, at 10:40 AM, Brian Erdelyi <brian.erdelyi at gmail.com\u00a0\n>>> <mailto:brian.erdelyi at gmail.com>> wrote:\u00a0\n>>>\u00a0\n>>> Another concept...\u00a0\n>>>\u00a0\n>>> It should be possible to use multisig wallets to protect against\u00a0\n>>> malware. For example, a user could generate a wallet with 3 keys and\u00a0\n>>> require a transaction that has been signed by 2 of those keys. One\u00a0\n>>> key is placed in cold storage and anther sent to a third-party.\u00a0\n>>>\u00a0\n>>> It is now possible to generate and sign transactions on the users\u00a0\n>>> computer and send this signed transaction to the third-party for the\u00a0\n>>> second signature. This now permits the use of out of band transaction\u00a0\n>>> verification techniques before the third party signs the transaction\u00a0\n>>> and sends to the blockchain.\u00a0\n>>>\u00a0\n>>> If the third-party is malicious or becomes compromised they would not\u00a0\n>>> have the ability to complete transactions as they only have one\u00a0\n>>> private key. If the third-party disappeared, the user could use the\u00a0\n>>> key in cold storage to sign transactions and send funds to a new wallet.\u00a0\n>>>\u00a0\n>>> Thoughts?\u00a0\n\nMy comments below start out with the presumption of user platform\u00a0\ncompromise, but the same analysis holds for the case where the user\u00a0\nplatform is clean but a web wallet is compromised. Obviously the idea is\u00a0\nthat either or both may be compromised, but integrity is retained as\u00a0\nlong as both are not compromised and in collusion.\u00a0\n\n> In the multisig scenario the presumption is of a user platform\u00a0\n> compromised by malware. It envisions a user signing a 2 of 3 output with\u00a0\n> a first signature. The precondition that the platform is compromised\u00a0\n> implies that this process results in a loss of integrity of the private\u00a0\n> key, and as such if it were not for the second signature requirement,\u00a0\n> the malware would be able to spend the output. This may be extended to\u00a0\n> all of the keys in the wallet.\u00a0\n>\u00a0\n> The scenario envisions sending the signed transaction to an another\u00a0\n> (\"third\") party. The objective is for the third party to provide the\u00a0\n> second signature, thereby spending the output as intended by the user,\u00a0\n> who is not necessarily the first signer. The send must be authenticated\u00a0\n> to the user. Otherwise the third party would have to sign anything it\u00a0\n> received, obviously rendering the second signature pointless. This\u00a0\n> implies that the compromised platform must transmit a secret, or proof\u00a0\n> of a secret, to the third party.\u00a0\n>\u00a0\n> The problem is that the two secrets are not independent if the first\u00a0\n> platform is compromised. So of course the malware has the ability to\u00a0\n> sign, impersonate the user and send to the third party. So the third\u00a0\n> party *must* send the transaction to an *independent* platform for\u00a0\n> verification by the user, and obtain consent before adding the second\u00a0\n> signature. The user, upon receiving the transaction details, must be\u00a0\n> able to verify, on the independent platform, that the details match\u00a0\n> those of the transaction that user presumably signed. Even for simple\u00a0\n> transactions this must include amount, address and fees.\u00a0\n>\u00a0\n> The central assumptions are that, while the second user platform may be\u00a0\n> compromised, the attack against the second platform is not coordinated\u00a0\n> with that of the first, nor is the third party in collusion with the\u00a0\n> first platform.\u00a0\n>\u00a0\n> Upon these assumptions rests the actual security benefit (increased\u00a0\n> difficulty of the coordinated attack). The strength of these assumptions\u00a0\n> is an interesting question, since it is hard to quantify. But without\u00a0\n> independence the entire security model is destroyed and there is thus no\u00a0\n> protection whatsoever against malware.\u00a0\n>\u00a0\n> So for example a web-based or other third-party-provisioned\u00a0\n> implementation of the first platform breaks the anti-collusion\u00a0\n> assumption. Also, weak comsec allows an attack against the second\u00a0\n> platform to be carried out against its network. So for example a simple\u00a0\n> SMS-based confirmation could be executed by the first platform alone and\u00a0\n> thereby also break the the anti-collusion assumption. This is why I\u00a0\n> asked how independence is maintained.\u00a0\n>\u00a0\n> The assumption of a hardware wallet scenario is that the device itself\u00a0\n> is not compromised. So the scenario is not the same. If the user signs\u00a0\n> with a hardware wallet, nothing can collude with that process, with one\u00a0\n> caveat.\u00a0\n>\u00a0\n> While a hardware wallet is not subject to onboard malware, it is not\u00a0\n> inconceivable that its keys could be extracted through probing or other\u00a0\n> direct attack against the hardware. It's nevertheless an assumption of\u00a0\n> hardware wallets that these attacks require loss of the hardware.\u00a0\n> Physical possession constitutes compromise. So the collusion model with\u00a0\n> a hardware wallet does exist, it just requires device possession.\u00a0\n> Depending on the implementation the extraction may require a non-trivial\u00a0\n> amount of time and money.\u00a0\n>\u00a0\n> In a scenario where the user signs with HW, then sends the transaction\u00a0\n> to a third party for a second of three signatures, and finally to a\u00a0\n> second platform for user verification, a HW thief needs to collude with\u00a0\n> the third party or the second platform before the owner becomes aware of\u00a0\n> the theft (notifying the third party). This of course implies that\u00a0\n> keeping both the fist and second platforms in close proximity\u00a0\n> constitutes collusion from a physical security standpoint. This is\u00a0\n> probably sufficient justification for not implementing such a model,\u00a0\n> especially given the cost and complexity of stealing and cracking a\u00a0\n> well-designed device. A device backup would provide comparable time to\u00a0\n> recover with far less complexity (and loss of privacy).\u00a0\n>\u00a0\n> Incidentally the hardware wallet idea breaks down once any aspect of the\u00a0\n> platform or network to which it connects must be trusted, so for these\u00a0\n> purposes I do not consider certain hybrid models as hardware wallets at\u00a0\n> all. For example one such device trusts that the compromised computer\u00a0\n> does not carry out a MITM attack between the signing device and a shared\u00a0\n> secret entered in parts over time by the user. This reduces to a single\u00a0\n> factor with no protection against a compromised platform.\u00a0\n>\u00a0\n> Of course these questions address integrity, not privacy. Use of a third\u00a0\n> party implies loss of privacy to that party, and with weak comsec to the\u00a0\n> network. Similarly, use of hardware signing devices implies loss of\u00a0\n> privacy to the compromised platforms with which they exchange transactions.\u00a0\n>\u00a0\n> e\u00a0\n\n-------------- next part --------------\u00a0\nA non-text attachment was scrubbed...\u00a0\nName: signature.asc\u00a0\nType: application/pgp-signature\u00a0\nSize: 473 bytes\u00a0\nDesc: OpenPGP digital signature\u00a0\n\n------------------------------\u00a0\n\nMessage: 3\u00a0\nDate:\u00a0Mon, 2 Feb 2015\u00a016:44:37 -0800\u00a0\nFrom: Pieter Wuille <pieter.wuille at gmail.com>\u00a0\nSubject: Re: [Bitcoin-development] [softfork proposal] Strict DER\u00a0\nsignatures\u00a0\nTo: Gregory Maxwell <gmaxwell at gmail.com>\u00a0\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\u00a0\nMessage-ID:\u00a0\n<CAPg+sBjjYLf4NZ8ezK7ML_OO-e6C8_V1i12AXejjrgp+wFB-pg at mail.gmail.com>\u00a0\nContent-Type: text/plain; charset=ISO-8859-1\u00a0\n\nOn Sun, Jan 25, 2015 at 6:48 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\u00a0\n> So I think we should just go ahead with R/S length upper bounds as\u00a0\n> both IsStandard and in STRICTDER.\u00a0\n\nI would like to fix this at some point in any case.\u00a0\n\nIf we want to do that, we must at least have signatures with too-long\u00a0\nR or S values as non-standard.\u00a0\n\nOne way to do that is to just - right now - add a patch to 0.10 to\u00a0\nmake those non-standard. This requires another validation flag, with a\u00a0\nbunch of switching logic.\u00a0\n\nThe much simpler alternative is just adding this to BIP66's DERSIG\u00a0\nright now, which is a one-line change that's obviously softforking. Is\u00a0\nanyone opposed to doing so at this stage?\u00a0\n\n--\u00a0\nPieter\u00a0\n\n\n\n------------------------------\u00a0\n\nMessage: 4\u00a0\nDate: Tue,\u00a03 Feb 2015 02:21:24 +0000\u00a0\nFrom: Gregory Maxwell <gmaxwell at gmail.com>\u00a0\nSubject: Re: [Bitcoin-development] [softfork proposal] Strict DER\u00a0\nsignatures\u00a0\nTo: Pieter Wuille <pieter.wuille at gmail.com>\u00a0\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\u00a0\nMessage-ID:\u00a0\n<CAAS2fgQKbsaU5f+UPp8z2nEgXOfNhsFJoY=2j76ArXnBRsiV6g at mail.gmail.com>\u00a0\nContent-Type: text/plain; charset=UTF-8\u00a0\n\nOn Tue, Feb 3, 2015 at 12:44 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\u00a0\n> The much simpler alternative is just adding this to BIP66's DERSIG\u00a0\n> right now, which is a one-line change that's obviously softforking. Is\u00a0\n> anyone opposed to doing so at this stage?\u00a0\n\nThats my preference.\u00a0\n\n\n\n------------------------------\u00a0\n\nMessage: 5\u00a0\nDate:\u00a0Mon, 02 Feb 2015\u00a023:38:07 -0800\u00a0\nFrom: Eric Voskuil <eric at voskuil.org>\u00a0\nSubject: Re: [Bitcoin-development] Proposal to address Bitcoin malware\u00a0\nTo: Brian Erdelyi <brian.erdelyi at gmail.com>\u00a0\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\u00a0\nMessage-ID: <54D07ADF.8060809 at voskuil.org>\u00a0\nContent-Type: text/plain; charset=\"utf-8\"\u00a0\n\nOn 02/02/2015 11:58 AM, Brian Erdelyi wrote:>\u00a0\n>>Confusing or not, the reliance on multiple signatures as offering\u00a0\n>>greater security than single relies on the independence of multiple\u00a0\n>secrets. If the secrets cannot be shown to retain independence in the\u00a0\n>>envisioned threat scenario (e.g. a user's compromised operating\u00a0\n>>system) then the benefit reduces to making the exploit more difficult\u00a0\n>>to write, which, once written, reduces to no benefit. Yet the user\u00a0\n>>still suffers the reduced utility arising from greater complexity,\u00a0\n>>while being led to believe in a false promise.\u00a0\n>\u00a0\n>Just trying to make sure I understand what you?re saying. Are you\u00a0\n>eluding to that if two of the three private keys get compromised there\u00a0\n>is no gain in security? Although the likelihood of this occurring is\u00a0\n>lower, it is possible.\u00a0\n\nNo, that's not it. Sorry for not being clear. Independence of control is\u00a0\nthe central issue in the analysis of a multiple factor system. If an\u00a0\nattack compromises one factor there must be no way for that attack to\u00a0\nreduce the difficulty of obtaining the other factors.\u00a0\n\nSome factors (secrets), like a fingerprint, aren't very secret at all.\u00a0\nBut getting someone's fingerprint doesn't also help the attacker get a\u00a0\nPIN. That factor must be attacked independently. But if the PIN is\u00a0\nencrypted with the fingerprint in a public store, then the PIN is not\u00a0\nindependent of the fingerprint and there is really only one secret.\u00a0\n\nIf multiple factors are coincident (located within the same security\u00a0\nperimeter) they are compromized coincidentally. Coincidence has the same\u00a0\neffect as dependence. Consider a credit card with a \"security code\"\u00a0\nprinted on the back. A successful attack on the leather wallet yields\u00a0\nboth secrets.\u00a0\n\nIndividual environments can be compromised with some difficulty (e.g.\u00a0\ndesktop malware, fingerprint lift, dictionary attack, brute force PIN,\u00a0\netc.). For the sake of simplicity, let that chance of successful\u00a0\nindependent attack on any factor be 1 in 2 and the resulting probability\u00a0\nof successful concurrent attack on any n factors be 1 in 2^n. If m\u00a0\nfactors are dependent/coincident on others the relation becomes 1 in\u00a0\n2^(n-m).\u00a0\n\nAny multi-factor web wallet that handles the user's keys in the browser\u00a0\nand authenticates the user in the browser to authorize service signing\u00a0\nis effectively single factor. One attack may be launched by an insider,\u00a0\nor externally, against the web app, executing in the browser, gaining\u00a0\ncoincident access to two secrets. Browser/desktop malware can accomplish\u00a0\nthe same. The difficulty is 1 in 2 vs. the expected 1 in 4.\u00a0\n\n>As more malware targets bitcoins I think the utility is evident.\u00a0\n>Given how final Bitcoin transactions are, I think it?s worth trying to\u00a0\n>find methods to help verify those transactions (if a user deems it to\u00a0\n>be high-risk enough) before the transaction is completed. The balance\u00a0\n>is trying to devise something that users do not find too burdensome.\u00a0\n\nI'm not questioning the motive, I agree it's worth trying. But trying is\u00a0\nnot succeeding. Increasing user (and/or system) complexity without\u00a0\nincreasing integrity or privacy is a poor trade, and worse if the user\u00a0\nis misled.\u00a0\n\ne\u00a0\n\n-------------- next part --------------\u00a0\nA non-text attachment was scrubbed...\u00a0\nName: signature.asc\u00a0\nType: application/pgp-signature\u00a0\nSize: 473 bytes\u00a0\nDesc: OpenPGP digital signature\u00a0\n\n------------------------------\u00a0\n\n------------------------------------------------------------------------------\u00a0\nDive into the World of Parallel Programming. The Go Parallel Website,\u00a0\nsponsored by Intel and developed in partnership with Slashdot Media, is your\u00a0\nhub for all things parallel software development, from weekly thought\u00a0\nleadership blogs to news, videos, case studies, tutorials and more. Take a\u00a0\nlook and join the conversation now.\u00a0http://goparallel.sourceforge.net/\u00a0\n\n------------------------------\u00a0\n\n_______________________________________________\u00a0\nBitcoin-development mailing list\u00a0\nBitcoin-development at lists.sourceforge.net\u00a0\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\u00a0\n\n\nEnd of Bitcoin-development Digest, Vol 45, Issue 11\u00a0\n***************************************************\u00a0\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/9471fbf8/attachment.html>"
            },
            {
                "author": "Adam Weiss",
                "date": "2015-02-03T19:25:19",
                "message_text_only": ">\n>\n> Using a desktop website and mobile device for 2/3 multisig in lieu of a\n> hardware device (trezor) and desktop website (mytrezor) works, but the key\n> is that the device used to input the two signatures cannot be in the same\n> band.  What you are protecting against are MITM attacks.  The issue is that\n> if a single device or network is compromised by malware, or if a party is\n> connecting to a counterparty through a channel with compromised security,\n> inputing 2 signatures through the same device/band defeats the purpose of\n> 2/3 multisig.\n>\n\nMaybe I'm not following the conversation very well, but if you have a small\nhardware device that first displays a signed payment request (BIP70) and\nthen only will sign what is displayed, how can a MITM attacker do anything\nother than deny service?  They'd have to get malware onto the signing\ndevice, which is the vector that a simplified signing device is\nspecifically designed to mitigate.\n\nTREZOR like devices with BIP70 support and third party cosigning services\nare a solution I really like the sound of.  I suppose though that adding\nBIP70 request signature validation and adding certificate revocation\nsupport starts to balloon the scope of what is supposed to be a very simple\ndevice though.\n\nRegardless, I think a standard for passing partially signed transactions\naround might make sense (maybe a future extension to BIP70), with attention\nto both PC <-> small hardware devices and pushing stuff around on the\nInternet.  It would be great if users had a choice of hardware signing\ndevices, local software and third-party cosigning services that would all\ninteroperate out of the box to enable easy multisig security, which in the\nBTC world subsumes the goals of 2FA.\n\n--adam\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/41e376c5/attachment.html>"
            },
            {
                "author": "Brian Erdelyi",
                "date": "2015-02-03T20:09:54",
                "message_text_only": "> Regardless, I think a standard for passing partially signed transactions around might make sense (maybe a future extension to BIP70), with attention to both PC <-> small hardware devices and pushing stuff around on the Internet.  It would be great if users had a choice of hardware signing devices, local software and third-party cosigning services that would all interoperate out of the box to enable easy multisig security, which in the BTC world subsumes the goals of 2FA.\n\nI think a standard for passing partially signed transactions is a great idea as well.  This would support interoperability of wallets/clients and third-party services (if users choose to use them).\n\nBrian Erdelyi"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-03T21:01:47",
                "message_text_only": ">\n> TREZOR like devices with BIP70 support and third party cosigning services\n> are a solution I really like the sound of.  I suppose though that adding\n> BIP70 request signature validation and adding certificate revocation\n> support starts to balloon the scope of what is supposed to be a very simple\n> device though.\n>\n\nYes, X.509 is ....... unfortunate. We'll have to wait and see how the\nTREZOR team get on with implementing it. TREZOR doesn't have any OS at all\nat the moment, so an implementation of PKIX will probably end up being\nlarger than their existing codebase.\n\nThat said, X.509 parsing is so security critical that the existing\ncodebases for it are by now pretty robust. Touch wood. So just having a\nsuper stripped down OpenSSL implementation is probably good enough.\n\nW.R.T revocation, BIP70 doesn't support this. If your private key leaks\nyou're currently hosed, identity wise, until the certificate expires. This\nis obviously suboptimal. In a world where we all have infinite time and\nresources the right fix will be to piggy back on an X.509 extension being\nproposed in the browser world called \"Must Staple\". It's a bit in the\ncertificate flags that tell the client to expect a stapled OCSP response\nand to hard-fail if none is provided. By requesting the CA set this flag\nwhen you get your certificate issued, you sign up for more pain but more\nsecurity.\n\nAn OCSP stapling extension to BIP70 would probably not be very hard to\nimplement, but it'd be pointless today because the client has no idea\nwhether to expect it or not. The absence of a certificate changes the UI by\nshowing you a random Bitcoin address instead of a human readable name, but\nthe absence of stapled OCSP would not result in any UI change.\n\n\n> Regardless, I think a standard for passing partially signed transactions\n> around might make sense\n>\n\nI'm hoping that the hardware wallet world just standardises on the TREZOR\nprotocol. It's well designed and these devices all have fairly similar\ncapabilities.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/c48adbc9/attachment.html>"
            },
            {
                "author": "Will",
                "date": "2015-02-03T22:58:10",
                "message_text_only": "Hi Adam - the conversation was pretty open regarding the factor / channel used to sign at the bottom. \u00a0No argument from me and I agree completely that hardened single purpose computers are more secure than desktop browsers, browser extensions, SMS, or mobile apps when involved in multisig authorization. \u00a0The point below was that risks with other channels are far higher if auth data is input from two channels through one, such as entering a 2FA phone token and desktop password into the same desktop browser session - MITM phishing attack on websites that bypasses phone 2FA as an example, serendipitously timed yet tragic example of this scam with coinbase today:\u00a0https://www.reddit.com/r/Bitcoin/comments/2ungby/fuck_i_just_got_scammed/\n\nOn the topic of hardened single purpose computers, and I mean no offense to our friends at Trezor, Case, or similar but I think the future of this type of security approach with bitcoin is extremely bright. \u00a0It\u2019s just far more likely to involve chips integrated directly in PC / Mac motherboards and mobile devices / wearables where signing is done in the hardware inaccessible to the OS or BIOS. \u00a0This is a way for mainstream users to use bitcoin securely, integrate it with apps running from popular OS\u2019s and get bitcoin into the internet on a very granular level, and Joe six pack and Sally soccer mom never even know they are using multisig. \u00a0It took 20+ years for people to get used to cards vs. cash. \u00a0The telephone took 50 years to catch on and become cost competitive. I think the key is making it invisible to the user.\n\nFrom:\u00a0Adam Weiss <adam at signal11.com>\nReply:\u00a0Adam Weiss <adam at signal11.com>>\nDate:\u00a0February 3, 2015 at 12:25:20 PM\nTo:\u00a0Will <will.madden at novauri.com>>\nCc:\u00a0bitcoin-development at lists.sourceforge.net <bitcoin-development at lists.sourceforge.net>>\nSubject:\u00a0 Re: [Bitcoin-development] Subject: Re: Proposal to address Bitcoin malware  \n\n\nUsing a desktop website and mobile device for 2/3 multisig in lieu of a hardware device (trezor) and desktop website (mytrezor) works, but the key is that the device used to input the two signatures\u00a0cannot be in the same band.\u00a0 What you are protecting against are MITM attacks.\u00a0 The issue is that if a single\u00a0device or network is compromised by malware, or if a party is connecting to a counterparty through a channel with compromised security, inputing 2 signatures through the\u00a0same device/band defeats\u00a0the purpose of 2/3 multisig. \u00a0\n\nMaybe I'm not following the conversation very well, but if you have a small hardware device that first displays a signed payment request (BIP70) and then only will sign what is displayed, how can a MITM attacker do anything other than deny service?\u00a0 They'd have to get malware onto the signing device, which is the vector that a simplified signing device is specifically designed to mitigate.\n\nTREZOR like devices with BIP70 support and third party cosigning services are a solution I really like the sound of.\u00a0 I suppose though that adding BIP70 request signature validation and adding certificate revocation support starts to balloon the scope of what is supposed to be a very simple device though.\n\nRegardless, I think a standard for passing partially signed transactions around might make sense (maybe a future extension to BIP70), with attention to both PC <-> small hardware devices and pushing stuff around on the Internet.\u00a0 It would be great if users had a choice of hardware signing devices, local software and third-party cosigning services that would all interoperate out of the box to enable easy multisig security, which in the BTC world subsumes the goals of 2FA.\n\n--adam\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/795311df/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-04T01:03:53",
                "message_text_only": "On 02/03/2015 04:04 AM, Will wrote:\n> An idea for the bitcoin malware proposal below, the idea is at the bottom\u2026\n> ...\n> The trick we need to look at is how to use the bitcoin network as a\n> delivery mechanism to bypass the need for the trusted third party in the\n> example above. \n\nUsing the Bitcoin network would be a convenience, certainly not a\nrequirement. Any public store (or other channel accessible to all\nsigners) would do.\n\n> Instead of the second factor routing through a 3rd party\n> to the intended recipient, we have another option - one that doesn\u2019t\n> require core development either.\n\nAbsolutely, there is no need for a trusted third party in the case of\nMFA unless that party has independent judgement in the decision to sign.\nFor example, if the third party is the trustee of a fund from which a\nbeneficiary wants to withdraw.\n\nIf you are just routing a decision back to yourself a third party makes\nno sense. Oddly most of the services in operation today are doing just\nthat. You will end up authenticating to the third party from a platform\nyou control, which means that the platform must be trusted as much as\nthe third party. Why not just trust the platform and no third party? It\ndoesn't reduce the number of factors but it certainly reduces the attack\nsurface.\n\n> 1) Sender > signs signature 1 via desktop > bitcoin network 2/3 P2SH\n> 2) Mobile app also used by sender receives req. from bitcoin network to\n> sign signature - not through the site in 1 (similar to the 2nd channel\n> between the website and security company above)\n> 3) Sender > signs signature 2 via mobile app (or any separate\n> device operating on a different network - heck could be radio) > 2/3\n> signatures, transaction authorized\n\nThere's no need for the devices to be on independent networks. You can\nsafely remove that constraint. The partially-signed transaction can be\nencrypted to the other signatories (for privacy) or it can be sent in\nthe clear. And ultimately all platforms in the scheme are connected to\nthe Internet, even if it's via sneakernet.\n\nThe important requirement is that the signing platforms are independent\nand that the signers inspect the transactions on those platforms. This\npreserves the benefit of MFA, which is that the signing platforms must\nbe compromised independently.\n\n> ...\n> If there was a way to perform 2/3 multisig without requiring a second\n> band, performing the function safely by somehow knowing if the service\n> is performed from a compromised device through some sort of\n> on-blockchain anti-malware check by validating the signature of the\n> signing application by comparing it to a signature recorded when the\n> multisig address was funded,  that would be a really neat breakthrough.\n>  Food for thought, but I can\u2019t see how that could be executed in a way\n> where signatures couldn\u2019t be spoofed from a compromised device.  If\n> someone cracks that problem, it\u2019s a really big advance for information\n> security.\n\nOnce you've done this you are talking about two independent signing\nplatforms. Plug two trustworthy signing devices into a PC and you've\ndone it. This is because the host environment (the PC in this case) is\nnot trusted in the first place. Two untrusted environments are no better\nthan one. It's only if the environments are trusted that they must be\nindependent.\n\nBut therein lies the problem. The physical proximity of two trusted\nhardware devices exposes them to a single attack in the case of physical\ntheft or loss. So to guard against that threat the devices must be\nindependently stored. This presents a problem when it comes to usage.\n\nThis is the central problem of MFA. It's not possible to control\nmultiple factors while not exposing them to compromise. This is true\nwhether we are talking about multiple physical devices or a remote\nservice, since in the remote case the secret must still be accessible to\nthe person in control.\n\nIn the case of truly independent decisions MFA is strongest. But short\nof that there's no reason for a remote third party. One can probably\naccept the risk of securing multiple devices with the home, etc - and\nneeds to do this even if using a third party. On the other hand, walking\naround with all necessary factors, or keeping them in the same safe, is\ntantamount to having just one factor.\n\ne\n\n> On 02/02/2015 02:54 PM, Eric Voskuil wrote: \n>> On Feb 2, 2015, at 11:53 AM\n> <http://airmail.calendar/2015-02-02%2011:53:00%20MST>, Mike Hearn wrote: \n>>> \n>>> In sending the first-signed transaction to another for second \n>>> signature, how does the first signer authenticate to the second \n>>> without compromising the independence of the two factors? \n>>> \n>>> Not sure what you mean. The idea is the second factor displays the \n>>> transaction and the user confirms it matches what they input to the \n>>> first factor. Ideally, using BIP70, but I don't know if BA actually \n>>> uses that currently. \n>>> \n>>> It's the same model as the TREZOR, except with a desktop app instead \n>>> of myTREZOR and a phone instead of a dedicated hardware device. \n>> \n>> Sorry for the slow reply, traveling. \n>> \n>> My comments were made in reference to this proposal: \n>> \n>>>> On Feb 2, 2015, at 10:40 AM\n> <http://airmail.calendar/2015-02-02%2010:40:00%20MST>, Brian Erdelyi\n> <brian.erdelyi at gmail.com <mailto:brian.erdelyi at gmail.com> \n>>>> <mailto:brian.erdelyi at gmail.com>> wrote: \n>>>> \n>>>> Another concept... \n>>>> \n>>>> It should be possible to use multisig wallets to protect against \n>>>> malware. For example, a user could generate a wallet with 3 keys and \n>>>> require a transaction that has been signed by 2 of those keys. One \n>>>> key is placed in cold storage and anther sent to a third-party. \n>>>> \n>>>> It is now possible to generate and sign transactions on the users \n>>>> computer and send this signed transaction to the third-party for the \n>>>> second signature. This now permits the use of out of band transaction \n>>>> verification techniques before the third party signs the transaction \n>>>> and sends to the blockchain. \n>>>> \n>>>> If the third-party is malicious or becomes compromised they would not \n>>>> have the ability to complete transactions as they only have one \n>>>> private key. If the third-party disappeared, the user could use the \n>>>> key in cold storage to sign transactions and send funds to a new wallet. \n>>>> \n>>>> Thoughts? \n> \n> My comments below start out with the presumption of user platform \n> compromise, but the same analysis holds for the case where the user \n> platform is clean but a web wallet is compromised. Obviously the idea is \n> that either or both may be compromised, but integrity is retained as \n> long as both are not compromised and in collusion. \n> \n>> In the multisig scenario the presumption is of a user platform \n>> compromised by malware. It envisions a user signing a 2 of 3 output with \n>> a first signature. The precondition that the platform is compromised \n>> implies that this process results in a loss of integrity of the private \n>> key, and as such if it were not for the second signature requirement, \n>> the malware would be able to spend the output. This may be extended to \n>> all of the keys in the wallet. \n>> \n>> The scenario envisions sending the signed transaction to an another \n>> (\"third\") party. The objective is for the third party to provide the \n>> second signature, thereby spending the output as intended by the user, \n>> who is not necessarily the first signer. The send must be authenticated \n>> to the user. Otherwise the third party would have to sign anything it \n>> received, obviously rendering the second signature pointless. This \n>> implies that the compromised platform must transmit a secret, or proof \n>> of a secret, to the third party. \n>> \n>> The problem is that the two secrets are not independent if the first \n>> platform is compromised. So of course the malware has the ability to \n>> sign, impersonate the user and send to the third party. So the third \n>> party *must* send the transaction to an *independent* platform for \n>> verification by the user, and obtain consent before adding the second \n>> signature. The user, upon receiving the transaction details, must be \n>> able to verify, on the independent platform, that the details match \n>> those of the transaction that user presumably signed. Even for simple \n>> transactions this must include amount, address and fees. \n>> \n>> The central assumptions are that, while the second user platform may be \n>> compromised, the attack against the second platform is not coordinated \n>> with that of the first, nor is the third party in collusion with the \n>> first platform. \n>> \n>> Upon these assumptions rests the actual security benefit (increased \n>> difficulty of the coordinated attack). The strength of these assumptions \n>> is an interesting question, since it is hard to quantify. But without \n>> independence the entire security model is destroyed and there is thus no \n>> protection whatsoever against malware. \n>> \n>> So for example a web-based or other third-party-provisioned \n>> implementation of the first platform breaks the anti-collusion \n>> assumption. Also, weak comsec allows an attack against the second \n>> platform to be carried out against its network. So for example a simple \n>> SMS-based confirmation could be executed by the first platform alone and \n>> thereby also break the the anti-collusion assumption. This is why I \n>> asked how independence is maintained. \n>> \n>> The assumption of a hardware wallet scenario is that the device itself \n>> is not compromised. So the scenario is not the same. If the user signs \n>> with a hardware wallet, nothing can collude with that process, with one \n>> caveat. \n>> \n>> While a hardware wallet is not subject to onboard malware, it is not \n>> inconceivable that its keys could be extracted through probing or other \n>> direct attack against the hardware. It's nevertheless an assumption of \n>> hardware wallets that these attacks require loss of the hardware. \n>> Physical possession constitutes compromise. So the collusion model with \n>> a hardware wallet does exist, it just requires device possession. \n>> Depending on the implementation the extraction may require a non-trivial \n>> amount of time and money. \n>> \n>> In a scenario where the user signs with HW, then sends the transaction \n>> to a third party for a second of three signatures, and finally to a \n>> second platform for user verification, a HW thief needs to collude with \n>> the third party or the second platform before the owner becomes aware of \n>> the theft (notifying the third party). This of course implies that \n>> keeping both the fist and second platforms in close proximity \n>> constitutes collusion from a physical security standpoint. This is \n>> probably sufficient justification for not implementing such a model, \n>> especially given the cost and complexity of stealing and cracking a \n>> well-designed device. A device backup would provide comparable time to \n>> recover with far less complexity (and loss of privacy). \n>> \n>> Incidentally the hardware wallet idea breaks down once any aspect of the \n>> platform or network to which it connects must be trusted, so for these \n>> purposes I do not consider certain hybrid models as hardware wallets at \n>> all. For example one such device trusts that the compromised computer \n>> does not carry out a MITM attack between the signing device and a shared \n>> secret entered in parts over time by the user. This reduces to a single \n>> factor with no protection against a compromised platform. \n>> \n>> Of course these questions address integrity, not privacy. Use of a third \n>> party implies loss of privacy to that party, and with weak comsec to the \n>> network. Similarly, use of hardware signing devices implies loss of \n>> privacy to the compromised platforms with which they exchange transactions. \n>> \n>> e \n> \n> -------------- next part -------------- \n> A non-text attachment was scrubbed... \n> Name: signature.asc \n> Type: application/pgp-signature \n> Size: 473 bytes \n> Desc: OpenPGP digital signature \n> \n> ------------------------------ \n> \n> Message: 3 \n> Date: Mon, 2 Feb 2015\n> <http://airmail.calendar/2015-02-02%2012:00:00%20MST> 16:44:37 -0800\n> <http://airmail.calendar/2015-02-03%2017:44:37%20MST> \n> From: Pieter Wuille <pieter.wuille at gmail.com\n> <mailto:pieter.wuille at gmail.com>> \n> Subject: Re: [Bitcoin-development] [softfork proposal] Strict DER \n> signatures \n> To: Gregory Maxwell <gmaxwell at gmail.com <mailto:gmaxwell at gmail.com>> \n> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net\n> <mailto:bitcoin-development at lists.sourceforge.net>> \n> Message-ID: \n> <CAPg+sBjjYLf4NZ8ezK7ML_OO-e6C8_V1i12AXejjrgp+wFB-pg at mail.gmail.com\n> <mailto:CAPg+sBjjYLf4NZ8ezK7ML_OO-e6C8_V1i12AXejjrgp+wFB-pg at mail.gmail.com>> \n> Content-Type: text/plain; charset=ISO-8859-1 \n> \n> On Sun, Jan 25, 2015 at 6:48 AM, Gregory Maxwell <gmaxwell at gmail.com\n> <mailto:gmaxwell at gmail.com>> wrote: \n>> So I think we should just go ahead with R/S length upper bounds as \n>> both IsStandard and in STRICTDER. \n> \n> I would like to fix this at some point in any case. \n> \n> If we want to do that, we must at least have signatures with too-long \n> R or S values as non-standard. \n> \n> One way to do that is to just - right now - add a patch to 0.10 to \n> make those non-standard. This requires another validation flag, with a \n> bunch of switching logic. \n> \n> The much simpler alternative is just adding this to BIP66's DERSIG \n> right now, which is a one-line change that's obviously softforking. Is \n> anyone opposed to doing so at this stage? \n> \n> -- \n> Pieter \n> \n> \n> \n> ------------------------------ \n> \n> Message: 4 \n> Date: Tue, 3 Feb 2015 02:21:24 +0000\n> <http://airmail.calendar/2015-02-02%2019:21:24%20MST> \n> From: Gregory Maxwell <gmaxwell at gmail.com <mailto:gmaxwell at gmail.com>> \n> Subject: Re: [Bitcoin-development] [softfork proposal] Strict DER \n> signatures \n> To: Pieter Wuille <pieter.wuille at gmail.com\n> <mailto:pieter.wuille at gmail.com>> \n> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net\n> <mailto:bitcoin-development at lists.sourceforge.net>> \n> Message-ID: \n> <CAAS2fgQKbsaU5f+UPp8z2nEgXOfNhsFJoY=2j76ArXnBRsiV6g at mail.gmail.com\n> <mailto:CAAS2fgQKbsaU5f+UPp8z2nEgXOfNhsFJoY=2j76ArXnBRsiV6g at mail.gmail.com>> \n> Content-Type: text/plain; charset=UTF-8 \n> \n> On Tue, Feb 3, 2015 at 12:44 AM, Pieter Wuille <pieter.wuille at gmail.com\n> <mailto:pieter.wuille at gmail.com>> wrote: \n>> The much simpler alternative is just adding this to BIP66's DERSIG \n>> right now, which is a one-line change that's obviously softforking. Is \n>> anyone opposed to doing so at this stage? \n> \n> Thats my preference. \n> \n> \n> \n> ------------------------------ \n> \n> Message: 5 \n> Date: Mon, 02 Feb 2015\n> <http://airmail.calendar/2015-02-02%2012:00:00%20MST> 23:38:07 -0800\n> <http://airmail.calendar/2015-02-04%2000:38:07%20MST> \n> From: Eric Voskuil <eric at voskuil.org <mailto:eric at voskuil.org>> \n> Subject: Re: [Bitcoin-development] Proposal to address Bitcoin malware \n> To: Brian Erdelyi <brian.erdelyi at gmail.com\n> <mailto:brian.erdelyi at gmail.com>> \n> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net\n> <mailto:bitcoin-development at lists.sourceforge.net>> \n> Message-ID: <54D07ADF.8060809 at voskuil.org\n> <mailto:54D07ADF.8060809 at voskuil.org>> \n> Content-Type: text/plain; charset=\"utf-8\" \n> \n> On 02/02/2015 11:58 AM, Brian Erdelyi wrote:> \n>>>Confusing or not, the reliance on multiple signatures as offering \n>>>greater security than single relies on the independence of multiple \n>>secrets. If the secrets cannot be shown to retain independence in the \n>>>envisioned threat scenario (e.g. a user's compromised operating \n>>>system) then the benefit reduces to making the exploit more difficult \n>>>to write, which, once written, reduces to no benefit. Yet the user \n>>>still suffers the reduced utility arising from greater complexity, \n>>>while being led to believe in a false promise. \n>> \n>>Just trying to make sure I understand what you?re saying. Are you \n>>eluding to that if two of the three private keys get compromised there \n>>is no gain in security? Although the likelihood of this occurring is \n>>lower, it is possible. \n> \n> No, that's not it. Sorry for not being clear. Independence of control is \n> the central issue in the analysis of a multiple factor system. If an \n> attack compromises one factor there must be no way for that attack to \n> reduce the difficulty of obtaining the other factors. \n> \n> Some factors (secrets), like a fingerprint, aren't very secret at all. \n> But getting someone's fingerprint doesn't also help the attacker get a \n> PIN. That factor must be attacked independently. But if the PIN is \n> encrypted with the fingerprint in a public store, then the PIN is not \n> independent of the fingerprint and there is really only one secret. \n> \n> If multiple factors are coincident (located within the same security \n> perimeter) they are compromized coincidentally. Coincidence has the same \n> effect as dependence. Consider a credit card with a \"security code\" \n> printed on the back. A successful attack on the leather wallet yields \n> both secrets. \n> \n> Individual environments can be compromised with some difficulty (e.g. \n> desktop malware, fingerprint lift, dictionary attack, brute force PIN, \n> etc.). For the sake of simplicity, let that chance of successful \n> independent attack on any factor be 1 in 2 and the resulting probability \n> of successful concurrent attack on any n factors be 1 in 2^n. If m \n> factors are dependent/coincident on others the relation becomes 1 in \n> 2^(n-m). \n> \n> Any multi-factor web wallet that handles the user's keys in the browser \n> and authenticates the user in the browser to authorize service signing \n> is effectively single factor. One attack may be launched by an insider, \n> or externally, against the web app, executing in the browser, gaining \n> coincident access to two secrets. Browser/desktop malware can accomplish \n> the same. The difficulty is 1 in 2 vs. the expected 1 in 4. \n> \n>>As more malware targets bitcoins I think the utility is evident. \n>>Given how final Bitcoin transactions are, I think it?s worth trying to \n>>find methods to help verify those transactions (if a user deems it to \n>>be high-risk enough) before the transaction is completed. The balance \n>>is trying to devise something that users do not find too burdensome. \n> \n> I'm not questioning the motive, I agree it's worth trying. But trying is \n> not succeeding. Increasing user (and/or system) complexity without \n> increasing integrity or privacy is a poor trade, and worse if the user \n> is misled. \n> \n> e \n> \n> -------------- next part -------------- \n> A non-text attachment was scrubbed... \n> Name: signature.asc \n> Type: application/pgp-signature \n> Size: 473 bytes \n> Desc: OpenPGP digital signature \n> \n> ------------------------------ \n> \n> ------------------------------------------------------------------------------ \n> Dive into the World of Parallel Programming. The Go Parallel Website, \n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your \n> hub for all things parallel software development, from weekly thought \n> leadership blogs to news, videos, case studies, tutorials and more. Take a \n> look and join the conversation now. http://goparallel.sourceforge.net/ \n> \n> ------------------------------ \n> \n> _______________________________________________ \n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net\n> <mailto:Bitcoin-development at lists.sourceforge.net> \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development \n> \n> \n> End of Bitcoin-development Digest, Vol 45, Issue 11 \n> *************************************************** \n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150203/0409462f/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Subject: Re: Proposal to address Bitcoin malware",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Weiss",
                "Eric Voskuil",
                "Brian Erdelyi",
                "Mike Hearn",
                "Will"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 47658
        }
    },
    {
        "title": "[Bitcoin-development] Merged mining a side chain with proof of burn on parent chain",
        "thread_messages": [
            {
                "author": "Isidor Zeuner",
                "date": "2015-02-04T13:54:43",
                "message_text_only": "Hi there,\n\ncomments in-line:\n\n> > I later wrote up the idea in the context of adding Zerocoin to\n> > Bitcoin:\n> >\n> > http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02472.html\n> >\n\nFor the sake of maximum clarity with respect to modelling the value of\na Bitcoin, I don't think that approaches which change the number\nof coins that can possibly be circulated should be encouraged.\n\nSo, I like the idea of having the \"sacrificed\" coins appearing in the\nmining fees in a future block. But what is meant with OP_DEPTH in this\ncontext? From what I read, this operation just manipulates the stack\nsize when evaluating the script, so I don't see how it would\naffect miner incentives.\n\nBest regards,\n\nIsidor"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-06T01:34:31",
                "message_text_only": "On Wed, Feb 04, 2015 at 02:54:43PM +0100, Isidor Zeuner wrote:\n> Hi there,\n> \n> comments in-line:\n> \n> >> I later wrote up the idea in the context of adding Zerocoin to\n> >> Bitcoin:\n> >>\n> >> http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02472.html\n> >>\n> \n> For the sake of maximum clarity with respect to modelling the value of\n> a Bitcoin, I don't think that approaches which change the number\n> of coins that can possibly be circulated should be encouraged.\n> \n> So, I like the idea of having the \"sacrificed\" coins appearing in the\n> mining fees in a future block. But what is meant with OP_DEPTH in this\n> context? From what I read, this operation just manipulates the stack\n> size when evaluating the script, so I don't see how it would\n> affect miner incentives.\n\nOh, where I was saying OP_DEPTH, I was referring to a *hypothetical*\nopcode; I'd forgotten when I wrote that post that OP_DEPTH is an real\nopcode.\n\nThese days I'd suggest you use the (upcoming on BTC/live on Viacoin)\nOP_CHECKLOCKTIMEVERIFY opcode instead. Pretty simple really:\n\n    <current blockheight + 1 year worth of blocks> CHECKLOCKTIMEVERIFY\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000165ecbd638ec09226f84c34d3d775d34ca5df4abfa8cb57c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/415940f5/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Merged mining a side chain with proof of burn on parent chain",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Isidor Zeuner",
                "Peter Todd"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2248
        }
    },
    {
        "title": "[Bitcoin-development] determining change addresses using the least significant digits",
        "thread_messages": [
            {
                "author": "Isidor Zeuner",
                "date": "2015-02-04T14:23:23",
                "message_text_only": "Hi there,\n\ntraditionally, the Bitcoin client strives to hide which output\naddresses are change addresses going back to the payer. However,\nespecially with today's dynamically calculated miner fees, this\nmay often be ineffective:\n\nA user sending a payment using the Bitcoin client will usually enter\nthe payment amount only up to the number of digits which are\nconsidered to be significant enough. So, the least significant digits\nwill often be zero for the payment. With dynamically calculated miner\nfees, this will often not be the case for the change amount, making it\neasy for an observer to classify the output addresses.\n\nA possible approach to handle this issue would be to add a randomized\noffset amount to the payment amount. This offset amount can be small\nin comparison to the payment amount.\n\nAny thoughts?\n\nBest regards,\n\nIsidor"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-06T01:17:26",
                "message_text_only": "On Wed, Feb 04, 2015 at 03:23:23PM +0100, Isidor Zeuner wrote:\n> Hi there,\n> \n> traditionally, the Bitcoin client strives to hide which output\n> addresses are change addresses going back to the payer. However,\n> especially with today's dynamically calculated miner fees, this\n> may often be ineffective:\n> \n> A user sending a payment using the Bitcoin client will usually enter\n> the payment amount only up to the number of digits which are\n> considered to be significant enough. So, the least significant digits\n> will often be zero for the payment. With dynamically calculated miner\n> fees, this will often not be the case for the change amount, making it\n> easy for an observer to classify the output addresses.\n> \n> A possible approach to handle this issue would be to add a randomized\n> offset amount to the payment amount. This offset amount can be small\n> in comparison to the payment amount.\n> \n> Any thoughts?\n\nHave you looked at Armory? IIRC they do this kind of stuff.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000165ecbd638ec09226f84c34d3d775d34ca5df4abfa8cb57c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/8e961ba2/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-06T03:16:13",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 02/04/2015 02:23 PM, Isidor Zeuner wrote:\n> Hi there,\n> \n> traditionally, the Bitcoin client strives to hide which output \n> addresses are change addresses going back to the payer. However, \n> especially with today's dynamically calculated miner fees, this may\n> often be ineffective:\n> \n> A user sending a payment using the Bitcoin client will usually\n> enter the payment amount only up to the number of digits which are \n> considered to be significant enough. So, the least significant\n> digits will often be zero for the payment. With dynamically\n> calculated miner fees, this will often not be the case for the\n> change amount, making it easy for an observer to classify the\n> output addresses.\n> \n> A possible approach to handle this issue would be to add a\n> randomized offset amount to the payment amount. This offset amount\n> can be small in comparison to the payment amount.\n\nAnother possible approach is to randomize the number of change outputs\nfrom transaction to transaction.\n\nDoing this, it would be possible to make change outputs that mimic\nreal spends (low number of s.d.)\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCAAGBQJU1DH9AAoJECpf2nDq2eYjt2gP/3gpojJey2URkWWk0sg9dpHU\nOsD37TCbrwUaS/K8UMKsuc45FSJU/EeYpaVz9r1Ifm/IeaFYPIX0tEm17n3hkcAG\nQPmt/xAZn9GVyPWYKjmVDmx574pqiJLeZh8bP788sZsGc4Gk7NNJniVGLtsmvFCb\nZOtwS8v7UuJZx6awydrpNhw/+SsQn9Xdb8fcLqmFKWDpG2Mlrv+ds34NMlGbfO2r\nPqCMw1Y12J0HXLisOCGQNZNdG9mVjKw3MP0GGjUlOM+ibrrorqoO5Ifo2RGuElgw\nLZkzzDzg6kO8iuNOV7Jg1lz5WftRjgLRSCcMq4V+793zGJW9BeISeDcKQ2ZlWMXB\nHu83m4vCYOJeECdKGWlhyTmKNNHshsiPz3SBDLxP8uR80UkS3waDIXwLxGX9Pa63\nuleaZ2qHQ/0UdC9opN3Snn33M701dHNJH9iXfhf/MVnUZ0FjzsLXaJ0F0208ZxCX\nqGCAv5y1ijrDlCLTvakZJRIruXgxNPqtErzP9GtgXeGeDc8tRv00WiM9Olpu0EXd\nyjhAZGydcE3Ec2cNo+teWjeDt4Ga4OYDb7i08eegaDuj5MCDcDtlgfwNjdKbre1x\nS7pKKDn8V03/WST1x9fWjM04NxeSjJ0yRjOAxkLV/mlDX6lQEYJL/W+MJLvpOnTC\nLtZrkSmSTJ7ZR0tMgpAe\n=8EVe\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 14416 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150206/52b645a3/attachment.bin>"
            },
            {
                "author": "Wladimir",
                "date": "2015-02-06T10:11:28",
                "message_text_only": "On Wed, Feb 4, 2015 at 2:23 PM, Isidor Zeuner\n<cryptocurrencies at quidecco.de> wrote:\n\n> A possible approach to handle this issue would be to add a randomized\n> offset amount to the payment amount. This offset amount can be small\n> in comparison to the payment amount.\n>\n> Any thoughts?\n\nAdding/subtracting a randomized offset amount is one way, but there\nhave also been more sophisticated ideas to obfuscate the amount, e.g.\nby adding multiple change outputs or even distributing over multiple\ntransactions (potentially coinjoined for further privacy).\n\nMike Hearn had some ideas regarding obfuscation of payment amounts,\nwhich still make sense, and he wrote about them here:\nhttps://medium.com/@octskyward/merge-avoidance-7f95a386692f\n\nWladimir"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-02-06T15:08:50",
                "message_text_only": "Yes.  You can certainly add additional inputs and outputs -- and as such\nyou can increase privacy and defrag your wallet at the same time.\n\n\nOn Fri, Feb 6, 2015 at 2:11 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> On Wed, Feb 4, 2015 at 2:23 PM, Isidor Zeuner\n> <cryptocurrencies at quidecco.de> wrote:\n>\n> > A possible approach to handle this issue would be to add a randomized\n> > offset amount to the payment amount. This offset amount can be small\n> > in comparison to the payment amount.\n> >\n> > Any thoughts?\n>\n> Adding/subtracting a randomized offset amount is one way, but there\n> have also been more sophisticated ideas to obfuscate the amount, e.g.\n> by adding multiple change outputs or even distributing over multiple\n> transactions (potentially coinjoined for further privacy).\n>\n> Mike Hearn had some ideas regarding obfuscation of payment amounts,\n> which still make sense, and he wrote about them here:\n> https://medium.com/@octskyward/merge-avoidance-7f95a386692f\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150206/577d891c/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-06T17:50:26",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 02/06/2015 03:08 PM, Jeff Garzik wrote:\n> Yes.  You can certainly add additional inputs and outputs -- and as\n> such you can increase privacy and defrag your wallet at the same\n> time.\n\nA lot could be done to make regular spends resemble CoinJoin\ntransactions and vice verse.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCAAGBQJU1P7iAAoJECpf2nDq2eYjeXwQAJGdVdYta5CddfL+xyFNG2+l\nRMxkSABfgWQF6mDus6ul+EhRhOYEveuuukbK2ibcnY2U4H9ecb8Gttno9+Wi0YfM\nzcu1Wt/j5cJyUFjO9owZO5gse5mTCt+1njgNIGMlXHHbFEHc5OavXEgkvh8YcL/j\nE8Kk4YNM5Ovp47vh1ihkB4Zo+ihu5oMuY4vbBO7So4BIe8KaSLOTsOAccT17bWGo\njtd6KdjfqsLSjhQoVtuQAsx9AGUS+jfjBRWSnwkeAdd4G4BE87/7DCdYnczFKhds\nkVwnHODA0+5dwEwZ/ChipKVzAVLVZ2a7BXUenax70P1QgfG8WwL0tueoKviRBLfc\n6Xa80GHGo84qeGEkiste1qnG4XZWwi6pnTSTwP1f5CtVvGvfYRysHsMCm82Mr7vA\npwrQULv6fkhI63xB+kfcXBPr0WIVrilVrEtGcypzIbPbQgRQ6k3Wg66zLoQTc8vA\nw2pOZYrEU1Rmfiv27/MLdvSuWzR0kF+nidwCBxUYBuKAA4K0Y8GBH0FApp9JmCEo\nLXIY4RU3sCCbP3C1qloN8k99q8+CDTwrZpzi2zi3r0zRorg/1tTXqavicE9KPC2j\nymk+eFFJhqG51o/d6irzA5R+hK/T2JatDhneEwTBetsrbXq0D9jiN3+KB+vME0wf\nKJhXhGbElNyz7eA4EOMt\n=zcqb\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 14416 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150206/31effa21/attachment.bin>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-02-06T18:21:09",
                "message_text_only": "On Wed, Feb 4, 2015 at 2:23 PM, Isidor Zeuner\n<cryptocurrencies at quidecco.de> wrote:\n> Hi there,\n>\n> traditionally, the Bitcoin client strives to hide which output\n> addresses are change addresses going back to the payer. However,\n> especially with today's dynamically calculated miner fees, this\n> may often be ineffective:\n>\n> A user sending a payment using the Bitcoin client will usually enter\n> the payment amount only up to the number of digits which are\n> considered to be significant enough. So, the least significant digits\n> will often be zero for the payment. With dynamically calculated miner\n> fees, this will often not be the case for the change amount, making it\n> easy for an observer to classify the output addresses.\n>\n> A possible approach to handle this issue would be to add a randomized\n> offset amount to the payment amount. This offset amount can be small\n> in comparison to the payment amount.\n\nSending someone too much can really play hell with their accounting.\nUnless you know they're okay with it, I wouldn't suggest it.\n\nI often randomly round up the output when I'm paying to a depository\naccount... and I've thought that would be a useful feature to have,\nbut I dunno how to usefully present a UI for \"pay at least X but\nyou're allowed to round-up up to 0.01 BTC more\".\n\n\nAnother strategy is this: create two change outputs, with uniform\nprobablity make one equal to your payment amount (which is also nice\nbecause if your payment amount models future payment amount the change\nwill be usefully sized) or split your change evenly."
            }
        ],
        "thread_summary": {
            "title": "determining change addresses using the least significant digits",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Isidor Zeuner",
                "Wladimir",
                "Peter Todd",
                "Gregory Maxwell",
                "Justus Ranvier"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 10328
        }
    },
    {
        "title": "[Bitcoin-development] [SPAM] Re: determining change addresses using the least significant digits",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2015-02-06T04:08:42",
                "message_text_only": "On Friday, February 06, 2015 3:16:13 AM Justus Ranvier wrote:\n> On 02/04/2015 02:23 PM, Isidor Zeuner wrote:\n> > Hi there,\n> > \n> > traditionally, the Bitcoin client strives to hide which output\n> > addresses are change addresses going back to the payer. However,\n> > especially with today's dynamically calculated miner fees, this may\n> > often be ineffective:\n> > \n> > A user sending a payment using the Bitcoin client will usually\n> > enter the payment amount only up to the number of digits which are\n> > considered to be significant enough. So, the least significant\n> > digits will often be zero for the payment. With dynamically\n> > calculated miner fees, this will often not be the case for the\n> > change amount, making it easy for an observer to classify the\n> > output addresses.\n> > \n> > A possible approach to handle this issue would be to add a\n> > randomized offset amount to the payment amount. This offset amount\n> > can be small in comparison to the payment amount.\n> \n> Another possible approach is to randomize the number of change outputs\n> from transaction to transaction.\n> \n> Doing this, it would be possible to make change outputs that mimic\n> real spends (low number of s.d.)\n\nThis uses more data.\n\nWhy not just round change down (effectively rounding fee up)?\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "Re: determining change addresses using the least significant digits",
            "categories": [
                "Bitcoin-development",
                "SPAM"
            ],
            "authors": [
                "Luke Dashjr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1292
        }
    },
    {
        "title": "[Bitcoin-development] Proposal for P2P Wireless (Bluetooth LE) transfer of Payment URI",
        "thread_messages": [
            {
                "author": "Paul Puey",
                "date": "2015-02-05T08:01:31",
                "message_text_only": "Airbitz has developed and implemented a method for communicating a bitcoin\nURI across Bluetooth (BLE) or any other P2P, mid range, wireless, broadcast\nmedium. The currently documented implementation is available in our iOS and\nAndroid mobile wallet (updated Android version with BLE coming in about 1\nweek). We would like to have the BIP pulled into Github for review and\ndiscussion. Here is the current BIP:\n\n\nBIP: TBD\n\nTitle: P2P Wireless URI transfer\n\nAuthors: Thomas Baker <tom\u2019at\u2019airbitz.co>, Paul Puey <paul\u2019at\u2019airbitz.co>\n\nContributors: Joey Krug <joeykrug\u2019at\u2019gmail.com>\n\nStatus: proposal\n\nType: Standards Track\n\nCreated: 2015-01-12\n\nTable of Contents\n\n   -\n\n   Abstract\n   -\n\n   Motivation\n   -\n\n   Specification\n   -\n\n   Compatibility\n   -\n\n   Examples\n   -\n\n   References\n\nAbstract\n\nThis is a protocol for peer-to-peer wireless transfer of a URI request\nusing an open broadcast or advertisement channel such as Bluetooth,\nBluetooth Low Energy, or WiFi Direct.\nMotivation\n\nThere are disadvantages for a merchant (requester) and customer (sender) to\nexchange a URI request using QR codes that can be eliminated by using\nwireless broadcast or advertisements.\n\nCurrent QR code scan method to transfer a request URI from merchant\n(Requester) to customer (Sender) is cumbersome. A usual scenario is a\nmerchant with a POS terminal for order entry and a separate tablet for\ntransacting payments with bitcoin, and a customer with a smartphone. After\nthe order is entered, the merchant enters payment request information into\nthe tablet, generates the QR code representing the URI, and presents this\nto the customer. The customer prepares to scan the QR code with their\nsmartphone by maneuvering the camera to the tablet. The tablet screen must\nbe relatively clean, point at the customer, and held steady. The smartphone\ncamera lens must be clean, point at the tablet screen, come into range, and\nheld steady to focus and wait for a QR scan. Environmental conditions such\nas bright outdoor sunlight, indoor spot lights, or significant distance\nbetween QR code and camera can create difficult and cumbersome experiences\nfor users.\n\nUsing a wireless local broadcast allows the merchant to just enter the\npayment and wait. The tablet and smartphone are not maneuvered to align in\nany way. The customer observes broadcast listings, selects the appropriate\none from possible simultaneous broadcasts from other POS stations nearby,\nexamines the URI request details such as amount, and decides whether to\nsend funds, initiating a bitcoin network transfer. The merchant and\ncustomer then receive the transaction confirmations and are done with the\nsale. Merchant and customer devices are kept private and secured in their\nown possession.\n\nThe URI and other broadcast identification (Joe\u2019s Grill #1) only contain\npublic information. However, a copycat broadcaster acting as MITM might\nduplicate the broadcast simultaneously as the merchant, attempting to lure\nthe customer to send funds to the copycat. That attack is mitigated with\nthis broadcast method because of the partial address in the broadcast.\nSpecification\n\nRequester generates a bitcoin URI request of variable length, and a limited\ndescriptive identifier string. Requester then broadcasts the URI\u2019s partial\npublic address (<paddress>) plus identifier (<id>) over a publicly visible\nwireless channel.\n\nSender scans for broadcasts on their device, examines and selects the\ndesired request by the identifier and partial address. This connects a data\nchannel to Requester.\n\nRequester sends full URI back over the data channel.\n\nSender device ensures <paddress> is part of the full URI public address and\nchecks the full address integrity. Checking the broadcast and full URI\nintegrity prevents a copycat device within range from copying the partial\naddress and fooling the customer into sending funds to the copycat instead.\n\nBelow is a description of the protocol through Bluetooth Smart (Low Energy).\n\nRequestor      Sender     - Bitcoin transaction roles\n\nPeripheral     Central    - Bluetooth GAP definitions\n\n  Mode           Mode\n\n1   |------------->|       - Requestor Advertises partial bitcoin: URI +\nName\n\n   |     ...      |\n\n2   |<-------------|       - Subscribe then send sender's Name, requesting\na response\n\n3   |------------->|       - ACK\n\n4   |<-------------|       - request Read Characteristic from peripheral\n\n5   |------------->|       - Sender receives full bitcoin: URI\n\n\n   1.\n\n   Peripheral advertises over a service UUID a BLE extended advertisement\n   with a Scan Response containing the partial address of a bitcoin URI and a\n   Name, any plain text. The entire response is limited to 26 characters. The\n   first 10 make up the first 10 characters of the bitcoin URI public address\n   where to send bitcoin, and must be present. The remaining characters are\n   any plain text such as \u201cThe Habit 1\u201d or \u201cStarbucks-Reg 1\u201d, more human\n   readable information. The partial address serves as a check against a\n   nearby attacker who may try to lure a Sender into sending payment to a\n   separate wallet by advertising a similar Scan Response but cannot replicate\n   a public address with the same leading 10 characters and different trailing\n   characters.\n   2.\n\n   When the Central scans the advertisement, it may display the Scan\n   Response in a human readable listing using the two pieces of information.\n   If Central chooses this advertisement to receive the full request, it then\n   subscribes to the service and writes the characteristic (a second UUID)\n   with it\u2019s own name, or a blank if not sending a name, to the Peripheral.\n   3.\n\n   Peripheral gets a characteristic write request of the Central\u2019s name,\n   and acknowledges the receipt by sending a server response.\n   4.\n\n   Central receives a characteristic write (from the response) and\n   immediately requests the entire bitcoin URI by issuing a read request on\n   that characteristic.\n   5.\n\n   Peripheral receives the read request and sends the entire bitcoin URI\n   over that characteristic up to 512 bytes.\n\nThis ends the proposed specification as the bitcoin URI transfer is\ncomplete. The Sender would then normally confirm the request and decide\nwhether to initiate the fund transfer.\nCompatibility\n\nThere are no prior BIPs covering this.\nExamples\n\nAirbitz iOS Bluetooth Low Energy to Bluetooth Low Energy request transfer.\nReferences\n\n\n\n[image: logo]\n*Paul Puey* CEO / Co-Founder, Airbitz Inc\n+1-619-850-8624 | http://airbitz.co | San Diego\n<http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n<https://plus.google.com/118173667510609425617>\n<https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n<https://angel.co/paul-puey>\n*DOWNLOAD THE AIRBITZ WALLET:*\n  <https://play.google.com/store/apps/details?id=com.airbitz>\n<https://itunes.apple.com/us/app/airbitz/id843536046>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/a00a4c8a/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-05T13:46:44",
                "message_text_only": "Thanks Paul, for writing up your protocol!\n\nFirst thoughts:\n\nFor a BIP standard, I think we should skip \"bitcoin:\" URIs entirely and\npublish BIP70 payment requests instead. URIs mainly stick around because\nof QR codes limited capacity. BIP70 would partly address the \"copycat\"\nproblem by signing payment requests.\n\nIn your Motivation section, I miss some words about NFC. NFC already\naddresses all of the usability issues mentioned and is supported by\nmobile wallets since 2011. That doesn't mean your method doesn't make\nsense in some situations, but I think it should be explained why to\nprefer broadcasting payment requests over picking them up via near field\nradio.\n\n\nOn 02/05/2015 09:01 AM, Paul Puey wrote:\n> Airbitz has developed and implemented a method for communicating a\n> bitcoin URI across Bluetooth (BLE) or any other P2P, mid range,\n> wireless, broadcast medium. The currently documented implementation is\n> available in our iOS and Android mobile wallet (updated Android version\n> with BLE coming in about 1 week). We would like to have the BIP pulled\n> into Github for review and discussion. Here is the current BIP:\n> \n> \n> BIP: TBD\n> \n> Title: P2P Wireless URI transfer\n> \n> Authors: Thomas Baker <tom\u2019at\u2019airbitz.co <http://airbitz.co>>, Paul Puey\n> <paul\u2019at\u2019airbitz.co <http://airbitz.co>>\n> \n> Contributors: Joey Krug <joeykrug\u2019at\u2019gmail.com <http://gmail.com>>\n> \n> Status: proposal\n> \n> Type: Standards Track\n> \n> Created: 2015-01-12\n> \n> \n>     Table of Contents\n> \n>   *\n> \n>     Abstract\n> \n>   *\n> \n>     Motivation\n> \n>   *\n> \n>     Specification\n> \n>   *\n> \n>     Compatibility\n> \n>   *\n> \n>     Examples\n> \n>   *\n> \n>     References\n> \n> \n>     Abstract\n> \n> This is a protocol for peer-to-peer wireless transfer of a URI request\n> using an open broadcast or advertisement channel such as Bluetooth,\n> Bluetooth Low Energy, or WiFi Direct.\n> \n> \n>     Motivation\n> \n> There are disadvantages for a merchant (requester) and customer (sender)\n> to exchange a URI request using QR codes that can be eliminated by using\n> wireless broadcast or advertisements.\n> \n> Current QR code scan method to transfer a request URI from merchant\n> (Requester) to customer (Sender) is cumbersome. A usual scenario is a\n> merchant with a POS terminal for order entry and a separate tablet for\n> transacting payments with bitcoin, and a customer with a smartphone.\n> After the order is entered, the merchant enters payment request\n> information into the tablet, generates the QR code representing the URI,\n> and presents this to the customer. The customer prepares to scan the QR\n> code with their smartphone by maneuvering the camera to the tablet. The\n> tablet screen must be relatively clean, point at the customer, and held\n> steady. The smartphone camera lens must be clean, point at the tablet\n> screen, come into range, and held steady to focus and wait for a QR\n> scan. Environmental conditions such as bright outdoor sunlight, indoor\n> spot lights, or significant distance between QR code and camera can\n> create difficult and cumbersome experiences for users.\n> \n> Using a wireless local broadcast allows the merchant to just enter the\n> payment and wait. The tablet and smartphone are not maneuvered to align\n> in any way. The customer observes broadcast listings, selects the\n> appropriate one from possible simultaneous broadcasts from other POS\n> stations nearby, examines the URI request details such as amount, and\n> decides whether to send funds, initiating a bitcoin network transfer.\n> The merchant and customer then receive the transaction confirmations and\n> are done with the sale. Merchant and customer devices are kept private\n> and secured in their own possession.\n> \n> The URI and other broadcast identification (Joe\u2019s Grill #1) only contain\n> public information. However, a copycat broadcaster acting as MITM might\n> duplicate the broadcast simultaneously as the merchant, attempting to\n> lure the customer to send funds to the copycat. That attack is mitigated\n> with this broadcast method because of the partial address in the broadcast.\n> \n> \n>     Specification\n> \n> Requester generates a bitcoin URI request of variable length, and a\n> limited descriptive identifier string. Requester then broadcasts the\n> URI\u2019s partial public address (<paddress>) plus identifier (<id>) over a\n> publicly visible wireless channel.\n> \n> Sender scans for broadcasts on their device, examines and selects the\n> desired request by the identifier and partial address. This connects a\n> data channel to Requester.\n> \n> Requester sends full URI back over the data channel.\n> \n> Sender device ensures <paddress> is part of the full URI public address\n> and checks the full address integrity. Checking the broadcast and full\n> URI integrity prevents a copycat device within range from copying the\n> partial address and fooling the customer into sending funds to the\n> copycat instead.\n> \n> Below is a description of the protocol through Bluetooth Smart (Low Energy).\n> \n> Requestor      Sender     - Bitcoin transaction roles\n> \n> Peripheral     Central    - Bluetooth GAP definitions\n> \n>   Mode           Mode\n> \n> 1   |------------->|       - Requestor Advertises partial bitcoin: URI +\n> Name\n> \n>    |     ...      |       \n> \n> 2   |<-------------|       - Subscribe then send sender's Name,\n> requesting a response\n> \n> 3   |------------->|       - ACK\n> \n> 4   |<-------------|       - request Read Characteristic from peripheral\n> \n> 5   |------------->|       - Sender receives full bitcoin: URI\n> \n> \n>  1.\n> \n>     Peripheral advertises over a service UUID a BLE extended\n>     advertisement with a Scan Response containing the partial address of\n>     a bitcoin URI and a Name, any plain text. The entire response is\n>     limited to 26 characters. The first 10 make up the first 10\n>     characters of the bitcoin URI public address where to send bitcoin,\n>     and must be present. The remaining characters are any plain text\n>     such as \u201cThe Habit 1\u201d or \u201cStarbucks-Reg 1\u201d, more human readable\n>     information. The partial address serves as a check against a nearby\n>     attacker who may try to lure a Sender into sending payment to a\n>     separate wallet by advertising a similar Scan Response but cannot\n>     replicate a public address with the same leading 10 characters and\n>     different trailing characters.\n> \n>  2.\n> \n>     When the Central scans the advertisement, it may display the Scan\n>     Response in a human readable listing using the two pieces of\n>     information. If Central chooses this advertisement to receive the\n>     full request, it then subscribes to the service and writes the\n>     characteristic (a second UUID) with it\u2019s own name, or a blank if not\n>     sending a name, to the Peripheral.\n> \n>  3.\n> \n>     Peripheral gets a characteristic write request of the Central\u2019s\n>     name, and acknowledges the receipt by sending a server response.\n> \n>  4.\n> \n>     Central receives a characteristic write (from the response) and\n>     immediately requests the entire bitcoin URI by issuing a read\n>     request on that characteristic.\n> \n>  5.\n> \n>     Peripheral receives the read request and sends the entire bitcoin\n>     URI over that characteristic up to 512 bytes.\n> \n> This ends the proposed specification as the bitcoin URI transfer is\n> complete. The Sender would then normally confirm the request and decide\n> whether to initiate the fund transfer.\n> \n> \n>     Compatibility\n> \n> There are no prior BIPs covering this.\n> \n> \n>     Examples\n> \n> Airbitz iOS Bluetooth Low Energy to Bluetooth Low Energy request transfer.\n> \n> \n>     References\n> \n> \n> \n> \n> \n> logo   \n> \t*Paul Puey* CEO / Co-Founder, Airbitz Inc\n> +1-619-850-8624 | http://airbitz.co <http://airbitz.co/> | San Diego\n> <http://facebook.com/airbitz> <http://twitter.com/airbitz> <https://plus.google.com/118173667510609425617> <https://go.airbitz.co/comments/feed/> <http://linkedin.com/in/paulpuey> <https://angel.co/paul-puey>\n> \n> *DOWNLOAD THE AIRBITZ WALLET:*\n>  \n> <https://play.google.com/store/apps/details?id=com.airbitz><https://itunes.apple.com/us/app/airbitz/id843536046>\n> \n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-05T13:57:03",
                "message_text_only": ">\n> For a BIP standard, I think we should skip \"bitcoin:\" URIs entirely and\n> publish BIP70 payment requests instead.\n>\n\nAgreed - it's not clear to me at all that this partial address scheme is\nactually secure. The assumption appears to be that the MITM must match the\naddress prefix generated by the genuine merchant. But if they can do a\nwireless MITM they can just substitute their own address prefix/partial\naddress, no?\n\nTo avoid MITM attacks the sender must know who they are sending money to,\nand that means they must see a human understandable name that's\ncryptographically bound to the right public key. Displaying partial\naddresses to the user is not going to solve this unless users manually\ncompare key prefixes across the screens.... which is even less convenient\nthan a QR code.\n\nI think it should be explained why to\n> prefer broadcasting payment requests over picking them up via near field\n> radio.\n>\n\nThis is probably an artifact of Apple's restrictions on iOS. Only the\niPhone 6 has NFC hardware and Apple don't expose it via any public API. It\ncan however support Bluetooth LE.\n\nApple isn't a big deal in Germany because iPhone only achieved about 17%\nmarket share during the quarter when the iPhone 6 launched. Normally it's\ncloser to 10-13%. Most other markets are similar.\n\nHowever in the USA, UK, Australia and Japan iOS is still a big deal and NFC\nis going to be seen as a non-universal solution there. At least, until\nApple catches up and provides an NFC API.\n\nIt's certainly not a problem to have a working radio based broadcast\nsystem, though the theoretician in me wonders what  happens when lots of\npeople are trying to pay simultaneously for something that has equal cost\n..... e.g. buying movie tickets at a counter. NFC and QR codes prevent any\nkind of \"oops I paid for someone elses stuff\" confusion.\n\nIn practice of course Bitcoin payments are not normally popular enough for\nthis to be a problem outside of Bitcoin community events.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/58dccfae/attachment.html>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-05T20:06:47",
                "message_text_only": "The BIP70 protocol would preclude individuals from utilizing the P2P\ntransfer spec. It would also require that a Sender have internet\nconnectivity to get the payment protocol info. BLE could enable payment w/o\ninternet by first transferring the URI to from Recipient to Sender. Then in\nthe future, we could sign a Tx and send it over BLE back to the recipient\n(who would still need internet to verify the Tx). This is an important use\ncase for areas with poor 3G/4G connectivity as I've experience myself.\n\nAlso, due to Android issues, NFC is incredibly clunky. The URI Sender is\nrequired to tap the screen *while* the two phones are in contact. We\nsupport NFC the same way Bitcoin Wallet does, but unless the payment\nrecipient has a custom Android device (which a merchant might) then the\nusage model is worse than scanning a QR code. BLE also allows people to pay\nat a distance such as for a donation to a live performer. We'll look at\nadding this to the Motivation section.\n\n[image: logo]\n*Paul Puey* CEO / Co-Founder, Airbitz Inc\n+1-619-850-8624 | http://airbitz.co | San Diego\n<http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n<https://plus.google.com/118173667510609425617>\n<https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n<https://angel.co/paul-puey>\n*DOWNLOAD THE AIRBITZ WALLET:*\n  <https://play.google.com/store/apps/details?id=com.airbitz>\n<https://itunes.apple.com/us/app/airbitz/id843536046>\n\n\nFrom: Andreas Schildbach <andreas at sc...> - 2015-02-05 13:47:04\n\nThanks Paul, for writing up your protocol!\n\nFirst thoughts:\n\nFor a BIP standard, I think we should skip \"bitcoin:\" URIs entirely and\npublish BIP70 payment requests instead. URIs mainly stick around because\nof QR codes limited capacity. BIP70 would partly address the \"copycat\"\nproblem by signing payment requests.\n\nIn your Motivation section, I miss some words about NFC. NFC already\naddresses all of the usability issues mentioned and is supported by\nmobile wallets since 2011. That doesn't mean your method doesn't make\nsense in some situations, but I think it should be explained why to\nprefer broadcasting payment requests over picking them up via near field\nradio.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/77152aa7/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-05T20:28:37",
                "message_text_only": "BIP70 requests can be sent over bluetooth as well, as can transactions.\nBitcoin Wallet can already send money even when offline by doing this. It's\ntransparent to the user. I mean original Bluetooth in this context - BLE\nhas incredibly tight data constraints and isn't really meant for data\ntransfer.\n\nYes Android Beam has a pretty stupid UI. You can actually tap the devices,\ntake them away and then press, but that's not obvious at all. There have\nbeen new APIs added in recent releases that give more control over this, so\nit's possible we can revisit things and make the UI better these days.\n\nThe donation to live performer example is good - there's no issue of\naccidentally paying for someone else in this context as there's only one\nrecipient, but many senders.\n\nThe issue of confused payments remains in other situations though.\n\nFor the coffee shop use case, it'd be nicer (I think) if we aim for a\nSquare-style UI where the device broadcasts a (link to) a photo of the user\ncombined with a bluetooth MAC. Then the merchant tablet can show faces of\npeople in the shop, and can push a payment request to the users device.\nThat device can then buzz the user, show a confirmation screen, put\nsomething on their smart watch etc or just auto-authorise the payment\nbecause the BIP70 signature is from a trusted merchant. User never even\nneeds to touch their phone at all.\n\nOn Thu, Feb 5, 2015 at 9:06 PM, Paul Puey <paul at airbitz.co> wrote:\n\n> The BIP70 protocol would preclude individuals from utilizing the P2P\n> transfer spec. It would also require that a Sender have internet\n> connectivity to get the payment protocol info. BLE could enable payment w/o\n> internet by first transferring the URI to from Recipient to Sender. Then in\n> the future, we could sign a Tx and send it over BLE back to the recipient\n> (who would still need internet to verify the Tx). This is an important use\n> case for areas with poor 3G/4G connectivity as I've experience myself.\n>\n> Also, due to Android issues, NFC is incredibly clunky. The URI Sender is\n> required to tap the screen *while* the two phones are in contact. We\n> support NFC the same way Bitcoin Wallet does, but unless the payment\n> recipient has a custom Android device (which a merchant might) then the\n> usage model is worse than scanning a QR code. BLE also allows people to pay\n> at a distance such as for a donation to a live performer. We'll look at\n> adding this to the Motivation section.\n>\n> [image: logo]\n> *Paul Puey* CEO / Co-Founder, Airbitz Inc\n> +1-619-850-8624 | http://airbitz.co | San Diego\n> <http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n> <https://plus.google.com/118173667510609425617>\n> <https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n> <https://angel.co/paul-puey>\n> *DOWNLOAD THE AIRBITZ WALLET:*\n>   <https://play.google.com/store/apps/details?id=com.airbitz>\n> <https://itunes.apple.com/us/app/airbitz/id843536046>\n>\n>\n> From: Andreas Schildbach <andreas at sc...> - 2015-02-05 13:47:04\n>\n> Thanks Paul, for writing up your protocol!\n>\n> First thoughts:\n>\n> For a BIP standard, I think we should skip \"bitcoin:\" URIs entirely and\n> publish BIP70 payment requests instead. URIs mainly stick around because\n> of QR codes limited capacity. BIP70 would partly address the \"copycat\"\n> problem by signing payment requests.\n>\n> In your Motivation section, I miss some words about NFC. NFC already\n> addresses all of the usability issues mentioned and is supported by\n> mobile wallets since 2011. That doesn't mean your method doesn't make\n> sense in some situations, but I think it should be explained why to\n> prefer broadcasting payment requests over picking them up via near field\n> radio.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/806f0139/attachment.html>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-05T20:37:14",
                "message_text_only": "Thanks for CC'ing me Mike. Having trouble receiving maillist list posts.\n\nEven if a user could get the BIP70 URL in the URI, they would still need\ninternet to access the URL. This BLE spec doesn't preclude BIP70, but can\nwork with it while still allowing individuals without a certificate to\nbroadcast a request.\n\nThe issue of confused payments becomes less so if the Recipient broadcasts\na name along with the 10 digit public addr prefix. Only if there is a name\nconflict will the user have to be concerned with the prefix. The name can\nbe something like\n\nMikes Coffee #1 and it can have a \"Register #1\" at the counter. A customer\nfacing screen can also show the 10 digit prefix.\n\n\n[image: logo]\n*Paul Puey* CEO / Co-Founder, Airbitz Inc\n+1-619-850-8624 | http://airbitz.co | San Diego\n<http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n<https://plus.google.com/118173667510609425617>\n<https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n<https://angel.co/paul-puey>\n*DOWNLOAD THE AIRBITZ WALLET:*\n  <https://play.google.com/store/apps/details?id=com.airbitz>\n<https://itunes.apple.com/us/app/airbitz/id843536046>\n\n\n\n\nOn Thu, Feb 5, 2015 at 12:28 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> BIP70 requests can be sent over bluetooth as well, as can transactions.\n> Bitcoin Wallet can already send money even when offline by doing this. It's\n> transparent to the user. I mean original Bluetooth in this context - BLE\n> has incredibly tight data constraints and isn't really meant for data\n> transfer.\n>\n> Yes Android Beam has a pretty stupid UI. You can actually tap the devices,\n> take them away and then press, but that's not obvious at all. There have\n> been new APIs added in recent releases that give more control over this, so\n> it's possible we can revisit things and make the UI better these days.\n>\n> The donation to live performer example is good - there's no issue of\n> accidentally paying for someone else in this context as there's only one\n> recipient, but many senders.\n>\n> The issue of confused payments remains in other situations though.\n>\n> For the coffee shop use case, it'd be nicer (I think) if we aim for a\n> Square-style UI where the device broadcasts a (link to) a photo of the user\n> combined with a bluetooth MAC. Then the merchant tablet can show faces of\n> people in the shop, and can push a payment request to the users device.\n> That device can then buzz the user, show a confirmation screen, put\n> something on their smart watch etc or just auto-authorise the payment\n> because the BIP70 signature is from a trusted merchant. User never even\n> needs to touch their phone at all.\n>\n> On Thu, Feb 5, 2015 at 9:06 PM, Paul Puey <paul at airbitz.co> wrote:\n>\n>> The BIP70 protocol would preclude individuals from utilizing the P2P\n>> transfer spec. It would also require that a Sender have internet\n>> connectivity to get the payment protocol info. BLE could enable payment w/o\n>> internet by first transferring the URI to from Recipient to Sender. Then in\n>> the future, we could sign a Tx and send it over BLE back to the recipient\n>> (who would still need internet to verify the Tx). This is an important use\n>> case for areas with poor 3G/4G connectivity as I've experience myself.\n>>\n>> Also, due to Android issues, NFC is incredibly clunky. The URI Sender is\n>> required to tap the screen *while* the two phones are in contact. We\n>> support NFC the same way Bitcoin Wallet does, but unless the payment\n>> recipient has a custom Android device (which a merchant might) then the\n>> usage model is worse than scanning a QR code. BLE also allows people to pay\n>> at a distance such as for a donation to a live performer. We'll look at\n>> adding this to the Motivation section.\n>>\n>> [image: logo]\n>> *Paul Puey* CEO / Co-Founder, Airbitz Inc\n>> +1-619-850-8624 | http://airbitz.co | San Diego\n>> <http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n>> <https://plus.google.com/118173667510609425617>\n>> <https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n>>   <https://angel.co/paul-puey>\n>> *DOWNLOAD THE AIRBITZ WALLET:*\n>>   <https://play.google.com/store/apps/details?id=com.airbitz>\n>> <https://itunes.apple.com/us/app/airbitz/id843536046>\n>>\n>>\n>> From: Andreas Schildbach <andreas at sc...> - 2015-02-05 13:47:04\n>>\n>> Thanks Paul, for writing up your protocol!\n>>\n>> First thoughts:\n>>\n>> For a BIP standard, I think we should skip \"bitcoin:\" URIs entirely and\n>> publish BIP70 payment requests instead. URIs mainly stick around because\n>> of QR codes limited capacity. BIP70 would partly address the \"copycat\"\n>> problem by signing payment requests.\n>>\n>> In your Motivation section, I miss some words about NFC. NFC already\n>> addresses all of the usability issues mentioned and is supported by\n>> mobile wallets since 2011. That doesn't mean your method doesn't make\n>> sense in some situations, but I think it should be explained why to\n>> prefer broadcasting payment requests over picking them up via near field\n>> radio.\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is\n>> your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more. Take a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/52c1b824/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-05T20:43:03",
                "message_text_only": ">\n> Even if a user could get the BIP70 URL in the URI, they would still need\n> internet to access the URL.\n>\n\nThe way Bitcoin Wallet does it, the bitcoin URI includes a MAC address\nwhere you can download the request from. BIP70 does not depend on internet\naccess or HTTP, plus, you don't have to sign them.\n\nThe name field might work but requires the merchant to set it, e.g. by\nasking the payer what their name is, then typing it in, then the payer has\nto wait for it to show up. By this point it's probably faster to have\nscanned a QR code.\n\nRe: security. I'll repeat what I wrote up-thread in case you didn't see it:\n\nit's not clear to me at all that this partial address scheme is actually\n> secure. The assumption appears to be that the MITM must match the address\n> prefix generated by the genuine merchant. But if they can do a wireless\n> MITM they can just substitute their own address prefix/partial address, no?\n>\n> To avoid MITM attacks the sender must know who they are sending money to,\n> and that means they must see a human understandable name that's\n> cryptographically bound to the right public key. Displaying partial\n> addresses to the user is not going to solve this unless users manually\n> compare key prefixes across the screens.... which is even less convenient\n> than a QR code.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/c3eb897f/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T20:44:38",
                "message_text_only": "On 02/05/2015 12:28 PM, Mike Hearn wrote:\n> The donation to live performer example is good - there's no issue of\n> accidentally paying for someone else in this context as there's only one\n> recipient, but many senders.\n\nI'm not sure you could assume this, even if the payer only received one\nbroadcast. And if the payer receives multiple, it constitutes a DOS on\nthe scenario, potentially unintentional.\n\n> The issue of confused payments remains in other situations though.\n\nAgree, the problem of the payer strongly identifying the receiver\nrequires either proximity (NFC or QR code scan from the known-good\nsource) or PKI/WoT. The problem can't be resolved through a broadcast.\n\n> For the coffee shop use case, it'd be nicer (I think) if we aim for a\n> Square-style UI where the device broadcasts a (link to) a photo of the\n> user combined with a bluetooth MAC. Then the merchant tablet can show\n> faces of people in the shop, and can push a payment request to the users\n> device. That device can then buzz the user, show a confirmation screen,\n> put something on their smart watch etc or just auto-authorise the\n> payment because the BIP70 signature is from a trusted merchant. User\n> never even needs to touch their phone at all.\n\nI'm imagining myself walking around broadcasting my photo and MAC\naddress while hucksters push payment requests to me for approval, while\nrecording my photo and correlating it to my address. It will pretty\nquickly turn in to a scenario where I need to touch something before\nthis is turned on.\n\n> On Thu, Feb 5, 2015 at 9:06 PM, Paul Puey <paul at airbitz.co\n> <mailto:paul at airbitz.co>> wrote:\n> \n>     The BIP70 protocol would preclude individuals from utilizing the P2P\n>     transfer spec. It would also require that a Sender have internet\n>     connectivity to get the payment protocol info. BLE could enable\n>     payment w/o internet by first transferring the URI to from Recipient\n>     to Sender. Then in the future, we could sign a Tx and send it over\n>     BLE back to the recipient (who would still need internet to verify\n>     the Tx). This is an important use case for areas with poor 3G/4G\n>     connectivity as I've experience myself.\n> \n>     Also, due to Android issues, NFC is incredibly clunky. The URI\n>     Sender is required to tap the screen *while* the two phones are in\n>     contact. We support NFC the same way Bitcoin Wallet does, but unless\n>     the payment recipient has a custom Android device (which a merchant\n>     might) then the usage model is worse than scanning a QR code. BLE\n>     also allows people to pay at a distance such as for a donation to a\n>     live performer. We'll look at adding this to the Motivation section.\n> \n>     From: Andreas Schildbach <andreas at sc...> - 2015-02-05 13:47:04\n> \n>     Thanks Paul, for writing up your protocol!\n> \n>     First thoughts:\n> \n>     For a BIP standard, I think we should skip \"bitcoin:\" URIs entirely and\n>     publish BIP70 payment requests instead. URIs mainly stick around because\n>     of QR codes limited capacity. BIP70 would partly address the \"copycat\"\n>     problem by signing payment requests.\n> \n>     In your Motivation section, I miss some words about NFC. NFC already\n>     addresses all of the usability issues mentioned and is supported by\n>     mobile wallets since 2011. That doesn't mean your method doesn't make\n>     sense in some situations, but I think it should be explained why to\n>     prefer broadcasting payment requests over picking them up via near field\n>     radio.\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/829bd26c/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-05T20:50:59",
                "message_text_only": ">\n> I'm imagining myself walking around broadcasting my photo and MAC\n> address while hucksters push payment requests to me for approval\n\n\nI hate to break it to you, but you broadcast a photo of your face every\ntime you walk outside ;)\n\nBluetooth MAC addresses are random, they aren't useful identifiers. If\nsomeone can see you, a face is a far more uniquely identifying thing than a\nMAC.\n\n\"Payment spam\" might be a problem. I can imagine a wallet requiring that\nsuch requests are signed and then spammers can be blacklisted in the usual\nfashion so they can't push things to your phone anymore. Anyway, a hurdle\nthat can be jumped if/when it becomes an issue.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/388e26fa/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T20:59:48",
                "message_text_only": "On 02/05/2015 12:50 PM, Mike Hearn wrote:\n>     I'm imagining myself walking around broadcasting my photo and MAC\n>     address while hucksters push payment requests to me for approval\n> \n> I hate to break it to you, but you broadcast a photo of your face every\n> time you walk outside ;)\n> \n> Bluetooth MAC addresses are random, they aren't useful identifiers. If\n> someone can see you, a face is a far more uniquely identifying thing\n> than a MAC.\n\nInteresting take on privacy. But the market will of course decide.\n\nWould the merchant be broadcasting payment requests in the clear, or\nwould they be encrypted with a public key of the spender?\n\n> \"Payment spam\" might be a problem. I can imagine a wallet requiring that\n> such requests are signed and then spammers can be blacklisted in the\n> usual fashion so they can't push things to your phone anymore. Anyway, a\n> hurdle that can be jumped if/when it becomes an issue.\n\nNot sure I'd shoot for a system that's guaranteed to require PKI with\nblacklisting and spam filtering.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/d727f4f8/attachment.sig>"
            },
            {
                "author": "Brian Hoffman",
                "date": "2015-02-05T21:19:47",
                "message_text_only": "This sounds horrible. You could basically monitor anyone with a wallet in a highly populated area and track them super easily by doing facial recognition. Yes you could photograph people but it's way more burdensome. Sorry to go off topic a little.\n\n\nOn Feb 5, 2015, at 3:50 PM, Mike Hearn <mike at plan99.net> wrote:\n\n>> I'm imagining myself walking around broadcasting my photo and MAC\n>> address while hucksters push payment requests to me for approval\n> \n> I hate to break it to you, but you broadcast a photo of your face every time you walk outside ;)\n> \n> Bluetooth MAC addresses are random, they aren't useful identifiers. If someone can see you, a face is a far more uniquely identifying thing than a MAC.\n> \n> \"Payment spam\" might be a problem. I can imagine a wallet requiring that such requests are signed and then spammers can be blacklisted in the usual fashion so they can't push things to your phone anymore. Anyway, a hurdle that can be jumped if/when it becomes an issue.\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/278936ec/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T21:23:48",
                "message_text_only": "Yes, a stellar device for mass surveillance coupled with transaction tainting.\n\ne\n\n\n> On Feb 5, 2015, at 1:19 PM, Brian Hoffman <brianchoffman at gmail.com> wrote:\n> \n> This sounds horrible. You could basically monitor anyone with a wallet in a highly populated area and track them super easily by doing facial recognition. Yes you could photograph people but it's way more burdensome. Sorry to go off topic a little.\n> \n> \n> On Feb 5, 2015, at 3:50 PM, Mike Hearn <mike at plan99.net> wrote:\n> \n>>> I'm imagining myself walking around broadcasting my photo and MAC\n>>> address while hucksters push payment requests to me for approval\n>> \n>> I hate to break it to you, but you broadcast a photo of your face every time you walk outside ;)\n>> \n>> Bluetooth MAC addresses are random, they aren't useful identifiers. If someone can see you, a face is a far more uniquely identifying thing than a MAC.\n>> \n>> \"Payment spam\" might be a problem. I can imagine a wallet requiring that such requests are signed and then spammers can be blacklisted in the usual fashion so they can't push things to your phone anymore. Anyway, a hurdle that can be jumped if/when it becomes an issue.\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more. Take a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/98dcee87/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-05T21:36:32",
                "message_text_only": ">\n> This sounds horrible. You could basically monitor anyone with a wallet in\n> a highly populated area and track them super easily by doing facial\n> recognition.\n>\n\nWe're talking about BLE, still? The radio tech that runs in the so called\n\"junk bands\" because propagation is so poor?\n\nMy watch loses its connection to my phone if I just put it down and walk\naround my apartment. I'm all for reasonable paranoia, but Bluetooth isn't\ngoing to be enabling mass surveillance any time soon. It barely goes\nthrough air, let alone walls.\n\nAnyway, whatever. I'm just bouncing around ideas for faster user\ninterfaces. You could always switch it off or set it to be triggered by the\npresence of particular wifi hotspots, if you don't mind an initial bit of\nsetup.\n\nBack on topic - the debate is interesting, but I think to get this to the\nstage of being a BIP we'd need at least another wallet to implement it?\nThen I guess a BIP would be useful regardless of the design issues. The\nprefix matching still feels flaky to me but it's hard to know if you could\nreally swipe payments out of the air in practice, without actually trying\nit.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/f97ddd7e/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T21:46:10",
                "message_text_only": "BLE has an advertised range of over 100m. \n\nhttp://www.bluetooth.com/Pages/low-energy-tech-info.aspx\n\nIn the case of mass surveillance that range could most likely be extended dramatically by the reviewer. I've seen  WiFi ranges of over a mile with a strong (not FCC approved) receiver.\n\nWiFi hotspots don't have strong identity or a guaranteed position, so they can't be trusted for location.\n\ne\n\nOn Feb 5, 2015, at 1:36 PM, Mike Hearn <mike at plan99.net> wrote:\n\n>> This sounds horrible. You could basically monitor anyone with a wallet in a highly populated area and track them super easily by doing facial recognition.\n> \n> We're talking about BLE, still? The radio tech that runs in the so called \"junk bands\" because propagation is so poor?\n> \n> My watch loses its connection to my phone if I just put it down and walk around my apartment. I'm all for reasonable paranoia, but Bluetooth isn't going to be enabling mass surveillance any time soon. It barely goes through air, let alone walls.\n> \n> Anyway, whatever. I'm just bouncing around ideas for faster user interfaces. You could always switch it off or set it to be triggered by the presence of particular wifi hotspots, if you don't mind an initial bit of setup.\n> \n> Back on topic - the debate is interesting, but I think to get this to the stage of being a BIP we'd need at least another wallet to implement it? Then I guess a BIP would be useful regardless of the design issues. The prefix matching still feels flaky to me but it's hard to know if you could really swipe payments out of the air in practice, without actually trying it.\n> \n> \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/7d08d7ba/attachment.html>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-05T22:07:18",
                "message_text_only": "So if you picked up the BLE broadcast request. All you know is that\n*someone* within 100m is requesting bitcoin at a certain address. Not\nnecessarily who. The *name* is both optional, and possibly just a *handle*\nof the user. If I'm sitting 5 ft away from someone at dinner and wanted to\npay them via BLE, I might see \"Monkey Dude\" on my list and simply ask him\n\"is that you?\" If so, I send it. If there are two \"Monkey Dude's\" Then I\nhave to bother with the address prefix, but not otherwise.\n\n\n[image: logo]\n*Paul Puey* CEO / Co-Founder, Airbitz Inc\n+1-619-850-8624 | http://airbitz.co | San Diego\n<http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n<https://plus.google.com/118173667510609425617>\n<https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n<https://angel.co/paul-puey>\n*DOWNLOAD THE AIRBITZ WALLET:*\n  <https://play.google.com/store/apps/details?id=com.airbitz>\n<https://itunes.apple.com/us/app/airbitz/id843536046>\n\n\n\n\nOn Thu, Feb 5, 2015 at 1:46 PM, Eric Voskuil <eric at voskuil.org> wrote:\n\n> BLE has an advertised range of over 100m.\n>\n> http://www.bluetooth.com/Pages/low-energy-tech-info.aspx\n>\n> In the case of mass surveillance that range could most likely be extended\n> dramatically by the reviewer. I've seen  WiFi ranges of over a mile with a\n> strong (not FCC approved) receiver.\n>\n> WiFi hotspots don't have strong identity or a guaranteed position, so they\n> can't be trusted for location.\n>\n> e\n>\n> On Feb 5, 2015, at 1:36 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n> This sounds horrible. You could basically monitor anyone with a wallet in\n>> a highly populated area and track them super easily by doing facial\n>> recognition.\n>>\n>\n> We're talking about BLE, still? The radio tech that runs in the so called\n> \"junk bands\" because propagation is so poor?\n>\n> My watch loses its connection to my phone if I just put it down and walk\n> around my apartment. I'm all for reasonable paranoia, but Bluetooth isn't\n> going to be enabling mass surveillance any time soon. It barely goes\n> through air, let alone walls.\n>\n> Anyway, whatever. I'm just bouncing around ideas for faster user\n> interfaces. You could always switch it off or set it to be triggered by the\n> presence of particular wifi hotspots, if you don't mind an initial bit of\n> setup.\n>\n> Back on topic - the debate is interesting, but I think to get this to the\n> stage of being a BIP we'd need at least another wallet to implement it?\n> Then I guess a BIP would be useful regardless of the design issues. The\n> prefix matching still feels flaky to me but it's hard to know if you could\n> really swipe payments out of the air in practice, without actually trying\n> it.\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/b562bf05/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T22:10:51",
                "message_text_only": "A MITM can receive the initial broadcast and then spoof it by jamming the original. You then only see one.\n\ne\n\n> On Feb 5, 2015, at 2:07 PM, Paul Puey <paul at airbitz.co> wrote:\n> \n> So if you picked up the BLE broadcast request. All you know is that *someone* within 100m is requesting bitcoin at a certain address. Not necessarily who. The *name* is both optional, and possibly just a *handle* of the user. If I'm sitting 5 ft away from someone at dinner and wanted to pay them via BLE, I might see \"Monkey Dude\" on my list and simply ask him \"is that you?\" If so, I send it. If there are two \"Monkey Dude's\" Then I have to bother with the address prefix, but not otherwise.\n> \n>> On Thu, Feb 5, 2015 at 1:46 PM, Eric Voskuil <eric at voskuil.org> wrote:\n>> BLE has an advertised range of over 100m. \n>> \n>> http://www.bluetooth.com/Pages/low-energy-tech-info.aspx\n>> \n>> In the case of mass surveillance that range could most likely be extended dramatically by the reviewer. I've seen  WiFi ranges of over a mile with a strong (not FCC approved) receiver.\n>> \n>> WiFi hotspots don't have strong identity or a guaranteed position, so they can't be trusted for location.\n>> \n>> e\n>> \n>> On Feb 5, 2015, at 1:36 PM, Mike Hearn <mike at plan99.net> wrote:\n>> \n>>>> This sounds horrible. You could basically monitor anyone with a wallet in a highly populated area and track them super easily by doing facial recognition.\n>>> \n>>> We're talking about BLE, still? The radio tech that runs in the so called \"junk bands\" because propagation is so poor?\n>>> \n>>> My watch loses its connection to my phone if I just put it down and walk around my apartment. I'm all for reasonable paranoia, but Bluetooth isn't going to be enabling mass surveillance any time soon. It barely goes through air, let alone walls.\n>>> \n>>> Anyway, whatever. I'm just bouncing around ideas for faster user interfaces. You could always switch it off or set it to be triggered by the presence of particular wifi hotspots, if you don't mind an initial bit of setup.\n>>> \n>>> Back on topic - the debate is interesting, but I think to get this to the stage of being a BIP we'd need at least another wallet to implement it? Then I guess a BIP would be useful regardless of the design issues. The prefix matching still feels flaky to me but it's hard to know if you could really swipe payments out of the air in practice, without actually trying it.\n> \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/70945a5e/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2015-02-05T22:49:09",
                "message_text_only": "Personally I like the simplicity of tapping two phones together to\nmake payment - it should be quicker and easier than scanning QR codes\nand it's a trust model that's hard to misunderstand.\n\nIs NFC good enough for that?  I fear even with NFC it is possible to\nproduce a device with longer range than one would expect.  What\nhappened to the idea of tapping two devices together and then\ncomparing the timing of the tap (as detected by the phones'\naccelerometers) to make spoofing a transaction harder?  I remember\nhearing about that years ago - is that still a thing?\n\nroy\n\nOn Thu, Feb 05, 2015 at 02:10:51PM -0800, Eric Voskuil wrote:\n> A MITM can receive the initial broadcast and then spoof it by jamming the original. You then only see one.\n> \n> e\n> \n> > On Feb 5, 2015, at 2:07 PM, Paul Puey <paul at airbitz.co> wrote:\n> > \n> > So if you picked up the BLE broadcast request. All you know is that *someone* within 100m is requesting bitcoin at a certain address. Not necessarily who. The *name* is both optional, and possibly just a *handle* of the user. If I'm sitting 5 ft away from someone at dinner and wanted to pay them via BLE, I might see \"Monkey Dude\" on my list and simply ask him \"is that you?\" If so, I send it. If there are two \"Monkey Dude's\" Then I have to bother with the address prefix, but not otherwise.\n> > \n> >> On Thu, Feb 5, 2015 at 1:46 PM, Eric Voskuil <eric at voskuil.org> wrote:\n> >> BLE has an advertised range of over 100m. \n> >> \n> >> http://www.bluetooth.com/Pages/low-energy-tech-info.aspx\n> >> \n> >> In the case of mass surveillance that range could most likely be extended dramatically by the reviewer. I've seen  WiFi ranges of over a mile with a strong (not FCC approved) receiver.\n> >> \n> >> WiFi hotspots don't have strong identity or a guaranteed position, so they can't be trusted for location.\n> >> \n> >> e\n> >> \n> >> On Feb 5, 2015, at 1:36 PM, Mike Hearn <mike at plan99.net> wrote:\n> >> \n> >>>> This sounds horrible. You could basically monitor anyone with a wallet in a highly populated area and track them super easily by doing facial recognition.\n> >>> \n> >>> We're talking about BLE, still? The radio tech that runs in the so called \"junk bands\" because propagation is so poor?\n> >>> \n> >>> My watch loses its connection to my phone if I just put it down and walk around my apartment. I'm all for reasonable paranoia, but Bluetooth isn't going to be enabling mass surveillance any time soon. It barely goes through air, let alone walls.\n> >>> \n> >>> Anyway, whatever. I'm just bouncing around ideas for faster user interfaces. You could always switch it off or set it to be triggered by the presence of particular wifi hotspots, if you don't mind an initial bit of setup.\n> >>> \n> >>> Back on topic - the debate is interesting, but I think to get this to the stage of being a BIP we'd need at least another wallet to implement it? Then I guess a BIP would be useful regardless of the design issues. The prefix matching still feels flaky to me but it's hard to know if you could really swipe payments out of the air in practice, without actually trying it.\n> > \n\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-05T23:22:47",
                "message_text_only": "I would like to shortly express my opinion:\n\n- Having BT as an alternative is good idea but it must be secure enough\n- Signed BIP70 should be enough. I see only two issues regarding BIP70\n(but they apply also to TCP/IP, not just BT): key revocations and MITM\nattacks by governments.\n- Broadcasting faces is very bad idea IMHO.\n- Comparing addresses seems complicated but if hash was displayed as a\nunique, picture hard to be mistake or long phrase, it could be more\nconvenient.\n- Maybe storing public key (I do NOT mean bitcoin address!) of\nmerchant after successful transaction is good compromise?\n\nAnother idea: I noticed it's extremely easy to compare two strings if\nthey are the same size (in terms of millimeters, not number of\ncharacters). If the hash of signing key was printed on a sign near the\nPOS in specified size (90% of smallest available screen?) and phone\nwould scale correctly, just putting the phone near the sign would be\nenough to instantly spot whether the hashes are same.\n\nMaybe instead of hex/base58 hash encoding use colored barcode. But I'm\nnot sure if it would improve things.\n\n2015-02-05 23:49 GMT+01:00 Roy Badami <roy at gnomon.org.uk>:\n> Personally I like the simplicity of tapping two phones together to\n> make payment - it should be quicker and easier than scanning QR codes\n> and it's a trust model that's hard to misunderstand.\n>\n> Is NFC good enough for that?  I fear even with NFC it is possible to\n> produce a device with longer range than one would expect.  What\n> happened to the idea of tapping two devices together and then\n> comparing the timing of the tap (as detected by the phones'\n> accelerometers) to make spoofing a transaction harder?  I remember\n> hearing about that years ago - is that still a thing?\n>\n> roy\n>\n> On Thu, Feb 05, 2015 at 02:10:51PM -0800, Eric Voskuil wrote:\n>> A MITM can receive the initial broadcast and then spoof it by jamming the original. You then only see one.\n>>\n>> e\n>>\n>> > On Feb 5, 2015, at 2:07 PM, Paul Puey <paul at airbitz.co> wrote:\n>> >\n>> > So if you picked up the BLE broadcast request. All you know is that *someone* within 100m is requesting bitcoin at a certain address. Not necessarily who. The *name* is both optional, and possibly just a *handle* of the user. If I'm sitting 5 ft away from someone at dinner and wanted to pay them via BLE, I might see \"Monkey Dude\" on my list and simply ask him \"is that you?\" If so, I send it. If there are two \"Monkey Dude's\" Then I have to bother with the address prefix, but not otherwise.\n>> >\n>> >> On Thu, Feb 5, 2015 at 1:46 PM, Eric Voskuil <eric at voskuil.org> wrote:\n>> >> BLE has an advertised range of over 100m.\n>> >>\n>> >> http://www.bluetooth.com/Pages/low-energy-tech-info.aspx\n>> >>\n>> >> In the case of mass surveillance that range could most likely be extended dramatically by the reviewer. I've seen  WiFi ranges of over a mile with a strong (not FCC approved) receiver.\n>> >>\n>> >> WiFi hotspots don't have strong identity or a guaranteed position, so they can't be trusted for location.\n>> >>\n>> >> e\n>> >>\n>> >> On Feb 5, 2015, at 1:36 PM, Mike Hearn <mike at plan99.net> wrote:\n>> >>\n>> >>>> This sounds horrible. You could basically monitor anyone with a wallet in a highly populated area and track them super easily by doing facial recognition.\n>> >>>\n>> >>> We're talking about BLE, still? The radio tech that runs in the so called \"junk bands\" because propagation is so poor?\n>> >>>\n>> >>> My watch loses its connection to my phone if I just put it down and walk around my apartment. I'm all for reasonable paranoia, but Bluetooth isn't going to be enabling mass surveillance any time soon. It barely goes through air, let alone walls.\n>> >>>\n>> >>> Anyway, whatever. I'm just bouncing around ideas for faster user interfaces. You could always switch it off or set it to be triggered by the presence of particular wifi hotspots, if you don't mind an initial bit of setup.\n>> >>>\n>> >>> Back on topic - the debate is interesting, but I think to get this to the stage of being a BIP we'd need at least another wallet to implement it? Then I guess a BIP would be useful regardless of the design issues. The prefix matching still feels flaky to me but it's hard to know if you could really swipe payments out of the air in practice, without actually trying it.\n>> >\n>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more. Take a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "William Swanson",
                "date": "2015-02-05T23:02:56",
                "message_text_only": "On Thu, Feb 5, 2015 at 2:10 PM, Eric Voskuil <eric at voskuil.org> wrote:\n> A MITM can receive the initial broadcast and then spoof it by jamming the\n> original. You then only see one.\n\nYou are right, of course. There is no way to make Bluetooth 100%\nsecure, since it is an over-the-air technology. You could try securing\nit using a CA or other identity server, but now you've excluded ad-hoc\nperson-to-person payments. Plus, you need an active internet\nconnection to reach the CA.\n\nYou can try using proximity as a substitute for identity, like\nrequiring NFC to kick-start the connection, but at that point you\nmight as well use QR codes.\n\nThis BIP is not trying to provide absolute bullet-proof security,\nsince that's impossible given the physical limitations of the\nBluetooth technology. Instead, it's trying to provide the\nbest-possible security given those constraints. In exchange for this,\nwe get greatly enhanced usability in common scenarios.\n\nThere are plenty of usable, real-world technologies with big security\nholes. Anybody with lock-picking experience will tell you this, but\nnobody is welding their front door shut. The ability to go in and out\nis worth the security risk.\n\nBluetooth payments add a whole new dimension to real-world Bitcoin\nusability. Do we shut that down because it can't be made perfect, or\ndo we do the best we can and move forward?\n\n-William"
            },
            {
                "author": "Roy Badami",
                "date": "2015-02-05T23:34:22",
                "message_text_only": "For peer-to-peer payments, how common do we think that the payment is\nof an ad hoc nature rather than to a known contact?\n\nIf I want to pay my friends/colleagues/etc over a restaurant table\nthere's no reason why I couldn't already have their public keys in my\ncontact list - then it would be pretty straightforward to have a\nwatertight mechanism where I would know who I was paying.  You could\nprobably even relatively securely bootstrap a key exchange over SMS,\nrelying only on the contacts already having each other in their\nphonebooks.\n\nAs for comsumer-to-merchant transactions where the merchant is a\nbricks and mortar merchant, IMHO it absolutely has to be \"pay that\nterminal over there\".  It's the trust model we all currently use -\nwhether paying cash or card - and it's the only trust model that works\nIMHO (and customers and businesses alike are well aware of the risks\nof a fraudster standing behind the counter pretending to be an\nemployee accepting payment - and by and large are pretty good at\nmitigating it).  OTOH as we've discussed here before there are many\nuse cases where the custoemr doesn't actually know or care about the\nname of the shop or bar they walked into but is pretty damn sure that\nthey need to make payment to the person over there behind the counter.\n\nGranted, there are cases taht dont' fall into either of the above -\nbut they're the cases that are (a) harder to figure out how to\nauthenticate and consequently (b) the use cases that are going to be\nmost subject to attempted fraud.\n\nroy\n\nOn Thu, Feb 05, 2015 at 03:02:56PM -0800, William Swanson wrote:\n> On Thu, Feb 5, 2015 at 2:10 PM, Eric Voskuil <eric at voskuil.org> wrote:\n> > A MITM can receive the initial broadcast and then spoof it by jamming the\n> > original. You then only see one.\n> \n> You are right, of course. There is no way to make Bluetooth 100%\n> secure, since it is an over-the-air technology. You could try securing\n> it using a CA or other identity server, but now you've excluded ad-hoc\n> person-to-person payments. Plus, you need an active internet\n> connection to reach the CA.\n> \n> You can try using proximity as a substitute for identity, like\n> requiring NFC to kick-start the connection, but at that point you\n> might as well use QR codes.\n> \n> This BIP is not trying to provide absolute bullet-proof security,\n> since that's impossible given the physical limitations of the\n> Bluetooth technology. Instead, it's trying to provide the\n> best-possible security given those constraints. In exchange for this,\n> we get greatly enhanced usability in common scenarios.\n> \n> There are plenty of usable, real-world technologies with big security\n> holes. Anybody with lock-picking experience will tell you this, but\n> nobody is welding their front door shut. The ability to go in and out\n> is worth the security risk.\n> \n> Bluetooth payments add a whole new dimension to real-world Bitcoin\n> usability. Do we shut that down because it can't be made perfect, or\n> do we do the best we can and move forward?\n> \n> -William\n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T23:59:33",
                "message_text_only": "On 02/05/2015 03:34 PM, Roy Badami wrote:\n> For peer-to-peer payments, how common do we think that the payment is\n> of an ad hoc nature rather than to a known contact?\n> \n> If I want to pay my friends/colleagues/etc over a restaurant table\n> there's no reason why I couldn't already have their public keys in my\n> contact list - then it would be pretty straightforward to have a\n> watertight mechanism where I would know who I was paying.  You could\n> probably even relatively securely bootstrap a key exchange over SMS,\n> relying only on the contacts already having each other in their\n> phonebooks.\n\nIn this case there is no need for P2P communication, just pay to an\naddress you already have for the other party. If you want to avoid\naddress reuse, use stealth addressing.\n\nBut yes, if you don't have a stealth address for the other party you can\ncertainly communicate in private as peers where you trust that you share\na public key. The core issue here is really bootstrapping of that trust\nin an ad hoc manner.\n\n> As for comsumer-to-merchant transactions where the merchant is a\n> bricks and mortar merchant, IMHO it absolutely has to be \"pay that\n> terminal over there\".  It's the trust model we all currently use -\n> whether paying cash or card - and it's the only trust model that works\n> IMHO (and customers and businesses alike are well aware of the risks\n> of a fraudster standing behind the counter pretending to be an\n> employee accepting payment - and by and large are pretty good at\n> mitigating it).  OTOH as we've discussed here before there are many\n> use cases where the custoemr doesn't actually know or care about the\n> name of the shop or bar they walked into but is pretty damn sure that\n> they need to make payment to the person over there behind the counter.\n\nYes, proximity is practically the universal solution to the problem of\nthe payer identifying the correct seller in any face-to-face scenario.\n\n> Granted, there are cases taht dont' fall into either of the above -\n> but they're the cases that are (a) harder to figure out how to\n> authenticate and consequently (b) the use cases that are going to be\n> most subject to attempted fraud.\n\nWhen identification is required (show me some id before I pay you) it\nequates to the BIP-70 scenario in the bitcoin model. This is also\nrequired in order guard against repudiation (give me a signed receipt).\n\n> On Thu, Feb 05, 2015 at 03:02:56PM -0800, William Swanson wrote:\n>> On Thu, Feb 5, 2015 at 2:10 PM, Eric Voskuil <eric at voskuil.org> wrote:\n>>> A MITM can receive the initial broadcast and then spoof it by jamming the\n>>> original. You then only see one.\n>>\n>> You are right, of course. There is no way to make Bluetooth 100%\n>> secure, since it is an over-the-air technology. You could try securing\n>> it using a CA or other identity server, but now you've excluded ad-hoc\n>> person-to-person payments. Plus, you need an active internet\n>> connection to reach the CA.\n>>\n>> You can try using proximity as a substitute for identity, like\n>> requiring NFC to kick-start the connection, but at that point you\n>> might as well use QR codes.\n>>\n>> This BIP is not trying to provide absolute bullet-proof security,\n>> since that's impossible given the physical limitations of the\n>> Bluetooth technology. Instead, it's trying to provide the\n>> best-possible security given those constraints. In exchange for this,\n>> we get greatly enhanced usability in common scenarios.\n>>\n>> There are plenty of usable, real-world technologies with big security\n>> holes. Anybody with lock-picking experience will tell you this, but\n>> nobody is welding their front door shut. The ability to go in and out\n>> is worth the security risk.\n>>\n>> Bluetooth payments add a whole new dimension to real-world Bitcoin\n>> usability. Do we shut that down because it can't be made perfect, or\n>> do we do the best we can and move forward?\n>>\n>> -William\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more. Take a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/9780324f/attachment.sig>"
            },
            {
                "author": "Roy Badami",
                "date": "2015-02-06T08:59:23",
                "message_text_only": "> In this case there is no need for P2P communication, just pay to an\n> address you already have for the other party. If you want to avoid\n> address reuse, use stealth addressing.\n> \n> But yes, if you don't have a stealth address for the other party you can\n> certainly communicate in private as peers where you trust that you share\n> a public key. The core issue here is really bootstrapping of that trust\n> in an ad hoc manner.\n\nSomething interactive might still be nicer, though, to avoid the risk\nof paying to an address that the payee no longer has the private key\nfor.  \"Nooo!! Don't pay to that address.  I lost my old phone so I\ngenerated a new wallet.\"\n\nroy"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-06T09:13:10",
                "message_text_only": "On 02/06/2015 12:59 AM, Roy Badami wrote:\n>> In this case there is no need for P2P communication, just pay to an\n>> address you already have for the other party. If you want to avoid\n>> address reuse, use stealth addressing.\n>>\n>> But yes, if you don't have a stealth address for the other party you can\n>> certainly communicate in private as peers where you trust that you share\n>> a public key. The core issue here is really bootstrapping of that trust\n>> in an ad hoc manner.\n> \n> Something interactive might still be nicer, though, to avoid the risk\n> of paying to an address that the payee no longer has the private key\n> for.  \"Nooo!! Don't pay to that address.  I lost my old phone so I\n> generated a new wallet.\"\n\nCertainly, which brings us back to proximity.\n\nWhich reminds me - it's important to keep in mind the scenario that\narises when there is no person present to represent the receiver. Such\nas a vending machine purchase.\n\nProximity in these cases is insufficient, as the receiver is not able to\nprevent application of a fraudulent NFC device or replacement of a\nstatic QR code. In these cases BIP-70 becomes essential.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150206/4f42feeb/attachment.sig>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-06T00:58:39",
                "message_text_only": "Although consumer to merchant is a use case for BLE I would argue that NFC has a higher chance of providing a better user experience in most cases since, at least on Android, a user can tap their phone without even having a wallet running. The URI handler will launch the wallet for them. However a dedicated, user facing, screen can give certainty that the user is connecting to the correct recipient. \n\n1. Because it can show an address prefix \n2. It can display the users nickname/handle upon connecting which is only sent to the merchant upon a point to point connection. Not a broadcast. \n\nThe Airbitz wallet already does this on the recipient side. A popup shows the most recent person connecting to the recipient. \n\n\n   \nPaul Puey CEO / Co-Founder, Airbitz Inc\n619.850.8624 | http://airbitz.co | San Diego\n     \n\n\n\nOn Feb 5, 2015, at 3:34 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n\nFor peer-to-peer payments, how common do we think that the payment is\nof an ad hoc nature rather than to a known contact?\n\nIf I want to pay my friends/colleagues/etc over a restaurant table\nthere's no reason why I couldn't already have their public keys in my\ncontact list - then it would be pretty straightforward to have a\nwatertight mechanism where I would know who I was paying.  You could\nprobably even relatively securely bootstrap a key exchange over SMS,\nrelying only on the contacts already having each other in their\nphonebooks.\n\nAs for comsumer-to-merchant transactions where the merchant is a\nbricks and mortar merchant, IMHO it absolutely has to be \"pay that\nterminal over there\".  It's the trust model we all currently use -\nwhether paying cash or card - and it's the only trust model that works\nIMHO (and customers and businesses alike are well aware of the risks\nof a fraudster standing behind the counter pretending to be an\nemployee accepting payment - and by and large are pretty good at\nmitigating it).  OTOH as we've discussed here before there are many\nuse cases where the custoemr doesn't actually know or care about the\nname of the shop or bar they walked into but is pretty damn sure that\nthey need to make payment to the person over there behind the counter.\n\nGranted, there are cases taht dont' fall into either of the above -\nbut they're the cases that are (a) harder to figure out how to\nauthenticate and consequently (b) the use cases that are going to be\nmost subject to attempted fraud.\n\nroy\n\n> On Thu, Feb 05, 2015 at 03:02:56PM -0800, William Swanson wrote:\n>> On Thu, Feb 5, 2015 at 2:10 PM, Eric Voskuil <eric at voskuil.org> wrote:\n>> A MITM can receive the initial broadcast and then spoof it by jamming the\n>> original. You then only see one.\n> \n> You are right, of course. There is no way to make Bluetooth 100%\n> secure, since it is an over-the-air technology. You could try securing\n> it using a CA or other identity server, but now you've excluded ad-hoc\n> person-to-person payments. Plus, you need an active internet\n> connection to reach the CA.\n> \n> You can try using proximity as a substitute for identity, like\n> requiring NFC to kick-start the connection, but at that point you\n> might as well use QR codes.\n> \n> This BIP is not trying to provide absolute bullet-proof security,\n> since that's impossible given the physical limitations of the\n> Bluetooth technology. Instead, it's trying to provide the\n> best-possible security given those constraints. In exchange for this,\n> we get greatly enhanced usability in common scenarios.\n> \n> There are plenty of usable, real-world technologies with big security\n> holes. Anybody with lock-picking experience will tell you this, but\n> nobody is welding their front door shut. The ability to go in and out\n> is worth the security risk.\n> \n> Bluetooth payments add a whole new dimension to real-world Bitcoin\n> usability. Do we shut that down because it can't be made perfect, or\n> do we do the best we can and move forward?\n> \n> -William\n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/dece93e9/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T23:22:50",
                "message_text_only": "On 02/05/2015 02:08 PM, Paul Puey wrote:\n> Although not perfect, and it may require visual/verbal verification,\n> I don't see what the trust issue is.\n\nI agree that with manual verification between the parties the worst\nproblem becomes DOS, which is certainly not catastrophic.\n\nBut the objective is to the extent possible improve upon the cumbersome\nprocess of QR code, NFC signal, or textual address scanning. Given that\nthere would be no way to know you are under attack, with the exception\nof manual confirmation, it would seem unwise to ever rely on the\nautomation. If the automation cannot be relied upon, it may actually\nmake matters worse. People would either take their chances by relying on\nit or go through a more complex process.\n\nIn terms of the difficulty of an attack, it's important to recognize\nthat all attacks (DOS, privacy, integrity) in this scenario can be\nfully-automated and executed over the air by a black box at some distance:\n\n* DOS is possible by rebroadcasting a similar request.\n\n* Privacy is compromised by monitoring for payment requests and\ncorrelating them to location and potentially images of parties.\n\n* Integrity is compromised by either:\n(1) Rebroadcasting a similar transaction with a bogus address but with\nthe same leading characters; can't be spent but you lose your money.\n(2) Rebroadcasting with a valid address that doesn't match the leading\ncharacters, in the expectation that the user doesn't check manually.\n\nRegarding possible mitigation via BIP-70:\n\nA BIP-70 signed payment request in the initial broadcast can resolve the\nintegrity issues, but because of the public nature of the broadcast\ncoupled with strong public identity, the privacy compromise is much\nworse. Now transactions are cryptographically tainted.\n\nThis is also the problem with BIP-70 over the web. TLS and other\nsecurity precautions aside, an interloper on the communication, desktop,\ndatacenter, etc., can capture payment requests and strongly correlate\ntransactions to identities in an automated manner. The payment request\nmust be kept private between the parties, and that's hard to do.\n\nSo the initial broadcast needs privacy, but then of course it cannot be\na broadcast - it need to be a narrow cast. That brings us back to\nproximity-based establishment.\n\nI think that you could get away with this for a while, simply because of\nthe narrow fields we are working in presently. But in a bitcoin world it\nwould be very problematic. For this reason I wouldn't want to encourage\nstandardization on this approach.\n\ne\n\nOn 02/05/2015 02:10 PM, Eric Voskuil wrote:\n> A MITM can receive the initial broadcast and then spoof it by jamming\n> the original. You then only see one.\n> \n> e\n> \n> On Feb 5, 2015, at 2:07 PM, Paul Puey <paul at airbitz.co\n> <mailto:paul at airbitz.co>> wrote:\n> \n>> So if you picked up the BLE broadcast request. All you know is that\n>> *someone* within 100m is requesting bitcoin at a certain address. Not\n>> necessarily who. The *name* is both optional, and possibly just a\n>> *handle* of the user. If I'm sitting 5 ft away from someone at dinner\n>> and wanted to pay them via BLE, I might see \"Monkey Dude\" on my list\n>> and simply ask him \"is that you?\" If so, I send it. If there are two\n>> \"Monkey Dude's\" Then I have to bother with the address prefix, but not\n>> otherwise.\n>>\n>> On Thu, Feb 5, 2015 at 1:46 PM, Eric Voskuil <eric at voskuil.org\n>> <mailto:eric at voskuil.org>> wrote:\n>>\n>>     BLE has an advertised range of over 100m. \n>>\n>>     http://www.bluetooth.com/Pages/low-energy-tech-info.aspx\n>>\n>>     In the case of mass surveillance that range could most likely be\n>>     extended dramatically by the reviewer. I've seen  WiFi ranges of\n>>     over a mile with a strong (not FCC approved) receiver.\n>>\n>>     WiFi hotspots don't have strong identity or a guaranteed position,\n>>     so they can't be trusted for location.\n>>\n>>     e\n>>\n>>     On Feb 5, 2015, at 1:36 PM, Mike Hearn <mike at plan99.net\n>>     <mailto:mike at plan99.net>> wrote:\n>>\n>>>         This sounds horrible. You could basically monitor anyone with\n>>>         a wallet in a highly populated area and track them super\n>>>         easily by doing facial recognition.\n>>>\n>>>\n>>>     We're talking about BLE, still? The radio tech that runs in the\n>>>     so called \"junk bands\" because propagation is so poor?\n>>>\n>>>     My watch loses its connection to my phone if I just put it down\n>>>     and walk around my apartment. I'm all for reasonable paranoia,\n>>>     but Bluetooth isn't going to be enabling mass surveillance any\n>>>     time soon. It barely goes through air, let alone walls.\n>>>\n>>>     Anyway, whatever. I'm just bouncing around ideas for faster user\n>>>     interfaces. You could always switch it off or set it to be\n>>>     triggered by the presence of particular wifi hotspots, if you\n>>>     don't mind an initial bit of setup.\n>>>\n>>>     Back on topic - the debate is interesting, but I think to get\n>>>     this to the stage of being a BIP we'd need at least another\n>>>     wallet to implement it? Then I guess a BIP would be useful\n>>>     regardless of the design issues. The prefix matching still feels\n>>>     flaky to me but it's hard to know if you could really swipe\n>>>     payments out of the air in practice, without actually trying it.\n>>>\n>>>\n>>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/3c1c43d6/attachment.sig>"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-05T23:36:11",
                "message_text_only": "> A BIP-70 signed payment request in the initial broadcast can resolve the\n> integrity issues, but because of the public nature of the broadcast\n> coupled with strong public identity, the privacy compromise is much\n> worse. Now transactions are cryptographically tainted.\n>\n> This is also the problem with BIP-70 over the web. TLS and other\n> security precautions aside, an interloper on the communication, desktop,\n> datacenter, etc., can capture payment requests and strongly correlate\n> transactions to identities in an automated manner. The payment request\n> must be kept private between the parties, and that's hard to do.\n\nWhat about using encryption with forward secrecy? Merchant would\ngenerate signed request containing public ECDH part, buyer would send\nback transaction encrypted with ECDH and his public ECDH part. If\nreceiving address/amount is meant to be private, use commit protocol\n(see ZRTP/RedPhone) and short authentication phrase (which is hard to\nspoof thanks to commit protocol - see RedPhone)?"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T23:46:56",
                "message_text_only": "On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>> A BIP-70 signed payment request in the initial broadcast can resolve the\n>> integrity issues, but because of the public nature of the broadcast\n>> coupled with strong public identity, the privacy compromise is much\n>> worse. Now transactions are cryptographically tainted.\n>>\n>> This is also the problem with BIP-70 over the web. TLS and other\n>> security precautions aside, an interloper on the communication, desktop,\n>> datacenter, etc., can capture payment requests and strongly correlate\n>> transactions to identities in an automated manner. The payment request\n>> must be kept private between the parties, and that's hard to do.\n> \n> What about using encryption with forward secrecy? Merchant would\n> generate signed request containing public ECDH part, buyer would send\n> back transaction encrypted with ECDH and his public ECDH part. If\n> receiving address/amount is meant to be private, use commit protocol\n> (see ZRTP/RedPhone) and short authentication phrase (which is hard to\n> spoof thanks to commit protocol - see RedPhone)?\n\nHi Martin,\n\nThe problem is that you need to verify the ownership of the public key.\nA MITM can substitute the key. If you don't have verifiable identity\nassociated with the public key (PKI/WoT), you need a shared secret (such\nas a secret phrase). But the problem is then establishing that secret\nover a public channel.\n\nYou can bootstrap a private session over the untrusted network using a\ntrusted public key (PKI/WoT). But the presumption is that you are\nalready doing this over the web (using TLS). That process is subject to\nattack at the CA. WoT is not subject to a CA attack, because it's\ndecentralized. But it's also not sufficiently deployed for some scenarios.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/60dece7d/attachment.sig>"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-06T00:04:04",
                "message_text_only": "That's exactly what I though when seeing the RedPhone code, but after\nI studied the commit protocol I realized it's actually secure and\nconvenient way to do it. You should do that too. :)\n\nShortly, how it works:\nThe initiator of the connection sends commit message containing the\nhash of his temporary public ECDH part, second party sends back their\npublic ECDH part and then initiator sends his public ECDH part in\nopen. All three messages are hashed together and the first two bytes\nare used to select two words from a shared dictionary which are\ndisplayed on the screen of both the initiator and the second party.\nThe parties communicate those two words and verify they match.\n\nIf an attacker wants to do MITM, he has a chance of choosing right\npublic parts 1:65536. There is no way to brute-force it, since that\nwould be noticed immediately. If instead of two words based on the\nfirst two bytes, four words from BIP39 wordlist were chosen, it would\nprovide entropy of 44 bits which I believe should be enough even for\nparanoid people.\n\nHow this would work in Bitcoin payment scenario: user's phone\nbroadcasts his name, merchant inputs amount and selects the name from\nthe list, commit message is sent (and then the remaining two\nmessages), merchant spells four words he sees on the screen and buyer\nconfirms transaction after verifying that words match.\n\n2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>> A BIP-70 signed payment request in the initial broadcast can resolve the\n>>> integrity issues, but because of the public nature of the broadcast\n>>> coupled with strong public identity, the privacy compromise is much\n>>> worse. Now transactions are cryptographically tainted.\n>>>\n>>> This is also the problem with BIP-70 over the web. TLS and other\n>>> security precautions aside, an interloper on the communication, desktop,\n>>> datacenter, etc., can capture payment requests and strongly correlate\n>>> transactions to identities in an automated manner. The payment request\n>>> must be kept private between the parties, and that's hard to do.\n>>\n>> What about using encryption with forward secrecy? Merchant would\n>> generate signed request containing public ECDH part, buyer would send\n>> back transaction encrypted with ECDH and his public ECDH part. If\n>> receiving address/amount is meant to be private, use commit protocol\n>> (see ZRTP/RedPhone) and short authentication phrase (which is hard to\n>> spoof thanks to commit protocol - see RedPhone)?\n>\n> Hi Martin,\n>\n> The problem is that you need to verify the ownership of the public key.\n> A MITM can substitute the key. If you don't have verifiable identity\n> associated with the public key (PKI/WoT), you need a shared secret (such\n> as a secret phrase). But the problem is then establishing that secret\n> over a public channel.\n>\n> You can bootstrap a private session over the untrusted network using a\n> trusted public key (PKI/WoT). But the presumption is that you are\n> already doing this over the web (using TLS). That process is subject to\n> attack at the CA. WoT is not subject to a CA attack, because it's\n> decentralized. But it's also not sufficiently deployed for some scenarios.\n>\n> e\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-06T00:22:23",
                "message_text_only": "On 02/05/2015 04:04 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n> That's exactly what I though when seeing the RedPhone code, but after\n> I studied the commit protocol I realized it's actually secure and\n> convenient way to do it. You should do that too. :)\n\nI was analyzing the model as you described it to me. A formal analysis\nof the security model of a particular implementation, based on inference\nfrom source code, is a bit beyond what I signed up for. But I'm\nperfectly willing to comment on your description of the model if you are\nwilling to indulge me.\n\n> Shortly, how it works:\n> The initiator of the connection sends commit message containing the\n> hash of his temporary public ECDH part, second party sends back their\n> public ECDH part and then initiator sends his public ECDH part in\n> open. All three messages are hashed together and the first two bytes\n> are used to select two words from a shared dictionary which are\n> displayed on the screen of both the initiator and the second party.\n\n> The parties communicate those two words and verify they match.\n\nHow do they compare words if they haven't yet established a secure channel?\n\n> If an attacker wants to do MITM, he has a chance of choosing right\n> public parts 1:65536. There is no way to brute-force it, since that\n> would be noticed immediately. If instead of two words based on the\n> first two bytes, four words from BIP39 wordlist were chosen, it would\n> provide entropy of 44 bits which I believe should be enough even for\n> paranoid people.\n> \n> How this would work in Bitcoin payment scenario: user's phone\n> broadcasts his name, merchant inputs amount and selects the name from\n> the list, commit message is sent (and then the remaining two\n> messages), merchant spells four words he sees on the screen and buyer\n> confirms transaction after verifying that words match.\n\nSo the assumption is that there exists a secure (as in proximity-based)\ncommunication channel?\n\ne\n\n> 2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>> A BIP-70 signed payment request in the initial broadcast can resolve the\n>>>> integrity issues, but because of the public nature of the broadcast\n>>>> coupled with strong public identity, the privacy compromise is much\n>>>> worse. Now transactions are cryptographically tainted.\n>>>>\n>>>> This is also the problem with BIP-70 over the web. TLS and other\n>>>> security precautions aside, an interloper on the communication, desktop,\n>>>> datacenter, etc., can capture payment requests and strongly correlate\n>>>> transactions to identities in an automated manner. The payment request\n>>>> must be kept private between the parties, and that's hard to do.\n>>>\n>>> What about using encryption with forward secrecy? Merchant would\n>>> generate signed request containing public ECDH part, buyer would send\n>>> back transaction encrypted with ECDH and his public ECDH part. If\n>>> receiving address/amount is meant to be private, use commit protocol\n>>> (see ZRTP/RedPhone) and short authentication phrase (which is hard to\n>>> spoof thanks to commit protocol - see RedPhone)?\n>>\n>> Hi Martin,\n>>\n>> The problem is that you need to verify the ownership of the public key.\n>> A MITM can substitute the key. If you don't have verifiable identity\n>> associated with the public key (PKI/WoT), you need a shared secret (such\n>> as a secret phrase). But the problem is then establishing that secret\n>> over a public channel.\n>>\n>> You can bootstrap a private session over the untrusted network using a\n>> trusted public key (PKI/WoT). But the presumption is that you are\n>> already doing this over the web (using TLS). That process is subject to\n>> attack at the CA. WoT is not subject to a CA attack, because it's\n>> decentralized. But it's also not sufficiently deployed for some scenarios.\n>>\n>> e\n>>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/bcba6fb2/attachment.sig>"
            },
            {
                "author": "Martin Habov\u0161tiak",
                "date": "2015-02-06T00:36:49",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nI believe, we are still talking about transactions of physical people in physical world. So yes, it's proximity based - people tell the words by mouth. :)\n\nIn case of RedPhone, you read those words verbally over not-yet-verified channel relying on difficulty of spoofing your voice. Also the app remembers the public keys, so you don't need to verify second time.\n\nI suggest you to try RedPhone (called Signal on iPhone) yourself. It's free/open source, Internet-based and end-to-end encrypted. You may find it useful some day. Also I'm willing to help you with trying it after I wake up. (~8 hours: Send me private e-mail if you want to.)\n\nD\u0148a 6. febru\u00e1ra 2015 1:22:23 CET pou\u017e\u00edvate\u013e Eric Voskuil <eric at voskuil.org> nap\u00edsal:\n>\n>On 02/05/2015 04:04 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>> That's exactly what I though when seeing the RedPhone code, but after\n>> I studied the commit protocol I realized it's actually secure and\n>> convenient way to do it. You should do that too. :)\n>\n>I was analyzing the model as you described it to me. A formal analysis\n>of the security model of a particular implementation, based on\n>inference\n>from source code, is a bit beyond what I signed up for. But I'm\n>perfectly willing to comment on your description of the model if you\n>are\n>willing to indulge me.\n>\n>> Shortly, how it works:\n>> The initiator of the connection sends commit message containing the\n>> hash of his temporary public ECDH part, second party sends back their\n>> public ECDH part and then initiator sends his public ECDH part in\n>> open. All three messages are hashed together and the first two bytes\n>> are used to select two words from a shared dictionary which are\n>> displayed on the screen of both the initiator and the second party.\n>\n>> The parties communicate those two words and verify they match.\n>\n>How do they compare words if they haven't yet established a secure\n>channel?\n>\n>> If an attacker wants to do MITM, he has a chance of choosing right\n>> public parts 1:65536. There is no way to brute-force it, since that\n>> would be noticed immediately. If instead of two words based on the\n>> first two bytes, four words from BIP39 wordlist were chosen, it would\n>> provide entropy of 44 bits which I believe should be enough even for\n>> paranoid people.\n>>\n>> How this would work in Bitcoin payment scenario: user's phone\n>> broadcasts his name, merchant inputs amount and selects the name from\n>> the list, commit message is sent (and then the remaining two\n>> messages), merchant spells four words he sees on the screen and buyer\n>> confirms transaction after verifying that words match.\n>\n>So the assumption is that there exists a secure (as in proximity-based)\n>communication channel?\n>\n>e\n>\n>> 2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>>> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>> A BIP-70 signed payment request in the initial broadcast can\n>resolve the\n>>>>> integrity issues, but because of the public nature of the\n>broadcast\n>>>>> coupled with strong public identity, the privacy compromise is\n>much\n>>>>> worse. Now transactions are cryptographically tainted.\n>>>>>\n>>>>> This is also the problem with BIP-70 over the web. TLS and other\n>>>>> security precautions aside, an interloper on the communication,\n>desktop,\n>>>>> datacenter, etc., can capture payment requests and strongly\n>correlate\n>>>>> transactions to identities in an automated manner. The payment\n>request\n>>>>> must be kept private between the parties, and that's hard to do.\n>>>>\n>>>> What about using encryption with forward secrecy? Merchant would\n>>>> generate signed request containing public ECDH part, buyer would\n>send\n>>>> back transaction encrypted with ECDH and his public ECDH part. If\n>>>> receiving address/amount is meant to be private, use commit\n>protocol\n>>>> (see ZRTP/RedPhone) and short authentication phrase (which is hard\n>to\n>>>> spoof thanks to commit protocol - see RedPhone)?\n>>>\n>>> Hi Martin,\n>>>\n>>> The problem is that you need to verify the ownership of the public\n>key.\n>>> A MITM can substitute the key. If you don't have verifiable identity\n>>> associated with the public key (PKI/WoT), you need a shared secret\n>(such\n>>> as a secret phrase). But the problem is then establishing that\n>secret\n>>> over a public channel.\n>>>\n>>> You can bootstrap a private session over the untrusted network using\n>a\n>>> trusted public key (PKI/WoT). But the presumption is that you are\n>>> already doing this over the web (using TLS). That process is subject\n>to\n>>> attack at the CA. WoT is not subject to a CA attack, because it's\n>>> decentralized. But it's also not sufficiently deployed for some\n>scenarios.\n>>>\n>>> e\n>>>\n\n- --\nOdoslan\u00e9 z m\u00f4jho Android zariadenia pomocou K-9 Mail.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niI8EAREKADcFAlTUDKEwHE1hcnRpbiBIYWJvdmF0aWFrIDxtYXJ0aW4uaGFib3Zz\ndGlha0BnbWFpbC5jb20+AAoJED6C3NvqapyUfUgA/2j6jQELBtSrNsle7ybGq1D8\nuWgGwevguCnjPd0pEpWgAP42sS/ekCqs1v9wbART9fLprZTBk4YPllwXifss+9sa\nzQ==\n=J4w/\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-06T01:29:03",
                "message_text_only": "On 02/05/2015 04:36 PM, Martin Habov\u0161tiak wrote:\n> I believe, we are still talking about transactions of physical\n> people in physical world. So yes, it's proximity based - people\n> tell the words by mouth. :)\n\nNotice from my original comment:\n\n>>>> A MITM can substitute the key. If you don't have verifiable\n>>>> identity associated with the public key (PKI/WoT), you need\n>>>> a shared secret (such as a secret phrase).\n\nI said this could only be accomplished using a shared secret or a\ntrusted public key. Exchanging a value that is derived from a pair of\npublic keys is a distinction without a difference. The problem remains\nthat the parties must have a secure/out-of-band channel for\ncommunicating this value.\n\nThe fact that they are face-to-face establishes this channel, but that\nbrings us back to the original problem, as it requires manual\nverification - as in visual/audible scanning of the two values for\ncomparison. At that point the visual comparison of the address, or some\nvalue derived from it, is simpler.\n\n> In case of RedPhone, you read those words verbally over not-yet-\n> verified channel relying on difficulty of spoofing your voice. Also\n> the app remembers the public keys, so you don't need to verify\n> second time.\n\nThis is reasonable, but wouldn't help in the case of an ad-hoc\nconnection between parties who don't know each other well.\n\n> I suggest you to try RedPhone (called Signal on iPhone) yourself.\n> It's free/open source, Internet-based and end-to-end encrypted. You\n> may find it useful some day. Also I'm willing to help you with\n> trying it after I wake up. (~8 hours: Send me private e-mail if\n> you want to.)\n\nI appreciate the offer. I really don't trust *any* smartphone as a\nplatform for secure communication/data. But encrypting on the wire does\nof course shrink the attack surface and increase the attacker's cost.\n\ne\n\n> D\u0148a 6. febru\u00e1ra 2015 1:22:23 CET pou\u017e\u00edvate\u013e Eric Voskuil\n<eric at voskuil.org> nap\u00edsal:\n\n>> On 02/05/2015 04:04 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>> That's exactly what I though when seeing the RedPhone code, but after\n>>> I studied the commit protocol I realized it's actually secure and\n>>> convenient way to do it. You should do that too. :)\n> \n>> I was analyzing the model as you described it to me. A formal analysis\n>> of the security model of a particular implementation, based on\n>> inference\n>>from source code, is a bit beyond what I signed up for. But I'm\n>> perfectly willing to comment on your description of the model if you\n>> are\n>> willing to indulge me.\n> \n>>> Shortly, how it works:\n>>> The initiator of the connection sends commit message containing the\n>>> hash of his temporary public ECDH part, second party sends back their\n>>> public ECDH part and then initiator sends his public ECDH part in\n>>> open. All three messages are hashed together and the first two bytes\n>>> are used to select two words from a shared dictionary which are\n>>> displayed on the screen of both the initiator and the second party.\n> \n>>> The parties communicate those two words and verify they match.\n> \n>> How do they compare words if they haven't yet established a secure\n>> channel?\n> \n>>> If an attacker wants to do MITM, he has a chance of choosing right\n>>> public parts 1:65536. There is no way to brute-force it, since that\n>>> would be noticed immediately. If instead of two words based on the\n>>> first two bytes, four words from BIP39 wordlist were chosen, it would\n>>> provide entropy of 44 bits which I believe should be enough even for\n>>> paranoid people.\n>>>\n>>> How this would work in Bitcoin payment scenario: user's phone\n>>> broadcasts his name, merchant inputs amount and selects the name from\n>>> the list, commit message is sent (and then the remaining two\n>>> messages), merchant spells four words he sees on the screen and buyer\n>>> confirms transaction after verifying that words match.\n> \n>> So the assumption is that there exists a secure (as in proximity-based)\n>> communication channel?\n> \n>> e\n> \n>>> 2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>>>> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>>> A BIP-70 signed payment request in the initial broadcast can\n>> resolve the\n>>>>>> integrity issues, but because of the public nature of the\n>> broadcast\n>>>>>> coupled with strong public identity, the privacy compromise is\n>> much\n>>>>>> worse. Now transactions are cryptographically tainted.\n>>>>>>\n>>>>>> This is also the problem with BIP-70 over the web. TLS and other\n>>>>>> security precautions aside, an interloper on the communication,\n>> desktop,\n>>>>>> datacenter, etc., can capture payment requests and strongly\n>> correlate\n>>>>>> transactions to identities in an automated manner. The payment\n>> request\n>>>>>> must be kept private between the parties, and that's hard to do.\n>>>>>\n>>>>> What about using encryption with forward secrecy? Merchant would\n>>>>> generate signed request containing public ECDH part, buyer would\n>> send\n>>>>> back transaction encrypted with ECDH and his public ECDH part. If\n>>>>> receiving address/amount is meant to be private, use commit\n>> protocol\n>>>>> (see ZRTP/RedPhone) and short authentication phrase (which is hard\n>> to\n>>>>> spoof thanks to commit protocol - see RedPhone)?\n>>>>\n>>>> Hi Martin,\n>>>>\n>>>> The problem is that you need to verify the ownership of the public\n>> key.\n>>>> A MITM can substitute the key. If you don't have verifiable identity\n>>>> associated with the public key (PKI/WoT), you need a shared secret\n>> (such\n>>>> as a secret phrase). But the problem is then establishing that\n>> secret\n>>>> over a public channel.\n>>>>\n>>>> You can bootstrap a private session over the untrusted network using\n>> a\n>>>> trusted public key (PKI/WoT). But the presumption is that you are\n>>>> already doing this over the web (using TLS). That process is subject\n>> to\n>>>> attack at the CA. WoT is not subject to a CA attack, because it's\n>>>> decentralized. But it's also not sufficiently deployed for some\n>> scenarios.\n>>>>\n>>>> e\n>>>>\n> \n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/e4afc375/attachment.sig>"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-06T09:07:18",
                "message_text_only": "2015-02-06 2:29 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n> On 02/05/2015 04:36 PM, Martin Habov\u0161tiak wrote:\n>> I believe, we are still talking about transactions of physical\n>> people in physical world. So yes, it's proximity based - people\n>> tell the words by mouth. :)\n>\n> Notice from my original comment:\n>\n>>>>> A MITM can substitute the key. If you don't have verifiable\n>>>>> identity associated with the public key (PKI/WoT), you need\n>>>>> a shared secret (such as a secret phrase).\n>\n> I said this could only be accomplished using a shared secret or a\n> trusted public key. Exchanging a value that is derived from a pair of\n> public keys is a distinction without a difference. The problem remains\n> that the parties must have a secure/out-of-band channel for\n> communicating this value.\n>\n> The fact that they are face-to-face establishes this channel, but that\n> brings us back to the original problem, as it requires manual\n> verification - as in visual/audible scanning of the two values for\n> comparison. At that point the visual comparison of the address, or some\n> value derived from it, is simpler.\n\nI have never been against manual verification. What I'm trying to say\nis let's just make manual verification easier and more secure.\nComparison of address is simpler for the coder but also simpler to\nattack. It has these problems:\n- Addresses broadcasted in plaintext (privacy issue)\n- Amounts broadcasted in plaintext (privacy issue)\n- Address is long - takes lot of time to verify (user experience issue)\n- Address prefix can be brute-forced, if too short or used to make\n\"black hole\" address if longer (vandalism issue)\n\nCommit protocol can be used for both the encryption and the\nauthentication while user experience is not bad and everything is\nstill secure.\n\n>\n>> In case of RedPhone, you read those words verbally over not-yet-\n>> verified channel relying on difficulty of spoofing your voice. Also\n>> the app remembers the public keys, so you don't need to verify\n>> second time.\n>\n> This is reasonable, but wouldn't help in the case of an ad-hoc\n> connection between parties who don't know each other well.\n>\n>> I suggest you to try RedPhone (called Signal on iPhone) yourself.\n>> It's free/open source, Internet-based and end-to-end encrypted. You\n>> may find it useful some day. Also I'm willing to help you with\n>> trying it after I wake up. (~8 hours: Send me private e-mail if\n>> you want to.)\n>\n> I appreciate the offer. I really don't trust *any* smartphone as a\n> platform for secure communication/data. But encrypting on the wire does\n> of course shrink the attack surface and increase the attacker's cost.\n>\n> e\n>\n>> D\u0148a 6. febru\u00e1ra 2015 1:22:23 CET pou\u017e\u00edvate\u013e Eric Voskuil\n> <eric at voskuil.org> nap\u00edsal:\n>\n>>> On 02/05/2015 04:04 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>> That's exactly what I though when seeing the RedPhone code, but after\n>>>> I studied the commit protocol I realized it's actually secure and\n>>>> convenient way to do it. You should do that too. :)\n>>\n>>> I was analyzing the model as you described it to me. A formal analysis\n>>> of the security model of a particular implementation, based on\n>>> inference\n>>>from source code, is a bit beyond what I signed up for. But I'm\n>>> perfectly willing to comment on your description of the model if you\n>>> are\n>>> willing to indulge me.\n>>\n>>>> Shortly, how it works:\n>>>> The initiator of the connection sends commit message containing the\n>>>> hash of his temporary public ECDH part, second party sends back their\n>>>> public ECDH part and then initiator sends his public ECDH part in\n>>>> open. All three messages are hashed together and the first two bytes\n>>>> are used to select two words from a shared dictionary which are\n>>>> displayed on the screen of both the initiator and the second party.\n>>\n>>>> The parties communicate those two words and verify they match.\n>>\n>>> How do they compare words if they haven't yet established a secure\n>>> channel?\n>>\n>>>> If an attacker wants to do MITM, he has a chance of choosing right\n>>>> public parts 1:65536. There is no way to brute-force it, since that\n>>>> would be noticed immediately. If instead of two words based on the\n>>>> first two bytes, four words from BIP39 wordlist were chosen, it would\n>>>> provide entropy of 44 bits which I believe should be enough even for\n>>>> paranoid people.\n>>>>\n>>>> How this would work in Bitcoin payment scenario: user's phone\n>>>> broadcasts his name, merchant inputs amount and selects the name from\n>>>> the list, commit message is sent (and then the remaining two\n>>>> messages), merchant spells four words he sees on the screen and buyer\n>>>> confirms transaction after verifying that words match.\n>>\n>>> So the assumption is that there exists a secure (as in proximity-based)\n>>> communication channel?\n>>\n>>> e\n>>\n>>>> 2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>>>>> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>>>> A BIP-70 signed payment request in the initial broadcast can\n>>> resolve the\n>>>>>>> integrity issues, but because of the public nature of the\n>>> broadcast\n>>>>>>> coupled with strong public identity, the privacy compromise is\n>>> much\n>>>>>>> worse. Now transactions are cryptographically tainted.\n>>>>>>>\n>>>>>>> This is also the problem with BIP-70 over the web. TLS and other\n>>>>>>> security precautions aside, an interloper on the communication,\n>>> desktop,\n>>>>>>> datacenter, etc., can capture payment requests and strongly\n>>> correlate\n>>>>>>> transactions to identities in an automated manner. The payment\n>>> request\n>>>>>>> must be kept private between the parties, and that's hard to do.\n>>>>>>\n>>>>>> What about using encryption with forward secrecy? Merchant would\n>>>>>> generate signed request containing public ECDH part, buyer would\n>>> send\n>>>>>> back transaction encrypted with ECDH and his public ECDH part. If\n>>>>>> receiving address/amount is meant to be private, use commit\n>>> protocol\n>>>>>> (see ZRTP/RedPhone) and short authentication phrase (which is hard\n>>> to\n>>>>>> spoof thanks to commit protocol - see RedPhone)?\n>>>>>\n>>>>> Hi Martin,\n>>>>>\n>>>>> The problem is that you need to verify the ownership of the public\n>>> key.\n>>>>> A MITM can substitute the key. If you don't have verifiable identity\n>>>>> associated with the public key (PKI/WoT), you need a shared secret\n>>> (such\n>>>>> as a secret phrase). But the problem is then establishing that\n>>> secret\n>>>>> over a public channel.\n>>>>>\n>>>>> You can bootstrap a private session over the untrusted network using\n>>> a\n>>>>> trusted public key (PKI/WoT). But the presumption is that you are\n>>>>> already doing this over the web (using TLS). That process is subject\n>>> to\n>>>>> attack at the CA. WoT is not subject to a CA attack, because it's\n>>>>> decentralized. But it's also not sufficiently deployed for some\n>>> scenarios.\n>>>>>\n>>>>> e\n>>>>>\n>>\n>>\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-10T16:55:58",
                "message_text_only": "Martin,\n\nI like your idea for the commit protocol in that it resolves the\nvandalous address substitution attack. However, I don't see a way to\nprevent privacy loss without adverse impact to the scenario.\n\nAnyone could perform the handshake and thereby obtain the payment\nrequest. Therefore to prevent inadvertent disclosure the customer must\nvisually confirm the \"phrase\" and then verbally tell the merchant to\nproceed by sending the payment request.\n\nOne might argue that it's sufficient to preserve the integrity of the\ntransaction while suffering the privacy loss, especially given that a\nhijacked handshake should never result in a completed transaction -\nunless of course the hijacker pays.\n\nBut imagine someone purchasing their meds. HIPAA requires the checkout\nqueue to form behind a yellow line. That speaks directly to this question.\n\ne\n\nOn 02/06/2015 01:07 AM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n> 2015-02-06 2:29 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>> On 02/05/2015 04:36 PM, Martin Habov\u0161tiak wrote:\n>>> I believe, we are still talking about transactions of physical\n>>> people in physical world. So yes, it's proximity based - people\n>>> tell the words by mouth. :)\n>>\n>> Notice from my original comment:\n>>\n>>>>>> A MITM can substitute the key. If you don't have verifiable\n>>>>>> identity associated with the public key (PKI/WoT), you need\n>>>>>> a shared secret (such as a secret phrase).\n>>\n>> I said this could only be accomplished using a shared secret or a\n>> trusted public key. Exchanging a value that is derived from a pair of\n>> public keys is a distinction without a difference. The problem remains\n>> that the parties must have a secure/out-of-band channel for\n>> communicating this value.\n>>\n>> The fact that they are face-to-face establishes this channel, but that\n>> brings us back to the original problem, as it requires manual\n>> verification - as in visual/audible scanning of the two values for\n>> comparison. At that point the visual comparison of the address, or some\n>> value derived from it, is simpler.\n> \n> I have never been against manual verification. What I'm trying to say\n> is let's just make manual verification easier and more secure.\n> Comparison of address is simpler for the coder but also simpler to\n> attack. It has these problems:\n> - Addresses broadcasted in plaintext (privacy issue)\n> - Amounts broadcasted in plaintext (privacy issue)\n> - Address is long - takes lot of time to verify (user experience issue)\n> - Address prefix can be brute-forced, if too short or used to make\n> \"black hole\" address if longer (vandalism issue)\n> \n> Commit protocol can be used for both the encryption and the\n> authentication while user experience is not bad and everything is\n> still secure.\n> \n>>\n>>> In case of RedPhone, you read those words verbally over not-yet-\n>>> verified channel relying on difficulty of spoofing your voice. Also\n>>> the app remembers the public keys, so you don't need to verify\n>>> second time.\n>>\n>> This is reasonable, but wouldn't help in the case of an ad-hoc\n>> connection between parties who don't know each other well.\n>>\n>>> I suggest you to try RedPhone (called Signal on iPhone) yourself.\n>>> It's free/open source, Internet-based and end-to-end encrypted. You\n>>> may find it useful some day. Also I'm willing to help you with\n>>> trying it after I wake up. (~8 hours: Send me private e-mail if\n>>> you want to.)\n>>\n>> I appreciate the offer. I really don't trust *any* smartphone as a\n>> platform for secure communication/data. But encrypting on the wire does\n>> of course shrink the attack surface and increase the attacker's cost.\n>>\n>> e\n>>\n>>> D\u0148a 6. febru\u00e1ra 2015 1:22:23 CET pou\u017e\u00edvate\u013e Eric Voskuil\n>> <eric at voskuil.org> nap\u00edsal:\n>>\n>>>> On 02/05/2015 04:04 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>> That's exactly what I though when seeing the RedPhone code, but after\n>>>>> I studied the commit protocol I realized it's actually secure and\n>>>>> convenient way to do it. You should do that too. :)\n>>>\n>>>> I was analyzing the model as you described it to me. A formal analysis\n>>>> of the security model of a particular implementation, based on\n>>>> inference\n>>> >from source code, is a bit beyond what I signed up for. But I'm\n>>>> perfectly willing to comment on your description of the model if you\n>>>> are\n>>>> willing to indulge me.\n>>>\n>>>>> Shortly, how it works:\n>>>>> The initiator of the connection sends commit message containing the\n>>>>> hash of his temporary public ECDH part, second party sends back their\n>>>>> public ECDH part and then initiator sends his public ECDH part in\n>>>>> open. All three messages are hashed together and the first two bytes\n>>>>> are used to select two words from a shared dictionary which are\n>>>>> displayed on the screen of both the initiator and the second party.\n>>>\n>>>>> The parties communicate those two words and verify they match.\n>>>\n>>>> How do they compare words if they haven't yet established a secure\n>>>> channel?\n>>>\n>>>>> If an attacker wants to do MITM, he has a chance of choosing right\n>>>>> public parts 1:65536. There is no way to brute-force it, since that\n>>>>> would be noticed immediately. If instead of two words based on the\n>>>>> first two bytes, four words from BIP39 wordlist were chosen, it would\n>>>>> provide entropy of 44 bits which I believe should be enough even for\n>>>>> paranoid people.\n>>>>>\n>>>>> How this would work in Bitcoin payment scenario: user's phone\n>>>>> broadcasts his name, merchant inputs amount and selects the name from\n>>>>> the list, commit message is sent (and then the remaining two\n>>>>> messages), merchant spells four words he sees on the screen and buyer\n>>>>> confirms transaction after verifying that words match.\n>>>\n>>>> So the assumption is that there exists a secure (as in proximity-based)\n>>>> communication channel?\n>>>\n>>>> e\n>>>\n>>>>> 2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>>>>>> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>>>>> A BIP-70 signed payment request in the initial broadcast can\n>>>> resolve the\n>>>>>>>> integrity issues, but because of the public nature of the\n>>>> broadcast\n>>>>>>>> coupled with strong public identity, the privacy compromise is\n>>>> much\n>>>>>>>> worse. Now transactions are cryptographically tainted.\n>>>>>>>>\n>>>>>>>> This is also the problem with BIP-70 over the web. TLS and other\n>>>>>>>> security precautions aside, an interloper on the communication,\n>>>> desktop,\n>>>>>>>> datacenter, etc., can capture payment requests and strongly\n>>>> correlate\n>>>>>>>> transactions to identities in an automated manner. The payment\n>>>> request\n>>>>>>>> must be kept private between the parties, and that's hard to do.\n>>>>>>>\n>>>>>>> What about using encryption with forward secrecy? Merchant would\n>>>>>>> generate signed request containing public ECDH part, buyer would\n>>>> send\n>>>>>>> back transaction encrypted with ECDH and his public ECDH part. If\n>>>>>>> receiving address/amount is meant to be private, use commit\n>>>> protocol\n>>>>>>> (see ZRTP/RedPhone) and short authentication phrase (which is hard\n>>>> to\n>>>>>>> spoof thanks to commit protocol - see RedPhone)?\n>>>>>>\n>>>>>> Hi Martin,\n>>>>>>\n>>>>>> The problem is that you need to verify the ownership of the public\n>>>> key.\n>>>>>> A MITM can substitute the key. If you don't have verifiable identity\n>>>>>> associated with the public key (PKI/WoT), you need a shared secret\n>>>> (such\n>>>>>> as a secret phrase). But the problem is then establishing that\n>>>> secret\n>>>>>> over a public channel.\n>>>>>>\n>>>>>> You can bootstrap a private session over the untrusted network using\n>>>> a\n>>>>>> trusted public key (PKI/WoT). But the presumption is that you are\n>>>>>> already doing this over the web (using TLS). That process is subject\n>>>> to\n>>>>>> attack at the CA. WoT is not subject to a CA attack, because it's\n>>>>>> decentralized. But it's also not sufficiently deployed for some\n>>>> scenarios.\n>>>>>>\n>>>>>> e\n>>>>>>\n>>>\n>>>\n>>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/632fa23d/attachment.sig>"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-10T17:16:34",
                "message_text_only": "I'm not sure if I was clear enough. Handshake should be used to\nestablish authenticated AND encrypted communication using ECDH (or\njust DH, but I think it's easier to use ECDH, since required functions\nare already used in Bitcoin protocol), like RedPhone does. BTW\nknowledge of verification string is useless to the attacker.\n\nYes, the customer must verify it verbally and the merchant shouldn't\nsend the transaction before verification. Other possibility is that in\ncase of differing verification strings new address is generated, so\nattacker doesn't know the address. But in this case, amount is leaked\nand there is quite high probability it can be found in the Blockchain.\nAnyway, I don't believe the transaction can be made securely without\nsuch interaction except with white-listing public keys, so I see no\nreason why interaction should be problematic.\n\nWe don't have such strict regulations but I agree that security is\nimportant. Currently I think that verbal verification and manual\nconfirmation is the best way to achieve high security and reasonable\nuser-friendliness.\n\n2015-02-10 17:55 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n> Martin,\n>\n> I like your idea for the commit protocol in that it resolves the\n> vandalous address substitution attack. However, I don't see a way to\n> prevent privacy loss without adverse impact to the scenario.\n>\n> Anyone could perform the handshake and thereby obtain the payment\n> request. Therefore to prevent inadvertent disclosure the customer must\n> visually confirm the \"phrase\" and then verbally tell the merchant to\n> proceed by sending the payment request.\n>\n> One might argue that it's sufficient to preserve the integrity of the\n> transaction while suffering the privacy loss, especially given that a\n> hijacked handshake should never result in a completed transaction -\n> unless of course the hijacker pays.\n>\n> But imagine someone purchasing their meds. HIPAA requires the checkout\n> queue to form behind a yellow line. That speaks directly to this question.\n>\n> e\n>\n> On 02/06/2015 01:07 AM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>> 2015-02-06 2:29 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>>> On 02/05/2015 04:36 PM, Martin Habov\u0161tiak wrote:\n>>>> I believe, we are still talking about transactions of physical\n>>>> people in physical world. So yes, it's proximity based - people\n>>>> tell the words by mouth. :)\n>>>\n>>> Notice from my original comment:\n>>>\n>>>>>>> A MITM can substitute the key. If you don't have verifiable\n>>>>>>> identity associated with the public key (PKI/WoT), you need\n>>>>>>> a shared secret (such as a secret phrase).\n>>>\n>>> I said this could only be accomplished using a shared secret or a\n>>> trusted public key. Exchanging a value that is derived from a pair of\n>>> public keys is a distinction without a difference. The problem remains\n>>> that the parties must have a secure/out-of-band channel for\n>>> communicating this value.\n>>>\n>>> The fact that they are face-to-face establishes this channel, but that\n>>> brings us back to the original problem, as it requires manual\n>>> verification - as in visual/audible scanning of the two values for\n>>> comparison. At that point the visual comparison of the address, or some\n>>> value derived from it, is simpler.\n>>\n>> I have never been against manual verification. What I'm trying to say\n>> is let's just make manual verification easier and more secure.\n>> Comparison of address is simpler for the coder but also simpler to\n>> attack. It has these problems:\n>> - Addresses broadcasted in plaintext (privacy issue)\n>> - Amounts broadcasted in plaintext (privacy issue)\n>> - Address is long - takes lot of time to verify (user experience issue)\n>> - Address prefix can be brute-forced, if too short or used to make\n>> \"black hole\" address if longer (vandalism issue)\n>>\n>> Commit protocol can be used for both the encryption and the\n>> authentication while user experience is not bad and everything is\n>> still secure.\n>>\n>>>\n>>>> In case of RedPhone, you read those words verbally over not-yet-\n>>>> verified channel relying on difficulty of spoofing your voice. Also\n>>>> the app remembers the public keys, so you don't need to verify\n>>>> second time.\n>>>\n>>> This is reasonable, but wouldn't help in the case of an ad-hoc\n>>> connection between parties who don't know each other well.\n>>>\n>>>> I suggest you to try RedPhone (called Signal on iPhone) yourself.\n>>>> It's free/open source, Internet-based and end-to-end encrypted. You\n>>>> may find it useful some day. Also I'm willing to help you with\n>>>> trying it after I wake up. (~8 hours: Send me private e-mail if\n>>>> you want to.)\n>>>\n>>> I appreciate the offer. I really don't trust *any* smartphone as a\n>>> platform for secure communication/data. But encrypting on the wire does\n>>> of course shrink the attack surface and increase the attacker's cost.\n>>>\n>>> e\n>>>\n>>>> D\u0148a 6. febru\u00e1ra 2015 1:22:23 CET pou\u017e\u00edvate\u013e Eric Voskuil\n>>> <eric at voskuil.org> nap\u00edsal:\n>>>\n>>>>> On 02/05/2015 04:04 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>>> That's exactly what I though when seeing the RedPhone code, but after\n>>>>>> I studied the commit protocol I realized it's actually secure and\n>>>>>> convenient way to do it. You should do that too. :)\n>>>>\n>>>>> I was analyzing the model as you described it to me. A formal analysis\n>>>>> of the security model of a particular implementation, based on\n>>>>> inference\n>>>> >from source code, is a bit beyond what I signed up for. But I'm\n>>>>> perfectly willing to comment on your description of the model if you\n>>>>> are\n>>>>> willing to indulge me.\n>>>>\n>>>>>> Shortly, how it works:\n>>>>>> The initiator of the connection sends commit message containing the\n>>>>>> hash of his temporary public ECDH part, second party sends back their\n>>>>>> public ECDH part and then initiator sends his public ECDH part in\n>>>>>> open. All three messages are hashed together and the first two bytes\n>>>>>> are used to select two words from a shared dictionary which are\n>>>>>> displayed on the screen of both the initiator and the second party.\n>>>>\n>>>>>> The parties communicate those two words and verify they match.\n>>>>\n>>>>> How do they compare words if they haven't yet established a secure\n>>>>> channel?\n>>>>\n>>>>>> If an attacker wants to do MITM, he has a chance of choosing right\n>>>>>> public parts 1:65536. There is no way to brute-force it, since that\n>>>>>> would be noticed immediately. If instead of two words based on the\n>>>>>> first two bytes, four words from BIP39 wordlist were chosen, it would\n>>>>>> provide entropy of 44 bits which I believe should be enough even for\n>>>>>> paranoid people.\n>>>>>>\n>>>>>> How this would work in Bitcoin payment scenario: user's phone\n>>>>>> broadcasts his name, merchant inputs amount and selects the name from\n>>>>>> the list, commit message is sent (and then the remaining two\n>>>>>> messages), merchant spells four words he sees on the screen and buyer\n>>>>>> confirms transaction after verifying that words match.\n>>>>\n>>>>> So the assumption is that there exists a secure (as in proximity-based)\n>>>>> communication channel?\n>>>>\n>>>>> e\n>>>>\n>>>>>> 2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>>>>>>> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>>>>>> A BIP-70 signed payment request in the initial broadcast can\n>>>>> resolve the\n>>>>>>>>> integrity issues, but because of the public nature of the\n>>>>> broadcast\n>>>>>>>>> coupled with strong public identity, the privacy compromise is\n>>>>> much\n>>>>>>>>> worse. Now transactions are cryptographically tainted.\n>>>>>>>>>\n>>>>>>>>> This is also the problem with BIP-70 over the web. TLS and other\n>>>>>>>>> security precautions aside, an interloper on the communication,\n>>>>> desktop,\n>>>>>>>>> datacenter, etc., can capture payment requests and strongly\n>>>>> correlate\n>>>>>>>>> transactions to identities in an automated manner. The payment\n>>>>> request\n>>>>>>>>> must be kept private between the parties, and that's hard to do.\n>>>>>>>>\n>>>>>>>> What about using encryption with forward secrecy? Merchant would\n>>>>>>>> generate signed request containing public ECDH part, buyer would\n>>>>> send\n>>>>>>>> back transaction encrypted with ECDH and his public ECDH part. If\n>>>>>>>> receiving address/amount is meant to be private, use commit\n>>>>> protocol\n>>>>>>>> (see ZRTP/RedPhone) and short authentication phrase (which is hard\n>>>>> to\n>>>>>>>> spoof thanks to commit protocol - see RedPhone)?\n>>>>>>>\n>>>>>>> Hi Martin,\n>>>>>>>\n>>>>>>> The problem is that you need to verify the ownership of the public\n>>>>> key.\n>>>>>>> A MITM can substitute the key. If you don't have verifiable identity\n>>>>>>> associated with the public key (PKI/WoT), you need a shared secret\n>>>>> (such\n>>>>>>> as a secret phrase). But the problem is then establishing that\n>>>>> secret\n>>>>>>> over a public channel.\n>>>>>>>\n>>>>>>> You can bootstrap a private session over the untrusted network using\n>>>>> a\n>>>>>>> trusted public key (PKI/WoT). But the presumption is that you are\n>>>>>>> already doing this over the web (using TLS). That process is subject\n>>>>> to\n>>>>>>> attack at the CA. WoT is not subject to a CA attack, because it's\n>>>>>>> decentralized. But it's also not sufficiently deployed for some\n>>>>> scenarios.\n>>>>>>>\n>>>>>>> e\n>>>>>>>\n>>>>\n>>>>\n>>>\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-10T17:56:39",
                "message_text_only": "On 02/10/2015 09:16 AM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n> I'm not sure if I was clear enough. Handshake should be used to\n> establish authenticated AND encrypted communication using ECDH (or\n> just DH, but I think it's easier to use ECDH, since required functions\n> are already used in Bitcoin protocol), like RedPhone does. BTW\n> knowledge of verification string is useless to the attacker.\n\nYes, I think this was clear from your description.\n\n> Yes, the customer must verify it verbally and the merchant shouldn't\n> send the transaction before verification. Other possibility is that in\n> case of differing verification strings new address is generated, so\n> attacker doesn't know the address. But in this case, amount is leaked\n> and there is quite high probability it can be found in the Blockchain.\n\nYes, for each handshake the payment request would need to contain a\ndifferent address, mitigating some of the privacy loss.\n\n> Anyway, I don't believe the transaction can be made securely without\n> such interaction except with white-listing public keys, so I see no\n> reason why interaction should be problematic.\n\nIt can be done securely and privately by transfer of a shared secret\nthrough a private channel.\n\n> We don't have such strict regulations but I agree that security is\n> important. Currently I think that verbal verification and manual\n> confirmation is the best way to achieve high security and reasonable\n> user-friendliness.\n\nI think for a broadcast model (e.g. Bluetooth only) that is the only\nwant to ensure integrity and privacy. A narrow cast can use proximity to\nestablish trust.\n\n> 2015-02-10 17:55 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>> Martin,\n>>\n>> I like your idea for the commit protocol in that it resolves the\n>> vandalous address substitution attack. However, I don't see a way to\n>> prevent privacy loss without adverse impact to the scenario.\n>>\n>> Anyone could perform the handshake and thereby obtain the payment\n>> request. Therefore to prevent inadvertent disclosure the customer must\n>> visually confirm the \"phrase\" and then verbally tell the merchant to\n>> proceed by sending the payment request.\n>>\n>> One might argue that it's sufficient to preserve the integrity of the\n>> transaction while suffering the privacy loss, especially given that a\n>> hijacked handshake should never result in a completed transaction -\n>> unless of course the hijacker pays.\n>>\n>> But imagine someone purchasing their meds. HIPAA requires the checkout\n>> queue to form behind a yellow line. That speaks directly to this question.\n>>\n>> e\n>>\n>> On 02/06/2015 01:07 AM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>> 2015-02-06 2:29 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>>>> On 02/05/2015 04:36 PM, Martin Habov\u0161tiak wrote:\n>>>>> I believe, we are still talking about transactions of physical\n>>>>> people in physical world. So yes, it's proximity based - people\n>>>>> tell the words by mouth. :)\n>>>>\n>>>> Notice from my original comment:\n>>>>\n>>>>>>>> A MITM can substitute the key. If you don't have verifiable\n>>>>>>>> identity associated with the public key (PKI/WoT), you need\n>>>>>>>> a shared secret (such as a secret phrase).\n>>>>\n>>>> I said this could only be accomplished using a shared secret or a\n>>>> trusted public key. Exchanging a value that is derived from a pair of\n>>>> public keys is a distinction without a difference. The problem remains\n>>>> that the parties must have a secure/out-of-band channel for\n>>>> communicating this value.\n>>>>\n>>>> The fact that they are face-to-face establishes this channel, but that\n>>>> brings us back to the original problem, as it requires manual\n>>>> verification - as in visual/audible scanning of the two values for\n>>>> comparison. At that point the visual comparison of the address, or some\n>>>> value derived from it, is simpler.\n>>>\n>>> I have never been against manual verification. What I'm trying to say\n>>> is let's just make manual verification easier and more secure.\n>>> Comparison of address is simpler for the coder but also simpler to\n>>> attack. It has these problems:\n>>> - Addresses broadcasted in plaintext (privacy issue)\n>>> - Amounts broadcasted in plaintext (privacy issue)\n>>> - Address is long - takes lot of time to verify (user experience issue)\n>>> - Address prefix can be brute-forced, if too short or used to make\n>>> \"black hole\" address if longer (vandalism issue)\n>>>\n>>> Commit protocol can be used for both the encryption and the\n>>> authentication while user experience is not bad and everything is\n>>> still secure.\n>>>\n>>>>\n>>>>> In case of RedPhone, you read those words verbally over not-yet-\n>>>>> verified channel relying on difficulty of spoofing your voice. Also\n>>>>> the app remembers the public keys, so you don't need to verify\n>>>>> second time.\n>>>>\n>>>> This is reasonable, but wouldn't help in the case of an ad-hoc\n>>>> connection between parties who don't know each other well.\n>>>>\n>>>>> I suggest you to try RedPhone (called Signal on iPhone) yourself.\n>>>>> It's free/open source, Internet-based and end-to-end encrypted. You\n>>>>> may find it useful some day. Also I'm willing to help you with\n>>>>> trying it after I wake up. (~8 hours: Send me private e-mail if\n>>>>> you want to.)\n>>>>\n>>>> I appreciate the offer. I really don't trust *any* smartphone as a\n>>>> platform for secure communication/data. But encrypting on the wire does\n>>>> of course shrink the attack surface and increase the attacker's cost.\n>>>>\n>>>> e\n>>>>\n>>>>> D\u0148a 6. febru\u00e1ra 2015 1:22:23 CET pou\u017e\u00edvate\u013e Eric Voskuil\n>>>> <eric at voskuil.org> nap\u00edsal:\n>>>>\n>>>>>> On 02/05/2015 04:04 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>>>> That's exactly what I though when seeing the RedPhone code, but after\n>>>>>>> I studied the commit protocol I realized it's actually secure and\n>>>>>>> convenient way to do it. You should do that too. :)\n>>>>>\n>>>>>> I was analyzing the model as you described it to me. A formal analysis\n>>>>>> of the security model of a particular implementation, based on\n>>>>>> inference\n>>>>> >from source code, is a bit beyond what I signed up for. But I'm\n>>>>>> perfectly willing to comment on your description of the model if you\n>>>>>> are\n>>>>>> willing to indulge me.\n>>>>>\n>>>>>>> Shortly, how it works:\n>>>>>>> The initiator of the connection sends commit message containing the\n>>>>>>> hash of his temporary public ECDH part, second party sends back their\n>>>>>>> public ECDH part and then initiator sends his public ECDH part in\n>>>>>>> open. All three messages are hashed together and the first two bytes\n>>>>>>> are used to select two words from a shared dictionary which are\n>>>>>>> displayed on the screen of both the initiator and the second party.\n>>>>>\n>>>>>>> The parties communicate those two words and verify they match.\n>>>>>\n>>>>>> How do they compare words if they haven't yet established a secure\n>>>>>> channel?\n>>>>>\n>>>>>>> If an attacker wants to do MITM, he has a chance of choosing right\n>>>>>>> public parts 1:65536. There is no way to brute-force it, since that\n>>>>>>> would be noticed immediately. If instead of two words based on the\n>>>>>>> first two bytes, four words from BIP39 wordlist were chosen, it would\n>>>>>>> provide entropy of 44 bits which I believe should be enough even for\n>>>>>>> paranoid people.\n>>>>>>>\n>>>>>>> How this would work in Bitcoin payment scenario: user's phone\n>>>>>>> broadcasts his name, merchant inputs amount and selects the name from\n>>>>>>> the list, commit message is sent (and then the remaining two\n>>>>>>> messages), merchant spells four words he sees on the screen and buyer\n>>>>>>> confirms transaction after verifying that words match.\n>>>>>\n>>>>>> So the assumption is that there exists a secure (as in proximity-based)\n>>>>>> communication channel?\n>>>>>\n>>>>>> e\n>>>>>\n>>>>>>> 2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n>>>>>>>> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>>>>>>>>> A BIP-70 signed payment request in the initial broadcast can\n>>>>>> resolve the\n>>>>>>>>>> integrity issues, but because of the public nature of the\n>>>>>> broadcast\n>>>>>>>>>> coupled with strong public identity, the privacy compromise is\n>>>>>> much\n>>>>>>>>>> worse. Now transactions are cryptographically tainted.\n>>>>>>>>>>\n>>>>>>>>>> This is also the problem with BIP-70 over the web. TLS and other\n>>>>>>>>>> security precautions aside, an interloper on the communication,\n>>>>>> desktop,\n>>>>>>>>>> datacenter, etc., can capture payment requests and strongly\n>>>>>> correlate\n>>>>>>>>>> transactions to identities in an automated manner. The payment\n>>>>>> request\n>>>>>>>>>> must be kept private between the parties, and that's hard to do.\n>>>>>>>>>\n>>>>>>>>> What about using encryption with forward secrecy? Merchant would\n>>>>>>>>> generate signed request containing public ECDH part, buyer would\n>>>>>> send\n>>>>>>>>> back transaction encrypted with ECDH and his public ECDH part. If\n>>>>>>>>> receiving address/amount is meant to be private, use commit\n>>>>>> protocol\n>>>>>>>>> (see ZRTP/RedPhone) and short authentication phrase (which is hard\n>>>>>> to\n>>>>>>>>> spoof thanks to commit protocol - see RedPhone)?\n>>>>>>>>\n>>>>>>>> Hi Martin,\n>>>>>>>>\n>>>>>>>> The problem is that you need to verify the ownership of the public\n>>>>>> key.\n>>>>>>>> A MITM can substitute the key. If you don't have verifiable identity\n>>>>>>>> associated with the public key (PKI/WoT), you need a shared secret\n>>>>>> (such\n>>>>>>>> as a secret phrase). But the problem is then establishing that\n>>>>>> secret\n>>>>>>>> over a public channel.\n>>>>>>>>\n>>>>>>>> You can bootstrap a private session over the untrusted network using\n>>>>>> a\n>>>>>>>> trusted public key (PKI/WoT). But the presumption is that you are\n>>>>>>>> already doing this over the web (using TLS). That process is subject\n>>>>>> to\n>>>>>>>> attack at the CA. WoT is not subject to a CA attack, because it's\n>>>>>>>> decentralized. But it's also not sufficiently deployed for some\n>>>>>> scenarios.\n>>>>>>>>\n>>>>>>>> e\n>>>>>>>>\n>>>>>\n>>>>>\n>>>>\n>>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/339f9525/attachment.sig>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-06T00:49:12",
                "message_text_only": "The trust can be considered bootstrapped by visual verification of the address prefix. If we are really concerned about someone jamming a Bluetooth signal in a coffeeshop then the UI can encourage verification of the prefix. Much like how regular Bluetooth requires 'pairing' via entering a 4-6 digit code.\n\n\n   \nPaul Puey CEO / Co-Founder, Airbitz Inc\n619.850.8624 | http://airbitz.co | San Diego\n     \n\n\n\nOn Feb 5, 2015, at 3:46 PM, Eric Voskuil <eric at voskuil.org> wrote:\n\nOn 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>> A BIP-70 signed payment request in the initial broadcast can resolve the\n>> integrity issues, but because of the public nature of the broadcast\n>> coupled with strong public identity, the privacy compromise is much\n>> worse. Now transactions are cryptographically tainted.\n>> \n>> This is also the problem with BIP-70 over the web. TLS and other\n>> security precautions aside, an interloper on the communication, desktop,\n>> datacenter, etc., can capture payment requests and strongly correlate\n>> transactions to identities in an automated manner. The payment request\n>> must be kept private between the parties, and that's hard to do.\n> \n> What about using encryption with forward secrecy? Merchant would\n> generate signed request containing public ECDH part, buyer would send\n> back transaction encrypted with ECDH and his public ECDH part. If\n> receiving address/amount is meant to be private, use commit protocol\n> (see ZRTP/RedPhone) and short authentication phrase (which is hard to\n> spoof thanks to commit protocol - see RedPhone)?\n\nHi Martin,\n\nThe problem is that you need to verify the ownership of the public key.\nA MITM can substitute the key. If you don't have verifiable identity\nassociated with the public key (PKI/WoT), you need a shared secret (such\nas a secret phrase). But the problem is then establishing that secret\nover a public channel.\n\nYou can bootstrap a private session over the untrusted network using a\ntrusted public key (PKI/WoT). But the presumption is that you are\nalready doing this over the web (using TLS). That process is subject to\nattack at the CA. WoT is not subject to a CA attack, because it's\ndecentralized. But it's also not sufficiently deployed for some scenarios.\n\ne\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/6bf6a7d3/attachment.html>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-05T22:02:54",
                "message_text_only": "The implementation on Airbitz does not encourage or even let a user\nbroadcast a photo. Just an address prefix and \"name/handle\". And it's only\nbroadcast during the Receive request. Not generally while the app is\nrunning although that's up to the implementation.\n\n\n[image: logo]\n*Paul Puey* CEO / Co-Founder, Airbitz Inc\n+1-619-850-8624 | http://airbitz.co | San Diego\n<http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n<https://plus.google.com/118173667510609425617>\n<https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n<https://angel.co/paul-puey>\n*DOWNLOAD THE AIRBITZ WALLET:*\n  <https://play.google.com/store/apps/details?id=com.airbitz>\n<https://itunes.apple.com/us/app/airbitz/id843536046>\n\n\n\n\nOn Thu, Feb 5, 2015 at 1:19 PM, Brian Hoffman <brianchoffman at gmail.com>\nwrote:\n\n> This sounds horrible. You could basically monitor anyone with a wallet in\n> a highly populated area and track them super easily by doing facial\n> recognition. Yes you could photograph people but it's way more burdensome.\n> Sorry to go off topic a little.\n>\n>\n> On Feb 5, 2015, at 3:50 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n> I'm imagining myself walking around broadcasting my photo and MAC\n>> address while hucksters push payment requests to me for approval\n>\n>\n> I hate to break it to you, but you broadcast a photo of your face every\n> time you walk outside ;)\n>\n> Bluetooth MAC addresses are random, they aren't useful identifiers. If\n> someone can see you, a face is a far more uniquely identifying thing than a\n> MAC.\n>\n> \"Payment spam\" might be a problem. I can imagine a wallet requiring that\n> such requests are signed and then spammers can be blacklisted in the usual\n> fashion so they can't push things to your phone anymore. Anyway, a hurdle\n> that can be jumped if/when it becomes an issue.\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/0a99ec39/attachment.html>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-05T22:01:06",
                "message_text_only": "The broadcast is ONLY done when the wallet is in Receive mode. Same as when\nthe QR code is visible. The use of the *Name* section is specifically so\nthat a recipient can broadcast their name/handle. Not so the recipient\nwould broadcast the name of the Sender.\n\n\n[image: logo]\n*Paul Puey* CEO / Co-Founder, Airbitz Inc\n+1-619-850-8624 | http://airbitz.co | San Diego\n<http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n<https://plus.google.com/118173667510609425617>\n<https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n<https://angel.co/paul-puey>\n*DOWNLOAD THE AIRBITZ WALLET:*\n  <https://play.google.com/store/apps/details?id=com.airbitz>\n<https://itunes.apple.com/us/app/airbitz/id843536046>\n\n\n\n\nOn Thu, Feb 5, 2015 at 12:50 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> I'm imagining myself walking around broadcasting my photo and MAC\n>> address while hucksters push payment requests to me for approval\n>\n>\n> I hate to break it to you, but you broadcast a photo of your face every\n> time you walk outside ;)\n>\n> Bluetooth MAC addresses are random, they aren't useful identifiers. If\n> someone can see you, a face is a far more uniquely identifying thing than a\n> MAC.\n>\n> \"Payment spam\" might be a problem. I can imagine a wallet requiring that\n> such requests are signed and then spammers can be blacklisted in the usual\n> fashion so they can't push things to your phone anymore. Anyway, a hurdle\n> that can be jumped if/when it becomes an issue.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/8f1e83dc/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-05T22:05:39",
                "message_text_only": "Hi Paul,\n\nThe issue is in the establishment of trust. Anyone can broadcast the initial information.\n\ne\n\n> On Feb 5, 2015, at 2:01 PM, Paul Puey <paul at airbitz.co> wrote:\n> \n> The broadcast is ONLY done when the wallet is in Receive mode. Same as when the QR code is visible. The use of the *Name* section is specifically so that a recipient can broadcast their name/handle. Not so the recipient would broadcast the name of the Sender.\n> \n> On Thu, Feb 5, 2015 at 12:50 PM, Mike Hearn <mike at plan99.net> wrote:\n>>> I'm imagining myself walking around broadcasting my photo and MAC\n>>> address while hucksters push payment requests to me for approval\n>> \n>> I hate to break it to you, but you broadcast a photo of your face every time you walk outside ;)\n>> \n>> Bluetooth MAC addresses are random, they aren't useful identifiers. If someone can see you, a face is a far more uniquely identifying thing than a MAC.\n>> \n>> \"Payment spam\" might be a problem. I can imagine a wallet requiring that such requests are signed and then spammers can be blacklisted in the usual fashion so they can't push things to your phone anymore. Anyway, a hurdle that can be jumped if/when it becomes an issue.\n> \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/d5b26d5f/attachment.html>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-05T22:08:28",
                "message_text_only": "Although not perfect, and it may require visual/verbal verification, I\ndon't see what the trust issue is.\n\n\n[image: logo]\n*Paul Puey* CEO / Co-Founder, Airbitz Inc\n+1-619-850-8624 | http://airbitz.co | San Diego\n<http://facebook.com/airbitz>  <http://twitter.com/airbitz>\n<https://plus.google.com/118173667510609425617>\n<https://go.airbitz.co/comments/feed/>  <http://linkedin.com/in/paulpuey>\n<https://angel.co/paul-puey>\n*DOWNLOAD THE AIRBITZ WALLET:*\n  <https://play.google.com/store/apps/details?id=com.airbitz>\n<https://itunes.apple.com/us/app/airbitz/id843536046>\n\n\n\n\nOn Thu, Feb 5, 2015 at 2:05 PM, Eric Voskuil <eric at voskuil.org> wrote:\n\n> Hi Paul,\n>\n> The issue is in the establishment of trust. Anyone can broadcast the\n> initial information.\n>\n> e\n>\n> On Feb 5, 2015, at 2:01 PM, Paul Puey <paul at airbitz.co> wrote:\n>\n> The broadcast is ONLY done when the wallet is in Receive mode. Same as\n> when the QR code is visible. The use of the *Name* section is specifically\n> so that a recipient can broadcast their name/handle. Not so the recipient\n> would broadcast the name of the Sender.\n>\n> On Thu, Feb 5, 2015 at 12:50 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> I'm imagining myself walking around broadcasting my photo and MAC\n>>> address while hucksters push payment requests to me for approval\n>>\n>>\n>> I hate to break it to you, but you broadcast a photo of your face every\n>> time you walk outside ;)\n>>\n>> Bluetooth MAC addresses are random, they aren't useful identifiers. If\n>> someone can see you, a face is a far more uniquely identifying thing than a\n>> MAC.\n>>\n>> \"Payment spam\" might be a problem. I can imagine a wallet requiring that\n>> such requests are signed and then spammers can be blacklisted in the usual\n>> fashion so they can't push things to your phone anymore. Anyway, a hurdle\n>> that can be jumped if/when it becomes an issue.\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/1d6f9332/attachment.html>"
            },
            {
                "author": "Martin Habov\u0161tiak",
                "date": "2015-02-06T00:50:57",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nCommit protocol provides both better user experience and better security.\n\nD\u0148a 6. febru\u00e1ra 2015 1:49:12 CET pou\u017e\u00edvate\u013e Paul Puey <paul at airbitz.co> nap\u00edsal:\n>The trust can be considered bootstrapped by visual verification of the\n>address prefix. If we are really concerned about someone jamming a\n>Bluetooth signal in a coffeeshop then the UI can encourage verification\n>of the prefix. Much like how regular Bluetooth requires 'pairing' via\n>entering a 4-6 digit code.\n>\n>\n>\n>Paul Puey CEO / Co-Founder, Airbitz Inc\n>619.850.8624 | http://airbitz.co | San Diego\n>\n>\n>\n>\n>On Feb 5, 2015, at 3:46 PM, Eric Voskuil <eric at voskuil.org> wrote:\n>\n>On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>> A BIP-70 signed payment request in the initial broadcast can resolve\n>the\n>>> integrity issues, but because of the public nature of the broadcast\n>>> coupled with strong public identity, the privacy compromise is much\n>>> worse. Now transactions are cryptographically tainted.\n>>>\n>>> This is also the problem with BIP-70 over the web. TLS and other\n>>> security precautions aside, an interloper on the communication,\n>desktop,\n>>> datacenter, etc., can capture payment requests and strongly\n>correlate\n>>> transactions to identities in an automated manner. The payment\n>request\n>>> must be kept private between the parties, and that's hard to do.\n>>\n>> What about using encryption with forward secrecy? Merchant would\n>> generate signed request containing public ECDH part, buyer would send\n>> back transaction encrypted with ECDH and his public ECDH part. If\n>> receiving address/amount is meant to be private, use commit protocol\n>> (see ZRTP/RedPhone) and short authentication phrase (which is hard to\n>> spoof thanks to commit protocol - see RedPhone)?\n>\n>Hi Martin,\n>\n>The problem is that you need to verify the ownership of the public key.\n>A MITM can substitute the key. If you don't have verifiable identity\n>associated with the public key (PKI/WoT), you need a shared secret\n>(such\n>as a secret phrase). But the problem is then establishing that secret\n>over a public channel.\n>\n>You can bootstrap a private session over the untrusted network using a\n>trusted public key (PKI/WoT). But the presumption is that you are\n>already doing this over the web (using TLS). That process is subject to\n>attack at the CA. WoT is not subject to a CA attack, because it's\n>decentralized. But it's also not sufficiently deployed for some\n>scenarios.\n>\n>e\n\n- --\nOdoslan\u00e9 z m\u00f4jho Android zariadenia pomocou K-9 Mail.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niI8EAREKADcFAlTUD/AwHE1hcnRpbiBIYWJvdmF0aWFrIDxtYXJ0aW4uaGFib3Zz\ndGlha0BnbWFpbC5jb20+AAoJED6C3NvqapyUPwgA/0eVlJYeA3fYmVb1zVA8j1l/\nkjOhc9CIDYL9ifk8N0t/AP4mC4CwmZoNXqr24le5WdYeBeyHMiDMtJrRfwQkN1LG\ndQ==\n=pY76\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-06T01:05:23",
                "message_text_only": "On 02/05/2015 04:49 PM, Paul Puey wrote:\n> The trust can be considered bootstrapped by visual verification of the\n> address prefix.\n\nAnother (unspendable) address can trivially match the prefix. Imagine\nsomeone walking around in a mall with a phone in the pocket with a\nmalicious app, just disrupting business by causing money to be burned.\nManual verification doesn't fix this attack.\n\n> If we are really concerned about someone jamming a Bluetooth signal\n> in a coffeeshop then the UI can encourage verification of the prefix.\n\nI don't think it would be great to constrain a standard implementation\nto low cost purchases or the need for manual verification, but again\nmanual prefix verification isn't actually a solution.\n\n> Much like how regular Bluetooth requires 'pairing' via entering a 4-6\n> digit code.\n\nAn appeal to the security of BT bootstrapping isn't exactly flattering.\n\nYou know I love Airbitz, and I know you guys are extremely privacy\nconscious. I personally would have no problem using this feature under\ncertain circumstances. My question is only whether it would be wise to\nstandardize on the proposal as-is.\n\ne\n\n> On Feb 5, 2015, at 3:46 PM, Eric Voskuil <eric at voskuil.org\n> <mailto:eric at voskuil.org>> wrote:\n> \n> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>> A BIP-70 signed payment request in the initial broadcast can resolve the\n>>> integrity issues, but because of the public nature of the broadcast\n>>> coupled with strong public identity, the privacy compromise is much\n>>> worse. Now transactions are cryptographically tainted.\n>>>\n>>> This is also the problem with BIP-70 over the web. TLS and other\n>>> security precautions aside, an interloper on the communication, desktop,\n>>> datacenter, etc., can capture payment requests and strongly correlate\n>>> transactions to identities in an automated manner. The payment request\n>>> must be kept private between the parties, and that's hard to do.\n>>\n>> What about using encryption with forward secrecy? Merchant would\n>> generate signed request containing public ECDH part, buyer would send\n>> back transaction encrypted with ECDH and his public ECDH part. If\n>> receiving address/amount is meant to be private, use commit protocol\n>> (see ZRTP/RedPhone) and short authentication phrase (which is hard to\n>> spoof thanks to commit protocol - see RedPhone)?\n> \n> Hi Martin,\n> \n> The problem is that you need to verify the ownership of the public key.\n> A MITM can substitute the key. If you don't have verifiable identity\n> associated with the public key (PKI/WoT), you need a shared secret (such\n> as a secret phrase). But the problem is then establishing that secret\n> over a public channel.\n> \n> You can bootstrap a private session over the untrusted network using a\n> trusted public key (PKI/WoT). But the presumption is that you are\n> already doing this over the web (using TLS). That process is subject to\n> attack at the CA. WoT is not subject to a CA attack, because it's\n> decentralized. But it's also not sufficiently deployed for some scenarios.\n> \n> e\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/3096ea25/attachment.sig>"
            },
            {
                "author": "Paul Puey",
                "date": "2015-02-06T02:09:48",
                "message_text_only": "Thanks for all the feedback Eric. You know we value all that you have to say. That's what this forum is for. We're looking for great ideas to harden this protocol and we're not closed to better ideas and we'll improve it as suggestions come up.\n\n\n\n   \nPaul Puey CEO / Co-Founder, Airbitz Inc\n619.850.8624 | http://airbitz.co | San Diego\n     \n\n\n\nOn Feb 5, 2015, at 5:05 PM, Eric Voskuil <eric at voskuil.org> wrote:\n\n> On 02/05/2015 04:49 PM, Paul Puey wrote:\n> The trust can be considered bootstrapped by visual verification of the\n> address prefix.\n\nAnother (unspendable) address can trivially match the prefix. Imagine\nsomeone walking around in a mall with a phone in the pocket with a\nmalicious app, just disrupting business by causing money to be burned.\nManual verification doesn't fix this attack.\n\n> If we are really concerned about someone jamming a Bluetooth signal\n> in a coffeeshop then the UI can encourage verification of the prefix.\n\nI don't think it would be great to constrain a standard implementation\nto low cost purchases or the need for manual verification, but again\nmanual prefix verification isn't actually a solution.\n\n> Much like how regular Bluetooth requires 'pairing' via entering a 4-6\n> digit code.\n\nAn appeal to the security of BT bootstrapping isn't exactly flattering.\n\nYou know I love Airbitz, and I know you guys are extremely privacy\nconscious. I personally would have no problem using this feature under\ncertain circumstances. My question is only whether it would be wise to\nstandardize on the proposal as-is.\n\ne\n\n> On Feb 5, 2015, at 3:46 PM, Eric Voskuil <eric at voskuil.org\n> <mailto:eric at voskuil.org>> wrote:\n> \n> On 02/05/2015 03:36 PM, M\u24b6rtin H\u24b6bo\u24cb\u0161tiak wrote:\n>>> A BIP-70 signed payment request in the initial broadcast can resolve the\n>>> integrity issues, but because of the public nature of the broadcast\n>>> coupled with strong public identity, the privacy compromise is much\n>>> worse. Now transactions are cryptographically tainted.\n>>> \n>>> This is also the problem with BIP-70 over the web. TLS and other\n>>> security precautions aside, an interloper on the communication, desktop,\n>>> datacenter, etc., can capture payment requests and strongly correlate\n>>> transactions to identities in an automated manner. The payment request\n>>> must be kept private between the parties, and that's hard to do.\n>> \n>> What about using encryption with forward secrecy? Merchant would\n>> generate signed request containing public ECDH part, buyer would send\n>> back transaction encrypted with ECDH and his public ECDH part. If\n>> receiving address/amount is meant to be private, use commit protocol\n>> (see ZRTP/RedPhone) and short authentication phrase (which is hard to\n>> spoof thanks to commit protocol - see RedPhone)?\n> \n> Hi Martin,\n> \n> The problem is that you need to verify the ownership of the public key.\n> A MITM can substitute the key. If you don't have verifiable identity\n> associated with the public key (PKI/WoT), you need a shared secret (such\n> as a secret phrase). But the problem is then establishing that secret\n> over a public channel.\n> \n> You can bootstrap a private session over the untrusted network using a\n> trusted public key (PKI/WoT). But the presumption is that you are\n> already doing this over the web (using TLS). That process is subject to\n> attack at the CA. WoT is not subject to a CA attack, because it's\n> decentralized. But it's also not sufficiently deployed for some scenarios.\n> \n> e\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/c64e1322/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal for P2P Wireless (Bluetooth LE) transfer of Payment URI",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "William Swanson",
                "Eric Voskuil",
                "Brian Hoffman",
                "Andreas Schildbach",
                "Paul Puey",
                "Mike Hearn",
                "Roy Badami",
                "Martin Habov\u0161tiak",
                "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak"
            ],
            "messages_count": 43,
            "total_messages_chars_count": 159150
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Core 0.10.0rc4 tagged",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2015-02-05T12:33:27",
                "message_text_only": "FYI, I've just tagged v0.10rc4, and pushed my signatures to the\ngitian.sigs repository.\n\nPlease start your gitian builders!\n\nChanges relative to rc3:\n\n- 1eb14af Increase block download timeout base from 10 to 20 minutes.\n- 3916a81 Increase coverage of DERSIG edge cases\n- 6da2028 Add RPC test for DERSIG BIP switchover logic\n- 773c30d BIP66 changeover logic\n- 18695f0 Example unit tests from BIP66\n- abfbeaf Change IsDERSignature to BIP66 implementation\n- b6347bf Fix priority calculation in CreateTransaction\n- 2448d34 Avoid storing a reference passed to SignatureChecker constructors\n- 1bbad80 Use separate SignatureChecker for CMutableTransaction\n- 6a02ef8 [Qt] don't allow amount changes when AmountSpinBox is read-only\n- b61940b Change Coin Control first column label\n- c5044bc sleep-wait on genesis block during init with -reindex\n- b24ff47 Make empty byte arrays pass CheckSignatureEncoding()\n- ed4206a fix crash: CoinControl \"space\" bug\n- 58259ad qt: fix broken unicode chars on osx 10.10\n- aaf55d2 186a517 Add a -rpckeepalive option to disable RPC use of\nHTTP persistent connections.\n\nHopefully this will be the last release candidate before the 0.10 final release.\n\nWladimir"
            },
            {
                "author": "Wladimir",
                "date": "2015-02-06T09:54:34",
                "message_text_only": "On Thu, Feb 5, 2015 at 12:33 PM, Wladimir <laanwj at gmail.com> wrote:\n> FYI, I've just tagged v0.10rc4, and pushed my signatures to the\n> gitian.sigs repository.\n>\n> Please start your gitian builders!\n\nThanks to the extremely quick response (a whopping 9 gitian builders\nalready!), the executables and tarball for rc4 have been uploaded to\nthe usual place:\n\nhttps://bitcoin.org/bin/0.10.0/test/\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.10.0rc4 tagged",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1589
        }
    },
    {
        "title": "[Bitcoin-development] Nakapay",
        "thread_messages": [
            {
                "author": "Michael McLees",
                "date": "2015-02-05T22:10:03",
                "message_text_only": "All this talk about URI's, bluetooth, P2P wireless transmissions, etc...\nUltimately, it is about a better user interface. Guys, I've already made\nBitcoin invoicing and payments exceptionally easy with Nakapay. Now if only\nthere's a wallet developer out there who would integrate it ...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/813b7093/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Nakapay",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael McLees"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 468
        }
    },
    {
        "title": "[Bitcoin-development] Two Proposed BIPs - Bluetooth Communication and bitcoin: URI Scheme Improvements",
        "thread_messages": [
            {
                "author": "Andy Schroder",
                "date": "2015-02-05T23:38:17",
                "message_text_only": "Hello,\n\nWith the recent discussion started today regarding another bluetooth \ncommunication proposal created by Airbitz, I'd like to bring people's \nattention back to this proposal that saw little discussion last fall. I \nguess I'm not sure why two proposals are being created. Is their some \nadvantage of using bluetooth low energy over standard bluetooth (I'm not \nwell versed in bluetooth low energy)? This NFC coupled approach seems to \navoid a lot of issues with identifying the correct payee. You can see \nthis proposed scheme demonstrated in action in a POS application in the \nvideo link below which demonstrates it with my fuel pump and Andreas \nSchildbach's wallet.\n\nThere was a small discussion that occurred after my original \nannouncement below. If you are new to this e-mail list, you can find an \narchive of those few replies here: \nhttps://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n\nSince this original announcement, a few improvements have been made to \nthe proposal:\n\n 1. Improved documentation and explanation of the use cases in\n    Schildbach's wallet's wiki\n     1. https://github.com/schildbach/bitcoin-wallet/wiki/Payment-Requests\n 2. Issue with the payment_url field has resolved by changing to a\n    repeated field and requiring the wallet to search for the protocol\n    they want to use, rather than expecting it to be a certain element\n    number in the list.\n     1. https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n\n\nAlthough there are some interesting use cases of Airbitz's proposal's \nwork flow, tapping an NFC radio with a 5 mm range requires much less \nbrain power and time than picking the correct name on the app's screen. \nThe manual name picking is going to be especially crazy in a very \ncongested location. The payer isn't ever going to want to have to try \nand figure out what register or payment terminal they are at for most \napplications I would ever use.\n\nI'd like to see something happen with this technology. I've also noticed \nthat micropayment channels have little formality to being established \npractically and it would be awesome if they could be managed over \nbluetooth as well. Maybe more improvements to the payment protocol can \nsimultaneously result (and also extended to bluetooth) that embrace the \nestablishment of micropayment channels.\n\n\n\nAndy Schroder\n\nOn 10/17/2014 03:58 PM, Andy Schroder wrote:\n> Hello,\n>\n> I'd like to introduce two proposed BIPs. They are primarily focused on \n> implementing the payment protocol using bluetooth connections. I've \n> been working on automated point of sale devices and bluetooth \n> communication is critical in my mind due to the potential lack of \n> internet access at many points of sale, either due to lack of cellular \n> internet coverage, lack of payee providing wireless internet, and/or \n> due to financial constraints of the payer prohibiting them from \n> maintaining a cellular internet service plan. These BIPs are largely \n> modeled after the current functionality of Andreas Schildbach's \n> android Bitcoin Wallet's bluetooth capability. I've discussed the \n> communication scheme with him in depth and believe these proposals to \n> clearly and accurately represent the communication scheme.\n>\n> There is also an additional &h= parameter added to the bitcoin: URI \n> scheme which applies to both bluetooth and http payment protocol \n> requests which allows for a hash of the payment request to be \n> included. This hash was proposed by Andreas as an amendment to BIP72, \n> but others preferred not to amend BIP72 since it has already been put \n> into place. The current version of Schildbach's bitcoin wallet already \n> supports the \"h parameter\".\n>\n> I'd appreciate feedback from everyone, particularly wallet developers \n> as widespread bluetooth support among wallets is very important to me. \n> I'm also very new to this mailing list as well as the BIP writing \n> process, so I'd appreciate your understanding if my conventions are \n> not standard. I am currently using the naming conventions \"TBIP\", so \n> that I can propose /temporary/ BIP numbers, and cross reference \n> between the two. Obviously these will change if the BIPs are formally \n> adopted. You can find a copy of these proposed BIPs at the following \n> links:\n>\n>   * https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>   * https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>\n>\n> If you are interested, you can see a demonstration of many of the \n> proposed features using Schildbach's wallet and my fuel pump in a \n> video I recently created: https://youtu.be/kkVAhA75k1Y . The main \n> thing not implemented is multiple URLs for the payment protocol, so, \n> as a hack, I'm just presenting https vi QR code and bluetooth via NFC \n> on my fuel pump for now.\n>\n>\n>\n> There are a few known issues that could be improved to this bluetooth \n> communication scheme as well as the general payment protocol and \n> myself and Andreas would like to receive feedback regarding concerns \n> and potential solutions. Some of the known issues are:\n>\n>   * There may seem to be some inconsistency in the connection header\n>     messages between the payment request connection and the payment\n>     connection. This is largely because it is how Andreas originally\n>     implemented the communication and is hesitant to change it since\n>     there are many instances of is software already deployed that\n>     implement this scheme.\n>   * The current method uses an unauthenticated bluetooth connection\n>     for bluetooth 2.1 and newer devices (subject to man in the middle\n>     attacks, but not passive eavesdroppers), and an unsecure and\n>     unauthenticated connection for older devices. The known concerns\n>     here are that someone within 100 meters of the payer could track\n>     the bitcoin addresses used for the transaction and could possibly\n>     replace the refund address by submitting a forged payment message\n>     to the payee. Requiring bluetooth 2.1 and authenticating the\n>     connection out of band unfortunately don't seem to be as\n>     straightforward/simple of a task with most bluetooth libraries\n>     (although I'd love for someone to prove me wrong). It's possible\n>     this communication scheme could be extended to use an https \"like\"\n>     protocol that would not care if the underlying bluetooth\n>     connection is authenticated or encrypted. It's actually possible\n>     that http over a bluetooth socket (instead of tcp socket) could be\n>     implemented, however it is presently uncertain whether this would\n>     be too slow, too much overhead (both on the devices software and\n>     communication), or if http could easily be run over bluetooth\n>     sockets on all platforms.\n>   * There is no acknowledgement failure message possible in the\n>     payment protocol, only an acknowledgement message or lack of\n>     acknowledgement message. This issue seems to be a concern and as a\n>     result, the memo field is used to send an \"ack\" or \"nack\" in\n>     Schildbach's wallet. Can we add a boolean status field to the\n>     payment acknowledgement message?\n>   * I'd personally like a new optional boolean field added to the\n>     \"PaymentDetails\" portion of the \"PaymentRequest\" to allow for the\n>     payer's wallet to match the \"Output\" optional \"amount\" fields as a\n>     total amount of all Outputs, rather than requiring the amount for\n>     each output to be matched exactly. As it currently is, the payee\n>     can specify multiple receiving addresses in order to require a\n>     payer split up the payments so that when the payee then goes to\n>     spend the funds later, they don't necessarily have to give their\n>     payees as much knowledge of their balances and spending and\n>     receiving habits and sources. As the payment protocol currently is\n>     requiring all output amounts to be matched exactly for each\n>     output, there is no flexibility given to the payer in order to\n>     reduce a merging or unnecessary diverging of account funds, which\n>     can reduce the privacy of both the payer and the payee. If the\n>     payee were given the option to allow the payer the option to\n>     divide the amounts amount the outputs intelligently, there can be\n>     some privacy gained.\n>   * Amount of data stored in QR codes may be getting large when a\n>     backwards compatible URL is used (for wallets that don't support\n>     the payment protocol) and can be difficult to scan with outdoor\n>     screens that have an extra weather resistant pane when in direct\n>     sunlight.\n>   * The number of offline transactions of a wallet is limited to the\n>     known unspent outputs when they go offline. Long term, I'd like to\n>     see wallet devices that can use systems such as Kryptoradio's\n>     DVB-T based broadcast (but this will need yet another radio!).\n>     Another project may be to develop a blockchain query protocol of\n>     some kind where retailers can provide access to blockchain data so\n>     that customer's wallets can update their known unspent outputs via\n>     bluetooth. It's possible such a bluetooth system could be used in\n>     combination of \"Kryptoradio\" like broadcasts to provide multiple\n>     blockchain references.\n>   * The additional payment_url approach is a bit sloppy of a solution\n>     in the PaymentDetails portion of the PaymentRequest. It would have\n>     been ideal to just change this from an optional field to a\n>     repeated field, however, the backwards compatibility in the\n>     protocol buffer format will provide the last item in the array for\n>     a repeated field (to a code that expects it to be an optional\n>     field), rather than the first. Because of this, backwards\n>     compatibility with https payment requests wouldn't work if the\n>     payment_url field is just changed to a repeated field.\n>       o Possible alternatives to what is described in the proposed BIP\n>           + Change payment_url to a repeated field and then reverse\n>             the order of the parameter numbers in the payment_url,\n>             compared to the bitcoin URL \"r parameter\".\n>           + Create an additional, new payment_url_multi repeated field\n>             (or some better name), and then leave the original\n>             payment_url field in there for backwards compatibility\n>             (and then maybe phase it out in the future).\n>       o Reference\n>           + https://developers.google.com/protocol-buffers/docs/proto#updating\n>               # \"|optional| is compatible with |repeated|. Given\n>                 serialized data of a repeated field as input, clients\n>                 that expect this field to be |optional| will take the\n>                 last input value if it's a primitive type field or\n>                 merge all input elements if it's a message type field.\"\n>\n>\n>\n> Your comments and suggestions would be greatly appreciated.\n>\n> -- \n> Andy Schroder\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/8dc03561/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/8dc03561/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-06T00:36:13",
                "message_text_only": "Hi Andy,\n\nThis is good stuff. I've spent quite a bit of time on this question, but\nset aside most of it earlier in the year in order to make some progress\nin other areas. I did review what I found available at the time\npertaining to the Schildbach implementation and these questions.\nSkimming the links now I'm encouraged, but I see several things that I'd\nlike to discuss at greater length than is appropriate here.\n\nThe main advantage of BLE over BT is that it uses much less power, with\na trade-off in lower bandwidth (100 kbps vs. 2 mbps). The BLE range can\nbe even greater and connection latency lower than BT. For payment\npurposes the lower bandwidth isn't much of a hit.\n\ne\n\nOn 02/05/2015 03:38 PM, Andy Schroder wrote:\n> Hello,\n> \n> With the recent discussion started today regarding another bluetooth\n> communication proposal created by Airbitz, I'd like to bring people's\n> attention back to this proposal that saw little discussion last fall. I\n> guess I'm not sure why two proposals are being created. Is their some\n> advantage of using bluetooth low energy over standard bluetooth (I'm not\n> well versed in bluetooth low energy)? This NFC coupled approach seems to\n> avoid a lot of issues with identifying the correct payee. You can see\n> this proposed scheme demonstrated in action in a POS application in the\n> video link below which demonstrates it with my fuel pump and Andreas\n> Schildbach's wallet.\n> \n> There was a small discussion that occurred after my original\n> announcement below. If you are new to this e-mail list, you can find an\n> archive of those few replies here:\n> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n> \n> Since this original announcement, a few improvements have been made to\n> the proposal:\n> \n>  1. Improved documentation and explanation of the use cases in\n>     Schildbach's wallet's wiki\n>      1. https://github.com/schildbach/bitcoin-wallet/wiki/Payment-Requests\n>  2. Issue with the payment_url field has resolved by changing to a\n>     repeated field and requiring the wallet to search for the protocol\n>     they want to use, rather than expecting it to be a certain element\n>     number in the list.\n>      1. https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n> \n> \n> Although there are some interesting use cases of Airbitz's proposal's\n> work flow, tapping an NFC radio with a 5 mm range requires much less\n> brain power and time than picking the correct name on the app's screen.\n> The manual name picking is going to be especially crazy in a very\n> congested location. The payer isn't ever going to want to have to try\n> and figure out what register or payment terminal they are at for most\n> applications I would ever use.\n> \n> I'd like to see something happen with this technology. I've also noticed\n> that micropayment channels have little formality to being established\n> practically and it would be awesome if they could be managed over\n> bluetooth as well. Maybe more improvements to the payment protocol can\n> simultaneously result (and also extended to bluetooth) that embrace the\n> establishment of micropayment channels.\n> \n> \n> \n> Andy Schroder\n> \n> On 10/17/2014 03:58 PM, Andy Schroder wrote:\n>> Hello,\n>>\n>> I'd like to introduce two proposed BIPs. They are primarily focused on\n>> implementing the payment protocol using bluetooth connections. I've\n>> been working on automated point of sale devices and bluetooth\n>> communication is critical in my mind due to the potential lack of\n>> internet access at many points of sale, either due to lack of cellular\n>> internet coverage, lack of payee providing wireless internet, and/or\n>> due to financial constraints of the payer prohibiting them from\n>> maintaining a cellular internet service plan. These BIPs are largely\n>> modeled after the current functionality of Andreas Schildbach's\n>> android Bitcoin Wallet's bluetooth capability. I've discussed the\n>> communication scheme with him in depth and believe these proposals to\n>> clearly and accurately represent the communication scheme.\n>>\n>> There is also an additional &h= parameter added to the bitcoin: URI\n>> scheme which applies to both bluetooth and http payment protocol\n>> requests which allows for a hash of the payment request to be\n>> included. This hash was proposed by Andreas as an amendment to BIP72,\n>> but others preferred not to amend BIP72 since it has already been put\n>> into place. The current version of Schildbach's bitcoin wallet already\n>> supports the \"h parameter\".\n>>\n>> I'd appreciate feedback from everyone, particularly wallet developers\n>> as widespread bluetooth support among wallets is very important to me.\n>> I'm also very new to this mailing list as well as the BIP writing\n>> process, so I'd appreciate your understanding if my conventions are\n>> not standard. I am currently using the naming conventions \"TBIP\", so\n>> that I can propose /temporary/ BIP numbers, and cross reference\n>> between the two. Obviously these will change if the BIPs are formally\n>> adopted. You can find a copy of these proposed BIPs at the following\n>> links:\n>>\n>>   * https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>>   * https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>\n>>\n>> If you are interested, you can see a demonstration of many of the\n>> proposed features using Schildbach's wallet and my fuel pump in a\n>> video I recently created: https://youtu.be/kkVAhA75k1Y . The main\n>> thing not implemented is multiple URLs for the payment protocol, so,\n>> as a hack, I'm just presenting https vi QR code and bluetooth via NFC\n>> on my fuel pump for now.\n>>\n>>\n>>\n>> There are a few known issues that could be improved to this bluetooth\n>> communication scheme as well as the general payment protocol and\n>> myself and Andreas would like to receive feedback regarding concerns\n>> and potential solutions. Some of the known issues are:\n>>\n>>   * There may seem to be some inconsistency in the connection header\n>>     messages between the payment request connection and the payment\n>>     connection. This is largely because it is how Andreas originally\n>>     implemented the communication and is hesitant to change it since\n>>     there are many instances of is software already deployed that\n>>     implement this scheme.\n>>   * The current method uses an unauthenticated bluetooth connection\n>>     for bluetooth 2.1 and newer devices (subject to man in the middle\n>>     attacks, but not passive eavesdroppers), and an unsecure and\n>>     unauthenticated connection for older devices. The known concerns\n>>     here are that someone within 100 meters of the payer could track\n>>     the bitcoin addresses used for the transaction and could possibly\n>>     replace the refund address by submitting a forged payment message\n>>     to the payee. Requiring bluetooth 2.1 and authenticating the\n>>     connection out of band unfortunately don't seem to be as\n>>     straightforward/simple of a task with most bluetooth libraries\n>>     (although I'd love for someone to prove me wrong). It's possible\n>>     this communication scheme could be extended to use an https \"like\"\n>>     protocol that would not care if the underlying bluetooth\n>>     connection is authenticated or encrypted. It's actually possible\n>>     that http over a bluetooth socket (instead of tcp socket) could be\n>>     implemented, however it is presently uncertain whether this would\n>>     be too slow, too much overhead (both on the devices software and\n>>     communication), or if http could easily be run over bluetooth\n>>     sockets on all platforms.\n>>   * There is no acknowledgement failure message possible in the\n>>     payment protocol, only an acknowledgement message or lack of\n>>     acknowledgement message. This issue seems to be a concern and as a\n>>     result, the memo field is used to send an \"ack\" or \"nack\" in\n>>     Schildbach's wallet. Can we add a boolean status field to the\n>>     payment acknowledgement message?\n>>   * I'd personally like a new optional boolean field added to the\n>>     \"PaymentDetails\" portion of the \"PaymentRequest\" to allow for the\n>>     payer's wallet to match the \"Output\" optional \"amount\" fields as a\n>>     total amount of all Outputs, rather than requiring the amount for\n>>     each output to be matched exactly. As it currently is, the payee\n>>     can specify multiple receiving addresses in order to require a\n>>     payer split up the payments so that when the payee then goes to\n>>     spend the funds later, they don't necessarily have to give their\n>>     payees as much knowledge of their balances and spending and\n>>     receiving habits and sources. As the payment protocol currently is\n>>     requiring all output amounts to be matched exactly for each\n>>     output, there is no flexibility given to the payer in order to\n>>     reduce a merging or unnecessary diverging of account funds, which\n>>     can reduce the privacy of both the payer and the payee. If the\n>>     payee were given the option to allow the payer the option to\n>>     divide the amounts amount the outputs intelligently, there can be\n>>     some privacy gained.\n>>   * Amount of data stored in QR codes may be getting large when a\n>>     backwards compatible URL is used (for wallets that don't support\n>>     the payment protocol) and can be difficult to scan with outdoor\n>>     screens that have an extra weather resistant pane when in direct\n>>     sunlight.\n>>   * The number of offline transactions of a wallet is limited to the\n>>     known unspent outputs when they go offline. Long term, I'd like to\n>>     see wallet devices that can use systems such as Kryptoradio's\n>>     DVB-T based broadcast (but this will need yet another radio!).\n>>     Another project may be to develop a blockchain query protocol of\n>>     some kind where retailers can provide access to blockchain data so\n>>     that customer's wallets can update their known unspent outputs via\n>>     bluetooth. It's possible such a bluetooth system could be used in\n>>     combination of \"Kryptoradio\" like broadcasts to provide multiple\n>>     blockchain references.\n>>   * The additional payment_url approach is a bit sloppy of a solution\n>>     in the PaymentDetails portion of the PaymentRequest. It would have\n>>     been ideal to just change this from an optional field to a\n>>     repeated field, however, the backwards compatibility in the\n>>     protocol buffer format will provide the last item in the array for\n>>     a repeated field (to a code that expects it to be an optional\n>>     field), rather than the first. Because of this, backwards\n>>     compatibility with https payment requests wouldn't work if the\n>>     payment_url field is just changed to a repeated field.\n>>       o Possible alternatives to what is described in the proposed BIP\n>>           + Change payment_url to a repeated field and then reverse\n>>             the order of the parameter numbers in the payment_url,\n>>             compared to the bitcoin URL \"r parameter\".\n>>           + Create an additional, new payment_url_multi repeated field\n>>             (or some better name), and then leave the original\n>>             payment_url field in there for backwards compatibility\n>>             (and then maybe phase it out in the future).\n>>       o Reference\n>>           + https://developers.google.com/protocol-buffers/docs/proto#updating\n>>               # \"|optional| is compatible with |repeated|. Given\n>>                 serialized data of a repeated field as input, clients\n>>                 that expect this field to be |optional| will take the\n>>                 last input value if it's a primitive type field or\n>>                 merge all input elements if it's a message type field.\"\n>>\n>>\n>>\n>> Your comments and suggestions would be greatly appreciated.\n>>\n>> -- \n>> Andy Schroder\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/cd2b0987/attachment.sig>"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-06T01:40:32",
                "message_text_only": "Hello,\n\nI personally would prefer as low of range as possible for this bluetooth \napplication considering the connection is not yet encrypted (mentioned \nbelow), and even if it were, it seems like it is always going to be \nbetter in case there is some vulnerability. From my testing with a \nbluetooth radio inside my metal cabinet, the range is ~5 meters, which \nis more than enough.\n\nHowever, the connection is actually a bit slow when the whole \ncertificate chain is included (~3-4s). You can sort of see this in my \nvideo (http://youtu.be/kkVAhA75k1Y?t=7m39s). A lot of the time is \nactually spent verifying the signature, and I'm not sure how much of it \nis doing the fetching (I haven't done any detailed timings using \"adb \nlogcat\" and looking at the log entries), but I do know it is a little \nslower than an HTTPS payment request fetch over wifi (~2-3s). The reason \nI know most of the time is the signature verification is because an \nHTTPS payment request fetch over wifi and verification using breadwallet \non apple is much faster (<1s) than HTTPS payment request on bitcoin \nwallet on android (apparently apple has a significantly more optimized \nsignature verification algorithm). Bottom line is that there may be ~1s \ntime transferring the data with this current bluetooth connection. Not \nsure how slow it will be with the BLE connection. Time is everything in \na point of sale application.\n\nSo, I guess what I am saying is it seems like the lower speed and range \ngain with bluetooth low energy are not a benefit in my opinion. I'm not \nsure that the latency gain will be a benefit either unless the speed \nissues I am noticing with regular bluetooth are actually a latency issue \nwith just getting the connection established, or actually transmitting \nthe payment request data. How much power is going to be used for just a \nfew second payment? It's not like the bluetooth connection is maintained \nfor a long time like it may be in other non bitcoin use cases.\n\n\nWhere is a more appropriate place to discuss the other issues you have \nat length?\n\n\nAndy Schroder\n\nOn 02/05/2015 07:36 PM, Eric Voskuil wrote:\n> Hi Andy,\n>\n> This is good stuff. I've spent quite a bit of time on this question, but\n> set aside most of it earlier in the year in order to make some progress\n> in other areas. I did review what I found available at the time\n> pertaining to the Schildbach implementation and these questions.\n> Skimming the links now I'm encouraged, but I see several things that I'd\n> like to discuss at greater length than is appropriate here.\n>\n> The main advantage of BLE over BT is that it uses much less power, with\n> a trade-off in lower bandwidth (100 kbps vs. 2 mbps). The BLE range can\n> be even greater and connection latency lower than BT. For payment\n> purposes the lower bandwidth isn't much of a hit.\n>\n> e\n>\n> On 02/05/2015 03:38 PM, Andy Schroder wrote:\n>> Hello,\n>>\n>> With the recent discussion started today regarding another bluetooth\n>> communication proposal created by Airbitz, I'd like to bring people's\n>> attention back to this proposal that saw little discussion last fall. I\n>> guess I'm not sure why two proposals are being created. Is their some\n>> advantage of using bluetooth low energy over standard bluetooth (I'm not\n>> well versed in bluetooth low energy)? This NFC coupled approach seems to\n>> avoid a lot of issues with identifying the correct payee. You can see\n>> this proposed scheme demonstrated in action in a POS application in the\n>> video link below which demonstrates it with my fuel pump and Andreas\n>> Schildbach's wallet.\n>>\n>> There was a small discussion that occurred after my original\n>> announcement below. If you are new to this e-mail list, you can find an\n>> archive of those few replies here:\n>> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n>>\n>> Since this original announcement, a few improvements have been made to\n>> the proposal:\n>>\n>>   1. Improved documentation and explanation of the use cases in\n>>      Schildbach's wallet's wiki\n>>       1. https://github.com/schildbach/bitcoin-wallet/wiki/Payment-Requests\n>>   2. Issue with the payment_url field has resolved by changing to a\n>>      repeated field and requiring the wallet to search for the protocol\n>>      they want to use, rather than expecting it to be a certain element\n>>      number in the list.\n>>       1. https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>\n>>\n>> Although there are some interesting use cases of Airbitz's proposal's\n>> work flow, tapping an NFC radio with a 5 mm range requires much less\n>> brain power and time than picking the correct name on the app's screen.\n>> The manual name picking is going to be especially crazy in a very\n>> congested location. The payer isn't ever going to want to have to try\n>> and figure out what register or payment terminal they are at for most\n>> applications I would ever use.\n>>\n>> I'd like to see something happen with this technology. I've also noticed\n>> that micropayment channels have little formality to being established\n>> practically and it would be awesome if they could be managed over\n>> bluetooth as well. Maybe more improvements to the payment protocol can\n>> simultaneously result (and also extended to bluetooth) that embrace the\n>> establishment of micropayment channels.\n>>\n>>\n>>\n>> Andy Schroder\n>>\n>> On 10/17/2014 03:58 PM, Andy Schroder wrote:\n>>> Hello,\n>>>\n>>> I'd like to introduce two proposed BIPs. They are primarily focused on\n>>> implementing the payment protocol using bluetooth connections. I've\n>>> been working on automated point of sale devices and bluetooth\n>>> communication is critical in my mind due to the potential lack of\n>>> internet access at many points of sale, either due to lack of cellular\n>>> internet coverage, lack of payee providing wireless internet, and/or\n>>> due to financial constraints of the payer prohibiting them from\n>>> maintaining a cellular internet service plan. These BIPs are largely\n>>> modeled after the current functionality of Andreas Schildbach's\n>>> android Bitcoin Wallet's bluetooth capability. I've discussed the\n>>> communication scheme with him in depth and believe these proposals to\n>>> clearly and accurately represent the communication scheme.\n>>>\n>>> There is also an additional &h= parameter added to the bitcoin: URI\n>>> scheme which applies to both bluetooth and http payment protocol\n>>> requests which allows for a hash of the payment request to be\n>>> included. This hash was proposed by Andreas as an amendment to BIP72,\n>>> but others preferred not to amend BIP72 since it has already been put\n>>> into place. The current version of Schildbach's bitcoin wallet already\n>>> supports the \"h parameter\".\n>>>\n>>> I'd appreciate feedback from everyone, particularly wallet developers\n>>> as widespread bluetooth support among wallets is very important to me.\n>>> I'm also very new to this mailing list as well as the BIP writing\n>>> process, so I'd appreciate your understanding if my conventions are\n>>> not standard. I am currently using the naming conventions \"TBIP\", so\n>>> that I can propose /temporary/ BIP numbers, and cross reference\n>>> between the two. Obviously these will change if the BIPs are formally\n>>> adopted. You can find a copy of these proposed BIPs at the following\n>>> links:\n>>>\n>>>    * https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>>>    * https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>>\n>>>\n>>> If you are interested, you can see a demonstration of many of the\n>>> proposed features using Schildbach's wallet and my fuel pump in a\n>>> video I recently created: https://youtu.be/kkVAhA75k1Y . The main\n>>> thing not implemented is multiple URLs for the payment protocol, so,\n>>> as a hack, I'm just presenting https vi QR code and bluetooth via NFC\n>>> on my fuel pump for now.\n>>>\n>>>\n>>>\n>>> There are a few known issues that could be improved to this bluetooth\n>>> communication scheme as well as the general payment protocol and\n>>> myself and Andreas would like to receive feedback regarding concerns\n>>> and potential solutions. Some of the known issues are:\n>>>\n>>>    * There may seem to be some inconsistency in the connection header\n>>>      messages between the payment request connection and the payment\n>>>      connection. This is largely because it is how Andreas originally\n>>>      implemented the communication and is hesitant to change it since\n>>>      there are many instances of is software already deployed that\n>>>      implement this scheme.\n>>>    * The current method uses an unauthenticated bluetooth connection\n>>>      for bluetooth 2.1 and newer devices (subject to man in the middle\n>>>      attacks, but not passive eavesdroppers), and an unsecure and\n>>>      unauthenticated connection for older devices. The known concerns\n>>>      here are that someone within 100 meters of the payer could track\n>>>      the bitcoin addresses used for the transaction and could possibly\n>>>      replace the refund address by submitting a forged payment message\n>>>      to the payee. Requiring bluetooth 2.1 and authenticating the\n>>>      connection out of band unfortunately don't seem to be as\n>>>      straightforward/simple of a task with most bluetooth libraries\n>>>      (although I'd love for someone to prove me wrong). It's possible\n>>>      this communication scheme could be extended to use an https \"like\"\n>>>      protocol that would not care if the underlying bluetooth\n>>>      connection is authenticated or encrypted. It's actually possible\n>>>      that http over a bluetooth socket (instead of tcp socket) could be\n>>>      implemented, however it is presently uncertain whether this would\n>>>      be too slow, too much overhead (both on the devices software and\n>>>      communication), or if http could easily be run over bluetooth\n>>>      sockets on all platforms.\n>>>    * There is no acknowledgement failure message possible in the\n>>>      payment protocol, only an acknowledgement message or lack of\n>>>      acknowledgement message. This issue seems to be a concern and as a\n>>>      result, the memo field is used to send an \"ack\" or \"nack\" in\n>>>      Schildbach's wallet. Can we add a boolean status field to the\n>>>      payment acknowledgement message?\n>>>    * I'd personally like a new optional boolean field added to the\n>>>      \"PaymentDetails\" portion of the \"PaymentRequest\" to allow for the\n>>>      payer's wallet to match the \"Output\" optional \"amount\" fields as a\n>>>      total amount of all Outputs, rather than requiring the amount for\n>>>      each output to be matched exactly. As it currently is, the payee\n>>>      can specify multiple receiving addresses in order to require a\n>>>      payer split up the payments so that when the payee then goes to\n>>>      spend the funds later, they don't necessarily have to give their\n>>>      payees as much knowledge of their balances and spending and\n>>>      receiving habits and sources. As the payment protocol currently is\n>>>      requiring all output amounts to be matched exactly for each\n>>>      output, there is no flexibility given to the payer in order to\n>>>      reduce a merging or unnecessary diverging of account funds, which\n>>>      can reduce the privacy of both the payer and the payee. If the\n>>>      payee were given the option to allow the payer the option to\n>>>      divide the amounts amount the outputs intelligently, there can be\n>>>      some privacy gained.\n>>>    * Amount of data stored in QR codes may be getting large when a\n>>>      backwards compatible URL is used (for wallets that don't support\n>>>      the payment protocol) and can be difficult to scan with outdoor\n>>>      screens that have an extra weather resistant pane when in direct\n>>>      sunlight.\n>>>    * The number of offline transactions of a wallet is limited to the\n>>>      known unspent outputs when they go offline. Long term, I'd like to\n>>>      see wallet devices that can use systems such as Kryptoradio's\n>>>      DVB-T based broadcast (but this will need yet another radio!).\n>>>      Another project may be to develop a blockchain query protocol of\n>>>      some kind where retailers can provide access to blockchain data so\n>>>      that customer's wallets can update their known unspent outputs via\n>>>      bluetooth. It's possible such a bluetooth system could be used in\n>>>      combination of \"Kryptoradio\" like broadcasts to provide multiple\n>>>      blockchain references.\n>>>    * The additional payment_url approach is a bit sloppy of a solution\n>>>      in the PaymentDetails portion of the PaymentRequest. It would have\n>>>      been ideal to just change this from an optional field to a\n>>>      repeated field, however, the backwards compatibility in the\n>>>      protocol buffer format will provide the last item in the array for\n>>>      a repeated field (to a code that expects it to be an optional\n>>>      field), rather than the first. Because of this, backwards\n>>>      compatibility with https payment requests wouldn't work if the\n>>>      payment_url field is just changed to a repeated field.\n>>>        o Possible alternatives to what is described in the proposed BIP\n>>>            + Change payment_url to a repeated field and then reverse\n>>>              the order of the parameter numbers in the payment_url,\n>>>              compared to the bitcoin URL \"r parameter\".\n>>>            + Create an additional, new payment_url_multi repeated field\n>>>              (or some better name), and then leave the original\n>>>              payment_url field in there for backwards compatibility\n>>>              (and then maybe phase it out in the future).\n>>>        o Reference\n>>>            + https://developers.google.com/protocol-buffers/docs/proto#updating\n>>>                # \"|optional| is compatible with |repeated|. Given\n>>>                  serialized data of a repeated field as input, clients\n>>>                  that expect this field to be |optional| will take the\n>>>                  last input value if it's a primitive type field or\n>>>                  merge all input elements if it's a message type field.\"\n>>>\n>>>\n>>>\n>>> Your comments and suggestions would be greatly appreciated.\n>>>\n>>> -- \n>>> Andy Schroder\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more. Take a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/71578b57/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-06T02:14:22",
                "message_text_only": "Agree, range is not an issue. The trade-off is in battery vs. total\ntime, which would be influenced primarily by the battery sensitivity of\nthe platform. I'll send you a note to follow up.\n\ne\n\nOn 02/05/2015 05:40 PM, Andy Schroder wrote:\n> Hello,\n> \n> I personally would prefer as low of range as possible for this bluetooth\n> application considering the connection is not yet encrypted (mentioned\n> below), and even if it were, it seems like it is always going to be\n> better in case there is some vulnerability. From my testing with a\n> bluetooth radio inside my metal cabinet, the range is ~5 meters, which\n> is more than enough.\n> \n> However, the connection is actually a bit slow when the whole\n> certificate chain is included (~3-4s). You can sort of see this in my\n> video (http://youtu.be/kkVAhA75k1Y?t=7m39s). A lot of the time is\n> actually spent verifying the signature, and I'm not sure how much of it\n> is doing the fetching (I haven't done any detailed timings using \"adb\n> logcat\" and looking at the log entries), but I do know it is a little\n> slower than an HTTPS payment request fetch over wifi (~2-3s). The reason\n> I know most of the time is the signature verification is because an\n> HTTPS payment request fetch over wifi and verification using breadwallet\n> on apple is much faster (<1s) than HTTPS payment request on bitcoin\n> wallet on android (apparently apple has a significantly more optimized\n> signature verification algorithm). Bottom line is that there may be ~1s\n> time transferring the data with this current bluetooth connection. Not\n> sure how slow it will be with the BLE connection. Time is everything in\n> a point of sale application.\n> \n> So, I guess what I am saying is it seems like the lower speed and range\n> gain with bluetooth low energy are not a benefit in my opinion. I'm not\n> sure that the latency gain will be a benefit either unless the speed\n> issues I am noticing with regular bluetooth are actually a latency issue\n> with just getting the connection established, or actually transmitting\n> the payment request data. How much power is going to be used for just a\n> few second payment? It's not like the bluetooth connection is maintained\n> for a long time like it may be in other non bitcoin use cases.\n> \n> \n> Where is a more appropriate place to discuss the other issues you have\n> at length?\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150205/d6426f9f/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-06T08:53:46",
                "message_text_only": "On 02/06/2015 02:40 AM, Andy Schroder wrote:\n\n> Where is a more appropriate place to discuss the other issues you have\n> at length?\n\nWhat's wrong with this mailing list?"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-06T13:57:06",
                "message_text_only": ">\n> verification using breadwallet on apple is much faster (<1s) than HTTPS\n> payment request on bitcoin wallet on android (apparently apple has a\n> significantly more optimized signature verification algorithm).\n\n\nProbably on Android it's being verified in Java instead of C++. Some\nAndroid APIs are backed by OpenSSL but I don't know off hand if the way\nwe're verifying cert chains on Android is. It's eminently fixable, at any\nrate.\n\nX.509 cert chains are pretty bloated, but even so, shouldn't take several\nseconds to transfer even over Bluetooth.\n\nBottom line is that there may be ~1s time transferring the data with this\n> current bluetooth connection. Not sure how slow it will be with the BLE\n> connection.\n>\n\nBLE isn't really connection oriented, as far as I know.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150206/797a88db/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-06T08:40:35",
                "message_text_only": "On 02/06/2015 01:36 AM, Eric Voskuil wrote:\n\n> The main advantage of BLE over BT is that it uses much less power, with\n> a trade-off in lower bandwidth (100 kbps vs. 2 mbps). The BLE range can\n> be even greater and connection latency lower than BT. For payment\n> purposes the lower bandwidth isn't much of a hit.\n\nI'm all for extending the BT:<mac> scheme to Bluetooth LE. If you have\nideas how this can be done please let us know. I haven't had a chance to\nplay around with LE because none of my devices support it.\n\nI suspect the way how Bluetooth LE transfers files (like payment\nrequests) is opening a plain old Bluetooth socket. If this is true, I'm\nafraid Bluetooth LE would not add anything for sending the BIP70\nmessages back and forth. Note signed payment requests can easily be 4 kB\nin size, so speed *does* matter."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-06T09:00:40",
                "message_text_only": "On 02/06/2015 12:40 AM, Andreas Schildbach wrote:\n> On 02/06/2015 01:36 AM, Eric Voskuil wrote:\n> \n>> The main advantage of BLE over BT is that it uses much less power, with\n>> a trade-off in lower bandwidth (100 kbps vs. 2 mbps). The BLE range can\n>> be even greater and connection latency lower than BT. For payment\n>> purposes the lower bandwidth isn't much of a hit.\n> \n> I'm all for extending the BT:<mac> scheme to Bluetooth LE. If you have\n> ideas how this can be done please let us know. I haven't had a chance to\n> play around with LE because none of my devices support it.\n> \n> I suspect the way how Bluetooth LE transfers files (like payment\n> requests) is opening a plain old Bluetooth socket. If this is true, I'm\n> afraid Bluetooth LE would not add anything for sending the BIP70\n> messages back and forth. Note signed payment requests can easily be 4 kB\n> in size, so speed *does* matter.\n\nHi Andreas,\n\nI haven't expressed any preference for BLE, just answering questions\nthat were raised about it. The main thing that BLE brings to the table\nis increased battery life, but with larger transfers that benefit is\nreduced.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150206/af0d3d7a/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-06T13:54:49",
                "message_text_only": "BLE meets a different use case than regular Bluetooth. BLE is designed to\nallow always-on broadcast \"beacons\" which are conceptually similar to NFC\ntags, with very low power requirements. The tradeoff for this ultra-low\npower consumption and always on nature is the same as with NFC tags: you\nget very little space for data, and they are essentially one way. That's\nwhy a common use case for it is to trigger some other mechanism like a\nclassical Bluetooth socket or HTTPS connection.\n\nI think BLE has a role to play in Bitcoin payments, but probably not for\nactually transferring payment data. Rather, a merchant should be able to\ndrop a BLE beacon in their shop, and then wallet apps can use that to learn\nwhere to download a payment request/upload a payment message. But the\nactual data transfer would still take place over Bluetooth, Wifi or the\ninternet.\n\nThat leads to the question of what the beacon broadcasts. A bitcoin URI is\nthe obvious answer: the problem is a URI contains an address. No problem\nfor the \"throw money at a live performer\" use case but a problem for the\ncafe use case. If we are willing to mandate BIP70 and remove the static\naddress part from the URI the we get a \"uri that points to a url\" which is\na bit inefficient but at least lets us distinguish bitcoin beacons from\nother kinds. That still leaves the fundamental question raised by the\nAirbitz spec - how does your wallet download the right payment request?\n\nUnfortunately that's a tough UI problem. I don't think comparing long hex\nstrings manually is a good way to go. This seems less user friendly than a\nQR code.\n\nOnce we solve that problem, how BLE beacons can trigger payments will all\nfall into place. The tech part isn't the hard part.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150206/444f55a6/attachment.html>"
            },
            {
                "author": "Peter D. Gray",
                "date": "2015-02-06T19:06:07",
                "message_text_only": "I think the Bitcoin community needs a good person-to-person payment\nprotocol for BLE simply because Bluetooth LE is effectively\npeer-to-peer. Unlike NFC or conventional Bluetooth, a $5 micro can\nbe either the master or slave and talk directly to other $5 micros\nnearby.\n\n[ASIDE...  BLE is also the first wireless tech that Apple has allowed us free\naccess to. They have claimed all NFC/RFID connections for their own\n\"Pay\" junk, and Bluetooth accessories are all locked down into their\n\"make for iphone\" program which literally requires a letter from\nyour lawyer to enter. Of course Apple is just one vendor.]\n\nSurely, as a community, we can make a rock-solid P2P protocol that\nis resistant to spoofing and vandalism. I'm a big fan of putting\ncrypto to good use, and doing a slightly more complex protocol\ninvolving EC signing of nonces sounds great.\n\nMy only change to the RedPhone based \"commit protocol\" proposed\npreviously, is I'd like the confirmation code to be a 6-digit decimal\nnumber rather than words. Wordlists are good for Red phone's audio\napplication, but it's a lot easier to display a 6-digit code on\nvending machines, small mobile screens, and printed receipts.\n\nJust my two cents.\n\n---\nPeter D. Gray  ||  Founder, Coinkite  ||  Twitter: @dochex  ||  GPG: A3A31BAD 5A2A5B10\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 514 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150206/8db62979/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Two Proposed BIPs - Bluetooth Communication and bitcoin: URI Scheme Improvements",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Voskuil",
                "Andreas Schildbach",
                "Mike Hearn",
                "Peter D. Gray",
                "Andy Schroder"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 49064
        }
    },
    {
        "title": "[Bitcoin-development] Update to Double-Spend Deprecation Window Proposal",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2015-02-09T03:38:55",
                "message_text_only": "This update strengthens the incentive not to confirm double-spends after \ntime T (30 seconds).  To grow and stabilize adoption, it is necessary to \ninfluence the miner of the block after a deprecated block, who in turn \nis concerned with the block after that. Accordingly, the disincentive is \nchanged from a simple delay to a temporary chain work penalty, which can \nbe negative.  Hal Finney first suggested this in 2011.\n\nThe penalty is graduated in two steps based on the respend gap, for \nreasons explained within.  I believe it is the minimum required to \nachieve the intended result.\n\nDouble-Spend Deprecation Window\nhttps://github.com/dgenr8/out-there/blob/master/ds-dep-win.md"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-09T06:32:24",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThis is an incredibly dangerous and foolish proposal that opens up the Bitcoin network to serious vulnerabilities, both from attackers outside the network, as well as miners trying to gain an advantage over their competition.\n\nUltimately it's flawed for the same root problem that proof-of-stake proposals suffer from: the p2p network just isn't a reliable broadcast medium. Seeing a transaction is not a guarantee that any other node has seen it; not seeing a transaction is not a guarantee other nodes have not seen a spend.\n\nYou can measure \"propagation times\" and other metrics all you want, but you're measuring a network that isn't under attack; Bitcoin must be robust against attacks, and it must not create incentives to launch them. Institutionalising the punishment of miners being they did not have perfect connectivity - an unattainable goal in a trust less, decentralised system - is athema to the goals of having a decentralised systmem and will only lead to smaller mining operations being punished for being the victim of attacks on their network connectivity that are only made profitable by this proposal.\n\nEqually your proposal actually makes it *easier* to pull off apparently single-confirm double-spend attacks - any miner who ignores a block containing the apparent double-spend is just as likely to be aiding an attacker trying to get a 1-conf transaction double-spent. This forces *everyone* to waiting *longer* before accepting a transaction because now even a single-confirmation is no longer good evidence of an accepted transaction. In an ecosystem where hardly anyone relies on zeroconf anyway your putting a much larger group of people at risk who weren't at risk before.\n\nFrankly if this idea gets traction it should serve as a warning to all miners that it's time they adopt replace-by-fee to set a clear precedent that they have no obligations other than the same economic self-interest- not vague notions of \"honesty\" - that makes Bitcoin work in the first place.\n\nBTW you quote Hal Finney and Satoshi in your proposal to try to lend support to it. Don't do that - appealing to authority is a surefire way to get people to ignore you. Its particularly bad when the authorities being appealed too haven't participated in consensus research for years; you're referencing stuff from a time when Bitcoin was barely understood.\n\n\nOn 8 February 2015 21:38:55 GMT-06:00, Tom Harding <tomh at thinlink.com> wrote:\n>\n>This update strengthens the incentive not to confirm double-spends\n>after\n>time T (30 seconds).  To grow and stabilize adoption, it is necessary\n>to\n>influence the miner of the block after a deprecated block, who in turn\n>is concerned with the block after that. Accordingly, the disincentive\n>is\n>changed from a simple delay to a temporary chain work penalty, which\n>can\n>be negative.  Hal Finney first suggested this in 2011.\n>\n>The penalty is graduated in two steps based on the respend gap, for\n>reasons explained within.  I believe it is the minimum required to\n>achieve the intended result.\n>\n>Double-Spend Deprecation Window\n>https://github.com/dgenr8/out-there/blob/master/ds-dep-win.md\n>\n>\n>------------------------------------------------------------------------------\n>Dive into the World of Parallel Programming. The Go Parallel Website,\n>sponsored by Intel and developed in partnership with Slashdot Media, is\n>your\n>hub for all things parallel software development, from weekly thought\n>leadership blogs to news, videos, case studies, tutorials and more.\n>Take a\n>look and join the conversation now. http://goparallel.sourceforge.net/\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJU2FR4MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhTd/B/9CG8fiJIZWnyxTsvnK\nInGRfFMef8yvbALEt4/Io75Iv6Y6xYw0TbkLdk8r38/iFD5RlE6edYQe90QKA903\nD6nxKQU0b1vW53cTptetzpvR6utkFogw3nqPRAy5SrDAdjJrg2Z78QrUQv+pSeYs\nU9Mlw/22Z34vRI4VHpY9jeEtyj2lKNZvlBj/BtOeSHYsXB3R4tVmtp4DRiXc5FVr\ni9NcOSBqKSzvG5bgx1S6QmMakSD/9LaoBrBWFiU2FZV/jX9x+dR31OdrVWr06OJU\nzlR2Xyn3P+KwG8IeJR0K3sk72/vvEN+pntG+SMhtfrwjCgDKYGvULbcELR41EcmA\n/X0i\n=hGv0\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tom Harding",
                "date": "2015-02-09T13:37:39",
                "message_text_only": "Many thanks for the feedback Peter.  Please if you would, see below\n\nOn 2/8/2015 10:32 PM, Peter Todd wrote:\n> Seeing a transaction is not a guarantee that any other node has seen it; not seeing a transaction is not a guarantee other nodes have not seen a spend.\n\nIn no way does proposal rely on such assumptions.  It develops local \nrules which result in a desirable outcome for the network as a whole, \nunder the applicable statistics.\n\n\n> you're measuring a network that isn't under attack; Bitcoin must be robust against attacks, and it must not create incentives to launch them.\n\nTwo specific attacks are addressed at some length.  No one is keener \nthan I to learn of new ones, or flaws in those treatments.\n\n\n> Institutionalising the punishment of miners being they did not have perfect connectivity - an unattainable goal in a trust less, decentralised system - is athema to the goals of having a decentralised systmem and will only lead to smaller mining operations being punished for being the victim of attacks on their network connectivity that are only made profitable by this proposal.\n\nBuilding from unavoidable imperfections is the necessary spirit when \ninterfacing with physical reality.  I would defer to miners whether \nthese specific worries outweigh the benefits of helping to achieve a 30 \nsecond network, rather than a 10\u00b110 minute network.\n\n\n> Equally your proposal actually makes it *easier* to pull off apparently single-confirm double-spend attacks - any miner who ignores a block containing the apparent double-spend is just as likely to be aiding an attacker trying to get a 1-conf transaction double-spent. This forces *everyone* to waiting *longer* before accepting a transaction because now even a single-confirmation is no longer good evidence of an accepted transaction. In an ecosystem where hardly anyone relies on zeroconf anyway your putting a much larger group of people at risk who weren't at risk before.\n\nI agree on one point -- it is necessary to let transactions mature for \nsomething on the order of 15 to 30 seconds before mining them, as \ndiscussed in proposal.  I quite disagree regarding Finney (1-conf) \nattacks.  In fact this proposal is the only one I've seen that actually \nstops most Finney attacks -- all those where the block comes more than \n30 seconds after tx1."
            }
        ],
        "thread_summary": {
            "title": "Update to Double-Spend Deprecation Window Proposal",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd",
                "Tom Harding"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 7385
        }
    },
    {
        "title": "[Bitcoin-development] Standardizing automatic pre-negotiation of transaction terms with BIP70? (Emulating Amazon one-click purchase at all merchants)",
        "thread_messages": [
            {
                "author": "Natanael",
                "date": "2015-02-10T10:21:03",
                "message_text_only": "BIP70 is a protocol for getting a user's wallet client communicate with a\nmerchant's server in order to agree on details like where to send the\npayment, how much to send, what the shipping address is, sending a receipt\nback, and much more using various extensions that adds more functionality.\n\nThere could even be advanced functionality for automatically negotiating\nterms. One example could be selecting a multisignature arbitrator both\nsides trust. Another could be to agree on the speed and type of delivery.\nMany more types of decisions could be automatically agreed upon.\n\nBut as it is now, it is designed to be initiated at the time of payment. If\nyou always want next-day delivery from online stores then you won't always\nknow if that's an option until you've filled the digital basket and gone\nthrough checkout. If you only want to shop with an arbitrator involved same\nthing applies.\n\nEverything that BIP70 enables happens at the last step only, as it is right\nnow.\n\nIf there could be a BIP70 HTML tag on web shops that automatically\ntriggered your wallet as soon as you visit the page, it would be possible\nfor a browser extension that talks to your wallet to tell you right away if\nthe web shop you're currently looking at has terms you consider acceptable\nor not (note: if your wallet client isn't installed on or linked to that\nsame machine, a visible Qr code would be an acceptable alternative which\nyou can scan in advance before you start shopping). This notification can\neven be automatically updated as you add and remove things from your cart\nand details like shipping options change.\n\nThis would massively simplify the shipping experience and make every web\nshop feel like Amazon.\n\nOf course this has privacy implications and increases exposure to potential\nwallet exploits, but the wallet can ask you if you intend to shop or not at\neach site before it even connects and send any information at all in order\nto mitigate both of those problems. This way it should be reasonably safe.\n\nAnother option would be to automatically connect but limit what data is\nsent in order to remain privacy preserving, until the user agrees to send\nprivate information.\n\nThis second method would also open up for the merchant to other send\nrelevant information such as details about various certifications from\nthird parties, which can include a certification that shows they have been\nbeen audited and approved by by entity X for purpose Y. If your wallet has\nthat entity whitelisted it will show you that certificate (for example\n\"Acme Audits have audited and approves of Merchant M's privacy policy and\ndata protection\"). With a list of predefined types of certifications that\nthe wallet understand and accepts, it could (by choice of the user) require\na certificate to be present to even allow you to make a purchase (lack of\nrequired certifications would result in automatic denial). No certificate =\nyour wallet never proceed to send private information.\n\nThoughts?\n\n- Sent from my tablet\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/db065fa8/attachment.html>"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-10T10:34:43",
                "message_text_only": "Why would anyone want to do anything about payment before choosing\nwhat he wants to buy and for what price? I've never used Amazon but\nisn't filling a form with shipping information enough?\n\n2015-02-10 11:21 GMT+01:00 Natanael <natanael.l at gmail.com>:\n> BIP70 is a protocol for getting a user's wallet client communicate with a\n> merchant's server in order to agree on details like where to send the\n> payment, how much to send, what the shipping address is, sending a receipt\n> back, and much more using various extensions that adds more functionality.\n>\n> There could even be advanced functionality for automatically negotiating\n> terms. One example could be selecting a multisignature arbitrator both sides\n> trust. Another could be to agree on the speed and type of delivery. Many\n> more types of decisions could be automatically agreed upon.\n>\n> But as it is now, it is designed to be initiated at the time of payment. If\n> you always want next-day delivery from online stores then you won't always\n> know if that's an option until you've filled the digital basket and gone\n> through checkout. If you only want to shop with an arbitrator involved same\n> thing applies.\n>\n> Everything that BIP70 enables happens at the last step only, as it is right\n> now.\n>\n> If there could be a BIP70 HTML tag on web shops that automatically triggered\n> your wallet as soon as you visit the page, it would be possible for a\n> browser extension that talks to your wallet to tell you right away if the\n> web shop you're currently looking at has terms you consider acceptable or\n> not (note: if your wallet client isn't installed on or linked to that same\n> machine, a visible Qr code would be an acceptable alternative which you can\n> scan in advance before you start shopping). This notification can even be\n> automatically updated as you add and remove things from your cart and\n> details like shipping options change.\n>\n> This would massively simplify the shipping experience and make every web\n> shop feel like Amazon.\n>\n> Of course this has privacy implications and increases exposure to potential\n> wallet exploits, but the wallet can ask you if you intend to shop or not at\n> each site before it even connects and send any information at all in order\n> to mitigate both of those problems. This way it should be reasonably safe.\n>\n> Another option would be to automatically connect but limit what data is sent\n> in order to remain privacy preserving, until the user agrees to send private\n> information.\n>\n> This second method would also open up for the merchant to other send\n> relevant information such as details about various certifications from third\n> parties, which can include a certification that shows they have been been\n> audited and approved by by entity X for purpose Y. If your wallet has that\n> entity whitelisted it will show you that certificate (for example \"Acme\n> Audits have audited and approves of Merchant M's privacy policy and data\n> protection\"). With a list of predefined types of certifications that the\n> wallet understand and accepts, it could (by choice of the user) require a\n> certificate to be present to even allow you to make a purchase (lack of\n> required certifications would result in automatic denial). No certificate =\n> your wallet never proceed to send private information.\n>\n> Thoughts?\n>\n> - Sent from my tablet\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-10T10:41:26",
                "message_text_only": "Den 10 feb 2015 11:34 skrev \"M\u24b6rtin H\u24b6bo\u24cb\u0161tiak\" <martin.habovstiak at gmail.com\n>:\n>\n> Why would anyone want to do anything about payment before choosing\n> what he wants to buy and for what price? I've never used Amazon but\n> isn't filling a form with shipping information enough?\n\nThat's not what this is about.\n\nBIP70 isn't just payment, it is about communication the terms of the sale.\n\nLet's say you're visiting an international webshop. But they don't ship to\nyour country. Wouldn't you want to know that before your start filling the\ncart? With this, your wallet / browser extension could tell you right away\nthat you can't shop there. No time wasted!\n\nThat's just one requirement of many where you would benefit from being told\nright away if it is acceptable for both parties or not.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/e3d47eb0/attachment.html>"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-10T10:48:39",
                "message_text_only": "I still don't understand. The website can have this information\navailable. This is exactly what e-bay does - it displays shipping\ninformation to my country before I do anything. What's the problem?\n\nAlso with other stuff, website can do it and browser extension can do\nit too without messing with Bitcoin.\n\n2015-02-10 11:41 GMT+01:00 Natanael <natanael.l at gmail.com>:\n> Den 10 feb 2015 11:34 skrev \"M\u24b6rtin H\u24b6bo\u24cb\u0161tiak\"\n> <martin.habovstiak at gmail.com>:\n>>\n>> Why would anyone want to do anything about payment before choosing\n>> what he wants to buy and for what price? I've never used Amazon but\n>> isn't filling a form with shipping information enough?\n>\n> That's not what this is about.\n>\n> BIP70 isn't just payment, it is about communication the terms of the sale.\n>\n> Let's say you're visiting an international webshop. But they don't ship to\n> your country. Wouldn't you want to know that before your start filling the\n> cart? With this, your wallet / browser extension could tell you right away\n> that you can't shop there. No time wasted!\n>\n> That's just one requirement of many where you would benefit from being told\n> right away if it is acceptable for both parties or not."
            },
            {
                "author": "Natanael",
                "date": "2015-02-10T11:12:20",
                "message_text_only": "Den 10 feb 2015 11:48 skrev \"M\u24b6rtin H\u24b6bo\u24cb\u0161tiak\" <martin.habovstiak at gmail.com\n>:\n>\n> I still don't understand. The website can have this information\n> available. This is exactly what e-bay does - it displays shipping\n> information to my country before I do anything. What's the problem?\n>\n> Also with other stuff, website can do it and browser extension can do\n> it too without messing with Bitcoin.\n\n1: IP isn't guaranteed to work correctly both because you might be using a\nVPN out Tor.\n\n2: Yes, the site can display all options right away, but are you willing to\nread all of them too?\n\n3: Detailed information is not necessary, nor does it have to be\nunprompted. It doesn't need to tell you more than which country you are in.\nIt can even prompt you with a popup that has a slider that shows exactly\nhow much information and of what kind you're about to share (including\nnone, if that's your choice).\n\n4: It doesn't need to share raw data. Take a look at anonymous credentials:\nhttp://www.zurich.ibm.com/idemix/\nhttps://eprint.iacr.org/2013/622.pdf\n\n5: It can wait for prompting until you add the first item to the cart.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/78a386c4/attachment.html>"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-10T11:21:20",
                "message_text_only": "2015-02-10 12:12 GMT+01:00 Natanael <natanael.l at gmail.com>:\n> Den 10 feb 2015 11:48 skrev \"M\u24b6rtin H\u24b6bo\u24cb\u0161tiak\"\n> <martin.habovstiak at gmail.com>:\n>>\n>> I still don't understand. The website can have this information\n>> available. This is exactly what e-bay does - it displays shipping\n>> information to my country before I do anything. What's the problem?\n>>\n>> Also with other stuff, website can do it and browser extension can do\n>> it too without messing with Bitcoin.\n>\n> 1: IP isn't guaranteed to work correctly both because you might be using a\n> VPN out Tor.\n\nStill possible using web browser extension.\n>\n> 2: Yes, the site can display all options right away, but are you willing to\n> read all of them too?\n\nWhy not? And again, browser extension can do it without bitcoin wallet\n- no need to connect unrelated things.\n>\n> 3: Detailed information is not necessary, nor does it have to be unprompted.\n> It doesn't need to tell you more than which country you are in. It can even\n> prompt you with a popup that has a slider that shows exactly how much\n> information and of what kind you're about to share (including none, if\n> that's your choice).\n>\n> 4: It doesn't need to share raw data. Take a look at anonymous credentials:\n> http://www.zurich.ibm.com/idemix/\n> https://eprint.iacr.org/2013/622.pdf\n>\n> 5: It can wait for prompting until you add the first item to the cart.\n\nEverything you described is possible without Bitcoin involved - why\nwould we mix unrelated things?\n\nP.S.: I believe in Unix philosophy. ;)"
            },
            {
                "author": "Oleg Andreev",
                "date": "2015-02-10T10:50:34",
                "message_text_only": "> Let's say you're visiting an international webshop. But they don't ship to your country. Wouldn't you want to know that before your start filling the cart? With this, your wallet / browser extension could tell you right away that you can't shop there. No time wasted!\n\nWhy my wallet has to do anything with me being in some country? The webshop may detect my location and tell me if they ship to where I'm currently in. Why should I associate more private information (my location) with my wallet than strictly necessary? Why should I automatically advertise my shipping address to every webshop without my explicit consent?\n\nThe wallet must be convenient only as much as it allows for better security and privacy, but not trading off security and privacy for some unrelated convenience. \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/ef9b1d00/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-10T10:59:21",
                "message_text_only": "On 02/10/2015 02:41 AM, Natanael wrote:\n> Den 10 feb 2015 11:34 skrev \"M\u24b6rtin H\u24b6bo\u24cb\u0161tiak\"\n> <martin.habovstiak at gmail.com <mailto:martin.habovstiak at gmail.com>>:\n>>\n>> Why would anyone want to do anything about payment before choosing\n>> what he wants to buy and for what price? I've never used Amazon but\n>> isn't filling a form with shipping information enough?\n> \n> That's not what this is about.\n> \n> BIP70 isn't just payment, it is about communication the terms of the sale.\n\nHi Natanael,\n\nBIP70 exists for seller non-repudiation (i.e. a cryptographically signed\nreceipt for payment) and establishing strong seller identity in a\nface-to-face or other non-web scenario (since TLS doesn't help).\nAnything else is incidental.\n\n> Let's say you're visiting an international webshop. But they don't ship\n> to your country. Wouldn't you want to know that before your start\n> filling the cart? With this, your wallet / browser extension could tell\n> you right away that you can't shop there. No time wasted!\n> \n> That's just one requirement of many where you would benefit from being\n> told right away if it is acceptable for both parties or not.\n\nThere's quite a bit that can be done with wallets and web sites, but\npersonally I'd freak out if my wallet prompted me because I visited a\nweb site.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/dcdd1b2d/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-10T11:08:46",
                "message_text_only": "We can certainly imagine many BIP70 extensions, but for things like\nauto-filling shipping addresses, is the wallet the best place to do it? My\nbrowser already knows how to fill out this data in credit card forms, it\nwould make sense to reuse that for Bitcoin.\n\nIt sounds like you want a kind of Star-Trek negotiation agent thing, where\nyour computer knows how to seek out the best deal because all the metadata\nis standardised. Such a thing would be an interesting project, but it's\nprobably not best done in BIP70 given how it's deployed and used today.\nRather, I'd suggest looking at the various HTML5 data standards which would\nallow merchants to advertise things like where they ship to in a machine\nreadable and crawlable form.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/f998119d/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-10T11:19:56",
                "message_text_only": "Den 10 feb 2015 12:08 skrev \"Mike Hearn\" <mike at plan99.net>:\n>\n> We can certainly imagine many BIP70 extensions, but for things like\nauto-filling shipping addresses, is the wallet the best place to do it? My\nbrowser already knows how to fill out this data in credit card forms, it\nwould make sense to reuse that for Bitcoin.\n>\n> It sounds like you want a kind of Star-Trek negotiation agent thing,\nwhere your computer knows how to seek out the best deal because all the\nmetadata is standardised. Such a thing would be an interesting project, but\nit's probably not best done in BIP70 given how it's deployed and used\ntoday. Rather, I'd suggest looking at the various HTML5 data standards\nwhich would allow merchants to advertise things like where they ship to in\na machine readable and crawlable form.\n\nBIP70 doesn't have to be the place, but not needing to make sure the device\nin question have that information stored already would be an improvement.\nWhat protocol is used doesn't matter much, I just thought reusing BIP70\nwould simplify implementation.\n\nHTML5 elements could definitely be supported, through adding a tag in the\nHTML form that says \"prompt the Bitcoin wallet about the following payment\ndetails\".\n\nAs one example, your browser could ask your hardware wallet over BLE for\nthis data. This way you barely have to trust the computer you're using at\nall, as everything it does is confirmed on the hardware wallet before\npayment (assuming it has a screen, which it should). Linking your hardware\nwallet over BLE to new devices which you then use for browsing and shopping\ncould  be trivial and yet allow secure auto-fill of this kind.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/0b68ce7b/attachment.html>"
            },
            {
                "author": "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak",
                "date": "2015-02-10T11:33:13",
                "message_text_only": "2015-02-10 12:19 GMT+01:00 Natanael <natanael.l at gmail.com>:\n>\n> Den 10 feb 2015 12:08 skrev \"Mike Hearn\" <mike at plan99.net>:\n>>\n>> We can certainly imagine many BIP70 extensions, but for things like\n>> auto-filling shipping addresses, is the wallet the best place to do it? My\n>> browser already knows how to fill out this data in credit card forms, it\n>> would make sense to reuse that for Bitcoin.\n>>\n>> It sounds like you want a kind of Star-Trek negotiation agent thing, where\n>> your computer knows how to seek out the best deal because all the metadata\n>> is standardised. Such a thing would be an interesting project, but it's\n>> probably not best done in BIP70 given how it's deployed and used today.\n>> Rather, I'd suggest looking at the various HTML5 data standards which would\n>> allow merchants to advertise things like where they ship to in a machine\n>> readable and crawlable form.\n>\n> BIP70 doesn't have to be the place, but not needing to make sure the device\n> in question have that information stored already would be an improvement.\n> What protocol is used doesn't matter much, I just thought reusing BIP70\n> would simplify implementation.\n\nIn what universe is that simple? Your solution: browser extension +\nwallet + comminucation API + all the wallets need to implement it\nOur solution: just browser extension.\n\nIf you hate writing browser extensions in Javascript, you can say it\ndirectly. ;)\n\n>\n> HTML5 elements could definitely be supported, through adding a tag in the\n> HTML form that says \"prompt the Bitcoin wallet about the following payment\n> details\".\n\nJust no.\n\n>\n> As one example, your browser could ask your hardware wallet over BLE for\n> this data. This way you barely have to trust the computer you're using at\n> all, as everything it does is confirmed on the hardware wallet before\n> payment (assuming it has a screen, which it should). Linking your hardware\n> wallet over BLE to new devices which you then use for browsing and shopping\n> could  be trivial and yet allow secure auto-fill of this kind.\n\nThis looks more interesting but is information about your location\nreally so secret that you need to hold it in HW wallet? Because if so,\nyou probably don't want to use untrusted machine anyway. (Or just use\nQubes OS.)\n\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-10T11:58:42",
                "message_text_only": "> In what universe is that simple? Your solution: browser extension +\n> wallet + comminucation API + all the wallets need to implement it\n> Our solution: just browser extension.\n\nBrowser extension would only be required until browsers add native support\nfor detecting the tag and prompting a wallet client. This probably won't\nhappen in the near future, though.\n\nAlso, the kind of browser extension you're talking about would be limited\nto just one device or require manually configured syncing between your\ndevices, and would also likely be limited to just a few platforms.\n\nThe communication is done between the wallet and merchant the same as\nalways with BIP70, but with some extra BIP70 extensions for this purpose.\nIt just starts talking earlier.\n\nIt supports graceful degradation just fine, if the browser or wallet don't\nsupport it or the wallet isn't linked to that computer's browser, then\nnothing out of the ordinary happens. The browser extension really don't do\nanything special, it just relays the details in the HTML tag.\n\n> > As one example, your browser could ask your hardware wallet over BLE for\n> > this data. This way you barely have to trust the computer you're using\nat\n> > all, as everything it does is confirmed on the hardware wallet before\n> > payment (assuming it has a screen, which it should). Linking your\nhardware\n> > wallet over BLE to new devices which you then use for browsing and\nshopping\n> > could  be trivial and yet allow secure auto-fill of this kind.\n>\n> This looks more interesting but is information about your location\n> really so secret that you need to hold it in HW wallet? Because if so,\n> you probably don't want to use untrusted machine anyway. (Or just use\n> Qubes OS.)\n\nIt isn't necessarily top secret, but why not be protective by default? Your\nhardware wallet is already designed to keep secrets. Lets say you're at a\nlibrary computer, or at a friend's house, why not let your hardware wallet\ndeal with all the security?\n\nIn this scenario it is likely already functioning as a central point for\nall your Bitcoin related purchases anyway, so it might as well be the\ndevice that remembers all your shopping preferences for you. So let's make\nit simple to use!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150210/28fa9de6/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Standardizing automatic pre-negotiation of transaction terms with BIP70? (Emulating Amazon one-click purchase at all merchants)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Voskuil",
                "Natanael",
                "Mike Hearn",
                "Oleg Andreev",
                "M\u24b6rtin H\u24b6bo\u24cb\u0161tiak"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 22807
        }
    },
    {
        "title": "[Bitcoin-development] Proposal: Requiring a miner's signature in the block header",
        "thread_messages": [
            {
                "author": "Hector Chu",
                "date": "2015-02-11T08:54:15",
                "message_text_only": "A proposal for stemming the tide of mining centralisation -- Requiring a\nminer's signature in the block header (the whole of which is hashed), and\npaying out coinbase to the miner's public key.\n\nPlease comment on whether this idea is feasible, has been thought of before,\netc., etc. Thank you.\n\nMotivation\n----------\n\nMining is centralising to a handful of pool operators. This is bad for a\nnumber of political reasons, which we won't go into right now. But I have\nalways believed that some years down the line, they could hold the users\nhostage and change the rules to suit themselves. For instance by eliminating\nthe halving of the block reward.\n\nSolution\n--------\n\nCurrently the block header is formed by the pool operator and distributed\nfor\nhashing by the pooled miners. It is possible to divide the work among the\nminers as the only thing that is used to search the hash space is by\nchanging\na nonce or two.\n\nI propose that we require each miner to sign the block header prior to\nhashing. The signature will be included in the data that is hashed. Further,\nthe coinbase for the block must only pay out to the public key counterpart\nof\nthe private key used to sign the block header.\n\nA valid block will therefore have a signature in the block header that is\nverified by the public key being paid by the coinbase transaction.\n\nRamifications\n-------------\n\nWork can no longer be divided among the pooled miners as before, without\nsharing the pool's private key amongst all of them. If the pool does try to\ntake this route, then any of the miners may redeem the coinbase when it\nmatures. Therefore, all miners will use their own key pair.\n\nThis will make it difficult to form a cooperating pool of miners who may not\ntrust each other, as the block rewards will be controlled by disparate\nparties\nand not by the pool operator. Only a tight clique of trusted miners would be\nable to form their own private pool in such an environment.\n\nAttacks\n-------\n\nPooled hashpower, instead of earning bitcoins legitimately may try to break\nthe system instead. They may try a double-spending attack, but in order to\nleverage the pool to its full potential the pool operator would again have\nto\nshare their private key with the whole pool. Due to the increased\ncooperation\nand coordination required for an attack, the probability of a 51% attack is\nmuch reduced.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150211/19f07299/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-11T09:25:27",
                "message_text_only": "Den 11 feb 2015 09:55 skrev \"Hector Chu\" <hectorchu at gmail.com>:\n>\n> A proposal for stemming the tide of mining centralisation -- Requiring a\n> miner's signature in the block header (the whole of which is hashed), and\n> paying out coinbase to the miner's public key.\n>\n> Please comment on whether this idea is feasible, has been thought of\nbefore,\n> etc., etc. Thank you.\n>\n> Motivation\n> ----------\n>\n> Mining is centralising to a handful of pool operators. This is bad for a\n> number of political reasons, which we won't go into right now. But I have\n> always believed that some years down the line, they could hold the users\n> hostage and change the rules to suit themselves. For instance by\neliminating\n> the halving of the block reward.\n\n[...]\n\n> I propose that we require each miner to sign the block header prior to\n> hashing. The signature will be included in the data that is hashed.\nFurther,\n> the coinbase for the block must only pay out to the public key\ncounterpart of\n> the private key used to sign the block header.\n\n[...]\n\n> This will make it difficult to form a cooperating pool of miners who may\nnot\n> trust each other, as the block rewards will be controlled by disparate\nparties\n> and not by the pool operator. Only a tight clique of trusted miners would\nbe\n> able to form their own private pool in such an environment.\n\nPeople already trust things like cloud mining, so your solution with\nincreasing technical trust requirements won't help. But you will however\nbreak P2Pool instead.\n\nAlso, note that threshold signatures (group signatures) could probably be\nused by an actual distrusting pool's miners. There are already a proof of\nconcept for this implemented with secp256k1 that works with Bitcoin clients\nsilently. This wouldn't prevent such a pool from working.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150211/c0686825/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-11T13:52:12",
                "message_text_only": "If you're interested in working on mining decentralisation, chipping away\nat getblocktemplate support would be a better path forward. It's possible\nto have decentralised pooled mining - I know it sounds like a contradiction\nbut it's not.\n\nI wrote about some of the things that can be done in this blog post:\n\nhttps://blog.bitcoinfoundation.org/mining-decentralisation-the-low-hanging-fruit/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150211/34fe96bf/attachment.html>"
            },
            {
                "author": "Ittay",
                "date": "2015-02-12T13:56:02",
                "message_text_only": "A similar idea was proposed by Sirer and me as a part of two-phase proof of\nwork (2P-PoW) [1]. In 2P-PoW the first phase is Bitcoin's standard PoW and\nthe second phase requires the signature. This way Bitcoin doesn't lose its\nmining power (read: security) in one day, but rather it is possible to\ngradually switch from the current PoW to the signature-based one, slowly\nphasing out the existing hardware and mining datacenters.\n\nFor a more general view of nonoutsourceable puzzles you can check out\nMiller et al.'s paper [2].\n\nIttay\n\n[1]\nhttp://hackingdistributed.com/2014/06/18/how-to-disincentivize-large-bitcoin-mining-pools/\n\n[2] https://cs.umd.edu/~amiller/nonoutsourceable.pdf\n\n------------------------------\n>\n> Message: 2\n> Date: Wed, 11 Feb 2015 08:54:15 +0000\n> From: Hector Chu <hectorchu at gmail.com>\n> Subject: [Bitcoin-development] Proposal: Requiring a miner's signature\n>         in      the block header\n> To: bitcoin-development at lists.sourceforge.net\n> Message-ID:\n>         <\n> CAAO2FKEFxC_byt4xVJb0S-7yy0M7M-Av7MHUH-RBDuri_GAFtw at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> A proposal for stemming the tide of mining centralisation -- Requiring a\n> miner's signature in the block header (the whole of which is hashed), and\n> paying out coinbase to the miner's public key.\n>\n> Please comment on whether this idea is feasible, has been thought of\n> before,\n> etc., etc. Thank you.\n>\n> Motivation\n> ----------\n>\n> Mining is centralising to a handful of pool operators. This is bad for a\n> number of political reasons, which we won't go into right now. But I have\n> always believed that some years down the line, they could hold the users\n> hostage and change the rules to suit themselves. For instance by\n> eliminating\n> the halving of the block reward.\n>\n> Solution\n> --------\n>\n> Currently the block header is formed by the pool operator and distributed\n> for\n> hashing by the pooled miners. It is possible to divide the work among the\n> miners as the only thing that is used to search the hash space is by\n> changing\n> a nonce or two.\n>\n> I propose that we require each miner to sign the block header prior to\n> hashing. The signature will be included in the data that is hashed.\n> Further,\n> the coinbase for the block must only pay out to the public key counterpart\n> of\n> the private key used to sign the block header.\n>\n> A valid block will therefore have a signature in the block header that is\n> verified by the public key being paid by the coinbase transaction.\n>\n> Ramifications\n> -------------\n>\n> Work can no longer be divided among the pooled miners as before, without\n> sharing the pool's private key amongst all of them. If the pool does try to\n> take this route, then any of the miners may redeem the coinbase when it\n> matures. Therefore, all miners will use their own key pair.\n>\n> This will make it difficult to form a cooperating pool of miners who may\n> not\n> trust each other, as the block rewards will be controlled by disparate\n> parties\n> and not by the pool operator. Only a tight clique of trusted miners would\n> be\n> able to form their own private pool in such an environment.\n>\n> Attacks\n> -------\n>\n> Pooled hashpower, instead of earning bitcoins legitimately may try to break\n> the system instead. They may try a double-spending attack, but in order to\n> leverage the pool to its full potential the pool operator would again have\n> to\n> share their private key with the whole pool. Due to the increased\n> cooperation\n> and coordination required for an attack, the probability of a 51% attack is\n> much reduced.\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n>\n> ------------------------------\n>\n> Message: 3\n> Date: Wed, 11 Feb 2015 10:25:27 +0100\n> From: Natanael <natanael.l at gmail.com>\n> Subject: Re: [Bitcoin-development] Proposal: Requiring a miner's\n>         signature in the block header\n> To: Hector Chu <hectorchu at gmail.com>\n> Cc: bitcoin-development at lists.sourceforge.net\n> Message-ID:\n>         <CAAt2M1_qj0r03=\n> Ref9mN7bJLg-odep3m5teZ7JWDLC+zknQdQQ at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> Den 11 feb 2015 09:55 skrev \"Hector Chu\" <hectorchu at gmail.com>:\n> >\n> > A proposal for stemming the tide of mining centralisation -- Requiring a\n> > miner's signature in the block header (the whole of which is hashed), and\n> > paying out coinbase to the miner's public key.\n> >\n> > Please comment on whether this idea is feasible, has been thought of\n> before,\n> > etc., etc. Thank you.\n> >\n> > Motivation\n> > ----------\n> >\n> > Mining is centralising to a handful of pool operators. This is bad for a\n> > number of political reasons, which we won't go into right now. But I have\n> > always believed that some years down the line, they could hold the users\n> > hostage and change the rules to suit themselves. For instance by\n> eliminating\n> > the halving of the block reward.\n>\n> [...]\n>\n> > I propose that we require each miner to sign the block header prior to\n> > hashing. The signature will be included in the data that is hashed.\n> Further,\n> > the coinbase for the block must only pay out to the public key\n> counterpart of\n> > the private key used to sign the block header.\n>\n> [...]\n>\n> > This will make it difficult to form a cooperating pool of miners who may\n> not\n> > trust each other, as the block rewards will be controlled by disparate\n> parties\n> > and not by the pool operator. Only a tight clique of trusted miners would\n> be\n> > able to form their own private pool in such an environment.\n>\n> People already trust things like cloud mining, so your solution with\n> increasing technical trust requirements won't help. But you will however\n> break P2Pool instead.\n>\n> Also, note that threshold signatures (group signatures) could probably be\n> used by an actual distrusting pool's miners. There are already a proof of\n> concept for this implemented with secp256k1 that works with Bitcoin clients\n> silently. This wouldn't prevent such a pool from working.\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n>\n> ------------------------------\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/518ed3b1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Requiring a miner's signature in the block header",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Hector Chu",
                "Ittay",
                "Natanael"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 11398
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-development Digest, Vol 45, Issue 37",
        "thread_messages": [
            {
                "author": "Joshua",
                "date": "2015-02-11T20:15:16",
                "message_text_only": "UNSUBSCRIBE\n\nOn Wed, Feb 11, 2015 at 2:25 AM, <\nbitcoin-development-request at lists.sourceforge.net> wrote:\n\n> Send Bitcoin-development mailing list submissions to\n>         bitcoin-development at lists.sourceforge.net\n>\n> To subscribe or unsubscribe via the World Wide Web, visit\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> or, via email, send a message with subject or body 'help' to\n>         bitcoin-development-request at lists.sourceforge.net\n>\n> You can reach the person managing the list at\n>         bitcoin-development-owner at lists.sourceforge.net\n>\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of Bitcoin-development digest...\"\n>\n>\n> Today's Topics:\n>\n>    1. Re: Proposal for P2P Wireless (Bluetooth LE) transfer of\n>       Payment URI (Eric Voskuil)\n>    2. Proposal: Requiring a miner's signature in        the block header\n>       (Hector Chu)\n>    3. Re: Proposal: Requiring a miner's signature in the block\n>       header (Natanael)\n>\n>\n> ----------------------------------------------------------------------\n>\n> Message: 1\n> Date: Tue, 10 Feb 2015 09:56:39 -0800\n> From: Eric Voskuil <eric at voskuil.org>\n> Subject: Re: [Bitcoin-development] Proposal for P2P Wireless\n>         (Bluetooth LE) transfer of Payment URI\n> To: M?rtin H?bo??tiak <martin.habovstiak at gmail.com>\n> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>,    Paul Puey\n>         <paul at airbitz.co>\n> Message-ID: <54DA4657.5080604 at voskuil.org>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> On 02/10/2015 09:16 AM, M?rtin H?bo??tiak wrote:\n> > I'm not sure if I was clear enough. Handshake should be used to\n> > establish authenticated AND encrypted communication using ECDH (or\n> > just DH, but I think it's easier to use ECDH, since required functions\n> > are already used in Bitcoin protocol), like RedPhone does. BTW\n> > knowledge of verification string is useless to the attacker.\n>\n> Yes, I think this was clear from your description.\n>\n> > Yes, the customer must verify it verbally and the merchant shouldn't\n> > send the transaction before verification. Other possibility is that in\n> > case of differing verification strings new address is generated, so\n> > attacker doesn't know the address. But in this case, amount is leaked\n> > and there is quite high probability it can be found in the Blockchain.\n>\n> Yes, for each handshake the payment request would need to contain a\n> different address, mitigating some of the privacy loss.\n>\n> > Anyway, I don't believe the transaction can be made securely without\n> > such interaction except with white-listing public keys, so I see no\n> > reason why interaction should be problematic.\n>\n> It can be done securely and privately by transfer of a shared secret\n> through a private channel.\n>\n> > We don't have such strict regulations but I agree that security is\n> > important. Currently I think that verbal verification and manual\n> > confirmation is the best way to achieve high security and reasonable\n> > user-friendliness.\n>\n> I think for a broadcast model (e.g. Bluetooth only) that is the only\n> want to ensure integrity and privacy. A narrow cast can use proximity to\n> establish trust.\n>\n> > 2015-02-10 17:55 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n> >> Martin,\n> >>\n> >> I like your idea for the commit protocol in that it resolves the\n> >> vandalous address substitution attack. However, I don't see a way to\n> >> prevent privacy loss without adverse impact to the scenario.\n> >>\n> >> Anyone could perform the handshake and thereby obtain the payment\n> >> request. Therefore to prevent inadvertent disclosure the customer must\n> >> visually confirm the \"phrase\" and then verbally tell the merchant to\n> >> proceed by sending the payment request.\n> >>\n> >> One might argue that it's sufficient to preserve the integrity of the\n> >> transaction while suffering the privacy loss, especially given that a\n> >> hijacked handshake should never result in a completed transaction -\n> >> unless of course the hijacker pays.\n> >>\n> >> But imagine someone purchasing their meds. HIPAA requires the checkout\n> >> queue to form behind a yellow line. That speaks directly to this\n> question.\n> >>\n> >> e\n> >>\n> >> On 02/06/2015 01:07 AM, M?rtin H?bo??tiak wrote:\n> >>> 2015-02-06 2:29 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n> >>>> On 02/05/2015 04:36 PM, Martin Habov?tiak wrote:\n> >>>>> I believe, we are still talking about transactions of physical\n> >>>>> people in physical world. So yes, it's proximity based - people\n> >>>>> tell the words by mouth. :)\n> >>>>\n> >>>> Notice from my original comment:\n> >>>>\n> >>>>>>>> A MITM can substitute the key. If you don't have verifiable\n> >>>>>>>> identity associated with the public key (PKI/WoT), you need\n> >>>>>>>> a shared secret (such as a secret phrase).\n> >>>>\n> >>>> I said this could only be accomplished using a shared secret or a\n> >>>> trusted public key. Exchanging a value that is derived from a pair of\n> >>>> public keys is a distinction without a difference. The problem remains\n> >>>> that the parties must have a secure/out-of-band channel for\n> >>>> communicating this value.\n> >>>>\n> >>>> The fact that they are face-to-face establishes this channel, but that\n> >>>> brings us back to the original problem, as it requires manual\n> >>>> verification - as in visual/audible scanning of the two values for\n> >>>> comparison. At that point the visual comparison of the address, or\n> some\n> >>>> value derived from it, is simpler.\n> >>>\n> >>> I have never been against manual verification. What I'm trying to say\n> >>> is let's just make manual verification easier and more secure.\n> >>> Comparison of address is simpler for the coder but also simpler to\n> >>> attack. It has these problems:\n> >>> - Addresses broadcasted in plaintext (privacy issue)\n> >>> - Amounts broadcasted in plaintext (privacy issue)\n> >>> - Address is long - takes lot of time to verify (user experience issue)\n> >>> - Address prefix can be brute-forced, if too short or used to make\n> >>> \"black hole\" address if longer (vandalism issue)\n> >>>\n> >>> Commit protocol can be used for both the encryption and the\n> >>> authentication while user experience is not bad and everything is\n> >>> still secure.\n> >>>\n> >>>>\n> >>>>> In case of RedPhone, you read those words verbally over not-yet-\n> >>>>> verified channel relying on difficulty of spoofing your voice. Also\n> >>>>> the app remembers the public keys, so you don't need to verify\n> >>>>> second time.\n> >>>>\n> >>>> This is reasonable, but wouldn't help in the case of an ad-hoc\n> >>>> connection between parties who don't know each other well.\n> >>>>\n> >>>>> I suggest you to try RedPhone (called Signal on iPhone) yourself.\n> >>>>> It's free/open source, Internet-based and end-to-end encrypted. You\n> >>>>> may find it useful some day. Also I'm willing to help you with\n> >>>>> trying it after I wake up. (~8 hours: Send me private e-mail if\n> >>>>> you want to.)\n> >>>>\n> >>>> I appreciate the offer. I really don't trust *any* smartphone as a\n> >>>> platform for secure communication/data. But encrypting on the wire\n> does\n> >>>> of course shrink the attack surface and increase the attacker's cost.\n> >>>>\n> >>>> e\n> >>>>\n> >>>>> D?a 6. febru?ra 2015 1:22:23 CET pou??vate? Eric Voskuil\n> >>>> <eric at voskuil.org> nap?sal:\n> >>>>\n> >>>>>> On 02/05/2015 04:04 PM, M?rtin H?bo??tiak wrote:\n> >>>>>>> That's exactly what I though when seeing the RedPhone code, but\n> after\n> >>>>>>> I studied the commit protocol I realized it's actually secure and\n> >>>>>>> convenient way to do it. You should do that too. :)\n> >>>>>\n> >>>>>> I was analyzing the model as you described it to me. A formal\n> analysis\n> >>>>>> of the security model of a particular implementation, based on\n> >>>>>> inference\n> >>>>> >from source code, is a bit beyond what I signed up for. But I'm\n> >>>>>> perfectly willing to comment on your description of the model if you\n> >>>>>> are\n> >>>>>> willing to indulge me.\n> >>>>>\n> >>>>>>> Shortly, how it works:\n> >>>>>>> The initiator of the connection sends commit message containing the\n> >>>>>>> hash of his temporary public ECDH part, second party sends back\n> their\n> >>>>>>> public ECDH part and then initiator sends his public ECDH part in\n> >>>>>>> open. All three messages are hashed together and the first two\n> bytes\n> >>>>>>> are used to select two words from a shared dictionary which are\n> >>>>>>> displayed on the screen of both the initiator and the second party.\n> >>>>>\n> >>>>>>> The parties communicate those two words and verify they match.\n> >>>>>\n> >>>>>> How do they compare words if they haven't yet established a secure\n> >>>>>> channel?\n> >>>>>\n> >>>>>>> If an attacker wants to do MITM, he has a chance of choosing right\n> >>>>>>> public parts 1:65536. There is no way to brute-force it, since that\n> >>>>>>> would be noticed immediately. If instead of two words based on the\n> >>>>>>> first two bytes, four words from BIP39 wordlist were chosen, it\n> would\n> >>>>>>> provide entropy of 44 bits which I believe should be enough even\n> for\n> >>>>>>> paranoid people.\n> >>>>>>>\n> >>>>>>> How this would work in Bitcoin payment scenario: user's phone\n> >>>>>>> broadcasts his name, merchant inputs amount and selects the name\n> from\n> >>>>>>> the list, commit message is sent (and then the remaining two\n> >>>>>>> messages), merchant spells four words he sees on the screen and\n> buyer\n> >>>>>>> confirms transaction after verifying that words match.\n> >>>>>\n> >>>>>> So the assumption is that there exists a secure (as in\n> proximity-based)\n> >>>>>> communication channel?\n> >>>>>\n> >>>>>> e\n> >>>>>\n> >>>>>>> 2015-02-06 0:46 GMT+01:00 Eric Voskuil <eric at voskuil.org>:\n> >>>>>>>> On 02/05/2015 03:36 PM, M?rtin H?bo??tiak wrote:\n> >>>>>>>>>> A BIP-70 signed payment request in the initial broadcast can\n> >>>>>> resolve the\n> >>>>>>>>>> integrity issues, but because of the public nature of the\n> >>>>>> broadcast\n> >>>>>>>>>> coupled with strong public identity, the privacy compromise is\n> >>>>>> much\n> >>>>>>>>>> worse. Now transactions are cryptographically tainted.\n> >>>>>>>>>>\n> >>>>>>>>>> This is also the problem with BIP-70 over the web. TLS and other\n> >>>>>>>>>> security precautions aside, an interloper on the communication,\n> >>>>>> desktop,\n> >>>>>>>>>> datacenter, etc., can capture payment requests and strongly\n> >>>>>> correlate\n> >>>>>>>>>> transactions to identities in an automated manner. The payment\n> >>>>>> request\n> >>>>>>>>>> must be kept private between the parties, and that's hard to do.\n> >>>>>>>>>\n> >>>>>>>>> What about using encryption with forward secrecy? Merchant would\n> >>>>>>>>> generate signed request containing public ECDH part, buyer would\n> >>>>>> send\n> >>>>>>>>> back transaction encrypted with ECDH and his public ECDH part. If\n> >>>>>>>>> receiving address/amount is meant to be private, use commit\n> >>>>>> protocol\n> >>>>>>>>> (see ZRTP/RedPhone) and short authentication phrase (which is\n> hard\n> >>>>>> to\n> >>>>>>>>> spoof thanks to commit protocol - see RedPhone)?\n> >>>>>>>>\n> >>>>>>>> Hi Martin,\n> >>>>>>>>\n> >>>>>>>> The problem is that you need to verify the ownership of the public\n> >>>>>> key.\n> >>>>>>>> A MITM can substitute the key. If you don't have verifiable\n> identity\n> >>>>>>>> associated with the public key (PKI/WoT), you need a shared secret\n> >>>>>> (such\n> >>>>>>>> as a secret phrase). But the problem is then establishing that\n> >>>>>> secret\n> >>>>>>>> over a public channel.\n> >>>>>>>>\n> >>>>>>>> You can bootstrap a private session over the untrusted network\n> using\n> >>>>>> a\n> >>>>>>>> trusted public key (PKI/WoT). But the presumption is that you are\n> >>>>>>>> already doing this over the web (using TLS). That process is\n> subject\n> >>>>>> to\n> >>>>>>>> attack at the CA. WoT is not subject to a CA attack, because it's\n> >>>>>>>> decentralized. But it's also not sufficiently deployed for some\n> >>>>>> scenarios.\n> >>>>>>>>\n> >>>>>>>> e\n> >>>>>>>>\n> >>>>>\n> >>>>>\n> >>>>\n> >>\n>\n> -------------- next part --------------\n> A non-text attachment was scrubbed...\n> Name: signature.asc\n> Type: application/pgp-signature\n> Size: 473 bytes\n> Desc: OpenPGP digital signature\n>\n> ------------------------------\n>\n> Message: 2\n> Date: Wed, 11 Feb 2015 08:54:15 +0000\n> From: Hector Chu <hectorchu at gmail.com>\n> Subject: [Bitcoin-development] Proposal: Requiring a miner's signature\n>         in      the block header\n> To: bitcoin-development at lists.sourceforge.net\n> Message-ID:\n>         <\n> CAAO2FKEFxC_byt4xVJb0S-7yy0M7M-Av7MHUH-RBDuri_GAFtw at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> A proposal for stemming the tide of mining centralisation -- Requiring a\n> miner's signature in the block header (the whole of which is hashed), and\n> paying out coinbase to the miner's public key.\n>\n> Please comment on whether this idea is feasible, has been thought of\n> before,\n> etc., etc. Thank you.\n>\n> Motivation\n> ----------\n>\n> Mining is centralising to a handful of pool operators. This is bad for a\n> number of political reasons, which we won't go into right now. But I have\n> always believed that some years down the line, they could hold the users\n> hostage and change the rules to suit themselves. For instance by\n> eliminating\n> the halving of the block reward.\n>\n> Solution\n> --------\n>\n> Currently the block header is formed by the pool operator and distributed\n> for\n> hashing by the pooled miners. It is possible to divide the work among the\n> miners as the only thing that is used to search the hash space is by\n> changing\n> a nonce or two.\n>\n> I propose that we require each miner to sign the block header prior to\n> hashing. The signature will be included in the data that is hashed.\n> Further,\n> the coinbase for the block must only pay out to the public key counterpart\n> of\n> the private key used to sign the block header.\n>\n> A valid block will therefore have a signature in the block header that is\n> verified by the public key being paid by the coinbase transaction.\n>\n> Ramifications\n> -------------\n>\n> Work can no longer be divided among the pooled miners as before, without\n> sharing the pool's private key amongst all of them. If the pool does try to\n> take this route, then any of the miners may redeem the coinbase when it\n> matures. Therefore, all miners will use their own key pair.\n>\n> This will make it difficult to form a cooperating pool of miners who may\n> not\n> trust each other, as the block rewards will be controlled by disparate\n> parties\n> and not by the pool operator. Only a tight clique of trusted miners would\n> be\n> able to form their own private pool in such an environment.\n>\n> Attacks\n> -------\n>\n> Pooled hashpower, instead of earning bitcoins legitimately may try to break\n> the system instead. They may try a double-spending attack, but in order to\n> leverage the pool to its full potential the pool operator would again have\n> to\n> share their private key with the whole pool. Due to the increased\n> cooperation\n> and coordination required for an attack, the probability of a 51% attack is\n> much reduced.\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n>\n> ------------------------------\n>\n> Message: 3\n> Date: Wed, 11 Feb 2015 10:25:27 +0100\n> From: Natanael <natanael.l at gmail.com>\n> Subject: Re: [Bitcoin-development] Proposal: Requiring a miner's\n>         signature in the block header\n> To: Hector Chu <hectorchu at gmail.com>\n> Cc: bitcoin-development at lists.sourceforge.net\n> Message-ID:\n>         <CAAt2M1_qj0r03=\n> Ref9mN7bJLg-odep3m5teZ7JWDLC+zknQdQQ at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> Den 11 feb 2015 09:55 skrev \"Hector Chu\" <hectorchu at gmail.com>:\n> >\n> > A proposal for stemming the tide of mining centralisation -- Requiring a\n> > miner's signature in the block header (the whole of which is hashed), and\n> > paying out coinbase to the miner's public key.\n> >\n> > Please comment on whether this idea is feasible, has been thought of\n> before,\n> > etc., etc. Thank you.\n> >\n> > Motivation\n> > ----------\n> >\n> > Mining is centralising to a handful of pool operators. This is bad for a\n> > number of political reasons, which we won't go into right now. But I have\n> > always believed that some years down the line, they could hold the users\n> > hostage and change the rules to suit themselves. For instance by\n> eliminating\n> > the halving of the block reward.\n>\n> [...]\n>\n> > I propose that we require each miner to sign the block header prior to\n> > hashing. The signature will be included in the data that is hashed.\n> Further,\n> > the coinbase for the block must only pay out to the public key\n> counterpart of\n> > the private key used to sign the block header.\n>\n> [...]\n>\n> > This will make it difficult to form a cooperating pool of miners who may\n> not\n> > trust each other, as the block rewards will be controlled by disparate\n> parties\n> > and not by the pool operator. Only a tight clique of trusted miners would\n> be\n> > able to form their own private pool in such an environment.\n>\n> People already trust things like cloud mining, so your solution with\n> increasing technical trust requirements won't help. But you will however\n> break P2Pool instead.\n>\n> Also, note that threshold signatures (group signatures) could probably be\n> used by an actual distrusting pool's miners. There are already a proof of\n> concept for this implemented with secp256k1 that works with Bitcoin clients\n> silently. This wouldn't prevent such a pool from working.\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n>\n> ------------------------------\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n>\n> ------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> End of Bitcoin-development Digest, Vol 45, Issue 37\n> ***************************************************\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150211/57ec266d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-development Digest, Vol 45, Issue 37",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Joshua"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 18705
        }
    },
    {
        "title": "[Bitcoin-development] replace-by-fee v0.10.0rc4",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-02-12T06:47:19",
                "message_text_only": "My replace-by-fee patch is now available for the v0.10.0rc4 release:\n\n    https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.10.0rc4\n\nAlong with demo scripts of the functionality:\n\n    https://github.com/petertodd/replace-by-fee-tools\n\nNew to this version is a comprehensive set of unittests under\nqa/replace-by-fee\n\nAdditionally the preferential peering support now preferentially peers\nwith Bitcoin XT\u00b9 nodes that support Andresen/Harding's double-spend\nrelaying\u00b2 patch. While Bitcoin XT nodes don't accept double-spends into\ntheir mempool, they do relay them perfectly well and thus are an asset\nto those doing replace-by-fee mining.\u00b3\n\nI've had a number of requests from miners for a version of\nreplace-by-fee against Luke-Jr's Eligius patches\u2074; I'll be also\nreleasing that shortly once this release has undergone some more\ntesting.\n\n\nWhat's replace-by-fee?\n----------------------\n\nCurrently most Bitcoin nodes accept the first transaction they see\nspending an output to the mempool; all later transactions are rejected.\nReplace-by-fee changes this behavior to accept the transaction paying\nthe highest fee, both absolutely, and in terms of fee-per-KB. Replaced\nchildren are also considered - a chain of transactions is only replaced\nif the replacement has a higher fee than the sum of all replaced\ntransactions.\n\nDoing this aligns standard node behavior with miner incentives: earn the\nmost amount of money per block. It also makes for a more efficient\ntransaction fee marketplace, as transactions that are \"stuck\" due to bad\nfee estimates can be \"unstuck\" by double-spending them with higher\npaying versions of themselves. With scorched-earth techniques\u2075 it gives\na path to making zeroconf transactions economically secure by relying on\neconomic incentives, rather than \"honesty\" and alturism, in the same way\nBitcoin mining itself relies on incentives rather than \"honesty\" and\nalturism.\n\nFinally for miners adopting replace-by-fee avoids the development of an\necosystem that relies heavily on large miners punishing smaller ones for\nmisbehavior, as seen in Harding's proposal\u2076 that miners collectively 51%\nattack miners who include doublespends in their blocks - an unavoidable\nconsequence of imperfect p2p networking in a decentralized system - or\neven Hearn's proposal\u2077 that a majority of miners be able to vote to\nconfiscate the earnings of the minority and redistribute them at will.\n\n\nInstallation\n------------\n\nOnce you've compiled the replace-by-fee-v0.10.0rc4 branch just run your\nnode normally. With -debug logging enabled, you'll see messages like the\nfollowing in your ~/.bitcoin/debug.log indicating your node is replacing\ntransactions with higher-fee paying double-spends:\n\n    2015-02-12 05:45:20 replacing tx ca07cc2a5eaf55ab13be7ed7d7526cb9d303086f116127608e455122263f93ea with c23973c08d71cdadf3a47bae45566053d364e77d21747ae7a1b66bf1dffe80ea for 0.00798 BTC additional fees, -1033 delta bytes\n\nAdditionally you can tell if you are connected to other replace-by-fee\nnodes, or Bitcoin XT nodes, by examining the service bits advertised by\nyour peers:\n\n    $ bitcoin-cli getpeerinfo | grep services | egrep '((0000000000000003)|(0000000004000001))'\n            \"services\" : \"0000000000000003\",\n            \"services\" : \"0000000004000001\",\n            \"services\" : \"0000000004000001\",\n            \"services\" : \"0000000000000003\",\n            \"services\" : \"0000000004000001\",\n            \"services\" : \"0000000004000001\",\n            \"services\" : \"0000000000000003\",\n            \"services\" : \"0000000000000003\",\n\nReplace-by-fee nodes advertise service bit 26 from the experimental use\nrange; Bitcoin XT nodes advertise service bit 1 for their getutxos\nsupport. The code sets aside a certain number of outgoing and incoming\nslots just for double-spend relaying nodes, so as long as everything is\nworking you're node should be connected to like-minded nodes a within 30\nminutes or so of starting up.\n\nIf you *don't* want to advertise the fact that you are running a\nreplace-by-fee node, just checkout a slightly earlier commit in git; the\nactual mempool changes are separate from the preferential peering\ncommits. You can then connect directly to a replace-by-fee node using\nthe -addnode command line flag.\n\n1) https://github.com/bitcoinxt/bitcoinxt\n2) https://github.com/bitcoin/bitcoin/pull/3883\n3) https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45543370\n4) https://github.com/luke-jr/bitcoin/tree/0.10.x-ljrP\n5) http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg05211.html\n6) http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg06970.html\n7) http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04972.html\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000013c290b77d45d2ea7f9220aedfadfd556ad41b6bd39822f3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/a1703e85/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-12T07:23:29",
                "message_text_only": "Peter,\n\nAn important use of the core is being border router to proprietary software, that is usually indexing the block chain and mempool. That software is also assuming that double spends are not relayed by the core.\n\nTo remain useful as border router, the replace-by-fee patched core should only relay double spend if it actually replaces an earlier transaction, as otherwise the replace logic that is according to your commit more than just fee comparison, would have to be replicated in the proprietary stack and mempool might get out of sync with that of the border router. \n\nTamas Blummer\nBits of Proof\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/582e4829/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/582e4829/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-12T07:45:09",
                "message_text_only": "On Thu, Feb 12, 2015 at 08:23:29AM +0100, Tamas Blummer wrote:\n> Peter,\n> \n> An important use of the core is being border router to proprietary software, that is usually indexing the block chain and mempool. That software is also assuming that double spends are not relayed by the core.\n> \n> To remain useful as border router, the replace-by-fee patched core should only relay double spend if it actually replaces an earlier transaction, as otherwise the replace logic that is according to your commit more than just fee comparison, would have to be replicated in the proprietary stack and mempool might get out of sync with that of the border router. \n\nAbsolutely nothing in the replace-by-fee patch is consensus critical;\nyour objection is entirely an artifact of the poor modularity of the\nBitcoin Core codebase, something that is being actively improved on as\nwe speak.\n\nAnyway, the logic of dealing with double-spends and keeping mempools\nsynced is pretty trivial:\n\n    for i in range(len(tx.vout)):\n        for double_spent_tx in mempool.mapNextTx[COutPoint(tx.GetHash(), i)]:\n            mempool.remove(double_spent_tx, recursive=True)\n    mempool.add(tx)\n\nIOW, assume every transaction your \"border router\" gives you is now the\none and only true transaction, and everything conflicting with it must\ngo.\n\nAll the complexity of replace-by-fee is in deciding when one transaction\nshould replace another(s). Other than that the code is simple and very\nsimilar to block handling logic.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000948f5c1f1a8c8073cc7d5161b98474e33904f8a1d6b0330\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/b1db0155/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-12T08:27:22",
                "message_text_only": "On Feb 12, 2015, at 9:16 AM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n> Why don't you use getrawmempool RPC call to synchronize mempool contents?\n\n\n\nSince RPC interface does not scale to serve a multi user service.\nIn absence of better alternative, the interfaces used by a proprietary extension are usually the same as in P2P consensus.\n\nPOW is used to figure the longest chain and until now broadcasted transactions were assumed the one and only. \nThese simple rules ensure a consensus between the proprietary stack and the border router, and that is the consensus I referred to.\n\n\nOn Feb 12, 2015, at 8:45 AM, Peter Todd <pete at petertodd.org> wrote:\n> IOW, assume every transaction your \"border router\" gives you is now the\n> one and only true transaction, and everything conflicting with it must\n> go.\n\n\nYou are right that the assumption about the one and only transaction have to be relaxed. Broadcasting \ndouble spend only if it is actually replacing an earlier - for whatever reason, would simplify internal consensus logic .\n\nTamas Blummer\nBits of Proof\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/69bb8178/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/69bb8178/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-12T08:49:54",
                "message_text_only": "On Thu, Feb 12, 2015 at 09:27:22AM +0100, Tamas Blummer wrote:\n> On Feb 12, 2015, at 8:45 AM, Peter Todd <pete at petertodd.org> wrote:\n> > IOW, assume every transaction your \"border router\" gives you is now the\n> > one and only true transaction, and everything conflicting with it must\n> > go.\n> \n> \n> You are right that the assumption about the one and only transaction have to be relaxed. Broadcasting \n> double spend only if it is actually replacing an earlier - for whatever reason, would simplify internal consensus logic .\n\nWait, what the heck do you mean by \"only if it is actually replacing an\nearlier\"?\n\nHow does my replace-by-fee patch *not* do that?\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000012613986506ef6592952234a6a04946ef946ff0836405ad4\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/3a7c7dc8/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-12T09:01:48",
                "message_text_only": "On Feb 12, 2015, at 9:49 AM, Peter Todd <pete at petertodd.org> wrote:\n> \n> How does my replace-by-fee patch *not* do that?\n\nDoes it broadcast a double spend only if it IS replacing an earlier? If yes, I am fine with it.\n\nTamas Blummer\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/a0014230/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/a0014230/attachment.sig>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2015-02-15T20:51:54",
                "message_text_only": "On Thu, Feb 12, 2015 at 09:27:22AM +0100, Tamas Blummer wrote:\n> \n> \n> On Feb 12, 2015, at 9:16 AM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n> > Why don't you use getrawmempool RPC call to synchronize mempool contents?\n> \n> \n> \n> Since RPC interface does not scale to serve a multi user service.\n> In absence of better alternative, the interfaces used by a proprietary extension are usually the same as in P2P consensus.\n> \n> POW is used to figure the longest chain and until now broadcasted transactions were assumed the one and only. \n> These simple rules ensure a consensus between the proprietary stack and the border router, and that is the consensus I referred to.\n> \n\nIf a proprietary stack has problems with replace-by-fee then it's probably \nsucceptible to malicious attack because an attacker could just broadcast\none transaction to the network and then replace it when they are able to\nmine a block themselves.\n\n> \n> On Feb 12, 2015, at 8:45 AM, Peter Todd <pete at petertodd.org> wrote:\n> > IOW, assume every transaction your \"border router\" gives you is now the\n> > one and only true transaction, and everything conflicting with it must\n> > go.\n> \n> \n> You are right that the assumption about the one and only transaction have to be relaxed. Broadcasting \n> double spend only if it is actually replacing an earlier - for whatever reason, would simplify internal consensus logic .\n>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2015-02-12T08:16:55",
                "message_text_only": "> To remain useful as border router, the replace-by-fee patched core should\n> only relay double spend if it actually replaces an earlier transaction, as\n> otherwise the replace logic that is according to your commit more than just\n> fee comparison, would have to be replicated in the proprietary stack and\n> mempool might get out of sync with that of the border router.\n>\n\nWhy don't you use getrawmempool RPC call to synchronize mempool contents?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/d898c0e1/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T11:58:16",
                "message_text_only": "I know you will ignore this as usual, but the entire replace-by-fee folly\nis based on your fundamental misunderstanding of miner incentives.\n\nMiners are *not* incentivised to earn the most money in the next block\npossible. They are incentivised to maximise their return on investment.\nMaking Bitcoin much less useful reduces demand for the bitcoins they are\nmining, reducing coinbase and fee income in future blocks. Quite possibly,\nto the point where those miners are then making a loss.\n\nYour \"scorched earth\" plan is aptly named, as it's guaranteed to make\nunconfirmed payments useless. If enough miners do it they will simply break\nBitcoin to the point where it's no longer an interesting payments system\nfor lots of people. Then miners who have equipment to pay off will be\n*really* screwed, not to mention payment processors and all the investors\nin them.\n\nI'm sure you can confuse a few miners into thinking your ideas are a\nsuper-duper way to maximise their income, and in the process might\nfacilitate a pile of payment fraud. But they aren't. This one is about as\nsensible as your \"let's never increase the block size\"  and \"let's kill SPV\nclients\" crusades - badly thought out and bad for Bitcoin.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/48b4714f/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-12T12:23:01",
                "message_text_only": "Den 12 feb 2015 12:58 skrev \"Mike Hearn\" <mike at plan99.net>:\n[...]\n\n> Your \"scorched earth\" plan is aptly named, as it's guaranteed to make\nunconfirmed payments useless.\n\nAre you not counting collateralized multisignature notaries? Its an\nextended version of the Greenaddress.it model.\n\nNoRiskWallet: https://github.com/baleato/bitcoin-hackathon\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/ccc97086/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T12:49:01",
                "message_text_only": ">\n> Are you not counting collateralized multisignature notaries? Its an\n> extended version of the Greenaddress.it model.\n>\nIt makes unconfirmed transactions useless in the classical Bitcoin model.\nObviously if you introduce a trusted third party you can fix things, but\nthen you're back to having the disadvantages of centralised trust.\n\nIf unconfirmed payments become flaky enough that people stop using them,\nthen a portion of the Bitcoin community will find workarounds like trusted\nthird parties, trusted hardware, whatever and will just struggle one. Other\npeople will look at the new tradeoffs/complexity, and decide that Bitcoin\nis no longer better for them than banks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/7f2331b5/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-12T13:02:20",
                "message_text_only": "Den 12 feb 2015 13:49 skrev \"Mike Hearn\" <mike at plan99.net>:\n>>\n>> Are you not counting collateralized multisignature notaries? Its an\nextended version of the Greenaddress.it model.\n>\n> It makes unconfirmed transactions useless in the classical Bitcoin model.\nObviously if you introduce a trusted third party you can fix things, but\nthen you're back to having the disadvantages of centralised trust.\n\nThat trust you put in them is extremely limited, and temporary.\n\nFirst of all, the standard multisignature notary model applies like how I\noriginally described it in my blog post over a year ago.\n\nYou can prove a doublespend instantly by showing two conflicting\ntransactions both signed by thar party. This pair can be distributed as a\nproof of malice globally in seconds via a push messaging mechanism.\n\nAfter confirmation in the blockchain, you have standard Bitcoin transaction\nsecurity.\nTo profit, the notary would have to be sure the payout from agreeing on\ncollusion (or to perform the doublespend themselves) would pay out better\nthan acting honestly for a given amount of time info the future. This means\ntransactions for small sums are secure.\n\nTo provide security for high value transactions, NRW adds a collateral\ntransaction that the notary stands for and signs in advance, and gives to\nthe seller. The key here is that it is constructed such that if the\noriginal payment gets doublespent, then this collateral transaction to the\nseller becomes spendable.\n\nSo there is two outcomes - either the customer or the notary pays the\nseller. The customer can't force a doublespend. The notary can't steal or\nfreeze funds (due to nlocktime fund recovery option). The seller knows\nhe'll get the funds for sure before delivering the goods. Nobody is at\nrisk.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/be689276/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T13:44:18",
                "message_text_only": ">\n> You can prove a doublespend instantly by showing two conflicting\n> transactions both signed by thar party. This pair can be distributed as a\n> proof of malice globally in seconds via a push messaging mechanism.\n>\nThere have been lots of e-cash schemes proposed in the academic literature\nthat work like this, or variants of it. Schemes where participants are\nanonymous until they double spend are popular.\n\nLet's re-write your proposal but substituting the word notary for miner:\n\nTo profit, the *miner* would have to be sure the payout from agreeing on\ncollusion (or to perform the doublespend themselves) would pay out better\nthan acting honestly for a given amount of time info the future. This means\ntransactions for small sums are secure.\n\n\nThat's the exact argument we're having. The assertion is that a \"rational\"\nnotary would kill his own business to increase his profits in the next few\nhours. So you're just arguing that a notary is different to a miner,\nwithout spelling out exactly why.\n\nDoes the notary have to make a big up front investment? If so, why is that\ndifferent to mining investment?\n\nIs the notary non-anonymous and afraid of being charged with payment fraud?\nIf so, note that big miners do lots of non-anonymous things too, like\nrenting warehouses and importing specialised equipment.\n\nIs it because of the big up front collateral they're meant to have lying\naround? If so, how do you ensure a fluid market for notaries?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/9ac6414a/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-12T14:36:05",
                "message_text_only": "Den 12 feb 2015 14:44 skrev \"Mike Hearn\" <mike at plan99.net>:\n>>\n>> You can prove a doublespend instantly by showing two conflicting\ntransactions both signed by thar party. This pair can be distributed as a\nproof of malice globally in seconds via a push messaging mechanism.\n>\n> There have been lots of e-cash schemes proposed in the academic\nliterature that work like this, or variants of it. Schemes where\nparticipants are anonymous until they double spend are popular.\n>\n> Let's re-write your proposal but substituting the word notary for miner:\n>\n>> To profit, the miner would have to be sure the payout from agreeing on\ncollusion (or to perform the doublespend themselves) would pay out better\nthan acting honestly for a given amount of time info the future. This means\ntransactions for small sums are secure.\n>\n> That's the exact argument we're having. The assertion is that a\n\"rational\" notary would kill his own business to increase his profits in\nthe next few hours. So you're just arguing that a notary is different to a\nminer, without spelling out exactly why.\n>\n> Does the notary have to make a big up front investment? If so, why is\nthat different to mining investment?\n\nMiners are transient. You don't depend on any given subset of them.\nCentralized e-currency give you no choice but to trust one set of notaries.\n\nThe notary don't have any large maintenance costs. The initial investment\nis small, they don't need more than a few servers and maybe a HSM and some\noffice. In the non-collateral version, they're a centralized entity. Note\nthat in the fully centralized model, if the notary goes bad you're screwed.\nYour tokens are useless or maybe gone.\n\nEssentially you can't know if you're up for the long con or not.\n\nAnybody can set up a miner with capital investments. No individual miner\nhas a large impact on the system as a whole.\n\nIn Bitcoin, you aren't dependent on any one multisignature notary. One\ngoing gown only represents a small loss and done temporarily locked funds.\nAnybody can set up a multisignature notary, but people won't trust you\nunless you show you're trustable - you need to market yourself to get to\nthe point where a malicious doublespend can be profitable.\n\nYou can't really replicate the collateralized multisignature notary model\nin centralized systems. Because having the e-currency bank be the notary\nmeans they have the same powers a 51% miner would have - they can block the\ntransaction claiming the collateral, they can censor any other transactions\nat will, and all your funds depend on them and the market's trust in them.\n\n> Is the notary non-anonymous and afraid of being charged with payment\nfraud? If so, note that big miners do lots of non-anonymous things too,\nlike renting warehouses and importing specialised equipment.\n\nAs notaries can be small operations, they can perform the doublespend as\nthey escape across the border.\n\n> Is it because of the big up front collateral they're meant to have lying\naround? If so, how do you ensure a fluid market for notaries?\n\nWith collateralized multisignature notaries, my assumption is that\norganizations that are related to Bitcoin transactions that has sufficient\nsums of unallocated funds would use them for collateral in a scheme like\nthis (almost every large organization in the world have some unallocated\nfunds somewhere).\n\nAs sellers have almost no risk of losing money to them, any notary backed\nby somebody they know and trust would be good enough\n\nAs buyers also have no risk, they'd use them when they want to make quick\npayments.\n\n-----\n\nYou seem to be making a lot of arguments from the status quo. I don't care\nwhat people have been doing, preserving every habit isn't a sacred goal. I\ncare about stable incentives and long term predictability regarding what\nbehavior is safe. Behavior that becomes unsafe if incentives change is bad\nand shouldn't be relied on.\n\nAlso, Bitcoin is the concensus mechanism. As mentioned, trying to provide a\nguarantee for what will end up in the blocks without servers involved is to\nreinvent Bitcoin within Bitcoin. I can go Xzibit on you all day long if you\nlike!  What you consider an attack is irrelevant. You assume a certain\nbehavior is desired without first making sure it is reliable.\n\nDepending on that which isn't guaranteed is baaaad, and breaking other\npeople's assumptions is by itself NOT an attack if there never was a\nguarantee or even as little as an implicit understanding it is safe.\n\nYour also assume people will expect the Bitcoin network to keep zero-conf\nsafe forever and that Bitcoin valuation is tied to that. Given the options\navailable and current state of things, I'm assuming that's wrong.\n\nBesides, zero-conf will never be secure if you don't add external\ncontextual information as a requirement when validating blocks. Otherwise\ndefecting miners will frequently doublespend against you. And adding such\ninformation is messy and probably not secure in itself, as it opens up for\ngaming the system through network level attacks.\n\nAnd your remarks against game theory seems unwarranted.\n\nThe game theorists that are wrong are typically wrong for one of the\nfollowing reasons;\n\n* Their model is wrong. The system, the actors and/or the options available\nare misunderstood.\n* The actors don't understand the avaliable incentives and go for trial and\nerror (the most optimal choices for attack and defense are found at random\nor not at all, and not always adopted until it has stood the test of time).\n* That option is on the to-do list, just wait.\n* There's easier and/or more profitable attacks (a variant of #1 if the\ngame theorist said it is certain to happen).\n\nYou should NOT EVER rely on security-through-opportunity-cost for the\nattacker or assume you can always keep doing what you always did. Once the\nbigger targets are gone, you're next.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/2ad0cc1c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T14:53:08",
                "message_text_only": ">\n> > So you're just arguing that a notary is different to a miner, without\n> spelling out exactly why.\n>\nI'm afraid I still don't understand why you think notaries would build long\nterm businesses but miners wouldn't, in this model.\n\nI think you are saying because notaries have identity, brand awareness and\nbecause they have big up front bonds, that means they will be trustworthy.\n\nWell, sure. It's the same model governments use and is why being a money\ntransmitter in the USA is so difficult: you need to put up large sums of\nmoney as collateral and have your fingerprints taken 48 times. *Then* you\ncan start advertising to get customers!\n\nThe reason mining is such a nice model is it doesn't have these sorts of\nrequirements.\n\n> As notaries can be small operations ..... [snip] ...... (almost every\n> large organization in the world have some unallocated funds somewhere).\n>\nWhich is it? Are notaries small operations or large operations?\n\nI think exploring new consensus models with semi-trusted notaries is\ninteresting, but it's not Bitcoin.\n\n> Depending on that which isn't guaranteed is baaaad, and breaking other\n> people's assumptions is by itself NOT an attack if there never was a\n> guarantee or even as little as an implicit understanding it is safe.\n>\nPlease don't try and apply this logic in the real world :( Rephrased:\n\n\"*That's a nice house. I noticed it's made of wood. I'm going to start\nfires until it burns down, because there is no guarantee your house won't\nburn down in future and it's important you understand that wooden houses\naren't safe. Really I'm just doing you a favour*.\"\n\nDon't get me wrong. I'm all for what *you're* doing - please do continue to\nresearch and explore alternative trust configurations! This is helpful and\nuseful work. Perhaps we will find something that solves the burger problem\nin a way that satisfies everyone.\n\nI'm really not a fan of Peter's approach, which is \"hey let's try and cause\nas many problems as possible to try and prove a point, without having\ncreated any solutions\". Replace-by-fee-scorched-earth doesn't work and\nisn't a solution. Miners can easily cut payment fraudsters in on the stolen\nmoney, and as they'd need to distribute custom double-spending wallets to\nmake the scheme work it'd be very easy to do.\n\n> Your also ssume people will expect the Bitcoin network to keep zero-conf\n> safe forever and that Bitcoin valuation is tied to that. Given the options\n> available and current state of things, I'm assuming that's wrong.\n>\nWhy? You think ability to make payments in a few seconds is some irrelevant\ncuriousity?\n\nLet's put it this way. If BitPay's business model evaporates tomorrow,\nalong with all the merchants they support, do you think that'd have any\neffect on Bitcoin's value? If not, why not?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/7008132d/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-12T15:20:11",
                "message_text_only": "Den 12 feb 2015 15:53 skrev \"Mike Hearn\" <mike at plan99.net>:\n>>\n>> > So you're just arguing that a notary is different to a miner, without\nspelling out exactly why.\n>\n> I'm afraid I still don't understand why you think notaries would build\nlong term businesses but miners wouldn't, in this model.\n>\n> I think you are saying because notaries have identity, brand awareness\nand because they have big up front bonds, that means they will be\ntrustworthy.\n\nMiners aren't contractors, they don't have to care about repeat business.\nIndividual miners don't have enough impact to have a negative impact on\ntheir own capital investment. Zero-conf transactions also aren't that tied\nto the Bitcoin valuation.\n\nMultisignature notaries need to convince people to select them. They want\nto know that even with collateral, their funds won't be temporarily locked\nup and unspendable for days at a time.\n\nWhat services would miners provide here, do you think?\n\n> Well, sure. It's the same model governments use and is why being a money\ntransmitter in the USA is so difficult: you need to put up large sums of\nmoney as collateral and have your fingerprints taken 48 times. Then you can\nstart advertising to get customers!\n\nObviously you need to have collateral to provide collateral. Can't make\ncryptographic verifiable guarantees if you don't have the resources to back\nthem.\n\n> The reason mining is such a nice model is it doesn't have these sorts of\nrequirements.\n\nAnd also can't make these assurances. Any minority miner can be overrun.\n\n>> As notaries can be small operations ..... [snip] ...... (almost every\nlarge organization in the world have some unallocated funds somewhere).\n>\n> Which is it? Are notaries small operations or large operations?\n\nThe operation itself is small. A few people maintaining a few servers.\n\nThe collateral needed depends on how many and how large simultaneous\ntransactions they want to provide assurances for, so they can chose to be a\nsmall player for one niche market or large and global if they have the\nfunds for it.\n\n> I think exploring new consensus models with semi-trusted notaries is\ninteresting, but it's not Bitcoin.\n\nMethods for decentralized consensus that aren't PoW also aren't Bitcoin.\n\n> Please don't try and apply this logic in the real world :( Rephrased:\n>\n> \"That's a nice house. I noticed it's made of wood. I'm going to start\nfires until it burns down, because there is no guarantee your house won't\nburn down in future and it's important you understand that wooden houses\naren't safe. Really I'm just doing you a favour.\"\n\nActually that IS often a bad idea. But fortunately the risk and threat is\nlow, and mitigation is well understood.\n\n> I'm really not a fan of Peter's approach, which is \"hey let's try and\ncause as many problems as possible to try and prove a point, without having\ncreated any solutions\". Replace-by-fee-scorched-earth doesn't work and\nisn't a solution. Miners can easily cut payment fraudsters in on the stolen\nmoney, and as they'd need to distribute custom double-spending wallets to\nmake the scheme work it'd be very easy to do.\n\nSecurity analysis requires having the mindset of an attacker. Sometimes\nthat reveals suboptimal choices. Then you want them changed to more stable\nchoices such that once the incentives change, the risk already is gone.\nMinimization of damage, simply put.\n\n>> Your also ssume people will expect the Bitcoin network to keep zero-conf\nsafe forever and that Bitcoin valuation is tied to that. Given the options\navailable and current state of things, I'm assuming that's wrong.\n>\n> Why? You think ability to make payments in a few seconds is some\nirrelevant curiousity?\n\nNo. But you can't be certain it is secure without having a solid reliable\nmechanism to provide such a guarantee.\n\nYou want zero-conf to stay safe without involvement of servers? Then\nplease, try to find a way to secure it. Right now you're assuming it can\nremain safe based on circumstances which can change and assumptions about\nmarket participant's valuations that likely aren't true.\n\n> Let's put it this way. If BitPay's business model evaporates tomorrow,\nalong with all the merchants they support, do you think that'd have any\neffect on Bitcoin's value? If not, why not?\n\nIt would. They'd tank. But you're assuming too much about the basis for\nvaluation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/437c2f0a/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-12T15:30:47",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 02/12/2015 03:20 PM, Natanael wrote:\n> Multisignature notaries need to convince people to select them.\n> They want to know that even with collateral, their funds won't be\n> temporarily locked up and unspendable for days at a time.\n> \n> What services would miners provide here, do you think?\n> \n>> Well, sure. It's the same model governments use and is why being\n>> a money\n> transmitter in the USA is so difficult: you need to put up large\n> sums of money as collateral and have your fingerprints taken 48\n> times. Then you can start advertising to get customers!\n> \n> Obviously you need to have collateral to provide collateral. Can't\n> make cryptographic verifiable guarantees if you don't have the\n> resources to back them.\n\ntl;dr: Bitcoin users aren't getting very excited about somebody's pet\nhub-and-spoke project, so they decide to distribute a patch that will\nchange Bitcoin's behavior such that people are forced to adopt them.\n\nScorched earth, indeed.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCAAGBQJU3McnAAoJECpf2nDq2eYjxI8P/iClVQKNhGPr0K4D8KktUDUS\nCB8Gu6Rg4VqgjzwhSd1AD1CAhSkxRRgNfHOkxeu2n1wA/fs9V/x66W9G33OyHvf4\n1M+BwkiNszxvfxvZVkXyPa/eqa8/alIs1jEhb19dBRn6sJ6EQyca93PG00wDhhRU\nJbHeYj2pYYMuu+xRpJWhRdUOpJOsLu5E9XMocS12wun7+zQCs4QfoLVcGhMv3+Ug\niS3/H1NNQJegIFMQzgi5hr7CxClZ+MrsLDO7MBEZknjr0toEJXe7c5Logwc3oF8h\nklhFeSnhexCHNeDSGKDhG89hrgWPSDDuuyMRa3e3L4xsT2zAFcsmw0ScCmyNSto4\ngUCy1gQsShDJSvsYvqjJkOcL5UfP2WLQiVJecpblf1R/tgjC0SsBoPeRMT/DeSjV\nxpcjUrAUzkIBuEcunFarkt7wBvL/4pvGnbYcx3uW2YX50oO7LjCcgwJLMW4ecsvn\nzAoc+aXqeORo2SAI3tTJKqpnn5K2k7DVTiFt1vzHVR7OxnKa/+sXk+bCkQi9/dAL\nbWjiBUV8hXBVIt0UBgj7Q5wgQSoAXI0D816GIA2Qb9XQfmpRb8QTmf9kQ1DrcV68\nQt1KOHPY1yCynqLMxN3ONWu4JMF+YYwrxx47Gg7wSJr5q70mHNlLljfnfb5PNLtS\nJ6t2/QfPTMmyN3V6xkbU\n=hna5\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 14416 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/ce7feef2/attachment.bin>"
            },
            {
                "author": "Oleg Andreev",
                "date": "2015-02-12T13:36:52",
                "message_text_only": "> On 12 Feb 2015, at 13:49, Mike Hearn <mike at plan99.net> wrote:\n> If unconfirmed payments become flaky enough that people stop using them, then a portion of the Bitcoin community will find workarounds like trusted third parties, trusted hardware, whatever and will just struggle one. Other people will look at the new tradeoffs/complexity, and decide that Bitcoin is no longer better for them than banks.\n\nHow about a Ripple-like IOU-based payment network that is 100% decentralized, for \"dumb and daily\" payments only? IOUs will propagate from node to node and will trusted because of a \"joint escrow\" transaction between each pair of nodes (locking up certain amount on both ends in 2-of-2 multisig). Total amount of debt from one node to another will be limited to 50% of the locked amount (e.g. if both nodes lock up $20 each, they allow debt up to $10 in each direction). When debt is reaching its limit, it's being \"cleared\" by debtor via a real BTC transaction or simply by \"closing\" the contract transaction with correct proportion on outputs to pay off the debt.\n\nEvery node may require an arbitrary fee for a service of providing his funds to back IOUs, when making a payment, merchant/customer may find several possible \"paths\" and choose the quickest/cheapest one to use. Centralization is possible at a proportional capital expense. If some node wants to be Visa-scale with millions of contracts and a lot of fees to earn, they'll have to lock up huge amount of money. This puts natural limit on centralization or associated risk. \n\nExample:\n\nI pay $10. The following path is discovered and signed off by the Merchant who accepts an ad-hoc 0.3% fee:\n\nMe: $10 -> $9.99 (Alice) -> $9.98 (Bob) -> $9.97 (Merchant).\n\nNow I owe $10 to Alice, Alice owes $9.98 to Bob, Bob owes $9.97 to Merchant. Clearing of debts happens independently between each participant based on their debt-to-capital ratio and whether any party wishes to exit. Of course, if several paths are discovered within a reasonable timeframe, Merchant will choose the cheapest one. And maybe abort transaction if the proposed path is too expensive (e.g. total fee is >1%).\n\nPros:\n\n- Decentralized.\n- Mere seconds to settle a payment.\n- Infinite scalability (no global consensus). Each payment involves 5-7 nodes only.\n- No trusted parties or federation (trust is \"purchased\" using \"joint escrow\" txs on blockchain)\n- No funny currency, IOUs denominated in BTC.\n- No global consensus or protocol. Nodes can be semi-compatible, upgrade independently. All risks are local.\n\nPolitical problems solved:\n\n- No need to debate zeroconf transactions. We don't *need* them anymore to buy a coffee.\n- No need to debate block size limit. It'd still be nice to raise it when needed, but for 99% of transactions we'll have a good decentralized solution off-chain, so the issue is less pressing.\n\nCons:\n\n- Some amount of cash needs to be locked up with random nodes most of the time. If one of the nodes is offline, payments can't be cleared through that node. Although, it could not be a big problem as the network is useful for small-ish payments and every node will have 10-15 contracts, so it will tolerate occasional unavailability of some of them. \n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/4105f17b/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2015-02-12T12:52:59",
                "message_text_only": "> Miners are *not* incentivised to earn the most money in the next block\n> possible. They are incentivised to maximise their return on investment.\n>\n\nThis would be right if you assume that all Bitcoin miners act as a single\nentity. In that case it is true that that entity's goal is to maximize\noverall ROI.\n\nBut each miner makes decisions on his own. Are you familiar with a concept\nof Nash equilibrium, prisoner's dilemma, etc?\n\nThe fact that nobody is using this kind of a behavior right now doesn't\nmean that we can rely on it.\n\nFor example, Peercoin was horribly broken in 6 months after its release\n(e.g. people reported that they are able to generate 50 consecutive blocks\nsimply by bringing a cold wallet online) and yet nobody bothered to exploit\nit, and it managed to acquire non-negligible \"market cap\".\n\nSo we have an empiric evidence that proof-of-stake miners are motivated to\nkeep network secure. So, maybe, we should switch to proof-of-stake, if it\nwas demonstrated that it is secure?\n\nThere are good reasons to not switch to proof-of-stake. Particularly, the\nkind which is used in Peercoin is not game-theoretically sound. So even if\nit works right now, it can fail in a big way once attackers will really get\naround to it. An attack requires significant knowledge, effort and,\npossibly, capital, so it might be only feasible on a certain scale.\n\nSo, well, anyway, suppose Peter Todd is the only person interested in\nmaintaining replace-by-fee patches right now, and you can talk him into\nabandoning them.\nOK, perhaps zero-confirmation payments will be de-facto secure for a couple\nof years. And thus a lot of merchants will rely on zero-confirmation\npayments protected by nothing but a belief in honest miners, as it is damn\nconvenient.\n\nBut, let's say, 5 years from now, some faction of miners who own\nsoon-to-be-obsolete equipment will decide to boost their profits with a\nreplace-by-fee pool and a corresponding wallet. They can market it as \"1 of\n10 hamburgers are free\" if they have 10% of the total hashpower.\n\nSo would you take a responsibility for pushing the approach which isn't\ngame-theoretically sound?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/b4b4de32/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T13:18:44",
                "message_text_only": ">\n> But, let's say, 5 years from now, some faction of miners who own\n> soon-to-be-obsolete equipment will decide to boost their profits with a\n> replace-by-fee pool and a corresponding wallet. They can market it as \"1 of\n> 10 hamburgers are free\" if they have 10% of the total hashpower.\n>\n\nYes, like any P2P network Bitcoin cannot work if a sufficiently large\nnumber of miners decide to attack it. This is an ancient argument. It came\nup the moment Bitcoin was first invented.\n\nBut this argument could have been made at any time in Bitcoin's entire\nhistory. Lots of miners have dropped out due to hardware obsolescence, yet\nmassive double spending hasn't happened. Perhaps the system is not as\nsimple as you boil it down to be.\n\nAnyway, what would happen in that event is within a few days some people\nwould stop selling Bitcoin for hamburgers, others would find workarounds,\nand the fees collected from the double spends would be worth very little.\nNobody wins.\n\nSo would you take a responsibility for pushing the approach which isn't\n> game-theoretically sound?\n>\n\n\"The approach\" is how Bitcoin has always worked.\n\nPeople have been using game theory to predict the imminent demise of\nBitcoin since I first found it. Just one example:   \"Bitcoin will collapse\nwhen the 50->25 BTC drop happens\" was promoted as a dead cert thing by game\ntheorists. Every miner becomes unprofitable and stops at once!\n\nSo far game theory based predictions tend to be proven wrong by reality, so\nthis sort of argument doesn't impress me much.\n\nAnyway, going around this loop again is pointless. I brought up the counter\nargument so people who see this thread don't mistakenly think Peter's\nposition is some kind of de-facto consensus about how Bitcoin should work.\nNot because I love rehashing the same arguments every six months ad nauseum.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/7484a16c/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2015-02-12T13:45:37",
                "message_text_only": "> Yes, like any P2P network Bitcoin cannot work if a sufficiently large\n> number of miners decide to attack it.\n>\n\n1. They won't be attacking Bitcoin, they will attack merchants who accept\npayments with 0 confirmations. This attack has nothing to do with Bitcoin\nconsensus mechanism (as Bitcoin protocol doesn't provide a consensus over\nmempool contents), thus it is not an attack on Bitcoin.\n2. In the example I used, having 10% of hashpower is enough to offer 10%\nsuccess rate. Would you mind having 1 out of 10 hamburgers for free? If a\nsystem can be attacked by a tiny fraction, it is a shitty system.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/a6b9081f/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T13:52:30",
                "message_text_only": ">\n> 1. They won't be attacking Bitcoin, they will attack merchants who accept\n> payments with 0 confirmations.\n>\n\nWhich is basically all of them other than exchanges. Any merchant that uses\nBitPay or Coinbase, for instance, or any physical shop.\n\nIf you want to play word games and redefine \"Bitcoin\" to be something other\nthan what people are actually using, go right ahead. You will win the\nargument under your own definitions which nobody else is using.\n\nIn your scenario I won't be able to get hamburgers for free because people\nwill stop selling them for ordinary bitcoin transactions. Most will say,\nyou know what, just pay me with Visa instead. And a few might knuckle down\nand set up some network of PKI-like trusted third parties that interacts\nwith the block chain in some way.\n\nThough eventually, if that were to happen, cunning merchants will notice\nthat having received a transaction counter-signed by a TTP they don't\nactually have to broadcast it or pay miner fees at all. They can just keep\nit around in their wallet and pass it along to the next guy when they\npurchase something with those coins. Eventually whoever ends up not being\nable to find a matching TTP gets to be the sucker who pays all the miner\nfees at once, because he is the only one who actually needs their services.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/e2f3ae22/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-12T14:04:35",
                "message_text_only": "Mike,\n\nYou can not consider the outcome resulting by replace-by-fee fraudulent, as it could be the world as observed by some.\n\nSome other\u2019s might have seen the replaced transaction, but that only indicates for sure that the signer is fraudulent.\n\nWhat should a node do that really cares of good reputation? Ignore both to be on the safe side?\n\nTamas Blummer\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/9e44ecf1/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/9e44ecf1/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T14:16:32",
                "message_text_only": ">\n> You can not consider the outcome resulting by replace-by-fee fraudulent,\n> as it could be the world as observed by some.\n>\n\nFraudulent in what sense?\n\nIf you mean the legal term, then you'd use the legal \"beyond reasonable\ndoubt\" test. You mined a double spend that ~everyone thinks came 5 minutes\nlater once? OK, that could be a fluke. Reasonable doubt. You do it 500\ntimes in a row? Probably not a fluke.\n\nIf you mean under a technical definition then I think Tom Harding has been\nresearching this topic, though I've only kept half an eye on it. I guess\nit's some statistical approximation of the above, i.e. sufficient to ensure\ngood incentives with only small false positive losses. Sort of like how the\nblock chain algorithm already works w.r.t orphans.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/4a915041/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-12T14:25:09",
                "message_text_only": "On Feb 12, 2015, at 3:16 PM, Mike Hearn <mike at plan99.net> wrote:\n> You can not consider the outcome resulting by replace-by-fee fraudulent, as it could be the world as observed by some.\n> \n> Fraudulent in what sense?\n\nAssume a wallet that sends double spend of the coin spent for services with higher fees to some of its nodes simultaneously.\nMerchants will catch and reject most of the attempts, but that will not stop the scheme in a setup where customer are anonymous and distant.\n\nMiner will see a mixed picture and will struggle to act \u201chonestly\u201d on a statistical measure.\n\nTamas Blummer\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/08996a64/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/08996a64/attachment.sig>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-02-12T23:08:33",
                "message_text_only": "On 2/12/2015 6:25 AM, Tamas Blummer wrote:\n>\n> Miner will see a mixed picture and will struggle to act \u201chonestly\u201d on \n> a statistical measure.\n\nThe statistics come from the aggregate actions of all nodes, especially \nthose miners who watch p2p transactions and assemble blocks.\n\nAny one node makes deterministic decisions based on its own observation \n-- just like today's valid/invalid decision based on whether a blocktime \nis within the next 2 hours or not.\n\nThe idea is that miners will exclude respends because they put the block \nat risk of being forked off, with no offsetting payback.  The design \npoint is to make sure this is sufficiently unlikely to happen \naccidentally, or via some attack vector."
            },
            {
                "author": "Alex Mizrahi",
                "date": "2015-02-12T14:32:26",
                "message_text_only": "> \"The approach\" is how Bitcoin has always worked.\n>\n\nMike, you're making \"it worked before, and thus it will work in future\"\nkind of an argument.\nIt is an extremely shitty kind of an argument. And it can be used to\njustify any kind of bullshit.\nE.g. any scamcoin which haven't yet collapsed will work forever.\n\nAs I mentioned, it depends on scale. Highly sophisticated attacks are only\nfeasible when scale is sufficiently big.\nI.e. when you have millions of dollars transacted each day it is one thing,\nbut if you process billions of dollars, it becomes a whole another matter.\n\nThe best way to profit from zero-confirmation payment disruption is through\nderivatives: short-sell Bitcoin while performing this attack. But this kind\nof an attack depends on a number of conditions:\n\n1. highly liquid and reliable derivative market\n2. sufficiently stable exchange rate\n3. significant attack impact: lots of merchants relying on\nzero-confirmation payments, and lots of customers paying this way\n4. significant amounts of capital available to the attacker\n\nThese conditions are not yet met, and were never met in the Bitcoin's\nhistory so far.\nThis is why I wrote \"5 years from now\", I believe that we might reach those\nconditions around that time.\n\nDirect impact of an attack might actually be low (but even if it is just\n0.1%, 0.1% of 1 billion is 10 million, which isn't bad), but attacker might\nprofit from the panic it causes.\n\nNote that I'm talking about situation where Bitcoin-aware PoS solutions are\ndeployed on a big scale, so cost of upgrade might be huge.\n\nSo anyway, in my opinion, it is actually great that Bitcoin is still\nrelatively small: we have an opportunity to analyze and improve things.\nBut you seem to be hostile to people who do that (and who do not share your\nopinion), which is kinda uncool.\n\nAlso, you do not bother to back your intuition with rigorous reasoning,\nwhile also attacking people who offer alternatives with non-rigorous\nslipper-slope kind of arguments. Which is doubly uncool.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/c39d4998/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T15:15:00",
                "message_text_only": ">\n> So anyway, in my opinion, it is actually great that Bitcoin is still\n> relatively small: we have an opportunity to analyze and improve things.\n> But you seem to be hostile to people who do that (and who do not share\n> your opinion), which is kinda uncool.\n>\n\nTo clarify once more, I'm all for people researching and building ways to\nmake Bitcoin better and safer. And debating that here is cool too.\n\nThe \"replace by fee\" patches don't do this; as you said yourself the whole\nscorched earth thing makes no sense. It's not a solution to anything and\nit's important people realise that.\n\nPerhaps it will help if I spell out why this whole approach won't work (but\ncan easily damage bitcoin a lot along the way).\n\nNormal Bitcoin nodes pick which transaction to put into a block by simply\nselecting whichever they saw arrive first, as determined by the arrival\norder of network packets. This rule is simple and has multiple advantages\nfor people using Bitcoin to buy and sell things.\n\nReplace-by-fee changes this so nodes select whichever chain of unconfirmed\ntransactions pays the highest miner fees. Up until the point that a\ntransaction appears in a block, anyone can broadcast a double spend (or a\nspend of an unconfirmed transaction) which pays higher fees than before,\ncausing that tx chain to become the candidate for chain inclusion.\n\nPeter argues that this is stable and makes unconfirmed transactions safe\nbecause a fraudster can buy something, walk out of the shop, and broadcast\na double spend with a higher fee. But then the merchant can re-spend the\noriginal payment back to themselves with an *even* higher fee than that.\nThen the fraudster can re-spend their double spend with an *even* higher\nfee than that, and so on back and forth, until *all* the money has been\nspent to miner fees. Thus the merchant loses their goods but the fraudster\nhas still \"paid\" in some sense because they don't get the money either.\n\nThis argument makes no sense for two reasons.\n\nThe first is that this setup means miners can steal arbitrary payments if\nthey work together with the sender of the money. The model assumes this\ncollaboration won't happen, but it will. Because no existing wallet has a\n\"double spend this\" button, to make the scheme work the dishonest miners\nmust create and distribute such a wallet that implements the whole\nscorched-earth protocol. At that point it's easy for miners to reward the\npayment fraudster with some of the stolen money the merchant lost, meaning\nit now makes sense for the fraudster to always do this. The situation isn't\nstable at all.\n\nThe second is that it incentivises competitors to engage in payment fraud\nagainst each other. A big rich coffee shop chain that is facing competition\nfrom a small, scrappy newcomer can simply walk into the new shop and buy\nthings, then trigger the \"scorched earth\". Even with no miner\ncollaboration, this means the big company is down the cost of the product\n*but* so is the little company who lost everything. Whoever can outspend\nthe other wins.\n\n\nWe don't really need game theory to tell us that this plan is a bad idea.\nJust imagine trying to explain it to an actual shop keeper. They would\nthink you were crazy. Bitcoin is already a hard enough concept to\nunderstand without throwing into the mix \"anyone can burn the money they\ngave you after walking out of the shop\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/d71e96be/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-12T15:32:37",
                "message_text_only": "Den 12 feb 2015 16:15 skrev \"Mike Hearn\" <mike at plan99.net>:\n>\n> The first is that this setup means miners can steal arbitrary payments if\nthey work together with the sender of the money. The model assumes this\ncollaboration won't happen, but it will. Because no existing wallet has a\n\"double spend this\" button, to make the scheme work the dishonest miners\nmust create and distribute such a wallet that implements the whole\nscorched-earth protocol. At that point it's easy for miners to reward the\npayment fraudster with some of the stolen money the merchant lost, meaning\nit now makes sense for the fraudster to always do this. The situation isn't\nstable at all.\n>\n> The second is that it incentivises competitors to engage in payment fraud\nagainst each other. A big rich coffee shop chain that is facing competition\nfrom a small, scrappy newcomer can simply walk into the new shop and buy\nthings, then trigger the \"scorched earth\". Even with no miner\ncollaboration, this means the big company is down the cost of the product\nbut so is the little company who lost everything. Whoever can outspend the\nother wins.\n>\n> We don't really need game theory to tell us that this plan is a bad idea.\nJust imagine trying to explain it to an actual shop keeper. They would\nthink you were crazy. Bitcoin is already a hard enough concept to\nunderstand without throwing into the mix \"anyone can burn the money they\ngave you after walking out of the shop\".\n\nI see no fundamental difference in outcome from miner collusion in\nscorched-fee (which isn't guaranteed to pay the \"right\" pool!) and miner\ncollusion in knowingly mining a doublespend transaction.\n\nBoth outcomes pay the miner and thief equally when successful. The merchant\nloses in both.\n\nZero-conf needs something else for security. A guarantee it can not be\ndoublespent in the relevant time frame.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/1da9aa24/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-12T15:42:41",
                "message_text_only": ">\n> I see no fundamental difference in outcome from miner collusion in\n> scorched-fee (which isn't guaranteed to pay the \"right\" pool!) and miner\n> collusion in knowingly mining a doublespend transaction.\n>\nWell, they're the same thing. Replace-by-fee *is* miner collusion in\nknowingly mining a double spend, just triggered in a certain way.\n\nRemember that you aren't paying the bad pool, the bad pool is paying you.\nWhichever pool benefits from the scorched earth protocol can simply pick an\naddress out of the transaction it perceived as starting the protocol, and\npay that.\n\n> Zero-conf needs something else for security. A guarantee it can not be\n> doublespent in the relevant time frame.\n>\nI think this is the core point which many of these debates revolve around.\n\nNo payment system provides *guarantees*, though some are stronger than\nothers. All they do is manage risk.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/d546aa2e/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-12T15:54:19",
                "message_text_only": "Den 12 feb 2015 16:42 skrev \"Mike Hearn\" <mike at plan99.net>:\n> Remember that you aren't paying the bad pool, the bad pool is paying you.\nWhichever pool benefits from the scorched earth protocol can simply pick an\naddress out of the transaction it perceived as starting the protocol, and\npay that.\n\nMy counterargument: with zero-conf but no replace-by-fee scorched earth,\nthere would instead be a market which thieves use where pools would offer\nto execute doublespends that pay the thief and the pool, and where the\npools would set what terms and payouts they ask for.\n\nAll bidding pools with acceptable terms get a doublespend transaction that\npays that specific pool and the thief, the first to mine theirs win (and\nthe merchant loses).\n\nYour protocol requires less setup, but that's the only notable difference\n(besides risk of paying non-participating pools with scorched earth).\n\nNo notable difference in security for merchants.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/e4e44b31/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-02-12T16:57:35",
                "message_text_only": "On Thu, Feb 12, 2015 at 3:15 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Peter argues that this is stable and makes unconfirmed transactions safe\n>> because a fraudster can buy something, walk out of the shop, and broadcast\n>> a double spend with a higher fee. But then the merchant can re-spend the\n>> original payment back to themselves with an *even* higher fee than that.\n>> Then the fraudster can re-spend their double spend with an *even* higher\n>> fee than that, and so on back and forth, until *all* the money has been\n>> spent to miner fees. Thus the merchant loses their goods but the fraudster\n>> has still \"paid\" in some sense because they don't get the money either.\n>>\n>\n> This argument makes no sense for two reasons.\n>\n> The first is that this setup means miners can steal arbitrary payments if\n> they work together with the sender of the money. The model assumes this\n> collaboration won't happen, but it will. Because no existing wallet has a\n> \"double spend this\" button, to make the scheme work the dishonest miners\n> must create and distribute such a wallet that implements the whole\n> scorched-earth protocol. At that point it's easy for miners to reward the\n> payment fraudster with some of the stolen money the merchant lost, meaning\n> it now makes sense for the fraudster to always do this. The situation isn't\n> stable at all.\n>\n> The second is that it incentivises competitors to engage in payment fraud\n> against each other. A big rich coffee shop chain that is facing competition\n> from a small, scrappy newcomer can simply walk into the new shop and buy\n> things, then trigger the \"scorched earth\". Even with no miner\n> collaboration, this means the big company is down the cost of the product\n> *but* so is the little company who lost everything. Whoever can outspend\n> the other wins.\n>\n\nI think that is a misdirection on your part. The point of replace-by-fee is\nto make 0-confirms reliably unreliable. Currently people can \"get away\"\nwith 0-confirms but it's only because most people arent actively double\nspending, and when they do it is for higher value targets. Double spend\nattacks *are* happening a lot more frequently than is being admitted here,\naccording to Peter from work with various clients.\n\nLike single address reuse, people have gotten used to something which is\nbad. Generally accepting 0-conf is also a bad idea(tm) and instant\nconfirmation solutions should be sought elsewhere. There are already\ninteresting solutions and concepts: greenaddress for example, and\nCHECKLOCKTIMEVERIFY micropayment channels for example. Rather than\nsupporting and promoting risky 0-confirms, we need to spend time on better\nalternative solutions that will work for everyone and not during the\nhoneymoon phase where attackers are fewer.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/13ef9edc/attachment.html>"
            },
            {
                "author": "Oleg Andreev",
                "date": "2015-02-12T17:24:40",
                "message_text_only": "> I think that is a misdirection on your part. The point of replace-by-fee is to make 0-confirms reliably unreliable. Currently people can \"get away\" with 0-confirms but it's only because most people arent actively double spending, and when they do it is for higher value targets. Double spend attacks are happening a lot more frequently than is being admitted here, according to Peter from work with various clients. \n> \n> Like single address reuse, people have gotten used to something which is bad. Generally accepting 0-conf is also a bad idea(tm) and instant confirmation solutions should be sought elsewhere. There are already interesting solutions and concepts: greenaddress for example, and CHECKLOCKTIMEVERIFY micropayment channels for example. Rather than supporting and promoting risky 0-confirms, we need to spend time on better alternative solutions that will work for everyone and not during the honeymoon phase where attackers are fewer.\n\nHere's value-free assessment of the issue here:\n\n1. Zero-conf txs are unsafe.\n2. We'd all want to have a safer instant payments solution if possible.\n3. As a social artifact, today zeroconf txs happen to work for some people in some situations.\n4. Replace-by-fee will break #3 and probably hasten development of #2.\n\nThe discussion boils down to whether we should make #2 happen sooner by breaking remnants of #3 sooner.\n\nI personally would rather not break anything, but work as fast as possible on #2 so no matter when and how #3 becomes utterly broken, we have a better solution. This implies that I also don't want to waste time debating with Peter Todd and others. I want to be ready with a working tool when zeroconf completely fails (with that patch or for some other reasons).\n\nTL;DR: those who are against the patch are better off building a decentralized clearing network rather than wasting time on debates. When we have such network, we might all want this patch to be used for all the reasons Peter has already outlined.\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/6fddaefd/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-12T18:11:48",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 02/12/2015 05:24 PM, Oleg Andreev wrote:\n> \n>> I think that is a misdirection on your part. The point of\n>> replace-by-fee is to make 0-confirms reliably unreliable.\n>> Currently people can \"get away\" with 0-confirms but it's only\n>> because most people arent actively double spending, and when they\n>> do it is for higher value targets. Double spend attacks are\n>> happening a lot more frequently than is being admitted here,\n>> according to Peter from work with various clients.\n>> \n>> Like single address reuse, people have gotten used to something\n>> which is bad. Generally accepting 0-conf is also a bad idea(tm)\n>> and instant confirmation solutions should be sought elsewhere.\n>> There are already interesting solutions and concepts:\n>> greenaddress for example, and CHECKLOCKTIMEVERIFY micropayment\n>> channels for example. Rather than supporting and promoting risky\n>> 0-confirms, we need to spend time on better alternative solutions\n>> that will work for everyone and not during the honeymoon phase\n>> where attackers are fewer.\n> \n> Here's value-free assessment of the issue here:\n> \n> 1. Zero-conf txs are unsafe. 2. We'd all want to have a safer\n> instant payments solution if possible. 3. As a social artifact,\n> today zeroconf txs happen to work for some people in some\n> situations. 4. Replace-by-fee will break #3 and probably hasten\n> development of #2.\n> \n> The discussion boils down to whether we should make #2 happen\n> sooner by breaking remnants of #3 sooner.\n> \n> I personally would rather not break anything, but work as fast as\n> possible on #2 so no matter when and how #3 becomes utterly broken,\n> we have a better solution. This implies that I also don't want to\n> waste time debating with Peter Todd and others. I want to be ready\n> with a working tool when zeroconf completely fails (with that patch\n> or for some other reasons).\n> \n> TL;DR: those who are against the patch are better off building a\n> decentralized clearing network rather than wasting time on debates.\n> When we have such network, we might all want this patch to be used\n> for all the reasons Peter has already outlined.\n\nYou've left out of the discussion that many (or all) proposed\nsolutions for 2 either reduce privacy, or security, or both.\n\nThat fact should not be ignored or swept under the rug.\n\nThere's also no mention of the degree to which child-pays-for-parent\nachieves the stated aims of the original proposal (clearing mempool of\nstuck transactions, increasing payee assurance of conformation)\nwithout introducing incentives to double spend or forcing people into\nprivacy/security sacrifices.\n\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCAAGBQJU3OzkAAoJECpf2nDq2eYjDM8P/1a4bNa5s0ryMZHBxyhGcVk5\n6hTSPpUF2/Y81JaC/EqzH8MMKqnPVcLxoikKoO5tIUxeo5bwC5OO8YyGk4NrpeCM\nHTmROR+4XFOULi1dsUs5LP5oBQ+sPu1uNOZKn2fPCgtkO0xj8/w3mCdlVlf7g+v4\nbYt6rSmSCzyCY0qFQVYvyBoYeSVt6icdz45D54BvyNsEtlT+HvbNdG/SznT7QsLF\n2rOZezp5zbIyhbhaV5KtCKwYzATFYr0nWFHVnBkYWcOY3mJdPg6zODUO5ocbGs45\nRHEB8KMsKtrD+gnCwCoSb+J6TNlA8y//ilKemPb+gRSVVM1JJpHBwv7fc8jUu2Ap\nV9YNKOVOrmoGb5X2sCctAZ6474p8HCUgZh50OluQph01tGtq3uC1djJUvnVCP232\nFQD47AU2LhU3wPjWSGEDIGtpeAk91+6huRCzv600xnIISd5KpryKpD6qWC3M4MGs\nG4omAZhHjW5/E8CO/CH21nbPA2P1wozrGE5N8UTc2kwias/4Vn+v3IedjnSiS+IF\nn37MzlyCVs9qXyT7WylT4UAnc9exxHwGXKrvcCUaIAw7FOFEHjiHYLjZFIrVWmpM\n7qxjMD/yM3kDmd/+YxCbITAERsHh04k4PITLVbnOyXY+axi+Xuow9v5HvwqERvt8\nXjbkwrkFIuKfUJyfIuR+\n=ony0\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 14416 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/d4df7cc6/attachment.bin>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2015-02-12T18:37:32",
                "message_text_only": "You cannot close Pandora's box.  Whether or not this type of patch should\nexist is irrelevant.  It does, and there are incentives to use it by\nminers.  These are the bounds we have to deal with and the world we must\nadapt to.\n\nOn Thu, Feb 12, 2015 at 12:11 PM, Justus Ranvier <justusranvier at riseup.net>\nwrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On 02/12/2015 05:24 PM, Oleg Andreev wrote:\n> >\n> >> I think that is a misdirection on your part. The point of\n> >> replace-by-fee is to make 0-confirms reliably unreliable.\n> >> Currently people can \"get away\" with 0-confirms but it's only\n> >> because most people arent actively double spending, and when they\n> >> do it is for higher value targets. Double spend attacks are\n> >> happening a lot more frequently than is being admitted here,\n> >> according to Peter from work with various clients.\n> >>\n> >> Like single address reuse, people have gotten used to something\n> >> which is bad. Generally accepting 0-conf is also a bad idea(tm)\n> >> and instant confirmation solutions should be sought elsewhere.\n> >> There are already interesting solutions and concepts:\n> >> greenaddress for example, and CHECKLOCKTIMEVERIFY micropayment\n> >> channels for example. Rather than supporting and promoting risky\n> >> 0-confirms, we need to spend time on better alternative solutions\n> >> that will work for everyone and not during the honeymoon phase\n> >> where attackers are fewer.\n> >\n> > Here's value-free assessment of the issue here:\n> >\n> > 1. Zero-conf txs are unsafe. 2. We'd all want to have a safer\n> > instant payments solution if possible. 3. As a social artifact,\n> > today zeroconf txs happen to work for some people in some\n> > situations. 4. Replace-by-fee will break #3 and probably hasten\n> > development of #2.\n> >\n> > The discussion boils down to whether we should make #2 happen\n> > sooner by breaking remnants of #3 sooner.\n> >\n> > I personally would rather not break anything, but work as fast as\n> > possible on #2 so no matter when and how #3 becomes utterly broken,\n> > we have a better solution. This implies that I also don't want to\n> > waste time debating with Peter Todd and others. I want to be ready\n> > with a working tool when zeroconf completely fails (with that patch\n> > or for some other reasons).\n> >\n> > TL;DR: those who are against the patch are better off building a\n> > decentralized clearing network rather than wasting time on debates.\n> > When we have such network, we might all want this patch to be used\n> > for all the reasons Peter has already outlined.\n>\n> You've left out of the discussion that many (or all) proposed\n> solutions for 2 either reduce privacy, or security, or both.\n>\n> That fact should not be ignored or swept under the rug.\n>\n> There's also no mention of the degree to which child-pays-for-parent\n> achieves the stated aims of the original proposal (clearing mempool of\n> stuck transactions, increasing payee assurance of conformation)\n> without introducing incentives to double spend or forcing people into\n> privacy/security sacrifices.\n>\n>\n> - --\n> Support online privacy by using email encryption whenever possible.\n> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQIcBAEBCAAGBQJU3OzkAAoJECpf2nDq2eYjDM8P/1a4bNa5s0ryMZHBxyhGcVk5\n> 6hTSPpUF2/Y81JaC/EqzH8MMKqnPVcLxoikKoO5tIUxeo5bwC5OO8YyGk4NrpeCM\n> HTmROR+4XFOULi1dsUs5LP5oBQ+sPu1uNOZKn2fPCgtkO0xj8/w3mCdlVlf7g+v4\n> bYt6rSmSCzyCY0qFQVYvyBoYeSVt6icdz45D54BvyNsEtlT+HvbNdG/SznT7QsLF\n> 2rOZezp5zbIyhbhaV5KtCKwYzATFYr0nWFHVnBkYWcOY3mJdPg6zODUO5ocbGs45\n> RHEB8KMsKtrD+gnCwCoSb+J6TNlA8y//ilKemPb+gRSVVM1JJpHBwv7fc8jUu2Ap\n> V9YNKOVOrmoGb5X2sCctAZ6474p8HCUgZh50OluQph01tGtq3uC1djJUvnVCP232\n> FQD47AU2LhU3wPjWSGEDIGtpeAk91+6huRCzv600xnIISd5KpryKpD6qWC3M4MGs\n> G4omAZhHjW5/E8CO/CH21nbPA2P1wozrGE5N8UTc2kwias/4Vn+v3IedjnSiS+IF\n> n37MzlyCVs9qXyT7WylT4UAnc9exxHwGXKrvcCUaIAw7FOFEHjiHYLjZFIrVWmpM\n> 7qxjMD/yM3kDmd/+YxCbITAERsHh04k4PITLVbnOyXY+axi+Xuow9v5HvwqERvt8\n> XjbkwrkFIuKfUJyfIuR+\n> =ony0\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/ef23fede/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2015-02-12T19:15:01",
                "message_text_only": "I'll add fuel to the fire here, and express that I believe that\nreplace-by-fee is good in the long-term.  Peter is not breaking the\nzero-conf, it was already broken, and not admitting it creates a false\nsense of security.  I don't want to see systems that are built on the\nassumption that zero-conf tx are safe solely because it has always\nappeared safe.  You can argue about rational miner behaviors all day,\nbut in a decentralized system you have no idea what miners consider\nrational, or speculate about their incentives. \n\nIf there's one thing I learned playing poker (many years ago), was that\nalways assuming your opponent is rational can lose you a lot of money. \nYou made play that, in hindsight, was terrible given what he actually\nhad.  But you assumed no sane or rational person in his position would\nmake such a play so you discounted it in your decision-making process. \nYou're \"right\" that his actions were terrible and irrational, but he\nstill won your money because you discounted his ability to make such a\n\"bad\" play.  Here, you are speculating that an \"opponent\" uses the same\nvalues/motivations/rationality as yourself, and then building systems\nthat depend on that being true.  Even if it \"should\" be true doesn't\nmean that it is true and will remain that way.  And you will get burned\nby it eventually.\n\nThe Bitcoin network achieves something that we didnt' think was possible\n10 years ago:  a totally trustless, decentralized ledger.  The cost?  It\ntakes time for the decentralized network to reach consensus that\ntransactions \"happened\".  That is quite literally the trade-off that we\nmake: you can centralize things by putting a bank in the middle and\ngetting instant confirmation, or you decentralize and let the network\nreach consensus over time without the central authority.   If you want\ninstant confirmations, you're going to need to add centralization\nbecause Bitcoin never offered it.  I support efforts to dispel any such\nmyths as soon as possible and encourage building robust solutions\n(payment channels, insured zero-conf services, etc.).\n\n-Alan\n\n\nOn 02/12/2015 07:37 PM, Allen Piscitello wrote:\n> You cannot close Pandora's box.  Whether or not this type of patch should exist is irrelevant.  It\ndoes, and there are incentives to use it by miners.  These are the\nbounds we have to deal with and the world we must adapt to.\n>\n> On Thu, Feb 12, 2015 at 12:11 PM, Justus Ranvier\n<justusranvier at riseup.net <mailto:justusranvier at riseup.net>> wrote:\n>\n> On 02/12/2015 05:24 PM, Oleg Andreev wrote:\n>\n> >> I think that is a misdirection on your part. The point of\n> >> replace-by-fee is to make 0-confirms reliably unreliable.\n> >> Currently people can \"get away\" with 0-confirms but it's only\n> >> because most people arent actively double spending, and when they\n> >> do it is for higher value targets. Double spend attacks are\n> >> happening a lot more frequently than is being admitted here,\n> >> according to Peter from work with various clients.\n> >>\n> >> Like single address reuse, people have gotten used to something\n> >> which is bad. Generally accepting 0-conf is also a bad idea(tm)\n> >> and instant confirmation solutions should be sought elsewhere.\n> >> There are already interesting solutions and concepts:\n> >> greenaddress for example, and CHECKLOCKTIMEVERIFY micropayment\n> >> channels for example. Rather than supporting and promoting risky\n> >> 0-confirms, we need to spend time on better alternative solutions\n> >> that will work for everyone and not during the honeymoon phase\n> >> where attackers are fewer.\n>\n> > Here's value-free assessment of the issue here:\n>\n> > 1. Zero-conf txs are unsafe. 2. We'd all want to have a safer\n> > instant payments solution if possible. 3. As a social artifact,\n> > today zeroconf txs happen to work for some people in some\n> > situations. 4. Replace-by-fee will break #3 and probably hasten\n> > development of #2.\n>\n> > The discussion boils down to whether we should make #2 happen\n> > sooner by breaking remnants of #3 sooner.\n>\n> > I personally would rather not break anything, but work as fast as\n> > possible on #2 so no matter when and how #3 becomes utterly broken,\n> > we have a better solution. This implies that I also don't want to\n> > waste time debating with Peter Todd and others. I want to be ready\n> > with a working tool when zeroconf completely fails (with that patch\n> > or for some other reasons).\n>\n> > TL;DR: those who are against the patch are better off building a\n> > decentralized clearing network rather than wasting time on debates.\n> > When we have such network, we might all want this patch to be used\n> > for all the reasons Peter has already outlined.\n>\n> You've left out of the discussion that many (or all) proposed\n> solutions for 2 either reduce privacy, or security, or both.\n>\n> That fact should not be ignored or swept under the rug.\n>\n> There's also no mention of the degree to which child-pays-for-parent\n> achieves the stated aims of the original proposal (clearing mempool of\n> stuck transactions, increasing payee assurance of conformation)\n> without introducing incentives to double spend or forcing people into\n> privacy/security sacrifices.\n>\n>\n>\n>    \n------------------------------------------------------------------------------\n>     Dive into the World of Parallel Programming. The Go Parallel Website,\n>     sponsored by Intel and developed in partnership with Slashdot\nMedia, is your\n>     hub for all things parallel software development, from weekly thought\n>     leadership blogs to news, videos, case studies, tutorials and\nmore. Take a\n>     look and join the conversation now. http://goparallel.sourceforge.net/\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n<mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n>\n------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media,\nis your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/f851bd85/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-12T19:34:22",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 02/12/2015 07:15 PM, Alan Reiner wrote:\n> I'll add fuel to the fire here, and express that I believe that \n> replace-by-fee is good in the long-term.  Peter is not breaking\n> the zero-conf, it was already broken, and not admitting it creates\n> a false sense of security.  I don't want to see systems that are\n> built on the assumption that zero-conf tx are safe solely because\n> it has always appeared safe.  You can argue about rational miner\n> behaviors all day, but in a decentralized system you have no idea\n> what miners consider rational, or speculate about their incentives.\n> \nAs noted elsewhere in the thread, there are two problems with this\nanalysis:\n\n1. It asserts that zero-confirmation transactions are in a binary\nstate of safe/broken instead of recognizing that relying on them is a\nnon-binary risk analysis on the part of a merchant.\n\n2. Assumptions about what is profitable for miners are based on all\nminers having short time horizons for calculating profits.\n\nIn addition, I'll add that there is an assumption that honest actors\ncan not alter their behavior in response to changing conditions.\n\nSince scorched-earth solutions to problems are apparently acceptable\nnow, what would stop more honest node operators from patching their\nnodes to blacklist any peer that relays replace-by-fee transactions,\nand maybe even publish an IP address list of those peers?\n\nPunishing Bitcoin users for not adopting somebody's pet solution to a\nproblem neither responsible nor ethical.\n\nChild-pays-for-parent allows for stuck transactions to be cleared from\nthe mempool, and allows recipients of zero-conf transactions to adjust\ntheir risk exposure as much or as little as they like.\n\nIt's a solution that gives Bitcoin users more freedom, instead of\ntrying to coerce them into pre-determined directions.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCAAGBQJU3QA+AAoJECpf2nDq2eYjnagQAJzxQtMMe0ZwAV6UZX+ORrzt\nvWh3bfbaO2/NfGL6dXK2i5rWeLTGIkiqZatwaW8S0M53ExMHaqDmW6db6TeE7aDO\nhZg4x618FWhYdG7DsfDxThd3rRupSGNJoL3L2763tSz+TrX5HptRh+e8gdy1Sq99\nkk1Fyv1jJVBIXBmck19fj0iKOF8rS7n45d4jXO85VF/kfPegslZ7g9lwyH+b/iJ/\nF0dfQmMefjEugpSrHww0Dnb4jjoOHz5tdW/Tv5DDNWDmsj/gYAMYRxZvoSl+AvAt\nP76odgDUwtbMpb+w3skLRLJCcBuTpSlmYVIhp5YlBrpc9ibznxGe+T3BfYoVGKvh\npz/AxsLcNW3Wc0l0zOHdzoOj4lHjQ/WjJGC/dujnYlZozN+7nuU/GTuSR1GpMxg5\nsOM3RuE/Fd+/JII7k7+zMNore44X0p/QVko8OK3kVVPx02Pu1PxRWNHJ2DMY0p7f\nb1nsVU5i/853sUez7SyBz5oaNgCgsz4lDKw++TeXhrD6gkdi0LMVOEUjIGMyTZwd\nj1wfdfdhhPakcDuyl0ybd9SpSgsUmXkU7N2nkpG8MxMdbopqIhACknZZOrXgoJqL\nLtbP1O6v8wvbsdeEH7cXJJhi1IBJK28dv0aBLN6fcqukP23s//Qe+5hhX5nNeUg0\nF9dKdL5zCGofvU/U5BVq\n=kEMr\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 14416 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/3b3f9a5d/attachment.bin>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-12T19:45:17",
                "message_text_only": "On Thu, Feb 12, 2015 at 07:34:22PM +0000, Justus Ranvier wrote:\n> In addition, I'll add that there is an assumption that honest actors\n> can not alter their behavior in response to changing conditions.\n> \n> Since scorched-earth solutions to problems are apparently acceptable\n> now, what would stop more honest node operators from patching their\n> nodes to blacklist any peer that relays replace-by-fee transactions,\n> and maybe even publish an IP address list of those peers?\n\nNone of those solutions are compatible with decentralized networks for a\nlot of reasons. Given the inability to prevent sybil attacks your\nsuggestions lead to people being unfairly punished for poor connectivity\nthat may be entirely out of their control. They also make maintaining a\nBitcoin node and mining the blockchain require a significant amount of\nhands on maintenance, again incompatible with a decentralized system.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000a1fb2fd17f5d8735a8a0e7aae841c95a12e82b934c4ac92\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/6d8fef9d/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-12T19:49:16",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 02/12/2015 07:45 PM, Peter Todd wrote:\n> None of those solutions are compatible with decentralized networks\n> for a lot of reasons. Given the inability to prevent sybil attacks\n> your suggestions lead to people being unfairly punished for poor\n> connectivity that may be entirely out of their control. They also\n> make maintaining a Bitcoin node and mining the blockchain require a\n> significant amount of hands on maintenance, again incompatible with\n> a decentralized system.\n\nSo maybe scorched-earth solutions aren't a good idea after all.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCAAGBQJU3QO8AAoJECpf2nDq2eYj4bUP/R8Lwjpdvc8Wu573+cGVRI88\n/J8fURgYTxS9yvNNGRRHDYkHiqAcGI4sHIQQkqGs+A6mdDTbq6bJ04RjHoznlYbj\nTcpaKQkEynVSD5AjMnZ7Z/zLsc+qjFChNGNgxC3k4AW5UdBgo3VTE8HR1rVXM5C3\nJLCSKv8uCRkHJxRlXZwE9/sZTZAAuLFVdTQb6sfi4Kb4Ztn8P2K2IsEnOlFwv1cZ\nZNByxa56iBbNrVQa7hbbNXauIGOkj0fM3MB75JUQK/dHnW5d19bNHRIG0vnTtczH\neoVvEdMtpSF/e7S6Kzx5xfcmCQsBRX7JIHyuZpBYAgr1HxjXOrdvqgWQCWDSUtNO\nybzYwNKUbSCgbp6tbVTQuskm0QKVRcrrqMPZepPcgjQ/FLB8EALqarROkJTop/3p\n8YatD3iq77SdnOfmFMZCFGHzn4UaxturRdEYIfeqz2Ia0YyyH3GWs1juhazyH+CM\nu6HbXXrq6AJmKWLYbSK1ycUBo9OhFObT9X3XswsWa0uNtSwLveqlvaI77UHkJbnr\nU9Ek9V0WznV1H9hn6qJpKyS/d+M64dfGjBSo79b50IxvlKrHKBPZkdHfSUyjnMFW\nrl9uE0jB6oLFUcqchypJ89HUeso7fD/8l36w0Z4TkMrcAy9V0RIj6P5nBYBU1U1s\ncLblEvdmUqmt4t+D1o4K\n=YnGT\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 14416 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/f016c8f4/attachment.bin>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2015-02-12T19:47:12",
                "message_text_only": "Nothing will stop that.  Bitcoin needs to deal with those issues, not stick\nour heads in the sand and pretend they don't exist out of benevolence.\nThis isn't a pet solution, but the rules of the protocol and what is\nrealistically possible given the nature of distributed consensus.  Relying\non altruism is a recipe for failure.\n\nOn Thu, Feb 12, 2015 at 1:34 PM, Justus Ranvier <justusranvier at riseup.net>\nwrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On 02/12/2015 07:15 PM, Alan Reiner wrote:\n> > I'll add fuel to the fire here, and express that I believe that\n> > replace-by-fee is good in the long-term.  Peter is not breaking\n> > the zero-conf, it was already broken, and not admitting it creates\n> > a false sense of security.  I don't want to see systems that are\n> > built on the assumption that zero-conf tx are safe solely because\n> > it has always appeared safe.  You can argue about rational miner\n> > behaviors all day, but in a decentralized system you have no idea\n> > what miners consider rational, or speculate about their incentives.\n> >\n> As noted elsewhere in the thread, there are two problems with this\n> analysis:\n>\n> 1. It asserts that zero-confirmation transactions are in a binary\n> state of safe/broken instead of recognizing that relying on them is a\n> non-binary risk analysis on the part of a merchant.\n>\n> 2. Assumptions about what is profitable for miners are based on all\n> miners having short time horizons for calculating profits.\n>\n> In addition, I'll add that there is an assumption that honest actors\n> can not alter their behavior in response to changing conditions.\n>\n> Since scorched-earth solutions to problems are apparently acceptable\n> now, what would stop more honest node operators from patching their\n> nodes to blacklist any peer that relays replace-by-fee transactions,\n> and maybe even publish an IP address list of those peers?\n>\n> Punishing Bitcoin users for not adopting somebody's pet solution to a\n> problem neither responsible nor ethical.\n>\n> Child-pays-for-parent allows for stuck transactions to be cleared from\n> the mempool, and allows recipients of zero-conf transactions to adjust\n> their risk exposure as much or as little as they like.\n>\n> It's a solution that gives Bitcoin users more freedom, instead of\n> trying to coerce them into pre-determined directions.\n>\n> - --\n> Support online privacy by using email encryption whenever possible.\n> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQIcBAEBCAAGBQJU3QA+AAoJECpf2nDq2eYjnagQAJzxQtMMe0ZwAV6UZX+ORrzt\n> vWh3bfbaO2/NfGL6dXK2i5rWeLTGIkiqZatwaW8S0M53ExMHaqDmW6db6TeE7aDO\n> hZg4x618FWhYdG7DsfDxThd3rRupSGNJoL3L2763tSz+TrX5HptRh+e8gdy1Sq99\n> kk1Fyv1jJVBIXBmck19fj0iKOF8rS7n45d4jXO85VF/kfPegslZ7g9lwyH+b/iJ/\n> F0dfQmMefjEugpSrHww0Dnb4jjoOHz5tdW/Tv5DDNWDmsj/gYAMYRxZvoSl+AvAt\n> P76odgDUwtbMpb+w3skLRLJCcBuTpSlmYVIhp5YlBrpc9ibznxGe+T3BfYoVGKvh\n> pz/AxsLcNW3Wc0l0zOHdzoOj4lHjQ/WjJGC/dujnYlZozN+7nuU/GTuSR1GpMxg5\n> sOM3RuE/Fd+/JII7k7+zMNore44X0p/QVko8OK3kVVPx02Pu1PxRWNHJ2DMY0p7f\n> b1nsVU5i/853sUez7SyBz5oaNgCgsz4lDKw++TeXhrD6gkdi0LMVOEUjIGMyTZwd\n> j1wfdfdhhPakcDuyl0ybd9SpSgsUmXkU7N2nkpG8MxMdbopqIhACknZZOrXgoJqL\n> LtbP1O6v8wvbsdeEH7cXJJhi1IBJK28dv0aBLN6fcqukP23s//Qe+5hhX5nNeUg0\n> F9dKdL5zCGofvU/U5BVq\n> =kEMr\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/62c08a8e/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-12T19:52:11",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 02/12/2015 07:47 PM, Allen Piscitello wrote:\n> Nothing will stop that.  Bitcoin needs to deal with those issues,\n> not stick our heads in the sand and pretend they don't exist out of\n> benevolence. This isn't a pet solution, but the rules of the\n> protocol and what is realistically possible given the nature of\n> distributed consensus.  Relying on altruism is a recipe for\n> failure.\n\nIf there's a risk of fire burning down wooden buildings, pass out fire\nextinguishers and smoke detectors, not matches.\n\nThe latter makes one an arsonist.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCAAGBQJU3QRrAAoJECpf2nDq2eYjLtwP/3t0uplMwjpt6MP0wrPwOfkJ\ntRRyAaSkEsZi3+XjU2GVThG7kAlP2oIGFnoHc1QldhlEeWEJgPZyn7qq+mPx+I5+\nOKb0PhSwRpTe0lh+r1dGyVqN+sSfbasJ9RSXYPmw1OW9ud4WOsgOh+oBTQWfuhvc\np32Fxxx5JKjc4AnCVajSzNlPlXrBy3pFfL5F1ek4Wu+H0haz39VE/EYAWlXjyWxT\nvhUzv+9bcy3r8pe3eYUAmsXYLZAKb/9hWJdht6SKd509BlV6LVSrUh8Y2SJ3PYKt\nz3l4WmiUXkkdk1blqtLDyfUTEZSnBK8X4esj8Sp53WfOXNkgBKe1vr4EhTXaEQMU\nKD1e5s12xspPYgJdW9TWacIYKp3Ft3yBODJOTNZL3j0ryzYA+KU5ZumdHIm10J3S\nJ1IDQBraONESinHybGPKYtUCikTkl6TemW/CpfjRhQONov4708FIg+KQAo6ui56N\notfDGEwqH1qKgbt5DugdEBtxDmYmcYdFjID2+ZLwK6ngat8UAw2dQoCnUtkZ7w+i\nOxz4cm1vIRjv+BYipQjg4IRRZNvpEXSolz6u91qqj8SlXXdY7sZ3B5HwtGSOVX5y\nl3NxYVOazA/NA/zcCG9ZPjr/O5sKJ40IjcLbTHvE1POuiF167xF2+U2Sdf/43d9d\ncE68utrIaurfJsDA/L/+\n=pTe/\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 14416 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/c63d0ce4/attachment.bin>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-12T20:02:10",
                "message_text_only": "On Thu, Feb 12, 2015 at 8:52 PM, Justus Ranvier\n<justusranvier at riseup.net> wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On 02/12/2015 07:47 PM, Allen Piscitello wrote:\n>> Nothing will stop that.  Bitcoin needs to deal with those issues,\n>> not stick our heads in the sand and pretend they don't exist out of\n>> benevolence. This isn't a pet solution, but the rules of the\n>> protocol and what is realistically possible given the nature of\n>> distributed consensus.  Relying on altruism is a recipe for\n>> failure.\n>\n> If there's a risk of fire burning down wooden buildings, pass out fire\n> extinguishers and smoke detectors, not matches.\n>\n> The latter makes one an arsonist.\n\nControlled fires is a valid tactic when necessary to reduce harm. It\nis frequently used in areas with periods of extreme heat including\nAustralia. By burning off grids, you isolate the majority of flammable\nmatter into \"islands\". An accident fire would cause much more damage.\n\nPlacing yourself in the way of the fire and asking them to find\nanother solution isn't that bright. It is only a matter of time until\na fire starts, controlled or not! If you want another solution, go\nfigure one out yourself!\n\nMore to the point, it is unreasonable to knowingly expose yourself to\nrisk of harm and blame everybody else who isn't making your life\neasier without you having to change anything. If the majority decides\nthat the best option to reduce harm for everybody requires that you\nmove out of the way and find another way to do things, you're better\noff moving.\n\nTelling people it is fine to keep being careless when there's a fire\nhazard is \"the real crime\", because that would cause more harm than\nwhat those who try to get the system changed does."
            },
            {
                "author": "Allen Piscitello",
                "date": "2015-02-12T20:36:38",
                "message_text_only": "You keep making moral judgements.  Reality is, if you live in a world with\narsonists, you need to have a building that won't catch on fire, or has\nfire extinguishers in place.  Do not depend on arsonists ignoring you\nforever as your security model.  Penetration testing to know what\nweaknesses exist, what limitations exist, and what can be improved is\nessential.  Keeping your head in the sand and hoping people choose to do\nthe right thing only ends one way.\n\nOn Thu, Feb 12, 2015 at 1:52 PM, Justus Ranvier <justusranvier at riseup.net>\nwrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On 02/12/2015 07:47 PM, Allen Piscitello wrote:\n> > Nothing will stop that.  Bitcoin needs to deal with those issues,\n> > not stick our heads in the sand and pretend they don't exist out of\n> > benevolence. This isn't a pet solution, but the rules of the\n> > protocol and what is realistically possible given the nature of\n> > distributed consensus.  Relying on altruism is a recipe for\n> > failure.\n>\n> If there's a risk of fire burning down wooden buildings, pass out fire\n> extinguishers and smoke detectors, not matches.\n>\n> The latter makes one an arsonist.\n>\n> - --\n> Support online privacy by using email encryption whenever possible.\n> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQIcBAEBCAAGBQJU3QRrAAoJECpf2nDq2eYjLtwP/3t0uplMwjpt6MP0wrPwOfkJ\n> tRRyAaSkEsZi3+XjU2GVThG7kAlP2oIGFnoHc1QldhlEeWEJgPZyn7qq+mPx+I5+\n> OKb0PhSwRpTe0lh+r1dGyVqN+sSfbasJ9RSXYPmw1OW9ud4WOsgOh+oBTQWfuhvc\n> p32Fxxx5JKjc4AnCVajSzNlPlXrBy3pFfL5F1ek4Wu+H0haz39VE/EYAWlXjyWxT\n> vhUzv+9bcy3r8pe3eYUAmsXYLZAKb/9hWJdht6SKd509BlV6LVSrUh8Y2SJ3PYKt\n> z3l4WmiUXkkdk1blqtLDyfUTEZSnBK8X4esj8Sp53WfOXNkgBKe1vr4EhTXaEQMU\n> KD1e5s12xspPYgJdW9TWacIYKp3Ft3yBODJOTNZL3j0ryzYA+KU5ZumdHIm10J3S\n> J1IDQBraONESinHybGPKYtUCikTkl6TemW/CpfjRhQONov4708FIg+KQAo6ui56N\n> otfDGEwqH1qKgbt5DugdEBtxDmYmcYdFjID2+ZLwK6ngat8UAw2dQoCnUtkZ7w+i\n> Oxz4cm1vIRjv+BYipQjg4IRRZNvpEXSolz6u91qqj8SlXXdY7sZ3B5HwtGSOVX5y\n> l3NxYVOazA/NA/zcCG9ZPjr/O5sKJ40IjcLbTHvE1POuiF167xF2+U2Sdf/43d9d\n> cE68utrIaurfJsDA/L/+\n> =pTe/\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/e021b0de/attachment.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2015-02-14T14:47:18",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nArriving slightly late to the discussion, apologies.\n\nPersonally I wouldn't have written that patch, but I know development of\nhostile patches happens out of sight, and if it can be written, we have\nto presume it will be written eventually. I'd have preferred a patch\nthat only replaced non-final txes, which is the use-case I have for\ntransaction replacement, but that's easy to add back in.\n\nI'm certainly not terribly convinced of the security of vanilla\nzero-confirmation transactions myself, for reasons including but not\nlimited to this case. I also think it's important to understand that\npeople do make irrational decisions, and trusting network security on\neveryone behaving perfectly rationally is not a workable model either.\n\nTLDR; me too\n\nRoss\n\nOn 12/02/15 20:36, Allen Piscitello wrote:\n> You keep making moral judgements.  Reality is, if you live in a world with\n> arsonists, you need to have a building that won't catch on fire, or has\n> fire extinguishers in place.  Do not depend on arsonists ignoring you\n> forever as your security model.  Penetration testing to know what\n> weaknesses exist, what limitations exist, and what can be improved is\n> essential.  Keeping your head in the sand and hoping people choose to do\n> the right thing only ends one way.\n>\n> On Thu, Feb 12, 2015 at 1:52 PM, Justus Ranvier <justusranvier at riseup.net>\n> wrote:\n>\n> On 02/12/2015 07:47 PM, Allen Piscitello wrote:\n> >>> Nothing will stop that.  Bitcoin needs to deal with those issues,\n> >>> not stick our heads in the sand and pretend they don't exist out of\n> >>> benevolence. This isn't a pet solution, but the rules of the\n> >>> protocol and what is realistically possible given the nature of\n> >>> distributed consensus.  Relying on altruism is a recipe for\n> >>> failure.\n>\n> If there's a risk of fire burning down wooden buildings, pass out fire\n> extinguishers and smoke detectors, not matches.\n>\n> The latter makes one an arsonist.\n>\n>>\n>>\n>>\n------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming. The Go Parallel Website,\n>> sponsored by Intel and developed in partnership with Slashdot Media, is\n>> your\n>> hub for all things parallel software development, from weekly thought\n>> leadership blogs to news, videos, case studies, tutorials and more.\nTake a\n>> look and join the conversation now. http://goparallel.sourceforge.net/\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n>\n>\n------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media,\nis your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJU31/yAAoJEJFC5fflM8475YIIAI7nxgxUdkKiMePMqtvPOi25\nU+WCxjvIK0ZRTAV30POC7fKLT2mK0gPusSS7LtNJpPKvpC98VcSD5HWE49K80Yo9\n9+QI7X7xBau1jjLo+27uOex0bJ6JwP1DSMpC12AQbMmi4FnyG+M5FMkr5/OnSxeF\ncd4lT2UF7yTJPRy0+A9LwertL5Sv1yeOJJ9jtWuXgixapmHN+1Zm2VkGnur55V64\nvnonlixlUMwnZNxDVoRhjTWm1P/lmCejvmvTRvcBomUlAEgRQF4TtF4YMBYXS97S\n5WYrxOHLgTfTWr3FJuOnd+CVBRgZGw3u30ktaSErelyMG19lJOusBPdHTQFkV30=\n=eWPj\n-----END PGP SIGNATURE-----\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150214/e1b3a085/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-12T20:06:29",
                "message_text_only": "On Thu, Feb 12, 2015 at 08:15:01PM +0100, Alan Reiner wrote:\n> The Bitcoin network achieves something that we didnt' think was possible\n> 10 years ago:  a totally trustless, decentralized ledger.  The cost?  It\n> takes time for the decentralized network to reach consensus that\n> transactions \"happened\".  That is quite literally the trade-off that we\n> make: you can centralize things by putting a bank in the middle and\n> getting instant confirmation, or you decentralize and let the network\n> reach consensus over time without the central authority.   If you want\n> instant confirmations, you're going to need to add centralization\n> because Bitcoin never offered it.  I support efforts to dispel any such\n> myths as soon as possible and encourage building robust solutions\n> (payment channels, insured zero-conf services, etc.).\n\nSpeaking of, a relatively simple thing that would help dispel these\nnotions would be if some wallets supported replace-by-fee-using\nfee-bumping and an \"attempt undo\" button. Armory is an (unfortunately!)\nspecial case because it uses a full node and has good privacy\nguarantees, but most wallets could implement this by just sending the\ndoublespend transactions to any node advertising either the\nreplace-by-fee or GETUTXO's service bits.\n\n1) https://www.schneier.com/blog/archives/2009/09/the_doghouse_cr.html\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000a1fb2fd17f5d8735a8a0e7aae841c95a12e82b934c4ac92\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/f6f74bbf/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-02-12T19:49:29",
                "message_text_only": "On Thu, Feb 12, 2015 at 1:18 PM, Mike Hearn <mike at plan99.net> wrote:\n> history. Lots of miners have dropped out due to hardware obsolescence, yet\n> massive double spending hasn't happened.\n\nHow many thousands of BTC must be stolen by miners before you'd agree\nthat it has, in fact, happened?\n(https://bitcointalk.org/index.php?topic=321630.0)\n\nOn Thu, Feb 12, 2015 at 3:27 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> The fundamental engineering truths diverge from that misty goal:\n> Bitcoin is a settlement system, by design.\n>\n> The process of consensus \"settles\" upon a timeline of transactions,\n> and this process -- by design -- is necessarily far from instant.\n> Alt-coins that madly attempt 10-second block times etc. are simply a\n> vain attempt to paper over this fundamental design attribute:\n> consensus takes time.\n>\n> As such, the blockchain can never support All The Transactions, even\n> if block size increases beyond 20MB.  Further layers are -- by design\n> -- necessary if we want to achieve the goal of a decentralized payment\n> network capable of supporting full global traffic.\n\nI just wanted to pull this out and say that I agree with this\ncompletely; to the point where I'm continually surprised to see people\nexpressing other views (but they do).\n\nI don't have much opinion about replace-by-fee; It has pluses and\nminuses. In the past I've considered it a \"oh perhaps best to not talk\nabout that\" idea. I think making zero conf actively less secure would\nbe generally regrettable, though it might make building alternatives\nfor fast and acceptably safe transactions more attractive sooner. I do\nfavor a version of replace by fee that adds the extra constraint that\nall prior outputs must be paid equal or more; which would capture many\nof the 'opps paid too little' without opening up the malicious double\nspends quite as much (so soon).\n\nOne challenge is that without rather smart child-pays-for-parent logic\nthe positive argument for replace by fee doesn't really work.\n\nOn Thu, Feb 12, 2015 at 12:52 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n> This would be right if you assume that all Bitcoin miners act as a single\n> entity. In that case it is true that that entity's goal is to maximize\n> overall ROI.\n>\n> But each miner makes decisions on his own. Are you familiar with a concept\n> of Nash equilibrium, prisoner's dilemma, etc?\n>\n> The fact that nobody is using this kind of a behavior right now doesn't mean\n> that we can rely on it.\n>\n> For example, Peercoin was horribly broken in 6 months after its release\n> (e.g. people reported that they are able to generate 50 consecutive blocks\n> simply by bringing a cold wallet online) and yet nobody bothered to exploit\n> it, and it managed to acquire non-negligible \"market cap\".\n\nAs a point for historical accuracy: PPC was actively attacked with\nstake grinding and had to use developer signed blocks to prevent the\nattacker from mining all the blocks and then later made a hard fork to\nmake it harder, and retains the developer block signing to stop it.\n\nThis doesn't contradict your point, which I agree with: an absence of\nattacks doesn't mean an absence of vulnerability, and people counting\non things that they wouldn't if they understood them better is\nsomething to avoid. And the prior point about game theory is one I\nthink some people have a hard time with: partipants are looking out\nfor their own interests, not some global optimum.  It may not be the\ncase that everyone (or even anyone) is maximally short sighted; but\nit's even more unreasonable to assume that no one will ever break rank\nand do something selfish.\n\nI don't know that RBF even needs to be debated on these terms, since\nthere is an argument for RBF as good even if we assume miners are all\nfully protocol conforming."
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-12T20:18:05",
                "message_text_only": "On Thu, Feb 12, 2015 at 07:49:29PM +0000, Gregory Maxwell wrote:\n> One challenge is that without rather smart child-pays-for-parent logic\n> the positive argument for replace by fee doesn't really work.\n\nThat's actually incorrect now, as a mechanism for implementing\nscorched-earth without child-pays-for-parent using SIGHASH_ANYONECANPAY\nis available:\n\nhttp://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg05211.html\n\nI greatly prefer this mechanism as it's an opt-in mechanism - many\nwallets double-spend on occasion by accident - and can have the\nincentives be adjusted to suit the % of hashing power that actual\nsupports replace-by-fee. (and the % probability you'll see the\ndoublespend)\n\nMy patch implements 90% of the logic required for the above to work,\nhowever I've intentionally limited the total depth of recursion when the\nreplacement is being evaluated as an interm anti-DoS measure in the\nspirit of belt-and-suspenders engineering. This can certainly be\nimproved on, e.g. by limiting total mempool size.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000a16bcc766361414571a5f961698acc46c27bd79c26ac15c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/d0cc7c13/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-13T11:34:56",
                "message_text_only": ">\n> > history. Lots of miners have dropped out due to hardware obsolescence,\n> yet\n> > massive double spending hasn't happened.\n>\n> How many thousands of BTC must be stolen by miners before you'd agree\n> that it has, in fact, happened?\n> (https://bitcointalk.org/index.php?topic=321630.0)\n>\n\nHmm. I think this is a disagreement over the term massive. I was meaning we\ndon't see double spending like we see carding fraud in the traditional\nonline payments world. We can talk about Finney attacks by linking to\nspecific discussions of specific events, because they are very rare, which\nis why merchants generally ignore the possibility. I didn't mean the\nnumeric value of lost coins added up so far.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150213/9189abb3/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-12T12:54:48",
                "message_text_only": "Mike,\n\nPeter\u2019s pull request might be a foot gun, but we are here to find out. One can\u2019t claim Bitcoin core code is there to fork and then be disappointed if some really do it.\n\nI am not sure protecting unconfirmed transactions ranks higher than fostering innovation not to depend on the same. \n\nTamas Blummer\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/5ff083f3/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/5ff083f3/attachment.sig>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2015-02-12T14:42:09",
                "message_text_only": "> Your \"scorched earth\" plan is aptly named, as it's guaranteed to make\n> unconfirmed payments useless.\n>\n\n\"Scorched earth\" makes no sense by itself. However, it can be a part of a\nbigger picture. Imagine an insurance service which will make sure that\nmerchants are compensated for every scorched-earth or double-spend\ntransaction, as long they pay 0.1% premium from their revenue.\n\nMerchants won't really care how it works as long as it does. All they know\nis that they need to use a particular open-source wallet, and they will\nreceive a payment no matter what.\nYou won't need a TTP to process each payment.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/9d43299e/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-02-12T15:27:53",
                "message_text_only": "Repeating past statements, it is acknowledged that Peter's scorched\nearth replace-by-fee proposal is aptly named, and would be widely\nanti-social on the current network.\n\nAt a high level, we can see that this thread is contentious because\nthis covers _what we want bitcoin to be_, and that is an opinion\n(versus engineering fact), and it varies from person to person.\n\nHowever, hope is the denial of reality...instead we should walk\nforward with our eyes open[1].  My interest in bitcoin originates from\nthe science fiction concept of \"credits\"[2], a universal money that\ntranscends national borders and even planets.  That is what I hoped\nbitcoin would be.  \"universal payments\" is both a laudable goal and a\nshopworn bitcoin marketing slogan.\n\nThe fundamental engineering truths diverge from that misty goal:\nBitcoin is a settlement system, by design.\n\nThe process of consensus \"settles\" upon a timeline of transactions,\nand this process -- by design -- is necessarily far from instant.\nAlt-coins that madly attempt 10-second block times etc. are simply a\nvain attempt to paper over this fundamental design attribute:\nconsensus takes time.\n\nAs such, the blockchain can never support All The Transactions, even\nif block size increases beyond 20MB.  Further layers are -- by design\n-- necessary if we want to achieve the goal of a decentralized payment\nnetwork capable of supporting full global traffic.\n\nBitcoin payments are like IP packets -- one way, irreversible.  For\nlarger value transfers this attaches attendent risk of loss -- as\nwe've seen in the field time & again.  The world's citizens en masse\nwill not speak to each other with bitcoin (IP packets), but rather\nwith multiple layers (HTTP/TCP/IP) that enable safe and secure value\ntransfer or added features such as instant transactions.\n\nThis opinion is not a conspiracy to \"put the bankers back in charge\"\n-- it is a simple acknowledgement of bitcoin's design.  The consensus\nsystem settles on a timeline.\n\nBitcoin transactions are, by definition, not instant.\nZero confirmation transactions are, by definition, not secure.\n\nProposals such as Oleg's are _necessary_ to fully build out the\nbitcoin system.  Avoid short-sighted, short-term thinking that views\nthe lowest layer (one-way value xfer) at the most optimal layer at\nwhich free persons will transact freely & instantly across planet\nEarth.\n\nIt is foolish to think the entire world will connect directly to the\nP2P block network and broadcast all the morning coffees to all the\nminers.  That's not how the system works.  It is a settlement layer.\nWe _must_ build decentralized layered solutions on top of bitcoin,\nrather than stuffing everything into bitcoin itself.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] http://www.goodreads.com/quotes/35199-hope-is-the-denial-of-reality-it-is-the-carrot\n[2] http://garzikrants.blogspot.com/2013/06/shadowrun-and-bitcoins-roots.html\n\n\n\n\nOn Thu, Feb 12, 2015 at 6:58 AM, Mike Hearn <mike at plan99.net> wrote:\n> I know you will ignore this as usual, but the entire replace-by-fee folly is\n> based on your fundamental misunderstanding of miner incentives.\n>\n> Miners are not incentivised to earn the most money in the next block\n> possible. They are incentivised to maximise their return on investment.\n> Making Bitcoin much less useful reduces demand for the bitcoins they are\n> mining, reducing coinbase and fee income in future blocks. Quite possibly,\n> to the point where those miners are then making a loss.\n>\n> Your \"scorched earth\" plan is aptly named, as it's guaranteed to make\n> unconfirmed payments useless. If enough miners do it they will simply break\n> Bitcoin to the point where it's no longer an interesting payments system for\n> lots of people. Then miners who have equipment to pay off will be really\n> screwed, not to mention payment processors and all the investors in them.\n>\n> I'm sure you can confuse a few miners into thinking your ideas are a\n> super-duper way to maximise their income, and in the process might\n> facilitate a pile of payment fraud. But they aren't. This one is about as\n> sensible as your \"let's never increase the block size\"  and \"let's kill SPV\n> clients\" crusades - badly thought out and bad for Bitcoin.\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2015-02-15T21:25:12",
                "message_text_only": "On Thu, Feb 12, 2015 at 10:27:53AM -0500, Jeff Garzik wrote:\n> Repeating past statements, it is acknowledged that Peter's scorched\n> earth replace-by-fee proposal is aptly named, and would be widely\n> anti-social on the current network.\n>\n> At a high level, we can see that this thread is contentious because\n> this covers _what we want bitcoin to be_, and that is an opinion\n> (versus engineering fact), and it varies from person to person.\n\nI find Peter's proposal relatively mild. I'd prefer that instead of\nexchanges going bankrupt, that there be direct blockchain support\nfor key revocation and 'burning' stolen coins, and an economic \necosystem that supports insurance underwriters that pay out when\nsomeone inevitably gets hacked. This would definitely be 'scorched\nearth' at one level, but I think would make for a far more\ntransparent and friendly system.\n\n> However, hope is the denial of reality...instead we should walk\n> forward with our eyes open[1].  My interest in bitcoin originates from\n> the science fiction concept of \"credits\"[2], a universal money that\n> transcends national borders and even planets.  That is what I hoped\n> bitcoin would be.  \"universal payments\" is both a laudable goal and a\n> shopworn bitcoin marketing slogan.\n>\n> The fundamental engineering truths diverge from that misty goal:\n> Bitcoin is a settlement system, by design.\n\nMost money/payment systems include some method to reverse or undo\npayments made in error. In these systems, the longer settlement times\nyou mention below are a feature, not a bug, and give more time for \na human to react to errors and system failures.\n\n> The process of consensus \"settles\" upon a timeline of transactions,\n> and this process -- by design -- is necessarily far from instant.\n> Alt-coins that madly attempt 10-second block times etc. are simply a\n> vain attempt to paper over this fundamental design attribute:\n> consensus takes time.\n> \n> As such, the blockchain can never support All The Transactions, even\n> if block size increases beyond 20MB.  Further layers are -- by design\n> -- necessary if we want to achieve the goal of a decentralized payment\n> network capable of supporting full global traffic.\n>\n> Bitcoin payments are like IP packets -- one way, irreversible.  For\n> larger value transfers this attaches attendent risk of loss -- as\n> we've seen in the field time & again.  The world's citizens en masse\n> will not speak to each other with bitcoin (IP packets), but rather\n> with multiple layers (HTTP/TCP/IP) that enable safe and secure value\n> transfer or added features such as instant transactions.\n\nI see a world in which we have many blockchains, along with not-quite\nblockchain things like ripple that approximate that vision you have \nof 'credits'. But we cannot have one chain to rule them all, for there\nare inherent engineering trade-offs that one chain can never resolve.\n\nThere appear to be some things we will never come to a consensus on, \nsuch as transaction reversibility, or what the optimal money supply\nalgorithm is. However we might learn a great deal from sharing code\nand ideas. So in that line, see my thoughts on reversibility [3][4]\n\n> This opinion is not a conspiracy to \"put the bankers back in charge\"\n> -- it is a simple acknowledgement of bitcoin's design.  The consensus\n> system settles on a timeline.\n> \n> Bitcoin transactions are, by definition, not instant.\n> Zero confirmation transactions are, by definition, not secure.\n> \n> Proposals such as Oleg's are _necessary_ to fully build out the\n> bitcoin system.  Avoid short-sighted, short-term thinking that views\n> the lowest layer (one-way value xfer) at the most optimal layer at\n> which free persons will transact freely & instantly across planet\n> Earth.\n> \n> It is foolish to think the entire world will connect directly to the\n> P2P block network and broadcast all the morning coffees to all the\n> miners.  That's not how the system works.  It is a settlement layer.\n> We _must_ build decentralized layered solutions on top of bitcoin,\n> rather than stuffing everything into bitcoin itself.\n \nI'll say the same about not stuffing everthing on top of the same \nblockchain. We might very well have coffee shops that take coffecoin.\nBut Bitcoin will never be able to scale out horizontally like altcoins\ncan.\n \n> \n> [1] http://www.goodreads.com/quotes/35199-hope-is-the-denial-of-reality-it-is-the-carrot\n> [2] http://garzikrants.blogspot.com/2013/06/shadowrun-and-bitcoins-roots.html\n[3] https://bitbucket.org/tmagik/catoshi/issue/24\n[4] https://bitbucket.org/tmagik/catoshi/issue/27\n\n \n> \n> On Thu, Feb 12, 2015 at 6:58 AM, Mike Hearn <mike at plan99.net> wrote:\n> > I know you will ignore this as usual, but the entire replace-by-fee folly is\n> > based on your fundamental misunderstanding of miner incentives.\n> >\n> > Miners are not incentivised to earn the most money in the next block\n> > possible. They are incentivised to maximise their return on investment.\n> > Making Bitcoin much less useful reduces demand for the bitcoins they are\n> > mining, reducing coinbase and fee income in future blocks. Quite possibly,\n> > to the point where those miners are then making a loss.\n> >\n> > Your \"scorched earth\" plan is aptly named, as it's guaranteed to make\n> > unconfirmed payments useless. If enough miners do it they will simply break\n> > Bitcoin to the point where it's no longer an interesting payments system for\n> > lots of people. Then miners who have equipment to pay off will be really\n> > screwed, not to mention payment processors and all the investors in them.\n> >\n> > I'm sure you can confuse a few miners into thinking your ideas are a\n> > super-duper way to maximise their income, and in the process might\n> > facilitate a pile of payment fraud. But they aren't. This one is about as\n> > sensible as your \"let's never increase the block size\"  and \"let's kill SPV\n> > clients\" crusades - badly thought out and bad for Bitcoin.\n> >\n> > ------------------------------------------------------------------------------\n> > Dive into the World of Parallel Programming. The Go Parallel Website,\n> > sponsored by Intel and developed in partnership with Slashdot Media, is your\n> > hub for all things parallel software development, from weekly thought\n> > leadership blogs to news, videos, case studies, tutorials and more. Take a\n> > look and join the conversation now. http://goparallel.sourceforge.net/\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Adam Gibson",
                "date": "2015-02-15T21:40:24",
                "message_text_only": "On 02/15/2015 11:25 PM, Troy Benjegerdes wrote:\n> \n> Most money/payment systems include some method to reverse or undo \n> payments made in error. In these systems, the longer settlement\n> times you mention below are a feature, not a bug, and give more\n> time for a human to react to errors and system failures.\n> \n\nSettlement has to be final somewhere. That is the whole point of it.\nTransfer costs in current electronic payment systems are a direct\nconsequence of their non-finality. That's the point Satoshi was making\nin the introduction to the whitepaper: \"With the possibility of\nreversal, the need for trust spreads\".\n\nThere is nothing wrong with having reversible mechanisms built on top\nof Bitcoin, and indeed it makes sense for most activity to happen at\nthose higher layers. It's easy to build things that way, but\nimpossible to build them the other way: you can't build a\nnon-reversible layer on top of a reversible layer."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2015-02-19T08:56:04",
                "message_text_only": "On Sun, Feb 15, 2015 at 11:40:24PM +0200, Adam Gibson wrote:\n> \n> \n> On 02/15/2015 11:25 PM, Troy Benjegerdes wrote:\n> > \n> > Most money/payment systems include some method to reverse or undo \n> > payments made in error. In these systems, the longer settlement\n> > times you mention below are a feature, not a bug, and give more\n> > time for a human to react to errors and system failures.\n> > \n> \n> Settlement has to be final somewhere. That is the whole point of it.\n> Transfer costs in current electronic payment systems are a direct\n> consequence of their non-finality. That's the point Satoshi was making\n> in the introduction to the whitepaper: \"With the possibility of\n> reversal, the need for trust spreads\".\n\nThe problem with that statement is I trust a merchant that I went into\na store and made a payment with personally more than I trust the firmware\non my hard drive [1].\n\nThe attack surface of devices in your computer is huge. A motivated attacker\njust needs to get an intern into a company that makes some kind of component\nor system that's in your computer, cloud server, hardware wallet, or what \nhave you that has firmware capable of reading your private keys.\n\nWith the possibility of mass trojaned hardware, if we are going to trust \nthe system, it must somehow allow reversal through a human-in-the-loop.\n \n> There is nothing wrong with having reversible mechanisms built on top\n> of Bitcoin, and indeed it makes sense for most activity to happen at\n> those higher layers. It's easy to build things that way, but\n> impossible to build them the other way: you can't build a\n> non-reversible layer on top of a reversible layer.\n\nWe built 'reliable' TCP on top of unreliable ethernet networks. My experience\nwith networking was if you tried to guarantee message delivery at the lowest\nlevel, the system got exceedingly complicated, expensive, and brittle.\n\nMost applications, in particular paying someone you already trust, are quite\nhappy running on reversible systems, and in some cases more reliable and \nlower risk. (carrying non-reversible cash is generally considered risky)\n\nThe problem is that if the base currency is assumed to be non-reversible, \nthen it's brittle and becomes 'too big to fail'.\n\nWhere the blockchain improves on everything else is in transparency. If you\nreverse transactions a lot, it will be obvious from an analysis. I would much\nrather deal with a known, predictable, and relatively continous transaction\nreversal rate (percentage) than have to deal with sudden failures where \nsome anonymous bad actor makes off with a fortune.\n\nWe already have zero-conf double-spend transaction reversal, why not explicitly\nextend that a little in a way that senders and receivers have a choice to \nuse it, or not?\n\n\n[1] http://www.reuters.com/article/2015/02/16/us-usa-cyberspying-idUSKBN0LK1QV20150216"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-02-21T19:09:50",
                "message_text_only": "I agree \"scorched hearth\" is a really bad name for the 0 conf protocol\nbased on game theory. I would have preferred \"stag hunt\" since that's\nbasically what it's using (see http://en.wikipedia.org/wiki/Stag_hunt)\nbut I like the protocol and I think it would be interesting to\nintegrate it in the  payment protocol.\nEven if that protocol didn't existed or didn't worked, replace-by-fee\nis purely part of a node's policy, not part of consensus.\n>From the whitepaper, 0 conf transactions being secure by the good will\nof miners was never an assumption, and it is clear to me that the\nsystem cannot provide those guaranties based on such a weak scheme. I\nbelieve thinking otherwise is naive.\nAs to consider non-standard policies \"an attack to bitcoin\" because\n\"that's not how bitcoin used to work\", then I guess minimum relay fee\npolicies can also be considered \"an attack to bitcoin\" on the same\ngrounds.\nLastly, \"first-seen-wins\" was just a simple policy to bootstrap the\nsystem, but I expect that most nodes will eventually move to policies\nthat are economically rational for miners such as replace-by-fee.\nNot only I disagree this will be \"the end of bitcoin\" or \"will push\nthe price of the btc miners are mining down\", I believe it will be\nsomething good for bitcoin.\nSince this is apparently controversial I don't want to push for\nreplace-by-fee to become the new standard policy (something that would\nmake sense to me). But once the policy code is sufficiently modular as\nto support several policies I would like bitcoin core to have a\nCReplaceByFeePolicy alongside CStandardPolicy and a CNullPolicy (no\npolicy checks at all).\nOne step at a time I guess...\n\n\nOn Thu, Feb 19, 2015 at 9:56 AM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> On Sun, Feb 15, 2015 at 11:40:24PM +0200, Adam Gibson wrote:\n>>\n>>\n>> On 02/15/2015 11:25 PM, Troy Benjegerdes wrote:\n>> >\n>> > Most money/payment systems include some method to reverse or undo\n>> > payments made in error. In these systems, the longer settlement\n>> > times you mention below are a feature, not a bug, and give more\n>> > time for a human to react to errors and system failures.\n>> >\n>>\n>> Settlement has to be final somewhere. That is the whole point of it.\n>> Transfer costs in current electronic payment systems are a direct\n>> consequence of their non-finality. That's the point Satoshi was making\n>> in the introduction to the whitepaper: \"With the possibility of\n>> reversal, the need for trust spreads\".\n>\n> The problem with that statement is I trust a merchant that I went into\n> a store and made a payment with personally more than I trust the firmware\n> on my hard drive [1].\n>\n> The attack surface of devices in your computer is huge. A motivated attacker\n> just needs to get an intern into a company that makes some kind of component\n> or system that's in your computer, cloud server, hardware wallet, or what\n> have you that has firmware capable of reading your private keys.\n>\n> With the possibility of mass trojaned hardware, if we are going to trust\n> the system, it must somehow allow reversal through a human-in-the-loop.\n>\n>> There is nothing wrong with having reversible mechanisms built on top\n>> of Bitcoin, and indeed it makes sense for most activity to happen at\n>> those higher layers. It's easy to build things that way, but\n>> impossible to build them the other way: you can't build a\n>> non-reversible layer on top of a reversible layer.\n>\n> We built 'reliable' TCP on top of unreliable ethernet networks. My experience\n> with networking was if you tried to guarantee message delivery at the lowest\n> level, the system got exceedingly complicated, expensive, and brittle.\n>\n> Most applications, in particular paying someone you already trust, are quite\n> happy running on reversible systems, and in some cases more reliable and\n> lower risk. (carrying non-reversible cash is generally considered risky)\n>\n> The problem is that if the base currency is assumed to be non-reversible,\n> then it's brittle and becomes 'too big to fail'.\n>\n> Where the blockchain improves on everything else is in transparency. If you\n> reverse transactions a lot, it will be obvious from an analysis. I would much\n> rather deal with a known, predictable, and relatively continous transaction\n> reversal rate (percentage) than have to deal with sudden failures where\n> some anonymous bad actor makes off with a fortune.\n>\n> We already have zero-conf double-spend transaction reversal, why not explicitly\n> extend that a little in a way that senders and receivers have a choice to\n> use it, or not?\n>\n>\n> [1] http://www.reuters.com/article/2015/02/16/us-usa-cyberspying-idUSKBN0LK1QV20150216\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-02-21T20:30:11",
                "message_text_only": "Thank you Jorge for the contribution of the Stag Hunt terminology. It is\nmuch better than a politically charged \"scorched earth\".\nOn Feb 21, 2015 11:10 AM, \"Jorge Tim\u00f3n\" <jtimon at jtimon.cc> wrote:\n\n> I agree \"scorched hearth\" is a really bad name for the 0 conf protocol\n> based on game theory. I would have preferred \"stag hunt\" since that's\n> basically what it's using (see http://en.wikipedia.org/wiki/Stag_hunt)\n> but I like the protocol and I think it would be interesting to\n> integrate it in the  payment protocol.\n> Even if that protocol didn't existed or didn't worked, replace-by-fee\n> is purely part of a node's policy, not part of consensus.\n> >From the whitepaper, 0 conf transactions being secure by the good will\n> of miners was never an assumption, and it is clear to me that the\n> system cannot provide those guaranties based on such a weak scheme. I\n> believe thinking otherwise is naive.\n> As to consider non-standard policies \"an attack to bitcoin\" because\n> \"that's not how bitcoin used to work\", then I guess minimum relay fee\n> policies can also be considered \"an attack to bitcoin\" on the same\n> grounds.\n> Lastly, \"first-seen-wins\" was just a simple policy to bootstrap the\n> system, but I expect that most nodes will eventually move to policies\n> that are economically rational for miners such as replace-by-fee.\n> Not only I disagree this will be \"the end of bitcoin\" or \"will push\n> the price of the btc miners are mining down\", I believe it will be\n> something good for bitcoin.\n> Since this is apparently controversial I don't want to push for\n> replace-by-fee to become the new standard policy (something that would\n> make sense to me). But once the policy code is sufficiently modular as\n> to support several policies I would like bitcoin core to have a\n> CReplaceByFeePolicy alongside CStandardPolicy and a CNullPolicy (no\n> policy checks at all).\n> One step at a time I guess...\n>\n>\n> On Thu, Feb 19, 2015 at 9:56 AM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> > On Sun, Feb 15, 2015 at 11:40:24PM +0200, Adam Gibson wrote:\n> >>\n> >>\n> >> On 02/15/2015 11:25 PM, Troy Benjegerdes wrote:\n> >> >\n> >> > Most money/payment systems include some method to reverse or undo\n> >> > payments made in error. In these systems, the longer settlement\n> >> > times you mention below are a feature, not a bug, and give more\n> >> > time for a human to react to errors and system failures.\n> >> >\n> >>\n> >> Settlement has to be final somewhere. That is the whole point of it.\n> >> Transfer costs in current electronic payment systems are a direct\n> >> consequence of their non-finality. That's the point Satoshi was making\n> >> in the introduction to the whitepaper: \"With the possibility of\n> >> reversal, the need for trust spreads\".\n> >\n> > The problem with that statement is I trust a merchant that I went into\n> > a store and made a payment with personally more than I trust the firmware\n> > on my hard drive [1].\n> >\n> > The attack surface of devices in your computer is huge. A motivated\n> attacker\n> > just needs to get an intern into a company that makes some kind of\n> component\n> > or system that's in your computer, cloud server, hardware wallet, or what\n> > have you that has firmware capable of reading your private keys.\n> >\n> > With the possibility of mass trojaned hardware, if we are going to trust\n> > the system, it must somehow allow reversal through a human-in-the-loop.\n> >\n> >> There is nothing wrong with having reversible mechanisms built on top\n> >> of Bitcoin, and indeed it makes sense for most activity to happen at\n> >> those higher layers. It's easy to build things that way, but\n> >> impossible to build them the other way: you can't build a\n> >> non-reversible layer on top of a reversible layer.\n> >\n> > We built 'reliable' TCP on top of unreliable ethernet networks. My\n> experience\n> > with networking was if you tried to guarantee message delivery at the\n> lowest\n> > level, the system got exceedingly complicated, expensive, and brittle.\n> >\n> > Most applications, in particular paying someone you already trust, are\n> quite\n> > happy running on reversible systems, and in some cases more reliable and\n> > lower risk. (carrying non-reversible cash is generally considered risky)\n> >\n> > The problem is that if the base currency is assumed to be non-reversible,\n> > then it's brittle and becomes 'too big to fail'.\n> >\n> > Where the blockchain improves on everything else is in transparency. If\n> you\n> > reverse transactions a lot, it will be obvious from an analysis. I would\n> much\n> > rather deal with a known, predictable, and relatively continous\n> transaction\n> > reversal rate (percentage) than have to deal with sudden failures where\n> > some anonymous bad actor makes off with a fortune.\n> >\n> > We already have zero-conf double-spend transaction reversal, why not\n> explicitly\n> > extend that a little in a way that senders and receivers have a choice to\n> > use it, or not?\n> >\n> >\n> > [1]\n> http://www.reuters.com/article/2015/02/16/us-usa-cyberspying-idUSKBN0LK1QV20150216\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> > from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> > with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> > Get technology previously reserved for billion-dollar corporations, FREE\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/0292c749/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-02-21T22:47:28",
                "message_text_only": "\"scorched earth\" refers to the _real world_ impact such policies would\nhave on present-day 0-conf usage within the bitcoin community.\n\nAll payment processors AFAIK process transactions through some scoring\nsystem, then accept 0-conf transactions for payments.\n\nThis isn't some theoretical exercise.  Like it or not many use\ninsecure 0-conf transactions for rapid payments.  Deploying something\nthat makes 0-conf transactions unusable would have a wide, negative\nimpact on present day bitcoin payments, thus \"scorched earth\"\n\nWithout adequate decentralized solutions for instant payments,\ndeploying replace-by-fee widely would simply push instant transactions\neven more into the realm of centralized, walled-garden services.\n\n\n\n\n\n\nOn Sat, Feb 21, 2015 at 3:30 PM, Mark Friedenbach <mark at friedenbach.org> wrote:\n> Thank you Jorge for the contribution of the Stag Hunt terminology. It is\n> much better than a politically charged \"scorched earth\".\n>\n> On Feb 21, 2015 11:10 AM, \"Jorge Tim\u00f3n\" <jtimon at jtimon.cc> wrote:\n>>\n>> I agree \"scorched hearth\" is a really bad name for the 0 conf protocol\n>> based on game theory. I would have preferred \"stag hunt\" since that's\n>> basically what it's using (see http://en.wikipedia.org/wiki/Stag_hunt)\n>> but I like the protocol and I think it would be interesting to\n>> integrate it in the  payment protocol.\n>> Even if that protocol didn't existed or didn't worked, replace-by-fee\n>> is purely part of a node's policy, not part of consensus.\n>> >From the whitepaper, 0 conf transactions being secure by the good will\n>> of miners was never an assumption, and it is clear to me that the\n>> system cannot provide those guaranties based on such a weak scheme. I\n>> believe thinking otherwise is naive.\n>> As to consider non-standard policies \"an attack to bitcoin\" because\n>> \"that's not how bitcoin used to work\", then I guess minimum relay fee\n>> policies can also be considered \"an attack to bitcoin\" on the same\n>> grounds.\n>> Lastly, \"first-seen-wins\" was just a simple policy to bootstrap the\n>> system, but I expect that most nodes will eventually move to policies\n>> that are economically rational for miners such as replace-by-fee.\n>> Not only I disagree this will be \"the end of bitcoin\" or \"will push\n>> the price of the btc miners are mining down\", I believe it will be\n>> something good for bitcoin.\n>> Since this is apparently controversial I don't want to push for\n>> replace-by-fee to become the new standard policy (something that would\n>> make sense to me). But once the policy code is sufficiently modular as\n>> to support several policies I would like bitcoin core to have a\n>> CReplaceByFeePolicy alongside CStandardPolicy and a CNullPolicy (no\n>> policy checks at all).\n>> One step at a time I guess...\n>>\n>>\n>> On Thu, Feb 19, 2015 at 9:56 AM, Troy Benjegerdes <hozer at hozed.org> wrote:\n>> > On Sun, Feb 15, 2015 at 11:40:24PM +0200, Adam Gibson wrote:\n>> >>\n>> >>\n>> >> On 02/15/2015 11:25 PM, Troy Benjegerdes wrote:\n>> >> >\n>> >> > Most money/payment systems include some method to reverse or undo\n>> >> > payments made in error. In these systems, the longer settlement\n>> >> > times you mention below are a feature, not a bug, and give more\n>> >> > time for a human to react to errors and system failures.\n>> >> >\n>> >>\n>> >> Settlement has to be final somewhere. That is the whole point of it.\n>> >> Transfer costs in current electronic payment systems are a direct\n>> >> consequence of their non-finality. That's the point Satoshi was making\n>> >> in the introduction to the whitepaper: \"With the possibility of\n>> >> reversal, the need for trust spreads\".\n>> >\n>> > The problem with that statement is I trust a merchant that I went into\n>> > a store and made a payment with personally more than I trust the\n>> > firmware\n>> > on my hard drive [1].\n>> >\n>> > The attack surface of devices in your computer is huge. A motivated\n>> > attacker\n>> > just needs to get an intern into a company that makes some kind of\n>> > component\n>> > or system that's in your computer, cloud server, hardware wallet, or\n>> > what\n>> > have you that has firmware capable of reading your private keys.\n>> >\n>> > With the possibility of mass trojaned hardware, if we are going to trust\n>> > the system, it must somehow allow reversal through a human-in-the-loop.\n>> >\n>> >> There is nothing wrong with having reversible mechanisms built on top\n>> >> of Bitcoin, and indeed it makes sense for most activity to happen at\n>> >> those higher layers. It's easy to build things that way, but\n>> >> impossible to build them the other way: you can't build a\n>> >> non-reversible layer on top of a reversible layer.\n>> >\n>> > We built 'reliable' TCP on top of unreliable ethernet networks. My\n>> > experience\n>> > with networking was if you tried to guarantee message delivery at the\n>> > lowest\n>> > level, the system got exceedingly complicated, expensive, and brittle.\n>> >\n>> > Most applications, in particular paying someone you already trust, are\n>> > quite\n>> > happy running on reversible systems, and in some cases more reliable and\n>> > lower risk. (carrying non-reversible cash is generally considered risky)\n>> >\n>> > The problem is that if the base currency is assumed to be\n>> > non-reversible,\n>> > then it's brittle and becomes 'too big to fail'.\n>> >\n>> > Where the blockchain improves on everything else is in transparency. If\n>> > you\n>> > reverse transactions a lot, it will be obvious from an analysis. I would\n>> > much\n>> > rather deal with a known, predictable, and relatively continous\n>> > transaction\n>> > reversal rate (percentage) than have to deal with sudden failures where\n>> > some anonymous bad actor makes off with a fortune.\n>> >\n>> > We already have zero-conf double-spend transaction reversal, why not\n>> > explicitly\n>> > extend that a little in a way that senders and receivers have a choice\n>> > to\n>> > use it, or not?\n>> >\n>> >\n>> > [1]\n>> > http://www.reuters.com/article/2015/02/16/us-usa-cyberspying-idUSKBN0LK1QV20150216\n>> >\n>> >\n>> > ------------------------------------------------------------------------------\n>> > Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> > from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> > with Interactivity, Sharing, Native Excel Exports, App Integration &\n>> > more\n>> > Get technology previously reserved for billion-dollar corporations, FREE\n>> >\n>> > http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-22T01:15:02",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 21 February 2015 17:47:28 GMT-05:00, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\"scorched earth\" refers to the _real world_ impact such policies would\n>have on present-day 0-conf usage within the bitcoin community.\n\nI think you guys are reading too much into the name... Replace-by-fee is called \"replace-by-fee\" because it considers whether to replace or not based on fee; the idea came about in an discussion about replacement based on nSequence.\n\nI forget whether it was myself or John Dillon who came up with the name \"scorched earth\", but it just refers to the game theory behind the *specific* idea of the receiver combating a zeroconf double-spend by sending all the funds to fees. Scorched earth as in \"You're trying to defraud me, so I'm not going yo play this game or negotiate, I'm just going to immediately do what is most likely to make you lose the maximum amount of money to punish you for your vandalism.\"\n\n>All payment processors AFAIK process transactions through some scoring\n>system, then accept 0-conf transactions for payments.\n>\n>This isn't some theoretical exercise.  Like it or not many use\n>insecure 0-conf transactions for rapid payments.  Deploying something\n>that makes 0-conf transactions unusable would have a wide, negative\n>impact on present day bitcoin payments, thus \"scorched earth\"\n\nI'm not so convinced, precisely because we've seen zeroconf fail in pretty bad ways; the people most vulnerable to losses have generally changed the way they operate. (e.g. ATM's that no longer rely on zeroconf security, instead waiting for confirmations, installing cameras, etc.)\n\nMy #1 concern right now is person-to-person trading, and people doing that tend to wait for confirmations or otherwise protect themselves. (e.g. reputation systems)\n\n>Without adequate decentralized solutions for instant payments,\n>deploying replace-by-fee widely would simply push instant transactions\n>even more into the realm of centralized, walled-garden services.\n\nAgreed. Deploying it has been something I've made into a long, drawn out, protracted process for precisely that reason. OTOH I sometimes wonder if I've gone too far with that - the services that themselves try to guarantee zeroconf right now through metrics are themselves highly centralised, and there's a big risk of them driving mining centralisation itself when they fail.\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJU6S2N\nAAoJEMCF8hzn9LncrFUH/1xhuPhYJnjTCxhpv2h5ZJOT3wLsrU1oEDmD5fWy/4wG\n7ppr3EiHNX7nB42fgeSGZF8fW1VuBjivJa9ra3IvFysFfaD40Kyre2FTnN03+vTC\nUpa5ykPzOMqZIHkSf8N1xMbz4SXHHPWu8wPMzj/QGvUpllNiOWn/6Vooqrcp7f6Y\nNJFykSq+vDNMOUWCiJG8hhoKiOcZhTH0Aj9qPcGs9WhgsF7wDAX7pg6iO6Y5qmt5\nLdFcut2caL6mIxpExm0F9V+lyeam/3gvAU3eecHY77KOxRxFTO1xfQXEJFTWN92h\n+M9BXQZ1UifjTZWMzK0kp3SRJuVSXg4KOAapQFBLTzU=\n=3Mmw\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-02-22T03:25:32",
                "message_text_only": "On Sat, Feb 21, 2015 at 11:47 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \"scorched earth\" refers to the _real world_ impact such policies would\n> have on present-day 0-conf usage within the bitcoin community.\n\nWhen I posted this: http://sourceforge.net/p/bitcoin/mailman/message/32263765/\nPeter Todd clarified that the concept was referred to as \"scorched earth\"\nhttp://sourceforge.net/p/bitcoin/mailman/message/32264039/\n\nLike I said I don't like the name and would prefer \"stag hunting\"\nwhich is more formal and precise.\nSome people seem to use the same term for \"the potential undesirable\nconsequences of widely deployed replace-by-fee policies\".\nI'm not sure that concept deserves its own term.\n\n> All payment processors AFAIK process transactions through some scoring\n> system, then accept 0-conf transactions for payments.\n>\n> This isn't some theoretical exercise.  Like it or not many use\n> insecure 0-conf transactions for rapid payments.  Deploying something\n> that makes 0-conf transactions unusable would have a wide, negative\n> impact on present day bitcoin payments, thus \"scorched earth\"\n\nAnd maybe by maintaining first seen policies we're harming the system\nin the long term by encouraging people to widely deploy systems based\non extremely weak assumptions."
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-02-22T04:06:18",
                "message_text_only": "On Sat, Feb 21, 2015 at 10:25 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> On Sat, Feb 21, 2015 at 11:47 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>> This isn't some theoretical exercise.  Like it or not many use\n>> insecure 0-conf transactions for rapid payments.  Deploying something\n>> that makes 0-conf transactions unusable would have a wide, negative\n>> impact on present day bitcoin payments, thus \"scorched earth\"\n\n> And maybe by maintaining first seen policies we're harming the system\n> in the long term by encouraging people to widely deploy systems based\n> on extremely weak assumptions.\n\nLacking a coded, reviewed alternative, that's only a platitude.\nWidely used 0-conf payments are where we're at today.  Simply ceasing\nthe \"maintaining [of] first seen policies\" alone is simply not a\nrealistic option.  The negative impact to today's userbase would be\nhuge.\n\nInstant payments need a security upgrade, yes.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-02-22T11:41:26",
                "message_text_only": "It seems to me we're confusing two completely different motivations for\ndouble-spending. One is the ability to replace a fee, the other is the\nability to replace outputs.\n\nIf the double-spend were to merely add or remove inputs (but keep at least\none input in common, of course), it seems fairly safe to assume it's the\nformer, a genuine fee replacement. Even allowing for things like coinjoin,\nnone of the payees would really care either way.\n\nConversely, if at least one of the inputs were kept but none of the outputs\nwere, we can be confident it's the the latter.\n\nIt is possible to build a wallet that always does the former when doing fee\nreplacement by using another transaction to create an output with exactly\nthe additional desired fee.\n\nIf we can clearly distinguish these two cases then the fee replacement case\ncan be handled by relaying both and letting miners pick one or the other\nwhile the output replacement case could be handled by rewarding everything\nto a miner (essentially all outputs are voided...made unredeemable...and\nall inputs are added to coinbase) if the miner includes the two conflicting\ntransactions in the same block.\n\nWouldn't this essentially solve the problem?\n\n- Eric Lombrozo\nOn Feb 21, 2015 8:09 PM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n\n> On Sat, Feb 21, 2015 at 10:25 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> > On Sat, Feb 21, 2015 at 11:47 PM, Jeff Garzik <jgarzik at bitpay.com>\n> wrote:\n> >> This isn't some theoretical exercise.  Like it or not many use\n> >> insecure 0-conf transactions for rapid payments.  Deploying something\n> >> that makes 0-conf transactions unusable would have a wide, negative\n> >> impact on present day bitcoin payments, thus \"scorched earth\"\n>\n> > And maybe by maintaining first seen policies we're harming the system\n> > in the long term by encouraging people to widely deploy systems based\n> > on extremely weak assumptions.\n>\n> Lacking a coded, reviewed alternative, that's only a platitude.\n> Widely used 0-conf payments are where we're at today.  Simply ceasing\n> the \"maintaining [of] first seen policies\" alone is simply not a\n> realistic option.  The negative impact to today's userbase would be\n> huge.\n>\n> Instant payments need a security upgrade, yes.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/0b520b4c/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-02-22T12:06:13",
                "message_text_only": "I should note that my proposal does require a change to the consensus\nrules...but getting bitcoin to scale will require this no matter what.\n\n- Eric Lombrozo\nOn Feb 22, 2015 3:41 AM, \"Eric Lombrozo\" <elombrozo at gmail.com> wrote:\n\n> It seems to me we're confusing two completely different motivations for\n> double-spending. One is the ability to replace a fee, the other is the\n> ability to replace outputs.\n>\n> If the double-spend were to merely add or remove inputs (but keep at least\n> one input in common, of course), it seems fairly safe to assume it's the\n> former, a genuine fee replacement. Even allowing for things like coinjoin,\n> none of the payees would really care either way.\n>\n> Conversely, if at least one of the inputs were kept but none of the\n> outputs were, we can be confident it's the the latter.\n>\n> It is possible to build a wallet that always does the former when doing\n> fee replacement by using another transaction to create an output with\n> exactly the additional desired fee.\n>\n> If we can clearly distinguish these two cases then the fee replacement\n> case can be handled by relaying both and letting miners pick one or the\n> other while the output replacement case could be handled by rewarding\n> everything to a miner (essentially all outputs are voided...made\n> unredeemable...and all inputs are added to coinbase) if the miner includes\n> the two conflicting transactions in the same block.\n>\n> Wouldn't this essentially solve the problem?\n>\n> - Eric Lombrozo\n> On Feb 21, 2015 8:09 PM, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n>\n>> On Sat, Feb 21, 2015 at 10:25 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> > On Sat, Feb 21, 2015 at 11:47 PM, Jeff Garzik <jgarzik at bitpay.com>\n>> wrote:\n>> >> This isn't some theoretical exercise.  Like it or not many use\n>> >> insecure 0-conf transactions for rapid payments.  Deploying something\n>> >> that makes 0-conf transactions unusable would have a wide, negative\n>> >> impact on present day bitcoin payments, thus \"scorched earth\"\n>>\n>> > And maybe by maintaining first seen policies we're harming the system\n>> > in the long term by encouraging people to widely deploy systems based\n>> > on extremely weak assumptions.\n>>\n>> Lacking a coded, reviewed alternative, that's only a platitude.\n>> Widely used 0-conf payments are where we're at today.  Simply ceasing\n>> the \"maintaining [of] first seen policies\" alone is simply not a\n>> realistic option.  The negative impact to today's userbase would be\n>> huge.\n>>\n>> Instant payments need a security upgrade, yes.\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/2f4660b3/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-02-22T13:41:56",
                "message_text_only": "In case it wasn't clear in my earlier post, there's of course a third\npossibility - namely, some outputs are kept but not all. Here, it is\ngenerally impossible to tell whether the motivation was fee replacement,\noutput replacement, or both. My proposal is to always treat these instances\nas output replacement and punish the sender. The sender needs to make it\nunambiguously clear it's only a fee replacement by creating a new\ntransaction that produces an output with the desired extra fee and then\nadding an input that spends it to the original transaction.\n- Eric Lombrozo\n\nOn Sunday, February 22, 2015, Eric Lombrozo <elombrozo at gmail.com> wrote:\n\n> I should note that my proposal does require a change to the consensus\n> rules...but getting bitcoin to scale will require this no matter what.\n>\n> - Eric Lombrozo\n> On Feb 22, 2015 3:41 AM, \"Eric Lombrozo\" <elombrozo at gmail.com\n> <javascript:_e(%7B%7D,'cvml','elombrozo at gmail.com');>> wrote:\n>\n>> It seems to me we're confusing two completely different motivations for\n>> double-spending. One is the ability to replace a fee, the other is the\n>> ability to replace outputs.\n>>\n>> If the double-spend were to merely add or remove inputs (but keep at\n>> least one input in common, of course), it seems fairly safe to assume it's\n>> the former, a genuine fee replacement. Even allowing for things like\n>> coinjoin, none of the payees would really care either way.\n>>\n>> Conversely, if at least one of the inputs were kept but none of the\n>> outputs were, we can be confident it's the the latter.\n>>\n>> It is possible to build a wallet that always does the former when doing\n>> fee replacement by using another transaction to create an output with\n>> exactly the additional desired fee.\n>>\n>> If we can clearly distinguish these two cases then the fee replacement\n>> case can be handled by relaying both and letting miners pick one or the\n>> other while the output replacement case could be handled by rewarding\n>> everything to a miner (essentially all outputs are voided...made\n>> unredeemable...and all inputs are added to coinbase) if the miner includes\n>> the two conflicting transactions in the same block.\n>>\n>> Wouldn't this essentially solve the problem?\n>>\n>> - Eric Lombrozo\n>> On Feb 21, 2015 8:09 PM, \"Jeff Garzik\" <jgarzik at bitpay.com\n>> <javascript:_e(%7B%7D,'cvml','jgarzik at bitpay.com');>> wrote:\n>>\n>>> On Sat, Feb 21, 2015 at 10:25 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>>> > On Sat, Feb 21, 2015 at 11:47 PM, Jeff Garzik <jgarzik at bitpay.com\n>>> <javascript:_e(%7B%7D,'cvml','jgarzik at bitpay.com');>> wrote:\n>>> >> This isn't some theoretical exercise.  Like it or not many use\n>>> >> insecure 0-conf transactions for rapid payments.  Deploying something\n>>> >> that makes 0-conf transactions unusable would have a wide, negative\n>>> >> impact on present day bitcoin payments, thus \"scorched earth\"\n>>>\n>>> > And maybe by maintaining first seen policies we're harming the system\n>>> > in the long term by encouraging people to widely deploy systems based\n>>> > on extremely weak assumptions.\n>>>\n>>> Lacking a coded, reviewed alternative, that's only a platitude.\n>>> Widely used 0-conf payments are where we're at today.  Simply ceasing\n>>> the \"maintaining [of] first seen policies\" alone is simply not a\n>>> realistic option.  The negative impact to today's userbase would be\n>>> huge.\n>>>\n>>> Instant payments need a security upgrade, yes.\n>>>\n>>> --\n>>> Jeff Garzik\n>>> Bitcoin core developer and open source evangelist\n>>> BitPay, Inc.      https://bitpay.com/\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>>> Get technology previously reserved for billion-dollar corporations, FREE\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> <javascript:_e(%7B%7D,'cvml','Bitcoin-development at lists.sourceforge.net');>\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/16820ee2/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-22T13:53:23",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 22 February 2015 08:41:56 GMT-05:00, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>In case it wasn't clear in my earlier post, there's of course a third\n>possibility - namely, some outputs are kept but not all. Here, it is\n>generally impossible to tell whether the motivation was fee\n>replacement,\n>output replacement, or both. My proposal is to always treat these\n>instances\n>as output replacement and punish the sender. The sender needs to make\n>it\n>unambiguously clear it's only a fee replacement by creating a new\n>transaction that produces an output with the desired extra fee and then\n>adding an input that spends it to the original transaction.\n\nThat's a really old idea - I proposed it about two years ago. The optimal way is to allow any txout to be replaced with one with an equal or greater nValue and same scriptPubKey, as well as additional txouts added. (obviously so long as none are removed)\n\nAlas, there's lots of situations where this restricts you from doing useful things, for instance collapsing multiple payments into one by repeated updating to reduce tx size. Equally the benefit is marginal at best given how insecure unconfirmed transactions are - breaking what is already broken isn't a negative.\n\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJU6d9O\nAAoJEMCF8hzn9LncUOUH/3yY4wDyFSkL9o6GsntphAmJSN35wVAlxPxBmNTk0KR3\nYfVhY1cTBIXKqsfqz/n1Sqn264aMzW48xUTtDF2xLzJc1FY5qTBw7zbVrZgYIvvr\nGEakZW1SxLXsfSs2Onutl0WQWi8EMfxEXEPQIiiWy9mq4EtwxMOcDviETycu6Wmn\npmHY00Lo8jhLUyuIkzIZrZetEtWz1VtovbJO5l7WfmLgPWzW+zERPY/pGGioqdiJ\nNOEaocQ+2+OZjyx3MJ4YAch5ZtfB45g+NBm8WyeGpBgxzK3ZIpmyZIQ6HqZr0gpl\nNMUQh6Sbi8WaTEp6hoYTiEfZcEy4IDPg6f0DEW71BPs=\n=1vbN\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-02-22T23:29:36",
                "message_text_only": "On Sunday, February 22, 2015, Peter Todd <pete at petertodd.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n>\n>\n> On 22 February 2015 08:41:56 GMT-05:00, Eric Lombrozo <elombrozo at gmail.com\n> <javascript:;>> wrote:\n> >In case it wasn't clear in my earlier post, there's of course a third\n> >possibility - namely, some outputs are kept but not all. Here, it is\n> >generally impossible to tell whether the motivation was fee\n> >replacement,\n> >output replacement, or both. My proposal is to always treat these\n> >instances\n> >as output replacement and punish the sender. The sender needs to make\n> >it\n> >unambiguously clear it's only a fee replacement by creating a new\n> >transaction that produces an output with the desired extra fee and then\n> >adding an input that spends it to the original transaction.\n>\n> That's a really old idea - I proposed it about two years ago. The optimal\n> way is to allow any txout to be replaced with one with an equal or greater\n> nValue and same scriptPubKey, as well as additional txouts added.\n> (obviously so long as none are removed)\n>\n>\nThat won't work because in general it is impossible to know which\ntransaction is the original. Did we add outputs to transaction A? Or remove\noutputs from transaction B?\n\n\n> Alas, there's lots of situations where this restricts you from doing\n> useful things, for instance collapsing multiple payments into one by\n> repeated updating to reduce tx size. Equally the benefit is marginal at\n> best given how insecure unconfirmed transactions are - breaking what is\n> already broken isn't a negative.\n>\n>\nI think you're unnecessarily complicating use cases.\n\nAs for 0-conf security, there are instances where 0-conf transactions make\na lot of sense - i.e. paying for utilities, ISP, web hosting, or other such\nservices which could be immediately shut off upon detection of a\ndouble-spend.\n\n\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJU6d9O\n> AAoJEMCF8hzn9LncUOUH/3yY4wDyFSkL9o6GsntphAmJSN35wVAlxPxBmNTk0KR3\n> YfVhY1cTBIXKqsfqz/n1Sqn264aMzW48xUTtDF2xLzJc1FY5qTBw7zbVrZgYIvvr\n> GEakZW1SxLXsfSs2Onutl0WQWi8EMfxEXEPQIiiWy9mq4EtwxMOcDviETycu6Wmn\n> pmHY00Lo8jhLUyuIkzIZrZetEtWz1VtovbJO5l7WfmLgPWzW+zERPY/pGGioqdiJ\n> NOEaocQ+2+OZjyx3MJ4YAch5ZtfB45g+NBm8WyeGpBgxzK3ZIpmyZIQ6HqZr0gpl\n> NMUQh6Sbi8WaTEp6hoYTiEfZcEy4IDPg6f0DEW71BPs=\n> =1vbN\n> -----END PGP SIGNATURE-----\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/26d7b5da/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-02-24T01:11:26",
                "message_text_only": "On Sun, Feb 22, 2015 at 6:29 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> As for 0-conf security, there are instances where 0-conf transactions make a\n> lot of sense - i.e. paying for utilities, ISP, web hosting, or other such\n> services which could be immediately shut off upon detection of a\n> double-spend.\n\nIndeed.  0-conf risk calculus must include business conditions.\n\nBusiness cases such as placing an order for a physical good, making an\nin-person purchase at a brick-n-mortar store, or subscriptions already\nhave countermeasures in place if funds go astray.  Order fulfilment\ncan be stopped, subscriptions cancelled, photos handed to police.\n\nA thief wants to maximize return, which usually means either stealing\na few large amounts or many small amounts.  Double-spending against a\nSatoshiDICE clone is easy to automate.  Many other purchase situations\nare difficult to repeat without getting caught, or the level of effort\n(cost) is greater than the payout of double-spending a small amount.\n0-conf is typically only used for small amounts, where useful theft\nrelies on high repetition.\n\nPurely online, mostly anonymous services like SatoshiDICE will be\neasily attacked if they accept 0-conf transactions as there is little\ncustomer/reputation relationship to leverage.  However, that\nobservation cannot be easily applied to most other businesses.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Lawrence Nahum",
                "date": "2015-02-12T16:15:03",
                "message_text_only": "Mike Hearn <mike <at> plan99.net> writes:\n\n> \n> \n> I know you will ignore this as usual, but the entire replace-by-fee folly \nis based on your fundamental misunderstanding of miner incentives.\n\nI disagree, I think it is inevitable (but then of course I'm probably biased \nand why wouldn't I disagree given I run a service that allows for zero \nconfirmation/double spend protection with third party trust.)\n\nFixing it now avoids having people build on top of very weak/broken \nfoundations (see Coinbase https://botbot.me/freenode/bitcoin-\nwizards/msg/29818058/) which would cause bigger problems down the line.\n\nOne thing I don't understand from your position is how do you propose \nhandling transactions being stuck for days or longer because of low fees?\n\nEven with floating fees you can have a sudden inflow of high fees \ntransactions taking over post broadcasting your transaction.\n\nI also assume restricted replacement is very hard, especially from a UX point \nof view and adds undue complexity"
            },
            {
                "author": "Tom Harding",
                "date": "2015-02-12T18:14:02",
                "message_text_only": "On 2/11/2015 10:47 PM, Peter Todd wrote:\n> ... replace-by-fee ...\n\nReplace-by-fee creates the power to repudiate an entire tree of \npayments, and hands this power individually to the owner of each input \nto the top transaction.  Presumably this is why the original replacement \ncode at least required that all of the same inputs be spent, even if the \noriginal outputs got jilted.\n\nReplace-by-fee strengthens the existing *incentive discontinuity* at \n1-conf, and shouts it from the rooftops.  There is diffraction around \nhard edges.  Expect more Finney attacks, even paid ones, if \nreplace-by-fee becomes common.  Regardless of how reliable 0-conf can \never be (much more reliable than today imho), discontinuities are very \nundesirable.\n\nThere is no money in mining other people's double-spends.  Miners of all \nsizes would welcome a fair way to reduce them to improve the quality of \nthe currency, whether or not that way is DSDW.  You mischaracterize DSDW \nas being in any way trust- or vote-based.  It is based on statistics, \nwhich is bitcoin-esque to the core."
            },
            {
                "author": "Josh Lehan",
                "date": "2015-02-12T21:40:48",
                "message_text_only": "Probably out of my league, but I will respond here anyway.\n\nI am in favor of replace-by-fee, but only if it were to be applied to a very limited subset of transactions: namely, transactions that seek to supplement, not replace, the original transaction.\n\nIn other words, a replacement transaction would only be accepted if it were adding additional value (additional transaction inputs and/or outputs).  Otherwise, the original transaction would stand.  Reducing any of the promised outputs, or diverting them to some other recipient, would not be allowed.\n\nThis would solve the problem of a stuck transaction: a transaction that is taking seemingly forever to confirm, because one forgot to pay the miner\u2019s fee, something that happened to me once.\n\nStuck transactions are bad, both for the recipient (they aren\u2019t getting paid) and the sender (some of their funds are still tied up, because change from that transaction has not returned yet).\n\nWith replace-by-fee, the sender of a transaction can send it again, with additional inputs (to pay more miner\u2019s fees) and additional outputs (to receive the change, if any is desired, from those inputs).  So, now the sender is self-empowered to \u201cshove through\u201d their stuck transaction, by voluntarily choosing to pay more for it, a market-driven solution to the problem.\n\nThere are really good reasons to not allow replace-by-fee as a general policy that can apply to all transactions, as others have already mentioned.  However, I still believe the idea has merit, for this special limited case of supplementing a transaction.\n\nJosh Lehan\n\n\n> On Feb 11, 2015, at 22:47, Peter Todd <pete at petertodd.org> wrote:\n> \n> My replace-by-fee patch is now available for the v0.10.0rc4 release:\n> \n>    https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.10.0rc4\n> \n> Along with demo scripts of the functionality:\n> \n>    https://github.com/petertodd/replace-by-fee-tools\n> \n> New to this version is a comprehensive set of unittests under\n> qa/replace-by-fee\n> \n> Additionally the preferential peering support now preferentially peers\n> with Bitcoin XT\u00b9 nodes that support Andresen/Harding's double-spend\n> relaying\u00b2 patch. While Bitcoin XT nodes don't accept double-spends into\n> their mempool, they do relay them perfectly well and thus are an asset\n> to those doing replace-by-fee mining.\u00b3\n> \n> I've had a number of requests from miners for a version of\n> replace-by-fee against Luke-Jr's Eligius patches\u2074; I'll be also\n> releasing that shortly once this release has undergone some more\n> testing.\n> \n> \n> What's replace-by-fee?\n> ----------------------\n> \n> Currently most Bitcoin nodes accept the first transaction they see\n> spending an output to the mempool; all later transactions are rejected.\n> Replace-by-fee changes this behavior to accept the transaction paying\n> the highest fee, both absolutely, and in terms of fee-per-KB. Replaced\n> children are also considered - a chain of transactions is only replaced\n> if the replacement has a higher fee than the sum of all replaced\n> transactions.\n> \n> Doing this aligns standard node behavior with miner incentives: earn the\n> most amount of money per block. It also makes for a more efficient\n> transaction fee marketplace, as transactions that are \"stuck\" due to bad\n> fee estimates can be \"unstuck\" by double-spending them with higher\n> paying versions of themselves. With scorched-earth techniques\u2075 it gives\n> a path to making zeroconf transactions economically secure by relying on\n> economic incentives, rather than \"honesty\" and alturism, in the same way\n> Bitcoin mining itself relies on incentives rather than \"honesty\" and\n> alturism.\n> \n> Finally for miners adopting replace-by-fee avoids the development of an\n> ecosystem that relies heavily on large miners punishing smaller ones for\n> misbehavior, as seen in Harding's proposal\u2076 that miners collectively 51%\n> attack miners who include doublespends in their blocks - an unavoidable\n> consequence of imperfect p2p networking in a decentralized system - or\n> even Hearn's proposal\u2077 that a majority of miners be able to vote to\n> confiscate the earnings of the minority and redistribute them at will.\n> \n> \n> Installation\n> ------------\n> \n> Once you've compiled the replace-by-fee-v0.10.0rc4 branch just run your\n> node normally. With -debug logging enabled, you'll see messages like the\n> following in your ~/.bitcoin/debug.log indicating your node is replacing\n> transactions with higher-fee paying double-spends:\n> \n>    2015-02-12 05:45:20 replacing tx ca07cc2a5eaf55ab13be7ed7d7526cb9d303086f116127608e455122263f93ea with c23973c08d71cdadf3a47bae45566053d364e77d21747ae7a1b66bf1dffe80ea for 0.00798 BTC additional fees, -1033 delta bytes\n> \n> Additionally you can tell if you are connected to other replace-by-fee\n> nodes, or Bitcoin XT nodes, by examining the service bits advertised by\n> your peers:\n> \n>    $ bitcoin-cli getpeerinfo | grep services | egrep '((0000000000000003)|(0000000004000001))'\n>            \"services\" : \"0000000000000003\",\n>            \"services\" : \"0000000004000001\",\n>            \"services\" : \"0000000004000001\",\n>            \"services\" : \"0000000000000003\",\n>            \"services\" : \"0000000004000001\",\n>            \"services\" : \"0000000004000001\",\n>            \"services\" : \"0000000000000003\",\n>            \"services\" : \"0000000000000003\",\n> \n> Replace-by-fee nodes advertise service bit 26 from the experimental use\n> range; Bitcoin XT nodes advertise service bit 1 for their getutxos\n> support. The code sets aside a certain number of outgoing and incoming\n> slots just for double-spend relaying nodes, so as long as everything is\n> working you're node should be connected to like-minded nodes a within 30\n> minutes or so of starting up.\n> \n> If you *don't* want to advertise the fact that you are running a\n> replace-by-fee node, just checkout a slightly earlier commit in git; the\n> actual mempool changes are separate from the preferential peering\n> commits. You can then connect directly to a replace-by-fee node using\n> the -addnode command line flag.\n> \n> 1) https://github.com/bitcoinxt/bitcoinxt\n> 2) https://github.com/bitcoin/bitcoin/pull/3883\n> 3) https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45543370\n> 4) https://github.com/luke-jr/bitcoin/tree/0.10.x-ljrP\n> 5) http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg05211.html\n> 6) http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg06970.html\n> 7) http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04972.html\n> \n> -- \n> 'peter'[:-1]@petertodd.org\n> 000000000000000013c290b77d45d2ea7f9220aedfadfd556ad41b6bd39822f3\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Tom Harding",
                "date": "2015-02-22T16:36:01",
                "message_text_only": "On 2/11/2015 10:47 PM, Peter Todd wrote:\n> My replace-by-fee patch is now available for the v0.10.0rc4 release:\n>\n>      https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.10.0rc4\n>\n\nThis patch immediately simplifies successful double-spends of \nunconfirmed transactions.  But the idea that it \"gives a path to making \nzeroconf transactions economically secure\" is quite dubious.\n\n* You don't provide sufficient means to detect and relay double-spends, \nwhich is necessary to trigger a scorched-earth reaction.  Not all \ndouble-spends will conform to your replacement rules.\n\n   * Maybe XT nodes would help to overcome this.  But meanwhile, in the \nANYONECANPAY design, Bob's replacement is a triple-spend.  Even XT nodes \nwon't relay it.\n\n* It's unclear when, if ever, any senders/receivers will actually try to \nuse scorched-earth as a double-spend deterrent.\n\n\nAlso, this patch significantly weakens DoS protections:\n\n* It removes the early conflict check, making all conflict processing \nmore expensive\n\n   * There is no attempt to protect against the same transaction being \ncontinually replaced with the fee bumped by a minimal amount."
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-22T17:12:22",
                "message_text_only": "On Sun, Feb 22, 2015 at 08:36:01AM -0800, Tom Harding wrote:\n> On 2/11/2015 10:47 PM, Peter Todd wrote:\n> >My replace-by-fee patch is now available for the v0.10.0rc4 release:\n> >\n> >     https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.10.0rc4\n> >\n> \n> This patch immediately simplifies successful double-spends of\n> unconfirmed transactions.  But the idea that it \"gives a path to\n> making zeroconf transactions economically secure\" is quite dubious.\n> \n> * You don't provide sufficient means to detect and relay\n> double-spends, which is necessary to trigger a scorched-earth\n> reaction.  Not all double-spends will conform to your replacement\n> rules.\n\nNo, OTOH if they don't then the situation is no difference from what we\nhave now, and replace-by-fee does no harm. Meanwhile, relaying of bare\ndouble-spend signatures can be implemented in the future, as I suggested\nlast year for your/Andresen's double-spend relaying patch.\n\nDid you notice the even more obvious way to defeat ANYONECANPAY scorched\nearth with that patch?\n\n>   * Maybe XT nodes would help to overcome this.  But meanwhile, in\n> the ANYONECANPAY design, Bob's replacement is a triple-spend.  Even\n> XT nodes won't relay it.\n\nSo? RBF nodes will.\n\n> * It's unclear when, if ever, any senders/receivers will actually\n> try to use scorched-earth as a double-spend deterrent.\n\nI suspect many won't, because few people need to rely on unconfirmed\ntransactions anyway.\n\n> Also, this patch significantly weakens DoS protections:\n> \n> * It removes the early conflict check, making all conflict\n> processing more expensive\n\nIf you're going to consider replacement, conflict processing will\ndefinitely be more expensive. :)\n\nAn actual DoS attacker would do their DoS attack in a way where conflict\nprocessing has nothing to do with it, so this change does no actual\nharm.\n\n>   * There is no attempt to protect against the same transaction\n> being continually replaced with the fee bumped by a minimal amount.\n\nWhat exact git commit were you looking at? I did have an early one that\ndid have a bug along those lines, now fixed.\n\nThe current version ensures every replacement pays at least as much\nadditional fees as would normally cost to broadcast that much data on\nthe network, and additionally requires the fees/KB to always increase;\nunder all circumstances it should be no more of a DoS threat than\nlow-fee transactions are otherwise. I'd like to know if there is a flaw\nin that code however!\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000017c2f346f81e93956c538531682f5af3a95f9c94cb7a84e8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/b1369056/attachment.sig>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-02-22T19:25:24",
                "message_text_only": "On 2/22/2015 9:12 AM, Peter Todd wrote:\n> Did you notice the even more obvious way to defeat ANYONECANPAY \n> scorched earth with that patch? \n\nLet's see.  I could pay 10 people 1 BTC each with one tx, then \ndouble-spend it with fees of 2BTC.  Now at least three of the 10 have to \nwork together if they want to scorched-earth me, since an individual or \ntwo-party claw-back wouldn't have high enough fees. Oops!"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-22T21:50:40",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nNot that issue - that's both easily avoidable, and has nothing to do with the replace-by-fee patch. I'm talking about something in the specific patch - good test to see if you've fully reviewed it.\n\n\nOn 22 February 2015 14:25:24 GMT-05:00, Tom Harding <tomh at thinlink.com> wrote:\n>On 2/22/2015 9:12 AM, Peter Todd wrote:\n>> Did you notice the even more obvious way to defeat ANYONECANPAY\n>> scorched earth with that patch?\n>\n>Let's see.  I could pay 10 people 1 BTC each with one tx, then\n>double-spend it with fees of 2BTC.  Now at least three of the 10 have\n>to\n>work together if they want to scorched-earth me, since an individual or\n>\n>two-party claw-back wouldn't have high enough fees. Oops!\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJU6k8q\nAAoJEMCF8hzn9LncssUH/0acS1lhG8igRWBusnpDD+on+ryXNlTDKZGExzUKy7Wq\n7SzYfMX8LAf/0Wbzs6wtyGzVjQOGmcM0XTAFN+Rp2rP3ZuSzAqO41Re+aUkiB67y\n4PD8R05DmDgbc257HwIQM1aa+NPzzW5p8C+HnyZKpUqMNUAZOUVks22oRGywUXQY\nWrNKiSFQMxW0l1thjX63/x3iXjV92gxyd9qWK8uPAokwNEdULPU5S1mlZbji+MaJ\ncfR6WB02JR/GHPDK1rwmM8vAwQY82CMOJK3HB+1Dx88NvN5Ucn+ppVFtNETHA5g8\ne7UcFeXXeMRF2AMwc9lFEmYsXmSAMJrTFeO981KoOHs=\n=fESj\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "replace-by-fee v0.10.0rc4",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Allen Piscitello",
                "Justus Ranvier",
                "Tom Harding",
                "Troy Benjegerdes",
                "Mike Hearn",
                "Peter Todd",
                "Alan Reiner",
                "Btc Drak",
                "Ross Nicoll",
                "Gregory Maxwell",
                "Mark Friedenbach",
                "Jorge Tim\u00f3n",
                "Adam Gibson",
                "Jeff Garzik",
                "Tamas Blummer",
                "Natanael",
                "Josh Lehan",
                "Oleg Andreev",
                "Alex Mizrahi",
                "Eric Lombrozo",
                "Lawrence Nahum"
            ],
            "messages_count": 73,
            "total_messages_chars_count": 183666
        }
    },
    {
        "title": "[Bitcoin-development] BIP for deterministic pay-to-script-hash multi-signature addresses",
        "thread_messages": [
            {
                "author": "Thomas Kerin",
                "date": "2015-02-12T21:42:23",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHi all,\n\nI have drafted a BIP with Jean Pierre and Ruben after the last\ndiscussion, related to a standard for deriving a canonical\npay-to-script-hash address given a set of public keys and the number of\nsignatures required. There have been two or three discussions about it\non the mailing list to date, and various services already carry out this\nprocess. I hope a BIP to describe this process will allow services to\ndeclare themselves as BIPXX compliant, working towards interoperability\nof services and simplifying the derivation of scripts and their\naddresses by all parties.\n\n\n  BIP: XX\n  Title: Deterministic Pay-to-script-hash multi-signature addresses\nthrough public key sorting\n  Author: Thomas Kerin, Jean-Pierre Rupp, Ruben de Vries\n  Status: Draft\n  Type: Standards Track\n  Created: 8 February 2015\n\n==Abstract==\n\nThis BIP describes a method to deterministically generate\nmulti-signature transaction scripts.  It focuses on defining how the\npublic keys must be encoded and sorted so that the redeem script and\ncorresponding P2SH address are always the same for a given set of keys\nand number of required signatures.\n\n==Motivation==\n\nMost multi-signature transactions are addressed to P2SH\n(pay-to-script-hash) addresses, as defined in BIP-0016.\n\nMulti-signature redeem scripts do not require a particular ordering or\nencoding for public keys.  This means that for a given set of keys and\nnumber of required signatures, there are as many as 2(n!) possible\nstandard redeem scripts, each with its separate P2SH address.  Adhering\nto a an ordering scheme and key encoding would ensure that a\nmulti-signature \u201caccount\u201d (set of public keys and required signature\ncount) has a canonical P2SH address.\n\nBy adopting a sorting and encoding standard, compliant wallets will\nalways produce the same P2SH address for the same given set of keys and\nrequired signature count, making it easier to recognize transactions\ninvolving that multi-signature account.  This is particularly attractive\nfor multisignature hierarchical-deterministic wallets, as less state is\nrequired to setup multi-signature accounts:  only the number of required\nsignatures and master public keys of participants need to be shared, and\nall wallets will generate the same addresses.\n\nWhile most web wallets do not presently facilitate the setup of\nmultisignature accounts with users of a different service, conventions\nwhich ensure cross-compatibility should make it easier to achieve this.\n\nMany wallet as a service providers use a 2of3 multi-signature schema\nwhere the user stores 1 of the keys (offline) as backup while using the\nother key for daily use and letting the service cosign his transactions.\nThis standard will help in enabling a party other than the service\nprovider to recover the wallet without any help from the service provider.\n\n==Implementation==\n\nFor a set of public keys, ensure that they have been received in\ncompressed form, sort them lexicographically according to their binary\nrepresentation before using the resulting list of keys in a standard\nmultisig redeem script.  Hash the redeem script according to BIP-0016 to\nget the P2SH address.\n\n==Compatibility==\n\n* Uncompressed keys are incompatible with this specificiation. A\ncompatible implementation should not automatically compress keys. \nReceiving an uncompressed key from a multisig participant should be\ninterpreted as a sign that the user has an incompatible implementation.\n* P2SH addressses do not reveal information about the script that is\nreceiving the funds. For this reason it is not technically possible to\nenforce this BIP as a rule on the network.  Also, it would cause a hard\nfork.\n* Implementations that do not conform with this BIP will have\ncompatibility issues with strictly-compliant wallets.\n* Implementations which do adopt this standard will be cross-compatible\nwhen choosing multisig addressses.\n* If a group of users were not entirely compliant, there is the\npossibility that a participant will derive an address that the others\nwill not recognize as part of the common multisig account.\n\n==Test vectors==\nThe required number of signatures in each case is 2.\n\nVector 1\n* List\n** 02ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f8\n** 02fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f\n* Sorted\n** 02fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f\n** 02ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f8\n* Script\n**\n522102fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f2102ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f852ae\n* Address\n** 39bgKC7RFbpoCRbtD5KEdkYKtNyhpsNa3Z\n\nVector 2 (Already sorted, no action required)\n* List:\n** 02632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed0\n** 027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e77\n** 02e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b404\n* Sorted:\n** 02632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed0\n** 027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e77\n** 02e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b404\n* Script\n**\n522102632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed021027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e772102e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b40453ae\n* Address\n** 3CKHTjBKxCARLzwABMu9yD85kvtm7WnMfH\n\nVector 3:\n* List:   \n** 030000000000000000000000000000000000004141414141414141414141414141\n** 020000000000000000000000000000000000004141414141414141414141414141\n** 020000000000000000000000000000000000004141414141414141414141414140\n** 030000000000000000000000000000000000004141414141414141414141414140\n* Sorted:\n** 020000000000000000000000000000000000004141414141414141414141414140\n** 020000000000000000000000000000000000004141414141414141414141414141\n** 030000000000000000000000000000000000004141414141414141414141414140\n** 030000000000000000000000000000000000004141414141414141414141414141\n* Script\n**\n522102000000000000000000000000000000000000414141414141414141414141414021020000000000000000000000000000000000004141414141414141414141414141210300000000000000000000000000000000000041414141414141414141414141402103000000000000000000000000000000000000414141414141414141414141414154ae\n* Address\n** 32V85igBri9zcfBRVupVvwK18NFtS37FuD\n\nVector 4: (from bitcore)\n* List:\n** 022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da\n** 03e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e9\n** 021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc18\n* Sorted:\n** 021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc18\n** 022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da\n** 03e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e9\n* Script\n**\n5221021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc1821022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da2103e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e953ae\n* Address\n** 3Q4sF6tv9wsdqu2NtARzNCpQgwifm2rAba\n\n==Usage & Implementations==\n* BIP45 - Structure for Deterministic P2SH Multisignature Wallets -\nhttps://github.com/bitcoin/bips/blob/master/bip-0045.mediawiki#address-generation-procedure\n* Bitcore -\nhttps://github.com/bitpay/bitcore/blob/50a868cb8cdf2be04bb1c5bf4bcc064cc06f5888/lib/script/script.js#L541\n* Haskoin -\nhttps://github.com/haskoin/haskoin/blob/master/Network/Haskoin/Script/Parser.hs#L112-122\n* Armory -\nhttps://github.com/etotheipi/BitcoinArmory/blob/268db0f3fa20c989057bd43343a43b2edbe89aeb/armoryengine/ArmoryUtils.py#L1441\n* Multisignature Brainwallet - http://ms-brainwallet.org/\n   \nFor now, the BIP will live here:\nhttps://github.com/afk11/bips/blob/bip0090/bip-0090.mediawiki/\n\nLooking forward to any feedback and discussions that arise!\n\n\n- -- \nThomas Kerin\n- -------------------------\n\nMy PGP key can be found here\n<http://pgp.mit.edu/pks/lookup?op=get&search=0x3F0D2F83A2966155>\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQJ8BAEBCgBmBQJU3R43XxSAAAAAAC4AKGlzc3Vlci1mcHJAbm90YXRpb25zLm9w\nZW5wZ3AuZmlmdGhob3JzZW1hbi5uZXQ2MzI1MzM4QjJGOTU5OEUzREMzQzc0MzAz\nRjBEMkY4M0EyOTY2MTU1AAoJED8NL4OilmFVKwUP/3MS++5D+YJAPZG/a7PhY3hf\n8UvBkaAp7YqCVvZkHhpQ3+7AF+c6nAfu9JRFSdGP5hNvApagbZoC2oeLQ5rHBfXC\nMbkbqOSp0z7C4MvEqmncTSgqNykxanVfiypV2S7hU2fbiylVi2jIaGrjqQt32jT7\nkdFw5wqAS3zVHJVZhnUufLj/VYC94vdfrgpL22WI9oNH/nOvO6uG3YwZ9rc63ZH/\ncwTmUnjOqDUlJWtYsfcoDL41RkmeBtGqD+6gTe3BtVHJQqlsEWpB1hsucOv5XdEk\nV0teRUQ8+hFnU86+S4VJ8+qy/QjYflHnfy7vcA3M6LhAkle3scCs7ZCpDb9EGFM+\nyAZivS4vrcVaYgY+oBdSnMEyvudwDKHwdy/rNjTskCLsHzcZX5jAoIxT2XskAXMD\nUcWRelpN7Wth5jnSXeB89Wg1DqBwyl0LF7ZXepglopfHbAIsZ1oms252f5G7cfFq\n+11HR3JswvVN4otqNAZzYaN7wEBEZwlcD+a/VKoNE0uPVuBS08phhNGjHmidXCOZ\nwC11biStwjt1tv1lUNcK0HkkNReuUrUDK1dNKxGGfUHk+Qcka+cQ1ap47lLx06+U\nLskPwJKR1tvoHkVMLy4UutX8bIRtXE3WbSOQlV9Q/4/os3tTpVlH5AX47W+2CikV\nt3pTmdJy0FubCrHSJ63C\n=5H5A\n-----END PGP SIGNATURE-----\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/d4a3d521/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xA2966155.asc\nType: application/pgp-keys\nSize: 5712 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/d4a3d521/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xA2966155.asc.sig\nType: application/pgp-signature\nSize: 639 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/d4a3d521/attachment.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-02-12T22:13:33",
                "message_text_only": "Where is the Specification section?? Does this support arbitrary scripts, or \nonly the simplest CHECKMULTISIG case?\n\nOn Thursday, February 12, 2015 9:42:23 PM Thomas Kerin wrote:\n> Hi all,\n> \n> I have drafted a BIP with Jean Pierre and Ruben after the last\n> discussion, related to a standard for deriving a canonical\n> pay-to-script-hash address given a set of public keys and the number of\n> signatures required. There have been two or three discussions about it\n> on the mailing list to date, and various services already carry out this\n> process. I hope a BIP to describe this process will allow services to\n> declare themselves as BIPXX compliant, working towards interoperability\n> of services and simplifying the derivation of scripts and their\n> addresses by all parties.\n> \n> \n>   BIP: XX\n>   Title: Deterministic Pay-to-script-hash multi-signature addresses\n> through public key sorting\n>   Author: Thomas Kerin, Jean-Pierre Rupp, Ruben de Vries\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 8 February 2015\n> \n> ==Abstract==\n> \n> This BIP describes a method to deterministically generate\n> multi-signature transaction scripts.  It focuses on defining how the\n> public keys must be encoded and sorted so that the redeem script and\n> corresponding P2SH address are always the same for a given set of keys\n> and number of required signatures.\n> \n> ==Motivation==\n> \n> Most multi-signature transactions are addressed to P2SH\n> (pay-to-script-hash) addresses, as defined in BIP-0016.\n> \n> Multi-signature redeem scripts do not require a particular ordering or\n> encoding for public keys.  This means that for a given set of keys and\n> number of required signatures, there are as many as 2(n!) possible\n> standard redeem scripts, each with its separate P2SH address.  Adhering\n> to a an ordering scheme and key encoding would ensure that a\n> multi-signature \u201caccount\u201d (set of public keys and required signature\n> count) has a canonical P2SH address.\n> \n> By adopting a sorting and encoding standard, compliant wallets will\n> always produce the same P2SH address for the same given set of keys and\n> required signature count, making it easier to recognize transactions\n> involving that multi-signature account.  This is particularly attractive\n> for multisignature hierarchical-deterministic wallets, as less state is\n> required to setup multi-signature accounts:  only the number of required\n> signatures and master public keys of participants need to be shared, and\n> all wallets will generate the same addresses.\n> \n> While most web wallets do not presently facilitate the setup of\n> multisignature accounts with users of a different service, conventions\n> which ensure cross-compatibility should make it easier to achieve this.\n> \n> Many wallet as a service providers use a 2of3 multi-signature schema\n> where the user stores 1 of the keys (offline) as backup while using the\n> other key for daily use and letting the service cosign his transactions.\n> This standard will help in enabling a party other than the service\n> provider to recover the wallet without any help from the service provider.\n> \n> ==Implementation==\n> \n> For a set of public keys, ensure that they have been received in\n> compressed form, sort them lexicographically according to their binary\n> representation before using the resulting list of keys in a standard\n> multisig redeem script.  Hash the redeem script according to BIP-0016 to\n> get the P2SH address.\n> \n> ==Compatibility==\n> \n> * Uncompressed keys are incompatible with this specificiation. A\n> compatible implementation should not automatically compress keys.\n> Receiving an uncompressed key from a multisig participant should be\n> interpreted as a sign that the user has an incompatible implementation.\n> * P2SH addressses do not reveal information about the script that is\n> receiving the funds. For this reason it is not technically possible to\n> enforce this BIP as a rule on the network.  Also, it would cause a hard\n> fork.\n> * Implementations that do not conform with this BIP will have\n> compatibility issues with strictly-compliant wallets.\n> * Implementations which do adopt this standard will be cross-compatible\n> when choosing multisig addressses.\n> * If a group of users were not entirely compliant, there is the\n> possibility that a participant will derive an address that the others\n> will not recognize as part of the common multisig account.\n> \n> ==Test vectors==\n> The required number of signatures in each case is 2.\n> \n> Vector 1\n> * List\n> ** 02ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f8\n> ** 02fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f\n> * Sorted\n> ** 02fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f\n> ** 02ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f8\n> * Script\n> **\n> 522102fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f2102f\n> f12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f852ae *\n> Address\n> ** 39bgKC7RFbpoCRbtD5KEdkYKtNyhpsNa3Z\n> \n> Vector 2 (Already sorted, no action required)\n> * List:\n> ** 02632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed0\n> ** 027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e77\n> ** 02e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b404\n> * Sorted:\n> ** 02632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed0\n> ** 027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e77\n> ** 02e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b404\n> * Script\n> **\n> 522102632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed021027\n> 735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e772102e2cc6bd5\n> f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b40453ae * Address\n> ** 3CKHTjBKxCARLzwABMu9yD85kvtm7WnMfH\n> \n> Vector 3:\n> * List:\n> ** 030000000000000000000000000000000000004141414141414141414141414141\n> ** 020000000000000000000000000000000000004141414141414141414141414141\n> ** 020000000000000000000000000000000000004141414141414141414141414140\n> ** 030000000000000000000000000000000000004141414141414141414141414140\n> * Sorted:\n> ** 020000000000000000000000000000000000004141414141414141414141414140\n> ** 020000000000000000000000000000000000004141414141414141414141414141\n> ** 030000000000000000000000000000000000004141414141414141414141414140\n> ** 030000000000000000000000000000000000004141414141414141414141414141\n> * Script\n> **\n> 522102000000000000000000000000000000000000414141414141414141414141414021020\n> 000000000000000000000000000000000004141414141414141414141414141210300000000\n> 000000000000000000000000000041414141414141414141414141402103000000000000000\n> 000000000000000000000414141414141414141414141414154ae * Address\n> ** 32V85igBri9zcfBRVupVvwK18NFtS37FuD\n> \n> Vector 4: (from bitcore)\n> * List:\n> ** 022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da\n> ** 03e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e9\n> ** 021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc18\n> * Sorted:\n> ** 021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc18\n> ** 022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da\n> ** 03e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e9\n> * Script\n> **\n> 5221021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc1821022\n> df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da2103e3818b65\n> bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e953ae * Address\n> ** 3Q4sF6tv9wsdqu2NtARzNCpQgwifm2rAba\n> \n> ==Usage & Implementations==\n> * BIP45 - Structure for Deterministic P2SH Multisignature Wallets -\n> https://github.com/bitcoin/bips/blob/master/bip-0045.mediawiki#address-gene\n> ration-procedure * Bitcore -\n> https://github.com/bitpay/bitcore/blob/50a868cb8cdf2be04bb1c5bf4bcc064cc06f\n> 5888/lib/script/script.js#L541 * Haskoin -\n> https://github.com/haskoin/haskoin/blob/master/Network/Haskoin/Script/Parse\n> r.hs#L112-122 * Armory -\n> https://github.com/etotheipi/BitcoinArmory/blob/268db0f3fa20c989057bd43343a\n> 43b2edbe89aeb/armoryengine/ArmoryUtils.py#L1441 * Multisignature\n> Brainwallet - http://ms-brainwallet.org/\n> \n> For now, the BIP will live here:\n> https://github.com/afk11/bips/blob/bip0090/bip-0090.mediawiki/\n> \n> Looking forward to any feedback and discussions that arise!"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-13T07:53:14",
                "message_text_only": "On Thu, Feb 12, 2015 at 10:13:33PM +0000, Luke Dashjr wrote:\n> Where is the Specification section?? Does this support arbitrary scripts, or \n> only the simplest CHECKMULTISIG case?\n\nIt might be enough to rewrite this BIP to basically say \"all pubkeys\nexecuted by all CHECKMULTISIG opcodes will be in the following canonical\norder\", followed by some explanatory examples of how to apply this\nsimple rule.\n\nOTOH we don't yet have a standard way of even talking about arbitrary\nscripts, so it may very well turn out to be the case that the above rule\nis too restrictive in many cases - I certainly would not want to do a\nsoft-fork to enforce this, or even make it an IsStandard() rule.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000013cf8270118ba2efce8b304f8de359599fef95c3ab43dcb1\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150213/7fe200a5/attachment.sig>"
            },
            {
                "author": "Ruben de Vries",
                "date": "2015-02-13T09:01:41",
                "message_text_only": "The idea is more like BIP44/45 to have a 'standard' that software can\ncomply by and express they do\nso that it makes a step towards compatibility between (wallet) software.\n\nOn Fri, Feb 13, 2015 at 8:53 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Thu, Feb 12, 2015 at 10:13:33PM +0000, Luke Dashjr wrote:\n> > Where is the Specification section?? Does this support arbitrary\n> scripts, or\n> > only the simplest CHECKMULTISIG case?\n>\n> It might be enough to rewrite this BIP to basically say \"all pubkeys\n> executed by all CHECKMULTISIG opcodes will be in the following canonical\n> order\", followed by some explanatory examples of how to apply this\n> simple rule.\n>\n> OTOH we don't yet have a standard way of even talking about arbitrary\n> scripts, so it may very well turn out to be the case that the above rule\n> is too restrictive in many cases - I certainly would not want to do a\n> soft-fork to enforce this, or even make it an IsStandard() rule.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000013cf8270118ba2efce8b304f8de359599fef95c3ab43dcb1\n>\n\n\n\n-- \nBlockTrail B.V.\nBarbara Strozzilaan 201\n1083HN Amsterdam\nThe Netherlands\n\nPhone: +31 (0)612227277\nE-mail: ruben at blocktrail.com\nWeb: www.blocktrail.com\nGithub: www.github.com/rubensayshi\n\nBlockTrail B.V. Is registered with the Dutch Chamber of Commerce in\nAmsterdam with registration No.:60262060 and VAT No.:NL853833035B01\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150213/a64f7cc8/attachment.html>"
            },
            {
                "author": "Thomas Kerin",
                "date": "2015-02-13T23:43:24",
                "message_text_only": "On 12/02/15 22:13, Luke Dashjr wrote:\n> Where is the Specification section?? Does this support arbitrary scripts, or \n> only the simplest CHECKMULTISIG case?\n\nThe BIP is a process for deriving only the type of scripts you would\nencounter doing addmultisigaddress. More complicated scripts would\nrequire more metadata to be shared, but the only case we describe is\nwhen given public keys and the number of signatures required.\n\nYou're right, we're missing a Specification. I have tweaked the document\nto cover this now.\n\n\n\nOn 13/02/15 07:53, Peter Todd wrote:\n> It might be enough to rewrite this BIP to basically say \"all pubkeys\n> executed by all CHECKMULTISIG opcodes will be in the following\n> canonical order\", followed by some explanatory examples of how to\n> apply this simple rule. OTOH we don't yet have a standard way of even\n> talking about arbitrary scripts, so it may very well turn out to be\n> the case that the above rule is too restrictive in many cases - I\n> certainly would not want to do a soft-fork to enforce this, or even\n> make it an IsStandard() rule.\n\nIt would be interesting, but I agree it should not be brought into these\nvalidation rules - just a convention for people to follow for now. I\nthink it's fair that implementers are free to order them however they\nplease. But I think there is good reason for wallets to opt in to the\nconvention and declare this, for ease of recovery, and for\ninteroperability reasons. \n\n\n-- \nThomas Kerin\n------------------------------------------------------------------------\n\nMy PGP key can be found here <http://pgp.mit.edu/pks/lookup?op=get&search=0x3F0D2F83A2966155>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150213/38ec3d07/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xA2966155.asc\nType: application/pgp-keys\nSize: 5712 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150213/38ec3d07/attachment.bin>"
            }
        ],
        "thread_summary": {
            "title": "BIP for deterministic pay-to-script-hash multi-signature addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Thomas Kerin",
                "Luke Dashjr",
                "Peter Todd",
                "Ruben de Vries"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 22770
        }
    },
    {
        "title": "[Bitcoin-development] BIP for deterministic multisig addresses",
        "thread_messages": [
            {
                "author": "Thomas Kerin",
                "date": "2015-02-12T21:55:32",
                "message_text_only": "Not sure what happened there - I'll drop the PGP.\n\n\nHi all,\n\nI have drafted a BIP with Jean Pierre and Ruben after the last\ndiscussion, related to a standard for deriving a canonical\npay-to-script-hash address given a set of public keys and the number of\nsignatures required. There have been two or three discussions about it\non the mailing list to date, and various services already carry out this\nprocess. I hope a BIP to describe this process will allow services to\ndeclare themselves as BIPXX compliant, working towards interoperability\nof services and simplifying the derivation of scripts and their\naddresses by all parties.\n\n\n  BIP: XX\n  Title: Deterministic Pay-to-script-hash multi-signature addresses\nthrough public key sorting\n  Author: Thomas Kerin, Jean-Pierre Rupp, Ruben de Vries\n  Status: Draft\n  Type: Standards Track\n  Created: 8 February 2015\n\n==Abstract==\n\nThis BIP describes a method to deterministically generate\nmulti-signature transaction scripts.  It focuses on defining how the\npublic keys must be encoded and sorted so that the redeem script and\ncorresponding P2SH address are always the same for a given set of keys\nand number of required signatures.\n\n==Motivation==\n\nMost multi-signature transactions are addressed to P2SH\n(pay-to-script-hash) addresses, as defined in BIP-0016.\n\nMulti-signature redeem scripts do not require a particular ordering or\nencoding for public keys.  This means that for a given set of keys and\nnumber of required signatures, there are as many as 2(n!) possible\nstandard redeem scripts, each with its separate P2SH address.  Adhering\nto a an ordering scheme and key encoding would ensure that a\nmulti-signature \u201caccount\u201d (set of public keys and required signature\ncount) has a canonical P2SH address.\n\nBy adopting a sorting and encoding standard, compliant wallets will\nalways produce the same P2SH address for the same given set of keys and\nrequired signature count, making it easier to recognize transactions\ninvolving that multi-signature account.  This is particularly attractive\nfor multisignature hierarchical-deterministic wallets, as less state is\nrequired to setup multi-signature accounts:  only the number of required\nsignatures and master public keys of participants need to be shared, and\nall wallets will generate the same addresses.\n\nWhile most web wallets do not presently facilitate the setup of\nmultisignature accounts with users of a different service, conventions\nwhich ensure cross-compatibility should make it easier to achieve this.\n\nMany wallet as a service providers use a 2of3 multi-signature schema\nwhere the user stores 1 of the keys (offline) as backup while using the\nother key for daily use and letting the service cosign his transactions.\nThis standard will help in enabling a party other than the service\nprovider to recover the wallet without any help from the service provider.\n\n==Implementation==\n\nFor a set of public keys, ensure that they have been received in\ncompressed form, sort them lexicographically according to their binary\nrepresentation before using the resulting list of keys in a standard\nmultisig redeem script.  Hash the redeem script according to BIP-0016 to\nget the P2SH address.\n\n==Compatibility==\n\n* Uncompressed keys are incompatible with this specificiation. A\ncompatible implementation should not automatically compress keys. \nReceiving an uncompressed key from a multisig participant should be\ninterpreted as a sign that the user has an incompatible implementation.\n* P2SH addressses do not reveal information about the script that is\nreceiving the funds. For this reason it is not technically possible to\nenforce this BIP as a rule on the network.  Also, it would cause a hard\nfork.\n* Implementations that do not conform with this BIP will have\ncompatibility issues with strictly-compliant wallets.\n* Implementations which do adopt this standard will be cross-compatible\nwhen choosing multisig addressses.\n* If a group of users were not entirely compliant, there is the\npossibility that a participant will derive an address that the others\nwill not recognize as part of the common multisig account.\n\n==Test vectors==\nThe required number of signatures in each case is 2.\n\nVector 1\n* List\n** 02ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f8\n** 02fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f\n* Sorted\n** 02fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f\n** 02ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f8\n* Script\n**\n522102fe6f0a5a297eb38c391581c4413e084773ea23954d93f7753db7dc0adc188b2f2102ff12471208c14bd580709cb2358d98975247d8765f92bc25eab3b2763ed605f852ae\n* Address\n** 39bgKC7RFbpoCRbtD5KEdkYKtNyhpsNa3Z\n\nVector 2 (Already sorted, no action required)\n* List:\n** 02632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed0\n** 027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e77\n** 02e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b404\n* Sorted:\n** 02632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed0\n** 027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e77\n** 02e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b404\n* Script\n**\n522102632b12f4ac5b1d1b72b2a3b508c19172de44f6f46bcee50ba33f3f9291e47ed021027735a29bae7780a9755fae7a1c4374c656ac6a69ea9f3697fda61bb99a4f3e772102e2cc6bd5f45edd43bebe7cb9b675f0ce9ed3efe613b177588290ad188d11b40453ae\n* Address\n** 3CKHTjBKxCARLzwABMu9yD85kvtm7WnMfH\n\nVector 3:\n* List:   \n** 030000000000000000000000000000000000004141414141414141414141414141\n** 020000000000000000000000000000000000004141414141414141414141414141\n** 020000000000000000000000000000000000004141414141414141414141414140\n** 030000000000000000000000000000000000004141414141414141414141414140\n* Sorted:\n** 020000000000000000000000000000000000004141414141414141414141414140\n** 020000000000000000000000000000000000004141414141414141414141414141\n** 030000000000000000000000000000000000004141414141414141414141414140\n** 030000000000000000000000000000000000004141414141414141414141414141\n* Script\n**\n522102000000000000000000000000000000000000414141414141414141414141414021020000000000000000000000000000000000004141414141414141414141414141210300000000000000000000000000000000000041414141414141414141414141402103000000000000000000000000000000000000414141414141414141414141414154ae\n* Address\n** 32V85igBri9zcfBRVupVvwK18NFtS37FuD\n\nVector 4: (from bitcore)\n* List:\n** 022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da\n** 03e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e9\n** 021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc18\n* Sorted:\n** 021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc18\n** 022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da\n** 03e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e9\n* Script\n**\n5221021f2f6e1e50cb6a953935c3601284925decd3fd21bc445712576873fb8c6ebc1821022df8750480ad5b26950b25c7ba79d3e37d75f640f8e5d9bcd5b150a0f85014da2103e3818b65bcc73a7d64064106a859cc1a5a728c4345ff0b641209fba0d90de6e953ae\n* Address\n** 3Q4sF6tv9wsdqu2NtARzNCpQgwifm2rAba\n\n==Usage & Implementations==\n* BIP45 - Structure for Deterministic P2SH Multisignature Wallets -\nhttps://github.com/bitcoin/bips/blob/master/bip-0045.mediawiki#address-generation-procedure\n* Bitcore -\nhttps://github.com/bitpay/bitcore/blob/50a868cb8cdf2be04bb1c5bf4bcc064cc06f5888/lib/script/script.js#L541\n* Haskoin -\nhttps://github.com/haskoin/haskoin/blob/master/Network/Haskoin/Script/Parser.hs#L112-122\n* Armory -\nhttps://github.com/etotheipi/BitcoinArmory/blob/268db0f3fa20c989057bd43343a43b2edbe89aeb/armoryengine/ArmoryUtils.py#L1441\n* Multisignature Brainwallet - http://ms-brainwallet.org/\n   \nFor now, the BIP will live here:\nhttps://github.com/afk11/bips/blob/bip0090/bip-0090.mediawiki/\n\nLooking forward to any feedback and discussions that arise!\n\n\n- -- \nThomas Kerin\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xA2966155.asc\nType: application/pgp-keys\nSize: 5712 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150212/a4aa3085/attachment.bin>"
            }
        ],
        "thread_summary": {
            "title": "BIP for deterministic multisig addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Thomas Kerin"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 8170
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Core 0.10.0 final was tagged",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2015-02-13T09:51:46",
                "message_text_only": "Hello,\n\nI've just tagged 0.10.0rc4 as final (with a small packaging change to \navoid tar nastiness). The tag is 'v0.10.0'.\n\nStart your gitian builders!\n\nFor a guide on how to do gitian builds see https://github.com/bitcoin/bitcoin/blob/master/doc/gitian-building.md\n\nPlease wait with a release announcement until there are >3\nbuilders and the binaries have been uploaded.\n\nCheers,\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.10.0 final was tagged",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 389
        }
    },
    {
        "title": "[Bitcoin-development] On Rewriting Bitcoin (was Re: [Libbitcoin] Satoshi client: is a fork past 0.10 possible?)",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-02-14T13:13:20",
                "message_text_only": "I haven't bothered reading the thread, but I'll put this out there:\n\nThe consensus critical Satoshi-derived sourcecode is a protocol\n*specification* that happens to also be machine readable and executable.\nRewriting it is just as silly as as taking RFC 791 and rewriting it\nbecause you wanted to \"decentralize control over the internet\"\n\nMy replace-by-fee fork of Bitcoin Core is a perfect case in point: it\nimplements different non-consensus-critical policy than Bitcoin Core\ndoes, while adhering to the same Bitcoin protocol by virtue of being the\nsame sourcecode - the same protocol specification. When I went to miners\nasking them to implement it, the biggest concern for them is \"Will it\nstay in consensus with other miners?\" If I had rewritten the whole thing\nfrom scratch the fact is the honest answer to them would be no way in\nhell - reimplementing Bitcoin and getting it right is software\nengineering's Apollo Project and none of us have the resources to pull\nthat off. But I didn't, which means we might soon have a significant\nchunk of hashing power implementing a completely different mining policy\nthan what is promoted by the Bitcoin Core maintainers.\n\nBy reimplementing consensus code - rewriting the protocol spec - you\ndrop out of the political process that is Bitcoin development. You're\nnot decentralizing Bitcoin at all - you're contributing to its\ncentralization by not participating, leaving behind a smaller and more\ncentralized development process. Fact is, what you've implemented in\nlibbitcoin just isn't the Bitcoin protocol and isn't going to get\nadopted by miners nor used by serious merchants and exchanges - the\nsources of real political power.\n\n\nRight now we could live in a world where a dozen different groups\nmaintain Bitcoin implementations that are actually used by miners. We\ncould have genuine innovation on the p2p networking layer, encryption,\nbetter privacy for SPV clients, better resistance to DoS attacks. We\ncould have diverse tx acceptance policies rather than wasting hundreds\nof man hours bitching about how many bytes OP_RETURN should allow. We\ncould have voices from multiple groups at the table when the community\ndiscusses how to scale Bitcoin up.\n\nInstead we have a world with a half dozen teams wasting hundreds if not\nthousands of of man hours dicking around trying to rewrite consensus\ncritical *specifications* because they happen to be perfectly good\nexecutable code, and the first thing a programmer thinks when they see\nperfectly good battle-hardened code is \"Hey! Let's rewrite that from\nscratch!\"\n\n\nYou know you does have significant political power over the development\nof the Bitcoin protocol *other* than the Bitcoin Foundation?\n\nLuke Dashjr.\n\nBecause he maintains the Eligius fork of Bitcoin Core that something\nlike %30 of the hashing power run. It Actually Works because it uses the\nActual Protocol Specification, and miners know if they run it they\naren't going to lose tens of thousands of dollars. It's why it's easy to\nget transactiosn mined that don't meet the Bitcoin Core's IsStandard()\nrules: they aren't part of the protocol spec, and Luke-Jr has different\nviews on what transactions should and should not be allowed into the\nblockchain.\n\nAnd when Gavin Andresen starts negotiating with alt-implementations to\nget his bloat coin proposals implemented, you know who's going to be at\nthe table? Luke-Jr again! Oh sure, the likes of btcd, libbitcoin, toshi,\netc. will get invited, but no-one's going to really care what they say.\nBecause at best only a tiny - and foolish - sliver of hashing power will\nbe using their implementations of Something Almost But Not Quite\nBitcoin\u2122, and any sane merchant or exchange will be running at least one\nor two Bitcoin Foundation Genuine Bitcoin Core\u2122 nodes in front of any\nfrom-scratch alt-implementation.\n\n\nSo stop wasting your time. Help get the consensus critical code out of\nBitcoin Core and into a stand-alone libconsensus library, wrap it in the\nmempool policy, p2p networking code, and whatever else you feel like,\nand convince some hashing power to adopt it. Then enjoy the fruits of\nyour efforts when the next time we decide to soft-fork Bitcoin the\nprocess isn't some secretive IRC discussion by a half-dozen \"core\ndevelopers\" - and one guy who finds the term hilarious - but a full on\nDIRECT DEMOCRACY OCCUPY WALL STREEET MODIFIED CONSENSUS POW-WOW,\ncomplete with twinkle fingers. A pow-wow that you'll be an equal part\nof, and your opinions will matter.\n\nOr you can be stereotypical programmers and dick around on github for\nthe next ten years chasing stupid consensus bugs in code no-one uses.\n\nThe choice is yours.\n\n\nOn Sat, Feb 14, 2015 at 03:16:16AM -0800, Eric Voskuil wrote:\n> On 02/14/2015 01:51 AM, Jorge Tim\u00f3n wrote:\n> > I agree that this conversation is not being productive anymore. I'm\n> > doing my best to understand you but I just happen to disagree with\n> > many of your arguments.\n> > I doubt it makes you feel better but it's being tedious and\n> > frustrating for me as well.\n> > I don't know about other people's intentions, but I know that my only\n> > intention when recommending libbitcoin to depend on libconsensus is to\n> > prevent its direct and indirect users from accidentally being forked\n> > off the network due to a consensus failure.\n> \n> If you want to achieve that goal, I would again recommend that a\n> standard suite of test vectors be published that other implementations\n> can easily consume. Everyone runs the tests and compares results - just\n> like deterministic build verification.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000e95dcd2476d820f6fd26eb1a9411e961347260342458e9c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150214/92986503/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-14T14:23:47",
                "message_text_only": "Peter,\n\nYou did not address me but libbitcoin. Since our story and your evaluation is probably similar, I chime in.\n\nOn Feb 14, 2015, at 2:13 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> So stop wasting your time. Help get the consensus critical code out of\n> Bitcoin Core and into a stand-alone libconsensus library,\n\n\nWe have seen that the consensus critical code practically extends to Berkley DB limits or OpenSSL laxness, therefore\nit is inconceivable that a consensus library is not the same as Bitcoin Core, less its P2P service rules, wallet and RPC server.\n\n\nOn Feb 14, 2015, at 2:13 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n> Or you can be stereotypical programmers and dick around on github for\n> the next ten years chasing stupid consensus bugs in code no-one uses.\n\n\n\nThe Core code base is unfriendly to feature extensions because of its criticality, legacy design and ancient technology. It is also a commodity\nthat the ecosystem takes for granted and free. \n\nI honestly admire the core team that works and progresses within these limits and perception.\n\nI am not willing to work within the core\u2019s legacy technology limits. Does it mean I am dicking around? I think not.\nIt was my way to go down the rabbit hole by re-digging it and I created successful commercial products on the way.\n\nIt is entirely rational for me to focus on innovation that uses the core as a border router for this block chain. \n\nI am rather thankful for the ideas of the side chains, that enable innovation that is no longer measured on unapologetic compatibility with a given code base, but its services to end user.\n\nTamas Blummer\nBits of Proof\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150214/e52a0ac4/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150214/e52a0ac4/attachment.sig>"
            },
            {
                "author": "Adam Back",
                "date": "2015-02-14T19:04:49",
                "message_text_only": "Strongly with Peter on this.  That its highly complex to maintain strict\nconsensus between bitcoin versions, does not justify consensus rewrite\nexperiments; it tells you that the risk is exponentially worse and people\nshould use and rally around libconsensus.\n\nI would advise any bitcoin ecosystem part, wallet, user to not use software\nwith consensus protocol rw-writes nor variants, you WILL lose money.\n\nYou could view bitcoin as a digital signature algorithm speculatively\ntinkering with the algo is highly prone to binary failure mode and\nunbounded funds loss.\n\nWant to be clear this is not a political nor emotive issue. It is a\ncritical technical requirement for security if users of software people\nwrite.\n\nPlease promote this meme.\n\nAdam\nOn Feb 14, 2015 6:24 AM, \"Tamas Blummer\" <tamas at bitsofproof.com> wrote:\n\n> Peter,\n>\n> You did not address me but libbitcoin. Since our story and your evaluation\n> is probably similar, I chime in.\n>\n> On Feb 14, 2015, at 2:13 PM, Peter Todd <pete at petertodd.org> wrote:\n>\n> So stop wasting your time. Help get the consensus critical code out of\n> Bitcoin Core and into a stand-alone libconsensus library,\n>\n>\n> We have seen that the consensus critical code practically extends to\n> Berkley DB limits or OpenSSL laxness, therefore\n> it is inconceivable that a consensus library is not the same as Bitcoin\n> Core, less its P2P service rules, wallet and RPC server.\n>\n>\n> On Feb 14, 2015, at 2:13 PM, Peter Todd <pete at petertodd.org> wrote:\n>\n>\n> Or you can be stereotypical programmers and dick around on github for\n> the next ten years chasing stupid consensus bugs in code no-one uses.\n>\n>\n>\n> The Core code base is unfriendly to feature extensions because of its\n> criticality, legacy design and ancient technology. It is also a commodity\n> that the ecosystem takes for granted and free.\n>\n> I honestly admire the core team that works and progresses within these\n> limits and perception.\n>\n> I am not willing to work within the core\u2019s legacy technology limits. Does\n> it mean I am dicking around? I think not.\n> It was my way to go down the rabbit hole by re-digging it and I created\n> successful commercial products on the way.\n>\n> It is entirely rational for me to focus on innovation that uses the core\n> as a border router for this block chain.\n>\n> I am rather thankful for the ideas of the side chains, that enable\n> innovation that is no longer measured on unapologetic compatibility with a\n> given code base, but its services to end user.\n>\n> Tamas Blummer\n> Bits of Proof\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming. The Go Parallel Website,\n> sponsored by Intel and developed in partnership with Slashdot Media, is\n> your\n> hub for all things parallel software development, from weekly thought\n> leadership blogs to news, videos, case studies, tutorials and more. Take a\n> look and join the conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150214/f093769e/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-02-14T19:29:16",
                "message_text_only": "On Sat, Feb 14, 2015 at 1:04 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> That its highly complex to maintain strict consensus between bitcoin\n> versions, does not justify consensus rewrite experiments\n\n\nCorrect. However, those maintenance costs absolutely do justify working\ntowards formal proofs of correctness for the existing implementation. These\nplans are no secret and are publicly discussed, but I think it would be\ninstrumental to outsiders if the correctness plans and ongoing progress\ncould be mentioned whenever a warning is made about unjustified and\ndangerous Bitcoin consensus rewrite attempts.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150214/67b27d76/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-15T17:11:01",
                "message_text_only": "On Sat, Feb 14, 2015 at 11:04:49AM -0800, Adam Back wrote:\n> Strongly with Peter on this.  That its highly complex to maintain strict\n> consensus between bitcoin versions, does not justify consensus rewrite\n> experiments; it tells you that the risk is exponentially worse and people\n> should use and rally around libconsensus.\n\nIt's worth remembering that one of the goals in writing - or to be more\nprecise, separating - libconsensus from the Bitcoin Core codebase is to\nmake it easier to maintain strict consensus between Bitcoin Core\nversions.\n\n> I would advise any bitcoin ecosystem part, wallet, user to not use software\n> with consensus protocol rw-writes nor variants, you WILL lose money.\n> \n> You could view bitcoin as a digital signature algorithm speculatively\n> tinkering with the algo is highly prone to binary failure mode and\n> unbounded funds loss.\n> \n> Want to be clear this is not a political nor emotive issue. It is a\n> critical technical requirement for security if users of software people\n> write.\n\nThe necessity of it isn't a political or emotive issue, but the\nconsequences are definitely political. Just not in the way that most of\nthe ecosystem appears to think.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000016b6444e463c7d92da1579360c5f71d4fbd3dab45d13990a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150215/f5659c7d/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-02-14T20:00:51",
                "message_text_only": "On Sat, Feb 14, 2015 at 3:23 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> Peter,\n> We have seen that the consensus critical code practically extends to Berkley\n> DB limits or OpenSSL laxness, therefore\n> it is inconceivable that a consensus library is not the same as Bitcoin\n> Core, less its P2P service rules, wallet and RPC server.\n\nRight now libconsensus' only dependency is openSSL. Most of the\ntesting in libsecp256k1 has been in signing rather than verifying\nsignatures (please, anyone with more knowledge in the library don't\nhesitate to correct me or clarify things). But eventually openSSL will\nbe completely replaced by libsecp256k1.\nIt does not store anything, 0.1 is just a dynamic library with a c API\nto a single function: VerifyScript().\nThis function saves the hassle of reimplementing signature checking\n(which is a really hard part) and reimplementing an interpreter that\nmust function in exactly the same way in many as many other nodes with\ndifferent software and/or hardware.\nGuido van Rossum can say \"some behaviours in python the language are\nnot specified, so it is ok if cpython and pypy do different things,\nthey're still both running python which is more abstract than any of\nits implementation\".\nBut a consensus system like bitcoin doesn't have the luxury of leaving\nconsensus rules unspecified. And the simplest way to fully specify a\nlanguage interpreter is by implementing it.\nBut coupling the consensus rules specification with a bigger project\nlike bitcoin core can result in implementation details of that bigger\nproject accidentally and unexpectedly becoming consensus rules. This\nis what happened with bdb and nobody wants that to happen again,\nthat's the whole point.\nNote that many parts of the bitcoin protocol (like the p2p messages)\nare NOT part of the consensus rules.\nYou can have a look at\nhttps://github.com/jtimon/bitcoin/commits/consensus2 and maybe you\nwould be surprised about how small they actually are. This branch is\nincomplete and still a mess that needs to be cleaned up. And none of\nthat is included in libconsensus yet.\nI was planning on writing a post here asking for feedback on the\ninterfaces for these higher level checks. I'm just putting the code\ntogether in the same module, but obviously class CCoinsViewCache\ncannot be an argument in functions of a c API.\n\n> The Core code base is unfriendly to feature extensions because of its\n> criticality, legacy design and ancient technology. It is also a commodity\n> that the ecosystem takes for granted and free.\n>\n> I honestly admire the core team that works and progresses within these\n> limits and perception.\n>\n> I am not willing to work within the core\u2019s legacy technology limits. Does it\n> mean I am dicking around? I think not.\n> It was my way to go down the rabbit hole by re-digging it and I created\n> successful commercial products on the way.\n\nNobody is attacking alternative implementations. This tool was created\nmostly with alternative implementations in mind.\nSo input from them it's very welcomed on how to continue libconsensus\n(or of course correct any flaws in verifyScript if there's any).\nI just wanted to wait to have some more code to make things easier to\nexplain (and have a clearer idea of it myself).\nThere's a more limited branch on \"next steps for libconsensus\" in #5669.\n\n> It is entirely rational for me to focus on innovation that uses the core as\n> a border router for this block chain.\n\nSure, I think he is complaining that at the moment that's probably the\nonly safe way to operate with alternative implementations and still\nhave full node guarantees.\n\n> I am rather thankful for the ideas of the side chains, that enable\n> innovation that is no longer measured on unapologetic compatibility with a\n> given code base, but its services to end user.\n\nSidechains are completely orthogonal to this discussion and, in fact,\nit would be good to have libconsensuses for sidechains too, since\ntheir nodes also need to come to consensus."
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-02-15T00:05:24",
                "message_text_only": "On Saturday, February 14, 2015 2:23:47 PM Tamas Blummer wrote:\n> We have seen that the consensus critical code practically extends to\n> Berkley DB limits or OpenSSL laxness, therefore it is inconceivable that a\n> consensus library is not the same as Bitcoin Core, less its P2P service\n> rules, wallet and RPC server.\n\nYou can describe 'A' from a group of A, B, C, D, E as \"the group minus B, C, \nD, E\", sure - but I don't see how this is relevant?\n\nUTXO storage is indeed consensus critical, as you say, but it is a lot simpler \nto get right than the rest combined. Thus, the end goal is to have a \nlibbitcoinconsensus with \"the rest\", and a (as of yet named) \nlibbitcoincompleteconsensus that ties in the canonical UTXO storage. Ideally, \nsoftware should use the latter when it is available, but if there is a strong \nreason to change UTXO storage, one can remain mostly-safe with just the \nformer. I'm not sure why this topic is of relevance, though...\n\nLuke"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-15T17:02:29",
                "message_text_only": "On Sat, Feb 14, 2015 at 03:23:47PM +0100, Tamas Blummer wrote:\n> Peter,\n> \n> You did not address me but libbitcoin. Since our story and your evaluation is probably similar, I chime in.\n> \n> On Feb 14, 2015, at 2:13 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > So stop wasting your time. Help get the consensus critical code out of\n> > Bitcoin Core and into a stand-alone libconsensus library,\n> \n> \n> We have seen that the consensus critical code practically extends to Berkley DB limits or OpenSSL laxness, therefore\n> it is inconceivable that a consensus library is not the same as Bitcoin Core, less its P2P service rules, wallet and RPC server.\n\nWallet and RPC server are definitely not consensus critical code.\n\nP2P service rules are weakly consensus critical, in that a failure to\nrelay valid blocks can in practice cause a loss of consensus. But\nrelaying valid blocks is very easy, and you only need sone relay\nmechanism out of many to work for consensus to be maintained.\n\nOpenSSL is getting replaced by libsecp256k1, a library designed for\nconsensus-critical applications.\n\nAs for databases, look at the good #bitcoin-wizards discussion yesterday\nfor strategies to make databases less relevant to consensus.\n\n> On Feb 14, 2015, at 2:13 PM, Peter Todd <pete at petertodd.org> wrote:\n> > \n> > Or you can be stereotypical programmers and dick around on github for\n> > the next ten years chasing stupid consensus bugs in code no-one uses.\n> \n> \n> \n> The Core code base is unfriendly to feature extensions because of its criticality, legacy design and ancient technology. It is also a commodity\n> that the ecosystem takes for granted and free. \n\nAre you referring to feature extensions to consensus critical code -\nlike my own CHECKLOCKTIMEVERIFY? - or extensions to code that isn't\nconsensus critical?\n\n> I honestly admire the core team that works and progresses within these limits and perception.\n> \n> I am not willing to work within the core\u2019s legacy technology limits. Does it mean I am dicking around? I think not.\n> It was my way to go down the rabbit hole by re-digging it and I created successful commercial products on the way.\n\nYes you are dicking around. The effort you're going to spend recreating\nthe core consensus code and getting it right is orders of magnitude more\nwork than figuring out how to use the foreign function interface in your\nchosen language, or at worse, just running Bitcoin Core to do validation\nand using RPC or the p2p protocol locally to track that state.\n\nDon't assume your prior experience with other commercial projects has\nany bearing on Bitcoin: consensus-critical crypto is a brand new field\nwithin software engineering with very unique requirements, pioneered by\nBitcoin itself.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000a37c901cf2ae6c281f47b237e9bf1d7268fb561b4332345\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150215/a6ad761c/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-15T17:13:06",
                "message_text_only": "On Feb 15, 2015, at 6:02 PM, Peter Todd <pete at petertodd.org> wrote:\n> Yes you are dicking around.\n\nI thought I was clear, that I am using Bitcoin Core as border router talking to its P2P interface.\n\nThe reimplementation of consensus code helped me to deeply understand the protocol, aids debugging\nand now comes handy to create a side chain.\n\n> Don't assume your prior experience with other commercial projects \n\n\nAcquire some before you claim its useless.\n\nTamas Blummer\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150215/07a0bd91/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150215/07a0bd91/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-15T17:21:09",
                "message_text_only": "On Sun, Feb 15, 2015 at 06:13:06PM +0100, Tamas Blummer wrote:\n> \n> On Feb 15, 2015, at 6:02 PM, Peter Todd <pete at petertodd.org> wrote:\n> > Yes you are dicking around.\n> \n> I thought I was clear, that I am using Bitcoin Core as border router talking to its P2P interface.\n\nAh, sorry, that wasn't clear to me.\n\n> The reimplementation of consensus code helped me to deeply understand the protocol, aids debugging\n> and now comes handy to create a side chain.\n\nIndeed, which is why I've done a lot of work on a reimplementation of\nthe Bitcoin scripting system as well:\n\nhttps://github.com/petertodd/python-bitcoinlib/blob/master/bitcoin/core/scripteval.py\n\nWhich has this cheery warning at the top:\n\n\"\"\"Script evaluation\n\nBe warned that there are highly likely to be consensus bugs in this\ncode; it is unlikely to match Satoshi Bitcoin exactly. Think carefully\nbefore using this module.\n\"\"\"\n\nI'll be adding a FFI interface to libconsensus in the future... and I\nprobably should make that warning scarier...\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000000ffb7a576b7aa5236c53f51ec07ccf174067beed3398056\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150215/4e06e2b9/attachment.sig>"
            },
            {
                "author": "joliver at airmail.cc",
                "date": "2015-02-15T21:48:59",
                "message_text_only": "On 2015-02-15 17:13, Tamas Blummer wrote:\n> On Feb 15, 2015, at 6:02 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n>> Yes you are dicking around.\n> \n> I thought I was clear, that I am using Bitcoin Core as border router\n> talking to its P2P interface.\n> \n> The reimplementation of consensus code helped me to deeply understand\n> the protocol, aids debugging\n> and now comes handy to create a side chain.\n> \n>> Don't assume your prior experience with other commercial projects\n> \n> Acquire some before you claim its useless.\n\n^^^ THIS ^^^\n\nCan we recognize Peter Todd's lack of respect and outright \nunprofesionalism here?\n\nPeter: Someone so young with so little actual experience shouldn't be \ngoing around so casually bad-mouthing the work of others or dismissing \npeople with decades more experience than you. Don't write long angry \nrants against the ideas of others when you haven't even read what they \nhave to say. Own up to it when you get caught doing it. You'll find out \nthe hard way that blackmailing people, even your clients, into using \nyour ideas may get you attention, but it'll make you a pariah in the \nlong run. (does encouraging illegal fraud belong on this mailing list?) \nRemember that twitter is public. Do you really want future employers \nreading jokes about pedophilia and rape? Do you want to be known for \nsnappy one liners and giving journalists headlines or writing solid code \nthat gets used by real businesses? (not \"DarkLeaks\") Are you trying to \nbe a rock star or team member?"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2015-02-19T03:32:05",
                "message_text_only": "On Sun, Feb 15, 2015 at 06:13:06PM +0100, Tamas Blummer wrote:\n> \n> On Feb 15, 2015, at 6:02 PM, Peter Todd <pete at petertodd.org> wrote:\n> > Yes you are dicking around.\n> \n> I thought I was clear, that I am using Bitcoin Core as border router talking to its P2P interface.\n> \n> The reimplementation of consensus code helped me to deeply understand the protocol, aids debugging\n> and now comes handy to create a side chain.\n\nThe work that Tamas did re-implementing is probably one of the most valuable\nthings he ever did.\n\nIt would significantly improve the quality of the consensus code if this\ncommunity would start treating it as a buggy & poorly defined proof-of-concept\nthat just happens to actually run, rather than some holy scripture upon which\nwe must never question (or change)\n\nI'm impressed by the secp256k1 work, and other modularity efforts, but at \nsome point main.cpp needs to get untangled, and have some critical review\nif bitcoin wants to remain relevant.\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-19T03:44:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 18 February 2015 22:32:05 GMT-05:00, Troy Benjegerdes <hozer at hozed.org> wrote:\n>The work that Tamas did re-implementing is probably one of the most\n>valuable\n>things he ever did.\n\n...in the same way going to university may be one of the more valuable things you ever do. But using the code resulting from that process over Satoshi Bitcoin/libconsensus is foolish.\n\n>It would significantly improve the quality of the consensus code if\n>this\n>community would start treating it as a buggy & poorly defined\n>proof-of-concept\n>that just happens to actually run, rather than some holy scripture upon\n>which\n>we must never question (or change)\n\nI suggest you actually look at the git commit history for the consensus-critical part of the Bitcoin Core codebase - so much work cleaning it up and refactoring has been done for v0.10.0/libconsensus that I think we're risking the introduction of a consensus bug unnecessarily and should slow down a little.\n\n\"holy scripture\" it ain't.\n\n>I'm impressed by the secp256k1 work, and other modularity efforts, but\n>at\n>some point main.cpp needs to get untangled, and have some critical\n>review\n>if bitcoin wants to remain relevant.\n\nAgain, this is exactly what people are working towards, at a speed that if anything is probably a bit too rapid.\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJU5Vwc\nAAoJEMCF8hzn9Lnco2EH/3bXwUTJ9iVLfYH0d/nvSXmt+C0Mpj5YFYr1h1vJv/3M\ne/By1ORRdre9fdJjgMmr3pj9lIiZfd/qEKEnrmULqBsoSd/5EmMjFB2gpZmQ1xyM\nndUyy56S2TFr//3hpJukvuG01X6q+GRGymlpk+fYfNlna3IjpARUabmlB9dKKRPI\n/XfyfpYyZh9G6DLsRg6+5BgKeW9OFRFm9aQY/yHiDgxpffIvYJ9QyOVm5vjtMgBQ\nbs0P7yuCUJ06xdSrYK1ylTcEbFyVIXa5w+AYQRHfx5aw7fZkD7q5pmwv8mWJfy8n\nIroSkmd1Erk0L3e+wJtAZn8S/6094IJ3v+2NajEC2hQ=\n=MfY/"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-19T05:22:41",
                "message_text_only": "Libconsensus will create an in-process alternative to the border router setup I currently advocate in a production environment.\nIt is not sufficient yet, since only checking scripts, but is the move I was long waiting for. \n\nI  launched a Lighthouse project to add Java Language Binding to lib consensus. Let's turn the debate to a constructive vote.\n\nSee on https://www.reddit.com/r/LighthouseProjects\n\nTamas Blummer\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/1ac23888/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/1ac23888/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-19T05:27:27",
                "message_text_only": "On Feb 19, 2015, at 6:22 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> I  launched a Lighthouse project to add Java Language Binding to lib consensus. Let's turn the debate to a constructive vote.\n> \n> See on https://www.reddit.com/r/LighthouseProjects\n\nI should have added the project description here, as above is only readable with lighthouse:\n\nJava Language Binding for Core Consensus Library\n\nBitcoin Core 0.10.0 comes with a library for external services that validates Bitcoin transactions with the code base of the core.\n\nThe proposed language binding would unleash innovation of JVM application developer without raising concern of a network fork through incompatible alternate implementations of the protocol.\n\nThe language binding would be written with lightweight, immutable, self contained data classes that use only language standard libraries, therefore suitable for any service framework.\n\n\nTamas Blummer\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/a81f3361/attachment.sig>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-02-19T14:03:48",
                "message_text_only": "On Wed, Feb 18, 2015 at 11:22 PM, Tamas Blummer <tamas at bitsofproof.com>\nwrote:\n\n> I  launched a Lighthouse project to add Java Language Binding to lib\n> consensus. Let's turn the debate to a constructive vote.\n\n\nFirst, I strongly disagree with voting here for reasons that I hope others\nwill elaborate on. Second, I think that squeezing all possible language\nbindings into a project is also unproductive. What is it that the webkit\npeople did for this? I think they had gobject bindings, and then all of the\nlanguages have their own gobject bridge to take advantage of that.\nNaturally the downside here is that gobject means you have a gtk\ndependency. A similar solution would be interesting and worth exploring,\nthough, especially if something similar without gtk exists.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/34fa6208/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-19T14:09:06",
                "message_text_only": "On Feb 19, 2015, at 3:03 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n> First, I strongly disagree with voting here for reasons that I hope others will elaborate on.\n\nI meant voting by pledging on the lighthouse project, not here on the list. Sorry for not stating this explicitelly.\n\n> Second, I think that squeezing all possible language bindings into a project is also unproductive.\n\nThe language binding would be an independent and separately hosted project only using the C interface of the libconsensus library.\n\nTamas Blummer\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/1d9a7a74/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-02-19T17:16:50",
                "message_text_only": "On Thu, Feb 19, 2015 at 3:09 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> On Feb 19, 2015, at 3:03 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n>> Second, I think that squeezing all possible language bindings into a project is also unproductive.\n>\n> The language binding would be an independent and separately hosted project only using the C interface of the libconsensus library.\n\nHe didn't said \"a project for all possible language bindings\", just\njava bindings. Other languages' bindings would be separate projects."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-19T17:30:10",
                "message_text_only": ">\n> He didn't said \"a project for all possible language bindings\", just\n> java bindings. Other languages' bindings would be separate projects.\n\n\nYes/no/sorta.\n\nJava/JNA bindings can be used from Python, Ruby, Javascript, PHP as well as\ndialects of Haskell, Lisp, Smalltalk and a bunch of more obscure languages\nlike Scala, Kotlin, Ceylon, etc.\n\nIt makes more sense to talk about bindings to particular runtimes these\ndays, rather than particular languages.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/ab49ce6a/attachment.html>"
            },
            {
                "author": "Sean Gilligan",
                "date": "2015-02-19T21:43:42",
                "message_text_only": "On 2/19/15 9:30 AM, Mike Hearn wrote:\n>\n> Java/JNA bindings can be used from Python, Ruby, Javascript, PHP as\n> well as dialects of Haskell, Lisp, Smalltalk and a bunch of more\n> obscure languages like Scala, Kotlin, Ceylon, etc.\n>\n> It makes more sense to talk about bindings to particular runtimes\n> these days, rather than particular languages.\n\nI'm definitely interested in helping to create and test JVM bindings.\nWhere should such a project be launched? As a subproject of bitcoinj?"
            },
            {
                "author": "Angel Leon",
                "date": "2015-02-19T22:53:27",
                "message_text_only": "I strongly suggest you take a look at swig for doing this. It's very\nstraightforward generating bindings in an automated fashion with it.\nhttp://www.swig.org/\n\nYou could probably  have it done in one or two days with Swig.\n\nOnce you do the Java bindings with it, it'll be a few adjustments and\nyou'll have bindings for other languages as well.\n\nhttp://twitter.com/gubatron\n\nOn Thu, Feb 19, 2015 at 4:43 PM, Sean Gilligan <sean at msgilligan.com> wrote:\n\n> On 2/19/15 9:30 AM, Mike Hearn wrote:\n> >\n> > Java/JNA bindings can be used from Python, Ruby, Javascript, PHP as\n> > well as dialects of Haskell, Lisp, Smalltalk and a bunch of more\n> > obscure languages like Scala, Kotlin, Ceylon, etc.\n> >\n> > It makes more sense to talk about bindings to particular runtimes\n> > these days, rather than particular languages.\n>\n> I'm definitely interested in helping to create and test JVM bindings.\n> Where should such a project be launched? As a subproject of bitcoinj?\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/b7eecf25/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-02-20T03:47:41",
                "message_text_only": "On Thu, Feb 19, 2015 at 6:30 PM, Mike Hearn <mike at plan99.net> wrote:\n>> He didn't said \"a project for all possible language bindings\", just\n>> java bindings. Other languages' bindings would be separate projects.\n>\n>\n> Yes/no/sorta.\n>\n> Java/JNA bindings can be used from Python, Ruby, Javascript, PHP as well as\n> dialects of Haskell, Lisp, Smalltalk and a bunch of more obscure languages\n> like Scala, Kotlin, Ceylon, etc.\n>\n> It makes more sense to talk about bindings to particular runtimes these\n> days, rather than particular languages.\n\nOh, I didn't knew that. Thanks for the clarification."
            }
        ],
        "thread_summary": {
            "title": "On Rewriting Bitcoin (was Re: Satoshi client: is a fork past 0.10 possible?)",
            "categories": [
                "Bitcoin-development",
                "Libbitcoin"
            ],
            "authors": [
                "Bryan Bishop",
                "Troy Benjegerdes",
                "Tamas Blummer",
                "Adam Back",
                "Mike Hearn",
                "Peter Todd",
                "joliver at airmail.cc",
                "Angel Leon",
                "Sean Gilligan",
                "Jorge Tim\u00f3n",
                "Luke Dashjr"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 36717
        }
    },
    {
        "title": "[Bitcoin-development] P2P tests: peers.dat's requested",
        "thread_messages": [
            {
                "author": "Ethan Heilman",
                "date": "2015-02-15T16:15:15",
                "message_text_only": "Hi All,\nI am currently running some tests on the peering system in Bitcoind for a\nresearch paper. We hope to develop improvements which we can share with the\ncommunity. A wide diversity of real peers.dat files would be very helpful.\nIf you are willing, please email me your peers.dat.\nThanks,\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150215/eec6b08a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "P2P tests: peers.dat's requested",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Ethan Heilman"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 475
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Core 0.10.0 released",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2015-02-16T08:59:05",
                "message_text_only": "Bitcoin Core version 0.10.0 is now available from:\n\n   https://bitcoin.org/bin/0.10.0/\n\nThis is a new major version release, bringing both new features and\nbug fixes.\n\nPlease report bugs using the issue tracker at github:\n\n   https://github.com/bitcoin/bitcoin/issues\n\nThe whole distribution is also available as torrent:\n\n   https://bitcoin.org/bin/0.10.0/bitcoin-0.10.0.torrent\n\n   magnet:?xt=urn:btih:170c61fe09dafecfbb97cb4dccd32173383f4e68&dn=0.10.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Fopen.demonii.com%3A1337&ws=https%3A%2F%2Fbitcoin.org%2Fbin%2F\n\nUpgrading and downgrading\n=========================\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nDowngrading warning\n---------------------\n\nBecause release 0.10.0 makes use of headers-first synchronization and parallel\nblock download (see further), the block files and databases are not\nbackwards-compatible with older versions of Bitcoin Core or other software:\n\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support.\n\nIf you want to be able to downgrade smoothly, make a backup of your entire data\ndirectory. Without this your node will need start syncing (or importing from\nbootstrap.dat) anew afterwards. It is possible that the data from a completely\nsynchronised 0.10 node may be usable in older versions as-is, but this is not\nsupported and may break as soon as the older version attempts to reindex.\n\nThis does not affect wallet forward or backward compatibility.\n\n\nNotable changes\n===============\n\nFaster synchronization\n----------------------\n\nBitcoin Core now uses 'headers-first synchronization'. This means that we first\nask peers for block headers (a total of 27 megabytes, as of December 2014) and\nvalidate those. In a second stage, when the headers have been discovered, we\ndownload the blocks. However, as we already know about the whole chain in\nadvance, the blocks can be downloaded in parallel from all available peers.\n\nIn practice, this means a much faster and more robust synchronization. On\nrecent hardware with a decent network link, it can be as little as 3 hours\nfor an initial full synchronization. You may notice a slower progress in the\nvery first few minutes, when headers are still being fetched and verified, but\nit should gain speed afterwards.\n\nA few RPCs were added/updated as a result of this:\n- `getblockchaininfo` now returns the number of validated headers in addition to\nthe number of validated blocks.\n- `getpeerinfo` lists both the number of blocks and headers we know we have in\ncommon with each peer. While synchronizing, the heights of the blocks that we\nhave requested from peers (but haven't received yet) are also listed as\n'inflight'.\n- A new RPC `getchaintips` lists all known branches of the block chain,\nincluding those we only have headers for.\n\nTransaction fee changes\n-----------------------\n\nThis release automatically estimates how high a transaction fee (or how\nhigh a priority) transactions require to be confirmed quickly. The default\nsettings will create transactions that confirm quickly; see the new\n'txconfirmtarget' setting to control the tradeoff between fees and\nconfirmation times. Fees are added by default unless the 'sendfreetransactions' \nsetting is enabled.\n\nPrior releases used hard-coded fees (and priorities), and would\nsometimes create transactions that took a very long time to confirm.\n\nStatistics used to estimate fees and priorities are saved in the\ndata directory in the `fee_estimates.dat` file just before\nprogram shutdown, and are read in at startup.\n\nNew command line options for transaction fee changes:\n- `-txconfirmtarget=n` : create transactions that have enough fees (or priority)\nso they are likely to begin confirmation within n blocks (default: 1). This setting\nis over-ridden by the -paytxfee option.\n- `-sendfreetransactions` : Send transactions as zero-fee transactions if possible \n(default: 0)\n\nNew RPC commands for fee estimation:\n- `estimatefee nblocks` : Returns approximate fee-per-1,000-bytes needed for\na transaction to begin confirmation within nblocks. Returns -1 if not enough\ntransactions have been observed to compute a good estimate.\n- `estimatepriority nblocks` : Returns approximate priority needed for\na zero-fee transaction to begin confirmation within nblocks. Returns -1 if not\nenough free transactions have been observed to compute a good\nestimate.\n\nRPC access control changes\n--------------------------\n\nSubnet matching for the purpose of access control is now done\nby matching the binary network address, instead of with string wildcard matching.\nFor the user this means that `-rpcallowip` takes a subnet specification, which can be\n\n- a single IP address (e.g. `1.2.3.4` or `fe80::0012:3456:789a:bcde`)\n- a network/CIDR (e.g. `1.2.3.0/24` or `fe80::0000/64`)\n- a network/netmask (e.g. `1.2.3.4/255.255.255.0` or `fe80::0012:3456:789a:bcde/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff`)\n\nAn arbitrary number of `-rpcallow` arguments can be given. An incoming connection will be accepted if its origin address\nmatches one of them.\n\nFor example:\n\n| 0.9.x and before                           | 0.10.x                                |\n|--------------------------------------------|---------------------------------------|\n| `-rpcallowip=192.168.1.1`                  | `-rpcallowip=192.168.1.1` (unchanged) |\n| `-rpcallowip=192.168.1.*`                  | `-rpcallowip=192.168.1.0/24`          |\n| `-rpcallowip=192.168.*`                    | `-rpcallowip=192.168.0.0/16`          |\n| `-rpcallowip=*` (dangerous!)               | `-rpcallowip=::/0` (still dangerous!) |\n\nUsing wildcards will result in the rule being rejected with the following error in debug.log:\n\n     Error: Invalid -rpcallowip subnet specification: *. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\n\n\nREST interface\n--------------\n\nA new HTTP API is exposed when running with the `-rest` flag, which allows\nunauthenticated access to public node data.\n\nIt is served on the same port as RPC, but does not need a password, and uses\nplain HTTP instead of JSON-RPC.\n\nAssuming a local RPC server running on port 8332, it is possible to request:\n- Blocks: http://localhost:8332/rest/block/*HASH*.*EXT*\n- Blocks without transactions: http://localhost:8332/rest/block/notxdetails/*HASH*.*EXT*\n- Transactions (requires `-txindex`): http://localhost:8332/rest/tx/*HASH*.*EXT*\n\nIn every case, *EXT* can be `bin` (for raw binary data), `hex` (for hex-encoded\nbinary) or `json`.\n\nFor more details, see the `doc/REST-interface.md` document in the repository.\n\nRPC Server \"Warm-Up\" Mode\n-------------------------\n\nThe RPC server is started earlier now, before most of the expensive\nintialisations like loading the block index.  It is available now almost\nimmediately after starting the process.  However, until all initialisations\nare done, it always returns an immediate error with code -28 to all calls.\n\nThis new behaviour can be useful for clients to know that a server is already\nstarted and will be available soon (for instance, so that they do not\nhave to start it themselves).\n\nImproved signing security\n-------------------------\n\nFor 0.10 the security of signing against unusual attacks has been\nimproved by making the signatures constant time and deterministic.\n\nThis change is a result of switching signing to use libsecp256k1\ninstead of OpenSSL. Libsecp256k1 is a cryptographic library\noptimized for the curve Bitcoin uses which was created by Bitcoin\nCore developer Pieter Wuille.\n\nThere exist attacks[1] against most ECC implementations where an\nattacker on shared virtual machine hardware could extract a private\nkey if they could cause a target to sign using the same key hundreds\nof times. While using shared hosts and reusing keys are inadvisable\nfor other reasons, it's a better practice to avoid the exposure.\n\nOpenSSL has code in their source repository for derandomization\nand reduction in timing leaks that we've eagerly wanted to use for a\nlong time, but this functionality has still not made its\nway into a released version of OpenSSL. Libsecp256k1 achieves\nsignificantly stronger protection: As far as we're aware this is\nthe only deployed implementation of constant time signing for\nthe curve Bitcoin uses and we have reason to believe that\nlibsecp256k1 is better tested and more thoroughly reviewed\nthan the implementation in OpenSSL.\n\n[1] https://eprint.iacr.org/2014/161.pdf\n\nWatch-only wallet support\n-------------------------\n\nThe wallet can now track transactions to and from wallets for which you know\nall addresses (or scripts), even without the private keys.\n\nThis can be used to track payments without needing the private keys online on a\npossibly vulnerable system. In addition, it can help for (manual) construction\nof multisig transactions where you are only one of the signers.\n\nOne new RPC, `importaddress`, is added which functions similarly to\n`importprivkey`, but instead takes an address or script (in hexadecimal) as\nargument.  After using it, outputs credited to this address or script are\nconsidered to be received, and transactions consuming these outputs will be\nconsidered to be sent.\n\nThe following RPCs have optional support for watch-only:\n`getbalance`, `listreceivedbyaddress`, `listreceivedbyaccount`,\n`listtransactions`, `listaccounts`, `listsinceblock`, `gettransaction`. See the\nRPC documentation for those methods for more information.\n\nCompared to using `getrawtransaction`, this mechanism does not require\n`-txindex`, scales better, integrates better with the wallet, and is compatible\nwith future block chain pruning functionality. It does mean that all relevant\naddresses need to added to the wallet before the payment, though.\n\nConsensus library\n-----------------\n\nStarting from 0.10.0, the Bitcoin Core distribution includes a consensus library.\n\nThe purpose of this library is to make the verification functionality that is\ncritical to Bitcoin's consensus available to other applications, e.g. to language\nbindings such as [python-bitcoinlib](https://pypi.python.org/pypi/python-bitcoinlib) or\nalternative node implementations.\n\nThis library is called `libbitcoinconsensus.so` (or, `.dll` for Windows).\nIts interface is defined in the C header [bitcoinconsensus.h](https://github.com/bitcoin/bitcoin/blob/0.10/src/script/bitcoinconsensus.h).\n\nIn its initial version the API includes two functions:\n\n- `bitcoinconsensus_verify_script` verifies a script. It returns whether the indicated input of the provided serialized transaction \ncorrectly spends the passed scriptPubKey under additional constraints indicated by flags\n- `bitcoinconsensus_version` returns the API version, currently at an experimental `0`\n\nThe functionality is planned to be extended to e.g. UTXO management in upcoming releases, but the interface\nfor existing methods should remain stable.\n\nStandard script rules relaxed for P2SH addresses\n------------------------------------------------\n\nThe IsStandard() rules have been almost completely removed for P2SH\nredemption scripts, allowing applications to make use of any valid\nscript type, such as \"n-of-m OR y\", hash-locked oracle addresses, etc.\nWhile the Bitcoin protocol has always supported these types of script,\nactually using them on mainnet has been previously inconvenient as\nstandard Bitcoin Core nodes wouldn't relay them to miners, nor would\nmost miners include them in blocks they mined.\n\nbitcoin-tx\n----------\n\nIt has been observed that many of the RPC functions offered by bitcoind are\n\"pure functions\", and operate independently of the bitcoind wallet. This\nincluded many of the RPC \"raw transaction\" API functions, such as\ncreaterawtransaction.\n\nbitcoin-tx is a newly introduced command line utility designed to enable easy\nmanipulation of bitcoin transactions. A summary of its operation may be\nobtained via \"bitcoin-tx --help\" Transactions may be created or signed in a\nmanner similar to the RPC raw tx API. Transactions may be updated, deleting\ninputs or outputs, or appending new inputs and outputs. Custom scripts may be\neasily composed using a simple text notation, borrowed from the bitcoin test\nsuite.\n\nThis tool may be used for experimenting with new transaction types, signing\nmulti-party transactions, and many other uses. Long term, the goal is to\ndeprecate and remove \"pure function\" RPC API calls, as those do not require a\nserver round-trip to execute.\n\nOther utilities \"bitcoin-key\" and \"bitcoin-script\" have been proposed, making\nkey and script operations easily accessible via command line.\n\nMining and relay policy enhancements\n------------------------------------\n\nBitcoin Core's block templates are now for version 3 blocks only, and any mining\nsoftware relying on its `getblocktemplate` must be updated in parallel to use\nlibblkmaker either version 0.4.2 or any version from 0.5.1 onward.\nIf you are solo mining, this will affect you the moment you upgrade Bitcoin\nCore, which must be done prior to BIP66 achieving its 951/1001 status.\nIf you are mining with the stratum mining protocol: this does not affect you.\nIf you are mining with the getblocktemplate protocol to a pool: this will affect\nyou at the pool operator's discretion, which must be no later than BIP66\nachieving its 951/1001 status.\n\nThe `prioritisetransaction` RPC method has been added to enable miners to\nmanipulate the priority of transactions on an individual basis.\n\nBitcoin Core now supports BIP 22 long polling, so mining software can be\nnotified immediately of new templates rather than having to poll periodically.\n\nSupport for BIP 23 block proposals is now available in Bitcoin Core's\n`getblocktemplate` method. This enables miners to check the basic validity of\ntheir next block before expending work on it, reducing risks of accidental\nhardforks or mining invalid blocks.\n\nTwo new options to control mining policy:\n- `-datacarrier=0/1` : Relay and mine \"data carrier\" (OP_RETURN) transactions\nif this is 1.\n- `-datacarriersize=n` : Maximum size, in bytes, we consider acceptable for\n\"data carrier\" outputs.\n\nThe relay policy has changed to more properly implement the desired behavior of not \nrelaying free (or very low fee) transactions unless they have a priority above the \nAllowFreeThreshold(), in which case they are relayed subject to the rate limiter.\n\nBIP 66: strict DER encoding for signatures\n------------------------------------------\n\nBitcoin Core 0.10 implements BIP 66, which introduces block version 3, and a new\nconsensus rule, which prohibits non-DER signatures. Such transactions have been\nnon-standard since Bitcoin v0.8.0 (released in February 2013), but were\ntechnically still permitted inside blocks.\n\nThis change breaks the dependency on OpenSSL's signature parsing, and is\nrequired if implementations would want to remove all of OpenSSL from the\nconsensus code.\n\nThe same miner-voting mechanism as in BIP 34 is used: when 751 out of a\nsequence of 1001 blocks have version number 3 or higher, the new consensus\nrule becomes active for those blocks. When 951 out of a sequence of 1001\nblocks have version number 3 or higher, it becomes mandatory for all blocks.\n\nBackward compatibility with current mining software is NOT provided, thus miners\nshould read the first paragraph of \"Mining and relay policy enhancements\" above.\n\n0.10.0 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect external\nbehavior, not code moves, refactors or string updates.\n\nRPC:\n- `f923c07` Support IPv6 lookup in bitcoin-cli even when IPv6 only bound on localhost\n- `b641c9c` Fix addnode \"onetry\": Connect with OpenNetworkConnection\n- `171ca77` estimatefee / estimatepriority RPC methods\n- `b750cf1` Remove cli functionality from bitcoind\n- `f6984e8` Add \"chain\" to getmininginfo, improve help in getblockchaininfo\n- `99ddc6c` Add nLocalServices info to RPC getinfo\n- `cf0c47b` Remove getwork() RPC call\n- `2a72d45` prioritisetransaction <txid> <priority delta> <priority tx fee>\n- `e44fea5` Add an option `-datacarrier` to allow users to disable relaying/mining data carrier transactions\n- `2ec5a3d` Prevent easy RPC memory exhaustion attack\n- `d4640d7` Added argument to getbalance to include watchonly addresses and fixed errors in balance calculation\n- `83f3543` Added argument to listaccounts to include watchonly addresses\n- `952877e` Showing 'involvesWatchonly' property for transactions returned by 'listtransactions' and 'listsinceblock'. It is only appended when the transaction involves a watchonly address\n- `d7d5d23` Added argument to listtransactions and listsinceblock to include watchonly addresses\n- `f87ba3d` added includeWatchonly argument to 'gettransaction' because it affects balance calculation\n- `0fa2f88` added includedWatchonly argument to listreceivedbyaddress/...account\n- `6c37f7f` `getrawchangeaddress`: fail when keypool exhausted and wallet locked\n- `ff6a7af` getblocktemplate: longpolling support\n- `c4a321f` Add peerid to getpeerinfo to allow correlation with the logs\n- `1b4568c` Add vout to ListTransactions output\n- `b33bd7a` Implement \"getchaintips\" RPC command to monitor blockchain forks\n- `733177e` Remove size limit in RPC client, keep it in server\n- `6b5b7cb` Categorize rpc help overview\n- `6f2c26a` Closely track mempool byte total. Add \"getmempoolinfo\" RPC\n- `aa82795` Add detailed network info to getnetworkinfo RPC\n- `01094bd` Don't reveal whether password is <20 or >20 characters in RPC\n- `57153d4` rpc: Compute number of confirmations of a block from block height\n- `ff36cbe` getnetworkinfo: export local node's client sub-version string\n- `d14d7de` SanitizeString: allow '(' and ')'\n- `31d6390` Fixed setaccount accepting foreign address\n- `b5ec5fe` update getnetworkinfo help with subversion\n- `ad6e601` RPC additions after headers-first\n- `33dfbf5` rpc: Fix leveldb iterator leak, and flush before `gettxoutsetinfo`\n- `2aa6329` Enable customising node policy for datacarrier data size with a -datacarriersize option\n- `f877aaa` submitblock: Use a temporary CValidationState to determine accurately the outcome of ProcessBlock\n- `e69a587` submitblock: Support for returning specific rejection reasons\n- `af82884` Add \"warmup mode\" for RPC server\n- `e2655e0` Add unauthenticated HTTP REST interface to public blockchain data\n- `683dc40` Disable SSLv3 (in favor of TLS) for the RPC client and server\n- `44b4c0d` signrawtransaction: validate private key\n- `9765a50` Implement BIP 23 Block Proposal\n- `f9de17e` Add warning comment to getinfo\n\nCommand-line options:\n- `ee21912` Use netmasks instead of wildcards for IP address matching\n- `deb3572` Add `-rpcbind` option to allow binding RPC port on a specific interface\n- `96b733e` Add `-version` option to get just the version\n- `1569353` Add `-stopafterblockimport` option\n- `77cbd46` Let -zapwallettxes recover transaction meta data\n- `1c750db` remove -tor compatibility code (only allow -onion)\n- `4aaa017` rework help messages for fee-related options\n- `4278b1d` Clarify error message when invalid -rpcallowip\n- `6b407e4` -datadir is now allowed in config files\n- `bdd5b58` Add option `-sysperms` to disable 077 umask (create new files with system default umask)\n- `cbe39a3` Add \"bitcoin-tx\" command line utility and supporting modules\n- `dbca89b` Trigger -alertnotify if network is upgrading without you\n- `ad96e7c` Make -reindex cope with out-of-order blocks\n- `16d5194` Skip reindexed blocks individually\n- `ec01243` --tracerpc option for regression tests\n- `f654f00` Change -genproclimit default to 1\n- `3c77714` Make -proxy set all network types, avoiding a connect leak\n- `57be955` Remove -printblock, -printblocktree, and -printblockindex\n- `ad3d208` remove -maxorphanblocks config parameter since it is no longer functional\n\nBlock and transaction handling:\n- `7a0e84d` ProcessGetData(): abort if a block file is missing from disk\n- `8c93bf4` LoadBlockIndexDB(): Require block db reindex if any `blk*.dat` files are missing\n- `77339e5` Get rid of the static chainMostWork (optimization)\n- `4e0eed8` Allow ActivateBestChain to release its lock on cs_main\n- `18e7216` Push cs_mains down in ProcessBlock\n- `fa126ef` Avoid undefined behavior using CFlatData in CScript serialization\n- `7f3b4e9` Relax IsStandard rules for pay-to-script-hash transactions\n- `c9a0918` Add a skiplist to the CBlockIndex structure\n- `bc42503` Use unordered_map for CCoinsViewCache with salted hash (optimization)\n- `d4d3fbd` Do not flush the cache after every block outside of IBD (optimization)\n- `ad08d0b` Bugfix: make CCoinsViewMemPool support pruned entries in underlying cache\n- `5734d4d` Only remove actualy failed blocks from setBlockIndexValid\n- `d70bc52` Rework block processing benchmark code\n- `714a3e6` Only keep setBlockIndexValid entries that are possible improvements\n- `ea100c7` Reduce maximum coinscache size during verification (reduce memory usage)\n- `4fad8e6` Reject transactions with excessive numbers of sigops\n- `b0875eb` Allow BatchWrite to destroy its input, reducing copying (optimization)\n- `92bb6f2` Bypass reloading blocks from disk (optimization)\n- `2e28031` Perform CVerifyDB on pcoinsdbview instead of pcoinsTip (reduce memory usage)\n- `ab15b2e` Avoid copying undo data (optimization)\n- `341735e` Headers-first synchronization\n- `afc32c5` Fix rebuild-chainstate feature and improve its performance\n- `e11b2ce` Fix large reorgs\n- `ed6d1a2` Keep information about all block files in memory\n- `a48f2d6` Abstract context-dependent block checking from acceptance\n- `7e615f5` Fixed mempool sync after sending a transaction\n- `51ce901` Improve chainstate/blockindex disk writing policy\n- `a206950` Introduce separate flushing modes\n- `9ec75c5` Add a locking mechanism to IsInitialBlockDownload to ensure it never goes from false to true\n- `868d041` Remove coinbase-dependant transactions during reorg\n- `723d12c` Remove txn which are invalidated by coinbase maturity during reorg\n- `0cb8763` Check against MANDATORY flags prior to accepting to mempool\n- `8446262` Reject headers that build on an invalid parent\n- `008138c` Bugfix: only track UTXO modification after lookup\n\nP2P protocol and network code:\n- `f80cffa` Do not trigger a DoS ban if SCRIPT_VERIFY_NULLDUMMY fails\n- `c30329a` Add testnet DNS seed of Alex Kotenko\n- `45a4baf` Add testnet DNS seed of Andreas Schildbach\n- `f1920e8` Ping automatically every 2 minutes (unconditionally)\n- `806fd19` Allocate receive buffers in on the fly\n- `6ecf3ed` Display unknown commands received\n- `aa81564` Track peers' available blocks\n- `caf6150` Use async name resolving to improve net thread responsiveness\n- `9f4da19` Use pong receive time rather than processing time\n- `0127a9b` remove SOCKS4 support from core and GUI, use SOCKS5\n- `40f5cb8` Send rejects and apply DoS scoring for errors in direct block validation\n- `dc942e6` Introduce whitelisted peers\n- `c994d2e` prevent SOCKET leak in BindListenPort()\n- `a60120e` Add built-in seeds for .onion\n- `60dc8e4` Allow -onlynet=onion to be used\n- `3a56de7` addrman: Do not propagate obviously poor addresses onto the network\n- `6050ab6` netbase: Make SOCKS5 negotiation interruptible\n- `604ee2a` Remove tx from AlreadyAskedFor list once we receive it, not when we process it\n- `efad808` Avoid reject message feedback loops\n- `71697f9` Separate protocol versioning from clientversion\n- `20a5f61` Don't relay alerts to peers before version negotiation\n- `b4ee0bd` Introduce preferred download peers\n- `845c86d` Do not use third party services for IP detection\n- `12a49ca` Limit the number of new addressses to accumulate\n- `35e408f` Regard connection failures as attempt for addrman\n- `a3a7317` Introduce 10 minute block download timeout\n- `3022e7d` Require sufficent priority for relay of free transactions\n- `58fda4d` Update seed IPs, based on bitcoin.sipa.be crawler data\n- `18021d0` Remove bitnodes.io from dnsseeds.\n\nValidation:\n- `6fd7ef2` Also switch the (unused) verification code to low-s instead of even-s\n- `584a358` Do merkle root and txid duplicates check simultaneously\n- `217a5c9` When transaction outputs exceed inputs, show the offending amounts so as to aid debugging\n- `f74fc9b` Print input index when signature validation fails, to aid debugging\n- `6fd59ee` script.h: set_vch() should shift a >32 bit value\n- `d752ba8` Add SCRIPT_VERIFY_SIGPUSHONLY (BIP62 rule 2) (test only)\n- `698c6ab` Add SCRIPT_VERIFY_MINIMALDATA (BIP62 rules 3 and 4) (test only)\n- `ab9edbd` script: create sane error return codes for script validation and remove logging\n- `219a147` script: check ScriptError values in script tests\n- `0391423` Discourage NOPs reserved for soft-fork upgrades\n- `98b135f` Make STRICTENC invalid pubkeys fail the script rather than the opcode\n- `307f7d4` Report script evaluation failures in log and reject messages\n- `ace39db` consensus: guard against openssl's new strict DER checks\n- `12b7c44` Improve robustness of DER recoding code\n- `76ce5c8` fail immediately on an empty signature\n\nBuild system:\n- `f25e3ad` Fix build in OS X 10.9\n- `65e8ba4` build: Switch to non-recursive make\n- `460b32d` build: fix broken boost chrono check on some platforms\n- `9ce0774` build: Fix windows configure when using --with-qt-libdir\n- `ea96475` build: Add mention of --disable-wallet to bdb48 error messages\n- `1dec09b` depends: add shared dependency builder\n- `c101c76` build: Add --with-utils (bitcoin-cli and bitcoin-tx, default=yes). Help string consistency tweaks. Target sanity check fix\n- `e432a5f` build: add option for reducing exports (v2)\n- `6134b43` Fixing condition 'sabotaging' MSVC build\n- `af0bd5e` osx: fix signing to make Gatekeeper happy (again)\n- `a7d1f03` build: fix dynamic boost check when --with-boost= is used\n- `d5fd094` build: fix qt test build when libprotobuf is in a non-standard path\n- `2cf5f16` Add libbitcoinconsensus library\n- `914868a` build: add a deterministic dmg signer \n- `2d375fe` depends: bump openssl to 1.0.1k\n- `b7a4ecc` Build: Only check for boost when building code that requires it\n\nWallet:\n- `b33d1f5` Use fee/priority estimates in wallet CreateTransaction\n- `4b7b1bb` Sanity checks for estimates\n- `c898846` Add support for watch-only addresses\n- `d5087d1` Use script matching rather than destination matching for watch-only\n- `d88af56` Fee fixes\n- `a35b55b` Dont run full check every time we decrypt wallet\n- `3a7c348` Fix make_change to not create half-satoshis\n- `f606bb9` fix a possible memory leak in CWalletDB::Recover\n- `870da77` fix possible memory leaks in CWallet::EncryptWallet\n- `ccca27a` Watch-only fixes\n- `9b1627d` [Wallet] Reduce minTxFee for transaction creation to 1000 satoshis\n- `a53fd41` Deterministic signing\n- `15ad0b5` Apply AreSane() checks to the fees from the network\n- `11855c1` Enforce minRelayTxFee on wallet created tx and add a maxtxfee option\n\nGUI:\n- `c21c74b` osx: Fix missing dock menu with qt5\n- `b90711c` Fix Transaction details shows wrong To:\n- `516053c` Make links in 'About Bitcoin Core' clickable\n- `bdc83e8` Ensure payment request network matches client network\n- `65f78a1` Add GUI view of peer information\n- `06a91d9` VerifyDB progress reporting\n- `fe6bff2` Add BerkeleyDB version info to RPCConsole\n- `b917555` PeerTableModel: Fix potential deadlock. #4296\n- `dff0e3b` Improve rpc console history behavior\n- `95a9383` Remove CENT-fee-rule from coin control completely\n- `56b07d2` Allow setting listen via GUI\n- `d95ba75` Log messages with type>QtDebugMsg as non-debug\n- `8969828` New status bar Unit Display Control and related changes\n- `674c070` seed OpenSSL PNRG with Windows event data\n- `509f926` Payment request parsing on startup now only changes network if a valid network name is specified\n- `acd432b` Prevent balloon-spam after rescan\n- `7007402` Implement SI-style (thin space) thoudands separator\n- `91cce17` Use fixed-point arithmetic in amount spinbox\n- `bdba2dd` Remove an obscure option no-one cares about\n- `bd0aa10` Replace the temporary file hack currently used to change Bitcoin-Qt's dock icon (OS X) with a buffer-based solution\n- `94e1b9e` Re-work overviewpage UI\n- `8bfdc9a` Better looking trayicon\n- `b197bf3` disable tray interactions when client model set to 0\n- `1c5f0af` Add column Watch-only to transactions list\n- `21f139b` Fix tablet crash. closes #4854\n- `e84843c` Broken addresses on command line no longer trigger testnet\n- `a49f11d` Change splash screen to normal window\n- `1f9be98` Disable App Nap on OSX 10.9+\n- `27c3e91` Add proxy to options overridden if necessary\n- `4bd1185` Allow \"emergency\" shutdown during startup\n- `d52f072` Don't show wallet options in the preferences menu when running with -disablewallet\n- `6093aa1` Qt: QProgressBar CPU-Issue workaround\n- `0ed9675` [Wallet] Add global boolean whether to send free transactions (default=true)\n- `ed3e5e4` [Wallet] Add global boolean whether to pay at least the custom fee (default=true)\n- `e7876b2` [Wallet] Prevent user from paying a non-sense fee\n- `c1c9d5b` Add Smartfee to GUI\n- `e0a25c5` Make askpassphrase dialog behave more sanely\n- `94b362d` On close of splashscreen interrupt verifyDB\n- `b790d13` English translation update\n- `8543b0d` Correct tooltip on address book page\n\nTests:\n- `b41e594` Fix script test handling of empty scripts\n- `d3a33fc` Test CHECKMULTISIG with m == 0 and n == 0\n- `29c1749` Let tx (in)valid tests use any SCRIPT_VERIFY flag\n- `6380180` Add rejection of non-null CHECKMULTISIG dummy values\n- `21bf3d2` Add tests for BoostAsioToCNetAddr\n- `b5ad5e7` Add Python test for -rpcbind and -rpcallowip\n- `9ec0306` Add CODESEPARATOR/FindAndDelete() tests\n- `75ebced` Added many rpc wallet tests\n- `0193fb8` Allow multiple regression tests to run at once\n- `92a6220` Hook up sanity checks\n- `3820e01` Extend and move all crypto tests to crypto_tests.cpp\n- `3f9a019` added list/get received by address/ account tests\n- `a90689f` Remove timing-based signature cache unit test\n- `236982c` Add skiplist unit tests\n- `f4b00be` Add CChain::GetLocator() unit test\n- `b45a6e8` Add test for getblocktemplate longpolling\n- `cdf305e` Set -discover=0 in regtest framework\n- `ed02282` additional test for OP_SIZE in script_valid.json\n- `0072d98` script tests: BOOLAND, BOOLOR decode to integer\n- `833ff16` script tests: values that overflow to 0 are true\n- `4cac5db` script tests: value with trailing 0x00 is true\n- `89101c6` script test: test case for 5-byte bools\n- `d2d9dc0` script tests: add tests for CHECKMULTISIG limits\n- `d789386` Add \"it works\" test for bitcoin-tx\n- `df4d61e` Add bitcoin-tx tests\n- `aa41ac2` Test IsPushOnly() with invalid push\n- `6022b5d` Make `script_{valid,invalid}.json` validation flags configurable\n- `8138cbe` Add automatic script test generation, and actual checksig tests\n- `ed27e53` Add coins_tests with a large randomized CCoinViewCache test\n- `9df9cf5` Make SCRIPT_VERIFY_STRICTENC compatible with BIP62\n- `dcb9846` Extend getchaintips RPC test\n- `554147a` Ensure MINIMALDATA invalid tests can only fail one way\n- `dfeec18` Test every numeric-accepting opcode for correct handling of the numeric minimal encoding rule\n- `2b62e17` Clearly separate PUSHDATA and numeric argument MINIMALDATA tests\n- `16d78bd` Add valid invert of invalid every numeric opcode tests\n- `f635269` tests: enable alertnotify test for Windows\n- `7a41614` tests: allow rpc-tests to get filenames for bitcoind and bitcoin-cli from the environment\n- `5122ea7` tests: fix forknotify.py on windows\n- `fa7f8cd` tests: remove old pull-tester scripts\n- `7667850` tests: replace the old (unused since Travis) tests with new rpc test scripts\n- `f4e0aef` Do signature-s negation inside the tests\n- `1837987` Optimize -regtest setgenerate block generation\n- `2db4c8a` Fix node ranges in the test framework\n- `a8b2ce5` regression test only setmocktime RPC call\n- `daf03e7` RPC tests: create initial chain with specific timestamps\n- `8656dbb` Port/fix txnmall.sh regression test\n- `ca81587` Test the exact order of CHECKMULTISIG sig/pubkey evaluation\n- `7357893` Prioritize and display -testsafemode status in UI\n- `f321d6b` Add key generation/verification to ECC sanity check\n- `132ea9b` miner_tests: Disable checkpoints so they don't fail the subsidy-change test\n- `bc6cb41` QA RPC tests: Add tests block block proposals\n- `f67a9ce` Use deterministically generated script tests\n- `11d7a7d` [RPC] add rpc-test for http keep-alive (persistent connections)\n- `34318d7` RPC-test based on invalidateblock for mempool coinbase spends\n- `76ec867` Use actually valid transactions for script tests\n- `c8589bf` Add actual signature tests\n- `e2677d7` Fix smartfees test for change to relay policy\n- `263b65e` tests: run sanity checks in tests too\n\nMiscellaneous:\n- `122549f` Fix incorrect checkpoint data for testnet3\n- `5bd02cf` Log used config file to debug.log on startup\n- `68ba85f` Updated Debian example bitcoin.conf with config from wiki + removed some cruft and updated comments\n- `e5ee8f0` Remove -beta suffix\n- `38405ac` Add comment regarding experimental-use service bits\n- `be873f6` Issue warning if collecting RandSeed data failed\n- `8ae973c` Allocate more space if necessary in RandSeedAddPerfMon\n- `675bcd5` Correct comment for 15-of-15 p2sh script size\n- `fda3fed` libsecp256k1 integration\n- `2e36866` Show nodeid instead of addresses in log (for anonymity) unless otherwise requested\n- `cd01a5e` Enable paranoid corruption checks in LevelDB >= 1.16\n- `9365937` Add comment about never updating nTimeOffset past 199 samples\n- `403c1bf` contrib: remove getwork-based pyminer (as getwork API call has been removed)\n- `0c3e101` contrib: Added systemd .service file in order to help distributions integrate bitcoind\n- `0a0878d` doc: Add new DNSseed policy\n- `2887bff` Update coding style and add .clang-format\n- `5cbda4f` Changed LevelDB cursors to use scoped pointers to ensure destruction when going out of scope\n- `b4a72a7` contrib/linearize: split output files based on new-timestamp-year or max-file-size\n- `e982b57` Use explicit fflush() instead of setvbuf()\n- `234bfbf` contrib: Add init scripts and docs for Upstart and OpenRC\n- `01c2807` Add warning about the merkle-tree algorithm duplicate txid flaw\n- `d6712db` Also create pid file in non-daemon mode\n- `772ab0e` contrib: use batched JSON-RPC in linarize-hashes (optimization)\n- `7ab4358` Update bash-completion for v0.10\n- `6e6a36c` contrib: show pull # in prompt for github-merge script\n- `5b9f842` Upgrade leveldb to 1.18, make chainstate databases compatible between ARM and x86 (issue #2293)\n- `4e7c219` Catch UTXO set read errors and shutdown\n- `867c600` Catch LevelDB errors during flush\n- `06ca065` Fix CScriptID(const CScript& in) in empty script case\n\nCredits\n=======\n\nThanks to everyone who contributed to this release:\n\n- 21E14\n- Adam Weiss\n- Aitor Pazos\n- Alexander Jeng\n- Alex Morcos\n- Alon Muroch\n- Andreas Schildbach\n- Andrew Poelstra\n- Andy Alness\n- Ashley Holman\n- Benedict Chan\n- Ben Holden-Crowther\n- Bryan Bishop\n- BtcDrak\n- Christian von Roques\n- Clinton Christian\n- Cory Fields\n- Cozz Lovan\n- daniel\n- Daniel Kraft\n- David Hill\n- Derek701\n- dexX7\n- dllud\n- Dominyk Tiller\n- Doug\n- elichai\n- elkingtowa\n- ENikS\n- Eric Shaw\n- Federico Bond\n- Francis GASCHET\n- Gavin Andresen\n- Giuseppe Mazzotta\n- Glenn Willen\n- Gregory Maxwell\n- gubatron\n- HarryWu\n- himynameismartin\n- Huang Le\n- Ian Carroll\n- imharrywu\n- Jameson Lopp\n- Janusz Lenar\n- JaSK\n- Jeff Garzik\n- JL2035\n- Johnathan Corgan\n- Jonas Schnelli\n- jtimon\n- Julian Haight\n- Kamil Domanski\n- kazcw\n- kevin\n- kiwigb\n- Kosta Zertsekel\n- LongShao007\n- Luke Dashjr\n- Mark Friedenbach\n- Mathy Vanvoorden\n- Matt Corallo\n- Matthew Bogosian\n- Micha\n- Michael Ford\n- Mike Hearn\n- mrbandrews\n- mruddy\n- ntrgn\n- Otto Allmendinger\n- paveljanik\n- Pavel Vasin\n- Peter Todd\n- phantomcircuit\n- Philip Kaufmann\n- Pieter Wuille\n- pryds\n- randy-waterhouse\n- R E Broadley\n- Rose Toomey\n- Ross Nicoll\n- Roy Badami\n- Ruben Dario Ponticelli\n- Rune K. Svendsen\n- Ryan X. Charles\n- Saivann\n- sandakersmann\n- SergioDemianLerner\n- shshshsh\n- sinetek\n- Stuart Cardall\n- Suhas Daftuar\n- Tawanda Kembo\n- Teran McKinney\n- tm314159\n- Tom Harding\n- Trevin Hofmann\n- Whit J\n- Wladimir J. van der Laan\n- Yoichi Hirai\n- Zak Wilcox\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\nAlso lots of thanks to the bitcoin.org website team David A. Harding and Saivann Carignan.\n\nWladimir"
            },
            {
                "author": "Tim Blokdijk",
                "date": "2015-02-17T21:47:29",
                "message_text_only": "Let me be the first to congratulate you people on the new release!\n\nOp 16-02-15 om 09:59 schreef Wladimir:\n> Bitcoin Core version 0.10.0 is now available from:\n>\n>     https://bitcoin.org/bin/0.10.0/\n>\n> This is a new major version release, bringing both new features and\n> bug fixes.\n>\n> ,,,"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.10.0 released",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tim Blokdijk",
                "Wladimir"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 37251
        }
    },
    {
        "title": "[Bitcoin-development] More precise type information in API reference",
        "thread_messages": [
            {
                "author": "Dario Teixeira",
                "date": "2015-02-17T13:00:49",
                "message_text_only": "Dear Bitcoin devs,\n\nI am the author of OCaml-bitcoin [1], a library offering an OCaml \ninterface\nto the official Bitcoin client API.  For those who may be unfamiliar \nwith it,\nOCaml is one of those functional programming languages with a very rich \nand\nexpressive type system [2].  Given its emphasis on safety, its \nindustrial\nusers are disproportionally found in the aerospace and financial \nsectors.\n\nNow, OCaml programmers care a lot about types, because experience has\ntaught them that deep down most programming errors are just type errors.\n From this stems my request: please consider defining more precisely the \ntype\ninformation associated with each API call in the JSON-RPC reference [3].\n\nTo give you a better idea of what I'm talking about, please take a look \nat\nthe API offered by OCaml-bitcoin [4], and the associated type \ndefinitions\n[5] (note that these have not been updated for Bitcoin Core 0.10 yet).\nI've created the type definitions from information gathered from the \nBitcoin\nwiki and from looking at the Bitcoin Core source-code.  I wouldn't be \nsurprised\nif it contains errors, because neither the source-code nor the wiki is \nvery\nprecise about the actual types being used.  As an example, consider type\nhexspk_t (\"hex representation of script public key\").  Is this really \nthe\nsame type used in both signrawtransaction and createmultisig?\n\nImproving this situation would pose a minimal burden on bitcoin devs: \nall\nthat would be required is defining the precise set of types used in the \nRPC\nAPI, and annotating the RPC calls either in the source-code itself or in \nthe\nAPI reference documentation.  It would make writing bindings such as \nmine\nfar easier and less error prone, and it would have the added advantage \nof\nbetter documenting the Bitcoin Core source-code itself.\n\nAlso, note that it is not necessary to extend this request to the deep\ndata structures returned by some API calls.  Consider for instance the\ngettransaction function of the OCaml-bitcoin API: it returns the raw \nJSON\nobject without any attempt to process it.  This is because that's a \nfairly\nniche facility, and the bindings would balloon in size if I were to \nprocess\nevery single large return object.  Instead, the bindings take the more\npragmatic stance of only processing the parameters and return results \nwhere\na strong type discipline is imperative.\n\nWhen I raised this issue on IRC a number of questions were posed.\nWhat follows is my attempt to answer them:\n\n   Q: What does it matter, if JSON only has a tiny set of types?\n\n   A: JSON being the serialisation format is irrelevant.  The client \nbindings\n      know that even if a public ECDSA key is serialised as a string, it \ndoes\n      not stop being a public ECDSA key, and should only be used where a \npublic\n      ECDSA key is expected.\n\n   Q: What does it matter if the types are not even distinguished in the \nC++\n      source of Bitcoin Core?\n\n   A: That is unfortunate, because it opens the door to bugs caused by \ntype\n      errors.  Moreover, even if the C++ source is \"stringly-typed\" and \ndoes\n      not enforce a strong type discipline, that does not mean that the \ntypes\n      are not there.  Even if a public and private key are both \nrepresented\n      as strings, can you use one where the other is expected?  If not, \nthen\n      they actually have different types!\n\n   Q: Isn't this a maintenance nightmare, given the changes to Bitcoin \ncore?\n\n   A: Actually, the most burdensome part is what motivated this message:\n      keeping track of the types used.  If the Bitcoin API reference were\n      more precise, keeping the bindings up-to-date would be trivial and\n      even mechanical, because the API is now fairly stable.\n\n\nThank you very much for your attention, and for all the work you guys \nput\ninto Bitcoin development.  It is much appreciated and not acknowledged\noften enough!\n\nBest regards,\nDario Teixeira\n\n[1] https://github.com/darioteixeira/ocaml-bitcoin\n[2] http://ocaml.org/learn/description.html\n[3] https://bitcoin.org/en/developer-reference#bitcoin-core-apis\n[4] http://ocaml-bitcoin.forge.ocamlcore.org/apidoc/Bitcoin.ENGINE.html\n[5] http://ocaml-bitcoin.forge.ocamlcore.org/apidoc/Bitcoin.html"
            },
            {
                "author": "Dario Teixeira",
                "date": "2015-02-17T13:33:28",
                "message_text_only": "Hi again,\n\nMy excuses: the formatting of the message seems to have been eaten\nby a Gremlin.  Here's a second attempt:\n\n=================================================================\n\nDear Bitcoin devs,\n\nI am the author of OCaml-bitcoin [1], a library offering an OCaml\ninterface to the official Bitcoin client API.  For those who may\nbe unfamiliar with it, OCaml is one of those functional programming\nlanguages with a very rich and expressive type system [2].  Given its\nemphasis on safety, its industrial users are disproportionally\nfound in the aerospace and financial sectors.\n\nNow, OCaml programmers care a lot about types, because experience\nhas taught them that deep down most programming errors are just\ntype errors.  From this stems my request: please consider defining\nmore precisely the type information associated with each API call\nin the JSON-RPC reference [3].\n\nTo give you a better idea of what I'm talking about, please take a\nlook at the API offered by OCaml-bitcoin [4], and the associated type\ndefinitions [5] (note that these have not been updated for Bitcoin\nCore 0.10 yet).  I've created the type definitions from information\ngathered from the Bitcoin wiki and from looking at the Bitcoin\nCore source-code.  I wouldn't be surprised if it contains errors,\nbecause neither the source-code nor the wiki is very precise about\nthe actual types being used.  As an example, consider type hexspk_t\n(\"hex representation of script public key\").  Is this really the\nsame type used in both signrawtransaction and createmultisig?\n\nImproving this situation would pose a minimal burden on bitcoin\ndevs: all that would be required is defining the precise set of\ntypes used in the RPC API, and annotating the RPC calls either\nin the source-code itself or in the API reference documentation.\nIt would make writing bindings such as mine far easier and less error\nprone, and it would have the added advantage of better documenting\nthe Bitcoin Core source-code itself.\n\nAlso, note that it is not necessary to extend this request to the\ndeep data structures returned by some API calls.  Consider for\ninstance the gettransaction function of the OCaml-bitcoin API:\nit returns the raw JSON object without any attempt to process it.\nThis is because that's a fairly niche facility, and the bindings\nwould balloon in size if I were to process every single large return\nobject.  Instead, the bindings take the more pragmatic stance of\nonly processing the parameters and return results where a strong\ntype discipline is imperative.\n\nWhen I raised this issue on IRC a number of questions were posed.\nWhat follows is my attempt to answer them:\n\n   Q: What does it matter, if JSON only has a tiny set of types?\n\n   A: JSON being the serialisation format is irrelevant.  The client\n      bindings know that even if a public ECDSA key is serialised as\n      a string, it does not stop being a public ECDSA key, and should\n      only be used where a public ECDSA key is expected.\n\n   Q: What does it matter if the types are not even distinguished in\n      the C++ source of Bitcoin Core?\n\n   A: That is unfortunate, because it opens the door to bugs caused by\n      type errors.  Moreover, even if the C++ source is \"stringly-typed\"\n      and does not enforce a strong type discipline, that does not mean\n      that the types are not there.  Even if a public and private key\n      are both represented as strings, can you use one where the other\n      is expected?  If not, then they actually have different types!\n\n   Q: Isn't this a maintenance nightmare, given the changes to Bitcoin\n      core?\n\n   A: Actually, the most burdensome part is what motivated this message:\n      keeping track of the types used.  If the Bitcoin API reference were\n      more precise, keeping the bindings up-to-date would be trivial and\n      even mechanical, because the API is now fairly stable.\n\n\nThank you very much for your attention, and for all the work you\nguys put into Bitcoin development.  It is much appreciated and not\nacknowledged often enough!\n\nBest regards,\nDario Teixeira\n\n[1] https://github.com/darioteixeira/ocaml-bitcoin\n[2] http://ocaml.org/learn/description.html\n[3] https://bitcoin.org/en/developer-reference#bitcoin-core-apis\n[4] http://ocaml-bitcoin.forge.ocamlcore.org/apidoc/Bitcoin.ENGINE.html\n[5] http://ocaml-bitcoin.forge.ocamlcore.org/apidoc/Bitcoin.html"
            },
            {
                "author": "David A. Harding",
                "date": "2015-02-17T15:50:12",
                "message_text_only": "On Tue, Feb 17, 2015 at 01:33:28PM +0000, Dario Teixeira wrote:\n> From this stems my request: please consider defining\n> more precisely the type information associated with each API call\n> in the JSON-RPC reference [3].\n\nHi Dario,\n\nI'm the primary author of the Bitcoin.org JSON-RPC reference, and I'd\nbe happy to help.\n\nDo you think it would be possible for you to submit a minimal pull\nrequest against the docs adding the type information you need to just\none RPC call?  From there we can see how much work it would take to\ngeneralize that across all 100+ printed pages worth of RPC docs.\n\nI've tried to make this as easy as possible: if you hover your mouse\nover the title of an RPC[1], an \"Edit\" link will appear that will take you\nto a page on GitHub to edit the file describing that RPC call.  Or you\ncan checkout[2] the website repository and edit the file locally; the\nindividual RPCs are in _includes/ref/bitcoin-core/rpcs/rpcs/\n\n    [1] For example, https://bitcoin.org/en/developer-reference#addmultisigaddress\n    [2] https://github.com/bitcoin/bitcoin.org\n\nIf you have any questions about the editing process, or anything else,\nplease feel free to email me at this address or PM harding on Freenode.\n\nThanks!,\n\n-Dave\n-- \nDavid A. Harding"
            },
            {
                "author": "Dario Teixeira",
                "date": "2015-02-17T18:46:17",
                "message_text_only": "Hi Dave,\n\n> I'm the primary author of the Bitcoin.org JSON-RPC reference, and I'd\n> be happy to help.\n\nThanks -- it is much appreciated!\n\n\n> Do you think it would be possible for you to submit a minimal pull\n> request against the docs adding the type information you need to just\n> one RPC call?  From there we can see how much work it would take to\n> generalize that across all 100+ printed pages worth of RPC docs.\n\nSure, I would be glad to help.  In fact, most of grunt work has\nalready been done for the OCaml-bitcoin API [1,2], which could be\nused as a guide even if you don't use OCaml (beware that it may\ncontain errors, though).\n\nBesides tweaking each RPC call, we would need to add a new section\nto the docs, to be placed before the RPC calls.  This List of\nTypes section would list all the custom types defined in the API,\nproviding a brief description for each and indicating the JSON type\nused for serialisation (almost invariantly \"string\", I reckon).\n\nBut before I submit a pull request, allow me to exemplify with\nAddMultiSigAddress:\n\nParameter #1: (no changes)\n\nParameter #2: I would keep \"array\" as the type of \"Keys or\nAddresses\".  If we follow the convention of using a pipe character to\nrepresent unions, then the type for \"Key or Address\" is not \"string\",\nbut \"public_key | p2pkh_address\".  This would also require adding\ntwo entries to the List of Types section, describing public_key and\np2pkh_address, and letting the users know that they are serialised\nas JSON strings.  (Note that the precise type of \"Keys or Addresses\"\nis actually \"Array [public_key | p2pkh_address]\".  However, since\nthe type of each element is also listed, this info is redundant\nand we can safely state it's just an array.)\n\nParameter #3: The type should be \"account\", obviously.\n\nResult: a p2sh_address.  If there is only one type of such P2SH\naddresses and they can be used interchangeably, then this would\nsuffice.  If however, there are actually several incompatible kinds\nof P2SH address, then we'd need to be more precise about which one\nwe mean.\n\nThanks again for your time!\nKind regards,\nDario Teixeira\n\n[1] http://ocaml-bitcoin.forge.ocamlcore.org/apidoc/Bitcoin.ENGINE.html\n[2] http://ocaml-bitcoin.forge.ocamlcore.org/apidoc/Bitcoin.html"
            }
        ],
        "thread_summary": {
            "title": "More precise type information in API reference",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Dario Teixeira",
                "David A. Harding"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 12055
        }
    },
    {
        "title": "[Bitcoin-development] What's what with addr relaying?",
        "thread_messages": [
            {
                "author": "Thy Shizzle",
                "date": "2015-02-19T11:33:11",
                "message_text_only": "Hi, plugging away at my C# Bitcoin node \"Lego.NET\" Thashiznets/Lego.NET now I am currently working on addr relaying. I am as we speak wiring up my DB in Azure, and ready to start plopping net_addrs in my DB, all good however I'm reading two different specification docs that seem to be wildly varying. I mean the first one here Developer Reference - Bitcoin\u00a0didn't mention that version message now has the 4 byte checksum and no\u00a0time in the net_addrs\u00a0and I was getting reject malformed\u00a0messages until I found the other document which informed me we now use the 4 byte checksum in version and no time in the net-addrs in version message. So\u00a0I solved that and here is the other doco. I have found other variances like one document said that the heartbeat AND disconnect were 30 minutes, but then in the other document I read that Heartbeat is 30 minutes and disconnect is 90 minutes which seems far more sensible so I went with that and modified my code. Is there any other variations between these two spec docos\u00a0that perhaps some of you devs know about that I need to look out for! Thanks! Shizzle.\n| \u00a0 |\n| \u00a0 |  | \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n| Thashiznets/Lego.NETLego.NET - A C# full node for processing the Bitcoin block chain |\n|  |\n| View on github.com | Preview by Yahoo |\n|  |\n| \u00a0 |\n\n \u00a0\n| \u00a0 |\n| \u00a0 |  | \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n| Developer Reference - BitcoinBETA: This documentation has not been extensively reviewed by Bitcoin experts and so likely contains numerous errors. Please use the Issue and Edit links on the bot... |\n|  |\n| View on bitcoin.org | Preview by Yahoo |\n|  |\n| \u00a0 |\n\n \u00a0\n| \u00a0 |\n| \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n| Satoshi Client Node Discovery - BitcoinContents 1 Overview 2 Handling Message \"getaddr\" 3 Discovery Methods 3.1 Local Client's External Address 3.2 Connect Callback Address 3.3 IRC Addresses 3.4 DNS Addresses  |\n|  |\n| View on en.bitcoin.it | Preview by Yahoo |\n|  |\n| \u00a0 |\n\n \u00a0 \u00a0\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/5fcc1b44/attachment.html>"
            },
            {
                "author": "Thy Shizzle",
                "date": "2015-02-19T11:37:17",
                "message_text_only": "Oh and I realised I stuffed up the subject and it talks about the addr relay but I actually answered my own question on the addr relaying, I had just miss interpreted one document I thought it was talking about subtracting 2 hours before relaying but I see we subtract 2 hours on receipt not relay\u00a0because the if it hadn't been seen for 60 minutes previously it now becomes 3 hours and we use but don't relay makes sense. \n\n     On Thursday, 19 February 2015, 22:33, Thy Shizzle <thashiznets at yahoo.com.au> wrote:\n   \n \n\n  Hi, plugging away at my C# Bitcoin node \"Lego.NET\" Thashiznets/Lego.NET now I am currently working on addr relaying. I am as we speak wiring up my DB in Azure, and ready to start plopping net_addrs in my DB, all good however I'm reading two different specification docs that seem to be wildly varying. I mean the first one here Developer Reference - Bitcoin\u00a0didn't mention that version message now has the 4 byte checksum and no\u00a0time in the net_addrs\u00a0and I was getting reject malformed\u00a0messages until I found the other document which informed me we now use the 4 byte checksum in version and no time in the net-addrs in version message. So\u00a0I solved that and here is the other doco. I have found other variances like one document said that the heartbeat AND disconnect were 30 minutes, but then in the other document I read that Heartbeat is 30 minutes and disconnect is 90 minutes which seems far more sensible so I went with that and modified my code. Is there any other variations between these two spec docos\u00a0that perhaps some of you devs know about that I need to look out for! Thanks! Shizzle.\n| \u00a0 |\n| \u00a0 |  | \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n| Thashiznets/Lego.NETLego.NET - A C# full node for processing the Bitcoin block chain |\n|  |\n| View on github.com | Preview by Yahoo |\n|  |\n| \u00a0 |\n\n \u00a0\n| \u00a0 |\n| \u00a0 |  | \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n| Developer Reference - BitcoinBETA: This documentation has not been extensively reviewed by Bitcoin experts and so likely contains numerous errors. Please use the Issue and Edit links on the bot... |\n|  |\n| View on bitcoin.org | Preview by Yahoo |\n|  |\n| \u00a0 |\n\n \u00a0\n| \u00a0 |\n| \u00a0 | \u00a0 | \u00a0 | \u00a0 | \u00a0 |\n| Satoshi Client Node Discovery - BitcoinContents 1 Overview 2 Handling Message \"getaddr\" 3 Discovery Methods 3.1 Local Client's External Address 3.2 Connect Callback Address 3.3 IRC Addresses 3.4 DNS Addresses  |\n|  |\n| View on en.bitcoin.it | Preview by Yahoo |\n|  |\n| \u00a0 |\n\n \u00a0 \u00a0\n\n \n   \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150219/fe073169/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "What's what with addr relaying?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Thy Shizzle"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4682
        }
    },
    {
        "title": "[Bitcoin-development] bloom filtering, privacy",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2015-02-20T12:44:24",
                "message_text_only": "I saw there was some discussion on this topic on the bitcoinj list.\n\n(I dont think I can post there without subscribing probably.)\n\nSomeone had posted about the lack of privacy provision from the\ncurrent implementation parameters and real-world factors similar to\ndescribed in this academic paper\n\nhttp://eprint.iacr.org/2014/763.pdf\n\nMike had posted a detailed response on the topic on why its complex\nand becomes bandwidth inefficient to improve it usefully.\n\nhttps://groups.google.com/forum/#!msg/bitcoinj/Ys13qkTwcNg/9qxnhwnkeoIJ\n\nThe basic summary of which I think is that its not even intended to\nprovide any practical privacy protection, its just about compacting\nthe query for a set of addresses.\n\nSo I was wondering what about changing to committing a bloom filter of\nthe addresses in the block.  Its seems surprising no one thought of it\nthat way before (as it seems obvious when you hear it) but that seems\nto address the privacy issues as the user can fetch the block bloom\nfilters and then scan it in complete privacy.  (Someone appeared on\nbitcoin wizards IRC a while back and made this observation.)\n\n>From there its a question of fetching the candidate TXOs.\n\nAm I missing anything?\n\nAdam"
            },
            {
                "author": "Wladimir",
                "date": "2015-02-20T16:18:10",
                "message_text_only": "Hello Adam,\n\nOn Fri, 20 Feb 2015, Adam Back wrote:\n\n> So I was wondering what about changing to committing a bloom filter of\n> the addresses in the block.  Its seems surprising no one thought of it\n> that way before (as it seems obvious when you hear it) but that seems\n> to address the privacy issues as the user can fetch the block bloom\n> filters and then scan it in complete privacy.  (Someone appeared on\n> bitcoin wizards IRC a while back and made this observation.)\n\nI have heard this idea of inverting the bloom filter before (possibly in \n#bitcoin-wizards), and as I see it it would indeed improve the privacy. \nApart from privacy it would also lower the burden for nodes. A block scan \nwith bloom filter is effectively a cheap DoS on a node.\n\nIn addition to that it will also avoid the 'transaction withholding \nattack' that is possible with the current bloom filtering, at least if the \nfilter is e.g. committed to in the block header.\n\nThe drawback would be overhead - the bloom filter per block will have a \nsignificant size (to avoid false positives), and the client would have to \nfetch entire blocks that have its transactions in it.\n\nI don't think that is so bad in practice, after all the % of blocks that \nwill have transactions for a given wallet will generally be low, so the \nblock size is amortized in a way. Of course, if the block size would be \nincreased this would become worse.\n\nWladimir"
            },
            {
                "author": "Tamas Blummer",
                "date": "2015-02-20T16:38:09",
                "message_text_only": "On Feb 20, 2015, at 5:18 PM, Wladimir <laanwj at gmail.com> wrote:\n\n> On Fri, 20 Feb 2015, Adam Back wrote:\n> \n>> So I was wondering what about changing to committing a bloom filter of\n>> the addresses in the block.  Its seems surprising no one thought of it\n>> that way before (as it seems obvious when you hear it) but that seems\n\nSuch a bloom filter was present in the Bits of Proof block store in its last \npublic version, so the idea obvious, but not new.\n\nIt did support well scanning for BIP32 addresses as the query set extends \nwhile progressing. \n\nTamas Blummer\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150220/b23aaa4c/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-20T16:54:06",
                "message_text_only": "Hey Adam,\n\n\n> Mike had posted a detailed response on the topic on why its complex\n> and becomes bandwidth inefficient to improve it usefully.\n>\n\nTo clarify, we *could* improve privacy and still preserve usefully high\nperformance, it's just a lot of complicated programming work. You need to\nfind out from the OS how much bandwidth you have to play with, for example,\nand do all the very complex tracking to surf the wave and keep yourself in\nroughly the right place.\n\nThe basic summary of which I think is that its not even intended to\n> provide any practical privacy protection, its just about compacting\n> the query for a set of addresses.\n>\n\nThe original intent of Bloom filtering was to allow both. We want our cake\nand we want to eat it.\n\nThe protocol can still do that, with sufficiently smart clients. The\nproblem is that being sufficiently smart in this regard has never come to\nthe top of the TODO list - users are always complaining about other things,\nso those things are what gets priority.\n\nIt's not IMO a protocol issue per se. It's a code complexity and manpower\nissue.\n\n\n> Its seems surprising no one thought of it\n> that way before (as it seems obvious when you hear it) but that seems\n> to address the privacy issues as the user can fetch the block bloom\n> filters and then scan it in complete privacy.\n\n\nAnd then what? So you know the block matches. But with reasonable FP rates\nevery block will match at least a few transactions (this is already the\ncase - the FP rate is low but high enough that we get back FPs on nearly\nevery block). So you end up downloading every block? That won't work.\n\nEventually, wallets need to stop doing linear scans of the entire block\nchain to find tx data. That worked fine when blocks were 10kb, it's still\nworking OK even though we scaled through two orders of magnitude, but we\ncan imagine that if we reach 10mb blocks then this whole approach will just\nbe too slow.\n\nThe main reason wallets are scanning the chain today (beyond lack of\nprotocol support for querying the UTXO set by script), is that they want to\nshow users time-ordered lists of transactions. Financial apps should show\nyou payment histories, everyone knows this, and without knowing roughly\nwhen a tx happened and which inputs/outputs were mine, providing a useful\nrendering is hard. Even with this data the UI is pretty useless, but at\nleast it's not actually missing.\n\nBy combining Subspace and BIP70 we can finally replace the payments list UI\nwith actual proper metadata that isn't extracted from the block chain, and\nat that point non-scanning architectures become a lot more deployable.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150220/3e911e29/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-02-20T17:35:47",
                "message_text_only": "Mike Hearn wrote:\n> Adam Back wrote:\n> > Its seems surprising no one thought of it\n> > that way before (as it seems obvious when you hear it) but that seems\n> > to address the privacy issues as the user can fetch the block bloom\n> > filters and then scan it in complete privacy.\n>\n> And then what? So you know the block matches. But with reasonable FP\n> rates every block will match at least a few transactions (this is already the\n> case - the FP rate is low but high enough that we get back FPs on nearly\n > every block). So you end up downloading every block?\n\nI mean because the user is scanning he can binary search which set of\naddresses from his wallet are possibly in the block and then request\nthe specific addresses and some will be false positives and some real,\nbut with the bloom commitment (and UTXO trie organised commitment) he\ncan verify that the positive hits are correct via the merkle path, and\nthat the false positives are not being wrongly withheld by obtaining\nmerkle path proof that they are not in the trie.\n\nAdam\n\nOn 20 February 2015 at 16:54, Mike Hearn <mike at plan99.net> wrote:\n> Hey Adam,\n>\n>>\n>> Mike had posted a detailed response on the topic on why its complex\n>> and becomes bandwidth inefficient to improve it usefully.\n>\n>\n> To clarify, we could improve privacy and still preserve usefully high\n> performance, it's just a lot of complicated programming work. You need to\n> find out from the OS how much bandwidth you have to play with, for example,\n> and do all the very complex tracking to surf the wave and keep yourself in\n> roughly the right place.\n>\n>> The basic summary of which I think is that its not even intended to\n>> provide any practical privacy protection, its just about compacting\n>> the query for a set of addresses.\n>\n>\n> The original intent of Bloom filtering was to allow both. We want our cake\n> and we want to eat it.\n>\n> The protocol can still do that, with sufficiently smart clients. The problem\n> is that being sufficiently smart in this regard has never come to the top of\n> the TODO list - users are always complaining about other things, so those\n> things are what gets priority.\n>\n> It's not IMO a protocol issue per se. It's a code complexity and manpower\n> issue.\n>\n>>\n>> Its seems surprising no one thought of it\n>> that way before (as it seems obvious when you hear it) but that seems\n>> to address the privacy issues as the user can fetch the block bloom\n>> filters and then scan it in complete privacy.\n>\n>\n> And then what? So you know the block matches. But with reasonable FP rates\n> every block will match at least a few transactions (this is already the case\n> - the FP rate is low but high enough that we get back FPs on nearly every\n> block). So you end up downloading every block? That won't work.\n>\n> Eventually, wallets need to stop doing linear scans of the entire block\n> chain to find tx data. That worked fine when blocks were 10kb, it's still\n> working OK even though we scaled through two orders of magnitude, but we can\n> imagine that if we reach 10mb blocks then this whole approach will just be\n> too slow.\n>\n> The main reason wallets are scanning the chain today (beyond lack of\n> protocol support for querying the UTXO set by script), is that they want to\n> show users time-ordered lists of transactions. Financial apps should show\n> you payment histories, everyone knows this, and without knowing roughly when\n> a tx happened and which inputs/outputs were mine, providing a useful\n> rendering is hard. Even with this data the UI is pretty useless, but at\n> least it's not actually missing.\n>\n> By combining Subspace and BIP70 we can finally replace the payments list UI\n> with actual proper metadata that isn't extracted from the block chain, and\n> at that point non-scanning architectures become a lot more deployable."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-20T17:43:20",
                "message_text_only": "Ah, I see, I didn't catch that this scheme relies on UTXO commitments\n(presumably with Mark's PATRICIA tree system?).\n\nIf you're doing a binary search over block contents then does that imply\nmultiple protocol round trips per synced block? I'm still having trouble\nvisualising how this works. Perhaps you could write down an example run for\nme.\n\nHow does it interact with the need to download chains rather than\nindividual transactions, and do so without round-tripping to the remote\nnode for each block? Bloom filtering currently pulls down blocks in batches\nwithout much client/server interaction and that is useful for performance.\n\nLike I said, I'd rather just junk the whole notion of chain scanning and\nget to a point where clients are only syncing headers. If nodes were\ncalculating a script->(outpoint, merkle branch) map in LevelDB and allowing\nrange queries over it, then you could quickly pull down relevant UTXOs\nalong with the paths that indicated they did at one point exist. Nodes can\nstill withhold evidence that those outputs were spent, but the same is true\ntoday and in practice this doesn't seem to be an issue.\n\nThe primary advantage of that approach is it does not require a change to\nthe consensus rules. But there are lots of unanswered questions about how\nit interacts with HD lookahead and so on.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150220/f8a10aca/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-02-20T17:59:03",
                "message_text_only": "The idea is not mine, some random guy appeared in #bitcoin-wizards one\nday and said something about it, and lots of people reacted, wow why\ndidnt we think about that before.\n\nIt goes something like each block contains a commitment to a bloom\nfilter that has all of the addresses in the block stored in it.\n\nNow the user downloads the headers and bloom data for all blocks.  The\nknow the bloom data is correct in an SPV sense because of the\ncommitment.  They can scan it offline and locally by searching for\naddresses from their wallet in it.  Not sure off hand what is the most\nefficient strategy, probably its pretty fast locally anyway.\n\nNow they know (modulo false positives) which addresses of theirs maybe\nin the block.\n\nSo now they ask a full node for merkle paths + transactions for the\naddresses from the UTXO set from the block(s) that it was found in.\n\nSeparately UTXO commitments could optionally be combined to improve\nsecurity in two ways:\n\n- the normal SPV increase that you can also see that the transaction\nis actually in the last blocks UTXO set.\n\n- to avoid withholding by the full node, if the UTXO commitment is a\ntrie (sorted) they can expect a merkle path to lexically adjacent\nnodes either side of where the claimed missing address would be as a\nproof that there really are no transactions for that address in the\nblock.  (Distinguishing false positive from node withholding)\n\nAdam\n\nOn 20 February 2015 at 17:43, Mike Hearn <mike at plan99.net> wrote:\n> Ah, I see, I didn't catch that this scheme relies on UTXO commitments\n> (presumably with Mark's PATRICIA tree system?).\n>\n> If you're doing a binary search over block contents then does that imply\n> multiple protocol round trips per synced block? I'm still having trouble\n> visualising how this works. Perhaps you could write down an example run for\n> me.\n>\n> How does it interact with the need to download chains rather than individual\n> transactions, and do so without round-tripping to the remote node for each\n> block? Bloom filtering currently pulls down blocks in batches without much\n> client/server interaction and that is useful for performance.\n>\n> Like I said, I'd rather just junk the whole notion of chain scanning and get\n> to a point where clients are only syncing headers. If nodes were calculating\n> a script->(outpoint, merkle branch) map in LevelDB and allowing range\n> queries over it, then you could quickly pull down relevant UTXOs along with\n> the paths that indicated they did at one point exist. Nodes can still\n> withhold evidence that those outputs were spent, but the same is true today\n> and in practice this doesn't seem to be an issue.\n>\n> The primary advantage of that approach is it does not require a change to\n> the consensus rules. But there are lots of unanswered questions about how it\n> interacts with HD lookahead and so on.\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-20T18:10:29",
                "message_text_only": ">\n> So now they ask a full node for merkle paths + transactions for the\n> addresses from the UTXO set from the block(s) that it was found in.\n\n\nThis is the part where I get lost. How does this improve privacy? If I have\nto specify which addresses are mine in this block, to get the tx data, the\nnode learns which addresses are mine at this point, no?\n\nAlso, are you saying each block needs a record of the entire UTXO set at\nthe time the block was made? I'm not sure how to parse this sentence.\n\nCould you please walk me through precisely what happens and what data is\nsent, once I learn that a block has interesting data in it?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150220/22f6eadc/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-02-20T18:20:59",
                "message_text_only": "On Fri, Feb 20, 2015 at 5:59 PM, Adam Back <adam at cypherspace.org> wrote:\n> So now they ask a full node for merkle paths + transactions for the\n> addresses from the UTXO set from the block(s) that it was found in.\n\nUse of the words \"UTXO set\" here is probably confusing people as it's\nlikely to make people think of the complete verification state. In\nthis case it's simply referring to block-local data. (and thus avoids\nthe large IO overheads of an actual UTXO set).\n\nIt's a straight forward idea: there is a scriptpubkey bitmap per block\nwhich is committed. Users can request the map, and be SPV confident\nthat they received a faithful one. If there are hits, they can request\nthe block and be confident there was no censoring.\n\nIt's possible to tree structure additional layers to the bitmap, so\none can incrementally query to trade0off map size for false request\noverhead, it's not clear to me how much of a win this would be for\nnormal parameters.. It's also possible to extract the txout list for\nthe whole block and commit to that too so it's possible to request\njust the outputs and get a faithful copy of them, which is _much_\nsmaller than the block overall."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-20T19:03:26",
                "message_text_only": ">\n> It's a straight forward idea: there is a scriptpubkey bitmap per block\n> which is committed. Users can request the map, and be SPV confident\n> that they received a faithful one. If there are hits, they can request\n> the block and be confident there was no censoring.\n\n\nOK, I see now, thanks Gregory. You're right, the use of UTXO set in that\ncontext was confusing me.\n\nIf I go back to when we first did Bloom filtering and imagine the same\nproposal being made, I guess I would have been wondering about the\nfollowing issues. Perhaps they have solutions:\n\n1. Miners have to upgrade to generate the per-block filters. Any block that\ndoesn't have such a filter has to be downloaded in full, still. So it would\nhave taken quite a while for the bandwidth savings to materialise.\n\n2. If checking the filter isn't a consensus rule, any miner who builds a\nwrong filter breaks the entire SPV userbase. With per-node filtering, a\nmalicious or wrong node breaks an individual sync, but if the wallet user\nnotices they don't seem to be properly synchronised they can just press\n\"Rescan chain\" and most likely get fixed. In practice broken nodes have\nnever been reported, but it's worth considering.\n\n3. Downloading full blocks is still a lot of data. If you have a wallet\nthat receives tips a couple of times per day, and you open your wallet once\nper week, then with 1mb blocks you would be downloading ~14mb of data each\ntime. Pretty pokey even on a desktop. Much sadness if you're on mobile.\n\n4. Header size is constant, but per-block filters wouldn't be. So even the\nnull sync would download more data as the network got busier. Of course\nBloom filtering has the same scaling problem, but only between hard disk ->\nRAM -> CPU rather than across the network.\n\n5. Is it really more private? Imagine we see a hit in block 100, so we\ndownload the full block and find our transaction. But now we must also\nlearn when that transaction is spent, so we can keep the wallet-local UTXO\nset up to date. So we scan forward and see another hit in block 105, so now\nwe download block 105. The remote node can now select all transactions in\nblock 105 that spend transactions in block 100 and narrow down which txs\nare ours. If we are watching a wallet that does multi-sends then it feels\nlike this problem gets much worse.\n\n\n\nI'd really like to find a solution that has O(1) scaling on sync. If we see\nnodes just as sources of UTXO data then shovelling the client (tx, existing\nmerkle path) pairs keyed off script prefixes would (with one additional\nindex) be O(1) and provide the same security guarantees as Bloom filtering\ntoday. It creates lots of other problems to solve, but at least it would\nscale into the forseeable future.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150220/b4aa6d94/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-02-21T05:12:54",
                "message_text_only": "Seems like Greg & I may be saying different things.  Maybe I am\nmisunderstanding something at the wire level or in size/scalability\nbut what I was trying to say is I think simpler.\n\nBy UTXO commitment I mean a merkle tree of unspent addresses is\ncommitted in each block.  Also a bloom filter containing addresses in\nthe block is committed.\n\nNow the user downloads the bloom filter for each block, and searches\nit locally.  They see which addresses of theirs maybe in the block\n(with some false positives).\n\nThen they make fresh random connections to different nodes and request\ndownload of the respective individual transactions from the full node.\nThe node can respond either a) here is the transaction and here is its\nmerkle path in the merkle tree (this is the way SPV works today); or\nb) there is no such transaction, this is a false positive, and here is\na pair of merkle trie paths in the UTXO commitment (a trie) that\nproves the full node is not withholding and its true that no such\ntransaction is in the block.\n\nAdditionally with UTXO commitments in case a) the user can keep up to\ndate with the chain tip and request from the full node a merkle path\nin the UTXO commitment to show that the coin is still unspent.\n(Otherwise you get long range attacks where someone can grind away\nuntil they belatedly find a PoW on an old low hashrate block with UTXO\nand fool an SPV node they know the address for into accepting a spend\nof something long spent).\n\nAbout privacy the node can make different random connections to\ndifferent nodes to fetch addresses.  Nothing is leaked by downloading\nthe bloom filter.  Scanning happens locally.  The full node cant\ncorrelate the addresses as belonging to the same person by correlating\nthe download requests for them, because they are made via different\nnodes.  Its not a surprise nor privacy revealing that someone would\nwant to check receipt of the funds.  The limit is the interactive\nnature of ToR which isnt very secure against pervasive monitoring.\nBut for basic full-node passive attack resistant privacy pretty good.\n\nContrast with increasing the false positive on bloom queries: here the\nfull node can test correlation (modulo the false positive ratio) and\ncombine that with network flow analysis to narrow down who the user\nmight be.  Plus query size and privacy are in conflict.  Plus the\nquery size has to be continually retuned to even create a reliable\nfalse positive rate relative to the current UTXO set.  Is that is even\nhappening now (other than parameter sets)?\n\nAbout the bitmap:\n\n>Greg Maxwell wrote:\n>> there is a scriptpubkey bitmap per block\n>> which is committed. Users can request the map, and be SPV confident\n>> that they received a faithful one. If there are hits, they can request\n>> the block and be confident there was no censoring.\n\nhow does the SPV client know what the bits in this map mean to scan?\nI presume these would be one bit per address and one would need to\nknow the full UTXO set in order to know whats in there.  I am not sure\nan SPV node would want the hit of keeping up to date with the full\nUTXO set?\n\ns/address/scriptpubkey for accuracy)\n\nAdam\n\nOn 20 February 2015 at 19:03, Mike Hearn <mike at plan99.net> wrote:\n>> It's a straight forward idea: there is a scriptpubkey bitmap per block\n>> which is committed. Users can request the map, and be SPV confident\n>> that they received a faithful one. If there are hits, they can request\n>> the block and be confident there was no censoring.\n>\n>\n> OK, I see now, thanks Gregory. You're right, the use of UTXO set in that\n> context was confusing me.\n>\n> If I go back to when we first did Bloom filtering and imagine the same\n> proposal being made, I guess I would have been wondering about the following\n> issues. Perhaps they have solutions:\n>\n> 1. Miners have to upgrade to generate the per-block filters. Any block that\n> doesn't have such a filter has to be downloaded in full, still. So it would\n> have taken quite a while for the bandwidth savings to materialise.\n>\n> 2. If checking the filter isn't a consensus rule, any miner who builds a\n> wrong filter breaks the entire SPV userbase. With per-node filtering, a\n> malicious or wrong node breaks an individual sync, but if the wallet user\n> notices they don't seem to be properly synchronised they can just press\n> \"Rescan chain\" and most likely get fixed. In practice broken nodes have\n> never been reported, but it's worth considering.\n>\n> 3. Downloading full blocks is still a lot of data. If you have a wallet that\n> receives tips a couple of times per day, and you open your wallet once per\n> week, then with 1mb blocks you would be downloading ~14mb of data each time.\n> Pretty pokey even on a desktop. Much sadness if you're on mobile.\n>\n> 4. Header size is constant, but per-block filters wouldn't be. So even the\n> null sync would download more data as the network got busier. Of course\n> Bloom filtering has the same scaling problem, but only between hard disk ->\n> RAM -> CPU rather than across the network.\n>\n> 5. Is it really more private? Imagine we see a hit in block 100, so we\n> download the full block and find our transaction. But now we must also learn\n> when that transaction is spent, so we can keep the wallet-local UTXO set up\n> to date. So we scan forward and see another hit in block 105, so now we\n> download block 105. The remote node can now select all transactions in block\n> 105 that spend transactions in block 100 and narrow down which txs are ours.\n> If we are watching a wallet that does multi-sends then it feels like this\n> problem gets much worse.\n>\n>\n>\n> I'd really like to find a solution that has O(1) scaling on sync. If we see\n> nodes just as sources of UTXO data then shovelling the client (tx, existing\n> merkle path) pairs keyed off script prefixes would (with one additional\n> index) be O(1) and provide the same security guarantees as Bloom filtering\n> today. It creates lots of other problems to solve, but at least it would\n> scale into the forseeable future.\n>\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-21T13:28:27",
                "message_text_only": "Let's put the UTXO commitments/anti-fraud proofs to one side for a moment.\nI would like to see them happen one day, but they aren't critical to these\nprotocols and are just proving to be a distraction.\n\n\n\n> Then they make fresh random connections to different nodes and request\n> download of the respective individual transactions from the full node.\n>\n\n...\n\nAbout privacy the node can make different random connections to\n> different nodes to fetch addresses ..... The full node cant\n> correlate the addresses as belonging to the same person by correlating\n> the download requests for them, because they are made via different\n> nodes.\n\n\nApologies for the wall of text, but I don't think this will work nor solve\nany real problem. And I must justify such a strong statement clearly.\n\n*First: technical issues*\n\nWhen you download the per-block Bloom filter and test, what you get back is\na set of script elements (addresses, keys, OP_RETURN tags etc). But then in\nthe next step you are saying that you connect to random peers and request\nindividual transactions. We don't know that at this point. All we know are\na set of addresses that possibly matched. So I think what you mean is\n\"wallets connect to random peers and request transactions in block N that\nmatch a given set of addresses\".\n\nThis is what Bloom filtering already does, of course. Doing the test\nagainst the per-block filter first doesn't seem to buy us much because with\nthousands of transactions per block, even a very tiny FP rate will still\ntrigger a match on every single one.\n\nThe second problem I see is that we can't do this in parallel because of\nthe following edge case: wallet contains key K and someone sends it money\nusing an OP_CHECKSIG output. The input which spends this output does not\ncontain any predictable data, thus we do not know what to look for in the\nfollowing blocks to detect a spend of it until we have seen the first\ntransaction and know its hash.\n\nIn practice this means we must either scan through the chain in sequence\nand update our matching criteria if we see such an output (this is what the\nBloom filtering protocol already does server-side), or we must constrain\nthe user such that output scripts always force repetition of predictable\ndata - this is what mostly happens today due to pay-to-address outputs, but\nnot always, and correctness is more important than completeness.\n\nIf we can't do it in parallel then we must suffer a node round-trip for\nevery single block we traverse, because we can't request long runs of\nblocks with a single command. That latency will kill performance dead. It's\na non starter.\n\nBut let's imagine we don't care about OP_CHECKSIG outputs and are willing\nto ignore them. There are cases where they are the best and most efficient\ntechnical solution, but let's put that to one side.\n\nThe primary difference after making the above changes are that no one node\ngets a filter containing *all* our keys and addresses. I don't think a per\nblock pre-test filter would gain us much efficiency so from a privacy\nperspective this is what it boils down to - sharding of the scan.\n\nBut we can already do this with the current Bloom filtering protocol.\nBitcoinJ doesn't do so because having multiple parallel scans uses up\nnetwork IOPs which are a resource of unknown quantity, and because stepping\nthrough the chain in parallel with multiple peers complicates the chain\nsync implementation quite a bit.\n\n*Second: this doesn't solve any real problem*\n\nWho cares about collecting Bloom filters off the wire?\n\nCommercial fraudsters? Doubtful. There are much easier ways to steal money.\n\nSpies? Yes! Without a doubt NSA/GCHQ are building or have built databases\nof IP addresses to Bitcoin addresses and are correlating it via XKEYSCORE\nwith other identifiable information.\n\nHowever, just requesting data from different nodes doesn't help with that,\nbecause they are doing DPI and can still see all the connections, so can\nstill combine all the filters or received transactions.\n\nAh, you say, but we're requesting everything via Tor.\n\nYes, about that. We've implemented that already. Some wallets even use it\nby default, like Alon & Chris' Bitcoin Authenticator wallet. It's just one\nline of code to activate.\n\nUnfortunately there are severe practical problems to using Tor:\n\n   1. If you don't have a warm consensus then booting it up is very slow.\n   We're already slower than our competitors like blockchain.info and\n   VISA/MasterCard, we can't make this any worse.\n\n   This one is possibly not that big a deal and can be solved with more\n   technical tricks.\n\n   2. Bitcoin Core's DoS strategy means anyone can block all of Tor quite\n   trivially. So we'd need some complicated fallback mechanism to disable Tor\n   remotely, in case someone did this.\n\n   3. Bitcoin wire traffic isn't encrypted or authenticated so it makes it\n   much easier for trolls to tamper with lots of wire traffic at once, whereas\n   without Tor it's much harder.\n\nLet's ignore the fact that the Tor project insists on poking the law\nenforcement bear with rusty nails, and has been receiving tipoffs about\nplans to seize directory authorities. How much Bitcoin wallets should rely\non Tor sticking around is a debate for some other time.\n\nThere's a much simpler way to fix all of this - add opportunistic\nencryption to the wire protocol.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/fc8e7cd5/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-02-21T14:30:15",
                "message_text_only": "If you want to be constructive and index transactions that are not\np2sh but non-simple and contain checksig so the address is visible,\nyou could do that with a block bloom filter also.\n\nI wasnt sure if the comments about the need to batch requests was\nabout downloading headers & filters, or about transactions, there is\nno harm downloading headers & bloom filters without Tor - there is no\nidentity nor addresses revealed by doing so.  So over Tor you would\njust be fetching transactions that match the address.\n\nFor downloading transactions unless you frequently receive\ntransactions you wont be fetching every block.  Or are you assuming\nbloom filters dialled up to the point of huge false positives?  You\nsaid otherwise.\n\nMid-term I'd say you want some basic request tunneling as part of\nbitcoin, that maybe isnt Tor, to avoid sharing their fate if Tor\ncontroversies are a risk to Tor service.  Some of the bitcoin-Tor\nspecific weak points could maybe then be addressed.\n\nRelatedly I think bitcoin could do with a store-and-forward message\nbus with privacy and strong reliability via redundancy (but less\nredundancy maybe than consensus all-nodes must receiving and agree and\nstore forever).  That  provides an efficient store-and-forward SPV\nreceivable stealth-address solution that doesnt suck: send the\nrecipient their payment, if they like it they broadcast it themselves.\nAs a bonus store-and-forward message mixes are better able to provide\nmeaningful network privacy than interactive privacy networks.  You\ncould spend over the same channel\n\nYou seem to be saying at one point that Tor is useless against\npervasive eavesdropper threat model (which I am not sure I agree with,\nminimally it makes them work for the info and adds uncertainty; and\nnot been paying super close attention but I think some of the Snowden\nreleases suggest Tor is a net win) and secondly that other types of\nattackers are disinterested (how do we know that?) or maybe that you\ndont care about privacy vs them (maybe some users do!)\n\nIt would certainly be nice to get real privacy from a wider range of\nattackers but nothing (current situation) is clearly worse; using\nblock bloom filters we'd make the pervasive case harder work, and the\nnosy full node learn nothing.\n\nAdam\n\nOn 21 February 2015 at 13:28, Mike Hearn <mike at plan99.net> wrote:\n> Let's put the UTXO commitments/anti-fraud proofs to one side for a moment. I\n> would like to see them happen one day, but they aren't critical to these\n> protocols and are just proving to be a distraction.\n>\n>\n>>\n>> Then they make fresh random connections to different nodes and request\n>> download of the respective individual transactions from the full node.\n>\n>\n> ...\n>\n>> About privacy the node can make different random connections to\n>> different nodes to fetch addresses ..... The full node cant\n>> correlate the addresses as belonging to the same person by correlating\n>> the download requests for them, because they are made via different\n>> nodes.\n>\n>\n> Apologies for the wall of text, but I don't think this will work nor solve\n> any real problem. And I must justify such a strong statement clearly.\n>\n> First: technical issues\n>\n> When you download the per-block Bloom filter and test, what you get back is\n> a set of script elements (addresses, keys, OP_RETURN tags etc). But then in\n> the next step you are saying that you connect to random peers and request\n> individual transactions. We don't know that at this point. All we know are a\n> set of addresses that possibly matched. So I think what you mean is \"wallets\n> connect to random peers and request transactions in block N that match a\n> given set of addresses\".\n>\n> This is what Bloom filtering already does, of course. Doing the test against\n> the per-block filter first doesn't seem to buy us much because with\n> thousands of transactions per block, even a very tiny FP rate will still\n> trigger a match on every single one.\n>\n> The second problem I see is that we can't do this in parallel because of the\n> following edge case: wallet contains key K and someone sends it money using\n> an OP_CHECKSIG output. The input which spends this output does not contain\n> any predictable data, thus we do not know what to look for in the following\n> blocks to detect a spend of it until we have seen the first transaction and\n> know its hash.\n>\n> In practice this means we must either scan through the chain in sequence and\n> update our matching criteria if we see such an output (this is what the\n> Bloom filtering protocol already does server-side), or we must constrain the\n> user such that output scripts always force repetition of predictable data -\n> this is what mostly happens today due to pay-to-address outputs, but not\n> always, and correctness is more important than completeness.\n>\n> If we can't do it in parallel then we must suffer a node round-trip for\n> every single block we traverse, because we can't request long runs of blocks\n> with a single command. That latency will kill performance dead. It's a non\n> starter.\n>\n> But let's imagine we don't care about OP_CHECKSIG outputs and are willing to\n> ignore them. There are cases where they are the best and most efficient\n> technical solution, but let's put that to one side.\n>\n> The primary difference after making the above changes are that no one node\n> gets a filter containing all our keys and addresses. I don't think a per\n> block pre-test filter would gain us much efficiency so from a privacy\n> perspective this is what it boils down to - sharding of the scan.\n>\n> But we can already do this with the current Bloom filtering protocol.\n> BitcoinJ doesn't do so because having multiple parallel scans uses up\n> network IOPs which are a resource of unknown quantity, and because stepping\n> through the chain in parallel with multiple peers complicates the chain sync\n> implementation quite a bit.\n>\n> Second: this doesn't solve any real problem\n>\n> Who cares about collecting Bloom filters off the wire?\n>\n> Commercial fraudsters? Doubtful. There are much easier ways to steal money.\n>\n> Spies? Yes! Without a doubt NSA/GCHQ are building or have built databases of\n> IP addresses to Bitcoin addresses and are correlating it via XKEYSCORE with\n> other identifiable information.\n>\n> However, just requesting data from different nodes doesn't help with that,\n> because they are doing DPI and can still see all the connections, so can\n> still combine all the filters or received transactions.\n>\n> Ah, you say, but we're requesting everything via Tor.\n>\n> Yes, about that. We've implemented that already. Some wallets even use it by\n> default, like Alon & Chris' Bitcoin Authenticator wallet. It's just one line\n> of code to activate.\n>\n> Unfortunately there are severe practical problems to using Tor:\n>\n> If you don't have a warm consensus then booting it up is very slow. We're\n> already slower than our competitors like blockchain.info and\n> VISA/MasterCard, we can't make this any worse.\n>\n> This one is possibly not that big a deal and can be solved with more\n> technical tricks.\n>\n> Bitcoin Core's DoS strategy means anyone can block all of Tor quite\n> trivially. So we'd need some complicated fallback mechanism to disable Tor\n> remotely, in case someone did this.\n>\n> Bitcoin wire traffic isn't encrypted or authenticated so it makes it much\n> easier for trolls to tamper with lots of wire traffic at once, whereas\n> without Tor it's much harder.\n>\n> Let's ignore the fact that the Tor project insists on poking the law\n> enforcement bear with rusty nails, and has been receiving tipoffs about\n> plans to seize directory authorities. How much Bitcoin wallets should rely\n> on Tor sticking around is a debate for some other time.\n>\n> There's a much simpler way to fix all of this - add opportunistic encryption\n> to the wire protocol."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-21T14:45:07",
                "message_text_only": ">\n> For downloading transactions unless you frequently receive\n> transactions you wont be fetching every block.  Or are you assuming\n> bloom filters dialled up to the point of huge false positives?  You\n> said otherwise.\n>\n\nWell, what I mean is, bitcoinj already gets criticised for having very low\nFP rates, but even with those rates we're applying them to hundreds of\nthousands of transactions per sync. So it's still enough FPs to trigger at\nleast one per block, often several, yet people tell us this isn't enough to\ngive meaningful privacy.\n\n\n> Relatedly I think bitcoin could do with a store-and-forward message\n> bus with privacy and strong reliability via redundancy (but less\n> redundancy maybe than consensus all-nodes must receiving and agree and\n> store forever).\n>\n\nYup, see here:\n\nhttps://www.bitcoinauthenticator.org/subspace/\nhttps://groups.google.com/forum/#!topic/bitcoinj/_S15jo5mcDI\n\nSubspace looks like it's developing into what we need.\n\n\n> You seem to be saying at one point that Tor is useless against\n> pervasive eavesdropper threat model\n\n\nNo, Tor is effective against in that threat model. What I meant is that\nwithout Tor, someone doing wire intercepts isn't going to be fazed by using\nmultiple peers together, and with Tor it's not clear that syncing from\nmultiple peers in parallel gives much an additional win.\n\nAlso, getting Tor practical enough to activate by default is tricky. Though\nthe same people who are doing Subspace are trying it out to see what\nhappens.\n\nsecondly that other types of attackers are disinterested (how do we know\n> that?) or maybe that you\n> dont care about privacy vs them (maybe some users do!)\n>\n\nSome of my opinions are based on experience of HTTPS deployments, where\nmany of the same issues apply.\n\n\n> It would certainly be nice to get real privacy from a wider range of\n> attackers but nothing (current situation) is clearly worse; using\n> block bloom filters we'd make the pervasive case harder work, and the\n> nosy full node learn nothing.\n\n\nYes, but what's the best way to fix that?\n\nThe calculation goes like this:  we have ~80 hours of hacking time to spend\non privacy this quarter. Do we:\n\na) Do wire encryption\nb) Make Bloom filter clients smarter\nc) Optimise Tor\nd) Do a new PIR protocol from scratch and possibly run out of time having\nfailed to launch\n\nOf these (d) is the least appealing to me, especially because I don't feel\nlike submitting SPV related stuff to Bitcoin Core any more. If I were to\nwork on the protocol it'd be in the context of Bitcoin XT, which rules out\nconsensus changes or other things that rely on miners. Wire encryption\nwould probably raise the bar for our spooky friends quite a lot, with\nminimal effort. The ROI looks good, compared to more complex PIR.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/6cf36a54/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-02-20T17:50:11",
                "message_text_only": "On Fri, Feb 20, 2015 at 4:54 PM, Mike Hearn <mike at plan99.net> wrote:\n> And then what? So you know the block matches. But with reasonable FP rates\n> every block will match at least a few transactions (this is already the case\n\nThis approach needs a filter set with a lower FP rate. It doesn't\ndepend on having a high FP rate for privacy (which is good, since\ncounting on filter false positives seems to more or less fail to\ndeliver actual privacy in any case.)\n\nLarger filters mean a somewhat higher baseline bandwidth, though when\nusers do not reuse addresses and have more addresses than there are\ntxouts in the block the gap is narrower.\n\n> Ah, I see, I didn't catch that this scheme relies on UTXO commitments\n\nThis is talking about a committed bloom filter. Not a committed UTXO set."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-20T17:53:12",
                "message_text_only": ">\n> This is talking about a committed bloom filter. Not a committed UTXO set.\n>\n\nI read the following comment to mean it requires the UTXO commitments.\nOtherwise I'm not sure how you prove absence of withholding with just\ncurrent block structures+an extra filter included in the block:\n\nbut with the bloom commitment (and UTXO trie organised commitment) he\n> can verify that the positive hits are correct via the merkle path, and\n> that the false positives are not being wrongly withheld by obtaining\n> merkle path proof that they are not in the trie\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150220/e51367e4/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2015-02-21T16:03:53",
                "message_text_only": "Adam seems to be making sense to me. Only querying a single node when an\naddress in my wallet matches the block filter seems to be pretty\nefficient. The downside is it relies entirely on Tor for privacy, but\nthen again it's not the only aspect of spv clients that require it for\nprivacy (there's broadcasting for example).\n\nAnd on a related note, if we eventually do end up receiving bip70\npayments directly, we still need to query for block inclusion and that\nwould seem to be an easy way to do it.\n\nOn 02/20/2015 12:53 PM, Mike Hearn wrote:\n>\n>     This is talking about a committed bloom filter. Not a committed\n>     UTXO set.\n>\n>\n> I read the following comment to mean it requires the UTXO commitments.\n> Otherwise I'm not sure how you prove absence of withholding with just\n> current block structures+an extra filter included in the block:\n>\n>     but with the bloom commitment (and UTXO trie organised commitment) he\n>     can verify that the positive hits are correct via the merkle path, and\n>     that the false positives are not being wrongly withheld by obtaining\n>     merkle path proof that they are not in the trie \n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/431334aa/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-21T16:47:43",
                "message_text_only": ">\n> Adam seems to be making sense to me. Only querying a single node when an\n> address in my wallet matches the block filter seems to be pretty efficient.\n>\n\nNo, I think it's less efficient (for the client).\n\nQuick sums:  blocks with 1500 transactions in them are common today. But\nBitcoin is growing. Let's imagine a system 10x larger than today. Doesn't\nseem implausible to reach that in the next 5-10 years, so 15,000\ntransactions. Each transaction has multiple elements we might want to match\n(addresses, keys, etc).\n\nLet's say the average tx contains 5 unique keys/elements. That's the base\ncase of {1 input, 2 outputs} without address reuse, plus fudged up a bit\nfor multi-sends then down a bit again for address reuse.\n\n15,000*5=75,000 unique elements per block. With an FP rate of 0.1% we get:\n\nhttp://hur.st/bloomfilter?n=75000&p=0.001\n\n131.63KB per block extra overhead.\n\n144 blocks in a day, so that's 18mb of data per day's worth of sync to pull\ndown over the network. If you don't start your wallet for a week that's 126\nmegabytes of data just to get started.\n\nAffordable, yes (in the west). Fast enough to be competitive? Doubtful. I\ndon't believe that even in five years mobiles will be pulling down and\nprocessing that much data within a few seconds, not even in developed\ncountries.\n\nBut like I said, I don't see why it matters. Anyone who is watching the\nwire close to you learns which transactions are yours, still, so it doesn't\nstop intelligence agencies. Anyone who is running a node learns which\ntransactions in the requested block were yours and thus can follow the tx\nchain to learn which other transactions might be yours too, no different to\ntoday. If you connect to a single node and say \"give me the transactions\nsending money to key A in block N\", it doesn't matter if you then don't\nrequest block N+6 from the same peer - they know you will request it\neventually anyway, just by virtue of the fact that one of the transactions\nthey gave you was spent in that block.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/b3766e52/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2015-02-21T18:38:05",
                "message_text_only": "Yeah that overhead is pretty high. I wasn't thinking about 10 years out.\n\nOn Sat, Feb 21, 2015, 11:47 AM Mike Hearn <mike at plan99.net> wrote:\n\n> Adam seems to be making sense to me. Only querying a single node when an\n>> address in my wallet matches the block filter seems to be pretty efficient.\n>>\n>\n> No, I think it's less efficient (for the client).\n>\n> Quick sums:  blocks with 1500 transactions in them are common today. But\n> Bitcoin is growing. Let's imagine a system 10x larger than today. Doesn't\n> seem implausible to reach that in the next 5-10 years, so 15,000\n> transactions. Each transaction has multiple elements we might want to match\n> (addresses, keys, etc).\n>\n> Let's say the average tx contains 5 unique keys/elements. That's the base\n> case of {1 input, 2 outputs} without address reuse, plus fudged up a bit\n> for multi-sends then down a bit again for address reuse.\n>\n> 15,000*5=75,000 unique elements per block. With an FP rate of 0.1% we get:\n>\n> http://hur.st/bloomfilter?n=75000&p=0.001\n>\n> 131.63KB per block extra overhead.\n>\n> 144 blocks in a day, so that's 18mb of data per day's worth of sync to\n> pull down over the network. If you don't start your wallet for a week\n> that's 126 megabytes of data just to get started.\n>\n> Affordable, yes (in the west). Fast enough to be competitive? Doubtful. I\n> don't believe that even in five years mobiles will be pulling down and\n> processing that much data within a few seconds, not even in developed\n> countries.\n>\n> But like I said, I don't see why it matters. Anyone who is watching the\n> wire close to you learns which transactions are yours, still, so it doesn't\n> stop intelligence agencies. Anyone who is running a node learns which\n> transactions in the requested block were yours and thus can follow the tx\n> chain to learn which other transactions might be yours too, no different to\n> today. If you connect to a single node and say \"give me the transactions\n> sending money to key A in block N\", it doesn't matter if you then don't\n> request block N+6 from the same peer - they know you will request it\n> eventually anyway, just by virtue of the fact that one of the transactions\n> they gave you was spent in that block.\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/feecdda4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bloom filtering, privacy",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tamas Blummer",
                "Wladimir",
                "Adam Back",
                "Mike Hearn",
                "Gregory Maxwell",
                "Chris Pacia"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 49677
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin ATM",
        "thread_messages": [
            {
                "author": "Fikret AKIN",
                "date": "2015-02-20T16:19:31",
                "message_text_only": "Hello,\n\nI want to improve the Bitcoin ATM, which way do you think I should continue\nDo you have suggestions?\n\n \n\n \n\nThanks,\n\nFikret AKIN\n\n \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150220/d7a5997b/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-20T17:36:27",
                "message_text_only": "Hi Fikret,\n\nThis is the wrong mailing list for such questions. Most Bitcoin ATM's are\ncommercial products anyway and don't accept contributors. If you find one\nthat is different, it's better to contact them directly.\n\n\n\nOn Fri, Feb 20, 2015 at 5:19 PM, Fikret AKIN <info at fikretakin.com> wrote:\n\n> Hello,\n>\n> I want to improve the Bitcoin ATM, which way do you think I should\n> continue Do you have suggestions?\n>\n>\n>\n>\n>\n> Thanks,\n>\n> Fikret AKIN\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150220/674ac2f0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin ATM",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Fikret AKIN"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1622
        }
    },
    {
        "title": "[Bitcoin-development] Request for a new BIP number (and discussion): Improved HD wallet generation.",
        "thread_messages": [
            {
                "author": "\u6728\u30ce\u4e0b\u3058\u3087\u306a",
                "date": "2015-02-21T13:20:19",
                "message_text_only": "Hello All,\n\nI have put together a proposal for a new generation methodology of HD\nwallets.\n\nThe method is a modification of BIP32, so if something is unclear or not\nexplicit, please assume it follows BIP32.\n\nI am looking forward to any and all criticism and help with writing /\nmaking the BIP more secure.\n\nIf some of my pseudo code / English is off I apologize, I am not good with\nwords.\n\nIf this is deemed worthy enough to be drafted into a BIP, I would\nappreciate if someone could tell me what the overall step by step flow\nwould be.\n\nThank you, I will paste the link to the proposal below.\nJona\n\nhttps://gist.github.com/dabura667/875bb2c159b219c18885\n\n--\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: http://openpgpjs.org\n\nxsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\nx6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\niBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\nbO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\nEuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\nAAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\nCAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\nB/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\nFc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\nWhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\nhEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\nqxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\nQq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\nW+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\nvlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\nvkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\nflkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\nLFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\nAlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\nn/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\nkcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\nXSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\nSpe3vsHZr6CqFg==\n=/vUJ\n-----END PGP PUBLIC KEY BLOCK-----\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/481c19dd/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-02-21T13:23:24",
                "message_text_only": "Whats the objective?  Is it to require accidental disclosure of two\nprivate keys to compute the master private key?\n\nAdam\n\nOn 21 February 2015 at 13:20, \u6728\u30ce\u4e0b\u3058\u3087\u306a <kinoshitajona at gmail.com> wrote:\n> Hello All,\n>\n> I have put together a proposal for a new generation methodology of HD\n> wallets.\n>\n> The method is a modification of BIP32, so if something is unclear or not\n> explicit, please assume it follows BIP32.\n>\n> I am looking forward to any and all criticism and help with writing / making\n> the BIP more secure.\n>\n> If some of my pseudo code / English is off I apologize, I am not good with\n> words.\n>\n> If this is deemed worthy enough to be drafted into a BIP, I would appreciate\n> if someone could tell me what the overall step by step flow would be.\n>\n> Thank you, I will paste the link to the proposal below.\n> Jona\n>\n> https://gist.github.com/dabura667/875bb2c159b219c18885\n>\n> --\n> -----BEGIN PGP PUBLIC KEY BLOCK-----\n> Comment: http://openpgpjs.org\n>\n> xsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\n> x6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\n> iBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\n> bO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\n> EuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n> 3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\n> AAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\n> CAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\n> B/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\n> Fc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\n> WhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n> 02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\n> hEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\n> qxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\n> Qq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\n> W+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\n> vlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\n> vkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\n> flkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\n> LFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\n> AlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n> 0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n> 0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\n> n/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\n> kcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\n> XSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\n> Spe3vsHZr6CqFg==\n> =/vUJ\n> -----END PGP PUBLIC KEY BLOCK-----\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "\u6728\u30ce\u4e0b\u3058\u3087\u306a",
                "date": "2015-02-21T13:32:30",
                "message_text_only": "Yes.\n\nThat is similar to an idea at FC15 (\nhttp://fc15.ifca.ai/preproceedings/paper_15.pdf) but instead of increasing\nthe number of keys needed up to m, and protecting against m-1 leaks. (so if\nyou have to give keys out to 10 departments you must store 11 keys, or 363\nbytes, I have decided to leave it at 2 keys protecting 1 leak, and then\nusing convention to prevent calculating the master private key by requiring\nall private keys AND all extended private keys (aka \"nodes\" in my proposal)\nto be derived alone under their respective parents.\n\nIn theory this will prevent leakage of private keys from destroying the\nentire HD wallet entirely.\n\nServices like \"Reality Keys\" could be a perfect use case (he must release\nprivate keys relating to the outcome, so he has decided against using BIP32\nto generate addresses for the bets.\n\nAny Cryptographers that would like to take a look at the math and see if\nit's sound, I think I am properly breaking any linear relationships between\nkeys... but I would like a second opinion.\n\nThank you for your reply,\nJona\n\n2015-02-21 22:23 GMT+09:00 Adam Back <adam at cypherspace.org>:\n\n> Whats the objective?  Is it to require accidental disclosure of two\n> private keys to compute the master private key?\n>\n> Adam\n>\n> On 21 February 2015 at 13:20, \u6728\u30ce\u4e0b\u3058\u3087\u306a <kinoshitajona at gmail.com> wrote:\n> > Hello All,\n> >\n> > I have put together a proposal for a new generation methodology of HD\n> > wallets.\n> >\n> > The method is a modification of BIP32, so if something is unclear or not\n> > explicit, please assume it follows BIP32.\n> >\n> > I am looking forward to any and all criticism and help with writing /\n> making\n> > the BIP more secure.\n> >\n> > If some of my pseudo code / English is off I apologize, I am not good\n> with\n> > words.\n> >\n> > If this is deemed worthy enough to be drafted into a BIP, I would\n> appreciate\n> > if someone could tell me what the overall step by step flow would be.\n> >\n> > Thank you, I will paste the link to the proposal below.\n> > Jona\n> >\n> > https://gist.github.com/dabura667/875bb2c159b219c18885\n> >\n> > --\n> > -----BEGIN PGP PUBLIC KEY BLOCK-----\n> > Comment: http://openpgpjs.org\n> >\n> > xsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\n> > x6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\n> > iBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\n> > bO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\n> > EuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n> > 3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\n> > AAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\n> > CAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\n> > B/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\n> > Fc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\n> > WhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n> > 02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\n> > hEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\n> > qxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\n> > Qq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\n> > W+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\n> > vlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\n> > vkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\n> > flkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\n> > LFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\n> > AlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n> > 0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n> > 0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\n> > n/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\n> > kcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\n> > XSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\n> > Spe3vsHZr6CqFg==\n> > =/vUJ\n> > -----END PGP PUBLIC KEY BLOCK-----\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> > from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> > with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> > Get technology previously reserved for billion-dollar corporations, FREE\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n\n\n\n-- \n-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: http://openpgpjs.org\n\nxsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\nx6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\niBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\nbO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\nEuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\nAAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\nCAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\nB/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\nFc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\nWhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\nhEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\nqxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\nQq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\nW+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\nvlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\nvkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\nflkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\nLFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\nAlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\nn/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\nkcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\nXSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\nSpe3vsHZr6CqFg==\n=/vUJ\n-----END PGP PUBLIC KEY BLOCK-----\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/f51694fa/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-02-21T13:34:34",
                "message_text_only": "On 21/02/15 14:20, \u6728\u30ce\u4e0b\u3058\u3087\u306a wrote:\n> I have put together a proposal for a new generation methodology of HD\n> wallets.\n\nYour proposal is missing Abstract and Motivation sections. Abstract\ntells us WHAT are trying to achieve, Motivation tells WHY. It's not\nworth to dig into technical details of your implementation until these\ntwo questions are answered.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "\u6728\u30ce\u4e0b\u3058\u3087\u306a",
                "date": "2015-02-21T13:49:31",
                "message_text_only": "Thank you for your feedback. I have written the Abstract and Motivation.\n\nIf my English is poor please let me know. Also let me know any other\ncomments or criticism you may have.\n\nThank you,\nJona\n\n2015-02-21 22:34 GMT+09:00 Pavol Rusnak <stick at gk2.sk>:\n\n> On 21/02/15 14:20, \u6728\u30ce\u4e0b\u3058\u3087\u306a wrote:\n> > I have put together a proposal for a new generation methodology of HD\n> > wallets.\n>\n> Your proposal is missing Abstract and Motivation sections. Abstract\n> tells us WHAT are trying to achieve, Motivation tells WHY. It's not\n> worth to dig into technical details of your implementation until these\n> two questions are answered.\n>\n> --\n> Best Regards / S pozdravom,\n>\n> Pavol Rusnak <stick at gk2.sk>\n>\n\n\n\n-- \n-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: http://openpgpjs.org\n\nxsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\nx6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\niBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\nbO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\nEuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\nAAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\nCAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\nB/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\nFc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\nWhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\nhEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\nqxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\nQq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\nW+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\nvlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\nvkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\nflkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\nLFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\nAlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\nn/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\nkcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\nXSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\nSpe3vsHZr6CqFg==\n=/vUJ\n-----END PGP PUBLIC KEY BLOCK-----\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/a97a1bab/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2015-02-21T13:52:41",
                "message_text_only": "On 21/02/15 14:49, \u6728\u30ce\u4e0b\u3058\u3087\u306a wrote:\n> Thank you for your feedback. I have written the Abstract and Motivation.\n\nMuch better. Thanks!\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "\u6728\u30ce\u4e0b\u3058\u3087\u306a",
                "date": "2015-02-23T05:00:44",
                "message_text_only": "Hello All,\n\nI have updated the algorithm to include b in the derivation of a and vice\nversa.\n\nIn the comment section of the gist, jhoenicke kindly pointed out that a\nderivation was not including b at all, so colluding derivation was weak to\n1 leaked descendant private node.\n\nI am on my phone, but once I get home I will write out how to compromise\nthe parent private node with two child private nodes and the parent public\nnode.\n\nHopefully writing that out will help give an understanding of any other\nhidden tricks.\n\nSorry if a majority don't think BIP32 is a problem, but if anyone who has\ninterest could comment and double check the math, I would appreciate it.\n\nThanks,\nJona\n\n2015\u5e742\u670821\u65e5\u571f\u66dc\u65e5\u3001\u6728\u30ce\u4e0b\u3058\u3087\u306a<kinoshitajona at gmail.com>\u3055\u3093\u306f\u66f8\u304d\u307e\u3057\u305f:\n\n> Hello All,\n>\n> I have put together a proposal for a new generation methodology of HD\n> wallets.\n>\n> The method is a modification of BIP32, so if something is unclear or not\n> explicit, please assume it follows BIP32.\n>\n> I am looking forward to any and all criticism and help with writing /\n> making the BIP more secure.\n>\n> If some of my pseudo code / English is off I apologize, I am not good with\n> words.\n>\n> If this is deemed worthy enough to be drafted into a BIP, I would\n> appreciate if someone could tell me what the overall step by step flow\n> would be.\n>\n> Thank you, I will paste the link to the proposal below.\n> Jona\n>\n> https://gist.github.com/dabura667/875bb2c159b219c18885\n>\n> --\n> -----BEGIN PGP PUBLIC KEY BLOCK-----\n> Comment: http://openpgpjs.org\n>\n> xsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\n> x6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\n> iBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\n> bO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\n> EuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n> 3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\n> AAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\n> CAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\n> B/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\n> Fc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\n> WhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n> 02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\n> hEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\n> qxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\n> Qq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\n> W+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\n> vlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\n> vkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\n> flkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\n> LFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\n> AlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n> 0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n> 0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\n> n/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\n> kcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\n> XSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\n> Spe3vsHZr6CqFg==\n> =/vUJ\n> -----END PGP PUBLIC KEY BLOCK-----\n>\n\n\n-- \n-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: http://openpgpjs.org\n\nxsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\nx6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\niBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\nbO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\nEuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\nAAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\nCAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\nB/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\nFc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\nWhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\nhEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\nqxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\nQq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\nW+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\nvlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\nvkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\nflkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\nLFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\nAlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\nn/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\nkcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\nXSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\nSpe3vsHZr6CqFg==\n=/vUJ\n-----END PGP PUBLIC KEY BLOCK-----\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/e74fff79/attachment.html>"
            },
            {
                "author": "\u6728\u30ce\u4e0b\u3058\u3087\u306a",
                "date": "2015-02-21T14:05:51",
                "message_text_only": "Hello Bob,\n\n> And compromise of that longer key still compromises the entire wallet.\n\nNo, in fact I could give you any node (derived extended private key) or key\n(derived normal bitcoin address private key) AND any node's extended public\nkey above them, and as long as the keys are generated within my\nspecifications, you can not derive the associated extended private key to\nthe ancestor extended public key.\n\nIf you think it still compromises the entire wallet, please show me in\npseudo code / explanation.\n\n> Under what circumstances would anyone ever be passing around private keys\nwithout your a,b?\n\nI just added a Motivation section showing one example called Reality Keys.\nThey send bitcoins to Yes/No bet addresses and the result of the bet's\nprivate key is revealed to award the winners via special P2SH scripts.\nSo they would need to give out \"smaller\" keys (aka normal private keys) and\nit would be better to manage them hierarchically instead of just generating\nmillions of keys ahead of time and storing them on USBs or something.\n\nThanks,\nJona\n\n2015-02-21 22:57 GMT+09:00 Bob Mcelrath <bob at mcelrath.org>:\n\n> But this just makes the private HD key longer, effectively. And compromise\n> of that longer key still compromises the entire wallet.\n>\n> Under what circumstances would anyone ever be passing around private keys\n> without your a,b? The longer privkey is a wallet backup and has a reason to\n> be copied. I can't think of a scenario where anyone would use or compromise\n> the shorter privkey.\n>\n> On February 21, 2015 8:32:30 AM EST, \"\u6728\u30ce\u4e0b\u3058\u3087\u306a\" <kinoshitajona at gmail.com>\n> wrote:\n>>\n>> Yes.\n>>\n>> That is similar to an idea at FC15 (\n>> http://fc15.ifca.ai/preproceedings/paper_15.pdf) but instead of\n>> increasing the number of keys needed up to m, and protecting against m-1\n>> leaks. (so if you have to give keys out to 10 departments you must store 11\n>> keys, or 363 bytes, I have decided to leave it at 2 keys protecting 1 leak,\n>> and then using convention to prevent calculating the master private key by\n>> requiring all private keys AND all extended private keys (aka \"nodes\" in my\n>> proposal) to be derived alone under their respective parents.\n>>\n>> In theory this will prevent leakage of private keys from destroying the\n>> entire HD wallet entirely.\n>>\n>> Services like \"Reality Keys\" could be a perfect use case (he must release\n>> private keys relating to the outcome, so he has decided against using BIP32\n>> to generate addresses for! the bets.\n>>\n>> Any Cryptographers that would like to take a look at the math and see if\n>> it's sound, I think I am properly breaking any linear relationships between\n>> keys... but I would like a second opinion.\n>>\n>> Thank you for your reply,\n>> Jona\n>>\n>> 2015-02-21 22:23 GMT+09:00 Adam Back <adam at cypherspace.org>:\n>>\n>>> Whats the objective?  Is it to require accidental disclosure of two\n>>> private keys to compute the master private key?\n>>>\n>>> Adam\n>>>\n>>> On 21 February 2015 at 13:20, \u6728\u30ce\u4e0b\u3058\u3087\u306a <kinoshitajona at gmail.com> wrote:\n>>> > Hello All,\n>>> >\n>>> > I have put together a proposal for a new generation methodology of HD\n>>> > wallets.\n>>> >\n>>> > The method is a modification of BIP32, so if something is unclear or\n>>> not\n>>> > explicit, please assume it follows BIP32.\n>>> >\n>>> > I am looking forward to any and all criticism and help with writing /\n>>> making\n>>> > the BIP more secure.\n>>> >\n>>> > If some of my pseudo code / English is off I apologize, I am not good\n>>> with\n>>> > words.\n>>> >\n>>> > If this is deemed worthy enough to be drafted into a BIP, I would\n>>> appreciate\n>>> > if someone could tell me what the overall step by step flow would be.\n>>> >\n>>> > Thank you, I will paste the link to the proposal below.\n>>> > Jona\n>>> >\n>>> > https://gist.github.com/dabura667/875bb2c159b219c18885\n>>> >\n>>> > --\n>>> > -----BEGIN PGP PUBLIC KEY BLOCK-----\n>>> > Comment: http://openpgpjs.org\n>>> >\n>>> > xsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\n>>> > x6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\n>>> > iBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\n>>> > bO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\n>>> > EuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n>>> > 3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\n>>> > AAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\n>>> > CAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\n>>> > B/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\n>>> > Fc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\n>>> > WhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n>>> > 02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\n>>> > hEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\n>>> > qxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\n>>> > Qq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\n>>> > W+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\n>>> > vlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\n>>> > vkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\n>>> > flkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\n>>> > LFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\n>>> > AlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n>>> > 0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n>>> > 0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\n>>> > n/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\n>>> > kcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\n>>> > XSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\n>>> > Spe3vsHZr6CqFg==\n>>> > =/vUJ\n>>> > -----END PGP PUBLIC KEY BLOCK-----\n>>> >\n>>> >\n>>> ------------------------------------------------------------------------------\n>>> > Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>>> > from Actuate! Instantly Supercharge Your Business Reports and\n>>> Dashboards\n>>> > with Interactivity, Sharing, Native Excel Exports, App Integration &\n>>> more\n>>> > Get technology previously reserved for billion-dollar corporations,\n>>> FREE\n>>> >\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>> > _______________________________________________\n>>> > Bitcoin-development mailing list\n>>> > Bitcoin-development at lists.sourceforge.net\n>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> >\n>>>\n>>\n>>\n>>\n>> --\n>> -----BEGIN PGP PUBLIC KEY BLOCK-----\n>> Comment: http://openpgpjs.org\n>>\n>> xsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\n>> x6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\n>> iBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\n>> bO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\n>> EuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n>> 3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\n>> AAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\n>> CAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\n>> B/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\n>> Fc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\n>> WhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n>> 02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\n>> hEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\n>> qxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ! 9EBCACu\n>> Qq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\n>> W+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\n>> vlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\n>> vkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\n>> flkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\n>> LFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\n>> AlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n>> 0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n>> 0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\n>> n/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\n>> kcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\n>> XSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\n>> Spe3vsHZr6CqFg==\n>> =/vUJ\n>> -----END PGP PUBLIC KEY BLOCK-----\n>>  !DSPAM:54e88938261511932039196!\n>>\n>> ------------------------------\n>>\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>\n>> !DSPAM:54e88938261511932039196!\n>>\n>> ------------------------------\n>>\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> !DSPAM:54e88938261511932039196!\n>>\n>>\n> --\n> Sent from my Android device with K-9 Mail. Please excuse my brevity.\n>\n\n\n\n-- \n-----BEGIN PGP PUBLIC KEY BLOCK-----\nComment: http://openpgpjs.org\n\nxsBNBFTmJ8oBB/9rd+7XLxZG/x/KnhkVK2WBG8ySx91fs+qQfHIK1JrakSV3\nx6x0cK3XLClASLLDomm7Od3Q/fMFzdwCEqj6z60T8wgKxsjWYSGL3mq8ucdv\niBjC3wGauk5dQKtT7tkCFyQQbX/uMsBM4ccGBICoDmIJlwJIj7fAZVqGxGOM\nbO1RhYb4dbQA2qxYP7wSsHJ6/ZNAXyEphOj6blUzdqO0exAbCOZWWF+E/1SC\nEuKO4RmL7Imdep7uc2Qze1UpJCZx7ASHl2IZ4UD0G3Qr3pI6/jvNlaqCTa3U\n3/YeJwEubFsd0AVy0zs809RcKKgX3W1q+hVDTeWinem9RiOG/vT+Eec/ABEB\nAAHNI2tpbm9zaGl0YSA8a2lub3NoaXRham9uYUBnbWFpbC5jb20+wsByBBAB\nCAAmBQJU5ifRBgsJCAcDAgkQRB9iZ30dlisEFQgCCgMWAgECGwMCHgEAAC6Z\nB/9otobf0ASHYdlUBeIPXdDopyjQhR2RiZGYaS0VZ5zzHYLDDMW6ZIYm5CjO\nFc09ETLGKFxH2RcCOK2dzwz+KRU4xqOrt/l5gyd50cFE1nOhUN9+/XaPgrou\nWhyT9xLeGit7Xqhht93z2+VanTtJAG6lWbAZLIZAMGMuLX6sJDCO0GiO5zxa\n02Q2D3kh5GL57A5+oVOna12JBRaIA5eBGKVCp3KToT/z48pxBe3WAmLo0zXr\nhEgTSzssfb2zTwtB3Ogoedj+cU2bHJvJ8upS/jMr3TcdguySmxJlGpocVC/e\nqxq12Njv+LiETOrD8atGmXCnA+nFNljBkz+l6ADl93jHzsBNBFTmJ9EBCACu\nQq9ZnP+aLU/Rt6clAfiHfTFBsJvLKsdIKeE6qHzsU1E7A7bGQKTtLEnhCCQE\nW+OQP+sgbOWowIdH9PpwLJ3Op+NhvLlMxRvbT36LwCmBL0yD7bMqxxmmVj8n\nvlMMRSe4wDSIG19Oy7701imnHZPm/pnPlneg/Meu/UffpcDWYBbAFX8nrXPY\nvkVULcI/qTcCxW/+S9fwoXjQhWHaiJJ6y3cYOSitN31W9zgcMvLwLX3JgDxE\nflkwq/M+ZkfCYnS3GAPEt8GkVKy2eHtCJuNkGFlCAmKMX0yWzHRAkqOMN5KP\nLFbkKY2GQl13ztWp82QYJZpj5af6dmyUosurn6AZABEBAAHCwF8EGAEIABMF\nAlTmJ9QJEEQfYmd9HZYrAhsMAABKbgf/Ulu5JAk4fXgH0DtkMmdkFiKEFdkW\n0Wkw7Vhd5eZ4NzeP9kOkD01OGweT9hqzwhfT2CNXCGxh4UnvEM1ZMFypIKdq\n0XpLLJMrDOQO021UjAa56vHZPAVmAM01z5VzHJ7ekjgwrgMLmVkm0jWKEKaO\nn/MW7CyphG7QcZ6cJX2f6uJcekBlZRw9TNYRnojMjkutlOVhYJ3J78nc/k0p\nkcgV63GB6D7wHRF4TVe4xIBqKpbBhhN+ISwFN1z+gx3lfyRMSmiTSrGdKEQe\nXSIQKG8XZQZUDhLNkqPS+7EMV1g7+lOfT4GhLL68dUXDa1e9YxGH6zkpVECw\nSpe3vsHZr6CqFg==\n=/vUJ\n-----END PGP PUBLIC KEY BLOCK-----\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150221/86bb1ff4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Request for a new BIP number (and discussion): Improved HD wallet generation.",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back",
                "\u6728\u30ce\u4e0b\u3058\u3087\u306a",
                "Pavol Rusnak"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 31700
        }
    },
    {
        "title": "[Bitcoin-development] alternate proposal opt-in miner takes double-spend (Re: replace-by-fee v0.10.0rc4)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2015-02-22T08:02:03",
                "message_text_only": "I agree with Mike & Jeff.  Blowing up 0-confirm transactions is vandalism.\n\nbitcoin transactions are all probabilistic.  there is a small chance\n1-confirm transactions can be reversed, and a different but also\nusable chance that 0-confirm transactions can be reversed.  I know\n0-confirm is implemented in policy and not consensus, but it provides\nfast transactions and a lot of the current ecosystem is using it for\nlow value transactions.  why would anyone want to vandalise that.\n\nto echo Mike bitcoin itself kind of depends on some honest majority,\nwe can otherwise get to situations soon enough where its more\nprofitable to double-spend than mine honestly as subsidy drops and\ntransaction values increase even without 0-confirm transactions.\nsubsidy doesnt last forever (though it lasts a really long time) and\neven right now if you involve values that dwarf subsidy you could make\na \"criminally rational\" behaviour that was more profitable.  we even\nsaw 0-confirm odds-attacks against satoshi dice clones.  but if we\nassume the \"criminal rational\" model, its a is a race to the bottom\nlogic, and bitcoin is already broken if we have someone who wants to\ngo for it with high values.  that'd be scorched earth also.\n\n(I read the rest of the arguments, i understood them, I disagree, no\nneed to repeat in reply.)\n\nSo how about instead, to be constructive, whether you agree with the\nanti-arson view or not, lets talk about solutions.  Here's one idea:\n\nWe introduce a new signature type that marks itself as can be spent by\nminers if a double-spend is seen (before 1-confirm.)  We'd define a\ndouble-spend as a spend that excludes outputs to avoid affecting valid\ndouble-spend scenarios.  And we add behaviour to relay those\ndouble-spends (at priority).  We may even want the double-spend to be\nserialisation incomplete but verifiable to deter back-channel payments\nto pretend not to receive one, in collusion with the double-spending\nparty.\n\nNow the risk to the sender is if they accidentally double-spend.  How\ncould they do that?  By having a hardware or software crash where they\nsent a tx but crashed before writing a record of having sent it.  The\ncorrect thing to do would be to transactionally write the transaction\nbefore sending it.  Still you can get a fail if the hardware\nirrecoverably fails, and you have to resume from backup.  Or if you\nrun multiple non-synced wallets on the same coins.\n\nTypically if you recover from backup the 1-confirmation window will\nhave passed so the risk is limited.\n\nThe feature is opt-in so you dont have to put high value coins at risk\nof failure.\n\n(Its related to the idea of a one-use signature, where two signatures\nreveals a simultaneous equation that can recover the private key;\nexcept here the miner is allowed to take the coins without needing the\nprivate key).\n\nIts soft-forkable because its a new transaction type.\n\nps I agree with Greg also that longer-term more scalable solutions are\ninteresting, but I'd like to see the core network work as a stepping\nstone.  As Justus observed: the scalable solutions so far have had\nnon-ideal ethos tradeoffs so are not drop-in upgrades to on-chain\n0-confirm.\n\nAdam\n\nOn 22 February 2015 at 04:06, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> On Sat, Feb 21, 2015 at 10:25 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n>> On Sat, Feb 21, 2015 at 11:47 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>> This isn't some theoretical exercise.  Like it or not many use\n>>> insecure 0-conf transactions for rapid payments.  Deploying something\n>>> that makes 0-conf transactions unusable would have a wide, negative\n>>> impact on present day bitcoin payments, thus \"scorched earth\"\n>\n>> And maybe by maintaining first seen policies we're harming the system\n>> in the long term by encouraging people to widely deploy systems based\n>> on extremely weak assumptions.\n>\n> Lacking a coded, reviewed alternative, that's only a platitude.\n> Widely used 0-conf payments are where we're at today.  Simply ceasing\n> the \"maintaining [of] first seen policies\" alone is simply not a\n> realistic option.  The negative impact to today's userbase would be\n> huge.\n>\n> Instant payments need a security upgrade, yes.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-22T12:34:28",
                "message_text_only": "On Sun, Feb 22, 2015 at 08:02:03AM +0000, Adam Back wrote:\n\nFWIW I've been advocating this kind of thing in various forms for\nliterally years, including to hold fidelity bonded banks honest - what\nyou now call 'federated sidechains' - and most recently Feb 12th on\n#bitcoin-dev:\n\n19:56 < petertodd> leakypat: now, do note that an advanced version [of replace-by-fee scorched earth] could be to make another tx that alice and bob setup in advance such that if alcie doublespends, bob gets the money *and* alice pays a bunch of cash to miners fees\n19:57 < petertodd> leakypat: this would work espectially well if we improved the scripting system so a script could evaluate true based on proof-of-doublespend\n19:58 < leakypat> Yeah, proof of double spend would ideally be done at the protocol level\n19:59 < petertodd> leakypat: if satoshi hadn't make the multiple things that CHECKSIG does into one opcode it'd be really easy, but alas...\n\nImplementing it as a general purpose scripting language improvement has\na lot of advantages, not least of which is that you no longer need to\nrely entirely on inherently unreliable P2P networking: Promise to never\ncreate two signatures for a specific BIP32 root pubkey and make\nviolating that promise destroy and/or reallocate a fidelity bond whose\nvalue is locked until some time into the future. Since the fidelity bond\nis a separate pool of funds, detection of the double-spend can happen\nlater.\n\nEqually, that *is* what replace-by-fee scorched-earth does without the\nneed for a soft-fork, minus the cryptographic proof and with a bit less\nflexibility.\n\n> I agree with Mike & Jeff.  Blowing up 0-confirm transactions is vandalism.\n\nIs releasing a version of Bitcoin Core with different IsStandard() rules\nthan the previous version vandalism? Is mining with a different policy\nthan other people vandalism? Is mining at a pool that gets sybil\nattacked vandalism? Are my replace-by-fee tools an act of vandalism?\nBecause every one of those things causes people to get double-spent in\nthe real world, even losing tens of thousands of dollars until they get\nsome sense and stop treating unconfirmed transactions as confirmed.\n\nIs it vandalism if you decide to host a wedding right next to a hairpin\ncorner at a rally race and complain to me that mud is getting on the\npretty white dresses? Is it vandalism if I tell that wedding party to\nfuck off before someone gets hurt? Is it vandalism if some racers take\nthe mudguards off for a few laps to see if we can encourage them to\nleave before someone gets *actually* hurt? Or someone decides that the\nsolution is to pave the track over and hold a bicycle race instead...\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000017c2f346f81e93956c538531682f5af3a95f9c94cb7a84e8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/4a274018/attachment.sig>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-22T13:29:44",
                "message_text_only": "Den 22 feb 2015 13:36 skrev \"Peter Todd\" <pete at petertodd.org>:\n> Implementing it as a general purpose scripting language improvement has\n> a lot of advantages, not least of which is that you no longer need to\n> rely entirely on inherently unreliable P2P networking: Promise to never\n> create two signatures for a specific BIP32 root pubkey and make\n> violating that promise destroy and/or reallocate a fidelity bond whose\n> value is locked until some time into the future. Since the fidelity bond\n> is a separate pool of funds, detection of the double-spend can happen\n> later.\n\nSomebody sent me a zero-confirmation transaction, or one that got orphaned\nafter one block. I created a transaction spending that UTXO, and another.\n\nSo at that point I have UTXO_orphaned based on the sender's UTXO_origin and\nmy UTXO_old (because I've had it unspent for a long time), both in one\ntransaction, creating UTXO_new.\n\nNow he doublespend UTXO_origin to create a UTXO_doublespend (which\nconflicts with UTXO_orphaned). He conspires with a miner to get it into a\nblock.\n\nNow what? Can my UTXO_old effectively be tainted forever because UTXO_new\ngot invalidated together with UTXO_orphaned? Will that transaction be a\nvalid proof of doublespend against a new UTXO_replacement I created?\n\nOr otherwise, if only transactions where all UTXO's are currently valid\nworks as doublespend proofs, aren't you still just left without protection\nagainst any one miner that conspires with doublespend attempting thieves?\n\nIn other words, you are unprotected and potentially at greater risk if you\ncreate a transaction depending on another zero-confirmation transaction.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/6d890d99/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2015-02-22T13:50:30",
                "message_text_only": "On Sunday, 22 February 2015, at 2:29 pm, Natanael wrote:\n> In other words, you are unprotected and potentially at greater risk if you\n> create a transaction depending on another zero-confirmation transaction.\n\nThis happened to one of the merchants at the Bitcoin 2013 conference in San Jose. They sold some T-shirts and accepted zero-confirmation transactions. The transactions depended on other unconfirmed transactions, which never confirmed, so this merchant never got their money.\n\nI keep telling people not to accept transactions with zero confirmations, but no one listens."
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-22T14:07:11",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 22 February 2015 08:50:30 GMT-05:00, Matt Whitlock <bip at mattwhitlock.name> wrote:\n>On Sunday, 22 February 2015, at 2:29 pm, Natanael wrote:\n>> In other words, you are unprotected and potentially at greater risk\n>if you\n>> create a transaction depending on another zero-confirmation\n>transaction.\n>\n>This happened to one of the merchants at the Bitcoin 2013 conference in\n>San Jose. They sold some T-shirts and accepted zero-confirmation\n>transactions. The transactions depended on other unconfirmed\n>transactions, which never confirmed, so this merchant never got their\n>money.\n\nGreat example! Systems that appear more secure than they really are to uninformed users are dangerous. Same reason why brain wallets are such scary technology, and equally, why I like to give a few dollars away every so often to the guys brute forcing weak ones.\n\n>I keep telling people not to accept transactions with zero\n>confirmations, but no one listens.\n\nIn my experience there's a pattern of \"accept unconfirmed; get burned badly/see someone else get burned; stop relying on them\" Although of course, there's some bias in that people contact me asking what to do after they get burned. :)\n-----BEGIN PGP SIGNATURE-----\n\niQE9BAEBCAAnIBxQZXRlciBUb2RkIDxwZXRlQHBldGVydG9kZC5vcmc+BQJU6eKG\nAAoJEMCF8hzn9LncGz0H/ivA9J4MqsVnkPm9JVAIXgZiT7rAVO0Rp1lO/8PGPS6K\ndXBFXESicszeBx5yeyQrLUFh58DVgp21sFHSMNTKmujDJJgxNf/ygffN9dTLriwt\nPJcDWvxPzqyLy2e/CloRonxwlO3+Umv1OiPs1yy7a7auDVAEm1xvh/pc3A48u1bO\n++cyxZs8j5yv3Ms2n/FmGekhL9jZHJAgmiVnSks0cMqq9+cYipEjy+FEq3KFGlFI\n4iZ58f57g6W7bVqM+9Z6dbLczWobnQ+nfo7lFZWgGdbhKf4Jv7tHOcfSw4nbmJz4\nOgWmKtM724h7abOIrqJnTF0u10dmapVv+lRtjiGXo8c=\n=7W03\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-22T16:00:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 02/22/2015 07:50 AM, Matt Whitlock wrote:\n> This happened to one of the merchants at the Bitcoin 2013\n> conference in San Jose. They sold some T-shirts and accepted\n> zero-confirmation transactions. The transactions depended on other\n> unconfirmed transactions, which never confirmed, so this merchant\n> never got their money.\n> \n> I keep telling people not to accept transactions with zero\n> confirmations, but no one listens.\n\nA better solution is to track the failure rate of zero confirmation\ntransactions, and adjust prices accordingly to cover the expected loss.\n\nThis is what every merchant *already does* since no payment method has\na 0% fraud rate.\n\nEven physical cash has a probability of being counterfeit, and the\nprices you pay for things at a convenience store already have that\nrisk priced in.\n\nThe idea that zero confirmation transactions require a 100% guarantee\nis a strawman, especially since there exists no number of\nconfirmations the actually produce a 100% irreversibility guarantee.\n\nZero confirmation transactions can work as long as the risk of\nreversal is measurable and reasonably stable.\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBAgAGBQJU6f0FAAoJECpf2nDq2eYjWJsP/3I6b9KL2tr7wEGUyiUJvn95\nwR/DQw3jRoC6rP1OqZAHpePksboEtd1yTxhtnH9UEMzvzFrGeQwKaSgM0s6zbIIm\n38BXH6uiTzxI2PUWxv8HDNsPvwAlj0l4EkV9E8DthK9MTDVAk5E/SFUlwgc4tdYB\nQinntAYknjIJd7dKVXlIaBrXg0UmTaXDKq9yoQIBTl9SE8xYbbRM154XAjVmqVrZ\nh88ZGkaIbpHbBEjbUpqVpPIKM/Ts4b6NwLSfloY7W+Mmvgn3p6EB4V6rt3HuV/wN\nL5A0RPbAESGsg0MpRcIprpAq4aiO6Qt0p6wMrZ9x6a+cx1w/RuJx7Sb3zflDjBgk\nFmEwqIKJJqWoTEtR2nCEkmDvwx48RJQQppEHJgdUCmxjELpJMKkvtz9Oc4CRP0ty\n6JUnBmxNTHRJLL+0nn1sq5WAhTLIQaH3RcVn/SjNk2zjoUXUdx+1pIEyBaZnOckW\ne54SraX0KEEZNpTXHA3xJV0d2gA068CChG/TFqMO9uhohWz9jz6NZl7jFLwdBjgb\nWmbid/V/bl6W/ehCiOwLDM/sOer/BDoZPqGt/j2cJZO9gP+wVdiRkojl3f97vd9k\nqhGV3QUsc8uiseZNxeIv2hty34KzUPz2ISPM25ZnQMavIevg3Yg0l4O7Hwnk49oK\n1nhyoqk+scfLpo7vd6Ke\n=fVAx\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 17528 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/8dc7c47e/attachment.bin>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-22T16:17:05",
                "message_text_only": "Den 22 feb 2015 17:00 skrev \"Justus Ranvier\" <justusranvier at riseup.net>:\n>\n> On 02/22/2015 07:50 AM, Matt Whitlock wrote:\n> > This happened to one of the merchants at the Bitcoin 2013\n> > conference in San Jose. They sold some T-shirts and accepted\n> > zero-confirmation transactions. The transactions depended on other\n> > unconfirmed transactions, which never confirmed, so this merchant\n> > never got their money.\n> >\n> > I keep telling people not to accept transactions with zero\n> > confirmations, but no one listens.\n>\n> A better solution is to track the failure rate of zero confirmation\n> transactions, and adjust prices accordingly to cover the expected loss.\n>\n> This is what every merchant *already does* since no payment method has\n> a 0% fraud rate.\n>\n> Even physical cash has a probability of being counterfeit, and the\n> prices you pay for things at a convenience store already have that\n> risk priced in.\n>\n> The idea that zero confirmation transactions require a 100% guarantee\n> is a strawman, especially since there exists no number of\n> confirmations the actually produce a 100% irreversibility guarantee.\n\nThe problem with this approach is that it is worthless as a predictor. We\naren't dealing with traffic safety and road design - we are dealing with\nadaptive attackers and malicious miners and pools.\n\nAnything which does not invalidate blocks carrying doublespends WILL allow\nmalicious miners and pools to conspire with thieves to steal money. The\nprobability of being hit will then be (their proliferation in your business\narea) * (their fraction of the mining power).\n\nThat might seem to give small numbers for most sets of reasonable\nassumptions. But the problem is that's only an average, and the people\nbeing hit might have small profit margins - one successful attack can place\nhundreds of merchants in red numbers and force them to shut down.\n\nYou should never expose yourself to attacks which you can't defend against\nand which can be fatal. In particular not if there's nothing in the\nenvironment that is capable of limiting the size or numbers of any attacks.\nAnd there's no such thing today in Bitcoin.\n\nThis is why I sketched out the multisignature notary approach, and why some\ndecided to extend that approach with collateral (NoRiskWallet) to further\nreduce trust in the notary. This is the single most practical approach I\nknow of today to achieve ACTUAL SECURITY for unconfirmed transactions.\n\nDon't like it? See if you can do better!\n\nJust don't rely on zero-confirmation transactions!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/68d5018c/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-02-22T16:25:11",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 02/22/2015 10:17 AM, Natanael wrote:\n> The problem with this approach is that it is worthless as a\n> predictor. We aren't dealing with traffic safety and road design -\n> we are dealing with adaptive attackers and malicious miners and\n> pools.\n> \n> Anything which does not invalidate blocks carrying doublespends\n> WILL allow malicious miners and pools to conspire with thieves to\n> steal money. The probability of being hit will then be (their\n> proliferation in your business area) * (their fraction of the\n> mining power).\n> \n> That might seem to give small numbers for most sets of reasonable \n> assumptions. But the problem is that's only an average, and the\n> people being hit might have small profit margins - one successful\n> attack can place hundreds of merchants in red numbers and force\n> them to shut down.\n> \n> You should never expose yourself to attacks which you can't defend\n> against and which can be fatal. In particular not if there's\n> nothing in the environment that is capable of limiting the size or\n> numbers of any attacks. And there's no such thing today in\n> Bitcoin.\n> \n> This is why I sketched out the multisignature notary approach, and\n> why some decided to extend that approach with collateral\n> (NoRiskWallet) to further reduce trust in the notary. This is the\n> single most practical approach I know of today to achieve ACTUAL\n> SECURITY for unconfirmed transactions.\n> \n> Don't like it? See if you can do better!\n> \n> Just don't rely on zero-confirmation transactions!\n\nYou just disproved your own argument.\n\nIt is possible to predict risk, and therefore to price the risk.\n\nYou also noted that for some Bitcoin users, the price of that risk is\ntoo high for the types of transactions in which wish to engage.\n\nIn what way does that translated into a universal requirement for\neverybody to use multisignature notaries?\n\nSurely the users who can afford the risk can use zero conf if they\nlike, and those who can't can use multisig notaries?\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBAgAGBQJU6gLmAAoJECpf2nDq2eYj8/AQAJfMtBqjo1Z2Z0A7OhE9iaYD\nPqWXdRaCFwyV49RSDrRROrB9Vc7CENQsweHBSnNEmSj6la/YfjyobmaR5BMtTq73\nZaXOFYSGVa9S0j+1qTvz2MorBd6ocxckdunfN7N/uVb4NQRYTHUT8N7AyJgRFYO9\nElQU/8TcNCSRqSQc3z8rnUc8eN1+DgqkMDHM754huOgA0fz0OlxnLCddcCvLr0t7\nZPCtZI94FWQSWhzTK2oa41hh01xG+Eg5GhqGzM7WBqM6+d/CgNcUVeMnVOkkhgav\nAmlE81Km9R4AlrsGT/CcGgaC+FvBhqmDYHAGOUG3hLP+MXMe4qA5TRoRKHFvq4Gw\nnF6q+leI7z/TkKeiDcyEKKen5cU01SnZlVRnncccIxsjzNjCiBdXOTP6o0pTd34j\n5VJQ04mF4sla5AaaSDtsbkZuMdqIZDMn1tWxbmXRQ2cUbCGoi4yYiUlqjetrs4e1\ni7NopccLNVDwjGRRnaSs4KkpuW7s23XwKm6WVehrP7S9s1Bqc+84C/rL1G4IF3Ul\nvOz+dfxpS+yeGdEDOxb92voKo+fvL/N1sH2+cqTemuYWArDOn1kK/qKdaEfnl9p2\nVcPJWuik6Ywomg4fCWmTQWcDxbWiUT/Gb/niONOYQ6iJG7mU4SH9LFBDd8qV+ljN\nRqUYrOBf/PaMneNxwJp+\n=w36r\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 17528 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/1008c914/attachment.bin>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-22T16:36:39",
                "message_text_only": "- Sent from my tablet\nDen 22 feb 2015 17:25 skrev \"Justus Ranvier\" <justusranvier at riseup.net>:\n>\n> You just disproved your own argument.\n>\n> It is possible to predict risk, and therefore to price the risk.\n\nYour fault is that you assume the predictions can be reliable and\ntrustable.\n\nThey can not be.\n\nThe data you have available has none of the indicators you actually NEED to\nmake predictions. You're making extrapolations from the past, not\ncalculations based on recent trends and behavior globally.\n\n> You also noted that for some Bitcoin users, the price of that risk is\n> too high for the types of transactions in which wish to engage.\n>\n> In what way does that translated into a universal requirement for\n> everybody to use multisignature notaries?\n\nIt isn't universal. It is just the most practical solution if you need\ninstant confirmation for high value transactions with customers you don't\nyet trust.\n\n> Surely the users who can afford the risk can use zero conf if they\n> like, and those who can't can use multisig notaries?\n\nUse whatever you want. I don't care. I will warn you about the risks and\nmake suggestions, but I won't force you to do anything differently.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/62c2a89e/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-23T11:03:36",
                "message_text_only": ">\n> This happened to one of the merchants at the Bitcoin 2013 conference in\n> San Jose. They sold some T-shirts and accepted zero-confirmation\n> transactions. The transactions depended on other unconfirmed transactions,\n> which never confirmed, so this merchant never got their money.\n>\n\nBeyond the fact that this risk can be priced in when enough data is\navailable, I'd be interested to talk to this merchant and dig into what\nhappened a bit.\n\nFor example:\n\n   1. Was the dependent tx non-standard?\n   2. Was it double spent?\n   3. Could a wallet have co-operated with the P2P network to detect and\n   flag whatever the issue was?\n\nMy own experience has been that when this happens, it's usually not the\nresult of outright maliciousness (especially not at a Bitcoin t-shirt\nseller at a Bitcoin conference!) but rather something messed up somewhere\nand the software in use just didn't detect it well enough.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/dd20093a/attachment.html>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-22T14:44:30",
                "message_text_only": "Den 22 feb 2015 14:29 skrev \"Natanael\" <natanael.l at gmail.com>:\n>\n>\n> Den 22 feb 2015 13:36 skrev \"Peter Todd\" <pete at petertodd.org>:\n>\n> > Implementing it as a general purpose scripting language improvement has\n> > a lot of advantages, not least of which is that you no longer need to\n> > rely entirely on inherently unreliable P2P networking: Promise to never\n> > create two signatures for a specific BIP32 root pubkey and make\n> > violating that promise destroy and/or reallocate a fidelity bond whose\n> > value is locked until some time into the future. Since the fidelity bond\n> > is a separate pool of funds, detection of the double-spend can happen\n> > later.\n>\n> Somebody sent me a zero-confirmation transaction, or one that got\norphaned after one block. I created a transaction spending that UTXO, and\nanother.\n>\n> So at that point I have UTXO_orphaned based on the sender's UTXO_origin\nand my UTXO_old (because I've had it unspent for a long time), both in one\ntransaction, creating UTXO_new.\n>\n> Now he doublespend UTXO_origin to create a UTXO_doublespend (which\nconflicts with UTXO_orphaned). He conspires with a miner to get it into a\nblock.\n>\n> Now what? Can my UTXO_old effectively be tainted forever because UTXO_new\ngot invalidated together with UTXO_orphaned? Will that transaction be a\nvalid proof of doublespend against a new UTXO_replacement I created?\n>\n> Or otherwise, if only transactions where all UTXO's are currently valid\nworks as doublespend proofs, aren't you still just left without protection\nagainst any one miner that conspires with doublespend attempting thieves?\n>\n> In other words, you are unprotected and potentially at greater risk if\nyou create a transaction depending on another zero-confirmation transaction.\n\nAdditional comments:\n\nIf you punish the creation of UTXO_replacement, you will punish people who\nwas lead to think zero-confirmation transactions were safe and thus that\nchains of zero-confirmation transactions also were safe.\n\nIf you don't, but STILL accept chains of zero-confirmation transactions\nwere not all of them are covered by fidelity bonds, then you failed to\nprotect yourself against thieves who creates chains of unconfirmed\ntransactions.\n\nAnother question: if all transactions in the chain are covered by fidelity\nbonds for their own value, which one pays out to who? Does only the first\none pay out, and only to the last party in the chain? Or to every\nsubsequent party after him? In full or just a fraction? Why, why not? You\nmight not know which of these serviced their customers in full without\ngetting full value back in exchange due to the doublespend.\n\nWhat if the fidelity bond is too small, do you stop accepting it as a\nzero-confirmation transaction?\n\nDo you even accept chains of unconfirmed transactions at all?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/f3b31e8e/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-02-22T14:11:31",
                "message_text_only": "My actual point outside of the emotive stuff (and I should've stayed\naway from that too) is how about we explore ways to improve practical\nsecurity of fast confirmation transactions, and if we find something\nbetter, then we can help people migrate to that before deprecating the\ncurrent weaker 0-conf transactions.\n\nIf I understand this is also your own motivation.\n\nFeel free to comment on or improve the proposal or find other approaches.\n\nAdam\n\nOn 22 February 2015 at 12:34, Peter Todd <pete at petertodd.org> wrote:\n> On Sun, Feb 22, 2015 at 08:02:03AM +0000, Adam Back wrote:\n>\n> FWIW I've been advocating this kind of thing in various forms for\n> literally years, including to hold fidelity bonded banks honest - what\n> you now call 'federated sidechains' - and most recently Feb 12th on\n> #bitcoin-dev:\n>\n> 19:56 < petertodd> leakypat: now, do note that an advanced version [of replace-by-fee scorched earth] could be to make another tx that alice and bob setup in advance such that if alcie doublespends, bob gets the money *and* alice pays a bunch of cash to miners fees\n> 19:57 < petertodd> leakypat: this would work espectially well if we improved the scripting system so a script could evaluate true based on proof-of-doublespend\n> 19:58 < leakypat> Yeah, proof of double spend would ideally be done at the protocol level\n> 19:59 < petertodd> leakypat: if satoshi hadn't make the multiple things that CHECKSIG does into one opcode it'd be really easy, but alas...\n>\n> Implementing it as a general purpose scripting language improvement has\n> a lot of advantages, not least of which is that you no longer need to\n> rely entirely on inherently unreliable P2P networking: Promise to never\n> create two signatures for a specific BIP32 root pubkey and make\n> violating that promise destroy and/or reallocate a fidelity bond whose\n> value is locked until some time into the future. Since the fidelity bond\n> is a separate pool of funds, detection of the double-spend can happen\n> later.\n>\n> Equally, that *is* what replace-by-fee scorched-earth does without the\n> need for a soft-fork, minus the cryptographic proof and with a bit less\n> flexibility.\n>\n>> I agree with Mike & Jeff.  Blowing up 0-confirm transactions is vandalism.\n>\n> Is releasing a version of Bitcoin Core with different IsStandard() rules\n> than the previous version vandalism? Is mining with a different policy\n> than other people vandalism? Is mining at a pool that gets sybil\n> attacked vandalism? Are my replace-by-fee tools an act of vandalism?\n> Because every one of those things causes people to get double-spent in\n> the real world, even losing tens of thousands of dollars until they get\n> some sense and stop treating unconfirmed transactions as confirmed.\n>\n> Is it vandalism if you decide to host a wedding right next to a hairpin\n> corner at a rally race and complain to me that mud is getting on the\n> pretty white dresses? Is it vandalism if I tell that wedding party to\n> fuck off before someone gets hurt? Is it vandalism if some racers take\n> the mudguards off for a few laps to see if we can encourage them to\n> leave before someone gets *actually* hurt? Or someone decides that the\n> solution is to pave the track over and hold a bicycle race instead...\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000017c2f346f81e93956c538531682f5af3a95f9c94cb7a84e8"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-02-22T14:25:03",
                "message_text_only": "On Sun, Feb 22, 2015 at 8:11 AM, Adam Back <adam at cypherspace.org> wrote:\n> away from that too) is how about we explore ways to improve practical\n> security of fast confirmation transactions, and if we find something\n> better, then we can help people migrate to that before deprecating the\n> current weaker 0-conf transactions.\n\nScenario: Users are using some system in a way that the system was not\nintended to be used. Let me also further constrain the scenario and\nsuggest that the function (pretend that means instantaneous confirmed\ntransactions) that the user wants is impossible. So in this scenario,\nis it your job as some developer to change the system to do something\nit wasn't designed to do? I mean, you certainly weren't the one\ntelling them they should accept zero confirmation transactions. Also,\nI make no claims as to whether this scenario maps accurately to the\ncurrent topic.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-22T14:33:53",
                "message_text_only": "On Sun, Feb 22, 2015 at 02:11:31PM +0000, Adam Back wrote:\n> My actual point outside of the emotive stuff (and I should've stayed\n> away from that too) is how about we explore ways to improve practical\n> security of fast confirmation transactions, and if we find something\n> better, then we can help people migrate to that before deprecating the\n> current weaker 0-conf transactions.\n> \n> If I understand this is also your own motivation.\n\nIndeed, which is why I wrote some easy-to-use and highly effective tools\nto pull off double-spends and made sure to publicise them and their\neffectiveness widely. They've had their desired effect and very few\npeople are relying on unconfirmed transactions anymore. As for the\nremaining, next week alone I'll be volunteering one or two hours of my\nconsulting time to discuss solutions with a team doing person-to-person\ntrading for instance.\n\nLike I've said repeatedly, the current \"weaker\" 0-conf transactions gets\npeople new to Bitcoin - both individuals and companies - burnt over and\nover again because inevitably someone eventually gets motivated and\nbreaks them, and suddenly they lose stacks of money.\n\nKeeping *that* kind of \"security\" around rather than depreciating it\nASAP and being honest about what Bitcoin can do does no-one any good.\n\nAnyway, there is no one magic solution to this stuff - the best\nsolutions vary greatly on the situation.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000017c2f346f81e93956c538531682f5af3a95f9c94cb7a84e8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/f278289f/attachment.sig>"
            },
            {
                "author": "joliver at airmail.cc",
                "date": "2015-02-22T15:18:05",
                "message_text_only": "On 2015-02-22 14:33, Peter Todd wrote:\n> On Sun, Feb 22, 2015 at 02:11:31PM +0000, Adam Back wrote:\n>> My actual point outside of the emotive stuff (and I should've stayed\n>> away from that too) is how about we explore ways to improve practical\n>> security of fast confirmation transactions, and if we find something\n>> better, then we can help people migrate to that before deprecating the\n>> current weaker 0-conf transactions.\n>> \n>> If I understand this is also your own motivation.\n> \n> Indeed, which is why I wrote some easy-to-use and highly effective \n> tools\n> to pull off double-spends and made sure to publicise them and their\n> effectiveness widely. They've had their desired effect and very few\n> people are relying on unconfirmed transactions anymore.\n\nYou mean you wrote a bunch of FUD about zeroconf transactions while \nworking for companies like Coinbase and GreenAddress that were trying to \nsell 100% centralized solutions? Lets just be clear on this.\n\nI and many other people tried your replace-by-fee tools and found out \nthat they worked **maybe** 1-2% of the time. You claimed 95% success \nrates.\n\n> As for the\n> remaining, next week alone I'll be volunteering one or two hours of my\n> consulting time to discuss solutions with a team doing person-to-person\n> trading for instance.\n\nA \"team\"\n\nYou mean a **Company**? We don't need yet another 100% centralized \nLocalBitcoins snooping on our transactions."
            },
            {
                "author": "Peter Todd",
                "date": "2015-02-22T15:41:22",
                "message_text_only": "On Sun, Feb 22, 2015 at 03:18:05PM +0000, joliver at airmail.cc wrote:\n> > Indeed, which is why I wrote some easy-to-use and highly effective \n> > tools\n> > to pull off double-spends and made sure to publicise them and their\n> > effectiveness widely. They've had their desired effect and very few\n> > people are relying on unconfirmed transactions anymore.\n> \n> You mean you wrote a bunch of FUD about zeroconf transactions while \n> working for companies like Coinbase and GreenAddress that were trying to \n> sell 100% centralized solutions? Lets just be clear on this.\n\nYou lot spend so much time trying to claim I'm working for people I'm\nnot that I have a bad feeling I'm going to end up having to explain what\nan internet troll is to \"friendly\" Revenue Canada tax auditor...\n\n> I and many other people tried your replace-by-fee tools and found out \n> that they worked **maybe** 1-2% of the time. You claimed 95% success \n> rates.\n\nThat tool was intentionally shipped with unclear instructions and nearly\nall the double-spend strategies turned off by default; you can easily\nincrease that number with a little understanding.\n\n> > As for the\n> > remaining, next week alone I'll be volunteering one or two hours of my\n> > consulting time to discuss solutions with a team doing person-to-person\n> > trading for instance.\n> \n> A \"team\"\n> \n> You mean a **Company**? We don't need yet another 100% centralized \n> LocalBitcoins snooping on our transactions.\n\n\"[Bitcoin-development] Eliminating double-spends with two-party\nself-escrow for high value transactions\",\nPeter Todd, Apt 26th 2014,\nhttp://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg05166.html\n\n(note that the above should be updated to use CHECKLOCKTIMEVERIFY)\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000017c2f346f81e93956c538531682f5af3a95f9c94cb7a84e8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/5e98c268/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "alternate proposal opt-in miner takes double-spend (Re: replace-by-fee v0.10.0rc4)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Bryan Bishop",
                "Natanael",
                "Adam Back",
                "Mike Hearn",
                "Peter Todd",
                "joliver at airmail.cc",
                "Matt Whitlock",
                "Justus Ranvier"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 35200
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin at POS using BIP70, NFC and offline payments - implementer feedback",
        "thread_messages": [
            {
                "author": "Jan Vornberger",
                "date": "2015-02-22T19:08:39",
                "message_text_only": "Hi everyone,\n\nI am working on a Bitcoin point of sale terminal based on a Raspberry Pi, which\ndisplays QR codes, but also provides payment requests via NFC. It can optionally\nreceive the sender's transaction via Bluetooth, so if the sender wallet\nsupports it, the sender can be completely offline. Only the terminal needs an\ninternet connection.\n\nTypical scenario envisioned: Customer taps their smartphone (or maybe smartwatch\nin the future) on the NFC pad, confirms the transaction on their phone\n(or smartwatch) and the transaction completes via Bluetooth and/or the phone's\ninternet connection.\n\nYou can see a prototype in action here:\n\n  https://www.youtube.com/watch?v=P7vKHMoapr8\n\nThe above demo uses a release version of Schildbach's Bitcoin Wallet, so it\nworks as shown today. However, some parts - especially the Bluetooth stuff - are\ncustom extensions of Schildbach's wallet which are not yet standard.\n\nI'm writing this post to document my experience implementing NFC and offline\npayments and hope to move the discussion forward around standardizing some of\nthis stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser [1,2]\nfollows along the same lines, so his proposed TBIP74 [3] and TBIP75 [4] are\nrelevant here as well.\n\n\n## NFC vs Bluetooth vs NFC+Bluetooth ##\n\nBefore I get into the implementation details, a few words for why I decided to\ngo with the combination of NFC and Bluetooth:\n\nDoing everything via NFC is an interesting option to keep things simple, but the\nissue is, that one usually can't maintain the connection while the user confirms\nthe transaction (as they take the device back to press a button or maybe enter a\nPIN). So there are three options:\n\n1. Do a \"double tap\": User taps, takes the device back, confirms, then taps\nagain to transmit the transaction. (I think Google Wallet does something like\nthis.)\n\n2. Confirm beforehand: User confirms, then taps and everything can happen in one\ngo. The disadvantage is, that you confirm the transaction before you have seen\nthe details. (I believe Google Wallet can also work this way.)\n\n3. Tap the phone, then establish a Bluetooth connection which allows you to do\nall necessary communication even if the user takes the device back.\n\nI feel that option 3 is the nicest UX, so that is what I am focusing on right\nnow, but there are pros and cons to all options. One disadvantage of option 3 in\npractice is, that many users - in my experience - have Bluetooth turned off, so\nit can result in additional UI dialogs popping up, asking the user to turn on\nBluetooth.\n\nRegarding doing everything via Bluetooth or maybe BLE: I have been following the\nwork that Airbitz has done around that, but personally I prefer the NFC\ninteraction of \"I touch what I want to pay\" rather than \"a payment request comes\nto me through the air and I figure out whether it is meant for me/is legitimate\".\n\n\n## NFC data formats ##\n\nA bit of background for those who are not that familiar with NFC: Most Bitcoin\nwallets with NFC support make use of NDEF (NFC Data Exchange Format) as far as I\nam aware (with CoinBlesk being an exception, which uses host-based card\nemulation, if I understand it correctly). NDEF defines a number of record types,\namong them 'URI' and 'Mime Type'.\n\nA common way of using NFC with Bitcoin is to create a URI record that contains a\nBitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also support\nthe mime type record, which is then set to 'application/bitcoin-paymentrequest'\nand the rest of the NFC data is a complete BIP70 payment request.\n\n\n## Implementation ##\n\nTo structure the discussion a little bit, I have listed a number of scenarios to\nconsider below. Not every possible combination is listed, but it should cover a\nbit of everything.\n\nScenarios:\n\n1) Scan QR code, transmit transaction via Bitcoin network\n   Example QR code: bitcoin:1asdf...?amount=42\n\n2) Touch NFC pad, transmit transaction via Bitcoin network\n   Example NFC URI: bitcoin:1asdf...?amount=42\n\n3) Scan QR code, fetch BIP70 details via HTTP, post transaction via HTTP\n   Example QR code: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n\n4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via HTTP\n   Example NFC URI: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n\n5) Touch NFC pad, receive BIP70 details directly, post transaction via HTTP\n   Example NFC MIME record: application/bitcoin-paymentrequest + BIP70 payment request\n\n6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n   Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n   Payment request has 'payment_url' set to 'bt:1234567890AB'\n\n7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n   Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n   Payment request has 'payment_url' set to 'bt:1234567890AB'\n\nScenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I am just\nlisting them here for comparison. Scenario 3 is what is often in use now, for\nexample when using a checkout screen by BitPay or Coinbase.\n\nI played around with both scenarios 4 and 5, trying to decide whether I should\nuse an NFC URI record or already provide the complete BIP70 payment request via\nNFC.\n\nMy experience here has been, that the latter was fairly fragile in my setup\n(Raspberry Pi, NFC dongle from a company called Sensor ID, using nfcpy). I tried\nwith signed payment requests that were around 4k to 5k and the transfer would\noften not complete if I didn't hold the phone perfectly in place. So I quickly\nswitched to using the NFC URI record instead and have the phone fetch the BIP70\npayment request via Bluetooth afterwards. Using this approach the amount of data\nis small enough that it's usually 'all or nothing' and that seems more robust to\nme.\n\nThat said, I continue to have problems with the NFC stack that I'm using, so it\nmight just be my NFC setup that is causing these problems. I will probably give\nthe NXP NFC library a try next (which I believe is also the stack that is used\nby Android). Maybe I have more luck with that approach and could then switch to\nscenario 5.\n\nScenarios 6 and 7 is what the terminal is doing right now. The 'bt' parameter is\nthe non-standard extension of Andreas' wallet that I was mentioning. TBIP75\nproposes to change 'bt' into 'r1' as part of a more generic approach of\nnumbering different sources for the BIP70 payment request. I think that is a\ngood idea and would express my vote for this proposal. So the QR code or NFC URI\nwould then look something like this:\n\n  bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n\nIn addition the payment request would need to list additional 'payment_url's. My\nproposal would be to do something like this:\n\n    message PaymentDetails {\n        ...\n        optional string payment_url = 6;\n        optional bytes merchant_data = 7;\n        repeated string additional_payment_urls = 8;\n          // ^-- new; to hold things like 'bt:1234567890AB'\n    }\n\nTBIP75 proposes to just change 'optional string payment_url' into 'repeated\nstring payment_url'. If this isn't causing any problems (and hopefully not too\nmuch confusion?) I guess that would be fine too.\n\nIn my opinion a wallet should then actually attempt all or multiple of the\nprovided mechanisms in parallel (e.g. try to fetch the BIP70 payment request via\nboth HTTP and Bluetooth) and go with whatever completes first. But that is of\ncourse up to each wallet to decide how to handle.\n\nTBIP75 furthermore proposes to include an additional 'h' parameter which would\nbe a hash of the BIP70 payment request, preventing a MITM attack on the\nBluetooth channel even if the BIP70 payment request isn't signed. This would\nhave also been my suggestion, although I know that Mike Hearn has raised\nconcerns about this approach. One being, that one needs to finalize the BIP70\npayment request at the time the QR code and NFC URI is generated.\n\n\n## Questions ##\n\nMy questions to the list:\n\n1) Do you prefer changing 'optional string payment_url' into 'repeated string\npayment_url' or would you rather introduce a new field 'additional_payment_urls'?\n\n2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin Wallet?\n\n3) Are there other comments regarding 'h' parameter as per TBIP75?\n\n4) General comments, advice, feedback?\n\nI appreciate your input! :-)\n\nCheers,\nJan\n\n[1] http://andyschroder.com/BitcoinFluidDispenser/\n[2] https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n[3] https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n[4] https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-22T22:37:16",
                "message_text_only": "Hello Jan,\n\nRegarding a few of your questions:\n\nAndreas and I had a number of private discussions regarding the \npayment_url parameter. I had suggested a \"additional_payment_urls\" \nrepeated parameter, but he didn't seem to like that idea and I \npersonally am indifferent, so that is why we decided to just change \npayment_url to a repeated field. The spec is simpler without the \n\"additional_payment_urls\", but the wallets have to be a little bit \nsmarter finding the right url they want to use in the list. It's maybe \nnot a bad idea for the wallet to try all payment_url mechanisms in \nparallel. Should we add this as a recommendation to wallets in TBIP75?\n\nI had heard from Andreas a few weeks ago that the multiple r parameters \nwas not yet implemented. Maybe your interest can motivate him to do so!\n\nI actually also happen to be using nfcpy. I am having some reliability \nissues as well with it. What exactly are your problems?\n\nI have seen your video before. I guess I'm wondering how your prototype \nworks with bitpay and bluetooth. Doesn't bitpay sign the payment request \nfor you with an https based payment_url? If so, how do you add the \nbluetooth payment_url while keeping their signature valid? In your video \nit looks like the phone still has cellular and wifi reception (it is not \noffline).\n\nYou mention workflow options 1,2,3. You forgot to mention that options \n1,2 are not backwards compatible with older wallets.\n\nRegarding the NFC data formats. I would like to clarify that the wallets \nare having those events dispatched by the android OS. The \"URI\" and \n\"mime type\" events are sent to the application in the same way as from \nother sources such as a web browser, e-mail, stand alone QR code scanner \napp, etc.. So, I don't think the wallet actually knows it is receiving \nthe event from NFC. That is one reason why so many existing wallets \nhappen to support BIP21 payment request via NFC. Andreas can correct me \nif I am wrong on these statements. I'm a little weary sending the \"mime \ntype\" based format over NFC because of backwards compatibility and \nbecause of the long certificate chain that needs to be transferred. You \nwant that tap to be as robust and fast as possible. A bluetooth \nconnection can have a retry without any user interaction.\n\nI don't really understand why Mike Hearn has the objections to the h \nparameter. It seems like you should already be ready to produce the \nBIP70 payment request at the time when the URI is generated. I'd also \nlike to clarify that the h parameter is for more than just unsigned \npayment requests. You can have a signed payment request with the wrong \nsigner. There is way to much brainpower required to verify that the \nsigner is actually the merchant you are doing business with. Just think \nhow many times you shop at a store that you don't even know the name of. \nAlso, the store may contract their payment processing out to another \nparty, or they may have multiple store names but use the same payment \nprocessing system for all their stores, and the parent company has a \ndifferent name. It's good to have both the h parameter AND the signed \npayment request.\n\nI don't really like the Airbitz proposal. Figuring out if your selecting \nis the right one is a real nuisance. The idea is neat in a few \napplications, but I just don't think it is going to work for people as \nthe most efficient and trouble free option day to day. I realize they \nare probably doing it to work with Apple's limited functionality phones \n(and BLE is a new buzz word). However, I don't think we should base \nbitcoin around what Apple wants us to do. They've already had their war \non bitcoin. They are going to do whatever they can to protect their NFC \nbased payment system. We need to make their platform the the less \ndesirable one if they are going to play the game that way. If that means \nan Airbitz like proposal is implemented as a fallback, maybe that is \nfine and POS systems need to support both, but I just don't think we \nshould limit what we can do because of Apple's products capabilities.\n\nThere is also the \"ack\" memo that I mentioned in reference [2]. I think \nwe can improve upon this really. Can we make a new status field or \ndifferent bluetooth message header? I know Andreas didn't want to change \nit because that is how his app already works, but I don't think the way \nit is is ideal.\n\nI'd like to see some discussion too about securing the bluetooth \nconnection. Right now it is possible for an eavesdropper to monitor the \ndata transferred. I'd personally like to see if wrapping the current \nconnection with SSL works or if we can run https over a bluetooth \nsocket. There was some criticism of this, but I don't think it has been \ntested to know if it is really a problem or not. If we just run https \nover bluetooth, then a lot of my concerns about the message header \ninconsistencies will go away and the connection will also be secure. We \ndon't have to reinvent anything.\n\n\n\nAndy Schroder\n\nOn 02/22/2015 02:08 PM, Jan Vornberger wrote:\n> Hi everyone,\n>\n> I am working on a Bitcoin point of sale terminal based on a Raspberry Pi, which\n> displays QR codes, but also provides payment requests via NFC. It can optionally\n> receive the sender's transaction via Bluetooth, so if the sender wallet\n> supports it, the sender can be completely offline. Only the terminal needs an\n> internet connection.\n>\n> Typical scenario envisioned: Customer taps their smartphone (or maybe smartwatch\n> in the future) on the NFC pad, confirms the transaction on their phone\n> (or smartwatch) and the transaction completes via Bluetooth and/or the phone's\n> internet connection.\n>\n> You can see a prototype in action here:\n>\n>    https://www.youtube.com/watch?v=P7vKHMoapr8\n>\n> The above demo uses a release version of Schildbach's Bitcoin Wallet, so it\n> works as shown today. However, some parts - especially the Bluetooth stuff - are\n> custom extensions of Schildbach's wallet which are not yet standard.\n>\n> I'm writing this post to document my experience implementing NFC and offline\n> payments and hope to move the discussion forward around standardizing some of\n> this stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser [1,2]\n> follows along the same lines, so his proposed TBIP74 [3] and TBIP75 [4] are\n> relevant here as well.\n>\n>\n> ## NFC vs Bluetooth vs NFC+Bluetooth ##\n>\n> Before I get into the implementation details, a few words for why I decided to\n> go with the combination of NFC and Bluetooth:\n>\n> Doing everything via NFC is an interesting option to keep things simple, but the\n> issue is, that one usually can't maintain the connection while the user confirms\n> the transaction (as they take the device back to press a button or maybe enter a\n> PIN). So there are three options:\n>\n> 1. Do a \"double tap\": User taps, takes the device back, confirms, then taps\n> again to transmit the transaction. (I think Google Wallet does something like\n> this.)\n>\n> 2. Confirm beforehand: User confirms, then taps and everything can happen in one\n> go. The disadvantage is, that you confirm the transaction before you have seen\n> the details. (I believe Google Wallet can also work this way.)\n>\n> 3. Tap the phone, then establish a Bluetooth connection which allows you to do\n> all necessary communication even if the user takes the device back.\n>\n> I feel that option 3 is the nicest UX, so that is what I am focusing on right\n> now, but there are pros and cons to all options. One disadvantage of option 3 in\n> practice is, that many users - in my experience - have Bluetooth turned off, so\n> it can result in additional UI dialogs popping up, asking the user to turn on\n> Bluetooth.\n>\n> Regarding doing everything via Bluetooth or maybe BLE: I have been following the\n> work that Airbitz has done around that, but personally I prefer the NFC\n> interaction of \"I touch what I want to pay\" rather than \"a payment request comes\n> to me through the air and I figure out whether it is meant for me/is legitimate\".\n>\n>\n> ## NFC data formats ##\n>\n> A bit of background for those who are not that familiar with NFC: Most Bitcoin\n> wallets with NFC support make use of NDEF (NFC Data Exchange Format) as far as I\n> am aware (with CoinBlesk being an exception, which uses host-based card\n> emulation, if I understand it correctly). NDEF defines a number of record types,\n> among them 'URI' and 'Mime Type'.\n>\n> A common way of using NFC with Bitcoin is to create a URI record that contains a\n> Bitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also support\n> the mime type record, which is then set to 'application/bitcoin-paymentrequest'\n> and the rest of the NFC data is a complete BIP70 payment request.\n>\n>\n> ## Implementation ##\n>\n> To structure the discussion a little bit, I have listed a number of scenarios to\n> consider below. Not every possible combination is listed, but it should cover a\n> bit of everything.\n>\n> Scenarios:\n>\n> 1) Scan QR code, transmit transaction via Bitcoin network\n>     Example QR code: bitcoin:1asdf...?amount=42\n>\n> 2) Touch NFC pad, transmit transaction via Bitcoin network\n>     Example NFC URI: bitcoin:1asdf...?amount=42\n>\n> 3) Scan QR code, fetch BIP70 details via HTTP, post transaction via HTTP\n>     Example QR code: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>\n> 4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via HTTP\n>     Example NFC URI: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>\n> 5) Touch NFC pad, receive BIP70 details directly, post transaction via HTTP\n>     Example NFC MIME record: application/bitcoin-paymentrequest + BIP70 payment request\n>\n> 6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>     Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>     Payment request has 'payment_url' set to 'bt:1234567890AB'\n>\n> 7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>     Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>     Payment request has 'payment_url' set to 'bt:1234567890AB'\n>\n> Scenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I am just\n> listing them here for comparison. Scenario 3 is what is often in use now, for\n> example when using a checkout screen by BitPay or Coinbase.\n>\n> I played around with both scenarios 4 and 5, trying to decide whether I should\n> use an NFC URI record or already provide the complete BIP70 payment request via\n> NFC.\n>\n> My experience here has been, that the latter was fairly fragile in my setup\n> (Raspberry Pi, NFC dongle from a company called Sensor ID, using nfcpy). I tried\n> with signed payment requests that were around 4k to 5k and the transfer would\n> often not complete if I didn't hold the phone perfectly in place. So I quickly\n> switched to using the NFC URI record instead and have the phone fetch the BIP70\n> payment request via Bluetooth afterwards. Using this approach the amount of data\n> is small enough that it's usually 'all or nothing' and that seems more robust to\n> me.\n>\n> That said, I continue to have problems with the NFC stack that I'm using, so it\n> might just be my NFC setup that is causing these problems. I will probably give\n> the NXP NFC library a try next (which I believe is also the stack that is used\n> by Android). Maybe I have more luck with that approach and could then switch to\n> scenario 5.\n>\n> Scenarios 6 and 7 is what the terminal is doing right now. The 'bt' parameter is\n> the non-standard extension of Andreas' wallet that I was mentioning. TBIP75\n> proposes to change 'bt' into 'r1' as part of a more generic approach of\n> numbering different sources for the BIP70 payment request. I think that is a\n> good idea and would express my vote for this proposal. So the QR code or NFC URI\n> would then look something like this:\n>\n>    bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n>\n> In addition the payment request would need to list additional 'payment_url's. My\n> proposal would be to do something like this:\n>\n>      message PaymentDetails {\n>          ...\n>          optional string payment_url = 6;\n>          optional bytes merchant_data = 7;\n>          repeated string additional_payment_urls = 8;\n>            // ^-- new; to hold things like 'bt:1234567890AB'\n>      }\n>\n> TBIP75 proposes to just change 'optional string payment_url' into 'repeated\n> string payment_url'. If this isn't causing any problems (and hopefully not too\n> much confusion?) I guess that would be fine too.\n>\n> In my opinion a wallet should then actually attempt all or multiple of the\n> provided mechanisms in parallel (e.g. try to fetch the BIP70 payment request via\n> both HTTP and Bluetooth) and go with whatever completes first. But that is of\n> course up to each wallet to decide how to handle.\n>\n> TBIP75 furthermore proposes to include an additional 'h' parameter which would\n> be a hash of the BIP70 payment request, preventing a MITM attack on the\n> Bluetooth channel even if the BIP70 payment request isn't signed. This would\n> have also been my suggestion, although I know that Mike Hearn has raised\n> concerns about this approach. One being, that one needs to finalize the BIP70\n> payment request at the time the QR code and NFC URI is generated.\n>\n>\n> ## Questions ##\n>\n> My questions to the list:\n>\n> 1) Do you prefer changing 'optional string payment_url' into 'repeated string\n> payment_url' or would you rather introduce a new field 'additional_payment_urls'?\n>\n> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin Wallet?\n>\n> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>\n> 4) General comments, advice, feedback?\n>\n> I appreciate your input! :-)\n>\n> Cheers,\n> Jan\n>\n> [1] http://andyschroder.com/BitcoinFluidDispenser/\n> [2] https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n> [3] https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n> [4] https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x2D44186B.asc\nType: application/pgp-keys\nSize: 1739 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/230a5e33/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/230a5e33/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-22T23:06:01",
                "message_text_only": "On 02/22/2015 02:37 PM, Andy Schroder wrote:\n> I'd like to see some discussion too about securing the bluetooth\n> connection. Right now it is possible for an eavesdropper to monitor the\n> data transferred. \n\nYes, this should be a prerequisite issue to all others.\n\n> I'd personally like to see if wrapping the current\n> connection with SSL works or if we can run https over a bluetooth\n> socket. \n\nThere is no reason to add this significant complexity. The purpose of\nSSL/TLS is to establish privacy over a *public* channel. But to do so\nrequires verification by the user of the merchant's public certificate.\nOnce we rely on the channel being *private*, the entire SSL process is\nunnecessary.\n\nPresumably we would not want to require PKI for privacy, since that's a\nbit of a contradiction. But if one wants to do this NFC is not required,\nsince the private session can be established over the public (Bluetooth)\nnetwork.\n\n> There was some criticism of this, but I don't think it has been\n> tested to know if it is really a problem or not. If we just run https\n> over bluetooth, then a lot of my concerns about the message header\n> inconsistencies will go away and the connection will also be secure. We\n> don't have to reinvent anything.\n> \n> \n> \n> Andy Schroder\n> \n> On 02/22/2015 02:08 PM, Jan Vornberger wrote:\n>> Hi everyone,\n>>\n>> I am working on a Bitcoin point of sale terminal based on a Raspberry\n>> Pi, which\n>> displays QR codes, but also provides payment requests via NFC. It can\n>> optionally\n>> receive the sender's transaction via Bluetooth, so if the sender wallet\n>> supports it, the sender can be completely offline. Only the terminal\n>> needs an\n>> internet connection.\n>>\n>> Typical scenario envisioned: Customer taps their smartphone (or maybe\n>> smartwatch\n>> in the future) on the NFC pad, confirms the transaction on their phone\n>> (or smartwatch) and the transaction completes via Bluetooth and/or the\n>> phone's\n>> internet connection.\n>>\n>> You can see a prototype in action here:\n>>\n>>    https://www.youtube.com/watch?v=P7vKHMoapr8\n>>\n>> The above demo uses a release version of Schildbach's Bitcoin Wallet,\n>> so it\n>> works as shown today. However, some parts - especially the Bluetooth\n>> stuff - are\n>> custom extensions of Schildbach's wallet which are not yet standard.\n>>\n>> I'm writing this post to document my experience implementing NFC and\n>> offline\n>> payments and hope to move the discussion forward around standardizing\n>> some of\n>> this stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser [1,2]\n>> follows along the same lines, so his proposed TBIP74 [3] and TBIP75\n>> [4] are\n>> relevant here as well.\n>>\n>>\n>> ## NFC vs Bluetooth vs NFC+Bluetooth ##\n>>\n>> Before I get into the implementation details, a few words for why I\n>> decided to\n>> go with the combination of NFC and Bluetooth:\n>>\n>> Doing everything via NFC is an interesting option to keep things\n>> simple, but the\n>> issue is, that one usually can't maintain the connection while the\n>> user confirms\n>> the transaction (as they take the device back to press a button or\n>> maybe enter a\n>> PIN). So there are three options:\n>>\n>> 1. Do a \"double tap\": User taps, takes the device back, confirms, then\n>> taps\n>> again to transmit the transaction. (I think Google Wallet does\n>> something like\n>> this.)\n>>\n>> 2. Confirm beforehand: User confirms, then taps and everything can\n>> happen in one\n>> go. The disadvantage is, that you confirm the transaction before you\n>> have seen\n>> the details. (I believe Google Wallet can also work this way.)\n>>\n>> 3. Tap the phone, then establish a Bluetooth connection which allows\n>> you to do\n>> all necessary communication even if the user takes the device back.\n>>\n>> I feel that option 3 is the nicest UX, so that is what I am focusing\n>> on right\n>> now, but there are pros and cons to all options. One disadvantage of\n>> option 3 in\n>> practice is, that many users - in my experience - have Bluetooth\n>> turned off, so\n>> it can result in additional UI dialogs popping up, asking the user to\n>> turn on\n>> Bluetooth.\n>>\n>> Regarding doing everything via Bluetooth or maybe BLE: I have been\n>> following the\n>> work that Airbitz has done around that, but personally I prefer the NFC\n>> interaction of \"I touch what I want to pay\" rather than \"a payment\n>> request comes\n>> to me through the air and I figure out whether it is meant for me/is\n>> legitimate\".\n>>\n>>\n>> ## NFC data formats ##\n>>\n>> A bit of background for those who are not that familiar with NFC: Most\n>> Bitcoin\n>> wallets with NFC support make use of NDEF (NFC Data Exchange Format)\n>> as far as I\n>> am aware (with CoinBlesk being an exception, which uses host-based card\n>> emulation, if I understand it correctly). NDEF defines a number of\n>> record types,\n>> among them 'URI' and 'Mime Type'.\n>>\n>> A common way of using NFC with Bitcoin is to create a URI record that\n>> contains a\n>> Bitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also\n>> support\n>> the mime type record, which is then set to\n>> 'application/bitcoin-paymentrequest'\n>> and the rest of the NFC data is a complete BIP70 payment request.\n>>\n>>\n>> ## Implementation ##\n>>\n>> To structure the discussion a little bit, I have listed a number of\n>> scenarios to\n>> consider below. Not every possible combination is listed, but it\n>> should cover a\n>> bit of everything.\n>>\n>> Scenarios:\n>>\n>> 1) Scan QR code, transmit transaction via Bitcoin network\n>>     Example QR code: bitcoin:1asdf...?amount=42\n>>\n>> 2) Touch NFC pad, transmit transaction via Bitcoin network\n>>     Example NFC URI: bitcoin:1asdf...?amount=42\n>>\n>> 3) Scan QR code, fetch BIP70 details via HTTP, post transaction via HTTP\n>>     Example QR code:\n>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>\n>> 4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via HTTP\n>>     Example NFC URI:\n>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>\n>> 5) Touch NFC pad, receive BIP70 details directly, post transaction via\n>> HTTP\n>>     Example NFC MIME record: application/bitcoin-paymentrequest +\n>> BIP70 payment request\n>>\n>> 6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction\n>> via Bluetooth\n>>     Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>     Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>\n>> 7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction\n>> via Bluetooth\n>>     Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>     Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>\n>> Scenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I\n>> am just\n>> listing them here for comparison. Scenario 3 is what is often in use\n>> now, for\n>> example when using a checkout screen by BitPay or Coinbase.\n>>\n>> I played around with both scenarios 4 and 5, trying to decide whether\n>> I should\n>> use an NFC URI record or already provide the complete BIP70 payment\n>> request via\n>> NFC.\n>>\n>> My experience here has been, that the latter was fairly fragile in my\n>> setup\n>> (Raspberry Pi, NFC dongle from a company called Sensor ID, using\n>> nfcpy). I tried\n>> with signed payment requests that were around 4k to 5k and the\n>> transfer would\n>> often not complete if I didn't hold the phone perfectly in place. So I\n>> quickly\n>> switched to using the NFC URI record instead and have the phone fetch\n>> the BIP70\n>> payment request via Bluetooth afterwards. Using this approach the\n>> amount of data\n>> is small enough that it's usually 'all or nothing' and that seems more\n>> robust to\n>> me.\n>>\n>> That said, I continue to have problems with the NFC stack that I'm\n>> using, so it\n>> might just be my NFC setup that is causing these problems. I will\n>> probably give\n>> the NXP NFC library a try next (which I believe is also the stack that\n>> is used\n>> by Android). Maybe I have more luck with that approach and could then\n>> switch to\n>> scenario 5.\n>>\n>> Scenarios 6 and 7 is what the terminal is doing right now. The 'bt'\n>> parameter is\n>> the non-standard extension of Andreas' wallet that I was mentioning.\n>> TBIP75\n>> proposes to change 'bt' into 'r1' as part of a more generic approach of\n>> numbering different sources for the BIP70 payment request. I think\n>> that is a\n>> good idea and would express my vote for this proposal. So the QR code\n>> or NFC URI\n>> would then look something like this:\n>>\n>>   \n>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n>>\n>>\n>> In addition the payment request would need to list additional\n>> 'payment_url's. My\n>> proposal would be to do something like this:\n>>\n>>      message PaymentDetails {\n>>          ...\n>>          optional string payment_url = 6;\n>>          optional bytes merchant_data = 7;\n>>          repeated string additional_payment_urls = 8;\n>>            // ^-- new; to hold things like 'bt:1234567890AB'\n>>      }\n>>\n>> TBIP75 proposes to just change 'optional string payment_url' into\n>> 'repeated\n>> string payment_url'. If this isn't causing any problems (and hopefully\n>> not too\n>> much confusion?) I guess that would be fine too.\n>>\n>> In my opinion a wallet should then actually attempt all or multiple of\n>> the\n>> provided mechanisms in parallel (e.g. try to fetch the BIP70 payment\n>> request via\n>> both HTTP and Bluetooth) and go with whatever completes first. But\n>> that is of\n>> course up to each wallet to decide how to handle.\n>>\n>> TBIP75 furthermore proposes to include an additional 'h' parameter\n>> which would\n>> be a hash of the BIP70 payment request, preventing a MITM attack on the\n>> Bluetooth channel even if the BIP70 payment request isn't signed. This\n>> would\n>> have also been my suggestion, although I know that Mike Hearn has raised\n>> concerns about this approach. One being, that one needs to finalize\n>> the BIP70\n>> payment request at the time the QR code and NFC URI is generated.\n>>\n>>\n>> ## Questions ##\n>>\n>> My questions to the list:\n>>\n>> 1) Do you prefer changing 'optional string payment_url' into 'repeated\n>> string\n>> payment_url' or would you rather introduce a new field\n>> 'additional_payment_urls'?\n>>\n>> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin\n>> Wallet?\n>>\n>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>>\n>> 4) General comments, advice, feedback?\n>>\n>> I appreciate your input! :-)\n>>\n>> Cheers,\n>> Jan\n>>\n>> [1] http://andyschroder.com/BitcoinFluidDispenser/\n>> [2]\n>> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n>>\n>> [3] https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>> [4] https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>\n>> ------------------------------------------------------------------------------\n>>\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/a3e8cdc2/attachment.sig>"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-22T23:32:05",
                "message_text_only": "Andy Schroder\n\nOn 02/22/2015 06:06 PM, Eric Voskuil wrote:\n> On 02/22/2015 02:37 PM, Andy Schroder wrote:\n>> I'd like to see some discussion too about securing the bluetooth\n>> connection. Right now it is possible for an eavesdropper to monitor the\n>> data transferred.\n> Yes, this should be a prerequisite issue to all others.\n>\n>> I'd personally like to see if wrapping the current\n>> connection with SSL works or if we can run https over a bluetooth\n>> socket.\n> There is no reason to add this significant complexity. The purpose of\n> SSL/TLS is to establish privacy over a *public* channel. But to do so\n> requires verification by the user of the merchant's public certificate.\n> Once we rely on the channel being *private*, the entire SSL process is\n> unnecessary.\n\n\nI guess we need to decide whether we want to consider NFC communication \nprivate or not. I don't know that I think it can be. An eavesdropper can \nplace a tiny snooping device near and read the communication. If it is \njust passive, then the merchant/operator won't realize it's there. So, I \ndon't know if I like your idea (mentioned in your other reply) of \nputting the session key in the URL is a good idea?\n\n\n>\n> Presumably we would not want to require PKI for privacy, since that's a\n> bit of a contradiction. But if one wants to do this NFC is not required,\n> since the private session can be established over the public (Bluetooth)\n> network.\n>\n>> There was some criticism of this, but I don't think it has been\n>> tested to know if it is really a problem or not. If we just run https\n>> over bluetooth, then a lot of my concerns about the message header\n>> inconsistencies will go away and the connection will also be secure. We\n>> don't have to reinvent anything.\n>>\n>>\n>>\n>> Andy Schroder\n>>\n>> On 02/22/2015 02:08 PM, Jan Vornberger wrote:\n>>> Hi everyone,\n>>>\n>>> I am working on a Bitcoin point of sale terminal based on a Raspberry\n>>> Pi, which\n>>> displays QR codes, but also provides payment requests via NFC. It can\n>>> optionally\n>>> receive the sender's transaction via Bluetooth, so if the sender wallet\n>>> supports it, the sender can be completely offline. Only the terminal\n>>> needs an\n>>> internet connection.\n>>>\n>>> Typical scenario envisioned: Customer taps their smartphone (or maybe\n>>> smartwatch\n>>> in the future) on the NFC pad, confirms the transaction on their phone\n>>> (or smartwatch) and the transaction completes via Bluetooth and/or the\n>>> phone's\n>>> internet connection.\n>>>\n>>> You can see a prototype in action here:\n>>>\n>>>     https://www.youtube.com/watch?v=P7vKHMoapr8\n>>>\n>>> The above demo uses a release version of Schildbach's Bitcoin Wallet,\n>>> so it\n>>> works as shown today. However, some parts - especially the Bluetooth\n>>> stuff - are\n>>> custom extensions of Schildbach's wallet which are not yet standard.\n>>>\n>>> I'm writing this post to document my experience implementing NFC and\n>>> offline\n>>> payments and hope to move the discussion forward around standardizing\n>>> some of\n>>> this stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser [1,2]\n>>> follows along the same lines, so his proposed TBIP74 [3] and TBIP75\n>>> [4] are\n>>> relevant here as well.\n>>>\n>>>\n>>> ## NFC vs Bluetooth vs NFC+Bluetooth ##\n>>>\n>>> Before I get into the implementation details, a few words for why I\n>>> decided to\n>>> go with the combination of NFC and Bluetooth:\n>>>\n>>> Doing everything via NFC is an interesting option to keep things\n>>> simple, but the\n>>> issue is, that one usually can't maintain the connection while the\n>>> user confirms\n>>> the transaction (as they take the device back to press a button or\n>>> maybe enter a\n>>> PIN). So there are three options:\n>>>\n>>> 1. Do a \"double tap\": User taps, takes the device back, confirms, then\n>>> taps\n>>> again to transmit the transaction. (I think Google Wallet does\n>>> something like\n>>> this.)\n>>>\n>>> 2. Confirm beforehand: User confirms, then taps and everything can\n>>> happen in one\n>>> go. The disadvantage is, that you confirm the transaction before you\n>>> have seen\n>>> the details. (I believe Google Wallet can also work this way.)\n>>>\n>>> 3. Tap the phone, then establish a Bluetooth connection which allows\n>>> you to do\n>>> all necessary communication even if the user takes the device back.\n>>>\n>>> I feel that option 3 is the nicest UX, so that is what I am focusing\n>>> on right\n>>> now, but there are pros and cons to all options. One disadvantage of\n>>> option 3 in\n>>> practice is, that many users - in my experience - have Bluetooth\n>>> turned off, so\n>>> it can result in additional UI dialogs popping up, asking the user to\n>>> turn on\n>>> Bluetooth.\n>>>\n>>> Regarding doing everything via Bluetooth or maybe BLE: I have been\n>>> following the\n>>> work that Airbitz has done around that, but personally I prefer the NFC\n>>> interaction of \"I touch what I want to pay\" rather than \"a payment\n>>> request comes\n>>> to me through the air and I figure out whether it is meant for me/is\n>>> legitimate\".\n>>>\n>>>\n>>> ## NFC data formats ##\n>>>\n>>> A bit of background for those who are not that familiar with NFC: Most\n>>> Bitcoin\n>>> wallets with NFC support make use of NDEF (NFC Data Exchange Format)\n>>> as far as I\n>>> am aware (with CoinBlesk being an exception, which uses host-based card\n>>> emulation, if I understand it correctly). NDEF defines a number of\n>>> record types,\n>>> among them 'URI' and 'Mime Type'.\n>>>\n>>> A common way of using NFC with Bitcoin is to create a URI record that\n>>> contains a\n>>> Bitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also\n>>> support\n>>> the mime type record, which is then set to\n>>> 'application/bitcoin-paymentrequest'\n>>> and the rest of the NFC data is a complete BIP70 payment request.\n>>>\n>>>\n>>> ## Implementation ##\n>>>\n>>> To structure the discussion a little bit, I have listed a number of\n>>> scenarios to\n>>> consider below. Not every possible combination is listed, but it\n>>> should cover a\n>>> bit of everything.\n>>>\n>>> Scenarios:\n>>>\n>>> 1) Scan QR code, transmit transaction via Bitcoin network\n>>>      Example QR code: bitcoin:1asdf...?amount=42\n>>>\n>>> 2) Touch NFC pad, transmit transaction via Bitcoin network\n>>>      Example NFC URI: bitcoin:1asdf...?amount=42\n>>>\n>>> 3) Scan QR code, fetch BIP70 details via HTTP, post transaction via HTTP\n>>>      Example QR code:\n>>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>>\n>>> 4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via HTTP\n>>>      Example NFC URI:\n>>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>>\n>>> 5) Touch NFC pad, receive BIP70 details directly, post transaction via\n>>> HTTP\n>>>      Example NFC MIME record: application/bitcoin-paymentrequest +\n>>> BIP70 payment request\n>>>\n>>> 6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction\n>>> via Bluetooth\n>>>      Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>>      Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>>\n>>> 7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction\n>>> via Bluetooth\n>>>      Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>>      Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>>\n>>> Scenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I\n>>> am just\n>>> listing them here for comparison. Scenario 3 is what is often in use\n>>> now, for\n>>> example when using a checkout screen by BitPay or Coinbase.\n>>>\n>>> I played around with both scenarios 4 and 5, trying to decide whether\n>>> I should\n>>> use an NFC URI record or already provide the complete BIP70 payment\n>>> request via\n>>> NFC.\n>>>\n>>> My experience here has been, that the latter was fairly fragile in my\n>>> setup\n>>> (Raspberry Pi, NFC dongle from a company called Sensor ID, using\n>>> nfcpy). I tried\n>>> with signed payment requests that were around 4k to 5k and the\n>>> transfer would\n>>> often not complete if I didn't hold the phone perfectly in place. So I\n>>> quickly\n>>> switched to using the NFC URI record instead and have the phone fetch\n>>> the BIP70\n>>> payment request via Bluetooth afterwards. Using this approach the\n>>> amount of data\n>>> is small enough that it's usually 'all or nothing' and that seems more\n>>> robust to\n>>> me.\n>>>\n>>> That said, I continue to have problems with the NFC stack that I'm\n>>> using, so it\n>>> might just be my NFC setup that is causing these problems. I will\n>>> probably give\n>>> the NXP NFC library a try next (which I believe is also the stack that\n>>> is used\n>>> by Android). Maybe I have more luck with that approach and could then\n>>> switch to\n>>> scenario 5.\n>>>\n>>> Scenarios 6 and 7 is what the terminal is doing right now. The 'bt'\n>>> parameter is\n>>> the non-standard extension of Andreas' wallet that I was mentioning.\n>>> TBIP75\n>>> proposes to change 'bt' into 'r1' as part of a more generic approach of\n>>> numbering different sources for the BIP70 payment request. I think\n>>> that is a\n>>> good idea and would express my vote for this proposal. So the QR code\n>>> or NFC URI\n>>> would then look something like this:\n>>>\n>>>    \n>>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n>>>\n>>>\n>>> In addition the payment request would need to list additional\n>>> 'payment_url's. My\n>>> proposal would be to do something like this:\n>>>\n>>>       message PaymentDetails {\n>>>           ...\n>>>           optional string payment_url = 6;\n>>>           optional bytes merchant_data = 7;\n>>>           repeated string additional_payment_urls = 8;\n>>>             // ^-- new; to hold things like 'bt:1234567890AB'\n>>>       }\n>>>\n>>> TBIP75 proposes to just change 'optional string payment_url' into\n>>> 'repeated\n>>> string payment_url'. If this isn't causing any problems (and hopefully\n>>> not too\n>>> much confusion?) I guess that would be fine too.\n>>>\n>>> In my opinion a wallet should then actually attempt all or multiple of\n>>> the\n>>> provided mechanisms in parallel (e.g. try to fetch the BIP70 payment\n>>> request via\n>>> both HTTP and Bluetooth) and go with whatever completes first. But\n>>> that is of\n>>> course up to each wallet to decide how to handle.\n>>>\n>>> TBIP75 furthermore proposes to include an additional 'h' parameter\n>>> which would\n>>> be a hash of the BIP70 payment request, preventing a MITM attack on the\n>>> Bluetooth channel even if the BIP70 payment request isn't signed. This\n>>> would\n>>> have also been my suggestion, although I know that Mike Hearn has raised\n>>> concerns about this approach. One being, that one needs to finalize\n>>> the BIP70\n>>> payment request at the time the QR code and NFC URI is generated.\n>>>\n>>>\n>>> ## Questions ##\n>>>\n>>> My questions to the list:\n>>>\n>>> 1) Do you prefer changing 'optional string payment_url' into 'repeated\n>>> string\n>>> payment_url' or would you rather introduce a new field\n>>> 'additional_payment_urls'?\n>>>\n>>> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin\n>>> Wallet?\n>>>\n>>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>>>\n>>> 4) General comments, advice, feedback?\n>>>\n>>> I appreciate your input! :-)\n>>>\n>>> Cheers,\n>>> Jan\n>>>\n>>> [1] http://andyschroder.com/BitcoinFluidDispenser/\n>>> [2]\n>>> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n>>>\n>>> [3] https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>>> [4] https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>>\n>>> ------------------------------------------------------------------------------\n>>>\n>>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>>> Get technology previously reserved for billion-dollar corporations, FREE\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/38815d05/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-23T00:05:06",
                "message_text_only": "On 02/22/2015 03:32 PM, Andy Schroder wrote:\n> On 02/22/2015 06:06 PM, Eric Voskuil wrote:\n>> On 02/22/2015 02:37 PM, Andy Schroder wrote:\n>>> I'd like to see some discussion too about securing the bluetooth\n>>> connection. Right now it is possible for an eavesdropper to monitor the\n>>> data transferred.\n>> Yes, this should be a prerequisite issue to all others.\n>>\n>>> I'd personally like to see if wrapping the current\n>>> connection with SSL works or if we can run https over a bluetooth\n>>> socket.\n>> There is no reason to add this significant complexity. The purpose of\n>> SSL/TLS is to establish privacy over a *public* channel. But to do so\n>> requires verification by the user of the merchant's public certificate.\n>> Once we rely on the channel being *private*, the entire SSL process is\n>> unnecessary.\n> \n> \n> I guess we need to decide whether we want to consider NFC communication\n> private or not. I don't know that I think it can be.\n\nIf the NFC communication is not private then there is no reason to use it.\n\n> An eavesdropper can\n> place a tiny snooping device near and read the communication. If it is\n> just passive, then the merchant/operator won't realize it's there.\n\nSee my comments on an unmonitored terminal.\n\n> So, I\n> don't know if I like your idea (mentioned in your other reply) of\n> putting the session key in the URL is a good idea?\n\nMy point is that you are not solving that problem by creating a more\ncomplex system. Either you establish trust via proximity or you don't.\nIf you don't, it's a public network. If you do, then keep it simple.\n\nThere's nothing holy about a session key in this scenario. It's not\nderived from long-lived keys and is itself used only once. There is\nnothing wrong with the URL carrying the secret. If you want to secure\nthis channel without manual intervention, there is ultimately no other\noption.\n\n>> Presumably we would not want to require PKI for privacy, since that's a\n>> bit of a contradiction. But if one wants to do this NFC is not required,\n>> since the private session can be established over the public (Bluetooth)\n>> network.\n>>\n>>> There was some criticism of this, but I don't think it has been\n>>> tested to know if it is really a problem or not. If we just run https\n>>> over bluetooth, then a lot of my concerns about the message header\n>>> inconsistencies will go away and the connection will also be secure. We\n>>> don't have to reinvent anything.\n>>>\n>>>\n>>>\n>>> Andy Schroder\n>>>\n>>> On 02/22/2015 02:08 PM, Jan Vornberger wrote:\n>>>> Hi everyone,\n>>>>\n>>>> I am working on a Bitcoin point of sale terminal based on a Raspberry\n>>>> Pi, which\n>>>> displays QR codes, but also provides payment requests via NFC. It can\n>>>> optionally\n>>>> receive the sender's transaction via Bluetooth, so if the sender wallet\n>>>> supports it, the sender can be completely offline. Only the terminal\n>>>> needs an\n>>>> internet connection.\n>>>>\n>>>> Typical scenario envisioned: Customer taps their smartphone (or maybe\n>>>> smartwatch\n>>>> in the future) on the NFC pad, confirms the transaction on their phone\n>>>> (or smartwatch) and the transaction completes via Bluetooth and/or the\n>>>> phone's\n>>>> internet connection.\n>>>>\n>>>> You can see a prototype in action here:\n>>>>\n>>>>     https://www.youtube.com/watch?v=P7vKHMoapr8\n>>>>\n>>>> The above demo uses a release version of Schildbach's Bitcoin Wallet,\n>>>> so it\n>>>> works as shown today. However, some parts - especially the Bluetooth\n>>>> stuff - are\n>>>> custom extensions of Schildbach's wallet which are not yet standard.\n>>>>\n>>>> I'm writing this post to document my experience implementing NFC and\n>>>> offline\n>>>> payments and hope to move the discussion forward around standardizing\n>>>> some of\n>>>> this stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser\n>>>> [1,2]\n>>>> follows along the same lines, so his proposed TBIP74 [3] and TBIP75\n>>>> [4] are\n>>>> relevant here as well.\n>>>>\n>>>>\n>>>> ## NFC vs Bluetooth vs NFC+Bluetooth ##\n>>>>\n>>>> Before I get into the implementation details, a few words for why I\n>>>> decided to\n>>>> go with the combination of NFC and Bluetooth:\n>>>>\n>>>> Doing everything via NFC is an interesting option to keep things\n>>>> simple, but the\n>>>> issue is, that one usually can't maintain the connection while the\n>>>> user confirms\n>>>> the transaction (as they take the device back to press a button or\n>>>> maybe enter a\n>>>> PIN). So there are three options:\n>>>>\n>>>> 1. Do a \"double tap\": User taps, takes the device back, confirms, then\n>>>> taps\n>>>> again to transmit the transaction. (I think Google Wallet does\n>>>> something like\n>>>> this.)\n>>>>\n>>>> 2. Confirm beforehand: User confirms, then taps and everything can\n>>>> happen in one\n>>>> go. The disadvantage is, that you confirm the transaction before you\n>>>> have seen\n>>>> the details. (I believe Google Wallet can also work this way.)\n>>>>\n>>>> 3. Tap the phone, then establish a Bluetooth connection which allows\n>>>> you to do\n>>>> all necessary communication even if the user takes the device back.\n>>>>\n>>>> I feel that option 3 is the nicest UX, so that is what I am focusing\n>>>> on right\n>>>> now, but there are pros and cons to all options. One disadvantage of\n>>>> option 3 in\n>>>> practice is, that many users - in my experience - have Bluetooth\n>>>> turned off, so\n>>>> it can result in additional UI dialogs popping up, asking the user to\n>>>> turn on\n>>>> Bluetooth.\n>>>>\n>>>> Regarding doing everything via Bluetooth or maybe BLE: I have been\n>>>> following the\n>>>> work that Airbitz has done around that, but personally I prefer the NFC\n>>>> interaction of \"I touch what I want to pay\" rather than \"a payment\n>>>> request comes\n>>>> to me through the air and I figure out whether it is meant for me/is\n>>>> legitimate\".\n>>>>\n>>>>\n>>>> ## NFC data formats ##\n>>>>\n>>>> A bit of background for those who are not that familiar with NFC: Most\n>>>> Bitcoin\n>>>> wallets with NFC support make use of NDEF (NFC Data Exchange Format)\n>>>> as far as I\n>>>> am aware (with CoinBlesk being an exception, which uses host-based card\n>>>> emulation, if I understand it correctly). NDEF defines a number of\n>>>> record types,\n>>>> among them 'URI' and 'Mime Type'.\n>>>>\n>>>> A common way of using NFC with Bitcoin is to create a URI record that\n>>>> contains a\n>>>> Bitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also\n>>>> support\n>>>> the mime type record, which is then set to\n>>>> 'application/bitcoin-paymentrequest'\n>>>> and the rest of the NFC data is a complete BIP70 payment request.\n>>>>\n>>>>\n>>>> ## Implementation ##\n>>>>\n>>>> To structure the discussion a little bit, I have listed a number of\n>>>> scenarios to\n>>>> consider below. Not every possible combination is listed, but it\n>>>> should cover a\n>>>> bit of everything.\n>>>>\n>>>> Scenarios:\n>>>>\n>>>> 1) Scan QR code, transmit transaction via Bitcoin network\n>>>>      Example QR code: bitcoin:1asdf...?amount=42\n>>>>\n>>>> 2) Touch NFC pad, transmit transaction via Bitcoin network\n>>>>      Example NFC URI: bitcoin:1asdf...?amount=42\n>>>>\n>>>> 3) Scan QR code, fetch BIP70 details via HTTP, post transaction via\n>>>> HTTP\n>>>>      Example QR code:\n>>>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>>>\n>>>> 4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via\n>>>> HTTP\n>>>>      Example NFC URI:\n>>>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>>>\n>>>> 5) Touch NFC pad, receive BIP70 details directly, post transaction via\n>>>> HTTP\n>>>>      Example NFC MIME record: application/bitcoin-paymentrequest +\n>>>> BIP70 payment request\n>>>>\n>>>> 6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction\n>>>> via Bluetooth\n>>>>      Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>>>      Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>>>\n>>>> 7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction\n>>>> via Bluetooth\n>>>>      Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>>>      Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>>>\n>>>> Scenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I\n>>>> am just\n>>>> listing them here for comparison. Scenario 3 is what is often in use\n>>>> now, for\n>>>> example when using a checkout screen by BitPay or Coinbase.\n>>>>\n>>>> I played around with both scenarios 4 and 5, trying to decide whether\n>>>> I should\n>>>> use an NFC URI record or already provide the complete BIP70 payment\n>>>> request via\n>>>> NFC.\n>>>>\n>>>> My experience here has been, that the latter was fairly fragile in my\n>>>> setup\n>>>> (Raspberry Pi, NFC dongle from a company called Sensor ID, using\n>>>> nfcpy). I tried\n>>>> with signed payment requests that were around 4k to 5k and the\n>>>> transfer would\n>>>> often not complete if I didn't hold the phone perfectly in place. So I\n>>>> quickly\n>>>> switched to using the NFC URI record instead and have the phone fetch\n>>>> the BIP70\n>>>> payment request via Bluetooth afterwards. Using this approach the\n>>>> amount of data\n>>>> is small enough that it's usually 'all or nothing' and that seems more\n>>>> robust to\n>>>> me.\n>>>>\n>>>> That said, I continue to have problems with the NFC stack that I'm\n>>>> using, so it\n>>>> might just be my NFC setup that is causing these problems. I will\n>>>> probably give\n>>>> the NXP NFC library a try next (which I believe is also the stack that\n>>>> is used\n>>>> by Android). Maybe I have more luck with that approach and could then\n>>>> switch to\n>>>> scenario 5.\n>>>>\n>>>> Scenarios 6 and 7 is what the terminal is doing right now. The 'bt'\n>>>> parameter is\n>>>> the non-standard extension of Andreas' wallet that I was mentioning.\n>>>> TBIP75\n>>>> proposes to change 'bt' into 'r1' as part of a more generic approach of\n>>>> numbering different sources for the BIP70 payment request. I think\n>>>> that is a\n>>>> good idea and would express my vote for this proposal. So the QR code\n>>>> or NFC URI\n>>>> would then look something like this:\n>>>>\n>>>>   \n>>>> bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n>>>>\n>>>>\n>>>>\n>>>> In addition the payment request would need to list additional\n>>>> 'payment_url's. My\n>>>> proposal would be to do something like this:\n>>>>\n>>>>       message PaymentDetails {\n>>>>           ...\n>>>>           optional string payment_url = 6;\n>>>>           optional bytes merchant_data = 7;\n>>>>           repeated string additional_payment_urls = 8;\n>>>>             // ^-- new; to hold things like 'bt:1234567890AB'\n>>>>       }\n>>>>\n>>>> TBIP75 proposes to just change 'optional string payment_url' into\n>>>> 'repeated\n>>>> string payment_url'. If this isn't causing any problems (and hopefully\n>>>> not too\n>>>> much confusion?) I guess that would be fine too.\n>>>>\n>>>> In my opinion a wallet should then actually attempt all or multiple of\n>>>> the\n>>>> provided mechanisms in parallel (e.g. try to fetch the BIP70 payment\n>>>> request via\n>>>> both HTTP and Bluetooth) and go with whatever completes first. But\n>>>> that is of\n>>>> course up to each wallet to decide how to handle.\n>>>>\n>>>> TBIP75 furthermore proposes to include an additional 'h' parameter\n>>>> which would\n>>>> be a hash of the BIP70 payment request, preventing a MITM attack on the\n>>>> Bluetooth channel even if the BIP70 payment request isn't signed. This\n>>>> would\n>>>> have also been my suggestion, although I know that Mike Hearn has\n>>>> raised\n>>>> concerns about this approach. One being, that one needs to finalize\n>>>> the BIP70\n>>>> payment request at the time the QR code and NFC URI is generated.\n>>>>\n>>>>\n>>>> ## Questions ##\n>>>>\n>>>> My questions to the list:\n>>>>\n>>>> 1) Do you prefer changing 'optional string payment_url' into 'repeated\n>>>> string\n>>>> payment_url' or would you rather introduce a new field\n>>>> 'additional_payment_urls'?\n>>>>\n>>>> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin\n>>>> Wallet?\n>>>>\n>>>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>>>>\n>>>> 4) General comments, advice, feedback?\n>>>>\n>>>> I appreciate your input! :-)\n>>>>\n>>>> Cheers,\n>>>> Jan\n>>>>\n>>>> [1] http://andyschroder.com/BitcoinFluidDispenser/\n>>>> [2]\n>>>> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n>>>>\n>>>>\n>>>> [3]\n>>>> https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>>>> [4]\n>>>> https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>>\n>>>>\n>>>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>>>> from Actuate! Instantly Supercharge Your Business Reports and\n>>>> Dashboards\n>>>> with Interactivity, Sharing, Native Excel Exports, App Integration &\n>>>> more\n>>>> Get technology previously reserved for billion-dollar corporations,\n>>>> FREE\n>>>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>>>\n>>>>\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>>\n>>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>>> with Interactivity, Sharing, Native Excel Exports, App Integration &\n>>> more\n>>> Get technology previously reserved for billion-dollar corporations, FREE\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>>\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n> \n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/9abdde55/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-23T01:02:03",
                "message_text_only": "On 02/23/2015 12:32 AM, Andy Schroder wrote:\n> I guess we need to decide whether we want to consider NFC communication\n> private or not. I don't know that I think it can be. An eavesdropper can\n> place a tiny snooping device near and read the communication. If it is\n> just passive, then the merchant/operator won't realize it's there. So, I\n> don't know if I like your idea (mentioned in your other reply) of\n> putting the session key in the URL is a good idea?\n\nI think the \"trust by proximity\" is the best we've got. If we don't\ntrust the NFC link (or the QR code scan), what other options have we\ngot? Speaking the session key by voice? Bad UX, and can be eavesdropped\nas well of course."
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-23T07:36:36",
                "message_text_only": "I agree that NFC is the best we have as far as a trust anchor that you \nare paying the right person. The thing I am worried about is the privacy \nloss that could happen if there is someone passively monitoring the \nconnection. So, in response to some of your comments below and also in \nresponse to some of Eric Voskuil's comments in another recent e-mail:\n\nConsider some cases:\n\nIf NFC is assumed private, then sending the session key over the NFC \nconnection gives the payer and the payee assumed confidence that that a \nprivate bluetooth connection can be created.\n\nIf the NFC actually isn't private, then by sending the session key over \nit means the bluetooth connection is not private. An eavesdropper can \nlisten to all communication and possibly modify the communication, but \nthe payer and payee won't necessarily know if eavesdropping occurs \nunless communication is also modified (which could be difficult to do \nfor a really low range communication).\n\nIf we send a public key of the payee over the NFC connection (in place \nof a session key) and the NFC connection is assumed trusted (and is \nunmodified but actually monitored by an eavesdropper) and use that \npublic key received via NFC to encrypt a session key and send it back \nvia bluetooth, to then initiate an encrypted bluetooth connection using \nthat session key for the remaining communication, then the payee still \nreceives payment as expected and the payer sends the payment they \nexpected, and the eavesdropper doesn't see anything.\n\nIf we send a public key of the payee over the NFC connection (in place \nof a session key) and the NFC connection is assumed trusted (and is \nactually modified by an eavesdropper) and use that public key received \nvia NFC to encrypt a session key and send it back via bluetooth, to then \ninitiate an encrypted bluetooth connection using that session key for \nthe remaining communication, then the payee receives no payment and the \nattack is quickly identified because the customer receives no product \nfor their payment and they notify the payee, and hopefully the problem \nremedied and no further customers are affected. The privacy loss will be \nsignificantly reduced and the motive for such attacks will be reduced. \nIt's possible a really sophisticated modification could be done where \nthe attacker encrypts and decrypts the communication and then relays to \neach party (without them knowing or any glitches detected), but I guess \nI'm not sure how easy that would be on such a close proximity device?\n\nErick Voskuil mentioned this same problem would even occur if you had a \nhardwired connection to the payment terminal and those wires were \ncompromised. I guess I still think what I am saying would be better in \nthat case. There is also more obvious physical tampering required to \nmess with wires.\n\nI'm not sure if there is any trust anchor required of the payer by the \npayee, is there? Eric also mentioned a need for this. Why does the payer \ncare who they are as long as they get a payment received? Just to avoid \na sophisticated modification\" that I mention above? I can see how this \ncould be the case for a longer range communication (like over the \ninternet), but I'm not convinced it will be easy on really short ranges? \nIt's almost like the attacker would be better off to just replace the \nentire POS internals than mess with an attack like that, in which case \neverything we could do locally (other than the payment request signing \nusing PKI), is useless.\n\nI'm not a cryptography expert so I apologize if there is something \nrudimentary that I am missing here.\n\nAndy Schroder\n\nOn 02/22/2015 08:02 PM, Andreas Schildbach wrote:\n> On 02/23/2015 12:32 AM, Andy Schroder wrote:\n>> I guess we need to decide whether we want to consider NFC communication\n>> private or not. I don't know that I think it can be. An eavesdropper can\n>> place a tiny snooping device near and read the communication. If it is\n>> just passive, then the merchant/operator won't realize it's there. So, I\n>> don't know if I like your idea (mentioned in your other reply) of\n>> putting the session key in the URL is a good idea?\n> I think the \"trust by proximity\" is the best we've got. If we don't\n> trust the NFC link (or the QR code scan), what other options have we\n> got? Speaking the session key by voice? Bad UX, and can be eavesdropped\n> as well of course.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/90498cd6/attachment.sig>"
            },
            {
                "author": "Natanael",
                "date": "2015-02-23T09:13:34",
                "message_text_only": "Den 23 feb 2015 08:38 skrev \"Andy Schroder\" <info at andyschroder.com>:\n>\n> I agree that NFC is the best we have as far as a trust anchor that you\nare paying the right person. The thing I am worried about is the privacy\nloss that could happen if there is someone passively monitoring the\nconnection. So, in response to some of your comments below and also in\nresponse to some of Eric Voskuil's comments in another recent e-mail:\n\n>From the sources I can find NFC don't provide full privacy, but some\nmodulations are MITM resistant to varying degrees, some aren't at all, and\nthey are all susceptible to denial of service via jammers.\n\nIf the merchant system monitors the signal strength and similar metrics, a\nMITM that alters data (or attempts to) should be detectable, allowing it to\nshut down the connection.\n\nUsing NFC for key exchange to establish an encrypted link should IMHO be\nsecure enough.\n\nhttp://resources.infosecinstitute.com/near-field-communication-nfc-technology-vulnerabilities-and-principal-attack-schema/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/4bea3a57/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-23T09:40:00",
                "message_text_only": "On 02/22/2015 11:36 PM, Andy Schroder wrote:\n> I agree that NFC is the best we have as far as a trust anchor that you\n> are paying the right person. The thing I am worried about is the privacy\n> loss that could happen if there is someone passively monitoring the\n> connection. \n\nWe have the same objective. Privacy loss is my primary concern with the\nexisting proposal.\n\n> So, in response to some of your comments below and also in\n> response to some of Eric Voskuil's comments in another recent e-mail:\n> \n> Consider some cases:\n> \n> If NFC is assumed private, then sending the session key over the NFC\n> connection gives the payer and the payee assumed confidence that that a\n> private bluetooth connection can be created.\n> \n> If the NFC actually isn't private, then by sending the session key over\n> it means the bluetooth connection is not private. An eavesdropper can\n> listen to all communication and possibly modify the communication, but\n> the payer and payee won't necessarily know if eavesdropping occurs\n> unless communication is also modified (which could be difficult to do\n> for a really low range communication).\n\nI realize you are postulating a situation where an interloper monitors\nbut doesn't substitute the NFC communication. But clearly if you can do\none you have the potential to do the other, so if one is going to rely\non the assumption that the NFC tap can be monitored one must also accept\nthat it can be modified. Once one accepts this premise there is no point\nin using NFC.\n\n> If we send a public key of the payee over the NFC connection (in place\n> of a session key) and the NFC connection is assumed trusted (and is\n> unmodified but actually monitored by an eavesdropper) and use that\n> public key received via NFC to encrypt a session key and send it back\n> via bluetooth, to then initiate an encrypted bluetooth connection using\n> that session key for the remaining communication, then the payee still\n> receives payment as expected and the payer sends the payment they\n> expected, and the eavesdropper doesn't see anything.\n\nYou can send a public cert over a public channel but before it can be\nused it must be validated and verified to belong to the party that you\nintend to communicate with privately. Otherwise the interloper can\nsubstitute a public cert and subvert the payment process.\n\nThe reduces to the system requiring PKI just to establish private\ncommunication. One might argue that BIP-70 already contemplates PKI.\nHowever the above approach is significantly different in that it would\n*require* all NFC/BT communication to use PKI just to be private.\n\nFurthermore, to establish a private channel between *both* intended\nparities, public certs must be exchanged in both directions. Otherwise,\nif the customer isn't validated by the merchant, a distant interloper\ncan trivially use the merchant's public cert to obtain the payment\nrequest from the Bluetooth terminal. This is the privacy breach that we\nare trying to prevent in the first place.\n\nAny requirement for PKI, in either direction, itself creates privacy\nproblems. But a requirement for customer certificates really gets hairy.\n\nThe PKI requirement can be dropped by instead exchanging self-generated\npublic keys, in the RedPhone model. However that requires out-of-band\nsecure communication of a common derived value by the parties. This\ncould be as simple as a number on each screen that one or both of the\nparties compares. But this requires no private communication, and\ntherefore NFC is entirely unnecessary. This is in fact what I would\nrecommend for the BT-only scenario.\n\nThe value added by NFC is that proximity can be used to establish trust.\nIf that does not meet one's threshold for privacy then the parties need\nto establish this trust through some presumably more private channel\n(such as visual or voice confirmation).\n\nNote that payment integrity can be reasonably ensured by relying on PKI\nas established by BIP-70 (which also offers the seller non-repudiation\nbenefit). So this question is strictly about privacy.\n\n> If we send a public key of the payee over the NFC connection (in place\n> of a session key) and the NFC connection is assumed trusted (and is\n> actually modified by an eavesdropper) and use that public key received\n> via NFC to encrypt a session key and send it back via bluetooth, to then\n> initiate an encrypted bluetooth connection using that session key for\n> the remaining communication, then the payee receives no payment and the\n> attack is quickly identified because the customer receives no product\n> for their payment and they notify the payee, and hopefully the problem\n> remedied and no further customers are affected. \n\nIn this case the attacker hijacks the subsequent BT connection, sends a\npayment request and gets paid. The only thing to prevent it would be\nBIP-70/PKI, as mentioned above.\n\nIn a more complex attack the interloper can sit in the middle of all\ncommunications between payer and receiver. Since the payer is not\nvalidated by the receiver the interloper can impersonate the payer in\nall communication with the receiver. As such he can also impersonate the\nreceiver in all communications with the payer. If the NFC communication\nis compromized there is no saving privacy without an alternate private\nchannel.\n\n> The privacy loss will be\n> significantly reduced and the motive for such attacks will be reduced.\n\nThe motive and privacy loss remain unchanged.\n\n> It's possible a really sophisticated modification could be done where\n> the attacker encrypts and decrypts the communication and then relays to\n> each party (without them knowing or any glitches detected), but I guess\n> I'm not sure how easy that would be on such a close proximity device?\n\nIf the NFC tap is sufficiently private, privacy is easy to achieve for\nthe subsequent communication. If it is not, privacy can be completely\ncompromised. The question is only how much more difficult is the attack.\n\nWith the public cert tap, the level of difficulty is much lower for\ncapturing selected payment requests. The interloper no longer needs to\ninvade the space of the NFC terminal and can instead impersonate the\npayer from a safe distance. Nobody gets paid, but privacy is compromised.\n\nThe level of difficulty in the case where the interloper wants to taint\ntransactions may appear lower, but it is not:\n\nWith the session key tap the interloper must compromise the NFC location\nand then monitor the BT traffic. Monitoring BT traffic without being\nparty to the connection is presumably not rocket surgery, but not\nstandard BT design either.\n\nWith the public cert tap the interloper must also compromise the NFC\nlocation and communicate over BT. Therefore the hardware and physical\nattack requirements are similar. The only added difficulty is that the\nattack on the NFC terminal attack is active (modifying the MAC address\ndirecting the payer to the BT service).\n\nHowever impersonating the payer is just a matter of software - no more\ndifficult than the session key attack. In fact it may be much easier to\nimplement, as the attack can use supported BT features because the\nattacker has directed the payer to connect to him and is connecting to\nthe receiver as if he was a payer.\n\nBut it gets worse for the public cert tap, since a more sophisticated\nattacker can set himself up in the same position without subverting the\nNFC terminal at all. By broadcasting a more powerful BT service on the\nsame advertised MAC address, the attacker can capture traffic and relay\nit to the intended service.\n\nSo in sum, reliance on a public cert makes the communication less\nprivate under the same physical set of constraints. The difference\nresults from the receiver allowing non-proximate payers to impersonate\nproximate payers from a distance by generating their own session keys\nand submitting them over BT.\n\n> Erick Voskuil mentioned this same problem would even occur if you had a\n> hardwired connection to the payment terminal and those wires were\n> compromised. I guess I still think what I am saying would be better in\n> that case. There is also more obvious physical tampering required to\n> mess with wires.\n\nAttacks against wires do not require tampering with (as in damaging)\nwires. The distinction between a wired connection and a wireless\nconnection is in many ways imaginary.\n\n> I'm not sure if there is any trust anchor required of the payer by the\n> payee, is there? Eric also mentioned a need for this. Why does the payer\n> care who they are as long as they get a payment received? Just to avoid\n> a sophisticated modification\" that I mention above? I can see how this\n> could be the case for a longer range communication (like over the\n> internet), but I'm not convinced it will be easy on really short ranges?\n\nI think I addressed this above but let me know if not.\n\n> It's almost like the attacker would be better off to just replace the\n> entire POS internals than mess with an attack like that, in which case\n> everything we could do locally (other than the payment request signing\n> using PKI), is useless.\n\nYes, ultimately both endpoints must be secured. My point is that (when\nintended) NFC is practically the equivalent of a wired connection.\nBaseband attacks against buyers' phones or subversion of the entire POS\nterminal may be easier than interloping on a monitored NFC terminal. But\nthat's the point, once the attack is easier at the endpoints that is\nwhere it will go. Further attempts to secure the gap between the devices\nwill not help after that point.\n\n> I'm not a cryptography expert so I apologize if there is something\n> rudimentary that I am missing here.\n\nNo need for apology, it's a good discussion, and there are precious few\nexperts here.\n\nThis discussion should make people very wary of any terminal system that\ndoesn't use signed payment requests :).\n\ne\n\n> Andy Schroder\n> \n> On 02/22/2015 08:02 PM, Andreas Schildbach wrote:\n>> On 02/23/2015 12:32 AM, Andy Schroder wrote:\n>>> I guess we need to decide whether we want to consider NFC communication\n>>> private or not. I don't know that I think it can be. An eavesdropper can\n>>> place a tiny snooping device near and read the communication. If it is\n>>> just passive, then the merchant/operator won't realize it's there. So, I\n>>> don't know if I like your idea (mentioned in your other reply) of\n>>> putting the session key in the URL is a good idea?\n>> I think the \"trust by proximity\" is the best we've got. If we don't\n>> trust the NFC link (or the QR code scan), what other options have we\n>> got? Speaking the session key by voice? Bad UX, and can be eavesdropped\n>> as well of course.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/e131bcbc/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-24T02:55:05",
                "message_text_only": "Andy, adding to my previous post below:\n\nOn 02/23/2015 01:40 AM, Eric Voskuil wrote:\n> On 02/22/2015 11:36 PM, Andy Schroder wrote:\n...\n>> It's possible a really sophisticated modification could be done where\n>> the attacker encrypts and decrypts the communication and then relays to\n>> each party (without them knowing or any glitches detected), but I guess\n>> I'm not sure how easy that would be on such a close proximity device?\n> \n> If the NFC tap is sufficiently private, privacy is easy to achieve for\n> the subsequent communication. If it is not, privacy can be completely\n> compromised. The question is only how much more difficult is the attack.\n> \n> With the public cert tap, the level of difficulty is much lower for\n> capturing selected payment requests. The interloper no longer needs to\n> invade the space of the NFC terminal and can instead impersonate the\n> payer from a safe distance. Nobody gets paid, but privacy is compromised.\n\nThis problem in the preceding paragraph can be resolved by sending a\nunique public key on each NFC tap. In that case an attacker would need\nto monitor the NFC communication.\n\nThe talk of wrapping the connection in SSL led me to believe you were\ntalking about a static public certificate. However that's not a\nnecessary assumption here and may not be what you intended.\n\n> The level of difficulty in the case where the interloper wants to taint\n> transactions may appear lower, but it is not:\n> \n> With the session key tap the interloper must compromise the NFC location\n> and then monitor the BT traffic. Monitoring BT traffic without being\n> party to the connection is presumably not rocket surgery, but not\n> standard BT design either.\n> \n> With the public cert tap the interloper must also compromise the NFC\n> location and communicate over BT. Therefore the hardware and physical\n> attack requirements are similar. The only added difficulty is that the\n> attack on the NFC terminal attack is active (modifying the MAC address\n> directing the payer to the BT service).\n\nI believe your central claim was that the difference in the two\nbootstrapping approaches (public key vs. session key) is that by using a\nunique public key per tap, the attack requires an active vs. passive\nattack on the NFC terminal. I just wanted to make clear here that I\nagree with that assessment.\n\nThe symmetric key approach is based on the idea that these attacks are\ncomparable in difficulty and otherwise identical in privacy loss.\n\nHowever, the difference in implementation amounts to about +23\nadditional encoded characters for the BT/LE URL, assuming use of the\nsecp256k1 curve for DHE. This is really not a material issue in the case\nof the NFC tap. The entire URI+URL could be as small as:\n\nbitcoin:?r=bt:12rAs9mM/79bq48xJaMgqR9YNxnWhqHHM1JB52nxn6VFXBHTP2zrP\n\nIn comparison to a symmetric key:\n\nbitcoin:?r=bt:12rAs9mM/12drXXUifSrRnXLGbXg8E\n\nIt also does not change the protocol design or complexity at all - it\nwould just swap out an AES key for a secp256k1 public key.\n\nbitcoin:[address]?bt:<mac>/<key>\n\nIf that gets us aligned I'm all for it.\n\n> However impersonating the payer is just a matter of software - no more\n> difficult than the session key attack. In fact it may be much easier to\n> implement, as the attack can use supported BT features because the\n> attacker has directed the payer to connect to him and is connecting to\n> the receiver as if he was a payer.\n> \n> But it gets worse for the public cert tap, since a more sophisticated\n> attacker can set himself up in the same position without subverting the\n> NFC terminal at all. By broadcasting a more powerful BT service on the\n> same advertised MAC address, the attacker can capture traffic and relay\n> it to the intended service.\n\nI'm retracting the last paragraph, since the interloper, without\ninvading the NFC connection (by substituting the public cert), could not\nread the relayed traffic. It was getting late :/\n\n> So in sum, reliance on a public cert makes the communication less\n> private under the same physical set of constraints. The difference\n> results from the receiver allowing non-proximate payers to impersonate\n> proximate payers from a distance by generating their own session keys\n> and submitting them over BT.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/5ac01515/attachment.sig>"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-24T05:53:30",
                "message_text_only": "I was saying provide a public key via NFC (or a public key fingerprint \nand then send the full public key over bluetooth). Instead of providing \na new public key on each tap, why can't the payee just stop accepting \nconnections from new parties on that \"resource\" after a session key has \nbeen received from the first person? If the person decides to have there \nfriend or family pay for them instead and cancel the payment, they could \njust hit cancel on the POS or something (on my fuel pump I have a switch \nthat needs to be turned, the purpose of this is to avoid wasting too \nmany addresses) and/or do another NFC tap (if you're providing QR codes \nyou'd still need a button of some kind though so it knows to refresh \nit), or the POS can just provide a completely new payment request to any \nnew connections on that same \"resource\" which use a different session key.\n\nI feel like the authentication of the payer to the payee in any future \nconnections after they receive the session key from them (which was \nencrypted with the payees public key), comes from the fact that they are \nsending responses back that are encrypted using the session key they \ngave to the payee. The way I am seeing it is that the NFC tap or QR code \nscan is acting in addition to the visual name check on the signature \nverification in the wallet. If the certificate used isn't signed by a CA \n(self signed), it may be fine as long as you heard about it via NFC or \nQR code. I don't think it will require PKI and should still work \nwallet-to-wallet.\n\nIt sounds like you are saying I'm proposing the customer is going to \nneed a certificate signed by CA? If so, why? I don't need this for any \nhttps website I visit. It's not like the payee is sending anything to \nthe payer that is private. The payment request only becomes private if \nsomething is actually received to it, otherwise, it is just discarded \nand it doesn't matter. Those bitcoin addresses are never used. It's just \nlike a shopping cart on a website where someone aborts payment and \ncancels the order.\n\nAt one point I was thinking we could do something similar to Mike \nHearn's suggestion in another recent e-mail where we re-use some \nexisting part of the bitcoin URI to bootstrap some trust in a public key \nthat the payee next sends via bluetooth after the NFC connection. Now \nthat I'm reviewing my notes though, I can't see how this will work with \na watching only wallet or if no backwards compatible (to BIP21) bitcoin \naddress is presented in the URI (as Mike said).\n\nWhat I was saying above about how you can stop accepting connections on \nthat \"resource\" after a session key has been received by the first \nperson could be problematic though. An evil person could just start \nmaking connections to every device they can, just to be mean, which \nwould not allow the POS operator to receive payments from their real \ncustomers. If you do the other option I proposed, which is to just keep \ngiving out new payment requests, you have other problems (on top of \nwasting addresses), which are that you can still have mean people giving \nyou a denial of service attach on your hardware, or you could have an \nunusual situation where two people pay (don't know why they would do \nthis though), so that is why I'm suggesting a manual tap or button press \nor switch turn being required.\n\nI guess as more of a abuse filter, a new \"resource\" could be given \ninstead with each tap, and the POS would just ignore all requests to an \ninactive resource. You may say, why not send a new public key (as you \nsuggested) instead of a new \"resource\" with each tap (or button press if \nusing QR codes), and then you can skip the sending of a static public \nkey (or public key fingerprint), and ignore any data that is not \nencrypted with that public key. Maybe that is a better idea because it \nwill shorten the bitcoin URI. However, I don't think its required from a \nprivacy standpoint, it primarily just aids in combining the public key \nfingerprint with the changing \"resource\" name used to filter abuse. Or, \nam I missing something?\n\n\nSo, after thinking through the abuse scenarios I mentioned above, I \nthink I am agreeing with you, but the reason I'm writing all this is to \nhopefully just get some feedback on my logic to learn something from \nthis discussion. I do think sending a unique public key over NFC has to \nbe better than a unique session key. It adds one more step, but seems to \nhelp. If we do this, can we then safely get rid of the h= parameter? \nThat should make Mike Hearn happy, and also may alleviate the base64url \ndebate?\n\n\nAndy Schroder\n\nOn 02/23/2015 09:55 PM, Eric Voskuil wrote:\n> Andy, adding to my previous post below:\n>\n> On 02/23/2015 01:40 AM, Eric Voskuil wrote:\n>> On 02/22/2015 11:36 PM, Andy Schroder wrote:\n> ...\n>>> It's possible a really sophisticated modification could be done where\n>>> the attacker encrypts and decrypts the communication and then relays to\n>>> each party (without them knowing or any glitches detected), but I guess\n>>> I'm not sure how easy that would be on such a close proximity device?\n>> If the NFC tap is sufficiently private, privacy is easy to achieve for\n>> the subsequent communication. If it is not, privacy can be completely\n>> compromised. The question is only how much more difficult is the attack.\n>>\n>> With the public cert tap, the level of difficulty is much lower for\n>> capturing selected payment requests. The interloper no longer needs to\n>> invade the space of the NFC terminal and can instead impersonate the\n>> payer from a safe distance. Nobody gets paid, but privacy is compromised.\n> This problem in the preceding paragraph can be resolved by sending a\n> unique public key on each NFC tap. In that case an attacker would need\n> to monitor the NFC communication.\n>\n> The talk of wrapping the connection in SSL led me to believe you were\n> talking about a static public certificate. However that's not a\n> necessary assumption here and may not be what you intended.\n>\n>> The level of difficulty in the case where the interloper wants to taint\n>> transactions may appear lower, but it is not:\n>>\n>> With the session key tap the interloper must compromise the NFC location\n>> and then monitor the BT traffic. Monitoring BT traffic without being\n>> party to the connection is presumably not rocket surgery, but not\n>> standard BT design either.\n>>\n>> With the public cert tap the interloper must also compromise the NFC\n>> location and communicate over BT. Therefore the hardware and physical\n>> attack requirements are similar. The only added difficulty is that the\n>> attack on the NFC terminal attack is active (modifying the MAC address\n>> directing the payer to the BT service).\n> I believe your central claim was that the difference in the two\n> bootstrapping approaches (public key vs. session key) is that by using a\n> unique public key per tap, the attack requires an active vs. passive\n> attack on the NFC terminal. I just wanted to make clear here that I\n> agree with that assessment.\n>\n> The symmetric key approach is based on the idea that these attacks are\n> comparable in difficulty and otherwise identical in privacy loss.\n>\n> However, the difference in implementation amounts to about +23\n> additional encoded characters for the BT/LE URL, assuming use of the\n> secp256k1 curve for DHE. This is really not a material issue in the case\n> of the NFC tap. The entire URI+URL could be as small as:\n>\n> bitcoin:?r=bt:12rAs9mM/79bq48xJaMgqR9YNxnWhqHHM1JB52nxn6VFXBHTP2zrP\n>\n> In comparison to a symmetric key:\n>\n> bitcoin:?r=bt:12rAs9mM/12drXXUifSrRnXLGbXg8E\n>\n> It also does not change the protocol design or complexity at all - it\n> would just swap out an AES key for a secp256k1 public key.\n>\n> bitcoin:[address]?bt:<mac>/<key>\n>\n> If that gets us aligned I'm all for it.\n>\n>> However impersonating the payer is just a matter of software - no more\n>> difficult than the session key attack. In fact it may be much easier to\n>> implement, as the attack can use supported BT features because the\n>> attacker has directed the payer to connect to him and is connecting to\n>> the receiver as if he was a payer.\n>>\n>> But it gets worse for the public cert tap, since a more sophisticated\n>> attacker can set himself up in the same position without subverting the\n>> NFC terminal at all. By broadcasting a more powerful BT service on the\n>> same advertised MAC address, the attacker can capture traffic and relay\n>> it to the intended service.\n> I'm retracting the last paragraph, since the interloper, without\n> invading the NFC connection (by substituting the public cert), could not\n> read the relayed traffic. It was getting late :/\n>\n>> So in sum, reliance on a public cert makes the communication less\n>> private under the same physical set of constraints. The difference\n>> results from the receiver allowing non-proximate payers to impersonate\n>> proximate payers from a distance by generating their own session keys\n>> and submitting them over BT.\n> e\n>\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/79085253/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-23T09:49:17",
                "message_text_only": "I think at this point I'd like to bring back my original suggestion of\nusing DHKE (Diffie-Hellman) or simlar. I know we'd still need to\ntransmit some secret that could be eavesdropped, but at least the\nsession could not be decrypted from recordings.\n\nAnyway, establishing a \"mostly secure\" session is clearly an improvement\nto no protection at all. If we can't find a solution to the dilemma of\nhow to exchange the secret, I suggest going ahead with what we have and\nmake the best from it.\n\n\nOn 02/23/2015 08:36 AM, Andy Schroder wrote:\n> I agree that NFC is the best we have as far as a trust anchor that you\n> are paying the right person. The thing I am worried about is the privacy\n> loss that could happen if there is someone passively monitoring the\n> connection. So, in response to some of your comments below and also in\n> response to some of Eric Voskuil's comments in another recent e-mail:\n> \n> Consider some cases:\n> \n> If NFC is assumed private, then sending the session key over the NFC\n> connection gives the payer and the payee assumed confidence that that a\n> private bluetooth connection can be created.\n> \n> If the NFC actually isn't private, then by sending the session key over\n> it means the bluetooth connection is not private. An eavesdropper can\n> listen to all communication and possibly modify the communication, but\n> the payer and payee won't necessarily know if eavesdropping occurs\n> unless communication is also modified (which could be difficult to do\n> for a really low range communication).\n> \n> If we send a public key of the payee over the NFC connection (in place\n> of a session key) and the NFC connection is assumed trusted (and is\n> unmodified but actually monitored by an eavesdropper) and use that\n> public key received via NFC to encrypt a session key and send it back\n> via bluetooth, to then initiate an encrypted bluetooth connection using\n> that session key for the remaining communication, then the payee still\n> receives payment as expected and the payer sends the payment they\n> expected, and the eavesdropper doesn't see anything.\n> \n> If we send a public key of the payee over the NFC connection (in place\n> of a session key) and the NFC connection is assumed trusted (and is\n> actually modified by an eavesdropper) and use that public key received\n> via NFC to encrypt a session key and send it back via bluetooth, to then\n> initiate an encrypted bluetooth connection using that session key for\n> the remaining communication, then the payee receives no payment and the\n> attack is quickly identified because the customer receives no product\n> for their payment and they notify the payee, and hopefully the problem\n> remedied and no further customers are affected. The privacy loss will be\n> significantly reduced and the motive for such attacks will be reduced.\n> It's possible a really sophisticated modification could be done where\n> the attacker encrypts and decrypts the communication and then relays to\n> each party (without them knowing or any glitches detected), but I guess\n> I'm not sure how easy that would be on such a close proximity device?\n> \n> Erick Voskuil mentioned this same problem would even occur if you had a\n> hardwired connection to the payment terminal and those wires were\n> compromised. I guess I still think what I am saying would be better in\n> that case. There is also more obvious physical tampering required to\n> mess with wires.\n> \n> I'm not sure if there is any trust anchor required of the payer by the\n> payee, is there? Eric also mentioned a need for this. Why does the payer\n> care who they are as long as they get a payment received? Just to avoid\n> a sophisticated modification\" that I mention above? I can see how this\n> could be the case for a longer range communication (like over the\n> internet), but I'm not convinced it will be easy on really short ranges?\n> It's almost like the attacker would be better off to just replace the\n> entire POS internals than mess with an attack like that, in which case\n> everything we could do locally (other than the payment request signing\n> using PKI), is useless.\n> \n> I'm not a cryptography expert so I apologize if there is something\n> rudimentary that I am missing here.\n> \n> Andy Schroder\n> \n> On 02/22/2015 08:02 PM, Andreas Schildbach wrote:\n>> On 02/23/2015 12:32 AM, Andy Schroder wrote:\n>>> I guess we need to decide whether we want to consider NFC communication\n>>> private or not. I don't know that I think it can be. An eavesdropper can\n>>> place a tiny snooping device near and read the communication. If it is\n>>> just passive, then the merchant/operator won't realize it's there. So, I\n>>> don't know if I like your idea (mentioned in your other reply) of\n>>> putting the session key in the URL is a good idea?\n>> I think the \"trust by proximity\" is the best we've got. If we don't\n>> trust the NFC link (or the QR code scan), what other options have we\n>> got? Speaking the session key by voice? Bad UX, and can be eavesdropped\n>> as well of course.\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>>\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-23T10:08:28",
                "message_text_only": "On 02/23/2015 01:49 AM, Andreas Schildbach wrote:\n> I think at this point I'd like to bring back my original suggestion of\n> using DHKE (Diffie-Hellman) or simlar. I know we'd still need to\n> transmit some secret that could be eavesdropped, \n\nHi Andreas,\n\nDHKE will not improve the situation. Either we use a simple method to\ntransfer a session key or a complex method.\n\n> but at least the session could not be decrypted from recordings.\n\nDHKE doesn't offer greater forward secrecy than private transfer of a\nsession key, in fact it's lesser.\n\n> Anyway, establishing a \"mostly secure\" session is clearly an improvement\n> to no protection at all. If we can't find a solution to the dilemma of\n> how to exchange the secret, I suggest going ahead with what we have and\n> make the best from it.\n\nI don't see that there is a dilemma. The current proposal has a\nsignificant privacy problem that can be easily resolved, and the\nresolution actually makes the implementation simpler.\n\ne\n\n> On 02/23/2015 08:36 AM, Andy Schroder wrote:\n>> I agree that NFC is the best we have as far as a trust anchor that you\n>> are paying the right person. The thing I am worried about is the privacy\n>> loss that could happen if there is someone passively monitoring the\n>> connection. So, in response to some of your comments below and also in\n>> response to some of Eric Voskuil's comments in another recent e-mail:\n>>\n>> Consider some cases:\n>>\n>> If NFC is assumed private, then sending the session key over the NFC\n>> connection gives the payer and the payee assumed confidence that that a\n>> private bluetooth connection can be created.\n>>\n>> If the NFC actually isn't private, then by sending the session key over\n>> it means the bluetooth connection is not private. An eavesdropper can\n>> listen to all communication and possibly modify the communication, but\n>> the payer and payee won't necessarily know if eavesdropping occurs\n>> unless communication is also modified (which could be difficult to do\n>> for a really low range communication).\n>>\n>> If we send a public key of the payee over the NFC connection (in place\n>> of a session key) and the NFC connection is assumed trusted (and is\n>> unmodified but actually monitored by an eavesdropper) and use that\n>> public key received via NFC to encrypt a session key and send it back\n>> via bluetooth, to then initiate an encrypted bluetooth connection using\n>> that session key for the remaining communication, then the payee still\n>> receives payment as expected and the payer sends the payment they\n>> expected, and the eavesdropper doesn't see anything.\n>>\n>> If we send a public key of the payee over the NFC connection (in place\n>> of a session key) and the NFC connection is assumed trusted (and is\n>> actually modified by an eavesdropper) and use that public key received\n>> via NFC to encrypt a session key and send it back via bluetooth, to then\n>> initiate an encrypted bluetooth connection using that session key for\n>> the remaining communication, then the payee receives no payment and the\n>> attack is quickly identified because the customer receives no product\n>> for their payment and they notify the payee, and hopefully the problem\n>> remedied and no further customers are affected. The privacy loss will be\n>> significantly reduced and the motive for such attacks will be reduced.\n>> It's possible a really sophisticated modification could be done where\n>> the attacker encrypts and decrypts the communication and then relays to\n>> each party (without them knowing or any glitches detected), but I guess\n>> I'm not sure how easy that would be on such a close proximity device?\n>>\n>> Erick Voskuil mentioned this same problem would even occur if you had a\n>> hardwired connection to the payment terminal and those wires were\n>> compromised. I guess I still think what I am saying would be better in\n>> that case. There is also more obvious physical tampering required to\n>> mess with wires.\n>>\n>> I'm not sure if there is any trust anchor required of the payer by the\n>> payee, is there? Eric also mentioned a need for this. Why does the payer\n>> care who they are as long as they get a payment received? Just to avoid\n>> a sophisticated modification\" that I mention above? I can see how this\n>> could be the case for a longer range communication (like over the\n>> internet), but I'm not convinced it will be easy on really short ranges?\n>> It's almost like the attacker would be better off to just replace the\n>> entire POS internals than mess with an attack like that, in which case\n>> everything we could do locally (other than the payment request signing\n>> using PKI), is useless.\n>>\n>> I'm not a cryptography expert so I apologize if there is something\n>> rudimentary that I am missing here.\n>>\n>> Andy Schroder\n>>\n>> On 02/22/2015 08:02 PM, Andreas Schildbach wrote:\n>>> On 02/23/2015 12:32 AM, Andy Schroder wrote:\n>>>> I guess we need to decide whether we want to consider NFC communication\n>>>> private or not. I don't know that I think it can be. An eavesdropper can\n>>>> place a tiny snooping device near and read the communication. If it is\n>>>> just passive, then the merchant/operator won't realize it's there. So, I\n>>>> don't know if I like your idea (mentioned in your other reply) of\n>>>> putting the session key in the URL is a good idea?\n>>> I think the \"trust by proximity\" is the best we've got. If we don't\n>>> trust the NFC link (or the QR code scan), what other options have we\n>>> got? Speaking the session key by voice? Bad UX, and can be eavesdropped\n>>> as well of course.\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>>\n>>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>>> Get technology previously reserved for billion-dollar corporations, FREE\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>>\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/9e32d1cc/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-23T10:58:11",
                "message_text_only": ">\n> DHKE will not improve the situation. Either we use a simple method to\n> transfer a session key or a complex method.\n>\n\nYou're right that just sending the session key is simpler. I originally\nsuggested doing ECDHE to set up an encrypted channel for the following\nreasons:\n\n   1. URIs are put in QR codes more often than NFC tags. QR codes have\n   limited space. The more stuff you pack into them, the slower and flakier\n   the scanning process becomes.\n\n   For normal wallets, doing ECDH over secp256k1 to derive a session key\n   means we can reuse the address that was put in the URI already for\n   pre-BIP70 wallets, thus we don't have to expand the URI at all except\n   perhaps to flag that crypted Bluetooth connections are supported. Win!\n\n   2. If the wallet is a watching wallet, this won't work and in that case\n   you would need to put a separate key into the URI. However, this key is\n   ephemeral and does not need to be very strong. So we can generate a regular\n   secp256k1 key and then put say 5-8 prefix bytes into the URI as a new\n   parameter. The public key can then be provided in full in the clear over\n   the Bluetooth connection and the session key derived. If we put the session\n   key into the URI in full, then we could not use this trick. Win!\n\n   3. It's quite common in low tech scenarios like little coffee shops to\n   just print a QR code and put it in the menu, or sticky tape it to the back\n   wall of the shop.\n\n   In these cases, it's possible that the device is actually hanging around\n   in the shop somewhere but having the QR code somewhere larger and more\n   accessible than the shop devices screen is highly convenient. However it\n   means the data is entirely static.\n\n   Putting/reusing an identity key from the URI means the session keys are\n   always unique and known only to both devices, even though the bootstrap\n   data is public.\n\n   4. Doing ECDHE to derive the keys means we can derive a MAC key as well\n   as an AES key. Otherwise you have the issue of exchanging both, which again\n   uses up valuable bootstrap space.\n\nSo for a small increase in session setup complexity we potentially avoid\ntroubling problems down the line where people the same functionality from\nNFC and QR code based bootstrap, but we can't provide it.\n\nThese discussions keep coming up. I think the next step is for someone to\nupgrade Andreas' wallet to support encrypted connections and the TBIPs, to\nsee what happens.\n\nRe: the h= parameter. I only objected to requiring this when the payment\nrequest is also signed. It adds complexity, uses space, and the rationale\nwas \"the PKI can't be trusted\" even though it's been used to protect credit\ncard payments for 20 years without any issues. In the case of unsigned\npayment requests, sure ... but with a proper implementation of an encrypted\nBluetooth channel it'd be unnecessary as the channel establishment process\nwould guarantee authenticity anyway.\n\nBut don't let me hold you guys back! I'd rather see something that works\nthan an endless debate about the perfect arrangement of hashes and URI\nparameters :)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/dac2bed5/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-23T11:58:11",
                "message_text_only": "On 02/23/2015 11:58 AM, Mike Hearn wrote:\n\n> You're right that just sending the session key is simpler. I\n> originally suggested doing ECDHE to set up an encrypted channel\n> for the following reasons: [...]\n\nI read from your answer that even if we use ECDHE, we can't use it for\nevery situation. So in any case we need the simple bootstrap via a\nsession key parameter. My suggestion is defer ECDHE for now but keep it\nin mind. We can add it later I think.\n\n> These discussions keep coming up. I think the next step is for someone\n> to upgrade Andreas' wallet to support encrypted connections and the\n> TBIPs, to see what happens.\n\nI happily step up and do the implementation work on the app side. A\nfirst step could be:\n\n- If there is an \"s\" parameter present wrap the Bluetooth connections\nwith AES. Sounds good?"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-23T12:18:23",
                "message_text_only": ">\n> I read from your answer that even if we use ECDHE, we can't use it for\n> every situation.\n>\n\nWhich situations do you mean? I think it can be used in every situation.\nIt's the opposite way around - a fixed session key in the URI cannot be\nused in every situation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/a9563929/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-23T12:30:37",
                "message_text_only": "On 02/23/2015 01:18 PM, Mike Hearn wrote:\n>     I read from your answer that even if we use ECDHE, we can't use it for\n>     every situation.\n> \n> Which situations do you mean? I think it can be used in every situation.\n> It's the opposite way around - a fixed session key in the URI cannot be\n> used in every situation.\n\nOk sorry probably I read wrong."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-23T23:00:29",
                "message_text_only": "Mike,\n\nBefore addressing other issues I could use some clarification on your\nintent.\n\nIn one statement you refer to derivation of a session key from a bitcoin\naddress (passed via NFC):\n\n> doing ECDH over secp256k1 to derive a session key means we can reuse\n> the address that was put in the URI already for pre-BIP70 wallets\n\nIn another statement you refer to derivation of a session key from a\npublic key (passed via  BT):\n\n> The public key can then be provided in full in the clear over the\n> Bluetooth connection and the session key derived.\n\nI don't see how you propose to treat the bitcoin address as a secp256k1\npublic key, or do you mean something else?\n\ne\n\nOn 02/23/2015 02:58 AM, Mike Hearn wrote:\n>     DHKE will not improve the situation. Either we use a simple method to\n>     transfer a session key or a complex method.\n> \n> You're right that just sending the session key is simpler. I originally\n> suggested doing ECDHE to set up an encrypted channel for the following\n> reasons:\n> \n>  1. URIs are put in QR codes more often than NFC tags. QR codes have\n>     limited space. The more stuff you pack into them, the slower and\n>     flakier the scanning process becomes.\n> \n>     For normal wallets, doing ECDH over secp256k1 to derive a session\n>     key means we can reuse the address that was put in the URI already\n>     for pre-BIP70 wallets, thus we don't have to expand the URI at all\n>     except perhaps to flag that crypted Bluetooth connections are\n>     supported. Win!\n> \n>  2. If the wallet is a watching wallet, this won't work and in that case\n>     you would need to put a separate key into the URI. However, this key\n>     is ephemeral and does not need to be very strong. So we can generate\n>     a regular secp256k1 key and then put say 5-8 prefix bytes into the\n>     URI as a new parameter. The public key can then be provided in full\n>     in the clear over the Bluetooth connection and the session key\n>     derived. If we put the session key into the URI in full, then we\n>     could not use this trick. Win!\n> \n>  3. It's quite common in low tech scenarios like little coffee shops to\n>     just print a QR code and put it in the menu, or sticky tape it to\n>     the back wall of the shop.\n> \n>     In these cases, it's possible that the device is actually hanging\n>     around in the shop somewhere but having the QR code somewhere larger\n>     and more accessible than the shop devices screen is highly\n>     convenient. However it means the data is entirely static.\n> \n>     Putting/reusing an identity key from the URI means the session keys\n>     are always unique and known only to both devices, even though the\n>     bootstrap data is public.\n> \n>  4. Doing ECDHE to derive the keys means we can derive a MAC key as well\n>     as an AES key. Otherwise you have the issue of exchanging both,\n>     which again uses up valuable bootstrap space.\n> \n> So for a small increase in session setup complexity we potentially avoid\n> troubling problems down the line where people the same functionality\n> from NFC and QR code based bootstrap, but we can't provide it.\n> \n> These discussions keep coming up. I think the next step is for someone\n> to upgrade Andreas' wallet to support encrypted connections and the\n> TBIPs, to see what happens.\n> \n> Re: the h= parameter. I only objected to requiring this when the payment\n> request is also signed. It adds complexity, uses space, and the\n> rationale was \"the PKI can't be trusted\" even though it's been used to\n> protect credit card payments for 20 years without any issues. In the\n> case of unsigned payment requests, sure ... but with a proper\n> implementation of an encrypted Bluetooth channel it'd be unnecessary as\n> the channel establishment process would guarantee authenticity anyway.\n> \n> But don't let me hold you guys back! I'd rather see something that works\n> than an endless debate about the perfect arrangement of hashes and URI\n> parameters :)\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/ec6fbecf/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-23T23:11:42",
                "message_text_only": ">\n> I don't see how you propose to treat the bitcoin address as a secp256k1\n> public key, or do you mean something else?\n>\n\nSorry, I skipped a step. I shouldn't make assumptions about what's obvious.\nThe server would provide the public key and the client would convert it to\naddress form then match against the URI it has scanned. If it didn't match,\nstop at that point.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/2bf38af1/attachment.html>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-24T00:10:47",
                "message_text_only": "On 02/23/2015 03:11 PM, Mike Hearn wrote:\n>> I don't see how you propose to treat the bitcoin address as a\n>> secp256k1 public key, or do you mean something else?\n>\n> Sorry, I skipped a step. I shouldn't make assumptions about what's\n> obvious.\n\nNo problem, we don't all have the same context. I may have missed prior\ndiscussion.\n\n> The server would provide the public key and the client would\n> convert it to address form then match against the URI it has scanned.\n> If it didn't match, stop at that point.\n\nDoes this not also require the BT publication of the script for a P2SH\naddress?\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/d33deef7/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-24T10:41:01",
                "message_text_only": ">\n> Does this not also require the BT publication of the script for a P2SH\n> address?\n\n\nYou mean if the URI you're serving is like this?\n\n   bitcoin:3aBcD........?bt=....\n\nYes it would. I guess then, the server would indicate both the script, and\nthe key within that script that it wanted to use. A bit more complex but\nwould still work to save URI space.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/ccbf7acd/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-26T12:30:38",
                "message_text_only": "On 02/24/2015 11:41 AM, Mike Hearn wrote:\n>     Does this not also require the BT publication of the script for a P2SH\n>     address?\n> \n> \n> You mean if the URI you're serving is like this?\n> \n>    bitcoin:3aBcD........?bt=....\n> \n> Yes it would. I guess then, the server would indicate both the script,\n> and the key within that script that it wanted to use. A bit more complex\n> but would still work to save URI space.\n\nWhat if the script doesn't use any key at all?\n\nSomehow this \"re-using\" the fallback address idea feels less and less\nappealing to me. I think we should add our own parameter and let go of\nfallback addresses as soon as possible. If will waste space during the\ntransition period, but after that it should make no difference any more."
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-23T00:58:42",
                "message_text_only": "On 02/22/2015 11:37 PM, Andy Schroder wrote:\n\n> Andreas and I had a number of private discussions regarding the\n> payment_url parameter. I had suggested a \"additional_payment_urls\"\n> repeated parameter, but he didn't seem to like that idea and I\n> personally am indifferent, so that is why we decided to just change\n> payment_url to a repeated field. The spec is simpler without the\n> \"additional_payment_urls\", but the wallets have to be a little bit\n> smarter finding the right url they want to use in the list. It's maybe\n> not a bad idea for the wallet to try all payment_url mechanisms in\n> parallel. Should we add this as a recommendation to wallets in TBIP75?\n\nI think it will cause too much chaos. My recommendation for the\npayment_url field is prefer the same mechanism that was used for\nfetching the payment request. Only if the recommendation fails use the\nalternatives in order (or in reverse order, I'm not sure at the moment).\n\n> Regarding the NFC data formats. I would like to clarify that the wallets\n> are having those events dispatched by the android OS. The \"URI\" and\n> \"mime type\" events are sent to the application in the same way as from\n> other sources such as a web browser, e-mail, stand alone QR code scanner\n> app, etc.. So, I don't think the wallet actually knows it is receiving\n> the event from NFC.\n\nI think it can know. The method for catching these intents is very\nsimilar and you can reuse almost all code, but in fact you need to add\nan additional line to your AndroidManifest.xml.\n\n> That is one reason why so many existing wallets\n> happen to support BIP21 payment request via NFC.\n\nMany? Bitcoin Wallet and its forks were the only ones for about a year.\nOnly recently Mycelium caught up and the others still do not care I guess.\n\n> I'm a little weary sending the \"mime\n> type\" based format over NFC because of backwards compatibility and\n> because of the long certificate chain that needs to be transferred. You\n> want that tap to be as robust and fast as possible. A bluetooth\n> connection can have a retry without any user interaction.\n\nI agree whatever we do must be robust. However I see no reason why NFC\ncan't be robust, see my previous post.\n\n> I don't really like the Airbitz proposal. Figuring out if your selecting\n> is the right one is a real nuisance. The idea is neat in a few\n> applications, but I just don't think it is going to work for people as\n> the most efficient and trouble free option day to day. I realize they\n> are probably doing it to work with Apple's limited functionality phones\n> (and BLE is a new buzz word). However, I don't think we should base\n> bitcoin around what Apple wants us to do. They've already had their war\n> on bitcoin. They are going to do whatever they can to protect their NFC\n> based payment system. We need to make their platform the the less\n> desirable one if they are going to play the game that way. If that means\n> an Airbitz like proposal is implemented as a fallback, maybe that is\n> fine and POS systems need to support both, but I just don't think we\n> should limit what we can do because of Apple's products capabilities.\n\nAck on Airbitz, and ack on our relationship to Apple (-:\n\n> There is also the \"ack\" memo that I mentioned in reference [2]. I think\n> we can improve upon this really. Can we make a new status field or\n> different bluetooth message header? I know Andreas didn't want to change\n> it because that is how his app already works, but I don't think the way\n> it is is ideal.\n\nI'm not against improving this point, but I felt the BT enhancements and\nthe r,r1,r2 proposals are already getting complex enough. I would like\nto simplify the proposal by moving unrelated things to somewhere else."
            },
            {
                "author": "Jan Vornberger",
                "date": "2015-02-23T15:09:37",
                "message_text_only": "Hey!\n\nOn Sun, Feb 22, 2015 at 05:37:16PM -0500, Andy Schroder wrote:\n> It's maybe not a bad idea for the wallet to try all payment_url\n> mechanisms in parallel. Should we add this as a recommendation to\n> wallets in TBIP75?\n\nIt doesn't need to be a recommendation I think, but maybe it would be\ngood to mention that a wallet may do that, if it wants.\n\n> I actually also happen to be using nfcpy. I am having some\n> reliability issues as well with it. What exactly are your problems?\n\nAw, interesting. Sometimes transfers seem to start and then not complete\nin some way and occasionally the NFC dongle is then totally 'stuck' in some\nway afterwards, that even after restarting the Python script or\nreloading the driver nothing works anymore. I have to actually unplug\nthe dongle and plug it in again. Obviously not exactly production ready.\nI had the same problems with the command line tools based on libnfc, so\nit might be a problem lower down the stack. I'm not sure I have the\nexpertise to troubleshoot that.\n\n> I have seen your video before. I guess I'm wondering how your\n> prototype works with bitpay and bluetooth. Doesn't bitpay sign the\n> payment request for you with an https based payment_url? If so, how\n> do you add the bluetooth payment_url while keeping their signature\n> valid?\n\nGood point, I'm currently simply removing the signature, so that I can\nmodify the payment request. I haven't spoken with BitPay yet, but I hope\nthat they will extend their API at some point to set additional\npayment_urls or provide a Bluetooth MAC and then I can do it properly\nwith signed requests.\n\n> In your video it looks like the phone still has cellular and\n> wifi reception (it is not offline).\n\nYou are right, I forgot to actually disable wifi and cellular data when\nrecording the video. But as you know it would work the same way offline.\n\n> Regarding the NFC data formats. I would like to clarify that the\n> wallets are having those events dispatched by the android OS. The\n> \"URI\" and \"mime type\" events are sent to the application in the same\n> way as from other sources such as a web browser, e-mail, stand alone\n> QR code scanner app, etc.. So, I don't think the wallet actually\n> knows it is receiving the event from NFC. That is one reason why so\n> many existing wallets happen to support BIP21 payment request via\n> NFC. Andreas can correct me if I am wrong on these statements. I'm a\n> little weary sending the \"mime type\" based format over NFC because\n> of backwards compatibility and because of the long certificate chain\n> that needs to be transferred. You want that tap to be as robust and\n> fast as possible. A bluetooth connection can have a retry without\n> any user interaction.\n\nThere is a specific NFC intent that you have to list in your Android\nmanifest, but you are right that if you already support BIP21 URIs then\nit is often fairly easy and quick to also support them via NFC.\n\nWhereas the mime type approach means that you necessarily need to be\nable to actually understand BIP70, which a lot of wallet don't yet. But\npersonally that wouldn't hold me back using the mime type if I feel it's\nthe better experience. Those wallets simply have to fall back on\nscanning the QR code in the meantime and then get up to speed on their\nNFC and BIP70 support.\n\nI'm still concerned that the fact, that Bluetooth is often disabled, is a\nproblem for the UX. And it's not just a one-time thing as with NFC,\nwhich is - in my experience - also often disabled, but then people turn\nit on and leave it on. But with Bluetooth the Android system is geared\nmuch more towards turning it off after use and people have this general\nidea of 'it uses energy, so I should disable it' and sometimes also\n'Bluetooth is insecure and if I leave it on I will get hacked'. So\nchances are, Bluetooth will be off most of the time, which means\neverytime you pay the dialog 'Turn on Bluetooth?' will pop up, which\nisn't exactly streamlined.\n\nSo the advantage of transmitting the whole BIP70 payment request via NFC\nI see is, that you don't need Bluetooth to get the payment request and\nfor sending the transaction back the wallet can then make an intelligent\ndecision and first try via HTTP and only after that fails, say something\nlike: \"You are currently offline, turn on and transmit via Bluetooth\ninstead?\". Much less confusing to the user, in my opinion.\n\nAnother idea could be to request the permission BLUETOOTH_ADMIN which,\nas far as I know, allows you to programmatically turn on Bluetooth\nwithout user interaction. The wallet could then have a setting somewhere\nthat says 'automatically turn on Bluetooth during payments' which would\nenable and then disable (if it was off before) Bluetooth during the\npayment process. That should also be a decent compromise, at the cost of\nanother permission.\n\n> There is also the \"ack\" memo that I mentioned in reference [2]. I\n> think we can improve upon this really. Can we make a new status\n> field or different bluetooth message header? I know Andreas didn't\n> want to change it because that is how his app already works, but I\n> don't think the way it is is ideal.\n\nI'm fine with doing changes here - I don't think there is all that much\nstuff out there yet which would break from it. At the moment I'm also\nmodifying BitPay's memo field to contain 'ack', as Andreas' wallet\notherwise reports a failure if I transmit the original via Bluetooth. :-)\nBut I was assuming that was temporary anyway (?).\n\nJan"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-23T16:59:34",
                "message_text_only": ">\n> At the moment I'm also modifying BitPay's memo field to contain 'ack', as\n> Andreas' wallet otherwise reports a failure if I transmit the original via\n> Bluetooth. :-)\n>\n\nHuh?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/c198eebd/attachment.html>"
            },
            {
                "author": "Jan Vornberger",
                "date": "2015-02-23T19:56:50",
                "message_text_only": "On Mon, Feb 23, 2015 at 05:59:34PM +0100, Mike Hearn wrote:\n> >\n> > At the moment I'm also modifying BitPay's memo field to contain 'ack', as\n> > Andreas' wallet otherwise reports a failure if I transmit the original via\n> > Bluetooth. :-)\n> >\n> \n> Huh?\n\nFor HTTP it checks whether 'nack' is _not_ presented:\n\n  https://github.com/schildbach/bitcoin-wallet/blob/master/wallet/src/de/schildbach/wallet/offline/DirectPaymentTask.java#L133\n\nBut via Bluetooth it checks for 'ack' directly:\n\n  https://github.com/schildbach/bitcoin-wallet/blob/master/wallet/src/de/schildbach/wallet/offline/DirectPaymentTask.java#L238\n\nThe latter should probably be at least changed to the reverse check as\nfor HTTP, but in general some non-memo way of doing that would be nice\nof course.\n\nJan"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-23T20:31:35",
                "message_text_only": ">\n> But via Bluetooth it checks for 'ack' directly:\n\n\nWe need a BIP70 conformance suite really. There are so many deviations from\nthe spec out there already and it's brand new :(\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/61dcfc81/attachment.html>"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-24T06:14:43",
                "message_text_only": "Andy Schroder\n\nOn 02/23/2015 10:09 AM, Jan Vornberger wrote:\n> Hey!\n>\n> On Sun, Feb 22, 2015 at 05:37:16PM -0500, Andy Schroder wrote:\n>> It's maybe not a bad idea for the wallet to try all payment_url\n>> mechanisms in parallel. Should we add this as a recommendation to\n>> wallets in TBIP75?\n> It doesn't need to be a recommendation I think, but maybe it would be\n> good to mention that a wallet may do that, if it wants.\n>\n>> I actually also happen to be using nfcpy. I am having some\n>> reliability issues as well with it. What exactly are your problems?\n> Aw, interesting. Sometimes transfers seem to start and then not complete\n> in some way and occasionally the NFC dongle is then totally 'stuck' in some\n> way afterwards, that even after restarting the Python script or\n> reloading the driver nothing works anymore. I have to actually unplug\n> the dongle and plug it in again. Obviously not exactly production ready.\n> I had the same problems with the command line tools based on libnfc, so\n> it might be a problem lower down the stack. I'm not sure I have the\n> expertise to troubleshoot that.\n\n\n\nI've had similar issues where the NFC device has to be disconnected and \nreconnected. I've got lots of error checking in my code on the NFC \ndevice, which helps, but still has problems sometimes. I've found if I \nlimit how quickly a new connection can be made, that reduces the \nproblem. Have you tried this?\n\n\n\nWhat command line tool are you using with libnfc?\n\n\n\n\n\n>\n>> I have seen your video before. I guess I'm wondering how your\n>> prototype works with bitpay and bluetooth. Doesn't bitpay sign the\n>> payment request for you with an https based payment_url? If so, how\n>> do you add the bluetooth payment_url while keeping their signature\n>> valid?\n> Good point, I'm currently simply removing the signature, so that I can\n> modify the payment request. I haven't spoken with BitPay yet, but I hope\n> that they will extend their API at some point to set additional\n> payment_urls or provide a Bluetooth MAC and then I can do it properly\n> with signed requests.\n\n\n\nThis sounds weird to me. Why are you even using bitpay at all if you are \nalready going through the effort to remove a signature and change the \nmemo field? Wouldn't it be better to just manage everything yourself?\n\n\n\n\n>\n>> In your video it looks like the phone still has cellular and\n>> wifi reception (it is not offline).\n> You are right, I forgot to actually disable wifi and cellular data when\n> recording the video. But as you know it would work the same way offline.\n>\n>> Regarding the NFC data formats. I would like to clarify that the\n>> wallets are having those events dispatched by the android OS. The\n>> \"URI\" and \"mime type\" events are sent to the application in the same\n>> way as from other sources such as a web browser, e-mail, stand alone\n>> QR code scanner app, etc.. So, I don't think the wallet actually\n>> knows it is receiving the event from NFC. That is one reason why so\n>> many existing wallets happen to support BIP21 payment request via\n>> NFC. Andreas can correct me if I am wrong on these statements. I'm a\n>> little weary sending the \"mime type\" based format over NFC because\n>> of backwards compatibility and because of the long certificate chain\n>> that needs to be transferred. You want that tap to be as robust and\n>> fast as possible. A bluetooth connection can have a retry without\n>> any user interaction.\n> There is a specific NFC intent that you have to list in your Android\n> manifest, but you are right that if you already support BIP21 URIs then\n> it is often fairly easy and quick to also support them via NFC.\n>\n> Whereas the mime type approach means that you necessarily need to be\n> able to actually understand BIP70, which a lot of wallet don't yet. But\n> personally that wouldn't hold me back using the mime type if I feel it's\n> the better experience. Those wallets simply have to fall back on\n> scanning the QR code in the meantime and then get up to speed on their\n> NFC and BIP70 support.\n>\n> I'm still concerned that the fact, that Bluetooth is often disabled, is a\n> problem for the UX. And it's not just a one-time thing as with NFC,\n> which is - in my experience - also often disabled, but then people turn\n> it on and leave it on. But with Bluetooth the Android system is geared\n> much more towards turning it off after use and people have this general\n> idea of 'it uses energy, so I should disable it' and sometimes also\n> 'Bluetooth is insecure and if I leave it on I will get hacked'. So\n> chances are, Bluetooth will be off most of the time, which means\n> everytime you pay the dialog 'Turn on Bluetooth?' will pop up, which\n> isn't exactly streamlined.\n\n\nI'm personally not to annoyed by the enable bluetooth popup. I do know \nwhat you mean about the \"bluetooth is insecure, I should disable it\" \nattitude. I used to have this same concern.\n\n\n>\n> So the advantage of transmitting the whole BIP70 payment request via NFC\n> I see is, that you don't need Bluetooth to get the payment request and\n> for sending the transaction back the wallet can then make an intelligent\n> decision and first try via HTTP and only after that fails, say something\n> like: \"You are currently offline, turn on and transmit via Bluetooth\n> instead?\". Much less confusing to the user, in my opinion.\n\n\nWell, with the multiple r parameters, they should also be able to do \nthis on the payment request too.\n\n\n>\n> Another idea could be to request the permission BLUETOOTH_ADMIN which,\n> as far as I know, allows you to programmatically turn on Bluetooth\n> without user interaction. The wallet could then have a setting somewhere\n> that says 'automatically turn on Bluetooth during payments' which would\n> enable and then disable (if it was off before) Bluetooth during the\n> payment process. That should also be a decent compromise, at the cost of\n> another permission.\n\n\nI'm personally very weary of more permissions. Have you checked out how \nmany unnecessary permissions a lot of bitcoin wallets have? Many of them \nare ridiculous. Although this one may be somewhat warranted, I wouldn't \nencourage it if they can just fall back to cellular if they don't want \nto use bluetooth. If they don't have cellular reception, they can go \nthrough the effort of pressing the enable button that pops up.\n\n\n\n\n>\n>> There is also the \"ack\" memo that I mentioned in reference [2]. I\n>> think we can improve upon this really. Can we make a new status\n>> field or different bluetooth message header? I know Andreas didn't\n>> want to change it because that is how his app already works, but I\n>> don't think the way it is is ideal.\n> I'm fine with doing changes here - I don't think there is all that much\n> stuff out there yet which would break from it. At the moment I'm also\n> modifying BitPay's memo field to contain 'ack', as Andreas' wallet\n> otherwise reports a failure if I transmit the original via Bluetooth. :-)\n> But I was assuming that was temporary anyway (?).\n>\n> Jan\n>\n>\n>\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/10953415/attachment.sig>"
            },
            {
                "author": "Jan Vornberger",
                "date": "2015-02-24T15:41:09",
                "message_text_only": "On Tue, Feb 24, 2015 at 01:14:43AM -0500, Andy Schroder wrote:\n> I've had similar issues where the NFC device has to be disconnected\n> and reconnected. I've got lots of error checking in my code on the\n> NFC device, which helps, but still has problems sometimes. I've\n> found if I limit how quickly a new connection can be made, that\n> reduces the problem. Have you tried this?\n\nI have a limit there, yes, but maybe I need to raise it. I'd rather\nwould like it to simply not jam up instead though. :-)\n\n> What command line tool are you using with libnfc?\n\nI don't remember exactly right now, but the Debian packages 'libnfc-bin'\nand 'libnfc-examples' have some binaries and I think I used one of them\nto present an NFC URI record and I ran into similar problems with\ninstability.\n\n> This sounds weird to me. Why are you even using bitpay at all if you\n> are already going through the effort to remove a signature and\n> change the memo field?\n\nFor their tie-in with the traditional banking system, i.e. cash-out in\nfiat. Here in Germany that might currently be the only feasible way of\naccepting bitcoins commercially, because of unresolved questions around\nVAT - but that's another topic.\n\nJan"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-26T12:37:05",
                "message_text_only": "On 02/23/2015 04:09 PM, Jan Vornberger wrote:\n\n> I'm still concerned that the fact, that Bluetooth is often disabled, is a\n> problem for the UX. And it's not just a one-time thing as with NFC,\n> which is - in my experience - also often disabled, but then people turn\n> it on and leave it on.\n\nIt's the same with Bluetooth. More and more people use audio via\nBluetooth, mostly because they use a headset or stream their music to\ntheir stereo at home.\n\nThose that still switch off Bluetooth all the time can simply press a\nbutton. It can't be any easier.\n\n> Another idea could be to request the permission BLUETOOTH_ADMIN which,\n> as far as I know, allows you to programmatically turn on Bluetooth\n> without user interaction.\n\nTrue, but those people who switch off Bluetooth will also simply not\ninstall the app because of that permission.\n\nIf only Android had optional permissions... )-:"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-22T22:39:42",
                "message_text_only": "Hi Jan,\n\nThis is really nice work.\n\nWRT the Schroder and Schildbach proposal, the generalization of the \"r\"\nand \"payment_url\" parameters makes sense, with only the potential\nbackward compat issue on payment_url.\n\n> TBIP75 furthermore proposes to include an additional 'h' parameter\n> which would be a hash of the BIP70 payment request, preventing a MITM\n> attack on the Bluetooth channel even if the BIP70 payment request\n> isn't signed. This would have also been my suggestion, although I\n> know that Mike Hearn has raised concerns about this approach. One\n> being, that one needs to finalize the BIP70 payment request at the\n> time the QR code and NFC URI is generated.\n> ...\n> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n\nYes, this design is problematic from a privacy standpoint. Anyone within\nthe rather significant range of the Bluetooth terminal is able to\ncapture payment requests and correlate them to people. In other words it\ncan be used to automate tainting.\n\nThe problem is easily resolved by recognizing that, in the envisioned\nface-to-face trade, proximity is the source of trust. Even in the above\nproposal the \"h\" parameter is trusted because it was obtained by\nproximity to the NFC terminal. The presumption is that this proximity\nproduces a private channel.\n\nAs such the \"tap\" should transfer a session key used for symmetric block\ncipher over the Bluetooth channel. This also resolves the issue of\nneeding to formulate the payment request before the NFC.\n\nAs an aside, in other scenarios, such as an automated dispenser, this\npresumption does not hold. The merchant is not present to guard against\ndevice tampering. Those scenarios can be secured using BIP70, but cannot\nguarantee privacy.\n\nThe other differences I have with the proposal pertain to efficiency,\nnot privacy or integrity of the transaction:\n\nThe proposed resource name is redundant with any unique identifier for\nthe session. For example, the \"h\" parameter is sufficient. But with the\nestablishment of a session key both as I propose above, the parties can\nderive a sufficiently unique public resource name from a hash of the\nkey. An additional advantage is that the resource name can be\nfixed-length, simplifying the encoding/decoding.\n\nThe MAC address (and resource name) should be encoded using base58. This\nis shorter than base16, is often shorter than base64, better\nstandardized and does not require URI encoding, and is generally\navailable to implementers.\n\nThere is no need for the establishment of two Bluetooth services.\n\nI would change the payment_url recommendation so that the list order\nrepresents a recommended ordering provided by the terminal for the wallet.\n\nI wrote up my thoughts on these considerations last year and recently\nrevised it by adding a section at the end to incorporate the \"r\" and\n\"payment_url\" generalizations from Andreas and Andy.\n\nhttps://github.com/evoskuil/bips/tree/master/docs\n\ne\n\n\nOn 02/22/2015 11:08 AM, Jan Vornberger wrote:\n> Hi everyone,\n> \n> I am working on a Bitcoin point of sale terminal based on a Raspberry Pi, which\n> displays QR codes, but also provides payment requests via NFC. It can optionally\n> receive the sender's transaction via Bluetooth, so if the sender wallet\n> supports it, the sender can be completely offline. Only the terminal needs an\n> internet connection.\n> \n> Typical scenario envisioned: Customer taps their smartphone (or maybe smartwatch\n> in the future) on the NFC pad, confirms the transaction on their phone\n> (or smartwatch) and the transaction completes via Bluetooth and/or the phone's\n> internet connection.\n> \n> You can see a prototype in action here:\n> \n>   https://www.youtube.com/watch?v=P7vKHMoapr8\n> \n> The above demo uses a release version of Schildbach's Bitcoin Wallet, so it\n> works as shown today. However, some parts - especially the Bluetooth stuff - are\n> custom extensions of Schildbach's wallet which are not yet standard.\n> \n> I'm writing this post to document my experience implementing NFC and offline\n> payments and hope to move the discussion forward around standardizing some of\n> this stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser [1,2]\n> follows along the same lines, so his proposed TBIP74 [3] and TBIP75 [4] are\n> relevant here as well.\n> \n> \n> ## NFC vs Bluetooth vs NFC+Bluetooth ##\n> \n> Before I get into the implementation details, a few words for why I decided to\n> go with the combination of NFC and Bluetooth:\n> \n> Doing everything via NFC is an interesting option to keep things simple, but the\n> issue is, that one usually can't maintain the connection while the user confirms\n> the transaction (as they take the device back to press a button or maybe enter a\n> PIN). So there are three options:\n> \n> 1. Do a \"double tap\": User taps, takes the device back, confirms, then taps\n> again to transmit the transaction. (I think Google Wallet does something like\n> this.)\n> \n> 2. Confirm beforehand: User confirms, then taps and everything can happen in one\n> go. The disadvantage is, that you confirm the transaction before you have seen\n> the details. (I believe Google Wallet can also work this way.)\n> \n> 3. Tap the phone, then establish a Bluetooth connection which allows you to do\n> all necessary communication even if the user takes the device back.\n> \n> I feel that option 3 is the nicest UX, so that is what I am focusing on right\n> now, but there are pros and cons to all options. One disadvantage of option 3 in\n> practice is, that many users - in my experience - have Bluetooth turned off, so\n> it can result in additional UI dialogs popping up, asking the user to turn on\n> Bluetooth.\n> \n> Regarding doing everything via Bluetooth or maybe BLE: I have been following the\n> work that Airbitz has done around that, but personally I prefer the NFC\n> interaction of \"I touch what I want to pay\" rather than \"a payment request comes\n> to me through the air and I figure out whether it is meant for me/is legitimate\".\n> \n> \n> ## NFC data formats ##\n> \n> A bit of background for those who are not that familiar with NFC: Most Bitcoin\n> wallets with NFC support make use of NDEF (NFC Data Exchange Format) as far as I\n> am aware (with CoinBlesk being an exception, which uses host-based card\n> emulation, if I understand it correctly). NDEF defines a number of record types,\n> among them 'URI' and 'Mime Type'.\n> \n> A common way of using NFC with Bitcoin is to create a URI record that contains a\n> Bitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also support\n> the mime type record, which is then set to 'application/bitcoin-paymentrequest'\n> and the rest of the NFC data is a complete BIP70 payment request.\n> \n> \n> ## Implementation ##\n> \n> To structure the discussion a little bit, I have listed a number of scenarios to\n> consider below. Not every possible combination is listed, but it should cover a\n> bit of everything.\n> \n> Scenarios:\n> \n> 1) Scan QR code, transmit transaction via Bitcoin network\n>    Example QR code: bitcoin:1asdf...?amount=42\n> \n> 2) Touch NFC pad, transmit transaction via Bitcoin network\n>    Example NFC URI: bitcoin:1asdf...?amount=42\n> \n> 3) Scan QR code, fetch BIP70 details via HTTP, post transaction via HTTP\n>    Example QR code: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n> \n> 4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via HTTP\n>    Example NFC URI: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n> \n> 5) Touch NFC pad, receive BIP70 details directly, post transaction via HTTP\n>    Example NFC MIME record: application/bitcoin-paymentrequest + BIP70 payment request\n> \n> 6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>    Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>    Payment request has 'payment_url' set to 'bt:1234567890AB'\n> \n> 7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>    Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>    Payment request has 'payment_url' set to 'bt:1234567890AB'\n> \n> Scenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I am just\n> listing them here for comparison. Scenario 3 is what is often in use now, for\n> example when using a checkout screen by BitPay or Coinbase.\n> \n> I played around with both scenarios 4 and 5, trying to decide whether I should\n> use an NFC URI record or already provide the complete BIP70 payment request via\n> NFC.\n> \n> My experience here has been, that the latter was fairly fragile in my setup\n> (Raspberry Pi, NFC dongle from a company called Sensor ID, using nfcpy). I tried\n> with signed payment requests that were around 4k to 5k and the transfer would\n> often not complete if I didn't hold the phone perfectly in place. So I quickly\n> switched to using the NFC URI record instead and have the phone fetch the BIP70\n> payment request via Bluetooth afterwards. Using this approach the amount of data\n> is small enough that it's usually 'all or nothing' and that seems more robust to\n> me.\n> \n> That said, I continue to have problems with the NFC stack that I'm using, so it\n> might just be my NFC setup that is causing these problems. I will probably give\n> the NXP NFC library a try next (which I believe is also the stack that is used\n> by Android). Maybe I have more luck with that approach and could then switch to\n> scenario 5.\n> \n> Scenarios 6 and 7 is what the terminal is doing right now. The 'bt' parameter is\n> the non-standard extension of Andreas' wallet that I was mentioning. TBIP75\n> proposes to change 'bt' into 'r1' as part of a more generic approach of\n> numbering different sources for the BIP70 payment request. I think that is a\n> good idea and would express my vote for this proposal. So the QR code or NFC URI\n> would then look something like this:\n> \n>   bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n> \n> In addition the payment request would need to list additional 'payment_url's. My\n> proposal would be to do something like this:\n> \n>     message PaymentDetails {\n>         ...\n>         optional string payment_url = 6;\n>         optional bytes merchant_data = 7;\n>         repeated string additional_payment_urls = 8;\n>           // ^-- new; to hold things like 'bt:1234567890AB'\n>     }\n> \n> TBIP75 proposes to just change 'optional string payment_url' into 'repeated\n> string payment_url'. If this isn't causing any problems (and hopefully not too\n> much confusion?) I guess that would be fine too.\n> \n> In my opinion a wallet should then actually attempt all or multiple of the\n> provided mechanisms in parallel (e.g. try to fetch the BIP70 payment request via\n> both HTTP and Bluetooth) and go with whatever completes first. But that is of\n> course up to each wallet to decide how to handle.\n> \n> TBIP75 furthermore proposes to include an additional 'h' parameter which would\n> be a hash of the BIP70 payment request, preventing a MITM attack on the\n> Bluetooth channel even if the BIP70 payment request isn't signed. This would\n> have also been my suggestion, although I know that Mike Hearn has raised\n> concerns about this approach. One being, that one needs to finalize the BIP70\n> payment request at the time the QR code and NFC URI is generated.\n> \n> \n> ## Questions ##\n> \n> My questions to the list:\n> \n> 1) Do you prefer changing 'optional string payment_url' into 'repeated string\n> payment_url' or would you rather introduce a new field 'additional_payment_urls'?\n> \n> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin Wallet?\n> \n> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n> \n> 4) General comments, advice, feedback?\n> \n> I appreciate your input! :-)\n> \n> Cheers,\n> Jan\n> \n> [1] http://andyschroder.com/BitcoinFluidDispenser/\n> [2] https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n> [3] https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n> [4] https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n> \n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/0c4aac73/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-22T22:48:20",
                "message_text_only": "One correction inline below.\n\ne\n\nOn 02/22/2015 02:39 PM, Eric Voskuil wrote:\n> Hi Jan,\n> \n> This is really nice work.\n> \n> WRT the Schroder and Schildbach proposal, the generalization of the \"r\"\n> and \"payment_url\" parameters makes sense, with only the potential\n> backward compat issue on payment_url.\n> \n>> TBIP75 furthermore proposes to include an additional 'h' parameter\n>> which would be a hash of the BIP70 payment request, preventing a MITM\n>> attack on the Bluetooth channel even if the BIP70 payment request\n>> isn't signed. This would have also been my suggestion, although I\n>> know that Mike Hearn has raised concerns about this approach. One\n>> being, that one needs to finalize the BIP70 payment request at the\n>> time the QR code and NFC URI is generated.\n>> ...\n>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n> \n> Yes, this design is problematic from a privacy standpoint. Anyone within\n> the rather significant range of the Bluetooth terminal is able to\n> capture payment requests and correlate them to people. In other words it\n> can be used to automate tainting.\n> \n> The problem is easily resolved by recognizing that, in the envisioned\n> face-to-face trade, proximity is the source of trust. Even in the above\n> proposal the \"h\" parameter is trusted because it was obtained by\n> proximity to the NFC terminal. The presumption is that this proximity\n> produces a private channel.\n> \n> As such the \"tap\" should transfer a session key used for symmetric block\n> cipher over the Bluetooth channel. This also resolves the issue of\n> needing to formulate the payment request before the NFC.\n> \n> As an aside, in other scenarios, such as an automated dispenser, this\n> presumption does not hold. The merchant is not present to guard against\n> device tampering. Those scenarios can be secured using BIP70, but cannot\n> guarantee privacy.\n> \n> The other differences I have with the proposal pertain to efficiency,\n> not privacy or integrity of the transaction:\n> \n> The proposed resource name is redundant with any unique identifier for\n> the session. For example, the \"h\" parameter is sufficient. But with the\n> establishment of a session key both as I propose above, the parties can\n> derive a sufficiently unique public resource name from a hash of the\n> key. An additional advantage is that the resource name can be\n> fixed-length, simplifying the encoding/decoding.\n> \n> The MAC address (and resource name) should be encoded using base58. This\n\nThe MAC address (and session key) should be encoded using base58. This\n\n> is shorter than base16, is often shorter than base64, better\n> standardized and does not require URI encoding, and is generally\n> available to implementers.\n> \n> There is no need for the establishment of two Bluetooth services.\n> \n> I would change the payment_url recommendation so that the list order\n> represents a recommended ordering provided by the terminal for the wallet.\n> \n> I wrote up my thoughts on these considerations last year and recently\n> revised it by adding a section at the end to incorporate the \"r\" and\n> \"payment_url\" generalizations from Andreas and Andy.\n> \n> https://github.com/evoskuil/bips/tree/master/docs\n> \n> e\n> \n> \n> On 02/22/2015 11:08 AM, Jan Vornberger wrote:\n>> Hi everyone,\n>>\n>> I am working on a Bitcoin point of sale terminal based on a Raspberry Pi, which\n>> displays QR codes, but also provides payment requests via NFC. It can optionally\n>> receive the sender's transaction via Bluetooth, so if the sender wallet\n>> supports it, the sender can be completely offline. Only the terminal needs an\n>> internet connection.\n>>\n>> Typical scenario envisioned: Customer taps their smartphone (or maybe smartwatch\n>> in the future) on the NFC pad, confirms the transaction on their phone\n>> (or smartwatch) and the transaction completes via Bluetooth and/or the phone's\n>> internet connection.\n>>\n>> You can see a prototype in action here:\n>>\n>>   https://www.youtube.com/watch?v=P7vKHMoapr8\n>>\n>> The above demo uses a release version of Schildbach's Bitcoin Wallet, so it\n>> works as shown today. However, some parts - especially the Bluetooth stuff - are\n>> custom extensions of Schildbach's wallet which are not yet standard.\n>>\n>> I'm writing this post to document my experience implementing NFC and offline\n>> payments and hope to move the discussion forward around standardizing some of\n>> this stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser [1,2]\n>> follows along the same lines, so his proposed TBIP74 [3] and TBIP75 [4] are\n>> relevant here as well.\n>>\n>>\n>> ## NFC vs Bluetooth vs NFC+Bluetooth ##\n>>\n>> Before I get into the implementation details, a few words for why I decided to\n>> go with the combination of NFC and Bluetooth:\n>>\n>> Doing everything via NFC is an interesting option to keep things simple, but the\n>> issue is, that one usually can't maintain the connection while the user confirms\n>> the transaction (as they take the device back to press a button or maybe enter a\n>> PIN). So there are three options:\n>>\n>> 1. Do a \"double tap\": User taps, takes the device back, confirms, then taps\n>> again to transmit the transaction. (I think Google Wallet does something like\n>> this.)\n>>\n>> 2. Confirm beforehand: User confirms, then taps and everything can happen in one\n>> go. The disadvantage is, that you confirm the transaction before you have seen\n>> the details. (I believe Google Wallet can also work this way.)\n>>\n>> 3. Tap the phone, then establish a Bluetooth connection which allows you to do\n>> all necessary communication even if the user takes the device back.\n>>\n>> I feel that option 3 is the nicest UX, so that is what I am focusing on right\n>> now, but there are pros and cons to all options. One disadvantage of option 3 in\n>> practice is, that many users - in my experience - have Bluetooth turned off, so\n>> it can result in additional UI dialogs popping up, asking the user to turn on\n>> Bluetooth.\n>>\n>> Regarding doing everything via Bluetooth or maybe BLE: I have been following the\n>> work that Airbitz has done around that, but personally I prefer the NFC\n>> interaction of \"I touch what I want to pay\" rather than \"a payment request comes\n>> to me through the air and I figure out whether it is meant for me/is legitimate\".\n>>\n>>\n>> ## NFC data formats ##\n>>\n>> A bit of background for those who are not that familiar with NFC: Most Bitcoin\n>> wallets with NFC support make use of NDEF (NFC Data Exchange Format) as far as I\n>> am aware (with CoinBlesk being an exception, which uses host-based card\n>> emulation, if I understand it correctly). NDEF defines a number of record types,\n>> among them 'URI' and 'Mime Type'.\n>>\n>> A common way of using NFC with Bitcoin is to create a URI record that contains a\n>> Bitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also support\n>> the mime type record, which is then set to 'application/bitcoin-paymentrequest'\n>> and the rest of the NFC data is a complete BIP70 payment request.\n>>\n>>\n>> ## Implementation ##\n>>\n>> To structure the discussion a little bit, I have listed a number of scenarios to\n>> consider below. Not every possible combination is listed, but it should cover a\n>> bit of everything.\n>>\n>> Scenarios:\n>>\n>> 1) Scan QR code, transmit transaction via Bitcoin network\n>>    Example QR code: bitcoin:1asdf...?amount=42\n>>\n>> 2) Touch NFC pad, transmit transaction via Bitcoin network\n>>    Example NFC URI: bitcoin:1asdf...?amount=42\n>>\n>> 3) Scan QR code, fetch BIP70 details via HTTP, post transaction via HTTP\n>>    Example QR code: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>\n>> 4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via HTTP\n>>    Example NFC URI: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>\n>> 5) Touch NFC pad, receive BIP70 details directly, post transaction via HTTP\n>>    Example NFC MIME record: application/bitcoin-paymentrequest + BIP70 payment request\n>>\n>> 6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>>    Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>    Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>\n>> 7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>>    Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>    Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>\n>> Scenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I am just\n>> listing them here for comparison. Scenario 3 is what is often in use now, for\n>> example when using a checkout screen by BitPay or Coinbase.\n>>\n>> I played around with both scenarios 4 and 5, trying to decide whether I should\n>> use an NFC URI record or already provide the complete BIP70 payment request via\n>> NFC.\n>>\n>> My experience here has been, that the latter was fairly fragile in my setup\n>> (Raspberry Pi, NFC dongle from a company called Sensor ID, using nfcpy). I tried\n>> with signed payment requests that were around 4k to 5k and the transfer would\n>> often not complete if I didn't hold the phone perfectly in place. So I quickly\n>> switched to using the NFC URI record instead and have the phone fetch the BIP70\n>> payment request via Bluetooth afterwards. Using this approach the amount of data\n>> is small enough that it's usually 'all or nothing' and that seems more robust to\n>> me.\n>>\n>> That said, I continue to have problems with the NFC stack that I'm using, so it\n>> might just be my NFC setup that is causing these problems. I will probably give\n>> the NXP NFC library a try next (which I believe is also the stack that is used\n>> by Android). Maybe I have more luck with that approach and could then switch to\n>> scenario 5.\n>>\n>> Scenarios 6 and 7 is what the terminal is doing right now. The 'bt' parameter is\n>> the non-standard extension of Andreas' wallet that I was mentioning. TBIP75\n>> proposes to change 'bt' into 'r1' as part of a more generic approach of\n>> numbering different sources for the BIP70 payment request. I think that is a\n>> good idea and would express my vote for this proposal. So the QR code or NFC URI\n>> would then look something like this:\n>>\n>>   bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n>>\n>> In addition the payment request would need to list additional 'payment_url's. My\n>> proposal would be to do something like this:\n>>\n>>     message PaymentDetails {\n>>         ...\n>>         optional string payment_url = 6;\n>>         optional bytes merchant_data = 7;\n>>         repeated string additional_payment_urls = 8;\n>>           // ^-- new; to hold things like 'bt:1234567890AB'\n>>     }\n>>\n>> TBIP75 proposes to just change 'optional string payment_url' into 'repeated\n>> string payment_url'. If this isn't causing any problems (and hopefully not too\n>> much confusion?) I guess that would be fine too.\n>>\n>> In my opinion a wallet should then actually attempt all or multiple of the\n>> provided mechanisms in parallel (e.g. try to fetch the BIP70 payment request via\n>> both HTTP and Bluetooth) and go with whatever completes first. But that is of\n>> course up to each wallet to decide how to handle.\n>>\n>> TBIP75 furthermore proposes to include an additional 'h' parameter which would\n>> be a hash of the BIP70 payment request, preventing a MITM attack on the\n>> Bluetooth channel even if the BIP70 payment request isn't signed. This would\n>> have also been my suggestion, although I know that Mike Hearn has raised\n>> concerns about this approach. One being, that one needs to finalize the BIP70\n>> payment request at the time the QR code and NFC URI is generated.\n>>\n>>\n>> ## Questions ##\n>>\n>> My questions to the list:\n>>\n>> 1) Do you prefer changing 'optional string payment_url' into 'repeated string\n>> payment_url' or would you rather introduce a new field 'additional_payment_urls'?\n>>\n>> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin Wallet?\n>>\n>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>>\n>> 4) General comments, advice, feedback?\n>>\n>> I appreciate your input! :-)\n>>\n>> Cheers,\n>> Jan\n>>\n>> [1] http://andyschroder.com/BitcoinFluidDispenser/\n>> [2] https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n>> [3] https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>> [4] https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>\n>> ------------------------------------------------------------------------------\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/3a548a4b/attachment.sig>"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-22T23:35:07",
                "message_text_only": "Andy Schroder\n\nOn 02/22/2015 05:48 PM, Eric Voskuil wrote:\n> One correction inline below.\n>\n> e\n>\n> On 02/22/2015 02:39 PM, Eric Voskuil wrote:\n>> Hi Jan,\n>>\n>> This is really nice work.\n>>\n>> WRT the Schroder and Schildbach proposal, the generalization of the \"r\"\n>> and \"payment_url\" parameters makes sense, with only the potential\n>> backward compat issue on payment_url.\n>>\n>>> TBIP75 furthermore proposes to include an additional 'h' parameter\n>>> which would be a hash of the BIP70 payment request, preventing a MITM\n>>> attack on the Bluetooth channel even if the BIP70 payment request\n>>> isn't signed. This would have also been my suggestion, although I\n>>> know that Mike Hearn has raised concerns about this approach. One\n>>> being, that one needs to finalize the BIP70 payment request at the\n>>> time the QR code and NFC URI is generated.\n>>> ...\n>>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>> Yes, this design is problematic from a privacy standpoint. Anyone within\n>> the rather significant range of the Bluetooth terminal is able to\n>> capture payment requests and correlate them to people. In other words it\n>> can be used to automate tainting.\n>>\n>> The problem is easily resolved by recognizing that, in the envisioned\n>> face-to-face trade, proximity is the source of trust. Even in the above\n>> proposal the \"h\" parameter is trusted because it was obtained by\n>> proximity to the NFC terminal. The presumption is that this proximity\n>> produces a private channel.\n>>\n>> As such the \"tap\" should transfer a session key used for symmetric block\n>> cipher over the Bluetooth channel. This also resolves the issue of\n>> needing to formulate the payment request before the NFC.\n>>\n>> As an aside, in other scenarios, such as an automated dispenser, this\n>> presumption does not hold. The merchant is not present to guard against\n>> device tampering. Those scenarios can be secured using BIP70, but cannot\n>> guarantee privacy.\n>>\n>> The other differences I have with the proposal pertain to efficiency,\n>> not privacy or integrity of the transaction:\n>>\n>> The proposed resource name is redundant with any unique identifier for\n>> the session. For example, the \"h\" parameter is sufficient. But with the\n>> establishment of a session key both as I propose above, the parties can\n>> derive a sufficiently unique public resource name from a hash of the\n>> key. An additional advantage is that the resource name can be\n>> fixed-length, simplifying the encoding/decoding.\n>>\n>> The MAC address (and resource name) should be encoded using base58. This\n> The MAC address (and session key) should be encoded using base58. This\n\n\nAs I mentioned in my other e-mail, I don't know that we can consider \nthis NFC a private channel, so I don't think a session key should be \ntransmitted over it.\n\n\n>\n>> is shorter than base16, is often shorter than base64, better\n>> standardized and does not require URI encoding, and is generally\n>> available to implementers.\n>>\n>> There is no need for the establishment of two Bluetooth services.\n>>\n>> I would change the payment_url recommendation so that the list order\n>> represents a recommended ordering provided by the terminal for the wallet.\n>>\n>> I wrote up my thoughts on these considerations last year and recently\n>> revised it by adding a section at the end to incorporate the \"r\" and\n>> \"payment_url\" generalizations from Andreas and Andy.\n\n\nThe order is set so that it maintains backwards compatibility by \nproviding the https request first. As mentioned in the proposal, the \norder of the r parameters has the recommended (but not required) \npriority. The wallet is encouraged to use the same protocol (but not \nrequired).\n\n\n>>\n>> https://github.com/evoskuil/bips/tree/master/docs\n>>\n>> e\n>>\n>>\n>> On 02/22/2015 11:08 AM, Jan Vornberger wrote:\n>>> Hi everyone,\n>>>\n>>> I am working on a Bitcoin point of sale terminal based on a Raspberry Pi, which\n>>> displays QR codes, but also provides payment requests via NFC. It can optionally\n>>> receive the sender's transaction via Bluetooth, so if the sender wallet\n>>> supports it, the sender can be completely offline. Only the terminal needs an\n>>> internet connection.\n>>>\n>>> Typical scenario envisioned: Customer taps their smartphone (or maybe smartwatch\n>>> in the future) on the NFC pad, confirms the transaction on their phone\n>>> (or smartwatch) and the transaction completes via Bluetooth and/or the phone's\n>>> internet connection.\n>>>\n>>> You can see a prototype in action here:\n>>>\n>>>    https://www.youtube.com/watch?v=P7vKHMoapr8\n>>>\n>>> The above demo uses a release version of Schildbach's Bitcoin Wallet, so it\n>>> works as shown today. However, some parts - especially the Bluetooth stuff - are\n>>> custom extensions of Schildbach's wallet which are not yet standard.\n>>>\n>>> I'm writing this post to document my experience implementing NFC and offline\n>>> payments and hope to move the discussion forward around standardizing some of\n>>> this stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser [1,2]\n>>> follows along the same lines, so his proposed TBIP74 [3] and TBIP75 [4] are\n>>> relevant here as well.\n>>>\n>>>\n>>> ## NFC vs Bluetooth vs NFC+Bluetooth ##\n>>>\n>>> Before I get into the implementation details, a few words for why I decided to\n>>> go with the combination of NFC and Bluetooth:\n>>>\n>>> Doing everything via NFC is an interesting option to keep things simple, but the\n>>> issue is, that one usually can't maintain the connection while the user confirms\n>>> the transaction (as they take the device back to press a button or maybe enter a\n>>> PIN). So there are three options:\n>>>\n>>> 1. Do a \"double tap\": User taps, takes the device back, confirms, then taps\n>>> again to transmit the transaction. (I think Google Wallet does something like\n>>> this.)\n>>>\n>>> 2. Confirm beforehand: User confirms, then taps and everything can happen in one\n>>> go. The disadvantage is, that you confirm the transaction before you have seen\n>>> the details. (I believe Google Wallet can also work this way.)\n>>>\n>>> 3. Tap the phone, then establish a Bluetooth connection which allows you to do\n>>> all necessary communication even if the user takes the device back.\n>>>\n>>> I feel that option 3 is the nicest UX, so that is what I am focusing on right\n>>> now, but there are pros and cons to all options. One disadvantage of option 3 in\n>>> practice is, that many users - in my experience - have Bluetooth turned off, so\n>>> it can result in additional UI dialogs popping up, asking the user to turn on\n>>> Bluetooth.\n>>>\n>>> Regarding doing everything via Bluetooth or maybe BLE: I have been following the\n>>> work that Airbitz has done around that, but personally I prefer the NFC\n>>> interaction of \"I touch what I want to pay\" rather than \"a payment request comes\n>>> to me through the air and I figure out whether it is meant for me/is legitimate\".\n>>>\n>>>\n>>> ## NFC data formats ##\n>>>\n>>> A bit of background for those who are not that familiar with NFC: Most Bitcoin\n>>> wallets with NFC support make use of NDEF (NFC Data Exchange Format) as far as I\n>>> am aware (with CoinBlesk being an exception, which uses host-based card\n>>> emulation, if I understand it correctly). NDEF defines a number of record types,\n>>> among them 'URI' and 'Mime Type'.\n>>>\n>>> A common way of using NFC with Bitcoin is to create a URI record that contains a\n>>> Bitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also support\n>>> the mime type record, which is then set to 'application/bitcoin-paymentrequest'\n>>> and the rest of the NFC data is a complete BIP70 payment request.\n>>>\n>>>\n>>> ## Implementation ##\n>>>\n>>> To structure the discussion a little bit, I have listed a number of scenarios to\n>>> consider below. Not every possible combination is listed, but it should cover a\n>>> bit of everything.\n>>>\n>>> Scenarios:\n>>>\n>>> 1) Scan QR code, transmit transaction via Bitcoin network\n>>>     Example QR code: bitcoin:1asdf...?amount=42\n>>>\n>>> 2) Touch NFC pad, transmit transaction via Bitcoin network\n>>>     Example NFC URI: bitcoin:1asdf...?amount=42\n>>>\n>>> 3) Scan QR code, fetch BIP70 details via HTTP, post transaction via HTTP\n>>>     Example QR code: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>>\n>>> 4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via HTTP\n>>>     Example NFC URI: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>>\n>>> 5) Touch NFC pad, receive BIP70 details directly, post transaction via HTTP\n>>>     Example NFC MIME record: application/bitcoin-paymentrequest + BIP70 payment request\n>>>\n>>> 6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>>>     Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>>     Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>>\n>>> 7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>>>     Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>>     Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>>\n>>> Scenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I am just\n>>> listing them here for comparison. Scenario 3 is what is often in use now, for\n>>> example when using a checkout screen by BitPay or Coinbase.\n>>>\n>>> I played around with both scenarios 4 and 5, trying to decide whether I should\n>>> use an NFC URI record or already provide the complete BIP70 payment request via\n>>> NFC.\n>>>\n>>> My experience here has been, that the latter was fairly fragile in my setup\n>>> (Raspberry Pi, NFC dongle from a company called Sensor ID, using nfcpy). I tried\n>>> with signed payment requests that were around 4k to 5k and the transfer would\n>>> often not complete if I didn't hold the phone perfectly in place. So I quickly\n>>> switched to using the NFC URI record instead and have the phone fetch the BIP70\n>>> payment request via Bluetooth afterwards. Using this approach the amount of data\n>>> is small enough that it's usually 'all or nothing' and that seems more robust to\n>>> me.\n>>>\n>>> That said, I continue to have problems with the NFC stack that I'm using, so it\n>>> might just be my NFC setup that is causing these problems. I will probably give\n>>> the NXP NFC library a try next (which I believe is also the stack that is used\n>>> by Android). Maybe I have more luck with that approach and could then switch to\n>>> scenario 5.\n>>>\n>>> Scenarios 6 and 7 is what the terminal is doing right now. The 'bt' parameter is\n>>> the non-standard extension of Andreas' wallet that I was mentioning. TBIP75\n>>> proposes to change 'bt' into 'r1' as part of a more generic approach of\n>>> numbering different sources for the BIP70 payment request. I think that is a\n>>> good idea and would express my vote for this proposal. So the QR code or NFC URI\n>>> would then look something like this:\n>>>\n>>>    bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n>>>\n>>> In addition the payment request would need to list additional 'payment_url's. My\n>>> proposal would be to do something like this:\n>>>\n>>>      message PaymentDetails {\n>>>          ...\n>>>          optional string payment_url = 6;\n>>>          optional bytes merchant_data = 7;\n>>>          repeated string additional_payment_urls = 8;\n>>>            // ^-- new; to hold things like 'bt:1234567890AB'\n>>>      }\n>>>\n>>> TBIP75 proposes to just change 'optional string payment_url' into 'repeated\n>>> string payment_url'. If this isn't causing any problems (and hopefully not too\n>>> much confusion?) I guess that would be fine too.\n>>>\n>>> In my opinion a wallet should then actually attempt all or multiple of the\n>>> provided mechanisms in parallel (e.g. try to fetch the BIP70 payment request via\n>>> both HTTP and Bluetooth) and go with whatever completes first. But that is of\n>>> course up to each wallet to decide how to handle.\n>>>\n>>> TBIP75 furthermore proposes to include an additional 'h' parameter which would\n>>> be a hash of the BIP70 payment request, preventing a MITM attack on the\n>>> Bluetooth channel even if the BIP70 payment request isn't signed. This would\n>>> have also been my suggestion, although I know that Mike Hearn has raised\n>>> concerns about this approach. One being, that one needs to finalize the BIP70\n>>> payment request at the time the QR code and NFC URI is generated.\n>>>\n>>>\n>>> ## Questions ##\n>>>\n>>> My questions to the list:\n>>>\n>>> 1) Do you prefer changing 'optional string payment_url' into 'repeated string\n>>> payment_url' or would you rather introduce a new field 'additional_payment_urls'?\n>>>\n>>> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin Wallet?\n>>>\n>>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>>>\n>>> 4) General comments, advice, feedback?\n>>>\n>>> I appreciate your input! :-)\n>>>\n>>> Cheers,\n>>> Jan\n>>>\n>>> [1] http://andyschroder.com/BitcoinFluidDispenser/\n>>> [2] https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n>>> [3] https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>>> [4] https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>>> Get technology previously reserved for billion-dollar corporations, FREE\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/ef4d3d0f/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/ef4d3d0f/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-23T00:46:28",
                "message_text_only": "On 02/22/2015 03:35 PM, Andy Schroder wrote:\n>> On 02/22/2015 02:39 PM, Eric Voskuil wrote:\n>>> Hi Jan,\n>>>\n>>> This is really nice work.\n>>>\n>>> WRT the Schroder and Schildbach proposal, the generalization of the \"r\"\n>>> and \"payment_url\" parameters makes sense, with only the potential\n>>> backward compat issue on payment_url.\n>>>\n>>>> TBIP75 furthermore proposes to include an additional 'h' parameter\n>>>> which would be a hash of the BIP70 payment request, preventing a MITM\n>>>> attack on the Bluetooth channel even if the BIP70 payment request\n>>>> isn't signed. This would have also been my suggestion, although I\n>>>> know that Mike Hearn has raised concerns about this approach. One\n>>>> being, that one needs to finalize the BIP70 payment request at the\n>>>> time the QR code and NFC URI is generated.\n>>>> ...\n>>>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>>> Yes, this design is problematic from a privacy standpoint. Anyone within\n>>> the rather significant range of the Bluetooth terminal is able to\n>>> capture payment requests and correlate them to people. In other words it\n>>> can be used to automate tainting.\n>>>\n>>> The problem is easily resolved by recognizing that, in the envisioned\n>>> face-to-face trade, proximity is the source of trust. Even in the above\n>>> proposal the \"h\" parameter is trusted because it was obtained by\n>>> proximity to the NFC terminal. The presumption is that this proximity\n>>> produces a private channel.\n>>>\n>>> As such the \"tap\" should transfer a session key used for symmetric block\n>>> cipher over the Bluetooth channel. This also resolves the issue of\n>>> needing to formulate the payment request before the NFC.\n>>>\n>>> As an aside, in other scenarios, such as an automated dispenser, this\n>>> presumption does not hold. The merchant is not present to guard against\n>>> device tampering. Those scenarios can be secured using BIP70, but cannot\n>>> guarantee privacy.\n>>>\n>>> The other differences I have with the proposal pertain to efficiency,\n>>> not privacy or integrity of the transaction:\n>>>\n>>> The proposed resource name is redundant with any unique identifier for\n>>> the session. For example, the \"h\" parameter is sufficient. But with the\n>>> establishment of a session key both as I propose above, the parties can\n>>> derive a sufficiently unique public resource name from a hash of the\n>>> key. An additional advantage is that the resource name can be\n>>> fixed-length, simplifying the encoding/decoding.\n>>>\n>>> The MAC address (and resource name) should be encoded using base58. This\n>> The MAC address (and session key) should be encoded using base58. This\n> \n> \n> As I mentioned in my other e-mail, I don't know that we can consider\n> this NFC a private channel, so I don't think a session key should be\n> transmitted over it.\n\nI don't think there is another option. The point of the NFC terminal is\nto establish trust based on proximity.\n\nI don't agree that it's insufficiently private. It's no less private\nthan if the customer pulled out an R2-D2 interface arm and plugged into\nthe merchant's terminal. The terminal connection can still be compromised.\n\nIOW the merchant trusts that the person who just tapped on the NFC\nterminal is the one who he/she is going to hand the product to, and both\nparties trust that because of this handshake, no non-proximate\ninterlopers can monitor the content of the transaction. In the absence\nof BIP70 (quite real in some scenarios) the payer also relies on\nproximity to establish the identity of the receiver.\n\nOtherwise, without proximity establishment, an *independent* secure\nchannel is required (see the Airbitz/RedPhone discussion). You end up\nwith an infinite regression problem. RedPhone terminates this regression\nby relying on each party's ability to recognize the other's voice, and\nin the difficulty of spoofing a voice. PKI deals with it by trusting\nroot CAs on presumed-trusted platforms (and a troublesome revocation\nprocess). WoT establishes this by unspecified means (e.g. Peter Todd has\nproduced a nice video of him reading out his PGP key fingerprint).\n\nIf interlopers are so close to the NFC terminal that they can join the\nsession, they have effectively compromised an endpoint, so the privacy\nproblem becomes moot. Both endpoints must secure their devices to\nachieve privacy in any design.\n\n>>> is shorter than base16, is often shorter than base64, better\n>>> standardized and does not require URI encoding, and is generally\n>>> available to implementers.\n>>>\n>>> There is no need for the establishment of two Bluetooth services.\n>>>\n>>> I would change the payment_url recommendation so that the list order\n>>> represents a recommended ordering provided by the terminal for the wallet.\n>>>\n>>> I wrote up my thoughts on these considerations last year and recently\n>>> revised it by adding a section at the end to incorporate the \"r\" and\n>>> \"payment_url\" generalizations from Andreas and Andy.\n> \n> \n> The order is set so that it maintains backwards compatibility by\n> providing the https request first.\n\nUnderstood, it just isn't entirely clear to me that the backward compat\nin this case doesn't depend on implementation choices of existing\nsystems. In any case it may be worth the small potential risk to achieve\nthe more elegant design.\n\n> As mentioned in the proposal, the\n> order of the r parameters has the recommended (but not required)\n> priority. The wallet is encouraged to use the same protocol (but not\n> required).\n\nUnderstood, but it is more flexible to provide the recommendation that\nthe payment_url set be priority-ordered as well. This allows the seller\nto deviate from the protocol (URL scheme) coupling, while also allowing\nit to be established, as desired. Presumably it's the merchant's\npriority that we want the wallet to honor where possible.\n\n>>> https://github.com/evoskuil/bips/tree/master/docs\n>>>\n>>> e\n>>>\n>>>\n>>> On 02/22/2015 11:08 AM, Jan Vornberger wrote:\n>>>> Hi everyone,\n>>>>\n>>>> I am working on a Bitcoin point of sale terminal based on a Raspberry Pi, which\n>>>> displays QR codes, but also provides payment requests via NFC. It can optionally\n>>>> receive the sender's transaction via Bluetooth, so if the sender wallet\n>>>> supports it, the sender can be completely offline. Only the terminal needs an\n>>>> internet connection.\n>>>>\n>>>> Typical scenario envisioned: Customer taps their smartphone (or maybe smartwatch\n>>>> in the future) on the NFC pad, confirms the transaction on their phone\n>>>> (or smartwatch) and the transaction completes via Bluetooth and/or the phone's\n>>>> internet connection.\n>>>>\n>>>> You can see a prototype in action here:\n>>>>\n>>>>   https://www.youtube.com/watch?v=P7vKHMoapr8\n>>>>\n>>>> The above demo uses a release version of Schildbach's Bitcoin Wallet, so it\n>>>> works as shown today. However, some parts - especially the Bluetooth stuff - are\n>>>> custom extensions of Schildbach's wallet which are not yet standard.\n>>>>\n>>>> I'm writing this post to document my experience implementing NFC and offline\n>>>> payments and hope to move the discussion forward around standardizing some of\n>>>> this stuff. Andy Schroder's work around his Bitcoin Fluid Dispenser [1,2]\n>>>> follows along the same lines, so his proposed TBIP74 [3] and TBIP75 [4] are\n>>>> relevant here as well.\n>>>>\n>>>>\n>>>> ## NFC vs Bluetooth vs NFC+Bluetooth ##\n>>>>\n>>>> Before I get into the implementation details, a few words for why I decided to\n>>>> go with the combination of NFC and Bluetooth:\n>>>>\n>>>> Doing everything via NFC is an interesting option to keep things simple, but the\n>>>> issue is, that one usually can't maintain the connection while the user confirms\n>>>> the transaction (as they take the device back to press a button or maybe enter a\n>>>> PIN). So there are three options:\n>>>>\n>>>> 1. Do a \"double tap\": User taps, takes the device back, confirms, then taps\n>>>> again to transmit the transaction. (I think Google Wallet does something like\n>>>> this.)\n>>>>\n>>>> 2. Confirm beforehand: User confirms, then taps and everything can happen in one\n>>>> go. The disadvantage is, that you confirm the transaction before you have seen\n>>>> the details. (I believe Google Wallet can also work this way.)\n>>>>\n>>>> 3. Tap the phone, then establish a Bluetooth connection which allows you to do\n>>>> all necessary communication even if the user takes the device back.\n>>>>\n>>>> I feel that option 3 is the nicest UX, so that is what I am focusing on right\n>>>> now, but there are pros and cons to all options. One disadvantage of option 3 in\n>>>> practice is, that many users - in my experience - have Bluetooth turned off, so\n>>>> it can result in additional UI dialogs popping up, asking the user to turn on\n>>>> Bluetooth.\n>>>>\n>>>> Regarding doing everything via Bluetooth or maybe BLE: I have been following the\n>>>> work that Airbitz has done around that, but personally I prefer the NFC\n>>>> interaction of \"I touch what I want to pay\" rather than \"a payment request comes\n>>>> to me through the air and I figure out whether it is meant for me/is legitimate\".\n>>>>\n>>>>\n>>>> ## NFC data formats ##\n>>>>\n>>>> A bit of background for those who are not that familiar with NFC: Most Bitcoin\n>>>> wallets with NFC support make use of NDEF (NFC Data Exchange Format) as far as I\n>>>> am aware (with CoinBlesk being an exception, which uses host-based card\n>>>> emulation, if I understand it correctly). NDEF defines a number of record types,\n>>>> among them 'URI' and 'Mime Type'.\n>>>>\n>>>> A common way of using NFC with Bitcoin is to create a URI record that contains a\n>>>> Bitcoin URI. Beyond that Schildbach's wallet (and maybe others?) also support\n>>>> the mime type record, which is then set to 'application/bitcoin-paymentrequest'\n>>>> and the rest of the NFC data is a complete BIP70 payment request.\n>>>>\n>>>>\n>>>> ## Implementation ##\n>>>>\n>>>> To structure the discussion a little bit, I have listed a number of scenarios to\n>>>> consider below. Not every possible combination is listed, but it should cover a\n>>>> bit of everything.\n>>>>\n>>>> Scenarios:\n>>>>\n>>>> 1) Scan QR code, transmit transaction via Bitcoin network\n>>>>    Example QR code: bitcoin:1asdf...?amount=42\n>>>>\n>>>> 2) Touch NFC pad, transmit transaction via Bitcoin network\n>>>>    Example NFC URI: bitcoin:1asdf...?amount=42\n>>>>\n>>>> 3) Scan QR code, fetch BIP70 details via HTTP, post transaction via HTTP\n>>>>    Example QR code: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>>>\n>>>> 4) Touch NFC pad, fetch BIP70 details via HTTP, post transaction via HTTP\n>>>>    Example NFC URI: bitcoin:1asdf...?amount=42&r=https://example.org/bip70paymentrequest\n>>>>\n>>>> 5) Touch NFC pad, receive BIP70 details directly, post transaction via HTTP\n>>>>    Example NFC MIME record: application/bitcoin-paymentrequest + BIP70 payment request\n>>>>\n>>>> 6) Scan QR code, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>>>>    Example QR code: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>>>    Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>>>\n>>>> 7) Touch NFC pad, fetch BIP70 details via Bluetooth, post transaction via Bluetooth\n>>>>    Example NFC URI: bitcoin:1asdf...?amount=42&bt=1234567890AB\n>>>>    Payment request has 'payment_url' set to 'bt:1234567890AB'\n>>>>\n>>>> Scenarios 1 and 2 are basically the 'legacy'/pre-BIP70 approach and I am just\n>>>> listing them here for comparison. Scenario 3 is what is often in use now, for\n>>>> example when using a checkout screen by BitPay or Coinbase.\n>>>>\n>>>> I played around with both scenarios 4 and 5, trying to decide whether I should\n>>>> use an NFC URI record or already provide the complete BIP70 payment request via\n>>>> NFC.\n>>>>\n>>>> My experience here has been, that the latter was fairly fragile in my setup\n>>>> (Raspberry Pi, NFC dongle from a company called Sensor ID, using nfcpy). I tried\n>>>> with signed payment requests that were around 4k to 5k and the transfer would\n>>>> often not complete if I didn't hold the phone perfectly in place. So I quickly\n>>>> switched to using the NFC URI record instead and have the phone fetch the BIP70\n>>>> payment request via Bluetooth afterwards. Using this approach the amount of data\n>>>> is small enough that it's usually 'all or nothing' and that seems more robust to\n>>>> me.\n>>>>\n>>>> That said, I continue to have problems with the NFC stack that I'm using, so it\n>>>> might just be my NFC setup that is causing these problems. I will probably give\n>>>> the NXP NFC library a try next (which I believe is also the stack that is used\n>>>> by Android). Maybe I have more luck with that approach and could then switch to\n>>>> scenario 5.\n>>>>\n>>>> Scenarios 6 and 7 is what the terminal is doing right now. The 'bt' parameter is\n>>>> the non-standard extension of Andreas' wallet that I was mentioning. TBIP75\n>>>> proposes to change 'bt' into 'r1' as part of a more generic approach of\n>>>> numbering different sources for the BIP70 payment request. I think that is a\n>>>> good idea and would express my vote for this proposal. So the QR code or NFC URI\n>>>> would then look something like this:\n>>>>\n>>>>   bitcoin:1asdf...?amount=42&r=https://example.org/bip70&r1=bt:1234567890AB/resource\n>>>>\n>>>> In addition the payment request would need to list additional 'payment_url's. My\n>>>> proposal would be to do something like this:\n>>>>\n>>>>     message PaymentDetails {\n>>>>         ...\n>>>>         optional string payment_url = 6;\n>>>>         optional bytes merchant_data = 7;\n>>>>         repeated string additional_payment_urls = 8;\n>>>>           // ^-- new; to hold things like 'bt:1234567890AB'\n>>>>     }\n>>>>\n>>>> TBIP75 proposes to just change 'optional string payment_url' into 'repeated\n>>>> string payment_url'. If this isn't causing any problems (and hopefully not too\n>>>> much confusion?) I guess that would be fine too.\n>>>>\n>>>> In my opinion a wallet should then actually attempt all or multiple of the\n>>>> provided mechanisms in parallel (e.g. try to fetch the BIP70 payment request via\n>>>> both HTTP and Bluetooth) and go with whatever completes first. But that is of\n>>>> course up to each wallet to decide how to handle.\n>>>>\n>>>> TBIP75 furthermore proposes to include an additional 'h' parameter which would\n>>>> be a hash of the BIP70 payment request, preventing a MITM attack on the\n>>>> Bluetooth channel even if the BIP70 payment request isn't signed. This would\n>>>> have also been my suggestion, although I know that Mike Hearn has raised\n>>>> concerns about this approach. One being, that one needs to finalize the BIP70\n>>>> payment request at the time the QR code and NFC URI is generated.\n>>>>\n>>>>\n>>>> ## Questions ##\n>>>>\n>>>> My questions to the list:\n>>>>\n>>>> 1) Do you prefer changing 'optional string payment_url' into 'repeated string\n>>>> payment_url' or would you rather introduce a new field 'additional_payment_urls'?\n>>>>\n>>>> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin Wallet?\n>>>>\n>>>> 3) Are there other comments regarding 'h' parameter as per TBIP75?\n>>>>\n>>>> 4) General comments, advice, feedback?\n>>>>\n>>>> I appreciate your input! :-)\n>>>>\n>>>> Cheers,\n>>>> Jan\n>>>>\n>>>> [1] http://andyschroder.com/BitcoinFluidDispenser/\n>>>> [2] https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg06354.html\n>>>> [3] https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n>>>> [4] https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>>>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>>>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>>>> Get technology previously reserved for billion-dollar corporations, FREE\n>>>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/14885ab3/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-23T01:05:31",
                "message_text_only": "On 02/22/2015 11:39 PM, Eric Voskuil wrote:\n\n> The MAC address (and resource name) should be encoded using base58. This\n> is shorter than base16, is often shorter than base64, better\n> standardized and does not require URI encoding, and is generally\n> available to implementers.\n\nOf course this is just a minor detail, but Base64Url is well defined,\nalmost always more efficient than Base58 and never less efficient, and\nimplemented in way more libraries and OSes than Base58. Base58 was\ndesigned for copy-typing by humans."
            },
            {
                "author": "Aaron Voisine",
                "date": "2015-02-23T01:55:20",
                "message_text_only": ">> However, I don't think we should base\n>> bitcoin around what Apple wants us to do. They've already had their war\n>> on bitcoin. They are going to do whatever they can to protect their NFC\n>> based payment system. We need to make their platform the the less\n>> desirable one if they are going to play the game that way. If that means\n>> an Airbitz like proposal is implemented as a fallback, maybe that is\n>> fine and POS systems need to support both, but I just don't think we\n>> should limit what we can do because of Apple's products capabilities.\n>\n> Ack on Airbitz, and ack on our relationship to Apple (-:\n\nI also agree we shouldn't limit specs to Apple product capabilities. If\nhistory is any indication, NFC will be opened up to developers in iOS 9,\njust like touch id in was in iOS 8, and bluetooth LE in iOS 5, one major OS\nrevision after the hardware capability is first introduced.\n\nAlso, I'm pretty sure that Apple doesn't care about bitcoin at all. When\nthey banned wallets from the app store, it was prior to the 2013 FinCEN\nguidance. At the time many of us, myself included, assumed USG would take\nthe same stance with bitcoin as they did against e-gold. It wasn't clear at\nall that bitcoin didn't violate legal tender laws or who knows what. When\nApple allowed wallets back in, it was just weeks before Apple pay launched.\nIt's seems clear that bitcoin is too small for them to be concerned about\nin the slightest.\n\nAaron Voisine\nco-founder and CEO\nbreadwallet.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150222/4374ae80/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-23T00:48:29",
                "message_text_only": "Jan, this is great stuff! Thanks for sharing your experiences.\n\nI think the 4k payments requests issue must be solvable somehow. I had\nno trouble transmitting that amount via NFC, although yes a bit of delay\nwas noticable.\n\nAbout payment_url: Protobuf allows changing optional to repeated and yes\nit's backwards compatible. Which is why I'm personally against parsing\ntwo fields rather than just one.\n\n> 2) @Andreas: Is the r, r1, r2 mechanism already implemented in Bitcoin Wallet?\n\nNo it isn't. It's implemented in bitcoinj though."
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-24T11:28:27",
                "message_text_only": "On 02/23/2015 09:53 PM, Andy Schroder wrote:\n> I was saying provide a public key via NFC (or a public key fingerprint\n> and then send the full public key over bluetooth). Instead of providing\n> a new public key on each tap, why can't the payee just stop accepting\n> connections from new parties on that \"resource\" after a session key has\n> been received from the first person?\n\nBecause the presumption was that there was not an additional secret in\nthe URI. If the public key is reused then anyone can spoof a payer and\nobtain payment requests.\n\nAdding a secret to the URI can resolve this, as long as it is encrypted\nwith the public key before being transmitted back to BT. Otherwise the\nsecret can be intercepted and replayed to the terminal, encrypted with\nthe well-known public key.\n\nSo if you want to treat the \"resource\" as a secret this would work.\nHowever the resource was designed as a public session identifier,\nleading the byte stream. This changes it to private session identifier,\nwhich loses some utility.\n\nAlso, reuse of the public key introduces a forward secrecy problem and\nthe potential for persistent seller impersonation in the case of\nundiscovered key compromise.\n\nBut there's really no benefit to reusing the key. An ephemeral key\nresolves these issues and can also seed the public resource name.\n\n> If the person decides to have there\n> friend or family pay for them instead and cancel the payment, they could\n> just hit cancel on the POS or something (on my fuel pump I have a switch\n> that needs to be turned, the purpose of this is to avoid wasting too\n> many addresses)\n\nDon't you have someone stop by the pump once a week and empty out the\naddresses? :)\n\n> and/or do another NFC tap (if you're providing QR codes\n> you'd still need a button of some kind though so it knows to refresh\n> it), or the POS can just provide a completely new payment request to any\n> new connections on that same \"resource\" which use a different session key.\n> \n> I feel like the authentication of the payer to the payee in any future\n> connections after they receive the session key from them (which was\n> encrypted with the payees public key), comes from the fact that they are\n> sending responses back that are encrypted using the session key they\n> gave to the payee. The way I am seeing it is that the NFC tap or QR code\n> scan is acting in addition to the visual name check on the signature\n> verification in the wallet.\n\nWith a secure channel that identifies the parties by proximity, the\nreason for the payment request signature is for the payer to obtain a\nnon-repudiation guarantee. But it also serves as a defense-in-depth\nsolution to a compromise of the channel (though does not offer a benefit\nin the case of seller terminal/cert compromise).\n\n> If the certificate used isn't signed by a CA\n> (self signed), it may be fine as long as you heard about it via NFC or\n> QR code. I don't think it will require PKI and should still work\n> wallet-to-wallet.\n\nIn that case the cert provides no benefit. A self-signed cert can be\nrepudiated and if the channel is compromised anyone can sign the payment\nrequest.\n\n> It sounds like you are saying I'm proposing the customer is going to\n> need a certificate signed by CA? If so, why? \n\nThis was not a serious proposal, it was to point out what would become\nnecessary if the payer could not be identified by proximity.\n\nIn the case where a public key is reused, any payer can contact the BT\nterminal and obtain the payment request. If the merchant can't rely on\nproximity (i.e. can't trust the integrity of the NFC connection) then he\nwould have to fall back on some other means of identifying the payer. A\nmutual verbal/visual confirmation could work, but the point of of NFC+BT\nis elimination of that hassle.\n\nYes, it sounds a bit wild, but I have seen on this list a serious\nproposal to have people broadcast their photo, having the merchant\nselect them and push to them the payment request. Of course anyone can\nspoof another's image, so at some point your image would need to be\ncertified, and hence a CA.\n\nI wouldn't go there, but was just making the point.\n\n> I don't need this for any https website I visit.\n\nWhen you go to a web site you first establish a private communication.\nThe site doesn't know who you are (hopefully). Then you log on with your\nsecret, or proof of it, establishing who you are. Customer identity\nproblem solved.\n\nOr you create an account, providing your relevant identity information\nwhich effectively becomes who you are to the site.\n\nOr you shop anonymously and when you go to check out they know that if\nyou pay, you get permission to direct the product shipment. And only you\ncan see the bill. This because your session binds your shopping to your\nbill and payment.\n\nHowever when you go to the local adult shop to pick up some love toys,\nthe person at the counter has no idea who's asking their terminal for a\npayment request. You having the shop's public cert doesn't help them\nwith that problem (nor does some anonymous signal sending them a photo\nof you). Protecting your privacy ironically requires that they know who\nyou are - electronically. That means some sort of crazy consumer cert\n(not sure that would fly in the love shop)... or trust in\n(electronically anonymous) proximity.\n\n> It's not like the payee is sending anything to\n> the payer that is private. The payment request only becomes private if\n> something is actually received to it, otherwise, it is just discarded\n> and it doesn't matter.\n\nThe payment request is private. It's a (potentially signed) proposal to\ncontract. It can contain interesting information.\n\n> Those bitcoin addresses are never used. It's just\n> like a shopping cart on a website where someone aborts payment and\n> cancels the order.\n\nVery much so, but in that case your neighbors can't read your potential\ntransactions because your session is secured.\n\n> At one point I was thinking we could do something similar to Mike\n> Hearn's suggestion in another recent e-mail where we re-use some\n> existing part of the bitcoin URI to bootstrap some trust in a public key\n> that the payee next sends via bluetooth after the NFC connection. Now\n> that I'm reviewing my notes though, I can't see how this will work with\n> a watching only wallet or if no backwards compatible (to BIP21) bitcoin\n> address is presented in the URI (as Mike said).\n\nIt can work, but you just end up putting an additional value on the URI\n(for watchers), requiring legacy addresses (for non-watchers), adding\nP2SH scripts to the BT broadcast of the public key, and adding another\nBT round trip to obtain a public key before establishing the session.\n\nA few bytes on the NFC tap is a non-issue, especially in comparison to\nthe additional complexity and BT traffic. Those choices are really all\nbased on providing private offline transaction support originating from\ngenerally not private QR code scanning. But QR+BT is not the same as NFC+BT.\n\nHonestly I think it would be reasonable to use the technique with QR+BT,\naccepting the limitations for the legacy system while not unduly\nburdening NFC+BT just for an unachievable cross-consistency goal. Always\npassing the key on the URL for NFC but giving a non-NFC wallet the\noption to ask a BT terminal for a public key seems not just reasonable\nbut optimal if we want to support the QR+BT scenario.\n\nNote also that the BT-only scenario is different as well (see recent\ndiscussion on Airbitz BLE wallet, resulting in the RedPhone-based\nproposal). And finally, QR-only and NFC-only are also different. The\nURIs can be consistent, but the communication protocol will vary.\n\n> What I was saying above about how you can stop accepting connections on\n> that \"resource\" after a session key has been received by the first\n> person could be problematic though. An evil person could just start\n> making connections to every device they can, just to be mean, which\n> would not allow the POS operator to receive payments from their real\n> customers. If you do the other option I proposed, which is to just keep\n> giving out new payment requests, you have other problems (on top of\n> wasting addresses), which are that you can still have mean people giving\n> you a denial of service attach on your hardware, or you could have an\n> unusual situation where two people pay (don't know why they would do\n> this though), so that is why I'm suggesting a manual tap or button press\n> or switch turn being required.\n\nYes, but even with a manual button you could have these problems. The\ndata transfer needs to be proximate as well.\n\n> I guess as more of a abuse filter, a new \"resource\" could be given\n> instead with each tap, and the POS would just ignore all requests to an\n> inactive resource. You may say, why not send a new public key (as you\n> suggested) instead of a new \"resource\" with each tap (or button press if\n> using QR codes), and then you can skip the sending of a static public\n> key (or public key fingerprint), and ignore any data that is not\n> encrypted with that public key. Maybe that is a better idea because it\n> will shorten the bitcoin URI. However, I don't think its required from a\n> privacy standpoint, it primarily just aids in combining the public key\n> fingerprint with the changing \"resource\" name used to filter abuse. Or,\n> am I missing something?\n\nI think this question is covered above.\n\n> So, after thinking through the abuse scenarios I mentioned above, I\n> think I am agreeing with you, but the reason I'm writing all this is to\n> hopefully just get some feedback on my logic to learn something from\n> this discussion. I do think sending a unique public key over NFC has to\n> be better than a unique session key. It adds one more step, but seems to\n> help. \n\nIt doesn't actually add another step to the protocol, just some\ndifferent but simple code on each end. The only downside is that it\nextends the NFC URL about 23 characters.\n\n> If we do this, can we then safely get rid of the h= parameter?\n\nAbsolutely, and I believe Mike ack'd this on a previous post today.\n\n> That should make Mike Hearn happy, and also may alleviate the base64url\n> debate?\n\nOthers may not be aware of the encoding squabble (not sure if it\nqualifies as debate). In the proposed URL, it affects the mac address\nand the key:\n\nbitcoin:[address]?bt:<mac>/<key>\n\nbase58:\nbitcoin:?r=bt:12rAs9mM/234KF8hPkXq5pa6pT1wnJC3hVH7W6yB2Wtw24ztzGtBc4\n\nbase64url:\nbitcoin:?r=bt:ABBgss5s/A3xWlhB1GI_t2NMR9Zq9E47hZOzmZ6eZTS8sbq-liugh\n\nI prefer base58 because it's available to all bitcoin libraries, nearly\nas compact as base64 (+1 byte in our example) and better standardized.\nSome embedded device people might care about having to incorporate\nbase64 as well as base58.\n\nIt's also better looking (no - or _ characters) and more consistent in\nthe proposed URL (all three values would be base58, as opposed to one\nbase58 and two base64url). There may be some idea that base58 is just\nfor bitcoin addresses (not true) or designed for humans... that's sort\nof the point, but it's also good for URLs.\n\ne\n\n> On 02/23/2015 09:55 PM, Eric Voskuil wrote:\n>> Andy, adding to my previous post below:\n>>\n>> On 02/23/2015 01:40 AM, Eric Voskuil wrote:\n>>> On 02/22/2015 11:36 PM, Andy Schroder wrote:\n>> ...\n>>>> It's possible a really sophisticated modification could be done where\n>>>> the attacker encrypts and decrypts the communication and then relays to\n>>>> each party (without them knowing or any glitches detected), but I guess\n>>>> I'm not sure how easy that would be on such a close proximity device?\n>>> If the NFC tap is sufficiently private, privacy is easy to achieve for\n>>> the subsequent communication. If it is not, privacy can be completely\n>>> compromised. The question is only how much more difficult is the attack.\n>>>\n>>> With the public cert tap, the level of difficulty is much lower for\n>>> capturing selected payment requests. The interloper no longer needs to\n>>> invade the space of the NFC terminal and can instead impersonate the\n>>> payer from a safe distance. Nobody gets paid, but privacy is\n>>> compromised.\n>> This problem in the preceding paragraph can be resolved by sending a\n>> unique public key on each NFC tap. In that case an attacker would need\n>> to monitor the NFC communication.\n>>\n>> The talk of wrapping the connection in SSL led me to believe you were\n>> talking about a static public certificate. However that's not a\n>> necessary assumption here and may not be what you intended.\n>>\n>>> The level of difficulty in the case where the interloper wants to taint\n>>> transactions may appear lower, but it is not:\n>>>\n>>> With the session key tap the interloper must compromise the NFC location\n>>> and then monitor the BT traffic. Monitoring BT traffic without being\n>>> party to the connection is presumably not rocket surgery, but not\n>>> standard BT design either.\n>>>\n>>> With the public cert tap the interloper must also compromise the NFC\n>>> location and communicate over BT. Therefore the hardware and physical\n>>> attack requirements are similar. The only added difficulty is that the\n>>> attack on the NFC terminal attack is active (modifying the MAC address\n>>> directing the payer to the BT service).\n>> I believe your central claim was that the difference in the two\n>> bootstrapping approaches (public key vs. session key) is that by using a\n>> unique public key per tap, the attack requires an active vs. passive\n>> attack on the NFC terminal. I just wanted to make clear here that I\n>> agree with that assessment.\n>>\n>> The symmetric key approach is based on the idea that these attacks are\n>> comparable in difficulty and otherwise identical in privacy loss.\n>>\n>> However, the difference in implementation amounts to about +23\n>> additional encoded characters for the BT/LE URL, assuming use of the\n>> secp256k1 curve for DHE. This is really not a material issue in the case\n>> of the NFC tap. The entire URI+URL could be as small as:\n>>\n>> bitcoin:?r=bt:12rAs9mM/79bq48xJaMgqR9YNxnWhqHHM1JB52nxn6VFXBHTP2zrP\n>>\n>> In comparison to a symmetric key:\n>>\n>> bitcoin:?r=bt:12rAs9mM/12drXXUifSrRnXLGbXg8E\n>>\n>> It also does not change the protocol design or complexity at all - it\n>> would just swap out an AES key for a secp256k1 public key.\n>>\n>> bitcoin:[address]?bt:<mac>/<key>\n>>\n>> If that gets us aligned I'm all for it.\n>>\n>>> However impersonating the payer is just a matter of software - no more\n>>> difficult than the session key attack. In fact it may be much easier to\n>>> implement, as the attack can use supported BT features because the\n>>> attacker has directed the payer to connect to him and is connecting to\n>>> the receiver as if he was a payer.\n>>>\n>>> But it gets worse for the public cert tap, since a more sophisticated\n>>> attacker can set himself up in the same position without subverting the\n>>> NFC terminal at all. By broadcasting a more powerful BT service on the\n>>> same advertised MAC address, the attacker can capture traffic and relay\n>>> it to the intended service.\n>> I'm retracting the last paragraph, since the interloper, without\n>> invading the NFC connection (by substituting the public cert), could not\n>> read the relayed traffic. It was getting late :/\n>>\n>>> So in sum, reliance on a public cert makes the communication less\n>>> private under the same physical set of constraints. The difference\n>>> results from the receiver allowing non-proximate payers to impersonate\n>>> proximate payers from a distance by generating their own session keys\n>>> and submitting them over BT.\n>> e\n>>\n> \n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/b6880908/attachment.sig>"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-24T19:49:14",
                "message_text_only": "Hello,\n\nI think were talking about a lot of the same things. There is one key \npiece of information that I was not thinking about until you made it \nclear. Why the payee needs to identify the payer. In my fuel pump \napplication, they really don't, so I wasn't thinking closely about these \nother situations. With my fuel pump, it won't even let you do anything \nuntil you sign a transaction and submit it. So, the payment request \ncontains no personal information, it's just a request for payment, and \nnot for anything specific. It doesn't know or care what you are going to \nbuy until you make a prepayment, because there is no use in trying to \nstart doing business without a signed transaction. This approach \nminimizes risk because once you dispense a fuel, or anything else, it's \nnot like you can easily give it back if you happened to not have any \nfunds. It also makes it a higher chance for a confirmation before the \ncustomer leaves. Other transactions have similar post payment \ntraditions, like a restaurant (not fast food), where the seller doesn't \nknow if you actually have enough money until you've already consumed the \nfood, but this work flow seems to be a culturally driven one rather than \nrisk driven.\n\nIn the discussion about an https website, there are many websites where \nno login or authentication by the client required to have a private \nconnection. With a shopping website though, the customer can identify \nthemselves without logging in by saying (in band) what they are \nintending to buy after the private connection has been established. At a \ncash register in person the items being purchased have no tie to the \ncustomer. The items being purchased were communicated to the seller out \nof band (in real life) and insecurely to establish that link. You are \ntrying to make a tie between that list of items and the buyer \nseparately, and that is why some unique identifier needs to be \ntransmitted via NFC.\n\nStepping a bit back: I guess I'm wondering if it would be useful to \nencourage an opposite work flow where a micro payment channel is setup \nfor most purchases. For example, if I go to the grocery store, it \nusually takes a minute or so to check out. If I immediately tap and open \nup a payment channel with the store when I start checkout, rather than \nfinish, there can be more network propagation of that transaction while \nthey are scanning all the items. They'll see the channel is open and \nstart adding all the items I want to buy to that micro payment channel. \nI'm identified because I made a payment, not because I've transmitted a \nunique resource or used a unique public key to encrypt communication. A \npayment terminal would not allow for new payment channels to be open \nuntil the currently active one is closed. If I don't have enough funds \nleft in the payment channel, they just stop scanning items. There may be \nsome additional privacy implications of setting up micro payment \nchannels all the time for everyday purchases. It also may not work for \nevery sales case, so we may still need some way to authenticate the \npayer with a unique identifier. So, maybe we don't want to do this, but \nit is just a thought to consider.\n\n\nSo, unless someone thinks what I am proposing in my previous paragraph \nhas any potential (as a complete solution, not a complement to \nsolutions), the plan is the following:\n\n  * Get rid of the \"h=\" parameter\n  * Add a \"s=\" parameter that uses a unique public key for each session.\n    This public key identifies the payee to the payer and payer to the\n    payee.\n  * Use a base58 encoding to save space and reduce the character set\n    slightly.\n  * Get rid of the resource? If a terminal is accepting payment from\n    multiple customers simultaneously, it should be smart enough to\n    distinguish between customers based on the public key they are\n    encrypting the data with. Is this approach feasible?\n  * When you said a new public key for each tap, do you see that as\n    every single tap, or do you consider multiple taps from the same\n    customer the same tap?\n\n\n\nAndy Schroder\n\nOn 02/24/2015 06:28 AM, Eric Voskuil wrote:\n> On 02/23/2015 09:53 PM, Andy Schroder wrote:\n>> I was saying provide a public key via NFC (or a public key fingerprint\n>> and then send the full public key over bluetooth). Instead of providing\n>> a new public key on each tap, why can't the payee just stop accepting\n>> connections from new parties on that \"resource\" after a session key has\n>> been received from the first person?\n> Because the presumption was that there was not an additional secret in\n> the URI. If the public key is reused then anyone can spoof a payer and\n> obtain payment requests.\n>\n> Adding a secret to the URI can resolve this, as long as it is encrypted\n> with the public key before being transmitted back to BT. Otherwise the\n> secret can be intercepted and replayed to the terminal, encrypted with\n> the well-known public key.\n>\n> So if you want to treat the \"resource\" as a secret this would work.\n> However the resource was designed as a public session identifier,\n> leading the byte stream. This changes it to private session identifier,\n> which loses some utility.\n>\n> Also, reuse of the public key introduces a forward secrecy problem and\n> the potential for persistent seller impersonation in the case of\n> undiscovered key compromise.\n>\n> But there's really no benefit to reusing the key. An ephemeral key\n> resolves these issues and can also seed the public resource name.\n>\n>> If the person decides to have there\n>> friend or family pay for them instead and cancel the payment, they could\n>> just hit cancel on the POS or something (on my fuel pump I have a switch\n>> that needs to be turned, the purpose of this is to avoid wasting too\n>> many addresses)\n> Don't you have someone stop by the pump once a week and empty out the\n> addresses? :)\n>\n>> and/or do another NFC tap (if you're providing QR codes\n>> you'd still need a button of some kind though so it knows to refresh\n>> it), or the POS can just provide a completely new payment request to any\n>> new connections on that same \"resource\" which use a different session key.\n>>\n>> I feel like the authentication of the payer to the payee in any future\n>> connections after they receive the session key from them (which was\n>> encrypted with the payees public key), comes from the fact that they are\n>> sending responses back that are encrypted using the session key they\n>> gave to the payee. The way I am seeing it is that the NFC tap or QR code\n>> scan is acting in addition to the visual name check on the signature\n>> verification in the wallet.\n> With a secure channel that identifies the parties by proximity, the\n> reason for the payment request signature is for the payer to obtain a\n> non-repudiation guarantee. But it also serves as a defense-in-depth\n> solution to a compromise of the channel (though does not offer a benefit\n> in the case of seller terminal/cert compromise).\n>\n>> If the certificate used isn't signed by a CA\n>> (self signed), it may be fine as long as you heard about it via NFC or\n>> QR code. I don't think it will require PKI and should still work\n>> wallet-to-wallet.\n> In that case the cert provides no benefit. A self-signed cert can be\n> repudiated and if the channel is compromised anyone can sign the payment\n> request.\n>\n>> It sounds like you are saying I'm proposing the customer is going to\n>> need a certificate signed by CA? If so, why?\n> This was not a serious proposal, it was to point out what would become\n> necessary if the payer could not be identified by proximity.\n>\n> In the case where a public key is reused, any payer can contact the BT\n> terminal and obtain the payment request. If the merchant can't rely on\n> proximity (i.e. can't trust the integrity of the NFC connection) then he\n> would have to fall back on some other means of identifying the payer. A\n> mutual verbal/visual confirmation could work, but the point of of NFC+BT\n> is elimination of that hassle.\n>\n> Yes, it sounds a bit wild, but I have seen on this list a serious\n> proposal to have people broadcast their photo, having the merchant\n> select them and push to them the payment request. Of course anyone can\n> spoof another's image, so at some point your image would need to be\n> certified, and hence a CA.\n>\n> I wouldn't go there, but was just making the point.\n>\n>> I don't need this for any https website I visit.\n> When you go to a web site you first establish a private communication.\n> The site doesn't know who you are (hopefully). Then you log on with your\n> secret, or proof of it, establishing who you are. Customer identity\n> problem solved.\n>\n> Or you create an account, providing your relevant identity information\n> which effectively becomes who you are to the site.\n>\n> Or you shop anonymously and when you go to check out they know that if\n> you pay, you get permission to direct the product shipment. And only you\n> can see the bill. This because your session binds your shopping to your\n> bill and payment.\n>\n> However when you go to the local adult shop to pick up some love toys,\n> the person at the counter has no idea who's asking their terminal for a\n> payment request. You having the shop's public cert doesn't help them\n> with that problem (nor does some anonymous signal sending them a photo\n> of you). Protecting your privacy ironically requires that they know who\n> you are - electronically. That means some sort of crazy consumer cert\n> (not sure that would fly in the love shop)... or trust in\n> (electronically anonymous) proximity.\n>\n>> It's not like the payee is sending anything to\n>> the payer that is private. The payment request only becomes private if\n>> something is actually received to it, otherwise, it is just discarded\n>> and it doesn't matter.\n> The payment request is private. It's a (potentially signed) proposal to\n> contract. It can contain interesting information.\n>\n>> Those bitcoin addresses are never used. It's just\n>> like a shopping cart on a website where someone aborts payment and\n>> cancels the order.\n> Very much so, but in that case your neighbors can't read your potential\n> transactions because your session is secured.\n>\n>> At one point I was thinking we could do something similar to Mike\n>> Hearn's suggestion in another recent e-mail where we re-use some\n>> existing part of the bitcoin URI to bootstrap some trust in a public key\n>> that the payee next sends via bluetooth after the NFC connection. Now\n>> that I'm reviewing my notes though, I can't see how this will work with\n>> a watching only wallet or if no backwards compatible (to BIP21) bitcoin\n>> address is presented in the URI (as Mike said).\n> It can work, but you just end up putting an additional value on the URI\n> (for watchers), requiring legacy addresses (for non-watchers), adding\n> P2SH scripts to the BT broadcast of the public key, and adding another\n> BT round trip to obtain a public key before establishing the session.\n>\n> A few bytes on the NFC tap is a non-issue, especially in comparison to\n> the additional complexity and BT traffic. Those choices are really all\n> based on providing private offline transaction support originating from\n> generally not private QR code scanning. But QR+BT is not the same as NFC+BT.\n>\n> Honestly I think it would be reasonable to use the technique with QR+BT,\n> accepting the limitations for the legacy system while not unduly\n> burdening NFC+BT just for an unachievable cross-consistency goal. Always\n> passing the key on the URL for NFC but giving a non-NFC wallet the\n> option to ask a BT terminal for a public key seems not just reasonable\n> but optimal if we want to support the QR+BT scenario.\n>\n> Note also that the BT-only scenario is different as well (see recent\n> discussion on Airbitz BLE wallet, resulting in the RedPhone-based\n> proposal). And finally, QR-only and NFC-only are also different. The\n> URIs can be consistent, but the communication protocol will vary.\n>\n>> What I was saying above about how you can stop accepting connections on\n>> that \"resource\" after a session key has been received by the first\n>> person could be problematic though. An evil person could just start\n>> making connections to every device they can, just to be mean, which\n>> would not allow the POS operator to receive payments from their real\n>> customers. If you do the other option I proposed, which is to just keep\n>> giving out new payment requests, you have other problems (on top of\n>> wasting addresses), which are that you can still have mean people giving\n>> you a denial of service attach on your hardware, or you could have an\n>> unusual situation where two people pay (don't know why they would do\n>> this though), so that is why I'm suggesting a manual tap or button press\n>> or switch turn being required.\n> Yes, but even with a manual button you could have these problems. The\n> data transfer needs to be proximate as well.\n>\n>> I guess as more of a abuse filter, a new \"resource\" could be given\n>> instead with each tap, and the POS would just ignore all requests to an\n>> inactive resource. You may say, why not send a new public key (as you\n>> suggested) instead of a new \"resource\" with each tap (or button press if\n>> using QR codes), and then you can skip the sending of a static public\n>> key (or public key fingerprint), and ignore any data that is not\n>> encrypted with that public key. Maybe that is a better idea because it\n>> will shorten the bitcoin URI. However, I don't think its required from a\n>> privacy standpoint, it primarily just aids in combining the public key\n>> fingerprint with the changing \"resource\" name used to filter abuse. Or,\n>> am I missing something?\n> I think this question is covered above.\n>\n>> So, after thinking through the abuse scenarios I mentioned above, I\n>> think I am agreeing with you, but the reason I'm writing all this is to\n>> hopefully just get some feedback on my logic to learn something from\n>> this discussion. I do think sending a unique public key over NFC has to\n>> be better than a unique session key. It adds one more step, but seems to\n>> help.\n> It doesn't actually add another step to the protocol, just some\n> different but simple code on each end. The only downside is that it\n> extends the NFC URL about 23 characters.\n>\n>> If we do this, can we then safely get rid of the h= parameter?\n> Absolutely, and I believe Mike ack'd this on a previous post today.\n>\n>> That should make Mike Hearn happy, and also may alleviate the base64url\n>> debate?\n> Others may not be aware of the encoding squabble (not sure if it\n> qualifies as debate). In the proposed URL, it affects the mac address\n> and the key:\n>\n> bitcoin:[address]?bt:<mac>/<key>\n>\n> base58:\n> bitcoin:?r=bt:12rAs9mM/234KF8hPkXq5pa6pT1wnJC3hVH7W6yB2Wtw24ztzGtBc4\n>\n> base64url:\n> bitcoin:?r=bt:ABBgss5s/A3xWlhB1GI_t2NMR9Zq9E47hZOzmZ6eZTS8sbq-liugh\n>\n> I prefer base58 because it's available to all bitcoin libraries, nearly\n> as compact as base64 (+1 byte in our example) and better standardized.\n> Some embedded device people might care about having to incorporate\n> base64 as well as base58.\n>\n> It's also better looking (no - or _ characters) and more consistent in\n> the proposed URL (all three values would be base58, as opposed to one\n> base58 and two base64url). There may be some idea that base58 is just\n> for bitcoin addresses (not true) or designed for humans... that's sort\n> of the point, but it's also good for URLs.\n>\n> e\n>\n>> On 02/23/2015 09:55 PM, Eric Voskuil wrote:\n>>> Andy, adding to my previous post below:\n>>>\n>>> On 02/23/2015 01:40 AM, Eric Voskuil wrote:\n>>>> On 02/22/2015 11:36 PM, Andy Schroder wrote:\n>>> ...\n>>>>> It's possible a really sophisticated modification could be done where\n>>>>> the attacker encrypts and decrypts the communication and then relays to\n>>>>> each party (without them knowing or any glitches detected), but I guess\n>>>>> I'm not sure how easy that would be on such a close proximity device?\n>>>> If the NFC tap is sufficiently private, privacy is easy to achieve for\n>>>> the subsequent communication. If it is not, privacy can be completely\n>>>> compromised. The question is only how much more difficult is the attack.\n>>>>\n>>>> With the public cert tap, the level of difficulty is much lower for\n>>>> capturing selected payment requests. The interloper no longer needs to\n>>>> invade the space of the NFC terminal and can instead impersonate the\n>>>> payer from a safe distance. Nobody gets paid, but privacy is\n>>>> compromised.\n>>> This problem in the preceding paragraph can be resolved by sending a\n>>> unique public key on each NFC tap. In that case an attacker would need\n>>> to monitor the NFC communication.\n>>>\n>>> The talk of wrapping the connection in SSL led me to believe you were\n>>> talking about a static public certificate. However that's not a\n>>> necessary assumption here and may not be what you intended.\n>>>\n>>>> The level of difficulty in the case where the interloper wants to taint\n>>>> transactions may appear lower, but it is not:\n>>>>\n>>>> With the session key tap the interloper must compromise the NFC location\n>>>> and then monitor the BT traffic. Monitoring BT traffic without being\n>>>> party to the connection is presumably not rocket surgery, but not\n>>>> standard BT design either.\n>>>>\n>>>> With the public cert tap the interloper must also compromise the NFC\n>>>> location and communicate over BT. Therefore the hardware and physical\n>>>> attack requirements are similar. The only added difficulty is that the\n>>>> attack on the NFC terminal attack is active (modifying the MAC address\n>>>> directing the payer to the BT service).\n>>> I believe your central claim was that the difference in the two\n>>> bootstrapping approaches (public key vs. session key) is that by using a\n>>> unique public key per tap, the attack requires an active vs. passive\n>>> attack on the NFC terminal. I just wanted to make clear here that I\n>>> agree with that assessment.\n>>>\n>>> The symmetric key approach is based on the idea that these attacks are\n>>> comparable in difficulty and otherwise identical in privacy loss.\n>>>\n>>> However, the difference in implementation amounts to about +23\n>>> additional encoded characters for the BT/LE URL, assuming use of the\n>>> secp256k1 curve for DHE. This is really not a material issue in the case\n>>> of the NFC tap. The entire URI+URL could be as small as:\n>>>\n>>> bitcoin:?r=bt:12rAs9mM/79bq48xJaMgqR9YNxnWhqHHM1JB52nxn6VFXBHTP2zrP\n>>>\n>>> In comparison to a symmetric key:\n>>>\n>>> bitcoin:?r=bt:12rAs9mM/12drXXUifSrRnXLGbXg8E\n>>>\n>>> It also does not change the protocol design or complexity at all - it\n>>> would just swap out an AES key for a secp256k1 public key.\n>>>\n>>> bitcoin:[address]?bt:<mac>/<key>\n>>>\n>>> If that gets us aligned I'm all for it.\n>>>\n>>>> However impersonating the payer is just a matter of software - no more\n>>>> difficult than the session key attack. In fact it may be much easier to\n>>>> implement, as the attack can use supported BT features because the\n>>>> attacker has directed the payer to connect to him and is connecting to\n>>>> the receiver as if he was a payer.\n>>>>\n>>>> But it gets worse for the public cert tap, since a more sophisticated\n>>>> attacker can set himself up in the same position without subverting the\n>>>> NFC terminal at all. By broadcasting a more powerful BT service on the\n>>>> same advertised MAC address, the attacker can capture traffic and relay\n>>>> it to the intended service.\n>>> I'm retracting the last paragraph, since the interloper, without\n>>> invading the NFC connection (by substituting the public cert), could not\n>>> read the relayed traffic. It was getting late :/\n>>>\n>>>> So in sum, reliance on a public cert makes the communication less\n>>>> private under the same physical set of constraints. The difference\n>>>> results from the receiver allowing non-proximate payers to impersonate\n>>>> proximate payers from a distance by generating their own session keys\n>>>> and submitting them over BT.\n>>> e\n>>>\n>>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/6bf41b43/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/6bf41b43/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-24T22:14:51",
                "message_text_only": "On 02/24/2015 11:49 AM, Andy Schroder wrote:\n> Hello,\n> \n> I think were talking about a lot of the same things. There is one key\n> piece of information that I was not thinking about until you made it\n> clear. Why the payee needs to identify the payer. In my fuel pump\n> application, they really don't, so I wasn't thinking closely about these\n> other situations. With my fuel pump, it won't even let you do anything\n> until you sign a transaction and submit it. So, the payment request\n> contains no personal information, it's just a request for payment, and\n> not for anything specific. It doesn't know or care what you are going to\n> buy until you make a prepayment, because there is no use in trying to\n> start doing business without a signed transaction. This approach\n> minimizes risk because once you dispense a fuel, or anything else, it's\n> not like you can easily give it back if you happened to not have any\n> funds. It also makes it a higher chance for a confirmation before the\n> customer leaves. Other transactions have similar post payment\n> traditions, like a restaurant (not fast food), where the seller doesn't\n> know if you actually have enough money until you've already consumed the\n> food, but this work flow seems to be a culturally driven one rather than\n> risk driven.\n> \n> In the discussion about an https website, there are many websites where\n> no login or authentication by the client required to have a private\n> connection. With a shopping website though, the customer can identify\n> themselves without logging in by saying (in band) what they are\n> intending to buy after the private connection has been established. At a\n> cash register in person the items being purchased have no tie to the\n> customer. The items being purchased were communicated to the seller out\n> of band (in real life) and insecurely to establish that link. You are\n> trying to make a tie between that list of items and the buyer\n> separately, and that is why some unique identifier needs to be\n> transmitted via NFC.\n> \n> Stepping a bit back: I guess I'm wondering if it would be useful to\n> encourage an opposite work flow where a micro payment channel is setup\n> for most purchases. For example, if I go to the grocery store, it\n> usually takes a minute or so to check out. If I immediately tap and open\n> up a payment channel with the store when I start checkout, rather than\n> finish, there can be more network propagation of that transaction while\n> they are scanning all the items. They'll see the channel is open and\n> start adding all the items I want to buy to that micro payment channel.\n> I'm identified because I made a payment, not because I've transmitted a\n> unique resource or used a unique public key to encrypt communication. A\n> payment terminal would not allow for new payment channels to be open\n> until the currently active one is closed. If I don't have enough funds\n> left in the payment channel, they just stop scanning items. There may be\n> some additional privacy implications of setting up micro payment\n> channels all the time for everyday purchases. It also may not work for\n> every sales case, so we may still need some way to authenticate the\n> payer with a unique identifier. So, maybe we don't want to do this, but\n> it is just a thought to consider.\n\nIt's an interesting thought. As you say, it may be more of a cultural\nthan technical issue.\n\n> So, unless someone thinks what I am proposing in my previous paragraph\n> has any potential (as a complete solution, not a complement to\n> solutions), the plan is the following:\n> \n>   * Get rid of the \"h=\" parameter\n\nAgree.\n\n>   * Add a \"s=\" parameter that uses a unique public key for each session.\n>     This public key identifies the payee to the payer and payer to the\n>     payee.\n\nThis would be the simple model, which just tacks on another parameter to\nthe bitcoin URL:\n\nbitcoin:[address]?bt=<mac>&s=<key>\n\nBut we should also look at the more flexible \"r#\" approach from your\nexisting TBIPs, which would yield:\n\nbitcoin:[address]?r=bt:<mac>/<key>\n\nand incorporate the \"payment_url\" list.\n\n>   * Use a base58 encoding to save space and reduce the character set\n>     slightly.\n\n:)\n\n>   * Get rid of the resource? If a terminal is accepting payment from\n>     multiple customers simultaneously, it should be smart enough to\n>     distinguish between customers based on the public key they are\n>     encrypting the data with. Is this approach feasible?\n\nYes, it is not necessary on the URL. But an id is useful in helping the\nBT terminal identify the session without having to try all of its\noutstanding keys until it finds one that works.\n\nI proposed that the resource name (\"session id\" may be a better name) be\ndeterministically derived from the session key. Given the design change\nto pass an EC public key it would need to be derived from that key (not\nfrom the session key because the receiver would not have a copy before\ndecrypting the first BT message). So any function on the public key that\nreduces it to a smaller length, fixed width should be fine. Hashing it\nfirst may be better as is prevents disclosure of any bits of the public\nkey, which should be treated as a secret during the session.\n\n>   * When you said a new public key for each tap, do you see that as\n>     every single tap, or do you consider multiple taps from the same\n>     customer the same tap?\n\nYes, since there would be no other way to distinguish between customers\nin some scenarios and this is the safest approach. We certainly won't\nrun out of numbers, and unused sessions can be discarded based on any\nnumber of criteria, including discarding all but the most recent. That\nmay may be sufficient for your vending machines given there's little if\nany call for parallelism.\n\ne\n\n> On 02/24/2015 06:28 AM, Eric Voskuil wrote:\n>> On 02/23/2015 09:53 PM, Andy Schroder wrote:\n>>> I was saying provide a public key via NFC (or a public key fingerprint\n>>> and then send the full public key over bluetooth). Instead of providing\n>>> a new public key on each tap, why can't the payee just stop accepting\n>>> connections from new parties on that \"resource\" after a session key has\n>>> been received from the first person?\n>> Because the presumption was that there was not an additional secret in\n>> the URI. If the public key is reused then anyone can spoof a payer and\n>> obtain payment requests.\n>>\n>> Adding a secret to the URI can resolve this, as long as it is encrypted\n>> with the public key before being transmitted back to BT. Otherwise the\n>> secret can be intercepted and replayed to the terminal, encrypted with\n>> the well-known public key.\n>>\n>> So if you want to treat the \"resource\" as a secret this would work.\n>> However the resource was designed as a public session identifier,\n>> leading the byte stream. This changes it to private session identifier,\n>> which loses some utility.\n>>\n>> Also, reuse of the public key introduces a forward secrecy problem and\n>> the potential for persistent seller impersonation in the case of\n>> undiscovered key compromise.\n>>\n>> But there's really no benefit to reusing the key. An ephemeral key\n>> resolves these issues and can also seed the public resource name.\n>>\n>>> If the person decides to have there\n>>> friend or family pay for them instead and cancel the payment, they could\n>>> just hit cancel on the POS or something (on my fuel pump I have a switch\n>>> that needs to be turned, the purpose of this is to avoid wasting too\n>>> many addresses)\n>> Don't you have someone stop by the pump once a week and empty out the\n>> addresses? :)\n>>\n>>> and/or do another NFC tap (if you're providing QR codes\n>>> you'd still need a button of some kind though so it knows to refresh\n>>> it), or the POS can just provide a completely new payment request to any\n>>> new connections on that same \"resource\" which use a different session key.\n>>>\n>>> I feel like the authentication of the payer to the payee in any future\n>>> connections after they receive the session key from them (which was\n>>> encrypted with the payees public key), comes from the fact that they are\n>>> sending responses back that are encrypted using the session key they\n>>> gave to the payee. The way I am seeing it is that the NFC tap or QR code\n>>> scan is acting in addition to the visual name check on the signature\n>>> verification in the wallet.\n>> With a secure channel that identifies the parties by proximity, the\n>> reason for the payment request signature is for the payer to obtain a\n>> non-repudiation guarantee. But it also serves as a defense-in-depth\n>> solution to a compromise of the channel (though does not offer a benefit\n>> in the case of seller terminal/cert compromise).\n>>\n>>> If the certificate used isn't signed by a CA\n>>> (self signed), it may be fine as long as you heard about it via NFC or\n>>> QR code. I don't think it will require PKI and should still work\n>>> wallet-to-wallet.\n>> In that case the cert provides no benefit. A self-signed cert can be\n>> repudiated and if the channel is compromised anyone can sign the payment\n>> request.\n>>\n>>> It sounds like you are saying I'm proposing the customer is going to\n>>> need a certificate signed by CA? If so, why? \n>> This was not a serious proposal, it was to point out what would become\n>> necessary if the payer could not be identified by proximity.\n>>\n>> In the case where a public key is reused, any payer can contact the BT\n>> terminal and obtain the payment request. If the merchant can't rely on\n>> proximity (i.e. can't trust the integrity of the NFC connection) then he\n>> would have to fall back on some other means of identifying the payer. A\n>> mutual verbal/visual confirmation could work, but the point of of NFC+BT\n>> is elimination of that hassle.\n>>\n>> Yes, it sounds a bit wild, but I have seen on this list a serious\n>> proposal to have people broadcast their photo, having the merchant\n>> select them and push to them the payment request. Of course anyone can\n>> spoof another's image, so at some point your image would need to be\n>> certified, and hence a CA.\n>>\n>> I wouldn't go there, but was just making the point.\n>>\n>>> I don't need this for any https website I visit.\n>> When you go to a web site you first establish a private communication.\n>> The site doesn't know who you are (hopefully). Then you log on with your\n>> secret, or proof of it, establishing who you are. Customer identity\n>> problem solved.\n>>\n>> Or you create an account, providing your relevant identity information\n>> which effectively becomes who you are to the site.\n>>\n>> Or you shop anonymously and when you go to check out they know that if\n>> you pay, you get permission to direct the product shipment. And only you\n>> can see the bill. This because your session binds your shopping to your\n>> bill and payment.\n>>\n>> However when you go to the local adult shop to pick up some love toys,\n>> the person at the counter has no idea who's asking their terminal for a\n>> payment request. You having the shop's public cert doesn't help them\n>> with that problem (nor does some anonymous signal sending them a photo\n>> of you). Protecting your privacy ironically requires that they know who\n>> you are - electronically. That means some sort of crazy consumer cert\n>> (not sure that would fly in the love shop)... or trust in\n>> (electronically anonymous) proximity.\n>>\n>>> It's not like the payee is sending anything to\n>>> the payer that is private. The payment request only becomes private if\n>>> something is actually received to it, otherwise, it is just discarded\n>>> and it doesn't matter.\n>> The payment request is private. It's a (potentially signed) proposal to\n>> contract. It can contain interesting information.\n>>\n>>> Those bitcoin addresses are never used. It's just\n>>> like a shopping cart on a website where someone aborts payment and\n>>> cancels the order.\n>> Very much so, but in that case your neighbors can't read your potential\n>> transactions because your session is secured.\n>>\n>>> At one point I was thinking we could do something similar to Mike\n>>> Hearn's suggestion in another recent e-mail where we re-use some\n>>> existing part of the bitcoin URI to bootstrap some trust in a public key\n>>> that the payee next sends via bluetooth after the NFC connection. Now\n>>> that I'm reviewing my notes though, I can't see how this will work with\n>>> a watching only wallet or if no backwards compatible (to BIP21) bitcoin\n>>> address is presented in the URI (as Mike said).\n>> It can work, but you just end up putting an additional value on the URI\n>> (for watchers), requiring legacy addresses (for non-watchers), adding\n>> P2SH scripts to the BT broadcast of the public key, and adding another\n>> BT round trip to obtain a public key before establishing the session.\n>>\n>> A few bytes on the NFC tap is a non-issue, especially in comparison to\n>> the additional complexity and BT traffic. Those choices are really all\n>> based on providing private offline transaction support originating from\n>> generally not private QR code scanning. But QR+BT is not the same as NFC+BT.\n>>\n>> Honestly I think it would be reasonable to use the technique with QR+BT,\n>> accepting the limitations for the legacy system while not unduly\n>> burdening NFC+BT just for an unachievable cross-consistency goal. Always\n>> passing the key on the URL for NFC but giving a non-NFC wallet the\n>> option to ask a BT terminal for a public key seems not just reasonable\n>> but optimal if we want to support the QR+BT scenario.\n>>\n>> Note also that the BT-only scenario is different as well (see recent\n>> discussion on Airbitz BLE wallet, resulting in the RedPhone-based\n>> proposal). And finally, QR-only and NFC-only are also different. The\n>> URIs can be consistent, but the communication protocol will vary.\n>>\n>>> What I was saying above about how you can stop accepting connections on\n>>> that \"resource\" after a session key has been received by the first\n>>> person could be problematic though. An evil person could just start\n>>> making connections to every device they can, just to be mean, which\n>>> would not allow the POS operator to receive payments from their real\n>>> customers. If you do the other option I proposed, which is to just keep\n>>> giving out new payment requests, you have other problems (on top of\n>>> wasting addresses), which are that you can still have mean people giving\n>>> you a denial of service attach on your hardware, or you could have an\n>>> unusual situation where two people pay (don't know why they would do\n>>> this though), so that is why I'm suggesting a manual tap or button press\n>>> or switch turn being required.\n>> Yes, but even with a manual button you could have these problems. The\n>> data transfer needs to be proximate as well.\n>>\n>>> I guess as more of a abuse filter, a new \"resource\" could be given\n>>> instead with each tap, and the POS would just ignore all requests to an\n>>> inactive resource. You may say, why not send a new public key (as you\n>>> suggested) instead of a new \"resource\" with each tap (or button press if\n>>> using QR codes), and then you can skip the sending of a static public\n>>> key (or public key fingerprint), and ignore any data that is not\n>>> encrypted with that public key. Maybe that is a better idea because it\n>>> will shorten the bitcoin URI. However, I don't think its required from a\n>>> privacy standpoint, it primarily just aids in combining the public key\n>>> fingerprint with the changing \"resource\" name used to filter abuse. Or,\n>>> am I missing something?\n>> I think this question is covered above.\n>>\n>>> So, after thinking through the abuse scenarios I mentioned above, I\n>>> think I am agreeing with you, but the reason I'm writing all this is to\n>>> hopefully just get some feedback on my logic to learn something from\n>>> this discussion. I do think sending a unique public key over NFC has to\n>>> be better than a unique session key. It adds one more step, but seems to\n>>> help. \n>> It doesn't actually add another step to the protocol, just some\n>> different but simple code on each end. The only downside is that it\n>> extends the NFC URL about 23 characters.\n>>\n>>> If we do this, can we then safely get rid of the h= parameter?\n>> Absolutely, and I believe Mike ack'd this on a previous post today.\n>>\n>>> That should make Mike Hearn happy, and also may alleviate the base64url\n>>> debate?\n>> Others may not be aware of the encoding squabble (not sure if it\n>> qualifies as debate). In the proposed URL, it affects the mac address\n>> and the key:\n>>\n>> bitcoin:[address]?bt:<mac>/<key>\n>>\n>> base58:\n>> bitcoin:?r=bt:12rAs9mM/234KF8hPkXq5pa6pT1wnJC3hVH7W6yB2Wtw24ztzGtBc4\n>>\n>> base64url:\n>> bitcoin:?r=bt:ABBgss5s/A3xWlhB1GI_t2NMR9Zq9E47hZOzmZ6eZTS8sbq-liugh\n>>\n>> I prefer base58 because it's available to all bitcoin libraries, nearly\n>> as compact as base64 (+1 byte in our example) and better standardized.\n>> Some embedded device people might care about having to incorporate\n>> base64 as well as base58.\n>>\n>> It's also better looking (no - or _ characters) and more consistent in\n>> the proposed URL (all three values would be base58, as opposed to one\n>> base58 and two base64url). There may be some idea that base58 is just\n>> for bitcoin addresses (not true) or designed for humans... that's sort\n>> of the point, but it's also good for URLs.\n>>\n>> e\n>>\n>>> On 02/23/2015 09:55 PM, Eric Voskuil wrote:\n>>>> Andy, adding to my previous post below:\n>>>>\n>>>> On 02/23/2015 01:40 AM, Eric Voskuil wrote:\n>>>>> On 02/22/2015 11:36 PM, Andy Schroder wrote:\n>>>> ...\n>>>>>> It's possible a really sophisticated modification could be done where\n>>>>>> the attacker encrypts and decrypts the communication and then relays to\n>>>>>> each party (without them knowing or any glitches detected), but I guess\n>>>>>> I'm not sure how easy that would be on such a close proximity device?\n>>>>> If the NFC tap is sufficiently private, privacy is easy to achieve for\n>>>>> the subsequent communication. If it is not, privacy can be completely\n>>>>> compromised. The question is only how much more difficult is the attack.\n>>>>>\n>>>>> With the public cert tap, the level of difficulty is much lower for\n>>>>> capturing selected payment requests. The interloper no longer needs to\n>>>>> invade the space of the NFC terminal and can instead impersonate the\n>>>>> payer from a safe distance. Nobody gets paid, but privacy is\n>>>>> compromised.\n>>>> This problem in the preceding paragraph can be resolved by sending a\n>>>> unique public key on each NFC tap. In that case an attacker would need\n>>>> to monitor the NFC communication.\n>>>>\n>>>> The talk of wrapping the connection in SSL led me to believe you were\n>>>> talking about a static public certificate. However that's not a\n>>>> necessary assumption here and may not be what you intended.\n>>>>\n>>>>> The level of difficulty in the case where the interloper wants to taint\n>>>>> transactions may appear lower, but it is not:\n>>>>>\n>>>>> With the session key tap the interloper must compromise the NFC location\n>>>>> and then monitor the BT traffic. Monitoring BT traffic without being\n>>>>> party to the connection is presumably not rocket surgery, but not\n>>>>> standard BT design either.\n>>>>>\n>>>>> With the public cert tap the interloper must also compromise the NFC\n>>>>> location and communicate over BT. Therefore the hardware and physical\n>>>>> attack requirements are similar. The only added difficulty is that the\n>>>>> attack on the NFC terminal attack is active (modifying the MAC address\n>>>>> directing the payer to the BT service).\n>>>> I believe your central claim was that the difference in the two\n>>>> bootstrapping approaches (public key vs. session key) is that by using a\n>>>> unique public key per tap, the attack requires an active vs. passive\n>>>> attack on the NFC terminal. I just wanted to make clear here that I\n>>>> agree with that assessment.\n>>>>\n>>>> The symmetric key approach is based on the idea that these attacks are\n>>>> comparable in difficulty and otherwise identical in privacy loss.\n>>>>\n>>>> However, the difference in implementation amounts to about +23\n>>>> additional encoded characters for the BT/LE URL, assuming use of the\n>>>> secp256k1 curve for DHE. This is really not a material issue in the case\n>>>> of the NFC tap. The entire URI+URL could be as small as:\n>>>>\n>>>> bitcoin:?r=bt:12rAs9mM/79bq48xJaMgqR9YNxnWhqHHM1JB52nxn6VFXBHTP2zrP\n>>>>\n>>>> In comparison to a symmetric key:\n>>>>\n>>>> bitcoin:?r=bt:12rAs9mM/12drXXUifSrRnXLGbXg8E\n>>>>\n>>>> It also does not change the protocol design or complexity at all - it\n>>>> would just swap out an AES key for a secp256k1 public key.\n>>>>\n>>>> bitcoin:[address]?bt:<mac>/<key>\n>>>>\n>>>> If that gets us aligned I'm all for it.\n>>>>\n>>>>> However impersonating the payer is just a matter of software - no more\n>>>>> difficult than the session key attack. In fact it may be much easier to\n>>>>> implement, as the attack can use supported BT features because the\n>>>>> attacker has directed the payer to connect to him and is connecting to\n>>>>> the receiver as if he was a payer.\n>>>>>\n>>>>> But it gets worse for the public cert tap, since a more sophisticated\n>>>>> attacker can set himself up in the same position without subverting the\n>>>>> NFC terminal at all. By broadcasting a more powerful BT service on the\n>>>>> same advertised MAC address, the attacker can capture traffic and relay\n>>>>> it to the intended service.\n>>>> I'm retracting the last paragraph, since the interloper, without\n>>>> invading the NFC connection (by substituting the public cert), could not\n>>>> read the relayed traffic. It was getting late :/\n>>>>\n>>>>> So in sum, reliance on a public cert makes the communication less\n>>>>> private under the same physical set of constraints. The difference\n>>>>> results from the receiver allowing non-proximate payers to impersonate\n>>>>> proximate payers from a distance by generating their own session keys\n>>>>> and submitting them over BT.\n>>>> e\n>>>>\n>>>\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/fbcba14b/attachment.sig>"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-24T22:50:46",
                "message_text_only": "We can change \"resource\" to \"Session ID\" if you want.\n\nI think the URL scheme should be:\n\nbitcoin:[address]?r=bt:<mac>&s=<PublicKey>\n\nBut when connecting to the mac, the client indicates the SessionID in \nthe header, and as you say, SessionID is derived in some way from PublicKey.\n\nThis is a slightly different format than both of your suggestions below, \nbut seems to make more sense based on what you said in your entire \nmessage. The other thing is it can be used with more protocols without \ntaking up more space in the URL.\n\nHowever, by loosing the h= parameter, I think we are now loosing some \nbenefit it brought to https based connections if the customer doesn't \nwant to use bluetooth. Right?\n\nAlso, you talk about a new public key (and session ID) for each tap. I \nguess I'm wondering about this though. If the public key is compromised \non the first tap, isn't their payment request already compromised?\n\n\n\n\nSince we are securing everything, can we change the message header \nformat from what Schildbach's bitcoin wallet implements to something \nmore consistent? Maybe we can create a new UUID for this secure service \nso Schildbach's bitcoin wallet can still maintain backwards compatibility.\n\n\n\n\nAndy Schroder\n\nOn 02/24/2015 05:14 PM, Eric Voskuil wrote:\n>>    * Add a \"s=\" parameter that uses a unique public key for each session.\n>>      This public key identifies the payee to the payer and payer to the\n>>      payee.\n> This would be the simple model, which just tacks on another parameter to\n> the bitcoin URL:\n>\n> bitcoin:[address]?bt=<mac>&s=<key>\n>\n> But we should also look at the more flexible \"r#\" approach from your\n> existing TBIPs, which would yield:\n>\n> bitcoin:[address]?r=bt:<mac>/<key>\n>\n> and incorporate the \"payment_url\" list.\n>\n>>    * Use a base58 encoding to save space and reduce the character set\n>>      slightly.\n> :)\n>\n>>    * Get rid of the resource? If a terminal is accepting payment from\n>>      multiple customers simultaneously, it should be smart enough to\n>>      distinguish between customers based on the public key they are\n>>      encrypting the data with. Is this approach feasible?\n> Yes, it is not necessary on the URL. But an id is useful in helping the\n> BT terminal identify the session without having to try all of its\n> outstanding keys until it finds one that works.\n>\n> I proposed that the resource name (\"session id\" may be a better name) be\n> deterministically derived from the session key. Given the design change\n> to pass an EC public key it would need to be derived from that key (not\n> from the session key because the receiver would not have a copy before\n> decrypting the first BT message). So any function on the public key that\n> reduces it to a smaller length, fixed width should be fine. Hashing it\n> first may be better as is prevents disclosure of any bits of the public\n> key, which should be treated as a secret during the session.\n>\n>>    * When you said a new public key for each tap, do you see that as\n>>      every single tap, or do you consider multiple taps from the same\n>>      customer the same tap?\n> Yes, since there would be no other way to distinguish between customers\n> in some scenarios and this is the safest approach. We certainly won't\n> run out of numbers, and unused sessions can be discarded based on any\n> number of criteria, including discarding all but the most recent. That\n> may may be sufficient for your vending machines given there's little if\n> any call for parallelism.\n>\n> e\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/a9fbf987/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-25T02:09:42",
                "message_text_only": "On 02/24/2015 02:50 PM, Andy Schroder wrote:\n> We can change \"resource\" to \"Session ID\" if you want.\n> \n> I think the URL scheme should be:\n> \n> bitcoin:[address]?r=bt:<mac>&s=<PublicKey>\n\nThis is a question of proper URL semantics, as applied to the \"bt\" scheme.\n\nFrom rfc3986 [Uniform Resource Identifier (URI): Generic Syntax]:\n\n\"The path component contains data, usually organized in hierarchical\nform, that, along with data in the non-hierarchical query component\n(Section 3.4), serves to identify a resource within the scope of the\nURI's scheme and naming authority (if any).\"\n\n...\n\n\"The query component contains non-hierarchical data that, along with\ndata in the path component (Section 3.3), serves to identify a resource\nwithin the scope of the URI's scheme and naming authority (if any). The\nquery component is indicated by the first question mark (\"?\") character\nand terminated by a number sign (\"#\") character or by the end of the URI.\"\n\nhttps://tools.ietf.org/html/rfc3986#section-3.3\n\nThe question therefore is whether <key> is (1) relative to the path\n(hierarchical) or (2) independent of the path and instead relative to\nthe scheme and naming authority.\n\nThe \"bt\" scheme does not include a naming authority, and as such the\nquestion is simply whether <key> is relative to \"bt\" or relative to the\npath, which is <mac>. Quite clearly <key> is valid only in the context\nof <mac>, not relevant to all <mac>s.\n\nAs such one must conclude that the proper form is:\n\nbt:<mac>/<key>\n\n> But when connecting to the mac, the client indicates the SessionID in\n> the header, and as you say, SessionID is derived in some way from\n> PublicKey.\n\nYes.\n\n> This is a slightly different format than both of your suggestions below,\n> but seems to make more sense based on what you said in your entire\n> message. The other thing is it can be used with more protocols without\n> taking up more space in the URL.\n> \n> However, by loosing the h= parameter, I think we are now loosing some\n> benefit it brought to https based connections if the customer doesn't\n> want to use bluetooth. Right?\n\nI don't believe that the BIP-70 protocol over https has any need for the\nparameter. It was only useful because the NFC/BT session wasn't secured.\nSo I don't think anything is lost.\n\n> Also, you talk about a new public key (and session ID) for each tap. I\n> guess I'm wondering about this though. If the public key is compromised\n> on the first tap, isn't their payment request already compromised?\n\nYes, but that is not the problem that non-reuse is designed to resolve.\n\nReuse of the public key creates a forward secrecy problem. If 1000\nsessions are recorded, and later the private key associated with the\nreused public key is compromized, all of the sessions are retroactively\ncompromised.\n\nAnother problem is persistent impersonation. If the one associated\nprivate key is compromised, and nobody knows it, the attacker can not\nonly monitor all transactions but can selectively steal payments (if\nthey aren't signed and verified). This is BTW also a good reason to not\nuse HD generation of these session keys.\n\nAnother problem is that any payer can use the well-known public key to\nobtain payment requests.\n\nAnother problem is that without a unique public key there is no unique\nsession id, so that would need to be added explicitly on the URI.\n\n> Since we are securing everything, can we change the message header\n> format from what Schildbach's bitcoin wallet implements to something\n> more consistent?\n\nCould you spell this out, I'm not familiar with the implementation, just\nthe proposals.\n\n> Maybe we can create a new UUID for this secure service\n> so Schildbach's bitcoin wallet can still maintain backwards compatibility.\n\nThat may be necessary depending on the implementation of existing\nterminals, but I'm not familiar enough to speculate.\n\ne\n\n> On 02/24/2015 05:14 PM, Eric Voskuil wrote:\n>>>    * Add a \"s=\" parameter that uses a unique public key for each\n>>> session.\n>>>      This public key identifies the payee to the payer and payer to the\n>>>      payee.\n>> This would be the simple model, which just tacks on another parameter to\n>> the bitcoin URL:\n>>\n>> bitcoin:[address]?bt=<mac>&s=<key>\n>>\n>> But we should also look at the more flexible \"r#\" approach from your\n>> existing TBIPs, which would yield:\n>>\n>> bitcoin:[address]?r=bt:<mac>/<key>\n>>\n>> and incorporate the \"payment_url\" list.\n>>\n>>>    * Use a base58 encoding to save space and reduce the character set\n>>>      slightly.\n>> :)\n>>\n>>>    * Get rid of the resource? If a terminal is accepting payment from\n>>>      multiple customers simultaneously, it should be smart enough to\n>>>      distinguish between customers based on the public key they are\n>>>      encrypting the data with. Is this approach feasible?\n>> Yes, it is not necessary on the URL. But an id is useful in helping the\n>> BT terminal identify the session without having to try all of its\n>> outstanding keys until it finds one that works.\n>>\n>> I proposed that the resource name (\"session id\" may be a better name) be\n>> deterministically derived from the session key. Given the design change\n>> to pass an EC public key it would need to be derived from that key (not\n>> from the session key because the receiver would not have a copy before\n>> decrypting the first BT message). So any function on the public key that\n>> reduces it to a smaller length, fixed width should be fine. Hashing it\n>> first may be better as is prevents disclosure of any bits of the public\n>> key, which should be treated as a secret during the session.\n>>\n>>>    * When you said a new public key for each tap, do you see that as\n>>>      every single tap, or do you consider multiple taps from the same\n>>>      customer the same tap?\n>> Yes, since there would be no other way to distinguish between customers\n>> in some scenarios and this is the safest approach. We certainly won't\n>> run out of numbers, and unused sessions can be discarded based on any\n>> number of criteria, including discarding all but the most recent. That\n>> may may be sufficient for your vending machines given there's little if\n>> any call for parallelism.\n>>\n>> e\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/423cca65/attachment.sig>"
            },
            {
                "author": "Andy Schroder",
                "date": "2015-02-28T09:46:15",
                "message_text_only": "Manually quoting a reply from Andreas that was sent privately while the \ne-mail list was 2 days delayed delivering messages ....\n\nOn 02/25/2015 02:45 AM, Andreas Schildbach wrote:\n> Bear in mind that the \"bt:\" scheme is already in use by ~700.000\n> installations. If we change the protocol except just wrapping a secure\n> layer, we should change the scheme to for example \"bs:\" (Bluetooth secure).\n\nThis bs: is not a bad idea. Is bts: any better/clearer than bs:?\n\n>\n> That said, I don't like the idea to fold the resource name and the\n> session key into one. Resource names can be shared by multiple\n> protocols, for example a merchant may publish payment requests under\n> bt:<mac>/r1*and*  https://<domain>/r1. If you want to save space and\n> don't need resources, you can always just use bt:<mac> and a default\n> resource (bt:<mac>/) is assumed.\n\nI'm going to agree with Andreas on this. The other thing is we are \nmaking the resource name derived from the public key, so we are not even \ndirectly sending the resource name.\n\n>\n> Have we decided on the use (or non-use) of a DHKE (or similar) protocol\n> like Mike suggested?\n\n\nWe are planning to send a unique public key of the payee via NFC. See \nother e-mails now that the e-mail list finally forwarded them through \nthe other day.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow for Eric's e-mail... More below.\n\n\nOn 02/24/2015 09:09 PM, Eric Voskuil wrote:\n> On 02/24/2015 02:50 PM, Andy Schroder wrote:\n>> We can change \"resource\" to \"Session ID\" if you want.\n>>\n>> I think the URL scheme should be:\n>>\n>> bitcoin:[address]?r=bt:<mac>&s=<PublicKey>\n> This is a question of proper URL semantics, as applied to the \"bt\" scheme.\n>\n>  From rfc3986 [Uniform Resource Identifier (URI): Generic Syntax]:\n>\n> \"The path component contains data, usually organized in hierarchical\n> form, that, along with data in the non-hierarchical query component\n> (Section 3.4), serves to identify a resource within the scope of the\n> URI's scheme and naming authority (if any).\"\n>\n> ...\n>\n> \"The query component contains non-hierarchical data that, along with\n> data in the path component (Section 3.3), serves to identify a resource\n> within the scope of the URI's scheme and naming authority (if any). The\n> query component is indicated by the first question mark (\"?\") character\n> and terminated by a number sign (\"#\") character or by the end of the URI.\"\n>\n> https://tools.ietf.org/html/rfc3986#section-3.3\n>\n> The question therefore is whether <key> is (1) relative to the path\n> (hierarchical) or (2) independent of the path and instead relative to\n> the scheme and naming authority.\n>\n> The \"bt\" scheme does not include a naming authority, and as such the\n> question is simply whether <key> is relative to \"bt\" or relative to the\n> path, which is <mac>. Quite clearly <key> is valid only in the context\n> of <mac>, not relevant to all <mac>s.\n>\n> As such one must conclude that the proper form is:\n>\n> bt:<mac>/<key>\n\n\nSee my comments above.\n\n\n>\n>> But when connecting to the mac, the client indicates the SessionID in\n>> the header, and as you say, SessionID is derived in some way from\n>> PublicKey.\n> Yes.\n>\n>> This is a slightly different format than both of your suggestions below,\n>> but seems to make more sense based on what you said in your entire\n>> message. The other thing is it can be used with more protocols without\n>> taking up more space in the URL.\n>>\n>> However, by loosing the h= parameter, I think we are now loosing some\n>> benefit it brought to https based connections if the customer doesn't\n>> want to use bluetooth. Right?\n> I don't believe that the BIP-70 protocol over https has any need for the\n> parameter. It was only useful because the NFC/BT session wasn't secured.\n> So I don't think anything is lost.\n\nThis may be true. Andreas, do you agree? I feel like there was something \nin your app where it did not currently compare the domain name to domain \nname the digital signature in the payment request used though. Maybe \nthis was only for bluetooth though? However, can we trust DNS though? \nSeems like it is not too hard to get an alternate signed certificate for \na domain name, and if you can serve false DNS and/or change TCP/IP \nrouting, then your secure link can break down?\n\n\n\n>\n>> Also, you talk about a new public key (and session ID) for each tap. I\n>> guess I'm wondering about this though. If the public key is compromised\n>> on the first tap, isn't their payment request already compromised?\n> Yes, but that is not the problem that non-reuse is designed to resolve.\n>\n> Reuse of the public key creates a forward secrecy problem. If 1000\n> sessions are recorded, and later the private key associated with the\n> reused public key is compromized, all of the sessions are retroactively\n> compromised.\n>\n> Another problem is persistent impersonation. If the one associated\n> private key is compromised, and nobody knows it, the attacker can not\n> only monitor all transactions but can selectively steal payments (if\n> they aren't signed and verified). This is BTW also a good reason to not\n> use HD generation of these session keys.\n>\n> Another problem is that any payer can use the well-known public key to\n> obtain payment requests.\n>\n> Another problem is that without a unique public key there is no unique\n> session id, so that would need to be added explicitly on the URI.\n\n\n\nI get what you are saying, but I don't know that 2 taps with the same \npublic key is the same as 1000 uses of the same public key?\n\n\n\n>\n>> Since we are securing everything, can we change the message header\n>> format from what Schildbach's bitcoin wallet implements to something\n>> more consistent?\n> Could you spell this out, I'm not familiar with the implementation, just\n> the proposals.\n\n\nIf you'll check the proposed specification, the headers in each message \n(before the serialized payment request data is sent), are consistent \nfrom message to message.\n\nhttps://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki#Specification\n\n\n\n\n>\n>> Maybe we can create a new UUID for this secure service\n>> so Schildbach's bitcoin wallet can still maintain backwards compatibility.\n> That may be necessary depending on the implementation of existing\n> terminals, but I'm not familiar enough to speculate.\n\nI think we probably also want to combine new UUID's with Schildbach's \nsuggestion (above) to use a new \"bs:\" (which I suggested maybe \"bts:\") \nprotocol scheme.\n\n\n\n>\n> e\n>\n>> On 02/24/2015 05:14 PM, Eric Voskuil wrote:\n>>>>     * Add a \"s=\" parameter that uses a unique public key for each\n>>>> session.\n>>>>       This public key identifies the payee to the payer and payer to the\n>>>>       payee.\n>>> This would be the simple model, which just tacks on another parameter to\n>>> the bitcoin URL:\n>>>\n>>> bitcoin:[address]?bt=<mac>&s=<key>\n>>>\n>>> But we should also look at the more flexible \"r#\" approach from your\n>>> existing TBIPs, which would yield:\n>>>\n>>> bitcoin:[address]?r=bt:<mac>/<key>\n>>>\n>>> and incorporate the \"payment_url\" list.\n>>>\n>>>>     * Use a base58 encoding to save space and reduce the character set\n>>>>       slightly.\n>>> :)\n>>>\n>>>>     * Get rid of the resource? If a terminal is accepting payment from\n>>>>       multiple customers simultaneously, it should be smart enough to\n>>>>       distinguish between customers based on the public key they are\n>>>>       encrypting the data with. Is this approach feasible?\n>>> Yes, it is not necessary on the URL. But an id is useful in helping the\n>>> BT terminal identify the session without having to try all of its\n>>> outstanding keys until it finds one that works.\n>>>\n>>> I proposed that the resource name (\"session id\" may be a better name) be\n>>> deterministically derived from the session key. Given the design change\n>>> to pass an EC public key it would need to be derived from that key (not\n>>> from the session key because the receiver would not have a copy before\n>>> decrypting the first BT message). So any function on the public key that\n>>> reduces it to a smaller length, fixed width should be fine. Hashing it\n>>> first may be better as is prevents disclosure of any bits of the public\n>>> key, which should be treated as a secret during the session.\n>>>\n>>>>     * When you said a new public key for each tap, do you see that as\n>>>>       every single tap, or do you consider multiple taps from the same\n>>>>       customer the same tap?\n>>> Yes, since there would be no other way to distinguish between customers\n>>> in some scenarios and this is the safest approach. We certainly won't\n>>> run out of numbers, and unused sessions can be discarded based on any\n>>> number of criteria, including discarding all but the most recent. That\n>>> may may be sufficient for your vending machines given there's little if\n>>> any call for parallelism.\n>>>\n>>> e\n>\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150228/fc52cf1e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150228/fc52cf1e/attachment.sig>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2015-02-25T09:20:06",
                "message_text_only": "The list appears dead, this is a test.\n\ne\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150225/b4700400/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin at POS using BIP70, NFC and offline payments - implementer feedback",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Voskuil",
                "Natanael",
                "Jan Vornberger",
                "Andreas Schildbach",
                "Mike Hearn",
                "Andy Schroder",
                "Aaron Voisine"
            ],
            "messages_count": 44,
            "total_messages_chars_count": 282450
        }
    },
    {
        "title": "[Bitcoin-development] Request for comments on hybrid PoW/PoS enhancement for Bitcoin",
        "thread_messages": [
            {
                "author": "Chris Page",
                "date": "2015-02-23T19:27:17",
                "message_text_only": "I'm soliciting feedback on an idea to will improve security, increase the\nnumber of full nodes, and provide more avenues for bitcoin distribution.\nThe idea is still in its infancy, but I need constructive feedback before I\ntake this further, or decide to abandon the idea.\n\nIn particular, my ego is in check and I'm ready to be made a fool, but in\nturn, I'll be that much better educated, so fair trade!\n\nHere is the high-level overview:\n\n1) A new block B0 is mined and broadcast as usual\n\n2) Full nodes verify block B0. A subset of these nodes broadcast a new\n\"endorsement\" message endorsing the block as valid, and preferred.\n\n3) Miners, now assembling and beginning mining a new block (B1), add\nendorsements of B0 to B1's coinbase transaction, sharing the block reward\nwith endorsers of B0.\n\nAs proposed, the idea of Block Endorsement requires a new message, but fits\ninto current structures.\n\nHere some details about each of the steps above, and what it buys us:\n\n1) The mining of block B0: No changes to current process or format.  Blocks\nare mined and broadcast as they are today.\n\n2)  Only a subset of nodes are eligible to endorse a block, and hence, only\na subset are eligible for an endorsement reward.  We restrict to avoid a\nflood of endorsement messages by every node following the announcement of\neach new block.  An endorsement message needs to identify exactly one block\nat a specific height that it is endorsing.  It needs to include a payout\naddress that meets certain validation criteria relative to the block it is\nendorsing.  A valid payout address will include some proof of stake (PoS),\nwhether that be that it has a 1+ bitcoin balance, some age weighted\nbalance, or something else is TBD.  The reason for PoS is that it should\nnot be the case that a subversive miner could easily fabricate a valid\nendorsement payout address.  The other requirement is that the tail bits of\na valid endorsement payout address, when masked (size of mask TBD) need to\nmatch the trailing bits of the hash of the block it is validating.   This\ndirectly ties endorsements to a specific block, and makes it\ncomputationally inexpensive to verify/relay, or drop invalid endorsement\nmessages. The combination of PoS and mask will restrict the number of valid\naddresses.  There are no restrictions on which endorsements a miner can\ninclude, as long as they are valid.  As part of new block validation, full\nnodes would need to do all that they do now, but they would also need to\nvalidate endorsements included in the coinbase transaction.\n\n3) Miners consider whether to include endorsement payouts as part of their\ncoinbase transaction.  They need not do so, but by including endorsements,\nthey significantly increase the likelihood that their block will be\nselected.\n\nCHANGE TO BEST CHAIN SELECTION\n\nBlock Endorsement requires a change to the best chain selection algorithm\nto encourage miners to include endorsement payouts.  Because there is an\nincentive to include endorsers, there is an incentive to broadcast mined\nblocks as soon as possible.\n\nFor the purpose of best chain selection, a block should get a significant\nbonus to its work (10%) for each valid endorsement payout included in a\nblock's valid coinbase transaction.  How many endorsements should be\npermitted is a design parameter which is in play, but let's assume that up\nto 10 endorsements are permitted.   For the purpose of block selection, a\nblock's work, with 10 endorsements, is be effectively doubled.\n\nEFFECT ON 51% ATTACK\n\nWith Block Endorsement, because of the extra weight given to a block that\nhas endorsements, a sustained 51% attack becomes more expensive.  Valid\nblocks with full endorsements would win out over the attack blocks unless\nthe attacker was able to not only control 51% of the compute power, but to\nalso control sufficient endorsements to overcome the rest of the network.\nTo prevent an attacker from just using suitable addresses as endorsers from\nthe blockchain, a full node would have to maintain a list of recently\nbroadcast endorsement messages for TBD (100) blocks to prove the validity\nof the endorsements.  Quite possibly we might need to provide a way for a\nbooting node to request lists of endorsers.\n\nCHANGE TO BLOCK REWARD\n\nMiners would share block rewards with endorsers using a defined formula\nwhich is TBD.  Endorsement rewards would be as much as 20% (design\nparameter) of the block reward, and shared evenly between all endorsers\nincluded in the coinbase.\n\nCHANGE TO MINING STRATEGIES\n\nWhen a new block is broadcast, miners will begin assembling yet another\nblock.  Meanwhile, full nodes would validate the new block, and\nendorsements would propagate quickly thereafter to all miners.  This should\nnot take long as it is easy to identify whether or not an address is a\nvalid endorser.  I would expect shortly after assembling a block, there\nwould be a number of potential endorsers to include in the coinbase tx, and\nif 10 were not available, a miner could decide to wait, or begin mining\nit.  I suspect the time to collect 10 valid endorsers would be low, as\nendorsers should reply quickly in hopes of being included. Therefore, this\nadditional wait time, if any, would not have a appreciable impact on the\nlevel of difficulty required to mine a block.\n\nI have thoughts on how to provide additional incentives to miners to\ninclude multiple endorsers - for example, reducing the total endorsement\nfee down to 10% if endorsed by a full complement of endorsers.  We could\nalso start with a lower reward and ramp up to some target over time to not\nburden the business plans of current mining operations.  But these and\nother ideas are added complexity that I don't know offers much return.  It\nis easy to add complexity.  The challenge is to keep it as simple as\npossible.\n\nCONCLUSION\n\nBy implementing Block Endorsement, we increase security of the blockchain\nby giving more weight to blocks that have been broadcast and endorsed by\nmultiple full nodes.  By providing a reward to these endorsers, we provide\nan incentive for more full nodes.  With proof of state mining on top of\nexisting proof of work, we provide a low barrier to entry, while not\nsacrificing the benefits provided by PoW.  With a lower barrier to entry,\nwe provide a more accessible avenue for mining, and in turn, encourage\nbitcoin adoption.\n\nThis is just the beginnings of an idea.  Assuming there isn't a fundamental\nflaw(s), there are many knobs to tweak, and no doubt, it would benefit\ngreatly by the technical expertise and creativity of others.  I do feel as\nif there are still some gaps and that it hasn't yet been full explored yet\neven as a thought experiment.  For instance, what new attack vectors might\nbe introduced?  Would a person controlling many potential endorsement\naddresses be able to launch an attack by endorsing a set of blocks,\nessentially launching a 51% attack but by using endorsements as a PoW\nmultiplier?  Or is that not practical?  The answer is probably a function\nof the endorsement criteria.  There are many different angles that require\nthought and scrutiny.  I'm sure there are many that I've yet to even\nconsider.\n\nAnd as I read discussions about double-spends and zero-confirmation\ntransactions I can't help but wonder if maybe there is a way for endorsers\nto play a role in identifying possible double-spends.  Negative\nendorsements?\n\nI'm new to the development process and the code base.  Assuming the\nfeedback isn't derailing, would the next step be to proceed with\nimplementation, or would a new BIP be recommended?\n\nWell, I thought this would be only a few paragraphs.  It is easy to carry\non when you are excited about something.  That's also the time when a\nperson is most likely to miss some short-comings, so I am anxious for\nfeedback.  Thanks for reading, and I'd be most appreciative of constructive\ncomments and questions.\n\nThanks\nChris Page\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/2daee22a/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2015-02-24T14:54:17",
                "message_text_only": "This is an interesting idea from the standpoint of trying to incentivize\npeople to run nodes, though from a high level it seems to just be adding\ncomplexity to the current process by which nodes 'endorse' blocks. When a\nnode receives and validates a block it then informs its peers of the new\ninventory, thus offering to send the block that 'endorses' as valid.\n\n\"Because there is an incentive to include endorsers, there is an incentive\nto broadcast mined blocks as soon as possible.\" - I'd say that this is\nalready the case due to the incentive for a miner's block to get propagated\naround the network first.\n\nMy first question would be whether or not your proposal would include a\nchange to how nodes propagate new blocks. At the moment, a node that hears\nabout a second valid block at the tip of the chain will ignore it and not\npropagate it to its peers. Wouldn't your proposal necessitate a change to\nthis logic so that blocks with 'better' endorsements get propagated even if\nthey are received after non-endorsed or lesser-endorsed blocks?\n\nI'd also be interested to know more how endorsements would be limited\n(fairly) to only a subset of nodes.\n\nI'm a bit fuzzy on the endorsement timing. You're saying that a miner will\nadd endorsement payouts in their block based upon nodes that endorsed the\nprevious block? Which means they're paying nodes to endorse a block that\nthey probably didn't even mine? Or would a miner only include payouts to\nendorsers for the last block that they mined that was accepted by the\nnetwork?\n\n- Jameson\n\nOn Mon, Feb 23, 2015 at 2:27 PM, Chris Page <pagecr at gmail.com> wrote:\n\n>\n> I'm soliciting feedback on an idea to will improve security, increase the\n> number of full nodes, and provide more avenues for bitcoin distribution.\n> The idea is still in its infancy, but I need constructive feedback before I\n> take this further, or decide to abandon the idea.\n>\n> In particular, my ego is in check and I'm ready to be made a fool, but in\n> turn, I'll be that much better educated, so fair trade!\n>\n> Here is the high-level overview:\n>\n> 1) A new block B0 is mined and broadcast as usual\n>\n> 2) Full nodes verify block B0. A subset of these nodes broadcast a new\n> \"endorsement\" message endorsing the block as valid, and preferred.\n>\n> 3) Miners, now assembling and beginning mining a new block (B1), add\n> endorsements of B0 to B1's coinbase transaction, sharing the block reward\n> with endorsers of B0.\n>\n> As proposed, the idea of Block Endorsement requires a new message, but\n> fits into current structures.\n>\n> Here some details about each of the steps above, and what it buys us:\n>\n> 1) The mining of block B0: No changes to current process or format.\n> Blocks are mined and broadcast as they are today.\n>\n> 2)  Only a subset of nodes are eligible to endorse a block, and hence,\n> only a subset are eligible for an endorsement reward.  We restrict to avoid\n> a flood of endorsement messages by every node following the announcement of\n> each new block.  An endorsement message needs to identify exactly one block\n> at a specific height that it is endorsing.  It needs to include a payout\n> address that meets certain validation criteria relative to the block it is\n> endorsing.  A valid payout address will include some proof of stake (PoS),\n> whether that be that it has a 1+ bitcoin balance, some age weighted\n> balance, or something else is TBD.  The reason for PoS is that it should\n> not be the case that a subversive miner could easily fabricate a valid\n> endorsement payout address.  The other requirement is that the tail bits of\n> a valid endorsement payout address, when masked (size of mask TBD) need to\n> match the trailing bits of the hash of the block it is validating.   This\n> directly ties endorsements to a specific block, and makes it\n> computationally inexpensive to verify/relay, or drop invalid endorsement\n> messages. The combination of PoS and mask will restrict the number of valid\n> addresses.  There are no restrictions on which endorsements a miner can\n> include, as long as they are valid.  As part of new block validation, full\n> nodes would need to do all that they do now, but they would also need to\n> validate endorsements included in the coinbase transaction.\n>\n> 3) Miners consider whether to include endorsement payouts as part of their\n> coinbase transaction.  They need not do so, but by including endorsements,\n> they significantly increase the likelihood that their block will be\n> selected.\n>\n> CHANGE TO BEST CHAIN SELECTION\n>\n> Block Endorsement requires a change to the best chain selection algorithm\n> to encourage miners to include endorsement payouts.  Because there is an\n> incentive to include endorsers, there is an incentive to broadcast mined\n> blocks as soon as possible.\n>\n> For the purpose of best chain selection, a block should get a significant\n> bonus to its work (10%) for each valid endorsement payout included in a\n> block's valid coinbase transaction.  How many endorsements should be\n> permitted is a design parameter which is in play, but let's assume that up\n> to 10 endorsements are permitted.   For the purpose of block selection, a\n> block's work, with 10 endorsements, is be effectively doubled.\n>\n> EFFECT ON 51% ATTACK\n>\n> With Block Endorsement, because of the extra weight given to a block that\n> has endorsements, a sustained 51% attack becomes more expensive.  Valid\n> blocks with full endorsements would win out over the attack blocks unless\n> the attacker was able to not only control 51% of the compute power, but to\n> also control sufficient endorsements to overcome the rest of the network.\n> To prevent an attacker from just using suitable addresses as endorsers from\n> the blockchain, a full node would have to maintain a list of recently\n> broadcast endorsement messages for TBD (100) blocks to prove the validity\n> of the endorsements.  Quite possibly we might need to provide a way for a\n> booting node to request lists of endorsers.\n>\n> CHANGE TO BLOCK REWARD\n>\n> Miners would share block rewards with endorsers using a defined formula\n> which is TBD.  Endorsement rewards would be as much as 20% (design\n> parameter) of the block reward, and shared evenly between all endorsers\n> included in the coinbase.\n>\n> CHANGE TO MINING STRATEGIES\n>\n> When a new block is broadcast, miners will begin assembling yet another\n> block.  Meanwhile, full nodes would validate the new block, and\n> endorsements would propagate quickly thereafter to all miners.  This should\n> not take long as it is easy to identify whether or not an address is a\n> valid endorser.  I would expect shortly after assembling a block, there\n> would be a number of potential endorsers to include in the coinbase tx, and\n> if 10 were not available, a miner could decide to wait, or begin mining\n> it.  I suspect the time to collect 10 valid endorsers would be low, as\n> endorsers should reply quickly in hopes of being included. Therefore, this\n> additional wait time, if any, would not have a appreciable impact on the\n> level of difficulty required to mine a block.\n>\n> I have thoughts on how to provide additional incentives to miners to\n> include multiple endorsers - for example, reducing the total endorsement\n> fee down to 10% if endorsed by a full complement of endorsers.  We could\n> also start with a lower reward and ramp up to some target over time to not\n> burden the business plans of current mining operations.  But these and\n> other ideas are added complexity that I don't know offers much return.  It\n> is easy to add complexity.  The challenge is to keep it as simple as\n> possible.\n>\n> CONCLUSION\n>\n> By implementing Block Endorsement, we increase security of the blockchain\n> by giving more weight to blocks that have been broadcast and endorsed by\n> multiple full nodes.  By providing a reward to these endorsers, we provide\n> an incentive for more full nodes.  With proof of state mining on top of\n> existing proof of work, we provide a low barrier to entry, while not\n> sacrificing the benefits provided by PoW.  With a lower barrier to entry,\n> we provide a more accessible avenue for mining, and in turn, encourage\n> bitcoin adoption.\n>\n> This is just the beginnings of an idea.  Assuming there isn't a\n> fundamental flaw(s), there are many knobs to tweak, and no doubt, it would\n> benefit greatly by the technical expertise and creativity of others.  I do\n> feel as if there are still some gaps and that it hasn't yet been full\n> explored yet even as a thought experiment.  For instance, what new attack\n> vectors might be introduced?  Would a person controlling many potential\n> endorsement addresses be able to launch an attack by endorsing a set of\n> blocks, essentially launching a 51% attack but by using endorsements as a\n> PoW multiplier?  Or is that not practical?  The answer is probably a\n> function of the endorsement criteria.  There are many different angles that\n> require thought and scrutiny.  I'm sure there are many that I've yet to\n> even consider.\n>\n> And as I read discussions about double-spends and zero-confirmation\n> transactions I can't help but wonder if maybe there is a way for endorsers\n> to play a role in identifying possible double-spends.  Negative\n> endorsements?\n>\n> I'm new to the development process and the code base.  Assuming the\n> feedback isn't derailing, would the next step be to proceed with\n> implementation, or would a new BIP be recommended?\n>\n> Well, I thought this would be only a few paragraphs.  It is easy to carry\n> on when you are excited about something.  That's also the time when a\n> person is most likely to miss some short-comings, so I am anxious for\n> feedback.  Thanks for reading, and I'd be most appreciative of constructive\n> comments and questions.\n>\n> Thanks\n> Chris Page\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/3f86c2d2/attachment.html>"
            },
            {
                "author": "Chris Page",
                "date": "2015-02-24T17:13:47",
                "message_text_only": "Thanks for the feedback and questions.  Answers inline.\n\nOn Tue, Feb 24, 2015 at 9:54 AM, Jameson Lopp <jameson.lopp at gmail.com>\nwrote:\n\n> This is an interesting idea from the standpoint of trying to incentivize\n> people to run nodes, though from a high level it seems to just be adding\n> complexity to the current process by which nodes 'endorse' blocks. When a\n> node receives and validates a block it then informs its peers of the new\n> inventory, thus offering to send the block that 'endorses' as valid.\n>\n> \"Because there is an incentive to include endorsers, there is an incentive\n> to broadcast mined blocks as soon as possible.\" - I'd say that this is\n> already the case due to the incentive for a miner's block to get propagated\n> around the network first.\n>\n\nI agree with this, for well meaning miners.  In the case of a 51% attack,\nthere is an incentive to mine a block and not share it right away, so that\nanother block could be mined on top of it.  Because that first block wasn't\nshared, it wouldn't have endorsers.  The total work represented in this\n\"attack\" chain, even with 2 blocks, would ideally represent less work that\none fully endorsed block.  This is because, as currently proposed,\nendorsers provide a work multiplier, which when a block has a full\ncomplement of endorsers, its proof of work is doubled for the purpose of\nbest chain selection.  That's if we allow up to 10 endorsers each providing\na 10% work bonus.\n\nMy concern is that giving endorsers too much power potentially opens up\nanother attack vector where endorsers could collude to endorse an invalid\nblock.  But that's why it is so important that the selection criteria for\nendorsers needs to be both random and narrow.  I discuss that more below.\n\n\n>\n>\n> My first question would be whether or not your proposal would include a\n> change to how nodes propagate new blocks. At the moment, a node that hears\n> about a second valid block at the tip of the chain will ignore it and not\n> propagate it to its peers. Wouldn't your proposal necessitate a change to\n> this logic so that blocks with 'better' endorsements get propagated even if\n> they are received after non-endorsed or lesser-endorsed blocks?\n>\n\n\nI think that the proposal does impact consensus, which creates a high\nbarrier to acceptance, and I'm not yet convinced that the benefits are\nworth the risk.  My hope is that in sharing the idea, we can identify ways\nto reduce the risk.\n\nWhenever there is a fork, Bitcoin chooses the chain with the most work.  I\ncould easily be mistaken, so correct me if I cam wrong, but based on a\ncurrent level of difficulty, any arriving valid block is going to present\nan equivalent proof of work.  So currently, it makes sense to simply ignore\na second valid block.  With the proposal, if a second valid block came in\nwith more endorsers, it would displace the current tip.\n\nIn practice, with proper incentive, I would expect all found blocks to have\nthe same number of endorsers.  Therefore all incoming blocks would be\ninterchangeable, and it would be the case that in practice, a second valid\nblock would be ignored just as today.\n\n\n\n>\n> I'd also be interested to know more how endorsements would be limited\n> (fairly) to only a subset of nodes.\n>\n>\nA node endorses by providing an address for payout.  The limiting criteria\nis a function of that address.\n\nThe first requirement is that the address must have a relationship to the\nblock that it is endorsing.  As an\nexample, 0000000000000000082ab88cefb003f1dc1fa25881dbd56ed58c0548fbec5382 is\nthe hash of a recent block.  The requirement is that the address matches\nsome number (TBD) of trailing bits.  If the threshold were 32 bits, then\nthe address (more likely, the hash of the public address) would need to end\nin fbec5382..\n\nAn valid address must have some proof of stake.  Maybe that isn't fair,\nbecause it limits participation by balance, and it is yet another case of\nthe rich get richer.  But without proof of stake, everyone would generate\nenough addresses so that they could always find an address that meets the\nfirst requirement.\n\nAssuming the idea has merit, in order to get it right, we'd need much\ndiscussion to understand what combination of PoS and size of mask makes\nsense.\n\n\n> I'm a bit fuzzy on the endorsement timing. You're saying that a miner will\n> add endorsement payouts in their block based upon nodes that endorsed the\n> previous block? Which means they're paying nodes to endorse a block that\n> they probably didn't even mine? Or would a miner only include payouts to\n> endorsers for the last block that they mined that was accepted by the\n> network?\n>\n>\nWith my proposal, miners would not be required to payout to endorsers at\nall.  I think that this would help us avoid a hard fork.  But when they\nchoose to payout to endorsers, yes, they would be paying out to those that\nendorsed the tip of the chain that they are building on.   Why would a\nminer ever do that?  Because they would benefit from the multiplier\nprovided by the endorsers.\n\nAny block that includes endorsers would be providing a higher level of work\nwhich would displace tips without endorsement.  This sort of turmoil\nwouldn't sit well with anybody, so I suspect that miners would soon begin\nincluding a full complement of endorsers.\n\nIf we were to move ahead with something like this, we might want to ramp up\nthe amount of the reward shared with endorsers from 0 to the final target\nsome years later.  I do not want to mess with short term business plans of\nminers.\n\nThanks again for the feedback, thoughts, and questions.  I hope my answers\nprovide more clarity.\n\n-Chris\n\n\n\n\n\n> - Jameson\n>\n> On Mon, Feb 23, 2015 at 2:27 PM, Chris Page <pagecr at gmail.com> wrote:\n>\n>>\n>> I'm soliciting feedback on an idea to will improve security, increase the\n>> number of full nodes, and provide more avenues for bitcoin distribution.\n>> The idea is still in its infancy, but I need constructive feedback before I\n>> take this further, or decide to abandon the idea.\n>>\n>> In particular, my ego is in check and I'm ready to be made a fool, but in\n>> turn, I'll be that much better educated, so fair trade!\n>>\n>> Here is the high-level overview:\n>>\n>> 1) A new block B0 is mined and broadcast as usual\n>>\n>> 2) Full nodes verify block B0. A subset of these nodes broadcast a new\n>> \"endorsement\" message endorsing the block as valid, and preferred.\n>>\n>> 3) Miners, now assembling and beginning mining a new block (B1), add\n>> endorsements of B0 to B1's coinbase transaction, sharing the block reward\n>> with endorsers of B0.\n>>\n>> As proposed, the idea of Block Endorsement requires a new message, but\n>> fits into current structures.\n>>\n>> Here some details about each of the steps above, and what it buys us:\n>>\n>> 1) The mining of block B0: No changes to current process or format.\n>> Blocks are mined and broadcast as they are today.\n>>\n>> 2)  Only a subset of nodes are eligible to endorse a block, and hence,\n>> only a subset are eligible for an endorsement reward.  We restrict to avoid\n>> a flood of endorsement messages by every node following the announcement of\n>> each new block.  An endorsement message needs to identify exactly one block\n>> at a specific height that it is endorsing.  It needs to include a payout\n>> address that meets certain validation criteria relative to the block it is\n>> endorsing.  A valid payout address will include some proof of stake (PoS),\n>> whether that be that it has a 1+ bitcoin balance, some age weighted\n>> balance, or something else is TBD.  The reason for PoS is that it should\n>> not be the case that a subversive miner could easily fabricate a valid\n>> endorsement payout address.  The other requirement is that the tail bits of\n>> a valid endorsement payout address, when masked (size of mask TBD) need to\n>> match the trailing bits of the hash of the block it is validating.   This\n>> directly ties endorsements to a specific block, and makes it\n>> computationally inexpensive to verify/relay, or drop invalid endorsement\n>> messages. The combination of PoS and mask will restrict the number of valid\n>> addresses.  There are no restrictions on which endorsements a miner can\n>> include, as long as they are valid.  As part of new block validation, full\n>> nodes would need to do all that they do now, but they would also need to\n>> validate endorsements included in the coinbase transaction.\n>>\n>> 3) Miners consider whether to include endorsement payouts as part of\n>> their coinbase transaction.  They need not do so, but by including\n>> endorsements, they significantly increase the likelihood that their block\n>> will be selected.\n>>\n>> CHANGE TO BEST CHAIN SELECTION\n>>\n>> Block Endorsement requires a change to the best chain selection algorithm\n>> to encourage miners to include endorsement payouts.  Because there is an\n>> incentive to include endorsers, there is an incentive to broadcast mined\n>> blocks as soon as possible.\n>>\n>> For the purpose of best chain selection, a block should get a significant\n>> bonus to its work (10%) for each valid endorsement payout included in a\n>> block's valid coinbase transaction.  How many endorsements should be\n>> permitted is a design parameter which is in play, but let's assume that up\n>> to 10 endorsements are permitted.   For the purpose of block selection, a\n>> block's work, with 10 endorsements, is be effectively doubled.\n>>\n>> EFFECT ON 51% ATTACK\n>>\n>> With Block Endorsement, because of the extra weight given to a block that\n>> has endorsements, a sustained 51% attack becomes more expensive.  Valid\n>> blocks with full endorsements would win out over the attack blocks unless\n>> the attacker was able to not only control 51% of the compute power, but to\n>> also control sufficient endorsements to overcome the rest of the network.\n>> To prevent an attacker from just using suitable addresses as endorsers from\n>> the blockchain, a full node would have to maintain a list of recently\n>> broadcast endorsement messages for TBD (100) blocks to prove the validity\n>> of the endorsements.  Quite possibly we might need to provide a way for a\n>> booting node to request lists of endorsers.\n>>\n>> CHANGE TO BLOCK REWARD\n>>\n>> Miners would share block rewards with endorsers using a defined formula\n>> which is TBD.  Endorsement rewards would be as much as 20% (design\n>> parameter) of the block reward, and shared evenly between all endorsers\n>> included in the coinbase.\n>>\n>> CHANGE TO MINING STRATEGIES\n>>\n>> When a new block is broadcast, miners will begin assembling yet another\n>> block.  Meanwhile, full nodes would validate the new block, and\n>> endorsements would propagate quickly thereafter to all miners.  This should\n>> not take long as it is easy to identify whether or not an address is a\n>> valid endorser.  I would expect shortly after assembling a block, there\n>> would be a number of potential endorsers to include in the coinbase tx, and\n>> if 10 were not available, a miner could decide to wait, or begin mining\n>> it.  I suspect the time to collect 10 valid endorsers would be low, as\n>> endorsers should reply quickly in hopes of being included. Therefore, this\n>> additional wait time, if any, would not have a appreciable impact on the\n>> level of difficulty required to mine a block.\n>>\n>> I have thoughts on how to provide additional incentives to miners to\n>> include multiple endorsers - for example, reducing the total endorsement\n>> fee down to 10% if endorsed by a full complement of endorsers.  We could\n>> also start with a lower reward and ramp up to some target over time to not\n>> burden the business plans of current mining operations.  But these and\n>> other ideas are added complexity that I don't know offers much return.  It\n>> is easy to add complexity.  The challenge is to keep it as simple as\n>> possible.\n>>\n>> CONCLUSION\n>>\n>> By implementing Block Endorsement, we increase security of the blockchain\n>> by giving more weight to blocks that have been broadcast and endorsed by\n>> multiple full nodes.  By providing a reward to these endorsers, we provide\n>> an incentive for more full nodes.  With proof of state mining on top of\n>> existing proof of work, we provide a low barrier to entry, while not\n>> sacrificing the benefits provided by PoW.  With a lower barrier to entry,\n>> we provide a more accessible avenue for mining, and in turn, encourage\n>> bitcoin adoption.\n>>\n>> This is just the beginnings of an idea.  Assuming there isn't a\n>> fundamental flaw(s), there are many knobs to tweak, and no doubt, it would\n>> benefit greatly by the technical expertise and creativity of others.  I do\n>> feel as if there are still some gaps and that it hasn't yet been full\n>> explored yet even as a thought experiment.  For instance, what new attack\n>> vectors might be introduced?  Would a person controlling many potential\n>> endorsement addresses be able to launch an attack by endorsing a set of\n>> blocks, essentially launching a 51% attack but by using endorsements as a\n>> PoW multiplier?  Or is that not practical?  The answer is probably a\n>> function of the endorsement criteria.  There are many different angles that\n>> require thought and scrutiny.  I'm sure there are many that I've yet to\n>> even consider.\n>>\n>> And as I read discussions about double-spends and zero-confirmation\n>> transactions I can't help but wonder if maybe there is a way for endorsers\n>> to play a role in identifying possible double-spends.  Negative\n>> endorsements?\n>>\n>> I'm new to the development process and the code base.  Assuming the\n>> feedback isn't derailing, would the next step be to proceed with\n>> implementation, or would a new BIP be recommended?\n>>\n>> Well, I thought this would be only a few paragraphs.  It is easy to carry\n>> on when you are excited about something.  That's also the time when a\n>> person is most likely to miss some short-comings, so I am anxious for\n>> feedback.  Thanks for reading, and I'd be most appreciative of constructive\n>> comments and questions.\n>>\n>> Thanks\n>> Chris Page\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n>> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n>> Get technology previously reserved for billion-dollar corporations, FREE\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=190641631&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150224/5cbb7b57/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-25T12:30:28",
                "message_text_only": "Hi Chris,\n\nJust FYI you may not have received much feedback on this because Gmail put\nit into the spam folder for some reason. So I'm guessing a lot of people\ndidn't see it.\n\nMy main feedback is - I do not really see how this is different from actual\nmining. Mining also incentives the running of full nodes, miners are\nrewarded via coinbases, etc. I'm missing a crisp description of why your\nscheme is better than this, in particular, taking into account the\ndifficulty of distinguishing full node sybils of each other.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150225/dd96cc66/attachment.html>"
            },
            {
                "author": "Chris Page",
                "date": "2015-02-25T13:43:32",
                "message_text_only": "Hi Mike,\n\nThanks for the feedback and letting me know that my earlier emails fell\nvictim to spam.\n\nMy scheme might be better because it would add further incentives for\nrunning full nodes.  A full node can be run on even a cheap laptop.  In my\nexperience, once a person new to bitcoin accepts it as at worthy of\nattention, the next area of interest is how to mine.  They'll learn about\nmining pools, search, and if they are technical enough, they'll join the\npool and likely be disappointed with their results.  They'll then consider\na graphics card, or ASICs, or just stop mining altogether.  And I wouldn't\nbe surprised if, when making that selection of a mining pool, a person\nmight, based on limited information, decide that the best mining pool to\njoin is the largest.\n\nI've made a number of assumptions in that progression to further my point,\nbut I don't think that journey is too far off mark.  I do so to illustrate\nthat for a person to enjoy some financial reward for running a full node,\nin practice, it isn't as simple as running a full node .  My proposal makes\nit easier for a full node to enjoy rewards, and to do so on modest\nhardware.  In that sense, it is better than what we have now.\n\nMany people new to bitcoin express an interest in mining.  I suspect that\nthe primary motive that they want a way to earn bitcoin using the computer\n** that they have **.  If you too believe this, then I hope you'd agree\nthat my proposal offers a solution that meets the desires of that person\nnew to bitcoin.  It makes bitcoin more accommodating, which makes it\nbetter, but this time on a \"social\" rather than technological scale.  This\nwould help ** keep ** people interested in bitcoin and result in ecosystem\ngrowth.\n\nWith a larger ecosystem running full nodes, the blockchain becomes more\nsecure.  That's better.\n\nThen there are the merits of \"enodorsement\" itself which is at the heart of\nmy new scheme which one might argue could raise the bar from 51% to 101% to\npull off such an attack.\n\nI don't know that my scheme helps on the sybil front, but since it requires\nand builds on top of the current system, I don't know that is makes it any\nworse.\n\nI tried to be more crisp, but that's one of the areas I need to improve.\n\nThanks\n-Chris\n\n\n\n\nOn Wed, Feb 25, 2015 at 7:30 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Hi Chris,\n>\n> Just FYI you may not have received much feedback on this because Gmail put\n> it into the spam folder for some reason. So I'm guessing a lot of people\n> didn't see it.\n>\n> My main feedback is - I do not really see how this is different from\n> actual mining. Mining also incentives the running of full nodes, miners are\n> rewarded via coinbases, etc. I'm missing a crisp description of why your\n> scheme is better than this, in particular, taking into account the\n> difficulty of distinguishing full node sybils of each other.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150225/dd02d3a4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Request for comments on hybrid PoW/PoS enhancement for Bitcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jameson Lopp",
                "Chris Page",
                "Mike Hearn"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 37280
        }
    },
    {
        "title": "[Bitcoin-development] BIP proposal -- wallet extensions",
        "thread_messages": [
            {
                "author": "Mem Wallet",
                "date": "2015-02-23T22:56:22",
                "message_text_only": "Working on a proposal for extensions based on bip44 conventions.\n\nMost interesting is: Fully Deterministic GPG keys.\n\nhttps://github.com/taelfrinn/bip44extention\n\nWould welcome any comments or interest\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150223/3d021ba5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal -- wallet extensions",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mem Wallet"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 384
        }
    },
    {
        "title": "[Bitcoin-development] Providing Payment Request within URI",
        "thread_messages": [
            {
                "author": "Oleg Andreev",
                "date": "2015-02-24T15:58:57",
                "message_text_only": "Hi,\n\nI wonder if there is a standard way to put Payment Request data into bitcoin: URI or directly into QR code. The goal is to allow device to generate a multi-output payment request on its own, without relying on the server and x509 certificates. When scanned via QR code from, say, POS, it's pretty secure, so no additional authentication needed.\n\nI'd like something like this: \n\nbitcoin:?r=data://<base64url-encoded-payment-request>\n\nIf there's no standard for that, would it be a good idea to extend BIP72 this way?"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-02-25T20:44:55",
                "message_text_only": "Andreas' wallet supports this, but don't do it. Payment requests can get\nlarger in future even without signing. Exploding the capacity of a QR code\nis very easy.\n\nInstead, take a look at the Bluetooth/NFC discussion happening in a\ndifferent thread.\n\nOn Tue, Feb 24, 2015 at 4:58 PM, Oleg Andreev <oleganza at gmail.com> wrote:\n\n> Hi,\n>\n> I wonder if there is a standard way to put Payment Request data into\n> bitcoin: URI or directly into QR code. The goal is to allow device to\n> generate a multi-output payment request on its own, without relying on the\n> server and x509 certificates. When scanned via QR code from, say, POS, it's\n> pretty secure, so no additional authentication needed.\n>\n> I'd like something like this:\n>\n> bitcoin:?r=data://<base64url-encoded-payment-request>\n>\n> If there's no standard for that, would it be a good idea to extend BIP72\n> this way?\n>\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website,\n> sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for\n> all\n> things parallel software development, from weekly thought leadership blogs\n> to\n> news, videos, case studies, tutorials and more. Take a look and join the\n> conversation now. http://goparallel.sourceforge.net/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150225/824592bf/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-26T09:32:15",
                "message_text_only": "Yeah, you'd be limited to simple usecases. X509 signing or lots of\noutputs will make the QR code hard to scan. However, if all you want to\ndo is send to a custom script (without using P2SH) I invite you to have\na look at\n\nhttps://github.com/schildbach/bitcoin-wallet/blob/master/wallet/src/de/schildbach/wallet/ui/InputParser.java#L86\n\nhttps://github.com/schildbach/bitcoin-wallet/blob/master/wallet/src/de/schildbach/wallet/util/Qr.java#L134\n\nhttps://github.com/schildbach/bitcoin-wallet/blob/master/wallet/src/de/schildbach/wallet/util/Base43.java\n\nBasically it's \"BITCOIN:-\" plus the payment request in Base43 encoded\nform. I picked Base43, because that's optimized for QR codes.\n\n\nOn 02/24/2015 04:58 PM, Oleg Andreev wrote:\n> Hi,\n> \n> I wonder if there is a standard way to put Payment Request data into bitcoin: URI or directly into QR code. The goal is to allow device to generate a multi-output payment request on its own, without relying on the server and x509 certificates. When scanned via QR code from, say, POS, it's pretty secure, so no additional authentication needed.\n> \n> I'd like something like this: \n> \n> bitcoin:?r=data://<base64url-encoded-payment-request>\n> \n> If there's no standard for that, would it be a good idea to extend BIP72 this way?\n> ------------------------------------------------------------------------------\n> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n> by Intel and developed in partnership with Slashdot Media, is your hub for all\n> things parallel software development, from weekly thought leadership blogs to\n> news, videos, case studies, tutorials and more. Take a look and join the \n> conversation now. http://goparallel.sourceforge.net/\n>"
            },
            {
                "author": "Oleg Andreev",
                "date": "2015-02-26T09:48:49",
                "message_text_only": "Thanks for references. Yeah, I don't need X509 signing (if I could use certificates, I wouldn't need to include PR in the URL in the first place).\n\nI presume you used \"BITCOIN:-<payment request>\" instead of \"bitcoin:?r=somescheme://<payment request>\" to make it more compact. \n\nI also tried to look up Base43, but I could not find any info on how it is specifically optimized for QR codes. Could you enlighten me?\n\n\n> On 26 Feb 2015, at 10:32, Andreas Schildbach <andreas at schildbach.de> wrote:\n> \n> Yeah, you'd be limited to simple usecases. X509 signing or lots of\n> outputs will make the QR code hard to scan. However, if all you want to\n> do is send to a custom script (without using P2SH) I invite you to have\n> a look at\n> \n> https://github.com/schildbach/bitcoin-wallet/blob/master/wallet/src/de/schildbach/wallet/ui/InputParser.java#L86\n> \n> https://github.com/schildbach/bitcoin-wallet/blob/master/wallet/src/de/schildbach/wallet/util/Qr.java#L134\n> \n> https://github.com/schildbach/bitcoin-wallet/blob/master/wallet/src/de/schildbach/wallet/util/Base43.java\n> \n> Basically it's \"BITCOIN:-\" plus the payment request in Base43 encoded\n> form. I picked Base43, because that's optimized for QR codes.\n> \n> \n> On 02/24/2015 04:58 PM, Oleg Andreev wrote:\n>> Hi,\n>> \n>> I wonder if there is a standard way to put Payment Request data into bitcoin: URI or directly into QR code. The goal is to allow device to generate a multi-output payment request on its own, without relying on the server and x509 certificates. When scanned via QR code from, say, POS, it's pretty secure, so no additional authentication needed.\n>> \n>> I'd like something like this: \n>> \n>> bitcoin:?r=data://<base64url-encoded-payment-request>\n>> \n>> If there's no standard for that, would it be a good idea to extend BIP72 this way?\n>> ------------------------------------------------------------------------------\n>> Dive into the World of Parallel Programming The Go Parallel Website, sponsored\n>> by Intel and developed in partnership with Slashdot Media, is your hub for all\n>> things parallel software development, from weekly thought leadership blogs to\n>> news, videos, case studies, tutorials and more. Take a look and join the \n>> conversation now. http://goparallel.sourceforge.net/\n>> \n> \n>"
            },
            {
                "author": "Oleg Andreev",
                "date": "2015-02-26T11:14:22",
                "message_text_only": "> Base43 is the same as any BaseX standard, but using a different alphabet\n> (43 characters). It's meant to be used for efficiently storing binary\n> data into QR codes. The alphabet is picked to match the 'Alphanumeric'\n> input mode of QR codes as closely as possible, but at the same time be\n> allowed in URIs.\n\nDoes it mean Base58 or Base64 take more space in QR code than Base43? Do you have an estimate of the gains?"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-02-26T12:11:48",
                "message_text_only": "On 02/26/2015 12:14 PM, Oleg Andreev wrote:\n> \n>> Base43 is the same as any BaseX standard, but using a different alphabet\n>> (43 characters). It's meant to be used for efficiently storing binary\n>> data into QR codes. The alphabet is picked to match the 'Alphanumeric'\n>> input mode of QR codes as closely as possible, but at the same time be\n>> allowed in URIs.\n> \n> Does it mean Base58 or Base64 take more space in QR code than Base43? Do you have an estimate of the gains? \n\nBoth Base58 and Base64 force QR codes into binary encoding. Base64 can\ntake 6 bits per char, binary of course has 8 bits per char. So you're\nwasting 25% of space if you use Base64, a little bit more with Base58.\n\nBase43 takes log2(43) = 5.43 bits per char, while each char uses up 5.5\nbits in QR codes in 'Alphanumeric' encoding. So that's a waste of 1.3%.\n\nSource for QR code standard: http://en.wikipedia.org/wiki/QR_code"
            }
        ],
        "thread_summary": {
            "title": "Providing Payment Request within URI",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Oleg Andreev",
                "Andreas Schildbach"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 7558
        }
    },
    {
        "title": "[Bitcoin-development] BCF 2012 Miner vote",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2015-02-25T18:47:06",
                "message_text_only": "It would appear that the Bitcoin Foundation has decided that their\nnext two seats would be decided by miners.   (More information\navailable at: https://bitcoinfoundation.org/forum/index.php?/topic/1255-blockchain-voting/#entry13453\n)\n\nUnfortunately, they seem to have not provided the software needed to\nparticipate.\n\nI've taken Luke DashJr's somewhat notorious IsNotorious patch, which\nhe's used previously to block things like the Horse Stapler Battery\ndust-spam attacks and re-purposed it so miners can avoid casting votes\nin the election that they don't intend to cast.\n\nNot really an ideal fit, but the code has the benefit of having been\nrun in production for some time; a necessity for deployment on short\nnotice.\n\nA patch (against git master, but should apply to 0.10 cleanly at least\nand probably other versions) is available at:\n\nhttps://people.xiph.org/~greg/bcf2012.patch\n\nLet me know if you have any trouble applying it, I'll be glad to do my\ncivic duty and do what I can to help people participate with the\nsystem was clearly intended by the design.\n\n[Please note that I am relying on some claims from reddit for some of\nthe candidate addresses (\nhttp://www.reddit.com/r/Bitcoin/comments/2x3ffk/bitcoin_foundation_runoff_voting_live_stats_2015/\n) because the official voting software is more or less completely\nbusted for me and I can only see some of the candidates. If any are\nwrong, please let me know.]\n\nCheers."
            }
        ],
        "thread_summary": {
            "title": "BCF 2012 Miner vote",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1429
        }
    },
    {
        "title": "[Bitcoin-development] Request for comments on hybrid, PoW/PoS enhancement for Bitcoin",
        "thread_messages": [
            {
                "author": "Andrew Lapp",
                "date": "2015-02-25T21:58:51",
                "message_text_only": "Having stakeholders \"endorse\" blocks has, according to you, the benefits \nof increasing the number of full nodes and making a 51% attack more \nexpensive. It seems to me it would have the opposite effects and other \nnegative side effects. Any stakeholder that has \"won\" could just be \nrunning an SPV client and be informed by a full node that they have won, \nthen cooperate to collect the reward. You are mistaking proof of stake \nas a proof you are running a full node. At the same time, the network \nbecomes cheaper to attack in proportion to the amount of the block \nreward that is paid to \"endorsers\". Another side effect is that miners \nwould have a bigger economy of scale. The more stake a miner has, the \nmore they can \"endorse\" their own blocks and not others blocks. I \nrecommend reading this: https://download.wpsoftware.net/bitcoin/pos.pdf\n\n-Andrew Lapp"
            },
            {
                "author": "Chris Page",
                "date": "2015-02-26T01:21:58",
                "message_text_only": "I definitely need to have an deeper understanding of that paper before\nproceeding.   Thanks for the reference!\n\nOn Wed, Feb 25, 2015 at 4:58 PM, Andrew Lapp <lapp0 at purdue.edu> wrote:\n\n> Having stakeholders \"endorse\" blocks has, according to you, the benefits\n> of increasing the number of full nodes and making a 51% attack more\n> expensive. It seems to me it would have the opposite effects and other\n> negative side effects. Any stakeholder that has \"won\" could just be running\n> an SPV client and be informed by a full node that they have won, then\n> cooperate to collect the reward. You are mistaking proof of stake as a\n> proof you are running a full node. At the same time, the network becomes\n> cheaper to attack in proportion to the amount of the block reward that is\n> paid to \"endorsers\". Another side effect is that miners would have a bigger\n> economy of scale. The more stake a miner has, the more they can \"endorse\"\n> their own blocks and not others blocks. I recommend reading this:\n> https://download.wpsoftware.net/bitcoin/pos.pdf\n>\n> -Andrew Lapp\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150225/196e294b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Request for comments on hybrid, PoW/PoS enhancement for Bitcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Chris Page",
                "Andrew Lapp"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2116
        }
    }
]