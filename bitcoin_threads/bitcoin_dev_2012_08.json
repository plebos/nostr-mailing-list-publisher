[
    {
        "title": "[Bitcoin-development] The Bitcoin Testing Project",
        "thread_messages": [
            {
                "author": "steve",
                "date": "2012-08-01T11:38:35",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHi all,\n\nI know most of you have more important things to do, and not enough\ntime as it is, but I would really like your feedback on the testing\nproject.\n\nBettermeans seemed ideal, it allowed for leaderless leadership with\npeople being able to dip in and out of what they wanted to do.\nhowever it seems that bettermeans is in no way a finished product and\nis rotting fast.\n\nI would like to move away from bettermeans - whilst retaining the\nvoting and sub workstream style of working.  I would like to set\nsomething up around MantisBT (Mantis Bug Tracker) - this is an\nexceptionally versatile bit of software with plugins and interaction\nwith other testing products (everything from test setups and plans to\ntest runs and results) I would go as far as saying it is industry\nstandard (yeah, i know about bugzilla, etc. mantis beats them all\nhands down.) obviously we would need a wiki and other software - this\nis not a problem.\n\nI am happpy to pay for the VPS' to host this stuff and set it all up.\n\nI have quite a bit of experience with mantis and other opensource\ntesting stuff.\n\nI see the testing of bitcoin to be very similar to the testing process\nin the games industry.  for those that do not know how this works it\nis like this:-\n\nA company comes up with a device (xbox/ps),\nThey then publish a set of dos and donts for this device (TRC for sony\nand TCRs for microsoft.  - I wrote quite a few of the MS TCR's for the\noriginal xbox.)\nThey (ms/sony) then test your game against these rules and depending\non how many you pass/fail your game can be released or not.\n\nI see this as mapping to bitcoin very well, the device is the\nblockchain, and the TRC/TCR _tests_ are published so third party\ndevelopers can see how they fair [look at gavins recent blockchain\nedge cases for an example] (ms/sony do not publish their testcases\nonly the requirements)\n\nI believe that this will allow the bitcoin testing project to be able\nto cope with the stable builds, bleeding edge builds and 3rd party\nimplementations all at the same time.\n\nIt doesnt matter what the app is, it is its interaction with the\nblockchain, the safe guarding of the blockchain and compatibility with\nthe previous/future versions that are tested.\n\n[for the bitcoin dev list]\nA little about me:-\nThe below is more or less a cut and paste of some of the stuff I sent\ngavin in my initial email about wanting to be in on the project.\n\nI can back all of this up with references. I can go into more detail if\nneeded.\n\nI was heavily involved with setting up the microsoft xbox european cert\ndepartment\nI set up qa department for europes largest independant games developer\n(although they are no longer)\n\nworked for microsoft secure science designing security automation tools\n\nsetup the internal pentest for thales e-security (now TITS [Thales\nInformation Technology Solutions (or Trotters Independant Traders ;),\non thier datacryptors (fpga, crypto and product) - have done full test\ncycles on hsm 8000, payshield 9000, dc2k and thier latest line of\nmilitary spec comms equipment.\n\nSetup and pentested Thales and nCiphers credit control software (to\nfips level 4 standard - This shit bitcoin exchanges need!! I know bank\nis a dirty word in the bitcoin world, but we should be at least as\nsecure as them)\n\nI currently find exploits in stuff like office, quicktime, ie, ff, etc\nand sell them to companies like ZDI (3com) iDefense (verisgn) and some\npentest companies that require zero day exploits.\n\nhowever I would like to ditch this and get my bitcoin related stuff\noff the ground - with the BTP being top of the list.\n\nmy spelling is rubbish, and sometimes i forget to spellcheck before i\nhit send. sorry about that.\n\nany feedback would be really appreciated. please! I feel that this has\nstagnated enough and I want to get my work out there and I want it to\nbe useful. (I lost 60 or so testcases because Kev left himself logged\ninto bettermeans and I added them under his account... none appeared\non the wiki, none appeared anywhere...)\n\nThere is already lots of stuff on the wiki that outlines how i see\nthings holding together - but you cant see who posted what because of\na bug that has appeared recently [meta info is just displayed as its\nmeta tag, {name} on {date} wrote.]\n\nas apposed to Mistfpga on 30/8/2012 wrote...\n\nso the tl;dr\n1 - I want to use something other than bettermeans\n2 - I can admin opensource software to do the same\n3 - I want to take the voting/hiearachy style from bettermeans and\napply it to mantis and test workflow.\n4 - I want to get some testing done asap.\n5 - I have a full msdn and technet licence\n6 - I have a vast array of machines [nearly 100 cores] that I can use\nto automate testing and to test different setups.\n7 - been mining for 18 months or so.\n\ncheers,\n\nsteve\n\nI do not belive this to be related, but I am not ashamed and feel no\nstigma. I have posted this on a public forum. I suffer from fast\ncycling (withing a day) type two bipolar disorder.  This has been and\nis being managed very well by my meds (300mg quetiapine fumerate and\n30mg mirtrazipine at night) I have been well for over a year now. [and\nyes, even with these mental health problems I still hold SCE clearance]\n\n- -- \nmy PGP public key is at pgp.mit.edu id: 0x5016FB50\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.17 (MingW32)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/\n\niQEcBAEBAgAGBQJQGRU7AAoJEFvEB9dQFvtQY9oH/RiNBeWDs+tz0NQgkgtXmxcs\ntDtlLWB91gRtmxvXv+yYHE0WXS/qQ5gwaor8Vek61Cvnhij4AQBf7JVYLj03/7fy\ncMAFJ5k7ZQmH9URo8Jx8xzQ2tLgZ5BqLbP6fTzDstpExNGJlkZvsC6hTx9OFCubU\nbzWuWmcIRzBiMhdz7DPoskOgie5sQRzzO0zrK7NvS1P2hyEhM3eFYFcYecpS8jq9\nSbkH77qnc5pZD2JULq38htVwtI16vxmg/s4GIs3OpEPaMk5xtVc5XHf6gwBZQtYw\nfErwZpNDEAmGidRCB4LAqdSx1Xi0ix7GOyvTxBLWTnfB7wIAQNQpBHB9zN8diiA=\n=am8B\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Gary Rowe",
                "date": "2012-08-02T15:07:41",
                "message_text_only": "Hi Steve,\n\nThis looks like a good idea to me. The test suites could act similarly to\nthe 100% Pure Java approach that successfully fended off a lot of\ncorrupting influences to Java over the years.\n\nMaybe it's worth putting together a small starter suite of tests and\nshowing them to the community then providing a suitable process, perhaps\nthrough BIPs, to allow tests to be created, reviewed and updated before\ngetting incorporated into a reference. I imagine a BIP would cover an\naspect of the blockchain rather than a single test or test suite since\nhaving that many BIPs would get onerous fast.\n\nKind regards,\n\nGary\n\nOn 1 August 2012 12:38, steve <steve at mistfpga.net> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Hi all,\n>\n> I know most of you have more important things to do, and not enough\n> time as it is, but I would really like your feedback on the testing\n> project.\n>\n> Bettermeans seemed ideal, it allowed for leaderless leadership with\n> people being able to dip in and out of what they wanted to do.\n> however it seems that bettermeans is in no way a finished product and\n> is rotting fast.\n>\n> I would like to move away from bettermeans - whilst retaining the\n> voting and sub workstream style of working.  I would like to set\n> something up around MantisBT (Mantis Bug Tracker) - this is an\n> exceptionally versatile bit of software with plugins and interaction\n> with other testing products (everything from test setups and plans to\n> test runs and results) I would go as far as saying it is industry\n> standard (yeah, i know about bugzilla, etc. mantis beats them all\n> hands down.) obviously we would need a wiki and other software - this\n> is not a problem.\n>\n> I am happpy to pay for the VPS' to host this stuff and set it all up.\n>\n> I have quite a bit of experience with mantis and other opensource\n> testing stuff.\n>\n> I see the testing of bitcoin to be very similar to the testing process\n> in the games industry.  for those that do not know how this works it\n> is like this:-\n>\n> A company comes up with a device (xbox/ps),\n> They then publish a set of dos and donts for this device (TRC for sony\n> and TCRs for microsoft.  - I wrote quite a few of the MS TCR's for the\n> original xbox.)\n> They (ms/sony) then test your game against these rules and depending\n> on how many you pass/fail your game can be released or not.\n>\n> I see this as mapping to bitcoin very well, the device is the\n> blockchain, and the TRC/TCR _tests_ are published so third party\n> developers can see how they fair [look at gavins recent blockchain\n> edge cases for an example] (ms/sony do not publish their testcases\n> only the requirements)\n>\n> I believe that this will allow the bitcoin testing project to be able\n> to cope with the stable builds, bleeding edge builds and 3rd party\n> implementations all at the same time.\n>\n> It doesnt matter what the app is, it is its interaction with the\n> blockchain, the safe guarding of the blockchain and compatibility with\n> the previous/future versions that are tested.\n>\n> [for the bitcoin dev list]\n> A little about me:-\n> The below is more or less a cut and paste of some of the stuff I sent\n> gavin in my initial email about wanting to be in on the project.\n>\n> I can back all of this up with references. I can go into more detail if\n> needed.\n>\n> I was heavily involved with setting up the microsoft xbox european cert\n> department\n> I set up qa department for europes largest independant games developer\n> (although they are no longer)\n>\n> worked for microsoft secure science designing security automation tools\n>\n> setup the internal pentest for thales e-security (now TITS [Thales\n> Information Technology Solutions (or Trotters Independant Traders ;),\n> on thier datacryptors (fpga, crypto and product) - have done full test\n> cycles on hsm 8000, payshield 9000, dc2k and thier latest line of\n> military spec comms equipment.\n>\n> Setup and pentested Thales and nCiphers credit control software (to\n> fips level 4 standard - This shit bitcoin exchanges need!! I know bank\n> is a dirty word in the bitcoin world, but we should be at least as\n> secure as them)\n>\n> I currently find exploits in stuff like office, quicktime, ie, ff, etc\n> and sell them to companies like ZDI (3com) iDefense (verisgn) and some\n> pentest companies that require zero day exploits.\n>\n> however I would like to ditch this and get my bitcoin related stuff\n> off the ground - with the BTP being top of the list.\n>\n> my spelling is rubbish, and sometimes i forget to spellcheck before i\n> hit send. sorry about that.\n>\n> any feedback would be really appreciated. please! I feel that this has\n> stagnated enough and I want to get my work out there and I want it to\n> be useful. (I lost 60 or so testcases because Kev left himself logged\n> into bettermeans and I added them under his account... none appeared\n> on the wiki, none appeared anywhere...)\n>\n> There is already lots of stuff on the wiki that outlines how i see\n> things holding together - but you cant see who posted what because of\n> a bug that has appeared recently [meta info is just displayed as its\n> meta tag, {name} on {date} wrote.]\n>\n> as apposed to Mistfpga on 30/8/2012 wrote...\n>\n> so the tl;dr\n> 1 - I want to use something other than bettermeans\n> 2 - I can admin opensource software to do the same\n> 3 - I want to take the voting/hiearachy style from bettermeans and\n> apply it to mantis and test workflow.\n> 4 - I want to get some testing done asap.\n> 5 - I have a full msdn and technet licence\n> 6 - I have a vast array of machines [nearly 100 cores] that I can use\n> to automate testing and to test different setups.\n> 7 - been mining for 18 months or so.\n>\n> cheers,\n>\n> steve\n>\n> I do not belive this to be related, but I am not ashamed and feel no\n> stigma. I have posted this on a public forum. I suffer from fast\n> cycling (withing a day) type two bipolar disorder.  This has been and\n> is being managed very well by my meds (300mg quetiapine fumerate and\n> 30mg mirtrazipine at night) I have been well for over a year now. [and\n> yes, even with these mental health problems I still hold SCE clearance]\n>\n> - --\n> my PGP public key is at pgp.mit.edu id: 0x5016FB50\n>\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v2.0.17 (MingW32)\n> Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/\n>\n> iQEcBAEBAgAGBQJQGRU7AAoJEFvEB9dQFvtQY9oH/RiNBeWDs+tz0NQgkgtXmxcs\n> tDtlLWB91gRtmxvXv+yYHE0WXS/qQ5gwaor8Vek61Cvnhij4AQBf7JVYLj03/7fy\n> cMAFJ5k7ZQmH9URo8Jx8xzQ2tLgZ5BqLbP6fTzDstpExNGJlkZvsC6hTx9OFCubU\n> bzWuWmcIRzBiMhdz7DPoskOgie5sQRzzO0zrK7NvS1P2hyEhM3eFYFcYecpS8jq9\n> SbkH77qnc5pZD2JULq38htVwtI16vxmg/s4GIs3OpEPaMk5xtVc5XHf6gwBZQtYw\n> fErwZpNDEAmGidRCB4LAqdSx1Xi0ix7GOyvTxBLWTnfB7wIAQNQpBHB9zN8diiA=\n> =am8B\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's security and\n> threat landscape has changed and how IT managers can respond. Discussions\n> will include endpoint security, mobile security and the latest in malware\n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120802/c2e5121e/attachment.html>"
            },
            {
                "author": "steve",
                "date": "2012-08-03T00:19:17",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 03/08/2012 01:07, Gary Rowe wrote:\n> Hi Steve,\n> \n> This looks like a good idea to me. The test suites could act\n> similarly to the 100% Pure Java approach that successfully fended\n> off a lot of corrupting influences to Java over the years.\n> \n> Maybe it's worth putting together a small starter suite of tests\n> and showing them to the community then providing a suitable\n> process, perhaps through BIPs, to allow tests to be created,\n> reviewed and updated before getting incorporated into a reference.\n> I imagine a BIP would cover an aspect of the blockchain rather than\n> a single test or test suite since having that many BIPs would get\n> onerous fast.\n> \n> Kind regards,\n> \n> Gary\n> \n\nHi Gary,\n\nThanks for the response. :)\n\nI have started all this in bettermeans, but lost a lot of work (which\nI am working on how to redo - but I am on holiday at the moment, and\nhave restricted access to my test setups)\n\nHere is the discussion thread I had with gavin about acceptance tests.\n\nhttps://secure.bettermeans.com/boards/4316/topics/7261\n\nHere is the work I have currently done (note, it was losing all the\nGeneral Acceptance Tests and getting no response from bettermeans that\nhas lead me to not want to use it)\n\nalso note that the terminology I have been using is a little wrong, I\nrefer to release 0.7 as testnet release 0.7 - I will tidy it up. - I\ndid this before and it looks like it got reverted somehow.\n\nhere is the main wiki space that I have been using.\n\nhttps://secure.bettermeans.com/projects/4256/wiki\n\nFor the General Accceptance Tests, check\n\nhttps://secure.bettermeans.com/projects/4256/wiki/Dev_general_acceptance_tests\n\nThese are the basic acceptance tests based off the changelog\n\nhttps://secure.bettermeans.com/projects/4256/wiki/Dev_acceptance_tests\n\nHowever, notice no tests are in there yet.\n\nThere is plenty more stuff on bettermeans so please go have a poke\naround.  I will try to get at least a wiki setup on a vps I have\ncontrol of (in germany, and provided by CINFU and paid for with\nbitcoins) and get the stuff moved over and put the tests back up.  I\ncan do a limited amount of testing if the release is to happen in the\nnext week or two, So I will focus my efforts on the installation tests\nand wallet tests. Ideally I would like to get all the GAT's done.\n\nHopefully this fleshes things out a bit more.\n\nPlease feel free to add/edit but remember your stuff might magically\ndisappear, it might be better to wait for the wiki move.  I intend on\ndoing the wiki move today. but that might not happen.\n\n(I have a feeling that it was me adding stuff from an account that is\nnot on the BTP that blew things up, just a feeling though)\n\nI would like to keep tests informal if possible, but that kinda goes\nagainst the purpose of the tests. this is a bit tricky to explain if\nyou have not had a look at bettermeans.  bettermeans kinda has its own\nBIP and voting mechanism, which is quite nice and it is what I want to\nemulate - this should reduce the need for vetting of tests... have a\nlook at what is there and see what you think.\n\n:)\n\ncheers,\n\nsteve\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.17 (MingW32)\nComment: Using GnuPG with Mozilla - http://enigmail.mozdev.org/\n\niQEcBAEBAgAGBQJQGxkFAAoJEFvEB9dQFvtQeD0IAJe9BJz/mv+kZjhk7LH1d7HH\nc46D7s2Y8a+2Yobve4KtRGMoQZQiqqXGIdZ2nHVO77s0zICixqdtcKlRvBZHybw9\npB8hFYmeBdXvMHj7TR4kMbMKqTJ2z/B6m1qEKFfCRIXQXnyD5qNYhFocyQMwz53A\ndkwhpoiWNVqcgnz51XEnphyohu0TPsPbOOyCrT7ORdyAgLJAs5Ig1sKbTAdSxOux\nflEYKOVk0gse2b8lO2ly+eLwcQgI7jrzy+qkSKmNajRKFdvHUODXo4RraR08qiaJ\nSUpmN/43uQZ4atMdOCZxD5DWKjBO96sj6mkB/po5lzIEEtkhzyp/wmKdHtlvZ/Q=\n=Fonn\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "The Bitcoin Testing Project",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "steve",
                "Gary Rowe"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 17083
        }
    },
    {
        "title": "[Bitcoin-development] Version 0.7 release planning",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2012-08-02T16:43:25",
                "message_text_only": "There seems to be consensus that we should go ahead and do a release,\nbefore leveldb or ultraprune or anything major lands.  There is no\nmajor landmark feature, but just a useful collection of small changes.\n It seems like a good time to Release Early, Release Often and make a\ncheckpoint release.\n\nSome rough draft release notes were dumped in\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/release-notes.txt\n\nOpening the floor...  What do we collectively want to happen, before\n0.7 release?  What is the todo list for 0.7?\n\nAfter cleaning out some pull requests yesterday, and looking at the\nlist today, I see\n\n1) CreateNewBlock: Child-pays-for-parent / Add transaction fee later\nluke-jr https://github.com/bitcoin/bitcoin/pull/1647\n\n2) Translations update 2012-08-01 (fetched from Transifex)\nDiapolo https://github.com/bitcoin/bitcoin/pull/1644\n\n3) Add address groupings RPC from coderrr's coincontrol patches.\ngmaxwell https://github.com/bitcoin/bitcoin/pull/1642\n\n4) Add 'mempool' P2P command, and extend 'getdata' behavior\njgarzik https://github.com/bitcoin/bitcoin/pull/1641\n\n5) PROBABLY NOT, BUT MAYBE: Relay blocks as a \"preview\" before\nchecking the transactions in them\nluke-jr https://github.com/bitcoin/bitcoin/pull/1586\n\n6) JSON-RPC method: prioritisetransaction <txid> <priority delta>\nluke-jr https://github.com/bitcoin/bitcoin/pull/1583\n\n7) HOPEFULLY: Addnode optimization and addnode access via RPC\nBlueMatt https://github.com/bitcoin/bitcoin/pull/1549\n\n8) MAYBE: Transition to requiring block height in block coinbases\ngavinandresen https://github.com/bitcoin/bitcoin/pull/1526\n\n9) WE MUST PICK ONE: RPC: lock push-down, preparing for\nparallelization opportunities\njgarzik https://github.com/bitcoin/bitcoin/pull/1494\n    or\nRPC: add facility to enable RPCs to run outside cs_main, wallet locks\njgarzik https://github.com/bitcoin/bitcoin/pull/1493\n\n10) I THINK WE WANT THIS?  Make IPv6 support optional again (defaults\nto enabled)\nluke-jr https://github.com/bitcoin/bitcoin/pull/1431\n\n11) MAYBE: getblocktemplate ('getmemorypool', post IRC debate)\nluke-jr https://github.com/bitcoin/bitcoin/pull/936\n\n\nDevs -- feel free to commit directly to doc/release-notes.txt if there\nis a missing commit, or something that may be better described.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-08-02T16:45:29",
                "message_text_only": "On Thu, Aug 2, 2012 at 12:43 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> There seems to be consensus that we should go ahead and do a release,\n> before leveldb or ultraprune or anything major lands.  There is no\n> major landmark feature, but just a useful collection of small changes.\n>  It seems like a good time to Release Early, Release Often and make a\n> checkpoint release.\n\nProcedural note:  since Gavin is on vacation, this release obviously\nwon't occur for at least a couple weeks.\n\nIf Gavin appears on email or IRC, though, I might try to pounce on him\nand convince him to let us go ahead with 0.7-rc1, if the other devs\nare happy.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Gavin",
                "date": "2012-08-02T18:00:47",
                "message_text_only": "I have no objections to a rc1 happening before I'm back.\n\n--\nGavin Andresen\n\n\nOn Aug 2, 2012, at 10:45 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> On Thu, Aug 2, 2012 at 12:43 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n>> There seems to be consensus that we should go ahead and do a release,\n>> before leveldb or ultraprune or anything major lands.  There is no\n>> major landmark feature, but just a useful collection of small changes.\n>> It seems like a good time to Release Early, Release Often and make a\n>> checkpoint release.\n> \n> Procedural note:  since Gavin is on vacation, this release obviously\n> won't occur for at least a couple weeks.\n> \n> If Gavin appears on email or IRC, though, I might try to pounce on him\n> and convince him to let us go ahead with 0.7-rc1, if the other devs\n> are happy.\n> \n> -- \n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n> \n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's security and \n> threat landscape has changed and how IT managers can respond. Discussions \n> will include endpoint security, mobile security and the latest in malware \n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-08-02T17:17:14",
                "message_text_only": "On Thursday, August 02, 2012 4:43:25 PM Jeff Garzik wrote:\n> Opening the floor...  What do we collectively want to happen, before\n> 0.7 release?  What is the todo list for 0.7?\n\nBased on pull-capable dev comments, I've personally noted these branches as \naccepted for 0.7:\n\n> 7) HOPEFULLY: Addnode optimization and addnode access via RPC\n> BlueMatt https://github.com/bitcoin/bitcoin/pull/1549\n> \n> 8) MAYBE: Transition to requiring block height in block coinbases\n> gavinandresen https://github.com/bitcoin/bitcoin/pull/1526\n> \n> 10) I THINK WE WANT THIS?  Make IPv6 support optional again (defaults\n> to enabled)\n> luke-jr https://github.com/bitcoin/bitcoin/pull/1431\n>\n> 11) MAYBE: getblocktemplate ('getmemorypool', post IRC debate)\n> luke-jr https://github.com/bitcoin/bitcoin/pull/936\n+\n+ m) getmemorypool: longpolling support\n+ luke-jr https://github.com/bitcoin/bitcoin/pull/1355\n+\n+ m) Refactor transaction/accounting time\n+ luke-jr https://github.com/bitcoin/bitcoin/pull/1393\n\nI also personally feel these are appropriate and ready for 0.7:\n> 4) Add 'mempool' P2P command, and extend 'getdata' behavior\n> jgarzik https://github.com/bitcoin/bitcoin/pull/1641\n> \n> 6) JSON-RPC method: prioritisetransaction <txid> <priority delta>\n> luke-jr https://github.com/bitcoin/bitcoin/pull/1583\n> \n> 9) RPC: add facility to enable RPCs to run outside cs_main, wallet locks\n> jgarzik https://github.com/bitcoin/bitcoin/pull/1493\n+\n+ m) Treat generation (mined) transactions less different from receive\n+ transactions\n+ luke-jr https://github.com/bitcoin/bitcoin/pull/1409\n\nAlso these, but they need testing:\n> 1) CreateNewBlock: Child-pays-for-parent / Add transaction fee later\n> luke-jr https://github.com/bitcoin/bitcoin/pull/1647\n> \n> 5) PROBABLY NOT, BUT MAYBE: Relay blocks as a \"preview\" before\n> checking the transactions in them\n> luke-jr https://github.com/bitcoin/bitcoin/pull/1586\n+\n+ m) Bitcoin-Qt (Windows only): enable DEP for bitcoin-qt.exe\n+ diapolo https://github.com/bitcoin/bitcoin/pull/1614\n\nI also feel it is very important that Wumpus/laanwj decide on a name for his \nclient (formerly known as Bitcoin-Qt) and add it to the software instead of \nsimply claiming it is \"Bitcoin\" as it has for a week or so now - that change \nis anticompetitive and will confuse new users into thinking Bitcoin is the \nsoftware too easily.\n\nLuke"
            },
            {
                "author": "Geir Harald Hansen",
                "date": "2012-08-11T16:43:28",
                "message_text_only": "On 02.08.2012 18:43, Jeff Garzik wrote:\n> There seems to be consensus that we should go ahead and do a release,\n> before leveldb or ultraprune or anything major lands.  There is no\n> major landmark feature, but just a useful collection of small changes.\n>  It seems like a good time to Release Early, Release Often and make a\n> checkpoint release.\n\nLooks like much goodness in this version. Thanks for all this work.\n\nAny chance that options to limit the size of blocks and prioritize paid\nvs free txes could make it in?\n\nBy the way, by far the most common support request I have at my pool is\nusers withdrawing coins and not seeing it in their wallet because it's\nnot up-to-date with the block chain. Might be worth adding something in\nthe bitcoin-qt GUI to make it more obvious that users can't see new\ntransactions and why.\n\n> 2) Translations update 2012-08-01 (fetched from Transifex)\n\nI just now updated the Norwegian translation on Transifex, if you'd like\nto do another pull before the release. For some reason there were many\nstrings I had already translated that now had no translation and had to\nbe done again (even ones that had the same English text). Many languages\nare now only about 50% translated.\n\nAlso there were new duplicated strings:\n\n\"Verify a message to ensure it was signed with a specified Bitcoin address\"\n\"Sign a message to prove you own a Bitcoin address\"\n\"Clear &All\"\n\nThese two seem odd:\nUse UPnP to map the listening port (default: 0)\nUse UPnP to map the listening port (default: 1 when listening)\n\nRegards,\nGeir H. Hansen, bitminter.com"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-08-11T18:05:07",
                "message_text_only": "On Saturday, August 11, 2012 4:43:28 PM Geir Harald Hansen wrote:\n> By the way, by far the most common support request I have at my pool is\n> users withdrawing coins and not seeing it in their wallet because it's\n> not up-to-date with the block chain. Might be worth adding something in\n> the bitcoin-qt GUI to make it more obvious that users can't see new\n> transactions and why.\n\nBitcoin-Qt even delays showing generation until 2 confirms.\n\n> These two seem odd:\n> Use UPnP to map the listening port (default: 0)\n> Use UPnP to map the listening port (default: 1 when listening)\n\nThe default depends on build options, so that should be correct."
            },
            {
                "author": "Wladimir",
                "date": "2012-08-11T18:32:46",
                "message_text_only": "By the way, by far the most common support request I have at my pool is\n\n> users withdrawing coins and not seeing it in their wallet because it's\n> not up-to-date with the block chain. Might be worth adding something in\n> the bitcoin-qt GUI to make it more obvious that users can't see new\n> transactions and why.\n>\n\nFor 0.7 we've added a red \"(out of sync)\" warning to the balances when the\nblock chain is out of date.\n\nHowever, due to the design of the protocol there is a large variance in\nblock timings, and it is not possible to determine up-to-date status with\ncertainty, so quite a large safety margin is used. To be precise the\nwarning is shown when the last received block was generated more than 90\nminutes ago.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120811/9ff2f611/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2012-08-11T18:56:09",
                "message_text_only": "Geir,\n\nThere were a lot of subtle changes to the English base messages such as\ncapitalization or punctuation, I know this is pretty annoying for\ntranslators. It is a pity that there is no way to update all translations\nwhen the English base message changes but not significantly enough to\ntrigger re-translation. I've looked but Transifex does not have that option.\n\nAlso there were new duplicated strings:\n>\n> \"Verify a message to ensure it was signed with a specified Bitcoin address\"\n> \"Sign a message to prove you own a Bitcoin address\"\n> \"Clear &All\"\n>\n\nDuplicate strings are not a problem. Some strings are used multiple times\nin the program, and thus appear multiple times in the translation. This is\nbecause there are cases in which a string that is the same in English is\ntranslated differently in another language based on the context.\n\nAt least Qt translator fills duplicates in automatically, with the option\nto change them if desired. I'm not sure about Transifex but I've heard it's\nthe same there.\n\n\n>\n> These two seem odd:\n> Use UPnP to map the listening port (default: 0)\n> Use UPnP to map the listening port (default: 1 when listening)\n>\n\nThe default depends on compiler flags, hence the two messages. I suppose\nthe message could be split up, so that \"Use UPnP to map the listening port\"\nis factored out.\n\nLet's do this after 0.7.0 release though, otherwise all the translations\nfor those messages will be broken again. There should be no more message\nchanges before the release unless there is a very good reason.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120811/4f0b8d7c/attachment.html>"
            },
            {
                "author": "Geir Harald Hansen",
                "date": "2012-08-12T07:59:56",
                "message_text_only": "On 11.08.2012 20:56, Wladimir wrote:\n> Duplicate strings are not a problem. Some strings are used multiple\n> times in the program, and thus appear multiple times in the translation.\n> This is because there are cases in which a string that is the same in\n> English is translated differently in another language based on the context.\n\nThat makes sense. But it's hard to translate when you just see the same\nstring twice and don't know the context where it will be used.\n\n> At least Qt translator fills duplicates in automatically, with the\n> option to change them if desired. I'm not sure about Transifex but I've\n> heard it's the same there.\n\nNo, I just use copy and paste.\n\n>     Use UPnP to map the listening port (default: 0)\n>     Use UPnP to map the listening port (default: 1 when listening)\n> \n> The default depends on compiler flags, hence the two messages. I suppose\n> the message could be split up, so that \"Use UPnP to map the listening\n> port\" is factored out.\n\nSorry, forgot there was a compiler flag for this. No need to split this\nup. As long as there is no explanation or description for each string I\nthink it's easier to translate whole sentences.\n\nOn 11.08.2012 20:32, Wladimir wrote:\n> By the way, by far the most common support request I have at my pool is\n>\n>     users withdrawing coins and not seeing it in their wallet because it's\n>     not up-to-date with the block chain. Might be worth adding\nsomething in\n>     the bitcoin-qt GUI to make it more obvious that users can't see new\n>     transactions and why.\n>\n> For 0.7 we've added a red \"(out of sync)\" warning to the balances when\n> the block chain is out of date.\n\nPerfect. This will prevent a lot of confusion. Thanks!\n\nRegards,\nGeir H. Hansen, bitminter.com"
            }
        ],
        "thread_summary": {
            "title": "Version 0.7 release planning",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Gavin",
                "Luke-Jr",
                "Wladimir",
                "Geir Harald Hansen"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 13443
        }
    },
    {
        "title": "[Bitcoin-development] BIP: Custom Services",
        "thread_messages": [
            {
                "author": "Stefan Thomas",
                "date": "2012-08-13T07:41:50",
                "message_text_only": "Hey everyone,\n\nI was working on some custom protocol extensions for Bitcoin that I\nwanted to experiment with and I noticed that in order to enable nodes to\nannounce these services the only mechanism the protocol currently\nprovides is to use one of the 64 bits of the services field. This is\nobviously a resource that will run out quickly if we all just help\nourselves, so I set out to come up with a standardized way to announce\ncustom protocol extensions, without using up NODE_* flags.\n\nPlease kindly review my solution:\n\nhttps://en.bitcoin.it/wiki/User:Justmoon/BIP_Draft:_Custom_Services\n\nThanks to Amir Taaki, Mike Hearn and Pieter Wuille who provided\ninvaluable feedback while writing the draft.\n\nNote: Earlier drafts of this BIP contained a description of a mechanism\nfor peer exchange for these custom services. However, since that part of\nthe BIP was (1) just a recommendation and (2) rather complex, Amir and I\nagreed to split it off into a separate BIP [1] that will be refined some\nmore and submitted later.\n\nCheers,\n\nStefan\n\n[1]\nhttps://en.bitcoin.it/wiki/User:Justmoon/BIP_Draft:_Custom_Service_Discovery"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-08-13T13:15:12",
                "message_text_only": "I think it's pretty reasonable, although people will want to use node\nflags to get into the addr broadcasts anyway.\n\nThat said, I suspect (based on previous discussions) that there would\nbe quite some pushback against putting extra functionality into the\ncore Bitcoin network. Most likely people will re-use the code with\ndifferent peer discovery seeds and bootstrap similar but unrelated P2P\nnetworks for doing new applications.\n\nFor instance, what if we want to do the language translation app I've\ntalked about a few times before? You need a way to floodfill broadcast\ninvalid transactions to interested parties. The pubsub mechanism in\nthe Bitcoin protocol was an interesting way to do that, but I think it\ngot removed. To broadcast to interested nodes now, you'd have to find\nthem via addr broadcasts and then connect directly. And if you're\ngoing to do that, you may as well just form an entirely independent\nnetwork.\n\nMore elaboration of the use cases might therefore be useful."
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-08-13T20:00:36",
                "message_text_only": "> More elaboration of the use cases might therefore be useful.\n\nI'm implementing a DHT, rather than storing the whole blockchain index\nlocally, a future version of BitcoinJS will store only a user defined\npercentage (anywhere from 0-100%.) Any misses will be resolved by\nquerying the network.\n\nThanks to ultraprune, we no longer need a full index for verification.\nAnd for all the other use cases like lightweight server queries and\nblock explorer queries a bit of latency is acceptable in exchange for\nscalability and decentralization. This feature will give people to\noption to run anywhere from a large BitcoinJS node (100% index) to a\nsmall one (20% index) to a lightweight one (0% index.) All of them are\nequally queryable, so if you're just trying out BitcoinJS you won't have\nto download the block chain just to run the block explorer example. Only\nwhen your block explorer's traffic grows will you need to contribute\nsome query services back to the network in order not to get rate-limited.\n\n\n> these capabilities are not advertised with\n> CAddress, so how does one usefully discover and make use of them?\n\nPieter brought up this very point when he reviewed an earlier draft.\nThis prompted the creation of the second BIP I mentioned:\n\nhttps://en.bitcoin.it/wiki/User:Justmoon/BIP_Draft:_Custom_Service_Discovery\n\nThe basic principle is quite simple - prefix the standard addr message\nwith a service-specific message to mark off service support. It's easy\nto implement and very efficient (without compression it's 1.288 bits per\nnode, with compression it's quite possibly more efficient than the\nservices field.) Because this stuff is a bit more complex and because it\nrequires no changes to the Bitcoin protocol, Amir and I chose to split\nit off into a separate BIP and I want to work on it a little more. But\nif you are wondering how peer exchange might work for these custom\nservices, please do take a look at it.\n\n\n> you may as well just form an entirely independent network\n\nWhen I designed the DHT, I did just that. Later I was working on a\nconcept for a decentralized pool and I noticed I was solving the same\nproblems again. And with all three services running a node might be\nmaintaining three separate TCP connections to the exact same peer.\n\nSo then I considered making the DHT network extensible, so that the\ndecentralized pool protocol could live in there. But, well if I'm doing\nthat, why not just make the regular Bitcoin protocol extensible and let\nboth extensions live in there.\n\nFor a custom service you DO need the following:\n\n- service-specific DNS seeds\n- service announcement (BIP: CS)\n- service-specific messages (BIP: CS)\n- service-specific peer exchange (BIP: CSD)\n\nAnd those four things cover a lot of what Bitcoin does. But once you're\nthinking about n custom services it starts to look easier to add\nsemantics for \"some nodes support some things\" in one network rather\nthan instantiating n networks.\n\nOn the opposite end of the spectrum there are very simple services.\nConsider a WebSocket transport. Some nodes might offer\nBitcoin-over-WebSocket, for example to implement an SPV client in the\nbrowser. But they don't connect to each other via WebSocket, since they\nprefer plain TCP. So in this case you need peer exchange, but not much\nelse. You could create a new P2P network for the sole purpose of\nexchanging peers, but again it seems much easier if there were ways to\ndo this on the Bitcoin network.\n\nOne final point: A major focus of this BIP is to make it easy to\ncanonicalize custom services if we choose to do so. The idea is that\ncustom services get to prove themselves in the wild - those that work\nwell may be added to the standard protocol. That's a good reason to 1)\nencourage custom services to live in-band and 2) recommend compatibility\nwith Bitcoin's standard mechanisms (12 byte command names, 1 bit service\nannouncement, 1 bit peer exchange etc.)\n\nOn 8/13/2012 3:15 PM, Mike Hearn wrote:\n> I think it's pretty reasonable, although people will want to use node\n> flags to get into the addr broadcasts anyway.\n>\n> That said, I suspect (based on previous discussions) that there would\n> be quite some pushback against putting extra functionality into the\n> core Bitcoin network. Most likely people will re-use the code with\n> different peer discovery seeds and bootstrap similar but unrelated P2P\n> networks for doing new applications.\n>\n> For instance, what if we want to do the language translation app I've\n> talked about a few times before? You need a way to floodfill broadcast\n> invalid transactions to interested parties. The pubsub mechanism in\n> the Bitcoin protocol was an interesting way to do that, but I think it\n> got removed. To broadcast to interested nodes now, you'd have to find\n> them via addr broadcasts and then connect directly. And if you're\n> going to do that, you may as well just form an entirely independent\n> network.\n>\n> More elaboration of the use cases might therefore be useful.\n>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-08-13T14:24:41",
                "message_text_only": "On Mon, Aug 13, 2012 at 3:41 AM, Stefan Thomas <moon at justmoon.de> wrote:\n> I was working on some custom protocol extensions for Bitcoin that I\n> wanted to experiment with and I noticed that in order to enable nodes to\n> announce these services the only mechanism the protocol currently\n> provides is to use one of the 64 bits of the services field. This is\n> obviously a resource that will run out quickly if we all just help\n> ourselves, so I set out to come up with a standardized way to announce\n> custom protocol extensions, without using up NODE_* flags.\n>\n> Please kindly review my solution:\n>\n> https://en.bitcoin.it/wiki/User:Justmoon/BIP_Draft:_Custom_Services\n\nheh, this is not a new idea.  I even implemented a pull request for\nservice discovery myself, which simply consisted of querying the list\nof supported commands:\nhttps://github.com/bitcoin/bitcoin/pull/1471\n\nOn IRC, I proposed several alternatives including modifying 'version'\n(which you did) and a new \"getcaps\" (get capabilities) command to be\nadded in protocol_version X.\n\ngmaxwell seems continually unenthused, and made a valid point about\nservice advertisement:  these capabilities are not advertised with\nCAddress, so how does one usefully discover and make use of them?\nWhat are real world use cases, that cannot be solved with nService\nbits?\n\nMy only response is a weak one:  inevitability.  It seems likely that\n-somebody- will implement their own P2P commands for their own client\nsubset, even if only a simple \"use 'getstatus' with strSubVer matching\n/FooClient/\"\n\nTherefore, if it is inevitable, we might as well make some basic rules\nabout how to extended your P2P command set.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-08-13T15:07:55",
                "message_text_only": "On Mon, Aug 13, 2012 at 10:24 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n> My only response is a weak one:  inevitability.  It seems likely that\n> -somebody- will implement their own P2P commands for their own client\n> subset, even if only a simple \"use 'getstatus' with strSubVer matching\n> /FooClient/\"\n>\n> Therefore, if it is inevitable, we might as well make some basic rules\n> about how to extended your P2P command set.\n\nI'm not opposed to that logic.  But for cases where an introduction mechanism\nwill be needed... it would be awfully good to have one, and I do think that\nthere is harm in making people think that simple services negotiation will\nactually work for their needs for cases where a separate p2p network is\nneeded."
            }
        ],
        "thread_summary": {
            "title": "BIP: Custom Services",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Stefan Thomas",
                "Mike Hearn",
                "Gregory Maxwell"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 9526
        }
    },
    {
        "title": "[Bitcoin-development] Protocol changes for SPV clients: mempool, getdata commands",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2012-08-13T15:57:59",
                "message_text_only": "A small change to the protocol is proposed for satoshi client v0.7\n(upcoming release):\n\n    Add 'mempool' P2P command, and extend 'getdata' behavior\n    https://github.com/bitcoin/bitcoin/pull/1641\n\nThe genesis of this command is to permit SPV clients to access the\nmemory pool, but secondary uses include diagnostics and miner download\n(so that miners won't miss lucrative TX's due to node restart).\n\"getdata\" behavior is extended to include any memory pool transaction,\nrelaxing a previous \"getdata\" restriction.\n\nDidn't feel this warranted a BIP, but can write one if people really want one.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Wladimir",
                "date": "2012-08-14T04:55:35",
                "message_text_only": "On Mon, Aug 13, 2012 at 5:57 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> A small change to the protocol is proposed for satoshi client v0.7\n> (upcoming release):\n>\n>     Add 'mempool' P2P command, and extend 'getdata' behavior\n>     https://github.com/bitcoin/bitcoin/pull/1641\n\n\nFully agree with the changes, but I think there should be a small BIP, for\nconsistency, and to make it documented for other client developers.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120814/97ea5023/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Protocol changes for SPV clients: mempool, getdata commands",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1270
        }
    },
    {
        "title": "[Bitcoin-development] Bloom Filter Implementation",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2012-08-15T00:26:31",
                "message_text_only": "I spend some time implementing some of the changes discussed in the\nprevious thread \"New P2P commands for diagnostics, SPV clients\", and\nwanted to field comments before I write up a BIP.\n\nI have implemented a simple bloom filter that works on transactions as\nwell as a new block relay type which relays blocks as header+coinbase tx\n+vector<tx hash> which allows for faster relay for clients which already\nhave transactions in memory pool.\n\nIn order to request that all future MSG_TX inv messages and blocks (only\nthose relayed in the new format) are filtered, SPV clients will send a\nfilterload message with a serialized bloom filter.  Nodes can also send\nfilteradd messages which add particular data blocks to the filter (not\nrecommended for anonymity) and call filterclear which disables filtering\non a node's connection until re-enabled.\n\nThe filter will match any tx which:\n     1. Has a script data element in either a scriptPubKey or scriptSig\n        which matches the filter.\n     2. Spends an input who's COutPoint is in the filter.\n     3. Has a hash in the filter (see #4 for why this matters).\n     4. Has a script data element in a prevout's scriptPubKey.  This\n        allows for matching pay-to-pubkey transactions without sending a\n        new filter after each transaction which matched (which would\n        cause some nasty timing issues where you may miss transactions\n        if you get transactions back-to-back before you can send a new\n        filter).  Matching of prevouts only occurs on free txes, not\n        those in blocks.  Thus, before requesting a block, SPV clients\n        should update the remote node's filter, if required, to be sure\n        it includes the hash of any transaction which would not\n        otherwise match the filter so that the node knows when its\n        transactions are included in blocks.\n\nI can't say I'm a big fan of requiring SPV nodes constantly update the\nfilter when they learn about new transactions (could get nasty during\nIDB, if the node has a lot of transactions, as you could end up\nre-requesting blocks many times), but I really don't think its worth\nloading all prevouts when a node is in IBD to fix it.\n\nThe branch can be found at\nhttps://github.com/TheBlueMatt/bitcoin/compare/master...bloom\n\nMatt"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-08-15T10:07:14",
                "message_text_only": "This is great, thanks!\n\nA few remarks:\n\nIf you have to update the filter after every block, IBD will require a\nround-trip after every single block download instead of doing bulk\nrequests with getblocks. That sounds like it'd kill any performance\ngains won by the feature. There needs to be a way to do bulk getblocks\non hundreds/thousands of blocks at a time and then have the data\nstream in. Perhaps the server node can update the filter for you, as\nthe rules are deterministic?\n\nAs you know the remote end will request the transactions given their\nhashes anyway, why not save the bandwidth for the hashes and the\nnetwork round-trip by just providing the transactions immediately in\nthe block? I was imagining something like:\n\n// A CMerkleTx without the redundant block hash\nclass CLiteMerkleTx : public CTransaction {\n  std::vector<uint256> vBranch;\n  int nIndex;\n}\n\nclass CMerkleBlock {\n    int nVersion;\n    uint256 hashPrevBlock;\n    uint256 hashMerkleRoot;\n    unsigned int nTime;\n    unsigned int nBits;\n    unsigned int nNonce;\n\n    std::vector<CLiteMerkleTx> vMatchedTxns;\n}"
            }
        ],
        "thread_summary": {
            "title": "Bloom Filter Implementation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Matt Corallo"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3354
        }
    },
    {
        "title": "[Bitcoin-development] BIP 35: add mempool message",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2012-08-16T17:32:04",
                "message_text_only": "Consensus was we should do a BIP for all P2P changes, so here it is...\n feedback requested.\n\nhttps://en.bitcoin.it/wiki/BIP_0035\n\nAbstract\n-------------------------------------------\nMake a network node's transaction memory pool accessible via a new\n\"mempool\" message.  Extend the existing \"getdata\" message behavior to permit\naccessing the transaction memory pool.\n\n\nMotivation\n-------------------------------------------\nSeveral use cases make it desireable to expore a network node's transaction\nmemory pool:\n* SPV clients, wishing to obtain zero-confirmation transactions sent or\n  received.\n* Miners, downloading existing network transactions after a restart.\n* Remote network diagnostics.\n\n\nSpecification\n-------------------------------------------\n1) Upon receipt of a \"mempool\" message, the node will respond\n   with an \"inv\" message containing MSG_TX hashes of all the\n   transactions in the node's transaction memory pool.\n\n   An \"inv\" message is always returned, even if empty.\n\n2) The typical node behavior in response to an \"inv\" is \"getdata\".\n\n   However, the reference Satoshi implementation ignores requests\n   for transaction hashes outside that which is recently relayed.\n\n   To support \"mempool\", an implementation must extend its \"getdata\"\n   message support to querying the memory pool.\n\n3) Feature discovery is enabled by checking two \"version\" message attributes:\n\n   a) Protocol version >= 60002\n   b) NODE_NETWORK bit set in nServices\n\n\nBackwards compatibility\n-------------------------------------------\nOlder clients remain 100% compatible and interoperable after this change.\n\n\nImplementation\n-------------------------------------------\nSee https://github.com/bitcoin/bitcoin/pull/1641\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-08-16T17:40:53",
                "message_text_only": "The format for \"mempool\" packet is missing. I'm guessing that it is an empty message, right?\n\nMight be good to add that.\n\n\n\n----- Original Message -----\nFrom: Jeff Garzik <jgarzik at exmulti.com>\nTo: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\nCc: \nSent: Thursday, August 16, 2012 6:32 PM\nSubject: [Bitcoin-development] BIP 35: add mempool message\n\nConsensus was we should do a BIP for all P2P changes, so here it is...\nfeedback requested.\n\nhttps://en.bitcoin.it/wiki/BIP_0035\n\nAbstract\n-------------------------------------------\nMake a network node's transaction memory pool accessible via a new\n\"mempool\" message.\u00a0 Extend the existing \"getdata\" message behavior to permit\naccessing the transaction memory pool.\n\n\nMotivation\n-------------------------------------------\nSeveral use cases make it desireable to expore a network node's transaction\nmemory pool:\n* SPV clients, wishing to obtain zero-confirmation transactions sent or\n\u00a0 received.\n* Miners, downloading existing network transactions after a restart.\n* Remote network diagnostics.\n\n\nSpecification\n-------------------------------------------\n1) Upon receipt of a \"mempool\" message, the node will respond\n\u00a0  with an \"inv\" message containing MSG_TX hashes of all the\n\u00a0  transactions in the node's transaction memory pool.\n\n\u00a0  An \"inv\" message is always returned, even if empty.\n\n2) The typical node behavior in response to an \"inv\" is \"getdata\".\n\n\u00a0  However, the reference Satoshi implementation ignores requests\n\u00a0  for transaction hashes outside that which is recently relayed.\n\n\u00a0  To support \"mempool\", an implementation must extend its \"getdata\"\n\u00a0  message support to querying the memory pool.\n\n3) Feature discovery is enabled by checking two \"version\" message attributes:\n\n\u00a0  a) Protocol version >= 60002\n\u00a0  b) NODE_NETWORK bit set in nServices\n\n\nBackwards compatibility\n-------------------------------------------\nOlder clients remain 100% compatible and interoperable after this change.\n\n\nImplementation\n-------------------------------------------\nSee https://github.com/bitcoin/bitcoin/pull/1641\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com\n\n------------------------------------------------------------------------------\nLive Security Virtual Conference\nExclusive live event will cover all the ways today's security and \nthreat landscape has changed and how IT managers can respond. Discussions \nwill include endpoint security, mobile security and the latest in malware \nthreats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-08-16T17:43:05",
                "message_text_only": "On Thu, Aug 16, 2012 at 1:40 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> The format for \"mempool\" packet is missing. I'm guessing that it is an empty message, right?\n\nYes, it is an empty message.  BIP updated.\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-08-16T17:56:39",
                "message_text_only": "On Thu, Aug 16, 2012 at 01:32:04PM -0400, Jeff Garzik wrote:\n> Consensus was we should do a BIP for all P2P changes, so here it is...\n>  feedback requested.\n> \n> https://en.bitcoin.it/wiki/BIP_0035\n\nI like the idea of being able to query the memory pool of a node; the\nimplementation is straightforward, which is good. Maybe effectively using the\ncommand can be added? I suppose it is interesting in general for nodes to\nget a memory pool refill at startup anyway.\n\n> 1) Upon receipt of a \"mempool\" message, the node will respond\n>    with an \"inv\" message containing MSG_TX hashes of all the\n>    transactions in the node's transaction memory pool.\n> \n>    An \"inv\" message is always returned, even if empty.\n\nI'm not sure about this last. What is it good for? inv packets can always be\nsent, even not in response to others, so it is not that this gives you an\nacknowledgement the mempool is updated?\n\n> 3) Feature discovery is enabled by checking two \"version\" message attributes:\n> \n>    a) Protocol version >= 60002\n>    b) NODE_NETWORK bit set in nServices\n\nThis seems safe, although it forces other full implementations that want to\nexpose protocol version 60002 (or later) to also implement this. What do they\nthink about this?\n\nI would like to suggest to allocate an extra service bit for this. We still\nhave 63 left, and this is a well-defined and useful extra service that was\nnot yet provided by any earlier node. Doing that would also mean that\nmempool-providing survices may be discovered before connecting to them, as\nthe service bits are carried around in addr messages. Any opinions about that?\n\n-- \nPieter"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-08-16T18:20:55",
                "message_text_only": "My thoughts:\n\nThe extension is simple. It's only really useful for the use-cases listed if the majority of nodes implement it. As I view the proposal, it is perfectly simple and uncomplicated. If it's implemented, then I suggest to just increment version and make it part of the protocol.\n\nOn the flipside it is another notch in complicating an already diffuse protocol, but it seems a rather benign offense in that regard compared to other changes (past and future).\n\n\n\n----- Original Message -----\nFrom: Pieter Wuille <pieter.wuille at gmail.com>\nTo: Jeff Garzik <jgarzik at exmulti.com>\nCc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\nSent: Thursday, August 16, 2012 6:56 PM\nSubject: Re: [Bitcoin-development] BIP 35: add mempool message\n\nOn Thu, Aug 16, 2012 at 01:32:04PM -0400, Jeff Garzik wrote:\n> Consensus was we should do a BIP for all P2P changes, so here it is...\n>\u00a0 feedback requested.\n> \n> https://en.bitcoin.it/wiki/BIP_0035\n\nI like the idea of being able to query the memory pool of a node; the\nimplementation is straightforward, which is good. Maybe effectively using the\ncommand can be added? I suppose it is interesting in general for nodes to\nget a memory pool refill at startup anyway.\n\n> 1) Upon receipt of a \"mempool\" message, the node will respond\n>\u00a0 \u00a0 with an \"inv\" message containing MSG_TX hashes of all the\n>\u00a0 \u00a0 transactions in the node's transaction memory pool.\n> \n>\u00a0 \u00a0 An \"inv\" message is always returned, even if empty.\n\nI'm not sure about this last. What is it good for? inv packets can always be\nsent, even not in response to others, so it is not that this gives you an\nacknowledgement the mempool is updated?\n\n> 3) Feature discovery is enabled by checking two \"version\" message attributes:\n> \n>\u00a0 \u00a0 a) Protocol version >= 60002\n>\u00a0 \u00a0 b) NODE_NETWORK bit set in nServices\n\nThis seems safe, although it forces other full implementations that want to\nexpose protocol version 60002 (or later) to also implement this. What do they\nthink about this?\n\nI would like to suggest to allocate an extra service bit for this. We still\nhave 63 left, and this is a well-defined and useful extra service that was\nnot yet provided by any earlier node. Doing that would also mean that\nmempool-providing survices may be discovered before connecting to them, as\nthe service bits are carried around in addr messages. Any opinions about that?\n\n-- \nPieter\n\n------------------------------------------------------------------------------\nLive Security Virtual Conference\nExclusive live event will cover all the ways today's security and \nthreat landscape has changed and how IT managers can respond. Discussions \nwill include endpoint security, mobile security and the latest in malware \nthreats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-08-16T19:21:14",
                "message_text_only": "> This seems safe, although it forces other full implementations that want to\n> expose protocol version 60002 (or later) to also implement this. What do they\n> think about this?\n\nBitcoinJS will implement it, it's a useful feature and there is no\nreason not to support it.\n\nTwo comments from my end:\n\n- This is just a thought, but I wouldn't mind using a new inv_type for\nthis, e.g. MSG_MEMTX. I could conceivably see a future where broadcast\nand relay txs are stored in a very fast local cache whereas the general\nmempool is stored in a slower data structure. By being able to\ndistinguish incoming getdata requests I can save a few milliseconds by\nquerying the right storage right away. Might also help with things like\ntelling apart broadcast/relayed transactions from the response to a\nmempool request for purposes like DoS scoring etc.\n\nNot a big deal by any means, but I also don't see a downside to it.\ninv_types are not a scarce resource, we have four billion of them available.\n\nFor now clients would just treat MSG_TX and MSG_MEMTX interchangeably.\n\n- If a node doesn't have anything in it's mempool it sends back an empty\ninv message. This is either ambiguous (if other things also send empty\ninv messages in the future) or arbitrary (why should an empty inv be\nassociated with a mempool request of all things.) Instead why not\nrespond with an inv message that contains a single element of type\nMSG_MEMTX and hash 0. That would a very direct way to indicate that this\nresponse is associated with a mempool request.\n\n\nI'm not married to either suggestion, just trying to add my perspective.\nOne thing you notice when reimplementing Bitcoin is that Bitcoin's\nprotocol leaves out a lot of information not for space reasons, but\nbecause the reference client's implementation doesn't happen to need it.\nSometimes however this locks other clients into doing things the same\nway. If we can make the protocol a bit richer, especially if this\ndoesn't cost any extra bytes, then we should consider it as it might\nhelp some implementation down the road make a neat optimization.\n\n\nOn 8/16/2012 7:56 PM, Pieter Wuille wrote:\n> On Thu, Aug 16, 2012 at 01:32:04PM -0400, Jeff Garzik wrote:\n>> Consensus was we should do a BIP for all P2P changes, so here it is...\n>>  feedback requested.\n>>\n>> https://en.bitcoin.it/wiki/BIP_0035\n> I like the idea of being able to query the memory pool of a node; the\n> implementation is straightforward, which is good. Maybe effectively using the\n> command can be added? I suppose it is interesting in general for nodes to\n> get a memory pool refill at startup anyway.\n>\n>> 1) Upon receipt of a \"mempool\" message, the node will respond\n>>    with an \"inv\" message containing MSG_TX hashes of all the\n>>    transactions in the node's transaction memory pool.\n>>\n>>    An \"inv\" message is always returned, even if empty.\n> I'm not sure about this last. What is it good for? inv packets can always be\n> sent, even not in response to others, so it is not that this gives you an\n> acknowledgement the mempool is updated?\n>\n>> 3) Feature discovery is enabled by checking two \"version\" message attributes:\n>>\n>>    a) Protocol version >= 60002\n>>    b) NODE_NETWORK bit set in nServices\n> This seems safe, although it forces other full implementations that want to\n> expose protocol version 60002 (or later) to also implement this. What do they\n> think about this?\n>\n> I would like to suggest to allocate an extra service bit for this. We still\n> have 63 left, and this is a well-defined and useful extra service that was\n> not yet provided by any earlier node. Doing that would also mean that\n> mempool-providing survices may be discovered before connecting to them, as\n> the service bits are carried around in addr messages. Any opinions about that?\n>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-08-16T20:57:40",
                "message_text_only": "MSG_MEMTX solves the issue of not knowing whether a given inv is in response to a \"mempool\" command or not.\n\nI don't buy the argument that always sending a response \"inv\" makes things easier because code should always be able to handle misbehaviour from the remote node (ommiting the \"inv\"). However I would argue that it is good to have it, as it makes designing flows of logic much easier (first send this, wait for response, do this, ...).\n\n\n\n----- Original Message -----\nFrom: Stefan Thomas <moon at justmoon.de>\nTo: bitcoin-development at lists.sourceforge.net\nCc: \nSent: Thursday, August 16, 2012 8:21 PM\nSubject: Re: [Bitcoin-development] BIP 35: add mempool message\n\n> This seems safe, although it forces other full implementations that want to\n> expose protocol version 60002 (or later) to also implement this. What do they\n> think about this?\n\nBitcoinJS will implement it, it's a useful feature and there is no\nreason not to support it.\n\nTwo comments from my end:\n\n- This is just a thought, but I wouldn't mind using a new inv_type for\nthis, e.g. MSG_MEMTX. I could conceivably see a future where broadcast\nand relay txs are stored in a very fast local cache whereas the general\nmempool is stored in a slower data structure. By being able to\ndistinguish incoming getdata requests I can save a few milliseconds by\nquerying the right storage right away. Might also help with things like\ntelling apart broadcast/relayed transactions from the response to a\nmempool request for purposes like DoS scoring etc.\n\nNot a big deal by any means, but I also don't see a downside to it.\ninv_types are not a scarce resource, we have four billion of them available.\n\nFor now clients would just treat MSG_TX and MSG_MEMTX interchangeably.\n\n- If a node doesn't have anything in it's mempool it sends back an empty\ninv message. This is either ambiguous (if other things also send empty\ninv messages in the future) or arbitrary (why should an empty inv be\nassociated with a mempool request of all things.) Instead why not\nrespond with an inv message that contains a single element of type\nMSG_MEMTX and hash 0. That would a very direct way to indicate that this\nresponse is associated with a mempool request.\n\n\nI'm not married to either suggestion, just trying to add my perspective.\nOne thing you notice when reimplementing Bitcoin is that Bitcoin's\nprotocol leaves out a lot of information not for space reasons, but\nbecause the reference client's implementation doesn't happen to need it.\nSometimes however this locks other clients into doing things the same\nway. If we can make the protocol a bit richer, especially if this\ndoesn't cost any extra bytes, then we should consider it as it might\nhelp some implementation down the road make a neat optimization.\n\n\nOn 8/16/2012 7:56 PM, Pieter Wuille wrote:\n> On Thu, Aug 16, 2012 at 01:32:04PM -0400, Jeff Garzik wrote:\n>> Consensus was we should do a BIP for all P2P changes, so here it is...\n>>\u00a0 feedback requested.\n>>\n>> https://en.bitcoin.it/wiki/BIP_0035\n> I like the idea of being able to query the memory pool of a node; the\n> implementation is straightforward, which is good. Maybe effectively using the\n> command can be added? I suppose it is interesting in general for nodes to\n> get a memory pool refill at startup anyway.\n>\n>> 1) Upon receipt of a \"mempool\" message, the node will respond\n>>\u00a0 \u00a0 with an \"inv\" message containing MSG_TX hashes of all the\n>>\u00a0 \u00a0 transactions in the node's transaction memory pool.\n>>\n>>\u00a0 \u00a0 An \"inv\" message is always returned, even if empty.\n> I'm not sure about this last. What is it good for? inv packets can always be\n> sent, even not in response to others, so it is not that this gives you an\n> acknowledgement the mempool is updated?\n>\n>> 3) Feature discovery is enabled by checking two \"version\" message attributes:\n>>\n>>\u00a0 \u00a0 a) Protocol version >= 60002\n>>\u00a0 \u00a0 b) NODE_NETWORK bit set in nServices\n> This seems safe, although it forces other full implementations that want to\n> expose protocol version 60002 (or later) to also implement this. What do they\n> think about this?\n>\n> I would like to suggest to allocate an extra service bit for this. We still\n> have 63 left, and this is a well-defined and useful extra service that was\n> not yet provided by any earlier node. Doing that would also mean that\n> mempool-providing survices may be discovered before connecting to them, as\n> the service bits are carried around in addr messages. Any opinions about that?\n>\n\n\n------------------------------------------------------------------------------\nLive Security Virtual Conference\nExclusive live event will cover all the ways today's security and \nthreat landscape has changed and how IT managers can respond. Discussions \nwill include endpoint security, mobile security and the latest in malware \nthreats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-08-16T21:05:58",
                "message_text_only": "On MSG_MEMTX:  The current version has a much higher Just Works value.\n\nOn empty \"inv\":  It is generally better to do something\nunconditionally, than have a response generated only under certain\nconditions.\n\nAnd Alan is correct to note that unknown messages are ignored\n(intentionally, for expansion).  However, unconditionally returning a\nresponse has little to do with feature probing/discovery.  It is\nsimply a clear, deterministic indication that processing is complete,\nfor each invocation.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-08-17T12:27:04",
                "message_text_only": "I think MSG_TX is fine. Simply sending an inv to the other node at startup\nwould work, but it's better to request it explicitly as it will let the\nconnecting peer configure a bloom filter before requesting mempool\ncontents. It's already too heavy for mobile clients to download the entire\nmempool contents at startup so I probably wouldn't implement/activate\nsupport for this on the bitcoinj side until bloom filtering is done, and\nthen this BIP would have to be updated to reflect that the response from\nmempool is filtered.\n\nOn Thu, Aug 16, 2012 at 11:05 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> On MSG_MEMTX:  The current version has a much higher Just Works value.\n>\n> On empty \"inv\":  It is generally better to do something\n> unconditionally, than have a response generated only under certain\n> conditions.\n>\n> And Alan is correct to note that unknown messages are ignored\n> (intentionally, for expansion).  However, unconditionally returning a\n> response has little to do with feature probing/discovery.  It is\n> simply a clear, deterministic indication that processing is complete,\n> for each invocation.\n>\n> --\n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n>\n>\n> ------------------------------------------------------------------------------\n> Live Security Virtual Conference\n> Exclusive live event will cover all the ways today's security and\n> threat landscape has changed and how IT managers can respond. Discussions\n> will include endpoint security, mobile security and the latest in malware\n> threats. http://www.accelacomm.com/jaw/sfrnl04242012/114/50122263/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120817/cd297299/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-08-17T13:40:01",
                "message_text_only": "On Thu, Aug 16, 2012 at 05:05:58PM -0400, Jeff Garzik wrote:\n> On MSG_MEMTX:  The current version has a much higher Just Works value.\n> \n> On empty \"inv\":  It is generally better to do something\n> unconditionally, than have a response generated only under certain\n> conditions.\n> \n> And Alan is correct to note that unknown messages are ignored\n> (intentionally, for expansion).  However, unconditionally returning a\n> response has little to do with feature probing/discovery.  It is\n> simply a clear, deterministic indication that processing is complete,\n> for each invocation.\n\nI disagree. Returning an empty \"inv\" is a very strange way of replying\n\"empty mempool\". Bitcoin P2P is not a request-response protocol, and\n\"inv\" messages are sent where there are inventory items to send. The\nreaction to a request (for example \"getblocks\") can be nothing, or one\nor more \"inv\" messages if necessary. Special casing an empty \"inv\" to\nmean empty mempool is trying to hack a request-response system on top\nof the asynchronous system.\n\nIf there is need for confirming the transmission of the mempool is\ncomplete, the proposal to use a MSG_MEMTX sounds good to me. No client\nwill ever receive such an inv without requesting the mempool, and\nimplementing handling MSG_MEMTX is trivial.\n\n-- \nPieter"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-08-17T16:51:33",
                "message_text_only": "On Fri, Aug 17, 2012 at 9:40 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Thu, Aug 16, 2012 at 05:05:58PM -0400, Jeff Garzik wrote:\n>> On MSG_MEMTX:  The current version has a much higher Just Works value.\n>>\n>> On empty \"inv\":  It is generally better to do something\n>> unconditionally, than have a response generated only under certain\n>> conditions.\n>>\n>> And Alan is correct to note that unknown messages are ignored\n>> (intentionally, for expansion).  However, unconditionally returning a\n>> response has little to do with feature probing/discovery.  It is\n>> simply a clear, deterministic indication that processing is complete,\n>> for each invocation.\n>\n> I disagree. Returning an empty \"inv\" is a very strange way of replying\n> \"empty mempool\". Bitcoin P2P is not a request-response protocol, and\n> \"inv\" messages are sent where there are inventory items to send. The\n> reaction to a request (for example \"getblocks\") can be nothing, or one\n> or more \"inv\" messages if necessary. Special casing an empty \"inv\" to\n> mean empty mempool is trying to hack a request-response system on top\n> of the asynchronous system.\n\nOK, just updated 'mempool' branch to not return \"inv\" if mempool is empty.\n\n\n> If there is need for confirming the transmission of the mempool is\n> complete, the proposal to use a MSG_MEMTX sounds good to me. No client\n> will ever receive such an inv without requesting the mempool, and\n> implementing handling MSG_MEMTX is trivial.\n\nMSG_MEMTX is not a good idea for this use case.  Just sent a ping(nonce).\n\nBitcoin P2P processes requests in-order, and responds accordingly.\nThe remote end may insert asynchronous messages into the response\nstream, certainly, but responses to queries are processed and returned\nin-order.  A 'getdata' response is fully sent before a 'ping' response\nis sent, etc.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-08-16T18:04:13",
                "message_text_only": "On Thu, Aug 16, 2012 at 1:56 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> I suppose it is interesting in general for nodes to\n> get a memory pool refill at startup anyway.\n\nYes.\n\n>>    An \"inv\" message is always returned, even if empty.\n>\n> I'm not sure about this last. What is it good for? inv packets can always be\n> sent, even not in response to others, so it is not that this gives you an\n> acknowledgement the mempool is updated?\n\nA simple guarantee of 1:1 correspondence between request and response.\n The bitcoin protocol sometimes simply elides a response when the\nresponse would be empty, and this makes it difficult to know whether a\nrequest is timing out or already processed.\n\nSending a ping(nonce) after each P2P command is another way of achieving same :)\n\n> This seems safe, although it forces other full implementations that want to\n> expose protocol version 60002 (or later) to also implement this. What do they\n> think about this?\n>\n> I would like to suggest to allocate an extra service bit for this. We still\n> have 63 left, and this is a well-defined and useful extra service that was\n> not yet provided by any earlier node. Doing that would also mean that\n> mempool-providing survices may be discovered before connecting to them, as\n> the service bits are carried around in addr messages. Any opinions about that?\n\nAn nServices bit would be a better fit for this optional service, but\nnServices bits seemed like a scarce resource, so I elected to be\nconservative.\n\nAbsent the scarce-resource concern, I'd vote for an nServices bit.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-08-16T19:36:25",
                "message_text_only": "On Thu, Aug 16, 2012 at 2:04 PM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> On Thu, Aug 16, 2012 at 1:56 PM, Pieter Wuille <pieter.wuille at gmail.com>\n> wrote:\n> > I suppose it is interesting in general for nodes to\n> > get a memory pool refill at startup anyway.\n>\n> Yes.\n>\n> >>    An \"inv\" message is always returned, even if empty.\n> >\n> > I'm not sure about this last. What is it good for? inv packets can\n> always be\n> > sent, even not in response to others, so it is not that this gives you an\n> > acknowledgement the mempool is updated?\n>\n> A simple guarantee of 1:1 correspondence between request and response.\n>  The bitcoin protocol sometimes simply elides a response when the\n> response would be empty, and this makes it difficult to know whether a\n> request is timing out or already processed.\n>\n> Sending a ping(nonce) after each P2P command is another way of achieving\n> same :)\n>\n>\n\nIs there a problem with sending unrecognized messages to nodes?   If we\ncreate a new message type specifically asking for memory pool transactions,\nand we broadcast it to all nodes that we are connected to, and none of them\nrespond, then either there are no tx in their memory pools, or they don't\nrecognize the message and ignore it.  Either way, you're not going to get\nany extra information out of them.  If you really care, a simple ping can\nidentify whether they're still connected and should've responded (as Jeff\nsaid).\n\nAs long as the older node won't cut you off for sending one unrecognized\nrequest, it seems that you can get by fine without requiring that bit.  I\nguess it depends on the utility of definitively identifying whether a node\nsupports the functionality.  I personally don't feel like it's critical,\nespecially considering that this is most useful only during the transient\nperiod when it's not normal for nodes to support it yet.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120816/adc8bbd9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 35: add mempool message",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Amir Taaki",
                "Alan Reiner",
                "Stefan Thomas",
                "Pieter Wuille"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 27531
        }
    },
    {
        "title": "[Bitcoin-development] Warning to rawtx creators: bug in SIGHASH_SINGLE",
        "thread_messages": [
            {
                "author": "Matt Corallo",
                "date": "2012-08-20T16:06:14",
                "message_text_only": "If you are playing around with the current rawtx API, be careful using\nSIGHASH_SINGLE:\n\nWhen parsing a transaction input, which uses a SIGHASH_SINGLE signature,\nand the given input's index is >= the total number of outputs in the\ncurrent transaction, bitcoind doesn't sign anything useful, it signs the\nconstant 1.\n\nThus, if anyone were to create such an invalid transaction, any future\noutputs to the public key which created the signature would be\nimmediately steal-able by anyone.\n\nThe conclusion on how to fix the issue was to fix the rawtx API to block\nsuch transactions instead of creating a hardfork-risk or further\ncomplicating transaction verification.\n\nCode (in script.cpp:SignatureHash, under SIGHASH_SINGLE):\n        if (nOut >= txTmp.vout.size())\n        {\n            printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n            return 1;\n        }\n\nMatt"
            }
        ],
        "thread_summary": {
            "title": "Warning to rawtx creators: bug in SIGHASH_SINGLE",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 884
        }
    },
    {
        "title": "[Bitcoin-development] Full Disclosure: CVE-2012-2459 (block merkle calculation exploit)",
        "thread_messages": [
            {
                "author": "Forrest Voight",
                "date": "2012-08-22T02:25:20",
                "message_text_only": "Since at least 80% of the Bitcoin network is now protected against\nthis attack, I've been given permission to disclose it:\n\n\nThe Merkle hash implementation that Bitcoin uses to calculate the\nMerkle root in a block header is flawed in that one can easily\nconstruct multiple lists of hashes that map to the same Merkle root.\nFor example, merkle_hash([a, b, c]) and merkle_hash([a, b, c, c])\nyield the same result. This is because, at every iteration, the Merkle\nhash function pads its intermediate list of hashes with the last hash\nif the list is of odd length, in order to make it of even length.\n\nAnd so, the Merkle root function can be effectively preimaged by\nchanging the input so that one of the intermediate lists is of even\nlength with the last two elements equal (where originally it was of\nodd length with a last element equal to the earlier mentioned two). As\nwas later noted, this extends to any input length that is not a power\nof two: merkle_hash([a, b, c, d, e, f]) == merkle_hash([a, b, c, d, e,\nf, e, f]). Note that to maintain the same root hash, the only\nflexibility that exists is duplication of elements.\n\nAs a result, two blocks can easily be created that have the same block\nhash, though one can be valid and the other invalid, by duplicating\none or more of the transactions in a way that maintains the Merkle\nroot hash. Duplicating any transaction will make the block invalid,\nsince the block double spends a certain past transaction output.\n\nAn unpatched Bitcoin installation can be permanently wedged at its\ncurrent highest block using this and the fact that Bitcoin caches\norphan blocks in a disk-backed database. To do so, the attacker must\nsend it a valid block (that will eventually make it into the\nblockchain) made invalid by duplicating one of the transactions in a\nway that preserves the Merkle root. The attacker doesn't even need to\nmine their own block - instead, they can listen for a block, then\nmutate it in this way, and pass it on to their peers.\n\nOnce the victim receives this invalid block, they will cache it on\ndisk, attempt to process it, and reject it as invalid. Re-requesting\nthe block will not be even attempted since Bitcoin believes that it\nalready has the block, since it has one with the same hash. Bitcoin\neventually displays the \"WARNING: Displayed transactions may not be\ncorrect!  You may need to upgrade, or other nodes may need to\nupgrade.\" warning when the blockchain extends further beyond the\nreceived invalid block.\n\nThe problem was fixed by Gavin Andresen in Bitcoin commit be8651d [1]\nby rejecting blocks with duplicate transactions in CheckBlock,\npreventing them from being cached at all.\n\n\nCheers,\nForrest Voight\nhttp://forre.st/\n\n[1]: https://github.com/bitcoin/bitcoin/commit/be8651dde7b59e50e8c443da71c706667803d06d"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-08-22T02:53:21",
                "message_text_only": "On Wednesday, August 22, 2012 2:25:20 AM Forrest Voight wrote:\n> An unpatched Bitcoin installation can be permanently wedged at its\n> current highest block using this and the fact that Bitcoin caches\n> orphan blocks in a disk-backed database. To do so, the attacker must\n> send it a valid block (that will eventually make it into the\n> blockchain) made invalid by duplicating one of the transactions in a\n> way that preserves the Merkle root. The attacker doesn't even need to\n> mine their own block - instead, they can listen for a block, then\n> mutate it in this way, and pass it on to their peers.\n\nFrom the mining perspective, the unpatched install might not be simply wedged: \nit will also follow a competing smaller blockchain. An attacker could have \nused this exploit against a number of large miners (say about 40% or so) and \nexchanges to pull off any number of double-spend attacks until the miners \nnoticed they had been forked and fixed their bitcoind. That is, the attacker \ncould easily hijack as much of the miners has he wanted for his own purposes \nincluding phony 6+ confirmation transactions. On a more subtle level, the \nattacker could target certain blocks they wanted orphans by performing this \nattack on a majority of miners with the \"tip\" block he wanted orphaned.\n\nThis vulnerability is also the reason why Eloipool (the software behind \nEligius, EclipseMC, TripleMining, and other pools) has attempted to produce \nblocks with only transaction counts that are powers of two; such blocks cannot \nbe used for an attack even against vulnerable clients.\n\nLuke"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-08-22T08:10:29",
                "message_text_only": "Thank you for practicing responsible disclosure.\n\nNow the vulnerability is out in the open, could the code please be updated\nto contain the information here, but in the comments? Gavins commit merely\nmentions there is a DoS attack without discussing further what it involves,\nalso, the vulnerability of the merkle hash function should ideally be noted\ninside it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120822/78ba1b08/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Full Disclosure: CVE-2012-2459 (block merkle calculation exploit)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Mike Hearn",
                "Forrest Voight"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4912
        }
    },
    {
        "title": "[Bitcoin-development] Please help test: 0.7.0 release candidate 1",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-08-28T20:00:47",
                "message_text_only": "Bitcoin version 0.7.0 release candidate 1 binaries are now available\nfor download at:\n  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.7.0/test/\n\nPlease use the issue tracker at\nhttps://github.com/bitcoin/bitcoin/issues to report bugs.\n\nNotable changes:\n\nQt GUI\n------\n* Add UI RPC console / debug window\n* Re-Enable URI handling on Windows, add safety checks and tray-notifications\n* Add 2 labels to the overviewpage that display Wallet and Transaction\nstatus (obsolete or current)\n* Extend the optionsdialog (e.g. language selection) and re-work it to\na tabbed UI\n* Merge sign/verify message into a single window with tabbed UI\n* Improve error reporting at startup\n* Fine-grained UI updates for a much smoother UI during block downloads\n* Reorganize tray icon menu into more logical order\n* Persistently poll for balance change when number of blocks changed\n* Much better translations\n* Added 'immature balance' display on the overview page\n* (Windows only): enable ASLR and DEP for bitcoin-qt.exe\n* (Windows only): add meta-data to bitcoin-qt.exe (e.g. description)\n\nBitcoin Improvement Proposals implemented\n-----------------------------------------\nBIP 22 - 'getblocktemplate', 'submitblock' RPCs\n\nJSON-RPC API\n------------\n* Internal HTTP server is now thread-per-connection, rather than\n  a single-threaded queue that would stall on network I/O.\n* Internal HTTP server supports HTTP/1.1, pipelined requests and\n  connection keep-alive.\n* Support JSON-RPC 2.0 batches, to encapsulate multiple JSON-RPC requests\n  within a single HTTP request.\n* IPv6 support\n* Added raw transaction API.  See https://gist.github.com/2839617\n* Added 'getrawmempool', to list contents of TX memory pool\n* Added 'getpeerinfo', to list data about each connected network peer\n* Added 'listaddressgroupings' for better coin control\n* Rework gettransaction, getblock calls. 'gettransaction' responds for\n  non-wallet TXs now.\n* Remove deprecated RPC 'getblocknumber'\n* New blockchain checkpoint at block 193,000\n* listtransactions output now displays \"smart\" times for transactions,\n  and 'blocktime' and 'timereceived' fields were added\n\n\nP2P networking\n--------------\n* IPv6 support\n* Tor hidden service support\n* Attempts to fix \"stuck blockchain download\" problems\n* Replace BDB database \"addr.dat\" with internally-managed \"peers.dat\"\n  file containing peer address data.\n* Lower default send buffer from 10MB to 1MB\n* proxy: SOCKS5 by default\n* Support connecting by hostnames passed to proxy (-proxydns)\n* Add -seednode connections, and use this for -dnsseed + -proxydns\n* Added -externalip and -discover\n* Add -onlynet to connect only to a given network (IPv4, IPv6, or Tor)\n* Separate listening sockets, -bind=<addr>\n\n\nInternal codebase\n-----------------\n* Additional unit tests\n* Compile warning fixes\n\n\nMiscellaneous\n-------------\n* Reopen debug.log upon SIGHUP\n* Bash programmable completion for bitcoind(1)\n* On supported OS's, each thread is given a useful name\n\nThanks to everybody who contributed to this release:\n=======================================\n\nChris Moore\nChristian von Roques\nDavid Joel Schwartz\nDouglas Huff\nFordy\nGavin Andresen\nGiel van Schijndel\nGregory Maxwell\nJeff Garzik\nLuke Dashjr\nMatt Corallo\nMichael Ford\nMichael Hendricks\nPeter Todd\nPhilip Kaufmann\nPieter Wuille\nR E Broadley\nRicardo M. Correia\nRune K. Svendsen\nScott Ellis\nStephane Glondu\nWladimir J. van der Laan\ncardpuncher\ncoderrr\nfanquake\ngrimd34th\nsje397\nxanatos"
            }
        ],
        "thread_summary": {
            "title": "Please help test: 0.7.0 release candidate 1",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3455
        }
    }
]