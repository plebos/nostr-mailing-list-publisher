[
    {
        "title": "[Bitcoin-development] [ANN] Bitcoin-seeder v0.1",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2012-01-01T22:43:33",
                "message_text_only": "Hello all,\n\nI've just tagged v0.1.0 of my bitcoin-seeder program on github:\n\n  https://github.com/sipa/bitcoin-seeder\n\nThis is the program powering the DNS seed on seed.bitcoin.sipa.be.\n\nIt is a crawler for the bitcoin network, with integrated DNS server.\n\nIt's not more than a preview release with only mininal functionality. Missing\nfeatures include:\n* logging\n* some configuration options\n* daemonization\n* ...\n\nIt has however been running without problem on my node for over a week now,\nso I'm releasing it. Comments and questions are welcome.\n\nThe program regularly dumps its database in dnsseed.dat, allowing fast\nreinitialization. As the program is far from finished, I do not guarantee that\nthe file format will remain compatible with future versions.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-seeder v0.1",
            "categories": [
                "Bitcoin-development",
                "ANN"
            ],
            "authors": [
                "Pieter Wuille"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 771
        }
    },
    {
        "title": "[Bitcoin-development] does \"stubbing\" off Merkle trees reduce initial download bandwidth?",
        "thread_messages": [
            {
                "author": "Elden Tyrell",
                "date": "2012-01-02T05:04:03",
                "message_text_only": "Satoshi's paper mentions that storage requirements for the blockchain \ncan be reduced by deleting transactions whose outputs have been spent.\n\nIf I understand correctly, this technique can only be used for reducing \n*storage* requirements, not *bandwidth* needed for the initial chain \ndownload by a high-security client that doesn't trust any of its peers \n-- right?\n\nThe rule is \"trust the longest valid chain of blocks\".  Part of a block \nbeing \"valid\" is that each transaction's inputs are unspent and their \nsum exceeds the transaction's outputs unless it is a coinbase.  This \ncannot be verified for \"stubbed out\" transactions -- they have outputs \nbut no inputs, and aren't coinbases.  So a paranoid client booting up \nfor the first time needs to be given an un-stubbed chain, right?\n\nOf course, if a client decided to accept a stubbed blocks only when the \nsum of the difficulties in the blocks after it exceeds some number N, \nthen attacking it could be made very expensive by picking a large \nenough N.\n\nPlease let me know if I have misunderstood something."
            },
            {
                "author": "Christian Decker",
                "date": "2012-01-02T13:31:19",
                "message_text_only": "It can speed up the initial chain download. A newly created wallet will\nhave only new key-pairs, hence no incoming transactions (unless we have a\nkey collision, which is unlikely). So there is no need for a bootstrapping\nnode to download the chain with transactions. The chain itself can be\nverified without the transactions. Later full blocks would be required to\ndetect usable inputs for future outgoing transactions. As long as you\nverify the very last blocks in the chain you can be sure that all\npreceeding blocks were also valid.\n\nHTH,\nChris\n\nOn Mon, Jan 2, 2012 at 6:04 AM, Elden Tyrell <tyrell.elden at gmail.com> wrote:\n\n> Satoshi's paper mentions that storage requirements for the blockchain\n> can be reduced by deleting transactions whose outputs have been spent.\n>\n> If I understand correctly, this technique can only be used for reducing\n> *storage* requirements, not *bandwidth* needed for the initial chain\n> download by a high-security client that doesn't trust any of its peers\n> -- right?\n>\n> The rule is \"trust the longest valid chain of blocks\".  Part of a block\n> being \"valid\" is that each transaction's inputs are unspent and their\n> sum exceeds the transaction's outputs unless it is a coinbase.  This\n> cannot be verified for \"stubbed out\" transactions -- they have outputs\n> but no inputs, and aren't coinbases.  So a paranoid client booting up\n> for the first time needs to be given an un-stubbed chain, right?\n>\n> Of course, if a client decided to accept a stubbed blocks only when the\n> sum of the difficulties in the blocks after it exceeds some number N,\n> then attacking it could be made very expensive by picking a large\n> enough N.\n>\n> Please let me know if I have misunderstood something.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex\n> infrastructure or vast IT resources to deliver seamless, secure access to\n> virtual desktops. With this all-in-one solution, easily deploy virtual\n> desktops for less than the cost of PCs and save 60% on VDI infrastructure\n> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120102/d90a3da4/attachment.html>"
            },
            {
                "author": "Elden Tyrell",
                "date": "2012-01-02T22:23:16",
                "message_text_only": "On 2012-01-02 05:31:19 -0800, Christian Decker said:\n> Later full blocks would be required to detect usable inputs for future \n> outgoing transactions.\n\nEr, yes, this is what I meant; I guess I should have been more specific.\n\nSo, a paranoid client cannot confirm reciept of coins until it has an \nunstubbed copy of the entire chain.  It can do other things (like send \ncoins) using a stubbed chain, but it needs the whole unstubbed chain in \norder to be sure that incoming coins haven't already been spent.\n\nThanks for confirming this."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-02T22:41:10",
                "message_text_only": "On Mon, Jan 2, 2012 at 5:23 PM, Elden Tyrell <tyrell.elden at gmail.com> wrote:\n> On 2012-01-02 05:31:19 -0800, Christian Decker said:\n>> Later full blocks would be required to detect usable inputs for future\n>> outgoing transactions.\n>\n> Er, yes, this is what I meant; I guess I should have been more specific.\n>\n> So, a paranoid client cannot confirm reciept of coins until it has an\n> unstubbed copy of the entire chain. \u00a0It can do other things (like send\n> coins) using a stubbed chain, but it needs the whole unstubbed chain in\n> order to be sure that incoming coins haven't already been spent.\n>\n> Thanks for confirming this.\n\n\nEr, no\u2014  if a node controls the private keys for a transaction, and\nthat transaction makes it into the chain then it can safely assume\nthat its unspent (at least once its buried a few blocks into the\nchain).  This is the essence of a SPV node.\n\nWhat it can't do is perform this function for txn which aren't its\nown. Though the system could be extended in a compatible manner to\nmake this possible: https://bitcointalk.org/index.php?topic=21995.0"
            },
            {
                "author": "Elden Tyrell",
                "date": "2012-01-03T01:39:09",
                "message_text_only": "On 2012-01-02 14:41:10 -0800, Gregory Maxwell said:\n> make this possible: https://bitcointalk.org/index.php?topic=21995.0\n\nNeat!  I had a similar idea but you've clearly beat me to [a big part of] it.\n\n\n> Er, no\u2014  if a node controls the private keys for a transaction, and\n> that transaction makes it into the chain then it can safely assume\n> that its unspent (at least once its buried a few blocks into the\n> chain).\n\nI'm not so sure about that.  If you accept X successor blocks as proof \nthat none of the transactions in a block re-used an output, then the \ncost of attacking is X*50BTC since the hashpower needed for the attack \ncould have earned that much reward.\n\nHowever, an attacker could use the same faked X-block sequence to \nattack multiple clients by putting several double-spend transactions in \nthe first faked block.  This would spread out the cost over more than \none attack.  So simply checking that the value of the transaction is \nless than X*50 isn't necessarily enough, although the logistics of the \nattack aren't exactly easy.\n\nThere's also the question of knowing what the difficulty for those X \nblocks ought to be.  If the attacker controls your network connection \n(e.g. your ISP attacks you) you wouldn't be able to get a second \nopinion on how high the difficulty ought to be, and might get fooled by \nX very-low-difficulty blocks that were each produced with a lot less \nthan 50BTC worth of hashpower.\n\n  - e"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-01-05T23:30:16",
                "message_text_only": "This thread is discussing two unrelated things.\n\nYour first email asked about transaction pruning (\"stubbing\"). You're\ncorrect. This doesn't do anything for initial chain download bandwidth or\ntime. In fact it makes it slower because you have the overhead of deleting\nthe old transactions. It exists purely to save disk space.\n\nChristians reply is about simplified payment verification (SPV) mode. It is\nunrelated to transaction pruning. SPV clients can download only the chain\nheaders with no bodies all the way from the genesis block until the\ncreation time of their youngest key. This does reduce initial setup time\nand in fact is now implemented in BitCoinJ, but it's still linear in the\nlength of Bitcoins life, so that's ultimately unsustainable. You need a\nregular series of checkpoints signed by a trusted developer and a circular\nblock store to have truly bounded overheads. The merkle tree is still\nuseful because it allows for SPV clients to receive only the transactions\nof interest yet have nearly the same assurances that downloading full\nblocks would give - remote nodes can now hide transactions from you (dos)\nbut not invent new ones.\n\nSPV clients do not use \"number of blocks on top\" as a way to decide\nvalidity. They look for the best chain they can find, same as a regular\nnode does. As Satoshis paper says, if an SPV node has access to the P2P\nnetwork and is also talking to you, you can defraud it for as long as you\ncan dominate the networks hash power (51% attack) because you can create a\nharder chain than everyone else can. However your invalid blocks won't be\naccepted by the rest of the network regardless of how many there are or how\nmuch work they represent, so as soon as you stop dominating the network the\ncorrect chain will catch up and replace yours, resulting in the fraud being\ndetected and shown to the SPV user.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120106/d56bcb87/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "does \"stubbing\" off Merkle trees reduce initial download bandwidth?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Elden Tyrell",
                "Gregory Maxwell",
                "Christian Decker"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 8713
        }
    },
    {
        "title": "[Bitcoin-development] Alternative to OP_EVAL",
        "thread_messages": [
            {
                "author": "Stefan Thomas",
                "date": "2012-01-02T15:14:32",
                "message_text_only": "The OP_EVAL discussion went into some private discussion for a bit, so \nhere is a summary of what we talked about.\n\nRoconnor pointed out that the currently proposed OP_EVAL removes the \nability to statically reason about scripts. Justmoon pointed out that \nthis is evidenced by the changes to GetSigOpCount:\n\nCurrently, the client first counts the number of sigops and if it is \nover a certain limit, it doesn't execute the script at all. This is no \nlonger possible with OP_EVAL, since OP_EVAL can stand for any number of \nother operations, which might be part of some piece of data. The script \nthat is executed by OP_EVAL can be changed (polymorphic code). Gavin's \npatch deals with this, by counting the sigops at runtime and aborting \nonly after the limit has been reached.\n\nHere is an example for a script that based on naive counting contains no \nsigops, but in fact contains 20:\n\n[20 signatures] 20 [pubkey] OP_DUP OP_DUP OP_2DUP OP_3DUP OP_3DUP     \nOP_3DUP OP_3DUP OP_3DUP 20 \"58959998C76C231F\" OP_RIPEMD160 OP_EVAL\n\nRIPEMD160( 58 95 99 98 C7 6C 23 1F )\n\nhashes to\n\nAE4C10400B7DF3A56FE2B32B9906BCF1B1AFE975\n\nwhich OP_EVAL interprets as\n\nOP_CHECKMULTISIG \"400B7DF3A56FE2B32B9906BCF1B1AFE9\" OP_DROP\n\nThe nonce 58959998C76C231F was generated using this code: \nhttps://gist.github.com/1546061\n\nGavin and Amir argued that it is possible to \"dry run\" the script, \navoiding the expensive OP_CHECKSIG operation and running only the other \nvery cheap operations. However, sipa pointed out that in the presence of \nan OP_CHECKSIG a dry runner cannot predict the outcome of conditional \nbranches, so it has to either do the OP_CHECKSIG (and become just a \nregular execution) or it has to follow both branches. Roconnor and \njustmoon suggested the following script to illustrate this point:\n\n[sig] [pubkey]\n[some data]\n[sig] [pubkey] OP_CHECKSIG OP_IF OP_HASH160 OP_ELSE OP_HASH256 OP_ENDIF\n(previous line repeated 33 times with different sigs/pubkeys)\nOP_EVAL\n\nThis script is valid assuming that the resulting hash from the branch \nthat is chosen based on what signatures are valid contains an \nOP_CHECKSIG. (And the initial [sig] and [pubkey] are valid.) But a dry \nrunner trying to count how many OP_CHECKSIGs this script contains would \nrun into the first OP_CHECKSIG OP_IF and have to run both branches. In \nboth branches it would again encounter a OP_CHECKSIG OP_IF and run all \nfour branches, etc. In total it has to run (2^33 - 2) * 1.5 SHA256 \noperations (8 GHash) and 2^32 - 1 RIPEMD160 operations. Therefore we now \nbelieve a dry runner is not possible or at least too complicated to be \ninvolved in protocol rules such as the sigops limit.\n\nAs a result people are now on a spectrum from those who feel strongly \nthat static analysis is an important property and not something to give \nup easily all the way to those who think it's superfluous and the other \nside is just unnecessarily delaying OP_EVAL deployment.\n\nOne thing I want to note is that static analysis is a property for which \nthere is a better argument than for other, weaker properties, such as \nlimited recursion depth. Bitcoin currently allows you to:\n\n* Tell if a script contains a specific opcode or not\n* Count how many times a script will execute an operation at most\n* Count how many total operations a script will execute at most\n* Count how many signatures a script will execute at most\n* Find the maximum length of a datum pushed onto the stack\n* Find the maximum number of items that can be pushed onto the stack\n* Find the maximum size (in bytes) of the stack\n* Calculate how long a script will run at most\n\nOP_EVAL as proposed makes these upper bounds almost meaningless as it \ncan contain, indirectly, up to 32 instances of any other opcode. (About \n3-6 instances are currently practical.) The only way to answer these \nquestions would then be to fully execute the script.\n\nSuppose we want to one day allow arbitrary scripts as IsStandard, but \nput constraints on them, such as enforcing a subset of allowed opcodes. \n(See list above for other possible restrictions.) If we want to include \nOP_EVAL in the set of allowed opcodes, it's important that OP_EVAL is \nimplemented in a way that allows static analysis, because we can then \nallow it while still maintaining other restrictions.\n\nIf proponents of the current implementation want to argue that we don't \nneed static analysis now, the burden is on them to show how we could \nretrofit it when/if we get to this point or why they think we will never \nwant to allow some freedom in IsStandard that includes OP_EVAL.\n\nThere are several proposals for OP_EVAL that allow static analysis:\n\n* Using a fixed position reference prefix (sipa)\n* Using an execute bit on data set by an opcode (justmoon)\n* Using OP_CODEHASH (roconnor)\n* Using OP_CHECKEDEVAL (sipa)\n* Using OP_HASH160 OP_EQUALVERIFY as a special sigPubKey (gavinandresen)\n\nLet's fully develop these proposals and see how much of a hassle it \nwould actually be to get a statically verifiable OP_EVAL. I think that's \na prerequisite for having the argument on whether it is *worth* the hassle.\n\n(Update: Gavin's latest proposal looks *very* good, so that may settle \nthe debate quickly.)\n\n\n\n\nOn 12/30/2011 6:19 PM, roconnor at theorem.ca wrote:\n> On Sat, 31 Dec 2011, Chris Double wrote:\n>\n>> On Fri, Dec 30, 2011 at 5:42 AM, <roconnor at theorem.ca> wrote:\n>>> Basically OP_DUP lets you duplicate the code on the stack and that \n>>> is the\n>>> key to looping.  I'm pretty sure from here we get get Turing \n>>> completeness.\n>>> Using the stack operations I expect you can implement the SK-calculus\n>>> given an OP_EVAL that allows arbitrary depth.\n>>>\n>>> OP_EVAL adds dangerously expressive power to the scripting language.\n>>\n>> If you look at the archives of the concatenative programming mailing\n>> list [1] you'll see lots of examples of people creating stack\n>> languages with minimal operations that exploit similar functionality\n>> to reduce the required built in operations. The discussion on the list\n>> is mostly about stack based languages where programs can be pushed on\n>> the stack and executed (eg. Joy [2]/Factor/Some Forths).\n>>\n>> I don't think the scripting engine in bitcoin has the ability to\n>> concatenate, append or otherwise manipulate scripts on the stack to be\n>> eval'd though does it?\n>\n> It will limited ability manipulate scripts on the stack through the \n> use of arithmetic and hashing operations, and if OP_CAT, OP_SUBSTR and \n> friends are ever restored, it will have even more abilities.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex\n> infrastructure or vast IT resources to deliver seamless, secure access to\n> virtual desktops. With this all-in-one solution, easily deploy virtual\n> desktops for less than the cost of PCs and save 60% on VDI infrastructure\n> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120102/5e4eb4bb/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-01-02T15:59:00",
                "message_text_only": "Here are my latest thoughts on a safer OP_EVAL alternative, inspired\nby all the ideas and agitated IRC and email\ndiscussions of the last week or so:\n\nGoal:  Let users publish a short \"funding address\" that is the hash of\nan arbitrary redemption Script revealed when they spend the funds,\nimplemented in a backwards-compatible-in-the-blockchain way.\n\nProposal:\n\nA new 'standard' transaction type, \"pay to Script hash\":\n\nscriptPubKey:  HASH160 <push-20-byte-hash>  EQUAL\n\nRedeemed with the same scriptSig as the OP_EVAL proposal:\n<signatures> <serialized Script>\n\nOld clients/miners will ignore <signatures> and just validate that the\nhash of <serialized Script> matches.\n\nNew clients/miners will recognize the new type of transaction and will\ndo the following additional validation:\n\n1. Fail validation if there were any operations other than \"push data\"\nin the original scriptSig.\n2. Deserialize the top (last) item on the scriptSig stack (fail\nvalidation if it fails to deserialize properly).\n3. Run an additional validation on the deserialized script, using the\nremaining items on the scriptSig stack and the deserialized script as\nthe scriptPubKey.\n\n\n---------------\n\nAs Amir said in IRC chat today, \"the idea is a hack.... but I like it.\"\n\nI like it, too-- it is cleaner than OP_EVAL, more straightforward to\nimplement, and pretty much exactly matches the feature I care about\n(moving code from the scriptPubKey to the scriptSig). There are no\nspecial cases like \"CODESEPARATORS not allowed in <serialized\nscript>\".\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "roconnor at theorem.ca",
                "date": "2012-01-02T16:42:31",
                "message_text_only": "Seems ... acceptable from first glance.\n\nThough I propose an ammendent to either\n\n(1)\n\nmake the script: OP_NOP1 HASH160 <push-20-byte-hash> EQUAL to make it \nextremely easy to see from the first byte that this is verly likely to be \na special transaction (or more accurately if the first byte isn't \nOP_NOP1 then you immediately know it isn't a special script and can even \ndisregard the token).\n\nor\n\n(2)\n\nIf you are feel like spending another byte make the script:\nOP_NOP1 <push-special-script-version-number> <special-script>\n\nand assign 1 to this special script, making this case:\n\nOP_NOP1 OP_1 HASH160 <push-20-byte-hash> EQUAL\n\nOn Mon, 2 Jan 2012, Gavin Andresen wrote:\n\n> Here are my latest thoughts on a safer OP_EVAL alternative, inspired\n> by all the ideas and agitated IRC and email\n> discussions of the last week or so:\n>\n> Goal:  Let users publish a short \"funding address\" that is the hash of\n> an arbitrary redemption Script revealed when they spend the funds,\n> implemented in a backwards-compatible-in-the-blockchain way.\n>\n> Proposal:\n>\n> A new 'standard' transaction type, \"pay to Script hash\":\n>\n> scriptPubKey:  HASH160 <push-20-byte-hash>  EQUAL\n>\n> Redeemed with the same scriptSig as the OP_EVAL proposal:\n> <signatures> <serialized Script>\n>\n> Old clients/miners will ignore <signatures> and just validate that the\n> hash of <serialized Script> matches.\n>\n> New clients/miners will recognize the new type of transaction and will\n> do the following additional validation:\n>\n> 1. Fail validation if there were any operations other than \"push data\"\n> in the original scriptSig.\n> 2. Deserialize the top (last) item on the scriptSig stack (fail\n> validation if it fails to deserialize properly).\n> 3. Run an additional validation on the deserialized script, using the\n> remaining items on the scriptSig stack and the deserialized script as\n> the scriptPubKey.\n>\n>\n> ---------------\n>\n> As Amir said in IRC chat today, \"the idea is a hack.... but I like it.\"\n>\n> I like it, too-- it is cleaner than OP_EVAL, more straightforward to\n> implement, and pretty much exactly matches the feature I care about\n> (moving code from the scriptPubKey to the scriptSig). There are no\n> special cases like \"CODESEPARATORS not allowed in <serialized\n> script>\".\n>\n>\n\n-- \nRussell O'Connor                                      <http://r6.ca/>\n``All talk about `theft,''' the general counsel of the American Graphophone\nCompany wrote, ``is the merest claptrap, for there exists no property in\nideas musical, literary or artistic, except as defined by statute.''"
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-01-02T17:10:25",
                "message_text_only": "+1. I love this proposal.\n\nIt's two less bytes than OP_EVAL even.\nIt allows static analysis.\nIt doesn't require any change to the script interpreter. (You can do a \nstatic replacement step between parsing and execution.)\nIt allows all urgent use cases.\nIt doesn't consume a NOP. If we ever want recursion or something else, \nwe can still add OP_EVAL,... then.\n\n@roconnor:\n> 1. make the script: OP_NOP1 HASH160 <push-20-byte-hash> EQUAL to make \n> it extremely easy to see from the first byte that this is verly likely \n> to be a special transaction (or more accurately if the first byte \n> isn't OP_NOP1 then you immediately know it isn't a special script and \n> can even disregard the token). \n\nI disagree. If people actually do mean HASH160 <hash> EQUAL, let *them* \nadd a NOP. Or better to avoid NOP let them use HASH160 <hash> \nEQUALVERIFY 1. Point is, if you don't want code replacement you can \neasily break the pattern. But code replacement will be overwhelmingly \nmore common, so it should be as small as possible. Every byte matters.\n\n\nOn 1/2/2012 4:59 PM, Gavin Andresen wrote:\n> Here are my latest thoughts on a safer OP_EVAL alternative, inspired\n> by all the ideas and agitated IRC and email\n> discussions of the last week or so:\n>\n> Goal:  Let users publish a short \"funding address\" that is the hash of\n> an arbitrary redemption Script revealed when they spend the funds,\n> implemented in a backwards-compatible-in-the-blockchain way.\n>\n> Proposal:\n>\n> A new 'standard' transaction type, \"pay to Script hash\":\n>\n> scriptPubKey:  HASH160<push-20-byte-hash>   EQUAL\n>\n> Redeemed with the same scriptSig as the OP_EVAL proposal:\n> <signatures>  <serialized Script>\n>\n> Old clients/miners will ignore<signatures>  and just validate that the\n> hash of<serialized Script>  matches.\n>\n> New clients/miners will recognize the new type of transaction and will\n> do the following additional validation:\n>\n> 1. Fail validation if there were any operations other than \"push data\"\n> in the original scriptSig.\n> 2. Deserialize the top (last) item on the scriptSig stack (fail\n> validation if it fails to deserialize properly).\n> 3. Run an additional validation on the deserialized script, using the\n> remaining items on the scriptSig stack and the deserialized script as\n> the scriptPubKey.\n>\n>\n> ---------------\n>\n> As Amir said in IRC chat today, \"the idea is a hack.... but I like it.\"\n>\n> I like it, too-- it is cleaner than OP_EVAL, more straightforward to\n> implement, and pretty much exactly matches the feature I care about\n> (moving code from the scriptPubKey to the scriptSig). There are no\n> special cases like \"CODESEPARATORS not allowed in<serialized\n> script>\".\n>"
            }
        ],
        "thread_summary": {
            "title": "Alternative to OP_EVAL",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Stefan Thomas",
                "roconnor at theorem.ca",
                "Gavin Andresen"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 14136
        }
    },
    {
        "title": "[Bitcoin-development] Meeting 21:00 UTC #bitcoin-dev Freenode IRC",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-02T16:04:46",
                "message_text_only": "This meeting is to discuss the new OP_EVAL changes coming to bitcoin.\n\nA good summary of the past discussion so far by justmoon can be found:\nhttp://privatepaste.com/4088b049af\n\nHopefully this can become a weekly thing. For now this is to discuss and inform about the coming changes to bitcoin.\n\n----------\n\nWhere: Freenode IRC #bitcoin-dev\nWhen: \u00a021:00 UTC (16:00 New York time) until 22:00*\nWhat: \u00a0OP_EVAL\n\nBitcoin is starting decentralising as any healthy free thinking community\nshould. Projects are thiving and the economy is growing. New ideas are\nbeing realised and will edge out old models disruptively.\n\nMy hope is that we don't all become fractured. By having weekly regular\nmeetings, projects can harmonise in lock step. Concepts and algorithms can\nbe proposed and debated. You'd be surprised what having a scheduled regular\nplatform can achieve. A soap-box on an island in central waters.\n\nFor me, I don't have time to wade through IRC discussions, forum posts and\nmailing lists. At least if the important things are discussed in one place\nit makes bitcoin development and the system more accessible.\n\nBefore meeting:\n\n- A wiki page is created for in advance of a weekly meeting.\n- Announced on forums/mailing lists.\n- Throughout the week talking points are added to the meeting page.\n\nAfter:\n\n- Log of discussion is posted online.\n- I will type an accessible summary for the community at large on\nhttp://bitcoinmedia.com/\n- Next weekly meeting is scheduled.\n\nAmir Taaki\n\n*We can go over this hour, but this is to stop meetings dwindling off topic\ninto banal banter and stay focused."
            },
            {
                "author": "Matt Corallo",
                "date": "2012-01-02T21:24:12",
                "message_text_only": "Because many made the mistake and it isnt specified in this email, this\nmeeting is tomorrow (not 30 minutes ago).\n\nOn Mon, 2012-01-02 at 08:04 -0800, Amir Taaki wrote:\n> This meeting is to discuss the new OP_EVAL changes coming to bitcoin.\n> \n> A good summary of the past discussion so far by justmoon can be found:\n> http://privatepaste.com/4088b049af\n> \n> Hopefully this can become a weekly thing. For now this is to discuss and inform about the coming changes to bitcoin.\n> \n> ----------\n> \n> Where: Freenode IRC #bitcoin-dev\n> When:  21:00 UTC (16:00 New York time) until 22:00*\n> What:  OP_EVAL\n> \n> Bitcoin is starting decentralising as any healthy free thinking community\n> should. Projects are thiving and the economy is growing. New ideas are\n> being realised and will edge out old models disruptively.\n> \n> My hope is that we don't all become fractured. By having weekly regular\n> meetings, projects can harmonise in lock step. Concepts and algorithms can\n> be proposed and debated. You'd be surprised what having a scheduled regular\n> platform can achieve. A soap-box on an island in central waters.\n> \n> For me, I don't have time to wade through IRC discussions, forum posts and\n> mailing lists. At least if the important things are discussed in one place\n> it makes bitcoin development and the system more accessible.\n> \n> Before meeting:\n> \n> - A wiki page is created for in advance of a weekly meeting.\n> - Announced on forums/mailing lists.\n> - Throughout the week talking points are added to the meeting page.\n> \n> After:\n> \n> - Log of discussion is posted online.\n> - I will type an accessible summary for the community at large on\n> http://bitcoinmedia.com/\n> - Next weekly meeting is scheduled.\n> \n> Amir Taaki\n> \n> *We can go over this hour, but this is to stop meetings dwindling off topic\n> into banal banter and stay focused.\n> \n> ------------------------------------------------------------------------------\n> Ridiculously easy VDI. With Citrix VDI-in-a-Box, you don't need a complex\n> infrastructure or vast IT resources to deliver seamless, secure access to\n> virtual desktops. With this all-in-one solution, easily deploy virtual \n> desktops for less than the cost of PCs and save 60% on VDI infrastructure \n> costs. Try it free! http://p.sf.net/sfu/Citrix-VDIinabox\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            }
        ],
        "thread_summary": {
            "title": "Meeting 21:00 UTC #bitcoin-dev Freenode IRC",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo",
                "Amir Taaki"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4089
        }
    },
    {
        "title": "[Bitcoin-development] Meeting 10 Jan 2012 at 21:00 UTC",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-04T13:23:16",
                "message_text_only": "Hey,\n\nWill get around to that write-up. Here is the page for next Tuesday:\n\n\nhttps://en.bitcoin.it/wiki//10_Jan_2012\n\nFeel free to add talking/discussion points to the agenda."
            }
        ],
        "thread_summary": {
            "title": "Meeting 10 Jan 2012 at 21:00 UTC",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 175
        }
    },
    {
        "title": "[Bitcoin-development] Should we get some free advertising on StackOverflow?",
        "thread_messages": [
            {
                "author": "D.H.",
                "date": "2012-01-07T17:20:48",
                "message_text_only": "Hi all,\n\nStackOverflow has something that they call \"Free Vote-Based\nAdvertising for Open Source Projects\". The way it works is that a\nsuggested 220x250 pixel ad is posted here:\nhttp://meta.stackoverflow.com/questions/114442/open-source-advertising-sidebar-1h-2012.\nAs soon as it gets 6 upvotes or more it will be included in a rotation\nof ads displayed on the right hand side of the StackOverflow site.\n\n\"It must be an advertisement soliciting the participation and\ncontribution of programmers writing actual source code. This is not\nintended as a general purpose ad for consumer products which just\nhappen to be open source. It's for finding programmers who will help\ncontribute code or other programmery things (documentation, code\nreview, bug fixes, etc.).\"\n\nI remember Gavin talking about the need for testers (I don't know what\nthe need is for developers). Anyway, we could target the ad towards\nwhatever we need. If you think that this is a good idea, please post\nsome ad suggestions in this thread. Please don't post the suggestion\non StackOverflow just yet since we're not allowed to have multiple ads\nfor the same project and we'll want to make that ad a good one.\n\nD.H."
            }
        ],
        "thread_summary": {
            "title": "Should we get some free advertising on StackOverflow?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "D.H."
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1180
        }
    },
    {
        "title": "[Bitcoin-development] Pull 748 pay to script hash",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-07T17:21:15",
                "message_text_only": "https://github.com/bitcoin/bitcoin/pull/748/files\n\nI'm reading a diff of a now defunct OP_EVAL proposal with the current pay to script hash one.\n\nIt might be better for code review if the old pull is reverted and then this one re-requested. That will make it easier to see the real changes."
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-01-07T22:48:47",
                "message_text_only": "> It might be better for code review if the old pull is reverted and then this one re-requested. That will make it easier\n> to see the real changes.\n\nI count the 1 major merge then 8 commits to fix bugs or tweak\nthings...  I just tried reverting them and stopped when I got scared\nI'll accidentally revert a fix we do want to keep.\n\nInstead, I updated my gavinandresen/master github branch to the state\nof the tree just before the OP_EVAL merge, so for code review purposes\nyou can look at:\n\nhttps://github.com/gavinandresen/bitcoin-git/compare/master...pay_to_script_hash\n\nThere are unrelated 0.6 pulls in those changes, too, but it should be\npretty obvious what is what.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-01-07T23:11:14",
                "message_text_only": "OK, here is one thing:\n\nwhat is the purpose behind counting the number of sig ops after you have executed the script in ConnectInputs?\nSeems like it would be too late then.\n\n\n\n----- Original Message -----\nFrom: Gavin Andresen <gavinandresen at gmail.com>\nTo: Amir Taaki <zgenjix at yahoo.com>\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nSent: Saturday, January 7, 2012 10:48 PM\nSubject: Re: [Bitcoin-development] Pull 748 pay to script hash\n\n> It might be better for code review if the old pull is reverted and then this one re-requested. That will make it easier\n> to see the real changes.\n\nI count the 1 major merge then 8 commits to fix bugs or tweak\nthings...\u00a0 I just tried reverting them and stopped when I got scared\nI'll accidentally revert a fix we do want to keep.\n\nInstead, I updated my gavinandresen/master github branch to the state\nof the tree just before the OP_EVAL merge, so for code review purposes\nyou can look at:\n\nhttps://github.com/gavinandresen/bitcoin-git/compare/master...pay_to_script_hash\n\nThere are unrelated 0.6 pulls in those changes, too, but it should be\npretty obvious what is what.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-01-08T01:12:35",
                "message_text_only": "> what is the purpose behind counting the number of sig ops after you have executed the script in ConnectInputs?\n> Seems like it would be too late then.\n\nThe purpose is to comply with the \"a block shall not contain more than\nMAX_BLOCK_SIGOPS (20,000)\" rule, under both the old way of counting\n(look at the scriptPubKeys and count CHECKMULTISIGs as 20 sigops no\nmatter what) and the new way (look at both scriptPubKeys and\npay-to-script-hash scripts in the scriptSig, but count CHECKMULTISIGS\npreceded by OP_1/2/3/... as 1/2/3 operations).\n\nRE: too late:\n\nExcellent point. I'll refactor ConnectInputs further, and do something like:\n\nFetchInputs()\nAreInputsStandard() <-- reject from memory pool if nonstanard\nComputeSigOps()\nComputeFees() <-- reject if too little fees per byte / sigop\nConnectInputs()\n\nPieter's compressed-public-keys patch (which was just pulled)\ninteracts with pay-to-script-hash to make ECDSA denial-of-service\nattempts less expensive; I think we need to think hard again about\ntransaction fees before releasing 0.6, and maybe tweak the fee policy\nso denial-of-service attacks using compressed public keys and 1-of-3\nCHECKMULTISIG transactions is expensive enough to deter would-be\nattackers.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-01-08T16:12:16",
                "message_text_only": "On Sat, Jan 07, 2012 at 08:12:35PM -0500, Gavin Andresen wrote:\n> Pieter's compressed-public-keys patch (which was just pulled)\n\nUhm, was it? I just added some unit tests though.\n\n> interacts with pay-to-script-hash to make ECDSA denial-of-service\n> attempts less expensive; I think we need to think hard again about\n> transaction fees before releasing 0.6, and maybe tweak the fee policy\n> so denial-of-service attacks using compressed public keys and 1-of-3\n> CHECKMULTISIG transactions is expensive enough to deter would-be\n> attackers.\n\nVery true; compressed public keys are 32 bytes smaller (so more keys\nfit in a script), and are about 5% more CPU intensive to verify.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "Pull 748 pay to script hash",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille",
                "Gavin Andresen",
                "Amir Taaki"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 4062
        }
    },
    {
        "title": "[Bitcoin-development] IRC meeting Tuesday tomorrow 21:00 UTC",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-09T10:08:43",
                "message_text_only": "Hey,\n\nI made a list of things to ask about:\n\nhttps://en.bitcoin.it/wiki//10_Jan_2012\n\nFeel free to add things to the agenda. Those are just random things I wanted to discuss."
            }
        ],
        "thread_summary": {
            "title": "IRC meeting Tuesday tomorrow 21:00 UTC",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 174
        }
    },
    {
        "title": "[Bitcoin-development] Compressed public keys: import/export and test cases",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2012-01-09T13:53:51",
                "message_text_only": "Hello all,\n\npull #649 now also defines an import/export format for private keys\nwhose public key is compressed.\n\nRationale: even though a compressed and uncompressed public key share\nthe same actual 32-byte secret, the import/export format needs a\nmarker that states whether the corresponding compressed or\nuncompressed public key should be used (since they have different\naddresses).\n\nFormat:\n* uncompressed: 0x80 + [32-byte secret] + [4 bytes of Hash() of\nprevious 33 bytes], base58 encoded\n* compressed: 0x80 + [32-byte secret] + 0x01 + [4 bytes of Hash()\nprevious 34 bytes], base58 encoded\n\nAny comments or suggestions regarding this format? Below I've included\n3 cases to test implementations with.\n\nTest cases:\n\ncase 1:\n  * secret (hex):\n1111111111111111111111111111111111111111111111111111111111111111\n  * uncompressed:\n    * secret (base58): 5HwoXVkHoRM8sL2KmNRS217n1g8mPPBomrY7yehCuXC1115WWsh\n    * pubkey (hex):\n044f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa385b6b1b8ead809ca67454d9683fcf2ba03456d6fe2c4abe2b07f0fbdbb2f1c1\n    * address (base58): 1MsHWS1BnwMc3tLE8G35UXsS58fKipzB7a\n  * compressed:\n    * secret (base58): KwntMbt59tTsj8xqpqYqRRWufyjGunvhSyeMo3NTYpFYzZbXJ5Hp\n    * pubkey (hex):\n034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa\n    * address (base58): 1Q1pE5vPGEEMqRcVRMbtBK842Y6Pzo6nK9\n\ncase 2:\n  * secret (hex):\ndddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\n  * uncompressed:\n    * secret (base58): 5KVzsHJiUxgvBBgtVS7qBTbbYZpwWM4WQNCCyNSiuFCJzYMxg8H\n    * pubkey (hex):\n04ed83704c95d829046f1ac27806211132102c34e9ac7ffa1b71110658e5b9d1bdedc416f5cefc1db0625cd0c75de8192d2b592d7e3b00bcfb4a0e860d880fd1fc\n    * address (base58): 1JyMKvPHkrCQd8jQrqTR1rBsAd1VpRhTiE\n  * compressed:\n    * secret (base58): L4ezQvyC6QoBhxB4GVs9fAPhUKtbaXYUn8YTqoeXwbevQq4U92vN\n    * pubkey (hex):\n02ed83704c95d829046f1ac27806211132102c34e9ac7ffa1b71110658e5b9d1bd\n    * address (base58): 1NKRhS7iYUGTaAfaR5z8BueAJesqaTyc4a\n\ncase 3:\n  * secret (hex):\n47f7616ea6f9b923076625b4488115de1ef1187f760e65f89eb6f4f7ff04b012\n  * uncompressed:\n    * secret (base58): 5JMys7YfK72cRVTrbwkq5paxU7vgkMypB55KyXEtN5uSnjV7K8Y\n    * pubkey (hex):\n042596957532fc37e40486b910802ff45eeaa924548c0e1c080ef804e523ec3ed3ed0a9004acf927666eee18b7f5e8ad72ff100a3bb710a577256fd7ec81eb1cb3\n    * address (base58): 1PM35qz2uwCDzcUJtiqDSudAaaLrWRw41L\n  * compressed:\n    * secret (base58): KydbzBtk6uc7M6dXwEgTEH2sphZxSPbmDSz6kUUHi4eUpSQuhEbq\n    * pubkey (hex):\n032596957532fc37e40486b910802ff45eeaa924548c0e1c080ef804e523ec3ed3\n    * address (base58): 19ck9VKC6KjGxR9LJg4DNMRc45qFrJguvV\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "Compressed public keys: import/export and test cases",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2627
        }
    },
    {
        "title": "[Bitcoin-development] some feedbacks",
        "thread_messages": [
            {
                "author": "Roger Pack",
                "date": "2012-01-14T15:19:29",
                "message_text_only": "Since I seemingly could not find the \"create new post\" link on the\nforum, resorting to here...\n\na few feedbacks:\n1) It would be helpful I think to, when the client first starts, to\nask \"do you want to set a password to encrypt your wallet'? (if yes\ntake them to the encrypt wallet dialog).\nI had been confused, since I knew 0.5 had \"wallet encryption\" I\nassumed it would prompt on startup...\nAlso nice might be a message \"first we have to synchronize with the\nnetwork, this will take several hours, then you'll be ready to go\" or\nsome odd.\n2) After synchronizing with the network, I believe the OS X client\nstarted *always* crashing on startup.  Lost the backtrace but will\npost it here if I can reproduce it.\n3) With the forum I can't seemingly reply or create new posts? (rogerdpack)\n\nCheers!\n-roger-"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-01-15T15:22:27",
                "message_text_only": "On Sat, Jan 14, 2012 at 08:19:29AM -0700, Roger Pack wrote:\n> Since I seemingly could not find the \"create new post\" link on the\n> forum, resorting to here...\n> \n> a few feedbacks:\n> 1) It would be helpful I think to, when the client first starts, to\n> ask \"do you want to set a password to encrypt your wallet'? (if yes\n> take them to the encrypt wallet dialog).\n> I had been confused, since I knew 0.5 had \"wallet encryption\" I\n> assumed it would prompt on startup...\n> Also nice might be a message \"first we have to synchronize with the\n> network, this will take several hours, then you'll be ready to go\" or\n> some odd.\n\nThis sounds like an easy improvement. Anyone interested in implementing\nsuch a minimal \"first-use wizard\" ?\n\n> 2) After synchronizing with the network, I believe the OS X client\n> started *always* crashing on startup.  Lost the backtrace but will\n> post it here if I can reproduce it.\n\nPlease do.\n\n> 3) With the forum I can't seemingly reply or create new posts? (rogerdpack)\n\nI believe posting to the forum is restricted to certain boards for newbies.\n\n-- \nPIeter"
            }
        ],
        "thread_summary": {
            "title": "some feedbacks",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Roger Pack",
                "Pieter Wuille"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1891
        }
    },
    {
        "title": "[Bitcoin-development] bitcoin.org SOPA/PIPA blackout",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-15T22:09:54",
                "message_text_only": "How is this not the most important world issue right now?\n\nEVERYTHING is under threat. Go nuclear to show our nerd-rage.\n\nEverybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy."
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-01-15T22:37:05",
                "message_text_only": "On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> How is this not the most important world issue right now?\n>\n> EVERYTHING is under threat. Go nuclear to show our nerd-rage.\n>\n> Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.\n\n\nThere are always issues that raise ire and moral outrage.  I would\nrather that bitcoin.org stay apolitical -- our users will appreciate\nthis in the long run.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-16T01:19:34",
                "message_text_only": "On Sunday, January 15, 2012 5:37:05 PM Jeff Garzik wrote:\n> There are always issues that raise ire and moral outrage.  I would\n> rather that bitcoin.org stay apolitical -- our users will appreciate\n> this in the long run.\n\nI agree (with the conclusion). There are much more important and urgent \nproblems than SOPA/PIPA that we'd need to constantly 'blackout' if we did it \nover every single problem."
            },
            {
                "author": "Wladimir",
                "date": "2012-01-16T07:35:30",
                "message_text_only": "Internet censorship *is* a threat to bitcoin, if we don't stand up for our\nrights now we deserve anything that is coming. There will be no \"long run\".\n\nOn Mon, Jan 16, 2012 at 2:19 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Sunday, January 15, 2012 5:37:05 PM Jeff Garzik wrote:\n> > There are always issues that raise ire and moral outrage.  I would\n> > rather that bitcoin.org stay apolitical -- our users will appreciate\n> > this in the long run.\n>\n> I agree (with the conclusion). There are much more important and urgent\n> problems than SOPA/PIPA that we'd need to constantly 'blackout' if we did\n> it\n> over every single problem.\n>\n>\n> ------------------------------------------------------------------------------\n> RSA(R) Conference 2012\n> Mar 27 - Feb 2\n> Save $400 by Jan. 27\n> Register now!\n> http://p.sf.net/sfu/rsa-sfdev2dev2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120116/091050ce/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-16T08:12:09",
                "message_text_only": "On Mon, Jan 16, 2012 at 2:35 AM, Wladimir <laanwj at gmail.com> wrote:\n> Internet censorship *is* a threat to bitcoin, if we don't stand up for our\n> rights now we deserve anything that is coming. There will be no \"long run\".\n\nVery few people actually care if they can load that particular URL ...\nif you were talking about the forums it might matter more.   It also\nmight make sense to run some informative popup, except people are\ngoing to be seeing them all over the internet on higher traffic sites.\n\nE.g.: http://en.wikipedia.org/wiki/File:Wikipedia_SOPA_Blackout_Design_%28derivative_A%29.png"
            },
            {
                "author": "Wladimir",
                "date": "2012-01-16T08:29:07",
                "message_text_only": "On Mon, Jan 16, 2012 at 9:12 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Jan 16, 2012 at 2:35 AM, Wladimir <laanwj at gmail.com> wrote:\n> > Internet censorship *is* a threat to bitcoin, if we don't stand up for\n> our\n> > rights now we deserve anything that is coming. There will be no \"long\n> run\".\n>\n> Very few people actually care if they can load that particular URL ...\n> if you were talking about the forums it might matter more.   It also\n> might make sense to run some informative popup, except people are\n> going to be seeing them all over the internet on higher traffic sites.\n>\n\nAgreed, a notice would be enough. No need to make the entire site\ninaccessible either.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120116/29739d41/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-01-17T00:30:27",
                "message_text_only": "Bunk argument. This is an issue that affects bitcoin directly.\n\nWikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.\n\nhttp://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action\n\nThe Wikipedia community decided on a full and global blackout. Bitcoin should do the same in unison with the rest of the web- sites like Reddit, 4chan and Wikipedia.\n\nIt's funny / almost comical how you consign this to being just another issue or case of moral alarm. Sad.\n\n\n\n----- Original Message -----\nFrom: Jeff Garzik <jgarzik at exmulti.com>\nTo: Amir Taaki <zgenjix at yahoo.com>\nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nSent: Sunday, January 15, 2012 10:37 PM\nSubject: Re: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout\n\nOn Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> How is this not the most important world issue right now?\n>\n> EVERYTHING is under threat. Go nuclear to show our nerd-rage.\n>\n> Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.\n\n\nThere are always issues that raise ire and moral outrage.\u00a0 I would\nrather that bitcoin.org stay apolitical -- our users will appreciate\nthis in the long run.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-01-17T00:46:39",
                "message_text_only": "You guys are representing both extremes of the issue.  In response to \nJeff and Luke-Jr, I don't see how this is /just any other poltical \nissue/.  It strikes at the heart of everything Bitcoin is about.  \nBarring Bitcoin-specific legislation, I don't see how any legislation \ncould be more relevant to Bitcoin and the community around it.\n\nOn the other hand, Bitcoin is still a non-entity, and shouldn't get in \nthe business of making statements.  A central voice for Bitcoin gives \nthe impression that it is actually centralized, and one that has \nopinions.  Plus I wouldn't be surprised if some, heavily-invested \nBitcoin users were of the opinion that SOPA/PIPA/whatever could be a \nhuge profit for themselves:  once SOPA kicks in and businesses around \nthe world start getting cut off for legit or illegitimate purposes, a \nlot of them could potentially switch to Bitcoin to keep their business \ngoing.  That could be a huge boon for Bitcoin.  You may not agree it's \nworth the tradeoff, but people are selfish and may not actually \nunderstand or even care about SOPA legislation itself.\n\nI think it's /not inappropriate/ for something to be mentioned on the \nwebsite about Bitcoin's philosophy being threatened by SOPA, but I agree \nBitcoin should avoid making any bold political stands.  Users could be \nreminded that SOPA affects yet another thing they care about, but it \nmight be better to avoid it altogether.  If any response is made, it \nshould be a very light one.\n\n-Alan\n\n\nOn 01/16/2012 07:30 PM, Amir Taaki wrote:\n> Bunk argument. This is an issue that affects bitcoin directly.\n>\n> Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.\n>\n> http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action\n>\n> The Wikipedia community decided on a full and global blackout. Bitcoin should do the same in unison with the rest of the web- sites like Reddit, 4chan and Wikipedia.\n>\n> It's funny / almost comical how you consign this to being just another issue or case of moral alarm. Sad.\n>\n>\n>\n> ----- Original Message -----\n> From: Jeff Garzik<jgarzik at exmulti.com>\n> To: Amir Taaki<zgenjix at yahoo.com>\n> Cc: \"bitcoin-development at lists.sourceforge.net\"<bitcoin-development at lists.sourceforge.net>\n> Sent: Sunday, January 15, 2012 10:37 PM\n> Subject: Re: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout\n>\n> On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki<zgenjix at yahoo.com>  wrote:\n>> How is this not the most important world issue right now?\n>>\n>> EVERYTHING is under threat. Go nuclear to show our nerd-rage.\n>>\n>> Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.\n>\n> There are always issues that raise ire and moral outrage.  I would\n> rather that bitcoin.org stay apolitical -- our users will appreciate\n> this in the long run.\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120116/5083fc3c/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2012-01-17T00:59:25",
                "message_text_only": ">  I agree Bitcoin should avoid making any bold political stands.\n\nI agree on this. Please don't turn Bitcoin project/homepage into some\npolitical agitation. Not everybody care about political attitude of main\nproject developers.\n\nslush\n\nOn Tue, Jan 17, 2012 at 1:46 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n> **\n> You guys are representing both extremes of the issue.  In response to Jeff\n> and Luke-Jr, I don't see how this is *just any other poltical issue*.  It\n> strikes at the heart of everything Bitcoin is about.  Barring\n> Bitcoin-specific legislation, I don't see how any legislation could be more\n> relevant to Bitcoin and the community around it.\n>\n> On the other hand, Bitcoin is still a non-entity, and shouldn't get in the\n> business of making statements.  A central voice for Bitcoin gives the\n> impression that it is actually centralized, and one that has opinions.\n> Plus I wouldn't be surprised if some, heavily-invested Bitcoin users were\n> of the opinion that SOPA/PIPA/whatever could be a huge profit for\n> themselves:  once SOPA kicks in and businesses around the world start\n> getting cut off for legit or illegitimate purposes, a lot of them could\n> potentially switch to Bitcoin to keep their business going.  That could be\n> a huge boon for Bitcoin.  You may not agree it's worth the tradeoff, but\n> people are selfish and may not actually understand or even care about SOPA\n> legislation itself.\n>\n> I think it's *not inappropriate* for something to be mentioned on the\n> website about Bitcoin's philosophy being threatened by SOPA, but I agree\n> Bitcoin should avoid making any bold political stands.  Users could be\n> reminded that SOPA affects yet another thing they care about, but it might\n> be better to avoid it altogether.  If any response is made, it should be a\n> very light one.\n>\n> -Alan\n>\n>\n>\n> On 01/16/2012 07:30 PM, Amir Taaki wrote:\n>\n> Bunk argument. This is an issue that affects bitcoin directly.\n>\n> Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.\n> http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action\n>\n> The Wikipedia community decided on a full and global blackout. Bitcoin should do the same in unison with the rest of the web- sites like Reddit, 4chan and Wikipedia.\n>\n> It's funny / almost comical how you consign this to being just another issue or case of moral alarm. Sad.\n>\n>\n>\n> ----- Original Message -----\n> From: Jeff Garzik <jgarzik at exmulti.com> <jgarzik at exmulti.com>\n> To: Amir Taaki <zgenjix at yahoo.com> <zgenjix at yahoo.com>\n> Cc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net> <bitcoin-development at lists.sourceforge.net> <bitcoin-development at lists.sourceforge.net>\n> Sent: Sunday, January 15, 2012 10:37 PM\n> Subject: Re: [Bitcoin-development] bitcoin.org SOPA/PIPA blackout\n>\n> On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki <zgenjix at yahoo.com> <zgenjix at yahoo.com> wrote:\n>\n>  How is this not the most important world issue right now?\n>\n> EVERYTHING is under threat. Go nuclear to show our nerd-rage.\n>\n> Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.\n>\n>  There are always issues that raise ire and moral outrage.  I would\n> rather that bitcoin.org stay apolitical -- our users will appreciate\n> this in the long run.\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/61e06bb7/attachment.html>"
            },
            {
                "author": "Cameron Garnham",
                "date": "2012-01-17T02:35:00",
                "message_text_only": "I think that bitcoin.org should remain apolitical.  However maybe it \nwould be good if the blackout to take effect on bitcointalk.org if \ntheymos and Sirius believes it is appropriate.\n\nBitcoin.org should provide bitcoin.\n\n\n\n\nOn 17/01/2012 11:59 AM, slush wrote:\n> >  I agree Bitcoin should avoid making any bold political stands.\n>\n> I agree on this. Please don't turn Bitcoin project/homepage into some \n> political agitation. Not everybody care about political attitude of \n> main project developers.\n>\n> slush\n>\n> On Tue, Jan 17, 2012 at 1:46 AM, Alan Reiner <etotheipi at gmail.com \n> <mailto:etotheipi at gmail.com>> wrote:\n>\n>     You guys are representing both extremes of the issue.  In response\n>     to Jeff and Luke-Jr, I don't see how this is /just any other\n>     poltical issue/.  It strikes at the heart of everything Bitcoin is\n>     about.  Barring Bitcoin-specific legislation, I don't see how any\n>     legislation could be more relevant to Bitcoin and the community\n>     around it.\n>\n>     On the other hand, Bitcoin is still a non-entity, and shouldn't\n>     get in the business of making statements.  A central voice for\n>     Bitcoin gives the impression that it is actually centralized, and\n>     one that has opinions.  Plus I wouldn't be surprised if some,\n>     heavily-invested Bitcoin users were of the opinion that\n>     SOPA/PIPA/whatever could be a huge profit for themselves:  once\n>     SOPA kicks in and businesses around the world start getting cut\n>     off for legit or illegitimate purposes, a lot of them could\n>     potentially switch to Bitcoin to keep their business going.  That\n>     could be a huge boon for Bitcoin.  You may not agree it's worth\n>     the tradeoff, but people are selfish and may not actually\n>     understand or even care about SOPA legislation itself.\n>\n>     I think it's /not inappropriate/ for something to be mentioned on\n>     the website about Bitcoin's philosophy being threatened by SOPA,\n>     but I agree Bitcoin should avoid making any bold political\n>     stands.  Users could be reminded that SOPA affects yet another\n>     thing they care about, but it might be better to avoid it\n>     altogether.  If any response is made, it should be a very light one.\n>\n>     -Alan\n>\n>\n>\n>     On 01/16/2012 07:30 PM, Amir Taaki wrote:\n>>     Bunk argument. This is an issue that affects bitcoin directly.\n>>\n>>     Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.\n>>\n>>     http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action\n>>\n>>     The Wikipedia community decided on a full and global blackout. Bitcoin should do the same in unison with the rest of the web- sites like Reddit, 4chan and Wikipedia.\n>>\n>>     It's funny / almost comical how you consign this to being just another issue or case of moral alarm. Sad.\n>>\n>>\n>>\n>>     ----- Original Message -----\n>>     From: Jeff Garzik<jgarzik at exmulti.com>  <mailto:jgarzik at exmulti.com>\n>>     To: Amir Taaki<zgenjix at yahoo.com>  <mailto:zgenjix at yahoo.com>\n>>     Cc:\"bitcoin-development at lists.sourceforge.net\"  <mailto:bitcoin-development at lists.sourceforge.net>  <bitcoin-development at lists.sourceforge.net>  <mailto:bitcoin-development at lists.sourceforge.net>\n>>     Sent: Sunday, January 15, 2012 10:37 PM\n>>     Subject: Re: [Bitcoin-development]bitcoin.org  <http://bitcoin.org>  SOPA/PIPA blackout\n>>\n>>     On Sun, Jan 15, 2012 at 5:09 PM, Amir Taaki<zgenjix at yahoo.com>  <mailto:zgenjix at yahoo.com>  wrote:\n>>>     How is this not the most important world issue right now?\n>>>\n>>>     EVERYTHING is under threat. Go nuclear to show our nerd-rage.\n>>>\n>>>     Everybody blank your personal sites too. Americans, take to the streets. World, go scream at the US embassy.\n>>     There are always issues that raise ire and moral outrage.  I would\n>>     rather thatbitcoin.org  <http://bitcoin.org>  stay apolitical -- our users will appreciate\n>>     this in the long run.\n>>\n>\n>\n>     ------------------------------------------------------------------------------\n>     Keep Your Developer Skills Current with LearnDevNow!\n>     The most comprehensive online learning library for Microsoft\n>     developers\n>     is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,\n>     MVC3,\n>     Metro Style Apps, more. Free future releases when you subscribe now!\n>     http://p.sf.net/sfu/learndevnow-d2d\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/b2a27c23/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-17T02:25:20",
                "message_text_only": "On Monday, January 16, 2012 7:46:39 PM Alan Reiner wrote:\n> In response to Jeff and Luke-Jr, I don't see how this is /just any other\n> poltical issue/.  It strikes at the heart of everything Bitcoin is about.\n\nSorry, Bitcoin is not about the same thing to everyone. For me, Bitcoin is \nabout one thing: providing a monetary system for the Tonal number system. \nOtherwise, it would be merely an interesting project I have no real concern \nwith. To assume everyone has the same interests is a sure-fire way to prevent \nwidescale adoption. If you want Bitcoin to succeed, don't try to impose a \nsingle purpose/\"about\" on everyone using it (which a \"blackout\" would do).\n\n> Barring Bitcoin-specific legislation, I don't see how any legislation\n> could be more relevant to Bitcoin and the community around it.\n\nBitcoin is an innovative new currency. How is a bill on internet censorship \n(which is badly needed, even if not in the form of SOPA/PIPA) directly \nrelevant? I don't think it is."
            },
            {
                "author": "Vladimir Marchenko",
                "date": "2012-01-17T09:19:04",
                "message_text_only": "On 17 January 2012 00:30, Amir Taaki <zgenjix at yahoo.com> wrote:\n> ...\n> Wikipedia has far more need to remain neutral and apolitical than bitcoin ever does- you've read Satoshi's politically charged whitepaper or seen the genesis block quote.\n>\n> http://en.wikipedia.org/wiki/Wikipedia:SOPA_initiative/Action\n> ...\n\nI would like to voice my support to Amir here. It is a solidarity\ngesture and from my point of view it would be great if bitcoin related\nwebsites join the Blackout. In my view it is almost like Internet's\ngeneral strike, which is being enacted for a very good reason. To some\ndegree, ignoring it and continuing business as usual is almost\nequivalent to being a strikebreaker.\n\nFor whatever it worth, all websites where I have some degree of\ncontrol will particpate in the blackout. Even where it means loss of\nrevenue for one day (actually it is likely that ad revenues tomorrow\nwould be easily twice the usual amount due to so many publishers\nshutting down their websites.)"
            },
            {
                "author": "Kyle Henderson",
                "date": "2012-01-17T02:37:31",
                "message_text_only": "On Mon, Jan 16, 2012 at 11:37 AM, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n>\n> There are always issues that raise ire and moral outrage.  I would\n> rather that bitcoin.org stay apolitical -- our users will appreciate\n> this in the long run.\n>\n>\nAgreed :)\n\nFor those that believe one particularly noisy country in the North America\nregion with a policy called SOPA or PIPA directly affects Bitcoin - can you\npoint out precisely where it does so?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/c4523216/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-17T06:15:11",
                "message_text_only": "On Mon, Jan 16, 2012 at 9:37 PM, Kyle Henderson <k at old.school.nz> wrote:\n> For those that believe one particularly noisy country in the North America\n> region with a policy called SOPA or PIPA directly affects Bitcoin - can you\n> point out precisely where it does so?\n\nIn addition to the concerns about internet freedom and domain name\nsystem filtering which are against the interests of bitcoin users and\nthe bitcoin system generally, SOPA contains new requirements for\npayment networks which may adversely impact Bitcoin services\nbusinesses and limit their ability to do business in the US and other\nplaces where similar legislation is adopted.  There are many millions\nof potential Bitcoin users in the US, so US law matters for our\necosystem even though far from all Bitcoin users are in the US\nthemselves.\n\n(21) PAYMENT NETWORK PROVIDER-\n            (A) IN GENERAL- The term `payment network provider' means\nan entity that directly or indirectly provides the proprietary\nservices, infrastructure, and software to effect or facilitate a\ndebit, credit, or other payment transaction.\n[...]\n                (i) PREVENTING AFFILIATION- A payment network provider\nshall take technically feasible and reasonable measures, as\nexpeditiously as possible, but in any case within 5 days after being\nserved with a copy of the order, or within such time as the court may\norder, designed to prevent, prohibit, or suspend its service from\ncompleting payment transactions involving customers located within the\nUnited States or subject to the jurisdiction of the United States and\nthe payment account--\n                    (I) which is used by the foreign infringing site,\nor portion thereof, that is subject to the order; and\n                    (II) through which the payment network provider\nwould complete such payment transactions.\n\nIf you really want to go for the more extreme interpretation, it's not\nhard to conclude that the Bitcoin system itself is a \"payment network\"\nby the definition under the act, and if so in theory the AG's office\ncould\u2014 without due process\u2014 order miners and mining pools located in\nthe US to, for example, not process transactions containing the well\nknown addresses of targeted infringing sites (e.g. The Wikileaks\ndonation address).  Though I personally think this is far out.\n\nI also think that other people will covered the SOPA/PIPA awareness\n(e.g. Wikipedia is shutting down for 24 hours) more than we could\npossibly do with our own resources.\n\nBut this attitude of it being someone elses problem? I think thats\nnonsense. We live in _one world_, one world which is getting smaller\nevery day.  The value of a network\u2014or of a economy\u2014 comes from the\nnumber of potential connections it can make. One reason Bitcoin is\ngood is because it deconstructs some of the old barriers and anything\nthat risks imposing new ones is a threat to us all.\n\nSo, don't participate because bitcoin.org's help would be so small as\nto be pointless\u2014 sure.  But because it doesn't matter? hardly."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2012-01-17T07:42:51",
                "message_text_only": "It may be a political issue, but I don't think wikipedia becomes a\npolitical organization for being against censorship.\nThis is not about left or right. Is about free speech, one of the\nbasic principles not only of freedom but also of democracy.\nAnd as Gregory shows it clearly affects bitcoin directly."
            },
            {
                "author": "Wladimir",
                "date": "2012-01-17T09:04:22",
                "message_text_only": "This is not just \"a political issue\". The internet as we know it is at\nstake, and bitcoin depends directly on a working, single, globally\nconnected internet (at least for now, until mesh networking goes\nanywhere...).\n\n*Everyone* using bitcoin has the interest in keeping the internet working\nand un-balkanized. That's not a political opinion, it's a fact.\n\nThe laws could also criminalize both the users and developers, if they\nregard bitcoin as a \"payment network\". And countries aren't too fussy about\nextradition to the US (see the case of Richard O'Dwyer).\n\nThough I agree that SOPA and PIPA are just manifestations of a brand of\ncensorship that is spreading all over the world. Stopping these laws won't\nsolve the underlying issue either. Other countries will keep pushing for\nthem, and we can't blank out the page for every country.\n\nHowever, that does not make the issue \"political and thus meaningless\".\nAlso: \"being too small to matter\" is never a good argument to not do\nsomething. It is fear paralysis.\n\nWladimir\n\n2012/1/17 Jorge Tim\u00f3n <timon.elviejo at gmail.com>\n\n> It may be a political issue, but I don't think wikipedia becomes a\n> political organization for being against censorship.\n> This is not about left or right. Is about free speech, one of the\n> basic principles not only of freedom but also of democracy.\n> And as Gregory shows it clearly affects bitcoin directly.\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/3d69e9b0/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-17T16:03:11",
                "message_text_only": "On Tuesday, January 17, 2012 2:42:51 AM Jorge Tim\u00f3n wrote:\n> It may be a political issue, but I don't think wikipedia becomes a\n> political organization for being against censorship.\n> This is not about left or right. Is about free speech, one of the\n> basic principles not only of freedom but also of democracy.\n\nCensorship is, in principle, good. Free speech and democracy are, in princple, \nevil. Idolizing Liberty is also evil. Your backward morals are worse than a \npolitical issue.\n\nHow about taking a few minutes to read this article by Bishop Sanborn? ;)\n\thttp://www.traditionalmass.org/articles/article.php?id=13&catname=7"
            },
            {
                "author": "James Burkle",
                "date": "2012-01-17T16:16:11",
                "message_text_only": "I don't think this is the right mailing list for discussion of this\nBlackout topic. I know this is definitely not the right mailing list\nfor proselytizing.\n\nOn Tue, Jan 17, 2012 at 11:03 AM, Luke-Jr <luke at dashjr.org> wrote:\n> On Tuesday, January 17, 2012 2:42:51 AM Jorge Tim\u00f3n wrote:\n>> It may be a political issue, but I don't think wikipedia becomes a\n>> political organization for being against censorship.\n>> This is not about left or right. Is about free speech, one of the\n>> basic principles not only of freedom but also of democracy.\n>\n> Censorship is, in principle, good. Free speech and democracy are, in princple,\n> evil. Idolizing Liberty is also evil. Your backward morals are worse than a\n> political issue.\n>\n> How about taking a few minutes to read this article by Bishop Sanborn? ;)\n> \u00a0 \u00a0 \u00a0 \u00a0http://www.traditionalmass.org/articles/article.php?id=13&catname=7\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "solar",
                "date": "2012-01-17T16:30:02",
                "message_text_only": "Dear bitcoin-development,\n\nOne of the original reasons for the creation of this mailing list was because the bitcoin.org forum was filled with this type of noise and this list was to provide a medium for discussion of development topics.  This entire SOPA thing is off topic for this list.  Might as well argue about abortion, because you can pay an abortion doctor with bitcoins.. maybe.\n\nMany of us subscribe because we're interested in the technical discussions.. not internet trolling.  Several people have already expressed that they don't care about this, so please discuss it somewhere more appropriate for this topic, like the bitcointalk forums.\n\nThanks,\nLaszlo\n\n\nOn Jan 17, 2012, at 4:16 PM, James Burkle wrote:\n\n> I don't think this is the right mailing list for discussion of this\n> Blackout topic. I know this is definitely not the right mailing list\n> for proselytizing.\n> \n> On Tue, Jan 17, 2012 at 11:03 AM, Luke-Jr <luke at dashjr.org> wrote:\n>> On Tuesday, January 17, 2012 2:42:51 AM Jorge Tim\u00f3n wrote:\n>>> It may be a political issue, but I don't think wikipedia becomes a\n>>> political organization for being against censorship.\n>>> This is not about left or right. Is about free speech, one of the\n>>> basic principles not only of freedom but also of democracy.\n>> \n>> Censorship is, in principle, good. Free speech and democracy are, in princple,\n>> evil. Idolizing Liberty is also evil. Your backward morals are worse than a\n>> political issue.\n>> \n>> How about taking a few minutes to read this article by Bishop Sanborn? ;)\n>>        http://www.traditionalmass.org/articles/article.php?id=13&catname=7\n>> \n>> ------------------------------------------------------------------------------\n>> Keep Your Developer Skills Current with LearnDevNow!\n>> The most comprehensive online learning library for Microsoft developers\n>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> Metro Style Apps, more. Free future releases when you subscribe now!\n>> http://p.sf.net/sfu/learndevnow-d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Stefan Thomas",
                "date": "2012-01-17T09:25:27",
                "message_text_only": "I'm firmly against a *blackout* - it would harm users' trust in Bitcoin \nsince people looking to download the client or to get information about \nBitcoin may end up in the wrong place. I constantly have to delete \nYouTube spam advertising this or that \"miracle GPU miner\" or \"secure \nBitcoin client\", which of course are all just the same trojan.\n\nAs for making a statement or putting up a banner - that's ok with me.\n\nOn 1/17/2012 7:15 AM, Gregory Maxwell wrote:\n> On Mon, Jan 16, 2012 at 9:37 PM, Kyle Henderson<k at old.school.nz>  wrote:\n>> For those that believe one particularly noisy country in the North America\n>> region with a policy called SOPA or PIPA directly affects Bitcoin - can you\n>> point out precisely where it does so?\n> In addition to the concerns about internet freedom and domain name\n> system filtering which are against the interests of bitcoin users and\n> the bitcoin system generally, SOPA contains new requirements for\n> payment networks which may adversely impact Bitcoin services\n> businesses and limit their ability to do business in the US and other\n> places where similar legislation is adopted.  There are many millions\n> of potential Bitcoin users in the US, so US law matters for our\n> ecosystem even though far from all Bitcoin users are in the US\n> themselves.\n>\n> (21) PAYMENT NETWORK PROVIDER-\n>              (A) IN GENERAL- The term `payment network provider' means\n> an entity that directly or indirectly provides the proprietary\n> services, infrastructure, and software to effect or facilitate a\n> debit, credit, or other payment transaction.\n> [...]\n>                  (i) PREVENTING AFFILIATION- A payment network provider\n> shall take technically feasible and reasonable measures, as\n> expeditiously as possible, but in any case within 5 days after being\n> served with a copy of the order, or within such time as the court may\n> order, designed to prevent, prohibit, or suspend its service from\n> completing payment transactions involving customers located within the\n> United States or subject to the jurisdiction of the United States and\n> the payment account--\n>                      (I) which is used by the foreign infringing site,\n> or portion thereof, that is subject to the order; and\n>                      (II) through which the payment network provider\n> would complete such payment transactions.\n>\n> If you really want to go for the more extreme interpretation, it's not\n> hard to conclude that the Bitcoin system itself is a \"payment network\"\n> by the definition under the act, and if so in theory the AG's office\n> could\u2014 without due process\u2014 order miners and mining pools located in\n> the US to, for example, not process transactions containing the well\n> known addresses of targeted infringing sites (e.g. The Wikileaks\n> donation address).  Though I personally think this is far out.\n>\n> I also think that other people will covered the SOPA/PIPA awareness\n> (e.g. Wikipedia is shutting down for 24 hours) more than we could\n> possibly do with our own resources.\n>\n> But this attitude of it being someone elses problem? I think thats\n> nonsense. We live in _one world_, one world which is getting smaller\n> every day.  The value of a network\u2014or of a economy\u2014 comes from the\n> number of potential connections it can make. One reason Bitcoin is\n> good is because it deconstructs some of the old barriers and anything\n> that risks imposing new ones is a threat to us all.\n>\n> So, don't participate because bitcoin.org's help would be so small as\n> to be pointless\u2014 sure.  But because it doesn't matter? hardly.\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Peter Vessenes",
                "date": "2012-01-17T19:03:36",
                "message_text_only": "It seems to me that the internet as a whole has got this one covered. I say\nthis as someone who thinks that BitCoin needs to choose its battles and\ncraft its reputation extremely carefully; this isn't the most important\nfight for BitCoin, nor the most deadly.\n\nI do think SOPA and PIPA could impact bitcoin, what if, for instance,\ncopyrighted material made its way into the blockchain?\n\nAlready the DMCA would make it hard for someone publishing blocks online to\ndo anything but cease under a DMCA request. SOPA, at least, would go\nfarther and allow the US to cut all access to 'offending' sites elsewhere\nin the world.\n\nAt any rate, I don't think these bills are 'aimed at' BitCoin, and the\ncompanies with the most stake are taking the threat quite seriously.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120117/d31607be/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoin.org SOPA/PIPA blackout",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Vladimir Marchenko",
                "James Burkle",
                "Wladimir",
                "slush",
                "Kyle Henderson",
                "solar",
                "Amir Taaki",
                "Peter Vessenes",
                "Alan Reiner",
                "Gregory Maxwell",
                "Jorge Tim\u00f3n",
                "Stefan Thomas",
                "Cameron Garnham"
            ],
            "messages_count": 21,
            "total_messages_chars_count": 36331
        }
    },
    {
        "title": "[Bitcoin-development] BIP Submission",
        "thread_messages": [
            {
                "author": "Ben Reeves",
                "date": "2012-01-16T15:45:17",
                "message_text_only": "Hi everyone,\n\nI wish to submit the following draft BIP for discussion and possible\nformal BIP review.\n\nhttps://en.bitcoin.it/wiki/BIP_M_of_2_DRAFT\n\nIt is a proposed alternative to BIP 16 (\"/P2SH/\").\n\nThank you,\nBen Reeves"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-01-16T21:22:54",
                "message_text_only": "Your approach won't work-- OP_ADD is limited to 4-byte operands.  Changing\nthat would require a \"hard\" blockchain split / entire-network-upgrade.\n\nI wish to submit the following draft BIP for discussion and possible\n> formal BIP review.\n>\n> https://en.bitcoin.it/wiki/BIP_M_of_2_DRAFT\n>\n> It is a proposed alternative to BIP 16 (\"/P2SH/\").\n>\n> Thank you,\n> Ben Reeves\n>\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120116/06905a0f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP Submission",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen",
                "Ben Reeves"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 796
        }
    },
    {
        "title": "[Bitcoin-development] 0.5.2 - rush?",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2012-01-16T16:14:08",
                "message_text_only": "Mushoz makes a good point:\n\thttps://bitcointalk.org/index.php?topic=58450.msg695052#msg695052\n\nDo we have enough downloads on 0.5.2rc1 to get the final rushed out and onto \nthe website?"
            }
        ],
        "thread_summary": {
            "title": "0.5.2 - rush?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 185
        }
    },
    {
        "title": "[Bitcoin-development] Extending IsStandard() to transaction scriptSigs",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-01-19T16:29:29",
                "message_text_only": "I've been working on a patch to make transaction inputs (scriptSigs) with\nextra data non-standard, as part of a general attitude of \"try to\nanticipate possible problems before they turn into real problems.\"\n\nToday, any node on the network that is relaying unconfirmed transactions\ncan add bytes to the transaction's scriptSig's before passing it on, and\nthat modified version of the transaction will get relayed and might\npossibly get mined.\n\nFor example, take a standard scriptSig that is:   OP_PUSHDATA <signature>\nOP_PUSHDATA <public key>\n... and change it to:   OP_PUSHDATA <Hi Mom!> OP_PUSHDATA <signature>\nOP_PUSHDATA <public key>\n... and the modified transaction will pass all of the IsStandard(),\nIsValid(), and OP_CHECKSIG checks.\n\nThat is... unexpected, especially since it changes the transaction id.  You\nmight transmit a transaction with ID 123 but find out it has been mined as\ntransaction ID 456.  Satoshi's code doesn't care (it just looks like an\nattempted double-spend of the coins), but I wouldn't be surprised if it\ncaused problems for other implementations or other transaction-handling\nsoftware.\n\nMy patch will make transactions with extra stuff in the scriptSig\nnon-standard, so they won't get relayed or mined by new nodes. Alternative\nimplementations will still have to deal with all types of double-spends, of\ncourse, and there are other ways of producing two transactions that are\nidentical except for their scriptSigs  (you can generate an arbitrary\nnumber of valid signatures for a transaction if you have the private keys,\nfor example) so this isn't a panacea for poorly-implemented bitcoin\ntransaction handling software. But it does remove some \"wiggle room,\" which\nis generally a good idea for improving security.\n\n\nI'm still thinking about how much further to go with this:\n\n+ I think requiring that the <signature> and <public key> be DER-encoded\nfor the transaction to be IsStandard() is a good idea.  DER encoding\ndefines a canonical way of representing data; Satoshi's code relies on\nOpenSSL to decode signatures and public keys, and OpenSSL accepts any, more\ngeneral, BER encoding.\n\n+ I'm tempted to require that the \"filler item\" to workaround the\nOP_CHECKMULTISIG pops-one-too-many-items-off-the-stack bug be exactly OP_0.\n\nDiscussion welcome; I should be making a pull request for my patch this\nafternoon.\n\n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120119/a1656f10/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Extending IsStandard() to transaction scriptSigs",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2548
        }
    },
    {
        "title": "[Bitcoin-development] ECC Signature Issue",
        "thread_messages": [
            {
                "author": "Brautigam R\u00f3bert",
                "date": "2012-01-22T13:18:35",
                "message_text_only": "Hi all,\n\nI'm working on a from scratch Java implementation. So far I got a \nmodularized, unit tested implementation of the core modules (api, keys, \nblocks, chain, scripts, network protocol).\n\nMy dummy client however gets stuck on Block 140493, specifically at \ntransaction hash: \n70f7c15c6f62139cc41afa858894650344eda9975b46656d893ee59df8914a3d\n\nIt seems the (signature) verification fails for this specific \ntransaction (for the 1 input in it), which is rather odd since \nverification was successful for all the preceding blocks and inputs.\n\nI double checked that the official (C++) client is indeed successful \nhere. Oddly enough the bitcoinj implementation also seems to fail to \nverify this transaction, which seems to point in the direction of \nBouncyCastle (which we both use).\n\nMy question is, did anybody hit this issue before? If not, can someone \ndoublecheck maybe that I'm not missing something trivial?\n\nThe data that should be signed (the signature hash):\nb45c680f32f9364f5255cc15ef7cad879dbde9062d7fb8db0fe56e245823a78f\n\nThe signature (with '01' at the end for SIGHASH_ALL, remove this before \nyou pass it to verification): \n304402206b5c3b1c86748dcf328b9f3a65e10085afcf5d1af5b40970d8ce3a9355e06b5b0220cdbdc23e6d3618e47056fccc60c5f73d1a542186705197e5791e97f0e6582a3201\n\nThe public key:\n04f25ec495fa21ad14d69f45bf277129488cfb1a339aba1fed3c5099bb6d8e9716491a14050fbc0b2fed2963dc1e56264b3adf52a81b953222a2180d48b54d1e18\n\nAs said, this seems to work with openssl, but seems to fail with \nbouncycastle for some reason (version 140).\n\nThanks,\nRobert."
            },
            {
                "author": "Mike Hearn",
                "date": "2012-01-23T17:50:51",
                "message_text_only": "> I double checked that the official (C++) client is indeed successful\n> here. Oddly enough the bitcoinj implementation also seems to fail to\n> verify this transaction, which seems to point in the direction of\n> BouncyCastle (which we both use).\n\nBitCoinJ does not verify signatures (it is an SPV implementation), so\nI'm not sure what you mean by this. Are you using old code? There used\nto be some stuff that checked signatures but it was removed some time\nago."
            },
            {
                "author": "Brautigam R\u00f3bert",
                "date": "2012-01-24T17:33:33",
                "message_text_only": "On 01/23/2012 06:50 PM, Mike Hearn wrote:\n>> I double checked that the official (C++) client is indeed successful\n>> here. Oddly enough the bitcoinj implementation also seems to fail to\n>> verify this transaction, which seems to point in the direction of\n>> BouncyCastle (which we both use).\n>\n> BitCoinJ does not verify signatures (it is an SPV implementation), so\n> I'm not sure what you mean by this. Are you using old code? There used\n> to be some stuff that checked signatures but it was removed some time\n> ago.\n\nHi Mike,\n\nBitcoinj has a class named ECKey. I just hardwired it with a main() to\ncheck the mentioned transaction's signature.\n\nI debugged the official client to get the exact data (hash, signed data\nand public key). I checked signatures of transactions prior to the\nmentioned one, all work, so the test code and the data I got are very\nlikely correct.\n\nIt might be that I'm using old bitcoinj code (I think it is 0.3, can't\nfind a version string anywhere), but I doubt that has any impact on the\necc verification. Even if it did, I got my on code too, so what are the\nodds that two implementations fail at the same point?\n\nAnyway it would be helpful if someone just tried to run a verification\nindependently with the mentioned transaction (with BouncyCastle and with\nopenssl) and see whether he/she gets the same result.\n\nI tried with BouncyCastle 140 and the newest 1.46, both fail.\n\nRobert."
            },
            {
                "author": "Brautigam R\u00f3bert",
                "date": "2012-01-27T18:19:54",
                "message_text_only": "Hi,\n\nI'll reply to myself here, just to mention that the issue is solved.\n\nDave Hook from Bouncycastle replied that in the particular signature \nmentioned, one of the ASN1 encoded Integers is actually negative (which \nis not a valid coordinate for a point on a curve I assume). Since ASN1 \nintegers are always signed, one has to pad \"big\" values with a zero byte \nto stay positive.\n\nWorkaround is easy for verification (convert to positive).\n\nRobert.\n\nOn 01/24/2012 06:33 PM, Brautigam R\u00f3bert wrote:\n> On 01/23/2012 06:50 PM, Mike Hearn wrote:\n>>> I double checked that the official (C++) client is indeed successful\n>>> here. Oddly enough the bitcoinj implementation also seems to fail to\n>>> verify this transaction, which seems to point in the direction of\n>>> BouncyCastle (which we both use).\n..."
            }
        ],
        "thread_summary": {
            "title": "ECC Signature Issue",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Brautigam R\u00f3bert",
                "Mike Hearn"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 4232
        }
    },
    {
        "title": "[Bitcoin-development] [PROPOSAL] Merkle tree of unspent transactions (MTUT), for serverless thin clients and self-verifiable prunned blockchain.",
        "thread_messages": [
            {
                "author": "Alberto Torres",
                "date": "2012-01-24T02:00:59",
                "message_text_only": "Hello,\n\nI've written this proposal. C&P of the overview:\n\nSatoshi's original paper describes a way of prunning spent\ntransactions in the blockchain to save storage space while it remains\nconsistent and verifiable, but it's useless for partial blockchain\ndownloads: while you can know if a given transaction is in the\nblockchain, you can't know if it has been spent in a subsequent\ntransaction.\nThis proposal describes how to add a hash-tree based check in the\nblockchain that allows to verify if a transaction is unspent without\ndownloading and checking all the blockchain. The idea is not new, but\nat the time of this writing there isn't any technical description of\nhow this should be done. Aditionally, this solution is rather simple.\n\nhttps://en.bitcoin.it/wiki/User:DiThi/MTUT\n\nCheers\n\n-- \nAlberto Torres Ruiz (a.k.a. DiThi)"
            },
            {
                "author": "Elden Tyrell",
                "date": "2012-01-29T18:40:23",
                "message_text_only": "On 2012-01-23 20:00:59 -0600, Alberto Torres said:\n> This proposal describes how to add a hash-tree based check in the\n> blockchain that allows to verify if a transaction is unspent without\n> downloading and checking all the blockchain. The idea is not new, but\n> at the time of this writing there isn't any technical description of\n> how this should be done.\n\nThanks for writing this up (it's high time somebody did).  I like your \nacronym, but shouldn't it be \"MTUO\" since you spend *outputs* rather \nthan *transactions*?  A transaction can have multiple outputs, some of \nwhich are spent and others which aren't.\n\nI've added a link to your proposal on the \nhttps://en.bitcoin.it/wiki/Thin_Client_Security wiki page.\n\n> Once 55% of blocks includes a valid MTUT hash in a 2-week timespan, \n> they should reject any block with an invalid (i.e. probably malicious) \n> MTUT hash block while accepting blocks without MTUT.\n\nJust like OP_EVAL/p2sh, this creates the (small) risk of a blockchain split.\n\nUnlike adding a new transaction type, here it's possible to eliminate \nthis risk: give each MTUT an additional \"prev\" pointer (hash of some \nprior block) which points to the latest prior block with a correct \nMTUT.  This produces a \"chain within the chain\" of blocks that have \nvalid MTUTs.  Hostile miners are free to add bogus-MTUT-blocks; those \nbogus blocks will simply never be included in the \"inner chain\", just \nlike invalid blocks mined by hostile miners are never included in the \nblockchain.  By downloading the last day's worth of blocks (which is \nnot much data at all), a client can see which \"inner chain\" the \nmajority of the hashpower believed during the last 24 hours.  This \neliminates the need for a vote in any specific block -- in effect you \nget a \"rolling election\".\n\nThis \"inner chain\" approach can be broadened to a K-ary tree by \nincluding K-many prior-block pointers.  With one of these in every \nblock (and sensible choices) you wind up with \nO(log_K(chain_length))-operation hash-secure access to arbitrary blocks \nin the middle of the chain.  This is an important building block for \nultra-high-security thin clients.  Even if only a 1/K of the network's \nhashpower starts adding these pointers the worst-case number of \noperations needed to reach an arbitrary block will still converge \n(though much more slowly) towards this ideal.\n\n  - e"
            }
        ],
        "thread_summary": {
            "title": "Merkle tree of unspent transactions (MTUT), for serverless thin clients and self-verifiable prunned blockchain.",
            "categories": [
                "Bitcoin-development",
                "PROPOSAL"
            ],
            "authors": [
                "Alberto Torres",
                "Elden Tyrell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3199
        }
    },
    {
        "title": "[Bitcoin-development] Fuzzer?",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-25T23:27:52",
                "message_text_only": "Hey,\n\nI heard there is a fuzzer in the works? Where can I find more details of this? I'm going to write one for libbitcoin, but if one already exists then I'd rather build on and use that.\n\nSomething simple like:\n- Set previous block hash, set current target\n- Start hashing\n- Connect and send to specified host (i.e localhost)\n\nThat way I can force re-organisations and stress the blockchain algorithm. Should be trivial for me to build, but worth asking anyway :)\n\nThanks"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-01-26T15:32:33",
                "message_text_only": "https://github.com/gavinandresen/bitcoin-git/tree/fuzzer\n\nIt is a transaction fuzzer; adding block fuzzing is on the TODO.\n\nBasic usage is:\n1. Use the send* RPC commands to get one or more transaction IDs\n2. Run a script that repeatedly calls relayfuzzed with a nonce/txid\n... and see how the connected peer(s) react to all the fuzzy 'inv/tx'\nprotocol messages.\n\nI built it to stress-test BIP 16, there are lots of useful features that\ncould be added.  Patches welcome!\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120126/8667911c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fuzzer?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen",
                "Amir Taaki"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1148
        }
    },
    {
        "title": "[Bitcoin-development] GetBlocksToMaturity",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-27T16:33:18",
                "message_text_only": "Why add 20 to COINBASE_MATURITY there?\n\nThe underlying protocol accepts spent transactions at 100 (COINBASE_MATURITY) so this seems more like a measure to put people off spending until 120 confirms. If you are determined enough to hack your client, you can still spend before 120 but after 100.\n\nWhy is this?\n\nDid Satoshi overestimate how many competing races there would be between mined blocks?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120127/87958a48/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-01-27T16:37:05",
                "message_text_only": "Actually now I'm thinking- I reckon it is so that your transaction gets accepted by the network when it is sent out. At around 20 confirmations, you can be sure that the rest of the network also has 100 confirmations off the original mined block.\n\nOtherwise at 100 confirms, you may have a chain ahead of everyone else or there might be a temporary network partition (islanding) that causes another fork to get built up, then when they rejoin, not everyone has 100 confirms...\n\n\n________________________________\n From: Amir Taaki <zgenjix at yahoo.com>\nTo: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net> \nSent: Friday, January 27, 2012 4:33 PM\nSubject: GetBlocksToMaturity\n \n\nWhy add 20 to COINBASE_MATURITY there?\n\nThe underlying protocol accepts spent transactions at 100 (COINBASE_MATURITY) so this seems more like a measure to put people off spending until 120 confirms. If you are determined enough to hack your client, you can still spend before 120 but after 100.\n\nWhy is this?\n\nDid Satoshi overestimate how many competing races there would be between mined blocks?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120127/6c35b1a4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "GetBlocksToMaturity",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1881
        }
    },
    {
        "title": "[Bitcoin-development] BIP 0020: URI Scheme",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-27T22:51:04",
                "message_text_only": "BIP 0020 is the old URI scheme BIPisized.\n\nATM it is Draft status.\n\nI do not know enough about the discussion back last year to know whether to move it to Accepted status or not. My feelings are that having a re-decision (even if it was accepted last year) is healthy since it makes no sense to have a standard before a standardisation process existed.\n\nFor now, it is Draft status until there's a general agreement.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120127/2e4286b5/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-27T23:00:29",
                "message_text_only": "On Friday, January 27, 2012 5:51:04 PM Amir Taaki wrote:\n> BIP 0020 is the old URI scheme BIPisized.\n> \n> ATM it is Draft status.\n\nIt's been Final (even according to BIP 1 standards) since late January 2011. \nThe only change recently is assigning it a BIP number for formality.\n\n> I do not know enough about the discussion back last year to know whether to\n> move it to Accepted status or not. My feelings are that having a\n> re-decision (even if it was accepted last year) is healthy since it makes\n> no sense to have a standard before a standardisation process existed.\n\nOnce P2SH is deployed, it will probably make good sense to revisit the URI \nScheme for revision, and eventually move BIP 20 to Replaced/Superceded status."
            },
            {
                "author": "bitcoin-list at bluematt.me",
                "date": "2012-01-28T00:36:31",
                "message_text_only": "It was implemented in the waylaying client with the merge of Bitcoin-Qt for drag and drop, and just recently for system URI handling in https://github.com/bitcoin/bitcoin/commit/70f55355e29c8e45b607e782c5d76609d23cc858. However the version on the wiki armed as BIP 20 has a ton of extraneous crap in it's number encoding which is not implemented in Bitcoin-Qt since it was explicitly voted against at the time the spec was being discussed. If that stuff were removed, I would agree that it is final.\n\nLuke-Jr <luke at dashjr.org> wrote:\n\nOn Friday, January 27, 2012 5:51:04 PM Amir Taaki wrote:\n> BIP 0020 is the old URI scheme BIPisized.\n> \n> ATM it is Draft status.\n\nIt's been Final (even according to BIP 1 standards) since late January 2011. \nThe only change recently is assigning it a BIP number for formality.\n\n> I do not know enough about the discussion back last year to know whether to\n> move it to Accepted status or not. My feelings are that having a\n> re-decision (even if it was accepted last year) is healthy since it makes\n> no sense to have a standard before a standardisation process existed.\n\nOnce P2SH is deployed, it will probably make good sense to revisit the URI \nScheme for revision, and eventually move BIP 20 to Replaced/Superceded status.\n\n_____________________________________________\n\nTry before you buy = See our experts in action!\nThe most comprehensive online learning library for Microsoft developers\nis just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\nMetro Style Apps, more. Free future releases when you subscribe now!\nhttp://p.sf.net/sfu/learndevnow-dev2\n_____________________________________________\n\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120127/f01f8287/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-28T01:45:09",
                "message_text_only": "On Friday, January 27, 2012 7:36:31 PM bitcoin-list at bluematt.me wrote:\n> It was implemented in the waylaying client with the merge of Bitcoin-Qt for\n> drag and drop, and just recently for system URI handling in\n> https://github.com/bitcoin/bitcoin/commit/70f55355e29c8e45b607e782c5d76609\n> d23cc858.\n\nIt's been implemented in many clients for nearly all 2011.\nBitcoin-Qt is just behind the pace. Not relevant.\n\n> However the version on the wiki armed as BIP 20 has a ton of extraneous crap\n> in it's number encoding which is not implemented in Bitcoin-Qt since it was\n> explicitly voted against at the time the spec was being discussed.\n\nYou mean 3 months *after* the spec had a consensus and multiple \nimplementations."
            },
            {
                "author": "bitcoin-list at bluematt.me",
                "date": "2012-01-28T02:12:11",
                "message_text_only": "Luke-Jr <luke at dashjr.org> wrote:\n\n>On Friday, January 27, 2012 7:36:31 PM bitcoin-list at bluematt.me wrote:\n>> It was implemented in the waylaying client with the merge of\n>Bitcoin-Qt for\n>> drag and drop, and just recently for system URI handling in\n>>\n>https://github.com/bitcoin/bitcoin/commit/70f55355e29c8e45b607e782c5d76609\n>> d23cc858.\n>\n>It's been implemented in many clients for nearly all 2011.\n>Bitcoin-Qt is just behind the pace. Not relevant.\n>\n>> However the version on the wiki armed as BIP 20 has a ton of\n>extraneous crap\n>> in it's number encoding which is not implemented in Bitcoin-Qt since\n>it was\n>> explicitly voted against at the time the spec was being discussed.\n>\n>You mean 3 months *after* the spec had a consensus and multiple \n>implementations.\nI'm really not gonna reopen this debate.  You made a poll that was worded in the most biased way I could think of and still lost.  The multiple implementations were written but you and I know of no sites that actually had links to your version."
            },
            {
                "author": "Wladimir",
                "date": "2012-01-28T08:23:51",
                "message_text_only": "I'd state it this way: a spec needs to be minimally complete\n\nThe subset implemented by bitcoin-qt allows description of *all* currently\ndesirable bitcoin transactions.\n\nThe rest of the spec is simply other ways to describe the same = redundancy\n\nIn case new transaction types are added, the spec obviously needs to be\nextended. But not with a zillion ways to write \"send XXX coins to YYY\".\n\nAnyway, that's my last word about it.\n\nWladimir\n\nOn Sat, Jan 28, 2012 at 3:12 AM, <bitcoin-list at bluematt.me> wrote:\n\n>\n>\n> Luke-Jr <luke at dashjr.org> wrote:\n>\n> >On Friday, January 27, 2012 7:36:31 PM bitcoin-list at bluematt.me wrote:\n> >> It was implemented in the waylaying client with the merge of\n> >Bitcoin-Qt for\n> >> drag and drop, and just recently for system URI handling in\n> >>\n> >\n> https://github.com/bitcoin/bitcoin/commit/70f55355e29c8e45b607e782c5d76609\n> >> d23cc858.\n> >\n> >It's been implemented in many clients for nearly all 2011.\n> >Bitcoin-Qt is just behind the pace. Not relevant.\n> >\n> >> However the version on the wiki armed as BIP 20 has a ton of\n> >extraneous crap\n> >> in it's number encoding which is not implemented in Bitcoin-Qt since\n> >it was\n> >> explicitly voted against at the time the spec was being discussed.\n> >\n> >You mean 3 months *after* the spec had a consensus and multiple\n> >implementations.\n> I'm really not gonna reopen this debate.  You made a poll that was worded\n> in the most biased way I could think of and still lost.  The multiple\n> implementations were written but you and I know of no sites that actually\n> had links to your version.\n>\n>\n> ------------------------------------------------------------------------------\n> Try before you buy = See our experts in action!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-dev2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120128/90bc69d7/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2012-01-28T16:32:15",
                "message_text_only": "On 01/28/2012 02:45 AM, Luke-Jr wrote:\n\n> It's been implemented in many clients for nearly all 2011.\n> Bitcoin-Qt is just behind the pace. Not relevant.\n\nBitcoin Wallet for Android implements only parts of this spec:\n\nThe hexadecimal notations (x) and exponent notations (X) feel horribly\nredundant to me and are thus not implemented.\n\n\"label\" and \"message\" parameters are not implemented right now, but will\nprobably be in a later version.\n\n\"send\" is also not implemented.\n\nCheers,\n\nAndreas"
            }
        ],
        "thread_summary": {
            "title": "BIP 0020: URI Scheme",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Wladimir",
                "Andreas Schildbach",
                "bitcoin-list at bluematt.me",
                "Amir Taaki"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 7916
        }
    },
    {
        "title": "[Bitcoin-development] BIP-12, 16, 17",
        "thread_messages": [
            {
                "author": "Michael Gronager",
                "date": "2012-01-28T10:21:19",
                "message_text_only": "Dear Bitcoiners,\n\nI have been following some of the debate on the various BIP suggestions for enabling e.g. multisignature transactions. ( First a little rant - it seems like the discussion takes place in at least 5 different forums plus the IRC, this is so annoying. Please keep the discussion at one place and refer to this for people asking questions other places - including me, now... ).\n\nI have some issues with BIP-16, it is mainly the lines 265-269 in the reference implementation (https://github.com/gavinandresen/bitcoin-git/blob/pay_to_script_hash/src/base58.h): \n\nPUBKEY_ADDRESS = 0,\nSCRIPT_ADDRESS = 5,\nPUBKEY_ADDRESS_TEST = 111,\nSCRIPT_ADDRESS_TEST = 196,\n\nThe purpose of the networkID is broken by this, as it ties additional information into an address as a hack. In the BIP-12 implementation I argued that this notification on address level is not needed, and should not be introduced, I am still of the same opinion. The bitcoin code has enough of globals and cross references inside the code s it is today, lets not add another one...\n\nIf we want more information in a bitcoin address we could just as well cannibalize it from the checksum - today it is 4 bytes (1 to 4mia) it could be 2 or 3 bytes (1 to 65k or 16M) and that would not break the current meaning of the network ID. This would have the same effect - that you could not mistake two different addresses and create a non-redeemable transaction.\n\nThe BIP-17 seems a step forward, but I also agree with Gavins note on one on the forums, that it behaves differently in input and output scripts. So it obviously need some further work too.\n\nCheers,\n\nMichael"
            },
            {
                "author": "Andy Parkins",
                "date": "2012-01-30T10:57:54",
                "message_text_only": "On 2012 January 28 Saturday, Michael Gronager wrote:\n\n> If we want more information in a bitcoin address we could just as well\n> cannibalize it from the checksum - today it is 4 bytes (1 to 4mia) it\n> could be 2 or 3 bytes (1 to 65k or 16M) and that would not break the\n> current meaning of the network ID. This would have the same effect - that\n> you could not mistake two different addresses and create a non-redeemable\n> transaction.\n\nI'm throwing this out as an idea; not necessarily saying it's doable or even \ngood.\n\nThere is spare capacity in the base58 encoding.\n\n - The address hash is 20 bytes\n - The checksum is 4 bytes\n - The address type is 1 byte\n \nThe longest and largest address is therefore 25 bytes of 0xff (it's not \npossible to all be 0xff of course).  Converting those 25 bytes of 0xff to \nbase58...\n\n hex:    ffffffffffffffffffffffffffffffffffffffffffffffffff\n base58: 2mXR4oJkmBdJMxhBGQGb96gQ88xUzxLFyG\n\nThis is 34 base58 symbols.  It's not the largest base 58 number that will fit \nin 34 symbols though...\n\n base58: zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n hex:    20a8469deca6b5a6d367cbc0907d07e6a5584778de27ffffffff\n vs hex:   ffffffffffffffffffffffffffffffffffffffffffffffffff\n\ni.e. there are a few unused bits (~5) available in the base58 representation \nthat can be added without changing the number of symbols in the address.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120130/18318a15/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP-12, 16, 17",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager",
                "Andy Parkins"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3338
        }
    },
    {
        "title": "[Bitcoin-development] Quote on BIP 16",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-29T04:52:20",
                "message_text_only": "Gavin said:\n\"Part of the controversy is whether really long bitcoin addresses would work-- would it be OK if the new bitcoin addresses were really long and looked something like this:\u00a0\u00a057HrrfEw6ZgRS58dygiHhfN7vVhaPaBE7HrrfEw6ZgRS58dygiHhfN7vVhaPaBiTE7vVhaPaBE7Hr\n(or possibly even longer)\n\nI've argued no: past 70 or so characters it becomes a lot harder to copy and paste, a lot harder to scan an address with your eyes to see if you're paying who you think you're paying, harder to create a readable QR code, harder to upgrade website or database code that deals with bitcoin addresses, etc. There is rough consensus that very-long addresses are not workable.\"\n\nHow could you have a 70 byte long address without a P2SH scheme? Is this a mistake?"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-01-29T05:10:41",
                "message_text_only": "2 compressed pubkeys\n\n\n----- Original Message -----\nFrom: Amir Taaki <zgenjix at yahoo.com>\nTo: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nCc: \nSent: Sunday, January 29, 2012 4:52 AM\nSubject: [Bitcoin-development] Quote on BIP 16\n\nGavin said:\n\"Part of the controversy is whether really long bitcoin addresses would work-- would it be OK if the new bitcoin addresses were really long and looked something like this:\u00a0\u00a057HrrfEw6ZgRS58dygiHhfN7vVhaPaBE7HrrfEw6ZgRS58dygiHhfN7vVhaPaBiTE7vVhaPaBE7Hr\n(or possibly even longer)\n\nI've argued no: past 70 or so characters it becomes a lot harder to copy and paste, a lot harder to scan an address with your eyes to see if you're paying who you think you're paying, harder to create a readable QR code, harder to upgrade website or database code that deals with bitcoin addresses, etc. There is rough consensus that very-long addresses are not workable.\"\n\nHow could you have a 70 byte long address without a P2SH scheme? Is this a mistake?\n\n------------------------------------------------------------------------------\nTry before you buy = See our experts in action!\nThe most comprehensive online learning library for Microsoft developers\nis just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\nMetro Style Apps, more. Free future releases when you subscribe now!\nhttp://p.sf.net/sfu/learndevnow-dev2\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-29T05:15:58",
                "message_text_only": "On Sunday, January 29, 2012 12:10:41 AM Amir Taaki wrote:\n> 2 compressed pubkeys\n\n2 compressed pubkeys are 33 bytes each. Add 1 bytes for the N (n-of-m), 1 byte \nfor the address version, and finally the 4 byte checksum, you get a total of \n72 bytes. But these are *bytes* - to get an address, you also need to base58 \nencode it: this yields a 99 character address."
            },
            {
                "author": "Alan Reiner",
                "date": "2012-01-29T05:23:13",
                "message_text_only": "It certainly wouldn't hurt if there was a way to use OP_MULTICHECKSIG \nwith hash160 values instead... I doubt that's workable, though.\n\nAt the moment, I feel that the copy&paste size problem is much smaller \nthan the risk we take implementing such a huge change to the network.  I \nalmost feel like, we should have multi-sig in place, thoroughly tested \nand available, as something to fall back on if something goes wrong with \nBIP 13/16/17 after implementation.  After all, I've been promoting the \nidea of considering the \"cost\" to fixing an erroneous/insecure \nimplementation, as consideration for the proposals at hand.\n\nBut gmaxwell has expressed some compelling reasons why plain multi-sig \nmight be abused, which maybe suggests we don't want it ever considered \nstandard...?  I guess I'm not really promoting one thing or another, but \nI feel like copy&pasting is not a big deal (after all, it exists to \nmoving large amounts of data around).  Then of course, I use \nhome-shift-end all the time, and regular users may not be so adept at \ncopying long strings.\n\n-Alan\n\n\n\nOn 01/29/2012 12:10 AM, Amir Taaki wrote:\n> 2 compressed pubkeys\n>\n>\n> ----- Original Message -----\n> From: Amir Taaki<zgenjix at yahoo.com>\n> To: \"bitcoin-development at lists.sourceforge.net\"<bitcoin-development at lists.sourceforge.net>\n> Cc:\n> Sent: Sunday, January 29, 2012 4:52 AM\n> Subject: [Bitcoin-development] Quote on BIP 16\n>\n> Gavin said:\n> \"Part of the controversy is whether really long bitcoin addresses would work-- would it be OK if the new bitcoin addresses were really long and looked something like this:  57HrrfEw6ZgRS58dygiHhfN7vVhaPaBE7HrrfEw6ZgRS58dygiHhfN7vVhaPaBiTE7vVhaPaBE7Hr\n> (or possibly even longer)\n>\n> I've argued no: past 70 or so characters it becomes a lot harder to copy and paste, a lot harder to scan an address with your eyes to see if you're paying who you think you're paying, harder to create a readable QR code, harder to upgrade website or database code that deals with bitcoin addresses, etc. There is rough consensus that very-long addresses are not workable.\"\n>\n> How could you have a 70 byte long address without a P2SH scheme? Is this a mistake?\n>\n> ------------------------------------------------------------------------------\n> Try before you buy = See our experts in action!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-dev2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Try before you buy = See our experts in action!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-dev2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-29T08:14:06",
                "message_text_only": "On Sun, Jan 29, 2012 at 12:23 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n[snip]\n> But gmaxwell has expressed some compelling reasons why plain multi-sig\n> might be abused, which maybe suggests we don't want it ever considered\n> standard...? \u00a0I guess I'm not really promoting one thing or another, but\n\nBe careful not to conflate multisig _addresses_  and P2S with multisig\noutput scripts in general.\n\nOf the issues I raised only the size of the potentially unprunable\ntransaction outputs is an argument against multisig outputs which\naren't getting packed up in addresses.\n\nThings like negotiated escrow arrangements can work okay either way.\n\nI think P2SH is still better for these for two reasons: Reasonable\nanti-spam behavior by network participant may make it hard to make\nlarge output scripts (see above), but this isn't an issue yet...  and\nP2S(H) lets you use a separate escrow-maker tool for clients paying\ninto escrow without any knowledge or support of escrow transactions in\nthat client. This uncoupling is important both for general \"feature\nvelocity\" as well as providing a uniform feature set across bitcoin\nservices (e.g. you negotiate paying someone via escrow, you use a tool\nto make a mutually agreed escrow configuration, but your funds are in\nMTGOX\u2014 no issue if P2SH is widely used)."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-29T05:19:44",
                "message_text_only": "On Sat, Jan 28, 2012 at 11:52 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> How could you have a 70 byte long address without a P2SH scheme? Is this a mistake?\n\n...  No it's not a mistake.  P2SH _prevents_ needing long addresses.\n\nLets unpack the acronym \"pay to script _hash_\".  Hashes only need to\nbe 128-256 bits in size or so to have acceptable security, so you\ndon't need something longer than that for paying to a hash.\n\nNote that gavin is saying 70 characters, not bytes.\n\nWithout some form of P2SH then only way for you to make a personal\nchoice of asking people to pay to a two-factor protected account or\ntwo a multiparty trust that manages the finances of an organization\nis using some form of \"P2S\", pay-to-script.\n\nIn other words, you'd have to have an address that encodes a full\nscript specification for the sender to pay to,  instead of just\nencoding its hash.  As a result these addresses would be much longer\n(and potentially very long).\n\nThe minimum size of a two address involving encoded script would be on\nthat order, but they get bigger quite quickly if you add more options\nto the script (actually 70 sounds quite small, it should be more like\n100 for a minimum two pubkey script).\n\nIn addition to the unworkability of very long addresses as described\nby gavin (amusingly I am unable to copy and paste the quoted example\nin one go) a P2S solution has several problems which you might\nconsider more or less important:\n\n\n(1) They are highly vulnerable to invisible substitution.  E.g. I can\ntrivially take a P2S address, change one or two characters and get a\nscript which is redeemable by anyone.  With P2SH you have to do\ncomputation which is exponential in the number of unchanged digits to\nget a look alike address.\n\n(2) The sender is fully responsible for fees related to the enlarged\ntransactions. Even if _you're_ willing to take the txn-processing time\nand fee burden of a 30 person joint trust address,  random e-commerce\nsites will not be and will randomly reject your addresses.\n\n(3) They create another input vector for non-trivial data which must\nbe inspected and validated, potentially presenting an attack surface.\n\n(4) They leave the complicated (long) release rules in the transaction\noutputs.  When a transaction is mined we can't be sure if it will ever\nbe redeemed. The outputs are unprunable.   In a future world where\nmany nodes prune output space is far more important than input space\nand it would make sense to require more fees for it because we're\nnever sure how long it would need to be stored (making it an\nattractive target for someone who wants to make Bitcoin unusable by\nspamming it with worthless data).  P2SH reduces output sizes to the\nabsolute minimum without inflating the total data size."
            }
        ],
        "thread_summary": {
            "title": "Quote on BIP 16",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Alan Reiner",
                "Gregory Maxwell",
                "Amir Taaki"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 10127
        }
    },
    {
        "title": "[Bitcoin-development] Fw:  Quote on BIP 16",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-29T11:19:44",
                "message_text_only": "(oops sorry greg- replied to you by mistake)\n\nThat address he gives is 77 characters/bytes (same thing). What I'm asking is how can it be so small. I know that it's encoding a script, but then I started trying to imagine what kind of script and to me it seems that 2 public keys are too large for those 77 characters when encoded.\n\nThat is the example quoted on the forums:\n57HrrfEw6ZgRS58dygiHhfN7vVhaPaBE7HrrfEw6ZgRS58dygiHhfN7vVhaPaBiTE7vVhaPaBE7Hr\n\n\nCould it be a mistake?\n\n\n----- Original Message -----\nFrom: Gregory Maxwell <gmaxwell at gmail.com>\nTo: Amir Taaki <zgenjix at yahoo.com>\nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net>\nSent: Sunday, January 29, 2012 5:19 AM\nSubject: Re: [Bitcoin-development] Quote on BIP 16\n\nOn Sat, Jan 28, 2012 at 11:52 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> How could you have a 70 byte long address without a P2SH scheme? Is this a mistake?\n\n...\u00a0 No it's not a mistake.\u00a0 P2SH _prevents_ needing long addresses.\n\nLets unpack the acronym \"pay to script _hash_\".\u00a0 Hashes only need to\nbe 128-256 bits in size or so to have acceptable security, so you\ndon't need something longer than that for paying to a hash.\n\nNote that gavin is saying 70 characters, not bytes.\n\nWithout some form of P2SH then only way for you to make a personal\nchoice of asking people to pay to a two-factor protected account or\ntwo a multiparty trust that manages the finances of an organization\nis using some form of \"P2S\", pay-to-script.\n\nIn other words, you'd have to have an address that encodes a full\nscript specification for the sender to pay to,\u00a0 instead of just\nencoding its hash.\u00a0 As a result these addresses would be much longer\n(and potentially very long).\n\nThe minimum size of a two address involving encoded script would be on\nthat order, but they get bigger quite quickly if you add more options\nto the script (actually 70 sounds quite small, it should be more like\n100 for a minimum two pubkey script).\n\nIn addition to the unworkability of very long addresses as described\nby gavin (amusingly I am unable to copy and paste the quoted example\nin one go) a P2S solution has several problems which you might\nconsider more or less important:\n\n\n(1) They are highly vulnerable to invisible substitution.\u00a0 E.g. I can\ntrivially take a P2S address, change one or two characters and get a\nscript which is redeemable by anyone.\u00a0 With P2SH you have to do\ncomputation which is exponential in the number of unchanged digits to\nget a look alike address.\n\n(2) The sender is fully responsible for fees related to the enlarged\ntransactions. Even if _you're_ willing to take the txn-processing time\nand fee burden of a 30 person joint trust address,\u00a0 random e-commerce\nsites will not be and will randomly reject your addresses.\n\n(3) They create another input vector for non-trivial data which must\nbe inspected and validated, potentially presenting an attack surface.\n\n(4) They leave the complicated (long) release rules in the transaction\noutputs.\u00a0 When a transaction is mined we can't be sure if it will ever\nbe redeemed. The outputs are unprunable.\u00a0\u00a0 In a future world where\nmany nodes prune output space is far more important than input space\nand it would make sense to require more fees for it because we're\nnever sure how long it would need to be stored (making it an\nattractive target for someone who wants to make Bitcoin unusable by\nspamming it with worthless data).\u00a0 P2SH reduces output sizes to the\nabsolute minimum without inflating the total data size."
            }
        ],
        "thread_summary": {
            "title": "Fw:  Quote on BIP 16",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3531
        }
    },
    {
        "title": "[Bitcoin-development] Fw: Quote on BIP 16",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-01-29T14:30:10",
                "message_text_only": "On Sun, Jan 29, 2012 at 6:19 AM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> (oops sorry greg- replied to you by mistake)\n>\n> That address he gives is 77 characters/bytes (same thing). What I'm asking\n> is how can it be so small.\n\n\nThat's an alternative design for multisig addresses that would put a byte\ngiving the type of transaction and the 20-byte hashes of each of the public\nkeys involved. They would not have been redeemed using CHECKMULTISIG, but\nwould use DUP HASH160 CHECKSIG and the arithmetic or logical opcodes to\ncreate the \"m of n\" condition.\n\nNobody really liked that solution because it means a new 'type' of bitcoin\naddress every time we want a new transaction type and long addresses.\n\nIts only advantage is it didn't use CHECKMULTISIG, so there were no\nproblems with maximum-sigops-per-block.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120129/733b78ce/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-29T14:40:01",
                "message_text_only": "On Sunday, January 29, 2012 9:30:10 AM Gavin Andresen wrote:\n> On Sun, Jan 29, 2012 at 6:19 AM, Amir Taaki <zgenjix at yahoo.com> wrote:\n> > (oops sorry greg- replied to you by mistake)\n> > \n> > That address he gives is 77 characters/bytes (same thing). What I'm\n> > asking is how can it be so small.\n> \n> That's an alternative design for multisig addresses that would put a byte\n> giving the type of transaction and the 20-byte hashes of each of the public\n> keys involved. They would not have been redeemed using CHECKMULTISIG, but\n> would use DUP HASH160 CHECKSIG and the arithmetic or logical opcodes to\n> create the \"m of n\" condition.\n> \n> Nobody really liked that solution because it means a new 'type' of bitcoin\n> address every time we want a new transaction type and long addresses.\n> \n> Its only advantage is it didn't use CHECKMULTISIG, so there were no\n> problems with maximum-sigops-per-block.\n\nIn other words, if the max-sigops-per-block were ever approaching a real \nproblem, we could just start using these kind of transactions instead hidden \nbehind the P2SH... so the one remotely-tangible benefit of BIP 16 over 17 has \nbeen solved, right? ;)"
            }
        ],
        "thread_summary": {
            "title": "Fw: Quote on BIP 16",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Gavin Andresen"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2181
        }
    },
    {
        "title": "[Bitcoin-development] Controlled block generation in fuzzer for testing blockchain",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-29T14:36:55",
                "message_text_only": "I added the ability to do controlled generation of blocks to gavin's fuzzer\n\nhttps://github.com/genjix/bitcoin/tree/fuzzer\n\n\nbitcoind -daemon\nbitcoind setfuzzpreviousblock\u00a0000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\nbitcoind setgenerate true\n\nIt will start hashing the block with the previous hash field set to\u00a0000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f and the target as 0x1d0000ff\n\nOn completion it will dump the hex value of the block to debug.log and exit.\n\nYou can then feed that block to your implementation in whatever controlled manner you wish (i.e with libbitcoin I made a simple tool in a few lines to read the hex and send it via the network in localhost). If anyone wants the libbitcoin tool then let me know and i'll paste it over on IRC."
            }
        ],
        "thread_summary": {
            "title": "Controlled block generation in fuzzer for testing blockchain",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Amir Taaki"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 795
        }
    },
    {
        "title": "[Bitcoin-development] All pre-BIP BIPs are not valid",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-29T22:40:14",
                "message_text_only": "Hi all,\n\nLuke Dashjr is telling me that BIP 20 was accepted as Final a year ago (before the BIP process existed).\n\nhttps://en.bitcoin.it/wiki/Bitcoin_Improvement_Proposals\n\n\nI respectfully disagree. I find it nonsensical to have a BIP to have been accepted before the BIP process existed. My feeling is that a BIP needs to go through the proper formalised motions in public before becoming accepted.\n\nThe URI Scheme did not go through these motions. I did not know it was even accepted, and at least 2 implementations have objected to the standard as is. This is problematic because a standard is meant to be consensus building not enforcement from above.\n\nErgo I am going to say:\n\nNO BIP EXISTED BEFORE THE BIP PROCESS.\n\nNEW BIPS ARE ALWAYS DRAFT STATUS.\n\nBIPS CHANGE STATUS AS SPECIFIED IN BIP 0001\n\nLuke claims I do not have the ability to specify those conditions above.\n\nIf there are any objections then please tell me. I did not get to observe the process for BIP 20, therefore I am not accepting it. Anybody is welcome to submit a competing BIP to Luke's BIP 20 (as has happened with BIP 16 and 17)."
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-29T22:50:40",
                "message_text_only": "First and foremost, I consider this thread an utter waste of time. These \nmatters were \"finished\" over a year ago, and there is no need to dig them up \nagain just because there are numbers for BIPs now. I don't intend to continue \nthis topic any further than necessary, since my time (and everyone else's) is \nbetter spent working on *actual forward progress*, not this attempt to rewrite \nhistory. That being said...\n\nOn Sunday, January 29, 2012 5:40:14 PM Amir Taaki wrote:\n> Luke Dashjr is telling me that BIP 20 was accepted as Final a year ago\n> (before the BIP process existed).\n\nBefore the BIP process was formalized. The process itself existed long before.\n\n> I respectfully disagree. I find it nonsensical to have a BIP to have been\n> accepted before the BIP process existed. My feeling is that a BIP needs to\n> go through the proper formalised motions in public before becoming\n> accepted.\n> \n> The URI Scheme did not go through these motions. I did not know it was even\n> accepted, and at least 2 implementations have objected to the standard as\n> is. This is problematic because a standard is meant to be consensus\n> building not enforcement from above.\n\nIt did. In early 2011, there was a consensus and multiple implementations (by \nname, I know of at least Spesmilo and WalletBuddy). This is by definition the \nFinal status. It was not until months later that anyone objected to the \nstandard.\n\n> Ergo I am going to say:\n> \n> NO BIP EXISTED BEFORE THE BIP PROCESS.\n\nYou are contradicting the assignment of BIP 0020 to a preexisting standard \nhere.\n\n> NEW BIPS ARE ALWAYS DRAFT STATUS.\n> \n> BIPS CHANGE STATUS AS SPECIFIED IN BIP 0001\n\nBy trying to demote BIP 0020 from Final to Draft, you are not following the \nspecification in BIP 0001.\n\n> Luke claims I do not have the ability to specify those conditions above.\n\nRather, I am claiming that assigning a number does not give you the authority \nto demote a preexisting standard. No other standards organization has \nattempted to claim preexisting standards don't exist or change their status.\n\n> If there are any objections then please tell me. I did not get to observe\n> the process for BIP 20, therefore I am not accepting it. Anybody is\n> welcome to submit a competing BIP to Luke's BIP 20 (as has happened with\n> BIP 16 and 17).\n\nAnyone is welcome to submit a new BIP aimed at Superceding BIP 20 (and doing \nso might make good sense soon, with various new functionality), but until that \noccurs, BIP 20 remains the Final status it has been for a whole year now."
            },
            {
                "author": "Matt Corallo",
                "date": "2012-01-29T23:02:30",
                "message_text_only": "I have to say, I agree with Luke here, this was Finalized a long time\nago.  The version that was agreed on can be seen at\nhttps://en.bitcoin.it/wiki/BIP_0021\n\nAlso see https://bitcointalk.org/index.php?topic=6205.0 and Luke's three\nbiased polls at \nhttps://bitcointalk.org/index.php?topic=6206.0\nhttps://bitcointalk.org/index.php?topic=6207.0\nhttps://bitcointalk.org/index.php?topic=6208.0\n\nMatt\n\nOn Sun, 2012-01-29 at 14:40 -0800, Amir Taaki wrote:\n> Hi all,\n> \n> Luke Dashjr is telling me that BIP 20 was accepted as Final a year ago (before the BIP process existed).\n> \n> https://en.bitcoin.it/wiki/Bitcoin_Improvement_Proposals\n> \n> \n> I respectfully disagree. I find it nonsensical to have a BIP to have been accepted before the BIP process existed. My feeling is that a BIP needs to go through the proper formalised motions in public before becoming accepted.\n> \n> The URI Scheme did not go through these motions. I did not know it was even accepted, and at least 2 implementations have objected to the standard as is. This is problematic because a standard is meant to be consensus building not enforcement from above.\n> \n> Ergo I am going to say:\n> \n> NO BIP EXISTED BEFORE THE BIP PROCESS.\n> \n> NEW BIPS ARE ALWAYS DRAFT STATUS.\n> \n> BIPS CHANGE STATUS AS SPECIFIED IN BIP 0001\n> \n> Luke claims I do not have the ability to specify those conditions above.\n> \n> If there are any objections then please tell me. I did not get to observe the process for BIP 20, therefore I am not accepting it. Anybody is welcome to submit a competing BIP to Luke's BIP 20 (as has happened with BIP 16 and 17)."
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-29T23:10:30",
                "message_text_only": "On Sunday, January 29, 2012 6:02:30 PM Matt Corallo wrote:\n> I have to say, I agree with Luke here, this was Finalized a long time\n> ago.  The version that was agreed on can be seen at\n> https://en.bitcoin.it/wiki/BIP_0021\n\nNo, that never had a consensus.\n\n> Also see https://bitcointalk.org/index.php?topic=6205.0 and Luke's three\n> biased polls at\n> https://bitcointalk.org/index.php?topic=6206.0\n> https://bitcointalk.org/index.php?topic=6207.0\n> https://bitcointalk.org/index.php?topic=6208.0\n\nAs everyone can observe from your bitcointalk links, you didn't begin trolling \nuntil months after the URI Scheme was Finalized (in January 2011)."
            }
        ],
        "thread_summary": {
            "title": "All pre-BIP BIPs are not valid",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Matt Corallo",
                "Amir Taaki"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5879
        }
    },
    {
        "title": "[Bitcoin-development] BIP 21 (modification BIP 20)",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-29T23:55:29",
                "message_text_only": "Matt Corallo posted a modification of BIP 20 in an earlier email and I asked him if he wanted to become the champion of that BIP he submitted.\n\nIt is a modification of BIP 20 sans the alternative non-decimal number stuff.\n\nhttps://en.bitcoin.it/wiki/BIP_0021\n\n\nRight now, I will ask the GUI client implementations like MultiBit or Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they support BIP 20 or BIP 21. Feel free to raise any objections.\n\nMore weight will be given to GUIs with actual URI scheme implementations and it's good to have a general consensus.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120129/e0808f48/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2012-01-30T09:13:37",
                "message_text_only": "I agree with BIP 0021\n\nWladimir\n\nOn Mon, Jan 30, 2012 at 12:55 AM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Matt Corallo posted a modification of BIP 20 in an earlier email and I\n> asked him if he wanted to become the champion of that BIP he submitted.\n>\n> It is a modification of BIP 20 sans the alternative non-decimal number\n> stuff.\n>\n> https://en.bitcoin.it/wiki/BIP_0021\n>\n> Right now, I will ask the GUI client implementations like MultiBit or\n> Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they\n> support BIP 20 or BIP 21. Feel free to raise any objections.\n>\n> More weight will be given to GUIs with actual URI scheme implementations\n> and it's good to have a general consensus.\n>\n>\n> ------------------------------------------------------------------------------\n> Try before you buy = See our experts in action!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-dev2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120130/beed5d9d/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2012-01-31T08:23:40",
                "message_text_only": "Generally I prefer BIP 21 over BIP 20.\n\nI'm neutral on the 'send' parameter - present in both BIPs - which I\ndon't understand. I think a practical usecase should be given in the BIP.\n\nAlso, the 'version' parameter is unclear. What does it mean? Is an oder\ndefined on versions (1.0b > 1.0)? Why is it an \";\" parameter rather than\na normal \"&\" parameter?\n\n\nOn 01/30/2012 12:55 AM, Amir Taaki wrote:\n> Matt Corallo posted a modification of BIP 20 in an earlier email and I\n> asked him if he wanted to become the champion of that BIP he submitted.\n> \n> It is a modification of BIP 20 sans the alternative non-decimal number\n> stuff.\n> \n> https://en.bitcoin.it/wiki/BIP_0021\n> \n> Right now, I will ask the GUI client implementations like MultiBit or\n> Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they\n> support BIP 20 or BIP 21. Feel free to raise any objections.\n> \n> More weight will be given to GUIs with actual URI sche me\n> implementations and it's good to have a general consensus.\n> \n> \n> ------------------------------------------------------------------------------\n> Try before you buy = See our experts in action!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-dev2\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Wladimir",
                "date": "2012-01-31T08:35:26",
                "message_text_only": "I also wonder whether the \"send to private address\" should be part of this\nBIP, or a future one.\n\nIMO (but your mileage may vary) this BIP should only define the bare-bones\nURL scheme, AND provide room for future extensions such\nas send-to-private-address, send-multiple-signers, and so on. These should\nbe forwards-compatible (as Luke-Jr says) in the sense that older clients\ncan detect schemes they don't understand and give the user an appropriate\nerror message.\n\nMaybe we need a send-type parameter to define the scheme?\n\nGood point on the version parameter. How are clients supposed to handle\nthis? Refuse to handle the request if their URL scheme parser version is\nolder than in the URL? This should be in the BIP.\n\nWladimir\n\nOn Tue, Jan 31, 2012 at 9:23 AM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> Generally I prefer BIP 21 over BIP 20.\n>\n> I'm neutral on the 'send' parameter - present in both BIPs - which I\n> don't understand. I think a practical usecase should be given in the BIP.\n>\n> Also, the 'version' parameter is unclear. What does it mean? Is an oder\n> defined on versions (1.0b > 1.0)? Why is it an \";\" parameter rather than\n> a normal \"&\" parameter?\n>\n>\n> On 01/30/2012 12:55 AM, Amir Taaki wrote:\n> > Matt Corallo posted a modification of BIP 20 in an earlier email and I\n> > asked him if he wanted to become the champion of that BIP he submitted.\n> >\n> > It is a modification of BIP 20 sans the alternative non-decimal number\n> > stuff.\n> >\n> > https://en.bitcoin.it/wiki/BIP_0021\n> >\n> > Right now, I will ask the GUI client implementations like MultiBit or\n> > Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they\n> > support BIP 20 or BIP 21. Feel free to raise any objections.\n> >\n> > More weight will be given to GUIs with actual URI sche me\n> > implementations and it's good to have a general consensus.\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Try before you buy = See our experts in action!\n> > The most comprehensive online learning library for Microsoft developers\n> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> > Metro Style Apps, more. Free future releases when you subscribe now!\n> > http://p.sf.net/sfu/learndevnow-dev2\n> >\n> >\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/8214b95c/attachment.html>"
            },
            {
                "author": "Gary Rowe",
                "date": "2012-01-31T10:01:00",
                "message_text_only": "I think that the \"send to private address\" field will require more effort\nto implement than the simpler \"expires\" and \"message\" fields and should be\ndeferred to a later BIP. There is a pressing need for expires and the only\npoint of contention I see is the inclusion of a dual representation (block\nor timestamp).\n\nPersonally, I feel that simple is best and while a block number represents\nBitcoin's pulse, there is no guarantee that a block will be discovered at\nany particular moment. From a merchant perspective the main point of the\nexpires field is to limit risk against currency movement (immediate cash\nout) or inventory movement (time limited offer). I have difficulty seeing a\ngood use case that would need a block. People have been co-ordinating\nevents based on a UTC timestamp for decades and I think we should stick\nwith it.\n\nRegarding the \"version\" field I again think it adds unnecessary complexity.\nPretty much everything that is needed within the Bitcoin URI scheme can be\nencoded with suitable optional fields (as query params) making the whole\nstructure forward compatible. Having a version field seems redundant.\n\nFinally, the URI signing mechanism. Apologies for the earlier\nmisunderstanding, I was reading from a limited description and it didn't\nmake the purpose clear. I've since used\nhttps://bitcointalk.org/index.php?topic=58534.msg689190#msg689190 as my\nreference which is a lot clearer. I think it's a good idea, and I'll\ndefinitely support it in my MulitBit Merchant project, but it currently\nseems to need more work so I think should be deferred into a dedicated BIP.\n\nOn 31 January 2012 08:35, Wladimir <laanwj at gmail.com> wrote:\n\n>\n> I also wonder whether the \"send to private address\" should be part of this\n> BIP, or a future one.\n>\n> IMO (but your mileage may vary) this BIP should only define the bare-bones\n> URL scheme, AND provide room for future extensions such\n> as send-to-private-address, send-multiple-signers, and so on. These should\n> be forwards-compatible (as Luke-Jr says) in the sense that older clients\n> can detect schemes they don't understand and give the user an appropriate\n> error message.\n>\n> Maybe we need a send-type parameter to define the scheme?\n>\n> Good point on the version parameter. How are clients supposed to handle\n> this? Refuse to handle the request if their URL scheme parser version is\n> older than in the URL? This should be in the BIP.\n>\n> Wladimir\n>\n> On Tue, Jan 31, 2012 at 9:23 AM, Andreas Schildbach <andreas at schildbach.de\n> > wrote:\n>\n>> Generally I prefer BIP 21 over BIP 20.\n>>\n>> I'm neutral on the 'send' parameter - present in both BIPs - which I\n>> don't understand. I think a practical usecase should be given in the BIP.\n>>\n>> Also, the 'version' parameter is unclear. What does it mean? Is an oder\n>> defined on versions (1.0b > 1.0)? Why is it an \";\" parameter rather than\n>> a normal \"&\" parameter?\n>>\n>>\n>> On 01/30/2012 12:55 AM, Amir Taaki wrote:\n>> > Matt Corallo posted a modification of BIP 20 in an earlier email and I\n>> > asked him if he wanted to become the champion of that BIP he submitted.\n>> >\n>> > It is a modification of BIP 20 sans the alternative non-decimal number\n>> > stuff.\n>> >\n>> > https://en.bitcoin.it/wiki/BIP_0021\n>> >\n>> > Right now, I will ask the GUI client implementations like MultiBit or\n>> > Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they\n>> > support BIP 20 or BIP 21. Feel free to raise any objections.\n>> >\n>> > More weight will be given to GUIs with actual URI sche me\n>> > implementations and it's good to have a general consensus.\n>> >\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> > Try before you buy = See our experts in action!\n>> > The most comprehensive online learning library for Microsoft developers\n>> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> > Metro Style Apps, more. Free future releases when you subscribe now!\n>> > http://p.sf.net/sfu/learndevnow-dev2\n>> >\n>> >\n>> >\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Keep Your Developer Skills Current with LearnDevNow!\n>> The most comprehensive online learning library for Microsoft developers\n>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> Metro Style Apps, more. Free future releases when you subscribe now!\n>> http://p.sf.net/sfu/learndevnow-d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/16ac1108/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2012-01-31T10:22:11",
                "message_text_only": "To ensure forward compatibility with optional fields, we need to define how\na client handles fields that it doesn't know about.\n\nWhen should it display an error message, and when should it silently accept\nand ignore the extraneous fields?\n\n(For example, if something that restricts the validity, such as \"expires\"\nis added later on, it is pretty important not to ignore it. Older clients\nshould refuse to comply.)\n\nURL signing should indeed be addressed in a separate BIP and be an\nextension mechanism, IMO.\n\n\"expires\" and \"message\" could go into BIP 21 one as they're easy to\nimplement and don't need much discussion.\n\nWladimir\n\nOn Tue, Jan 31, 2012 at 11:01 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\n> I think that the \"send to private address\" field will require more effort\n> to implement than the simpler \"expires\" and \"message\" fields and should be\n> deferred to a later BIP. There is a pressing need for expires and the only\n> point of contention I see is the inclusion of a dual representation (block\n> or timestamp).\n>\n> Personally, I feel that simple is best and while a block number represents\n> Bitcoin's pulse, there is no guarantee that a block will be discovered at\n> any particular moment. From a merchant perspective the main point of the\n> expires field is to limit risk against currency movement (immediate cash\n> out) or inventory movement (time limited offer). I have difficulty seeing a\n> good use case that would need a block. People have been co-ordinating\n> events based on a UTC timestamp for decades and I think we should stick\n> with it.\n>\n> Regarding the \"version\" field I again think it adds unnecessary\n> complexity. Pretty much everything that is needed within the Bitcoin URI\n> scheme can be encoded with suitable optional fields (as query params)\n> making the whole structure forward compatible. Having a version field seems\n> redundant.\n>\n> Finally, the URI signing mechanism. Apologies for the earlier\n> misunderstanding, I was reading from a limited description and it didn't\n> make the purpose clear. I've since used\n> https://bitcointalk.org/index.php?topic=58534.msg689190#msg689190 as my\n> reference which is a lot clearer. I think it's a good idea, and I'll\n> definitely support it in my MulitBit Merchant project, but it currently\n> seems to need more work so I think should be deferred into a dedicated BIP.\n>\n> On 31 January 2012 08:35, Wladimir <laanwj at gmail.com> wrote:\n>\n>>\n>> I also wonder whether the \"send to private address\" should be part of\n>> this BIP, or a future one.\n>>\n>> IMO (but your mileage may vary) this BIP should only define the\n>> bare-bones URL scheme, AND provide room for future extensions such\n>> as send-to-private-address, send-multiple-signers, and so on. These should\n>> be forwards-compatible (as Luke-Jr says) in the sense that older clients\n>> can detect schemes they don't understand and give the user an appropriate\n>> error message.\n>>\n>> Maybe we need a send-type parameter to define the scheme?\n>>\n>> Good point on the version parameter. How are clients supposed to handle\n>> this? Refuse to handle the request if their URL scheme parser version is\n>> older than in the URL? This should be in the BIP.\n>>\n>> Wladimir\n>>\n>> On Tue, Jan 31, 2012 at 9:23 AM, Andreas Schildbach <\n>> andreas at schildbach.de> wrote:\n>>\n>>> Generally I prefer BIP 21 over BIP 20.\n>>>\n>>> I'm neutral on the 'send' parameter - present in both BIPs - which I\n>>> don't understand. I think a practical usecase should be given in the BIP.\n>>>\n>>> Also, the 'version' parameter is unclear. What does it mean? Is an oder\n>>> defined on versions (1.0b > 1.0)? Why is it an \";\" parameter rather than\n>>> a normal \"&\" parameter?\n>>>\n>>>\n>>> On 01/30/2012 12:55 AM, Amir Taaki wrote:\n>>> > Matt Corallo posted a modification of BIP 20 in an earlier email and I\n>>> > asked him if he wanted to become the champion of that BIP he submitted.\n>>> >\n>>> > It is a modification of BIP 20 sans the alternative non-decimal number\n>>> > stuff.\n>>> >\n>>> > https://en.bitcoin.it/wiki/BIP_0021\n>>> >\n>>> > Right now, I will ask the GUI client implementations like MultiBit or\n>>> > Bitcoin-Qt, not different codebases like BitCoinJ or libbitcoin if they\n>>> > support BIP 20 or BIP 21. Feel free to raise any objections.\n>>> >\n>>> > More weight will be given to GUIs with actual URI sche me\n>>> > implementations and it's good to have a general consensus.\n>>> >\n>>> >\n>>> >\n>>> ------------------------------------------------------------------------------\n>>> > Try before you buy = See our experts in action!\n>>> > The most comprehensive online learning library for Microsoft developers\n>>> > is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3,\n>>> MVC3,\n>>> > Metro Style Apps, more. Free future releases when you subscribe now!\n>>> > http://p.sf.net/sfu/learndevnow-dev2\n>>> >\n>>> >\n>>> >\n>>> > _______________________________________________\n>>> > Bitcoin-development mailing list\n>>> > Bitcoin-development at lists.sourceforge.net\n>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Keep Your Developer Skills Current with LearnDevNow!\n>>> The most comprehensive online learning library for Microsoft developers\n>>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>>> Metro Style Apps, more. Free future releases when you subscribe now!\n>>> http://p.sf.net/sfu/learndevnow-d2d\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Keep Your Developer Skills Current with LearnDevNow!\n>> The most comprehensive online learning library for Microsoft developers\n>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> Metro Style Apps, more. Free future releases when you subscribe now!\n>> http://p.sf.net/sfu/learndevnow-d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/6c6c8e64/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2012-01-31T11:55:01",
                "message_text_only": "On 01/31/2012 11:22 AM, Wladimir wrote:\n\n> To ensure forward compatibility with optional fields, we need to define\n> how a client handles fields that it doesn't know about.\n> \n> When should it display an error message, and when should it silently\n> accept and ignore the extraneous fields?\n\nIMHO its standard that unknown URL parameters are simply ignored. I\nthink we should not change this principle.\n\n> (For example, if something that restricts the validity, such\n> as \"expires\" is added later on, it is pretty important not to ignore it.\n> Older clients should refuse to comply.)\n\nIn this case, you'd need to refuse *all* parameters you don't know\nabout. In consequence, all extensions would break older clients."
            },
            {
                "author": "Wladimir",
                "date": "2012-01-31T12:03:56",
                "message_text_only": ">\n> IMHO its standard that unknown URL parameters are simply ignored. I\n> think we should not change this principle.\n>\n\nIt's usually the right thing to do to be open to future backward-compatible\nchanges, but I don't know of any such standard, as it equally makes future\nnon-backward-compatible changes impossible.\n\nWhatever will be defined in the BIP is the standard in this case.\n\n\n> > (For example, if something that restricts the validity, such\n> > as \"expires\" is added later on, it is pretty important not to ignore it.\n> > Older clients should refuse to comply.)\n>\n> In this case, you'd need to refuse *all* parameters you don't know\n> about. In consequence, all extensions would break older clients.\n>\n\nWhich is exactly what I want to avoid by defining this up-front.\n\nA versioning scheme can avoid this. Any BIP that breaks backwards\ncompatibility (for example, adds a multiple-send type or specific\nrestriction) should increase the version number. A client rejects URLs with\na version number higher than what it knows about.\n\nThat's the simplest way to handle it, and enough IMO.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/677da89f/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-01-31T10:44:44",
                "message_text_only": "On Tue, Jan 31, 2012 at 10:01:00AM +0000, Gary Rowe wrote:\n> Personally, I feel that simple is best and while a block number represents\n> Bitcoin's pulse, there is no guarantee that a block will be discovered at\n> any particular moment. From a merchant perspective the main point of the\n> expires field is to limit risk against currency movement (immediate cash\n> out) or inventory movement (time limited offer). I have difficulty seeing a\n> good use case that would need a block. People have been co-ordinating\n> events based on a UTC timestamp for decades and I think we should stick\n> with it.\n\nFor merchant purposes, I believe URI's containing a static pubkeyhash-address\nare only a temporary solution until more elaborate solutions that deal with\nall concerns appear (tagging transactions, feedback to the merchant, making\nthe receiver responsible for inclusion, certificates that a payment was\naccepted, authentication, ...). I believe static addresses are too limited\nfor this purpose, and we shouldn't be trying to extend them with too many\nfeatures.\n\nThere have been discussions about more dynamic approaches (such as HTTP\ncommunication to negotiate an address) here, and I've written my own\nproposal as well (https://gist.github.com/1237788). The details are not\nreally relevant at this time, but these dynamic approaches seem a much\nbetter way of dealing with what you're trying to add to the bitcoin URI\nsystem now.\n\nMy 2 cents: keep bitcoin URI's simple for now.\n\n-- \nPieter"
            },
            {
                "author": "thomasV1 at gmx.de",
                "date": "2012-01-30T18:07:16",
                "message_text_only": "I too support BIP21 over BIP20. However, I do not understand the \"Sending money via private key\" feature; in which situation would such a URI be useful?\n\nAlso, I posted a proposal in the forum, to extend the URI syntax with signatures. The goal would be to provide a proof of identity of the recipient; genjix told me that it would be more appropriate to post that here.\n\nMy proposal is described here: http://ecdsa.org/bitcoin_URIs.html\n\nMy original forum post is here: https://bitcointalk.org/index.php?topic=58534.msg689190#msg689190\n\n-- \nEmpfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir\nbelohnen Sie mit bis zu 50,- Euro! https://freundschaftswerbung.gmx.de"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-30T18:44:06",
                "message_text_only": "On Monday, January 30, 2012 1:07:16 PM thomasV1 at gmx.de wrote:\n> I too support BIP21 over BIP20.\n\nBIP 21 is not forwards-compatible, and is intentionally designed to be biased \ntoward decimal. BIP 20 is neutrally biased, forward-compatible, and has been \nimplemented for over a year now. If BIP 20 is to be Superceded, a proposal \nshould improve on it, not make it worse with bigotry and short-sightedness."
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-30T18:56:14",
                "message_text_only": "On Monday, January 30, 2012 1:50:03 PM Gary Rowe wrote:\n> Speaking on behalf of the MultiBit team (Jim's currently on holiday), we\n> will not be supporting Tonal Bitcoins anytime soon. Therefore we back the\n> BIP 21 proposal.\n\nIt is not correct to imply that BIP 20 requires Tonal Bitcoin support.\nIn fact, the exact opposite is true; it states that even if one unit (eg, TBC) \nwould be a more rational way to display a specified amount, clients should \nstill interpret it in the way that is deemed to be most intuitive to the user \n(eg, BTC)."
            },
            {
                "author": "Gary Rowe",
                "date": "2012-01-30T19:13:52",
                "message_text_only": "Having closely read the BIP20 proposal, I can see your point. As I see it,\nBIP 20 vs BIP 21 is about standardising on a representation of the \"amount\"\nfield. BIP 20 proposes that \"amount\" can contain alternative\nrepresentations, clearly defined, whereas BIP 21 requires the use of a\nsingle representation in decimal notation.\n\nIn my view, BIP 21 still wins since it reduces complexity for the end\nclient both at the human and machine level.\n\nOn 30 January 2012 18:56, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Monday, January 30, 2012 1:50:03 PM Gary Rowe wrote:\n> > Speaking on behalf of the MultiBit team (Jim's currently on holiday), we\n> > will not be supporting Tonal Bitcoins anytime soon. Therefore we back the\n> > BIP 21 proposal.\n>\n> It is not correct to imply that BIP 20 requires Tonal Bitcoin support.\n> In fact, the exact opposite is true; it states that even if one unit (eg,\n> TBC)\n> would be a more rational way to display a specified amount, clients should\n> still interpret it in the way that is deemed to be most intuitive to the\n> user\n> (eg, BTC).\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120130/cb417acb/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-30T19:17:03",
                "message_text_only": "On Monday, January 30, 2012 2:13:52 PM Gary Rowe wrote:\n> Having closely read the BIP20 proposal, I can see your point. As I see it,\n> BIP 20 vs BIP 21 is about standardising on a representation of the \"amount\"\n> field. BIP 20 proposes that \"amount\" can contain alternative\n> representations, clearly defined, whereas BIP 21 requires the use of a\n> single representation in decimal notation.\n> \n> In my view, BIP 21 still wins since it reduces complexity for the end\n> client both at the human and machine level.\n\nIf the goal is to reduce complexity, strtol-compatible amount is the answer ;)"
            },
            {
                "author": "thomasV1 at gmx.de",
                "date": "2012-01-31T06:54:44",
                "message_text_only": "> Regarding the idea of a signed URI, it is appealing, however, it may not\n> work. If I understand it correctly, the main idea appears to be to protect\n> a URI from malicious replacement \n\nNo. The main idea is to protect the consumer against a malicious seller pretending that he has not been paid. Please read the forum.\n\n> If a Bitcoin URI is served up from a\n> trusted source (e.g. a merchant site over HTTPS) then there is no need for\n> signing. It should be assumed that the merchant will offer a clean room\n> payment area so that no untrusted JavaScript will creep into the final\n> page\n> and wreak havoc.\n> \n> It would seem that in any situation where the attacker has complete\n> control\n> over the content of the URI they will be able to successfully swab it to\n> match their own fraudulent address. Imagine attempting to protect a QR\n> code\n> posted against a pole attempting to get BTC donations for a charity. How\n> long before that was replaced by a different version operated by the\n> thieves with good signatures all round?\n> \n> Of course, I may have misunderstood so I would welcome further discussion.\n\nThe bitcoin address that is used to sign URIs will establish the online reputation of the merchant. If a merchant has received a payment and pretends not to have received it, the signed URI will prove him wrong. \n\nIn principle it would be possible to use HTTPS signatures for that purpose, but this is not really the way HTTPS is supposed to work, and it has disadvantages:\n- HTTPS is not always available; there are other communication channels.\n- A website, even a single page, may contain URIs posted by various merchants; we need to distinguish the identity of the merchant from the identity of the website.\n- with signed URIs, a Bitcoin client can easily keep track of the signatures for all the payments it made. if we used the HTTPS signature of the webpage as receipts, then users would need to save them manually. To my knowledge, nobody does that.\n\n\n\n> One field that the MultiBit team would like to add to the BIP 21 proposal\n> is \"expires\" which would contain an ISO8601 formatted date/time in UTC\n> (e.g. \"2000-01-01T23:59:59Z\"). This would allow merchants to issue Bitcoin\n> URIs that would expose them to a currency/inventory risk for a defined\n> period of time.\n\nyes, that too. see my proposal here: https://bitcointalk.org/index.php?topic=60828.0;topicseen\n\n-- \nEmpfehlen Sie GMX DSL Ihren Freunden und Bekannten und wir\nbelohnen Sie mit bis zu 50,- Euro! https://freundschaftswerbung.gmx.de"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-01-31T13:12:19",
                "message_text_only": "RE: BIP 21 versus BIP 20:  I like BIP 21; simpler is better.\n\nRE: signing and dating URIs:  good ideas.  I think we should agree\nthat there is consensus around BIP 21 and then after there is some\nexperience with signing/dating URIs you should write follow-up BIPs .\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Cameron Garnham",
                "date": "2012-01-31T13:20:10",
                "message_text_only": "On 1/02/2012 00:12, Gavin Andresen wrote:\n> RE: BIP 21 versus BIP 20:  I like BIP 21; simpler is better.\n> \n> RE: signing and dating URIs:  good ideas.  I think we should agree\n> that there is consensus around BIP 21 and then after there is some\n> experience with signing/dating URIs you should write follow-up BIPs .\n> \n\nIf we had a self signed URI, we could just pay directly to the public\nkey (or calculate the bitcoin address from it).  It\nwould no longer require a bitcoin address in the URI.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x33B5E7D6.asc\nType: application/pgp-keys\nSize: 2647 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/05727153/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x33B5E7D6.asc\nType: application/pgp-keys\nSize: 2646 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/05727153/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 283 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120201/05727153/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP 21 (modification BIP 20)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Wladimir",
                "Andreas Schildbach",
                "thomasV1 at gmx.de",
                "Amir Taaki",
                "Gavin Andresen",
                "Gary Rowe",
                "Pieter Wuille",
                "Cameron Garnham"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 30988
        }
    },
    {
        "title": "[Bitcoin-development] CAddrMan: Stochastic IP address manager",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2012-01-30T02:31:02",
                "message_text_only": "Hello all,\n\nwanting to move to IPv6 support in the Satoshi bitcoin client\nsomewhere in the future, the way IP addresses were managed is not\nreally possible anymore. Right now, basically all addresses ever seen\nare kept - both on-disk and in-memory, and sorted on last-seen time\nwith some randomization. For some people this lead to multi-megabyte\naddr.dat files that took ages (well, seconds) to load.\n\nAfter some discussion with Gregory Maxwell and others on IRC, I\ndecided to write a specialized address manager based on an entirely\ndifferent principle: only keep a limited number of addresses, keep and\nindex them in-memory, and only occasionally (and asynchronously) dump\nthem to disk. This of course leads to a weakness: attackers may try to\npoison your entire address cache with addresses they control, in order\nto perform a Sybil attack. This is especially dangerous in the context\nof IPv6, where much more possible addresses exist.\n\nTo protect against this, we came up with this design: keep two tables:\none that keeps addresses we've had actual connections with, and one\nthat maintains untried/new addresses. Both are separated into several\nlimited-size buckets. Each tables provides a level of protection\nagainst sybil attacks:\n * Addresses in the first table are placed in one of only a few\nbuckets chosen based on the address range (/16 for IPv4). This way, an\nattacker cannot have tons of active nodes in the same /16 range, and\nuse those to fill the table.\n * Addresses in the second table are placed in one of a few buckets\nchosen based on address range the information came from, instead of\nthe address itself. This way, an attacker spamming you with tons of\n\"addr\" messages can only still have a limited effect.\n * All crucial decisions (selection of addresses, picking a place in a\nbucket, which entry to evict if necessary, ...) are randomized with\nbiases to improve efficiency. Selection of buckets is based on a\ncryptographic hash using a secret key to deterministically randomize\nbehaviour.\n\nThe implementation is available in pull request 787\n(https://github.com/bitcoin/bitcoin/pull/787), but there is certainly\nneed for testing, and room for improvements. Test reports, comments,\nconstructive criticism, suggestions and improvements are very welcome.\n\n-- \nPieter"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-30T02:37:23",
                "message_text_only": "On Sunday, January 29, 2012 9:31:02 PM Pieter Wuille wrote:\n> The implementation is available in pull request 787\n> (https://github.com/bitcoin/bitcoin/pull/787), but there is certainly\n> need for testing, and room for improvements. Test reports, comments,\n> constructive criticism, suggestions and improvements are very welcome.\n\nAs of yesterday, this is also part of my `next' and `next-test' branches.\n\nSummary of latest next/next-test:\n\n*** ACCEPTED (`next' branch)\n\t719 coinbaser\t\t\t\t\t3dc0e2a\n\t755 explicit_p2sh\t\t\t\t6728ecb\n\t787 sipa/addrman\t\t\t\t70b8988\n\t786 sipa/checkkeys\t\t\tc0e8c4d\n\n*** NEEDS ACCEPT\n\t570 force_send (557)\t\t\t9437c14\n\t568 rpc_keepalive\t\t\t\t178f2c3\t(threaded_rpc included)\n\n*** NEEDS REVIEW\n\t457 origin-pull/457/head*\t433b275\tIPv6 JSON-RPC\n\t565 optimize_FastGetWork\t4c1214f\n\t691 origin-pull/691/head\t6192d6d\tTemporarily disable \"minimize to tray\"\n\n*** NEEDS SUPPORT\n\t780 checkhashverify\t\t\t60649bd\n\t715 bugfix_client_name\t\tfd6fc41\n\t559 accept_nonstdtxn\t\t   7945399\n\t552 base58_liberal_parsing\te005327\n\t553 bugfix_qt_uri_amount_\u2026\t45d7c36\n\t562 optimize_ToHex\t\t\ta781103\n\nLuke"
            },
            {
                "author": "Michael Hendricks",
                "date": "2012-01-30T16:53:27",
                "message_text_only": "On Sun, Jan 29, 2012 at 7:31 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> wanting to move to IPv6 support in the Satoshi bitcoin client\n> somewhere in the future, the way IP addresses were managed is not\n> really possible anymore. Right now, basically all addresses ever seen\n> are kept - both on-disk and in-memory, and sorted on last-seen time\n> with some randomization. For some people this lead to multi-megabyte\n> addr.dat files that took ages (well, seconds) to load.\n\nI think this is a great change for IPv4 too.  On certain machines with\nslow IO, I routinely delete the address database before starting\nbitcoind to improve load times.\n\n> After some discussion with Gregory Maxwell and others on IRC, I\n> decided to write a specialized address manager based on an entirely\n> different principle: only keep a limited number of addresses, keep and\n> index them in-memory, and only occasionally (and asynchronously) dump\n> them to disk.\n\nI've started a couple patches with a similar design, but not produced\nanything I'm happy with.  That work has persuaded me that this\narchitecture is a valuable improvement over what we have today.\n\n> This of course leads to a weakness: attackers may try to\n> poison your entire address cache with addresses they control, in order\n> to perform a Sybil attack. This is especially dangerous in the context\n> of IPv6, where much more possible addresses exist.\n\nIf the Bitcoin client has multiple peer discovery methods enabled\n(IRC, DNS, seed nodes, etc), it might be wise to guarantee that at\nleast one peer is selected via each method.  This requires a Sybil\nattacker to control all peer discovery methods for a successful\nattack.\n\n> To protect against this, we came up with this design: keep two tables:\n> one that keeps addresses we've had actual connections with, and one\n> that maintains untried/new addresses. Both are separated into several\n> limited-size buckets. Each tables provides a level of protection\n> against sybil attacks:\n> \u00a0* Addresses in the first table are placed in one of only a few\n> buckets chosen based on the address range (/16 for IPv4). This way, an\n> attacker cannot have tons of active nodes in the same /16 range, and\n> use those to fill the table.\n> \u00a0* Addresses in the second table are placed in one of a few buckets\n> chosen based on address range the information came from, instead of\n> the address itself. This way, an attacker spamming you with tons of\n> \"addr\" messages can only still have a limited effect.\n\nCool design.  It seems resilient to many attacks.  A Sybil attack\ncoming from a large botnet (which controls addresses in many ranges)\ncan still fill all buckets in both tables, I think.  As far as I can\ntell, that wasn't possible with the old design.\n\n-- \nMichael"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-01-31T02:05:49",
                "message_text_only": "> Cool design. \u00a0It seems resilient to many attacks. \u00a0A Sybil attack\n> coming from a large botnet (which controls addresses in many ranges)\n> can still fill all buckets in both tables, I think. \u00a0As far as I can\n> tell, that wasn't possible with the old design.\n\nGiven the randomness in Pieter's design, that seems extremely unlikely\n/ difficult to do. Is it possible to do a back-of-the-envelope\ncalculation to figure out what percentage of nodes on the network an\nattacker would have to control to have a (say) 1% chance of a\nsuccessful Sybil attack?\n\nI like this change; I'd like to pull it for the 0.6 release.\n\nI've also been wondering if it is time to remove the IRC bootstrapping\nmechanism; it would remove a fair bit of code and we'd stop getting\nreports that various ISPs tag bitcoin as malware.  When testing the\nlist of built-in bootstrapping IP addresses I always connect fairly\nquickly, and the DNS seeding hosts seems to be working nicely, too.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-31T02:07:05",
                "message_text_only": "On Monday, January 30, 2012 9:05:49 PM Gavin Andresen wrote:\n> I've also been wondering if it is time to remove the IRC bootstrapping\n> mechanism; it would remove a fair bit of code and we'd stop getting\n> reports that various ISPs tag bitcoin as malware.  When testing the\n> list of built-in bootstrapping IP addresses I always connect fairly\n> quickly, and the DNS seeding hosts seems to be working nicely, too.\n\nHow about just disable it by default for 0.6 and strip it out entirely before \n0.7 if there's no problems?"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-31T02:57:31",
                "message_text_only": "On Mon, Jan 30, 2012 at 9:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> I've also been wondering if it is time to remove the IRC bootstrapping\n> mechanism; it would remove a fair bit of code and we'd stop getting\n> reports that various ISPs tag bitcoin as malware. \u00a0When testing the\n> list of built-in bootstrapping IP addresses I always connect fairly\n> quickly, and the DNS seeding hosts seems to be working nicely, too.\n\nS\u03bf\u2014 would we remove it or leave it deactivated as a fallback users can turn on?\n\nI have two different thoughts about IRC depending on the answer.\n\nI think it's important that we have more mechanisms then just DNS and\nhardcoded seednodes.\n\nThis is important because the mechanisms we have are all pretty\nsubject to blocking. Now\u2014 before you say it\u2014 Bitcoin isn't intended to\nbe blocking resistant (combine it with Tor and Tor anti-censorship\ntools) but by making blocking a bit harder we discourage people from\neven trying, even if we're not seriously in the anti-blocking\nbusiness\u2014 and it gives bitcoin users more confidence because there is\na bit less FUD  \"What if your ISP blocks it?? It uses DNS! Someone\nmight take away the domains! SOPA PIPI ACTA CIPA Alakazam\".\n\nIs the fact that users can addnodes / addr.txt enough of an\nalternative to address this?   _If so_, then removing it is a good\nidea.  I volunteer to maintain a multi-channel joining node for the\nforeseeable future to avoid letting old clients get partitioned\n(several people need to do this).\n\nAn area where I think our mechanisms are inadequate absent IRC is\nannouncing new nodes. I had a new listener up for over a week recently\nand was basically getting no inbound until I enabled IRC.   I\nvolunteer to do some measurement of this (e.g. bring up some nodes\nwith no irc and find out how long until sipa hears about them).  If\nDNS seeds are slow to learn about new nodes we may need to add a\nsimple UDP announcement feature.\n\nIn any case, I hadn't been thinking that we would completely remove\nIRC\u2014 I was expecting us to keep IRC around but turned off.\n\nIn particular I think it may be a little risky to turn off IRC at the\nsame time as deploying addrman, because if addrman has unexpected bad\nbehavior IRC is what may keep things going.  Obviously it should be\nwell tested enough to feel confident, but belt-and-suspenders is the\nway to go.\n\n\nIf we do keep in the long run I think it's important to _fix_ IRC.\nRight now it has some really stupid behavior which is highly\npro-partitioning.\n\n*/who only returns a few nodes, and because most idlers aren't\nactually working (no port forward) it's usually for there to be only a\nfew that work. (I've never seen zero, but I've seen 1).\n*Other than who we only learn about nodes when they join. But the\nstable long lived nodes we need to hear about seldom rejoin. Nonuseful\nwindows boxes go up and down a lot.\n*Nodes sit in a single channel forever. There are 100 of them.\nEspecially with fewer clients on line nodes may be sitting alone with\nno correctly working nodes with them.\n*Nodes recently seen on IRC are highly promoted in the peer selection.\n\nSo, here is an updated irc.cpp which I've been running (in various\nversions) for a while:\nhttp://people.xiph.org/~greg/irc.cpp\n\nIt does the following things:\n* Only stays connected for a half hour\n* If its sure its not listening it uses a random nick so people won't\ntry to connect\n* Reconnects if it needs more connections\n* If the node is actually listening (evidence by actual incoming\nconnections) it reconnects on its own every 1-2 hours and joins two\nchannels at random rather than one.\n(it doesn't change peer selection\u2014 It's hard to be confident of the\nimpact of that change. I think addrman makes it less of an issue)\n\nI've only not submitted it as a pull request because I haven't had a\nchance to test to my standards, and because I felt unsure about the\nfuture of IRC.\n\nI feel strongly that if we're going to keep IRC as a backup we should\nfix it. If we're not going to bother then thats fine\u2014 but I think we\nneed to think carefully if we're doing enough for bootstraping (with\nthe points I made) without it.\n\nCertainly getting it off by default would be a good move. The botnet\nallegations are horrible."
            },
            {
                "author": "grarpamp",
                "date": "2012-01-31T08:19:27",
                "message_text_only": "> I think it's important that we have more mechanisms then just DNS and\n> hardcoded seednodes.\n> This is important because the mechanisms we have are all pretty\n> subject to blocking. Now\u2014 before you say it\u2014 Bitcoin isn't intended to\n> be blocking resistant (combine it with Tor and Tor anti-censorship\n> tools)\n> Is the fact that users can addnodes / addr.txt enough of an\n> alternative to address this?\n\nPerhaps not worry about removing it too much. As above, if blocking\nor other issues arise, people will be hosting manual lists and nodes\non hidden sites... Tor/I2P/etc. The nodes are already there.\nFor that matter, since the nodes are talking once seeded, why not\ndeploy a DHT and be done. All you'd need is one friendly node and\nthe list comes in and maintains itself through node expiry rules.\nYour node publishes its hello for others to discover, etc.\nIRC, DNS, etc would go away in favor of autonomy. It wouldn't\nbe any more resistant. But if people wanted that, some form of\nsignatures from the hidden nodes would do... if you trusted them.\nBooting and running is easy, trust isn't (ask the Tor/I2P people)."
            },
            {
                "author": "solar",
                "date": "2012-01-31T13:50:13",
                "message_text_only": "We split IRC among all those channels to handle the load when there were 60k clients.. the ideal thing would be some kind of dynamic sizing, and this applies to the number of outbound connections and transaction relaying logic too.. the same values that work for 1k clients don't work as well for 50k.  It is difficult to get this kind of thing tuned correctly, especially with the added complexity of potentially malicious nodes.\n\nI think the observed isolation problems, with or without IRC, are simply due to there not being many bitcoin nodes leaving/joining the network.  The ones that are stable are happy with their 8 connections or whatever they're set to, and they're just relaying.  There are only about 5k clients on IRC now.. it would probably work to go back to the single channel model as (at least from the IRC point of view) the usage is declining not growing.  Maybe people are just turning off IRC though.  IRC works well with many channels having a few clients each, not with one channel having many clients.  We considered probing bitcoin clients to see if they're listening and favoring those clients in the WHO response, kind of like the DNS booters, but nobody got around to doing it.\n\nStill, I think it's good to have a bunch of different ways to bootstrap in case one or the other is broken/poisoned.\n\nLaszlo\n\n\n\nOn Jan 31, 2012, at 2:57 AM, Gregory Maxwell wrote:\n\n> On Mon, Jan 30, 2012 at 9:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>> I've also been wondering if it is time to remove the IRC bootstrapping\n>> mechanism; it would remove a fair bit of code and we'd stop getting\n>> reports that various ISPs tag bitcoin as malware.  When testing the\n>> list of built-in bootstrapping IP addresses I always connect fairly\n>> quickly, and the DNS seeding hosts seems to be working nicely, too.\n> \n> S\u03bf\u2014 would we remove it or leave it deactivated as a fallback users can turn on?\n> \n> I have two different thoughts about IRC depending on the answer.\n> \n> I think it's important that we have more mechanisms then just DNS and\n> hardcoded seednodes.\n> \n> This is important because the mechanisms we have are all pretty\n> subject to blocking. Now\u2014 before you say it\u2014 Bitcoin isn't intended to\n> be blocking resistant (combine it with Tor and Tor anti-censorship\n> tools) but by making blocking a bit harder we discourage people from\n> even trying, even if we're not seriously in the anti-blocking\n> business\u2014 and it gives bitcoin users more confidence because there is\n> a bit less FUD  \"What if your ISP blocks it?? It uses DNS! Someone\n> might take away the domains! SOPA PIPI ACTA CIPA Alakazam\".\n> \n> Is the fact that users can addnodes / addr.txt enough of an\n> alternative to address this?   _If so_, then removing it is a good\n> idea.  I volunteer to maintain a multi-channel joining node for the\n> foreseeable future to avoid letting old clients get partitioned\n> (several people need to do this).\n> \n> An area where I think our mechanisms are inadequate absent IRC is\n> announcing new nodes. I had a new listener up for over a week recently\n> and was basically getting no inbound until I enabled IRC.   I\n> volunteer to do some measurement of this (e.g. bring up some nodes\n> with no irc and find out how long until sipa hears about them).  If\n> DNS seeds are slow to learn about new nodes we may need to add a\n> simple UDP announcement feature.\n> \n> In any case, I hadn't been thinking that we would completely remove\n> IRC\u2014 I was expecting us to keep IRC around but turned off.\n> \n> In particular I think it may be a little risky to turn off IRC at the\n> same time as deploying addrman, because if addrman has unexpected bad\n> behavior IRC is what may keep things going.  Obviously it should be\n> well tested enough to feel confident, but belt-and-suspenders is the\n> way to go.\n> \n> \n> If we do keep in the long run I think it's important to _fix_ IRC.\n> Right now it has some really stupid behavior which is highly\n> pro-partitioning.\n> \n> */who only returns a few nodes, and because most idlers aren't\n> actually working (no port forward) it's usually for there to be only a\n> few that work. (I've never seen zero, but I've seen 1).\n> *Other than who we only learn about nodes when they join. But the\n> stable long lived nodes we need to hear about seldom rejoin. Nonuseful\n> windows boxes go up and down a lot.\n> *Nodes sit in a single channel forever. There are 100 of them.\n> Especially with fewer clients on line nodes may be sitting alone with\n> no correctly working nodes with them.\n> *Nodes recently seen on IRC are highly promoted in the peer selection.\n> \n> So, here is an updated irc.cpp which I've been running (in various\n> versions) for a while:\n> http://people.xiph.org/~greg/irc.cpp\n> \n> It does the following things:\n> * Only stays connected for a half hour\n> * If its sure its not listening it uses a random nick so people won't\n> try to connect\n> * Reconnects if it needs more connections\n> * If the node is actually listening (evidence by actual incoming\n> connections) it reconnects on its own every 1-2 hours and joins two\n> channels at random rather than one.\n> (it doesn't change peer selection\u2014 It's hard to be confident of the\n> impact of that change. I think addrman makes it less of an issue)\n> \n> I've only not submitted it as a pull request because I haven't had a\n> chance to test to my standards, and because I felt unsure about the\n> future of IRC.\n> \n> I feel strongly that if we're going to keep IRC as a backup we should\n> fix it. If we're not going to bother then thats fine\u2014 but I think we\n> need to think carefully if we're doing enough for bootstraping (with\n> the points I made) without it.\n> \n> Certainly getting it off by default would be a good move. The botnet\n> allegations are horrible.\n> \n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Michael Hendricks",
                "date": "2012-01-31T04:33:02",
                "message_text_only": "On Mon, Jan 30, 2012 at 7:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> Given the randomness in Pieter's design, that seems extremely unlikely\n> / difficult to do. Is it possible to do a back-of-the-envelope\n> calculation to figure out what percentage of nodes on the network an\n> attacker would have to control to have a (say) 1% chance of a\n> successful Sybil attack?\n\nThe randomness prevents finely crafted attacks since an attacker can't\npredict which bucket his address ends up in.  I don't think it helps\nagainst brute force attacks though.  If 60% of the network's nodes are\ncontrolled by an evil botnet, 60% of the nodes we pull out of the\naddress manager point to the attacker.  If a client has 8 connections\nto the network, a Sybil attack would succeed 1.7% of the time.  At\ncurrent network size, 60% of listening nodes is 2,800; only 2-5% of a\ndecent botnet.\n\nNodes that accept incoming connections are far less vulnerable, since\nthe probability of success decreases exponentially with the number of\nconnections.  95% botnet control with 125 connections has 10^-6 chance\nof success.\n\nPerhaps we could add a command-line option for increasing the maximum\nnumber of outbound connections.  That way, nodes unable to accept\nincoming connections can easily decrease their susceptibility to Sybil\nattack.\n\n> I've also been wondering if it is time to remove the IRC bootstrapping\n> mechanism; it would remove a fair bit of code and we'd stop getting\n> reports that various ISPs tag bitcoin as malware. \u00a0When testing the\n> list of built-in bootstrapping IP addresses I always connect fairly\n> quickly, and the DNS seeding hosts seems to be working nicely, too.\n\nI think it should be disabled by default one release after the new\naddress manager is released.  That way, we're not changing too many\nparts of the bootstrapping process at once.\n\nAs an aside, I can't help but wonder whether ISPs blocking IRC traffic\nfilters some botnets out of the IRC bootstrapping channels; keeping\nthem more \"pure\".\n\n-- \nMichael"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-31T07:17:07",
                "message_text_only": "On Mon, Jan 30, 2012 at 11:33 PM, Michael Hendricks <michael at ndrix.org> wrote:\n> address manager point to the attacker. \u00a0If a client has 8 connections\n> to the network, a Sybil attack would succeed 1.7% of the time.\n\nMeh, careful not to mixup addrman created issues with preexisting ones\nsimply related to the number of connections vs the number of nodes.\nEven absent addressman someone who can spin up a large multiple of the\ncurrent nodes as tcp forwarders to a system they control can capture\nall of a nodes outbound connections.\n\nIncreasing the number of outbound connections is a very bad solution\nto this problem: It invites a tragedy of the commons: you get the\n\"best\" security by setting your number as high as it will let you. Who\ndoesn't want security?   Meanwhile we've come pretty close to running\nout of open listening ports already in the past.\n\nThere is a much more scalable improvement for those concerned about\nthe sybil attack (I say those concerned because a sybil attack is not\nthat fatal in bitcoin\u2014 checkpoints prevent a total fantasy chain, it's\nmostly  but not entirely a DOS risk)...\n\nThe solution is to addnode a couple of (ideally) trusted nodes, or\nfailing the availability of trusted nodes, a few that you think are\nunlikely to be mutually cooperating against you.\n\nA single connection to the 'good' network kills isolation attacks\ndead, so a couple carefully selected outbound connections its a more\nsecure remedy and one which doesn't explode the network."
            },
            {
                "author": "Michael Hendricks",
                "date": "2012-01-31T15:06:45",
                "message_text_only": "On Tue, Jan 31, 2012 at 12:17 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Mon, Jan 30, 2012 at 11:33 PM, Michael Hendricks <michael at ndrix.org> wrote:\n>> address manager point to the attacker. \u00a0If a client has 8 connections\n>> to the network, a Sybil attack would succeed 1.7% of the time.\n>\n> Meh, careful not to mixup addrman created issues with preexisting ones\n> simply related to the number of connections vs the number of nodes.\n> Even absent addressman someone who can spin up a large multiple of the\n> current nodes as tcp forwarders to a system they control can capture\n> all of a nodes outbound connections.\n\nI think I've explained myself poorly.  On my nodes, the old address\ndatabase routinely has 120k addresses.  With the new address manager,\nit will have 20k addresses.  Filling the former with 60% evil nodes\nrequires 72,000 evil nodes; while the latter requires 12,000.\n\nAs I mentioned in my first post, I think the new address manager \"is a\nvaluable improvement over what we have today\".  I think it should be\nincluded in the next release.\n\nI also think we should be aware that we're making it somewhat easier\nto isolate outbound-only nodes.  A single listening node can support\n15 non-listening nodes (125/8).  The network currently has 5\nnon-listening nodes for every listening node.  That ratio has stayed\nquite stable, so I think we have wiggle room if we wanted to allow\nmore outbound connections in some circumstances.\n\n-- \nMichael"
            },
            {
                "author": "Michael Hendricks",
                "date": "2012-01-31T15:07:16",
                "message_text_only": "On Tue, Jan 31, 2012 at 12:17 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Mon, Jan 30, 2012 at 11:33 PM, Michael Hendricks <michael at ndrix.org> wrote:\n>> address manager point to the attacker. \u00a0If a client has 8 connections\n>> to the network, a Sybil attack would succeed 1.7% of the time.\n>\n> Meh, careful not to mixup addrman created issues with preexisting ones\n> simply related to the number of connections vs the number of nodes.\n> Even absent addressman someone who can spin up a large multiple of the\n> current nodes as tcp forwarders to a system they control can capture\n> all of a nodes outbound connections.\n\nI think I've explained myself poorly.  On my nodes, the old address\ndatabase routinely has 120k addresses.  With the new address manager,\nit will have 20k addresses.  Filling the former with 60% evil nodes\nrequires 72,000 evil nodes; while the latter requires 12,000.\n\nAs I mentioned in my first post, I think the new address manager \"is a\nvaluable improvement over what we have today\".  I think it should be\nincluded in the next release.\n\nI also think we should be aware that we're making it somewhat easier\nto isolate outbound-only nodes.  A single listening node can support\n15 non-listening nodes (125/8).  The network currently has 5\nnon-listening nodes for every listening node.  That ratio has stayed\nquite stable, so I think we have wiggle room if we wanted to allow\nmore outbound connections in some circumstances.\n\n-- \nMichael"
            },
            {
                "author": "Phantomcircuit",
                "date": "2012-01-31T09:21:09",
                "message_text_only": "On 01/30/2012 11:33 PM, Michael Hendricks wrote:\n> On Mon, Jan 30, 2012 at 7:05 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>> Given the randomness in Pieter's design, that seems extremely unlikely\n>> / difficult to do. Is it possible to do a back-of-the-envelope\n>> calculation to figure out what percentage of nodes on the network an\n>> attacker would have to control to have a (say) 1% chance of a\n>> successful Sybil attack?\n> The randomness prevents finely crafted attacks since an attacker can't\n> predict which bucket his address ends up in.  I don't think it helps\n> against brute force attacks though.  If 60% of the network's nodes are\n> controlled by an evil botnet, 60% of the nodes we pull out of the\n> address manager point to the attacker.  If a client has 8 connections\n> to the network, a Sybil attack would succeed 1.7% of the time.  At\n> current network size, 60% of listening nodes is 2,800; only 2-5% of a\n> decent botnet.\n>\n> Nodes that accept incoming connections are far less vulnerable, since\n> the probability of success decreases exponentially with the number of\n> connections.  95% botnet control with 125 connections has 10^-6 chance\n> of success.\n>\n> Perhaps we could add a command-line option for increasing the maximum\n> number of outbound connections.  That way, nodes unable to accept\n> incoming connections can easily decrease their susceptibility to Sybil\n> attack.\n>\n>> I've also been wondering if it is time to remove the IRC bootstrapping\n>> mechanism; it would remove a fair bit of code and we'd stop getting\n>> reports that various ISPs tag bitcoin as malware.  When testing the\n>> list of built-in bootstrapping IP addresses I always connect fairly\n>> quickly, and the DNS seeding hosts seems to be working nicely, too.\n> I think it should be disabled by default one release after the new\n> address manager is released.  That way, we're not changing too many\n> parts of the bootstrapping process at once.\n>\n> As an aside, I can't help but wonder whether ISPs blocking IRC traffic\n> filters some botnets out of the IRC bootstrapping channels; keeping\n> them more \"pure\".\n>\nIf the number of outbound connections is increased the delay of\ntransaction broadcast code needs to be improved to avoid a broadcast storm.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 4515 bytes\nDesc: S/MIME Cryptographic Signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/d42fcd10/attachment.p7s>"
            }
        ],
        "thread_summary": {
            "title": "CAddrMan: Stochastic IP address manager",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Michael Hendricks",
                "solar",
                "Phantomcircuit",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Pieter Wuille",
                "grarpamp"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 28363
        }
    },
    {
        "title": "[Bitcoin-development] BIP 16/17 deadlines",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-01-30T17:55:50",
                "message_text_only": "I've started a discussion on BIP 16/17 support moving forward\n(including trying to improve the testing process) here:\n\u00a0\u00a0https://bitcointalk.org/index.php?topic=61922.0\n\n(please reply there so the discussion stays mostly in one place)\n\n--\n--\nGavin Andresen"
            }
        ],
        "thread_summary": {
            "title": "BIP 16/17 deadlines",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 255
        }
    },
    {
        "title": "[Bitcoin-development]  BIP 21 (modification BIP 20)",
        "thread_messages": [
            {
                "author": "Gary Rowe",
                "date": "2012-01-30T18:50:03",
                "message_text_only": "Hi all,\n\nSpeaking on behalf of the MultiBit team (Jim's currently on holiday), we\nwill not be supporting Tonal Bitcoins anytime soon. Therefore we back the\nBIP 21 proposal.\n\nAt present MultiBit does not support the \"message\" or \"send\" fields but we\nwould be happy to add this functionality as required.\n\nRegarding the idea of a signed URI, it is appealing, however, it may not\nwork. If I understand it correctly, the main idea appears to be to protect\na URI from malicious replacement (at MultiBit we were concerned that a\nBitcoin \"swatch\" would be subjected to the same attack vector and we came\nup with the term \"swatch swabbing\"). If a Bitcoin URI is served up from a\ntrusted source (e.g. a merchant site over HTTPS) then there is no need for\nsigning. It should be assumed that the merchant will offer a clean room\npayment area so that no untrusted JavaScript will creep into the final page\nand wreak havoc.\n\nIt would seem that in any situation where the attacker has complete control\nover the content of the URI they will be able to successfully swab it to\nmatch their own fraudulent address. Imagine attempting to protect a QR code\nposted against a pole attempting to get BTC donations for a charity. How\nlong before that was replaced by a different version operated by the\nthieves with good signatures all round?\n\nOf course, I may have misunderstood so I would welcome further discussion.\n\nOne field that the MultiBit team would like to add to the BIP 21 proposal\nis \"expires\" which would contain an ISO8601 formatted date/time in UTC\n(e.g. \"2000-01-01T23:59:59Z\"). This would allow merchants to issue Bitcoin\nURIs that would expose them to a currency/inventory risk for a defined\nperiod of time.\n\nKind regards,\n\nGary Rowe\n\n\nPS First post to this list\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120130/17b4bede/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 21 (modification BIP 20)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gary Rowe"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1940
        }
    },
    {
        "title": "[Bitcoin-development] Compilation warnings with -Wall",
        "thread_messages": [
            {
                "author": "grarpamp",
                "date": "2012-01-30T23:27:43",
                "message_text_only": "This is counted from the current git master on bsd.\nThe first two are of note and should probably be looked at.\nA little more work after those and it might be possible to\nuse -Wall by default as addressing even some of these\nwould remove tons of lines from the output :)\n\n   1 net.cpp:141: warning: 'pszGet' may be used uninitialized in this function\n   1 net.cpp:142: warning: 'pszKeyword' may be used uninitialized in\nthis function\n\n   1 script.cpp:1427: warning: unused variable 'n'\n   1 test/miner_tests.cpp:14: warning: unused variable 'pstate'\n\n   1 bitcoinrpc.cpp:1533: warning: unused parameter 'parg'\n   1 bitcoinrpc.cpp:2366: warning: unused parameter 'parg'\n   1 db.cpp:337: warning: unused parameter 'nHeight'\n   1 init.cpp:36: warning: unused parameter 'parg'\n   1 init.cpp:44: warning: unused parameter 'parg'\n   1 init.cpp:705: warning: unused parameter 'fAutoStart'\n   1 irc.cpp:258: warning: unused parameter 'parg'\n   1 json/json_spirit_reader_template.h:362: warning: unused parameter 'i'\n   1 json/json_spirit_reader_template.h:381: warning: unused parameter 'end'\n   1 json/json_spirit_reader_template.h:386: warning: unused parameter 'end'\n   1 json/json_spirit_reader_template.h:391: warning: unused parameter 'end'\n   1 json/json_spirit_reader_template.h:401: warning: unused parameter 'end'\n   1 main.cpp:3130: warning: unused parameter 'pindexPrev'\n   1 net.cpp:1063: warning: unused parameter 'parg'\n   1 net.cpp:1209: warning: unused parameter 'parg'\n   1 net.cpp:1380: warning: unused parameter 'parg'\n   1 net.cpp:1480: warning: unused parameter 'parg'\n   1 net.cpp:1617: warning: unused parameter 'parg'\n   1 net.cpp:200: warning: unused parameter 'parg'\n   1 net.cpp:619: warning: unused parameter 'parg'\n  13 noui.h:40: warning: unused parameter 'parent'\n  13 noui.h:40: warning: unused parameter 'style'\n  13 noui.h:40: warning: unused parameter 'x'\n  13 noui.h:40: warning: unused parameter 'y'\n  13 noui.h:53: warning: unused parameter 'nFeeRequired'\n  13 noui.h:53: warning: unused parameter 'parent'\n  13 noui.h:53: warning: unused parameter 'strCaption'\n  13 noui.h:58: warning: unused parameter 'nField'\n  13 noui.h:58: warning: unused parameter 'strText'\n  13 noui.h:62: warning: unused parameter 'fn'\n  13 noui.h:70: warning: unused parameter 'message'\n  23 script.h:352: warning: unused parameter 'b'\n   1 serialize.h:1131: warning: unused parameter 'nType'\n   1 serialize.h:1131: warning: unused parameter 'nVersion'\n  31 serialize.h:176: warning: unused parameter 'a'\n  53 serialize.h:460: warning: unused parameter 'nType'\n  53 serialize.h:460: warning: unused parameter 'nVersion'\n  66 serialize.h:482: warning: unused parameter 'nType'\n  66 serialize.h:482: warning: unused parameter 'nVersion'\n  66 serialize.h:505: warning: unused parameter 'nType'\n  66 serialize.h:505: warning: unused parameter 'nVersion'\n 611 serialize.h:747: warning: unused parameter 's'\n 611 serialize.h:747: warning: unused parameter 'ser_action'\n 607 serialize.h:753: warning: unused parameter 'ser_action'\n 671 serialize.h:760: warning: unused parameter 'ser_action'\n   1 test/test_bitcoin.cpp:25: warning: unused parameter 'parg'\n  23 uint256.h:359: warning: unused parameter 'nType'\n  23 uint256.h:359: warning: unused parameter 'nVersion'\n  66 uint256.h:365: warning: unused parameter 'nType'\n  66 uint256.h:365: warning: unused parameter 'nVersion'\n  45 uint256.h:371: warning: unused parameter 'nType'\n  45 uint256.h:371: warning: unused parameter 'nVersion'\n   1 util.cpp:1184: warning: unused parameter 'nLine'\n   1 util.cpp:1184: warning: unused parameter 'pszFile'\n   1 util.cpp:1184: warning: unused parameter 'pszName'\n   1 util.cpp:48: warning: unused parameter 'file'\n   1 util.cpp:48: warning: unused parameter 'line'\n  28 util.h:682: warning: unused parameter 'nExitCode'\n  28 util.h:697: warning: unused parameter 'pfn'\n   1 wallet.cpp:320: warning: unused parameter 'fFindBlock'"
            }
        ],
        "thread_summary": {
            "title": "Compilation warnings with -Wall",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "grarpamp"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3921
        }
    },
    {
        "title": "[Bitcoin-development] BIP 21 (modification BIP 20)]",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2012-01-31T10:39:44",
                "message_text_only": "On Tue, Jan 31, 2012 at 09:35:26AM +0100, Wladimir wrote:\n> I also wonder whether the \"send to private address\" should be part of this\n> BIP, or a future one.\n\nIt is actually a \"send of private key\", not to. And I agree, it should be part\nof a separate BIP.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "BIP 21 (modification BIP 20)]",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 269
        }
    },
    {
        "title": "[Bitcoin-development] BIP 20 Rejected, process for BIP 21N",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-01-31T14:27:26",
                "message_text_only": "BIP 20 really has no support among implementations such as Bitcoin-Qt, Electrum, MultiBit or Bitcoin-JS. As the most active and visible user facing GUI projects (all with some form of URI Scheme), their opinion carries the most weight. To a lesser degree Bitcoin-Qt has the large majority of users too (although that's a line of reasoning I'd discourage).\n\nNormally we should probably Reject BIP 21 and re-submit a new standard (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20 sans some sections b) it is still a draft, probably the best thing here is if you all agree on something to run it by BlueMatt and then we'll make it the new BIP 21.\n\nI can see a consensus forming on most parts. Just the send private key is contentious, and there's the topic of adding a time to expire field for merchants (this is a very good idea IMO).\n\nAlso BIP 20 is problematic because it is incompatible with about every standard on the web. All the HTML, URI and everything uses decimal numbers alone. I see no reason for breaking with tradition. Note that everytime I have to write Color or Vectorize (as a British speaker) in my code, I die a little inside. But it's convention and American English = International English. Also it would be cool if all code used a *real* international language (like Esperanto) but the world ain't perfect! We live in a decimal-counting English-speaking Windows-using God-worshipping world!\n\n(no offense to\u00a0decimal-counting English-speaking Windows-using God-worshipping world- I do half those things too :)"
            },
            {
                "author": "slush",
                "date": "2012-01-31T14:33:38",
                "message_text_only": "Hi Amir,\n\n>  All the HTML, URI and everything uses decimal numbers alone. I see no\nreason for breaking with tradition.\n\nexcuse me if it was already discussed, but maybe using satoshis instead of\ndecimal bitcoin would be better choice? We all know about pains with proper\nhandling decimal numbers across of all implementations - and it's not only\nabout json-rpc.\n\nOtherwise I agree, BIP 21 is better than BIP 20 because it's easier to\nimplement all points of the standard.\n\nBest,\nslush\n\nOn Tue, Jan 31, 2012 at 3:27 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> BIP 20 really has no support among implementations such as Bitcoin-Qt,\n> Electrum, MultiBit or Bitcoin-JS. As the most active and visible user\n> facing GUI projects (all with some form of URI Scheme), their opinion\n> carries the most weight. To a lesser degree Bitcoin-Qt has the large\n> majority of users too (although that's a line of reasoning I'd discourage).\n>\n> Normally we should probably Reject BIP 21 and re-submit a new standard\n> (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20\n> sans some sections b) it is still a draft, probably the best thing here is\n> if you all agree on something to run it by BlueMatt and then we'll make it\n> the new BIP 21.\n>\n> I can see a consensus forming on most parts. Just the send private key is\n> contentious, and there's the topic of adding a time to expire field for\n> merchants (this is a very good idea IMO).\n>\n> Also BIP 20 is problematic because it is incompatible with about every\n> standard on the web. All the HTML, URI and everything uses decimal numbers\n> alone. I see no reason for breaking with tradition. Note that everytime I\n> have to write Color or Vectorize (as a British speaker) in my code, I die a\n> little inside. But it's convention and American English = International\n> English. Also it would be cool if all code used a *real* international\n> language (like Esperanto) but the world ain't perfect! We live in a\n> decimal-counting English-speaking Windows-using God-worshipping world!\n>\n> (no offense to decimal-counting English-speaking Windows-using\n> God-worshipping world- I do half those things too :)\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/1da41631/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-01-31T14:52:03",
                "message_text_only": "> excuse me if it was already discussed, but maybe using satoshis instead of decimal bitcoin would be better ?> choice? We all know about pains with proper handling decimal numbers across of all implementations - and > it's not only about json-rpc.\n\n\nYeah well it's up to the people who are making this stuff to decide :)\n\n\nOn Tue, Jan 31, 2012 at 3:27 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\nBIP 20 really has no support among implementations such as Bitcoin-Qt, Electrum, MultiBit or Bitcoin-JS. As the most active and visible user facing GUI projects (all with some form of URI Scheme), their opinion carries the most weight. To a lesser degree Bitcoin-Qt has the large majority of users too (although that's a line of reasoning I'd discourage).\n>\n>Normally we should probably Reject BIP 21 and re-submit a new standard (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20 sans some sections b) it is still a draft, probably the best thing here is if you all agree on something to run it by BlueMatt and then we'll make it the new BIP 21.\n>\n>I can see a consensus forming on most parts. Just the send private key is contentious, and there's the topic of adding a time to expire field for merchants (this is a very good idea IMO).\n>\n>Also BIP 20 is problematic because it is incompatible with about every standard on the web. All the HTML, URI and everything uses decimal numbers alone. I see no reason for breaking with tradition. Note that everytime I have to write Color or Vectorize (as a British speaker) in my code, I die a little inside. But it's convention and American English = International English. Also it would be cool if all code used a *real* international language (like Esperanto) but the world ain't perfect! We live in a decimal-counting English-speaking Windows-using God-worshipping world!\n>\n>(no offense to\u00a0decimal-counting English-speaking Windows-using God-worshipping world- I do half those things too :)\n>\n>------------------------------------------------------------------------------\n>Keep Your Developer Skills Current with LearnDevNow!\n>The most comprehensive online learning library for Microsoft developers\n>is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>Metro Style Apps, more. Free future releases when you subscribe now!\n>http://p.sf.net/sfu/learndevnow-d2d\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/70273888/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-31T14:59:26",
                "message_text_only": "On Tue, Jan 31, 2012 at 9:33 AM, slush <slush at centrum.cz> wrote:\n> excuse me if it was already discussed, but maybe using satoshis instead of\n> decimal bitcoin would be better choice? We all know about pains with proper\n> handling decimal numbers across of all implementations - and it's not only\n> about json-rpc.\n\nMixed bag of worms there, even ignoring what people have already\nimplemented\u2014 if you make it use satoshis people who are working with\nthings at COIN scale are inevitably going to end up multiplying\nnumbers stored as radix-2 floating point to get satoshis and then are\ngoing to be confused when it comes out \"wrong\".\n\nUsing decimal numbers at least lets them treat the values as strings\nand avoid arithmetic that will end up confusing them."
            },
            {
                "author": "Matt Corallo",
                "date": "2012-01-31T16:04:59",
                "message_text_only": "On Tue, 2012-01-31 at 06:27 -0800, Amir Taaki wrote:\n> BIP 20 really has no support among implementations such as Bitcoin-Qt, Electrum, MultiBit or Bitcoin-JS. As the most active and visible user facing GUI projects (all with some form of URI Scheme), their opinion carries the most weight. To a lesser degree Bitcoin-Qt has the large majority of users too (although that's a line of reasoning I'd discourage).\n> \n> Normally we should probably Reject BIP 21 and re-submit a new standard (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20 sans some sections b) it is still a draft, probably the best thing here is if you all agree on something to run it by BlueMatt and then we'll make it the new BIP 21.\n> \n> I can see a consensus forming on most parts. Just the send private key is contentious, and there's the topic of adding a time to expire field for merchants (this is a very good idea IMO).\n> \n> Also BIP 20 is problematic because it is incompatible with about every standard on the web. All the HTML, URI and everything uses decimal numbers alone. I see no reason for breaking with tradition. Note that everytime I have to write Color or Vectorize (as a British speaker) in my code, I die a little inside. But it's convention and American English = International English. Also it would be cool if all code used a *real* international language (like Esperanto) but the world ain't perfect! We live in a decimal-counting English-speaking Windows-using God-worshipping world!\n> \n> (no offense to decimal-counting English-speaking Windows-using God-worshipping world- I do half those things too :)\n\nThe send crap was not in the original spec, is not implemented anywhere,\nand should have been removed as part of the BIP 21 copy/paste.  It is\nnow gone.\n\nAs for the expire time, well thats a bit problematic IMHO.  Technically\nBIP 21 is still a draft, but it is implemented in all versions of\nBitcoin-Qt for drag and drop and adding a field which restricts the\nvalidity of a URI for new clients, but which old clients will gladly\naccept could result in some ugly situations IMO.\n\nMatt"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-01-31T18:22:25",
                "message_text_only": "OK, so I just did some heavy changes to the methods for forward\ncompatibility in BIP 21.  Instead of a version number, now new variables\nwill be added either as-is or with a mustimplement: prefix.  If a\nclients does not know what the variable is that is after mustimplement:,\nit should consider the entire URI invalid and either notify the user or\njust drop it silently.  That way things like expiretime can be added\nwithout worrying about old clients ignoring the field.  \n\nAll that said, I dont think its an ideal solution, depending on the\nnames of variables to provide information is ugly.  If anyone has a\nbetter idea on how to do backward compatibility, please suggest it.\n\nIn terms of the expiretime field being implemented now, I dont think its\nappropriate.  Because some clients already have an old implementation,\nthe possibility of it getting ignored is too large.  The BIP now states\nthat \"It is recommended that additional variables prefixed with\nmustimplement: not be used in a mission-critical way until a grace\nperiod of 6 months from the finalization of this BIP has passed in order\nto allow client developers to release new versions, and users of old\nclients to upgrade.\"  Mostly, however, I want to keep the list of\nchanges from the Bitcoin-Qt implementation to this BIP very, very\nminimal this late the 0.6 release cycle (I want to get this BIP\nfinalized and implemented for 0.6, so that at least Bitcoin-Qt will have\nno version which support OS URI opening with a broken implementation).\n\nMatt\n\nOn Tue, 2012-01-31 at 11:04 -0500, Matt Corallo wrote:\n> On Tue, 2012-01-31 at 06:27 -0800, Amir Taaki wrote:\n> > BIP 20 really has no support among implementations such as Bitcoin-Qt, Electrum, MultiBit or Bitcoin-JS. As the most active and visible user facing GUI projects (all with some form of URI Scheme), their opinion carries the most weight. To a lesser degree Bitcoin-Qt has the large majority of users too (although that's a line of reasoning I'd discourage).\n> > \n> > Normally we should probably Reject BIP 21 and re-submit a new standard (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20 sans some sections b) it is still a draft, probably the best thing here is if you all agree on something to run it by BlueMatt and then we'll make it the new BIP 21.\n> > \n> > I can see a consensus forming on most parts. Just the send private key is contentious, and there's the topic of adding a time to expire field for merchants (this is a very good idea IMO).\n> > \n> > Also BIP 20 is problematic because it is incompatible with about every standard on the web. All the HTML, URI and everything uses decimal numbers alone. I see no reason for breaking with tradition. Note that everytime I have to write Color or Vectorize (as a British speaker) in my code, I die a little inside. But it's convention and American English = International English. Also it would be cool if all code used a *real* international language (like Esperanto) but the world ain't perfect! We live in a decimal-counting English-speaking Windows-using God-worshipping world!\n> > \n> > (no offense to decimal-counting English-speaking Windows-using God-worshipping world- I do half those things too :)\n> \n> The send crap was not in the original spec, is not implemented anywhere,\n> and should have been removed as part of the BIP 21 copy/paste.  It is\n> now gone.\n> \n> As for the expire time, well thats a bit problematic IMHO.  Technically\n> BIP 21 is still a draft, but it is implemented in all versions of\n> Bitcoin-Qt for drag and drop and adding a field which restricts the\n> validity of a URI for new clients, but which old clients will gladly\n> accept could result in some ugly situations IMO.\n> \n> Matt"
            },
            {
                "author": "Wladimir",
                "date": "2012-01-31T19:02:32",
                "message_text_only": "On Tue, Jan 31, 2012 at 7:22 PM, Matt Corallo <bitcoin-list at bluematt.me>wrote:\n\n>\n> All that said, I dont think its an ideal solution, depending on the\n> names of variables to provide information is ugly.  If anyone has a\n> better idea on how to do backward compatibility, please suggest it.\n>\n\nI like the mustimplement: idea, though I'd recommend a shorter\n(abbreviated) prefix, to keep URL sizes small for QR codes and such,\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/65e9f826/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-01-31T21:42:48",
                "message_text_only": "OK, I went ahead and changed mustimplement out for req (required).  Its\nnot quite as expressive, but its much shorter and still makes sense\n(IMHO).  I also explicitly stated that numbers shouldnt contain commas\nand should use period to separate whole numbers and fractional decimal\nfractions (to avoid any localization concerns).\n\nMatt\n\nOn Tue, 2012-01-31 at 20:02 +0100, Wladimir wrote:\n> \n> On Tue, Jan 31, 2012 at 7:22 PM, Matt Corallo\n> <bitcoin-list at bluematt.me> wrote:\n>         \n>         All that said, I dont think its an ideal solution, depending\n>         on the\n>         names of variables to provide information is ugly.  If anyone\n>         has a\n>         better idea on how to do backward compatibility, please\n>         suggest it.\n> \n> I like the mustimplement: idea, though I'd recommend a shorter\n> (abbreviated) prefix, to keep URL sizes small for QR codes and such,\n> \n> Wladimir\n> \n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2012-01-31T22:14:32",
                "message_text_only": "On 01/31/2012 07:22 PM, Matt Corallo wrote:\n\n> that \"It is recommended that additional variables prefixed with\n> mustimplement: not be used in a mission-critical way until a grace\n\nIs the ':' sign actually allowed in URL parameter names\n(unescaped/unencoded)? If not, I'd propose an unrestricted char instead,\nmaybe '_'."
            },
            {
                "author": "Gary Rowe",
                "date": "2012-01-31T22:37:50",
                "message_text_only": "Andreas has a good point. See RFC 3986 on URI schemes:\nhttp://tools.ietf.org/html/rfc3986#page-12\n\nThe colon is a reserved general delimiter (similar in use to the / in a\ntypical URL, but applies to URNs etc). As suggested, we get req:something\nbeing changed to one of the unreserved characters that do not have to be\nURL encoded. Again, from the RFC these are\n\n* Option A: req_something (underscore)\n* Option B: req-something (hyphen)\n* Option C: req~something (tilde)\n* Option D: req.something (period)\n\nPersonally, my eye likes Option B, the hyphen.\n\nOn 31 January 2012 22:14, Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> On 01/31/2012 07:22 PM, Matt Corallo wrote:\n>\n> > that \"It is recommended that additional variables prefixed with\n> > mustimplement: not be used in a mission-critical way until a grace\n>\n> Is the ':' sign actually allowed in URL parameter names\n> (unescaped/unencoded)? If not, I'd propose an unrestricted char instead,\n> maybe '_'.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/682b40e3/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2012-01-31T22:47:57",
                "message_text_only": "Odd, here I was thinking I checked that.  Just goes to show how useful\nsources other than the rfc itself are... Anyway, Ill change it to a\nhyphen.\n\nMatt\n\nOn Tue, 2012-01-31 at 22:37 +0000, Gary Rowe wrote:\n> Andreas has a good point. See RFC 3986 on URI\n> schemes: http://tools.ietf.org/html/rfc3986#page-12\n> \n> \n> The colon is a reserved general delimiter (similar in use to the / in\n> a typical URL, but applies to URNs etc). As suggested, we get\n> req:something being changed to one of the unreserved characters that\n> do not have to be URL encoded. Again, from the RFC these are\n> \n> \n> * Option A: req_something (underscore)\n> * Option B: req-something (hyphen)\n> * Option C: req~something (tilde)\n> * Option D: req.something (period)\n> \n> \n> Personally, my eye likes Option B, the hyphen. \n> \n> On 31 January 2012 22:14, Andreas Schildbach <andreas at schildbach.de>\n> wrote:\n>         On 01/31/2012 07:22 PM, Matt Corallo wrote:\n>         \n>         > that \"It is recommended that additional variables prefixed\n>         with\n>         > mustimplement: not be used in a mission-critical way until a\n>         grace\n>         \n>         \n>         Is the ':' sign actually allowed in URL parameter names\n>         (unescaped/unencoded)? If not, I'd propose an unrestricted\n>         char instead,\n>         maybe '_'."
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-31T16:07:00",
                "message_text_only": "On Tuesday, January 31, 2012 9:27:26 AM Amir Taaki wrote:\n> BIP 20 really has no support among implementations such as Bitcoin-Qt,\n> Electrum, MultiBit or Bitcoin-JS.\n\nIt does among implementations such as Spesmilo and WalletBuddy, and has for \nsome time. More importantly, it achieved consensus and Final status before any \nobjections were made. Final only changes to Superceded. What's the point of a \nformal BIP process if that process won't be followed?\n\n> Also BIP 20 is problematic because it is incompatible with about every\n> standard on the web. All the HTML, URI and everything uses decimal numbers\n> alone. I see no reason for breaking with tradition.\n\nThat's not incompatibility, and not true. The standards use hexadecimal \nnumbers, and I can't even think of a single case off-hand where decimal is \nused.\n\nThat being said, I'd be fine with a spec that used strtol-compatible satoshis \nfor amount. This is both simple and forward-compatible.\n\nOn Tuesday, January 31, 2012 9:53:57 AM Gary Rowe wrote:\n> Regarding the decimal vs satoshi notation I see a few problems with\n> satoshi:\n> \n> * readability - humans reading the URI would expect it to accurately\n> reflect what is being displayed (subject to internationalisation issues)\n> For example, amount=1.234 is more human readable than amount=123400000\n> (ish)\n\nThis is true only for BTC users. While that might be a sensible unit today, it \nalmost certainly won't be in the future. amount=0.00001 is much worse than \namount=1000 or amount=1x3\n\n> * backwards compatibility - existing software already uses the decimal\n> notation\n\nExisting software uses Satoshis internally, and it's generally regarded as a \ndesign flaw that it uses BTC numbers in the JSON-RPC protocol.\n\n> * forwards compatibility - Bitcoin needs to move beyond the satoshi to 20\n> dps for some reason, this remains OK within the existing schema, but forces\n> decimals into the satoshi scheme\n\nThis strikes me as more of \"let's test the code earlier rather than later\" \nthan forwards compatibility. The problem is that it's pretty much unanimous \nthat floating-point should never be used, and without that both \nrepresentations will be rounding when there are smaller units available."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-31T15:02:47",
                "message_text_only": "On Tue, Jan 31, 2012 at 9:53 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n> One never uses doubles or floats for money.\n\nLots and lots of people do.  Go place a sell order on mtgox for\n$999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\nper BTC and look at the awesome doublemax trade it actually stores for\nyou."
            },
            {
                "author": "Gary Rowe",
                "date": "2012-01-31T15:04:14",
                "message_text_only": "Shudder.\n\n:-)\n\nOn 31 January 2012 15:02, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Jan 31, 2012 at 9:53 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n> > One never uses doubles or floats for money.\n>\n> Lots and lots of people do.  Go place a sell order on mtgox for\n>\n> $999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n> per BTC and look at the awesome doublemax trade it actually stores for\n> you.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/c0674004/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 20 Rejected, process for BIP 21N",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Wladimir",
                "slush",
                "Andreas Schildbach",
                "Amir Taaki",
                "Gregory Maxwell",
                "Matt Corallo",
                "Gary Rowe"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 22056
        }
    },
    {
        "title": "[Bitcoin-development]  BIP 20 Rejected, process for BIP 21N",
        "thread_messages": [
            {
                "author": "Gary Rowe",
                "date": "2012-01-31T14:53:57",
                "message_text_only": "Regarding the decimal vs satoshi notation I see a few problems with satoshi:\n\n* readability - humans reading the URI would expect it to accurately\nreflect what is being displayed (subject to internationalisation issues)\nFor example, amount=1.234 is more human readable than amount=123400000 (ish)\n* backwards compatibility - existing software already uses the decimal\nnotation\n* forwards compatibility - Bitcoin needs to move beyond the satoshi to 20\ndps for some reason, this remains OK within the existing schema, but forces\ndecimals into the satoshi scheme\n* simplicity - dual decimal/satoshi variants should be discouraged under\nthe \"single representation\" approach\n\nIt's relatively straightforward to convert a string encoded decimal into an\ninternal integer for currency calculations just by applying a multiplying\nfactor. One never uses doubles or floats for money.\n\n\nOn 31 January 2012 14:33, slush <slush at centrum.cz> wrote:\n\n> Hi Amir,\n>\n> >  All the HTML, URI and everything uses decimal numbers alone. I see no\n> reason for breaking with tradition.\n>\n> excuse me if it was already discussed, but maybe using satoshis instead of\n> decimal bitcoin would be better choice? We all know about pains with proper\n> handling decimal numbers across of all implementations - and it's not only\n> about json-rpc.\n>\n> Otherwise I agree, BIP 21 is better than BIP 20 because it's easier to\n> implement all points of the standard.\n>\n> Best,\n> slush\n>\n> On Tue, Jan 31, 2012 at 3:27 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n>\n>> BIP 20 really has no support among implementations such as Bitcoin-Qt,\n>> Electrum, MultiBit or Bitcoin-JS. As the most active and visible user\n>> facing GUI projects (all with some form of URI Scheme), their opinion\n>> carries the most weight. To a lesser degree Bitcoin-Qt has the large\n>> majority of users too (although that's a line of reasoning I'd discourage).\n>>\n>> Normally we should probably Reject BIP 21 and re-submit a new standard\n>> (for history's sake), but as a) BIP 21 is largely a copy paste of BIP 20\n>> sans some sections b) it is still a draft, probably the best thing here is\n>> if you all agree on something to run it by BlueMatt and then we'll make it\n>> the new BIP 21.\n>>\n>> I can see a consensus forming on most parts. Just the send private key is\n>> contentious, and there's the topic of adding a time to expire field for\n>> merchants (this is a very good idea IMO).\n>>\n>> Also BIP 20 is problematic because it is incompatible with about every\n>> standard on the web. All the HTML, URI and everything uses decimal numbers\n>> alone. I see no reason for breaking with tradition. Note that everytime I\n>> have to write Color or Vectorize (as a British speaker) in my code, I die a\n>> little inside. But it's convention and American English = International\n>> English. Also it would be cool if all code used a *real* international\n>> language (like Esperanto) but the world ain't perfect! We live in a\n>> decimal-counting English-speaking Windows-using God-worshipping world!\n>>\n>> (no offense to decimal-counting English-speaking Windows-using\n>> God-worshipping world- I do half those things too :)\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Keep Your Developer Skills Current with LearnDevNow!\n>> The most comprehensive online learning library for Microsoft developers\n>> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n>> Metro Style Apps, more. Free future releases when you subscribe now!\n>> http://p.sf.net/sfu/learndevnow-d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep Your Developer Skills Current with LearnDevNow!\n> The most comprehensive online learning library for Microsoft developers\n> is just $99.99! Visual Studio, SharePoint, SQL - plus HTML5, CSS3, MVC3,\n> Metro Style Apps, more. Free future releases when you subscribe now!\n> http://p.sf.net/sfu/learndevnow-d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/fbee5852/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP 20 Rejected, process for BIP 21N",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gary Rowe"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4554
        }
    },
    {
        "title": "[Bitcoin-development] BIP16/17 replacement",
        "thread_messages": [
            {
                "author": "Andy Parkins",
                "date": "2012-01-31T16:50:58",
                "message_text_only": "Hello,\n\nGulp.  Am a little nervous about wading into this swamp.  However, it seems \nto me that the debate has veered into the personal and away from the \ntechnical.  Surely if there are objections to both suggestions, that another \nsolution might be better?  The answer doesn't have to be A or B, if the \nanswer C turns out to be acceptable.\n\nThat being said; I am not confident enough to start making BIPs so I offer \nthis idea up for my traditional mailing-list roasting but with the hope that \nI blindly stumble toward something more acceptable to everyone.\n\n----\n\nIf the change is going to be a big one anyway and will require a client \nupgrade why not...\n\n - Increase the version number in transactions to make a new transaction\n   structure\n - Dump the \"scriptPubKey\" field completely.  Everything will be pay-to-\n   script-hash in version2 transactions\n - Replace it with \"hashOfClaimingScript\"\n - Add an \"unsignedParameters\" array.\n\nhashOfClaimingScript is _not_ script.  It's just the hash of the script that \nis allowed to claim the output.  Then before scriptSig is allowed to run, it \nis hashed and compared against the hashOfClaimingScript.\n\nunsignedParameters replaces the need for all the crazy messing around that \nOP_CHECKSIG currently does because it is specifically a block of the \ntransaction that it not signed (although I would include the array size bytes \nin the signature calculation), therefore no script filtering is necessary.\n\nThe claiming script, scriptSig, can then be checked against whatever list of \ntemplates you like.  For pay-to-address it will probably look like:\n\n  OP_PUSHPARAMETER {0}\n  OP_PUSH { <claimant public key> }\n  OP_CHECKSIGVERIFY\n\nHandling the more complicated transactions (they're the point of all this \nafter all) is pretty obvious; the unsignedParameters block can hold as many \nsignatures as you like.  It also removes the need for OP_CHECKMULTISIG, since \nthe script can specify the signature conditions.  e.g. a 2-of-3 script:\n\n  OP_PUSHPARMETER {0}\n  OP_PUSH { <claimant public key0> }\n  OP_CHECKSIG\n  OP_PUSHPARMETER {1}\n  OP_PUSH { <claimant public key1> }\n  OP_CHECKSIG\n  OP_PUSHPARMETER {1}\n  OP_PUSH { <claimant public key1> }\n  OP_CHECKSIG\n  OP_ADD\n  OP_ADD\n  OP_PUSH {1}\n  OP_GREATERTHAN\n\n(I'm sure someone cleverer than I can improve on the above)\n\n-----\n\nLet the flaming commence...\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/b2ee00aa/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2012-01-31T16:58:49",
                "message_text_only": "On Tuesday, January 31, 2012 11:50:58 AM Andy Parkins wrote:\n> Gulp.  Am a little nervous about wading into this swamp.  However, it seems\n> to me that the debate has veered into the personal and away from the\n> technical.  Surely if there are objections to both suggestions, that\n> another solution might be better?  The answer doesn't have to be A or B,\n> if the answer C turns out to be acceptable.\n\nI'm not aware of any remaining *tangible* objections to BIP 17 at this point \n(Gavin seems concerned over a theoretical risk-that-nobody-has-thought-of), \nbut if there's a better solution, I'm perfectly fine Withdrawing BIP 17 to \nsupport it.\n\n> If the change is going to be a big one anyway and will require a client\n> upgrade why not...\n\nBoth BIP 16 and 17 are backward compatible enough that people can continue to \nuse the old clients with each other. An upgrade is only required to send to \n(or create/receive on) the new 3...-form addresses. That being said, it's \nquite possible to rewrite the practical implications of both BIP 16 and 17 in \nthe format you seem to be suggesting. Doing so would even get rid of one of \nthe major objections to BIP 16 (its inconsistency)."
            },
            {
                "author": "Andy Parkins",
                "date": "2012-01-31T17:11:56",
                "message_text_only": "On 2012 January 31 Tuesday, Luke-Jr wrote:\n\n> I'm not aware of any remaining *tangible* objections to BIP 17 at this\n> point (Gavin seems concerned over a theoretical\n> risk-that-nobody-has-thought-of), but if there's a better solution, I'm\n> perfectly fine Withdrawing BIP 17 to support it.\n\nI imagine the BIP16 supporters would say the same?  Isn't that the essence of \nthe current impasse?\n\n> Both BIP 16 and 17 are backward compatible enough that people can continue\n> to use the old clients with each other. An upgrade is only required to\n> send to (or create/receive on) the new 3...-form addresses. That being\n> said, it's quite possible to rewrite the practical implications of both\n> BIP 16 and 17 in the format you seem to be suggesting. Doing so would even\n> get rid of one of the major objections to BIP 16 (its inconsistency).\n\nMy suggestion is backward compatible.  You'd only have to make version2 \ntransactions for version2 addresses; and the join between version1 and \nversion2 is not a problem since the version1 source can be detected, and the \nhandling of the version2 transaction altered as appropriate (it's only a \nmatter of switching from the hash check to running the two scripts as \nnormal).\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20120131/0908135b/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-01-31T17:45:14",
                "message_text_only": "On Tue, Jan 31, 2012 at 11:50 AM, Andy Parkins <andyparkins at gmail.com> wrote:\n> Hello,\n>\n> Gulp. \u00a0Am a little nervous about wading into this swamp. \u00a0However, it seems\n> to me that the debate has veered into the personal and away from the\n\nI think you've been deceived by people who have some interest in\npromoting this as some sort of big controversy, or perhaps just\nconfused by the general level of noise.\n\nThe differences between BIP16/BIP17 are technically obscure, everyone\nwho is well versed in the issue (with the potential exception of\nLuke). There is broad consensus among the involved technically minded\nparties over just about all of it.\n\nLuke has been maintaining an opinion tracker page:\nhttps://en.bitcoin.it/wiki/P2SH_Votes\n\nreflecting the views of core developers and people who've been\ntechnically involved enough to have an informed opinion.\n\n>\u00a0Surely if there are objections to both suggestions, that another\n> solution might be better?\n\nThere is always a different color that the shed could be painted.\nExpecting absolute consensus on the _best_ way forward is an\nunreasonable standard, especially if you're going to invite the\nopinions of many people.\n\nDepending on how you count we have considered a good two dozen options\nin this space\u2014  Starting with the OP_CAT key combinations many months\nback, and including many variants of the current ideas. The BIPs only\nrepresent the \"final\" surviving ideas.\n\nIn particular, BIP16 was the isolated consensus path forward that came\nout of the discussions about the concerns that BIP12 was too\ncomputationally powerful\u2014 I don't think I can identify any particular\nperson as the author of the BIP16 idea.  At the the time BIP16 became\na BIP only Luke was actively objecting to it.\n\nThough his hard work and tireless (...unstoppable dogmatic) promotion\nhe's managed to build a workable alternative, and it now has some\nsupport other than himself.  This, however, doesn't constitute a\nmaterial schism.\n\n> this idea up for my traditional mailing-list roasting but with the hope that\n\nAs always, asbestos underwear is required.\n\n> If the change is going to be a big one anyway and will require a client\n> upgrade why not...\n\nIt does not, in fact\u2014 Yes, it requires a client update to make use of\nthe new functionality, but old nodes will happily continue to validate\nthings.  It's hard to express how critical this is distinctly.\nBitcoin is, predominantly, a zero-trust system. Nodes don't trust that\nthings were done right, the validate them for themselves.\n\nA breaking change of the kind you suggest is not something that would\nbe considered lightly, and this is certainly not justified for this.\n\n> \u00a0- Increase the version number in transactions to make a new transaction\n> \u00a0 structure\n> \u00a0- Dump the \"scriptPubKey\" field completely. \u00a0Everything will be pay-to-\n> \u00a0 script-hash in version2 transactions\n> \u00a0- Replace it with \"hashOfClaimingScript\"\n> \u00a0- Add an \"unsignedParameters\" array.\n\nIf we ever were to scrap the system, I think we very much would do\nsomething like what you describe here... and as much has been\ndocumented:\n\nhttps://en.bitcoin.it/wiki/Hardfork_Wishlist\n(see \"Elimination of output scripts\")\n\nBut, to be clear, this stuff is pretty much fantasy. I'm doubtful that\nit will ever happen, doubtful that we can get the kind of development\nresources required to pull off a true breaking change in a way that\npeople would actually trust upgrading to\u2014 at least not before a time\nthat the system is simply too big to make that kind of change."
            }
        ],
        "thread_summary": {
            "title": "BIP16/17 replacement",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Andy Parkins",
                "Gregory Maxwell"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 8973
        }
    }
]