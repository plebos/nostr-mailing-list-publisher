[
    {
        "title": "[bitcoin-dev] Full-RBF Peering Bitcoin Core v25.0 Released",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2023-06-01T13:30:00",
                "message_text_only": "On Fri, May 26, 2023 at 11:39:17AM +0100, Michael Ford via bitcoin-dev wrote:\n> Bitcoin Core version v25.0 is now available from:\n> \n>     https://bitcoincore.org/bin/bitcoin-core-25.0/\n\nAvailable from: https://github.com/petertodd/bitcoin/tree/full-rbf-v25.0\n\neg:\n\n    git clone -b full-rbf-v25.0 https://github.com/petertodd/bitcoin.git\n\nWhat is this? It's Bitcoin Core v25.0, with Antoine Riard's full-rbf peering\ncode, and some additional minor updates to it. This does two things for\nfull-rbf nodes:\n\n1) Advertises a FULL_RBF service bit when mempoolfullrbf=1 is set.\n2) Connects to four additional FULL_RBF peers.\n\nDoing this ensures that a core group of nodes are reliably propagating full-rbf\nreplacements. We don't need everyone to run this. But it'd be helpful if more\npeople did.\n\nAs for why you should run full-rbf, see my blog post:\n\nhttps://petertodd.org/2023/why-you-should-run-mempoolfullrbf\n\n\nWe even have hats! :D\n\nhttps://twitter.com/peterktodd/status/1659996011086110720/photo/1\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230601/f3a84479/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Full-RBF Peering Bitcoin Core v25.0 Released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1325
        }
    },
    {
        "title": "[bitcoin-dev] Scaling and anonymizing Bitcoin at layer 1 with client-side validation",
        "thread_messages": [
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2023-06-01T17:21:39",
                "message_text_only": "Dear community,\n\nSome time ago we (LNP/BP Standards Association) announced the release of RGB smart contract system [1]. In the subsequent discussion, we have referenced [2] that the introduction of client-side validation has the potential for upgrading Bitcoin layer 1 - blockchain, which has become an unnecessary limiting factor for the Bitcoin ecosystem, creating both scaling and privacy problems. While client-side validation requires consensus protocol and some layer 1 (for the proof of publication), this layer can be implemented in a more efficient way than the Bitcoin blockchain.\n\nToday we are glad to present Prime: a proposal to upgrade Bitcoin protocol with the new scalable (up to billions of tx per minute) and fully anonymous (opaque) layer 1, moving most validation work into the client-side validation system. It leaves BTC (Bitcoin as money) and the rest of the Bitcoin ecosystem (including PoW) intact. It may be deployed without a softfork and miners upgrade, but can certainly benefit from it. It doesn't affect those users who are not willing to upgrade and doesn't require any consensus or majority for the initial deployment. It also makes Lightning Network and other layer 2 systems redundant. Finally, it will make things like BRC20, inscriptions, ordinals etc. impossible; all proper assets, NFTs etc. will be done with RGB smart contracts, not forcing non-users to store, validate and use their network bandwidth for the unpaid third-party interests.\n\nThe white paper describing the proposal can be found here:\nhttps://github.com/LNP-BP/layer1/\n\nAs LNP/BP Standards Association we are setting a working group which will be focused on formal specification and reference implementation of this new layer - and will gladly accept everybody who wishes to cooperate on this topic. We also plan educational and workshop activities to make community understand the underlying technology better and take educated decision on its adoption.\n\nWe believe that this infrastructural effort must not be managed by a for-profit company - or a commercial group with its interests, and the only proper way of funding such an effort should be through non-profit donations. We do plan a fundraising campaign, so everyone interested in driving the Bitcoin evolution forward please contact us at ukolova [at] lnp-bp.org. For-profit organizations can also become members of the Association [3] and get to the committees defining the shape of the future Bitcoin technologies.\n\nDr Maxim Orlovsky\non behalf of LNP/BP Standards Association\nhttps://lnp-bp.org/\nGitHub: github.com/LNP-BP\nTwitter: @lnp_bp\nNostr: npub13mhg7ksq9efna8ullmc5cufa53yuy06k73q4u7v425s8tgpdr5msk5mnym\n\n[1]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-April/021554.html\n[2]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-April/021577.html\n[3]: https://www.lnp-bp.org/membership\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230601/3ede4035/attachment.html>"
            },
            {
                "author": "John Tromp",
                "date": "2023-06-03T13:30:53",
                "message_text_only": "> The white paper describing the proposal can be found here:\n> https://github.com/LNP-BP/layer1/\n\nSome questions about the Bitcoin PoW anchoring:\n\nWhat if a miner spends the current miner single-use-seal while\ncreating a commitment, but makes the PMT only partially available, or\nentirely unavailable ?\n\nHow do other miners reach consensus on whether a protocol reset is\nrequired? It seems impossible to agree on something like PMT\navailability (much like mempool contents)."
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2023-06-03T17:17:48",
                "message_text_only": "Hi John,\n\nThank you for the question. We have discussed this case in the paper, second paragraph of the \u201cBitcoin PoW Anchoring\u201d Section:\n\n> If a party spends current miner single-use-seal without creating a commitment - or committing to a header without sufficient PoW, such closing is considered invalid; in this case, any party is allowed to create a special bitcoin transaction providing publically-identifiableOP_RETURNinformation (\"announcement\") about a new miner single-use-seal (protocol reset); only the firstOP_RETURNannouncement which is closed with a proper procedure is considered valid under the consensus rules.\n\nKind regards,\nMaxim Orlovsky\n\nOn Sat, Jun 3, 2023 at 4:30 PM, John Tromp via bitcoin-dev <[bitcoin-dev at lists.linuxfoundation.org](mailto:On Sat, Jun 3, 2023 at 4:30 PM, John Tromp via bitcoin-dev <<a href=)> wrote:\n\n>> The white paper describing the proposal can be found here:\n>> https://github.com/LNP-BP/layer1/\n>\n> Some questions about the Bitcoin PoW anchoring:\n>\n> What if a miner spends the current miner single-use-seal while\n> creating a commitment, but makes the PMT only partially available, or\n> entirely unavailable ?\n>\n> How do other miners reach consensus on whether a protocol reset is\n> required? It seems impossible to agree on something like PMT\n> availability (much like mempool contents).\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/283cc020/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Scaling and anonymizing Bitcoin at layer 1 with client-side validation",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dr Maxim Orlovsky",
                "John Tromp"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5250
        }
    },
    {
        "title": "[bitcoin-dev] Vaults in the MATT framework",
        "thread_messages": [
            {
                "author": "Johan Tor\u00e5s Halseth",
                "date": "2023-06-02T13:25:39",
                "message_text_only": "Hi,\n\nIt was briefly mentioned in the original post, but wanted to show how\nsimple it is to use COCV as an alternative to CTV, removing that\ndependency.\n\n> In particular, it also inherits the choice of using OP_CTV as a primitive,\n> building on top of the bitcoin-inquisition's current branch that has already\n> merged OP_CTV. Reasonable vaults would be possible without CTV, but they\n> would be less efficient, particularly in the case of sending to many addresses\n> in a single unvaulting flow.\n\nInstead of specifying a CTV hash as embedded data, one could embed the\n(commitment to the) outputs of the withdrawal transaction. Then\ninstead of a single OP_CTV, one OP_COCV per output to match against\nthe embedded data. Less efficient in case of many outputs as you\nmention, but simple enough to be interesting.\n\nHere's an example how to use MATT as a CTV replacement:\nhttps://github.com/halseth/tapsim/blob/b07f29804cf32dce0168ab5bb40558cbb18f2e76/examples/matt/ctv2/README.md\n\nCheers,\nJohan\n\n\n\nOn Tue, May 2, 2023 at 10:22\u202fAM Salvatore Ingala via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi Michael,\n>\n> I can't make any claim of expertise on the field (especially on the\n> other proposals that you mentioned), so this post necessarily includes\n> my opinions \u2212 and possibly my biases.\n>\n> The core functionality of MATT is quite simple, and could be adapted\n> to any version of the scripting system: basically, COCV allows to\n> \"embed\" some data in the next output, and decide its script; CICV\n> allows \"reading\" this data.\n> The design I proposed on taproot is surely not the only possible way,\n> but it's the most simple/elegant I could come up with. Moreover, it\n> doesn't seem very useful to spend time trying to get it to work on\n> pre-taproot Script, due to the obvious advantages of those ideas when\n> deployed on taproot (like having taptrees, and all the nice properties\n> of Schnorr signatures).\n>\n> CICV/COCV can certainly be considered an additional form of\n> introspection: you're checking that the script of an input/output\n> equals a certain value, which is not possible in today's Script.\n> I think that's generally true for all covenant proposals.\n>\n> Unlike some other proposals, MATT is not yet fully formalized, so I\n> generally call \"MATT\" the combination of CICV+COCV, plus some other\n> small set of opcodes that is yet to be defined exactly. I would say it\n> fits in the same family as APO/OP_CTV/OP_VAULT, per your bucketization.\n>\n> The previous posts about MATT, fraud proofs, etc. are an exploration of\n> the deeper things that are enabled by the MATT opcodes. The claim is\n> that a set of changes that is (arguably) quite small and easy to analyze\n> is enough to express general smart contracts \u2212 thanks to fraud proofs.\n> However, fraud proofs themselves are a quite advanced application of\n> the new opcodes, and are not needed for most/all of the things that\n> people are trying to build today with the other covenant proposals.\n>\n>\n> Since you mention Simplicity: my current understanding is that its\n> endeavour of replacing Script with a better language is orthogonal to\n> the discussion about what features (e.g.: introspection, covenants)\n> should be in the language.\n>\n> All the covenant proposals listed above are technically a lot smaller\n> and easier to audit than both the SegWit and the Taproot soft forks,\n> both in terms of code and conceptual complexity.\n>\n> Therefore, if we _do_ want the features that they enable, the required\n> engineering for a soft-fork is relatively straightforward, and there is\n> not much of a reason to wait for Simplicity. It will be trivial to \"port\" any\n> constructions we might create today with covenants to Simplicity scripts.\n>\n> If we _do not_ want those features, then the decision would rather be\n> guided by other considerations, like potential risks to bitcoin caused\n> by the effect of those features on miners' incentives. These\n> concerns are not answered by Simplicity, as far as I understand:\n> you would then want to implement Simplicity _without_ those features.\n>\n> Best,\n> Salvatore\n>\n> On Mon, 1 May 2023 at 16:18, Michael Folkson <michaelfolkson at protonmail.com> wrote:\n>>\n>> Hi Salvatore\n>>\n>> Can you clarify for me which bucket this proposal sits? We have APO, CTV, OP_VAULT etc that are proposals to add additional functionality to SegWit version 1, Tapleaf version 0 scripts. We have Simplicity that would need a new Tapleaf version (e.g. Tapleaf version 1). And then there are CISA like proposals that would need a new SegWit version (e.g. SegWit version 2). It looks to me like your proposal is in the first bucket (same as APO, CTV etc) as it is just introducing new opcode functionality to existing script with no deeper introspection needed but previous and current discussion of fraud proofs, MATT frameworks etc made me initially think it was going to require more than that.\n>>\n>> Thanks\n>> Michael\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at protonmail.com\n>> GPG: A2CF5D71603C92010659818D2A75D601B23FEE0F\n>>\n>> Learn about Bitcoin: https://www.youtube.com/@portofbitcoin\n>>\n>> ------- Original Message -------\n>> On Monday, April 24th, 2023 at 20:37, Salvatore Ingala via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Hello list,\n>>\n>> TL;DR: the core opcodes of MATT can build vaults with a very similar design\n>> to OP_VAULT. Code example here:\n>>\n>> https://github.com/bitcoin-inquisition/bitcoin/compare/24.0...bigspider:bitcoin-inquisition:matt-vault\n>>\n>>\n>> In my previous emails about the MATT proposal for smart contracts in\n>> bitcoin [1], I mostly focused on proving its generality; that is, it\n>> allows arbitrary smart contracts thanks to fraud proofs.\n>>\n>> While I still find this \"completeness\" result compelling, I spent more time\n>> thinking about the framework itself; the construction is not very interesting\n>> if it turns simple things into complicated ones. Luckily, this is not the case.\n>> In particular, in this email we will not merkleize anything (other than taptrees).\n>>\n>> This post describes some progress into formalizing the semantics of the core\n>> opcodes, and demonstrates how they could be used to create vaults that seem\n>> comparable to the ones built with OP_VAULT [2], despite using general purpose\n>> opcodes.\n>>\n>> An implementation and some minimal tests matching the content of this\n>> e-mail can be found in the link above, using the bitcoin-inquisition as the\n>> base branch.\n>>\n>> Note that the linked code is not well tested and is only intended for\n>> exploratory and demonstrative purposes; therefore, bugs are likely at this\n>> stage.\n>>\n>>\n>> ##########################\n>> # PART 1: MATT's core\n>> ##########################\n>>\n>> In this section, I will discuss plausible semantics for the core opcodes for MATT.\n>>\n>> The two core opcodes are defined below as OP_CHECKINPUTCONTRACTVERIFY and\n>> OP_CHECKOUTPUTCONTRACTVERIFY.\n>>\n>> (the initial posts named them OP_CHECK{INPUT,OUTPUT}COVENANTVERIFY)\n>>\n>> They enhance Script with the following capabilities:\n>> - decide the taptree of the output\n>> - embed some (dynamically computed) data in the output\n>> - access the embedded data in the current UTXO (if any)\n>>\n>> The opcodes below are incomplete, as they only control the output's Script and\n>> not the amounts; more on that below.\n>>\n>> Other than that, the semantics should be quite close to the \"right\" one for\n>> the MATT framework.\n>>\n>>\n>> ### The opcodes\n>>\n>> case OP_CHECKINPUTCONTRACTVERIFY:\n>> {\n>> // OP_CHECKINPUTCONTRACTVERIFY is only available in Tapscript\n>> if (sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n>> // (x d -- )\n>> if (stack.size() < 2)\n>> return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n>> valtype& x = stacktop(-2);\n>> valtype& d = stacktop(-1);\n>> if (x.size() != 32 || d.size() != 32)\n>> return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n>> const XOnlyPubKey nakedXOnlyKey{Span<const unsigned char>{x.data(), x.data() + 32}};\n>> const uint256 data(d);\n>> if (!execdata.m_internal_key.has_value())\n>> return set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR); // TODO\n>> // Verify that tweak(lift_x(x), d) equals the internal pubkey\n>> if (!execdata.m_internal_key.value().CheckDoubleTweak(nakedXOnlyKey, &data, nullptr))\n>> return set_error(serror, SCRIPT_ERR_WRONGCONTRACTDATA);\n>> popstack(stack);\n>> popstack(stack);\n>> }\n>> break;\n>> case OP_CHECKOUTPUTCONTRACTVERIFY:\n>> {\n>> // OP_CHECKOUTPUTCONTRACTVERIFY is only available in Tapscript\n>> if (sigversion == SigVersion::BASE || sigversion == SigVersion::WITNESS_V0) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n>> // (out_i x taptree d -- )\n>> if (stack.size() < 4)\n>> return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n>> int out_i = CScriptNum(stacktop(-4), fRequireMinimal).getint();\n>> valtype& x = stacktop(-3);\n>> valtype& taptree = stacktop(-2);\n>> valtype& d = stacktop(-1);\n>> auto outps = checker.GetTxvOut();\n>> // Return error if the evaluation context is unavailable\n>> if (!outps)\n>> return set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR); // TODO\n>> if (x.size() != 32 || taptree.size() != 32 || (d.size() != 0 && d.size() != 32))\n>> return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n>> if (out_i < 0 || out_i >= (int)outps->size())\n>> return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n>> const XOnlyPubKey nakedXOnlyKey{Span<const unsigned char>{x.data(), x.data() + 32}};\n>> const uint256 data(d);\n>> const uint256 *data_ptr = (d.size() == 0 ? nullptr : &data);\n>> const uint256 merkle_tree(taptree);\n>> CScript scriptPubKey = outps->at(out_i).scriptPubKey;\n>> if (scriptPubKey.size() != 1 + 1 + 32 || scriptPubKey[0] != OP_1 || scriptPubKey[1] != 32)\n>> return set_error(serror, SCRIPT_ERR_WRONGCONTRACTDATA);\n>> const XOnlyPubKey outputXOnlyKey{Span<const unsigned char>{scriptPubKey.data() + 2, scriptPubKey.data() + 34}};\n>> // Verify that taptweak(tweak(lift_x(x), d), taptree) equals the internal pubkey\n>> if (!outputXOnlyKey.CheckDoubleTweak(nakedXOnlyKey, data_ptr, &merkle_tree))\n>> return set_error(serror, SCRIPT_ERR_WRONGCONTRACTDATA);\n>> popstack(stack);\n>> popstack(stack);\n>> popstack(stack);\n>> popstack(stack);\n>> }\n>> break;\n>>\n>> ### Commentary\n>>\n>> CheckDoubleTweak function (implemented in the branch) gets an x-only pubkey,\n>> optionally some data, and optionally taptree's merkle root.\n>> It verifies that the x-only pubkey being tested equals the given naked pubkey,\n>> optionally tweaked with the embedded data, optionally tweaked with the tagged\n>> hash of the merkle tree per BIP-0341 [3].\n>> Making both the tweaks optional allows to simplify the code, and also to obtain\n>> more compact scripts in some spending paths.\n>>\n>> In words:\n>>\n>> - OP_CHECKINPUTCONTRACTVERIFY: verify that the current input's internal key\n>> contains some embedded data (which would typically be passed through the\n>> witness stack)\n>> - OP_CHECKOUTPUTCONTRACTVERIFY: verify that a given output is a certain P2TR\n>> output script containing the desired embedded data.\n>>\n>> TBD if the tweaking used for the embedded data tweak should use a tagged hash;\n>> omitted for simplicity in this demo implementation.\n>>\n>> ### Amount preservation\n>>\n>> In the code above and in the linked demo implementation, the opcodes only\n>> operate on the scriptPubkey; a complete implementation would want to make sure\n>> that amounts are correctly preserved.\n>>\n>> The most direct and general way to address this would be to allow direct\n>> introspection on the output amounts. This has the complication that output\n>> amounts require 64-bits arithmetics, as discussed in the context of other\n>> proposals, for example: [4].\n>>\n>> One more limited approach that works well for many interesting contracts\n>> is that of the deferred checks, implemented in OP_VAULT [2].\n>> The idea is that all the amounts of the inputs that commit to the same output\n>> script with OP_CHECKOUTPUTCONTRACTVERIFY are added together, and the script\n>> interpreter requires that the amount of that output is not smaller than the\n>> total amount of those inputs. This check is therefore transaction-wide rather\n>> than being tested during the input's script evaluation.\n>>\n>> This behaviour is adequate for vaults and likely suitable for many other\n>> applications; however, it's not the most general approach. I didn't try to\n>> implement it yet, and defer the decision on the best approach to a later time.\n>>\n>> ### Extensions\n>>\n>> The opcodes above are not enough for the full generality of MATT: one would\n>> need to add an opcode like OP_SHA256CAT to allow the data embedding to commit\n>> to multiple pieces of data.\n>> This is not used in today's post, therefore I left it out of these code examples.\n>>\n>> It would be easy to extend OP_CHECKOUTPUTCONTRACTVERIFY to also apply for\n>> an arbitrary input (typically, different from the currently executed one); there\n>> are likely use cases for that, allowing to define contracts with more complex\n>> cross-input semantics, but I preferred to keep things simple.\n>>\n>> Of course, one could also entirely replace CICV/COCV with generic full\n>> introspection on inputs/output's program, plus opcodes for elliptic curve math\n>> and tagged hashes.\n>>\n>>\n>> ##########################\n>> # PART 2: Vaults with MATT\n>> ##########################\n>>\n>> In the rest of this post, I will document the first attempt at creating a vault\n>> using the opcodes described.\n>>\n>> While not an attempt at cloning exactly the functionality of OP_VAULT [2],\n>> it borrows heavily from the excellent work that was done there.\n>>\n>> In particular, it also inherits the choice of using OP_CTV as a primitive,\n>> building on top of the bitcoin-inquisition's current branch that has already\n>> merged OP_CTV. Reasonable vaults would be possible without CTV, but they\n>> would be less efficient, particularly in the case of sending to many addresses\n>> in a single unvaulting flow.\n>>\n>> ### Distilling OP_VAULT\n>>\n>> Abstracting from the implementation details, I mentally model a vault as a\n>> simple state machine with 2 states: [V] and [U]:\n>>\n>> [V]: the initial vault UTXO(s);\n>> [U]: the utxo produced by the \"trigger transaction\" during unvaulting.\n>>\n>> On the typical path: one or more [V] UTXOs are sent to the [U] state, and after\n>> a timelock set on [U] expires, [U] is spent to one or several destinations.\n>> Crucially, the destination outputs and amounts are already decided when [V] is\n>> spent into [U].\n>>\n>> At any time before the funds are spent from [U], they can always be spent by\n>> sending them to some specified recovery path.\n>>\n>> There are two key elements that are part of OP_VAULT's semantics, and could be\n>> generalized:\n>>\n>> \u2212 Forcing the script/amount of the next stepon\n>> \u2212 Storing some data for future Script's access (in the vault's case, a hash\n>> that commits to the final withdrawal transaction).\n>>\n>> CICV/COCV generalize both to arbitrary scripts (taptrees) and state machines,\n>> and to dynamical and witness-dependent data embedded in the pubkey of a P2TR\n>> output.\n>>\n>> ### Vault parameters\n>>\n>> A contract that represents a vault has the following parameters (hardcoded in\n>> the script when the vault is created):\n>>\n>> - alternate_pk: a key that can be used any time.\n>> - spend_delay: the relative timelock before the withdrawal can be finalized;\n>> - recover_pk: a pubkey for a P2TR output where funds can be sent at any time.\n>>\n>> The alternate_pk is a pubkey that can optionally be used as the key-path\n>> spending condition for both states [V] and [U]. If such a spending condition is not\n>> desired, it can be replaced with a NUMS point, making the key-path unspendable.\n>>\n>> The spend_delay is the number of blocks that must be mined before the final\n>> withdrawal transaction\n>>\n>> In this example we also use an unvault_pk needed to authorize the unvaulting\n>> process (that is, spend [V] into [U]); this could be replaced with any miniscript\n>> or other conditions expressible in Script.\n>>\n>> ### P2TR structure for [V] (vault)\n>>\n>> internal key: alternate_pk\n>>\n>> Script 1: \"trigger\"\n>> # witness: <out_i> <ctv-hash>\n>> {\n>> <alternate_pk>,\n>> <merkle root of U's taptree>,\n>> 2, OP_ROLL,\n>> OP_CHECKOUTPUTCONTRACTVERIFY,\n>>\n>> <unvault_pk>\n>> OP_CHECKSIG\n>> }\n>>\n>> Script 2: \"recover\"\n>> # witness: <out_i>\n>> {\n>> recover_pk,\n>> OP_0, # no data tweak\n>> OP_0, # no taptweak\n>> OP_CHECKOUTPUTCONTRACTVERIFY,\n>> OP_TRUE\n>> }\n>>\n>> The \"trigger\" script requires in the witness an output index and the ctv-hash\n>> that describes the withdrawal transaction.\n>> COCV forces the output to contain the ctv-hash as embedded data.\n>> That's followed by the unvaulting condition \u2212 in this example, a simple\n>> signature check.\n>>\n>> The \"recover\" script doesn't require any signature, and it simply forces\n>> the output specified in the witness to be a P2TR output with recover_pk as its\n>> pubkey.\n>>\n>> (Omitting the \"recover\" script in [V] would reduce the size of the witness by\n>> 32 bytes in the expected case, and might be preferred for some users)\n>>\n>> ### P2TR structure for [U] (unvaulting state)\n>>\n>> internal key: alternate_pk (tweaked with ctv_hash)\n>>\n>> Script 1: \"withdrawal\"\n>> # witness: <ctv_hash>\n>> {\n>> OP_DUP,\n>>\n>> # check that the top of the stack is the\n>> # embedded data in the current input\n>> <alternate_pk>, OP_SWAP,\n>> OP_CHECKINPUTCONTRACTVERIFY,\n>>\n>> # Check timelock\n>> <spend_delay>,\n>> OP_CHECKSEQUENCEVERIFY,\n>> OP_DROP,\n>>\n>> # Check that the transaction output is as expected\n>> OP_CHECKTEMPLATEVERIFY\n>> }\n>>\n>> Script 2: \"recover\"\n>> # witness: <out_i>\n>> {\n>> <recover_pk>,\n>> OP_0,\n>> OP_0,\n>> OP_CHECKOUTPUTCONTRACTVERIFY,\n>> OP_TRUE\n>> }\n>>\n>> The \"withdrawal\" finalizes the transaction, by checking that the timelock expired and\n>> the outputs satisfy the CTV hash that was committed to in the previous transaction.\n>>\n>> The \"recover\" script is identical as before.\n>>\n>>\n>> ### Differences with OP_VAULT vaults\n>>\n>> Here I refer to the latest version of OP_VAULT at the time of writing. [5]\n>> It is not a thorough analysis.\n>>\n>> Unlike the implementation based on OP_VAULT, the [V] utxos don't have an option\n>> to add an additional output that is sent back to the same exact vault.\n>> Supporting this use case seems to require a more general way of handling the\n>> distribution of amounts than what I discussed in the section above: that would\n>> in fact need to be generalized to the case of multiple\n>> OP_CHECKOUTPUTCONTRACTVERIFY opcodes executed for the same input.\n>>\n>> By separating the ctv-hash (which is considered \"data\") from the scripts in the\n>> taptree, one entirely avoids the need to dynamically create taptrees and\n>> replace leaves in the covenant-encumbered UTXOs; in fact, the taptrees of [V]\n>> and [U] are already set in stone when [V] utxos are created, and only the\n>> \"data\" portion of [U]'s scriptPubKey is dynamically computed. In my opinion,\n>> this makes it substantially easier to program \"state machines\" that control the\n>> behavior of coins, of which vaults are a special case.\n>>\n>> I hope you'll find this interesting, and look forward to your comments.\n>>\n>> Salvatore Ingala\n>>\n>>\n>> [1] - https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021223.html\n>> [2] - https://github.com/bitcoin/bips/pull/1421\n>> [3] - https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki\n>> [4] - https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019420.html\n>> [5] - https://github.com/bitcoin/bips/blob/7112f308b356cdf0c51d917dbdc1b98e30621f80/bip-0345.mediawiki\n>>\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Vaults in the MATT framework",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Johan Tor\u00e5s Halseth"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 19911
        }
    },
    {
        "title": "[bitcoin-dev] Standardisation of an unstructured taproot annex",
        "thread_messages": [
            {
                "author": "Joost Jager",
                "date": "2023-06-02T15:00:37",
                "message_text_only": "Hi,\n\nAs it stands, the taproot annex is consensus valid but non-standard. The\nconversations around standardization seem to be leaning towards the\nadoption of a flexible Type-Length-Value (TLV) format [1]. There's no doubt\nthat this approach has considerable potential. However, settling on an\nexact format may require a significant amount of time.\n\nIn the interim, the benefits of making the annex available in a\nnon-structured form are both evident and immediate. By allowing developers\nto utilize the taproot annex without delay, we can take advantage of its\nfeatures today, without the need to wait for the finalization of a more\nlengthy standardization process.\n\nWith this in view, I am proposing that we define any annex that begins with\n'0' as free-form, without any additional constraints. This strategy offers\nseveral distinct benefits:\n\nImmediate utilization: This opens the door for developers to make use of\nthe taproot annex for a variety of applications straight away, thus\neliminating the need to wait for the implementation of TLV or any other\nstructured format.\n\nFuture flexibility: Assigning '0'-beginning annexes as free-form keeps our\noptions open for future developments and structure improvements. As we\nforge ahead in determining the best way to standardize the annex, this\nstrategy ensures we do not limit ourselves by setting its structure in\nstone prematurely.\n\nChainspace efficiency: Non-structured data may require fewer bytes compared\nto a probable TLV format, which would necessitate the encoding of length\neven when there's only a single field.\n\nIn conclusion, adopting this approach will immediately broaden the\nutilization scope of the taproot annex while preserving the possibility of\ntransitioning to a more structured format in the future. I believe this is\na pragmatic and efficient route, one that can yield substantial benefits in\nboth the short and long term.\n\nJoost\n\n[1] https://github.com/bitcoin/bips/pull/1381\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230602/4411b85b/attachment-0001.html>"
            },
            {
                "author": "David A. Harding",
                "date": "2023-06-03T01:08:01",
                "message_text_only": "On 2023-06-02 05:00, Joost Jager via bitcoin-dev wrote:\n> the benefits of making the annex available in a\n> non-structured form are both evident and immediate. By allowing\n> developers to utilize the taproot annex without delay, we can take\n> advantage of its features today,\n\nHi Joost,\n\nOut of curiosity, what features and benefits are available today?  I \nknow Greg Sanders wants to use annex data with LN-Symmetry[1], but \nthat's dependent on a soft fork of SIGHASH_ANYPREVOUT.  I also heard you \nmention that it could allow putting arbitrary data into a witness \nwithout having to commit to that data beforehand, but that would only \nincrease the efficiency of witness stuffing like ordinal inscriptions by \nonly 0.4% (~2 bytes saved per 520 bytes pushed) and it'd still be \nrequired to create an output in order to spend it.\n\nIs there some other way to use the annex today that would be beneficial \nto users of Bitcoin?\n\n-Dave\n\n[1] \nhttps://github.com/lightning/bolts/compare/master...instagibbs:bolts:eltoo_draft#diff-156a655274046c49e6b1c2a22546ed66366d3b8d97b8e9b34b45fe5bd8800ae2R119"
            },
            {
                "author": "Greg Sanders",
                "date": "2023-06-03T01:14:40",
                "message_text_only": "Hello Joost, David,\n\nThanks for the link to my ln-symmetry draft David. I'd also be curious as\nto the usage you have in\nmind Joost.\n\nIt's probably helpful to cite the most recent discussions on the topic,\nwhich is probably\nhttps://github.com/bitcoin-inquisition/bitcoin/pull/22 , where\nbitcoin-inquisition has included\nthe `annexcarrier` option. I have a particular use for APO-enabled payment\nchannel designs\nthat doesn't require consensus meaning, so some effort was put in to try\nsomething out there.\n\nAttempting to summarize the linked PR:\n\nI think the biggest remaining issue to this kind of idea, which is why I\ndidn't propose it for mainnet,\nis the fact that BIP341/342 signature hashes do not cover *other* inputs'\nannex fields, which we\nbriefly discussed here\nhttps://github.com/bitcoin-inquisition/bitcoin/pull/22#discussion_r1143382264\n.\n\nThis means that in a coinjoin like scenario, even if the other joining\nparties prove they don't have any\ncrazy script paths, a malicious party can make the signed transaction into\na maximum sized transaction\npackage, causing griefing. The mitigation in the PR I linked was to limit\nit to 126 bytes, basically punting\non the problem by making the grief vector small. Another solution could be\nto make annex usage \"opt-in\"\nby requiring all inputs to commit to an annex to be relay-standard. In this\ncase, you've opted into a possible\nvector, but at least current usage patterns wouldn't be unduly affected.\nFor those who opt-in, perhaps the first\norder of business would be to have a field that limits the total\ntransaction weight, by policy only?\n\nSome logs related to that here:\nhttps://gist.github.com/instagibbs/7406931d953fd96fea28f85be50fc7bb\n\nRelated discussion on possible BIP118 modifications to mitigate this in\ntapscript-spending circumstances:\nhttps://github.com/bitcoin-inquisition/bitcoin/issues/19\n\nAnyways, curious to hear what people think and want to make sure everyone\nis on the same page.\n\nBest,\nGreg\n\nOn Fri, Jun 2, 2023 at 9:08\u202fPM David A. Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 2023-06-02 05:00, Joost Jager via bitcoin-dev wrote:\n> > the benefits of making the annex available in a\n> > non-structured form are both evident and immediate. By allowing\n> > developers to utilize the taproot annex without delay, we can take\n> > advantage of its features today,\n>\n> Hi Joost,\n>\n> Out of curiosity, what features and benefits are available today?  I\n> know Greg Sanders wants to use annex data with LN-Symmetry[1], but\n> that's dependent on a soft fork of SIGHASH_ANYPREVOUT.  I also heard you\n> mention that it could allow putting arbitrary data into a witness\n> without having to commit to that data beforehand, but that would only\n> increase the efficiency of witness stuffing like ordinal inscriptions by\n> only 0.4% (~2 bytes saved per 520 bytes pushed) and it'd still be\n> required to create an output in order to spend it.\n>\n> Is there some other way to use the annex today that would be beneficial\n> to users of Bitcoin?\n>\n> -Dave\n>\n> [1]\n>\n> https://github.com/lightning/bolts/compare/master...instagibbs:bolts:eltoo_draft#diff-156a655274046c49e6b1c2a22546ed66366d3b8d97b8e9b34b45fe5bd8800ae2R119\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230602/7ff6b96e/attachment-0001.html>"
            },
            {
                "author": "Joost Jager",
                "date": "2023-06-03T09:14:27",
                "message_text_only": "HI Greg,\n\nOn Sat, Jun 3, 2023 at 3:14\u202fAM Greg Sanders <gsanders87 at gmail.com> wrote:\n\n> Attempting to summarize the linked PR:\n>\n> I think the biggest remaining issue to this kind of idea, which is why I\n> didn't propose it for mainnet,\n> is the fact that BIP341/342 signature hashes do not cover *other* inputs'\n> annex fields, which we\n> briefly discussed here\n> https://github.com/bitcoin-inquisition/bitcoin/pull/22#discussion_r1143382264\n> .\n>\n> This means that in a coinjoin like scenario, even if the other joining\n> parties prove they don't have any\n> crazy script paths, a malicious party can make the signed transaction into\n> a maximum sized transaction\n> package, causing griefing. The mitigation in the PR I linked was to limit\n> it to 126 bytes, basically punting\n> on the problem by making the grief vector small. Another solution could be\n> to make annex usage \"opt-in\"\n> by requiring all inputs to commit to an annex to be relay-standard. In\n> this case, you've opted into a possible\n> vector, but at least current usage patterns wouldn't be unduly affected.\n> For those who opt-in, perhaps the first\n> order of business would be to have a field that limits the total\n> transaction weight, by policy only?\n>\n> Some logs related to that here:\n> https://gist.github.com/instagibbs/7406931d953fd96fea28f85be50fc7bb\n>\n> Related discussion on possible BIP118 modifications to mitigate this in\n> tapscript-spending circumstances:\n> https://github.com/bitcoin-inquisition/bitcoin/issues/19\n>\n\nWhile solutions such as making annex usage opt-in or imposing size\nlimitations may initially appear effective, they may also inadvertently\nfoster a false sense of security, as they lack alignment with economic\nincentives.\n\nRelying solely on policy enforcement merely transfers responsibility to the\nminers, without necessarily aligning their incentives with the broader\nnetwork health. This situation is reminiscent of the challenges encountered\nwith opt-in rbf. Despite signaling for non-replaceability, miners began\naccepting replacements probably due to the enticing higher fee incentives.\nAt least that's how I picked up this development. Businesses that relied on\nzero-confirmation payments were unexpectedly affected, leading to\nundesirable outcomes.\n\nWhile we can define policy rules, miners will ultimately operate in a\nmanner that maximizes their profits. Consequently, if a miner identifies an\nopportunity to bolster their fees by replacing an annex transaction,\nthey're likely to seize it, regardless of any policy rules. This might not\nbe readily apparent currently with a limited number of pools dominating\nblock production, but it is my hope that mining will be more decentralized\nin the future.\n\nDepending on policy to mitigate this annex malleability vector could\nmislead developers into believing their transactions are immune to\nreplacement, when in fact they might not be. This potential misalignment\ncould result in developers and businesses constructing systems based on\nassumptions that could be compromised in the future, mirroring the\nsituation that unfolded with zero-confirmation payments and rbf.\n\nIt may thus be more prudent to permit the utilization of the annex without\nrestrictions, inform developers of its inherent risks, and acknowledge that\nBitcoin, in its present state, might not be ideally suited for certain\ntypes of applications?\n\nJoost\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/4b064f42/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2023-06-03T15:50:27",
                "message_text_only": "On Sat, Jun 03, 2023 at 11:14:27AM +0200, Joost Jager via bitcoin-dev wrote:\n> Depending on policy to mitigate this annex malleability vector could\n> mislead developers into believing their transactions are immune to\n> replacement, when in fact they might not be. This potential misalignment\n> could result in developers and businesses constructing systems based on\n> assumptions that could be compromised in the future, mirroring the\n> situation that unfolded with zero-confirmation payments and rbf.\n> \n> It may thus be more prudent to permit the utilization of the annex without\n> restrictions, inform developers of its inherent risks, and acknowledge that\n> Bitcoin, in its present state, might not be ideally suited for certain\n> types of applications?\n\nIn the specific case of annex replacement leading to larger transactions, in\nalmost all cases you only care about the annex malleability causing the\ntransaction to take longer to get mined, due to it being larger. The fact the\ntransaction has become larger does not matter if the transaction does in fact\nget mined, eg due to an out-of-band payment by the \"attacker\".\n\nThe only exception is the rare cases where some transaction processing\nsoftware/hardware has actual limits on transaction size. Eg you could imagine a\nhardware wallet that simply *can't* process a transaction larger than a certain\nsize due to a lack of RAM.\n\nI don't think this is a good rational to make use of the annex standard. Quite\nthe contrary: we should be thinking about if and how to fix annex malleability\nin a future soft fork.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/b7420b57/attachment.sig>"
            },
            {
                "author": "Joost Jager",
                "date": "2023-06-03T07:49:36",
                "message_text_only": "Hi David,\n\nOn Sat, Jun 3, 2023 at 3:08\u202fAM David A. Harding <dave at dtrt.org> wrote:\n\n> Out of curiosity, what features and benefits are available today?  I\n> know Greg Sanders wants to use annex data with LN-Symmetry[1], but\n> that's dependent on a soft fork of SIGHASH_ANYPREVOUT.  I also heard you\n> mention that it could allow putting arbitrary data into a witness\n> without having to commit to that data beforehand, but that would only\n> increase the efficiency of witness stuffing like ordinal inscriptions by\n> only 0.4% (~2 bytes saved per 520 bytes pushed) and it'd still be\n> required to create an output in order to spend it.\n>\n\nIndeed, there's a minor efficiency gain in the reveal transaction witness,\nbut I think the real advantage is that it eliminates the need to publish\nand pay for the commit transaction in the first place. Any spend of a\ntaproot UTXO can be supplemented with arbitrary data in just a single\ntransaction.\n\n\n> Is there some other way to use the annex today that would be beneficial\n> to users of Bitcoin?\n\n\nThe removal of the need for a commitment transaction also enables the\ninclusion of data within a single transaction that relies on its own\ntransaction identifier (txid). This is possible because the txid\ncalculation does not incorporate the annex, where the data would be housed.\nThis feature can be beneficial in scenarios that require the emulation of\ncovenants through the use of presigned transactions involving an ephemeral\nsigner.\n\nFor instance, one can establish a time-locked vault using 2-of-2 multisig\npresigned transactions in which one of the signers is ephemeral [1]. After\nsigning, the private key is discarded, leaving only the signature. To\nensure the signature is never lost, it can be stored as a backup in the\nannex of the transaction that the presigned transaction spends. Such an\noperation would not be possible with a commit/reveal inscription.\n\n[1] https://github.com/LedgerHQ/app-bitcoin-new/issues/153\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/76c769ae/attachment.html>"
            },
            {
                "author": "Joost Jager",
                "date": "2023-06-03T08:06:37",
                "message_text_only": "On Sat, Jun 3, 2023 at 9:49\u202fAM Joost Jager <joost.jager at gmail.com> wrote:\n\n> The removal of the need for a commitment transaction also enables the\n> inclusion of data within a single transaction that relies on its own\n> transaction identifier (txid). This is possible because the txid\n> calculation does not incorporate the annex, where the data would be housed.\n> This feature can be beneficial in scenarios that require the emulation of\n> covenants through the use of presigned transactions involving an ephemeral\n> signer.\n>\n\nI think this avoidance of a circular reference is also why LN-Symmetry uses\nthe annex?\n\nJoost\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/defc2cc7/attachment.html>"
            },
            {
                "author": "Greg Sanders",
                "date": "2023-06-03T12:05:59",
                "message_text_only": "> I think this avoidance of a circular reference is also why LN-Symmetry\nuses the annex?\n\nThe annex trick specifically is used to force the publication of the\nmissing piece of the control block corresponding to the new taproot output.\nThis is to maintain the node's O(1) state while also keeping 0.5RTT channel\nupdates. Could have also been done with a dangling OP_RETURN, with the\nassociated restrictions on which sighashes you can use since you now have\nto commit to multiple outputs(disallows SIGHASH_SINGLE).\n\nThere's also a fair exchange protocol that obviates the need for it using\nsignature adapters, but the requisite APIs don't exist yet, and doesn't\nlend itself naturally to 3+ party scenarios.\n\n> Depending on policy to mitigate this annex malleability vector could\nmislead developers into believing their transactions are immune to\nreplacement, when in fact they might not be.\n\nThe issue I'm talking about is where someone's transaction is denied entry\ninto the mempool entirely because a counter-party decided to put in a\nstrictly worse transaction for miners by bloating the weight of it, not\nadding fees. A strictly worse \"API\" for paying miners for no gain seems\nlike a bad trade to me, especially when there are reasonable methods for\nmitigating this.\n\n> It may thus be more prudent to permit the utilization of the annex\nwithout restrictions, inform developers of its inherent risks, and\nacknowledge that Bitcoin, in its present state, might not be ideally suited\nfor certain types of applications?\n\nMempool policy should be an attempt to bridge the gap between node anti-DoS\nand an entity's ability to pay miners more via feerate-ordered queue. I\ndon't think the answer to this problem is to zero out all ability to limit\nthe sizes of multi-party, multi-input transactions for speculative use\ncases.\n\nGreg\n\n\n\nOn Sat, Jun 3, 2023 at 7:31\u202fAM Joost Jager via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Sat, Jun 3, 2023 at 9:49\u202fAM Joost Jager <joost.jager at gmail.com> wrote:\n>\n>> The removal of the need for a commitment transaction also enables the\n>> inclusion of data within a single transaction that relies on its own\n>> transaction identifier (txid). This is possible because the txid\n>> calculation does not incorporate the annex, where the data would be housed.\n>> This feature can be beneficial in scenarios that require the emulation of\n>> covenants through the use of presigned transactions involving an ephemeral\n>> signer.\n>>\n>\n> I think this avoidance of a circular reference is also why LN-Symmetry\n> uses the annex?\n>\n> Joost\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/00985f2b/attachment.html>"
            },
            {
                "author": "Joost Jager",
                "date": "2023-06-03T12:35:51",
                "message_text_only": ">\n> > Depending on policy to mitigate this annex malleability vector could\n> mislead developers into believing their transactions are immune to\n> replacement, when in fact they might not be.\n>\n> The issue I'm talking about is where someone's transaction is denied entry\n> into the mempool entirely because a counter-party decided to put in a\n> strictly worse transaction for miners by bloating the weight of it, not\n> adding fees. A strictly worse \"API\" for paying miners for no gain seems\n> like a bad trade to me, especially when there are reasonable methods for\n> mitigating this.\n>\n\nJust to expand this, an example would be a transaction with inputs A' and\nB' signed by two parties A and B. A has a fully signed transaction in\nhands, but can't publish it because B created and published an alternative\nversion of it with a large annex for input B'. Wouldn't miners just accept\nA's version because it's fee rate is higher? I am looking at this case\nassuming the user has a direct connection to a miner, ignoring any\npotential concerns related to p2p transport.\n\nJoost\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/08c8c4df/attachment-0001.html>"
            },
            {
                "author": "Greg Sanders",
                "date": "2023-06-03T12:43:38",
                "message_text_only": "No in this case the txid is identical. Only the wtxid is malleated, with\nannex data stuffed to max transaction size.\n\nCheers,\nGreg\n\nOn Sat, Jun 3, 2023, 8:36 AM Joost Jager <joost.jager at gmail.com> wrote:\n\n> > Depending on policy to mitigate this annex malleability vector could\n>> mislead developers into believing their transactions are immune to\n>> replacement, when in fact they might not be.\n>>\n>> The issue I'm talking about is where someone's transaction is denied\n>> entry into the mempool entirely because a counter-party decided to put in a\n>> strictly worse transaction for miners by bloating the weight of it, not\n>> adding fees. A strictly worse \"API\" for paying miners for no gain seems\n>> like a bad trade to me, especially when there are reasonable methods for\n>> mitigating this.\n>>\n>\n> Just to expand this, an example would be a transaction with inputs A' and\n> B' signed by two parties A and B. A has a fully signed transaction in\n> hands, but can't publish it because B created and published an alternative\n> version of it with a large annex for input B'. Wouldn't miners just accept\n> A's version because it's fee rate is higher? I am looking at this case\n> assuming the user has a direct connection to a miner, ignoring any\n> potential concerns related to p2p transport.\n>\n> Joost\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/49e83857/attachment.html>"
            },
            {
                "author": "Joost Jager",
                "date": "2023-06-03T12:55:27",
                "message_text_only": "On Sat, Jun 3, 2023 at 2:43\u202fPM Greg Sanders <gsanders87 at gmail.com> wrote:\n\n> No in this case the txid is identical. Only the wtxid is malleated, with\n> annex data stuffed to max transaction size.\n>\n\nThis doesn't sound incentive compatible? While gathering context, I did\nfind https://github.com/bitcoin/bitcoin/pull/24007. Apparently closed\nbecause of a lack of use case. But perhaps the desire to not limit the\nannex can revive that proposal?\n\nJoost\n\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230603/a01c286a/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Standardisation of an unstructured taproot annex",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd",
                "David A. Harding",
                "Joost Jager",
                "Greg Sanders"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 21582
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin mail list needs an explicit moderation policy",
        "thread_messages": [
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2023-06-02T23:43:45",
                "message_text_only": "Dear community,\n\nI am writing this list to bitcoin-dev mail list, but to prevent potential censorship I am sending CC to lightning-dev mail list, in order to leave the current moderator(s) without an option not to publish the letter and not to leave the topic \u201cunder the cover\u201d (sorry Lightning friends for spamming your list with this off-topic).\n\nA day before yesterday I sent a post to bitcoin-dev referencing the publication of the new Bitcoin scalability and privacy protocol, which had already received a broad reaction across the bitcoin community with literally no critical/negative responses after ~25k of reads [1]. I am not the first-time writer to the mail list and had developed things like RGB smart contracts [2], rust lightning implementation named LNP [3], multiple bitcoin libraries and software [4], [5], during three years was a main contributor to rust-bitcoin [6] etc, etc. The post was clearly not spam and received support from known community members like Giacomo Zucco [7]. Bryan Bishop knows me since 2019 when I was presenting Storm protocol on the stage on Scaling Bitcoin in Tel Aviv - and he was writing a transcript of it [8]. Thus, I am not a random unknown guy or a known spammer - and the post can be easily checked for not containing any scam promotion.\n\nNevertheless, I next day I see other e-mails getting released to bitcoin-dev, while mine - was not. It is not a problem, but since we already had an incident in the past where Bryan reported the failure of his software, me and my colleagues from LNP/BP Standards Association started asking questions about whether this post ever got to Bryan.\n\nWhat happened next was very unexpected. I am giving the core of the conversation over Twitter after in Annex A - with the purpose to showcase the problem I\u2019d like to address in this e-mail. From the discussion, it is clear that bitcoin-dev mail list lacks clear explicit moderation (or peer-review) policies, which must be applied on a non-selective basis. Also, Bryan Bishop, as the current moderator, had abused his powers in achieving his agenda based on personal likes or dislikes. The conversation went nowhere, and the post got published only after a requirement from Peter Todd [9].\n\nIn this regard, I\u2019d like to propose the following:\n\n- The bitcoin-dev mail list must have a clear moderation (or pre-publication peer-review policy). It can be proposed and discussed in this mail list and, upon agreement, must become public and obligatory.\n- Bryan Bishop, who was acting for a long time as moderator, must be appreciated for many years of unpaid work, and replaced with the new moderator who should be selected from a list of potential candidates (again in this mail list) using the criteria \u201cleast votes against\u201d.\n- The role of the moderator(s) must be purely executive of the policies, without any personal preferences.\n- A dedicated mail list should be created (\u201cbitcoin-dev-unmoderated\u201d) which will publish all submissions without moderation. It may contain spam and only people interested in the auditing bitcoin-dev main mal list non-censorship will be reading it. However, if they will notice that some non-spam e-mails were censored, they can announce that publicly. In this case, the failing moderator(s) should be removed and replaced.\n- The incentive to work as a moderator should be reputation-based.\n\nWith that, I rest my case.\n\nKind regards,\n\nMaxim Orlovsky\n\n[1]:https://twitter.com/lnp_bp/status/1664329393131364353?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n\n[2]:https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-April/021554.html\n\n[3]:https://github.com/LNP-WG\n\n[4]:https://github.com/BP-WG\n\n[5]:https://github.com/mycitadel\n\n[6]:https://github.com/rust-bitcoin/rust-bitcoin/graphs/contributors?from=2018-12-31&to=2022-04-12&type=c\n\n[7]:https://twitter.com/giacomozucco/status/1664515543154544645?s=61&t=9A8uvggqKVKV3sT4HPlQygandhttps://twitter.com/giacomozucco/status/1664731504923095041?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n\n[8]:https://scalingbitcoin.org/transcript/telaviv2019/wip-storm-layer-2-3-storage-and-messaging\n\n[9]:https://twitter.com/peterktodd/status/1664742651835367424?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n\nAnnex A:\n\n- @kanzure just like to check that our submission to bitcoin-dev hasn\u2019t got to spam <https://twitter.com/lnp_bp/status/1664649328349069320?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- A few mods are reviewing it <https://twitter.com/kanzure/status/1664680893548572677?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- Oh, so a peer review is required to get to bitcoin-dev mail list? Never read about that requirement anywhere <https://twitter.com/lnp_bp/status/1664695061462777858?s=61&t=9A8uvggqKVKV3sT4HPlQyg>. Seems like bitcoin-dev mail list requirements are now specific to the author :) <https://twitter.com/dr_orlovsky/status/1664695668475142144?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- Not the greatest email to pull this over. I'll double check but pretty sure the antagonization is boring me. <https://twitter.com/kanzure/status/1664705038315409420?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- Not sure I understand what you are saying. Can you please clarify? <https://twitter.com/dr_orlovsky/status/1664705280393859103?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- You are boring me and these antics don't make me want to go click approve on your email. <https://twitter.com/kanzure/status/1664705509147004946?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- Are you the person to approve emails for it? <https://twitter.com/phyrooo/status/1664732932068589568?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- Yes <https://twitter.com/kanzure/status/1664733107096899585?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- It appears that people boring @kanzure is going through a dedicated review procedure on bitcoin-dev mail list. Good moderation! Very clear policy! <https://twitter.com/dr_orlovsky/status/1664706165790461959?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- What are you even doing. How does this behavior suppose to get people to help you? <https://twitter.com/kanzure/status/1664706931083329536?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- I am not expecting you to help me - and never asked. I expect you to openly declare moderation (or peer review) policy and follow it. <https://twitter.com/dr_orlovsky/status/1664719295123685381?s=61&t=9A8uvggqKVKV3sT4HPlQyg> Since \u201cif you get me bored I will not click an accept button\u201d is not a moderation policy which I expect from bitcoin-dev mail list. Probably not just me. <https://twitter.com/dr_orlovsky/status/1664719786633310209?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- Yeah I mean I don't think these tweets are likely to get me to enthusiastically resolve your problem... I dunno man. What's even going on here. <https://twitter.com/kanzure/status/1664735139065208833?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n- Bitcoin mail list clearly lacks explicit moderation policy. The same mistake like with rust-bitcoin 1+ yrs ago. I am fine with peer review. Moderation. But only explicit - not just \u201cthe way I (dis)like this guy\u201d <https://twitter.com/dr_orlovsky/status/1664736404931321859?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230602/f0fd6794/attachment-0001.html>"
            },
            {
                "author": "alicexbt",
                "date": "2023-06-03T17:21:27",
                "message_text_only": "Hi Maxim,\n\n> In this regard, I\u2019d like to propose the following:\n> \n> 1.  The bitcoin-dev mail list must have a clear moderation (or pre-publication peer-review policy). It can be proposed and discussed in this mail list and, upon agreement, must become public and obligatory.\n> 2.  Bryan Bishop, who was acting for a long time as moderator, must be appreciated for many years of unpaid work, and replaced with the new moderator who should be selected from a list of potential candidates (again in this mail list) using the criteria \u201cleast votes against\u201d.\n> 3.  The role of the moderator(s) must be purely executive of the policies, without any personal preferences.\n> 4.  A dedicated mail list should be created (\u201cbitcoin-dev-unmoderated\u201d) which will publish all submissions without moderation. It may contain spam and only people interested in the auditing bitcoin-dev main mal list non-censorship will be reading it. However, if they will notice that some non-spam e-mails were censored, they can announce that publicly. In this case, the failing moderator(s) should be removed and replaced.\n> 5.  The incentive to work as a moderator should be reputation-based.\n\n- I doubt moderation policy would change anything as it could be interpreted differently by everyone and misused. We have seen this in [BIPs repository][0] recently.\n\n- We should change moderators regularly since everyone has their bias and mailing list is important part of discussions related to bitcoin development.\n\n- Unmoderated mailing list front end could be created using all the emails from archives and moderated section. Moderated emails have attachments that would need some [EML parser][1].\n\nI don't even know who are the present moderators or people with access to moderation queue. There should be some transparency about it.\n\n[0]: https://github.com/bitcoin/bips/pull/1408\n[1]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020213.html\n\n/dev/fd0\nfloppy disk guy\n\nSent with Proton Mail secure email.\n\n------- Original Message -------\nOn Saturday, June 3rd, 2023 at 5:13 AM, Dr Maxim Orlovsky via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n\n> Dear community,\n> \n> \n> I am writing this list to bitcoin-dev mail list, but to prevent potential censorship I am sending CC to lightning-dev mail list, in order to leave the current moderator(s) without an option not to publish the letter and not to\u00a0leave the topic \u201cunder the cover\u201d (sorry Lightning friends for spamming your list with this off-topic).\n> \n> \n> \n> A day before yesterday I sent a post to bitcoin-dev referencing the publication of the new Bitcoin scalability and privacy protocol, which had already received a broad reaction across the bitcoin community with literally no critical/negative responses after ~25k of reads [1]. I am not the first-time writer to the mail list and had developed things like RGB smart contracts [2], rust lightning implementation named LNP [3], multiple bitcoin libraries and software [4], [5], during three years was a main contributor to rust-bitcoin [6] etc, etc. The post was clearly not spam and received support from known community members like Giacomo Zucco [7]. Bryan Bishop knows me since 2019 when I was presenting Storm protocol on the stage on Scaling Bitcoin in Tel Aviv - and he was writing a transcript of it [8]. Thus, I am not a random unknown guy or a known spammer - and the post can be easily checked for not containing any scam promotion.\n> \n> \n> \n> Nevertheless, I next day I see other e-mails getting released to bitcoin-dev, while mine - was not. It is not a problem, but since we already had an incident in the past where Bryan reported the failure of his software, me and my colleagues from LNP/BP Standards Association started asking questions about whether this post ever got to Bryan.\n> \n> \n> \n> What happened next was very unexpected. I am giving the core of the conversation over Twitter after in Annex A - with the purpose to showcase the problem I\u2019d like to address in this e-mail. From the discussion, it is clear that bitcoin-dev mail list lacks clear explicit moderation (or peer-review) policies, which must be applied on a non-selective basis. Also, Bryan Bishop, as the current moderator, had abused his powers in achieving his agenda based on personal likes or dislikes. The conversation went nowhere, and the post got published only after a requirement from Peter Todd [9].\n> \n> \n> \n> In this regard, I\u2019d like to propose the following:\n> \n> 1.  The bitcoin-dev mail list must have a clear moderation (or pre-publication peer-review policy). It can be proposed and discussed in this mail list and, upon agreement, must become public and obligatory.\n> 2.  Bryan Bishop, who was acting for a long time as moderator, must be appreciated for many years of unpaid work, and replaced with the new moderator who should be selected from a list of potential candidates (again in this mail list) using the criteria \u201cleast votes against\u201d.\n> 3.  The role of the moderator(s) must be purely executive of the policies, without any personal preferences.\n> 4.  A dedicated mail list should be created (\u201cbitcoin-dev-unmoderated\u201d) which will publish all submissions without moderation. It may contain spam and only people interested in the auditing bitcoin-dev main mal list non-censorship will be reading it. However, if they will notice that some non-spam e-mails were censored, they can announce that publicly. In this case, the failing moderator(s) should be removed and replaced.\n> 5.  The incentive to work as a moderator should be reputation-based.\n> \n> \n> \n> With that, I rest my case.\n> \n> \n> \n> Kind regards,\n> \n> Maxim Orlovsky\n> \n> \n> \n> [1]:\u00a0https://twitter.com/lnp_bp/status/1664329393131364353?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n> \n> [2]:\u00a0https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-April/021554.html\n> \n> [3]:\u00a0https://github.com/LNP-WG\n> \n> [4]:\u00a0https://github.com/BP-WG\n> \n> [5]:\u00a0https://github.com/mycitadel\n> \n> [6]:\u00a0https://github.com/rust-bitcoin/rust-bitcoin/graphs/contributors?from=2018-12-31&to=2022-04-12&type=c\n> \n> [7]:\u00a0https://twitter.com/giacomozucco/status/1664515543154544645?s=61&t=9A8uvggqKVKV3sT4HPlQyg\u00a0and\u00a0https://twitter.com/giacomozucco/status/1664731504923095041?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n> \n> [8]:\u00a0https://scalingbitcoin.org/transcript/telaviv2019/wip-storm-layer-2-3-storage-and-messaging\n> \n> [9]:\u00a0https://twitter.com/peterktodd/status/1664742651835367424?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n> \n> \n> \n> \n> \n> Annex A:\n> \n> \n> \n> -   @kanzure just like to check that our submission to bitcoin-dev hasn\u2019t got to spam <https://twitter.com/lnp_bp/status/1664649328349069320?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   A few mods are reviewing it <https://twitter.com/kanzure/status/1664680893548572677?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   Oh, so a peer review is required to get to bitcoin-dev mail list? Never read about that requirement anywhere <https://twitter.com/lnp_bp/status/1664695061462777858?s=61&t=9A8uvggqKVKV3sT4HPlQyg>. Seems like bitcoin-dev mail list requirements are now specific to the author :) <https://twitter.com/dr_orlovsky/status/1664695668475142144?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   Not the greatest email to pull this over. I'll double check but pretty sure the antagonization is boring me. <https://twitter.com/kanzure/status/1664705038315409420?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   Not sure I understand what you are saying. Can you please clarify? <https://twitter.com/dr_orlovsky/status/1664705280393859103?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   You are boring me and these antics don't make me want to go click approve on your email. <https://twitter.com/kanzure/status/1664705509147004946?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   Are you the person to approve emails for it? <https://twitter.com/phyrooo/status/1664732932068589568?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   Yes <https://twitter.com/kanzure/status/1664733107096899585?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   It appears that people boring @kanzure is going through a dedicated review procedure on bitcoin-dev mail list. Good moderation! Very clear policy! <https://twitter.com/dr_orlovsky/status/1664706165790461959?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   What are you even doing. How does this behavior suppose to get people to help you? <https://twitter.com/kanzure/status/1664706931083329536?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   I am not expecting you to help me - and never asked. I expect you to openly declare moderation (or peer review) policy and follow it. <https://twitter.com/dr_orlovsky/status/1664719295123685381?s=61&t=9A8uvggqKVKV3sT4HPlQyg> Since \u201cif you get me bored I will not click an accept button\u201d is not a moderation policy which I expect from bitcoin-dev mail list. Probably not just me. <https://twitter.com/dr_orlovsky/status/1664719786633310209?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   Yeah I mean I don't think these tweets are likely to get me to enthusiastically resolve your problem... I dunno man. What's even going on here. <https://twitter.com/kanzure/status/1664735139065208833?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> -   Bitcoin mail list clearly lacks explicit moderation policy. The same mistake like with rust-bitcoin 1+ yrs ago. I am fine with peer review. Moderation. But only explicit - not just \u201cthe way I (dis)like this guy\u201d <https://twitter.com/dr_orlovsky/status/1664736404931321859?s=61&t=9A8uvggqKVKV3sT4HPlQyg>\n> \n> \n> \n>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin mail list needs an explicit moderation policy",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "alicexbt",
                "Dr Maxim Orlovsky"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 16621
        }
    },
    {
        "title": "[bitcoin-dev] [Lightning-dev] Bitcoin mail list needs an explicit moderation policy",
        "thread_messages": [
            {
                "author": "Bryan Bishop",
                "date": "2023-06-03T00:06:53",
                "message_text_only": "Hi Maxim,\n\nThis is exceedingly boring. This is not a good use of your time. There are\nthousands of developers subscribed to this mailing list, and we should not\nwaste their time, including this discussion.\n\nOn Fri, Jun 2, 2023 at 6:44\u202fPM Dr Maxim Orlovsky via Lightning-dev <\nlightning-dev at lists.linuxfoundation.org> wrote:\n\n> What happened next was very unexpected. I am giving the core of the\n> conversation over Twitter after in Annex A - with the purpose to showcase\n> the problem I\u2019d like to address in this e-mail. From the discussion, it is\n> clear that bitcoin-dev mail list lacks clear explicit moderation (or\n> peer-review) policies, which must be applied on a non-selective basis.\n> Also, Bryan Bishop, as the current moderator, had abused his powers in\n> achieving his agenda based on personal likes or dislikes. The conversation\n> went nowhere, and the post got published only after a requirement from\n> Peter Todd [9].\n>\n\nWhat exactly is the abuse being alleged here though? Why would it be\nsurprising that your tweets didn't get the behavior you wanted out of me?\nIn general mailing list moderators should not be sending items through\nbased on twitter mobbing, that's a policy you can consider if you want to\nthink about policies.\n\nAnnex A:\n>\n>    - @kanzure just like to check that our submission to bitcoin-dev\n>    hasn\u2019t got to spam <\n>    https://twitter.com/lnp_bp/status/1664649328349069320?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n>    >\n>    - A few mods are reviewing it <\n>    https://twitter.com/kanzure/status/1664680893548572677?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n>    >\n>    - Oh, so a peer review is required to get to bitcoin-dev mail list?\n>    Never read about that requirement anywhere <\n>    https://twitter.com/lnp_bp/status/1664695061462777858?s=61&t=9A8uvggqKVKV3sT4HPlQyg>.\n>    Seems like bitcoin-dev mail list requirements are now specific to the\n>    author :) <\n>    https://twitter.com/dr_orlovsky/status/1664695668475142144?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n>    >\n>    - Not the greatest email to pull this over. I'll double check but\n>    pretty sure the antagonization is boring me. <\n>    https://twitter.com/kanzure/status/1664705038315409420?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n>    >\n>    - Not sure I understand what you are saying. Can you please clarify? <\n>    https://twitter.com/dr_orlovsky/status/1664705280393859103?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n>    >\n>    - You are boring me and these antics don't make me want to go click\n>    approve on your email. <\n>    https://twitter.com/kanzure/status/1664705509147004946?s=61&t=9A8uvggqKVKV3sT4HPlQyg\n>    >\n>\n>\nExcluding your (and my) other tweets and any other collaborators' tweets\nfrom your report is kind of weird. I think you should include the other\ntweets that you were sending me because it provides context. Zooming out,\nthe entirety of your complaint seems to be about moderation queue latency\nand delay. Why would you, or anyone, allege that that moderator latency is\nindicative of me specifically not liking you? Wouldn't it be more likely\nthat the other moderators and I are looking at your email and talking with\neach other asynchronously about whether to suggest edits/reject/submit?\n\nI suspect you may be attributing malice to me because I recently asked you\nto stop tagging me on quantum woo and you might have taken that negatively\n- please keep in mind that not everyone believes in quantum consciousness\nor is interested in hearing about it, and it's okay for people like me to\nnot want to engage on each of your different interests. There is some\noverlap in our interests outside of crypto, but that isn't one of them. I\nnoticed some odd tweets from you to me after that, so that's why that\nincident came to my mind as a possible explanation for this.\n\nThank you.\n\n- Bryan\nhttps://twitter.com/kanzure\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230602/b8b5b953/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin mail list needs an explicit moderation policy",
            "categories": [
                "bitcoin-dev",
                "Lightning-dev"
            ],
            "authors": [
                "Bryan Bishop"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3988
        }
    }
]