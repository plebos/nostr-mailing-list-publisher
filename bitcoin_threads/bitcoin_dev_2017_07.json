[
    {
        "title": "[bitcoin-dev] BIP proposal: No chaining off replaceable transactions",
        "thread_messages": [
            {
                "author": "Rhavar",
                "date": "2017-07-02T20:35:22",
                "message_text_only": "==Abstract==\nBIP125 allows transactions to opt into replaceability with a primary use case\nof allowing users to increase the fees of unconfirming transactions, helping create\na more efficient fee market place.\nHowever this goal is hindered when the receiver of a transaction spends from the\nunconfirmed output, which exposes the sender to the awkward position of needing\nto pick between needing to pay an effectively unbounded amount of money as per the BIP125 rules, or not fee bump at all.\nThis is especially problematic in the case of batched sends in which there are\nmultiple independent receivers. In practice this means wallets and services can not effectively low ball the fee of transactions, with the intention of fee bumping due to the risk of the receiver spending or sweeping it before it confirms.\nIn order to support a healthy fee marketplace, this proposal aims to increase\nthe utility of bip125 by making transactions that spend an unconfirmed BIP125\noutput non-standard.\n==Summary==\nThis policy specifies a max chain depth of 1 for any BIP125 transactions.\n==Impact==\nReceivers of BIP125 transactions will need to wait until the transaction\nhas confirmed before spending from it. This will not be significantly different\nthan it is currently as they receivers need to be monitoring for replacements.\nIf senders want to make further transactions before the BIP125 transaction confirms,\nand need to utilize the change of the transaction: they will need to replace the\ntransaction with a one that makes the other send in \"pass through\" style or first\nfinalize the BIP125 transaction and then chain from the spend normally.\n\n-Ryan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170702/4e901484/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-02T20:56:07",
                "message_text_only": "On Sun, Jul 2, 2017 at 8:35 PM, Rhavar via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> ==Abstract==\n>\n> BIP125 allows transactions to opt into replaceability with a primary use\n> case\n> of allowing users to increase the fees of unconfirming transactions, helping\n> create\n> a more efficient fee market place.\n\nI don't really see how this is desirable:  Just replace it-- the\nreceiver foolishly spent it at its own peril, spending a unconfirmed\npayment from a third party is something that Core never does, it's\nreckless unless you're doing something like CPFPing it to yourself,\nwhich is harmless (either it'll work, or it'll fail and you'll be fine\nwith that).\n\nBeyond being paternalistic the issue I see with your proposal is that\nits contrary to miner income-- you're asking miners to ignore these\nspends that otherwise they could accept.  This seems unstable-- some\npeople would ignore your rule even if it were otherwise widely\nadopted, leading to the network behavior having higher volatility.\n\nInstead, perhaps a BIP that very strongly advises parties to not spend\nunconfirmed outputs from third parties while making a payment to third\nparties would achieve your end?"
            },
            {
                "author": "Rhavar",
                "date": "2017-07-02T21:01:19",
                "message_text_only": "> I don\"t really see how this is desirable: Just replace it-\nThat's not really realistic. In practice some receivers do big sweeps and include unconfirmed inputs. Replacing the transaction means you need to pay the cost of the sweep, which you probably don't want to do (can be in the order of $100s of dollars).\n> Beyond being paternalistic the issue I see with your proposal is thatits contrary to miner income\nThis applies to pretty much all non-standard transactions.\n\n-Ryan\n\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] BIP proposal: No chaining off replaceable transactions\n> Local Time: July 2, 2017 3:56 PM\n> UTC Time: July 2, 2017 8:56 PM\n> From: greg at xiph.org\n> To: Rhavar <rhavar at protonmail.com>\n> bitcoin-dev at lists.linuxfoundation.org <bitcoin-dev at lists.linuxfoundation.org>\n> On Sun, Jul 2, 2017 at 8:35 PM, Rhavar via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> ==Abstract==\n>>\n>> BIP125 allows transactions to opt into replaceability with a primary use\n>> case\n>> of allowing users to increase the fees of unconfirming transactions, helping\n>> create\n>> a more efficient fee market place.\n> I don\"t really see how this is desirable: Just replace it-- the\n> receiver foolishly spent it at its own peril, spending a unconfirmed\n> payment from a third party is something that Core never does, it\"s\n> reckless unless you\"re doing something like CPFPing it to yourself,\n> which is harmless (either it\"ll work, or it\"ll fail and you\"ll be fine\n> with that).\n> Beyond being paternalistic the issue I see with your proposal is that\n> its contrary to miner income-- you\"re asking miners to ignore these\n> spends that otherwise they could accept. This seems unstable-- some\n> people would ignore your rule even if it were otherwise widely\n> adopted, leading to the network behavior having higher volatility.\n> Instead, perhaps a BIP that very strongly advises parties to not spend\n> unconfirmed outputs from third parties while making a payment to third\n> parties would achieve your end?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170702/5b724d82/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-03T02:28:34",
                "message_text_only": "On Sun, Jul 2, 2017 at 9:01 PM, Rhavar <rhavar at protonmail.com> wrote:\n> That's not really realistic. In practice some receivers do big sweeps and\n> include unconfirmed inputs. Replacing the transaction means you need to pay\n> the cost of the sweep, which you probably don't want to do (can be in the\n> order of $100s of dollars).\n\nPerhaps I am not following what you're saying here.\n\nIf the receiver is paying a higher feerate than your replacement,\nhe'll get it confirmed as fast or faster than your replacement in any\ncase."
            },
            {
                "author": "Rhavar",
                "date": "2017-07-03T03:02:44",
                "message_text_only": "> Perhaps I am not following what you\"re saying here.\n> If the receiver is paying a higher feerate than your replacement,\n> he\"ll get it confirmed as fast or faster than your replacement in any\n> case.\n\nIt actually doesn't really matter much.\nLet's say I want to pay Alice and Bob (unrelated entities), so I send it to them (together) with a low-fee transaction of paying 50 sat/byte. After an hour it's obvious that it's not confirmed (maybe there was a big backlog, or no blocks mined), so I want to replace my small transaction with one that pays 70 sat/byte.\nBut in the mean time, Alice has swept her wallet (or used a service that has done so) and generated 50KB of descendant transactions paying 40 sat/byte (i.e. total fees of 0.02 BTC or $50).\nAccording to the BIP125 rules, I would need to pay for the cost of invalidating all the transactions (an absolute higher amount of fee) along with the replay cost of the descendant transactions.\nSo in this case, for me to fee bump the transaction I'm looking at throwing away $50 because of descendant transactions that were totally out of my control. If I don't fee bump, I violate my promise to Bob to pay in a timely manner (and also probably Alice, as it wasn't in her control she was using an exchange that did this).\nIf I guarantee to fee bump, the amount I risk is effectively unbounded. And even if the descendant transactions have a higher fee rate, and are assisting by CPFP boosting my transaction -- it very well might not be enough.\n--\nThe idea of this proposal comes from the problems *in practice* of trying to low-ball fee estimation with scheduled continuous fee bumps until it confirms. At the moment it's not viable, but if this proposal was adopted then it would be.\nPersonally I think it's of critical piece of having a stable fee market. Fee estimation is a fools game, even the new and improved fee estimation in master today was suggesting x30 fees to what was required (and I successfully made transactions with). People (and especially services) being able to be able to dynamically increase their fees sanely when dealing with withdrawals (and especially batched ones) will go a long way to helping the overall ecosystem.\n\n-Ryan\n\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] BIP proposal: No chaining off replaceable transactions\n> Local Time: July 2, 2017 9:28 PM\n> UTC Time: July 3, 2017 2:28 AM\n> From: greg at xiph.org\n> To: Rhavar <rhavar at protonmail.com>\n> bitcoin-dev at lists.linuxfoundation.org <bitcoin-dev at lists.linuxfoundation.org>\n> On Sun, Jul 2, 2017 at 9:01 PM, Rhavar <rhavar at protonmail.com> wrote:\n>> That\"s not really realistic. In practice some receivers do big sweeps and\n>> include unconfirmed inputs. Replacing the transaction means you need to pay\n>> the cost of the sweep, which you probably don\"t want to do (can be in the\n>> order of $100s of dollars).\n> Perhaps I am not following what you\"re saying here.\n> If the receiver is paying a higher feerate than your replacement,\n> he\"ll get it confirmed as fast or faster than your replacement in any\n> case.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170702/a1b04eb8/attachment.html>"
            },
            {
                "author": "James Hilliard",
                "date": "2017-07-03T04:17:08",
                "message_text_only": "This seems like something that might be better dealt with by modifying\nthe RBF eviction policy to calculate feerate separation between the\ntransactions in the mempool and opportunistically evict the sweep\ntransaction+parent if it has a sufficiently different feerate from the\nbumped fee replacement. Basically you allow the fee bumped replacement\nto evict the sweep transaction+parent if there is more than 1MB of\ntransactions(or whatever the block size/weight limit is) of\ntransactions between the sweep transaction+parent feerate and bumped\nfee replacement feerate. This way the sweep transaction parent only\ngets replaced if it is unlikely that miners would ever produce a block\ntemplate with transactions at the sweep transaction+parent feerate at\nthe same time as the replacement transaction feerate. From the miners\npoint of view this give a higher fee block template overall since it\nwould be unlikely that one would see transactions with the feerate of\nboth the CPFP sweep and the replacement parent in the same block\ntemplate.\n\nOn Sun, Jul 2, 2017 at 10:02 PM, Rhavar via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Perhaps I am not following what you\"re saying here.\n>\n> If the receiver is paying a higher feerate than your replacement,\n> he\"ll get it confirmed as fast or faster than your replacement in any\n> case.\n>\n>\n> It actually doesn't really matter much.\n>\n> Let's say I want to pay Alice and Bob (unrelated entities), so I send it to\n> them (together) with a low-fee transaction of paying 50 sat/byte. After an\n> hour it's obvious that it's not confirmed (maybe there was a big backlog, or\n> no blocks mined), so I want to replace my small transaction with one that\n> pays 70 sat/byte.\n>\n> But in the mean time, Alice has swept her wallet (or used a service that has\n> done so) and generated 50KB of descendant transactions paying 40 sat/byte\n> (i.e. total fees of 0.02 BTC or $50).\n>\n> According to the BIP125 rules, I would need to pay for the cost of\n> invalidating all the transactions (an absolute higher amount of fee) along\n> with the replay cost of the descendant transactions.\n>\n> So in this case, for me to fee bump the transaction I'm looking at throwing\n> away $50 because of descendant transactions that were totally out of my\n> control.  If I don't fee bump, I violate my promise to Bob to pay in a\n> timely manner (and also probably Alice, as it wasn't in her control she was\n> using an exchange that did this).\n>\n> If I guarantee to fee bump, the amount I risk is effectively unbounded. And\n> even if the descendant transactions have a higher fee rate, and are\n> assisting by CPFP boosting my transaction -- it very well might not be\n> enough.\n>\n> --\n>\n> The idea of this proposal comes from the problems *in practice* of trying to\n> low-ball fee estimation with scheduled continuous fee bumps until it\n> confirms. At the moment it's not viable, but if this proposal was adopted\n> then it would be.\n>\n> Personally I think it's of critical piece of having a stable fee market. Fee\n> estimation is a fools game, even the new and improved fee estimation in\n> master today was suggesting x30 fees to what was required (and I\n> successfully made transactions with). People (and especially services) being\n> able to be able to dynamically increase their fees sanely when dealing with\n> withdrawals (and especially batched ones) will go a long way to helping the\n> overall ecosystem.\n>\n>\n> -Ryan\n>\n>\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] BIP proposal: No chaining off replaceable\n> transactions\n> Local Time: July 2, 2017 9:28 PM\n> UTC Time: July 3, 2017 2:28 AM\n> From: greg at xiph.org\n> To: Rhavar <rhavar at protonmail.com>\n> bitcoin-dev at lists.linuxfoundation.org\n> <bitcoin-dev at lists.linuxfoundation.org>\n>\n> On Sun, Jul 2, 2017 at 9:01 PM, Rhavar <rhavar at protonmail.com> wrote:\n>> That\"s not really realistic. In practice some receivers do big sweeps and\n>> include unconfirmed inputs. Replacing the transaction means you need to\n>> pay\n>> the cost of the sweep, which you probably don\"t want to do (can be in the\n>> order of $100s of dollars).\n>\n> Perhaps I am not following what you\"re saying here.\n>\n> If the receiver is paying a higher feerate than your replacement,\n> he\"ll get it confirmed as fast or faster than your replacement in any\n> case.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Rhavar",
                "date": "2017-07-03T16:25:33",
                "message_text_only": "I was told my arguments are a bit incoherent, so I'll try again:\n\n> Beyond being paternalistic the issue I see with your proposal is that\n> its contrary to miner income-- you\"re asking miners to ignore these\n> spends that otherwise they could accept.\n\nIt is no more paternalistic than non BIP125 transactions. First of all, I'd like to emphasis we're talking about very small amounts of money, either way it's not going to matter too much as no one is going to care.\n\n> This seems unstable-- some\n> people would ignore your rule even if it were otherwise widely\n> adopted, leading to the network behavior having higher volatility.\n\nActually, I believe the opposite. The problematic unconfirmed BIP125 descendants tend to be low fee rate sweeps, that won't be mined any time soon anyway. Miners who ignored that, but instead took the replacement transaction would be able to put it in a block and make more money. The low fee rate sweep will eventually be recreated anyway, with a slightly different set of inputs.\nThus I believe miners who used my policy would make more than miners who didn't.\nBut the reality is that if my proposal was deployed, people would stop spending from bip125 outputs until they confirm, in the first place. There's no good reason to do so, so no incentive to try route around the network. The only reason people do so now is because they can, and there's no harm in doing so (for things like sweep transactions, where you don't care if you need to keep redoing it). My proposal would drastically simplify feebump logic, and make fee bumps actually predictable.\nAs a concrete example: bitcoin core's feebump command completely breaks when there exists descendant transactions, and for it it would would not only require a fair bit of logic but a change in interface (so the user can control how much they're willing to lose)\nI believe this proposal offers a huge amount of benefits for users/services wanting to make use of bip125 for feebumping, which will result in a more stable fee market. While creating extremely little to no disadvantages.\nUnless someone can think of a legitimate use case that spending unconfirmed bip125 transactions is useful?\n\n-Ryan\n\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] BIP proposal: No chaining off replaceable transactions\n> Local Time: July 2, 2017 3:56 PM\n> UTC Time: July 2, 2017 8:56 PM\n> From: greg at xiph.org\n> To: Rhavar <rhavar at protonmail.com>\n> bitcoin-dev at lists.linuxfoundation.org <bitcoin-dev at lists.linuxfoundation.org>\n> On Sun, Jul 2, 2017 at 8:35 PM, Rhavar via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> ==Abstract==\n>>\n>> BIP125 allows transactions to opt into replaceability with a primary use\n>> case\n>> of allowing users to increase the fees of unconfirming transactions, helping\n>> create\n>> a more efficient fee market place.\n> I don\"t really see how this is desirable: Just replace it-- the\n> receiver foolishly spent it at its own peril, spending a unconfirmed\n> payment from a third party is something that Core never does, it\"s\n> reckless unless you\"re doing something like CPFPing it to yourself,\n> which is harmless (either it\"ll work, or it\"ll fail and you\"ll be fine\n> with that).\n> Beyond being paternalistic the issue I see with your proposal is that\n> its contrary to miner income-- you\"re asking miners to ignore these\n> spends that otherwise they could accept. This seems unstable-- some\n> people would ignore your rule even if it were otherwise widely\n> adopted, leading to the network behavior having higher volatility.\n> Instead, perhaps a BIP that very strongly advises parties to not spend\n> unconfirmed outputs from third parties while making a payment to third\n> parties would achieve your end?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170703/a5c7b16c/attachment-0001.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-07-02T21:10:19",
                "message_text_only": "This isn't BIP material, as it merely describes a local policy.\n\n(BIP125 itself is also local policy, but one that involves standardisation \nsince it expresses how wallets interoperate with nodes with that policy.)\n\nIf you wish to suggest this policy change, you should just implement it and \nopen a merge/pull request on the applicable project.\n\nLuke\n\n\nOn Sunday 02 July 2017 8:35:22 PM Rhavar via bitcoin-dev wrote:\n> ==Abstract==\n> BIP125 allows transactions to opt into replaceability with a primary use\n> case of allowing users to increase the fees of unconfirming transactions,\n> helping create a more efficient fee market place.\n> However this goal is hindered when the receiver of a transaction spends\n> from the unconfirmed output, which exposes the sender to the awkward\n> position of needing to pick between needing to pay an effectively\n> unbounded amount of money as per the BIP125 rules, or not fee bump at all.\n> This is especially problematic in the case of batched sends in which there\n> are multiple independent receivers. In practice this means wallets and\n> services can not effectively low ball the fee of transactions, with the\n> intention of fee bumping due to the risk of the receiver spending or\n> sweeping it before it confirms. In order to support a healthy fee\n> marketplace, this proposal aims to increase the utility of bip125 by\n> making transactions that spend an unconfirmed BIP125 output non-standard.\n> ==Summary==\n> This policy specifies a max chain depth of 1 for any BIP125 transactions.\n> ==Impact==\n> Receivers of BIP125 transactions will need to wait until the transaction\n> has confirmed before spending from it. This will not be significantly\n> different than it is currently as they receivers need to be monitoring for\n> replacements. If senders want to make further transactions before the\n> BIP125 transaction confirms, and need to utilize the change of the\n> transaction: they will need to replace the transaction with a one that\n> makes the other send in \"pass through\" style or first finalize the BIP125\n> transaction and then chain from the spend normally.\n> \n> -Ryan"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2017-07-04T11:50:30",
                "message_text_only": "Your BIP would take away the only way the *receiver* has to raise the\nfee: CPFP. And the receiver is arguably the more important party in this\nquestion. After all the sender has no real incentive for his payment to\nbe confirmed; it's receiver who has.\n\n\nOn 07/02/2017 10:35 PM, Rhavar via bitcoin-dev wrote:\n> ==Abstract==\n> \n> BIP125 allows transactions to opt into replaceability with a primary use\n> case\n> of allowing users to increase the fees of unconfirming transactions,\n> helping create\n> a more efficient fee market place.\n> \n> However this goal is hindered when the receiver of a transaction spends\n> from the\n> unconfirmed output, which exposes the sender to the awkward position of\n> needing\n> to pick between needing to pay an effectively unbounded amount of money\n> as per the BIP125 rules, or not fee bump at all.\n> \n> This is especially problematic in the case of batched sends in which\n> there are\n> multiple independent receivers. In practice this means wallets and\n> services can not effectively low ball the fee of transactions, with the\n> intention of fee bumping due to the risk of the receiver spending or\n> sweeping it before it confirms.\n> \n> In order to support a healthy fee marketplace, this proposal aims to\n> increase\n> the utility of bip125 by making transactions that spend an unconfirmed\n> BIP125\n> output non-standard.\n> \n> \n> ==Summary==\n> \n> This policy specifies a max chain depth of 1 for any BIP125 transactions.\n> \n> ==Impact==\n> \n> Receivers of BIP125 transactions will need to wait until the transaction\n> has confirmed before spending from it. This will not be significantly\n> different\n> than it is currently as they receivers need to be monitoring for\n> replacements.\n> \n> If senders want to make further transactions before the BIP125\n> transaction confirms,\n> and need to utilize the change of the transaction: they will need to\n> replace the\n> transaction with a one that makes the other send in \"pass through\" style\n> or first\n> finalize the BIP125 transaction and then chain from the spend normally.\n> \n> \n> -Ryan\n> \n> \n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Rhavar",
                "date": "2017-07-05T13:52:53",
                "message_text_only": "Thanks Andreas, that's actually a pretty good use-case I didn't think of.\nPerhaps you could make the rule: \"To spend from an unconfirmed BIP125 output, the transaction feerate needs to be higher than its unconfirmed parent's effective feerate.\"\nIt doesn't totally solve the problem, but I think in practice would do a good job (most of the problematic descendants tends to be low feerate sweeps). It would also preserve the ability for receivers to use CPFP if they wish.\n\n-Ryan\n\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] BIP proposal: No chaining off replaceable transactions\n> Local Time: July 4, 2017 6:50 AM\n> UTC Time: July 4, 2017 11:50 AM\n> From: bitcoin-dev at lists.linuxfoundation.org\n> To: bitcoin-dev at lists.linuxfoundation.org\n> Your BIP would take away the only way the *receiver* has to raise the\n> fee: CPFP. And the receiver is arguably the more important party in this\n> question. After all the sender has no real incentive for his payment to\n> be confirmed; it\"s receiver who has.\n> On 07/02/2017 10:35 PM, Rhavar via bitcoin-dev wrote:\n>> ==Abstract==\n>>\n>> BIP125 allows transactions to opt into replaceability with a primary use\n>> case\n>> of allowing users to increase the fees of unconfirming transactions,\n>> helping create\n>> a more efficient fee market place.\n>>\n>> However this goal is hindered when the receiver of a transaction spends\n>> from the\n>> unconfirmed output, which exposes the sender to the awkward position of\n>> needing\n>> to pick between needing to pay an effectively unbounded amount of money\n>> as per the BIP125 rules, or not fee bump at all.\n>>\n>> This is especially problematic in the case of batched sends in which\n>> there are\n>> multiple independent receivers. In practice this means wallets and\n>> services can not effectively low ball the fee of transactions, with the\n>> intention of fee bumping due to the risk of the receiver spending or\n>> sweeping it before it confirms.\n>>\n>> In order to support a healthy fee marketplace, this proposal aims to\n>> increase\n>> the utility of bip125 by making transactions that spend an unconfirmed\n>> BIP125\n>> output non-standard.\n>>\n>>\n>> ==Summary==\n>>\n>> This policy specifies a max chain depth of 1 for any BIP125 transactions.\n>>\n>> ==Impact==\n>>\n>> Receivers of BIP125 transactions will need to wait until the transaction\n>> has confirmed before spending from it. This will not be significantly\n>> different\n>> than it is currently as they receivers need to be monitoring for\n>> replacements.\n>>\n>> If senders want to make further transactions before the BIP125\n>> transaction confirms,\n>> and need to utilize the change of the transaction: they will need to\n>> replace the\n>> transaction with a one that makes the other send in \"pass through\" style\n>> or first\n>> finalize the BIP125 transaction and then chain from the spend normally.\n>>\n>>\n>> -Ryan\n>>\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170705/69dc44cb/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal: No chaining off replaceable transactions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andreas Schildbach",
                "James Hilliard",
                "Luke Dashjr",
                "Gregory Maxwell",
                "Rhavar"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 25359
        }
    },
    {
        "title": "[bitcoin-dev] BIP: OP_BRIBVERIFY - the op code needed for Blind Merge Mined drivechains",
        "thread_messages": [
            {
                "author": "Paul Sztorc",
                "date": "2017-07-02T21:32:50",
                "message_text_only": "Hi,\n\nSorry for the delay, I overlooked this email until now. I see that Chris\nand CryptAxe both answered but I will also answer, because the message\nwas addressed to me.\n\nOn 6/30/2017 12:00 AM, ZmnSCPxj wrote:\n> >Your way is actually very similar to mine. Mine _forces_ the bribe to be\n> >in the earliest txn (the coinbase) and to only occur once. Yours doesn\"t\n> >do anything to refund the briber, if the sidechain (but not the\n> >mainchain) reorganizes (as it can easily do, if an older sidechain\n> >parent is extended while the mainchain proceeds normally). This creates\n> >additional risk.\n>\n> I don't understand this part.  In my scheme, a sidechain cannot\n> reorganize unless the mainchain reorganizes, since the consensus loop\n> only cares about matching the current block; it ignores splits and\n> does not consider them valid.\n\nIf I've understood you correctly, you have said that each OP Return\nlinks the (ex)-latest block to a brand new block, and that whichever\nmessage of this kind comes first (in the mainchain) wins and the rest\nare discarded.\n\nSo what if I had a sidechain represented by a jumble of capital letters,\ndiscarded entries as lowercase letters.\n\nMainchain Block #200001:  [0 --> Q], [0 -->v], [0 -->s], [0 -->b],\nMainchain Block #200002:  [Q --> H], [Q --> z],\nMainchain Block #200003:  [H --> F]\nMainchain Block #200004:  [F --> J], [F -->w]\nMainchain Block #200005:  [H --> P], [J -->x]\nMainchain Block #200006:  [P --> D]\n\nIsn't the chain {{ Q --> H --> F --> J  }} now starting to reorg, with a\ncompeting chain {{ Q --> H --> P --> D  }} ?\n\n> But I suppose you are considering something like the Ethereum\n> mutability feature, which I do not think is something you would want\n> in a sidechain.\n\nWhat I do want to do, is retain the existing model to some extent.\nSpecifically, to the degree where sidechains could salvage some bad\nsituations (eg value overflow incident, or March 2013 incident).\n\n> >I think mine is also much more space-efficient. Even if ours each had\n> >exactly one h* per sidechain per block, it seems that I only require one\n> >hash to be communicated (plus an indicator byte, and a ~2 byte counter\n> >for the ratchet), whereas you require two. Since its overhead per\n> >sidechain per block, it actually might really add up.\n>\n> Do you not provide a single sidechain's h* twice in the block?  Once\n> in the coinbase and once in the briber's separate transaction?\nThat is a good point. Technically, we do include it twice, but the\nsecond instance (briber-transaction) can be \"shuffled\" out if the\ncounterparties are part of the same Lightning Network (which I expect to\nthe be the case, in equilibrium).\n\n>\n> In my scheme at least there is no indicator byte -- the \"previous\n> block\" hash is the indicator of which sidechain it is extending.  From\n> your other emails on this list, it seems the ratchet is for\n> withdrawals from sidechain to mainchain?  If so, should it not only\n> appear in only some of the sidechains (the ones which are currently\n> doing some withdrawal?)?\n\nNo, sorry. There are many tangled issues (Drivechain (total system);\nside-to-main withdrawals (OP CountACKs); individual Drivechains\nthemselves; Blind Merged Mining (OP BribeVerify)). The ratchet is not\nabout withdrawals, it is exclusively about Blind Merged Mining, and\nmaking a better OP BribeVerify that offers better guarantees to both sides.\n\nPaul"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2017-07-04T07:21:23",
                "message_text_only": "Good morning Paul, Chris, and CryptAxe,\n@Paul\n>> >Your way is actually very similar to mine. Mine _forces_ the bribe to be\n>> >in the earliest txn (the coinbase) and to only occur once. Yours doesn\"t\n>> >do anything to refund the briber, if the sidechain (but not the\n>> >mainchain) reorganizes (as it can easily do, if an older sidechain\n>> >parent is extended while the mainchain proceeds normally). This creates\n>> >additional risk.\n>>\n>> I don\"t understand this part. In my scheme, a sidechain cannot\n>> reorganize unless the mainchain reorganizes, since the consensus loop\n>> only cares about matching the current block; it ignores splits and\n>> does not consider them valid.\n>\n>If I\"ve understood you correctly, you have said that each OP Return\n>links the (ex)-latest block to a brand new block, and that whichever\n>message of this kind comes first (in the mainchain) wins and the rest\n>are discarded.\n>\n>So what if I had a sidechain represented by a jumble of capital letters,\n>discarded entries as lowercase letters.\n>\n>Mainchain Block #200001: [0 --> Q], [0 -->v], [0 -->s], [0 -->b],\n>Mainchain Block #200002: [Q --> H], [Q --> z],\n>Mainchain Block #200003: [H --> F]\n>Mainchain Block #200004: [F --> J], [F -->w]\n>Mainchain Block #200005: [H --> P], [J -->x]\n>Mainchain Block #200006: [P --> D]\n>\n>Isn\"t the chain {{ Q --> H --> F --> J }} now starting to reorg, with a\n>competing chain {{ Q --> H --> P --> D }} ?\nNo, because at block #20005, the topmost sidechain block is J, not H, and the H->P will not be considered as valid -- only the J->x is valid, even though H->P comes first.\nPlease see the pseudocode I sent before in detail and consider how it will work with your given mainchain blocks example.\n>> But I suppose you are considering something like the Ethereum\n>> mutability feature, which I do not think is something you would want\n>> in a sidechain.\n>\n>What I do want to do, is retain the existing model to some extent.\n>Specifically, to the degree where sidechains could salvage some bad\n>situations (eg value overflow incident, or March 2013 incident).\nI suppose some kinds of mutability are desirable. In my model, a sidechain reorg can be forced if the sidechain code is forked to specifically force some previously-valid block to become invalid, by developer fiat. In the example you gave, basically, if you want to reorg from Q->H->F->J to Q->H->P->D then you would fork the sidechain consensus code to declare that block F is invalid.\nI am hesitant to make mutability something that is easy to force, however.\n>> >I think mine is also much more space-efficient. Even if ours each had\n>> >exactly one h* per sidechain per block, it seems that I only require one\n>> >hash to be communicated (plus an indicator byte, and a ~2 byte counter\n>> >for the ratchet), whereas you require two. Since its overhead per\n>> >sidechain per block, it actually might really add up.\n>>\n>> Do you not provide a single sidechain\"s h* twice in the block? Once\n>> in the coinbase and once in the briber\"s separate transaction?\n>\n>That is a good point. Technically, we do include it twice, but the\n>second instance (briber-transaction) can be \"shuffled\" out if the\n>counterparties are part of the same Lightning Network (which I expect to\n>the be the case, in equilibrium).\nPayments on LN are finalized when the payee provides a preimage for a hashlock, whether by chain or by LN. Although I suppose you can use a bribelocked timelocked contract instead of a hashlocked timelocked contract. I suppose it would be almost the same, except the bribelock is provided off-chain as a proof of existence in a mainblock coinbase.\nIn addition, it may be possible to create a payment channel specifically between a sidechain operator and a mainchain miner.\n>> In my scheme at least there is no indicator byte -- the \"previous\n>> block\" hash is the indicator of which sidechain it is extending. From\n>> your other emails on this list, it seems the ratchet is for\n>> withdrawals from sidechain to mainchain? If so, should it not only\n>> appear in only some of the sidechains (the ones which are currently\n>> doing some withdrawal?)?\n>\n>No, sorry. There are many tangled issues (Drivechain (total system);\n>side-to-main withdrawals (OP CountACKs); individual Drivechains\n>themselves; Blind Merged Mining (OP BribeVerify)). The ratchet is not\n>about withdrawals, it is exclusively about Blind Merged Mining, and\n>making a better OP BribeVerify that offers better guarantees to both sides.\nCan you describe the ratchet better? I am sorry but when I first heard of \"blind\" merge mining, the first thing that came to mind was the use of OP_RETURN. This is truly blind as the mainchain miner is given what is effectively a blob of data, and the mainchain miner cannot expect any kind of format from OP_RETURN. This has the tremendous advantage of not even requiring a softfork.\n@Chris\n>What if a attacker pays a large fee to have his *invalid* block hash included in the bitcoin mainchain? Would this block *have* to be included in the sidechain's blockchain forever since *it was* included in bitcoin blockchain?\nIn my scheme, if you read carefully through the pseudocode, a block list node is valid only if its block is valid.\nBasically, in my scheme, the OP_RETURN data *is* the sidechain block headers stored on the mainchain. To save space, the sidechain block headers are reduced to only the previous-block-header commitment and the current-block-data commitment. All of the other data you would want to put in the block header (e.g. UTXO set commitment, signalling bits, time-of-day...) would be part of the current-block-data instead of the block header. Thus if the current-block-data is invalid the sidechain block header is invalid and another sidechain block header based on the previous block header will be searched for.\nMy understanding is that your attack scenario is not helped by OP_BRIBEVERIFY alone, as a rich sidechain attacker can provide a bigger bribe to an invalid h* especially since the mainchain miner will not even check the h*, just insert it into the coinbase.\n>Maybe I am missing something here, but why we do *explicitly* commit to the previous block hash? Isn't it implicitly committed to via SHA256(SHA256())?\nIn order to eliminate having to specify a sidechain index, and to remove sidechain indexes altogether. Instead the sidechain is identified by its topmost block header hash.\n@CryptAxe\n>The ratchet system is actually what links the h* data from bribes to sidechain blocks. h*'s (which are sidechain block hashes) are added to the ratchet system if they move the sidechain forward or start a split like I mentioned before. Then a sidechain can request of their local mainchain node to verify the headers they have downloaded from sidechain peers and form the side chain.\nI see. However, then, I propose that my OP_RETURN scheme is superior as the sidechain block headers are indeed visible directly on the mainchain, and the mainchain node does not even need to be \"local\", but can be sourced anywhere, without requiring a ratchet structure (whose purpose I still have not managed to grok).\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170704/0888a4be/attachment.html>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-07-04T15:06:06",
                "message_text_only": "Hi ZmnSCPxj,\n\n\nIn my scheme, if you read carefully through the pseudocode, a block list\n> node is valid only if its block is valid.\n>\n\nIt seems this is a contradiction against the \"blind\" part of blind merge\nmining. How can a bitcoin blockchain node enforce this without tracking the\nsidechain?\n\nBasically, in my scheme, the OP_RETURN data *is* the sidechain block\n> headers stored on the mainchain.  To save space, the sidechain block\n> headers are reduced to only the previous-block-header commitment and the\n> current-block-data commitment.  All of the other data you would want to put\n> in the block header (e.g. UTXO set commitment, signalling bits,\n> time-of-day...) would be part of the current-block-data instead of the\n> block header.  Thus if the current-block-data is invalid the sidechain\n> block header is invalid and another sidechain block header based on the\n> previous block header will be searched for.\n\n\nIt seems both of our schemes need to include 2 32 bit hashes in the\nblockchain. Your scheme needs a previous block header hash and the current\nblock header hash, while mine includes the current block header hash\ntwice.  We can just commit to all that information via the block header\nhash and if a sidechain node lies to us will we are doing IBD the hashes\nwon't match with what was included in the bitcoin blockchain.\n\nI'll follow your discussion with Paul about sidechain reorgs, but I think\nhis proposal is more desirable -- it follows what actually happens in the\nbitcoin mining process where we *can* have chain splits when miners\nsimultaneously find a block. Other miners will pick one of the two blocks\nto mine on top of and eventually one chain will become longer than the\nother. Therefore that chain will have it's block's orphaned and the\nminers/nodes following the dead chain will reorg on top of the longest\nchain.\n\nIn Paul's scheme, we replace PoW with a bribe. At the conceptual level\nthese are somewhat similar. In PoW a miner is willing to pay a certain\namount of money (on electricity) to try to find a bitcoin block. With\nOP_BRIBEVERIFY a sidechain miner is willing pay a certain amount of money\nto find a block.\n\nIn PoW, there is nothing at the software level that says a miner cannot\njust decide to build on a old block. I could decide to build on the genesis\nblock if I wanted to. Obviously this is a stupid idea as I'll never\novertake the bitcoin blockchain with 8 years of PoW behind it -- but it\ndoesn't mean I couldn't try if I wanted too. Your scheme from what I\nunderstand prevents this from happening -- and I don't think that is\ndesirable. You might be able to make an argument that a rich attacker can\n*stall* mining progress on the drivechain, but I think the same argument\ncan be made with a rich miner on the bitcoin blockchain as well. I think\nminers have threatened to do that if BIP148 caused a chain split.\n\nCan you link to the aforementioned pseudocode? I must have missed it on the\nmailing list.\n\n-Chris\n\nOn Tue, Jul 4, 2017 at 2:21 AM, ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning Paul, Chris, and CryptAxe,\n>\n> @Paul\n>\n> >> >Your way is actually very similar to mine. Mine _forces_ the bribe to\n> be\n> >> >in the earliest txn (the coinbase) and to only occur once. Yours\n> doesn\"t\n> >> >do anything to refund the briber, if the sidechain (but not the\n> >> >mainchain) reorganizes (as it can easily do, if an older sidechain\n> >> >parent is extended while the mainchain proceeds normally). This creates\n> >> >additional risk.\n> >>\n> >> I don\"t understand this part. In my scheme, a sidechain cannot\n> >> reorganize unless the mainchain reorganizes, since the consensus loop\n> >> only cares about matching the current block; it ignores splits and\n> >> does not consider them valid.\n> >\n> >If I\"ve understood you correctly, you have said that each OP Return\n> >links the (ex)-latest block to a brand new block, and that whichever\n> >message of this kind comes first (in the mainchain) wins and the rest\n> >are discarded.\n> >\n> >So what if I had a sidechain represented by a jumble of capital letters,\n> >discarded entries as lowercase letters.\n> >\n> >Mainchain Block #200001: [0 --> Q], [0 -->v], [0 -->s], [0 -->b],\n> >Mainchain Block #200002: [Q --> H], [Q --> z],\n> >Mainchain Block #200003: [H --> F]\n> >Mainchain Block #200004: [F --> J], [F -->w]\n> >Mainchain Block #200005: [H --> P], [J -->x]\n> >Mainchain Block #200006: [P --> D]\n> >\n> >Isn\"t the chain {{ Q --> H --> F --> J }} now starting to reorg, with a\n> >competing chain {{ Q --> H --> P --> D }} ?\n>\n> No, because at block #20005, the topmost sidechain block is J, not H, and\n> the H->P will not be considered as valid -- only the J->x is valid, even\n> though H->P comes first.\n>\n> Please see the pseudocode I sent before in detail and consider how it will\n> work with your given mainchain blocks example.\n>\n>\n> >> But I suppose you are considering something like the Ethereum\n> >> mutability feature, which I do not think is something you would want\n> >> in a sidechain.\n> >\n> >What I do want to do, is retain the existing model to some extent.\n> >Specifically, to the degree where sidechains could salvage some bad\n> >situations (eg value overflow incident, or March 2013 incident).\n>\n> I suppose some kinds of mutability are desirable.  In my model, a\n> sidechain reorg can be forced if the sidechain code is forked to\n> specifically force some previously-valid block to become invalid, by\n> developer fiat.  In the example you gave, basically, if you want to reorg\n> from Q->H->F->J to Q->H->P->D then you would fork the sidechain consensus\n> code to declare that block F is invalid.\n>\n> I am hesitant to make mutability something that is easy to force, however.\n>\n> >> >I think mine is also much more space-efficient. Even if ours each had\n> >> >exactly one h* per sidechain per block, it seems that I only require\n> one\n> >> >hash to be communicated (plus an indicator byte, and a ~2 byte counter\n> >> >for the ratchet), whereas you require two. Since its overhead per\n> >> >sidechain per block, it actually might really add up.\n> >>\n> >> Do you not provide a single sidechain\"s h* twice in the block? Once\n> >> in the coinbase and once in the briber\"s separate transaction?\n> >\n> >That is a good point. Technically, we do include it twice, but the\n> >second instance (briber-transaction) can be \"shuffled\" out if the\n> >counterparties are part of the same Lightning Network (which I expect to\n> >the be the case, in equilibrium).\n>\n> Payments on LN are finalized when the payee provides a preimage for a\n> hashlock, whether by chain or by LN.  Although I suppose you can use a\n> bribelocked timelocked contract instead of a hashlocked timelocked\n> contract.  I suppose it would be almost the same, except the bribelock is\n> provided off-chain as a proof of existence in a mainblock coinbase.\n>\n> In addition, it may be possible to create a payment channel specifically\n> between a sidechain operator and a mainchain miner.\n>\n> >> In my scheme at least there is no indicator byte -- the \"previous\n> >> block\" hash is the indicator of which sidechain it is extending. From\n> >> your other emails on this list, it seems the ratchet is for\n> >> withdrawals from sidechain to mainchain? If so, should it not only\n> >> appear in only some of the sidechains (the ones which are currently\n> >> doing some withdrawal?)?\n> >\n> >No, sorry. There are many tangled issues (Drivechain (total system);\n> >side-to-main withdrawals (OP CountACKs); individual Drivechains\n> >themselves; Blind Merged Mining (OP BribeVerify)). The ratchet is not\n> >about withdrawals, it is exclusively about Blind Merged Mining, and\n> >making a better OP BribeVerify that offers better guarantees to both\n> sides.\n>\n> Can you describe the ratchet better?  I am sorry but when I first heard of\n> \"blind\" merge mining, the first thing that came to mind was the use of\n> OP_RETURN.  This is truly blind as the mainchain miner is given what is\n> effectively a blob of data, and the mainchain miner cannot expect any kind\n> of format from OP_RETURN.  This has the tremendous advantage of not even\n> requiring a softfork.\n>\n>\n> @Chris\n>\n> >What if a attacker pays a large fee to have his *invalid* block hash\n> included in the bitcoin mainchain? Would this block *have* to be included\n> in the sidechain's blockchain forever since *it was* included in bitcoin\n> blockchain?\n>\n> In my scheme, if you read carefully through the pseudocode, a block list\n> node is valid only if its block is valid.\n>\n> Basically, in my scheme, the OP_RETURN data *is* the sidechain block\n> headers stored on the mainchain.  To save space, the sidechain block\n> headers are reduced to only the previous-block-header commitment and the\n> current-block-data commitment.  All of the other data you would want to put\n> in the block header (e.g. UTXO set commitment, signalling bits,\n> time-of-day...) would be part of the current-block-data instead of the\n> block header.  Thus if the current-block-data is invalid the sidechain\n> block header is invalid and another sidechain block header based on the\n> previous block header will be searched for.\n>\n> My understanding is that your attack scenario is not helped by\n> OP_BRIBEVERIFY alone, as a rich sidechain attacker can provide a bigger\n> bribe to an invalid h* especially since the mainchain miner will not even\n> check the h*, just insert it into the coinbase.\n>\n> >Maybe I am missing something here, but why we do *explicitly* commit to\n> the previous block hash? Isn't it implicitly committed to via\n> SHA256(SHA256())?\n>\n> In order to eliminate having to specify a sidechain index, and to remove\n> sidechain indexes altogether.  Instead the sidechain is identified by its\n> topmost block header hash.\n>\n>\n> @CryptAxe\n>\n> >The ratchet system is actually what links the h* data from bribes to\n> sidechain blocks. h*'s (which are sidechain block hashes) are added to the\n> ratchet system if they move the sidechain forward or start a split like I\n> mentioned before. Then a sidechain can request of their local mainchain\n> node to verify the headers they have downloaded from sidechain peers and\n> form the side chain.\n>\n> I see.  However, then, I propose that my OP_RETURN scheme is superior as\n> the sidechain block headers are indeed visible directly on the mainchain,\n> and the mainchain node does not even need to be \"local\", but can be sourced\n> anywhere, without requiring a ratchet structure (whose purpose I still have\n> not managed to grok).\n>\n> Regards,\n> ZmnSCPxj\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170704/204bed07/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2017-07-12T08:50:52",
                "message_text_only": ">>In my scheme, if you read carefully through the pseudocode, a block list node is valid only if its block is valid.\n>\n>It seems this is a contradiction against the \"blind\" part of blind merge mining. How can a bitcoin blockchain node enforce this without tracking the sidechain?\nFrom: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014668.html\n>>>>2. When a sidechain-node wants to know the consensus, it downloads mainchain-blocks and looks for OP_RETURN's.\n>>>>2.1. Starting with its genesis cons-pair hash (equivalent to the empty list) as the current cons-pair, it scans each OP_RETURN transaction.\n>>>>2.1.1. If an OP_RETURN is 64-byte and has the parent cons-pair equal to the current cons-pair, look for the side block indicated and confirm its correctness. If correct, update the current cons-pair for the hash of the OP_RETURN data.\n>>>>2.2. When reaching the latest mainchain block, the current cons-pair is now the sidecoin/altcoin latest block.\n>>>>2.3. Note that if multiple OP_RETURN in a block match the current cons-pair, the first one is considered the correct chain. This property means that the sidechain/altchain can only have a chainsplit if the mainchain has a chainsplit.\nIt's the sidechain node which needs to learn about the sidechain blockchain anyway. So it's the one that does the checking of this.\nFor that matter, a mainchain miner can be bribed to commit to a random number rather than a valid h* block, and it will still lead all the sidechain nodes on a random chase to look for the indicated block.\n>I'll follow your discussion with Paul about sidechain reorgs, but I think his proposal is more desirable -- it follows what actually happens in the bitcoin mining process where we *can* have chain splits when\n>miners simultaneously find a block. Other miners will pick one of the two blocks to mine on top of and eventually one chain will become longer than the other. Therefore that chain will have it's block's\n>orphaned and the miners/nodes following the dead chain will reorg on top of the longest chain.\nIn this paper: http://diyhpl.us/~bryan/papers2/bitcoin/On%20the%20instability%20of%20Bitcoin%20without%20the%20block%20reward%20-%202016.pdf\nAs far as I understood that paper, it means that if the block reward no longer exists, miners can profitably attempt to undercut any full blocks.\nSidechains do not have block rewards (unless the sidechain issues its own asset type that is separate from and not convertible to mainchain bitcoins).\nThus, to protect against undercutting attacks in the sidechain, we would need to ensure that the sidechain cannot be reorged without the mainchain (which currently still has a block reward) being reorged.\nAt least, this is my consideration. Perhaps the paper is wrong?\n---\nIn any case, let me propose actual improvements to the OP_BRIBEVERIFY proposal:\n1. Remove the necessity of coinbase commitments. The miner commits to the sidechain_id and h* in the transaction that pays the OP_BRIBEVERIFY anyway. That way the h* commitment occurs only once in the block, in the transaction that does the OP_BRIBEVERIFY. In addition, there is no need to impose particular ordering on the coinbase outputs, which would be problematic as pointed out by others, for example if the miner is interested only in merge mining for sidechain id #35 and nobody else.\n2. When verifying a block, keep a set of sidechain ID's. When processing a transaction in that block with OP_BRIBEVERIFY, check if the sidechain ID is in that set. If not in that set, add it to that set and continue script processing. If already in the set, fail the script processing. This ensures that at most one OP_BRIBEVERIFY exists for each sidechain_id in a mainchain block.\n3. Don't number sidechain_id from 0, 1, 2, 3..., because people will fight over the small numbers. Instead identify sidechains by, for example, the hash of their names or the hash of their genesis block or whatever. This allows true permissionless creation of sidechains, without some authority existing that centrally allocates sidechain ID's.\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/be07f5d9/attachment.html>"
            },
            {
                "author": "Russell O'Connor",
                "date": "2017-07-12T13:39:17",
                "message_text_only": "On Wed, Jul 12, 2017 at 4:50 AM, ZmnSCPxj via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nIn any case, let me propose actual improvements to the OP_BRIBEVERIFY\n> proposal:\n>\n> 1.  Remove the necessity of coinbase commitments.  The miner commits to\n> the sidechain_id and h* in the transaction that pays the OP_BRIBEVERIFY\n> anyway.  That way the h* commitment occurs only once in the block, in the\n> transaction that does the OP_BRIBEVERIFY.  In addition, there is no need to\n> impose particular ordering on the coinbase outputs, which would be\n> problematic as pointed out by others, for example if the miner is\n> interested only in merge mining for sidechain id #35 and nobody else.\n>\n> 2.  When verifying a block, keep a set of sidechain ID's.  When processing\n> a transaction in that block with OP_BRIBEVERIFY, check if the sidechain ID\n> is in that set.  If not in that set, add it to that set and continue script\n> processing.  If already in the set, fail the script processing.  This\n> ensures that at most one OP_BRIBEVERIFY exists for each sidechain_id in a\n> mainchain block.\n>\n\nAt this point can we eliminate the need to use the scripting system at all\nand just use a special, currently non-standard, OP_RETURN output to hold\nthe sidechain_id and h* instead?  We can soft fork in a rule that at most\none such output can appear in a block per sidechain_id.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/d3ad9afc/attachment.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-12T23:31:18",
                "message_text_only": "On 7/12/2017 4:50 AM, ZmnSCPxj wrote:\n>\n> >>In my scheme, if you read carefully through the pseudocode, a block\n> list node is valid only if its block is valid.\n> >\n> >It seems this is a contradiction against the \"blind\" part of blind\n> merge mining. How can a bitcoin blockchain node enforce this without\n> tracking the sidechain?\n>\n> From:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014668.html\n> >>>>2. When a sidechain-node wants to know the consensus, it downloads\n> mainchain-blocks and looks for OP_RETURN's.\n> >>>>2.1. Starting with its genesis cons-pair hash (equivalent to the\n> empty list) as the current cons-pair, it scans each OP_RETURN transaction.\n> >>>>2.1.1. If an OP_RETURN is 64-byte and has the parent cons-pair\n> equal to the current cons-pair, look for the side block indicated and\n> confirm its correctness. If correct, update the current cons-pair for\n> the hash of the OP_RETURN data.\n> >>>>2.2. When reaching the latest mainchain block, the current\n> cons-pair is now the sidecoin/altcoin latest block.\n> >>>>2.3. Note that if multiple OP_RETURN in a block match the current\n> cons-pair, the first one is considered the correct chain. This\n> property means that the sidechain/altchain can only have a chainsplit\n> if the mainchain has a chainsplit.\n>\n> It's the sidechain node which needs to learn about the sidechain\n> blockchain anyway.  So it's the one that does the checking of this.\n>\n> For that matter, a mainchain miner can be bribed to commit to a random\n> number rather than a valid h* block, and it will still lead all the\n> sidechain nodes on a random chase to look for the indicated block.\n\nI do agree with this description. And I am not exactly comfortable with\nit, but theoretically the random chase would serve no direct benefit to\nany attacker (and thus be a ~purposeless use of attacker's money), and\nempirically I do not recall anyone complaining about this happening in\nNamecoin. And I think it is generally agreed that low-conf transactions\nare of categorically lower reliability -- and therefore that we are\nrelatively less interested in taking care of users who want the\nblockchain to provide them with...immediate gratification (for lack of a\nbetter term).\n\n\n> >I'll follow your discussion with Paul about sidechain reorgs, but I\n> think his proposal is more desirable -- it follows what actually\n> happens in the bitcoin mining process where we *can* have chain splits\n> when\n> >miners simultaneously find a block. Other miners will pick one of the\n> two blocks to mine on top of and eventually one chain will become\n> longer than the other. Therefore that chain will have it's block's\n> >orphaned and the miners/nodes following the dead chain will reorg on\n> top of the longest chain.\n>\n> In this paper:\n> http://diyhpl.us/~bryan/papers2/bitcoin/On%20the%20instability%20of%20Bitcoin%20without%20the%20block%20reward%20-%202016.pdf\n> <http://diyhpl.us/%7Ebryan/papers2/bitcoin/On%20the%20instability%20of%20Bitcoin%20without%20the%20block%20reward%20-%202016.pdf>\n>\n> As far as I understood that paper, it means that if the block reward\n> no longer exists, miners can profitably attempt to undercut any full\n> blocks.\n>\n> Sidechains do not have block rewards (unless the sidechain issues its\n> own asset type that is separate from and not convertible to mainchain\n> bitcoins).\n>\n> Thus, to protect against undercutting attacks in the sidechain, we\n> would need to ensure that the sidechain cannot be reorged without the\n> mainchain (which currently still has a block reward) being reorged.\n>\n> At least, this is my consideration.  Perhaps the paper is wrong?\n\nYes, it is a valid concern. I'm glad you brought this up. My view is\nthat there will be no undercutting attempts in the future, if Bitcoin is\npopular enough and transactions are constantly arriving.\n\nIn short, the reason I feel that way is because miners will be both [1]\nwilling and [2] able, to maximize their fee income by imposing a\nblocksize limit on themselves. They would do this by orphaning\nnon-compliants -- this would be something softfork-esque, but not\nnecessarily enforced by non-mining nodes as it is limited to miner\ntx-acceptance policy.\n\nHere is a link to a presentation of my thoughts on the issue:\nhttps://www.youtube.com/watch?v=YErLEuOi3xU&list=PLw8-6ARlyVciNjgS_NFhAu-qt7HPf_dtg&index=4\n\nAs I say there, I believe that miners currently have no significant\nreason to fee-maximize today, which is why we haven't seen this\nbehavior. (Also, someone would need to write the fee-maximization code\nfor this, and that not only would take time, but it would require a\nperson with a very complex intersection of skills.)\n\nThe paper you mention was written 1.5 months after my presentation was\nrecorded. My conclusion contradicts the first sentence of the last\nparagraph of \"3.1 Model of the system\" which reads: \"We also assume that\nminers always have space to include all available transactions.\" In my\nmodel miners do NOT always (or, really, ever) have space to include all\navailable transactions. And miners are happy that they do not, because\nall of them make more total money as a result (both per block and overall).\n\nI think the arguments of the presentation were original, so I would be\ngrateful to you if you offered me your thoughts on it.\n\n\n> In any case, let me propose actual improvements to the OP_BRIBEVERIFY\n> proposal:\n>\n> 1.  Remove the necessity of coinbase commitments.  The miner commits\n> to the sidechain_id and h* in the transaction that pays the\n> OP_BRIBEVERIFY anyway.  That way the h* commitment occurs only once in\n> the block, in the transaction that does the OP_BRIBEVERIFY.  In\n> addition, there is no need to impose particular ordering on the\n> coinbase outputs, which would be problematic as pointed out by others,\n> for example if the miner is interested only in merge mining for\n> sidechain id #35 and nobody else.\n\nI don't understand the word \"anyway\" in the second sentence. Is that a\nsummary of my proposal, or an assertion of yours. Because as it stands,\nthe bribe part is quite optional -- miners could just mine both chains\nthemselves, and then they would know which h* to include, paying\nthemselves the sidechain's tx fees. (Of course, under what you propose\nhere, miners could also mine it themselves, by placing it in an\nOP_BRIBEVERIFY). However, if it is limited to a coinbase, then there is\nat most only 1 hash to process every 10 minutes, which I think is desirable.\n\nI like your idea as it is simpler. But a second concern I have is that\nif a sidechain user wants to use SPV mode, the software will want to\nknow exactly where to find the sidechain headers. If they are always in\na known part of the coinbase, then the spv sidechain wallet knows where\nto look.\n\nRe: impose ordering on coinbase outputs, what do you think of a scheme\nwhich searches index 1 for an OP RETURN, and if it finds something it\ninterprets that as the root hash of merkle tree of merged mined\nsidechain h*'s ? If it doesn't find a hash commitment in index 1 it just\nassumes that no sidechains were mined in this ~10 minute period.\n\n> 2.  When verifying a block, keep a set of sidechain ID's.  When\n> processing a transaction in that block with OP_BRIBEVERIFY, check if\n> the sidechain ID is in that set.  If not in that set, add it to that\n> set and continue script processing.  If already in the set, fail the\n> script processing.  This ensures that at most one OP_BRIBEVERIFY\n> exists for each sidechain_id in a mainchain block.\n>\n> 3.  Don't number sidechain_id from 0, 1, 2, 3..., because people will\n> fight over the small numbers.  Instead identify sidechains by, for\n> example, the hash of their names or the hash of their genesis block or\n> whatever.  This allows true permissionless creation of sidechains,\n> without some authority existing that centrally allocates sidechain ID's.\n\nI am actually not in favor of permiessionless creation of sidechains,\nbecause the sidechains can interfere with each other to a degree that\nimpacts their usefulness. We do not allow \"permissionless creation of\ntransactions\", because we do not allow invalid or double-spent\ntransactions. I feel the same logic should apply to the chains themselves.\n\nAnother youtube presenation about this:\nhttps://www.youtube.com/watch?v=xGu0o8HH10U&list=PLw8-6ARlyVciMH79ZyLOpImsMug3LgNc4&index=1\n(Much shorter) written post: http://www.truthcoin.info/blog/wise-contracts/\n\nThat said, I am fully in favor of forcing the sidechain's permanent\ndeposit address to be equal to some deterministic function of the sha256\nhash of its version 0.1 release.\n\nPaul"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-07-12T18:02:30",
                "message_text_only": "Hi Russell/ZmnSCPxj,\n\nI think you guys are right. The only problem I can see with it is\nreplaceability of the bribe transaction. If the 'Bribe' is the fee on the\ntransaction it isn't clear to me what the best way to replace/remove it is.\n\nIf we have the amount in the output (instead of the fee) we can construct a\ncontract like this\n\nOP_IF <id> <hash> OP_BV OP_ELSE OP_DUP OP_HASH160 <pubkey hash>\nOP_EQUALVERIFY OP_CHECKSIG OP_ENDIF\n\nThat way, if the miner does *not* include your bribe, he is *still*\nincentived to include your redemption.\n\nIf we decide to only an OP_RETURN output, we can replace the 'bribe'\ntransaction with a transaction that double spends the prevout. Thus if your\n'bribe' transaction is not included in a block, a miner can still include\nyour double spend transaction to refund yourself (and a miner gets to\ncollect his normal mining fee).\n\nI'm not 100% sure if there are mempool policies that would reject this\ndouble spend tx or not -- but I guess this is an implementation detail not\na high level design one.\n\nAlso if there is not a commitment in the coinbase transaction it may be\nharder to search for drivechain commitments. I've been floating around the\nidea of a 'drivechain commitment tx' so we could easily see where all of\nthe voting is happening for withdrawal transactions -- but that is very\nmuch up in the air.\n\nOn Wed, Jul 12, 2017 at 1:00 PM, Chris Stewart <stewart.chris1234 at gmail.com>\nwrote:\n\n> Hi Russell/ZmnSCPxj,\n>\n> I think you guys are right. The only problem I can see with it is\n> replaceability of the bribe transaction. If the 'Bribe' is the fee on the\n> transaction it isn't clear to me what the best way to replace/remove it is.\n>\n> If we have the amount in the output (instead of the fee) we can construct\n> a contract like this\n>\n> OP_IF <id> <hash> OP_BV OP_ELSE OP_DUP OP_HASH160 <pubkey hash>\n> OP_EQUALVERIFY OP_CHECKSIG OP_ENDIF\n>\n> That way, if the miner does *not* include your bribe, he is *still*\n> incentived to include your redemption.\n>\n> If we decide to only an OP_RETURN output, we can replace the 'bribe'\n> transaction with a transaction that double spends the prevout. Thus if your\n> 'bribe' transaction is not included in a block, a miner can still include\n> your double spend transaction to refund yourself (and a miner gets to\n> collect his normal mining fee).\n>\n> I'm not 100% sure if there are mempool policies that would reject this\n> double spend tx or not -- but I guess this is an implementation detail not\n> a high level design one.\n>\n> Also if there is not a commitment in the coinbase transaction it may be\n> harder to search for drivechain commitments. I've been floating around the\n> idea of a 'drivechain commitment tx' so we could easily see where all of\n> the voting is happening for withdrawal transactions -- but that is very\n> much up in the air.\n>\n> -Chris\n>\n> On Wed, Jul 12, 2017 at 8:39 AM, Russell O'Connor via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>>\n>> On Wed, Jul 12, 2017 at 4:50 AM, ZmnSCPxj via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> In any case, let me propose actual improvements to the OP_BRIBEVERIFY\n>>> proposal:\n>>>\n>>> 1.  Remove the necessity of coinbase commitments.  The miner commits to\n>>> the sidechain_id and h* in the transaction that pays the OP_BRIBEVERIFY\n>>> anyway.  That way the h* commitment occurs only once in the block, in the\n>>> transaction that does the OP_BRIBEVERIFY.  In addition, there is no need to\n>>> impose particular ordering on the coinbase outputs, which would be\n>>> problematic as pointed out by others, for example if the miner is\n>>> interested only in merge mining for sidechain id #35 and nobody else.\n>>>\n>>> 2.  When verifying a block, keep a set of sidechain ID's.  When\n>>> processing a transaction in that block with OP_BRIBEVERIFY, check if the\n>>> sidechain ID is in that set.  If not in that set, add it to that set and\n>>> continue script processing.  If already in the set, fail the script\n>>> processing.  This ensures that at most one OP_BRIBEVERIFY exists for each\n>>> sidechain_id in a mainchain block.\n>>>\n>>\n>> At this point can we eliminate the need to use the scripting system at\n>> all and just use a special, currently non-standard, OP_RETURN output to\n>> hold the sidechain_id and h* instead?  We can soft fork in a rule that at\n>> most one such output can appear in a block per sidechain_id.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/92171a60/attachment.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-13T00:00:29",
                "message_text_only": "I still think it may be more inefficient, in equilibrium. (In other\nwords, in the future steady state of Bitcoin that includes LN or\nsomething LN-like).\n\nAssume there are N sidechains.\n\nIn the coinbase version:\n1. There is some single event, per N, that causes nodes to notice that a\nnew sidechain has been created.\n2. Per block, there are N hash commitments (32 bytes) and N instances of\nthe ratchet's block counter (2 bytes).\n3. Per block, some node operator _may_ have BMMed the block, and a miner\ntherefore might want redeem an OP Bribe that pays BTC from a sidechain\nnode operator to the miner. But they are likely to negotiate the payment\nthrough the Lightning Network (when this is possible).\n4. Sidechains running in SPV mode know exactly where to find the\ninformation they need in order to discover the \"longest\" chain.\n\nIn the OP RETURN version:\n1. [same] There is some single event, per N, that causes nodes to notice\nthat a new sidechain has been created.\n2. [+30 bytes (+more?)] Per block, there are N hash commitments (32\nbytes) and also N prevBlockHashes (32 bytes). Also, to make this\ntransaction, someone needs to spend something in the UTXO set (or select\nno inputs in a kind of 'hollow transaction'), whereas one coinbase will\nalways exist per block.\n3. [same] No need for a new transaction.\n4. [same?] Due to Rusty's soft fork rule of only one h* per sidechain\nper block, sidechains need just a merkle tree path, but they don't\nnecessarily know where it is. They must store extra [?] data to help\nthem find the data's location?\n\n\nOn 7/12/2017 2:02 PM, Chris Stewart via bitcoin-dev wrote:\n> Hi Russell/ZmnSCPxj,\n>\n> I think you guys are right. The only problem I can see with it is\n> replaceability of the bribe transaction. If the 'Bribe' is the fee on\n> the transaction it isn't clear to me what the best way to\n> replace/remove it is.\n\nI think that that is the purpose of Rusty's soft fork rule about only\nincluding one per sidechain -- miners would have one \"slot\" per\nsidechain, and they would therefore have an incentive to make the slot\ncount, and would be only selecting the highest fee txn to fill each slot.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/589abaa0/attachment.html>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-07-13T20:22:02",
                "message_text_only": "I'm interested in hearing a reply from Russell/ZmnSCPxj in what they think\nabout lightning bribes. I hadn't given much thought about those while\nwriting my original BIP, but it does seem like my original BIP (minus the\nfixed indexes in the coinbase output) fits this pretty well. If I\nunderstand Paul correctly the OP_BV output will never hit the blockchain\nthen -- only the commitment in the coinbase transaction. This means no\nextra data (if use lightning) has to be added to the blockchain *except*\nthe drivechain commitment (34 bytes in the coinbase tx vout). If this is\nused for the vast majority bribes it may make the op code worth it.\n\nIn general though, I'm still unclear of what purpose the 'Ratchet' serves.\nCan you either link to documentation about it or write something up quick?\n\n-Chris\n\nOn Wed, Jul 12, 2017 at 7:00 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n\n> I still think it may be more inefficient, in equilibrium. (In other words,\n> in the future steady state of Bitcoin that includes LN or something\n> LN-like).\n>\n> Assume there are N sidechains.\n>\n> In the coinbase version:\n> 1. There is some single event, per N, that causes nodes to notice that a\n> new sidechain has been created.\n> 2. Per block, there are N hash commitments (32 bytes) and N instances of\n> the ratchet's block counter (2 bytes).\n> 3. Per block, some node operator _may_ have BMMed the block, and a miner\n> therefore might want redeem an OP Bribe that pays BTC from a sidechain node\n> operator to the miner. But they are likely to negotiate the payment through\n> the Lightning Network (when this is possible).\n> 4. Sidechains running in SPV mode know exactly where to find the\n> information they need in order to discover the \"longest\" chain.\n>\n> In the OP RETURN version:\n> 1. [same] There is some single event, per N, that causes nodes to notice\n> that a new sidechain has been created.\n> 2. [+30 bytes (+more?)] Per block, there are N hash commitments (32 bytes)\n> and also N prevBlockHashes (32 bytes). Also, to make this transaction,\n> someone needs to spend something in the UTXO set (or select no inputs in a\n> kind of 'hollow transaction'), whereas one coinbase will always exist per\n> block.\n> 3. [same] No need for a new transaction.\n> 4. [same?] Due to Rusty's soft fork rule of only one h* per sidechain per\n> block, sidechains need just a merkle tree path, but they don't necessarily\n> know where it is. They must store extra [?] data to help them find the\n> data's location?\n>\n>\n> On 7/12/2017 2:02 PM, Chris Stewart via bitcoin-dev wrote:\n>\n> Hi Russell/ZmnSCPxj,\n>\n> I think you guys are right. The only problem I can see with it is\n> replaceability of the bribe transaction. If the 'Bribe' is the fee on the\n> transaction it isn't clear to me what the best way to replace/remove it is.\n>\n>\n> I think that that is the purpose of Rusty's soft fork rule about only\n> including one per sidechain -- miners would have one \"slot\" per sidechain,\n> and they would therefore have an incentive to make the slot count, and\n> would be only selecting the highest fee txn to fill each slot.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/7914e30b/attachment.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-13T20:45:13",
                "message_text_only": "On 7/13/2017 4:22 PM, Chris Stewart wrote:\n> In general though, I'm still unclear of what purpose the 'Ratchet'\n> serves. Can you either link to documentation about it or write\n> something up quick?\n>\n> -Chris\n\nIn Bitcoin, new coins are held for 100 blocks. One result of this is\nthat the coins can't be spent until there is at least 100 blocks worth\nof evidence that they actually are in the longest chain, and are\nunlikely to be orphaned.\n\nIn BMM, we are concerned about exactly this. For example, imagine that I\nbribe you $20 to find my side:block (and, in that block I earn $20.50\nworth of side:BTC tx fees), which you do. But then, moments later, you\n(or some other miner) orphans the block! So I don't get my $20.50, but\nyou still keep my $20!\n\nAnd yet, we want the mainchain to validate as little as possible about\neach sidechain. We want a \"light touch\". So we force the h* to be\naccompanied by the modulus of its sidechain block number (we call it\n\"BlockMod\"). The sidechain has a new rule that requires h* to be\nincluded AND that the BlockMod be accurate, in order for the sidechain\nblock to meet the \"synthetic\" difficulty requirement. The mainchain has\na new rule forcing each new BlockMod to be in range [-X000,+1] relative\nto the old BlockMod (ie, \"no skipping ahead, but you can reorg by\nstarting a new chain from up to a=-X000 blocks ago\" ... likely values of\nX might be 2 or 4). And finally, BMM has a new rule that the bribe isn't\npaid unless the sidechain block in question has been buried by [for\nexample] 100 sidechain blocks.\n\nHope that helps,\nPaul"
            },
            {
                "author": "CryptAxe",
                "date": "2017-07-12T23:58:07",
                "message_text_only": "In case anyone wants to do this, I added the CSidechainAddress class to the\nmainchainBMM branch of the Drivechain project a long time ago. The only\npurpose it serves right now is to show that sidechain deposit addresses can\nstart with a '4'. We could simply add the sha256 hash described by Paul to\na script with OP_RETURN at the front and make that the standard.\n\nOn Jul 12, 2017 4:47 PM, \"Paul Sztorc via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nOn 7/12/2017 4:50 AM, ZmnSCPxj wrote:\n\n...\n\n\nThat said, I am fully in favor of forcing the sidechain's permanent\ndeposit address to be equal to some deterministic function of the sha256\nhash of its version 0.1 release.\n\nPaul\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/908a011a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP: OP_BRIBVERIFY - the op code needed for Blind Merge Mined drivechains",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Stewart",
                "CryptAxe",
                "ZmnSCPxj",
                "Russell O'Connor",
                "Paul Sztorc"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 48892
        }
    },
    {
        "title": "[bitcoin-dev] Height based vs block time based thresholds",
        "thread_messages": [
            {
                "author": "shaolinfry",
                "date": "2017-07-05T01:30:26",
                "message_text_only": "Some people have criticized BIP9's blocktime based thresholds arguing they are confusing (the first retarget after threshold). It is also vulnerable to miners fiddling with timestamps in a way that could prevent or delay activation - for example by only advancing the block timestamp by 1 second you would never meet the threshold (although this would come a the penalty of hiking the difficulty dramatically).\nOn the other hand, the exact date of a height based thresholds is hard to predict a long time in advance due to difficulty fluctuations. However, there is certainty at a given block height and it's easy to monitor.\nIf there is sufficient interest, I would be happy to amend BIP8 to be height based. I originally omitted height based thresholds in the interests of simplicity of review - but now that the proposal has been widely reviewed it would be a trivial amendment.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170704/5ed65add/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2017-07-05T02:25:33",
                "message_text_only": "On Tue, Jul 04, 2017 at 09:30:26PM -0400, shaolinfry via bitcoin-dev wrote:\n> Some people have criticized BIP9's blocktime based thresholds arguing they are confusing (the first retarget after threshold). It is also vulnerable to miners fiddling with timestamps in a way that could prevent or delay activation - for example by only advancing the block timestamp by 1 second you would never meet the threshold (although this would come a the penalty of hiking the difficulty dramatically).\n\nIf there are miners that start doing 1 second timestamp advances, it would be\nsimpler (and probably safer) to require a minimum block time spacing of say\n30 seconds or 1 minute, and orphan blocks that are too close in time and more\nthan say an hour behind real-time.\n\nI cannot picture any realistic scenario in which an attempt to block activation\nin this way is in anything other than a very expensive temper tantrum for any\nminers foolish enough to attempt it.\n\nIt *might* be a delay tactic as a 'nuclear option' attack vector for a mining\ncabal to run up the difficulty so high as to make it impractical to mine any\nnew blocks after the adjustment, but there are plenty of altcoins that have\nhardforked and gotten along just fine after the same kind of thing due to\nprofit-switching pools.\n\n\n> On the other hand, the exact date of a height based thresholds is hard to predict a long time in advance due to difficulty fluctuations. However, there is certainty at a given block height and it's easy to monitor.\n> If there is sufficient interest, I would be happy to amend BIP8 to be height based. I originally omitted height based thresholds in the interests of simplicity of review - but now that the proposal has been widely reviewed it would be a trivial amendment.\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Bram Cohen",
                "date": "2017-07-05T03:39:09",
                "message_text_only": "On Tue, Jul 4, 2017 at 6:30 PM, shaolinfry via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Some people have criticized BIP9's blocktime based thresholds arguing they\n> are confusing (the first retarget after threshold). It is also vulnerable\n> to miners fiddling with timestamps in a way that could prevent or delay\n> activation - for example by only advancing the block timestamp by 1 second\n> you would never meet the threshold (although this would come a the penalty\n> of hiking the difficulty dramatically).\n>\n> On the other hand, the exact date of a height based thresholds is hard to\n> predict a long time in advance due to difficulty fluctuations. However,\n> there is certainty at a given block height and it's easy to monitor.\n>\n\nYou could get most of the best of both with a combination of the two: Have\nthe activation be a timestamp plus a certain number of blocks to come after\nmaybe about 100, which is more than enough to make sure all the games which\ncan be played with timestamps have passed but a small enough amount that it\ndoesn't add much uncertainty to wall clock time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170704/029eec8d/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-07-05T03:50:51",
                "message_text_only": "I've already opened a PR almost 2 weeks ago to do this and fix the other \nissues BIP 9 has. https://github.com/bitcoin/bips/pull/550\n\nIt just needs your ACK to merge.\n\n\nOn Wednesday 05 July 2017 1:30:26 AM shaolinfry via bitcoin-dev wrote:\n> Some people have criticized BIP9's blocktime based thresholds arguing they\n> are confusing (the first retarget after threshold). It is also vulnerable\n> to miners fiddling with timestamps in a way that could prevent or delay\n> activation - for example by only advancing the block timestamp by 1 second\n> you would never meet the threshold (although this would come a the penalty\n> of hiking the difficulty dramatically). On the other hand, the exact date\n> of a height based thresholds is hard to predict a long time in advance due\n> to difficulty fluctuations. However, there is certainty at a given block\n> height and it's easy to monitor. If there is sufficient interest, I would\n> be happy to amend BIP8 to be height based. I originally omitted height\n> based thresholds in the interests of simplicity of review - but now that\n> the proposal has been widely reviewed it would be a trivial amendment."
            },
            {
                "author": "shaolinfry",
                "date": "2017-07-05T04:00:38",
                "message_text_only": "Luke,\nI previously explored an extra state to require signalling before activation in an earlier draft of BIP8, but the overall impression I got was that gratuitous orphaning was undesirable, so I dropped it. I understand the motivation behind it (to ensure miners are upgraded), but it's also rather pointless when miners can just fake signal. A properly constructed soft fork is generally such that miners have to deliberately do something invalid - they cannot be tricked into it... and miners can always chose to do something invalid anyway.\n\n> -------- Original Message --------\n> From: luke at dashjr.org\n> To: bitcoin-dev at lists.linuxfoundation.org, shaolinfry <shaolinfry at protonmail.ch>\n> I\"ve already opened a PR almost 2 weeks ago to do this and fix the other\n> issues BIP 9 has. https://github.com/bitcoin/bips/pull/550\n> It just needs your ACK to merge.\n> On Wednesday 05 July 2017 1:30:26 AM shaolinfry via bitcoin-dev wrote:\n>> Some people have criticized BIP9\"s blocktime based thresholds arguing they\n>> are confusing (the first retarget after threshold). It is also vulnerable\n>> to miners fiddling with timestamps in a way that could prevent or delay\n>> activation - for example by only advancing the block timestamp by 1 second\n>> you would never meet the threshold (although this would come a the penalty\n>> of hiking the difficulty dramatically). On the other hand, the exact date\n>> of a height based thresholds is hard to predict a long time in advance due\n>> to difficulty fluctuations. However, there is certainty at a given block\n>> height and it\"s easy to monitor. If there is sufficient interest, I would\n>> be happy to amend BIP8 to be height based. I originally omitted height\n>> based thresholds in the interests of simplicity of review - but now that\n>> the proposal has been widely reviewed it would be a trivial amendment.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170705/06457a6c/attachment-0001.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-05T08:06:33",
                "message_text_only": "On Wed, Jul 5, 2017 at 3:50 AM, Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I've already opened a PR almost 2 weeks ago to do this and fix the other\n> issues BIP 9 has. https://github.com/bitcoin/bips/pull/550\n>\n> It just needs your ACK to merge.\n\nThese proposals for gratuitous orphaning are reckless and coersive.\nWe have a professional obligation to first do no harm, and amplifying\norphaning which can otherwise easily be avoided violates it.\n\nIt is not anyones position to decide who does and doesn't need to be\n\"woken up\" with avoidable finical harm, nor is it any of our right to\ndo so at the risk of monetary losses by any and all users users from\nthe resulting network instability.\n\nIt's one thing to argue that some disruption is strictly needed for\nthe sake of advancement, it's another to see yourself fit as judge,\njury, and executioner to any that does not jump at your command.\n(which is exactly the tone I and at least some others extract from\nyour advocacy of these changes and similar activity around BIP148).\n\nI for one oppose those changes strongly.\n\n> Not having a mandatory signal turned out to be a serious bug in BIP 9,\n\nI have seen no evidence or case for this."
            },
            {
                "author": "Kekcoin",
                "date": "2017-07-05T08:54:40",
                "message_text_only": "Luke's proposed changes to BIP8 (specifically, the FAILING state) seem designed to address the regression compared to BIP9 that there is no way to avoid activating a softfork that is shown to be suboptimal or flawed in some (serious enough) way - after deployment is well underway - without hardforking.\nI agree with your principle but we should also look at the circumstances in which this mechanism would be beneficial vs. when it would cause harm (compared to BIP8 without this mechanism). The scenario this was designed for is \"miners refusing to activate, on non-technical grounds, a widely desired upgrade\" - in which case the \"wakeup call\" would be in users' hands, not anyone in particular.\nIs there a hypothetical scenario in which the orphan risk outweighs the benefits of having this kind of upgrade mechanism that can (at deploy-time) be chosen to be optional by default with a deferred mechanism to make it mandatory? If so, is there any thought on how to realize the latter without the former?\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n> -------- Original Message --------\n> Subject: Re: [bitcoin-dev] Height based vs block time based thresholds\n> Local Time: July 5, 2017 8:06 AM\n> UTC Time: July 5, 2017 8:06 AM\n> From: bitcoin-dev at lists.linuxfoundation.org\n> To: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\n> On Wed, Jul 5, 2017 at 3:50 AM, Luke Dashjr via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> I\"ve already opened a PR almost 2 weeks ago to do this and fix the other\n>> issues BIP 9 has. https://github.com/bitcoin/bips/pull/550\n>>\n>> It just needs your ACK to merge.\n> These proposals for gratuitous orphaning are reckless and coersive.\n> We have a professional obligation to first do no harm, and amplifying\n> orphaning which can otherwise easily be avoided violates it.\n> It is not anyones position to decide who does and doesn\"t need to be\n> \"woken up\" with avoidable finical harm, nor is it any of our right to\n> do so at the risk of monetary losses by any and all users users from\n> the resulting network instability.\n> It\"s one thing to argue that some disruption is strictly needed for\n> the sake of advancement, it\"s another to see yourself fit as judge,\n> jury, and executioner to any that does not jump at your command.\n> (which is exactly the tone I and at least some others extract from\n> your advocacy of these changes and similar activity around BIP148).\n> I for one oppose those changes strongly.\n>> Not having a mandatory signal turned out to be a serious bug in BIP 9,\n> I have seen no evidence or case for this.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170705/afa1c3a5/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-07-06T20:43:28",
                "message_text_only": "On Wednesday 05 July 2017 8:06:33 AM Gregory Maxwell via bitcoin-dev wrote:\n> These proposals for gratuitous orphaning are reckless and coersive.\n> We have a professional obligation to first do no harm, and amplifying\n> orphaning which can otherwise easily be avoided violates it.\n\nNothing is \"orphaned\" unless miners are acting negligently or maliciously. \nIncentivising honest behaviour from miners is inherently part of Bitcoin's \ndesign, and these changes are necessary for both that and keeping the network \nsecure. This doesn't do harm; it reduces risk of harm.\n\n> It's one thing to argue that some disruption is strictly needed for\n> the sake of advancement, it's another to see yourself fit as judge,\n> jury, and executioner to any that does not jump at your command.\n> (which is exactly the tone I and at least some others extract from\n> your advocacy of these changes and similar activity around BIP148).\n\nI don't appreciate the uncalled-for character assassination, and it doesn't \nbelong on this mailing list.\n\n> I for one oppose those changes strongly.\n> \n> > Not having a mandatory signal turned out to be a serious bug in BIP 9,\n> \n> I have seen no evidence or case for this.\n\nSince you apparently have a drastically different opinion on this subject, I \nthink it may be best to wait until after BIP148 to continue the discussion \n(thereby having more real-world information to work from).\n\nTherefore, I have opened a new pull request with just the parts you seem to be \nobjecting to removed. Please let us know if this version is satisfactory.\n\n    https://github.com/bitcoin/bips/pull/551\n\nLuke"
            },
            {
                "author": "shaolinfry",
                "date": "2017-07-07T05:52:13",
                "message_text_only": "I have written a height based reference implementation as well as updated the BIP text in the following proposals\n\n\"lockinontimeout\" was just an implementation detail to allow BIP8 the BIP9 implementation code. With the change to height based, we can dispense with it entirely.\nSo the two changes BIP8 brings is BIP9 modified to use height not time, and remove the veto failed state.\nCode: https://github.com/bitcoin/bitcoin/compare/master...shaolinfry:bip8-height\nBIP: https://github.com/bitcoin/bips/compare/master...shaolinfry:bip8-height\n\n> -------- Original Message --------\n> Subject: [bitcoin-dev] Height based vs block time based thresholds\n> Some people have criticized BIP9's blocktime based thresholds arguing they are confusing (the first retarget after threshold). It is also vulnerable to miners fiddling with timestamps in a way that could prevent or delay activation - for example by only advancing the block timestamp by 1 second you would never meet the threshold (although this would come a the penalty of hiking the difficulty dramatically).\n> On the other hand, the exact date of a height based thresholds is hard to predict a long time in advance due to difficulty fluctuations. However, there is certainty at a given block height and it's easy to monitor.\n> If there is sufficient interest, I would be happy to amend BIP8 to be height based. I originally omitted height based thresholds in the interests of simplicity of review - but now that the proposal has been widely reviewed it would be a trivial amendment.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170707/0ab0e517/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-07-07T09:51:16",
                "message_text_only": "What if you want height based but lockinontimeout = false ?\n\nOn 7 Jul 2017 8:09 am, \"shaolinfry via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I have written a height based reference implementation as well as updated\n> the BIP text in the following proposals\n>\n> \"lockinontimeout\" was just an implementation detail to allow BIP8 the BIP9\n> implementation code. With the change to height based, we can dispense with\n> it entirely.\n>\n> So the two changes BIP8 brings is BIP9 modified to use height not time,\n> and remove the veto failed state.\n>\n> Code: https://github.com/bitcoin/bitcoin/compare/master...shaolinfry:bip8-\n> height\n> BIP: https://github.com/bitcoin/bips/compare/master...\n> shaolinfry:bip8-height\n>\n>\n> -------- Original Message --------\n> Subject: [bitcoin-dev] Height based vs block time based thresholds\n>\n> Some people have criticized BIP9's blocktime based thresholds arguing they\n> are confusing (the first retarget after threshold). It is also vulnerable\n> to miners fiddling with timestamps in a way that could prevent or delay\n> activation - for example by only advancing the block timestamp by 1 second\n> you would never meet the threshold (although this would come a the penalty\n> of hiking the difficulty dramatically).\n>\n> On the other hand, the exact date of a height based thresholds is hard to\n> predict a long time in advance due to difficulty fluctuations. However,\n> there is certainty at a given block height and it's easy to monitor.\n>\n> If there is sufficient interest, I would be happy to amend BIP8 to be\n> height based. I originally omitted height based thresholds in the interests\n> of simplicity of review - but now that the proposal has been widely\n> reviewed it would be a trivial amendment.\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170707/2b04553e/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-07-05T04:10:43",
                "message_text_only": "It's not pointless: it's a wake-up call for miners asleep \"at the wheel\", to \nensure they upgrade in time. Not having a mandatory signal turned out to be a \nserious bug in BIP 9, and one which is fixed in BIP 148 (and remains a problem \nfor BIP 149 as-is). Additionally, it makes the activation decisive and \nunambiguous: once the lock-in period is complete, there remains no question as \nto what the correct protocol rules are.\n\nIt also enables deploying softforks as a MASF, and only upgrading them to UASF \non an as-needed basis.\n\nLuke\n\n\nOn Wednesday 05 July 2017 4:00:38 AM shaolinfry wrote:\n> Luke,\n> I previously explored an extra state to require signalling before\n> activation in an earlier draft of BIP8, but the overall impression I got\n> was that gratuitous orphaning was undesirable, so I dropped it. I\n> understand the motivation behind it (to ensure miners are upgraded), but\n> it's also rather pointless when miners can just fake signal. A properly\n> constructed soft fork is generally such that miners have to deliberately\n> do something invalid - they cannot be tricked into it... and miners can\n> always chose to do something invalid anyway.\n> \n> > -------- Original Message --------\n> > From: luke at dashjr.org\n> > To: bitcoin-dev at lists.linuxfoundation.org, shaolinfry\n> > <shaolinfry at protonmail.ch> I\"ve already opened a PR almost 2 weeks ago\n> > to do this and fix the other issues BIP 9 has.\n> > https://github.com/bitcoin/bips/pull/550\n> > It just needs your ACK to merge.\n> > \n> > On Wednesday 05 July 2017 1:30:26 AM shaolinfry via bitcoin-dev wrote:\n> >> Some people have criticized BIP9\"s blocktime based thresholds arguing\n> >> they are confusing (the first retarget after threshold). It is also\n> >> vulnerable to miners fiddling with timestamps in a way that could\n> >> prevent or delay activation - for example by only advancing the block\n> >> timestamp by 1 second you would never meet the threshold (although this\n> >> would come a the penalty of hiking the difficulty dramatically). On the\n> >> other hand, the exact date of a height based thresholds is hard to\n> >> predict a long time in advance due to difficulty fluctuations. However,\n> >> there is certainty at a given block height and it\"s easy to monitor. If\n> >> there is sufficient interest, I would be happy to amend BIP8 to be\n> >> height based. I originally omitted height based thresholds in the\n> >> interests of simplicity of review - but now that the proposal has been\n> >> widely reviewed it would be a trivial amendment."
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-07-05T19:44:27",
                "message_text_only": ">From the PR change:\n\n> Miners must continue setting the bit in LOCKED_IN phase so uptake is\nvisible and acknowledged. Blocks without the applicable bit set are invalid\nduring this period\n\nLuke, it seems like the amendments to BIP8 make it drastically different to\nhow it first was designed to work.\nIt now looks more akin to BIP148, which was AFAICT not how BIP8 was\noriginally intended to work.\nPerhaps this should be made into its own BIP instead, or make it so it's\npossible to decide how the LOCKED_IN state should work when designing the\nsoftfork.\n\nHampus\n\n2017-07-05 6:10 GMT+02:00 Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> It's not pointless: it's a wake-up call for miners asleep \"at the wheel\",\n> to\n> ensure they upgrade in time. Not having a mandatory signal turned out to\n> be a\n> serious bug in BIP 9, and one which is fixed in BIP 148 (and remains a\n> problem\n> for BIP 149 as-is). Additionally, it makes the activation decisive and\n> unambiguous: once the lock-in period is complete, there remains no\n> question as\n> to what the correct protocol rules are.\n>\n> It also enables deploying softforks as a MASF, and only upgrading them to\n> UASF\n> on an as-needed basis.\n>\n> Luke\n>\n>\n> On Wednesday 05 July 2017 4:00:38 AM shaolinfry wrote:\n> > Luke,\n> > I previously explored an extra state to require signalling before\n> > activation in an earlier draft of BIP8, but the overall impression I got\n> > was that gratuitous orphaning was undesirable, so I dropped it. I\n> > understand the motivation behind it (to ensure miners are upgraded), but\n> > it's also rather pointless when miners can just fake signal. A properly\n> > constructed soft fork is generally such that miners have to deliberately\n> > do something invalid - they cannot be tricked into it... and miners can\n> > always chose to do something invalid anyway.\n> >\n> > > -------- Original Message --------\n> > > From: luke at dashjr.org\n> > > To: bitcoin-dev at lists.linuxfoundation.org, shaolinfry\n> > > <shaolinfry at protonmail.ch> I\"ve already opened a PR almost 2 weeks ago\n> > > to do this and fix the other issues BIP 9 has.\n> > > https://github.com/bitcoin/bips/pull/550\n> > > It just needs your ACK to merge.\n> > >\n> > > On Wednesday 05 July 2017 1:30:26 AM shaolinfry via bitcoin-dev wrote:\n> > >> Some people have criticized BIP9\"s blocktime based thresholds arguing\n> > >> they are confusing (the first retarget after threshold). It is also\n> > >> vulnerable to miners fiddling with timestamps in a way that could\n> > >> prevent or delay activation - for example by only advancing the block\n> > >> timestamp by 1 second you would never meet the threshold (although\n> this\n> > >> would come a the penalty of hiking the difficulty dramatically). On\n> the\n> > >> other hand, the exact date of a height based thresholds is hard to\n> > >> predict a long time in advance due to difficulty fluctuations.\n> However,\n> > >> there is certainty at a given block height and it\"s easy to monitor.\n> If\n> > >> there is sufficient interest, I would be happy to amend BIP8 to be\n> > >> height based. I originally omitted height based thresholds in the\n> > >> interests of simplicity of review - but now that the proposal has been\n> > >> widely reviewed it would be a trivial amendment.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170705/31aaca40/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-07-06T17:20:47",
                "message_text_only": "I'm all for using height instead of time. That was my preference for\nbip9 all along, but my arguments at the time apparently weren't\nconvincing.\n\nRegarding luke's proposal, the only advantage I see is that it would\nallow nodes that don't know a deployment that gets activated to issue\na warning, like bip9 always does when an unknown deployment is locked\nin.\n\nBut there's a simpler way to do that which doesn't require to add\nconsensus rules as to what versionbits should be.\nI'm honestly not worried about it being \"coersive\" and I don't think\nit's inherently reckless (although used with short deployment times\nlike bip148 it can be IMO). But it adds more complexity to the\nconsensus rules, with something that could merely be \"warning code\".\n\nYou can just use a special bit in versionbits for nodes to get the warning.\nMy proposal doesn't guarantee that the warning will be signaled, for\nexample, if the miner that mines the block right after lock in doesn't\nknow about the deployment, he can't possibly know that he was supposed\nto signal the warning bit, even if he has the best intentions. Miners\ncan also intentionally not signal it out of pure malice. But that's no\nworse than the current form, when deployments activated by final date\ninstead of miner signaling never get a warning.\n\nShaolinfry had more concerns with my proposed modification, but I\nthink I answered all of them here:\n\nhttps://github.com/bitcoin/bitcoin/pull/10462#issuecomment-306266218\n\nThe implementation of the proposal is there too. I'm happy to reopen\nand rebase to simplify (#10464 was merged and there's at least 1\ncommit to squash).\n\n> It also enables deploying softforks as a MASF, and only upgrading them to UASF\non an as-needed basis.\n\nYou can also do\n\nconsensus.vDeployments[Consensus::DEPLOYMENT_MASF].bit = 0;\nconsensus.vDeployments[Consensus::DEPLOYMENT_MASF].nStartHeight = 500000;\nconsensus.vDeployments[Consensus::DEPLOYMENT_MASF].nTimeoutHeight = 510000;\nconsensus.vDeployments[Consensus::DEPLOYMENT_MASF].lockinontimeout = false;\n\nand \"if needed\", simply add the following at any time (before the new\nnStartHeight, obviously):\n\n\nconsensus.vDeployments[Consensus::DEPLOYMENT_UASF].bit = 0;\nconsensus.vDeployments[Consensus::DEPLOYMENT_UASF].nStartHeight = 510000;\nconsensus.vDeployments[Consensus::DEPLOYMENT_UASF].nTimeoutHeight = 515000;\nconsensus.vDeployments[Consensus::DEPLOYMENT_UASF].lockinontimeout = true;\n\n\nOn Wed, Jul 5, 2017 at 9:44 PM, Hampus Sj\u00f6berg via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> From the PR change:\n>\n>> Miners must continue setting the bit in LOCKED_IN phase so uptake is\n>> visible and acknowledged. Blocks without the applicable bit set are invalid\n>> during this period\n>\n> Luke, it seems like the amendments to BIP8 make it drastically different to\n> how it first was designed to work.\n> It now looks more akin to BIP148, which was AFAICT not how BIP8 was\n> originally intended to work.\n> Perhaps this should be made into its own BIP instead, or make it so it's\n> possible to decide how the LOCKED_IN state should work when designing the\n> softfork.\n>\n> Hampus\n>\n> 2017-07-05 6:10 GMT+02:00 Luke Dashjr via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org>:\n>>\n>> It's not pointless: it's a wake-up call for miners asleep \"at the wheel\",\n>> to\n>> ensure they upgrade in time. Not having a mandatory signal turned out to\n>> be a\n>> serious bug in BIP 9, and one which is fixed in BIP 148 (and remains a\n>> problem\n>> for BIP 149 as-is). Additionally, it makes the activation decisive and\n>> unambiguous: once the lock-in period is complete, there remains no\n>> question as\n>> to what the correct protocol rules are.\n>>\n>> It also enables deploying softforks as a MASF, and only upgrading them to\n>> UASF\n>> on an as-needed basis.\n>>\n>> Luke\n>>\n>>\n>> On Wednesday 05 July 2017 4:00:38 AM shaolinfry wrote:\n>> > Luke,\n>> > I previously explored an extra state to require signalling before\n>> > activation in an earlier draft of BIP8, but the overall impression I got\n>> > was that gratuitous orphaning was undesirable, so I dropped it. I\n>> > understand the motivation behind it (to ensure miners are upgraded), but\n>> > it's also rather pointless when miners can just fake signal. A properly\n>> > constructed soft fork is generally such that miners have to deliberately\n>> > do something invalid - they cannot be tricked into it... and miners can\n>> > always chose to do something invalid anyway.\n>> >\n>> > > -------- Original Message --------\n>> > > From: luke at dashjr.org\n>> > > To: bitcoin-dev at lists.linuxfoundation.org, shaolinfry\n>> > > <shaolinfry at protonmail.ch> I\"ve already opened a PR almost 2 weeks ago\n>> > > to do this and fix the other issues BIP 9 has.\n>> > > https://github.com/bitcoin/bips/pull/550\n>> > > It just needs your ACK to merge.\n>> > >\n>> > > On Wednesday 05 July 2017 1:30:26 AM shaolinfry via bitcoin-dev wrote:\n>> > >> Some people have criticized BIP9\"s blocktime based thresholds arguing\n>> > >> they are confusing (the first retarget after threshold). It is also\n>> > >> vulnerable to miners fiddling with timestamps in a way that could\n>> > >> prevent or delay activation - for example by only advancing the block\n>> > >> timestamp by 1 second you would never meet the threshold (although\n>> > >> this\n>> > >> would come a the penalty of hiking the difficulty dramatically). On\n>> > >> the\n>> > >> other hand, the exact date of a height based thresholds is hard to\n>> > >> predict a long time in advance due to difficulty fluctuations.\n>> > >> However,\n>> > >> there is certainty at a given block height and it\"s easy to monitor.\n>> > >> If\n>> > >> there is sufficient interest, I would be happy to amend BIP8 to be\n>> > >> height based. I originally omitted height based thresholds in the\n>> > >> interests of simplicity of review - but now that the proposal has\n>> > >> been\n>> > >> widely reviewed it would be a trivial amendment.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Eric Voskuil",
                "date": "2017-07-06T17:41:52",
                "message_text_only": "Just as an implementation consideration, time basis creates complexity. There are no other reasons to index by time, but many to index by height. The time-based activation window of BIP9 forces nodes to either index by time or scan the chain.\n\ne\n\n> On Jul 6, 2017, at 10:20 AM, Jorge Tim\u00f3n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> I'm all for using height instead of time. That was my preference for\n> bip9 all along, but my arguments at the time apparently weren't\n> convincing.\n> \n> Regarding luke's proposal, the only advantage I see is that it would\n> allow nodes that don't know a deployment that gets activated to issue\n> a warning, like bip9 always does when an unknown deployment is locked\n> in.\n> \n> But there's a simpler way to do that which doesn't require to add\n> consensus rules as to what versionbits should be.\n> I'm honestly not worried about it being \"coersive\" and I don't think\n> it's inherently reckless (although used with short deployment times\n> like bip148 it can be IMO). But it adds more complexity to the\n> consensus rules, with something that could merely be \"warning code\".\n> \n> You can just use a special bit in versionbits for nodes to get the warning.\n> My proposal doesn't guarantee that the warning will be signaled, for\n> example, if the miner that mines the block right after lock in doesn't\n> know about the deployment, he can't possibly know that he was supposed\n> to signal the warning bit, even if he has the best intentions. Miners\n> can also intentionally not signal it out of pure malice. But that's no\n> worse than the current form, when deployments activated by final date\n> instead of miner signaling never get a warning.\n> \n> Shaolinfry had more concerns with my proposed modification, but I\n> think I answered all of them here:\n> \n> https://github.com/bitcoin/bitcoin/pull/10462#issuecomment-306266218\n> \n> The implementation of the proposal is there too. I'm happy to reopen\n> and rebase to simplify (#10464 was merged and there's at least 1\n> commit to squash).\n> \n>> It also enables deploying softforks as a MASF, and only upgrading them to UASF\n> on an as-needed basis.\n> \n> You can also do\n> \n> consensus.vDeployments[Consensus::DEPLOYMENT_MASF].bit = 0;\n> consensus.vDeployments[Consensus::DEPLOYMENT_MASF].nStartHeight = 500000;\n> consensus.vDeployments[Consensus::DEPLOYMENT_MASF].nTimeoutHeight = 510000;\n> consensus.vDeployments[Consensus::DEPLOYMENT_MASF].lockinontimeout = false;\n> \n> and \"if needed\", simply add the following at any time (before the new\n> nStartHeight, obviously):\n> \n> \n> consensus.vDeployments[Consensus::DEPLOYMENT_UASF].bit = 0;\n> consensus.vDeployments[Consensus::DEPLOYMENT_UASF].nStartHeight = 510000;\n> consensus.vDeployments[Consensus::DEPLOYMENT_UASF].nTimeoutHeight = 515000;\n> consensus.vDeployments[Consensus::DEPLOYMENT_UASF].lockinontimeout = true;\n> \n> \n> On Wed, Jul 5, 2017 at 9:44 PM, Hampus Sj\u00f6berg via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> From the PR change:\n>> \n>>> Miners must continue setting the bit in LOCKED_IN phase so uptake is\n>>> visible and acknowledged. Blocks without the applicable bit set are invalid\n>>> during this period\n>> \n>> Luke, it seems like the amendments to BIP8 make it drastically different to\n>> how it first was designed to work.\n>> It now looks more akin to BIP148, which was AFAICT not how BIP8 was\n>> originally intended to work.\n>> Perhaps this should be made into its own BIP instead, or make it so it's\n>> possible to decide how the LOCKED_IN state should work when designing the\n>> softfork.\n>> \n>> Hampus\n>> \n>> 2017-07-05 6:10 GMT+02:00 Luke Dashjr via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org>:\n>>> \n>>> It's not pointless: it's a wake-up call for miners asleep \"at the wheel\",\n>>> to\n>>> ensure they upgrade in time. Not having a mandatory signal turned out to\n>>> be a\n>>> serious bug in BIP 9, and one which is fixed in BIP 148 (and remains a\n>>> problem\n>>> for BIP 149 as-is). Additionally, it makes the activation decisive and\n>>> unambiguous: once the lock-in period is complete, there remains no\n>>> question as\n>>> to what the correct protocol rules are.\n>>> \n>>> It also enables deploying softforks as a MASF, and only upgrading them to\n>>> UASF\n>>> on an as-needed basis.\n>>> \n>>> Luke\n>>> \n>>> \n>>>> On Wednesday 05 July 2017 4:00:38 AM shaolinfry wrote:\n>>>> Luke,\n>>>> I previously explored an extra state to require signalling before\n>>>> activation in an earlier draft of BIP8, but the overall impression I got\n>>>> was that gratuitous orphaning was undesirable, so I dropped it. I\n>>>> understand the motivation behind it (to ensure miners are upgraded), but\n>>>> it's also rather pointless when miners can just fake signal. A properly\n>>>> constructed soft fork is generally such that miners have to deliberately\n>>>> do something invalid - they cannot be tricked into it... and miners can\n>>>> always chose to do something invalid anyway.\n>>>> \n>>>>> -------- Original Message --------\n>>>>> From: luke at dashjr.org\n>>>>> To: bitcoin-dev at lists.linuxfoundation.org, shaolinfry\n>>>>> <shaolinfry at protonmail.ch> I\"ve already opened a PR almost 2 weeks ago\n>>>>> to do this and fix the other issues BIP 9 has.\n>>>>> https://github.com/bitcoin/bips/pull/550\n>>>>> It just needs your ACK to merge.\n>>>>> \n>>>>>> On Wednesday 05 July 2017 1:30:26 AM shaolinfry via bitcoin-dev wrote:\n>>>>>> Some people have criticized BIP9\"s blocktime based thresholds arguing\n>>>>>> they are confusing (the first retarget after threshold). It is also\n>>>>>> vulnerable to miners fiddling with timestamps in a way that could\n>>>>>> prevent or delay activation - for example by only advancing the block\n>>>>>> timestamp by 1 second you would never meet the threshold (although\n>>>>>> this\n>>>>>> would come a the penalty of hiking the difficulty dramatically). On\n>>>>>> the\n>>>>>> other hand, the exact date of a height based thresholds is hard to\n>>>>>> predict a long time in advance due to difficulty fluctuations.\n>>>>>> However,\n>>>>>> there is certainty at a given block height and it\"s easy to monitor.\n>>>>>> If\n>>>>>> there is sufficient interest, I would be happy to amend BIP8 to be\n>>>>>> height based. I originally omitted height based thresholds in the\n>>>>>> interests of simplicity of review - but now that the proposal has\n>>>>>> been\n>>>>>> widely reviewed it would be a trivial amendment.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Height based vs block time based thresholds",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Eric Voskuil",
                "shaolinfry",
                "Hampus Sj\u00f6berg",
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Gregory Maxwell",
                "Kekcoin",
                "Bram Cohen"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 36690
        }
    },
    {
        "title": "[bitcoin-dev] The Nuclear Option: BIP148 + MR POWA",
        "thread_messages": [
            {
                "author": "John Hardy",
                "date": "2017-07-05T09:18:36",
                "message_text_only": "This idea is highly contentious as it would guarantee a viable chain of Bitcoin with SegWit activated whether BIP148 gained sufficient support or not. I am not necessarily advocating it - just putting it out for discussion. While the downside is that it could permanently split the network, the upside is that it could heap additional pressure on miners to follow the BIP148 chain and ensure a minimally disruptive upgrade. This is pure game theory.\n\n\n\nMR POWA (Mining Reactive Proof of Work Addition) is a method to introduce an additional proof of work to a blockchain in response to a detected mining behaviour.\n\n\n\nIn the case of BIP148, the criteria for activation could be when the software detects a non-BIP148 compliant chain that is 144 blocks (24 hours) ahead of a BIP148 compliant chain.\n\n\n\nAt this stage the software would change its consensus rules (hard fork) to do two things:\n\n  *   Lower the difficulty for existing PoW method (SHA256).\n\n  *   Introduce a second POW method, such as Scrypt or Ethash, that is incompatible with SHA256 hardware but already has an established mining industry for altcoins.\n\n\n\nThe difficulty should be low, and blocks will initially be found much more quickly than every 10 minutes until the difficulty adjusts. Each method would have its own difficulty. It could be a requirement that POW methods alternate to neutralise attacks from the other chain.\n\n\n\nThis would guarantee SegWit activation. Anybody who is already running a BIP148 node could just as easily run a BIP148 + MR POWA node. This could not realistically be supported by Core and would have to be implemented in a grassroots movement, similar to BIP148.\n\n\n\nIdeally, it would just force the miners to follow the BIP148 chain (or risk the value of their hardware being hurt) and the code would never be activated. MR POWA would mean BIP148 miners would no longer need to \u201chold their nerve\u201d as they would be guaranteed a viable chain and rewarded for their early support.\n\n\nRegards,\n\n\nJohn Hardy\n\njohn at seebitcoin.com\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170705/9b84daf9/attachment-0001.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2017-07-05T14:02:08",
                "message_text_only": "The fastest way to triple Bitcoin capacity is to split the network into\ntwo or three different blockchains. We encourage forks of software, why\nare blockchains somehow different?\n\nYes, this is risky, and probably volatile.\n\nI honestly don't expect lots of people with large amounts of money \ninvested (exchanges, financial institutions, etc) to go along with \nsomething like this, and that say 90% of the wealth with stay concentrated\nin whatever chain has the majority SHA256 hashpower.\n\nBut as a game-theory excercise to see who's theories actually work?\n\nI highly encourage a real-world test of all these theories.\n\nI would also highly advise finding a simple and robust difficulty adjustment\nthat occurs every block instead of bitcoin/litecoin's 2016 block use.\n\nOn Wed, Jul 05, 2017 at 09:18:36AM +0000, John Hardy via bitcoin-dev wrote:\n> This idea is highly contentious as it would guarantee a viable chain of Bitcoin with SegWit activated whether BIP148 gained sufficient support or not. I am not necessarily advocating it - just putting it out for discussion. While the downside is that it could permanently split the network, the upside is that it could heap additional pressure on miners to follow the BIP148 chain and ensure a minimally disruptive upgrade. This is pure game theory.\n> \n> \n> \n> MR POWA (Mining Reactive Proof of Work Addition) is a method to introduce an additional proof of work to a blockchain in response to a detected mining behaviour.\n> \n> \n> \n> In the case of BIP148, the criteria for activation could be when the software detects a non-BIP148 compliant chain that is 144 blocks (24 hours) ahead of a BIP148 compliant chain.\n> \n> \n> \n> At this stage the software would change its consensus rules (hard fork) to do two things:\n> \n>   *   Lower the difficulty for existing PoW method (SHA256).\n> \n>   *   Introduce a second POW method, such as Scrypt or Ethash, that is incompatible with SHA256 hardware but already has an established mining industry for altcoins.\n> \n> \n> \n> The difficulty should be low, and blocks will initially be found much more quickly than every 10 minutes until the difficulty adjusts. Each method would have its own difficulty. It could be a requirement that POW methods alternate to neutralise attacks from the other chain.\n> \n> \n> \n> This would guarantee SegWit activation. Anybody who is already running a BIP148 node could just as easily run a BIP148 + MR POWA node. This could not realistically be supported by Core and would have to be implemented in a grassroots movement, similar to BIP148.\n> \n> \n> \n> Ideally, it would just force the miners to follow the BIP148 chain (or risk the value of their hardware being hurt) and the code would never be activated. MR POWA would mean BIP148 miners would no longer need to ?hold their nerve? as they would be guaranteed a viable chain and rewarded for their early support.\n> \n> \n> Regards,\n> \n> \n> John Hardy\n> \n> john at seebitcoin.com\n> \n> \n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "The Nuclear Option: BIP148 + MR POWA",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Troy Benjegerdes",
                "John Hardy"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 5351
        }
    },
    {
        "title": "[bitcoin-dev] difficulty adjustment (was: The Nuclear Option: BIP148 + MR POWA)",
        "thread_messages": [
            {
                "author": "Henning Kopp",
                "date": "2017-07-05T14:26:53",
                "message_text_only": "Hi,\n\n> I would also highly advise finding a simple and robust difficulty adjustment\n> that occurs every block instead of bitcoin/litecoin's 2016 block use.\n\nI also thought about this some time ago. But note that this implies\nthat forks grow with the same block frequency as the main chain. Thus\nthe longest chain rule becomes irrelevant, since all chains will have\nthe same length (in expectancy). Rather, the chain with most work is\nthe true one.\n\nBest\nHenning\n\n\nOn Wed, Jul 05, 2017 at 02:02:08PM +0000, Troy Benjegerdes via bitcoin-dev wrote:\n> The fastest way to triple Bitcoin capacity is to split the network into\n> two or three different blockchains. We encourage forks of software, why\n> are blockchains somehow different?\n> \n> Yes, this is risky, and probably volatile.\n> \n> I honestly don't expect lots of people with large amounts of money \n> invested (exchanges, financial institutions, etc) to go along with \n> something like this, and that say 90% of the wealth with stay concentrated\n> in whatever chain has the majority SHA256 hashpower.\n> \n> But as a game-theory excercise to see who's theories actually work?\n> \n> I highly encourage a real-world test of all these theories.\n> \n> I would also highly advise finding a simple and robust difficulty adjustment\n> that occurs every block instead of bitcoin/litecoin's 2016 block use.\n> \n> On Wed, Jul 05, 2017 at 09:18:36AM +0000, John Hardy via bitcoin-dev wrote:\n> > This idea is highly contentious as it would guarantee a viable chain of Bitcoin with SegWit activated whether BIP148 gained sufficient support or not. I am not necessarily advocating it - just putting it out for discussion. While the downside is that it could permanently split the network, the upside is that it could heap additional pressure on miners to follow the BIP148 chain and ensure a minimally disruptive upgrade. This is pure game theory.\n> > \n> > \n> > \n> > MR POWA (Mining Reactive Proof of Work Addition) is a method to introduce an additional proof of work to a blockchain in response to a detected mining behaviour.\n> > \n> > \n> > \n> > In the case of BIP148, the criteria for activation could be when the software detects a non-BIP148 compliant chain that is 144 blocks (24 hours) ahead of a BIP148 compliant chain.\n> > \n> > \n> > \n> > At this stage the software would change its consensus rules (hard fork) to do two things:\n> > \n> >   *   Lower the difficulty for existing PoW method (SHA256).\n> > \n> >   *   Introduce a second POW method, such as Scrypt or Ethash, that is incompatible with SHA256 hardware but already has an established mining industry for altcoins.\n> > \n> > \n> > \n> > The difficulty should be low, and blocks will initially be found much more quickly than every 10 minutes until the difficulty adjusts. Each method would have its own difficulty. It could be a requirement that POW methods alternate to neutralise attacks from the other chain.\n> > \n> > \n> > \n> > This would guarantee SegWit activation. Anybody who is already running a BIP148 node could just as easily run a BIP148 + MR POWA node. This could not realistically be supported by Core and would have to be implemented in a grassroots movement, similar to BIP148.\n> > \n> > \n> > \n> > Ideally, it would just force the miners to follow the BIP148 chain (or risk the value of their hardware being hurt) and the code would never be activated. MR POWA would mean BIP148 miners would no longer need to ?hold their nerve? as they would be guaranteed a viable chain and rewarded for their early support.\n> > \n> > \n> > Regards,\n> > \n> > \n> > John Hardy\n> > \n> > john at seebitcoin.com\n> > \n> > \n> \n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n-- \nHenning Kopp\nInstitute of Distributed Systems\nUlm University, Germany\n\nOffice: O27 - 3402\nPhone: +49 731 50-24138\nWeb: http://www.uni-ulm.de/in/vs/~kopp"
            }
        ],
        "thread_summary": {
            "title": "difficulty adjustment (was: The Nuclear Option: BIP148 + MR POWA)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Henning Kopp"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4156
        }
    },
    {
        "title": "[bitcoin-dev] A Segwit2x BIP",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-07-07T22:25:12",
                "message_text_only": "Hello,\n\nHere is a BIP that matches the reference code that the Segwit2x group has\nbuilt and published a week ago.\n\nThis BIP and code satisfies the requests of a large part of the Bitcoin\ncommunity for a moderate increase in the Bitcoin non-witness block space\ncoupled with the activation of Segwit.\n\nYou can find the BIP draft in the following link:\n\nhttps://github.com/SergioDemianLerner/BIPs/blob/master/BIP-draft-sergiolerner-segwit2x.mediawiki\n\nReference source was kindly provided by the Segwit2x group.\n\nBest regards,\n Sergio.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170707/d7d45d57/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-07-07T22:44:21",
                "message_text_only": "This is horribly under-specified (ie not possible to implement from what\nyou've written, and your implementation doesn't match at all, last I heard).\n\n> Specification\n\n> The plain block size is defined as the serialized block size without\n> witness programs.\n> Deploy a modified BIP91 to activate Segwit. The only modification is\n> that the signal \"segsignal\" is replaced by \"segwit2x\".\n\nThis is not a protocol change. I have no idea why you included it in the\n\"specification\" section.\n\n> If segwit2x (BIP91 signal) activates at block N, then block N+12960\n> activates a new plain block size limit of 2 MB (2,000,000 bytes). In\n> this case, at block N+12960 a hard-fork occurs.\n\nThis is not a hard fork, simply adding a new limit is a soft fork. You\nappear to be confused - as originally written, AFAIR, Jeff's btc1 branch\ndid not increase the block size, your specification here matches that\noriginal change, and does not increase the block size.\n\n> The block that activates the hard-fork must have a plain block size\n> greater than 1 MB.\n\nThere is no hard fork, and this would violate consensus rules. Not sure\nwhat you mean. If you do add a hard fork to this BIP, you really need to\nflip the hard fork bit.\n\n> Any transaction with a non-witness serialized size exceeding 1,000,000\n> is invalid.\n\nThis is far from sufficient to protect from DoS attacks, you really\nshould take a look through the mailing list archives and read some of\nthe old discussions on the issues here.\n\nMatt\n\nOn 07/07/17 18:25, Sergio Demian Lerner via bitcoin-dev wrote:\n> Hello,\n> \n> Here is a BIP that matches the reference code that the Segwit2x group\n> has built and published a week ago. \n> \n> This BIP and code satisfies the requests of a large part of the Bitcoin\n> community for a moderate increase in the Bitcoin non-witness block space\n> coupled with the activation of Segwit.\n> \n> You can find the BIP draft in the following link:\n> \n> https://github.com/SergioDemianLerner/BIPs/blob/master/BIP-draft-sergiolerner-segwit2x.mediawiki\n> \n> Reference source was kindly provided by the Segwit2x group.\n> \n> Best regards,\n>  Sergio.\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-07T23:25:32",
                "message_text_only": "On Fri, Jul 7, 2017 at 10:44 PM, Matt Corallo via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> This is not a hard fork, simply adding a new limit is a soft fork. You\n> appear to be confused - as originally written, AFAIR, Jeff's btc1 branch\n> did not increase the block size, your specification here matches that\n> original change, and does not increase the block size.\n\nIndeed, their code previously did not increase the blocksize but it\nwas adjusted at the last minute to do so-- so it may actually do that\nnow. Because they don't appear to have implemented any tests for it, I\nwouldn't be too surprised if it still didn't work at all but also\nwouldn't be surprised if it did.\n\nYou are correct that the specification text appears to refer to the\nprior change that did not. (In my response I just assumed that it\nmeant what they actually did-- good catch)."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-07T23:22:38",
                "message_text_only": "On Fri, Jul 7, 2017 at 10:25 PM, Sergio Demian Lerner via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hello,\n>\n> Here is a BIP that matches the reference code that the Segwit2x group has\n> built and published a week ago.\n\nI'm happy to see that someone has begun writing a specification. But I\nam appalled to see one just being written now for change it's authors\nexpect to be irreversibly applied to the network in less than 30 days.\n\nThe timeline of this proposal is recklessly short to such an extreme\nlevel that we have never, to the best of my knowledge, seen a prior\nproposal so hasty.  Nowhere does this specification provide\njustification or assurance that this is at all safe.  The time line of\nit violates the most minimal of responsible engineering practices, by\nbeing shorter than even a fast development and release candidate\ntimeframe.   This proposal carries an extreme risk for parties to lose\nmoney due to transaction reversals at two distinct points in time and\nprovides no proposed countermeasures to avoid these losses.\n\nThe proposal adds another gratuitous limit to the system: A maximum\ntransaction size where none existed before, yet this limit is almost\ncertainly too small to prevent actual DOS attacks while it is also\ntechnically larger than any transaction that can be included today\n(the largest possible transaction today is 1mb minus the block\noverheads).  The maximum resource usage for maliciously crafted 1MB\ntransaction is enormous and permitting two of them greatly exacerbates\nthe existing vulnerability.\n\n> Assuming the current transaction pattern is replicated in a 2 MB plain-sized block that is 100% filled with transactions, then the witness-serialized block would occupy 3.6 MB\n\nBut in a worst case the result would be 8MB, which this document fails\nto mention.\n\n> This is considered safe by many users, companies, miners and academics [2].\n\nThe claim that the document's [2] says that these increases are \"safe\"\nis incorrect and is a matter which has been previously corrected by\nthe authors of the document:\nhttps://www.reddit.com/r/btc/comments/626ud7/coauthor_of_the_paper_that_blockstream_core_keep/dflrshg/\n.\n\nThe cited paper does an approximate best case analysis considering\nonly a couple of risk factors (in particular, block relay time, but\nignoring durability to dos attacks, robustness against state\nintervention, and initial synchronization time) and concluded that 4MB\nwas the largest they could argue was safe. The paper goes on to then\nargue that even if you crank Bitcoin's parameters to the maximum in\nthose dimensions that it doesn't result in a truly meaningful increase\nin scalablity-- in effect, it's a weak argument against your proposal\nand ones like it.\n\n> Deploy a modified BIP91 to activate Segwit. The only modification is that the signal \"segsignal\" is replaced by \"segwit2x\".\n\nThis means that BIP-91 and your proposal are indistinguishable on the\nnetwork, because the string \"segsignal\" is merely a variable name used\nin the software.\n\n> If segwit2x (BIP91 signal) activates at block N,\n\nThe proposal is unable to distinguish itself from BIP-91. Does this\nmean if segwit2x or BIP91 activates ?\n\n> This reduces the fee pressure on users and companies creating on-chain transactions, matching market expectations and preventing further market disruption\n\nConsidering that we just spent the whole weekend with the mempool\nhaving ~1 block or less worth of transactions most of the time, it\nseems highly likely that just activating segwit will substantially\ndisrupt the fee market; to say nothing for the further doubling that\nisn't even tempered by new wallet adoptions.  There seems to be no\nconsideration given to avoiding this disruption and preventing further\nemergency events when the new capacity is eventually used and software\nis again left unprepared for having to pay market fees.\n\n> and buy time for more comprehensive solutions to be developed and tested\n\nIn effect, the document admits that it isn't a solution that\nmeaningfully improves the scale or scalablity but rather it's just a\nbailout to temporarily lower/negate transaction fees.  It doesn't seem\nto make any argument (or even acknowledge) that the risks and\ndisruption are worth its benefit, and it exacerbates those risks by\nbeing the product of a closed process and having a timeline shorter\nthan basically any software update for production software (much less\nthe timeframe for any consensus update previously). Kudos for being\nfrank here, but it's not exactly selling itself.\n\nIt seems to me that the document doesn't really even make an effort to\njustify the bailout at all and don't explain how it will result in\nanything except an endless series of additional fee bailouts.\n\nMoreover, it doesn't discuss any remediation against the replay\nexposure that the proposed hardfork is sure to create. ( I can\nguarantee to you, I will not adopt this hardfork; especially given\nthat is has been made completely clear that the terms of it were set\nin its closed door meetings and the input of non-supporters was not\nwelcome. )"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-07-13T03:10:55",
                "message_text_only": "Some responses..\n\n>\n> The proposal adds another gratuitous limit to the system: A maximum\n> transaction size where none existed before, yet this limit is almost\n> certainly too small to prevent actual DOS attacks while it is also\n> technically larger than any transaction that can be included today\n> (the largest possible transaction today is 1mb minus the block\n> overheads).  The maximum resource usage for maliciously crafted 1MB\n> transaction is enormous and permitting two of them greatly exacerbates\n> the existing vulnerability.\n>\n>\nI think that limiting the maximum transaction size may not be the best\npossible solution to the N^2 hashing problem, yet it is not a bad start.\n\nThere are several viable soft-forking solutions to it:\n\n1- Soft-fork to perform periodic reductions in the maximum non-segwit\nchecksigs per input (down to 20)\n2- Soft-fork to perform periodic reductions in the number of non-segwit\nchecksigs per transaction. (down to 5K)\n3- Soft-fork to perform periodic reductions in the amount of data hashed by\nnon-segwit checksigs.\n\nRegardless which one one picks, the soft-fork can be deployed with enough\ntime in advance to reduce the exposure. The risk is still low. Four years\nhave passed since I reported this vulnerability and yet nobody has\nexploited it. The attack is highly anti-economical, yet every discussion\nabout the block size ends up citing this vulnerability.\n\n,\n\n> > Assuming the current transaction pattern is replicated in a 2 MB\n> plain-sized block that is 100% filled with transactions, then the\n> witness-serialized block would occupy 3.6 MB\n>\n> But in a worst case the result would be 8MB, which this document fails\n> to mention.\n>\n\nI will mention this worst case in the BIP.\n\nEven if artificially filling the witness space up to 8 MB is\nanti-economical, Segwit exacerbates this problem because each witness byte\ncosts 1/4th of a non-witness byte, so the block bloat attack gets cheaper\nthan before. I think the guilt lies more in Segwit discount factor than in\nthe plain block size increase.\nI would remove the discount factor altogether, and add a fixed (40 bytes)\ndiscount for each input with respect to outputs (not for certain input\ntypes), to incentivize the cleaning of the UTXO set. A discount for inputs\ncannot be used to bloat an unlimited number of blocks, because for each\ninput the attacker needs to first create an output (without discount).\nThere is no need to incentivize removing the signatures from blocks,\nbecause there is already an incentive to do so to save disk space.\n\n\n>\n> > Deploy a modified BIP91 to activate Segwit. The only modification is\n> that the signal \"segsignal\" is replaced by \"segwit2x\".\n>\n> This means that BIP-91 and your proposal are indistinguishable on the\n> network, because the string \"segsignal\" is merely a variable name used\n> in the software.\n>\n> No, it is exposed to the rpc mining interface (getblocktemplate). It must\nbe redefined, even if it's not a consensus change.\n\n\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/94c52265/attachment.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-07-13T03:19:28",
                "message_text_only": "Well, 40 bytes reduction per input is excessive too :)\nBut 30 bytes reduction will do fine.\n\nOn Thu, Jul 13, 2017 at 12:10 AM, Sergio Demian Lerner <\nsergio.d.lerner at gmail.com> wrote:\n\n> Some responses..\n>\n>>\n>> The proposal adds another gratuitous limit to the system: A maximum\n>> transaction size where none existed before, yet this limit is almost\n>> certainly too small to prevent actual DOS attacks while it is also\n>> technically larger than any transaction that can be included today\n>> (the largest possible transaction today is 1mb minus the block\n>> overheads).  The maximum resource usage for maliciously crafted 1MB\n>> transaction is enormous and permitting two of them greatly exacerbates\n>> the existing vulnerability.\n>>\n>>\n> I think that limiting the maximum transaction size may not be the best\n> possible solution to the N^2 hashing problem, yet it is not a bad start.\n>\n> There are several viable soft-forking solutions to it:\n>\n> 1- Soft-fork to perform periodic reductions in the maximum non-segwit\n> checksigs per input (down to 20)\n> 2- Soft-fork to perform periodic reductions in the number of non-segwit\n> checksigs per transaction. (down to 5K)\n> 3- Soft-fork to perform periodic reductions in the amount of data hashed\n> by non-segwit checksigs.\n>\n> Regardless which one one picks, the soft-fork can be deployed with enough\n> time in advance to reduce the exposure. The risk is still low. Four years\n> have passed since I reported this vulnerability and yet nobody has\n> exploited it. The attack is highly anti-economical, yet every discussion\n> about the block size ends up citing this vulnerability.\n>\n> ,\n>\n>> > Assuming the current transaction pattern is replicated in a 2 MB\n>> plain-sized block that is 100% filled with transactions, then the\n>> witness-serialized block would occupy 3.6 MB\n>>\n>> But in a worst case the result would be 8MB, which this document fails\n>> to mention.\n>>\n>\n> I will mention this worst case in the BIP.\n>\n> Even if artificially filling the witness space up to 8 MB is\n> anti-economical, Segwit exacerbates this problem because each witness byte\n> costs 1/4th of a non-witness byte, so the block bloat attack gets cheaper\n> than before. I think the guilt lies more in Segwit discount factor than in\n> the plain block size increase.\n> I would remove the discount factor altogether, and add a fixed (40 bytes)\n> discount for each input with respect to outputs (not for certain input\n> types), to incentivize the cleaning of the UTXO set. A discount for inputs\n> cannot be used to bloat an unlimited number of blocks, because for each\n> input the attacker needs to first create an output (without discount).\n> There is no need to incentivize removing the signatures from blocks,\n> because there is already an incentive to do so to save disk space.\n>\n>\n>>\n>> > Deploy a modified BIP91 to activate Segwit. The only modification is\n>> that the signal \"segsignal\" is replaced by \"segwit2x\".\n>>\n>> This means that BIP-91 and your proposal are indistinguishable on the\n>> network, because the string \"segsignal\" is merely a variable name used\n>> in the software.\n>>\n>> No, it is exposed to the rpc mining interface (getblocktemplate). It must\n> be redefined, even if it's not a consensus change.\n>\n>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/23535924/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-07-07T23:27:14",
                "message_text_only": "> Maximum transaction size is kept, to maximize compatibility with current\n> software and prevent algorithmic and data size DoS's.\n\nIIRC, it is actually increased by ~81 bytes, and doesn't count witness data if \non Segwit transactions (so in effect, nearly 4 MB transactions are possible). \nThis probably doesn't make the hashing problem worse, however it should be \nmade clear in the BIP.\n\n> Assuming the current transaction pattern is replicated in a 2 MB\n> plain-sized block that is 100% filled with transactions, then the\n> witness-serialized block would occupy 3.6 MB [1]. This is considered safe\n> by many users, companies, miners and academics [2].\n\nCitations do not support the claim.\n\n> The plain block size is defined as the serialized block size without\n> witness programs.\n\nThis is deceptive and meaningless. There is no reason to *ever* refer to the \nsize of the block serialised without witness programs. It is not a meaningful \nnumber.\n\n> Deploy a modified BIP91 to activate Segwit. The only modification is that\n> the signal \"segsignal\" is replaced by \"segwit2x\".\n\nWhat is modified here? \"segsignal\" does not appear in the BIP 91 protocol at \nall...\n\n> If segwit2x (BIP91 signal) activates at block N, then block N+12960\n> activates a new plain block size limit of 2 MB (2,000,000 bytes). In this\n> case, at block N+12960 a hard-fork occurs.\n\nA \"plain block size limit\" of 2 MB would be a no-op. It would have literally \nno effect whatsoever on the network rules.\n\nFurthermore, this does not match what btc1/Segwit2x currently implements at \nall. The actual implementation is: If Segwit (via deployment method) activates \nat block N, then block N+12960 activates a new weight limit of 8M (which \ncorresponds to a size of up to 8,000,000 bytes).\n\n> Any transaction with a non-witness serialized size exceeding 1,000,000 is\n> invalid.\n\nWhat is the rationale for excluding witness data from this measurement?\n\n> In the short term, an increase is needed to continue to facilitate network\n> growth, and buy time...\n\nActual network growth does not reflect a pattern that supports this claim.\n\n> This reduces the fee pressure on users and companies creating on-chain\n> transactions, matching market expectations and preventing further market\n> disruption.\n\nLarger block sizes is not likely to have a meaningful impact on fee pressure. \nAny expectations that do not match the reality are merely misguided, and \nshould not be a basis for changing Bitcoin.\n\nLuke"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-07T23:38:06",
                "message_text_only": "On Fri, Jul 7, 2017 at 11:27 PM, Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Larger block sizes is not likely to have a meaningful impact on fee pressure.\n> Any expectations that do not match the reality are merely misguided, and\n> should not be a basis for changing Bitcoin.\n\nI think it's very clear that they will in the very short term\n(https://anduck.net/bitcoin/fees/4320_blocks.php  note the rate drops\nwhen demand falls below supply). But I agree with you if you mean a\nsomewhat longer term e.g. a year out."
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-07-08T06:30:03",
                "message_text_only": "- The BIP91 portion of the fork seems OK to me.  There are some issues with\ntiming, but since this is for miner coordination of segwit activation, and\nhas little to do with other network users, it could be included as an\noption.   (I'm a fan of adding options;plugins, etc. to Bitcoin... some\nothers aren't.)\n\n- This hard fork portion of the proposal is being deployed with \"emergency\"\nspeed... even though there is not an emergency on the network today that I\nam aware of.   If enacted, it will certainly result in two chains - and\nwith no replay protection..  The results of this will be confusing - two\nledgers with many transactions appearing on both and others appearing only\non one.\n\n- The BIP should be modified to provide evidence and justification for the\ntimeline that is consistent with the level of risk the network would bear\nif it were enacted.\n\n- The coercion used to drive production of this BIP is mired in a\nmisinterpretation of BIP9 and sets a precedent for Bitcoin that may\nundermine the value prospect of all cryptocurrency in general.   For this\nreason alone - even if all of the engineering concerns and timelines are\nimproved - even assigning this BIP a number could be considered\nirresponsible.\n\n- If you still want to code up a fork for the Bitcoin network, consider\nstarting with Luke's hard fork code and changing the rates of growth as\nneeded for your desired effect.   Also you might want to read this first\n(code references are in there):\nhttps://petertodd.org/2016/hardforks-after-the-segwit-blocksize-increase .\nPlans are already underway for a hard fork, for reasons that have nothing\nto do with block size, but could include a timeline for a block size growth\nconsistent with global average residential bandwidth growth.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170708/2ef7883f/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2017-07-08T13:28:11",
                "message_text_only": "I am utterly appalled by this proposal both technically, ethically, and by\nthe process which it has adopted. Hard forks require consensus from the\nentire ecosystem in order to prevent a fork, funds loss, confusion and harm\nto the robust guarantees of the Bitcoin system has thus far displayed.\n\nI know this is a draft, but you are seeking reviews of a proposal that has\njust a few weeks remaining before deployment (where \"technical review\" is\npointless because the is not actually open\n<https://pastebin.com/kktB1kaw> unless\nyou are an approved member\n<https://github.com/btc1/bitcoin/commit/1719c872b6624c37b0f2d94e7a4a2656fac4804a#diff-6a3371457528722a734f3c51d9238c13>),\nmaking it totally unworkable and irresponsible. For example, exactly how\nare other implementations supposed to adopt the BIP in such a short\ntimeframe? For all the talk of how important \"alternative implementations\"\nare, how does this rash and rushed action promote an ecosystem of multiple\nimplementors? By encouraging fast upgrades, you are actually centralizing\nthe ecosystem even further.\n\nThe linked coded doesn't uniquely identify itself on the network by\nuser-agent, something all distinct implementations have done to date.\n\nThe draft BIP text looks like an afterthought and doesn't actually specify\nthe proposal in enough detail to implement from the text. By contrast for\nexample, BIP141 has a level of detail which allowed others to implement\nsegwit without looking at any reference code (which consequently results to\nmore confidence and testing of the specification all round). The Bitcoin\nsystem has a market cap of over $40bn supported by a robust and reliable\nnetwork and your proposal is an offence to all Bitcoin has achieved because\ndue to it's the strong foundations.\n\nI cannot not support this proposal in the current form and timeline, nor do\nI support the coercion that has been used behind closed doors to try and\ngain more support (not limited to, but including approaching company\ninvestors to twist arms and veiled threats of blacklisting companies from\nfurther funding/collaboration).\n\nI think the best you can hope for this hard fork proposal is for it to be\nquietly ignored.\n\n\n\nOn Fri, Jul 7, 2017 at 10:25 PM, Sergio Demian Lerner via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello,\n>\n> Here is a BIP that matches the reference code that the Segwit2x group has\n> built and published a week ago.\n>\n> This BIP and code satisfies the requests of a large part of the Bitcoin\n> community for a moderate increase in the Bitcoin non-witness block space\n> coupled with the activation of Segwit.\n>\n> You can find the BIP draft in the following link:\n>\n> https://github.com/SergioDemianLerner/BIPs/blob/\n> master/BIP-draft-sergiolerner-segwit2x.mediawiki\n>\n> Reference source was kindly provided by the Segwit2x group.\n>\n> Best regards,\n>  Sergio.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170708/b3a2925a/attachment.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-07-10T11:50:33",
                "message_text_only": "Thank you for all your comments. I will improve the BIP based on the\ntechnical suggestions received.\n\nOn the subjective/political side that has slipped into this discussion.\nSkip this part if not interested in politics.\n\nRegarding the timeline, its certainly rather short, but also is the UASF\nBIP 148 ultimatum.\n\nIf Bitcoin were a democracy and we had somehow a way to securely perform a\nreferendum, then this will solve easily. But neither is true. At least now.\n\nMore than 80% of the miners and many users are willing to go in the\nSegwit2x direction. With the support and great talent of the Bitcoin Core\ndevelopers, Segwit2x activation will not cause any major disruptions.\nWithout Core, there will be a temporary split. Both sides will have to\nhard-fork.\n\nI want a Bitcoin united. But maybe a split of Bitcoin, each side with its\nown vision, is not so bad.\n\nOn Sat, Jul 8, 2017 at 6:19 PM, Brian Hoffman <brian at ob1.io> wrote:\n\n> I don't feel threatened by investors. You're full of shit btcdrak.\n>\n> Proofread your emails. You just declared support for segwit2x.\n>\n> On Jul 8, 2017, at 9:28 AM, Btc Drak via bitcoin-dev <bitcoin-dev at lists.\n> linuxfoundation.org> wrote:\n>\n> I am utterly appalled by this proposal both technically, ethically, and by\n> the process which it has adopted. Hard forks require consensus from the\n> entire ecosystem in order to prevent a fork, funds loss, confusion and harm\n> to the robust guarantees of the Bitcoin system has thus far displayed.\n>\n> I know this is a draft, but you are seeking reviews of a proposal that has\n> just a few weeks remaining before deployment (where \"technical review\" is\n> pointless because the is not actually open <https://pastebin.com/kktB1kaw> unless\n> you are an approved member\n> <https://github.com/btc1/bitcoin/commit/1719c872b6624c37b0f2d94e7a4a2656fac4804a#diff-6a3371457528722a734f3c51d9238c13>),\n> making it totally unworkable and irresponsible. For example, exactly how\n> are other implementations supposed to adopt the BIP in such a short\n> timeframe? For all the talk of how important \"alternative implementations\"\n> are, how does this rash and rushed action promote an ecosystem of multiple\n> implementors? By encouraging fast upgrades, you are actually centralizing\n> the ecosystem even further.\n>\n> The linked coded doesn't uniquely identify itself on the network by\n> user-agent, something all distinct implementations have done to date.\n>\n> The draft BIP text looks like an afterthought and doesn't actually specify\n> the proposal in enough detail to implement from the text. By contrast for\n> example, BIP141 has a level of detail which allowed others to implement\n> segwit without looking at any reference code (which consequently results to\n> more confidence and testing of the specification all round). The Bitcoin\n> system has a market cap of over $40bn supported by a robust and reliable\n> network and your proposal is an offence to all Bitcoin has achieved because\n> due to it's the strong foundations.\n>\n> I cannot not support this proposal in the current form and timeline, nor\n> do I support the coercion that has been used behind closed doors to try and\n> gain more support (not limited to, but including approaching company\n> investors to twist arms and veiled threats of blacklisting companies from\n> further funding/collaboration).\n>\n> I think the best you can hope for this hard fork proposal is for it to be\n> quietly ignored.\n>\n>\n>\n> On Fri, Jul 7, 2017 at 10:25 PM, Sergio Demian Lerner via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hello,\n>>\n>> Here is a BIP that matches the reference code that the Segwit2x group has\n>> built and published a week ago.\n>>\n>> This BIP and code satisfies the requests of a large part of the Bitcoin\n>> community for a moderate increase in the Bitcoin non-witness block space\n>> coupled with the activation of Segwit.\n>>\n>> You can find the BIP draft in the following link:\n>>\n>> https://github.com/SergioDemianLerner/BIPs/blob/master/BIP-\n>> draft-sergiolerner-segwit2x.mediawiki\n>>\n>> Reference source was kindly provided by the Segwit2x group.\n>>\n>> Best regards,\n>>  Sergio.\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170710/a72aad85/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-07-10T18:38:08",
                "message_text_only": "On Mon, Jul 10, 2017 at 1:50 PM, Sergio Demian Lerner via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Regarding the timeline, its certainly rather short, but also is the UASF BIP\n> 148 ultimatum.\n\nThis is correct. If you are trying to imply that makes the short\ntimeline here right, you are falling for a \"tu quoque\" fallacy.\n\n> More than 80% of the miners and many users are willing to go in the Segwit2x\n> direction.\n\nThere's no logical reason I can think of (and I've heard many attempts\nat explaining it) for miners to consider segwit bad for Bitcoin but\nsegwitx2 harmless. But I don't see 80% hashrate support for bip141, so\nyour claim doesn't seem accurate for the segwit part, let alone the\nmore controversial hardfork part.\n\nI read some people controlling mining pools that control 80% of the\nhashrate signed a paper saying they would \"support segwit\nimmediately\". Either what I read wasn't true, or the signed paper is\njust a proof of the signing pool operators word being something we\ncannot trust.\n\nSo where does this 80% figure come from? How can we trust the source?\n\n> I want a Bitcoin united. But maybe a split of Bitcoin, each side with its\n> own vision, is not so bad.\n\nIt would be unfortunate to split the network into 2 coins only because\nof lack of patience for deploying non-urgent consensus changes like a\nsize increase or disagreements about the right time schedule.\nI think anything less than 1 year after release of tested code by some\nimplementation would be irresponsible for any hardfork, even a very\nsimple one."
            },
            {
                "author": "Tom Zander",
                "date": "2017-07-12T08:15:50",
                "message_text_only": "On Monday, 10 July 2017 20:38:08 CEST Jorge Tim\u00f3n via bitcoin-dev wrote:\n> I think anything less than 1 year after release of tested code by some\n> implementation would be irresponsible for any hardfork, even a very\n> simple one.\n\nGood news!\n\nCode to support 2x (the hard fork part of the proposal) has been out and \ntested for much longer than that.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2017-07-12T12:38:33",
                "message_text_only": "> Code to support 2x (the hard fork part of the proposal) has been out and\n> tested for much longer than that.\n\nTested? Where?\nHowever, the hardfork part may be out there for a long time but  _is still broken_.\n\n/jonas\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/29aea872/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2017-07-12T17:38:58",
                "message_text_only": "On 12 Jul 2017 2:31 pm, \"Tom Zander via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nOn Monday, 10 July 2017 20:38:08 CEST Jorge Tim\u00f3n via bitcoin-dev wrote:\n> I think anything less than 1 year after release of tested code by some\n> implementation would be irresponsible for any hardfork, even a very\n> simple one.\n\nGood news!\n\nCode to support 2x (the hard fork part of the proposal) has been out and\ntested for much longer than that.\n\n\nNot true. It's different code on top of segwit. The first attempt in btc1\n(very recent) didn't even increased the size (because it changed the\nmeaningless \"base size\" without touching the weight limit. As for the\ncurrent code, I don't think it has been properly tested today, let alone\n\"for mucj longer than 1 year.\nAnyway, I said, one year from tested release. Segwitx2 hasn't been\nreleased, has it? If so, too late to discuss a bip imo, the bip may end up\nbeing different from what has been released due to feedback (unless it is\nignored again, of course).\n\n\n--\nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/a122e604/attachment-0001.html>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2017-07-13T19:19:35",
                "message_text_only": "The BIP has been updated.\n\nChanges:\n- The technical spec has been improved: now the block size increase is\nspecified in terms of weight and not in terms of bytes.\n- The increase in the maximum block sigops after HF has been documented.\n- Comments added about the worst case block size.\n\nHappy weekend! And don't forget to start signaling something before block\n475776 !  It's just 90 blocks away.\nBit 1 or 4,1 or whatever you wish, but please signal something.\n\nTo the moon!\n\n\nOn Wed, Jul 12, 2017 at 2:38 PM, Jorge Tim\u00f3n via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n>\n> On 12 Jul 2017 2:31 pm, \"Tom Zander via bitcoin-dev\" <bitcoin-dev at lists.\n> linuxfoundation.org> wrote:\n>\n> On Monday, 10 July 2017 20:38:08 CEST Jorge Tim\u00f3n via bitcoin-dev wrote:\n> > I think anything less than 1 year after release of tested code by some\n> > implementation would be irresponsible for any hardfork, even a very\n> > simple one.\n>\n> Good news!\n>\n> Code to support 2x (the hard fork part of the proposal) has been out and\n> tested for much longer than that.\n>\n>\n> Not true. It's different code on top of segwit. The first attempt in btc1\n> (very recent) didn't even increased the size (because it changed the\n> meaningless \"base size\" without touching the weight limit. As for the\n> current code, I don't think it has been properly tested today, let alone\n> \"for mucj longer than 1 year.\n> Anyway, I said, one year from tested release. Segwitx2 hasn't been\n> released, has it? If so, too late to discuss a bip imo, the bip may end up\n> being different from what has been released due to feedback (unless it is\n> ignored again, of course).\n>\n>\n> --\n> Tom Zander\n> Blog: https://zander.github.io\n> Vlog: https://vimeo.com/channels/tomscryptochannel\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/03b124d8/attachment.html>"
            },
            {
                "author": "Andrew Chow",
                "date": "2017-07-13T19:48:52",
                "message_text_only": "What's special about block 475776?\n\n\nOn July 13, 2017 12:23:46 PM Sergio Demian Lerner via bitcoin-dev \n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The BIP has been updated.\n>\n> Changes:\n> - The technical spec has been improved: now the block size increase is\n> specified in terms of weight and not in terms of bytes.\n> - The increase in the maximum block sigops after HF has been documented.\n> - Comments added about the worst case block size.\n>\n> Happy weekend! And don't forget to start signaling something before block\n> 475776 !  It's just 90 blocks away.\n> Bit 1 or 4,1 or whatever you wish, but please signal something.\n>\n> To the moon!\n>\n>\n> On Wed, Jul 12, 2017 at 2:38 PM, Jorge Tim\u00f3n via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>>\n>> On 12 Jul 2017 2:31 pm, \"Tom Zander via bitcoin-dev\" <bitcoin-dev at lists.\n>> linuxfoundation.org> wrote:\n>>\n>> On Monday, 10 July 2017 20:38:08 CEST Jorge Tim\u00f3n via bitcoin-dev wrote:\n>> > I think anything less than 1 year after release of tested code by some\n>> > implementation would be irresponsible for any hardfork, even a very\n>> > simple one.\n>>\n>> Good news!\n>>\n>> Code to support 2x (the hard fork part of the proposal) has been out and\n>> tested for much longer than that.\n>>\n>>\n>> Not true. It's different code on top of segwit. The first attempt in btc1\n>> (very recent) didn't even increased the size (because it changed the\n>> meaningless \"base size\" without touching the weight limit. As for the\n>> current code, I don't think it has been properly tested today, let alone\n>> \"for mucj longer than 1 year.\n>> Anyway, I said, one year from tested release. Segwitx2 hasn't been\n>> released, has it? If so, too late to discuss a bip imo, the bip may end up\n>> being different from what has been released due to feedback (unless it is\n>> ignored again, of course).\n>>\n>>\n>> --\n>> Tom Zander\n>> Blog: https://zander.github.io\n>> Vlog: https://vimeo.com/channels/tomscryptochannel\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n>\n>\n> ----------\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/0c5c6106/attachment-0001.html>"
            },
            {
                "author": "Charlie 'Charles' Shrem",
                "date": "2017-07-13T21:18:58",
                "message_text_only": "Andrew,\n\nBlock 475776 and block 477792 (July 26) are the last 2 difficulty\nadjustment periods before Aug 1st.\n\nCharlie\n\nOn Thu, Jul 13, 2017 at 3:48 PM, Andrew Chow via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> What's special about block 475776?\n>\n> On July 13, 2017 12:23:46 PM Sergio Demian Lerner via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> The BIP has been updated.\n>>\n>> Changes:\n>> - The technical spec has been improved: now the block size increase is\n>> specified in terms of weight and not in terms of bytes.\n>> - The increase in the maximum block sigops after HF has been documented.\n>> - Comments added about the worst case block size.\n>>\n>> Happy weekend! And don't forget to start signaling something before block\n>> 475776 !  It's just 90 blocks away.\n>> Bit 1 or 4,1 or whatever you wish, but please signal something.\n>>\n>> To the moon!\n>>\n>>\n>> On Wed, Jul 12, 2017 at 2:38 PM, Jorge Tim\u00f3n via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>>\n>>>\n>>> On 12 Jul 2017 2:31 pm, \"Tom Zander via bitcoin-dev\" <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> On Monday, 10 July 2017 20:38:08 CEST Jorge Tim\u00f3n via bitcoin-dev wrote:\n>>> > I think anything less than 1 year after release of tested code by some\n>>> > implementation would be irresponsible for any hardfork, even a very\n>>> > simple one.\n>>>\n>>> Good news!\n>>>\n>>> Code to support 2x (the hard fork part of the proposal) has been out and\n>>> tested for much longer than that.\n>>>\n>>>\n>>> Not true. It's different code on top of segwit. The first attempt in\n>>> btc1 (very recent) didn't even increased the size (because it changed the\n>>> meaningless \"base size\" without touching the weight limit. As for the\n>>> current code, I don't think it has been properly tested today, let alone\n>>> \"for mucj longer than 1 year.\n>>> Anyway, I said, one year from tested release. Segwitx2 hasn't been\n>>> released, has it? If so, too late to discuss a bip imo, the bip may end up\n>>> being different from what has been released due to feedback (unless it is\n>>> ignored again, of course).\n>>>\n>>>\n>>> --\n>>> Tom Zander\n>>> Blog: https://zander.github.io\n>>> Vlog: https://vimeo.com/channels/tomscryptochannel\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/6321b907/attachment.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2017-07-14T13:50:14",
                "message_text_only": "While BIP91 is probably not terribly harmful, because the vast majority of\nnodes and users are prepared for it - the hard fork portion of this BIP is\nbeing deployed like an emergency patch or quick bug fix to the system.\n\nPlease consider updating the BIP to include some justification for the\nurgency of the consensus change, and the reasons for not delaying until a\nbetter engineered solution (spoonet, BIP103, etc.) can be deployed.\n\n\nOn Thu, Jul 13, 2017 at 3:19 PM, Sergio Demian Lerner via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The BIP has been updated.\n>\n> Changes:\n> - The technical spec has been improved: now the block size increase is\n> specified in terms of weight and not in terms of bytes.\n> - The increase in the maximum block sigops after HF has been documented.\n> - Comments added about the worst case block size.\n>\n> Happy weekend! And don't forget to start signaling something before block\n> 475776 !  It's just 90 blocks away.\n> Bit 1 or 4,1 or whatever you wish, but please signal something.\n>\n> To the moon!\n>\n>\n> On Wed, Jul 12, 2017 at 2:38 PM, Jorge Tim\u00f3n via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>>\n>> On 12 Jul 2017 2:31 pm, \"Tom Zander via bitcoin-dev\" <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> On Monday, 10 July 2017 20:38:08 CEST Jorge Tim\u00f3n via bitcoin-dev wrote:\n>> > I think anything less than 1 year after release of tested code by some\n>> > implementation would be irresponsible for any hardfork, even a very\n>> > simple one.\n>>\n>> Good news!\n>>\n>> Code to support 2x (the hard fork part of the proposal) has been out and\n>> tested for much longer than that.\n>>\n>>\n>> Not true. It's different code on top of segwit. The first attempt in btc1\n>> (very recent) didn't even increased the size (because it changed the\n>> meaningless \"base size\" without touching the weight limit. As for the\n>> current code, I don't think it has been properly tested today, let alone\n>> \"for mucj longer than 1 year.\n>> Anyway, I said, one year from tested release. Segwitx2 hasn't been\n>> released, has it? If so, too late to discuss a bip imo, the bip may end up\n>> being different from what has been released due to feedback (unless it is\n>> ignored again, of course).\n>>\n>>\n>> --\n>> Tom Zander\n>> Blog: https://zander.github.io\n>> Vlog: https://vimeo.com/channels/tomscryptochannel\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170714/d0e787a3/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2017-07-12T01:06:14",
                "message_text_only": "On Monday 10 July 2017 11:50:33 AM Sergio Demian Lerner via bitcoin-dev wrote:\n> Regarding the timeline, its certainly rather short, but also is the UASF\n> BIP 148 ultimatum.\n\nBIP148 began with 8 months lead time, reduced to 5 months from popular request \nand technical considerations. There is nothing about BIP148 that compels an \nattempted hardfork 90 days later - that could just as well have been 18 \nmonths.\n\n> More than 80% of the miners and many users are willing to go in the\n> Segwit2x direction. With the support and great talent of the Bitcoin Core\n> developers, Segwit2x activation will not cause any major disruptions.\n\nThat's not true at all. Based on my observations, only approximately 20% of \nthe community follow Core's technical lead without significant consideration \nof their own - and who knows if that would change if Core were to suggest \nclearly-unsafe block size increases, or attempted to force a hardfork against \nconsensus. Even with Core's support, many people would oppose the hardfork \nattempt, and it would fail.\n\n> Without Core, there will be a temporary split. Both sides will have to\n> hard-fork.\n\nSegwit2x's hardfork does not compel the remaining Bitcoin users to also \nhardfork.\n\n> I want a Bitcoin united. But maybe a split of Bitcoin, each side with its\n> own vision, is not so bad.\n\nI concur, but I disagree your approach has any possibility of a united \nBitcoin. The only way to get that today, would be to do Segwit+Drivechain, not \nSegwit+Hardfork.\n\nLuke"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2017-07-12T15:41:15",
                "message_text_only": "Le 12/07/2017 \u00e0 03:06, Luke Dashjr via bitcoin-dev a \u00e9crit :\n> Even with Core's support, many people would oppose the hardfork \n> attempt, and it would fail.\n\nWhy with or without Core support are you sure that it will fail, what\ncan those that are opposing the hardfork attempt do (with or without\nCore) and what does \"fail\" mean here in fact?\n\n-- \nZcash wallets made simple: https://github.com/Ayms/zcash-wallets\nBitcoin wallets made simple: https://github.com/Ayms/bitcoin-wallets\nGet the torrent dynamic blocklist: http://peersm.com/getblocklist\nCheck the 10 M passwords list: http://peersm.com/findmyass\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.org\nPeersm : http://www.peersm.com\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nGitHub : https://www.github.com/Ayms"
            }
        ],
        "thread_summary": {
            "title": "A Segwit2x BIP",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Charlie 'Charles' Shrem",
                "Tom Zander",
                "Aymeric Vitte",
                "Sergio Demian Lerner",
                "Jorge Tim\u00f3n",
                "Erik Aronesty",
                "Luke Dashjr",
                "Gregory Maxwell",
                "Matt Corallo",
                "Btc Drak",
                "Andrew Chow",
                "Jonas Schnelli"
            ],
            "messages_count": 21,
            "total_messages_chars_count": 46300
        }
    },
    {
        "title": "[bitcoin-dev] [BIP Proposal] Standard address format for timelocked funds",
        "thread_messages": [
            {
                "author": "ZmnSCPxj",
                "date": "2017-07-08T01:13:01",
                "message_text_only": "<pre>\nBIP: ?\nTitle: Standard address format for timelocked funds\nAuthor: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nComments-Summary: ?\nComments-URI: ?\nStatus: ?\nType: ?\nCreated: 2017-07-01\nLicense: CC0-1.0\n</pre>\n== Abstract ==\n<code>OP_CHECKLOCKTIMEVERIFY</code> provides a method of\nlocking funds until a particular time arrives.\nOne potential use of this opcode is for a user to precommit\nhimself or herself to not spend funds until a particular\ndate, i.e. to hold the funds until a later date.\nThis proposal adds a format for specifying addresses that\nprecommit to timelocked funds, as well as specifying a\nredemption code to redeem funds after the timelock has\npassed.\nThis allows ordinary non-technical users to make use of\n<code>OP_CHECKLOCKTIMEVERIFY</code> easily.\n== Copyright ==\nThis BIP is released under CC0-1.0.\n== Specification ==\nThis proposal provides formats for specifying an\naddress that locks funds until a specified date,\nand a redemption code that allows the funds to be\nswept on or after the specified date.\nAt minimum, wallet software supporting this BIP must\nbe capable of sweeping the redemption code on or after\nthe specified date.\nIn addition, the wallet software should support sending\nfunds to the timelocked address specified here.\nFinally, wallet software may provide a command to create\na pair of timelocked address and redemption code.\nAddresses and redemption codes are encoded using\n[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32\nBech32 encoding].\n=== Timelocked Address Format ===\nThe human-readable part of the address is composed of:\n# The four characters <code>hodl</code>.\n# A date, in <code>YYYYMMDD</code> form. For example,\nthe date August 1, 2017 is encoded as <code>20170801</code>.\n# A network code, either <code>tb</code> for testnet,\nor <code>bc</code> for Bitcoin mainnet.\nThe data part of the address is composed of:\n# A version quintet (5 bits), which must be 0 for this\nBIP.\n# A public key hash, 32 quintets (160 bits). As is\nusual for Bitcoin, this is big-endian.\nThis is to be interpreted as follows:\n# The given date is the first day that the funds in\nthe given address may be redeemed.\n# The funds are owned by whoever controls the private\nkey corresponding to the public key hash given.\n=== Redemption Code ===\nThe human-readable part of the redemption code is\ncomposed of:\n# The four characters <code>hedl</code>.\n# A date, in <code>YYYYMMDD</code> form.\n# A network code, either <code>tb</code> for testnet,\nor <code>bc</code> for Bitcoin mainnet.\nThe data part of the address is composed of:\n# A version quintet (5 bits), which must be 0 for this\nBIP.\n# A private key, 52 quintets (260 bits). This is the\n256-bit private key, prepended with 4 <code>0</code>\nbits, in big-endian order. <!-- We could consider\nsome kind of mini private key instead if the security\nis similar anyway. -->\nThis is to be interpreted as follows:\n# The given date is the first day that the funds in\nthe given address may be redeemed.\n# The private key unlocks the funds.\n=== Lock Time Computation ===\nGiven a particular lock date <code>YYYYMMDD</code>, the\nactual lock time is computed as follows:\n# The day before the lock date is taken. For example,\nif the lock date is <code>20180101</code> or\nJanuary 1, 2018, we take the date December 31, 2017.\n# We take the time 1000h (10:00 AM, or 10 in the morning)\nof the date from the above step.\nThis lock time is then translated to a\nUnix epoch time, as per POSIX.1-2001 (which removes the\nbuggy day February 29, 2100 in previous POSIX revisions).\nThe translation should use, at minimum, unsigned 32-bit\nnumbers to represent the Unix epoch time.\nThe Unix epoch time shall then be interpreted as an\n<code>nLockTime</code> value, as per standard Bitcoin.\nWhether it is possible to represent dates past 2038\nwill depend on whether standard Bitcoin can represent\n<code>nLockTime</code> values to represent dates past\n2038.\nSince <code>nLockTime</code> is an unsigned 32-bit\nvalue, it should be possible to represent dates until\n06:28:15 UTC+0 2106-02-07.\nFuture versions of Bitcoin should be able to support\n<code>nLockTime</code> larger than unsigned 32-bit,\nin order to allow even later dates.\nThe reason for using an earlier lock time than the\nspecified date is given in the Rationale section of\nthis BIP.\n=== Payment to a Timelocked Address ===\nAn ordinary P2SH payment is used to provide funds to a\ntimelocked address.\nThe script below is used as the <code>redeemScript</code>\nfor the P2SH payment:\n<timeout> OP_CHECKLOCKTIMEVERIFY OP_DROP\nOP_DUP OP_HASH160 <publickeyhash> OP_EQUALVERIFY OP_CHECKSIG\nOnce the <code>redeemScript</code> is derived, the hash is\ndetermined, and an ordinary P2SH output with the below\n<code>scriptPubKey</code> used:\nOP_HASH160 <redeemScripthash> OP_EQUAL\nIn case of SegWit deployment, SegWit-compatible wallets\nshould be able to use P2SH, P2WSH, or P2SH-P2WSH, as per\nthe output they would normally use in that situation.\nObviously, a timelocked address has an equivalent\nBitcoin <code>3</code> (P2SH) address.\nA simple service or software that translates from a\npublic timelocked address to a P2SH address can be\ncreated that makes timelocking (but not redemption)\nbackwards compatible with wallets that do not support\nthis BIP.\nThis proposal recommends that wallets supporting payment\nto P2PKH, P2SH, P2WPKH, and P2WSH Bitcoin addresses should\nreuse the same interface for paying to such addresses as\npaying into timelocked addresses of this proposal.\n=== Redemption of a Timelocked Redemption Code ===\nTo sweep a timelocked redemption code after the timelock,\none must provide the given <code>redeemScript</code> as\npart of the <code>scriptSig</code>, of all unspent\noutputs that pay to the given <code>redeemScript</code>\nhash.\nWhen sweeping a timelocked redemption code, first the\nwallet must extract the private key from the redemption\ncode, then derive the public key, the public key hash,\nthe <code>redeemScript</code>, and finally the\n<code>redeemScript</code> hash.\nThen, the wallet must find all unspent outputs that pay\nto the <code>redeemScript</code> hash via P2SH (and, in the\ncase of SegWit deployment, via P2SH-P2WSH and P2WSH).\nFor each such output, the wallet then generates a\ntransaction input with the below <code>scriptSig</code>, as\nper usual P2SH redemptions:\n<signature> <pubkey> <redeemScript>\nThe wallet then outputs to an address it can control.\nAs the Script involved uses <code>OP_CHECKLOCKTIMEVERIFY</code>,\nthe <code>nSequence</code> must be 0 and the\n<code>nLockTime</code> must be equal to the computed\nlock time.\nThis implies that the transaction cannot be transmitted\n(and the funds cannot be sweeped)\nuntil after the given lock time.\nThe above procedure is roughly identical to sweeping an\nordinary, exported private key.\nThis proposal recommends that wallets supporting a sweep\nfunction should reuse the same interface for sweeping\nindividual private keys (wallet import format) for sweeping\ntimelocked redemption codes.\n== Motivation ==\nA key motivation for this BIP is to allow easy use of\n<code>OP_CHECKLOCKTIMEVERIFY</code> by end-users.\nThe below are expected use cases of this proposal:\n# A user wants to purchase an amount of Bitcoin,\nand subsequently wait for an amount of time before\ncashing out.\nThe user fears that he or she may have \"weak hands\",\ni.e. sell unfavorably on a temporary dip, and thus\ncommits the coins into a timelocked fund that can\nonly be opened after a specific date.\n# A user wants to gift an amount of Bitcoins to\nan infant or minor, and wants the fund to not be spent\non ill-advised purchases until the infant or minor\nreaches the age of maturity.\n# A user may wish to prepare some kind of monthly subsidy\nor allowance to another user, and prepares a series of\ntimelocked addresses, redeemable at some set date on\neach month, and provides the private redemption codes to\nthe beneficiary.\n# A user may fear duress or ransom for a particular\nfuture time horizon, and voluntarily impose a lock time\nduring which a majority of their funds cannot be spent.\n== Rationale ==\nWhile in principle, this proposal may be implemented as a\nseparate service or software, we should consider the long\ntime horizons that may be desired by users.\nA user using a particular software to timelock a fund may\nhave concerns, for example, of specifying a timelock\n18 years in the future for a gift or inheritance to a\nnewborn infant.\nThe software or service may no longer exist after 18 years,\nunless the user himself or herself takes over maintenance\nof that software or service.\nBy having a single standard for timelocked funds that is\nshared and common among multiple implementations of Bitcoin\nwallets, the user has some assurance that the redemption code\nfor the funds is still useable after 18 years.\nFurther, a publicly-accessible standard specifying how the\nfunds can be redeemed will allow technically-capable users\nor beneficiaries to create software that can redeem the\ntimelocked fund.\nThis proposal provides a timelock at the granularity of a\nday.\nThe expectation is that users will have long time\ndurations of months or years, so that the ability to\nspecify exact times, which would require specifying the\ntimezone, is unneeded.\nThe actual timeout used is 1000h of the day before the\nhuman-readable date, so that timezones of UTC+14 will\ndefinitely be able to redeem the money starting at\n0000h of the human-readable date, local time (UTC+14).\nGiven the expectation that users will use long time\ndurations, the fact that timezones of UTC-12 will\nactually be able to redeem the funds on 2200h UTC-12\ntime two days before can be considered an acceptable\nerror.\nThe human-readable date is formatted according to\n[https://www.iso.org/iso-8601-date-and-time-format.html\nISO standard dates], with the dashes removed.\nDashes may prevent double-click selection, making\nusability of these addresses less desirable.\n<!--\nWe can consider something like 2021m12d11 instead,\nwhich would be much more readable and understandable\nto human users.\n-->\nThe <code>bc</code> or <code>tb</code> is after the\ndate since the date is composed of digits and the bech32\nseparator itself is the digit <code>1</code>. One\nsimply needs to compare <code>hedlbc202111211...</code>\nand <code>hedl20211121bc1...</code>.\nA version quintet is added in case of a future\nsociopolitical event that changes interpretation of\ndates, or changes in scripting that would allow for more\nefficient redemptions of timelocked funds (which would\nchange the <code>redeemScript</code> paid to), or changes\nin the size and/or format of lock times, and so on.\nSuch changes are unlikely, so the version is a quintet in\nthe bech32 data part rather than a substring in the\nhuman-readable part.\nThe public address format uses the <code>hodl</code> as\nthe start of the code, while the private key (the\nredemption code) uses <code>hedl</code>.\nThis provides a simple mnemonic for users:\n\"Pay into the <code>hodl</code> code to hold your\ncoins until the given date.\nAfter you've held the coins (on or after the given date)\nuse the <code>hedl</code> code to redeem the coins.\"\nThe obvious misspelling of \"hodl\" is a homage to the common\nmeme within the Bitcoin community.\n<!-- The above misspelling may be corrected if it is considered\nto be in bad taste. -->\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170707/05ada9ef/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2017-07-12T08:30:31",
                "message_text_only": "Good morning mailinglist,\nI am saddened at the lack of attention to this BIP proposal. I know that it is not as interesting as the debates on where Bitcoin will go in the future and what needs to be prepared for even greater mainstream adoption, but I think my BIP proposal does have at least some value to long-term investors.\nSo far I have seen only a single public feedback:\nhttps://www.reddit.com/r/Bitcoin/comments/6lzpvz/bip_hodl/djxzbvi/\nBasically, the point in that feedback is mostly that the computed timelock should be UTC+0 0000h of the given human-readable date.\nI would like to respectfully ask the mailing list about which option is best:\n1. (current) Use the earliest timezone as of now, UTC+14 0000h of the given human-readable date. Pro: No matter where you are in the world, as soon as the given date arrives, the fund can be spent. Con: For most of the world, the fund can be spent on some time the day before, or even two days before for UTC-11 and UTC-12 timezones.\n2. Use the standard timezone UTC+0 0000h of the given human-readable date. Pro: standard time. Con: for half of the world, the fund is not spendable until some time into the given date, for the other half, it will be spendable at an earlier date.\n3. Allow indicating a timezone to the human-readable part. Pro: gives control over the user's expected local time. Con: additional field and effectively more control, need to handle also strange timezones that have 0.5 hour difference from UTC, need to encode positive and negative preferably without using + and -, as those may break double-click selection.\nI hope to get some feedback from this list.\nRegards,\nZmnSCPxj\n-------- Original Message --------\nSubject: [bitcoin-dev] [BIP Proposal] Standard address format for timelocked funds\nLocal Time: July 8, 2017 9:13 AM\nUTC Time: July 8, 2017 1:13 AM\nFrom: bitcoin-dev at lists.linuxfoundation.org\nTo: bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n<pre>\nBIP: ?\nTitle: Standard address format for timelocked funds\nAuthor: ZmnSCPxj <ZmnSCPxj at protonmail.com>\nComments-Summary: ?\nComments-URI: ?\nStatus: ?\nType: ?\nCreated: 2017-07-01\nLicense: CC0-1.0\n</pre>\n== Abstract ==\n<code>OP_CHECKLOCKTIMEVERIFY</code> provides a method of\nlocking funds until a particular time arrives.\nOne potential use of this opcode is for a user to precommit\nhimself or herself to not spend funds until a particular\ndate, i.e. to hold the funds until a later date.\nThis proposal adds a format for specifying addresses that\nprecommit to timelocked funds, as well as specifying a\nredemption code to redeem funds after the timelock has\npassed.\nThis allows ordinary non-technical users to make use of\n<code>OP_CHECKLOCKTIMEVERIFY</code> easily.\n== Copyright ==\nThis BIP is released under CC0-1.0.\n== Specification ==\nThis proposal provides formats for specifying an\naddress that locks funds until a specified date,\nand a redemption code that allows the funds to be\nswept on or after the specified date.\nAt minimum, wallet software supporting this BIP must\nbe capable of sweeping the redemption code on or after\nthe specified date.\nIn addition, the wallet software should support sending\nfunds to the timelocked address specified here.\nFinally, wallet software may provide a command to create\na pair of timelocked address and redemption code.\nAddresses and redemption codes are encoded using\n[https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32\nBech32 encoding].\n=== Timelocked Address Format ===\nThe human-readable part of the address is composed of:\n# The four characters <code>hodl</code>.\n# A date, in <code>YYYYMMDD</code> form. For example,\nthe date August 1, 2017 is encoded as <code>20170801</code>.\n# A network code, either <code>tb</code> for testnet,\nor <code>bc</code> for Bitcoin mainnet.\nThe data part of the address is composed of:\n# A version quintet (5 bits), which must be 0 for this\nBIP.\n# A public key hash, 32 quintets (160 bits). As is\nusual for Bitcoin, this is big-endian.\nThis is to be interpreted as follows:\n# The given date is the first day that the funds in\nthe given address may be redeemed.\n# The funds are owned by whoever controls the private\nkey corresponding to the public key hash given.\n=== Redemption Code ===\nThe human-readable part of the redemption code is\ncomposed of:\n# The four characters <code>hedl</code>.\n# A date, in <code>YYYYMMDD</code> form.\n# A network code, either <code>tb</code> for testnet,\nor <code>bc</code> for Bitcoin mainnet.\nThe data part of the address is composed of:\n# A version quintet (5 bits), which must be 0 for this\nBIP.\n# A private key, 52 quintets (260 bits). This is the\n256-bit private key, prepended with 4 <code>0</code>\nbits, in big-endian order. <!-- We could consider\nsome kind of mini private key instead if the security\nis similar anyway. -->\nThis is to be interpreted as follows:\n# The given date is the first day that the funds in\nthe given address may be redeemed.\n# The private key unlocks the funds.\n=== Lock Time Computation ===\nGiven a particular lock date <code>YYYYMMDD</code>, the\nactual lock time is computed as follows:\n# The day before the lock date is taken. For example,\nif the lock date is <code>20180101</code> or\nJanuary 1, 2018, we take the date December 31, 2017.\n# We take the time 1000h (10:00 AM, or 10 in the morning)\nof the date from the above step.\nThis lock time is then translated to a\nUnix epoch time, as per POSIX.1-2001 (which removes the\nbuggy day February 29, 2100 in previous POSIX revisions).\nThe translation should use, at minimum, unsigned 32-bit\nnumbers to represent the Unix epoch time.\nThe Unix epoch time shall then be interpreted as an\n<code>nLockTime</code> value, as per standard Bitcoin.\nWhether it is possible to represent dates past 2038\nwill depend on whether standard Bitcoin can represent\n<code>nLockTime</code> values to represent dates past\n2038.\nSince <code>nLockTime</code> is an unsigned 32-bit\nvalue, it should be possible to represent dates until\n06:28:15 UTC+0 2106-02-07.\nFuture versions of Bitcoin should be able to support\n<code>nLockTime</code> larger than unsigned 32-bit,\nin order to allow even later dates.\nThe reason for using an earlier lock time than the\nspecified date is given in the Rationale section of\nthis BIP.\n=== Payment to a Timelocked Address ===\nAn ordinary P2SH payment is used to provide funds to a\ntimelocked address.\nThe script below is used as the <code>redeemScript</code>\nfor the P2SH payment:\n<timeout> OP_CHECKLOCKTIMEVERIFY OP_DROP\nOP_DUP OP_HASH160 <publickeyhash> OP_EQUALVERIFY OP_CHECKSIG\nOnce the <code>redeemScript</code> is derived, the hash is\ndetermined, and an ordinary P2SH output with the below\n<code>scriptPubKey</code> used:\nOP_HASH160 <redeemScripthash> OP_EQUAL\nIn case of SegWit deployment, SegWit-compatible wallets\nshould be able to use P2SH, P2WSH, or P2SH-P2WSH, as per\nthe output they would normally use in that situation.\nObviously, a timelocked address has an equivalent\nBitcoin <code>3</code> (P2SH) address.\nA simple service or software that translates from a\npublic timelocked address to a P2SH address can be\ncreated that makes timelocking (but not redemption)\nbackwards compatible with wallets that do not support\nthis BIP.\nThis proposal recommends that wallets supporting payment\nto P2PKH, P2SH, P2WPKH, and P2WSH Bitcoin addresses should\nreuse the same interface for paying to such addresses as\npaying into timelocked addresses of this proposal.\n=== Redemption of a Timelocked Redemption Code ===\nTo sweep a timelocked redemption code after the timelock,\none must provide the given <code>redeemScript</code> as\npart of the <code>scriptSig</code>, of all unspent\noutputs that pay to the given <code>redeemScript</code>\nhash.\nWhen sweeping a timelocked redemption code, first the\nwallet must extract the private key from the redemption\ncode, then derive the public key, the public key hash,\nthe <code>redeemScript</code>, and finally the\n<code>redeemScript</code> hash.\nThen, the wallet must find all unspent outputs that pay\nto the <code>redeemScript</code> hash via P2SH (and, in the\ncase of SegWit deployment, via P2SH-P2WSH and P2WSH).\nFor each such output, the wallet then generates a\ntransaction input with the below <code>scriptSig</code>, as\nper usual P2SH redemptions:\n<signature> <pubkey> <redeemScript>\nThe wallet then outputs to an address it can control.\nAs the Script involved uses <code>OP_CHECKLOCKTIMEVERIFY</code>,\nthe <code>nSequence</code> must be 0 and the\n<code>nLockTime</code> must be equal to the computed\nlock time.\nThis implies that the transaction cannot be transmitted\n(and the funds cannot be sweeped)\nuntil after the given lock time.\nThe above procedure is roughly identical to sweeping an\nordinary, exported private key.\nThis proposal recommends that wallets supporting a sweep\nfunction should reuse the same interface for sweeping\nindividual private keys (wallet import format) for sweeping\ntimelocked redemption codes.\n== Motivation ==\nA key motivation for this BIP is to allow easy use of\n<code>OP_CHECKLOCKTIMEVERIFY</code> by end-users.\nThe below are expected use cases of this proposal:\n# A user wants to purchase an amount of Bitcoin,\nand subsequently wait for an amount of time before\ncashing out.\nThe user fears that he or she may have \"weak hands\",\ni.e. sell unfavorably on a temporary dip, and thus\ncommits the coins into a timelocked fund that can\nonly be opened after a specific date.\n# A user wants to gift an amount of Bitcoins to\nan infant or minor, and wants the fund to not be spent\non ill-advised purchases until the infant or minor\nreaches the age of maturity.\n# A user may wish to prepare some kind of monthly subsidy\nor allowance to another user, and prepares a series of\ntimelocked addresses, redeemable at some set date on\neach month, and provides the private redemption codes to\nthe beneficiary.\n# A user may fear duress or ransom for a particular\nfuture time horizon, and voluntarily impose a lock time\nduring which a majority of their funds cannot be spent.\n== Rationale ==\nWhile in principle, this proposal may be implemented as a\nseparate service or software, we should consider the long\ntime horizons that may be desired by users.\nA user using a particular software to timelock a fund may\nhave concerns, for example, of specifying a timelock\n18 years in the future for a gift or inheritance to a\nnewborn infant.\nThe software or service may no longer exist after 18 years,\nunless the user himself or herself takes over maintenance\nof that software or service.\nBy having a single standard for timelocked funds that is\nshared and common among multiple implementations of Bitcoin\nwallets, the user has some assurance that the redemption code\nfor the funds is still useable after 18 years.\nFurther, a publicly-accessible standard specifying how the\nfunds can be redeemed will allow technically-capable users\nor beneficiaries to create software that can redeem the\ntimelocked fund.\nThis proposal provides a timelock at the granularity of a\nday.\nThe expectation is that users will have long time\ndurations of months or years, so that the ability to\nspecify exact times, which would require specifying the\ntimezone, is unneeded.\nThe actual timeout used is 1000h of the day before the\nhuman-readable date, so that timezones of UTC+14 will\ndefinitely be able to redeem the money starting at\n0000h of the human-readable date, local time (UTC+14).\nGiven the expectation that users will use long time\ndurations, the fact that timezones of UTC-12 will\nactually be able to redeem the funds on 2200h UTC-12\ntime two days before can be considered an acceptable\nerror.\nThe human-readable date is formatted according to\n[https://www.iso.org/iso-8601-date-and-time-format.html\nISO standard dates], with the dashes removed.\nDashes may prevent double-click selection, making\nusability of these addresses less desirable.\n<!--\nWe can consider something like 2021m12d11 instead,\nwhich would be much more readable and understandable\nto human users.\n-->\nThe <code>bc</code> or <code>tb</code> is after the\ndate since the date is composed of digits and the bech32\nseparator itself is the digit <code>1</code>. One\nsimply needs to compare <code>hedlbc202111211...</code>\nand <code>hedl20211121bc1...</code>.\nA version quintet is added in case of a future\nsociopolitical event that changes interpretation of\ndates, or changes in scripting that would allow for more\nefficient redemptions of timelocked funds (which would\nchange the <code>redeemScript</code> paid to), or changes\nin the size and/or format of lock times, and so on.\nSuch changes are unlikely, so the version is a quintet in\nthe bech32 data part rather than a substring in the\nhuman-readable part.\nThe public address format uses the <code>hodl</code> as\nthe start of the code, while the private key (the\nredemption code) uses <code>hedl</code>.\nThis provides a simple mnemonic for users:\n\"Pay into the <code>hodl</code> code to hold your\ncoins until the given date.\nAfter you've held the coins (on or after the given date)\nuse the <code>hedl</code> code to redeem the coins.\"\nThe obvious misspelling of \"hodl\" is a homage to the common\nmeme within the Bitcoin community.\n<!-- The above misspelling may be corrected if it is considered\nto be in bad taste. -->\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/3d01edd5/attachment-0001.html>"
            },
            {
                "author": "Federico Tenga",
                "date": "2017-07-27T16:52:52",
                "message_text_only": "Hi ZmnSCPxj,\n\nFew thoughts about your proposal:\n1- I kinda like the idea and I would probably use it, but still I believe\nit is a very limited use case and probably most wallet providers will not\nbe interested in supporting it.\n2- Early adopters and people highly involved in the community may\nappreciate the \"hodl\" part in the redemption code, but it could cause\nconfusion in normal users not understanding the reference.\n\nRegarding the time-zone I think the best option is to stick the UTC\nstandard, using UTC+14 could be confusing since it is very unusual  and we\nare not used to deal with it.\n\n\n\nOn 12 July 2017 at 10:30, ZmnSCPxj via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Good morning mailinglist,\n>\n> I am saddened at the lack of attention to this BIP proposal.  I know that\n> it is not as interesting as the debates on where Bitcoin will go in the\n> future and what needs to be prepared for even greater mainstream adoption,\n> but I think my BIP proposal does have at least some value to long-term\n> investors.\n>\n> So far I have seen only a single public feedback:\n>\n> https://www.reddit.com/r/Bitcoin/comments/6lzpvz/bip_hodl/djxzbvi/\n>\n> Basically, the point in that feedback is mostly that the computed timelock\n> should be UTC+0 0000h of the given human-readable date.\n>\n> I would like to respectfully ask the mailing list about which option is\n> best:\n>\n> 1.  (current) Use the earliest timezone as of now, UTC+14 0000h of the\n> given human-readable date.  Pro: No matter where you are in the world, as\n> soon as the given date arrives, the fund can be spent.  Con: For most of\n> the world, the fund can be spent on some time the day before, or even two\n> days before for UTC-11 and UTC-12 timezones.\n>\n> 2.  Use the standard timezone UTC+0 0000h of the given human-readable\n> date.  Pro: standard time.  Con: for half of the world, the fund is not\n> spendable until some time into the given date, for the other half, it will\n> be spendable at an earlier date.\n>\n> 3.  Allow indicating a timezone to the human-readable part.  Pro: gives\n> control over the user's expected local time.  Con: additional field and\n> effectively more control, need to handle also strange timezones that have\n> 0.5 hour difference from UTC, need to encode positive and negative\n> preferably without using + and -, as those may break double-click selection.\n>\n> I hope to get some feedback from this list.\n>\n> Regards,\n> ZmnSCPxj\n>\n> -------- Original Message --------\n> Subject: [bitcoin-dev] [BIP Proposal] Standard address format for\n> timelocked funds\n> Local Time: July 8, 2017 9:13 AM\n> UTC Time: July 8, 2017 1:13 AM\n> From: bitcoin-dev at lists.linuxfoundation.org\n> To: bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n>\n>\n> <pre>\n> BIP: ?\n> Title: Standard address format for timelocked funds\n> Author: ZmnSCPxj <ZmnSCPxj at protonmail.com>\n> Comments-Summary: ?\n> Comments-URI: ?\n> Status: ?\n> Type: ?\n> Created: 2017-07-01\n> License: CC0-1.0\n> </pre>\n>\n> == Abstract ==\n>\n> <code>OP_CHECKLOCKTIMEVERIFY</code> provides a method of\n> locking funds until a particular time arrives.\n> One potential use of this opcode is for a user to precommit\n> himself or herself to not spend funds until a particular\n> date, i.e. to hold the funds until a later date.\n>\n> This proposal adds a format for specifying addresses that\n> precommit to timelocked funds, as well as specifying a\n> redemption code to redeem funds after the timelock has\n> passed.\n> This allows ordinary non-technical users to make use of\n> <code>OP_CHECKLOCKTIMEVERIFY</code> easily.\n>\n> == Copyright ==\n>\n> This BIP is released under CC0-1.0.\n>\n> == Specification ==\n>\n> This proposal provides formats for specifying an\n> address that locks funds until a specified date,\n> and a redemption code that allows the funds to be\n> swept on or after the specified date.\n>\n> At minimum, wallet software supporting this BIP must\n> be capable of sweeping the redemption code on or after\n> the specified date.\n> In addition, the wallet software should support sending\n> funds to the timelocked address specified here.\n> Finally, wallet software may provide a command to create\n> a pair of timelocked address and redemption code.\n>\n> Addresses and redemption codes are encoded using\n> [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32\n> Bech32 encoding].\n>\n> === Timelocked Address Format ===\n>\n> The human-readable part of the address is composed of:\n>\n> # The four characters <code>hodl</code>.\n> # A date, in <code>YYYYMMDD</code> form.  For example,\n>   the date August 1, 2017 is encoded as <code>20170801</code>.\n> # A network code, either <code>tb</code> for testnet,\n>   or <code>bc</code> for Bitcoin mainnet.\n>\n> The data part of the address is composed of:\n>\n> # A version quintet (5 bits), which must be 0 for this\n>   BIP.\n> # A public key hash, 32 quintets (160 bits).  As is\n>   usual for Bitcoin, this is big-endian.\n>\n> This is to be interpreted as follows:\n>\n> # The given date is the first day that the funds in\n>   the given address may be redeemed.\n> # The funds are owned by whoever controls the private\n>   key corresponding to the public key hash given.\n>\n> === Redemption Code ===\n>\n> The human-readable part of the redemption code is\n> composed of:\n>\n> # The four characters <code>hedl</code>.\n> # A date, in <code>YYYYMMDD</code> form.\n> # A network code, either <code>tb</code> for testnet,\n>   or <code>bc</code> for Bitcoin mainnet.\n>\n> The data part of the address is composed of:\n>\n> # A version quintet (5 bits), which must be 0 for this\n>   BIP.\n> # A private key, 52 quintets (260 bits).  This is the\n>   256-bit private key, prepended with 4 <code>0</code>\n>   bits, in big-endian order.   <!-- We could consider\n>   some kind of mini private key instead if the security\n>   is similar anyway.  -->\n>\n> This is to be interpreted as follows:\n>\n> # The given date is the first day that the funds in\n>   the given address may be redeemed.\n> # The private key unlocks the funds.\n>\n> === Lock Time Computation ===\n>\n> Given a particular lock date <code>YYYYMMDD</code>, the\n> actual lock time is computed as follows:\n>\n> # The day before the lock date is taken.  For example,\n>   if the lock date is <code>20180101</code> or\n>   January 1, 2018, we take the date December 31, 2017.\n> # We take the time 1000h (10:00 AM, or 10 in the morning)\n>   of the date from the above step.\n>\n> This lock time is then translated to a\n> Unix epoch time, as per POSIX.1-2001 (which removes the\n> buggy day February 29, 2100 in previous POSIX revisions).\n> The translation should use, at minimum, unsigned 32-bit\n> numbers to represent the Unix epoch time.\n>\n> The Unix epoch time shall then be interpreted as an\n> <code>nLockTime</code> value, as per standard Bitcoin.\n> Whether it is possible to represent dates past 2038\n> will depend on whether standard Bitcoin can represent\n> <code>nLockTime</code> values to represent dates past\n> 2038.\n> Since <code>nLockTime</code> is an unsigned 32-bit\n> value, it should be possible to represent dates until\n> 06:28:15 UTC+0 2106-02-07.\n> Future versions of Bitcoin should be able to support\n> <code>nLockTime</code> larger than unsigned 32-bit,\n> in order to allow even later dates.\n>\n> The reason for using an earlier lock time than the\n> specified date is given in the Rationale section of\n> this BIP.\n>\n> === Payment to a Timelocked Address ===\n>\n> An ordinary P2SH payment is used to provide funds to a\n> timelocked address.\n>\n> The script below is used as the <code>redeemScript</code>\n> for the P2SH payment:\n>\n> <timeout> OP_CHECKLOCKTIMEVERIFY OP_DROP\n> OP_DUP OP_HASH160 <publickeyhash> OP_EQUALVERIFY OP_CHECKSIG\n>\n> Once the <code>redeemScript</code> is derived, the hash is\n> determined, and an ordinary P2SH output with the below\n> <code>scriptPubKey</code> used:\n>\n> OP_HASH160 <redeemScripthash> OP_EQUAL\n>\n> In case of SegWit deployment, SegWit-compatible wallets\n> should be able to use P2SH, P2WSH, or P2SH-P2WSH, as per\n> the output they would normally use in that situation.\n>\n> Obviously, a timelocked address has an equivalent\n> Bitcoin <code>3</code> (P2SH) address.\n> A simple service or software that translates from a\n> public timelocked address to a P2SH address can be\n> created that makes timelocking (but not redemption)\n> backwards compatible with wallets that do not support\n> this BIP.\n>\n> This proposal recommends that wallets supporting payment\n> to P2PKH, P2SH, P2WPKH, and P2WSH Bitcoin addresses should\n> reuse the same interface for paying to such addresses as\n> paying into timelocked addresses of this proposal.\n>\n> === Redemption of a Timelocked Redemption Code ===\n>\n> To sweep a timelocked redemption code after the timelock,\n> one must provide the given <code>redeemScript</code> as\n> part of the <code>scriptSig</code>, of all unspent\n> outputs that pay to the given <code>redeemScript</code>\n> hash.\n>\n> When sweeping a timelocked redemption code, first the\n> wallet must extract the private key from the redemption\n> code, then derive the public key, the public key hash,\n> the <code>redeemScript</code>, and finally the\n> <code>redeemScript</code> hash.\n>\n> Then, the wallet must find all unspent outputs that pay\n> to the <code>redeemScript</code> hash via P2SH (and, in the\n> case of SegWit deployment, via P2SH-P2WSH and P2WSH).\n>\n> For each such output, the wallet then generates a\n> transaction input with the below <code>scriptSig</code>, as\n> per usual P2SH redemptions:\n>\n> <signature> <pubkey> <redeemScript>\n>\n> The wallet then outputs to an address it can control.\n>\n> As the Script involved uses <code>OP_CHECKLOCKTIMEVERIFY</code>,\n> the <code>nSequence</code> must be 0 and the\n> <code>nLockTime</code> must be equal to the computed\n> lock time.\n> This implies that the transaction cannot be transmitted\n> (and the funds cannot be sweeped)\n> until after the given lock time.\n>\n> The above procedure is roughly identical to sweeping an\n> ordinary, exported private key.\n>\n> This proposal recommends that wallets supporting a sweep\n> function should reuse the same interface for sweeping\n> individual private keys (wallet import format) for sweeping\n> timelocked redemption codes.\n>\n> == Motivation ==\n>\n> A key motivation for this BIP is to allow easy use of\n> <code>OP_CHECKLOCKTIMEVERIFY</code> by end-users.\n>\n> The below are expected use cases of this proposal:\n>\n> # A user wants to purchase an amount of Bitcoin,\n> and subsequently wait for an amount of time before\n> cashing out.\n> The user fears that he or she may have \"weak hands\",\n> i.e. sell unfavorably on a temporary dip, and thus\n> commits the coins into a timelocked fund that can\n> only be opened after a specific date.\n> # A user wants to gift an amount of Bitcoins to\n> an infant or minor, and wants the fund to not be spent\n> on ill-advised purchases until the infant or minor\n> reaches the age of maturity.\n> # A user may wish to prepare some kind of monthly subsidy\n> or allowance to another user, and prepares a series of\n> timelocked addresses, redeemable at some set date on\n> each month, and provides the private redemption codes to\n> the beneficiary.\n> # A user may fear duress or ransom for a particular\n> future time horizon, and voluntarily impose a lock time\n> during which a majority of their funds cannot be spent.\n>\n> == Rationale ==\n>\n> While in principle, this proposal may be implemented as a\n> separate service or software, we should consider the long\n> time horizons that may be desired by users.\n> A user using a particular software to timelock a fund may\n> have concerns, for example, of specifying a timelock\n> 18 years in the future for a gift or inheritance to a\n> newborn infant.\n> The software or service may no longer exist after 18 years,\n> unless the user himself or herself takes over maintenance\n> of that software or service.\n> By having a single standard for timelocked funds that is\n> shared and common among multiple implementations of Bitcoin\n> wallets, the user has some assurance that the redemption code\n> for the funds is still useable after 18 years.\n> Further, a publicly-accessible standard specifying how the\n> funds can be redeemed will allow technically-capable users\n> or beneficiaries to create software that can redeem the\n> timelocked fund.\n>\n> This proposal provides a timelock at the granularity of a\n> day.\n> The expectation is that users will have long time\n> durations of months or years, so that the ability to\n> specify exact times, which would require specifying the\n> timezone, is unneeded.\n>\n> The actual timeout used is 1000h of the day before the\n> human-readable date, so that timezones of UTC+14 will\n> definitely be able to redeem the money starting at\n> 0000h of the human-readable date, local time (UTC+14).\n> Given the expectation that users will use long time\n> durations, the fact that timezones of UTC-12 will\n> actually be able to redeem the funds on 2200h UTC-12\n> time two days before can be considered an acceptable\n> error.\n>\n> The human-readable date is formatted according to\n> [https://www.iso.org/iso-8601-date-and-time-format.html\n> ISO standard dates], with the dashes removed.\n> Dashes may prevent double-click selection, making\n> usability of these addresses less desirable.\n> <!--\n> We can consider something like 2021m12d11 instead,\n> which would be much more readable and understandable\n> to human users.\n> -->\n>\n> The <code>bc</code> or <code>tb</code> is after the\n> date since the date is composed of digits and the bech32\n> separator itself is the digit <code>1</code>.  One\n> simply needs to compare <code>hedlbc202111211...</code>\n> and <code>hedl20211121bc1...</code>.\n>\n> A version quintet is added in case of a future\n> sociopolitical event that changes interpretation of\n> dates, or changes in scripting that would allow for more\n> efficient redemptions of timelocked funds (which would\n> change the <code>redeemScript</code> paid to), or changes\n> in the size and/or format of lock times, and so on.\n> Such changes are unlikely, so the version is a quintet in\n> the bech32 data part rather than a substring in the\n> human-readable part.\n>\n> The public address format uses the <code>hodl</code> as\n> the start of the code, while the private key (the\n> redemption code) uses <code>hedl</code>.\n> This provides a simple mnemonic for users:\n> \"Pay into the <code>hodl</code> code to hold your\n> coins until the given date.\n> After you've held the coins (on or after the given date)\n> use the <code>hedl</code> code to redeem the coins.\"\n> The obvious misspelling of \"hodl\" is a homage to the common\n> meme within the Bitcoin community.\n> <!-- The above misspelling may be corrected if it is considered\n> to be in bad taste.  -->\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170727/45b458bf/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Standard address format for timelocked funds",
            "categories": [
                "bitcoin-dev",
                "BIP Proposal"
            ],
            "authors": [
                "ZmnSCPxj",
                "Federico Tenga"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 40008
        }
    },
    {
        "title": "[bitcoin-dev] Updating the Scaling Roadmap",
        "thread_messages": [
            {
                "author": "Paul Sztorc",
                "date": "2017-07-10T16:50:21",
                "message_text_only": "Summary\n=========\n\nIn my opinion, Greg Maxwell's scaling roadmap [1] succeeded in a few\ncrucial ways. One success was that it synchronized the entire Bitcoin\ncommunity, helping to bring finality to the (endless) conversations of\nthat time, and get everyone back to work. However, I feel that the Dec\n7, 2015 roadmap is simply too old to serve this function any longer. We\nshould revise it: remove what has been accomplished, introduce new\ninnovations and approaches, and update deadlines and projections.\n\n\nWhy We Should Update the Roadmap\n=================================\n\nIn a P2P system like Bitcoin, we lack authoritative info-sources (for\nexample, a \"textbook\" or academic journal), and as a result\nconversations tend to have a problematic lack of progress. They do not\n\"accumulate\", as everyone must start over. Ironically, the scaling\nconversation _itself_ has a fatal O(n^2) scaling problem.\n\nThe roadmap helped solve these problems by being constant in size, and\nsubjecting itself to publication, endorsement, criticism, and so forth.\nDespite the (unavoidable) nuance and complexity of each individual\nopinion, it was at least globally known that X participants endorsed Y\nset of claims.\n\nUnfortunately, the Dec 2015 roadmap is now 19 months old -- it is quite\nobsolete and replacing it is long overdue. For example, it highlights\nolder items (CSV, compact blocks, versionbits) as being _future_\nimprovements, and makes no mention of new high-likelihood improvements\n(Schnorr) or mis-emphasizes them (LN). It even contains mistakes (SegWit\nfraud proofs). To read the old roadmap properly, one must already be a\ntechnical expert. For me, this defeats the entire point of having one in\nthe first place.\n\nA new roadmap would be worth your attention, even if you didn't sign it,\nbecause a refusal to sign would still be informative (and, therefore,\nhelpful)!\n\nSo, with that in mind, let me present a first draft. Obviously, I am\nstrongly open to edits and feedback, because I have no way of knowing\neveryone's opinions. I admit that I am partially campaigning for my\nDrivechain project, and also for this \"scalability\"/\"capacity\"\ndistinction...that's because I believe in both and think they are\nhelpful. But please feel free to suggest edits.\n\nI emphasized concrete numbers, and concrete dates.\n\nAnd I did NOT necessarily write it from my own point of view, I tried\nearnestly to capture a (useful) community view. So, let me know how I did.\n\n ==== Beginning of New (\"July 2017\") Roadmap Draft ====\n\nThis document updates the previous roadmap [1] of Dec 2015. The older\nstatement endorsed a belief that \"the community is ready to deliver on\nits shared vision that addresses the needs of the system while upholding\nits values\".\n\nThat belief has not changed, but the shared vision has certainly grown\nsharper over the last 18 months. Below is a list of technologies which\neither increase Bitcoin's maximum tps rate (\"capacity\"), or which make\nit easier to process a higher volume of transactions (\"scalability\").\n\nFirst, over the past 18 months, the technical community has completed a\nnumber of items [2] on the Dec 2015 roadmap. VersonBits (BIP 9) enables\nBitcoin to handle multiple soft fork upgrades at once. Compact Blocks\n(BIP 152) allows for much faster block propagation, as does the FIBRE\nNetwork [3]. Check Sequence Verify (BIP 112) allows trading partners to\nmutually update an active transaction without writing it to the\nblockchain (this helps to enable the Lightning Network).\n\nSecond, Segregated Witness (BIP 141), which reorganizes data in blocks\nto handle signatures separately, has been completed and awaits\nactivation (multiple BIPS). It is estimated to increase capacity by a\nfactor of 2.2. It also improves scalability in many ways. First, SW\nincludes a fee-policy which encourages users to minimize their impact on\nthe UTXO set. Second, SW achieves linear scaling of sighash operations,\nwhich prevents the network from crashing when large transactions are\nbroadcast. Third, SW provides an efficiency gain for everyone who is not\nverifying signatures, as these no longer need to be downloaded or\nstored. SegWit is an enabling technology for the Lightning Network,\nscript versioning (specifically Schnorr signatures), and has a number of\nbenefits which\nare unrelated to capacity [4].\n\nThird, the Lightning Network, which allows users to transact without\nbroadcasting to the network, is complete [5, 6] and awaits the\nactivation of SegWit. For those users who are able to make a single\non-chain transaction, it is estimated to increase both capacity and\nscalability by a factor of ~1000 (although these capacity increases will\nvary with usage patterns). LN also greatly improves transaction speed\nand transaction privacy.\n\nFourth, Transaction Compression [7], observes that Bitcoin transaction\nserialization is not optimized for storage or network communication. If\ntransactions were optimally compressed (as is possible today), this\nwould improve scalability, but not capacity, by roughly 20%, and in some\ncases over 30%.\n\nFifth, Schnorr Signature Aggregation, which shrinks transactions by\nallowing many transactions to have a single shared signature, has been\nimplemented [8] in draft form in libsecp256k1, and will likely be ready\nby Q4 of 2016. One analysis [9] suggests that signature aggregation\nwould result in storage and bandwidth savings of at least 25%, which\nwould therefore increase scalability and capacity by a factor of 1.33.\nThe relative savings are even greater for multisignature transactions.\n\nSixth, drivechain [10], which allows bitcoins to be temporarily\noffloaded to 'alternative' blockchain networks (\"sidechains\"), is\ncurrently under peer review and may be usable by end of 2017. Although\nit has no impact on scalability, it does allow users to opt-in to\ngreater capacity, by moving their BTC to a new network (although, they\nwill achieve less decentralization as a result). Individual drivechains\nmay have different security tradeoffs (for example, a greater reliance\non UTXO commitments, or MimbleWimble's shrinking block history) which\nmay give them individually greater scalability than mainchain Bitcoin.\n\nFinally, the capacity improvements outlined above may not be sufficient.\nIf so, it may be necessary to use a hard fork to increase the blocksize\n(and blockweight, sigops, etc) by a moderate amount. Such an increase\nshould take advantage of the existing research on hard forks, which is\nsubstantial [11]. Specifically, there is some consensus that Spoonnet\n[12] is the most attractive option for such a hardfork. There is\ncurrently no consensus on a hard fork date, but there is a rough\nconsensus that one would require at least 6 months to coordinate\neffectively, which would place it in the year 2018 at earliest.\n\nThe above are only a small sample of current scaling technologies. And\neven an exhaustive list of scaling technologies, would itself only be a\nsmall sample of total Bitcoin innovation (which is proceeding at\nbreakneck speed).\n\nSigned,\n<Names Here>\n\n[1]\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011865.html\n[2] https://bitcoincore.org/en/2017/03/13/performance-optimizations-1/\n[3] http://bluematt.bitcoin.ninja/2016/07/07/relay-networks/\n[4] https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n[5]\nhttp://lightning.community/release/software/lnd/lightning/2017/05/03/litening/\n[6] https://github.com/ACINQ/eclair\n[7] https://people.xiph.org/~greg/compacted_txn.txt\n[8]\nhttps://github.com/ElementsProject/secp256k1-zkp/blob/d78f12b04ec3d9f5744cd4c51f20951106b9c41a/src/secp256k1.c#L592-L594\n[9] https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/\n[10] http://www.drivechain.info/\n[11] https://bitcoinhardforkresearch.github.io/\n[12]\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013542.html\n\n ==== End of Roadmap Draft ====\n\nIn short, please let me know:\n\n1. If you agree that it would be helpful if the roadmap were updated.\n2. To what extent, if any, you like this draft.\n3. Edits you would make (specifically, I wonder about Drivechain\nthoughts and Hard Fork thoughts, particularly how to phrase the Hard\nFork date).\n\nGoogle Doc (if you're into that kind of thing):\nhttps://docs.google.com/document/d/1gxcUnmYl7yM0oKR9NY9zCPbBbPNocmCq-jjBOQSVH-A/edit?usp=sharing\n\nCheers,\nPaul\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170710/60d2fe7d/attachment.sig>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-07-11T16:03:45",
                "message_text_only": "Concept ACK.\n\nI think you are overstating the readiness of drivechains though. I think\nthe optimistic estimate for drivechains to be ready for bitcoin core is a\nyear out from today. More likely the date should be early 2018. Still a lot\nof work to be done! :-)\n\nAlso I don't know if I would put a hard fork suggestion in the scaling map.\nIf drivechains are successful they should be viewed as the way we scale --\nnot hard forking the protocol. Do you still have capacity concerns if\ndrivechains are successful?\n\n-Chris\n\nOn Mon, Jul 10, 2017 at 11:50 AM, Paul Sztorc via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> Summary\n> =========\n>\n> In my opinion, Greg Maxwell's scaling roadmap [1] succeeded in a few\n> crucial ways. One success was that it synchronized the entire Bitcoin\n> community, helping to bring finality to the (endless) conversations of\n> that time, and get everyone back to work. However, I feel that the Dec\n> 7, 2015 roadmap is simply too old to serve this function any longer. We\n> should revise it: remove what has been accomplished, introduce new\n> innovations and approaches, and update deadlines and projections.\n>\n>\n> Why We Should Update the Roadmap\n> =================================\n>\n> In a P2P system like Bitcoin, we lack authoritative info-sources (for\n> example, a \"textbook\" or academic journal), and as a result\n> conversations tend to have a problematic lack of progress. They do not\n> \"accumulate\", as everyone must start over. Ironically, the scaling\n> conversation _itself_ has a fatal O(n^2) scaling problem.\n>\n> The roadmap helped solve these problems by being constant in size, and\n> subjecting itself to publication, endorsement, criticism, and so forth.\n> Despite the (unavoidable) nuance and complexity of each individual\n> opinion, it was at least globally known that X participants endorsed Y\n> set of claims.\n>\n> Unfortunately, the Dec 2015 roadmap is now 19 months old -- it is quite\n> obsolete and replacing it is long overdue. For example, it highlights\n> older items (CSV, compact blocks, versionbits) as being _future_\n> improvements, and makes no mention of new high-likelihood improvements\n> (Schnorr) or mis-emphasizes them (LN). It even contains mistakes (SegWit\n> fraud proofs). To read the old roadmap properly, one must already be a\n> technical expert. For me, this defeats the entire point of having one in\n> the first place.\n>\n> A new roadmap would be worth your attention, even if you didn't sign it,\n> because a refusal to sign would still be informative (and, therefore,\n> helpful)!\n>\n> So, with that in mind, let me present a first draft. Obviously, I am\n> strongly open to edits and feedback, because I have no way of knowing\n> everyone's opinions. I admit that I am partially campaigning for my\n> Drivechain project, and also for this \"scalability\"/\"capacity\"\n> distinction...that's because I believe in both and think they are\n> helpful. But please feel free to suggest edits.\n>\n> I emphasized concrete numbers, and concrete dates.\n>\n> And I did NOT necessarily write it from my own point of view, I tried\n> earnestly to capture a (useful) community view. So, let me know how I did.\n>\n>  ==== Beginning of New (\"July 2017\") Roadmap Draft ====\n>\n> This document updates the previous roadmap [1] of Dec 2015. The older\n> statement endorsed a belief that \"the community is ready to deliver on\n> its shared vision that addresses the needs of the system while upholding\n> its values\".\n>\n> That belief has not changed, but the shared vision has certainly grown\n> sharper over the last 18 months. Below is a list of technologies which\n> either increase Bitcoin's maximum tps rate (\"capacity\"), or which make\n> it easier to process a higher volume of transactions (\"scalability\").\n>\n> First, over the past 18 months, the technical community has completed a\n> number of items [2] on the Dec 2015 roadmap. VersonBits (BIP 9) enables\n> Bitcoin to handle multiple soft fork upgrades at once. Compact Blocks\n> (BIP 152) allows for much faster block propagation, as does the FIBRE\n> Network [3]. Check Sequence Verify (BIP 112) allows trading partners to\n> mutually update an active transaction without writing it to the\n> blockchain (this helps to enable the Lightning Network).\n>\n> Second, Segregated Witness (BIP 141), which reorganizes data in blocks\n> to handle signatures separately, has been completed and awaits\n> activation (multiple BIPS). It is estimated to increase capacity by a\n> factor of 2.2. It also improves scalability in many ways. First, SW\n> includes a fee-policy which encourages users to minimize their impact on\n> the UTXO set. Second, SW achieves linear scaling of sighash operations,\n> which prevents the network from crashing when large transactions are\n> broadcast. Third, SW provides an efficiency gain for everyone who is not\n> verifying signatures, as these no longer need to be downloaded or\n> stored. SegWit is an enabling technology for the Lightning Network,\n> script versioning (specifically Schnorr signatures), and has a number of\n> benefits which\n> are unrelated to capacity [4].\n>\n> Third, the Lightning Network, which allows users to transact without\n> broadcasting to the network, is complete [5, 6] and awaits the\n> activation of SegWit. For those users who are able to make a single\n> on-chain transaction, it is estimated to increase both capacity and\n> scalability by a factor of ~1000 (although these capacity increases will\n> vary with usage patterns). LN also greatly improves transaction speed\n> and transaction privacy.\n>\n> Fourth, Transaction Compression [7], observes that Bitcoin transaction\n> serialization is not optimized for storage or network communication. If\n> transactions were optimally compressed (as is possible today), this\n> would improve scalability, but not capacity, by roughly 20%, and in some\n> cases over 30%.\n>\n> Fifth, Schnorr Signature Aggregation, which shrinks transactions by\n> allowing many transactions to have a single shared signature, has been\n> implemented [8] in draft form in libsecp256k1, and will likely be ready\n> by Q4 of 2016. One analysis [9] suggests that signature aggregation\n> would result in storage and bandwidth savings of at least 25%, which\n> would therefore increase scalability and capacity by a factor of 1.33.\n> The relative savings are even greater for multisignature transactions.\n>\n> Sixth, drivechain [10], which allows bitcoins to be temporarily\n> offloaded to 'alternative' blockchain networks (\"sidechains\"), is\n> currently under peer review and may be usable by end of 2017. Although\n> it has no impact on scalability, it does allow users to opt-in to\n> greater capacity, by moving their BTC to a new network (although, they\n> will achieve less decentralization as a result). Individual drivechains\n> may have different security tradeoffs (for example, a greater reliance\n> on UTXO commitments, or MimbleWimble's shrinking block history) which\n> may give them individually greater scalability than mainchain Bitcoin.\n>\n> Finally, the capacity improvements outlined above may not be sufficient.\n> If so, it may be necessary to use a hard fork to increase the blocksize\n> (and blockweight, sigops, etc) by a moderate amount. Such an increase\n> should take advantage of the existing research on hard forks, which is\n> substantial [11]. Specifically, there is some consensus that Spoonnet\n> [12] is the most attractive option for such a hardfork. There is\n> currently no consensus on a hard fork date, but there is a rough\n> consensus that one would require at least 6 months to coordinate\n> effectively, which would place it in the year 2018 at earliest.\n>\n> The above are only a small sample of current scaling technologies. And\n> even an exhaustive list of scaling technologies, would itself only be a\n> small sample of total Bitcoin innovation (which is proceeding at\n> breakneck speed).\n>\n> Signed,\n> <Names Here>\n>\n> [1]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n> 2015-December/011865.html\n> [2] https://bitcoincore.org/en/2017/03/13/performance-optimizations-1/\n> [3] http://bluematt.bitcoin.ninja/2016/07/07/relay-networks/\n> [4] https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n> [5]\n> http://lightning.community/release/software/lnd/\n> lightning/2017/05/03/litening/\n> [6] https://github.com/ACINQ/eclair\n> [7] https://people.xiph.org/~greg/compacted_txn.txt\n> [8]\n> https://github.com/ElementsProject/secp256k1-zkp/blob/\n> d78f12b04ec3d9f5744cd4c51f20951106b9c41a/src/secp256k1.c#L592-L594\n> [9] https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/\n> [10] http://www.drivechain.info/\n> [11] https://bitcoinhardforkresearch.github.io/\n> [12]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n> 2017-February/013542.html\n>\n>  ==== End of Roadmap Draft ====\n>\n> In short, please let me know:\n>\n> 1. If you agree that it would be helpful if the roadmap were updated.\n> 2. To what extent, if any, you like this draft.\n> 3. Edits you would make (specifically, I wonder about Drivechain\n> thoughts and Hard Fork thoughts, particularly how to phrase the Hard\n> Fork date).\n>\n> Google Doc (if you're into that kind of thing):\n> https://docs.google.com/document/d/1gxcUnmYl7yM0oKR9NY9zCPbBbPNoc\n> mCq-jjBOQSVH-A/edit?usp=sharing\n>\n> Cheers,\n> Paul\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/8b9806dd/attachment-0001.html>"
            },
            {
                "author": "Adam Back",
                "date": "2017-07-11T16:49:57",
                "message_text_only": "Separate from scale, there is utility to a hard-fork to fix wish-list\nbugs that cant be reasonably fixed via soft-fork.  The spoonnet\nproposal fixes a good number of interesting bugs.  Spoonnet and\nseveral other HF research proposals can be found here\nhttps://bitcoinhardforkresearch.github.io/  Part of the research on HF\nis about safe deployment methods which is obviously the other main\nconsideration.  It seems to me likely that if the HF were to focus on\nbug fixes, and not mix in new tradeoffs of security vs scale, it would\nmore easily reach consensus.\n\nAdam\n\nOn 11 July 2017 at 17:03, Chris Stewart via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Concept ACK.\n>\n> I think you are overstating the readiness of drivechains though. I think the\n> optimistic estimate for drivechains to be ready for bitcoin core is a year\n> out from today. More likely the date should be early 2018. Still a lot of\n> work to be done! :-)\n>\n> Also I don't know if I would put a hard fork suggestion in the scaling map.\n> If drivechains are successful they should be viewed as the way we scale --\n> not hard forking the protocol. Do you still have capacity concerns if\n> drivechains are successful?\n>\n> -Chris\n>\n> On Mon, Jul 10, 2017 at 11:50 AM, Paul Sztorc via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>\n>> Summary\n>> =========\n>>\n>> In my opinion, Greg Maxwell's scaling roadmap [1] succeeded in a few\n>> crucial ways. One success was that it synchronized the entire Bitcoin\n>> community, helping to bring finality to the (endless) conversations of\n>> that time, and get everyone back to work. However, I feel that the Dec\n>> 7, 2015 roadmap is simply too old to serve this function any longer. We\n>> should revise it: remove what has been accomplished, introduce new\n>> innovations and approaches, and update deadlines and projections.\n>>\n>>\n>> Why We Should Update the Roadmap\n>> =================================\n>>\n>> In a P2P system like Bitcoin, we lack authoritative info-sources (for\n>> example, a \"textbook\" or academic journal), and as a result\n>> conversations tend to have a problematic lack of progress. They do not\n>> \"accumulate\", as everyone must start over. Ironically, the scaling\n>> conversation _itself_ has a fatal O(n^2) scaling problem.\n>>\n>> The roadmap helped solve these problems by being constant in size, and\n>> subjecting itself to publication, endorsement, criticism, and so forth.\n>> Despite the (unavoidable) nuance and complexity of each individual\n>> opinion, it was at least globally known that X participants endorsed Y\n>> set of claims.\n>>\n>> Unfortunately, the Dec 2015 roadmap is now 19 months old -- it is quite\n>> obsolete and replacing it is long overdue. For example, it highlights\n>> older items (CSV, compact blocks, versionbits) as being _future_\n>> improvements, and makes no mention of new high-likelihood improvements\n>> (Schnorr) or mis-emphasizes them (LN). It even contains mistakes (SegWit\n>> fraud proofs). To read the old roadmap properly, one must already be a\n>> technical expert. For me, this defeats the entire point of having one in\n>> the first place.\n>>\n>> A new roadmap would be worth your attention, even if you didn't sign it,\n>> because a refusal to sign would still be informative (and, therefore,\n>> helpful)!\n>>\n>> So, with that in mind, let me present a first draft. Obviously, I am\n>> strongly open to edits and feedback, because I have no way of knowing\n>> everyone's opinions. I admit that I am partially campaigning for my\n>> Drivechain project, and also for this \"scalability\"/\"capacity\"\n>> distinction...that's because I believe in both and think they are\n>> helpful. But please feel free to suggest edits.\n>>\n>> I emphasized concrete numbers, and concrete dates.\n>>\n>> And I did NOT necessarily write it from my own point of view, I tried\n>> earnestly to capture a (useful) community view. So, let me know how I did.\n>>\n>>  ==== Beginning of New (\"July 2017\") Roadmap Draft ====\n>>\n>> This document updates the previous roadmap [1] of Dec 2015. The older\n>> statement endorsed a belief that \"the community is ready to deliver on\n>> its shared vision that addresses the needs of the system while upholding\n>> its values\".\n>>\n>> That belief has not changed, but the shared vision has certainly grown\n>> sharper over the last 18 months. Below is a list of technologies which\n>> either increase Bitcoin's maximum tps rate (\"capacity\"), or which make\n>> it easier to process a higher volume of transactions (\"scalability\").\n>>\n>> First, over the past 18 months, the technical community has completed a\n>> number of items [2] on the Dec 2015 roadmap. VersonBits (BIP 9) enables\n>> Bitcoin to handle multiple soft fork upgrades at once. Compact Blocks\n>> (BIP 152) allows for much faster block propagation, as does the FIBRE\n>> Network [3]. Check Sequence Verify (BIP 112) allows trading partners to\n>> mutually update an active transaction without writing it to the\n>> blockchain (this helps to enable the Lightning Network).\n>>\n>> Second, Segregated Witness (BIP 141), which reorganizes data in blocks\n>> to handle signatures separately, has been completed and awaits\n>> activation (multiple BIPS). It is estimated to increase capacity by a\n>> factor of 2.2. It also improves scalability in many ways. First, SW\n>> includes a fee-policy which encourages users to minimize their impact on\n>> the UTXO set. Second, SW achieves linear scaling of sighash operations,\n>> which prevents the network from crashing when large transactions are\n>> broadcast. Third, SW provides an efficiency gain for everyone who is not\n>> verifying signatures, as these no longer need to be downloaded or\n>> stored. SegWit is an enabling technology for the Lightning Network,\n>> script versioning (specifically Schnorr signatures), and has a number of\n>> benefits which\n>> are unrelated to capacity [4].\n>>\n>> Third, the Lightning Network, which allows users to transact without\n>> broadcasting to the network, is complete [5, 6] and awaits the\n>> activation of SegWit. For those users who are able to make a single\n>> on-chain transaction, it is estimated to increase both capacity and\n>> scalability by a factor of ~1000 (although these capacity increases will\n>> vary with usage patterns). LN also greatly improves transaction speed\n>> and transaction privacy.\n>>\n>> Fourth, Transaction Compression [7], observes that Bitcoin transaction\n>> serialization is not optimized for storage or network communication. If\n>> transactions were optimally compressed (as is possible today), this\n>> would improve scalability, but not capacity, by roughly 20%, and in some\n>> cases over 30%.\n>>\n>> Fifth, Schnorr Signature Aggregation, which shrinks transactions by\n>> allowing many transactions to have a single shared signature, has been\n>> implemented [8] in draft form in libsecp256k1, and will likely be ready\n>> by Q4 of 2016. One analysis [9] suggests that signature aggregation\n>> would result in storage and bandwidth savings of at least 25%, which\n>> would therefore increase scalability and capacity by a factor of 1.33.\n>> The relative savings are even greater for multisignature transactions.\n>>\n>> Sixth, drivechain [10], which allows bitcoins to be temporarily\n>> offloaded to 'alternative' blockchain networks (\"sidechains\"), is\n>> currently under peer review and may be usable by end of 2017. Although\n>> it has no impact on scalability, it does allow users to opt-in to\n>> greater capacity, by moving their BTC to a new network (although, they\n>> will achieve less decentralization as a result). Individual drivechains\n>> may have different security tradeoffs (for example, a greater reliance\n>> on UTXO commitments, or MimbleWimble's shrinking block history) which\n>> may give them individually greater scalability than mainchain Bitcoin.\n>>\n>> Finally, the capacity improvements outlined above may not be sufficient.\n>> If so, it may be necessary to use a hard fork to increase the blocksize\n>> (and blockweight, sigops, etc) by a moderate amount. Such an increase\n>> should take advantage of the existing research on hard forks, which is\n>> substantial [11]. Specifically, there is some consensus that Spoonnet\n>> [12] is the most attractive option for such a hardfork. There is\n>> currently no consensus on a hard fork date, but there is a rough\n>> consensus that one would require at least 6 months to coordinate\n>> effectively, which would place it in the year 2018 at earliest.\n>>\n>> The above are only a small sample of current scaling technologies. And\n>> even an exhaustive list of scaling technologies, would itself only be a\n>> small sample of total Bitcoin innovation (which is proceeding at\n>> breakneck speed).\n>>\n>> Signed,\n>> <Names Here>\n>>\n>> [1]\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011865.html\n>> [2] https://bitcoincore.org/en/2017/03/13/performance-optimizations-1/\n>> [3] http://bluematt.bitcoin.ninja/2016/07/07/relay-networks/\n>> [4] https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n>> [5]\n>>\n>> http://lightning.community/release/software/lnd/lightning/2017/05/03/litening/\n>> [6] https://github.com/ACINQ/eclair\n>> [7] https://people.xiph.org/~greg/compacted_txn.txt\n>> [8]\n>>\n>> https://github.com/ElementsProject/secp256k1-zkp/blob/d78f12b04ec3d9f5744cd4c51f20951106b9c41a/src/secp256k1.c#L592-L594\n>> [9] https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/\n>> [10] http://www.drivechain.info/\n>> [11] https://bitcoinhardforkresearch.github.io/\n>> [12]\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013542.html\n>>\n>>  ==== End of Roadmap Draft ====\n>>\n>> In short, please let me know:\n>>\n>> 1. If you agree that it would be helpful if the roadmap were updated.\n>> 2. To what extent, if any, you like this draft.\n>> 3. Edits you would make (specifically, I wonder about Drivechain\n>> thoughts and Hard Fork thoughts, particularly how to phrase the Hard\n>> Fork date).\n>>\n>> Google Doc (if you're into that kind of thing):\n>>\n>> https://docs.google.com/document/d/1gxcUnmYl7yM0oKR9NY9zCPbBbPNocmCq-jjBOQSVH-A/edit?usp=sharing\n>>\n>> Cheers,\n>> Paul\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2017-07-11T20:01:10",
                "message_text_only": "On Jul 11, 2017 09:18, \"Chris Stewart via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nConcept ACK.\n\nIf drivechains are successful they should be viewed as the way we scale\n\n\nI strongly disagree with that statement.\n\nDrivechains, and several earlier sidechains ideas, are not a scalability\nimprovement, but merely enabling users to opt-in for another security model.\n\nWhile obviously any future with wider adoption will need different\ntechnologies that have different trade-offs, and anyone is free to choose\ntheir security model, I don't think this particular one is interesting. In\nterms of validation cost to auditors, it is as bad as just a capacity\nincrease on chain, while simultaneously adding the extra risk of miners\nbeing able to vote to steal your money.\n\nCheers,\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/6c7b8145/attachment.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-11T20:36:36",
                "message_text_only": "Pieter,\n\nI think that you have misrepresented Chris' view by taking it out of\ncontext. His complete quote reads \"If drivechains are successful they\nshould be viewed as the way we scale -- not hard forking the protocol.\"\nChris is comparing Drivechains/sidechains to a hard fork.\n\nYou went on to \"disagree\", but every point of contention you introduced\nwas something that would apply to both drivechain-sourced capacity and\nhardfork-sourced capacity. Neither improves scalability, and both allow\nusers only the opportunity to select a different security model. If I\nunderstand you, the point at which a security model does not become\n\"interesting\" to you, would be the exact same point in the drivechain\nand hardfork worlds. Both, at any rate, have the same effect on\n\"validation cost to auditors\".\n\nThe only true difference is the \"extra risk of miners being able to vote\nto steal your money\", but as I have pointed out on this mailing list\nseveral times, I do not actually believe that there is any marginal risk\n-- miners can already \"vote to steal your money\" in the double-spend and\nln-channel-theft contexts. I have also argued that the \"risk\" is\nactually desirable in an opt-in context, because it puts the burden of\nproof on miners/developers (to convince users that they should move over\nto the sidechain). Since their sidechain coins cannot appreciate in\nvalue relative to the mainchain coins, users would only opt-in if they\nfelt that they were sufficiently compensated for any and all risks.\nHence, it is difficult to list this item as a drawback when, to the\nuser, it is a strict improvement (at least, by any epistemological\nstandard that I can think of). If you have new objections to these\nclaims, I'm sure we would all benefit from hearing them, myself most of all.\n\nPaul\n\n\nOn 7/11/2017 4:01 PM, Pieter Wuille wrote:\n> On Jul 11, 2017 09:18, \"Chris Stewart via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Concept ACK.\n>\n>     If drivechains are successful they should be viewed as the way we\n>     scale\n>\n>\n> I strongly disagree with that statement.\n>\n> Drivechains, and several earlier sidechains ideas, are not a\n> scalability improvement, but merely enabling users to opt-in for\n> another security model.\n>\n> While obviously any future with wider adoption will need different\n> technologies that have different trade-offs, and anyone is free to\n> choose their security model, I don't think this particular one is\n> interesting. In terms of validation cost to auditors, it is as bad as\n> just a capacity increase on chain, while simultaneously adding the\n> extra risk of miners being able to vote to steal your money.\n>\n> Cheers,\n>\n> -- \n> Pieter\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/3fa37fbd/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2017-07-11T21:40:36",
                "message_text_only": "On Tue, Jul 11, 2017 at 1:36 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n> Pieter,\n>\n> I think that you have misrepresented Chris' view by taking it out of\n> context. His complete quote reads \"If drivechains are successful they should\n> be viewed as the way we scale -- not hard forking the protocol.\" Chris is\n> comparing Drivechains/sidechains to a hard fork.\n\nI apologize here; I didn't mean to misrepresent his viewpoint.\n\n> You went on to \"disagree\", but every point of contention you introduced was\n> something that would apply to both drivechain-sourced capacity and\n> hardfork-sourced capacity. Neither improves scalability, and both allow\n> users only the opportunity to select a different security model. If I\n> understand you, the point at which a security model does not become\n> \"interesting\" to you, would be the exact same point in the drivechain and\n> hardfork worlds. Both, at any rate, have the same effect on \"validation cost\n> to auditors\".\n\nIf you're talking about the extreme case where every full node in the\nincreased capacity single chain model corresponds to a node that\nvalidates both chains and all transfers between them in the\ndrivechains, I agree. At that point they become nearly equivalent in\nterms of ease of adoption, resource costs, and capacity.\n\nHowever, I don't think that is a realistic expectation. When\nconsidering drivechains as a capacity increase, I believe most people\nthink about a situation where there are many chains that give an\nincreased capacity combined, but not everyone verifies all of them.\nThis is what I meant with uninteresting security model, as it requires\nincreased miner trust for preventing the other chains' coins from\nbeing illegally transferred to the chain you're operating on.\n\nRegardless, people are free experiment and adopt such an approach. The\nnice thing about it not being a hardfork is that it does not require\nnetwork-wide consensus to deploy. However, I don't think they offer a\nsecurity model that should be encouraged, and thus doesn't have a\nplace on a roadmap.\n\n> Since their sidechain coins cannot appreciate in value relative\n> to the mainchain coins, users would only opt-in if they felt that they were\n> sufficiently compensated for any and all risks. Hence, it is difficult to\n> list this item as a drawback when, to the user, it is a strict improvement\n> (at least, by any epistemological standard that I can think of). If you have\n> new objections to these claims, I'm sure we would all benefit from hearing\n> them, myself most of all.\n\nAm I right in summarizing your point here as \"This approach cannot\nhurt, because if it were insecure, people can choose to not use it.\"?\nI'm not sure I agree with that, as network effects or misinformation\nmay push users beyond what is reasonable.\n\nCheers,\n\n-- \nPieter"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-11T22:49:19",
                "message_text_only": "On 7/11/2017 5:40 PM, Pieter Wuille wrote:\n> On Tue, Jul 11, 2017 at 1:36 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>> Pieter,\n>>\n>> I think that you have misrepresented Chris' view by taking it out of\n>> context. His complete quote reads \"If drivechains are successful they should\n>> be viewed as the way we scale -- not hard forking the protocol.\" Chris is\n>> comparing Drivechains/sidechains to a hard fork.\n> I apologize here; I didn't mean to misrepresent his viewpoint.\nI'm sure you did not intend to do so, of course.\n\n>> You went on to \"disagree\", but every point of contention you introduced was\n>> something that would apply to both drivechain-sourced capacity and\n>> hardfork-sourced capacity. Neither improves scalability, and both allow\n>> users only the opportunity to select a different security model. If I\n>> understand you, the point at which a security model does not become\n>> \"interesting\" to you, would be the exact same point in the drivechain and\n>> hardfork worlds. Both, at any rate, have the same effect on \"validation cost\n>> to auditors\".\n> If you're talking about the extreme case where every full node in the\n> increased capacity single chain model corresponds to a node that\n> validates both chains and all transfers between them in the\n> drivechains, I agree. At that point they become nearly equivalent in\n> terms of ease of adoption, resource costs, and capacity.\n>\n> However, I don't think that is a realistic expectation. When\n> considering drivechains as a capacity increase, I believe most people\n> think about a situation where there are many chains that give an\n> increased capacity combined, but not everyone verifies all of them.\n> This is what I meant with uninteresting security model, as it requires\n> increased miner trust for preventing the other chains' coins from\n> being illegally transferred to the chain you're operating on.\nI think I understand what you are saying, but in this case \"it\" [your\nexperience] isn't a different security model *for you*. Perhaps we\ndisagree on the significance of this qualification.\n\nIt seems to be me that your position puts you in danger of having to go\nout and protect users from investing in insecure _Altcoins_. Probably,\nin a world where altcoins were magically impossible, there would be an\neven greater demand for Bitcoin capacity than there is in our\nAltcoin-filled world (for a few reasons).\n\n> Regardless, people are free experiment and adopt such an approach. The\n> nice thing about it not being a hardfork is that it does not require\n> network-wide consensus to deploy. However, I don't think they offer a\n> security model that should be encouraged, and thus doesn't have a\n> place on a roadmap.\nI think this is reasonable. It is true that, if no one used drivechains\never for anything, there would be no transactions offloaded to those\nchain, and then no capacity freed up on the original mainchain.\n\nHowever, though I think your logic is correct in general, I think in\nthis specific instance it would be somewhat unreasonable to ignore the\nfact that, today, we have clear evidence that many people *are* in fact\nchomping at the bit to literally leave this blockchain for one that is\nalmost identical save for a larger maxblocksize.\n\n\n>> Since their sidechain coins cannot appreciate in value relative\n>> to the mainchain coins, users would only opt-in if they felt that they were\n>> sufficiently compensated for any and all risks. Hence, it is difficult to\n>> list this item as a drawback when, to the user, it is a strict improvement\n>> (at least, by any epistemological standard that I can think of). If you have\n>> new objections to these claims, I'm sure we would all benefit from hearing\n>> them, myself most of all.\n> Am I right in summarizing your point here as \"This approach cannot\n> hurt, because if it were insecure, people can choose to not use it.\"?\n> I'm not sure I agree with that, as network effects or misinformation\n> may push users beyond what is reasonable.\nAgain, I think you may be right. However, users may be similarly misled\nin the case of Altcoins (or in the case of investments in fiat\ncurrency), and they may be misled in their use of all kinds of\ncryptographic software, and in the clothes that they buy and all of\ntheir other activities.\n\nI would strongly support clear expectations, and constant reminders to\nusers that the security models are different. Perhaps, even, annoying\ndialogue boxes that pop up when/if a user tries to move their funds to a\nsidechain.\n\nBut, again, this (I think) is something that would *also* apply to a\nhard fork. We cannot know if Pieter Wuille, for example, believes that a\ngiven hard fork is \"push[ing] users beyond what is reasonable\" until we\nask him.\n\n--Paul"
            },
            {
                "author": "CryptAxe",
                "date": "2017-07-11T21:16:52",
                "message_text_only": "If users can opt-in to another security model, why can't they opt-in to\nanother scaling model? The mainchain (Bitcoin) does not have to adopt\nany of the changes made to a sidechain such as larger blocks for example.\n\n\nOn 07/11/2017 01:01 PM, Pieter Wuille via bitcoin-dev wrote:\n> On Jul 11, 2017 09:18, \"Chris Stewart via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Concept ACK.\n>\n>     If drivechains are successful they should be viewed as the way we\n>     scale\n>\n>\n> I strongly disagree with that statement.\n>\n> Drivechains, and several earlier sidechains ideas, are not a\n> scalability improvement, but merely enabling users to opt-in for\n> another security model.\n>\n> While obviously any future with wider adoption will need different\n> technologies that have different trade-offs, and anyone is free to\n> choose their security model, I don't think this particular one is\n> interesting. In terms of validation cost to auditors, it is as bad as\n> just a capacity increase on chain, while simultaneously adding the\n> extra risk of miners being able to vote to steal your money.\n>\n> Cheers,\n>\n> -- \n> Pieter\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/1de23cb2/attachment.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-11T20:18:04",
                "message_text_only": "Hi Chris,\n\nOn 7/11/2017 12:03 PM, Chris Stewart wrote:\n> Concept ACK.\n>\n> I think you are overstating the readiness of drivechains though. I\n> think the optimistic estimate for drivechains to be ready for bitcoin\n> core is a year out from today. More likely the date should be early\n> 2018. Still a lot of work to be done! :-)\nIt depends on interest, I think. What remains to be done is more easily\nparallelized, and in some cases (eg smartphone wallets) there are\nincentives for private individuals and businesses to hustle their part\nout (merely for reasons of competitiveness).\n\n> Also I don't know if I would put a hard fork suggestion in the scaling\n> map. If drivechains are successful they should be viewed as the way we\n> scale -- not hard forking the protocol. Do you still have capacity\n> concerns if drivechains are successful?\n\nI wrote the roadmap to try to be representative of a Core / developer\nposition. I am philosophically against hard forks, but HFs were in the\nend of the previous roadmap so I felt it should stay. And, I felt that\nif I decided to unilaterally remove it, it would be perceived as\nexcessive campaigning for Drivechain. And I also felt that to remove it,\nwhen so many industry members recently put their weight behind a fast\nhard fork, would be perceived as a reaction to that attempt, and would\nthen overwhelm the document with political polarization, for really no\nbenefit.\n\nPaul\n\n>\n> -Chris\n>\n> On Mon, Jul 10, 2017 at 11:50 AM, Paul Sztorc via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>\n>     Summary\n>     =========\n>\n>     In my opinion, Greg Maxwell's scaling roadmap [1] succeeded in a few\n>     crucial ways. One success was that it synchronized the entire Bitcoin\n>     community, helping to bring finality to the (endless) conversations of\n>     that time, and get everyone back to work. However, I feel that the Dec\n>     7, 2015 roadmap is simply too old to serve this function any\n>     longer. We\n>     should revise it: remove what has been accomplished, introduce new\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/6b8452e0/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-11T21:31:29",
                "message_text_only": "On Tue, Jul 11, 2017 at 8:18 PM, Paul Sztorc via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I wrote the roadmap to try to be representative of a Core / developer\n> position.\n\nA fine intention, but I've checked with many of the top contributors\nand it sounds like the only regular developer you spoke with was\nLuke-Jr.  Next time you seek to represent someone you might want to\ntry talking to them!\n\n> I am philosophically against hard forks, but HFs were in the end\n> of the previous roadmap so I felt it should stay. And, I felt that if I\n\nI think the project is not philosophically against hardforks, at least\nnot in an absolute sense.\n\nPart of the reason they were discussed in the capacity document was to\nmake it clear that I wasn't, and to invite other project members to\nexpose disagreement (though I'd mostly checked in advance...)\n\nBut these recently proposed ultra-hasty highly contentious changes,\nthat seem to be being suggested on shorter and shorter timeframes; I\ndo think the project is actually opposed to those in a very strong\nsense.\n\nBut if you were instead to talk about things like fixing timewarp,\nrecovering header bits, etc. It would clearly be the other way.\n\nAt least at the moment computers and bandwidth are improving; I don't\nthink any regular developers are opposed to hardforks that change\ncapacity well tech improvements and protocol improvements have made it\nobviously not much of a trade-off.\n\nPersonally, I wish the project had previously adopted a license that\nrequires derived works to not accept any block the derived-from work\nwouldn't accept for at least two years, or otherwise the derivative\nhas to be clearly labeled not-bitcoin. :P\n\nIn any case, I think it's safe to say that people's opinions on\nhardforks are complicated. And all the smoke right now with unusually\npoorly executed proposals probably clouds clear thinking."
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-11T22:27:56",
                "message_text_only": "On 7/11/2017 5:31 PM, Gregory Maxwell wrote:\n> On Tue, Jul 11, 2017 at 8:18 PM, Paul Sztorc via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> I wrote the roadmap to try to be representative of a Core / developer\n>> position.\n> A fine intention, but I've checked with many of the top contributors\n> and it sounds like the only regular developer you spoke with was\n> Luke-Jr.  Next time you seek to represent someone you might want to\n> try talking to them!\nThat is false. I could provide a list of names but I'm really not sure\nwhat would be gained as result. You yourself admit that it is an\nexcellent list of research, almost all which you support directly.\n\nSo I think your only real objection is that I didn't talk to you\nspecifically.\n\n>> I am philosophically against hard forks, but HFs were in the end\n>> of the previous roadmap so I felt it should stay. And, I felt that if I\n> I think the project is not philosophically against hardforks, at least\n> not in an absolute sense.\nThat is why I included them despite being personally against them.\n> But if you were instead to talk about things like fixing timewarp,\n> recovering header bits, etc. It would clearly be the other way.\nIt links to bitcoinhardforkresearch.github.io , which I assumed would\ncontain the hard fork wishlist somewhere, but perhaps it does not.\n\n> In any case, I think it's safe to say that people's opinions on\n> hardforks are complicated. And all the smoke right now with unusually\n> poorly executed proposals probably clouds clear thinking.\n\nYes, of course. But is your position that if something is complicated we\nshould not try to clarify it?"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-11T21:11:38",
                "message_text_only": "I think it's great that people want to experiment with things like\ndrivechains/sidechains and what not, but their security model is very\ndistinct from Bitcoin's and, given the current highly centralized\nmining ecosystem, arguably not very good.  So positioning them as a\nmajor solution for the Bitcoin project is the wrong way to go. Instead\nwe should support people trying cool stuff, at their own risk.\n\nSo, given that although the vast majority of the things in the document\nare things I've been supporting for months (Please see Note 1 way down\nat the bottom) I cannot support your document.\n\nI think you may have have missed how much work I put into what I published\nbefore talking with people who actually work on the project to find out\nwhat they wouldn't object to before publishing the prior document--\nand how much I left out that I would have loved to have in; and why\nI specifically held back from describing it as a roadmap or prompting\npeople to sign onto it (though they did of their own accord).\n\nOn a more meta-subject, I think grandly stated \"top down\" roadmaps\nin highly collaborative development are of minimal utility at best and\nactively misleading at worst. Fundamentally, it misunderstands the nature\nof peer collaboration. It's kind of like asking for a roadmap for the\ndevelopment of fusion power; individual practitioners have their own\nroadmaps, but the collaboration of science does not.\n\nConsider an example,\n\nThe Linux kernel is one of the largest and best funded open source\nprojects, which produces the most widely used operating system kernel\nin the world and one of the most widely used pieces of software of all\ntime, and it produces _no_ roadmaps.\n\nQuoting Andrew Morton, \"Instead of a roadmap, there are technical\nguidelines. Instead of a central resource allocation, there are\npersons and companies who all have a stake in the further development\nof the Linux kernel, quite independently from one another: People like\nLinus Torvalds and I don\u2019t plan the kernel evolution. We don\u2019t sit\nthere and think up the roadmap for the next two years, then assign\nresources to the various new features. That's because we don\u2019t have\nany resources. The resources are all owned by the various corporations\nwho use and contribute to Linux, as well as by the various independent\ncontributors out there. It's those people who own the resources who\ndecide.\"\n\nLinus remarked, \"I look at the current release and the next one, as I\ndon't think planning 10 years ahead is sane.\"\n\nYet the Linux kernel still has every advantage over us:  They have far\nmore contributing resources from far more sources, they have a fairly\ncentralized model and control over their own destiny because they have\na much more functional pathway to disagreement than we have in Bitcoin\nfor consensus rules.\n\nIMO the way to do \"roadmaps\" in Bitcoin is to roadmap the finalization\nand release process once the basic technology is done; because it's\nonly past that point that guarantees can really start being made.\n\nBut that isn't what your document does-- it names a lot of things which\nare still various shades of research at this point (much of it research\nI'm working on and strongly support, in fact--)\n\nWe can also talk in a visionary sense about the sorts of things we're\nexploring, but it just isn't possible to nail down when they'll be\nready until they are: If it's not something the linux kernel can do,\nit's not something we can do.  These are neat and existing ideas,\nbut not a roadmap.\n\nAt least not as a group. Individually contributing parties have a lot\nmore visibility and control into their own activities, and there is\nvirtue in forecasting at that level. Redhat, for example, has\nroadmaps. They primarily deal with stabilization and support of\nalready existing technology that you could get in the raw from the\nvarious upstream sources (fedora, kernel, etc.). (see for an example,\nhttp://www.slideshare.net/albertspijkers/red-hat-enterprise-linux-roadmap\n)\n\nSeparately, what we can do stably in Core is have timely reliable\nreleases.  Juniper made it 10 years with regular timed releases that\ndid not slip by more than IIRC three days and which were _all_ production\ndeployable (things changed later, but thats another story).\n\nThis was an incredible benefit to our customers, but the only way it was\npossible was because _features_ were not guaranteed in a release.\nIf a feature failed during the final testing and it needed more than the\nmost trivial of fixes, it was _removed_ or disabled.  As soon as there\nare multiple in-flight deliverables it becomes more important to be\ntimely over-all even that that significantly delays single deliverables.\nThis is effectively at odds with hard deadlines on functionality, even\nbefore getting into the fact that for consensus features delivery in\nsoftware is irrelevant until activation which is a public election.\n(E.g. we shipped segwit almost a year ago, but it still hasn't arrived\nfor users).\n\n>From the perspective of Bitcoin I think what people are actually\nasking for us to do is to (help) drive the Bitcoin Story-- the actual\ntechnology and its timelines is usually not that relevant: if it were,\nthey'd be stepping up with resources to contribute to it. There are\nmany ways to do that, -- we don't have to use highly authoritarian\nmethods that wouldn't even work for the Linux kernel.\n\n[And all these projects you listed, your help would be more than welcome!]\n\nThis can be done by a mixture of talking about research _as research_\nnot a done deal, and by moving discussions of non-research things to\nwhere they're actually more forecastable.  98% of the public\ndiscussion about segwit was before the pull request, -- there were\nsolid political reasons for this-- but it was the wrong timing.  On\nthe case of CSV and CLTV, the general public didn't hear about them\nuntil they were merged -- pretty much-- and the timing then was much\nmore compatible with 'roadmapping' +/- activation uncertainty.\n\nSome of this is driven by competitive pressure with things like\nEthereum or other altcoins (e.g. dash, god save us) that have a lot\nlower commitment to engineering integrity or even logical consistency.\nWe can't compete with technobabble bullshit, and we shouldn't try and\nas a side effect back ourselves into a corner where we're making\nremarkable accomplishments but regarded as failures in payment\n(because we either forecast it taking N years, which is the best we\ncould promise, or because we forecast the best we might achieve and it\nwas both still too long and the timeframe got missed).\n\nOne of the big screwups with segwit handling was people sticking\nsome random unrealistic date on it it which was done AFAIK,\nby well meaning folks who took some random numbers from people\nworking on it for when they'd be done with the development-- not the\ntesting, not the integration, and certainly not deployment and published\nit as The Date.  Then even though the development was actually done\nby them, segwit was portrayed as massively delayed, because what\nmatters to the users is deployment-- which we can't control.\n\nI see you've done this yourself with signature aggregation, sticking Q4 2016\nright on it, which as far as I can tell is a figure that comes from mars.\n(Well not quite mars, see Note 1)\nProbably we'll have the research and an implementation done by then, but\nwith so much uncertainty around segwit activation, I doubt anyone can be\nabout when users will be able to use it (which is what they care about!)\n\nIt's also not really appropriate to ask people to sign onto stuff when they\ncan't even review it.  Perhaps the signature aggregation stuff is insecure,\npatent encumbered, or practically useless... (It won't be but no one could\ntell that from your post; because it doesn't even exist as a concrete proposal)\n\nI think people would rightly protest about a number of these things-- especially\nthings like the the agg sigs and tx compaction, \"wtf, I've not heard\nof this. Who\nare you to insist this goes into Bitcoin?\"\n\nIn any case; I can repeat the same story for major RFCs, FWIW.  Collaborative\ninnovation is _very_ hard to stick to a tight schedule.  And road-maps\nof totally prospective technology that no one has the actual authority to make\nhappen aren't a productive thing for the industry.\n\nIn a few weeks you'll start seeing articles on the major new things\ncoming in Bitcoin Core 0.15,\n-- now that we can do, because the work is done, and the outcome is\nvery predictable. There are some awesome improvements around it-- ones\nwe can rally around; and know will be delivered for sure.\n\n\n[  Note 1: I think it is important to disclose that several of the\nitems in this list appear to be more or less quoted out of my own\nblockstream-internal descriptions of things we've been working on in\nBitcoin.\n\nA while back Adam Back asked me to publish something which contained\nsignificant chunks of this document more or less verbatim, and I\ndeclined saying that I personally disagree with some of his points and\ndidn't think that Blockstream attempting to redirect the Bitcoin\nproject (esp towards drivechains) was appropriate-- along with my\n(above) views on roadmaps (which I have included here a private email\nthread on the subject). I feel it's important to disclose this, and\nthat the document was not otherwise created with the input of project\ncontributors (except Luke-Jr, apparently). I wasn't previously aware\nthat Adam had been working with Paul on this, had I been I would have\nalso encouraged people to be a little more transparent about it. ]"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-11T21:40:28",
                "message_text_only": "On Tue, Jul 11, 2017 at 9:11 PM, Gregory Maxwell <greg at xiph.org> wrote:\n> which I have included here a private email\n> thread on the subject\n\nTo make it clear, since I munged the English on this: Most of my post\nis just copied straight out of a private thread where I explained my\nperspective on 'roadmaps' as they apply to projects like Bitcoin."
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-11T22:17:19",
                "message_text_only": "Hi Greg,\n\n\nOn 7/11/2017 5:11 PM, Gregory Maxwell wrote:\n> I think it's great that people want to experiment with things like\n> drivechains/sidechains and what not, but their security model is very\n> distinct from Bitcoin's and, given the current highly centralized\n> mining ecosystem, arguably not very good.  So positioning them as a\n> major solution for the Bitcoin project is the wrong way to go. Instead\n> we should support people trying cool stuff, at their own risk.\n>\n> So, given that although the vast majority of the things in the document\n> are things I've been supporting for months (Please see Note 1 way down\n> at the bottom) I cannot support your document.\nIs this the only reason you do not support the document? If so I would\nbe happy to take out the section, if enough people share such a view.\n\nAs to your specific complaints, I have addressed both the security model\nand the concept of mining centralization on this list in the recent\npast. I would like to hear your responses to my claims, if you are\nwilling to share them. As for positioning DC as a major solution, it is\na little confusing because Luke-Jr and Adam back seem to feel it is at\nleast worth discussing on those terms (and I know of no reason why it\nwould not be discussed on those terms). The peer review here on\n[bitcoin-dev] seemed to be moving forward without any serious\nobjections. And it seems unsportsmanlike for you to object, for reasons\nwhich you keep only to yourself.\n\n\n> On a more meta-subject, I think grandly stated \"top down\" roadmaps\n> in highly collaborative development are of minimal utility at best \nI'm aiming for minimal utility.\n\n> IMO the way to do \"roadmaps\" in Bitcoin is to roadmap the finalization\n> and release process once the basic technology is done; because it's\n> only past that point that guarantees can really start being made.\n>\n> But that isn't what your document does-- it names a lot of things which\n> are still various shades of research at this point\nI don't understand this at all. This document attempts to do exactly\nwhat its predecessor did -- nothing more or less.\n\n> This was an incredible benefit to our customers, but the only way it was\n> possible was because _features_ were not guaranteed in a release.\nNo one is suggesting that features be guaranteed, either ever or in\nreleases.\n\n\n> One of the big screwups with segwit handling was people sticking\n> some random unrealistic date on it it which was done AFAIK,\n> by well meaning folks who took some random numbers from people\n> working on it for when they'd be done with the development-- not the\n> testing, not the integration, and certainly not deployment and published\n> it as The Date.  Then even though the development was actually done\n> by them, segwit was portrayed as massively delayed, because what\n> matters to the users is deployment-- which we can't control.\nI really don't think they are related. For a start, software is almost\nalways delayed. An obvious second is that this entire scaling\nconversation is polarized to the hilt and everyone that can be blamed\nfor something has been blamed for something.\n\nNo one likes to be held to a certain deadline, but this roadmap is just\nabout producing some clarity for people who do not do this 24/7.\n\n> I see you've done this yourself with signature aggregation, sticking Q4 2016\n> right on it, which as far as I can tell is a figure that comes from mars.\nI asked Adam Back for it.\n\n> It's also not really appropriate to ask people to sign onto stuff when they\n> can't even review it.  Perhaps the signature aggregation stuff is insecure,\n> patent encumbered, or practically useless... (It won't be but no one could\n> tell that from your post; because it doesn't even exist as a concrete proposal)\nAgain, I think you're missing the point. If there is a problem with SA,\nyou can just suggest it be removed from the document.\n\n\n> I think people would rightly protest about a number of these things-- especially\n> things like the the agg sigs and tx compaction, \"wtf, I've not heard\n> of this. Who\n> are you to insist this goes into Bitcoin?\"\nThis is a very strange argument. I would consider it a benefit if people\nlearned from the document, and discovered things that they had not heard\nof before.\n\nThere is no \"insisting\" of any kind.\n\n\n> [  Note 1: I think it is important to disclose that several of the\n> items in this list appear to be more or less quoted out of my own\n> blockstream-internal descriptions of things we've been working on in\n> Bitcoin.\n> A while back Adam Back asked me to publish something which contained\n> significant chunks of this document more or less verbatim, \nHe probably showed you an earlier draft. But I wrote almost all of this\nmyself, and I can only recall 2 or 3 phrases (not even complete\nsentences) included from Adam Back. And most of the phrases are\nthemselves just boring descriptions that I'm sure anyone could write.\nSome phrases may have simply been taken from bitcoincore.org or\nsomewhere similar.\n\nI am not exactly sure what you are insinuating but I encourage you to\nclarify it.\n\n> and I\n> declined saying that I personally disagree with some of his points and\n> didn't think that Blockstream attempting to redirect the Bitcoin\n> project (esp towards drivechains) was appropriate-- along with my\n> (above) views on roadmaps (which I have included here a private email\n> thread on the subject). I feel it's important to disclose this, and\n> that the document was not otherwise created with the input of project\n> contributors (except Luke-Jr, apparently). I wasn't previously aware\n> that Adam had been working with Paul on this, had I been I would have\n> also encouraged people to be a little more transparent about it. ]\nI really don't understand what you are disclosing. That Adam asked you\nfor feedback on the draft? And then, in the next sentence, that not\nenough experts were asked for feedback on the draft? I'm legitimately\nconfused by this part.\n\nAs I stated, we can remove the drivechain section. But surely you can\nappreciate how bizarre your position on roadmaps is. What exactly, did\nyou intended to create at [1]? Since it is described explicitly as \"the\nroadmap in Capacity increases for the Bitcoin system\", have you been\ndisagreeing with it's characterization as a 'roadmap' this entire time?\nOne wonders why you haven't said anything until now.\n\n[1] https://bitcoincore.org/en/2015/12/21/capacity-increase/\n\nIn my first email I list the benefits of having a roadmap. One benefit\nis that, without one, it is likely that a large majority of outsiders\nhave almost no idea at all what is being worked on, what effect it will\nhave, or when it might be ready, or to whom/what they should turn to for\nadvice on such matters. Do you have a different way of addressing this\ncommunication problem?\n\nPaul"
            },
            {
                "author": "Tao Effect",
                "date": "2017-07-11T22:41:18",
                "message_text_only": "Dear Paul,\n\nDrivechain has several issues that you've acknowledged but have not, IMO, adequately (at all really) addressed [1].\n\nI think there are far safer solutions for scaling Bitcoin and integrating it with other chains than DC, which is again, a serious security risk to the whole network, as per [1].\n\nAdopting DC would be an irreversible course of action, and one that in my opinion would unnecessarily damage not only other sidechains, but the main chain as well.\n\nThere is no rush, a proper solution is likely to present itself (I even have one that I'm toying with, but it's not quite ready yet for publication). I'm sure others are thinking similar thoughts too.\n\nKind regards,\nGreg Slepak\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014600.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014600.html>\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jul 11, 2017, at 3:17 PM, Paul Sztorc via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> Hi Greg,\n> \n> \n> On 7/11/2017 5:11 PM, Gregory Maxwell wrote:\n>> I think it's great that people want to experiment with things like\n>> drivechains/sidechains and what not, but their security model is very\n>> distinct from Bitcoin's and, given the current highly centralized\n>> mining ecosystem, arguably not very good.  So positioning them as a\n>> major solution for the Bitcoin project is the wrong way to go. Instead\n>> we should support people trying cool stuff, at their own risk.\n>> \n>> So, given that although the vast majority of the things in the document\n>> are things I've been supporting for months (Please see Note 1 way down\n>> at the bottom) I cannot support your document.\n> Is this the only reason you do not support the document? If so I would\n> be happy to take out the section, if enough people share such a view.\n> \n> As to your specific complaints, I have addressed both the security model\n> and the concept of mining centralization on this list in the recent\n> past. I would like to hear your responses to my claims, if you are\n> willing to share them. As for positioning DC as a major solution, it is\n> a little confusing because Luke-Jr and Adam back seem to feel it is at\n> least worth discussing on those terms (and I know of no reason why it\n> would not be discussed on those terms). The peer review here on\n> [bitcoin-dev] seemed to be moving forward without any serious\n> objections. And it seems unsportsmanlike for you to object, for reasons\n> which you keep only to yourself.\n> \n> \n>> On a more meta-subject, I think grandly stated \"top down\" roadmaps\n>> in highly collaborative development are of minimal utility at best\n> I'm aiming for minimal utility.\n> \n>> IMO the way to do \"roadmaps\" in Bitcoin is to roadmap the finalization\n>> and release process once the basic technology is done; because it's\n>> only past that point that guarantees can really start being made.\n>> \n>> But that isn't what your document does-- it names a lot of things which\n>> are still various shades of research at this point\n> I don't understand this at all. This document attempts to do exactly\n> what its predecessor did -- nothing more or less.\n> \n>> This was an incredible benefit to our customers, but the only way it was\n>> possible was because _features_ were not guaranteed in a release.\n> No one is suggesting that features be guaranteed, either ever or in\n> releases.\n> \n> \n>> One of the big screwups with segwit handling was people sticking\n>> some random unrealistic date on it it which was done AFAIK,\n>> by well meaning folks who took some random numbers from people\n>> working on it for when they'd be done with the development-- not the\n>> testing, not the integration, and certainly not deployment and published\n>> it as The Date.  Then even though the development was actually done\n>> by them, segwit was portrayed as massively delayed, because what\n>> matters to the users is deployment-- which we can't control.\n> I really don't think they are related. For a start, software is almost\n> always delayed. An obvious second is that this entire scaling\n> conversation is polarized to the hilt and everyone that can be blamed\n> for something has been blamed for something.\n> \n> No one likes to be held to a certain deadline, but this roadmap is just\n> about producing some clarity for people who do not do this 24/7.\n> \n>> I see you've done this yourself with signature aggregation, sticking Q4 2016\n>> right on it, which as far as I can tell is a figure that comes from mars.\n> I asked Adam Back for it.\n> \n>> It's also not really appropriate to ask people to sign onto stuff when they\n>> can't even review it.  Perhaps the signature aggregation stuff is insecure,\n>> patent encumbered, or practically useless... (It won't be but no one could\n>> tell that from your post; because it doesn't even exist as a concrete proposal)\n> Again, I think you're missing the point. If there is a problem with SA,\n> you can just suggest it be removed from the document.\n> \n> \n>> I think people would rightly protest about a number of these things-- especially\n>> things like the the agg sigs and tx compaction, \"wtf, I've not heard\n>> of this. Who\n>> are you to insist this goes into Bitcoin?\"\n> This is a very strange argument. I would consider it a benefit if people\n> learned from the document, and discovered things that they had not heard\n> of before.\n> \n> There is no \"insisting\" of any kind.\n> \n> \n>> [  Note 1: I think it is important to disclose that several of the\n>> items in this list appear to be more or less quoted out of my own\n>> blockstream-internal descriptions of things we've been working on in\n>> Bitcoin.\n>> A while back Adam Back asked me to publish something which contained\n>> significant chunks of this document more or less verbatim,\n> He probably showed you an earlier draft. But I wrote almost all of this\n> myself, and I can only recall 2 or 3 phrases (not even complete\n> sentences) included from Adam Back. And most of the phrases are\n> themselves just boring descriptions that I'm sure anyone could write.\n> Some phrases may have simply been taken from bitcoincore.org <http://bitcoincore.org/> or\n> somewhere similar.\n> \n> I am not exactly sure what you are insinuating but I encourage you to\n> clarify it.\n> \n>> and I\n>> declined saying that I personally disagree with some of his points and\n>> didn't think that Blockstream attempting to redirect the Bitcoin\n>> project (esp towards drivechains) was appropriate-- along with my\n>> (above) views on roadmaps (which I have included here a private email\n>> thread on the subject). I feel it's important to disclose this, and\n>> that the document was not otherwise created with the input of project\n>> contributors (except Luke-Jr, apparently). I wasn't previously aware\n>> that Adam had been working with Paul on this, had I been I would have\n>> also encouraged people to be a little more transparent about it. ]\n> I really don't understand what you are disclosing. That Adam asked you\n> for feedback on the draft? And then, in the next sentence, that not\n> enough experts were asked for feedback on the draft? I'm legitimately\n> confused by this part.\n> \n> As I stated, we can remove the drivechain section. But surely you can\n> appreciate how bizarre your position on roadmaps is. What exactly, did\n> you intended to create at [1]? Since it is described explicitly as \"the\n> roadmap in Capacity increases for the Bitcoin system\", have you been\n> disagreeing with it's characterization as a 'roadmap' this entire time?\n> One wonders why you haven't said anything until now.\n> \n> [1] https://bitcoincore.org/en/2015/12/21/capacity-increase/ <https://bitcoincore.org/en/2015/12/21/capacity-increase/>\n> \n> In my first email I list the benefits of having a roadmap. One benefit\n> is that, without one, it is likely that a large majority of outsiders\n> have almost no idea at all what is being worked on, what effect it will\n> have, or when it might be ready, or to whom/what they should turn to for\n> advice on such matters. Do you have a different way of addressing this\n> communication problem?\n> \n> Paul\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/386bfc83/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/386bfc83/attachment-0001.sig>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-11T22:57:12",
                "message_text_only": "On 7/11/2017 6:41 PM, Tao Effect wrote:\n> Dear Paul,\n>\n> Drivechain has several issues that you've acknowledged but have not,\n> IMO, adequately (at all really) addressed [1].\n\nI replied to your email at length, at [2]. You should read that email,\nand then reply to it with your outstanding objections, if you still have\nthem (per the usual customs of a mailing list).\n\n[2]\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014609.html\n\n> Adopting DC would be an irreversible course of action,\n\nThis is false -- it is easily reversible with a second soft fork.\n\nAlso, I would say to everyone that, (in my opinion as the OP) this\nconversation will go off-topic if it veers exclusively into 'drivechain\nreview'.\n\nPaul"
            },
            {
                "author": "Tao Effect",
                "date": "2017-07-11T23:12:03",
                "message_text_only": "Paul,\n\nThere is a difference between replying to an email, and addressing the issues that were brought up in it.\n\nI did read your reply, and I chose not to respond to it because it did not address anything I said.\n\nHere's an example:\n\n> It would not be accurate to say that miners have \"total\" control. Miners\n> do control the destination of withdrawals, but they do not control the\n> withdrawal-duration nor the withdrawal-frequency.\n> \n> So, if miners wish to 'steal' from a sidechain, they _can_ initiate a\n> theft, but they can not change the fact that their malfeasance will be\n> [a] obvious, and [b] on display for a long period of time.\n\nHere, you admit that the security of the sidechains allows miners to steal bitcoins, something they cannot do currently.\n\nYou next tried to equate three different types of theft, what you called \"Classic Theft\", \"Channel Theft\", and \"Drivechain Theft\", saying:\n\n> I do not think that any of the three stands out as being categorically\n> worse than the others\n\nTo anyone who understands bitcoin, there is a very clear, unmistakeable difference between double-spending (\"Classic Theft\"), and *ownership* of the private key controlling the bitcoins.\n\nSimilarly, to anyone who understands bitcoin, there is also a very clear, unmistakeable difference between censorship (\"Channel Theft\"), and *ownership* of the private key controlling the bitcoins.\n\nThe entire email was a very long-form way of admitting to all of the issues that were raised in the previous email, while making it sound like you had addressed the issues.\n\nI am not sure how else to respond to that email, given that none of the issues were really addressed.\n\nDrivechain is an unmistakeable weakening of Bitcoin's security guarantees. This you have not denied.\n\nThere is no reason to weaken Bitcoin's security in such a dramatic fashion. Better options are being worked on, they just take time.\n\nKind regards,\nGreg Slepak\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jul 11, 2017, at 3:57 PM, Paul Sztorc <truthcoin at gmail.com <mailto:truthcoin at gmail.com>> wrote:\n> \n> On 7/11/2017 6:41 PM, Tao Effect wrote:\n>> Dear Paul,\n>> \n>> Drivechain has several issues that you've acknowledged but have not,\n>> IMO, adequately (at all really) addressed [1].\n> \n> I replied to your email at length, at [2]. You should read that email,\n> and then reply to it with your outstanding objections, if you still have\n> them (per the usual customs of a mailing list).\n> \n> [2]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014609.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014609.html>\n> \n>> Adopting DC would be an irreversible course of action,\n> \n> This is false -- it is easily reversible with a second soft fork.\n> \n> Also, I would say to everyone that, (in my opinion as the OP) this\n> conversation will go off-topic if it veers exclusively into 'drivechain\n> review'.\n> \n> Paul\n> \n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/3aef0c56/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/3aef0c56/attachment-0001.sig>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-07-12T19:19:03",
                "message_text_only": "Hi Greg,\n\n>Here, you admit that the security of the sidechains allows miners to steal\nbitcoins, something they cannot do currently.\n\nIf I put my coins in an anyone can spend output, a miner will take them.\nThey can do this today. I suggest you try it if you don't believe me :-).\nYou have to be more specific with contract types instead of generically\ntalking about 'all contracts ever'.\n\n> Drivechain is an unmistakeable weakening of Bitcoin's security\nguarantees. This you have not denied.\n\nI think this is an unfair characterization. You have to opt into using\ndrivechains. Other outputs such as P2PKH/Multisig etc are unaffected by a\ndrivechain output. As Pieter Wuille stated earlier in this thread (and Paul\nhas stated all along), drivechain outputs have a different security model\nthan other contracts. Namely they are controlled by miners. I think we can\nall agree this is unfortunate, but it is the current reality we live in. I\nlook forward to the day we can solve the 'ownership' problem so we can have\ntrustless interoperable blockchains, but that day is not today.\n\nAs a reminder, most users will not have to go through the drivechain\nwithdrawal process. Most withdrawals will be done via atomic swaps.\n\n>There is no reason to weaken Bitcoin's security in such a dramatic\nfashion. Better options are being worked on, they just take time.\n\nCare to share? I'm unaware if there is.\n\n>\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014600.html\n\nEveryone should re-read this email though, this is something that could\nhappen. Paul's design makes it so that if this occurs it is *VERY* obvious.\nI guess we can argue if there is any difference between an obvious robbery\nvs a hidden robbery, but I think if we have to pick one or the other the\nchoice is clear to me. Other designs (that I'm aware of) for sidechains had\nattack vectors that weren't so obvious.\n\n-Chris\n\n\n\nOn Tue, Jul 11, 2017 at 6:12 PM, Tao Effect via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Paul,\n>\n> There is a difference between replying to an email, and addressing the\n> issues that were brought up in it.\n>\n> I did read your reply, and I chose not to respond to it because it did not\n> address anything I said.\n>\n> Here's an example:\n>\n> It would not be accurate to say that miners have \"total\" control. Miners\n> do control the destination of withdrawals, but they do not control the\n> withdrawal-duration nor the withdrawal-frequency.\n>\n> So, if miners wish to 'steal' from a sidechain, they _can_ initiate a\n> theft, but they can not change the fact that their malfeasance will be\n> [a] obvious, and [b] on display for a long period of time.\n>\n>\n> Here, you admit that the security of the sidechains allows miners to steal\n> bitcoins, something they cannot do currently.\n>\n> You next tried to equate three different types of theft, what you called\n> \"Classic Theft\", \"Channel Theft\", and \"Drivechain Theft\", saying:\n>\n> I do not think that any of the three stands out as being categorically\n> worse than the others\n>\n>\n> To anyone who understands bitcoin, there is a very clear, unmistakeable\n> difference between double-spending (\"Classic Theft\"), and *ownership* of\n> the private key controlling the bitcoins.\n>\n> Similarly, to anyone who understands bitcoin, there is also a very clear,\n> unmistakeable difference between censorship (\"Channel Theft\"), and\n> *ownership* of the private key controlling the bitcoins.\n>\n> The entire email was a very long-form way of admitting to all of the\n> issues that were raised in the previous email, while making it sound like\n> you had addressed the issues.\n>\n> I am not sure how else to respond to that email, given that none of the\n> issues were really addressed.\n>\n> Drivechain is an unmistakeable weakening of Bitcoin's security guarantees.\n> This you have not denied.\n>\n> There is no reason to weaken Bitcoin's security in such a dramatic\n> fashion. Better options are being worked on, they just take time.\n>\n> Kind regards,\n> Greg Slepak\n>\n> --\n> Please do not email me anything that you are not comfortable also sharing with\n> the NSA.\n>\n> On Jul 11, 2017, at 3:57 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>\n> On 7/11/2017 6:41 PM, Tao Effect wrote:\n>\n> Dear Paul,\n>\n> Drivechain has several issues that you've acknowledged but have not,\n> IMO, adequately (at all really) addressed [1].\n>\n>\n> I replied to your email at length, at [2]. You should read that email,\n> and then reply to it with your outstanding objections, if you still have\n> them (per the usual customs of a mailing list).\n>\n> [2]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n> 2017-June/014609.html\n>\n> Adopting DC would be an irreversible course of action,\n>\n>\n> This is false -- it is easily reversible with a second soft fork.\n>\n> Also, I would say to everyone that, (in my opinion as the OP) this\n> conversation will go off-topic if it veers exclusively into 'drivechain\n> review'.\n>\n> Paul\n>\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/828da31e/attachment-0001.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-07-12T19:24:28",
                "message_text_only": "Dear Chris,\n\n> I think this is an unfair characterization. You have to opt into using drivechains.\n\nI have heard this nonsense repeated countless times in order to justify adopting Drivechain.\n\nThis is not how security works.\n\nA child can \"opt-in\" to using a loaded gun, but is it a good idea to make it easy for them to do that?\n\nNo.\n\nThis is effectively the same thing Drivechains is doing.\n\nIt is a request to modify the Bitcoin protocol to make it easy for Bitcoin users to give their Bitcoins to miners.\n\nDoes that sound like a good idea to anyone?\n\nIf so, please leave, you are compromising Bitcoin's security.\n\nSecurity is about making it difficult to shoot yourself in the face.\n\nIf I design a car that has a button that randomly causes the brakes to give out if pressed, is that a good idea? Can I justify pushing for such a \"feature\" just because it's \"opt-in\"?\n\nNo. That is fallacy.\n\nIt is not how secure systems are designed.\n\nIt is how *insecure* systems are designed.\n\n> Care to share? I'm unaware if there is.\n\n\nSure, happy to, as soon as I have it written up in detail.\n\nKind regards,\nGreg Slepak\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jul 12, 2017, at 12:19 PM, Chris Stewart <chris at suredbits.com <mailto:chris at suredbits.com>> wrote:\n> \n> Hi Greg,\n> \n> >Here, you admit that the security of the sidechains allows miners to steal bitcoins, something they cannot do currently.\n> \n> If I put my coins in an anyone can spend output, a miner will take them. They can do this today. I suggest you try it if you don't believe me :-). You have to be more specific with contract types instead of generically talking about 'all contracts ever'.\n> \n> > Drivechain is an unmistakeable weakening of Bitcoin's security guarantees. This you have not denied.\n> \n> I think this is an unfair characterization. You have to opt into using drivechains. Other outputs such as P2PKH/Multisig etc are unaffected by a drivechain output. As Pieter Wuille stated earlier in this thread (and Paul has stated all along), drivechain outputs have a different security model than other contracts. Namely they are controlled by miners. I think we can all agree this is unfortunate, but it is the current reality we live in. I look forward to the day we can solve the 'ownership' problem so we can have trustless interoperable blockchains, but that day is not today.\n> \n> As a reminder, most users will not have to go through the drivechain withdrawal process. Most withdrawals will be done via atomic swaps.\n> \n> >There is no reason to weaken Bitcoin's security in such a dramatic fashion. Better options are being worked on, they just take time.\n> \n> Care to share? I'm unaware if there is.\n> \n> >https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014600.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014600.html>\n> \n> Everyone should re-read this email though, this is something that could happen. Paul's design makes it so that if this occurs it is *VERY* obvious. I guess we can argue if there is any difference between an obvious robbery vs a hidden robbery, but I think if we have to pick one or the other the choice is clear to me. Other designs (that I'm aware of) for sidechains had attack vectors that weren't so obvious.\n> \n> -Chris\n> \n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/f5dded92/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/f5dded92/attachment.sig>"
            },
            {
                "author": "Chris Stewart",
                "date": "2017-07-12T19:34:54",
                "message_text_only": "Hi Greg,\n\nThe safest way to ensure everyone's protection to make sure *no one can do\nanything*. Then we will ALL be safe ;).\n\n>If so, please leave, you are compromising Bitcoin's security.\n\nOk, let's calm down.\n\n>If I design a car that has a button that randomly causes the brakes to\ngive out if pressed, is that a good idea? Can I justify pushing for such a\n\"feature\" just because it's \"opt-in\"?\n\nIt would be more like \"should we allow a car on the road if we know\nstatistically that our brakes give out in every 1/100,000,000 cars\"? There\nis security risks with everything in life -- we need to quantify the risk\nto see if it is worth taking. I think Paul has been pretty upfront about\nthe risks of his model. I think you did a good job of demonstrating it in\nthe email I cited too.\n\n>It is how *insecure* systems are designed.\n\nBy your account bitcoin is already insecure then -- it allows anyone can\nspend outputs that can be claimed by miners.\n\n>Sure, happy to, as soon as I have it written up in detail.\n\nI look forward to this!\n\n-Chris\n\nOn Wed, Jul 12, 2017 at 2:24 PM, Tao Effect <contact at taoeffect.com> wrote:\n\n> Dear Chris,\n>\n> I think this is an unfair characterization. You have to opt into using\n> drivechains.\n>\n>\n> I have heard this nonsense repeated countless times in order to justify\n> adopting Drivechain.\n>\n> This is not how security works.\n>\n> A child can \"opt-in\" to using a loaded gun, but is it a good idea to make\n> it easy for them to do that?\n>\n> No.\n>\n> This is effectively the same thing Drivechains is doing.\n>\n> It is a request to modify the Bitcoin protocol to make it easy for Bitcoin\n> users to give their Bitcoins to miners.\n>\n> Does that sound like a good idea to anyone?\n>\n> If so, please leave, you are compromising Bitcoin's security.\n>\n> Security is about making it difficult to shoot yourself in the face.\n>\n> If I design a car that has a button that randomly causes the brakes to\n> give out if pressed, is that a good idea? Can I justify pushing for such a\n> \"feature\" just because it's \"opt-in\"?\n>\n> No. That is fallacy.\n>\n> It is not how secure systems are designed.\n>\n> It is how *insecure* systems are designed.\n>\n> Care to share? I'm unaware if there is.\n>\n>\n> Sure, happy to, as soon as I have it written up in detail.\n>\n> Kind regards,\n> Greg Slepak\n>\n> --\n> Please do not email me anything that you are not comfortable also sharing with\n> the NSA.\n>\n> On Jul 12, 2017, at 12:19 PM, Chris Stewart <chris at suredbits.com> wrote:\n>\n> Hi Greg,\n>\n> >Here, you admit that the security of the sidechains allows miners to\n> steal bitcoins, something they cannot do currently.\n>\n> If I put my coins in an anyone can spend output, a miner will take them.\n> They can do this today. I suggest you try it if you don't believe me :-).\n> You have to be more specific with contract types instead of generically\n> talking about 'all contracts ever'.\n>\n> > Drivechain is an unmistakeable weakening of Bitcoin's security\n> guarantees. This you have not denied.\n>\n> I think this is an unfair characterization. You have to opt into using\n> drivechains. Other outputs such as P2PKH/Multisig etc are unaffected by a\n> drivechain output. As Pieter Wuille stated earlier in this thread (and Paul\n> has stated all along), drivechain outputs have a different security model\n> than other contracts. Namely they are controlled by miners. I think we can\n> all agree this is unfortunate, but it is the current reality we live in. I\n> look forward to the day we can solve the 'ownership' problem so we can have\n> trustless interoperable blockchains, but that day is not today.\n>\n> As a reminder, most users will not have to go through the drivechain\n> withdrawal process. Most withdrawals will be done via atomic swaps.\n>\n> >There is no reason to weaken Bitcoin's security in such a dramatic\n> fashion. Better options are being worked on, they just take time.\n>\n> Care to share? I'm unaware if there is.\n>\n> >https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014600.\n> html\n>\n> Everyone should re-read this email though, this is something that could\n> happen. Paul's design makes it so that if this occurs it is *VERY* obvious.\n> I guess we can argue if there is any difference between an obvious robbery\n> vs a hidden robbery, but I think if we have to pick one or the other the\n> choice is clear to me. Other designs (that I'm aware of) for sidechains had\n> attack vectors that weren't so obvious.\n>\n> -Chris\n>\n>\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/8a7ab3dc/attachment-0001.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-07-12T19:42:49",
                "message_text_only": "> I think Paul has been pretty upfront about the risks of his model.\n\nI think he has been rather misleading in his presentation of the risks.\n\nHe outlines them in a very technical manner, yes, but then goes on to promote them to lay people as if they're no big deal, which is completely misleading.\n\n> By your account bitcoin is already insecure then -- it allows anyone can spend outputs that can be claimed by miners.\n\nThat is completely different.\n\nIt is disingenuous to say the two are remotely similar. The two situations have little-to-nothing in common.\n\nIn the present situation, anyone-can-spend outputs are used by probably less than 0.1% of users, and most software doesn't even allow for the possibility.\n\nIn Drivechain it's *encouraged-by-design*!\n\n- Greg\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jul 12, 2017, at 12:34 PM, Chris Stewart <chris at suredbits.com <mailto:chris at suredbits.com>> wrote:\n> \n> Hi Greg,\n> \n> The safest way to ensure everyone's protection to make sure *no one can do anything*. Then we will ALL be safe ;).\n> \n> >If so, please leave, you are compromising Bitcoin's security.\n> \n> Ok, let's calm down.\n> \n> >If I design a car that has a button that randomly causes the brakes to give out if pressed, is that a good idea? Can I justify pushing for such a \"feature\" just because it's \"opt-in\"?\n> \n> It would be more like \"should we allow a car on the road if we know statistically that our brakes give out in every 1/100,000,000 cars\"? There is security risks with everything in life -- we need to quantify the risk to see if it is worth taking. I think Paul has been pretty upfront about the risks of his model. I think you did a good job of demonstrating it in the email I cited too.\n> \n> >It is how *insecure* systems are designed.\n> \n> By your account bitcoin is already insecure then -- it allows anyone can spend outputs that can be claimed by miners.\n> \n> >Sure, happy to, as soon as I have it written up in detail.\n> \n> I look forward to this!\n> \n> -Chris\n> \n> On Wed, Jul 12, 2017 at 2:24 PM, Tao Effect <contact at taoeffect.com <mailto:contact at taoeffect.com>> wrote:\n> Dear Chris,\n> \n>> I think this is an unfair characterization. You have to opt into using drivechains.\n> \n> I have heard this nonsense repeated countless times in order to justify adopting Drivechain.\n> \n> This is not how security works.\n> \n> A child can \"opt-in\" to using a loaded gun, but is it a good idea to make it easy for them to do that?\n> \n> No.\n> \n> This is effectively the same thing Drivechains is doing.\n> \n> It is a request to modify the Bitcoin protocol to make it easy for Bitcoin users to give their Bitcoins to miners.\n> \n> Does that sound like a good idea to anyone?\n> \n> If so, please leave, you are compromising Bitcoin's security.\n> \n> Security is about making it difficult to shoot yourself in the face.\n> \n> If I design a car that has a button that randomly causes the brakes to give out if pressed, is that a good idea? Can I justify pushing for such a \"feature\" just because it's \"opt-in\"?\n> \n> No. That is fallacy.\n> \n> It is not how secure systems are designed.\n> \n> It is how *insecure* systems are designed.\n> \n>> Care to share? I'm unaware if there is.\n> \n> \n> Sure, happy to, as soon as I have it written up in detail.\n> \n> Kind regards,\n> Greg Slepak\n> \n> --\n> Please do not email me anything that you are not comfortable also sharing with the NSA.\n> \n>> On Jul 12, 2017, at 12:19 PM, Chris Stewart <chris at suredbits.com <mailto:chris at suredbits.com>> wrote:\n>> \n>> Hi Greg,\n>> \n>> >Here, you admit that the security of the sidechains allows miners to steal bitcoins, something they cannot do currently.\n>> \n>> If I put my coins in an anyone can spend output, a miner will take them. They can do this today. I suggest you try it if you don't believe me :-). You have to be more specific with contract types instead of generically talking about 'all contracts ever'.\n>> \n>> > Drivechain is an unmistakeable weakening of Bitcoin's security guarantees. This you have not denied.\n>> \n>> I think this is an unfair characterization. You have to opt into using drivechains. Other outputs such as P2PKH/Multisig etc are unaffected by a drivechain output. As Pieter Wuille stated earlier in this thread (and Paul has stated all along), drivechain outputs have a different security model than other contracts. Namely they are controlled by miners. I think we can all agree this is unfortunate, but it is the current reality we live in. I look forward to the day we can solve the 'ownership' problem so we can have trustless interoperable blockchains, but that day is not today.\n>> \n>> As a reminder, most users will not have to go through the drivechain withdrawal process. Most withdrawals will be done via atomic swaps.\n>> \n>> >There is no reason to weaken Bitcoin's security in such a dramatic fashion. Better options are being worked on, they just take time.\n>> \n>> Care to share? I'm unaware if there is.\n>> \n>> >https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014600.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-June/014600.html>\n>> \n>> Everyone should re-read this email though, this is something that could happen. Paul's design makes it so that if this occurs it is *VERY* obvious. I guess we can argue if there is any difference between an obvious robbery vs a hidden robbery, but I think if we have to pick one or the other the choice is clear to me. Other designs (that I'm aware of) for sidechains had attack vectors that weren't so obvious.\n>> \n>> -Chris\n>> \n>> \n>> \n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/3f3a9f44/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/3f3a9f44/attachment.sig>"
            },
            {
                "author": "CryptAxe",
                "date": "2017-07-12T19:54:48",
                "message_text_only": "Are we just pulling numbers out of thin air now? https://p2sh.info/\nBIP16 for example is widely used. It would be difficult to find a single\nwallet that doesn't support BIP16 I have no idea what you are talking about.\n\n\nOn 07/12/2017 12:42 PM, Tao Effect via bitcoin-dev wrote:\n> ...\n> In the present situation, anyone-can-spend outputs are used by\n> probably less than 0.1% of users, and most software doesn't even allow\n> for the possibility.\n>\n> In Drivechain it's *encouraged-by-design*!\n>\n> - Greg\n>\n> --\n> Please do not email me anything that you are not comfortable also\n> sharing with the NSA.\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/a11413d2/attachment-0001.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-07-12T21:55:39",
                "message_text_only": "That's a fair point, I confused anyone-can-spend with anyone-can-pay [1].\n\nIsn't it different in the case of P2SH and SegWit, don't full nodes validate the script?\n\nIn other words, miners don't have complete control over the coins, full nodes keep a check on them.\n\nAt least that was my understanding, and if that's not the case then it doesn't make sense to me why Pieter would earlier in this thread object to Drivechain on the grounds that it's a different security model.\n\n- Greg\n\n[1] https://steemit.com/bitcoin/@jl777/bitcoin-spinoff-fork-how-to-make-a-clean-fork-without-any-replay-attack-and-no-blockchain-visible-changes <https://steemit.com/bitcoin/@jl777/bitcoin-spinoff-fork-how-to-make-a-clean-fork-without-any-replay-attack-and-no-blockchain-visible-changes>\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jul 12, 2017, at 12:54 PM, CryptAxe via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> Are we just pulling numbers out of thin air now? https://p2sh.info/ <https://p2sh.info/> BIP16 for example is widely used. It would be difficult to find a single wallet that doesn't support BIP16 I have no idea what you are talking about.\n> \n> On 07/12/2017 12:42 PM, Tao Effect via bitcoin-dev wrote:\n>> ...\n>> In the present situation, anyone-can-spend outputs are used by probably less than 0.1% of users, and most software doesn't even allow for the possibility.\n>> \n>> In Drivechain it's *encouraged-by-design*!\n>> \n>> - Greg\n>> \n>> --\n>> Please do not email me anything that you are not comfortable also sharing with the NSA.\n>> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/a5ecbb2f/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/a5ecbb2f/attachment-0001.sig>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2017-07-11T23:36:12",
                "message_text_only": "I can't help but notice that I have read Greg's email before-- all the\nway back in 2016. It would have been impossible for him to write a\nreply to Paul's current email back then... but I also notice that Greg\ndid not indicate that he was copy-pasting until the very end (and even\nthen his aside at the end was sort of not the most clear it could have\nbeen I think).\n\nOn Tue, Jul 11, 2017 at 5:17 PM, Paul Sztorc via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On 7/11/2017 5:11 PM, Gregory Maxwell wrote:\n>> [  Note 1: I think it is important to disclose that several of the\n>> items in this list appear to be more or less quoted out of my own\n>> blockstream-internal descriptions of things we've been working on in\n>> Bitcoin.\n>> A while back Adam Back asked me to publish something which contained\n>> significant chunks of this document more or less verbatim,\n[ snip ]\n> I am not exactly sure what you are insinuating but I encourage you to\n> clarify it.\n\nI believe that's an artifact of a 2016 email. And the rest of it, for\nthat matter. See below.\n\n>> and I\n>> declined saying that I personally disagree with some of his points and\n>> didn't think that Blockstream attempting to redirect the Bitcoin\n>> project (esp towards drivechains) was appropriate-- along with my\n>> (above) views on roadmaps (which I have included here a private email\n>> thread on the subject). I feel it's important to disclose this, and\n>> that the document was not otherwise created with the input of project\n>> contributors (except Luke-Jr, apparently). I wasn't previously aware\n>> that Adam had been working with Paul on this, had I been I would have\n>> also encouraged people to be a little more transparent about it. ]\n> I really don't understand what you are disclosing. That Adam asked you\n> for feedback on the draft? And then, in the next sentence, that not\n> enough experts were asked for feedback on the draft? I'm legitimately\n> confused by this part.\n>\n> As I stated, we can remove the drivechain section. But surely you can\n> appreciate how bizarre your position on roadmaps is. What exactly, did\n> you intended to create at [1]? Since it is described explicitly as \"the\n> roadmap in Capacity increases for the Bitcoin system\", have you been\n> disagreeing with it's characterization as a 'roadmap' this entire time?\n> One wonders why you haven't said anything until now.\n>\n> [1] https://bitcoincore.org/en/2015/12/21/capacity-increase/\n\nThe vast majority of Greg's email, including all the positiontext on\nroadmaps was mostly text sent on 2016-11-04 to Adam Back, myself,\nWladimir, and others. Some of the other parts aren't, like the part\nmentioning Blockstream.\n\nHere is a commitment to a list of the recipients (for whatever good\nsuch a commitment might do):\nb1e575e15d86a5a5931ea0bc519701df4cc152f020f03cd7912074ce5c36260a\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-12T00:07:51",
                "message_text_only": "On Tue, Jul 11, 2017 at 10:17 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n> I don't understand this at all. This document attempts to do exactly\n> what its predecessor did -- nothing more or less.\n\nThat might be your impression, then you've misunderstood what I\nintended-- What I wrote was carefully constructed as a personal view\nof how things might work out. It never claimed to be a a project\nroadmap. Though as usual, I work hard to propose things that I believe\nwill be successful... and people are free to adopt what they want.\n\nAnd to the extent that it got taken that way I think it was an error\nand that it has harmed progress in our community; and created more\nconfusion about control vs collaboration.\n\nWith perfect hindsight I wouldn't have posted it; especially since\nwe've learned that the demand for increased capacity from many people\nwas potentially less than completely earnest. (The whole, can't double\ncapacity until we quadruple it thing...)\n\n> As to your specific complaints, I have addressed both the security model\nand the concept of mining centralization on this list in the recent\npast.\n\nI don't agree that you have; but for the purpose of this thread\ndoesn't really matter if I (specifically) do or don't agree.  It's an\nobjective truth that many people do not yet believe these concerns\nhave been addressed.\n\n> I really don't understand what you are disclosing. That Adam asked you\n> for feedback on the draft? And then, in the next sentence, that not\n\nThat Adam asked me to write publish a new \"roadmap\" for Bitcoin as\nyou've done here, with particular features and descriptions, which I\ndeclined; and explained why I didn't believe that was the right\napproach.  And Adam worked with you on the document, and provided\ncontent for it (which I then recognized in the post).\n\nSet aside what you know to be true for a moment and consider how this\nmight look to an outsider who found out about it.  It could look a\nlike Blockstream was trying to influence the direction of Bitcoin by\nlaundering proposals through an apparently unaffiliated third party.\nDoubly so considering who participated in your drafting and who didn't\n(more below).\n\nI don't think in actuality you did anything remotely improper\n(ill-advised, perhaps, since your goal to speak for developers but you\ndidn't speak to them, IMO--) but I think transparency is essential to\navoid any appearance of misconduct.\n\n> But surely you can\n> appreciate how bizarre your position on roadmaps is. What exactly, did\n> you intended to create at [1]? Since it is described explicitly as \"the\n> roadmap in Capacity increases for the Bitcoin system\", have you been\n> disagreeing with it's characterization as a 'roadmap' this entire time?\n> One wonders why you haven't said anything until now.\n\nI did--\n\nAs Bryan pointed out... with the exception of the intro and end and a\ncouple sentences in the middle my entire response to your post, with\nthe position on \"roadmaps\" was written a long time ago, specifically\nto complain about and argue against that particular approach.\n\n> In my first email I list the benefits of having a roadmap. One benefit\n> is that, without one, it is likely that a large majority of outsiders\n> have almost no idea at all what is being worked on, what effect it will\n> have, or when it might be ready, or to whom/what they should turn to for\n> advice on such matters. Do you have a different way of addressing this\n> communication problem?\n\nI think you may be mistaking a roadmap with \"communications\"-- people\ntaking about research they are exploring is great! and we should have\nmore of it.  But like with RedHat and kernel features, we can't really\nroadmap things that are unresourced and currently just unimplemented\nexploration or test code-- without seeing things which are more or\nless done the community can't rightfully decide if they'd want to\nsupport something or not.  Perhaps they'll be good things perhaps\nawful-- the devil is in the details, and until an effort is fairly\nmature, you cannot see the details.\n\nThere have, for example, been signature aggregation proposals in the\npast that required address reuse (could only aggregate if they're\nreused).  I would strongly oppose such a proposal, and I hope everyone\nelse here would too.  So if I were a third party looking at your\nmessage, rather than the person who initially proposed the agg sig\nthing you're talking about, I wouldn't know if I could love it or hate\nit yet; and probably couldn't be expected to have much of an opinion\non it until there is a BIP and/or example implementation.\n\nTo the extent that a roadmap differs from communications in general,\nit is in that it also implies things that none of us can promise\nexcept for our own efforts; Completion of implementations, success of\nexperiments, adoption-- basically assuming a level of top down control\nthat doesn't exist in a wide public collaboration.\n\nOne of the great challenges in our industry is that we don't have\nrings of communication: We don't have much in the way of semi-experts\nto communicate to semi-semi-experts to communicate to media pundits to\ncommunicate to the unwashed masses-- at each level closing the\ninferential gap and explaining things in terms the audience\nunderstands. We don't have things like LWN.   We'll get there, but it\nit took the Linux world decades to build to what it has now. I think\nvarious forces in the industry work against us-- e.g. we lose a mot of\nmid tier technical people to the allure of striking it rich printing\nmoney in their own altcoins.\n\nIt might be attractive to try to end-run the slow development\nappropriate web of reliable communications by deploying high authority\nedicts, but it ultimately can't work because it doesn't map to how\nthings are accomplished, not in true collaborative open source, and\ncertainly not in an effort whos value comes substantially from\ndecentralization. Doing so, I fear, creates a false understanding of\nauthority.\n\n(It's a common misunderstanding, for example, that people do what I\nwant (for example); but in reality, I just try to avoid wasting my\ntime advocating things that I don't think other people are already\ngoing to do; :) otherwise, if _I_ want something done I've got to do\nit myself or horse trade for it, just like anyone else.)\n\nOne of the great things about general communications is anyone can do\nit.  Of course, unless they're talking about their own work, they\ncan't promise any of it will be completely-- but that is always true.\n If someone wants some guarantee about work, they have to be willing\nto get it done themselves (and, of course, if it's a consensus\nfeature-- that much is necessary, but still not sufficient to get a\nguarantee).\n\n[from your other reply]\n>> A fine intention, but I've checked with many of the top contributors\n>> and it sounds like the only regular developer you spoke with was\n>> Luke-Jr.  Next time you seek to represent someone you might want to\n>> try talking to them!\n>\n> That is false. I could provide a list of names but I'm really not sure\n> what would be gained as result. You yourself admit that it is an\n> excellent list of research, almost all which you support directly.\n>\n> So I think your only real objection is that I didn't talk to you\n> specifically.\n\nCome now, this is needlessly insulting. I would have made the same\ncomment if you had talked to me because you didn't talk to most/all of\nMatt Corallo, Wladimir, Pieter Wuille, Alex Morcos, etc.... e.g. the\npeople doing most of the work of actually building the system.  Before\nmaking that comment I went and checked with people to find out if only\nI was left out.  Talking to Adam (who isn't involved in the project)\nand Luke-jr (who is but is well known for frustratingly extreme\nminority positions and also contracts for Blockstream sometimes) isn't\na great approach for the stated goal of speaking for developers!"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-12T01:40:32",
                "message_text_only": "Greg,\n\nI would summarize your email as stating that: you regret writing the\nfirst email, and regret the fact that it became a roadmap that everyone\nsigned. And that therefore it is obviously a concept NACK from you.\n\n( That's pretty surprising to me, and I would expect others to find it\nsurprising as well. And I wonder whether you think we should take the\nold one *down*, and why you would allow (?) so many other people to sign\nit, etc. But I am not willing to press the issue. Some of your other\ncomments I also find confusing but there is little to be gained in\nclarifying them. )\n\nGenerally, I still think that the roadmap was a helpful communication\ndevice, which did more good than harm. And I am interested in hearing\nwhat other people think.\n\nSeparately, and very important to me, is that you feel that there are\nunresolved objections to drivechain's security model, which you decline\nto share with me and/or the list. So I would hope that you instead\nchoose to share your thoughts (as is, presumably, the purpose of this list).\n\nI will also respond to this:\n\n>>> A fine intention, but I've checked with many of the top contributors\n>>> and it sounds like the only regular developer you spoke with was\n>>> Luke-Jr.  Next time you seek to represent someone you might want to\n>>> try talking to them!\n>> That is false. I could provide a list of names but I'm really not sure\n>> what would be gained as result. You yourself admit that it is an\n>> excellent list of research, almost all which you support directly.\n>>\n>> So I think your only real objection is that I didn't talk to you\n>> specifically.\n> Come now, this is needlessly insulting. I would have made the same\n> comment if you had talked to me because you didn't talk to most/all of\n> Matt Corallo, Wladimir, Pieter Wuille, Alex Morcos, etc.... e.g. the\n> people doing most of the work of actually building the system.  Before\n> making that comment I went and checked with people to find out if only\n> I was left out.  Talking to Adam (who isn't involved in the project)\n> and Luke-jr (who is but is well known for frustratingly extreme\n> minority positions and also contracts for Blockstream sometimes) isn't\n\nLet me try to explain my point of view. I did speak to several people,\nin addition to the two names that I privately volunteered to you when\nyou asked me in a personal email earlier today. From my point of view\nyou had done no research (you failed to uncover any additional names),\nused the information I volunteered to you against me (in the form of\nfalse characterizations of negligent email writing!), and you also\nsuggested that, other than yourself and a few others, no one is\nqualified even to write a first draft of a summary of present day\nactivities. This response is typical of the hostile review environment\nwhich has existed in Bitcoin for years (I am more than used to it). If\ninstead of writing the first draft, I had written nothing, I would be\naccused of being the ideas guy and/or \"not contributing\". You also\n(rather rudely), put me in an awkward position, as the people who I\n*did* ask now almost certainly prefer that I not reveal their names\n(yet, a low name count is held as a strike against my competence).\n\nSuch are the perils of posting to bitcoin-dev! Let all be warned! : )\n\nPaul\n\n\n\n\nOn 7/11/2017 8:07 PM, Gregory Maxwell wrote:\n> On Tue, Jul 11, 2017 at 10:17 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>> I don't understand this at all. This document attempts to do exactly\n>> what its predecessor did -- nothing more or less.\n> That might be your impression, then you've misunderstood what I\n> intended-- What I wrote was carefully constructed as a personal view\n> of how things might work out. It never claimed to be a a project\n> roadmap. Though as usual, I work hard to propose things that I believe\n> will be successful... and people are free to adopt what they want.\n>\n> And to the extent that it got taken that way I think it was an error\n> and that it has harmed progress in our community; and created more\n> confusion about control vs collaboration.\n>\n> With perfect hindsight I wouldn't have posted it; especially since\n> we've learned that the demand for increased capacity from many people\n> was potentially less than completely earnest. (The whole, can't double\n> capacity until we quadruple it thing...)\n>\n>> As to your specific complaints, I have addressed both the security model\n> and the concept of mining centralization on this list in the recent\n> past.\n>\n> I don't agree that you have; but for the purpose of this thread\n> doesn't really matter if I (specifically) do or don't agree.  It's an\n> objective truth that many people do not yet believe these concerns\n> have been addressed.\n>\n>> I really don't understand what you are disclosing. That Adam asked you\n>> for feedback on the draft? And then, in the next sentence, that not\n> That Adam asked me to write publish a new \"roadmap\" for Bitcoin as\n> you've done here, with particular features and descriptions, which I\n> declined; and explained why I didn't believe that was the right\n> approach.  And Adam worked with you on the document, and provided\n> content for it (which I then recognized in the post).\n>\n> Set aside what you know to be true for a moment and consider how this\n> might look to an outsider who found out about it.  It could look a\n> like Blockstream was trying to influence the direction of Bitcoin by\n> laundering proposals through an apparently unaffiliated third party.\n> Doubly so considering who participated in your drafting and who didn't\n> (more below).\n>\n> I don't think in actuality you did anything remotely improper\n> (ill-advised, perhaps, since your goal to speak for developers but you\n> didn't speak to them, IMO--) but I think transparency is essential to\n> avoid any appearance of misconduct.\n>\n>> But surely you can\n>> appreciate how bizarre your position on roadmaps is. What exactly, did\n>> you intended to create at [1]? Since it is described explicitly as \"the\n>> roadmap in Capacity increases for the Bitcoin system\", have you been\n>> disagreeing with it's characterization as a 'roadmap' this entire time?\n>> One wonders why you haven't said anything until now.\n> I did--\n>\n> As Bryan pointed out... with the exception of the intro and end and a\n> couple sentences in the middle my entire response to your post, with\n> the position on \"roadmaps\" was written a long time ago, specifically\n> to complain about and argue against that particular approach.\n>\n>> In my first email I list the benefits of having a roadmap. One benefit\n>> is that, without one, it is likely that a large majority of outsiders\n>> have almost no idea at all what is being worked on, what effect it will\n>> have, or when it might be ready, or to whom/what they should turn to for\n>> advice on such matters. Do you have a different way of addressing this\n>> communication problem?\n> I think you may be mistaking a roadmap with \"communications\"-- people\n> taking about research they are exploring is great! and we should have\n> more of it.  But like with RedHat and kernel features, we can't really\n> roadmap things that are unresourced and currently just unimplemented\n> exploration or test code-- without seeing things which are more or\n> less done the community can't rightfully decide if they'd want to\n> support something or not.  Perhaps they'll be good things perhaps\n> awful-- the devil is in the details, and until an effort is fairly\n> mature, you cannot see the details.\n>\n> There have, for example, been signature aggregation proposals in the\n> past that required address reuse (could only aggregate if they're\n> reused).  I would strongly oppose such a proposal, and I hope everyone\n> else here would too.  So if I were a third party looking at your\n> message, rather than the person who initially proposed the agg sig\n> thing you're talking about, I wouldn't know if I could love it or hate\n> it yet; and probably couldn't be expected to have much of an opinion\n> on it until there is a BIP and/or example implementation.\n>\n> To the extent that a roadmap differs from communications in general,\n> it is in that it also implies things that none of us can promise\n> except for our own efforts; Completion of implementations, success of\n> experiments, adoption-- basically assuming a level of top down control\n> that doesn't exist in a wide public collaboration.\n>\n> One of the great challenges in our industry is that we don't have\n> rings of communication: We don't have much in the way of semi-experts\n> to communicate to semi-semi-experts to communicate to media pundits to\n> communicate to the unwashed masses-- at each level closing the\n> inferential gap and explaining things in terms the audience\n> understands. We don't have things like LWN.   We'll get there, but it\n> it took the Linux world decades to build to what it has now. I think\n> various forces in the industry work against us-- e.g. we lose a mot of\n> mid tier technical people to the allure of striking it rich printing\n> money in their own altcoins.\n>\n> It might be attractive to try to end-run the slow development\n> appropriate web of reliable communications by deploying high authority\n> edicts, but it ultimately can't work because it doesn't map to how\n> things are accomplished, not in true collaborative open source, and\n> certainly not in an effort whos value comes substantially from\n> decentralization. Doing so, I fear, creates a false understanding of\n> authority.\n>\n> (It's a common misunderstanding, for example, that people do what I\n> want (for example); but in reality, I just try to avoid wasting my\n> time advocating things that I don't think other people are already\n> going to do; :) otherwise, if _I_ want something done I've got to do\n> it myself or horse trade for it, just like anyone else.)\n>\n> One of the great things about general communications is anyone can do\n> it.  Of course, unless they're talking about their own work, they\n> can't promise any of it will be completely-- but that is always true.\n>  If someone wants some guarantee about work, they have to be willing\n> to get it done themselves (and, of course, if it's a consensus\n> feature-- that much is necessary, but still not sufficient to get a\n> guarantee).\n>\n> [from your other reply]\n>>> A fine intention, but I've checked with many of the top contributors\n>>> and it sounds like the only regular developer you spoke with was\n>>> Luke-Jr.  Next time you seek to represent someone you might want to\n>>> try talking to them!\n>> That is false. I could provide a list of names but I'm really not sure\n>> what would be gained as result. You yourself admit that it is an\n>> excellent list of research, almost all which you support directly.\n>>\n>> So I think your only real objection is that I didn't talk to you\n>> specifically.\n> Come now, this is needlessly insulting. I would have made the same\n> comment if you had talked to me because you didn't talk to most/all of\n> Matt Corallo, Wladimir, Pieter Wuille, Alex Morcos, etc.... e.g. the\n> people doing most of the work of actually building the system.  Before\n> making that comment I went and checked with people to find out if only\n> I was left out.  Talking to Adam (who isn't involved in the project)\n> and Luke-jr (who is but is well known for frustratingly extreme\n> minority positions and also contracts for Blockstream sometimes) isn't\n> a great approach for the stated goal of speaking for developers!"
            },
            {
                "author": "Bryan Bishop",
                "date": "2017-07-12T02:48:38",
                "message_text_only": "On Tue, Jul 11, 2017 at 8:40 PM, Paul Sztorc via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> it, etc. But I am not willing to press the issue. Some of your other\n> comments I also find confusing but there is little to be gained in\n> clarifying them. )\n\nTo me it looked as if I was reading an email that was making a bunch\nof points about how bitcoin development can't be coordinated and how\nthings would be broken if it were to be coordinated (\"high authority\nedicts\"). There was a lot of harm caused by calling that 2015 email a\nroadmap. Somehow-- and there's no way to figure out how this happened\nI guess- people started putting timeline commitments to different\nfeatures. But there's really no way to guarantee any of those\ntimelines. And I think it's very quick to reach the point of unethical\nto advocate a perspective that there's guarantee to things will happen\naccording to that timeline in the standard bitcoin development model.\nI think there's already such a huge amount of public misunderstanding\naround how bitcoin development works that giving guarantees even as a\ncommunity would further increase the misunderstandings.\n\n> Generally, I still think that the roadmap was a helpful communication\n> device, which did more good than harm. And I am interested in hearing\n> what other people think.\n\nI think generally communicating about research directions and projects\nis useful and valuable, and I don't see any disagreement about that in\nitself from anyone in this thread. I recommend an abundance of caution\nwith regards to whether to call these efforts roadmaps.\n\n>> Come now, this is needlessly insulting. I would have made the same\n>> comment if you had talked to me because you didn't talk to most/all of\n>> Matt Corallo, Wladimir, Pieter Wuille, Alex Morcos, etc.... e.g. the\n>> people doing most of the work of actually building the system.  Before\n>> making that comment I went and checked with people to find out if only\n>> I was left out.  Talking to Adam (who isn't involved in the project)\n>> and Luke-jr (who is but is well known for frustratingly extreme\n>> minority positions and also contracts for Blockstream sometimes) isn't\n>\n> Let me try to explain my point of view. I did speak to several people,\n> in addition to the two names that I privately volunteered to you when\n> you had done no research (you failed to uncover any additional names),\n\nWell I mean he did look at some of the people putting the most effort\ninto bitcoin development. Why would he start at the other end of the\nlist as a rough check..?\n\n> suggested that, other than yourself and a few others, no one is\n> qualified even to write a first draft of a summary of present day\n\nThose suggestions were mixed with strong avocado that summaries are\ngood, coupled with recommendations that these aren't really roadmaps.\nAs to qualifying from where knowledge is sourced, yeah it seems like\ntalking with developers is a good idea, it seems everyone agrees with\nthat in this thread.\n\n> activities. This response is typical of the hostile review environment\n> which has existed in Bitcoin for years (I am more than used to it). If\n\nWell, to the extent that criticism is being misinterpreted as hostile,\nI have seen people get upset from basic security review because \"why\nwere't we more friendly and just say OK instead of pointing out the\nproblems\".\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-12T03:33:47",
                "message_text_only": "On Wed, Jul 12, 2017 at 1:40 AM, Paul Sztorc <truthcoin at gmail.com> wrote:\n> Separately, and very important to me, is that you feel that there are\n> unresolved objections to drivechain's security model, which you decline\n> to share with me and/or the list. So I would hope that you instead\n> choose to share your thoughts (as is, presumably, the purpose of this list).\n\nYou've complained in this thread that Tao Effects' specific criticisms\nwere off-topic for the thread. I agree.\n\n> Let me try to explain my point of view. I did speak to several people,\n\nYes, but apparently none of the most active developers or people\nworking on the proposals you named.  But you're fully entitled to\nwrite about whatever you want while talking to whomever you want or\neven without talking to anyone at all.\n\nBut, strategically it seems a little ill-advised.\n\nFor example, had you spoken to me I would have advised against the\ndates offered for signature agg-- which would be more realistic for\npublication of a complete proposal and implementation that the\ncommunity could finally have an opinion on, not for actual deployment;\nand I probably would have discouraged highlighting compaction since we\nhaven't worked on that much since December due to other priorities.\n\n(I also would have forwarded you my general concern about 'roadmaps'\nas a communication tool.)\n\nMaybe this could saved a bit of time and discussion, maybe not!\n\n> used the information I volunteered to you against me (in the form of\n> false characterizations of negligent email writing!), and you also\n\nI apologize for causing you to feel anything was used against you.  I\ndon't support the roadmap-approach you propose here-- but my failure\nto support it is definitionally non-personal according to the laws of\ntime and space: I wrote that opposition to other peoples similar\nproposal some nine months ago, in private-- it has nothing to do with\nyou in a rather profound and physical sense.\n\nTo the extent that I criticize whom you talked to, it was intended to\nbe merely a remark on strategy: You yourself stated that \"wrote the\nroadmap to try to be representative of a Core / developer position\",\nbut you didn't talk to the major developers or the authors of the\nthings you put on the roadmap--  there is /nothing improper/ or bad\nabout that... but I don't think it was good strategy. Feel free to\ndisagree, it was-- perhaps-- unsolicited advice.\n\nIt seems to me that your goal is creating more communication around\nthe clear set of obvious shared intentions; sounds great. Dressing it\nas an official \"roadmap\" I think works counter to that purpose, and to\nreally be successful with the communications goal  I think it would be\nbest to go around privately polling major actors to find out what\nthey'd add or remove then take the intersection then spare everyone\nthe debate.  Not that debate isn't good, but we shouldn't shouldn't be\ndebating over an omnibus bill that needlessly ties things together,\npeople can debate each initiative on its own merits in its own\nthreads... the purpose was to communicate, right?  I do support that\ngoal, even though I don't think I support the current approach.\n\nAs before-- that is more unsolicited advice, feel free to ignore it.\nJust keep in mind that no one owes anyone a response. I did take the\ntime to read and understand your message. I'm sorry that my response\nisn't more to your liking. I'm thankful that you read and responded to\nmy reply.\n\nCheers,"
            },
            {
                "author": "Karl Johan Alm",
                "date": "2017-07-12T01:22:59",
                "message_text_only": "On Wed, Jul 12, 2017 at 6:11 AM, Gregory Maxwell via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> IMO the way to do \"roadmaps\" in Bitcoin is to roadmap the finalization\n> and release process once the basic technology is done; because it's\n> only past that point that guarantees can really start being made.\n\nBitcoin development differs from Linux kernel development in a number\nof obvious ways, such as the fact Bitcoin is being \"patched in\nflight\". The current political situation over Bitcoin development is\nalso quite different, with scalability being a major concern for a lot\nof users, and conflicting views leading to risky technical gambles.\n\nHaving *something* like a roadmap that gives the average user some\ninsights into what exactly is being planned for Bitcoin is very\ndesirable, arguably even necessary, in particular for the scaling\nsolutions. Putting deadlines and dates in would of course be highly\nirresponsible, as no one can predict how much of their free time\nvolunteer developers will put into the project in advance (or whether\nthey will stick around for the next X months or stop being\ncontributors).\n\nI think there is necessity for a document that describes the project\nintentions for scaling solutions, but I don't think adding dates and\ndeadlines is appropriate. That may or may not be a roadmap. I imagine\nsuch a document would be updated regularly as appropriate, which means\nit may be less of a roadmap than the traditional kind."
            },
            {
                "author": "Tom Zander",
                "date": "2017-07-12T09:37:32",
                "message_text_only": "On Wednesday, 12 July 2017 03:22:59 CEST Karl Johan Alm via bitcoin-dev \nwrote:\n> Bitcoin development differs from Linux kernel development in a number\n> of obvious ways, such as the fact Bitcoin is being \"patched in\n> flight\".\n\nI've heard this before and it doesn't make any sense to me. Just like your \nLinux box needs a reboot to get a kernel upgrade, your node needs a restart \nto upgrade. Neither the (entire) internet will go down nor the (entire) \nBitcoin network will go down as a result.\n\n> Having *something* like a roadmap that gives the average user some\n> insights into what exactly is being planned for Bitcoin is very\n> desirable, arguably even necessary,\n\nThis is fine, and groups that do development should do this more structured \nthan something like https://bitcoinhardforkresearch.github.io/\n\nIt just would not make any sense to have a roadmap for the *entire* industry \nas this would require you to decide what technical solution is better than \nanother before either of them are fully researched.\n\nIndividual groups can have solutions that they believe is the best. And then \nwe can let the market decide which one is to be actually activated.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Tom Zander",
                "date": "2017-07-12T09:02:51",
                "message_text_only": "On Tuesday, 11 July 2017 23:11:38 CEST Gregory Maxwell via bitcoin-dev \nwrote:\n> I think it's great that people want to experiment with things like\n> drivechains/sidechains and what not, but their security model is very\n> distinct from Bitcoin's and, given the current highly centralized\n> mining ecosystem, arguably not very good.  So positioning them as a\n> major solution for the Bitcoin project is the wrong way to go. Instead\n> we should support people trying cool stuff, at their own risk.\n>\n> So, given that although the vast majority of the things in the document\n> are things I've been supporting for months (Please see Note 1 way down\n> at the bottom) I cannot support your document.\n\nI\u201dm thinking along the same lines, a industry wide roadmap makes very little \nsense.\n\nMuch like in Linux we have a lot of smaller groups doing their own thing, \nall working for the good of Linux as they see it, and implicitly, as they \nuse it.\nI think its safe to say that Linus would not want any say over the roadmap \nof Intel or Google or any other particpant in the Linux space.\n\nI am in agreement with Gregory that we should reject a Bitcoin-wide scaling \nroadmap.\n\nI do suggest that smalle groups publish their individual roadmaps, show what \nthey are planning to work on in a place that people will find it (a website, \nnot a mailinglist archive).\n\nThose individual roadmaps then show what that group will work on, which \nhelps their communication. It helps people talking about Bitcoin to the \ngeneral public as well, and it helps people understand whom they would like \nto support financially or otherwise.\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            },
            {
                "author": "Anthony Towns",
                "date": "2017-07-11T23:28:39",
                "message_text_only": "On Mon, Jul 10, 2017 at 12:50:21PM -0400, Paul Sztorc via bitcoin-dev wrote:\n> We should revise [the roadmap]: remove what has been accomplished, \n> introduce new innovations and approaches, and update deadlines \n> and projections.\n\nTimelines have good and bad points (in this context, I'd generally call\nprojections good, deadlines bad :); people have interpreted the lack of\nany clear timeline for a hardmark on the 2015 roadmap as no plan for a\nhard fork at all; meanwhile the overly optimistic timeline for segwit\nbeing \"ready\" in April or July last year has been interpreted as \"ready\nfor use\" and treated as a failure, when it didn't work out that way.\n\nI think it would be helpful for the development community to have some\nway of talking about timelines, for instance to be able to say \"the\n*minimum* timeline for a reasonable hard fork is 6 months for proposal\nreview, speculative analysis and initial coding, 3 months for concrete\nproposal review and thorough testing, 3-6 months for consensus to develop\non whether to lock the proposed changes in as the new consensus, and\na further 6-24 months for wide scale deployment to occur before any\nbehavioural change to take actual effect\".\n\nThose numbers give a lead time of 18 to 38 months of engagement with the\ndeveloper community before it takes effect, as compared to the six month\ntimeline of the New York agreement. 18 months implies that a block size\nincrease would be *available* today if people wanting larger blocks had\nengaged with the development community from January 2016 in the same\nway that segwit was developed, rather than working in their own sandboxes.\n\nThat could have happened: the proposals in \n\n  https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011995.html\n\nfrom Dec 2015 could have been engaged with, and, optimistically, we could\nhave a non-controversial deployment of SpoonNet already if they had been.\n\nIt might be a good idea to actually engage with investors and businesses\non this: the point of the timelines above isn't to slow things down for\nits own sake, it's that you need to take time in order to think through\nthe potential consequences of changes, and avoid unintended bad outcomes.\nThat seems like something that investors and businesses can understand,\nand endorse up front -- and they could meaningfully do so simply by saying\n\"any hard-fork that does not go through each of the stages for at least\nthe minimum time will be treated as an altcoin rather than an upgrade\nof bitcoin\". But the process has to be \"here is what it takes from a\ntechnical POV to avoid fucking up bitcoin; does your company endorse\nbeing responsible with other people's money despite the costs of doing\nso?\" If you're in a move-fast-and-break-things mode, the answer might\nlegitimately be \"no\", of course.\n\n>  ==== Beginning of New (\"July 2017\") Roadmap Draft ====\n\nI'd suggest dividing the activities into phases more clearly; maybe:\n\n - Already available to users:\n     * version bits\n     * compact block relay\n     * FIBRE\n     * CSV\n     * better fee estimation\n\n - Awaiting consensus:\n     * segregated witness\n\n - Active development / concrete specifications:\n     * lightning network\n     * light client mode for bitcoin core (PR#10794)\n\n - Draft proposals at experimental stage:\n     * transaction compression? (or is this the already deployed stuff?)\n     * schnorr sig aggregation\n     * drivechain\n     * spoonnet\n     * mimblewimble\n     * block size increases\n\n - Ideas that aren't even experiments yet\n     * asicboost prevention\n\n> There is\n> currently no consensus on a hard fork date, but there is a rough\n> consensus that one would require at least 6 months to coordinate\n> effectively, which would place it in the year 2018 at earliest.\n\nAs above, it seems to me that 18 months of engagement is likely a bare\nminimum amount of time for a robustly implemented hard fork (6 months is\nalmost exactly segwit2x's total timeline, from proposal in late May as\nthe New York Agreement to the new rules being available in mid-November,\nand it doesn't look at all robust to me).  \n\nPossibly if the existing features of spoonnet are already adequate,\nyou could cut that down by a few months. But realistically, that says\nto me early 2019 at the absolute earliest, and if engagement with the\ndevelopment process doesn't start tomorrow, later than that.\n\nFWIW, here's a longer form draft of what I think hard fork guidelines\nmaybe could look like:\n\n  https://gist.github.com/ajtowns/914cf2309822bff357cda4ab3f48a966\n\nIt's obviously blatantly contradictory with support of the NYA/segwit2x,\nbut at this point I think that's true of any process that's not just\na rephrasing of \"move fast and break things\".\n\n> Google Doc (if you're into that kind of thing):\n> https://docs.google.com/document/d/1gxcUnmYl7yM0oKR9NY9zCPbBbPNocmCq-jjBOQSVH-A/edit?usp=sharing\n\nPublishing something like this as an informational BIP every year or\ntwo seems like a good idea to me.\n\nInstead of a \"roadmap\" (with the implication that there's a schedule\npeople might rely on and developers have to meet), maybe just have it as\na list of the current high impact scaling features being worked on --\nwhere the purpose of publishing the list is to let people understand\nhow far various ideas have progressed currently, and focus attention on:\n\n  - wider adoption of already deployed features, by users, exchanges,\n    wallets, etc; eg segwit doesn't scale anything if no one uses it\n  - achieving activation of implemented features\n  - encouraging R&D on approaches that are currently still experimental\n    in order to make them actually usable\n\nIn that case, there's no actual need for guessing at future dates;\njust the current status is sufficient.\n\nDocumenting current roadblocks might also be valuable (eg, lightning and\nsignature aggregation and drivechains etc are kind-of stalled waiting\non segwit's activation, I think; for a brief point, segwit was stalled\nwaiting on compact blocks, etc). Might not be worthwhile updating the doc\nregularly to keep track of what's a roadblock though.\n\n(I think you could usefully generalise beyond scaling to just \"high\nimpact features\" really)\n\nCheers,\naj"
            },
            {
                "author": "Steve Davis",
                "date": "2017-07-11T22:26:38",
                "message_text_only": "> I think it's great that people want to experiment with things like\n> drivechains/sidechains and what not, but their security model is very\n> distinct from Bitcoin\u2019s\n\nAgree that experimentation is great and that it is usually the case that the security model differs.\n\nIsn\u2019t it also true also that the security model for SegWit is distinct from that defined for the Bitcoin token?\n\nIt does not appear to be a \"chain of digital signatures\" as per the original definition? I do understand that the hash state is still respected at block level. I\u2019m referring more to the token\u2019s chain.\n\nAny clarification appreciated.\n\nThanks,\n\n/sd"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-12T00:21:09",
                "message_text_only": "On 7/11/2017 7:12 PM, Tao Effect wrote:\n> Paul,\n>\n> There is a difference between replying to an email, and addressing the\n> issues that were brought up in it.\n>\n> I did read your reply, and I chose not to respond to it because it did\n> not address anything I said.\n\nIn that case you should clarify, which is exactly what you are doing now.\n\n>\n> Here's an example:\n>\n>> It would not be accurate to say that miners have \"total\" control. Miners\n>> do control the destination of withdrawals, but they do not control the\n>> withdrawal-duration nor the withdrawal-frequency.\n>>\n>> So, if miners wish to 'steal' from a sidechain, they _can_ initiate a\n>> theft, but they can not change the fact that their malfeasance will be\n>> [a] obvious, and [b] on display for a long period of time.\n>\n> Here, you admit that the security of the sidechains allows miners to\n> steal bitcoins, something they cannot do currently.\n\nIf that were the case, then DC would need to be a hard fork. It so\nhappens that it is *not* the case -- if users choose to deposit to an\nanyone-can-spend output, then miners can take the Bitcoins, which *is*\nsomething that miners can do currently.\n\n>\n> You next tried to equate three different types of theft, what you\n> called \"Classic Theft\", \"Channel Theft\", and \"Drivechain Theft\", saying:\n>\n>> I do not think that any of the three stands out as being categorically\n>> worse than the others\n>\n> To anyone who understands bitcoin, there is a very clear,\n> unmistakeable difference between double-spending (\"Classic Theft\"),\n> and *ownership* of the private key controlling the bitcoins.\n>\n> Similarly, to anyone who understands bitcoin, there is also a very\n> clear, unmistakeable difference between censorship (\"Channel Theft\"),\n> and *ownership* of the private key controlling the bitcoins.\n\nI am not sure what you are disagreeing with. The three thefts involve\ndifferent attacker resources and behaviors, and in that way they are\ndifferent. But in all three cases the user has lost the BTC they would\nhave otherwise owned, and in that way they are not different.\n\nAnd users are under no obligation to use DC, just as they are under no\nobligation to open a LN channel (or use P2SH, etc).\n\n>\n> I am not sure how else to respond to that email, given that none of\n> the issues were really addressed.\nOther than your complaint about being freely given the option to upgrade\nto software which will give you the option to freely opt-in to a\ndifferent security model that you can otherwise ignore, feel free to\nbring up any other issues you feel need to be addressed.\n\n> Drivechain is an unmistakeable weakening of Bitcoin's security\n> guarantees. This you have not denied.\nThat is false. I do deny it. Per the logic of the soft fork, the\nsecurity properties are at best unchanged (as I think almost everyone\nelse on this list would acknowledge). And even for those users who\nopt-in, I feel the risk of theft is low, as I explain in the very\npassage you've quoted above.\n\nAnd please try to avoid going off-topic -- this is supposed to be about\nthe idea of a new roadmap.\n\nPaul\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170711/4b60c333/attachment.html>"
            },
            {
                "author": "Jacob Eliosoff",
                "date": "2017-07-12T07:27:32",
                "message_text_only": "Just a quick note in favor of an updated roadmap (some may object to that\nlabel, but I think it's fine).  When you and your friends are planning your\nweekly movie outing, it's very helpful to have someone who knows the group,\nknows what films are playing, checks people's preferences, mails around\nproposals, updates with corrections, keeps a list of choices for future\nweeks, etc.  (Certainly not the same as imposing an agenda, except when the\ncoordinator gets pushy.)\n\nCore veterans like those on this thread are well placed to compile (not\ndecree) such a document - basically an informed view of what looks likely\nto get rough consensus, and in what order.  *Of course* some will dispute\nthe priorities etc, but it's my experience that if everyone virtuously\nrefrains from this kind of coordination effort, often the weekend rolls by\nwithout a film.\n\nAgreed that specific deadlines often create more problems than they solve,\nbut even without dates, clarifying priorities (eg, segwit before HF) is\nstill useful.\n\nAll this is aside from the fact that I have many criticisms of the \"movies\nchosen\" so far and the criteria used to choose them - another thread\n(basically, I support an interpretation of \"consensus\" that takes more note\nof non-dev constituents).  The consensus-marshaling effort is still\nimportant, and appreciated.\n\n\nOn Tue, Jul 11, 2017 at 8:21 PM, Paul Sztorc via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> And please try to avoid going off-topic -- this is supposed to be about\n> the idea of a new roadmap.\n>\n> Paul\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/516ee858/attachment.html>"
            },
            {
                "author": "CryptAxe",
                "date": "2017-07-12T22:07:47",
                "message_text_only": "You guys are both right that it is a different security model, with the\nimportant distinction that it is opt-in. What I disagree with about what\nyou said is only that we are encouraging more risky behavior by adding\nconsensus rules via softfork. There are additional risks with\ndrivechains, but not because of how the new consensus rules would be\nadded (it would be the same risk as the P2SH softfork).\n\nWhat's been explained to me a few times is that the\nanyone-can-spend-ness of new transaction types that depend on softforked\nconsensus rules are exponentially less risky to the point that it is\ninfeasible to steal them as blocks are added to the chain that activated\nthe soft fork. I believe that Luke-Jr and Lopp are both very good at\nexplaining this and I know that Lopp has actually done some research as\nto the cost of stealing these outputs. I can't remember the link but you\nmight find that with a google. One of them might even chime in and\nexplain that I'm totally wrong again!\n\nSorry for being a bit heated in my last response.\n\n\nOn 07/12/2017 02:55 PM, Tao Effect wrote:\n\n> That's a fair point, I confused anyone-can-spend with anyone-can-pay [1].\n>\n> Isn't it different in the case of P2SH and SegWit, don't full nodes\n> validate the script?\n>\n> In other words, miners don't have complete control over the coins,\n> full nodes keep a check on them.\n>\n> At least that was my understanding, and if that's not the case then it\n> doesn't make sense to me why Pieter would earlier in this thread\n> object to Drivechain on the grounds that it's a different security model.\n>\n> - Greg\n>\n> [1] https://steemit.com/bitcoin/@jl777/bitcoin-spinoff-fork-how-to-make-a-clean-fork-without-any-replay-attack-and-no-blockchain-visible-changes\n>\n>\n> --\n> Please do not email me anything that you are not comfortable also\n> sharing with the NSA.\n>\n>> On Jul 12, 2017, at 12:54 PM, CryptAxe via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org\n>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>>\n>> Are we just pulling numbers out of thin air now? https://p2sh.info/\n>> BIP16 for example is widely used. It would be difficult to find a\n>> single wallet that doesn't support BIP16 I have no idea what you are\n>> talking about.\n>>\n>>\n>> On 07/12/2017 12:42 PM, Tao Effect via bitcoin-dev wrote:\n>>> ...\n>>> In the present situation, anyone-can-spend outputs are used by\n>>> probably less than 0.1% of users, and most software doesn't even\n>>> allow for the possibility.\n>>>\n>>> In Drivechain it's *encouraged-by-design*!\n>>>\n>>> - Greg\n>>>\n>>> --\n>>> Please do not email me anything that you are not comfortable also\n>>> sharing with the NSA.\n>>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/c5024186/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Updating the Scaling Roadmap",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop",
                "Chris Stewart",
                "CryptAxe",
                "Steve Davis",
                "Adam Back",
                "Anthony Towns",
                "Tom Zander",
                "Gregory Maxwell",
                "Paul Sztorc",
                "Karl Johan Alm",
                "Pieter Wuille",
                "Tao Effect",
                "Jacob Eliosoff"
            ],
            "messages_count": 36,
            "total_messages_chars_count": 149173
        }
    },
    {
        "title": "[bitcoin-dev] how to disable segwit in my build?",
        "thread_messages": [
            {
                "author": "Dan Libby",
                "date": "2017-07-12T06:17:24",
                "message_text_only": "Hi!\n\nUp to now, I have purposefully been running bitcoin releases prior to\n0.13.1 as a way to avoid the (possible) segwit activation, at least\nuntil such time as I personally am comfortable with it.\n\nAt this time, I would like to have some of the more recent features, but\nwithout the possibility that my node will activate segwit, until I\nchoose to.\n\nAs I understand it, there is not any user setting that can disable\nsegwit from activating on my node.  If there was, I would use it.\nPlease correct me if wrong.\n\nI am here to ask what is the simplest code change (fewest LOC changed) I\ncan make to 0.14.2+ code that would disable segwit from activating and\nkeep my node acting just like a legacy node with regards to consensus\nrules, even if/when the rest of the network activates segwit.\n\nI think, more generally, the same question applies to most any Bip9\nversionbits feature.\n\nI'm not looking for reasons NOT to do it, only HOW to do it without\nunwanted side-effects.  My first untested idea is just to change the\nsegwit nTimeout in chainparams.cpp to a date in the past.  But I figured\nI should ask the experts first.   :-)\n\nthanks.\n\n\nps: full disclosure:  I may be the only one who wants this, but if\nsuccessful, I do plan to release my changes in case someone else wishes\nto run with status-quo consensus rules."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2017-07-13T01:04:19",
                "message_text_only": "On Wed, Jul 12, 2017 at 6:17 AM, Dan Libby via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hi!\n>\n> Up to now, I have purposefully been running bitcoin releases prior to\n> 0.13.1 as a way to avoid the (possible) segwit activation, at least\n> until such time as I personally am comfortable with it.\n\nIt is not simple to do so correctly, I couldn't tell you off the top\nof my head; a number of things must be changed it isn't as simple as\ndisabling the activiation because of the segwit P2P changes.  Nor is\nit a supported configuration. Even if it were now, it wouldn't be one\nwe'd continue to support in the future after segwit is active, as\nwe're likely to drop deployment/compat code.\n\nCan you explain why you wish to do this?  It should have absolutely no\nadverse impact on you-- if you don't use segwit, you don't use it-- it\nmay be the case that there is some confusion about the implications\nthat I could clear up for you... or suggest alternatives that might\nachieve your goals.\n\nHaving a node that supports it won't make it more likely to activate,\nyou can mine without signaling segwit even on a node that supports it.\nYour own transactions will not use segwit just because your node\nsupports it.\n\nEffectively the only reason I'm aware of to intentionally not run with\nsegwit support beyond just not having upgraded yet, is a desire to try\nto temporarily have as your tip block a block that was actively\nstealing the segwit transactions of a third party. Which doesn't seem\neither personally or publicly desirable; but I fully admit I may be\nmissing some good reason which I am not aware of."
            },
            {
                "author": "Federico Tenga",
                "date": "2017-07-13T13:11:21",
                "message_text_only": "On 13 July 2017 at 03:04, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> Can you explain why you wish to do this?  It should have absolutely no\n> adverse impact on you-- if you don't use segwit, you don't use it-- it\n> may be the case that there is some confusion about the implications\n> that I could clear up for you... or suggest alternatives that might\n> achieve your goals.\n>\n\nI believe that a good reason not to wish your node to be segwit compliant\nis to avoid having to deal with the extra bandwidth that segwit could\nrequire.   Running a 0.14.2 node means being ok with >1MB blocks, in case\nsegwit is activated and widely used. Users not interested in segwit\ntransactions may prefer to keep the cost of their node lower.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/df014a46/attachment.html>"
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-07-13T13:39:40",
                "message_text_only": "> I believe that a good reason not to wish your node to be segwit compliant\nis to avoid having to deal with the extra bandwidth that segwit could\nrequire.   Running a 0.14.2 node means being ok with >1MB blocks, in case\nsegwit is activated and widely used. Users not interested in segwit\ntransactions may prefer to keep the cost of their node lower.\n\nIf the majority of the network decides to deploy SegWit, it would be in\nyour best interest to validate the SegWit transactions, because you might\nwill be downgraded to near-SPV node validation.\nIt would be okay to still run a \"non-SegWit\" node if there's no SegWit\ntransactions in the chain of transactions for your bitcoins, otherwise you\ncannot fully verify the the ownership of your bitcoins.\nI'm not sure the practicality of this in the long run, but it makes a case\nfor having an up-to-date non-SegWit node, although I think it's a bit of a\nstretch.\n\nGreetings\nHampus\n\n2017-07-13 15:11 GMT+02:00 Federico Tenga via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> On 13 July 2017 at 03:04, Gregory Maxwell via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>> Can you explain why you wish to do this?  It should have absolutely no\n>> adverse impact on you-- if you don't use segwit, you don't use it-- it\n>> may be the case that there is some confusion about the implications\n>> that I could clear up for you... or suggest alternatives that might\n>> achieve your goals.\n>>\n>\n> I believe that a good reason not to wish your node to be segwit compliant\n> is to avoid having to deal with the extra bandwidth that segwit could\n> require.   Running a 0.14.2 node means being ok with >1MB blocks, in case\n> segwit is activated and widely used. Users not interested in segwit\n> transactions may prefer to keep the cost of their node lower.\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/17df3337/attachment.html>"
            },
            {
                "author": "Dan Libby",
                "date": "2017-07-13T16:19:00",
                "message_text_only": "On 07/13/2017 06:39 AM, Hampus Sj\u00f6berg via bitcoin-dev wrote:\n>> I believe that a good reason not to wish your node to be segwit\n> compliant is to avoid having to deal with the extra bandwidth that\n> segwit could require.   Running a 0.14.2 node means being ok with >1MB\n> blocks, in case segwit is activated and widely used. Users not\n> interested in segwit transactions may prefer to keep the cost of their\n> node lower.\n> \n> If the majority of the network decides to deploy SegWit, it would be in\n> your best interest to validate the SegWit transactions, because you\n> might will be downgraded to near-SPV node validation.\n> It would be okay to still run a \"non-SegWit\" node if there's no SegWit\n> transactions in the chain of transactions for your bitcoins, otherwise\n> you cannot fully verify the the ownership of your bitcoins.\n> I'm not sure the practicality of this in the long run, but it makes a\n> case for having an up-to-date non-SegWit node, although I think it's a\n> bit of a stretch.\n\nRight.  Well, if I never upgrade to segwit, then there seems little\n(zero?) risk of having any segwit tx in my tx chain.\n\nThus this would be a way I could continue with a lower bandwidth cap and\nalso keep my coins \"untainted\", so to speak.\n\nI'm not sure about it for the long run either.  more just something of\nan experiment."
            },
            {
                "author": "Jameson Lopp",
                "date": "2017-07-13T16:35:46",
                "message_text_only": "On Thu, Jul 13, 2017 at 12:19 PM, Dan Libby via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 07/13/2017 06:39 AM, Hampus Sj\u00f6berg via bitcoin-dev wrote:\n> >> I believe that a good reason not to wish your node to be segwit\n> > compliant is to avoid having to deal with the extra bandwidth that\n> > segwit could require.   Running a 0.14.2 node means being ok with >1MB\n> > blocks, in case segwit is activated and widely used. Users not\n> > interested in segwit transactions may prefer to keep the cost of their\n> > node lower.\n> >\n> > If the majority of the network decides to deploy SegWit, it would be in\n> > your best interest to validate the SegWit transactions, because you\n> > might will be downgraded to near-SPV node validation.\n> > It would be okay to still run a \"non-SegWit\" node if there's no SegWit\n> > transactions in the chain of transactions for your bitcoins, otherwise\n> > you cannot fully verify the the ownership of your bitcoins.\n> > I'm not sure the practicality of this in the long run, but it makes a\n> > case for having an up-to-date non-SegWit node, although I think it's a\n> > bit of a stretch.\n>\n> Right.  Well, if I never upgrade to segwit, then there seems little\n> (zero?) risk of having any segwit tx in my tx chain.\n>\n>\nIf you mean you wish to avoid receiving UTXOs that have value that was at\none point previously encumbered by a SegWit output then no, you can't avoid\nthat. No more than you can currently avoid receiving BTC that were at one\npoint in time encumbered by a P2SH output.\n\n\n> Thus this would be a way I could continue with a lower bandwidth cap and\n> also keep my coins \"untainted\", so to speak.\n>\n> I'm not sure about it for the long run either.  more just something of\n> an experiment.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/406a3f3b/attachment.html>"
            },
            {
                "author": "Dan Libby",
                "date": "2017-07-13T21:58:04",
                "message_text_only": "On 07/13/2017 09:35 AM, Jameson Lopp wrote:\n> \n> \n> On Thu, Jul 13, 2017 at 12:19 PM, Dan Libby via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     On 07/13/2017 06:39 AM, Hampus Sj\u00f6berg via bitcoin-dev wrote:\n>     >> I believe that a good reason not to wish your node to be segwit\n>     > compliant is to avoid having to deal with the extra bandwidth that\n>     > segwit could require.   Running a 0.14.2 node means being ok with >1MB\n>     > blocks, in case segwit is activated and widely used. Users not\n>     > interested in segwit transactions may prefer to keep the cost of their\n>     > node lower.\n>     >\n>     > If the majority of the network decides to deploy SegWit, it would be in\n>     > your best interest to validate the SegWit transactions, because you\n>     > might will be downgraded to near-SPV node validation.\n>     > It would be okay to still run a \"non-SegWit\" node if there's no SegWit\n>     > transactions in the chain of transactions for your bitcoins, otherwise\n>     > you cannot fully verify the the ownership of your bitcoins.\n>     > I'm not sure the practicality of this in the long run, but it makes a\n>     > case for having an up-to-date non-SegWit node, although I think it's a\n>     > bit of a stretch.\n> \n>     Right.  Well, if I never upgrade to segwit, then there seems little\n>     (zero?) risk of having any segwit tx in my tx chain.\n> \n> \n> If you mean you wish to avoid receiving UTXOs that have value that was\n> at one point previously encumbered by a SegWit output then no, you can't\n> avoid that. No more than you can currently avoid receiving BTC that were\n> at one point in time encumbered by a P2SH output.\n\nfair enough.  This actually wasn't an area I'd considered much before\nHampus brought it up.\n\nI would like to understand it a bit better, as I think it applies\nequally to any pre-segwit node, yes?   So let's say I am running 0.13.0\nand someone sends me bitcoins to a P2PKH address, but that person\npreviously received them to a P2WPKH address.\n\nIf I understand correctly, my node will accept the incoming tx inputs\nbut obviously will not perform any segwit related validation, thus those\ninputs are not fully validated.  I don't yet understand how my node\nthinks they are valid at all given that it does not understand P2WPKH\naddress format, so either it doesn't need to, or P2WPKH is somehow\nalready valid.  I know this has all been discussed in the past, so if\nsomeone can point me towards a document that explains it I'd be happy to\nread that.\n\nthanks!"
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-07-13T22:50:32",
                "message_text_only": "> I would like to understand it a bit better, as I think it applies\nequally to any pre-segwit node, yes?   So let's say I am running 0.13.0\nand someone sends me bitcoins to a P2PKH address, but that person\npreviously received them to a P2WPKH address.\n\nYes, this applies to all non-SegWit nodes.\n\n> If I understand correctly, my node will accept the incoming tx inputs\nbut obviously will not perform any segwit related validation, thus those\ninputs are not fully validated.\n\nYes.\nSo you have two choices to be fully secure:\n1. Validate using the new rules of the network (in other words, run a\nSegWit node)\n2. Avoid any chain of transaction that contains a SegWit transaction\n\n> I don't yet understand how my node\nthinks they are valid at all given that it does not understand P2WPKH\naddress format, so either it doesn't need to, or P2WPKH is somehow\nalready valid.\n\nSo how softforks often work is that you make the transaction appear to be\nalways spendable for old nodes, regardless if it really was spendable or\nnot. This will make sure it is a softfork, the update is backwards\ncompatible.\nIf it would be the other way around, if new rules that the node doesn't\nunderstand would always be invalid, it would be hardfork, which is what\nwe're trying to avoid in the first place.\n\n> so if\nsomeone can point me towards a document that explains it I'd be happy to\nread that.\n\nSee\nhttps://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#Backward_compatibility\nSo the witness program is encoded in a new format that old nodes do not\nunderstand.\nThis means that for old nodes, a number >0 will be put on the stack. When\nthe script is done, it will be evaluated to true (because of >0) and be\ncounted as a valid spend.\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki also\nexplains the new witness program more in detail (I left out some details in\nmy explanation).\n\nCheers\nHampus\n\n2017-07-13 23:58 GMT+02:00 Dan Libby via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> On 07/13/2017 09:35 AM, Jameson Lopp wrote:\n> >\n> >\n> > On Thu, Jul 13, 2017 at 12:19 PM, Dan Libby via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> >     On 07/13/2017 06:39 AM, Hampus Sj\u00f6berg via bitcoin-dev wrote:\n> >     >> I believe that a good reason not to wish your node to be segwit\n> >     > compliant is to avoid having to deal with the extra bandwidth that\n> >     > segwit could require.   Running a 0.14.2 node means being ok with\n> >1MB\n> >     > blocks, in case segwit is activated and widely used. Users not\n> >     > interested in segwit transactions may prefer to keep the cost of\n> their\n> >     > node lower.\n> >     >\n> >     > If the majority of the network decides to deploy SegWit, it would\n> be in\n> >     > your best interest to validate the SegWit transactions, because you\n> >     > might will be downgraded to near-SPV node validation.\n> >     > It would be okay to still run a \"non-SegWit\" node if there's no\n> SegWit\n> >     > transactions in the chain of transactions for your bitcoins,\n> otherwise\n> >     > you cannot fully verify the the ownership of your bitcoins.\n> >     > I'm not sure the practicality of this in the long run, but it\n> makes a\n> >     > case for having an up-to-date non-SegWit node, although I think\n> it's a\n> >     > bit of a stretch.\n> >\n> >     Right.  Well, if I never upgrade to segwit, then there seems little\n> >     (zero?) risk of having any segwit tx in my tx chain.\n> >\n> >\n> > If you mean you wish to avoid receiving UTXOs that have value that was\n> > at one point previously encumbered by a SegWit output then no, you can't\n> > avoid that. No more than you can currently avoid receiving BTC that were\n> > at one point in time encumbered by a P2SH output.\n>\n> fair enough.  This actually wasn't an area I'd considered much before\n> Hampus brought it up.\n>\n> I would like to understand it a bit better, as I think it applies\n> equally to any pre-segwit node, yes?   So let's say I am running 0.13.0\n> and someone sends me bitcoins to a P2PKH address, but that person\n> previously received them to a P2WPKH address.\n>\n> If I understand correctly, my node will accept the incoming tx inputs\n> but obviously will not perform any segwit related validation, thus those\n> inputs are not fully validated.  I don't yet understand how my node\n> thinks they are valid at all given that it does not understand P2WPKH\n> address format, so either it doesn't need to, or P2WPKH is somehow\n> already valid.  I know this has all been discussed in the past, so if\n> someone can point me towards a document that explains it I'd be happy to\n> read that.\n>\n> thanks!\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170714/6adac594/attachment-0001.html>"
            },
            {
                "author": "Dan Libby",
                "date": "2017-07-13T23:20:45",
                "message_text_only": "Hampus, thanks for the explanation!\n\nOn 07/13/2017 03:50 PM, Hampus Sj\u00f6berg wrote:\n\n> Yes.\n> So you have two choices to be fully secure:\n> 1. Validate using the new rules of the network (in other words, run a\n> SegWit node)\n> 2. Avoid any chain of transaction that contains a SegWit transaction\n\nsounds good, though I'm unclear on how exactly to achieve (2) given that\nany party I have ever transacted with (or otherwise knows an address of\nmine) can send me coins at any time.  So it seems the only possible way\nto be certain is to run a node that has never published an address to a\n3rd party.  Is that accurate?\n\nAnother thing that could be done is to modify my own node so that it\nactually rejects such tx, but then I have modified consensus rules\nmyself, thus defeating the goal of remaining with status-quo rules, and\nanyway the rest of the network would accept the tx.  I guess the benefit\nis that I could be certain of the remaining funds I have.\n\nI suppose that it would be possible without modifying any rule to\nconstruct a \"certain balance\" and an \"uncertain balance\".\n\nI don't intend to do such modifications! just grasping for understanding.\n\n\n> See\n> https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#Backward_compatibility\n> So the witness program is encoded in a new format that old nodes do not\n> understand.\n> This means that for old nodes, a number >0 will be put on the stack.\n> When the script is done, it will be evaluated to true (because of >0)\n> and be counted as a valid spend.\n> \n> https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki also\n> explains the new witness program more in detail (I left out some details\n> in my explanation).\n\nI read the relevant parts, thanks!"
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-07-14T08:52:42",
                "message_text_only": "> sounds good, though I'm unclear on how exactly to achieve (2) given that\nany party I have ever transacted with (or otherwise knows an address of\nmine) can send me coins at any time.  So it seems the only possible way\nto be certain is to run a node that has never published an address to a\n3rd party.  Is that accurate?\n\nYes, as soon as you receive new Bitcoins, there's a chance that they have\nbeen in a SegWit transaction at some point.\nI'm not sure if you can see the chain of transactions for an address in\nbitcoin-cli, but if that is possible, you should be able to double check\nthe transaction types.\n\n> Another thing that could be done is to modify my own node so that it\nactually rejects such tx, but then I have modified consensus rules\nmyself, thus defeating the goal of remaining with status-quo rules, and\nanyway the rest of the network would accept the tx.  I guess the benefit\nis that I could be certain of the remaining funds I have.\n\nHmm yes, if you reject a such transaction, you'll hardfork the network.\nIf you ignore it in your wallet, you'll be safe, but you'll lose those\nbitcoins ofc.\nIt's a difficult situation.\n\n> I suppose that it would be possible without modifying any rule to\nconstruct a \"certain balance\" and an \"uncertain balance\".\n\nShould be possible.\n\n> Hampus, thanks for the explanation!\n\nYou're welcome!\nI personally very much like and want SegWit, but I respect people that\nwants to maintain the status quo, it's what will make Bitcoin strong in the\nlong run.\n\nCheers\nHampus\n\n2017-07-14 1:20 GMT+02:00 Dan Libby via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> Hampus, thanks for the explanation!\n>\n> On 07/13/2017 03:50 PM, Hampus Sj\u00f6berg wrote:\n>\n> > Yes.\n> > So you have two choices to be fully secure:\n> > 1. Validate using the new rules of the network (in other words, run a\n> > SegWit node)\n> > 2. Avoid any chain of transaction that contains a SegWit transaction\n>\n> sounds good, though I'm unclear on how exactly to achieve (2) given that\n> any party I have ever transacted with (or otherwise knows an address of\n> mine) can send me coins at any time.  So it seems the only possible way\n> to be certain is to run a node that has never published an address to a\n> 3rd party.  Is that accurate?\n>\n> Another thing that could be done is to modify my own node so that it\n> actually rejects such tx, but then I have modified consensus rules\n> myself, thus defeating the goal of remaining with status-quo rules, and\n> anyway the rest of the network would accept the tx.  I guess the benefit\n> is that I could be certain of the remaining funds I have.\n>\n> I suppose that it would be possible without modifying any rule to\n> construct a \"certain balance\" and an \"uncertain balance\".\n>\n> I don't intend to do such modifications! just grasping for understanding.\n>\n>\n> > See\n> > https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#Backward_\n> compatibility\n> > So the witness program is encoded in a new format that old nodes do not\n> > understand.\n> > This means that for old nodes, a number >0 will be put on the stack.\n> > When the script is done, it will be evaluated to true (because of >0)\n> > and be counted as a valid spend.\n> >\n> > https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki also\n> > explains the new witness program more in detail (I left out some details\n> > in my explanation).\n>\n> I read the relevant parts, thanks!\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170714/817caf42/attachment-0001.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2017-07-14T09:03:58",
                "message_text_only": "On Fri, Jul 14, 2017 at 12:20 AM, Dan Libby via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On 07/13/2017 03:50 PM, Hampus Sj\u00f6berg wrote:\n> > 2. Avoid any chain of transaction that contains a SegWit transaction\n>\n> sounds good, though I'm unclear on how exactly to achieve (2) given that\n> any party I have ever transacted with (or otherwise knows an address of\n> mine) can send me coins at any time.  So it seems the only possible way\n> to be certain is to run a node that has never published an address to a\n> 3rd party.  Is that accurate?\n>\n\nYou would also have to ensure that everyone you give your addresses to\nfollows the same rule.  As time passes, there would be fewer and fewer\npeople who have \"clean\" outputs.\n\n>From the perspective of old nodes, segwit looks like lots of people are\ntransferring money to \"anyone-can-spend\" outputs.  This outputs are\ncompletely unprotected.  Literally, anyone can spend them.  (In practice,\nminers would spend them, since why would they include a transaction that\nsends \"free money\" to someone else).\n\nIf you run an old node, then someone could send you a transaction that only\nspends segwit outputs and you would think it is a valid payment.\n\nImagine that there are only 3 UTXOs (Alice, Bob and Carl have all the\nBitcoins).\n\nUTXO-1:  Requires signature by Alice (legacy output)\n\nUTXO-2: Anyone can pay (but is actually a segwit output that needs to be\nsigned by Bob)\n\nUTXO-3: Anyone can pay (but is actually a segwit output that needs to be\nsigned by Carl)\n\nOnly Bob can spend UTXO-2, since it needs his signature.\n\nAnyone could create a transaction that spends UTXO-2 and it would look good\nto all legacy nodes.  It is an \"anyone can spend\" output after all.\n\nHowever, if they submit the transaction to the miners, then it will be\nrejected, because according to the new rules, it is invalid (it needs to be\nsigned by Bob).\n\nOnce a soft fork goes through, then all miners will enforce the new rules.\n\nA miner who added the transaction to one of his blocks (since it is valid\nunder the old rules) would find that no other miners would accept his block\nand he would get no fees for that block.  This means that all miners have\nan incentive to upgrade once a soft fork activates.\n\nHis block would be accepted by legacy nodes, for a short while.  However,\nsince 95% of the miners are on the main chain, their chain (which rejects\nhis block) would end up the longest.\n\nIf you are running a legacy client when a soft fork comes in, then you can\nbe tricked with \"zero confirm\" transactions.  The transaction will look\ngood to you, but will be invalid under the new rules.  This makes your\nclient think you have received (a lot of) money, but in practice, the\ntransaction will not be accepted by the miners.\n\n\n> Another thing that could be done is to modify my own node so that it\n> actually rejects such tx, but then I have modified consensus rules\n> myself, thus defeating the goal of remaining with status-quo rules, and\n> anyway the rest of the network would accept the tx.  I guess the benefit\n> is that I could be certain of the remaining funds I have.\n>\n\nIf you wanted, you could mark any transaction that has a segwit looking\noutput as \"dirty\" and then all of its descendants as dirty.\n\nHowever, pretty quickly, only a tiny fraction of all bitcoins would be\nclean.\n\nI suppose that it would be possible without modifying any rule to\n> construct a \"certain balance\" and an \"uncertain balance\".\n>\n\nRight.\n\nI think a reasonably compromise would be to assume that all transactions\nburied more than a few hundred blocks deep are probably ok.  Only segwit\nlooking outputs would be marked as \"uncertain\".\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170714/ed6c4875/attachment.html>"
            },
            {
                "author": "Lucas Clemente Vella",
                "date": "2017-07-13T23:19:12",
                "message_text_only": "2017-07-13 18:58 GMT-03:00 Dan Libby via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> If I understand correctly, my node will accept the incoming tx inputs\n> but obviously will not perform any segwit related validation, thus those\n> inputs are not fully validated.  I don't yet understand how my node\n> thinks they are valid at all given that it does not understand P2WPKH\n> address format, so either it doesn't need to, or P2WPKH is somehow\n> already valid.  I know this has all been discussed in the past, so if\n> someone can point me towards a document that explains it I'd be happy to\n> read that.\n>\n\n>From your perspective, the P2WPKH will look like a anyone-can-spend\ntransaction, thus, valid no matter who is spending. So, you would be\nbasically leaving the security of segwit transactions to those who actually\nare interested in and using them. If your fork becomes popular, it would\ndecrease the security of Segwit transactions to something akin to the\nsecurity model of the Drivechain currently being discussed: only those\nparticularly interested in that particular sidechain (and segwit witness\ncould be loosely categorized into a sidechain) will be responsible to\nprevent others from stealing funds from the anyone-can-spend transactions.\n\n-- \nLucas Clemente Vella\nlvella at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/71992a34/attachment.html>"
            },
            {
                "author": "Dan Libby",
                "date": "2017-07-13T16:05:01",
                "message_text_only": "On 07/12/2017 06:04 PM, Gregory Maxwell wrote:\n> On Wed, Jul 12, 2017 at 6:17 AM, Dan Libby via bitcoin-dev\n\n> It is not simple to do so correctly, I couldn't tell you off the top\n> of my head; a number of things must be changed it isn't as simple as\n> disabling the activiation because of the segwit P2P changes.  Nor is\n> it a supported configuration. Even if it were now, it wouldn't be one\n> we'd continue to support in the future after segwit is active, as\n> we're likely to drop deployment/compat code.\n\nI understand it is not in any way a supported configuration.\n\n> Can you explain why you wish to do this?  It should have absolutely no\n> adverse impact on you-- if you don't use segwit, you don't use it-- it\n> may be the case that there is some confusion about the implications\n> that I could clear up for you... or suggest alternatives that might\n> achieve your goals.\n\nPlease lets not go into the weeds debating about my reasons.\n\nI actually have nothing against segwit per-se, and think it is clever\ntech.  I wish that it, or another malleability fix, had been baked in\nfrom the start.  But it wasn't, and I dislike changing the consensus\nrules except if critical flaws are found.\n\n\nanyway, some of my reasons are:\n\nI am content with status-quo consensus rules.\n\nI see greatest long-term value in a fixed, unchanging set of rules\n(though that is outside my control of course).\n\nI have limited bandwidth and resources and prefer 1mb limit for that reason.\n\nPrior to activation, I do not choose to signal for segwit in any way\nshape or form.\n\nI realize I could run a pre-segwit node forever, but would like to enjoy\nmore recent features and otherwise avoid bit-rot.\n\nI am mule-headed and stubborn.  If network-wide activation should\nhappen, I will most likely upgrade to segwit at some point, but I intend\nthat point to be at my choosing, not because software defaults did it\nfor me.\n\nI view it as a little bit of a personal challenge and experiment.\n\n> Effectively the only reason I'm aware of to intentionally not run with\n> segwit support beyond just not having upgraded yet, is a desire to try\n> to temporarily have as your tip block a block that was actively\n> stealing the segwit transactions of a third party. Which doesn't seem\n> either personally or publicly desirable; but I fully admit I may be\n> missing some good reason which I am not aware of.\n\nno that thought did not enter my mind.  still not sure I fully grok it\nin fact, but no matter.\n\n\n\n-- \nDan Libby\n\nOpen Source Consulting S.A.\nSanta Ana, Costa Rica\nhttp://osc.co.cr\nphone: 011 506 2204 7018\nFax: 011 506 2223 7359"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2017-07-14T21:11:07",
                "message_text_only": "On Thu, Jul 13, 2017 at 01:04:19AM +0000, Gregory Maxwell via bitcoin-dev wrote:\n> On Wed, Jul 12, 2017 at 6:17 AM, Dan Libby via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Hi!\n> >\n> > Up to now, I have purposefully been running bitcoin releases prior to\n> > 0.13.1 as a way to avoid the (possible) segwit activation, at least\n> > until such time as I personally am comfortable with it.\n> \n> It is not simple to do so correctly, I couldn't tell you off the top\n> of my head; a number of things must be changed it isn't as simple as\n> disabling the activiation because of the segwit P2P changes.  Nor is\n> it a supported configuration. Even if it were now, it wouldn't be one\n> we'd continue to support in the future after segwit is active, as\n> we're likely to drop deployment/compat code.\n \nAnd this attitude is why bitcoin-core is going to get dropped and,\nhopefully, instead of just one code to rule them all, we will have\ngood specifications and multiple competing implementations.\n\n> Can you explain why you wish to do this?  It should have absolutely no\n> adverse impact on you-- if you don't use segwit, you don't use it-- it\n> may be the case that there is some confusion about the implications\n> that I could clear up for you... or suggest alternatives that might\n> achieve your goals.\n\nOne of the significant adverse impacts of Segwit is the following:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L2861\n\nWhen viewed on Github, less than one third of the consensus-critical\ncode is visible on-screen.\n\nThis is a maintenance and readability nightmare, in my opinion. There\nare many good reasons why giving *users* the ability to firewall off\nthat code, maybe even with #ifdefs, as ugly as they are, would provide\nsome much better confidence that one is indeed, not running segwit.\n\nI suspect it would help the community a great deal in comfort level\nif this code were easier to read and used some type of coding standard\nin which the default github view on the average browser shows all the\ncode without having a \"hidden feature\" that requires scrolling that\nhas no obvious UI indication you even need to scroll."
            },
            {
                "author": "Anthony Towns",
                "date": "2017-07-13T01:48:26",
                "message_text_only": "On Tue, Jul 11, 2017 at 11:17:24PM -0700, Dan Libby via bitcoin-dev wrote:\n> At this time, I would like to have some of the more recent features, but\n> without the possibility that my node will activate segwit, until I\n> choose to.\n\nI think that terminology isn't quite precise. I think your options are:\n\n - if you're a miner or run a mining pool, you can *signal* (or not\n   signal) support for segwit activation; you do this by controlling\n   the block version\n\n - if you're running a node, you can choose to *enforce* (or not\n   enforce) the additional consensus rules associated with segwit\n\nI think it's the latter you're talking about. \"Activation\" is different:\nit's the collective action of the bitcoin ecosystem to start enforcing\nthe segwit consensus rules after a sufficient majority of miners are\nsignalling support. That's not something you as an individual can control.\n\nIf you want to disable enforcement of segwit rules, even if a majority of\nmining power signal activation, you can change the code and recompile to\ndo so, for example by changing the nTimeout setting for DEPLOYMENT_SEGWIT\nfrom 1510704000 (Nov 15 2017) to 1493596800 (May 1 2017, already expired).\nThis is probably a bad idea, in that it will cause you to risk accepting\nblocks that nobody else in the network will accept, opening you up\nto higher risk of double spends, and may cause you to be unable to\npeer with segwit enabled nodes after segwit is activated if your node\nis rejecting blocks with witness data because you think segwit is not\nenabled while they think it is enabled. To avoid that you would also need\nto stop setting the NODE_WITNESS p2p bit, which you might be able to do\nby setting the nTimeout above to 0 instead of just a date in the past? I\nbelieve a timeout of 0 gets treated as automatically FAILED. There might\nbe other complexities too though.\n\n> I'm not looking for reasons NOT to do it, only HOW to do it without\n> unwanted side-effects.\n\nThe unwanted side-effects are precisely the reasons not to do it. If you\ndon't understand what they are, you won't be able to avoid them. :)\n\nCheers,\naj"
            },
            {
                "author": "Dan Libby",
                "date": "2017-07-13T16:13:04",
                "message_text_only": "On 07/12/2017 06:48 PM, Anthony Towns via bitcoin-dev wrote:\n\n> I think that terminology isn't quite precise. I think your options are:\n> \n>  - if you're a miner or run a mining pool, you can *signal* (or not\n>    signal) support for segwit activation; you do this by controlling\n>    the block version\n\nI wish to NOT signal for segwit if mining.\n\n>  - if you're running a node, you can choose to *enforce* (or not\n>    enforce) the additional consensus rules associated with segwit\n\nI wish to NOT enforce segwit consensus rules.\n\n> \n> I think it's the latter you're talking about. \"Activation\" is different:\n> it's the collective action of the bitcoin ecosystem to start enforcing\n> the segwit consensus rules after a sufficient majority of miners are\n> signalling support. That's not something you as an individual can control.\n\ngood point, thanks for clarifying.\n\n> If you want to disable enforcement of segwit rules, even if a majority of\n> mining power signal activation, you can change the code and recompile to\n> do so, for example by changing the nTimeout setting for DEPLOYMENT_SEGWIT\n> from 1510704000 (Nov 15 2017) to 1493596800 (May 1 2017, already expired).\n> This is probably a bad idea, in that it will cause you to risk accepting\n> blocks that nobody else in the network will accept, opening you up\n> to higher risk of double spends, and may cause you to be unable to\n> peer with segwit enabled nodes after segwit is activated if your node\n> is rejecting blocks with witness data because you think segwit is not\n> enabled while they think it is enabled. To avoid that you would also need\n> to stop setting the NODE_WITNESS p2p bit, which you might be able to do\n> by setting the nTimeout above to 0 instead of just a date in the past? I\n> believe a timeout of 0 gets treated as automatically FAILED. There might\n> be other complexities too though.\n\nI've set the nTimeout to 0 already.  I will look into the NODE_WITNESS\np2p bit.\n\nI think that logically, if coded correctly, my node would have no more\nrisks than any other legacy (pre-segwit) node on the network...\n\n> \n>> I'm not looking for reasons NOT to do it, only HOW to do it without\n>> unwanted side-effects.\n> \n> The unwanted side-effects are precisely the reasons not to do it. If you\n> don't understand what they are, you won't be able to avoid them. :)\n\nfair enough.  But these are the same risks as running any pre-segwit\nnode, correct?    For example bitcoin-core 0.13.0, or any version of\nbtcd to date...\n\n\n-- \nDan Libby\n\nOpen Source Consulting S.A.\nSanta Ana, Costa Rica\nhttp://osc.co.cr\nphone: 011 506 2204 7018\nFax: 011 506 2223 7359"
            }
        ],
        "thread_summary": {
            "title": "how to disable segwit in my build?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Dan Libby",
                "Federico Tenga",
                "Lucas Clemente Vella",
                "Anthony Towns",
                "Hampus Sj\u00f6berg",
                "Tier Nolan",
                "Gregory Maxwell",
                "Jameson Lopp"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 37531
        }
    },
    {
        "title": "[bitcoin-dev] Updating the Scaling Roadmap [Update]",
        "thread_messages": [
            {
                "author": "Paul Sztorc",
                "date": "2017-07-17T17:13:30",
                "message_text_only": "Hello,\n\nLast week I posted about updating the Core Scalability Roadmap.\n\nI'm not sure what the future of it is, given that it was concept NACK'ed\nby Greg Maxwell the author of the original roadmap, who said that he\nregretted writing the first one.\n\nNonetheless, it was ACKed by everyone else that I heard from, except for\nTom Zander (who objected that it should be a specific project document,\nnot a \"Bitcoin\" document -- I sortof agree and decided to label it a\n\"Core\" document -- whether or not anything happens with that label is up\nto the community).\n\nI therefore decided to:\n1. Put the draft on GitHub [1]\n2. Update it based on all of the week 1 feedback [2]\n3. Add some spaces at the bottom for comments / expressions of interest [2]\n\nHowever, without interest from the maintainers of bitcoincore.org\n(specifically these [3, 4] pages and similar) the document will probably\nbe unable to gain traction.\n\nCheers,\nPaul\n\n[1] https://github.com/psztorc/btc-core-capacity-2/blob/master/draft.txt\n[2]\nhttps://github.com/psztorc/btc-core-capacity-2/commit/2b4f0ecc9015ee398ce0486ca5c3613e3b929c00\n[3] https://bitcoincore.org/en/2015/12/21/capacity-increase/\n[4] https://bitcoincore.org/en/2015/12/23/capacity-increases-faq/\n\n\nOn 7/10/2017 12:50 PM, Paul Sztorc wrote:\n> Summary\n> =========\n>\n> In my opinion, Greg Maxwell's scaling roadmap [1] succeeded in a few\n> crucial ways. One success was that it synchronized the entire Bitcoin\n> community, helping to bring finality to the (endless) conversations of\n> that time, and get everyone back to work. However, I feel that the Dec\n> 7, 2015 roadmap is simply too old to serve this function any longer. We\n> should revise it: remove what has been accomplished, introduce new\n> innovations and approaches, and update deadlines and projections.\n>\n>\n> Why We Should Update the Roadmap\n> =================================\n>\n> In a P2P system like Bitcoin, we lack authoritative info-sources (for\n> example, a \"textbook\" or academic journal), and as a result\n> conversations tend to have a problematic lack of progress. They do not\n> \"accumulate\", as everyone must start over. Ironically, the scaling\n> conversation _itself_ has a fatal O(n^2) scaling problem.\n>\n> The roadmap helped solve these problems by being constant in size, and\n> subjecting itself to publication, endorsement, criticism, and so forth.\n> Despite the (unavoidable) nuance and complexity of each individual\n> opinion, it was at least globally known that X participants endorsed Y\n> set of claims.\n>\n> Unfortunately, the Dec 2015 roadmap is now 19 months old -- it is quite\n> obsolete and replacing it is long overdue. For example, it highlights\n> older items (CSV, compact blocks, versionbits) as being _future_\n> improvements, and makes no mention of new high-likelihood improvements\n> (Schnorr) or mis-emphasizes them (LN). It even contains mistakes (SegWit\n> fraud proofs). To read the old roadmap properly, one must already be a\n> technical expert. For me, this defeats the entire point of having one in\n> the first place.\n>\n> A new roadmap would be worth your attention, even if you didn't sign it,\n> because a refusal to sign would still be informative (and, therefore,\n> helpful)!\n>\n> So, with that in mind, let me present a first draft. Obviously, I am\n> strongly open to edits and feedback, because I have no way of knowing\n> everyone's opinions. I admit that I am partially campaigning for my\n> Drivechain project, and also for this \"scalability\"/\"capacity\"\n> distinction...that's because I believe in both and think they are\n> helpful. But please feel free to suggest edits.\n>\n> I emphasized concrete numbers, and concrete dates.\n>\n> And I did NOT necessarily write it from my own point of view, I tried\n> earnestly to capture a (useful) community view. So, let me know how I did.\n>\n>  ==== Beginning of New (\"July 2017\") Roadmap Draft ====\n>\n> This document updates the previous roadmap [1] of Dec 2015. The older\n> statement endorsed a belief that \"the community is ready to deliver on\n> its shared vision that addresses the needs of the system while upholding\n> its values\".\n>\n> That belief has not changed, but the shared vision has certainly grown\n> sharper over the last 18 months. Below is a list of technologies which\n> either increase Bitcoin's maximum tps rate (\"capacity\"), or which make\n> it easier to process a higher volume of transactions (\"scalability\").\n>\n> First, over the past 18 months, the technical community has completed a\n> number of items [2] on the Dec 2015 roadmap. VersonBits (BIP 9) enables\n> Bitcoin to handle multiple soft fork upgrades at once. Compact Blocks\n> (BIP 152) allows for much faster block propagation, as does the FIBRE\n> Network [3]. Check Sequence Verify (BIP 112) allows trading partners to\n> mutually update an active transaction without writing it to the\n> blockchain (this helps to enable the Lightning Network).\n>\n> Second, Segregated Witness (BIP 141), which reorganizes data in blocks\n> to handle signatures separately, has been completed and awaits\n> activation (multiple BIPS). It is estimated to increase capacity by a\n> factor of 2.2. It also improves scalability in many ways. First, SW\n> includes a fee-policy which encourages users to minimize their impact on\n> the UTXO set. Second, SW achieves linear scaling of sighash operations,\n> which prevents the network from crashing when large transactions are\n> broadcast. Third, SW provides an efficiency gain for everyone who is not\n> verifying signatures, as these no longer need to be downloaded or\n> stored. SegWit is an enabling technology for the Lightning Network,\n> script versioning (specifically Schnorr signatures), and has a number of\n> benefits which\n> are unrelated to capacity [4].\n>\n> Third, the Lightning Network, which allows users to transact without\n> broadcasting to the network, is complete [5, 6] and awaits the\n> activation of SegWit. For those users who are able to make a single\n> on-chain transaction, it is estimated to increase both capacity and\n> scalability by a factor of ~1000 (although these capacity increases will\n> vary with usage patterns). LN also greatly improves transaction speed\n> and transaction privacy.\n>\n> Fourth, Transaction Compression [7], observes that Bitcoin transaction\n> serialization is not optimized for storage or network communication. If\n> transactions were optimally compressed (as is possible today), this\n> would improve scalability, but not capacity, by roughly 20%, and in some\n> cases over 30%.\n>\n> Fifth, Schnorr Signature Aggregation, which shrinks transactions by\n> allowing many transactions to have a single shared signature, has been\n> implemented [8] in draft form in libsecp256k1, and will likely be ready\n> by Q4 of 2016. One analysis [9] suggests that signature aggregation\n> would result in storage and bandwidth savings of at least 25%, which\n> would therefore increase scalability and capacity by a factor of 1.33.\n> The relative savings are even greater for multisignature transactions.\n>\n> Sixth, drivechain [10], which allows bitcoins to be temporarily\n> offloaded to 'alternative' blockchain networks (\"sidechains\"), is\n> currently under peer review and may be usable by end of 2017. Although\n> it has no impact on scalability, it does allow users to opt-in to\n> greater capacity, by moving their BTC to a new network (although, they\n> will achieve less decentralization as a result). Individual drivechains\n> may have different security tradeoffs (for example, a greater reliance\n> on UTXO commitments, or MimbleWimble's shrinking block history) which\n> may give them individually greater scalability than mainchain Bitcoin.\n>\n> Finally, the capacity improvements outlined above may not be sufficient.\n> If so, it may be necessary to use a hard fork to increase the blocksize\n> (and blockweight, sigops, etc) by a moderate amount. Such an increase\n> should take advantage of the existing research on hard forks, which is\n> substantial [11]. Specifically, there is some consensus that Spoonnet\n> [12] is the most attractive option for such a hardfork. There is\n> currently no consensus on a hard fork date, but there is a rough\n> consensus that one would require at least 6 months to coordinate\n> effectively, which would place it in the year 2018 at earliest.\n>\n> The above are only a small sample of current scaling technologies. And\n> even an exhaustive list of scaling technologies, would itself only be a\n> small sample of total Bitcoin innovation (which is proceeding at\n> breakneck speed).\n>\n> Signed,\n> <Names Here>\n>\n> [1]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011865.html\n> [2] https://bitcoincore.org/en/2017/03/13/performance-optimizations-1/\n> [3] http://bluematt.bitcoin.ninja/2016/07/07/relay-networks/\n> [4] https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n> [5]\n> http://lightning.community/release/software/lnd/lightning/2017/05/03/litening/\n> [6] https://github.com/ACINQ/eclair\n> [7] https://people.xiph.org/~greg/compacted_txn.txt\n> [8]\n> https://github.com/ElementsProject/secp256k1-zkp/blob/d78f12b04ec3d9f5744cd4c51f20951106b9c41a/src/secp256k1.c#L592-L594\n> [9] https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/\n> [10] http://www.drivechain.info/\n> [11] https://bitcoinhardforkresearch.github.io/\n> [12]\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013542.html\n>\n>  ==== End of Roadmap Draft ====\n>\n> In short, please let me know:\n>\n> 1. If you agree that it would be helpful if the roadmap were updated.\n> 2. To what extent, if any, you like this draft.\n> 3. Edits you would make (specifically, I wonder about Drivechain\n> thoughts and Hard Fork thoughts, particularly how to phrase the Hard\n> Fork date).\n>\n> Google Doc (if you're into that kind of thing):\n> https://docs.google.com/document/d/1gxcUnmYl7yM0oKR9NY9zCPbBbPNocmCq-jjBOQSVH-A/edit?usp=sharing\n>\n> Cheers,\n> Paul\n>"
            },
            {
                "author": "Alex Morcos",
                "date": "2017-07-17T18:49:22",
                "message_text_only": "\"it was ACKed by everyone else that I heard from\"  - I don't think you\nshould read into that much.\n\nI felt like this whole conversation was putting the cart before the horse.\nYou might very well have some good ideas in your roadmap update, to tell\nyou the truth, I didn't even read it.\nBut I don't think we should be taking relatively new/untested ideas such as\nDrivechain and sticking them on a roadmap.  There is a tendency in this\ncommunity to hear about the latest and greatest idea and immediately fixate\non it as our salvation. I'm very happy that you are doing this work and\nthat others are researching a wide variety of ideas.  But please, lets be\nconservative and flexible with how we evolve Bitcoin.  We don't even know\nif or when we'll get segwit yet.\n\n\nOn Mon, Jul 17, 2017 at 1:13 PM, Paul Sztorc via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello,\n>\n> Last week I posted about updating the Core Scalability Roadmap.\n>\n> I'm not sure what the future of it is, given that it was concept NACK'ed\n> by Greg Maxwell the author of the original roadmap, who said that he\n> regretted writing the first one.\n>\n> Nonetheless, it was ACKed by everyone else that I heard from, except for\n> Tom Zander (who objected that it should be a specific project document,\n> not a \"Bitcoin\" document -- I sortof agree and decided to label it a\n> \"Core\" document -- whether or not anything happens with that label is up\n> to the community).\n>\n> I therefore decided to:\n> 1. Put the draft on GitHub [1]\n> 2. Update it based on all of the week 1 feedback [2]\n> 3. Add some spaces at the bottom for comments / expressions of interest [2]\n>\n> However, without interest from the maintainers of bitcoincore.org\n> (specifically these [3, 4] pages and similar) the document will probably\n> be unable to gain traction.\n>\n> Cheers,\n> Paul\n>\n> [1] https://github.com/psztorc/btc-core-capacity-2/blob/master/draft.txt\n> [2]\n> https://github.com/psztorc/btc-core-capacity-2/commit/\n> 2b4f0ecc9015ee398ce0486ca5c3613e3b929c00\n> [3] https://bitcoincore.org/en/2015/12/21/capacity-increase/\n> [4] https://bitcoincore.org/en/2015/12/23/capacity-increases-faq/\n>\n>\n> On 7/10/2017 12:50 PM, Paul Sztorc wrote:\n> > Summary\n> > =========\n> >\n> > In my opinion, Greg Maxwell's scaling roadmap [1] succeeded in a few\n> > crucial ways. One success was that it synchronized the entire Bitcoin\n> > community, helping to bring finality to the (endless) conversations of\n> > that time, and get everyone back to work. However, I feel that the Dec\n> > 7, 2015 roadmap is simply too old to serve this function any longer. We\n> > should revise it: remove what has been accomplished, introduce new\n> > innovations and approaches, and update deadlines and projections.\n> >\n> >\n> > Why We Should Update the Roadmap\n> > =================================\n> >\n> > In a P2P system like Bitcoin, we lack authoritative info-sources (for\n> > example, a \"textbook\" or academic journal), and as a result\n> > conversations tend to have a problematic lack of progress. They do not\n> > \"accumulate\", as everyone must start over. Ironically, the scaling\n> > conversation _itself_ has a fatal O(n^2) scaling problem.\n> >\n> > The roadmap helped solve these problems by being constant in size, and\n> > subjecting itself to publication, endorsement, criticism, and so forth.\n> > Despite the (unavoidable) nuance and complexity of each individual\n> > opinion, it was at least globally known that X participants endorsed Y\n> > set of claims.\n> >\n> > Unfortunately, the Dec 2015 roadmap is now 19 months old -- it is quite\n> > obsolete and replacing it is long overdue. For example, it highlights\n> > older items (CSV, compact blocks, versionbits) as being _future_\n> > improvements, and makes no mention of new high-likelihood improvements\n> > (Schnorr) or mis-emphasizes them (LN). It even contains mistakes (SegWit\n> > fraud proofs). To read the old roadmap properly, one must already be a\n> > technical expert. For me, this defeats the entire point of having one in\n> > the first place.\n> >\n> > A new roadmap would be worth your attention, even if you didn't sign it,\n> > because a refusal to sign would still be informative (and, therefore,\n> > helpful)!\n> >\n> > So, with that in mind, let me present a first draft. Obviously, I am\n> > strongly open to edits and feedback, because I have no way of knowing\n> > everyone's opinions. I admit that I am partially campaigning for my\n> > Drivechain project, and also for this \"scalability\"/\"capacity\"\n> > distinction...that's because I believe in both and think they are\n> > helpful. But please feel free to suggest edits.\n> >\n> > I emphasized concrete numbers, and concrete dates.\n> >\n> > And I did NOT necessarily write it from my own point of view, I tried\n> > earnestly to capture a (useful) community view. So, let me know how I\n> did.\n> >\n> >  ==== Beginning of New (\"July 2017\") Roadmap Draft ====\n> >\n> > This document updates the previous roadmap [1] of Dec 2015. The older\n> > statement endorsed a belief that \"the community is ready to deliver on\n> > its shared vision that addresses the needs of the system while upholding\n> > its values\".\n> >\n> > That belief has not changed, but the shared vision has certainly grown\n> > sharper over the last 18 months. Below is a list of technologies which\n> > either increase Bitcoin's maximum tps rate (\"capacity\"), or which make\n> > it easier to process a higher volume of transactions (\"scalability\").\n> >\n> > First, over the past 18 months, the technical community has completed a\n> > number of items [2] on the Dec 2015 roadmap. VersonBits (BIP 9) enables\n> > Bitcoin to handle multiple soft fork upgrades at once. Compact Blocks\n> > (BIP 152) allows for much faster block propagation, as does the FIBRE\n> > Network [3]. Check Sequence Verify (BIP 112) allows trading partners to\n> > mutually update an active transaction without writing it to the\n> > blockchain (this helps to enable the Lightning Network).\n> >\n> > Second, Segregated Witness (BIP 141), which reorganizes data in blocks\n> > to handle signatures separately, has been completed and awaits\n> > activation (multiple BIPS). It is estimated to increase capacity by a\n> > factor of 2.2. It also improves scalability in many ways. First, SW\n> > includes a fee-policy which encourages users to minimize their impact on\n> > the UTXO set. Second, SW achieves linear scaling of sighash operations,\n> > which prevents the network from crashing when large transactions are\n> > broadcast. Third, SW provides an efficiency gain for everyone who is not\n> > verifying signatures, as these no longer need to be downloaded or\n> > stored. SegWit is an enabling technology for the Lightning Network,\n> > script versioning (specifically Schnorr signatures), and has a number of\n> > benefits which\n> > are unrelated to capacity [4].\n> >\n> > Third, the Lightning Network, which allows users to transact without\n> > broadcasting to the network, is complete [5, 6] and awaits the\n> > activation of SegWit. For those users who are able to make a single\n> > on-chain transaction, it is estimated to increase both capacity and\n> > scalability by a factor of ~1000 (although these capacity increases will\n> > vary with usage patterns). LN also greatly improves transaction speed\n> > and transaction privacy.\n> >\n> > Fourth, Transaction Compression [7], observes that Bitcoin transaction\n> > serialization is not optimized for storage or network communication. If\n> > transactions were optimally compressed (as is possible today), this\n> > would improve scalability, but not capacity, by roughly 20%, and in some\n> > cases over 30%.\n> >\n> > Fifth, Schnorr Signature Aggregation, which shrinks transactions by\n> > allowing many transactions to have a single shared signature, has been\n> > implemented [8] in draft form in libsecp256k1, and will likely be ready\n> > by Q4 of 2016. One analysis [9] suggests that signature aggregation\n> > would result in storage and bandwidth savings of at least 25%, which\n> > would therefore increase scalability and capacity by a factor of 1.33.\n> > The relative savings are even greater for multisignature transactions.\n> >\n> > Sixth, drivechain [10], which allows bitcoins to be temporarily\n> > offloaded to 'alternative' blockchain networks (\"sidechains\"), is\n> > currently under peer review and may be usable by end of 2017. Although\n> > it has no impact on scalability, it does allow users to opt-in to\n> > greater capacity, by moving their BTC to a new network (although, they\n> > will achieve less decentralization as a result). Individual drivechains\n> > may have different security tradeoffs (for example, a greater reliance\n> > on UTXO commitments, or MimbleWimble's shrinking block history) which\n> > may give them individually greater scalability than mainchain Bitcoin.\n> >\n> > Finally, the capacity improvements outlined above may not be sufficient.\n> > If so, it may be necessary to use a hard fork to increase the blocksize\n> > (and blockweight, sigops, etc) by a moderate amount. Such an increase\n> > should take advantage of the existing research on hard forks, which is\n> > substantial [11]. Specifically, there is some consensus that Spoonnet\n> > [12] is the most attractive option for such a hardfork. There is\n> > currently no consensus on a hard fork date, but there is a rough\n> > consensus that one would require at least 6 months to coordinate\n> > effectively, which would place it in the year 2018 at earliest.\n> >\n> > The above are only a small sample of current scaling technologies. And\n> > even an exhaustive list of scaling technologies, would itself only be a\n> > small sample of total Bitcoin innovation (which is proceeding at\n> > breakneck speed).\n> >\n> > Signed,\n> > <Names Here>\n> >\n> > [1]\n> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n> 2015-December/011865.html\n> > [2] https://bitcoincore.org/en/2017/03/13/performance-optimizations-1/\n> > [3] http://bluematt.bitcoin.ninja/2016/07/07/relay-networks/\n> > [4] https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n> > [5]\n> > http://lightning.community/release/software/lnd/\n> lightning/2017/05/03/litening/\n> > [6] https://github.com/ACINQ/eclair\n> > [7] https://people.xiph.org/~greg/compacted_txn.txt\n> > [8]\n> > https://github.com/ElementsProject/secp256k1-zkp/blob/\n> d78f12b04ec3d9f5744cd4c51f20951106b9c41a/src/secp256k1.c#L592-L594\n> > [9] https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/\n> > [10] http://www.drivechain.info/\n> > [11] https://bitcoinhardforkresearch.github.io/\n> > [12]\n> > https://lists.linuxfoundation.org/pipermail/bitcoin-dev/\n> 2017-February/013542.html\n> >\n> >  ==== End of Roadmap Draft ====\n> >\n> > In short, please let me know:\n> >\n> > 1. If you agree that it would be helpful if the roadmap were updated.\n> > 2. To what extent, if any, you like this draft.\n> > 3. Edits you would make (specifically, I wonder about Drivechain\n> > thoughts and Hard Fork thoughts, particularly how to phrase the Hard\n> > Fork date).\n> >\n> > Google Doc (if you're into that kind of thing):\n> > https://docs.google.com/document/d/1gxcUnmYl7yM0oKR9NY9zCPbBbPNoc\n> mCq-jjBOQSVH-A/edit?usp=sharing\n> >\n> > Cheers,\n> > Paul\n> >\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170717/dc2b31ff/attachment-0001.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-17T20:13:38",
                "message_text_only": "On 7/17/2017 2:49 PM, Alex Morcos wrote:\n> I felt like this whole conversation was putting the cart before the\n> horse.\n> You might very well have some good ideas in your roadmap update, to\n> tell you the truth, I didn't even read it.\n\nFine, but, before the roadmap itself, I wrote exactly about why I\nthought we should update it. Evidently you disagree with the horse, but\nit is in front of the cart where it belongs.\n\n\n> But I don't think we should be taking relatively new/untested ideas\n> such as Drivechain and sticking them on a roadmap.\n\nIt isn't a \"roadmap\" anymore -- I changed it to a \"forecast\".\n\nAnd I edited the drivechain part to emphasize only that mainchain space\nwould likely be freed as defectors leave for an alt-chain. The departing\nindividuals (ir hardcore LargeBlockers) will leave, despite a\nsecurity-model NACK from anyone here (in fact, it would probably only\nencourage them). That leaves more space for those who remain.\n\n\n> There is a tendency in this community to hear about the latest and\n> greatest idea and immediately fixate on it as our salvation. ... But\n> please, lets be conservative and flexible with how we evolve Bitcoin. \n> We don't even know if or when we'll get segwit yet.\n\nDrivechain  (c. bitcointalk Feb 2014, blog Nov 2015) is actually much\nolder than \"the\" SegWit to which you refer.  As for being \"conservative\"\nand \"flexible\", I have tried to do everything I know -- Scaling\nconferences, in-person discussions, papers, posts, and presentations,\nadding BMM, and posting here for additional peer review. I'm sure you\nhave lots of ideas about how it could be more conservative and/or\nflexible, which I would love to hear.\n\nBut again I think people are getting hung up on the drivechain part --\nit can be easily taken out, I just thought that, if the plan included\nmore overall flexibility for industry, then it would help deter network\nsplits and scaling drama.\n\nPaul\n\n\n\n> On Mon, Jul 17, 2017 at 1:13 PM, Paul Sztorc via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Hello,\n>\n>     Last week I posted about updating the Core Scalability Roadmap.\n>\n>     I'm not sure what the future of it is, given that it was concept\n>     NACK'ed\n>     by Greg Maxwell the author of the original roadmap, who said that he\n>     regretted writing the first one.\n>\n>     Nonetheless, it was ACKed by everyone else that I heard from,\n>     except for\n>     Tom Zander (who objected that it should be a specific project\n>     document,\n>     not a \"Bitcoin\" document -- I sortof agree and decided to label it a\n>     \"Core\" document -- whether or not anything happens with that label\n>     is up\n>     to the community).\n>\n>     I therefore decided to:\n>     1. Put the draft on GitHub [1]\n>     2. Update it based on all of the week 1 feedback [2]\n>     3. Add some spaces at the bottom for comments / expressions of\n>     interest [2]\n>\n>     However, without interest from the maintainers of bitcoincore.org\n>     <http://bitcoincore.org>\n>     (specifically these [3, 4] pages and similar) the document will\n>     probably\n>     be unable to gain traction.\n>\n>     Cheers,\n>     Paul\n>\n>     [1]\n>     https://github.com/psztorc/btc-core-capacity-2/blob/master/draft.txt\n>     <https://github.com/psztorc/btc-core-capacity-2/blob/master/draft.txt>\n>     [2]\n>     https://github.com/psztorc/btc-core-capacity-2/commit/2b4f0ecc9015ee398ce0486ca5c3613e3b929c00\n>     <https://github.com/psztorc/btc-core-capacity-2/commit/2b4f0ecc9015ee398ce0486ca5c3613e3b929c00>\n>     [3] https://bitcoincore.org/en/2015/12/21/capacity-increase/\n>     <https://bitcoincore.org/en/2015/12/21/capacity-increase/>\n>     [4] https://bitcoincore.org/en/2015/12/23/capacity-increases-faq/\n>     <https://bitcoincore.org/en/2015/12/23/capacity-increases-faq/>\n>\n>\n>     On 7/10/2017 12:50 PM, Paul Sztorc wrote:\n>     > Summary\n>     > =========\n>     >\n>     > In my opinion, Greg Maxwell's scaling roadmap [1] succeeded in a few\n>     > crucial ways. One success was that it synchronized the entire\n>     Bitcoin\n>     > community, helping to bring finality to the (endless)\n>     conversations of\n>     > that time, and get everyone back to work. However, I feel that\n>     the Dec\n>     > 7, 2015 roadmap is simply too old to serve this function any\n>     longer. We\n>     > should revise it: remove what has been accomplished, introduce new\n>     > innovations and approaches, and update deadlines and projections.\n>     >\n>     >\n>     > Why We Should Update the Roadmap\n>     > =================================\n>     >\n>     > In a P2P system like Bitcoin, we lack authoritative info-sources\n>     (for\n>     > example, a \"textbook\" or academic journal), and as a result\n>     > conversations tend to have a problematic lack of progress. They\n>     do not\n>     > \"accumulate\", as everyone must start over. Ironically, the scaling\n>     > conversation _itself_ has a fatal O(n^2) scaling problem.\n>     >\n>     > The roadmap helped solve these problems by being constant in\n>     size, and\n>     > subjecting itself to publication, endorsement, criticism, and so\n>     forth.\n>     > Despite the (unavoidable) nuance and complexity of each individual\n>     > opinion, it was at least globally known that X participants\n>     endorsed Y\n>     > set of claims.\n>     >\n>     > Unfortunately, the Dec 2015 roadmap is now 19 months old -- it\n>     is quite\n>     > obsolete and replacing it is long overdue. For example, it\n>     highlights\n>     > older items (CSV, compact blocks, versionbits) as being _future_\n>     > improvements, and makes no mention of new high-likelihood\n>     improvements\n>     > (Schnorr) or mis-emphasizes them (LN). It even contains mistakes\n>     (SegWit\n>     > fraud proofs). To read the old roadmap properly, one must\n>     already be a\n>     > technical expert. For me, this defeats the entire point of\n>     having one in\n>     > the first place.\n>     >\n>     > A new roadmap would be worth your attention, even if you didn't\n>     sign it,\n>     > because a refusal to sign would still be informative (and,\n>     therefore,\n>     > helpful)!\n>     >\n>     > So, with that in mind, let me present a first draft. Obviously, I am\n>     > strongly open to edits and feedback, because I have no way of\n>     knowing\n>     > everyone's opinions. I admit that I am partially campaigning for my\n>     > Drivechain project, and also for this \"scalability\"/\"capacity\"\n>     > distinction...that's because I believe in both and think they are\n>     > helpful. But please feel free to suggest edits.\n>     >\n>     > I emphasized concrete numbers, and concrete dates.\n>     >\n>     > And I did NOT necessarily write it from my own point of view, I\n>     tried\n>     > earnestly to capture a (useful) community view. So, let me know\n>     how I did.\n>     >\n>     >  ==== Beginning of New (\"July 2017\") Roadmap Draft ====\n>     >\n>     > This document updates the previous roadmap [1] of Dec 2015. The\n>     older\n>     > statement endorsed a belief that \"the community is ready to\n>     deliver on\n>     > its shared vision that addresses the needs of the system while\n>     upholding\n>     > its values\".\n>     >\n>     > That belief has not changed, but the shared vision has certainly\n>     grown\n>     > sharper over the last 18 months. Below is a list of technologies\n>     which\n>     > either increase Bitcoin's maximum tps rate (\"capacity\"), or\n>     which make\n>     > it easier to process a higher volume of transactions\n>     (\"scalability\").\n>     >\n>     > First, over the past 18 months, the technical community has\n>     completed a\n>     > number of items [2] on the Dec 2015 roadmap. VersonBits (BIP 9)\n>     enables\n>     > Bitcoin to handle multiple soft fork upgrades at once. Compact\n>     Blocks\n>     > (BIP 152) allows for much faster block propagation, as does the\n>     FIBRE\n>     > Network [3]. Check Sequence Verify (BIP 112) allows trading\n>     partners to\n\n>     > mutually update an active transaction without writing it to the\n>     > blockchain (this helps to enable the Lightning Network).\n>     >\n>     > Second, Segregated Witness (BIP 141), which reorganizes data in\n>     blocks\n>     > to handle signatures separately, has been completed and awaits\n>     > activation (multiple BIPS). It is estimated to increase capacity\n>     by a\n>     > factor of 2.2. It also improves scalability in many ways. First, SW\n>     > includes a fee-policy which encourages users to minimize their\n>     impact on\n>     > the UTXO set. Second, SW achieves linear scaling of sighash\n>     operations,\n>     > which prevents the network from crashing when large transactions are\n>     > broadcast. Third, SW provides an efficiency gain for everyone\n>     who is not\n>     > verifying signatures, as these no longer need to be downloaded or\n>     > stored. SegWit is an enabling technology for the Lightning Network,\n>     > script versioning (specifically Schnorr signatures), and has a\n>     number of\n>     > benefits which\n>     > are unrelated to capacity [4].\n>     >\n>     > Third, the Lightning Network, which allows users to transact without\n>     > broadcasting to the network, is complete [5, 6] and awaits the\n>     > activation of SegWit. For those users who are able to make a single\n>     > on-chain transaction, it is estimated to increase both capacity and\n>     > scalability by a factor of ~1000 (although these capacity\n>     increases will\n>     > vary with usage patterns). LN also greatly improves transaction\n>     speed\n>     > and transaction privacy.\n>     >\n>     > Fourth, Transaction Compression [7], observes that Bitcoin\n>     transaction\n>     > serialization is not optimized for storage or network\n>     communication. If\n>     > transactions were optimally compressed (as is possible today), this\n>     > would improve scalability, but not capacity, by roughly 20%, and\n>     in some\n>     > cases over 30%.\n>     >\n>     > Fifth, Schnorr Signature Aggregation, which shrinks transactions by\n>     > allowing many transactions to have a single shared signature,\n>     has been\n>     > implemented [8] in draft form in libsecp256k1, and will likely\n>     be ready\n>     > by Q4 of 2016. One analysis [9] suggests that signature aggregation\n>     > would result in storage and bandwidth savings of at least 25%, which\n>     > would therefore increase scalability and capacity by a factor of\n>     1.33.\n>     > The relative savings are even greater for multisignature\n>     transactions.\n>     >\n>     > Sixth, drivechain [10], which allows bitcoins to be temporarily\n>     > offloaded to 'alternative' blockchain networks (\"sidechains\"), is\n>     > currently under peer review and may be usable by end of 2017.\n>     Although\n>     > it has no impact on scalability, it does allow users to opt-in to\n>     > greater capacity, by moving their BTC to a new network\n>     (although, they\n>     > will achieve less decentralization as a result). Individual\n>     drivechains\n>     > may have different security tradeoffs (for example, a greater\n>     reliance\n>     > on UTXO commitments, or MimbleWimble's shrinking block history)\n>     which\n>     > may give them individually greater scalability than mainchain\n>     Bitcoin.\n>     >\n>     > Finally, the capacity improvements outlined above may not be\n>     sufficient.\n>     > If so, it may be necessary to use a hard fork to increase the\n>     blocksize\n>     > (and blockweight, sigops, etc) by a moderate amount. Such an\n>     increase\n>     > should take advantage of the existing research on hard forks,\n>     which is\n>     > substantial [11]. Specifically, there is some consensus that\n>     Spoonnet\n>     > [12] is the most attractive option for such a hardfork. There is\n>     > currently no consensus on a hard fork date, but there is a rough\n>     > consensus that one would require at least 6 months to coordinate\n>     > effectively, which would place it in the year 2018 at earliest.\n>     >\n>     > The above are only a small sample of current scaling\n>     technologies. And\n>     > even an exhaustive list of scaling technologies, would itself\n>     only be a\n>     > small sample of total Bitcoin innovation (which is proceeding at\n>     > breakneck speed).\n>     >\n>     > Signed,\n>     > <Names Here>\n>     >\n>     > [1]\n>     >\n>     https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011865.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-December/011865.html>\n>     > [2]\n>     https://bitcoincore.org/en/2017/03/13/performance-optimizations-1/\n>     <https://bitcoincore.org/en/2017/03/13/performance-optimizations-1/>\n>     > [3] http://bluematt.bitcoin.ninja/2016/07/07/relay-networks/\n>     <http://bluematt.bitcoin.ninja/2016/07/07/relay-networks/>\n>     > [4] https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n>     <https://bitcoincore.org/en/2016/01/26/segwit-benefits/>\n>     > [5]\n>     >\n>     http://lightning.community/release/software/lnd/lightning/2017/05/03/litening/\n>     <http://lightning.community/release/software/lnd/lightning/2017/05/03/litening/>\n>     > [6] https://github.com/ACINQ/eclair\n>     <https://github.com/ACINQ/eclair>\n>     > [7] https://people.xiph.org/~greg/compacted_txn.txt\n>     <https://people.xiph.org/%7Egreg/compacted_txn.txt>\n>     > [8]\n>     >\n>     https://github.com/ElementsProject/secp256k1-zkp/blob/d78f12b04ec3d9f5744cd4c51f20951106b9c41a/src/secp256k1.c#L592-L594\n>     <https://github.com/ElementsProject/secp256k1-zkp/blob/d78f12b04ec3d9f5744cd4c51f20951106b9c41a/src/secp256k1.c#L592-L594>\n>     > [9]\n>     https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/\n>     <https://bitcoincore.org/en/2017/03/23/schnorr-signature-aggregation/>\n>     > [10] http://www.drivechain.info/\n>     > [11] https://bitcoinhardforkresearch.github.io/\n>     <https://bitcoinhardforkresearch.github.io/>\n>     > [12]\n>     >\n>     https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013542.html\n>     <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-February/013542.html>\n>     >\n>     >  ==== End of Roadmap Draft ====\n>     >\n>     > In short, please let me know:\n>     >\n>     > 1. If you agree that it would be helpful if the roadmap were\n>     updated.\n>     > 2. To what extent, if any, you like this draft.\n>     > 3. Edits you would make (specifically, I wonder about Drivechain\n>     > thoughts and Hard Fork thoughts, particularly how to phrase the Hard\n>     > Fork date).\n>     >\n>     > Google Doc (if you're into that kind of thing):\n>     >\n>     https://docs.google.com/document/d/1gxcUnmYl7yM0oKR9NY9zCPbBbPNocmCq-jjBOQSVH-A/edit?usp=sharing\n>     <https://docs.google.com/document/d/1gxcUnmYl7yM0oKR9NY9zCPbBbPNocmCq-jjBOQSVH-A/edit?usp=sharing>\n>     >\n>     > Cheers,\n>     > Paul\n>     >\n>\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170717/5c86ddb8/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2017-07-17T21:50:38",
                "message_text_only": "On Mon, Jul 17, 2017 at 02:49:22PM -0400, Alex Morcos via bitcoin-dev wrote:\n> \"it was ACKed by everyone else that I heard from\"  - I don't think you\n> should read into that much.\n> \n> I felt like this whole conversation was putting the cart before the horse.\n> You might very well have some good ideas in your roadmap update, to tell\n> you the truth, I didn't even read it.\n> But I don't think we should be taking relatively new/untested ideas such as\n> Drivechain and sticking them on a roadmap.  There is a tendency in this\n> community to hear about the latest and greatest idea and immediately fixate\n> on it as our salvation. I'm very happy that you are doing this work and\n> that others are researching a wide variety of ideas.  But please, lets be\n> conservative and flexible with how we evolve Bitcoin.  We don't even know\n> if or when we'll get segwit yet.\n\nAgreed!\n\nA closely related example is my own Treechains work, which got a bunch of\nexcitement when I first published the idea. But would I have wanted it on a\nroadmap? Hell no: sure enough, as it got more peer review others (and myself!)\nfound that it was going to be a harder than it initially looked to actually get\ninto production.\n\nDrivechains is definitely in that situation right now.\n\nAlso don't forget that proper security peer review takes a *lot* of work. I\nmyself have a todo list item to respond to Paul's post on Drivechains, but I\nneed to spend a few days to do that and just haven't had the time (not to\nmention that no-one is paying me to do general Bitcoin dev work right now).\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170717/86179a31/attachment.sig>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-17T22:04:49",
                "message_text_only": "On 7/17/2017 5:47 PM, David A. Harding wrote:\n> On Mon, Jul 17, 2017 at 01:13:30PM -0400, Paul Sztorc via bitcoin-dev wrote:\n>> However, without interest from the maintainers of bitcoincore.org\n>> (specifically these [3, 4] pages and similar) the document will probably\n>> be unable to gain traction.\n>> [...]\n>> [3] https://bitcoincore.org/en/2015/12/21/capacity-increase/\n>> [4] https://bitcoincore.org/en/2015/12/23/capacity-increases-faq/\n> The BitcoinCore.org maintainers are not psychic.  If you want your\n> document to appear on the website, please open a PR.  If you would like\n> help formatting your document for the website, please feel free to send\n> me an email off list or open an issue[1] regarding the inadequacy of\n> the site's readme.\nI meant only to convey that the document would appear on bitcoincore.org\niff the PR were ultimately accepted. In other words, while it is up to\n\"the community of Core Contributors\" in a philosophical sense, it is up\nto the maintainers of BitcoinCore.org in a practical sense, because they\nare the ones who ultimately decide if the standard has been met.\n\nI think it is perfectly reasonable to keep site-updates narrowly\norganized in the GitHub PR sphere (and to ignore everything else).\n\n> [1] https://github.com/bitcoin-core/bitcoincore.org/issues/new\n>\n> Speaking as the instigator of [3] and the primary author of [4] (both\n> originally published on Bitcoin.org), I'll point out that Maxwell's\n> reply to you was a slightly rewritten version of a reply to me sent on 4\n> November 2016 (as noted elsewhere in the thread and confirmed in my\n> mailbox).  I include below my signature a complete copy of my reply to\n> him (and CC'd to others).\n>\n> If I had followed through on my earlier plan to post a copy of Maxwell's\n> reply on BitcoinCore.org (assuming Bitcoin Core contributors supported\n> publishing it), you probably would've known that some Bitcoin Core\n> contributors were resistant to roadmaps prior to you writing your\n> proposed roadmap.  For that failure, and the time you may have wasted\n> because of it, I offer you my apologies.\nI appreciate you saying that. Thank you.\n\n-Paul\n\n\n> I will make opening a PR to BitcoinCore.org with his statement a priority \n> so that hopefully future confusion can be avoided.\n>\n> Sincerely,\n>\n> -Dave\n>\n> On Fri, Nov 04, 2016 at 07:17:11PM +0000, Gregory Maxwell wrote:\n>> [...]\n> I just wanted to say that I thought this was an amazing reply.  I was\n> hoping that if I waited long enough to respond I might find something\n> meaningful to add, but nothing has come to mind and I didn't want to\n> leave the impression that your reply didn't merit a response.\n>\n> Maybe we can find a place on the website to post something like this so\n> that we can link to it when other people ask for roadmaps and other\n> commitments to future plans.\n>\n> Thanks!,\n>\n> -Dave"
            }
        ],
        "thread_summary": {
            "title": "Updating the Scaling Roadmap ",
            "categories": [
                "bitcoin-dev",
                "Update"
            ],
            "authors": [
                "Alex Morcos",
                "Paul Sztorc",
                "Peter Todd"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 41647
        }
    },
    {
        "title": "[bitcoin-dev] Drivechain RfD -- Follow Up",
        "thread_messages": [
            {
                "author": "Tao Effect",
                "date": "2017-07-12T22:43:31",
                "message_text_only": "Paul,\n\nI'm assuming it's OK with you that I pick up from where we left off in the \"Scaling Roadmap\" thread [1], so as to be on-topic per your request. (For others reading, part of my reply to the previous email in this thread is here [2]).\n\nFor reference, I said:\n\n> Isn't it different in the case of P2SH and SegWit, don't full nodes validate the script?\n> \n> In other words, miners don't have complete control over the coins, full nodes keep a check on them.\n> \n> At least that was my understanding, and if that's not the case then it doesn't make sense to me why Pieter would earlier in this thread object to Drivechain on the grounds that it's a different security model.\n\n\nCryptAxe's response was in part:\n> You guys are both right that it is a different security model, with the important distinction that it is opt-in. What I disagree with about what you said is only that we are encouraging more risky behavior by adding consensus rules via softfork. There are additional risks with drivechains, but not because of how the new consensus rules would be added (it would be the same risk as the P2SH softfork).\n\n\nI am now looking closer again at step number 4 in the Drivechain specification [2]:\n\n4. Everyone waits for a period of, say, 3 days. This gives everyone an opportunity to make sure the same WT^ is in both the Bitcoin coinbase and the Sidechain header. If they\u2019re different, everyone has plenty of time to contact each other, figure out what is going on, and restart the process until its right.\n\n\nIt seems to me that where our disagreement lies is in this point.\n\nThe Drivechain spec seems to claim that its use of anyone-can-pay is the same as P2SH (and in later emails you reference SegWit as well). Is this really true?\n\nThe following suggests to me it isn't:\n\n1. Pieter Wuille's email suggests he disagrees [4]\n\n2. Per the question in [1], it's my understanding that P2SH transactions contain all of the information within themselves for full nodes to act as a check on miners mishandling the anyone-can-spend nature of P2SH transactions. However, that does not seem to be the case with WT^ transactions.\n\n\nIn P2SH txns, there is no need for anyone to, as the Drivechain spec says, \"to contact each other, figure out what is going on\". Everything just automatically works.\n\n\nIf the security of WT^ transactions could be brought up to actually be in line with the security of P2SH and SegWit transactions, then I would have far less to object to.\n\nKind regards,\nGreg Slepak\n\n\n[1] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014763.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014763.html>\n[2] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014745.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014745.html>\n[3] http://www.truthcoin.info/blog/drivechain/ <http://www.truthcoin.info/blog/drivechain/>\n[4] https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014721.html <https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-July/014721.html>\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jun 19, 2017, at 9:04 AM, Paul Sztorc <truthcoin at gmail.com <mailto:truthcoin at gmail.com>> wrote:\n> \n> Hi Greg,\n> \n> Responses below:\n> \n> On 6/18/2017 5:30 PM, Tao Effect wrote:\n>> In Drivechain, 51% of miners have total control and ownership over all\n>> of the sidechain coins.\n> \n> It would not be accurate to say that miners have \"total\" control. Miners\n> do control the destination of withdrawals, but they do not control the\n> withdrawal-duration nor the withdrawal-frequency.\n> \n\n[ ...snip.. ]\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/d949a60c/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/d949a60c/attachment.sig>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-13T00:26:56",
                "message_text_only": "The confusion below stems from his conflation of several different ideas.\n\nI will try to explicitly clarify a distinction between several types of\nuser (or, \"modes\" of use if you prefer):\n\n[DC#0] -- Someone who does not upgrade their Bitcoin software (and is\nrunning, say, 0.13). However, they experience the effects of the new\nrules which miners add (as per the soft fork[s] to add drivechain\nfunctionality and individual drivechains).\n[DC#1] -- Someone who always upgrades to the latest version of the\nBitcoin software, but otherwise has no interest in running/using sidechains.\n[DC#2] -- Someone who upgrades to the latest Bitcoin version, and\ndecides to also become a full node of one or more sidechains, but who\never actually uses the sidechains.\n[DC#3] -- Someone who upgrades their software, runs sidechain full\nnodes, and actively moves money to and from these.\n\n\nOn 7/12/2017 6:43 PM, Tao Effect wrote:\n>\n> I am now looking closer again at step number 4 in the Drivechain\n> specification [2]:\n>\n>     4. Everyone waits for a period of, say, 3 days. This gives\n>     everyone an opportunity to make sure the same WT^ is in both the\n>     Bitcoin coinbase and the Sidechain header. If they\u2019re different,\n>     everyone has plenty of time to contact each other, figure out what\n>     is going on, and restart the process until its right.\n>\n> It seems to me that where our disagreement lies is in this point.\n> The Drivechain spec seems to claim that its use of anyone-can-pay is\n> the same as P2SH (and in later emails you reference SegWit as well).\n> Is this really true?\nFYI that document is nearly two years old, and although it is still\noverwhelmingly accurate, new optimizations allow us (I think) to push\nthe waiting period to several weeks and the total ACK counting period up\nto several months.\n\n[DC#0] Yes\n[DC#1] Yes\n[DC#2] Yes\n[DC#3] Yes\n\nBecause if a node doesn't have the sidechain's information, it will just\nassume every withdrawal is valid. This is comparable to someone who\nstill hasn't upgraded to support P2SH, in cases [DC#0] and [#1].\n\n(And this is the main advantage of DC over extension blocks).\n\n\n> 2. Per the question in [1], it's my understanding that P2SH\n> transactions contain all of the information within themselves for full\n> nodes to act as a check on miners mishandling the anyone-can-spend\n> nature of P2SH transactions. However, that does not seem to be the\n> case with WT^ transactions.\n[DC#0] They do.\n[DC#1] They do.\n[DC#2] They do.\n[DC#3] They do.\n\nAgain, from the perspective of a mainchain user, every withdrawal is valid.\n\n\n> In P2SH txns, there is no need for anyone to, as the Drivechain spec\n> says, \"to contact each other, figure out what is going on\". Everything\n> just automatically works.\nThere is no *need* to this in Drivechain, either, for [DC#0] or [DC#1].\n\n[DC#2] and [DC#3] would certainly have an interest in understanding what\nis going on, but that has absolutely nothing whatsoever to do with\nBitcoin Core and so is off-topic for this mailing list.\n\n\n> If the security of WT^ transactions could be brought up to actually be\n> in line with the security of P2SH and SegWit transactions, then I\n> would have far less to object to.\nSomehow I doubt it.\n\n\nPaul\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/72bb7ebe/attachment-0001.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-07-13T01:15:46",
                "message_text_only": "Paul,\n\n> The confusion below stems from his conflation of several different ideas.\n\nI'm right here, are you having a conversation with me or are you on a stage talking to an audience?\n\n> FYI that document is nearly two years old, and although it is still overwhelmingly accurate, new optimizations allow us (I think) to push the waiting period to several weeks and the total ACK counting period up to several months.\n\nWhat does that have to do with my question? The counting period, if I understood correctly, is something miners do, not full nodes.\n\nAlso, if the document is old and/or outdated, do you happen to have a link to a more update-to-date version of the spec? It would be helpful for review.\n\n> Because if a node doesn't have the sidechain's information, it will just assume every withdrawal is valid. This is comparable to someone who still hasn't upgraded to support P2SH, in cases [DC#0] and [#1].\n\nRight, for [DC#0] and [DC#1], but for [DC#2] an [DC#3] you marked it as \"Yes\" without substantiating why you did so.\n\n> Again, from the perspective of a mainchain user, every withdrawal is valid.\n\nAnd that is not how P2SH works.\n\n> [DC#2] and [DC#3] would certainly have an interest in understanding what is going on, but that has absolutely nothing whatsoever to do with Bitcoin Core and so is off-topic for this mailing list.\n\nHow is that an answer to my question?\n\nWhat does \"[DC#2] and [DC#3] would certainly have an interest in understanding what is going on\" mean?\n\nIn P2SH, all upgraded nodes will reject invalid P2SH transactions, period.\n\nWhat exactly would [DC#2] and [DC#3] nodes do when faced with an invalid WT^ transaction \u2014 invalid in the sense that it contains funds which miners are stealing?\n\nAgain, in P2SH miners cannot steal funds, because all full nodes have a fully automatic enforcement policy.\n\nKind regards,\nGreg Slepak\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jul 12, 2017, at 5:26 PM, Paul Sztorc <truthcoin at gmail.com <mailto:truthcoin at gmail.com>> wrote:\n> \n> The confusion below stems from his conflation of several different ideas.\n> \n> I will try to explicitly clarify a distinction between several types of user (or, \"modes\" of use if you prefer):\n> \n> [DC#0] -- Someone who does not upgrade their Bitcoin software (and is running, say, 0.13). However, they experience the effects of the new rules which miners add (as per the soft fork[s] to add drivechain functionality and individual drivechains).\n> [DC#1] -- Someone who always upgrades to the latest version of the Bitcoin software, but otherwise has no interest in running/using sidechains.\n> [DC#2] -- Someone who upgrades to the latest Bitcoin version, and decides to also become a full node of one or more sidechains, but who ever actually uses the sidechains.\n> [DC#3] -- Someone who upgrades their software, runs sidechain full nodes, and actively moves money to and from these.\n> \n> \n> On 7/12/2017 6:43 PM, Tao Effect wrote:\n>> \n>> I am now looking closer again at step number 4 in the Drivechain specification [2]:\n>> \n>> 4. Everyone waits for a period of, say, 3 days. This gives everyone an opportunity to make sure the same WT^ is in both the Bitcoin coinbase and the Sidechain header. If they\u2019re different, everyone has plenty of time to contact each other, figure out what is going on, and restart the process until its right.\n>> It seems to me that where our disagreement lies is in this point.\n>> The Drivechain spec seems to claim that its use of anyone-can-pay is the same as P2SH (and in later emails you reference SegWit as well). Is this really true?\n> FYI that document is nearly two years old, and although it is still overwhelmingly accurate, new optimizations allow us (I think) to push the waiting period to several weeks and the total ACK counting period up to several months.\n> \n> [DC#0] Yes\n> [DC#1] Yes\n> [DC#2] Yes\n> [DC#3] Yes\n> \n> Because if a node doesn't have the sidechain's information, it will just assume every withdrawal is valid. This is comparable to someone who still hasn't upgraded to support P2SH, in cases [DC#0] and [#1].\n> \n> (And this is the main advantage of DC over extension blocks).\n> \n> \n>> 2. Per the question in [1], it's my understanding that P2SH transactions contain all of the information within themselves for full nodes to act as a check on miners mishandling the anyone-can-spend nature of P2SH transactions. However, that does not seem to be the case with WT^ transactions.\n> [DC#0] They do.\n> [DC#1] They do.\n> [DC#2] They do.\n> [DC#3] They do.\n> \n> Again, from the perspective of a mainchain user, every withdrawal is valid.\n> \n> \n>> In P2SH txns, there is no need for anyone to, as the Drivechain spec says, \"to contact each other, figure out what is going on\". Everything just automatically works.\n> There is no *need* to this in Drivechain, either, for [DC#0] or [DC#1].\n> \n> [DC#2] and [DC#3] would certainly have an interest in understanding what is going on, but that has absolutely nothing whatsoever to do with Bitcoin Core and so is off-topic for this mailing list.\n> \n> \n>> If the security of WT^ transactions could be brought up to actually be in line with the security of P2SH and SegWit transactions, then I would have far less to object to.\n> Somehow I doubt it.\n> \n> \n> Paul\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/f6cbca08/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/f6cbca08/attachment.sig>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-13T02:58:48",
                "message_text_only": "I will repeat that Drivechain can sometimes be confusing because it is\ndifferent things to different people.\n\nHere is my attempt to break it down into different modes:\n\n[DC#0] -- Someone who does not upgrade their Bitcoin software (and is\nrunning, say, 0.13). However, they experience the effects of the new\nrules which miners add (as per the soft fork[s] to add drivechain\nfunctionality and individual drivechains).\n[DC#1] -- Someone who always upgrades to the latest version of the\nBitcoin software, but otherwise has no interest in running/using sidechains.\n[DC#2] -- Someone who upgrades to the latest Bitcoin version, and\ndecides to also become a full node of one or more sidechains, but who\never actually uses the sidechains.\n[DC#3] -- Someone who upgrades their software, runs sidechain full\nnodes, and actively moves money to and from these.\n\nGreg is still conflating modes [DC#1] and [DC#3]. Specifically, he\nequivocates on the team \"steal\", using it to mean two different things:\n[a] spending an invalid transaction, and [b] a withdrawal that would not\nmatch the report given by a sidechain node.\n\nThe two are quite different, see my comments below:\n\n\nOn 7/12/2017 9:15 PM, Tao Effect wrote:\n>> FYI that document is nearly two years old, and although it is still\n>> overwhelmingly accurate, new optimizations allow us (I think) to push\n>> the waiting period to several weeks and the total ACK counting period\n>> up to several months.\n> What does that have to do with my question? The counting period, if I\n> understood correctly, is something miners do, not full nodes.\n\nGreg quoted a passage that contained an older parameter estimate of \"a\nfew days\", and I thought it would be helpful and informative if I\nclarified that the parameter estimate had been updated to a new (more\nsecure) value.\n\nIn point of fact, he is wrong, because nodes do the counting. When\nminers find a block, they can choose to move the counter up, down, or\nnot at all. But nodes do the counting.\n\n\n> Also, if the document is old and/or outdated, do you happen to have a\n> link to a more update-to-date version of the spec? It would be helpful\n> for review.\n\nAs I stated above, the document is mostly accurate. There is no other\nmore up to date version.\n\n\n>> Because if a node doesn't have the sidechain's information, it will\n>> just assume every withdrawal is valid. This is comparable to someone\n>> who still hasn't upgraded to support P2SH, in cases [DC#0] and [#1].\n>\n> Right, for [DC#0] and [DC#1], but for [DC#2] an [DC#3] you marked it\n> as \"Yes\" without substantiating why you did so.\n\n\nAbove, Greg omitted his original question. For reference, it was:\n\n>  The Drivechain spec seems to claim that its use of anyone-can-pay is the same as P2SH\n\nThe answer is that both DC and P2SH use transactions which are 'always\nvalid' to some group of people (un-upgraded users) but which are\nsometimes invalid to new users. So the only difference would be for\n[DC#0] vs other versions, but this difference is trivial as miners will\ncensor invalid txns.\n\nIt is your classic soft fork situation.\n\n\n>> Again, from the perspective of a mainchain user, every withdrawal is\n>> valid.\n> And that is not how P2SH works.\n\nAgain, keep in mind that Greg continually conflates two different things:\n1. Whether the soft fork rules have been followed, and\n2. Whether the WT^ submitted by a majority hashrate matches the one\ncalculated by sidechain nodes.\n\nThe first case is exactly equal to P2SH. Just as old nodes accept every\nP2SH transaction, so too will [DC#0] users accept every WT^ transaction.\n\nIn the second case, it so happens that [DC#1], [DC#2], and [DC#3] would\nalso accept any WT^ *that followed the Drivechain rules*, even if they\ndid not like the outcome (because the outcome in question was\narbitrarily designated as a \"theft\" of funds -- again, see the second\ncase in the list above). In this way, it is exactly similar to P2SH\nbecause nodes will accept *any* p2sh txn **that follows the p2sh\nrules**, even if they don't \"like\" the specific script contained within\n(for example, because it is a theft of \"their\" BitFinex funds, or a\ndonation to a political candidate they dislike, etc).\n\n\n>> [DC#2] and [DC#3] would certainly have an interest in understanding\n>> what is going on, but that has absolutely nothing whatsoever to do\n>> with Bitcoin Core and so is off-topic for this mailing list.\n> How is that an answer to my question?\n\nGreg is, of course, not entitled to an answer to irrelevant questions --\njust as he would not be entitled to an answer if he asked for my\nfavorite color or my home address. And such answers would needlessly\nconsume the mailing list's scarce time.\n\n\n> What does \"[DC#2] and [DC#3] would certainly have an interest in\n> understanding what is going on\" mean?\n\nIt is clear to me that, if we are not clear on the basics first, we\ncannot hope to tackle anything intermediate. We will come back to this\nafter clearing up soft fork part.\n\n\n> In P2SH, all upgraded nodes will reject invalid P2SH transactions, period.\n\nIn DC, all upgraded nodes will reject invalid DC transactions, period.\n\n\n> What exactly would [DC#2] and [DC#3] nodes do when faced with an\n> invalid WT^ transaction \u2014 invalid in the sense that it contains funds\n> which miners are stealing?\n\nThe [DC#2] and [DC#3] nodes would do exactly what the [DC#0] and [DC#1]\nnodes do. This is what I mean by \"every withdrawal is valid\".\n\n\n> Again, in P2SH miners cannot steal funds, because all full nodes have\n> a fully automatic enforcement policy.\n\nIn DC, miners cannot steal funds, because all full nodes have a fully\nautomatic enforcement policy.\n\nHowever, DC *allows* users to choose to place some of their BTC at the\nrelative mercy of the miners in creative ways, if they wish (as does\nP2SH -- someone could write a script which donates funds to miners, and\nthen fund it... \"paying\" to that script). This is another example of\nconflating [DC#1] and [DC#3].\n\nPaul\n\n\n\n>> On Jul 12, 2017, at 5:26 PM, Paul Sztorc <truthcoin at gmail.com\n>> <mailto:truthcoin at gmail.com>> wrote:\n>>\n>> The confusion below stems from his conflation of several different ideas.\n>>\n>> I will try to explicitly clarify a distinction between several types\n>> of user (or, \"modes\" of use if you prefer):\n>>\n>> [DC#0] -- Someone who does not upgrade their Bitcoin software (and is\n>> running, say, 0.13). However, they experience the effects of the new\n>> rules which miners add (as per the soft fork[s] to add drivechain\n>> functionality and individual drivechains).\n>> [DC#1] -- Someone who always upgrades to the latest version of the\n>> Bitcoin software, but otherwise has no interest in running/using\n>> sidechains.\n>> [DC#2] -- Someone who upgrades to the latest Bitcoin version, and\n>> decides to also become a full node of one or more sidechains, but who\n>> ever actually uses the sidechains.\n>> [DC#3] -- Someone who upgrades their software, runs sidechain full\n>> nodes, and actively moves money to and from these.\n>>\n>>\n>> On 7/12/2017 6:43 PM, Tao Effect wrote:\n>>>\n>>> I am now looking closer again at step number 4 in the Drivechain\n>>> specification [2]:\n>>>\n>>>     4. Everyone waits for a period of, say, 3 days. This gives\n>>>     everyone an opportunity to make sure the same WT^ is in both the\n>>>     Bitcoin coinbase and the Sidechain header. If they\u2019re different,\n>>>     everyone has plenty of time to contact each other, figure out\n>>>     what is going on, and restart the process until its right.\n>>>\n>>> It seems to me that where our disagreement lies is in this point.\n>>> The Drivechain spec seems to claim that its use of anyone-can-pay is\n>>> the same as P2SH (and in later emails you reference SegWit as well).\n>>> Is this really true?\n>> FYI that document is nearly two years old, and although it is still\n>> overwhelmingly accurate, new optimizations allow us (I think) to push\n>> the waiting period to several weeks and the total ACK counting period\n>> up to several months.\n>>\n>> [DC#0] Yes\n>> [DC#1] Yes\n>> [DC#2] Yes\n>> [DC#3] Yes\n>>\n>> Because if a node doesn't have the sidechain's information, it will\n>> just assume every withdrawal is valid. This is comparable to someone\n>> who still hasn't upgraded to support P2SH, in cases [DC#0] and [#1].\n>>\n>> (And this is the main advantage of DC over extension blocks).\n>>\n>>\n>>> 2. Per the question in [1], it's my understanding that P2SH\n>>> transactions contain all of the information within themselves for\n>>> full nodes to act as a check on miners mishandling the\n>>> anyone-can-spend nature of P2SH transactions. However, that does not\n>>> seem to be the case with WT^ transactions.\n>> [DC#0] They do.\n>> [DC#1] They do.\n>> [DC#2] They do.\n>> [DC#3] They do.\n>>\n>> Again, from the perspective of a mainchain user, every withdrawal is\n>> valid.\n>>\n>>\n>>> In P2SH txns, there is no need for anyone to, as the Drivechain spec\n>>> says, \"to contact each other, figure out what is going on\".\n>>> Everything just automatically works.\n>> There is no *need* to this in Drivechain, either, for [DC#0] or [DC#1].\n>>\n>> [DC#2] and [DC#3] would certainly have an interest in understanding\n>> what is going on, but that has absolutely nothing whatsoever to do\n>> with Bitcoin Core and so is off-topic for this mailing list.\n>>\n>>\n>>> If the security of WT^ transactions could be brought up to actually\n>>> be in line with the security of P2SH and SegWit transactions, then I\n>>> would have far less to object to.\n>> Somehow I doubt it.\n>>\n>>\n>> Paul\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/c2d0f02b/attachment-0001.html>"
            },
            {
                "author": "Tao Effect",
                "date": "2017-07-13T03:24:10",
                "message_text_only": "Dear Paul,\n\n> In point of fact, he is wrong, because nodes do the counting. When miners find a block, they can choose to move the counter up, down, or not at all. But nodes do the counting.\n\nI may very well have confused who counts what, but for this discussion on *theft* it's irrelevant, so I won't push further on this.\n\nLet's move on to the theft.\n\n> Again, keep in mind that Greg continually conflates two different things:\n> 1. Whether the soft fork rules have been followed, and\n> 2. Whether the WT^ submitted by a majority hashrate matches the one calculated by sidechain nodes.\n> \n> The first case is exactly equal to P2SH. Just as old nodes accept every P2SH transaction, so too will [DC#0] users accept every WT^ transaction.\n\nTo be crystal clear: I am entirely uninterested in the un-upgraded nodes, what you call [DC#0].\n\nThey are irrelevant to my argument.\n\n> In the second case, it so happens that [DC#1], [DC#2], and [DC#3] would also accept any WT^ *that followed the Drivechain rules*, even if they did not like the outcome (because the outcome in question was arbitrarily designated as a \"theft\" of funds -- again, see the second case in the list above). In this way, it is exactly similar to P2SH because nodes will accept *any* p2sh txn **that follows the p2sh rules**, even if they don't \"like\" the specific script contained within (for example, because it is a theft of \"their\" BitFinex funds, or a donation to a political candidate they dislike, etc).\n\nThis is false.\n\nFor miners to steal P2SH funds, the P2SH script would have to be coded to explicitly allow them to do it.\n\nHow many P2SH scripts are you aware of that are used for the purpose of facilitating such theft?\n\nI know of none, and I bet there are none.\n\nWhereas in DC, every single usage of DC allows miners to steal funds.\n\n>> In P2SH, all upgraded nodes will reject invalid P2SH transactions, period.\n> \n> In DC, all upgraded nodes will reject invalid DC transactions, period.\n\nIt appears you are playing games with the meaning of \"invalid\" here, so that sentence is invalid.\n\nI was very clear what I meant by \"invalid\" in my email: WT^ transactions that represent miners stealing funds. Please stick to that and do not play word games.\n\n> The [DC#2] and [DC#3] nodes would do exactly what the [DC#0] and [DC#1] nodes do. This is what I mean by \"every withdrawal is valid\".\n\nSo, here you are again re-affirming that WT^ transactions representing stolen funds are allowed in DC, and by tying them all together you are also affirming that the SPV proofs mentioned in DC are completely irrelevant / pointless / unused.\n\n>> Again, in P2SH miners cannot steal funds, because all full nodes have a fully automatic enforcement policy.\n> \n> In DC, miners cannot steal funds, because all full nodes have a fully automatic enforcement policy.\n> \n> However, DC *allows* users to choose to place some of their BTC at the relative mercy of the miners in creative ways, if they wish (as does P2SH -- someone could write a script which donates funds to miners, and then fund it... \"paying\" to that script). This is another example of conflating [DC#1] and [DC#3].\n\nSo in the first sentence you say they \"cannot steal funds\", but everything else you've said, including the following paragraph, and your specification, indicates they can.\n\nI've finally collected all my thoughts / concerns and have also summarized them in this document:\n\nhttps://gist.github.com/taoeffect/9ff64cf78cf1408ec29f13ed39e534c9 <https://gist.github.com/taoeffect/9ff64cf78cf1408ec29f13ed39e534c9>\n\nKind regards,\nGreg Slepak\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n> On Jul 12, 2017, at 7:58 PM, Paul Sztorc via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> I will repeat that Drivechain can sometimes be confusing because it is different things to different people.\n> \n> Here is my attempt to break it down into different modes:\n> \n> [DC#0] -- Someone who does not upgrade their Bitcoin software (and is running, say, 0.13). However, they experience the effects of the new rules which miners add (as per the soft fork[s] to add drivechain functionality and individual drivechains).\n> [DC#1] -- Someone who always upgrades to the latest version of the Bitcoin software, but otherwise has no interest in running/using sidechains.\n> [DC#2] -- Someone who upgrades to the latest Bitcoin version, and decides to also become a full node of one or more sidechains, but who ever actually uses the sidechains.\n> [DC#3] -- Someone who upgrades their software, runs sidechain full nodes, and actively moves money to and from these.\n> \n> Greg is still conflating modes [DC#1] and [DC#3]. Specifically, he equivocates on the team \"steal\", using it to mean two different things: [a] spending an invalid transaction, and [b] a withdrawal that would not match the report given by a sidechain node.\n> \n> The two are quite different, see my comments below:\n> \n> \n> On 7/12/2017 9:15 PM, Tao Effect wrote:\n>>> FYI that document is nearly two years old, and although it is still overwhelmingly accurate, new optimizations allow us (I think) to push the waiting period to several weeks and the total ACK counting period up to several months.\n>> \n>> What does that have to do with my question? The counting period, if I understood correctly, is something miners do, not full nodes.\n> \n> Greg quoted a passage that contained an older parameter estimate of \"a few days\", and I thought it would be helpful and informative if I clarified that the parameter estimate had been updated to a new (more secure) value.\n> \n> In point of fact, he is wrong, because nodes do the counting. When miners find a block, they can choose to move the counter up, down, or not at all. But nodes do the counting.\n> \n> \n>> Also, if the document is old and/or outdated, do you happen to have a link to a more update-to-date version of the spec? It would be helpful for review.\n> \n> As I stated above, the document is mostly accurate. There is no other more up to date version.\n> \n> \n>>> Because if a node doesn't have the sidechain's information, it will just assume every withdrawal is valid. This is comparable to someone who still hasn't upgraded to support P2SH, in cases [DC#0] and [#1].\n>> \n>> Right, for [DC#0] and [DC#1], but for [DC#2] an [DC#3] you marked it as \"Yes\" without substantiating why you did so.\n> \n> \n> Above, Greg omitted his original question. For reference, it was:\n> \n>>  The Drivechain spec seems to claim that its use of anyone-can-pay is the same as P2SH\n> \n> The answer is that both DC and P2SH use transactions which are 'always valid' to some group of people (un-upgraded users) but which are sometimes invalid to new users. So the only difference would be for [DC#0] vs other versions, but this difference is trivial as miners will censor invalid txns.\n> \n> It is your classic soft fork situation.\n> \n> \n>>> Again, from the perspective of a mainchain user, every withdrawal is valid.\n>> \n>> And that is not how P2SH works.\n> \n> Again, keep in mind that Greg continually conflates two different things:\n> 1. Whether the soft fork rules have been followed, and\n> 2. Whether the WT^ submitted by a majority hashrate matches the one calculated by sidechain nodes.\n> \n> The first case is exactly equal to P2SH. Just as old nodes accept every P2SH transaction, so too will [DC#0] users accept every WT^ transaction.\n> \n> In the second case, it so happens that [DC#1], [DC#2], and [DC#3] would also accept any WT^ *that followed the Drivechain rules*, even if they did not like the outcome (because the outcome in question was arbitrarily designated as a \"theft\" of funds -- again, see the second case in the list above). In this way, it is exactly similar to P2SH because nodes will accept *any* p2sh txn **that follows the p2sh rules**, even if they don't \"like\" the specific script contained within (for example, because it is a theft of \"their\" BitFinex funds, or a donation to a political candidate they dislike, etc).\n> \n> \n>>> [DC#2] and [DC#3] would certainly have an interest in understanding what is going on, but that has absolutely nothing whatsoever to do with Bitcoin Core and so is off-topic for this mailing list.\n>> \n>> How is that an answer to my question?\n> \n> Greg is, of course, not entitled to an answer to irrelevant questions -- just as he would not be entitled to an answer if he asked for my favorite color or my home address. And such answers would needlessly consume the mailing list's scarce time.\n> \n> \n>> What does \"[DC#2] and [DC#3] would certainly have an interest in understanding what is going on\" mean?\n> \n> It is clear to me that, if we are not clear on the basics first, we cannot hope to tackle anything intermediate. We will come back to this after clearing up soft fork part.\n> \n> \n>> In P2SH, all upgraded nodes will reject invalid P2SH transactions, period.\n> \n> In DC, all upgraded nodes will reject invalid DC transactions, period.\n> \n> \n>> What exactly would [DC#2] and [DC#3] nodes do when faced with an invalid WT^ transaction \u2014 invalid in the sense that it contains funds which miners are stealing?\n> \n> The [DC#2] and [DC#3] nodes would do exactly what the [DC#0] and [DC#1] nodes do. This is what I mean by \"every withdrawal is valid\".\n> \n> \n>> Again, in P2SH miners cannot steal funds, because all full nodes have a fully automatic enforcement policy.\n> \n> In DC, miners cannot steal funds, because all full nodes have a fully automatic enforcement policy.\n> \n> However, DC *allows* users to choose to place some of their BTC at the relative mercy of the miners in creative ways, if they wish (as does P2SH -- someone could write a script which donates funds to miners, and then fund it... \"paying\" to that script). This is another example of conflating [DC#1] and [DC#3].\n> \n> Paul\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/abb2b4f4/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170712/abb2b4f4/attachment-0001.sig>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-13T15:39:00",
                "message_text_only": "Greg is still conflating two different usages of the word \"theft\":\n1. Whether the soft fork rules have been followed, and\n2. Whether the WT^ submitted by a majority hashrate matches the one\ncalculated by sidechain nodes.\n\nIn his message he claims to uniquely adopt definition #2, saying\n(emphasis added):\n\n> I was very clear what I meant by \"invalid\" in my email: WT^\n> transactions that represent miners stealing funds. **Please stick to\n> that** and do not play word games.\n\n...however, he revokes that commitment below when it suits his purposes.\n\nSince Greg's message is probably too confusing to be helpful, I will\nfirst clarify both cases:\n\nCase 1 -- soft fork rules -- all \"invalid_1\" txns are regarded as\n\"theft_1\" and are rejected.\nCase 2 -- sidechain's unique consensus rules -- all WT^ are accepted (if\nthese WT^ are valid_1 under the Case 1 rules), whether they match the\nsidechain's reported WT^ or not (in other words, whether they are\nvalid_2 or not).\n\nIn Case 2, the mainchain accepts all WT^ transactions as \"valid\", in\nthat they can be included in a block, whether or not they are\n\"valid_2\".  By design, sidechains make no effort to validate the rules\nspecific to each sidechain, just as they make no effort to validate the\nrules of Altcoins. In this way, a WT^ transaction is comparable to\nsomeone who is selling an Altcoin to purchase some Bitcoin -- Bitcoin\ndoesn't care how they got the Altcoin.\n\n\nOn 7/12/2017 11:24 PM, Tao Effect wrote:\n> Dear Paul,\n>\n>> In point of fact, he is wrong, because nodes do the counting. When\n>> miners find a block, they can choose to move the counter up, down, or\n>> not at all. But nodes do the counting.\n>\n> I may very well have confused who counts what\n\nTo be clear: yes, Greg did get it confused.\n\nAnd it is very important, because a neglect of the node-enforced rules\nis a neglect of **both** theft_1 and theft_2 simultaneously, making it\neasier to conflate the both of them as Greg is still doing.\n\n\n>> In the second case, it so happens that [DC#1], [DC#2], and [DC#3]\n>> would also accept any WT^ *that followed the Drivechain rules*, even\n>> if they did not like the outcome (because the outcome in question was\n>> arbitrarily designated as a \"theft\" of funds -- again, see the second\n>> case in the list above). In this way, it is exactly similar to P2SH\n>> because nodes will accept *any* p2sh txn **that follows the p2sh\n>> rules**, even if they don't \"like\" the specific script contained\n>> within (for example, because it is a theft of \"their\" BitFinex funds,\n>> or a donation to a political candidate they dislike, etc).\n>\n> This is false.\n>\n> For miners to steal P2SH funds, the P2SH script would have to be coded\n> to explicitly allow them to do it.\n>\n> How many P2SH scripts are you aware of that are used for the purpose\n> of facilitating such theft?\n>\n> I know of none, and I bet there are none.\n\n\nThis is the instance I mentioned above -- despite committing to only\ndiscussing theft_2, Greg has secretly switched back to theft_1, when he\ntalks about a \"P2SH script...used for the purpose of facilitating theft\".\n\nUnder theft_2, there is no way to infer the theft-ness of the\ntransaction from the script itself. For example, if someone made a\n2-of-3 multisig with a third party escrow , and these funds were\n\"stolen\", this would be an example of funds \"stolen\" from a P2SH under\n\"theft_2\".\n\nAt which point Greg would angrily say that whoever wrote P2SH was\nreckless and...allowed Bitcoins to be \"stolen\". Or perhaps he would\nswitch definitions yet again, and say that \"that doesn't count as\ntheft\". blah blah blah yada yada yada\n\nIt is true that moving from pre-P2SH to post-P2SH has not --yet--\nenabled any theft_2 as a result. But P2SH has also failed to enable\nsidechains. Sidechains logically must open the door to theft_2, else\nthey will regress to the undesirable cases of hard/evil fork (as I\nexplain in the spec). Empirically, we do not know how much theft_2 will\nbe enabled by drivechain. Theoretically, it is possible that there will\nnever be a theft_2 on drivechain.\n\n\n>> The [DC#2] and [DC#3] nodes would do exactly what the [DC#0] and\n>> [DC#1] nodes do. This is what I mean by \"every withdrawal is valid\".\n>\n> So, here you are again re-affirming that WT^ transactions representing\n> stolen funds are allowed in DC, and by tying them all together you are\n> also affirming that the SPV proofs mentioned in DC are completely\n> irrelevant / pointless / unused.\n\nI do not affirm the latter. The SPV proofs in DC are very important, as\nthey are what allow nodes to enforce the delayed withdrawal upon miners.\nIn fact, this is exactly what Greg admits to being confused about above.\nHe is correct that he is confused.\n\nExperts including Adam Back (co-author of original sidechains paper, CEO\nof Blockstream which started the sidechains conversation) have publicly\nstated that they share my belief that this delayed withdrawal technique\nis likely to mitigate the threat of theft_2. Greg S is free to hold a\ndifferent opinion.\n\n\n>>> Again, in P2SH miners cannot steal funds, because all full nodes\n>>> have a fully automatic enforcement policy.\n>>\n>> In DC, miners cannot steal funds, because all full nodes have a fully\n>> automatic enforcement policy.\n>>\n>> However, DC *allows* users to choose to place some of their BTC at\n>> the relative mercy of the miners in creative ways, if they wish (as\n>> does P2SH -- someone could write a script which donates funds to\n>> miners, and then fund it... \"paying\" to that script). This is another\n>> example of conflating [DC#1] and [DC#3].\n>\n> So in the first sentence you say they \"cannot steal funds\", but\n> everything else you've said, including the following paragraph, and\n> your specification, indicates they can.\n\nGreg did not specify which theft so I had to guess in the above case. \nAbove, I refer to \"theft_1\", the [DC#0] style theft. As always, no one\ncan \"steal_1\" funds in that case.\n\nThe reason I assumed Greg was talking about theft_1 and not theft_2, is\nbecause he mentioned P2SH and the fact that full nodes automatically\nenforce the network's rules. Drivechain's rules impose a new format,\nlike P2SH, and have new rules which are automatically enforced by nodes.\n\nGreg's style is basically to confuse two things, ask unclear questions\nabout them, and then try to discover \"contradictions\" in the mess that\nfollows. But it is all a function of his conflation of terminology and\nnothing else.\n\n\n> I've finally collected all my thoughts / concerns and have also\n> summarized them in this document:\n>\n> https://gist.github.com/taoeffect/9ff64cf78cf1408ec29f13ed39e534c9\n\nGiven how little Greg understands, even after being hand-fed by me for\ndays and weeks, I admit a totally nonexistent interest in reading it.\n\nPaul\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/0d4d25a4/attachment-0001.html>"
            },
            {
                "author": "Hampus Sj\u00f6berg",
                "date": "2017-07-13T13:17:13",
                "message_text_only": "In softforks, I would argue that 100% of all nodes and miners need to\nupgrade to the new rules.\nThis makes sure that trying to incorrectly spend an \"AnyOneCanSpend\" will\nresult in a hardfork, instead of a temporary (or permanent) chainsplit.\n\nWith drivechains, it seems like the current plan is to only let the nodes\nthat are interested in the drivechain validate the other chain, and not\nnecessarily 100% of the network.\nI guess this could be any percentage of the network, which could lead to a\ntemporary/permanent chainsplit depending on how many percentage of the\nminers are also validating the other chain (am I missing something here?).\n\nI have no way to evaluate if this is an okay trade-off.\nIt seems like major disruption could very likely happen if say only 5% of\nall fullnodes validate the drivechain.\n\nTo be fully secure, it seems like 100% of all nodes should also have a\nfullnode for the drivechain as well...\nThis is one of the reasons I don't advocate sidechains/drivechains as a\nscaling solution, it looks like it would have to the same outcome as a\nblocksize increase on the mainchain, but with more complexity.\nI think sidechains/drivechains could be useful for other things though.\n\n\nThanks for all your work so far Paul.\nHampus\n\n2017-07-13 4:58 GMT+02:00 Paul Sztorc via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> I will repeat that Drivechain can sometimes be confusing because it is\n> different things to different people.\n>\n> Here is my attempt to break it down into different modes:\n>\n> [DC#0] -- Someone who does not upgrade their Bitcoin software (and is\n> running, say, 0.13). However, they experience the effects of the new rules\n> which miners add (as per the soft fork[s] to add drivechain functionality\n> and individual drivechains).\n> [DC#1] -- Someone who always upgrades to the latest version of the Bitcoin\n> software, but otherwise has no interest in running/using sidechains.\n> [DC#2] -- Someone who upgrades to the latest Bitcoin version, and decides\n> to also become a full node of one or more sidechains, but who ever actually\n> uses the sidechains.\n> [DC#3] -- Someone who upgrades their software, runs sidechain full nodes,\n> and actively moves money to and from these.\n>\n> Greg is still conflating modes [DC#1] and [DC#3]. Specifically, he\n> equivocates on the team \"steal\", using it to mean two different things: [a]\n> spending an invalid transaction, and [b] a withdrawal that would not match\n> the report given by a sidechain node.\n>\n> The two are quite different, see my comments below:\n>\n>\n> On 7/12/2017 9:15 PM, Tao Effect wrote:\n>\n> FYI that document is nearly two years old, and although it is still\n> overwhelmingly accurate, new optimizations allow us (I think) to push the\n> waiting period to several weeks and the total ACK counting period up to\n> several months.\n>\n> What does that have to do with my question? The counting period, if I\n> understood correctly, is something miners do, not full nodes.\n>\n>\n> Greg quoted a passage that contained an older parameter estimate of \"a few\n> days\", and I thought it would be helpful and informative if I clarified\n> that the parameter estimate had been updated to a new (more secure) value.\n>\n> In point of fact, he is wrong, because nodes do the counting. When miners\n> find a block, they can choose to move the counter up, down, or not at all.\n> But nodes do the counting.\n>\n>\n> Also, if the document is old and/or outdated, do you happen to have a link\n> to a more update-to-date version of the spec? It would be helpful for\n> review.\n>\n>\n> As I stated above, the document is mostly accurate. There is no other more\n> up to date version.\n>\n>\n> Because if a node doesn't have the sidechain's information, it will just\n> assume every withdrawal is valid. This is comparable to someone who still\n> hasn't upgraded to support P2SH, in cases [DC#0] and [#1].\n>\n>\n> Right, for [DC#0] and [DC#1], but for [DC#2] an [DC#3] you marked it as\n> \"Yes\" without substantiating why you did so.\n>\n>\n>\n> Above, Greg omitted his original question. For reference, it was:\n>\n>  The Drivechain spec seems to claim that its use of anyone-can-pay is the same as P2SH\n>\n>\n> The answer is that both DC and P2SH use transactions which are 'always\n> valid' to some group of people (un-upgraded users) but which are sometimes\n> invalid to new users. So the only difference would be for [DC#0] vs other\n> versions, but this difference is trivial as miners will censor invalid txns.\n>\n> It is your classic soft fork situation.\n>\n>\n> Again, from the perspective of a mainchain user, every withdrawal is valid.\n>\n> And that is not how P2SH works.\n>\n>\n> Again, keep in mind that Greg continually conflates two different things:\n> 1. Whether the soft fork rules have been followed, and\n> 2. Whether the WT^ submitted by a majority hashrate matches the one\n> calculated by sidechain nodes.\n>\n> The first case is exactly equal to P2SH. Just as old nodes accept every\n> P2SH transaction, so too will [DC#0] users accept every WT^ transaction.\n>\n> In the second case, it so happens that [DC#1], [DC#2], and [DC#3] would\n> also accept any WT^ *that followed the Drivechain rules*, even if they did\n> not like the outcome (because the outcome in question was arbitrarily\n> designated as a \"theft\" of funds -- again, see the second case in the list\n> above). In this way, it is exactly similar to P2SH because nodes will\n> accept *any* p2sh txn **that follows the p2sh rules**, even if they don't\n> \"like\" the specific script contained within (for example, because it is a\n> theft of \"their\" BitFinex funds, or a donation to a political candidate\n> they dislike, etc).\n>\n>\n> [DC#2] and [DC#3] would certainly have an interest in understanding what\n> is going on, but that has absolutely nothing whatsoever to do with Bitcoin\n> Core and so is off-topic for this mailing list.\n>\n> How is that an answer to my question?\n>\n>\n> Greg is, of course, not entitled to an answer to irrelevant questions --\n> just as he would not be entitled to an answer if he asked for my favorite\n> color or my home address. And such answers would needlessly consume the\n> mailing list's scarce time.\n>\n>\n> What does \"[DC#2] and [DC#3] would certainly have an interest in\n> understanding what is going on\" mean?\n>\n>\n> It is clear to me that, if we are not clear on the basics first, we cannot\n> hope to tackle anything intermediate. We will come back to this after\n> clearing up soft fork part.\n>\n>\n> In P2SH, all upgraded nodes will reject invalid P2SH transactions, period.\n>\n>\n> In DC, all upgraded nodes will reject invalid DC transactions, period.\n>\n>\n> What exactly would [DC#2] and [DC#3] nodes do when faced with an invalid\n> WT^ transaction \u2014 invalid in the sense that it contains funds which miners\n> are stealing?\n>\n>\n> The [DC#2] and [DC#3] nodes would do exactly what the [DC#0] and [DC#1]\n> nodes do. This is what I mean by \"every withdrawal is valid\".\n>\n>\n> Again, in P2SH miners cannot steal funds, because all full nodes have a\n> fully automatic enforcement policy.\n>\n>\n> In DC, miners cannot steal funds, because all full nodes have a fully\n> automatic enforcement policy.\n>\n> However, DC *allows* users to choose to place some of their BTC at the\n> relative mercy of the miners in creative ways, if they wish (as does P2SH\n> -- someone could write a script which donates funds to miners, and then\n> fund it... \"paying\" to that script). This is another example of conflating\n> [DC#1] and [DC#3].\n>\n> Paul\n>\n>\n>\n>\n> On Jul 12, 2017, at 5:26 PM, Paul Sztorc <truthcoin at gmail.com> wrote:\n>\n> The confusion below stems from his conflation of several different ideas.\n>\n> I will try to explicitly clarify a distinction between several types of\n> user (or, \"modes\" of use if you prefer):\n>\n> [DC#0] -- Someone who does not upgrade their Bitcoin software (and is\n> running, say, 0.13). However, they experience the effects of the new rules\n> which miners add (as per the soft fork[s] to add drivechain functionality\n> and individual drivechains).\n> [DC#1] -- Someone who always upgrades to the latest version of the Bitcoin\n> software, but otherwise has no interest in running/using sidechains.\n> [DC#2] -- Someone who upgrades to the latest Bitcoin version, and decides\n> to also become a full node of one or more sidechains, but who ever actually\n> uses the sidechains.\n> [DC#3] -- Someone who upgrades their software, runs sidechain full nodes,\n> and actively moves money to and from these.\n>\n>\n> On 7/12/2017 6:43 PM, Tao Effect wrote:\n>\n>\n> I am now looking closer again at step number 4 in the Drivechain\n> specification [2]:\n>\n> 4. Everyone waits for a period of, say, 3 days. This gives everyone an\n> opportunity to make sure the same WT^ is in both the Bitcoin coinbase and\n> the Sidechain header. If they\u2019re different, everyone has plenty of time to\n> contact each other, figure out what is going on, and restart the process\n> until its right.\n>\n> It seems to me that where our disagreement lies is in this point.\n> The Drivechain spec seems to claim that its use of anyone-can-pay is the\n> same as P2SH (and in later emails you reference SegWit as well). Is this\n> really true?\n>\n> FYI that document is nearly two years old, and although it is still\n> overwhelmingly accurate, new optimizations allow us (I think) to push the\n> waiting period to several weeks and the total ACK counting period up to\n> several months.\n>\n> [DC#0] Yes\n> [DC#1] Yes\n> [DC#2] Yes\n> [DC#3] Yes\n>\n> Because if a node doesn't have the sidechain's information, it will just\n> assume every withdrawal is valid. This is comparable to someone who still\n> hasn't upgraded to support P2SH, in cases [DC#0] and [#1].\n>\n> (And this is the main advantage of DC over extension blocks).\n>\n>\n> 2. Per the question in [1], it's my understanding that P2SH transactions\n> contain all of the information within themselves for full nodes to act as a\n> check on miners mishandling the anyone-can-spend nature of P2SH\n> transactions. However, that does not seem to be the case with WT^\n> transactions.\n>\n> [DC#0] They do.\n> [DC#1] They do.\n> [DC#2] They do.\n> [DC#3] They do.\n>\n> Again, from the perspective of a mainchain user, every withdrawal is valid.\n>\n>\n> In P2SH txns, there is no need for anyone to, as the Drivechain spec says,\n> \"to contact each other, figure out what is going on\". Everything just\n> automatically works.\n>\n> There is no *need* to this in Drivechain, either, for [DC#0] or [DC#1].\n>\n> [DC#2] and [DC#3] would certainly have an interest in understanding what\n> is going on, but that has absolutely nothing whatsoever to do with Bitcoin\n> Core and so is off-topic for this mailing list.\n>\n>\n> If the security of WT^ transactions could be brought up to actually be in\n> line with the security of P2SH and SegWit transactions, then I would have\n> far less to object to.\n>\n> Somehow I doubt it.\n>\n>\n> Paul\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170713/e9634ea7/attachment-0001.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2017-07-13T17:04:01",
                "message_text_only": "Hello,\n\n\nOn 7/13/2017 9:17 AM, Hampus Sj\u00f6berg wrote:\n> In softforks, I would argue that 100% of all nodes and miners need to\n> upgrade to the new rules.\n> This makes sure that trying to incorrectly spend an \"AnyOneCanSpend\"\n> will result in a hardfork, instead of a temporary (or permanent)\n> chainsplit.\n>\n> With drivechains, it seems like the current plan is to only let the\n> nodes that are interested in the drivechain validate the other chain,\n> and not necessarily 100% of the network.\n\nCorrect.\n\n\n> I guess this could be any percentage of the network, which could lead\n> to a temporary/permanent chainsplit depending on how many percentage\n> of the miners are also validating the other chain (am I missing\n> something here?).\n> I have no way to evaluate if this is an okay trade-off.\n> It seems like major disruption could very likely happen if say only 5%\n> of all fullnodes validate the drivechain.\n\n\nYou are correct that some % of the network would be validating both\nchains. However, if miners improperly withdraw from a sidechain, it --by\ndesign-- does not lead to any chainsplit of any kind. Instead, the\nsidechain in question just dies a painful death (notice that, if any\nwithdrawals are improper, it is quite as bad as if all of the sidechain\nfunds were withdrawn improperly -- this is because the sidechain would\ninstantly have a bunch of problems, including that it would be\nsomething-like 'fractional reserve' which would lead to an immediate\nbank run of withdrawals [none of which could have any real expectation\nof success, in my view]).\n\nIn practice, a concern of mine is that people *would* try to turn a\nsidechain-theft even into some kind of grand UASF-style campaign. I\nwould prefer for people not to do this. Then again, I do not hold this\npreference unconditionally -- I see it as comparable to Bitcoin's\ncommitment to \"the code is the spec\". Which is to say that this\ncommitment is overwhelmingly held, but not dogmatically as in\nexceptional cases such as theValue overflow incident [1].\n\nI think that in such ambiguous cases, we must rely on [a] the miner's\ndesire to maximize the purchasing power of each Bitcoin, and [b] the\ntechnical wisdom of Bitcoin's future leaders in helping miners to\nachieve this goal.\n\n[1] https://en.bitcoin.it/wiki/Value_overflow_incident\n\n\n> To be fully secure, it seems like 100% of all nodes should also have a\n> fullnode for the drivechain as well...\n\nPerhaps, but this is exactly what I am trying to avoid. The design goal,\nin some sense, is to have \"half security\", ie <100%. This is because the\nonly way to achieve \"full\" 100% security is with full enforcement of all\nrules. Full enforcement of the rules, in turn, means either that we are\nexactly where we are right now (where we only add compatible rules, aka\nthe traditional \"soft fork\") or we are [also] exactly where we are right\nnow (in that if we add an incompatible rule, it results in a \"hard\nfork\"). I would like to build something new, which trades off on the\nqualities of each, and therefore lies (intentionally) somewhere in between.\n\n\n> This is one of the reasons I don't advocate sidechains/drivechains as\n> a scaling solution, it looks like it would have to the same outcome as\n> a blocksize increase on the mainchain, but with more complexity.\n\nKeep in mind that, if some people leave the small chain (what you might\ncall the \"Core\" chain, although some disagree with summarizing it this\nway) for some other chain, it does free up more space on this chain.\n\nI'm not really sure the extent to which that \"counts\" as increasing\ncapacity.\n\nAlso, I agree that sc/dc do not help with \"scalability\", if that problem\nis defined as \"better technology\" or as \"how to do more with less\".\n\nActually my full view is a little nuanced and it is here:\nhttp://www.drivechain.info/faq/index.html#can-sidechains-really-help-with-scaling\n\n\n> Thanks for all your work so far Paul.\n\nYou're welcome!\n\nPaul"
            }
        ],
        "thread_summary": {
            "title": "Drivechain RfD -- Follow Up",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Hampus Sj\u00f6berg",
                "Tao Effect",
                "Paul Sztorc"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 55485
        }
    },
    {
        "title": "[bitcoin-dev] Fwd: [Lightning-dev] Lightning Developers Biweekly Meeting Announce",
        "thread_messages": [
            {
                "author": "Bryan Bishop",
                "date": "2017-07-13T01:38:24",
                "message_text_only": "---------- Forwarded message ----------\nFrom: Rusty Russell <rusty at blockstream.com>\nDate: Wed, Jul 12, 2017 at 6:27 PM\nSubject: [Lightning-dev] Lightning Developers Biweekly Meeting Announce\nTo: lightning-dev at lists.linuxfoundation.org\n\n\nHi all!\n\n        Every two weeks we've been running an informal Google Hangout\nfor implementers of the Lightning spec; as the spec is starting to\nfreeze, we've decided to formalize it a bit which means opening access\nto a wider audience.\n\n        The call is at 20:00 UTC every two weeks on Monday: next call is\non the 24th July.  We'll be using #lightning-dev on freenode's IRC\nservers to communicate as well: if you're working on the Lightning\nprotocol and want to attend, please send me a ping and I'll add you to\nthe invite.\n\n        I'll produce an agenda (basically a list of outstanding PRs on\ngithub) and minutes each week: I'll post the latter to the ML here.\nThe last one can be found:\n\n        https://docs.google.com/document/d/1EbMxe_QZhpHo67eeiYHbJ-BvNKU1WhFd5WhJFeD9-DI/edit?usp=sharing\n\n        The routine with the spec itself is that from now on all\nnon-spelling/typo changes will require a vote with no objections from\ncall participants, or any devs unable to make it can veto or defer by\nemailing me in writing before the meeting.\n\nCheers!\nRusty.\n_______________________________________________\nLightning-dev mailing list\nLightning-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n\n\n-- \n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Lightning Developers Biweekly Meeting Announce",
            "categories": [
                "bitcoin-dev",
                "Lightning-dev"
            ],
            "authors": [
                "Bryan Bishop"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1542
        }
    },
    {
        "title": "[bitcoin-dev] A BIP proposal for conveniently referring to confirmed transactions",
        "thread_messages": [
            {
                "author": "Clark Moody",
                "date": "2017-07-14T18:43:37",
                "message_text_only": "(copying from GitHub per jonasschnelli's request)\n\nI can understand the desire to keep all reference strings to the nice\n14-character version by keeping the data payload to 40 bits, but it\nseems to place artificial limitations on the format (year 2048 & 8191\ntransactions). I also understand that this might be addressed with\nVersion 1 encoding. But current blocks are not that far from having\n8191 transactions.\n\nYou could go with a variable-length encoding similar to Bitcoin's\nvariable ints and gain the benefit of having a format that will work\nfor very large blocks and the very far future.\n\nAlso, the Bech32 reference libraries allow encoding from byte arrays\ninto the base-5 arrays native to Bech32. It seems like bit-packing to\nthese 40 bits might be overkill. As an alternative you could have one\nbit-packed byte to start:\n\n# First two bits are the protocol version, supporting values 0-3\nV = ((protocol version) & 0x03) << 6\n# Next two bits are magic for the blockchain\n# 0x00 = Bitcoin\n# 0x01 = Testnet3\n# 0x02 = Byte1 is another coin's magic code (gives 256 options)\n# 0x03 = Byte1-2 is treated as the coin magic code (gives 65280 more options)\nM = (magic & 0x03) << 4\n# Next two bits are the byte length of the block reference\nB = ((byte length of block reference) & 0x03) << 2\n# Final two bits are the byte length of the transaction index\nT = ((byte length of transaction index) & 0x03)\n# Assemble into the first byte\nByte0 = V | M | B | T\n\nThis gives you up to 3 bytes for each block and transaction reference,\nwhich is 16.7 M blocks, or year 2336, and 16.7 M transaction slots.\n\nData part: [Byte0][optional magic bytes 1-2][block reference bytes][tx\nreference bytes]\n\nSo the shortest data part would have 3 bytes in it, with the reference\nversion 0 genesis coinbase transaction having data part 0x050000.\n\nI know this is a departure from your vision, but it would be much more\nflexible for the long term.\n\n\nClark"
            },
            {
                "author": "\u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432",
                "date": "2017-07-15T05:00:18",
                "message_text_only": "Hello Clark Moody,\nThank you for your review of our proposal.\nFor reference please see the pull request: https://github.com/bitcoin/bips/pull/555 and the proposed specification: https://github.com/veleslavs/bips/blob/Bech32_Encoded_TxRef/bip-XXXX-Bech32_Encoded_Transaction_Position_References.mediawiki. (I will inform the mailing if a BIP number is assigned and these become obsolete).\nOn variable length encodings:\nWe considered in-depth various variable length encodings; and found that for such short data-lengths they all came with a too-high overheard: especially when you design them to work correctly with 5-bit chunks. We will update the rational section of the BIP to include this comment.\nHence, we have proposed the concept of \"Display Formats\". Display Formats are individually tailored to a particular purpose and thus can be optimised to a much greater extent.\nIn the case there is a Hard-Fork that extends Bitcoin's Block Transaction Capacity over the 8191 of the provided display format, we will simply define a \"Bitcoin Display Format 1\". Considering the considerable disruption a Hard Fork causes; the creation of a secondary Display Format should not be of significant concern.\nIn the case there is a Drive-Chain style extension or other indirect extension to Bitcoin's transactional capacity; it makes no sense to try and define for an undefined format now. We will simply use a new Magic Value and create a tailored Display Format for the new system.\nIn the case that it is nearing Year 2048, I think that we will be in a far-better position to define a new format that suits the needs of the Bitcoin users than now.\nMany thanks for your careful review, it is much appreciated,\n\u0421 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c\u0438 \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f\u043c\u0438,\n\u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432\n-------- Original Message --------\nSubject: Re: [bitcoin-dev] A BIP proposal for conveniently referring to confirmed transactions\nLocal Time: July 15, 2017 1:43 AM\nUTC Time: July 14, 2017 6:43 PM\nFrom: bitcoin-dev at lists.linuxfoundation.org\nTo: bitcoin-dev at lists.linuxfoundation.org\n(copying from GitHub per jonasschnelli\"s request)\nI can understand the desire to keep all reference strings to the nice\n14-character version by keeping the data payload to 40 bits, but it\nseems to place artificial limitations on the format (year 2048 & 8191\ntransactions). I also understand that this might be addressed with\nVersion 1 encoding. But current blocks are not that far from having\n8191 transactions.\nYou could go with a variable-length encoding similar to Bitcoin\"s\nvariable ints and gain the benefit of having a format that will work\nfor very large blocks and the very far future.\nAlso, the Bech32 reference libraries allow encoding from byte arrays\ninto the base-5 arrays native to Bech32. It seems like bit-packing to\nthese 40 bits might be overkill. As an alternative you could have one\nbit-packed byte to start:\n# First two bits are the protocol version, supporting values 0-3\nV = ((protocol version) & 0x03) << 6\n# Next two bits are magic for the blockchain\n# 0x00 = Bitcoin\n# 0x01 = Testnet3\n# 0x02 = Byte1 is another coin\"s magic code (gives 256 options)\n# 0x03 = Byte1-2 is treated as the coin magic code (gives 65280 more options)\nM = (magic & 0x03) << 4\n# Next two bits are the byte length of the block reference\nB = ((byte length of block reference) & 0x03) << 2\n# Final two bits are the byte length of the transaction index\nT = ((byte length of transaction index) & 0x03)\n# Assemble into the first byte\nByte0 = V | M | B | T\nThis gives you up to 3 bytes for each block and transaction reference,\nwhich is 16.7 M blocks, or year 2336, and 16.7 M transaction slots.\nData part: [Byte0][optional magic bytes 1-2][block reference bytes][tx\nreference bytes]\nSo the shortest data part would have 3 bytes in it, with the reference\nversion 0 genesis coinbase transaction having data part 0x050000.\nI know this is a departure from your vision, but it would be much more\nflexible for the long term.\nClark\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170715/2f243c69/attachment-0001.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2017-07-17T13:40:29",
                "message_text_only": "On Friday, 14 July 2017 20:43:37 CEST Clark Moody via bitcoin-dev wrote:\n> I can understand the desire to keep all reference strings to the nice\n> 14-character version by keeping the data payload to 40 bits\n\nI\u2019m not so clear on this, to be honest.\n\nWhat is the point of having a user-readable tx-reference?\n\nIn the actual blockchain you will still be using txid, and if you want to \nchange that then a less readable but more compact format is useful because \nwe want to optimize for space, not for human comprehention.\n\nAnother usecase I can come up with is you wanting to spend a specific output, \nor you reporting a specific tx as proof to a merchant (or tax office).\n\nFor any such usecases you sill need to actually provide a proof of holding \nthe private keys and using a human-readable format just doesn\u2019t seem to make \nmuch sense because a cryptographic proof of ownership is not going to be \nreadable however hard you try.\n\nApologies for missing the point,\ncan you list one or two usecases that you can see this being used for?\n-- \nTom Zander\nBlog: https://zander.github.io\nVlog: https://vimeo.com/channels/tomscryptochannel"
            }
        ],
        "thread_summary": {
            "title": "A BIP proposal for conveniently referring to confirmed transactions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Clark Moody",
                "Tom Zander",
                "\u0412\u0435\u043b\u0435\u0441\u043b\u0430\u0432"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 7366
        }
    },
    {
        "title": "[bitcoin-dev] BIP proposal - multi-account key derivation hierarchy for multisig wallets",
        "thread_messages": [
            {
                "author": "Simone Bronzini",
                "date": "2017-07-21T12:39:22",
                "message_text_only": "Maybe this has already been discussed, but I have not found anything online.\n\nTo the best of my knowledge, the only BIP which specifies a HD structure\nfor multisig wallets is BIP45. Unfortunately, when used in a\nmulti-account fashion, BIP45 gets very tricky very fast. In fact, one\nhas to either use a new master for every multisig account (hence having\nto backup many master private keys) or use the same master for many\nmultisig accounts, resulting in deterministic but complex and\nundesirable key reuse.\nI would like to propose a new structure for multi-account multisig\nwallets. This structure follows the derivation scheme of other proposals\n(in particular BIP44 and BIP49) but adds a level to take into account\nmultisig accounts separation. In particular, the structure should be as\nfollows:\n\nm/purpose'/coin_type'/account'/cosigner_index/change/address_index\n\nIn this case, a user can create many multisig accounts (each one will be\na different account number) and give his/her account's public derivation\nto the cosigners. From this point on, the creation of a multisig P2SH\naddress will follow the same procedure as described in BIP45, with each\ncosigner selecting his branch from the other cosigners' trees.\n\nWould this proposal be acceptable as a BIP?\n\nSimone Bronzini\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xB2E60C73.asc\nType: application/pgp-keys\nSize: 15541 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/1d06fc55/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 898 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/1d06fc55/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal - multi-account key derivation hierarchy for multisig wallets",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Simone Bronzini"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1836
        }
    },
    {
        "title": "[bitcoin-dev] UTXO growth scaling solution proposal",
        "thread_messages": [
            {
                "author": "Major Kusanagi",
                "date": "2017-07-21T19:28:57",
                "message_text_only": "Hi all,\n\nI have a scaling solution idea that I would be interested in getting some\nfeedback on. I\u2019m new to the mailing list and have not been in the Bitcoin\nspace as long as some have been, so I don\u2019t know if anyone has thought of\nthis idea.\n\nArguably the biggest scaling problem for Bitcoin is the unbounded UTXO\ngrowth. Current scaling solutions like Segregated Witness, Lighting\nNetwork, and larger blocks does not address this issue. As more and more\nblocks are added to the block chain the size of the UTXO set that miners\nhave to maintain continues to grow. This is the case even if the block size\nwere to remain at 1 megabyte. There is no way out of solving this\nfundamental scaling problem other then to limit the maximum size of the\nUTXO set.\n\nThe following soft fork solution is proposed. Any UTXO that is not spent\nwithin a set number of blocks is considered invalid. What this means for\nminers and nodes in the Bitcoin network is that they only have to ever\nstore that set number of blocks. In others words the block chain will never\nbe larger then the set number of blocks and the size of the block chain is\ncapped.\n\nBut what this means for users is that bitcoins that have not been spent for\na long time are \u201clost\u201d forever. This proposed solution is likely a\ndifficult thing for Bitcoin users to accept. What Bitcoin users will\nexperience is that all of a sudden their bitcoins are spendable one moment\nand the next moment they are not. The experience that they get is that all\nof a sudden their old bitcoins are gone forever.\n\nThe solution can be improved by adding this new mechanism to Bitcoin, that\nI will call luster. UTXO\u2019s that are less then X blocks old has not lost any\nluster and have a luster value of 1. As UTXO\u2019s get older, the luster value\nwill continuously decrease until the UTXO\u2019s become Z blocks old (where Z >\nX), and has lost all it\u2019s luster and have a luster value of 0. UTXO\u2019s that\nare in between X and Z blocks old have a luster value between 0 and 1. The\nluster value is then used to compute the amount of bitcoins that must be\nburned in order for a transaction with that UTXO to be included in a block.\nSo for example, a UTXO with a luster value of 0.5 must burn at least 50\npercent of its bitcoin value, a UTXO with a luster value of 0.25 must burn\nat least 75 percent of its bitcoin value, and a UTXO with a luster value of\n0 must burn 100 percent of its bitcoin value. Thus the coins/UTXOs that\nhave a luster value of 0 means it has no monetary value, and it would be\nsafe for bitcoins nodes to drop those UTXOs from the set they maintain.\n\nThe idea is that coins that are continuously being used in Bitcoin economy\nwill never lose it\u2019s luster. But coins that are old and not circulating\nwill start to lose its luster up until all luster is lost and they become\nvalueless. Or they reenter the economy and regains all its luster.\n\nBut at what point should coins start losing their luster? A goal would be\nthat we want to minimize the scenarios of when coins start losing their\nluster. One reasonable answer is that coins should only starting losing its\nluster after the lifespan of the average human. The idea being that a\nperson will eventually have to spend all his coins before he dies,\notherwise it will get lost anyways (assuming that only the dying person has\nthe ability to spend those coins). Otherwise there are few cases where a\nperson would never spend their bitcoins in there human life time. One\nexample is in the case of inheritance where a dying person does not want to\nspend his remaining coins and have another person take them over. But with\nthis propose scaling solution, coins can be stilled inherited, but it would\nhave to be an on-chain inheritance. The longest lifespan of a human\ncurrently is about 120 years old. So a blockchain that stores the last 150\nyears of history seems like one reasonable option.\n\nThen the question of how large blocks should be is simply a matter of what\nis the disk size requirement for a full node. For simplicity, assuming that\na block is created every 10 minute, the blockchain size in terabyte can be\nexpress as the following.\nblockSize MB * 6 * 24 * 365 * years /1000000 = blockchainSize TB\n\nExample values:\nblockSize = 1MB, years = 150 -> blockchainSize = 7.884 TB\nblockSize = 2MB, years = 150 -> blockchainSize = 15.768 TB\n\nSo if we don\u2019t want the block chain to be bigger then 8 TB, then we should\nhave a block size of 1 MB. If we don\u2019t want the block chain to be bigger\nthen 16 TB, then we should have a block size of 2 MB and so on. The idea is\nthat base on how cheap disk space gets, we can adjust the target max block\nchain size and the block size accordingly.\n\nI believe that this proposal is a good solution to the UTXO growth problem.\nThe proposal being a soft fork is a big plus. It also keeps the block chain\nsize finite even if given a infinite amount of time. But there are other\nthings to considered, like how best should wallet software handle this? How\ncan this work with sidechains? More thought would need to be put into this.\nBut the fact is that if we want to make bitcoins last forever, we have the\naccept unbounded UTXO growth, which is unscalable. So the only solution is\nto limit UTXO growth, meaning bitcoins cannot last forever. This proposed\nsolution however does not prevent Bitcoin from lasting forever.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/e81b95b7/attachment-0001.html>"
            },
            {
                "author": "Jeremy",
                "date": "2017-07-21T19:52:45",
                "message_text_only": "Hi Major,\n\nI think that you'll enjoy Peter Todd's blogpost on TXO commitments[1]. It\nhas a better scalability improvement with fewer negative consequence.\n\nBest,\n\nJeremy\n\n\n\n[1] https://petertodd.org/2016/delayed-txo-commitments\n\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\nOn Fri, Jul 21, 2017 at 3:28 PM, Major Kusanagi via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> I have a scaling solution idea that I would be interested in getting some\n> feedback on. I\u2019m new to the mailing list and have not been in the Bitcoin\n> space as long as some have been, so I don\u2019t know if anyone has thought of\n> this idea.\n>\n> Arguably the biggest scaling problem for Bitcoin is the unbounded UTXO\n> growth. Current scaling solutions like Segregated Witness, Lighting\n> Network, and larger blocks does not address this issue. As more and more\n> blocks are added to the block chain the size of the UTXO set that miners\n> have to maintain continues to grow. This is the case even if the block size\n> were to remain at 1 megabyte. There is no way out of solving this\n> fundamental scaling problem other then to limit the maximum size of the\n> UTXO set.\n>\n> The following soft fork solution is proposed. Any UTXO that is not spent\n> within a set number of blocks is considered invalid. What this means for\n> miners and nodes in the Bitcoin network is that they only have to ever\n> store that set number of blocks. In others words the block chain will never\n> be larger then the set number of blocks and the size of the block chain is\n> capped.\n>\n> But what this means for users is that bitcoins that have not been spent\n> for a long time are \u201clost\u201d forever. This proposed solution is likely a\n> difficult thing for Bitcoin users to accept. What Bitcoin users will\n> experience is that all of a sudden their bitcoins are spendable one moment\n> and the next moment they are not. The experience that they get is that all\n> of a sudden their old bitcoins are gone forever.\n>\n> The solution can be improved by adding this new mechanism to Bitcoin, that\n> I will call luster. UTXO\u2019s that are less then X blocks old has not lost any\n> luster and have a luster value of 1. As UTXO\u2019s get older, the luster value\n> will continuously decrease until the UTXO\u2019s become Z blocks old (where Z >\n> X), and has lost all it\u2019s luster and have a luster value of 0. UTXO\u2019s that\n> are in between X and Z blocks old have a luster value between 0 and 1. The\n> luster value is then used to compute the amount of bitcoins that must be\n> burned in order for a transaction with that UTXO to be included in a block.\n> So for example, a UTXO with a luster value of 0.5 must burn at least 50\n> percent of its bitcoin value, a UTXO with a luster value of 0.25 must burn\n> at least 75 percent of its bitcoin value, and a UTXO with a luster value of\n> 0 must burn 100 percent of its bitcoin value. Thus the coins/UTXOs that\n> have a luster value of 0 means it has no monetary value, and it would be\n> safe for bitcoins nodes to drop those UTXOs from the set they maintain.\n>\n> The idea is that coins that are continuously being used in Bitcoin economy\n> will never lose it\u2019s luster. But coins that are old and not circulating\n> will start to lose its luster up until all luster is lost and they become\n> valueless. Or they reenter the economy and regains all its luster.\n>\n> But at what point should coins start losing their luster? A goal would be\n> that we want to minimize the scenarios of when coins start losing their\n> luster. One reasonable answer is that coins should only starting losing its\n> luster after the lifespan of the average human. The idea being that a\n> person will eventually have to spend all his coins before he dies,\n> otherwise it will get lost anyways (assuming that only the dying person has\n> the ability to spend those coins). Otherwise there are few cases where a\n> person would never spend their bitcoins in there human life time. One\n> example is in the case of inheritance where a dying person does not want to\n> spend his remaining coins and have another person take them over. But with\n> this propose scaling solution, coins can be stilled inherited, but it would\n> have to be an on-chain inheritance. The longest lifespan of a human\n> currently is about 120 years old. So a blockchain that stores the last 150\n> years of history seems like one reasonable option.\n>\n> Then the question of how large blocks should be is simply a matter of what\n> is the disk size requirement for a full node. For simplicity, assuming that\n> a block is created every 10 minute, the blockchain size in terabyte can be\n> express as the following.\n> blockSize MB * 6 * 24 * 365 * years /1000000 = blockchainSize TB\n>\n> Example values:\n> blockSize = 1MB, years = 150 -> blockchainSize = 7.884 TB\n> blockSize = 2MB, years = 150 -> blockchainSize = 15.768 TB\n>\n> So if we don\u2019t want the block chain to be bigger then 8 TB, then we should\n> have a block size of 1 MB. If we don\u2019t want the block chain to be bigger\n> then 16 TB, then we should have a block size of 2 MB and so on. The idea is\n> that base on how cheap disk space gets, we can adjust the target max block\n> chain size and the block size accordingly.\n>\n> I believe that this proposal is a good solution to the UTXO growth\n> problem. The proposal being a soft fork is a big plus. It also keeps the\n> block chain size finite even if given a infinite amount of time. But there\n> are other things to considered, like how best should wallet software handle\n> this? How can this work with sidechains? More thought would need to be put\n> into this. But the fact is that if we want to make bitcoins last forever,\n> we have the accept unbounded UTXO growth, which is unscalable. So the only\n> solution is to limit UTXO growth, meaning bitcoins cannot last forever.\n> This proposed solution however does not prevent Bitcoin from lasting\n> forever.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/06525326/attachment-0001.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2017-07-21T19:54:26",
                "message_text_only": "Sounds like demurrage to me, which has been implemented in other\ncryptocurrencies such as Freicoin - http://freico.in/\n\nWhile it's an interesting to apply this line of thinking from a scaling\nperspective, I suspect most would find it untenable from a monetary policy\nperspective.\n\nYou have touched on a scaling issue, the cost of node operation, that I\nthink is really the root cause of a lot of the debate. Thus even if your\nproposal was implemented, we'd still have to solve the problem of finding a\nconsensus for CONOP.\n\nI think you may have misapplied your logic to the total size of the\nblockchain, however. Are you suggesting that pruning of the old UTXOs would\nalso enable pruning of old blocks from all nodes? Those things aren't\nreally related, plus someone would still have to keep old blocks around in\norder to facilitate new nodes syncing from genesis.\n\n- Jameson\n\nOn Fri, Jul 21, 2017 at 3:28 PM, Major Kusanagi via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all,\n>\n> I have a scaling solution idea that I would be interested in getting some\n> feedback on. I\u2019m new to the mailing list and have not been in the Bitcoin\n> space as long as some have been, so I don\u2019t know if anyone has thought of\n> this idea.\n>\n> Arguably the biggest scaling problem for Bitcoin is the unbounded UTXO\n> growth. Current scaling solutions like Segregated Witness, Lighting\n> Network, and larger blocks does not address this issue. As more and more\n> blocks are added to the block chain the size of the UTXO set that miners\n> have to maintain continues to grow. This is the case even if the block size\n> were to remain at 1 megabyte. There is no way out of solving this\n> fundamental scaling problem other then to limit the maximum size of the\n> UTXO set.\n>\n> The following soft fork solution is proposed. Any UTXO that is not spent\n> within a set number of blocks is considered invalid. What this means for\n> miners and nodes in the Bitcoin network is that they only have to ever\n> store that set number of blocks. In others words the block chain will never\n> be larger then the set number of blocks and the size of the block chain is\n> capped.\n>\n> But what this means for users is that bitcoins that have not been spent\n> for a long time are \u201clost\u201d forever. This proposed solution is likely a\n> difficult thing for Bitcoin users to accept. What Bitcoin users will\n> experience is that all of a sudden their bitcoins are spendable one moment\n> and the next moment they are not. The experience that they get is that all\n> of a sudden their old bitcoins are gone forever.\n>\n> The solution can be improved by adding this new mechanism to Bitcoin, that\n> I will call luster. UTXO\u2019s that are less then X blocks old has not lost any\n> luster and have a luster value of 1. As UTXO\u2019s get older, the luster value\n> will continuously decrease until the UTXO\u2019s become Z blocks old (where Z >\n> X), and has lost all it\u2019s luster and have a luster value of 0. UTXO\u2019s that\n> are in between X and Z blocks old have a luster value between 0 and 1. The\n> luster value is then used to compute the amount of bitcoins that must be\n> burned in order for a transaction with that UTXO to be included in a block.\n> So for example, a UTXO with a luster value of 0.5 must burn at least 50\n> percent of its bitcoin value, a UTXO with a luster value of 0.25 must burn\n> at least 75 percent of its bitcoin value, and a UTXO with a luster value of\n> 0 must burn 100 percent of its bitcoin value. Thus the coins/UTXOs that\n> have a luster value of 0 means it has no monetary value, and it would be\n> safe for bitcoins nodes to drop those UTXOs from the set they maintain.\n>\n> The idea is that coins that are continuously being used in Bitcoin economy\n> will never lose it\u2019s luster. But coins that are old and not circulating\n> will start to lose its luster up until all luster is lost and they become\n> valueless. Or they reenter the economy and regains all its luster.\n>\n> But at what point should coins start losing their luster? A goal would be\n> that we want to minimize the scenarios of when coins start losing their\n> luster. One reasonable answer is that coins should only starting losing its\n> luster after the lifespan of the average human. The idea being that a\n> person will eventually have to spend all his coins before he dies,\n> otherwise it will get lost anyways (assuming that only the dying person has\n> the ability to spend those coins). Otherwise there are few cases where a\n> person would never spend their bitcoins in there human life time. One\n> example is in the case of inheritance where a dying person does not want to\n> spend his remaining coins and have another person take them over. But with\n> this propose scaling solution, coins can be stilled inherited, but it would\n> have to be an on-chain inheritance. The longest lifespan of a human\n> currently is about 120 years old. So a blockchain that stores the last 150\n> years of history seems like one reasonable option.\n>\n> Then the question of how large blocks should be is simply a matter of what\n> is the disk size requirement for a full node. For simplicity, assuming that\n> a block is created every 10 minute, the blockchain size in terabyte can be\n> express as the following.\n> blockSize MB * 6 * 24 * 365 * years /1000000 = blockchainSize TB\n>\n> Example values:\n> blockSize = 1MB, years = 150 -> blockchainSize = 7.884 TB\n> blockSize = 2MB, years = 150 -> blockchainSize = 15.768 TB\n>\n> So if we don\u2019t want the block chain to be bigger then 8 TB, then we should\n> have a block size of 1 MB. If we don\u2019t want the block chain to be bigger\n> then 16 TB, then we should have a block size of 2 MB and so on. The idea is\n> that base on how cheap disk space gets, we can adjust the target max block\n> chain size and the block size accordingly.\n>\n> I believe that this proposal is a good solution to the UTXO growth\n> problem. The proposal being a soft fork is a big plus. It also keeps the\n> block chain size finite even if given a infinite amount of time. But there\n> are other things to considered, like how best should wallet software handle\n> this? How can this work with sidechains? More thought would need to be put\n> into this. But the fact is that if we want to make bitcoins last forever,\n> we have the accept unbounded UTXO growth, which is unscalable. So the only\n> solution is to limit UTXO growth, meaning bitcoins cannot last forever.\n> This proposed solution however does not prevent Bitcoin from lasting\n> forever.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/6079164c/attachment.html>"
            },
            {
                "author": "Major Kusanagi",
                "date": "2017-07-22T06:43:45",
                "message_text_only": "On Fri, Jul 21, 2017 at 12:54 PM, Jameson Lopp <jameson.lopp at gmail.com>\nwrote:\n\n> Sounds like demurrage to me, which has been implemented in other\n> cryptocurrencies such as Freicoin - http://freico.in/\n>\n\nI don\u2019t think it\u2019s like demurrage in Freicoin at all. The purpose of the\nproposal is to help Bitcoin scale, which is not the purpose of Freicoin\u2019s\ndemurrage fee. Demurrage fee is not optional in Freicoin, and with this\nproposal most users will likely never have to burn any coins at all given\nhow long it would take for bitcoins to lose their luster.\n\n\n\n> While it's an interesting to apply this line of thinking from a scaling\n> perspective, I suspect most would find it untenable from a monetary policy\n> perspective.\n>\n> I don\u2019t think most would find it untenable, because the proposal in\npractice would not affect 99.9% of users because it is unlikely that coins\nwill ever get to the point where they start losing their luster.\n\n\n\n> You have touched on a scaling issue, the cost of node operation, that I\n> think is really the root cause of a lot of the debate. Thus even if your\n> proposal was implemented, we'd still have to solve the problem of finding a\n> consensus for CONOP.\n>\n> I believe with this proposal, finding a consensus for CONOP becomes a lot\nless controversial. Because by putting a cap on the block chain size and\nUTXO set, we know exactly how much disk space and RAM a node needs to run a\nfull node.\n\n\n\n> I think you may have misapplied your logic to the total size of the\n> blockchain, however. Are you suggesting that pruning of the old UTXOs would\n> also enable pruning of old blocks from all nodes? Those things aren't\n> really related, plus someone would still have to keep old blocks around in\n> order to facilitate new nodes syncing from genesis.\n>\n> Sorry, let me clarify. I forgot to address the issue of how new nodes sync\nthe block chain. I mean to say that we should prune the old UTXOs along\nwith the old blocks. This would mean that we would have to create a\ncheckpoint every ~150 fifty years (base on my example) and node would drop\nblocks older then those checkpoints.  This would mean new nodes would start\nsyncing from the checkpoint not the genesis block.\n\n\n\n> - Jameson\n>\n> On Fri, Jul 21, 2017 at 3:28 PM, Major Kusanagi via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi all,\n>>\n>> I have a scaling solution idea that I would be interested in getting some\n>> feedback on. I\u2019m new to the mailing list and have not been in the Bitcoin\n>> space as long as some have been, so I don\u2019t know if anyone has thought of\n>> this idea.\n>>\n>> Arguably the biggest scaling problem for Bitcoin is the unbounded UTXO\n>> growth. Current scaling solutions like Segregated Witness, Lighting\n>> Network, and larger blocks does not address this issue. As more and more\n>> blocks are added to the block chain the size of the UTXO set that miners\n>> have to maintain continues to grow. This is the case even if the block size\n>> were to remain at 1 megabyte. There is no way out of solving this\n>> fundamental scaling problem other then to limit the maximum size of the\n>> UTXO set.\n>>\n>> The following soft fork solution is proposed. Any UTXO that is not spent\n>> within a set number of blocks is considered invalid. What this means for\n>> miners and nodes in the Bitcoin network is that they only have to ever\n>> store that set number of blocks. In others words the block chain will never\n>> be larger then the set number of blocks and the size of the block chain is\n>> capped.\n>>\n>> But what this means for users is that bitcoins that have not been spent\n>> for a long time are \u201clost\u201d forever. This proposed solution is likely a\n>> difficult thing for Bitcoin users to accept. What Bitcoin users will\n>> experience is that all of a sudden their bitcoins are spendable one moment\n>> and the next moment they are not. The experience that they get is that all\n>> of a sudden their old bitcoins are gone forever.\n>>\n>> The solution can be improved by adding this new mechanism to Bitcoin,\n>> that I will call luster. UTXO\u2019s that are less then X blocks old has not\n>> lost any luster and have a luster value of 1. As UTXO\u2019s get older, the\n>> luster value will continuously decrease until the UTXO\u2019s become Z blocks\n>> old (where Z > X), and has lost all it\u2019s luster and have a luster value of\n>> 0. UTXO\u2019s that are in between X and Z blocks old have a luster value\n>> between 0 and 1. The luster value is then used to compute the amount of\n>> bitcoins that must be burned in order for a transaction with that UTXO to\n>> be included in a block. So for example, a UTXO with a luster value of 0.5\n>> must burn at least 50 percent of its bitcoin value, a UTXO with a luster\n>> value of 0.25 must burn at least 75 percent of its bitcoin value, and a\n>> UTXO with a luster value of 0 must burn 100 percent of its bitcoin value.\n>> Thus the coins/UTXOs that have a luster value of 0 means it has no monetary\n>> value, and it would be safe for bitcoins nodes to drop those UTXOs from the\n>> set they maintain.\n>>\n>> The idea is that coins that are continuously being used in Bitcoin\n>> economy will never lose it\u2019s luster. But coins that are old and not\n>> circulating will start to lose its luster up until all luster is lost and\n>> they become valueless. Or they reenter the economy and regains all its\n>> luster.\n>>\n>> But at what point should coins start losing their luster? A goal would be\n>> that we want to minimize the scenarios of when coins start losing their\n>> luster. One reasonable answer is that coins should only starting losing its\n>> luster after the lifespan of the average human. The idea being that a\n>> person will eventually have to spend all his coins before he dies,\n>> otherwise it will get lost anyways (assuming that only the dying person has\n>> the ability to spend those coins). Otherwise there are few cases where a\n>> person would never spend their bitcoins in there human life time. One\n>> example is in the case of inheritance where a dying person does not want to\n>> spend his remaining coins and have another person take them over. But with\n>> this propose scaling solution, coins can be stilled inherited, but it would\n>> have to be an on-chain inheritance. The longest lifespan of a human\n>> currently is about 120 years old. So a blockchain that stores the last 150\n>> years of history seems like one reasonable option.\n>>\n>> Then the question of how large blocks should be is simply a matter of\n>> what is the disk size requirement for a full node. For simplicity, assuming\n>> that a block is created every 10 minute, the blockchain size in terabyte\n>> can be express as the following.\n>> blockSize MB * 6 * 24 * 365 * years /1000000 = blockchainSize TB\n>>\n>> Example values:\n>> blockSize = 1MB, years = 150 -> blockchainSize = 7.884 TB\n>> blockSize = 2MB, years = 150 -> blockchainSize = 15.768 TB\n>>\n>> So if we don\u2019t want the block chain to be bigger then 8 TB, then we\n>> should have a block size of 1 MB. If we don\u2019t want the block chain to be\n>> bigger then 16 TB, then we should have a block size of 2 MB and so on. The\n>> idea is that base on how cheap disk space gets, we can adjust the target\n>> max block chain size and the block size accordingly.\n>>\n>> I believe that this proposal is a good solution to the UTXO growth\n>> problem. The proposal being a soft fork is a big plus. It also keeps the\n>> block chain size finite even if given a infinite amount of time. But there\n>> are other things to considered, like how best should wallet software handle\n>> this? How can this work with sidechains? More thought would need to be put\n>> into this. But the fact is that if we want to make bitcoins last forever,\n>> we have the accept unbounded UTXO growth, which is unscalable. So the only\n>> solution is to limit UTXO growth, meaning bitcoins cannot last forever.\n>> This proposed solution however does not prevent Bitcoin from lasting\n>> forever.\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/0e3b9978/attachment-0001.html>"
            },
            {
                "author": "Lucas Clemente Vella",
                "date": "2017-07-21T19:59:42",
                "message_text_only": "2017-07-21 16:28 GMT-03:00 Major Kusanagi via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> [...] But the fact is that if we want to make bitcoins last forever, we\n> have the accept unbounded UTXO growth, which is unscalable. So the only\n> solution is to limit UTXO growth, meaning bitcoins cannot last forever.\n> This proposed solution however does not prevent Bitcoin from lasting\n> forever.\n>\n\nUnless there is a logical contradiction in this phrasing, the proposed\nsolution does not improves scalability:\n - \"Bitcoins lasting forever\" implies \"unscalable\";\n - \"not prevent Bitcoin from lasting forever\" implies \"Bitcoins lasting\nforever\";\n - Thus: \"not prevent Bitcoin from lasting forever\" implies \"unscalable\".\n\nIn practice, the only Bitcoin lost would be those whose owners forgot about\nor has lost the keys, because everyone with a significant amount of\nBitcoins would always shift them around before it loses any luster (I\nwouldn't bother to move my Bitcoins every 10 years). I don't know how to\nestimate the percentage of UTXO is actually lost/forgotten, but I have the\nopinion it isn't worth the hassle.\n\nAs a side note, your estimate talks about block size, which is determines\nblockchain size, which can be \"safely\" pruned (if you are not considering\nnew nodes might want to join the network, in case the full history is\nneeded to be stored somewhere). But UTXO size, albeit related to the full\nblockchain size, is the part that currently can not be safely pruned, so I\ndon't see the relevance of the analysis.\n\n-- \nLucas Clemente Vella\nlvella at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/5f4564df/attachment.html>"
            },
            {
                "author": "Moral Agent",
                "date": "2017-07-21T20:17:39",
                "message_text_only": "If we have a problem with a UTXO set that is too large, seems like maybe\nthe fair way to approach it is to enforce a limit on the growth of the UTXO\nset.\n\nMiners would eventually be forced to generate blocks that are UTXO neutral\nand would factor that into their algorithm for prioritizing transactions.\nUsers who wish to generate a lot of outputs would need to find a buddy with\nlots of inputs to consolidate and create a tumble-bit with them. A market\nwould spring up that would charge people for creating UTXOs and pay them\nfor disposing of UTXOs.\n\nOn Fri, Jul 21, 2017 at 3:59 PM, Lucas Clemente Vella via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> 2017-07-21 16:28 GMT-03:00 Major Kusanagi via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org>:\n>\n>> [...] But the fact is that if we want to make bitcoins last forever, we\n>> have the accept unbounded UTXO growth, which is unscalable. So the only\n>> solution is to limit UTXO growth, meaning bitcoins cannot last forever.\n>> This proposed solution however does not prevent Bitcoin from lasting\n>> forever.\n>>\n>\n> Unless there is a logical contradiction in this phrasing, the proposed\n> solution does not improves scalability:\n>  - \"Bitcoins lasting forever\" implies \"unscalable\";\n>  - \"not prevent Bitcoin from lasting forever\" implies \"Bitcoins lasting\n> forever\";\n>  - Thus: \"not prevent Bitcoin from lasting forever\" implies \"unscalable\".\n>\n> In practice, the only Bitcoin lost would be those whose owners forgot\n> about or has lost the keys, because everyone with a significant amount of\n> Bitcoins would always shift them around before it loses any luster (I\n> wouldn't bother to move my Bitcoins every 10 years). I don't know how to\n> estimate the percentage of UTXO is actually lost/forgotten, but I have the\n> opinion it isn't worth the hassle.\n>\n> As a side note, your estimate talks about block size, which is determines\n> blockchain size, which can be \"safely\" pruned (if you are not considering\n> new nodes might want to join the network, in case the full history is\n> needed to be stored somewhere). But UTXO size, albeit related to the full\n> blockchain size, is the part that currently can not be safely pruned, so I\n> don't see the relevance of the analysis.\n>\n> --\n> Lucas Clemente Vella\n> lvella at gmail.com\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/6e75b99b/attachment.html>"
            },
            {
                "author": "Major Kusanagi",
                "date": "2017-07-22T06:45:54",
                "message_text_only": "On Fri, Jul 21, 2017 at 12:59 PM, Lucas Clemente Vella <lvella at gmail.com>\nwrote:\n\n> 2017-07-21 16:28 GMT-03:00 Major Kusanagi via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org>:\n>\n>> [...] But the fact is that if we want to make bitcoins last forever, we\n>> have the accept unbounded UTXO growth, which is unscalable. So the only\n>> solution is to limit UTXO growth, meaning bitcoins cannot last forever.\n>> This proposed solution however does not prevent Bitcoin from lasting\n>> forever.\n>>\n>\n> Unless there is a logical contradiction in this phrasing, the proposed\n> solution does not improves scalability:\n>  - \"Bitcoins lasting forever\" implies \"unscalable\";\n>  - \"not prevent Bitcoin from lasting forever\" implies \"Bitcoins lasting\n> forever\";\n>  - Thus: \"not prevent Bitcoin from lasting forever\" implies \"unscalable\".\n>\n\nI made a distinction between lowercase bitcoin meaning the unit of account\nin uppercase Bitcoin, the system as a whole. The proposal would make\nbitcoins not last forever, which allows the Bitcoin system to scale better\nand have a better chance of lasting forever.\n\n\n\n> In practice, the only Bitcoin lost would be those whose owners forgot\n> about or has lost the keys, because everyone with a significant amount of\n> Bitcoins would always shift them around before it loses any luster (I\n> wouldn't bother to move my Bitcoins every 10 years). I don't know how to\n> estimate the percentage of UTXO is actually lost/forgotten, but I have the\n> opinion it isn't worth the hassle.\n>\n\nExactly. That\u2019s the whole idea. Why bother have nodes store UTXO\u2019s for lost\nbitcoins? This proposal would essentially sanitize the UTXO set that nodes\nkeep track of and clear up wasted space.\n\n\nAs a side note, your estimate talks about block size, which is determines\n> blockchain size, which can be \"safely\" pruned (if you are not considering\n> new nodes might want to join the network, in case the full history is\n> needed to be stored somewhere). But UTXO size, albeit related to the full\n> blockchain size, is the part that currently can not be safely pruned, so I\n> don't see the relevance of the analysis.\n>\n> I believe I\u2019ve address this with the checkpoint mechanism in my reply to\nJameson.\n\n\n\n> --\n> Lucas Clemente Vella\n> lvella at gmail.com\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170721/272df89a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "UTXO growth scaling solution proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy",
                "Lucas Clemente Vella",
                "Major Kusanagi",
                "Moral Agent",
                "Jameson Lopp"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 33946
        }
    },
    {
        "title": "[bitcoin-dev] Proposal: Demonstration of Phase in Full Network Upgrade Activated by Miners",
        "thread_messages": [
            {
                "author": "Zheming Lin",
                "date": "2017-07-22T03:58:21",
                "message_text_only": "I think we should not switch to Proof of Stake system.\n\nin Proof of Stake system, the one with more voting power tend to protect\ntheir investment and that will stop others from competing with them. they\nwill use the voting power to make entering barrier, limiting the\ncompetition is bad for bitcoin economy (I believe).\n\nMiners are not centralized, they just grow bigger and be industrialized,\nbut there's still a lot of competition. The competition is the main\nsecurity model of bitcoin system.\n\nWhen we are talking about \"security\" in bitcoin system, we are talking\nabout the probability that a transaction revert or change. We can not be\n100% sure under 3 confirmations, but in 6 or more confirmations, we think\nthe cash received is safe and can't be taken away. That's the security\nprovided by bitcoin system.\n\nHard fork is not dangerous, when hard fork happens, people can wait for a\nshort time (like maintenance of a POS/CreditCard system). When the chain\nwith most hashrate wins (with high enough probability), we can then safely\nassume that the longest chain can't be reverted.\n\n\nRegards,\nLIN Zheming\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170722/53d6b5eb/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Demonstration of Phase in Full Network Upgrade Activated by Miners",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Zheming Lin"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1291
        }
    },
    {
        "title": "[bitcoin-dev] Fwd: [Mimblewimble] proofs of position and UTXO set commitments",
        "thread_messages": [
            {
                "author": "Bryan Bishop",
                "date": "2017-07-27T18:56:43",
                "message_text_only": "---------- Forwarded message ----------\nFrom: Bram Cohen <bram at bittorrent.com>\nDate: Thu, Jul 27, 2017 at 1:21 PM\nSubject: Re: [Mimblewimble] Switch to Blake2\nTo: Ignotus Peverell <igno.peverell at protonmail.com>\nCc: Bryan Bishop <kanzure at gmail.com>\n\n\nI have quite a few thoughts about proofs of position. I gave a talk about\nit which hopefully gets the points across if you go through all the Q&A:\n\nhttps://www.youtube.com/watch?v=52FVkHlCh7Y\n\nOn Mon, Jul 24, 2017 at 12:12 PM, Ignotus Peverell <\nigno.peverell at protonmail.com> wrote:\n\n> Interesting, thanks for the link. Seems we arrived at similar conclusions\n> regarding the hash function, with similar frustrations with respect to\n> blake2b/2s.\n>\n> Funny that it's also for the same merkle set application. We ended up with\n> a Merkle Mountain Range [1] instead of a Patricia tree. The MMR is\n> append-only and makes pruning easy, which works well for MimbleWimble. You\n> can navigate down the MMR with just the position the element was inserted\n> at, so we just keep a simple index for that. Memory layout is great as a\n> lot of it is immutable and sit close together, although the current impl\n> doesn't leverage that too well yet. Wonder if Bram looked at MMRs? Patricia\n> trees may make more sense for Bitcoin though.\n>\n> Proof of positions are cool, might look at that some more in the near\n> future, when we're less busy implementing everything else ;-)\n>\n>\n> - Igno\n>\n> [1] https://github.com/ignopeverell/grin/blob/master/doc/merkle.md\n>\n> -------- Original Message --------\n> Subject: Re: [Mimblewimble] Switch to Blake2\n> Local Time: July 24, 2017 6:44 PM\n> UTC Time: July 24, 2017 6:44 PM\n> From: kanzure at gmail.com\n> To: Ignotus Peverell <igno.peverell at protonmail.com>, Bram Cohen <\n> bram at bittorrent.com>, Bryan Bishop <kanzure at gmail.com>\n>\n> On Fri, Jul 21, 2017 at 1:12 PM, Ignotus Peverell <\n> igno.peverell at protonmail.com> wrote:\n>\n>> So I'm considering a switch to the Blake2 [3] hash function.\n>>\n>\n> Bram recently made some comments about blake a few weeks ago:\n> http://diyhpl.us/wiki/transcripts/sf-bitcoin-meetup/2017-07-\n> 08-bram-cohen-merkle-sets/\n>\n> - Bryan\n> http://heybryan.org/\n> 1 512 203 0507 <(512)%20203-0507>\n>\n>\n>\n\n\n\n-- \n- Bryan\nhttp://heybryan.org/\n1 512 203 0507\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20170727/46a00235/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: proofs of position and UTXO set commitments",
            "categories": [
                "bitcoin-dev",
                "Mimblewimble"
            ],
            "authors": [
                "Bryan Bishop"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2462
        }
    }
]