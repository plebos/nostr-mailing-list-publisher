[
    {
        "title": "[Bitcoin-development] Bug in genbuild.sh ?",
        "thread_messages": [
            {
                "author": "Francis GASCHET",
                "date": "2014-11-03T09:16:23",
                "message_text_only": "Hello,\n\nI just compiled bitCoin core on Debian 7.\nI got an error message \"too many arguments\" when executing genuid.sh\nI fixed it as shown hereafter and it worked fine.\n\n\npcfg:~/bitcoinCore> diff -u shareOLD/genbuild.sh share/genbuild.sh\n--- shareOLD/genbuild.sh        2014-11-03 08:32:08.950708258 +0100\n+++ share/genbuild.sh   2014-11-03 08:38:44.626698114 +0100\n@@ -16,7 +16,7 @@\n  DESC=\"\"\n  SUFFIX=\"\"\n  LAST_COMMIT_DATE=\"\"\n-if [ -e \"$(which git 2>/dev/null)\" -a $(git rev-parse \n--is-inside-work-tree 2>/dev/null) = \"true\" ]; then\n+if [ -e \"$(which git 2>/dev/null)\" -a \"$(git rev-parse \n--is-inside-work-tree 2>/dev/null)\" = \"true\" ]; then\n      # clean 'dirty' status of touched files that haven't been modified\n      git diff >/dev/null 2>/dev/null\n\n\nBest regards,\n-- \nFrancis"
            },
            {
                "author": "Wladimir",
                "date": "2014-11-03T10:11:09",
                "message_text_only": "On Mon, Nov 3, 2014 at 10:16 AM, Francis GASCHET <fg at numlog.fr> wrote:\n> Hello,\n>\n> I just compiled bitCoin core on Debian 7.\n> I got an error message \"too many arguments\" when executing genuid.sh\n> I fixed it as shown hereafter and it worked fine.\n>\n>\n> pcfg:~/bitcoinCore> diff -u shareOLD/genbuild.sh share/genbuild.sh\n> --- shareOLD/genbuild.sh        2014-11-03 08:32:08.950708258 +0100\n> +++ share/genbuild.sh   2014-11-03 08:38:44.626698114 +0100\n> @@ -16,7 +16,7 @@\n>   DESC=\"\"\n>   SUFFIX=\"\"\n>   LAST_COMMIT_DATE=\"\"\n> -if [ -e \"$(which git 2>/dev/null)\" -a $(git rev-parse\n> --is-inside-work-tree 2>/dev/null) = \"true\" ]; then\n> +if [ -e \"$(which git 2>/dev/null)\" -a \"$(git rev-parse\n> --is-inside-work-tree 2>/dev/null)\" = \"true\" ]; then\n>       # clean 'dirty' status of touched files that haven't been modified\n>       git diff >/dev/null 2>/dev/null\n\nACK\n\nFYI there's an issue for this on github:\nhttps://github.com/bitcoin/bitcoin/pull/5141 , but Rebroad's solution\ncontains a new error. Will merge your patch.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Bug in genbuild.sh ?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Francis GASCHET",
                "Wladimir"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1821
        }
    },
    {
        "title": "[Bitcoin-development] side-chains & 2-way pegging (Re: is there a way to do bitcoin-staging?)",
        "thread_messages": [
            {
                "author": "Alex Mizrahi",
                "date": "2014-11-03T12:12:26",
                "message_text_only": "> For those following this thread, we have now written a paper\n> describing the side-chains, 2-way pegs and compact SPV proofs.\n> (With additional authors Andrew Poelstra & Andrew Miller).\n>\n> http://blockstream.com/sidechains.pdf\n\n\nHaven't seen any material discussion of this paper in this mailing list, so\nI'll start.\n(Otherwise, I've seen Peter Todd's reaction on reddit.)\n\nThis paper fails to demonstrate that sidechains are anything more than a\nwishful thinking.\nIt can be distilled down to this:\n\"We want such and such features, hence we'll use DMMS, the same thing\nBitcoin uses, thus it will be secure!\"\nUm, no.\nAlt-coins also use DMMS, but aren't as secure as Bitcoin.\n\nSo DMMS does not work by itself, it is a mechanism to secure a blockchain\nusing economic incentives.\nThe sidechains paper does not mention this, as far as I can tell.\n\nIn my opinion, this is not acceptable. If you're making a proposal, you\nneed to describe what conditions are required for it to work.\n\nAuthors are clearly aware of the problem and mention it in section 6\n\"Future directions\" 6.1. \"Hashpower attack resistance\".\nThe problem is they do not make it clear that the proposal just makes no\nsense until this is solved.\n\nIn the discussions on reddit I've noticed that pretty much everybody\nbelieves that release of sidechains paper implies that the proposal is\ncomplete and now we are just waiting the implementation.\n\nIt doesn't help that the paper itself tries to sweep the problem under the\nrug and has misleading statements.\nParticularly, I'm talking about section \"4.2. Fraudulent transfers\":\n\n\"Reorganisations of arbitrary depth are in principle possible, which could\nallow an attacker to\ncompletely transfer coins between sidechains before causing a\nreorganisation longer than the contest\nperiod on the sending chain to undo its half of the transfer. ... If the\nattacker is allowed to return the transferred coins to  the original\nchain, he would increase the number of coins in his possession at the\nexpense of other users of the sidechain.\nBefore discussing how to handle this, we observe that this risk can be made\narbitrarily small by\nsimply increasing the contest period for transfers.\"\n\nWow, really? Is this risk stochastic?\n\nThe first sentence implies that attacker is able to cause a reorganization\nof an arbitrary depth, but the rest of the section implies that\nreorganizations are a naturally occurring phenomenon.\n\nAll in all, I find this paper really disappointing. It's going to be\ninfluential (9 co-authors, many of which are regarded as Bitcoin core\ndevelopers, must be good!) and hyped, and thus might focus research on an\narea which is fundamentally flawed.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141103/d46df6bb/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-11-03T14:14:49",
                "message_text_only": "On Mon, Nov 3, 2014 at 1:12 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n>\n>> For those following this thread, we have now written a paper\n>> describing the side-chains, 2-way pegs and compact SPV proofs.\n>> (With additional authors Andrew Poelstra & Andrew Miller).\n>>\n>> http://blockstream.com/sidechains.pdf\n>\n>\n> Haven't seen any material discussion of this paper in this mailing list, so\n> I'll start.\n> (Otherwise, I've seen Peter Todd's reaction on reddit.)\n>\n> This paper fails to demonstrate that sidechains are anything more than a\n> wishful thinking.\n> It can be distilled down to this:\n> \"We want such and such features, hence we'll use DMMS, the same thing\n> Bitcoin uses, thus it will be secure!\"\n> Um, no.\n> Alt-coins also use DMMS, but aren't as secure as Bitcoin.\n>\n> So DMMS does not work by itself, it is a mechanism to secure a blockchain\n> using economic incentives.\n> The sidechains paper does not mention this, as far as I can tell.\n>\n> In my opinion, this is not acceptable. If you're making a proposal, you need\n> to describe what conditions are required for it to work.\n\n>From the introduction \"[...]Because signers prove computational work,\nrather than proving secret knowledge as\nis typical for digital signatures, we refer to them as miners. To\nachieve stable consensus on the\nblockchain history, economic incentives are provided where miners are\nrewarded with fees and\nsubsidies in the form of coins that are valuable only if the miners\nform a shared valid history,\nincentivising them to behave honestly.[...]\"\n\nIgnoring altrustic miners, the irreversibility of a DMMS chain\nobviously depends on the rewards received by miners on that chain.\nNobody is claiming that sidechains will be \"as secure bitcoin\", any 2\nway pegged assets is always \"more secure\" (probably too vague of a\nterm in this context) in its original chain.\n\n> Authors are clearly aware of the problem and mention it in section 6 \"Future\n> directions\" 6.1. \"Hashpower attack resistance\".\n> The problem is they do not make it clear that the proposal just makes no\n> sense until this is solved.\n\nSince all seigniorage from Bitcoin's initial distribution is spent on\nmining subsidies for the main chain, it is not available to subsidize\nsidechains too. Thus sidechains, in principle, reward their miners\nwith the same Bitcoin will use in the future: only transaction fees.\nSince some people claim that won't be enough (is not always clear to\nme if they believe that won't be enough for sidechains or also for\nbitcoin when the subsidies are gone), we included this section with\nother ideas we have explored to further. Some of them, like\n\"time-shifted fees\" could be interesting for Bitcoin itself in the\nfuture.\n\n> It doesn't help that the paper itself tries to sweep the problem under the\n> rug and has misleading statements.\n> Particularly, I'm talking about section \"4.2. Fraudulent transfers\":\n>\n> \"Reorganisations of arbitrary depth are in principle possible, which could\n> allow an attacker to\n> completely transfer coins between sidechains before causing a reorganisation\n> longer than the contest\n> period on the sending chain to undo its half of the transfer. ... If the\n> attacker is allowed to return the transferred coins to  the original\n> chain, he would increase the number of coins in his possession at the\n> expense of other users of the sidechain.\n> Before discussing how to handle this, we observe that this risk can be made\n> arbitrarily small by\n> simply increasing the contest period for transfers.\"\n>\n> Wow, really? Is this risk stochastic?\n>\n> The first sentence implies that attacker is able to cause a reorganization\n> of an arbitrary depth, but the rest of the section implies that\n> reorganizations are a naturally occurring phenomenon.\n\nReorganizations are both a naturally occurring phenomenon and\nsomething that an attacker may cause to revert history.\nSection \"11. Calculations\" of the Bitcoin whitepaper gives you this\nformula (in C code):\n\n#include <math.h>\ndouble AttackerSuccessProbability(double q, int z)\n{\n    double p = 1.0 - q;\n    double lambda = z * (q / p);\n    double sum = 1.0;\n    int i, k;\n    for (k = 0; k <= z; k++)\n    {\n        double poisson = exp(-lambda);\n        for (i = 1; i <= k; i++)\n            poisson *= lambda / i;\n        sum -= poisson * (1 - pow(q / p, z - k));\n    }\n    return sum;\n}\nAlso says \"Given our assumption that p > q, the probability drops\nexponentially as the number of blocks the\nattacker has to catch up with increases.\"\n\nIn this case, the contest period determines z, the number of blocks\nthe attacker has to catch up from the honest chain.\nSo the longer the contest period is, the harder it is to succeed with\na fraudulent transfer.\nFor example, if a given sidechain chooses 52560 as the contest period\n(1 year assuming 10 min blocks), it will be very hard for an attacker\nto produce a fake alternative longest-than-the-last-year-of-history\nfork to steal coins.\nA sidechain with such an extreme contest period would probably not be\nvery practical though, since honest users would have to wait more than\na year to complete transfers from the parent chain to the sidechain\nand viceversa.\n\nI hope this clarifies our assumptions."
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-11-03T16:01:46",
                "message_text_only": "> From the introduction \"[...]Because signers prove computational work,\n> rather than proving secret knowledge as\n> is typical for digital signatures, we refer to them as miners. To\n> achieve stable consensus on the\n> blockchain history, economic incentives are provided where miners are\n> rewarded with fees and\n> subsidies in the form of coins that are valuable only if the miners\n> form a shared valid history,\n> incentivising them to behave honestly.[...]\"\n>\n\nThis isn't applicable in case of sidechains: anybody with sufficient\nhashpower will be able to unlock a locked coin on the parent chain by\nproducing an SPV proof.\n\"Only if the miners form a shared valid history\" isn't a requirement here,\nas miner will get bitcoins which aren't in any way connect to sidechain he\nhave wrecked.  Thus there is no incentive to behave honestly.\n\nThus sidechains, in principle, reward their miners\n>\nwith the same Bitcoin will use in the future: only transaction fees.\n> Since some people claim that won't be enough\n\n\nWhether it is enough depends on a variety of factors, including existence\nof other chains miner can mine.\nYou cannot assume that it is the same situation as with a simple\nsingle-chain model.\n\nE.g. imagine 1000 BTC were moved to a sidechain. Miners can keep mining\nbitcoins as usual, and in parallel work on an SPV proof to claim these 1000\nBTC. (I assume that merged-mining is allowed.)\nIn this case the amount of fees which miners could collect by honest mining\non the sidechain is irrelevant, as long as it is smaller than 1000 BTC.\n\nThis is quite different from attacks which can be performed on vanilla\nBitcoin (see below), so I don't think you can say that the security model\nis the same.\n\nAlso says \"Given our assumption that p > q, the probability drops\n>\nexponentially as the number of blocks the\n> attacker has to catch up with increases.\"\n>\n\nYes, but that doesn't apply to reorganizations which attacker might cause\nintentionally.\nHence I think it was disingenuous to include these two very different\ntreats into one section:\nit sounds like you claim that attacker-induced reorganizations are\nunlikely, while it isn't the case.\n\nSo the longer the contest period is, the harder it is to succeed with\n> a fraudulent transfer.\n>\n\nYes, but \"harder\" isn't same as \"unlikely\".\n\nAnother problem with this section is that it only mentions reorganizations.\nBut a fraudulent transfer can happen without a reorganization, as an\nattacker can produce an SPV proof which is totally fake. So this is not\nsimilar to double-spending, attacker doesn't need to own coins to perform\nan attack.\n\n\n> I hope this clarifies our assumptions.\n>\n\nYep, thanks. It looks like you assume that sidechain security will be\nsimilar to Bitcoin security in the long term.\nNow quite the assumptions I've been looking for, but OK...\n\nI'm sorry for the harsh tone, but I just find it hilarious that people who\nexplained that proof-of-stake is not going to work because an attacker\nmight collect everybody's past signing keys to rewrite the whole history\n(I'm referring to this: https://download.wpsoftware.net/bitcoin/pos.pdf )\ndidn't bother to mention that miners can collude to wreck a sidechain and\nget an awesome reward, basically for free.\nsomething something the mote in thy brother's eye something something\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141103/2331a54d/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-11-03T17:32:31",
                "message_text_only": "On Mon, Nov 3, 2014 at 5:01 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n> This isn't applicable in case of sidechains: anybody with sufficient\n> hashpower will be able to unlock a locked coin on the parent chain by\n> producing an SPV proof.\n> \"Only if the miners form a shared valid history\" isn't a requirement here,\n> as miner will get bitcoins which aren't in any way connect to sidechain he\n> have wrecked.  Thus there is no incentive to behave honestly.\n\nBut if the majority of the sidechain miners keep working on the honest\nchain, anyone can submit a reorg proof during the contest period that\ninvalidates this \"unlockment\" on the parent chain.\nHonest sidechain miners will get rewarded in the sidechain, and those\nrewards will only be valuable if they form a shared valid history.\n\n> Whether it is enough depends on a variety of factors, including existence of\n> other chains miner can mine.\n> You cannot assume that it is the same situation as with a simple\n> single-chain model.\n\nThis is correct. There's many variables at play.\n\n> E.g. imagine 1000 BTC were moved to a sidechain. Miners can keep mining\n> bitcoins as usual, and in parallel work on an SPV proof to claim these 1000\n> BTC. (I assume that merged-mining is allowed.)\n> In this case the amount of fees which miners could collect by honest mining\n> on the sidechain is irrelevant, as long as it is smaller than 1000 BTC.\n\nAs explained many times, sidechains and merged mining are orthogonal:\npegged sidechains don't need to use merged mining just as merged\nmining altchains don't need to be sidechains.\nAnyway, I think you're somehow assuming that deciding to mine against\nthe sidechain instead of mining for its rewards.\nThis is simply not true. No matter how big the attack incentive is, if\nyou're assuming my 52560 contest period example and that the attacker\ndoesn't control the majority of the hashing power on the sidechain,\nthe probability of achieving a one-year reorg is negligible. In the\nmeantime honest nodes are getting some reward, let's say 0.1 BTC per\nblock. That's 5256 btc/year to the honest nodes vs 0 btc/year for the\nattacker.\nIf the attacker controls, say, 10% of the network, he's losing 525.6\nbtc/year in opportunity costs for an extremely small chance of getting\n1000 btc.\n\n> This is quite different from attacks which can be performed on vanilla\n> Bitcoin (see below), so I don't think you can say that the security model is\n> the same.\n\nWe're not claiming that the security model is the same, we just\ncompare it to Bitcoin's because it's similar in many senses.\n\n>> Also says \"Given our assumption that p > q, the probability drops\n>>\n>> exponentially as the number of blocks the\n>> attacker has to catch up with increases.\"\n>\n>\n> Yes, but that doesn't apply to reorganizations which attacker might cause\n> intentionally.\n\nYes, that's precisely the kind of reorganizations the BITCOIN\nWHITEPAPER is talking about in section \"11 Calculations\":\nreorganizations caused intentionally by an attacker. Please read it\nagain.\n\"q_z = probability THE ATTACKER will ever catch up from z blocks behind\".\n\n> Hence I think it was disingenuous to include these two very different treats\n> into one section:\n> it sounds like you claim that attacker-induced reorganizations are unlikely,\n> while it isn't the case.\n\nIf it sounds to you like we're claiming that attacker-induced\nreorganizations are not likely, maybe we could have expressed it some\nother way. That was certainly not the intention.\nThat's not true for Bitcoin itself and that's not what we're claiming.\n\n>> So the longer the contest period is, the harder it is to succeed with\n>> a fraudulent transfer.\n>\n>\n> Yes, but \"harder\" isn't same as \"unlikely\".\n\nExponentially harder with the number of blocks is good enough for me.\n\n> Another problem with this section is that it only mentions reorganizations.\n> But a fraudulent transfer can happen without a reorganization, as an\n> attacker can produce an SPV proof which is totally fake. So this is not\n> similar to double-spending, attacker doesn't need to own coins to perform an\n> attack.\n\nThat would be a reorganization too, you can't create a completely fake\nhistory for a sidechain, the attacker will share some of the chain's\nhistory.\nYes, the attacker can create an SPV proof of a fake chain and in that\nsense, this is different from a regular double-spend.\nIf honest miners control the majority of the hashing power, they will\nproduce a valid chain longer than the fake chain. And then anyone can\nuse that reorg proof to stop the attacker before the contest period.\nYou see, \"SPV security\" is not the same as \"SPV security with more\nthan 52560 confirmations of the transaction I'm receiving\".\n\n>> I hope this clarifies our assumptions.\n>\n> Yep, thanks. It looks like you assume that sidechain security will be\n> similar to Bitcoin security in the long term.\n> Now quite the assumptions I've been looking for, but OK...\n>\n> I'm sorry for the harsh tone, but I just find it hilarious that people who\n> explained that proof-of-stake is not going to work because an attacker might\n> collect everybody's past signing keys to rewrite the whole history\n> (I'm referring to this: https://download.wpsoftware.net/bitcoin/pos.pdf )\n> didn't bother to mention that miners can collude to wreck a sidechain and\n> get an awesome reward, basically for free.\n\nProof of work is not free, that's the whole point of proof of work.\nAs said, sidechains, like Bitcoin itself, relies on the assumption\nthat an attacker won't control a majority of the network. Satoshi's\npaper just says that p must be greater than q.\nWe go beyond that precisely at the beginning of the \"6.1 Hashpower\nattack resistance\" section:\n\n\"The main thrust of this paper surrounds two-way peg using SPV proofs,\nwhich are forgeable by a\n51%-majority and blockable by however much hashpower is needed to\nbuild a sufficiently-long\nproof during the transfer\u2019s contest period. (There is a tradeoff on\nthis latter point \u2014 if 33%\nhashpower can block a proof, then 67% is needed to successfully use a\nfalse one, and so on.)\"\n\nI'm happy to keep trying to clarify things. But I think we will\nadvance faster if you first tell me what do you think the contest\nperiod is for.\nBecause that's I think the source of your misunderstandings. From what\nyou're saying, I don't think you're having the contest period into\naccount at all."
            },
            {
                "author": "Andrew Poelstra",
                "date": "2014-11-03T17:54:59",
                "message_text_only": "On Mon, Nov 03, 2014 at 06:01:46PM +0200, Alex Mizrahi wrote:\n> \n> Yes, but \"harder\" isn't same as \"unlikely\".\n>\n\nWe are aware of the distintion between hardness (expected work) and\nlikelihood of successful attack -- much of Appendix B talks about this,\nin the context of producing compact SPV proofs which are (a) hard to\nforge, and (b) very unlikely to be forgeries.\n\nWe did spend some time formalizing this but due to space constraints\n(and it being somewhat beside the point of the whitepaper beyond \"we\nbelieve it is possible to do\"), we did not explore this in as great\ndepth as we'd have liked.\n \n> Another problem with this section is that it only mentions reorganizations.\n> But a fraudulent transfer can happen without a reorganization, as an\n> attacker can produce an SPV proof which is totally fake. So this is not\n> similar to double-spending, attacker doesn't need to own coins to perform\n> an attack.\n> \n\nWell, even in the absense of a reorganization, the attacker's false proof\nwill just be invalidated by a proof of longer work on the real chain.\nAnd there is still a real cost to producing the false proof.\n\n\n-- \nAndrew Poelstra\nMathematics Department, University of Texas at Austin\nEmail: apoelstra at wpsoftware.net\nWeb:   http://www.wpsoftware.net/andrew\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 490 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141103/90bfc291/attachment.sig>"
            },
            {
                "author": "odinn",
                "date": "2014-11-03T19:38:27",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nPossibly relevant...\n\nhttps://www.iacr.org/archive/eurocrypt2002/23320001/euro02.ps\n\nSome interesting stuff here too\nhttp://des.cse.nsysu.edu.tw/asiacrypt2014/accepted/index.htm\n\n\nAndrew Poelstra wrote:\n> false proof\n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJUV9mzAAoJEGxwq/inSG8C0qwIAJZdOmeSK7pIw2KTj0lQlPIp\nMIc1w2KL+qIVXSrlqyNlcIhlW4gK+/cuYD+PZ7wSGHV2k9OD6AcOo3JfGYgk4LP/\n3GIrY/+TQVoTRKVgTGvR2uqUILuwCPTtr/7Uy2s2y2mveyFda6ZA7sMeoeiTsQQe\n9aPS6tLK0W7g+gbqM2QwC3G521iPJ9RE9JOsxCVxGplVUuOLpPzovQjFO3MKYdeu\neBq5ORr4ICvphk+yVygkQvw/AuYZjqTuKEjRfK0v5EryZM9Qsj/1pEhYAH8tdLrV\n4NB5lDXIo3rt58wPqyeacMF6WW2LShb1VDl6Hnvi35GXURpBgxXM/N4pO+l444k=\n=9q9h\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "side-chains & 2-way pegging (Re: is there a way to do bitcoin-staging?)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Andrew Poelstra",
                "odinn",
                "Jorge Tim\u00f3n",
                "Alex Mizrahi"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 20339
        }
    },
    {
        "title": "[Bitcoin-development] BIP62 and future script upgrades",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2014-11-04T13:29:46",
                "message_text_only": "Hi all,\n\none of the rules in BIP62 is the \"clean stack\" requirement, which\nmakes passing more inputs to a script than necessary illegal.\n\nUnfortunately, this rule needs an exception for P2SH scripts: the test\ncan only be done after (and not before) the second stage evaluation.\nOtherwise it would reject all spends from P2SH (which rely on\n\"superfluous\" inputs to pass data to the second stage).\n\nI submitted a Pull Request to clarify this in BIP62:\nhttps://github.com/bitcoin/bips/pull/115\n\nHowever, this also leads to the interesting observation that the\nclean-stack rule is incompatible with future P2SH-like constructs -\nwhich would be very useful if we'd ever want to deploy a \"Script 2.0\".\nAny such upgrade would suffer from the same problem as P2SH, and\nrequire an exception in the clean-stack rule, which - once deployed -\nis no longer a softfork.\n\nLuke suggested on the pull request to not apply this rule on every\ntransaction with nVersion >= 3, which indeed solves the problem. I\nbelieve this can easily be generalized: make the (non mandatory) BIP62\nrules only apply to transaction with strict nVersion==3, and not to\nhigher ones. The higher ones are non-standard anyway, and shouldn't be\nused before there is a rule that applies to them anyway - which could\ninclude some or all of BIP62 if wanted at that point still.\n\nOpinions?"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-11-04T13:38:59",
                "message_text_only": "This is another problem that only exists because of the desire to soft\nfork. If \"script 2.0\" is a hard fork upgrade, you no longer need weird\nhacks like scripts-which-are-not-scripts.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141104/167fcc3a/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-11-04T13:50:35",
                "message_text_only": "On Tue, Nov 4, 2014 at 5:38 AM, Mike Hearn <mike at plan99.net> wrote:\n> This is another problem that only exists because of the desire to soft fork.\n> If \"script 2.0\" is a hard fork upgrade, you no longer need weird hacks like\n> scripts-which-are-not-scripts.\n\nI agree.\nI also agree that the desire for softforks sometimes lead to ugly hacks.\nI also that they are not \"nice\" philosophically because they reduce\nthe security model of former full nodes to SPV wrt. the new rules\nwithout their knowledge.\nI also agree that hardforks should be possible when they're useful.\n\nBut in practice, hardforks have a much larger risk which just isn't\njustified for everything. Especially when it's about introducing a new\ntransaction type that won't be used before the softfork takes place\nanyway.\n\nAnd to keep the option for doing future softforks open, I believe we\nneed to be aware of the effects of changes like this.\n\n-- \nPieter"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-11-04T14:01:37",
                "message_text_only": "On Tue, Nov 4, 2014 at 8:29 AM, Pieter Wuille <pieter.wuille at gmail.com>\nwrote:\n\n> Luke suggested on the pull request to not apply this rule on every\n> transaction with nVersion >= 3, which indeed solves the problem. I\n> believe this can easily be generalized: make the (non mandatory) BIP62\n> rules only apply to transaction with strict nVersion==3, and not to\n> higher ones.\n>\n\nI agree; soft-forking is a useful way of rolling out upgrades, we shouldn't\nprohibit it.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141104/1550619d/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-04T19:13:13",
                "message_text_only": "On Tue, Nov 04, 2014 at 05:29:46AM -0800, Pieter Wuille wrote:\n> one of the rules in BIP62 is the \"clean stack\" requirement, which\n> makes passing more inputs to a script than necessary illegal.\n> \n> Unfortunately, this rule needs an exception for P2SH scripts: the test\n> can only be done after (and not before) the second stage evaluation.\n> Otherwise it would reject all spends from P2SH (which rely on\n> \"superfluous\" inputs to pass data to the second stage).\n> \n> I submitted a Pull Request to clarify this in BIP62:\n> https://github.com/bitcoin/bips/pull/115\n> \n> However, this also leads to the interesting observation that the\n> clean-stack rule is incompatible with future P2SH-like constructs -\n> which would be very useful if we'd ever want to deploy a \"Script 2.0\".\n> Any such upgrade would suffer from the same problem as P2SH, and\n> require an exception in the clean-stack rule, which - once deployed -\n> is no longer a softfork.\n> \n> Luke suggested on the pull request to not apply this rule on every\n> transaction with nVersion >= 3, which indeed solves the problem. I\n> believe this can easily be generalized: make the (non mandatory) BIP62\n> rules only apply to transaction with strict nVersion==3, and not to\n> higher ones. The higher ones are non-standard anyway, and shouldn't be\n> used before there is a rule that applies to them anyway - which could\n> include some or all of BIP62 if wanted at that point still.\n> \n> Opinions?\n\nI agree with Luke: make the rules only apply to transactions with a\nstrict nVersion==3. If we want to extend that later we can do so in\nanother soft-fork.\n\n\nOn another topic, I'm skeptical of the choice of nVersion==3 - we'll\nlikely end up doing more block.nVersion increases in the future, and\nthere's no reason to think they'll have anything to do with\ntransactions. No sense creating a rule that'll be so quickly broken.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000002986604739bc94cc42d5c6adf75186e80ba3dbb501a076d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141104/7032439f/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-11-04T19:56:35",
                "message_text_only": "On Tue, Nov 4, 2014 at 8:13 PM, Peter Todd <pete at petertodd.org> wrote:\n> On another topic, I'm skeptical of the choice of nVersion==3 - we'll\n> likely end up doing more block.nVersion increases in the future, and\n> there's no reason to think they'll have anything to do with\n> transactions. No sense creating a rule that'll be so quickly broken.\n\nModerately agreed.\n\nEarlier in BIP 62 lifetime, I had commented on ambiguity that arose\nfrom bumping tx version simply because we were bumping block version.\nThe ambiguity was corrected, but IMO remains symptomatic of potential\nproblems and confusion down the road.\n\nThough I ACK'd the change, my general preference remains to disconnect\nTX and block version.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-11-04T20:00:43",
                "message_text_only": "On Tue, Nov 4, 2014 at 11:56 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> On Tue, Nov 4, 2014 at 8:13 PM, Peter Todd <pete at petertodd.org> wrote:\n>> On another topic, I'm skeptical of the choice of nVersion==3 - we'll\n>> likely end up doing more block.nVersion increases in the future, and\n>> there's no reason to think they'll have anything to do with\n>> transactions. No sense creating a rule that'll be so quickly broken.\n>\n> Moderately agreed.\n>\n> Earlier in BIP 62 lifetime, I had commented on ambiguity that arose\n> from bumping tx version simply because we were bumping block version.\n> The ambiguity was corrected, but IMO remains symptomatic of potential\n> problems and confusion down the road.\n>\n> Though I ACK'd the change, my general preference remains to disconnect\n> TX and block version.\n\nI prefer to see consensus rules as one set of rules (especially\nbecause they only really apply to blocks - the part for lone\ntransactions is just policy), and thus have a single numbering. Still,\nI have no strong opinion about it and have now heard 3 'moderately\nagainst' comments. I'm fine with using nVersion==2 for transactions.\n\n-- \nPieter"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-04T20:07:44",
                "message_text_only": "On Tue, Nov 04, 2014 at 12:00:43PM -0800, Pieter Wuille wrote:\n> On Tue, Nov 4, 2014 at 11:56 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> > On Tue, Nov 4, 2014 at 8:13 PM, Peter Todd <pete at petertodd.org> wrote:\n> >> On another topic, I'm skeptical of the choice of nVersion==3 - we'll\n> >> likely end up doing more block.nVersion increases in the future, and\n> >> there's no reason to think they'll have anything to do with\n> >> transactions. No sense creating a rule that'll be so quickly broken.\n> >\n> > Moderately agreed.\n> >\n> > Earlier in BIP 62 lifetime, I had commented on ambiguity that arose\n> > from bumping tx version simply because we were bumping block version.\n> > The ambiguity was corrected, but IMO remains symptomatic of potential\n> > problems and confusion down the road.\n> >\n> > Though I ACK'd the change, my general preference remains to disconnect\n> > TX and block version.\n> \n> I prefer to see consensus rules as one set of rules (especially\n> because they only really apply to blocks - the part for lone\n> transactions is just policy), and thus have a single numbering. Still,\n> I have no strong opinion about it and have now heard 3 'moderately\n> against' comments. I'm fine with using nVersion==2 for transactions.\n\nKeep in mind that we may even have a circumstance where we need to\nintroduce *two* different new tx version numbers in a single soft-fork,\nsay because we find an exploit that has two different fixes, each of\nwhich breaks something.\n\nI don't think we have any certainty how new features will be added in\nthe future - just look at how we only recently realised new opcodes\nwon't be associated with tx version number bumps - so I'm loath to setup\nexpectations.\n\nBesides, transactions can certainly be verified for correctness in a\nstand-alone fashion outside a block; CHECKLOCKTIMEVERIFY was\nspecifically designed so that verifying scripts containing it could be\ndone in a self-contained manner only referencing the transaction the\nscript was within.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000036655c955dd94ba7f9856814f3cb87f003e311566921807\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141104/e90d2487/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-11-05T07:53:03",
                "message_text_only": "Ok, addressed these (and a few other things) in\nhttps://github.com/bitcoin/bips/pull/117:\n* Better names for the rules.\n* Clarify interaction of BIP62 with P2SH.\n* Clarify that known hashtypes are required, despite not being part of DER.\n* Use v2 transactions instead of v3 transactions.\n* Apply the optional rules only to strict v2, and not higher or lower.\n\n\nOn Tue, Nov 4, 2014 at 12:07 PM, Peter Todd <pete at petertodd.org> wrote:\n> On Tue, Nov 04, 2014 at 12:00:43PM -0800, Pieter Wuille wrote:\n>> On Tue, Nov 4, 2014 at 11:56 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>> > On Tue, Nov 4, 2014 at 8:13 PM, Peter Todd <pete at petertodd.org> wrote:\n>> >> On another topic, I'm skeptical of the choice of nVersion==3 - we'll\n>> >> likely end up doing more block.nVersion increases in the future, and\n>> >> there's no reason to think they'll have anything to do with\n>> >> transactions. No sense creating a rule that'll be so quickly broken.\n>> >\n>> > Moderately agreed.\n>> >\n>> > Earlier in BIP 62 lifetime, I had commented on ambiguity that arose\n>> > from bumping tx version simply because we were bumping block version.\n>> > The ambiguity was corrected, but IMO remains symptomatic of potential\n>> > problems and confusion down the road.\n>> >\n>> > Though I ACK'd the change, my general preference remains to disconnect\n>> > TX and block version.\n>>\n>> I prefer to see consensus rules as one set of rules (especially\n>> because they only really apply to blocks - the part for lone\n>> transactions is just policy), and thus have a single numbering. Still,\n>> I have no strong opinion about it and have now heard 3 'moderately\n>> against' comments. I'm fine with using nVersion==2 for transactions.\n>\n> Keep in mind that we may even have a circumstance where we need to\n> introduce *two* different new tx version numbers in a single soft-fork,\n> say because we find an exploit that has two different fixes, each of\n> which breaks something.\n>\n> I don't think we have any certainty how new features will be added in\n> the future - just look at how we only recently realised new opcodes\n> won't be associated with tx version number bumps - so I'm loath to setup\n> expectations.\n>\n> Besides, transactions can certainly be verified for correctness in a\n> stand-alone fashion outside a block; CHECKLOCKTIMEVERIFY was\n> specifically designed so that verifying scripts containing it could be\n> done in a self-contained manner only referencing the transaction the\n> script was within.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000000036655c955dd94ba7f9856814f3cb87f003e311566921807"
            }
        ],
        "thread_summary": {
            "title": "BIP62 and future script upgrades",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Peter Todd",
                "Gavin Andresen",
                "Pieter Wuille"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 12479
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin API Wrapper",
        "thread_messages": [
            {
                "author": "Krzysztof Okupski",
                "date": "2014-11-04T15:02:17",
                "message_text_only": "Dear everyone,\n\nI've developed a C++ wrapper for JSON-RPC communication with\nan existing Bitcoin installation. For everyone that is a developer and\ninterested in building extensions or alike, this might prove useful.\n\nThe code can be found on GitHub:\n-> https://github.com/minium/bitcoin-api-cpp\n\nWarm greetings,\nKrzysztof"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin API Wrapper",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Krzysztof Okupski"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 322
        }
    },
    {
        "title": "[Bitcoin-development] Running a full node",
        "thread_messages": [
            {
                "author": "Francis GASCHET",
                "date": "2014-11-06T09:51:38",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/ec4e0c72/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: Signature-Fg.jpg\nType: image/jpeg\nSize: 15252 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/ec4e0c72/attachment.jpg>"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-11-06T11:09:06",
                "message_text_only": "On Thursday 6. November 2014 10.51.38 Francis GASCHET wrote:\n> Dear all,\n> \n>  I'm currently discovering the Bitcoin's universe.\n>  I installed bitcoind on my PC and I'm currently testing different things\n> on testnet. I just read an article saying that the risk for Bitcoin in the\n> future is the decreasing number of full nodes, with appropriate resources.\n> There are only few of them in France !\n> \n>  My company operates a dual homed Internet access and has some capacity to\n> host an HA server in a secured environment. So I'm thinking about setting\n> up a full node. But I'd like to know what storage, RAM  and bandwidth\n> resources are needed. I guess that the problem is not the CPU.\n\nThere is a stats script running on this node;\n\nhttp://213.165.91.169/\n\nmore peoples opinions;\nhttps://bitcointalk.org/index.php?topic=760094.0\n\n-- \nThomas Zander"
            },
            {
                "author": "odinn",
                "date": "2014-11-06T21:38:31",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nIf you are considering running a full node (or think you are running\none), you should read the comments here:\n\nhttps://www.reddit.com/r/Bitcoin/comments/1scd4z/im_running_a_full_node_and_so_should_you/cdw38ve\n\nThomas Zander wrote:\n> On Thursday 6. November 2014 10.51.38 Francis GASCHET wrote:\n>> Dear all,\n>> \n>> I'm currently discovering the Bitcoin's universe. I installed\n>> bitcoind on my PC and I'm currently testing different things on\n>> testnet. I just read an article saying that the risk for Bitcoin\n>> in the future is the decreasing number of full nodes, with\n>> appropriate resources. There are only few of them in France !\n>> \n>> My company operates a dual homed Internet access and has some\n>> capacity to host an HA server in a secured environment. So I'm\n>> thinking about setting up a full node. But I'd like to know what\n>> storage, RAM  and bandwidth resources are needed. I guess that\n>> the problem is not the CPU.\n> \n> There is a stats script running on this node;\n> \n> http://213.165.91.169/\n> \n> more peoples opinions; \n> https://bitcointalk.org/index.php?topic=760094.0\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJUW+pWAAoJEGxwq/inSG8CMOEH/jLElWVYTepe0kwnHiguvM2T\nY16fSfLuptdpHU0+2du0U7zO14UvhL7mA2cQxDPxvC72hqRfMld3x5+Pz1mM8aik\nXgot1XrFEo2fQn4CRyaEdwIj0SG5+dcnNSPWJcAf/aLSmw6BFaFgVbG9Qenzrvfn\nwgJBaqP0RWTox6ctsDZAHbVTo1+t4/ERwX1YMcQJkAKLN4IZmYqFIaRV6TRU5jSy\naf1Smnn+2GmryYlAH+DDJ/4C7BxfCCMnWuItjne7AxMUI/4aDJO1lv/s5lkQYCJU\n2dYFV5ZYyS+Ff9895eI9GDu2N+b/QuiiKWsX8leshmCB8/XrPjHqjfP0eABnBKM=\n=Augd\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Daniel F",
                "date": "2014-11-08T15:28:16",
                "message_text_only": "> But I'd like to know what storage, RAM  and bandwidth resources are\n> needed. I guess that the problem is not the CPU.\n\nHi Francis,\n\nHere are some rough guidelines for you, based on the statistics from my\nnode:\n\ndisk usage: about 30GB currently for the blockchain data. It'll only\nkeep growing from here, but relatively slowly.\n\ncpu usage: pretty much nothing, after you have synced the blockchain.\n\nram usage: after it runs for a few months, my node gets up to using 1.5\nGB of ram or so.\n\nbandwidth usage: my node averages about 500GB of traffic per month, most\nof it outgoing.\n\nHope that gives you a rough idea of what you can expect for running full\nnode.\n\nBest,\nDaniel"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-11-08T17:44:04",
                "message_text_only": "On 8 November 2014 16:28, Daniel F <nanotube at gmail.com> wrote:\n\n> > But I'd like to know what storage, RAM  and bandwidth resources are\n> > needed. I guess that the problem is not the CPU.\n>\n> Hi Francis,\n>\n> Here are some rough guidelines for you, based on the statistics from my\n> node:\n>\n> disk usage: about 30GB currently for the blockchain data. It'll only\n> keep growing from here, but relatively slowly.\n>\n\nThere's some statistics on this site:\n\nhttps://blockchain.info/charts/blocks-size\n\nIt may be reasonable to assume 10GB growth a year.  When I was running a\nfull node I gave it a disk of 50GB.\n\n\n>\n> cpu usage: pretty much nothing, after you have synced the blockchain.\n>\n> ram usage: after it runs for a few months, my node gets up to using 1.5\n> GB of ram or so.\n>\n> bandwidth usage: my node averages about 500GB of traffic per month, most\n> of it outgoing.\n>\n> Hope that gives you a rough idea of what you can expect for running full\n> node.\n>\n> Best,\n> Daniel\n>\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141108/82dbada2/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-11-08T21:47:03",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI host charts of my node's system metrics at http://statoshi.info/#/dashboard/db/system-metrics\n\nNote that the CPU spikes are abnormal as I'm making automated RPC calls to query the UTXO set.\n\nMy node's bandwidth usage chart can be found at http://statoshi.info/#/dashboard/file/default.json?panelId=1&fullscreen\n\n- - Jameson\n\nOn 11/08/2014 12:44 PM, Melvin Carvalho wrote:\n> On 8 November 2014 16:28, Daniel F <nanotube at gmail.com> wrote:\n> \n>>> But I'd like to know what storage, RAM  and bandwidth resources are\n>>> needed. I guess that the problem is not the CPU.\n>>\n>> Hi Francis,\n>>\n>> Here are some rough guidelines for you, based on the statistics from my\n>> node:\n>>\n>> disk usage: about 30GB currently for the blockchain data. It'll only\n>> keep growing from here, but relatively slowly.\n>>\n> \n> There's some statistics on this site:\n> \n> https://blockchain.info/charts/blocks-size\n> \n> It may be reasonable to assume 10GB growth a year.  When I was running a\n> full node I gave it a disk of 50GB.\n> \n> \n>>\n>> cpu usage: pretty much nothing, after you have synced the blockchain.\n>>\n>> ram usage: after it runs for a few months, my node gets up to using 1.5\n>> GB of ram or so.\n>>\n>> bandwidth usage: my node averages about 500GB of traffic per month, most\n>> of it outgoing.\n>>\n>> Hope that gives you a rough idea of what you can expect for running full\n>> node.\n>>\n>> Best,\n>> Daniel\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJUXo9XAAoJEIch3FSFNiDcl20H/0/MrFt0SfR5G5S0m4sLMUdP\n5/sveDnVjCBBmcoCKvH3XKchT7fVA6C4N1+dUYDJhlOaZhXegdY3saHdIP/sFzkF\n38JBdoqWm4IysAC9gmtn/jRSrxh0wC780zVcLe2EgI7n+1ZOOqCaud28gX+ukoq5\ndsU/B8bPEZ/2E7WbaXRcJJGqPdP03H2VXEkKxTWacBYFGVd6RhP9ieFHS3TyctNb\nA0g02l1OmymnSSP6ze32ne+G4RgPdbvYhevW8vay1P4ATgBSnB2sitawRXJjsxMy\n+d4Fqg+xYRMx3l8lamb7OLSi9rMe6GNEKyML4/Gu24JPSjlmQLXRJE/aS3oMyZc=\n=zXHK\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Francis GASCHET",
                "date": "2014-11-09T15:22:21",
                "message_text_only": "Dear all,\n\n+1 !\n\nThanks to those who sent me some details and links.\n\nMy node is up and running on 5.56.40.1:8333\n\nTechno : Linux HA + dual homed Internet transit.\nIt should be stable as from now.\n\nBest regards\n--\nFrancis\n\nLe 06/11/2014 11:53, Francis GASCHET a \u00e9crit :\n> Dear all,\n>\n> I'm currently discovering the Bitcoin's universe.\n> I installedbitcoind on my PC and I'm currently testing different \n> things on testnet.\n> I just read an article saying that the risk for Bitcoin in the future \n> is the decreasing number of full nodes, with appropriate resources. \n> There are only few of them in France !\n>\n> My company operates a dual homed Internet access and has some capacity \n> to host an HA server in a secured environment. So I'm thinking about \n> setting up a full node.\n> But I'd like to know what storage, RAM  and bandwidth resources are \n> needed. I guess that the problem is not the CPU.\n>\n> Thanks in advance for details."
            }
        ],
        "thread_summary": {
            "title": "Running a full node",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "odinn",
                "Francis GASCHET",
                "Thomas Zander",
                "Melvin Carvalho",
                "Daniel F",
                "Jameson Lopp"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 8595
        }
    },
    {
        "title": "[Bitcoin-development] SCRIPT_VERIFY_STRICTENC and CHECKSIG NOT",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-11-06T10:38:20",
                "message_text_only": "So right now git head will accept the following invalid transaction into\nthe mempool:\n\n0100000001140de229e08fda25cbc16ded2618cdacce49fcb18c0b6ccdace00040909adae4000000009000493046022100f7828d81c849c5448ba5ba4ef55df6b4d0ba3ae3f1a59cff3291880c2c8e524f022100d2f5bc9dc2f0674eded31023cb47e61a596e10f8f1ddd44cf92d290c9db577c70144410778d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71a1518063243acd4dfe96b66e3f2ec8013c8e072cd09b3834a19f81f659cc3455ac91ffffffff01102700000000000017a914e661a2229cc824329c9409f49d99cb5ac350c9288700000000\n\nwhich spends the redeemScript:\n\n0778d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71a1518063243acd4dfe96b66e3f2ec8013c8e072cd09b3834a19f81f659cc3455\nCHECKSIG NOT\n\nThat pubkey is valid and accepted by OpenSSL as it's obscure \"hybrid\"\nformat. The transaction is invalid because the signature is correct,\ncausing CHECKSIG to return 1, which is inverted to 0 by the NOT.\n\nHowever the implementation of the STRICTENC flag simply makes pubkey\nformats it doesn't recognize act as through the signature was invalid,\nrather than failing the transaction. Similar to the invalid due to too\nmany sigops DoS attack I found before, this lets you fill up the mempool\nwith garbage transactions that will never be mined. OTOH I don't see any\nway to exploit this in a v0.9.x IsStandard() transaction, so we haven't\nshipped code that actually has this vulnerability. (dunno about\nalt-implementations)\n\nI suggest we either change STRICTENC to simply fail unrecognized pubkeys\nimmediately - similar to how non-standard signatures are treated - or\nfail the script if the pubkey is non-standard and signature verification\nsucceeds.\n\nThoughts?\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000152dc55f27338b58325f0432d2dc6edb90c8d449d9959583\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/811a0a90/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-06T10:45:09",
                "message_text_only": "On Thu, Nov 06, 2014 at 05:38:20AM -0500, Peter Todd wrote:\n> So right now git head will accept the following invalid transaction into\n> the mempool:\n> \n> 0100000001140de229e08fda25cbc16ded2618cdacce49fcb18c0b6ccdace00040909adae4000000009000493046022100f7828d81c849c5448ba5ba4ef55df6b4d0ba3ae3f1a59cff3291880c2c8e524f022100d2f5bc9dc2f0674eded31023cb47e61a596e10f8f1ddd44cf92d290c9db577c70144410778d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71a1518063243acd4dfe96b66e3f2ec8013c8e072cd09b3834a19f81f659cc3455ac91ffffffff01102700000000000017a914e661a2229cc824329c9409f49d99cb5ac350c9288700000000\n> \n> which spends the redeemScript:\n> \n> 0778d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71a1518063243acd4dfe96b66e3f2ec8013c8e072cd09b3834a19f81f659cc3455\n> CHECKSIG NOT\n\n...and while we're at it, bitcoin-ruby's forked yet again...\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000152dc55f27338b58325f0432d2dc6edb90c8d449d9959583\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/92f9caca/attachment.sig>"
            },
            {
                "author": "Marius Hanne",
                "date": "2014-11-06T12:39:48",
                "message_text_only": "On Thu, 6 Nov 2014 05:45:09 -0500\nPeter Todd <pete at petertodd.org> wrote:\n\n> On Thu, Nov 06, 2014 at 05:38:20AM -0500, Peter Todd wrote:\n> > So right now git head will accept the following invalid transaction\n> > into the mempool:\n> > \n> > 0100000001140de229e08fda25cbc16ded2618cdacce49fcb18c0b6ccdace00040909adae4000000009000493046022100f7828d81c849c5448ba5ba4ef55df6b4d0ba3ae3f1a59cff3291880c2c8e524f022100d2f5bc9dc2f0674eded31023cb47e61a596e10f8f1ddd44cf92d290c9db577c70144410778d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71a1518063243acd4dfe96b66e3f2ec8013c8e072cd09b3834a19f81f659cc3455ac91ffffffff01102700000000000017a914e661a2229cc824329c9409f49d99cb5ac350c9288700000000\n> > \n> > which spends the redeemScript:\n> > \n> > 0778d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71a1518063243acd4dfe96b66e3f2ec8013c8e072cd09b3834a19f81f659cc3455\n> > CHECKSIG NOT\n> \n> ...and while we're at it, bitcoin-ruby's forked yet again...\n> \n\nIt is? How do you reckon? The webbtc node just received a block:\nhttp://webbtc.com/block/0000000000000000006370724f73798f4c00c8da97f675c4dcf4605e9882913c\n\nYou mean it would be forked off if this change was released?\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: not available\nType: application/pgp-signature\nSize: 181 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/6fb9de01/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-11-06T10:47:29",
                "message_text_only": "On Thu, Nov 6, 2014 at 2:38 AM, Peter Todd <pete at petertodd.org> wrote:\n> However the implementation of the STRICTENC flag simply makes pubkey\n> formats it doesn't recognize act as through the signature was invalid,\n> rather than failing the transaction. Similar to the invalid due to too\n> many sigops DoS attack I found before, this lets you fill up the mempool\n> with garbage transactions that will never be mined. OTOH I don't see any\n> way to exploit this in a v0.9.x IsStandard() transaction, so we haven't\n> shipped code that actually has this vulnerability. (dunno about\n> alt-implementations)\n\nYeah, there's even a comment in script/interpreter.h currently about\nhow STRICTENC is not softfork safe. I didn't realize that this would\nlead to the mempool accepting invalid transactions (I thought there\nwas a second validity check with the actual consensus rules; if not,\nmaybe we need to add that).\n\n> I suggest we either change STRICTENC to simply fail unrecognized pubkeys\n> immediately - similar to how non-standard signatures are treated - or\n> fail the script if the pubkey is non-standard and signature verification\n> succeeds.\n\nSounds good to me, I disliked those semantics too.\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-11-06T10:51:14",
                "message_text_only": "On Thu, Nov 6, 2014 at 2:47 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>> I suggest we either change STRICTENC to simply fail unrecognized pubkeys\n>> immediately - similar to how non-standard signatures are treated - or\n>> fail the script if the pubkey is non-standard and signature verification\n>> succeeds.\n>\n> Sounds good to me, I disliked those semantics too.\n\nOf course: do we apply this rule to all pubkeys passed to\nCHECKMULTISIG (my preference...), or just the ones that are otherwise\nchecked?\n\nThis will likely make existing outputs hard to spend as well (I don't\nhave numbers), are we okay with that? We probably can't make this a\nconsensus rule, as it may make existing P2SH outputs/addresses\nunspendable.\n\n-- \nPieter"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-06T11:04:03",
                "message_text_only": "On Thu, Nov 06, 2014 at 02:47:29AM -0800, Pieter Wuille wrote:\n> On Thu, Nov 6, 2014 at 2:38 AM, Peter Todd <pete at petertodd.org> wrote:\n> > However the implementation of the STRICTENC flag simply makes pubkey\n> > formats it doesn't recognize act as through the signature was invalid,\n> > rather than failing the transaction. Similar to the invalid due to too\n> > many sigops DoS attack I found before, this lets you fill up the mempool\n> > with garbage transactions that will never be mined. OTOH I don't see any\n> > way to exploit this in a v0.9.x IsStandard() transaction, so we haven't\n> > shipped code that actually has this vulnerability. (dunno about\n> > alt-implementations)\n> \n> Yeah, there's even a comment in script/interpreter.h currently about\n> how STRICTENC is not softfork safe.\n\nIndeed.\n\nI actually was thinking about SCRIPT_VERIFY_MINIMALDATA, CScript(), and\nFindAndDelete() Specifically that if you were to change CScript() to\nconvert single-character PUSHDATA's to OP_<number> you'd be making a\nconsensus-critical change due to how FindAndDelete() is called with a a\nCScript() signature. You didn't make that mistake, and I couldn't find a\nway to exploit it anyway, but it reminded me of this STRICTENC stuff.\n\n> I didn't realize that this would\n> lead to the mempool accepting invalid transactions (I thought there\n> was a second validity check with the actual consensus rules; if not,\n> maybe we need to add that).\n\nIt should be enough to just duplicate the CheckInputs() call in\nthe AcceptToMemoryPool() function:\n\n    if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n    {\n        return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString());\n    }\n    if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n    {\n        return error(\"AcceptToMemoryPool: : BUG FOUND Standard verify flags passed yet mandatory flags failed. %s\", hash.ToString());\n    }\n\n\n> > I suggest we either change STRICTENC to simply fail unrecognized pubkeys\n> > immediately - similar to how non-standard signatures are treated - or\n> > fail the script if the pubkey is non-standard and signature verification\n> > succeeds.\n> \n> Sounds good to me, I disliked those semantics too.\n\nOk, then given we have to support hybrid encoding for awhile longer\nanyway - I noticed your secp256k1 library supports it - lets do the\nlatter as a \"least invasive\" measure. I can't think of any case where\nthat'd be triggered other than delibrately. Doing that should make\nSTRICTENC a soft-fork-safe change, and we can decide at a later date if\nwe want to get rid of hybrid-encoded pubkeys in a further tightening of\nthe rules.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000019b3c625f667bd0b93011c0a37950545a6a8fccf0b08ae73\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/30b6343d/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "SCRIPT_VERIFY_STRICTENC and CHECKSIG NOT",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille",
                "Marius Hanne",
                "Peter Todd"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 9742
        }
    },
    {
        "title": "[Bitcoin-development] Nakapay - Proposal for payment method using client generated paycodes and federated paycode servers",
        "thread_messages": [
            {
                "author": "Michael McLees",
                "date": "2014-11-06T13:29:14",
                "message_text_only": "I sent this yesterday but it is not showing in the archives, so I'm not\nsure if I did it correctly. I sent it prior to subscribing, so perhaps that\nmucked it up.\n\nnakapay.com\n\nI have developed a system whereby a person requesting Bitcoin can make a\nspecific request (amount, address, timeframe, etc...) by only communicating\na 6 character paycode to a payer. The system does not require that users\nsign up for the service; it is open to all. Users may submit information by\nPOST via my API for which I have documentation on the website above. It is\nmy intention to convince wallet developers, merchants, exchanges, and\npayment processors to integrate my system into their products.\n\nCommon objections are a lack of use cases and a lack of security. I'd like\nto explore possible use cases and discuss security with this mailing list.\n\nWhen talking to wallet developers, I've gotten the impression that there is\na chicken and egg problem with my product. If no one uses it, they won't\ndevelop for it, and if they don't develop for it ... on and on.\n\nThere are possible monetary incentives for development as there is a\npossible revenue stream for paycode server operators.\n\nI've not used a mailing list like the before, so I'm not sure if this\nsubmission is getting where it needs to go.\n\nThank you all for your time and continued efforts to improve Bitcoin.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/ed41f70f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Nakapay - Proposal for payment method using client generated paycodes and federated paycode servers",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael McLees"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1539
        }
    },
    {
        "title": "[Bitcoin-development] The difficulty of writing consensus critical code: the SIGHASH_SINGLE bug",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-11-06T21:32:15",
                "message_text_only": "Recently wrote the following for a friend and thought others might learn\nfrom it.\n\n\n> Nope, never heard that term.  By \"bug-for-bug\" compatibility, do you mean\n> that, for each version which has a bug, each bug must behave in the *same*\n> buggy way?\n\nExactly. tl;dr: if you accept a block as valid due to a bug that others reject,\nyou're forked and the world ends.\n\nLong answer... well you reminded me I've never actually written up a good\nexample for others, and a few people have asked me for one. A great example of\nthis is the SIGHASH_SINGLE bug in the SignatureHash() function:\n\n    uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n    {\n\n<snip>\n\n        else if ((nHashType & 0x1f) == SIGHASH_SINGLE)\n        {\n            // Only lock-in the txout payee at same index as txin\n            unsigned int nOut = nIn;\n            if (nOut >= txTmp.vout.size())\n            {\n                printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n                return 1;\n            }\n<snip>\n\n        }\n\n<snip>\n\n        // Serialize and hash\n        CHashWriter ss(SER_GETHASH, 0);\n        ss << txTmp << nHashType;\n        return ss.GetHash();\n    }\n\nSo that error condition results in SignatureHash() returning 1 rather than the\nactual hash. But the consensus-critical code that implements the CHECKSIG\noperators doesn't check for that condition! Thus as long as you use the\nSIGHASH_SINGLE hashtype and the txin index is >= the number of txouts any valid\nsignature for the hash of the number 1 is considered valid!\n\nWhen I found this bug\u00b9 I used it to fork bitcoin-ruby, among others.\n(I'm not the first; I found it independently after Matt Corallo) Those\nalt-implementations handled this edge-case as an exception, which in\nturn caused the script to fail. Thus they'd reject blocks containing\ntransactions using such scripts, and be forked off the network.\n\nYou can also use this bug for something even more subtle. So the\nCHECKSIG* opcode evaluation does this:\n\n    // Drop the signature, since there's no way for a signature to sign itself\n    scriptCode.FindAndDelete(CScript(vchSig));\n\nand CHECKMULTISIG* opcode:\n\n    // Drop the signatures, since there's no way for a signature to sign itself\n    for (int k = 0; k < nSigsCount; k++)\n    {\n        valtype& vchSig = stacktop(-isig-k);\n        scriptCode.FindAndDelete(CScript(vchSig));\n    }\n\nWe used to think that code could never be triggered by a scriptPubKey or\nredeemScript, basically because there was no way to get a signature into a\ntransaction in the right place without the signature depending on the txid of\nthe transaction it was to be included in. (long story) But SIGHASH_SINGLE makes\nthat a non-issue, as you can now calculate the signature that signs '1' ahead\nof time! In a CHECKMULTISIG that signature is valid, so is included in the list\nof signatures being dropped, and thus the other signatures must take that\nremoval into account or they're invalid. Again, you've got a fork.\n\nHowever this isn't the end of it! So the way FindAndDelete() works is as\nfollows:\n\n    int CScript::FindAndDelete(const CScript& b)\n    {\n        int nFound = 0;\n        if (b.empty())\n            return nFound;\n        iterator pc = begin();\n        opcodetype opcode;\n        do\n        {\n            while (end() - pc >= (long)b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n            {\n                pc = erase(pc, pc + b.size());\n                ++nFound;\n            }\n        }\n        while (GetOp(pc, opcode));\n        return nFound;\n    }\n\nSo that's pretty ugly, but basically what's happening is the loop iterates\nthough all the opcodes in the script. Every opcode is compared at the *byte*\nlevel to the bytes in the argument. If they match those bytes are removed from\nthe script and iteration continues. The resulting script, with chunks sliced\nout of it at the byte level, is what gets hashed as part of the signature\nchecking algorithm.\n\nAs FindAndDelete() is always called with CScript(vchSig) the signature\nbeing found and deleted is reserialized. Serialization of bytes isn't\nunique; there are multiple valid encodings for PUSHDATA operations. The\nway CScript() is called the most compact encoding is used, however this\nmeans that if the script being hashed used a different encoding those\nbytes are *not* removed and thus the signature is different.\n\nAgain, if you don't get every last one of those details exactly right, you'll\nget forked.\n\n...and I'm still not done! So when you call CScript(vchSig) the relevant code\nis the following:\n\n    class CScript : public std::vector<unsigned char>\n    {\n\n<snip>\n\n        explicit CScript(const CScriptNum& b) { operator<<(b); }\n\n<snip>\n\n        CScript& operator<<(const std::vector<unsigned char>& b)\n        {\n            if (b.size() < OP_PUSHDATA1)\n            {\n                insert(end(), (unsigned char)b.size());\n            }\n            else if (b.size() <= 0xff)\n            {\n                insert(end(), OP_PUSHDATA1);\n                insert(end(), (unsigned char)b.size());\n            }\n            else if (b.size() <= 0xffff)\n            {\n                insert(end(), OP_PUSHDATA2);\n                unsigned short nSize = b.size();\n                insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n            }\n            else\n            {\n                insert(end(), OP_PUSHDATA4);\n                unsigned int nSize = b.size();\n                insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n            }\n            insert(end(), b.begin(), b.end());\n            return *this;\n        }\n\n<snip, rest of class definition>\n\n    }\n\nRecently as part of BIP62 we added the concept of a 'minimal' PUSHDATA\noperation. Using the minimum-sized PUSHDATA opcode is obvious; not so obvious\nis that there are few \"push number to stack\" opcodes that push the numbers 0\nthrough 16 and -1 to the stack, bignum encoded. If you are pushing data that\nhappens to match the latter, you're supposed to use those OP_1...OP_16 and\nOP_1NEGATE opcodes rather than a PUSHDATA.\n\nThis means that calling CScript(b'\\x81') will result in a non-standard\nscript. I know an unmerged pull-req\u00b2 related to sipa's BIP62 work has\ncode in the CScript() class to automatically do that conversion; had\nthat code shipped we'd have a potential forking bug between new and old\nversions of Bitcoin as the exact encoding of CScript() is consensus\ncritical by virtue of being called by the FindAndDelete() code!\n\nEven had we made that mistake, I'm not sure how to actually exploit it...\nFindAndDelete() is only ever called in a consensus-critical way with valid\nsignatures; the byte arrays 01, 02, ..., 81 are all totally invalid signatures.\n\nThe best I could think of would be to exploit the script verification\nflag SCRIPT_VERIFY_STRICTENC by using the little-known hybrid-pubkey\nencoding\u00b3, which I spent the past two hours looking at. However it isn't\neven soft-fork safe in the current implementation!  All I could find was\na new DoS attack\u2074, and it's not exploitable in an actual release due to\nthe pre-v0.10 IsStandard() rules. :(\n\n\n[\u00b9]: https://bitcointalk.org/index.php?topic=260595.0\n[\u00b2]: https://github.com/bitcoin/bitcoin/pull/5091\n[\u00b3]: https://github.com/bitcoin/bitcoin/blob/cd9114e5136ecc1f60baa43fffeeb632782f2353/src/test/data/script_valid.json#L739\n[\u2074]: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg06458.html\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000019121d8632bcba14de98125e8a9affc7d07c760706ba3879\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/8ea2ca39/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-11-06T21:58:04",
                "message_text_only": "Thanks Peter,\n\nHaving tried to write a bug-for-bug compatible code with Satoshi, I can only second that it is rather close to impossible. \n\nThe aim of BIP62 is noble, still it does not feel right for me to increase the complexity of the code with e.g. soft-fork-ready versioning.\nFreezing the consensus code, studying its bugs appears more appropriate to me. What we learn could define a hard fork or a better\nchain we migrate to as discussed by blockstream.\n\nTamas Blummer\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/33f7037c/attachment.sig>"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-11-06T22:05:54",
                "message_text_only": "Depends, without BIP62 a /lot/ of the even basic contracts that people\nwant to use today (or wanted to use 18 months ago) are unusable, in\nfact, without BIP62, the atomic swaps suggested as important for\nsidechains are not secure. While redoing Bitcoin in a hardfork is nice,\nits a very long-term thing, so I'm not sure about making people wait for\na large hardfork just to use payment channels.\n\nAlso, I echo the difficulty of writing consensus-compatible code and\nhighly suggest anyone with money behind an implementation that is doing\nscript verification in code that isnt Bitcoin Core rethink that decision.\n\nMatt\n\nOn 11/06/14 21:58, Tamas Blummer wrote:\n> Thanks Peter,\n> \n> Having tried to write a bug-for-bug compatible code with Satoshi, I can only second that it is rather close to impossible. \n> \n> The aim of BIP62 is noble, still it does not feel right for me to increase the complexity of the code with e.g. soft-fork-ready versioning.\n> Freezing the consensus code, studying its bugs appears more appropriate to me. What we learn could define a hard fork or a better\n> chain we migrate to as discussed by blockstream.\n> \n> Tamas Blummer"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-11-06T22:11:52",
                "message_text_only": "IMO, CHECKLOCKTIMEVERIFY should be included in that list, too.\n\nRE soft fork vs. hard fork:  It's about this time at Mike Hearn will\nchime in, on the side of hard forks.  Hard forks are in a sense much\ncleaner, and permit solving problems not otherwise solvable with a\nhard fork.  However, hard forks clearly have risks, notably the Big\nRisk akin to a US Constitutional Convention:  once you open the door,\nanything can happen, any rule no matter how \"sacred\" can be changed.\n\nSoft forks are not without their own risks, e.g. reducing some things\nto SPV levels of security.\n\nLeaning towards soft fork, but it is a good discussion to have.  A\npoorly implemented soft fork may potentially require a hard fork to\nfix rollout bugs.\n\n\nOn Thu, Nov 6, 2014 at 11:05 PM, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n> Depends, without BIP62 a /lot/ of the even basic contracts that people\n> want to use today (or wanted to use 18 months ago) are unusable, in\n> fact, without BIP62, the atomic swaps suggested as important for\n> sidechains are not secure. While redoing Bitcoin in a hardfork is nice,\n> its a very long-term thing, so I'm not sure about making people wait for\n> a large hardfork just to use payment channels.\n>\n> Also, I echo the difficulty of writing consensus-compatible code and\n> highly suggest anyone with money behind an implementation that is doing\n> script verification in code that isnt Bitcoin Core rethink that decision.\n>\n> Matt\n>\n> On 11/06/14 21:58, Tamas Blummer wrote:\n>> Thanks Peter,\n>>\n>> Having tried to write a bug-for-bug compatible code with Satoshi, I can only second that it is rather close to impossible.\n>>\n>> The aim of BIP62 is noble, still it does not feel right for me to increase the complexity of the code with e.g. soft-fork-ready versioning.\n>> Freezing the consensus code, studying its bugs appears more appropriate to me. What we learn could define a hard fork or a better\n>> chain we migrate to as discussed by blockstream.\n>>\n>> Tamas Blummer\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-11-06T22:48:54",
                "message_text_only": "On 11/06/2014 04:11 PM, Jeff Garzik wrote:\n> RE soft fork vs. hard fork:  It's about this time at Mike Hearn will\n> chime in, on the side of hard forks.  Hard forks are in a sense much\n> cleaner, and permit solving problems not otherwise solvable with a\n> hard fork.  However, hard forks clearly have risks, notably the Big\n> Risk akin to a US Constitutional Convention:  once you open the door,\n> anything can happen, any rule no matter how \"sacred\" can be changed.\n\nYes, there are risks, but those risks could be managed with appropriate\neffort. Major players could publicly commit to a set of ground rules vis\na vis what categories of changes are and are not acceptable.\n\nMaybe at some point there could even be something that resembles project\nmanagement for the Bitcoin protocol.\n\nWhy not schedule protocol upgrades every two years for the foreseeable\nfuture?\n\nSpend one year achieving broad consensus regarding what changes to make\nin the next upgrade, then spend one year in feature freeze (all future\nproposals postponed for the next cycle) then execute the upgrade.\n\nThe top priority should be fixing bugs that make specifying and\nre-implementing the protocol nearly impossible. Those kinds of changes\nshould have little difficulty achieving near-unanimous consensus.\n\nThere shouldn't be any problems separating obviously-needed changes from\nthe ones that let third parties blacklist coins, or a majority of miners\nvote to confiscate block rewards from minority, tamper with the issuance\nschedule, etc.\n\n-- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/d327ba11/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/d327ba11/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-06T23:26:49",
                "message_text_only": "On Thu, Nov 06, 2014 at 04:48:54PM -0600, Justus Ranvier wrote:\n> Why not schedule protocol upgrades every two years for the foreseeable\n> future?\n\nFor the same reason we don't do hard-forking upgrades of basically every\nprotocol on the planet on a regular basis, even when we don't have\nconsensus problems to worry about.\n\nFlag days are really rare in engineering, and for good reason.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000008f2290924a6882928d4566f487f33cc57203a6535795201\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/b19336a5/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-11-06T23:36:55",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 11/06/2014 05:26 PM, Peter Todd wrote:> For the same reason we\ndon't do hard-forking upgrades of basically every\n> protocol on the planet on a regular basis, even when we don't have \n> consensus problems to worry about.\n> \n> Flag days are really rare in engineering, and for good reason.\n\n\nThis explanation is completely incoherent.\n\nBecause Bitcoin has a extra consensus requirements, requirements which\nare really rare in engineering, the necessity of fixing bugs is even\ngreater.\n\nThere are two general ways to fix bugs: either as part of a\ncontrolled, planned, and managed process, or as a response to an\nimmediate disaster.\n\nThe alternative to scheduling and planning the upgrades which are\nnecessary to fix the bugs in the protocol, where such fixes can be\nwritten, tested, and documented at leisure, is to wait for some crisis\nand slap on another bandaid when the network breaks again (like it did\nMarch of last year).\n\nWho benefits from not fixing bugs in Bitcoin?\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBAgAGBQJUXAYVAAoJEMP3uyY4RQ21YxMH/3O+vFK2jDXV5V8IIsJnU/u1\nD4gYyVm89E0zmGTyLAUYCJGj0eg5tMyUUzu62hOECOeQuKdVi+mbkLi4TiF0sHIb\n8k25MgqJgzH/021eoI2g2w1FrDlZut02LNX/V09+owd1yhp+SEXZ3/+HlqsZXhsv\n/u9u5OayzhGlzS6apQtrosl5P+KIquHqIbtwBtPOb2rvlL0miJ6sRcAH2JCXCBDT\nHMcswMtIGZbgqL/K7e/6vH7dUWdp0866RZXvt7aWGNUgvxHbGMs+zsnxp4nNslxM\nwqL71gTmtMnLcw0GtqmXPjcjo+adrPnqp45xc9lSt23PGjxxfR0FKYIPb2uZdq8=\n=9GOY\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/d0dd1f4d/attachment.bin>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-07T00:03:10",
                "message_text_only": "On Thu, Nov 06, 2014 at 05:36:55PM -0600, Justus Ranvier wrote:\n> This explanation is completely incoherent.\n> \n> Because Bitcoin has a extra consensus requirements, requirements which\n> are really rare in engineering, the necessity of fixing bugs is even\n> greater.\n> \n> There are two general ways to fix bugs: either as part of a\n> controlled, planned, and managed process, or as a response to an\n> immediate disaster.\n> \n> The alternative to scheduling and planning the upgrades which are\n> necessary to fix the bugs in the protocol, where such fixes can be\n> written, tested, and documented at leisure, is to wait for some crisis\n> and slap on another bandaid when the network breaks again (like it did\n> March of last year).\n\nThe protocol is what the protocol is; the bugs are when you don't match\nthe protocol.\n\n> Who benefits from not fixing bugs in Bitcoin?\n\nWe can bring up politics if you want.\n\nIn the current model, the specification *is* the protocol, and the\nBitcoin Core team is scared to death of changing anything; they've got\nvery little real power. Soft-forks are the minimum-viable way of making\nchanges to the protocol, and it's very clear how they get adopted:\nminerr consensus. They're also a fundemental way of changing the\nprotocol that is impossible to prevent, so you might as well use it.\n\nHard-forks require political consensus to achieve, and the way you\ncreate that political consensus is by creating committes, groups,\nassociations... Foundations. Every last one of those things requires\ncentralization and political power.\n\nYou know, the smartest thing the Bitcoin Foundation could do if they\nwanted to cement their place in the Bitcoin ecosystem as a power broker\nwould be to setup a program of periodic hard-forks, say every year or\ntwo, and then manage the committees that decide what goes into those\nhard-forks. That they haven't suggested that yet is a sign that they're\neither not evil, or they don't understand Bitcoin very well.\n\nI think programmers find this reality hard to accept, because they're\nmostly interested in writing code that'll get widely used. To them it's\nhard to accept that the Bitcoin protocol *is* a few thousand lines of\nC++ code, and they're not good enough to write their own implementation\nand make it match; if we replaced programmers with writers we might get\nthe equally bizzare and pointless situation of people taking perfectly\ngood RFCs and rewriting them in their own words.\n\nIf you do care about keeping the politics of Bitcoin development free\nfrom centralized control you should do what I advised the Dark Wallet\nteam to do a year ago: fork Bitcoin Core and change the\nnon-consensus-critical code that implements policy. I've done this\nmyself in a minor way with my replace-by-fee(1) version. Luke-Jr has\nalso done this with his Eligius branch, a fork that something like 30%\nof the Bitcoin hashing power appear to run. (Discus Fish has been mining\nnon-standard transactions(2) lately)\n\nMultiple *forks* of the Bitcoin Core reference client that are actually\ngetting used by miners and other users ensures that no one group\nmaintaining such a fork has the ability to change anything without\nstrong consensus. Forking the codebase, rather than rewriting it, best\nensures that your code actually implements the protocol properly, is\nsafe to use for mining, and actually gets used.\n\nRewriting Bitcoin Core is a fun project, but it's terrible politics.\n\n1) https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.9.3\n2) https://blockchain.info/tx/e24a4085c54a6362e615f8eab758c12d80e488b73757e6d2b8ab6bfc8be7007e\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000008f2290924a6882928d4566f487f33cc57203a6535795201\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/7aeb9626/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-11-07T08:07:47",
                "message_text_only": "Peter,\n\nforking would work best with a freeze of the consensus code. Do you see any chance for that?\n\nTamas Blummer\n\n\nOn Nov 7, 2014, at 1:03 AM, Peter Todd <pete at petertodd.org> wrote:\n> Forking the codebase, rather than rewriting it, best\n> ensures that your code actually implements the protocol properly, is\n> safe to use for mining, and actually gets used.\n> \n> Rewriting Bitcoin Core is a fun project, but it's terrible politics.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141107/3ea9f778/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-07T08:48:10",
                "message_text_only": "On Fri, Nov 07, 2014 at 09:07:47AM +0100, Tamas Blummer wrote:\n> Peter,\n> \n> forking would work best with a freeze of the consensus code. Do you see any chance for that?\n\nTo a first approximation the consensus code *is* frozen; if we introduce\nany consensus changes into it at this point it's due to a mistake, not\nintentionally.\n\nOf course, that's not including the two serious soft-fork proposals in\nthe air right now, Pieter Wuille's BIP62 and my CHECKLOCKTIMEVERIFY.\nHowever dealing with proposed changes like those in an environment where\nthe competing implementations all use essentially the same\nconsensus-critical code is much easier than in an environment where they\ndon't; I say this on both a technical and political level.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000c901eb1b6b765519b99c3afd7a9062ff4cfa29666ce140d\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141107/8f333438/attachment.sig>"
            },
            {
                "author": "Cl\u00e9ment Elbaz",
                "date": "2014-11-07T11:30:22",
                "message_text_only": "Thinking out loud here : would it make sense to separate the consensus code\ninto some kind of \"Bitcoin Kernel\" (similar to the Linux Kernel) project\nthat could be used by anyone ?\n\nBitcoin Core (and any other application wishing to do so) could be based on\nit.\n\nThe kernel would just contain the absolute minimum code for reaching\nconsensus, leaving every other aspects of the implementation to the\napplications built with it.\n\nIt would be stateless : it would provide an interface to submit a\nblock/transaction to be validated, including the context needed to validate\nit (the previously validated blocks referenced by this block/transaction).\n\nWhat do you think ?\n\nCl\u00e9ment\n\nLe Fri Nov 07 2014 at 9:49:05 AM, Peter Todd <pete at petertodd.org> a \u00e9crit :\n\nOn Fri, Nov 07, 2014 at 09:07:47AM +0100, Tamas Blummer wrote:\n> > Peter,\n> >\n> > forking would work best with a freeze of the consensus code. Do you see\n> any chance for that?\n>\n> To a first approximation the consensus code *is* frozen; if we introduce\n> any consensus changes into it at this point it's due to a mistake, not\n> intentionally.\n>\n> Of course, that's not including the two serious soft-fork proposals in\n> the air right now, Pieter Wuille's BIP62 and my CHECKLOCKTIMEVERIFY.\n> However dealing with proposed changes like those in an environment where\n> the competing implementations all use essentially the same\n> consensus-critical code is much easier than in an environment where they\n> don't; I say this on both a technical and political level.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000000000000c901eb1b6b765519b99c3afd7a9062ff4cfa29666ce140d\n> ------------------------------------------------------------\n> ------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141107/f74e0973/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-07T11:47:19",
                "message_text_only": "On Fri, Nov 07, 2014 at 11:30:22AM +0000, Cl\u00e9ment Elbaz wrote:\n> Thinking out loud here : would it make sense to separate the consensus code\n> into some kind of \"Bitcoin Kernel\" (similar to the Linux Kernel) project\n> that could be used by anyone ?\n\nThat's a pretty old idea, and we're working on it. First step is a\nstand-alone script verification library:\n\nhttps://github.com/theuni/bitcoin/blob/da18a0266c4de76c2a461cc2984aa2fa066c42f5/src/script/bitcoinconsensus.h\n\n#ifndef H_BITCOIN_BITCOINCONSENSUS\n#define H_BITCOIN_BITCOINCONSENSUS\n\n#if defined(BUILD_BITCOIN_INTERNAL) && defined(HAVE_CONFIG_H)\n#include \"config/bitcoin-config.h\"\n  #if defined(_WIN32)\n    #if defined(DLL_EXPORT)\n      #if defined(HAVE_FUNC_ATTRIBUTE_DLLEXPORT)\n        #define EXPORT_SYMBOL __declspec(dllexport)\n      #else\n        #define EXPORT_SYMBOL\n      #endif\n    #endif\n  #elif defined(HAVE_FUNC_ATTRIBUTE_VISIBILITY)\n    #define EXPORT_SYMBOL __attribute__ ((visibility (\"default\")))\n  #endif\n#elif defined(MSC_VER) && !defined(STATIC_LIBBITCOINCONSENSUS)\n  #define EXPORT_SYMBOL __declspec(dllimport)\n#endif\n\n#ifndef EXPORT_SYMBOL\n  #define EXPORT_SYMBOL\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#else\n#include <stdbool.h>\n#endif\n\n/** Script verification flags */\nenum\n{\n    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n};\n\n/// Returns true if the input nIn of the serialized transaction pointed to by\n/// txTo correctly spends the scriptPubKey pointed to by scriptPubKey under\n/// the additional constraints specified by flags.\nEXPORT_SYMBOL bool bitcoinconsensus_verify_script(const unsigned char *scriptPubKey, const unsigned int scriptPubKeyLen,\n                                    const unsigned char *txTo        , const unsigned int txToLen,\n                                    const unsigned int nIn, const unsigned int flags);\n\nEXPORT_SYMBOL unsigned int bitcoinconsensus_version();\n\n#ifdef __cplusplus\n} // extern \"C\"\n#endif\n\n#undef EXPORT_SYMBOL\n\n#endif // H_BITCOIN_BITCOINCONSENSUS\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000001208038fd7130083ff118147890dbb37913ffa83c1f48cd\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141107/d096ce3e/attachment.sig>"
            },
            {
                "author": "Wladimir",
                "date": "2014-11-07T12:01:03",
                "message_text_only": "On Fri, Nov 7, 2014 at 12:30 PM, Cl\u00e9ment Elbaz <clem.ds at gmail.com> wrote:\n> Thinking out loud here : would it make sense to separate the consensus code\n> into some kind of \"Bitcoin Kernel\" (similar to the Linux Kernel) project\n> that could be used by anyone ?\n\nYes, we're moving in that direction. First with a script verification\nlibrary in 0.10, which will be extended to other parts of the\nconsensus by 0.11 and after that.\n\nWladimir"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-11-07T16:52:20",
                "message_text_only": ">\n> > Who benefits from not fixing bugs in Bitcoin?\n>\n> We can bring up politics if you want.\n\n\nNo, please don't. That question was rhetorical, not an invitation for you\nto try and convince bystanders that anyone who disagrees with you is a\nshadowy Agent Of Centralisation or an idiot. You use that tactic way too\nmuch: it's obnoxious and you need to stop it.\n\nHard forks vs soft forks are *purely* about whether you drag along old\nnodes in a quasi-broken state. They do not reduce total work needed by the\ncommunity one iota. Non-miners who wish to reject a soft fork can easily\nrun a node that does so, if they wanted to - the voting mechanism still\nboils down to \"which side of the fork do I accept in my economic activity\".\nIt's certainly garbage to claim that the reason to want to avoid soft forks\nis being an Evil Centralised Foundation:  this is about a set of\nengineering tradeoffs only.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141107/7239fc3f/attachment.html>"
            },
            {
                "author": "Jean-Pierre Rupp",
                "date": "2014-11-15T04:43:43",
                "message_text_only": "Jean-Pierre Rupp from Haskoin here.\n\nI support a hard fork to fix consensus bugs.  The Bitcoin protocol should eventually get to a state where it is documented in a clear and understandable fashion.  Bugs are bugs, and are the enemy.  We should not attempt to live with them.  We should be opening a process of thoroughly documenting and reparing consensus bugs on a separate branch, and eventually schedule a hard fork.\n\nThere are two good things that will come out of that:\n\n1. Known bugs will be gone, and\n2. We will have a process in place to get rid of future bugs in eventual future hard forks.\n\nWe do not need to become paranoid about the ramifications of a hard fork, or how it will open the door for unwanted changes in the protocol.  We are discussing about removing bugs, and bugs that could be used to exploit the network in ways that may not be immediately obvious.\n\nThere are 144 blocks generated per day by groups of miners that are mostly identified.  It is not going to be a titanic task to get consensus from the main mining pools on fixing this at the mining level.  We must address how the fixes for some of these bugs affect other types of software such as wallets.  I can think that fixing the bug where OP_CHECKMULTISIG pops an extra value from the stash could be more traumatic, since it requires anything that creates and validates multi-signature transactions to change the way it works.  Hardware wallets could be impacted.  But most of the consensus bugs would not affect the way the vast majority of bitcoin transactions that are currently created.  Therefore it should not be traumatic at all for users, but only really affect mining pools, who would only need to be convinced to upgrade their bitcoind well in advance, which seems to me that it is not an issue at all.\n\nWe should not compare doing a Bitcoin hard-fork with doing something like deploying IPv6 world-wide or enforcing TLS and SPF on every SMTP connection.  We should not conflate Bitcoin with other network protocols.  The Bitcoin protocol is actually relatively easy to upgrade at this point.  Let's take advantage of this fact.\n\nOn 06/11/14 15:36, Justus Ranvier wrote:\n> Because Bitcoin has a extra consensus requirements, requirements which\n> are really rare in engineering, the necessity of fixing bugs is even\n> greater.\n\n-- \nBe Happy :)\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x310A8A5B.asc\nType: application/pgp-keys\nSize: 4087 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141114/5d4c8096/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141114/5d4c8096/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-06T23:19:50",
                "message_text_only": "On Thu, Nov 06, 2014 at 11:11:52PM +0100, Jeff Garzik wrote:\n> IMO, CHECKLOCKTIMEVERIFY should be included in that list, too.\n> \n> RE soft fork vs. hard fork:  It's about this time at Mike Hearn will\n> chime in, on the side of hard forks.  Hard forks are in a sense much\n> cleaner, and permit solving problems not otherwise solvable with a\n> hard fork.  However, hard forks clearly have risks, notably the Big\n> Risk akin to a US Constitutional Convention:  once you open the door,\n> anything can happen, any rule no matter how \"sacred\" can be changed.\n\nI think people in this community often miss the serious political and\nlegal ramifications of hard-forks. Being in the social position of being\nable to succesfully pull off hard-forks, particularly for new features,\nis clear evidence that you have de-facto control over the system.\nRegulators around the world appear to be going in directions that would\nmake that control subject to regulation and licensing, e.g. the European\nBanking Association proposals, and initial Bitlicense proposals.\n\nEqually, look how hard-forks - known as flag days elsewhere - are\ngenerally considered to be dangerous and worth avoiding in other\ncontexts due to simple engineering reasons. It's just easier to upgrade\nsystems in backward compatible ways, especially when they incorporate\nfeatures specifically to make that possible. (as does bitcoin!)\n\n> Soft forks are not without their own risks, e.g. reducing some things\n> to SPV levels of security.\n\nThis is a misconception; you can't prevent soft-forks from happening, so\nyou always have an SPV level of security by that standard.\n\nPeople put *way* too much trust in small numbers of confirmations...\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000094d543907eaf0f94f4ff5f4c760b3552d84ff811cd9053\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/8d184471/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-06T23:12:25",
                "message_text_only": "On Thu, Nov 06, 2014 at 10:05:54PM +0000, Matt Corallo wrote:\n> Depends, without BIP62 a /lot/ of the even basic contracts that people\n> want to use today (or wanted to use 18 months ago) are unusable, in\n> fact, without BIP62, the atomic swaps suggested as important for\n> sidechains are not secure. While redoing Bitcoin in a hardfork is nice,\n> its a very long-term thing, so I'm not sure about making people wait for\n> a large hardfork just to use payment channels.\n\nBIP62 is a less-than-ideal way of making contracts secure against\nmalleability as it relies on a \"whack-a-mole\" approach to security that\nis insecure if any flaw is missed. If you only wanted to make contracts\nsecure, you'd either implement a new SignatureHash() that could leave\nout the prevout field in favor of hashing the previous input's CTxOut()\nstructure, and/or implement the significantly more limited\nCHECKLOCKTIMEVERIFY.\n\nEqually BIP62 fails at making more complex types of contracts secure.\nFor instance suppose I had a multi-step protocol that required more than\ntwo transactions:\n\n    tx1: Alice -> (Alice, Bob)\n    tx1_refund: (Alice, Bob) -> Alice\n\n    tx2: (Alice, Bob) -> Charlie\n    tx2_refund: (Alice, Bob) -> Bob\n\ntx1 can only be modified by Alice, so tx1_refund is secure. However the\nsecond stage, where the output of tx1 is spent by tx2, with a refund\ntransaction giving the funds back to Bob, can't be made secure as BIP62\ncan't prevent Alice from changing her signature, getting tx2' mined\ninstead, and making tx2_refund invalid.\n\nOTOH a new form of signature hash that was a signature on tx2.vout\nstructure rather than it's txid would be secure, as tx2_refund would be\nvalid regardless of tx2's actual txid.\n\nObviously there are good reasons to not use such signature hashes in the\ngeneral case, as they imply you can't reuse scriptPubKeys securely, but\nthat's a minor problem for purpose-built contract protocols. It's\ncertainly a much more minor problem then the huge number of holes\npossible with BIP62.\n\nBIP62 does make life easier for wallet authors as they don't have to\ndeal with malleability - maybe! - but for contracts it's a bad design.\n\n> Also, I echo the difficulty of writing consensus-compatible code and\n> highly suggest anyone with money behind an implementation that is doing\n> script verification in code that isnt Bitcoin Core rethink that decision.\n\nFWIW I've done due-dilligence reviews for investors on projects and\ncompanies that have re-implemented Bitcoin Core consensus-critical code,\nand every time my review lists doing so as a major red flag.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000166801ed3959dde6b7d979735c290e7c4271ae3cf75ced63\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141106/03ace0b4/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-11-07T02:04:57",
                "message_text_only": "On Thu, Nov 6, 2014 at 11:12 PM, Peter Todd <pete at petertodd.org> wrote:\n> BIP62 does make life easier for wallet authors as they don't have to\n> deal with malleability - maybe! -\n\nYes, I agree for most contract purposes CTLV is what you want to be\nusing, instead of refund transactions beyond being more clearly\ncorrect, it shrinks the protocol state machine by one step.\n\nThough BIP62 also achieves the secondary goal of making required\nimplementation behaviour more explicit (e.g. the parts enforced in all\ntransactions), and that shouldn't be discounted.\n\nThey're somewhat orthogonal, somwhat complementary things."
            }
        ],
        "thread_summary": {
            "title": "The difficulty of writing consensus critical code: the SIGHASH_SINGLE bug",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Tamas Blummer",
                "Wladimir",
                "Jean-Pierre Rupp",
                "Cl\u00e9ment Elbaz",
                "Mike Hearn",
                "Peter Todd",
                "Gregory Maxwell",
                "Matt Corallo",
                "Justus Ranvier"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 37405
        }
    },
    {
        "title": "[Bitcoin-development] DS Deprecation Window",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2014-11-06T23:50:53",
                "message_text_only": "Added a section \"Confidence to include tx1\" and subsection \"Deliberate \ndelay attack\"\nhttps://github.com/dgenr8/out-there/blob/master/ds-dep-win.md\n\nI found that under concerted attack, if miner excludes any transaction \nfirst seen less than 30 seconds ago, or double-spent less than 30 \nseconds after first seen, he should expect 5 of 10000 nodes to delay his \nblock.\n\nHal Finney remarked that this idea would need \"careful analysis.\" More \nhelp is very welcome.\nhttps://bitcointalk.org/index.php?topic=3441.msg48789#msg48789\n\nCheers!\n\nOn 10/28/2014 10:38 AM, Tom Harding wrote:\n> So, I think it will be possible to quantify and target the risk of \n> including tx1...\n>"
            }
        ],
        "thread_summary": {
            "title": "DS Deprecation Window",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tom Harding"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 670
        }
    },
    {
        "title": "[Bitcoin-development] Update on mobile 2-factor wallets",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-11-08T16:04:48",
                "message_text_only": "Here is a summary of current developments in the space of decentralised\n2-factor Bitcoin wallets. I figured some people here might find it\ninteresting.\n\nThere has been very nice progress in the last month or two. Decentralised\n2FA wallets run on a desktop/laptop and have a (currently always Android)\nsmartphone app to go with them. Compromise of the wallet requires\ncompromise of both devices.\n\nAlon Muroch and Chris Pacia have made huge progress on \"Bitcoin\nAuthenticator\", their (HD) wallet app. The desktop side runs on\nWin/Mac/Linux and the mobile side runs on Android. Sending money from the\ndesktop triggers a push notification to the mobile side, which presents the\ntransaction for confirmation. Additionally the desktop wallet has a variety\nof other features like OneName integration. It's currently in alpha, but I\nsuspect it will be quite popular once released due to its focus on UI and\nthe simple mobile security model. I've tried it out and it worked fine.\n\nhttps://www.bitcoinauthenticator.org/\nhttps://github.com/cpacia/BitcoinAuthenticator/commits/master    (mobile)\nhttps://github.com/negedzuregal/BitcoinAuthWallet   (desktop)\n\nBitcoin Authenticator uses P2SH/CHECKMULTISIG to provide the 2-factor\nfunctionality. However, this has various downsides that are well known:\n less support for the address type and larger transactions that waste block\nchain space + result in higher fees.\n\nTo solve this problem Christopher Mann and Daniel Loebenberger from Uni\nBonn have ported the efficient DSA 2-of-2 signing protocol by MacKenzie and\nReiter to ECDSA, and implemented their own desktop/Android wallet app pair\nshowing that it works and has good enough performance. This means that P2SH\n/ CHECKMULTISIG is no longer required for the two factor auth case, and\nthus it's as cheap as using regular addresses.\n\nhttps://github.com/ChristopherMann/2FactorWallet\nhttps://eprint.iacr.org/2014/629.pdf\n\nTheir protocol uses an interesting combination of ECDSA, Paillier\nhomomorphic encryption and some zero knowledge proofs to build a working\nsolution for the 2-of-2 case only. Their app bootstraps from a QR code that\nincludes a TLS public key and IP address of the desktop: the mobile app\nthen connects to it directly, renders the transaction and performs the\nprotocol when the user confirms. The protocol is online, so both devices\nmust be physically present.\n\nTheir code is liberally licensed and looks easy to integrate with Alon and\nChris' more user focused work, as both projects are built with Android and\nthe latest bitcoinj. If someone is interested, merging Christopher/Daniel's\ncode into the bitcoinj multisig framework would be a useful project, and\nwould make it easier for wallet devs to benefit from this work. I can write\na design doc to follow if needed.\n\nCurrently, neither of these projects implement support for BIP70, so the\nscreen you see when signing the transaction is hardly user friendly or\nsecure: you just have to trust that the destination address you're paying\nto isn't tampered with. Support for sending a full payment request between\ndevices is the clear next step once these wallets have obtained a\nreasonable user base and are stable.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141108/47d8aff3/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-11-08T16:21:02",
                "message_text_only": "Overall, super duper awesome.  :)  Tweeted this post.\n\nI do have a concern about 2-of-2 arrangements.  To me, this screams\n\"twice as fragile\" if not done properly; and I've seen a few naive\nimplementations in the field that seemed quite fragile.\n\n2FA/2-of-2 does solve the common problem of single device compromise.\nIt also makes funds unspendable if -either- device's keys become lost.\n\n\n\nOn Sat, Nov 8, 2014 at 5:04 PM, Mike Hearn <mike at plan99.net> wrote:\n> Here is a summary of current developments in the space of decentralised\n> 2-factor Bitcoin wallets. I figured some people here might find it\n> interesting.\n>\n> There has been very nice progress in the last month or two. Decentralised\n> 2FA wallets run on a desktop/laptop and have a (currently always Android)\n> smartphone app to go with them. Compromise of the wallet requires compromise\n> of both devices.\n>\n> Alon Muroch and Chris Pacia have made huge progress on \"Bitcoin\n> Authenticator\", their (HD) wallet app. The desktop side runs on\n> Win/Mac/Linux and the mobile side runs on Android. Sending money from the\n> desktop triggers a push notification to the mobile side, which presents the\n> transaction for confirmation. Additionally the desktop wallet has a variety\n> of other features like OneName integration. It's currently in alpha, but I\n> suspect it will be quite popular once released due to its focus on UI and\n> the simple mobile security model. I've tried it out and it worked fine.\n>\n> https://www.bitcoinauthenticator.org/\n> https://github.com/cpacia/BitcoinAuthenticator/commits/master    (mobile)\n> https://github.com/negedzuregal/BitcoinAuthWallet   (desktop)\n>\n> Bitcoin Authenticator uses P2SH/CHECKMULTISIG to provide the 2-factor\n> functionality. However, this has various downsides that are well known:\n> less support for the address type and larger transactions that waste block\n> chain space + result in higher fees.\n>\n> To solve this problem Christopher Mann and Daniel Loebenberger from Uni Bonn\n> have ported the efficient DSA 2-of-2 signing protocol by MacKenzie and\n> Reiter to ECDSA, and implemented their own desktop/Android wallet app pair\n> showing that it works and has good enough performance. This means that P2SH\n> / CHECKMULTISIG is no longer required for the two factor auth case, and thus\n> it's as cheap as using regular addresses.\n>\n> https://github.com/ChristopherMann/2FactorWallet\n> https://eprint.iacr.org/2014/629.pdf\n>\n> Their protocol uses an interesting combination of ECDSA, Paillier\n> homomorphic encryption and some zero knowledge proofs to build a working\n> solution for the 2-of-2 case only. Their app bootstraps from a QR code that\n> includes a TLS public key and IP address of the desktop: the mobile app then\n> connects to it directly, renders the transaction and performs the protocol\n> when the user confirms. The protocol is online, so both devices must be\n> physically present.\n>\n> Their code is liberally licensed and looks easy to integrate with Alon and\n> Chris' more user focused work, as both projects are built with Android and\n> the latest bitcoinj. If someone is interested, merging Christopher/Daniel's\n> code into the bitcoinj multisig framework would be a useful project, and\n> would make it easier for wallet devs to benefit from this work. I can write\n> a design doc to follow if needed.\n>\n> Currently, neither of these projects implement support for BIP70, so the\n> screen you see when signing the transaction is hardly user friendly or\n> secure: you just have to trust that the destination address you're paying to\n> isn't tampered with. Support for sending a full payment request between\n> devices is the clear next step once these wallets have obtained a reasonable\n> user base and are stable.\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-11-08T16:37:51",
                "message_text_only": "Yes. I think one of the next things we need is a library that produces nice\nand attractive PDFs of \"wallet certificates\" so it's easy to print out a\npaper backup.\n\nBut the whole field of secure key escrow needs more research. Banking gives\npeople the very nice property that you can lose literally everything except\nyour face and still retain access to your money, so people feel very safe\nwith that. Matching that experience doesn't seem possible at the moment, so\nbeing your own bank will continue to seem much riskier than just using a\nreal one.\nOn 8 Nov 2014 17:21, \"Jeff Garzik\" <jgarzik at bitpay.com> wrote:\n\n> Overall, super duper awesome.  :)  Tweeted this post.\n>\n> I do have a concern about 2-of-2 arrangements.  To me, this screams\n> \"twice as fragile\" if not done properly; and I've seen a few naive\n> implementations in the field that seemed quite fragile.\n>\n> 2FA/2-of-2 does solve the common problem of single device compromise.\n> It also makes funds unspendable if -either- device's keys become lost.\n>\n>\n>\n> On Sat, Nov 8, 2014 at 5:04 PM, Mike Hearn <mike at plan99.net> wrote:\n> > Here is a summary of current developments in the space of decentralised\n> > 2-factor Bitcoin wallets. I figured some people here might find it\n> > interesting.\n> >\n> > There has been very nice progress in the last month or two. Decentralised\n> > 2FA wallets run on a desktop/laptop and have a (currently always Android)\n> > smartphone app to go with them. Compromise of the wallet requires\n> compromise\n> > of both devices.\n> >\n> > Alon Muroch and Chris Pacia have made huge progress on \"Bitcoin\n> > Authenticator\", their (HD) wallet app. The desktop side runs on\n> > Win/Mac/Linux and the mobile side runs on Android. Sending money from the\n> > desktop triggers a push notification to the mobile side, which presents\n> the\n> > transaction for confirmation. Additionally the desktop wallet has a\n> variety\n> > of other features like OneName integration. It's currently in alpha, but\n> I\n> > suspect it will be quite popular once released due to its focus on UI and\n> > the simple mobile security model. I've tried it out and it worked fine.\n> >\n> > https://www.bitcoinauthenticator.org/\n> > https://github.com/cpacia/BitcoinAuthenticator/commits/master\n> (mobile)\n> > https://github.com/negedzuregal/BitcoinAuthWallet   (desktop)\n> >\n> > Bitcoin Authenticator uses P2SH/CHECKMULTISIG to provide the 2-factor\n> > functionality. However, this has various downsides that are well known:\n> > less support for the address type and larger transactions that waste\n> block\n> > chain space + result in higher fees.\n> >\n> > To solve this problem Christopher Mann and Daniel Loebenberger from Uni\n> Bonn\n> > have ported the efficient DSA 2-of-2 signing protocol by MacKenzie and\n> > Reiter to ECDSA, and implemented their own desktop/Android wallet app\n> pair\n> > showing that it works and has good enough performance. This means that\n> P2SH\n> > / CHECKMULTISIG is no longer required for the two factor auth case, and\n> thus\n> > it's as cheap as using regular addresses.\n> >\n> > https://github.com/ChristopherMann/2FactorWallet\n> > https://eprint.iacr.org/2014/629.pdf\n> >\n> > Their protocol uses an interesting combination of ECDSA, Paillier\n> > homomorphic encryption and some zero knowledge proofs to build a working\n> > solution for the 2-of-2 case only. Their app bootstraps from a QR code\n> that\n> > includes a TLS public key and IP address of the desktop: the mobile app\n> then\n> > connects to it directly, renders the transaction and performs the\n> protocol\n> > when the user confirms. The protocol is online, so both devices must be\n> > physically present.\n> >\n> > Their code is liberally licensed and looks easy to integrate with Alon\n> and\n> > Chris' more user focused work, as both projects are built with Android\n> and\n> > the latest bitcoinj. If someone is interested, merging\n> Christopher/Daniel's\n> > code into the bitcoinj multisig framework would be a useful project, and\n> > would make it easier for wallet devs to benefit from this work. I can\n> write\n> > a design doc to follow if needed.\n> >\n> > Currently, neither of these projects implement support for BIP70, so the\n> > screen you see when signing the transaction is hardly user friendly or\n> > secure: you just have to trust that the destination address you're\n> paying to\n> > isn't tampered with. Support for sending a full payment request between\n> > devices is the clear next step once these wallets have obtained a\n> reasonable\n> > user base and are stable.\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141108/c0117d8f/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-11-08T18:43:48",
                "message_text_only": "Thanks Mike I'll have to read that threshold signature paper.\n\nI am familiar with the Princeton threshold signature but I was under the\nimpression a single key needed to be generated on a single device then\nsplit and distributed.\n\nDoes this scheme work the same way?\n\nI would have concerns about generating a key on a compromised computer.\nOn Nov 8, 2014 11:05 AM, \"Mike Hearn\" <mike at plan99.net> wrote:\n\n> Here is a summary of current developments in the space of decentralised\n> 2-factor Bitcoin wallets. I figured some people here might find it\n> interesting.\n>\n> There has been very nice progress in the last month or two. Decentralised\n> 2FA wallets run on a desktop/laptop and have a (currently always Android)\n> smartphone app to go with them. Compromise of the wallet requires\n> compromise of both devices.\n>\n> Alon Muroch and Chris Pacia have made huge progress on \"Bitcoin\n> Authenticator\", their (HD) wallet app. The desktop side runs on\n> Win/Mac/Linux and the mobile side runs on Android. Sending money from the\n> desktop triggers a push notification to the mobile side, which presents the\n> transaction for confirmation. Additionally the desktop wallet has a variety\n> of other features like OneName integration. It's currently in alpha, but I\n> suspect it will be quite popular once released due to its focus on UI and\n> the simple mobile security model. I've tried it out and it worked fine.\n>\n> https://www.bitcoinauthenticator.org/\n> https://github.com/cpacia/BitcoinAuthenticator/commits/master    (mobile)\n> https://github.com/negedzuregal/BitcoinAuthWallet   (desktop)\n>\n> Bitcoin Authenticator uses P2SH/CHECKMULTISIG to provide the 2-factor\n> functionality. However, this has various downsides that are well known:\n>  less support for the address type and larger transactions that waste block\n> chain space + result in higher fees.\n>\n> To solve this problem Christopher Mann and Daniel Loebenberger from Uni\n> Bonn have ported the efficient DSA 2-of-2 signing protocol by MacKenzie and\n> Reiter to ECDSA, and implemented their own desktop/Android wallet app pair\n> showing that it works and has good enough performance. This means that P2SH\n> / CHECKMULTISIG is no longer required for the two factor auth case, and\n> thus it's as cheap as using regular addresses.\n>\n> https://github.com/ChristopherMann/2FactorWallet\n> https://eprint.iacr.org/2014/629.pdf\n>\n> Their protocol uses an interesting combination of ECDSA, Paillier\n> homomorphic encryption and some zero knowledge proofs to build a working\n> solution for the 2-of-2 case only. Their app bootstraps from a QR code that\n> includes a TLS public key and IP address of the desktop: the mobile app\n> then connects to it directly, renders the transaction and performs the\n> protocol when the user confirms. The protocol is online, so both devices\n> must be physically present.\n>\n> Their code is liberally licensed and looks easy to integrate with Alon and\n> Chris' more user focused work, as both projects are built with Android and\n> the latest bitcoinj. If someone is interested, merging Christopher/Daniel's\n> code into the bitcoinj multisig framework would be a useful project, and\n> would make it easier for wallet devs to benefit from this work. I can write\n> a design doc to follow if needed.\n>\n> Currently, neither of these projects implement support for BIP70, so the\n> screen you see when signing the transaction is hardly user friendly or\n> secure: you just have to trust that the destination address you're paying\n> to isn't tampered with. Support for sending a full payment request between\n> devices is the clear next step once these wallets have obtained a\n> reasonable user base and are stable.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141108/b5d4844c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-11-08T19:36:07",
                "message_text_only": ">\n> I am familiar with the Princeton threshold signature but I was under the\n> impression a single key needed to be generated on a single device then\n> split and distributed.\n>\n> Does this scheme work the same way?\n>\nNo, it doesn't. Neither device ever sees as master private key.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141108/e99df222/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Update on mobile 2-factor wallets",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Chris Pacia"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 17266
        }
    },
    {
        "title": "[Bitcoin-development] BIP draft - Auxiliary Header Format",
        "thread_messages": [
            {
                "author": "Tier Nolan",
                "date": "2014-11-08T23:45:27",
                "message_text_only": "I created a draft BIP detailing a way to add auxiliary headers to Bitcoin\nin a bandwidth efficient way.  The overhead per auxiliary header is only\naround 104 bytes per header.  This is much smaller than would be required\nby embedding the hash of the header in the coinbase of the block.\n\nIt is a soft fork and it uses the last transaction in the block to store\nthe hash of the auxiliary header.\n\nIt makes use of the fact that the last transaction in the block has a much\nless complex Merkle branch than the other transactions.\n\nhttps://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141108/883f1146/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-11-10T00:39:20",
                "message_text_only": "I made some changes to the draft.  The merkleblock now has the auxiliary\nheader information too.\n\nThere is a tradeoff between overhead and delayed transactions.  Is 12.5%\ntransactions being delayed to the next block unacceptable?  Would adding\npadding transactions be an improvement?\n\nCreating the \"seed\" transactions is an implementation headache.\n\nEach node needs to have control over an UTXO to create the final\ntransaction in the block that has the digest of the auxiliary header.  This\nmeans that it is not possible to simply start a node and have it mine.  It\nhas to somehow be given the private key.  If two nodes were given the same\nkey by accident, then one could end up blocking the other.\n\nOn one end of the scale is adding a transaction with a few thousand outputs\ninto the block chain.  The signatures for locktime restricted transactions\nthat spend those outputs could be hard-coded into the software.  This is\nthe easiest to implement, but would mean a large table of signatures.  The\nperson who generates the signature list would have to be trusted not to\nspend the outputs early.\n\nThe other end of the scale means that mining nodes need to include a\nwallets to manage their UTXO entry.  Miners can split a zero value output\ninto lots of outputs, if they wish.\n\nA middle ground would be for nodes to be able to detect the special\ntransactions and use them.  A server could send out timelocked transactions\nthat pay to a particular address but the transaction would be timelocked.\nThe private key for the output would be known.  However, miners who mine\nversion 2 blocks wouldn't be able to spend them early.\n\n\nOn Sat, Nov 8, 2014 at 11:45 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> I created a draft BIP detailing a way to add auxiliary headers to Bitcoin\n> in a bandwidth efficient way.  The overhead per auxiliary header is only\n> around 104 bytes per header.  This is much smaller than would be required\n> by embedding the hash of the header in the coinbase of the block.\n>\n> It is a soft fork and it uses the last transaction in the block to store\n> the hash of the auxiliary header.\n>\n> It makes use of the fact that the last transaction in the block has a much\n> less complex Merkle branch than the other transactions.\n>\n> https://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141110/b7145eaa/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-11-10T00:52:05",
                "message_text_only": "Some initial comments...\n\nTying in the protocol changes is really confusing and the fact that\nthey seem to be required out the gates would seemingly make this much\nharder to deploy.   Is there a need to do that? Why can't the p2p part\nbe entirely separate from the comitted data?\n\nOn Mon, Nov 10, 2014 at 12:39 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n> I made some changes to the draft.  The merkleblock now has the auxiliary\n> header information too.\n>\n> There is a tradeoff between overhead and delayed transactions.  Is 12.5%\n> transactions being delayed to the next block unacceptable?  Would adding\n> padding transactions be an improvement?\n>\n> Creating the \"seed\" transactions is an implementation headache.\n>\n> Each node needs to have control over an UTXO to create the final transaction\n> in the block that has the digest of the auxiliary header.  This means that\n> it is not possible to simply start a node and have it mine.  It has to\n> somehow be given the private key.  If two nodes were given the same key by\n> accident, then one could end up blocking the other.\n>\n> On one end of the scale is adding a transaction with a few thousand outputs\n> into the block chain.  The signatures for locktime restricted transactions\n> that spend those outputs could be hard-coded into the software.  This is the\n> easiest to implement, but would mean a large table of signatures.  The\n> person who generates the signature list would have to be trusted not to\n> spend the outputs early.\n>\n> The other end of the scale means that mining nodes need to include a wallets\n> to manage their UTXO entry.  Miners can split a zero value output into lots\n> of outputs, if they wish.\n>\n> A middle ground would be for nodes to be able to detect the special\n> transactions and use them.  A server could send out timelocked transactions\n> that pay to a particular address but the transaction would be timelocked.\n> The private key for the output would be known.  However, miners who mine\n> version 2 blocks wouldn't be able to spend them early.\n>\n>\n> On Sat, Nov 8, 2014 at 11:45 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>>\n>> I created a draft BIP detailing a way to add auxiliary headers to Bitcoin\n>> in a bandwidth efficient way.  The overhead per auxiliary header is only\n>> around 104 bytes per header.  This is much smaller than would be required by\n>> embedding the hash of the header in the coinbase of the block.\n>>\n>> It is a soft fork and it uses the last transaction in the block to store\n>> the hash of the auxiliary header.\n>>\n>> It makes use of the fact that the last transaction in the block has a much\n>> less complex Merkle branch than the other transactions.\n>>\n>> https://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n>>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-11-10T11:42:17",
                "message_text_only": "The aheaders message is required to make use of the data by SPV clients.\nThis could be in a separate BIP though.  I wanted to show that the merkle\npath to the aux-header transaction could be efficiently encoded, but a\nreference to the other BIP would be sufficient.\n\nFor the other messages, the problem is that the hash of the aux header is\npart of the block, but the aux header itself is not.  That means that the\naux header has to be sent for validation of the block.\n\nI will change it so that the entire aux-header is encoded in the block.  I\nthink encoding the hash in the final transaction and the full aux-header in\nthe 2nd last one is the best way to do it.  This has the added advantage of\nreducing the changes to block data storage, since the aux-header doesn't\nhave to be stored separately.\n\nOn Mon, Nov 10, 2014 at 12:52 AM, Gregory Maxwell <gmaxwell at gmail.com>\nwrote:\n\n> Some initial comments...\n>\n> Tying in the protocol changes is really confusing and the fact that\n> they seem to be required out the gates would seemingly make this much\n> harder to deploy.   Is there a need to do that? Why can't the p2p part\n> be entirely separate from the comitted data?\n>\n> On Mon, Nov 10, 2014 at 12:39 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n> > I made some changes to the draft.  The merkleblock now has the auxiliary\n> > header information too.\n> >\n> > There is a tradeoff between overhead and delayed transactions.  Is 12.5%\n> > transactions being delayed to the next block unacceptable?  Would adding\n> > padding transactions be an improvement?\n> >\n> > Creating the \"seed\" transactions is an implementation headache.\n> >\n> > Each node needs to have control over an UTXO to create the final\n> transaction\n> > in the block that has the digest of the auxiliary header.  This means\n> that\n> > it is not possible to simply start a node and have it mine.  It has to\n> > somehow be given the private key.  If two nodes were given the same key\n> by\n> > accident, then one could end up blocking the other.\n> >\n> > On one end of the scale is adding a transaction with a few thousand\n> outputs\n> > into the block chain.  The signatures for locktime restricted\n> transactions\n> > that spend those outputs could be hard-coded into the software.  This is\n> the\n> > easiest to implement, but would mean a large table of signatures.  The\n> > person who generates the signature list would have to be trusted not to\n> > spend the outputs early.\n> >\n> > The other end of the scale means that mining nodes need to include a\n> wallets\n> > to manage their UTXO entry.  Miners can split a zero value output into\n> lots\n> > of outputs, if they wish.\n> >\n> > A middle ground would be for nodes to be able to detect the special\n> > transactions and use them.  A server could send out timelocked\n> transactions\n> > that pay to a particular address but the transaction would be timelocked.\n> > The private key for the output would be known.  However, miners who mine\n> > version 2 blocks wouldn't be able to spend them early.\n> >\n> >\n> > On Sat, Nov 8, 2014 at 11:45 PM, Tier Nolan <tier.nolan at gmail.com>\n> wrote:\n> >>\n> >> I created a draft BIP detailing a way to add auxiliary headers to\n> Bitcoin\n> >> in a bandwidth efficient way.  The overhead per auxiliary header is only\n> >> around 104 bytes per header.  This is much smaller than would be\n> required by\n> >> embedding the hash of the header in the coinbase of the block.\n> >>\n> >> It is a soft fork and it uses the last transaction in the block to store\n> >> the hash of the auxiliary header.\n> >>\n> >> It makes use of the fact that the last transaction in the block has a\n> much\n> >> less complex Merkle branch than the other transactions.\n> >>\n> >>\n> https://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n> >>\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141110/b338b6e6/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-11-10T21:21:58",
                "message_text_only": "I updated the BIP to cover only the specification of the transactions that\nneed to be added.  I will create a network BIP tomorrow.\n\nOn Mon, Nov 10, 2014 at 11:42 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> The aheaders message is required to make use of the data by SPV clients.\n> This could be in a separate BIP though.  I wanted to show that the merkle\n> path to the aux-header transaction could be efficiently encoded, but a\n> reference to the other BIP would be sufficient.\n>\n> For the other messages, the problem is that the hash of the aux header is\n> part of the block, but the aux header itself is not.  That means that the\n> aux header has to be sent for validation of the block.\n>\n> I will change it so that the entire aux-header is encoded in the block.  I\n> think encoding the hash in the final transaction and the full aux-header in\n> the 2nd last one is the best way to do it.  This has the added advantage of\n> reducing the changes to block data storage, since the aux-header doesn't\n> have to be stored separately.\n>\n>\n> On Mon, Nov 10, 2014 at 12:52 AM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n>\n>> Some initial comments...\n>>\n>> Tying in the protocol changes is really confusing and the fact that\n>> they seem to be required out the gates would seemingly make this much\n>> harder to deploy.   Is there a need to do that? Why can't the p2p part\n>> be entirely separate from the comitted data?\n>>\n>> On Mon, Nov 10, 2014 at 12:39 AM, Tier Nolan <tier.nolan at gmail.com>\n>> wrote:\n>> > I made some changes to the draft.  The merkleblock now has the auxiliary\n>> > header information too.\n>> >\n>> > There is a tradeoff between overhead and delayed transactions.  Is 12.5%\n>> > transactions being delayed to the next block unacceptable?  Would adding\n>> > padding transactions be an improvement?\n>> >\n>> > Creating the \"seed\" transactions is an implementation headache.\n>> >\n>> > Each node needs to have control over an UTXO to create the final\n>> transaction\n>> > in the block that has the digest of the auxiliary header.  This means\n>> that\n>> > it is not possible to simply start a node and have it mine.  It has to\n>> > somehow be given the private key.  If two nodes were given the same key\n>> by\n>> > accident, then one could end up blocking the other.\n>> >\n>> > On one end of the scale is adding a transaction with a few thousand\n>> outputs\n>> > into the block chain.  The signatures for locktime restricted\n>> transactions\n>> > that spend those outputs could be hard-coded into the software.  This\n>> is the\n>> > easiest to implement, but would mean a large table of signatures.  The\n>> > person who generates the signature list would have to be trusted not to\n>> > spend the outputs early.\n>> >\n>> > The other end of the scale means that mining nodes need to include a\n>> wallets\n>> > to manage their UTXO entry.  Miners can split a zero value output into\n>> lots\n>> > of outputs, if they wish.\n>> >\n>> > A middle ground would be for nodes to be able to detect the special\n>> > transactions and use them.  A server could send out timelocked\n>> transactions\n>> > that pay to a particular address but the transaction would be\n>> timelocked.\n>> > The private key for the output would be known.  However, miners who mine\n>> > version 2 blocks wouldn't be able to spend them early.\n>> >\n>> >\n>> > On Sat, Nov 8, 2014 at 11:45 PM, Tier Nolan <tier.nolan at gmail.com>\n>> wrote:\n>> >>\n>> >> I created a draft BIP detailing a way to add auxiliary headers to\n>> Bitcoin\n>> >> in a bandwidth efficient way.  The overhead per auxiliary header is\n>> only\n>> >> around 104 bytes per header.  This is much smaller than would be\n>> required by\n>> >> embedding the hash of the header in the coinbase of the block.\n>> >>\n>> >> It is a soft fork and it uses the last transaction in the block to\n>> store\n>> >> the hash of the auxiliary header.\n>> >>\n>> >> It makes use of the fact that the last transaction in the block has a\n>> much\n>> >> less complex Merkle branch than the other transactions.\n>> >>\n>> >>\n>> https://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n>> >>\n>> >\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> >\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141110/29e6ac20/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-11-10T23:39:23",
                "message_text_only": "I have added the network BIP too.  It only has the aheaders message and the\nextra field for getheaders.\n\nhttps://github.com/TierNolan/bips/blob/aux_header/bip-aux-header-network.mediawiki\n\nThe transaction definitions are still at:\n\nhttps://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n\nOn Mon, Nov 10, 2014 at 9:21 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> I updated the BIP to cover only the specification of the transactions that\n> need to be added.  I will create a network BIP tomorrow.\n>\n> On Mon, Nov 10, 2014 at 11:42 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>\n>> The aheaders message is required to make use of the data by SPV clients.\n>> This could be in a separate BIP though.  I wanted to show that the merkle\n>> path to the aux-header transaction could be efficiently encoded, but a\n>> reference to the other BIP would be sufficient.\n>>\n>> For the other messages, the problem is that the hash of the aux header is\n>> part of the block, but the aux header itself is not.  That means that the\n>> aux header has to be sent for validation of the block.\n>>\n>> I will change it so that the entire aux-header is encoded in the block.\n>> I think encoding the hash in the final transaction and the full aux-header\n>> in the 2nd last one is the best way to do it.  This has the added advantage\n>> of reducing the changes to block data storage, since the aux-header doesn't\n>> have to be stored separately.\n>>\n>>\n>> On Mon, Nov 10, 2014 at 12:52 AM, Gregory Maxwell <gmaxwell at gmail.com>\n>> wrote:\n>>\n>>> Some initial comments...\n>>>\n>>> Tying in the protocol changes is really confusing and the fact that\n>>> they seem to be required out the gates would seemingly make this much\n>>> harder to deploy.   Is there a need to do that? Why can't the p2p part\n>>> be entirely separate from the comitted data?\n>>>\n>>> On Mon, Nov 10, 2014 at 12:39 AM, Tier Nolan <tier.nolan at gmail.com>\n>>> wrote:\n>>> > I made some changes to the draft.  The merkleblock now has the\n>>> auxiliary\n>>> > header information too.\n>>> >\n>>> > There is a tradeoff between overhead and delayed transactions.  Is\n>>> 12.5%\n>>> > transactions being delayed to the next block unacceptable?  Would\n>>> adding\n>>> > padding transactions be an improvement?\n>>> >\n>>> > Creating the \"seed\" transactions is an implementation headache.\n>>> >\n>>> > Each node needs to have control over an UTXO to create the final\n>>> transaction\n>>> > in the block that has the digest of the auxiliary header.  This means\n>>> that\n>>> > it is not possible to simply start a node and have it mine.  It has to\n>>> > somehow be given the private key.  If two nodes were given the same\n>>> key by\n>>> > accident, then one could end up blocking the other.\n>>> >\n>>> > On one end of the scale is adding a transaction with a few thousand\n>>> outputs\n>>> > into the block chain.  The signatures for locktime restricted\n>>> transactions\n>>> > that spend those outputs could be hard-coded into the software.  This\n>>> is the\n>>> > easiest to implement, but would mean a large table of signatures.  The\n>>> > person who generates the signature list would have to be trusted not to\n>>> > spend the outputs early.\n>>> >\n>>> > The other end of the scale means that mining nodes need to include a\n>>> wallets\n>>> > to manage their UTXO entry.  Miners can split a zero value output into\n>>> lots\n>>> > of outputs, if they wish.\n>>> >\n>>> > A middle ground would be for nodes to be able to detect the special\n>>> > transactions and use them.  A server could send out timelocked\n>>> transactions\n>>> > that pay to a particular address but the transaction would be\n>>> timelocked.\n>>> > The private key for the output would be known.  However, miners who\n>>> mine\n>>> > version 2 blocks wouldn't be able to spend them early.\n>>> >\n>>> >\n>>> > On Sat, Nov 8, 2014 at 11:45 PM, Tier Nolan <tier.nolan at gmail.com>\n>>> wrote:\n>>> >>\n>>> >> I created a draft BIP detailing a way to add auxiliary headers to\n>>> Bitcoin\n>>> >> in a bandwidth efficient way.  The overhead per auxiliary header is\n>>> only\n>>> >> around 104 bytes per header.  This is much smaller than would be\n>>> required by\n>>> >> embedding the hash of the header in the coinbase of the block.\n>>> >>\n>>> >> It is a soft fork and it uses the last transaction in the block to\n>>> store\n>>> >> the hash of the auxiliary header.\n>>> >>\n>>> >> It makes use of the fact that the last transaction in the block has a\n>>> much\n>>> >> less complex Merkle branch than the other transactions.\n>>> >>\n>>> >>\n>>> https://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n>>> >>\n>>> >\n>>> >\n>>> >\n>>> ------------------------------------------------------------------------------\n>>> >\n>>> > _______________________________________________\n>>> > Bitcoin-development mailing list\n>>> > Bitcoin-development at lists.sourceforge.net\n>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> >\n>>>\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141110/40985484/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-11-12T19:00:48",
                "message_text_only": "I was going to look into creating reference code for this.\n\nThe first BIP could be reasonably easy, since it just needs to check for\nthe presence of the 2 special transactions.\n\nThat would mean that it doesn't actually create version 3 blocks at all.\n\nIdeally, I would make it easy for miners to mine version 3 blocks.  I could\nadd a new field to the getblocktemplate that has the 2 transactions ready\nto go.\n\nWhat do pools actually use for generating blocks.  I assume it's custom\ncode but that they use (near) standard software for the memory pool?\n\n\nOn Mon, Nov 10, 2014 at 11:39 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> I have added the network BIP too.  It only has the aheaders message and\n> the extra field for getheaders.\n>\n>\n> https://github.com/TierNolan/bips/blob/aux_header/bip-aux-header-network.mediawiki\n>\n> The transaction definitions are still at:\n>\n> https://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n>\n> On Mon, Nov 10, 2014 at 9:21 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>\n>> I updated the BIP to cover only the specification of the transactions\n>> that need to be added.  I will create a network BIP tomorrow.\n>>\n>> On Mon, Nov 10, 2014 at 11:42 AM, Tier Nolan <tier.nolan at gmail.com>\n>> wrote:\n>>\n>>> The aheaders message is required to make use of the data by SPV\n>>> clients.  This could be in a separate BIP though.  I wanted to show that\n>>> the merkle path to the aux-header transaction could be efficiently encoded,\n>>> but a reference to the other BIP would be sufficient.\n>>>\n>>> For the other messages, the problem is that the hash of the aux header\n>>> is part of the block, but the aux header itself is not.  That means that\n>>> the aux header has to be sent for validation of the block.\n>>>\n>>> I will change it so that the entire aux-header is encoded in the block.\n>>> I think encoding the hash in the final transaction and the full aux-header\n>>> in the 2nd last one is the best way to do it.  This has the added advantage\n>>> of reducing the changes to block data storage, since the aux-header doesn't\n>>> have to be stored separately.\n>>>\n>>>\n>>> On Mon, Nov 10, 2014 at 12:52 AM, Gregory Maxwell <gmaxwell at gmail.com>\n>>> wrote:\n>>>\n>>>> Some initial comments...\n>>>>\n>>>> Tying in the protocol changes is really confusing and the fact that\n>>>> they seem to be required out the gates would seemingly make this much\n>>>> harder to deploy.   Is there a need to do that? Why can't the p2p part\n>>>> be entirely separate from the comitted data?\n>>>>\n>>>> On Mon, Nov 10, 2014 at 12:39 AM, Tier Nolan <tier.nolan at gmail.com>\n>>>> wrote:\n>>>> > I made some changes to the draft.  The merkleblock now has the\n>>>> auxiliary\n>>>> > header information too.\n>>>> >\n>>>> > There is a tradeoff between overhead and delayed transactions.  Is\n>>>> 12.5%\n>>>> > transactions being delayed to the next block unacceptable?  Would\n>>>> adding\n>>>> > padding transactions be an improvement?\n>>>> >\n>>>> > Creating the \"seed\" transactions is an implementation headache.\n>>>> >\n>>>> > Each node needs to have control over an UTXO to create the final\n>>>> transaction\n>>>> > in the block that has the digest of the auxiliary header.  This means\n>>>> that\n>>>> > it is not possible to simply start a node and have it mine.  It has to\n>>>> > somehow be given the private key.  If two nodes were given the same\n>>>> key by\n>>>> > accident, then one could end up blocking the other.\n>>>> >\n>>>> > On one end of the scale is adding a transaction with a few thousand\n>>>> outputs\n>>>> > into the block chain.  The signatures for locktime restricted\n>>>> transactions\n>>>> > that spend those outputs could be hard-coded into the software.  This\n>>>> is the\n>>>> > easiest to implement, but would mean a large table of signatures.  The\n>>>> > person who generates the signature list would have to be trusted not\n>>>> to\n>>>> > spend the outputs early.\n>>>> >\n>>>> > The other end of the scale means that mining nodes need to include a\n>>>> wallets\n>>>> > to manage their UTXO entry.  Miners can split a zero value output\n>>>> into lots\n>>>> > of outputs, if they wish.\n>>>> >\n>>>> > A middle ground would be for nodes to be able to detect the special\n>>>> > transactions and use them.  A server could send out timelocked\n>>>> transactions\n>>>> > that pay to a particular address but the transaction would be\n>>>> timelocked.\n>>>> > The private key for the output would be known.  However, miners who\n>>>> mine\n>>>> > version 2 blocks wouldn't be able to spend them early.\n>>>> >\n>>>> >\n>>>> > On Sat, Nov 8, 2014 at 11:45 PM, Tier Nolan <tier.nolan at gmail.com>\n>>>> wrote:\n>>>> >>\n>>>> >> I created a draft BIP detailing a way to add auxiliary headers to\n>>>> Bitcoin\n>>>> >> in a bandwidth efficient way.  The overhead per auxiliary header is\n>>>> only\n>>>> >> around 104 bytes per header.  This is much smaller than would be\n>>>> required by\n>>>> >> embedding the hash of the header in the coinbase of the block.\n>>>> >>\n>>>> >> It is a soft fork and it uses the last transaction in the block to\n>>>> store\n>>>> >> the hash of the auxiliary header.\n>>>> >>\n>>>> >> It makes use of the fact that the last transaction in the block has\n>>>> a much\n>>>> >> less complex Merkle branch than the other transactions.\n>>>> >>\n>>>> >>\n>>>> https://github.com/TierNolan/bips/blob/aux_header/bip-aux-header.mediawiki\n>>>> >>\n>>>> >\n>>>> >\n>>>> >\n>>>> ------------------------------------------------------------------------------\n>>>> >\n>>>> > _______________________________________________\n>>>> > Bitcoin-development mailing list\n>>>> > Bitcoin-development at lists.sourceforge.net\n>>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>> >\n>>>>\n>>>\n>>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141112/ffdcdb4c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP draft - Auxiliary Header Format",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tier Nolan",
                "Gregory Maxwell"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 26303
        }
    },
    {
        "title": "[Bitcoin-development] [ann] Live Bitcoin Core commits on #bitcoin-commits",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-11-13T17:25:14",
                "message_text_only": "All,\n\nAs of now you can join #bitcoin-commits on freenode to be notified of\ncommits to the bitcoin/bitcoin repository. Thanks to Luke-Jr for\ntelling me how to set this up.\n\nRegards,\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Live Bitcoin Core commits on #bitcoin-commits",
            "categories": [
                "Bitcoin-development",
                "ann"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 190
        }
    },
    {
        "title": "[Bitcoin-development] Proposal: PoW-based throttling of addresses (was: Outbound connections rotation)",
        "thread_messages": [
            {
                "author": "Isidor Zeuner",
                "date": "2014-11-13T22:52:43",
                "message_text_only": "Hi Mike, hi Ivan, hi all,\n\n>\n> >\n> > Since when? This has been a recognized approach since people called it\n> > \"hashcash\" ([1] - before cryptocurrencies were even invented).\n> >\n>\n> I only know of one site that worked the way you propose: TicketMaster, a\n> long time ago. They used it as a less harsh form of blocking for IPs that\n> they strongly suspected were bots, which is what you suggest indeed. But\n> 99% of the hard work of that system was in scoring the connections. The\n> actual PoW part didn't work that great because bots have much more patience\n> than humans do.\n>\n\nI think the proposal back then was targeted at e-mail\ndelivery. Interestingly, one of today's most common approaches\nagainst unsolicited e-mails, DKIM, can also be considered as being a\nrelative to PoW if we consider that bulk mailer operators don't\nlike it because of the CPU burden it creates. But with e-mail, people\ntend to see it even as an advantage to also have identification of the\nparticipants, so it's no surprise that pure PoW approaches did not\nachieve importance.\n\nWith cryptocurrencies, it's different. Combating DoS without\ncreating additional ways to identify users is something where many\ninterested users can be found.\n\nHumans may have less patience than an attacker who just wants to\nachieve his DoS objective in a batch processing manner. But humans\nalso don't care if their patience is put to the test by having to\nwait until one Tor exit node is finally unbanned, or by waiting for\nthe connection PoW to finish because it temporarily got harder due to\nan attack.\n\nNo doubt that a dedicated attacker can have an (even big) advantage\nresource-wise. But this is no different between the case where both\ncomputing power and the number of Tor exit nodes are the resource to\ncompete on, and the case where it's just the resource of Tor exit\nnodes that gets exhausted. But by giving users the choice of proving\ntheir dedication through a connecting PoW challenge, I would expect\nusers having more possibilities of finding their way through a\nDoS-imposed partial outage. After all, the possibly powerful attacker\nhas to invest his resources into making all access routes to the\nnetwork unusable, while for well-behaved users, every single access\nroute that still works is useful. Therefore, I think it makes sense to\nadd more degrees of freedom.\n\n> Other sites also use proofs of work, but they're CAPTCHAs i.e. human PoWs.\n> And unfortunately those don't work very well these days either :(\n>\n\nNone of these measures are perfect. But I think we can achieve a\nsolution that is good enough. Hopefully without integrating a\ncentralized captcha provider ;)\n\n>\n> > To be clear, I do not propose to have _all_ clients do complicated\n> > work. Just those using an address which has been misbehaving.\n>\n>\n> Yes, I understand, but then you're back to scoring clients - the hard part\n> - and the only question is do you slow down that client by sticking them at\n> the bottom of a work queue or by requiring them to solve a difficult PoW.\n> The best approach is the first one because that scales naturally .... you\n> don't have to define some notion of misbehaviour, you just prioritise\n> amongst clients.\n>\n\nOn the one hand, I think that to some extent, the work queue based\nthrottling just moves the problem from making it hard to connect\ntowards making it hard to do something useful with your connection.\n\nBut as I touched above, I see the merit that comes from the PoW-based\napproach in allowing well-behaving users to explore multiple axes of\nputting effort into connecting. Expanding on this approach, I think\nthat the work queue based approach and PoW could be combined, leading\nto three measures the nodes can use for throttling misbehaving\nclients:\n\n* scaling up connection PoW\n* throttling the connection on the work queue\n* throttling the IP on the work queue\n\nThe challenging part would be to properly tune the extent of the three\nmeasures in order to throttle attackers' messages with minimum\nimpact to well-behaving users.\n\n> The current notion of \"misbehaviour\" is only somewhat useful. It's easy to\n> classify reasonable behaviour as harmful and shoot yourself in the foot. We\n> managed this at least once back in 2010 when we actually released a version\n> of Bitcoin that interpreted a normal request to serve the block chain as a\n> DoS attack! It couldn't serve the chain at all! Additionally many things\n> that can be interpreted as an attack like sending a message with a bad\n> signature can also be caused just by mistakes, or version skew during\n> software upgrades. So it's very tricky to get this right.\n>\n\nSure, but that's a different topic. It may not be even realistic\nto have a model which can be reduced to deciding between purposeful\nmisbehaviour and regular usage. But an attacker who wants to cut off\nIPs from the network will always use whatever misbehaviour that leads\nto maximum penalty, meaning that it is a decision between not\npenalizing at all, or doing so.\n\n> That's important because one quite common way big sites suffer DoS attacks\n> is by accidentally having real users create a DoS \"attack\" by e.g. pushing\n> a bad software update, or by having sudden and unexpected press-driven\n> growth, etc. You really don't want to force users to sit around waiting and\n> wasting battery. It's better to serve as many requests as you can up to\n> your absolute limit and try to ensure as many of them as possible are good.\n>\n\nI'd say, better have a few Tor-based users realize that they\nshould look for a fixed update because their client has to do PoW for\nconnecting, rather than having all Tor-based users locked out.\n\nStill, users should be notified that something is unusual.\n\n>\n> > Exactly. Not every user may like to have a cookie by which an observer\n> >>\n> > might get the chance to even link his connection to his previous\n> > connections, thereby allowing the discussed deanonymization technique\n> > to get even more effective.\n> >\n>\n> I doubt it matters. Any DoS attack that's powerful enough to use up most of\n> the networks resources is probably being driven by a botnet of some kind,\n> and *all* legitimate users will lose in an even fight against a botnet.\n>\n> Cookies can be somewhat anonymized. For example a cookie that is merely a\n> signature over a timestamp of some kind (doesn't have to be an secp256k1\n> signature) can be normalised to the day or week. So you can prove you've\n> been using Bitcoin for say 3 years but it doesn't pin you down precisely.\n>\n> This isn't perfect:  attackers can and do \"age\" accounts before preparing\n> for abuse. Proof of UTXO is another way to rank users. If you're richer\n> you're presumably more important for the network to process than poor\n> people. However you end up back at a CPU imbalance. PoW can possibly play a\n> role here to even it out: the cost of submitting a UTXO proof should be at\n> least equal to the cost of verifying the signature, but that is a PoW small\n> enough that users would not notice.\n>\n\nBoth cookies and Proof of UTXO sound like interesting approaches, but\nI still see additional possibilities to deduce information about the\nuser identity here. They could be a nice addition for a better\napproach to handle DoS attacks, but I would disagree when it comes to\nonly providing possibly privacy-weakening approaches.\n\nI'm looking forward to your comments.\n\nBest regards,\n\nIsidor"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-11-18T12:06:17",
                "message_text_only": "DKIM is hardly a PoW; signing is cheap and gets cheaper all the time. I\nused to work in the email business and big bulk mailers all spent far more\nCPU time on other aspects of their business, the overhead of DKIM is\nirrelevant.\n\nPoW didn't work in the anti spam world because it (amongst other problems)\nmixes up bulk mail and spam, which are not the same thing. Very common\nconceptual error though.\n\n\n> humans also don't care if their patience is put to the test by having to\n> wait until one Tor exit node is finally unbanned, or by waiting for\n> the connection PoW to finish because it temporarily got harder due to\n> an attack.\n>\n\nThey don't? This is news to me. Humans always care. One of the surest ways\nto hurt your online business is to have a slow website because lots of\nusers will give up rather than tolerate a few seconds of latency. At Google\nwe actually had formulas that could relate a change in web search latency\nto revenue impact.\n\nSo humans very much care! I actually doubt that any reasonable mobile\nwallet will use the new Tor support bitcoinj by default, for example,\nbecause it imposes quite some startup cost when the downloaded consensus\nisn't fresh, and slow startup is painful. It could be optimised but nobody\nhas done that. For long running desktop wallets where startup time can be\namortised over hours or days, I guess it makes more sense.\n\nI agree that PoW tokens might make sense as a last resort if nodes can't\neven put a connection at the bottom of a priority queue and you're right\nthat it may be a useful tool in a shared toolbox. However if we reach the\npoint where users are all being PoWd then we're already pretty hosed and\nit's probably close to game over :(\n\nI'd say, better have a few Tor-based users realize that they\n> should look for a fixed update because their client has to do PoW for\n> connecting, rather than having all Tor-based users locked out.\n>\n\nI think Tor is a separate issue. If an attacker wants to either force all\nusers off Tor, or force them via a handful of exits, then this attack is\nquite detectable already and wallets could already decide to simply give up\non Tor at that point automatically. No PoW needed. Well, ideally, nodes\nwould disconnect a banned IP with some kind of notice saying why it was\nbanned, but that's a small improvement.\n\nStill, users should be notified that something is unusual.\n>\n\nIf we're talking mainstream success then users by and large do not care\nabout technical mumbo jumbo like peer to peer networks or Tor (\"that's the\nthing drug dealers and pedos use???\"). They just want the damn thing to\nwork reliably. So notifying them is unhelpful - it's not actionable. They\nwould just see a message like\n\n   \"The wizzle sprocket is kaput - keep working? YES NO\"\n\nand then everyone presses yes.\n\nStuff like Tor plays well in the crypto community but it's very hard to\nactually switch on by default, because it needs to have absolutely no cost\nat all, otherwise you'll just annoy the vast majority who don't want to pay\nfor very abstract and hard to quantify privacy benefits.\n\nSo I think it's worth considering the DoS problem and Tor somewhat\nseparately, even though they're related. The solution to a crafty\nprivacy-attacking DoS that tries to make exits useless is don't use Tor at\nall. The solution to \"the entire Bitcoin network is under attack\" is much\nharder. It's unclear to me we can ever solve it convincingly - banks don't\nconnect together using private networks in which anonymity is forbidden\nbecause they're stupid. They do it because it solves DoS attacks in one\nsolid move and they feel it's worth the high cost.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141118/1a3b4e06/attachment.html>"
            },
            {
                "author": "Isidor Zeuner",
                "date": "2014-11-27T03:29:24",
                "message_text_only": "Hi Mike,\n\nthanks for your assessment.\n\nPlease find my replies in-line:\n> DKIM is hardly a PoW; signing is cheap and gets cheaper all the\n> time. I used to work in the email business and big bulk mailers all spent\n> far more CPU time on other aspects of their business, the overhead of\n> DKIM is irrelevant.\n>\n\nWell, as long as bulk mailing companies run around investing into\nper-destination DKIM toggling, stating that they want to cut down CPU\nusage due to crypto processing, I tend to believe that it can have an\nimportant impact depending on the setup. Of course, I cannot rule out\nthe possibility that they would be better off investing into profiling\nCPU usage, and/or exploring a higher ROI possibly coming from using\nmore CPU time on other processing. I see no point neglecting an issue\njust because there are business models where it is irrelevant,\nthough.\n\n> PoW didn't work in the anti spam world because it (amongst other\n> problems) mixes up bulk mail and spam, which are not the same\n> thing. Very common conceptual error though.\n>\n\nI did not say so, either. But bulk mailing and e-mail spam are not\northogonal with respect to the technical characteristics that make\nthem possible. And nor are DKIM and PoW/hash-cash fully orthogonal.\n\nI like the objections you raised. Avoiding DKIM because of the CPU\ncosts involved might be as groundless as stating \"we don't use\nHTTPS in order to save CPU time\". Still, these substantiations can be\nfound in the wild, and they won't disappear because we discuss\nthem here on a theoretical level.\n\nIf you assume conceptual errors, though, I would suggest we discuss\nthe e-mail topic off-list, though. I simplify things a bit in order to\nnot bore the group with too much text about non-Bitcoin stuff, but\nthis does not mean that I'm not familiar with, or am not open for\ndiscussing the subtle differences of different approaches that have\nbeen researched in the e-mail business.\n\n>\n>> humans also don't care if their patience is put to the test by\n>> having to wait until one Tor exit node is finally unbanned, or by\n>> waiting for the connection PoW to finish because it temporarily got\n>> harder due to an attack.\n>>\n>\n> They don't? This is news to me. Humans always care. One of the\n> surest ways to hurt your online business is to have a slow website\n> because lots of users will give up rather than tolerate a few seconds\n> of latency. At Google we actually had formulas that could relate a\n> change in web search latency to revenue impact.\n>\n\nYou might want to re-read my statement more carefully. I did not say\nthey don't care about delays, but I do say that they don't\ncare where the delays come from.\n\nIt is a known fact that Google will also penalize web sites which have\nhigh latencies, so the top results appear as being also of technical\nquality. But neither the users nor Google will care if the web site is\nslow because the site owner did not allocate proper resources for\nrunning the frontend quickly, or if the database server is making\nthings slow.\n\n> So humans very much care! I actually doubt that any reasonable\n> mobile wallet will use the new Tor support bitcoinj by default, for\n> example, because it imposes quite some startup cost when the\n> downloaded consensus isn't fresh, and slow startup is painful. It\n> could be optimised but nobody has done that. For long running desktop\n> wallets where startup time can be amortised over hours or days, I\n> guess it makes more sense.\n>\n\nI agree that improving on the performance of the consensus\nbootstrapping logic is an interesting topic.\n\n> I agree that PoW tokens might make sense as a last resort if nodes\n> can't even put a connection at the bottom of a priority queue and\n> you're right that it may be a useful tool in a shared\n> toolbox. However if we reach the point where users are all being PoWd\n> then we're already pretty hosed and it's probably close to\n> game over :(\n>\n\nI don't think this was ever about _all_ IPs suffering from DoS\nmeasures. But I do think that Bitcoin will already suffer if we get to\na point where it is practically useless when being used over Tor, or\nwhere this is only possible by immediately sacrificing the privacy\nimprovement Tor introduces.\n\n>> I'd say, better have a few Tor-based users realize that they\n>> should look for a fixed update because their client has to do PoW\n>> for connecting, rather than having all Tor-based users locked out.\n>>\n>\n> I think Tor is a separate issue. If an attacker wants to either\n> force all users off Tor, or force them via a handful of exits, then\n> this attack is quite detectable already and wallets could already\n> decide to simply give up on Tor at that point automatically. No PoW\n> needed. Well, ideally, nodes would disconnect a banned IP with some\n> kind of notice saying why it was banned, but that's a small\n> improvement.\n>\n\nI fully agree. A ban notice could also make it easier to track down\nDoS handling issues triggered by incompatible updates, and possibly\nmake it harder for someone to issue bans for malicious reasons without\nbeing noticed. Also, I see it as an important step towards a modern\nsecurity policy, because it would emphasize that the Bitcoin network\ncan be kept secure with minimum obscurity.\n\n>> Still, users should be notified that something is unusual.\n>>\n>\n> If we're talking mainstream success then users by and large do\n> not care about technical mumbo jumbo like peer to peer networks or Tor\n> (\"that's the thing drug dealers and pedos use???\"). They just want\n> the damn thing to work reliably. So notifying them is unhelpful -\n> it's not actionable. They would just see a message like\n>\n>    \"The wizzle sprocket is kaput - keep working? YES NO\"\n>\n> and then everyone presses yes.\n>\n\nAs you say, the mainstream user won't care about technical mumbo\njumbo like Tor, so he won't be likely to run Bitcoin over Tor. So,\nthe most likely cases where he would encounter the notification would\nbe:\n\n* incompatible update\n\n* his machine / network is compromised and connects to Bitcoin,\n  triggering DoS measures\n\nIn both cases, he would consider it as important to take action, so\neven a scary notification might be the way to go.\n\nThe non-mainstream user who is willing to dive into the technical\ndetails of running Bitcoin over Tor securely will generally be more\nlikely to be able to make more differentiated decisions about such an\nanomaly, but I cannot see why we would want him to not have proper\ntools to deal with the situation, or not to be informed about\nsomething unusual happening.\n\n> Stuff like Tor plays well in the crypto community but it's very\n> hard to actually switch on by default, because it needs to have absolutely\n> no cost at all, otherwise you'll just annoy the vast majority who\n> don't want to pay for very abstract and hard to quantify privacy\n> benefits.\n>\n\nAgreed. But as outlined above, those who enable it on purpose will\nbenefit, and those who don't also don't have a\ndisadvantage. Am I missing something?\n\n> So I think it's worth considering the DoS problem and Tor\n> somewhat separately, even though they're related. The solution to\n> a crafty privacy-attacking DoS that tries to make exits useless is\n> don't use Tor at all. The solution to \"the entire Bitcoin network\n> is under attack\" is much harder.\n\nIndeed. For the issues we're seeing, Tor can actually be regarded\nto be at fault to some extent. So the Tor development might also\nbenefit from these things being researched. But I see no reason to\nsacrifice the possibility to use Tor on Bitcoin properly at this\npoint.\n\nI also agree that a solution which improves the situation of Tor nodes\nmust not make it easier to attack the entire Bitcoin network. I'm\njust not seeing why this would be the case for the approach I\noutlined. I actually think that having multiple values to tune in\norder to throttle unwanted behaviour on the network might even improve\non Bitcoin's robustness as a whole, because it might enable better\ntargeted moves against other (non-Tor-related) threats. How do we know\nif the most dangerous attacker Bitcoin will face has more resources\nwith respect to IP addresses, or CPU time?\n\n> It's unclear to me we can ever\n> solve it convincingly - banks don't connect together using private\n> networks in which anonymity is forbidden because they're\n> stupid. They do it because it solves DoS attacks in one solid move and\n> they feel it's worth the high cost.\n\nWell, banks did not even consider inventing something like Bitcoin\nbecause what they have works well enough for their purposes. Still,\nfor some reasons, there are a lot of people interested in Bitcoin. I\nwould argue that it is because it tried to solve some things private\nbanking networks did not, so we might consider not only keeping\nBitcoin attractive for those who consider it as a badly implemented\nform of what banking networks already provide.\n\nKind regards,\n\nIsidor"
            }
        ],
        "thread_summary": {
            "title": "Proposal: PoW-based throttling of addresses (was: Outbound connections rotation)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Isidor Zeuner"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 20058
        }
    },
    {
        "title": "[Bitcoin-development] Increasing the OP_RETURN maximum payload size",
        "thread_messages": [
            {
                "author": "Flavien Charlon",
                "date": "2014-11-16T16:21:27",
                "message_text_only": "Hi,\n\nThe data that can be embedded as part of an OP_RETURN output is currently\nlimited to 40 bytes. It was initially supposed to be 80 bytes, but got\nreduced to 40 before the 0.9 release to err on the side of caution.\n\nAfter 9 months, it seems OP_RETURN did not lead to a blockchain\ncatastrophe, so I think it might be time to discuss increasing the limit.\n\nThere are a number of proposals:\n\n   1. Allow two OP_RETURN outputs per transaction (PR\n   <https://github.com/bitcoin/bitcoin/pull/5075>)\n   2. Increase the default maximum payload size from 40 bytes to 80 bytes (\n   PR <https://github.com/bitcoin/bitcoin/pull/5286>)\n   Note that the maximum can be configured already through the\n   'datacarriersize' option - this is just changing the default.\n   3. Make the maximum OP_RETURN payload size proportional to the number of\n   outputs of the transaction\n   4. A combination of the above\n\n3 sounds the most interesting, and 2 would be the second best.\n\n1 is also good to have as long as the \"space budget\" is shared between the\ntwo outputs.\n\nCan we discuss this and agree on a plan?\n\nThanks,\nFlavien\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141116/91741296/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-11-16T17:24:18",
                "message_text_only": "On Sunday, November 16, 2014 4:21:27 PM Flavien Charlon wrote:\n> The data that can be embedded as part of an OP_RETURN output is currently\n> limited to 40 bytes. It was initially supposed to be 80 bytes, but got\n> reduced to 40 before the 0.9 release to err on the side of caution.\n> \n> After 9 months, it seems OP_RETURN did not lead to a blockchain\n> catastrophe, so I think it might be time to discuss increasing the limit.\n\nMining policies such as this is always up to miners.\nIt's not a development topic.\n\n> There are a number of proposals:\n> \n>    1. Allow two OP_RETURN outputs per transaction (PR\n>    <https://github.com/bitcoin/bitcoin/pull/5075>)\n\nThis one seems uselessly inefficient. Protocols needing OP_RETURN could just \nas easily look for an independent push opcode in a single OP_RETURN output.\n\n>    2. Increase the default maximum payload size from 40 bytes to 80 bytes (\n>    PR <https://github.com/bitcoin/bitcoin/pull/5286>)\n>    Note that the maximum can be configured already through the\n>    'datacarriersize' option - this is just changing the default.\n\nI don't care strongly, but IMO this kind of focus on defaults is part of the \nproblem. I'd prefer to have the default be randomised to incentivise miners to \nmake the decision they're supposed to be making, rather than pushing the \nresponsibility onto developers to set defaults.\n\n>    3. Make the maximum OP_RETURN payload size proportional to the number of\n>    outputs of the transaction\n\nRight now, this policy requires code hacks. Of the three ideas, this one looks \nthe most ripe for code changes (particularly one that makes it possible to \nconfigure this policy, not hardcoding it).\n\nLuke"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-11-16T18:44:58",
                "message_text_only": "I agree with Luke, we can endlessly discuss the \"best defaults\" like\nthe default size allowed for OP_RETURN, minimum fees, anti-dust\npolicies, first-seen vs replace-by-fee, etc; but the fact is that\npolicies depend on miners. Unfortunately most miners and pools are\nquite apathetic when it comes to configure their own policy.\nIn my opinion the best we can do is to make it easier for miners to\nimplement their own policies by abstracting out those parts of the\ncode. Pull requests like #5071 and #5114 are steps in that direction.\nSo if you're interested in having more miners accepting 80 bytes\nOP_RETURN transactions, I suggest you invest some time reviewing and\ntesting those PRs.\nAlthough this wasn't its main purpose, separating script/standard was\nalso a little step in the same direction."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-11-16T19:04:48",
                "message_text_only": "As an aside, the decision to make it 40 bytes made sense because it is\nenough for timestamping. In fact, you can do cheaper and even secret\n(and thus impossible to censor by miners) timestamping using\npay-to-contract [1], which uses exactly 0 extra bytes in your\ntransaction and the blockchain.\nI remember people asking in #bitcoin-dev \"Does anyone know any use\ncase for greater sizes OP_RETURNs?\" and me answering \"I do not know of\nany use cases that require bigger sizes\".\nI'm aware that so called \"proof of publication\" is not equivalent to\ntimestamping, but I wasn't aware at the moment (and I don't think it's\nvery interesting but that's obviously only my opinion, \"embedded\nsystems\" developers will disagree).\n\n[1] Here's a video explaining pay-to-contract in the context of\ninvoicing as a use case: https://www.youtube.com/watch?v=qwyALGlG33Q\nHere's a generic working implementation:\nhttps://github.com/Blockstream/contracthashtool\n\n\nOn Sun, Nov 16, 2014 at 7:44 PM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n> I agree with Luke, we can endlessly discuss the \"best defaults\" like\n> the default size allowed for OP_RETURN, minimum fees, anti-dust\n> policies, first-seen vs replace-by-fee, etc; but the fact is that\n> policies depend on miners. Unfortunately most miners and pools are\n> quite apathetic when it comes to configure their own policy.\n> In my opinion the best we can do is to make it easier for miners to\n> implement their own policies by abstracting out those parts of the\n> code. Pull requests like #5071 and #5114 are steps in that direction.\n> So if you're interested in having more miners accepting 80 bytes\n> OP_RETURN transactions, I suggest you invest some time reviewing and\n> testing those PRs.\n> Although this wasn't its main purpose, separating script/standard was\n> also a little step in the same direction."
            },
            {
                "author": "Alan Reiner",
                "date": "2014-11-17T03:19:11",
                "message_text_only": "On 11/16/2014 02:04 PM, Jorge Tim\u00f3n wrote:\n> I remember people asking in #bitcoin-dev \"Does anyone know any use\n> case for greater sizes OP_RETURNs?\" and me answering \"I do not know of\n> any use cases that require bigger sizes\".\n\nFor reference, there was a brief time where I was irritated that the\nsize had been reduced to 40 bytes, because I had an application where I\nwanted to put ECDSA in signatures in the OP_RETURN, and you're going to\nneed at least 64 bytes for that.   Unfortunately I can't remember now\nwhat that application was, so it's difficult for me to argue for it. \nBut I don't think that's an unreasonable use case:  sending a payment\nwith a signature, essentially all timestamped in the blockchain."
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-11-17T10:35:24",
                "message_text_only": "On Mon, Nov 17, 2014 at 4:19 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n>\n> On 11/16/2014 02:04 PM, Jorge Tim\u00f3n wrote:\n>> I remember people asking in #bitcoin-dev \"Does anyone know any use\n>> case for greater sizes OP_RETURNs?\" and me answering \"I do not know of\n>> any use cases that require bigger sizes\".\n>\n> For reference, there was a brief time where I was irritated that the\n> size had been reduced to 40 bytes, because I had an application where I\n> wanted to put ECDSA in signatures in the OP_RETURN, and you're going to\n> need at least 64 bytes for that.   Unfortunately I can't remember now\n> what that application was, so it's difficult for me to argue for it.\n> But I don't think that's an unreasonable use case:  sending a payment\n> with a signature, essentially all timestamped in the blockchain.\n\nYou can still send the signature out of band (for example using the\npayment protocol), and just have the transaction commit to a hash of\nthat signature (or message in general), either using an OP_RETURN\noutput to store the hash, or using the pay-to-contract scheme that\nJorge mentioned above. That has exactly the same timestamping\nproperties.\n\nMy main concern with OP_RETURN is that it seems to encourage people to\nuse the blockchain as a convenient transport channel, rather than just\nfor data that the world needs to see to validate it. I'd rather\nencourage solutions that don't require additional data there, which in\nmany cases (but not all) is perfectly possible.\n\n-- \nPieter"
            },
            {
                "author": "Adam Back",
                "date": "2014-11-17T11:20:56",
                "message_text_only": "It seems to me that people maybe arriving at the idea that they should\nput transaction data in the blockchain for three related reasons: a)\nits there and its convenient; and b) they are thinking about permanent\nstorage and being able to recover from backup using a master seed to a\nbip32 address-set and want that logic to extend to the extra features;\nc) they are thinking out of band, but they think they are forced to\nsend the data there in order to achieve atomicity.\n\nI think the data that is sent on the blockchain is design-compressed\nminimal necessary to achieve transaction integrity, and its important\nfor scalability that we keep it that way.  About the rationales for\nusing that scarce scalability impacting channel:\n\na) convenience: is not a great reason to my mind. there are lots of\nchannels: email, web forms, point2point various transports NFC, TCP,\nHTTP for payment protocol or extensions or new protocols.  I think\nthere could be a need for a reliable privacy preserving store and\nforward decentralised infrastructure to act as a channel for such\npurposes.  Until then email could be pretty convenient, if you dont\nget the message due to spam filter etc ask them to resend.  Or a web\nstorage locker related to the app.\n\nb) backup: the blockchain is not an efficient reliable generic backup\nmechanism because its broadcast.  there are cheaper and relatively\nsimple ways to get end2end secure backup, the main challenge of which\nis having secure keys and not forgetting them.  bitcoin already has\nthat covered as its a central requirement of blockchain security.  If\nyou want to archive your payment protocol receipts store them on some\ncloud storage service or disk encrypted with related keys.  for\nexample tahoe-lafs is optimised for the decentralised long-term\nstorage kind of use.\n\nc) atomicity. as an example application requiring atomicity that may\nuse op_return stealth addresses where if the stealth auxiliary message\nwas sent out of band, then if message is lost, and the sender didnt\nkeep it or cant be relied on to care, then the money could be\npermanently lost to both parties.\n\nIt occurred to me recently the kind of use requiring atomicity as\nstealth address in c) can be achieved by sending both the extra\nmessage (the stealth packet) AND the signed bitcoin transaction over\nthe reliable store & forward (eg email for now).  Then the recipient\ncan do the calculations involving the auxiliary message and payment\nmessage, and relay the message to the blockchain IFF they receive the\nmessage (and chose to accept it).  If they dont receive the message\nthey can ask for it to be resent.  And if the payment is unclaimed the\nsender still owns it and can double-spend to avoid risk of later\nspending in their replacement message, or double-spend to self if the\nrecipient declines the payment.  This has privacy, efficiency and SPV\nadvantages over sending to the blockchain.\n\nI think we could make a case that as a design principle auxiliary data\ncould do with a bitcoin-related but separate reliable store and\nforward channel, as email has been sufficiently spammed to end up with\nloss of reliability.  So I think a payment message transport would be\ngood here: invoices & receipts, and other things necessary for\napplications, transaction disputes, records for normal p2p trades and\nbusiness functions reliable store and forward substrate with\ndecentralisation & privacy. For email the existing mechanism with\nclosest semantics, add-on privacy features exist: mixmaster,\nnymservers, webmail + encryption, webmail over Tor etc for privacy\nrelated uses.  Slow transports can offer better security than\ninteractive transports.\n\nAdam\n\nOn 17 November 2014 10:35, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Mon, Nov 17, 2014 at 4:19 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n>>\n>> On 11/16/2014 02:04 PM, Jorge Tim\u00f3n wrote:\n>>> I remember people asking in #bitcoin-dev \"Does anyone know any use\n>>> case for greater sizes OP_RETURNs?\" and me answering \"I do not know of\n>>> any use cases that require bigger sizes\".\n>>\n>> For reference, there was a brief time where I was irritated that the\n>> size had been reduced to 40 bytes, because I had an application where I\n>> wanted to put ECDSA in signatures in the OP_RETURN, and you're going to\n>> need at least 64 bytes for that.   Unfortunately I can't remember now\n>> what that application was, so it's difficult for me to argue for it.\n>> But I don't think that's an unreasonable use case:  sending a payment\n>> with a signature, essentially all timestamped in the blockchain.\n>\n> You can still send the signature out of band (for example using the\n> payment protocol), and just have the transaction commit to a hash of\n> that signature (or message in general), either using an OP_RETURN\n> output to store the hash, or using the pay-to-contract scheme that\n> Jorge mentioned above. That has exactly the same timestamping\n> properties.\n>\n> My main concern with OP_RETURN is that it seems to encourage people to\n> use the blockchain as a convenient transport channel, rather than just\n> for data that the world needs to see to validate it. I'd rather\n> encourage solutions that don't require additional data there, which in\n> many cases (but not all) is perfectly possible.\n>\n> --\n> Pieter\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n> http://pubads.g.doubleclick.net/gampad/clk?id=157005751&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-11-17T12:31:33",
                "message_text_only": "On 11/17/2014 06:20 AM, Adam Back wrote:\n> b) backup: the blockchain is not an efficient reliable generic backup\n> mechanism because its broadcast.  there are cheaper and relatively\n> simple ways to get end2end secure backup, the main challenge of which\n> is having secure keys and not forgetting them.  bitcoin already has\n> that covered as its a central requirement of blockchain security.  If\n> you want to archive your payment protocol receipts store them on some\n> cloud storage service or disk encrypted with related keys.  for\n> example tahoe-lafs is optimised for the decentralised long-term\n> storage kind of use.\n>\nThis is my main concern in the context of stealth addresses. I intend to\nstart a larger discussion on stealth addresses, but I wont hijack the\ntread.\n\nOf course it's easy to send the necessary data out of band as opposed to\nOP_RETURN. The problem is if you do that the transaction cannot not be\nrecovered from seed. We've been fairly successful in transitioning to HD\nwallets and avoiding the need to make regular wallet backups.\n\nIf users wishes to use stealth addresses with out of band communication,\nthe benefits of HD would largely be lost and they would be back to\nmaking regular backups \u2015 this time after /every/ transaction rather than\nevery 100.\n\nThere are only a couple options in such cases:\n\n1) The user could send the payment to an addresses that is derived from\nseed, but now you're using even /more/ storage space than you would by\njust using OP_RETURN.\n\n2) The user can backup after every transaction, which nobody wants to do.\n\n3) The user could use some form of a cloud backup service and place\ntrust in them that their servers wont go down and lose their coins.\n\nNone of those options are really that appealing. OP_RETURN seems like\nthe best alternative to me, at least for that use case.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141117/1880ad89/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-11-17T12:39:26",
                "message_text_only": "On Mon, Nov 17, 2014 at 1:31 PM, Chris Pacia <ctpacia at gmail.com> wrote:\n> If users wishes to use stealth addresses with out of band communication, the\n> benefits of HD would largely be lost and they would be back to making\n> regular backups -- this time after every transaction rather than every 100.\n\n\nThat is inevitable for any wallet that offers any functionality beyond\njust maintaining a balance and the ability to send coins. In\nparticular, anything that wishes to list previous transaction (with\ntimestamps, history, metadata, messages sent using the payment\nprotocol, ...) needs backups.\n\nWhat HD wallets (or any type of deterministic derivation scheme) offer\nis the fact that you can separate secret data and public data. You\nonly need one safe backup of the master secret key - all the rest can\nat most result in privacy loss and not in lost coins.\n\n-- \nPieter"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-11-18T22:33:12",
                "message_text_only": "On Nov 17, 2014 7:39 AM, \"Pieter Wuille\" <pieter.wuille at gmail.com> wrote:\n\n> That is inevitable for any wallet that offers any functionality beyond\n> just maintaining a balance and the ability to send coins. In\n> particular, anything that wishes to list previous transaction (with\n> timestamps, history, metadata, messages sent using t\n> What HD wallets (or any type of deterministic derivation scheme) offer\n> is the fact that you can separate secret data and public data. You\n> only need one safe backup of the master secret key - all the rest can\n> at most result in privacy loss and not in lost coins.\n>\n> --\n> Pieter\n\nI agree but right now wallets not using stealth will only lose metadata,\nnot coins, if their computer crashes and they have the seed backed up.\n\nBut if a user wants to upgrade to stealth, they then risk losing metadata\nAND coins if they either didn't manually back up after every transaction or\nuse a centralized cloud backup service.\n\nThat's if OP_RETURN is not utilized for storage.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141118/9697503f/attachment.html>"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-11-17T11:43:38",
                "message_text_only": "> My main concern with OP_RETURN is that it seems to encourage people to\nuse the blockchain as a convenient transport channel\n\nThe number one user of the blockchain as a storage and transport mechanism\nis Counterparty, and limiting OP_RETURN to 40 bytes didn't prevent them\nfrom doing so. In fact they use multi-sig outputs which is worse than\nOP_RETURN since it's not always prunable, and yet let them store much more\nthan 40 bytes.\n\nFor Open Assets <https://github.com/OpenAssets/open-assets-protocol>, we\nneed to store a URL in the OP_RETURN output (with optionally a hash) plus\nsome bytes of overhead. 40 bytes comes really short for that. The benefit\nof having a URL in there is that any storage mechanism can be used (Web,\nFTP, BitTorrent, MaidSafe...), whereas with only a hash, you have to\nhardcode the storing mechanism in the protocol (and even then, a hash is\nnot enough to address a HTTP or FTP resource). Storing only a hash is fine\nfor the most basic timestamping application, but it's hardly enough to\nbuild something interesting.\n\nI've counted the number of OP_RETURN outputs in the blockchain for the\nmonth of October 2014. There were 1,674 OP_RETURNs for a span of 4,659\nblocks. Assuming they were all 40 bytes (the average is probably less than\nhalf of that), that means an increase of 14.37 bytes per block. Considering\na 1 MB block, that's about 0.0013% of the block used up by OP_RETURN data\nin average.\n\nIncreasing to 80 bytes will have a negligible impact on bandwidth and\nstorage requirements, while being extremely useful for many use cases where\na hash only is not enough.\n\nFlavien\n\nOn Mon, Nov 17, 2014 at 10:35 AM, Pieter Wuille <pieter.wuille at gmail.com>\nwrote:\n\n> On Mon, Nov 17, 2014 at 4:19 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n> >\n> > On 11/16/2014 02:04 PM, Jorge Tim\u00f3n wrote:\n> >> I remember people asking in #bitcoin-dev \"Does anyone know any use\n> >> case for greater sizes OP_RETURNs?\" and me answering \"I do not know of\n> >> any use cases that require bigger sizes\".\n> >\n> > For reference, there was a brief time where I was irritated that the\n> > size had been reduced to 40 bytes, because I had an application where I\n> > wanted to put ECDSA in signatures in the OP_RETURN, and you're going to\n> > need at least 64 bytes for that.   Unfortunately I can't remember now\n> > what that application was, so it's difficult for me to argue for it.\n> > But I don't think that's an unreasonable use case:  sending a payment\n> > with a signature, essentially all timestamped in the blockchain.\n>\n> You can still send the signature out of band (for example using the\n> payment protocol), and just have the transaction commit to a hash of\n> that signature (or message in general), either using an OP_RETURN\n> output to store the hash, or using the pay-to-contract scheme that\n> Jorge mentioned above. That has exactly the same timestamping\n> properties.\n>\n> My main concern with OP_RETURN is that it seems to encourage people to\n> use the blockchain as a convenient transport channel, rather than just\n> for data that the world needs to see to validate it. I'd rather\n> encourage solutions that don't require additional data there, which in\n> many cases (but not all) is perfectly possible.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=157005751&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141117/03c5b7d1/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-11-17T12:00:07",
                "message_text_only": "On Mon, Nov 17, 2014 at 12:43 PM, Flavien Charlon\n<flavien.charlon at coinprism.com> wrote:\n>> My main concern with OP_RETURN is that it seems to encourage people to use\n>> the blockchain as a convenient transport channel\n>\n> The number one user of the blockchain as a storage and transport mechanism\n> is Counterparty, and limiting OP_RETURN to 40 bytes didn't prevent them from\n> doing so. In fact they use multi-sig outputs which is worse than OP_RETURN\n> since it's not always prunable, and yet let them store much more than 40\n> bytes.\n\nIt wasn't limited to stop them from using it. It was limited to avoid\ngiving others the impression that OP_RETURN was intended for data\nstorage. For the intended purpose (making a transaction commit to some\nexternal data) a 32-byte hash + 8 byte id is more than sufficient.\n\n> For Open Assets, we need to store a URL in the OP_RETURN output (with\n> optionally a hash) plus some bytes of overhead. 40 bytes comes really short\n> for that. The benefit of having a URL in there is that any storage mechanism\n> can be used (Web, FTP, BitTorrent, MaidSafe...), whereas with only a hash,\n> you have to hardcode the storing mechanism in the protocol (and even then, a\n> hash is not enough to address a HTTP or FTP resource). Storing only a hash\n> is fine for the most basic timestamping application, but it's hardly enough\n> to build something interesting.\n\nDo you really need that data published to everyone? You're at the very\nleast exposing yourself to censorship, and (depending on the design)\npotentially decreased privacy for your users. I would expect that for\nmost colored coin applications, just having the color transfer\ninformation in external data sent directly to the receiver with\ntransactions committing to it should suffice.\n\n-- \nPieter"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-11-17T12:22:39",
                "message_text_only": "On Mon, Nov 17, 2014 at 12:43 PM, Flavien Charlon\n<flavien.charlon at coinprism.com> wrote:\n> Storing only a hash\n> is fine for the most basic timestamping application, but it's hardly enough\n> to build something interesting.\n\nNo, storing only a hash is enough for ALL timestamping applications.\nIf you need to broadcast more data then we're not talking about\ntimestamping anymore, but rather proof of publication.\nUnfortunately (and as it has been already mentioned) many applications\ndon't need proof of publication and yet they are just using the\nblockchain as a convenient transport mechanism, but that's highly\ninefficient.\nIt's like if you sent all your mails to all the existing email\naddresses with the metadata \"to be read by: destination at yourhost.com\".\nIt wouldn't make any sense and it wouldn't scale.\nA url definitely looks like something that doesn't belong in the chain."
            },
            {
                "author": "Btc Drak",
                "date": "2014-11-18T17:47:05",
                "message_text_only": "On Mon, Nov 17, 2014 at 11:43 AM, Flavien Charlon <\nflavien.charlon at coinprism.com> wrote:\n\n> > My main concern with OP_RETURN is that it seems to encourage people to\n> use the blockchain as a convenient transport channel\n>\n> The number one user of the blockchain as a storage and transport mechanism\n> is Counterparty, and limiting OP_RETURN to 40 bytes didn't prevent them\n> from doing so. In fact they use multi-sig outputs which is worse than\n> OP_RETURN since it's not always prunable, and yet let them store much more\n> than 40 bytes.\n>\n> For Open Assets <https://github.com/OpenAssets/open-assets-protocol>, we\n> need to store a URL in the OP_RETURN output (with optionally a hash) plus\n> some bytes of overhead. 40 bytes comes really short for that. The benefit\n> of having a URL in there is that any storage mechanism can be used (Web,\n> FTP, BitTorrent, MaidSafe...), whereas with only a hash, you have to\n> hardcode the storing mechanism in the protocol (and even then, a hash is\n> not enough to address a HTTP or FTP resource). Storing only a hash is fine\n> for the most basic timestamping application, but it's hardly enough to\n> build something interesting.\n>\n> I've counted the number of OP_RETURN outputs in the blockchain for the\n> month of October 2014. There were 1,674 OP_RETURNs for a span of 4,659\n> blocks. Assuming they were all 40 bytes (the average is probably less than\n> half of that), that means an increase of 14.37 bytes per block. Considering\n> a 1 MB block, that's about 0.0013% of the block used up by OP_RETURN data\n> in average.\n>\n> Increasing to 80 bytes will have a negligible impact on bandwidth and\n> storage requirements, while being extremely useful for many use cases where\n> a hash only is not enough.\n>\n\nWhile I am not opposing the proposal, I am not sure about your statistics\nbecause while Counterparty is not currently using OP_RETURN encoding, you\nshould factor in the number of CP transactions that would have been\nOP_RETURNs if they had been permitted (100,000 since inception according\ntheir blog[1] with monthly charts at their block explorer[2]).\n\nRefs:\n[1]\nhttp://counterparty.io/news/celebrating-100000-transaction-on-the-counterparty-network/\n[2] http://blockscan.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141118/f3def71d/attachment.html>"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-11-19T00:46:51",
                "message_text_only": ">\n> While I am not opposing the proposal, I am not sure about your statistics\n> because while Counterparty is not currently using OP_RETURN encoding, you\n> should factor in the number of CP transactions that would have been\n> OP_RETURNs if they had been permitted (100,000 since inception according\n> their blog[1] with monthly charts at their block explorer[2]).\n\n\nSure, but even if they are not permitted to store their data in OP_RETURN,\nthey will still store it in the blockchain in bare multisig outputs, so\nit's not contributing to an overhead (in fact, it would consume less space\nin the blockchain if they used OP_RETURN).\n\nOn Tue, Nov 18, 2014 at 5:47 PM, Btc Drak <btcdrak at gmail.com> wrote:\n\n> On Mon, Nov 17, 2014 at 11:43 AM, Flavien Charlon <\n> flavien.charlon at coinprism.com> wrote:\n>\n>> > My main concern with OP_RETURN is that it seems to encourage people to\n>> use the blockchain as a convenient transport channel\n>>\n>> The number one user of the blockchain as a storage and transport\n>> mechanism is Counterparty, and limiting OP_RETURN to 40 bytes didn't\n>> prevent them from doing so. In fact they use multi-sig outputs which is\n>> worse than OP_RETURN since it's not always prunable, and yet let them store\n>> much more than 40 bytes.\n>>\n>> For Open Assets <https://github.com/OpenAssets/open-assets-protocol>, we\n>> need to store a URL in the OP_RETURN output (with optionally a hash) plus\n>> some bytes of overhead. 40 bytes comes really short for that. The benefit\n>> of having a URL in there is that any storage mechanism can be used (Web,\n>> FTP, BitTorrent, MaidSafe...), whereas with only a hash, you have to\n>> hardcode the storing mechanism in the protocol (and even then, a hash is\n>> not enough to address a HTTP or FTP resource). Storing only a hash is fine\n>> for the most basic timestamping application, but it's hardly enough to\n>> build something interesting.\n>>\n>> I've counted the number of OP_RETURN outputs in the blockchain for the\n>> month of October 2014. There were 1,674 OP_RETURNs for a span of 4,659\n>> blocks. Assuming they were all 40 bytes (the average is probably less than\n>> half of that), that means an increase of 14.37 bytes per block. Considering\n>> a 1 MB block, that's about 0.0013% of the block used up by OP_RETURN\n>> data in average.\n>>\n>> Increasing to 80 bytes will have a negligible impact on bandwidth and\n>> storage requirements, while being extremely useful for many use cases where\n>> a hash only is not enough.\n>>\n>\n> While I am not opposing the proposal, I am not sure about your statistics\n> because while Counterparty is not currently using OP_RETURN encoding, you\n> should factor in the number of CP transactions that would have been\n> OP_RETURNs if they had been permitted (100,000 since inception according\n> their blog[1] with monthly charts at their block explorer[2]).\n>\n> Refs:\n> [1]\n> http://counterparty.io/news/celebrating-100000-transaction-on-the-counterparty-network/\n> [2] http://blockscan.com/\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141119/3e9b16f5/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-11-17T10:30:32",
                "message_text_only": "On Sun, Nov 16, 2014 at 5:21 PM, Flavien Charlon\n<flavien.charlon at coinprism.com> wrote:\n> Hi,\n>\n> The data that can be embedded as part of an OP_RETURN output is currently\n> limited to 40 bytes. It was initially supposed to be 80 bytes, but got\n> reduced to 40 before the 0.9 release to err on the side of caution.\n>\n> After 9 months, it seems OP_RETURN did not lead to a blockchain catastrophe,\n\nAgreed. I'm in favor of increasing OP_RETURN size as well. Don't care\nabout the actual size.\n\n(rationale: pruning is going to land soonish, and everything is better\nthan UTXO-polluting methods that encode everything into addresses such\nas now used by cryptograffiti)\n\nWladimir"
            },
            {
                "author": "Jean-Pierre Rupp",
                "date": "2014-11-20T23:39:16",
                "message_text_only": "Agree,\n\nThere are many legitimate uses for a larger OP_RETURN, and application developers are already complaining that the current size is not enough.  It is about adding value to the blockchain.  I know it can grow the blockchain faster, but so far at 40 bytes Bitcoin hasn't experienced death by bloat, nor that is even close to happen.  I understand starting with a prudent approach, but I think it is safe to increase this without worrying.  Actually I would make it even bigger than 80 bytes.\n\nCheers\n\nOn 17/11/14 02:30, Wladimir wrote:\n> Agreed. I'm in favor of increasing OP_RETURN size as well. Don't care\n> about the actual size.\n\n-- \nBe Happy :)\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x310A8A5B.asc\nType: application/pgp-keys\nSize: 4574 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141120/8e335a7f/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: root.vcf\nType: text/x-vcard\nSize: 203 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141120/8e335a7f/attachment.vcf>"
            }
        ],
        "thread_summary": {
            "title": "Increasing the OP_RETURN maximum payload size",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Jean-Pierre Rupp",
                "Adam Back",
                "Alan Reiner",
                "Jorge Tim\u00f3n",
                "Luke Dashjr",
                "Chris Pacia",
                "Flavien Charlon",
                "Btc Drak",
                "Pieter Wuille"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 32034
        }
    },
    {
        "title": "[Bitcoin-development] Deanonymisation of clients in Bitcoin P2P network paper",
        "thread_messages": [
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-11-26T07:47:39",
                "message_text_only": "This paper was just posted on reddit that describes how an attacker can de-anonymize clients on the bitcoin network. It mentions that the core devs were contacted prior to publication. I was just wondering, how many of these issues have already been addressed?\n\n\nPaper (University of Luxembourg):\nhttp://orbilu.uni.lu/handle/10993/18679 <http://orbilu.uni.lu/handle/10993/18679>\n\n\nKind regards,\n\nJean-Paul\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141125/01250a5f/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-11-26T13:51:31",
                "message_text_only": "I don't recall being contacted directly, but the attack has been\ndiscussed.  It relies on a number of conditions.  For example, if you are\nover Tor, they try to kick the machine off Tor, _assuming_ that it will\nfall back to non-Tor.  That's only true for dual stack nodes, which are not\nreally 100% anonymous anyway -- you're operating from your public IP anyway.\n\n\nOn Wed, Nov 26, 2014 at 2:47 AM, Jean-Paul Kogelman <jeanpaulkogelman at me.com\n> wrote:\n\n> This paper was just posted on reddit that describes how an attacker can\n> de-anonymize clients on the bitcoin network. It mentions that the core devs\n> were contacted prior to publication. I was just wondering, how many of\n> these issues have already been addressed?\n>\n>\n> Paper (University of Luxembourg):\n> http://orbilu.uni.lu/handle/10993/18679\n>\n>\n> Kind regards,\n>\n> Jean-Paul\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=157005751&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141126/23470dfe/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2014-11-26T17:13:52",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nPlease see also the following:\n\nhttps://cpunks.org//pipermail/cypherpunks/2014-November/005971.html\n\nRespect,\n\n- -Odinn\n\nJeff Garzik:\n> I don't recall being contacted directly, but the attack has been \n> discussed.  It relies on a number of conditions.  For example, if\n> you are over Tor, they try to kick the machine off Tor, _assuming_\n> that it will fall back to non-Tor.  That's only true for dual stack\n> nodes, which are not really 100% anonymous anyway -- you're\n> operating from your public IP anyway.\n> \n> \n> On Wed, Nov 26, 2014 at 2:47 AM, Jean-Paul Kogelman\n> <jeanpaulkogelman at me.com\n>> wrote:\n> \n>> This paper was just posted on reddit that describes how an\n>> attacker can de-anonymize clients on the bitcoin network. It\n>> mentions that the core devs were contacted prior to publication.\n>> I was just wondering, how many of these issues have already been\n>> addressed?\n>> \n>> \n>> Paper (University of Luxembourg): \n>> http://orbilu.uni.lu/handle/10993/18679\n>> \n>> \n>> Kind regards,\n>> \n>> Jean-Paul\n>> \n>> \n>> ------------------------------------------------------------------------------\n>>\n>> \nDownload BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n>> from Actuate! Instantly Supercharge Your Business Reports and\n>> Dashboards with Interactivity, Sharing, Native Excel Exports, App\n>> Integration & more Get technology previously reserved for\n>> billion-dollar corporations, FREE\n>> \n>> http://pubads.g.doubleclick.net/gampad/clk?id=157005751&iu=/4140/ostg.clktrk\n>>\n>> \n_______________________________________________\n>> Bitcoin-development mailing list \n>> Bitcoin-development at lists.sourceforge.net \n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nDownload BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and\n> Dashboards with Interactivity, Sharing, Native Excel Exports, App\n> Integration & more Get technology previously reserved for\n> billion-dollar corporations, FREE \n> http://pubads.g.doubleclick.net/gampad/clk?id=157005751&iu=/4140/ostg.clktrk\n>\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJUdgpQAAoJEGxwq/inSG8CBCMIAI8IyyzxbhC0NVY8wyLXaHnW\num0HkmrP0bknL0ugjXDXHIBJmadH9uwOT5g1WpJ1siJbjm7nTNn2EXui8EKaX133\nSkdZu0IVV5wDZB0OnIDxxx4cyuwNBWbxLh0boVCzydUlZaxQCx88SriKLNj4NrAT\noPBuOSL9Z/EsscO8PIh73+t7rdsAQo7koFcwVB8OgjKKATZpAgu4/hwBDoSnhv/U\nF/X1EcQifg5j2DPmPmJo2/u9PmfHjgDUevw7qJOYNDFMPq4zhi6IC+x2aAXZg0rk\njHF79loJ5vueMaU6APVcIQ4izbyzU0y0JaY4Rukq0YkuXCMgZB8BJlS/BPntZdY=\n=K2tn\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Isidor Zeuner",
                "date": "2014-11-27T02:09:47",
                "message_text_only": "Hello there,\n\nquote:\n> Please see also the following:\n>\n> https://cpunks.org//pipermail/cypherpunks/2014-November/005971.html\n>\n\nI agree about the severity of the Tor/Bitcoin issue, but I see no\npoint in bashing Bitcoin's financial privacy characteristics as\nthe linked pages seem to do.\n\nBitcoin can be useful as a part of a strategy to improve on privacy,\nbut it does not intend to be a run-and-forget solution for doing so.\n\nA lot of issues found in this context can actually be traced back to\nTor's characteristics already known before. It's just that\nBitcoin makes Tor's deficiencies more measurable - before Bitcoin,\nthose interested in researching how Tor performs in an automated\ncontext where a much smaller community. In the end, I guess both\nprojects can benefit from the research we can do now.\n\n> Respect,\n>\n> - -Odinn\n>\n> Jeff Garzik:\n> > I don't recall being contacted directly, but the attack has been\n> > discussed.  It relies on a number of conditions.  For example, if\n> > you are over Tor, they try to kick the machine off Tor, _assuming_\n> > that it will fall back to non-Tor.  That's only true for dual stack\n> > nodes, which are not really 100% anonymous anyway -- you're\n> > operating from your public IP anyway.\n> >\n\nGenerally, it cannot be said that the attack vector described here is\nirrelevant for non-dual-stack nodes. An attacker might not be able to\ncollect IP addresses of Tor-only nodes, but he can try to kick the\nusers from all Tor exit nodes he does not control, and proceed with\nother attacks when a large number of Tor-only users connect through\nhis Tor exit node(s).\n\nSince this attack vector has been discussed, I started making some\nmeasurements on how effective it is to connect to Bitcoin using Tor,\nand I found that the number of connections dropping to near-zero is\na situation which occurs rather frequently, which suggests that there\nis still room to improve on the DoS handling.\n\nBest regards,\n\nIsidor"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-11-27T02:22:35",
                "message_text_only": "> Since this attack vector has been discussed, I started making some\n> measurements on how effective it is to connect to Bitcoin using Tor,\n> and I found that the number of connections dropping to near-zero is\n> a situation which occurs rather frequently, which suggests that there\n> is still room to improve on the DoS handling.\n\nI'm confused by this, I run quite a few nodes exclusively on tor and\nchart their connectivity and have seen no such connection dropping\nbehaviour.\n\nCan you tell me more about how you measured this?\n\n[As an aside I agree that there are lots of things to improve here,\nbut the fact that users can in theory be forced off of tor via DOS\nattacks is not immediately concerning to me because its a conscious\nchoice users would make to abandon their privacy (and the behaviour of\nthe system here is known and intentional). There are other mechanisms\navailable for people to relay their transactions than connecting\ndirectly to the bitcoin network; so their choice isn't just abandon\nprivacy or don't use bitcoin at all.]"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-11-27T11:06:24",
                "message_text_only": ">\n> [As an aside I agree that there are lots of things to improve here,\n> but the fact that users can in theory be forced off of tor via DOS\n> attacks is not immediately concerning to me because its a conscious\n> choice users would make to abandon their privacy\n\n\nBitcoin already has a large population of users who have little or no\ntechnical skill, it wouldn't surprise me at all if it was found to be the\nclear majority by now. Assuming success and growth in future, very few\nusers will make any decisions at all about their privacy, they will just\naccept the defaults. In such a world no consumer wallet is going to\ndirectly expose Tor to end users - if used at all it'll just be used behind\nthe scenes. So automated fallback or control over exits would be a concern\nfor such wallets.\n\nMy gut feeling about this stuff has changed over time. I don't think it'd\nbe a great idea to tie Bitcoin to Tor too deeply, convenient though its\ninfrastructure is. Most apps don't need a whole lot of onion routing - a\nsmall amount built in to the p2p layer would be sufficient. Tor is huge,\ncomplicated and could be a liability in future.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141127/506b3fb5/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-11-27T11:27:34",
                "message_text_only": "On Thu, Nov 27, 2014 at 2:22 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> Since this attack vector has been discussed, I started making some\n>> measurements on how effective it is to connect to Bitcoin using Tor,\n>> and I found that the number of connections dropping to near-zero is\n>> a situation which occurs rather frequently, which suggests that there\n>> is still room to improve on the DoS handling.\n>\n> I'm confused by this, I run quite a few nodes exclusively on tor and\n> chart their connectivity and have seen no such connection dropping\n> behaviour.\n\nIn my experience the problem has always been getting bootstrapped.\nMost nodes hardly give any hidden service nodes in their getaddr.\n(this has been improved in master by including a set of hidden service\nseed nodes)\nBut this assumes -onlynet=tor. Tor with exit nodes should be less\nproblematic, unless someone managed to DoSban all the exit nodes as\ndescribed in the paper (but I've never seen such an attack myself).\n\n> Can you tell me more about how you measured this?\n>\n> [As an aside I agree that there are lots of things to improve here,\n> but the fact that users can in theory be forced off of tor via DOS\n> attacks is not immediately concerning to me because its a conscious\n> choice users would make to abandon their privacy (and the behaviour of\n> the system here is known and intentional). There are other mechanisms\n> available for people to relay their transactions than connecting\n> directly to the bitcoin network; so their choice isn't just abandon\n> privacy or don't use bitcoin at all.]\n\nRight, there's something to be said for splitting your own transaction\nsubmission from normal P2P networking and transaction relay.\n(esp for non-SPV wallets which don't inherently leak any information\nabout their addresses)\n\nThere was a pull request about this for Bitcoin Core one, maybe I\nclosed it unfairly https://github.com/bitcoin/bitcoin/issues/4564 .\n\nWladimir"
            },
            {
                "author": "Mistr Bigs",
                "date": "2014-11-27T17:44:51",
                "message_text_only": "I might be mistaken, but it seems to me this paper discusses unintended\nways of obtaining the IP addresses of clients involved in transactions on\nthe core Bitcoin network.\nTor was mentioned only insofar as it might be one's first thought of how to\nmitigate this risk, yet Bitcoin over Tor has its own problems that prevent\nthis from being effective.\nBut the primary \"issues\" mentioned in the paper are regarding a Bitcoin\nnode in default operation, no?\n\n\"In their new study, researchers at the Laboratory of Algorithmics,\nCryptology and Security of the University of Luxembourg have shown that\nBitcoin does not protect user's IP address and that it can be linked to the\nuser's transactions in real-time.\"\n\n\"The basic idea behind these findings is that Bitcoin entry nodes, to which\nthe user's computer connects in order to make a transaction, form a unique\nidentifier for the duration of user's session. This unique pattern can be\nlinked to a user's IP address. Moreover, transactions made during one\nsession, even those made via unrelated pseudonyms, can be linked together.\nWith this method, hackers can reveal up to 60 percent of the IP addresses\nbehind the transactions made over the Bitcoin network.\"\n\n\"'This Bitcoin network analysis combined with previous research on\ntransaction flows shows that the level of anonymity in the Bitcoin network\nis quite low,' explains Dr. Alex Biryukov.\"\n\nM\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141127/41a5e716/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-11-27T20:30:16",
                "message_text_only": "On Thu, Nov 27, 2014 at 5:44 PM, Mistr Bigs <misterbg6 at gmail.com> wrote:\n> I might be mistaken, but it seems to me this paper discusses unintended ways\n> of obtaining the IP addresses of clients involved in transactions on the\n> core Bitcoin network.\n\nYou're mistaken. :)\n\nIf a node is used exclusively via tor it effectively doesn't have a IP address.\n\n(short of bugs of a class that aren't discussed here)\n\nThe paper is about fingerprinting approaches that probabilistically\nconnect transactions to hosts that you can already identify their IPs."
            },
            {
                "author": "Mistr Bigs",
                "date": "2014-11-28T00:45:28",
                "message_text_only": "That's what I was trying to say... The researchers are deanonymizing\ntransactions from non-Tor connected hosts. So why are we talking about Tor\nlimitations in response to this? Shouldn't we be discussing how to address\nthe issues in Bitcoin proper?\n\nM\n\nOn 11/27/2014 9:30 PM, Gregory Maxwell wrote:\n\nOn Thu, Nov 27, 2014 at 5:44 PM, <misterbg6 at gmail.com> wrote:\n\nI might be mistaken, but it seems to me this paper discusses unintended ways\nof obtaining the IP addresses of clients involved in transactions on the\ncore Bitcoin network.\n\nYou're mistaken. :)\n\nIf a node is used exclusively via tor it effectively doesn't have a IP address.\n\n(short of bugs of a class that aren't discussed here)\n\nThe paper is about fingerprinting approaches that probabilistically\nconnect transactions to hosts that you can already identify their IPs.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141128/8a21d8d1/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-11-28T05:30:32",
                "message_text_only": "On Fri, Nov 28, 2014 at 12:45 AM, Mistr Bigs <misterbg6 at gmail.com> wrote:\n> That's what I was trying to say... The researchers are deanonymizing\n> transactions from non-Tor connected hosts. So why are we talking about Tor\n> limitations in response to this? Shouldn't we be discussing how to address\n> the issues in Bitcoin proper?\n\nBecause if the user does not use tor or an analogous infrastructure\n(e.g. something else reimplementing tor's functionality) the user can\nbe deanonymized in many different ways.\n\nAt the end of the day, if I'm listening widely to the network, and\nyour host is regularly the first to hand me your transactions then I\ncan draw reasonably reliable conclusions... and this is true even if\nthere is a complete absence of identifiable characteristics otherwise.\n\nAnd, on the flip side if the host is persistently behind tor, even\nwith some watermarkable behaviour, their privacy is protected.  So\nmaking sure that hosts can continually use tor (or similar systems)\nshould be the higher priority.  (And, of course, not reimplementing\ntor  leverages the millions of dollars of investment and dozens of\nsubject matter experts working on that system)."
            }
        ],
        "thread_summary": {
            "title": "Deanonymisation of clients in Bitcoin P2P network paper",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "odinn",
                "Isidor Zeuner",
                "Wladimir",
                "Mike Hearn",
                "Jean-Paul Kogelman",
                "Mistr Bigs",
                "Gregory Maxwell"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 16008
        }
    },
    {
        "title": "[Bitcoin-development] bitcoind as a library",
        "thread_messages": [
            {
                "author": "Mem Wallet",
                "date": "2014-11-27T17:27:59",
                "message_text_only": "Two minor observations:\n\nDecodeBase58Check is listed as inline, but isnt actually inlined in the\nheader.\nThis makes it both non-present in libbitcoin_common.a and unavailable\nto other code that would use libbitcoin_common.a as a library. (bug?)\n\nIn general, the hierarchy of tools is poor/weak. for example base58.h could\nbe a fairly\nindependent low level math/string library, but it includes caddress, which\nrequires chainparams, and makes the whole dependency tree quite involved...\n\n\nIs there an intention that the various internal libraries could/should\nbe strengthened and heirachicalized such that they would be suitable for\n3rd party development of bitcoin related services and tools, or is that not\na goal, and some other project would have to fill such a role ?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141127/96c0b771/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-11-27T17:54:33",
                "message_text_only": "On Thu, Nov 27, 2014 at 5:27 PM, Mem Wallet <memwallet.info at gmail.com> wrote:\n\n> Is there an intention that the various internal libraries could/should\n> be strengthened and heirachicalized such that they would be suitable for\n> 3rd party development of bitcoin related services and tools, or is that not\n> a goal, and some other project would have to fill such a role ?\n\nThe plan is to provide the consensus functionality as a library, the\nessential parts that make bitcoin bitcoin.\n0.10 will have a basic transaction/script verifier available.\nIn the version after that, I expect this will be extended to further\nutxo set management, but no API has been worked out for that yet.\nThere are also plans to add a library for transaction signing.\n\nHowever there is no goal to expose *everything* as a library.\nCertainly not wallet- or user interface related functionality.\nSpecialized utility libraries would fill this purpose better.\nSee for example https://github.com/bitcoin/libbase58 for base58 processing.\n\nWladimir"
            },
            {
                "author": "odinn",
                "date": "2014-11-27T20:07:29",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nA recent comment on this (I think)...\n\nhttps://github.com/bitcoin/bitcoin/issues/4564#issuecomment-49558760\n\nReflecting on an approach from a different but related project, as a\nresult of an issue discussion in DW, stealth and coinjoin from that\nproject were broken out as distinct repositories - see:\n\nhttps://github.com/darkwallet/stealth.js\nand\nhttps://github.com/darkwallet/coinjoin.js\n\ninstallable using npm\n\n\nI'm probably missing something here, but it seems to me like breaking\nthings out as distinct repositories might be a good approach.  The\nquestion is what would be in a distinct repository or repositories?\nCurrently if someone is looking at core, everything is seen here:\nhttps://github.com/bitcoin/bitcoin/\n\n<slips away for holidays>\n\n\n\n\nWladimir:\n> On Thu, Nov 27, 2014 at 5:27 PM, Mem Wallet\n> <memwallet.info at gmail.com> wrote:\n> \n>> Is there an intention that the various internal libraries\n>> could/should be strengthened and heirachicalized such that they\n>> would be suitable for 3rd party development of bitcoin related\n>> services and tools, or is that not a goal, and some other project\n>> would have to fill such a role ?\n> \n> The plan is to provide the consensus functionality as a library,\n> the essential parts that make bitcoin bitcoin. 0.10 will have a\n> basic transaction/script verifier available. In the version after\n> that, I expect this will be extended to further utxo set\n> management, but no API has been worked out for that yet. There are\n> also plans to add a library for transaction signing.\n> \n> However there is no goal to expose *everything* as a library. \n> Certainly not wallet- or user interface related functionality. \n> Specialized utility libraries would fill this purpose better. See\n> for example https://github.com/bitcoin/libbase58 for base58\n> processing.\n> \n> Wladimir\n> \n> ------------------------------------------------------------------------------\n>\n> \nDownload BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and\n> Dashboards with Interactivity, Sharing, Native Excel Exports, App\n> Integration & more Get technology previously reserved for\n> billion-dollar corporations, FREE \n> http://pubads.g.doubleclick.net/gampad/clk?id=157005751&iu=/4140/ostg.clktrk\n>\n> \n_______________________________________________\n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJUd4SAAAoJEGxwq/inSG8Che8H/3PMt0NQSrVSqnC6WC9scXdD\naqGnsdZkhnLRs0szJSTjiQm+xCk6aUcEsKCGu298Xhkv38S4DSfWa+OhFZGPKmOZ\nwlfnXAz3SprQ8xzy/NVqavtFRk+pGDRxgBIzzgBfbz3BdPKxMywi9BNnaK0YA6UA\n08giKmtqblHTKmKuguK23YIYjAAk3Csg0Vg4BgN2MgeEXl9PJI6vh4+jNckXWtAT\n/gKjPXG/Q+f9wl5pxSY/+ZfmRUtjHye3f8hHjpSEmxjpB9QzeeDg63DzAhOH0ip5\nvXaIePZED//SmN3eH+S22vAx/a83URkr5B2+8Cffx/oO5laYRthoMHLi/2+XkO4=\n=UWhs\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Oliver Egginger",
                "date": "2014-11-28T17:22:27",
                "message_text_only": "On Thu, Nov 27, 2014 at 6:54 PM, Wladimir <laanwj at gmail.com> wrote:\n> On Thu, Nov 27, 2014 at 5:27 PM, Mem Wallet <memwallet.info at gmail.com> wrote:\n> \n>> Is there an intention that the various internal libraries could/should\n>> be strengthened and heirachicalized such that they would be suitable for\n>> 3rd party development of bitcoin related services and tools, or is that not\n>> a goal, and some other project would have to fill such a role ?\n> \n> The plan is to provide the consensus functionality as a library, the\n> essential parts that make bitcoin bitcoin.\n> 0.10 will have a basic transaction/script verifier available.\n> In the version after that, I expect this will be extended to further\n> utxo set management, but no API has been worked out for that yet.\n> There are also plans to add a library for transaction signing.\n> \n> However there is no goal to expose *everything* as a library.\n> Certainly not wallet- or user interface related functionality.\n> Specialized utility libraries would fill this purpose better.\n> See for example https://github.com/bitcoin/libbase58 for base58 processing.\n\n\nSorry for the off-topic but while reading this I like to ask you for\npicocoin, see:\n\nhttps://github.com/jgarzik/picocoin\n\nFor a research project I'm looking for a C library to operate some block\nchain analysis (parsing raw blocks and transactions). Has anyone of you\nexperience with picocoin for that? Are there any relevant limitations?\n\n- oliver"
            },
            {
                "author": "Btc Drak",
                "date": "2014-11-28T17:49:25",
                "message_text_only": "On Fri, Nov 28, 2014 at 5:22 PM, Oliver Egginger <bitcoin at olivere.de> wrote:\n\n> Sorry for the off-topic but while reading this I like to ask you for\n> picocoin, see:\n>\n> https://github.com/jgarzik/picocoin\n>\n> For a research project I'm looking for a C library to operate some block\n> chain analysis (parsing raw blocks and transactions).\n\n\nThis might be useful for you https://github.com/MatthewLM/cbitcoin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141128/5f5ce2c9/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-11-30T16:38:42",
                "message_text_only": "Though I am highly biased :)  Compared to cbitcoin, picocoin's library\n(libccoin) is valgrind-clean, can parse and index the blockchain, and\nsupports all core and P2P data structures.\n\n\nOn Fri, Nov 28, 2014 at 12:49 PM, Btc Drak <btcdrak at gmail.com> wrote:\n\n> On Fri, Nov 28, 2014 at 5:22 PM, Oliver Egginger <bitcoin at olivere.de>\n> wrote:\n>\n>> Sorry for the off-topic but while reading this I like to ask you for\n>> picocoin, see:\n>>\n>> https://github.com/jgarzik/picocoin\n>>\n>> For a research project I'm looking for a C library to operate some block\n>> chain analysis (parsing raw blocks and transactions).\n>\n>\n> This might be useful for you https://github.com/MatthewLM/cbitcoin\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=157005751&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141130/950c7ebc/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoind as a library",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "odinn",
                "Wladimir",
                "Mem Wallet",
                "Btc Drak",
                "Oliver Egginger"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 8825
        }
    },
    {
        "title": "[Bitcoin-development] BIP 65 and OP_CHECKLOCKTIMEVERIFY inquiry...",
        "thread_messages": [
            {
                "author": "Richard Moore",
                "date": "2014-11-27T22:56:54",
                "message_text_only": "Heya,\n\nI was wondering about BIP 65 regarding the OP_CHECKLOCKTIMEVERIFY, and thought it might make more sense to instead have a OP_CHECKLOCKTIME which would simply push an OP_TRUE or OP_FALSE onto the stack?\n\nThat way someone could include multiple OP_CHECKLOCKTIME conditions in a single script. It is trivial to always emulate OP_CHECKLOCKTIMEVERIFY by using a OP_CHECKLOCKTIME OP_VERIFY sequence.\n\n\nAs a second question, would it possibly make more sense to, rather than relying on the nLockTime in a transaction, allow an opcode that would use similar semantics, but against an item in the stack? Then you could essentially include multiple nLockTimes in a single script and make arbitrarily interesting (complicated?) scripts based on block height and/or block timestamp.\n\nThe OP_CHECKLOCKTIMEVERIFY can still be easily implemented, by using\n\nnLockTimeThatWouldBeInTx OP_CHECKLOCKTIME OP_VERIFY\n\n\nJust something that came to mind while reading about OP_CHECKLOCKTIMEVERIFY.\n\nThanks,\n\nRicMoo\n\n.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8\u00b8.\u00b7\u00b4\u00af`\u00b7.\u00b8><(((\u00ba>\n\nRichard Moore ~ Founder\nGenetic Mistakes Software inc.\nphone: (778) 882-6125\nemail: ricmoo at geneticmistakes.com <mailto:ricmoo at geneticmistakes.com>\nwww: http://GeneticMistakes.com <http://geneticmistakes.com/>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141127/be90f9d6/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-11-27T23:46:23",
                "message_text_only": "On Thu, Nov 27, 2014 at 10:56 PM, Richard Moore <me at ricmoo.com> wrote:\n> Heya,\n>\n> I was wondering about BIP 65 regarding the OP_CHECKLOCKTIMEVERIFY, and\n> thought it might make more sense to instead have a OP_CHECKLOCKTIME which\n> would simply push an OP_TRUE or OP_FALSE onto the stack?\n\nUpdating the stack is not soft-fork compatible and any use would\nimmediately fork the network.\n\nA invertible test is also not soft-fork compatible e.g. someone writes\na script that does {<new thing>) OP_NOT,  in other words \"the test\nmust fail\", then the network would fork because older nodes would see\nit as passing (which was the required criteria for non-forking the\nnetwork in the non-inverted caes).\n\nYou can happily get non-nullable true/false behaviour without these\nrisks by having the VERIFY test inside a branch and having the signer\nprovide its falseness as an input to the branch. This is explained in\nthe BIP.\n\nE.g. OP_IF <limit> OP_CHECKLOCKTIMEVERIFY OP_ELSE <what you'd do if it\ndoesn't pass> OP_END\n\nA useful an powerful mental model is that SCRIPT is not running a\nprogram, but instead the signer is proving to the network that they\nknow inputs that make the program return true.\n\n(In practise we verify this by actually doing some execution, though\nthis isn't technically necessary it's the simplest thing to implement\nalthough it is inefficient... but even in this simple model keeping in\nmind that we're VERIFYING not executing in the network opens our eyes\nto transformations like the IF bracketing of a VERIFY opcode.)\n\n> That way someone could include multiple OP_CHECKLOCKTIME conditions in a\n> single script.\n\nThey can do this, with the above approach.\n\n> As a second question, would it possibly make more sense to, rather than\n> relying on the nLockTime in a transaction, allow an opcode that would use\n> similar semantics, but against an item in the stack? Then you could\n> essentially include multiple nLockTimes in a single script and make\n> arbitrarily interesting (complicated?) scripts based on block height and/or\n> block timestamp.\n>\n> The OP_CHECKLOCKTIMEVERIFY can still be easily implemented, by using\n>\n> nLockTimeThatWouldBeInTx OP_CHECKLOCKTIME OP_VERIFY\n\nThen the scripts validity isn't a pure function of the the\ntransaction, and once valid transactions could become invalid while in\nthe mempool. This breaks existing invariants and would make the coins\npotentially less fungible because they wouldn't be reorg safe. That\nlocktime validity is basically monotonic is a useful intentional\nproperty. :)\n\n\nThe things you're suggesting were all carefully designed out of the\nproposal, perhaps the BIP text needs some more clarification to make\nthis more clear."
            },
            {
                "author": "Peter Todd",
                "date": "2014-11-28T03:18:06",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 27 November 2014 18:46:23 GMT-05:00, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n<snip 100% accurate commentary from gmaxwell>\n\n>The things you're suggesting were all carefully designed out of the\n>proposal, perhaps the BIP text needs some more clarification to make\n>this more clear.\n\nIt does; it is still a draft. That said I think writing up some actual working examples, in code, of CHECKLOCKTIMEVERIFY using protocols is a bigger priority. Micropayment channels comes to mind, as well as a greenaddress-style wallet.\n\nWhen I get a chance I'm going to rebase the initial implementation and add to it a command-line-flag to verify CHECKLOCKTIMEVERIFY as an IsStandard() rule for testing purposes.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJUd+luMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhWmcB/0UK030Q6TSpi95x0Gh\nhGYaSAInUWpbZzZtP+1AFrGDGRdGo0glFFf8xggI+U5kuc0woPYrn/VEGcprPhvs\nKQFZrirXVr7Q09TVlHiPDen5v3Y7xwL5kQDUrBPP71Pe3R2o6IbfdwxsZ8+yYso8\nhY6WQmImQpKJd4gEd76w1QrF8Btl1Jz/PGh4EE3GSPGlflvBwA6igSiRoD/czb1x\n63y4AsPEil2hrmIjTZHqwnl40BqnmZ8qpNLWeIEjE++pbkxLTjvUcPy03/wtTWZA\n5dCGeY5WavgZsPazhSdaTtM5/7wPSQQ0PDXNHdHgmewkvbyBpy78orV/3bEG+xFz\n2SWi\n=4OmI\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-11-28T11:45:19",
                "message_text_only": "> This breaks existing invariants and would make the coins potentially less\nfungible because they wouldn't be reorg safe.\n\nI'm not sure coins are ever reorg safe. All it takes is a double spend in\nthe history of your coins for them to become invalid after a reorg. Because\nof that, there are already less fungible coins. This is why we recommend 6\nconfirmations for important payments.\n\nOn Fri, Nov 28, 2014 at 3:18 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n>\n>\n> On 27 November 2014 18:46:23 GMT-05:00, Gregory Maxwell <\n> gmaxwell at gmail.com> wrote:\n>\n> <snip 100% accurate commentary from gmaxwell>\n>\n> >The things you're suggesting were all carefully designed out of the\n> >proposal, perhaps the BIP text needs some more clarification to make\n> >this more clear.\n>\n> It does; it is still a draft. That said I think writing up some actual\n> working examples, in code, of CHECKLOCKTIMEVERIFY using protocols is a\n> bigger priority. Micropayment channels comes to mind, as well as a\n> greenaddress-style wallet.\n>\n> When I get a chance I'm going to rebase the initial implementation and add\n> to it a command-line-flag to verify CHECKLOCKTIMEVERIFY as an IsStandard()\n> rule for testing purposes.\n> -----BEGIN PGP SIGNATURE-----\n> Version: APG v1.1.1\n>\n> iQFQBAEBCAA6BQJUd+luMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhWmcB/0UK030Q6TSpi95x0Gh\n> hGYaSAInUWpbZzZtP+1AFrGDGRdGo0glFFf8xggI+U5kuc0woPYrn/VEGcprPhvs\n> KQFZrirXVr7Q09TVlHiPDen5v3Y7xwL5kQDUrBPP71Pe3R2o6IbfdwxsZ8+yYso8\n> hY6WQmImQpKJd4gEd76w1QrF8Btl1Jz/PGh4EE3GSPGlflvBwA6igSiRoD/czb1x\n> 63y4AsPEil2hrmIjTZHqwnl40BqnmZ8qpNLWeIEjE++pbkxLTjvUcPy03/wtTWZA\n> 5dCGeY5WavgZsPazhSdaTtM5/7wPSQQ0PDXNHdHgmewkvbyBpy78orV/3bEG+xFz\n> 2SWi\n> =4OmI\n> -----END PGP SIGNATURE-----\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Download BIRT iHub F-Type - The Free Enterprise-Grade BIRT Server\n> from Actuate! Instantly Supercharge Your Business Reports and Dashboards\n> with Interactivity, Sharing, Native Excel Exports, App Integration & more\n> Get technology previously reserved for billion-dollar corporations, FREE\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=157005751&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141128/83bcf235/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-11-28T12:03:52",
                "message_text_only": "On Fri, Nov 28, 2014 at 11:45 AM, Flavien Charlon\n<flavien.charlon at coinprism.com> wrote:\n>> This breaks existing invariants and would make the coins potentially less\n>> fungible because they wouldn't be reorg safe.\n>\n> I'm not sure coins are ever reorg safe. All it takes is a double spend in\n> the history of your coins for them to become invalid after a reorg. Because\n> of that, there are already less fungible coins. This is why we recommend 6\n> confirmations for important payments.\n\nI used the word 'less' intentionally.   A double spend requires an\nactive action. Roughly 1% of blocks are lost to reorganizations by\nchance, longer otherwise harmless reorgs as we've had in the past\ncould forever destroy large chunks of coins if descendants had the\nunwelcome properties of having additional constraints on them. Past\ninstances where the network had a dozen block reorganization which\nwere harmless and simply confirmed the same transactions likely would\nhave caused substantial losses if it reorganizations precluded the\nrecovery of many transactions which were valid when placed earlier in\nthe chain.\n\nAdditionally your '6 confirmations' is a uniform rule. The\nrecommendation is just a count, it's tidy.  It's not a \"traverse the\nrecent history of each coin you receive to determine if its script\nconditions make it unusually fragile and subject to irrecoverable\nloss\", which is the space you can get into with layering violations\nand transaction validity depending on arbitrary block data."
            }
        ],
        "thread_summary": {
            "title": "BIP 65 and OP_CHECKLOCKTIMEVERIFY inquiry...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Richard Moore",
                "Gregory Maxwell",
                "Peter Todd",
                "Flavien Charlon"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 9617
        }
    }
]