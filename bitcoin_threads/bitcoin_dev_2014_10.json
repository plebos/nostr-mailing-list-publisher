[
    {
        "title": "[Bitcoin-development] [BIP draft] CHECKLOCKTIMEVERIFY - Prevent a txout from being spent until an expiration time",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-10-01T13:08:26",
                "message_text_only": "I've written a reference implementation and BIP draft for a new opcode,\nCHECKLOCKTIMEVERIFY. The BIP, reproduced below, can be found at:\n\n    https://github.com/petertodd/bips/blob/checklocktimeverify/bip-checklocktimeverify.mediawiki\n\nThe reference implementation, including a full-set of unittests for the\nopcode semantics can be found at:\n\n    https://github.com/petertodd/bitcoin/compare/checklocktimeverify\n\n<pre>\n  BIP:\n  Title: OP_CHECKLOCKTIMEVERIFY\n  Author: Peter Todd <pete at petertodd.org>\n  Status: Draft\n  Type: Standards Track\n  Created: 2014-10-01\n</pre>\n\n==Abstract==\n\nThis BIP describes a new opcode (OP_CHECKLOCKTIMEVERIFY) for the Bitcoin\nscripting system that allows a transaction output to be made unspendable until\nsome point in the future.\n\n\n==Summary==\n\nCHECKLOCKTIMEVERIFY re-defines the existing NOP2 opcode. When executed it\ncompares the top item on the stack to the nLockTime field of the transaction\ncontaining the scriptSig. If that top stack item is greater than the transation\nnLockTime the script fails immediately, otherwise script evaluation continues\nas though a NOP was executed.\n\nThe nLockTime field in a transaction prevents the transaction from being mined\nuntil either a certain block height, or block time, has been reached. By\ncomparing the argument to CHECKLOCKTIMEVERIFY against the nLockTime field, we\nindirectly verify that the desired block height or block time has been reached;\nuntil that block height or block time has been reached the transaction output\nremains unspendable.\n\n\n==Motivation==\n\nThe nLockTime field in transactions makes it possible to prove that a\ntransaction output can be spent in the future: a valid signature for a\ntransaction with the desired nLockTime can be constructed, proving that it is\npossible to spend the output with that signature when the nLockTime is reached.\nAn example where this technique is used is in micro-payment channels, where the\nnLockTime field proves that should the receiver vanish the sender is guaranteed\nto get all their escrowed funds back when the nLockTime is reached.\n\nHowever the nLockTime field is insufficient if you wish to prove that\ntransaction output ''can-not'' be spent until some time in the future, as there\nis no way to prove that the secret keys corresponding to the pubkeys controling\nthe funds have not been used to create a valid signature.\n\n\n===Escrow===\n\nIf Alice and Bob jointly operate a business they may want to\nensure that all funds are kept in 2-of-2 multisig transaction outputs that\nrequire the co-operation of both parties to spend. However, they recognise that\nin exceptional circumstances such as either party getting \"hit by a bus\" they\nneed a backup plan to retrieve the funds. So they appoint their lawyer, Lenny,\nto act as a third-party.\n\nWith a standard 2-of-3 CHECKMULTISIG at any time Lenny could conspire with\neither Alice or Bob to steal the funds illegitimately. Equally Lenny may prefer\nnot to have immediate access to the funds to discourage bad actors from\nattempting to get the secret keys from him by force.\n\nHowever with CHECKLOCKTIMEVERIFY the funds can be stored in scriptPubKeys of\nthe form:\n\n    IF\n        <now + 3 months> CHECKLOCKTIMEVERIFY DROP\n        <Lenny's pubkey> CHECKSIGVERIFY\n        1\n    ELSE\n        2\n    ENDIF\n    <Alice's pubkey> <Bob's pubkey> 2 CHECKMULTISIG\n\nAt any time the funds can be spent with the following scriptSig:\n\n    <Alice's signature> <Bob's signature> 0\n\nAfter 3 months have passed Lenny and one of either Alice or Bob can spend the\nfunds with the following scriptSig:\n\n    <Alice/Bob's signature> <Lenny's signature> 1\n\n\n===Non-interactive time-locked refunds===\n\nThere exist a number of protocols where a transaction output is created that\nthe co-operation of both parties to spend the output. To ensure the failure of\none party does not result in the funds becoming lost refund transactions are\nsetup in advance using nLockTime. These refund transactions need to be created\ninteractively, and additionaly, are currently vulnerable to transaction\nmutability. CHECKLOCKTIMEVERIFY can be used in these protocols, replacing the\ninteractive setup with a non-interactive setup, and additionally, making\ntransaction mutability a non-issue.\n\n\n====Two-factor wallets====\n\nServices like GreenAddress store Bitcoins with 2-of-2 multisig scriptPubKey's\nsuch that one keypair is controlled by the user, and the other keypair is\ncontrolled by the service. To spend funds the user uses locally installed\nwallet software that generates one of the required signatures, and then uses a\n2nd-factor authentication method to authorize the service to create the second\nSIGHASH_NONE signature that is locked until some time in the future and sends\nthe user that signature for storage. If the user needs to spend their funds and\nthe service is not available, they wait until the nLockTime expires.\n\nThe problem is there exist numerous occasions the user will not have a valid\nsignature for some or all of their transaction outputs. With\nCHECKLOCKTIMEVERIFY rather than creating refund signatures on demand\nscriptPubKeys of the following form are used instead:\n\n    IF\n        <service pubkey> CHECKSIGVERIFY\n    ELSE\n        <expiry time> CHECKLOCKTIMEVERIFY DROP\n    ENDIF\n    <user pubkey> CHECKSIG\n\nNow the user is always able to spend their funds without the co-operation of\nthe service by waiting for the expiry time to be reached.\n\n\n====Micropayment Channels====\n\nJeremy Spilman style micropayment channels first setup a deposit controlled by\n2-of-2 multisig, tx1, and then adjust a second transaction, tx2, that spends\nthe output of tx1 to payor and payee. Prior to publishing tx1 a refund\ntransaction is created, tx3, to ensure that should the payee vanish the payor\ncan get their deposit back. The process by which the refund transaction is\ncreated is currently vulnerable to transaction mutability attacks, and\nadditionally, requires the payor to store the refund. Using the same\nscriptPubKey from as in the Two-factor wallets example solves both these issues.\n\n\n===Trustless Payments for Publishing Data===\n\nThe PayPub protocol makes it possible to pay for information in a trustless way\nby first proving that an encrypted file contains the desired data, and secondly\ncrafting scriptPubKeys used for payment such that spending them reveals the\nencryption keys to the data. However the existing implementation has a\nsignificant flaw: the publisher can delay the release of the keys indefinitely.\n\nThis problem can be solved interactively with the refund transaction technique;\nwith CHECKLOCKTIMEVERIFY the problem can be non-interactively solved using\nscriptPubKeys of the following form:\n\n    IF\n        HASH160 <Hash160(encryption key)> EQUALVERIFY\n        <publisher pubkey> CHECKSIG\n    ELSE\n        <expiry time> CHECKLOCKTIMEVERIFY DROP\n        <buyer pubkey> CHECKSIG\n    ENDIF\n\nThe buyer of the data is now making a secure offer with an expiry time. If the\npublisher fails to accept the offer before the expiry time is reached the buyer\ncan cancel the offer by spending the output.\n\n\n===Proving sacrifice to miners' fees===\n\nProving the sacrifice of some limited resource is a common technique in a\nvariety of cryptographic protocols. Proving sacrifices of coins to mining fees\nhas been proposed as a ''universal public good'' to which the sacrifice could\nbe directed, rather than simply destroying the coins. However doing so is\nnon-trivial, and even the best existing technqiue - announce-commit sacrifices\n- could encourage mining centralization. CHECKLOCKTIMEVERIFY can be used to\ncreate outputs that are provably spendable by anyone (thus to mining fees\nassuming miners behave optimally and rationally) but only at a time\nsufficiently far into the future that large miners profitably can't sell the\nsacrifices at a discount.\n\n\n===Replacing the nLockTime field entirely===\n\nAs an aside, note how if the SignatureHash() algorithm could optionally cover\npart of the scriptSig the signature could require that the scriptSig contain\nCHECKLOCKTIMEVERIFY opcodes, and additionally, require that they be executed.\n(the CODESEPARATOR opcode came very close to making this possible in v0.1 of\nBitcoin) This per-signature capability could replace the per-transaction\nnLockTime field entirely as a valid signature would now be the proof that a\ntransaction output ''can'' be spent.\n\n\n==Detailed Specification==\n\nRefer to the reference implementation, reproduced below, for the precise\nsemantics and detailed rationale for those semantics.\n\n    case OP_NOP2:\n    {\n        // CHECKLOCKTIMEVERIFY\n        //\n        // (nLockTime -- nLockTime )\n    \n        if (!(flags & SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY))\n            break; // not enabled; treat as a NOP\n    \n        if (stack.size() < 1)\n            return false;\n    \n        // Note that elsewhere numeric opcodes are limited to\n        // operands in the range -2**31+1 to 2**31-1, however it is\n        // legal for opcodes to produce results exceeding that\n        // range. This limitation is implemented by CScriptNum's\n        // default 4-byte limit.\n        //\n        // If we kept to that limit we'd have a year 2038 problem,\n        // even though the nLockTime field in transactions\n        // themselves is uint32 which only becomes meaningless\n        // after the year 2106.\n        //\n        // Thus as a special case we tell CScriptNum to accept up\n        // to 5-byte bignums, which are good until 2**32-1, the\n        // same limit as the nLockTime field itself.\n        const CScriptNum nLockTime(stacktop(-1), 5);\n    \n        // In the rare event that the argument may be < 0 due to\n        // some arithmetic being done first, you can always use\n        // 0 MAX CHECKLOCKTIMEVERIFY.\n        if (nLockTime < 0)\n            return false;\n    \n        // There are two times of nLockTime: lock-by-blockheight\n        // and lock-by-blocktime, distinguished by whether\n        // nLockTime < LOCKTIME_THRESHOLD.\n        //\n        // We want to compare apples to apples, so fail the script\n        // unless the type of nLockTime being tested is the same as\n        // the nLockTime in the transaction.\n        if (!(\n              (txTo.nLockTime <  LOCKTIME_THRESHOLD && nLockTime <  LOCKTIME_THRESHOLD) ||\n              (txTo.nLockTime >= LOCKTIME_THRESHOLD && nLockTime >= LOCKTIME_THRESHOLD)\n             ))\n            return false;\n    \n        // Now that we know we're comparing apples-to-apples, the\n        // comparison is a simple numeric one.\n        if (nLockTime > (int64_t)txTo.nLockTime)\n            return false;\n    \n        // Finally the nLockTime feature can be disabled and thus\n        // CHECKLOCKTIMEVERIFY bypassed if every txin has been\n        // finalized by setting nSequence to maxint. The\n        // transaction would be allowed into the blockchain, making\n        // the opcode ineffective.\n        //\n        // Testing if this vin is not final is sufficient to\n        // prevent this condition. Alternatively we could test all\n        // inputs, but testing just this input minimizes the data\n        // required to prove correct CHECKLOCKTIMEVERIFY execution.\n        if (txTo.vin[nIn].IsFinal())\n            return false;\n    \n        break;\n    \n    }\n\nhttps://github.com/petertodd/bitcoin/commit/ab0f54f38e08ee1e50ff72f801680ee84d0f1bf4\n\n\n==Upgrade and Testing Plan==\n\nTBD\n\n\n==Credits==\n\nThanks goes to Gregory Maxwell for suggesting that the argument be compared\nagainst the per-transaction nLockTime, rather than the current block height and\ntime.\n\n\n==References==\n\nPayPub - https://github.com/unsystem/paypub\n\nJeremy Spilman Micropayment Channels - http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02028.html\n\n\n==Copyright==\n\nThis document is placed in the public domain.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000009012f16fe9db21abbba5025453a9b7b589a807b21cec318\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141001/e8e4213b/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-10-01T15:01:28",
                "message_text_only": "Very nice, semantics are clear and use cases are compelling.\n\nCan we defer discussion of how to roll this out for a little bit, and see\nif there is consensus that:\n\na) benefits of having this outweigh risks\nb) we're all happy with exact semantics\n\nThen we can have a knock-down drag-out argument about whether it should\nroll out as a soft fork, wait for a hard fork, be combined with some other\nthings that it would be nice to add or change, etc.....\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141001/94a794c3/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-02T01:06:06",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 1 October 2014 08:01:28 GMT-07:00, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>Very nice, semantics are clear and use cases are compelling.\n\nThanks!\n\n>Can we defer discussion of how to roll this out for a little bit, and\n>see\n>if there is consensus that:\n>\n>a) benefits of having this outweigh risks\n>b) we're all happy with exact semantics\n>\n>Then we can have a knock-down drag-out argument about whether it should\n>roll out as a soft fork, wait for a hard fork, be combined with some\n>other\n>things that it would be nice to add or change, etc.....\n\nAgreed. People should keep in mind that leaving the deployment details as \"TBD\" was quite deliberate. There is some code in the repo to implement a softfork, but it's only meant to be illustrative.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJULKT9MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhevAB/0eTWleef5GehrH03tZ\nNrOdtJ881NhXJpB3p81jPyT9z4gv9u3M5bkjMOvClQaf8PX551ICgKbWDQTNf9oS\nTF/blkqWRWX28VLkNsMUQNN/dd7rdqDMpnwcN8worgHToRMa4drFBU/MXapedMLQ\nSb2ETXGYPm4b/HqgFf9j/EGt8jhmnk4HiSwZ6wdhdYLbbZ6NhplSR8tTs+GouAWp\nPHntN6DQI8oFDaIKkMbs2dDlpXSGG9hxr6m46LBwp/CHBY9aKkwLyaJXkMVovP3J\nHrSYTzlCmjrDNbLJwIze+fyO2UDkgZUzjVENfMvixcQNdz0pVoCzJ2BK8b4fAc7Y\nmaRA\n=Mz3E\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-10-01T15:29:48",
                "message_text_only": "I like the proposal.\n\nI suggest that applications and nodes should only broadcast transactions\nhaving OP_CHECKLOCKTIMEVERIFY a few blocks after the timeout value.\nIf a node broadcasts a TX having OP_CHECKLOCKTIMEVERIFY and nLockTime is\nequal to the current height and equal to the timeout value, but that\npeer is one block behind in the blockchain, the transaction will be\nrejected by the peer and the source will be banned.\n\nAnother option will be not to ban peers sending transactions failing to\nverify OP_CHECKLOCKTIMEVERIFY , but I don't like this.\n\nStill another option would be that the sender checks periodically the\nheight of it's peers (using the version command) in order to be sure to\nsend the transaction having OP_CHECKLOCKTIMEVERIFY only to the peers\nthat are up to date with the blockchain.\n\nRegards,\n Sergio."
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-01T17:06:03",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nYeah, there are lots of \"upper-level\" details to consider; I'm not going to pretend that BIP is complete yet. My thinking is that the first release should include my NOPx blacklist pull-req, and leave NOP2/CHECKLOCKTIMEVERIFY in that blacklist for another minor release or two.\n\n\nOn 1 October 2014 11:29:48 GMT-04:00, Sergio Lerner <sergiolerner at certimix.com> wrote:\n>I like the proposal.\n>\n>I suggest that applications and nodes should only broadcast\n>transactions\n>having OP_CHECKLOCKTIMEVERIFY a few blocks after the timeout value.\n>If a node broadcasts a TX having OP_CHECKLOCKTIMEVERIFY and nLockTime\n>is\n>equal to the current height and equal to the timeout value, but that\n>peer is one block behind in the blockchain, the transaction will be\n>rejected by the peer and the source will be banned.\n>\n>Another option will be not to ban peers sending transactions failing to\n>verify OP_CHECKLOCKTIMEVERIFY , but I don't like this.\n>\n>Still another option would be that the sender checks periodically the\n>height of it's peers (using the version command) in order to be sure to\n>send the transaction having OP_CHECKLOCKTIMEVERIFY only to the peers\n>that are up to date with the blockchain.\n>\n>Regards,\n> Sergio.\n>\n>\n>\n>\n>------------------------------------------------------------------------------\n>Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n>Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS\n>Reports\n>Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n>Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n>http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJULDR7MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhS8ACADKQYHqOvmKJBYv+ZZM\nVs6358sMEtHGIEoTEjPio/vGbM0TkCGvRAnvzXDYz20WQcQsWZ4jflP1BihdbszE\nNrQ+4JYm11Sw6vK5RpxeI4rJSb/hMUJooR0WQn8TOSZowtVxhINUnBku+N21Dhuf\nIBCzji5bW2wjeN50psWOjJkBo1gZP761tjfmpI9kdNFe6RYIceAIWIIhccKX4PhA\nFucuPawjB8+Ajd707UGHew82VHbXis+6Oxzob7hVJRH/wNKpkR6LXRxh2dwVaRAw\n/Eytbt8LZRcRZGNXvMZ4GKG0xP79cBQI30QhrgM88gGyioMxrWcP2hVhtADOVl40\nE4yh\n=C9fu\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-10-01T18:23:55",
                "message_text_only": "On Wednesday, October 01, 2014 1:08:26 PM Peter Todd wrote:\n> I've written a reference implementation and BIP draft for a new opcode,\n> CHECKLOCKTIMEVERIFY.\n\nThoughts on some way to have the stack item be incremented by the height at \nwhich the scriptPubKey was in a block? A limitation of encoding the target \nheight/time directly, is that miners may choose not to mine the first \ntransaction until they can also take the \"burn to fee\". So, one may prefer to \nsay \"cannot be spent until 100 blocks after the first transaction is mined\", \nin effect reproducing the generation maturity rule.\n\nI propose any stack item under 0x40000 be incremented by the height at which \nthe scriptPubKey was mined for comparison. Maybe there is a use case for doing \nsomething similar for time too?\n\nLuke"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-10-01T20:58:34",
                "message_text_only": "On Wed, Oct 1, 2014 at 2:23 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> houghts on some way to have the stack item be incremented by the height at\n> which the scriptPubKey was in a block? A limitation of encoding the target\n> height/time directly, is that miners may choose not to mine the first\n> transaction until they can also take the \"burn to fee\".\n>\n\nIf the first transaction is P2SH, then the miner won't know there is an\nadvantage to holding it until it is too late (the scriptPubKey is an opaque\nhash until the second transaction is final and relayed/broadcast).\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141001/dd4a8c60/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-10-01T21:04:33",
                "message_text_only": "On 10/01/2014 04:58 PM, Gavin Andresen wrote:\n> If the first transaction is P2SH, then the miner won't know there is\n> an advantage to holding it until it is too late (the scriptPubKey is\n> an opaque hash until the second transaction is final and\n> relayed/broadcast).\n\nIf you're doing some kind of proof-of-burn scheme, wouldn't using P2SH\ndefeat the purpose of it?"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-10-01T21:34:33",
                "message_text_only": "On Wed, Oct 1, 2014 at 5:04 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n\n> On 10/01/2014 04:58 PM, Gavin Andresen wrote:\n> > If the first transaction is P2SH, then the miner won't know there is\n> > an advantage to holding it until it is too late (the scriptPubKey is\n> > an opaque hash until the second transaction is final and\n> > relayed/broadcast).\n>\n> If you're doing some kind of proof-of-burn scheme, wouldn't using P2SH\n> defeat the purpose of it?\n>\n\nNo, the burner would supply the funding transaction plus the redeeming\nscript as the proof-of-burn to whoever needed the proof.\n\nOnly after at least one confirmation, if there was some risk that revealing\nthe redeeming script would make miners refuse to mine that first\ntransaction because they want to get it plus the CHECKTIMELOCKVERIFY \"burn\"\ntransaction.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141001/05ee5140/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-02T00:12:51",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 1 October 2014 14:34:33 GMT-07:00, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>On Wed, Oct 1, 2014 at 5:04 PM, Alan Reiner <etotheipi at gmail.com>\n>wrote:\n>No, the burner would supply the funding transaction plus the redeeming\n>script as the proof-of-burn to whoever needed the proof.\n\nNo, the redeemScript has to be provably published to miners for the sacrifice to be valid; if not you can exploit the scheme by hiding the redeemScript and having a big miner mine it at lower-than-face-value cost when it unlocks.\n\n>Only after at least one confirmation, if there was some risk that\n>revealing\n>the redeeming script would make miners refuse to mine that first\n>transaction because they want to get it plus the CHECK TIME BLOCK VERIFY\n>\"burn\"\n>transaction.\n\nYes, you could do that in a followup tx containing the redeemScript in an OP_RETURN output to prove publication. That said as I said to Luke-Jr, the sacrifices need to unlock pretty far into the future, so I don't see miners bothering to do this.\n\n\n\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJULJiDMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhTwKCACD+GWzID7Qhn2no1p9\nKYNiYlQVNt+DPZY0QB7MujL8riAmyJBliF9zptfjEdvglShoIzonJien/DOCjp9S\nLw2wMvPhtZGgSttJEvlr3wclty6TfWygd4Y+v/MR8TnYC99su7HhiQ1pkqohkklv\nRxeF9jXhcJMERzN6wPUyeowfziBAfbWw+M5CwiXRlzLLBWO37eoDTXzUD0Np5Nia\nnFxQ7sAsSbLijVpvigh9uIi3/1347VqwMc+0ZsZoZ2AnMICA8Q+XKNHv7DKpChxw\nXa+P532Di34uu8dlG/Z/UwYdENvb15P1yUZ7CEDfqNqrZp0RM7x+XKMA7QPwhuz3\nYSBp\n=mvKP\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-02T00:05:15",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:\n>Thoughts on some way to have the stack item be incremented by the\n>height at\n>which the scriptPubKey was in a block?\n\nBetter to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator. scriptPubKey would be:\n\n    GET-TXIN-BLOCKHEIGHT-EQUALVERIFY\n\n(fails unless top stack item is equal to the txin block height)\n\n    <delta height> ADD\n\n(top stack item is now txin height + delta height)\n\n    CHECKLOCKTIMEVERIFY\n\n> A limitation of encoding the\n>target\n>height/time directly, is that miners may choose not to mine the first\n>transaction until they can also take the \"burn to fee\". So, one may\n>prefer to\n>say \"cannot be spent until 100 blocks after the first transaction is\n>mined\",\n>in effect reproducing the generation maturity rule.\n\nYou'd want these sacrifices to unlock years into the future to thoroughly exceed any reasonable business cycle; that's so far into the future that miners are almost certain to just mine them and collect the fees.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJULJa7MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhYlFB/4r2Hv82RK85BDe+hAT\nZQJtzXv1JRCa+o7Y344unMJ8y7rSDJRFSH+X+4VeCln833XKb8FNgj2loniQAq5H\nFIH04gPf7yuXvDrKI6HwCj9Q3KLPv4UZM1+LjijczOM/y4e/C82squpTpgFaton+\n6VXU/WyaCDYDS4he975E14YhBBVhoadZZMOW3Moxgpnde2RwAYZdkcdhqvh/3dJC\n/9VOEUBu0ENyraL5HHGdZyjSJT2MsY4CBTCCd54RxBBMoMZqFRvIi4Xrt2vE1T+Y\nR2DtKs7upjydnfg9KPm484upvO2U3lcnPBW9rqOVQyV2q81TcloRtUIU4QQ9GCAk\nayj2\n=p0BG\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-10-02T00:55:36",
                "message_text_only": "On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:\n> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:\n> >Thoughts on some way to have the stack item be incremented by the\n> >height at\n> >which the scriptPubKey was in a block?\n> \n> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.\n> scriptPubKey would be:\n>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY\n> (fails unless top stack item is equal to the txin block height)\n>     <delta height> ADD\n> (top stack item is now txin height + delta height)\n>     CHECKLOCKTIMEVERIFY\n\nThis sounds do-able, although it doesn't address using timestamps.\n\n> > A limitation of encoding the target\n> >height/time directly, is that miners may choose not to mine the first\n> >transaction until they can also take the \"burn to fee\". So, one may\n> >prefer to\n> >say \"cannot be spent until 100 blocks after the first transaction is\n> >mined\",\n> >in effect reproducing the generation maturity rule.\n> \n> You'd want these sacrifices to unlock years into the future to thoroughly\n> exceed any reasonable business cycle; that's so far into the future that\n> miners are almost certain to just mine them and collect the fees.\n\nFor many use cases, short maturity periods are just as appropriate IMO.\n\nLuke"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-02T01:09:01",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 1 October 2014 17:55:36 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:\n>On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:\n>> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org>\n>wrote:\n>> >Thoughts on some way to have the stack item be incremented by the\n>> >height at\n>> >which the scriptPubKey was in a block?\n>>\n>> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.\n>> scriptPubKey would be:\n>>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY\n>> (fails unless top stack item is equal to the txin block height)\n>>     <delta height> ADD\n>> (top stack item is now txin height + delta height)\n>>     CHECKLOCKTIMEVERIFY\n>\n>This sounds do-able, although it doesn't address using timestamps.\n\nFor timestamps replace \"height\" with \"time\" in the above example; the minimum block time rule will prevent gaming it.\n\n\n>> You'd want these sacrifices to unlock years into the future to\n>thoroughly\n>> exceed any reasonable business cycle; that's so far into the future\n>that\n>> miners are almost certain to just mine them and collect the fees.\n>\n>For many use cases, short maturity periods are just as appropriate IMO.\n\nVery easy to incentivise mining centralisation with short maturities. I personally think just destroying coins is better, but it doesn't sit well with people so this is the next best thing.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJULKWsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcg8CACueZNGfWaZR+xyG9/o\nJwDBCnqOtwr6Bnosg3vNcRIDUnmsh+Qkk5dk2JpqYNYw7C3duhlwHshgsGOFkHEV\nf5RHDwkzGLJDLXrBwxxcIDdm3cJL8UVpQzJ7dD7aSnfj7MU/0aru3HaIU2ZfymUb\n63jhul6FGbXH3K6p3bOoNrfIrCCGOv8jOIzeAgxNPydk8MVPgRhlYLAKBJxu8nMr\n1oJGeaKVSGSPSrRdgS8tI4uOs0F4Q49APrLPGxGTERlATmWrr+asHGJTIxsB2IEm\nvrNgVRpkaN4Of9k96qzD9ReKfBfqm0WQKLolcXCVqGpdoHcvXh2AeWdjB/EFTyOq\nSOgO\n=WybM\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-10-02T15:05:01",
                "message_text_only": "Very good, I like the proposal.\n\nA question I have: can it be used to do the opposite, i.e. build a script\nthat can only be spent up until block X?\n\nOn Thu, Oct 2, 2014 at 2:09 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n>\n>\n> On 1 October 2014 17:55:36 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:\n> >On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:\n> >> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org>\n> >wrote:\n> >> >Thoughts on some way to have the stack item be incremented by the\n> >> >height at\n> >> >which the scriptPubKey was in a block?\n> >>\n> >> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.\n> >> scriptPubKey would be:\n> >>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY\n> >> (fails unless top stack item is equal to the txin block height)\n> >>     <delta height> ADD\n> >> (top stack item is now txin height + delta height)\n> >>     CHECKLOCKTIMEVERIFY\n> >\n> >This sounds do-able, although it doesn't address using timestamps.\n>\n> For timestamps replace \"height\" with \"time\" in the above example; the\n> minimum block time rule will prevent gaming it.\n>\n>\n> >> You'd want these sacrifices to unlock years into the future to\n> >thoroughly\n> >> exceed any reasonable business cycle; that's so far into the future\n> >that\n> >> miners are almost certain to just mine them and collect the fees.\n> >\n> >For many use cases, short maturity periods are just as appropriate IMO.\n>\n> Very easy to incentivise mining centralisation with short maturities. I\n> personally think just destroying coins is better, but it doesn't sit well\n> with people so this is the next best thing.\n> -----BEGIN PGP SIGNATURE-----\n> Version: APG v1.1.1\n>\n> iQFQBAEBCAA6BQJULKWsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcg8CACueZNGfWaZR+xyG9/o\n> JwDBCnqOtwr6Bnosg3vNcRIDUnmsh+Qkk5dk2JpqYNYw7C3duhlwHshgsGOFkHEV\n> f5RHDwkzGLJDLXrBwxxcIDdm3cJL8UVpQzJ7dD7aSnfj7MU/0aru3HaIU2ZfymUb\n> 63jhul6FGbXH3K6p3bOoNrfIrCCGOv8jOIzeAgxNPydk8MVPgRhlYLAKBJxu8nMr\n> 1oJGeaKVSGSPSrRdgS8tI4uOs0F4Q49APrLPGxGTERlATmWrr+asHGJTIxsB2IEm\n> vrNgVRpkaN4Of9k96qzD9ReKfBfqm0WQKLolcXCVqGpdoHcvXh2AeWdjB/EFTyOq\n> SOgO\n> =WybM\n> -----END PGP SIGNATURE-----\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141002/d08a3134/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-10-03T14:28:17",
                "message_text_only": "Is there a reason why we can't have the new opcode simply replace the top stack item with the block height of the txout being redeemed? Then arbitrary logic could be implemented, including \"output cannot be spent until a certain time\" and also \"output can ONLY be spent until a certain time,\" as well as complex logic with alternative key groups with differing time constraints.\n\nOP_CHECKLOCKTIMEVERIFY, as conceived, seems too limited, IMHO.\n\n\nOn Thursday, 2 October 2014, at 4:05 pm, Flavien Charlon wrote:\n> Very good, I like the proposal.\n> \n> A question I have: can it be used to do the opposite, i.e. build a script\n> that can only be spent up until block X?\n> \n> On Thu, Oct 2, 2014 at 2:09 AM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > -----BEGIN PGP SIGNED MESSAGE-----\n> > Hash: SHA256\n> >\n> >\n> >\n> > On 1 October 2014 17:55:36 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:\n> > >On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:\n> > >> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org>\n> > >wrote:\n> > >> >Thoughts on some way to have the stack item be incremented by the\n> > >> >height at\n> > >> >which the scriptPubKey was in a block?\n> > >>\n> > >> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.\n> > >> scriptPubKey would be:\n> > >>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY\n> > >> (fails unless top stack item is equal to the txin block height)\n> > >>     <delta height> ADD\n> > >> (top stack item is now txin height + delta height)\n> > >>     CHECKLOCKTIMEVERIFY\n> > >\n> > >This sounds do-able, although it doesn't address using timestamps.\n> >\n> > For timestamps replace \"height\" with \"time\" in the above example; the\n> > minimum block time rule will prevent gaming it.\n> >\n> >\n> > >> You'd want these sacrifices to unlock years into the future to\n> > >thoroughly\n> > >> exceed any reasonable business cycle; that's so far into the future\n> > >that\n> > >> miners are almost certain to just mine them and collect the fees.\n> > >\n> > >For many use cases, short maturity periods are just as appropriate IMO.\n> >\n> > Very easy to incentivise mining centralisation with short maturities. I\n> > personally think just destroying coins is better, but it doesn't sit well\n> > with people so this is the next best thing.\n> > -----BEGIN PGP SIGNATURE-----\n> > Version: APG v1.1.1\n> >\n> > iQFQBAEBCAA6BQJULKWsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> > cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcg8CACueZNGfWaZR+xyG9/o\n> > JwDBCnqOtwr6Bnosg3vNcRIDUnmsh+Qkk5dk2JpqYNYw7C3duhlwHshgsGOFkHEV\n> > f5RHDwkzGLJDLXrBwxxcIDdm3cJL8UVpQzJ7dD7aSnfj7MU/0aru3HaIU2ZfymUb\n> > 63jhul6FGbXH3K6p3bOoNrfIrCCGOv8jOIzeAgxNPydk8MVPgRhlYLAKBJxu8nMr\n> > 1oJGeaKVSGSPSrRdgS8tI4uOs0F4Q49APrLPGxGTERlATmWrr+asHGJTIxsB2IEm\n> > vrNgVRpkaN4Of9k96qzD9ReKfBfqm0WQKLolcXCVqGpdoHcvXh2AeWdjB/EFTyOq\n> > SOgO\n> > =WybM\n> > -----END PGP SIGNATURE-----\n> >\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> > Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> > Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> > Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> >\n> > http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-10-03T14:30:45",
                "message_text_only": "Oops, sorry. I meant: replace the top stack item with the block height of the txin doing the redeeming. (So the script can calculate the \"current time\" to some reference time embedded in the script.)\n\n\nOn Friday, 3 October 2014, at 10:28 am, Matt Whitlock wrote:\n> Is there a reason why we can't have the new opcode simply replace the top stack item with the block height of the txout being redeemed? Then arbitrary logic could be implemented, including \"output cannot be spent until a certain time\" and also \"output can ONLY be spent until a certain time,\" as well as complex logic with alternative key groups with differing time constraints.\n> \n> OP_CHECKLOCKTIMEVERIFY, as conceived, seems too limited, IMHO.\n> \n> \n> On Thursday, 2 October 2014, at 4:05 pm, Flavien Charlon wrote:\n> > Very good, I like the proposal.\n> > \n> > A question I have: can it be used to do the opposite, i.e. build a script\n> > that can only be spent up until block X?\n> > \n> > On Thu, Oct 2, 2014 at 2:09 AM, Peter Todd <pete at petertodd.org> wrote:\n> > \n> > > -----BEGIN PGP SIGNED MESSAGE-----\n> > > Hash: SHA256\n> > >\n> > >\n> > >\n> > > On 1 October 2014 17:55:36 GMT-07:00, Luke Dashjr <luke at dashjr.org> wrote:\n> > > >On Thursday, October 02, 2014 12:05:15 AM Peter Todd wrote:\n> > > >> On 1 October 2014 11:23:55 GMT-07:00, Luke Dashjr <luke at dashjr.org>\n> > > >wrote:\n> > > >> >Thoughts on some way to have the stack item be incremented by the\n> > > >> >height at\n> > > >> >which the scriptPubKey was in a block?\n> > > >>\n> > > >> Better to create a GET-TXIN-BLOCK-(TIME/HEIGHT)-EQUALVERIFY operator.\n> > > >> scriptPubKey would be:\n> > > >>     GET-TXIN-BLOCKHEIGHT-EQUALVERIFY\n> > > >> (fails unless top stack item is equal to the txin block height)\n> > > >>     <delta height> ADD\n> > > >> (top stack item is now txin height + delta height)\n> > > >>     CHECKLOCKTIMEVERIFY\n> > > >\n> > > >This sounds do-able, although it doesn't address using timestamps.\n> > >\n> > > For timestamps replace \"height\" with \"time\" in the above example; the\n> > > minimum block time rule will prevent gaming it.\n> > >\n> > >\n> > > >> You'd want these sacrifices to unlock years into the future to\n> > > >thoroughly\n> > > >> exceed any reasonable business cycle; that's so far into the future\n> > > >that\n> > > >> miners are almost certain to just mine them and collect the fees.\n> > > >\n> > > >For many use cases, short maturity periods are just as appropriate IMO.\n> > >\n> > > Very easy to incentivise mining centralisation with short maturities. I\n> > > personally think just destroying coins is better, but it doesn't sit well\n> > > with people so this is the next best thing.\n> > > -----BEGIN PGP SIGNATURE-----\n> > > Version: APG v1.1.1\n> > >\n> > > iQFQBAEBCAA6BQJULKWsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> > > cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhcg8CACueZNGfWaZR+xyG9/o\n> > > JwDBCnqOtwr6Bnosg3vNcRIDUnmsh+Qkk5dk2JpqYNYw7C3duhlwHshgsGOFkHEV\n> > > f5RHDwkzGLJDLXrBwxxcIDdm3cJL8UVpQzJ7dD7aSnfj7MU/0aru3HaIU2ZfymUb\n> > > 63jhul6FGbXH3K6p3bOoNrfIrCCGOv8jOIzeAgxNPydk8MVPgRhlYLAKBJxu8nMr\n> > > 1oJGeaKVSGSPSrRdgS8tI4uOs0F4Q49APrLPGxGTERlATmWrr+asHGJTIxsB2IEm\n> > > vrNgVRpkaN4Of9k96qzD9ReKfBfqm0WQKLolcXCVqGpdoHcvXh2AeWdjB/EFTyOq\n> > > SOgO\n> > > =WybM\n> > > -----END PGP SIGNATURE-----\n> > >\n> > >\n> > >\n> > > ------------------------------------------------------------------------------\n> > > Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> > > Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> > > Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> > > Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> > >\n> > > http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> > > _______________________________________________\n> > > Bitcoin-development mailing list\n> > > Bitcoin-development at lists.sourceforge.net\n> > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > >"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-03T16:17:48",
                "message_text_only": "On Fri, Oct 3, 2014 at 7:28 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Is there a reason why we can't have the new opcode simply replace the top stack item with the block height of the txout being redeemed?\n\nThis would not be soft-forking compatible.\n\nIt also would be unsafe in that it would result in transactions which\nonce mined could not be restored in a reorg through no fault of the\nparticipants, which makes the coins less fungible and differently safe\nto accept. It risks creating weird pressures around immediate block\nadmission since a one additional block delay could forever censor such\na transaction (E.g. increases the power of single miners to censor or\nsteal). Avoiding this is a conscious decision in Bitcoin and also part\nof the justification for the 100 block maturity of newly generated\ncoins.\n\nIt also would require violating the script/transaction/block layering\nmore substantially, complicating implementations, and making the\nvalidity of a script no longer a deterministic pure function of the\ntransaction.\n\nAvoiding these issues is a conscious design in OP_CHECKLOCKTIMEVERIFY.\nI would strenuously oppose a proposal which failed in any of these\nrespects.\n\n> Then arbitrary logic could be implemented, including \"output cannot be spent until a certain time\" and also \"output can ONLY be spent until a certain time,\" as well as complex logic with alternative key groups with differing time constraints.\n\nYou can already achieve the not spendable after logic with a\ncancellation spend that moves the coin in the usual way. (Which\ndoesn't even require the participant be online, with the help of some\nnetwork service to queue unlocked transactions).\n\n> OP_CHECKLOCKTIMEVERIFY, as conceived, seems too limited, IMHO.\n\nIt is intentionally so, and yet it covers the intended use cases;\nincluding ones with alternative key groups, they are just not\nexclusive."
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-10-03T17:50:26",
                "message_text_only": "On Friday, October 03, 2014 2:28:17 PM Matt Whitlock wrote:\n> Is there a reason why we can't have the new opcode simply replace the top\n> stack item with the block height of the txout being redeemed? Then\n> arbitrary logic could be implemented, including \"output cannot be spent\n> until a certain time\" and also \"output can ONLY be spent until a certain\n> time,\" as well as complex logic with alternative key groups with differing\n> time constraints.\n\nThis cannot be done in a softfork.\n\nFurthermore, \"output can ONLY be spent until a certain time\" contradict's \nBitcoin's present security assumptions: that assuming a honest sender, the \ntransaction will remain valid and simply re-confirm if a reorg kicks it out.\n\nLuke"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-03T20:58:28",
                "message_text_only": "Alright. It seems there's no real disagreement about how the opcode\nbehaves. Perhaps a time limit would be appropriate to stop people creating\noutputs locked for 100 years .... is bitcoin even likely to exist in 100\nyears? The entire history of computing is not even that old, seems hard to\nimagine that it'd be good for anything beyond wasting space in the\ndatabase. But this is a minor point.\n\nSo I guess it's time to start the deployment discussion.\n\nBitcoin is a consensus system. It works best when everyone is following\nexactly the same rules at the same time. A soft fork works against this\nprinciple by allowing nodes to think they're following the majority\nruleset, even if they aren't, effectively downgrading them to something a\nbit like SPV security without them realising.\n\nA hard fork has multiple desirable properties. Most importantly, it means a\nnode can detect it's no longer in the consensus because it'll find its own\nchain height has diverged significantly from its peers. Core already has\ncode that knows how to detect this condition and log errors about it as\nwell as running the alertnotify script i.e. emailing the admin. Ideally it\nwould also stop serving work so miners shut down or fail over, but this is\neasily added to the CheckForkWarningConditions() function.\n\nIn other words, this gives the cleanest failure we can give, such that any\nprocedures a node operator has put in place to alert them of divergence\nwill be triggered.  Any code which is waiting for confirmations will wait\nforever at this point, thus minimising the risk of loss.\n\nAdditionally, forcing old peers to fall behind means SPV clients will pick\nthe right chain, and not end up downloading transactions or blocks that are\nabout to be doomed at the next re-org. They can easily choose to ignore\ntransactions relayed by peers that are too far behind and thus not end up\naccepting transactions that are no longer valid according to the majority\n(a scenario which can cause monetary loss).\n\nI don't think hard forks should be scary. Mechanisms are in place to warn\npeople and they can be scheduled with plenty of time in advance. The main\nstated justification for a soft fork is backwards compatibility, but in a\nsystem like Bitcoin you really don't want to be running behind the\nconsensus and it's hard to imagine any node operator deliberately choosing\nto stay on the wrong side of the fork. It's not like other software where\npeople can choose to skip an upgrade and things still work just like before.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/328db159/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-10-03T23:12:11",
                "message_text_only": "RE \" It's not like other software where people can choose to skip an\nupgrade and things still work just like before.\"\n\nIf you're a minority, sure you can.  Still a few nutters out there on\na 0.3.x codebase, including one or two inattentive,\nnow-inconsequential miners.\n\nThere is some headroom built in for just that... less disruptive\nupgrades that don't require 100%.\n\n\n\nOn Fri, Oct 3, 2014 at 4:58 PM, Mike Hearn <mike at plan99.net> wrote:\n> Alright. It seems there's no real disagreement about how the opcode behaves.\n> Perhaps a time limit would be appropriate to stop people creating outputs\n> locked for 100 years .... is bitcoin even likely to exist in 100 years? The\n> entire history of computing is not even that old, seems hard to imagine that\n> it'd be good for anything beyond wasting space in the database. But this is\n> a minor point.\n>\n> So I guess it's time to start the deployment discussion.\n>\n> Bitcoin is a consensus system. It works best when everyone is following\n> exactly the same rules at the same time. A soft fork works against this\n> principle by allowing nodes to think they're following the majority ruleset,\n> even if they aren't, effectively downgrading them to something a bit like\n> SPV security without them realising.\n>\n> A hard fork has multiple desirable properties. Most importantly, it means a\n> node can detect it's no longer in the consensus because it'll find its own\n> chain height has diverged significantly from its peers. Core already has\n> code that knows how to detect this condition and log errors about it as well\n> as running the alertnotify script i.e. emailing the admin. Ideally it would\n> also stop serving work so miners shut down or fail over, but this is easily\n> added to the CheckForkWarningConditions() function.\n>\n> In other words, this gives the cleanest failure we can give, such that any\n> procedures a node operator has put in place to alert them of divergence will\n> be triggered.  Any code which is waiting for confirmations will wait forever\n> at this point, thus minimising the risk of loss.\n>\n> Additionally, forcing old peers to fall behind means SPV clients will pick\n> the right chain, and not end up downloading transactions or blocks that are\n> about to be doomed at the next re-org. They can easily choose to ignore\n> transactions relayed by peers that are too far behind and thus not end up\n> accepting transactions that are no longer valid according to the majority (a\n> scenario which can cause monetary loss).\n>\n> I don't think hard forks should be scary. Mechanisms are in place to warn\n> people and they can be scheduled with plenty of time in advance. The main\n> stated justification for a soft fork is backwards compatibility, but in a\n> system like Bitcoin you really don't want to be running behind the consensus\n> and it's hard to imagine any node operator deliberately choosing to stay on\n> the wrong side of the fork. It's not like other software where people can\n> choose to skip an upgrade and things still work just like before.\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-04T00:38:50",
                "message_text_only": "On Fri, Oct 03, 2014 at 07:12:11PM -0400, Jeff Garzik wrote:\n> RE \" It's not like other software where people can choose to skip an\n> upgrade and things still work just like before.\"\n> \n> If you're a minority, sure you can.  Still a few nutters out there on\n> a 0.3.x codebase, including one or two inattentive,\n> now-inconsequential miners.\n> \n> There is some headroom built in for just that... less disruptive\n> upgrades that don't require 100%.\n\nAnyway the stuff Mike is saying about being able to detect upgrades is\nincorrect - detecting an upgrade is *easier* with a soft-fork, just look\nat the block header nVersion numbers and warn the user if they increase\nbeyond what you know is valid. Bitcoin Core implements this IIRC, and\nbitcoinj should.\n\nSomeone with more time should write all this up for the bitcoin.org\ndeveloper docs BTW... There's extensive discussions on #bitcoin-dev and\nothers about all of this.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000012367d385ad11358a4a1eee86cf8ebe06a76add36dfb4622\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/6049aa93/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-04T12:58:19",
                "message_text_only": ">\n> Anyway the stuff Mike is saying about being able to detect upgrades is\n> incorrect - detecting an upgrade is *easier* with a soft-fork, just look\n> at the block header nVersion numbers and warn the user if they increase\n> beyond what you know is valid. Bitcoin Core implements this IIRC, and\n> bitcoinj should.\n>\n\nNobody said hard forks shouldn't have an associated block version number\nincrease - that's a straw man. They should! The difference is only whether\nolder clients are presented with data they would refuse to accept thus\nensuring they don't accept the new version blocks.\n\nMeanwhile, what I said *is* correct. New version numbers result in only a\nlog print. Being hard forked off results in both log prints *and* the\n-alertnotify being run: it's noisier, and if the user followed the\ninstructions printed to the console when there is no config file present,\nhe/she should also get an email or some other kind of more meaningful alert.\n\nFinally, please stop trying to imply that all this is settled and I'm\nsomehow an idiot for bringing it up. You've done that on the pull request\nand now here, it gives me a headache. Instead of making hand-waving\nreferences to \"stuff on IRC ages ago\", explain why it's better to keep\nthese nodes in some fantasy world where they think they're fully validating\nbut are actually not.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141004/0be3ed8c/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-10-07T15:50:45",
                "message_text_only": "On Sat, Oct 4, 2014 at 8:58 AM, Mike Hearn <mike at plan99.net> wrote:\n\n>\n>> Meanwhile, what I said *is* correct. New version numbers result in only\n> a log print. Being hard forked off results in both log prints *and* the\n> -alertnotify being run:\n>\n\nThat is easy to change; I'll submit a pull request. It is a good idea to\nget an -alertnotify sooner rather than later for EITHER a hard fork or a\nsoft-fork. Better to be told you have to upgrade while the block.version is\non its way to being a super-majority than after you are either hard-forked\noff the main chain (or soft-forked).\n\nI don't have any opinion on the hard- versus soft- fork debate. I think\neither can work.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141007/788fa260/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-07T16:08:13",
                "message_text_only": ">\n> That is easy to change; I'll submit a pull request.\n>\n\nThat's certainly a useful improvement. It won't help the existing userbase\nthough - assuming CHECKLOCKTIMEVERIFY is to go in to the next major\nrelease. If there's going to be an intermediate release (6 months?) which\nlays the groundwork for future rule changes, it helps more.\n\nIt would be good if getblocktemplate was updated at the same time to serve\nerrors if the fork warning is active. I'd hope miners have some way to\nautomatically handle IBD/getting forked off the chain, but I guess some\n(newer) pools might not, and refusing to serve work should be the safest\noption that shuts them down.\n\nI don't have any opinion on the hard- versus soft- fork debate. I think\n> either can work.\n>\n\nP2SH was a soft fork and the sky did not fall, but miners did lose money\nand waste electricity mining blocks on the wrong side of the chain:\n\nhttps://bitcointalk.org/index.php?topic=75294.0\n\nPresumably they didn't notice for longer because it looked like a run of\nunusually bad orphaning luck. It seems safer to have a clean fork, with\nalerts telling people during the lockin period before new rule enforcement\nstarts (and possibly automated termination if there's no upgrade by the\nflag day?). Miners who ignore it would still risk losing money, but\nmerchants who wait for a block at least would not be at risk.\n\nOne open question is how can you actually trigger a hard fork? Coinbase\nscriptSigs are not executed, so putting some ignored but failing opcode\nsequence there wouldn't work. One possibility would be to have a special\ninvalid tx in the block that marks the start of new rule enforcement. New\nnodes would know to ignore it. But this risks corrupting block explorers.\nAlternatively the coinbase outpoint structure could have its hash set to 1\ninstead of 0.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141007/9f9292df/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-08T10:26:15",
                "message_text_only": "On Tue, Oct 7, 2014 at 6:08 PM, Mike Hearn <mike at plan99.net> wrote:\n>> That is easy to change; I'll submit a pull request.\n>\n>\n> That's certainly a useful improvement. It won't help the existing userbase\n> though - assuming CHECKLOCKTIMEVERIFY is to go in to the next major release.\n\nThe next minor release (0.9.4) could have Gavin's change already.\n\nI don't think CHECKLOCKTIMEVERIFY will make it into the next major\nrelease though. Once headers-first and pruning is merged (which is\nexpected to be a matter of weeks). I'd like to split off the 0.10\nbranch and give it some time to stabilize with a feature freeze, then\ndo a release before the end of the year.\n\nSo 0.11, in say 6 months, would be soonest.\n\nWladimir"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-10-09T03:13:01",
                "message_text_only": "By the way, I really like this proposal.  I haven't spent much time\nthinking about the deeper subtleties and risks associated with it, but I\nsee a lot of opportunities.  One just came to mind that I didn't see\nmentioned in his original proposal:\n\n_Non-Interactive Recurring payments__with ID-association_:\nYou want to make N recurring payments of 1 BTC each month to a service. \nSign N transactions each of them use a CHECKLOCKTIMEVERIFY block number\napproximately X months in the future (one for each month).   The script\nallows the customer to move the coins at any time, but after the\nlocktime the merchant/service has signing access.  The merchant software\nwill continually watch for and sweep all coins that become available via\nthis mechanism and credit the appropriate customer account.  The\ncustomer maintains control of the funds until payment time, the merchant\ncan automatically collect it each month without requiring user\ninteraction, and the customer can cancel it just by spending it\nelsewhere before the locktime. \n\nThis scheme has an added benefit:  both the merchant's address and the\nuser's address is in the script.  Given an appropriate scheme for\nlinking addresses to accounts (perhaps sending the service a watch-only\nBIP32 branch), the service can use the other address in the script to\nrecognize and link that payment to the user's account.  This allows you\nto continue paying and extending your subscription without having to\nexplicitly link each payment to the account.  The wallet will simply\nmake sure to use a return address that is in a BIP32 branch that was\nprovided to the service during signup, and the service will\nautomatically extend your subscription every month based on that info\nwhen it sweeps payments.\n\nAlong with everything else that was mentioned by Peter in his original\nproposal, I see OP_CHECKLOCKTIMEVERIFY as an enabling feature, not just\na simple improvement.\n \n-Alan\n\n\nOn 10/08/2014 06:26 AM, Wladimir wrote:\n> On Tue, Oct 7, 2014 at 6:08 PM, Mike Hearn <mike at plan99.net> wrote:\n>>> That is easy to change; I'll submit a pull request.\n>>\n>> That's certainly a useful improvement. It won't help the existing userbase\n>> though - assuming CHECKLOCKTIMEVERIFY is to go in to the next major release.\n> The next minor release (0.9.4) could have Gavin's change already.\n>\n> I don't think CHECKLOCKTIMEVERIFY will make it into the next major\n> release though. Once headers-first and pruning is merged (which is\n> expected to be a matter of weeks). I'd like to split off the 0.10\n> branch and give it some time to stabilize with a feature freeze, then\n> do a release before the end of the year.\n>\n> So 0.11, in say 6 months, would be soonest.\n>\n> Wladimir\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/f2bfd465/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2014-10-09T06:14:31",
                "message_text_only": "I think you can do everything with the existing script level nlocktime\nin some kind of turing completeness sense (maybe); but there is a\ncomplexity cost that often you have to resort to extra dependent\ntransaction(s) (and work-around malleability until that is fully\nfixed) just to get the effect.\n\nWhen I tried building things that need nlocktime I found it quite\ninconvenient that it was wasnt a function rather than a script\nproperty, so I like this proposal.\n\nAdam\n\nOn 9 October 2014 04:13, Alan Reiner <etotheipi at gmail.com> wrote:\n> By the way, I really like this proposal.  I haven't spent much time thinking\n> about the deeper subtleties and risks associated with it, but I see a lot of\n> opportunities.  One just came to mind that I didn't see mentioned in his\n> original proposal:\n>\n> Non-Interactive Recurring payments with ID-association:\n> You want to make N recurring payments of 1 BTC each month to a service.\n> Sign N transactions each of them use a CHECKLOCKTIMEVERIFY block number\n> approximately X months in the future (one for each month).   The script\n> allows the customer to move the coins at any time, but after the locktime\n> the merchant/service has signing access.  The merchant software will\n> continually watch for and sweep all coins that become available via this\n> mechanism and credit the appropriate customer account.  The customer\n> maintains control of the funds until payment time, the merchant can\n> automatically collect it each month without requiring user interaction, and\n> the customer can cancel it just by spending it elsewhere before the\n> locktime.\n>\n> This scheme has an added benefit:  both the merchant's address and the\n> user's address is in the script.  Given an appropriate scheme for linking\n> addresses to accounts (perhaps sending the service a watch-only BIP32\n> branch), the service can use the other address in the script to recognize\n> and link that payment to the user's account.  This allows you to continue\n> paying and extending your subscription without having to explicitly link\n> each payment to the account.  The wallet will simply make sure to use a\n> return address that is in a BIP32 branch that was provided to the service\n> during signup, and the service will automatically extend your subscription\n> every month based on that info when it sweeps payments.\n>\n> Along with everything else that was mentioned by Peter in his original\n> proposal, I see OP_CHECKLOCKTIMEVERIFY as an enabling feature, not just a\n> simple improvement.\n>\n> -Alan\n>\n>\n>\n> On 10/08/2014 06:26 AM, Wladimir wrote:\n>\n> On Tue, Oct 7, 2014 at 6:08 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n> That is easy to change; I'll submit a pull request.\n>\n> That's certainly a useful improvement. It won't help the existing userbase\n> though - assuming CHECKLOCKTIMEVERIFY is to go in to the next major release.\n>\n> The next minor release (0.9.4) could have Gavin's change already.\n>\n> I don't think CHECKLOCKTIMEVERIFY will make it into the next major\n> release though. Once headers-first and pruning is merged (which is\n> expected to be a matter of weeks). I'd like to split off the 0.10\n> branch and give it some time to stabilize with a feature freeze, then\n> do a release before the end of the year.\n>\n> So 0.11, in say 6 months, would be soonest.\n>\n> Wladimir\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-09T06:28:19",
                "message_text_only": "On Thu, Oct 9, 2014 at 6:14 AM, Adam Back <adam at cypherspace.org> wrote:\n> I think you can do everything with the existing script level nlocktime\n> in some kind of turing completeness sense (maybe); but there is a\n> complexity cost that often you have to resort to extra dependent\n> transaction(s) (and work-around malleability until that is fully\n> fixed) just to get the effect.\n\nRight, ... moreover, even with all the malleability fixes, they only\nwork if you refrain from using certain features (e.g. cannot do an\nanyone-can-pay) and we cannot be completely sure all accidental\nvectors for malleability are gone (we've been unable to construct a\nproof that our strengthening of ECDSA turns it into a strong\nsignature, though it seems likely).\n\nHaving the locktime control in a scriptPubKey sidesteps all those\nlimitations and simplifies protocols (e.g. not requiring some three\nstep state machine and a bunch of risky validation code to be sure a\nrefund you receive is actually workable)."
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-09T06:33:31",
                "message_text_only": "On Thu, Oct 09, 2014 at 06:28:19AM +0000, Gregory Maxwell wrote:\n> On Thu, Oct 9, 2014 at 6:14 AM, Adam Back <adam at cypherspace.org> wrote:\n> > I think you can do everything with the existing script level nlocktime\n> > in some kind of turing completeness sense (maybe); but there is a\n> > complexity cost that often you have to resort to extra dependent\n> > transaction(s) (and work-around malleability until that is fully\n> > fixed) just to get the effect.\n> \n> Right, ... moreover, even with all the malleability fixes, they only\n> work if you refrain from using certain features (e.g. cannot do an\n> anyone-can-pay) and we cannot be completely sure all accidental\n> vectors for malleability are gone (we've been unable to construct a\n> proof that our strengthening of ECDSA turns it into a strong\n> signature, though it seems likely).\n> \n> Having the locktime control in a scriptPubKey sidesteps all those\n> limitations and simplifies protocols (e.g. not requiring some three\n> step state machine and a bunch of risky validation code to be sure a\n> refund you receive is actually workable).\n\nSpeaking of, can anyone think of an example of a complex transaction\nuse-case that is affected by malleability which can't be fixed by\nCHECKLOCKTIMEVERIFY? I'm sure they exist, but I'm scratching my head\ntrying to think of a good example.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000012367d385ad11358a4a1eee86cf8ebe06a76add36dfb4622\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/7ba7bc8f/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-09T06:40:59",
                "message_text_only": "On Thu, Oct 9, 2014 at 6:33 AM, Peter Todd <pete at petertodd.org> wrote:\n> Speaking of, can anyone think of an example of a complex transaction\n> use-case that is affected by malleability which can't be fixed by\n> CHECKLOCKTIMEVERIFY? I'm sure they exist, but I'm scratching my head\n> trying to think of a good example.\n\nYea, no problem since we lack covenants.\n\nOr a least no problem making an example, maybe you'll find it too\ncontrived since I'm not sure what would motivate it:\n\nYou and I put 5 btc each into a kickstarter-escrow to pay Alice+some\noracle that decides if alice did her job.  But if a timeout expires\nbefore alice manages to get the sign off the funds must be returned\ncompletely to their original payers.\n\nReturning them to in two outputs, one to me, one to you is trivial\nwith a pre-signed refund.\n\nYou could make there be multiple alice outputs or refund, but then you\ncan't guarantee an atomic reversal (e.g. maybe Alice gets half if we\nrace)."
            },
            {
                "author": "Tom Harding",
                "date": "2014-10-08T04:07:15",
                "message_text_only": "On 10/7/2014 8:50 AM, Gavin Andresen wrote:\n>\n> I don't have any opinion on the hard- versus soft- fork debate. I \n> think either can work.\n>\n\nOpinion: if a soft work works, it should be preferred, if for no other \nreason than once a hard-fork is planned, the discussion begins about \nwhat else to throw in.  To minimize the frequency of hard-forks, the \ntime for that is when the change being considered actually requires one."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-08T10:15:02",
                "message_text_only": ">\n> Opinion: if a soft work works, it should be preferred, if for no other\n> reason than once a hard-fork is planned, the discussion begins about\n> what else to throw in.  To minimize the frequency of hard-forks, the\n> time for that is when the change being considered actually requires one.\n\n\nI'm not sure why it'd be any different. Soft forks are just as disruptive -\neveryone who needs a correct node has to upgrade on time. Given that, I\nguess there will be a desire to roll out several changes at once too,\nregardless of what happens to older nodes.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/5bc3190e/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "CHECKLOCKTIMEVERIFY - Prevent a txout from being spent until an expiration time",
            "categories": [
                "Bitcoin-development",
                "BIP draft"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Adam Back",
                "Mike Hearn",
                "Sergio Lerner",
                "Peter Todd",
                "Matt Whitlock",
                "Alan Reiner",
                "Luke Dashjr",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Flavien Charlon",
                "Tom Harding"
            ],
            "messages_count": 32,
            "total_messages_chars_count": 65966
        }
    },
    {
        "title": "[Bitcoin-development] Decreasing block propagation time",
        "thread_messages": [
            {
                "author": "Rebroad (sourceforge)",
                "date": "2014-10-02T04:39:47",
                "message_text_only": "https://bitcointalk.org/index.php?topic=145066.0\n\nThe idea proposed in the above article seemed like an excellent idea. What\nis holding this up from being implemented? Does someone need to code it, or\nwrite a BIP first?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141002/393bbd3b/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-10-02T04:46:43",
                "message_text_only": "It already is https://bitcointalk.org/index.php?topic=766190.0;all.\nWell, ok, a variation on the idea is.\n\nMatt\n\nOn 10/02/14 04:39, Rebroad (sourceforge) wrote:\n> https://bitcointalk.org/index.php?topic=145066.0\n> \n> The idea proposed in the above article seemed like an excellent idea.\n> What is holding this up from being implemented? Does someone need to\n> code it, or write a BIP first?\n> \n> \n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "Decreasing block propagation time",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo",
                "Rebroad (sourceforge)"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1451
        }
    },
    {
        "title": "[Bitcoin-development] bitcoinj 0.12",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-10-03T12:49:52",
                "message_text_only": "I\u2019m pleased to announce version 0.12 of bitcoinj, one of the worlds most popular Bitcoin libraries. It is used by at least four Android wallets, three desktop wallets, blockchain.info, Circle, biteasy, CryptoCorp, Lighthouse, BlueMatt\u2019s relay network, bitpos, countless alt coin wallets, for academic research projects and much more.\n\nThis release represents 8 months of work. The biggest new feature is HD wallets. Other notable enhancements include a bundled Tor client that can be activated with one line of code, support for multisig wallets, much faster and deterministic ECDSA, many API improvements and big upgrades to the included GUI wallet which can be seen in a new screencasted tutorial.\n\nThe commit hash of bitcoinj 0.12 is 83a9a71f3fff3f223d0737ad758b519a39dbbd62. \n\nNew in this release\n\nPrivacy enhancements:\nWallets are now hierarchical and deterministic (HD) by default, using the BIP32 specification. Support for mnemonic codes (BIP 39) is also included. Change and receive addresses are no longer being reused. Old wallets are upgraded in place using the private key of the oldest non-rotating key as the seed bytes, so old backups remain valid.\nThanks to devrandom, we have an integrated Tor mode using the Orchid library. The user does not have to install the Tor client as it\u2019s all pure Java. WalletAppKit users can enable usage of Tor with a single line of code. This support should be considered experimental for now.\nThanks to Kosta Korenkov, we have an experimental multisig wallets implementation. Multisig (also \u201cmarried\u201d) wallets are HD wallets that are connected to a third party risk analysis service or device. When married, the wallet tracks multiple BIP32 key trees, keeps them in sync and starts vending P2SH addresses.\nAs part of this work, transaction signing is now pluggable. TransactionSigner implementations can be added to the wallet and will be serialized into and out of the users saved wallet file. Signers are given a transaction to sign in sequence. This is intended for risk analysis providers to provide a class that talks to their server to get a signature of the right form, so that all bitcoinj based wallets can be easily upgraded to support the new provider.\nReject messages are now deserialized and logged, though not yet exposed in the API.\nUpgraded to Guava 16 and Bouncy Castle 1.51. Thanks to Peter Dettman and the rest of the Bouncy Castle team, bitcoinj now uses deterministic ECDSA for signing and we\u2019re now using an accelerated secp256k1 implementation that exploits the special properties of this curve, for dramatically faster calculations.\nPayment protocol code improvements: Some X.509 utility code was refactored out of PaymentSession for general usage. StartCom was added to the default trust store which was promoted to override the system trust store on non-Android platforms. A command line tool to dump requests to stdout was added.\nThanks to Andreas Schildbach:\nWe are now BIP62 (canonical push encodings) compliant.\nA new Coin class replaces usage of BigInteger for marking values that are quantities of bitcoin. Formatting has moved into the new MonetaryFormat class.\nThe wallet now saves the fee paid on transactions we calculated ourselves. This is useful for putting it into a wallet user interface.\nTransactions can have user memos and exchange rates attached, that will be saved by the wallet.\nSupport for decrypting BIP 38 protected private keys has been added.\nCheckpoints can now be stored textually as well as in the old binary format.\nThere is also a new BtcFormat API that provides an alternative to MonetaryFormat that plugs in to the java.text framework.\nAdded new DNS seed from Addy Yeow.\nWallets can now have string->byte[] mappings attached to them, for lighter weight extensions.\nThanks to Richard Green, there is now a Python version of the ForwardingService program from the getting started tutorial. This shows how to use bitcoinj from Python using the Jython interpreter.\nbitcoinj now probes localhost for a Bitcoin node and automatically uses that instead of the P2P network, when present. This means any bitcoinj based app can be easily upgraded from SPV to full security just by running Core at the same time: no setup needed.\nThanks to Michael Bumann, there are now more example apps showing how to use parts of the API.\nWalletTemplate/WalletAppKit improvements. WalletTemplate is a demo app that shows how to create a cross-platform GUI wallet with a modern style and 60fps animations. WalletAppKit is a very high level API for creating apps that have a Bitcoin wallet:\nNow supports mnemonic code and restore from seed words. A date picker is provided to cut down on the amount of chain that needs to be rescanned.\nSupport for encrypting wallets. Password is requested when needed. The difficulty of the scrypt function is selected to always take a fixed number of seconds even if hardware gets more powerful.\nSome new animation and utility code backported from Lighthouse.\nTor support\nThanks to Martin Zachrison, the micropayment channels implementation has received various improvements.\nThanks to Eric Tierney (Circle), the Postgres store can now take a custom schema.\nThe Bloom filtering API has been extended so FilteredBlock objects can now be produced from Block objects given a BloomFilter. Previously there was support for client-side Bloom usage but no implementation of the generation part.\nMany other bugfixes, cleanups, minor tweaks and small new APIs.\nDocumentation and tutorials\n\nA JavaScript tutorial has been added, showing how to use bitcoinj from this language. More tutorials in other languages will come in future.\nThe \u201cWorking with the wallet\u201d document has been significantly extended to cover encryption, watching wallets, HD wallets and multisig/married wallets.\nA new document and accompanying screencast shows how to extend the WalletTemplate app to have a transactions list, and then make a native/bundled packages that don\u2019t need the user to install Java. By following this tutorial you will learn how to make a basic cross platform desktop wallet of your own.\nAll other docs were refreshed to the latest APIs.\nAPI changes\n\nThe package name has changed to org.bitcoinj and the core Maven artifact name is now \u201cbitcoinj-core\u201d. You can auto-port most of your code by running find . -name '*.java' \\| xargs sed -i .bak 's/com.google.bitcoin./import org.bitcoinj./g\nWallet.completeTx now throws more precise unchecked exceptions in edge cases, instead of IllegalArgumentException.\nThe use of BigInteger to represent quantities of Bitcoin has been replaced with the more efficient, type safe and useful class Coin. Coin is mostly source compatible with BigInteger so you can probably just do a search and replace to update your codebase. Utils.bitcoinValueToFriendlyString and friends moved to CoinFormat.\nNetworkParameters.getProofOfWorkLimit was renamed to getMaxTarget for consistency with other Bitcoin codebases.\nThe library no longer uses the misleading term \u201cnanocoins\u201d to mean satoshis (the old term predated the use of the word satoshi to describe the smallest possible amount of bitcoin).\nTransactionConfidence no longer tracks total work done.\nBecause outputs are now shuffled any code during that assumes the ordering is preserved will break. You can set the shuffleOutputs field of SendRequest to false to disable this behaviour if you need to.\nThe ECKey and HD API\u2019s have changed quite a bit: several constructors were replaced with clearer static factory methods that make it more obvious how their parameters are interpreted. The new methods don\u2019t change their behaviour depending on the pattern of nulls passed into them.\nSome unit testing utilities have been moved to the new testing subpackage and cleaned up/rearranged. It should be easier to write unit tests for your app that need a simulated network now. DeterministicKey now derives from ECKey.\nWe now use Utils.HEX.encode() and Utils.HEX.decode() to do translation to and from base 16.\nTransaction.hashTransactionForSignature was renamed to just hashForSignature.\nThe subVer string sent by bitcoinj now has a lower cased first component.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/5cc45a5a/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 3927 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/5cc45a5a/attachment.p7s>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-10-03T13:02:24",
                "message_text_only": "On 10/03/2014 02:49 PM, Mike Hearn wrote:\n> I\u2019m pleased to announce version 0.12 of bitcoinj\n> \n> This release represents 8 months of work. The biggest new feature is HD wallets.\n\nCongratulations on this release and I am quite happy that bitcoinj now\nfully supports BIP32 and BIP39!\n\nDoes it also support various HD wallet structures such as BIP44 for example?\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-03T13:25:56",
                "message_text_only": "On Fri, Oct 3, 2014 at 2:49 PM, Mike Hearn <mike at plan99.net> wrote:\n> I\u2019m pleased to announce version 0.12 of bitcoinj, one of the worlds most\n> popular Bitcoin libraries. It is used by at least four Android wallets,\n> three desktop wallets, blockchain.info, Circle, biteasy, CryptoCorp,\n> Lighthouse, BlueMatt\u2019s relay network, bitpos, countless alt coin wallets,\n> for academic research projects and much more.\n\nCongrats on the release!\n\nWladimir"
            },
            {
                "author": "Tom Harding",
                "date": "2014-10-03T23:29:07",
                "message_text_only": "I'm stunned by what bitcoinj can do these days.  Just reading the \nrelease notes gives one app ideas.  Mike, Awesome.\n\n\nOn 10/3/2014 5:49 AM, Mike Hearn wrote:\n> I'm pleased to announce version 0.12 of bitcoinj, one of the worlds \n> most popular Bitcoin libraries.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141003/8bec625f/attachment.html>"
            },
            {
                "author": "Kristov Atlas",
                "date": "2014-10-04T06:44:30",
                "message_text_only": "Congrats, and thanks for your hard work.\n\nI hate to reply to a release that includes a huge number of new features\nwith yet another feature request, so -- with apologies -- any plans for\nbitcoinj to support stealth address sending and/or receiving?\n\nhttps://wiki.unsystem.net/en/index.php/DarkWallet/Stealth\n\nSincerely,\nKristov Atlas\nOn Oct 3, 2014 8:50 AM, \"Mike Hearn\" <mike at plan99.net> wrote:\n\n> I\u2019m pleased to announce version 0.12 of bitcoinj, one of the worlds most\n> popular Bitcoin libraries. It is used by at least four Android wallets,\n> three desktop wallets, blockchain.info, Circle, biteasy, CryptoCorp,\n> Lighthouse, BlueMatt\u2019s relay network, bitpos, countless alt coin wallets,\n> for academic research projects and much more.\n>\n> This release represents 8 months of work. The biggest new feature is HD\n> wallets. Other notable enhancements include a bundled Tor client that can\n> be activated with one line of code, support for multisig wallets, much\n> faster and deterministic ECDSA, many API improvements and big upgrades to\n> the included GUI wallet which can be seen in a new screencasted tutorial\n> <https://bitcoinj.github.io/simple-gui-wallet>.\n>\n> The commit hash of bitcoinj 0.12\n> is 83a9a71f3fff3f223d0737ad758b519a39dbbd62.\n>\n> New in this release\n>\n>    - Privacy enhancements:\n>       - Wallets are now hierarchical and deterministic (HD) by default,\n>       using the BIP32 specification. Support for mnemonic codes (BIP 39) is also\n>       included. Change and receive addresses are no longer being reused. Old\n>       wallets are upgraded in place using the private key of the oldest\n>       non-rotating key as the seed bytes, so old backups remain valid.\n>       - Thanks to devrandom, we have an integrated Tor mode using the\n>       Orchid library. The user does not have to install the Tor client as it\u2019s\n>       all pure Java. WalletAppKit users can enable usage of Tor with a single\n>       line of code. This support should be considered experimental for now.\n>    - Thanks to Kosta Korenkov, we have an experimental multisig wallets\n>    implementation. Multisig (also \u201cmarried\u201d) wallets are HD wallets that are\n>    connected to a third party risk analysis service or device. When married,\n>    the wallet tracks multiple BIP32 key trees, keeps them in sync and starts\n>    vending P2SH addresses.\n>       - As part of this work, transaction signing is now pluggable.\n>       TransactionSigner implementations can be added to the wallet and will be\n>       serialized into and out of the users saved wallet file. Signers are given a\n>       transaction to sign in sequence. This is intended for risk analysis\n>       providers to provide a class that talks to their server to get a signature\n>       of the right form, so that all bitcoinj based wallets can be easily\n>       upgraded to support the new provider.\n>    - Reject messages are now deserialized and logged, though not yet\n>    exposed in the API.\n>    - Upgraded to Guava 16 and Bouncy Castle 1.51. Thanks to Peter Dettman\n>    and the rest of the Bouncy Castle team, bitcoinj now uses deterministic\n>    ECDSA for signing and we\u2019re now using an accelerated secp256k1\n>    implementation that exploits the special properties of this curve, for\n>    dramatically faster calculations.\n>    - Payment protocol code improvements: Some X.509 utility code was\n>    refactored out of PaymentSession for general usage. StartCom was added to\n>    the default trust store which was promoted to override the system trust\n>    store on non-Android platforms. A command line tool to dump requests to\n>    stdout was added.\n>    - Thanks to Andreas Schildbach:\n>       - We are now BIP62 (canonical push encodings) compliant.\n>       - A new Coin class replaces usage of BigInteger for marking values\n>       that are quantities of bitcoin. Formatting has moved into the new\n>       MonetaryFormat class.\n>       - The wallet now saves the fee paid on transactions we calculated\n>       ourselves. This is useful for putting it into a wallet user interface.\n>       - Transactions can have user memos and exchange rates attached,\n>       that will be saved by the wallet.\n>       - Support for decrypting BIP 38 protected private keys has been\n>       added.\n>       - Checkpoints can now be stored textually as well as in the old\n>       binary format.\n>    - There is also a new BtcFormat API that provides an alternative to\n>    MonetaryFormat that plugs in to the java.text framework.\n>    - Added new DNS seed from Addy Yeow.\n>    - Wallets can now have string->byte[] mappings attached to them, for\n>    lighter weight extensions.\n>    - Thanks to Richard Green, there is now a Python version of the\n>    ForwardingService program from the getting started tutorial. This shows how\n>    to use bitcoinj from Python using the Jython interpreter.\n>    - bitcoinj now probes localhost for a Bitcoin node and automatically\n>    uses that instead of the P2P network, when present. This means any bitcoinj\n>    based app can be easily upgraded from SPV to full security just by running\n>    Core at the same time: no setup needed.\n>    - Thanks to Michael Bumann, there are now more example apps showing\n>    how to use parts of the API.\n>    - WalletTemplate/WalletAppKit improvements. WalletTemplate is a demo\n>    app that shows how to create a cross-platform GUI wallet with a modern\n>    style and 60fps animations. WalletAppKit is a very high level API for\n>    creating apps that have a Bitcoin wallet:\n>       - Now supports mnemonic code and restore from seed words. A date\n>       picker is provided to cut down on the amount of chain that needs to be\n>       rescanned.\n>       - Support for encrypting wallets. Password is requested when\n>       needed. The difficulty of the scrypt function is selected to always take a\n>       fixed number of seconds even if hardware gets more powerful.\n>       - Some new animation and utility code backported from Lighthouse.\n>       - Tor support\n>    - Thanks to Martin Zachrison, the micropayment channels implementation\n>    has received various improvements.\n>    - Thanks to Eric Tierney (Circle), the Postgres store can now take a\n>    custom schema.\n>    - The Bloom filtering API has been extended so FilteredBlock objects\n>    can now be produced from Block objects given a BloomFilter. Previously\n>    there was support for client-side Bloom usage but no implementation of the\n>    generation part.\n>    - Many other bugfixes, cleanups, minor tweaks and small new APIs.\n>\n> *Documentation and tutorials*\n>\n>    - A JavaScript tutorial <https://bitcoinj.github.io/getting-started-js> has\n>    been added, showing how to use bitcoinj from this language. More tutorials\n>    in other languages will come in future.\n>    - The \u201cWorking with the wallet\n>    <https://bitcoinj.github.io/working-with-the-wallet>\u201d document has\n>    been significantly extended to cover encryption, watching wallets, HD\n>    wallets and multisig/married wallets.\n>    - A new document and accompanying screencast\n>    <https://bitcoinj.github.io/simple-gui-wallet> shows how to extend the\n>    WalletTemplate app to have a transactions list, and then make a\n>    native/bundled packages that don\u2019t need the user to install Java. By\n>    following this tutorial you will learn how to make a basic cross platform\n>    desktop wallet of your own.\n>    - All other docs were refreshed to the latest APIs.\n>\n> *API changes*\n>\n>    - The package name has changed to org.bitcoinj and the core Maven\n>    artifact name is now \u201cbitcoinj-core\u201d. You can auto-port most of your code\n>    by running find . -name '*.java' \\| xargs sed -i .bak\n>    's/com.google.bitcoin./import org.bitcoinj./g\n>    - Wallet.completeTx now throws more precise unchecked exceptions in\n>    edge cases, instead of IllegalArgumentException.\n>    - The use of BigInteger to represent quantities of Bitcoin has been\n>    replaced with the more efficient, type safe and useful class Coin. Coin is\n>    mostly source compatible with BigInteger so you can probably just do a\n>    search and replace to update your codebase.\n>    Utils.bitcoinValueToFriendlyString and friends moved to CoinFormat.\n>    - NetworkParameters.getProofOfWorkLimit was renamed to getMaxTarget\n>    for consistency with other Bitcoin codebases.\n>    - The library no longer uses the misleading term \u201cnanocoins\u201d to mean\n>    satoshis (the old term predated the use of the word satoshi to describe the\n>    smallest possible amount of bitcoin).\n>    - TransactionConfidence no longer tracks total work done.\n>    - Because outputs are now shuffled any code during that assumes the\n>    ordering is preserved will break. You can set the shuffleOutputs field of\n>    SendRequest to false to disable this behaviour if you need to.\n>    - The ECKey and HD API\u2019s have changed quite a bit: several\n>    constructors were replaced with clearer static factory methods that make it\n>    more obvious how their parameters are interpreted. The new methods don\u2019t\n>    change their behaviour depending on the pattern of nulls passed into them.\n>    - Some unit testing utilities have been moved to the new testing\n>    subpackage and cleaned up/rearranged. It should be easier to write unit\n>    tests for your app that need a simulated network now. DeterministicKey now\n>    derives from ECKey.\n>    - We now use Utils.HEX.encode() and Utils.HEX.decode() to do\n>    translation to and from base 16.\n>    - Transaction.hashTransactionForSignature was renamed to just\n>    hashForSignature.\n>    - The subVer string sent by bitcoinj now has a lower cased first\n>    component.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141004/1f0ea69d/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-04T13:26:39",
                "message_text_only": "Hey Kristov,\n\n> I hate to reply to a release that includes a huge number of new features\n> with yet another feature request, so -- with apologies -- any plans for\n> bitcoinj to support stealth address sending and/or receiving?\n>\nStealth addresses and SPV don't mix well, so no. I wrote up a description\nof how to do something similar with the payment protocol here:\n\nhttps://medium.com/@octskyward/ecdh-in-the-payment-protocol-cb2f81962c1b\n\nBecause you can send data around outside the block chain on private\nchannels, with the pp the same issues don't crop up.\n\nAt the moment there are no concrete plans what goes into the next release.\nI will be focusing on fully launching Lighthouse and crowdfunding for\ndecentralisation/crypto related projects, so I won't be doing any major\nfeature work on bitcoinj. Luckily it's become quite an active project now\nand there are lots of contributors, so things won't stand still.\n\nIf I were to tackle a big project the next one would not be privacy\nrelated. It'd be refactoring the wallet so it doesn't store transactions\ndirectly anymore, just unspent outputs. Bitcoinj has always been largely\ndriven by the needs of Andreas' mobile app, and right now the top user\nreported problem there is people hitting the scalability limits of the\ncurrent design (e.g. they are mining directly into their phone's wallet).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141004/55bdfed8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoinj 0.12",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Mike Hearn",
                "Pavol Rusnak",
                "Kristov Atlas",
                "Tom Harding"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 21914
        }
    },
    {
        "title": "[Bitcoin-development] The Bitcoin Freeze on Transaction Attack (FRONT)",
        "thread_messages": [
            {
                "author": "Sergio Lerner",
                "date": "2014-10-05T23:00:29",
                "message_text_only": "I would like to share with you a vulnerability in the Bitcoin protocol\nI've been thinking of which might have impact on the future of Bitcoin.\nPlease criticize it!\n\n*The Freeze on Transaction Problem\n*\n\nThe freeze problem occurs if someone publishes a transaction with fees\nmuch higher than the block subsidy. I don't remember who described the\nattack first. Suppose that, by mistake, a transaction is published with\n50 BTC in fees. The transaction is included in a block at height n. If\neveryone acts rationally in his own interest, then the best choice for\nthe remaining miners is to try to mine a competing block at the same\nheight n including the high-fee transaction, to collect the fee for\nthemselves. All the miners having solved the block at height n, now move\non mining at height (n+1). But they won't choose each other branches\nuntil one branch is sufficiently longer so that it is better to switch\nto it and abandon their own branch rather than try to keep the block\nwith the high fee. This case is different from the real block\ncompetition case we see periodically on the blockchain, where the miners\nare generally split between two branches. Here there are multiple\nbranches competing. If there are 10 \"top\" miners each having 10% of the\nnetwork hashing power, then 10 different branches will compete. The\nanalysis for this case is similar to the Gambler's Ruin problem analysis\npresent in the Satoshi paper, but with a fixed constant monetary\nincentive not to switch. Since the incentive to switch grows\nexponentially with the branch length difference, any initial constant is\ndiluted. In the special and rare case that all the miners have exactly\nthe same hashing power, then the network diverges, and this is\nequivalent as having two miners having exactly 50% of the hashing power\neach. So in principle the freeze on transaction problem is just a\ntemporary disruption in the network, but not a fatal halt. Nevertheless,\nsince during the freeze period each miner is mining on his own branch,\nit also means that moving forward with blocks is a lot slower. Assuming\n10 miners having 10% of the total hashing power each (+/- 3%), the\nnetwork becomes 10 times slower. I simulated it with a 50 BTC tx freeze\nfee, and 10 miners, and it takes approximately 6 blocks to converge, so\nthe freeze time is approximately 60 times the block interval, or 10\nhours. If the distribution is approximately 25% of the hashing power for\neach top miner, the freeze time is 4 hours.\n\nObviously what's needed for the freeze problem to occur is that miners\nare 100% rational, greedy and prepared. They need to have a modified\nversion of bitcoind which can automatically detect a high-fee\ntransaction and prevent adding to the best chain a not-owned block\ncontaining such transaction. There will be no time for the miners to\npatch bitcoind if such transaction is manually spotted. Also the latest\nversions of bitcoind have preventions not to allow high fees by mistake.\nSo the freeze problem is currently non-existent, but may pop up in the\nfuture in form of a state-sponsored attack.\n\n*The Freeze problem as an Attack*\n\nIf an attacker plans to repeat such attack periodically at the expense\nof wasting a lot of BTC, there is little the current protocol can do,\nbecause miners will be prepared to take advantage of the attack. If the\nattacker issues a new fee burning transaction before the network\nconverges, then the attacker can maintain incentives to keep every miner\nseparated in his own branch. So wasting 50 BTC every 4 hours, an\nattacker can maintain the network frozen forever.  Even if we restrict\nthe maximum fee per transaction, the scripting system has infinite ways\nto create transactions whose output can be taken by anyone, and the\nattacker can announce the method miners can use to collect those BTC and\neven prepare and publish the bitcoind patches to automate collecting\nthose transaction outputs.\n\nThe best thing the community can do is act together and cooperate to\nshare the high transaction fee. This will neutralize the attack\ncompletely and allow miners to earn extra bitcoins. But cooperation in\nthe Bitcoin community has never been easy. There is a technical solution\nwhich is to modify the Bitcoin protocol so that every transaction output\nhas a maturity time of 6 blocks, and if a transaction output is redeemed\nmultiple times in a 6 block interval, then the BTC amount is split\nbetween all redeemers, and also fees would be automatically shared in a\n6 block sliding window. At a first glance, this provides a way for\nminers to cooperate even anonymously and there is no immediate drawback,\nbut an in depth analysis is necessary.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141005/e58c0714/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-05T23:40:43",
                "message_text_only": "On Sun, Oct 5, 2014 at 4:00 PM, Sergio Lerner <sergiolerner at certimix.com> wrote:\n> I would like to share with you a vulnerability in the Bitcoin protocol I've\n> been thinking of which might have impact on the future of Bitcoin. Please\n> criticize it!\n> The Freeze on Transaction Problem\n\nI should point you to some of the tools that have been discussed in\nthe past which are potentially helpful here:\n\nThe first is the use of locktime on normal transactions.  This\nbehavior is already in Bitcoin core git:   The idea is that users of\nthe system should locktime their transaction at a point as high as\nthey expect it to get included.  If used well this means that there\nshould always be a base of fees which can only be collected by future\nblocks, creating an incentive to move forward.  This may be\nparticularly effective if the limitations on blocksize mean that there\nis always a healthy standing load.\n\nThe second is having block commitments in transactions\n(https://en.bitcoin.it/wiki/User:Gmaxwell/alt_ideas). The idea is that\nthe data under signature in a transaction could commit to some recent\nblock which _must_ be in the chain or the transaction's fee cannot be\ncollected (or, at least, not all of the fee).  This would allow\ntransacting users to 'vote with their fees' on the honest chain.\nArguably this could also be used to pay for doublespending forks, but\nyou can already do that by paying fees via a chain that stems from the\ndoublespend.  This greatly complicates strategy for forking miners,\nsince future transactions which you haven't even seen yet may have\nfees conditional on the honest chain.\n\nI think both of the above are obviously useful, should be done, but\ndon't completely address the concern, they may be adequate.\n\nThe third is fee forwarding.  An example form would be that the miner\ngets half the fees, the rest are added to a pool which pays out half\nin every successive block.  This can prevent unusually high fees from\nmaking as much reorg pressure and more correctly models what people\nwould like to pay for: getting their txn buried.   The huge problem\nwith this class is that miners can demand users pay fees \"out of\nband\", e.g. with additional txouts (just make a different version of\nthe tx for each miner you wish to pay) and escape the process.  I have\nhad some notions about fees that come in the form of adjusting the\ndifficulty of creating a block slightly (which is something that can't\nbe paid out of band), but such schemes becomes very complicated very\nfast.  I am unsure if any form of fee forwarding is workable.\n\nSomething you might want to try to formalize in your analysis is the\nproportion of the network which is \"rational\" vs\n\"honest\"/\"altruistic\".  Intuitively, if there is a significant amount\nof honest hashrate which is refusing to aid the greedy behavior even\nat a potential loss to themselves this strategy becomes a loser even\nfor the purely greedy participants. It would be interesting to\ncharacterize the income tradeoffs for different amounts of altruism,\nor whatever convergence problems an attempt by altruistic\nparticipaints to punish the forkers might create."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-05T23:50:56",
                "message_text_only": "On Sun, Oct 5, 2014 at 4:40 PM, Gregory Maxwell <gmaxwell at gmail.com>\n> I should point you to some of the tools that have been discussed in\n> the past which are potentially helpful here:\n\nAh, I should also mention a somewhat more far out approach which helps\nhere as a side effect:\n\nIf transactions were using the BLS short signature scheme (a very\ncompact EC signature based on pairing cryptography) there is a scheme\nso that you securely can aggregate the signatures from multiple\nmessages into a single signature (also has nice bandwidth properties)\nand still verify it. It also works recursively, so aggregates can be\nfurther aggregated.\n\nA consequence of this is that you cannot remove a (set of)\nsignature(s) from the aggregate without knowing the (set of)\nsignature(s) by itself.\n\nIf the coinbase transaction also contains a signature and if some\nnon-trivial portion of fee paying users relayed their transaction\nprivately to miners it,  then other miners would only learn of the\ntransaction in aggregated form.  Without knowing the transaction by\nitself they could not pull it out of a block separately from the\ncoinbase payment and add it to their own block in a fork.\n\n(In general this provides several anti-censorship properties, since if\nsomeone passed you an aggregate of several transactions you could only\naccept or reject them as a group unless you knew the members\nseparately).\n\nThe use in aggregation can be done in a way which is purely additive\n(e.g. in addition to regular DSA signatures), so even if the\ncryptosystem is broken the only harm would be allowing\ndisaggregation... but unfortunately the pairing crypto is pretty slow\n(verification takes a 0.5ms-ish pairing operation per transaction)."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-10-05T23:54:38",
                "message_text_only": "On Mon, Oct 6, 2014 at 1:40 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> Something you might want to try to formalize in your analysis is the\n> proportion of the network which is \"rational\" vs\n> \"honest\"/\"altruistic\".  Intuitively, if there is a significant amount\n> of honest hashrate which is refusing to aid the greedy behavior even\n> at a potential loss to themselves this strategy becomes a loser even\n> for the purely greedy participants. It would be interesting to\n> characterize the income tradeoffs for different amounts of altruism,\n> or whatever convergence problems an attempt by altruistic\n> participaints to punish the forkers might create.\n\nNot only that, greedy miners may actually have an incentive to just\nfollow the longest chain. Say I'm a small miner and I know that the\nchances of re-mining the high tx and getting that block into the\nlongest chain are minimal or null. Then I will probably prefer to just\nmine on top of the longest chain.\nSo \"If everyone acts rationally in his own interest, then the best\nchoice for the remaining miners is to try to mine a competing block at\nthe same height n including the high-fee transaction, to collect the\nfee for themselves\" is not necessarily true.\np * 50 can be lower than q * 25 if p < 2*q. P and q depend on what\neveryone is doing, not just you.\n\nIn any case, it is interesting to think about this things since mining\nsubsidies will eventually disappear and then transaction fees will\nALWAYS be higher than subsidies."
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-10-06T06:42:40",
                "message_text_only": "I've heard about this idea from TierNolan. Here's some quick an dirty\nanalysis:\n\nSuppose the last known block claimed a large tx fee of L. A miner who owns\n1/N of the total hashrate needs to choose between two strategies:\n\n1. Mine on top of that block and win usual reward R with probability 1/N.\n2. Mine on top of the previous block, trying to make two blocks in a row,\nmight get reward L with probability 1/N^2.\n\nThus for the first strategy expected payoff is R/N, and for the second the\nexpected pay-off is L/N^2.\n\nSecond strategy is viable if R/N < L/N^2,\n R < L/N.\n\nNow suppose the miner who claimed the unusually large reward will share it\nwith the next miner, for example, using coinbase output with OP_TRUE. If\nthat shared reward Rs is higher than L/N^2, then the next miner will be\nbetter off mining on top of that block.\n\nThis doesn't require protocol changes(*) and can be simply incorporated\ninto a piece of code which decides what to do when a transaction with\nunusually large fee appears. (I.e. it will automatically share the fee, and\nothers will recognize that). And if the biggest miner has 25% of all\nhashrate, sharing 25% of your loot doesn't sound that bad.\n\n(*) Except one problem: coinbase maturity rules won't allow one to share\nthe fee with the next miner.\nSo some protocol changes are required. But changes which affect coinbase\nmaturity and sharing are probably going to be simpler and smaller than what\nSergio have proposed.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141006/44b0b2bc/attachment.html>"
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-10-06T13:21:15",
                "message_text_only": "Comments between lines...\n\nOn 06/10/2014 03:42 a.m., Alex Mizrahi wrote:\n> .....\n>\n> This doesn't require protocol changes(*) and can be simply\n> incorporated into a piece of code which decides what to do when a\n> transaction with unusually large fee appears. (I.e. it will\n> automatically share the fee, and others will recognize that). And if\n> the biggest miner has 25% of all hashrate, sharing 25% of your loot\n> doesn't sound that bad.\nThe problem with this approach is that once the bitcoind has been\nmodified to allow this sharing of the high-tx fee by delegation, then\nthe same system can be used for an attack.\nLet's call a system that makes the Optimum Rational Best-chain Selection\nfor maximizing profit \"ORBS\", just to give it a name. The system assures\nthat the best chain chosen is always the optimum in terms of profit,\ntaking into account fee delegation and all the game-theoretic incentives\nderived. It's only a theoretical abstraction, but could be approximated\nin practice.\n\nThe attack is called Chained Kickback DOuble-spend attack (or \u201cCHAKIDO\u201d)\nand is an extension of Bonneau's kickback attack. Basically the attack\nis to create the ORBS patch, and start convincing miners to use it,\nsending some probe high-fees tx.\nOnce you have ORBS working in a majority of the mining nodes, you can\nperform a double-spend against a target like an exchange by:\n- Buy some btc X\n- Send those btc to an exchange (suppose the exchange requires 6\nconfirmations) in a transaction TX\n- Immediately convert those btc to an alt-coin, and collect the alt-coins\n- Create a high fee tx that is a double-spend of TX having a high fee Y\nsuch that Y < X but Y triggers a ORBS reorganization.\n- Profit\n(This rollback attack was performed against whitecoin, I think)\n\nThis attack gets terrible powerful if there is no subsidy. You may need\n500 blocks of confirmation to protect from a 10 BTC spend with current\nfees and no subsidy. This is because once 100% of the nodes use ORBS,\nthe fee delegation is linear (it doesn't grow exponentially with the\nnumber of blocks). So ORBS should never be implemented without\nadditional protective measures in merchant applications.\nIf we had a closed formula for ORBS, then all merchants could compute\nthe minimum confirmation blocks such that always Y > X, but such formula\ninvolves many unknowns which would need to be dynamically estimated, and\nalso it should take into account the number of simultaneous payment\nattempts.\n\nMy conclusions are:\n- We should never allow ORBS to be implemented unless merchants are also\naware of it. If are aware of ORBS then Bitcoin with no subsidy will be\nbecome a terrible slow payment system so ...\n- We could implement the protections that work even if some nodes\nimplement ORBS, such as fee and burn btc sharing, as I described before\n- Or we need some high percentage of miners to be irrational, to force\nORBS fee delegation have an exponential decay.\n\nBest regards,\nSergio."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-10-06T13:29:15",
                "message_text_only": "Sergio,\n\nyou can call this an ORBS attack or an attempt of ad-hoc coalition forming for a fork.\n\nPreparation Step:\nInclude a transaction sending a sizable amount between two of your own addresses in every block.\nMiner can do this at zero cost in their own blocks.\n\nExecution:\nEmbed into the preferred fork a transaction double spending the regular do-nothing transaction with one that offers a sufficiently high fee. This offers inceptive to rational miner to join the ad-hoc coalition for that fork.\n\nAttempting to form an ad-hoc coalition using above steps is open to anyone, just cheaper and easier to execute for a miner. \n\nFortunately cost for (cumulative) proof-of-work creates a lower bound to the incentive that need to be offered. So your worry\nof times where block subsidy is low is unwarranted as cost of POW will be high.\n\nI do not think \u201cdisallowing\u201d the implementation of rational mining is a viable option, since no one needs permission to implement whatever optimization he thinks is profitable and within the rules.\n\nTamas Blummer\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141006/c0751957/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-06T00:01:46",
                "message_text_only": "On Sun, Oct 5, 2014 at 4:54 PM, Jorge Tim\u00f3n <jtimon at blockstream.io> wrote:\n> In any case, it is interesting to think about this things since mining\n> subsidies will eventually disappear and then transaction fees will\n> ALWAYS be higher than subsidies.\n\nYou can imagine that instead of subsidy Bitcoin came with a initial\nset of nlocktimed transactions that pay fees, one block at a time, for\neach block from the start until the subsidy goes away.\n\nPerhaps that mental model might make it clear why some people think\nthat the nlocked transactions and the block size being lower than the\ninstant offered demand (there is always a backlog) are both things\nwhich address the concern of this thread. :)"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-06T11:02:13",
                "message_text_only": ">\n> the block size being lower than the instant offered demand (there is\n> always a backlog) are both things which address the concern of this thread.\n> :)\n\n\nI'm skeptical such a situation can ever be stable. People have no incentive\nto create a transaction that will remain stuck in the backlog forever,\nregardless of the effect it may have on the rest of the system.\n\nIf someone invents a business model in which lots of payments are made,\nwith fees, but that only clear probabilistically, perhaps such a situation\ncould occur. But otherwise I think we have to assume that people won't make\ntransactions that will lose the competition game, and instant demand would\nonly ever be roughly equal to supply.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141006/960af166/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-10-06T12:22:51",
                "message_text_only": "Note that the problem might arise also by a bug / accident and not as an attack.\n\nSince value spent is not part of the signature it is easy to create an arbitrary fee by a defective wallet software.\nCollecting that huge fee might provide a higher incentive to miner than the block subsidy on the trunk.\n\nAssuming miner are fully rational, they might even form a temporary coalition to claim the fee:\nThe miner who mines forking block might offer part of the fee gained in a similar transaction to\nother miners, so they help to extend his fork. A sufficiently high stake could trigger a long\nfork \u201cbattle\u201d of ad-hoc coalitions.\n\nAddressing the known bug of the signature hash, that it does not include the value spent,\nwould have other positive effects, e.g. for resource limited hardware wallets.\n\nInterpretation of an OP_NOP for a value hashing signature check were suggested by Alan Reiner\ndiscussed earlier on bitcointalk.\n\nTamas Blummer"
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-10-07T19:04:40",
                "message_text_only": "On 06/10/2014 08:43 p.m., Tom Harding wrote:\n> On 10/5/2014 4:00 PM, Sergio Lerner wrote:\n>> If everyone acts rationally in his own interest, then the best choice\n>> for the remaining miners is to try to mine a competing block at the\n>> same height n including the high-fee transaction, to collect the fee\n>> for themselves.\n>\n> Sergio --\n>\n> Just some thoughts on your interesting problem.\n>\n>\n> Since everybody but M10 is on equal footing, I would expect M10 to\n> have some fixed advantage depending on assumptions, and the bigger the\n> advantage, the shorter the \"freeze time\".\n>\n\nYes, that's how simulation works. The problem is that the existence of\nhigh-fee delays the decision to switch to M10. Since the network is\nmoving slower (because of fragmentation) the effect of the high-fee is\ntwofold: it delays the convergence because it promotes selfishness and\nit delays convergence because it promotes fragmentation.\n\nDuring that time window where the network is frozen, any other high-fee\ntransaction only makes things worse.  This is a very rare example where\na well distributed network (100 miners having 1% each) is much much\nworse than 3 miners having 33% each.\n\nUsing the my previous terminology, automatic fee-sharing (\"ORBS\") is a\nsolution to the freeze problem (\"FRONT\") but opens the windows to\n\"CHAKIDO\" double-spending. and CHAKIDO double-spending is a much worse\nproblem than FRONT.\nBut as Tamas pointed out, sooner or later someone will implement\nsomething like ORBS, get over the critical mass of miner adoption, and\nthen the CHAKIDO problem will be inevitable.\n\nThe only clean solution to this problem is the DECOR+ protocol, which\nshares block-rewards by including \"uncles\" (as GHOST does) and splitting\nthe reward between all miners at the same height until coinbase maturity\nis over. This way the best choice is always cooperative.\n\nPS: Using so many acronyms makes arguments much more concise, but\nsuggest we should have all the attack terminology described in a single\n\"Bitcoin Security Wiki\"..."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-07T19:16:13",
                "message_text_only": "On Tue, Oct 7, 2014 at 7:04 PM, Sergio Lerner <sergiolerner at certimix.com> wrote:\n> Using the my previous terminology, automatic fee-sharing (\"ORBS\") is a\n> solution to the freeze problem (\"FRONT\") but opens the windows to\n> \"CHAKIDO\" double-spending. and CHAKIDO double-spending is a much worse\n> problem than FRONT.\n\nI'm not following this. Perhaps I'm getting lost in terminology here.\n\nIt's already to provide double spending bounties to greedy-rational\nminers, via a simple approach that has been known since at least early\nin 2011.    I pay someone then create a later fraudulent doublespend\nwhich is nlocked at the height the original payment occurred, paying\nlarge fees. Then I spend the output of the fraudulent spend nlocked\none block higher, and spend the output of that one again, nlocked one\nblock higher, and so on... each step paying fees.\n\nA hypothetical purely greedy miner which considers all sequences of\nacceptable forks and transactions would see that they have higher\nexpected returns assisting the theft (assuming the honest party\ndoesn't fight back by also adopting a similar strategy), at least if\nthe population of greedy miners is large relative to altruistic ones.\n\nI don't see how miners being able to roll forward fees makes anything\nworse, since the transactions themselves can also roll forward fees."
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-10-07T20:04:33",
                "message_text_only": "On 07/10/2014 04:16 p.m., Gregory Maxwell wrote:\n> Then I spend the output of the fraudulent spend nlocked\n> one block higher, and spend the output of that one again, nlocked one\n> block higher, and so on... each step paying fees.\nYes, you're right. I didn't consider that case. But the problem is that\nthis is not automatic. Currently there is a clear division between\nminers how will not take the kickback (irrrational) and miners who will\n(rational).\nIf somebody modifies the bitcoind to make this choice automatic, then\nDECOR+ is the only solution I know about to avoid people doing anonymous\ndouble-spends (with chained kickbacks, as you mention).\nThe  \"locktime on normal transactions\" you proposed does not solve the\nproblem, just diminishes it in a constant value (which currently is very\nlow)"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-08T10:19:10",
                "message_text_only": ">\n> Yes, you're right. I didn't consider that case. But the problem is that\n> this is not automatic. Currently there is a clear division between\n> miners how will not take the kickback (irrrational) and miners who will\n> (rational).\n\n\nThis seems to come up a lot. Your definition of rational is a short term\nrationality only. I can pass up a short term profit in return for more\nstable longer term profits and be completely rational, by a reasonable\ndefinition of the word.\n\nI think it's clear by now that if most or even some miners decide to\nprioritise short term profit over the long term health of the system (i.e.\nlonger term profit), Bitcoin basically doesn't work right. This attack is\nonly one of several such things that can happen. This certainly can be a\nproblem when difficulty is skyrocketing because a mining investment is I\nguess quite short term anyway, but presumably at some point the mining arms\nrace will end and miners will become more settled in.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/62bcc790/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "The Bitcoin Freeze on Transaction Attack (FRONT)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tamas Blummer",
                "Mike Hearn",
                "Sergio Lerner",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Alex Mizrahi"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 24939
        }
    },
    {
        "title": "[Bitcoin-development] Partial wallet rescan",
        "thread_messages": [
            {
                "author": "J\u00e9r\u00e9mie Dubois-Lacoste",
                "date": "2014-10-07T17:32:10",
                "message_text_only": "Hi all,\n\nBefore starting to implement a patch for a specific need, I would like\nto be sure that it was not written already and available somewhere.\nThis list is probably my best chance.\n\nI would like to add an optional parameter <block_heigh> to \"-rescan\",\nfrom which the rescan would then start. When performing the wallet\nrescan, everything before the block number <block_heigh> would be\nignored.\nThus, it would do pretty much the same thing as the wallet birthday\nmechanism (which relies on nTimeFirstKey), the difference being that\nthe point in time where to start would be *explicitly* given by the\nuser, at launch time, on the command line. Another possiblity is to\nprovide as parameter a time stamp instead of a block height; the\ninteresting part for me is that anyway that information is explicitly\nprovided by the user.\n\nRegards,\n\nJeremie\n\n--\nJeremie Dubois-Lacoste, PhD.\nBelgian Bitcoin Association, Director.\nUniversit\u00e9 Libre de Bruxelles, Post-Doctoral Researcher."
            }
        ],
        "thread_summary": {
            "title": "Partial wallet rescan",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "J\u00e9r\u00e9mie Dubois-Lacoste"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 976
        }
    },
    {
        "title": "[Bitcoin-development] snailmail bitcoin client",
        "thread_messages": [
            {
                "author": "Naveen Garg",
                "date": "2014-10-08T07:32:30",
                "message_text_only": "Here is a business idea:\ncustomers send you a bitcoin transaction printed on paper.\nYou scan the transaction and broadcast it to the network.\nYour fee could be the greater of some minimum or like 0.01% of the\ntransaction value.\nThe fee could be sent as just another paper transaction, it could even just\nbe cash.\n\nYou could expand into a snailmail based email or publishing platform.\nCustomers send you a letter.\nYou make the letter available in one or more of the following forms:\n1. as a single webpage\n2. sent via email to a specified address\n3. in a data dump along with all open letters received that day / week /\nmonth / year / or decade.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141008/f0388318/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "snailmail bitcoin client",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Naveen Garg"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 827
        }
    },
    {
        "title": "[Bitcoin-development] Something people are forgetting about the Gentoo / Luke-jr censorship issue",
        "thread_messages": [
            {
                "author": "xor",
                "date": "2014-10-10T16:22:18",
                "message_text_only": "Hey folks,\n\nFYI the issue is that Luke-Jr wants to include code which can censor stuff like \nSatoshiDice transactions because he thinks they are denial of service:\nhttps://bugs.gentoo.org/show_bug.cgi?id=524512\n\nWhile everyone is jumping on the neutrality Bitcoin should have, you're \nforgetting that there are also *legal* implications:\nThe *technical ability'* to filter certain types of network traffic can cause you \nto be legally liable to *USE* it to filter illegal stuff. \nSo even if the filter code is disabled by default, it can put Bitcoin users in \nlegal danger: Law enforcement can try to force them to use it.\n\nThis for sure depends on the country you are living in, but in general I think \nit can be agreed that it will be a lot easier to defend a \"my node relays \neverything uncensored\" policy against law enforcement if you wouldn't even \nhave the technical ability to filter stuff because the code just cannot do it \nanyway. \n\nSo please do not even include this code as disabled, and if possible do not \neven write or publish it :)\n\nAlso, as I don't have a Gentoo bugtracker account, can someone please add this \ncomment there?\n\nThanks & Gretings,\n\txor - a developer of https://freenetproject.org/\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141010/0b92ca2f/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-10-10T16:42:39",
                "message_text_only": "The whole issue is a troll, and I'm afraid you got sucked in.\n\nThere are no plans to add a blacklist to Bitcoin Core.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-10T17:26:49",
                "message_text_only": "I'm sure this suggestion will go down like a lead balloon, but Bitcoin Core\nis not the first project that's had issues with Linux distros silently\nmodifying their software as they package it. In this case Luke has changed\nthings to be closer to what users expect, which is good to see, but I\nexpect to see the same issue crop up with other Linux distributions in\nfuture. The temptation to \"improve\" things when you're a middleman is just\ntoo great.\n\nThe usual approach to fixing it is trademark the project name and use that\nto enforce \"clean\" packaging. Firefox and Chrome both take this approach.\nI'll probably do the same with Lighthouse (need to figure out the\ntrademarking process first).\n\nThe goal here is not to remove choice, rather to ensure people know what\nthey're getting. It's reasonable to assume if you do \"emerge bitcoin\" then\nyou're getting Bitcoin Core as distributed by bitcoin.org, not a highly\nopinionated fork of it. Renaming a project and creating a package under the\nnew name is not only better for end users, but lets the fork grow into\nsomething else and be more usable to people on other distros too.\n\nIn this case \"Bitcoin\" is already a trademark, though I lost track of who\nowns it at the moment (the foundation?) but I guess Bitcoin Core is not.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141010/2cee3656/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-10-10T18:41:19",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 10/10/2014 05:26 PM, Mike Hearn wrote:\n> I'm sure this suggestion will go down like a lead balloon, but\n> Bitcoin Core is not the first project that's had issues with Linux\n> distros silently modifying their software as they package it. In\n> this case Luke has changed things to be closer to what users\n> expect, which is good to see, but I expect to see the same issue\n> crop up with other Linux distributions in future. The temptation to\n> \"improve\" things when you're a middleman is just too great.\n> \n> The usual approach to fixing it is trademark the project name and\n> use that to enforce \"clean\" packaging. Firefox and Chrome both take\n> this approach. I'll probably do the same with Lighthouse (need to\n> figure out the trademarking process first).\n> \n> The goal here is not to remove choice, rather to ensure people know\n> what they're getting. It's reasonable to assume if you do \"emerge\n> bitcoin\" then you're getting Bitcoin Core as distributed by\n> bitcoin.org, not a highly opinionated fork of it. Renaming a\n> project and creating a package under the new name is not only\n> better for end users, but lets the fork grow into something else\n> and be more usable to people on other distros too.\n> \n> In this case \"Bitcoin\" is already a trademark, though I lost track\n> of who owns it at the moment (the foundation?) but I guess Bitcoin\n> Core is not.\n\nRegardless of whether this is a good idea or not in general, it won't\nwork in the case of Gentoo (and similar source-based distributions)\nbecause Gentoo doesn't distribute software - they distribute\ninstructions which allow end users to download, compile, and install\nsoftware (ebuilds).\n\nOn my system I can compile a modified Firefox that still calls itself\n\"Firefox\" by setting USE=\"-bindist\". This would put Gentoo in\nviolation of Mozilla's trademarks if they were distributing that\nmodified version, but they aren't, so they're not. They just\ndistribute the instructions that tells my copy of Portage how to\ncompile the modified version. As long as I don't distribute the\nmodified binaries I compiled, then neither am I violating Mozilla's\ntrademarks.\n\ntl;dr: The trademarking approach is only effective with regards to\nbinary distributions, not source-based distributions.\n\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJUOChPAAoJEMP3uyY4RQ21DNoH/0Yb3GpF230UGfQQ7Y2qQ4Sr\nQTNW6hwMaLSwRvdnkAxmQf1S2I3da6AJkXcyyUavJuqw+m6lxdiA3OwUQOZblEUS\nHkZqajS3gpCCmYJGbHD+DT3YnvDaeIQmuacsxMTXpVWK5QleH6mSdpbomc2TCS+D\nJulZuSQJSB997uNKqYvQmwe0b3ImgND6omoOZABjFrLESeYgQWLFBthl9vwBLtFB\nDqRbyvrl6+vFzX9yObAt0+iSDkoHHkPbg2/KeUCKuJaIqvFyBo0t9dvx/tvQJupk\nTY39a/0MW8z524e2s2SwsZbmYXSBLTlDhkTbWR0lPQH5OOcrmH7cpEG1vsZH9yY=\n=tfaE\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141010/58be4aa9/attachment.bin>"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-10T19:02:38",
                "message_text_only": "On Friday 10. October 2014 19.26.49 Mike Hearn wrote:\n> I'm sure this suggestion will go down like a lead balloon, but Bitcoin Core\n> is not the first project that's had issues with Linux distros silently\n> modifying their software as they package it. \n\nAnd so far its been near impossible for those others to make distros not \nmodify it.\nFirefox is actually a good idea, it made debian stop distributing it.\n\nBest solution is to build good relations with the packagers of distros.\n\nps. Linux distros distributing GPL licensed apps are required by law to offer \nthe sources of the thing they build and distribute as binary. Which allows you \nto check the difference with upstream. Most distros therefore have a process in \nplace for this. Even for not FLOSS software like bitcoin core."
            }
        ],
        "thread_summary": {
            "title": "Something people are forgetting about the Gentoo / Luke-jr censorship issue",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "xor",
                "Thomas Zander",
                "Justus Ranvier"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 7133
        }
    },
    {
        "title": "[Bitcoin-development] Distributed anonymous bitcoin client using your friendly government postal service",
        "thread_messages": [
            {
                "author": "Naveen Garg",
                "date": "2014-10-11T19:49:11",
                "message_text_only": "Make a transaction with two outputs.  Output A is your payee.  Output B is a fee to whoever transmits the transaction to the network.  Sign and print the transaction, along with private key controlling address of output B.  Put it in the mail with instructions to 1 or more greedy people who don't know you.   \n\nDoes namecoin allow mixing outputs for name registration with pay to hash outputs ?  If so, you could use namecoin for anonymous publishing via post.  Or just make output A in bitcoin scripted with op_return if its a 40byte tweet."
            }
        ],
        "thread_summary": {
            "title": "Distributed anonymous bitcoin client using your friendly government postal service",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Naveen Garg"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 542
        }
    },
    {
        "title": "[Bitcoin-development] Request for review/testing: headers-first synchronization in Bitcoin Core",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2014-10-11T23:34:15",
                "message_text_only": "Hi all,\n\nI believe that a large change that I've been working on for Bitcoin\nCore is ready for review and testing: headers-first synchronization.\nIn short, it changes the way the best chain is discovered, downloaded\nand verified, with several advantages:\n* Parallel block downloading (much faster sync on typical network connections).\n* No more stalled downloads.\n* Much more robust against unresponsive or slow peers.\n* Removes a class of DoS attacks related to peers feeding you\nlow-difficulty valid large blocks on a side branch.\n* Reduces the need for checkpoints in the code.\n* No orphan blocks stored in memory anymore (reducing memory usage during sync).\n* A major step step towards an SPV mode using the reference codebase.\n\nHistorically, this mode of operation has been known for years (Greg\nMaxwell wrote up a description of a very similar method in\nhttps://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync\nin early 2012, but it was known before that), but it took a long time\nto refactor these code enough to support it.\n\nTechnically, it works by replacing the single-peer blocks download by\na single-peer headers download (which typically takes seconds/minutes)\nand verification, and simultaneously fetching blocks along the best\nknown headers chain from all peers that are known to have the relevant\nblocks. Downloading is constrained to a moving window to avoid\nunbounded unordering of blocks on disk (which would interfere with\npruning later).\n\nAt the protocol level, it increases the minimally supported version\nfor peers to 31800 (corresponding to bitcoin v3.18, released in\ndecember 2010), as earlier versions did not support the getheaders P2P\nmessage.\n\nSo, the code is available as a github pull request\n(https://github.com/bitcoin/bitcoin/pull/4468), or packaged on\nhttp://bitcoin.sipa.be/builds/headersfirst, where you can also find\nbinaries to test with.\n\nKnown issues:\n* At the very start of the sync, especially before all headers are\nprocessed, downloading is very slow due to a limited number of blocks\nthat are requested per peer simultaneously. The policies around this\nwill need some experimentation can certainly be improved.\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support. If you are fully\nsynced, it may still be possible to go back to an earlier version.\n\nUnknown issues:\n* Who knows, maybe it will replace your familiy pictures with Nyan\nCat? Use at your own risk.\n\nTL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or\nhttp://bitcoin.sipa.be/builds/headersfirst.\n\n-- \nPieter"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-10-12T05:51:41",
                "message_text_only": "This is great Pieter. I was able to sync the entire blockchain from\nscratch in a little over 4 hours on a laptop over cable modem. :) No\nissues to report. Even my family photos are intact! This makes it\npractical to run a full node, part time on a laptop again.\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Sat, Oct 11, 2014 at 4:34 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Hi all,\n>\n> I believe that a large change that I've been working on for Bitcoin\n> Core is ready for review and testing: headers-first synchronization.\n> In short, it changes the way the best chain is discovered, downloaded\n> and verified, with several advantages:\n> * Parallel block downloading (much faster sync on typical network connections).\n> * No more stalled downloads.\n> * Much more robust against unresponsive or slow peers.\n> * Removes a class of DoS attacks related to peers feeding you\n> low-difficulty valid large blocks on a side branch.\n> * Reduces the need for checkpoints in the code.\n> * No orphan blocks stored in memory anymore (reducing memory usage during sync).\n> * A major step step towards an SPV mode using the reference codebase.\n>\n> Historically, this mode of operation has been known for years (Greg\n> Maxwell wrote up a description of a very similar method in\n> https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync\n> in early 2012, but it was known before that), but it took a long time\n> to refactor these code enough to support it.\n>\n> Technically, it works by replacing the single-peer blocks download by\n> a single-peer headers download (which typically takes seconds/minutes)\n> and verification, and simultaneously fetching blocks along the best\n> known headers chain from all peers that are known to have the relevant\n> blocks. Downloading is constrained to a moving window to avoid\n> unbounded unordering of blocks on disk (which would interfere with\n> pruning later).\n>\n> At the protocol level, it increases the minimally supported version\n> for peers to 31800 (corresponding to bitcoin v3.18, released in\n> december 2010), as earlier versions did not support the getheaders P2P\n> message.\n>\n> So, the code is available as a github pull request\n> (https://github.com/bitcoin/bitcoin/pull/4468), or packaged on\n> http://bitcoin.sipa.be/builds/headersfirst, where you can also find\n> binaries to test with.\n>\n> Known issues:\n> * At the very start of the sync, especially before all headers are\n> processed, downloading is very slow due to a limited number of blocks\n> that are requested per peer simultaneously. The policies around this\n> will need some experimentation can certainly be improved.\n> * Blocks will be stored on disk out of order (in the order they are\n> received, really), which makes it incompatible with some tools or\n> other programs. Reindexing using earlier versions will also not work\n> anymore as a result of this.\n> * The block index database will now hold headers for which no block is\n> stored on disk, which earlier versions won't support. If you are fully\n> synced, it may still be possible to go back to an earlier version.\n>\n> Unknown issues:\n> * Who knows, maybe it will replace your familiy pictures with Nyan\n> Cat? Use at your own risk.\n>\n> TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or\n> http://bitcoin.sipa.be/builds/headersfirst.\n>\n> --\n> Pieter\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://p.sf.net/sfu/Zoho\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-12T07:14:32",
                "message_text_only": "On Sat, Oct 11, 2014 at 11:34 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> * Parallel block downloading (much faster sync on typical network connections).\n\n\"Much faster\" is an understatement. Benchmarking here shows one hour\nfive minutes syncing to 295000.   Old code isn't even at 250000 after\n7 hours.\n\n\n(I'm using 295k as the target here because after that point ecdsa\ndominates, and then your 6+x faster libsecp256k1 makes more of a\ndifference)"
            },
            {
                "author": "Geir Harald Hansen",
                "date": "2014-10-12T08:41:29",
                "message_text_only": "On 12.10.2014 01:34, Pieter Wuille wrote:\n> * No orphan blocks stored in memory anymore (reducing memory usage during sync).\n\nWill this slow down reorgs after a fork, compared to today?\n\nRegards,\nGeir H. Hansen, Bitminter"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-10-12T09:44:21",
                "message_text_only": "On Sunday, October 12, 2014 8:41:29 AM Geir Harald Hansen wrote:\n> On 12.10.2014 01:34, Pieter Wuille wrote:\n> > * No orphan blocks stored in memory anymore (reducing memory usage during\n> > sync).\n> \n> Will this slow down reorgs after a fork, compared to today?\n\nIt shouldn't... he's talking about actual orphan blocks (ones without a known \nprevious/parent block), not stale blocks.\n\nLuke"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-12T09:52:31",
                "message_text_only": "On Sun, Oct 12, 2014 at 10:41 AM, Geir Harald Hansen\n<operator at bitminter.com> wrote:\n> On 12.10.2014 01:34, Pieter Wuille wrote:\n>> * No orphan blocks stored in memory anymore (reducing memory usage during sync).\n>\n> Will this slow down reorgs after a fork, compared to today?\n\nWhy would you think so? Orphan blocks are blocks whose parent is not\nknown. In the case of a reorganization the client 'jumps' to a new\nbest chain, for this to happen the original tip and the new best tip\nand all their parents must be already known.\n\nWladimir"
            },
            {
                "author": "Geir Harald Hansen",
                "date": "2014-10-12T10:06:25",
                "message_text_only": "On 12.10.2014 11:52, Wladimir wrote:\n> On Sun, Oct 12, 2014 at 10:41 AM, Geir Harald Hansen\n> <operator at bitminter.com> wrote:\n>> On 12.10.2014 01:34, Pieter Wuille wrote:\n>>> * No orphan blocks stored in memory anymore (reducing memory usage during sync).\n>>\n>> Will this slow down reorgs after a fork, compared to today?\n>\n> Why would you think so? Orphan blocks are blocks whose parent is not\n> known. In the case of a reorganization the client 'jumps' to a new\n> best chain, for this to happen the original tip and the new best tip\n> and all their parents must be already known.\n\nI was thinking of shorter sides of forks as being orphaned. Sorry for \nthe confusion.\n\nRegards,\nGeir H. Hansen, Bitminter"
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-10-12T19:13:06",
                "message_text_only": "Great work, Pieter. I've been spooling up several nodes per week lately and can testify that stalled downloads during initial syncing are a pain. I usually forgo bootstrapping on VPSes because I don't want to have to adjust the disk space allocation.\n\nWith headers-first I'm saturating my home cable connection with download rates of 4 MB/s until block 295,000 at which point CPU becomes the bottleneck and it settles down in the 1 MB/s range.\n\nIt took 6 minutes for my node to sync to block height 100,000\n22 minutes to reach height 200,000\n62 minutes to reach height 250,000\n125 minutes to reach height 295,000\n144 minutes to reach height 300,000\n248 minutes to reach height 325,000\n\n- Jameson\n\nOn 10/11/2014 07:34 PM, Pieter Wuille wrote:\n> Hi all,\n> \n> I believe that a large change that I've been working on for Bitcoin\n> Core is ready for review and testing: headers-first synchronization.\n> In short, it changes the way the best chain is discovered, downloaded\n> and verified, with several advantages:\n> * Parallel block downloading (much faster sync on typical network connections).\n> * No more stalled downloads.\n> * Much more robust against unresponsive or slow peers.\n> * Removes a class of DoS attacks related to peers feeding you\n> low-difficulty valid large blocks on a side branch.\n> * Reduces the need for checkpoints in the code.\n> * No orphan blocks stored in memory anymore (reducing memory usage during sync).\n> * A major step step towards an SPV mode using the reference codebase.\n> \n> Historically, this mode of operation has been known for years (Greg\n> Maxwell wrote up a description of a very similar method in\n> https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync\n> in early 2012, but it was known before that), but it took a long time\n> to refactor these code enough to support it.\n> \n> Technically, it works by replacing the single-peer blocks download by\n> a single-peer headers download (which typically takes seconds/minutes)\n> and verification, and simultaneously fetching blocks along the best\n> known headers chain from all peers that are known to have the relevant\n> blocks. Downloading is constrained to a moving window to avoid\n> unbounded unordering of blocks on disk (which would interfere with\n> pruning later).\n> \n> At the protocol level, it increases the minimally supported version\n> for peers to 31800 (corresponding to bitcoin v3.18, released in\n> december 2010), as earlier versions did not support the getheaders P2P\n> message.\n> \n> So, the code is available as a github pull request\n> (https://github.com/bitcoin/bitcoin/pull/4468), or packaged on\n> http://bitcoin.sipa.be/builds/headersfirst, where you can also find\n> binaries to test with.\n> \n> Known issues:\n> * At the very start of the sync, especially before all headers are\n> processed, downloading is very slow due to a limited number of blocks\n> that are requested per peer simultaneously. The policies around this\n> will need some experimentation can certainly be improved.\n> * Blocks will be stored on disk out of order (in the order they are\n> received, really), which makes it incompatible with some tools or\n> other programs. Reindexing using earlier versions will also not work\n> anymore as a result of this.\n> * The block index database will now hold headers for which no block is\n> stored on disk, which earlier versions won't support. If you are fully\n> synced, it may still be possible to go back to an earlier version.\n> \n> Unknown issues:\n> * Who knows, maybe it will replace your familiy pictures with Nyan\n> Cat? Use at your own risk.\n> \n> TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or\n> http://bitcoin.sipa.be/builds/headersfirst.\n>"
            },
            {
                "author": "21E14",
                "date": "2014-10-13T22:43:35",
                "message_text_only": "When forgoing bootstrapping due to disk space constraints, you, and the\nnetwork, are likely better off -reindex-ing from current blk000??.dat files.\n\nWhich brings up an interesting point: The improvements related to the\nheaders first approach are likely to increase, how ever marginally, the\npercentage of block exchange-related traffic, as it is less painful now to\nbe catching up.\n\nIt'd be interesting to see the statistics, not from a single node\nperspective, but from the viewpoint of an Internet backbone provider, say\nthrough the cables coming ashore in Cornwall. For the incurred bandwidth\nexpense would invariably trickle down to transaction fees in an equilibrium\nmodel.\n\nThere is an opportunity somewhere in this.\n\n\nOn Sun, Oct 12, 2014 at 7:13 PM, Jameson Lopp <jameson.lopp at gmail.com>\nwrote:\n\n> Great work, Pieter. I've been spooling up several nodes per week lately\n> and can testify that stalled downloads during initial syncing are a pain. I\n> usually forgo bootstrapping on VPSes because I don't want to have to adjust\n> the disk space allocation.\n>\n> With headers-first I'm saturating my home cable connection with download\n> rates of 4 MB/s until block 295,000 at which point CPU becomes the\n> bottleneck and it settles down in the 1 MB/s range.\n>\n> It took 6 minutes for my node to sync to block height 100,000\n> 22 minutes to reach height 200,000\n> 62 minutes to reach height 250,000\n> 125 minutes to reach height 295,000\n> 144 minutes to reach height 300,000\n> 248 minutes to reach height 325,000\n>\n> - Jameson\n>\n> On 10/11/2014 07:34 PM, Pieter Wuille wrote:\n> > Hi all,\n> >\n> > I believe that a large change that I've been working on for Bitcoin\n> > Core is ready for review and testing: headers-first synchronization.\n> > In short, it changes the way the best chain is discovered, downloaded\n> > and verified, with several advantages:\n> > * Parallel block downloading (much faster sync on typical network\n> connections).\n> > * No more stalled downloads.\n> > * Much more robust against unresponsive or slow peers.\n> > * Removes a class of DoS attacks related to peers feeding you\n> > low-difficulty valid large blocks on a side branch.\n> > * Reduces the need for checkpoints in the code.\n> > * No orphan blocks stored in memory anymore (reducing memory usage\n> during sync).\n> > * A major step step towards an SPV mode using the reference codebase.\n> >\n> > Historically, this mode of operation has been known for years (Greg\n> > Maxwell wrote up a description of a very similar method in\n> > https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync\n> > in early 2012, but it was known before that), but it took a long time\n> > to refactor these code enough to support it.\n> >\n> > Technically, it works by replacing the single-peer blocks download by\n> > a single-peer headers download (which typically takes seconds/minutes)\n> > and verification, and simultaneously fetching blocks along the best\n> > known headers chain from all peers that are known to have the relevant\n> > blocks. Downloading is constrained to a moving window to avoid\n> > unbounded unordering of blocks on disk (which would interfere with\n> > pruning later).\n> >\n> > At the protocol level, it increases the minimally supported version\n> > for peers to 31800 (corresponding to bitcoin v3.18, released in\n> > december 2010), as earlier versions did not support the getheaders P2P\n> > message.\n> >\n> > So, the code is available as a github pull request\n> > (https://github.com/bitcoin/bitcoin/pull/4468), or packaged on\n> > http://bitcoin.sipa.be/builds/headersfirst, where you can also find\n> > binaries to test with.\n> >\n> > Known issues:\n> > * At the very start of the sync, especially before all headers are\n> > processed, downloading is very slow due to a limited number of blocks\n> > that are requested per peer simultaneously. The policies around this\n> > will need some experimentation can certainly be improved.\n> > * Blocks will be stored on disk out of order (in the order they are\n> > received, really), which makes it incompatible with some tools or\n> > other programs. Reindexing using earlier versions will also not work\n> > anymore as a result of this.\n> > * The block index database will now hold headers for which no block is\n> > stored on disk, which earlier versions won't support. If you are fully\n> > synced, it may still be possible to go back to an earlier version.\n> >\n> > Unknown issues:\n> > * Who knows, maybe it will replace your familiy pictures with Nyan\n> > Cat? Use at your own risk.\n> >\n> > TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or\n> > http://bitcoin.sipa.be/builds/headersfirst.\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://p.sf.net/sfu/Zoho\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141013/7e538cbd/attachment.html>"
            },
            {
                "author": "Rebroad (sourceforge)",
                "date": "2014-10-16T05:05:58",
                "message_text_only": "Hi all,\n\nI've also been spending a few months coding upon the change's Pieter has\nbeen making with the headersfirst8 pull request.\n\nMy code updates are also ready to test, and are available on github at\nhttps://github.com/rebroad/bitcoin/  and the branch is\n\"sipa-headersfirst8-patches\".\n\nI've made a number of improvement. Namely that it tracks the block as it\ndownloads and won't disconnect if the block is downloading at a reasonable\nspeed. The current stall logic of Pieter's is broken in that it will\ncontinue to disconnect a peer that is providing a block - particularly the\nnext block needed to advance the current tip. I've raised this issue, but\nso far haven't been able to communicate the problem in a way that's been\nunderstood.\n\nI've also added logic to avoid the node stalling due to many blocks being\nadded to the ActiveTip (which would cause timeouts both from our node, and\nnodes we are connected to). It will also log and determine bandwidth per\nnode, and the next changes I will be adding will be to make it prefer to\ndownload from the faster nodes (coming shortly).\n\nI have also added code ready to adapt the window size for the download.\nCurrently the start setting for blocks in flight is 3 per node, but for\nearly on on the block chain this will be too small, so once it realises\nthis after a few downloads and determines the average block size and speed,\nit will automatically adjust the number of blocks to request per node and\nrevise this each minute.\n\nPlease do take a look at my code, and feel free to test it. It also\nimproves some of the debug.log output to make it easier to read and provide\nuseful information about concurrent downloads, etc.\n\nEdmund\n\nOn Sun, Oct 12, 2014 at 7:34 AM, Pieter Wuille <pieter.wuille at gmail.com>\nwrote:\n\n> Hi all,\n>\n> I believe that a large change that I've been working on for Bitcoin\n> Core is ready for review and testing: headers-first synchronization.\n> In short, it changes the way the best chain is discovered, downloaded\n> and verified, with several advantages:\n> * Parallel block downloading (much faster sync on typical network\n> connections).\n> * No more stalled downloads.\n> * Much more robust against unresponsive or slow peers.\n> * Removes a class of DoS attacks related to peers feeding you\n> low-difficulty valid large blocks on a side branch.\n> * Reduces the need for checkpoints in the code.\n> * No orphan blocks stored in memory anymore (reducing memory usage during\n> sync).\n> * A major step step towards an SPV mode using the reference codebase.\n>\n> Historically, this mode of operation has been known for years (Greg\n> Maxwell wrote up a description of a very similar method in\n> https://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync\n> in early 2012, but it was known before that), but it took a long time\n> to refactor these code enough to support it.\n>\n> Technically, it works by replacing the single-peer blocks download by\n> a single-peer headers download (which typically takes seconds/minutes)\n> and verification, and simultaneously fetching blocks along the best\n> known headers chain from all peers that are known to have the relevant\n> blocks. Downloading is constrained to a moving window to avoid\n> unbounded unordering of blocks on disk (which would interfere with\n> pruning later).\n>\n> At the protocol level, it increases the minimally supported version\n> for peers to 31800 (corresponding to bitcoin v3.18, released in\n> december 2010), as earlier versions did not support the getheaders P2P\n> message.\n>\n> So, the code is available as a github pull request\n> (https://github.com/bitcoin/bitcoin/pull/4468), or packaged on\n> http://bitcoin.sipa.be/builds/headersfirst, where you can also find\n> binaries to test with.\n>\n> Known issues:\n> * At the very start of the sync, especially before all headers are\n> processed, downloading is very slow due to a limited number of blocks\n> that are requested per peer simultaneously. The policies around this\n> will need some experimentation can certainly be improved.\n> * Blocks will be stored on disk out of order (in the order they are\n> received, really), which makes it incompatible with some tools or\n> other programs. Reindexing using earlier versions will also not work\n> anymore as a result of this.\n> * The block index database will now hold headers for which no block is\n> stored on disk, which earlier versions won't support. If you are fully\n> synced, it may still be possible to go back to an earlier version.\n>\n> Unknown issues:\n> * Who knows, maybe it will replace your familiy pictures with Nyan\n> Cat? Use at your own risk.\n>\n> TL;DR: Review/test https://github.com/bitcoin/bitcoin/pull/4468 or\n> http://bitcoin.sipa.be/builds/headersfirst.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://p.sf.net/sfu/Zoho\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141016/3ed00833/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Request for review/testing: headers-first synchronization in Bitcoin Core",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Geir Harald Hansen",
                "Gregory Maxwell",
                "Luke Dashjr",
                "21E14",
                "Jameson Lopp",
                "Pieter Wuille",
                "Aaron Voisine",
                "Rebroad (sourceforge)"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 23717
        }
    },
    {
        "title": "[Bitcoin-development] Fwd: [Bug 24444] Named Curve Registry (adding secp256k1)",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2014-10-13T10:01:37",
                "message_text_only": "FYI:\n\nThis is an issue I filed related to adding secp256k1 into Web Crypto API\nwhich will be implemented natively in (some) web browsers.\n\nIf there is any feedback from crypto implementers, please feel free to add\ncomments to this thread:\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=24444\n\n---------- Forwarded message ----------\nFrom: <bugzilla at jessica.w3.org>\nDate: 13 October 2014 09:18\nSubject: [Bug 24444] Named Curve Registry (adding secp256k1)\nTo: melvincarvalho at gmail.com\n\n\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=24444\n\nMyron Davis <myrond at gmail.com> changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n             Status|RESOLVED                    |REOPENED\n                 CC|                            |myrond at gmail.com\n         Resolution|NEEDSINFO                   |---\n\n--- Comment #2 from Myron Davis <myrond at gmail.com> ---\nCould this be looked at again?\n\nLast response was waiting for feedback from crypto implementors.\n\nCurrently secp256k1 is supported in the following SSL/TLS libraries now\nBotan\nNSS\nopenssl\nLibreSSL\nPolarSSL\nJSSE\n\nThe three other curves are all all have parameters which do not define how\nthey\nwere generated.  secp256k1 curve has some great advantages in faster\nsignature\nverification and how the values were determined for the curve.  (i.e. not\nrandom).\n\nhttp://www.ietf.org/rfc/rfc4492\n\nThe curve has had a lot of eyes on it with lots of hardware and software\nsupporting this curve.\n\nWith discovery of backdoor's in NIST's random number generator\n(https://www.schneier.com/blog/archives/2007/11/the_strange_sto.html ) I\nwould\nlike to see a determined parameter curve instead of a \"random\" curve option.\n\nThanks\n\n--\nYou are receiving this mail because:\nYou reported the bug.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141013/92a06c56/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-10-13T17:18:53",
                "message_text_only": "See-also: this related bug on Curve25519 and some MS Research curves\nthat generated far more discussion.\n\nhttps://www.w3.org/Bugs/Public/show_bug.cgi?id=25839\n\nMatt\n\nOn 10/13/14 10:01, Melvin Carvalho wrote:\n> FYI:\n> \n> This is an issue I filed related to adding secp256k1 into Web Crypto API\n> which will be implemented natively in (some) web browsers.\n> \n> If there is any feedback from crypto implementers, please feel free to\n> add comments to this thread:\n> https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444\n> \n> ---------- Forwarded message ----------\n> From: ** <bugzilla at jessica.w3.org <mailto:bugzilla at jessica.w3.org>>\n> Date: 13 October 2014 09:18\n> Subject: [Bug 24444] Named Curve Registry (adding secp256k1)\n> To: melvincarvalho at gmail.com <mailto:melvincarvalho at gmail.com>\n> \n> \n> https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444\n> \n> Myron Davis <myrond at gmail.com <mailto:myrond at gmail.com>> changed:\n> \n>            What    |Removed                     |Added\n> ----------------------------------------------------------------------------\n>              Status|RESOLVED                    |REOPENED\n>                  CC|                            |myrond at gmail.com\n> <mailto:myrond at gmail.com>\n>          Resolution|NEEDSINFO                   |---\n> \n> --- Comment #2 from Myron Davis <myrond at gmail.com\n> <mailto:myrond at gmail.com>> ---\n> Could this be looked at again?\n> \n> Last response was waiting for feedback from crypto implementors.\n> \n> Currently secp256k1 is supported in the following SSL/TLS libraries now\n> Botan\n> NSS\n> openssl\n> LibreSSL\n> PolarSSL\n> JSSE\n> \n> The three other curves are all all have parameters which do not define\n> how they\n> were generated.  secp256k1 curve has some great advantages in faster\n> signature\n> verification and how the values were determined for the curve.  (i.e. not\n> random).\n> \n> http://www.ietf.org/rfc/rfc4492\n> \n> The curve has had a lot of eyes on it with lots of hardware and software\n> supporting this curve.\n> \n> With discovery of backdoor's in NIST's random number generator\n> (https://www.schneier.com/blog/archives/2007/11/the_strange_sto.html ) I\n> would\n> like to see a determined parameter curve instead of a \"random\" curve option.\n> \n> Thanks\n> \n> --\n> You are receiving this mail because:\n> You reported the bug.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://p.sf.net/sfu/Zoho\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-10-14T08:57:58",
                "message_text_only": "FYI:\n\n\"In order to progress towards exit to Last Call for the Web Crypto API, the\nchair suggests the following resolution for that bug.\n\nresolution : Bug CLOSED. This problem will be addressed by the extension bug\n25618 https://www.w3.org/Bugs/Public/show_bug.cgi?id=25618.\n\nIf none objects before the 20th of Oct @20:00 UTC, this resolution will be\nendorsed.\"\n\nOn 13 October 2014 19:18, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n\n> See-also: this related bug on Curve25519 and some MS Research curves\n> that generated far more discussion.\n>\n> https://www.w3.org/Bugs/Public/show_bug.cgi?id=25839\n>\n> Matt\n>\n> On 10/13/14 10:01, Melvin Carvalho wrote:\n> > FYI:\n> >\n> > This is an issue I filed related to adding secp256k1 into Web Crypto API\n> > which will be implemented natively in (some) web browsers.\n> >\n> > If there is any feedback from crypto implementers, please feel free to\n> > add comments to this thread:\n> > https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444\n> >\n> > ---------- Forwarded message ----------\n> > From: ** <bugzilla at jessica.w3.org <mailto:bugzilla at jessica.w3.org>>\n> > Date: 13 October 2014 09:18\n> > Subject: [Bug 24444] Named Curve Registry (adding secp256k1)\n> > To: melvincarvalho at gmail.com <mailto:melvincarvalho at gmail.com>\n> >\n> >\n> > https://www.w3.org/Bugs/Public/show_bug.cgi?id=24444\n> >\n> > Myron Davis <myrond at gmail.com <mailto:myrond at gmail.com>> changed:\n> >\n> >            What    |Removed                     |Added\n> >\n> ----------------------------------------------------------------------------\n> >              Status|RESOLVED                    |REOPENED\n> >                  CC|                            |myrond at gmail.com\n> > <mailto:myrond at gmail.com>\n> >          Resolution|NEEDSINFO                   |---\n> >\n> > --- Comment #2 from Myron Davis <myrond at gmail.com\n> > <mailto:myrond at gmail.com>> ---\n> > Could this be looked at again?\n> >\n> > Last response was waiting for feedback from crypto implementors.\n> >\n> > Currently secp256k1 is supported in the following SSL/TLS libraries now\n> > Botan\n> > NSS\n> > openssl\n> > LibreSSL\n> > PolarSSL\n> > JSSE\n> >\n> > The three other curves are all all have parameters which do not define\n> > how they\n> > were generated.  secp256k1 curve has some great advantages in faster\n> > signature\n> > verification and how the values were determined for the curve.  (i.e. not\n> > random).\n> >\n> > http://www.ietf.org/rfc/rfc4492\n> >\n> > The curve has had a lot of eyes on it with lots of hardware and software\n> > supporting this curve.\n> >\n> > With discovery of backdoor's in NIST's random number generator\n> > (https://www.schneier.com/blog/archives/2007/11/the_strange_sto.html ) I\n> > would\n> > like to see a determined parameter curve instead of a \"random\" curve\n> option.\n> >\n> > Thanks\n> >\n> > --\n> > You are receiving this mail because:\n> > You reported the bug.\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> > Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> > Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> > Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> > http://p.sf.net/sfu/Zoho\n> >\n> >\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://p.sf.net/sfu/Zoho\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141014/486b7876/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Named Curve Registry (adding secp256k1)",
            "categories": [
                "Bitcoin-development",
                "Bug 24444"
            ],
            "authors": [
                "Melvin Carvalho",
                "Matt Corallo"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 9274
        }
    },
    {
        "title": "[Bitcoin-development] OpenCryptocurrencyReview",
        "thread_messages": [
            {
                "author": "Daniel Murrell",
                "date": "2014-10-13T14:20:15",
                "message_text_only": "Dear All\n\nI'm not sure this is welcome here. Someone suggested I let the devs\nknow about it here. I've made an open forum on which to post\ndiscussion about cryptocurrency related research:\nwww.opencryptocurrencyreview.com\n\nJeff helped me with the naming a bit some time ago. It's not had much\nattention but then I've not advertised it much.\n\nPlease check it out and let me know if something like this is\nworthwhile in this community. I'm not aware of much of the research\nmyself but a central repo of it seemed lacking and this adds\ndiscussion capabilities to the repo.\n\nIf you guys have any potential use case for this, please consider\nholding some of your discussions about research that interests you\nhere. If it gets core devs talking on it (if it's actually useful to\nyou that is), then I'm sure that others will be inspired to use it.\nEven just one discussion thread will help if this regard.\n\nIt's not for profit so I'm not trying to make any money out of you.\nIt's just an experiment.\n\nKind regards\nDaniel Murrell"
            }
        ],
        "thread_summary": {
            "title": "OpenCryptocurrencyReview",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Daniel Murrell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1021
        }
    },
    {
        "title": "[Bitcoin-development] Malleable booleans",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2014-10-14T02:34:16",
                "message_text_only": "Hi all,\n\nwhile working on a BIP62 implementation I discovered yet another type\nof malleability: the interpretation of booleans.\n\nAny byte array with non-zero bytes in it (ignoring the highest bit of\nthe last byte, which is the sign bit when interpreting as a number) is\ninterpreted as true, anything else as false. Other than numbers,\nthey're not even restricted to 4 bytes. Worse, the code for dealing\nwith booleans is not very consistent: OP_BOOLAND and OP_BOOLOR first\ninterpret their arguments as numbers, and then compare them to 0 to\nturn them into boolean values.\n\nThis means that scripts that use booleans as inputs will be inherently\nmalleable. Given that that seems actually useful (passing in booleans\nto guide some OP_IF's during execution of several alternatives), I\nwould like to change BIP62 to also state that interpreted booleans\nmust be of minimal encoded size (in addition to numbers).\n\nAny opinions for or against?"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-14T02:45:47",
                "message_text_only": "On Tue, Oct 14, 2014 at 2:34 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Hi all,\n>\n> while working on a BIP62 implementation I discovered yet another type\n> of malleability: the interpretation of booleans.\n>\n> Any byte array with non-zero bytes in it (ignoring the highest bit of\n> the last byte, which is the sign bit when interpreting as a number) is\n> interpreted as true, anything else as false. Other than numbers,\n> they're not even restricted to 4 bytes. Worse, the code for dealing\n> with booleans is not very consistent: OP_BOOLAND and OP_BOOLOR first\n> interpret their arguments as numbers, and then compare them to 0 to\n> turn them into boolean values.\n>\n> This means that scripts that use booleans as inputs will be inherently\n> malleable. Given that that seems actually useful (passing in booleans\n> to guide some OP_IF's during execution of several alternatives), I\n> would like to change BIP62 to also state that interpreted booleans\n> must be of minimal encoded size (in addition to numbers).\n>\n> Any opinions for or against?\n\n\nAn argument against is that you can currently do something like this:\n\n\nOP_DUP OP_IF OP_HASH160 PUSH OP_EQUALVERIFY OP_ELSE  <stuff>\nOP_CHECKSIGVERIFY OP_ENDIF\n\nE.g. if your input is non-zero you're giving a hash, if it's zero\nyou're skipping that and running another branch.\n\nOf course you could just encode your script another way... but by that\nsame logic you can 1 OP_QUALVERIFY to bool-ize any input in the true\npath.  The inconsistency in handling makes it more likely that script\nauthors will screw up with bad (for them) consequences, however.\n\n[I just asked pieter out of band to clarify if he means \"minimal\nencoded size\", or must be 0 or 1 minimally encoded... as the former\ndoesn't fix the malleability, but the later is more disruptive]"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-14T07:27:36",
                "message_text_only": "On Tuesday 14. October 2014 04.34.16 Pieter Wuille wrote:\n> This means that scripts that use booleans as inputs will be inherently\n> malleable.\n\nI've ran into this issue in C++ often enough,\na funny example is assigning \"2\" to a native c++ bool and then you can do a\n if (myBool == true)\n else if (myBool == false)\nand neither of them will hit.\n\n> I\n> would like to change BIP62 to also state that interpreted booleans\n> must be of minimal encoded size (in addition to numbers).\n\nWhat about rejecting a script where a bool is not explicitly zero or one?\n-- \nThomas Zander"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-14T07:52:44",
                "message_text_only": "On Tue, Oct 14, 2014 at 7:27 AM, Thomas Zander <thomas at thomaszander.se> wrote:\n> What about rejecting a script where a bool is not explicitly zero or one?\n\nI believe this is what he actually meant."
            },
            {
                "author": "Wladimir",
                "date": "2014-10-14T08:04:20",
                "message_text_only": "On Tue, Oct 14, 2014 at 9:27 AM, Thomas Zander <thomas at thomaszander.se> wrote:\n> On Tuesday 14. October 2014 04.34.16 Pieter Wuille wrote:\n>> This means that scripts that use booleans as inputs will be inherently\n>> malleable.\n>\n> I've ran into this issue in C++ often enough,\n> a funny example is assigning \"2\" to a native c++ bool and then you can do a\n>  if (myBool == true)\n>  else if (myBool == false)\n> and neither of them will hit.\n\nOff topic nit: I think you're confused with custom BOOL typedefs in C?\nC++ booleans are protected against this (C++ standard \u00a74.7/4 according\nto Google).:\n\n```\n#include <stdio.h>\n\nint main()\n{\n    bool myBool;\n    myBool = 2;\n    if (myBool == true)\n        printf(\"It is true!\\n\");\n    else if (myBool == false)\n        printf(\"It is false!\\n\");\n    else\n        printf(\"It is something else!\\n\");\n}\n```\n\nPrints 'It is true'. You can also use bool(something) as equivalent of\n`x != 0`; as in `assert(bool(2) == true);`.\n\nWladimir"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-14T08:09:05",
                "message_text_only": "On Mon, Oct 13, 2014 at 07:34:16PM -0700, Pieter Wuille wrote:\n> Hi all,\n> \n> while working on a BIP62 implementation I discovered yet another type\n> of malleability: the interpretation of booleans.\n> \n> Any byte array with non-zero bytes in it (ignoring the highest bit of\n> the last byte, which is the sign bit when interpreting as a number) is\n> interpreted as true, anything else as false. Other than numbers,\n> they're not even restricted to 4 bytes. Worse, the code for dealing\n> with booleans is not very consistent: OP_BOOLAND and OP_BOOLOR first\n> interpret their arguments as numbers, and then compare them to 0 to\n> turn them into boolean values.\n> \n> This means that scripts that use booleans as inputs will be inherently\n> malleable. Given that that seems actually useful (passing in booleans\n> to guide some OP_IF's during execution of several alternatives), I\n> would like to change BIP62 to also state that interpreted booleans\n> must be of minimal encoded size (in addition to numbers).\n> \n> Any opinions for or against?\n\nI noticed this awhile back myself. More interestingly, I remember\nnoticing some non-std scripts on mainnet that had opcodes that appeared\nto be attempts to solve this issue with variations of the following:\n\n    DUP\n    IF\n        1 EQUALVERIFY\n        <do stuff>\n    ELSE\n        0 EQUALVERIFY\n        <do stuff>\n    ENDIF\n\nI'll have to admit, I decided to keep quiet about it because it's a good\nexample of how relying on BIP62 for specialty contract applications that\nabsolutely need to avoid malleability for security reasons is a dubious\nidea; it's hard to be sure that we've really gotten every relevant case\ncorrect.\n\nI think a decent argument *for* doing this is that if a script author\nfails to properly 'bool-ize' every boolean-using path that can have\nnon-minimal encodings in normal execution, you can always create a\nnVersion=1 transaction manually to spend the output, preventing funds\nfrom getting lost. Meanwhile in the general case of a compenent script\nauthor having the canonical bool testing in every boolean-using opcode\nsaves a lot of bytes.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000147fe2005d7d4490938a7ab96901b8256dcd9d4eac78cb8c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141014/512de704/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-10-14T18:54:36",
                "message_text_only": "To be clear: I indeed meant to only allow 0 and 1 as booleans (or,\nmore precisely: [] and [0x01]). Evaluating any stack element as a\nboolean that is not any of these would result in script failure.\n\nThe only places where this is relevant:\n* Inputs to OP_IF and OP_NOTIF (which are currently allowed to be any\nbyte array).\n* Inputs to OP_BOOLAND and OP_BOOLOR (which are currently allowed to\nbe any valid number).\n* The resulting final element on the stack for validity.\n\nThe code for converting stack elements to booleans is also invoked for\nall OP_*VERIFY operators, but for those it is always the output of a\nprevious operator, so it will not have any semantic impact.\n\nOn Tue, Oct 14, 2014 at 1:09 AM, Peter Todd <pete at petertodd.org> wrote:\n> I noticed this awhile back myself. More interestingly, I remember\n> noticing some non-std scripts on mainnet that had opcodes that appeared\n> to be attempts to solve this issue with variations of the following:\n>\n>     DUP\n>     IF\n>         1 EQUALVERIFY\n>         <do stuff>\n>     ELSE\n>         0 EQUALVERIFY\n>         <do stuff>\n>     ENDIFo.\n>\n> I'll have to admit, I decided to keep quiet about it because it's a good\n> example of how relying on BIP62 for specialty contract applications that\n> absolutely need to avoid malleability for security reasons is a dubious\n> idea; it's hard to be sure that we've really gotten every relevant case\n> correct.\n\nI think my goal is to have the property that for every possible\nscript, there is an equivalent one that is non-malleable. There are\nlikely still holes in that idea, but at least for just standard\nscripts I think BIP62 (as is) covers this. And as your example points\nout (Greg and I discussed this, though we didn't come up with such a\nconcise one), it is already possible for boolean inputs too.\n\n> I think a decent argument *for* doing this is that if a script author\n> fails to properly 'bool-ize' every boolean-using path that can have\n> non-minimal encodings in normal execution, you can always create a\n> nVersion=1 transaction manually to spend the output, preventing funds\n> from getting lost. Meanwhile in the general case of a compenent script\n> author having the canonical bool testing in every boolean-using opcode\n> saves a lot of bytes.\n\nThe real question is whether there are use cases for not having this\nrequirement. I can't come up with any, as that would imply a boolean\nthat is also interpretable as a hash, a pubkey or a signature - all of\nwhich seems crpytographically impossible to ever result in false.\n\n-- \nPieter"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-14T19:45:18",
                "message_text_only": "On Tue, Oct 14, 2014 at 11:54:36AM -0700, Pieter Wuille wrote:\n> > I think a decent argument *for* doing this is that if a script author\n> > fails to properly 'bool-ize' every boolean-using path that can have\n> > non-minimal encodings in normal execution, you can always create a\n> > nVersion=1 transaction manually to spend the output, preventing funds\n> > from getting lost. Meanwhile in the general case of a compenent script\n> > author having the canonical bool testing in every boolean-using opcode\n> > saves a lot of bytes.\n> \n> The real question is whether there are use cases for not having this\n> requirement. I can't come up with any, as that would imply a boolean\n> that is also interpretable as a hash, a pubkey or a signature - all of\n> which seems crpytographically impossible to ever result in false.\n\nI'm kinda inclined to agree, however there is an opposing argument too:\nHow often is BOOLAND and BOOLOR applied to unsanitised input from the\nscriptSig? I can't think of a script type where that would be the case,\nunlike OP_IF where the logical way of writing scripts is to have the\nscriptSig select which brance you take. In every script I've ever\nthought of BOOLAND and BOOLOR is applied to stuff generated within the\nscript itself, which isn't a malleability concern.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000005f3f265a1636bd90c2c8098093c2db2ccfc91c17890a714\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141014/1fc6aa6e/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Malleable booleans",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Peter Todd",
                "Thomas Zander",
                "Gregory Maxwell",
                "Pieter Wuille"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 11165
        }
    },
    {
        "title": "[Bitcoin-development] BIP process",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-10-15T08:29:43",
                "message_text_only": "Hello,\n\nI'm trying to create a bit of process around the\nhttps://github.com/bitcoin/bips repository.\n\nA) Currently a lot of pulls are open for various BIPs and it is not\nclear who should comment on them, or who decides on changes to be\nmerged.\n\nCurrently all BIP changes have to go through the Bitcoin Core team,\nwhich is a narrow bottleneck and makes little sense when you think\nabout it. But I don't want to go back to the wiki state in which\neveryone can make arbitrary changes to any BIP - we need to distribute\nthe process somehow.\n\nI'd like to propose to make the author (or someone they delegate to)\nthe primary contact for each BIP. They should comment on changes, and\neither accept or reject them. If they accept them, the change will be\nmerged.\n\nOf course this means that there is a responsibility for the author to\nadhere to BIP 1. For example if your BIP is final, don't allow any\ntechnical changes. To do small clarifications, spelling or adding\nimplementations or examples is OK, but changing or adding to a\nprotocol is not - this needs a new BIP. Changing your BIP status\nwithout community consensus is also not OK.\n\nB) I also think it makes sense to move the BIP discussion (both about\nthe BIP process and individual BIPs) to a separate mailing list.\n\nbitcoin-development currently has a dual function: discussion of\nBitcoin Core implementation concerns, as well as global changes to\nBitcoin (in the form of BIPs).\n\nThis makes the list too busy for some people, but it is critical that\neveryone writing a Bitcoin node or client is up-to-date with proposals\nand can comment on them.\n\nWladimir"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-15T09:22:46",
                "message_text_only": "On Wed, Oct 15, 2014 at 8:29 AM, Wladimir <laanwj at gmail.com> wrote:\n> Hello,\n>\n> I'm trying to create a bit of process around the\n> https://github.com/bitcoin/bips repository.\n>\n> A) Currently a lot of pulls are open for various BIPs and it is not\n> clear who should comment on them, or who decides on changes to be\n> merged.\n>\n> Currently all BIP changes have to go through the Bitcoin Core team,\n> which is a narrow bottleneck and makes little sense when you think\n> about it. But I don't want to go back to the wiki state in which\n> everyone can make arbitrary changes to any BIP - we need to distribute\n> the process somehow.\n>\n> I'd like to propose to make the author (or someone they delegate to)\n> the primary contact for each BIP. They should comment on changes, and\n> either accept or reject them. If they accept them, the change will be\n> merged.\n>\n> Of course this means that there is a responsibility for the author to\n> adhere to BIP 1. For example if your BIP is final, don't allow any\n> technical changes. To do small clarifications, spelling or adding\n> implementations or examples is OK, but changing or adding to a\n> protocol is not - this needs a new BIP. Changing your BIP status\n> without community consensus is also not OK.\n>\n> B) I also think it makes sense to move the BIP discussion (both about\n> the BIP process and individual BIPs) to a separate mailing list.\n>\n> bitcoin-development currently has a dual function: discussion of\n> Bitcoin Core implementation concerns, as well as global changes to\n> Bitcoin (in the form of BIPs).\n>\n> This makes the list too busy for some people, but it is critical that\n> everyone writing a Bitcoin node or client is up-to-date with proposals\n> and can comment on them.\n\n\nThis all makes a lot of sense to me, and would help a lot with the\nworkflow.  Unfortunately github pulls and issues really have nothing\nto faciltate a multistage workflow... e.g. where something can go\nthrough several steps.\n\nWe're also having problems with people failing to comment on things,\nnot even \"I looked at this and have no opinion\", which is really\nobstructing things."
            },
            {
                "author": "Wladimir",
                "date": "2014-10-15T09:36:58",
                "message_text_only": "> This all makes a lot of sense to me, and would help a lot with the\n> workflow.  Unfortunately github pulls and issues really have nothing\n> to faciltate a multistage workflow... e.g. where something can go\n> through several steps.\n\nIndeed, pull requests don't have a \"status\".\nIt would be possible to (ab)use labels for this.\n\nThe drawback of labels is that only the repository team can set these,\nthere is no way to delegate. But I suppose it'd be possible to build\nsomething on top of the github API that handles this.\n\n> We're also having problems with people failing to comment on things,\n> not even \"I looked at this and have no opinion\", which is really\n> obstructing things.\n\nWell - the only way to avoid that is to set a reasonable deadline,\nafter which there is a default decision. You'd hope this would\nmotivate people to get involved in time.\n\nWladimir"
            },
            {
                "author": "Cory Fields",
                "date": "2014-10-15T18:58:57",
                "message_text_only": "Sounds like this is what you're after, it's a fairly new feature:\nhttps://github.com/blog/1375%0A-task-lists-in-gfm-issues-pulls-comments\n\nI've been meaning to use it in a PR to try it out.\n\nCory\n\nOn Wed, Oct 15, 2014 at 5:36 AM, Wladimir <laanwj at gmail.com> wrote:\n>> This all makes a lot of sense to me, and would help a lot with the\n>> workflow.  Unfortunately github pulls and issues really have nothing\n>> to faciltate a multistage workflow... e.g. where something can go\n>> through several steps.\n>\n> Indeed, pull requests don't have a \"status\".\n> It would be possible to (ab)use labels for this.\n>\n> The drawback of labels is that only the repository team can set these,\n> there is no way to delegate. But I suppose it'd be possible to build\n> something on top of the github API that handles this.\n>\n>> We're also having problems with people failing to comment on things,\n>> not even \"I looked at this and have no opinion\", which is really\n>> obstructing things.\n>\n> Well - the only way to avoid that is to set a reasonable deadline,\n> after which there is a default decision. You'd hope this would\n> motivate people to get involved in time.\n>\n> Wladimir\n>\n> ------------------------------------------------------------------------------\n> Comprehensive Server Monitoring with Site24x7.\n> Monitor 10 servers for $9/Month.\n> Get alerted through email, SMS, voice calls or mobile push notifications.\n> Take corrective actions from your mobile device.\n> http://p.sf.net/sfu/Zoho\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-16T07:50:48",
                "message_text_only": "On Wednesday 15. October 2014 11.36.58 Wladimir wrote:\n> > We're also having problems with people failing to comment on things,\n> > not even \"I looked at this and have no opinion\", which is really\n> > obstructing things.\n> \n> Well - the only way to avoid that is to set a reasonable deadline,\n> after which there is a default decision. You'd hope this would\n> motivate people to get involved in time.\n\nI have been part of both the OSI (NEN) and the OASIS standards committees for \na while, working on standards as a technical adviser.\n\nThere I learned a lot about how to manage this process, maybe some ideas from \nsuch committees can be useful.\n\nThe idea that one person owns a BIP makes total sense, (s)he is the only one \nthat should be putting forward the BIP when its mature enough for making it \nfinal. Note that this can be already after its been implemented once or twice.\n\nSo you have a phase where you have random people propose changes, which should \nall go in the public mailinglist, and they can be accepted by the owner \nwithout discussion.\nIf anyone that sees that change has an objection to the change, (s)he speaks \nup and you follow group consensus. This means (and this is actually in an ISO \nstandard ;) that consensus is reached when nobody is left objecting to the \nchange.\n\nAt some point the BIP is mature enough to vote on, at the discretion of the \nowner, and the owner puts it forward and requests a vote. If the above process \nwas handled cleanly there is a very small chance of it being down-voted so an \nactual vote may not be needed (its hard to decide who gets a vote..).\nYou obviously need a deadline for this and afterwards you mark the proposal \nfinal. Or you close it as \"needs more work\".\n-- \nThomas Zander"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-10-15T15:37:57",
                "message_text_only": "RE: process:\n\nI like author == primary control, and an \"assume they will do the right\nthing, revert if they don't\"\n\nRE: separate mailing list for BIP discussion:\n\nGreat idea. Jeff Garzik was looking for a better mailing list solution than\nSourceForge, but assuming\nthere isn't a clearly better solution I think \"we\" should create a strictly\nmoderated bitcoin-bips at lists.sourceforge list.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/6532efb8/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-15T15:46:13",
                "message_text_only": ">\n> Great idea. Jeff Garzik was looking for a better mailing list solution\n> than SourceForge, but assuming\n> there isn't a clearly better solution I think \"we\" should create a\n> strictly moderated bitcoin-bips at lists.sourceforge list.\n>\n\nLet's stay away from SF.net or any mailman-controlled lists if at all\npossible. They break DKIM signatures which means they're no longer\ncompatible with Yahoo, all mail from Yahoo users gets spamfoldered\nimmediately. Google Groups gets this right. Perhaps other list operators do\ntoo. Groups also has moderation features.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/2cf0640d/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2014-10-15T15:54:57",
                "message_text_only": "please not google groups *, I'd vote for sourceforge or other simple\nopen list software over google groups.\n\nAdam\n\n* Google lists are somehow a little proprietary or gmail lockin\nfocused eg it makes things extra hard to subscribe with a non-google\naddress if google has any hint that your address is associated with a\ngmail account.  Quite frustrating.\n\nOn 15 October 2014 16:46, Mike Hearn <mike at plan99.net> wrote:\n>> Great idea. Jeff Garzik was looking for a better mailing list solution\n>> than SourceForge, but assuming\n>> there isn't a clearly better solution I think \"we\" should create a\n>> strictly moderated bitcoin-bips at lists.sourceforge list.\n>\n>\n> Let's stay away from SF.net or any mailman-controlled lists if at all\n> possible. They break DKIM signatures which means they're no longer\n> compatible with Yahoo, all mail from Yahoo users gets spamfoldered\n> immediately. Google Groups gets this right. Perhaps other list operators do\n> too. Groups also has moderation features.\n>\n> ------------------------------------------------------------------------------\n> Comprehensive Server Monitoring with Site24x7.\n> Monitor 10 servers for $9/Month.\n> Get alerted through email, SMS, voice calls or mobile push notifications.\n> Take corrective actions from your mobile device.\n> http://p.sf.net/sfu/Zoho\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-15T16:47:12",
                "message_text_only": "On Wed, Oct 15, 2014 at 04:54:57PM +0100, Adam Back wrote:\n> please not google groups *, I'd vote for sourceforge or other simple\n> open list software over google groups.\n> \n> Adam\n> \n> * Google lists are somehow a little proprietary or gmail lockin\n> focused eg it makes things extra hard to subscribe with a non-google\n> address if google has any hint that your address is associated with a\n> gmail account.  Quite frustrating.\n\nI'll second that request. Something mailman based; don't particularly\ncare where it's hosted.\n\nAfter all, one of the big advantages of open mailing lists is that\nmultiple third-parties can easily provide archives, for instance\nwww.mail-archive.com\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000a91d3bbf16d2b80e142f98e6ff45b615f668dba558a4413\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/192c5e62/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-15T18:13:11",
                "message_text_only": "I don't care much what exact list software/service is used, but lists.sf.net\nhasn't changed in years and is basically dying. Trashing all @yahoo\naccounts because ancient mailman does a MITM attack on people's email is no\ngood, it's not any better than a web proxy that breaks every SSL\nconnection. For a project that is based on digital signatures, it's really\nbad that the mailing list is incompatible with Yahoo's \"mail signatures\nmust be valid\" policy.\n\nPlus its moderation features suck, its mail archiving features suck, etc.\nIt essentially has no redeeming features at all.\n\nmail-archive.com can be easily used with any mailing list, so not sure why\nthat's brought up. You just add it as a member, as documented here:\nhttp://www.mail-archive.com/faq.html#newlist\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/34d2a24e/attachment.html>"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-16T07:38:08",
                "message_text_only": "On Wednesday 15. October 2014 20.13.11 Mike Hearn wrote:\n> Plus its moderation features suck, its mail archiving features suck, etc.\n> It essentially has no redeeming features at all.\n\nOther than it being open source, an open platform with no lock-in 'features' \nand it works with everyone that uses the standards properly.\nNaturally, if an old version fails to function with Yahoo, I'm all for finding \na different provider. Thats what open platforms, like Mailman, are about.\n\n-- \nThomas Zander"
            },
            {
                "author": "Oliver Egginger",
                "date": "2014-10-16T14:19:37",
                "message_text_only": "15.10.2014 at 20:13 Mike Hearn wrote:\n> For a project that is based on digital signatures, it's really\n> bad that the mailing list is incompatible with Yahoo's \"mail signatures\n> must be valid\" policy.\n\n# Mailman: Do not break existing DKIM signatures\nDEFAULT_SUBJECT_PREFIX  = \"\"\nDEFAULT_MSG_HEADER = \"\"\nDEFAULT_MSG_FOOTER = \"\"\n\nMaybe you should remove these settings. They make little sense and cause\napparently problems for some recipients.\n\nAlso the mail body must not be altered through advertising or something\nelse.\n\n- oliver"
            },
            {
                "author": "Btc Drak",
                "date": "2014-10-15T19:00:10",
                "message_text_only": "On Wed, Oct 15, 2014 at 4:54 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> please not google groups *, I'd vote for sourceforge or other simple\n> open list software over google groups.\n>\n\nPlease not sourceforge.\n\n\n> * Google lists are somehow a little proprietary or gmail lockin\n> focused eg it makes things extra hard to subscribe with a non-google\n> address if google has any hint that your address is associated with a\n> gmail account.  Quite frustrating.\n\n\nMailman is good enough...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/df10eb73/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-15T19:40:04",
                "message_text_only": "On Wed, Oct 15, 2014 at 08:00:10PM +0100, Btc Drak wrote:\n> > * Google lists are somehow a little proprietary or gmail lockin\n> > focused eg it makes things extra hard to subscribe with a non-google\n> > address if google has any hint that your address is associated with a\n> > gmail account.  Quite frustrating.\n> \n> \n> Mailman is good enough...\n\nI used these guys for awhile to host a small mailman list with\nabsolutely no issues. Just $5/month for 1000 subscribers.\n\nhttps://www.mailmanlist.net/\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000019e75ca8667f175b61a41ad950d15b61d83d3faf1a128f94\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141015/9ca283d8/attachment.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-10-16T04:41:18",
                "message_text_only": "On Wednesday, October 15, 2014 7:40:04 PM Peter Todd wrote:\n> On Wed, Oct 15, 2014 at 08:00:10PM +0100, Btc Drak wrote:\n> > > * Google lists are somehow a little proprietary or gmail lockin\n> > > focused eg it makes things extra hard to subscribe with a non-google\n> > > address if google has any hint that your address is associated with a\n> > > gmail account.  Quite frustrating.\n> > \n> > Mailman is good enough...\n> \n> I used these guys for awhile to host a small mailman list with\n> absolutely no issues. Just $5/month for 1000 subscribers.\n> \n> https://www.mailmanlist.net/\n\nI've been using http://lists.nongnu.org/ for BFGMiner announce/dev mailing \nlists for a while. I don't know what software it runs, but it works.\n\nCatch is that we'd need to go through Savannah's free software auditing.\nThat might be a good idea anyway?\n\nLuke"
            },
            {
                "author": "xor",
                "date": "2014-10-19T07:17:51",
                "message_text_only": "On Wednesday, October 15, 2014 10:29:43 AM Wladimir wrote:\n> B) I also think it makes sense to move the BIP discussion (both about\n> the BIP process and individual BIPs) to a separate mailing list.\n> \n> bitcoin-development currently has a dual function: discussion of\n> Bitcoin Core implementation concerns, as well as global changes to\n> Bitcoin (in the form of BIPs).\n> \n> This makes the list too busy for some people, but it is critical that\n> everyone writing a Bitcoin node or client is up-to-date with proposals\n> and can comment on them.\n\nI joined the list when Bitcoin was already in the 10-billions of market \ncapitalization, and it actually really surprised me how low the traffic is here \ngiven the importance of Bitcoin.\n\nSo as a random stranger to the project, I would vote against that if I was \nallowed to. There really should be *more* discussion here, and splitting the \nlist up won't help with that.\n\nGreetings\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141019/3bafc443/attachment.sig>"
            },
            {
                "author": "Btc Drak",
                "date": "2014-10-19T09:42:07",
                "message_text_only": "On Sun, Oct 19, 2014 at 8:17 AM, xor <xor at freenetproject.org> wrote:\n\n> I joined the list when Bitcoin was already in the 10-billions of market\n> capitalization, and it actually really surprised me how low the traffic is\n> here\n> given the importance of Bitcoin.\n>\n> So as a random stranger to the project, I would vote against that if I was\n> allowed to. There really should be *more* discussion here, and splitting\n> the\n> list up won't help with that.\n\n\nI agree. This is also where the best peer review is to be found. Splitting\nthe list will dilute this.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141019/c8e7d3fb/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-19T09:49:48",
                "message_text_only": "On Sun, Oct 19, 2014 at 9:17 AM, xor <xor at freenetproject.org> wrote:\n\n> So as a random stranger to the project, I would vote against that if I was\n> allowed to. There really should be *more* discussion here, and splitting the\n> list up won't help with that.\n\nThe problem is not one of traffic, but of confusion of concerns, and of focus.\n\nThat specific questions about Bitcoin Core are being asked, for\nexample about watch-only functionality, in the same list where changes\nto the entire system (BIPs) should be decided on doesn't make sense.\n\nThis has in practice caused some developers of alternative clients to\nnot subscribe to this list, even though they *should* follow BIP\ndiscussion otherwise it makes no sense to have a process in the first\nplace.\n\nWladimir"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-19T18:58:02",
                "message_text_only": "On Sunday 19. October 2014 09.17.51 xor wrote:\n> I joined the list when Bitcoin was already in the 10-billions of market \n> capitalization, and it actually really surprised me how low the traffic is\n> here  given the importance of Bitcoin.\n\nI gather that actual code changes to bitcoin-core and naturally all the other \nclients are already done in another place. Which is likely the reason for your \nimpression.\n \n> So as a random stranger to the project, I would vote against that if I was \n> allowed to. There really should be *more* discussion here, and splitting\n> the  list up won't help with that.\n\nI agree with your stance that more discussion in public is always good.\n\nLets allow people that work on bitcoin java, or completely other bitcoin based \nstuff to have a simple way to filter out the topics they are interested in.\nMailinglist handling is pretty trivial in practically all email software, \npeople can equally trivially subscribe to multiple lists as their interests \ngo.\n\nAs a long time open source developer, my experience is that more lists has \nnever really caused fragmentation in the way that you fear."
            },
            {
                "author": "odinn",
                "date": "2014-10-20T00:33:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nEarlier in the discussion I suggested Discourse so that the BIP page\nwould be able to look smoother and draw more input.\nUnsystem forum is run on Discourse and has twitter, github, and e-mail\nintegration.\nFor those who haven't explored it, here is what that looks / feels like:\nhttps://forum.unsystem.net/\n\nI'm curious as to why this sort of solution should or should not be\nconsidered from someone else's perspective. In the end, whatever\nworks best for all concerned, I'm fine with it, but I'd like to hear\nmore about people's thoughts on Discourse. (I kind of like the feel\nof it.)\n\nxor wrote:\n> On Wednesday, October 15, 2014 10:29:43 AM Wladimir wrote:\n>> B) I also think it makes sense to move the BIP discussion (both \n>> about the BIP process and individual BIPs) to a separate mailing\n>>  list.\n>> \n>> bitcoin-development currently has a dual function: discussion of \n>> Bitcoin Core implementation concerns, as well as global changes \n>> to Bitcoin (in the form of BIPs).\n>> \n>> This makes the list too busy for some people, but it is critical\n>>  that everyone writing a Bitcoin node or client is up-to-date \n>> with proposals and can comment on them.\n> \n> I joined the list when Bitcoin was already in the 10-billions of \n> market capitalization, and it actually really surprised me how low\n>  the traffic is here given the importance of Bitcoin.\n> \n> So as a random stranger to the project, I would vote against that \n> if I was allowed to. There really should be *more* discussion here,\n> and splitting the list up won't help with that.\n> \n> Greetings\n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n>\n>\n> \nComprehensive Server Monitoring with Site24x7.\n> Monitor 10 servers for $9/Month. Get alerted through email, SMS, \n> voice calls or mobile push notifications. Take corrective actions \n> from your mobile device. http://p.sf.net/sfu/Zoho\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJURFhXAAoJEGxwq/inSG8Cpc0H+wZauz7iOj4XZJSI3VBv+5WL\nYAe8kDSOpa5ZprFntsFfKVU+cmSjXckPjCRI9+LsrfTR2L+VjAimjQTct1m6oRAo\n+5ZQ8Tn2CLEVRJRUzd8zbW8QPMuQCdzvwjs1oq8anaAPdwseEC/QhTZY6Av1MB8y\nnH+05mMu4YeF3RRIyjXgvxDiBBK3knoaBkbsORkVbIb7MojUBy7FnsS1JFmSs8wv\nXwWnkmFjVlhC8wSQYohcTWdJablxjpKRFq1ZNgDtIoXEi0dsC+G9Gc+8xub4hA/Y\nnDk85ihX17TBbB47SOJEAdpGrJjkb8OvdX2ubLnQPYth82wX/MWJTTdv2a4JGik=\n=uYGH\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "BIP process",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "odinn",
                "Wladimir",
                "Adam Back",
                "Mike Hearn",
                "xor",
                "Thomas Zander",
                "Peter Todd",
                "Gregory Maxwell",
                "Btc Drak",
                "Gavin Andresen",
                "Oliver Egginger",
                "Luke Dashjr",
                "Cory Fields"
            ],
            "messages_count": 20,
            "total_messages_chars_count": 22919
        }
    },
    {
        "title": "[Bitcoin-development] Proposed BIP status changes",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-10-15T08:47:18",
                "message_text_only": "These BIPs should go to Final state - they are implemented all over\nthe place, and are thus entirely fixed in place now. Any changes would\nrequire a new BIP as amandment:\n\n- BIP 14 (BIP Protocol Version and User Agent)\n\n- BIP 21 (URI Scheme)\n\n- BIP 22 (getblocktemplate - Fundamentals)\n\n- BIP 31 (Pong Message)\n\n- BIP 34 (Block v2, Height in coinbase)\n\n- BIP 35 (mempool message)\n\n- BIP 37 (Bloom filtering)\n\nLet me know if you (don't) agree.\n\nWladimir"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-10-16T04:29:06",
                "message_text_only": "On 10/15/14 08:47, Wladimir wrote:\n> These BIPs should go to Final state - they are implemented all over\n> the place, and are thus entirely fixed in place now. Any changes would\n> require a new BIP as amandment:\n> \n> - BIP 14 (BIP Protocol Version and User Agent)\n> \n> - BIP 21 (URI Scheme)\n\nACK.\n\n> - BIP 22 (getblocktemplate - Fundamentals)\n> \n> - BIP 31 (Pong Message)\n> \n> - BIP 34 (Block v2, Height in coinbase)\n> \n> - BIP 35 (mempool message)\n> \n> - BIP 37 (Bloom filtering)\n> \n> Let me know if you (don't) agree.\n> \n> Wladimir\n> \n> ------------------------------------------------------------------------------\n> Comprehensive Server Monitoring with Site24x7.\n> Monitor 10 servers for $9/Month.\n> Get alerted through email, SMS, voice calls or mobile push notifications.\n> Take corrective actions from your mobile device.\n> http://p.sf.net/sfu/Zoho\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-10-16T04:36:51",
                "message_text_only": "On Wednesday, October 15, 2014 8:47:18 AM Wladimir wrote:\n> These BIPs should go to Final state - they are implemented all over\n> the place, and are thus entirely fixed in place now. Any changes would\n> require a new BIP as amandment:\n> \n> - BIP 14 (BIP Protocol Version and User Agent)\n\nACK\n\n> - BIP 21 (URI Scheme)\n\nACK\n\n> - BIP 22 (getblocktemplate - Fundamentals)\n\nACK\n\n> - BIP 31 (Pong Message)\n\nACK\n\n> - BIP 34 (Block v2, Height in coinbase)\n\nACK\n\n> - BIP 35 (mempool message)\n\nACK\n\n> - BIP 37 (Bloom filtering)\n> \n> Let me know if you (don't) agree.\n\nShouldn't we be doing this in a GitHub PR rather than spamming up the ML?\n\nLuke"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-16T06:22:04",
                "message_text_only": ">\n> Shouldn't we be doing this in a GitHub PR rather than spamming up the ML?\n\nNot really. BIP changes should be discussed on the mailing list,\nthat's the way to get community consensus (as specified in BIP1).\n\nWladimir"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-10-16T06:46:21",
                "message_text_only": "On Thursday, October 16, 2014 6:22:04 AM Wladimir wrote:\n> > Shouldn't we be doing this in a GitHub PR rather than spamming up the ML?\n> \n> Not really. BIP changes should be discussed on the mailing list,\n> that's the way to get community consensus (as specified in BIP1).\n> \n> Wladimir\n\nDiscussion vs simple ACKing."
            }
        ],
        "thread_summary": {
            "title": "Proposed BIP status changes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo",
                "Luke Dashjr",
                "Wladimir"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 2680
        }
    },
    {
        "title": "[Bitcoin-development] Two Proposed BIPs - Bluetooth Communication and bitcoin: URI Scheme Improvements",
        "thread_messages": [
            {
                "author": "Andy Schroder",
                "date": "2014-10-17T19:58:48",
                "message_text_only": "Hello,\n\nI'd like to introduce two proposed BIPs. They are primarily focused on \nimplementing the payment protocol using bluetooth connections. I've been \nworking on automated point of sale devices and bluetooth communication \nis critical in my mind due to the potential lack of internet access at \nmany points of sale, either due to lack of cellular internet coverage, \nlack of payee providing wireless internet, and/or due to financial \nconstraints of the payer prohibiting them from maintaining a cellular \ninternet service plan. These BIPs are largely modeled after the current \nfunctionality of Andreas Schildbach's android Bitcoin Wallet's bluetooth \ncapability. I've discussed the communication scheme with him in depth \nand believe these proposals to clearly and accurately represent the \ncommunication scheme.\n\nThere is also an additional &h= parameter added to the bitcoin: URI \nscheme which applies to both bluetooth and http payment protocol \nrequests which allows for a hash of the payment request to be included. \nThis hash was proposed by Andreas as an amendment to BIP72, but others \npreferred not to amend BIP72 since it has already been put into place. \nThe current version of Schildbach's bitcoin wallet already supports the \n\"h parameter\".\n\nI'd appreciate feedback from everyone, particularly wallet developers as \nwidespread bluetooth support among wallets is very important to me. I'm \nalso very new to this mailing list as well as the BIP writing process, \nso I'd appreciate your understanding if my conventions are not standard. \nI am currently using the naming conventions \"TBIP\", so that I can \npropose /temporary/ BIP numbers, and cross reference between the two. \nObviously these will change if the BIPs are formally adopted. You can \nfind a copy of these proposed BIPs at the following links:\n\n  * https://github.com/AndySchroder/bips/blob/master/tbip-0074.mediawiki\n  * https://github.com/AndySchroder/bips/blob/master/tbip-0075.mediawiki\n\n\nIf you are interested, you can see a demonstration of many of the \nproposed features using Schildbach's wallet and my fuel pump in a video \nI recently created: https://youtu.be/kkVAhA75k1Y . The main thing not \nimplemented is multiple URLs for the payment protocol, so, as a hack, \nI'm just presenting https vi QR code and bluetooth via NFC on my fuel \npump for now.\n\n\n\nThere are a few known issues that could be improved to this bluetooth \ncommunication scheme as well as the general payment protocol and myself \nand Andreas would like to receive feedback regarding concerns and \npotential solutions. Some of the known issues are:\n\n  * There may seem to be some inconsistency in the connection header\n    messages between the payment request connection and the payment\n    connection. This is largely because it is how Andreas originally\n    implemented the communication and is hesitant to change it since\n    there are many instances of is software already deployed that\n    implement this scheme.\n  * The current method uses an unauthenticated bluetooth connection for\n    bluetooth 2.1 and newer devices (subject to man in the middle\n    attacks, but not passive eavesdroppers), and an unsecure and\n    unauthenticated connection for older devices. The known concerns\n    here are that someone within 100 meters of the payer could track the\n    bitcoin addresses used for the transaction and could possibly\n    replace the refund address by submitting a forged payment message to\n    the payee. Requiring bluetooth 2.1 and authenticating the connection\n    out of band unfortunately don't seem to be as straightforward/simple\n    of a task with most bluetooth libraries (although I'd love for\n    someone to prove me wrong). It's possible this communication scheme\n    could be extended to use an https \"like\" protocol that would not\n    care if the underlying bluetooth connection is authenticated or\n    encrypted. It's actually possible that http over a bluetooth socket\n    (instead of tcp socket) could be implemented, however it is\n    presently uncertain whether this would be too slow, too much\n    overhead (both on the devices software and communication), or if\n    http could easily be run over bluetooth sockets on all platforms.\n  * There is no acknowledgement failure message possible in the payment\n    protocol, only an acknowledgement message or lack of acknowledgement\n    message. This issue seems to be a concern and as a result, the memo\n    field is used to send an \"ack\" or \"nack\" in Schildbach's wallet. Can\n    we add a boolean status field to the payment acknowledgement message?\n  * I'd personally like a new optional boolean field added to the\n    \"PaymentDetails\" portion of the \"PaymentRequest\" to allow for the\n    payer's wallet to match the \"Output\" optional \"amount\" fields as a\n    total amount of all Outputs, rather than requiring the amount for\n    each output to be matched exactly. As it currently is, the payee can\n    specify multiple receiving addresses in order to require a payer\n    split up the payments so that when the payee then goes to spend the\n    funds later, they don't necessarily have to give their payees as\n    much knowledge of their balances and spending and receiving habits\n    and sources. As the payment protocol currently is requiring all\n    output amounts to be matched exactly for each output, there is no\n    flexibility given to the payer in order to reduce a merging or\n    unnecessary diverging of account funds, which can reduce the privacy\n    of both the payer and the payee. If the payee were given the option\n    to allow the payer the option to divide the amounts amount the\n    outputs intelligently, there can be some privacy gained.\n  * Amount of data stored in QR codes may be getting large when a\n    backwards compatible URL is used (for wallets that don't support the\n    payment protocol) and can be difficult to scan with outdoor screens\n    that have an extra weather resistant pane when in direct sunlight.\n  * The number of offline transactions of a wallet is limited to the\n    known unspent outputs when they go offline. Long term, I'd like to\n    see wallet devices that can use systems such as Kryptoradio's DVB-T\n    based broadcast (but this will need yet another radio!). Another\n    project may be to develop a blockchain query protocol of some kind\n    where retailers can provide access to blockchain data so that\n    customer's wallets can update their known unspent outputs via\n    bluetooth. It's possible such a bluetooth system could be used in\n    combination of \"Kryptoradio\" like broadcasts to provide multiple\n    blockchain references.\n  * The additional payment_url approach is a bit sloppy of a solution in\n    the PaymentDetails portion of the PaymentRequest. It would have been\n    ideal to just change this from an optional field to a repeated\n    field, however, the backwards compatibility in the protocol buffer\n    format will provide the last item in the array for a repeated field\n    (to a code that expects it to be an optional field), rather than the\n    first. Because of this, backwards compatibility with https payment\n    requests wouldn't work if the payment_url field is just changed to a\n    repeated field.\n      o Possible alternatives to what is described in the proposed BIP\n          + Change payment_url to a repeated field and then reverse the\n            order of the parameter numbers in the payment_url, compared\n            to the bitcoin URL \"r parameter\".\n          + Create an additional, new payment_url_multi repeated field\n            (or some better name), and then leave the original\n            payment_url field in there for backwards compatibility (and\n            then maybe phase it out in the future).\n      o Reference\n          + https://developers.google.com/protocol-buffers/docs/proto#updating\n              # \"|optional| is compatible with |repeated|. Given\n                serialized data of a repeated field as input, clients\n                that expect this field to be |optional| will take the\n                last input value if it's a primitive type field or merge\n                all input elements if it's a message type field.\"\n\n\n\nYour comments and suggestions would be greatly appreciated.\n\n-- \nAndy Schroder\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141017/b6585627/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141017/b6585627/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-20T12:50:24",
                "message_text_only": "Hey Andy,\n\nThanks for starting this discussion!\n\nOne thing this brings up is the never-resolved issue of whether BIPs should\ndocument how we'd *like* things to work, or how things *actually do* work.\nBIP32 is an example of the former - it was new technology and the spec was\nfinalised before any wallets actually implemented it. BIP 44 is an example\nof the latter, it basically documents how myTREZOR works and as such there\nwas minimal or no scope for changes to it. Of course both kinds of document\nare valuable.\n\nCurrently these specs document how Andreas' app already works. Whilst\npreserving compatibility with existing Android apps is surely useful,\nhaving a well designed protocol is also good. The current protocol has\nseveral problems. I don't know which is more important right now and don't\nhave a strong opinion on that. My gut feeling is that these documents\nshould possibly be just wiki pages on Andreas' github. Then if the protocol\nis brought to a point where it seems pretty good, maybe it can be BIPped at\nthat point. Alternatively, if developers of other wallet apps feel they'd\nlike a BIP right now even in the current state, that would be a very\nimportant data point.\n\nRe: the actual specs:\n\n>\n>    - There may seem to be some inconsistency in the connection header\n>    messages\n>\n> IMHO we could live with that. Although Android apps are updatable, perfect\nheader format is probably not worth the inevitable hassle and transition\nperiod that would result.\n\n>\n>    - The current method uses an unauthenticated bluetooth connection for\n>    bluetooth 2.1\n>\n> This on the other hand is not excellent. This is actually my fault - the\nfirst Bluetooth support in Bitcoin Wallet for Android was written by me in\na frantic Berlin hackathon over a weekend. We barely got it working at all\nby the end, so doing encryption/auth was out of the question. Then I went\nback to more important tasks and what got shipped was a cleaned\nup/robustified version of that.\n\nRe: hash. I'm not a fan of this approach. For one, in future there might\nnot even BE a uri involved, e.g. consider the Square style UX where the\nmerchant is broadcasting an endpoint via BLE and the phone just\nautomagically connects, sees a trusted merchant and pays. Super slick, we\ndefinitely want it - but no URI. Then of course there's the usual QR code\nsize limitations.\n\nEncrypting/authing the connection at the app layer does not have to be\ndifficult. What we really need/want, is a simple lightweight library that\ndoes an ECDH key agreement using secp256k1, and then does AES+HMAC on\nframed messages. Such a protocol would be useful not only for this use\ncase, but perhaps for encrypting/authing the p2p protocol in future as well.\n\nOnce the encrypted connection is set up above the Bluetooth layer, the\npayment protocol request can then be signed either with a regular Bitcoin\nkey that was in the Bitcoin URI as the payment address (when a URI is\navailable), thus linking the request to the URI without adding any\nadditional data by doubling up the backwards compatibility support. Or if\nthere's no URI, then of course, the payment request must be PKI signed and\nthe signed PaymentDetails structure can contain a copy of the public key\nthat was used to set up the connection, thus binding the connection to a\nPKI identity and ensuring you're not talking to a MITM.\n\nI suspect that this is not anywhere near as hard to implement as one might\nthink. ECDH is not a complex protocol. You certainly don't need full blown\nHTTPS involved.\n\n>\n>    - There is no acknowledgement failure message possible in the payment\n>    protocol, only an acknowledgement message or lack of acknowledgement\n>    message. This issue seems to be a concern and as a result, the memo field\n>    is used to send an \"ack\" or \"nack\" in Schildbach's wallet. Can we add a\n>    boolean status field to the payment acknowledgement message?\n>\n> Ugh. I did want a way to indicate failure when we designed BIP70, but I\ncan't remember why one wasn't included in the final spec. I think we\ndecided the containing protocol could do this instead (normally HTTP).\n\nAbusing the memo field is definitely the wrong thing to do! Rather the\nBluetooth specific encapsulation protocol should have a notion of failure.\n\n>\n>    - I'd personally like a new optional boolean field added to the\n>    \"PaymentDetails\" portion of the \"PaymentRequest\" to allow for the payer's\n>    wallet to match the \"Output\" optional \"amount\" fields as a total amount of\n>    all Outputs, rather than requiring the amount for each output to be matched\n>    exactly.\n>\n> Extending BIP70 with more negotiable privacy features is a different\neffort, let's not discuss that as part of Bluetooth support.\n\nBesides, no wallet uses even the existing support for merge avoidance in\nBIP70. In fact Andreas' wallet is one of the blocking factors here because\nit violates the specs by requiring the BIP70 request to have only a single\noutput that matches the address specified in the URI. All because he\ndoesn't trust HTTPS :(\n\nI don't think adding even more privacy stuff to BIP70 makes any sense until\nwe have implementations that actually exploit the existing support. And to\nget there, we must fix Andreas' wallet so it doesn't violate the specs\nanymore. Sorry Andreas. I know we argue about this all the time, but it's\nreally a big problem that your app doesn't obey the specs. It makes\neveryone reluctant to use new BIP70 features, because they feel a need to\ntest with every possible wallet app in case one of them has simply decided\nto do their own thing and become deliberately incompatible. And then why\nbother, there are more important things to do.\n\n>\n>    - Amount of data stored in QR codes may be getting large when a\n>    backwards compatible URL is used (for wallets that don't support the\n>    payment protocol) and can be difficult to scan with outdoor screens that\n>    have an extra weather resistant pane when in direct sunlight.\n>\n> MAC addresses could be encoded more efficiently, of course, but it seems\nunlikely that address-less URIs can be relied upon any time soon - and\nbesides if the URI needs to bind to an authenticated channel because PKI\nsigning is not in use, then it makes sense to use that part of the URI to\ndo so.\n\n>\n>    - The number of offline transactions of a wallet is limited to the\n>    known unspent outputs when they go offline. Long term, I'd like to see\n>    wallet devices that can use systems such as Kryptoradio's DVB-T based\n>    broadcast (but this will need yet another radio!).\n>\n> Given that all interesting mobile devices have sophisticated internet\naccess radios of various forms, I doubt it's worth putting much effort in\nhere. Bluetooth for submitting payments makes sense some of the time,\npartly for performance and partly because it's more decentralised than\nlooping in an intermediary HTTPS server to temporarily host a BIP70 request\nfile. I don't think we should try and invent an entirely new \"block chain\ninternet\" though. At any rate, it's a separate effort.\n\n>\n>    - The additional payment_url approach is a bit sloppy of a solution in\n>    the PaymentDetails portion of the PaymentRequest.\n>\n> This is only an issue because of the way you define the hashing mechanism.\nIf you reuse the backwards compatibility address, then the payment_url can\nof course be customised based on whatever transport mechanism the request\nwas fetched over. There is no longer any need to have the payment request\nbe created (and presumably stored) the moment the QR code is generated.\nBesides, that approach has all kinds of messy implementation problems. You\ndon't know the QR code will *ever* be scanned, but you must have the exact\npayment request at the time the QR code is generated. Payment requests\nexpire, so you have to define some kind of timeout at which point the QR\ncode itself becomes invalid. Urgh.\n\nMuch better to have the PaymentRequest formatted and signed on demand, once\nthe URI is being resolved. But that means you have to abandon the h=\nmechanism.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/d16a06b2/attachment.html>"
            },
            {
                "author": "Andy Schroder",
                "date": "2014-10-20T15:12:08",
                "message_text_only": "Hello Mike,\n\nThanks for the feedback. I have indicated some replies below...\n\nAndy Schroder\n\nOn 10/20/2014 08:50 AM, Mike Hearn wrote:\n> Hey Andy,\n>\n> Thanks for starting this discussion!\n>\n> One thing this brings up is the never-resolved issue of whether BIPs \n> should document how we'd /like/ things to work, or how things \n> /actually do/ work. BIP32 is an example of the former - it was new \n> technology and the spec was finalised before any wallets actually \n> implemented it. BIP 44 is an example of the latter, it basically \n> documents how myTREZOR works and as such there was minimal or no scope \n> for changes to it. Of course both kinds of document are valuable.\n>\n> Currently these specs document how Andreas' app already works. Whilst \n> preserving compatibility with existing Android apps is surely useful, \n> having a well designed protocol is also good. The current protocol has \n> several problems. I don't know which is more important right now and \n> don't have a strong opinion on that. My gut feeling is that these \n> documents should possibly be just wiki pages on Andreas' github. Then \n> if the protocol is brought to a point where it seems pretty good, \n> maybe it can be BIPped at that point. Alternatively, if developers of \n> other wallet apps feel they'd like a BIP right now even in the current \n> state, that would be a very important data point.\n\n\nWhatever you all want to do here is fine with me. I am new to this \nprocess, so I have no preference. The payment_url portion is not \nactually part of \"Bitcoin Wallet\" yet though.\n\n\n>\n> Re: the actual specs:\n>\n>       * There may seem to be some inconsistency in the connection\n>         header messages\n>\n> IMHO we could live with that. Although Android apps are updatable, \n> perfect header format is probably not worth the inevitable hassle and \n> transition period that would result.\n\nThat's kind of what Schildbach and I were thinking so it is why we left \nthe proposed spec defined as his app currently functions.\n\n>       * The current method uses an unauthenticated bluetooth\n>         connection for bluetooth 2.1\n>\n> This on the other hand is not excellent. This is actually my fault - \n> the first Bluetooth support in Bitcoin Wallet for Android was written \n> by me in a frantic Berlin hackathon over a weekend. We barely got it \n> working at all by the end, so doing encryption/auth was out of the \n> question. Then I went back to more important tasks and what got \n> shipped was a cleaned up/robustified version of that.\n>\n> Re: hash. I'm not a fan of this approach. For one, in future there \n> might not even BE a uri involved, e.g. consider the Square style UX \n> where the merchant is broadcasting an endpoint via BLE and the phone \n> just automagically connects, sees a trusted merchant and pays. Super \n> slick, we definitely want it - but no URI. Then of course there's the \n> usual QR code size limitations.\n\n\n\"Bitcoin Wallet\" currently does a similar thing by submitting a payment \nrequest via NFC and skipping the bitcoin URI. This works just fine in \nconjunction with bitcoin: URI support. I'm not doing it this way on my \nfuel pump (still submitting a bitcoin: URI), because I don't think any \nother wallets (other than \"Bitcoin Wallet\" derivatives) support such a \nfeature and because I'm not sure if signed payment requests can be \ntransmitted over NFC well because the message may be too large when the \ncertificate chain is included.\n\nMy point is, you can have both and if you are going to it doesn't hurt \nto include the h= parameter for cases when a bitcoin: URI will still be \nused.\n\n\n>\n> Encrypting/authing the connection at the app layer does not have to be \n> difficult. What we really need/want, is a simple lightweight library \n> that does an ECDH key agreement using secp256k1, and then does \n> AES+HMAC on framed messages. Such a protocol would be useful not only \n> for this use case, but perhaps for encrypting/authing the p2p protocol \n> in future as well.\n\nI'm not a cryptography expert, but why not just wrap the bluetooth \nconnection with SSL and not reimplement ECDH? Is this hard to do with \nandroid/java?\n\n\n>\n> Once the encrypted connection is set up above the Bluetooth layer, the \n> payment protocol request can then be signed either with a regular \n> Bitcoin key that was in the Bitcoin URI as the payment address (when a \n> URI is available), thus linking the request to the URI without adding \n> any additional data by doubling up the backwards compatibility \n> support. Or if there's no URI, then of course, the payment request \n> must be PKI signed and the signed PaymentDetails structure can contain \n> a copy of the public key that was used to set up the connection, thus \n> binding the connection to a PKI identity and ensuring you're not \n> talking to a MITM.\n\nThis sounds great, but I thought it is not desired to divulge a bitcoin \npublic key until the time of signing a transaction. Isn't that the whole \npoint of having a public key hash and never reusing addresses? This \ncould be resolved by the payee immediately sending the payment to \nanother address after receiving it, but that is kind of a waste of a \ntransaction. Also, I would love a less PKI dependent way to authenticate \na transaction between the two parties, but I was trying to minimize the \ndiscussion of general payment protocol modifications in this announcement.\n\n\n>\n> I suspect that this is not anywhere near as hard to implement as one \n> might think. ECDH is not a complex protocol. You certainly don't need \n> full blown HTTPS involved.\n>\n>       * There is no acknowledgement failure message possible in the\n>         payment protocol, only an acknowledgement message or lack of\n>         acknowledgement message. This issue seems to be a concern and\n>         as a result, the memo field is used to send an \"ack\" or \"nack\"\n>         in Schildbach's wallet. Can we add a boolean status field to\n>         the payment acknowledgement message?\n>\n> Ugh. I did want a way to indicate failure when we designed BIP70, but \n> I can't remember why one wasn't included in the final spec. I think we \n> decided the containing protocol could do this instead (normally HTTP).\n>\n> Abusing the memo field is definitely the wrong thing to do! Rather the \n> Bluetooth specific encapsulation protocol should have a notion of failure.\n\nWe can do something like this, I guess. The issue I mentioned about the \nmessage headers being inconsistent will have to be fixed though to to do \nthis. However, is anyone even using the HTTP base failure signal (I \ndon't even know what it is)? What about when new protocols other than \nbluetooth are created? I'm just wondering if it's better to have more \nfunctionality defined at the payment protocol level so that developers \nhave to learn less nuances about each particular protocol they are \nimplementing the payment protocol over. The other thing is what if you \nwant to indicate a failure, and a reason for that failure?\n\n\n>       * I'd personally like a new optional boolean field added to the\n>         \"PaymentDetails\" portion of the \"PaymentRequest\" to allow for\n>         the payer's wallet to match the \"Output\" optional \"amount\"\n>         fields as a total amount of all Outputs, rather than requiring\n>         the amount for each output to be matched exactly.\n>\n> Extending BIP70 with more negotiable privacy features is a different \n> effort, let's not discuss that as part of Bluetooth support.\n\nUnderstood, I was just throwing this thought out there, but do realize \nit is a separate discussion.\n\n>\n> Besides, no wallet uses even the existing support for merge avoidance \n> in BIP70. In fact Andreas' wallet is one of the blocking factors here \n> because it violates the specs by requiring the BIP70 request to have \n> only a single output that matches the address specified in the URI. \n> All because he doesn't trust HTTPS :(\n\nTo be clear, the way I am currently implementing my fuel pump, I am \nspecifying 4 payment addresses with no amount requirement and a h= \nparameter, and Schildbach's wallet does accept the payment request, but \nonly chooses to use the first payment address (this may have something \nto do with the unspent outputs on my phone though). I believe \nSchildbach's wallet still works if multiple addresses are defined and \nmultiple amounts, however, I'm not currently submitting payment requests \nthis way because of the merge avoidance constraints mentioned below.\n\nI don't trust HTTPS for a number of reasons. First off, it is way to \neasy to get a signed certificate with no real validation by the \ncertificate signer. Second, the current PKI is a target for manipulation \nby surveillance organizations because there are too few parties \ninvolved. Third, even if you have a signed certificate that is really \nowned by the person they say it is, it's not easy for a payer to quickly \nverify the signer is really the correct one because retailers can \ncontract out their payment process to another party, have a central \noffice, subsidiary, or be doing business under a name that is not \nnecessarily their legal company name. Even if we replace the PKI with \nsomething more distributed like namecoin, the third option is still \ngoing to be an issue, which warrants the need for the h= parameter.\n\n\n\n>\n> I don't think adding even more privacy stuff to BIP70 makes any sense \n> until we have implementations that actually exploit the existing \n> support. And to get there, we must fix Andreas' wallet so it doesn't \n> violate the specs anymore. Sorry Andreas. I know we argue about this \n> all the time, but it's really a big problem that your app doesn't obey \n> the specs. It makes everyone reluctant to use new BIP70 features, \n> because they feel a need to test with every possible wallet app in \n> case one of them has simply decided to do their own thing and become \n> deliberately incompatible. And then why bother, there are more \n> important things to do.\n\n\nI don't totally understand the background of what you are talking about \nhere, but I think the h= parameter may designed to address the issues \nSchildbach has complying with the spec as you mention.\n\n\n>       * Amount of data stored in QR codes may be getting large when a\n>         backwards compatible URL is used (for wallets that don't\n>         support the payment protocol) and can be difficult to scan\n>         with outdoor screens that have an extra weather resistant pane\n>         when in direct sunlight.\n>\n> MAC addresses could be encoded more efficiently, of course, but it \n> seems unlikely that address-less URIs can be relied upon any time soon \n> - and besides if the URI needs to bind to an authenticated channel \n> because PKI signing is not in use, then it makes sense to use that \n> part of the URI to do so.\n\n\nPKI is not in use for \"Bitcoin Wallet\" for providing payment request, \nbut it is in use in my fuel dispenser that was demonstrated in the \nvideo. Actually, I should have clarified in my announcement that \n\"Bitcoin Wallet\" only allows for bluetooth incoming connections for \nsubmitting payment, not providing payment requests. Since the payment \nrequest is unsigned and small, it can just be submitted via NFC (as I \nhave mentioned above), and bluetooth isn't really needed. Andreas does \nhave a branch that supports this but it is not included in the master \ndistribution branch. The primary reason he does not have this in the \nmaster branch is because the payment protocol only supports signing of \npayment requests via PKI, and it is difficult for a user to install a \nPKI signed certificate on android, just for a single peer to peer use \ncase. I think for now he just uses that branch to test his functionality \nfor fetching bluetooth payment requests from devices like mine (although \nI'm not aware of any other devices that actually exist right now).\n\n\n\n\n\n>       * The number of offline transactions of a wallet is limited to\n>         the known unspent outputs when they go offline. Long term, I'd\n>         like to see wallet devices that can use systems such as\n>         Kryptoradio's DVB-T based broadcast (but this will need yet\n>         another radio!).\n>\n> Given that all interesting mobile devices have sophisticated internet \n> access radios of various forms, I doubt it's worth putting much effort \n> in here. Bluetooth for submitting payments makes sense some of the \n> time, partly for performance and partly because it's more \n> decentralised than looping in an intermediary HTTPS server to \n> temporarily host a BIP70 request file. I don't think we should try and \n> invent an entirely new \"block chain internet\" though. At any rate, \n> it's a separate effort.\n\nIt is a separate effort, but I was mentioning it because it is related. \nYour comment \"Given that all interesting mobile devices have \nsophisticated internet access radios of various forms, I doubt it's \nworth putting much effort in here\" makes me believe that you don't \nunderstand the need for this. If you are to provide a full fledged wifi \nconnection to the customer, there would then have to be a very \nsophisticated proxy server that can allow only access to bitcoin nodes, \nand how to do that would be difficult since every node doesn't know all \nof the nodes in the network. You'd also have to be able to make the \ncustomer's phone automatically connect and disconnect from this service \nwithout leaving a saved access point name in their wifi access point \nlist (otherwise you will have a bunch of them accumulate that you don't \ncare about). Having dedicated blockchain access is going to be a \nnecessity: everyone doesn't want a cellular internet plan, they can't \nalways afford it, and it isn't always available, and as I just \nexplained, wifi is currently a cumbersome solution to this problem.\n\n>       * The additional payment_url approach is a bit sloppy of a\n>         solution in the PaymentDetails portion of the PaymentRequest.\n>\n> This is only an issue because of the way you define the hashing \n> mechanism. If you reuse the backwards compatibility address, then the \n> payment_url can of course be customised based on whatever transport \n> mechanism the request was fetched over. There is no longer any need to \n> have the payment request be created (and presumably stored) the moment \n> the QR code is generated. Besides, that approach has all kinds of \n> messy implementation problems. You don't know the QR code will \n> /ever/ be scanned, but you must have the exact payment request at the \n> time the QR code is generated. Payment requests expire, so you have to \n> define some kind of timeout at which point the QR code itself becomes \n> invalid. Urgh.\n>\n> Much better to have the PaymentRequest formatted and signed on demand, \n> once the URI is being resolved. But that means you have to abandon the \n> h= mechanism.\n\n\nAll this was already known but was not proposed because it does not \nallow you to use the h= parameter. What do you propose to do instead of \nthe h= parameter, but still allow for a trust anchor with the payee \nstill be maintained? Another option is to do the hashing to the payment \nrequest before the payment_url is added to the payment request, however, \nthis then can allow a hacker to change the payment_url.\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/f62cff17/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/f62cff17/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-20T16:29:19",
                "message_text_only": ">\n> I'm not a cryptography expert, but why not just wrap the bluetooth\n> connection with SSL and not reimplement ECDH? Is this\n>\nhard to do with android/java?\n>\n\nNot at all, it should be very easy in Java because of how the SSL API is\ndesigned. I'd worry more about non-Java platforms.\n\nHowever, SSL is extremely large, old and complicated. We use it on the web\nbecause of a mix of its feature set and legacy concerns. When discussing\nencrypted connections in the past, there has been a desire to avoid SSL\nbecause of these issues and do something much simpler and home grown. Of\ncourse, part of the reason SSL is so convoluted is because cryptography\nevolves over time, and thus it's not 100% clear to me that a simple\nhome-rolled crypto link would avoid falling into the same traps as SSL\neventually.\n\nBut, at least for now, it's probably more secure and more robust to not use\nSSL.\n\n\n> This sounds great, but I thought it is not desired to divulge a bitcoin\n> public key until the time of signing a transaction. Isn't that the whole\n> point of having a public key hash and never reusing addresses?\n>\n\nEh, no. Satoshi originally introduced key hashing simply to make shorter\nand easier to type destinations. Actually he envisioned most payments being\nrouted by IP address, where Bitcoin would just connect to the other node\nand request a public key directly. There's no problem with the sender\nknowing the public key of the address included in the URI.\n\n\n> This could be resolved by the payee immediately sending the payment to\n> another address after receiving it, but that is kind of a waste of a\n> transaction. Also, I would love a less PKI dependent way to authenticate a\n> transaction between the two parties, but I was trying to minimize the\n> discussion of general payment protocol modifications in this announcement.\n>\n\nAlternative PKIs would be a topic for another thread, indeed. But I doubt\nyou will get anywhere. There are no usable alternatives to the SSL PKI. I\nwrote an article on the topic here, you may find it useful:\n\nhttps://medium.com/@octskyward/why-you-think-the-pki-sucks-b64cf5912aa7\n\nIt summarises why BIP70 uses the PKI.\n\n\n> We can do something like this, I guess. The issue I mentioned about the\n> message headers being inconsistent will have to be fixed though to to do\n> this. However, is anyone even using the HTTP base failure signal (I don't\n> even know what it is)?\n>\n\nIt's \"Respond with 500 Internal Server Error\" pretty much.\n\nOriginally the idea of BIP70 was that clients would not broadcast\ntransactions. They would submit them to the merchant for broadcast. If the\nmerchant didn't like the payment for some reason (e.g. paying with a non\nstandard transaction or with lots of dust), they could just return an error.\n\nUnfortunately Bitcoin Core does broadcast transactions simultaneously.\nAdditionally, whilst other wallets  did not, one major payment processor\nhad a very unreliable BIP70 payment_url endpoint for a while, whilst\nbroadcasting a tx via the p2p network was fully functioning. So to work\naround bugs in this one payment processor some other wallets have started\nbroadcasting the payment tx simultaneously as well.\n\nThis means a receiver cannot meaningfully reject a payment. Some wallets\nwill send it anyway, via the p2p network.\n\n\n> and a h= parameter, and Schildbach's wallet does accept the payment request\n>\n\nI suspect it won't work if you leave out the non-standard h= parameter.\n\nWRT the merge avoidance - there's an article here on how it's meant to work:\n\nhttps://medium.com/@octskyward/merge-avoidance-7f95a386692f\n\nIt's totally OK for you to specify the amounts you want to avoid merges in\nyour own wallet. The sending wallet could (but none do today) then pay with\nmultiple transactions.\n\nYour case is really weird because you aren't actually requesting a specific\namout of money. I recall that there's some reason for this, from your\nvideo, but suddenly it escapes me. Because the user scans the payment\nrequest before pumping?\n\n\n> I don't trust HTTPS for a number of reasons.\n>\n\nI disagree with all your reasons (e.g. there is nothing wrong with\noutsourcing payment processing and it doesn't have to imply the user sees\nan incorrect name), and I believe you should trust the PKI a lot more than\nyou do. If you try and build a better replacement, I think you'll discover\nit's a lot harder than you imagine.\n\nRegardless, I am not against an *optional* tighter binding between URI and\npayment request, mostly because it's useful for the cases where signing\nwith a cert isn't possible. But the simple/obvious \"embed a hash of it in\nthe URI\" is inefficient, not compatible with the current specs, can make QR\ncodes harder to scan, and forces you to format your payment request up\nfront rather than generating it on demand.\n\n\n> The primary reason he does not have this in the master branch is because\n> the payment protocol only supports signing of payment requests via PKI, and\n> it is difficult for a user to install a PKI signed certificate on android,\n> just for a single peer to peer use case.\n>\n\nUnsigned requests work OK for the phone to phone case, assuming you aren't\nactually talking to an imposter.\n\n\n> If you are to provide a full fledged wifi connection to the customer,\n> there would then have to be a very sophisticated proxy server that can\n> allow only access to bitcoin nodes, and how to do that would be difficult\n> since every node doesn't know all of the nodes in the network.\n>\n\nYou can just allow port 8333 and rewrite port 80, as most wifi hotspots do\ntoday already.\n\nBut my point about this was that all smartphones get internet access from\ntime to time. In my own life, I've definitely been in cases where I wanted\nto *pay* with bitcoins but didn't have good internet access at that exact\nmoment, e.g. back of a restaurant. I've also been in the situation more\nrarely where I wanted to receive coins from someone in front of me, without\ngood internet access, but Bluetooth already addresses that.\n\nI don't recall ever being in a situation where I had no internet access,\nbut somehow knew there was a payment waiting for me on the block chain, and\nI needed it right now because it was necessary for me to receive that money\nin order to pay a bill. That's what the dedicated blockchain radio would\nprovide, but it seems like a very rare use case.\n\n\n> All this was already known but was not proposed because it does not allow\n> you to use the h= parameter. What do you propose to do instead of the h=\n> parameter, but still allow for a trust anchor with the payee still be\n> maintained?\n>\n\nI think I said already, but maybe am not explaining well. You use the\naddress that's already in all backwards compatible URIs. The payment\ndetails can be additionally signed with the key corresponding to that\naddress. Or, that key can be covered by the PKI signature if there is one.\nBut dual signing is always possible.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/8c413bd8/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-10-22T16:01:57",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 10/20/2014 12:50 PM, Mike Hearn wrote:\n> One thing this brings up is the never-resolved issue of whether\n> BIPs should document how we'd *like* things to work, or how things\n> *actually do* work. BIP32 is an example of the former - it was new\n> technology and the spec was finalised before any wallets actually\n> implemented it. BIP 44 is an example of the latter, it basically\n> documents how myTREZOR works and as such there was minimal or no\n> scope for changes to it. Of course both kinds of document are\n> valuable.\n\nYou also have things like BIP43 that encourage people to reserve BIP\nnumbers to avoid namespace collisions even if their work does not\naffect any other project.\n\nThere should be an efficient process for informational BIPs of this type.\n\n- -- \nJustus Ranvier                   | Monetas <http://monetas.net/>\n<mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n                                 | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJUR9T1AAoJEMP3uyY4RQ21ADgH/0JUnkrAzKiBrtFcoXNTEkNl\n7npCPY90zQDXk0RN0sV49ralMg/j71azHKmdeH3XHPF2BG3mC4+7TejhJkDEoCoB\nfzVyQ/a7MSz3Hnxh0iwx/4p+8A3v6oI6h3yDJeCrwdMudGYA2OfyQuFdrSuchHp6\nj0yJpdxxEwtc9A/7SKk5R7yrLqeeLs4OCk2Ep8mZfCQyWssXvlJzd0IDvYZiUHrM\njwLgDCAUNIotEqF4sPzxUMCUkQH3okeVhND/WvoDh8EIrE6l48I19CfDax3gJUU+\n4eI5Ooba3SRu5a8cf3V/lgtdbpJJ4i1UdpcjeWNAz1w/P1NVrWN4uJgzUilh6zU=\n=OWdW\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14542 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141022/b7b1a4d0/attachment.bin>"
            }
        ],
        "thread_summary": {
            "title": "Two Proposed BIPs - Bluetooth Communication and bitcoin: URI Scheme Improvements",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Andy Schroder",
                "Justus Ranvier"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 41458
        }
    },
    {
        "title": "[Bitcoin-development] About watch-only addresses",
        "thread_messages": [
            {
                "author": "Flavien Charlon",
                "date": "2014-10-17T20:36:04",
                "message_text_only": "Hi,\n\nWhat is the status of watch-only addresses in Bitcoin Core? Is it merged in\nmaster and usable? Is there documentation on how to add a watch-only\naddress through RPC.\n\nAlso, I believe that is going towards the 0.10 release, is there a\nrough ETA for a release candidate?\n\nThanks\nFlavien\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141017/3fced468/attachment.html>"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-10-18T09:44:10",
                "message_text_only": "Also, I was wondering if there were nightly builds I could try this from?\n\nOn Fri, Oct 17, 2014 at 9:36 PM, Flavien Charlon <\nflavien.charlon at coinprism.com> wrote:\n\n> Hi,\n>\n> What is the status of watch-only addresses in Bitcoin Core? Is it merged\n> in master and usable? Is there documentation on how to add a watch-only\n> address through RPC.\n>\n> Also, I believe that is going towards the 0.10 release, is there a\n> rough ETA for a release candidate?\n>\n> Thanks\n> Flavien\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141018/7584839b/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-18T10:13:28",
                "message_text_only": "On Fri, Oct 17, 2014 at 10:36 PM, Flavien Charlon\n<flavien.charlon at coinprism.com> wrote:\n> Hi,\n>\n> What is the status of watch-only addresses in Bitcoin Core? Is it merged in\n> master and usable? Is there documentation on how to add a watch-only address\n> through RPC.\n\nIt has been merged. There is the \"importaddress\" RPC call, which works\nthe same as \"importprivkey\" except that you a pass it an address.\n\n> Also, I believe that is going towards the 0.10 release, is there a rough ETA\n> for a release candidate?\n\nYes - aim is in a few months, probably by the end of the year.\n\nAFAIK there are no nightly builds at this moment. Warren Togami was\nbuilding them for a while (at http://nightly.bitcoin.it/) but he\nstopped some time around June.\n\nIt's not recommended to use master without at least a little bit of\ndevelopment/debugging experience of yourself (to trace down problems\nwhen they appear), so it's best to build it yourself if you're going\nto test day-to-day development versions.\n\nWladimir"
            },
            {
                "author": "Felipe Micaroni Lalli",
                "date": "2014-10-18T18:43:08",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nThis feature makes possible Bitcoin Core to read a balance of any\npublic address via RPC call or, after importing the balance, it became\navailable only via QT interface?\n\nOn 18-10-2014 07:13, Wladimir wrote:\n> On Fri, Oct 17, 2014 at 10:36 PM, Flavien Charlon \n> <flavien.charlon at coinprism.com> wrote:\n>> Hi,\n>> \n>> What is the status of watch-only addresses in Bitcoin Core? Is it\n>> merged in master and usable? Is there documentation on how to add\n>> a watch-only address through RPC.\n> \n> It has been merged. There is the \"importaddress\" RPC call, which\n> works the same as \"importprivkey\" except that you a pass it an\n> address.\n> \n>> Also, I believe that is going towards the 0.10 release, is there\n>> a rough ETA for a release candidate?\n> \n> Yes - aim is in a few months, probably by the end of the year.\n> \n> AFAIK there are no nightly builds at this moment. Warren Togami\n> was building them for a while (at http://nightly.bitcoin.it/) but\n> he stopped some time around June.\n> \n> It's not recommended to use master without at least a little bit\n> of development/debugging experience of yourself (to trace down\n> problems when they appear), so it's best to build it yourself if\n> you're going to test day-to-day development versions.\n> \n> Wladimir\n> \n> ------------------------------------------------------------------------------\n>\n> \nComprehensive Server Monitoring with Site24x7.\n> Monitor 10 servers for $9/Month. Get alerted through email, SMS,\n> voice calls or mobile push notifications. Take corrective actions\n> from your mobile device. http://p.sf.net/sfu/Zoho \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \nFelipe Micaroni Lalli\n\nWalltime: https://walltime.info\nBitcoin Paranoid Android developer\nPGP ID: 0x4c0afccfed5cde14\nBTC: 1LipeR1AjHL6gwE7WQECW4a2H4tuqm768N\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQIcBAEBAgAGBQJUQrS8AAoJEEwK/M/tXN4UcsgQAMKyKFO2EcJ1+Ib08c5dJAft\nVGNzf9c7TQtv/wfTWwqfD0QlkZ0jYqgoEJIflYJi7DhqFARQg2nTJIDoKAyDypaH\n0x7ckt0G4Fp4Dq9GQAqyJq+5NFTO+S4LpnhzMGDLE6PZNOeoDRYf8GbuzNjCAU6s\nhuB9OhvXa4XZ2azsFnAhx3CcM98jTcbm0SLctqlTcHr//FMjEJioDFZATutlu8be\n/PIhQ6OkfjBSeZv7A4lwgd0vbGJ8ioEkLMmjzYgfeaZG5KxOJXXzX9nDysAw7O3U\njXE/zpm9pFqZ9uhgdG1gzTBoROn49xZmycA82NbTn8/+mLrK7WYFei3Th5V0G1DG\nhUI0vEb8g6id+y3w0HWnYqquFZBFOLNfs7ONsKdqvMj+ci2+IavAU7SY51BQcEwm\nGW6d24Fd9/zhliEmFzq61xvOj5Rgcj7piGH/qMtGKYececS0tFMxQ4IDH+bkxKhr\nlZ00Zk0K4bTCq3cASjP9L9AgV3zmTOUfe9RMtIHTJq79TIDPbBCsz2PrbtAcgWGZ\nvb/08asgPC2FZHKOWf1TGiDr34JlBPhNKVKfiDuxbGqLGjlhYrdqkl1CrVqJP7dW\ndxvEkwittodLc5MnVdS7QIHfjXJ/UEbyINIe7zrX/7w3pf0aLAX0KaxpDpfBessD\nNf2y99ZocpddQu0/EDJl\n=Ctf/\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-20T10:56:15",
                "message_text_only": ">\n> This feature makes possible Bitcoin Core to read a balance of any\n> public address via RPC call or, after importing the balance, it became\n> available only via QT interface?\n\n\nNeither. A watching wallet still has to be synced with the chain in the\nsame way as any other wallet, i.e. after adding an address, if it was\nalready used, you must rescan.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/f2f3a526/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2014-10-20T22:37:40",
                "message_text_only": "https://bitcointalk.org/index.php?topic=320695\nI made a branch of Bitcoin 0.9.3 plus backports including watch-only and a\nhuge pile of patches cleaning it up from the master branch.  It seems to\nwork fine although it is not heavily tested.  I suppose if you use ONLY for\nwatch-only it can't be harmful?  Dunno.\n\nWarren\n\nOn Sat, Oct 18, 2014 at 12:13 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> On Fri, Oct 17, 2014 at 10:36 PM, Flavien Charlon\n> <flavien.charlon at coinprism.com> wrote:\n> > Hi,\n> >\n> > What is the status of watch-only addresses in Bitcoin Core? Is it merged\n> in\n> > master and usable? Is there documentation on how to add a watch-only\n> address\n> > through RPC.\n>\n> It has been merged. There is the \"importaddress\" RPC call, which works\n> the same as \"importprivkey\" except that you a pass it an address.\n>\n> > Also, I believe that is going towards the 0.10 release, is there a rough\n> ETA\n> > for a release candidate?\n>\n> Yes - aim is in a few months, probably by the end of the year.\n>\n> AFAIK there are no nightly builds at this moment. Warren Togami was\n> building them for a while (at http://nightly.bitcoin.it/) but he\n> stopped some time around June.\n>\n> It's not recommended to use master without at least a little bit of\n> development/debugging experience of yourself (to trace down problems\n> when they appear), so it's best to build it yourself if you're going\n> to test day-to-day development versions.\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> Comprehensive Server Monitoring with Site24x7.\n> Monitor 10 servers for $9/Month.\n> Get alerted through email, SMS, voice calls or mobile push notifications.\n> Take corrective actions from your mobile device.\n> http://p.sf.net/sfu/Zoho\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141020/4fef8329/attachment.html>"
            },
            {
                "author": "mbde at bitwatch.co",
                "date": "2014-10-20T23:06:36",
                "message_text_only": "This is just a guess, but I can imagine sipa's address index branch\nmight be more suitable for an use case where information about any\naddress is required - jmcorgan continued to maintain a usually somewhat\nup-to-date version:\n\nhttps://github.com/jmcorgan/bitcoin/tree/addrindex\n\nAs for balance queries, that's not possible out of the box and I have my\nown branch for this with a few other RPC calls that are noted in the README:\n\nhttps://github.com/dexX7/bitcoin/tree/master-addrindex-extended\n\nWhen using the original, you need to ensure a transaction is part of the\nmain chain and wasn't orphaned. If you consider using my branch, please\nconsider it twice and review the changes first.\n\n-------- Original Message --------\n*Subject: *Re: [Bitcoin-development] About watch-only addresses\n*From: *Warren Togami Jr. <wtogami at gmail.com>\n*To: *Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\n*Date: *Mon, 20 Oct 2014 12:37:40 -1000\n> https://bitcointalk.org/index.php?topic=320695\n> I made a branch of Bitcoin 0.9.3 plus backports including watch-only\n> and a huge pile of patches cleaning it up from the master branch.  It\n> seems to work fine although it is not heavily tested.  I suppose if\n> you use ONLY for watch-only it can't be harmful?  Dunno.\n>\n> Warren\n>\n> On Sat, Oct 18, 2014 at 12:13 AM, Wladimir <laanwj at gmail.com\n> <mailto:laanwj at gmail.com>> wrote:\n>\n>     On Fri, Oct 17, 2014 at 10:36 PM, Flavien Charlon\n>     <flavien.charlon at coinprism.com\n>     <mailto:flavien.charlon at coinprism.com>> wrote:\n>     > Hi,\n>     >\n>     > What is the status of watch-only addresses in Bitcoin Core? Is\n>     it merged in\n>     > master and usable? Is there documentation on how to add a\n>     watch-only address\n>     > through RPC.\n>\n>     It has been merged. There is the \"importaddress\" RPC call, which works\n>     the same as \"importprivkey\" except that you a pass it an address.\n>\n>     > Also, I believe that is going towards the 0.10 release, is there\n>     a rough ETA\n>     > for a release candidate?\n>\n>     Yes - aim is in a few months, probably by the end of the year.\n>\n>     AFAIK there are no nightly builds at this moment. Warren Togami was\n>     building them for a while (at http://nightly.bitcoin.it/) but he\n>     stopped some time around June.\n>\n>     It's not recommended to use master without at least a little bit of\n>     development/debugging experience of yourself (to trace down problems\n>     when they appear), so it's best to build it yourself if you're going\n>     to test day-to-day development versions.\n>\n>     Wladimir\n>\n>     ------------------------------------------------------------------------------\n>     Comprehensive Server Monitoring with Site24x7.\n>     Monitor 10 servers for $9/Month.\n>     Get alerted through email, SMS, voice calls or mobile push\n>     notifications.\n>     Take corrective actions from your mobile device.\n>     http://p.sf.net/sfu/Zoho\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Comprehensive Server Monitoring with Site24x7.\n> Monitor 10 servers for $9/Month.\n> Get alerted through email, SMS, voice calls or mobile push notifications.\n> Take corrective actions from your mobile device.\n> http://p.sf.net/sfu/Zoho\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141021/135f5891/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "About watch-only addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Felipe Micaroni Lalli",
                "Wladimir",
                "Warren Togami Jr.",
                "Mike Hearn",
                "mbde at bitwatch.co",
                "Flavien Charlon"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 11578
        }
    },
    {
        "title": "[Bitcoin-development] Proposal for extra nonce in block header",
        "thread_messages": [
            {
                "author": "Timo Hanke",
                "date": "2014-10-18T18:25:59",
                "message_text_only": "Greg,\n\nI'd like to ask you to assign a BIP number to this proposal and open\nanother round of discussion.\n\nThere is now a reference implementation available as pull request #5102\n(https://github.com/bitcoin/bitcoin/pull/5102).\n\nIt introduces a new version number (3) to properly distinguish the\ninterpretation of the version number and allow for a clean upgrade\nprocess.\n\nUnittests are included.\n\nThe updated BIP draft in .mediawiki format is available here:\nhttps://github.com/BlockheaderNonce2/bitoin/wiki\n\nThanks,\nTimo\n\nOn Sun, May 04, 2014 at 05:26:06PM +0200, Mike Hearn wrote:\n> Although I agree 32 bits for a version is overkill, I really don't like the\n> idea of you simply ignoring the protocol spec to try and reduce your own costs.\n> Especially because in future we should make unknown versions a validation rule,\n> so we can easily trigger hard forks.\n> \n> If this change was introduced through a proper process and software was\n> properly upgraded to understand the new header format, that'd be one thing.\n> Arbitrarily exploiting what is IMHO a missing rule in the rule set to shave a\n> bit more profit is something else.\n> \n> \n> On Sun, May 4, 2014 at 5:14 PM, Timo Hanke <timo.hanke at web.de> wrote:\n> \n>     > If changing the structure of the block header, wouldnt you also need to\n>     > increment the version number to 3?\n> \n>     No, in this case I don't think so. Incrementing the version number has\n>     two purposes:\n> \n>     1. inform old clients that something new is going on\n>     2. be able to phase out old version numbers and block them once the new\n>     version number becomes a supermajority.\n> \n>     None of these two is necessary here. Old clients already recognize the\n>     new block headers as something new because they look like very high\n>     version numbers to them. And there is no reason to ever phase out blocks\n>     that have zero in the MSBs of the version.\n> \n>     On Sun, Apr 27, 2014 at 10:17:11AM +0200, Melvin Carvalho wrote:\n>     > On 27 April 2014 09:07, Timo Hanke <timo.hanke at web.de> wrote:\n>     >\n>     > \u00a0 \u00a0 I'd like to put the following draft of a BIP up for discussion.\n>     >\n>     > \u00a0 \u00a0 Timo\n>     >\n>     > \u00a0 \u00a0 # Abstract\n>     > \u00a0 \u00a0 There are incentives for miners to find cheap, non-standard ways to\n>     > \u00a0 \u00a0 generate new work, which are not necessarily in the best interest of\n>     the\n>     > \u00a0 \u00a0 protocol.\n>     > \u00a0 \u00a0 In order to reduce these incentives this proposal re-assigns 2 bytes\n>     from\n>     > \u00a0 \u00a0 the version field of the block header to a new extra nonce field.\n>     > \u00a0 \u00a0 # Copyright\n>     > \u00a0 \u00a0 # Specification\n>     > \u00a0 \u00a0 The block version number field in the block header is reduced in size\n>     from\n>     > \u00a0 \u00a0 4 to 2 bytes.\n>     > \u00a0 \u00a0 The third and fourth byte in the block header are assigned to the new\n>     extra\n>     > \u00a0 \u00a0 nonce field inside the block header.\n>     > \u00a0 \u00a0 # Motivation\n>     > \u00a0 \u00a0 The motivation of this proposal is to provide miners with a cheap\n>     > \u00a0 \u00a0 constant-complexity method to create new work that does not require\n>     > \u00a0 \u00a0 altering the transaction tree.\n>     >\n>     > \u00a0 \u00a0 Furthermore, the motivation is to protect the version and timestamp\n>     fields\n>     > \u00a0 \u00a0 in the block header from abuse.\n>     > \u00a0 \u00a0 # Rationale\n>     > \u00a0 \u00a0 Traditionally, the extra nonce is part of the coinbase field of the\n>     > \u00a0 \u00a0 generation transaction, which is always the very first transaction of\n>     a\n>     > \u00a0 \u00a0 block.\n>     > \u00a0 \u00a0 After incrementing the extra nonce the minimum amount of work a miner\n>     has\n>     > \u00a0 \u00a0 to do to re-calculate the block header is a) to hash the coinbase\n>     > \u00a0 \u00a0 transaction and b) to re-calculate the left-most branch of the merkle\n>     tree\n>     > \u00a0 \u00a0 all the way to the merkle root.\n>     > \u00a0 \u00a0 This is necessary overhead a miner has to do besides hashing the\n>     block\n>     > \u00a0 \u00a0 header itself.\n>     > \u00a0 \u00a0 We shall call the process that leads to a new block header from the\n>     same\n>     > \u00a0 \u00a0 transaction set the _pre-hashing_.\n>     >\n>     > \u00a0 \u00a0 First it should be noted that the relative cost of pre-hashing in its\n>     > \u00a0 \u00a0 traditional form depends\n>     > \u00a0 \u00a0 on the block size, which may create an unwanted incentive for miners\n>     > \u00a0 \u00a0 to keep the block size small. However, this is not the main\n>     motivation for\n>     > \u00a0 \u00a0 the current proposal.\n>     >\n>     > \u00a0 \u00a0 While the block header is hashed by ASICs, pre-hashing typically\n>     happens on\n>     > \u00a0 \u00a0 a CPU because of the greater flexibility required.\n>     > \u00a0 \u00a0 Consequently, as ASIC cost per hash performance drops the relative\n>     cost of\n>     > \u00a0 \u00a0 pre-hashing increases.\n>     >\n>     > \u00a0 \u00a0 This creates an incentive for miners to find cheaper ways to create\n>     new\n>     > \u00a0 \u00a0 work than by means of pre-hashing.\n>     > \u00a0 \u00a0 An example of this currently happening is the on-device rolling of\n>     the\n>     > \u00a0 \u00a0 timestamp into the future.\n>     > \u00a0 \u00a0 These ways of creating new work are unlikely to be in the best\n>     interest of\n>     > \u00a0 \u00a0 the protocol.\n>     > \u00a0 \u00a0 For example, rolling the timestamp faster than the real time is\n>     unwanted\n>     > \u00a0 \u00a0 (more so on faster blockchains).\n>     >\n>     > \u00a0 \u00a0 The version number in the block header is a possible target for\n>     alteration\n>     > \u00a0 \u00a0 with the goal of cheaply creating new work.\n>     > \u00a0 \u00a0 Currently, blocks with arbitrarily large version numbers get relayed\n>     and\n>     > \u00a0 \u00a0 accepted by the network.\n>     > \u00a0 \u00a0 As this is unwanted behaviour, there should not exist any incentive\n>     for a\n>     > \u00a0 \u00a0 miner to abuse the version number in this way.\n>     >\n>     > \u00a0 \u00a0 The solution is to reduce the range of version numbers from 2^32 to 2\n>     ^16\n>     > \u00a0 \u00a0 and to declare the third and forth bytes of the block header as\n>     legitimate\n>     > \u00a0 \u00a0 space for an extra nonce.\n>     > \u00a0 \u00a0 This will reduce the incentive for a miner to abuse the shortened\n>     version\n>     > \u00a0 \u00a0 number by a factor in the order of 2^16.\n>     >\n>     > \u00a0 \u00a0 As a side effect, this proposal greatly reduces the bandwidth\n>     requirements\n>     > \u00a0 \u00a0 of a blind pool protocol by only submitting the block header to the\n>     miner.\n>     > \u00a0 \u00a0 # Backwards Compatibility\n>     > \u00a0 \u00a0 Old versions of the client will accept blocks of this kind but will\n>     throw\n>     > \u00a0 \u00a0 an alert at the user to upgrade.\n>     > \u00a0 \u00a0 The only code change would be a cast of the version number to a\n>     short.\n>     > \u00a0 \u00a0 Besides the upgrade alert, old and new versions of the client can\n>     co-exist\n>     > \u00a0 \u00a0 and there is no need to introduce a new block version number or to\n>     > \u00a0 \u00a0 phase-out old block versions.\n>     > \u00a0 \u00a0 # Reference Implementation\n>     > \u00a0 \u00a0 # Final implementation\n>     >\n>     >\n>     > If changing the structure of the block header, wouldnt you also need to\n>     > increment the version number to 3?\n> \n>     ------------------------------------------------------------------------------\n>     \"Accelerate Dev Cycles with Automated Cross-Browser Testing - For FREE\n>     Instantly run your Selenium tests across 300+ browser/OS combos. \u00a0Get\n>     unparalleled scalability from the best Selenium testing platform available.\n>     Simple to use. Nothing to install. Get started now for free.\"\n>     http://p.sf.net/sfu/SauceLabs\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n\n-- \nTimo Hanke\nPGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            }
        ],
        "thread_summary": {
            "title": "Proposal for extra nonce in block header",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Timo Hanke"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 7590
        }
    },
    {
        "title": "[Bitcoin-development] cryptographic review requested",
        "thread_messages": [
            {
                "author": "Pavol Rusnak",
                "date": "2014-10-21T20:56:18",
                "message_text_only": "On 09/23/2014 11:12 PM, Mem Wallet wrote:\n> communication. To address gmaxwell's criticism, I'd like to also\n> follow up with a proposed change to BIP44, such that a structured\n> wallet would also include a series of identity keys, both addresses\n> which will be used for signing, and public keys which would be used\n> as destinations for encrypted messages.\n\nI don't know what criticism it was, but I feel that another BIP than\nBIP44 should be created to describe which HD paths should be used for ECIES.\n\n> If anyone is familiar with ECIES and would be interested, there is a\n> working implementation at http://memwallet.info/btcmssgs.html,\n> which also includes this whitepaper:\n\nThat looks great! I already implemented Electrum's way of ECIES into\nTREZOR firmware, but yours version seems much more complete, so I am\ninclined to throw it away and use your implementation.\n\nHave you thought about pushing this as a new BIP (different one than I\nmention above)? I think it's important to have it reviewed and\nstandardized ASAP.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-10-22T08:52:01",
                "message_text_only": "On 10/22/2014 10:46 AM, Chris D'Costa wrote:\n> Looks great, but how would you resolve the problem of knowing for certain\n> that the public key you have received to encrypt the message is not from a\n> MITM?\n\nIsn't this the same problem with PGP?\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-10-22T14:56:37",
                "message_text_only": "On 09/23/2014 11:12 PM, Mem Wallet wrote:\n>    - M,Sender_Address = ReceiveMessage( eM, Decrypting_Key ) It is\n>    acceptable for deterministic nonces to be used for signatures, however\n>    nonces generated for ECIES must be high quality random bytes. (excepting\n>    unit test vectors)\n\nCould you please describe what might get wrong if one uses deterministic\nnonces for ECIES as well? Thanks!\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            }
        ],
        "thread_summary": {
            "title": "cryptographic review requested",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pavol Rusnak"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 1864
        }
    },
    {
        "title": "[Bitcoin-development] side-chains & 2-way pegging (Re: is there a way to do bitcoin-staging?)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2014-10-22T21:54:35",
                "message_text_only": "For those following this thread, we have now written a paper\ndescribing the side-chains, 2-way pegs and compact SPV proofs.\n(With additional authors Andrew Poelstra & Andrew Miller).\n\nhttp://blockstream.com/sidechains.pdf\n\nAdam\n\nOn 16 March 2014 15:58, Adam Back <adam at cypherspace.org> wrote:\n> So an update on 1-way pegging (aka bitcoin staging, explained in quoted text\n> at bottom): it turns out secure 2-way pegging is also possible (with some\n> bitcoin change to help support it).  The interesting thing is this allows\n> interoperability in terms of being able to move bitcoin into and out of a\n> side chain.  The side chains may have some different parameters, or\n> experimental things people might want to come up with (subject to some\n> minimum compatibility at the level of being able to produce an SPV proof of\n> a given form).\n>\n> At the time of the 1-way peg discussion I considered 2-way peg as desirable\n> and it seemed plausible with bitcoin changes, but the motivation for 1-way\n> peg was to make it less risky to make changes on bitcoin, so that seemed\n> like a catch-22 loop.  Also in the 2-way peg thought experiment I had not\n> realized how simple it was to still impose a security firewall in the 2-way\n> peg also.\n>\n>\n> So Greg Maxwell proposed in Dec last year a practically compact way to do\n> 2-way pegging using SPV proofs.  And also provided a simple argument of how\n> this can provide a security firewall.  (Security firewall means the impact\n> of security bugs on the side-chain is limited to the people with coins in\n> it; bitcoin holders who did not use it are unaffected). [1]\n>\n> How it works:\n>\n> 1. to maintain the 21m coins promise, you start a side-chain with no\n> in-chain mining subsidy, all bitcoin creation happens on bitcoin chain (as\n> with 1-way peg).  Reach a reasonable hash rate.  (Other semantics than 1:1\n> peg should be possible, but this is the base case).\n>\n> 2. you move coins to the side-chain by spending them to a fancy script,\n> which suspends them, and allows them to be reanimated by the production of\n> an SPV proof of burn on the side-chain.\n>\n> 3. the side-chain has no mining reward, but it allows you to mint coins at\n> no mining cost by providing an SPV proof that the coin has been suspended as\n> in 2 on bitcoin.  The SPV proof must be buried significantly before being\n> used to reduce risk of reorganization.  The side-chain is an SPV client to\n> the bitcoin network, and so maintains a view of the bitcoin hash chain (but\n> not the block data).\n>\n> 4. the bitcoin chain is firewalled from security bugs on the side chain,\n> because bitcoin imposes the rule that no more coins can be reanimated than\n> are currently suspend (with respect to a given chain).\n>\n> 5. to simplify what they hypothetical bitcoin change would need to consider\n> and understand, after a coin is reanimated there is a maturity period\n> imposed (say same as fresh mined coins).  During the maturity period the\n> reanimation script allows a fraud proof to spend the coins back.  A fraud\n> bounty fee (equal to the reanimate fee) can be offered by the mover to\n> incentivize side-chain full nodes to watch reanimations and search for fraud\n> proofs.\n>\n> 6. a fraud proof is an SPV proof with a longer chain showing that the proof\n> of burn was orphaned.\n>\n> There are a few options to compress the SPV proof, via Fiat-Shamir transform\n> to provide a compact proof of amount work contained in a merkle tree of\n> proofs of work (as proposed by Fabien Coelho link on\n> http://hashcash.org/papers/) with params like 90% of work is proven.  But\n> better is something Greg proposed based on skip-lists organized in a tree,\n> where 'lucky' proofs of work are used to skip back further.  (Recalling that\n> if you search for a 64-bit leading-0 proof-of-work, half the time you get a\n> 65-bit, quarter 66-bit etc.)  With this mechanism you can accurately\n> prove the amount of proof of work in a compressed tree (rather than ~90%).\n>\n>\n> Apart from pegging from bitcoin to a side-chain, if a private chain is made\n> with same rules to the side-chain it becomes possible with some\n> modifications to the above algorithm to peg the side-chain to a private\n> chain.  Private chain meaning a chain with the same format but signature of\n> single server in place of hashing, and timestamping of the block signatures\n> in the mined side chain.  And then reactive security on top of that by full\n> nodes/auditors trying to find fraud proofs (rewrites of history relative to\n> side-chain mined time-stamp or approved double-spends).  The reaction is to\n> publish a fraud proof and move coins back to the side chain, and then\n> regroup on a new server.  (Open transactions has this audit + reactive model\n> but as far as I know does it via escrow, eg the voting pools for k of n\n> escrow of the assets on the private server.) I also proposed the same\n> reactive audit model but for auditable namespaces [4].\n>\n> Private chains add some possiblity for higher scaling, while retaining\n> bitcoin security properties.  (You need to add the ability for a user to\n> unilaterally move his coins to the side-chain they came from in event the\n> chain server refuses to process transactions involving them.  This appears\n> to be possible if you have compatible formats on the private chain and\n> side-chain).\n>\n>\n> This pegging discussion involved a number of #bitcoin-wizards, Greg Maxwell,\n> Matt Corallo, Pieter Wuille, Jorge Timon, Mark Freidenbach, Luke Dashjr. The\n> 2-way peg seems to have first been described by Greg.  Greg thought of\n> 2-way pegging in the context of ZK-SNARKS and the coinwitness thread [2].\n> (As a ZK-SNARK could compactly prove full validation of a side chain rules).\n>\n> There was also something seemingly similar sounding but not described in\n> detail by Alex Mizrahi in the context of color coins in this post [3].\n>\n> Adam\n>\n> [1] http://download.wpsoftware.net/bitcoin/wizards/2013-12-18.txt\n> [2] https://bitcointalk.org/index.php?topic=277389.40\n> [3] https://bitcointalk.org/index.php?topic=277389.msg4167554#msg4167554\n> [4] http://www.cypherspace.org/p2p/auditable-namespace.html\n>\n> On Mon, Oct 14, 2013 at 08:08:07PM +0200, Adam Back wrote:\n>>\n>> Coming back to the staging idea, maybe this is a realistic model that\n>> could\n>> work.  The objective being to provide a way for bitcoin to move to a live\n>> beta and stable being worked on in parallel like fedora vs RHEL or\n>> odd/even\n>> linux kernel versions.\n>>\n>> Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin\n>> 0.x\n>> stable and leap-frogs as beta becomes stable after testing.\n>>\n>> Its a live beta, meaning real value, real contracts.  But we dont want it\n>> to\n>> be an alt-coin with a floating value exactly, we want it to be bitcoin,\n>> but\n>> the bleeding edge bitcoin so we want to respect the 21 million coin limit,\n>> and allow coins to move between bitcoin and betacoin with some necessary\n>> security related restrictions.\n>>\n>> There is no mining reward on the betacoin network (can be merge mined for\n>> security), and the way you opt to move a bitcoin into the betacoin network\n>> is to mark it as transferred in some UTXO recognized way.  It cant be\n>> reanimated, its dead.  (eg spend to a specific recognized invalid address\n>> on\n>> the bitcoin network).  In this way its not really a destruction, but a\n>> move,\n>> moving the coin from bitcoin to betacoin network.\n>>\n>> This respects the 21 million coin cap, and avoids betacoin bugs flowing\n>> back\n>> and affecting bitcoin security or value-store properties.  Users may buy\n>> or\n>> swap betacoin for bitcoin to facilitate moving money back from betacoin to\n>> bitcoin.  However that is market priced so the bitcoin network is security\n>> insulated from beta.  A significant security bug in beta would cause a\n>> market freeze, until it is rectified.\n>>\n>> The cost of a betacoin is capped at one BTC because no one will pay more\n>> than one bitcoin for a betacoin because they could alternatively move\n>> their\n>> own coin.  The reverse is market priced.\n>>\n>> Once bitcoin beta stabalizes, eg say year or two type of time-frame, a\n>> decision is reached to promote 1.0 beta to 2.0 stable, the remaining\n>> bitcoins can be moved, and the old network switched off, with mining past\n>> a\n>> flag day moving to the betacoin.\n>>\n>> During the beta period betacoin is NOT an alpha, people can rely on it and\n>> use it in anger for real value transactions.  eg if it enables more script\n>> features, or coin coloring, scalabity tweaks etc people can use it.\n>> Probably for large value store they are always going to prefer\n>> bitcoin-stable, but applications that need the coloring features, or\n>> advanced scripting etc can go ahead and beta.\n>>\n>> Bitcoin-stable may pull validated changes and merge them, as a way to pull\n>> in any features needed in the shorter term and benefit from the betacoin\n>> validation.  (Testing isnt as much validation as real-money at stake\n>> survivability).\n>>\n>> The arguments are I think that:\n>>\n>> - it allows faster development allowing bitcoin to progress features\n>> faster,\n>>\n>> - it avoids mindshare dilution if alternatively an alt-coin with a hit\n>>  missing feature takes off;\n>>\n>> - it concentrates such useful-feature alt activities into one OPEN source\n>>  and OPEN control foundation mediated area (rather than suspected land\n>>  grabs on colored fees or such like bitcoin respun as a business model\n>>  things),\n>>\n>> - maybe gets the developers that would've been working on their pet\n>>  alt-coin, or their startup alt-coin to work together putting more\n>>  developers, testers and resources onto something with open control (open\n>>  source does not necessarily mean that much) and bitcoin mindshare\n>>  branding, its STILL bitcoin, its just the beta network.\n>>\n>> - it respects the 21 million limit, starting new mining races probably\n>>  dillutes the artificial scarcity semantic\n>>\n>> - while insulating bitcoin from betacoin security defects (I dont mean\n>>  betacoin as a testnet, it should have prudent rigorous testing like\n>>  bitcoin, just the very act of adding a feature creates risk that bitcoin\n>>  stable can be hesitant to take).\n>>\n>> Probably the main issue as always is more (trustable) very high caliber\n>> testers and developers.  Maybe if the alt-coin minded startups and\n>> developers donate their time to bitcoin-beta (or bitcoin-stable) for the\n>> bits they are missing, we'll get more hands to work on something of\n>> reusable\n>> value to humanity, in parallel with their startup's objectives and as a\n>> way\n>> for them to get their needed features, while giving back to the bitcoin\n>> community, and helping bitcoin progress faster.\n>>\n>> Maybe bitcoin foundation could ask for BTC donations to hire more\n>> developers\n>> and testers full time.  $1.5b of stored value should be interested to safe\n>> guard their value store, and develop the transaction features.\n>>\n>> Adam\n>>\n>> On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:\n>>>\n>>>  This is exactly what I was planning to do with the\n>>>  inappropriately-named \"Ultimate Blockchain Compression\".  [...]\n>>>\n>>>  For it to really work, it's gotta be part of the mainnet validation\n>>>  rules, but no way it can be evaluated realistically without some kind of\n>>>  \"staging\".\n>>\n>>\n>>>  On 5/19/2013 11:08 AM, Peter Vessenes wrote:\n>>>\n>>>  I think this is a very interesting idea. As Bitcoiners, we often stuff\n>>>  things into the 'alt chain' bucket in our heads; I wonder if this idea\n>>>  works better as a curing period, essentially an extended version of the\n>>>  current 100 block wait for mined coins."
            },
            {
                "author": "Daniel Murrell",
                "date": "2014-10-22T22:01:38",
                "message_text_only": "I've already added it here:\nhttp://www.opencryptocurrencyreview.com/papers/123/enabling-blockchain-innovations-with-pegged-sidechains\n\nI made this site to allow discussions on exactly these sorts of things\nto be publicly visible and easily discoverable in the future (this is\nwhy I replied to all).\n\nPlease let me know what you think of the site.\n\nDaniel\n\np.s. I'm not trying to monetize this site. I just tried to make\nsomething I thought could be useful.\n\nOn Wed, Oct 22, 2014 at 10:54 PM, Adam Back <adam at cypherspace.org> wrote:\n> For those following this thread, we have now written a paper\n> describing the side-chains, 2-way pegs and compact SPV proofs.\n> (With additional authors Andrew Poelstra & Andrew Miller).\n>\n> http://blockstream.com/sidechains.pdf\n>\n> Adam\n>\n> On 16 March 2014 15:58, Adam Back <adam at cypherspace.org> wrote:\n>> So an update on 1-way pegging (aka bitcoin staging, explained in quoted text\n>> at bottom): it turns out secure 2-way pegging is also possible (with some\n>> bitcoin change to help support it).  The interesting thing is this allows\n>> interoperability in terms of being able to move bitcoin into and out of a\n>> side chain.  The side chains may have some different parameters, or\n>> experimental things people might want to come up with (subject to some\n>> minimum compatibility at the level of being able to produce an SPV proof of\n>> a given form).\n>>\n>> At the time of the 1-way peg discussion I considered 2-way peg as desirable\n>> and it seemed plausible with bitcoin changes, but the motivation for 1-way\n>> peg was to make it less risky to make changes on bitcoin, so that seemed\n>> like a catch-22 loop.  Also in the 2-way peg thought experiment I had not\n>> realized how simple it was to still impose a security firewall in the 2-way\n>> peg also.\n>>\n>>\n>> So Greg Maxwell proposed in Dec last year a practically compact way to do\n>> 2-way pegging using SPV proofs.  And also provided a simple argument of how\n>> this can provide a security firewall.  (Security firewall means the impact\n>> of security bugs on the side-chain is limited to the people with coins in\n>> it; bitcoin holders who did not use it are unaffected). [1]\n>>\n>> How it works:\n>>\n>> 1. to maintain the 21m coins promise, you start a side-chain with no\n>> in-chain mining subsidy, all bitcoin creation happens on bitcoin chain (as\n>> with 1-way peg).  Reach a reasonable hash rate.  (Other semantics than 1:1\n>> peg should be possible, but this is the base case).\n>>\n>> 2. you move coins to the side-chain by spending them to a fancy script,\n>> which suspends them, and allows them to be reanimated by the production of\n>> an SPV proof of burn on the side-chain.\n>>\n>> 3. the side-chain has no mining reward, but it allows you to mint coins at\n>> no mining cost by providing an SPV proof that the coin has been suspended as\n>> in 2 on bitcoin.  The SPV proof must be buried significantly before being\n>> used to reduce risk of reorganization.  The side-chain is an SPV client to\n>> the bitcoin network, and so maintains a view of the bitcoin hash chain (but\n>> not the block data).\n>>\n>> 4. the bitcoin chain is firewalled from security bugs on the side chain,\n>> because bitcoin imposes the rule that no more coins can be reanimated than\n>> are currently suspend (with respect to a given chain).\n>>\n>> 5. to simplify what they hypothetical bitcoin change would need to consider\n>> and understand, after a coin is reanimated there is a maturity period\n>> imposed (say same as fresh mined coins).  During the maturity period the\n>> reanimation script allows a fraud proof to spend the coins back.  A fraud\n>> bounty fee (equal to the reanimate fee) can be offered by the mover to\n>> incentivize side-chain full nodes to watch reanimations and search for fraud\n>> proofs.\n>>\n>> 6. a fraud proof is an SPV proof with a longer chain showing that the proof\n>> of burn was orphaned.\n>>\n>> There are a few options to compress the SPV proof, via Fiat-Shamir transform\n>> to provide a compact proof of amount work contained in a merkle tree of\n>> proofs of work (as proposed by Fabien Coelho link on\n>> http://hashcash.org/papers/) with params like 90% of work is proven.  But\n>> better is something Greg proposed based on skip-lists organized in a tree,\n>> where 'lucky' proofs of work are used to skip back further.  (Recalling that\n>> if you search for a 64-bit leading-0 proof-of-work, half the time you get a\n>> 65-bit, quarter 66-bit etc.)  With this mechanism you can accurately\n>> prove the amount of proof of work in a compressed tree (rather than ~90%).\n>>\n>>\n>> Apart from pegging from bitcoin to a side-chain, if a private chain is made\n>> with same rules to the side-chain it becomes possible with some\n>> modifications to the above algorithm to peg the side-chain to a private\n>> chain.  Private chain meaning a chain with the same format but signature of\n>> single server in place of hashing, and timestamping of the block signatures\n>> in the mined side chain.  And then reactive security on top of that by full\n>> nodes/auditors trying to find fraud proofs (rewrites of history relative to\n>> side-chain mined time-stamp or approved double-spends).  The reaction is to\n>> publish a fraud proof and move coins back to the side chain, and then\n>> regroup on a new server.  (Open transactions has this audit + reactive model\n>> but as far as I know does it via escrow, eg the voting pools for k of n\n>> escrow of the assets on the private server.) I also proposed the same\n>> reactive audit model but for auditable namespaces [4].\n>>\n>> Private chains add some possiblity for higher scaling, while retaining\n>> bitcoin security properties.  (You need to add the ability for a user to\n>> unilaterally move his coins to the side-chain they came from in event the\n>> chain server refuses to process transactions involving them.  This appears\n>> to be possible if you have compatible formats on the private chain and\n>> side-chain).\n>>\n>>\n>> This pegging discussion involved a number of #bitcoin-wizards, Greg Maxwell,\n>> Matt Corallo, Pieter Wuille, Jorge Timon, Mark Freidenbach, Luke Dashjr. The\n>> 2-way peg seems to have first been described by Greg.  Greg thought of\n>> 2-way pegging in the context of ZK-SNARKS and the coinwitness thread [2].\n>> (As a ZK-SNARK could compactly prove full validation of a side chain rules).\n>>\n>> There was also something seemingly similar sounding but not described in\n>> detail by Alex Mizrahi in the context of color coins in this post [3].\n>>\n>> Adam\n>>\n>> [1] http://download.wpsoftware.net/bitcoin/wizards/2013-12-18.txt\n>> [2] https://bitcointalk.org/index.php?topic=277389.40\n>> [3] https://bitcointalk.org/index.php?topic=277389.msg4167554#msg4167554\n>> [4] http://www.cypherspace.org/p2p/auditable-namespace.html\n>>\n>> On Mon, Oct 14, 2013 at 08:08:07PM +0200, Adam Back wrote:\n>>>\n>>> Coming back to the staging idea, maybe this is a realistic model that\n>>> could\n>>> work.  The objective being to provide a way for bitcoin to move to a live\n>>> beta and stable being worked on in parallel like fedora vs RHEL or\n>>> odd/even\n>>> linux kernel versions.\n>>>\n>>> Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin\n>>> 0.x\n>>> stable and leap-frogs as beta becomes stable after testing.\n>>>\n>>> Its a live beta, meaning real value, real contracts.  But we dont want it\n>>> to\n>>> be an alt-coin with a floating value exactly, we want it to be bitcoin,\n>>> but\n>>> the bleeding edge bitcoin so we want to respect the 21 million coin limit,\n>>> and allow coins to move between bitcoin and betacoin with some necessary\n>>> security related restrictions.\n>>>\n>>> There is no mining reward on the betacoin network (can be merge mined for\n>>> security), and the way you opt to move a bitcoin into the betacoin network\n>>> is to mark it as transferred in some UTXO recognized way.  It cant be\n>>> reanimated, its dead.  (eg spend to a specific recognized invalid address\n>>> on\n>>> the bitcoin network).  In this way its not really a destruction, but a\n>>> move,\n>>> moving the coin from bitcoin to betacoin network.\n>>>\n>>> This respects the 21 million coin cap, and avoids betacoin bugs flowing\n>>> back\n>>> and affecting bitcoin security or value-store properties.  Users may buy\n>>> or\n>>> swap betacoin for bitcoin to facilitate moving money back from betacoin to\n>>> bitcoin.  However that is market priced so the bitcoin network is security\n>>> insulated from beta.  A significant security bug in beta would cause a\n>>> market freeze, until it is rectified.\n>>>\n>>> The cost of a betacoin is capped at one BTC because no one will pay more\n>>> than one bitcoin for a betacoin because they could alternatively move\n>>> their\n>>> own coin.  The reverse is market priced.\n>>>\n>>> Once bitcoin beta stabalizes, eg say year or two type of time-frame, a\n>>> decision is reached to promote 1.0 beta to 2.0 stable, the remaining\n>>> bitcoins can be moved, and the old network switched off, with mining past\n>>> a\n>>> flag day moving to the betacoin.\n>>>\n>>> During the beta period betacoin is NOT an alpha, people can rely on it and\n>>> use it in anger for real value transactions.  eg if it enables more script\n>>> features, or coin coloring, scalabity tweaks etc people can use it.\n>>> Probably for large value store they are always going to prefer\n>>> bitcoin-stable, but applications that need the coloring features, or\n>>> advanced scripting etc can go ahead and beta.\n>>>\n>>> Bitcoin-stable may pull validated changes and merge them, as a way to pull\n>>> in any features needed in the shorter term and benefit from the betacoin\n>>> validation.  (Testing isnt as much validation as real-money at stake\n>>> survivability).\n>>>\n>>> The arguments are I think that:\n>>>\n>>> - it allows faster development allowing bitcoin to progress features\n>>> faster,\n>>>\n>>> - it avoids mindshare dilution if alternatively an alt-coin with a hit\n>>>  missing feature takes off;\n>>>\n>>> - it concentrates such useful-feature alt activities into one OPEN source\n>>>  and OPEN control foundation mediated area (rather than suspected land\n>>>  grabs on colored fees or such like bitcoin respun as a business model\n>>>  things),\n>>>\n>>> - maybe gets the developers that would've been working on their pet\n>>>  alt-coin, or their startup alt-coin to work together putting more\n>>>  developers, testers and resources onto something with open control (open\n>>>  source does not necessarily mean that much) and bitcoin mindshare\n>>>  branding, its STILL bitcoin, its just the beta network.\n>>>\n>>> - it respects the 21 million limit, starting new mining races probably\n>>>  dillutes the artificial scarcity semantic\n>>>\n>>> - while insulating bitcoin from betacoin security defects (I dont mean\n>>>  betacoin as a testnet, it should have prudent rigorous testing like\n>>>  bitcoin, just the very act of adding a feature creates risk that bitcoin\n>>>  stable can be hesitant to take).\n>>>\n>>> Probably the main issue as always is more (trustable) very high caliber\n>>> testers and developers.  Maybe if the alt-coin minded startups and\n>>> developers donate their time to bitcoin-beta (or bitcoin-stable) for the\n>>> bits they are missing, we'll get more hands to work on something of\n>>> reusable\n>>> value to humanity, in parallel with their startup's objectives and as a\n>>> way\n>>> for them to get their needed features, while giving back to the bitcoin\n>>> community, and helping bitcoin progress faster.\n>>>\n>>> Maybe bitcoin foundation could ask for BTC donations to hire more\n>>> developers\n>>> and testers full time.  $1.5b of stored value should be interested to safe\n>>> guard their value store, and develop the transaction features.\n>>>\n>>> Adam\n>>>\n>>> On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:\n>>>>\n>>>>  This is exactly what I was planning to do with the\n>>>>  inappropriately-named \"Ultimate Blockchain Compression\".  [...]\n>>>>\n>>>>  For it to really work, it's gotta be part of the mainnet validation\n>>>>  rules, but no way it can be evaluated realistically without some kind of\n>>>>  \"staging\".\n>>>\n>>>\n>>>>  On 5/19/2013 11:08 AM, Peter Vessenes wrote:\n>>>>\n>>>>  I think this is a very interesting idea. As Bitcoiners, we often stuff\n>>>>  things into the 'alt chain' bucket in our heads; I wonder if this idea\n>>>>  works better as a curing period, essentially an extended version of the\n>>>>  current 100 block wait for mined coins.\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Bryan Bishop",
                "date": "2014-10-22T22:35:38",
                "message_text_only": "On Wed, Oct 22, 2014 at 5:01 PM, Daniel Murrell <dsmurrell at gmail.com> wrote:\n> p.s. I'm not trying to monetize this site. I just tried to make\n> something I thought could be useful.\n\n[Unsolicited administrivia follows.]\n\nYou have been posting this in a bunch of places for a while now, at\nleast three times today by my count on other mediums. I also observed\nnegative karma scores associated with these posts. Maybe you could\nconsider toning down the message frequency? I think by now everyone\nknows you want them to use your site. I also think that in the limit\nthat it would be inappropriate for /everyone/ to post all possible\nresearch sites, or even vaguely topical discussion sites, for every\npaper posted. Personally, I would much rather have discussions happen\non the mailing list anyway, although if I had a different opinion I\ncertainly hope I would still send this message.\n\nThank you.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Daniel Murrell",
                "date": "2014-10-22T22:52:54",
                "message_text_only": "Sorry Bryan, this was the first paper posted to this list since I've\nbeen on it that I added to my site. I was quite excited about this.\n\nI was not planning on and certainly won't be making this advertisement\nafter every paper posted on this list (I may do it on reddit). I did\npost on reddit a few times yes, but I assumed that this list's user\nbase didn't overlap extremely (does it?). I'm not sure why my posts\ngot down voted there. The down voters gave me no constructive feedback\nabout the usefulness of my site, and neither have you.\n\nAre you able to give me your feedback on the site I've spent quite\nsome time setting up privately so that we don't spam this list again?\n\n\n\nOn Wed, Oct 22, 2014 at 11:35 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n> On Wed, Oct 22, 2014 at 5:01 PM, Daniel Murrell <dsmurrell at gmail.com> wrote:\n>> p.s. I'm not trying to monetize this site. I just tried to make\n>> something I thought could be useful.\n>\n> [Unsolicited administrivia follows.]\n>\n> You have been posting this in a bunch of places for a while now, at\n> least three times today by my count on other mediums. I also observed\n> negative karma scores associated with these posts. Maybe you could\n> consider toning down the message frequency? I think by now everyone\n> knows you want them to use your site. I also think that in the limit\n> that it would be inappropriate for /everyone/ to post all possible\n> research sites, or even vaguely topical discussion sites, for every\n> paper posted. Personally, I would much rather have discussions happen\n> on the mailing list anyway, although if I had a different opinion I\n> certainly hope I would still send this message.\n>\n> Thank you.\n>\n> - Bryan\n> http://heybryan.org/\n> 1 512 203 0507"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-10-23T00:00:55",
                "message_text_only": "Take the discussion of this site to another M-L, please.  It is off-topic.\n\nActual discussion of the paper and side-chains is on-topic.\n\nThis M-L is publicly archived.\n\n\nOn Wed, Oct 22, 2014 at 6:52 PM, Daniel Murrell <dsmurrell at gmail.com> wrote:\n> Sorry Bryan, this was the first paper posted to this list since I've\n> been on it that I added to my site. I was quite excited about this.\n>\n> I was not planning on and certainly won't be making this advertisement\n> after every paper posted on this list (I may do it on reddit). I did\n> post on reddit a few times yes, but I assumed that this list's user\n> base didn't overlap extremely (does it?). I'm not sure why my posts\n> got down voted there. The down voters gave me no constructive feedback\n> about the usefulness of my site, and neither have you.\n>\n> Are you able to give me your feedback on the site I've spent quite\n> some time setting up privately so that we don't spam this list again?\n>\n>\n>\n> On Wed, Oct 22, 2014 at 11:35 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n>> On Wed, Oct 22, 2014 at 5:01 PM, Daniel Murrell <dsmurrell at gmail.com> wrote:\n>>> p.s. I'm not trying to monetize this site. I just tried to make\n>>> something I thought could be useful.\n>>\n>> [Unsolicited administrivia follows.]\n>>\n>> You have been posting this in a bunch of places for a while now, at\n>> least three times today by my count on other mediums. I also observed\n>> negative karma scores associated with these posts. Maybe you could\n>> consider toning down the message frequency? I think by now everyone\n>> knows you want them to use your site. I also think that in the limit\n>> that it would be inappropriate for /everyone/ to post all possible\n>> research sites, or even vaguely topical discussion sites, for every\n>> paper posted. Personally, I would much rather have discussions happen\n>> on the mailing list anyway, although if I had a different opinion I\n>> certainly hope I would still send this message.\n>>\n>> Thank you.\n>>\n>> - Bryan\n>> http://heybryan.org/\n>> 1 512 203 0507\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-10-31T18:58:07",
                "message_text_only": "On 22 October 2014 23:54, Adam Back <adam at cypherspace.org> wrote:\n\n> For those following this thread, we have now written a paper\n> describing the side-chains, 2-way pegs and compact SPV proofs.\n> (With additional authors Andrew Poelstra & Andrew Miller).\n>\n> http://blockstream.com/sidechains.pdf\n>\n\nA very well written paper, thank you for putting it together and sharing.\n\nGiven it's the 6 year birthday of satoshi's white paper, I just read\nthrough it again.\n\nI find it interesting that bitcoin is never defined in Satoshi's paper,\nindeed, it never appears after the first word.\n\nThe term Electronic Coin is defined.\n\nThe terminology of bitcoin / altcoin / altchain / blockchain in this paper\nstill leaves me slightly uneasy, and I try to use the terms electronic coin\nand electronic cash, more often.\n\nIf satoshi were to come back and continue his work, would it be an altcoin,\nwould it be \"The\" blockchain, would it be bitcoin, or would what we know as\nbitcoin become an alt.  I suspect these questions are nothing more than\nacademic curiosity.\n\nBut I think I'll get more used to it over time :)\n\nIn any case, happy birthday \"bitcoin\" :)\n\n\n>\n> Adam\n>\n> On 16 March 2014 15:58, Adam Back <adam at cypherspace.org> wrote:\n> > So an update on 1-way pegging (aka bitcoin staging, explained in quoted\n> text\n> > at bottom): it turns out secure 2-way pegging is also possible (with some\n> > bitcoin change to help support it).  The interesting thing is this allows\n> > interoperability in terms of being able to move bitcoin into and out of a\n> > side chain.  The side chains may have some different parameters, or\n> > experimental things people might want to come up with (subject to some\n> > minimum compatibility at the level of being able to produce an SPV proof\n> of\n> > a given form).\n> >\n> > At the time of the 1-way peg discussion I considered 2-way peg as\n> desirable\n> > and it seemed plausible with bitcoin changes, but the motivation for\n> 1-way\n> > peg was to make it less risky to make changes on bitcoin, so that seemed\n> > like a catch-22 loop.  Also in the 2-way peg thought experiment I had not\n> > realized how simple it was to still impose a security firewall in the\n> 2-way\n> > peg also.\n> >\n> >\n> > So Greg Maxwell proposed in Dec last year a practically compact way to do\n> > 2-way pegging using SPV proofs.  And also provided a simple argument of\n> how\n> > this can provide a security firewall.  (Security firewall means the\n> impact\n> > of security bugs on the side-chain is limited to the people with coins in\n> > it; bitcoin holders who did not use it are unaffected). [1]\n> >\n> > How it works:\n> >\n> > 1. to maintain the 21m coins promise, you start a side-chain with no\n> > in-chain mining subsidy, all bitcoin creation happens on bitcoin chain\n> (as\n> > with 1-way peg).  Reach a reasonable hash rate.  (Other semantics than\n> 1:1\n> > peg should be possible, but this is the base case).\n> >\n> > 2. you move coins to the side-chain by spending them to a fancy script,\n> > which suspends them, and allows them to be reanimated by the production\n> of\n> > an SPV proof of burn on the side-chain.\n> >\n> > 3. the side-chain has no mining reward, but it allows you to mint coins\n> at\n> > no mining cost by providing an SPV proof that the coin has been\n> suspended as\n> > in 2 on bitcoin.  The SPV proof must be buried significantly before being\n> > used to reduce risk of reorganization.  The side-chain is an SPV client\n> to\n> > the bitcoin network, and so maintains a view of the bitcoin hash chain\n> (but\n> > not the block data).\n> >\n> > 4. the bitcoin chain is firewalled from security bugs on the side chain,\n> > because bitcoin imposes the rule that no more coins can be reanimated\n> than\n> > are currently suspend (with respect to a given chain).\n> >\n> > 5. to simplify what they hypothetical bitcoin change would need to\n> consider\n> > and understand, after a coin is reanimated there is a maturity period\n> > imposed (say same as fresh mined coins).  During the maturity period the\n> > reanimation script allows a fraud proof to spend the coins back.  A fraud\n> > bounty fee (equal to the reanimate fee) can be offered by the mover to\n> > incentivize side-chain full nodes to watch reanimations and search for\n> fraud\n> > proofs.\n> >\n> > 6. a fraud proof is an SPV proof with a longer chain showing that the\n> proof\n> > of burn was orphaned.\n> >\n> > There are a few options to compress the SPV proof, via Fiat-Shamir\n> transform\n> > to provide a compact proof of amount work contained in a merkle tree of\n> > proofs of work (as proposed by Fabien Coelho link on\n> > http://hashcash.org/papers/) with params like 90% of work is proven.\n> But\n> > better is something Greg proposed based on skip-lists organized in a\n> tree,\n> > where 'lucky' proofs of work are used to skip back further.  (Recalling\n> that\n> > if you search for a 64-bit leading-0 proof-of-work, half the time you\n> get a\n> > 65-bit, quarter 66-bit etc.)  With this mechanism you can accurately\n> > prove the amount of proof of work in a compressed tree (rather than\n> ~90%).\n> >\n> >\n> > Apart from pegging from bitcoin to a side-chain, if a private chain is\n> made\n> > with same rules to the side-chain it becomes possible with some\n> > modifications to the above algorithm to peg the side-chain to a private\n> > chain.  Private chain meaning a chain with the same format but signature\n> of\n> > single server in place of hashing, and timestamping of the block\n> signatures\n> > in the mined side chain.  And then reactive security on top of that by\n> full\n> > nodes/auditors trying to find fraud proofs (rewrites of history relative\n> to\n> > side-chain mined time-stamp or approved double-spends).  The reaction is\n> to\n> > publish a fraud proof and move coins back to the side chain, and then\n> > regroup on a new server.  (Open transactions has this audit + reactive\n> model\n> > but as far as I know does it via escrow, eg the voting pools for k of n\n> > escrow of the assets on the private server.) I also proposed the same\n> > reactive audit model but for auditable namespaces [4].\n> >\n> > Private chains add some possiblity for higher scaling, while retaining\n> > bitcoin security properties.  (You need to add the ability for a user to\n> > unilaterally move his coins to the side-chain they came from in event the\n> > chain server refuses to process transactions involving them.  This\n> appears\n> > to be possible if you have compatible formats on the private chain and\n> > side-chain).\n> >\n> >\n> > This pegging discussion involved a number of #bitcoin-wizards, Greg\n> Maxwell,\n> > Matt Corallo, Pieter Wuille, Jorge Timon, Mark Freidenbach, Luke Dashjr.\n> The\n> > 2-way peg seems to have first been described by Greg.  Greg thought of\n> > 2-way pegging in the context of ZK-SNARKS and the coinwitness thread [2].\n> > (As a ZK-SNARK could compactly prove full validation of a side chain\n> rules).\n> >\n> > There was also something seemingly similar sounding but not described in\n> > detail by Alex Mizrahi in the context of color coins in this post [3].\n> >\n> > Adam\n> >\n> > [1] http://download.wpsoftware.net/bitcoin/wizards/2013-12-18.txt\n> > [2] https://bitcointalk.org/index.php?topic=277389.40\n> > [3] https://bitcointalk.org/index.php?topic=277389.msg4167554#msg4167554\n> > [4] http://www.cypherspace.org/p2p/auditable-namespace.html\n> >\n> > On Mon, Oct 14, 2013 at 08:08:07PM +0200, Adam Back wrote:\n> >>\n> >> Coming back to the staging idea, maybe this is a realistic model that\n> >> could\n> >> work.  The objective being to provide a way for bitcoin to move to a\n> live\n> >> beta and stable being worked on in parallel like fedora vs RHEL or\n> >> odd/even\n> >> linux kernel versions.\n> >>\n> >> Development runs in parallel on bitcoin 1.x beta (betacoin) and bitcoin\n> >> 0.x\n> >> stable and leap-frogs as beta becomes stable after testing.\n> >>\n> >> Its a live beta, meaning real value, real contracts.  But we dont want\n> it\n> >> to\n> >> be an alt-coin with a floating value exactly, we want it to be bitcoin,\n> >> but\n> >> the bleeding edge bitcoin so we want to respect the 21 million coin\n> limit,\n> >> and allow coins to move between bitcoin and betacoin with some necessary\n> >> security related restrictions.\n> >>\n> >> There is no mining reward on the betacoin network (can be merge mined\n> for\n> >> security), and the way you opt to move a bitcoin into the betacoin\n> network\n> >> is to mark it as transferred in some UTXO recognized way.  It cant be\n> >> reanimated, its dead.  (eg spend to a specific recognized invalid\n> address\n> >> on\n> >> the bitcoin network).  In this way its not really a destruction, but a\n> >> move,\n> >> moving the coin from bitcoin to betacoin network.\n> >>\n> >> This respects the 21 million coin cap, and avoids betacoin bugs flowing\n> >> back\n> >> and affecting bitcoin security or value-store properties.  Users may buy\n> >> or\n> >> swap betacoin for bitcoin to facilitate moving money back from betacoin\n> to\n> >> bitcoin.  However that is market priced so the bitcoin network is\n> security\n> >> insulated from beta.  A significant security bug in beta would cause a\n> >> market freeze, until it is rectified.\n> >>\n> >> The cost of a betacoin is capped at one BTC because no one will pay more\n> >> than one bitcoin for a betacoin because they could alternatively move\n> >> their\n> >> own coin.  The reverse is market priced.\n> >>\n> >> Once bitcoin beta stabalizes, eg say year or two type of time-frame, a\n> >> decision is reached to promote 1.0 beta to 2.0 stable, the remaining\n> >> bitcoins can be moved, and the old network switched off, with mining\n> past\n> >> a\n> >> flag day moving to the betacoin.\n> >>\n> >> During the beta period betacoin is NOT an alpha, people can rely on it\n> and\n> >> use it in anger for real value transactions.  eg if it enables more\n> script\n> >> features, or coin coloring, scalabity tweaks etc people can use it.\n> >> Probably for large value store they are always going to prefer\n> >> bitcoin-stable, but applications that need the coloring features, or\n> >> advanced scripting etc can go ahead and beta.\n> >>\n> >> Bitcoin-stable may pull validated changes and merge them, as a way to\n> pull\n> >> in any features needed in the shorter term and benefit from the betacoin\n> >> validation.  (Testing isnt as much validation as real-money at stake\n> >> survivability).\n> >>\n> >> The arguments are I think that:\n> >>\n> >> - it allows faster development allowing bitcoin to progress features\n> >> faster,\n> >>\n> >> - it avoids mindshare dilution if alternatively an alt-coin with a hit\n> >>  missing feature takes off;\n> >>\n> >> - it concentrates such useful-feature alt activities into one OPEN\n> source\n> >>  and OPEN control foundation mediated area (rather than suspected land\n> >>  grabs on colored fees or such like bitcoin respun as a business model\n> >>  things),\n> >>\n> >> - maybe gets the developers that would've been working on their pet\n> >>  alt-coin, or their startup alt-coin to work together putting more\n> >>  developers, testers and resources onto something with open control\n> (open\n> >>  source does not necessarily mean that much) and bitcoin mindshare\n> >>  branding, its STILL bitcoin, its just the beta network.\n> >>\n> >> - it respects the 21 million limit, starting new mining races probably\n> >>  dillutes the artificial scarcity semantic\n> >>\n> >> - while insulating bitcoin from betacoin security defects (I dont mean\n> >>  betacoin as a testnet, it should have prudent rigorous testing like\n> >>  bitcoin, just the very act of adding a feature creates risk that\n> bitcoin\n> >>  stable can be hesitant to take).\n> >>\n> >> Probably the main issue as always is more (trustable) very high caliber\n> >> testers and developers.  Maybe if the alt-coin minded startups and\n> >> developers donate their time to bitcoin-beta (or bitcoin-stable) for the\n> >> bits they are missing, we'll get more hands to work on something of\n> >> reusable\n> >> value to humanity, in parallel with their startup's objectives and as a\n> >> way\n> >> for them to get their needed features, while giving back to the bitcoin\n> >> community, and helping bitcoin progress faster.\n> >>\n> >> Maybe bitcoin foundation could ask for BTC donations to hire more\n> >> developers\n> >> and testers full time.  $1.5b of stored value should be interested to\n> safe\n> >> guard their value store, and develop the transaction features.\n> >>\n> >> Adam\n> >>\n> >> On Mon, May 20, 2013 at 02:34:06AM -0400, Alan Reiner wrote:\n> >>>\n> >>>  This is exactly what I was planning to do with the\n> >>>  inappropriately-named \"Ultimate Blockchain Compression\".  [...]\n> >>>\n> >>>  For it to really work, it's gotta be part of the mainnet validation\n> >>>  rules, but no way it can be evaluated realistically without some kind\n> of\n> >>>  \"staging\".\n> >>\n> >>\n> >>>  On 5/19/2013 11:08 AM, Peter Vessenes wrote:\n> >>>\n> >>>  I think this is a very interesting idea. As Bitcoiners, we often stuff\n> >>>  things into the 'alt chain' bucket in our heads; I wonder if this idea\n> >>>  works better as a curing period, essentially an extended version of\n> the\n> >>>  current 100 block wait for mined coins.\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141031/b00e6945/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "side-chains & 2-way pegging (Re: is there a way to do bitcoin-staging?)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Bryan Bishop",
                "Daniel Murrell",
                "Adam Back",
                "Melvin Carvalho"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 43121
        }
    },
    {
        "title": "[Bitcoin-development] death by halving",
        "thread_messages": [
            {
                "author": "Alex Mizrahi",
                "date": "2014-10-25T18:06:32",
                "message_text_only": "# Death by halving\n\n## Summary\n\nIf miner's income margin are less than 50% (which is a healthy situation\nwhen mining hardware is readily available), we might experience\ncatastrophic loss of hashpower (and, more importantly, catastrophic loss of\nsecurity) after reward halving.\n\n## A simple model\n\nLet's define miner's income margin as `MIM = (R-C_e)/R`, where R is the\ntotal revenue miner receives over a period of time, and C_e is the cost of\nelectricity spent on mining over the same period of time. (Note that for\nthe sake of simplicity we do not take into account equipment costs,\namortization and other costs mining might incur.)\n\nAlso we will assume that transaction fees collected by miner are negligible\nas compared to the subsidy.\n\nTheorem 1. If for a certain miner MIM is less than 0.5 before subsidy\nhalving and bitcoin and electricity prices stay the same, then mining is no\nlonger profitable after the halving.\n\nIndeed, suppose the revenue after the halving is R' = R/2.\n   MIM = (R-C_e)/R < 0.5\n   R/2 < C_e.\n\n   R' = R/2 < C_e.\n\nIf revenue after halving R' doesn't cover electricity cost, a rational\nminer should stop mining, as it's cheaper to acquire bitcoins from the\nmarket.\n\n~~~\n\nUnder these assumptions, if the majority of miners have MIM less than 0.5,\nBitcoin is going to experience a significant loss of hashing power.\nBut are these assumptions reasonable? We need a study a more complex model\nwhich takes into account changes in bitcoin price and difficulty changes\nover time.\nBut, first, let's analyze significance of 'loss of hashpower'.\n\n## Catastrophic loss of hashpower\n\nBitcoin security model relies on assumption that a malicious actor cannot\nacquire more than 50% of network's current hashpower.\nE.g. there is a table in Rosenfeld's _Analysis of Hashrate-Based Double\nSpending_ paper which shows that as long as the malicious actor controls\nonly a small fraction of total hashpower, attacks have well-define costs.\nBut if the attacker-controlled hashrate is higher than 50%, attacks become\nvirtually costless, as the attacker receives double-spending revenue on top\nof his mining revenue, and his risk is close to zero.\n\nNote that the simple model described in the aforementioned paper doesn't\ntake into account attack's effect on the bitcoin price and the price of the\nBitcoin mining equipment. I hope that one day we'll see more elaborate\nattack models, but in the meantime, we'll have to resort to hand-waving.\n\nConsider a situation where almost all available hashpower is available for\na lease to the highest bidder on the open market. In this case someone who\nowns sufficient capital could easily pull off an attack.\n\nBut why is hashpower not available on the market? Quite likely equipment\nowners are aware of the fact that such an attack would make Bitcoin\nuseless, and thus worthless, which would also make their equipment\nworthless. Thus they prefer to do mining for a known mining pools with good\ntrack record.\n(Although hashpower marketplaces exist: https://nicehash.com/ they aren't\nparticularly popular.)\n\nNow let's consider a situation where mining bitcoins is no longer\nprofitable and the majority of hashpower became dormant, i.e. miners turned\noff their equipment or went to mine something else. In this case equipment\nis already nearly worthless, so people might as well lease it to the\nhighest bidder, thus enabling aforementioned attacks.\n\nAlternatively, the attacker might buy obsolete mining equipment from people\nwho are no longer interested in mining.\n\n## Taking into account the Bitcoin price\n\nThis is largely trivial, and thus is left as an exercise for the reader.\nLet's just note that the Bitcoin subsidy halving is an event which is known\nto market participants in advance, and thus it shouldn't result in\nsignificant changes of the Bitcoin price,\n\n## Changes in difficulty\n\nDifferent mining devices have different efficiency. After the reward\nhalving mining on some of these devices becomes unprofitable, thus they\nwill drop out, which will result in a drop of mining difficulty.\n\nWe can greatly simplify calculations if we sum costs and rewards across all\nminers, thus calculating average MIM before the halving: `MIM = 1 - C_e/R`.\n\nLet's consider an equilibrium break-even situation where unprofitable\nmining devices were turned off, thus resulting in the change in electricity\nexpenditures: `C_e' = r * C_e`. and average MIM after the halving `MIM' =\n0`. In this case:\n\n    r * C_e = R/2\n    C_e / R = 1/2r\n    (1 - MIM) = 1/2r\n    r = 1/(2*(1-MIM))\n\nLet's evaluate this formulate for different before-halving MIM:\n\n1. If `MIM = 0.5`, then `r = 1/(2*0.5) = 1`, that is, all miners can remain\nmining.\n2. If `MIM = 0.25`, then `r = 1/(2*0.75) = 0.66`, the least efficient\nminers consuming 33% of total electricity costs will drop out.\n3. If `MIM = 0.1`, then `r = 1/(2*0.9) = 0.55`, total electricity costs\ndrop by 45%.\n\nWe can note that for the before-halving MIM>0, r is higher than 1/2, thus\nless than half of total hashpower will drop out.\n\nThe worst-case situation is when before-halving MIM is close to zero and\nmining devices, as well as cost of electricity in different places, are\nnearly identical, in that case approximately a half of all hashpower will\ndrop out.\n\n## MIM estimation\n\nOK, what MIM do we expect in the long run? Is it going to be less than 50%\nanyway?\n\nWe can expect that people will keep buying mining devices as long as it is\nprofitable.\n\nBreak-even condition: `R - C_e - P = 0`, where P is the price of a mining\ndevice, R is the revenue it generates over its lifetime, and C_e is the\ntotal cost of required electricity over its lifetime. In this case, `R =\nC_e + P`, and thus:\n\n    MIM = 1 - C_e / (C_e + P)\n\n`f = C_e / P` is a ratio of the cost of electricity to the cost of\nhardware, `C_e = f * P`, and thus\n\n    MIM = 1 - f * P / (f * P + P) = 1 - f / (f + 1) = 1 / (1 + f)\n\nMIM is less than 0.5 when f > 1.\n\nComputing f is somewhat challenging even for a concrete device, as it's\nuseful lifetime is unknown.\n\nLet's do some guesstimation:\n\nSpondoolies Tech's SP35 Yukon unit consumes 3.5 KW and costs $4000. If it's\nuseful lifetime is more than 2 years and a cost of KWh is $0.1, the total\nexpenditures on electricity will be at least $6135, thus for this device we\nhave `f > 6135/4000 > 1.5`.\n\nIf other devices which will be sold on the market will have similar specs,\nwe will have MIM lower than 0.5. (Well, no shit.)\n\n## Conclusions\n\nReward halving is a deficiency in Bitcoin's design, but there is some hope\nit won't be critical: in the equilibrium break-even situation hashpower\ndrop is less than 50%.\nHashrate might drop by more than 50% immediately after the halving (and\nbefore difficulty is updated), thus a combination of the halving and slow\ndifficulty update pose a real threat.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/00dbaebf/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-10-25T18:12:19",
                "message_text_only": "On Sat, Oct 25, 2014 at 2:06 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n> Hashrate might drop by more than 50% immediately after the halving (and\n> before difficulty is updated), thus a combination of the halving and slow\n> difficulty update pose a real threat.\n\n\"Flag day\" herd behavior like this is unlikely for well informed and\nwell prepared market participants.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-10-25T18:22:34",
                "message_text_only": "> \"Flag day\" herd behavior like this is unlikely for well informed and\n> well prepared market participants.\n>\n\nIt is simply rational to turn your mining device off until difficulty\nadjusts.\nKeeping mining for 2+ weeks when it costs you money is an altruistic\nbehavior, we shouldn't rely on this.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/f10e3bf5/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-10-25T18:31:55",
                "message_text_only": "It is an overly-simplistic miner model to assume altruism is\nnecessary.  The hashpower market is maturing in the direction of\nfinancial instruments, where the owner of the hashpower is not\nnecessarily the one receiving income.  These are becoming tradeable\ninstruments, and derivatives and hedging are built on top of that.\nRisk is hedged at each layer.  Market players also forge agreements\nwith miners, and receive -negative- value if hashpower is simply shut\ndown.\n\nSimplistic models cannot predict what hashpower does in the face of\nbusiness-to-business medium- and long-term contracts.\n\n\nOn Sat, Oct 25, 2014 at 2:22 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n>\n>>\n>> \"Flag day\" herd behavior like this is unlikely for well informed and\n>> well prepared market participants.\n>\n>\n> It is simply rational to turn your mining device off until difficulty\n> adjusts.\n> Keeping mining for 2+ weeks when it costs you money is an altruistic\n> behavior, we shouldn't rely on this.\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-10-25T19:08:05",
                "message_text_only": "> The hashpower market is maturing in the direction of\n> financial instruments, where the owner of the hashpower is not\n> necessarily the one receiving income.  These are becoming tradeable\n\ninstruments,\n\n\nMeni Rosenfeld issued tradeable mining bonds back in 2012:\n\nhttps://bitcointalk.org/index.php?topic=65569.0\n\nSo this is hardly new stuff. But it definitely won't help.\nThe contract specifies how many bitcoins bondholder would get depending on\ndifficulty and other factors.\nBut, usually, bondholder doesn't care (and cannot check) where these\nbitcoins come from.\n\nThus the owner of the mining equipment can temporarily turn off that\nequipment off, and instead buy them on the market, as he needs to spend\nless money than he would spend on electricity. Then he can pocket the\ndifference.\n\n\n> Simplistic models cannot predict what hashpower does in the face of\n> business-to-business medium- and long-term contracts.\n>\n\nAh, yes, let's forget game theory, business people know it better!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/4ce59ce0/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-10-25T19:16:26",
                "message_text_only": "We had a halving, and it was a non-event.\n\nIs there some reason to believe next time will be different?\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/a67c8cbb/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-10-25T19:53:57",
                "message_text_only": "> We had a halving, and it was a non-event.\n> Is there some reason to believe next time will be different?\n>\n\nYes.\n\nWhen the market is rapidly growing, margins can be relatively high because\nof limited amounts of capital being invested, or introduction of more\nefficient technologies.\n\nHowever, we should expect market to become more mature with time, and a\nmature market will result in lower margins.\nThe halving can do much more damage when margins are relatively small.\n\nBesides that, there is a difference in ecosystem maturity:\n\n1. Back in 2012, miners weren't so focused on profits, as Bitcoin was\nhighly experimental: some were mining for the hell of it (it was a novelty\nthing back then), others wanted to secure the network, others did it\nbecause it was hard to obtain bitcoins by other means. But now miners are\nmostly profit-motivated: they buy expensive dedicated mining equipment and\nwant to maximize profits. As you might know, at one point ghash.io reached\n50% hashrate, and miners didn't care about it enough to switch to a\ndifferent pool.\n\n2. Back in 2012, we didn't have multipools. Multipools automatically\nswitches between mining different alt-chains to maximize miners' profits.\nMiners who use multipools do not care how their hashrate is used as long as\nthey profit off it.\nParticularly, check https://nicehash.com/ -- you can easily buy hashrate to\nattack a smaller alt-coin, for example.\n\nIf the halving will result in a significant hashrate drop (and we did\nobserve hashrate drop in 2012, although it wasn't that big), it might be\npossible to buy enough hashpower to attack Bitcoin.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/d828d84e/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-10-25T21:50:49",
                "message_text_only": "On 25 October 2014 21:53, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n\n>\n> We had a halving, and it was a non-event.\n>> Is there some reason to believe next time will be different?\n>>\n>\n> Yes.\n>\n> When the market is rapidly growing, margins can be relatively high because\n> of limited amounts of capital being invested, or introduction of more\n> efficient technologies.\n>\n> However, we should expect market to become more mature with time, and a\n> mature market will result in lower margins.\n> The halving can do much more damage when margins are relatively small.\n>\n> Besides that, there is a difference in ecosystem maturity:\n>\n> 1. Back in 2012, miners weren't so focused on profits, as Bitcoin was\n> highly experimental: some were mining for the hell of it (it was a novelty\n> thing back then), others wanted to secure the network, others did it\n> because it was hard to obtain bitcoins by other means. But now miners are\n> mostly profit-motivated: they buy expensive dedicated mining equipment and\n> want to maximize profits. As you might know, at one point ghash.io\n> reached 50% hashrate, and miners didn't care about it enough to switch to a\n> different pool.\n>\n> 2. Back in 2012, we didn't have multipools. Multipools automatically\n> switches between mining different alt-chains to maximize miners' profits.\n> Miners who use multipools do not care how their hashrate is used as long as\n> they profit off it.\n> Particularly, check https://nicehash.com/ -- you can easily buy hashrate\n> to attack a smaller alt-coin, for example.\n>\n> If the halving will result in a significant hashrate drop (and we did\n> observe hashrate drop in 2012, although it wasn't that big), it might be\n> possible to buy enough hashpower to attack Bitcoin.\n>\n\nThis is a good point, imho.  Miner sophistication has increased drastically\nin 2 years.  Sites like ( http://www.coinwarz.com/ ) can heavily influence\nmining, 1-2 orders of magnitude on significant levels of hashing.\n\nI think this is more prevalent with scrypt than sha256, litecoin is set to\nhalf reward in 9 months, and it will be interesting to observe what happens\nthere.\n\n\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/9e83bd0e/attachment.html>"
            },
            {
                "author": "Ferdinando M. Ametrano",
                "date": "2014-10-28T20:17:58",
                "message_text_only": "On Oct 25, 2014 9:19 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n> We had a halving, and it was a non-event.\n> Is there some reason to believe next time will be different?\n\nIn november 2008 bitcoin was a much younger ecosystem, with less liquidity\nand trading, smaller market cap, and the halving happened during a quite\nstable positive price trend.\n\nIn the next months competition might easily drive down mining margins, and\nthe reward halving might generate unexpected disruption in mining\noperations.\n\nMoreover, halving is not strictly necessary to respect the spirit of\nNakamoto's monetary rule and its 21M limit. At the beginning of the 3rd\nreward era (block 420000, in 2017) a new reward function could become\neffective R(b)=k*2^(-h*b/210000) where b is the block number and R(b) is\nthe reward. The parameters h and k can be calibrated so that R(419999)=25\nand sum_b{R}=21M\n\n\n\u200bIf the increased issuance speed in the third era is considered\nproblematic, then each era could have its own R_e(b)=k_e*2^(-h_e*b/210000)\nfitted to the amount of coins to be issued in that era according to the\ncurrent supply rule, e.g. fitting k_e and h_e to R(419999)=25 and\nsum_{b}_e=2,625,000.\n\nWould such a BIP have any chance to be considered? Am I missing something?\n\nNando\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/c338fcc4/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: btc-blkzoomed (1).png\nType: image/png\nSize: 18254 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/c338fcc4/attachment.png>"
            },
            {
                "author": "Adam Back",
                "date": "2014-10-25T20:27:30",
                "message_text_only": "Some thoughts about Alex's analysis:\n\n- bitcoin price may increase (though doubling immediately might be\nunlikely) after the halving (because the new coins are in short\nsupply). Apparently there is some evidence of a feedback loop between\nnumber of freshly mined coins sold to cover electrical costs ongoing\n(which depends on halving also), in that there are claims that the btc\nprice experiences some downwards pressure when margins are slim as\nminers sell almost all of them when the electrical cost takes most of\nthe profit, and otherwise tend more to hold coins longer term.\n\n- that people who cant make money mining with 1/2 reward will resort\nto attacking the network rather than living with it for 2weeks until\ndifficulty adjustment).  actually it will be longer than two weeks if\nits going to result in a difficulty fall.\n\n- that the miners wont act in their own meta-interest to aim for the\nplausible new hashrate supported by the lower reward.  mining\nequipment investment horizon being 3-6mo+ so it can easily make\neconomic sense to subsidise it for a bit to smooth the transition.\n\n- fees might go up to unjam the network also, so the people\nbenefitting from the transactions utility also help cover the\ntransition costs.  or maybe someone makes an assurance contract to pay\nthe short fall and phase it out over a few months to smooth the shift.\n\n- there is a wide range of electrical efficiency, and some are much\nworse than others so there maybe a convenient equilibrium where there\nare enough left who can still profit.\n\n- alternatively you might say why not 1/100th reward reduction per 2\nweek period rather than 1/2 every 4 years, a difficulty retarget could\nbe a convenient point to do that.\n\nAdam\n\nOn 25 October 2014 11:06, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n> # Death by halving\n>\n> ## Summary\n>\n> If miner's income margin are less than 50% (which is a healthy situation\n> when mining hardware is readily available), we might experience catastrophic\n> loss of hashpower (and, more importantly, catastrophic loss of security)\n> after reward halving.\n>\n> ## A simple model\n>\n> Let's define miner's income margin as `MIM = (R-C_e)/R`, where R is the\n> total revenue miner receives over a period of time, and C_e is the cost of\n> electricity spent on mining over the same period of time. (Note that for the\n> sake of simplicity we do not take into account equipment costs, amortization\n> and other costs mining might incur.)\n>\n> Also we will assume that transaction fees collected by miner are negligible\n> as compared to the subsidy.\n>\n> Theorem 1. If for a certain miner MIM is less than 0.5 before subsidy\n> halving and bitcoin and electricity prices stay the same, then mining is no\n> longer profitable after the halving.\n>\n> Indeed, suppose the revenue after the halving is R' = R/2.\n>    MIM = (R-C_e)/R < 0.5\n>    R/2 < C_e.\n>\n>    R' = R/2 < C_e.\n>\n> If revenue after halving R' doesn't cover electricity cost, a rational miner\n> should stop mining, as it's cheaper to acquire bitcoins from the market.\n>\n> ~~~\n>\n> Under these assumptions, if the majority of miners have MIM less than 0.5,\n> Bitcoin is going to experience a significant loss of hashing power.\n> But are these assumptions reasonable? We need a study a more complex model\n> which takes into account changes in bitcoin price and difficulty changes\n> over time.\n> But, first, let's analyze significance of 'loss of hashpower'.\n>\n> ## Catastrophic loss of hashpower\n>\n> Bitcoin security model relies on assumption that a malicious actor cannot\n> acquire more than 50% of network's current hashpower.\n> E.g. there is a table in Rosenfeld's _Analysis of Hashrate-Based Double\n> Spending_ paper which shows that as long as the malicious actor controls\n> only a small fraction of total hashpower, attacks have well-define costs.\n> But if the attacker-controlled hashrate is higher than 50%, attacks become\n> virtually costless, as the attacker receives double-spending revenue on top\n> of his mining revenue, and his risk is close to zero.\n>\n> Note that the simple model described in the aforementioned paper doesn't\n> take into account attack's effect on the bitcoin price and the price of the\n> Bitcoin mining equipment. I hope that one day we'll see more elaborate\n> attack models, but in the meantime, we'll have to resort to hand-waving.\n>\n> Consider a situation where almost all available hashpower is available for a\n> lease to the highest bidder on the open market. In this case someone who\n> owns sufficient capital could easily pull off an attack.\n>\n> But why is hashpower not available on the market? Quite likely equipment\n> owners are aware of the fact that such an attack would make Bitcoin useless,\n> and thus worthless, which would also make their equipment worthless. Thus\n> they prefer to do mining for a known mining pools with good track record.\n> (Although hashpower marketplaces exist: https://nicehash.com/ they aren't\n> particularly popular.)\n>\n> Now let's consider a situation where mining bitcoins is no longer profitable\n> and the majority of hashpower became dormant, i.e. miners turned off their\n> equipment or went to mine something else. In this case equipment is already\n> nearly worthless, so people might as well lease it to the highest bidder,\n> thus enabling aforementioned attacks.\n>\n> Alternatively, the attacker might buy obsolete mining equipment from people\n> who are no longer interested in mining.\n>\n> ## Taking into account the Bitcoin price\n>\n> This is largely trivial, and thus is left as an exercise for the reader.\n> Let's just note that the Bitcoin subsidy halving is an event which is known\n> to market participants in advance, and thus it shouldn't result in\n> significant changes of the Bitcoin price,\n>\n> ## Changes in difficulty\n>\n> Different mining devices have different efficiency. After the reward halving\n> mining on some of these devices becomes unprofitable, thus they will drop\n> out, which will result in a drop of mining difficulty.\n>\n> We can greatly simplify calculations if we sum costs and rewards across all\n> miners, thus calculating average MIM before the halving: `MIM = 1 - C_e/R`.\n>\n> Let's consider an equilibrium break-even situation where unprofitable mining\n> devices were turned off, thus resulting in the change in electricity\n> expenditures: `C_e' = r * C_e`. and average MIM after the halving `MIM' =\n> 0`. In this case:\n>\n>     r * C_e = R/2\n>     C_e / R = 1/2r\n>     (1 - MIM) = 1/2r\n>     r = 1/(2*(1-MIM))\n>\n> Let's evaluate this formulate for different before-halving MIM:\n>\n> 1. If `MIM = 0.5`, then `r = 1/(2*0.5) = 1`, that is, all miners can remain\n> mining.\n> 2. If `MIM = 0.25`, then `r = 1/(2*0.75) = 0.66`, the least efficient miners\n> consuming 33% of total electricity costs will drop out.\n> 3. If `MIM = 0.1`, then `r = 1/(2*0.9) = 0.55`, total electricity costs drop\n> by 45%.\n>\n> We can note that for the before-halving MIM>0, r is higher than 1/2, thus\n> less than half of total hashpower will drop out.\n>\n> The worst-case situation is when before-halving MIM is close to zero and\n> mining devices, as well as cost of electricity in different places, are\n> nearly identical, in that case approximately a half of all hashpower will\n> drop out.\n>\n> ## MIM estimation\n>\n> OK, what MIM do we expect in the long run? Is it going to be less than 50%\n> anyway?\n>\n> We can expect that people will keep buying mining devices as long as it is\n> profitable.\n>\n> Break-even condition: `R - C_e - P = 0`, where P is the price of a mining\n> device, R is the revenue it generates over its lifetime, and C_e is the\n> total cost of required electricity over its lifetime. In this case, `R = C_e\n> + P`, and thus:\n>\n>     MIM = 1 - C_e / (C_e + P)\n>\n> `f = C_e / P` is a ratio of the cost of electricity to the cost of hardware,\n> `C_e = f * P`, and thus\n>\n>     MIM = 1 - f * P / (f * P + P) = 1 - f / (f + 1) = 1 / (1 + f)\n>\n> MIM is less than 0.5 when f > 1.\n>\n> Computing f is somewhat challenging even for a concrete device, as it's\n> useful lifetime is unknown.\n>\n> Let's do some guesstimation:\n>\n> Spondoolies Tech's SP35 Yukon unit consumes 3.5 KW and costs $4000. If it's\n> useful lifetime is more than 2 years and a cost of KWh is $0.1, the total\n> expenditures on electricity will be at least $6135, thus for this device we\n> have `f > 6135/4000 > 1.5`.\n>\n> If other devices which will be sold on the market will have similar specs,\n> we will have MIM lower than 0.5. (Well, no shit.)\n>\n> ## Conclusions\n>\n> Reward halving is a deficiency in Bitcoin's design, but there is some hope\n> it won't be critical: in the equilibrium break-even situation hashpower drop\n> is less than 50%.\n> Hashrate might drop by more than 50% immediately after the halving (and\n> before difficulty is updated), thus a combination of the halving and slow\n> difficulty update pose a real threat.\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-25T20:43:22",
                "message_text_only": "On Saturday 25. October 2014 13.27.30 Adam Back wrote:\n> - alternatively you might say why not 1/100th reward reduction per 2\n> week period rather than 1/2 every 4 years, a difficulty retarget could\n> be a convenient point to do that.\n\nmining equipment has a much shorter lifetime than 4 years, so the halving \nmakes it easy to base purchases on.\nAlso, divide by two is the cleanest way to get to zero after a specific amount \nof divisions."
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-25T20:28:56",
                "message_text_only": "On Saturday 25. October 2014 21.06.32 Alex Mizrahi wrote:\n> If miner's income margin are less than 50% (which is a healthy situation\n> when mining hardware is readily available), we might experience\n> catastrophic loss of hashpower (and, more importantly, catastrophic loss of\n> security) after reward halving.\n\n\nFor the sake of argument, lets assume that somehow (quite unlikely) half the \nmining equipment gets shut off.\nThe amount of hashes/second is such that it is currently, lets just say, quite \nsecure against any takeover.\n\nYour document makes a long series of assumptions about how this can turn out \nbad with each individually is implausible, together are just fiction.\n\nYour research didn't convince me about this being bad somehow. It also \ncompletely disregards the equilibriums reached by doing so."
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-10-25T20:49:54",
                "message_text_only": "> For the sake of argument, lets assume that somehow (quite unlikely)\n\n\nWhy is it unlikely? Do you believe that the cost of electricity cannot be\nhigher than expected mining revenue?\nOr do you expect miners to keep mining when it costs them money?\n\n\n> half the mining equipment gets shut off.\n> The amount of hashes/second is such that it is currently, lets just say,\n> quite\n> secure against any takeover.\n>\n\nThe equipment won't be simply turned off, it will be up for grabs.\n\nPlease check this web sites:\n\nhttps://nicehash.com/\nhttps://www.multipool.us/\n\nOne can use them in the same way he uses normal mining pools, and they\nswitch between different chains.\nSay, multipool.us can switch between BTC and PPC (Peercoin).\nMining BTC will be less profitable after a halving, so a miner who is\nwilling to maximize his profits might use multipool to auto-switch to\nsomething more profitable.\nWhich might be attack-on-Bitcoin.\nE.g. if 60% of bitcoin's total hashrate is available via \"multipools\", one\ncan try to pull of a double-spending attack.\n\n\n> Your document makes a long series of assumptions about how this can turn\n> out\n> bad with each individually is implausible, together are just fiction.\n>\n\nIt sounds like you failed to grasp even basics.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/2daacf00/attachment.html>"
            },
            {
                "author": "Alexander Leishman",
                "date": "2014-10-25T21:51:59",
                "message_text_only": "Interesting analysis! I think there are a few important effects that aren't\nbeing considered.\n\n1. When the block reward is halved, inflation is halved as well. Is this\nhalving already priced in by the market or will it result in an upward\npressure on the price?\n\n2. It was acknowledged that the referenced analysis did not take into\naccount the result of a double-spend attack on the bitcoin price. However,\nthe effect of a detectable double-spend attack on the Bitcoin network is\nnot isolated to Bitcoin markets. The price of altcoins often trend with the\nprice of Bitcoin, so attacking Bitcoin may reduce the profitability of\n'multipool' mining. Any alt-coin market vulnerable to the malicious\nhash-power would probably go into panic mode.\n\n-Alex Leishman\n\n\n\n\nOn Sat Oct 25 2014 at 1:51:10 PM Alex Mizrahi <alex.mizrahi at gmail.com>\nwrote:\n\n>\n>\n>> For the sake of argument, lets assume that somehow (quite unlikely)\n>\n>\n> Why is it unlikely? Do you believe that the cost of electricity cannot be\n> higher than expected mining revenue?\n> Or do you expect miners to keep mining when it costs them money?\n>\n>\n>> half the mining equipment gets shut off.\n>> The amount of hashes/second is such that it is currently, lets just say,\n>> quite\n>> secure against any takeover.\n>>\n>\n> The equipment won't be simply turned off, it will be up for grabs.\n>\n> Please check this web sites:\n>\n> https://nicehash.com/\n> https://www.multipool.us/\n>\n> One can use them in the same way he uses normal mining pools, and they\n> switch between different chains.\n> Say, multipool.us can switch between BTC and PPC (Peercoin).\n> Mining BTC will be less profitable after a halving, so a miner who is\n> willing to maximize his profits might use multipool to auto-switch to\n> something more profitable.\n> Which might be attack-on-Bitcoin.\n> E.g. if 60% of bitcoin's total hashrate is available via \"multipools\", one\n> can try to pull of a double-spending attack.\n>\n>\n>> Your document makes a long series of assumptions about how this can turn\n>> out\n>> bad with each individually is implausible, together are just fiction.\n>>\n>\n> It sounds like you failed to grasp even basics.\n> ------------------------------------------------------------\n> ------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/588c86c6/attachment.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2014-10-25T22:10:02",
                "message_text_only": "I'd suggest looking at how Dogecoin's mining schedule has worked out, \nfor how halvings tend to actually affect the market. Part of Dogecoin's \ndesign was that it would halve very quickly (around every 75 days, in \nfact), so it's essentially illustrating worst case scenario.\n\nFirstly, miners do not all move/shut down as a batch. Some will stay out \nof loyalty/apathy/optimism, so there's a jolt to hashrate when the \nrewards drop, and then a drift towards a steady-state. In most cases, \nthe hardware costs vastly exceed the running costs, so while they may \nnever see ROI due to the reward change, there's no benefit in stopping \nmining either.\n\nOn the other side, mining hardware update cycles are extremely \naggressive, and newer hardware runs much faster. Further, those with \nnewer hardware are likely to have the best hashrate to power ratio, and \nbe less likely to turn off or rent out their hardware.\n\nSo, in theory there may be an uncomfortable period where the hashrate \ndrops, but I would expect that drop to be much less than 50%, that most \nhardware that's turned off is not cost-effective to rent out, and that \nnewer hardware being launched would push the hashrate back up again \nwithin a sensible timeframe.\n\nRoss\n\n\nOn 25/10/2014 19:06, Alex Mizrahi wrote:\n> # Death by halving\n>\n> ## Summary\n>\n> If miner's income margin are less than 50% (which is a healthy \n> situation when mining hardware is readily available), we might \n> experience catastrophic loss of hashpower (and, more importantly, \n> catastrophic loss of security) after reward halving.\n>\n> ## A simple model\n>\n> Let's define miner's income margin as `MIM = (R-C_e)/R`, where R is \n> the total revenue miner receives over a period of time, and C_e is the \n> cost of electricity spent on mining over the same period of time. \n> (Note that for the sake of simplicity we do not take into account \n> equipment costs, amortization and other costs mining might incur.)\n>\n> Also we will assume that transaction fees collected by miner are \n> negligible as compared to the subsidy.\n>\n> Theorem 1. If for a certain miner MIM is less than 0.5 before subsidy \n> halving and bitcoin and electricity prices stay the same, then mining \n> is no longer profitable after the halving.\n>\n> Indeed, suppose the revenue after the halving is R' = R/2.\n>    MIM = (R-C_e)/R < 0.5\n>    R/2 < C_e.\n>\n>    R' = R/2 < C_e.\n>\n> If revenue after halving R' doesn't cover electricity cost, a rational \n> miner should stop mining, as it's cheaper to acquire bitcoins from the \n> market.\n>\n> ~~~\n>\n> Under these assumptions, if the majority of miners have MIM less than \n> 0.5, Bitcoin is going to experience a significant loss of hashing power.\n> But are these assumptions reasonable? We need a study a more complex \n> model which takes into account changes in bitcoin price and difficulty \n> changes over time.\n> But, first, let's analyze significance of 'loss of hashpower'.\n>\n> ## Catastrophic loss of hashpower\n>\n> Bitcoin security model relies on assumption that a malicious actor \n> cannot acquire more than 50% of network's current hashpower.\n> E.g. there is a table in Rosenfeld's _Analysis of Hashrate-Based \n> Double Spending_ paper which shows that as long as the malicious actor \n> controls only a small fraction of total hashpower, attacks have \n> well-define costs. But if the attacker-controlled hashrate is higher \n> than 50%, attacks become virtually costless, as the attacker receives \n> double-spending revenue on top of his mining revenue, and his risk is \n> close to zero.\n>\n> Note that the simple model described in the aforementioned paper \n> doesn't take into account attack's effect on the bitcoin price and the \n> price of the Bitcoin mining equipment. I hope that one day we'll see \n> more elaborate attack models, but in the meantime, we'll have to \n> resort to hand-waving.\n>\n> Consider a situation where almost all available hashpower is available \n> for a lease to the highest bidder on the open market. In this case \n> someone who owns sufficient capital could easily pull off an attack.\n>\n> But why is hashpower not available on the market? Quite likely \n> equipment owners are aware of the fact that such an attack would make \n> Bitcoin useless, and thus worthless, which would also make their \n> equipment worthless. Thus they prefer to do mining for a known mining \n> pools with good track record.\n> (Although hashpower marketplaces exist: https://nicehash.com/ they \n> aren't particularly popular.)\n>\n> Now let's consider a situation where mining bitcoins is no longer \n> profitable and the majority of hashpower became dormant, i.e. miners \n> turned off their equipment or went to mine something else. In this \n> case equipment is already nearly worthless, so people might as well \n> lease it to the highest bidder, thus enabling aforementioned attacks.\n>\n> Alternatively, the attacker might buy obsolete mining equipment from \n> people who are no longer interested in mining.\n>\n> ## Taking into account the Bitcoin price\n>\n> This is largely trivial, and thus is left as an exercise for the \n> reader. Let's just note that the Bitcoin subsidy halving is an event \n> which is known to market participants in advance, and thus it \n> shouldn't result in significant changes of the Bitcoin price,\n>\n> ## Changes in difficulty\n>\n> Different mining devices have different efficiency. After the reward \n> halving mining on some of these devices becomes unprofitable, thus \n> they will drop out, which will result in a drop of mining difficulty.\n>\n> We can greatly simplify calculations if we sum costs and rewards \n> across all miners, thus calculating average MIM before the halving: \n> `MIM = 1 - C_e/R`.\n>\n> Let's consider an equilibrium break-even situation where unprofitable \n> mining devices were turned off, thus resulting in the change in \n> electricity expenditures: `C_e' = r * C_e`. and average MIM after the \n> halving `MIM' = 0`. In this case:\n>\n>     r * C_e = R/2\n>     C_e / R = 1/2r\n>     (1 - MIM) = 1/2r\n>     r = 1/(2*(1-MIM))\n>\n> Let's evaluate this formulate for different before-halving MIM:\n>\n> 1. If `MIM = 0.5`, then `r = 1/(2*0.5) = 1`, that is, all miners can \n> remain mining.\n> 2. If `MIM = 0.25`, then `r = 1/(2*0.75) = 0.66`, the least efficient \n> miners consuming 33% of total electricity costs will drop out.\n> 3. If `MIM = 0.1`, then `r = 1/(2*0.9) = 0.55`, total electricity \n> costs drop by 45%.\n>\n> We can note that for the before-halving MIM>0, r is higher than 1/2, \n> thus less than half of total hashpower will drop out.\n>\n> The worst-case situation is when before-halving MIM is close to zero \n> and mining devices, as well as cost of electricity in different \n> places, are nearly identical, in that case approximately a half of all \n> hashpower will drop out.\n>\n> ## MIM estimation\n>\n> OK, what MIM do we expect in the long run? Is it going to be less than \n> 50% anyway?\n>\n> We can expect that people will keep buying mining devices as long as \n> it is profitable.\n>\n> Break-even condition: `R - C_e - P = 0`, where P is the price of a \n> mining device, R is the revenue it generates over its lifetime, and \n> C_e is the total cost of required electricity over its lifetime. In \n> this case, `R = C_e + P`, and thus:\n>\n>     MIM = 1 - C_e / (C_e + P)\n>\n> `f = C_e / P` is a ratio of the cost of electricity to the cost of \n> hardware, `C_e = f * P`, and thus\n>\n>     MIM = 1 - f * P / (f * P + P) = 1 - f / (f + 1) = 1 / (1 + f)\n>\n> MIM is less than 0.5 when f > 1.\n>\n> Computing f is somewhat challenging even for a concrete device, as \n> it's useful lifetime is unknown.\n>\n> Let's do some guesstimation:\n>\n> Spondoolies Tech's SP35 Yukon unit consumes 3.5 KW and costs $4000. If \n> it's useful lifetime is more than 2 years and a cost of KWh is $0.1, \n> the total expenditures on electricity will be at least $6135, thus for \n> this device we have `f > 6135/4000 > 1.5`.\n>\n> If other devices which will be sold on the market will have similar \n> specs, we will have MIM lower than 0.5. (Well, no shit.)\n>\n> ## Conclusions\n>\n> Reward halving is a deficiency in Bitcoin's design, but there is some \n> hope it won't be critical: in the equilibrium break-even situation \n> hashpower drop is less than 50%.\n> Hashrate might drop by more than 50% immediately after the halving \n> (and before difficulty is updated), thus a combination of the halving \n> and slow difficulty update pose a real threat.\n>\n>\n> ------------------------------------------------------------------------------\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141025/306eebd3/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-10-25T22:42:14",
                "message_text_only": "On 26 October 2014 00:10, Ross Nicoll <jrn at jrn.me.uk> wrote:\n\n>  I'd suggest looking at how Dogecoin's mining schedule has worked out, for\n> how halvings tend to actually affect the market. Part of Dogecoin's design\n> was that it would halve very quickly (around every 75 days, in fact), so\n> it's essentially illustrating worst case scenario.\n>\n\nYes that is an interesting data point, but it's really hard to find\ncomparables to doge, and most of its hashing is now merge mined with\nlitecoin.  Comparing doge to btc may be a case of apples and oranges.\n\n>\n>\n> Firstly, miners do not all move/shut down as a batch. Some will stay out\n> of loyalty/apathy/optimism, so there's a jolt to hashrate when the rewards\n> drop, and then a drift towards a steady-state. In most cases, the hardware\n> costs vastly exceed the running costs, so while they may never see ROI due\n> to the reward change, there's no benefit in stopping mining either.\n>\n> On the other side, mining hardware update cycles are extremely aggressive,\n> and newer hardware runs much faster. Further, those with newer hardware are\n> likely to have the best hashrate to power ratio, and be less likely to turn\n> off or rent out their hardware.\n>\n> So, in theory there may be an uncomfortable period where the hashrate\n> drops, but I would expect that drop to be much less than 50%, that most\n> hardware that's turned off is not cost-effective to rent out, and that\n> newer hardware being launched would push the hashrate back up again within\n> a sensible timeframe.\n>\n> Ross\n>\n>\n>\n> On 25/10/2014 19:06, Alex Mizrahi wrote:\n>\n>  # Death by halving\n>\n>  ## Summary\n>\n>  If miner's income margin are less than 50% (which is a healthy situation\n> when mining hardware is readily available), we might experience\n> catastrophic loss of hashpower (and, more importantly, catastrophic loss of\n> security) after reward halving.\n>\n>  ## A simple model\n>\n>  Let's define miner's income margin as `MIM = (R-C_e)/R`, where R is the\n> total revenue miner receives over a period of time, and C_e is the cost of\n> electricity spent on mining over the same period of time. (Note that for\n> the sake of simplicity we do not take into account equipment costs,\n> amortization and other costs mining might incur.)\n>\n>  Also we will assume that transaction fees collected by miner are\n> negligible as compared to the subsidy.\n>\n>  Theorem 1. If for a certain miner MIM is less than 0.5 before subsidy\n> halving and bitcoin and electricity prices stay the same, then mining is no\n> longer profitable after the halving.\n>\n>  Indeed, suppose the revenue after the halving is R' = R/2.\n>    MIM = (R-C_e)/R < 0.5\n>    R/2 < C_e.\n>\n>     R' = R/2 < C_e.\n>\n>  If revenue after halving R' doesn't cover electricity cost, a rational\n> miner should stop mining, as it's cheaper to acquire bitcoins from the\n> market.\n>\n>  ~~~\n>\n>  Under these assumptions, if the majority of miners have MIM less than\n> 0.5, Bitcoin is going to experience a significant loss of hashing power.\n> But are these assumptions reasonable? We need a study a more complex model\n> which takes into account changes in bitcoin price and difficulty changes\n> over time.\n> But, first, let's analyze significance of 'loss of hashpower'.\n>\n>  ## Catastrophic loss of hashpower\n>\n>  Bitcoin security model relies on assumption that a malicious actor\n> cannot acquire more than 50% of network's current hashpower.\n> E.g. there is a table in Rosenfeld's _Analysis of Hashrate-Based Double\n> Spending_ paper which shows that as long as the malicious actor controls\n> only a small fraction of total hashpower, attacks have well-define costs.\n> But if the attacker-controlled hashrate is higher than 50%, attacks become\n> virtually costless, as the attacker receives double-spending revenue on top\n> of his mining revenue, and his risk is close to zero.\n>\n>  Note that the simple model described in the aforementioned paper doesn't\n> take into account attack's effect on the bitcoin price and the price of the\n> Bitcoin mining equipment. I hope that one day we'll see more elaborate\n> attack models, but in the meantime, we'll have to resort to hand-waving.\n>\n>  Consider a situation where almost all available hashpower is available\n> for a lease to the highest bidder on the open market. In this case someone\n> who owns sufficient capital could easily pull off an attack.\n>\n>  But why is hashpower not available on the market? Quite likely equipment\n> owners are aware of the fact that such an attack would make Bitcoin\n> useless, and thus worthless, which would also make their equipment\n> worthless. Thus they prefer to do mining for a known mining pools with good\n> track record.\n> (Although hashpower marketplaces exist: https://nicehash.com/ they aren't\n> particularly popular.)\n>\n>  Now let's consider a situation where mining bitcoins is no longer\n> profitable and the majority of hashpower became dormant, i.e. miners turned\n> off their equipment or went to mine something else. In this case equipment\n> is already nearly worthless, so people might as well lease it to the\n> highest bidder, thus enabling aforementioned attacks.\n>\n>  Alternatively, the attacker might buy obsolete mining equipment from\n> people who are no longer interested in mining.\n>\n>  ## Taking into account the Bitcoin price\n>\n>  This is largely trivial, and thus is left as an exercise for the reader.\n> Let's just note that the Bitcoin subsidy halving is an event which is known\n> to market participants in advance, and thus it shouldn't result in\n> significant changes of the Bitcoin price,\n>\n>  ## Changes in difficulty\n>\n>  Different mining devices have different efficiency. After the reward\n> halving mining on some of these devices becomes unprofitable, thus they\n> will drop out, which will result in a drop of mining difficulty.\n>\n>  We can greatly simplify calculations if we sum costs and rewards across\n> all miners, thus calculating average MIM before the halving: `MIM = 1 -\n> C_e/R`.\n>\n>  Let's consider an equilibrium break-even situation where unprofitable\n> mining devices were turned off, thus resulting in the change in electricity\n> expenditures: `C_e' = r * C_e`. and average MIM after the halving `MIM' =\n> 0`. In this case:\n>\n>      r * C_e = R/2\n>     C_e / R = 1/2r\n>     (1 - MIM) = 1/2r\n>     r = 1/(2*(1-MIM))\n>\n>  Let's evaluate this formulate for different before-halving MIM:\n>\n>  1. If `MIM = 0.5`, then `r = 1/(2*0.5) = 1`, that is, all miners can\n> remain mining.\n> 2. If `MIM = 0.25`, then `r = 1/(2*0.75) = 0.66`, the least efficient\n> miners consuming 33% of total electricity costs will drop out.\n> 3. If `MIM = 0.1`, then `r = 1/(2*0.9) = 0.55`, total electricity costs\n> drop by 45%.\n>\n>  We can note that for the before-halving MIM>0, r is higher than 1/2,\n> thus less than half of total hashpower will drop out.\n>\n>  The worst-case situation is when before-halving MIM is close to zero and\n> mining devices, as well as cost of electricity in different places, are\n> nearly identical, in that case approximately a half of all hashpower will\n> drop out.\n>\n>  ## MIM estimation\n>\n>  OK, what MIM do we expect in the long run? Is it going to be less than\n> 50% anyway?\n>\n>  We can expect that people will keep buying mining devices as long as it\n> is profitable.\n>\n>  Break-even condition: `R - C_e - P = 0`, where P is the price of a\n> mining device, R is the revenue it generates over its lifetime, and C_e is\n> the total cost of required electricity over its lifetime. In this case, `R\n> = C_e + P`, and thus:\n>\n>      MIM = 1 - C_e / (C_e + P)\n>\n>  `f = C_e / P` is a ratio of the cost of electricity to the cost of\n> hardware, `C_e = f * P`, and thus\n>\n>      MIM = 1 - f * P / (f * P + P) = 1 - f / (f + 1) = 1 / (1 + f)\n>\n>  MIM is less than 0.5 when f > 1.\n>\n>  Computing f is somewhat challenging even for a concrete device, as it's\n> useful lifetime is unknown.\n>\n>  Let's do some guesstimation:\n>\n>  Spondoolies Tech's SP35 Yukon unit consumes 3.5 KW and costs $4000. If\n> it's useful lifetime is more than 2 years and a cost of KWh is $0.1, the\n> total expenditures on electricity will be at least $6135, thus for this\n> device we have `f > 6135/4000 > 1.5`.\n>\n>  If other devices which will be sold on the market will have similar\n> specs, we will have MIM lower than 0.5. (Well, no shit.)\n>\n>  ## Conclusions\n>\n>  Reward halving is a deficiency in Bitcoin's design, but there is some\n> hope it won't be critical: in the equilibrium break-even situation\n> hashpower drop is less than 50%.\n> Hashrate might drop by more than 50% immediately after the halving (and\n> before difficulty is updated), thus a combination of the halving and slow\n> difficulty update pose a real threat.\n>\n>\n> ------------------------------------------------------------------------------\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141026/c5d1a032/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "death by halving",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Alexander Leishman",
                "Adam Back",
                "Thomas Zander",
                "Ferdinando M. Ametrano",
                "Alex Mizrahi",
                "Ross Nicoll",
                "Gavin Andresen",
                "Melvin Carvalho"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 49716
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Core 0.10 release schedule",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-10-26T07:57:12",
                "message_text_only": "Now that headers-first is merged it would be good to do a 0.10 release\nsoon. Not *too* soon as a major code change like that takes some time\nto pan out, but I'd like to propose the following:\n\n- November 18: split off 0.10 branch, translation message and feature freeze\n- December 1: release 10.0rc1, start Release Candidate cycle\n\nThat leaves three weeks until the freeze. After the release and branch\nsplit-off, the RC cycle will run until no critical problems are found.\nFor major releases this is usually more painful than for stable\nreleases, but if we can keep to these dates I'd expect the final\nrelease no later than January 2015.\n\nLet's aim to have any pending development for 0.10 merged before\nNovember 18. Major work that I'm aware of is:\n\n- BIP62 (#5134, #5065)\n- Verification library (#5086, #5118, #5119)\n- Gitian descriptors overhaul, so that Gitian depends = Travis depends (#4727)\n- Autoprune (#4701)\n- Add \"warmup mode\" for RPC server (#5007)\n- Add unauthenticated HTTP REST interface (#2844)\n\nLet me know if there is anything else you think is ready (and not too\nrisky) to be in 0.10. You can help along the development process by\nparticipating in testing and reviewing of the mentioned pull requests,\nor just by testing master and reporting bugs and regressions.\n\nNote: I intended the 0.10 release to be much sooner. The reason that\nthis didn't pan out is that I insisted on including headers-first, and\nthis took longer than expected. There seems to be a preference to\nswitch to a fixed (instead of feature-based) 6-month major release\nschedule, ie\n\n- July 2015: 0.11.0 (or whatever N+1 release is called)\n- January 2016: 0.12.0 (or whatever N+2 release is called)\n- July 2016: 0.13.0 (or whatever N+3 release is called)\n\nWladimir"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-10-26T08:53:37",
                "message_text_only": "On Sunday, October 26, 2014 7:57:12 AM Wladimir wrote:\n> Let me know if there is anything else you think is ready (and not too\n> risky) to be in 0.10.\n\nAt the very least, we need:\n  #5106 Bugfix: submitblock: Use a temporary CValidationState to determine ...\n  #5103 CreateNewBlock and miner_tests: Also check generated template is ...\n  #5078 Bugfix: CreateNewBlock: Check that active chain has a valid tip ...\n        (or at least some conclusion for the problem discussed therein)\n\nHarmless/No reason not to have:\n  #3727 RPC: submitblock: Support for returning specific rejection reasons\n  #1816 Support for BIP 23 block proposal\n  #5144 Qt: Elaborate on signverify message dialog warning\n  #5071 Introduce CNodePolicy for putting isolated node policy code and ...\n        (futher commits exist that should ideally get in after this is merged)\n\nDebatable (but harmless, and miners seem to want it):\n  #5077 Enable customising node policy for datacarrier data size with a ...\n\nLuke"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-27T07:31:32",
                "message_text_only": "On Sun, Oct 26, 2014 at 9:53 AM, Luke Dashjr <luke at dashjr.org> wrote:\n> On Sunday, October 26, 2014 7:57:12 AM Wladimir wrote:\n>> Let me know if there is anything else you think is ready (and not too\n>> risky) to be in 0.10.\n>\n> At the very least, we need:\n>   #5106 Bugfix: submitblock: Use a temporary CValidationState to determine ...\n>   #5103 CreateNewBlock and miner_tests: Also check generated template is ...\n>   #5078 Bugfix: CreateNewBlock: Check that active chain has a valid tip ...\n>         (or at least some conclusion for the problem discussed therein)\n\nOK\n\n> Harmless/No reason not to have:\n>   #3727 RPC: submitblock: Support for returning specific rejection reasons\n>   #1816 Support for BIP 23 block proposal\n>   #5144 Qt: Elaborate on signverify message dialog warning\n>   #5071 Introduce CNodePolicy for putting isolated node policy code and ...\n>         (futher commits exist that should ideally get in after this is merged)\n\nACK on the UI change,\n\nI think it would be best to let the full-blown \"miner policy class\"\nwait for 0.11.\n\n> Debatable (but harmless, and miners seem to want it):\n>   #5077 Enable customising node policy for datacarrier data size with a ...\n\nOK, that's a low-risk change, it just makes what is now a constant configurable.\n\nWladimir"
            },
            {
                "author": "odinn",
                "date": "2014-10-26T08:55:14",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nQ., re. transaction fee changes / txconfirmtarget described at\nhttps://github.com/bitcoin/bitcoin/blob/c8a25189bcb1381eddf46b9a9743ba48e929439e/doc/release-notes.md\n\n(for Core 0.10)\n\n~ does this include the floating fees for 0.10 as described at\nhttps://bitcoinfoundation.org/2014/07/floating-fees-for-0-10/ ?\n\nthanks in advance for clarifications\n\nWladimir wrote:\n> Now that headers-first is merged it would be good to do a 0.10\n> release soon. Not *too* soon as a major code change like that takes\n> some time to pan out, but I'd like to propose the following:\n> \n> - November 18: split off 0.10 branch, translation message and\n> feature freeze - December 1: release 10.0rc1, start Release\n> Candidate cycle\n> \n> That leaves three weeks until the freeze. After the release and\n> branch split-off, the RC cycle will run until no critical problems\n> are found. For major releases this is usually more painful than for\n> stable releases, but if we can keep to these dates I'd expect the\n> final release no later than January 2015.\n> \n> Let's aim to have any pending development for 0.10 merged before \n> November 18. Major work that I'm aware of is:\n> \n> - BIP62 (#5134, #5065) - Verification library (#5086, #5118,\n> #5119) - Gitian descriptors overhaul, so that Gitian depends =\n> Travis depends (#4727) - Autoprune (#4701) - Add \"warmup mode\" for\n> RPC server (#5007) - Add unauthenticated HTTP REST interface\n> (#2844)\n> \n> Let me know if there is anything else you think is ready (and not\n> too risky) to be in 0.10. You can help along the development\n> process by participating in testing and reviewing of the mentioned\n> pull requests, or just by testing master and reporting bugs and\n> regressions.\n> \n> Note: I intended the 0.10 release to be much sooner. The reason\n> that this didn't pan out is that I insisted on including\n> headers-first, and this took longer than expected. There seems to\n> be a preference to switch to a fixed (instead of feature-based)\n> 6-month major release schedule, ie\n> \n> - July 2015: 0.11.0 (or whatever N+1 release is called) - January\n> 2016: 0.12.0 (or whatever N+2 release is called) - July 2016:\n> 0.13.0 (or whatever N+3 release is called)\n> \n> Wladimir\n> \n> ------------------------------------------------------------------------------\n>\n> \n_______________________________________________\n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJUTLbyAAoJEGxwq/inSG8CzkgH/jqh3+RxdFR1sFn8PENbUvKN\nM3GUF3otRDenuVOY6Gbs1Sv3IBToC1zAR1RdktYeTrfQlCgO89ybASJapqQ6H8XP\n7STY99dtZgRxkSwsE5bMHceVlHlSrtCBoPCZpPte9+8KVZUpQ/WNNPhjU84sQTj5\nn2wkG7GdtD4vEoLHgLo1yEMoeRcwS8eb7kUeYAdRQbAOdNBqUkcs0FW2yvAnk//M\n/ubtWoWr7c+Ksozp45I7rtB6UL1YrYMBJURwKsCc62mpnc1rkvedRmQVC1KO/em1\n8nAvobRUbrExPtNO8+AkWZsyiSIR+PANV4h3IOHbERC6L8iGrD/QiUjuAjXXwSw=\n=tplQ\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-26T09:10:54",
                "message_text_only": "On Sun, Oct 26, 2014 at 9:55 AM, odinn <odinn.cyberguerrilla at riseup.net> wrote:\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n> Q., re. transaction fee changes / txconfirmtarget described at\n> https://github.com/bitcoin/bitcoin/blob/c8a25189bcb1381eddf46b9a9743ba48e929439e/doc/release-notes.md\n>\n> (for Core 0.10)\n>\n> ~ does this include the floating fees for 0.10 as described at\n> https://bitcoinfoundation.org/2014/07/floating-fees-for-0-10/ ?\n>\n> thanks in advance for clarifications\n\nYes, floating/smart fees has been merged a while ago\n\n- https://github.com/bitcoin/bitcoin/pull/3959\n- https://github.com/bitcoin/bitcoin/pull/4250\n\nWladimir"
            },
            {
                "author": "odinn",
                "date": "2014-10-26T18:17:33",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nThanks,\n\nFollowup question on https://github.com/bitcoin/bitcoin/pull/3959 :\n\nThis describes current dust change handling:\n\n(gavinandresen)\nhttps://github.com/bitcoin/bitcoin/pull/3959/files#r13494256\n\nRelated Question:  This describes how wallets would let you know a\ntransaction is 'precious' with a flag --\n(jgarzik)\nhttps://github.com/bitcoin/bitcoin/pull/3753#issuecomment-49464772\n\n- -- however, it doesn't appear to be part of 0.10 anymore ~ what is it\nthat would keep it from being incorporated into 0.10?\n(or was that addressed by a later commit?)\n\nPossibly also related (suggested dusting feature):\nhttps://github.com/bitcoin/bitcoin/issues/4079#issuecomment-41010593\n\nThanks in advance for your responses.\n\n\nWladimir wrote:\n> On Sun, Oct 26, 2014 at 9:55 AM, odinn\n> <odinn.cyberguerrilla at riseup.net> wrote:\n>> -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA512\n>> \n>> Q., re. transaction fee changes / txconfirmtarget described at \n>> https://github.com/bitcoin/bitcoin/blob/c8a25189bcb1381eddf46b9a9743ba48e929439e/doc/release-notes.md\n>>\n>>\n>> \n(for Core 0.10)\n>> \n>> ~ does this include the floating fees for 0.10 as described at \n>> https://bitcoinfoundation.org/2014/07/floating-fees-for-0-10/ ?\n>> \n>> thanks in advance for clarifications\n> \n> Yes, floating/smart fees has been merged a while ago\n> \n> - https://github.com/bitcoin/bitcoin/pull/3959 -\n> https://github.com/bitcoin/bitcoin/pull/4250\n> \n> Wladimir\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJUTTq8AAoJEGxwq/inSG8C8PYH/jrZIgecpEiwUYdRGT/dxvrE\nqHrlsJz8aPY/E/ojNE4MY4Con5seH2IRL+qg14pZvIQNJSipRYejh0BeqQ2YkfAF\nleEt8PlpblNqV0Ieq1VmdJK5wnF3crNZsNdPv73Z7UXplXo8sG+lYGENgC11s+wN\nQI29F3Kkrqk66aa6VmRbNzRIgL1JYfTkZLba9ApZNxJsugeOgmlOQw6+q5hgChKy\nlxN5s+P/wohH0n047ksYdiMnXbZwPL2scUEN87D74KYqYdCa6AB7vMkLETO2msSg\nndC9ge8LfTODlEuFA9rQ8CgLAkwVWCaCbqph7iqTt6Cvdnqeo9XvlrpcB2B31hI=\n=xn6P\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-10-26T11:44:06",
                "message_text_only": "On 26 October 2014 08:57, Wladimir <laanwj at gmail.com> wrote:\n\n> Now that headers-first is merged it would be good to do a 0.10 release\n> soon. Not *too* soon as a major code change like that takes some time\n> to pan out, but I'd like to propose the following:\n>\n> - November 18: split off 0.10 branch, translation message and feature\n> freeze\n> - December 1: release 10.0rc1, start Release Candidate cycle\n>\n> That leaves three weeks until the freeze. After the release and branch\n> split-off, the RC cycle will run until no critical problems are found.\n> For major releases this is usually more painful than for stable\n> releases, but if we can keep to these dates I'd expect the final\n> release no later than January 2015.\n>\n> Let's aim to have any pending development for 0.10 merged before\n> November 18. Major work that I'm aware of is:\n>\n> - BIP62 (#5134, #5065)\n> - Verification library (#5086, #5118, #5119)\n> - Gitian descriptors overhaul, so that Gitian depends = Travis depends\n> (#4727)\n> - Autoprune (#4701)\n> - Add \"warmup mode\" for RPC server (#5007)\n> - Add unauthenticated HTTP REST interface (#2844)\n>\n\nThanks for the update.\n\nI was even unaware of of #2844 : 'The beginnings of a block explorer-style\nAPI for bitcoind.'\n\nhttps://github.com/bitcoin/bitcoin/pull/2844\n\nSeems to me like an important piece of work, Im glad it's finally made the\ncut.\n\nFirstly, apologies in coming in late to the conversation.  As I am also\nworking on a REST API for electronic coins.  Some questions:\n\n1. Is there a BIP, or some other doc (e.g. gist), outlining the REST output\ne.g. the response format and MIME types.  Or just compile from source?\n\n2. How set in stone is v1 of the the going forward?  PS I support @maaku's\ncomments re: \"/api/v1/\" -- tho I guess it is too late for that now.\n\n3. Would there be any support to develop this interface into something that\nwould be W3C standards compliant, or reviewed by the REST community.  So\nfor example a context can be provided to self document the terms (something\nI've almost completed) and would allow standardization of block explorer\nand bitcoind outputs.  Right now every explorer seems to have a different\nJSON output.\n\nGreat work!  Looking forward to seeing this go live and how it devlops!\n\n\n>\n> Let me know if there is anything else you think is ready (and not too\n> risky) to be in 0.10. You can help along the development process by\n> participating in testing and reviewing of the mentioned pull requests,\n> or just by testing master and reporting bugs and regressions.\n>\n> Note: I intended the 0.10 release to be much sooner. The reason that\n> this didn't pan out is that I insisted on including headers-first, and\n> this took longer than expected. There seems to be a preference to\n> switch to a fixed (instead of feature-based) 6-month major release\n> schedule, ie\n>\n> - July 2015: 0.11.0 (or whatever N+1 release is called)\n> - January 2016: 0.12.0 (or whatever N+2 release is called)\n> - July 2016: 0.13.0 (or whatever N+3 release is called)\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141026/9b77e9de/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-10-27T07:49:02",
                "message_text_only": "On Sun, Oct 26, 2014 at 12:44 PM, Melvin Carvalho\n<melvincarvalho at gmail.com> wrote:\n\n> Firstly, apologies in coming in late to the conversation.  As I am also\n> working on a REST API for electronic coins.  Some questions:\n>\n> 1. Is there a BIP, or some other doc (e.g. gist), outlining the REST output\n> e.g. the response format and MIME types.  Or just compile from source?\n\nSee the opening post from @jgarzik, it has some documentation on how\nto use the API.\n\nIt would be nice to have some write-up about the current functionality\nin the release notes, but there currently is none.\n\nIt's a RPC-side change, not a P2P-side change so it doesn't require a BIP.\n\n> 2. How set in stone is v1 of the the going forward?  PS I support @maaku's\n> comments re: \"/api/v1/\" -- tho I guess it is too late for that now.\n> 3. Would there be any support to develop this interface into something that\n> would be W3C standards compliant, or reviewed by the REST community.  So for\n> example a context can be provided to self document the terms (something I've\n> almost completed) and would allow standardization of block explorer and\n> bitcoind outputs.  Right now every explorer seems to have a different JSON\n> output.\n\nIt's not too late, it's not been merged yet.\n\nThough a W3C standard takes a long time to pan out, and it may be more\nuseful to have this available rather than wait for the API to be\nstandardized (which means this will need to be postponed at least one\nversion). As you say, a new interface be added later under another\nURI.\n\nNote that we're only interested in exposing read-only, public data\nwhich is already available in Bitcoin Core's internals.\nWe're not aiming to add a fully-fledged block explorer with (say)\naddress indexes. Although that could be part of the standard if it\nallows implementations to support just a subset.\n\nAnyhow - please coordinate this with Jeff Garzik, it's better to work\ntogether here.\n\nWladimir"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-10-27T11:24:13",
                "message_text_only": "On 27 October 2014 08:49, Wladimir <laanwj at gmail.com> wrote:\n\n> On Sun, Oct 26, 2014 at 12:44 PM, Melvin Carvalho\n> <melvincarvalho at gmail.com> wrote:\n>\n> > Firstly, apologies in coming in late to the conversation.  As I am also\n> > working on a REST API for electronic coins.  Some questions:\n> >\n> > 1. Is there a BIP, or some other doc (e.g. gist), outlining the REST\n> output\n> > e.g. the response format and MIME types.  Or just compile from source?\n>\n> See the opening post from @jgarzik, it has some documentation on how\n> to use the API.\n>\n> It would be nice to have some write-up about the current functionality\n> in the release notes, but there currently is none.\n>\n> It's a RPC-side change, not a P2P-side change so it doesn't require a BIP.\n>\n\nThanks.  Yes, I worked this out after looking at the code.\n\nI would be happy to help with documentation.\n\n\n>\n> > 2. How set in stone is v1 of the the going forward?  PS I support\n> @maaku's\n> > comments re: \"/api/v1/\" -- tho I guess it is too late for that now.\n> > 3. Would there be any support to develop this interface into something\n> that\n> > would be W3C standards compliant, or reviewed by the REST community.  So\n> for\n> > example a context can be provided to self document the terms (something\n> I've\n> > almost completed) and would allow standardization of block explorer and\n> > bitcoind outputs.  Right now every explorer seems to have a different\n> JSON\n> > output.\n>\n> It's not too late, it's not been merged yet.\n>\n> Though a W3C standard takes a long time to pan out, and it may be more\n> useful to have this available rather than wait for the API to be\n> standardized (which means this will need to be postponed at least one\n> version). As you say, a new interface be added later under another\n> URI.\n>\n\nAgree.  I think these changes are great for 0.10.\n\n\n>\n> Note that we're only interested in exposing read-only, public data\n> which is already available in Bitcoin Core's internals.\n> We're not aiming to add a fully-fledged block explorer with (say)\n> address indexes. Although that could be part of the standard if it\n> allows implementations to support just a subset.\n>\n\nGot it thanks.\n\n\n>\n> Anyhow - please coordinate this with Jeff Garzik, it's better to work\n> together here.\n>\n\nWill do.  Work in this area is ongoing, both in terms of\ncoding/patches/testing and documentation.\n\nDo you think it would a reasonable idea to put down some thoughts and\nproposals in a BIP?\n\n\n>\n> Wladimir\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141027/9f26ee82/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-10-27T11:37:47",
                "message_text_only": "On Mon, Oct 27, 2014 at 7:24 AM, Melvin Carvalho\n<melvincarvalho at gmail.com> wrote:\n> Do you think it would a reasonable idea to put down some thoughts and\n> proposals in a BIP?\n\nIt would certainly be nice to start with a document that reflects the\nnew REST interface.  That makes a good starting point for further\ndiscussion.\n\nIn general the interface exports what information is already\navailable.  As Wladimir notes, there is no plan to turn this into a\nfull fledged block explorer, if that implies adding indices etc.\n\nFeedback on the HTTP headers and form, and additional thoughts &\nproposals are welcome.  My pull request is intended to present\nsomething minimal, that is easy to review and merge.  My own list of\nfurther to-dos includes\n\n* last-modified and etag headers\n* export UTXOs a la Mike Hearn's getutxos query\n* eventually rebuild the RPC server to something multithreaded a la\nhttps://github.com/jgarzik/rpcsrv\n\nPR #2844 @ https://github.com/bitcoin/bitcoin/pull/2844\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.10 release schedule",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "odinn",
                "Wladimir",
                "Luke Dashjr",
                "Melvin Carvalho"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 19090
        }
    },
    {
        "title": "[Bitcoin-development] Reworking the policy estimation code (fee estimates)",
        "thread_messages": [
            {
                "author": "Alex Morcos",
                "date": "2014-10-27T19:33:45",
                "message_text_only": "I've been playing around with the code for estimating fees and found a few\nissues with the existing code.   I think this will address several\nobservations that the estimates returned by the existing code appear to be\ntoo high.  For instance see @cozz in Issue 4866\n<https://github.com/bitcoin/bitcoin/issues/4866>.\n\nHere's what I found:\n\n1) We're trying to answer the question of what fee X you need in order to\nbe confirmed within Y blocks.   The existing code tries to do that by\ncalculating the median fee for each possible Y instead of gathering\nstatistics for each possible X.  That approach is statistically incorrect.\nIn fact since certain X's appear so frequently, they tend to dominate the\nstatistics at all possible Y's (a fee rate of about 40k satoshis)\n\n2) The existing code then sorts all of the data points in all of the\nbuckets together by fee rate and then reassigns buckets before calculating\nthe medians for each confirmation bucket.  The sorting forces a\nrelationship where there might not be one.  Imagine some other variable,\nsuch as first 2 bytes of the transaction hash.  If we sorted these and then\nused them to give estimates, we'd see a clear but false relationship where\ntransactions with low starting bytes in their hashes took longer to confirm.\n\n3) Transactions which don't have all their inputs available (because they\ndepend on other transactions in the mempool) aren't excluded from the\ncalculations.  This skews the results.\n\nI rewrote the code to follow a different approach.  I divided all possible\nfee rates up into fee rate buckets (I spaced these logarithmically).  For\neach transaction that was confirmed, I updated the appropriate fee rate\nbucket with how many blocks it took to confirm that transaction.\n\nThe hardest part of doing this fee estimation is to decide what the\nquestion really is that we're trying to answer.  I took the approach that\nif you are asking what fee rate I need to be confirmed within Y blocks,\nthen what you would like to know is the lowest fee rate such that a\nrelatively high percentage of transactions of that fee rate are confirmed\nwithin Y blocks. Since even the highest fee transactions are confirmed\nwithin the first block only 90-93% of the time, I decided to use 80% as my\ncutoff.  So now to answer \"estimatefee Y\", I scan through all of the fee\nbuckets from the most expensive down until I find the last bucket with >80%\nof the transactions confirmed within Y blocks.\n\nUnfortunately we still have the problem of not having enough data points\nfor non-typical fee rates, and so it requires gathering a lot of data to\ngive reasonable answers. To keep all of these data points in a circular\nbuffer and then sort them for every analysis (or after every new block) is\nexpensive.  So instead I adopted the approach of keeping an exponentially\ndecaying moving average for each bucket.  I used a decay of .998 which\nrepresents a half life of 374 blocks or about 2.5 days.  Also if a bucket\ndoesn't have very many transactions, I combine it with the next bucket.\n\nHere is a link <https://github.com/morcos/bitcoin/pull/3> to the code.  I\ncan create an actual pull request if there is consensus that it makes sense\nto do so.\n\nI've attached a graph comparing the estimates produced for 1-3\nconfirmations by the new code and the old code.  I did apply the patch to\nfix issue 3 above to the old code first.  The new code is in green and the\nfixed code is in purple.  The Y axis is a log scale of feerate in satoshis\nper KB and the X axis is chain height.  The new code produces the same\nestimates for 2 and 3 confirmations (the answers are effectively quantized\nby bucket).\n\nI've also completely reworked smartfees.py.  It turns out to require many\nmany more transactions are put through in order to have statistically\nsignificant results, so the test is quite slow to run (about 3 mins on my\nmachine).\n\nI've also been running a real world test, sending transactions of various\nfee rates and seeing how long they took to get confirmed.  After almost 200\ntx's at each fee rate, here are the results so far:\n\nFee rate 1100   Avg blocks to confirm 2.30 NumBlocks:% confirmed 1: 0.528\n2: 0.751 3: 0.870\nFee rate 2500   Avg blocks to confirm 2.22 NumBlocks:% confirmed 1: 0.528\n2: 0.766 3: 0.880\nFee rate 5000   Avg blocks to confirm 1.93 NumBlocks:% confirmed 1: 0.528\n2: 0.782 3: 0.891\nFee rate 10000  Avg blocks to confirm 1.67 NumBlocks:% confirmed 1: 0.569\n2: 0.844 3: 0.943\nFee rate 20000  Avg blocks to confirm 1.33 NumBlocks:% confirmed 1: 0.715\n2: 0.963 3: 0.989\nFee rate 30000  Avg blocks to confirm 1.27 NumBlocks:% confirmed 1: 0.751\n2: 0.974 3: 1.0\nFee rate 40000  Avg blocks to confirm 1.25 NumBlocks:% confirmed 1: 0.792\n2: 0.953 3: 0.994\nFee rate 60000  Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.875\n2: 1.0   3: 1.0\nFee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901\n2: 1.0   3: 1.0\nFee rate 300000 Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.886\n2: 0.989 3: 1.0\n\n\nAlex\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141027/70128962/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: Fee Estimation Comparison.jpg\nType: image/jpeg\nSize: 90822 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141027/70128962/attachment.jpg>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-10-28T09:55:00",
                "message_text_only": "Could you explain a little further why you think the current approach is\nstatistically incorrect? There's no doubt that the existing estimates the\nsystem produces are garbage, but that's because it assumes players in the\nfee market are rational and they are not.\n\nFwiw bitcoinj 0.12.1 applies the January fee drop and will attach fee of\nonly 1000 satoshis per kB by default. I also have a program that measures\nconfirmation time for a given fee level (with fresh coins so there's no\npriority) and it aligns with your findings, most txns confirm within a\ncouple of blocks.\n\nUltimately there isn't any easy method to stop people throwing money away.\nBitcoinj will probably continue to use hard coded fee values for now to try\nand contribute to market sanity in the hope it makes smartfees smarter.\nOn 27 Oct 2014 19:34, \"Alex Morcos\" <morcos at gmail.com> wrote:\n\n> I've been playing around with the code for estimating fees and found a few\n> issues with the existing code.   I think this will address several\n> observations that the estimates returned by the existing code appear to be\n> too high.  For instance see @cozz in Issue 4866\n> <https://github.com/bitcoin/bitcoin/issues/4866>.\n>\n> Here's what I found:\n>\n> 1) We're trying to answer the question of what fee X you need in order to\n> be confirmed within Y blocks.   The existing code tries to do that by\n> calculating the median fee for each possible Y instead of gathering\n> statistics for each possible X.  That approach is statistically incorrect.\n> In fact since certain X's appear so frequently, they tend to dominate the\n> statistics at all possible Y's (a fee rate of about 40k satoshis)\n>\n> 2) The existing code then sorts all of the data points in all of the\n> buckets together by fee rate and then reassigns buckets before calculating\n> the medians for each confirmation bucket.  The sorting forces a\n> relationship where there might not be one.  Imagine some other variable,\n> such as first 2 bytes of the transaction hash.  If we sorted these and then\n> used them to give estimates, we'd see a clear but false relationship where\n> transactions with low starting bytes in their hashes took longer to confirm.\n>\n> 3) Transactions which don't have all their inputs available (because they\n> depend on other transactions in the mempool) aren't excluded from the\n> calculations.  This skews the results.\n>\n> I rewrote the code to follow a different approach.  I divided all possible\n> fee rates up into fee rate buckets (I spaced these logarithmically).  For\n> each transaction that was confirmed, I updated the appropriate fee rate\n> bucket with how many blocks it took to confirm that transaction.\n>\n> The hardest part of doing this fee estimation is to decide what the\n> question really is that we're trying to answer.  I took the approach that\n> if you are asking what fee rate I need to be confirmed within Y blocks,\n> then what you would like to know is the lowest fee rate such that a\n> relatively high percentage of transactions of that fee rate are confirmed\n> within Y blocks. Since even the highest fee transactions are confirmed\n> within the first block only 90-93% of the time, I decided to use 80% as my\n> cutoff.  So now to answer \"estimatefee Y\", I scan through all of the fee\n> buckets from the most expensive down until I find the last bucket with >80%\n> of the transactions confirmed within Y blocks.\n>\n> Unfortunately we still have the problem of not having enough data points\n> for non-typical fee rates, and so it requires gathering a lot of data to\n> give reasonable answers. To keep all of these data points in a circular\n> buffer and then sort them for every analysis (or after every new block) is\n> expensive.  So instead I adopted the approach of keeping an exponentially\n> decaying moving average for each bucket.  I used a decay of .998 which\n> represents a half life of 374 blocks or about 2.5 days.  Also if a bucket\n> doesn't have very many transactions, I combine it with the next bucket.\n>\n> Here is a link <https://github.com/morcos/bitcoin/pull/3> to the code.  I\n> can create an actual pull request if there is consensus that it makes sense\n> to do so.\n>\n> I've attached a graph comparing the estimates produced for 1-3\n> confirmations by the new code and the old code.  I did apply the patch to\n> fix issue 3 above to the old code first.  The new code is in green and the\n> fixed code is in purple.  The Y axis is a log scale of feerate in satoshis\n> per KB and the X axis is chain height.  The new code produces the same\n> estimates for 2 and 3 confirmations (the answers are effectively quantized\n> by bucket).\n>\n> I've also completely reworked smartfees.py.  It turns out to require many\n> many more transactions are put through in order to have statistically\n> significant results, so the test is quite slow to run (about 3 mins on my\n> machine).\n>\n> I've also been running a real world test, sending transactions of various\n> fee rates and seeing how long they took to get confirmed.  After almost 200\n> tx's at each fee rate, here are the results so far:\n>\n> Fee rate 1100   Avg blocks to confirm 2.30 NumBlocks:% confirmed 1: 0.528\n> 2: 0.751 3: 0.870\n> Fee rate 2500   Avg blocks to confirm 2.22 NumBlocks:% confirmed 1: 0.528\n> 2: 0.766 3: 0.880\n> Fee rate 5000   Avg blocks to confirm 1.93 NumBlocks:% confirmed 1: 0.528\n> 2: 0.782 3: 0.891\n> Fee rate 10000  Avg blocks to confirm 1.67 NumBlocks:% confirmed 1: 0.569\n> 2: 0.844 3: 0.943\n> Fee rate 20000  Avg blocks to confirm 1.33 NumBlocks:% confirmed 1: 0.715\n> 2: 0.963 3: 0.989\n> Fee rate 30000  Avg blocks to confirm 1.27 NumBlocks:% confirmed 1: 0.751\n> 2: 0.974 3: 1.0\n> Fee rate 40000  Avg blocks to confirm 1.25 NumBlocks:% confirmed 1: 0.792\n> 2: 0.953 3: 0.994\n> Fee rate 60000  Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.875\n> 2: 1.0   3: 1.0\n> Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901\n> 2: 1.0   3: 1.0\n> Fee rate 300000 Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.886\n> 2: 0.989 3: 1.0\n>\n>\n> Alex\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/2150a519/attachment.html>"
            },
            {
                "author": "Alex Morcos",
                "date": "2014-10-28T12:12:57",
                "message_text_only": "Yeah, so to explain points 1 and 2 a bit more\n\n1)  It's about what question you are trying to answer.  The existing code\ntries to answer the question of what is the median fee of a transaction\nthat gets confirmed in Y blocks.  It turns out that is not a very good\nproxy for the question we really want to know which is what is the fee that\nis necessary such that we are likely to be confirmed within Y blocks.\nWhat happens is that there are so many transactions of the 40k satoshis/kB\nfeerate that they turn out to be the dominant data points of transactions\nthat are confirmed after 2 blocks, 3 blocks, etc. and not only 1 block.\n\nSo for example.   A hypothetical sample of 20 txs might find 2 of your 1k\nsat/kB txs and 18 of the 40k sat/kB txs.  Perhaps 15 of the 40k txs are\nconfirmed in 1 block and the other 3 in 2 blocks, and 1 of the 1k txs in 1\nblock and the other in 2 blocks.  So if you analyze the data by\nconfirmation time, you find that 15/16 1-conf txs are 40k and 3/4 2-conf\ntxs are 40k, so the median feerate is 40k for both 1 and 2 confirmations.\nInstead, the correct thing to do is analyze the data by feerate.  Doing\nthat, we find that 15/18 (83%) of 40k txs are confirmed in 1 block and 1/2\n(50%) 1k txs are.  But 100% of both are confirmed within two blocks.  This\nleads you to say, you need 40k feerate if you want to get confirmed in 1\nblock but 1k is sufficient if you want to be confirmed in 2 blocks.\n\nPut another way, Let's imagine you wanted to know how tall you have to be\nno longer fit in the coach seats on an airplane.   If you looked at the\nmedian height of all people in coach and all people in first class, you\nwould see that they were about the same, and you would get a confusing\nanswer.  Instead you have to bin by height, and look at the percentage of\npeople of each height that fly first-class vs coach, and I'd guess that by\nthe time you got up to say 6'8\" you were finding greater than 50% of the\npeople flying first class.\n\n2) The code also presupposes that higher fee rate transactions must be\nconfirmed quicker.  And so in addition to binning all transactions by\nconfirmation time, the code then sorts all of the transactions and re-bins\nthem such that the highest fee transactions are all in the 1-confirmation\nbin and the lowest fee transactions are all in the 25-confirmation bin.  If\nwe'd been trying to predict whether the first 2 bytes of transaction hash\ninfluenced our confirmation time, we would have started by having a random\ndistribution of hashes in each confirmation bin, but then after doing the\nsorting, we'd of course have found that the \"median hash\" of the\n1-confirmation transactions was higher, because we sorted it to make that\nthe case.\n\nIn the airplane example this would have been equivalent to taking the\nmedian height of the 20 tallest people on the plane (assuming first class\nis 20 seats) and saying that was the height for first class and the median\nheight of the remaining people for coach.  This will appear to give a\nslightly better answer than the first approach, but is still wrong.\n\n\n\nThere are still a lot of additional improvements that can be made to fee\nestimation.  One problem my proposed code has is there really just aren't\nenough data points of low feerate transactions to give meaningful answers\nabout how likely those are to be confirmed, so its answers are still a bit\nconservative.  This will improve though as the actual distribution of\ntransactions spreads out.    The other major needed improvement is to not\njust state some description of what has happened in the past, but to\nactually make a prediction about what is going to happen in the future.\nFor instance looking at the feerates of unconfirmed transactions currently\nin the mempool could tell you that if you want to be confirmed immediately\nyou'll need to be high enough in that priority queue.\n\n\n\n\n\n\n\n\nOn Tue, Oct 28, 2014 at 5:55 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Could you explain a little further why you think the current approach is\n> statistically incorrect? There's no doubt that the existing estimates the\n> system produces are garbage, but that's because it assumes players in the\n> fee market are rational and they are not.\n>\n> Fwiw bitcoinj 0.12.1 applies the January fee drop and will attach fee of\n> only 1000 satoshis per kB by default. I also have a program that measures\n> confirmation time for a given fee level (with fresh coins so there's no\n> priority) and it aligns with your findings, most txns confirm within a\n> couple of blocks.\n>\n> Ultimately there isn't any easy method to stop people throwing money away.\n> Bitcoinj will probably continue to use hard coded fee values for now to try\n> and contribute to market sanity in the hope it makes smartfees smarter.\n> On 27 Oct 2014 19:34, \"Alex Morcos\" <morcos at gmail.com> wrote:\n>\n>> I've been playing around with the code for estimating fees and found a\n>> few issues with the existing code.   I think this will address several\n>> observations that the estimates returned by the existing code appear to be\n>> too high.  For instance see @cozz in Issue 4866\n>> <https://github.com/bitcoin/bitcoin/issues/4866>.\n>>\n>> Here's what I found:\n>>\n>> 1) We're trying to answer the question of what fee X you need in order\n>> to be confirmed within Y blocks.   The existing code tries to do that by\n>> calculating the median fee for each possible Y instead of gathering\n>> statistics for each possible X.  That approach is statistically incorrect.\n>> In fact since certain X's appear so frequently, they tend to dominate the\n>> statistics at all possible Y's (a fee rate of about 40k satoshis)\n>>\n>> 2) The existing code then sorts all of the data points in all of the\n>> buckets together by fee rate and then reassigns buckets before calculating\n>> the medians for each confirmation bucket.  The sorting forces a\n>> relationship where there might not be one.  Imagine some other variable,\n>> such as first 2 bytes of the transaction hash.  If we sorted these and then\n>> used them to give estimates, we'd see a clear but false relationship where\n>> transactions with low starting bytes in their hashes took longer to confirm.\n>>\n>> 3) Transactions which don't have all their inputs available (because they\n>> depend on other transactions in the mempool) aren't excluded from the\n>> calculations.  This skews the results.\n>>\n>> I rewrote the code to follow a different approach.  I divided all\n>> possible fee rates up into fee rate buckets (I spaced these\n>> logarithmically).  For each transaction that was confirmed, I updated the\n>> appropriate fee rate bucket with how many blocks it took to confirm that\n>> transaction.\n>>\n>> The hardest part of doing this fee estimation is to decide what the\n>> question really is that we're trying to answer.  I took the approach that\n>> if you are asking what fee rate I need to be confirmed within Y blocks,\n>> then what you would like to know is the lowest fee rate such that a\n>> relatively high percentage of transactions of that fee rate are confirmed\n>> within Y blocks. Since even the highest fee transactions are confirmed\n>> within the first block only 90-93% of the time, I decided to use 80% as my\n>> cutoff.  So now to answer \"estimatefee Y\", I scan through all of the fee\n>> buckets from the most expensive down until I find the last bucket with >80%\n>> of the transactions confirmed within Y blocks.\n>>\n>> Unfortunately we still have the problem of not having enough data points\n>> for non-typical fee rates, and so it requires gathering a lot of data to\n>> give reasonable answers. To keep all of these data points in a circular\n>> buffer and then sort them for every analysis (or after every new block) is\n>> expensive.  So instead I adopted the approach of keeping an exponentially\n>> decaying moving average for each bucket.  I used a decay of .998 which\n>> represents a half life of 374 blocks or about 2.5 days.  Also if a\n>> bucket doesn't have very many transactions, I combine it with the next\n>> bucket.\n>>\n>> Here is a link <https://github.com/morcos/bitcoin/pull/3> to the code.\n>> I can create an actual pull request if there is consensus that it makes\n>> sense to do so.\n>>\n>> I've attached a graph comparing the estimates produced for 1-3\n>> confirmations by the new code and the old code.  I did apply the patch to\n>> fix issue 3 above to the old code first.  The new code is in green and the\n>> fixed code is in purple.  The Y axis is a log scale of feerate in satoshis\n>> per KB and the X axis is chain height.  The new code produces the same\n>> estimates for 2 and 3 confirmations (the answers are effectively quantized\n>> by bucket).\n>>\n>> I've also completely reworked smartfees.py.  It turns out to require many\n>> many more transactions are put through in order to have statistically\n>> significant results, so the test is quite slow to run (about 3 mins on my\n>> machine).\n>>\n>> I've also been running a real world test, sending transactions of various\n>> fee rates and seeing how long they took to get confirmed.  After almost 200\n>> tx's at each fee rate, here are the results so far:\n>>\n>> Fee rate 1100   Avg blocks to confirm 2.30 NumBlocks:% confirmed 1: 0.528\n>> 2: 0.751 3: 0.870\n>> Fee rate 2500   Avg blocks to confirm 2.22 NumBlocks:% confirmed 1: 0.528\n>> 2: 0.766 3: 0.880\n>> Fee rate 5000   Avg blocks to confirm 1.93 NumBlocks:% confirmed 1: 0.528\n>> 2: 0.782 3: 0.891\n>> Fee rate 10000  Avg blocks to confirm 1.67 NumBlocks:% confirmed 1: 0.569\n>> 2: 0.844 3: 0.943\n>> Fee rate 20000  Avg blocks to confirm 1.33 NumBlocks:% confirmed 1: 0.715\n>> 2: 0.963 3: 0.989\n>> Fee rate 30000  Avg blocks to confirm 1.27 NumBlocks:% confirmed 1: 0.751\n>> 2: 0.974 3: 1.0\n>> Fee rate 40000  Avg blocks to confirm 1.25 NumBlocks:% confirmed 1: 0.792\n>> 2: 0.953 3: 0.994\n>> Fee rate 60000  Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.875\n>> 2: 1.0   3: 1.0\n>> Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901\n>> 2: 1.0   3: 1.0\n>> Fee rate 300000 Avg blocks to confirm 1.12 NumBlocks:% confirmed 1: 0.886\n>> 2: 0.989 3: 1.0\n>>\n>>\n>> Alex\n>>\n>>\n>> ------------------------------------------------------------------------------\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/bb4e512b/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-10-28T13:59:11",
                "message_text_only": "I think Alex's approach is better; I don't think we can know how much\nbetter until we have a functioning fee market.\n\nWe don't have a functioning fee market now, because fees are hard-coded. So\nwe get \"pay the hard-coded fee and you'll get confirmed in one or two or\nthree blocks, depending on which miners mine the next three blocks and what\ntime of day it is.\"\n\ngit HEAD code says you need a fee of 10,0000 satoshis/kb to be pretty sure\nyou'll get confirmed in the next block. That looks about right with Alex's\nreal-world data (if we take \"90% chance\" as 'pretty sure you'll get\nconfirmed'):\n\nFee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901\n2: 1.0   3: 1.0\n\nMy only concern with Alex's code is that it takes much longer to get\n'primed' -- Alex, if I started with no data about fees, how long would it\ntake to be able to get enough data for a reasonable estimate of \"what is\nthe least I can pay and still be 90% sure I get confirmed in 20 blocks\" ?\nHours? Days? Weeks?\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/2c748d73/attachment.html>"
            },
            {
                "author": "Alex Morcos",
                "date": "2014-10-28T14:30:14",
                "message_text_only": "Oh in just a couple of blocks, it'll give you a somewhat reasonable\nestimate for asking about every confirmation count other than 1, but it\ncould take several hours for it to have enough data points to give you a\ngood estimate for getting confirmed in one block (because the prevalent\nfeerate is not always confirmed in 1 block >80% of the time)   Essentially\nwhat it does is just combine buckets until it has enough data points, so\nafter the first block it might be treating all of the txs as belonging to\nthe same feerate bucket, but since the answer it returns is the \"median\"*\nfee rate for that bucket, its a reasonable answer right off the get go.\n\nDo you think it would make sense to make that 90% number an argument to rpc\ncall?  For instance there could be a default (I would use 80%) but then you\ncould specify if you required a different certainty.  It wouldn't require\nany code changes and might make it easier for people to build more\ncomplicated logic on top of it.\n\n*It can't actually track the median, but it identifies which of the smaller\nactual buckets the median would have fallen into and returns the average\nfeerate for that median bucket.\n\n\n\n\n\nOn Tue, Oct 28, 2014 at 9:59 AM, Gavin Andresen <gavinandresen at gmail.com>\nwrote:\n\n> I think Alex's approach is better; I don't think we can know how much\n> better until we have a functioning fee market.\n>\n> We don't have a functioning fee market now, because fees are hard-coded.\n> So we get \"pay the hard-coded fee and you'll get confirmed in one or two or\n> three blocks, depending on which miners mine the next three blocks and what\n> time of day it is.\"\n>\n> git HEAD code says you need a fee of 10,0000 satoshis/kb to be pretty sure\n> you'll get confirmed in the next block. That looks about right with Alex's\n> real-world data (if we take \"90% chance\" as 'pretty sure you'll get\n> confirmed'):\n>\n> Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901\n> 2: 1.0   3: 1.0\n>\n> My only concern with Alex's code is that it takes much longer to get\n> 'primed' -- Alex, if I started with no data about fees, how long would it\n> take to be able to get enough data for a reasonable estimate of \"what is\n> the least I can pay and still be 90% sure I get confirmed in 20 blocks\" ?\n> Hours? Days? Weeks?\n>\n> --\n> --\n> Gavin Andresen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/3e672923/attachment.html>"
            },
            {
                "author": "Alex Morcos",
                "date": "2014-10-28T14:55:10",
                "message_text_only": "Sorry, perhaps I misinterpreted that question.  The estimates will be\ndominated by the prevailing transaction rates initially, so the estimates\nyou get for something like \"what is the least I can pay and still be 90%\nsure I get confirmed in 20 blocks\"  won't be insane, but they will still be\nway too conservative.  I'm not sure what you meant by reasonable.  You\nwon't get the \"correct\" answer of something significantly less than 40k\nsat/kB for quite some time.  Given that the half-life of the decay is 2.5\ndays, then within a couple of days.  And in fact even in the steady state,\nthe new code will still return a much higher rate than the existing code,\nsay 10k sat/kB instead of 1k sat/kB, but that's just a result of the\nsorting the existing code does and the fact that no one places transactions\nwith that small fee.   To correctly give such low answers, the new code\nwill require that those super low feerate transactions are occurring\nfrequently enough, but the bar for enough datapoints in a feerate bucket is\npretty low, an average of 1 tx per block.  The bar can be made lower at the\nexpense of a bit of noisiness in the answers, for instance for priorities I\nhad to make the bar significantly lower because there are so many fewer\ntransactions confirmed because of priorities.  I'm certainly open to tuning\nsome of these variables.\n\n\n\n\n\nOn Tue, Oct 28, 2014 at 10:30 AM, Alex Morcos <morcos at gmail.com> wrote:\n\n> Oh in just a couple of blocks, it'll give you a somewhat reasonable\n> estimate for asking about every confirmation count other than 1, but it\n> could take several hours for it to have enough data points to give you a\n> good estimate for getting confirmed in one block (because the prevalent\n> feerate is not always confirmed in 1 block >80% of the time)   Essentially\n> what it does is just combine buckets until it has enough data points, so\n> after the first block it might be treating all of the txs as belonging to\n> the same feerate bucket, but since the answer it returns is the \"median\"*\n> fee rate for that bucket, its a reasonable answer right off the get go.\n>\n> Do you think it would make sense to make that 90% number an argument to\n> rpc call?  For instance there could be a default (I would use 80%) but then\n> you could specify if you required a different certainty.  It wouldn't\n> require any code changes and might make it easier for people to build more\n> complicated logic on top of it.\n>\n> *It can't actually track the median, but it identifies which of the\n> smaller actual buckets the median would have fallen into and returns the\n> average feerate for that median bucket.\n>\n>\n>\n>\n>\n> On Tue, Oct 28, 2014 at 9:59 AM, Gavin Andresen <gavinandresen at gmail.com>\n> wrote:\n>\n>> I think Alex's approach is better; I don't think we can know how much\n>> better until we have a functioning fee market.\n>>\n>> We don't have a functioning fee market now, because fees are hard-coded.\n>> So we get \"pay the hard-coded fee and you'll get confirmed in one or two or\n>> three blocks, depending on which miners mine the next three blocks and what\n>> time of day it is.\"\n>>\n>> git HEAD code says you need a fee of 10,0000 satoshis/kb to be pretty\n>> sure you'll get confirmed in the next block. That looks about right with\n>> Alex's real-world data (if we take \"90% chance\" as 'pretty sure you'll get\n>> confirmed'):\n>>\n>> Fee rate 100000 Avg blocks to confirm 1.09 NumBlocks:% confirmed 1: 0.901\n>> 2: 1.0   3: 1.0\n>>\n>> My only concern with Alex's code is that it takes much longer to get\n>> 'primed' -- Alex, if I started with no data about fees, how long would it\n>> take to be able to get enough data for a reasonable estimate of \"what is\n>> the least I can pay and still be 90% sure I get confirmed in 20 blocks\" ?\n>> Hours? Days? Weeks?\n>>\n>> --\n>> --\n>> Gavin Andresen\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/06848964/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-10-28T14:58:36",
                "message_text_only": "On Tue, Oct 28, 2014 at 10:30 AM, Alex Morcos <morcos at gmail.com> wrote:\n>\n> Do you think it would make sense to make that 90% number an argument to\n> rpc call?  For instance there could be a default (I would use 80%) but then\n> you could specify if you required a different certainty.  It wouldn't\n> require any code changes and might make it easier for people to build more\n> complicated logic on top of it.\n>\n\nRE: 80% versus 90% :  I think a default of 80% will get us a lot of \"the\nfee estimation logic is broken, I want my transactions to confirm quick and\na lot of them aren't confirming for 2 or 3 blocks.\"\n\nRE: RPC argument:  I'm reluctant to give too many 'knobs' for the RPC\ninterface. I think the default percentage makes sense as a\ncommand-line/bitcoin.conf option; I can imagine services that want to save\non fees running with -estimatefeethreshold=0.5  (or\n-estimatefeethreshold=0.95 if as-fast-as-possible confirmations are\nneeded). Setting both the number of confirmations and the estimation\nthreshold on a transaction-by-transaction basis seems like overkill to me.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/a346b252/attachment.html>"
            },
            {
                "author": "Alex Morcos",
                "date": "2014-10-28T15:39:52",
                "message_text_only": "RE: 90% : I think it's fine to use 90% for anything other than 1\nconfirmation, but if you look at the real world data test I did, or the raw\ndata from this new code, you'll see that even the highest fee rate\ntransactions only get confirmed at about a 90% rate in 1 block, so that if\nyou use that as your cut-off you will sometimes get no answer and sometimes\nget a very high fee rate and sometimes get a reasonable fee rate, it just\ndepends because the data is too noisy.  I think thats just because there is\nno good answer to that question.  There is no fee you can put on your\ntransaction to guarantee greater than 90% chance of getting confirmed in\none block.  I think 85% might be safe?\n\nRE: tunable as command-line/bitcoin.conf: sounds good!\n\nOK, sorry to have all this conversation on the dev list, maybe i'll turn\nthis into an actual PR if we want to comment on the code?\nI just wanted to see if it even made sense to make a PR for this or this\nisn't the way we wanted to go about it.\n\n\n\n\nOn Tue, Oct 28, 2014 at 10:58 AM, Gavin Andresen <gavinandresen at gmail.com>\nwrote:\n\n> On Tue, Oct 28, 2014 at 10:30 AM, Alex Morcos <morcos at gmail.com> wrote:\n>>\n>> Do you think it would make sense to make that 90% number an argument to\n>> rpc call?  For instance there could be a default (I would use 80%) but then\n>> you could specify if you required a different certainty.  It wouldn't\n>> require any code changes and might make it easier for people to build more\n>> complicated logic on top of it.\n>>\n>\n> RE: 80% versus 90% :  I think a default of 80% will get us a lot of \"the\n> fee estimation logic is broken, I want my transactions to confirm quick and\n> a lot of them aren't confirming for 2 or 3 blocks.\"\n>\n> RE: RPC argument:  I'm reluctant to give too many 'knobs' for the RPC\n> interface. I think the default percentage makes sense as a\n> command-line/bitcoin.conf option; I can imagine services that want to save\n> on fees running with -estimatefeethreshold=0.5  (or\n> -estimatefeethreshold=0.95 if as-fast-as-possible confirmations are\n> needed). Setting both the number of confirmations and the estimation\n> threshold on a transaction-by-transaction basis seems like overkill to me.\n>\n> --\n> --\n> Gavin Andresen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/2ebb0ad7/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-10-29T20:08:48",
                "message_text_only": "On Mon, Oct 27, 2014 at 03:33:45PM -0400, Alex Morcos wrote:\n> I've been playing around with the code for estimating fees and found a few\n> issues with the existing code.   I think this will address several\n> observations that the estimates returned by the existing code appear to be\n> too high.  For instance see @cozz in Issue 4866\n> <https://github.com/bitcoin/bitcoin/issues/4866>.\n\nI don't have time to look at the details of your statistical methods\nunfortunately due to some deadlines, but a quick comment:\n\nYou should think about the malleability of your estimates to attackers.\nFor instance the current fee estimation code has a serious issue where\nit'll happily estimate ludicriously high fees based on very little date.\nThere is a 'insane fees' failsafe, but it's IIRC set to allow\ntransactions with fees of less than 100mBTC/tx, roughly $50 at current\nexchange rates. It's relatively easy to get a wallet into a condition\nwhere this happens as the estimations are considered valid even based on\nvery little data - a simple sybil attack suffices. (e.g. the recently\npublished paper(1) on Tor sybil attacks comes to mind as one example of\nmany ways to do this) Obviously this could empty someone's wallet pretty\nquickly; an exchange that makes a few dozen transactions an hour could\neasily lose tens of thousands of dollars due to this exploit. Someone\ncorrect me if I'm wrong, but last I checked in git HEAD this exploit is\nstill unfixed.\n\nA user-configurable failsafe limit is a pretty obvious solution here,\nalbeit a crude one; it'd be interesting to see if a plausible security\nargument could be made for something more sophisticated, like taking\ninto account coin-age of observed transactions that estimates are based\non.\n\n1) \"Bitcoin over Tor isn't a good idea\",\n   http://arxiv.org/abs/1410.6079\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000098d3c9095b47ff1fd692fef5ac6731340802c7c63d38bb0\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141029/f464cf1b/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Reworking the policy estimation code (fee estimates)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd",
                "Mike Hearn",
                "Alex Morcos",
                "Gavin Andresen"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 36111
        }
    },
    {
        "title": "[Bitcoin-development] DS Deprecation Window",
        "thread_messages": [
            {
                "author": "Tom Harding",
                "date": "2014-10-27T19:58:15",
                "message_text_only": "Greetings Bitcoin Dev,\n\nThis is a proposal to improve the ability of bitcoin users to rely on \nunconfirmed transactions.  It can be adopted incrementally, with no hard \nor soft fork required.\n\nhttps://github.com/dgenr8/out-there/blob/master/ds-dep-win.md\n\nYour thoughtful feedback would be very much appreciated.\n\nIt is not yet implemented anywhere.\n\nCheers,\nTom Harding\nCA, USA"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-10-27T20:17:34",
                "message_text_only": "It is a very bad idea to delay relaying/accepting blocks based on\ninformation which is only local to your node (ie would create the\nability for people to split the network by sending out lots of\ndouble-spends to different parts of the network at the same time). Thus,\nminers are incentivized to go connect to everyone on the network and\nlook for double-spends, not including them in their blocks to avoid\nbeing delayed (which is OK, except having to connect to everyone is bad).\nThere is a related concept of \"discouraging\" blocks which generally only\nrefers to mining on a previous block, but you have to be careful doing\nthat so you dont break consensus.\n\nOn 10/27/14 19:58, Tom Harding wrote:\n> Greetings Bitcoin Dev,\n> \n> This is a proposal to improve the ability of bitcoin users to rely on \n> unconfirmed transactions.  It can be adopted incrementally, with no hard \n> or soft fork required.\n> \n> https://github.com/dgenr8/out-there/blob/master/ds-dep-win.md\n> \n> Your thoughtful feedback would be very much appreciated.\n> \n> It is not yet implemented anywhere.\n> \n> Cheers,\n> Tom Harding\n> CA, USA\n> \n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Tom Harding",
                "date": "2014-10-28T02:26:48",
                "message_text_only": "Matt,\n\nYou're right, thanks.  Without double-spend relay, miner won't know that \nsome txes conflict with anything.  I'll add that first-double-spends are \nrelayed per #4570.\n\nMiner has to be very careful including a double-spend in his block -- he \nhopes:\n\n  - that based on his measured time offset from the first spend he \nreceived, at most a tiny fraction of the network will delay his block\n\n  - that not too many nodes saw an earlier spend that he didn't see, \nwhich could increase that fraction\n\n  - that most other nodes saw his tx.  Any who didn't will only learn \nabout it by receiving his block, and they will assign it the time when \nthey receive the block.  That's likely to be more than T (30 seconds) \nafter an earlier spend, so they would delay the block.\n\nThe best course of action is intended to be for miner to exclude fast (< \n2 hours) double spends completely.\n\n\nOn 10/27/2014 1:17 PM, Matt Corallo wrote:\n> miners are incentivized to go connect to everyone on the network and\n> look for double-spends\n>\n> On 10/27/14 19:58, Tom Harding wrote:\n>> https://github.com/dgenr8/out-there/blob/master/ds-dep-win.md"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-28T02:36:15",
                "message_text_only": "On Tue, Oct 28, 2014 at 2:26 AM, Tom Harding <tomh at thinlink.com> wrote:\n> Matt,\n>\n> You're right, thanks.  Without double-spend relay, miner won't know that\n> some txes conflict with anything.\n\nEven with that, the miner cannot tell, his only safe option is to\ninclude no transactions at all.\n\nConsider a malicious miner can concurrently flood all other miners\nwith orthogonal double spends (which he doesn't mine himself). These\nother miners will all be spending some amount of their time mining on\nthese transactions before realizing others consider them\ndouble-spends."
            },
            {
                "author": "Tom Harding",
                "date": "2014-10-28T17:38:07",
                "message_text_only": "On 10/27/2014 7:36 PM, Gregory Maxwell wrote:\n> Consider a malicious miner can concurrently flood all other miners\n> with orthogonal double spends (which he doesn't mine himself). These\n> other miners will all be spending some amount of their time mining on\n> these transactions before realizing others consider them\n> double-spends.\n\nIf I understand correctly, the simplest example of this attack is three \ntransactions spending the same coin, distributed to two miners like this:\n\n             Miner A    Miner B\nMempool       tx1a       tx1b\nRelayed       tx2        tx2\n\nSince relay has to be limited, Miner B doesn't know about tx1a until it \nis included in Miner A's block, so he delays that block (unless it \nappears very quickly).\n\nTo create this situation, attacker has to transmit all three \ntransactions very quickly, or mempools will be too synchronized. \nAttacker tries to make it so that everyone else has a tx1a conflict that \nMiner A does not have.  Ditto for each individual victim, with different \ntransactions (this seems very difficult).\n\nProposal shows that there is always a tiny risk to including tx1 when a \ndouble-spend is known, and I agree that this attack can add something to \nthat risk.  Miner A can neutralize his risk by excluding any tx1 known \nto be double-spent, but as Thomas Zander wrote, that is an undesirable \noutcome.\n\nHowever, Miner A has additional information - he knows how soon he \nreceived tx2 after receiving tx1a.\n\nThe attack has little chance of working if any of the malicious \ntransactions are sent even, say, 10 seconds apart from each other. \nDropping the labels for transmit-order numbering, if the 1->2 transmit \ngap is large, mempools will agree on 1.  If 1->2 gap is small, but the \ngap to 3 is large, mempools will agree on the 1-2 pair, but possibly \nhave the order reversed.  Either way, mempools won't disagree on the \nexistence of 1 unless the 1->3 gap is small.\n\nSo, I think it will be possible to quantify and target the risk of \nincluding tx1a to an arbitrarily low level, based on the local \nmeasurement of the time gap to tx2, and an effective threshold won't be \nvery high.  It does highlight yet again, the shorter the time frame, the \ngreater the risk."
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-28T06:24:07",
                "message_text_only": "On Monday 27. October 2014 19.26.48 Tom Harding wrote:\n> Miner has to be very careful including a double-spend in his block -- he \n> hopes:\n\nHow does it help the zero-confirmation to not include a payment? Doesn't that \njust mean that if I send a double spend that neither of the payments will be \nmade? So the thief just got an even bigger incentive to double-spent!\n \n\n>   - that based on his measured time offset from the first spend he \n> received, at most a tiny fraction of the network will delay his block\n>\n>   - that not too many nodes saw an earlier spend that he didn't see, \n> which could increase that fraction\n> \n>   - that most other nodes saw his tx.  Any who didn't will only learn \n> about it by receiving his block, and they will assign it the time when \n> they receive the block.  That's likely to be more than T (30 seconds) \n> after an earlier spend, so they would delay the block.\n\nThis doesn't addresses the point that Matt brought up.\nYour proposal essentially has some side effects that would be disastrous to \nminers. As detailed by the other two replies on this thread."
            }
        ],
        "thread_summary": {
            "title": "DS Deprecation Window",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo",
                "Gregory Maxwell",
                "Thomas Zander",
                "Tom Harding"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 6791
        }
    },
    {
        "title": "[Bitcoin-development] Fwd:  death by halving",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-28T20:36:22",
                "message_text_only": "On Tue, Oct 28, 2014 at 8:17 PM, Ferdinando M. Ametrano\n<ferdinando.ametrano at gmail.com> wrote:\n>\n> On Oct 25, 2014 9:19 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n> > We had a halving, and it was a non-event.\n> > Is there some reason to believe next time will be different?\n>\n> In november 2008 bitcoin was a much younger ecosystem,\n\nOr very old, indeed, if you are using unsigned arithmetic. [...]\n\n> and the halving happened during a quite stable positive price trend\n\nHardly,\n\nhttp://bitcoincharts.com/charts/mtgoxUSD#rg60zczsg2012-10-01zeg2012-12-01ztgSzm1g10zm2g25zv\n\n> Moreover, halving is not strictly necessary to respect the spirit of Nakamoto's monetary rule\n\nIt isn't, but many people have performed planning around the current\nbehaviour. The current behaviour has also not shown itself to be\nproblematic (and we've actually experienced its largest effect already\nwithout incident), and there are arguable benefits like encouraging\ninvestment in mining infrastructure.\n\nThis thread is, in my opinion, a waste of time.  It's yet again\nanother perennial bikeshedding proposal brought up many times since at\nleast 2011, suggesting random changes for\nnon-existing(/not-yet-existing) issues.\n\nThere is a lot more complexity to the system than the subsidy schedule."
            }
        ],
        "thread_summary": {
            "title": "Fwd:  death by halving",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1287
        }
    },
    {
        "title": "[Bitcoin-development] Fwd: death by halving",
        "thread_messages": [
            {
                "author": "Alex Mizrahi",
                "date": "2014-10-28T20:57:56",
                "message_text_only": "> This thread is, in my opinion, a waste of time.  It's yet again\n> another perennial bikeshedding proposal brought up many times since at\n> least 2011, suggesting random changes for\n> non-existing(/not-yet-existing) issues.\n>\n> There is a lot more complexity to the system than the subsidy schedule.\n>\n\nWell, the main question is what makes Bitcoin secure.\nIt is secured by proofs of work which are produced by miners.\nMiners have economic incentives to play by the rules; in simple terms, that\nis more profitable than performing attacks.\n\nSo the question is, why and when it works? It would be nice to know the\nboundaries, no?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/33741ecb/attachment.html>"
            },
            {
                "author": "J\u00e9r\u00e9mie Dubois-Lacoste",
                "date": "2014-10-28T21:19:41",
                "message_text_only": "Answering today's concerns with yesterday's facts is dangerous,\nespecially with bitcoin on a 4 years period. I personally consider all\narguments like \"we went through once, and nothing special. So no\ndisturbance worthy of discussion to expect\" baseless.\nAlso, starting a topic with mentions of \"death\" is not leading to any\nuseful discussion.\n\n@Topic starters: don't oversell your topic with that kind of\nvocabulary hype. \"death by halving\", seriously?\n@Everybody else: don't focus on the chosen vocabulary, or use it to\ndiscard what might be a relevant discussion topic.\n\nThe fact that a topic was brought up many times since a long time,\ndoes not mean it is not relevant. It only means it is a recurring\nconcern. I read no convincing argument against a significant\ndisturbance of the mining market to come. The fact that it is known in\nadvance is no counter argument to me.\nEnvironmental conditions will have changed so much, the next halving\noccurence might have nothing to do with the previous one, and it\nshould be perfectly ok to discuss it instead of putting the whole\nthing under the carpet.\n\nWhat is most important to the discussion to me: the main difference\nbetween the last halving and the one to come is the relative weight of\nideology vs. rationality in miners's motivations. Effectively putting\nus closer to the original bitcoin premises (miners fully rational).\nMiners were close to being 100% individuals last halving, they are now\nlargely for-profit companies. This isn't a change we can overlook with\npure maths or with previous experience.\n\n\nJeremie DL\n\n\n\n\n\n2014-10-28 21:36 GMT+01:00 Gregory Maxwell <gmaxwell at gmail.com>:\n> On Tue, Oct 28, 2014 at 8:17 PM, Ferdinando M. Ametrano\n> <ferdinando.ametrano at gmail.com> wrote:\n>>\n>> On Oct 25, 2014 9:19 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n>> > We had a halving, and it was a non-event.\n>> > Is there some reason to believe next time will be different?\n>>\n>> In november 2008 bitcoin was a much younger ecosystem,\n>\n> Or very old, indeed, if you are using unsigned arithmetic. [...]\n>\n>> and the halving happened during a quite stable positive price trend\n>\n> Hardly,\n>\n> http://bitcoincharts.com/charts/mtgoxUSD#rg60zczsg2012-10-01zeg2012-12-01ztgSzm1g10zm2g25zv\n>\n>> Moreover, halving is not strictly necessary to respect the spirit of Nakamoto's monetary rule\n>\n> It isn't, but many people have performed planning around the current\n> behaviour. The current behaviour has also not shown itself to be\n> problematic (and we've actually experienced its largest effect already\n> without incident), and there are arguable benefits like encouraging\n> investment in mining infrastructure.\n>\n> This thread is, in my opinion, a waste of time.  It's yet again\n> another perennial bikeshedding proposal brought up many times since at\n> least 2011, suggesting random changes for\n> non-existing(/not-yet-existing) issues.\n>\n> There is a lot more complexity to the system than the subsidy schedule.\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n2014-10-28 21:57 GMT+01:00 Alex Mizrahi <alex.mizrahi at gmail.com>:\n>\n>>\n>> This thread is, in my opinion, a waste of time.  It's yet again\n>> another perennial bikeshedding proposal brought up many times since at\n>> least 2011, suggesting random changes for\n>> non-existing(/not-yet-existing) issues.\n>>\n>> There is a lot more complexity to the system than the subsidy schedule.\n>\n>\n> Well, the main question is what makes Bitcoin secure.\n> It is secured by proofs of work which are produced by miners.\n> Miners have economic incentives to play by the rules; in simple terms, that\n> is more profitable than performing attacks.\n>\n> So the question is, why and when it works? It would be nice to know the\n> boundaries, no?\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-28T21:43:42",
                "message_text_only": "On Tue, Oct 28, 2014 at 9:19 PM, J\u00e9r\u00e9mie Dubois-Lacoste\n<jeremie.dl at gmail.com> wrote:\n> The fact that a topic was brought up many times since a long time,\n> does not mean it is not relevant.\n\nI am not saying that it is \"not relevant\", I'm saying the discussion\nis pointless:\n\nNo new information has arrived since the very first times that this\nhas been discussed except\nthat the first halving passed without incident.\nIf people were not sufficiently convinced that this was a serious\nconcern before there was concrete evidence (however small) that it was\nokay, then discussion is not likely going to turn out differently the\n50th or 100th time it is repeated...\nexcept, perhaps, by wearing out all the most experienced and\nknowledgeable among us as we become tired of rehashing the same\ndiscussions over and over again.\n\nOn Tue, Oct 28, 2014 at 9:23 PM, Ferdinando M. Ametrano\n<ferdinando.ametrano at gmail.com> wrote:\n[snip]\n> As of now the cost per block is probably already about 100USD, probably in\n> the 50-150USD.\n\nThis is wildly at odds with reality. I don't mean to insult, but\nplease understand that every post you make here consumes the time of\ndozens (or, hopefully, hundreds) of people. Every minute you spend\nrefining your post has a potential return of many minutes for the rest\nof the users of the list.\n\nAt current difficulty, with a SP30 (one of the\nleading-in-power-efficiency) marginal break-even is ~1144.8852 * $/kwh\n== $/btc.\n\nAt $0.10/kwh each block has an expected cost right now, discounting\nall one time hardware costs, close to $3000."
            },
            {
                "author": "Ferdinando M. Ametrano",
                "date": "2014-10-28T22:43:08",
                "message_text_only": "On Tue, Oct 28, 2014 at 10:43 PM, Gregory Maxwell <gmaxwell at gmail.com>\nwrote:\n\n> > As of now the cost per block is probably already about 100USD, probably\n> in\n> > the 50-150USD.\n>\n> This is wildly at odds with reality. I don't mean to insult, but\n> please understand that every post you make here consumes the time of\n> dozens (or, hopefully, hundreds) of people. Every minute you spend\n> refining your post has a potential return of many minutes for the rest\n> of the users of the list.\n>\n> At current difficulty, with a SP30 (one of the\n> leading-in-power-efficiency) marginal break-even is ~1144.8852 * $/kwh\n> == $/btc.\n>\n> At $0.10/kwh each block has an expected cost right now, discounting\n> all one time hardware costs, close to $3000.\n>\n\nyes, you're right I meant about $100USD per BTC, i.e. $2500 per block.\nBecause of my mistake I'll shut up and go back researching the archive on\nthis issue.\n\nThank you for the kind summary of the many good reasons why halving is a\nnon-issue. Very much appreciated, especially considering how precious is\nyour time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/2e7c0fc3/attachment.html>"
            },
            {
                "author": "Ferdinando M. Ametrano",
                "date": "2014-10-28T21:23:27",
                "message_text_only": "> > In november 2008 bitcoin was a much younger ecosystem,\n>\n> Or very old, indeed, if you are using unsigned arithmetic. [...]\n>\n:-) I meant 2012, of course, but loved your wit\n\n\n> > and the halving happened during a quite stable positive price trend\n>\n> Hardly,\n>\n>\n> http://bitcoincharts.com/charts/mtgoxUSD#rg60zczsg2012-10-01zeg2012-12-01ztgSzm1g10zm2g25zv\n\n\nindeed!\nhttp://bitcoincharts.com/charts/mtgoxUSD#rg60zczsg2012-08-01zeg2013-02-01ztgSzm1g10zm2g25zv\n\n\n> There is a lot more complexity to the system than the subsidy schedule.\n>\nwho said the contrary?\n\nThis thread is, in my opinion, a waste of time.\n>\nit might be, I have some free time right now...\n\nmany people have performed planning around the current\n> behaviour. The current behaviour has also not shown itself to be\n> problematic (and we've actually experienced its largest effect already\n> without incident), and there are arguable benefits like encouraging\n> investment in mining infrastructure.\n>\n\nI would love a proper rebuttal of a basic economic argument. If increased\ncompetition will push mining revenues below 200% of operational costs, then\nthe halving will suddenly switch off many non profitable mining resources.\nAs of now the cost per block is probably already about 100USD, probably in\nthe 50-150USD.\nDismissed mining resources might even become cheaply available for\nmalevolent agents considering a 51% attack. Moreover the timing would be\nperfect for the burst of any existing cloud hashing Ponzi scheme.\n>From a strict economic point of view allowing the halving jump is looking\nfor trouble. To each his own.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/c85c0aa9/attachment.html>"
            },
            {
                "author": "Neil",
                "date": "2014-10-28T21:34:16",
                "message_text_only": "Economically a halving is almost the same as a halving in price (as fees\ntake up more of the pie, less so).\n\nCoincidentally the price has halved since early July to mid-October, and\nwe've not even seen difficulty fall yet.\n\nI don't think there's much to see here.\n\nNeil\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141029/a9fe9593/attachment.html>"
            },
            {
                "author": "Ferdinando M. Ametrano",
                "date": "2014-10-28T21:44:50",
                "message_text_only": "On Tue, Oct 28, 2014 at 10:34 PM, Neil <kyuupichan at gmail.com> wrote:\n\n> Economically a halving is almost the same as a halving in price (as fees\n> take up more of the pie, less so).\n>\n> Coincidentally the price has halved since early July to mid-October, and\n> we've not even seen difficulty fall yet.\n>\nbecause mining profits are many times operational costs. This might change\nbecause of competition, in that case halving in price will become\nproblematic.\n\nIt amazes me that basic economic considerations seems completely lost here,\nespecially when it comes to mining. We should have learned the lesson of\nhow a small error in the incentive structure has lead from \"one CPU, one\nvote\" to an oligopoly which might easily become a monopoly in the near\nfuture.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/236689cb/attachment.html>"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-10-28T22:00:23",
                "message_text_only": "On Tuesday 28. October 2014 22.44.50 Ferdinando M. Ametrano wrote:\n> It amazes me that basic economic considerations seems completely lost here,\n> especially when it comes to mining.\n\nPlease don't confuse people dismissing your thoughts with dismissing the basic \neconomic considerations. The fact of the matter is that you didn't read the \narchives where these ideas have been brought forward and discussed, a \nconsensus was reached. (it wasn't so basic afterall)\n\nThe fact that people don't want to repeat the discussion just for your sake is \nnot the same as people not listening to those arguments."
            },
            {
                "author": "Ferdinando M. Ametrano",
                "date": "2014-10-28T22:38:12",
                "message_text_only": "On Tue, Oct 28, 2014 at 11:00 PM, Thomas Zander <thomas at thomaszander.se>\nwrote:\n\n> you didn't read the\n> archives where these ideas have been brought forward and discussed, a\n> consensus was reached. (it wasn't so basic afterall)\n> The fact that people don't want to repeat the discussion just for your\n> sake is\n> not the same as people not listening to those arguments.\n\n\nI didn't start the thread and so didn't research the archive. Until two\nposts ago there was no reference about the issue being discussed before. A\nlink would have been much kinder than harsh dismissal. I will research and\nread.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20141028/7900e3d4/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-10-28T21:57:01",
                "message_text_only": "> The fact that it is known in advance is no counter argument to me.\n\nBut it does change miner behaviour in pretty significant ways.\n\nUnlike difficulty forecasting, which seems near impossible to do\naccurately, miners can plan to purchase less hardware as they approach\nthe revenue drop. You can do some basic cost/benefit calculation and\nsee that *if* margins are already low as the halving approaches, then\nrational miners would cease purchasing any new hardware that wouldn't\nbe profitable past that point, unless they expect it to pay for itself\nby then.\n\nThe lower the margins are, the longer in advance they would alter\ntheir buying behaviour. You'd see an increased focus on cost-effective\nhashpower (and older units would not be replaced as they break).\nEither a significant supply of cost effective hardware shows up\n(because it's the only thing that would sell in the last months), or\ndifficulty would stall long before the halving happens. Either way,\nthe predictability of the halving can reduce the hashpower on the day.\n\nOn Tue, Oct 28, 2014 at 5:34 PM, Neil <kyuupichan at gmail.com> wrote:\n> Economically a halving is almost the same as a halving in price (as fees\n> take up more of the pie, less so).\n>\n> Coincidentally the price has halved since early July to mid-October, and\n> we've not even seen difficulty fall yet.\n>\n> I don't think there's much to see here.\n>\n> Neil\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: death by halving",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Neil",
                "Thomas Zander",
                "Ferdinando M. Ametrano",
                "Christophe Biocca",
                "Alex Mizrahi",
                "Gregory Maxwell",
                "J\u00e9r\u00e9mie Dubois-Lacoste"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 14139
        }
    },
    {
        "title": "[Bitcoin-development] Death by halving (pro-active proposals)",
        "thread_messages": [
            {
                "author": "Sergio Lerner",
                "date": "2014-10-29T14:34:09",
                "message_text_only": "Instead of discussing what will happen when the subsidy is halved (which\nnobody really knows) maybe we can think about of what we can do to\nmitigate any damage in case something unwanted happens. Let's be proactive.\n\nFor instance, any form of merged-mining (like higher frequency\nside-chains) will end-up increasing miners profit, even by a small\nmargin. Then that margin can compensate miners not to turn off their\nequipment. Then we can encourage merge-mining on SHA-256, instead of\ndiscouraging SHA-256 alt-coins.\n\nAlso we can encourage mining during the \"trouble\" period by creating a\ndonation pool: suppose we manage to convince miners to donate 1% of\ntheir revenue in order to pay back to the miners for the first month\nafter the reward halving. If every block pays 1% for 10 months, then\nevery block during the first month of halving will earn 20% more.  Of\ncourse, convincing miners of this may be difficult, but not impossible.\nIt could be done automatically with nLockTime freeze of transactions\nwith high fees, so no TTP is necessary.\n\nSo here are two proposals, any other idea?\n\nBest regards,\n Sergio."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-10-29T17:25:19",
                "message_text_only": "Seconded - IMO a key future use of the chain will be securing other\nchains.  I'm interested in pursuing the merged-mining angle.\n\nGetting chain hashes to a miner, and getting that miner payment from\nthe chain, is key to this.  Consider a future where there are 10,000\nchains secured by one block...\n\n\nOn Wed, Oct 29, 2014 at 10:34 AM, Sergio Lerner\n<sergiolerner at certimix.com> wrote:\n> Instead of discussing what will happen when the subsidy is halved (which\n> nobody really knows) maybe we can think about of what we can do to\n> mitigate any damage in case something unwanted happens. Let's be proactive.\n>\n> For instance, any form of merged-mining (like higher frequency\n> side-chains) will end-up increasing miners profit, even by a small\n> margin. Then that margin can compensate miners not to turn off their\n> equipment. Then we can encourage merge-mining on SHA-256, instead of\n> discouraging SHA-256 alt-coins.\n>\n> Also we can encourage mining during the \"trouble\" period by creating a\n> donation pool: suppose we manage to convince miners to donate 1% of\n> their revenue in order to pay back to the miners for the first month\n> after the reward halving. If every block pays 1% for 10 months, then\n> every block during the first month of halving will earn 20% more.  Of\n> course, convincing miners of this may be difficult, but not impossible.\n> It could be done automatically with nLockTime freeze of transactions\n> with high fees, so no TTP is necessary.\n>\n> So here are two proposals, any other idea?\n>\n> Best regards,\n>  Sergio.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Death by halving (pro-active proposals)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Sergio Lerner"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3048
        }
    },
    {
        "title": "[Bitcoin-development] Increasing regularity of block times?",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2014-10-30T23:18:34",
                "message_text_only": "Hi all,\n\n        I've been toying with an algorithm to place a ceiling on\nconfirmation latency by allowing weaker blocks after a certain time.\nHope this isn't noise, but thought someone must have considered this\nbefore, or know of flaws in the scheme?\n\nGory details:\nhttp://rustyrussell.github.io/pettycoin/2014/10/30/More-Regular-Block-Times.html\n\nThanks,\nRusty."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-10-30T23:34:12",
                "message_text_only": "That's what we do for testnet today:  https://en.bitcoin.it/wiki/Testnet\n\nIf no block is found for 20 minutes, one minimum-diff block may be mined.\n\n\nOn Thu, Oct 30, 2014 at 7:18 PM, Rusty Russell <rusty at rustcorp.com.au> wrote:\n> Hi all,\n>\n>         I've been toying with an algorithm to place a ceiling on\n> confirmation latency by allowing weaker blocks after a certain time.\n> Hope this isn't noise, but thought someone must have considered this\n> before, or know of flaws in the scheme?\n>\n> Gory details:\n> http://rustyrussell.github.io/pettycoin/2014/10/30/More-Regular-Block-Times.html\n>\n> Thanks,\n> Rusty.\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-10-30T23:34:25",
                "message_text_only": "On Thu, Oct 30, 2014 at 11:18 PM, Rusty Russell <rusty at rustcorp.com.au> wrote:\n> Hi all,\n>\n>         I've been toying with an algorithm to place a ceiling on\n> confirmation latency by allowing weaker blocks after a certain time.\n> Hope this isn't noise, but thought someone must have considered this\n> before, or know of flaws in the scheme?\n>\n> Gory details:\n> http://rustyrussell.github.io/pettycoin/2014/10/30/More-Regular-Block-Times.html\n\nIrregularity is a required property for convergence. Imagine what\nwould happen in a network where a blocks were produced at an exact\ninterval: Almost everyone would produce one the exact same time, and\nthe network would fragment and because the process would continue it\nwould not converge. It is precisely the variance  being some huge\nmultiple of the network radius which allows the network to converge at\nall.\n\nWhen lower variance is tolerable for convergence it can be achieved by\nreducing the expectation. Maybe some other distribution can be proven\nto be convergent to, it's difficult to reason about.\n\nBitcoin testnet implements a rule that allows lower difficulty blocks\nafter a delay (20 minutes, in fact), but it's a testing-toy... not\nsecure or intended to be so. At least one altcoin has copied that\nbehavior and been exploited on account of it.\n\nIf you're simply looking for faster evidence that the network is\nworking on a particular transaction set, at some lower timescale:,\nthen thats already possible.  e.g. look into how the p2pool sharechain\nbuilds a consensus around mining work used for pooling. The same\nmechanism can be used to give faster transaction selection evidence.\n\nI'll dig up some citations for you later. Cheers."
            },
            {
                "author": "Rusty Russell",
                "date": "2014-10-31T03:31:12",
                "message_text_only": "Gregory Maxwell <gmaxwell at gmail.com> writes:\n> On Thu, Oct 30, 2014 at 11:18 PM, Rusty Russell <rusty at rustcorp.com.au> wrote:\n>> Hi all,\n>>\n>>         I've been toying with an algorithm to place a ceiling on\n>> confirmation latency by allowing weaker blocks after a certain time.\n>> Hope this isn't noise, but thought someone must have considered this\n>> before, or know of flaws in the scheme?\n>>\n>> Gory details:\n>> http://rustyrussell.github.io/pettycoin/2014/10/30/More-Regular-Block-Times.html\n>\n> Irregularity is a required property for convergence. Imagine what\n> would happen in a network where a blocks were produced at an exact\n> interval: Almost everyone would produce one the exact same time, and\n> the network would fragment and because the process would continue it\n> would not converge.\n\nYour point is well made.\n\nIf everyone published their easy blocks at the 20 minute mark,\ndivergence would be a problem (though with 6/7 blocks being normal, the\nnetwork would probably recover).  I was proposing to relay them as\nnormal, they're just not accepted until 20 minutes.\n\n(Though with the suggested variant of accepting the most-compatible\nrather than first-seen block, this isn't so critical).\n\n> It is precisely the variance  being some huge multiple of the network\n> radius which allows the network to converge at all.\n\nI hadn't thought about it that way, but I assumed GHOST mitigate this\ndown to some lower limit.  Or?\n\n> Bitcoin testnet implements a rule that allows lower difficulty blocks\n> after a delay (20 minutes, in fact), but it's a testing-toy... not\n> secure or intended to be so. At least one altcoin has copied that\n> behavior and been exploited on account of it.\n\nAgreed, that would be foolish.  Note that in my proposal, block\ntimestamps wouldn't reflect the delay (removing incentive to push\ntimestamps forward, but making judging historical blockchain's validity\nharder).\n\n> If you're simply looking for faster evidence that the network is\n> working on a particular transaction set, at some lower timescale:,\n> then thats already possible.  e.g. look into how the p2pool sharechain\n> builds a consensus around mining work used for pooling. The same\n> mechanism can be used to give faster transaction selection evidence.\n\nNice idea.  Publishing WIP blocks like this could provide evidence, but\nyou'd have to incentivize miners to publish them.  Can you think of a\nway to do that (which beats simply reducing the block time)?\n\n> I'll dig up some citations for you later. Cheers.\n\nThanks for your time,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Increasing regularity of block times?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Rusty Russell",
                "Gregory Maxwell",
                "Jeff Garzik"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5606
        }
    }
]