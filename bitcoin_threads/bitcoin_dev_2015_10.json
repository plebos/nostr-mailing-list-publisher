[
    {
        "title": "[bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2015-10-01T00:04:19",
                "message_text_only": "Adam Back <adam at cypherspace.org> writes:\n> I think from discussion with Gavin sometime during the montreal\n> scaling bitcoin workshop, XT maybe willing to make things easy and\n> adapt what it's doing.  For example in relation to versionBits Gavin\n> said he'd be willing to update XT with an updated/improved\n> versionBits, for example.\n>\n> It seems more sensible to do what is simple and clean and have both\n> core do that, and XT follow if there is no particular philosophy\n> debate on a given technical topic.  This seems a quite constructive\n> approach.\n\nThat too, but let's not break existing software.  This proposal allows\nthat, and is trivial.\n\nCheers,\nRusty."
            },
            {
                "author": "Rusty Russell",
                "date": "2015-10-01T00:06:03",
                "message_text_only": "John Winslow via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> Two observations from a Bitcoin investor and non-programmer:\n\nPlease take this off the -dev list.\n\nThanks,\nRusty."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-01T00:11:49",
                "message_text_only": "On Oct 1, 2015 12:14 AM, \"Jorge Tim\u00f3n\" <jtimon at jtimon.cc> wrote:\n>\n> On Wed, Sep 30, 2015 at 11:06 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n> >> Exactly, all those \"mini divergences\" eventually disappear\n> >\n> > A miner that has accepted a newly invalid transaction into its memory\npool\n> > and is trying to mine it, will keep producing invalid blocks forever\nuntil\n> > the owner shuts it down and upgrades. This was happening for weeks after\n> > P2SH triggered.\n> >\n> > For instance, any miner that has modified/bypassed IsStandard() can do\nthis,\n> > or any miner that accepts direct transaction submission, or any miner\nthat\n> > runs an old node from before OP_NOPs were made non-standard.\n>\n> That is correct. But doesn't seem to contradict anything I said.\n\nActually, no, sorry, the second paragraph is not correct as explained by\nGreg Maxwell.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/a24e6353/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2015-10-01T14:23:39",
                "message_text_only": "On 9/30/2015 10:58 AM, Jorge Tim\u00f3n via bitcoin-dev wrote:\n\n> I don't think we need to wait for you to understand the advantages of\n> softforks to move forward with BIP65, just like we didn't need to wait\n> for every developer and user to understand BIP66 to deploy it.\n\nWhat a bad example.  BIP66 deployment failed, and was rescued by\ncentralized intervention."
            },
            {
                "author": "NotMike Hearn",
                "date": "2015-10-02T01:57:38",
                "message_text_only": "On 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> There is no consensus on using a soft fork to deploy this feature. It will\n> result in the same problems as all the other soft forks - SPV wallets will\n> become less reliable during the rollout period. I am against that, as it's\n> entirely avoidable.\n>\n> Make it a hard fork and my objection will be dropped.\n>\n> Until then, as there is no consensus, you need to do one of two things:\n>\n> 1) Drop the \"everyone must agree to make changes\" idea that people here\nlike\n> to peddle, and do it loudly, so everyone in the community is correctly\n> informed\n>\n> 2) Do nothing\n>\n>\n\nI agree with Mike Hearn that there is no consensus on using a soft fork to\ndeploy this feature. Either everyone agrees that we should all agree on\nconsensus or else there is arbitrary disagreement. You cannot have it both\nways.\n\nIt is very important that we reach consensus on consensus or, if you will,\nmeta0consensus. I think we should Do nothing as that is clearly the choice\nthat we have taken re: blocksize. If we use one set of rules for that\ndecision we should use the same set of rules for all decisions and there is\nno middle ground.\n\nThank you.\n\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/4afdfa1b/attachment.html>"
            },
            {
                "author": "GC",
                "date": "2015-10-02T02:12:58",
                "message_text_only": "Or, you know, enter some discussions on what exactly are the issues that SPV\nclients face during soft forks and see if anything can be done (on all\nsides) to mitigate the risks.\n\nCrazy stuff, I know \u0160 ;-)\n\nFrom:  NotMike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nReply-To:  NotMike Hearn <not.mike.hearn at gmail.com>\nDate:  Friday, 2 October 2015 9:57 am\nTo:  <bitcoin-dev at lists.linuxfoundation.org>\nSubject:  Re: [bitcoin-dev] Let's deploy BIP65 CHECKLOCKTIMEVERIFY!\n\nOn 28 September 2015 at 06:48, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> There is no consensus on using a soft fork to deploy this feature. It will\n> result in the same problems as all the other soft forks - SPV wallets will\n> become less reliable during the rollout period. I am against that, as it's\n> entirely avoidable.\n>\n> Make it a hard fork and my objection will be dropped.\n>\n> Until then, as there is no consensus, you need to do one of two things:\n>\n> 1) Drop the \"everyone must agree to make changes\" idea that people here like\n> to peddle, and do it loudly, so everyone in the community is correctly\n> informed\n>\n> 2) Do nothing\n>\n>\n\nI agree with Mike Hearn that there is no consensus on using a soft fork to\ndeploy this feature. Either everyone agrees that we should all agree on\nconsensus or else there is arbitrary disagreement. You cannot have it both\nways.\n\nIt is very important that we reach consensus on consensus or, if you will,\nmeta0consensus. I think we should Do nothing as that is clearly the choice\nthat we have taken re: blocksize. If we use one set of rules for that\ndecision we should use the same set of rules for all decisions and there is\nno middle ground.\n\nThank you.\n\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n_______________________________________________ bitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/f95134ba/attachment-0001.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-05T10:59:54",
                "message_text_only": "Putting aside stupid arguments about who is older or who starting using the\nterm SPV wallet first, let me try and make a better suggestion than what's\nin the BIP. How about the following:\n\nA new flag is introduced to Core, --scriptchecks=[all,standardonly,none].\nThe default is all. When set to \"standardonly\", non-standard scripts are\nnot checked but others are. This is similar to the behaviour during a soft\nfork. In \"none\" you have something a bit like SPV mode, but still\ncalculating the UTXO set. This flag is simple and can be implemented in a\nfew lines of code. Then an unused opcode is used for CLTV, so making it a\nhard fork.\n\nThis has the following advantages:\n\n   - Nodes that want the pseudo-SPV behaviour of a soft fork can opt in to\n   it if they want it. This prioritises availability (in a sense) over\n   correctness.\n\n   - But otherwise, nodes will prioritise correctness by default, which is\n   how it should be. This isn't PHP where nonsensical code the interpreter\n   doesn't understand just does ...... something. This is financial software\n   where money is at risk. I feel very strongly about this: undefined\n   behaviour is fine *if you opted into getting it. *Otherwise it should be\n   avoided whenever possible.\n\n   - SPV wallets do the right thing by default.\n\n   - IsStandard doesn't silently become a part of the consensus rules.\n\n   - All other software gets simpler. It's not just SPV wallets. Block\n   explorers, for example, can just add a single line to their opcode map.\n   With a soft fork they have to implement the entire soft fork logic just to\n   figure out when an opcode transitioned from OP_NOP to CLTV and make sure\n   they render old scripts differently to new scripts. And they face tricky\n   questions - do they render an opcode as a NOP if the miner who built it was\n   un-upgraded, or do they calculate the flag day and change all of them after\n   that? It's just an explosion of complexity.\n\nMany people by now have accepted that hard forks are simpler, conceptually\ncleaner, and prioritise correctness of results over availability of\nresults. I think these arguments are strong.\n\nSo let me try addressing the counter-arguments one more time:\n\n   - Hard forks require everyone to upgrade and soft forks don't. I still\n   feel this one has never actually been explained. There is no difference to\n   the level of support required to trigger the change. With the suggestion\n   above, if someone can't or won't upgrade their full node but can no longer\n   verify the change, they can simply restart with -scriptchecks=standardonly\n   and get the soft fork behaviour. Or they can upgrade and get their old\n   security level back.\n\n   - Hard forks are somehow bad or immoral or can lead to \"schisms\". This\n   is just saying, if we hold a vote, the people who lose the vote might try\n   starting a civil war and refuse to accept the change. That's not a reason\n   to not hold votes.\n\n   But at any rate, they can do that with soft forks too: just decide that\n   any output that contains OP_CLTV doesn't make it into the UTXO set.\n   Eventually coins that trace back to such an output will become unusable in\n   the section of the economy that decided to pick a fight.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/563a298c/attachment-0001.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-10-05T11:23:39",
                "message_text_only": "- It is true that hard forks produce a much cleaner outcome, in terms of\nwell defined behavior across the entire network.\n\n- Replacing an opcode should not result in undefined behavior.  The\nnon-upgraded behavior is defined and deterministic.\n\n- IsStandard remains an assistant.  Miners may mine non-standard\ntransactions.\n\n- \"Hard forks require everyone to upgrade and soft forks don't\"   Doesn't\nrequire tons of explanation:  Non upgraded clients continue working on the\nnetwork even after the rules are upgraded.\n\nAll those corrections aside, I do think there has been too much hysteria\nsurrounding hard forks.  Hard forks, when done right, produce a much\ncleaner system for users.\n\n\n\n\n\n\n\n\nOn Mon, Oct 5, 2015 at 6:59 AM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Putting aside stupid arguments about who is older or who starting using\n> the term SPV wallet first, let me try and make a better suggestion than\n> what's in the BIP. How about the following:\n>\n> A new flag is introduced to Core, --scriptchecks=[all,standardonly,none].\n> The default is all. When set to \"standardonly\", non-standard scripts are\n> not checked but others are. This is similar to the behaviour during a soft\n> fork. In \"none\" you have something a bit like SPV mode, but still\n> calculating the UTXO set. This flag is simple and can be implemented in a\n> few lines of code. Then an unused opcode is used for CLTV, so making it a\n> hard fork.\n>\n> This has the following advantages:\n>\n>    - Nodes that want the pseudo-SPV behaviour of a soft fork can opt in\n>    to it if they want it. This prioritises availability (in a sense) over\n>    correctness.\n>\n>    - But otherwise, nodes will prioritise correctness by default, which\n>    is how it should be. This isn't PHP where nonsensical code the interpreter\n>    doesn't understand just does ...... something. This is financial software\n>    where money is at risk. I feel very strongly about this: undefined\n>    behaviour is fine *if you opted into getting it. *Otherwise it should\n>    be avoided whenever possible.\n>\n>    - SPV wallets do the right thing by default.\n>\n>    - IsStandard doesn't silently become a part of the consensus rules.\n>\n>    - All other software gets simpler. It's not just SPV wallets. Block\n>    explorers, for example, can just add a single line to their opcode map.\n>    With a soft fork they have to implement the entire soft fork logic just to\n>    figure out when an opcode transitioned from OP_NOP to CLTV and make sure\n>    they render old scripts differently to new scripts. And they face tricky\n>    questions - do they render an opcode as a NOP if the miner who built it was\n>    un-upgraded, or do they calculate the flag day and change all of them after\n>    that? It's just an explosion of complexity.\n>\n> Many people by now have accepted that hard forks are simpler, conceptually\n> cleaner, and prioritise correctness of results over availability of\n> results. I think these arguments are strong.\n>\n> So let me try addressing the counter-arguments one more time:\n>\n>    - Hard forks require everyone to upgrade and soft forks don't. I still\n>    feel this one has never actually been explained. There is no difference to\n>    the level of support required to trigger the change. With the suggestion\n>    above, if someone can't or won't upgrade their full node but can no longer\n>    verify the change, they can simply restart with -scriptchecks=standardonly\n>    and get the soft fork behaviour. Or they can upgrade and get their old\n>    security level back.\n>\n>    - Hard forks are somehow bad or immoral or can lead to \"schisms\". This\n>    is just saying, if we hold a vote, the people who lose the vote might try\n>    starting a civil war and refuse to accept the change. That's not a reason\n>    to not hold votes.\n>\n>    But at any rate, they can do that with soft forks too: just decide\n>    that any output that contains OP_CLTV doesn't make it into the UTXO set.\n>    Eventually coins that trace back to such an output will become unusable in\n>    the section of the economy that decided to pick a fight.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/6fe4130c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-05T11:28:13",
                "message_text_only": "Well, let's agree to disagree on these two things:\n\n- I define \"working\" for a full node as verifying everything; if a node\nstarts skipping bits then I'd say it's not really \"working\" according to\nits original design goals\n\n- Saying the pre-fork behaviour is defined and deterministic is true, but\nonly in the sense that reading an uninitialised variable in C is defined\nand deterministic. It reads whatever happens to be at that stack position:\neasily defined. For many programs, that may be the same value each time:\ndeterministic. Nonetheless, it's considered undefined behaviour by the C\nspecification and programmers that rely on it can easily create security\nholes.\n\nIn the same way, I'd consider a node running a script with a NOP and\nreaching the opposite conclusion from other nodes to be a case of undefined\nbehaviour leading to a non-fully-working node.\n\nBut these are arguments about the semantics of words. I think we both know\nwhat each other is getting at.\n\nOn Mon, Oct 5, 2015 at 1:23 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n\n>\n> - It is true that hard forks produce a much cleaner outcome, in terms of\n> well defined behavior across the entire network.\n>\n> - Replacing an opcode should not result in undefined behavior.  The\n> non-upgraded behavior is defined and deterministic.\n>\n> - IsStandard remains an assistant.  Miners may mine non-standard\n> transactions.\n>\n> - \"Hard forks require everyone to upgrade and soft forks don't\"   Doesn't\n> require tons of explanation:  Non upgraded clients continue working on the\n> network even after the rules are upgraded.\n>\n> All those corrections aside, I do think there has been too much hysteria\n> surrounding hard forks.  Hard forks, when done right, produce a much\n> cleaner system for users.\n>\n>\n>\n>\n>\n>\n>\n>\n> On Mon, Oct 5, 2015 at 6:59 AM, Mike Hearn via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Putting aside stupid arguments about who is older or who starting using\n>> the term SPV wallet first, let me try and make a better suggestion than\n>> what's in the BIP. How about the following:\n>>\n>> A new flag is introduced to Core, --scriptchecks=[all,standardonly,none].\n>> The default is all. When set to \"standardonly\", non-standard scripts are\n>> not checked but others are. This is similar to the behaviour during a soft\n>> fork. In \"none\" you have something a bit like SPV mode, but still\n>> calculating the UTXO set. This flag is simple and can be implemented in a\n>> few lines of code. Then an unused opcode is used for CLTV, so making it a\n>> hard fork.\n>>\n>> This has the following advantages:\n>>\n>>    - Nodes that want the pseudo-SPV behaviour of a soft fork can opt in\n>>    to it if they want it. This prioritises availability (in a sense) over\n>>    correctness.\n>>\n>>    - But otherwise, nodes will prioritise correctness by default, which\n>>    is how it should be. This isn't PHP where nonsensical code the interpreter\n>>    doesn't understand just does ...... something. This is financial software\n>>    where money is at risk. I feel very strongly about this: undefined\n>>    behaviour is fine *if you opted into getting it. *Otherwise it should\n>>    be avoided whenever possible.\n>>\n>>    - SPV wallets do the right thing by default.\n>>\n>>    - IsStandard doesn't silently become a part of the consensus rules.\n>>\n>>    - All other software gets simpler. It's not just SPV wallets. Block\n>>    explorers, for example, can just add a single line to their opcode map.\n>>    With a soft fork they have to implement the entire soft fork logic just to\n>>    figure out when an opcode transitioned from OP_NOP to CLTV and make sure\n>>    they render old scripts differently to new scripts. And they face tricky\n>>    questions - do they render an opcode as a NOP if the miner who built it was\n>>    un-upgraded, or do they calculate the flag day and change all of them after\n>>    that? It's just an explosion of complexity.\n>>\n>> Many people by now have accepted that hard forks are simpler,\n>> conceptually cleaner, and prioritise correctness of results over\n>> availability of results. I think these arguments are strong.\n>>\n>> So let me try addressing the counter-arguments one more time:\n>>\n>>    - Hard forks require everyone to upgrade and soft forks don't. I\n>>    still feel this one has never actually been explained. There is no\n>>    difference to the level of support required to trigger the change. With the\n>>    suggestion above, if someone can't or won't upgrade their full node but can\n>>    no longer verify the change, they can simply restart with\n>>    -scriptchecks=standardonly and get the soft fork behaviour. Or they can\n>>    upgrade and get their old security level back.\n>>\n>>    - Hard forks are somehow bad or immoral or can lead to \"schisms\".\n>>    This is just saying, if we hold a vote, the people who lose the vote might\n>>    try starting a civil war and refuse to accept the change. That's not a\n>>    reason to not hold votes.\n>>\n>>    But at any rate, they can do that with soft forks too: just decide\n>>    that any output that contains OP_CLTV doesn't make it into the UTXO set.\n>>    Eventually coins that trace back to such an output will become unusable in\n>>    the section of the economy that decided to pick a fight.\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/1aabb5c5/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-05T12:04:12",
                "message_text_only": "On Oct 5, 2015 1:28 PM, \"Mike Hearn via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Well, let's agree to disagree on these two things:\n>\n> - I define \"working\" for a full node as verifying everything; if a node\nstarts skipping bits then I'd say it's not really \"working\" according to\nits original design goals\n\nBut assuming the hashrate majority has upgraded (and we're using 95% as the\nminer upgrade confirmation threshold to start activation, so that\nassumption seems pretty safe), a non-upgraded full node and an upgraded\nfull will converge on what they see: \"the most-work valid chain\" will be\nthe same for both. A non-upgraded full node wallet waiting for several\nconfirmations (for example, 6 confirmations) will be just as safe as an\nupgraded one. In that sense, it keeps working. On top of that, nodes (of\nany kind) can use unknown block version numbers to notify the user or even\nstop working (the same notification mechanism you would use with hardforks).\n\nI agree that hardforks are necessary and we should deploy a hardfork asap\nto show the world they are indeed possible (bip99 proposes a likely\nuncontroversial one), but I still believe that is clear that softfork\ndeployment is preferrable in many cases like this one.\n\nAre you going to produce a bip65 hardfork alternative to try to convince\npeople of its advantages over bip65 (it is not clear to me how you include\na new script operand via hardfork)?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/b9f495ac/attachment.html>"
            },
            {
                "author": "Cl\u00e9ment Elbaz",
                "date": "2015-10-05T12:08:27",
                "message_text_only": "It will get correct results about :\n- the existence every block\n- the existence of every transaction\n\nIt will get incorrect results :\n- about the *nature* of some transactions\n- and therefore, about the balances of some wallets.\n\nI fully agree with Mike here.\n\nLe lun. 5 oct. 2015 \u00e0 14:04, Jorge Tim\u00f3n <\nbitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n>\n> On Oct 5, 2015 1:28 PM, \"Mike Hearn via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > Well, let's agree to disagree on these two things:\n> >\n> > - I define \"working\" for a full node as verifying everything; if a node\n> starts skipping bits then I'd say it's not really \"working\" according to\n> its original design goals\n>\n> But assuming the hashrate majority has upgraded (and we're using 95% as\n> the miner upgrade confirmation threshold to start activation, so that\n> assumption seems pretty safe), a non-upgraded full node and an upgraded\n> full will converge on what they see: \"the most-work valid chain\" will be\n> the same for both. A non-upgraded full node wallet waiting for several\n> confirmations (for example, 6 confirmations) will be just as safe as an\n> upgraded one. In that sense, it keeps working. On top of that, nodes (of\n> any kind) can use unknown block version numbers to notify the user or even\n> stop working (the same notification mechanism you would use with hardforks).\n>\n> I agree that hardforks are necessary and we should deploy a hardfork asap\n> to show the world they are indeed possible (bip99 proposes a likely\n> uncontroversial one), but I still believe that is clear that softfork\n> deployment is preferrable in many cases like this one.\n>\n> Are you going to produce a bip65 hardfork alternative to try to convince\n> people of its advantages over bip65 (it is not clear to me how you include\n> a new script operand via hardfork)?\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/eea49466/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-05T12:16:03",
                "message_text_only": "On Oct 5, 2015 2:08 PM, \"Cl\u00e9ment Elbaz\" <clem.ds at gmail.com> wrote:\n>\n> It will get correct results about :\n> - the existence every block\n> - the existence of every transaction\n>\n> It will get incorrect results :\n> - about the nature of some transactions\n\nGiven the assumptions above, only of transactions without enough\nconfirmations.\n\n> - and therefore, about the balances of some wallets.\n\nNot if the wallet waits for enough confirmations.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/51a36627/attachment.html>"
            },
            {
                "author": "Cl\u00e9ment Elbaz",
                "date": "2015-10-05T12:29:49",
                "message_text_only": "I fail to see how the number of confirmations has anything to do with it.\n\nWith a non-upgraded Bitcoin software during a soft fork, you get the same\nblocks as everyone else, and you get the same confirmed transactions as\neveryone else. So you do have the exact same \"writings\" as everyone else to\ncalculate your balance.\n\nThe problem is that some transactions that are meaningless to you are\nactually meaningful to people using an upgraded Bitcoin software.\n\nTherefore during a softfork, while you can not miss the *existence* of a\ntransaction, you can miss its *meaning*.\n\nIf Bitcoin was just a decentralized whiteboard for people to write on it,\nthat would be no problem.\n\nBut as soon as you try to actually use Bitcoin (that is, calculate the\naccurate balance of a wallet in a very broad sense), you can be led a wrong\nresult if you did not upgrade, which is a critical problem for financial\nsoftware.\n\nAnd because nothing prevent people to send you transactions of a new type,\nyou have no way to \"opt out\" of this problem.\n\n\n\nLe lun. 5 oct. 2015 \u00e0 14:16, Jorge Tim\u00f3n <jtimon at jtimon.cc> a \u00e9crit :\n\n>\n> On Oct 5, 2015 2:08 PM, \"Cl\u00e9ment Elbaz\" <clem.ds at gmail.com> wrote:\n> >\n> > It will get correct results about :\n> > - the existence every block\n> > - the existence of every transaction\n> >\n> > It will get incorrect results :\n> > - about the nature of some transactions\n>\n> Given the assumptions above, only of transactions without enough\n> confirmations.\n>\n> > - and therefore, about the balances of some wallets.\n>\n> Not if the wallet waits for enough confirmations.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/8c333034/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-05T15:42:56",
                "message_text_only": "On Mon, Oct 5, 2015 at 2:29 PM, Cl\u00e9ment Elbaz <clem.ds at gmail.com> wrote:\n> The problem is that some transactions that are meaningless to you are\n> actually meaningful to people using an upgraded Bitcoin software.\n>\n> Therefore during a softfork, while you can not miss the existence of a\n> transaction, you can miss its meaning.\n\nWhy would you care about payments to other people?\nThe scriptPubKey's that you give to your payers certainly have meaning to you.\n\n> But as soon as you try to actually use Bitcoin (that is, calculate the\n> accurate balance of a wallet in a very broad sense), you can be led a wrong\n> result if you did not upgrade, which is a critical problem for financial\n> software.\n\nWhat is it important that you are able to calculate balances of\nwallets that aren't yours?\n\n> And because nothing prevent people to send you transactions of a new type,\n> you have no way to \"opt out\" of this problem.\n\nWhy would anyone \"pay you\" to a scriptPubKey you don't understand?\n\nI can \"pay\" the bill of my internet services by burying cash in a park\nnearby my house for my provider to pick up later.\nBut if I don't tell my provider, it will never know. If I inform it, I\nwill get an answer: \"no, sorry, we won't accept this new 'form of\npayment' of yours as payment\"."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-05T12:10:40",
                "message_text_only": "Hi Jorge,\n\nI'm glad we seem to be reaching agreement that hard forks aren't so bad\nreally and can even have advantages. It seems the remaining area of\ndisagreement is this rollout specifically.\n\n> a non-upgraded full node and an upgraded full will converge on what they\n> see: \"the most-work valid chain\" will be the same for both.\n>\nIndeed it will, but the point of fully verifying is to *not* converge with\nthe miner majority, if something goes wrong and they aren't following the\nsame rules as you. Defining \"work\" as \"converge with miner majority\" is\nfine for SPV wallets and a correct or at least reasonable definition. But\nnot for fully verifying nodes, where non-convergence is an explicit design\ngoal! That's the only thing that stops miners awarding themselves infinite\nfree money!\n\n> Are you going to produce a bip65 hardfork alternative to try to convince\n> people of its advantages over bip65 (it is not clear to me how you include\n> a new script operand via hardfork)?\n>\nNo, I'm focused on the block size issue right now. I don't think there's\nmuch point in improving the block chain protocol if most users are going to\nbe unable to use it. But the modification is simple, right? You just\nreplace this bit:\n\n  CHECKLOCKTIMEVERIFY redefines the existing NOP2 opcode\n\nwith this\n\n  CHECKLOCKTIMEVERIFY defines a new opcode (0xc0)\n\nand that's it. The section *upgrade and testing plan* only says TBD so that\npart doesn't even need to change at all, as it's not written yet.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/46cc6d47/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-05T15:33:30",
                "message_text_only": "On Mon, Oct 5, 2015 at 2:10 PM, Mike Hearn <hearn at vinumeris.com> wrote:\n> Hi Jorge,\n>\n> I'm glad we seem to be reaching agreement that hard forks aren't so bad\n> really and can even have advantages. It seems the remaining area of\n> disagreement is this rollout specifically.\n>>\n>> a non-upgraded full node and an upgraded full will converge on what they\n>> see: \"the most-work valid chain\" will be the same for both.\n>\n> Indeed it will, but the point of fully verifying is to not converge with the\n> miner majority, if something goes wrong and they aren't following the same\n> rules as you. Defining \"work\" as \"converge with miner majority\" is fine for\n> SPV wallets and a correct or at least reasonable definition. But not for\n> fully verifying nodes, where non-convergence is an explicit design goal!\n> That's the only thing that stops miners awarding themselves infinite free\n> money!\n\nAs Greg explained to you repeatedly, a softfork won't cause a\nnon-upgraded full node to start accepting blocks that create more\nsubsidy than is valid.\nIt's only the new rule (in this case, BIP65) that they won't validate.\nThat's very different security from an SPV node, and as Greg also\nexplained, SPV nodes could be much more secure than bitcoinj nodes\n(they could, for example, validate the coinbase transaction of every\nblock).\nIf a non-upgraded node it's not a \"full node\" for you, that's fine,\nbut it is for everyone else. So please stop confusing other people.\nAssuming the majority of the hashrate upgraded, there's almost no risk\nfor non-upgraded full nodes.\n\n>> Are you going to produce a bip65 hardfork alternative to try to convince\n>> people of its advantages over bip65 (it is not clear to me how you include a\n>> new script operand via hardfork)?\n>\n> No, I'm focused on the block size issue right now. I don't think there's\n> much point in improving the block chain protocol if most users are going to\n> be unable to use it. But the modification is simple, right? You just replace\n> this bit:\n>\n>   CHECKLOCKTIMEVERIFY redefines the existing NOP2 opcode\n>\n> with this\n>\n>   CHECKLOCKTIMEVERIFY defines a new opcode (0xc0)\n>\n> and that's it. The section upgrade and testing plan only says TBD so that\n> part doesn't even need to change at all, as it's not written yet.\n\nThanks, I wasn't aware that there was room for new opcodes that\nweren't noops already.\nCan you give an example of an attack in which a non-upgraded full node\nwallet is defrauded with BIP65 but could not with the hardfork\nalternative (that nobody seems to be willing to implement)?\nPlease, don't assume 0 confirmation transactions or similar\nunreasonable assumptions (ie see section 11 \"Calculations\" of the\nBitcoin whitepaper)."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-05T16:46:28",
                "message_text_only": ">\n> As Greg explained to you repeatedly, a softfork won't cause a\n> non-upgraded full node to start accepting blocks that create more\n> subsidy than is valid.\n>\n\nIt was an example. Adam Back's extension blocks proposal would, in fact,\nallow for a soft forking change that creates more subsidy than is valid (or\ndoes anything else) by hiding one block inside another.\n\nAnyway, I think you got my point.\n\n\n> That's very different security from an SPV node, and as Greg\n> also explained, SPV nodes could be much more secure than bitcoinj\n> nodes (they could, for example, validate the coinbase transaction of\n> every block).\n>\n\nI'm pretty sure Gregory did not use such an example because it's dead\nwrong. You cannot verify the size of a coinbase without being a fully\nverifying node because you need to know the fees in the block, and\ncalculating that requires access to the entire UTXO set.\n\nThis sort of thing is why I get annoyed when people lecture me about SPV\nwallets and the things they \"should\" do. None of you guys has built one. I\nkeep seeing wild statements about theoretical unicorn wallets that nobody\nhas even designed, and how all existing wallets are crappy and insecure\nbecause they don't meet your ever shifting goal posts.\n\nTo everyone making such statements I say: go away and build an SPV wallet\nof your own from scratch. Then you will understand the engineering\ntradeoffs involved much better, and be in a much better position to debate\nwhat they should or should not be doing.\n\nAnd bear in mind if it weren't for the work myself and a few others did on\nSPV wallets, everyone would be using web wallets instead. Then you'd all\njust complain about that instead.\n\n\n> Can you give an example of an attack in which a non-upgraded full node\n> wallet is defrauded with BIP65 but could not with the hardfork\n> alternative (that nobody seems to be willing to implement)?\n>\n\nMaking it a hard fork instead is changing one line of code (ignoring the\ncode to set up the flag day, which can be based on the code for BIP101). If\nit comes down to it, then I'll do the work to change that one line. But\nobviously I'd need to see agreement from the maintainers that such a pull\nreq would be merged first.\n\nThe example is this: find someone that accepts 1-block confirmed\ntransactions in return for something valuable. There are plenty of them out\nthere. Once the soft fork starts, send a P2SH transaction that defines a\nnew output controlled by OP_CLTV. It will be incorporated into the UTXO set\nby all miners because it's opaque (p2sh).\n\nNow send a transaction that pays the merchant, and make it spend your\nOP_CLTV output with an invalid script. New nodes will reject it as a rule\nviolator. Old nodes won't. So at some point an old miner will create a\nblock containing your invalid transaction, the merchant will think they got\npaid, they'll give you the stuff and the fraud is done.\n\n\n> Please, don't assume 0 confirmation transactions or similar\n> unreasonable assumptions (ie see section 11 \"Calculations\" of the\n> Bitcoin whitepaper).\n>\n\nThis is just embarrassing - do any of you guys at Blockstream actually use\nBitcoin in the real world? Virtually all payments that aren't moving money\ninto/out of exchange wallets are 0-confirm in reality. I described a\n1-confirm attack above, but really ... come on.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/601a316d/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2015-10-06T06:20:31",
                "message_text_only": "On Mon, Oct 05, 2015 at 06:46:28PM +0200, Mike Hearn via bitcoin-dev wrote:\n> The example is this: find someone that accepts 1-block confirmed\n> transactions in return for something valuable. There are plenty of them out\n> there. Once the soft fork starts, send a P2SH transaction that defines a\n> new output controlled by OP_CLTV. It will be incorporated into the UTXO set\n> by all miners because it's opaque (p2sh).\n> \n> Now send a transaction that pays the merchant, and make it spend your\n> OP_CLTV output with an invalid script. New nodes will reject it as a rule\n> violator. Old nodes won't.\n\nOld nodes running bitcoind will see it as OP_NOP2, and will reject it\nunless they've manually disabled SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS,\nwhich (aiui) has been available since bitcoin 0.10 [0], but not backported\nto 0.8 or 0.9.\n\n[0] https://github.com/bitcoin/bitcoin/commit/0391423\n\nThat covers about 4700/5880 nodes going by bitnodes.21.co; but I can't\ntell how many miners it covers.\n\nFurther, AIUI, nodes running 0.8 or 0.9 will still apply IsStandard()\nchecks to scripts attempting to spend p2sh outputs [1], so will also\nfail to either mine or relay your OP_NOP2 payment.\n\n[1] https://github.com/bitcoin/bitcoin/commit/6259937\n\n> So at some point an old miner will create a\n> block containing your invalid transaction, the merchant will think they got\n> paid, they'll give you the stuff and the fraud is done.\n\nMy understanding is that this isn't supposed to be a problem because you\nwon't be able to find an old miner that will do that; released versions\nof bitcoin already block it by default.\n\nSure, someone could disable those checks and not pay attention to a soft\nfork that will cause their blocks to be orphaned, but I'm not seeing why\nthat's any different a threat compared to someone deliberately mining\ninvalid blocks to do 1-confirmation doublespends against merchants not\nrunning a full node.\n\nAt least, that's my understanding, and I'm not an expert, so corrections\nappreciated.\n\nCheers,\naj"
            },
            {
                "author": "Micha Bailey",
                "date": "2015-10-07T06:13:23",
                "message_text_only": "On Monday, October 5, 2015, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> As Greg explained to you repeatedly, a softfork won't cause a\n>> non-upgraded full node to start accepting blocks that create more\n>> subsidy than is valid.\n>>\n>\n> It was an example. Adam Back's extension blocks proposal would, in fact,\n> allow for a soft forking change that creates more subsidy than is valid (or\n> does anything else) by hiding one block inside another.\n>\n\nMaybe I'm missing something, but wouldn't this turn into a hard fork the\nmoment you try to spend an output created in one of these extension blocks?\nSo sure, the block that contains the extension would be considered valid,\nbut unupgraded validators will not update the UTXO set accordingly, meaning\nthat those new TXOs can't be spent because, according to their rules, they\ndon't exist.\n\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/a86d8d32/attachment-0001.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-05T13:29:19",
                "message_text_only": "On Fri, Oct 2, 2015 at 4:12 AM, GC via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Or, you know, enter some discussions on what exactly are the issues that SPV\n> clients face during soft forks and see if anything can be done (on all\n> sides) to mitigate the risks.\n\nThis has already been discussed. The recommended risk mitigation\nmechanism for softforks it's just the same as the one for hardforks:\nunknown block version notifications."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-05T13:24:54",
                "message_text_only": "\"Consensus\" it's a term we use for consensus critical code and we\nrefer to different machines (potentially with different software)\nvalidating in exactly the same way.\nI think also using the term for people agreeing on what those\nconsensus rules is confusing, so in BIP99 I used the term\n\"uncontroversial\" instead.\n>From BIP99 current's content (improvements welcomed):\n\n\"\nUncontroversial consensus upgrades\n\n\"Uncontroversial\" is something though to define in this context. What\nif a single user decides he won't upgrade no matter what and he\ndoesn't even attempt to explain his decision? Obviously, such a user\nshould be just ignored. But what if the circumstances are slightly\ndifferent? What if they're 2, 10 users? Where's the line? It is\npossible that we can never have a better definition than \"I know it\nwhen I see it\" [citation].\n\"\n\nThe fact that there's at least 3 different proposals for a blocksize\nincrease, that there's not a lot of data comparing different possible\nblock sizes and its potential effects on block propagation and that\nthe development progress has enormously slowed down during months of\ndiscussion are, in my opinion, clear signs that none of the current\nproposals are \"uncontroversial\", even by this vague definition.\n\nI believe BIP65 is uncontroversial since no reasonable objections to\nthe feature itself have been raised, it has been widely reviewed and\ntested. The only complain is about it is it's softfork deployment\nmechanism.\n\nWas deployment of bip16, bip30 or bip66 controversial (which were\ndeployed via softforks, some of them even with people [ie Mike Hearn]\npreferring always hardforks over softforks) uncontroversial?\nI believe they were all (maybe with the exception of bip16)\nuncontroversial. That's the story bip99 is telling, but bip99 is not\nfinished so we can change that if it makes sense.\nWe could say that they have been \"Unilateral softforks\", but I don't\nthink that would be fair for the miners who helped deploy it. Or we\ncould always create a new category in bip99 (please, propose a new\ncategory of softforks if you think there's some potential case that's\nnot covered).\n\nThis is not about Mike Hearn or you or any person in particular.\n\"Uncontroversial\" is so far defined in a vague way, if you think you\ncan put a more formal definition forward, please do so (provided that\nit's not an absurd definition which allows any individual to block\neverything without reasonable arguments). I'm more than happy\nimproving bip99 before we move it from its current \"draft\" status.\n\nIf Mike Hearn (and you) are right, I should update bip99 to NEVER\nrecommend softforks for consensus rule changes.\nBut I still believe it is uncontroversial that softforks have great\nadvantages in many cases (even if not everybody understand this).\nI want bip99 itself to be uncontroversial, so please nit/nack fast,\nnit/nack often and please please please nit/nack on time (while bip99\nis still a draft)."
            },
            {
                "author": "Anthony Towns",
                "date": "2015-10-07T15:00:14",
                "message_text_only": "On Tue, Sep 29, 2015 at 06:31:28PM +0000, Gregory Maxwell via bitcoin-dev wrote:\n> On Mon, Sep 28, 2015 at 10:48 AM, Mike Hearn via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > There is no consensus on using a soft fork to deploy this feature. It will\n> > result in the same problems as all the other soft forks - SPV wallets will\n> > become less reliable during the rollout period. I am against that, as it's\n> > entirely avoidable.\n> > Make it a hard fork and my objection will be dropped.\n> I'm surprised to see this response-- [...]\n> I am having a little difficulty making sense of this complaint. [...]\n\nI think I finally understand this objection.\n\nFor a hard fork, activated by a majority of nodes/hashpower upgrading\nto a new bitcoin release, the behaviour is:\n\n - upgraded bitcoin nodes: everything works fine\n\n - non-upgraded bitcoin nodes: total breakage. there will be a push\n   alert telling you to upgrade. anyone who doesn't will think they're\n   tracking \"bitcoin\" but will actually be tracking a new \"bitcoin-old\"\n   altcoin. most non-upgraded miners will presumably realise they're\n   wasting hashpower and stop doing this pretty quick; and remaining\n   miners will only create blocks very slowly due to sudden reduced\n   hashpower, without possibility of difficulty adjustment. users who\n   don't uprade will try to do transactions, but won't see them confirm\n   for hours or days due to lack of hashpower.\n\n - SPV nodes: they track the upgraded majority, everything works fine\n   even if they don't upgrade\n\nFor a soft fork, again activated by the majority of upgraded hashpower,\nthe behaviour is:\n\n - upgraded bitcoin nodes: everything works fine\n\n - non-upgraded bitcoin miners willing to mine newly unacceptable txs:\n   may produce orphaned blocks; may be able to be forced into producing\n   blocks that will be orphaned\n\n - other non-upgraded bitcoin nodes: everything works fine\n\n - SPV nodes: partial breakage -- may track invalid blocks for 1-2\n   confirmations until the set of \"non-upgraded bitcoin miners willing\n   to produce newly unacceptable txs\" becomes vanishingly few.\n\nIn the hard fork case, all non-upgraded nodes get a DoS attack, but\naren't likey to be hit by doublespends. That's inconvenient, but it's\nnot too bad.\n\nIn the soft fork case, if there's likely to be old nodes mining\npreviously invalid transactions, SPV clients become very unreliable,\nto the point of possibly seeing semi-regular double-spends with 1 or\n2 confirmation, until miners that aren't paying attention notice their\nblocks are getting orphaned and upgrade. That is pretty bad IMHO; and\nthere are a lot more *people* running SPV clients than bitcoin nodes,\nso its impact is potentially worse in both ways.\n\nComparing generic hard forks versus generic soft forks, the above says\nto me that a hard fork would be less harmful to users in general, and\nthus a better approach.\n\n*But* a soft fork that only forbids transactions that would previously\nnot have been mined anyway should be the best of both worlds, as it\nautomatically reduces the liklihood of old miners building newly invalid\nblocks to a vanishingly small probability; which means that upgraded\nbitcoin nodes, non-upgraded bitcoin nodes, /and/ SPV clients *all*\ncontinuing to work fine during the upgrade.\n\nAFAICS, that's what BIP65 achieves, as will similar OP_NOP* replacements\nlike BIP112.\n\nBut that only applies to a subset of potential soft forks, not every\nsoft fork.\n\nMaybe a good way to think about it is something like this.  Consensus\n(IsValid) is always less restrictive than (default) policy (previously\nIsStandard, not sure how to summarise it now, maybe it's just OP_NOP\nredefinition?).  So choosing a new consensus rule will be one of:\n\n  * even less restrictive than consensus (hard fork)\n\n  * more restrictive than consensus, but less restrictive than policy\n    (safe soft fork)\n\n  * more restrictive than IsStandard etc (damaging soft fork)\n\nHmm, in particular, following this line of thinking it's not clear to\nme that BIP68 is actually less restrictive than current policy? At\nleast, I can't see anything that prevents txs with nSequence set to\nsomething other than 0 or ~0 from being relayed?\n\nIf it's not, and nodes currently happily mine and relay transactions\nwith nSequence set without caring what it's set to, doesn't this mean\nBIP68 is of the \"damaging soft fork\" variety? That is, if it activated\nas a soft-fork with a majority of miners using it, but a minority of ~5%\nnot upgraded, then\n\n - someone could construct an tx with nSequence set to sometime in\n   the future, but not using OP_CSV\n\n - this tx would get relayed by old nodes (but not upgraded nodes\n   due to CheckLockTime)\n\n - non-upgraded miners would mine it into a block immediately, which\n   would then get orphaned by majority hashpower\n\n - before it got orphaned, non-upgraded nodes and SPV clients would\n   be misled and vulnerable to double spend attacks of txs with 0, 1 or\n   maybe 2 confirmations\n\n(BIP65 with OP_CLTV and BIP112 with OP_CSV don't have that problem as\nthey both redefine a non-standard opcode and would not get relayed or\nmined by old, non-upgraded nodes, and are thus \"safe soft forks\" per\nabove terminology. This is just BIP68)\n\nCan anyone confirm or refute the above?\n\nCheers,\naj"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-10-07T15:46:08",
                "message_text_only": "On Oct 7, 2015, at 8:00 AM, Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> *But* a soft fork that only forbids transactions that would previously\n> not have been mined anyway should be the best of both worlds, as it\n> automatically reduces the liklihood of old miners building newly invalid\n> blocks to a vanishingly small probability; which means that upgraded\n> bitcoin nodes, non-upgraded bitcoin nodes, /and/ SPV clients *all*\n> continuing to work fine during the upgrade.\n\nI agree with pretty much everything you wrote except the above paragraph.\n\nAn attacker can create a transaction that would be valid if it were an OP_NOP, but not valid if it were any more restrictive transaction. For example, an attacker might send 1 BTC to an address with  . An old node would consider that OP_CLTV to be OP_NOP, so no signature is necessary for old nodes. Then the attacker buys something from a merchant running old node code or an SPV client, and spends the 1 BTC in that address in a way that is invalid according to OP_CLTV but valid according to OP_NOP, and includes a hefty fee. A miner on the old version includes this transaction into a block, thereby making the block invalid according to the new rules, and rejected by new-client miners. The merchant sees the 1-conf, and maybe even 2-conf, rejoices, and ships. The attacker then has until the OP_CLTV matures to double-spend the coin with new nodes using a valid signature.\n\nBasically, it's trivial to create transactions that exploit the difference in validation rules as long as miners are still on the old version to mine them. Transactions can be created that are guaranteed to be orphaned and trivially double-spendable. Attackers never have to risk actual losses. This can be done as long as miners continue to mine old-version blocks, regardless of their frequency.\n\nThose of you who know Script better than me: would this be an example of a transaction that would be spendable with a valid sig XOR with (far future date OR old code)?\n\nOP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY OP_PUSHDATA <locktime far in the future> OP_CLTV\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/c701783e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/c701783e/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-10-07T16:02:14",
                "message_text_only": "That's why it's important to measure miner adoptance. Note that this isn't a vote - it's an adoption metric for what is presumably a fairly uncontroversial upgrade. If there's contentious controversy amongst miner all bets are off.\n\nOur current mechanisms are imperfect in this regard...as we've seen in the past, miners have deliberately disabled checks despite signaling adoption in their blocks. But a real hashpower supermajority would make such attacks hard to pull off in practice.\n\n- Eric\n\nOn October 7, 2015 8:46:08 AM PDT, \"Jonathan Toomim (Toomim Bros) via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>On Oct 7, 2015, at 8:00 AM, Anthony Towns via bitcoin-dev\n><bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> *But* a soft fork that only forbids transactions that would\n>previously\n>> not have been mined anyway should be the best of both worlds, as it\n>> automatically reduces the liklihood of old miners building newly\n>invalid\n>> blocks to a vanishingly small probability; which means that upgraded\n>> bitcoin nodes, non-upgraded bitcoin nodes, /and/ SPV clients *all*\n>> continuing to work fine during the upgrade.\n>\n>I agree with pretty much everything you wrote except the above\n>paragraph.\n>\n>An attacker can create a transaction that would be valid if it were an\n>OP_NOP, but not valid if it were any more restrictive transaction. For\n>example, an attacker might send 1 BTC to an address with  . An old node\n>would consider that OP_CLTV to be OP_NOP, so no signature is necessary\n>for old nodes. Then the attacker buys something from a merchant running\n>old node code or an SPV client, and spends the 1 BTC in that address in\n>a way that is invalid according to OP_CLTV but valid according to\n>OP_NOP, and includes a hefty fee. A miner on the old version includes\n>this transaction into a block, thereby making the block invalid\n>according to the new rules, and rejected by new-client miners. The\n>merchant sees the 1-conf, and maybe even 2-conf, rejoices, and ships.\n>The attacker then has until the OP_CLTV matures to double-spend the\n>coin with new nodes using a valid signature.\n>\n>Basically, it's trivial to create transactions that exploit the\n>difference in validation rules as long as miners are still on the old\n>version to mine them. Transactions can be created that are guaranteed\n>to be orphaned and trivially double-spendable. Attackers never have to\n>risk actual losses. This can be done as long as miners continue to mine\n>old-version blocks, regardless of their frequency.\n>\n>Those of you who know Script better than me: would this be an example\n>of a transaction that would be spendable with a valid sig XOR with (far\n>future date OR old code)?\n>\n>OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY\n>OP_PUSHDATA <locktime far in the future> OP_CLTV\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/cbd40201/attachment-0001.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-10-07T16:25:53",
                "message_text_only": "You're right about the potential for 1 bad confirmation even with very low frequency...but with an overwhelming supermajority of hashpower, 2 bad confirmations become quite unlikely, n bad confirmations becomes exponentially unlikely in n.\n\nAs part of such soft fork deployments, it's true that old nodes might see a bad confirmation on occasion (even assuming overwhelming supermajority hashpower adoptance). So yes, old nodes and SPV clients should probably require more confirmations right around such a transition...or should upgrade. It is entirely possible to make clients warn the user if the block version is unrecognized, which will help to prevent anyone from accepting bad blocks (although SPV security necessarily relies on miners to validate for them).\n\nOn October 7, 2015 9:02:14 AM PDT, Eric Lombrozo <elombrozo at gmail.com> wrote:\n>That's why it's important to measure miner adoptance. Note that this\n>isn't a vote - it's an adoption metric for what is presumably a fairly\n>uncontroversial upgrade. If there's contentious controversy amongst\n>miner all bets are off.\n>\n>Our current mechanisms are imperfect in this regard...as we've seen in\n>the past, miners have deliberately disabled checks despite signaling\n>adoption in their blocks. But a real hashpower supermajority would make\n>such attacks hard to pull off in practice.\n>\n>- Eric\n>\n>On October 7, 2015 8:46:08 AM PDT, \"Jonathan Toomim (Toomim Bros) via\n>bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>On Oct 7, 2015, at 8:00 AM, Anthony Towns via bitcoin-dev\n>><bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> *But* a soft fork that only forbids transactions that would\n>>previously\n>>> not have been mined anyway should be the best of both worlds, as it\n>>> automatically reduces the liklihood of old miners building newly\n>>invalid\n>>> blocks to a vanishingly small probability; which means that upgraded\n>>> bitcoin nodes, non-upgraded bitcoin nodes, /and/ SPV clients *all*\n>>> continuing to work fine during the upgrade.\n>>\n>>I agree with pretty much everything you wrote except the above\n>>paragraph.\n>>\n>>An attacker can create a transaction that would be valid if it were an\n>>OP_NOP, but not valid if it were any more restrictive transaction. For\n>>example, an attacker might send 1 BTC to an address with  . An old\n>node\n>>would consider that OP_CLTV to be OP_NOP, so no signature is necessary\n>>for old nodes. Then the attacker buys something from a merchant\n>running\n>>old node code or an SPV client, and spends the 1 BTC in that address\n>in\n>>a way that is invalid according to OP_CLTV but valid according to\n>>OP_NOP, and includes a hefty fee. A miner on the old version includes\n>>this transaction into a block, thereby making the block invalid\n>>according to the new rules, and rejected by new-client miners. The\n>>merchant sees the 1-conf, and maybe even 2-conf, rejoices, and ships.\n>>The attacker then has until the OP_CLTV matures to double-spend the\n>>coin with new nodes using a valid signature.\n>>\n>>Basically, it's trivial to create transactions that exploit the\n>>difference in validation rules as long as miners are still on the old\n>>version to mine them. Transactions can be created that are guaranteed\n>>to be orphaned and trivially double-spendable. Attackers never have to\n>>risk actual losses. This can be done as long as miners continue to\n>mine\n>>old-version blocks, regardless of their frequency.\n>>\n>>Those of you who know Script better than me: would this be an example\n>>of a transaction that would be spendable with a valid sig XOR with\n>(far\n>>future date OR old code)?\n>>\n>>OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY\n>>OP_PUSHDATA <locktime far in the future> OP_CLTV\n>>\n>>\n>>------------------------------------------------------------------------\n>>\n>>_______________________________________________\n>>bitcoin-dev mailing list\n>>bitcoin-dev at lists.linuxfoundation.org\n>>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>-- \n>Sent from my Android device with K-9 Mail. Please excuse my brevity.\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/eefa3a34/attachment.html>"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-10-07T16:26:24",
                "message_text_only": "On Oct 7, 2015, at 9:02 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n\n> But a real hashpower supermajority would make such attacks hard to pull off in practice.\n\nIf you had a 99% hashpower supermajority on the new version, an attacker would still be able to perform this attack once per day. Since the attacker is creating a transaction which is invalid according to new clients, it will just sit around in old clients' mempool until one of them mines a block.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/114cbf39/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/114cbf39/attachment-0001.sig>"
            },
            {
                "author": "Anthony Towns",
                "date": "2015-10-07T16:38:37",
                "message_text_only": "On Wed, Oct 07, 2015 at 08:46:08AM -0700, Jonathan Toomim (Toomim Bros) via bitcoin-dev wrote:\n> On Oct 7, 2015, at 8:00 AM, Anthony Towns via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > *But* a soft fork that only forbids transactions that would previously\n> > not have been mined anyway should be the best of both worlds, ...\n> I agree with pretty much everything you wrote except the above paragraph.\n> An attacker can create a transaction that [...] A miner on the old version \n> includes this transaction into a block, [...]\n\nThe point of that case is that there aren't such miners, so that exploit\ndoesn't apply.\n\nIn particular, AIUI, you'll have a hard job right now finding someone to\nmine an OP_NOP2 transaction -- eligius might do it, but I don't think many\nothers will. And you also need your currently OP_NOP2-friendly miner not\nto upgrade to an OP_CLTV-validating codebase, so I don't think eligius\nwill qualify there.\n\n> Those of you who know Script better than me: would this be an example of a transaction that would be spendable with a valid sig XOR with (far future date OR old code)?\n> \n> OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY OP_PUSHDATA <locktime far in the future> OP_CLTV\n\nIf you want XOR, you'd need something more like:\n\n OP_IF OP_DUP OP_HASH160 <pubkeyhash> OP_EQUALVERIFY OP_CHECKSIGVERIFY\n OP_ELSE <locktime> OP_CLTV\n OP_ENDIF\n\nBut that' still fail IsStandard and DISCOURAGE_UPGRADABLE_NOPS checks\nif you tried spending without a valid sig, so wouldn't be mined by\ncurrent nodes. (Not having a sig would also allow anyone to spend it to\nthemselves, so that might make it hard to use as a basis for double\nspends anyway...)\n\nCheers,\naj"
            },
            {
                "author": "Anthony Towns",
                "date": "2015-10-10T07:23:26",
                "message_text_only": "On Thu, Oct 08, 2015 at 01:00:14AM +1000, Anthony Towns via bitcoin-dev wrote:\n> *But* a soft fork that only forbids transactions that would previously\n> not have been mined anyway should be the best of both worlds, [...]\n\n>   * more restrictive than consensus, but less restrictive than policy\n>     (safe soft fork)\n\n> Hmm, in particular, following this line of thinking it's not clear to\n> me that BIP68 is actually less restrictive than current policy?\n\nAs was discussed on the weekly meeting [0], turns out it *is* less\nrestrictive than current policy. IsStandardTx currently returns a failure\nif the tx version is greater than 1, and per BIP68, nSequence will only\nbe inforced with tx version of 2 or greater.\n\nSo afaics, BIP 65 (OP_CLTV), BIP 68 (nSequence) and BIP 112 (OP_CSV)\nare all \"safe soft forks\", and if activated won't cause SPV nodes to\nsee a significant uptick in reorgs, double-spends etc. (They'll still\nbe vulnerable to people deliberately spending hashpower to mine invalid\nblocks, but that's a problem at any point, independent of whether a\nsoft-fork is underway)\n\n[0] http://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-08-18.59.log.html#l-312\n\nCheers,\naj"
            },
            {
                "author": "digitsu at gmail.com",
                "date": "2015-10-12T07:02:51",
                "message_text_only": "Thanks for that great breakdown Anthony. I think it helps a lot of us get a better handle on the matter without getting too technical.\u00a0\n\n\nA couple of questions on some of the points you made I'd like to put out there:\n\n\n\n\nFirst I think your unsaid assumption about the fragility of a soft fork showing incorrect confirmations is dependent on the percentage of hash power that didn't upgrade. \u00a0If using your same numbers this was only 5% of the hash power, the attack is effectively not effective (u less the attacker knew an exact merchant that was unfortunately on the minority of the network.\u00a0\n\n\n\n\n-- snip --\n\n\n\u00a0- non-upgraded bitcoin nodes: total breakage. there will be a push\n\n\u00a0 \u00a0alert telling you to upgrade. anyone who doesn't will think they're\n\n\u00a0 \u00a0tracking \"bitcoin\" but will actually be tracking a new \"bitcoin-old\"\n\n\u00a0 \u00a0altcoin. most non-upgraded miners will presumably realise they're\n\n\u00a0 \u00a0wasting hashpower and stop doing this pretty quick; and remaining\n\n\u00a0 \u00a0miners will only create blocks very slowly due to sudden reduced\n\n\u00a0 \u00a0hashpower, without possibility of difficulty adjustment.\u00a0\n\n----\n\n\n\n\nIs this true? I thought that un-upgraded nodes would just dump the new blocks from the upgraded miner majority as invalid. This how would they even know (besides the PSA) that they were on the wrong side?\u00a0\n\n\n\n\n----snip---\n\nusers who\n\n\u00a0 \u00a0don't uprade will try to do transactions, but won't see them confirm\n\n\u00a0 \u00a0for hours or days due to lack of hashpower.\n\n\n\n\n\n\n----\n\n\n\n\nBut only for txns for users who are using the new OP code right? Regular transactions will get relayed by both upgraded and in-upgraded nodes and miners alike.\u00a0\n\n\n\n\n\n\n\n\n\u2014\nRegards,\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151012/ce9edfb5/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2015-10-12T16:33:47",
                "message_text_only": "On Mon, Oct 12, 2015 at 12:02:51AM -0700, digitsu412 via bitcoin-dev wrote:\n> Thanks for that great breakdown Anthony. I think it helps a lot of us\n> get a better handle on the matter without getting too technical.\n\nGlad you found it useful; there's a lot of subtleties in how this\nstuff works, and I'm certainly still figuring it out.\n\n> A couple of questions on some of the points you made I'd like to put\n> out there:\n>\n> First I think your unsaid assumption about the fragility of a soft\n> fork showing incorrect confirmations is dependent on the percentage\n> of hash power that didn't upgrade. \u00a0If using your same numbers this\n> was only 5% of the hash power, the attack is effectively not effective\n> (u less the attacker knew an exact merchant that was unfortunately on\n> the minority of the network.\u00a0\n\nAbsolutely. So I think there are three scenarios where SPV clients get\naffected by orphans, where full nodes wouldn't be worried:\n\n 1. Independent of any soft/hard fork, someone just mines a completely\n    invalid block containing invalid transactions (eg, spending a\n    non-existant transaction) based of the best current valid block,\n    and presents it to SPV clients.\n\n    An SPV client will accept this as valid until it's orphaned by the\n    rest of the network building two valid blocks.\n\n    This is expensive since you could have mined a valid block and\n    got 25+ bitcoin legitimately, and it also doesn't last very long\n    (around 20m on average, but less if you're unlucky), and the timing\n    is unpredictable. It also won't get relayed by nodes, so you have\n    to do a Sybil attack against the SPV client as well. It's also only\n    good for places that accept 1-confirmation transactions; so you're\n    probably better off finding somewhere that accepts 0-confirmation\n    transactions and doing a Finney attack, where you at least get to keep\n    the 25+ bitcoin from the subsidy/fees.\n\n    So it's possible in theory, but seems pretty unlikely to be worth\n    the hassle in practice.\n\n\n 2. There's a \"damaging soft-fork\", with lock-in occurring immediately\n    after 95% of blocks claim to support the soft-fork.\n\n    In this case upgraded miners will only build on blocks from other\n    upgraded miners, but non-upgraded miners will build on blocks from\n    upgraded miners or non-upgraded miners. But with a ratio of 95:5,\n    upgraded miners will tend to find a block every 10.5 minutes, while\n    non-upgraded miners will only find one every 3h20m. SPV clients will\n    accept the latest block from whichever miner most recently found a\n    block, upgraded or not.\n\n    If one of the blocks mined by a non-upgraded node includes a\n    transaction that was valid under the old rules, but is not under the\n    new rules (which is entirely likely in the damaging soft-fork case),\n    that transaction will be trivially vulnerable to double-spends. So\n    until the remaining 5% of hashpower upgrades, SPV clients will\n    easily be able to be spoofed roughly once every 3h20m (when a\n    non-upgraded miner finds a block) for about 20m (until two upgraded\n    blocks are found, and the non-upgraded block is orphaned).\n\n    The cost of this attack is borne entirely by the non-upgraded\n    miners, who are mining blocks that will always be orphaned -- ie,\n    they're still spending electricity on maintaining 5% of hashpower,\n    but their \"blocks\" are all orphaned so they're getting a return of\n    0 BTC per day, instead of roughly 180 BTC per day. So presumably\n    they won't continue wasting power too long, and this will only be a\n    problem for a few days at most, but during that time SPV clients are\n    quite vulnerable.\n\n    Also, that assumes that the soft-fork activates immediately on\n    hitting 95%. The versionbits proposal will add two weeks' delay\n    between seeing 95% of nodes supporting the soft-fork, and enforcing\n    the rules, which gives the 5% additional time to upgrade, which\n    probably means there won't be much of a window left at all.\n\n\n 3. AIUI, without versionbits soft-forks are done by bumping the\n    block nVersion field (ie, from \"2\" currently to \"3\"); then enforcing\n    the new rules on blocks with a bumped version; and finally orphaning\n    blocks with the old version once 95% of the last 1000 blocks use\n    the bumped version. (See BIP 34)\n\n    This means that even with a \"safe soft-fork\", non-upgraded miners\n    will have their blocks orphaned by upgraded miners immediately after\n    the soft-fork is activated, and SPV clients will see a similar orphan\n    rate (up to 1 in 20 blocks, seeing an block that will get orphaned\n    for about ~20 minutes every 3h20m).\n\n    However, in the \"safe soft-fork\" case, all the transactions included\n    in the invalid blocks will also be acceptable to upgraded miners,\n    and will likely be included in the replacement blocks anyway. So\n    this should be an annoyance, rather than an actual problem. (In\n    a safe soft-fork, any transaction you attempt to get only mined\n    by non-upgraded nodes will be picked up by upgraded nodes anyway;\n    and any transaction you attempt to get mined only be new nodes will\n    be mined very quickly so non-upgraded nodes won't have a chance to\n    mine a block that double-spends)\n\n    Further while I don't think they actually do it currently, SPV\n    clients *could* monitor the block version (they download it anyway),\n    and simply decline to accept new version \"2\" blocks once version \"3\"\n    is seen for 95% of the last 1000 blocks. Then they would not see any\n    blocks that will get orphaned, in either safe or damaging soft-forks.\n\n    They couldn't do something similar with versionbits in place, since\n    the corresponding bit is cleared once the soft-fork activates. However\n    this also means that with versionbits in use, upgraded miners have\n    no reason to orphan blocks built by non-upgraded miners; so this\n    isn't a problem in the first place...\n\n> -- snip --\n> \u00a0- non-upgraded bitcoin nodes: total breakage. there will be a push\n> \u00a0 \u00a0alert telling you to upgrade. anyone who doesn't will think they're\n> \u00a0 \u00a0tracking \"bitcoin\" but will actually be tracking a new \"bitcoin-old\"\n> \u00a0 \u00a0altcoin.\n\nThis might have been confusing. A hard fork creates two separate\nblockchains both starting from the genesis block. The old one that\nobeys the old rules, call it \"bitcoin-old\" and the new one obeying the\nnew rules, call it \"bitcoin-new\". The first block making use of the new\nfeatures will be unacceptablee on \"bitcoin-old\", and will be the point\nof divergence. At that point, with 95% of hashpower on bitcoin-new,\nit will see new blocks every 10.5 minutes, while with 5% of hashpower\nbitcoin-old will only see new blocks every 3h20m. (With 75% hashpower,\nbitcoin-new would see new blocks every 13m20s, while bitcoin-old would\nsee new blocks every 40m)\n\nI'm assuming that as far as almost everyone is concerned, the blockchain\nwith the most hashpower (bitcoin-new in this case) would be called\n\"bitcoin\", but I'm sure people would argue over it.\n\n>             most non-upgraded miners will presumably realise they're\n> \u00a0 \u00a0wasting hashpower and stop doing this pretty quick; and remaining\n> \u00a0 \u00a0miners will only create blocks very slowly due to sudden reduced\n> \u00a0 \u00a0hashpower, without possibility of difficulty adjustment.\u00a0\n> ----\n> Is this true? I thought that un-upgraded nodes would just dump the new\n> blocks from the upgraded miner majority as invalid. This how would they\n> even know (besides the PSA) that they were on the wrong side?\u00a0\n\nSince a majority of hashpower switched to a different chain, anyone\nrunning non-upgraded nodes after a hard fork was activated would see far\nfewer blocks being found (ie, with 5% of hashpower, that would be every 3\nhours, rather than every 10 minutes). This would resolve itself when the\ndifficulty next reset, but that would be after 2016 blocks, which at 3h20m\nper block would take about 9 months rather than the standard 2 weeks.\n(With 25% of hashpower, bitcoin-old would see new blocks every 40\nminutes, and difficulty would be reset after about 8 weeks)\n\nUntil the difficulty reset, if they were mining, they'd also see more\nblocks being found by them (eg, if they had 2% of hashpower previously,\ninstead of finding 2% of blocks, they'd now be finding 40% of blocks,\nie 2/5 instead of 2/100).\n\nBecause a hard fork doesn't invalidate any transactions, non-upgraded\nnodes would still see almost all the transactions intended for bitcoin-new\n(excepting those from miners working on the fork or that explicitly use\nnew features enabled by the fork) so the mempool would grow pretty large,\ngiven the low rate at which blocks are mined. (If the new feature is\nsomething like a bigger blocksize, which then increases the rate of\ntransactions in bitcoin-new, then that's even worse for bitcoin-old\nnodes!)\n\nAnd, of course, those numbers get worse if the 5% of hashpower mining\nbitcoin-old reduces as miners write it off as not-profitable.\n\n(Maybe full bitcoin nodes should emit a warning that you've probably\nbeen hard-forked off the main chain if they see, say, 4 or fewer blocks\nin 5 hours -- with normal hashpower, I think that should only happen\nonce in something like 6000 years, but if you've got less than about\n13% of hashpower left on your chain will happen about 50% of the time.\nI don't know if that would actually be helpful compared to a pushed GPG\nsigned announcement of the hard-fork though)\n\n> ----snip---\n>    users who\n> \u00a0 \u00a0don't uprade will try to do transactions, but won't see them confirm\n> \u00a0 \u00a0for hours or days due to lack of hashpower.\n>\n> But only for txns for users who are using the new OP code right? Regular\n> transactions will get relayed by both upgraded and in-upgraded nodes\n> and miners alike.\u00a0\n\nHmm. Depends what you mean by \"users\". If the user is running an\nSPV wallet, they'll be following the most hashpower and will see\nbitcoin-new. With 12 random connections (bitcoinj's default), I think\nyou'd just need ~1350 of 6000 nodes to have upgraded to have a 95%\nchance of seeing bitcoin-new somewhere. So I don't see SPV users having\nany problems.\n\nBut in the quote above I was talking about users who are running bitcoin\ncore rather than an SPV client. *They* would have the same problems\nmentioned above, because non-upgraded bitcoin core would just totally\nignore the bitcoin-new blockchain.\n\nSo if they published a transaction, it would get confirmed quickly on\nbitcoin-new, sure, but they wouldn't see that confirmation because their\nsoftware is deliberately ignoring bitcoin-new. They'd instead see it as\nunconfirmed until it was included in a bitcoin-old block, but those only\ncome every 40m (25% hashpower) or every 3h20m (5% hashpower).\n\nWorse, most of the bitcoin-new transactions are still valid for\nbitcoin-old, so those transactions might get included by the remaining\nminers in bitcoin-old -- so you'd have to pay higher fees to get\nconfirmed in 3h40m in bitcoin-old than you would to get confirmed in\n13m in bitcoin-new...\n\n\nTL;DR: I think my conclusions are:\n\n - gads this stuff is complicated\n\n - \"safe soft-forks\" really are safe (this covers BIP 65 (OP_CLTV) and\n   BIPs 68 and 112 (OP_CSV))\n\n - as currently proposed, versionbits will actually make \"damaging\n   soft-forks\" pretty safe too\n\n - if there's a hard fork in the wind, and you're running a full node,\n   make sure you're on the latest version. maybe run an SPV client as well\n   and check you're getting the same answers from both, just to be safe.\n\nCheers,\naj"
            },
            {
                "author": "Anthony Towns",
                "date": "2015-10-12T17:06:37",
                "message_text_only": "On Mon, Oct 12, 2015 at 12:02:51AM -0700, digitsu412 via bitcoin-dev wrote:\n> First I think your unsaid assumption about the fragility of a soft\n> fork showing incorrect confirmations is dependent on the percentage\n> of hash power that didn't upgrade. \u00a0If using your same numbers this\n> was only 5% of the hash power, the attack is effectively not effective\n> (u less the attacker knew an exact merchant that was unfortunately on\n> the minority of the network.\u00a0\n\nActually, just to take this scenario more explicitly...\n\nSay you've got 5% of hashpower running on old software, along with,\nsay, 1500 nodes; and meanwhile you've got 95% of hashpower running new\nsoftware, along with 4000 nodes.\n\nThere's still about 750 nodes running 0.9 or 0.8 of 5400 total according\nto bitnodes.21.co/nodes, so those numbers seems at least plausible to\nme for the first week or two after a soft-fork is activated.\n\nEventually an old-rules block gets found by the 5% hashpower. The 4000\nnew nodes and 95% of hashpower ignore it, of course. With 8 random\nconnections, old nodes should have 92% chance of seeing an old node\nas a peer, so I think around ~1300 of them should still be a connected\nsubgraph, and the old-rules block should get propogated amongst them\n(until two new-rules blocks come along and orphan it).\n\nAn SPV client with 12 random connections here has 96% chance of having one\nof the ~1300 old nodes as a peer, and if so, will see the old-rules block,\nthat will be orphaned, and may be at risk from double-spends as a result.\n\nSo I think even with just 5% hashpower and ~30% of nodes left running\nthe old version, a \"damaging soft fork\" still poses a fairly high risk to\nsomeone receiving payments via an SPV client, and trusting transactions\nwith few confirmations.\n\nCheers,\naj"
            },
            {
                "author": "digitsu at gmail.com",
                "date": "2015-10-13T00:08:49",
                "message_text_only": "Thanks AJ,\n\n\n\n\nThat is a must more concise example, which I think makes it very clear all the variables at play.\u00a0\n\n\n\n\nI agree with its conclusion.\u00a0\n\n\n\n\nThough I'm wondering about its actual significance in ability to do harm as with 5% hash power we would have to wait quite a long time before such a block was created and it would be unpredictable when exactly this would occur, and in order to actually execute such a double spend maliciously you would have to 1) notice that such a block was mined and 2) be in a position to double spend a payment with a merchant for physical goods who you would know was using an SPV wallet at that exact time, correct? (By deliberately publishing a txn which would be blocked by the upgraded network)\n\nIsn't that in itself unlikely enough to make this form of double spend unlikely to be exploitable?\n\n\n\n\nPerhaps with malicious wallet software which always publishes \"bad\" (will be mostly rejected) txn first and then retries with a normal one?\n\n\n\n\nBut I agree with you that if the risk is there why not avoid it if possible. \u00a0\n\n\n\n\u2014\nRegards,\n\nOn Tue, Oct 13, 2015 at 2:06 AM, Anthony Towns via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mon, Oct 12, 2015 at 12:02:51AM -0700, digitsu412 via bitcoin-dev wrote:\n>> First I think your unsaid assumption about the fragility of a soft\n>> fork showing incorrect confirmations is dependent on the percentage\n>> of hash power that didn't upgrade. \u00a0If using your same numbers this\n>> was only 5% of the hash power, the attack is effectively not effective\n>> (u less the attacker knew an exact merchant that was unfortunately on\n>> the minority of the network.\u00a0\n> Actually, just to take this scenario more explicitly...\n> Say you've got 5% of hashpower running on old software, along with,\n> say, 1500 nodes; and meanwhile you've got 95% of hashpower running new\n> software, along with 4000 nodes.\n> There's still about 750 nodes running 0.9 or 0.8 of 5400 total according\n> to bitnodes.21.co/nodes, so those numbers seems at least plausible to\n> me for the first week or two after a soft-fork is activated.\n> Eventually an old-rules block gets found by the 5% hashpower. The 4000\n> new nodes and 95% of hashpower ignore it, of course. With 8 random\n> connections, old nodes should have 92% chance of seeing an old node\n> as a peer, so I think around ~1300 of them should still be a connected\n> subgraph, and the old-rules block should get propogated amongst them\n> (until two new-rules blocks come along and orphan it).\n> An SPV client with 12 random connections here has 96% chance of having one\n> of the ~1300 old nodes as a peer, and if so, will see the old-rules block,\n> that will be orphaned, and may be at risk from double-spends as a result.\n> So I think even with just 5% hashpower and ~30% of nodes left running\n> the old version, a \"damaging soft fork\" still poses a fairly high risk to\n> someone receiving payments via an SPV client, and trusting transactions\n> with few confirmations.\n> Cheers,\n> aj\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151012/1e39a4a9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Let's deploy BIP65 CHECKLOCKTIMEVERIFY!",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Jeff Garzik",
                "Eric Lombrozo",
                "NotMike Hearn",
                "Anthony Towns",
                "Mike Hearn",
                "Cl\u00e9ment Elbaz",
                "digitsu at gmail.com",
                "Jonathan Toomim (Toomim Bros)",
                "Jorge Tim\u00f3n",
                "Micha Bailey",
                "Tom Harding",
                "GC"
            ],
            "messages_count": 32,
            "total_messages_chars_count": 79566
        }
    },
    {
        "title": "[bitcoin-dev] Versionbits BIP (009) minor revision proposal.",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2015-10-01T00:26:51",
                "message_text_only": "Gregory Maxwell <gmaxwell at gmail.com> writes:\n> I can, however, argue it the other way (and probably have in the\n> past):  The bit is easily checked by thin clients, so thin clients\n> could use it to reject potentially ill-fated blocks from non-upgraded\n> miners post switch (which otherwise they couldn't reject without\n> inspecting the whole thing). This is an improvement over not forcing\n> the bit, and it's why I was previously in favor of the way the\n> versions were enforced.  But, experience has played out other ways,\n> and thin clients have not done anything useful with the version\n> numbers.\n>\n> A middle ground might be to require setting the bit for a period of\n> time after rule enforcing begins, but don't enforce the bit, just\n> enforce validity of the block under new rules.  Thus a thin client\n> could treat these blocks with increased skepticism.\n\nIntroducing this later would trigger warnings on older clients, who\nwould consider the bit to represent a new soft fork :(\n\nSo if we want this middle ground, we should sew it in now, though it\nadds a other state.  Simplest is to have miners keep setting the bit for\nanother 2016 blocks.  If we want to later, we can make this a consensus\nrule.\n\n\"Bitcoin is hard, let's go shopping!\"  \"With Bitcoin!\"  \"...\"\nRusty."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-10-01T02:54:34",
                "message_text_only": "I can go along with making it optional but recommended for the first deployment and making it mandatory later on. It would be purely informational for now...but it will give us valuable data.\n\nAs has been said before, most of these BIP deployments will likely be accompanied by recommended default settings for miners. Assuming the BIP itself is not very controversial, the gravest dangers come not so much from miners (or pool operators, more accurately) deliberately choosing to lie...but more from either shortcuts taken in implementations and/or bugs. Collecting additional data will help spot faulty implementations and allow us to intervene.\n\nEventually, I imagine a much more sophisticated signaling mechanism where endusers can be given highly informative messages regarding changes and we can have a way of directing people to resources where they can learn more about the new features.\n\n- Eric\n\nOn September 30, 2015 5:26:51 PM PDT, Rusty Russell <rusty at rustcorp.com.au> wrote:\n>Gregory Maxwell <gmaxwell at gmail.com> writes:\n>> I can, however, argue it the other way (and probably have in the\n>> past):  The bit is easily checked by thin clients, so thin clients\n>> could use it to reject potentially ill-fated blocks from non-upgraded\n>> miners post switch (which otherwise they couldn't reject without\n>> inspecting the whole thing). This is an improvement over not forcing\n>> the bit, and it's why I was previously in favor of the way the\n>> versions were enforced.  But, experience has played out other ways,\n>> and thin clients have not done anything useful with the version\n>> numbers.\n>>\n>> A middle ground might be to require setting the bit for a period of\n>> time after rule enforcing begins, but don't enforce the bit, just\n>> enforce validity of the block under new rules.  Thus a thin client\n>> could treat these blocks with increased skepticism.\n>\n>Introducing this later would trigger warnings on older clients, who\n>would consider the bit to represent a new soft fork :(\n>\n>So if we want this middle ground, we should sew it in now, though it\n>adds a other state.  Simplest is to have miners keep setting the bit\n>for\n>another 2016 blocks.  If we want to later, we can make this a consensus\n>rule.\n>\n>\"Bitcoin is hard, let's go shopping!\"  \"With Bitcoin!\"  \"...\"\n>Rusty.\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/1c6a92df/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-10-02T01:22:14",
                "message_text_only": "Rusty Russell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> Gregory Maxwell <gmaxwell at gmail.com> writes:\n>> I can, however, argue it the other way (and probably have in the\n>> past):  The bit is easily checked by thin clients, so thin clients\n>> could use it to reject potentially ill-fated blocks from non-upgraded\n>> miners post switch (which otherwise they couldn't reject without\n>> inspecting the whole thing). This is an improvement over not forcing\n>> the bit, and it's why I was previously in favor of the way the\n>> versions were enforced.  But, experience has played out other ways,\n>> and thin clients have not done anything useful with the version\n>> numbers.\n>>\n>> A middle ground might be to require setting the bit for a period of\n>> time after rule enforcing begins, but don't enforce the bit, just\n>> enforce validity of the block under new rules.  Thus a thin client\n>> could treat these blocks with increased skepticism.\n>\n> Introducing this later would trigger warnings on older clients, who\n> would consider the bit to represent a new soft fork :(\n\nActually, this isn't a decisive argument, since we can use the current\nmechanism to upgrade versionbits, or as Eric says, tack it on to\nan existing soft fork.\n\nSo, I think I'm back where I started.  We leave this for now.\n\nThere was no nak on the \"keep setting bit until activation\" proposal, so\nI'm opening a PullReq for that now:\n\n\thttps://github.com/bitcoin/bips/pull/209\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Versionbits BIP (009) minor revision proposal.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Eric Lombrozo"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 5327
        }
    },
    {
        "title": "[bitcoin-dev] Pedantic note on the use of \"eventual consistency\" to describe Bitcoin [Was: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!]",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-01T01:08:44",
                "message_text_only": "On Wed, Sep 30, 2015 at 10:14 PM, Jorge Tim\u00f3n\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> reason you don't think guaranteed eventual consistency has any value\n\nObligatory pedantic correction: In Bitcoin we don't actually achieve\n\"eventual consistency\" of the kind which is usually described in the\nliterature. In Bitcoin the probability of reorg to a particular point\ndiminishes over time but never is guaranteed to be _zero_ (at least\nwithin the framework of bitcoin itself), and at the same time we have\nstronger ordering properties than is normally implied by eventual\nconsistency (so, e.g. an update may never happen if its conflicted\nfirst).\n\nThis is completely irrelevant to your point-- soft forks obey the\nnormal consistency process for bitcoin where a hard fork (especially a\nmutual one) does not... but I'm sure there is an academic out there\nthat cringes when we use the words \"eventual consistency\" to describe\nBitcoin, and I feel like I'd be remiss to not offer this minor\ncorrection. :)"
            }
        ],
        "thread_summary": {
            "title": "Pedantic note on the use of \"eventual consistency\" to describe Bitcoin ",
            "categories": [
                "bitcoin-dev",
                "Was: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!"
            ],
            "authors": [
                "Gregory Maxwell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1008
        }
    },
    {
        "title": "[bitcoin-dev] Design Competition",
        "thread_messages": [
            {
                "author": "Dave Scotese",
                "date": "2015-10-01T04:04:32",
                "message_text_only": "I am waiting for the bitcoin (not bitcoin-dev) mailing list so that anyone\nwho writes \"That's off-topic\" can also include a link to it.\n\nSomeone else mentioned that they read all these emails in about 15\nminutes.  I'm a bit slower than that, but I'm reading the vitcoin-xt stuff\ntoo.  It isn't too much for me, but it will be nice to have a more open\nlist, such as is planned.  What's the hold up?  Don't answer here, at least\nnot until the list is ready :-)\n\nOn Wed, Sep 30, 2015 at 6:38 AM, Benjamin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Richard,\n>\n> its great that people with a lot of experience in financial markets take\n> interest in these topics. I don't think you will receive the best answers\n> here. The Bitcointalk Altcoin section is currently the best place for such\n> announcements. I believe there is room for a better board/list for new 2.0\n> projects. Bitcoin dev is not very welcoming to discussions/debates/projects\n> which go beyond digital cash systems (assets, markets, etc.), as it is very\n> focused on the core problems which are under-funded.\n>\n> Anyone who wants to build a better venue for 2.0 projects feel free to\n> contact me. This could be a mailing list or an upgraded message board. Most\n> such boards are project/currency specific, but there is one missing for\n> announcements.\n>\n> In terms of markets on top of blockchains, I have sent a private email.\n>\n> Regards,\n> Benjamin\n>\n> On Wed, Sep 30, 2015 at 3:17 PM, Richard Olsen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Lykke Corp based in Z\u00fcrich funds the competition.\n>>\n>> 2 Mio Lykke coins (8'000 USD) is allocated to funding core development in\n>> next 3 months,\n>>\n>> Richard\n>>\n>> On 30.09.2015, at 14:22, Thomas Kerin <thomas.kerin at gmail.com> wrote:\n>>\n>> Who is funding this?\n>>\n>> Why not fund Core development?\n>> On 30 Sep 2015 7:37 am, \"Richard Olsen via bitcoin-dev\" <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> All,\n>>>\n>>> We are looking for participants in a Bitcoin related competition: the\n>>> aim is to build a trading platform (initially for foreign exchange, other\n>>> assets will follow) which lets participants settle their trades through the\n>>> blockchain via coloured coins. To facilitate a quicker trade\n>>> reconciliation, the use of a sidechain is a suggestion but by no means a\n>>> requirement. There will be an online briefing event today where we will\n>>> outline the requirements in more detail, though much of it we have posted\n>>> on our website www.lykkex.com .\n>>>\n>>> As we want this to be a community driven effort rather than something\n>>> turning into a proprietary technology, all contributions will be made\n>>> available under a MIT license on Github.\n>>>\n>>> I look forward to answering your questions at the online briefing event\n>>> or over email,\n>>>\n>>> Thank you and kind regards,\n>>> Richard Olsen\n>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/3a3d121a/attachment-0001.html>"
            },
            {
                "author": "odinn",
                "date": "2015-10-01T04:38:50",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nGrosses me out that you have enforced KYC as part of what you are\ndoing for anyone who would decide to get involved:\n\nhttps://wiki.lykkex.com/?id=start#lykke_citizens\n\nGood luck with that, I'm sure not going to be a part of it, and I\nrecommend that no-one else does either.\n\n- - O\n\nRichard Olsen via bitcoin-dev:\n> All,\n> \n> We are looking for participants in a Bitcoin related competition:\n> the aim is to build a trading platform (initially for foreign\n> exchange, other assets will follow) which lets participants settle\n> their trades through the blockchain via coloured coins. To\n> facilitate a quicker trade reconciliation, the use of a sidechain\n> is a suggestion but by no means a requirement. There will be an\n> online briefing event today where we will outline the requirements\n> in more detail, though much of it we have posted on our website\n> www.lykkex.com .\n> \n> As we want this to be a community driven effort rather than\n> something turning into a proprietary technology, all contributions\n> will be made available under a MIT license on Github.\n> \n> I look forward to answering your questions at the online briefing\n> event or over email,\n> \n> Thank you and kind regards, Richard Olsen\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWDLjaAAoJEGxwq/inSG8CkQAH/i6603ivtZXjNw5ZlH1W2p7z\nc88sb5CcTuTUi+zEx6Q0MRUFfdYcrcBrGsua3CKU9226rpL4acD2Bby5kUPZ1h2/\nRl5EiZa11oeqZaZaO5ZmXZ33BOaO2gxqqYEF1zBOzDgky6cqRrj8t4VAj5CKsxsP\nktM98UqVXdcuOfBP7y/xqX1Yw9e55PpwUCtaazLo8UkPLMrtdzrbKVZBtjqGxMnG\nZxmYku8g6xdmZAMz9xn9oVGtuMHrEjhIVycz3FMHBjoZNLE9yK4YeWyEvLI4YPFt\nKBR7HvGDava3dzMM5ugw3hgFShfegjrIunWQ/vC9RCjBMLVGVX5RgEblgQe29eY=\n=41DC\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Design Competition",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dave Scotese",
                "odinn"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 6189
        }
    },
    {
        "title": "[bitcoin-dev] Crossing the line? [Was: Re: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!]",
        "thread_messages": [
            {
                "author": "Tao Effect",
                "date": "2015-10-01T04:08:21",
                "message_text_only": "Dear list,\n\nMike has made a variety of false and damaging statements about Bitcoin, of which this is but one:\n\n> On Sep 30, 2015, at 2:01 PM, Mike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> I coined the term SPV so I know exactly what it means, and bitcoinj implements it, as does BreadWallet (the other big SPV implementation).\n\nOn his website Vinumeris.com <http://vinumeris.com/> he writes:\n\n> Vinumeris was founded in 2014 by Mike Hearn, one of the developers of the Bitcoin digital currency system.\n\nOn plan99.net <http://plan99.net/> there are several embedded videos that refer to him a \u201ccore developer\u201d of Bitcoin. And now it seems he is claiming to be Satoshi.\n\nIt seems to me that Mike\u2019s emails, false statements (like the one above about coining SPV), arguments, and his attempts to steal control of Bitcoin via the contentious Bitcoin XT fork, represent actions that have been harming and dividing this community for several years now.\n\nIn many communities/tribes, there exists a line that, once crossed, results in the expulsion of a member from the community.\n\nSo, two questions:\n\n1. Does the Bitcoin-devs mailing list have such a line?\n2. If so, does the community feel that Mike Hearn has crossed it? (I personally feel he has. Multiple times.)\n\nThanks for your thoughts,\nGreg Slepak\n\n--\nPlease do not email me anything that you are not comfortable also sharing with the NSA.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/9fabbbf7/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20150930/9fabbbf7/attachment-0001.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-10-01T16:39:39",
                "message_text_only": "To reduce the list noise level, drama level and promote inclusion, my own\npersonal preference (list admin hat: off, community member hat: on) is for\ntemporal bans based on temporal circumstances.  Default to\npro-forgiveness.  Also, focus on disruption of the list as a metric, rather\nthan focusing on a specific personality.\n\nI do think we're at a bit of a point where we're going around in circles.\n\nGiven the current reddit hubbub, a bit of a cooling off period is IMO\nadvisable before taking any further action.\n\n\n\nOn Thu, Oct 1, 2015 at 12:08 AM, Tao Effect via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Dear list,\n>\n> Mike has made a variety of false and damaging statements about Bitcoin, of\n> which this is but one:\n>\n> On Sep 30, 2015, at 2:01 PM, Mike Hearn via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> I coined the term SPV so I know exactly what it means, and bitcoinj\n> implements it, as does BreadWallet (the other big SPV implementation).\n>\n>\n> On his website Vinumeris.com he writes:\n>\n> Vinumeris was founded in 2014 by Mike Hearn, one of the developers of the\n> Bitcoin digital currency system.\n>\n>\n> On plan99.net there are several embedded videos that refer to him a \u201ccore\n> developer\u201d of Bitcoin. And now it seems he is claiming to be Satoshi.\n>\n> It seems to me that Mike\u2019s emails, false statements (like the one above\n> about coining SPV), arguments, and his attempts to steal control of Bitcoin\n> via the contentious Bitcoin XT fork, represent actions that have been\n> harming and dividing this community for several years now.\n>\n> In many communities/tribes, there exists a line that, once crossed,\n> results in the expulsion of a member from the community.\n>\n> So, two questions:\n>\n> 1. Does the Bitcoin-devs mailing list have such a line?\n> 2. If so, does the community feel that Mike Hearn has crossed it? (I\n> personally feel he has. Multiple times.)\n>\n> Thanks for your thoughts,\n> Greg Slepak\n>\n> --\n> Please do not email me anything that you are not comfortable also sharing with\n> the NSA.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/837d4131/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-01T20:17:55",
                "message_text_only": "> Given the current reddit hubbub, a bit of a cooling off period is IMO\n> advisable before taking any further action.\n>\n>     2. If so, does the community feel that Mike Hearn has crossed it? (I\n>     personally feel he has. Multiple times.)\n>\n\nI don't believe any posting by Mr. Hearn warrants any actions by some \nundefined community.  Since I disagree with TaoEffect.com (aka \"PRIVATE \nREGISTRANT\") he has no consensus.  lol\n\n\nRuss"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-02T12:23:17",
                "message_text_only": "FWIW the \"coining\" I am referring to is here:\n\nhttps://bitcointalk.org/index.php?topic=7972.msg116285#msg116285\n\nOK, with that, here goes. Firstly some terminology. I'm going to call these\nthings SPV clients for \"simplified payment verification\". Headers-only is\nkind of a mouthful and \"lightweight client\" is too vague, as there are\nseveral other designs that could be described as lightweight like RPC\nfrontend and Stefans WebCoin API approach\n\nAt that time nobody used the term \"SPV wallet\" to refer to what apps like\nBreadWallet or libraries like bitcoinj do. Satoshi used the term \"client\nonly mode\", Jeff was calling them \"headers only client\" etc. So I said, I'm\ngoing to call them SPV wallets after the section of the whitepaper that\nmost precisely describes their operation.\n\nOn Thu, Oct 1, 2015 at 6:39 PM, Jeff Garzik <jgarzik at gmail.com> wrote:\n\n> To reduce the list noise level, drama level and promote inclusion, my own\n> personal preference (list admin hat: off, community member hat: on) is for\n> temporal bans based on temporal circumstances.  Default to\n> pro-forgiveness.  Also, focus on disruption of the list as a metric, rather\n> than focusing on a specific personality.\n>\n> I do think we're at a bit of a point where we're going around in circles.\n>\n> Given the current reddit hubbub, a bit of a cooling off period is IMO\n> advisable before taking any further action.\n>\n>\n>\n> On Thu, Oct 1, 2015 at 12:08 AM, Tao Effect via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Dear list,\n>>\n>> Mike has made a variety of false and damaging statements about Bitcoin,\n>> of which this is but one:\n>>\n>> On Sep 30, 2015, at 2:01 PM, Mike Hearn via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> I coined the term SPV so I know exactly what it means, and bitcoinj\n>> implements it, as does BreadWallet (the other big SPV implementation).\n>>\n>>\n>> On his website Vinumeris.com he writes:\n>>\n>> Vinumeris was founded in 2014 by Mike Hearn, one of the developers of the\n>> Bitcoin digital currency system.\n>>\n>>\n>> On plan99.net there are several embedded videos that refer to him a\n>> \u201ccore developer\u201d of Bitcoin. And now it seems he is claiming to be Satoshi.\n>>\n>> It seems to me that Mike\u2019s emails, false statements (like the one above\n>> about coining SPV), arguments, and his attempts to steal control of Bitcoin\n>> via the contentious Bitcoin XT fork, represent actions that have been\n>> harming and dividing this community for several years now.\n>>\n>> In many communities/tribes, there exists a line that, once crossed,\n>> results in the expulsion of a member from the community.\n>>\n>> So, two questions:\n>>\n>> 1. Does the Bitcoin-devs mailing list have such a line?\n>> 2. If so, does the community feel that Mike Hearn has crossed it? (I\n>> personally feel he has. Multiple times.)\n>>\n>> Thanks for your thoughts,\n>> Greg Slepak\n>>\n>> --\n>> Please do not email me anything that you are not comfortable also sharing with\n>> the NSA.\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/00bedf3f/attachment.html>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-10-02T13:14:11",
                "message_text_only": "According to the Oxford Dictionary, \"coin\" as a verb means \"invent (a \nnew word or phrase)\". Undoubtedly you created the first functional SPV \nclient but please retract the claim \"I coined the term SPV\" or that's \nplagiarism.\n\nAnd I'd like to highlight the following excerpt from the whitepaper: \n\"the simplified method can be fooled by an attacker's fabricated \ntransactions for as long as the attacker can continue to overpower the \nnetwork. One strategy to protect against this would be to accept alerts \nfrom network nodes when they detect an invalid block, prompting the \nuser's software to download the full block and alerted transactions to \nconfirm the inconsistency.\"\n\nHeader only clients without any fraud detecting mechanism are functional \nbut incomplete SPV implementations, according to Sathoshi's original \ndefinition. This might be good enough for the first generation SPV \nwallet, but eventually SPV clients should be ready to detect any rule \nviolation in the blockchain, including things like block size (as \nSatoshi mentioned \"invalid block\", not just \"invalid transaction\").\n\nMike Hearn via bitcoin-dev \u65bc 2015-10-02 08:23 \u5beb\u5230:\n> FWIW the \"coining\" I am referring to is here:\n> \n> https://bitcointalk.org/index.php?topic=7972.msg116285#msg116285 [4]\n> \n> OK, with that, here goes. Firstly some terminology. I'm going to call\n> these things SPV clients for \"simplified payment verification\".\n> Headers-only is kind of a mouthful and \"lightweight client\" is too\n> vague, as there are several other designs that could be described as\n> lightweight like RPC frontend and Stefans WebCoin API approach\n> \n> At that time nobody used the term \"SPV wallet\" to refer to what apps\n> like BreadWallet or libraries like bitcoinj do. Satoshi used the term\n> \"client only mode\", Jeff was calling them \"headers only client\" etc.\n> So I said, I'm going to call them SPV wallets after the section of the\n> whitepaper that most precisely describes their operation."
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-10-02T14:10:10",
                "message_text_only": "2015-10-02 15:14 GMT+02:00 jl2012 via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> According to the Oxford Dictionary, \"coin\" as a verb means \"invent (a new\n> word or phrase)\". Undoubtedly you created the first functional SPV client\n> but please retract the claim \"I coined the term SPV\" or that's plagiarism.\n>\n>\nOr simply stop pursuing this silly distraction.\n\n\n> And I'd like to highlight the following excerpt from the whitepaper: \"the\n> simplified method can be fooled by an attacker's fabricated transactions\n> for as long as the attacker can continue to overpower the network. One\n> strategy to protect against this would be to accept alerts from network\n> nodes when they detect an invalid block, prompting the user's software to\n> download the full block and alerted transactions to confirm the\n> inconsistency.\"\n>\n> Header only clients without any fraud detecting mechanism are functional\n> but incomplete SPV implementations, according to Sathoshi's original\n> definition. This might be good enough for the first generation SPV wallet,\n> but eventually SPV clients should be ready to detect any rule violation in\n> the blockchain, including things like block size (as Satoshi mentioned\n> \"invalid block\", not just \"invalid transaction\").\n>\n> Mike Hearn via bitcoin-dev \u65bc 2015-10-02 08:23 \u5beb\u5230:\n>\n>> FWIW the \"coining\" I am referring to is here:\n>>\n>> https://bitcointalk.org/index.php?topic=7972.msg116285#msg116285 [4]\n>>\n>> OK, with that, here goes. Firstly some terminology. I'm going to call\n>> these things SPV clients for \"simplified payment verification\".\n>> Headers-only is kind of a mouthful and \"lightweight client\" is too\n>> vague, as there are several other designs that could be described as\n>> lightweight like RPC frontend and Stefans WebCoin API approach\n>>\n>> At that time nobody used the term \"SPV wallet\" to refer to what apps\n>> like BreadWallet or libraries like bitcoinj do. Satoshi used the term\n>> \"client only mode\", Jeff was calling them \"headers only client\" etc.\n>> So I said, I'm going to call them SPV wallets after the section of the\n>> whitepaper that most precisely describes their operation.\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/d26d51af/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-02T16:37:07",
                "message_text_only": "On Fri, Oct 2, 2015 at 12:23 PM, Mike Hearn via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> At that time nobody used the term \"SPV wallet\" to refer to what apps like\n> BreadWallet or libraries like bitcoinj do. Satoshi used the term \"client\n> only mode\", Jeff was calling them \"headers only client\" etc. So I said, I'm\n> going to call them SPV wallets after the section of the whitepaper that most\n> precisely describes their operation.\n\nhttps://bitcointalk.org/index.php?topic=125.msg1149#msg1149  (a full\nyear before your post, as someone else had already responded to you on\nReddit; client mode was just what implementation inside Bitcoin was\ncalled)\n\nBut this is silly. The only point I was making was that when you were\nreferring to the limitations of BitcoinJ which would not generalize to\nnot state it as a property of SPV I think it is preferable to make\nthat decision,especially when it would not generalize to ones that\nimplemented everything described in section 8, or even just more\ncomplete checks on the data they were already receiving. Who coined\nthe tern is irrelevant to that (although you indisputably did not use\neven the abbreviation before others). Jtimon's later post on the\nmisuse of fallacious arguments should have been enough that I\nshouldn't have to spell this out."
            }
        ],
        "thread_summary": {
            "title": "Crossing the line? ",
            "categories": [
                "bitcoin-dev",
                "Was: Re: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!"
            ],
            "authors": [
                "Jeff Garzik",
                "Milly Bitcoin",
                "Mike Hearn",
                "Marcel Jamin",
                "Gregory Maxwell",
                "jl2012 at xbt.hk",
                "Tao Effect"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 13987
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.12.0 release schedule",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-01T08:50:59",
                "message_text_only": "On Wed, Sep 30, 2015 at 05:57:42PM +0000, Luke Dashjr wrote:\n> On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via \n> bitcoin-dev wrote:\n> > 2015-12-01\n> > -----------\n> > - Feature freeze\n> \n> Where is \"Consensus freeze\"? Shouldn't this be put off until after the HK \n> workshop in case a hardfork is decided on? Or have we de-coupled it from the \n> release process entirely anyway (since old versions need an update for it \n> too)?\n\nIn principle, \"feature freeze\" means that any large code changes will no longer go into 0.12, unless fixing critical bugs. \n\nI'm not keen on postponing 0.12 for such reasons - after the HK workshop I'm sure that it will take some development/testing/review before code makes it into anything. Apart from that there's a good point to decouple consensus changes from Bitcoin Core major releases.\n\nWe've seen lot of release date drift due to \"this and this change needs to make it in\" in the past, that was a major reason to switch to a time-based instead of feature-based release schedule.\n\nWe can always do a 0.12.1.\n\nWladimir"
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-10-01T09:05:59",
                "message_text_only": "Any particular reason bitcoin versioning doesn't follow the SemVer spec?\n\n2015-10-01 10:50 GMT+02:00 Wladimir J. van der Laan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> On Wed, Sep 30, 2015 at 05:57:42PM +0000, Luke Dashjr wrote:\n> > On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via\n> > bitcoin-dev wrote:\n> > > 2015-12-01\n> > > -----------\n> > > - Feature freeze\n> >\n> > Where is \"Consensus freeze\"? Shouldn't this be put off until after the HK\n> > workshop in case a hardfork is decided on? Or have we de-coupled it from\n> the\n> > release process entirely anyway (since old versions need an update for it\n> > too)?\n>\n> In principle, \"feature freeze\" means that any large code changes will no\n> longer go into 0.12, unless fixing critical bugs.\n>\n> I'm not keen on postponing 0.12 for such reasons - after the HK workshop\n> I'm sure that it will take some development/testing/review before code\n> makes it into anything. Apart from that there's a good point to decouple\n> consensus changes from Bitcoin Core major releases.\n>\n> We've seen lot of release date drift due to \"this and this change needs to\n> make it in\" in the past, that was a major reason to switch to a time-based\n> instead of feature-based release schedule.\n>\n> We can always do a 0.12.1.\n>\n> Wladimir\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/5dca9e61/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-10-01T09:17:52",
                "message_text_only": "On Thu, Oct 1, 2015 at 10:05 AM, Marcel Jamin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Any particular reason bitcoin versioning doesn't follow the SemVer spec?\n>\n\nWe do: a.b.c, the next major version is, 0.12.0, and maintenance releases\nare 0.12.1 etc. Release candidates are 0.12.0-rc1 for example.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/dc91562f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.12.0 release schedule",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Marcel Jamin",
                "Btc Drak",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3276
        }
    },
    {
        "title": "[bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule",
        "thread_messages": [
            {
                "author": "Marcel Jamin",
                "date": "2015-10-01T09:41:25",
                "message_text_only": "---------- Forwarded message ----------\nFrom: Marcel Jamin <marcel at jamin.net>\nDate: 2015-10-01 11:39 GMT+02:00\nSubject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule\nTo: Btc Drak <btcdrak at gmail.com>\n\n\nI guess the question then becomes why bitcoin still is <1.0.0\n\nI'd say it's safe to say that it's used in production.\n\n2015-10-01 11:17 GMT+02:00 Btc Drak <btcdrak at gmail.com>:\n\n> On Thu, Oct 1, 2015 at 10:05 AM, Marcel Jamin via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Any particular reason bitcoin versioning doesn't follow the SemVer spec?\n>>\n>\n> We do: a.b.c, the next major version is, 0.12.0, and maintenance releases\n> are 0.12.1 etc. Release candidates are 0.12.0-rc1 for example.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/17164b7e/attachment.html>"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-01T09:56:55",
                "message_text_only": "On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:\n> I guess the question then becomes why bitcoin still is <1.0.0\n\nI'll interpret the question as \"why is the Bitcoin Core software still <1.0.0\". Bitcoin the currency doesn't have a version, the block/transaction versions are at v3/v1 respectively, and the highest network protocol version is 70011. \n\nMostly because we don't use the numbers as a signaling mechanism. They just count up, every half year.\n\nOtherwise, one'd have to ask hard questions like 'is the software mature enough to be called 1.0.0', which would lead to long arguments, all of which would eventually lead to nothing more than potentially increasing a number. We're horribly stressed-out as is.\n\nWladimir"
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-10-01T10:10:45",
                "message_text_only": "> Mostly because we don't use the numbers as a signaling mechanism. They\njust count up, every half year.\n\nOK, but then it's not semantic versioning (as btcdrak claims).\n\n> Otherwise, one'd have to ask hard questions like 'is the software mature\nenough to be called 1.0.0'\n\nI think the question has already been answered for you by the companies\nthat build on top of it, the investments being made and the $3.5 billion\nmarket cap. The 1.0.0 tag is probably long overdue.\n\nThen you could start using the version as a signaling mechanism.\n\n> We're horribly stressed-out as is.\n\nYeah, probably not a very important topic right now.\n\n\n\n2015-10-01 11:56 GMT+02:00 Wladimir J. van der Laan <laanwj at gmail.com>:\n\n> On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:\n> > I guess the question then becomes why bitcoin still is <1.0.0\n>\n> I'll interpret the question as \"why is the Bitcoin Core software still\n> <1.0.0\". Bitcoin the currency doesn't have a version, the block/transaction\n> versions are at v3/v1 respectively, and the highest network protocol\n> version is 70011.\n>\n> Mostly because we don't use the numbers as a signaling mechanism. They\n> just count up, every half year.\n>\n> Otherwise, one'd have to ask hard questions like 'is the software mature\n> enough to be called 1.0.0', which would lead to long arguments, all of\n> which would eventually lead to nothing more than potentially increasing a\n> number. We're horribly stressed-out as is.\n>\n> Wladimir\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/9ae2c230/attachment.html>"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-01T10:15:45",
                "message_text_only": "On Thu, Oct 01, 2015 at 12:10:45PM +0200, Marcel Jamin wrote:\n> I think the question has already been answered for you by the companies\n> that build on top of it, the investments being made and the $3.5 billion\n> market cap. The 1.0.0 tag is probably long overdue.\n\nMay I remind you that by far, most of that investment is not in the Bitcoin Core software.\n\nIt is made to things building on top of the network/protocol, under the assumption that nothing really stupid will happen and the network will not go down etc.\n\nThis implies a level of trust in the node software to maintain consensus, but doesn't necessarily mean that all rough corners have been dealt with regarding implementation.\n\n(but this is exactly the kind of argument I'm trying to avoid getting pulled into)\n\n> Then you could start using the version as a signaling mechanism.\n\nWe certainly could, it is a decision to not to.\n\n> Yeah, probably not a very important topic right now.\n\nExactly.\n\nWladimir\n> \n> \n> \n> 2015-10-01 11:56 GMT+02:00 Wladimir J. van der Laan <laanwj at gmail.com>:\n> \n> > On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:\n> > > I guess the question then becomes why bitcoin still is <1.0.0\n> >\n> > I'll interpret the question as \"why is the Bitcoin Core software still\n> > <1.0.0\". Bitcoin the currency doesn't have a version, the block/transaction\n> > versions are at v3/v1 respectively, and the highest network protocol\n> > version is 70011.\n> >\n> > Mostly because we don't use the numbers as a signaling mechanism. They\n> > just count up, every half year.\n> >\n> > Otherwise, one'd have to ask hard questions like 'is the software mature\n> > enough to be called 1.0.0', which would lead to long arguments, all of\n> > which would eventually lead to nothing more than potentially increasing a\n> > number. We're horribly stressed-out as is.\n> >\n> > Wladimir\n> >"
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-10-01T10:34:38",
                "message_text_only": "2015-10-01 12:15 GMT+02:00 Wladimir J. van der Laan <laanwj at gmail.com>:\n\n> On Thu, Oct 01, 2015 at 12:10:45PM +0200, Marcel Jamin wrote:\n> > I think the question has already been answered for you by the companies\n> > that build on top of it, the investments being made and the $3.5 billion\n> > market cap. The 1.0.0 tag is probably long overdue.\n>\n> May I remind you that by far, most of that investment is not in the\n> Bitcoin Core software.\n>\n\nAs I understand it, right now the bitcoin protocol is defined by the\nbitcoin core implementation. Or is there anything else to point to? So I'd\nsay my point still stands.\n\nOther implementations copy what bitcoin core does.\n\n\n> > Then you could start using the version as a signaling mechanism.\n>\n> We certainly could, it is a decision to not to.\n>\n\nSimply because of the \"1.0.0\" issue or for other reasons as well?\n\n\n\n> 2015-10-01 11:56 GMT+02:00 Wladimir J. van der Laan <laanwj at gmail.com>:\n> >\n> > > On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:\n> > > > I guess the question then becomes why bitcoin still is <1.0.0\n> > >\n> > > I'll interpret the question as \"why is the Bitcoin Core software still\n> > > <1.0.0\". Bitcoin the currency doesn't have a version, the\n> block/transaction\n> > > versions are at v3/v1 respectively, and the highest network protocol\n> > > version is 70011.\n> > >\n> > > Mostly because we don't use the numbers as a signaling mechanism. They\n> > > just count up, every half year.\n> > >\n> > > Otherwise, one'd have to ask hard questions like 'is the software\n> mature\n> > > enough to be called 1.0.0', which would lead to long arguments, all of\n> > > which would eventually lead to nothing more than potentially\n> increasing a\n> > > number. We're horribly stressed-out as is.\n> > >\n> > > Wladimir\n> > >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/bb50904f/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-01T20:20:22",
                "message_text_only": "On Thursday, October 01, 2015 9:41:25 AM Marcel Jamin via bitcoin-dev wrote:\n> I guess the question then becomes why bitcoin still is <1.0.0\n> \n> I'd say it's safe to say that it's used in production.\n\nBut it's not *ready* to be used in production. :(\n\nFor 1.0, I would expect:\n\nlibbitcoinconsensus: an API that makes implementing a full node practical.\n\nBitcoin Core GUI: reasonably usable safely by non-technical people.\n\nBitcoin Core Daemon: a reasonably safe wallet (currently blocked by backup-\nresistant accounting system)\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "Fwd:  Bitcoin Core 0.12.0 release schedule",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Marcel Jamin",
                "Luke Dashjr",
                "Wladimir J. van der Laan"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 7691
        }
    },
    {
        "title": "[bitcoin-dev] Fwd: Bitcoin Core 0.12.0 release schedule",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-10-01T10:50:35",
                "message_text_only": "On Thu, Oct 1, 2015 at 5:41 AM, Marcel Jamin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I guess the question then becomes why bitcoin still is <1.0.0\n>\n\nI've said the same thing years ago.  Originally the \"1.0\" was a target for\nwhenever \"client mode\" as planned by Satoshi was implemented, making the\nBitcoin Core implementation feature-complete for as a minimum\nworking/viable project.\n\nUltimately it is not so important and tends to generate a lot of discussion\n - so maybe we should just do the emacs thing and go from 0.12 to 12.0 for\nnext version.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/acb987f9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Bitcoin Core 0.12.0 release schedule",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 762
        }
    },
    {
        "title": "[bitcoin-dev] bitcoin-dev Digest, Vol 5, Issue 2",
        "thread_messages": [
            {
                "author": "digitsu at gmail.com",
                "date": "2015-10-01T10:25:56",
                "message_text_only": "Because Bitcoin XT is 1.0.0\n\n;-)\n\n\n\n\n---------- Forwarded message ----------\n\nFrom: Marcel Jamin <marcel at jamin.net>\n\nDate: 2015-10-01 11:39 GMT+02:00\n\nSubject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule\n\nTo: Btc Drak <btcdrak at gmail.com>\n\n\n\n\n\n\n\nI guess the question then becomes why bitcoin still is <1.0.0\n\n\n\n\nI'd say it's safe to say that it's used in production.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u2014\nRegards,\n\nOn Thu, Oct 1, 2015 at 6:57 PM, null\n<bitcoin-dev-request at lists.linuxfoundation.org> wrote:\n\n> Send bitcoin-dev mailing list submissions to\n> \tbitcoin-dev at lists.linuxfoundation.org\n> To subscribe or unsubscribe via the World Wide Web, visit\n> \thttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> or, via email, send a message with subject or body 'help' to\n> \tbitcoin-dev-request at lists.linuxfoundation.org\n> You can reach the person managing the list at\n> \tbitcoin-dev-owner at lists.linuxfoundation.org\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of bitcoin-dev digest...\"\n> Today's Topics:\n>    1. Re: Design Competition (odinn)\n>    2. Re: Bitcoin Core 0.12.0 release schedule\n>       (Wladimir J. van der Laan)\n>    3. Re: Bitcoin Core 0.12.0 release schedule (Marcel Jamin)\n>    4. Re: Bitcoin Core 0.12.0 release schedule (Btc Drak)\n>    5. Fwd:  Bitcoin Core 0.12.0 release schedule (Marcel Jamin)\n>    6. Re: Fwd:  Bitcoin Core 0.12.0 release schedule\n>       (Wladimir J. van der Laan)\n> ----------------------------------------------------------------------\n> Message: 1\n> Date: Thu, 01 Oct 2015 04:38:50 +0000\n> From: odinn <odinn.cyberguerrilla at riseup.net>\n> To: Richard Olsen <richard.olsen at lykkex.com>, \tbitcoin-dev\n> \t<bitcoin-dev at lists.linuxfoundation.org>\n> Subject: Re: [bitcoin-dev] Design Competition\n> Message-ID: <560CB8DA.6060801 at riseup.net>\n> Content-Type: text/plain; charset=windows-1252\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n> Grosses me out that you have enforced KYC as part of what you are\n> doing for anyone who would decide to get involved:\n> https://wiki.lykkex.com/?id=start#lykke_citizens\n> Good luck with that, I'm sure not going to be a part of it, and I\n> recommend that no-one else does either.\n> - - O\n> Richard Olsen via bitcoin-dev:\n>> All,\n>> \n>> We are looking for participants in a Bitcoin related competition:\n>> the aim is to build a trading platform (initially for foreign\n>> exchange, other assets will follow) which lets participants settle\n>> their trades through the blockchain via coloured coins. To\n>> facilitate a quicker trade reconciliation, the use of a sidechain\n>> is a suggestion but by no means a requirement. There will be an\n>> online briefing event today where we will outline the requirements\n>> in more detail, though much of it we have posted on our website\n>> www.lykkex.com .\n>> \n>> As we want this to be a community driven effort rather than\n>> something turning into a proprietary technology, all contributions\n>> will be made available under a MIT license on Github.\n>> \n>> I look forward to answering your questions at the online briefing\n>> event or over email,\n>> \n>> Thank you and kind regards, Richard Olsen\n>> \n>> \n>> \n>> _______________________________________________ bitcoin-dev mailing\n>> list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n> - -- \n> http://abis.io ~\n> \"a protocol concept to enable decentralization\n> and expansion of a giving economy, and a new social good\"\n> https://keybase.io/odinn\n> -----BEGIN PGP SIGNATURE-----\n> iQEcBAEBCgAGBQJWDLjaAAoJEGxwq/inSG8CkQAH/i6603ivtZXjNw5ZlH1W2p7z\n> c88sb5CcTuTUi+zEx6Q0MRUFfdYcrcBrGsua3CKU9226rpL4acD2Bby5kUPZ1h2/\n> Rl5EiZa11oeqZaZaO5ZmXZ33BOaO2gxqqYEF1zBOzDgky6cqRrj8t4VAj5CKsxsP\n> ktM98UqVXdcuOfBP7y/xqX1Yw9e55PpwUCtaazLo8UkPLMrtdzrbKVZBtjqGxMnG\n> ZxmYku8g6xdmZAMz9xn9oVGtuMHrEjhIVycz3FMHBjoZNLE9yK4YeWyEvLI4YPFt\n> KBR7HvGDava3dzMM5ugw3hgFShfegjrIunWQ/vC9RCjBMLVGVX5RgEblgQe29eY=\n> =41DC\n> -----END PGP SIGNATURE-----\n> ------------------------------\n> Message: 2\n> Date: Thu, 1 Oct 2015 10:50:59 +0200\n> From: \"Wladimir J. van der Laan\" <laanwj at gmail.com>\n> To: Luke Dashjr <luke at dashjr.org>\n> Cc: Bitcoin development mailing list\n> \t<bitcoin-dev at lists.linuxfoundation.org>\n> Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule\n> Message-ID: <20151001085058.GA10010 at amethyst.visucore.com>\n> Content-Type: text/plain; charset=utf-8\n> On Wed, Sep 30, 2015 at 05:57:42PM +0000, Luke Dashjr wrote:\n>> On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via \n>> bitcoin-dev wrote:\n>> > 2015-12-01\n>> > -----------\n>> > - Feature freeze\n>> \n>> Where is \"Consensus freeze\"? Shouldn't this be put off until after the HK \n>> workshop in case a hardfork is decided on? Or have we de-coupled it from the \n>> release process entirely anyway (since old versions need an update for it \n>> too)?\n> In principle, \"feature freeze\" means that any large code changes will no longer go into 0.12, unless fixing critical bugs. \n> I'm not keen on postponing 0.12 for such reasons - after the HK workshop I'm sure that it will take some development/testing/review before code makes it into anything. Apart from that there's a good point to decouple consensus changes from Bitcoin Core major releases.\n> We've seen lot of release date drift due to \"this and this change needs to make it in\" in the past, that was a major reason to switch to a time-based instead of feature-based release schedule.\n> We can always do a 0.12.1.\n> Wladimir\n> ------------------------------\n> Message: 3\n> Date: Thu, 1 Oct 2015 11:05:59 +0200\n> From: Marcel Jamin <marcel at jamin.net>\n> To: \"Wladimir J. van der Laan\" <laanwj at gmail.com>\n> Cc: Bitcoin development mailing list\n> \t<bitcoin-dev at lists.linuxfoundation.org>\n> Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule\n> Message-ID:\n> \t<CAAUq486=TisNp0MbFjWYdCsyVX-qx5dV_KKZuNR7Jp63KNWeiQ at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n> Any particular reason bitcoin versioning doesn't follow the SemVer spec?\n> 2015-10-01 10:50 GMT+02:00 Wladimir J. van der Laan via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org>:\n>> On Wed, Sep 30, 2015 at 05:57:42PM +0000, Luke Dashjr wrote:\n>> > On Thursday, September 24, 2015 11:25:56 AM Wladimir J. van der Laan via\n>> > bitcoin-dev wrote:\n>> > > 2015-12-01\n>> > > -----------\n>> > > - Feature freeze\n>> >\n>> > Where is \"Consensus freeze\"? Shouldn't this be put off until after the HK\n>> > workshop in case a hardfork is decided on? Or have we de-coupled it from\n>> the\n>> > release process entirely anyway (since old versions need an update for it\n>> > too)?\n>>\n>> In principle, \"feature freeze\" means that any large code changes will no\n>> longer go into 0.12, unless fixing critical bugs.\n>>\n>> I'm not keen on postponing 0.12 for such reasons - after the HK workshop\n>> I'm sure that it will take some development/testing/review before code\n>> makes it into anything. Apart from that there's a good point to decouple\n>> consensus changes from Bitcoin Core major releases.\n>>\n>> We've seen lot of release date drift due to \"this and this change needs to\n>> make it in\" in the past, that was a major reason to switch to a time-based\n>> instead of feature-based release schedule.\n>>\n>> We can always do a 0.12.1.\n>>\n>> Wladimir\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/5dca9e61/attachment-0001.html>\n> ------------------------------\n> Message: 4\n> Date: Thu, 1 Oct 2015 10:17:52 +0100\n> From: Btc Drak <btcdrak at gmail.com>\n> To: Marcel Jamin <marcel at jamin.net>\n> Cc: Bitcoin development mailing list\n> \t<bitcoin-dev at lists.linuxfoundation.org>\n> Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule\n> Message-ID:\n> \t<CADJgMzuDPoQacdrH7n_ajwuYLMZ4-Z19KZSa=w=rLhmOkJhfQg at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n> On Thu, Oct 1, 2015 at 10:05 AM, Marcel Jamin via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Any particular reason bitcoin versioning doesn't follow the SemVer spec?\n>>\n> We do: a.b.c, the next major version is, 0.12.0, and maintenance releases\n> are 0.12.1 etc. Release candidates are 0.12.0-rc1 for example.\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/dc91562f/attachment-0001.html>\n> ------------------------------\n> Message: 5\n> Date: Thu, 1 Oct 2015 11:41:25 +0200\n> From: Marcel Jamin <marcel at jamin.net>\n> To: Btc Drak <btcdrak at gmail.com>\n> Cc: Bitcoin development mailing list\n> \t<bitcoin-dev at lists.linuxfoundation.org>\n> Subject: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule\n> Message-ID:\n> \t<CAAUq4861Wd2c42gVy7SoW9414R8RGY+Yzp7rDtzagrwQewnFWg at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n> ---------- Forwarded message ----------\n> From: Marcel Jamin <marcel at jamin.net>\n> Date: 2015-10-01 11:39 GMT+02:00\n> Subject: Re: [bitcoin-dev] Bitcoin Core 0.12.0 release schedule\n> To: Btc Drak <btcdrak at gmail.com>\n> I guess the question then becomes why bitcoin still is <1.0.0\n> I'd say it's safe to say that it's used in production.\n> 2015-10-01 11:17 GMT+02:00 Btc Drak <btcdrak at gmail.com>:\n>> On Thu, Oct 1, 2015 at 10:05 AM, Marcel Jamin via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Any particular reason bitcoin versioning doesn't follow the SemVer spec?\n>>>\n>>\n>> We do: a.b.c, the next major version is, 0.12.0, and maintenance releases\n>> are 0.12.1 etc. Release candidates are 0.12.0-rc1 for example.\n>>\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> URL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/17164b7e/attachment-0001.html>\n> ------------------------------\n> Message: 6\n> Date: Thu, 1 Oct 2015 11:56:55 +0200\n> From: \"Wladimir J. van der Laan\" <laanwj at gmail.com>\n> To: Marcel Jamin <marcel at jamin.net>\n> Cc: Bitcoin development mailing list\n> \t<bitcoin-dev at lists.linuxfoundation.org>\n> Subject: Re: [bitcoin-dev] Fwd:  Bitcoin Core 0.12.0 release schedule\n> Message-ID: <20151001095654.GB10010 at amethyst.visucore.com>\n> Content-Type: text/plain; charset=utf-8\n> On Thu, Oct 01, 2015 at 11:41:25AM +0200, Marcel Jamin wrote:\n>> I guess the question then becomes why bitcoin still is <1.0.0\n> I'll interpret the question as \"why is the Bitcoin Core software still <1.0.0\". Bitcoin the currency doesn't have a version, the block/transaction versions are at v3/v1 respectively, and the highest network protocol version is 70011. \n> Mostly because we don't use the numbers as a signaling mechanism. They just count up, every half year.\n> Otherwise, one'd have to ask hard questions like 'is the software mature enough to be called 1.0.0', which would lead to long arguments, all of which would eventually lead to nothing more than potentially increasing a number. We're horribly stressed-out as is.\n> Wladimir\n> ------------------------------\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> End of bitcoin-dev Digest, Vol 5, Issue 2\n> *****************************************\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/0656d173/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoin-dev Digest, Vol 5, Issue 2",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "digitsu at gmail.com"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 11839
        }
    },
    {
        "title": "[bitcoin-dev] Scheduling refactors (was Re: Bitcoin Core 0.12.0 release schedule)",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-10-01T10:37:22",
                "message_text_only": "On Thu, Sep 24, 2015 at 7:25 AM, Wladimir J. van der Laan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> 2015-11-01\n> -----------\n> - Open Transifex translations for 0.12\n> - Soft translation string freeze (no large or unnecessary changes)\n> - Finalize and close translation for 0.10\n>\n> 2015-12-01\n> -----------\n> - Feature freeze\n> - Translation string freez\n\n\n\nProposed:   Schedule a time window for merging big refactors such as\nlibconsensus - assuming its ready as discussed per current plan - such as\nOctober 25-31 or November 1-7.\n\n(and implicitly, do not merge big refactors into 0.12 outside that window)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151001/ebfd146e/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Scheduling refactors (was Re: Bitcoin Core 0.12.0 release schedule)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 819
        }
    },
    {
        "title": "[bitcoin-dev] Dev-list's stance on potentially altering the PoW algorithm",
        "thread_messages": [
            {
                "author": "Daniele Pinna",
                "date": "2015-10-02T08:02:43",
                "message_text_only": "The following paper proposing an asymmetric memory-hard PoW had been\nrecently published:\n\nhttp://eprint.iacr.org/2015/946.pdf\n\nMy intent is not to promote the paper as I have not finished studying it\nmyself. I am however interested in the dev-list's stance on potentially\naltering the bitcoin PoW protocol should an algorithm that guarantees\nprotection from ASIC/FPGA optimization be found.\n\nI assume that, given the large amount of money invested by some miners into\ntheir industrial farms this would represent a VERY contentious hard fork.\n\nIt is, however, also true that a novel optimization-resistant algorithm\ncould greatly ameliorate decentralization in the bitcoin network due to a\nresurgence of desktop/cellphone mining.\n\nWhere do the core devs stand on this matter, hypothetical as it may be?\n\nDpinna\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/1f3c81ea/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-02T08:20:55",
                "message_text_only": "On Oct 2, 2015 10:03 AM, \"Daniele Pinna via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> should an algorithm that guarantees protection from ASIC/FPGA\noptimization be found.\n\nThis is demonstrably impossible: anything that can be done with software\ncan be done with hardware. This is computer science 101.\nAnd specialized hardware can always be more efficient, at least\nenergy-wise.\n\nOn the other hand, BIP99 explicitly contemplates \"anti-miner hardforks\"\n(obviously not for so called \"ASIC-resistance\" [an absurd term coined to\npromote some altcoins], but just for restarting the ASIC and mining market\nin case mining becomes too centralized).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/293c31ea/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-10-02T08:30:57",
                "message_text_only": "See also https://www.reddit.com/r/Bitcoin/comments/3n5nws/research_paper_asymmetric_proofofwork_based_on/cvl922x\n\nAdam\n\nOn 2 October 2015 at 10:20, Jorge Tim\u00f3n\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> On Oct 2, 2015 10:03 AM, \"Daniele Pinna via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> should an algorithm that guarantees protection from ASIC/FPGA optimization\n>> be found.\n>\n> This is demonstrably impossible: anything that can be done with software can\n> be done with hardware. This is computer science 101.\n> And specialized hardware can always be more efficient, at least energy-wise.\n>\n> On the other hand, BIP99 explicitly contemplates \"anti-miner hardforks\"\n> (obviously not for so called \"ASIC-resistance\" [an absurd term coined to\n> promote some altcoins], but just for restarting the ASIC and mining market\n> in case mining becomes too centralized).\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Daniele Pinna",
                "date": "2015-10-02T08:31:34",
                "message_text_only": "Interesting! I didn't notice BIP 99's anti-miner hardfork proposal....\nthanks for pointing it out to me.\n\nDpinna\n\nDaniele Pinna, Ph.D\n\nOn Fri, Oct 2, 2015 at 10:20 AM, Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n>\n> On Oct 2, 2015 10:03 AM, \"Daniele Pinna via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > should an algorithm that guarantees protection from ASIC/FPGA\n> optimization be found.\n>\n> This is demonstrably impossible: anything that can be done with software\n> can be done with hardware. This is computer science 101.\n> And specialized hardware can always be more efficient, at least\n> energy-wise.\n>\n> On the other hand, BIP99 explicitly contemplates \"anti-miner hardforks\"\n> (obviously not for so called \"ASIC-resistance\" [an absurd term coined to\n> promote some altcoins], but just for restarting the ASIC and mining market\n> in case mining becomes too centralized).\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/af19280a/attachment.html>"
            },
            {
                "author": "NxtChg",
                "date": "2015-10-02T10:46:30",
                "message_text_only": ">...obviously not for so called \"ASIC-resistance\" [an absurd term coined to promote some altcoins]\n\nYet another fallacy of \"all-or-nothing\" thinking, which is so abundant in the Core camp.\n\nThe fact that you can build ASIC for any kind of algorithm _in_theory_ doesn't mean you can't make it _arbitrary_hard_ in practice.\n\nSo I would tone down the arrogance a bit."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-02T11:00:57",
                "message_text_only": "On Oct 2, 2015 12:46 PM, \"NxtChg\" <nxtchg at hush.com> wrote:\n>\n>\n> >...obviously not for so called \"ASIC-resistance\" [an absurd term coined\nto promote some altcoins]\n>\n> Yet another fallacy of \"all-or-nothing\" thinking, which is so abundant in\nthe Core camp.\n>\n> The fact that you can build ASIC for any kind of algorithm _in_theory_\ndoesn't mean you can't make it _arbitrary_hard_ in practice.\n>\n> So I would tone down the arrogance a bit.\n>\n\nASIC-RESISTANCE is simply not possible, I'm sorry if that position strikes\nyou as arrogant. Note that I didn't say anything about memory-hard, which\nis possible (but not necessarily preferrable to\nsimple-to-implement-in-hardware pow algorithms).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/30ec37fc/attachment.html>"
            },
            {
                "author": "Peter R",
                "date": "2015-10-02T16:38:26",
                "message_text_only": "> On Oct 2, 2015, at 1:20 AM, Jorge Tim\u00f3n via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Oct 2, 2015 10:03 AM, \"Daniele Pinna via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> > should an algorithm that guarantees protection from ASIC/FPGA optimization be found.\n> This is demonstrably impossible: anything that can be done with software can be done with hardware. This is computer science 101.  And specialized hardware can always be more efficient, at least energy-wise.\n> \nI encourage Alex and Dmitry to consider submitting their paper to Ledger, where it will be reviewed objectively and with an open mind.  The authors have motivated their work, framed it in its scholarly context, and made explicit the contributions their paper makes.  Their manuscript, \"Asymmetric proof-of-work based on the Generalized Birthday problem,\" clearly represents a great deal of work by the authors and I commend them for their efforts.  \n\nIn the link Adam Back provided, Greg Maxwell mentioned that \u201cit is far from clear that 'memory hardness' is actually a useful goal.\u201d  I agree with this statement; however, regardless of whether memory hardness turns out to be a useful goal in regards to cryptocurrency or not, a paper analyzing memory-hard proof-of-work schemes is certainly useful in helping us to figure that out. \n\nBest regards,\nPeter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/7b817d44/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-02T21:31:21",
                "message_text_only": "On Friday, October 02, 2015 8:02:43 AM Daniele Pinna via bitcoin-dev wrote:\n> I am however interested in the dev-list's stance on potentially\n> altering the bitcoin PoW protocol should an algorithm that guarantees\n> protection from ASIC/FPGA optimization be found.\n> \n> I assume that, given the large amount of money invested by some miners into\n> their industrial farms this would represent a VERY contentious hard fork.\n> \n> It is, however, also true that a novel optimization-resistant algorithm\n> could greatly ameliorate decentralization in the bitcoin network due to a\n> resurgence of desktop/cellphone mining.\n> \n> Where do the core devs stand on this matter, hypothetical as it may be?\n\nBesides ASIC-proof being even tehoretically impossible, assuming we had a PoW \nthat worked using mere RAM-as-the-ASIC, this would probably not be good in \nthe long term for decentralisation, as it is only a matter of time until \nbotnets would bankrupt all the legitimate miners out of operation.\n\nRestarting the mining with a new algorithm as a reaction and defence against \ncentralised hoarding of mining ASICs (as we are seeing now), would be \nacceptable. It would not necessarily be contentions *to the economy*, as such \nhoarding-miners do not participate in the economy in any meaningful way (they \ndo not accept payments from other bitcoin users).\n\nLuke"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-02T23:19:11",
                "message_text_only": "> Restarting the mining with a new algorithm as a reaction and defence against\n> centralised hoarding of mining ASICs (as we are seeing now), would be\n> acceptable. It would not necessarily be contentions *to the economy*, as such\n> hoarding-miners do not participate in the economy in any meaningful way (they\n> do not accept payments from other bitcoin users).\n>\n> Luke\n\nI don't see any basis for these claims.  Under this theory developers \nalso do not \"participate in the economy\" either.  These are questions \nfor economists and not developers.\n\nMaybe \"we\" could change the language of Core to prevent the \ncentralization of developers?  Maybe switch over to FORTRAN?   lol\n\nRuss"
            },
            {
                "author": "Daniele Pinna",
                "date": "2015-10-02T08:30:40",
                "message_text_only": "The recently published paper I referenced cite's the Cuckoo cycle\nalgorithm, discusses its limitations and explains how their proposed\nalgorithm greatly improves on it. Again.... you're probably in a WAYYY\nbetter position to judge this than I am. My question was purely\nhypothetical as I wanted to know where the core devs stand on flipping the\nmining ecosystem upside down.\n\nThanks for your link though, I'll read it right now (before finishing the\nresearch article i posted :) ).\n\nDaniele\n\nDaniele Pinna, Ph.D\n\nOn Fri, Oct 2, 2015 at 10:14 AM, Adam Back <adam at cypherspace.org> wrote:\n\n> There are papers demonstrating this \"protection from ASIC/FPGA\n> optimization\" to be basically impossible\n> https://download.wpsoftware.net/bitcoin/asic-faq.pdf and yet people\n> keep trying...\n>\n> See also John Tromps cuckoo cycle paper, seems close to the best you\n> could expect from memory hard.\n>\n> Adam\n>\n> On 2 October 2015 at 10:02, Daniele Pinna via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > The following paper proposing an asymmetric memory-hard PoW had been\n> > recently published:\n> >\n> > http://eprint.iacr.org/2015/946.pdf\n> >\n> > My intent is not to promote the paper as I have not finished studying it\n> > myself. I am however interested in the dev-list's stance on potentially\n> > altering the bitcoin PoW protocol should an algorithm that guarantees\n> > protection from ASIC/FPGA optimization be found.\n> >\n> > I assume that, given the large amount of money invested by some miners\n> into\n> > their industrial farms this would represent a VERY contentious hard fork.\n> >\n> > It is, however, also true that a novel optimization-resistant algorithm\n> > could greatly ameliorate decentralization in the bitcoin network due to a\n> > resurgence of desktop/cellphone mining.\n> >\n> > Where do the core devs stand on this matter, hypothetical as it may be?\n> >\n> > Dpinna\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/0ca300a8/attachment-0001.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-02T16:45:45",
                "message_text_only": "On Fri, Oct 2, 2015 at 8:30 AM, Daniele Pinna via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> The recently published paper I referenced cite's the Cuckoo cycle algorithm,\n> discusses its limitations and explains how their proposed algorithm greatly\n> improves on it.\n\nThey discuss a very old version of the Cuckoo cycle paper, and I\nbelieve none of their analysis is applicable to the most recent\nrevision. :(\n\nIn any case, I commented more about functions of this class here:\nhttps://www.reddit.com/r/Bitcoin/comments/3n5nws/research_paper_asymmetric_proofofwork_based_on/cvl922x\n\nI don't believe changing the POW function is impossible in principle,\nbut I expect it would only happen due to problems with the composition\nof current hash-power and not even if it were universally agreed that\nsome other construction were technically better (though that is a high\nbar.)"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-10-02T21:37:09",
                "message_text_only": "If the PoW function is changed, it ought to change slowly so as not to drop\na brick wall in front of the miners speeding toward the ever-receding goal\nof protecting the blockchain.  Who's going to get on that path if the\nbitcoin community does that?\n\nBut it can be done slowly.  If most of the entries is the list of possible\nPoW functions are double-SHA256, then the few that aren't will offer the\nhealthy goal sought by those who like the idea of changing it.  The healthy\ngoal is for general computing machines to help protect the blockchain in an\nincentivized way.  There's a sick goal too, which is to destroy large\ninvestments in mining.  I hope no one has that goal.\n\nAt\nhttp://bitcoin.stackexchange.com/questions/35679/is-it-possible-to-make-pow-asic-resistant-through-dynamically-generated-hash-cha/40475#40475\nI proposed that ongoing competitions for the creation of new hash\nalgorithms could feed an ASIC-resistant PoW, defined using the\nas-yet-unknowable winners of such competitions.  It is possible to make an\nASIC resistant algorithm, but it isn't a programmable algorithm - it's one\nthat requires human intervention.  The hash of the next block is a good\nexample - there's no programmable algorithm that can find it because too\nmuch human intervention is required, but it's an algorithm well-enough\ndefined for us to build a billion dollar system on top of it.\n\nThat being said, I've started looking at two different kinds of\ndecentralization.  The literal actually-in-different-places kind is\ncategorically different than the much more important, virtual\nimpervious-to-coercion kind.  The behavior of the \"centralized\" oil cartel\nis a good example.  The participants cheat.  This is a fundamental\nprinciple in the debate between free-marketeers and authoritarians\nregarding the emergence of monopoly.  Without coercion, monopolies fall\napart.  There's nothing coercive about our use of the double-SHA256, so in\nmy mind, the centralization it has so far produced is not dangerous.  It's\nscary, sure, but until coercion is used to prevent me and my friends from\nbuying our own ASICs, it remains impervious to coercion.\n\nSorry for the long email that didn't make any apparent progress.  The\nthinking is what matters to me, and seeing two kinds of decentralization\nand recognizing that a change in PoW can be slow enough to avoid hurting\nexisting miners are items I haven't seen anyone else recognize, so I had to\nbring them up.\n\nnotplato\n\nOn Fri, Oct 2, 2015 at 9:45 AM, Gregory Maxwell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Fri, Oct 2, 2015 at 8:30 AM, Daniele Pinna via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > The recently published paper I referenced cite's the Cuckoo cycle\n> algorithm,\n> > discusses its limitations and explains how their proposed algorithm\n> greatly\n> > improves on it.\n>\n> They discuss a very old version of the Cuckoo cycle paper, and I\n> believe none of their analysis is applicable to the most recent\n> revision. :(\n>\n> In any case, I commented more about functions of this class here:\n>\n> https://www.reddit.com/r/Bitcoin/comments/3n5nws/research_paper_asymmetric_proofofwork_based_on/cvl922x\n>\n> I don't believe changing the POW function is impossible in principle,\n> but I expect it would only happen due to problems with the composition\n> of current hash-power and not even if it were universally agreed that\n> some other construction were technically better (though that is a high\n> bar.)\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/23af5503/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Dev-list's stance on potentially altering the PoW algorithm",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Adam Back",
                "Milly Bitcoin",
                "Daniele Pinna",
                "Dave Scotese",
                "Jorge Tim\u00f3n",
                "NxtChg",
                "Luke Dashjr",
                "Gregory Maxwell",
                "Peter R"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 16389
        }
    },
    {
        "title": "[bitcoin-dev] 2015-10-01 #bitcoin-dev Weekly Development Meeting Minutes",
        "thread_messages": [
            {
                "author": "Daniel Stadulis",
                "date": "2015-10-02T08:06:22",
                "message_text_only": "Meeting Title:\n#bitcoin-dev Weekly Development Meeting\nMeeting Date:\n2015-10-01\nMeeting Time:\n19:00-20:00 UTC\nParticipants in Attendance:\ndstadulis\nwumpus\nmorcos\ngmaxwell\nbtcdrak\njonasshnelli\nmaaku\nsdaftuar\nsipa\nBlueMatt\nCodeShark\nLuke-Jr\nbsm117532\njgarzik\nIRC Chat Logs:\nhttp://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/01#l1443726030.0\n\n----------------------------\nTopics Discussed:\n\n1.) Mempool limiting\n2.) BIP68 + CHECKSEQUENCEVERIFY\n3.) CLTV soft fork deployment\n4.) libconsensus merge time window\n4.1) Agreement there should be a merge window for move-only changes\n4.2)jtimon will document higher-level rationales for moves, so people can\nfirst agree on what should move where\n\n----------------------------\n2015-10-01 Meeting Conclusions:\n\n#\nAction items\nResponsible Parties\nDue Date/ETA\n\n1\nMempool limiting:\nBlueMatt: to finish 6722 code.\nOthers:Try attacking 6722, 6557, and 6673 to see edge-case behavior\nBlueMatt et al\nUndetermined due date\n\n2\nmorcos email dev list with chain-limit proposal, sdaftuar will review\nproposal before list is emailed\nmorcos & sdaftuar\nUndetermined due date\n\n3\nCLTV backport PRs #6706 and #6707 (backport 0.10 and 0.11 respectively)\nneed review ASAP\nAll\nASAP\n\n4\nNeed reviews/ACKs of\nBIP68 #6312,\nBIP112 CSV #6564,\nBIP113 #6566\nAll\nBy 2015-10-08\n\n5\nDocument higher-level rationales for libconsensus moves, so people can\nfirst agree on what should move where\njtimon\nUndetermined due date\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151002/cb02ea18/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "2015-10-01 #bitcoin-dev Weekly Development Meeting Minutes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Daniel Stadulis"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1612
        }
    },
    {
        "title": "[bitcoin-dev] BIP Proposal:",
        "thread_messages": [
            {
                "author": "Whit Jack",
                "date": "2015-10-02T19:03:05",
                "message_text_only": "/* I do not want to make anyone angry, this is sarcasm, if you are not interested, please stop here */\n\nI would like to propose a block size algorithm based off the use of extra unneeded, unwanted data.  I\u2019m looking to see if anyone would be able to help me find potential flaws.\n\n==Abstract==\n\nThis BIP proposes replacing the current static blocksize with a 2-part blocksize algorithm to decide on the blocksize balancing power between the miners and users.  I propose an easy to implement solution for reaching consensus based on a number of factors (or variables as you programmy types like to call it).\n\nTransaction volume and buzzword usage have been growing in a heavily correlated way for the past 6 years.  If we were to base the blocksize on the usage of buzzwords, we could grow the blocksize at a reasonable rate to scale with demand.\n\n\nI have outlined specifics at https://github.com/whitj00/bips/blob/master/bip-whit.mediawiki\n\nThanks,\nWhit"
            }
        ],
        "thread_summary": {
            "title": "BIP Proposal:",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Whit Jack"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 953
        }
    },
    {
        "title": "[bitcoin-dev] [Bitcoin-development] New BIP32 structure for P2SH multisig wallets [BIP-45]",
        "thread_messages": [
            {
                "author": "Jean-Pierre Rupp",
                "date": "2015-10-03T12:42:24",
                "message_text_only": "Hello,\n\nI have been reviewing BIP-45 today.  There is a privacy problem with it\nthat should at least be mentioned in the document.\n\nWhen using the same extended public key for all multisig activity, and\ndealing with different cosigners in separate multisig accounts, reuse of\nthe same set of public keys means that all cosigners from all accounts\nwill be able to monitor multisig activity from every other cosigner, in\nevery other account.\n\nBesides privacy considerations, HD wallet's non-reuse of public keys\nprovide some defence against wallets that do not implement deterministic\nsigning, and use poor entropy for signature nonces.\n\nUnless users are expected to establish a single cosigning account, this\nscheme will result in reuse of public keys, and degradation of privacy.\n\nI understand that for convenience it is useful to have a single extended\npublic key that can be handed to every cosigner.  This makes setting up\naccounts or recovering from data loss a easier.\n\nI suggest that privacy & potential security degradation due to increased\npublic key reuse in the case of users with multiple multisig accounts\nshould get a mention in the BIP-45 document.\n\nGreetings\n\n\nOn 25/04/14 23:27, Manuel Araoz wrote:\n> Hi, I'm part of the team building copay\n> <https://github.com/bitpay/copay>, a multisignature P2SH HD\n> wallet. We've been following the discussion regarding standardizing the\n> structure for branches both on this list and on github (1\n> <https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki>, 2\n> <https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki>, 3\n> <https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki>, 4\n> <https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki>, 5\n> <https://github.com/bitcoin/bips/pull/52>). Soon, we realized the\n> assumptions in the discussions were not true for a multisig hd wallet,\n> so we wanted to share our current approach to that, to get feedback and\n> see if we can arrive to a new standard (and possibly a new BIP)\n> \n> These are our assumptions: \n>  - N parties want to share an m-of-n wallet.\n>  - Each party must generate their master private keys independently.\n>  - Use multisig P2SH for all addresses.\n>  - Use BIP32 to derive public keys, then create a multisig script, and\n> use the P2SH address for that.\n>  - The address generation process should not require communicating with\n> other parties. (Thus, all parties must be able to generate all public keys)\n>  - Transaction creation + signing requires communication between\n> parties, of course.\n> \n> -------------------------------------------------\n> \n> Following BIP43, we're be using:\n> \n> \n> m / purpose' / *\n> \n> where /purpose/ is the hardened derivation scheme based on the new BIP\n> number.\n> We then define the following levels:\n> \n> \n> m / purpose' / cosigner_index / change / address_index\n> \n> Each level has a special meaning detailed below:\n> \n> /cosigner_index/ <http://en.wikipedia.org/wiki/Co-signing>: the index of\n> the party creating this address. The indices can be determined\n> independently by lexicographically sorting the master public keys of\n> each cosigner.\n> \n> /change/: 0 for change, 1 for receive address.\n> \n> /address_index/: Addresses are numbered from index 0 in sequentially\n> increasing manner. We're currently syncing the max used index for each\n> branch between all parties when they connect, but we're open to\n> considering removing the index sync and doing the more elegant\n> used-address discovery via a gap limit, as discussed in BIP44\n> <https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#address-gap-limit>.\n> We feel 20 might be too low though. \n> \n> *Wallet high-level description:*\n> Each party generates their own extended master keypair and shares the\n> extended purpose' public key with the others, which is stored encrypted.\n> Each party can generate any of the other's derived public keys, but only\n> his own private keys. \n> \n> *General address generation procedure:*\n> When generating an address, each party can independently generate the N\n> needed public keys. They do this by deriving the public key in each of\n> the different trees, but using the same path. They can then generate the\n> multisig script and the corresponding p2sh address. In this way, each\n> path corresponds to an address, but the public keys for that address\n> come from different trees.\n> \n> *Receive address case:*\n> Each cosigner generates addresses only on his own branch. One of the n\n> cosigners wants to receive a payment, and the others are offline. He\n> knows the last used index in his own branch, because only he generates\n> addresses there. Thus, he can generate the public keys for all of the\n> others using the next index, and calculate the needed script for the\n> address. \n> \n> /Example: /Cosigner #2 wants to receive a payment to the shared wallet.\n> His last used index on his own branch is 4. Then, the path for the next\n> receive address is m/$purpose/2/1/5. He uses this same path in all of\n> the cosigners trees to generate a public key for each one, and from that\n> he gets the new p2sh address.\n> \n> *Change address case:*\n> Again, each cosigner generates addresses only on his own branch. One of\n> the n cosigners wants to create an outgoing payment, for which he'll\n> need a change address. He generates a new address using the same\n> procedure as above, but using a separate index to track the used change\n> addresses. \n> /\n> Example: /Cosigner #5 wants to send a payment from the shared wallet,\n> for which he'll need a change address. His last used change index on his\n> own branch is 11. Then, the path for the next change address is\n> m/$purpose/5/0/12. He uses this same path in all of the cosigners trees\n> to generate a public key for each one, and from that he gets the new\n> p2sh address.\n> \n> \n> *Transaction creation and signing:*\n> When creating a transaction, first one of the parties creates a\n> Transaction Proposal. This is a transaction that spends some output\n> stored in any of the p2sh multisig addresses (corresponding to any of\n> the copayers' branches). This proposal is sent to the other parties, who\n> decide if they want to sign. If they approve the proposal, they can\n> generate their needed private key for that specific address (using the\n> same path that generated the public key in that address, but deriving\n> the private key instead), and sign it. Once the proposal reaches m\n> signatures, any cosigner can broadcast it to the network, becoming\n> final. The specifics of how this proposal is structured, and the\n> protocol to accept or reject it, belong to another BIP, in my opinion. \n> \n> *Final comments:*\n> - We're currently lexicographically sorting the public keys for each\n> address separately. We've read Mike Belshe's comments about sorting the\n> master public keys and then using the same order for all derived\n> addresses, but we couldn't think of any benefits of doing that (I mean,\n> the benefits of knowing whose public key is which).\n> - We originally thought we would need a non-hardened version of purpose\n> for the path, because we needed every party to be able to generate all\n> the public keys of the others. With the proposed path, is it true that\n> the cosigners will be able to generate them, by knowing the extended\n> purpose public key for each copayer? (m/purpose')\n> - The reason for using separate branches for each cosigner is we don't\n> want two of them generating the same address and receiving simultaneous\n> payments to it. The ideal case is that each address receives at most one\n> payment, requested by the corresponding cosigner. \n> \n> \n> Thoughts?\n> Manuel\n> \n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Jean-Pierre Rupp",
                "date": "2015-10-04T15:18:07",
                "message_text_only": "I have a possible solution:\n\nTake all public keys encoded in the purpose-specific extended public\nkeys (m/45') of all cosigners and sort them lexicographically, according\nto BIP-45.  Serialize this information and calculate its HASH160\n(RIPEMD160 \u2218 HASH256).  Split the output in five 32-bit chunks, setting\nthe MSB on all of them to 0. Use these 32-bit chunks to build a\nderivation path from the purpose-specific extended public keys.  Treat\nthis derivation path as if it was the purpose-specific extended public\nkey in BIP-45.\n\nThis scheme will avoid public key sharing, and as long as you share your\npurpose-specific extended public key only with your cosigners, it should\nbe relatively hard for a passive observer to link activity between\ndifferent cosigning accounts.\n\nOn 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:\n> Hello,\n> \n> I have been reviewing BIP-45 today.  There is a privacy problem with it\n> that should at least be mentioned in the document.\n> \n> When using the same extended public key for all multisig activity, and\n> dealing with different cosigners in separate multisig accounts, reuse of\n> the same set of public keys means that all cosigners from all accounts\n> will be able to monitor multisig activity from every other cosigner, in\n> every other account.\n> \n> Besides privacy considerations, HD wallet's non-reuse of public keys\n> provide some defence against wallets that do not implement deterministic\n> signing, and use poor entropy for signature nonces.\n> \n> Unless users are expected to establish a single cosigning account, this\n> scheme will result in reuse of public keys, and degradation of privacy.\n> \n> I understand that for convenience it is useful to have a single extended\n> public key that can be handed to every cosigner.  This makes setting up\n> accounts or recovering from data loss a easier.\n> \n> I suggest that privacy & potential security degradation due to increased\n> public key reuse in the case of users with multiple multisig accounts\n> should get a mention in the BIP-45 document.\n> \n> Greetings"
            },
            {
                "author": "Thomas Kerin",
                "date": "2015-10-04T17:24:59",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHi Jean Pierre,\n\nThis is a problem I've considered before, though I have to say I prefer\nyour solution.\n\nThe problem is, how can a person who restores his wallet from just a\nseed restore\nall his multi-signature addresses with other parties?\n\nYour proposal is nice because all participants are equal, and it\nminimalizes the data\nrequired for recovery because it's deterministic, and the (extended)\npublic key is the first\npiece of metadata you'll ask for from others.. Let it be the only thing\nwe need!\n\nRegards amending BIP45 - BIP's are not amended after the fact, however\nbad it may be\nin retrospect. It might be best to write a BIP specifying a\n\"pseudorandom & deterministic\npath generation for HD/multi-signature accounts\"\n\nTK\n\nOn 04/10/15 16:18, Jean-Pierre Rupp via bitcoin-dev wrote:\n> I have a possible solution:\n>\n> Take all public keys encoded in the purpose-specific extended public\n> keys (m/45') of all cosigners and sort them lexicographically, according\n> to BIP-45.  Serialize this information and calculate its HASH160\n> (RIPEMD160 \u2218 HASH256).  Split the output in five 32-bit chunks, setting\n> the MSB on all of them to 0. Use these 32-bit chunks to build a\n> derivation path from the purpose-specific extended public keys.  Treat\n> this derivation path as if it was the purpose-specific extended public\n> key in BIP-45.\n>\n> This scheme will avoid public key sharing, and as long as you share your\n> purpose-specific extended public key only with your cosigners, it should\n> be relatively hard for a passive observer to link activity between\n> different cosigning accounts.\n>\n> On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:\n>> Hello,\n>>\n>> I have been reviewing BIP-45 today.  There is a privacy problem with it\n>> that should at least be mentioned in the document.\n>>\n>> When using the same extended public key for all multisig activity, and\n>> dealing with different cosigners in separate multisig accounts, reuse of\n>> the same set of public keys means that all cosigners from all accounts\n>> will be able to monitor multisig activity from every other cosigner, in\n>> every other account.\n>>\n>> Besides privacy considerations, HD wallet's non-reuse of public keys\n>> provide some defence against wallets that do not implement deterministic\n>> signing, and use poor entropy for signature nonces.\n>>\n>> Unless users are expected to establish a single cosigning account, this\n>> scheme will result in reuse of public keys, and degradation of privacy.\n>>\n>> I understand that for convenience it is useful to have a single extended\n>> public key that can be handed to every cosigner.  This makes setting up\n>> accounts or recovering from data loss a easier.\n>>\n>> I suggest that privacy & potential security degradation due to increased\n>> public key reuse in the case of users with multiple multisig accounts\n>> should get a mention in the BIP-45 document.\n>>\n>> Greetings\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n- -- \nMy PGP key can be found here: <https://thomaskerin.io/me.pub.asc>\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBCgAGBQJWEWDlAAoJEAiDZR291eTlFAkQALgiiKX+VzLOwLK13S0EcE0v\nRZeC8hqS5AEi/wpOYC2H0TFaHhDqDgy7Pt7nTt/vfOr9QFbJm076I/iFIhLPPAWf\nrRg5kzL6ebOyX1NLmALcNgE9L+Jwz09kdzLUj+xZesJfu1AiSMgND38vFq4CmRfg\nYSnWI4iMSP3OoMO5Akjq7m9Ww/lENPDmxTrz2ET9KwKPEkjrdt3c0ipQcs+/vGuU\nRfRCUwxcdu/0nl5JhltxMV6wUMjdJ3AGbamWZpL+vA+jT5paOd4ORjc64huQGtFQ\nW7l8ynbbVqtXlYYs9mXCMm70316sdo5ZpOXzQmplwtuHWVYt9ssS1aLkBoLYCBtU\ni95Ki79S2ooeIjDEqI6FKpgVnLTmUbhudg/vk7eA0+RoNh3SBEHV2HmZ5yTBNtjk\nP2a2tRmrbe3CmrdogbJzaweZenzoR82PziF7DAb/2JqtccPSdTW/GrAGyCoe0O5B\nPId/iELHKpQepvybp+5PI6q2Atgzut4ze+a2vBiXjbiU3j0sX0XWg5fu9R9Ea1Bw\n5+BY71GSa20OTDYEsp5esrl5/AUFj4ivB2OWFok77nGi2rTK+rKL3qMvbmYjAKUV\nrWN4m6r8pU2hdhBCEJkXjg57whiMYn5w7ILlrbK5lLEu5qo0txoRtBPaid+y4mkK\nmoZU0LtvSQSX6ZaojQ/v\n=Vs6z\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Matias Alejo Garcia",
                "date": "2015-10-05T06:57:16",
                "message_text_only": "Hi,\n\nSorry the late response. Going back to the original message:\n\n\n> > On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:\n> >> I have been reviewing BIP-45 today.  There is a privacy problem with it\n> >> that should at least be mentioned in the document.\n> >>\n> >> When using the same extended public key for all multisig activity, and\n> >> dealing with different cosigners in separate multisig accounts, reuse of\n> >> the same set of public keys means that all cosigners from all accounts\n> >> will be able to monitor multisig activity from every other cosigner, in\n> >> every other account.\n>\n\nI am not completely sure what you mean by 'account' and 'mutisig activity'.\nYou seem to imply\nthat the same set of extended public keys will be used in more that one\nwallet, which it is\nnot required (and certainly not recommended) by BIP45.\n\nAccording to BIP45, a singing party, in order to generate a wallet address,\nneeds the extended public keys of all the other parties, so each party will\nbe able to see the transaction history of the wallet they are sharing, but\nif the party has other wallets with other copayers the xpub should be\ncompletely different.\n\nmat\u00edas\n\n\n\n-- \nBitPay.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/d1abcff0/attachment-0001.html>"
            },
            {
                "author": "Jean-Pierre Rupp",
                "date": "2015-10-05T12:18:56",
                "message_text_only": "When I talk about multisig account I mean an arrangement among a set of\ncosigners to be signatories of multi-signature transactions requiring a\nset number of signatures, as specified in BIP-45.\n\nExample:\n\nJuan: xpub123...\nPedro: xpub456...\nJos\u00e9: xpub789...\n\nThey all agree to create a 2-of-3 multisig \u201caccount\u201d following BIP-45.\nTheir extended public keys are all path m/45' from their wallet\u2019s master\nprivate key, as per the standard.\n\nPerhaps Pedro wants to also participate in a 2-of-2 cosigning\narrangement with a merchant that will deliver a laptop to him, so Pedro\nprovides this merchant with the same extended public key derived from\npath m/45', and the merchant provides Pedro with his own:\n\nPedro: xpub456...\nElCheapoPC: xpub987...\n\nNow, suppose that the first cosigner[1] in each of the accounts\ngenerates a set of public keys for a multisig redeem script to obtain a\nP2SH address from. The derivation path m/45'/0/0/1 is used as per\nBIP-45.  Pedro\u2019s public key for that address in each account will be the\nsame.\n\nEvery cosigner\u2019s address public key is obtained following the same\nderivation path from the cosigner\u2019s master key, therefore, it is easy to\nknow what public keys Pedro is likely to use in both 2-of-3 account\n{Juan, Pedro, Jos\u00e9} and 2-of-2 account {Pedro, ElCheapoPC}, by only\nknowing Pedro\u2019s m/45' purpose-specific extended public key.  By scanning\nthe blockchain for Pedro\u2019s public keys, Jos\u00e9 can see that Pedro had a\n2-of-2 multi-signature arrangement with somebody else (ElCheapoPC),\nalthough he does not necessarily know its identity, and how much money\nwas transacted in that arrangement, without having to know the extended\npublic key from ElCheapoPC.\n\nBy adopting the scheme I proposed earlier as an improvement, cosigners\nwith Pedro would have to know ElCheapoPC\u2019s extended public key in order\nto eavesdrop on any transaction between Pedro and ElCheapoPC.\n\n[1] According to lexicographic order of serialized public keys contained\nin each of the xpubs, as per BIP-45 specification.\n\nOn 05/10/15 07:57, Matias Alejo Garcia wrote:\n> \n> Hi,\n> \n> Sorry the late response. Going back to the original message:\n>  \n> \n>     > On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:\n>     >> I have been reviewing BIP-45 today.  There is a privacy problem\n>     with it\n>     >> that should at least be mentioned in the document.\n>     >>\n>     >> When using the same extended public key for all multisig\n>     activity, and\n>     >> dealing with different cosigners in separate multisig accounts,\n>     reuse of\n>     >> the same set of public keys means that all cosigners from all\n>     accounts\n>     >> will be able to monitor multisig activity from every other\n>     cosigner, in\n>     >> every other account.\n> \n> \n> I am not completely sure what you mean by 'account' and 'mutisig\n> activity'. You seem to imply\n> that the same set of extended public keys will be used in more that one\n> wallet, which it is \n> not required (and certainly not recommended) by BIP45.\n> \n> According to BIP45, a singing party, in order to generate a wallet\n> address, needs the extended public keys of all the other parties, so\n> each party will be able to see the transaction history of the wallet\n> they are sharing, but if the party has other wallets with other copayers\n> the xpub should be completely different.\n> \n> mat\u00edas\n> \n> \n> \n> -- \n> BitPay.com"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2015-10-05T12:32:56",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\n> Perhaps Pedro wants to also participate in a 2-of-2 cosigning \n> arrangement with a merchant that will deliver a laptop to him, so\n> Pedro provides this merchant with the same extended public key\n> derived from path m/45', and the merchant provides Pedro with his\n> own:\n\nWhat holds you back from using m/i'/45' where i' is your multisig\n\"account\" number?\n\nWithin your BIP45 wallet (lets assume Copay), you would not provide\nthe xpubkey at m/45', instead you would provide your xpubkey at m/i'/45'\n.\n\nIt's probably no longer pure BIP45.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAEBAgAGBQJWEm34AAoJECnUvLZBb1Ps+TgP/RmIxp31GOF9JDYVvSpaWfjf\nNhB7o5/AiQ5rNv2BL5Wdoebb3EHzPTjzf/gGq3vSHQkm+c5rnDO8kTtwlNog7HN3\ndjtlbdhftlqcWdgBYNRstMj52NlfQKz4exvaPTsFlxUS02VzafPhssde9H7KdBHw\nHoePJziOku6ibHW3u2CdEtGHYSRZ0w7xUmGYUjYc9LRa86Gl5aHFOzTVmboQgNW+\nMACb30gSjMGP6i4iHsuwYMpc7DJ1SyooqAL64Z+YN/ZJayHatJIxVx8GGPC2HW5g\nnj1LuJacK5VA2VtqtnRhVP0IEm4rKSgSzJz/534lB8/6RFejR0VnjzLZcMsa2TcQ\n7yWf6xAN3ijMWi8mxG2RL/2xZiH3txpdMLme3e5YyZ8sgDw04zJI8lKRkg8kN8Wo\nG8JQ/6hAzK9OhceoCnazE1ODXRiKa/jXvtfdiuzAb7Q3zFbnXNT2b7dshU0eY6iW\nGWBmOInBROfoAqt43gQIMC0gpBsQc9JlVN5s6CgPxhEAMsZI/akKm4qufGbvb767\nUSgzh6UPE+secLkgjZC/lVKmk7rD+7poJjZB5XzaGdKAxzpFTqw/gLXhfG17TVPA\nZwA2UFhnHVitP839RenrCxWORng2F8gDO/ElWTWtwCq7+c2UxEOxSiKfTOahEoFw\nLmOUFxn5iMSbdBEbkm54\n=cbgc\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jean-Pierre Rupp",
                "date": "2015-10-05T19:36:05",
                "message_text_only": "Sure,\n\nYou always have these alternatives, but the problem is that it starts to\nbecome harder to restore your wallet from the initial mnemonic if\nsomething goes wrong.\n\nSay you lose all your wallet information except for your mnemonic,\nextended public keys from all people you established multi-signature\naccounts with, and you know which arrangement you had with each of your\ncosigners (2-of-3, 2-of-2, etc.).  Your software will not have a hard\ntime rebuilding all accounts from information obtained from the public\nblockchain.  Adding a new dimension, here the i' derivation, will make\nthings harder.  You would need to know this piece of data too.\n\nAnother good thing about using the same derivation always is that you\ncan give every cosigner only that single piece of information, that\nsingle xpub, in order to establish multisig relationships.  There is no\nneed to use a different one per relationship.  This simplifies the\nworkflow for establishing new multi-signature accounts significantly.\n\nGreetings\n\nOn 05/10/15 13:32, Jonas Schnelli wrote:\n> What holds you back from using m/i'/45' where i' is your multisig\n> \"account\" number?\n> \n> Within your BIP45 wallet (lets assume Copay), you would not provide\n> the xpubkey at m/45', instead you would provide your xpubkey at m/i'/45'\n> .\n> \n> It's probably no longer pure BIP45.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/2cb6453b/attachment-0001.sig>"
            },
            {
                "author": "Matias Alejo Garcia",
                "date": "2015-10-05T18:04:44",
                "message_text_only": "On Mon, Oct 5, 2015 at 9:18 AM, Jean-Pierre Rupp <root at haskoin.com> wrote:\n>\n> Perhaps Pedro wants to also participate in a 2-of-2 cosigning\n> arrangement with a merchant that will deliver a laptop to him, so Pedro\n> provides this merchant with the same extended public key derived from\n> path m/45', and the merchant provides Pedro with his own:\n>\n> Pedro: xpub456...\n> ElCheapoPC: xpub987...\n>\n\n\nThanks for the explanation. OK, maybe that should be stated on BIP45, but\nit was never the idea that you reuse your xpub for different wallet, as I\nmention\non the original reply. The only implementation of BIP45 I am aware of\n(Copay),\nuse completely different xprivs for each wallet.\n\n\n\n>\n> On 05/10/15 07:57, Matias Alejo Garcia wrote:\n> >\n> > Hi,\n> >\n> > Sorry the late response. Going back to the original message:\n> >\n> >\n> >     > On 03/10/15 13:42, Jean-Pierre Rupp via bitcoin-dev wrote:\n> >     >> I have been reviewing BIP-45 today.  There is a privacy problem\n> >     with it\n> >     >> that should at least be mentioned in the document.\n> >     >>\n> >     >> When using the same extended public key for all multisig\n> >     activity, and\n> >     >> dealing with different cosigners in separate multisig accounts,\n> >     reuse of\n> >     >> the same set of public keys means that all cosigners from all\n> >     accounts\n> >     >> will be able to monitor multisig activity from every other\n> >     cosigner, in\n> >     >> every other account.\n> >\n> >\n> > I am not completely sure what you mean by 'account' and 'mutisig\n> > activity'. You seem to imply\n> > that the same set of extended public keys will be used in more that one\n> > wallet, which it is\n> > not required (and certainly not recommended) by BIP45.\n> >\n> > According to BIP45, a singing party, in order to generate a wallet\n> > address, needs the extended public keys of all the other parties, so\n> > each party will be able to see the transaction history of the wallet\n> > they are sharing, but if the party has other wallets with other copayers\n> > the xpub should be completely different.\n> >\n> > mat\u00edas\n> >\n> >\n> >\n> > --\n> > BitPay.com\n>\n\n\n\n-- \nBitPay.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/62a9eebf/attachment.html>"
            },
            {
                "author": "Jean-Pierre Rupp",
                "date": "2015-10-05T11:43:46",
                "message_text_only": "Let\u2019s do this.\n\nOn 04/10/15 18:24, Thomas Kerin wrote:\n> Regards amending BIP45 - BIP's are not amended after the fact, however\n> bad it may be\n> in retrospect. It might be best to write a BIP specifying a\n> \"pseudorandom & deterministic\n> path generation for HD/multi-signature accounts\"\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 473 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/037a6743/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "New BIP32 structure for P2SH multisig wallets ",
            "categories": [
                "bitcoin-dev",
                "Bitcoin-development",
                "BIP-45"
            ],
            "authors": [
                "Thomas Kerin",
                "Matias Alejo Garcia",
                "Jonas Schnelli",
                "Jean-Pierre Rupp"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 25005
        }
    },
    {
        "title": "[bitcoin-dev] CHECKSEQUENCEVERIFY - We need more usecases to motivate the change",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2015-10-03T14:30:56",
                "message_text_only": "BIP68 and BIP112 collectively define the CHECKSEQUENCEVERIFY semantics,\nwhich can be summarized conceptually as a relative CHECKLOCKTIMEVERIFY.\nHowever, CSV does define behavior for the previously undefined nSequence\nfield, which is the only \"free-form\" field we currently have in the\ntransaction serialization format that can be used for future upgrades -\nwe should justify this new behavior carefully as it limits our options\nin the future. Adding new fields to the serialization format is very\ndifficult, due to the very broad system-wide impact of the hard-fork\nrequired to do so.\n\nSo we need to make the case for two main things:\n\n1) We have applications that need a relative (instead of absolute CLTV)\n\n2) Additionally to RCLTV, we need to implement this via nSequence\n\nTo show we need RCLTV BIP112 provides the example \"Escrow with Timeout\",\nwhich is a need that was brought up by GreenAddress, among others; I\ndon't think we have an issue there, though getting more examples would\nbe a good thing. (the CLTV BIP describes seven use cases, and one\nadditional future use-case)\n\nHowever I don't think we've done a good job showing why we need to\nimplement this feature via nSequence. BIP68 describes the new nSequence\nsemantics, and gives the rational for them as being a\n\"Consensus-enforced tx replacement\" mechanism, with a bidirectional\npayment channel as an example of this in action. However, the\nbidirectional payment channel concept itself can be easily implemented\nwith CLTV alone. There is a small drawback in that the initial\ntransaction could be delayed, reducing the overall time the channel\nexists, but the protocol already assumes that transactions can be\nreliably confirmed within a day - significantly less than the proposed\n30 days duration of the channel. That example alone I don't think\njustifies a fairly complex soft-fork that limits future upgrades; we\nneed more justification.\n\nSo, what else can the community come up with? nSequence itself exists\nbecause of a failed feature that turned out to not work as intended;\nit'd be a shame to make that kind of mistake again, so let's get our\nsemantics and use-cases in the BIPs and documented before we deploy.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000ea95b4a24d0a510d4b5a98186f904dc16da07c41189d8b8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151003/f75f22e9/attachment.sig>"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-10-03T18:49:20",
                "message_text_only": "BIP68 allows per-input locktime, though I don't know how this could be \nuseful.\n\nBIP68 and BIP112 are mostly ready. If we try to reimplement \nrelative-locktime without using nSequence, we may need to wait for \nanother year for deployment.\n\nA compromise is to make BIP68 optional, indicated by a bit in tx \nnVersion, as I suggested earlier (1). This will allow deploying \nrelative-locktime without further delay while not permanently limiting \nfuture upgrades.\n\n(1) \nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-August/010043.html\n\nPeter Todd via bitcoin-dev \u65bc 2015-10-03 10:30 \u5beb\u5230:\n> BIP68 and BIP112 collectively define the CHECKSEQUENCEVERIFY semantics,\n> which can be summarized conceptually as a relative CHECKLOCKTIMEVERIFY.\n> However, CSV does define behavior for the previously undefined \n> nSequence\n> field, which is the only \"free-form\" field we currently have in the\n> transaction serialization format that can be used for future upgrades -\n> we should justify this new behavior carefully as it limits our options\n> in the future. Adding new fields to the serialization format is very\n> difficult, due to the very broad system-wide impact of the hard-fork\n> required to do so.\n> \n> So we need to make the case for two main things:\n> \n> 1) We have applications that need a relative (instead of absolute CLTV)\n> \n> 2) Additionally to RCLTV, we need to implement this via nSequence\n> \n> To show we need RCLTV BIP112 provides the example \"Escrow with \n> Timeout\",\n> which is a need that was brought up by GreenAddress, among others; I\n> don't think we have an issue there, though getting more examples would\n> be a good thing. (the CLTV BIP describes seven use cases, and one\n> additional future use-case)\n> \n> However I don't think we've done a good job showing why we need to\n> implement this feature via nSequence. BIP68 describes the new nSequence\n> semantics, and gives the rational for them as being a\n> \"Consensus-enforced tx replacement\" mechanism, with a bidirectional\n> payment channel as an example of this in action. However, the\n> bidirectional payment channel concept itself can be easily implemented\n> with CLTV alone. There is a small drawback in that the initial\n> transaction could be delayed, reducing the overall time the channel\n> exists, but the protocol already assumes that transactions can be\n> reliably confirmed within a day - significantly less than the proposed\n> 30 days duration of the channel. That example alone I don't think\n> justifies a fairly complex soft-fork that limits future upgrades; we\n> need more justification.\n> \n> So, what else can the community come up with? nSequence itself exists\n> because of a failed feature that turned out to not work as intended;\n> it'd be a shame to make that kind of mistake again, so let's get our\n> semantics and use-cases in the BIPs and documented before we deploy.\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Anthony Towns",
                "date": "2015-10-04T08:35:25",
                "message_text_only": "On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via bitcoin-dev wrote:\n> So we need to make the case for two main things:\n> 1) We have applications that need a relative (instead of absolute CLTV)\n> 2) Additionally to RCLTV, we need to implement this via nSequence\n\n> However I don't think we've done a good job showing why we need to\n> implement this feature via nSequence. BIP68 describes the new nSequence\n> semantics, and gives the rational for them as being a\n> \"Consensus-enforced tx replacement\" mechanism, with a bidirectional\n> payment channel as an example of this in action. However, the\n> bidirectional payment channel concept itself can be easily implemented\n> with CLTV alone.\n\nDo you mean \"with RCLTV alone\" here?\n\nRCLTV/OP_CSV is used in lightning commitment transactions to enforce a\ndelay between publishing the commitment transaction, and spending the\noutput -- that delay is needed so that the counterparty has time to\nprove the commitment was revoked and claim the outputs as a penalty.\n\nUsing absolute CLTV instead would mean that once the effective delay a\ncommitment transaction has decreases over time -- initially it will be\nlonger than desirable, causing unwanted delays in claiming funds when no\ncheating is going on; but over time it will become too short, which\nmeans there is not enough time to prove cheating (and the channel has to\nbe closed prematurely). You can trade those things off and pick\nsomething that works, but it's always going to be bad.\n\n> There is a small drawback in that the initial\n> transaction could be delayed, reducing the overall time the channel\n> exists, but the protocol already assumes that transactions can be\n> reliably confirmed within a day - significantly less than the proposed\n> 30 days duration of the channel.\n\nCompared to using a CLTV with 30 days duration, With RCLTV a channel\ncould be available for years (ie 20x longer), but in the case of problems\nfunds could be reclaimed within hours or days (ie 30x faster).\n\nBut that's all about RCLTV vs CLTV, not about RCLTV vs nSequence/OP_CSV.\nie, it needs BIP 112 (OP_CSV) but not necessarily BIP 68 (nSequence\nrelative locktime), if they could be disentangled.\n\nYou could do all that with \"<n> OP_CHECK_HEIGHT_DELTA_VERIFY\"\nthat ignores nSequence, and directly compares the height of the current\nblock versus the input tx's block (or the diff of their timestamps?)\nthough, I think?\n\nI think the disadvantage is that (a) you have to look into the input\ntransaction's block height when processing the script; and (b) you don't\nhave an easy lookup to check whether the transaction can be included in\nthe next block.\n\nYou could maybe avoid (b) by using locktime though. Have \"<n>\nOP_CHECK_RELATIVE_LOCKTIME_VERIFY\" compare the transactions locktime\nagainst the input's block height or time; if the locktime is 0 or too low,\nthe transaction is invalid. (So if nLockTime is in blockheight, you can\nonly spend inputs with blockheight based OP_CRLTV tests; and if it's in\nblocktime, you can only spend inputs with blocktime based OP_CRLTV. \"n\"\ndoes need to encode whether it's time/block height though).\n\nThat way, when you see a txn:\n\n - run the script. if you see <n> RCLTV, then\n    + if the tx's locktime isn't set, it's invalid; drop it\n    + if the input txn is unconfirmed, it's invalid; try again later\n    + workout \"locktime - n\" if that's >= the input tx's block\n      height/time, it's good; keep it in mempool, forward it, etc\n\n - if you're mining, include the tx when locktime hits, just like you\n   would any other valid tx with a locktime\n\nI think the use cases for BIP68 (nSequence) are of the form:\n\n 1) published input; here's a signed tx that spends it to you, usable\n    after a delay. might as well just use absolute locktime here, though.\n\n 2) here's an unpublished input, you can build your own transaction to\n    spend it, just not immediately after it's published. BIP112 is\n    required, and OP_RCLTV as defined above works fine, just include it\n    in the published input's script.\n\n 3) here's an unpublished input, and a signed transaction spending it,\n    that you can use to spend it after a delay. BIP68 is enough; but\n    OP_RCLTV in the second transaction works here. however without\n    normalised tx ids, the input could be malleated before publication,\n    so maybe this use case isn't actually important anyway.\n\nSo I think OP_CRLTV alone works fine for them too...\n\n(Does that make sense, or am I missing something obvious?)\n\nCheers,\naj"
            },
            {
                "author": "s7r",
                "date": "2015-10-04T12:04:16",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nHi aj,\n\nOn 10/4/2015 11:35 AM, Anthony Towns via bitcoin-dev wrote:\n> On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via\n> bitcoin-dev wrote:\n>> So we need to make the case for two main things: 1) We have\n>> applications that need a relative (instead of absolute CLTV) 2)\n>> Additionally to RCLTV, we need to implement this via nSequence\n> \n>> However I don't think we've done a good job showing why we need\n>> to implement this feature via nSequence. BIP68 describes the new\n>> nSequence semantics, and gives the rational for them as being a \n>> \"Consensus-enforced tx replacement\" mechanism, with a\n>> bidirectional payment channel as an example of this in action.\n>> However, the bidirectional payment channel concept itself can be\n>> easily implemented with CLTV alone.\n> \n> Do you mean \"with RCLTV alone\" here?\n> \n> RCLTV/OP_CSV is used in lightning commitment transactions to\n> enforce a delay between publishing the commitment transaction, and\n> spending the output -- that delay is needed so that the\n> counterparty has time to prove the commitment was revoked and claim\n> the outputs as a penalty.\n> \n\nI partially understand - can you please provide a simple Alice and Bob\nexample here with the exact scenario? Thanks. Why is there a need to\n'delay between publishing the commitment transaction and spending the\noutput'? If the absolute CLTV script reached its maturity it means\nsomething went wrong (e.g. counterparty cheated or got hit by a bus)\nso what is with the delay time needed for proving that the commitment\nwas revoked? I assume an absolute CLTV script reaching its maturity\n(nLockTime) is the proof itself that the commitment was revoked - but\nmaybe I'm missing something obvious, sorry if this is the case.\n\n> Using absolute CLTV instead would mean that once the effective\n> delay a commitment transaction has decreases over time -- initially\n> it will be longer than desirable, causing unwanted delays in\n> claiming funds when no cheating is going on; but over time it will\n> become too short, which means there is not enough time to prove\n> cheating (and the channel has to be closed prematurely). You can\n> trade those things off and pick something that works, but it's\n> always going to be bad.\n> \nI agree, I see the logic here. Absolute CLTV is not necessary inferior\nto RCLTV - there are use cases and use cases. For example, you can\navoid unnecessary waiting until the nLockTime expires if you use\nabsolute CLTV in combination with P2SH (2/2). Again, it always depends\non the use case - it might be a good solution, it might not be such a\ngood solution, but even absolute CLTV alone clearly fixes a lot of\nthings and takes smart contracts to the next level.\n\n>> There is a small drawback in that the initial transaction could\n>> be delayed, reducing the overall time the channel exists, but the\n>> protocol already assumes that transactions can be reliably\n>> confirmed within a day - significantly less than the proposed 30\n>> days duration of the channel.\n> \n> Compared to using a CLTV with 30 days duration, With RCLTV a\n> channel could be available for years (ie 20x longer), but in the\n> case of problems funds could be reclaimed within hours or days (ie\n> 30x faster).\n> \nIndeed. I for one _need_ CLTV / RCLTV in my day to day use cases, it\nwould be neat to have both, but if I can only have (for the time\nbeing) absolute CLTV so be it - it's still a lot better.\n\n> But that's all about RCLTV vs CLTV, not about RCLTV vs\n> nSequence/OP_CSV. ie, it needs BIP 112 (OP_CSV) but not necessarily\n> BIP 68 (nSequence relative locktime), if they could be\n> disentangled.\n> \n> You could do all that with \"<n> OP_CHECK_HEIGHT_DELTA_VERIFY\" that\n> ignores nSequence, and directly compares the height of the current \n> block versus the input tx's block (or the diff of their\n> timestamps?) though, I think?\n> \n> I think the disadvantage is that (a) you have to look into the\n> input transaction's block height when processing the script; and\n> (b) you don't have an easy lookup to check whether the transaction\n> can be included in the next block.\n> \n> You could maybe avoid (b) by using locktime though. Have \"<n> \n> OP_CHECK_RELATIVE_LOCKTIME_VERIFY\" compare the transactions\n> locktime against the input's block height or time; if the locktime\n> is 0 or too low, the transaction is invalid. (So if nLockTime is in\n> blockheight, you can only spend inputs with blockheight based\n> OP_CRLTV tests; and if it's in blocktime, you can only spend inputs\n> with blocktime based OP_CRLTV. \"n\" does need to encode whether it's\n> time/block height though).\n> \n> That way, when you see a txn:\n> \n> - run the script. if you see <n> RCLTV, then + if the tx's locktime\n> isn't set, it's invalid; drop it + if the input txn is unconfirmed,\n> it's invalid; try again later + workout \"locktime - n\" if that's >=\n> the input tx's block height/time, it's good; keep it in mempool,\n> forward it, etc\n> \n> - if you're mining, include the tx when locktime hits, just like\n> you would any other valid tx with a locktime\n> \n> I think the use cases for BIP68 (nSequence) are of the form:\n> \n> 1) published input; here's a signed tx that spends it to you,\n> usable after a delay. might as well just use absolute locktime\n> here, though.\n> \n> 2) here's an unpublished input, you can build your own transaction\n> to spend it, just not immediately after it's published. BIP112 is \n> required, and OP_RCLTV as defined above works fine, just include\n> it in the published input's script.\n> \n> 3) here's an unpublished input, and a signed transaction spending\n> it, that you can use to spend it after a delay. BIP68 is enough;\n> but OP_RCLTV in the second transaction works here. however without \n> normalised tx ids, the input could be malleated before\n> publication, so maybe this use case isn't actually important\n> anyway.\n> \n> So I think OP_CRLTV alone works fine for them too...\n> \n> (Does that make sense, or am I missing something obvious?)\n> \n> Cheers, aj\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBCAAGBQJWERXAAAoJEIN/pSyBJlsRypMH/2Q+jVRf4hWtPr9cs/06pXM9\nmKHd2OPDEJO8HjSe+cIMCxOz76EZxXglUEkK4YV/huP0Tp0bcMp6EJxsZVD9L78k\ndugyh2747ddL6aqRmt0ducTEfIC/Q4BxPA2HRQZkvyyIUQv2Tyo780bC0y8BwUpb\nj/BQjFZwk4QgqkTlf5lbCgn85alOKHki2El04iALHc27pUiDWKQPPeNOy6po6mmD\n/csvh4XOTQwCVy384ljuFBp0+QN7Z/zx4E8i6GqV2BmfNcveTG6Fc5KrHr2Ud4Th\nRD8k6n9mLaPs6ufhVkgUiUqPzQsJ+ns+mm7OEUdd645Kxqxg3Tu1u32DgdpRcHk=\n=U0N6\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Alex Morcos",
                "date": "2015-10-05T22:03:48",
                "message_text_only": "Peter,\n\nYour concern about whether this is the best way to use the nSequence field;\nwould that be addressed by providing more high order bits to signal\ndifferent uses of the field?  At a certain point we're really not limiting\nthe future at all and there is something to be said for not letting the\nperfect be the enemy of the good.  I think it would be nice to make forward\nprogress on BIPS 68,112, and 113 and move towards getting them finalized\nand implemented.  (Although I do suspect they aren't quite ready to go out\nwith CLTV)\n\nWhat is the reasoning for having single second resolution on the time based\nsequence number locks?  Might it not make some sense to reduce that\nresolution and leave more low order bits as well?\n\nAlex\n\nOn Sun, Oct 4, 2015 at 8:04 AM, s7r via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> Hi aj,\n>\n> On 10/4/2015 11:35 AM, Anthony Towns via bitcoin-dev wrote:\n> > On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via\n> > bitcoin-dev wrote:\n> >> So we need to make the case for two main things: 1) We have\n> >> applications that need a relative (instead of absolute CLTV) 2)\n> >> Additionally to RCLTV, we need to implement this via nSequence\n> >\n> >> However I don't think we've done a good job showing why we need\n> >> to implement this feature via nSequence. BIP68 describes the new\n> >> nSequence semantics, and gives the rational for them as being a\n> >> \"Consensus-enforced tx replacement\" mechanism, with a\n> >> bidirectional payment channel as an example of this in action.\n> >> However, the bidirectional payment channel concept itself can be\n> >> easily implemented with CLTV alone.\n> >\n> > Do you mean \"with RCLTV alone\" here?\n> >\n> > RCLTV/OP_CSV is used in lightning commitment transactions to\n> > enforce a delay between publishing the commitment transaction, and\n> > spending the output -- that delay is needed so that the\n> > counterparty has time to prove the commitment was revoked and claim\n> > the outputs as a penalty.\n> >\n>\n> I partially understand - can you please provide a simple Alice and Bob\n> example here with the exact scenario? Thanks. Why is there a need to\n> 'delay between publishing the commitment transaction and spending the\n> output'? If the absolute CLTV script reached its maturity it means\n> something went wrong (e.g. counterparty cheated or got hit by a bus)\n> so what is with the delay time needed for proving that the commitment\n> was revoked? I assume an absolute CLTV script reaching its maturity\n> (nLockTime) is the proof itself that the commitment was revoked - but\n> maybe I'm missing something obvious, sorry if this is the case.\n>\n> > Using absolute CLTV instead would mean that once the effective\n> > delay a commitment transaction has decreases over time -- initially\n> > it will be longer than desirable, causing unwanted delays in\n> > claiming funds when no cheating is going on; but over time it will\n> > become too short, which means there is not enough time to prove\n> > cheating (and the channel has to be closed prematurely). You can\n> > trade those things off and pick something that works, but it's\n> > always going to be bad.\n> >\n> I agree, I see the logic here. Absolute CLTV is not necessary inferior\n> to RCLTV - there are use cases and use cases. For example, you can\n> avoid unnecessary waiting until the nLockTime expires if you use\n> absolute CLTV in combination with P2SH (2/2). Again, it always depends\n> on the use case - it might be a good solution, it might not be such a\n> good solution, but even absolute CLTV alone clearly fixes a lot of\n> things and takes smart contracts to the next level.\n>\n> >> There is a small drawback in that the initial transaction could\n> >> be delayed, reducing the overall time the channel exists, but the\n> >> protocol already assumes that transactions can be reliably\n> >> confirmed within a day - significantly less than the proposed 30\n> >> days duration of the channel.\n> >\n> > Compared to using a CLTV with 30 days duration, With RCLTV a\n> > channel could be available for years (ie 20x longer), but in the\n> > case of problems funds could be reclaimed within hours or days (ie\n> > 30x faster).\n> >\n> Indeed. I for one _need_ CLTV / RCLTV in my day to day use cases, it\n> would be neat to have both, but if I can only have (for the time\n> being) absolute CLTV so be it - it's still a lot better.\n>\n> > But that's all about RCLTV vs CLTV, not about RCLTV vs\n> > nSequence/OP_CSV. ie, it needs BIP 112 (OP_CSV) but not necessarily\n> > BIP 68 (nSequence relative locktime), if they could be\n> > disentangled.\n> >\n> > You could do all that with \"<n> OP_CHECK_HEIGHT_DELTA_VERIFY\" that\n> > ignores nSequence, and directly compares the height of the current\n> > block versus the input tx's block (or the diff of their\n> > timestamps?) though, I think?\n> >\n> > I think the disadvantage is that (a) you have to look into the\n> > input transaction's block height when processing the script; and\n> > (b) you don't have an easy lookup to check whether the transaction\n> > can be included in the next block.\n> >\n> > You could maybe avoid (b) by using locktime though. Have \"<n>\n> > OP_CHECK_RELATIVE_LOCKTIME_VERIFY\" compare the transactions\n> > locktime against the input's block height or time; if the locktime\n> > is 0 or too low, the transaction is invalid. (So if nLockTime is in\n> > blockheight, you can only spend inputs with blockheight based\n> > OP_CRLTV tests; and if it's in blocktime, you can only spend inputs\n> > with blocktime based OP_CRLTV. \"n\" does need to encode whether it's\n> > time/block height though).\n> >\n> > That way, when you see a txn:\n> >\n> > - run the script. if you see <n> RCLTV, then + if the tx's locktime\n> > isn't set, it's invalid; drop it + if the input txn is unconfirmed,\n> > it's invalid; try again later + workout \"locktime - n\" if that's >=\n> > the input tx's block height/time, it's good; keep it in mempool,\n> > forward it, etc\n> >\n> > - if you're mining, include the tx when locktime hits, just like\n> > you would any other valid tx with a locktime\n> >\n> > I think the use cases for BIP68 (nSequence) are of the form:\n> >\n> > 1) published input; here's a signed tx that spends it to you,\n> > usable after a delay. might as well just use absolute locktime\n> > here, though.\n> >\n> > 2) here's an unpublished input, you can build your own transaction\n> > to spend it, just not immediately after it's published. BIP112 is\n> > required, and OP_RCLTV as defined above works fine, just include\n> > it in the published input's script.\n> >\n> > 3) here's an unpublished input, and a signed transaction spending\n> > it, that you can use to spend it after a delay. BIP68 is enough;\n> > but OP_RCLTV in the second transaction works here. however without\n> > normalised tx ids, the input could be malleated before\n> > publication, so maybe this use case isn't actually important\n> > anyway.\n> >\n> > So I think OP_CRLTV alone works fine for them too...\n> >\n> > (Does that make sense, or am I missing something obvious?)\n> >\n> > Cheers, aj\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v2.0.22 (MingW32)\n>\n> iQEcBAEBCAAGBQJWERXAAAoJEIN/pSyBJlsRypMH/2Q+jVRf4hWtPr9cs/06pXM9\n> mKHd2OPDEJO8HjSe+cIMCxOz76EZxXglUEkK4YV/huP0Tp0bcMp6EJxsZVD9L78k\n> dugyh2747ddL6aqRmt0ducTEfIC/Q4BxPA2HRQZkvyyIUQv2Tyo780bC0y8BwUpb\n> j/BQjFZwk4QgqkTlf5lbCgn85alOKHki2El04iALHc27pUiDWKQPPeNOy6po6mmD\n> /csvh4XOTQwCVy384ljuFBp0+QN7Z/zx4E8i6GqV2BmfNcveTG6Fc5KrHr2Ud4Th\n> RD8k6n9mLaPs6ufhVkgUiUqPzQsJ+ns+mm7OEUdd645Kxqxg3Tu1u32DgdpRcHk=\n> =U0N6\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/ee853e6f/attachment-0001.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-10-06T00:19:06",
                "message_text_only": "Alex, decreasing granularity is a soft-fork, increasing is a hard-fork.\nTherefore I've kept the highest possible precision (1 second, 1 block) with\nthe expectation that at some point in the future if we need more low-order\nbits we can soft-fork them to other purposes, we can decrease granularity\nat that time.\n\nOn Mon, Oct 5, 2015 at 3:03 PM, Alex Morcos via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Peter,\n>\n> Your concern about whether this is the best way to use the nSequence\n> field; would that be addressed by providing more high order bits to signal\n> different uses of the field?  At a certain point we're really not limiting\n> the future at all and there is something to be said for not letting the\n> perfect be the enemy of the good.  I think it would be nice to make forward\n> progress on BIPS 68,112, and 113 and move towards getting them finalized\n> and implemented.  (Although I do suspect they aren't quite ready to go out\n> with CLTV)\n>\n> What is the reasoning for having single second resolution on the time\n> based sequence number locks?  Might it not make some sense to reduce that\n> resolution and leave more low order bits as well?\n>\n> Alex\n>\n> On Sun, Oct 4, 2015 at 8:04 AM, s7r via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA256\n>>\n>> Hi aj,\n>>\n>> On 10/4/2015 11:35 AM, Anthony Towns via bitcoin-dev wrote:\n>> > On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via\n>> > bitcoin-dev wrote:\n>> >> So we need to make the case for two main things: 1) We have\n>> >> applications that need a relative (instead of absolute CLTV) 2)\n>> >> Additionally to RCLTV, we need to implement this via nSequence\n>> >\n>> >> However I don't think we've done a good job showing why we need\n>> >> to implement this feature via nSequence. BIP68 describes the new\n>> >> nSequence semantics, and gives the rational for them as being a\n>> >> \"Consensus-enforced tx replacement\" mechanism, with a\n>> >> bidirectional payment channel as an example of this in action.\n>> >> However, the bidirectional payment channel concept itself can be\n>> >> easily implemented with CLTV alone.\n>> >\n>> > Do you mean \"with RCLTV alone\" here?\n>> >\n>> > RCLTV/OP_CSV is used in lightning commitment transactions to\n>> > enforce a delay between publishing the commitment transaction, and\n>> > spending the output -- that delay is needed so that the\n>> > counterparty has time to prove the commitment was revoked and claim\n>> > the outputs as a penalty.\n>> >\n>>\n>> I partially understand - can you please provide a simple Alice and Bob\n>> example here with the exact scenario? Thanks. Why is there a need to\n>> 'delay between publishing the commitment transaction and spending the\n>> output'? If the absolute CLTV script reached its maturity it means\n>> something went wrong (e.g. counterparty cheated or got hit by a bus)\n>> so what is with the delay time needed for proving that the commitment\n>> was revoked? I assume an absolute CLTV script reaching its maturity\n>> (nLockTime) is the proof itself that the commitment was revoked - but\n>> maybe I'm missing something obvious, sorry if this is the case.\n>>\n>> > Using absolute CLTV instead would mean that once the effective\n>> > delay a commitment transaction has decreases over time -- initially\n>> > it will be longer than desirable, causing unwanted delays in\n>> > claiming funds when no cheating is going on; but over time it will\n>> > become too short, which means there is not enough time to prove\n>> > cheating (and the channel has to be closed prematurely). You can\n>> > trade those things off and pick something that works, but it's\n>> > always going to be bad.\n>> >\n>> I agree, I see the logic here. Absolute CLTV is not necessary inferior\n>> to RCLTV - there are use cases and use cases. For example, you can\n>> avoid unnecessary waiting until the nLockTime expires if you use\n>> absolute CLTV in combination with P2SH (2/2). Again, it always depends\n>> on the use case - it might be a good solution, it might not be such a\n>> good solution, but even absolute CLTV alone clearly fixes a lot of\n>> things and takes smart contracts to the next level.\n>>\n>> >> There is a small drawback in that the initial transaction could\n>> >> be delayed, reducing the overall time the channel exists, but the\n>> >> protocol already assumes that transactions can be reliably\n>> >> confirmed within a day - significantly less than the proposed 30\n>> >> days duration of the channel.\n>> >\n>> > Compared to using a CLTV with 30 days duration, With RCLTV a\n>> > channel could be available for years (ie 20x longer), but in the\n>> > case of problems funds could be reclaimed within hours or days (ie\n>> > 30x faster).\n>> >\n>> Indeed. I for one _need_ CLTV / RCLTV in my day to day use cases, it\n>> would be neat to have both, but if I can only have (for the time\n>> being) absolute CLTV so be it - it's still a lot better.\n>>\n>> > But that's all about RCLTV vs CLTV, not about RCLTV vs\n>> > nSequence/OP_CSV. ie, it needs BIP 112 (OP_CSV) but not necessarily\n>> > BIP 68 (nSequence relative locktime), if they could be\n>> > disentangled.\n>> >\n>> > You could do all that with \"<n> OP_CHECK_HEIGHT_DELTA_VERIFY\" that\n>> > ignores nSequence, and directly compares the height of the current\n>> > block versus the input tx's block (or the diff of their\n>> > timestamps?) though, I think?\n>> >\n>> > I think the disadvantage is that (a) you have to look into the\n>> > input transaction's block height when processing the script; and\n>> > (b) you don't have an easy lookup to check whether the transaction\n>> > can be included in the next block.\n>> >\n>> > You could maybe avoid (b) by using locktime though. Have \"<n>\n>> > OP_CHECK_RELATIVE_LOCKTIME_VERIFY\" compare the transactions\n>> > locktime against the input's block height or time; if the locktime\n>> > is 0 or too low, the transaction is invalid. (So if nLockTime is in\n>> > blockheight, you can only spend inputs with blockheight based\n>> > OP_CRLTV tests; and if it's in blocktime, you can only spend inputs\n>> > with blocktime based OP_CRLTV. \"n\" does need to encode whether it's\n>> > time/block height though).\n>> >\n>> > That way, when you see a txn:\n>> >\n>> > - run the script. if you see <n> RCLTV, then + if the tx's locktime\n>> > isn't set, it's invalid; drop it + if the input txn is unconfirmed,\n>> > it's invalid; try again later + workout \"locktime - n\" if that's >=\n>> > the input tx's block height/time, it's good; keep it in mempool,\n>> > forward it, etc\n>> >\n>> > - if you're mining, include the tx when locktime hits, just like\n>> > you would any other valid tx with a locktime\n>> >\n>> > I think the use cases for BIP68 (nSequence) are of the form:\n>> >\n>> > 1) published input; here's a signed tx that spends it to you,\n>> > usable after a delay. might as well just use absolute locktime\n>> > here, though.\n>> >\n>> > 2) here's an unpublished input, you can build your own transaction\n>> > to spend it, just not immediately after it's published. BIP112 is\n>> > required, and OP_RCLTV as defined above works fine, just include\n>> > it in the published input's script.\n>> >\n>> > 3) here's an unpublished input, and a signed transaction spending\n>> > it, that you can use to spend it after a delay. BIP68 is enough;\n>> > but OP_RCLTV in the second transaction works here. however without\n>> > normalised tx ids, the input could be malleated before\n>> > publication, so maybe this use case isn't actually important\n>> > anyway.\n>> >\n>> > So I think OP_CRLTV alone works fine for them too...\n>> >\n>> > (Does that make sense, or am I missing something obvious?)\n>> >\n>> > Cheers, aj\n>> -----BEGIN PGP SIGNATURE-----\n>> Version: GnuPG v2.0.22 (MingW32)\n>>\n>> iQEcBAEBCAAGBQJWERXAAAoJEIN/pSyBJlsRypMH/2Q+jVRf4hWtPr9cs/06pXM9\n>> mKHd2OPDEJO8HjSe+cIMCxOz76EZxXglUEkK4YV/huP0Tp0bcMp6EJxsZVD9L78k\n>> dugyh2747ddL6aqRmt0ducTEfIC/Q4BxPA2HRQZkvyyIUQv2Tyo780bC0y8BwUpb\n>> j/BQjFZwk4QgqkTlf5lbCgn85alOKHki2El04iALHc27pUiDWKQPPeNOy6po6mmD\n>> /csvh4XOTQwCVy384ljuFBp0+QN7Z/zx4E8i6GqV2BmfNcveTG6Fc5KrHr2Ud4Th\n>> RD8k6n9mLaPs6ufhVkgUiUqPzQsJ+ns+mm7OEUdd645Kxqxg3Tu1u32DgdpRcHk=\n>> =U0N6\n>> -----END PGP SIGNATURE-----\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/24d01ebc/attachment-0001.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-10-06T11:09:18",
                "message_text_only": "On Mon, Oct 05, 2015 at 05:19:06PM -0700, Mark Friedenbach via bitcoin-dev wrote:\n> Alex, decreasing granularity is a soft-fork, increasing is a hard-fork.\n> Therefore I've kept the highest possible precision (1 second, 1 block) with\n> the expectation that at some point in the future if we need more low-order\n> bits we can soft-fork them to other purposes, we can decrease granularity\n> at that time.\n\nYou should write that up in the BIP, along with a description of how\nexactly that would go; I suspect the most obvious way of dong that\nupgrade - just increase precision for everyone - would break\ncompatbility too much to be practical.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010734953ce486a820b6f7907e879b1b6e30fccf603098bef\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/54e180b3/attachment-0001.sig>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-10-06T00:28:57",
                "message_text_only": "Regarding the keeping nSequence for future expansion I believe this has\nbeen covered in the specification section of BIP68[1]: For transaction\nversion >= 2, if the MSB of nSequence is unset, the field is interpreted as\nrelative locktime, otherwise no special consensus meaning is attached (and\nthus free for repurposing in the future). Effectively if the MSB is set,\nthe remaining 31 bits (out of 32) are free.\n\nAlso please note the BIP112 text has been updated with several more\nusecases.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/47ce0e5c/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-10-06T01:58:49",
                "message_text_only": "Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n> However I don't think we've done a good job showing why we need to\n> implement this feature via nSequence.\n\nIt could be implemented in other ways, but nSequence is the neatest and\nmost straightforward I've seen.\n\n- I'm not aware of any other (even vague) proposal for its use?  Enlighten?\n- BIP68 reserves much of it for future use already.\n\nIf we apply infinite caution we could never use nSequence, as there\nmight be a better use tommorrow.\n\nCheers,\nRusty."
            },
            {
                "author": "Peter Todd",
                "date": "2015-10-08T17:41:20",
                "message_text_only": "On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:\n> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> writes:\n> > However I don't think we've done a good job showing why we need to\n> > implement this feature via nSequence.\n> \n> It could be implemented in other ways, but nSequence is the neatest and\n> most straightforward I've seen.\n> \n> - I'm not aware of any other (even vague) proposal for its use?  Enlighten?\n\nThere's three that immediately come to mind:\n\nGregory Maxwell has proposed it as a way of discouraging miners from\nreorging chains, by including some of the low-order bits of a previous\nblock header in nSequence.\n\nA few people have proposed implementing proof-of-stake blocksize voting\nwith nSequence.\n\n> - BIP68 reserves much of it for future use already.\n\nWell, a few low-order bits, if you want to use RCLTV functionality; pure\nRCLTV would save a lot more bits.\n\n> If we apply infinite caution we could never use nSequence, as there\n> might be a better use tommorrow.\n\nIndeed! But lets make sure we have a good argument in the BIP.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000de60f807a5fd32057510e7715038ecbc888052861b6a5c1\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/f6069c67/attachment.sig>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-10-09T01:38:06",
                "message_text_only": "Peter Todd <pete at petertodd.org> writes:\n> On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:\n>> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n>> writes:\n>> > However I don't think we've done a good job showing why we need to\n>> > implement this feature via nSequence.\n>> \n>> It could be implemented in other ways, but nSequence is the neatest and\n>> most straightforward I've seen.\n>> \n>> - I'm not aware of any other (even vague) proposal for its use?  Enlighten?\n>\n> There's three that immediately come to mind:\n>\n> Gregory Maxwell has proposed it as a way of discouraging miners from\n> reorging chains, by including some of the low-order bits of a previous\n> block header in nSequence.\n>\n> A few people have proposed implementing proof-of-stake blocksize voting\n> with nSequence.\n\nExcellent, thanks!  It's good to have such ideas as a compass.  PoS\nvoting seems like it won't be a problem in 5 bits.\n\nThe \"prevbits\" idea would want more bits; naively 64 would be good, but\nI think there are some tricks we can use to make 32 work OK.  We would\nhave to then split between nLocktime (if available) and multiple\nnSequence fields, and it would weaken it for some txs.\n\nThere is one easy solution: change the BIP wording from:\n\n-For transactions with an nVersion of 2 or greater,\n+For transactions with an nVersion of 2, \n\nAnd on every tx bump, we decide whether to keep this scheme (mempool\nwould enforce it always).\n\nCheers,\nRusty."
            },
            {
                "author": "Alex Morcos",
                "date": "2015-10-15T13:47:33",
                "message_text_only": "Mark,\n\nYou seemed interested in changing BIP 68 to use 16 bits for sequence number\nin both the block and time versions, making time based sequence numbers\nhave a resolution of 512 seconds.\n\nI'm in favor of this approach because it leaves aside 14 bits for further\nsoft forks within the semantics of BIP 68.\n\nIt would be nice to know if you're planning this change, and perhaps people\ncan hold off on review until things are finalized.\n\nI'd cast my \"vote\" against BIP 68 without this change, but am also open to\nbeing convinced otherwise.\n\nWhat are other peoples opinions on this?\n\nOn Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Peter Todd <pete at petertodd.org> writes:\n> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:\n> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> >> writes:\n> >> > However I don't think we've done a good job showing why we need to\n> >> > implement this feature via nSequence.\n> >>\n> >> It could be implemented in other ways, but nSequence is the neatest and\n> >> most straightforward I've seen.\n> >>\n> >> - I'm not aware of any other (even vague) proposal for its use?\n> Enlighten?\n> >\n> > There's three that immediately come to mind:\n> >\n> > Gregory Maxwell has proposed it as a way of discouraging miners from\n> > reorging chains, by including some of the low-order bits of a previous\n> > block header in nSequence.\n> >\n> > A few people have proposed implementing proof-of-stake blocksize voting\n> > with nSequence.\n>\n> Excellent, thanks!  It's good to have such ideas as a compass.  PoS\n> voting seems like it won't be a problem in 5 bits.\n>\n> The \"prevbits\" idea would want more bits; naively 64 would be good, but\n> I think there are some tricks we can use to make 32 work OK.  We would\n> have to then split between nLocktime (if available) and multiple\n> nSequence fields, and it would weaken it for some txs.\n>\n> There is one easy solution: change the BIP wording from:\n>\n> -For transactions with an nVersion of 2 or greater,\n> +For transactions with an nVersion of 2,\n>\n> And on every tx bump, we decide whether to keep this scheme (mempool\n> would enforce it always).\n>\n> Cheers,\n> Rusty.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/11660e06/attachment.html>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-10-15T16:27:43",
                "message_text_only": "Alex,\n\nI am sorry for not communicating more clearly. Mark and I discussed your\nconcerns from the last meeting and he made the change. The BIP text still\nneeds to be updated, but the discussed change was added to the PR, albeit\nsquashed making it more non-obvious. BIP68 now explicitly uses 16 bits with\na bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK\nand SEQUENCE_LOCKTIME_GRANULARITY in the PR\nhttps://github.com/bitcoin/bitcoin/pull/6312.\n\n    /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n     * applied to extract that lock-time from the sequence field. */\n    static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n\n    /* In order to use the same number of bits to encode roughly the\n     * same wall-clock duration, and because blocks are naturally\n     * limited to occur every 600s on average, the minimum granularity\n     * for time-based relative lock-time is fixed at 512 seconds.\n     * Converting from CTxIn::nSequence to seconds is performed by\n     * multiplying by 512 = 2^9, or equivalently shifting up by\n     * 9 bits. */\n    static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n\nI am also much happier with this last tightening up of the specification\nbecause it removes ambiguity. 512s granularity makes sense within the\ncontext of the 10 minute block target.\n\nThank you for spending so much time carefully considering this BIP and\nreference implementation and please let me know if there there are any\nremaining nits so we can get those addressed.\n\n\n\n\n\nOn Thu, Oct 15, 2015 at 2:47 PM, Alex Morcos via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Mark,\n>\n> You seemed interested in changing BIP 68 to use 16 bits for sequence\n> number in both the block and time versions, making time based sequence\n> numbers have a resolution of 512 seconds.\n>\n> I'm in favor of this approach because it leaves aside 14 bits for further\n> soft forks within the semantics of BIP 68.\n>\n> It would be nice to know if you're planning this change, and perhaps\n> people can hold off on review until things are finalized.\n>\n> I'd cast my \"vote\" against BIP 68 without this change, but am also open to\n> being convinced otherwise.\n>\n> What are other peoples opinions on this?\n>\n> On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Peter Todd <pete at petertodd.org> writes:\n>> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:\n>> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n>> >> writes:\n>> >> > However I don't think we've done a good job showing why we need to\n>> >> > implement this feature via nSequence.\n>> >>\n>> >> It could be implemented in other ways, but nSequence is the neatest and\n>> >> most straightforward I've seen.\n>> >>\n>> >> - I'm not aware of any other (even vague) proposal for its use?\n>> Enlighten?\n>> >\n>> > There's three that immediately come to mind:\n>> >\n>> > Gregory Maxwell has proposed it as a way of discouraging miners from\n>> > reorging chains, by including some of the low-order bits of a previous\n>> > block header in nSequence.\n>> >\n>> > A few people have proposed implementing proof-of-stake blocksize voting\n>> > with nSequence.\n>>\n>> Excellent, thanks!  It's good to have such ideas as a compass.  PoS\n>> voting seems like it won't be a problem in 5 bits.\n>>\n>> The \"prevbits\" idea would want more bits; naively 64 would be good, but\n>> I think there are some tricks we can use to make 32 work OK.  We would\n>> have to then split between nLocktime (if available) and multiple\n>> nSequence fields, and it would weaken it for some txs.\n>>\n>> There is one easy solution: change the BIP wording from:\n>>\n>> -For transactions with an nVersion of 2 or greater,\n>> +For transactions with an nVersion of 2,\n>>\n>> And on every tx bump, we decide whether to keep this scheme (mempool\n>> would enforce it always).\n>>\n>> Cheers,\n>> Rusty.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/04dcdf41/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-10-15T16:37:13",
                "message_text_only": "Does that pre-judge that block interval would never change from\n10mins?  Eg say with IBLT or fountain codes etc and security arguments\nfor the current limitations of them are found, such that orphan rates\ncan remain low in a decentralised way with 1min blocks, then the\nlocktime granularity would be coarse relative to the block interval\n(with 512s locktime granularity.\n\nAdam\n\nOn 15 October 2015 at 18:27, Btc Drak via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Alex,\n>\n> I am sorry for not communicating more clearly. Mark and I discussed your\n> concerns from the last meeting and he made the change. The BIP text still\n> needs to be updated, but the discussed change was added to the PR, albeit\n> squashed making it more non-obvious. BIP68 now explicitly uses 16 bits with\n> a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK and\n> SEQUENCE_LOCKTIME_GRANULARITY in the PR\n> https://github.com/bitcoin/bitcoin/pull/6312.\n>\n>     /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n>      * applied to extract that lock-time from the sequence field. */\n>     static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n>\n>     /* In order to use the same number of bits to encode roughly the\n>      * same wall-clock duration, and because blocks are naturally\n>      * limited to occur every 600s on average, the minimum granularity\n>      * for time-based relative lock-time is fixed at 512 seconds.\n>      * Converting from CTxIn::nSequence to seconds is performed by\n>      * multiplying by 512 = 2^9, or equivalently shifting up by\n>      * 9 bits. */\n>     static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n>\n> I am also much happier with this last tightening up of the specification\n> because it removes ambiguity. 512s granularity makes sense within the\n> context of the 10 minute block target.\n>\n> Thank you for spending so much time carefully considering this BIP and\n> reference implementation and please let me know if there there are any\n> remaining nits so we can get those addressed.\n>\n>\n>\n>\n>\n> On Thu, Oct 15, 2015 at 2:47 PM, Alex Morcos via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Mark,\n>>\n>> You seemed interested in changing BIP 68 to use 16 bits for sequence\n>> number in both the block and time versions, making time based sequence\n>> numbers have a resolution of 512 seconds.\n>>\n>> I'm in favor of this approach because it leaves aside 14 bits for further\n>> soft forks within the semantics of BIP 68.\n>>\n>> It would be nice to know if you're planning this change, and perhaps\n>> people can hold off on review until things are finalized.\n>>\n>> I'd cast my \"vote\" against BIP 68 without this change, but am also open to\n>> being convinced otherwise.\n>>\n>> What are other peoples opinions on this?\n>>\n>> On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> Peter Todd <pete at petertodd.org> writes:\n>>> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:\n>>> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n>>> >> writes:\n>>> >> > However I don't think we've done a good job showing why we need to\n>>> >> > implement this feature via nSequence.\n>>> >>\n>>> >> It could be implemented in other ways, but nSequence is the neatest\n>>> >> and\n>>> >> most straightforward I've seen.\n>>> >>\n>>> >> - I'm not aware of any other (even vague) proposal for its use?\n>>> >> Enlighten?\n>>> >\n>>> > There's three that immediately come to mind:\n>>> >\n>>> > Gregory Maxwell has proposed it as a way of discouraging miners from\n>>> > reorging chains, by including some of the low-order bits of a previous\n>>> > block header in nSequence.\n>>> >\n>>> > A few people have proposed implementing proof-of-stake blocksize voting\n>>> > with nSequence.\n>>>\n>>> Excellent, thanks!  It's good to have such ideas as a compass.  PoS\n>>> voting seems like it won't be a problem in 5 bits.\n>>>\n>>> The \"prevbits\" idea would want more bits; naively 64 would be good, but\n>>> I think there are some tricks we can use to make 32 work OK.  We would\n>>> have to then split between nLocktime (if available) and multiple\n>>> nSequence fields, and it would weaken it for some txs.\n>>>\n>>> There is one easy solution: change the BIP wording from:\n>>>\n>>> -For transactions with an nVersion of 2 or greater,\n>>> +For transactions with an nVersion of 2,\n>>>\n>>> And on every tx bump, we decide whether to keep this scheme (mempool\n>>> would enforce it always).\n>>>\n>>> Cheers,\n>>> Rusty.\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Alex Morcos",
                "date": "2015-10-15T16:41:57",
                "message_text_only": "Adam,\n\nThe remaining 14 bits can be used to soft fork in finer granularity in the\nfuture.\n\nAlex\n\n\nOn Thu, Oct 15, 2015 at 12:37 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> Does that pre-judge that block interval would never change from\n> 10mins?  Eg say with IBLT or fountain codes etc and security arguments\n> for the current limitations of them are found, such that orphan rates\n> can remain low in a decentralised way with 1min blocks, then the\n> locktime granularity would be coarse relative to the block interval\n> (with 512s locktime granularity.\n>\n> Adam\n>\n> On 15 October 2015 at 18:27, Btc Drak via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Alex,\n> >\n> > I am sorry for not communicating more clearly. Mark and I discussed your\n> > concerns from the last meeting and he made the change. The BIP text still\n> > needs to be updated, but the discussed change was added to the PR, albeit\n> > squashed making it more non-obvious. BIP68 now explicitly uses 16 bits\n> with\n> > a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK and\n> > SEQUENCE_LOCKTIME_GRANULARITY in the PR\n> > https://github.com/bitcoin/bitcoin/pull/6312.\n> >\n> >     /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n> >      * applied to extract that lock-time from the sequence field. */\n> >     static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n> >\n> >     /* In order to use the same number of bits to encode roughly the\n> >      * same wall-clock duration, and because blocks are naturally\n> >      * limited to occur every 600s on average, the minimum granularity\n> >      * for time-based relative lock-time is fixed at 512 seconds.\n> >      * Converting from CTxIn::nSequence to seconds is performed by\n> >      * multiplying by 512 = 2^9, or equivalently shifting up by\n> >      * 9 bits. */\n> >     static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n> >\n> > I am also much happier with this last tightening up of the specification\n> > because it removes ambiguity. 512s granularity makes sense within the\n> > context of the 10 minute block target.\n> >\n> > Thank you for spending so much time carefully considering this BIP and\n> > reference implementation and please let me know if there there are any\n> > remaining nits so we can get those addressed.\n> >\n> >\n> >\n> >\n> >\n> > On Thu, Oct 15, 2015 at 2:47 PM, Alex Morcos via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> Mark,\n> >>\n> >> You seemed interested in changing BIP 68 to use 16 bits for sequence\n> >> number in both the block and time versions, making time based sequence\n> >> numbers have a resolution of 512 seconds.\n> >>\n> >> I'm in favor of this approach because it leaves aside 14 bits for\n> further\n> >> soft forks within the semantics of BIP 68.\n> >>\n> >> It would be nice to know if you're planning this change, and perhaps\n> >> people can hold off on review until things are finalized.\n> >>\n> >> I'd cast my \"vote\" against BIP 68 without this change, but am also open\n> to\n> >> being convinced otherwise.\n> >>\n> >> What are other peoples opinions on this?\n> >>\n> >> On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>\n> >>> Peter Todd <pete at petertodd.org> writes:\n> >>> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:\n> >>> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> >>> >> writes:\n> >>> >> > However I don't think we've done a good job showing why we need to\n> >>> >> > implement this feature via nSequence.\n> >>> >>\n> >>> >> It could be implemented in other ways, but nSequence is the neatest\n> >>> >> and\n> >>> >> most straightforward I've seen.\n> >>> >>\n> >>> >> - I'm not aware of any other (even vague) proposal for its use?\n> >>> >> Enlighten?\n> >>> >\n> >>> > There's three that immediately come to mind:\n> >>> >\n> >>> > Gregory Maxwell has proposed it as a way of discouraging miners from\n> >>> > reorging chains, by including some of the low-order bits of a\n> previous\n> >>> > block header in nSequence.\n> >>> >\n> >>> > A few people have proposed implementing proof-of-stake blocksize\n> voting\n> >>> > with nSequence.\n> >>>\n> >>> Excellent, thanks!  It's good to have such ideas as a compass.  PoS\n> >>> voting seems like it won't be a problem in 5 bits.\n> >>>\n> >>> The \"prevbits\" idea would want more bits; naively 64 would be good, but\n> >>> I think there are some tricks we can use to make 32 work OK.  We would\n> >>> have to then split between nLocktime (if available) and multiple\n> >>> nSequence fields, and it would weaken it for some txs.\n> >>>\n> >>> There is one easy solution: change the BIP wording from:\n> >>>\n> >>> -For transactions with an nVersion of 2 or greater,\n> >>> +For transactions with an nVersion of 2,\n> >>>\n> >>> And on every tx bump, we decide whether to keep this scheme (mempool\n> >>> would enforce it always).\n> >>>\n> >>> Cheers,\n> >>> Rusty.\n> >>> _______________________________________________\n> >>> bitcoin-dev mailing list\n> >>> bitcoin-dev at lists.linuxfoundation.org\n> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> >>\n> >>\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/fabd688e/attachment-0001.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2015-10-15T18:31:17",
                "message_text_only": "Adam, there is really no justification I can see to lower the interblock\ninterval on the Bitcoin blockchain, primarily due to the effects of network\nlatency. Lowering the interblock interval and raising the block size are\nnot equal alternatives - you can always get more throughput in bitcoin by\nraising the block size than by lowering the interblock time. And that's\nwithout considering the effect shorter intervals would have on e.g. SPV\nclient bandwidth or sidechain connectivity proofs. So I find it very\nunlikely that such granularity would ever be needed on the Bitcoin block\nchain, although if were to happen then extra bits from nSequence could be\nused in a soft-fork compatible way.\n\nHowever it is true that various sidechains such as Liquid will have a much\nshorter interblock interval than 10min, as well as customer demand for\nprotocols with shorter timeouts. It would be nice if such systems did not\nHAVE to resort to complex bit shifting to support more precision, and if\nprotocols written for bitcoin could be reused on such systems with minimal\nor no modification.\n\nTo that end, it might be preferable to move the flag bit indicating use of\nseconds from bit 16 to bit 23 and (by convention only) reserve bits 17..22\nto provide higher granularity in a sidechain environment. This keeps the\nsize of a stack push to 3 bytes while also keeping sufficient room for\nhigh-order bits of relative lock-time in a sidechain that supports shorter\nblock intervals.\n\nAnother alternative is to put the units flag in the least significant bit,\nwhich has the advantage of allowing both units of lock-time to make use of\n1-2 byte pushes, but the disadvantage of making lock times of 64..127\n2-bytes instead of 1-byte.\n\nThoughts?\n\nOn Thu, Oct 15, 2015 at 9:37 AM, Adam Back via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Does that pre-judge that block interval would never change from\n> 10mins?  Eg say with IBLT or fountain codes etc and security arguments\n> for the current limitations of them are found, such that orphan rates\n> can remain low in a decentralised way with 1min blocks, then the\n> locktime granularity would be coarse relative to the block interval\n> (with 512s locktime granularity.\n>\n> Adam\n>\n> On 15 October 2015 at 18:27, Btc Drak via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Alex,\n> >\n> > I am sorry for not communicating more clearly. Mark and I discussed your\n> > concerns from the last meeting and he made the change. The BIP text still\n> > needs to be updated, but the discussed change was added to the PR, albeit\n> > squashed making it more non-obvious. BIP68 now explicitly uses 16 bits\n> with\n> > a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK and\n> > SEQUENCE_LOCKTIME_GRANULARITY in the PR\n> > https://github.com/bitcoin/bitcoin/pull/6312.\n> >\n> >     /* If CTxIn::nSequence encodes a relative lock-time, this mask is\n> >      * applied to extract that lock-time from the sequence field. */\n> >     static const uint32_t SEQUENCE_LOCKTIME_MASK = 0x0000ffff;\n> >\n> >     /* In order to use the same number of bits to encode roughly the\n> >      * same wall-clock duration, and because blocks are naturally\n> >      * limited to occur every 600s on average, the minimum granularity\n> >      * for time-based relative lock-time is fixed at 512 seconds.\n> >      * Converting from CTxIn::nSequence to seconds is performed by\n> >      * multiplying by 512 = 2^9, or equivalently shifting up by\n> >      * 9 bits. */\n> >     static const int SEQUENCE_LOCKTIME_GRANULARITY = 9;\n> >\n> > I am also much happier with this last tightening up of the specification\n> > because it removes ambiguity. 512s granularity makes sense within the\n> > context of the 10 minute block target.\n> >\n> > Thank you for spending so much time carefully considering this BIP and\n> > reference implementation and please let me know if there there are any\n> > remaining nits so we can get those addressed.\n> >\n> >\n> >\n> >\n> >\n> > On Thu, Oct 15, 2015 at 2:47 PM, Alex Morcos via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>\n> >> Mark,\n> >>\n> >> You seemed interested in changing BIP 68 to use 16 bits for sequence\n> >> number in both the block and time versions, making time based sequence\n> >> numbers have a resolution of 512 seconds.\n> >>\n> >> I'm in favor of this approach because it leaves aside 14 bits for\n> further\n> >> soft forks within the semantics of BIP 68.\n> >>\n> >> It would be nice to know if you're planning this change, and perhaps\n> >> people can hold off on review until things are finalized.\n> >>\n> >> I'd cast my \"vote\" against BIP 68 without this change, but am also open\n> to\n> >> being convinced otherwise.\n> >>\n> >> What are other peoples opinions on this?\n> >>\n> >> On Thu, Oct 8, 2015 at 9:38 PM, Rusty Russell via bitcoin-dev\n> >> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >>>\n> >>> Peter Todd <pete at petertodd.org> writes:\n> >>> > On Tue, Oct 06, 2015 at 12:28:49PM +1030, Rusty Russell wrote:\n> >>> >> Peter Todd via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\n> >>> >> writes:\n> >>> >> > However I don't think we've done a good job showing why we need to\n> >>> >> > implement this feature via nSequence.\n> >>> >>\n> >>> >> It could be implemented in other ways, but nSequence is the neatest\n> >>> >> and\n> >>> >> most straightforward I've seen.\n> >>> >>\n> >>> >> - I'm not aware of any other (even vague) proposal for its use?\n> >>> >> Enlighten?\n> >>> >\n> >>> > There's three that immediately come to mind:\n> >>> >\n> >>> > Gregory Maxwell has proposed it as a way of discouraging miners from\n> >>> > reorging chains, by including some of the low-order bits of a\n> previous\n> >>> > block header in nSequence.\n> >>> >\n> >>> > A few people have proposed implementing proof-of-stake blocksize\n> voting\n> >>> > with nSequence.\n> >>>\n> >>> Excellent, thanks!  It's good to have such ideas as a compass.  PoS\n> >>> voting seems like it won't be a problem in 5 bits.\n> >>>\n> >>> The \"prevbits\" idea would want more bits; naively 64 would be good, but\n> >>> I think there are some tricks we can use to make 32 work OK.  We would\n> >>> have to then split between nLocktime (if available) and multiple\n> >>> nSequence fields, and it would weaken it for some txs.\n> >>>\n> >>> There is one easy solution: change the BIP wording from:\n> >>>\n> >>> -For transactions with an nVersion of 2 or greater,\n> >>> +For transactions with an nVersion of 2,\n> >>>\n> >>> And on every tx bump, we decide whether to keep this scheme (mempool\n> >>> would enforce it always).\n> >>>\n> >>> Cheers,\n> >>> Rusty.\n> >>> _______________________________________________\n> >>> bitcoin-dev mailing list\n> >>> bitcoin-dev at lists.linuxfoundation.org\n> >>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> >>\n> >>\n> >> _______________________________________________\n> >> bitcoin-dev mailing list\n> >> bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>\n> >\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/d0e24a27/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-10-15T23:18:18",
                "message_text_only": "Btc Drak <btcdrak at gmail.com> writes:\n> Alex,\n>\n> I am sorry for not communicating more clearly. Mark and I discussed your\n> concerns from the last meeting and he made the change. The BIP text still\n> needs to be updated, but the discussed change was added to the PR, albeit\n> squashed making it more non-obvious. BIP68 now explicitly uses 16 bits with\n> a bitmask. Please see the use of SEQUENCE_LOCKTIME_MASK\n> and SEQUENCE_LOCKTIME_GRANULARITY in the PR\n> https://github.com/bitcoin/bitcoin/pull/6312.\n\nI like it from a technical perspective.\n\n>From a practical perspective: yuck.  There's currently no way to play\nwith bitcoind's perception of time, so that's a very long sleep to\nblackbox test (which is what my lightning test script does).\n\nSo consider this YA feature request :)\n\nCheers,\nRusty."
            },
            {
                "author": "Rusty Russell",
                "date": "2015-10-16T01:26:14",
                "message_text_only": "Rusty Russell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n>>From a practical perspective: yuck.  There's currently no way to play\n> with bitcoind's perception of time, so that's a very long sleep to\n> blackbox test (which is what my lightning test script does).\n>\n> So consider this YA feature request :)\n \n... Gavin just told me about setmocktime.  That's fast service!\n\nThanks,\nRusty."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2015-10-19T10:43:05",
                "message_text_only": "On Fri, Oct 16, 2015 at 3:26 AM, Rusty Russell via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> ... Gavin just told me about setmocktime.  That's fast service!\n\nOnce more functions (specially consensus-critical functions) take\nnTime explicitly as parameter instead of relying on the\nlibrary-unfriendly GetAdjustedTime(), then SetMockTime() will be less\nnecessary for testing. For example, see\nhttps://github.com/jtimon/bitcoin/commit/88a35548518a27c7d24efe064e1bf4e5b3029578#diff-524ba4b43aa70d393ef51ab42a6d25f2L52"
            },
            {
                "author": "Joseph Poon",
                "date": "2015-10-06T20:00:31",
                "message_text_only": "Hi Peter,\n\nOn Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via bitcoin-dev wrote:\n> So we need to make the case for two main things:\n> \n> 1) We have applications that need a relative (instead of absolute CLTV)\n\nLightning network needs RCLTV for bidireciontal payment channels without\nan explicit expiration date. Without a relative locktime, there is an\neconomic tradeoff between longer channel expiry dates due to lower fees,\nand the time-value delay for non-cooperation. Due to this tradeoff,\nthere is a risk that people may create channels with entities which they\nbelieve will be around in the future and act in a particular way. In\nother words, it is possible that people will attach reputation as part\nof their decision-making for channel creation.\n\n> 2) Additionally to RCLTV, we need to implement this via nSequence\n> \n> However I don't think we've done a good job showing why we need to\n> implement this feature via nSequence. BIP68 describes the new nSequence\n> semantics, and gives the rational for them as being a\n> \"Consensus-enforced tx replacement\" mechanism, with a bidirectional\n> payment channel as an example of this in action. However, the\n> bidirectional payment channel concept itself can be easily implemented\n> with CLTV alone. There is a small drawback in that the initial\n> transaction could be delayed, reducing the overall time the channel\n> exists, but the protocol already assumes that transactions can be\n> reliably confirmed within a day - significantly less than the proposed\n> 30 days duration of the channel. That example alone I don't think\n> justifies a fairly complex soft-fork that limits future upgrades; we\n> need more justification.\n\nThe examples (including for Lightning Network) in BIP 112 provides a\nrationale for using a relative locktime which cannot be achieved using\nCLTV/hard-nLocktime alone. Without BIP 112, I agree the example in BIP\n68 can also be done with nLocktime, but I think they sort of go\ntogether?\n\nHowever, there are some advantages to using some kind of relative\nlocktime field such as nSequence over purely a script opcode. This is\nespecially useful if one presumes some kind of long-term malleability\nfix which does not include directly signing the TXID of the parent\ntransaction. It allows one to update dependent spending transactions\nafter-the-fact; after transactions are signed. If there are\nunbroadcasted 2-of-2 multisig output transactions, where Tx1 is\nconfirmed on-chain and off-chain Tx2 spends from Tx1, they can elect to\nspend Tx3a from the output of Tx2. Tx3a can have an nSequence value\nwhich requires a minimum of 100 block confirmations of Tx2 to elapse\nbefore Tx3a can be broadcast. As neither Tx2 or Tx3a have yet broadcast,\nthey can elect to double-spend Tx2 with a new transaction with a lower\nnSequence value, e.g. Tx3b. This is important, as Tx2 will *always* be\nspendable so creating new revocation rules is useful for Tx2.\n\nI think Mark had once described the general idea is to have a similar\nseparation of the opcode and the actual validation of block height in\nthe codebase as nLockTime/OP_CLTV, as having pure validation in the\nscript which may make things a bit ugly.\n\n> So, what else can the community come up with? nSequence itself exists\n> because of a failed feature that turned out to not work as intended;\n> it'd be a shame to make that kind of mistake again, so let's get our\n> semantics and use-cases in the BIPs and documented before we deploy.\n\nI agree. There may be some impact for future changes in Bitcoin, wrt BIP\n68. For BIP 112, I think the impact could be minimal, but there may be\nfuture interpretations of nSequence. In particular, in the long term\nthere may be some kind of need for some kind of \"timestop\" bit (to\ndefine whether to count relative blockheight or timestopped\nblockheight), which already consumes unreserved space. To account for\nmore than one upgrade, the next future upgrade after BIP 68 may be\nimplemented by taking the unused most significant bit in nSequence as\ndefined in BIP 68 in combination with using up a version field bit.\njl1202 had previously suggested doing this for BIP 68 itself:\ne7b394187fd96bd77a1c49f7c9b7a9b2 at xbt.hk\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011358.html\n\nAs-is, the only actual tradeoff made by BIP 68 is reducing range by\nhalf. I think BIP 68 works as-is or with burning an nVersion bit today,\nas it should allow for future (necessary) upgrades.\n\n-- \nJoseph Poon"
            },
            {
                "author": "Peter Todd",
                "date": "2015-10-08T17:43:29",
                "message_text_only": "On Sat, Oct 03, 2015 at 04:30:56PM +0200, Peter Todd via bitcoin-dev wrote:\n> BIP68 and BIP112 collectively define the CHECKSEQUENCEVERIFY semantics,\n<snip>\n\nAnother issue that came to mind re: CSV review is that there isn't\nactually any one pull-req with all the code changes together, making it\nhard to be sure what the final effect will be once all three BIPs are\nmerged.\n\nWhile evaluating stuff separately is often good, I think this is a case\nwhere the overall design needs to be evaluated as a single unit to fully\nunderstand the behavior.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000de60f807a5fd32057510e7715038ecbc888052861b6a5c1\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/9641daab/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "CHECKSEQUENCEVERIFY - We need more usecases to motivate the change",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Adam Back",
                "Anthony Towns",
                "s7r",
                "Peter Todd",
                "Jorge Tim\u00f3n",
                "Alex Morcos",
                "Btc Drak",
                "Mark Friedenbach",
                "jl2012 at xbt.hk",
                "Joseph Poon"
            ],
            "messages_count": 21,
            "total_messages_chars_count": 71217
        }
    },
    {
        "title": "[bitcoin-dev] Incentives to run full nodes",
        "thread_messages": [
            {
                "author": "odinn",
                "date": "2015-10-04T06:46:07",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHello,\n\nSome background on this....\n\n\nA very long while ago I posted to the bitcoin-development mailing list\nsome ABIS concepts having to do with microdonations:\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-December/00\n3791.html\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/004\n049.html\n\nAnd an interesting post (which led me to explore BCN) via nullc:\nhttps://news.ycombinator.com/item?id=7765455\n(posted 1 & 1/3 year ago).\n\n\nAnyway, some long while ago this discussion came up about \"Incentives\nto run full nodes,\" and the last post in the thread was here:\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/006083\n.html\n\nSince that time, some new developments have come to light which the\nparticipants in that thread may find interesting;\n\nPlease see in part,\n\nhttps://bytecoin.org/news/bytecoin-wallet-1.0.8-release-introduces-micro\n- -donations/\n\nThis presents a working implementation in BCN; the concept as\nimplemented there is arguably viable in BTC as well.\n\nPlease explore, play with, discuss, etc.\n\nCheers,\n\n- - O\n\nodinn:\n> Potentially relevant...\n> \n> \"Incentivizing the running of full nodes\"\n> \n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/0060\n28\n>\n> \n.html\n> \n> (However, the issue to which I referred here is now closed)\n> \n> View whole thread:\n> \n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/thre\nad\n>\n> \n.html#6028\n> \n> On 08/17/2015 02:44 PM, Chris Pacia via bitcoin-dev wrote:\n> \n>> On Aug 17, 2015 5:29 PM, \"Peter Todd via bitcoin-dev\" \n>> <bitcoin-dev at lists.linuxfoundation.org \n>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote: From the \n>> point of view of a\n>>> wallet, it's not very secure to use Hearn-style SPV mode, and \n>>> volunteers running full nodes doesn't help things. Sybil \n>>> attacking the IP address space is pretty easy in comparison to \n>>> aquiring hashing power sufficient to create false\n>>> confirmations, so any attacker able to do the former will\n>>> likely be running the full node you're connecting too anyway.\n>>> Ultimately, Hearn-style SPV is a close approximation to just\n>>> trusting anyone with a non-trivial amount of hashing power.\n>>> (and getting that is surprisingly easy, e.g. w/ SPV mining)\n> \n>> Can you explain how the spv node fails against an attacker with a\n>>  non-trivial amount of hash power where a full node doesn't? To \n>> attack an spv wallet that is waiting for 6 or 10 confirmations,\n>> you would not only need to Sybil them but also summon a massive\n>> amount of hashing power to create a chain of headers (while\n>> forgoing the opportunity to mine valid blocks with that hash\n>> power).\n> \n>> But could someone with that much hash power not Sybil a full\n>> node and give them a chain for valid blocks (but on an orphan\n>> fork)? The failure model doesn't seem specific to spv to me.\n> \n> \n> \n>> _______________________________________________ bitcoin-dev\n>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWEMsvAAoJEGxwq/inSG8CcU8IAMJ+ZYMFzjETUDEZNyUnVd3v\nSJCNauufTOcqxLzQoGIj4Y66PDnk9doRy/KJUGhKNtg4vjxiEk+GGHRH02ktvnQB\n6MGuDCJS+MLeGi2W2QMr1NdHl09kRo306F5ZgjtZnOqX0mhwhOrIUylpoevcBnSQ\nmaJ5hpmxqyhxozEyYyu50HwcMQrXeWKZ8G0VSkTqmY5wf0s98MGrFLWSujwsva0e\np4hvG6YgBH85ne7dnBSH/sySreJpRMA0aac/+1j9U3LVvMTsmuaPc71aGI791o/y\n+KV+UZ8bgHldfi+NSK8wA4eRi4JQrt+ruE63XlfYl29gWINqsGeVtpW/W3jeDnI=\n=KDER\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "odinn",
                "date": "2015-10-04T06:59:27",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n(Note:  Due to being very tired I have issued a correction to my post\nbelow so as to make sure I have not been misunderstood.)\n\nodinn via bitcoin-dev:\n> Hello,\n> \n> Some background on this....\n> \n> \n> A very long while ago I posted to the bitcoin-development mailing\n> list some ABIS concepts having to do with microdonations:\n> \n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-December/\n00\n>\n> \n3791.html\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-January/0\n04\n>\n> \n049.html\n> \n> And an interesting post (which led me to explore BCN) via nullc: \n> https://news.ycombinator.com/item?id=7765455 (posted 1 & 1/3 year\n> ago).\n\n(I realize the way I wrote the above paragraph made it sound like I\nposted the above post at https://news.ycombinator.com/item?id=7765455\nbut I just want to point out here that I did not; I meant to say that\nI read an interesting post which led me to explore BCN that was\npublished by nullc.)\n\n> \n> \n> Anyway, some long while ago this discussion came up about\n> \"Incentives to run full nodes,\" and the last post in the thread was\n> here:\n> \n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/0060\n83\n>\n> \n.html\n> \n> Since that time, some new developments have come to light which\n> the participants in that thread may find interesting;\n> \n> Please see in part,\n> \n> https://bytecoin.org/news/bytecoin-wallet-1.0.8-release-introduces-mic\nro\n>\n> \n- -donations/\n> \n> This presents a working implementation in BCN; the concept as \n> implemented there is arguably viable in BTC as well.\n> \n> Please explore, play with, discuss, etc.\n> \n> Cheers,\n> \n> - O\n> \n> odinn:\n>> Potentially relevant...\n> \n>> \"Incentivizing the running of full nodes\"\n> \n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/006\n0\n>\n>> \n28\n> \n> \n> .html\n> \n>> (However, the issue to which I referred here is now closed)\n> \n>> View whole thread:\n> \n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2014-June/thr\ne\n>\n>> \nad\n> \n> \n> .html#6028\n> \n>> On 08/17/2015 02:44 PM, Chris Pacia via bitcoin-dev wrote:\n> \n>>> On Aug 17, 2015 5:29 PM, \"Peter Todd via bitcoin-dev\" \n>>> <bitcoin-dev at lists.linuxfoundation.org \n>>> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote: From the\n>>>  point of view of a\n>>>> wallet, it's not very secure to use Hearn-style SPV mode, and\n>>>>  volunteers running full nodes doesn't help things. Sybil \n>>>> attacking the IP address space is pretty easy in comparison\n>>>> to aquiring hashing power sufficient to create false \n>>>> confirmations, so any attacker able to do the former will \n>>>> likely be running the full node you're connecting too\n>>>> anyway. Ultimately, Hearn-style SPV is a close approximation\n>>>> to just trusting anyone with a non-trivial amount of hashing\n>>>> power. (and getting that is surprisingly easy, e.g. w/ SPV\n>>>> mining)\n> \n>>> Can you explain how the spv node fails against an attacker with\n>>> a non-trivial amount of hash power where a full node doesn't?\n>>> To attack an spv wallet that is waiting for 6 or 10\n>>> confirmations, you would not only need to Sybil them but also\n>>> summon a massive amount of hashing power to create a chain of\n>>> headers (while forgoing the opportunity to mine valid blocks\n>>> with that hash power).\n> \n>>> But could someone with that much hash power not Sybil a full \n>>> node and give them a chain for valid blocks (but on an orphan \n>>> fork)? The failure model doesn't seem specific to spv to me.\n> \n> \n> \n>>> _______________________________________________ bitcoin-dev \n>>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWEM5PAAoJEGxwq/inSG8C48UH/A9mfVaP2h1nOD2po2yaDCLA\nxJuMIhrgo81q+WAbwFk4ac3bu3R/RzLLM7yA2IWDiPJrt6gCvEgIjzsHcG7+q5Bd\ns7dPEFnibPzpqXjnVh6FcfpuW/MCT3AXiSvnsKiLh99v+oz9g50fIpOMYuOTk/Sy\n816xqKbDfKEHzkWzeOv5gV61AzNS7PDWjfRqRV/Om5+J/MZt/kgXJ8UqEVmYbLXM\nwIOWA1Vl4BZtQBiQpyDBjBUDhU0YboVXOMIbmx+ffDXKydcErLwFOCBp3XjVOMti\ny0B56kmPko5xKH4/n53WFLH32ILd7dZNtK4KzhmyPjeJ+yXdfFTmR3Ayo4wvP2s=\n=UvrH\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Incentives to run full nodes",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8284
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin network simulation testing?",
        "thread_messages": [
            {
                "author": "Byron Gibson",
                "date": "2015-10-04T21:04:24",
                "message_text_only": "Hi all, is anyone using simulators like Shadow (https://shadow.github.io),\nBTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed changes\nto Bitcoin?  I have a few questions about their capabilities and\nlimitations.\n\nByron Gibson\nhttp://mirror.co/\nhttps://keybase.io/byrongibson\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151004/59d85ff6/attachment.html>"
            },
            {
                "author": "naama.kates at gmail.com",
                "date": "2015-10-06T20:14:28",
                "message_text_only": "Hi Byron, \n\nI've been using shadow a bit-- I think these simulators are important for testing, but Shadow, at least, certainly seems to have limitations, in some crucial respects.  Running shadow w Tor (which is only logical, because many BCT transactions transpire over Tor) is not as 'light' as presented and slows my own box down quite a bit, so the stats can't possibly be accurate... I don't know if this answers any questions or if you've had this experience at all -- perhaps it is negligible on a more powerful machine than my own-- or perhaps there is an adjustment still unaccounted?\n\nRegards,\nNina K\n\nSent from my iPhone\n\n> On Oct 4, 2015, at 2:04 PM, Byron Gibson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> Hi all, is anyone using simulators like Shadow (https://shadow.github.io), BTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed changes to Bitcoin?  I have a few questions about their capabilities and limitations.\n> \n> Byron Gibson\n> http://mirror.co/\n> https://keybase.io/byrongibson\n> \n>    \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/0526cce0/attachment.html>"
            },
            {
                "author": "Andrew Miller",
                "date": "2015-10-06T21:00:07",
                "message_text_only": "Shadow uses virtual time, entirely decoupled from real time. So while it\nmay slow down your machine, this would not affect the stats collected\n\n(although it does make shadow somewhat unpleasant to run, unless you have a\nfast machine,  compared to abstract simulators that avoid running the\nactual Bitcoin code).\nHi Byron,\n\nI've been using shadow a bit-- I think these simulators are important for\ntesting, but Shadow, at least, certainly seems to have limitations, in some\ncrucial respects.  Running shadow w Tor (which is only logical, because\nmany BCT transactions transpire over Tor) is not as 'light' as presented\nand slows my own box down quite a bit, so the stats can't possibly be\naccurate... I don't know if this answers any questions or if you've had\nthis experience at all -- perhaps it is negligible on a more powerful\nmachine than my own-- or perhaps there is an adjustment still unaccounted?\n\nRegards,\nNina K\n\nSent from my iPhone\n\nOn Oct 4, 2015, at 2:04 PM, Byron Gibson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\nHi all, is anyone using simulators like Shadow (https://shadow.github.io),\nBTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed changes\nto Bitcoin?  I have a few questions about their capabilities and\nlimitations.\n\nByron Gibson\nhttp://mirror.co/\nhttps://keybase.io/byrongibson\n\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n_______________________________________________\nbitcoin-dev mailing list\nbitcoin-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/4a166b23/attachment.html>"
            },
            {
                "author": "Byron Gibson",
                "date": "2015-10-09T17:11:58",
                "message_text_only": "Thanks Nina and Andrew, I may have the capability to run a simulator large\nscale on many nodes on AWS/GCE, but am looking to optimize the ROI by\nselecting categories of experiments that benefit from a more controlled\nenvironment, rather than be invalidated by its divergence/s from livenet.\nBut wondering if anyone else has already been doing this, would be nice to\ncollaborate.\n\nByron Gibson\nCoS | http://mirrorx.com/\nhttps://onename.io/bgibson\nhttps://keybase.io/byrongibson\n\n\nOn Oct 6, 2015 14:00, \"Andrew Miller\" <amiller at cs.umd.edu> wrote:\n\n> Shadow uses virtual time, entirely decoupled from real time. So while it\n> may slow down your machine, this would not affect the stats collected\n>\n> (although it does make shadow somewhat unpleasant to run, unless you have\n> a fast machine,  compared to abstract simulators that avoid running the\n> actual Bitcoin code).\n> Hi Byron,\n>\n> I've been using shadow a bit-- I think these simulators are important for\n> testing, but Shadow, at least, certainly seems to have limitations, in some\n> crucial respects.  Running shadow w Tor (which is only logical, because\n> many BCT transactions transpire over Tor) is not as 'light' as presented\n> and slows my own box down quite a bit, so the stats can't possibly be\n> accurate... I don't know if this answers any questions or if you've had\n> this experience at all -- perhaps it is negligible on a more powerful\n> machine than my own-- or perhaps there is an adjustment still unaccounted?\n>\n> Regards,\n> Nina K\n>\n> Sent from my iPhone\n>\n> On Oct 4, 2015, at 2:04 PM, Byron Gibson via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi all, is anyone using simulators like Shadow (https://shadow.github.io),\n> BTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed\n> changes to Bitcoin?  I have a few questions about their capabilities and\n> limitations.\n>\n> Byron Gibson\n> http://mirror.co/\n> https://keybase.io/byrongibson\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/91c275bc/attachment-0001.html>"
            },
            {
                "author": "Pindar Wong",
                "date": "2015-10-09T22:06:47",
                "message_text_only": "Byron: I'd be interested to collaborate on this in some fashion.\n\np.\n\n\nOn Sat, Oct 10, 2015 at 1:11 AM, Byron Gibson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Thanks Nina and Andrew, I may have the capability to run a simulator large\n> scale on many nodes on AWS/GCE, but am looking to optimize the ROI by\n> selecting categories of experiments that benefit from a more controlled\n> environment, rather than be invalidated by its divergence/s from livenet.\n> But wondering if anyone else has already been doing this, would be nice to\n> collaborate.\n>\n> Byron Gibson\n> CoS | http://mirrorx.com/\n> https://onename.io/bgibson\n> https://keybase.io/byrongibson\n>\n>\n> On Oct 6, 2015 14:00, \"Andrew Miller\" <amiller at cs.umd.edu> wrote:\n>\n>> Shadow uses virtual time, entirely decoupled from real time. So while it\n>> may slow down your machine, this would not affect the stats collected\n>>\n>> (although it does make shadow somewhat unpleasant to run, unless you have\n>> a fast machine,  compared to abstract simulators that avoid running the\n>> actual Bitcoin code).\n>> Hi Byron,\n>>\n>> I've been using shadow a bit-- I think these simulators are important for\n>> testing, but Shadow, at least, certainly seems to have limitations, in some\n>> crucial respects.  Running shadow w Tor (which is only logical, because\n>> many BCT transactions transpire over Tor) is not as 'light' as presented\n>> and slows my own box down quite a bit, so the stats can't possibly be\n>> accurate... I don't know if this answers any questions or if you've had\n>> this experience at all -- perhaps it is negligible on a more powerful\n>> machine than my own-- or perhaps there is an adjustment still unaccounted?\n>>\n>> Regards,\n>> Nina K\n>>\n>> Sent from my iPhone\n>>\n>> On Oct 4, 2015, at 2:04 PM, Byron Gibson via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Hi all, is anyone using simulators like Shadow (https://shadow.github.io),\n>> BTCSim (https://github.com/btcsuite/btcsim), etc. to test proposed\n>> changes to Bitcoin?  I have a few questions about their capabilities and\n>> limitations.\n>>\n>> Byron Gibson\n>> http://mirror.co/\n>> https://keybase.io/byrongibson\n>>\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151010/df5471b0/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin network simulation testing?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Byron Gibson",
                "naama.kates at gmail.com",
                "Pindar Wong",
                "Andrew Miller"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 9272
        }
    },
    {
        "title": "[bitcoin-dev] Incentives to run full nodes, revisited",
        "thread_messages": [
            {
                "author": "odinn",
                "date": "2015-10-05T07:10:56",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\nDue to the previous post on this subject\n( http://is.gd/x6g5q5 ) having fractured links\nplease see the following, with working implementation\n(in BCN) shown at: http://abis.io\n\nThis is intended to be implemented in different currencies, and so far\nhas been implemented in one (BCN - GUI wallet).  The concept is\nfeasible in BTC as well.\n\nComments welcome.\n\nDeveloper's blog:\n\nhttps://bytecoin.org/news/bytecoin-wallet-1.0.8-release-introduces-micro\n- -donations/\n\n(Above link can be found also at http://abis.io)\n\nSee also:\n\nhttps://odinn.cyberguerrilla.org/index.php/2015/10/03/greater-giving-pot\nential/\n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWEiKAAAoJEGxwq/inSG8Cr18IAKEIBaHp7qkA2xJVTLyXmYkh\nRWJg92cjD2Oy82ZkbdGjOJr9XjLFfwiYyZIZucKs1drafjOQvDllNpqII1/grWio\nigwEW0eWl/of2tACK6u5i9bCXcfYi4MnMV1rF1DM0etSjRZUu//bX8qrwiwXvAzZ\nRmuRlSFvBYE3BuIbd7ekQGfzkXjIVlHerXSDQcELwVhbnQKTYDk/i/4SzmPFHg9Y\nS2Zp/SWVQANqvnfuZPjNvbmNXJEdgIzmiUfx2F3ap+5qxtLOJ28zNGnFB+UPRTzr\nenlpnxmaUGBkJOEDrQzu0AKoNIeZRyJ6dpzjmMmvsnwo2VW27dKg+NEAOC4zD/U=\n=Axnt\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Incentives to run full nodes, revisited",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "odinn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1264
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin dev IRC meeting in layman's terms",
        "thread_messages": [
            {
                "author": "G1lius Caesar",
                "date": "2015-10-05T09:16:14",
                "message_text_only": "As per request of Luke-jr I'm sending a copy of my post on reddit\nhttps://www.reddit.com/r/Bitcoin/comments/3nh0s4/bitcoin_dev_irc_meeting_in_laymans_terms_or_an/\nto the mailing list.\n\nThis was intended to be a simple explanation of the weekly dev meeting for\npeople to understand what you guys are working on, not as a summary for\nother devs.\nHowever, if this is in any way, shape or form useful for the mailing-list\nI'll gladly post a copy of this every week (or a modified version of it).\n\nAny comments, suggestions, etc. are welcome.\nMail me at G1liusbitcoin at gmail.com\nTweet me @G1lius\n\n\nIf you are to skim through this, skip \"background\" as you likely already\nknow this.\n\n\n\n\n\nPlease bare in mind I'm not a developer and I'd have problems coding \"hello\nworld!\", so some things might be incorrect or plain wrong.\nLike any other write-up it likely contains personal biases, although I try\nto stay as neutral as I can.\n\nThe full IRC-logs can be found here\nhttp://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/01#l1443726030.0.\n\nThere are no decisions being made in these meetings, so if I say \"everyone\nagrees\" this means everyone present in the meeting, that's not consensus,\nbut since a fair amount of devs are present it's a good representation.\n\nMain topics discussed where:\nMempool limiting\nBIP68 + CHECKSEQUENCEVERIFY\nCLTV soft fork deployment\nlibconsensus merge time window\n\n\n**Mempool limiting**\n\n\n- background\n\nWhen a transaction is relayed across the network it is held by the nodes in\nmemory, until it gets into a block. All these transactions that sit in\nmemory are called the memorypool or mempool for short.\nLike we could see during the spam-attack if there's a big back-log of\ntransactions that couldn't make it in the blockchain this mempool can get\npretty big resulting in nodes crashing.\n\nTo stop this from happening devs are trying to find a way to limit this\nmempool, so a mechanism to reject and/or remove transactions from the\nmempool. The hard part here is to make it so nodes can't be attacked by\nabusing this mechanism.\n\nThere are multiple worked out ideas for this, namely:\nLimit mempool by throwing away the cheapest txn and setting min realy fee\nto it ( https://github.com/bitcoin/bitcoin/pull/6722 )\nMempool limiting with descendant package tracking (\nhttps://github.com/bitcoin/bitcoin/pull/6557 )\nexponential rising effective min relay feerate (\nhttps://github.com/bitcoin/bitcoin/pull/6673 )\n\n\n- meeting comments\n\ndevs are leaning towards 6722 (throwing away the cheapest txn and setting\nmin relay fee to it) because it's the more simpler approach and possibly\nless edge-cases.\nThe idea behind it is to have a mem-pool that gives a good approximation on\nwhat'll be included in the next blocks, meaning higher fee transactions.\nThis approach also helps to build a fee-estimator.\nSome devs propose to include a time-based eviction as well.\n\n\n- meeting conclusion\n\n6722 should be completed and 6722, 6557 and 6673 should be attacked by the\nothers to try and find edge-cases.\nThe default mempool size should be 300Mb.\n\n\n\n**Chain limits**\n\n- background\n\nRelated to mempool limiting.\nChain in this context means connected transactions. When you send a\ntransaction that depends on another transaction that has yet to be\nconfirmed we talk about a chain of transactions.\nMiners ideally take the whole chain into account instead of just every\nsingle transaction (although that's not widely implemented afaik). So while\na single transaction might not have a sufficient fee, a depending\ntransaction could have a high enough fee to make it worthwhile to mine both.\nThis is commonly known as child-pays-for-parent.\nSince you can make these chains very big it's possible to clog up the\nmempool this way.\nThe first unconfirmed transaction is called the ancestor and the\ntransactions depending on it the descendants. The total amount of\ntransactions is referred to as \"packages\".\n\n- meeting comments\n\nAll of the mempool limiting approaches are way easier to attack if you have\nbigger chain limits.\nthe reason to have larger descendant packages is you can't control that\nyourself, somebody pays you and bob, and bob chains off a million\ndescendants and he ends up screwing you.\nif you have a say 900kb ancestor package limit, then even if the ancestor\nfee rate is reasonably high, default mining code is likely going to find\n100kb of very high fee txs to include first, and then there won't be room\nfor your ancestor package.\nMorcos proposes 25/250kb for ancestors and 50/500kb for descendants,\nmeaning max. either 25 transactions or 250kb in size for ancestors.\nMost seem to be fine with those limits and even smaller.\n\n-meeting conclusion\n\nmorcos writes a chain-limit proposal to post on the mailing list in order\nto find possible usecases for large chain transactions.\n\n\n\n**CHECKLOCKTIMEVERIFY softfork**\n\n- background\n\nCommonly referred to as: How you thought nLockTime worked before you\nactually tried to use it.\nThere's a fair amount of demand for this and the code is reviewed and has\nbeen running on sidechains alpha for 6 months.\nThe only real issue is how and when it's merged.\nCurrently softforks have been done by the isSuperMajority mechanism,\nmeaning when 95% of the last X blocks has a version number higher than X\nthe fork is deployed.\nA new way of doing this is currently being worked on and that uses all bits\nof the version number, appropriately being called versionbits. So instead\nof a fork happening when the version is larger than (for example)\n00000000011 (3), a fork happens when (for example) the 3rd bit is up (so\n00100000011).\nThis way softforks can be deployed simultaneous and independent of each\nother.\n\n- meeting comments\n\nQuestions are being posed whether we wait for other time-related BIP's\nand/or versionbits, or do it now using isSuperMajority.\nIf versionbits is deployed later it needs to wait for all supermajority\nsoftforks to be over.\nVladimir van der Laan doesn't want to deploy any soft forks in major\nreleases (0.12 in this case) so that people explicitly upgrade for the\nsoftfork not for other things.\nYou could roll out multiple supermajority forks as long as they are\ncumulative.\nTalks seem to converge to using supermajority to deploy checkLockTimeVerify\nand checkSequenceVerify if it's ready by the end of October.\n\n- meeting conclusion\n\ncheckLockTimeVerify backports (deployment in older versions) needs to be\nreviewed as well as BIP68, 112 and 113 (all the time-related BIP's).\n\n\n\n**Libconsensus**\n\n- background\n\nSatoshi wasn't the best programmer out there, which leaves a pretty messy\ncode. Ideally you'd have the part of the code that influences the network\nconsensus separately, but in bitcoin it's all intertwined.\nLibconsensus is what eventually should become this part. This way people\ncan more easily make changes in the non-consensus part without fear of\ncausing a network fork.\nThis however is a slow and dangerous project of moving lot's of code\naround.\n\n- meeting comments\n\nLot's of discussion on when existing changes should be merged, when the\ncode should be frozen for next release etc.\nIn linux changes are merged right after a major release. jtimon notices\nthis was planned for after 0.10 and 0.11 too, but nothing happened.\nThere seems to be a lack of planning and overview as to what where has to\ngo.\n\n- meeting conclusion\n\njtimon will provide a high level rationale for what and where things should\nmove so people can make comments and review according to this rationale.\n\n\n**Participants**\n\n\ndstadulis     Daniel Stadulis\nwumpus Wladimir J. van der Laan\nmorcos Alex Morcos\ngmaxwell     Gregory Maxwell\nbtcdrak btcdrak\njonasshnelli Jonas Schnelli\nmaaku Mark Friedenbach\nsdaftuar Suhas Daftuar\nsipa Pieter Wuille\nBlueMatt    Matt Corallo\nCodeShark Eric Lombrozo\nLuke-Jr Luke Dashjr\nbsm117532 Bob McElrath\njgarzik Jeff Garzik\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/e3625be8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin dev IRC meeting in layman's terms",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "G1lius Caesar"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 7995
        }
    },
    {
        "title": "[bitcoin-dev] This thread is not about the soft/hard fork technical debate",
        "thread_messages": [
            {
                "author": "Sergio Demian Lerner",
                "date": "2015-10-05T15:56:33",
                "message_text_only": "Some of the people on this mailing list are blindly discussing the\ntechnicalities of a soft/hard fork without realizing that is not Mike's\nmain intention. At least I perceive (and maybe others too) something else\nis happening.\n\nLet me try to clarify: the discussion has nothing to do with technical\narguments. I generally like more hard forks than soft forks (but I won't\nexplain why because this is not a technical thread), but for CLTV this is\nquite irrelevant (but I won't explain why..), and I want CLTV to be\ndeployed asap.\n\nMike's intention is to criticize the informal governance model of Bitcoin\nCore development and he has strategically pushed the discussion to a\ndead-end where the group either:\n\n1) ignores him, which is against the established criteria that all\ntechnical objections coming from anyone must be addressed until that person\nagrees, so that a change can be uncontroversial. If the group moves forward\nwith the change, then the \"uncontroversial\" criteria is violated and then\ncredibility is lost. So a new governance model would be required for which\nthe change is within the established rules.\n\n2) respond to his technical objections one after the other, on never ending\nthreads, bringing the project to a standstill.\n\nAs I don't want 2) to happen, then 1) must happen, which is what Mike\nwants. I have nothing for or against Mike personally. I just think Mike\nHearn has won this battle. But having a more formal decision making process\nmay not be too bad for Bitcoin, maybe it can actually be good.\n\nBest regards\n from a non-developer to my dearest developer friends,\n  Sergio.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/4d07e31d/attachment.html>"
            },
            {
                "author": "NxtChg",
                "date": "2015-10-05T16:39:53",
                "message_text_only": ">I just think Mike Hearn has won this battle.\n\nUnless the Core camp isn't concerned with credibility because they see XT as a disruptive attack.\n\nSo it's very easy to justify banning a single individual in the name of \"restoring peace and order\". We've already seen such suggestion.\n\nPeter R was banned on /r/bitcoin, Mike was banned on IRC.\n\nThe new governance model seems to be \"consensus by exclusion\"."
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-05T16:51:57",
                "message_text_only": "On Monday, October 05, 2015 3:56:33 PM Sergio Demian Lerner via bitcoin-dev \nwrote:\n> Some of the people on this mailing list are blindly discussing the\n> technicalities of a soft/hard fork without realizing that is not Mike's\n> main intention. At least I perceive (and maybe others too) something else\n> is happening.\n> \n> Let me try to clarify: the discussion has nothing to do with technical\n> arguments. I generally like more hard forks than soft forks (but I won't\n> explain why because this is not a technical thread), but for CLTV this is\n> quite irrelevant (but I won't explain why..), and I want CLTV to be\n> deployed asap.\n> \n> Mike's intention is to criticize the informal governance model of Bitcoin\n> Core development and he has strategically pushed the discussion to a\n> dead-end where the group either:\n> \n> 1) ignores him, which is against the established criteria that all\n> technical objections coming from anyone must be addressed until that person\n> agrees, so that a change can be uncontroversial. If the group moves forward\n> with the change, then the \"uncontroversial\" criteria is violated and then\n> credibility is lost. So a new governance model would be required for which\n> the change is within the established rules.\n> \n> 2) respond to his technical objections one after the other, on never ending\n> threads, bringing the project to a standstill.\n> \n> As I don't want 2) to happen, then 1) must happen, which is what Mike\n> wants. I have nothing for or against Mike personally. I just think Mike\n> Hearn has won this battle. But having a more formal decision making process\n> may not be too bad for Bitcoin, maybe it can actually be good.\n\nThis discussion is *necessarily* about soft/hard fork technicalities, as \nthere is no governance in Bitcoin beyond the *nature* of the consensus \nprotocol. The \"established criteria\" you mention is merely the nature of \nhardforks. It is completely inapplicable and has never been the necessary \ncase for softforks, which can be enforced by merely a miner majority.\n\nLuke"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-05T16:56:38",
                "message_text_only": "Hey Sergio,\n\nTo clarify: my *single* objection is that CLTV should be a hard fork. I\nhaven't been raising never-ending technical objections, there's only one.\n\nI *have* been answering all the various reasons being brought up why I'm\nwrong and soft forks are awesome .... and there do seem to be a limitless\nnumber of such emails .... but on my side it's still just a single\nobjection. If CLTV is a hard fork then I won't be objecting anymore, right?\n\nCLTV deployment is clearly controversial. Many developers other than me\nhave noted that hard forks are cleaner, and have other desirable\nproperties. I'm not the only one who sees a big question mark over soft\nforks.\n\nAs everyone in the Bitcoin community has been clearly told that\ncontroversial changes to the consensus rules must not happen, it's clear\nthat CLTV cannot happen in its current form.\n\nNow I'll be frank - you are quite correct that I fully expect the Core\nmaintainers to ignore this controversy and do CLTV as a soft fork anyway.\nI'm a cynic. I don't think \"everyone must agree\" is workable and have said\nso from the start. Faced with a choice of going back on their public\nstatements or having to make changes to something they clearly want, I\nexpect them to redefine what \"real consensus\" means. I hope I'm wrong, but\nif I'm not ..... well, at least everyone will see what Gavin and I have\nbeen talking about for so many months.\n\nBut I'd rather the opcode is tweaked. There's real financial risks to a\nsoft fork.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/ea317e9d/attachment-0001.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2015-10-05T17:01:39",
                "message_text_only": "On 10/5/2015 12:56 PM, Mike Hearn via bitcoin-dev wrote:\n>\n> As everyone in the Bitcoin community has been clearly told that\n> controversial changes to the consensus rules must not happen, it's\n> clear that CLTV cannot happen in its current form."
            },
            {
                "author": "Peter R",
                "date": "2015-10-05T17:33:55",
                "message_text_only": "Dear Bitcoin Development Community:\n\nI would like to share my opinion that Mike is correct regarding the soft fork versus hard fork debate. I agree that CLTV should be done with a hard fork for the reasons that Mike has discussed several times in the past (mainly that a hard forks requires active consensus while a soft fork requires only indifference).  I believe this is a controversial change and\u2014if Core Dev believes that controversial changes to the consensus rules must not happen\u2014then my interpretation is that CLTV should not happen in its current form.  \n\nI also agree with Mike that Core's requirement for unanimous consensus results in development grid lock and should be revisited.  In my opinion, the idea that unanimity is required should be replaced with the idea that the longest chain composed of valid transactions is the correct chain.  It shouldn\u2019t matter really how the chain becomes the longest\u2014only that it does.  \n\nI believe that a good way to return power to the bitcoin community is to foster mutiple forkwise-compatible implementations of the protocol.  Each implementation could have its own governance model and design objectives and use techniques like BIP101\u2019s 750/1000 signalling mechanism to activate changes that may be desirable to the community.  If a super majority does not support the change, then it won\u2019t be activated.  I created an animated GIF that visualizes one possibility for how multiple protocol implementations might emerge over time:\n\nhttps://www.reddit.com/r/bitcoinxt/comments/3nhq9t/deprecating_bitcoin_core_visualizing_the/ <https://www.reddit.com/r/bitcoinxt/comments/3nhq9t/deprecating_bitcoin_core_visualizing_the/>\n\nDecentralizing development and supporting multiple forkwise-compatible implementations of the protocol is a worthwhile goal that will simultaneously make Bitcoin more robust and more responsive to the will of the market.\n\nNodes would express their acceptance of a block by mining on top of it.  Consensus would be determined by the code we choose to run. \n\nBest regards,\nPeter \n\n\n> On Oct 5, 2015, at 10:01 AM, Paul Sztorc via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On 10/5/2015 12:56 PM, Mike Hearn via bitcoin-dev wrote:\n>> \n>> As everyone in the Bitcoin community has been clearly told that\n>> controversial changes to the consensus rules must not happen, it's\n>> clear that CLTV cannot happen in its current form.\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/c03eef97/attachment-0001.html>"
            },
            {
                "author": "NxtChg",
                "date": "2015-10-05T17:56:20",
                "message_text_only": ">Each implementation could have its own governance model \n>and design objectives and use techniques like BIP101\u2019s 750/1000 \n>signalling mechanism to activate changes that may be desirable to \n>the community.\n\nI was shushed here 3 months ago for the same suggestion :)\n\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-July/009294.html"
            },
            {
                "author": "Btc Drak",
                "date": "2015-10-05T22:56:27",
                "message_text_only": "On Mon, Oct 5, 2015 at 6:33 PM, Peter R via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I also agree with Mike that Core's requirement for unanimous consensus\n> results in development grid lock and should be revisited.\n>\n\nThere is no development gridlock. Look at the IRC logs for core-dev; look\nat the pull requests; look a the merge history: Development is vibrant.\nDevelopers are very active. You are manufacturing a crisis convenient to\nyour narrative, but it is far from the actual reality on the ground.\n\nPlease desist from this intellectual dishonesty and toxicity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/4d591b1b/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-05T23:05:51",
                "message_text_only": "On 10/5/2015 6:56 PM, Btc Drak via bitcoin-dev wrote:\n> There is no development gridlock. Look at the IRC logs for core-dev;\n\n> Please desist from this intellectual dishonesty and toxicity.\n\nA system where anyone can veto a change promotes gridlock.  Most people \nnot on the devlpoment team see the block size debate as \"gridlock.\" \nMuch like \"spam\" \"attack\" and \"decentralized\" everyone has their own \ndefinition so arguing over it is generally pointless.\n\nRuss"
            },
            {
                "author": "Btc Drak",
                "date": "2015-10-05T17:35:53",
                "message_text_only": "On Mon, Oct 5, 2015 at 5:56 PM, Mike Hearn via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> CLTV deployment is clearly controversial. Many developers other than me\n> have noted that hard forks are cleaner, and have other desirable\n> properties. I'm not the only one who sees a big question mark over soft\n> forks.\n>\n\nNo, that is not correct and you are distorting facts to fit your argument.\nWe have discussed the tradeoffs of each method in general, but that does\nnot make hard forks or soft forks controversial in an of itself.\n\nThere is technical consensus to roll out CLTV by ISM, and if somehow you\nare right, it will come out during deployment in much the same way as your\nrecent attempt at rolling out a controversial hardfork.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/45f8c2cb/attachment.html>"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-10-06T18:23:33",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nTell you what, eloquent guy...\n\nGive me 15 minutes in a public open mic session with you and i'll\nremove you from your high horse and close your voice in Bitcoin, for\ngood.\n\nGuaranteed. You're too stupid for me to let you run loose with client\nfunds and this great innovation.\n\nAnytime, anywhere. I'm ready to dismantle your intellectual bankruptcy\nin front of the world.\n\nI'll go for your psychological throat first.\n\nSincerely,\nVenzen Khaosan.\n\n\n\nOn 10/05/2015 11:56 PM, Mike Hearn via bitcoin-dev wrote:\n> Hey Sergio,\n> \n> To clarify: my /single/ objection is that CLTV should be a hard\n> fork. I haven't been raising never-ending technical objections,\n> there's only one.\n> \n> I /have/ been answering all the various reasons being brought up\n> why I'm wrong and soft forks are awesome .... and there do seem to\n> be a limitless number of such emails .... but on my side it's still\n> just a single objection. If CLTV is a hard fork then I won't be\n> objecting anymore, right?\n> \n> CLTV deployment is clearly controversial. Many developers other\n> than me have noted that hard forks are cleaner, and have other\n> desirable properties. I'm not the only one who sees a big question\n> mark over soft forks.\n> \n> As everyone in the Bitcoin community has been clearly told that \n> controversial changes to the consensus rules must not happen, it's\n> clear that CLTV cannot happen in its current form.\n> \n> Now I'll be frank - you are quite correct that I fully expect the\n> Core maintainers to ignore this controversy and do CLTV as a soft\n> fork anyway. I'm a cynic. I don't think \"everyone must agree\" is\n> workable and have said so from the start. Faced with a choice of\n> going back on their public statements or having to make changes to\n> something they clearly want, I expect them to redefine what \"real\n> consensus\" means. I hope I'm wrong, but if I'm not ..... well, at\n> least everyone will see what Gavin and I have been talking about\n> for so many months.\n> \n> But I'd rather the opcode is tweaked. There's real financial risks\n> to a soft fork.\n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBAgAGBQJWFBGjAAoJEGwAhlQc8H1mn2cH/0pTx1C0FK8shPSPaC3xB6sA\nDpGTMrLWNai3i9VTwkUw8UvbqeL2QtZDghPdkDcvbmvOMc3UrOMQbc1eQ1eL6i3g\nDiUCqUShOIAIvWJXGPTPNBulWBW9VkgK0y3uOprTd5D0VWKpWvDj+DMNqHaAC2Ab\nJAfHx0mHlkTfrcBl30eAJWxoqG/ohu5QvTIP64AsK6w53qlbMcB13cES8mS/HJX9\nMUtBcCbYRfF3Gu+OeYaEzzzXeuwsqql9qHr2wZYe9rECkSmYgL0DT5+WZiLY8B/x\nE3dFtufR7yAHr91/gj9itOKf+unumhduX8LY8ubuIKmuwjdj30MDdNy7fqZ3uGs=\n=lftV\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-10-06T18:28:41",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nThat's for Mike Hearn. Sooner the better. Hong Kong, December?\nVenzen Khaosan\n\n\nOn 10/07/2015 01:23 AM, Venzen Khaosan via bitcoin-dev wrote:\n> Tell you what, eloquent guy...\n> \n> Give me 15 minutes in a public open mic session with you and i'll \n> remove you from your high horse and close your voice in Bitcoin,\n> for good.\n> \n> Guaranteed. You're too stupid for me to let you run loose with\n> client funds and this great innovation.\n> \n> Anytime, anywhere. I'm ready to dismantle your intellectual\n> bankruptcy in front of the world.\n> \n> I'll go for your psychological throat first.\n> \n> Sincerely, Venzen Khaosan.\n> \n> \n> \n> On 10/05/2015 11:56 PM, Mike Hearn via bitcoin-dev wrote:\n>> Hey Sergio,\n> \n>> To clarify: my /single/ objection is that CLTV should be a hard \n>> fork. I haven't been raising never-ending technical objections, \n>> there's only one.\n> \n>> I /have/ been answering all the various reasons being brought up \n>> why I'm wrong and soft forks are awesome .... and there do seem\n>> to be a limitless number of such emails .... but on my side it's\n>> still just a single objection. If CLTV is a hard fork then I\n>> won't be objecting anymore, right?\n> \n>> CLTV deployment is clearly controversial. Many developers other \n>> than me have noted that hard forks are cleaner, and have other \n>> desirable properties. I'm not the only one who sees a big\n>> question mark over soft forks.\n> \n>> As everyone in the Bitcoin community has been clearly told that \n>> controversial changes to the consensus rules must not happen,\n>> it's clear that CLTV cannot happen in its current form.\n> \n>> Now I'll be frank - you are quite correct that I fully expect\n>> the Core maintainers to ignore this controversy and do CLTV as a\n>> soft fork anyway. I'm a cynic. I don't think \"everyone must\n>> agree\" is workable and have said so from the start. Faced with a\n>> choice of going back on their public statements or having to make\n>> changes to something they clearly want, I expect them to redefine\n>> what \"real consensus\" means. I hope I'm wrong, but if I'm not\n>> ..... well, at least everyone will see what Gavin and I have been\n>> talking about for so many months.\n> \n>> But I'd rather the opcode is tweaked. There's real financial\n>> risks to a soft fork.\n> \n> \n>> _______________________________________________ bitcoin-dev\n>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBAgAGBQJWFBLWAAoJEGwAhlQc8H1mRM8H/0p2sz0gtu62bB+NrllRgU20\nC4imzMr904X7JicqDsGhtySGdyk8DuHBSK4k1A3pOgPb+DoNQhcOUfZ2ZTNgR2tT\nyjJHrJP2X+g8YixyQiQNBf65bogTgeBGEizh/H33RSGzdHwoIfeVS5Qja/AMUnk1\n4XO8d+t5OdtYdKANmR/uUZikrnOXd6KIt9rmJhYUjqmLWXbHzQkhES0mFvJ1BdVZ\nZHNjnWzoE74NAEmPqhhhtU/GCFKQhBq7HHAnqkMoeWk0mgJoGCc+b/4/PwchmUJq\nCmVO2TJFrnHb4tYAFgw14tdbSe5ERYT0pHW4qM3gJlYL1ik03k0iQDZZ0eStaXM=\n=bwvw\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "naama.kates at gmail.com",
                "date": "2015-10-06T19:34:39",
                "message_text_only": "Hey all, nice to meet you... I'm new to the community and thus, after taking that first step of signing up, have been reading/scanning these threads over the last few days without contributing my own two \u00a2-- not, um, 'trolling', just, you know, educating myself and getting familiar with the group ethos and etiquette.  \n\nIt wasn't until I'd read ~10 posts that I  understood the initial purpose of the thread!  As few others have mentioned, I'm a bit surprised, at all the back and forth \u00e0 la hip-hop 'battling' ;-) It certainly obfuscates-- while entertaining-- to the point where a newbie like myself might drop out... Perhaps this is intentional-- to maintain exclusivity and weed out the uninitiated.  I dunno.  But if not, I'm just noting, as something of an outsider, that it took a while.\n\nBut I'd like to contribute.  With what little knowledge I possess, I'm inclined to favor hardfork... Is there a more suitable place to address this?  Perhaps to work on code?  For this specific project, that is...  Anyone point me to a map somewhere?  LOL.\n\nThanks to all for reading, and much admiration to you all and the work you've done, my latter comments notwithstanding!  \n\nCheers,\nN\n\n\n\n> On Oct 6, 2015, at 11:28 AM, Venzen Khaosan via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n> \n> That's for Mike Hearn. Sooner the better. Hong Kong, December?\n> Venzen Khaosan\n> \n> \n>> On 10/07/2015 01:23 AM, Venzen Khaosan via bitcoin-dev wrote:\n>> Tell you what, eloquent guy...\n>> \n>> Give me 15 minutes in a public open mic session with you and i'll \n>> remove you from your high horse and close your voice in Bitcoin,\n>> for good.\n>> \n>> Guaranteed. You're too stupid for me to let you run loose with\n>> client funds and this great innovation.\n>> \n>> Anytime, anywhere. I'm ready to dismantle your intellectual\n>> bankruptcy in front of the world.\n>> \n>> I'll go for your psychological throat first.\n>> \n>> Sincerely, Venzen Khaosan.\n>> \n>> \n>> \n>>> On 10/05/2015 11:56 PM, Mike Hearn via bitcoin-dev wrote:\n>>> Hey Sergio,\n>> \n>>> To clarify: my /single/ objection is that CLTV should be a hard \n>>> fork. I haven't been raising never-ending technical objections, \n>>> there's only one.\n>> \n>>> I /have/ been answering all the various reasons being brought up \n>>> why I'm wrong and soft forks are awesome .... and there do seem\n>>> to be a limitless number of such emails .... but on my side it's\n>>> still just a single objection. If CLTV is a hard fork then I\n>>> won't be objecting anymore, right?\n>> \n>>> CLTV deployment is clearly controversial. Many developers other \n>>> than me have noted that hard forks are cleaner, and have other \n>>> desirable properties. I'm not the only one who sees a big\n>>> question mark over soft forks.\n>> \n>>> As everyone in the Bitcoin community has been clearly told that \n>>> controversial changes to the consensus rules must not happen,\n>>> it's clear that CLTV cannot happen in its current form.\n>> \n>>> Now I'll be frank - you are quite correct that I fully expect\n>>> the Core maintainers to ignore this controversy and do CLTV as a\n>>> soft fork anyway. I'm a cynic. I don't think \"everyone must\n>>> agree\" is workable and have said so from the start. Faced with a\n>>> choice of going back on their public statements or having to make\n>>> changes to something they clearly want, I expect them to redefine\n>>> what \"real consensus\" means. I hope I'm wrong, but if I'm not\n>>> ..... well, at least everyone will see what Gavin and I have been\n>>> talking about for so many months.\n>> \n>>> But I'd rather the opcode is tweaked. There's real financial\n>>> risks to a soft fork.\n>> \n>> \n>>> _______________________________________________ bitcoin-dev\n>>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> _______________________________________________ bitcoin-dev mailing\n>> list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v2.0.22 (GNU/Linux)\n> \n> iQEcBAEBAgAGBQJWFBLWAAoJEGwAhlQc8H1mRM8H/0p2sz0gtu62bB+NrllRgU20\n> C4imzMr904X7JicqDsGhtySGdyk8DuHBSK4k1A3pOgPb+DoNQhcOUfZ2ZTNgR2tT\n> yjJHrJP2X+g8YixyQiQNBf65bogTgeBGEizh/H33RSGzdHwoIfeVS5Qja/AMUnk1\n> 4XO8d+t5OdtYdKANmR/uUZikrnOXd6KIt9rmJhYUjqmLWXbHzQkhES0mFvJ1BdVZ\n> ZHNjnWzoE74NAEmPqhhhtU/GCFKQhBq7HHAnqkMoeWk0mgJoGCc+b/4/PwchmUJq\n> CmVO2TJFrnHb4tYAFgw14tdbSe5ERYT0pHW4qM3gJlYL1ik03k0iQDZZ0eStaXM=\n> =bwvw\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Btc Drak",
                "date": "2015-10-05T17:03:05",
                "message_text_only": "You are absolutely right and this is something I have often unsuccessfully\ntried to explain as \"disruption strategies\". The problem is that most\npeople in the technical community assume good faith at all times, which\nplays right into the frame required for disruption.\n\nHowever, I would like to challenge your assumption of point 1 that that by\nMike making a rabble, it somehow makes CLTV deployment controversial. His\narguments have  been refuted.\n\nMike has not presented anything convincing and history actually shows that\nISM works, and we have learned how to make it even more streamlined. We\nknow ISM has consensus because miners have accepted ISM for past softfork\nrollouts.\n\nSimply making a noise does not make something controversial. When it is\ncontroversial, it is obvious and plain to see.\n\nOn Mon, Oct 5, 2015 at 4:56 PM, Sergio Demian Lerner via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Some of the people on this mailing list are blindly discussing the\n> technicalities of a soft/hard fork without realizing that is not Mike's\n> main intention. At least I perceive (and maybe others too) something else\n> is happening.\n>\n> Let me try to clarify: the discussion has nothing to do with technical\n> arguments. I generally like more hard forks than soft forks (but I won't\n> explain why because this is not a technical thread), but for CLTV this is\n> quite irrelevant (but I won't explain why..), and I want CLTV to be\n> deployed asap.\n>\n> Mike's intention is to criticize the informal governance model of Bitcoin\n> Core development and he has strategically pushed the discussion to a\n> dead-end where the group either:\n>\n> 1) ignores him, which is against the established criteria that all\n> technical objections coming from anyone must be addressed until that person\n> agrees, so that a change can be uncontroversial. If the group moves forward\n> with the change, then the \"uncontroversial\" criteria is violated and then\n> credibility is lost. So a new governance model would be required for which\n> the change is within the established rules.\n>\n> 2) respond to his technical objections one after the other, on never\n> ending threads, bringing the project to a standstill.\n>\n> As I don't want 2) to happen, then 1) must happen, which is what Mike\n> wants. I have nothing for or against Mike personally. I just think Mike\n> Hearn has won this battle. But having a more formal decision making process\n> may not be too bad for Bitcoin, maybe it can actually be good.\n>\n> Best regards\n>  from a non-developer to my dearest developer friends,\n>   Sergio.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/a541ef59/attachment.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-05T17:26:12",
                "message_text_only": "On Monday 5. October 2015 18.03.05 Btc Drak via bitcoin-dev wrote:\n> However, I would like to challenge your assumption of point 1 that that by\n> Mike making a rabble, it somehow makes CLTV deployment controversial. His\n> arguments have  been refuted.\n\nUnsuccessfully.\n\n> Simply making a noise does not make something controversial. When it is\n> controversial, it is obvious and plain to see.\n\nI think its plain to see the soft fork is controversial.\n\nBut that\u2019s not the point.\n\nThe point is that Bitcoin Core claims to have a consensus mechanism and sticks \nto \"no change\" on not reaching a consensus. And that rule is the reason why \nbigger blocks were blocked for years.\n\nHistory has shown that for many decision making processes this doesn't work, \nand this argument has been made to Core. \nUntil today this was essentially a rule that hurt the things that Mike was \nreally passionate about.\nToday this hurts the things that some other devs are passionate about.\n\nI think today is the day that everyone should agree that the past is the past \nand we all learned our lesson and Bitcoin Core will make decisions a different \nway."
            },
            {
                "author": "Btc Drak",
                "date": "2015-10-05T17:52:25",
                "message_text_only": "On Mon, Oct 5, 2015 at 6:26 PM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> History has shown that for many decision making processes this doesn't\n> work,\n> and this argument has been made to Core.\n> Until today this was essentially a rule that hurt the things that Mike was\n> really passionate about.\n> Today this hurts the things that some other devs are passionate about.\n>\n\nIf you are referring to some of Mike's PRs that were either refused or\nreverted, it was because they where substantial technical objections to\nthem. This isn't even in the same ballpark.\n\nSurely you see the absurdity of arguing against soft forks after we\nsuccessfully used them already for BIP34 and BIP66?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/bc7c4a65/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-05T18:04:48",
                "message_text_only": "On Mon, Oct 5, 2015 at 5:26 PM, Tom Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Monday 5. October 2015 18.03.05 Btc Drak via bitcoin-dev wrote:\n>> However, I would like to challenge your assumption of point 1 that that by\n>> Mike making a rabble, it somehow makes CLTV deployment controversial. His\n>> arguments have  been refuted.\n>\n> Unsuccessfully.\n\nI think rather successfully. That Mike himself continues to misexplain\nthings is not surprising since he has all but outright said that his\nmotivation here is to disrupt Bitcoin in order to try to force his\nblocksize hardfork on people. Since this motivation is uncorrelated\nwith any property of soft-forks or CLTV we should not expect his\nposition to change.\n\n> The point is that Bitcoin Core claims to have a consensus mechanism and sticks\n> to \"no change\" on not reaching a consensus. And that rule is the reason why\n> bigger blocks were blocked for years.\n\nYou're repeating Mike's claims there-- not anyone elses. Take your\ncomplaint up with him-- not the list."
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-05T18:33:00",
                "message_text_only": "On Monday 5. October 2015 18.04.48 Gregory Maxwell wrote:\n> > Unsuccessfully.\n> \n> I think rather successfully.\n\nArguing that BIP66 rollout was a full success is in the same park of \n\"successful\" ?\nWhere for weeks people were told not to trust the longest chain until it was \n30 blocks.\nLets put that in perspective. The main functionality of Bitcoin  \nFrankly, if that fiasco happened in a company, people would get fired for \ngross misconduct.\n\nBottom line is that there is a horrible track record of doing soft forks in \nthe past, there are some really good technical reasons why this should not \nhappen again. \n\nAnd the defence against this argument is to do character assassination because \nyou think he has ulterior motives?  Like you say in this part;\n\n> That Mike himself continues to misexplain\n> things is not surprising since he has all but outright said that his\n> motivation here is to disrupt Bitcoin in order to try to force his\n> blocksize hardfork on people. \n\n\"all but outright said\" is still not said. Is still just a suspicion you have. \nAnd you are accusing a man of something he didn't do.\nThat\u2019s just not right.\n\n> > The point is that Bitcoin Core claims to have a consensus mechanism and\n> > sticks to \"no change\" on not reaching a consensus. And that rule is the\n> > reason why bigger blocks were blocked for years.\n> \n> You're repeating Mike's claims there-- not anyone elses. Take your\n> complaint up with him-- not the list.\n\nThere is no complaint. Why do you think there is?\nAre you claiming that not reaching consensus is NOT the reason that bigger \nblocks are not in Bitcoin Core?\n\n\nReaching consensus is an admirable goal. But its exactly that, a goal.\nAnd anyone that is a perfectionist will know that in the real world goals are \noften not reached. That doesn't make them less useful. That makes them goals.\nThis specific goal is in conflict of building a good product and a well \nfunctioning community.\n\nA good product and a well functioning community needs rules and needs timely \ndecisions and conflict resolution.\nIt does not need muting of valuable voices, it does not need character \nassassinations and it really doesn't need egos.\n\nI suggest reading this book;\nhttp://www.artofcommunityonline.org/"
            },
            {
                "author": "NotMike Hearn",
                "date": "2015-10-05T18:50:54",
                "message_text_only": "For soft forks, consensus is required. In fact, we (today) have miners who\nindividually choose to mine blocks that are completely empty, with no known\ninput from (or communication with) the outside world. This is a consensus\nprocess. Users can switch back and forth all they like, and this only\nhappens when there is unanimous miner-developer consensus. Most of the time\nthey don't even know, that they are under consensus.\n\nIt is only \"controversial hard forks\" which DON'T require wide agreement\nand developer endorsements. Hear me out.\n\nThis is because, with zero dev-agreement, we have two benefits: first,\nthere are tremendous security issues which can be fixed by trying more than\none hard fork at once (these fixes can prevent loss of funds), and, second,\nbecause each fork is equally Acked and Nacked (a Schrodinger's Ack, if you\nwill), they will have equal standing, and therefore users will be equally\nindifferent to both forks and they will both live for a long time (and\nusers will be able to pick the fork that best fits them, empowering the\nuser).\n\nPeople have overlooked how simple this issue is because of the political\nclimate. We need a climate change, pardon the pun.\n\nOn Mon, Oct 5, 2015 at 2:33 PM, Tom Zander via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Monday 5. October 2015 18.04.48 Gregory Maxwell wrote:\n> > > Unsuccessfully.\n> >\n> > I think rather successfully.\n>\n> Arguing that BIP66 rollout was a full success is in the same park of\n> \"successful\" ?\n> Where for weeks people were told not to trust the longest chain until it\n> was\n> 30 blocks.\n> Lets put that in perspective. The main functionality of Bitcoin\n> Frankly, if that fiasco happened in a company, people would get fired for\n> gross misconduct.\n>\n> Bottom line is that there is a horrible track record of doing soft forks in\n> the past, there are some really good technical reasons why this should not\n> happen again.\n>\n> And the defence against this argument is to do character assassination\n> because\n> you think he has ulterior motives?  Like you say in this part;\n>\n> > That Mike himself continues to misexplain\n> > things is not surprising since he has all but outright said that his\n> > motivation here is to disrupt Bitcoin in order to try to force his\n> > blocksize hardfork on people.\n>\n> \"all but outright said\" is still not said. Is still just a suspicion you\n> have.\n> And you are accusing a man of something he didn't do.\n> That\u2019s just not right.\n>\n> > > The point is that Bitcoin Core claims to have a consensus mechanism and\n> > > sticks to \"no change\" on not reaching a consensus. And that rule is the\n> > > reason why bigger blocks were blocked for years.\n> >\n> > You're repeating Mike's claims there-- not anyone elses. Take your\n> > complaint up with him-- not the list.\n>\n> There is no complaint. Why do you think there is?\n> Are you claiming that not reaching consensus is NOT the reason that bigger\n> blocks are not in Bitcoin Core?\n>\n>\n> Reaching consensus is an admirable goal. But its exactly that, a goal.\n> And anyone that is a perfectionist will know that in the real world goals\n> are\n> often not reached. That doesn't make them less useful. That makes them\n> goals.\n> This specific goal is in conflict of building a good product and a well\n> functioning community.\n>\n> A good product and a well functioning community needs rules and needs\n> timely\n> decisions and conflict resolution.\n> It does not need muting of valuable voices, it does not need character\n> assassinations and it really doesn't need egos.\n>\n> I suggest reading this book;\n> http://www.artofcommunityonline.org/\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/ff7bea8c/attachment-0001.html>"
            },
            {
                "author": "s7r",
                "date": "2015-10-05T17:33:04",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nHello,\n\nFirst, this only makes reference to hard forks not to soft forks. This\nis very important because we are trying to apply a hard fork\nrequirement to a soft fork procedure which obviously won't work.\n\nYour statement that 'all objections coming from anyone must be\naddressed until that person agrees' is not applicable in reality. What\nif that person objecting is explained several times, with plausible\nand verifiable technical arguments, and that person still doesn't\nagree (either on purpose, either really doesn't understand the\nexplanations)? What will we do in this case? Assume it's controversial\nbecause someone refuses to or simply doesn't understand? This seams at\nleast a little bit unfair.\n\nIt's like we are in a court room where a text from a law (like this\nrequirement from that BIP) can be twisted and interpreted in various\nway in an endless debate. We cannot apply everything as-it-is-stated\nword-by-word and apply it _blindly_ like robots in every situation,\neverything always depends on context and other factors.\n\nFor example, I don't see this controversial nor a violation of the BIP\nrequirements. Mike had some fair objections, they were explained by\ngmaxwell and Jorge, everybody understood. The explanation is clear,\nwith plausible practical examples, so from my point of view the\nobjections have no arguments to sustain the claim. I don't see\nanything controversial here. Now of course it's Mike's right to reject\nthose explanations, but what's the 'controversial' here?\n\nOn 10/5/2015 6:56 PM, Sergio Demian Lerner via bitcoin-dev wrote:\n> Some of the people on this mailing list are blindly discussing the \n> technicalities of a soft/hard fork without realizing that is not\n> Mike's main intention. At least I perceive (and maybe others too)\n> something else is happening.\n> \n> Let me try to clarify: the discussion has nothing to do with\n> technical arguments. I generally like more hard forks than soft\n> forks (but I won't explain why because this is not a technical\n> thread), but for CLTV this is quite irrelevant (but I won't explain\n> why..), and I want CLTV to be deployed asap.\n> \n> Mike's intention is to criticize the informal governance model of \n> Bitcoin Core development and he has strategically pushed the\n> discussion to a dead-end where the group either:\n> \n> 1) ignores him, which is against the established criteria that all \n> technical objections coming from anyone must be addressed until\n> that person agrees, so that a change can be uncontroversial. If the\n> group moves forward with the change, then the \"uncontroversial\"\n> criteria is violated and then credibility is lost. So a new\n> governance model would be required for which the change is within\n> the established rules.\n> \n> 2) respond to his technical objections one after the other, on\n> never ending threads, bringing the project to a standstill.\n> \n> As I don't want 2) to happen, then 1) must happen, which is what\n> Mike wants. I have nothing for or against Mike personally. I just\n> think Mike Hearn has won this battle. But having a more formal\n> decision making process may not be too bad for Bitcoin, maybe it\n> can actually be good.\n> \n> Best regards from a non-developer to my dearest developer friends, \n> Sergio.\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBCAAGBQJWErRQAAoJEIN/pSyBJlsRxJMIAI9eoPny6B2VOH/wSkfeeVbu\nbZ+0ZBLfDIwzQ2Tqn0DZQ8TWHfHPHacA7IxtTRnkSqPTMcDUgZ5/URBE4Tt8p2F2\nzDda0NjqMUIJIBkLHRHzApRTK+BcshtarSbGJOr7HUaOb2hyDnQp1bzOMPGpIdTq\nYA5EY39SdzzJaF7uto/bhFj6g51kdxux2epbmbaJjUHFUO1+6RAw/irI6hkyzWzi\nVS8l6ZpXiaV3Y1pU+Nc60sa4GacYwKvFmvve7DTIYVsPV6KzJmbT924n5TW3191H\nJBxRnUUqoWEae/h85pOQiYbJGX/EtXOmy2CZcGm0TkL3vXsAwxiDQyz8NlNyAOI=\n=ClSy\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-05T18:51:26",
                "message_text_only": "On Monday 5. October 2015 20.33.04 s7r via bitcoin-dev wrote:\n> For example, I don't see this controversial nor a violation of the BIP\n> requirements. Mike had some fair objections, they were explained by\n> gmaxwell and Jorge, everybody understood. The explanation is clear,\n> with plausible practical examples, so from my point of view the\n> objections have no arguments to sustain the claim.\n\nI enjoyed reading them, but I have to admit I'm not convinced and for me the \nobjections stand.\n\nSoftforks are unnecessarily dangerous and I feel entirely avoidable. It is a \nrisk that not worth taking."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-05T18:35:13",
                "message_text_only": "On Mon, Oct 5, 2015 at 3:56 PM, Sergio Demian Lerner via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> 1) ignores him, which is against the established criteria that all technical\n> objections coming from anyone must be addressed until that person agrees, so\n> that a change can be uncontroversial. If the group moves forward with the\n> change, then the \"uncontroversial\" criteria is violated and then credibility\n> is lost. So a new governance model would be required for which the change is\n> within the established rules.\n>\n> 2) respond to his technical objections one after the other, on never ending\n> threads, bringing the project to a standstill.\n\nI don't agree-- I think you've made the mistake of just accepting the\nparticular framing that Mike has provide; one that (no shock) only\nsupports his conclusions.\n\nI am aware of no instance where an active contributor to core has made\nthe claim that no change to consensus can happen without 100% support\n(and doubly so, 100% including people who are expressly trying to\ndisrupt the project by posing opposition which, as you note, is\nlargely unrelated to the merits of the proposals). Mike has lead you\nto believe people have claimed this, but no one has-- it's a view\nwhich is simple, clear, and completely not reflecting reality. Don't\nfall for strawman arguments.\n\nIn this situation it is also a particularly strong apples/oranges comparison:\n\nSoft forks can happen at any time at the whim of miners-- no\ntechnology which we are aware of (beyond the technology of\ncentralization) is able to prevent them-- they are not necessarily\neven detectable; on this basis they are categorically different than\nhard forks.\n\nMoreover, the space of soft-forks the contributors to Bitcoin Core\nwould ever consider is a tiny space of all possible soft-forks, and\nare ones which cannot be rationally understood to meaningfully\nundermine the properties provided by the rules enforced within the\nsoftware; again making them different from some other proposals and of\na lesser concern.\n\nFinally, the behavior of the technology arising from the inherent\ncompatibility, radically lowers (in most of our experience and\nopinion) the cost of deployment; again-- making them different. They\nprevent a industry wide flag day, and tight release synchronization\nwhich is harmful to decentralization promoting software diversity.\n\nAs I think I commented in one of my messages-- I respond to the\ntechnical arguments not because I believe they are earnestly\nmotivated, but because they provide an avenue for learning for myself\nand others. Even someone trying to disrupt the process and nothing\nelse can help us learn by acting as an adversary that causes us to\nextend our minds and understanding. The process for CLTV has been\nongoing for something like a year and a half and has little risk of\nbeing substantially disrupted at this point."
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-05T19:13:35",
                "message_text_only": "Gregory,\n\nyou are good at language and its easy to write eloquent words.\n\nLooking at this little dialog, for instance;\n\nOn Mon, Oct 5, 2015 at 3:56 PM, Sergio Demian Lerner wrote:\n> > 1) ignores him, which is against the established criteria that all\n> > technical objections coming from anyone must be addressed until that\n> > person agrees, so that a change can be uncontroversial.\n[snip]\nOn Monday 5. October 2015 18.35.13 Gregory Maxwell via bitcoin-dev wrote:\n> I am aware of no instance where an active contributor to core has made\n> the claim that no change to consensus can happen without 100% support\n\nThis *seems* to read like the same thing. But it is not.  Your version is more \npolarizing and changes the intent quite dramatically.\n\nIt is an eloquent change, but not really the topic we were discussing. It also \nmakes you attack Mike (calling him out as having a strawman) without basis.\nFor the second time in this thread. \nI would suggest arguing on the topic, not on the man."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-05T19:41:30",
                "message_text_only": "On Mon, Oct 5, 2015 at 7:13 PM, Tom Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> It is an eloquent change, but not really the topic we were discussing. It also\n> makes you attack Mike (calling him out as having a strawman) without basis.\n> For the second time in this thread.\n> I would suggest arguing on the topic, not on the man.\n\nSuch a shame you appear to reserve that wisdom for those you disagree\nwith, biting your tongue when others emit all forms of ad hominem--\nsuch as suggesting we've spent less volunteer time on Bitcoin and thus\nour opinion has less merit (or that we haven't written certian kinds\nof software (even when, ironically, we have!), and thus our opinion\ndoesn't have merit, and so on). I think everyone would benefit from\nit, especially as that kind of correction is best received from\nsomeone who agrees with you.\n\nIn this case, I think, however your correction is also misplaced at\nleast on this message; though I would otherwise welcome it.  I'm not\ncomplaining about the man; but pointing out the behavior of stating an\nopinion no one as held as theirs and attacking it is not a productive\nway to hold a discussion. It's an argument or a behavior, not a\nperson, and beyond calling it bad I attempted to explaining (perhaps\npoorly) why its bad.\n\nWhat Sergio is saying is not the same; Mike argued some established\ncriteria existed where it didn't-- and I was pointing that out; and\ntalking about how the situation here is not very similar to the one\nthat Mike was trying to draw a parallel to. I enumerated a number of\nspecific reasons why this is the case. If the differences between\nSergio's comments and mine are still unclear after this clarification,\nI'd be glad to talk it through with you off-list-- in spite of your\n(welcome) compliments, communication is just fundamentally difficult,\nand no amount eloquence changes that. If there is continued\nmisunderstanding, I do not doubt its my fault; but it's probably not a\ngood use of hundreds/thousands of people's time for you to help me\ninteractively improve my explanation on list. :)"
            },
            {
                "author": "Steven Pine",
                "date": "2015-10-05T20:05:23",
                "message_text_only": "It's pretty clear Mike has turned into  concern troll and bully. He insults\npeople, mischaracterizes others, quibbles over words and definitions and\nhas stated numerous times in other forums he has no interest in building\nconsensus changes he doesn't agree with himself.\n\nHe's lost his integrity and trust and why the core developers waste their\ntime with his antics is beyond me, let Mike fork Bitcoin, develop XT, and\nignore his input on core unless some XT feature is deemed good enough to\nincorporate, that is how a thousand other open source projects deal with\ntrolls like Mike.\nOn Oct 5, 2015 3:41 PM, \"Gregory Maxwell via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mon, Oct 5, 2015 at 7:13 PM, Tom Zander via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > It is an eloquent change, but not really the topic we were discussing.\n> It also\n> > makes you attack Mike (calling him out as having a strawman) without\n> basis.\n> > For the second time in this thread.\n> > I would suggest arguing on the topic, not on the man.\n>\n> Such a shame you appear to reserve that wisdom for those you disagree\n> with, biting your tongue when others emit all forms of ad hominem--\n> such as suggesting we've spent less volunteer time on Bitcoin and thus\n> our opinion has less merit (or that we haven't written certian kinds\n> of software (even when, ironically, we have!), and thus our opinion\n> doesn't have merit, and so on). I think everyone would benefit from\n> it, especially as that kind of correction is best received from\n> someone who agrees with you.\n>\n> In this case, I think, however your correction is also misplaced at\n> least on this message; though I would otherwise welcome it.  I'm not\n> complaining about the man; but pointing out the behavior of stating an\n> opinion no one as held as theirs and attacking it is not a productive\n> way to hold a discussion. It's an argument or a behavior, not a\n> person, and beyond calling it bad I attempted to explaining (perhaps\n> poorly) why its bad.\n>\n> What Sergio is saying is not the same; Mike argued some established\n> criteria existed where it didn't-- and I was pointing that out; and\n> talking about how the situation here is not very similar to the one\n> that Mike was trying to draw a parallel to. I enumerated a number of\n> specific reasons why this is the case. If the differences between\n> Sergio's comments and mine are still unclear after this clarification,\n> I'd be glad to talk it through with you off-list-- in spite of your\n> (welcome) compliments, communication is just fundamentally difficult,\n> and no amount eloquence changes that. If there is continued\n> misunderstanding, I do not doubt its my fault; but it's probably not a\n> good use of hundreds/thousands of people's time for you to help me\n> interactively improve my explanation on list. :)\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/bcabeadc/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-05T20:21:17",
                "message_text_only": "On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:\n> It's pretty clear Mike has turned into  concern troll and bully.\n\n\"troll\" and, even worse, \"concern troll\" are terms generally used by \nteenagers on places like Reddit to complain about someone who doesn't \nagree with them. It is not rally a valid term to use in technical \ndiscussions. Several of the developers on here act as bullies by \nwielding power they have accumulated in a a system which they claim is \ndecentralized.  It is not clear at all so your premise is faulty.\n\n>has stated numerous times in other forums he has no\n> interest in building consensus changes he doesn't agree with himself.\n\nWhat exactly do you expect?  Bitcoin is not a charity, it is built on \nincentives.\n\n> He's lost his integrity and trust and why the core developers\n\nOnly a very small minority of the developers have \"integrity and trust.\" \nMost are pretty irrational and untrustworthy if you look at their \ndiscussions outside of their technical expertise.  Bitcoin is not \nsupposed to have a model where users are not forced to trust a small \ngroup such as the core developers.  It sounds to me like you suggest \ngiving that up the idea of decentralization so you can gain control over \nthe \"official\" software releases.\n\nRuss\n\nRuss"
            },
            {
                "author": "cipher anthem",
                "date": "2015-10-06T07:17:14",
                "message_text_only": "> Sent:\u00a0Monday, October 05, 2015 at 8:21 PM\n> From:\u00a0\"Milly Bitcoin via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n> To:\u00a0bitcoin-dev at lists.linuxfoundation.org\n> Subject:\u00a0Re: [bitcoin-dev] This thread is not about the soft/hard fork technical debate\n> On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:\n>> It's pretty clear Mike has turned into concern troll and bully.\n\n> \"troll\" and, even worse, \"concern troll\" are terms generally used by\n> teenagers on places like Reddit to complain about someone who doesn't\n> agree with them.\n\nThey should substitute troll for cultist so they appear more professional..."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-10-06T07:20:38",
                "message_text_only": "I prefer the term \"clown\".\n\nCan we please move on?\n\n------ Original Message ------\nFrom: \"cipher anthem via bitcoin-dev\" \n<bitcoin-dev at lists.linuxfoundation.org>\nTo: milly at bitcoins.info\nCc: bitcoin-dev at lists.linuxfoundation.org\nSent: 10/6/2015 12:17:14 AM\nSubject: Re: [bitcoin-dev] This thread is not about the soft/hard fork \ntechnical debate\n\n>>  Sent: Monday, October 05, 2015 at 8:21 PM\n>>  From: \"Milly Bitcoin via bitcoin-dev\" \n>><bitcoin-dev at lists.linuxfoundation.org>\n>>  To: bitcoin-dev at lists.linuxfoundation.org\n>>  Subject: Re: [bitcoin-dev] This thread is not about the soft/hard \n>>fork technical debate\n>>  On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:\n>>>  It's pretty clear Mike has turned into concern troll and bully.\n>\n>>  \"troll\" and, even worse, \"concern troll\" are terms generally used by\n>>  teenagers on places like Reddit to complain about someone who doesn't\n>>  agree with them.\n>\n>They should substitute troll for cultist so they appear more \n>professional...\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Marcel Jamin",
                "date": "2015-10-06T07:29:13",
                "message_text_only": "This is childish and very disappointing to see.\n\n2015-10-06 9:20 GMT+02:00 Eric Lombrozo via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> I prefer the term \"clown\".\n>\n> Can we please move on?\n>\n> ------ Original Message ------\n> From: \"cipher anthem via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org>\n> To: milly at bitcoins.info\n> Cc: bitcoin-dev at lists.linuxfoundation.org\n> Sent: 10/6/2015 12:17:14 AM\n> Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork\n> technical debate\n>\n>  Sent: Monday, October 05, 2015 at 8:21 PM\n>>>  From: \"Milly Bitcoin via bitcoin-dev\" <\n>>> bitcoin-dev at lists.linuxfoundation.org>\n>>>  To: bitcoin-dev at lists.linuxfoundation.org\n>>>  Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork\n>>> technical debate\n>>>  On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:\n>>>\n>>>>  It's pretty clear Mike has turned into concern troll and bully.\n>>>>\n>>>\n>>  \"troll\" and, even worse, \"concern troll\" are terms generally used by\n>>>  teenagers on places like Reddit to complain about someone who doesn't\n>>>  agree with them.\n>>>\n>>\n>> They should substitute troll for cultist so they appear more\n>> professional...\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/10d3c219/attachment.html>"
            },
            {
                "author": "NotMike Hearn",
                "date": "2015-10-06T08:34:57",
                "message_text_only": "I think I can solve the debate and give everyone what they want.\n\nSome people want BIP65, others do not.\n\nWe can roll out 65 in a clever way, such that Greg/PeterT can get it, but\nMike and Peter R don't need to have it (both versions can run alongside\neach other). Even better, people can switch back and forth between versions\nas much as they like.\n\nHow might this work? Well, paradoxically, we could do this by *imposing\nadditional constraints* on transaction validation, such that transactions\nmade a very specific certain way will always look valid to non-CLTVers, but\nfor CLTVers they will not be valid unless the CLTV rules are followed. The\nobvious concern is that non-CLTV people might receive invalid payments.\nHowever, their software is already set up to request payments in a non-CLTV\nway, so, luckily, this is actually not a problem at all! SPV clients can\nelect to only connect to nodes which are non-CLTV.\n\nProblem solved!\n\nI am happy to have solved this problem for you all, and ended this discord\nharmoniously. If we all put our heads together, these words of founding\nfather Aretha Franklin will ring true: \"there's nothing we can't overcome\".\n\n\nOn Tue, Oct 6, 2015 at 3:29 AM, Marcel Jamin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> This is childish and very disappointing to see.\n>\n> 2015-10-06 9:20 GMT+02:00 Eric Lombrozo via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org>:\n>\n>> I prefer the term \"clown\".\n>>\n>> Can we please move on?\n>>\n>> ------ Original Message ------\n>> From: \"cipher anthem via bitcoin-dev\" <\n>> bitcoin-dev at lists.linuxfoundation.org>\n>> To: milly at bitcoins.info\n>> Cc: bitcoin-dev at lists.linuxfoundation.org\n>> Sent: 10/6/2015 12:17:14 AM\n>> Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork\n>> technical debate\n>>\n>>  Sent: Monday, October 05, 2015 at 8:21 PM\n>>>>  From: \"Milly Bitcoin via bitcoin-dev\" <\n>>>> bitcoin-dev at lists.linuxfoundation.org>\n>>>>  To: bitcoin-dev at lists.linuxfoundation.org\n>>>>  Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork\n>>>> technical debate\n>>>>  On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:\n>>>>\n>>>>>  It's pretty clear Mike has turned into concern troll and bully.\n>>>>>\n>>>>\n>>>  \"troll\" and, even worse, \"concern troll\" are terms generally used by\n>>>>  teenagers on places like Reddit to complain about someone who doesn't\n>>>>  agree with them.\n>>>>\n>>>\n>>> They should substitute troll for cultist so they appear more\n>>> professional...\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/7173bb2e/attachment.html>"
            },
            {
                "author": "naama.kates at gmail.com",
                "date": "2015-10-06T19:40:25",
                "message_text_only": "Just read the proposal for the dual modes... Think it would be best... Protocol question?  Do we discuss the algorithms here on this forum?  Or...\n\nSorry again for my thick skull!\n\nNina K\n\nSent from my iPhone\n\n> On Oct 6, 2015, at 1:34 AM, NotMike Hearn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> I think I can solve the debate and give everyone what they want.\n> \n> Some people want BIP65, others do not.\n> \n> We can roll out 65 in a clever way, such that Greg/PeterT can get it, but Mike and Peter R don't need to have it (both versions can run alongside each other). Even better, people can switch back and forth between versions as much as they like.\n> \n> How might this work? Well, paradoxically, we could do this by *imposing additional constraints* on transaction validation, such that transactions made a very specific certain way will always look valid to non-CLTVers, but for CLTVers they will not be valid unless the CLTV rules are followed. The obvious concern is that non-CLTV people might receive invalid payments. However, their software is already set up to request payments in a non-CLTV way, so, luckily, this is actually not a problem at all! SPV clients can elect to only connect to nodes which are non-CLTV.\n> \n> Problem solved!\n> \n> I am happy to have solved this problem for you all, and ended this discord harmoniously. If we all put our heads together, these words of founding father Aretha Franklin will ring true: \"there's nothing we can't overcome\".\n> \n> \n>> On Tue, Oct 6, 2015 at 3:29 AM, Marcel Jamin via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> This is childish and very disappointing to see.\n>> \n>> 2015-10-06 9:20 GMT+02:00 Eric Lombrozo via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>:\n>>> I prefer the term \"clown\".\n>>> \n>>> Can we please move on?\n>>> \n>>> ------ Original Message ------\n>>> From: \"cipher anthem via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n>>> To: milly at bitcoins.info\n>>> Cc: bitcoin-dev at lists.linuxfoundation.org\n>>> Sent: 10/6/2015 12:17:14 AM\n>>> Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork technical debate\n>>> \n>>>>>  Sent: Monday, October 05, 2015 at 8:21 PM\n>>>>>  From: \"Milly Bitcoin via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\n>>>>>  To: bitcoin-dev at lists.linuxfoundation.org\n>>>>>  Subject: Re: [bitcoin-dev] This thread is not about the soft/hard fork technical debate\n>>>>>>  On 10/5/2015 4:05 PM, Steven Pine via bitcoin-dev wrote:\n>>>>>>  It's pretty clear Mike has turned into concern troll and bully.\n>>>> \n>>>>>  \"troll\" and, even worse, \"concern troll\" are terms generally used by\n>>>>>  teenagers on places like Reddit to complain about someone who doesn't\n>>>>>  agree with them.\n>>>> \n>>>> They should substitute troll for cultist so they appear more professional...\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> \n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/a9d956f7/attachment-0001.html>"
            },
            {
                "author": "Santino Napolitano",
                "date": "2015-10-05T20:28:00",
                "message_text_only": "While this isn't really the place to discuss it, I respectfully disagree. Mike appears to be making a point concerning Bitcoin protocol authorship and on the perceived value of soft-forks. It doesn't look like simple trolling to me. Mike and Gregory are both extremely intelligent and well-versed in Bitcoin and both should be listened to earnestly and equally while receiving our full professional respect.\n\nAt this stage it's becoming readily apparent to at least me (and without putting words into his mouth it would seem Gavin has experienced a similar realisation; please correct if I'm mistaken) that Bitcoin protocol authorship and individual implementation development need to be separated asap. I have no suggestions for the structure of this separation but as soon as it happens the better, IMO. It's likely messages like this would then no longer be seen on this list and Bitcoin Core developers could focus on their implementation's development free from distraction while other implementers and Core developers could discuss protocol issues in a more relevant forum in a more civilized and constructive manner.\n\n05.10.2015, 23:05, \"Steven Pine via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>:\n> \u00a0It's pretty clear Mike has turned into\u00a0 concern troll and bully. He insults people, mischaracterizes others, quibbles over words and definitions and has stated numerous times in other forums he has no interest in building consensus changes he doesn't agree with himself.\n>\n> \u00a0He's lost his integrity and trust and why the core developers waste their time with his antics is beyond me, let Mike fork Bitcoin, develop XT, and ignore his input on core unless some XT feature is deemed good enough to incorporate, that is how a thousand other open source projects deal with trolls like Mike.\n>\n> \u00a0On Oct 5, 2015 3:41 PM, \"Gregory Maxwell via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \u00a0On Mon, Oct 5, 2015 at 7:13 PM, Tom Zander via bitcoin-dev\n>> \u00a0<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> \u00a0It is an eloquent change, but not really the topic we were discussing. It also\n>>> \u00a0makes you attack Mike (calling him out as having a strawman) without basis.\n>>> \u00a0For the second time in this thread.\n>>> \u00a0I would suggest arguing on the topic, not on the man.\n>>\n>> \u00a0Such a shame you appear to reserve that wisdom for those you disagree\n>> \u00a0with, biting your tongue when others emit all forms of ad hominem--\n>> \u00a0such as suggesting we've spent less volunteer time on Bitcoin and thus\n>> \u00a0our opinion has less merit (or that we haven't written certian kinds\n>> \u00a0of software (even when, ironically, we have!), and thus our opinion\n>> \u00a0doesn't have merit, and so on). I think everyone would benefit from\n>> \u00a0it, especially as that kind of correction is best received from\n>> \u00a0someone who agrees with you.\n>>\n>> \u00a0In this case, I think, however your correction is also misplaced at\n>> \u00a0least on this message; though I would otherwise welcome it.\u00a0 I'm not\n>> \u00a0complaining about the man; but pointing out the behavior of stating an\n>> \u00a0opinion no one as held as theirs and attacking it is not a productive\n>> \u00a0way to hold a discussion. It's an argument or a behavior, not a\n>> \u00a0person, and beyond calling it bad I attempted to explaining (perhaps\n>> \u00a0poorly) why its bad.\n>>\n>> \u00a0What Sergio is saying is not the same; Mike argued some established\n>> \u00a0criteria existed where it didn't-- and I was pointing that out; and\n>> \u00a0talking about how the situation here is not very similar to the one\n>> \u00a0that Mike was trying to draw a parallel to. I enumerated a number of\n>> \u00a0specific reasons why this is the case. If the differences between\n>> \u00a0Sergio's comments and mine are still unclear after this clarification,\n>> \u00a0I'd be glad to talk it through with you off-list-- in spite of your\n>> \u00a0(welcome) compliments, communication is just fundamentally difficult,\n>> \u00a0and no amount eloquence changes that. If there is continued\n>> \u00a0misunderstanding, I do not doubt its my fault; but it's probably not a\n>> \u00a0good use of hundreds/thousands of people's time for you to help me\n>> \u00a0interactively improve my explanation on list. :)\n>> \u00a0_______________________________________________\n>> \u00a0bitcoin-dev mailing list\n>> \u00a0bitcoin-dev at lists.linuxfoundation.org\n>> \u00a0https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \u00a0,\n>\n> \u00a0_______________________________________________\n> \u00a0bitcoin-dev mailing list\n> \u00a0bitcoin-dev at lists.linuxfoundation.org\n> \u00a0https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-05T20:35:05",
                "message_text_only": "On Monday 5. October 2015 19.41.30 Gregory Maxwell wrote:\n> On Mon, Oct 5, 2015 at 7:13 PM, Tom Zander via bitcoin-dev\n> \n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > It is an eloquent change, but not really the topic we were discussing. It\n> > also makes you attack Mike (calling him out as having a strawman) without\n> > basis. For the second time in this thread.\n> > I would suggest arguing on the topic, not on the man.\n> \n> Such a shame you appear to reserve that wisdom for those you disagree\n> with, biting your tongue when others emit all forms of ad hominem--\n\nYou are special only in your eloquent use of the language. Consider yourself \nlucky :)\n\n> In this case, I think, however your correction is also misplaced at\n> least on this message; though I would otherwise welcome it.\n\nI would not expect anything less.\n\n> I'm not complaining about the man;\n> but pointing out the behavior of stating an\n> opinion no one has held as theirs and attacking it is not a productive\n> way to hold a discussion. It's an argument or a behavior, not a\n> person, and beyond calling it bad I attempted to explaining (perhaps\n> poorly) why its bad.\n\nThanks for explaining your thinking.\n\nFortunately I can say that while we certainly value your opinion, when peoples \nopinions are hard to read, as you indicated they can be, we should look at \ntheir actions. The group has followed the consensus rule quite rigorously, \nwhich I applaud.\nBut next to that people like Black and Laan have given strong verbal \nindications confirming the practice you personally keep explaining is not \nreal.\n\n\nWhen I was a little boy of maybe 12 years, I remember reading a short story, \nthat stuck with me.  It was about a man that had vowed to never lie. He was \ninvited to a dinner party and asked to assist with another man's accusation of \na crime he claimed to not have committed.\nThe end result was that the accused man was indeed guilty, but he minced his \nwords so well that every sentence uttered was true. To the layman he seemed \ntruthful and pleasant. Certainly innocent.\nBut to the man that never lied, his stories quickly fell apart as he himself \nhad had years of practice with the same. And the guilty man was jailed.\n\n\nI really enjoy reading your emails and github posts too, they have an \neloquence and a brashness.\n\n>  If there is continued\n> misunderstanding, I do not doubt its my fault; but it's probably not a\n> good use of hundreds/thousands of people's time for you to help me\n> interactively improve my explanation on list.\n\nQuite."
            },
            {
                "author": "Dave Scotese",
                "date": "2015-10-05T20:54:38",
                "message_text_only": "I prefer the hard fork because the complexity introduced by soft forks\nscares me.\n\nAt\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/011309.html\nGregory wrote: \"Security requires a bit of vigilance, inherently.\" and\n[A non-upgraded miner will end up] \"*> producing invalid blocks forever\nuntil** the owner shuts it down and upgrades. * This is the outcome\nguaranteed for absentee miners with a hard fork, but it is not guaranteed\nfor a soft fork.\"\n\nIt seems that the main benefit of a soft-fork is that it allows\nparticipants on the network to keep participating even if they aren't\nvigilant enough to notice and upgrade when that is safest.  Are there other\nreasons that might entice me if that one by itself is not enough?\n\nGregory provided two more: [Using soft-forks] \"radically lowers (in most of\nour experience and\nopinion) the cost of deployment; again-- making them different. They\nprevent a industry wide flag day, and tight release synchronization  which\nis harmful to decentralization promoting software diversity.\"\n\nI understand these benefits.  The cost in complexity is still too high for\nme, and I think most of the pain in \"cost of deployment\", \"industry-wide\nflag days,\" and \"tight release synchronization,\" as well as the\ncentralizing effect of those things can be minimized with waiting periods.\nThe promotion of software diversity offered by soft-forks is pretty cool,\nbut that gets close to messing with fungibility.\n<http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-September/011309.html>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/fdb2dc46/attachment-0001.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-05T20:56:34",
                "message_text_only": "On Mon, Oct 5, 2015 at 8:35 PM, Tom Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Fortunately I can say that while we certainly value your opinion, when peoples\n> opinions are hard to read, as you indicated they can be, we should look at\n> their actions. The group has followed the consensus rule quite rigorously,\n> which I applaud.\n\nWhat \"consensus rule\" do you refer to?\n\nIndeed, I suggest you look to actions-- it's not hard to find changes\nin Bitcoin Core that one contributor or another disliked. Did you try?\n (In this case, I don't even believe we have any regulator\ncontributors that disagree).\n-- even for changes that effected system consensus, in fact. These\nthings were not hard-forks, however, as there never has been one (+/-\nterminology disputes); and part of the point I was making was that the\nstandard for that is different, and that these differences begin with\ntechnological fundamentals."
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-05T21:08:23",
                "message_text_only": "On Monday 5. October 2015 20.56.34 Gregory Maxwell wrote:\n>  (In this case, I don't even believe we have any regulator\n> contributors that disagree).\n\nRegular contributor?\n\nPlease explain how for a fork in the protocol should you only listen to \nregular Bitcoin Core contributors?"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-05T21:16:26",
                "message_text_only": "> Regular contributor?\n>\n> Please explain how for a fork in the protocol should you only listen to\n> regular Bitcoin Core contributors?\n\nThis is an artifact of a small centralized group of developers that \nwants to hold on to power.  This is why there is so much objection to \ndocumenting some sort of process since that would highlight issues such \nas this.\n\nRuss"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-05T21:26:01",
                "message_text_only": "On Mon, Oct 5, 2015 at 9:08 PM, Tom Zander via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Monday 5. October 2015 20.56.34 Gregory Maxwell wrote:\n>>  (In this case, I don't even believe we have any regulator\n>> contributors that disagree).\n>\n> Regular contributor?\n>\n> Please explain how for a fork in the protocol should you only listen to\n> regular Bitcoin Core contributors?\n\nI'm providing some perspective and scope-- referencing again your\ncomment about following actions-- what element of the many dozens of\nresponses suggests to you that _anyone_ is not being listened to?\n\nWhile I'm sure its not intended; your selective editing ends up\nbutchering the meaning---- I pointed out that there have been\ndisputes, even ones involving regular contributors (and, implicitly,\nthat I'm not lying by omission in not mentioning that the dispute was\na joke or from someone well known to attack Bitcoin) or-- in other\nwords, evidence that the disagreement was not less meaningful than\nwhat you're talking about here. That's all, sorry I was unclear again.\n\nDid you see in my message that I invited you to take a look for\nexamples-- I think they're easily found and you would find it\ninformative. I really recommend spending some time looking."
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-06T07:14:35",
                "message_text_only": "On Monday 5. October 2015 21.26.01 Gregory Maxwell wrote:\n> On Mon, Oct 5, 2015 at 9:08 PM, Tom Zander via bitcoin-dev\n> \n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > On Monday 5. October 2015 20.56.34 Gregory Maxwell wrote:\n> >>  (In this case, I don't even believe we have any regulator\n> >> \n> >> contributors that disagree).\n> > \n> > Regular contributor?\n> > \n> > Please explain how for a fork in the protocol should you only listen to\n> > regular Bitcoin Core contributors?\n> \n> I'm providing some perspective and scope-- referencing again your\n> comment about following actions-- what element of the many dozens of\n> responses suggests to you that _anyone_ is not being listened to?\n\nHave you ever been at a meeting where you didn't feel like you were being \nlistened to?\nYou get comments like;\n \u00abI respond to the technical arguments not because I believe they are\n earnestly motivated, but because they provide an avenue for learning for\n myself and others.\u00bb\n\n \u00ab\"there is no gridlock here\u00bb After several respected members stated there is\n disagreement.\n\n \u00abThat Mike himself continues to misexplain things is not surprising since he\n has all but outright said that \u00bb[snip]  Which is putting words in the mouth \nof someone you disagree with.\n\n\nBut what really gives a lot of people here the suggestion that members of the \ncommunity that are against the softfork are not being listened to is the \nsimple undeniable fact that an alternative or a remedy is not even considered.\nThere is no code. There is no question posted by the authors which flags to \nuse.\n\nActions speak much louder than words. Read the topic of this thread!\nThe actions show a disregard for the many objections.  Consensus is not build \nby repeating again and again the arguments that you belief will convince your \ndebate-opponent. It is about reaching a middle ground. If either side of the \ndebate refuses to budge from their position, you have gridlock.\n\nWhat came of the request made to PeterT to document the risks and required \nchanges in wallets should this soft fork continue?\n\nWhy is it soo bad to use a hardfork (with proper voting) instead of a softfork \nthat we are in a place that the Bitcoin Core team is willing to throw out a \nlot of goodwill and show their true colours in hundreds of mails that leave \nthe opposing side of this debate feeling ignored and left out?\n\n\nI don't feel specifically unique or special. Nobody needs to reply to this \nemail. I don't claim peoples time.\n\nAll I'm doing is spelling out what has been living in the back of my head, and \nwith me a great deal of others, about how this is playing out.\n\nIf you choose to ignore this and you force a softfork, I belief you may be \nsurprised at how many active players in the Bitcoin marketplace may see that \nthe \"Bitcoin Core\" team is not an ally any longer.\nIt is good to remember that the graveyards are filled with people that \nbelieved to be unreplaceable.\nBitcoin will go on.\n\nHave a nice day!"
            },
            {
                "author": "Peter R",
                "date": "2015-10-05T21:27:30",
                "message_text_only": "> On Oct 5, 2015, at 2:08 PM, Tom Zander via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Monday 5. October 2015 20.56.34 Gregory Maxwell wrote:\n>> (In this case, I don't even believe we have any regulator\n>> contributors that disagree).\n> \n> Regular contributor?\n> \n> Please explain how for a fork in the protocol should you only listen to \n> regular Bitcoin Core contributors?\n\nFurthermore, Bitcoin is significantly more than a \"software project\": it sits at a unique intersection of computer science, economics, physics, law and more.  While I agree that minor bug-fixes and code-maintenance-type issues should be dealt with quietly by developers, decisions regarding Bitcoin\u2019s governance and its evolution should be shaped by an interdisciplinary group of stakeholders from across the community.  The hard- vs soft-fork debate is not just a code maintenance issue.  \n\nOnce again, let\u2019s use the current gridlock in Core to rally the growth of new forkwise-compatible implementations of the protocol.  Gavin and Mike\u2019s initiative with BIP101 and Bitcoin XT should be encouraged as one possible model for coming to consensus on hard-forking changes.  \n\nBest regards,\nPeter"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-05T21:30:43",
                "message_text_only": "On Mon, Oct 5, 2015 at 9:27 PM, Peter R via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Once again, let\u2019s use the current gridlock\n\nAllow me to state unequivocally-- since we've had problems with people\nstating non-factuals as fact without getting adequately clear\ncorrection--, there is no gridlock here and an effort to manufacturer\none for political reasons will not be successful.\n\nCheers,"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-05T21:36:50",
                "message_text_only": "On 10/5/2015 5:30 PM, Gregory Maxwell via bitcoin-dev wrote:\n> On Mon, Oct 5, 2015 at 9:27 PM, Peter R via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Once again, let\u2019s use the current gridlock\n>\n\n> there is no gridlock here and an effort to manufacturer\n> one for political reasons will not be successful.\n\nWorthless discussion over the definition of \"gridlock.\"\n\nRuss"
            },
            {
                "author": "Peter R",
                "date": "2015-10-05T21:37:03",
                "message_text_only": "> On Oct 5, 2015, at 2:30 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> \n> On Mon, Oct 5, 2015 at 9:27 PM, Peter R via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Once again, let\u2019s use the current gridlock\n> \n> Allow me to state unequivocally-- since we've had problems with people\n> stating non-factuals as fact without getting adequately clear\n> correction--, there is no gridlock here and an effort to manufacturer\n> one for political reasons will not be successful.\n\nI disagree.  There is gridlock in the Core Dev development process.  \n\nPeter"
            },
            {
                "author": "Tom Harding",
                "date": "2015-10-06T01:37:24",
                "message_text_only": "On 10/5/2015 1:56 PM, Gregory Maxwell via bitcoin-dev wrote:\n> In this case, I don't even believe we have any regulator contributors\n> that disagree.\n\nSince Gavin Andresen chose you to be one of 4 people who decides whose\ncontributions are accepted to the Core project, shouldn't you recuse\nyourself from referencing \"regular contributor\" as some kind of bar to\nan opinion being worthy?\n\nYou don't want to be accused of squelching a person's opinions by\nnacking or sitting on commits, then turning around and branding those\nopinions as worthless because they are not from a \"regular contributor.\"\nDo you?"
            },
            {
                "author": "Peter R",
                "date": "2015-10-06T03:20:33",
                "message_text_only": "> On Oct 5, 2015, at 6:37 PM, Tom Harding via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On 10/5/2015 1:56 PM, Gregory Maxwell via bitcoin-dev wrote:\n>> In this case, I don't even believe we have any regulator contributors\n>> that disagree.\n> \n> Since Gavin Andresen chose you to be one of 4 people who decides whose\n> contributions are accepted to the Core project, shouldn't you recuse\n> yourself from referencing \"regular contributor\" as some kind of bar to\n> an opinion being worthy?\n> \n> You don't want to be accused of squelching a person's opinions by\n> nacking or sitting on commits, then turning around and branding those\n> opinions as worthless because they are not from a \"regular contributor.\"\n> Do you?\n\nGreat point, Tom! \n\nIn fact, you\u2019ve just explained the dynamics that create \u201ccentralizing pressure\u201d in regards to development:  If the weight of a person\u2019s opinion is proportional to how many commits that person has made, and if the probability of getting a commit pulled is proportional to the weight of that person\u2019s opinion, well\u2026I\u2019m pretty sure this results in a differential equation that has a solution that results in ever-increasing centralized control of the code base.  \n\nI believe we should work to deprecate the idea that Core is somehow the \u201ccore of Bitcoin,\" in favour of multiple competing implementations. XT and btcd are two working examples of this idea.  Let\u2019s make it easier for the community to determine the evolution of Bitcoin by making it easier for the community to express their vote based on the code we choose to run.  \n\nBest regards,\nPeter"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-06T03:39:59",
                "message_text_only": "> I believe we should work to deprecate the idea that Core is somehow the \u201ccore of Bitcoin,\"\n\nI never did understand the terminology.  There were \"core developers\" \nwhich i understood to mean the primary developers of the Bitcoin \nsoftware.  Then, suddenly, the software's name was changed from QT to \n\"Core.\"  That seemed to me to be different meaning of the word \"Core\" \nyet it was often treated as the same.  So a developer who is not one of \nthe anointed 5 is a \"Core developer\" because they work on Bitcoin Core. \n  The anointed 5 would be \"Core Core Developers?\"\n\nIn any case if I could get a list of \"Core Developers\" as referenced in \nthe copyright notice that would also be good since that is a legal notice.\n\nRuss"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-06T04:54:13",
                "message_text_only": "On Tuesday, October 06, 2015 3:39:59 AM Milly Bitcoin via bitcoin-dev wrote:\n> In any case if I could get a list of \"Core Developers\" as referenced in\n> the copyright notice that would also be good since that is a legal notice.\n\nThe copyright notice refers to the fact that each contributor owns copyright \nto his own contributions. There is no legal group that owns copyright to the \nentirety of the code.\n\nLuke"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-06T05:08:12",
                "message_text_only": "> The copyright notice refers to the fact that each contributor owns copyright\n> to his own contributions. There is no legal group that owns copyright to the\n> entirety of the code.\n>\n\nNo, that is not what such a notice means.  The part after the \"c\" in the \ncircle is the legal owner.  If the legal owners are not properly \nidentified then the notice is not valid.\n\n---\n From Nolo:\n\nWhat is a valid copyright notice?\n\nA copyright notice should contain:\n\u2022the word \"copyright\"\n\u2022a \"c\" in a circle (\u00a9)\n\u2022the date of publication, and\n\u2022the name of either the author or the owner of all the copyright rights \nin the published work.\n\nFor example, the correct copyright for the fourth edition of The \nCopyright Handbook, by Stephen Fishman (Nolo), is Copyright \u00a9 1998 by \nStephen Fishman.\n\n---\nfrom USPTO:\n\nUse of the notice informs the public that a work is protected by \ncopyright, identifies the copyright owner, and shows the year of first \npublication.\n---\n\nRuss"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-06T05:49:40",
                "message_text_only": "Maybe you are confused with a compilation notice that would say \"All \nContent Copyright and other rights reserved by its Respective Owners\" or \nsomething similar.  That is not the same thing as claiming ownership \nusing the \"c\" inside the circle.\n\nThere is also a difference between claiming a copyright for individual \nworks as part of a compilation as opposed to claiming a copyright on the \ncompilation itself (which is what the current notice is).\n\nRuss\n\n\nOn 10/6/2015 1:08 AM, Milly Bitcoin wrote:\n>> The copyright notice refers to the fact that each contributor owns\n>> copyright\n>> to his own contributions. There is no legal group that owns copyright\n>> to the\n>> entirety of the code.\n>>\n>\n> No, that is not what such a notice means.  The part after the \"c\" in the\n> circle is the legal owner.  If the legal owners are not properly\n> identified then the notice is not valid.\n>\n> ---\n>  From Nolo:\n>\n> What is a valid copyright notice?\n>\n> A copyright notice should contain:\n> \u2022the word \"copyright\"\n> \u2022a \"c\" in a circle (\u00a9)\n> \u2022the date of publication, and\n> \u2022the name of either the author or the owner of all the copyright rights\n> in the published work.\n>\n> For example, the correct copyright for the fourth edition of The\n> Copyright Handbook, by Stephen Fishman (Nolo), is Copyright \u00a9 1998 by\n> Stephen Fishman.\n>\n> ---\n> from USPTO:\n>\n> Use of the notice informs the public that a work is protected by\n> copyright, identifies the copyright owner, and shows the year of first\n> publication.\n> ---\n>\n> Russ\n>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-06T05:53:20",
                "message_text_only": "Copyright doesn't care how notices are written. They are merely informative \nto humans reading them. Anyhow, this is not development related, so please \ndirect any further discussion of it to me directly (with any applicable CCs) \nand NOT to the mailing list.\n\nThanks,\n\nLuke\n\nOn Tuesday, October 06, 2015 5:49:40 AM Milly Bitcoin via bitcoin-dev wrote:\n> Maybe you are confused with a compilation notice that would say \"All\n> Content Copyright and other rights reserved by its Respective Owners\" or\n> something similar.  That is not the same thing as claiming ownership\n> using the \"c\" inside the circle.\n> \n> There is also a difference between claiming a copyright for individual\n> works as part of a compilation as opposed to claiming a copyright on the\n> compilation itself (which is what the current notice is).\n> \n> Russ\n> \n> On 10/6/2015 1:08 AM, Milly Bitcoin wrote:\n> >> The copyright notice refers to the fact that each contributor owns\n> >> copyright\n> >> to his own contributions. There is no legal group that owns copyright\n> >> to the\n> >> entirety of the code.\n> > \n> > No, that is not what such a notice means.  The part after the \"c\" in the\n> > circle is the legal owner.  If the legal owners are not properly\n> > identified then the notice is not valid.\n> > \n> > ---\n> > \n> >  From Nolo:\n> > What is a valid copyright notice?\n> > \n> > A copyright notice should contain:\n> > \u2022the word \"copyright\"\n> > \u2022a \"c\" in a circle (\u00a9)\n> > \u2022the date of publication, and\n> > \u2022the name of either the author or the owner of all the copyright rights\n> > in the published work.\n> > \n> > For example, the correct copyright for the fourth edition of The\n> > Copyright Handbook, by Stephen Fishman (Nolo), is Copyright \u00a9 1998 by\n> > Stephen Fishman.\n> > \n> > ---\n> > from USPTO:\n> > \n> > Use of the notice informs the public that a work is protected by\n> > copyright, identifies the copyright owner, and shows the year of first\n> > publication.\n> > ---\n> > \n> > Russ\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-06T06:03:49",
                "message_text_only": "This list is about \"Development discussion list for Bitcoin protocol and \nits implementation\" So legal notices placed on the software is relevant \nto the list.\n\nIt is also relevant that you go around speaking with authority when you \nhave no idea what you are talking about.  A copyright is a legal notice \nand the courts care how the notice is written.  The purpose of the \nnotice is to notify people of potential litigation if they use the \nsoftware in a certain way.  You want to claim \"off topic\" because you \ncaught spouting nonsense and you want to divert attention elsewhere.\n\nRuss\n\n\n\nOn 10/6/2015 1:53 AM, Luke Dashjr wrote:\n> Copyright doesn't care how notices are written. They are merely informative\n> to humans reading them. Anyhow, this is not development related, so please\n> direct any further discussion of it to me directly (with any applicable CCs)\n> and NOT to the mailing list.\n>\n> Thanks,\n>\n> Luke"
            },
            {
                "author": "phm",
                "date": "2015-10-06T22:14:08",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nIn any case this is basically the purpose of version tracking software\nsuch as Git or CVS or any other. It would not be hard to figure out who\nhad done what. I see you're splitting hairs over nothing as usual,\nthough, Russ, so I'll leave you to it.\n\nphm\n\nMilly Bitcoin via bitcoin-dev wrote:\n> Maybe you are confused with a compilation notice that would say \"All Content Copyright and other rights reserved by its Respective Owners\" or something similar.  That is not the same thing as claiming ownership using the \"c\" inside the circle. > > There is also a difference between claiming a copyright for\nindividual works as part of a compilation as opposed to claiming a\ncopyright on the compilation itself (which is what the current notice\nis). > > Russ > > > On 10/6/2015 1:08 AM, Milly Bitcoin wrote: >>> The\ncopyright notice refers to the fact that each contributor owns >>>\ncopyright >>> to his own contributions. There is no legal group that\nowns copyright >>> to the >>> entirety of the code. >>> >> >> No, that\nis not what such a notice means.  The part after the \"c\" in the >>\ncircle is the legal owner.  If the legal owners are not properly >>\nidentified then the notice is not valid. >> >> --- >>  From Nolo: >> >>\nWhat is a valid copyright notice? >> >> A copyright notice should\ncontain: >> \u2022the word \"copyright\" >> \u2022a \"c\" in a circle (\u00a9) >> \u2022the date\nof publication, and >> \u2022the name of either the author or the owner of\nall the copyright rights >> in the published work. >> >> For example,\nthe correct copyright for the fourth edition of The >> Copyright\nHandbook, by Stephen Fishman (Nolo), is Copyright \u00a9 1998 by >> Stephen\nFishman. >> >> --- >> from USPTO: >> >> Use of the notice informs the\npublic that a work is protected by >> copyright, identifies the\ncopyright owner, and shows the year of first >> publication. >> --- >>\n>> Russ >> > > > _______________________________________________ >\nbitcoin-dev mailing list > bitcoin-dev at lists.linuxfoundation.org >\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBCAAGBQJWFEewAAoJEIUV926tz9E87a4P/21Znk1tx/ZCA4eykig75S9I\nd0xyLRREVL/SBOBzE8kJh1YmiHAG1ziHzsgpobNn/N2VuKanCKSXuR3niV5WRtYw\n+Oa4uVZUNtAtXKSrFSiGpwJoZN5JnUADcx4sK7En3Z5gFEYSAPrMwvm+M0upl9rd\n5b2/VQ/dm3fDUnntnz4DfhV3otEbcLo6imaaV6RDIPru61Fc20blHJhQPEX0laex\nN1rUiUvsyUL9H66fGFYmm/6YJcO26k3gPNmmODJdApv7uTVfHBj3c2r4xKSIDVES\nWxdL+DdyzJQU6Ng95793QTx29Wn8pV1FlMkC9TQ3biQ1ivoAAKbvxzI27swbPx7d\nWGu/ATDj3UN2RBY3hzTTpMIVK5kITVo+QGtA8cg+KcLjVPaasYdb13zy/pE6PO8J\n4AWd/nYP/bQlkrebeFylY7vQi6TNCDtpfkJE2r8H+3RovqigN+pLLVhuEVlOBtM1\n7N5gAvJWqKtUIgzNKte+eS/yaOFBhHp+veC+QfNMDechC4OGM7IDVdf9oVy9DSCX\n68XThI62AT+uhKjvs8ZG3L88AUiiYK6RC4YCUZVoydbQHovmvQRL3Wb36n+krcGH\niV3n3lfk7+D9IrX6ieRwmHpa9a7VAIekqUuCSBdsXBCUM5zNz48bRNJSofjWLtSm\n5p0mp5jQxte8loevZztf\n=psJx\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "NotMike Hearn",
                "date": "2015-10-06T05:07:44",
                "message_text_only": ">\n>\n> On Mon, Oct 5, 2015 at 11:20 PM, Peter R via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n>\n> > On Oct 5, 2015, at 6:37 PM, Tom Harding via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >\n> > On 10/5/2015 1:56 PM, Gregory Maxwell via bitcoin-dev wrote:\n> >> In this case, I don't even believe we have any regulator contributors\n> >> that disagree.\n> >\n> > Since Gavin Andresen chose you to be one of 4 people who decides whose\n> > contributions are accepted to the Core project, shouldn't you recuse\n> > yourself from referencing \"regular contributor\" as some kind of bar to\n> > an opinion being worthy?\n> >\n> > You don't want to be accused of squelching a person's opinions by\n> > nacking or sitting on commits, then turning around and branding those\n> > opinions as worthless because they are not from a \"regular contributor.\"\n> > Do you?\n>\n> Great point, Tom!\n>\n> In fact, you\u2019ve just explained the dynamics that create \u201ccentralizing\n> pressure\u201d in regards to development:  If the weight of a person\u2019s opinion\n> is proportional to how many commits that person has made, and if the\n> probability of getting a commit pulled is proportional to the weight of\n> that person\u2019s opinion, well\u2026I\u2019m pretty sure this results in a differential\n> equation that has a solution that results in ever-increasing centralized\n> control of the code base.\n>\n\nReally great stuff, Mr. R! We can use differential equations to measure\ncentralization pressure (I'm pretty sure, good idea). If we want\ndecentralization (or even mere stability), we must impose a\ncounterbalancing rule such that each past commit makes one *less* likely to\nget their next commit pulled. For example, a \"one man one commit\" policy.\n\n\n>\n> I believe we should work to deprecate the idea that Core is somehow the\n> \u201ccore of Bitcoin,\" in favour of multiple competing implementations. XT and\n> btcd are two working examples of this idea.  Let\u2019s make it easier for the\n> community to determine the evolution of Bitcoin by making it easier for the\n> community to express their vote based on the code we choose to run.\n>\n\nYes, this is essential. Greg, stop making it so hard for me to  determine\nthe evolution of Bitcoin by making it hard to express my vote based on the\ncode I choose to run. Blockstream is always doing that I am sick of it.\n\nMr. R really understands these concepts at a deep level and people need to\npay more attention to what he has to say. Nash equilibriums are very\nimportant mathematical concept, for example:\nhttps://www.reddit.com/r/Bitcoin/comments/3nhq5a/deprecating_bitcoin_core_visualizing_the/\n\n\n>\n> Best regards,\n> Peter\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/251be515/attachment-0001.html>"
            },
            {
                "author": "Peter R",
                "date": "2015-10-06T05:33:43",
                "message_text_only": "> If we want decentralization (or even mere stability), we must impose a counterbalancing rule such that each past commit makes one *less* likely to get their next commit pulled. For example, a \"one man one commit\" policy.\n\nHaha great stuff, NotMike!\n\nIndeed, it\u2019s not enough to keep the block size limit small so that every man can run his own node, we also must also implement your proposed \u201cone man, one commit\u201d policy!  Think of the decentralization if everyone Bitcoin user is also contributing code!    /s\n\nPeter\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/50a2d880/attachment.html>"
            },
            {
                "author": "Milly Bitcoin",
                "date": "2015-10-05T19:36:50",
                "message_text_only": ">Even someone trying to disrupt the process and nothing\n> else can help us learn by acting as an adversary that causes us to\n> extend our minds and understanding.\n\nInteresting use of terms for a decentralized system.  Can these terms be \ndefined?\n\n\"the process\"\n\n\"us\" (is there also a \"them\"?)\n\n\nRuss"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2015-10-05T23:18:12",
                "message_text_only": "I agree with you, Sergio, up until the part about someone having won a battle. There's a difference between sincere technical objections and someone just being a dick. I think in this case this line has been crossed (and I don't think I'm alone here).\n\n- Eric\n\nOn October 5, 2015 8:56:33 AM PDT, Sergio Demian Lerner via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Some of the people on this mailing list are blindly discussing the\n>technicalities of a soft/hard fork without realizing that is not Mike's\n>main intention. At least I perceive (and maybe others too) something\n>else\n>is happening.\n>\n>Let me try to clarify: the discussion has nothing to do with technical\n>arguments. I generally like more hard forks than soft forks (but I\n>won't\n>explain why because this is not a technical thread), but for CLTV this\n>is\n>quite irrelevant (but I won't explain why..), and I want CLTV to be\n>deployed asap.\n>\n>Mike's intention is to criticize the informal governance model of\n>Bitcoin\n>Core development and he has strategically pushed the discussion to a\n>dead-end where the group either:\n>\n>1) ignores him, which is against the established criteria that all\n>technical objections coming from anyone must be addressed until that\n>person\n>agrees, so that a change can be uncontroversial. If the group moves\n>forward\n>with the change, then the \"uncontroversial\" criteria is violated and\n>then\n>credibility is lost. So a new governance model would be required for\n>which\n>the change is within the established rules.\n>\n>2) respond to his technical objections one after the other, on never\n>ending\n>threads, bringing the project to a standstill.\n>\n>As I don't want 2) to happen, then 1) must happen, which is what Mike\n>wants. I have nothing for or against Mike personally. I just think Mike\n>Hearn has won this battle. But having a more formal decision making\n>process\n>may not be too bad for Bitcoin, maybe it can actually be good.\n>\n>Best regards\n> from a non-developer to my dearest developer friends,\n>  Sergio.\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/40e4516c/attachment.html>"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-10-06T17:28:37",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nSergio Demain,\n\nYou and I have had our altercation, in private, about your assumptions\nof authority in this community. That was fine when you told me \"for\nfuck's sake\" on IRC. I'm a man and I made you see your error and\napologize for your trespass.\n\nNow, you present me and the list with an interpretation of some higher\ngoal that an obviously low-level participant, Mike Hearn, is actioning\nhere.\n\nNo. What you espouse is not what Hearn had premeditated. It all\nhappened in your mind. \"Agent\" (quoting popular media) Hearn is a\ncompulsive contrarian and has a verifiable track record of opposing\nand arguing against consensus wherever he endevors. According to\nSnowden, he did harm to the public and to colleagues vis-a-vis NSA\nsurveillance while he held office at Google and he is doing the same\nvia XT. He is no longer at Google - supposedly by free will. I would\nventure, from his own stated goals, that he is in Bitcoin in search of\na salary, even though he displays a fundamental lack of understanding\nof Open Source methodology and ideology. And a misconception of\nBitcoin's ability to scale.\n\nThe self-proclaimed glory of bitcoinj is a false and empty claim. I\nhave had to code my nodes to ignore bitjoinj because of its disregard\nfor protocol policy. For numerous reasons they are more of an irritant\nthan a positive presence on the network.\n\nYou, Lerner, not having an issue with his fallacious position and\nactions, speaks about you, too. But you \"have nothing for or against\nMike personally\" so he's just another participant, regardless of his\nbehavior and track record, then you give him a thumbs up? Many, maybe\na majority, including Satoshi, have expressed deplorement of O'Hearn\nand Andresen. With or without Satoshi you can see the terminal\nconsensus breach these two populists had engaged in for yourself.\nPlease answer me and the list how their action does not warrant\nrejection from the community?\n\nYet, for the rest of list members: Agent Hearn, a known co-operative,\nshows up with challenges and you respond as if to an equal? A former\nhead-man, before things fell apart, now an accomplice of Agent Hearn,\nAndresen, sprays criticism and you dutifully answer, as if to a Big\nMan? Who is he? That self-proclaimed grumpy old-timer? \"Run to Google\nbenchmarks\" and there you go. Google? Come on! This is the man who\nbroke the fundamental consensus rule and now he's got you introducing\nGoogle dependencies into Bitcoin? You're OK with that? Go to XT, you\nwon't find me or anyone in the community objecting to you and Gavin\nplaying with Google and all sorts of prefab code there.\n\nSergio, don't presume to tell me or the list what another man is\nsaying or what rhythmless jive he's playing. Like everyone here, I\nhave eyes to see and a mind to comprehend: Hearn is not capable of the\ndouble-play you imply. Nor are you, for that matter. So, thanks for\ncutting the cake and showing your true colors, but best you don't\nspeak for someone else. Speak for yourself so everything is clear and\nallegiances don't taint you and whatever you may want to speak, for\nyourself, later.\n\n\nOn 10/05/2015 10:56 PM, Sergio Demian Lerner via bitcoin-dev wrote:\n> Some of the people on this mailing list are blindly discussing the \n> technicalities of a soft/hard fork without realizing that is not\n> Mike's main intention. At least I perceive (and maybe others too)\n> something else is happening.\n> \n> Let me try to clarify: the discussion has nothing to do with\n> technical arguments. I generally like more hard forks than soft\n> forks (but I won't explain why because this is not a technical\n> thread), but for CLTV this is quite irrelevant (but I won't explain\n> why..), and I want CLTV to be deployed asap.\n> \n> Mike's intention is to criticize the informal governance model of \n> Bitcoin Core development and he has strategically pushed the\n> discussion to a dead-end where the group either:\n> \n> 1) ignores him, which is against the established criteria that all \n> technical objections coming from anyone must be addressed until\n> that person agrees, so that a change can be uncontroversial. If the\n> group moves forward with the change, then the \"uncontroversial\"\n> criteria is violated and then credibility is lost. So a new\n> governance model would be required for which the change is within\n> the established rules.\n> \n> 2) respond to his technical objections one after the other, on\n> never ending threads, bringing the project to a standstill.\n> \n> As I don't want 2) to happen, then 1) must happen, which is what\n> Mike wants. I have nothing for or against Mike personally. I just\n> think Mike Hearn has won this battle. But having a more formal\n> decision making process may not be too bad for Bitcoin, maybe it\n> can actually be good.\n> \n> Best regards from a non-developer to my dearest developer friends, \n> Sergio.\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBAgAGBQJWFATEAAoJEGwAhlQc8H1mlBgH/288r/v0J0FFj2HukN3l4YLj\n5+2d4WRJk/r4jfTUQvBiinmEph0cNuY8gtCYssCsipiOe5Ep0k8oQ3Jd/KWx0fIn\nv7eCRzHBLkPTDHd7gnrGSnIsHy1xpO7MGM79ROMOMjoQJUZqborxSxRfJVt5Mdqo\nbxMcDL0n+tJbKa4dbmjLtARH6EbTIWvE7kKh8c5ZHbLkXTOPSt6gCL9GKSVM+i1u\nmlF1m1TEBLSq4jQ2WJk/8aHHbN5IQr2KzpAEneP3tKqSvl/33b2oaW42LVKbxk95\nkDnbtKrBChrHGbLeQ/SRb9NADmvIcnDim4NviphsEarPdl/9OyTW36x2u1j0Slk=\n=zgDh\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2015-10-07T00:04:53",
                "message_text_only": "Hi Venzen,\n I don't know you and I never said \"for fuck's sake\" to anyone on IRC. I\ndon't use IRC, and almost never say 4 letter words.\n\nI wonder how technically savvy people trust IRC ids. Could you send me the\nlink where such an impostor said something to you in my name?\n\nYour e-mail reads like a TV plot. To me, agent Hearn is just Mike. Agent\nLerner is just an Argentinian dude with some spare time to write here. But\nmaybe you know something I don't....\n\nBest regards!\n Sergio.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151006/011abf61/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "This thread is not about the soft/hard fork technical debate",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Milly Bitcoin",
                "cipher anthem",
                "naama.kates at gmail.com",
                "Tom Harding",
                "phm",
                "Mike Hearn",
                "Btc Drak",
                "Gregory Maxwell",
                "Venzen Khaosan",
                "Steven Pine",
                "s7r",
                "Tom Zander",
                "Dave Scotese",
                "Luke Dashjr",
                "NxtChg",
                "Paul Sztorc",
                "Peter R",
                "Eric Lombrozo",
                "NotMike Hearn",
                "Marcel Jamin",
                "Sergio Demian Lerner",
                "Santino Napolitano"
            ],
            "messages_count": 58,
            "total_messages_chars_count": 101934
        }
    },
    {
        "title": "[bitcoin-dev] Proposed new policy for transactions that depend on other unconfirmed transactions",
        "thread_messages": [
            {
                "author": "Alex Morcos",
                "date": "2015-10-05T18:45:57",
                "message_text_only": "I'd like to propose updates to the new policy limits on unconfirmed\ntransaction chains.\n\nThe existing limits in master and scheduled for release in 0.12 are:\nAncestor packages = 100 txs and 900kb total size\nDescendant packages = 1000 txs and 2500kb total size\n\nBefore 0.12 is released I would like to propose a significant reduction in\nthese limits. In the course of analyzing algorithms for mempool limiting,\nit became clear that large packages of unconfirmed transactions were the\nprimary vector for mempool clogging or relay fee boosting attacks. Feedback\nfrom the initial proposed limits was that they were too generous anyway.\n\nThe proposed new limits are:\nAncestor packages = 25 txs and 100kb total size\nDescendant packages = 25 txs and 100kb total size\n\nBased on historical transaction data, the most restrictive of these limits\nis the 25 transaction count on descendant packages. Over the period of\nApril and May of this year (before stress tests), 5.8% of transactions\nwould have violated this limit alone. Applying all the limits together\nwould have affected 6.1% of transactions.\n\nPlease keep in mind these are policy limits that affect transactions which\ndepend on other unconfirmed transactions only. They are not a change to\nconsensus rules and do not affect how many chained txs a valid block may\ncontain. Furthermore, any transaction that was unable to be relayed due to\nthese limits need only wait for some of its unconfirmed ancestors to be\nincluded in a block and then it could be successfully broadcast. This is\nunlikely to affect the total time from creation to inclusion in a block.\nFinally, these limits are command line arguments that can easily be changed\non an individual node basis in Bitcoin Core.\n\nPlease give your feedback if you know of legitimate use cases that would be\nhindered by these limits.\n\nThanks,\nAlex\n\nOn Mon, Sep 21, 2015 at 11:02 AM, Alex Morcos <morcos at gmail.com> wrote:\n\n> Thanks for everyone's review.  These policy changes have been merged in to\n> master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which just\n> implements these limits and no mempool limiting yet.  The default ancestor\n> package size limit is 900kb not 1MB.\n>\n> Yes I think these limits are generous, but they were designed to be as\n> generous as was computationally feasible so they were unobjectionable\n> (since the existing policy was no limits).  This does not preclude future\n> changes to policy that would reduce these limits.\n>\n>\n>\n>\n>\n> On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe <danny.thorpe at gmail.com>\n> wrote:\n>\n>> The limits Alex proposed are generous (bordering on obscene!), but\n>> dropping that down to allowing only two levels of chained unconfirmed\n>> transactions is too tight.\n>>\n>> Use case: Brokered asset transfers may require sets of transactions with\n>> a dependency tree depth of 3 to be published together. ( N seller txs, 1\n>> broker bridge tx, M buyer txs )\n>>\n>> If the originally proposed depth limit of 100 does not provide a\n>> sufficient cap on memory consumption or loop/recursion depth, a depth limit\n>> of 10 would provide plenty of headroom for this 3 level use case and\n>> similar patterns.\n>>\n>> -Danny\n>>\n>> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> I dont see any problem with such limits. Though, hell, if you limited\n>>> entire tx dependency trees (ie transactions and all required unconfirmed\n>>> transactions for them) to something like 10 txn, maximum two levels\n>>> deep, I also wouldnt have a problem.\n>>>\n>>> Matt\n>>>\n>>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:\n>>> > Hi everyone,\n>>> >\n>>> >\n>>> > I'd like to propose a new set of requirements as a policy on when to\n>>> > accept new transactions into the mempool and relay them.  This policy\n>>> > would affect transactions which have as inputs other transactions which\n>>> > are not yet confirmed in the blockchain.\n>>> >\n>>> > The motivation for this policy is 6470\n>>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to limit the\n>>> > size of a mempool.  As discussed in that pull\n>>> > <https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736>,\n>>> > once the mempool is full a new transaction must be able to pay not only\n>>> > for the transaction it would evict, but any dependent transactions that\n>>> > would be removed from the mempool as well.  In order to make sure this\n>>> > is always feasible, I'm proposing 4 new policy limits.\n>>> >\n>>> > All limits are command line configurable.\n>>> >\n>>> > The first two limits are required to make sure no chain of transactions\n>>> > will be too large for the eviction code to handle:\n>>> >\n>>> > Max number of descendant txs : No transaction shall be accepted if it\n>>> > would cause another transaction in the mempool to have too many\n>>> > descendant transactions (all of which would have to be evicted if the\n>>> > ancestor transaction was evicted).  Default: 1000\n>>> >\n>>> > Max descendant size : No transaction shall be accepted if it would\n>>> cause\n>>> > another transaction in the mempool to have the total size of all its\n>>> > descendant transactions be too great.  Default : maxmempool / 200  =\n>>> 2.5MB\n>>> >\n>>> > The third limit is required to make sure calculating the state required\n>>> > for sorting and limiting the mempool and enforcing the first 2 limits\n>>> is\n>>> > computationally feasible:\n>>> >\n>>> > Max number of ancestor txs:  No transaction shall be accepted if it has\n>>> > too many ancestor transactions which are not yet confirmed (ie, in the\n>>> > mempool). Default: 100\n>>> >\n>>> > The fourth limit is required to maintain the pre existing policy goal\n>>> > that all transactions in the mempool should be mineable in the next\n>>> block.\n>>> >\n>>> > Max ancestor size: No transaction shall be accepted if the total size\n>>> of\n>>> > all its unconfirmed ancestor transactions is too large.  Default: 1MB\n>>> >\n>>> > (All limits include the transaction itself.)\n>>> >\n>>> > For reference, these limits would have affected less than 2% of\n>>> > transactions entering the mempool in April or May of this year.  During\n>>> > the period of 7/6 through 7/14, while the network was under stress\n>>> test,\n>>> > as many as 25% of the transactions would have been affected.\n>>> >\n>>> > The code to implement the descendant package tracking and new policy\n>>> > limits can be found in 6557\n>>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built off of\n>>> 6470.\n>>> >\n>>> > Thanks,\n>>> > Alex\n>>> >\n>>> >\n>>> >\n>>> > _______________________________________________\n>>> > bitcoin-dev mailing list\n>>> > bitcoin-dev at lists.linuxfoundation.org\n>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> >\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/6e2a78a3/attachment.html>"
            },
            {
                "author": "Danny Thorpe",
                "date": "2015-10-05T18:51:23",
                "message_text_only": "What does \"package\" mean here?\n\nWhen you say 25 txs, does that mean maximum linked chain depth, or total\nnumber of dependent transactions regardless of chain depth?\n\nThanks,\n-Danny\n\n\n\nOn Mon, Oct 5, 2015 at 11:45 AM, Alex Morcos via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> I'd like to propose updates to the new policy limits on unconfirmed\n> transaction chains.\n>\n> The existing limits in master and scheduled for release in 0.12 are:\n> Ancestor packages = 100 txs and 900kb total size\n> Descendant packages = 1000 txs and 2500kb total size\n>\n> Before 0.12 is released I would like to propose a significant reduction in\n> these limits. In the course of analyzing algorithms for mempool limiting,\n> it became clear that large packages of unconfirmed transactions were the\n> primary vector for mempool clogging or relay fee boosting attacks. Feedback\n> from the initial proposed limits was that they were too generous anyway.\n>\n> The proposed new limits are:\n> Ancestor packages = 25 txs and 100kb total size\n> Descendant packages = 25 txs and 100kb total size\n>\n> Based on historical transaction data, the most restrictive of these limits\n> is the 25 transaction count on descendant packages. Over the period of\n> April and May of this year (before stress tests), 5.8% of transactions\n> would have violated this limit alone. Applying all the limits together\n> would have affected 6.1% of transactions.\n>\n> Please keep in mind these are policy limits that affect transactions which\n> depend on other unconfirmed transactions only. They are not a change to\n> consensus rules and do not affect how many chained txs a valid block may\n> contain. Furthermore, any transaction that was unable to be relayed due to\n> these limits need only wait for some of its unconfirmed ancestors to be\n> included in a block and then it could be successfully broadcast. This is\n> unlikely to affect the total time from creation to inclusion in a block.\n> Finally, these limits are command line arguments that can easily be changed\n> on an individual node basis in Bitcoin Core.\n>\n> Please give your feedback if you know of legitimate use cases that would\n> be hindered by these limits.\n>\n> Thanks,\n> Alex\n>\n> On Mon, Sep 21, 2015 at 11:02 AM, Alex Morcos <morcos at gmail.com> wrote:\n>\n>> Thanks for everyone's review.  These policy changes have been merged in\n>> to master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which\n>> just implements these limits and no mempool limiting yet.  The default\n>> ancestor package size limit is 900kb not 1MB.\n>>\n>> Yes I think these limits are generous, but they were designed to be as\n>> generous as was computationally feasible so they were unobjectionable\n>> (since the existing policy was no limits).  This does not preclude future\n>> changes to policy that would reduce these limits.\n>>\n>>\n>>\n>>\n>>\n>> On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe <danny.thorpe at gmail.com>\n>> wrote:\n>>\n>>> The limits Alex proposed are generous (bordering on obscene!), but\n>>> dropping that down to allowing only two levels of chained unconfirmed\n>>> transactions is too tight.\n>>>\n>>> Use case: Brokered asset transfers may require sets of transactions with\n>>> a dependency tree depth of 3 to be published together. ( N seller txs, 1\n>>> broker bridge tx, M buyer txs )\n>>>\n>>> If the originally proposed depth limit of 100 does not provide a\n>>> sufficient cap on memory consumption or loop/recursion depth, a depth limit\n>>> of 10 would provide plenty of headroom for this 3 level use case and\n>>> similar patterns.\n>>>\n>>> -Danny\n>>>\n>>> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <\n>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>>> I dont see any problem with such limits. Though, hell, if you limited\n>>>> entire tx dependency trees (ie transactions and all required unconfirmed\n>>>> transactions for them) to something like 10 txn, maximum two levels\n>>>> deep, I also wouldnt have a problem.\n>>>>\n>>>> Matt\n>>>>\n>>>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:\n>>>> > Hi everyone,\n>>>> >\n>>>> >\n>>>> > I'd like to propose a new set of requirements as a policy on when to\n>>>> > accept new transactions into the mempool and relay them.  This policy\n>>>> > would affect transactions which have as inputs other transactions\n>>>> which\n>>>> > are not yet confirmed in the blockchain.\n>>>> >\n>>>> > The motivation for this policy is 6470\n>>>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to limit\n>>>> the\n>>>> > size of a mempool.  As discussed in that pull\n>>>> > <https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736\n>>>> >,\n>>>> > once the mempool is full a new transaction must be able to pay not\n>>>> only\n>>>> > for the transaction it would evict, but any dependent transactions\n>>>> that\n>>>> > would be removed from the mempool as well.  In order to make sure this\n>>>> > is always feasible, I'm proposing 4 new policy limits.\n>>>> >\n>>>> > All limits are command line configurable.\n>>>> >\n>>>> > The first two limits are required to make sure no chain of\n>>>> transactions\n>>>> > will be too large for the eviction code to handle:\n>>>> >\n>>>> > Max number of descendant txs : No transaction shall be accepted if it\n>>>> > would cause another transaction in the mempool to have too many\n>>>> > descendant transactions (all of which would have to be evicted if the\n>>>> > ancestor transaction was evicted).  Default: 1000\n>>>> >\n>>>> > Max descendant size : No transaction shall be accepted if it would\n>>>> cause\n>>>> > another transaction in the mempool to have the total size of all its\n>>>> > descendant transactions be too great.  Default : maxmempool / 200  =\n>>>> 2.5MB\n>>>> >\n>>>> > The third limit is required to make sure calculating the state\n>>>> required\n>>>> > for sorting and limiting the mempool and enforcing the first 2 limits\n>>>> is\n>>>> > computationally feasible:\n>>>> >\n>>>> > Max number of ancestor txs:  No transaction shall be accepted if it\n>>>> has\n>>>> > too many ancestor transactions which are not yet confirmed (ie, in the\n>>>> > mempool). Default: 100\n>>>> >\n>>>> > The fourth limit is required to maintain the pre existing policy goal\n>>>> > that all transactions in the mempool should be mineable in the next\n>>>> block.\n>>>> >\n>>>> > Max ancestor size: No transaction shall be accepted if the total size\n>>>> of\n>>>> > all its unconfirmed ancestor transactions is too large.  Default: 1MB\n>>>> >\n>>>> > (All limits include the transaction itself.)\n>>>> >\n>>>> > For reference, these limits would have affected less than 2% of\n>>>> > transactions entering the mempool in April or May of this year.\n>>>> During\n>>>> > the period of 7/6 through 7/14, while the network was under stress\n>>>> test,\n>>>> > as many as 25% of the transactions would have been affected.\n>>>> >\n>>>> > The code to implement the descendant package tracking and new policy\n>>>> > limits can be found in 6557\n>>>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built off of\n>>>> 6470.\n>>>> >\n>>>> > Thanks,\n>>>> > Alex\n>>>> >\n>>>> >\n>>>> >\n>>>> > _______________________________________________\n>>>> > bitcoin-dev mailing list\n>>>> > bitcoin-dev at lists.linuxfoundation.org\n>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>> >\n>>>> _______________________________________________\n>>>> bitcoin-dev mailing list\n>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>\n>>>\n>>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/a1640a71/attachment.html>"
            },
            {
                "author": "Alex Morcos",
                "date": "2015-10-05T20:02:40",
                "message_text_only": "Yes, total number of dependent transactions regardless of chain depth.\n\nA descendant package means all the transactions that can not be included in\na block before the transaction in question.\n\nAn ancestor package means all the transactions that are required to be\nincluded in a block before the transaction in question can be.\n\n\n\n\nOn Mon, Oct 5, 2015 at 2:51 PM, Danny Thorpe <danny.thorpe at gmail.com> wrote:\n\n> What does \"package\" mean here?\n>\n> When you say 25 txs, does that mean maximum linked chain depth, or total\n> number of dependent transactions regardless of chain depth?\n>\n> Thanks,\n> -Danny\n>\n>\n>\n> On Mon, Oct 5, 2015 at 11:45 AM, Alex Morcos via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> I'd like to propose updates to the new policy limits on unconfirmed\n>> transaction chains.\n>>\n>> The existing limits in master and scheduled for release in 0.12 are:\n>> Ancestor packages = 100 txs and 900kb total size\n>> Descendant packages = 1000 txs and 2500kb total size\n>>\n>> Before 0.12 is released I would like to propose a significant reduction\n>> in these limits. In the course of analyzing algorithms for mempool\n>> limiting, it became clear that large packages of unconfirmed transactions\n>> were the primary vector for mempool clogging or relay fee boosting attacks.\n>> Feedback from the initial proposed limits was that they were too generous\n>> anyway.\n>>\n>> The proposed new limits are:\n>> Ancestor packages = 25 txs and 100kb total size\n>> Descendant packages = 25 txs and 100kb total size\n>>\n>> Based on historical transaction data, the most restrictive of these\n>> limits is the 25 transaction count on descendant packages. Over the period\n>> of April and May of this year (before stress tests), 5.8% of transactions\n>> would have violated this limit alone. Applying all the limits together\n>> would have affected 6.1% of transactions.\n>>\n>> Please keep in mind these are policy limits that affect transactions\n>> which depend on other unconfirmed transactions only. They are not a change\n>> to consensus rules and do not affect how many chained txs a valid block may\n>> contain. Furthermore, any transaction that was unable to be relayed due to\n>> these limits need only wait for some of its unconfirmed ancestors to be\n>> included in a block and then it could be successfully broadcast. This is\n>> unlikely to affect the total time from creation to inclusion in a block.\n>> Finally, these limits are command line arguments that can easily be changed\n>> on an individual node basis in Bitcoin Core.\n>>\n>> Please give your feedback if you know of legitimate use cases that would\n>> be hindered by these limits.\n>>\n>> Thanks,\n>> Alex\n>>\n>> On Mon, Sep 21, 2015 at 11:02 AM, Alex Morcos <morcos at gmail.com> wrote:\n>>\n>>> Thanks for everyone's review.  These policy changes have been merged in\n>>> to master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which\n>>> just implements these limits and no mempool limiting yet.  The default\n>>> ancestor package size limit is 900kb not 1MB.\n>>>\n>>> Yes I think these limits are generous, but they were designed to be as\n>>> generous as was computationally feasible so they were unobjectionable\n>>> (since the existing policy was no limits).  This does not preclude future\n>>> changes to policy that would reduce these limits.\n>>>\n>>>\n>>>\n>>>\n>>>\n>>> On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe <danny.thorpe at gmail.com>\n>>> wrote:\n>>>\n>>>> The limits Alex proposed are generous (bordering on obscene!), but\n>>>> dropping that down to allowing only two levels of chained unconfirmed\n>>>> transactions is too tight.\n>>>>\n>>>> Use case: Brokered asset transfers may require sets of transactions\n>>>> with a dependency tree depth of 3 to be published together. ( N seller txs,\n>>>> 1 broker bridge tx, M buyer txs )\n>>>>\n>>>> If the originally proposed depth limit of 100 does not provide a\n>>>> sufficient cap on memory consumption or loop/recursion depth, a depth limit\n>>>> of 10 would provide plenty of headroom for this 3 level use case and\n>>>> similar patterns.\n>>>>\n>>>> -Danny\n>>>>\n>>>> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <\n>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>\n>>>>> I dont see any problem with such limits. Though, hell, if you limited\n>>>>> entire tx dependency trees (ie transactions and all required\n>>>>> unconfirmed\n>>>>> transactions for them) to something like 10 txn, maximum two levels\n>>>>> deep, I also wouldnt have a problem.\n>>>>>\n>>>>> Matt\n>>>>>\n>>>>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:\n>>>>> > Hi everyone,\n>>>>> >\n>>>>> >\n>>>>> > I'd like to propose a new set of requirements as a policy on when to\n>>>>> > accept new transactions into the mempool and relay them.  This policy\n>>>>> > would affect transactions which have as inputs other transactions\n>>>>> which\n>>>>> > are not yet confirmed in the blockchain.\n>>>>> >\n>>>>> > The motivation for this policy is 6470\n>>>>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to limit\n>>>>> the\n>>>>> > size of a mempool.  As discussed in that pull\n>>>>> > <https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736\n>>>>> >,\n>>>>> > once the mempool is full a new transaction must be able to pay not\n>>>>> only\n>>>>> > for the transaction it would evict, but any dependent transactions\n>>>>> that\n>>>>> > would be removed from the mempool as well.  In order to make sure\n>>>>> this\n>>>>> > is always feasible, I'm proposing 4 new policy limits.\n>>>>> >\n>>>>> > All limits are command line configurable.\n>>>>> >\n>>>>> > The first two limits are required to make sure no chain of\n>>>>> transactions\n>>>>> > will be too large for the eviction code to handle:\n>>>>> >\n>>>>> > Max number of descendant txs : No transaction shall be accepted if it\n>>>>> > would cause another transaction in the mempool to have too many\n>>>>> > descendant transactions (all of which would have to be evicted if the\n>>>>> > ancestor transaction was evicted).  Default: 1000\n>>>>> >\n>>>>> > Max descendant size : No transaction shall be accepted if it would\n>>>>> cause\n>>>>> > another transaction in the mempool to have the total size of all its\n>>>>> > descendant transactions be too great.  Default : maxmempool / 200\n>>>>> =  2.5MB\n>>>>> >\n>>>>> > The third limit is required to make sure calculating the state\n>>>>> required\n>>>>> > for sorting and limiting the mempool and enforcing the first 2\n>>>>> limits is\n>>>>> > computationally feasible:\n>>>>> >\n>>>>> > Max number of ancestor txs:  No transaction shall be accepted if it\n>>>>> has\n>>>>> > too many ancestor transactions which are not yet confirmed (ie, in\n>>>>> the\n>>>>> > mempool). Default: 100\n>>>>> >\n>>>>> > The fourth limit is required to maintain the pre existing policy goal\n>>>>> > that all transactions in the mempool should be mineable in the next\n>>>>> block.\n>>>>> >\n>>>>> > Max ancestor size: No transaction shall be accepted if the total\n>>>>> size of\n>>>>> > all its unconfirmed ancestor transactions is too large.  Default: 1MB\n>>>>> >\n>>>>> > (All limits include the transaction itself.)\n>>>>> >\n>>>>> > For reference, these limits would have affected less than 2% of\n>>>>> > transactions entering the mempool in April or May of this year.\n>>>>> During\n>>>>> > the period of 7/6 through 7/14, while the network was under stress\n>>>>> test,\n>>>>> > as many as 25% of the transactions would have been affected.\n>>>>> >\n>>>>> > The code to implement the descendant package tracking and new policy\n>>>>> > limits can be found in 6557\n>>>>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built off\n>>>>> of 6470.\n>>>>> >\n>>>>> > Thanks,\n>>>>> > Alex\n>>>>> >\n>>>>> >\n>>>>> >\n>>>>> > _______________________________________________\n>>>>> > bitcoin-dev mailing list\n>>>>> > bitcoin-dev at lists.linuxfoundation.org\n>>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>> >\n>>>>> _______________________________________________\n>>>>> bitcoin-dev mailing list\n>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>\n>>>>\n>>>>\n>>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151005/6dd5377c/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-10-08T03:33:07",
                "message_text_only": "There is a PR up for this change at https://github.com/bitcoin/bitcoin/pull/6771, which is getting some discussion for those following along.\n\nOn October 5, 2015 1:02:40 PM PDT, Alex Morcos via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>Yes, total number of dependent transactions regardless of chain depth.\n>\n>A descendant package means all the transactions that can not be\n>included in\n>a block before the transaction in question.\n>\n>An ancestor package means all the transactions that are required to be\n>included in a block before the transaction in question can be.\n>\n>\n>\n>\n>On Mon, Oct 5, 2015 at 2:51 PM, Danny Thorpe <danny.thorpe at gmail.com>\n>wrote:\n>\n>> What does \"package\" mean here?\n>>\n>> When you say 25 txs, does that mean maximum linked chain depth, or\n>total\n>> number of dependent transactions regardless of chain depth?\n>>\n>> Thanks,\n>> -Danny\n>>\n>>\n>>\n>> On Mon, Oct 5, 2015 at 11:45 AM, Alex Morcos via bitcoin-dev <\n>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> I'd like to propose updates to the new policy limits on unconfirmed\n>>> transaction chains.\n>>>\n>>> The existing limits in master and scheduled for release in 0.12 are:\n>>> Ancestor packages = 100 txs and 900kb total size\n>>> Descendant packages = 1000 txs and 2500kb total size\n>>>\n>>> Before 0.12 is released I would like to propose a significant\n>reduction\n>>> in these limits. In the course of analyzing algorithms for mempool\n>>> limiting, it became clear that large packages of unconfirmed\n>transactions\n>>> were the primary vector for mempool clogging or relay fee boosting\n>attacks.\n>>> Feedback from the initial proposed limits was that they were too\n>generous\n>>> anyway.\n>>>\n>>> The proposed new limits are:\n>>> Ancestor packages = 25 txs and 100kb total size\n>>> Descendant packages = 25 txs and 100kb total size\n>>>\n>>> Based on historical transaction data, the most restrictive of these\n>>> limits is the 25 transaction count on descendant packages. Over the\n>period\n>>> of April and May of this year (before stress tests), 5.8% of\n>transactions\n>>> would have violated this limit alone. Applying all the limits\n>together\n>>> would have affected 6.1% of transactions.\n>>>\n>>> Please keep in mind these are policy limits that affect transactions\n>>> which depend on other unconfirmed transactions only. They are not a\n>change\n>>> to consensus rules and do not affect how many chained txs a valid\n>block may\n>>> contain. Furthermore, any transaction that was unable to be relayed\n>due to\n>>> these limits need only wait for some of its unconfirmed ancestors to\n>be\n>>> included in a block and then it could be successfully broadcast.\n>This is\n>>> unlikely to affect the total time from creation to inclusion in a\n>block.\n>>> Finally, these limits are command line arguments that can easily be\n>changed\n>>> on an individual node basis in Bitcoin Core.\n>>>\n>>> Please give your feedback if you know of legitimate use cases that\n>would\n>>> be hindered by these limits.\n>>>\n>>> Thanks,\n>>> Alex\n>>>\n>>> On Mon, Sep 21, 2015 at 11:02 AM, Alex Morcos <morcos at gmail.com>\n>wrote:\n>>>\n>>>> Thanks for everyone's review.  These policy changes have been\n>merged in\n>>>> to master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>,\n>which\n>>>> just implements these limits and no mempool limiting yet.  The\n>default\n>>>> ancestor package size limit is 900kb not 1MB.\n>>>>\n>>>> Yes I think these limits are generous, but they were designed to be\n>as\n>>>> generous as was computationally feasible so they were\n>unobjectionable\n>>>> (since the existing policy was no limits).  This does not preclude\n>future\n>>>> changes to policy that would reduce these limits.\n>>>>\n>>>>\n>>>>\n>>>>\n>>>>\n>>>> On Fri, Aug 21, 2015 at 3:52 PM, Danny Thorpe\n><danny.thorpe at gmail.com>\n>>>> wrote:\n>>>>\n>>>>> The limits Alex proposed are generous (bordering on obscene!), but\n>>>>> dropping that down to allowing only two levels of chained\n>unconfirmed\n>>>>> transactions is too tight.\n>>>>>\n>>>>> Use case: Brokered asset transfers may require sets of\n>transactions\n>>>>> with a dependency tree depth of 3 to be published together. ( N\n>seller txs,\n>>>>> 1 broker bridge tx, M buyer txs )\n>>>>>\n>>>>> If the originally proposed depth limit of 100 does not provide a\n>>>>> sufficient cap on memory consumption or loop/recursion depth, a\n>depth limit\n>>>>> of 10 would provide plenty of headroom for this 3 level use case\n>and\n>>>>> similar patterns.\n>>>>>\n>>>>> -Danny\n>>>>>\n>>>>> On Fri, Aug 21, 2015 at 12:22 PM, Matt Corallo via bitcoin-dev <\n>>>>> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>>>\n>>>>>> I dont see any problem with such limits. Though, hell, if you\n>limited\n>>>>>> entire tx dependency trees (ie transactions and all required\n>>>>>> unconfirmed\n>>>>>> transactions for them) to something like 10 txn, maximum two\n>levels\n>>>>>> deep, I also wouldnt have a problem.\n>>>>>>\n>>>>>> Matt\n>>>>>>\n>>>>>> On 08/14/15 19:33, Alex Morcos via bitcoin-dev wrote:\n>>>>>> > Hi everyone,\n>>>>>> >\n>>>>>> >\n>>>>>> > I'd like to propose a new set of requirements as a policy on\n>when to\n>>>>>> > accept new transactions into the mempool and relay them.  This\n>policy\n>>>>>> > would affect transactions which have as inputs other\n>transactions\n>>>>>> which\n>>>>>> > are not yet confirmed in the blockchain.\n>>>>>> >\n>>>>>> > The motivation for this policy is 6470\n>>>>>> > <https://github.com/bitcoin/bitcoin/pull/6470> which aims to\n>limit\n>>>>>> the\n>>>>>> > size of a mempool.  As discussed in that pull\n>>>>>> >\n><https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736\n>>>>>> >,\n>>>>>> > once the mempool is full a new transaction must be able to pay\n>not\n>>>>>> only\n>>>>>> > for the transaction it would evict, but any dependent\n>transactions\n>>>>>> that\n>>>>>> > would be removed from the mempool as well.  In order to make\n>sure\n>>>>>> this\n>>>>>> > is always feasible, I'm proposing 4 new policy limits.\n>>>>>> >\n>>>>>> > All limits are command line configurable.\n>>>>>> >\n>>>>>> > The first two limits are required to make sure no chain of\n>>>>>> transactions\n>>>>>> > will be too large for the eviction code to handle:\n>>>>>> >\n>>>>>> > Max number of descendant txs : No transaction shall be accepted\n>if it\n>>>>>> > would cause another transaction in the mempool to have too many\n>>>>>> > descendant transactions (all of which would have to be evicted\n>if the\n>>>>>> > ancestor transaction was evicted).  Default: 1000\n>>>>>> >\n>>>>>> > Max descendant size : No transaction shall be accepted if it\n>would\n>>>>>> cause\n>>>>>> > another transaction in the mempool to have the total size of\n>all its\n>>>>>> > descendant transactions be too great.  Default : maxmempool /\n>200\n>>>>>> =  2.5MB\n>>>>>> >\n>>>>>> > The third limit is required to make sure calculating the state\n>>>>>> required\n>>>>>> > for sorting and limiting the mempool and enforcing the first 2\n>>>>>> limits is\n>>>>>> > computationally feasible:\n>>>>>> >\n>>>>>> > Max number of ancestor txs:  No transaction shall be accepted\n>if it\n>>>>>> has\n>>>>>> > too many ancestor transactions which are not yet confirmed (ie,\n>in\n>>>>>> the\n>>>>>> > mempool). Default: 100\n>>>>>> >\n>>>>>> > The fourth limit is required to maintain the pre existing\n>policy goal\n>>>>>> > that all transactions in the mempool should be mineable in the\n>next\n>>>>>> block.\n>>>>>> >\n>>>>>> > Max ancestor size: No transaction shall be accepted if the\n>total\n>>>>>> size of\n>>>>>> > all its unconfirmed ancestor transactions is too large. \n>Default: 1MB\n>>>>>> >\n>>>>>> > (All limits include the transaction itself.)\n>>>>>> >\n>>>>>> > For reference, these limits would have affected less than 2% of\n>>>>>> > transactions entering the mempool in April or May of this year.\n>>>>>> During\n>>>>>> > the period of 7/6 through 7/14, while the network was under\n>stress\n>>>>>> test,\n>>>>>> > as many as 25% of the transactions would have been affected.\n>>>>>> >\n>>>>>> > The code to implement the descendant package tracking and new\n>policy\n>>>>>> > limits can be found in 6557\n>>>>>> > <https://github.com/bitcoin/bitcoin/pull/6557> which is built\n>off\n>>>>>> of 6470.\n>>>>>> >\n>>>>>> > Thanks,\n>>>>>> > Alex\n>>>>>> >\n>>>>>> >\n>>>>>> >\n>>>>>> > _______________________________________________\n>>>>>> > bitcoin-dev mailing list\n>>>>>> > bitcoin-dev at lists.linuxfoundation.org\n>>>>>> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>> >\n>>>>>> _______________________________________________\n>>>>>> bitcoin-dev mailing list\n>>>>>> bitcoin-dev at lists.linuxfoundation.org\n>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>>\n>>>>>\n>>>>>\n>>>>\n>>>\n>>> _______________________________________________\n>>> bitcoin-dev mailing list\n>>> bitcoin-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>\n>>>\n>>\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/36d65554/attachment.html>"
            },
            {
                "author": "Taariq Lewis",
                "date": "2015-10-08T06:10:37",
                "message_text_only": "Our comment was posted to Github:\nhttps://github.com/bitcoin/bitcoin/pull/6771#issuecomment-146429708\n\nWe, at Serica and DigitalTangible actively use unspent tx chains to allow\nour customers to speed their bitcoin user-experience without the need for\nthem to wait on blockchain confirmations. These transactions are usually\nsequential and must happen between our customers and our marketplace of\nmerchants and other customers. For example, a user agrees to place an order\nto purchase bitcoin and then make a bitcoin payment, for a product or\nservices, with that bitcoin, should their desired price be met while they\nare unable to actively monitor their transaction.\n\nWe currently do not have a need to chain more than 5 unspents given our\ncurrent use cases for onboarding new customers into the bitcoin ecosystem.\nGiven this PR, we agree with its principle, since the proposal aims to\nlimit to MAX_ANCESTORS = 25 and MAX_DESCENDANTS = 25, which we think is\nreasonable. We have not **yet** seen a use case for more than 25 chains of\nunconfirmed in our ecosystem.\n\nHowever, we would like to publish our viewpoint that we wish to avoid a\nslippery slope of restrictions in unspents to fall from from 25 to 2 or\neven 0. The limits imposed should not prevent, at minimum, 5 step chains of\ntransactions that are needed to give a customer temporary control over\nfunds that they would otherwise not have access to unless they waited for a\nconfirmation before conducting another transaction. In these situations,\nwhere an instant purchase must be made with customer control, that btc must\nbe sent to a customers address and then be quickly relayed to a merchant or\nanother party in a transaction to create a seamless experience. All of this\nmust happen within 0 confs because our customers will not wait for a whole\nconfirm and we do not wish to lose the opportunity to make Bitcoin more\navailable and useful to a broader audience with higher performance demands.\n\nZero confirmations, when done properly, help increase adoption of Bitcoin\nand make it more competitive against other forms of payments. However, we\ndo think it's good to prevent abuse of the system with reasonable\nconstraints for the current ecosystem of applications and wallets.\n\nCheers,\nTaariq Lewis & Serica/DigitalTangible team.\n\n\n\n>\n> ------------------------------\n>\n> Message: 2\n> Date: Mon, 21 Sep 2015 11:02:20 -0400\n> From: Alex Morcos <morcos at gmail.com>\n> To: Danny Thorpe <danny.thorpe at gmail.com>\n> Cc: Bitcoin Dev <bitcoin-dev at lists.linuxfoundation.org>\n> Subject: Re: [bitcoin-dev] Proposed new policy for transactions that\n>         depend on other unconfirmed transactions\n> Message-ID:\n>         <CAPWm=\n> eW-g9F5YZ9EdqXGzpzvs2mQJ8N5wKG15Ofz4cWGaHQ0BQ at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> Thanks for everyone's review.  These policy changes have been merged in to\n> master in 6654 <https://github.com/bitcoin/bitcoin/pull/6654>, which just\n> implements these limits and no mempool limiting yet.  The default ancestor\n> package size limit is 900kb not 1MB.\n>\n> Yes I think these limits are generous, but they were designed to be as\n> generous as was computationally feasible so they were unobjectionable\n> (since the existing policy was no limits).  This does not preclude future\n> changes to policy that would reduce these limits.\n>\n>\n>\n\n\n-- \n*Taariq Lewis*\np: +1-646-479-6098\ne: taariq.lewis at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/36a42736/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposed new policy for transactions that depend on other unconfirmed transactions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Danny Thorpe",
                "Taariq Lewis",
                "Alex Morcos",
                "Matt Corallo"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 36480
        }
    },
    {
        "title": "[bitcoin-dev] on rough consensus",
        "thread_messages": [
            {
                "author": "Ryan Grant",
                "date": "2015-10-07T05:07:48",
                "message_text_only": "Bitcoin's participants can improve their ability to stay on a valuable\nand censorship resistant blockchain by individually and informally\nabsorbing cultural wisdom regarding \"rough consensus\".  This does not\nrequire writing any formal rules about what rough consensus is.  It is\na matter of participation with an understanding.\n\n  https://www.ietf.org/tao.html#rfc.section.2\n\n    In many ways, the IETF runs on the beliefs of its participants.\n    One of the \"founding beliefs\" is embodied in an early quote about\n    the IETF from David Clark: \"We reject kings, presidents and\n    voting.  We believe in rough consensus and running code\".\n\nA June 2015 bitcoin-dev thread, arguing about consensus, included the\nusual range of responses; ranging from claims that any objection must\nblock consensus to a definition based on US Justice Stewart's \"I'll\nknow it when I see it\".  (It's funny because it's true.  We can\nexplain it better, though.)\n\n  \"Concerns Regarding Threats by a Developer to Remove Commit Access\n  from Other Developers\"\n  http://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-June/008772.html\n\nAn August 2015 cryptography-list thread presents the idea that rough\nconsensus can be used as a tool for hindering progress.  The specific\nthreat was that two protocol options could be made to seem equally\ngood.  To solve this example, identify that as the problem, then\nengage a judgement to pick one solution \"good enough\" (but that does\nnot lead to a dead-end for other goals of the project), and go with\nit.  There is room, within \"rough consensus\", for such action to\ndefend against the attack; as you can see from other excerpts in this\nmessage.\n\n  \"[Cryptography] asymmetric attacks on crypto-protocols - the rough\n  consensus attack\"\n  http://www.metzdowd.com/pipermail/cryptography/2015-August/026151.html\n\nTo learn about forming a useful \"rough consensus\", see the very\nreadable \"Tao of the IETF\", and RFC 7282.\n\n  \"The Tao of the IETF\"\n  https://www.ietf.org/tao.html\n    (previously RFC 4677)\n\n  RFC 7282\n  \"On Consensus and Humming in the IETF\"\n  https://tools.ietf.org/html/rfc7282\n\nStrong objections don't block rough consensus:\n\n  https://www.ietf.org/tao.html#getting.things.done\n\n    Rough consensus has been defined in many ways; a simple version is\n    that it means that strongly held objections must be debated until\n    most people are satisfied that these objections are wrong.\n\n  https://tools.ietf.org/html/rfc7282\n\n    Having full consensus, or unanimity, would be ideal, but we don't\n    require it: Requiring full consensus allows a single intransigent\n    person who simply keeps saying \"No!\" to stop the process cold.  We\n    only require rough consensus: If the chair of a working group\n    determines that a technical issue brought forward by an objector\n    has been truly considered by the working group, and the working\n    group has made an informed decision that the objection has been\n    answered or is not enough of a technical problem to prevent moving\n    forward, the chair can declare that there is rough consensus to go\n    forward, the objection notwithstanding.\n\nThe working group chair's responsibility is different from that of\neither a vote counter or a benign dictator:\n\n  http://tools.ietf.org/html/rfc2418\n\n    Note that 51% of the working group does not qualify as \"rough\n    consensus\" and 99% is better than rough.  It is up to the Chair to\n    determine if rough consensus has been reached.\n\n  https://tools.ietf.org/html/rfc7282\n\n    3.  Rough consensus is achieved when all issues are addressed, but\n         not necessarily accommodated\n\n      [...]\n\n      If the chair finds, in their technical judgement, that the issue\n      has truly been considered, and that the vast majority of the\n      working group has come to the conclusion that the tradeoff is\n      worth making, even in the face of continued objection from the\n      person(s) who raised the issue, the chair can declare that the\n      group has come to rough consensus.  (And even though this is\n      framed in terms of a \"vast majority\", even that is not\n      necessarily true.  This point is discussed in more detail in\n      Sections 6 and 7.)\n\n      [...]\n\n      The chair of a working group who is about to find that there is\n      only rough consensus is going to have to decide that not only\n      has the working group taken the objection seriously, but that it\n      has **fully examined the ramifications** of not making a change\n      to accommodate it, and that the outcome does not constitute a\n      failure to meet the technical requirements of the work.\n\n      [...]\n\n    6.  One hundred people for and five people against might not be\n         rough consensus\n\n      [...] one of the great strengths of using consensus over voting:\n      It isn't possible to use \"vote stuffing\" (simply recruiting a\n      large number of people to support a particular side, even people\n      who have never participated in a working group or the IETF at\n      all) to change the outcome of a consensus call.  As long as the\n      chair is looking for outstanding technical objections and not\n      counting heads, vote stuffing shouldn't affect the outcome of\n      the consensus call.\n\n    7.  Five people for and one hundred people against might still be\n         rough consensus\n\n      [...Sybil attack] it is within bounds for the chair to say, \"We\n      have objections, but the objections have been sufficiently\n      answered, and the objectors seem uninterested in participating\n      in the discussion.  Albeit rough in the extreme, there is rough\n      consensus to go with the current solution.\"\n\n      [...] it is likely that if a working group got this\n      dysfunctional, it would put the whole concept of coming to rough\n      consensus at risk.  But still, the correct outcome in this case\n      is to look at the very weak signal against the huge background\n      noise in order to find the rough consensus.\n\nWorking group chairs can help direct discussion:\n\n  https://www.ietf.org/tao.html#rfc.section.4.1\n\n    Sometimes discussions get stuck on contentious points and the\n    chair may need to steer people toward productive interaction and\n    then declare when rough consensus has been met and the discussion\n    is over.\n\nSome working groups segregate the role of forming a consensus from\ncommunicating the consensus:\n\n  https://www.ietf.org/tao.html#rfc.section.4.2\n\n    Another method that some Working Groups adopt is to have a Working\n    Group \"secretary\" to handle the juggling of the documents and the\n    changes.  The secretary can run the issue tracker if there is one,\n    or can simply be in charge of watching that all of the decisions\n    that are made on the mailing list are reflected in newer versions\n    of the documents.\n\nBitcoin Core is neither an IETF working group, nor should it aim to\ncurate its network protocol ruleset as one.  The IETF uses a steering\ngroup, formal variance procedures, an appeals board, and a director\n(to send even higher appeals to).  All of those positions could become\npoints of attack, if Bitcoin were to attempt to use or copy them.\nThat said, most IETF appeal routes are merely authorized to undo a\nprior ruling of consensus, opening for reconsideration prior dismissed\npoints of argument (on their technical merits).  In Bitcoin, if\ndevelopers know what to work on, and can speak clearly enough to the\neconomic majority, then the system is working; regardless of whether\nany role exists taking all the responsibility that an IETF working\ngroup chair would take.\n\nIt is absolutely the case that resolving excessive roughness in shared\nconsensus takes more work than either votes or dictatorship.  It is\nalso the case that rough consensus is a good defense against\ncommitting to decisions with subtle undesirable long-term effects.\nThat is why the IETF cares about it, and that same long-term threat is\nimportant in Bitcoin's ecosystem as well.\n\n\n/// References and Selected IETF Excerpts ///\n\n  \"The Tao of the IETF\"\n  https://www.ietf.org/tao.html\n\n    A 2012 continuation of 2006's RFC 4677, itself first published in\n    1994.\n\n\n  BCP 25\n  http://tools.ietf.org/html/rfc2418\n    (1998)\n\n    3.3. Session management\n\n      Working groups make decisions through a \"rough consensus\"\n      process.  IETF consensus does not require that all participants\n      agree although this is, of course, preferred.  In general, the\n      dominant view of the working group shall prevail.  (However, it\n      must be noted that \"dominance\" is not to be determined on the\n      basis of volume or persistence, but rather a more general sense\n      of agreement.)  Consensus can be determined by a show of hands,\n      humming, or any other means on which the WG agrees (by rough\n      consensus, of course).  Note that 51% of the working group does\n      not qualify as \"rough consensus\" and 99% is better than rough.\n      It is up to the Chair to determine if rough consensus has been\n      reached.\n\n      In the case where a consensus, which has been reached during a\n      face-to-face meeting, is being **verified on a mailing list**,\n      the people who were in the meeting and expressed agreement must\n      be taken into account.  If there were 100 people in a meeting\n      and only a few people on the mailing list disagree with the\n      consensus of the meeting then the consensus should be seen as\n      being verified.  Note that enough time should be given to the\n      verification process for the mailing list readers to understand\n      and consider any objections that may be raised on the list.  The\n      normal two week last-call period should be sufficient for this.\n\n      [...]\n\n      To facilitate making forward progress, a Working Group Chair may\n      wish to decide to reject or defer the input from a member, based\n      upon the following criteria:\n\n        - Old\n\n          The input pertains to a topic that already has been resolved\n          and is redundant with information previously available;\n\n        - Minor\n\n          The input is new and pertains to a topic that has already\n          been resolved, but it is felt to be of minor import to the\n          existing decision;\n\n        - Timing\n\n          The input pertains to a topic that the working group has not\n          yet opened for discussion; or\n\n        - Scope\n\n          The input is outside of the scope of the working group\n          charter.\n\n    [...]\n\n\n  RFC 2026\n  \"The Internet Standards Process -- Revision 3\"\n  http://tools.ietf.org/html/rfc2026#section-6.5\n\n    6.5 Conflict Resolution and Appeals\n    [...]\n\n\n  RFC 7282\n  \"On Consensus and Humming in the IETF\"\n  https://tools.ietf.org/html/rfc7282\n\n    1.  Introduction\n\n      [...] our credo is that we don't let a single individual dictate\n      decisions (a king or president), nor should decisions be made by\n      a vote, nor do we want decisions to be made in a vacuum without\n      practical experience.  Instead, we strive to make our decisions\n      by the consent of all participants, though allowing for some\n      dissent (rough consensus), and to have the actual products of\n      engineering (running code) trump theoretical designs.\n\n      Having full consensus, or unanimity, would be ideal, but we\n      don't require it: Requiring full consensus allows a single\n      intransigent person who simply keeps saying \"No!\" to stop the\n      process cold.  We only require rough consensus: If the chair of\n      a working group determines that a technical issue brought\n      forward by an objector has been truly considered by the working\n      group, and the working group has made an informed decision that\n      the objection has been answered or is not enough of a technical\n      problem to prevent moving forward, the chair can declare that\n      there is rough consensus to go forward, the objection\n      notwithstanding.\n\n    2.  Lack of disagreement is more important than agreement\n\n      [...] **determining** consensus and **coming to** consensus are\n      different things than **having** consensus [emphasis in\n      original].\n\n      [...]If at the end of the discussion some people have not gotten\n      the choice that they prefer, but they have become convinced that\n      the chosen solution is acceptable, albeit less appealing, they\n      have still come to consensus.  Consensus doesn't require that\n      everyone is happy and agrees that the chosen solution is the\n      best one.  Consensus is when everyone is sufficiently satisfied\n      with the chosen solution, such that they **no longer have\n      specific objections** to it.\n\n      [...] \"Can anyone not live with choice A?\" is more likely to\n      only hear from folks who think that choice A is impossible to\n      engineer given some constraints.  Following up with, \"What are\n      the reasons you object to choice A?\" is also essential.\n\n      [...]\n\n      There is also an important point to be made about reaching\n      consensus and \"compromising\": Unfortunately, the word\n      \"compromise\" gets used in two different ways, and though one\n      sort of compromising to come to consensus is good (and\n      important), the other sort of compromising in order to achieve\n      consensus can actually be harmful.  As mentioned earlier,\n      engineering always involves balancing tradeoffs, and figuring\n      out whether one engineering decision makes more sense on balance\n      compared to another involves making engineering \"compromises\":\n      We might have to compromise processor speed for lower power\n      consumption, or compromise throughput for congestion resistance.\n      Those sorts of compromises are among **engineering choices**,\n      and they are **expected and essential**.  We always want to be\n      weighing tradeoffs and collectively choosing the set that best\n      meets the full set of requirements.\n\n      However, there is another sense of \"compromise\" that involves\n      compromising between people, not engineering principles.  For\n      example, a minority of a group might object to a particular\n      proposal, and even after discussion still think the proposal is\n      deeply problematic, but decide that they don't have the energy\n      to argue against it and say, \"Forget it, do what you want\".\n      That surely can be called a compromise, but a chair might\n      mistakenly take this to mean that they agree, and have therefore\n      come to consensus.  But really all that they've done is\n      capitulated; they've simply given up by trying to appease the\n      others.  That's not coming to consensus; there still exists an\n      outstanding unaddressed objection.  Again, if the objection is\n      only that the choice is not ideal but is otherwise acceptable,\n      such a compromise is fine.  But **conceding** when there is a\n      real outstanding technical objection **is not coming to\n      consensus**.\n\n      [...]\n\n      Coming to consensus is when everyone (including the person\n      making the objection) comes to the conclusion that either the\n      objections are valid, and therefore make a change to address the\n      objection, or that the objection was not really a matter of\n      importance, but **merely a matter of taste**.  Of course, coming\n      to full consensus like that does not always happen.  That's why\n      in the IETF, we talk about \"rough consensus\".\n\n    3.  Rough consensus is achieved when all issues are addressed, but\nnot necessarily accommodated\n\n      [...]\n\n      If the chair finds, in their technical judgement, that the issue\n      has truly been considered, and that the vast majority of the\n      working group has come to the conclusion that the tradeoff is\n      worth making, even in the face of continued objection from the\n      person(s) who raised the issue, the chair can declare that the\n      group has come to rough consensus.  (And even though this is\n      framed in terms of a \"vast majority\", even that is not\n      necessarily true.  This point is discussed in more detail in\n      Sections 6 and 7.)\n\n      [...]\n\n      The chair of a working group who is about to find that there is\n      only rough consensus is going to have to decide that not only\n      has the working group taken the objection seriously, but that it\n      has **fully examined the ramifications** of not making a change\n      to accommodate it, and that the outcome does not constitute a\n      failure to meet the technical requirements of the work.\n\n      In order to do this, the chair will need to have a good idea of\n      the purpose and architecture of the work being done, perhaps\n      referring to the charter of the working group or a previously\n      published requirements document, or even consulting with other\n      experts on the topic, and then the chair will use **their own\n      technical judgement** to make sure that the solution meets those\n      requirements.  It is possible that the chair can come to the\n      wrong conclusion, and the chair's conclusion is always\n      appealable should that occur, but the chair must use their\n      judgement in these cases.  What can't happen is that the chair\n      bases their decision solely on hearing a large number of voices\n      simply saying, \"The objection isn't valid.\"  That would simply\n      be to take a vote.  A **valid justification needs to me made**.\n\n      [...] Indeed, RFC 2418 adds on to [old talk of balloting] by\n      stating, \"Note that 51% of the working group does not qualify as\n      'rough consensus' and 99% is better than rough.\"  This document\n      actually disagrees with the idea that simply balloting or\n      otherwise looking at percentages can \"determine\" consensus.\n      While counting heads might give a good guess as to what the\n      rough consensus will be, doing so can allow important minority\n      views to get lost in the noise.  One of the strengths of a\n      consensus model is that minority views are addressed, and using\n      a rough consensus model should not take away from that.  That is\n      why this document talks a great deal about looking at open\n      issues rather than just counting the number of people who do or\n      do not support any given issue.  Doing so has some interesting\n      and surprising implications that are discussed in subsequent\n      sections.\n\n      Any finding of rough consensus needs, at some level, to provide\n      a **reasoned explanation** to the person(s) raising the issue of\n      why their concern is not going to be accommodated.  A good\n      outcome is for the objector to **understand the decision taken\n      and accept the outcome**, even though their particular issue is\n      not being accommodated in the final product.\n\n      Remember, if the objector feels that the issue is so essential\n      that it must be attended to, they always have the option to file\n      an appeal.  A technical error is always a valid basis for an\n      appeal. [...]\n\n    4.  Humming should be the start of a conversation, not the end\n\n      [...] a show of hands might leave the impression that the number\n      of people matters in some formal way.\n\n    5.  Consensus is the path, not the destination\n\n      We don't try to reach consensus in the IETF as an end in itself.\n      We use consensus-building as a tool to get to the best technical\n      (and sometimes procedural) outcome when we make decisions.\n      Experience has shown us that traditional voting leads to gaming\n      of the system, \"compromises\" of the wrong sort as described\n      earlier, important minority views being ignored, and, in the\n      end, worse technical outcomes.\n\n    6.  One hundred people for and five people against might not be\nrough consensus\n\n      [...] one of the great strengths of using consensus over voting:\n      It isn't possible to use \"vote stuffing\" (simply recruiting a\n      large number of people to support a particular side, even people\n      who have never participated in a working group or the IETF at\n      all) to change the outcome of a consensus call.  As long as the\n      chair is looking for outstanding technical objections and not\n      counting heads, vote stuffing shouldn't affect the outcome of\n      the consensus call.\n\n      [...]\n\n      Even if no particular person is still standing up for an issue,\n      that doesn't mean an issue can be ignored.  As discussed\n      earlier, simple capitulation on an issue is not coming to\n      consensus.  But even in a case where someone who is not an\n      active participant, who might not care much about the fate of\n      the work, raises a substantive issue and subsequently\n      disappears, the issue needs to be addressed before the chair can\n      claim that rough consensus exists.\n\n    7.  Five people for and one hundred people against might still be\nrough consensus\n\n      [...Sybil attack] it is within bounds for the chair to say, \"We\n      have objections, but the objections have been sufficiently\n      answered, and the objectors seem uninterested in participating\n      in the discussion.  Albeit rough in the extreme, there is rough\n      consensus to go with the current solution.\"\n\n      [...] it is likely that if a working group got this\n      dysfunctional, it would put the whole concept of coming to rough\n      consensus at risk.  But still, the correct outcome in this case\n      is to look at the very weak signal against the huge background\n      noise in order to find the rough consensus.\n\n    9.  Security Considerations\n\n      \"He who defends with love will be secure.\" -- Lao Tzu"
            },
            {
                "author": "Adam Back",
                "date": "2015-10-07T10:42:08",
                "message_text_only": "Thank you for posting that, most informative, and suggest people\narguing here lately to read it carefully.\n\nMay I suggest that people who wish to debate what rough consensus\nmeans, to take it to this reddit thread\n\nhttps://www.reddit.com/r/Bitcoin/comments/3ntga9/bitcoindev_a_brilliant_post_on_defining_consensus/\n\nThanks again for posting, helpful context/reminder for all.\n\nAdam\n\nOn 7 October 2015 at 07:07, Ryan Grant via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Bitcoin's participants can improve their ability to stay on a valuable\n> and censorship resistant blockchain by individually and informally\n> absorbing cultural wisdom regarding \"rough consensus\".  This does not\n> require writing any formal rules about what rough consensus is.  It is\n> a matter of participation with an understanding.\n>\n>   https://www.ietf.org/tao.html#rfc.section.2\n..."
            }
        ],
        "thread_summary": {
            "title": "on rough consensus",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ryan Grant",
                "Adam Back"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 22496
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin dev list bounce",
        "thread_messages": [
            {
                "author": "Venzen Khaosan",
                "date": "2015-10-07T06:59:38",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHi Warren,\n\nI submitted a public apology for a false accusation I leveled at\nSergio Lerner but my message was bounced by the list.\n\nCan you please confirm if there is a know reason for this.\n\nI had also sent the message to his personal email account, but I think\nit is important that a public apology be made as soon as possible, in\nthe interest of goodwill and setting the record straight.\n\nregards,\nVenzen Khaosan\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBAgAGBQJWFMLXAAoJEGwAhlQc8H1mDvMH/iLQtUyTKfoeC/ztCRRD4kBl\nQCIcFyoFzfF7COg38yvyl0N6V1JnUBTzMw3oSPhphKjH/Y5oRyLB+DQdEO9JQqnG\nLDV04cbSEoF1TOPvIPAVCY2QetFruSn3thcfhV5NFdNXwF/zAMrGiRMu6p0OJK+d\n6ky1fuhvm4tsfrj74elQH9MGXO5BulsaAQJqyAqxf4w8nG8pU/a+vfa7mPeQ7qbu\nypfNOY14yAk7bxaqy5c6kuSzJ1oCmiQePIIrWjZKffzEiAoTT8y6JpbLrQz5wsIh\nHgMr3/Z6ktxMrJjO0Bb5qwq84uweelWzt4UfcO6wjecvnyCcSrjlNCC6BM/HZPg=\n=ZsCj\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin dev list bounce",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Venzen Khaosan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 952
        }
    },
    {
        "title": "[bitcoin-dev] extension-blocks/sidechains & fractional/coin-cap/demurrage (Re: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!)",
        "thread_messages": [
            {
                "author": "Dr Adam Back",
                "date": "2015-10-07T09:45:24",
                "message_text_only": "Micha I think you are correct, I dont think extension blocks (or\nsidechains for that matter) can allow soft-fork increase of the total\nBitcoins in the system, because the main chain still enforces the 21m\ncoin cap.  A given extension block could go fractional, but if there\nwas a run to get out, the last users out will lose, or they'll all\ntake a hair-cut etc.  So presumably users would decline to use an\nextension block with fractional bitcoin.\n\nI mean you could view it like say an exchange (mtgox?) that somehow\naccidentally or intentionally creates fictional Bitcoin IOUs in it's\nsystem, eg in some kind of pyramid scheme - that doesnt create more\nBitcoins, it just means people who think they have IOUs for real\nBitcoins, are fractional or fake.  With an extension block or\nsidechain furthermore it is transparent so they will know they are\nfractional.\n\nRelatedly it seems possible to implement a sidechain with advertised\ndemurrage, with an exit or entrance fee to discourage holding outside\nof the chain to avoid demurrage.  There are apparently economic\narguments for why people might opt in to that (higher velocity\neconomic activity, gresham's law, merchants offering discounts for\nbuying with demurrage Bitcoins, maybe lower per transaction fees\nbecause say miners can mine the demurrage).  However that is a\ndifferent topic, again not changing the number of coins in\ncirculation.\n\nAdam\n\n\nOn 7 October 2015 at 08:13, Micha Bailey via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>\n> On Monday, October 5, 2015, Mike Hearn via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>\n>>> As Greg explained to you repeatedly, a softfork won't cause a\n>>> non-upgraded full node to start accepting blocks that create more\n>>> subsidy than is valid.\n>>\n>>\n>> It was an example. Adam Back's extension blocks proposal would, in fact,\n>> allow for a soft forking change that creates more subsidy than is valid (or\n>> does anything else) by hiding one block inside another.\n>\n>\n> Maybe I'm missing something, but wouldn't this turn into a hard fork the\n> moment you try to spend an output created in one of these extension blocks?\n> So sure, the block that contains the extension would be considered valid,\n> but unupgraded validators will not update the UTXO set accordingly, meaning\n> that those new TXOs can't be spent because, according to their rules, they\n> don't exist."
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-10-07T10:13:15",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nExactly,\n\nIn the coming fee market crunch, any speculator would trade an\nextended block in the implied direction and also hedge in the opposite\ndirection in case it gets rejected.\n\nThe speculative public will most likely trade in the same direction,\ninitially, but arbitrage and futures markets perspectives (generally\nmore informed) will go the opposite way and create a new chart pattern\nthat will precede contrarian price motion.\n\nIn the end, as the community illusion of non-interdependce fades, we'd\nexpect bitcoin price to tend to its natural condition: parity with the\nmost powerful fiat currency out there: the psychological King, the US\ndollar.\n\nAfter decades we could expect an inverse correlation to develop as the\nmajority world moves from paper to digital - barring a critical\nsurvival event such as a solar EMP, which is due, but which I reserve\njudgement upon for investment purposes.\n\nYou can buy coffee with XT bitcoins, but that is really small-minded\nbehavior in the current deflationary environment... Mike Hearn, you\neconomic imbicile, give me 15 minutes with you in public and I will\nknock you out of the Bitcoin space forever...\n\n\nVenzen Khaosan\n\n\n\nOn 10/07/2015 04:45 PM, Dr Adam Back via bitcoin-dev wrote:\n> Micha I think you are correct, I dont think extension blocks (or \n> sidechains for that matter) can allow soft-fork increase of the\n> total Bitcoins in the system, because the main chain still enforces\n> the 21m coin cap.  A given extension block could go fractional, but\n> if there was a run to get out, the last users out will lose, or\n> they'll all take a hair-cut etc.  So presumably users would decline\n> to use an extension block with fractional bitcoin.\n> \n> I mean you could view it like say an exchange (mtgox?) that\n> somehow accidentally or intentionally creates fictional Bitcoin\n> IOUs in it's system, eg in some kind of pyramid scheme - that\n> doesnt create more Bitcoins, it just means people who think they\n> have IOUs for real Bitcoins, are fractional or fake.  With an\n> extension block or sidechain furthermore it is transparent so they\n> will know they are fractional.\n> \n> Relatedly it seems possible to implement a sidechain with\n> advertised demurrage, with an exit or entrance fee to discourage\n> holding outside of the chain to avoid demurrage.  There are\n> apparently economic arguments for why people might opt in to that\n> (higher velocity economic activity, gresham's law, merchants\n> offering discounts for buying with demurrage Bitcoins, maybe lower\n> per transaction fees because say miners can mine the demurrage).\n> However that is a different topic, again not changing the number of\n> coins in circulation.\n> \n> Adam\n> \n> \n> On 7 October 2015 at 08:13, Micha Bailey via bitcoin-dev \n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> \n>> On Monday, October 5, 2015, Mike Hearn via bitcoin-dev \n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>>> \n>>>> As Greg explained to you repeatedly, a softfork won't cause\n>>>> a non-upgraded full node to start accepting blocks that\n>>>> create more subsidy than is valid.\n>>> \n>>> \n>>> It was an example. Adam Back's extension blocks proposal would,\n>>> in fact, allow for a soft forking change that creates more\n>>> subsidy than is valid (or does anything else) by hiding one\n>>> block inside another.\n>> \n>> \n>> Maybe I'm missing something, but wouldn't this turn into a hard\n>> fork the moment you try to spend an output created in one of\n>> these extension blocks? So sure, the block that contains the\n>> extension would be considered valid, but unupgraded validators\n>> will not update the UTXO set accordingly, meaning that those new\n>> TXOs can't be spent because, according to their rules, they don't\n>> exist.\n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBAgAGBQJWFPA4AAoJEGwAhlQc8H1m6VMH+wXreRpLb8VweIxVJ9mDJL2g\nd3rfhLL+50gZTt8csYJ7f/0BzbcS7nICOlvqn3PLAIu+Usr06iPIJSfHezvJ0GvE\ngbspU4lNZArScPjOVhrigrQVuN75KM2a84QW/hf/5Epf6rXWnClqc+IR/I33V/Yg\n0LUUFcmSXjOHVE18Yh3PB0ELY5I8/JYSzYX0dTu5qpbWzcjXUDfCfqewLKEgveZB\n+QGVrvMDPNxnx1AvMuMsmP3el/lvaNBTtuVjKhYZEgF8NhFB4hm/nLRSrMFOuBju\nvZlE8gbAQQlShCicuanL+l8KHiUi4/o3O5dIGoI/FwVoiXDK88158hpDLh1slv0=\n=GUI4\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "extension-blocks/sidechains & fractional/coin-cap/demurrage (Re: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Venzen Khaosan",
                "Dr Adam Back"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 6877
        }
    },
    {
        "title": "[bitcoin-dev] Public Debate Challenge",
        "thread_messages": [
            {
                "author": "Venzen Khaosan",
                "date": "2015-10-07T10:19:29",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nMike Hearn,\n\nI challenge you to a public debate with the following conditions:\n\n- - the topic is Bitcoin\n- - 15 minutes in length (19mins including breaks)\n- - 3 sessions of 5 minutes each\n- - each speaker makes one statement in each session, not exceeding 2mins\n- - 2 minute breaks between sessions\n- - we agree to an arbiter\n- - a public venue with an international audience\n- - I make the first statement versus your already well-established\nposition and widely publicized views.\n- - each speaker commits to making 3 statements and participating in the\nfull duration of the event - 19 minutes\n- - the footage will be published as-is with no editing or right to\nforfeiture, showing both participants at all times.\n- - to protect myself from your \"official\" friends, the event will be\nunannounced and will start when you see me on an event panel.\n\nsincerely,\nVenzen Khaosan\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBAgAGBQJWFPGuAAoJEGwAhlQc8H1m/6kH/RBdbnuVa/GwKDwgEJbz6p0W\n1OKu51Td/IC9Ty5DRhD8is0tzgPtGdJ9I6BFfd548Nhj954YnHE/sKP5XSa75jke\n3ombYCWPILrhk64XzIqBfpunygoERKDOUe1r8MmiSdtWY5XHWNEIWxhmydT2GCdZ\nDRO3bMKVxBBGhGROxzh2fHHPQ6N2qSmWPRD6QEHMeTvNlN3YN1NyHYiblYZ+Ox8X\n1fvemS7ecWhFRovDimiCxMX5yQQCTBSTWbBvyabkyyWUV3p3qgGk8mt+D7rFlLtt\n1KnoY6kerW738E5Nd10xMZ5ifeyiD4wATvijLJ0CIa05kiuy0DkaaDYpd28J9tM=\n=Qcvl\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2015-10-07T12:59:22",
                "message_text_only": "On Wed, Oct 07, 2015 at 05:19:29PM +0700, Venzen Khaosan via bitcoin-dev wrote:\n> Mike Hearn,\n> \n> I challenge you to a public debate with the following conditions:\n\nThis is very off-topic for a development mailing list.\n\nGo away.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000010734953ce486a820b6f7907e879b1b6e30fccf603098bef\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/5ff37111/attachment.sig>"
            },
            {
                "author": "NotMike Hearn",
                "date": "2015-10-07T16:09:06",
                "message_text_only": "On Wed, Oct 7, 2015 at 8:59 AM, Peter Todd via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wed, Oct 07, 2015 at 05:19:29PM +0700, Venzen Khaosan via bitcoin-dev\n> wrote:\n> > Mike Hearn,\n> >\n> > I challenge you to a public debate with the following conditions:\n>\n> This is very off-topic for a development mailing list.\n>\n\n\nI disagree.\n\nTherefore, we do not have a consensus.\n\nAs there is no consensus, you need to do one of two things:\n\n1) Post a 10 page, 5 paragraph persuasive essay about how you are a Traitor\nto Consensus, and do it\nloudly on Reddit, MySpace, LinkedIn, etc, so that everyone in the community\nis correctly informed.\n\n2) Do nothing.\n\nThis is a very logical argument and is of the utmost seriousness, as what\nPeter[:-1] is doing is a threat\nto Consensus, which is the very foundation of Bitcoin. These are related\nissues.\n\nI question Peter[:-1]'s motives and hereby challenge him to a public debate\nwith the following conditions:\n\n- - The subject is Bitcoin.\n- - The debate may take place at any time at any place.\n- - You will not know that the debate has begun until it is over.\n\nSincerely,\nNMH\n\n\n>\n> Go away.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000010734953ce486a820b6f7907e879b1b6e30fccf603098bef\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/91c6de2f/attachment.html>"
            },
            {
                "author": "Venzen Khaosan",
                "date": "2015-10-07T10:39:14",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nSure, and I share your view - I want to know what is happening in the\nBitcoin development space when I scan this email account.\n\nUnfortunately, one moral imbecile keeps polluting this space.\n\nI am confident that I have the debating resources and mental savvy to\nshow this individual to be an intellectual lightweight and a bankrupt\nspeaker that should shut his mouth, for good, in this list.\n\nI'm not sure where your own allegiances lie, but if you think XT is a\nbright idea, you can go there and participate to your heart's content.\nIn the meantime, this is a Bitcoin Core developer list and\nself-proclaimed enemies of Core should not post here or pretend to\nhave consensus-blocking powers, as O'Hearn keeps capitulating.\n\nLet me put this aspiring lord in his place and then we talk again. I\nwill knock him down in round 1 and knock him out in round 3. If you\nlove this man, go to xt-dev list and enjoy and spend your coins in\nthat alternate chain.\n\nVenzen Khaosan\n\n\n\nOn 10/07/2015 05:26 PM, Patrick Mccorry (PGR) wrote:\n> Hi,\n> \n> I do not mean to be rude (I am sure you have the best intentions). \n> But I do not think this e-mail (or the others) are appropriate for \n> the mailing list. I want to be notified by new developments in the \n> community, not really about public debates of character. Please, \n> can these e-mails be kept off-list?\n> \n> Paddy\n> \n> ________________________________________ From: \n> bitcoin-dev-bounces at lists.linuxfoundation.org \n> <bitcoin-dev-bounces at lists.linuxfoundation.org> on behalf of\n> Venzen Khaosan via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> Sent: 07 October 2015 11:19\n> To: Mike Hearn; Bitcoin Dev Subject: [bitcoin-dev] Public Debate\n> Challenge\n> \n> Mike Hearn,\n> \n> I challenge you to a public debate with the following conditions:\n> \n> - the topic is Bitcoin - 15 minutes in length (19mins including \n> breaks) - 3 sessions of 5 minutes each - each speaker makes one \n> statement in each session, not exceeding 2mins - 2 minute breaks \n> between sessions - we agree to an arbiter - a public venue with an \n> international audience - I make the first statement versus your \n> already well-established position and widely publicized views. - \n> each speaker commits to making 3 statements and participating in \n> the full duration of the event - 19 minutes - the footage will be \n> published as-is with no editing or right to forfeiture, showing \n> both participants at all times. - to protect myself from your \n> \"official\" friends, the event will be unannounced and will start \n> when you see me on an event panel.\n> \n> sincerely, Venzen Khaosan \n> _______________________________________________ bitcoin-dev\n> mailing list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\n\niQEcBAEBAgAGBQJWFPZRAAoJEGwAhlQc8H1mKkUH/jAYVoTMT7OW0bg2dquYBmiF\npNbO5oaqO1F3QGLqlLs/S8h/rxkY0tfaae86HEZ/fVNn9r2k6aykmrrztAZdgOT+\np9a7Po/kdd5BPoJ1F84cTxaAiMtl7y8oPyT/np7Ky+Nnyxs2di5eKdV3UK4gKzpt\n6xsCR16CinGC8LPveCkGHNgqlk0Of4sNpnkhW945oO2nJzVB3TogvhJQvecZ3hw9\nMzIxj59lXI8EL9qhkE0Ufaia1fHfRorCU0qt7mAOxHaZt4Wy3CpgGqrrRGsqXdud\nKC3xePRpCaRmLqyUQVXjXdlvANMnXje5dTg9LH0Gseuhb26RGfq7Z3lQ+3kacVo=\n=gHMy\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "NxtChg",
                "date": "2015-10-07T10:56:33",
                "message_text_only": ">Unfortunately, one moral imbecile keeps polluting this space.\n\nIndeed."
            }
        ],
        "thread_summary": {
            "title": "Public Debate Challenge",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd",
                "NotMike Hearn",
                "NxtChg",
                "Venzen Khaosan"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 7058
        }
    },
    {
        "title": "[bitcoin-dev] The new obfuscation patch & GetStats",
        "thread_messages": [
            {
                "author": "Daniel Kraft",
                "date": "2015-10-07T17:25:06",
                "message_text_only": "Hi!\n\nI hope this is not a stupid question, but I thought I'd ask here first\ninstead of opening a Github ticket (in case I'm wrong).\n\nWith the recently merged \"obfuscation\" patch, content of the\n\"chainstate\" LevelDB is obfuscated by XOR'ing against a random \"key\".\nThis is handled by CLevelDBWrapper's Read/Write methods, which probably\ncover most of the usecases.\n\n*However*, shouldn't it also be handled when iterating over the\ndatabase?  In particular, I would expect that the obfuscation key is\napplied before line 119 in txdb.cpp (i. e., while iterating over the\ncoin database in CCoinsViewDB::GetStats).\n\nIs there a reason why this need not be done there, or is this an actual\noversight?\n\nYours,\nDaniel\n\n-- \nhttp://www.domob.eu/\nOpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737\nNamecoin: id/domob -> https://nameid.org/?name=domob\n--\nDone:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz\nTo go: Mon-Pri\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/f6c7e0f9/attachment.sig>"
            },
            {
                "author": "James O'Beirne",
                "date": "2015-10-07T23:32:03",
                "message_text_only": "Hey, Daniel.\n\nPatch author here. Thanks for the diligence; I think this indeed may be an\noversight, though I'm going to need to look into a bit more thoroughly at\nhome. Curious that it didn't fail any of the automated tests.\n\nCorrect me if I'm wrong, but the only actual invocation of that method is\nhere\n<https://github.com/bitcoin/bitcoin/blob/master/src/rpcblockchain.cpp#L448>\n(and even then, proxied through a few layers of CCoinView-machinery). In\nfact, this line\n<https://github.com/bitcoin/bitcoin/blob/master/src/coins.cpp#L48> makes me\nsuspect that the implementation of GetStats you reference may be dead code.\n\nIn any case, you raise a good point: if users of CLevelDBWrapper go\ndirectly for the iterator, they run the risk of dealing with obfuscated\ndata. This should be remedied somehow.\n\nI'll give it more look this evening.\n\nThanks again for the find,\nJames\n\nOn Wed, Oct 7, 2015 at 10:25 AM, Daniel Kraft via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi!\n>\n> I hope this is not a stupid question, but I thought I'd ask here first\n> instead of opening a Github ticket (in case I'm wrong).\n>\n> With the recently merged \"obfuscation\" patch, content of the\n> \"chainstate\" LevelDB is obfuscated by XOR'ing against a random \"key\".\n> This is handled by CLevelDBWrapper's Read/Write methods, which probably\n> cover most of the usecases.\n>\n> *However*, shouldn't it also be handled when iterating over the\n> database?  In particular, I would expect that the obfuscation key is\n> applied before line 119 in txdb.cpp (i. e., while iterating over the\n> coin database in CCoinsViewDB::GetStats).\n>\n> Is there a reason why this need not be done there, or is this an actual\n> oversight?\n>\n> Yours,\n> Daniel\n>\n> --\n> http://www.domob.eu/\n> OpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737\n> Namecoin: id/domob -> https://nameid.org/?name=domob\n> --\n> Done:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz\n> To go: Mon-Pri\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/d8da0a40/attachment.html>"
            },
            {
                "author": "James O'Beirne",
                "date": "2015-10-08T00:29:25",
                "message_text_only": "This has been confirmed as a bug. Thanks again for reporting. I've filed a\nfix here (https://github.com/bitcoin/bitcoin/pull/6777), and will be\nwriting tests to prevent regressions.\n\nOn Wed, Oct 7, 2015 at 4:32 PM, James O'Beirne <james.obeirne at gmail.com>\nwrote:\n\n> Hey, Daniel.\n>\n> Patch author here. Thanks for the diligence; I think this indeed may be an\n> oversight, though I'm going to need to look into a bit more thoroughly at\n> home. Curious that it didn't fail any of the automated tests.\n>\n> Correct me if I'm wrong, but the only actual invocation of that method is\n> here\n> <https://github.com/bitcoin/bitcoin/blob/master/src/rpcblockchain.cpp#L448>\n> (and even then, proxied through a few layers of CCoinView-machinery). In\n> fact, this line\n> <https://github.com/bitcoin/bitcoin/blob/master/src/coins.cpp#L48> makes\n> me suspect that the implementation of GetStats you reference may be dead\n> code.\n>\n> In any case, you raise a good point: if users of CLevelDBWrapper go\n> directly for the iterator, they run the risk of dealing with obfuscated\n> data. This should be remedied somehow.\n>\n> I'll give it more look this evening.\n>\n> Thanks again for the find,\n> James\n>\n> On Wed, Oct 7, 2015 at 10:25 AM, Daniel Kraft via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi!\n>>\n>> I hope this is not a stupid question, but I thought I'd ask here first\n>> instead of opening a Github ticket (in case I'm wrong).\n>>\n>> With the recently merged \"obfuscation\" patch, content of the\n>> \"chainstate\" LevelDB is obfuscated by XOR'ing against a random \"key\".\n>> This is handled by CLevelDBWrapper's Read/Write methods, which probably\n>> cover most of the usecases.\n>>\n>> *However*, shouldn't it also be handled when iterating over the\n>> database?  In particular, I would expect that the obfuscation key is\n>> applied before line 119 in txdb.cpp (i. e., while iterating over the\n>> coin database in CCoinsViewDB::GetStats).\n>>\n>> Is there a reason why this need not be done there, or is this an actual\n>> oversight?\n>>\n>> Yours,\n>> Daniel\n>>\n>> --\n>> http://www.domob.eu/\n>> OpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737\n>> Namecoin: id/domob -> https://nameid.org/?name=domob\n>> --\n>> Done:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz\n>> To go: Mon-Pri\n>>\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151007/ce7d4d3f/attachment-0001.html>"
            },
            {
                "author": "Daniel Kraft",
                "date": "2015-10-08T05:14:50",
                "message_text_only": "Hi James!\n\nOn 2015-10-08 02:29, James O'Beirne wrote:\n> This has been confirmed as a bug. Thanks again for reporting. I've filed\n> a fix here (https://github.com/bitcoin/bitcoin/pull/6777), and will be\n> writing tests to prevent regressions.\n\nThanks for the quick fix!\n\nI thought to submit a patch myself today in case the issue is confirmed\nas an oversight, but it is very nice to see that this is no longer\nnecessary at all. :)\n\nYours,\nDaniel\n\n-- \nhttp://www.domob.eu/\nOpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737\nNamecoin: id/domob -> https://nameid.org/?name=domob\n--\nDone:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz\nTo go: Mon-Pri\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/23096215/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "The new obfuscation patch & GetStats",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "James O'Beirne",
                "Daniel Kraft"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 7154
        }
    },
    {
        "title": "[bitcoin-dev] soft-fork security (Re: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2015-10-07T23:07:48",
                "message_text_only": "On 7 October 2015 at 18:26, Jonathan Toomim (Toomim Bros) via\nbitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Oct 7, 2015, at 9:02 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> If you had a 99% hashpower supermajority on the new version, an attacker\n> would still be able to perform this attack once per day.\n\n[ie wait for a non-upgraded miner to win a block]\n\nI dont think that is something strong and new to focus on or worry\nabout, because in Bitcoin's game theory there are lets say 3 types of\nminers we're in aggregate trying to get security from:\n\na) honest (following protocol) bolstered by financial incentive to\nremain honest of subsidy & fees\nb) agnostic / lazy (just run software, upgrade when they lose money\nand/or get shouted at)\nc) dishonest\n\nBitcoin remains secure with various combinations of percentages.  For\nsure you wont have a good time if you assume < 1% are dishonest.\n\nTherefore this attack can already happen, and in fact has.  Users of\nbitcoin must behave accordingly with confirmations.\n\nBitcoin direct is not super secure for unconfirmed (so-called\n0-confirm) transactions, or even for 1-confirm transactions.  See also\nFinney attack.\n\nThat does not prevent people using unconfirmed transactions with risk\nscoring, or in high trust settings, or high margin businesses selling\ndigital artefacts or physical with nominal incremental cost.\n\nBut it does mean that one has to keep that in mind.  And it also\nmotivates lightning network or payment channels (lightning with one\nintermediate node vs a network of nodes) - they can provide basically\ninstant 0-confirm securely, and that seems like the future.\n\nIn my opinion anyone relying on unconfirmed transactions needs to\nmonitor for problems, and have some plan B or workaround if the fraud\nrates shoot up (if someone tries to attack it in an organised way),\nand also a plan C mid-term plan to do something more robust.  Some\npeople are less charitable and want to kill unconfirmed transactions\nimmediately.  The message is the same ultimately.\n\nAdam"
            }
        ],
        "thread_summary": {
            "title": "soft-fork security (Re: Let's deploy BIP65 CHECKLOCKTIMEVERIFY!)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2051
        }
    },
    {
        "title": "[bitcoin-dev] merged multisig inputs",
        "thread_messages": [
            {
                "author": "Boris Neklabaro",
                "date": "2015-10-08T19:55:09",
                "message_text_only": "Hi,\nIs it possible to merge 2 utxos spending from multiple P2SH inputs? Or combined inputs P2SH and P2PKH in a single transaction?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/2d964358/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-08T20:03:49",
                "message_text_only": "On Thu, Oct 8, 2015 at 7:55 PM, Boris Neklabaro via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hi,\n>\n> Is it possible to merge 2 utxos spending from multiple P2SH inputs? Or\n> combined inputs P2SH and P2PKH in a single transaction?\n\nYes, the signatures for separate inputs are entirely separate."
            }
        ],
        "thread_summary": {
            "title": "merged multisig inputs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Boris Neklabaro",
                "Gregory Maxwell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 629
        }
    },
    {
        "title": "[bitcoin-dev] Mike Hearn, who coined the term SPV is Satoshi",
        "thread_messages": [
            {
                "author": "Boris Neklabaro",
                "date": "2015-10-08T22:53:58",
                "message_text_only": "Interesting:\nhttp://kke5edzhy54hiee5.onion/(requires Tor Browser)\nor without Tor Browser:http://kke5edzhy54hiee5.onion.to/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151008/9c8c1967/attachment.html>"
            },
            {
                "author": "Sriram Karra",
                "date": "2015-10-09T04:22:32",
                "message_text_only": "Off topic.\nOn Oct 9, 2015 4:27 AM, \"Boris Neklabaro via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Interesting:\n>\n> http://kke5edzhy54hiee5.onion/\n> (requires Tor Browser)\n>\n> or without Tor Browser:\n> http://kke5edzhy54hiee5.onion.to/\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/5cc5a07c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Mike Hearn, who coined the term SPV is Satoshi",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Sriram Karra",
                "Boris Neklabaro"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 940
        }
    },
    {
        "title": "[bitcoin-dev] Why not checkpointing the transactions?",
        "thread_messages": [
            {
                "author": "telemaco",
                "date": "2015-10-09T03:18:31",
                "message_text_only": "Hello,\n\nI have been working on database engineering for many years and there are \nsome things i don't understand very well about how bitcoin architecture \nworks. I have not written here because i would not like to disturb \ndevelopment with yet another of those far to implement ideas that does \nnot contribute to actual code as sometimes is said here.\n\nOn any case today I have been listening the last beyond bitcoin video \nabout the new bitshares 2.0 and how they are changing the transaction \nstructure to do it more similar to what relational database management \nsystems have been doing for 30 years.\n\nKeep a checkpointed state and just carry the new transactions. On rdbms, \nanyone if they want to perform historical research or something, they \ncan just get the transaction log backups and reply every single \ntransaction since the beginning of history.\nWhy is bitcoin network replying every single transaction since the \nbeginning and not start from a closer state. Why is that information \neven stored on every core node? Couldn't we just have a checkpointed \nstate and the new transactions and leave to \"historical\" nodes or \ncollectors the backup of all the transactions since the beginning of \nhistory?\n\nReplication rdbms have been working with this model for some time, just \nbeing able to replicate at table, column, index, row or even db level \nbetween many datacenters/continents and already serving the financial \nworld, banks and exchanges. Their tps is very fast because they only \ntransfer the smallest number of transactions that nodes decide to be \nsuscribed to, maybe japan exchange just needs transactional info from \njapanese stocks on nasdaq or something similar. But even if they \nsuscribe to everything, the transactional info is to some extent just a \nvery small amount of information.\n\nCouldn't we have just a very small transactional system with the fewest \nnumber of working transactions and advancing checkpointed states? We \nshould be able to have nodes of the size of watches with that structure, \ninstead of holding everything for ever for all eternity and hope on \nmoore's law to keep us allowing infinite growth. What if 5 internet \nsubmarine cables get cut on a earth movement or war or there is a \nshortage of materials for chip manufacturing and the network moore's law \ncannot keep up. Shouldn't performance optimization and capacity planning \ngo in both ways?. Having a really small working \"transaction log\" allows \ncompanies to rely some transactional info to little pdas on warehouses, \nor just relay a small amount of information to a satellite, not every \nsingle transaction of the company forever.\n\nAfter all if we could have a very small transactional workload and leave \nbehind the overload of all the previous transactions, we could have \nbitcoin nodes on watches and have an incredibly decentralized system \nthat nobody can disrupt as the decentralization would be massive. We \ncould even create a very small odbc, jdbc connector on the bitcoin \nclient and just let any traditional rdbms system handle the heavy load \nand just let bitcoin core rely everyone and his mother to a level that \nnoone could ever disrupt a very small amount of transactional data.\n\nJust some thoughts. Please don't be very harsh, i am still researching \nbitcoin code and my intentions are the best as i cannot be more \npassionate about the project.\n\nThanks,"
            },
            {
                "author": "jl2012 at xbt.hk",
                "date": "2015-10-09T04:16:50",
                "message_text_only": "You are mixing multiple issues.\n\n1. It is not possible to \"checkpoint\" in a totally decentralized and \ntrustless way. You need the whole blockchain to confirm its validity, as \na single invalid tx in the history will invalidate ALL blocks after it, \neven if the invalid tx is irrelevant to you.\n\n2. Downloading the whole blockchain does not mean you need to store the \nwhole blockchain. Spent transactions outputs can be safely removed from \nyour harddrive. Please read section 7 of Satoshi's paper: \nhttps://bitcoin.org/bitcoin.pdf . This function is already implemented \nin Bitcoin Core 0.11\n\n3. If you don't even want to download the whole blockchain, you can \ndownload and validate the portions that your are interested. Satoshi \ncalled it Simplified Payment Verification (SPV), the section 8 of his \npaper. It is secure as long as >50% of miners are honest. Android \nBitcoin Wallet is an SPV wallet based on bitcoinj.\n\nFinally, I think this kind of question would be better asked on the \nbitcointalk forum. The mailing list should be more specific to \ndevelopment, not merely some vague idea.\n\n\n\ntelemaco via bitcoin-dev \u65bc 2015-10-08 23:18 \u5beb\u5230:\n> Hello,\n> \n> I have been working on database engineering for many years and there\n> are some things i don't understand very well about how bitcoin\n> architecture works. I have not written here because i would not like\n> to disturb development with yet another of those far to implement\n> ideas that does not contribute to actual code as sometimes is said\n> here.\n> \n> On any case today I have been listening the last beyond bitcoin video\n> about the new bitshares 2.0 and how they are changing the transaction\n> structure to do it more similar to what relational database management\n> systems have been doing for 30 years.\n> \n> Keep a checkpointed state and just carry the new transactions. On\n> rdbms, anyone if they want to perform historical research or\n> something, they can just get the transaction log backups and reply\n> every single transaction since the beginning of history.\n> Why is bitcoin network replying every single transaction since the\n> beginning and not start from a closer state. Why is that information\n> even stored on every core node? Couldn't we just have a checkpointed\n> state and the new transactions and leave to \"historical\" nodes or\n> collectors the backup of all the transactions since the beginning of\n> history?\n> \n> Replication rdbms have been working with this model for some time,\n> just being able to replicate at table, column, index, row or even db\n> level between many datacenters/continents and already serving the\n> financial world, banks and exchanges. Their tps is very fast because\n> they only transfer the smallest number of transactions that nodes\n> decide to be suscribed to, maybe japan exchange just needs\n> transactional info from japanese stocks on nasdaq or something\n> similar. But even if they suscribe to everything, the transactional\n> info is to some extent just a very small amount of information.\n> \n> Couldn't we have just a very small transactional system with the\n> fewest number of working transactions and advancing checkpointed\n> states? We should be able to have nodes of the size of watches with\n> that structure, instead of holding everything for ever for all\n> eternity and hope on moore's law to keep us allowing infinite growth.\n> What if 5 internet submarine cables get cut on a earth movement or war\n> or there is a shortage of materials for chip manufacturing and the\n> network moore's law cannot keep up. Shouldn't performance optimization\n> and capacity planning go in both ways?. Having a really small working\n> \"transaction log\" allows companies to rely some transactional info to\n> little pdas on warehouses, or just relay a small amount of information\n> to a satellite, not every single transaction of the company forever.\n> \n> After all if we could have a very small transactional workload and\n> leave behind the overload of all the previous transactions, we could\n> have bitcoin nodes on watches and have an incredibly decentralized\n> system that nobody can disrupt as the decentralization would be\n> massive. We could even create a very small odbc, jdbc connector on the\n> bitcoin client and just let any traditional rdbms system handle the\n> heavy load and just let bitcoin core rely everyone and his mother to a\n> level that noone could ever disrupt a very small amount of\n> transactional data.\n> \n> Just some thoughts. Please don't be very harsh, i am still researching\n> bitcoin code and my intentions are the best as i cannot be more\n> passionate about the project.\n> \n> Thanks,\n> \n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Why not checkpointing the transactions?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "jl2012 at xbt.hk",
                "telemaco"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8195
        }
    },
    {
        "title": "[bitcoin-dev] Making soft forks pluggable",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2015-10-09T03:58:12",
                "message_text_only": "Before I scare anyone away, please here me out:\n\nIt occurs to me it wouldn't be all that difficult to support the ability \nto define soft forks entirely as standalone units that can be trivially \nmerged with Bitcoin Core. It would require a few changes in some places \nin the consensus code, but at least for a very wide class of potential \nsoft forks, all cases could be covered via only a small number of hooks, \nprimarily in main.cpp, consensus/*, script/interpreter.cpp, and \nprimitives/*. (Other hooks could be added in non-consensus code such as \nrpcblockchain.cpp or the wallet). It would be possible to build unit \ntests for each soft fork independently and compare enforcement of \ndifferent combinations (as well as simulate these deployment \ncombinations on regtest).\n\nBefore I get too heavily invested in this idea, though, I'd like to see \nif there are any reasonable objections to such a thing. Of course, \nrefactors are generally disruptive in the short-term...but I think what \nI'm talking about can be done without having to move very large chunks \nof code around, with very specifically defined hooks that can be easily \ndocumented to make backports fairly simple.\n\nMy biggest concern (other than being able to convince everyone that we \nwon't break anything, which of course I'd have to do a good job of in \nterms of rigor) is whether supporting this feature is a good idea in the \nfirst place. There's something to be said for it not being *too* easy to \nwrite and deploy a soft fork...however, unless we open this up a little \nmore and make such deployments more routine (and safe) it will take a \nvery long time to deploy stuff. A significant motivation behind \nVersionBits (BIP0009) is to make such deployments faster, so if we're \nalready doing that perhaps we might as well take this initiative even \nfurther.\n\nIf others think this is a good idea I'll start writing up a detailed \nplan. (NOTE: The current versionbits deployment plan does not require \nthis. I am working on an implementation of versionbits that could \npotentially support this plan but doesn't have to.)\n\nIf I'm very wrong, I am all ears to *sincere* objections.\n\n\n- Eric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/474dbc5d/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Making soft forks pluggable",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2350
        }
    },
    {
        "title": "[bitcoin-dev] Fw: Making soft forks pluggable",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2015-10-09T07:39:59",
                "message_text_only": "I wanted to clarify that this goal is for AFTER the next release in case \nthat didn't come across. The point is just to ascertain interest and \nstart thinking ahead. VersionBits can be fully ready to go well before \nthen and is well underway.\n\n------ Forwarded Message ------\nFrom: \"Eric Lombrozo\" <elombrozo at gmail.com>\nTo: \"bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org>\nSent: 10/8/2015 8:58:12 PM\nSubject: Making soft forks pluggable\n\nBefore I scare anyone away, please here me out:\n\nIt occurs to me it wouldn't be all that difficult to support the ability \nto define soft forks entirely as standalone units that can be trivially \nmerged with Bitcoin Core. It would require a few changes in some places \nin the consensus code, but at least for a very wide class of potential \nsoft forks, all cases could be covered via only a small number of hooks, \nprimarily in main.cpp, consensus/*, script/interpreter.cpp, and \nprimitives/*. (Other hooks could be added in non-consensus code such as \nrpcblockchain.cpp or the wallet). It would be possible to build unit \ntests for each soft fork independently and compare enforcement of \ndifferent combinations (as well as simulate these deployment \ncombinations on regtest).\n\nBefore I get too heavily invested in this idea, though, I'd like to see \nif there are any reasonable objections to such a thing. Of course, \nrefactors are generally disruptive in the short-term...but I think what \nI'm talking about can be done without having to move very large chunks \nof code around, with very specifically defined hooks that can be easily \ndocumented to make backports fairly simple.\n\nMy biggest concern (other than being able to convince everyone that we \nwon't break anything, which of course I'd have to do a good job of in \nterms of rigor) is whether supporting this feature is a good idea in the \nfirst place. There's something to be said for it not being *too* easy to \nwrite and deploy a soft fork...however, unless we open this up a little \nmore and make such deployments more routine (and safe) it will take a \nvery long time to deploy stuff. A significant motivation behind \nVersionBits (BIP0009) is to make such deployments faster, so if we're \nalready doing that perhaps we might as well take this initiative even \nfurther.\n\nIf others think this is a good idea I'll start writing up a detailed \nplan. (NOTE: The current versionbits deployment plan does not require \nthis. I am working on an implementation of versionbits that could \npotentially support this plan but doesn't have to.)\n\nIf I'm very wrong, I am all ears to *sincere* objections.\n\n\n- Eric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/62d517ca/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fw: Making soft forks pluggable",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Eric Lombrozo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2794
        }
    },
    {
        "title": "[bitcoin-dev] #bitcoin-dev Weekly Development Meeting Minutes 2015-10-08",
        "thread_messages": [
            {
                "author": "Daniel Stadulis",
                "date": "2015-10-09T22:45:37",
                "message_text_only": "More readable Google Doc version with html links here:\nhttps://docs.google.com/document/d/1hCDuOBNpqrZ0NLzvgrs2kDIF3g97sOv-FyneHjQellk/edit?usp=sharing\n\nMeeting Title:\n#bitcoin-dev Weekly Development Meeting\n\nMeeting Date:\n2015-10-08\n\nMeeting Time:\n19:00-20:00 UTC\n\nParticipants in Attendance:\ndstadulis\nwumpus\nbtcdrak\nmorcos\npetertodd\nbsm117532\nBlueMatt\ngmaxwell\nGreenIsMyPepper\nphantomcircuit\nwarren\nsipa\n\nIRC Chat Logs:\nhttp://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/08#l1444329019.0\n\n\u2014\u2014\u2014------------------------------\nTopics to be discussed:\n\n1. Mempool limiting\n2. Partial transaction malleability fix: Low-S change (releases 0.10.3, 0.11.1\nbackport)\n3. CHECKLOCKTIMEVERIFY (CLTV) backport reviews\n4. CHECKSEQUENCEVERIFY (CSV) reviews\n5. Creation of [bitcoin-discuss] mailing list planning\n\n\u2014\u2014\u2014------------------------------\n2015-10-08 Meeting Conclusions:\n\nEcosystem Warnings & Alerts:\nThere is a Bitcoin ecosystem threat with the potential to cause millions of\ndollars in losses that needs higher visibility. It's not a Bitcoin Core /\nBitcoin network issue but most Javascript-based Bitcoin software is\naffected. The issue, documented here\nhttps://github.com/feross/buffer/pull/81, is about common, critical,\nJavascript code that is broken and may cause the generation of incorrect\npubkeys (among other issues). If Javascript is part of your implementation,\nyou should read the referenced pull request.\n\n#\nAction items\nResponsible Parties\nETA/Due Date\n\n1\nReview/test code for Pull Request #6722 \"Limit mempool by throwing away the\ncheapest txn and setting min relay fee to it\".\nAll\nUnspecified\n\n2\nProvide ACK\u2019s/support for low limits on PR #6771 \"Policy: Lower default\nlimits for tx chains\".\nAll\nUnspecified\n\n4\nUrgent code review and ACKs of CLTV backports PR:\n#6706 \u201cCLTV IsSuperMajority() soft-fork, rebased for v0.10.2\u201d\n#6707 \u201cCLTV IsSuperMajority() soft-fork, rebased for v0.11.0\u201d\nAll\nUnspecified\n\n5\nContact miners about PR #6769 \"Test LowS in standardness, removes nuisance\nmalleability vector\" and turning on the long-existing anti-malleability\nstandardness rules in Bitcoin Core\nBluematt & Gmaxwell\nUnspecified\n\n6\nClarification from maaku regarding nSequence for BIP68\nContinue review and ACKs of PR\n#6312 \u201cBIP-68: Mempool-only sequence number constraint verification\u201d\n#6564 \u201cBIP-112: Mempool-only CHECKSEQUENCEVERIFY\u201d\n#6566 \u201cBIP-113: Mempool-only median time-past as endpoint for lock-time\ncalculations\u201d\nAll\nUnspecified\n\n7\nMailing Lists: [bitcoin-discuss] creation, moderators assignment of discuss\nand dev list, simple website for mailing list policy.\nWarren\nDiscussion meeting scheduled for: 2015-10-12 19:00-20:00 UTC\n\nMeetingbot Minutes\nMinutes(HTML)\nhttp://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-08-18.59.html\nMinutes(text)\nhttp://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-08-18.59.txt\nIRC Log:\nhttp://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-08-18.59.log.html\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151009/6a9cdac3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "#bitcoin-dev Weekly Development Meeting Minutes 2015-10-08",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Daniel Stadulis"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3139
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin dev meeting in layman's terms (2015-10-8)",
        "thread_messages": [
            {
                "author": "G1lius Caesar",
                "date": "2015-10-10T15:22:15",
                "message_text_only": "Once again my attempt to summarize and explain the weekly bitcoin developer\nmeeting in layman's terms.\nLink to last weeks layman's summarization:\nhttps://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg02445.html\n\n\n\n*Disclaimer*\n\nPlease bare in mind I'm not a developer and I'd have problems coding \"hello\nworld!\", so some things might be incorrect or plain wrong.\nLike any other write-up it likely contains personal biases, although I try\nto stay as neutral as I can.\nThere are no decisions being made in these meetings, so if I say \"everyone\nagrees\" this means everyone present in the meeting, that's not consensus,\nbut since a fair amount of devs are present it's a good representation.\nThe dev IRC and mailinglist are for bitcoin development purposes. If you\nhave not contributed actual code to a bitcoin-implementation, this is\nprobably not the place you want to reach out to. There are many places to\ndiscuss things that the developers read, including this sub-reddit.\n\n\nlink to this week logs (\nhttp://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/08#l1444330778.0 )\nlink to meeting minutes (\nhttps://docs.google.com/document/d/1hCDuOBNpqrZ0NLzvgrs2kDIF3g97sOv-FyneHjQellk/edit\n)\n\n\nMain topics discussed this week where:\n\nMempool limiting: chain limits\nLow-S change\nCLTV & CSV review\nCreation of bitcoin discuss mailing list\n\n\n**off-topic but important notice**\n\nThis issue ( https://github.com/feross/buffer/pull/81 ) has made most JS\nbitcoin software vulnerable to generating incorrect public keys.\n\"This is an ecosystem threat with the potential to cause millions of\ndollars in losses that needs higher visibility; though it's not a bitcoin\ncore / bitcoin network issue.\nCommon, critical, JS code is broken that may cause the generation of\nincorrect pubkeys (among other issues). Anyone who cares for a JS\nimplementation should read that PR.\"\n\n\n**Mempool limiting: chain limits**\n\n- background\n\n(c/p from last week)\nChain in this context means connected transactions. When you send a\ntransaction that depends on another transaction that has yet to be\nconfirmed we talk about a chain of transactions.\nMiners ideally take the whole chain into account instead of just every\nsingle transaction (although that's not widely implemented afaik). So while\na single transaction might not have a sufficient fee, a depending\ntransaction could have a high enough fee to make it worthwhile to mine both.\nThis is commonly known as child-pays-for-parent.\nSince you can make these chains very big it's possible to clog up the\nmempool this way.\nThe first unconfirmed transaction is called the ancestor and the\ntransactions depending on it the descendants. The total amount of\ntransactions is reffered to as \"packages\".\n\n- since last week\n\nAs said in \"Chain limits\" last week Morcos did write a proposal about\nlowering the default limits for transaction-chains.\n2 use cases came up which are currently in use or happened before:\nAs example: someone buys bitcoin from a website and can spend those bitcoin\nin the marketplace of the same website without waiting for confirmation in\norder to improve the bitcoin user-experience. This leaves a sequential\ntransaction chain. They don't need to chain more than 5 transactions deep\nfor this, and it falls within the proposed limits.\nWhat's not within the proposed limits is the chain of +/- 100 transactions\na company had during the spam-attacks. These where simply increased\nactivities by end-users while not enough UTXO's where available (3 to be\nprecise)(UTXO: unspent transaction output, an output that can be used as\ninput for a new transaction).\nNotably this is with the best practices of using confirmed transactions\nfirst.\nWays this can be solved from the company's end is to have more UTXO's\navailable before hand, bundling transactions (which requires delaying\ncustomer's request) or using replace-by-fee to add payees (which saves\nblockchain space, is cheaper in fees and gets transactions through quicker,\nbut is not widely deployed by miners atm).\nBare in mind these proposals are for default values for the memorypool, not\nin any way hard limits.\n\n\n- meeting comments\n\nSense of urgency. Quoting sipa: \"my mempool is 2.5G... we better get some\nsolution!\"\nCurrent attack analysis assumes child-pays-for-parent mining, it should\nprobably be done again without.\nHigher limits on number of transactions increase attack-vectors.\nProposed number of transactions gets some push-back, total size limit not.\nMixing default values (for example having a 50% of a 10/10 limit and 50% of\na 100/100 limit) wastes bandwidth while there are too many factors that\nlimit utility of long chains as well.\n25 transaction limit ought to be enough for everyone (for now).\n\n- meeting conclusion\n\nReview & test \"Limit mempool by throwing away the cheapest txn and setting\nmin relay fee to it\" ( https://github.com/bitcoin/bitcoin/pull/6722 )\nProvide support for \"Lower default limits for tx chains\" (\nhttps://github.com/bitcoin/bitcoin/pull/6771 ) aka convince people 25\nshould be enough.\n\n\n\n**Low-S change**\n\n- background\n\nThis is in regards to the recent malleability attack. Which is caused by a\nvalue 'S' in the ECDSA signature which can be 2 values, a high and low\nvalue and still be valid. Resulting in different transaction id's. more\ninfo:\nhttp://blog.coinkite.com/post/130318407326/ongoing-bitcoin-malleability-attack-low-s-high\nA solution for this is to require nodes to have the \"low-s\" encoding for\nsignatures.\nDownside is that it will block most transactions made by sufficiently out\nof date software (+/- pre-march 2014)\nThis does not replace the need for BIP62, it only eliminates the cheap DOS\nattack.\n\n\n- meeting comments\n\n95% of transactions already confirm to this, and more fixes have been\napplied since.\nBlueMatt has a node which several people are running that auto-malleates to\nlow-s transactions.\nQuestions whether we release it ASAP or wait for the next release and get\nit to a couple of miners in the meantime (possibly with\nauto-lowS-malleating)\n\n\n- meeting conclusion\n\nContact miners about \"Test LowS in standardness, removes nuisance\nmalleability vector\" ( https://github.com/bitcoin/bitcoin/pull/6769 )\nRelease scheduled for the end of the month, together with likely\ncheck-lock-time-verify and possibly check-sequence-verfiy.\n\n\n\n**CLTV & CSV backport review**\n\n- background\n\nCLTV: checkLockTimeVerify\nCSV: checkSequenceVerify\nBoth new time-related OP-codes.\nBeen discussed heavily last week.\n\n\n- meeting comments\n\nCSV doesn't seem ready enough for release later this month.\nThere's no clarity on how things look when all 3 time related pull-requests\nare merged.\nThere's a number of people still reviewing the pull-requests.\nUncertainty and confusion about whether the semantics are final or not (in\nregards to using bits from nSequence). nSequence are 4 bytes intended for\nsequencing time-locked transactions, but this never got used.\nNow these bytes are being repurposed for a mixture of things. Currently the\nplan is: \" bits 0..15 are the relative locktime, bit 30 determines units\n(0: height, 1: time w/ 512s granularity), and bit 31 toggles BIP 68 (0: on,\n1: off). bits 16..29 are masked off and can take any value.\"\n\n- meeting conclusion\n\nClarification from maaku regarding nSequence for BIP68. (after the meeting\nhe explained he was waiting for opinions, but not enough people seemed to\nknow the issue at hand)\nContinue review of pull requests 6312 (\nhttps://github.com/bitcoin/bitcoin/pull/6312 ), 6564 (\nhttps://github.com/bitcoin/bitcoin/pull/6564 ) and 6566 (\nhttps://github.com/bitcoin/bitcoin/pull/6566 )\n\n\n**Creation of bitcoin discuss mailing list**\n\n- background\n\nThe bitcoin-dev mailing list is intented for technical discussions only.\nThere's things that don't belong there but need to be discussed anyway.\nNow this is done in bitcoin-dev, but the volume of this is getting too big.\n\nThere's recently also an influx of really inappropriate posts, level\nkindergarden (\nhttps://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg02539.html\n).\n\n\n- meeting comments\n\nNo clarity about who are the moderators.\nNext week there'll be a bitcoin-discuss list created.\nDecisions are needed as to who'll become the moderators for that and\nbitcoin-dev.\nDecisions are needed as to what will be the list and moderation policies.\n\n\n- meeting conclusion\n\nThe bitcoin-discuss list will be created as well as a simple website\nlisting all the lists and corresponding policies.\nA meeting is scheduled on monday to discuss the moderation and policies of\nsaid lists.\n\n\n**Participants**\n\nmorcos           Alex Morcos\ngmaxwell         Gregory Maxwell\nwumpus           Wladimir J. van der Laan\nsipa             Pieter Wuille\nBlueMatt         Matt Corallo\nbtcdrak          btcdrak\npetertodd        Peter Todd\nwarren           Warren Togami\nphantomcircuit   Patrick Strateman\ndstadulis        Daniel Stadulis\nGreenIsMyPepper  ?? Jospeh Poon ??\nbsm117532        Bob McElrath\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151010/445f83fe/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin dev meeting in layman's terms (2015-10-8)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "G1lius Caesar"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 9128
        }
    },
    {
        "title": "[bitcoin-dev] Masked bits and isStandard",
        "thread_messages": [
            {
                "author": "Dave Scotese",
                "date": "2015-10-10T21:41:24",
                "message_text_only": "Thanks again.  The description of bits 16..29 as \"can take any value\"\nsuggests to me an improvement for isStandard: if any bits \"can take any\nvalue\" without affecting the script then they must be off for the script to\npass isStandard.\n\nIf I understand it correctly, this requirement will serve as a backup to\nfuture uses of those bits if such uses are deployed as soft forks.\n\nI'm sorry if my suggestion reflects a poor understanding of isStandard, but\nI offer it as evidence on whether the mechanism is as well understood as it\nshould be, since we use soft forks.  If I have misunderstood, feel free to\neducate me with a reply.\n\nThanks!\nNotplato\n\n\n\nOn Oct 10, 2015, at 8:22 AM, G1lius Caesar via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n\nbits 16..29 are masked off and can take any value.\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151010/2aa9f86e/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Masked bits and isStandard",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dave Scotese"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1427
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.11.1 release candidate 2 available",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-12T16:59:37",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.11.1 release candidate 2 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.11.1/test>\n\nThis is a release candidate for a new minor version release, bringing security\nfixes.\n(release candidate 1 was never released as binaries)\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nPreliminary release notes for 0.11.1 follow:\n\nUpgrading and downgrading\n=========================\n\nHow to Upgrade\n- --------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nDowngrade warning\n- ------------------\n\nBecause release 0.10.0 and later makes use of headers-first synchronization and\nparallel block download (see further), the block files and databases are not\nbackwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support.\n\nIf you want to be able to downgrade smoothly, make a backup of your entire data\ndirectory. Without this your node will need start syncing (or importing from\nbootstrap.dat) anew afterwards. It is possible that the data from a completely\nsynchronised 0.10 node may be usable in older versions as-is, but this is not\nsupported and may break as soon as the older version attempts to reindex.\n\nThis does not affect wallet forward or backward compatibility. There are no\nknown problems when downgrading from 0.11.x to 0.10.x.\n\nNotable changes\n===============\n\nFix buffer overflow in bundled upnp\n- ------------------------------------\n\nBundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in\nthe XML parser during initial network discovery.\n\nDetails can be found here: http://talosintel.com/reports/TALOS-2015-0035/\n\nThis applies to the distributed executables only, not when building from source or\nusing distribution provided packages.\n\nAdditionally, upnp has been disabled by default. This may result in a lower\nnumber of reachable nodes on IPv4, however this prevents future libupnpc\nvulnerabilities from being a structural risk to the network\n(see https://github.com/bitcoin/bitcoin/pull/6795).\n\nTest for LowS signatures before relaying\n- -----------------------------------------\n\nMake the node require the canonical 'low-s' encoding for ECDSA signatures when\nrelaying or mining.  This removes a nuisance malleability vector.\n\nConsensus behavior is unchanged.\n\nIf widely deployed this change would eliminate the last remaining known vector\nfor nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side\nit will block most transactions made by sufficiently out of date software.\n\nUnlike the other avenues to change txids on transactions this\none was randomly violated by all deployed bitcoin software prior to\nits discovery. So, while other malleability vectors where made\nnon-standard as soon as they were discovered, this one has remained\npermitted. Even BIP62 did not propose applying this rule to\nold version transactions, but conforming implementations have become\nmuch more common since BIP62 was initially written.\n\nBitcoin Core has produced compatible signatures since a28fb70e in\nSeptember 2013, but this didn't make it into a release until 0.9\nin March 2014; Bitcoinj has done so for a similar span of time.\nBitcoinjs and electrum have been more recently updated.\n\nThis does not replace the need for BIP62 or similar, as miners can\nstill cooperate to break transactions.  Nor does it replace the\nneed for wallet software to handle malleability sanely[1]. This\nonly eliminates the cheap and irritating DOS attack.\n\n[1] On the Malleability of Bitcoin Transactions\nMarcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\nhttp://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf\n\nMinimum relay fee default increase\n- -----------------------------------\n\nThe default for the `-minrelaytxfee` setting has been increased from `0.00001`\nto `0.00005`.\n\nThis is necessitated by the current transaction flooding, causing\noutrageous memory usage on nodes due to the mempool ballooning. This is a\ntemporary measure, bridging the time until a dynamic method for determining\nthis fee is merged (which will be in 0.12).\n\n(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11\nrelease notes, in which this value was suggested)\n\n0.11.1 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect\nbehavior, not code moves, refactors and string updates. For convenience in locating\nthe code changes and accompanying discussion, both the pull request and\ngit merge commit are mentioned.\n\n- - #6438 `2531438` openssl: avoid config file load/race\n- - #6439 `980f820` Updated URL location of netinstall for Debian\n- - #6384 `8e5a969` qt: Force TLS1.0+ for SSL connections\n- - #6471 `92401c2` Depends: bump to qt 5.5\n- - #6224 `93b606a` Be even stricter in processing unrequested blocks\n- - #6571 `100ac4e` libbitcoinconsensus: avoid a crash in multi-threaded environments\n- - #6545 `649f5d9` Do not store more than 200 timedata samples.\n- - #6694 `834e299` [QT] fix thin space word wrap line break issue\n- - #6703 `1cd7952` Backport bugfixes to 0.11\n- - #6750 `5ed8d0b` Recent rejects backport to v0.11\n- - #6769 `71cc9d9` Test LowS in standardness, removes nuisance malleability vector.\n- - #6789 `b4ad73f` Update miniupnpc to 1.9.20151008\n- - #6785 `b4dc33e` Backport to v0.11: In (strCommand == \"tx\"), return if AlreadyHave()\n- - #6412 `0095b9a` Test whether created sockets are select()able\n- - #6795 `4dbcec0` net: Disable upnp by default\n- - #6793 `e7bcc4a` Bump minrelaytxfee default\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - Adam Weiss\n- - Alex Morcos\n- - Casey Rodarmor\n- - Cory Fields\n- - fanquake\n- - Gregory Maxwell\n- - Jonas Schnelli\n- - J Ross Nicoll\n- - Pavel Jan\u00edk\n- - Pavel Vasin\n- - Peter Todd\n- - Pieter Wuille\n- - randy-waterhouse\n- - Ross Nicoll\n- - Suhas Daftuar\n- - tailsjoin\n- - \u0e3ftcDrak\n- - Tom Harding\n- - Veres Lajos\n- - Wladimir J. van der Laan\n\nAnd those who contributed additional code review and/or security research:\n\n- - timothy on IRC for reporting the issue\n- - Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJWG+bQAAoJEHSBCwEjRsmmvKsH+wQ9mTICJoRL0nlZA/zBRis4\n7ys15YFJMd5+8OQvCBw9Rr/FP3FHapHwouTbInl7gd1bED9AYXKFOe/H+nD/w3vO\ntyvXbj/H4S6CNFYSlUSvLY28dTnoaSZF7GrIR/TtdQwcYsfXN/TJrZK03EMegMJX\n8p9ggTfnUgUnqqYjq1gGSQdJk0aydKe4h8/rcepPkagoertOGUWlEHhZkMbkLt/q\nvkZNjwjhf3SmvfwgXRJ37TjTdQB9sHYpZNPkKyI6XZ5J12it8DR8GSsPjPIkknOO\n51iTw0Besm0benekFHk3IAgdfCbLokfQnTPFWxQNTzE09T5zV97LLGq1t6TC//k=\n=1+qD\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-14T09:31:33",
                "message_text_only": "Bitcoin Core 0.11.1 and 0.10.3 final have been tagged, please start your gitian builds,\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.11.1 release candidate 2 available",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7442
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.10.3 release candidate 2 available",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-12T17:01:57",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.10.3 release candidate 2 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.10.3/test/>\n\n(release candidate 1 never had binaries available)\n\nThis is a release candidate for a new minor version release, bringing security\nfixes and translation updates.\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nPreliminary releae notes follow:\n\nUpgrading and downgrading\n=========================\n\nHow to Upgrade\n- --------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nDowngrade warning\n- ------------------\n\nBecause release 0.10.0 and later makes use of headers-first synchronization and\nparallel block download (see further), the block files and databases are not\nbackwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support.\n\nIf you want to be able to downgrade smoothly, make a backup of your entire data\ndirectory. Without this your node will need start syncing (or importing from\nbootstrap.dat) anew afterwards. It is possible that the data from a completely\nsynchronised 0.10 node may be usable in older versions as-is, but this is not\nsupported and may break as soon as the older version attempts to reindex.\n\nThis does not affect wallet forward or backward compatibility.\n\nNotable changes\n===============\n\nFix buffer overflow in bundled upnp\n- ------------------------------------\n\nBundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in\nthe XML parser during initial network discovery.\n\nDetails can be found here: http://talosintel.com/reports/TALOS-2015-0035/\n\nThis applies to the distributed executables only, not when building from source or\nusing distribution provided packages.\n\nAdditionally, upnp has been disabled by default. This may result in a lower\nnumber of reachable nodes on IPv4, however this prevents future libupnpc\nvulnerabilities from being a structural risk to the network\n(see https://github.com/bitcoin/bitcoin/pull/6795).\n\nTest for LowS signatures before relaying\n- -----------------------------------------\n\nMake the node require the canonical 'low-s' encoding for ECDSA signatures when\nrelaying or mining.  This removes a nuisance malleability vector.\n\nConsensus behavior is unchanged.\n\nIf widely deployed this change would eliminate the last remaining known vector\nfor nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side\nit will block most transactions made by sufficiently out of date software.\n\nUnlike the other avenues to change txids on transactions this\none was randomly violated by all deployed bitcoin software prior to\nits discovery. So, while other malleability vectors where made\nnon-standard as soon as they were discovered, this one has remained\npermitted. Even BIP62 did not propose applying this rule to\nold version transactions, but conforming implementations have become\nmuch more common since BIP62 was initially written.\n\nBitcoin Core has produced compatible signatures since a28fb70e in\nSeptember 2013, but this didn't make it into a release until 0.9\nin March 2014; Bitcoinj has done so for a similar span of time.\nBitcoinjs and electrum have been more recently updated.\n\nThis does not replace the need for BIP62 or similar, as miners can\nstill cooperate to break transactions.  Nor does it replace the\nneed for wallet software to handle malleability sanely[1]. This\nonly eliminates the cheap and irritating DOS attack.\n\n[1] On the Malleability of Bitcoin Transactions\nMarcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\nhttp://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf\n\nMinimum relay fee default increase\n- -----------------------------------\n\nThe default for the `-minrelaytxfee` setting has been increased from `0.00001`\nto `0.00005`.\n\nThis is necessitated by the current transaction flooding, causing\noutrageous memory usage on nodes due to the mempool ballooning. This is a\ntemporary measure, bridging the time until a dynamic method for determining\nthis fee is merged (which will be in 0.12).\n\n(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11.0\nrelease notes, in which this value was suggested)\n\n0.10.3 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect external\nbehavior, not code moves, refactors or string updates.\n\n- - #6186 `e4a7d51` Fix two problems in CSubnet parsing\n- - #6153 `ebd7d8d` Parameter interaction: disable upnp if -proxy set\n- - #6203 `ecc96f5` Remove P2SH coinbase flag, no longer interesting\n- - #6226 `181771b` json: fail read_string if string contains trailing garbage\n- - #6244 `09334e0` configure: Detect (and reject) LibreSSL\n- - #6276 `0fd8464` Fix getbalance * 0\n- - #6274 `be64204` Add option `-alerts` to opt out of alert system\n- - #6319 `3f55638` doc: update mailing list address\n- - #6438 `7e66e9c` openssl: avoid config file load/race\n- - #6439 `255eced` Updated URL location of netinstall for Debian\n- - #6412 `0739e6e` Test whether created sockets are select()able\n- - #6694 `f696ea1` [QT] fix thin space word wrap line brake issue\n- - #6704 `743cc9e` Backport bugfixes to 0.10\n- - #6769 `1cea6b0` Test LowS in standardness, removes nuisance malleability vector.\n- - #6789 `093d7b5` Update miniupnpc to 1.9.20151008\n- - #6795 `f2778e0` net: Disable upnp by default\n- - #6797 `91ef4d9` Do not store more than 200 timedata samples\n- - #6793 `842c48d` Bump minrelaytxfee default\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - Adam Weiss\n- - Alex Morcos\n- - Casey Rodarmor\n- - Cory Fields\n- - fanquake\n- - Gregory Maxwell\n- - Jonas Schnelli\n- - J Ross Nicoll\n- - Luke Dashjr\n- - Pavel Vasin\n- - Pieter Wuille\n- - randy-waterhouse\n- - \u0e3ftcDrak\n- - Tom Harding\n- - Veres Lajos\n- - Wladimir J. van der Laan\n\nAnd all those who contributed additional code review and/or security research:\n\n- - timothy on IRC for reporting the issue\n- - Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJWG+djAAoJEHSBCwEjRsmmYskH/3bvwLnbRYaeAX71/F/VgOqd\nN7Ly6ar00I4nbTpOloRd4xdf2TGaeRyu1Ty7lbK21weCxzsC3Uq7s40zDyBbfgZq\n3kDupt9naNVmfXlsCHyiFRqgQnbtJTX1UH7Y8rjjnqPuInNdo0S6ZGBZm04Iqccq\nqPfncyK95fd+9g1fow0TP+dIFHrEjD9NtEzsiH58RNtDlpadxNYCjbMjnDriS7wd\nk7uOkDx+jBG1X4TwMHEf32PkKssZYzDr4xLP4SkmDTYVqzf24bOiO9nXempxUUQp\nE9t1pRklZSZ5chBIRMJHhwci8cRVLmv4cAbXx1cUby4P7WJJC/8t8/fhWxgPddk=\n=ar+M\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.10.3 release candidate 2 available",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 7202
        }
    },
    {
        "title": "[bitcoin-dev] ALERT: Vulnerability in UPnP library used by Bitcoin Core",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-12T17:17:50",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\nTL;DR disable UPnP in Bitcoin Core as soon as possible, if you still have it enabled.\n\nUpgrading to 0.11.1rc2 or 0.10.3rc2 will also solve the issue, as they bundle a newer libupnpc (as well as disable upnp usage by default.) However these versions are still in the release candidate cycle, there is some risk in using test versions.\n\nSee https://bitcoin.org/en/alert/2015-10-12-upnp-vulnerability for details\n\nWladimir\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJWG+rxAAoJEHSBCwEjRsmmh14H/jWEqINoAdb9CNE5pOiFv9FG\nX51SCeZ/OCQXJ5qQGgcpMfP1w2fPFJwzrrJFIp9D8MUYXc9f6ZHo0A0Uc8LmPlrW\n46Wu/TgN0N5XpJ8yDzDk1GxU3fGhGEX897SOxrt8NEUcrJBC1kaLlG01ma2Mf+VJ\nwXsn++pgWO/9CCQzRIBNdJf1a8qnMsyRbryW7IsLNGiR4GRKzt9Hcp/p2vVxYFdD\nbjVAWsEFnRga0ho0Kpnp5RxFZxVkL03ls6yj9wqZtlMHVGuyVWiwFqMjOV30wBfv\nuENkWe/6veIU+Y3PmbuPJv79kRW2xTGZTl1RIKgJAdxVWPJy58a999AToIs/BWM=\n=XC8t\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "ALERT: Vulnerability in UPnP library used by Bitcoin Core",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 942
        }
    },
    {
        "title": "[bitcoin-dev] Initial getheaders request",
        "thread_messages": [
            {
                "author": "Daniel Kraft",
                "date": "2015-10-13T11:02:32",
                "message_text_only": "Hi!\n\nI've stumbled upon the code that does the initial \"getheaders\" request,\ni. e., around line 4960 of src/main.cpp [1].\n\n  [1] https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L4960\n\nFor some reason, it uses not pindexBestHeader but the *preceding* block\npindexBestHeader->pprev as the \"from argument\".  In contrast, the\nrequest on line 4132 [2] (which is done in response to a newly announced\nblock) *does* use pindexBestHeader.\n\n  [2] https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L4132\n\nI see no apparent reason for using the preceding call; but if I change\nit to pindexBestHeader on line 4960 as well, the wallet.py test seems to\nget stuck.  I've not been able to figure out from the logs and the code\nwhy this is the case; can anyone help me?  I think this is something\nthat should really be explained in a comment around line 4960.  If\nsomeone can make me understand, I can write a pull request for that -- I\nguess this will save others some time wondering like I do at the moment.\n\nYours,\nDaniel\n\n-- \nhttp://www.domob.eu/\nOpenPGP: 1142 850E 6DFF 65BA 63D6  88A8 B249 2AC4 A733 0737\nNamecoin: id/domob -> https://nameid.org/?name=domob\n--\nDone:  Arc-Bar-Cav-Hea-Kni-Ran-Rog-Sam-Tou-Val-Wiz\nTo go: Mon-Pri\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/45d18433/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "Initial getheaders request",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Daniel Kraft"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1528
        }
    },
    {
        "title": "[bitcoin-dev]  Liquid",
        "thread_messages": [
            {
                "author": "Benjamin",
                "date": "2015-10-13T14:25:41",
                "message_text_only": "Hello all,\n\nI was very surprised to learn that Blockstream will implement Sidechains\nfor exchanges [1], [2] and has been working on this privately. Can somebody\nexplain this \u201cannouncement\u201d? Just a few comments on this \u201cproposal\u201d.\n\n\u201cThis new construction establishes a security profile inherently superior\nto existing methods of rapid transfer and settlement, and is directly\napplicable to other problems within existing financial institutions.\u201d\n\nFirst of all, what does Bitcoin have to do with existing financial\ninstitutions? Secondly, what in do you mean by \u201crapid transfer\u201d and\n\"settlement\"? Bitcoin is anonymous, digital cash. There is no such thing as\nsettlement, there is only the transfer of digital cash and that's it\n(settlement is a bad word for this kind of transfer of property). If you\nmake up new terms define them accurately and don't play the\ncrypto-buzzword-bingo game.\n\n\u201cThis, in addition to increasing the security of funds normally subject to\nexplicit counterparty risk, fosters conditions that increase market\nliquidity and reduce capital requirements for on-blockchain business\nmodels.\u201d\n\nAgain \u2013 what does Bitcoin have to do with \u201cmarket liquidity\u201d and \u201ccapital\nrequirements\u201d?\n\n\u201cBlockstream's innovative solutions are definitely a game changer for the\nBitcoin industry.\u201d\n\nDoes Blockstream have commercial products now?\n\n\"These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin, and\nXapo, and discussions are underway with another dozen major institutional\ntraders and licensed exchanges. \"\n\n??? so many questions and no answers.\n\nRegards,\nBenjamin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/29ae869a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Liquid",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Benjamin"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1766
        }
    },
    {
        "title": "[bitcoin-dev] Liquid",
        "thread_messages": [
            {
                "author": "Benjamin",
                "date": "2015-10-13T14:27:18",
                "message_text_only": "p.s. the links\n\n[1] https://blockstream.com/2015/10/12/introducing-liquid/\n[2] www.coindesk.com/blockstream-commercial-sidechain-bitcoin-exchanges/\n\nOn Tue, Oct 13, 2015 at 4:25 PM, Benjamin <benjamin.l.cordes at gmail.com>\nwrote:\n\n> Hello all,\n>\n> I was very surprised to learn that Blockstream will implement Sidechains\n> for exchanges [1], [2] and has been working on this privately. Can somebody\n> explain this \u201cannouncement\u201d? Just a few comments on this \u201cproposal\u201d.\n>\n> \u201cThis new construction establishes a security profile inherently superior\n> to existing methods of rapid transfer and settlement, and is directly\n> applicable to other problems within existing financial institutions.\u201d\n>\n> First of all, what does Bitcoin have to do with existing financial\n> institutions? Secondly, what in do you mean by \u201crapid transfer\u201d and\n> \"settlement\"? Bitcoin is anonymous, digital cash. There is no such thing as\n> settlement, there is only the transfer of digital cash and that's it\n> (settlement is a bad word for this kind of transfer of property). If you\n> make up new terms define them accurately and don't play the\n> crypto-buzzword-bingo game.\n>\n> \u201cThis, in addition to increasing the security of funds normally subject to\n> explicit counterparty risk, fosters conditions that increase market\n> liquidity and reduce capital requirements for on-blockchain business\n> models.\u201d\n>\n> Again \u2013 what does Bitcoin have to do with \u201cmarket liquidity\u201d and \u201ccapital\n> requirements\u201d?\n>\n> \u201cBlockstream's innovative solutions are definitely a game changer for the\n> Bitcoin industry.\u201d\n>\n> Does Blockstream have commercial products now?\n>\n> \"These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin,\n> and Xapo, and discussions are underway with another dozen major\n> institutional traders and licensed exchanges. \"\n>\n> ??? so many questions and no answers.\n>\n> Regards,\n> Benjamin\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/a90a85cc/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-10-13T14:57:00",
                "message_text_only": "It is interesting someone trying the sidechain approach.\n\nI guess having trusted third parties to manage the chain was not a short\nterm thing?  It looks like there is no POW for the Liquid sidechain.\n\nThis is an area where the bitcoin could benefit by adding a way to transfer\nmoney to/from sidechain without requiring third parties.\n\nOn Tue, Oct 13, 2015 at 3:27 PM, Benjamin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> p.s. the links\n>\n> [1] https://blockstream.com/2015/10/12/introducing-liquid/\n> [2] www.coindesk.com/blockstream-commercial-sidechain-bitcoin-exchanges/\n>\n> On Tue, Oct 13, 2015 at 4:25 PM, Benjamin <benjamin.l.cordes at gmail.com>\n> wrote:\n>\n>> Hello all,\n>>\n>> I was very surprised to learn that Blockstream will implement Sidechains\n>> for exchanges [1], [2] and has been working on this privately. Can somebody\n>> explain this \u201cannouncement\u201d? Just a few comments on this \u201cproposal\u201d.\n>>\n>> \u201cThis new construction establishes a security profile inherently superior\n>> to existing methods of rapid transfer and settlement, and is directly\n>> applicable to other problems within existing financial institutions.\u201d\n>>\n>> First of all, what does Bitcoin have to do with existing financial\n>> institutions? Secondly, what in do you mean by \u201crapid transfer\u201d and\n>> \"settlement\"? Bitcoin is anonymous, digital cash. There is no such thing as\n>> settlement, there is only the transfer of digital cash and that's it\n>> (settlement is a bad word for this kind of transfer of property). If you\n>> make up new terms define them accurately and don't play the\n>> crypto-buzzword-bingo game.\n>>\n>> \u201cThis, in addition to increasing the security of funds normally subject\n>> to explicit counterparty risk, fosters conditions that increase market\n>> liquidity and reduce capital requirements for on-blockchain business\n>> models.\u201d\n>>\n>> Again \u2013 what does Bitcoin have to do with \u201cmarket liquidity\u201d and \u201ccapital\n>> requirements\u201d?\n>>\n>> \u201cBlockstream's innovative solutions are definitely a game changer for the\n>> Bitcoin industry.\u201d\n>>\n>> Does Blockstream have commercial products now?\n>>\n>> \"These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin,\n>> and Xapo, and discussions are underway with another dozen major\n>> institutional traders and licensed exchanges. \"\n>>\n>> ??? so many questions and no answers.\n>>\n>> Regards,\n>> Benjamin\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/1747728d/attachment.html>"
            },
            {
                "author": "Daniel Newton",
                "date": "2015-10-13T19:37:56",
                "message_text_only": ">Again \u2013 what does Bitcoin have to do with \u201cmarket liquidity\u201d and \u201ccapital\nrequirements\u201d?\n\nYou seem to be conflating bitcoin with blockstream/liquid. Your question\ndoes not make sense.\n\n>Does Blockstream have commercial products now?\n\nYes. I am sure that was always their plan in order to stay a viable\ncommercial entity\n\nOn Wed, Oct 14, 2015 at 3:25 AM, Benjamin via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hello all,\n>\n> I was very surprised to learn that Blockstream will implement Sidechains\n> for exchanges [1], [2] and has been working on this privately. Can somebody\n> explain this \u201cannouncement\u201d? Just a few comments on this \u201cproposal\u201d.\n>\n> \u201cThis new construction establishes a security profile inherently superior\n> to existing methods of rapid transfer and settlement, and is directly\n> applicable to other problems within existing financial institutions.\u201d\n>\n> First of all, what does Bitcoin have to do with existing financial\n> institutions? Secondly, what in do you mean by \u201crapid transfer\u201d and\n> \"settlement\"? Bitcoin is anonymous, digital cash. There is no such thing as\n> settlement, there is only the transfer of digital cash and that's it\n> (settlement is a bad word for this kind of transfer of property). If you\n> make up new terms define them accurately and don't play the\n> crypto-buzzword-bingo game.\n>\n> \u201cThis, in addition to increasing the security of funds normally subject to\n> explicit counterparty risk, fosters conditions that increase market\n> liquidity and reduce capital requirements for on-blockchain business\n> models.\u201d\n>\n> Again \u2013 what does Bitcoin have to do with \u201cmarket liquidity\u201d and \u201ccapital\n> requirements\u201d?\n>\n> \u201cBlockstream's innovative solutions are definitely a game changer for the\n> Bitcoin industry.\u201d\n>\n> Does Blockstream have commercial products now?\n>\n> \"These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin,\n> and Xapo, and discussions are underway with another dozen major\n> institutional traders and licensed exchanges. \"\n>\n> ??? so many questions and no answers.\n>\n> Regards,\n> Benjamin\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/a6367810/attachment-0001.html>"
            },
            {
                "author": "Adam Back",
                "date": "2015-10-13T20:52:39",
                "message_text_only": "Benjamin you may want to read this reddit thread on liquid:\n\nhttps://www.reddit.com/r/Bitcoin/comments/3ok69l/blockstream_to_launch_first_sidechain_for_bitcoin/\n\nand if you feel your questions are not answered, post them there?\n\n(This list is about bitcoin development so it's not really on topic for here).\n\nAdam\n\nOn 13 October 2015 at 21:37, Daniel Newton via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>Again \u2013 what does Bitcoin have to do with \u201cmarket liquidity\u201d and \u201ccapital\n>> requirements\u201d?\n>\n> You seem to be conflating bitcoin with blockstream/liquid. Your question\n> does not make sense.\n>\n>>Does Blockstream have commercial products now?\n>\n> Yes. I am sure that was always their plan in order to stay a viable\n> commercial entity\n>\n> On Wed, Oct 14, 2015 at 3:25 AM, Benjamin via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Hello all,\n>>\n>> I was very surprised to learn that Blockstream will implement Sidechains\n>> for exchanges [1], [2] and has been working on this privately. Can somebody\n>> explain this \u201cannouncement\u201d? Just a few comments on this \u201cproposal\u201d.\n>>\n>> \u201cThis new construction establishes a security profile inherently superior\n>> to existing methods of rapid transfer and settlement, and is directly\n>> applicable to other problems within existing financial institutions.\u201d\n>>\n>> First of all, what does Bitcoin have to do with existing financial\n>> institutions? Secondly, what in do you mean by \u201crapid transfer\u201d and\n>> \"settlement\"? Bitcoin is anonymous, digital cash. There is no such thing as\n>> settlement, there is only the transfer of digital cash and that's it\n>> (settlement is a bad word for this kind of transfer of property). If you\n>> make up new terms define them accurately and don't play the\n>> crypto-buzzword-bingo game.\n>>\n>> \u201cThis, in addition to increasing the security of funds normally subject to\n>> explicit counterparty risk, fosters conditions that increase market\n>> liquidity and reduce capital requirements for on-blockchain business\n>> models.\u201d\n>>\n>> Again \u2013 what does Bitcoin have to do with \u201cmarket liquidity\u201d and \u201ccapital\n>> requirements\u201d?\n>>\n>> \u201cBlockstream's innovative solutions are definitely a game changer for the\n>> Bitcoin industry.\u201d\n>>\n>> Does Blockstream have commercial products now?\n>>\n>> \"These initial launch partners include Bitfinex, BTCC, Kraken, Unocoin,\n>> and Xapo, and discussions are underway with another dozen major\n>> institutional traders and licensed exchanges. \"\n>>\n>> ??? so many questions and no answers.\n>>\n>> Regards,\n>> Benjamin\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            }
        ],
        "thread_summary": {
            "title": "Liquid",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Daniel Newton",
                "Benjamin",
                "Adam Back",
                "Tier Nolan"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 10243
        }
    },
    {
        "title": "[bitcoin-dev] Memory leaks?",
        "thread_messages": [
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-10-13T21:56:08",
                "message_text_only": "I just noticed that several of my running bitcoind processes were using around 3+ GB of RAM, even though the mempool itself seemed to be under control.\n\nXXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo\n{\n    \"size\" : 1896,\n    \"bytes\" : 37341328\n}\n\n[total memory usage not shown -- I restarted bitcoind as soon as I noticed, and didn't copy it down from top]\n\n37 MB mempool, >3 GB RAM usage. Normally, when there aren't a lot of unconfirmed txns floating around the network, memory usage is around 600 MB, so this is quite unusual.\n\nAfter restarting the process and letting it run for a few minutes, I get:\n\n  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command\n[###] [XXXX]     20   0 1402M  317M 49836 S  1.0  8.2  0:41.71 ./bitcoind -daemon\n\nXXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo\n{\n    \"size\" : 1072,\n    \"bytes\" : 670000\n}\n\n0.67 MB mempool, 317 MB RAM usage. Much more reasonable.\n\n\nHere's another node I'm running that has been online longer, before restarting:\n\n  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command\n[###] [XXXX]     20   0 4961M 3540M 11080 S  2.8 45.3  8h20:11 bin/bitcoind -daemon\n\nXXXX at feather:~$ bin/bitcoin-cli getmempoolinfo\n{\n    \"size\" : 3045,\n    \"bytes\" : 39656126\n}\n\n39 MB mempool, 3540 MB total memory usage. After restarting bitcoind, I see:\n\n[XXXX]@feather:~$ bin/bitcoin-cli stop\nBitcoin server stopping\n[XXXX]@feather:~$ bin/bitcoind -daemon\nBitcoin server starting\n[XXXX]@feather:~$ sleep 10; bin/bitcoin-cli getmempoolinfo\n{\n    \"size\" : 39,\n    \"bytes\" : 47037\n}\n\n\n  PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command\n[###] [XXXX]     20   0 1640M  247M 67960 S  0.0  3.2  0:05.17 bin/bitcoind -daemon\n\n\n\n\nDoes anybody have any guesses where we might be leaking memory, or what is using the additional 2.4 GB? I've been using minrelaytxfee=0.00003 or similar on my nodes. Maybe there's a leak in the minrelaytxfee code path? Has anyone else seen something similar?\n\nThis issue appears to happen both with Bitcoin Core 0.10.1 and with Bitcoin XT 0.11B.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/dc82ee16/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/dc82ee16/attachment.sig>"
            },
            {
                "author": "odinn",
                "date": "2015-10-13T22:49:37",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nYou should compare this to having set up a node on a completely clean\ncomputer.  It would also help to know what operating system(s) you are\nusing for both the oldie and the freshie.\n\nAlso, dump your XT, is poo.  Then try again, look at Core nodes on\nyour oldie and freshie.  Watch them for a bit.\n\nCheers,\n\nO\n\nJonathan Toomim (Toomim Bros) via bitcoin-dev:\n> I just noticed that several of my running bitcoind processes were\n> using around 3+ GB of RAM, even though the mempool itself seemed to\n> be under control.\n> \n> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo { \"size\" : 1896, \n> \"bytes\" : 37341328 }\n> \n> [total memory usage not shown -- I restarted bitcoind as soon as I\n> noticed, and didn't copy it down from top]\n> \n> 37 MB mempool, >3 GB RAM usage. Normally, when there aren't a lot\n> of unconfirmed txns floating around the network, memory usage is\n> around 600 MB, so this is quite unusual.\n> \n> After restarting the process and letting it run for a few minutes,\n> I get:\n> \n> PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+\n> Command [###] [XXXX]     20   0 1402M  317M 49836 S  1.0  8.2\n> 0:41.71 ./bitcoind -daemon\n> \n> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo { \"size\" : 1072, \n> \"bytes\" : 670000 }\n> \n> 0.67 MB mempool, 317 MB RAM usage. Much more reasonable.\n> \n> \n> Here's another node I'm running that has been online longer, before\n> restarting:\n> \n> PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+\n> Command [###] [XXXX]     20   0 4961M 3540M 11080 S  2.8 45.3\n> 8h20:11 bin/bitcoind -daemon\n> \n> XXXX at feather:~$ bin/bitcoin-cli getmempoolinfo { \"size\" : 3045, \n> \"bytes\" : 39656126 }\n> \n> 39 MB mempool, 3540 MB total memory usage. After restarting\n> bitcoind, I see:\n> \n> [XXXX]@feather:~$ bin/bitcoin-cli stop Bitcoin server stopping \n> [XXXX]@feather:~$ bin/bitcoind -daemon Bitcoin server starting \n> [XXXX]@feather:~$ sleep 10; bin/bitcoin-cli getmempoolinfo { \"size\"\n> : 39, \"bytes\" : 47037 }\n> \n> \n> PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+\n> Command [###] [XXXX]     20   0 1640M  247M 67960 S  0.0  3.2\n> 0:05.17 bin/bitcoind -daemon\n> \n> \n> \n> \n> Does anybody have any guesses where we might be leaking memory, or\n> what is using the additional 2.4 GB? I've been using\n> minrelaytxfee=0.00003 or similar on my nodes. Maybe there's a leak\n> in the minrelaytxfee code path? Has anyone else seen something\n> similar?\n> \n> This issue appears to happen both with Bitcoin Core 0.10.1 and with\n> Bitcoin XT 0.11B.\n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWHYqAAAoJEGxwq/inSG8Cp8YIAJa9xWA+rNY9ZOTWjOEZGc7Q\nIpXqpIyZprhEog6By/rQ7Te+xdUuaIZrMPESEoQIdMlDjRu7V2CWKGr1LbbDf2v9\nA6nMhE19tazDSMAcqHlcuWRfpex3C5QD93Oo7h0QvioNLc8cseNsYzqvOW40vIFL\nSPJOfor6IFLEi6/0t7OBhVyaXZdhI7XD1IDxeD67IOafCDwHgixFZWS4aCpz4axj\ni4B8DNsVgDdeYI2STBiqnL9Sopdnc1q2CwC1ENszR+sCXwIB9vdPOtIjhtWGk1gi\nf+/I8IUP/jn2xIjAGixjEePCIFLFV3kI+B6akH8+TsXB4G9C3zHEHTsfCrmLblg=\n=VMV3\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-10-13T23:14:46",
                "message_text_only": "On Oct 13, 2015, at 3:49 PM, odinn <odinn.cyberguerrilla at riseup.net> wrote:\n\n> Signed PGP part\n> It would also help to know what operating system(s) you are\n> using for both the oldie and the freshie.\n\nLinux feather 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u3 (2015-08-04) x86_64 GNU/Linux\nLinux server 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux\nLinux prime 3.2.0-4-amd64 #1 SMP Debian 3.2.63-2+deb7u2 x86_64 GNU/Linux\n\nThis excessive memory consumption was seen on 3 machines, all of which run Debian. All three machines run p2pool as well as bitcoind. Two run XT, one runs Core.\n\n> \n> You should compare this to having set up a node on a completely clean\n> computer.\n\n\nI can't afford to do that. All of the servers I have are being used for something. Also, I'm not sure what it is you're trying to test for with that suggestion. The numbers I'm reporting are for bitcoind's resident set, not for the whole server's memory usage. I don't see how other processes running on the same machine are relevant unless you are suggesting that RPC calls (e.g. getblocktemplate) might be somehow responsible.\n\n> \n> Also, dump your XT, is poo.\n\n\nNot relevant. I addressed this message to both the Core and XT lists because the issue appears to affect both forks. Let's keep blocksize and governance debates to their own threads, please.\n\nRepeating request: Has anyone else seen something similar? Can you report your mempool size and total bitcoind resident set size for your running full nodes?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/f11fac76/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/f11fac76/attachment-0001.sig>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-10-13T23:52:05",
                "message_text_only": "{\n\"size\" : 1085,\n\"bytes\" : 16151768\n}\n\nIt has been running about a day.  I'll report tomorrow too.  This is a\nWindows 8.1 box.\n\n16 million divided by 1085 transactions is almost 15Kb per transaction =\nunlikely, right?\n\nOn Tue, Oct 13, 2015 at 4:14 PM, Jonathan Toomim (Toomim Bros) <j at toom.im>\nwrote:\n\n>\n> On Oct 13, 2015, at 3:49 PM, odinn <odinn.cyberguerrilla at riseup.net>\n> wrote:\n>\n> Signed PGP part\n> It would also help to know what operating system(s) you are\n> using for both the oldie and the freshie.\n>\n>\n> Linux feather 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u3\n> (2015-08-04) x86_64 GNU/Linux\n> Linux server 3.2.0-4-amd64 #1 SMP Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux\n> Linux prime 3.2.0-4-amd64 #1 SMP Debian 3.2.63-2+deb7u2 x86_64 GNU/Linux\n>\n> This excessive memory consumption was seen on 3 machines, all of which run\n> Debian. All three machines run p2pool as well as bitcoind. Two run XT, one\n> runs Core.\n>\n> You should compare this to having set up a node on a completely clean\n> computer.\n>\n>\n> I can't afford to do that. All of the servers I have are being used for\n> something. Also, I'm not sure what it is you're trying to test for with\n> that suggestion. The numbers I'm reporting are for bitcoind's resident set,\n> not for the whole server's memory usage. I don't see how other processes\n> running on the same machine are relevant unless you are suggesting that RPC\n> calls (e.g. getblocktemplate) might be somehow responsible.\n>\n> Also, dump your XT, is poo.\n>\n>\n> Not relevant. I addressed this message to both the Core and XT lists\n> because the issue appears to affect both forks. Let's keep blocksize and\n> governance debates to their own threads, please.\n>\n> Repeating request: Has anyone else seen something similar? Can you report\n> your mempool size and total bitcoind resident set size for your running\n> full nodes?\n>\n> --\n> You received this message because you are subscribed to the Google Groups\n> \"bitcoin-xt\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to bitcoin-xt+unsubscribe at googlegroups.com.\n> For more options, visit https://groups.google.com/d/optout.\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/696b36c5/attachment.html>"
            },
            {
                "author": "Jonathan Toomim (Toomim Bros)",
                "date": "2015-10-14T00:08:56",
                "message_text_only": "> 16 million divided by 1085 transactions is almost 15Kb per transaction = unlikely, right?\n\n\nThe recent spam was about 15 kB per transaction, so that part sounds right.\n\nThe anomalous thing that I saw was that the total bitcoind process usage was about 50-100x higher than I would have expected if the mempool was the main determinant of memory usage scaling. Can you tell me how much memory Task Manager is reporting your bitcoin process as using both today and tomorrow?\n\nOn Oct 13, 2015, at 4:52 PM, Dave Scotese via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> \n> \n> {\n> \"size\" : 1085,\n> \"bytes\" : 16151768\n> }\n> It has been running about a day.  I'll report tomorrow too.  This is a Windows 8.1 box.\n> 16 million divided by 1085 transactions is almost 15Kb per transaction = unlikely, right?\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/b314b4b7/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/b314b4b7/attachment.sig>"
            },
            {
                "author": "Dave Scotese",
                "date": "2015-10-14T00:25:29",
                "message_text_only": "It was about 360MB (30 minutes ago?), but is now about 460MB.  I'm sure it\nwon't keep going up that fast.\n{\n\"size\" : 3413,\n\"bytes\" : 41892350\n}\n\n\nOn Tue, Oct 13, 2015 at 5:08 PM, Jonathan Toomim (Toomim Bros) <j at toom.im>\nwrote:\n\n> 16 million divided by 1085 transactions is almost 15Kb per transaction =\n> unlikely, right?\n>\n>\n> The recent spam was about 15 kB per transaction, so that part sounds right.\n>\n> The anomalous thing that I saw was that the total bitcoind process usage\n> was about 50-100x higher than I would have expected if the mempool was the\n> main determinant of memory usage scaling. Can you tell me how much memory\n> Task Manager is reporting your bitcoin process as using both today and\n> tomorrow?\n>\n> On Oct 13, 2015, at 4:52 PM, Dave Scotese via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>\n> {\n> \"size\" : 1085,\n> \"bytes\" : 16151768\n> }\n> It has been running about a day.  I'll report tomorrow too.  This is a\n> Windows 8.1 box.\n> 16 million divided by 1085 transactions is almost 15Kb per transaction =\n> unlikely, right?\n>\n>\n> --\n> You received this message because you are subscribed to the Google Groups\n> \"bitcoin-xt\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to bitcoin-xt+unsubscribe at googlegroups.com.\n> For more options, visit https://groups.google.com/d/optout.\n>\n\n\n\n-- \nI like to provide some work at no charge to prove my value. Do you need a\ntechie?\nI own Litmocracy <http://www.litmocracy.com> and Meme Racing\n<http://www.memeracing.net> (in alpha).\nI'm the webmaster for The Voluntaryist <http://www.voluntaryist.com> which\nnow accepts Bitcoin.\nI also code for The Dollar Vigilante <http://dollarvigilante.com/>.\n\"He ought to find it more profitable to play by the rules\" - Satoshi\nNakamoto\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151013/65f7f6f1/attachment-0001.html>"
            },
            {
                "author": "odinn",
                "date": "2015-10-13T23:59:21",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nYou wanted advice... you got it\n\nJonathan Toomim (Toomim Bros):\n> \n> On Oct 13, 2015, at 3:49 PM, odinn\n> <odinn.cyberguerrilla at riseup.net> wrote:\n> \n>> Signed PGP part It would also help to know what operating\n>> system(s) you are using for both the oldie and the freshie.\n> \n> Linux feather 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u3\n> (2015-08-04) x86_64 GNU/Linux Linux server 3.2.0-4-amd64 #1 SMP\n> Debian 3.2.60-1+deb7u3 x86_64 GNU/Linux Linux prime 3.2.0-4-amd64\n> #1 SMP Debian 3.2.63-2+deb7u2 x86_64 GNU/Linux\n> \n> This excessive memory consumption was seen on 3 machines, all of\n> which run Debian. All three machines run p2pool as well as\n> bitcoind. Two run XT, one runs Core.\n> \n>> \n>> You should compare this to having set up a node on a completely\n>> clean computer.\n> \n> \n> I can't afford to do that. All of the servers I have are being used\n> for something. Also, I'm not sure what it is you're trying to test\n> for with that suggestion. The numbers I'm reporting are for\n> bitcoind's resident set, not for the whole server's memory usage. I\n> don't see how other processes running on the same machine are\n> relevant unless you are suggesting that RPC calls (e.g.\n> getblocktemplate) might be somehow responsible.\n> \n>> \n>> Also, dump your XT, is poo.\n> \n> \n> Not relevant. I addressed this message to both the Core and XT\n> lists because the issue appears to affect both forks. Let's keep\n> blocksize and governance debates to their own threads, please.\n> \n> Repeating request: Has anyone else seen something similar? Can you\n> report your mempool size and total bitcoind resident set size for\n> your running full nodes?\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWHZrZAAoJEGxwq/inSG8CZzQIAKsqKs//Wydv60nXgy5AWAPU\nqZ9HuyyWXDKljxzv/Ky5jS7o7B8Ivhnt6zWvkpMTF/R9MLpGrS9jBxXZjHF//ET0\nL+eoVrmxwt+rgSjIPSGU/ftF8Jnh1sELecR8FMuCaFR87xraR/7FsJF/233RLWFg\n+scNiFEgttyizFNgSq2r1/N3G5e603qXfh0+reaabDX3E+8+PKyUqVaG5E+TUEW0\nNIkqi7MuEYd+/Q0SGAYyY/j2BQnebsTB2TbupE/soJkAYqYbCQR8TtrctmwLXTL0\nGN+WyWwLYpMio3+7a6oQJ67TBcFxCVmF81zxKM1VIoT0u39VVWeYD1YfxEYFN9Y=\n=a6kH\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Pavel Jan\u00edk",
                "date": "2015-10-14T07:22:41",
                "message_text_only": "> I just noticed that several of my running bitcoind processes were using around 3+ GB of RAM, even though the mempool itself seemed to be under control.\n> \n> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo\n> {\n>     \"size\" : 1896,\n>     \"bytes\" : 37341328\n> }\n> \n> [total memory usage not shown -- I restarted bitcoind as soon as I noticed, and didn't copy it down from top]\n\nThe newer versions contain much more accurate reporting of memorypool usage that reflect the real memory usage:\n\n{\n  \"size\": 58536,\n  \"bytes\": 770044257,\n  \"usage\": 1652554832\n}\n\nSee PR #6410 (Implement accurate memory accounting for mempool).\n--  \nPavel Jan\u00edk"
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-14T07:58:48",
                "message_text_only": "On Tuesday 13 Oct 2015 14:56:08 Jonathan Toomim  via bitcoin-dev wrote:\n> Does anybody have any guesses where we might be leaking memory, or what is\n> using the additional 2.4 GB? I've been using minrelaytxfee=0.00003 or\n> similar on my nodes. Maybe there's a leak in the minrelaytxfee code path?\n> Has anyone else seen something similar?\n\nI suggest running it in valgrind with --leak-check=full for 10 minutes.\n\n  valgrind --leak-check=full src/bitcoind 2>&1 | tee out\n\nThis at least will show you any memory leaks at exit.\nNaturally, the leaks you observe may just be design issues where cache can \ngrow to much and when the cache is cleaned on shutdown you won't see it in the \nvalgrind output."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-14T09:09:40",
                "message_text_only": "Leaks are not the only explanation possible. Caches and fragmentation can\nalso give this sort of effect. Unfortunately the tools to debug this aren't\ngreat. You could try a build with tcmalloc and use it to investigate heap\nstats.\n\nOdinn, trolling like a 3 year old will get you swiftly banned. Last warning.\nOn 14 Oct 2015 9:58 am, \"Tom Zander\" <tomz at freedommail.ch> wrote:\n\n> On Tuesday 13 Oct 2015 14:56:08 Jonathan Toomim  via bitcoin-dev wrote:\n> > Does anybody have any guesses where we might be leaking memory, or what\n> is\n> > using the additional 2.4 GB? I've been using minrelaytxfee=0.00003 or\n> > similar on my nodes. Maybe there's a leak in the minrelaytxfee code path?\n> > Has anyone else seen something similar?\n>\n> I suggest running it in valgrind with --leak-check=full for 10 minutes.\n>\n>   valgrind --leak-check=full src/bitcoind 2>&1 | tee out\n>\n> This at least will show you any memory leaks at exit.\n> Naturally, the leaks you observe may just be design issues where cache can\n> grow to much and when the cache is cleaned on shutdown you won't see it in\n> the\n> valgrind output.\n>\n> --\n> You received this message because you are subscribed to the Google Groups\n> \"bitcoin-xt\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to bitcoin-xt+unsubscribe at googlegroups.com.\n> For more options, visit https://groups.google.com/d/optout.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/57de61ea/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-10-14T15:19:33",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nFor the record, Mr. Hearn, you do not own this list.  I submit to you\nthat you have very little to say on this matter at this stage and your\nidle threats to \"ban people\" based on their preferences, suggestions,\nor characterizations of your chosen software project are at best very\nsilly.\n\nI am not and never was on bitcoin-xt at googlegroups.com and thus have\nclipped that from the reply-to.\n\nMike Hearn via bitcoin-dev:\n> Leaks are not the only explanation possible. Caches and\n> fragmentation can also give this sort of effect. Unfortunately the\n> tools to debug this aren't great. You could try a build with\n> tcmalloc and use it to investigate heap stats.\n> \n> Odinn, trolling like a 3 year old will get you swiftly banned. Last\n> warning. On 14 Oct 2015 9:58 am, \"Tom Zander\" <tomz at freedommail.ch>\n> wrote:\n> \n>> On Tuesday 13 Oct 2015 14:56:08 Jonathan Toomim  via bitcoin-dev\n>> wrote:\n>>> Does anybody have any guesses where we might be leaking memory,\n>>> or what\n>> is\n>>> using the additional 2.4 GB? I've been using\n>>> minrelaytxfee=0.00003 or similar on my nodes. Maybe there's a\n>>> leak in the minrelaytxfee code path? Has anyone else seen\n>>> something similar?\n>> \n>> I suggest running it in valgrind with --leak-check=full for 10\n>> minutes.\n>> \n>> valgrind --leak-check=full src/bitcoind 2>&1 | tee out\n>> \n>> This at least will show you any memory leaks at exit. Naturally,\n>> the leaks you observe may just be design issues where cache can \n>> grow to much and when the cache is cleaned on shutdown you won't\n>> see it in the valgrind output.\n>> \n>> -- You received this message because you are subscribed to the\n>> Google Groups \"bitcoin-xt\" group. To unsubscribe from this group\n>> and stop receiving emails from it, send an email to\n>> bitcoin-xt+unsubscribe at googlegroups.com. For more options, visit\n>> https://groups.google.com/d/optout.\n>> \n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWHnKFAAoJEGxwq/inSG8CoN8H/i4m748xSMkXLgsOO2nqghXr\nK3EI98BucU5XF4M/0qW0EjN1PHdkl+EjtUt0POT3mG3hl66PaoA04nMgDrND7V+w\nsEXICchAVNx5+AleT65U60iibASZZIlZaXmOtdtCgz7GulmMfsfnNV2IRRvsSO1A\nNl0PuEqPW1/rsJDA58tDb8y2ltMEo5Zi2AYDMvD/AfSuNBqdHM/2IrWSPUwDB7NN\nTLq5WXyW5mv7qywIu3/8jk0za6RN4gc1DmpIJHjm4bO+4FoF0oytcaOg5X8uOC1B\npOxhvEM2fTjziXaBJVha/6lrGxfi8/mdLBE68hjB3Q6/KDF9VrugdG0JK0iuDW8=\n=YqPh\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-14T09:39:14",
                "message_text_only": "On Tue, Oct 13, 2015 at 02:56:08PM -0700, Jonathan Toomim (Toomim Bros) via bitcoin-dev wrote:\n> I just noticed that several of my running bitcoind processes were using around 3+ GB of RAM, even though the mempool itself seemed to be under control.\n> \n> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo\n> {\n>     \"size\" : 1896,\n>     \"bytes\" : 37341328\n> }\n> \n> [total memory usage not shown -- I restarted bitcoind as soon as I noticed, and didn't copy it down from top]\n\nThis is *most likely* the mempool, but is just not reported correctly.\n\nIn the meantime you can mitigate the mempool growth by setting `-mintxfee`, see\nhttps://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding\n\nThis will be the default in 0.11.1 and 0.10.3. 0.12.0 will have better mempool management, as well as more precise reporting (as paveljanik already mentions.)\n\nWladimir"
            },
            {
                "author": "Jonathan Toomim",
                "date": "2015-10-18T15:59:11",
                "message_text_only": "On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com> wrote:\n> This is *most likely* the mempool, but is just not reported correctly.\n\nI did some testing with PR #6410's better mempool reporting. The improved reporting suggests that actual in-memory usage (\"usage\":) by CTxMemPool is about 2.5x to 3x higher than the serialized transaction sizes (\"bytes\":). The excess memory usage that I'm seeing is on the order of 100x higher than the mempool \"bytes\": value. As such, I think it's unlikely that this is the mempool, or at least not normal/correct mempool behavior.\n\nAnother user (admin at multipool.us) reported 35 GB of RSS usage. I'm guessing his bitcoind has been running longer than any of mine. His server definitely has more RAM. I don't know which email list he is subscribed to (probably XT), so I'm sharing it with both lists to make sure you're all aware of how big an issue this can be.\n\n> In the meantime you can mitigate the mempool growth by setting `-mintxfee`, see\n> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding\n\nI have mintxfee and minrelaytxfee set to about 0.00003, which is high enough to exclude essentially all of the of the 14700-14800 byte flood transactions. My nodes' mempools only contain about one or two blocks' worth of transactions. So I don't think this is correct either.\n\n\n\nSome additional notes on this issue:\n\n1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a Core bitcoind process (commit d78a880) overnight with no mining connected to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around 400 MB of RSS and the mempool was at around \"bytes\":10MB, \"usage\": 25MB. I ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes, and RSS climbed to 1180 MB. An hour after that with more getblocktemplates, and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.] getmempoolinfo is still showing \"usage\" around 25MB or less.\n\nI'll do some more testing with this and see if I can make it repeatable, and record the results more carefully. Expect a follow-up from me in a day or two.\n\n2. valgrind did not show anything super promising. It did report this:\n\n==6880== LEAK SUMMARY:\n==6880==    definitely lost: 0 bytes in 0 blocks\n==6880==    indirectly lost: 0 bytes in 0 blocks\n==6880==      possibly lost: 288 bytes in 1 blocks\n==6880==    still reachable: 10,552 bytes in 39 blocks\n==6880==         suppressed: 0 bytes in 0 blocks\n(Bitcoin Core commit d78a880)\n\nand this:\n==6778== LEAK SUMMARY:\n==6778==    definitely lost: 0 bytes in 0 blocks\n==6778==    indirectly lost: 0 bytes in 0 blocks\n==6778==      possibly lost: 320 bytes in 1 blocks\n==6778==    still reachable: 10,080 bytes in 32 blocks\n==6778==         suppressed: 0 bytes in 0 blocks\n(Bitcoin XT commit fe446d)\n\nI haven't found anything in there yet that I think would produce the multi-GB memory usage after running for a few days, but I could be missing it. Email me if you want the full log.\n\nI did not try running getblocktemplate while valgrind was running. I'll have to try that. I also have not let valgrind run for more than an hour.\n\n\n\nP.S.: Sorry for all the cross-post confusion and consequent flamewar fallout. While it's probably too late for this thread, I'll make sure to post in a manner that keeps the threads clearly separate in the future (e.g. different subject lines).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151018/b7685007/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151018/b7685007/attachment.sig>"
            },
            {
                "author": "Multipool Admin",
                "date": "2015-10-19T19:17:14",
                "message_text_only": "My nodes are continuously running getblocktemplate and getinfo, and I also\nsuspected the issue is in either gbt or the rpc server.\n\nThe instance only takes a few hours to get up to that memory usage.\nOn Oct 18, 2015 8:59 AM, \"Jonathan Toomim via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com>\n> wrote:\n>\n> This is *most likely* the mempool, but is just not reported correctly.\n>\n>\n> I did some testing with PR #6410's better mempool reporting. The improved\n> reporting suggests that actual in-memory usage (\"usage\":) by CTxMemPool is\n> about 2.5x to 3x higher than the serialized transaction sizes (\"bytes\":).\n> The excess memory usage that I'm seeing is on the order of 100x higher than\n> the mempool \"bytes\": value. As such, I think it's unlikely that this is the\n> mempool, or at least not normal/correct mempool behavior.\n>\n> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm\n> guessing his bitcoind has been running longer than any of mine. His server\n> definitely has more RAM. I don't know which email list he is subscribed to\n> (probably XT), so I'm sharing it with both lists to make sure you're all\n> aware of how big an issue this can be.\n>\n> In the meantime you can mitigate the mempool growth by setting\n> `-mintxfee`, see\n>\n> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding\n>\n>\n> I have mintxfee and minrelaytxfee set to about 0.00003, which is high\n> enough to exclude essentially all of the of the 14700-14800 byte flood\n> transactions. My nodes' mempools only contain about one or two blocks'\n> worth of transactions. So I don't think this is correct either.\n>\n>\n>\n> Some additional notes on this issue:\n>\n> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a\n> Core bitcoind process (commit d78a880) overnight with no mining connected\n> to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around\n> 400 MB of RSS and the mempool was at around \"bytes\":10MB, \"usage\": 25MB. I\n> ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around\n> 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes,\n> and RSS climbed to 1180 MB. An hour after that with more getblocktemplates,\n> and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.]\n> getmempoolinfo is still showing \"usage\" around 25MB or less.\n>\n> I'll do some more testing with this and see if I can make it repeatable,\n> and record the results more carefully. Expect a follow-up from me in a day\n> or two.\n>\n> 2. valgrind did not show anything super promising. It did report this:\n>\n> ==6880== LEAK SUMMARY:\n> ==6880==    definitely lost: 0 bytes in 0 blocks\n> ==6880==    indirectly lost: 0 bytes in 0 blocks\n> ==6880==      possibly lost: 288 bytes in 1 blocks\n> ==6880==    still reachable: 10,552 bytes in 39 blocks\n> ==6880==         suppressed: 0 bytes in 0 blocks\n> (Bitcoin Core commit d78a880)\n>\n> and this:\n> ==6778== LEAK SUMMARY:\n> ==6778==    definitely lost: 0 bytes in 0 blocks\n> ==6778==    indirectly lost: 0 bytes in 0 blocks\n> ==6778==      possibly lost: 320 bytes in 1 blocks\n> ==6778==    still reachable: 10,080 bytes in 32 blocks\n> ==6778==         suppressed: 0 bytes in 0 blocks\n> (Bitcoin XT commit fe446d)\n>\n> I haven't found anything in there yet that I think would produce the\n> multi-GB memory usage after running for a few days, but I could be missing\n> it. Email me if you want the full log.\n>\n> I did not try running getblocktemplate while valgrind was running. I'll\n> have to try that. I also have not let valgrind run for more than an hour.\n>\n>\n>\n> P.S.: Sorry for all the cross-post confusion and consequent flamewar\n> fallout. While it's probably too late for this thread, I'll make sure to\n> post in a manner that keeps the threads clearly separate in the future\n> (e.g. different subject lines).\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/e7eae196/attachment.html>"
            },
            {
                "author": "Multipool Admin",
                "date": "2015-10-19T22:24:11",
                "message_text_only": "I should also mention that this is definitely not an attack coming from\nconnected nodes.  My node experiencing the issue is only connected to 3\nother nodes, all of which I control (via connect=).\n\n--Adam\n\nOn Mon, Oct 19, 2015 at 12:17 PM, Multipool Admin <admin at multipool.us>\nwrote:\n\n> My nodes are continuously running getblocktemplate and getinfo, and I also\n> suspected the issue is in either gbt or the rpc server.\n>\n> The instance only takes a few hours to get up to that memory usage.\n> On Oct 18, 2015 8:59 AM, \"Jonathan Toomim via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com>\n>> wrote:\n>>\n>> This is *most likely* the mempool, but is just not reported correctly.\n>>\n>>\n>> I did some testing with PR #6410's better mempool reporting. The improved\n>> reporting suggests that actual in-memory usage (\"usage\":) by CTxMemPool is\n>> about 2.5x to 3x higher than the serialized transaction sizes (\"bytes\":).\n>> The excess memory usage that I'm seeing is on the order of 100x higher than\n>> the mempool \"bytes\": value. As such, I think it's unlikely that this is the\n>> mempool, or at least not normal/correct mempool behavior.\n>>\n>> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm\n>> guessing his bitcoind has been running longer than any of mine. His server\n>> definitely has more RAM. I don't know which email list he is subscribed to\n>> (probably XT), so I'm sharing it with both lists to make sure you're all\n>> aware of how big an issue this can be.\n>>\n>> In the meantime you can mitigate the mempool growth by setting\n>> `-mintxfee`, see\n>>\n>> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding\n>>\n>>\n>> I have mintxfee and minrelaytxfee set to about 0.00003, which is high\n>> enough to exclude essentially all of the of the 14700-14800 byte flood\n>> transactions. My nodes' mempools only contain about one or two blocks'\n>> worth of transactions. So I don't think this is correct either.\n>>\n>>\n>>\n>> Some additional notes on this issue:\n>>\n>> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a\n>> Core bitcoind process (commit d78a880) overnight with no mining connected\n>> to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around\n>> 400 MB of RSS and the mempool was at around \"bytes\":10MB, \"usage\": 25MB. I\n>> ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around\n>> 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes,\n>> and RSS climbed to 1180 MB. An hour after that with more getblocktemplates,\n>> and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.]\n>> getmempoolinfo is still showing \"usage\" around 25MB or less.\n>>\n>> I'll do some more testing with this and see if I can make it repeatable,\n>> and record the results more carefully. Expect a follow-up from me in a day\n>> or two.\n>>\n>> 2. valgrind did not show anything super promising. It did report this:\n>>\n>> ==6880== LEAK SUMMARY:\n>> ==6880==    definitely lost: 0 bytes in 0 blocks\n>> ==6880==    indirectly lost: 0 bytes in 0 blocks\n>> ==6880==      possibly lost: 288 bytes in 1 blocks\n>> ==6880==    still reachable: 10,552 bytes in 39 blocks\n>> ==6880==         suppressed: 0 bytes in 0 blocks\n>> (Bitcoin Core commit d78a880)\n>>\n>> and this:\n>> ==6778== LEAK SUMMARY:\n>> ==6778==    definitely lost: 0 bytes in 0 blocks\n>> ==6778==    indirectly lost: 0 bytes in 0 blocks\n>> ==6778==      possibly lost: 320 bytes in 1 blocks\n>> ==6778==    still reachable: 10,080 bytes in 32 blocks\n>> ==6778==         suppressed: 0 bytes in 0 blocks\n>> (Bitcoin XT commit fe446d)\n>>\n>> I haven't found anything in there yet that I think would produce the\n>> multi-GB memory usage after running for a few days, but I could be missing\n>> it. Email me if you want the full log.\n>>\n>> I did not try running getblocktemplate while valgrind was running. I'll\n>> have to try that. I also have not let valgrind run for more than an hour.\n>>\n>>\n>>\n>> P.S.: Sorry for all the cross-post confusion and consequent flamewar\n>> fallout. While it's probably too late for this thread, I'll make sure to\n>> post in a manner that keeps the threads clearly separate in the future\n>> (e.g. different subject lines).\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/aaf129a5/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-20T10:12:12",
                "message_text_only": "OK, then running under Valgrind whilst sending gbt RPCs would be the next\nstep.\n\nOn Mon, Oct 19, 2015 at 9:17 PM, Multipool Admin <admin at multipool.us> wrote:\n\n> My nodes are continuously running getblocktemplate and getinfo, and I also\n> suspected the issue is in either gbt or the rpc server.\n>\n> The instance only takes a few hours to get up to that memory usage.\n> On Oct 18, 2015 8:59 AM, \"Jonathan Toomim via bitcoin-dev\" <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com>\n>> wrote:\n>>\n>> This is *most likely* the mempool, but is just not reported correctly.\n>>\n>>\n>> I did some testing with PR #6410's better mempool reporting. The improved\n>> reporting suggests that actual in-memory usage (\"usage\":) by CTxMemPool is\n>> about 2.5x to 3x higher than the serialized transaction sizes (\"bytes\":).\n>> The excess memory usage that I'm seeing is on the order of 100x higher than\n>> the mempool \"bytes\": value. As such, I think it's unlikely that this is the\n>> mempool, or at least not normal/correct mempool behavior.\n>>\n>> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm\n>> guessing his bitcoind has been running longer than any of mine. His server\n>> definitely has more RAM. I don't know which email list he is subscribed to\n>> (probably XT), so I'm sharing it with both lists to make sure you're all\n>> aware of how big an issue this can be.\n>>\n>> In the meantime you can mitigate the mempool growth by setting\n>> `-mintxfee`, see\n>>\n>> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding\n>>\n>>\n>> I have mintxfee and minrelaytxfee set to about 0.00003, which is high\n>> enough to exclude essentially all of the of the 14700-14800 byte flood\n>> transactions. My nodes' mempools only contain about one or two blocks'\n>> worth of transactions. So I don't think this is correct either.\n>>\n>>\n>>\n>> Some additional notes on this issue:\n>>\n>> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a\n>> Core bitcoind process (commit d78a880) overnight with no mining connected\n>> to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around\n>> 400 MB of RSS and the mempool was at around \"bytes\":10MB, \"usage\": 25MB. I\n>> ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around\n>> 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes,\n>> and RSS climbed to 1180 MB. An hour after that with more getblocktemplates,\n>> and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.]\n>> getmempoolinfo is still showing \"usage\" around 25MB or less.\n>>\n>> I'll do some more testing with this and see if I can make it repeatable,\n>> and record the results more carefully. Expect a follow-up from me in a day\n>> or two.\n>>\n>> 2. valgrind did not show anything super promising. It did report this:\n>>\n>> ==6880== LEAK SUMMARY:\n>> ==6880==    definitely lost: 0 bytes in 0 blocks\n>> ==6880==    indirectly lost: 0 bytes in 0 blocks\n>> ==6880==      possibly lost: 288 bytes in 1 blocks\n>> ==6880==    still reachable: 10,552 bytes in 39 blocks\n>> ==6880==         suppressed: 0 bytes in 0 blocks\n>> (Bitcoin Core commit d78a880)\n>>\n>> and this:\n>> ==6778== LEAK SUMMARY:\n>> ==6778==    definitely lost: 0 bytes in 0 blocks\n>> ==6778==    indirectly lost: 0 bytes in 0 blocks\n>> ==6778==      possibly lost: 320 bytes in 1 blocks\n>> ==6778==    still reachable: 10,080 bytes in 32 blocks\n>> ==6778==         suppressed: 0 bytes in 0 blocks\n>> (Bitcoin XT commit fe446d)\n>>\n>> I haven't found anything in there yet that I think would produce the\n>> multi-GB memory usage after running for a few days, but I could be missing\n>> it. Email me if you want the full log.\n>>\n>> I did not try running getblocktemplate while valgrind was running. I'll\n>> have to try that. I also have not let valgrind run for more than an hour.\n>>\n>>\n>>\n>> P.S.: Sorry for all the cross-post confusion and consequent flamewar\n>> fallout. While it's probably too late for this thread, I'll make sure to\n>> post in a manner that keeps the threads clearly separate in the future\n>> (e.g. different subject lines).\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>> --\n> You received this message because you are subscribed to the Google Groups\n> \"bitcoin-xt\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to bitcoin-xt+unsubscribe at googlegroups.com.\n> For more options, visit https://groups.google.com/d/optout.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/c71ef434/attachment-0001.html>"
            },
            {
                "author": "Jonathan Toomim",
                "date": "2015-10-20T12:39:01",
                "message_text_only": "I did that Sunday twice. I'll report the results soon. Short version is that it looks like valgrind is just finding 200 kB to 600 kB of pblocktemplate, which is declared as a static pointer. Not exactly the multi-GB leak I'm looking for, but possibly related.\n\nI've also got two bitcoind processes running on the same machine that I started at the same time, running on different ports, all with the same settings, but one of which is serving getblocktemplate every 5-6 seconds and the other is not, while logging RSS on both every 6 seconds. RSS for the non-serving node is now 734 MB, and for the serving node 1997 MB. Graphs coming soon.\n\n\nOn Oct 20, 2015, at 3:12 AM, Mike Hearn <hearn at vinumeris.com> wrote:\n\n> OK, then running under Valgrind whilst sending gbt RPCs would be the next step.\n> \n> On Mon, Oct 19, 2015 at 9:17 PM, Multipool Admin <admin at multipool.us> wrote:\n> My nodes are continuously running getblocktemplate and getinfo, and I also suspected the issue is in either gbt or the rpc server.\n> \n> The instance only takes a few hours to get up to that memory usage.\n> \n> On Oct 18, 2015 8:59 AM, \"Jonathan Toomim via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com> wrote:\n>> This is *most likely* the mempool, but is just not reported correctly.\n> \n> I did some testing with PR #6410's better mempool reporting. The improved reporting suggests that actual in-memory usage (\"usage\":) by CTxMemPool is about 2.5x to 3x higher than the serialized transaction sizes (\"bytes\":). The excess memory usage that I'm seeing is on the order of 100x higher than the mempool \"bytes\": value. As such, I think it's unlikely that this is the mempool, or at least not normal/correct mempool behavior.\n> \n> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm guessing his bitcoind has been running longer than any of mine. His server definitely has more RAM. I don't know which email list he is subscribed to (probably XT), so I'm sharing it with both lists to make sure you're all aware of how big an issue this can be.\n> \n>> In the meantime you can mitigate the mempool growth by setting `-mintxfee`, see\n>> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding\n> \n> I have mintxfee and minrelaytxfee set to about 0.00003, which is high enough to exclude essentially all of the of the 14700-14800 byte flood transactions. My nodes' mempools only contain about one or two blocks' worth of transactions. So I don't think this is correct either.\n> \n> \n> \n> Some additional notes on this issue:\n> \n> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a Core bitcoind process (commit d78a880) overnight with no mining connected to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around 400 MB of RSS and the mempool was at around \"bytes\":10MB, \"usage\": 25MB. I ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes, and RSS climbed to 1180 MB. An hour after that with more getblocktemplates, and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.] getmempoolinfo is still showing \"usage\" around 25MB or less.\n> \n> I'll do some more testing with this and see if I can make it repeatable, and record the results more carefully. Expect a follow-up from me in a day or two.\n> \n> 2. valgrind did not show anything super promising. It did report this:\n> \n> ==6880== LEAK SUMMARY:\n> ==6880==    definitely lost: 0 bytes in 0 blocks\n> ==6880==    indirectly lost: 0 bytes in 0 blocks\n> ==6880==      possibly lost: 288 bytes in 1 blocks\n> ==6880==    still reachable: 10,552 bytes in 39 blocks\n> ==6880==         suppressed: 0 bytes in 0 blocks\n> (Bitcoin Core commit d78a880)\n> \n> and this:\n> ==6778== LEAK SUMMARY:\n> ==6778==    definitely lost: 0 bytes in 0 blocks\n> ==6778==    indirectly lost: 0 bytes in 0 blocks\n> ==6778==      possibly lost: 320 bytes in 1 blocks\n> ==6778==    still reachable: 10,080 bytes in 32 blocks\n> ==6778==         suppressed: 0 bytes in 0 blocks\n> (Bitcoin XT commit fe446d)\n> \n> I haven't found anything in there yet that I think would produce the multi-GB memory usage after running for a few days, but I could be missing it. Email me if you want the full log.\n> \n> I did not try running getblocktemplate while valgrind was running. I'll have to try that. I also have not let valgrind run for more than an hour.\n> \n> \n> \n> P.S.: Sorry for all the cross-post confusion and consequent flamewar fallout. While it's probably too late for this thread, I'll make sure to post in a manner that keeps the threads clearly separate in the future (e.g. different subject lines).\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> --\n> You received this message because you are subscribed to the Google Groups \"bitcoin-xt\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an email to bitcoin-xt+unsubscribe at googlegroups.com.\n> For more options, visit https://groups.google.com/d/optout.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/0f37ce9f/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/0f37ce9f/attachment.sig>"
            },
            {
                "author": "Jonathan Toomim",
                "date": "2015-10-21T03:01:16",
                "message_text_only": "More notes:\n\n1. I ran a side-by-side comparison with two bitcoind processes (Core, same recent git commit as before) on the same computer with the same settings running on different ports. With both processes, I logged RSS (via /proc/$pid/status) every 6 seconds. With one of those processes, I also ran bitcoin-cli getblocktemplate > /dev/null every 6 seconds. I let that run for about 30 hours. A graph and links to the CSVs of raw data are below. Results seem pretty clear: the getblocktemplate RPC is implicated in this issue.\n\n\nhttp://toom.im/files/memlog8518.csv\nhttp://toom.im/files/memlog-nogbt-8503.csv\nhttp://toom.im/files/bitcoind_memory_usage_gbt.png\n\n\n2. I ran valgrind twice, for about 6 hours each, on bitcoind while hitting it with getblocktemplate every 6 hours. Full valgrind output can be found at these two URLs:\n\nhttp://toom.im/files/valgrind-gbt-1.log\nhttp://toom.im/files/valgrind-gbt-2.log\n\nThe summary:\n\n==4064== LEAK SUMMARY:\n==4064==    definitely lost: 0 bytes in 0 blocks\n==4064==    indirectly lost: 0 bytes in 0 blocks\n==4064==      possibly lost: 288 bytes in 1 blocks\n==4064==    still reachable: 527,594 bytes in 4,367 blocks\n==4064==         suppressed: 0 bytes in 0 blocks\nThe main components of that still reachable section seem to just be one output of CreateNewBlock that's cached in case another getblocktemplate request is received before any new transactions come in:\n\n==4064== 98,304 bytes in 1 blocks are still reachable in loss record 39 of 40\n==4064==    at 0x4C29180: operator new(unsigned long) (vg_replace_malloc.c:324)\n==4064==    by 0x28EAA1: __gnu_cxx::new_allocator<CTransaction>::allocate(unsigned long, void const*) (new_allocator.h:104)\n==4064==    by 0x27EE44: __gnu_cxx::__alloc_traits<std::allocator<CTransaction> >::allocate(std::allocator<CTransaction>&, unsigned long) (alloc_traits.h:182)\n==4064==    by 0x26DFB0: std::_Vector_base<CTransaction, std::allocator<CTransaction> >::_M_allocate(unsigned long) (stl_vector.h:170)\n==4064==    by 0x2D5BDE: std::vector<CTransaction, std::allocator<CTransaction> >::_M_insert_aux(__gnu_cxx::__normal_iterator<CTransaction*, std::vector<CTransaction, std::allocator<CTransaction> > >, CTransaction const&) (vector.tcc:353)\n==4064==    by 0x2D3FF8: std::vector<CTransaction, std::allocator<CTransaction> >::push_back(CTransaction const&) (stl_vector.h:925)\n==4064==    by 0x2D113E: CreateNewBlock(CScript const&) (miner.cpp:298)\n==4064==    by 0x442D78: getblocktemplate(UniValue const&, bool) (rpcmining.cpp:513)\n==4064==    by 0x390CEB: CRPCTable::execute(std::string const&, UniValue const&) const (rpcserver.cpp:526)\n==4064==    by 0x41C5AB: HTTPReq_JSONRPC(HTTPRequest*, std::string const&) (httprpc.cpp:125)\n==4064==    by 0x3559BD: boost::detail::function::void_function_invoker2<bool (*)(HTTPRequest*, std::string const&), void, HTTPRequest*, std::string const&>::invoke(boost::detail::function::function_buffer&, HTTPRequest*, std::string const&) (function_template.hpp:112)\n==4064==    by 0x422520: boost::function2<void, HTTPRequest*, std::string const&>::operator()(HTTPRequest*, std::string const&) const (function_template.hpp:767)\n\nThere are a few other similar loss records (mostly referring to pblock or pblocktemplate in CreateNewBlock(...), but I see nothing that can explain the multi-GB memory consumption.\n\n3. One user on the bitcointalk p2pool thread (https://bitcointalk.org/index.php?topic=18313.msg12733791#msg12733791) claimed that he had this memory usage issue on Linux, but not on Mac OS X, under a GBT workload in both situations. If this is true, that would suggest this might be a fragmentation issue due to poor memory allocation. The other likely hypothesis is bloated caches. Looking into those two possibilities will be my next steps.\n\n\n\nOn Oct 20, 2015, at 5:39 AM, Jonathan Toomim <j at toom.im> wrote:\n\n> I did that Sunday twice. I'll report the results soon. Short version is that it looks like valgrind is just finding 200 kB to 600 kB of pblocktemplate, which is declared as a static pointer. Not exactly the multi-GB leak I'm looking for, but possibly related.\n> \n> I've also got two bitcoind processes running on the same machine that I started at the same time, running on different ports, all with the same settings, but one of which is serving getblocktemplate every 5-6 seconds and the other is not, while logging RSS on both every 6 seconds. RSS for the non-serving node is now 734 MB, and for the serving node 1997 MB. Graphs coming soon.\n> \n> \n> On Oct 20, 2015, at 3:12 AM, Mike Hearn <hearn at vinumeris.com> wrote:\n> \n>> OK, then running under Valgrind whilst sending gbt RPCs would be the next step.\n>> \n>> On Mon, Oct 19, 2015 at 9:17 PM, Multipool Admin <admin at multipool.us> wrote:\n>> My nodes are continuously running getblocktemplate and getinfo, and I also suspected the issue is in either gbt or the rpc server.\n>> \n>> The instance only takes a few hours to get up to that memory usage.\n>> \n>> On Oct 18, 2015 8:59 AM, \"Jonathan Toomim via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> On Oct 14, 2015, at 2:39 AM, Wladimir J. van der Laan <laanwj at gmail.com> wrote:\n>>> This is *most likely* the mempool, but is just not reported correctly.\n>> \n>> I did some testing with PR #6410's better mempool reporting. The improved reporting suggests that actual in-memory usage (\"usage\":) by CTxMemPool is about 2.5x to 3x higher than the serialized transaction sizes (\"bytes\":). The excess memory usage that I'm seeing is on the order of 100x higher than the mempool \"bytes\": value. As such, I think it's unlikely that this is the mempool, or at least not normal/correct mempool behavior.\n>> \n>> Another user (admin at multipool.us) reported 35 GB of RSS usage. I'm guessing his bitcoind has been running longer than any of mine. His server definitely has more RAM. I don't know which email list he is subscribed to (probably XT), so I'm sharing it with both lists to make sure you're all aware of how big an issue this can be.\n>> \n>>> In the meantime you can mitigate the mempool growth by setting `-mintxfee`, see\n>>> https://github.com/bitcoin/bitcoin/blob/v0.11.0/doc/release-notes.md#transaction-flooding\n>> \n>> I have mintxfee and minrelaytxfee set to about 0.00003, which is high enough to exclude essentially all of the of the 14700-14800 byte flood transactions. My nodes' mempools only contain about one or two blocks' worth of transactions. So I don't think this is correct either.\n>> \n>> \n>> \n>> Some additional notes on this issue:\n>> \n>> 1. I think it's related to CreateNewBlock() and getblocktemplate. I ran a Core bitcoind process (commit d78a880) overnight with no mining connected to it, and (IIRC -- my memory is fuzzy) when I woke up it was using around 400 MB of RSS and the mempool was at around \"bytes\":10MB, \"usage\": 25MB. I ran ./bitcoin-cli getblocktemplate once, and IIRC the RSS shot up to around 800 MB. I then ran getblocktemplate every 5 seconds for about 30 minutes, and RSS climbed to 1180 MB. An hour after that with more getblocktemplates, and now RSS is at 1350 MB. [Edit: 1490 MB about 30 minutes later.] getmempoolinfo is still showing \"usage\" around 25MB or less.\n>> \n>> I'll do some more testing with this and see if I can make it repeatable, and record the results more carefully. Expect a follow-up from me in a day or two.\n>> \n>> 2. valgrind did not show anything super promising. It did report this:\n>> \n>> ==6880== LEAK SUMMARY:\n>> ==6880==    definitely lost: 0 bytes in 0 blocks\n>> ==6880==    indirectly lost: 0 bytes in 0 blocks\n>> ==6880==      possibly lost: 288 bytes in 1 blocks\n>> ==6880==    still reachable: 10,552 bytes in 39 blocks\n>> ==6880==         suppressed: 0 bytes in 0 blocks\n>> (Bitcoin Core commit d78a880)\n>> \n>> and this:\n>> ==6778== LEAK SUMMARY:\n>> ==6778==    definitely lost: 0 bytes in 0 blocks\n>> ==6778==    indirectly lost: 0 bytes in 0 blocks\n>> ==6778==      possibly lost: 320 bytes in 1 blocks\n>> ==6778==    still reachable: 10,080 bytes in 32 blocks\n>> ==6778==         suppressed: 0 bytes in 0 blocks\n>> (Bitcoin XT commit fe446d)\n>> \n>> I haven't found anything in there yet that I think would produce the multi-GB memory usage after running for a few days, but I could be missing it. Email me if you want the full log.\n>> \n>> I did not try running getblocktemplate while valgrind was running. I'll have to try that. I also have not let valgrind run for more than an hour.\n>> \n>> \n>> \n>> P.S.: Sorry for all the cross-post confusion and consequent flamewar fallout. While it's probably too late for this thread, I'll make sure to post in a manner that keeps the threads clearly separate in the future (e.g. different subject lines).\n>> \n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>> \n>> --\n>> You received this message because you are subscribed to the Google Groups \"bitcoin-xt\" group.\n>> To unsubscribe from this group and stop receiving emails from it, send an email to bitcoin-xt+unsubscribe at googlegroups.com.\n>> For more options, visit https://groups.google.com/d/optout.\n>> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/d35c68f8/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/d35c68f8/attachment-0001.sig>"
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-21T07:29:19",
                "message_text_only": "On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:\n>  claimed that he had this memory usage issue on Linux, but not on Mac OS X,\n> under a GBT workload in both situations. If this is true, that would\n> suggest this might be a fragmentation issue due to poor memory allocation.\n\nPlease make sure you measure your memory usage correctly on Linux, it is \nnotoriously easy to get misleading info from tools like top.\n\nI use this one on Linux. \n\n$cat ~/bin/showmemusage \n#!/bin/sh\nif test -z \"$1\"; then\n    echo \"need a pid\"\n    exit\nfi\n\nmem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \\\nsed 's#^#+#' ) | bc`\necho \"$mem KB\"\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/5d946397/attachment.sig>"
            },
            {
                "author": "Jonathan Toomim",
                "date": "2015-10-21T17:58:15",
                "message_text_only": "The method I was using was essentially\n\n\tgrep VmRSS /proc/$pid/status\n\nComparing these two methods, I get\n\nYour method (PSS):\n\t2408313\nMy method (RSS):\n\tVmRSS:\t 2410396 kB\n\nOn Oct 21, 2015, at 12:29 AM, Tom Zander <tomz at freedommail.ch> wrote:\n\n> On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:\n> Please make sure you measure your memory usage correctly on Linux, it is\n> notoriously easy to get misleading info from tools like top.\n> \n> I use this one on Linux.\n> \n> $cat ~/bin/showmemusage\n> #!/bin/sh\n> if test -z \"$1\"; then\n>    echo \"need a pid\"\n>    exit\n> fi\n> \n> mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \\\n> sed 's#^#+#' ) | bc`\n> echo \"$mem KB\"\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/b272a7de/attachment.sig>"
            },
            {
                "author": "Multipool Admin",
                "date": "2015-10-22T16:06:51",
                "message_text_only": "This is a real issue.  The bitcoind process is getting killed every few\ndays when it reaches around 55gb of usage on my server.\nOn Oct 21, 2015 12:29 AM, \"Tom Zander via bitcoin-dev\" <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:\n> >  claimed that he had this memory usage issue on Linux, but not on Mac OS\n> X,\n> > under a GBT workload in both situations. If this is true, that would\n> > suggest this might be a fragmentation issue due to poor memory\n> allocation.\n>\n> Please make sure you measure your memory usage correctly on Linux, it is\n> notoriously easy to get misleading info from tools like top.\n>\n> I use this one on Linux.\n>\n> $cat ~/bin/showmemusage\n> #!/bin/sh\n> if test -z \"$1\"; then\n>     echo \"need a pid\"\n>     exit\n> fi\n>\n> mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \\\n> sed 's#^#+#' ) | bc`\n> echo \"$mem KB\"\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/c5e051f0/attachment-0001.html>"
            },
            {
                "author": "Jonathan Toomim",
                "date": "2015-10-22T16:27:59",
                "message_text_only": "You may want to add a cron job to restart bitcoind every day or two as a damage control mechanism until we figure this out.\n\nOn Oct 22, 2015, at 9:06 AM, Multipool Admin <admin at multipool.us> wrote:\n\n> This is a real issue.  The bitcoind process is getting killed every few days when it reaches around 55gb of usage on my server.\n> \n> On Oct 21, 2015 12:29 AM, \"Tom Zander via bitcoin-dev\" <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:\n> >  claimed that he had this memory usage issue on Linux, but not on Mac OS X,\n> > under a GBT workload in both situations. If this is true, that would\n> > suggest this might be a fragmentation issue due to poor memory allocation.\n> \n> Please make sure you measure your memory usage correctly on Linux, it is\n> notoriously easy to get misleading info from tools like top.\n> \n> I use this one on Linux.\n> \n> $cat ~/bin/showmemusage\n> #!/bin/sh\n> if test -z \"$1\"; then\n>     echo \"need a pid\"\n>     exit\n> fi\n> \n> mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \\\n> sed 's#^#+#' ) | bc`\n> echo \"$mem KB\"\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> --\n> You received this message because you are subscribed to the Google Groups \"bitcoin-xt\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an email to bitcoin-xt+unsubscribe at googlegroups.com.\n> For more options, visit https://groups.google.com/d/optout.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/4307d12c/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/4307d12c/attachment.sig>"
            },
            {
                "author": "Btc Drak",
                "date": "2015-10-22T17:01:53",
                "message_text_only": "I think this thread has gotten to the stage where it should be moved\nto an issue on Github and not continue to CC the bitcoin-dev list (or\nany other list tbh).\n\nOn Thu, Oct 22, 2015 at 5:27 PM, Jonathan Toomim via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> You may want to add a cron job to restart bitcoind every day or two as a\n> damage control mechanism until we figure this out.\n>\n> On Oct 22, 2015, at 9:06 AM, Multipool Admin <admin at multipool.us> wrote:\n>\n> This is a real issue.  The bitcoind process is getting killed every few days\n> when it reaches around 55gb of usage on my server.\n>\n> On Oct 21, 2015 12:29 AM, \"Tom Zander via bitcoin-dev\"\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> On Tuesday 20 Oct 2015 20:01:16 Jonathan Toomim wrote:\n>> >  claimed that he had this memory usage issue on Linux, but not on Mac OS\n>> > X,\n>> > under a GBT workload in both situations. If this is true, that would\n>> > suggest this might be a fragmentation issue due to poor memory\n>> > allocation.\n>>\n>> Please make sure you measure your memory usage correctly on Linux, it is\n>> notoriously easy to get misleading info from tools like top.\n>>\n>> I use this one on Linux.\n>>\n>> $cat ~/bin/showmemusage\n>> #!/bin/sh\n>> if test -z \"$1\"; then\n>>     echo \"need a pid\"\n>>     exit\n>> fi\n>>\n>> mem=`echo 0 $(cat /proc/$1/smaps | grep Pss | awk '{print $2}' | \\\n>> sed 's#^#+#' ) | bc`\n>> echo \"$mem KB\"\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n> --\n> You received this message because you are subscribed to the Google Groups\n> \"bitcoin-xt\" group.\n> To unsubscribe from this group and stop receiving emails from it, send an\n> email to bitcoin-xt+unsubscribe at googlegroups.com.\n> For more options, visit https://groups.google.com/d/optout.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-10-23T06:41:49",
                "message_text_only": "Btc Drak via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n> I think this thread has gotten to the stage where it should be moved\n> to an issue on Github and not continue to CC the bitcoin-dev list (or\n> any other list tbh).\n\nAgreed.  I couldn't see an issue, so I've opened one.  Let's track this\nthere, please.\n\nhttps://github.com/bitcoin/bitcoin/issues/6876\n\nCheers,\nRusty."
            },
            {
                "author": "Ross Bennetts",
                "date": "2015-10-21T07:59:28",
                "message_text_only": "On Wed, Oct 21, 2015 at 2:01 PM, Jonathan Toomim <j at toom.im> wrote:\n\n> 3. One user on the bitcointalk p2pool thread (\n> https://bitcointalk.org/index.php?topic=18313.msg12733791#msg12733791)\n> claimed that he had this memory usage issue on Linux, but not on Mac OS X,\n> under a GBT workload in both situations.\n>\n>\nThanks for the thorough investigation.\nFYI, I believe I've experienced this issue on both Linux & Mac OSX.\nI've moved my P2Pool/bitcoind node (rossbennetts.com:9332) from Ubuntu to\nOSX since my P2Pool instability began and they both seem to become flaky\nafter a few hours of uptime (since ~v0.10.something). I've tried both core\nand xt.\nTwo other bitcoin nodes, one connected to electrum-server and one\nstandalone, seem fine.\n\n//long term lurker, first time poster...\n   Ross...\n\n-- \nRoss M. W. Bennetts\nhttps://rossbennetts.com/\n\nE-mail: ross.bennetts at gmail.com\nTwitter: https://twitter.com/rmwb/\nFlickr: https://flickr.com/photos/rmwb/\nInstagram: https://instagram.com/rmwb/\nFacebook: https://facebook.com/ross.bennetts\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/cc80ea55/attachment-0001.html>"
            },
            {
                "author": "admin at multipool.us",
                "date": "2015-10-17T04:37:30",
                "message_text_only": "I can do better than that:\n\n  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND \n                                                                            \n                            \n10625 ********  20   0 41.310g 0.035t  51172 S   1.0 57.6  47:11.17 \nbitcoind     \n\nAny idea what's going on here?\n\n$ cat /proc/10625/status|grep -i VM\nVmPeak: 43647420 kB\nVmSize: 43319932 kB\nVmLck:        60 kB\nVmPin:         0 kB\nVmHWM:  38286252 kB\nVmRSS:  38014300 kB\nVmData: 43103812 kB\nVmStk:       236 kB\nVmExe:      8844 kB\nVmLib:    194656 kB\nVmPTE:     79932 kB\nVmSwap:        0 kB\n\n\nOn Tuesday, October 13, 2015 at 2:56:15 PM UTC-7, Jonathan Toomim (Toomim \nBros) wrote:\n>\n> I just noticed that several of my running bitcoind processes were using \n> around 3+ GB of RAM, even though the mempool itself seemed to be under \n> control.\n>\n> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo\n> {\n>     \"size\" : 1896,\n>     \"bytes\" : 37341328\n> }\n>\n> [total memory usage not shown -- I restarted bitcoind as soon as I \n> noticed, and didn't copy it down from top]\n>\n> 37 MB mempool, >3 GB RAM usage. Normally, when there aren't a lot of \n> unconfirmed txns floating around the network, memory usage is around 600 \n> MB, so this is quite unusual.\n>\n> After restarting the process and letting it run for a few minutes, I get:\n>\n>   PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command\n> [###] [XXXX]     20   0 1402M  317M 49836 S  1.0  8.2  0:41.71 ./bitcoind \n> -daemon\n>\n> XXXX at prime:~/bin$ ./bitcoin-cli getmempoolinfo\n> {\n>     \"size\" : 1072,\n>     \"bytes\" : 670000\n> }\n>\n> 0.67 MB mempool, 317 MB RAM usage. Much more reasonable.\n>\n>\n> Here's another node I'm running that has been online longer, before \n> restarting:\n>\n>   PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command\n> [###] [XXXX]     20   0 4961M 3540M 11080 S  2.8 45.3  8h20:11 \n> bin/bitcoind -daemon\n>\n> XXXX at feather:~$ bin/bitcoin-cli getmempoolinfo\n> {\n>     \"size\" : 3045,\n>     \"bytes\" : 39656126\n> }\n>\n> 39 MB mempool, 3540 MB total memory usage. After restarting bitcoind, I \n> see:\n>\n> [XXXX]@feather:~$ bin/bitcoin-cli stop\n> Bitcoin server stopping\n> [XXXX]@feather:~$ bin/bitcoind -daemon\n> Bitcoin server starting\n> [XXXX]@feather:~$ sleep 10; bin/bitcoin-cli getmempoolinfo\n> {\n>     \"size\" : 39,\n>     \"bytes\" : 47037\n> }\n>\n>\n>   PID USER      PRI  NI  VIRT   RES   SHR S CPU% MEM%   TIME+  Command\n> [###] [XXXX]     20   0 1640M  247M 67960 S  0.0  3.2  0:05.17 \n> bin/bitcoind -daemon\n>\n>\n>\n>\n> Does anybody have any guesses where we might be leaking memory, or what is \n> using the additional 2.4 GB? I've been using minrelaytxfee=0.00003 or \n> similar on my nodes. Maybe there's a leak in the minrelaytxfee code path? \n> Has anyone else seen something similar?\n>\n> This issue appears to happen both with Bitcoin Core 0.10.1 and with \n> Bitcoin XT 0.11B.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151016/4137feab/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Memory leaks?",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "odinn",
                "Pavel Jan\u00edk",
                "admin at multipool.us",
                "Mike Hearn",
                "Tom Zander",
                "Jonathan Toomim (Toomim Bros)",
                "Dave Scotese",
                "Jonathan Toomim",
                "Multipool Admin",
                "Btc Drak",
                "Wladimir J. van der Laan",
                "Ross Bennetts"
            ],
            "messages_count": 26,
            "total_messages_chars_count": 68308
        }
    },
    {
        "title": "[bitcoin-dev] Lightning Network's effect on miner fees",
        "thread_messages": [
            {
                "author": "s7r",
                "date": "2015-10-14T10:14:33",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nHello,\n\nI am reading about the Lightning Network and the BIPs which need to be\ndeployed until it can be fully functional. I have to say it's a neat\nsolution to scale and have almost instant transactions in a peer 2\npeer, distributed and trustless way. I already knows what the needed\nBIPs are and what each one does, I am curios about the impact this\nwill have on miner fees.\n\nIf transactions happen in a big percent offchain, and they are only\nbroadcasted on the mainchain where funds are moved in or out of the\nlightning network, this means there will be less transactions on the\nmainchain -> less fees collected by the miners. What will happen when\nthe block reward will go away? Either the fees for the little amount\nof onchain transactions will increase to unpractical levels, either\nthe miners will find it not profitable to keep their hardware plugged\nin to mine, so will leave and the effect will be that the hashing\npower of the network will decrease. Since the network's hashing power\nis a security feature (it makes some attacks impossible or insanely\nexpensive) I think it's important to anticipate what will happen in\nthis scenario.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBCAAGBQJWHisJAAoJEIN/pSyBJlsRQfgH/05DTVd+oUNeBt6LzitY/b2a\nb4Ubky0vWE5fa7sHxcfMQz4g4dPVKrDrMrpJsx2aY6D8a14tXzHsgyyRqJSZlHZh\nCUYvuy+HVje5wSwYRRIFEI+yyJLRrxJYLQuTqd9u/5kpL91Qq1cgzGr9BQgz20vb\ntDEP3Z0/08XeUPFA8ZxwjUptfzypVl0euIjsa2bFNFAWN9UYcDqKc0MnqgCYRTx3\nF/cm1NVmtFdpE2srTXVOqC0nTdfhHjnd1zmfRpPq0ZZoG43U81PbzC0kZmdz6rkt\nkUrtzKEDRLs12FNPVMrNnsHvRpScqoxIelubSvR8U3xrtIHkG9bpYO9EMqX6O4I=\n=+sdq\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Paul Sztorc",
                "date": "2015-10-14T15:19:31",
                "message_text_only": "LN transactions are a substitute good for on-chain transactions.\n\nTherefore, demand for on-chain transactions will decrease as a result of\nLN, meaning that fees will be lower than they would otherwise be.\n\nHowever, the two are also perfect compliments, as LN transactions cannot\ntake place at all without periodic on-chain transactions.\n\nThe demand for *all* Bitcoin transactions (LN and otherwise) is itself a\nfunction of innumerable factors, one of which is the question \"Which\nform of money [Bitcoin or not-Bitcoin] do I think my trading partners\nwill be using?\". By supporting a higher rate of (higher-quality) Bitcoin\ntransactions, the net result is highly uncertain, but will probably be\nthat LN actually increases trading fees.\n\nOn 10/14/2015 6:14 AM, s7r via bitcoin-dev wrote:\n> Hello,\n>\n> I am reading about the Lightning Network and the BIPs which need to be\n> deployed until it can be fully functional. I have to say it's a neat\n> solution to scale and have almost instant transactions in a peer 2\n> peer, distributed and trustless way. I already knows what the needed\n> BIPs are and what each one does, I am curios about the impact this\n> will have on miner fees.\n>\n> If transactions happen in a big percent offchain, and they are only\n> broadcasted on the mainchain where funds are moved in or out of the\n> lightning network, this means there will be less transactions on the\n> mainchain -> less fees collected by the miners. What will happen when\n> the block reward will go away? Either the fees for the little amount\n> of onchain transactions will increase to unpractical levels, either\n> the miners will find it not profitable to keep their hardware plugged\n> in to mine, so will leave and the effect will be that the hashing\n> power of the network will decrease. Since the network's hashing power\n> is a security feature (it makes some attacks impossible or insanely\n> expensive) I think it's important to anticipate what will happen in\n> this scenario.\n> _______________________________________________ > bitcoin-dev mailing list > bitcoin-dev at lists.linuxfoundation.org >\nhttps://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/e035b6d3/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-10-14T15:37:14",
                "message_text_only": "On Wed, Oct 14, 2015 at 10:19 AM, Paul Sztorc via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> However, the two are also perfect compliments, as LN transactions cannot take place at all without periodic on-chain transactions.\n\nAdditionally, lightning network hot wallets are not an ideal place to\nstore large quantities of BTC and users that don't expect to be\nactively using LN should in general prefer confirmed UTXOs for\nlong-term cold storage. So far the guess that I have seen floating\naround is that LN usage will at first be restricted to very tiny\namounts of BTC in tiny hot wallets, since nobody is particularly\ninterested in running large hot wallets.\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Daniel Stadulis",
                "date": "2015-10-15T03:35:59",
                "message_text_only": "It makes economic sense to include a transaction on the Lightning Network,\niff the the fee to include the transaction on the blockchain is more than\nthan the Time Value of Money of the encumbered funds on the Lightening\nNodes amortized across the number of users pushing funds through a LN node.\n\nLarge-value transactions are going to hit the blockchain while smaller,\npredictable, closer-to-median transaction-rates transactions will go into\nthe Lightning Network\n\nBlockchain: Car Purchase, House Purchase, Unexpected Medical Expense\nLightning Network: Utility Bill, Groceries, Rent, Mortgage.\n\n> If transactions happen in a big percent offchain, and they are only\n> broadcasted on the mainchain where funds are moved in or out of the\n> lightning network, this means there will be less transactions on the\n> mainchain\n\nThis is optimal because the network has minimized the set of\ncosts/externalities to the minimum necessary to conduct a series of\ntransactions\n>  -> less fees collected by the miners.\n\u201cIt's tough to make predictions, especially about the future.\u201d\nThe effect on fees is going to be hard to predict.\n1.) One part depends on user behavior around the dynamics of bid-side\ndemand of fees. I.e. If there is a health ratio of\n-users who want 1-block- times but are unwilling/unable to bid up the fee\nof their transactions to push out other 1-block-confirmation transactions (AKA\nhow firm is that fee support presently and under dynamic conditions)\nto\n-users who take their transactions off the blockchain to LN\n\n2.) New classes of transactions will be possible that aren't possible today.\n\n3.) What market effect will the financial/technical potential of 'instant'\ntransaction (after a network-joining-intro period) have on Bitcoin's\nutility/price/adoption?\n\nIt would be elucidating if any blockchain data scientists could study the\neffect of the fee market when high-volume exchanges unexpectedly halted\ntrading.\n\n\n> What will happen when the block reward will go away?\nI believe a more specific question to ask is: What will happen when there\nisn't a convincing economic reason for a large majority of hashing power to\nbe bolstering PoW defense on the main blockchain?  Right now we have a\npretty good handle on the amount of hashing power that's pointed at\nextending/defending the 'main' chain but don't have as good intel on how\nmuch idle hashing power there is.  Idle hashing power becomes more of a\nthreat in market scenarios where chain-extending PoW is scarce (late-game\nBitcoin).\n\nMy humble prediction is that the necessary number of block confirmation\nwill go up and there were be non negligible mining power idle ready to\ndefend actors' preferred chain.  If this is the scenario that plays out, I\ndon't think it'll be very concerning;  large-value transaction that will be\non the blockchain have more flexible time-settlement tolerance (no one\nneeds their home-buying escrow to settle in <= 1 day) and lower-value\ntransaction that users want/need to be confirmed quickly will be confirmed\n'instantly' over Lightning Network or another Bitcoin-anchored protocol.\n\nP.S. I see lots of concern with respect to fee reduction directed at LN\nwhile today there are already off-chain databases that remove fee\npressure.  Like the LN / off-chain databases or not, they will exists.\n\nDaniel Stadulis\n\n\nOn Wed, Oct 14, 2015 at 8:37 AM, Bryan Bishop via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wed, Oct 14, 2015 at 10:19 AM, Paul Sztorc via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > However, the two are also perfect compliments, as LN transactions cannot\n> take place at all without periodic on-chain transactions.\n>\n> Additionally, lightning network hot wallets are not an ideal place to\n> store large quantities of BTC and users that don't expect to be\n> actively using LN should in general prefer confirmed UTXOs for\n> long-term cold storage. So far the guess that I have seen floating\n> around is that LN usage will at first be restricted to very tiny\n> amounts of BTC in tiny hot wallets, since nobody is particularly\n> interested in running large hot wallets.\n>\n> - Bryan\n> http://heybryan.org/\n> 1 512 203 0507\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/310ad764/attachment.html>"
            },
            {
                "author": "s7r",
                "date": "2015-10-14T22:37:32",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 10/14/2015 6:19 PM, Paul Sztorc wrote:\n> LN transactions are a substitute good for on-chain transactions.\n> \n> Therefore, demand for on-chain transactions will decrease as a\n> result of LN, meaning that fees will be lower than they would\n> otherwise be.\n> \n> However, the two are also perfect compliments, as LN transactions\n> cannot take place at all without periodic on-chain transactions.\n> \n> The demand for *all* Bitcoin transactions (LN and otherwise) is\n> itself a function of innumerable factors, one of which is the\n> question \"Which form of money [Bitcoin or not-Bitcoin] do I think\n> my trading partners will be using?\". By supporting a higher rate of\n> (higher-quality) Bitcoin transactions, the net result is highly\n> uncertain, but will probably be that LN actually increases trading\n> fees.\n\nProbably yes. But probably no. Having less hashing power is not good,\nand it's unrelated to scalability and decentralization, it's related\nto security. Of course we could argue that the hashing power is not\nsuper decentralized at this moment but it's unrelated to the topic.\n\nI'd rather have less decentralized big amount of hashing power as\nopposite to less hashing power.\n\nOne theory, very close to yours, is that if Bitcoin transactions\ndemand grows so high that we need the lightning network, there should\nbe plenty of on chain transactions for miners to collect fees from.\n\nI haven't yet seen the incentives of everyone involved in lightning\nnetwork (payment channel end points, hub operators, miners, etc.) but\nwould it make sense to enforce a % of the fees collected by on payment\nhubs to be spent as miner fees, regardless if the transactions from\nthat hub go on the main chain or not?\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBCAAGBQJWHtksAAoJEIN/pSyBJlsR9Y0H+QE/XdW7yauhrNJtp2eIBPg9\nzVUanzR2LT0zAkeF5/Xsx3PFoypALOV7R0YNL29jI3F2XkZA8v24wfNvPi0DETcC\nZOxw4G1erIEjjj51Qz4M7okjQecJxPHOJ+Nz6iNZEDFcZG2b15phCRSQKZwSHP+b\nErw6a4NPs1foieZyk260KSOB8lFs9e8bUJfXd4FfA7l60RA9582K6p05aqVtehFW\nONTe8ULv8F0ba+EzVyTodzzY6ehjD+uc31zL6mDFIbiW+InivFbfi2uDVN1BP/US\nm99lLHvDEthnkTokFrbDu81kXdD0lHwIu4O0EMzCnw2E0vWi3sGKd+M0P0sv4WA=\n=1qxh\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Daniel Newton",
                "date": "2015-10-14T23:42:31",
                "message_text_only": "You could make the same argument about changetip, coinbase, bitstamp or any\nother entity that operates off chain transactions.\n\n1) There is probably no way of blocking them or enforcing fee collection\nfrom entities that operate off chain transactions\n2) They all have to settle on chain eventually\n\nOn Thu, Oct 15, 2015 at 11:37 AM, s7r via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On 10/14/2015 6:19 PM, Paul Sztorc wrote:\n> > LN transactions are a substitute good for on-chain transactions.\n> >\n> > Therefore, demand for on-chain transactions will decrease as a\n> > result of LN, meaning that fees will be lower than they would\n> > otherwise be.\n> >\n> > However, the two are also perfect compliments, as LN transactions\n> > cannot take place at all without periodic on-chain transactions.\n> >\n> > The demand for *all* Bitcoin transactions (LN and otherwise) is\n> > itself a function of innumerable factors, one of which is the\n> > question \"Which form of money [Bitcoin or not-Bitcoin] do I think\n> > my trading partners will be using?\". By supporting a higher rate of\n> > (higher-quality) Bitcoin transactions, the net result is highly\n> > uncertain, but will probably be that LN actually increases trading\n> > fees.\n>\n> Probably yes. But probably no. Having less hashing power is not good,\n> and it's unrelated to scalability and decentralization, it's related\n> to security. Of course we could argue that the hashing power is not\n> super decentralized at this moment but it's unrelated to the topic.\n>\n> I'd rather have less decentralized big amount of hashing power as\n> opposite to less hashing power.\n>\n> One theory, very close to yours, is that if Bitcoin transactions\n> demand grows so high that we need the lightning network, there should\n> be plenty of on chain transactions for miners to collect fees from.\n>\n> I haven't yet seen the incentives of everyone involved in lightning\n> network (payment channel end points, hub operators, miners, etc.) but\n> would it make sense to enforce a % of the fees collected by on payment\n> hubs to be spent as miner fees, regardless if the transactions from\n> that hub go on the main chain or not?\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v2.0.22 (MingW32)\n>\n> iQEcBAEBCAAGBQJWHtksAAoJEIN/pSyBJlsR9Y0H+QE/XdW7yauhrNJtp2eIBPg9\n> zVUanzR2LT0zAkeF5/Xsx3PFoypALOV7R0YNL29jI3F2XkZA8v24wfNvPi0DETcC\n> ZOxw4G1erIEjjj51Qz4M7okjQecJxPHOJ+Nz6iNZEDFcZG2b15phCRSQKZwSHP+b\n> Erw6a4NPs1foieZyk260KSOB8lFs9e8bUJfXd4FfA7l60RA9582K6p05aqVtehFW\n> ONTe8ULv8F0ba+EzVyTodzzY6ehjD+uc31zL6mDFIbiW+InivFbfi2uDVN1BP/US\n> m99lLHvDEthnkTokFrbDu81kXdD0lHwIu4O0EMzCnw2E0vWi3sGKd+M0P0sv4WA=\n> =1qxh\n> -----END PGP SIGNATURE-----\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/0c9e9417/attachment.html>"
            },
            {
                "author": "Paul Sztorc",
                "date": "2015-10-14T23:55:08",
                "message_text_only": "On 10/14/2015 6:37 PM, s7r wrote:\n> On 10/14/2015 6:19 PM, Paul Sztorc wrote:\n> > LN transactions are a substitute good for on-chain transactions.\n>\n> > Therefore, demand for on-chain transactions will decrease as a\n> > result of LN, meaning that fees will be lower than they would\n> > otherwise be.\n>\n> > However, the two are also perfect compliments, as LN transactions\n> > cannot take place at all without periodic on-chain transactions.\n>\n> > The demand for *all* Bitcoin transactions (LN and otherwise) is\n> > itself a function of innumerable factors, one of which is the\n> > question \"Which form of money [Bitcoin or not-Bitcoin] do I think\n> > my trading partners will be using?\". By supporting a higher rate of\n> > (higher-quality) Bitcoin transactions, the net result is highly\n> > uncertain, but will probably be that LN actually increases trading\n> > fees.\n>\n> Probably yes. But probably no. Having less hashing power is not good,\n> and it's unrelated to scalability and decentralization, it's related\n> to security. Of course we could argue that the hashing power is not\n> super decentralized at this moment but it's unrelated to the topic.\nWho are you talking to? Who said anything about any of this? If you are\ntalking to me, please don't imply that I don't already know these things.\n\n>\n> I'd rather have less decentralized big amount of hashing power as\n> opposite to less hashing power.\n>\n> One theory, very close to yours, is that if Bitcoin transactions\n> demand grows so high that we need the lightning network, there should\n> be plenty of on chain transactions for miners to collect fees from.\nFor a given fee amount, LN transactions are worse than on-chain\ntransactions. So people would only use LN if they preferred cheaper txns.\n>\n> I haven't yet seen the incentives of everyone involved in lightning\n> network (payment channel end points, hub operators, miners, etc.) but\n> would it make sense to enforce a % of the fees collected by on payment\n> hubs to be spent as miner fees, regardless if the transactions from\n> that hub go on the main chain or not?\nIf you want fees to go up, either decrease supply (lower the blocksize\nlimit) or increase demand (a popular Bitcoin). There's no need to do\nanything roundabout.\n\nRegards,\nPaul"
            }
        ],
        "thread_summary": {
            "title": "Lightning Network's effect on miner fees",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop",
                "Daniel Stadulis",
                "s7r",
                "Daniel Newton",
                "Paul Sztorc"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 16900
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin-NG whitepaper.",
        "thread_messages": [
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2015-10-14T18:02:15",
                "message_text_only": "Hi everyone,\n\nWe just released the whitepaper describing Bitcoin-NG, a new technique for\naddressing some of the scalability challenges faced by Bitcoin.\nSurprisingly, Bitcoin-NG can simultaneously increase throughput while\nreducing latency, and do so without impacting Bitcoin's open architecture\nor changing its trust model. This post illustrates the core technique:\n     http://hackingdistributed.com/2015/10/14/bitcoin-ng/\nwhile the whitepaper has all the nitty gritty details:\n     http://arxiv.org/abs/1510.02037\n\nFitting NG on top of the current Bitcoin blockchain is future work that we\nthink is quite possible. NG is compatible with both Bitcoin as is, as well\nas Blockstream-like sidechains, and we currently are not planning to\ncompete commercially with either technology -- we see NG as being\ncomplementary to both efforts. This is pure science, published and shared\nwith the community to advance the state of blockchains and to help them\nreach throughputs and latencies required of cutting edge fintech\napplications. Perhaps it can be adopted, or perhaps it can provide the\nspark of inspiration for someone else to come up with even better solutions.\n\nWe would be delighted to hear your feedback.\n- Ittay Eyal and E. G\u00fcn Sirer.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/e2ca2035/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2015-10-14T18:12:27",
                "message_text_only": "On Wed, Oct 14, 2015 at 1:02 PM, Emin G\u00fcn Sirer\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> while the whitepaper has all the nitty gritty details:\n>      http://arxiv.org/abs/1510.02037\n\nTaking reward compensation back by fraud proofs is not enough to fix\nthe problems associated with double spending (such as, everyone has to\nwait for the \"real\" confirmations instead of the \"possibly\ndouble-spend\" confirmations). Some of this was discussed in -wizards\nrecently:\nhttp://gnusha.org/bitcoin-wizards/2015-09-19.log\n\nFor a system based entirely on fraud proofs and threat of fraud\nproofs, see fidelity-bonded ledgers:\nhttp://lists.linuxfoundation.org/pipermail/bitcoin-dev/2013-February/002189.html\nhttps://bitcointalk.org/index.php?topic=146307.0\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            },
            {
                "author": "Ittay",
                "date": "2015-10-14T18:28:51",
                "message_text_only": "On Wed, Oct 14, 2015 at 2:12 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n\n> On Wed, Oct 14, 2015 at 1:02 PM, Emin G\u00fcn Sirer\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > while the whitepaper has all the nitty gritty details:\n> >      http://arxiv.org/abs/1510.02037\n>\n> Taking reward compensation back by fraud proofs is not enough to fix\n> the problems associated with double spending (such as, everyone has to\n> wait for the \"real\" confirmations instead of the \"possibly\n> double-spend\" confirmations). Some of this was discussed in -wizards\n> recently:\n> http://gnusha.org/bitcoin-wizards/2015-09-19.log\n\n\nFraud proof removes all the attacker's revenue. It's like the attacker\nsacrifices an entire block for double spending in the current system. I\nthink Luke-Jr got it right at that discussion.\n\nBest,\nIttay\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/0630ba8f/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-10-14T18:57:08",
                "message_text_only": "That conversation missed a second issue. Namely that there is no way to punish people if there is a double spend in a micro block that happens in key block which reorg'd away the first transaction. eg one miner mines a transaction in a micro block, another miner (either by not having seen the first yet, or being malicious - potentially the same miner) mines a key block which reorgs away the first micro block and then, in their first micro block, mines a double spend. This can happen at any time, so you end up having to fall back to regular full blocks for confirmation times :(.\n\nAlso, Greg Slepak brought up a good point on twitter at https://twitter.com/taoeffect/status/654358023138209792. Noting that this model means users could no longer pick transactions in a mining pool which was set up in such a way (it could be tweaked to do so with separate rewards and pubkeys, but now the user can commit fraud at a much lower cost - their own pool reward, not the block's total reward).\n\nOn October 14, 2015 11:28:51 AM PDT, Ittay via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>On Wed, Oct 14, 2015 at 2:12 PM, Bryan Bishop <kanzure at gmail.com>\n>wrote:\n>\n>> On Wed, Oct 14, 2015 at 1:02 PM, Emin G\u00fcn Sirer\n>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> > while the whitepaper has all the nitty gritty details:\n>> >      http://arxiv.org/abs/1510.02037\n>>\n>> Taking reward compensation back by fraud proofs is not enough to fix\n>> the problems associated with double spending (such as, everyone has\n>to\n>> wait for the \"real\" confirmations instead of the \"possibly\n>> double-spend\" confirmations). Some of this was discussed in -wizards\n>> recently:\n>> http://gnusha.org/bitcoin-wizards/2015-09-19.log\n>\n>\n>Fraud proof removes all the attacker's revenue. It's like the attacker\n>sacrifices an entire block for double spending in the current system. I\n>think Luke-Jr got it right at that discussion.\n>\n>Best,\n>Ittay\n>\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/84d65583/attachment-0001.html>"
            },
            {
                "author": "Ittay",
                "date": "2015-10-15T15:09:52",
                "message_text_only": "Thanks, Matt. Response inline.\n\nOn Wed, Oct 14, 2015 at 2:57 PM, Matt Corallo <lf-lists at mattcorallo.com>\nwrote:\n\n> That conversation missed a second issue. Namely that there is no way to\n> punish people if there is a double spend in a micro block that happens in\n> key block which reorg'd away the first transaction. eg one miner mines a\n> transaction in a micro block, another miner (either by not having seen the\n> first yet, or being malicious - potentially the same miner) mines a key\n> block which reorgs away the first micro block and then, in their first\n> micro block, mines a double spend. This can happen at any time, so you end\n> up having to fall back to regular full blocks for confirmation times :(.\n>\n\nIf NG is to be used efficiently, microblocks are going to be very frequent,\nand so such forks should occur at almost every key-block publication. Short\nreorgs as you described are the norm. A user should wait before accepting a\ntransaction to make sure there was no key-block she missed. The wait time\nis chosen according to the network propagation delay (+as much slack as the\nuser feels necessary). This is similar to the situation in Bitcoin when you\nreceive a block. To be confident that you have one confirmation you should\nwait for the propagation time of the network to make sure there is no\nbranch you missed.\n\nAs for the malicious case: the attacker has to win the key-block, have the\nto-be-inverted transaction in the previous epoch, and withhold his\nkey-block for a while. That being said, indeed our fraud proof scheme\ndoesn't catch such an event, as it is indistinguishable from benign\nbehavior.\n\n\n> Also, Greg Slepak brought up a good point on twitter at\n> https://twitter.com/taoeffect/status/654358023138209792. Noting that this\n> model means users could no longer pick transactions in a mining pool which\n> was set up in such a way (it could be tweaked to do so with separate\n> rewards and pubkeys, but now the user can commit fraud at a much lower cost\n> - their own pool reward, not the block's total reward).\n>\n\nAgreed x3: This is a good point, it is correct, and the tweak is dangerous.\nDo you perceive this as a significant practical issue?\n\n\n>\n> On October 14, 2015 11:28:51 AM PDT, Ittay via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>>\n>> On Wed, Oct 14, 2015 at 2:12 PM, Bryan Bishop <kanzure at gmail.com> wrote:\n>>\n>>> On Wed, Oct 14, 2015 at 1:02 PM, Emin G\u00fcn Sirer\n>>> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>> > while the whitepaper has all the nitty gritty details:\n>>> >      http://arxiv.org/abs/1510.02037\n>>>\n>>> Taking reward compensation back by fraud proofs is not enough to fix\n>>> the problems associated with double spending (such as, everyone has to\n>>> wait for the \"real\" confirmations instead of the \"possibly\n>>> double-spend\" confirmations). Some of this was discussed in -wizards\n>>> recently:\n>>> http://gnusha.org/bitcoin-wizards/2015-09-19.log\n>>\n>>\n>> Fraud proof removes all the attacker's revenue. It's like the attacker\n>> sacrifices an entire block for double spending in the current system. I\n>> think Luke-Jr got it right at that discussion.\n>>\n>> Best,\n>> Ittay\n>>\n>> ------------------------------\n>>\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/784e0876/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-10-28T02:08:52",
                "message_text_only": "Oops, just realized I never responded to this...\n\nOn 10/15/15 15:09, Ittay wrote:\n> Thanks, Matt. Response inline. \n> \n> On Wed, Oct 14, 2015 at 2:57 PM, Matt Corallo <lf-lists at mattcorallo.com\n> <mailto:lf-lists at mattcorallo.com>> wrote:\n> \n>     That conversation missed a second issue. Namely that there is no way\n>     to punish people if there is a double spend in a micro block that\n>     happens in key block which reorg'd away the first transaction. eg\n>     one miner mines a transaction in a micro block, another miner\n>     (either by not having seen the first yet, or being malicious -\n>     potentially the same miner) mines a key block which reorgs away the\n>     first micro block and then, in their first micro block, mines a\n>     double spend. This can happen at any time, so you end up having to\n>     fall back to regular full blocks for confirmation times :(.\n> \n> \n> If NG is to be used efficiently, microblocks are going to be very\n> frequent, and so such forks should occur at almost every key-block\n> publication. Short reorgs as you described are the norm. A user should\n> wait before accepting a transaction to make sure there was no key-block\n> she missed. The wait time is chosen according to the network propagation\n> delay (+as much slack as the user feels necessary). This is similar to\n> the situation in Bitcoin when you receive a block. To be confident that\n> you have one confirmation you should wait for the propagation time of\n> the network to make sure there is no branch you missed. \n\nI think you're overstating how short the wait times can be. They need to\nbe much longer than the network propagation delay.\n\n> As for the malicious case: the attacker has to win the key-block, have\n> the to-be-inverted transaction in the previous epoch, and withhold his\n> key-block for a while. That being said, indeed our fraud proof scheme\n> doesn't catch such an event, as it is indistinguishable from benign\n> behavior. \n\nThe attacker does not need to withold their keyblock at all. All the\nattacker does is, for every transaction they ever send, after it is\nincluded in a microblock, set their hashpower to start mining a keyblock\nimmediately prior to this microblock. When they find a keyblock, they\nimmediately announce it and start creating microblocks, the first of\nwhich double-spends the previous transaction. If they dont win the key\nblock, oh well, their payment went through normally and they couldn't\ndouble-spend.\n\nIn chatting with Glenn about this, we roughly agreed that the\nconfirmation time for microblocks possibly doesn't need to be a full\nkey-block, but it needs to be a reasonable period after which such an\nattacker would lose more in fees than the value of their double-spend\n(ie because the key-block afterwards gets 20% more in fees than the\nkey-block before hand). In any case, the game theory here starts to get\nrather complicated and it doesn't make me want to suggest accepting\nmicroblocks as confirmations is safe.\n\n>     Also, Greg Slepak brought up a good point on twitter at\n>     https://twitter.com/taoeffect/status/654358023138209792. Noting that\n>     this model means users could no longer pick transactions in a mining\n>     pool which was set up in such a way (it could be tweaked to do so\n>     with separate rewards and pubkeys, but now the user can commit fraud\n>     at a much lower cost - their own pool reward, not the block's total\n>     reward).\n> \n> \n> Agreed x3: This is a good point, it is correct, and the tweak is dangerous. \n> Do you perceive this as a significant practical issue? \n\nIt is not a practical issue today because no one does it, but it is a\nmassive issue in that the splitting of pool rewards and transaction\nselection is one of the few easy wins we have left in the fight against\nmining centralization. Mining centralization today is absolutely awful,\nand closing off our only big win would be tragic.\n\n>     On October 14, 2015 11:28:51 AM PDT, Ittay via bitcoin-dev\n>     <bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n> \n>         On Wed, Oct 14, 2015 at 2:12 PM, Bryan Bishop <kanzure at gmail.com\n>         <mailto:kanzure at gmail.com>> wrote:\n> \n>             On Wed, Oct 14, 2015 at 1:02 PM, Emin G\u00fcn Sirer\n>             <bitcoin-dev at lists.linuxfoundation.org\n>             <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>             > while the whitepaper has all the nitty gritty details:\n>             >      http://arxiv.org/abs/1510.02037\n> \n>             Taking reward compensation back by fraud proofs is not\n>             enough to fix\n>             the problems associated with double spending (such as,\n>             everyone has to\n>             wait for the \"real\" confirmations instead of the \"possibly\n>             double-spend\" confirmations). Some of this was discussed in\n>             -wizards\n>             recently:\n>             http://gnusha.org/bitcoin-wizards/2015-09-19.log\n> \n> \n>         Fraud proof removes all the attacker's revenue. It's like the\n>         attacker sacrifices an entire block for double spending in the\n>         current system. I think Luke-Jr got it right at that discussion. \n> \n>         Best, \n>         Ittay \n> \n>         ------------------------------------------------------------------------\n> \n>         bitcoin-dev mailing list\n>         bitcoin-dev at lists.linuxfoundation.org\n>         <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>         https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n>"
            },
            {
                "author": "Sergio Demian Lerner",
                "date": "2015-10-14T18:14:08",
                "message_text_only": "I'm reading it.\n\nFirst comment: since a Bitcoin block time is only greater than the median\nof the last 11 blocks, a miner could choose the key block time in order to\ngenerate about 400 miniblocks, instead of the average 60 blocks. Not very\nbad, but should be taken into account.\n\n\n\n\nOn Wed, Oct 14, 2015 at 3:02 PM, Emin G\u00fcn Sirer <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi everyone,\n>\n> We just released the whitepaper describing Bitcoin-NG, a new technique for\n> addressing some of the scalability challenges faced by Bitcoin.\n> Surprisingly, Bitcoin-NG can simultaneously increase throughput while\n> reducing latency, and do so without impacting Bitcoin's open architecture\n> or changing its trust model. This post illustrates the core technique:\n>      http://hackingdistributed.com/2015/10/14/bitcoin-ng/\n> while the whitepaper has all the nitty gritty details:\n>      http://arxiv.org/abs/1510.02037\n>\n> Fitting NG on top of the current Bitcoin blockchain is future work that we\n> think is quite possible. NG is compatible with both Bitcoin as is, as well\n> as Blockstream-like sidechains, and we currently are not planning to\n> compete commercially with either technology -- we see NG as being\n> complementary to both efforts. This is pure science, published and shared\n> with the community to advance the state of blockchains and to help them\n> reach throughputs and latencies required of cutting edge fintech\n> applications. Perhaps it can be adopted, or perhaps it can provide the\n> spark of inspiration for someone else to come up with even better solutions.\n>\n> We would be delighted to hear your feedback.\n> - Ittay Eyal and E. G\u00fcn Sirer.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/7b921e1f/attachment-0001.html>"
            },
            {
                "author": "Bob McElrath",
                "date": "2015-10-14T20:52:35",
                "message_text_only": "So it seems to me that all I need to do is figure out who the current leader is,\nand DDoS him off the network to shut Bitcoin-NG down.\n\nThis is a significant advantage to bitcoin's ex-post-facto blocks: no one knows\nwhere the next one will come from.  The only way to shut the network down is to\nshut all nodes down.\n\nEmin G\u00fcn Sirer via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org] wrote:\n> Hi everyone,\n> \n> We just released the whitepaper describing Bitcoin-NG, a new technique for\n> addressing some of the scalability challenges faced by Bitcoin. Surprisingly,\n> Bitcoin-NG can simultaneously increase throughput while reducing latency, and\n> do so without impacting Bitcoin's open architecture or changing its trust\n> model. This post illustrates the core technique:\n> \u00a0 \u00a0 \u00a0http://hackingdistributed.com/2015/10/14/bitcoin-ng/\n> while the whitepaper has all the nitty gritty details:\n> \u00a0 \u00a0 \u00a0http://arxiv.org/abs/1510.02037\n> \n> Fitting NG on top of the current Bitcoin blockchain is future work that we\n> think is quite possible. NG is compatible with both Bitcoin as is, as well as\n> Blockstream-like sidechains, and we currently are not planning to compete\n> commercially with either technology -- we see NG as being complementary to both\n> efforts. This is pure science, published and shared with the community to\n> advance the state of blockchains and to help them reach throughputs and\n> latencies required of cutting edge fintech applications. Perhaps it can be\n> adopted, or perhaps it can provide the spark of inspiration for someone else to\n> come up with even better solutions.\n> \n> We would be delighted to hear your feedback.\u00a0\n> - Ittay Eyal and E. G\u00fcn Sirer.\n> \n> !DSPAM:561e98cd301391127216946!\n\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n> !DSPAM:561e98cd301391127216946!\n\n--\nCheers, Bob McElrath\n\n\"For every complex problem, there is a solution that is simple, neat, and wrong.\"\n    -- H. L. Mencken"
            },
            {
                "author": "Ittay",
                "date": "2015-10-14T18:38:35",
                "message_text_only": "On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath <bob at mcelrath.org> wrote:\n\n> So it seems to me that all I need to do is figure out who the current\n> leader is,\n> and DDoS him off the network to shut Bitcoin-NG down.\n>\n> This is a significant advantage to bitcoin's ex-post-facto blocks: no one\n> knows\n> where the next one will come from.  The only way to shut the network down\n> is to\n> shut all nodes down.\n>\n\nThat's an interesting point, but such an attack is difficult to pull off.\nMiners\noften run multiple well connected nodes, allowing them to propagate their\ngenerated blocks from multiple vantage points.\n\nBest,\nIttay\n\n\n>\n> Emin G\u00fcn Sirer via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org]\n> wrote:\n> > Hi everyone,\n> >\n> > We just released the whitepaper describing Bitcoin-NG, a new technique\n> for\n> > addressing some of the scalability challenges faced by Bitcoin.\n> Surprisingly,\n> > Bitcoin-NG can simultaneously increase throughput while reducing\n> latency, and\n> > do so without impacting Bitcoin's open architecture or changing its trust\n> > model. This post illustrates the core technique:\n> >      http://hackingdistributed.com/2015/10/14/bitcoin-ng/\n> > while the whitepaper has all the nitty gritty details:\n> >      http://arxiv.org/abs/1510.02037\n> >\n> > Fitting NG on top of the current Bitcoin blockchain is future work that\n> we\n> > think is quite possible. NG is compatible with both Bitcoin as is, as\n> well as\n> > Blockstream-like sidechains, and we currently are not planning to compete\n> > commercially with either technology -- we see NG as being complementary\n> to both\n> > efforts. This is pure science, published and shared with the community to\n> > advance the state of blockchains and to help them reach throughputs and\n> > latencies required of cutting edge fintech applications. Perhaps it can\n> be\n> > adopted, or perhaps it can provide the spark of inspiration for someone\n> else to\n> > come up with even better solutions.\n> >\n> > We would be delighted to hear your feedback.\n> > - Ittay Eyal and E. G\u00fcn Sirer.\n> >\n> > !DSPAM:561e98cd301391127216946!\n>\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> > !DSPAM:561e98cd301391127216946!\n>\n> --\n> Cheers, Bob McElrath\n>\n> \"For every complex problem, there is a solution that is simple, neat, and\n> wrong.\"\n>     -- H. L. Mencken\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/82c897aa/attachment.html>"
            },
            {
                "author": "Emin G\u00fcn Sirer",
                "date": "2015-10-14T18:39:08",
                "message_text_only": ">So it seems to me that all I need to do is figure out who the current\nleader is,\n>and DDoS him off the network to shut Bitcoin-NG down.\n\nGood point. If NG is layered on top of Bitcoin, we'd retain all of Bitcoin\nas is. This would confer all the benefits of Bitcoin's retrospective\nblocks, as well as add the ability to mint microblocks with low latency in\nbetween. And despite the phrase \"the leader,\" the actual leader in NG is a\nkey, not a specific node. That makes it possible to deter DDoS attacks by\ndynamically migrating where in the network the leader is operating in\nresponse to an attack. Finally, DDoS attacks against miners are already\npossible, but they seem rare, and I suspect it's at least partly because of\nthe success of Matt Corallo's high speed bitcoin relay network. Similar\ndefenses can apply here.\n\n- egs\n\n\n\nOn Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath <bob at mcelrath.org> wrote:\n\n> So it seems to me that all I need to do is figure out who the current\n> leader is,\n> and DDoS him off the network to shut Bitcoin-NG down.\n>\n> This is a significant advantage to bitcoin's ex-post-facto blocks: no one\n> knows\n> where the next one will come from.  The only way to shut the network down\n> is to\n> shut all nodes down.\n>\n> Emin G\u00fcn Sirer via bitcoin-dev [bitcoin-dev at lists.linuxfoundation.org]\n> wrote:\n> > Hi everyone,\n> >\n> > We just released the whitepaper describing Bitcoin-NG, a new technique\n> for\n> > addressing some of the scalability challenges faced by Bitcoin.\n> Surprisingly,\n> > Bitcoin-NG can simultaneously increase throughput while reducing\n> latency, and\n> > do so without impacting Bitcoin's open architecture or changing its trust\n> > model. This post illustrates the core technique:\n> >      http://hackingdistributed.com/2015/10/14/bitcoin-ng/\n> > while the whitepaper has all the nitty gritty details:\n> >      http://arxiv.org/abs/1510.02037\n> >\n> > Fitting NG on top of the current Bitcoin blockchain is future work that\n> we\n> > think is quite possible. NG is compatible with both Bitcoin as is, as\n> well as\n> > Blockstream-like sidechains, and we currently are not planning to compete\n> > commercially with either technology -- we see NG as being complementary\n> to both\n> > efforts. This is pure science, published and shared with the community to\n> > advance the state of blockchains and to help them reach throughputs and\n> > latencies required of cutting edge fintech applications. Perhaps it can\n> be\n> > adopted, or perhaps it can provide the spark of inspiration for someone\n> else to\n> > come up with even better solutions.\n> >\n> > We would be delighted to hear your feedback.\n> > - Ittay Eyal and E. G\u00fcn Sirer.\n> >\n> > !DSPAM:561e98cd301391127216946!\n>\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n> > !DSPAM:561e98cd301391127216946!\n>\n> --\n> Cheers, Bob McElrath\n>\n> \"For every complex problem, there is a solution that is simple, neat, and\n> wrong.\"\n>     -- H. L. Mencken\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/4aef9442/attachment.html>"
            },
            {
                "author": "odinn",
                "date": "2015-10-14T22:21:19",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nThis (Bitcoin-NG in concept) could be done as a (issue and pull\nrequest process) to Bitcoin Core itself, amirite?  It seems like it\nwould provide an interesting issue to open and have healthy discussion\non both mailing list and github, adding the caveat that it would be at\nthe user's option.  Thus if something like Bitcoin-NG did come to be\nit would be something more like a feature that the user could activate\n/ deactivate from within Core.  I assume it would be default off, but\nwith the option to utilize.  Code would thus be available to others as\nwell.  I am not saying yea or nay on it, just that it seems like this\ncould be done.\n\nSome notes:\n\nOnce a node generates a key block it becomes the leader.  As a leader,\nthe node is allowed to generate  microblocks  at  a  set  rate\nsmaller  than  a  prede\fned  maximum.  A  microblock in Bitcoin-NG\ncontains  ledger  entries  and  a  header.   The  header  contains\nthe  reference  to the  previous  block,  the  current  GMT  time,  a\n cryptographic  hash  of  its  ledger  entries,  and  a cryptographic\n signature  of  the  header.   The  signature  uses  the  private  key\n that  matches  the public key in the latest key block in the chain.\nFor a microblock to be valid, all its entries must be valid according\nto the specification of the state machine, and the signature has to be\nvalid.  However, the microblocks, it is said, don't affect the weight\nof the chain, because they do not contain proof of work.  It is\nassumed by the authors of this model that this situation is critical\nfor maintaining incentives here.\n\nThe questions that then begin to emerge to me are how is this\ninformation managed and protected?  The headers, thus containing\nreference(s) to previous block(s), current GMT time(s), cryptographic\nhash(es) of ledger entries, and cryptographic signature(s) of the\nheaders, so forth, and other information.  Can the Bitcoin-NG scheme\nbe designed or implemented in a manner which supports Stealth sends,\nConfidential Transactions, or similar privacy measures?  Or is this\nsomething which cannot be answered at this time?\n\nEmin G\u00fcn Sirer via bitcoin-dev:\n>> So it seems to me that all I need to do is figure out who the\n>> current\n> leader is,\n>> and DDoS him off the network to shut Bitcoin-NG down.\n> \n> Good point. If NG is layered on top of Bitcoin, we'd retain all of\n> Bitcoin as is. This would confer all the benefits of Bitcoin's\n> retrospective blocks, as well as add the ability to mint\n> microblocks with low latency in between. And despite the phrase\n> \"the leader,\" the actual leader in NG is a key, not a specific\n> node. That makes it possible to deter DDoS attacks by dynamically\n> migrating where in the network the leader is operating in response\n> to an attack. Finally, DDoS attacks against miners are already \n> possible, but they seem rare, and I suspect it's at least partly\n> because of the success of Matt Corallo's high speed bitcoin relay\n> network. Similar defenses can apply here.\n> \n> - egs\n> \n> \n> \n> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath <bob at mcelrath.org>\n> wrote:\n> \n>> So it seems to me that all I need to do is figure out who the\n>> current leader is, and DDoS him off the network to shut\n>> Bitcoin-NG down.\n>> \n>> This is a significant advantage to bitcoin's ex-post-facto\n>> blocks: no one knows where the next one will come from.  The only\n>> way to shut the network down is to shut all nodes down.\n>> \n>> Emin G\u00fcn Sirer via bitcoin-dev\n>> [bitcoin-dev at lists.linuxfoundation.org] wrote:\n>>> Hi everyone,\n>>> \n>>> We just released the whitepaper describing Bitcoin-NG, a new\n>>> technique\n>> for\n>>> addressing some of the scalability challenges faced by\n>>> Bitcoin.\n>> Surprisingly,\n>>> Bitcoin-NG can simultaneously increase throughput while\n>>> reducing\n>> latency, and\n>>> do so without impacting Bitcoin's open architecture or changing\n>>> its trust model. This post illustrates the core technique: \n>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/ while the\n>>> whitepaper has all the nitty gritty details: \n>>> http://arxiv.org/abs/1510.02037\n>>> \n>>> Fitting NG on top of the current Bitcoin blockchain is future\n>>> work that\n>> we\n>>> think is quite possible. NG is compatible with both Bitcoin as\n>>> is, as\n>> well as\n>>> Blockstream-like sidechains, and we currently are not planning\n>>> to compete commercially with either technology -- we see NG as\n>>> being complementary\n>> to both\n>>> efforts. This is pure science, published and shared with the\n>>> community to advance the state of blockchains and to help them\n>>> reach throughputs and latencies required of cutting edge\n>>> fintech applications. Perhaps it can\n>> be\n>>> adopted, or perhaps it can provide the spark of inspiration for\n>>> someone\n>> else to\n>>> come up with even better solutions.\n>>> \n>>> We would be delighted to hear your feedback. - Ittay Eyal and\n>>> E. G\u00fcn Sirer.\n>>> \n>>> !DSPAM:561e98cd301391127216946!\n>> \n>>> _______________________________________________ bitcoin-dev\n>>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>> \n>>> \n>>> !DSPAM:561e98cd301391127216946!\n>> \n>> -- Cheers, Bob McElrath\n>> \n>> \"For every complex problem, there is a solution that is simple,\n>> neat, and wrong.\" -- H. L. Mencken\n>> \n>> \n> \n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWHtVfAAoJEGxwq/inSG8C85kH/2T07oj/JM+bQcgy2kw9rtUa\nXHkMNn86kVvtaniSKQ2j+SO9q8HkUI9Rv0Pz+qbX1CyAm6Z1FTCtDKornCnxx7FW\nAJyZQSm5n40LUBIc3o2NBJvXKySTO2jpxluw0HAU8BQHSgFWwj1+vocqObDYxRCd\nYDlhGd2ITmF55TlR+9seWqRyW+gABUoS+SaxM2yZaqWFlUGyOhYCJYpIo1nfWCZi\n1F7/j0E92zu5kS5JJuRE91A4Si0LeTQPtPqXMeVm/UicdQB1a/aI0mzp6VRdm3Bo\ngE79r1sKFFgpbQcz68OzPAL3RFTm1Q/C5jcqdy6cQjgp9em/v4uOCS3TKLWlVNQ=\n=Einy\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Matt Corallo",
                "date": "2015-10-15T01:59:24",
                "message_text_only": "Huh? No... This is not a Bitcoin Core issue, it is a Bitcoin protocol one and should be discussed here, not on github.\nI really appreciate Ittay and Emin's efforts in this space and their willingness to work with the Bitcoin community on it! It seems it still needs some tuning, but seems like if the pool-mining issues were resolved it could make block relay times irrelevant, at least.\n\nMatt\n\nOn October 14, 2015 3:21:19 PM PDT, odinn via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>-----BEGIN PGP SIGNED MESSAGE-----\n>Hash: SHA512\n>\n>This (Bitcoin-NG in concept) could be done as a (issue and pull\n>request process) to Bitcoin Core itself, amirite?  It seems like it\n>would provide an interesting issue to open and have healthy discussion\n>on both mailing list and github, adding the caveat that it would be at\n>the user's option.  Thus if something like Bitcoin-NG did come to be\n>it would be something more like a feature that the user could activate\n>/ deactivate from within Core.  I assume it would be default off, but\n>with the option to utilize.  Code would thus be available to others as\n>well.  I am not saying yea or nay on it, just that it seems like this\n>could be done.\n>\n>Some notes:\n>\n>Once a node generates a key block it becomes the leader.  As a leader,\n>the node is allowed to generate  microblocks  at  a  set  rate\n>smaller  than  a  prede\f>ned  maximum.  A  microblock in Bitcoin-NG\n>contains  ledger  entries  and  a  header.   The  header  contains\n>the  reference  to the  previous  block,  the  current  GMT  time,  a\n> cryptographic  hash  of  its  ledger  entries,  and  a cryptographic\n> signature  of  the  header.   The  signature  uses  the  private  key\n> that  matches  the public key in the latest key block in the chain.\n>For a microblock to be valid, all its entries must be valid according\n>to the specification of the state machine, and the signature has to be\n>valid.  However, the microblocks, it is said, don't affect the weight\n>of the chain, because they do not contain proof of work.  It is\n>assumed by the authors of this model that this situation is critical\n>for maintaining incentives here.\n>\n>The questions that then begin to emerge to me are how is this\n>information managed and protected?  The headers, thus containing\n>reference(s) to previous block(s), current GMT time(s), cryptographic\n>hash(es) of ledger entries, and cryptographic signature(s) of the\n>headers, so forth, and other information.  Can the Bitcoin-NG scheme\n>be designed or implemented in a manner which supports Stealth sends,\n>Confidential Transactions, or similar privacy measures?  Or is this\n>something which cannot be answered at this time?\n>\n>Emin G\u00fcn Sirer via bitcoin-dev:\n>>> So it seems to me that all I need to do is figure out who the\n>>> current\n>> leader is,\n>>> and DDoS him off the network to shut Bitcoin-NG down.\n>> \n>> Good point. If NG is layered on top of Bitcoin, we'd retain all of\n>> Bitcoin as is. This would confer all the benefits of Bitcoin's\n>> retrospective blocks, as well as add the ability to mint\n>> microblocks with low latency in between. And despite the phrase\n>> \"the leader,\" the actual leader in NG is a key, not a specific\n>> node. That makes it possible to deter DDoS attacks by dynamically\n>> migrating where in the network the leader is operating in response\n>> to an attack. Finally, DDoS attacks against miners are already \n>> possible, but they seem rare, and I suspect it's at least partly\n>> because of the success of Matt Corallo's high speed bitcoin relay\n>> network. Similar defenses can apply here.\n>> \n>> - egs\n>> \n>> \n>> \n>> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath <bob at mcelrath.org>\n>> wrote:\n>> \n>>> So it seems to me that all I need to do is figure out who the\n>>> current leader is, and DDoS him off the network to shut\n>>> Bitcoin-NG down.\n>>> \n>>> This is a significant advantage to bitcoin's ex-post-facto\n>>> blocks: no one knows where the next one will come from.  The only\n>>> way to shut the network down is to shut all nodes down.\n>>> \n>>> Emin G\u00fcn Sirer via bitcoin-dev\n>>> [bitcoin-dev at lists.linuxfoundation.org] wrote:\n>>>> Hi everyone,\n>>>> \n>>>> We just released the whitepaper describing Bitcoin-NG, a new\n>>>> technique\n>>> for\n>>>> addressing some of the scalability challenges faced by\n>>>> Bitcoin.\n>>> Surprisingly,\n>>>> Bitcoin-NG can simultaneously increase throughput while\n>>>> reducing\n>>> latency, and\n>>>> do so without impacting Bitcoin's open architecture or changing\n>>>> its trust model. This post illustrates the core technique: \n>>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/ while the\n>>>> whitepaper has all the nitty gritty details: \n>>>> http://arxiv.org/abs/1510.02037\n>>>> \n>>>> Fitting NG on top of the current Bitcoin blockchain is future\n>>>> work that\n>>> we\n>>>> think is quite possible. NG is compatible with both Bitcoin as\n>>>> is, as\n>>> well as\n>>>> Blockstream-like sidechains, and we currently are not planning\n>>>> to compete commercially with either technology -- we see NG as\n>>>> being complementary\n>>> to both\n>>>> efforts. This is pure science, published and shared with the\n>>>> community to advance the state of blockchains and to help them\n>>>> reach throughputs and latencies required of cutting edge\n>>>> fintech applications. Perhaps it can\n>>> be\n>>>> adopted, or perhaps it can provide the spark of inspiration for\n>>>> someone\n>>> else to\n>>>> come up with even better solutions.\n>>>> \n>>>> We would be delighted to hear your feedback. - Ittay Eyal and\n>>>> E. G\u00fcn Sirer.\n>>>> \n>>>> !DSPAM:561e98cd301391127216946!\n>>> \n>>>> _______________________________________________ bitcoin-dev\n>>>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>> \n>>>> \n>>>> !DSPAM:561e98cd301391127216946!\n>>> \n>>> -- Cheers, Bob McElrath\n>>> \n>>> \"For every complex problem, there is a solution that is simple,\n>>> neat, and wrong.\" -- H. L. Mencken\n>>> \n>>> \n>> \n>> \n>> \n>> _______________________________________________ bitcoin-dev mailing\n>> list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>> \n>\n>- -- \n>http://abis.io ~\n>\"a protocol concept to enable decentralization\n>and expansion of a giving economy, and a new social good\"\n>https://keybase.io/odinn\n>-----BEGIN PGP SIGNATURE-----\n>\n>iQEcBAEBCgAGBQJWHtVfAAoJEGxwq/inSG8C85kH/2T07oj/JM+bQcgy2kw9rtUa\n>XHkMNn86kVvtaniSKQ2j+SO9q8HkUI9Rv0Pz+qbX1CyAm6Z1FTCtDKornCnxx7FW\n>AJyZQSm5n40LUBIc3o2NBJvXKySTO2jpxluw0HAU8BQHSgFWwj1+vocqObDYxRCd\n>YDlhGd2ITmF55TlR+9seWqRyW+gABUoS+SaxM2yZaqWFlUGyOhYCJYpIo1nfWCZi\n>1F7/j0E92zu5kS5JJuRE91A4Si0LeTQPtPqXMeVm/UicdQB1a/aI0mzp6VRdm3Bo\n>gE79r1sKFFgpbQcz68OzPAL3RFTm1Q/C5jcqdy6cQjgp9em/v4uOCS3TKLWlVNQ=\n>=Einy\n>-----END PGP SIGNATURE-----\n>_______________________________________________\n>bitcoin-dev mailing list\n>bitcoin-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "odinn",
                "date": "2015-10-15T08:48:18",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nSo, there could not be, for example, a user decision to activate it?\n(versus not activate it)?  I'm wondering if something about this can\nbe boiled down to allowing the user to make a choice on the matter\n(turn it on and off).  In Bitcoin-NG, the protocol as follows (as\ndescribed in a general overview of it): every 10 minutes, NG elects a\n'leader,' who then vets future transactions as soon as they happen. NG\napproach supposedly can run as fast as the network will allow.\n\nIf this is the case, and if NG functions without major hiccup,\nshouldn't a user (of Core, for example) be able to be given the option\nto choose between:\n\n(a) being limited by the blocksize and block interval, or\n(b) running out as fast as the network will allow (NG)?\n\nThe other questions I had pertained to privacy.  How would this scheme\naffect users who would be trying to do things like stealth or\nconfidential transactions?\n\nMatt Corallo:\n> Huh? No... This is not a Bitcoin Core issue, it is a Bitcoin\n> protocol one and should be discussed here, not on github. I really\n> appreciate Ittay and Emin's efforts in this space and their\n> willingness to work with the Bitcoin community on it! It seems it\n> still needs some tuning, but seems like if the pool-mining issues\n> were resolved it could make block relay times irrelevant, at\n> least.\n> \n> Matt\n> \n> On October 14, 2015 3:21:19 PM PDT, odinn via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote: This (Bitcoin-NG in\n> concept) could be done as a (issue and pull request process) to\n> Bitcoin Core itself, amirite?  It seems like it would provide an\n> interesting issue to open and have healthy discussion on both\n> mailing list and github, adding the caveat that it would be at the\n> user's option.  Thus if something like Bitcoin-NG did come to be it\n> would be something more like a feature that the user could\n> activate / deactivate from within Core.  I assume it would be\n> default off, but with the option to utilize.  Code would thus be\n> available to others as well.  I am not saying yea or nay on it,\n> just that it seems like this could be done.\n> \n> Some notes:\n> \n> Once a node generates a key block it becomes the leader.  As a\n> leader, the node is allowed to generate  microblocks  at  a  set\n> rate smaller  than  a  prede\f>ned  maximum.  A  microblock in\n> Bitcoin-NG contains  ledger  entries  and  a  header.   The  header\n> contains the  reference  to the  previous  block,  the  current\n> GMT  time,  a cryptographic  hash  of  its  ledger  entries,  and\n> a cryptographic signature  of  the  header.   The  signature  uses\n> the  private  key that  matches  the public key in the latest key\n> block in the chain. For a microblock to be valid, all its entries\n> must be valid according to the specification of the state machine,\n> and the signature has to be valid.  However, the microblocks, it is\n> said, don't affect the weight of the chain, because they do not\n> contain proof of work.  It is assumed by the authors of this model\n> that this situation is critical for maintaining incentives here.\n> \n> The questions that then begin to emerge to me are how is this \n> information managed and protected?  The headers, thus containing \n> reference(s) to previous block(s), current GMT time(s),\n> cryptographic hash(es) of ledger entries, and cryptographic\n> signature(s) of the headers, so forth, and other information.  Can\n> the Bitcoin-NG scheme be designed or implemented in a manner which\n> supports Stealth sends, Confidential Transactions, or similar\n> privacy measures?  Or is this something which cannot be answered at\n> this time?\n> \n> Emin G\u00fcn Sirer via bitcoin-dev:\n>>>>> So it seems to me that all I need to do is figure out who\n>>>>> the current\n>>>> leader is,\n>>>>> and DDoS him off the network to shut Bitcoin-NG down.\n>>>> \n>>>> Good point. If NG is layered on top of Bitcoin, we'd retain\n>>>> all of Bitcoin as is. This would confer all the benefits of\n>>>> Bitcoin's retrospective blocks, as well as add the ability to\n>>>> mint microblocks with low latency in between. And despite the\n>>>> phrase \"the leader,\" the actual leader in NG is a key, not a\n>>>> specific node. That makes it possible to deter DDoS attacks\n>>>> by dynamically migrating where in the network the leader is\n>>>> operating in response to an attack. Finally, DDoS attacks\n>>>> against miners are already possible, but they seem rare, and\n>>>> I suspect it's at least partly because of the success of Matt\n>>>> Corallo's high speed bitcoin relay network. Similar defenses\n>>>> can apply here.\n>>>> \n>>>> - egs\n>>>> \n>>>> \n>>>> \n>>>> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath\n>>>> <bob at mcelrath.org> wrote:\n>>>> \n>>>>> So it seems to me that all I need to do is figure out who\n>>>>> the current leader is, and DDoS him off the network to\n>>>>> shut Bitcoin-NG down.\n>>>>> \n>>>>> This is a significant advantage to bitcoin's ex-post-facto \n>>>>> blocks: no one knows where the next one will come from.\n>>>>> The only way to shut the network down is to shut all nodes\n>>>>> down.\n>>>>> \n>>>>> Emin G\u00fcn Sirer via bitcoin-dev \n>>>>> [bitcoin-dev at lists.linuxfoundation.org] wrote:\n>>>>>> Hi everyone,\n>>>>>> \n>>>>>> We just released the whitepaper describing Bitcoin-NG, a\n>>>>>> new technique\n>>>>> for\n>>>>>> addressing some of the scalability challenges faced by \n>>>>>> Bitcoin.\n>>>>> Surprisingly,\n>>>>>> Bitcoin-NG can simultaneously increase throughput while \n>>>>>> reducing\n>>>>> latency, and\n>>>>>> do so without impacting Bitcoin's open architecture or\n>>>>>> changing its trust model. This post illustrates the core\n>>>>>> technique: \n>>>>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/\n>>>>>> while the whitepaper has all the nitty gritty details: \n>>>>>> http://arxiv.org/abs/1510.02037\n>>>>>> \n>>>>>> Fitting NG on top of the current Bitcoin blockchain is\n>>>>>> future work that\n>>>>> we\n>>>>>> think is quite possible. NG is compatible with both\n>>>>>> Bitcoin as is, as\n>>>>> well as\n>>>>>> Blockstream-like sidechains, and we currently are not\n>>>>>> planning to compete commercially with either technology\n>>>>>> -- we see NG as being complementary\n>>>>> to both\n>>>>>> efforts. This is pure science, published and shared with\n>>>>>> the community to advance the state of blockchains and to\n>>>>>> help them reach throughputs and latencies required of\n>>>>>> cutting edge fintech applications. Perhaps it can\n>>>>> be\n>>>>>> adopted, or perhaps it can provide the spark of\n>>>>>> inspiration for someone\n>>>>> else to\n>>>>>> come up with even better solutions.\n>>>>>> \n>>>>>> We would be delighted to hear your feedback. - Ittay Eyal\n>>>>>> and E. G\u00fcn Sirer.\n>>>>>> \n>>>>>> !DSPAM:561e98cd301391127216946!\n>>>>> \n>>>>>> _______________________________________________\n>>>>>> bitcoin-dev mailing list\n>>>>>> bitcoin-dev at lists.linuxfoundation.org \n>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>>\n>>>>>>\n>>>>>>\n>>>>>> \n!DSPAM:561e98cd301391127216946!\n>>>>> \n>>>>> -- Cheers, Bob McElrath\n>>>>> \n>>>>> \"For every complex problem, there is a solution that is\n>>>>> simple, neat, and wrong.\" -- H. L. Mencken\n>>>>> \n>>>>> \n>>>> \n>>>> \n>>>> \n>>>> _______________________________________________ bitcoin-dev\n>>>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>\n>>>> \n>> _______________________________________________ bitcoin-dev\n>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWH2hSAAoJEGxwq/inSG8CztwH/3kaBDCpci0WMjw9gEUybI+R\n320i/cbPHHFO0eEJgWOK0mpYXYiEyoZULRjvHBjTNTS7wUVNmKsnmZDx1n9X9OCS\nhQc9yoSZejoulA0f/Sys++N5ku9KPYN9EFnHpmgTtV7OW7aD8L66PCtiAOhNy7WD\nT75eXjQvhWCCId1C3lvIzB6X1qTdK1gGMjNHzv49FP6RJDXa7RB7ceKrHwrXQ8J/\nkbQvwOjfmGbfDZb0tSvlNKT05s4CWW6TzsUdkg5QfMs16r6b1TAz55LLj7bonTNG\nmuFhywfBo0oLG0NbTTQTW0pmq9TF8iy8HV/4Z48Yu8bwrZ7UA1+Q7ghV3AFPHyE=\n=x4Ek\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Ittay",
                "date": "2015-10-15T15:12:23",
                "message_text_only": "Hi Odinn,\n\nI guess to answer we should separate pure-NG from\nthe hypothetical overlay-NG that runs on top of Bitcoin.\nFor pure NG one still has to set a transaction bandwidth\nlimit due to bandwidth and storage limitations of\nthe individual clients. This rate can be arbitrarily high\nwith NG without compromising protocol security.\n\nWith overlay NG you cannot run above Bitcoin's\nbandwidth because all clients must agree on the ledger,\nso different clients cannot run at different rates. You\ncould do two things:\n1. Significantly reduce observed latency (time to first\nconfirmation). Users get better confidence as more\nminers adopt NG.\n2. Increase the bandwidth once everyone is on\nboard.\n\nAs for privacy - I don't see why NG would change things.\nSuch privacy schemes are only concerned with the\ntransaction DAG. NG does not touch this structure. Am\nI missing something?\n\nThanks,\nIttay\n\n\nOn Thu, Oct 15, 2015 at 4:48 AM, odinn <odinn.cyberguerrilla at riseup.net>\nwrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n> So, there could not be, for example, a user decision to activate it?\n> (versus not activate it)?  I'm wondering if something about this can\n> be boiled down to allowing the user to make a choice on the matter\n> (turn it on and off).  In Bitcoin-NG, the protocol as follows (as\n> described in a general overview of it): every 10 minutes, NG elects a\n> 'leader,' who then vets future transactions as soon as they happen. NG\n> approach supposedly can run as fast as the network will allow.\n>\n> If this is the case, and if NG functions without major hiccup,\n> shouldn't a user (of Core, for example) be able to be given the option\n> to choose between:\n>\n> (a) being limited by the blocksize and block interval, or\n> (b) running out as fast as the network will allow (NG)?\n>\n> The other questions I had pertained to privacy.  How would this scheme\n> affect users who would be trying to do things like stealth or\n> confidential transactions?\n>\n> Matt Corallo:\n> > Huh? No... This is not a Bitcoin Core issue, it is a Bitcoin\n> > protocol one and should be discussed here, not on github. I really\n> > appreciate Ittay and Emin's efforts in this space and their\n> > willingness to work with the Bitcoin community on it! It seems it\n> > still needs some tuning, but seems like if the pool-mining issues\n> > were resolved it could make block relay times irrelevant, at\n> > least.\n> >\n> > Matt\n> >\n> > On October 14, 2015 3:21:19 PM PDT, odinn via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote: This (Bitcoin-NG in\n> > concept) could be done as a (issue and pull request process) to\n> > Bitcoin Core itself, amirite?  It seems like it would provide an\n> > interesting issue to open and have healthy discussion on both\n> > mailing list and github, adding the caveat that it would be at the\n> > user's option.  Thus if something like Bitcoin-NG did come to be it\n> > would be something more like a feature that the user could\n> > activate / deactivate from within Core.  I assume it would be\n> > default off, but with the option to utilize.  Code would thus be\n> > available to others as well.  I am not saying yea or nay on it,\n> > just that it seems like this could be done.\n> >\n> > Some notes:\n> >\n> > Once a node generates a key block it becomes the leader.  As a\n> > leader, the node is allowed to generate  microblocks  at  a  set\n> > rate smaller  than  a  prede >ned  maximum.  A  microblock in\n> > Bitcoin-NG contains  ledger  entries  and  a  header.   The  header\n> > contains the  reference  to the  previous  block,  the  current\n> > GMT  time,  a cryptographic  hash  of  its  ledger  entries,  and\n> > a cryptographic signature  of  the  header.   The  signature  uses\n> > the  private  key that  matches  the public key in the latest key\n> > block in the chain. For a microblock to be valid, all its entries\n> > must be valid according to the specification of the state machine,\n> > and the signature has to be valid.  However, the microblocks, it is\n> > said, don't affect the weight of the chain, because they do not\n> > contain proof of work.  It is assumed by the authors of this model\n> > that this situation is critical for maintaining incentives here.\n> >\n> > The questions that then begin to emerge to me are how is this\n> > information managed and protected?  The headers, thus containing\n> > reference(s) to previous block(s), current GMT time(s),\n> > cryptographic hash(es) of ledger entries, and cryptographic\n> > signature(s) of the headers, so forth, and other information.  Can\n> > the Bitcoin-NG scheme be designed or implemented in a manner which\n> > supports Stealth sends, Confidential Transactions, or similar\n> > privacy measures?  Or is this something which cannot be answered at\n> > this time?\n> >\n> > Emin G\u00fcn Sirer via bitcoin-dev:\n> >>>>> So it seems to me that all I need to do is figure out who\n> >>>>> the current\n> >>>> leader is,\n> >>>>> and DDoS him off the network to shut Bitcoin-NG down.\n> >>>>\n> >>>> Good point. If NG is layered on top of Bitcoin, we'd retain\n> >>>> all of Bitcoin as is. This would confer all the benefits of\n> >>>> Bitcoin's retrospective blocks, as well as add the ability to\n> >>>> mint microblocks with low latency in between. And despite the\n> >>>> phrase \"the leader,\" the actual leader in NG is a key, not a\n> >>>> specific node. That makes it possible to deter DDoS attacks\n> >>>> by dynamically migrating where in the network the leader is\n> >>>> operating in response to an attack. Finally, DDoS attacks\n> >>>> against miners are already possible, but they seem rare, and\n> >>>> I suspect it's at least partly because of the success of Matt\n> >>>> Corallo's high speed bitcoin relay network. Similar defenses\n> >>>> can apply here.\n> >>>>\n> >>>> - egs\n> >>>>\n> >>>>\n> >>>>\n> >>>> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath\n> >>>> <bob at mcelrath.org> wrote:\n> >>>>\n> >>>>> So it seems to me that all I need to do is figure out who\n> >>>>> the current leader is, and DDoS him off the network to\n> >>>>> shut Bitcoin-NG down.\n> >>>>>\n> >>>>> This is a significant advantage to bitcoin's ex-post-facto\n> >>>>> blocks: no one knows where the next one will come from.\n> >>>>> The only way to shut the network down is to shut all nodes\n> >>>>> down.\n> >>>>>\n> >>>>> Emin G\u00fcn Sirer via bitcoin-dev\n> >>>>> [bitcoin-dev at lists.linuxfoundation.org] wrote:\n> >>>>>> Hi everyone,\n> >>>>>>\n> >>>>>> We just released the whitepaper describing Bitcoin-NG, a\n> >>>>>> new technique\n> >>>>> for\n> >>>>>> addressing some of the scalability challenges faced by\n> >>>>>> Bitcoin.\n> >>>>> Surprisingly,\n> >>>>>> Bitcoin-NG can simultaneously increase throughput while\n> >>>>>> reducing\n> >>>>> latency, and\n> >>>>>> do so without impacting Bitcoin's open architecture or\n> >>>>>> changing its trust model. This post illustrates the core\n> >>>>>> technique:\n> >>>>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/\n> >>>>>> while the whitepaper has all the nitty gritty details:\n> >>>>>> http://arxiv.org/abs/1510.02037\n> >>>>>>\n> >>>>>> Fitting NG on top of the current Bitcoin blockchain is\n> >>>>>> future work that\n> >>>>> we\n> >>>>>> think is quite possible. NG is compatible with both\n> >>>>>> Bitcoin as is, as\n> >>>>> well as\n> >>>>>> Blockstream-like sidechains, and we currently are not\n> >>>>>> planning to compete commercially with either technology\n> >>>>>> -- we see NG as being complementary\n> >>>>> to both\n> >>>>>> efforts. This is pure science, published and shared with\n> >>>>>> the community to advance the state of blockchains and to\n> >>>>>> help them reach throughputs and latencies required of\n> >>>>>> cutting edge fintech applications. Perhaps it can\n> >>>>> be\n> >>>>>> adopted, or perhaps it can provide the spark of\n> >>>>>> inspiration for someone\n> >>>>> else to\n> >>>>>> come up with even better solutions.\n> >>>>>>\n> >>>>>> We would be delighted to hear your feedback. - Ittay Eyal\n> >>>>>> and E. G\u00fcn Sirer.\n> >>>>>>\n> >>>>>> !DSPAM:561e98cd301391127216946!\n> >>>>>\n> >>>>>> _______________________________________________\n> >>>>>> bitcoin-dev mailing list\n> >>>>>> bitcoin-dev at lists.linuxfoundation.org\n> >>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>>>>>\n> >>>>>>\n> >>>>>>\n> >>>>>>\n> !DSPAM:561e98cd301391127216946!\n> >>>>>\n> >>>>> -- Cheers, Bob McElrath\n> >>>>>\n> >>>>> \"For every complex problem, there is a solution that is\n> >>>>> simple, neat, and wrong.\" -- H. L. Mencken\n> >>>>>\n> >>>>>\n> >>>>\n> >>>>\n> >>>>\n> >>>> _______________________________________________ bitcoin-dev\n> >>>> mailing list bitcoin-dev at lists.linuxfoundation.org\n> >>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >>>>\n> >\n> >>>>\n> >> _______________________________________________ bitcoin-dev\n> >> mailing list bitcoin-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >\n> >\n>\n> - --\n> http://abis.io ~\n> \"a protocol concept to enable decentralization\n> and expansion of a giving economy, and a new social good\"\n> https://keybase.io/odinn\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQEcBAEBCgAGBQJWH2hSAAoJEGxwq/inSG8CztwH/3kaBDCpci0WMjw9gEUybI+R\n> 320i/cbPHHFO0eEJgWOK0mpYXYiEyoZULRjvHBjTNTS7wUVNmKsnmZDx1n9X9OCS\n> hQc9yoSZejoulA0f/Sys++N5ku9KPYN9EFnHpmgTtV7OW7aD8L66PCtiAOhNy7WD\n> T75eXjQvhWCCId1C3lvIzB6X1qTdK1gGMjNHzv49FP6RJDXa7RB7ceKrHwrXQ8J/\n> kbQvwOjfmGbfDZb0tSvlNKT05s4CWW6TzsUdkg5QfMs16r6b1TAz55LLj7bonTNG\n> muFhywfBo0oLG0NbTTQTW0pmq9TF8iy8HV/4Z48Yu8bwrZ7UA1+Q7ghV3AFPHyE=\n> =x4Ek\n> -----END PGP SIGNATURE-----\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151015/d5d9c001/attachment-0001.html>"
            },
            {
                "author": "odinn",
                "date": "2015-10-15T18:43:43",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nHello, and thanks for the reply.  I don't think you are missing\nanything, I'll continue to observe this thread for further details and\ndevelopments on NG generally, security, & privacy.\n\nIttay:\n> Hi Odinn,\n> \n> I guess to answer we should separate pure-NG from the hypothetical\n> overlay-NG that runs on top of Bitcoin. For pure NG one still has\n> to set a transaction bandwidth limit due to bandwidth and storage\n> limitations of the individual clients. This rate can be arbitrarily\n> high with NG without compromising protocol security.\n> \n> With overlay NG you cannot run above Bitcoin's bandwidth because\n> all clients must agree on the ledger, so different clients cannot\n> run at different rates. You could do two things: 1. Significantly\n> reduce observed latency (time to first confirmation). Users get\n> better confidence as more miners adopt NG. 2. Increase the\n> bandwidth once everyone is on board.\n> \n> As for privacy - I don't see why NG would change things. Such\n> privacy schemes are only concerned with the transaction DAG. NG\n> does not touch this structure. Am I missing something?\n> \n> Thanks, Ittay\n> \n> \n> On Thu, Oct 15, 2015 at 4:48 AM, odinn\n> <odinn.cyberguerrilla at riseup.net> wrote:\n> \n> So, there could not be, for example, a user decision to activate\n> it? (versus not activate it)?  I'm wondering if something about\n> this can be boiled down to allowing the user to make a choice on\n> the matter (turn it on and off).  In Bitcoin-NG, the protocol as\n> follows (as described in a general overview of it): every 10\n> minutes, NG elects a 'leader,' who then vets future transactions as\n> soon as they happen. NG approach supposedly can run as fast as the\n> network will allow.\n> \n> If this is the case, and if NG functions without major hiccup, \n> shouldn't a user (of Core, for example) be able to be given the\n> option to choose between:\n> \n> (a) being limited by the blocksize and block interval, or (b)\n> running out as fast as the network will allow (NG)?\n> \n> The other questions I had pertained to privacy.  How would this\n> scheme affect users who would be trying to do things like stealth\n> or confidential transactions?\n> \n> Matt Corallo:\n>>>> Huh? No... This is not a Bitcoin Core issue, it is a Bitcoin \n>>>> protocol one and should be discussed here, not on github. I\n>>>> really appreciate Ittay and Emin's efforts in this space and\n>>>> their willingness to work with the Bitcoin community on it!\n>>>> It seems it still needs some tuning, but seems like if the\n>>>> pool-mining issues were resolved it could make block relay\n>>>> times irrelevant, at least.\n>>>> \n>>>> Matt\n>>>> \n>>>> On October 14, 2015 3:21:19 PM PDT, odinn via bitcoin-dev \n>>>> <bitcoin-dev at lists.linuxfoundation.org> wrote: This\n>>>> (Bitcoin-NG in concept) could be done as a (issue and pull\n>>>> request process) to Bitcoin Core itself, amirite?  It seems\n>>>> like it would provide an interesting issue to open and have\n>>>> healthy discussion on both mailing list and github, adding\n>>>> the caveat that it would be at the user's option.  Thus if\n>>>> something like Bitcoin-NG did come to be it would be\n>>>> something more like a feature that the user could activate /\n>>>> deactivate from within Core.  I assume it would be default\n>>>> off, but with the option to utilize.  Code would thus be \n>>>> available to others as well.  I am not saying yea or nay on\n>>>> it, just that it seems like this could be done.\n>>>> \n>>>> Some notes:\n>>>> \n>>>> Once a node generates a key block it becomes the leader.  As\n>>>> a leader, the node is allowed to generate  microblocks  at  a\n>>>> set rate smaller  than  a  prede >ned  maximum.  A\n>>>> microblock in Bitcoin-NG contains  ledger  entries  and  a\n>>>> header.   The  header contains the  reference  to the\n>>>> previous  block,  the  current GMT  time,  a cryptographic\n>>>> hash  of  its  ledger  entries,  and a cryptographic\n>>>> signature  of  the  header.   The  signature  uses the\n>>>> private  key that  matches  the public key in the latest key \n>>>> block in the chain. For a microblock to be valid, all its\n>>>> entries must be valid according to the specification of the\n>>>> state machine, and the signature has to be valid.  However,\n>>>> the microblocks, it is said, don't affect the weight of the\n>>>> chain, because they do not contain proof of work.  It is\n>>>> assumed by the authors of this model that this situation is\n>>>> critical for maintaining incentives here.\n>>>> \n>>>> The questions that then begin to emerge to me are how is\n>>>> this information managed and protected?  The headers, thus\n>>>> containing reference(s) to previous block(s), current GMT\n>>>> time(s), cryptographic hash(es) of ledger entries, and\n>>>> cryptographic signature(s) of the headers, so forth, and\n>>>> other information.  Can the Bitcoin-NG scheme be designed or\n>>>> implemented in a manner which supports Stealth sends,\n>>>> Confidential Transactions, or similar privacy measures?  Or\n>>>> is this something which cannot be answered at this time?\n>>>> \n>>>> Emin G\u00fcn Sirer via bitcoin-dev:\n>>>>>>>> So it seems to me that all I need to do is figure out\n>>>>>>>> who the current\n>>>>>>> leader is,\n>>>>>>>> and DDoS him off the network to shut Bitcoin-NG\n>>>>>>>> down.\n>>>>>>> \n>>>>>>> Good point. If NG is layered on top of Bitcoin, we'd\n>>>>>>> retain all of Bitcoin as is. This would confer all the\n>>>>>>> benefits of Bitcoin's retrospective blocks, as well as\n>>>>>>> add the ability to mint microblocks with low latency in\n>>>>>>> between. And despite the phrase \"the leader,\" the\n>>>>>>> actual leader in NG is a key, not a specific node. That\n>>>>>>> makes it possible to deter DDoS attacks by dynamically\n>>>>>>> migrating where in the network the leader is operating\n>>>>>>> in response to an attack. Finally, DDoS attacks against\n>>>>>>> miners are already possible, but they seem rare, and I\n>>>>>>> suspect it's at least partly because of the success of\n>>>>>>> Matt Corallo's high speed bitcoin relay network.\n>>>>>>> Similar defenses can apply here.\n>>>>>>> \n>>>>>>> - egs\n>>>>>>> \n>>>>>>> \n>>>>>>> \n>>>>>>> On Wed, Oct 14, 2015 at 2:20 PM, Bob McElrath \n>>>>>>> <bob at mcelrath.org> wrote:\n>>>>>>> \n>>>>>>>> So it seems to me that all I need to do is figure out\n>>>>>>>> who the current leader is, and DDoS him off the\n>>>>>>>> network to shut Bitcoin-NG down.\n>>>>>>>> \n>>>>>>>> This is a significant advantage to bitcoin's\n>>>>>>>> ex-post-facto blocks: no one knows where the next one\n>>>>>>>> will come from. The only way to shut the network down\n>>>>>>>> is to shut all nodes down.\n>>>>>>>> \n>>>>>>>> Emin G\u00fcn Sirer via bitcoin-dev \n>>>>>>>> [bitcoin-dev at lists.linuxfoundation.org] wrote:\n>>>>>>>>> Hi everyone,\n>>>>>>>>> \n>>>>>>>>> We just released the whitepaper describing\n>>>>>>>>> Bitcoin-NG, a new technique\n>>>>>>>> for\n>>>>>>>>> addressing some of the scalability challenges faced\n>>>>>>>>> by Bitcoin.\n>>>>>>>> Surprisingly,\n>>>>>>>>> Bitcoin-NG can simultaneously increase throughput\n>>>>>>>>> while reducing\n>>>>>>>> latency, and\n>>>>>>>>> do so without impacting Bitcoin's open architecture\n>>>>>>>>> or changing its trust model. This post illustrates\n>>>>>>>>> the core technique: \n>>>>>>>>> http://hackingdistributed.com/2015/10/14/bitcoin-ng/\n>>>>>>>>>\n>>>>>>>>> \nwhile the whitepaper has all the nitty gritty details:\n>>>>>>>>> http://arxiv.org/abs/1510.02037\n>>>>>>>>> \n>>>>>>>>> Fitting NG on top of the current Bitcoin blockchain\n>>>>>>>>> is future work that\n>>>>>>>> we\n>>>>>>>>> think is quite possible. NG is compatible with\n>>>>>>>>> both Bitcoin as is, as\n>>>>>>>> well as\n>>>>>>>>> Blockstream-like sidechains, and we currently are\n>>>>>>>>> not planning to compete commercially with either\n>>>>>>>>> technology -- we see NG as being complementary\n>>>>>>>> to both\n>>>>>>>>> efforts. This is pure science, published and shared\n>>>>>>>>> with the community to advance the state of\n>>>>>>>>> blockchains and to help them reach throughputs and\n>>>>>>>>> latencies required of cutting edge fintech\n>>>>>>>>> applications. Perhaps it can\n>>>>>>>> be\n>>>>>>>>> adopted, or perhaps it can provide the spark of \n>>>>>>>>> inspiration for someone\n>>>>>>>> else to\n>>>>>>>>> come up with even better solutions.\n>>>>>>>>> \n>>>>>>>>> We would be delighted to hear your feedback. -\n>>>>>>>>> Ittay Eyal and E. G\u00fcn Sirer.\n>>>>>>>>> \n>>>>>>>>> !DSPAM:561e98cd301391127216946!\n>>>>>>>> \n>>>>>>>>> _______________________________________________ \n>>>>>>>>> bitcoin-dev mailing list \n>>>>>>>>> bitcoin-dev at lists.linuxfoundation.org \n>>>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>>\n>\n>>>>>>>>> \n!DSPAM:561e98cd301391127216946!\n>>>>>>>> \n>>>>>>>> -- Cheers, Bob McElrath\n>>>>>>>> \n>>>>>>>> \"For every complex problem, there is a solution that\n>>>>>>>> is simple, neat, and wrong.\" -- H. L. Mencken\n>>>>>>>> \n>>>>>>>> \n>>>>>>> \n>>>>>>> \n>>>>>>> \n>>>>>>> _______________________________________________\n>>>>>>> bitcoin-dev mailing list\n>>>>>>> bitcoin-dev at lists.linuxfoundation.org \n>>>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>>>>\n>>>>\n>>>>>>>\n>>>>>\n>>>>>>> \n_______________________________________________ bitcoin-dev\n>>>>> mailing list bitcoin-dev at lists.linuxfoundation.org \n>>>>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>>>\n>>>>\n>\n>>>>> \n>> \n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWH/PfAAoJEGxwq/inSG8COLkH/3k/ZlUT2yWNYYmlN8SeU9HW\nOqGW2akcHI1ObkUxW6Ljy9JCX2z34Py5c7BnpvBkiDRtAGC7bFpH1nHL5prCCxKS\nQ2tjZIuu5stWkyz55fOKZ64SVASitOK7+eGhfmN+L04L+bc9BJU/ifQlU+eTH+35\ncftjEFHuDClhy+P7zLPklBr62SZezPnr2kHxyV4pyGY132nKsYuB4gHAU6eI+ZeY\ndFBliXXbHrQMGWH414pXz3WzpA20CNUYWpV4iJydJmU9EEM4UOaQ7YjIXBubbu6z\nhDa0PYXiwvuM4VAnL7z29Q2FHbFMKmVPH01NffI6uhvpGMVZQ2cqwvhXhOS3aL8=\n=4AiZ\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-NG whitepaper.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bryan Bishop",
                "odinn",
                "Emin G\u00fcn Sirer",
                "Sergio Demian Lerner",
                "Matt Corallo",
                "Bob McElrath",
                "Ittay"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 65996
        }
    },
    {
        "title": "[bitcoin-dev] Proposed list moderation policy and conduct",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-10-15T00:02:21",
                "message_text_only": "Introduction\n-------------------\nThis mailing list, bitcoin-dev, aim to facilitate constructive discussion\nof issues related to technical development of the bitcoin protocol and the\nBitcoin Core reference implementation.  We can achieve this, in part, by\nbehaving well towards each other, so that the broadest diversity of\nparticipants - both amateur and professional, new and experienced - feel\nthat the lists are welcoming and useful.\n\nThis proposed policy helps maintain that environment by capturing the\nconduct we aspire to when we participate in discussions on bitcoin-dev.\n\nWe Strive To:\n-------------\n\n*Be friendly and patient*\n\n1. Many of us are volunteers, and so a sense of fun is part of why we do\nwhat we do. Be positive and engaging, rather than snarky.\n2. If someone asks for help it is because they need it. Politely suggest\nspecific documentation or more appropriate venues where appropriate. Avoid\naggressive or vague responses.\n\n*Be civil and considerate*\n\n1. Disagreement is no excuse for poor conduct or personal attacks. A\ncommunity where people feel uncomfortable is not a productive one.\n2. If you would not feel comfortable saying something to a co-worker or\nacquaintance, it is probably not appropriate on this list either.\n\n*Assume good faith*\n\n1. Remember that protocol & engineering questions are often very complex\nand difficult to assess. If you disagree, please do so politely, by\ndisputing logical errors and factual premises rather than by attacking\nindividuals.\n2. If something seems outrageous, check that you did not misinterpret it.\nAsk for clarification, rather than assuming the worst.\n3. For more, read https://en.wikipedia.org/wiki/Wikipedia:Assume_good_faith\n\n*Respect time and attention*\n\n1. List members are often busy people. As a result, we value concision and\nclarity. Emails that are brief and to the point take more time to write,\nbut are repaid many times over when other members of the list make the same\neffort.\n2. Conversations should remain focused and on-topic. If you must change the\ntopic, start a new thread by changing the topic line of your emails. Also,\navoid flooding the list with long threads by reading the entire thread\nfirst, instead of responding quickly to many emails in a short period of\ntime.\n3. New members are welcome, but should be careful to respect the time and\nenergy of long-time list members by doing research in FAQs and with search\nengines before asking questions.\n4. Off-topic threads will be directed to other venues.\n\n*Disclose potential conflicts*\n\n1. List discussions often involve interested parties. We expect\nparticipants to be aware when they are conflicted due to employment or\nother projects they are involved in, and disclose those interests to other\nproject members.\n2. When in doubt, over-disclose. Perceived conflicts of interest are\nimportant to address, so that the lists\u2019 decisions are credible even when\nunpopular, difficult or favorable to the interests of one group over\nanother.\n\n\n\nInterpretation\n--------------\n\nThis policy is not exhaustive or complete. It is not a rulebook; it serves\nto distill our common understanding of a collaborative, shared environment\nand goals. We expect it to be followed in spirit as much as in the letter.\n\nEnforcement\n-----------\n\nMost members of the bitcoin-dev community already comply with this policy,\nnot because of the existence of the policy, but because they have long\nexperience participating in open source communities where the conduct\ndescribed above is normal and expected. However, failure to observe the\ncode may be grounds for reprimand, probation, or removal from the lists.\n\nIf you have concerns about someone\u2019s conduct:\n\n* *Direct contact*: it is always appropriate to email a list member,\nmention that you think their behavior was out of line, and (if necessary)\npoint them to this document.\n\n* *On-list*: discussing conduct on-list, either as part of another message\nor as a standalone thread, is always acceptable. Note, though, that\napproaching the person directly can be better, as it tends to make them\nless defensive, and it respects the time of other list members, so you\nprobably want to try direct contact first.\n\n* *Moderators*: You can reach the list moderators through the addresses\nthey use for on-list communication.\n\n\nModerators\n----------\nThe selection of moderators is intended to be a mix from various projects\nand roles, and expressly intended to avoid cases where the set of\n(moderators) equals the set of (bitcoin core committers) or similar.\n\nTBD\nJeff Garzik\n[btcdrak?  Johnathan?   Others were listed in the IRC meeting, but the\nbitcoinstats site is down right here]\n\n\n\nFurther Context\n---------------\n\nOther resources, while not formally part of this code of conduct, can\nprovide useful context and guidance for good behavior.\n\n1. Chapter 6 of Producing OSS, by OSI board member Karl Fogel, describes\ncommon best practices for mailing list participation,\nparticularly [\u201cYou Are What You Write\u201d](\nhttp://producingoss.com/en/communications.html#you-are-what-you-write) and\n[\u201cAvoiding Common\nPitfalls\"](http://producingoss.com/en/common-pitfalls.html).\n2. [RFC 1855](https://www.ietf.org/rfc/rfc1855.txt), particularly section\n2.1.1 (\u201cUser Guidelines for mail\u201d), also provides useful\nguidelines for sending good emails.\n3. [The Ubuntu Code of Conduct](\nhttp://www.ubuntu.com/project/about-ubuntu/conduct) provides useful\nguidance for group leaders.\n\nThis policy was inspired by [the GNOME Code of Conduct](\nhttps://live.gnome.org/CodeOfConduct/), [the Mozilla Community Participation\nGuidelines](https://www.mozilla.org/about/policies/participation.html),\n[the Ubuntu Code of Conduct](\nhttp://www.ubuntu.com/project/about-ubuntu/conduct), and other codes listed\nat [the OpenHatch list of project codes of conduct](\nhttps://openhatch.org/wiki/Project_codes_of_conduct).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/585c3ab5/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-15T00:17:34",
                "message_text_only": "On Thursday, October 15, 2015 12:02:21 AM Jeff Garzik via bitcoin-dev wrote:\n> 2. If someone asks for help it is because they need it. Politely suggest\n> specific documentation or more appropriate venues where appropriate. Avoid\n> aggressive or vague responses.\n\nThis could get noisy. Clarification that only *development* help is \nappropriate for the list would improve it.\n\n> 2. Conversations should remain focused and on-topic. If you must change the\n> topic, start a new thread by changing the topic line of your emails.\n\nProbably should note that entirely new threads should be new messages, *not* \nmerely a reply with a changed topic (as changing the topic does not in fact \nstart a new thread).\n\n> 4. Off-topic threads will be directed to other venues.\n\nThreads like this one are off-topic, yet we have no obvious other venue for \nit.. :(\n\n> *Disclose potential conflicts*\n\nIMO this seems like not only a waste of time, but also futile for anyone not \nexclusively associated with a single company/organization.\n\n> If you have concerns about someone\u2019s conduct:\n> * *On-list*: discussing conduct on-list, either as part of another message\n> or as a standalone thread, is always acceptable.\n\nPlease no. This is off-topic noise.\n\nLuke"
            },
            {
                "author": "odinn",
                "date": "2015-10-15T00:40:47",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\nI am concerned that someone will always call \"off topic\" regardless of\nhow on-topic something actually is.  There is no objective measure of\non-topicness here (or hasn't been) unless we say it has to do with\nbitcoin development.\n\nIf you say, \"Conversations should remain focused and on-topic,\" as you\nhave suggested, then presumably you mean, as has also been suggested\nin the proposed list moderation policy and conduct document, that we\n\n\"aim to facilitate constructive discussion\nof issues related to technical development of the bitcoin protocol and\nthe Bitcoin Core reference implementation\"\n\nand thus, that \"on-topic\" conversations would necessarily be \"related\nto technical development of the bitcoin protocol and the Bitcoin Core\nreference implementation.\"\n\nUnfortunately, while that is fairly specific to what this list is\nabout, I think it still will result in a lot of people shouting \"Off\nTopic!\" whenever someone mentions something that might even be\nremotely and slightly off the the range.  Thus, I don't think the\ncurrent language in the proposed list moderation policy and conduct\ndocument is really that good, and needs much more discussion and\nrefinement before, well, anything.  It would be a shame if every time\nsomeone brings up something innovative, new or wonderful, or explores\nsomething on the boundaries, they are shouted down with cries of \"Off\nTopic!\" Which, by the way, I see happening A Lot on this list.\n\nSpecifically relating to the subject of Disclosure,\nIt is suggested that people here\n\"*Disclose potential conflicts*\"\n\n\"1. List discussions often involve interested parties. We expect\nparticipants to be aware when they are conflicted due to employment or\nother projects they are involved in, and disclose those interests to\nother project members.\n2. When in doubt, over-disclose. Perceived conflicts of interest are\nimportant to address, so that the lists\u2019 decisions are credible even\nwhen unpopular, difficult or favorable to the interests of one group\nover another.\"\n\nI don't doubt that this is a fine plan, but those who work for three\nletter agencies or have simply signed NDAs (as an example) aren't\ngoing to disclose anything, nada ~ but will be here anyway, pushing\ntheir personal interests.  Reality.\n\nLooking forward to discussion.\n\nCheers,\n\nO\n\nLuke Dashjr via bitcoin-dev:\n> On Thursday, October 15, 2015 12:02:21 AM Jeff Garzik via\n> bitcoin-dev wrote:\n>> 2. If someone asks for help it is because they need it. Politely\n>> suggest specific documentation or more appropriate venues where\n>> appropriate. Avoid aggressive or vague responses.\n> \n> This could get noisy. Clarification that only *development* help is\n>  appropriate for the list would improve it.\n> \n>> 2. Conversations should remain focused and on-topic. If you must\n>> change the topic, start a new thread by changing the topic line\n>> of your emails.\n> \n> Probably should note that entirely new threads should be new\n> messages, *not* merely a reply with a changed topic (as changing\n> the topic does not in fact start a new thread).\n> \n>> 4. Off-topic threads will be directed to other venues.\n> \n> Threads like this one are off-topic, yet we have no obvious other\n> venue for it.. :(\n> \n>> *Disclose potential conflicts*\n> \n> IMO this seems like not only a waste of time, but also futile for\n> anyone not exclusively associated with a single\n> company/organization.\n> \n>> If you have concerns about someone\u2019s conduct: * *On-list*:\n>> discussing conduct on-list, either as part of another message or\n>> as a standalone thread, is always acceptable.\n> \n> Please no. This is off-topic noise.\n> \n> Luke _______________________________________________ bitcoin-dev\n> mailing list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWHvYPAAoJEGxwq/inSG8C/AgIAKxEOZpQ5O7cdAGcBceE840d\n1Jv29kfErv/+vuasCumbF6yCRljJGqeU/t7YmoWcQzSD5jijBbZ7uB7yXBsoJwyg\nxELeEAzV2t7v7zLxi569xVKvdaMrIYvwPB2uOQsfmqZ2+PrSlBsRIhcgB9zeuVyK\n5Mtb0cHJx7aDmBhhC4r1IQGNfa8zzfdsNU4BqHR2/l6NmH29p9tb7DPC+83O6xY+\nODn6gDRAFsjC+Cy3gsLNf1J4hEvGOkkSVMJIHEmkdJx2gN306rbc7X7DK7CSQX3E\nvmhAmDj419dpTvciOEjuiROGDhawPnBsO37UZJIVC/6yWe4sDk5JvQULU2HiyDo=\n=T4vL\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-10-15T01:43:25",
                "message_text_only": "On 14/10/15 19:02, Jeff Garzik via bitcoin-dev wrote:\n> *Disclose potential conflicts*\n> \n> 1. List discussions often involve interested parties. We expect\n> participants to be aware when they are conflicted due to employment or\n> other projects they are involved in, and disclose those interests to other\n> project members.\n> 2. When in doubt, over-disclose. Perceived conflicts of interest are\n> important to address, so that the lists\u2019 decisions are credible even when\n> unpopular, difficult or favorable to the interests of one group over\n> another.\n\nEven if we assume everybody will try to approach that topic in good\nfaith, I don't think it's that simple.\n\nA term that's become popular recently is \"Bitcoin maximalist\", and it's\nfrequently used as a slur or insult.\n\nI honestly find that to be incomprehensible. If somebody at a Ford board\nmeeting started talking about how Ford needed to make sure Toyota was\nable to sell enough cars, they wouldn't get very far by labelling their\ncritics as \"Ford maximalists\".\n\nAnyone who works at Ford and who isn't a Ford maximalist is in the wrong\njob.\n\nAnd yet in Bitcoin, a much development is funded by companies who offer\nproducts which compete with Bitcoin, or at least would be in competition\nif Bitcoin were to achieve unlimited success.\n\nI expect this is a minority view on this list, but my position is that\nanyone who is not a Bitcoin maximalists has a potential conflict of\ninterest if they're also involved in Bitcoin development.\n\nI also suspect this issue is a cause of much user dissatisfaction with\nBitcoin development. If Bitcoin users and investors don't trust that the\ndevelopers are working toward the unlimited success case, they can and\nwill revolt.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18442 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/593ed78f/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151014/593ed78f/attachment-0001.sig>"
            },
            {
                "author": "odinn",
                "date": "2015-10-15T08:38:35",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nAnother point building on Justus's remarks that I'll make.... (below)\n\nJustus Ranvier via bitcoin-dev:\n> On 14/10/15 19:02, Jeff Garzik via bitcoin-dev wrote:\n>> *Disclose potential conflicts*\n>> \n>> 1. List discussions often involve interested parties. We expect \n>> participants to be aware when they are conflicted due to\n>> employment or other projects they are involved in, and disclose\n>> those interests to other project members. 2. When in doubt,\n>> over-disclose. Perceived conflicts of interest are important to\n>> address, so that the lists\u2019 decisions are credible even when \n>> unpopular, difficult or favorable to the interests of one group\n>> over another.\n> \n> Even if we assume everybody will try to approach that topic in\n> good faith, I don't think it's that simple.\n> \n> A term that's become popular recently is \"Bitcoin maximalist\", and\n> it's frequently used as a slur or insult.\n> \n> I honestly find that to be incomprehensible. If somebody at a Ford\n> board meeting started talking about how Ford needed to make sure\n> Toyota was able to sell enough cars, they wouldn't get very far by\n> labelling their critics as \"Ford maximalists\".\n> \n> Anyone who works at Ford and who isn't a Ford maximalist is in the\n> wrong job.\n> \n> And yet in Bitcoin, a much development is funded by companies who\n> offer products which compete with Bitcoin, or at least would be in\n> competition if Bitcoin were to achieve unlimited success.\n\n\nOne example that came to mind as I was reading this was, when I\npresented an idea that I thought would be good for integration into\nBitcoin Core, explaining in various ways why I felt it would be\nworthwhile to explore, I eventually had someone tell me I should go\nand develop the idea first as either some sort of independent wallet,\nor to demonstrate it would work via an alt.  (This has now occurred,\nas a successful implementation of my micro-donations idea has been\ndemonstrated in an alt.)  I have to wonder, however, when I eventually\nbring the micro-donation ideas back in such a form that they could\nagain be considered in bitcoin-dev, whether or not they would\nseriously be considered, in part due to this effect which Justus\nRanvier has described in part ~ that is to say, the effect of people\nengaging in the use of \"maximalist\" or some other label (or labels) as\nlimiting the extent of discourse which people can engage in.  (I\nrealize that wasn't exactly where you were going with this Justus, but\nI'm just expanding upon the notion of how some labels and categories\ncan be used to suppress real discussion.)  Or, for example, if people\nsee me as \"conflicted,\" and someone else doesn't, and I'm confused\nabout why someone would see me as \"conflicted,\" where does that leave\none?  Quite possibly, stuck in a morass of unproductive commentary (or\nmaybe just being ignored by moderators who might see quite a few\npeople as \"conflicted\").\n\n> \n> I expect this is a minority view on this list, but my position is\n> that anyone who is not a Bitcoin maximalists has a potential\n> conflict of interest if they're also involved in Bitcoin\n> development.\n> \n> I also suspect this issue is a cause of much user dissatisfaction\n> with Bitcoin development. If Bitcoin users and investors don't\n> trust that the developers are working toward the unlimited success\n> case, they can and will revolt.\n> \n\nAnother thing to consider, although the person(s) proposing the list\nmoderation policy and conduct document will certainly not want to hear\nit, is that the list might be better off without a policy document\nthat is enforced by moderators.  (An \"about\" section for what the list\nis about, its purpose, and how people are supposed to treat each\nother, is probably good... but the enforcement angle that I'm seeing\nis probably a bad idea.)  What we stand for here is more than making\npeople comfortable while technical issues are discussed on a list.\nThe idea of keeping a protocol free of financial censorship, in\nconcept, extends to language as well, and thus people should be able\nto be free in how they write and speak, even when their peers on the\nlist don't like what they see in others' expressions.\n\nI recommend removal of the enforcement and moderator sections.\n(Technically, there are mods for it already... I suppose... the\nquestion is how you disclose in a \"Purpose\" or \"About\" section that\nrefers to this list who the mods are, or rather, what the roles are of\neach person involved in a way that is minimally invasive and lets the\nlist flow.)\n\n> \n> \n> _______________________________________________ bitcoin-dev mailing\n> list bitcoin-dev at lists.linuxfoundation.org \n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n- -- \nhttp://abis.io ~\n\"a protocol concept to enable decentralization\nand expansion of a giving economy, and a new social good\"\nhttps://keybase.io/odinn\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCgAGBQJWH2YLAAoJEGxwq/inSG8C0aAH/AqYWgZEyRM5d1rAwjt6jNrf\nVqkd+kBCu0+0CQRXHUwJpK07IzFm5CwzSGIwri/VWT+1t/27Lk1Kt9iV4+zxOZhO\nRFyo4gmJ6GApZ7N6wlIWD9R2hFdg9Q+taZHgRXiMDMqi8MOJjf5tMAXnYjbMQrSr\nntLY3ESFF0yF3ZGIIptNI4atv6UdhL2po7p+F5GMa7VZp7/e3zw96Uxmd2wkZN0R\n3G5VHR2gscn3PooykpH/nhpH4mk0eFsWomuwWXAxfo2JjMhuyIXU0KnUs7ibpfPT\nqtOmBW/7DI//IeRJpstAnbc22g6YOqCKrMDgNe0HgVjnmugNpY1/wRh29m+WCpA=\n=felI\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Proposed list moderation policy and conduct",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeff Garzik",
                "odinn",
                "Luke Dashjr",
                "Justus Ranvier"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 19357
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.11.1 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-15T08:18:58",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.11.1 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.11.1/>\n\nThis is a new minor version release, bringing security fixes. It is recommended\nto upgrade to this version as soon as possible.\n\nTorrent magnet link:\n\n    magnet:?xt=urn:btih:c6dd5f10efd99d9129869bb5fbf9cc53fc07cefa&dn=bitcoin-core-0.11.1&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.ccc.de%3A80%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969&tr=udp%3A%2F%2Fopen.demonii.com%3A1337&ws=https%3A%2F%2Fbitcoin.org%2Fbin%2F\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nUpgrading and downgrading\n=========================\n\nHow to Upgrade\n- --------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nDowngrade warning\n- ------------------\n\nBecause release 0.10.0 and later makes use of headers-first synchronization and\nparallel block download (see further), the block files and databases are not\nbackwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support.\n\nIf you want to be able to downgrade smoothly, make a backup of your entire data\ndirectory. Without this your node will need start syncing (or importing from\nbootstrap.dat) anew afterwards. It is possible that the data from a completely\nsynchronised 0.10 node may be usable in older versions as-is, but this is not\nsupported and may break as soon as the older version attempts to reindex.\n\nThis does not affect wallet forward or backward compatibility. There are no\nknown problems when downgrading from 0.11.x to 0.10.x.\n\nNotable changes\n===============\n\nFix buffer overflow in bundled upnp\n- ------------------------------------\n\nBundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in\nthe XML parser during initial network discovery.\n\nDetails can be found here: http://talosintel.com/reports/TALOS-2015-0035/\n\nThis applies to the distributed executables only, not when building from source or\nusing distribution provided packages.\n\nAdditionally, upnp has been disabled by default. This may result in a lower\nnumber of reachable nodes on IPv4, however this prevents future libupnpc\nvulnerabilities from being a structural risk to the network\n(see https://github.com/bitcoin/bitcoin/pull/6795).\n\nTest for LowS signatures before relaying\n- -----------------------------------------\n\nMake the node require the canonical 'low-s' encoding for ECDSA signatures when\nrelaying or mining.  This removes a nuisance malleability vector.\n\nConsensus behavior is unchanged.\n\nIf widely deployed this change would eliminate the last remaining known vector\nfor nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side\nit will block most transactions made by sufficiently out of date software.\n\nUnlike the other avenues to change txids on transactions this\none was randomly violated by all deployed bitcoin software prior to\nits discovery. So, while other malleability vectors where made\nnon-standard as soon as they were discovered, this one has remained\npermitted. Even BIP62 did not propose applying this rule to\nold version transactions, but conforming implementations have become\nmuch more common since BIP62 was initially written.\n\nBitcoin Core has produced compatible signatures since a28fb70e in\nSeptember 2013, but this didn't make it into a release until 0.9\nin March 2014; Bitcoinj has done so for a similar span of time.\nBitcoinjs and electrum have been more recently updated.\n\nThis does not replace the need for BIP62 or similar, as miners can\nstill cooperate to break transactions.  Nor does it replace the\nneed for wallet software to handle malleability sanely[1]. This\nonly eliminates the cheap and irritating DOS attack.\n\n[1] On the Malleability of Bitcoin Transactions\nMarcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\nhttp://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf\n\nMinimum relay fee default increase\n- -----------------------------------\n\nThe default for the `-minrelaytxfee` setting has been increased from `0.00001`\nto `0.00005`.\n\nThis is necessitated by the current transaction flooding, causing\noutrageous memory usage on nodes due to the mempool ballooning. This is a\ntemporary measure, bridging the time until a dynamic method for determining\nthis fee is merged (which will be in 0.12).\n\n(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11\nrelease notes, in which this value was suggested)\n\n0.11.1 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect\nbehavior, not code moves, refactors and string updates. For convenience in locating\nthe code changes and accompanying discussion, both the pull request and\ngit merge commit are mentioned.\n\n- - #6438 `2531438` openssl: avoid config file load/race\n- - #6439 `980f820` Updated URL location of netinstall for Debian\n- - #6384 `8e5a969` qt: Force TLS1.0+ for SSL connections\n- - #6471 `92401c2` Depends: bump to qt 5.5\n- - #6224 `93b606a` Be even stricter in processing unrequested blocks\n- - #6571 `100ac4e` libbitcoinconsensus: avoid a crash in multi-threaded environments\n- - #6545 `649f5d9` Do not store more than 200 timedata samples.\n- - #6694 `834e299` [QT] fix thin space word wrap line break issue\n- - #6703 `1cd7952` Backport bugfixes to 0.11\n- - #6750 `5ed8d0b` Recent rejects backport to v0.11\n- - #6769 `71cc9d9` Test LowS in standardness, removes nuisance malleability vector.\n- - #6789 `b4ad73f` Update miniupnpc to 1.9.20151008\n- - #6785 `b4dc33e` Backport to v0.11: In (strCommand == \"tx\"), return if AlreadyHave()\n- - #6412 `0095b9a` Test whether created sockets are select()able\n- - #6795 `4dbcec0` net: Disable upnp by default\n- - #6793 `e7bcc4a` Bump minrelaytxfee default\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - Adam Weiss\n- - Alex Morcos\n- - Casey Rodarmor\n- - Cory Fields\n- - fanquake\n- - Gregory Maxwell\n- - Jonas Schnelli\n- - J Ross Nicoll\n- - Luke Dashjr\n- - Pavel Jan\u00edk\n- - Pavel Vasin\n- - Peter Todd\n- - Pieter Wuille\n- - randy-waterhouse\n- - Ross Nicoll\n- - Suhas Daftuar\n- - tailsjoin\n- - \u0e3ftcDrak\n- - Tom Harding\n- - Veres Lajos\n- - Wladimir J. van der Laan\n\nAnd those who contributed additional code review and/or security research:\n\n- - timothy on IRC for reporting the issue\n- - Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJWH2E6AAoJEHSBCwEjRsmmVMAH/0/u/4it6+MI8LCGFZWJFbTk\nbZppeUIkGP4oN5XoHrPi++Mqdu+b9i/o5lmwrcZDFuA+DVzzOhTwt4dVzNP9IMey\n2G3JfbDWd9lUv4DIR4GkD2CjoGVnZq3pgbHMmsWrcUGEvyl7zDYE51MKTAfljYG+\npfMEdc2LJJJ2GfM3MIXIE70i+5JW+46lqw19qnLpiOW8P9lJ0JMd6xKw6XFi25Z9\nywXloeuEHhsMkBOjhTJizv3CS7s+0LhsHMfXiryIIBWfs8laQh0aQJLELHnsYoFh\nM2+RmXBMbdgbugmJBIyFnuS3kDCVNEe/uBWU6RZWSwUSwC/V3L5hBHW8R+vrq6M=\n=20Vu\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.11.1 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 7671
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.10.3 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2015-10-15T08:22:19",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nBitcoin Core version 0.10.3 is now available from:\n\n  <https://bitcoin.org/bin/bitcoin-core-0.10.3/>\n\nThis is a new minor version release, bringing security fixes and translation \nupdates.\n\nPlease report bugs using the issue tracker at github:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nUpgrading and downgrading\n=========================\n\nHow to Upgrade\n- --------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nDowngrade warning\n- ------------------\n\nBecause release 0.10.0 and later makes use of headers-first synchronization and\nparallel block download (see further), the block files and databases are not\nbackwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n\n* Blocks will be stored on disk out of order (in the order they are\nreceived, really), which makes it incompatible with some tools or\nother programs. Reindexing using earlier versions will also not work\nanymore as a result of this.\n\n* The block index database will now hold headers for which no block is\nstored on disk, which earlier versions won't support.\n\nIf you want to be able to downgrade smoothly, make a backup of your entire data\ndirectory. Without this your node will need start syncing (or importing from\nbootstrap.dat) anew afterwards. It is possible that the data from a completely\nsynchronised 0.10 node may be usable in older versions as-is, but this is not\nsupported and may break as soon as the older version attempts to reindex.\n\nThis does not affect wallet forward or backward compatibility.\n\nNotable changes\n===============\n\nFix buffer overflow in bundled upnp\n- ------------------------------------\n\nBundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in\nthe XML parser during initial network discovery.\n\nDetails can be found here: http://talosintel.com/reports/TALOS-2015-0035/\n\nThis applies to the distributed executables only, not when building from source or\nusing distribution provided packages.\n\nAdditionally, upnp has been disabled by default. This may result in a lower\nnumber of reachable nodes on IPv4, however this prevents future libupnpc\nvulnerabilities from being a structural risk to the network\n(see https://github.com/bitcoin/bitcoin/pull/6795).\n\nTest for LowS signatures before relaying\n- -----------------------------------------\n\nMake the node require the canonical 'low-s' encoding for ECDSA signatures when\nrelaying or mining.  This removes a nuisance malleability vector.\n\nConsensus behavior is unchanged.\n\nIf widely deployed this change would eliminate the last remaining known vector\nfor nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side\nit will block most transactions made by sufficiently out of date software.\n\nUnlike the other avenues to change txids on transactions this\none was randomly violated by all deployed bitcoin software prior to\nits discovery. So, while other malleability vectors where made\nnon-standard as soon as they were discovered, this one has remained\npermitted. Even BIP62 did not propose applying this rule to\nold version transactions, but conforming implementations have become\nmuch more common since BIP62 was initially written.\n\nBitcoin Core has produced compatible signatures since a28fb70e in\nSeptember 2013, but this didn't make it into a release until 0.9\nin March 2014; Bitcoinj has done so for a similar span of time.\nBitcoinjs and electrum have been more recently updated.\n\nThis does not replace the need for BIP62 or similar, as miners can\nstill cooperate to break transactions.  Nor does it replace the\nneed for wallet software to handle malleability sanely[1]. This\nonly eliminates the cheap and irritating DOS attack.\n\n[1] On the Malleability of Bitcoin Transactions\nMarcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\nhttp://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf\n\nMinimum relay fee default increase\n- -----------------------------------\n\nThe default for the `-minrelaytxfee` setting has been increased from `0.00001`\nto `0.00005`.\n\nThis is necessitated by the current transaction flooding, causing\noutrageous memory usage on nodes due to the mempool ballooning. This is a\ntemporary measure, bridging the time until a dynamic method for determining\nthis fee is merged (which will be in 0.12).\n\n(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11.0\nrelease notes, in which this value was suggested)\n\n0.10.3 Change log\n=================\n\nDetailed release notes follow. This overview includes changes that affect external\nbehavior, not code moves, refactors or string updates.\n\n- - #6186 `e4a7d51` Fix two problems in CSubnet parsing\n- - #6153 `ebd7d8d` Parameter interaction: disable upnp if -proxy set\n- - #6203 `ecc96f5` Remove P2SH coinbase flag, no longer interesting\n- - #6226 `181771b` json: fail read_string if string contains trailing garbage\n- - #6244 `09334e0` configure: Detect (and reject) LibreSSL\n- - #6276 `0fd8464` Fix getbalance * 0\n- - #6274 `be64204` Add option `-alerts` to opt out of alert system\n- - #6319 `3f55638` doc: update mailing list address\n- - #6438 `7e66e9c` openssl: avoid config file load/race\n- - #6439 `255eced` Updated URL location of netinstall for Debian\n- - #6412 `0739e6e` Test whether created sockets are select()able\n- - #6694 `f696ea1` [QT] fix thin space word wrap line brake issue\n- - #6704 `743cc9e` Backport bugfixes to 0.10\n- - #6769 `1cea6b0` Test LowS in standardness, removes nuisance malleability vector.\n- - #6789 `093d7b5` Update miniupnpc to 1.9.20151008\n- - #6795 `f2778e0` net: Disable upnp by default\n- - #6797 `91ef4d9` Do not store more than 200 timedata samples\n- - #6793 `842c48d` Bump minrelaytxfee default\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - Adam Weiss\n- - Alex Morcos\n- - Casey Rodarmor\n- - Cory Fields\n- - fanquake\n- - Gregory Maxwell\n- - Jonas Schnelli\n- - J Ross Nicoll\n- - Luke Dashjr\n- - Pavel Vasin\n- - Pieter Wuille\n- - randy-waterhouse\n- - \u0e3ftcDrak\n- - Tom Harding\n- - Veres Lajos\n- - Wladimir J. van der Laan\n\nAnd all those who contributed additional code review and/or security research:\n\n- - timothy on IRC for reporting the issue\n- - Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos\n\nAs well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBCgAGBQJWH2IgAAoJEHSBCwEjRsmm/JoIAMxv8Za87Bm+iss9grwO4Grh\n59aeCZp0t0DxQR1UbRYUH6HLoT9cjRpTwfxYLJUOI0rH/BtU3wten4sLLg1BoZjI\nhdxcOYb4EG4SvxfkRxwU7lllBbcQxZPsSWCCdI1g2lUOcwqQyaW1uhDoyMkHHJD6\nTkvV5zle+kj80VB4c48CAEGLTR8FaXT/WhpWmEleRaCcsqT61cDqZoOCyYRMbNZZ\nOlg1M9+SetGC0VGULf1eDj2pAHQn/t0UIsc2lKCUw/b4eetQl5cDOKJFfEZHvJqC\n/RVt3DKEP3IZiQb0LQ64UZqe36T29UXlLzVsRygyX7AvP/LQixcNRKMbM0eGI4E=\n=kbc/\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.10.3 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 7068
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin dev IRC meeting in layman's terms (2015-10-15)",
        "thread_messages": [
            {
                "author": "G1lius Caesar",
                "date": "2015-10-19T13:20:15",
                "message_text_only": "Once again my attempt to summerize and explain the weekly bitcoin developer\nmeeting in layman's terms.\nLink to last weeks summerization (\nhttps://www.reddit.com/r/Bitcoin/comments/3o7bi6/bitcoin_dev_meeting_in_laymans_terms_2015108/\n)\nLink to this weeks on reddit:\nhttps://www.reddit.com/r/Bitcoin/comments/3pcinz/bitcoin_dev_irc_meeting_in_laymans_terms_20151015/\n\n*Disclaimer*\n\nPlease bear in mind I'm not a developer and I'd have problems coding \"hello\nworld!\", so some things might be incorrect or plain wrong.\nLike any other write-up it likely contains personal biases, although I try\nto stay as neutral as I can.\nThere are no decisions being made in these meetings, so if I say \"everyone\nagrees\" this means everyone present in the meeting, that's not consensus,\nbut since a fair amount of devs are present it's a good representation.\nThe dev IRC and mailinglist are for bitcoin development purposes. If you\nhave not contributed actual code to a bitcoin-implementation, this is\nprobably not the place you want to reach out to. There are many places to\ndiscuss things that the developers read, including this sub-reddit.\n\n\nlink to this week logs\nhttp://bitcoinstats.com/irc/bitcoin-dev/logs/2015/10/15#l1444935660.0\nMeeting minutes by meetbot\nhttp://www.erisian.com.au/meetbot/bitcoin-dev/2015/bitcoin-dev.2015-10-15-19.01.html\n\n\nMain topics discussed where:\nMempool limiting\nsendheaders BIP\nversionbits\ndev/discuss list policy\nCHECKSEQUENCEVERIFY\n\n\n**Mempool limiting**\n\n- background\n\nWhen a transaction is relayed across the network it is held by the nodes in\nmemory, until it gets into a block. All these transactions that sit in\nmemory are called the memorypool or mempool for short.\nLike we could see during the spam-attack if there's a big back-log of\ntransactions that couldn't make it in the blockchain this mempool can get\npretty big resulting in nodes crashing.\n\nTo stop this from happening devs are trying to find a way to limit this\nmempool, so a mechanism to reject and/or remove transactions from the\nmempool. The hard part here is to make it so nodes can't be attacked by\nabusing this mechanism.\nSo far the devs are going with TheBlueMatt's proposal of throwing away the\ncheapest txn and setting the min relay fee to it\nhttps://github.com/bitcoin/bitcoin/pull/6722\n\n\n- meeting comments\n\nWhile testing, sipa encountered transactions that took 200ms to be accepted\ninto the mempool.\nAs it's the first time he has benchmarked this and the pull-request\nshouldn't make an impact on these times it likely doesn't have anything to\ndo with this. However, such times are bad either way.\nThe average time in sipa's tests is 4ms. (After the meeting Morcos did some\nbenchmarking (\nhttps://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148874040 ) and\nconfirmed it was not specific to this PR, and pointed out the outliers come\nfrom CheckInputs and HaveInputs (as you might guess, having to do with\nchecking the inputs)\nQuestion on why we should revert the minrelay (minimum fee for nodes to\nrelay a transaction) back to 1000 (it has been set to 5000 to quick-fix the\nmempool issues), sipa thinks it should be floating as well or the dust\nlimit becomes ineffective.\n\n\n- meeting conclusion\n\nReview PR 6722 Limit mempool by throwing away the cheapest txn and setting\nmin relay fee to it https://github.com/bitcoin/bitcoin/pull/6722\nMorcos/sipa will do some more benchmarks and comment on the PR ( morcos'\nbenchmark results\nhttps://github.com/bitcoin/bitcoin/pull/6722#issuecomment-148874040 )\n\n\n**sendheaders BIP**\n\n- background\n\nsend headers BIP\nhttps://github.com/sdaftuar/bips/blob/add-sendheaders/bip-sendheaders.mediawiki\nCopy/paste from the BIP:\nSince the introduction of \"headers-first\" downloading of blocks in 0.10,\nblocks will not be processed unless they are able to connect to a (valid)\nheaders chain. Consequently, block relay generally works as follows:\n\n1. A node (N) announces the new tip with an \"inv\" message, containing the\nblock hash\n2. A peer (P) responds to the \"inv\" with a \"getheaders\" message (to request\nheaders up to the new tip) and a \"getdata\" message for the new tip itself\n3. N responds with a \"headers\" message (with the header for the new block\nalong with any preceding headers unknown to P) and a \"block\" message\ncontaining the new block\nHowever, in the case where a new block is being announced that builds on\nthe tip, it would be generally more efficient if the node N just announced\nthe block header for the new block, rather than just the block hash, and\nsaved the peer from generating and transmitting the getheaders message (and\nthe required block locator).\n\n\n\n- meeting comments\n\nQuestion on how to move forward. How to let the nodes know you want the\nblockheader instead of the blockhash.\nOptions:\nExtend the version message.\nHave an \"options\" message that can send flags.\nSend a \"sendheaders\" message early when connecting so the way peers want\ntheir block announcement is immediately known.\nSend a \"sendheaders\" message at any time, changing the way peers want their\nblock announcement from hashes to headers.\n\nNo one likes to extend the version message further.\nThere's no strong advantage to have an \"options\" message over a\n\"sendheaders\" message.\nHaving the message being sent early on might be too constraining. Possible\nusecase from morcos: \"its entirely possible some future optimization may\nsay, i want to send sendheaders to these peers b/c they announce a lot of\nnew stuff to me and not these others b/c they don't\".\nMost people like this to be enable-only, so no message to get back to\nreceiving blockhashes. Which is how the BIP was drafted.\n\n\n-meeting conclusion\n\nsdaftuar does a pull-request for the BIP to get a number assigned and\nproceeds with the BIP as drafted.\n\n\n\n**versionbits**\n\n- background\n\nBIP 9 https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki\nCurrently softforks have been done by the isSuperMajority mechanism,\nmeaning when 95% of the last X blocks has a version number higher than Y\nthe fork is deployed.\nA new way of doing this is currently being worked on and that uses all bits\nof the version number, appropriately being called versionbits. So instead\nof a fork happening when the version is larger than (for example)\n00000000011 (3), a fork happens when (for example) the 3rd bit is up (so\n00100000011).\nThis way softforks can be deployed simultaneous and independant of each\nother.\n\n- meeting comments\n\ncopy/paste from IRC, since I don't know what this specifically means:\nCodeShark: so right now it's just a unit that implements the versionbits\nlogic but does not demonstrate its usage\nI thought it would be better to actually integrate in a separate PR, but I\ncan add a demonstration\nsipa: separate commit, same PR - i think we need something that's mergable\nas a whole, to be able to see whether the whole thing easily backports\n\nCodeshark (who's implementing versionbits) had some more remarks but no one\npresent had seemed to reviewed it, so not much use in discussing things\nfurther.\n\n\n- meeting conclusion\n\nreview versionbits implementation\nhttps://github.com/bitcoin/bitcoin/pull/6816\n\n\n**dev/discuss list policy**\n\n- background\n\nThe bitcoin-dev mailing list is intented for technical discussions only.\nThere's things that don't belong there but need to be discussed anyway.\nNow this is done in bitcoin-dev, but the volume of this is getting too big.\n\nThere's recently also an influx of really inappropriate posts, level\nkindergarden\nhttps://www.mail-archive.com/bitcoin-dev@lists.linuxfoundation.org/msg02539.html.\n\nFor the things that don't belong on bitcoin-dev, but need to be discussed\nanyway there's a new list being created namely bitcoin-discuss as well as\nclear policies and moderation for both.\n\n- meeting comments\n\nBitcoin-discuss was created, but the admin password wasn't distributed to\njgarzik who's willing to guide the moderatation.\nSeparate moderation-proposals have been done meanwhile.\nPeople just want it to move on.\n\n- meeting conclusion\n\nSince none of the people who proposed a moderation-scheme are present we'll\nlet them discuss it among each other and post their decisions publicly.\n\n\n**CHECKSEQUENCEVERIFY**\n\n- background\n\nCheckLockTimeVerify (CLTV) repurposes the nSequence field (nSequence are 4\nbytes intended for sequencing time-locked transactions, but this never got\nused). However, there's no way use these values in a bitcoin script.\nCheckSequenceVerify (CSV) makes this field accessible to bitcoin scripts.\n\n- meeting comments\n\nCLTV is pretty much done.\nCheck to see maaku moving one of the bits to allow for other\nimplementations to have better granularity has any objections.\nAs long as we're using as few bits as possible the exact semantics are less\nimportant for most people.\nsipa points out a possible bug (\nhttps://github.com/bitcoin/bitcoin/pull/6312#discussion_r41899674 ) that\ninfluences the wallet.\nCSV is not on target for the end of of the month, although a lot of work\nand progress has been made.\n\n\n\n- meeting conclusion\n\nReview and ACK/NACK of 6312 BIP-68: Mempool-only sequence number constraint\nverification https://github.com/bitcoin/bitcoin/pull/6312\nReview and ACK/NACK of 6566 BIP-113: Mempool-only median time-past as\nendpoint for lock-time calculations\nhttps://github.com/bitcoin/bitcoin/pull/6566\n\n\n**Participants**\n\nwumpus     Wladimir J. van der Laan\nsipa       Pieter Wuille\nbtcdrak    btcdrak\ngmaxwell   Gregory Maxwell\nmorcos     Alex Morcos\nmaaku      Mark Friedenbach\nCodeShark  Eric Lombrozo\nBlueMatt   Matt Corallo\nsdaftuar   Suhas Daftuar\nwarren     Warren Togami\nGreenIsMyPepper  Joseph Poon\ndavec      Dave Collins\ncfields    Cory Fields\njonasschnelli   Jonas Schnelli\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/c7575389/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin dev IRC meeting in layman's terms (2015-10-15)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "G1lius Caesar"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 9829
        }
    },
    {
        "title": "[bitcoin-dev] [BIP] Normalized transaction IDs",
        "thread_messages": [
            {
                "author": "Christian Decker",
                "date": "2015-10-19T14:01:04",
                "message_text_only": "After spending some more time on the normalized transaction ID proposal and\nreworking it to be a soft-fork (thanks sipa for helping me figuring out\nhow), I'd like to propose the BIP again.\n\nAs with the previous version, which was using a hard-fork, the normalized\ntransaction ID is computed only considering the non-malleable parts of a\ntransaction, i.e., stripping the signatures before computing the hash of\nthe transaction. This ensures that if a transaction is modified, either by\na third party fishing transactions from the network and re-injecting\nmodified versions or by one of the signers re-signing it, any transaction\nthat builds on top of it still remains valid. Furthermore it allows the use\nof template transactions, unsigned transactions upon which further\ntransaction can be built before signing the template transaction and\nlocking the contract.\n\nUnlike the previous proposal, this is a softfork proposal that redefines\nOP_NOP4 with an extensible and parameterized version of the signature\nchecking opcodes, called OP_CHECKSIGEX. Among other things the parameters\nallow to specify that an output with an OP_CHECKSIGEX is to be referenced\nby the normalized transaction ID that created it, instead of the instance\ntransaction ID containing malleable signatures. This BIP uses the\nnormalized transaction IDs exclusively while signing or checking\nsignatures, they are not used in any network level message as the previous\nversion would have done, hence there is no change at network level and old\nclients should be able to exchange transactions as before and blocks still\nreference the transaction instances.\n\nThe proposal is implemented (see below), by computing the normalized\ntransaction ID when adding them to the UTXO and storing them along with the\ncoin state. OP_CHECKSIGEX mostly duplicates OP_CHECKSIG and\nOP_CHECKMULTISIG, but I'm hoping somebody can give me some pointers into\nhow to best refactor the common functionality into reusable blocks. And the\nannotating incoming transactions with their normalized inputs is a bit\ncumbersome, maye somebody has some pointers here as well?\n\nBIP Pull request: https://github.com/bitcoin/bips/pull/224\nImplementation: https://github.com/cdecker/bitcoin/commits/normtx\n\nI think in the discussion of my previous proposal, most of you welcomed the\nintroduction of normalized transaction IDs, were it not for the hardfork. I\nhope this proposal adresses the previous concerns and that we can move\nforward in adding the normalized transaction IDs to the bitcoin protocol.\nThat being said, I'm always open to suggestions :-)\n\nRegards,\nChristian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/2ed7395d/attachment-0001.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2015-10-19T15:23:53",
                "message_text_only": "On Mon, Oct 19, 2015 at 3:01 PM, Christian Decker via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> As with the previous version, which was using a hard-fork, the normalized\n> transaction ID is computed only considering the non-malleable parts of a\n> transaction, i.e., stripping the signatures before computing the hash of\n> the transaction.\n> <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n\n\nIs this proposal recursive?\n\n\n*Coinbase transaction *\n\n* n-txid = txid\n\n\n*Non-coinbase transactions*\n* replace sigScripts with empty strings\n* replace txids in TxIns with n-txid for parents\n\nThe 2nd step is recursive starting from the coinbases.\n\nIn effect, the rule is that txids are what they would have been if n-txids\nhad been used right from the start.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/c7c17563/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-19T19:28:49",
                "message_text_only": "Yes, this has been pointed out in the PR as well. Transactions inputs must\nalso be normalized by replacing malleable hashes with the normalized\nhashes. I will fix the spec and the implementation to reflect this :-)\n\nRegards,\nChristian\n\nOn Mon, Oct 19, 2015 at 5:24 PM Tier Nolan via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Mon, Oct 19, 2015 at 3:01 PM, Christian Decker via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> As with the previous version, which was using a hard-fork, the normalized\n>> transaction ID is computed only considering the non-malleable parts of a\n>> transaction, i.e., stripping the signatures before computing the hash of\n>> the transaction.\n>> <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n>\n>\n> Is this proposal recursive?\n>\n>\n> *Coinbase transaction *\n>\n> * n-txid = txid\n>\n>\n> *Non-coinbase transactions*\n> * replace sigScripts with empty strings\n> * replace txids in TxIns with n-txid for parents\n>\n> The 2nd step is recursive starting from the coinbases.\n>\n> In effect, the rule is that txids are what they would have been if n-txids\n> had been used right from the start.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151019/5df79d73/attachment.html>"
            },
            {
                "author": "s7r",
                "date": "2015-10-19T22:22:46",
                "message_text_only": "So what exactly is used to create the normalized txid (sha256 hash of\nwhat data)? I've read in the linked BIP draft that it will strip the\n'malleable parts' but didn't understand what exactly will be used to\ncalculate the normalized transactions ids and how will the change apply\nretro-active for the transactions so deep buried in the blockchain?\n\nPubkeys (addresses) can be reused infinitely so what guarantees us\nunique normalized txids all the time and protection against replay\nattacks? The question is not if this issue is covered or not, I know it\nis, I am just asking how, in simpler terms.\n\nSCRIPT_CHECKSIGEX_NORMALIZE could be explained better in the document.\n\nWill it also fix > third level malleability (a tx which spends from\nanother unconfirmed tx which spends from yet another unconfirmed tx)?\n\n\nOn 10/19/2015 6:23 PM, Tier Nolan via bitcoin-dev wrote:\n> On Mon, Oct 19, 2015 at 3:01 PM, Christian Decker via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> \n>     As with the previous version, which was using a hard-fork, the\n>     normalized transaction ID is computed only considering the\n>     non-malleable parts of a transaction, i.e., stripping the signatures\n>     before computing the hash of the transaction.\n>     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> \n> \n> Is this proposal recursive? \n> \n> *Coinbase transaction\n> *\n> \n> * n-txid = txid\n> \n> *Non-coinbase transactions\n> *\n> * replace sigScripts with empty strings\n> * replace txids in TxIns with n-txid for parents\n> \n> The 2nd step is recursive starting from the coinbases.\n> \n> In effect, the rule is that txids are what they would have been if\n> n-txids had been used right from the start.\n> \n>"
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-20T10:30:33",
                "message_text_only": "On Tue, Oct 20, 2015 at 12:23 AM s7r via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> So what exactly is used to create the normalized txid (sha256 hash of\n> what data)? I've read in the linked BIP draft that it will strip the\n> 'malleable parts' but didn't understand what exactly will be used to\n> calculate the normalized transactions ids and how will the change apply\n> retro-active for the transactions so deep buried in the blockchain?\n>\n\nThe normalization involves two steps:\n - strip the scriptSig scripts in the inputs, i.e., the only part whose\nintegrity is not guaranteed by the signature itself, by replacing the\nscripts with empty strings (var length string of size 0)\n - replace the hashes referencing the outputs being spent with the\nnormalized hashes of the transaction that created the outputs. This is done\nrecursively down to the first v2 transactions.\n\nThe second part is not yet explained in the draft, but I will amend it as\nsoon as possible.\n\n\n> Pubkeys (addresses) can be reused infinitely so what guarantees us\n> unique normalized txids all the time and protection against replay\n> attacks? The question is not if this issue is covered or not, I know it\n> is, I am just asking how, in simpler terms.\n>\n\nNon-coinbase transactions can still not be replayed since the normalized\ntransaction still includes a the normalized transaction hashes of claimed\noutputs, hence any attempt to replay a transaction would fail since the\noutputs were already spent. For coinbase transactions it is indeed possible\nthat we create multiple transactions with the same hash (only one of which\nwould be spendable), hence we do not strip coinbase transactions and rely\non BIP 34 to make the coinbase transactions unique (except for blocks 91842\nand 91880 which are the reason we introduced BIP 34 in the first place).\nClarifying the way the normalized transaction ID is computed should remove\nany ambiguities I hope.\n\n\n>\n> SCRIPT_CHECKSIGEX_NORMALIZE could be explained better in the document.\n>\n> Will it also fix > third level malleability (a tx which spends from\n> another unconfirmed tx which spends from yet another unconfirmed tx)?\n>\n\nYes, if the computation of the normalized transaction ID includes replacing\ninput hashes with their normalized counterpart makes a chain of any depth\nnon-malleable.\n\nHTH,\nChristian\n\n>\n>\n> On 10/19/2015 6:23 PM, Tier Nolan via bitcoin-dev wrote:\n> > On Mon, Oct 19, 2015 at 3:01 PM, Christian Decker via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org\n> > <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n> >\n> >     As with the previous version, which was using a hard-fork, the\n> >     normalized transaction ID is computed only considering the\n> >     non-malleable parts of a transaction, i.e., stripping the signatures\n> >     before computing the hash of the transaction.\n> >     <https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev>\n> >\n> >\n> > Is this proposal recursive?\n> >\n> > *Coinbase transaction\n> > *\n> >\n> > * n-txid = txid\n> >\n> > *Non-coinbase transactions\n> > *\n> > * replace sigScripts with empty strings\n> > * replace txids in TxIns with n-txid for parents\n> >\n> > The 2nd step is recursive starting from the coinbases.\n> >\n> > In effect, the rule is that txids are what they would have been if\n> > n-txids had been used right from the start.\n> >\n> >\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151020/2655d737/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-21T06:18:54",
                "message_text_only": "On Monday, October 19, 2015 2:01:04 PM Christian Decker via bitcoin-dev wrote:\n> The proposal is implemented (see below), by computing the normalized\n> transaction ID when adding them to the UTXO and storing them along with the\n> coin state. OP_CHECKSIGEX mostly duplicates OP_CHECKSIG and\n> OP_CHECKMULTISIG, but I'm hoping somebody can give me some pointers into\n> how to best refactor the common functionality into reusable blocks. And the\n> annotating incoming transactions with their normalized inputs is a bit\n> cumbersome, maye somebody has some pointers here as well?\n\nThis doesn't completely close malleability (which should be documented in the \nBIP), so I'm not sure it's worth the cost, especially if closing malleability \nlater on would need more. How about specifying flags upfront in the UTXO-\ncreating transaction specifying which parts the signature will cover? This \nwould allow implementation of fully malleability-proof wallets.\n\nAdditionally, you have a flag to control whether the opcode behaves as VERIFY \nor not. Non-VERIFY is not possible as a softfork (without doing a second/new \nP2SH) since it can be negated.\n\nLuke"
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-21T07:39:45",
                "message_text_only": "On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Monday, October 19, 2015 2:01:04 PM Christian Decker via bitcoin-dev\n> wrote:\n> > The proposal is implemented (see below), by computing the normalized\n> > transaction ID when adding them to the UTXO and storing them along with\n> the\n> > coin state. OP_CHECKSIGEX mostly duplicates OP_CHECKSIG and\n> > OP_CHECKMULTISIG, but I'm hoping somebody can give me some pointers into\n> > how to best refactor the common functionality into reusable blocks. And\n> the\n> > annotating incoming transactions with their normalized inputs is a bit\n> > cumbersome, maye somebody has some pointers here as well?\n\n\n> This doesn't completely close malleability (which should be documented in\n> the\n> BIP), so I'm not sure it's worth the cost, especially if closing\n> malleability\n> later on would need more. How about specifying flags upfront in the UTXO-\n> creating transaction specifying which parts the signature will cover? This\n> would allow implementation of fully malleability-proof wallets.\n>\n\nAs far as I see it the only remaining venues for malleability are the use\nof sighash flags that are not SIGHASH_ALL, as mentioned in the BIP. Any use\nof non-sighash_all flags is already an explicit permission to modify the\ntransactions, by adding and removing inputs and outputs, so I don't see how\nthese can be made non-malleable. Am I missing something?\n\n\n>\n> Additionally, you have a flag to control whether the opcode behaves as\n> VERIFY\n> or not. Non-VERIFY is not possible as a softfork (without doing a\n> second/new\n> P2SH) since it can be negated.\n>\n\nYes, this is my mistake and has been pointed out in the PR, I will amend\nthe PR to make the verify flag mandatory, which also guarantees that the\ntop of the stack contains a non-null element, thus resulting in a\nsuccessful evaluation on non-updated clients.\n\n\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/3a229156/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-21T07:52:16",
                "message_text_only": "On Wednesday, October 21, 2015 7:39:45 AM Christian Decker wrote:\n> On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:\n> > This doesn't completely close malleability (which should be documented in\n> > the BIP), so I'm not sure it's worth the cost, especially if closing\n> > malleability later on would need more. How about specifying flags upfront\n> > in the UTXO-creating transaction specifying which parts the signature\n> > will cover? This would allow implementation of fully malleability-proof\n> > wallets.\n> \n> As far as I see it the only remaining venues for malleability are the use\n> of sighash flags that are not SIGHASH_ALL, as mentioned in the BIP. Any use\n> of non-sighash_all flags is already an explicit permission to modify the\n> transactions, by adding and removing inputs and outputs, so I don't see how\n> these can be made non-malleable. Am I missing something?\n\nSigner malleability is still a notable concern needing consideration. Ideally, \nwallets should be trying to actively CoinJoin, bump fees on, etc any pending \ntransactions in the background. These forms of malleability affect nearly as \nmany real use cases as third-party malleability.\n\nLuke"
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-21T08:31:42",
                "message_text_only": "On Wed, Oct 21, 2015 at 9:52 AM Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Wednesday, October 21, 2015 7:39:45 AM Christian Decker wrote:\n> > On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:\n> > > This doesn't completely close malleability (which should be documented\n> in\n> > > the BIP), so I'm not sure it's worth the cost, especially if closing\n> > > malleability later on would need more. How about specifying flags\n> upfront\n> > > in the UTXO-creating transaction specifying which parts the signature\n> > > will cover? This would allow implementation of fully malleability-proof\n> > > wallets.\n> >\n> > As far as I see it the only remaining venues for malleability are the use\n> > of sighash flags that are not SIGHASH_ALL, as mentioned in the BIP. Any\n> use\n> > of non-sighash_all flags is already an explicit permission to modify the\n> > transactions, by adding and removing inputs and outputs, so I don't see\n> how\n> > these can be made non-malleable. Am I missing something?\n>\n> Signer malleability is still a notable concern needing consideration.\n> Ideally,\n> wallets should be trying to actively CoinJoin, bump fees on, etc any\n> pending\n> transactions in the background. These forms of malleability affect nearly\n> as\n> many real use cases as third-party malleability.\n>\n> Luke\n>\n\nHow is signer malleability still a problem if we remove the signatures from\nthe transaction ID of the transaction and all preceding transactions? The\nsigner can re-sign a transaction but it won't change the transaction ID.\n\nIt is still possible to double-spend transactions that do not have enough\nfees, so just starting a new round of CoinJoin is sufficient to bump fees\nfor all parties that participate, and that would also result in the\ndouble-spent low fee transaction to be discarded, resolving the state of\nall coins in the first CoinJoin tx.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/87444434/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-21T08:39:41",
                "message_text_only": "On Wednesday, October 21, 2015 8:31:42 AM Christian Decker wrote:\n> On Wed, Oct 21, 2015 at 9:52 AM Luke Dashjr <luke at dashjr.org> wrote:\n> > On Wednesday, October 21, 2015 7:39:45 AM Christian Decker wrote:\n> > > On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:\n> > > > This doesn't completely close malleability (which should be\n> > > > documented\n> > \n> > in\n> > \n> > > > the BIP), so I'm not sure it's worth the cost, especially if closing\n> > > > malleability later on would need more. How about specifying flags\n> > \n> > upfront\n> > \n> > > > in the UTXO-creating transaction specifying which parts the signature\n> > > > will cover? This would allow implementation of fully\n> > > > malleability-proof wallets.\n> > > \n> > > As far as I see it the only remaining venues for malleability are the\n> > > use of sighash flags that are not SIGHASH_ALL, as mentioned in the\n> > > BIP. Any\n> > \n> > use\n> > \n> > > of non-sighash_all flags is already an explicit permission to modify\n> > > the transactions, by adding and removing inputs and outputs, so I\n> > > don't see\n> > \n> > how\n> > \n> > > these can be made non-malleable. Am I missing something?\n> > \n> > Signer malleability is still a notable concern needing consideration.\n> > Ideally,\n> > wallets should be trying to actively CoinJoin, bump fees on, etc any\n> > pending\n> > transactions in the background. These forms of malleability affect nearly\n> > as\n> > many real use cases as third-party malleability.\n> > \n> > Luke\n> \n> How is signer malleability still a problem if we remove the signatures from\n> the transaction ID of the transaction and all preceding transactions? The\n> signer can re-sign a transaction but it won't change the transaction ID.\n\nThe signer can also change the order of the inputs, the inputs themselves, \nadd/remove outputs, etc... all which should be possible without becoming a \ndifferent logical transaction. The only unique property of the logical \ntransaction is the scriptPubKey/address.\n\nLuke"
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-21T08:44:53",
                "message_text_only": "Hm, that is true as long as the signer is the only signer of the\ntransaction, otherwise he'd be invalidating the signatures of the other\nsigners. That can however be fixed by having a canonical ordering of Inputs\nand Outputs, which has been discussed before in order to decrease\ninformation that can be gained about the spender. Maybe we can defer to\nthat effort?\n\nOn Wed, Oct 21, 2015 at 10:41 AM Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Wednesday, October 21, 2015 8:31:42 AM Christian Decker wrote:\n> > On Wed, Oct 21, 2015 at 9:52 AM Luke Dashjr <luke at dashjr.org> wrote:\n> > > On Wednesday, October 21, 2015 7:39:45 AM Christian Decker wrote:\n> > > > On Wed, Oct 21, 2015 at 8:19 AM Luke Dashjr <luke at dashjr.org> wrote:\n> > > > > This doesn't completely close malleability (which should be\n> > > > > documented\n> > >\n> > > in\n> > >\n> > > > > the BIP), so I'm not sure it's worth the cost, especially if\n> closing\n> > > > > malleability later on would need more. How about specifying flags\n> > >\n> > > upfront\n> > >\n> > > > > in the UTXO-creating transaction specifying which parts the\n> signature\n> > > > > will cover? This would allow implementation of fully\n> > > > > malleability-proof wallets.\n> > > >\n> > > > As far as I see it the only remaining venues for malleability are the\n> > > > use of sighash flags that are not SIGHASH_ALL, as mentioned in the\n> > > > BIP. Any\n> > >\n> > > use\n> > >\n> > > > of non-sighash_all flags is already an explicit permission to modify\n> > > > the transactions, by adding and removing inputs and outputs, so I\n> > > > don't see\n> > >\n> > > how\n> > >\n> > > > these can be made non-malleable. Am I missing something?\n> > >\n> > > Signer malleability is still a notable concern needing consideration.\n> > > Ideally,\n> > > wallets should be trying to actively CoinJoin, bump fees on, etc any\n> > > pending\n> > > transactions in the background. These forms of malleability affect\n> nearly\n> > > as\n> > > many real use cases as third-party malleability.\n> > >\n> > > Luke\n> >\n> > How is signer malleability still a problem if we remove the signatures\n> from\n> > the transaction ID of the transaction and all preceding transactions? The\n> > signer can re-sign a transaction but it won't change the transaction ID.\n>\n> The signer can also change the order of the inputs, the inputs themselves,\n> add/remove outputs, etc... all which should be possible without becoming a\n> different logical transaction. The only unique property of the logical\n> transaction is the scriptPubKey/address.\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/c06fc8ff/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-21T08:46:43",
                "message_text_only": "On Wednesday, October 21, 2015 8:44:53 AM Christian Decker wrote:\n> Hm, that is true as long as the signer is the only signer of the\n> transaction, otherwise he'd be invalidating the signatures of the other\n> signers.\n\nOr he can just have the other signers re-sign with the modified version.\nEven if it only worked with a single signer, it's still a form of malleability \nthat your BIP does not presently solve, but would be desirable to solve...\n\nLuke"
            },
            {
                "author": "Danny Thorpe",
                "date": "2015-10-21T18:22:25",
                "message_text_only": "A signer modifying the order of inputs or changing outputs when\n\"re-signing\" a transaction (which already has dependent child transactions\nspending its outputs) seems like quite a different hazard than a malicious\nthird party modifying a transaction in the mempool by twiddling opcodes in\nthe signature scripts.  The former seems like more a matter of keeping your\nown house in order (an internal affair) while the latter is an external\nthreat beyond the transaction writer's control.\n\nWhile I agree that having a canonical ordering for inputs and outputs might\nbe useful in some cases, there are also use cases where the relative\npositions of inputs and outputs are significant, where reordering would\nchange the semantics of the transaction.  SIGHASH_SINGLE, for example,\nmakes an association between an input index and an output index. Open Asset\ncolored coins are identified by the order of inputs and outputs.\n\nLet's keep canonical ordering separate from the normalized transaction ID\nproposal. Baby steps. Normalized transaction IDs provide an immediate\nbenefit against the hazard of third party manipulation of transactions in\nthe mempool, even without canonical ordering.\n\n-Danny\n\n\n\n\n\nOn Wed, Oct 21, 2015 at 1:46 AM, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Wednesday, October 21, 2015 8:44:53 AM Christian Decker wrote:\n> > Hm, that is true as long as the signer is the only signer of the\n> > transaction, otherwise he'd be invalidating the signatures of the other\n> > signers.\n>\n> Or he can just have the other signers re-sign with the modified version.\n> Even if it only worked with a single signer, it's still a form of\n> malleability\n> that your BIP does not presently solve, but would be desirable to solve...\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/3ab09100/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-21T19:27:54",
                "message_text_only": "On Wed, Oct 21, 2015 at 6:22 PM, Danny Thorpe via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> outputs) seems like quite a different hazard than a malicious third party\n> modifying a transaction in the mempool by twiddling opcodes in the signature\n> scripts.  The former seems like more a matter of keeping your own house in\n\nIndeed they are different, but canonical encoding enforcement prevents\nthe third party malleability completely on ordinary transactions.\n\nIt is an an _immediate_ solution which is already deployed as a\nstandardness rule-- once miners update to 0.11.1 or 0.10.3 (or\nequivalent) only miners will be able to malleable ordinary payments,\nto the best of our current understanding.\n\n[snip]\n> proposal. Baby steps. Normalized transaction IDs provide an immediate\n> benefit against the hazard of third party manipulation of transactions in\n> the mempool, even without canonical ordering.\n\nThe thing being discussed here does not provide an immediate benefit\nto that particular issue.  It addresses multistep contracts and other\ncases.\n\nBut it does not prevent third party mutation until people change their\npublic keys to new scheme (which based on p2sh we should expect a well\nover a year deployment), which they cannot being doing until a soft\nfork is made and settled in the network, for which the code is not yet\nwritten. CLTV suggests that the current timeframe for a soft fork is\naround a year and though I'd like to see that improved.\n\nSo canonical encoding is both sufficient (to the best of our current\nunderstanding) for preventing third party malleability on ordinary\ntransactions, and the _only_ option for to have an actually immediate\nbenefit.\n\nPlease don't mix up third party malleability with this work which is\nimportant in its own right."
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-21T23:20:30",
                "message_text_only": "On Wednesday, October 21, 2015 6:22:25 PM Danny Thorpe wrote:\n> Let's keep canonical ordering separate from the normalized transaction ID\n> proposal. Baby steps. Normalized transaction IDs provide an immediate\n> benefit against the hazard of third party manipulation of transactions in\n> the mempool, even without canonical ordering.\n\nMy point is that third-party manipulation is not much more of a problem than \nsigning-party manipulation. Solving the former (at a high cost), without \nsolving the latter, seems not worth it IMO.\n\nLuke"
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-22T08:26:58",
                "message_text_only": "I think the scenario of the single signer re-ordering the outputs and\ninputs and then re-signing the transaction is in the same category of\nsimple double-spends. The signer could just as well sign a completely\ndifferent transaction spending the same coins to somewhere else, so I don't\nthink there is a lot we can do about it even if we instate a canonical\nordering. Even if we order the inputs and outputs the signer can just add a\nnew input and output and we would have a different transaction.\n\nNormalized transaction IDs do help in the case that the single signer wants\nto immediately follow up its transaction with another transaction spending\nthe first one's change output, and it prevents any modification in the\nmulti-signer scenario.\n\nOn Thu, Oct 22, 2015 at 1:21 AM Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Wednesday, October 21, 2015 6:22:25 PM Danny Thorpe wrote:\n> > Let's keep canonical ordering separate from the normalized transaction ID\n> > proposal. Baby steps. Normalized transaction IDs provide an immediate\n> > benefit against the hazard of third party manipulation of transactions in\n> > the mempool, even without canonical ordering.\n>\n> My point is that third-party manipulation is not much more of a problem\n> than\n> signing-party manipulation. Solving the former (at a high cost), without\n> solving the latter, seems not worth it IMO.\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/5181dce4/attachment-0001.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-22T08:57:29",
                "message_text_only": "On Thu, Oct 22, 2015 at 8:26 AM, Christian Decker via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Normalized transaction IDs do help in the case that the single signer wants\n> to immediately follow up its transaction with another transaction spending\n> the first one's change output, and it prevents any modification in the\n> multi-signer scenario.\n\nFor ordinary transactions which are not performing interesting smart\ncontracts that particular is better addressed via canonical encoding,\nwhich is immediately available and doesn't have the associated costs\n(new pubkey type adoption, 20%-30% UTXO size increase, need for nodes\nto fixup txid references, etc.).\n\nPlease, as I said up-thread: this is good and importantstuff to work\non, but it shouldn't be oversold."
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-22T11:54:17",
                "message_text_only": "Indeed the reason I got started with all of this is the use of normalized\ntransaction IDs within smart contracts with multiple signers. Sorry if I\nwas perceived as overselling it :-)\n\nSo to summarize the discussions that have been on-going here as well as in\nthe PR so far, most people seem to agree that the BIP is an improvement for\nsmart-contracts as well as the third-party modification scenario. It comes\nat the cost of increased UTXO size due to the additional hash being stored\nper transaction with unclaimed outputs and some additional computations.\nThe additional computation is for the normalized ID computation and the\nswapping in of normalized IDs during verification. No additional coin\nlookups are needed as they are retrieved and cached anyway when verifying\nthe transaction. Would everybody agree with this assessment so far?\n\nOn the PR there were some additional suggestions of treating singlesig\ntransactions as 1-of-1 transactions and using Schnorr signatures for the\nnew opcode. Schnorr has been in the works for a long time and gives a\nmultitude of advantages, e.g., batch validation, and seems like a good\naddition. Since the verify flag is mandatory due to the soft-fork migration\nand we might merge singlesig and multisig into a single opcode we can\nreplace the bitmap of flags with a simple version number. Clients would\nfall back to OP_NOP behaviour for versions they do not implement,\nmaintaining soft-fork semantics to build more future signing and\nverification methods.\n\nOn Thu, Oct 22, 2015 at 10:57 AM Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Thu, Oct 22, 2015 at 8:26 AM, Christian Decker via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> > Normalized transaction IDs do help in the case that the single signer\n> wants\n> > to immediately follow up its transaction with another transaction\n> spending\n> > the first one's change output, and it prevents any modification in the\n> > multi-signer scenario.\n>\n> For ordinary transactions which are not performing interesting smart\n> contracts that particular is better addressed via canonical encoding,\n> which is immediately available and doesn't have the associated costs\n> (new pubkey type adoption, 20%-30% UTXO size increase, need for nodes\n> to fixup txid references, etc.).\n>\n> Please, as I said up-thread: this is good and importantstuff to work\n> on, but it shouldn't be oversold.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/f94cd31f/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-22T09:05:26",
                "message_text_only": "On Thursday, October 22, 2015 8:26:58 AM Christian Decker wrote:\n> I think the scenario of the single signer re-ordering the outputs and\n> inputs and then re-signing the transaction is in the same category of\n> simple double-spends. The signer could just as well sign a completely\n> different transaction spending the same coins to somewhere else, so I don't\n> think there is a lot we can do about it even if we instate a canonical\n> ordering. Even if we order the inputs and outputs the signer can just add a\n> new input and output and we would have a different transaction.\n> \n> Normalized transaction IDs do help in the case that the single signer wants\n> to immediately follow up its transaction with another transaction spending\n> the first one's change output, and it prevents any modification in the\n> multi-signer scenario.\n\nExcept that unlike malicious double spending, adding more outputs to \nunconfirmed transactions is what wallets *should ideally be doing every time \nthey send another transaction*. Spending unconfirmed change is the wrong \napproach. So half-fixing malleability as this PR would, encourages \ninefficient behaviour in multiple ways (first, by not making it malleability-\nsafe; second, by encouraging spending unconfirmed change).\n\nLuke"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-21T07:48:39",
                "message_text_only": "On Wed, Oct 21, 2015 at 6:18 AM, Luke Dashjr via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> On Monday, October 19, 2015 2:01:04 PM Christian Decker via bitcoin-dev wrote:\n>> The proposal is implemented (see below), by computing the normalized\n>> transaction ID when adding them to the UTXO and storing them along with the\n>> coin state. OP_CHECKSIGEX mostly duplicates OP_CHECKSIG and\n>> OP_CHECKMULTISIG, but I'm hoping somebody can give me some pointers into\n>> how to best refactor the common functionality into reusable blocks. And the\n>> annotating incoming transactions with their normalized inputs is a bit\n>> cumbersome, maye somebody has some pointers here as well?\n>\n> This doesn't completely close malleability (which should be documented in the\n> BIP), so I'm not sure it's worth the cost, especially if closing malleability\n> later on would need more. How about specifying flags upfront in the UTXO-\n> creating transaction specifying which parts the signature will cover? This\n> would allow implementation of fully malleability-proof wallets.\n>\n> Additionally, you have a flag to control whether the opcode behaves as VERIFY\n> or not. Non-VERIFY is not possible as a softfork (without doing a second/new\n> P2SH) since it can be negated.\n\nFlagability cannot work recursively which is necessary for any\nimprovement to be useful for multi-phase protocols. (which, I think,\nis the only real application of this class of improvement-- third\nparty mutation can be prevented by enforced canonical encodings;)\n\nOne still wants sighash flags--, but they're going to inherently\nresult in malleability.\n\nI'm still sad that uniform segregated witeness is so hard to deploy,\nadding another id to every utxo set won't be a nice cost. :( But I\nhave been trying for a long time to come up with anything better and\nnot being successful."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-21T08:26:47",
                "message_text_only": "On Wed, Oct 21, 2015 at 7:48 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> I'm still sad that uniform segregated witeness is so hard to deploy,\n> adding another id to every utxo set won't be a nice cost. :( But I\n> have been trying for a long time to come up with anything better and\n> not being successful.\n\nOh good. Luke solved it.\n\nTo deploy SW without a disruptive flag day this encoding could be used:\n\nA new P2SH like scriptPubkey type is defined. In the soft-fork, the\nscriptsig for this scriptPubkey is required to be empty.\n\nSignatures are not covered under txid, but carried along side. Then\ncommitted to in blocks in a separate hashtree.\n\nThe only disadvantage to the approach used in elements alpha that I\ncan come up with so far (in the few minutes since luke turned my can't\ninto a can) is that that the approach in EA did not disrupt the normal\nrelay handling process, and this would, since relay that transports\nthe extradata either needs to use a different hash that includes the\nwitness, or have a separate mechanism for witness transport."
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-21T08:49:26",
                "message_text_only": "On Wed, Oct 21, 2015 at 10:26 AM Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Oct 21, 2015 at 7:48 AM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> > I'm still sad that uniform segregated witeness is so hard to deploy,\n> > adding another id to every utxo set won't be a nice cost. :( But I\n> > have been trying for a long time to come up with anything better and\n> > not being successful.\n>\n> Oh good. Luke solved it.\n>\n> To deploy SW without a disruptive flag day this encoding could be used:\n>\n> A new P2SH like scriptPubkey type is defined. In the soft-fork, the\n> scriptsig for this scriptPubkey is required to be empty.\n>\n> Signatures are not covered under txid, but carried along side. Then\n> committed to in blocks in a separate hashtree.\n>\n>\nIsn't that sort of what this BIP describes as well? Except that we use the\nscriptSig to transport the signatures internally to the transactions and\nstrip them when it comes to signing/checking? The wire format and transport\nof transactions do not change so old clients continue to fetch and process\ntransactions as before, they just can't verify the TX. Blocks still\nreference the instance but verification uses the stripped TX with the\nsignatures on the side, etc.\n\n\n> The only disadvantage to the approach used in elements alpha that I\n> can come up with so far (in the few minutes since luke turned my can't\n> into a can) is that that the approach in EA did not disrupt the normal\n> relay handling process, and this would, since relay that transports\n> the extradata either needs to use a different hash that includes the\n> witness, or have a separate mechanism for witness transport.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/caeecce7/attachment-0001.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2015-10-21T08:50:45",
                "message_text_only": "Ok, so the normalization step could add a sorting step for inputs/outputs\n(which is going to be nasty for SIGHASH_SINGLE), that would solve the issue.\n\nOn Wed, Oct 21, 2015 at 10:49 AM Christian Decker <\ndecker.christian at gmail.com> wrote:\n\n> On Wed, Oct 21, 2015 at 10:26 AM Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n>\n>> On Wed, Oct 21, 2015 at 7:48 AM, Gregory Maxwell <gmaxwell at gmail.com>\n>> wrote:\n>> > I'm still sad that uniform segregated witeness is so hard to deploy,\n>> > adding another id to every utxo set won't be a nice cost. :( But I\n>> > have been trying for a long time to come up with anything better and\n>> > not being successful.\n>>\n>> Oh good. Luke solved it.\n>>\n>> To deploy SW without a disruptive flag day this encoding could be used:\n>>\n>> A new P2SH like scriptPubkey type is defined. In the soft-fork, the\n>> scriptsig for this scriptPubkey is required to be empty.\n>>\n>> Signatures are not covered under txid, but carried along side. Then\n>> committed to in blocks in a separate hashtree.\n>>\n>>\n> Isn't that sort of what this BIP describes as well? Except that we use the\n> scriptSig to transport the signatures internally to the transactions and\n> strip them when it comes to signing/checking? The wire format and transport\n> of transactions do not change so old clients continue to fetch and process\n> transactions as before, they just can't verify the TX. Blocks still\n> reference the instance but verification uses the stripped TX with the\n> signatures on the side, etc.\n>\n>\n>> The only disadvantage to the approach used in elements alpha that I\n>> can come up with so far (in the few minutes since luke turned my can't\n>> into a can) is that that the approach in EA did not disrupt the normal\n>> relay handling process, and this would, since relay that transports\n>> the extradata either needs to use a different hash that includes the\n>> witness, or have a separate mechanism for witness transport.\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151021/1328d072/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-21T10:14:01",
                "message_text_only": "On Wed, Oct 21, 2015 at 8:49 AM, Christian Decker\n<decker.christian at gmail.com> wrote:\n> Isn't that sort of what this BIP describes as well? Except that we use the\n> scriptSig to transport the signatures internally to the transactions and\n> strip them when it comes to signing/checking? The wire format and transport\n> of transactions do not change so old clients continue to fetch and process\n> transactions as before, they just can't verify the TX. Blocks still\n> reference the instance but verification uses the stripped TX with the\n> signatures on the side, etc.\n\n\"sort of\"\n\nUsing the sighash normalization doesn't allow creating a utxo set or\nscanning the blockchain while only transferring ~1/3rd of the data\n(allowing for reduced security fast start, and private lite wallets);\nit requires txin ID rewriting when the witness changes on a parent\ntransaction; it requires hashing each transaction multiple times (for\nthe normalized ID, and the old ID), it requires storing two IDs for\nevery transaction in the UTXO set. -- but indeed, it's easier to\ndeploy (though not infinitely easier as I thought before)."
            }
        ],
        "thread_summary": {
            "title": "Normalized transaction IDs",
            "categories": [
                "bitcoin-dev",
                "BIP"
            ],
            "authors": [
                "s7r",
                "Tier Nolan",
                "Luke Dashjr",
                "Gregory Maxwell",
                "Danny Thorpe",
                "Christian Decker"
            ],
            "messages_count": 24,
            "total_messages_chars_count": 41130
        }
    },
    {
        "title": "[bitcoin-dev] Mailing List Moderation Now Active.",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2015-10-22T01:29:11",
                "message_text_only": "Hi all,\n\nWe aim to make the list more contentful and productive; to get devs to\nresubscribe we need to maximize high-value interactions.\n\n  - Currently 5 moderators.  BtcDrak, me, G1lius, Kanzure and Johnathan.\n    As far as I know we're entirely unconnected, and we cover Asia/Europe/US.\n\n  - Moderation will last 3 months.  Then we'll have an unmoderated on-list\n    discussion as to whether it should continue, or change.\n\n  - Appeals for/against moderation decisions should be directed to Jeff, who\n    will have final say.  General moderation feedback just send to me.\n\n  - All rejected posts will be forwarded to a list for public viewing:\n    https://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/\n\n  - Everyone starts moderated, and the mod bit gets cleared as they post.\n    It gets set again if someone notices or reports a violation.\n\n  - Moderation rules:\n    - No offensive posts, no personal attacks.\n    - Posts must concern the near-term development of the bitcoin core\n      code or bitcoin protocol.\n    - Posts must contribute to bitcoin development.\n    - Generally encouraged: patches, notification of pull requests, BIP\n      proposals, academic paper announcements.  And discussions that follow.\n    - Generally discouraged: shower thoughts, wild speculation, jokes, +1s,\n      non-technical bitcoin issues, rehashing settled topics without new\n      data, moderation concerns.\n    - Detailed patch discussion generally better on the GitHub PR.\n    - Meta-discussion is better on bitcoin-discuss:\n      https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-discuss\n\n  - We will make mistakes, we are human, so please be patient.\n\nYour friendly moderators."
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-23T11:30:22",
                "message_text_only": ">\n>     - Posts must concern the near-term development of the bitcoin core\n>       code or bitcoin protocol.\n>\n\nAre block size discussions considered acceptable, then?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151023/8d456d44/attachment.html>"
            },
            {
                "author": "xor",
                "date": "2015-10-27T15:21:58",
                "message_text_only": "On Thursday, October 22, 2015 11:59:11 AM Rusty Russell via bitcoin-dev wrote:\n>   - All rejected posts will be forwarded to a list for public viewing:\n>     https://lists.ozlabs.org/pipermail/bitcoin-dev-moderation/\n\nThey are not readable, they all say:\n> An embedded message was scrubbed...\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part.\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151027/63721ace/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2015-10-28T10:26:56",
                "message_text_only": "This post by Gavin got rejected by the moderators.\n\nWithout a doubt this moderation policy is already a disaster. I'm fully\nexpecting this message to get rejected too, but so you can see it Rusty: so\nfar in the reject bin there are messages from:\n\n   - Well known uber-troll Gavin Andresen\n   - And his partner in crime, Sergio Damian Lerner\n   - Someone discussing a bug\n   - Someone who wants to discuss CLTV\n   - Someone pointing out that censorship of technical discussion is rarely\n   a good idea\n   - Someone pointing out that censorship of people complaining about\n   censorship is also taking place.\n\nWTF?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/254d91ec/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Mailing List Moderation Now Active.",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Mike Hearn",
                "xor"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3425
        }
    },
    {
        "title": "[bitcoin-dev] [Bitcoin-development] Reusable payment codes",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2015-10-22T05:53:59",
                "message_text_only": "On Friday, April 24, 2015 8:00:46 PM Justus Ranvier wrote:\n> This link contains an RFC for a new type of Bitcoin address called a\n> \"payment code\"\n\nSorry for the late review. I'm concerned with the \"notification address\" \nrequirement, which entails address reuse and blockchain spam. Since it entails \naddress reuse, the recipient is forced to either leave them unspent forever \n(bloating the UTXO set), or spend it which potentially compromises the private \nkey, and (combined with the payment code) possibly as much as the entire \nwallet.\n\nInstead, I suggest making it a single zero-value OP_RETURN output with two \npushes: 1) a hash of the recipient's payment code, and 2) the encrypted \npayment code. This can be searched with standard bloom filters, or indexed \nwith whatever other optimised algorithms are desired. At the same time, it \nnever uses any space in the UTXO set, and never needs to be \nspent/mixed/dusted.\n\nLuke"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-10-22T14:55:14",
                "message_text_only": "On 22/10/15 00:53, Luke Dashjr wrote:\n> Sorry for the late review. I'm concerned with the \"notification address\" \n> requirement, which entails address reuse and blockchain spam. Since it entails \n> address reuse, the recipient is forced to either leave them unspent forever \n> (bloating the UTXO set), or spend it which potentially compromises the private \n> key, and (combined with the payment code) possibly as much as the entire \n> wallet.\n> \n> Instead, I suggest making it a single zero-value OP_RETURN output with two \n> pushes: 1) a hash of the recipient's payment code, and 2) the encrypted \n> payment code. This can be searched with standard bloom filters, or indexed \n> with whatever other optimised algorithms are desired. At the same time, it \n> never uses any space in the UTXO set, and never needs to be \n> spent/mixed/dusted.\n\nThe notification transaction portion is my least-favorite portion of the\nspec, but I don't see any alternatives that provide an unambiguous\nimprovement, including your suggestion.\n\nOne of the most highly-weighted goals of this proposal is to be usable\non as many mobile/light wallets as possible.\n\nI know for sure that all existing platforms for balance querying index\nby address. Support for bloom filters or other querying methods is less\ncomprehensive, meaning the set of wallets that can support payment codes\nwould be smaller.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18442 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/915cb984/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/915cb984/attachment.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-22T20:43:16",
                "message_text_only": "On Thursday, October 22, 2015 2:55:14 PM Justus Ranvier wrote:\n> On 22/10/15 00:53, Luke Dashjr wrote:\n> > Sorry for the late review. I'm concerned with the \"notification address\"\n> > requirement, which entails address reuse and blockchain spam. Since it\n> > entails address reuse, the recipient is forced to either leave them\n> > unspent forever (bloating the UTXO set), or spend it which potentially\n> > compromises the private key, and (combined with the payment code)\n> > possibly as much as the entire wallet.\n> > \n> > Instead, I suggest making it a single zero-value OP_RETURN output with\n> > two pushes: 1) a hash of the recipient's payment code, and 2) the\n> > encrypted payment code. This can be searched with standard bloom\n> > filters, or indexed with whatever other optimised algorithms are\n> > desired. At the same time, it never uses any space in the UTXO set, and\n> > never needs to be\n> > spent/mixed/dusted.\n> \n> The notification transaction portion is my least-favorite portion of the\n> spec, but I don't see any alternatives that provide an unambiguous\n> improvement, including your suggestion.\n> \n> One of the most highly-weighted goals of this proposal is to be usable\n> on as many mobile/light wallets as possible.\n> \n> I know for sure that all existing platforms for balance querying index\n> by address. Support for bloom filters or other querying methods is less\n> comprehensive, meaning the set of wallets that can support payment codes\n> would be smaller.\n\nNo, they just need to improve their software, and only to support receiving \nwith payment codes (not sending to them). BIPs should in general not be \ndesigned around current software, especially in this case where there is no \nbenefit to doing so (since it requires software upgrades anyway).\n\nLuke"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-10-22T20:58:58",
                "message_text_only": "On 22/10/15 15:43, Luke Dashjr wrote:\n> BIPs should in general not be \n> designed around current software\n\nI strongly disagree with this statement.\n\nThere is a version byte in the payment code specification for a reason.\n\nVersion 1 payment codes are designed to be deployable by wallet\nimplementers today, without requiring them to wait on any network-level\nchanges whatsoever, which includes IsStandard() redefinitions, or\nyet-to-be-invented-and-deployed filtering schemes.\n\nAs far as I know, multi-push OP_RETURN outputs are not standard\ntransactions and so wallet users can not rely on transactions containing\nthem to be relayed through the network, therefore any improvement to the\nprotocol which requires that feature is not appropriate for version 1.\n\nWhen additional capabilities are deployed in the network such that\nBitcoin users can rely on their existence, that would be a great time to\nspecify a version 2 payment code that uses those features and encourage\nusers to upgrade (which should be a fairly smooth process since their\nactual keys don't need to change).\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18442 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/d079a180/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/d079a180/attachment-0001.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-22T21:47:27",
                "message_text_only": "On Thursday, October 22, 2015 8:58:58 PM Justus Ranvier wrote:\n> I strongly disagree with this statement.\n\nWell, I strongly disagree with adopting the BIP as it stands.\n\n> Version 1 payment codes are designed to be deployable by wallet\n> implementers today, without requiring them to wait on any network-level\n> changes whatsoever, which includes IsStandard() redefinitions, or\n> yet-to-be-invented-and-deployed filtering schemes.\n\nNo, those are not network-level changes. They are mere software changes that \ncan be deployed along with the rest of the proposal.\n\n> As far as I know, multi-push OP_RETURN outputs are not standard\n> transactions and so wallet users can not rely on transactions containing\n> them to be relayed through the network, therefore any improvement to the\n> protocol which requires that feature is not appropriate for version 1.\n\n\"Standard\" means defined in a BIP. To date, there are no standard \ntransactions using OP_RETURN period. IsStandard is a node policy that should \nhave no influence on future BIPs.\n\n> When additional capabilities are deployed in the network such that\n> Bitcoin users can rely on their existence, that would be a great time to\n> specify a version 2 payment code that uses those features and encourage\n> users to upgrade (which should be a fairly smooth process since their\n> actual keys don't need to change).\n\nSuch changes should not be made until there is a standard for them.\n\nLuke"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-10-22T22:01:10",
                "message_text_only": "On 22/10/15 16:47, Luke Dashjr wrote:\n> Well, I strongly disagree with adopting the BIP as it stands.\n\nThat's fine. Nobody is required to adopt an informational BIP if they do\nnot wish to do so.\n\n> No, those are not network-level changes. They are mere software changes that \n> can be deployed along with the rest of the proposal.\n\nThey are \"mere software changes\" outside the control of the users and\nwallet developers who may wish to use and implement payment codes, so\nare indistinguishable from a network-level change.\n\n> \"Standard\" means defined in a BIP. To date, there are no standard \n> transactions using OP_RETURN period. IsStandard is a node policy that should \n> have no influence on future BIPs.\n\nSince Bitcoin Core 0.11, 80 byte OP_RETURN transactions are standard, so\nthat's what payment codes use:\n\nhttps://github.com/bitcoin/bitcoin/commit/fcf646c\n\nWhether or not it \"should\" have an influence, it is an absolute fact\nthat Bitcoin users are affected by it.\n\nA user whose transactions are not relayed or mined doesn't care about\nthe politics surrounding node policy.\n\nDesigning standards without putting the needs of its intended users\nfirst is a great way to see the standard fail.\n\n> Such changes should not be made until there is a standard for them.\n\nHave you ever heard the term \"permissionless innovation\" by chance?\nParticularly in reference to Bitcoin?\n\nIf you don't like payment codes, then don't use them.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18442 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/31d89835/attachment-0001.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/31d89835/attachment-0001.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2015-10-23T01:22:48",
                "message_text_only": "On Thu, Oct 22, 2015 at 03:58:58PM -0500, Justus Ranvier via bitcoin-dev wrote:\n> On 22/10/15 15:43, Luke Dashjr wrote:\n> > BIPs should in general not be \n> > designed around current software\n> \n> I strongly disagree with this statement.\n> \n> There is a version byte in the payment code specification for a reason.\n> \n> Version 1 payment codes are designed to be deployable by wallet\n> implementers today, without requiring them to wait on any network-level\n> changes whatsoever, which includes IsStandard() redefinitions, or\n> yet-to-be-invented-and-deployed filtering schemes.\n> \n> As far as I know, multi-push OP_RETURN outputs are not standard\n> transactions and so wallet users can not rely on transactions containing\n> them to be relayed through the network, therefore any improvement to the\n> protocol which requires that feature is not appropriate for version 1.\n\nFWIW multi-push OP_RETURN outputs will be standard in v0.12.0:\n\nhttps://github.com/bitcoin/bitcoin/pull/6424\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000066dc6b040d8be42153f784df37745b46c4ad667e0788781\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/ee1cb995/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2015-10-23T15:57:14",
                "message_text_only": "On 22/10/15 20:22, Peter Todd wrote:\n> FWIW multi-push OP_RETURN outputs will be standard in v0.12.0:\n> \n> https://github.com/bitcoin/bitcoin/pull/6424\n> \n\nAs I said before, once the prerequisites for a better notification\nmethod are usable in the network, I'd love to define a version 2 payment\ncode that uses such an better notification system.\n\nIn the meantime. every block mined shows very consistent 70% address reuse.\n\nAnything that can bring that number down is a good thing. Even if\nversion 1 payment codes could only potentially drop that number from 70%\nto 30% instead of to 0%, they'd still be worth using while we wait for\nversion 2.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xEAD9E623.asc\nType: application/pgp-keys\nSize: 18442 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151023/bcaecfa8/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151023/bcaecfa8/attachment.sig>"
            },
            {
                "author": "Kristov Atlas",
                "date": "2015-10-22T21:05:39",
                "message_text_only": "The consequence of previous ECDH address proposals \"not designing around\ncurrent software\" is a sustained ~70% of transactions reusing addresses, as\nyou saw in my Reddit post recently.\n\nIf you have a fear that an inferior proposal will gain popularity, you can\nalways propose a superior one. If it's *actually* superior, it will win out.\n\nOn Thu, Oct 22, 2015 at 4:43 PM, Luke Dashjr via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> On Thursday, October 22, 2015 2:55:14 PM Justus Ranvier wrote:\n> > On 22/10/15 00:53, Luke Dashjr wrote:\n> > > Sorry for the late review. I'm concerned with the \"notification\n> address\"\n> > > requirement, which entails address reuse and blockchain spam. Since it\n> > > entails address reuse, the recipient is forced to either leave them\n> > > unspent forever (bloating the UTXO set), or spend it which potentially\n> > > compromises the private key, and (combined with the payment code)\n> > > possibly as much as the entire wallet.\n> > >\n> > > Instead, I suggest making it a single zero-value OP_RETURN output with\n> > > two pushes: 1) a hash of the recipient's payment code, and 2) the\n> > > encrypted payment code. This can be searched with standard bloom\n> > > filters, or indexed with whatever other optimised algorithms are\n> > > desired. At the same time, it never uses any space in the UTXO set, and\n> > > never needs to be\n> > > spent/mixed/dusted.\n> >\n> > The notification transaction portion is my least-favorite portion of the\n> > spec, but I don't see any alternatives that provide an unambiguous\n> > improvement, including your suggestion.\n> >\n> > One of the most highly-weighted goals of this proposal is to be usable\n> > on as many mobile/light wallets as possible.\n> >\n> > I know for sure that all existing platforms for balance querying index\n> > by address. Support for bloom filters or other querying methods is less\n> > comprehensive, meaning the set of wallets that can support payment codes\n> > would be smaller.\n>\n> No, they just need to improve their software, and only to support receiving\n> with payment codes (not sending to them). BIPs should in general not be\n> designed around current software, especially in this case where there is no\n> benefit to doing so (since it requires software upgrades anyway).\n>\n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/e2f8647f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Reusable payment codes",
            "categories": [
                "bitcoin-dev",
                "Bitcoin-development"
            ],
            "authors": [
                "Kristov Atlas",
                "Luke Dashjr",
                "Justus Ranvier",
                "Peter Todd"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 14933
        }
    },
    {
        "title": "[bitcoin-dev] [patch] Switching Bitcoin Core to sqlite db",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2015-10-22T21:26:42",
                "message_text_only": "Here is the beginnings of an implementation to replace leveldb with sqlite:\nhttps://github.com/jgarzik/bitcoin/tree/2015_sqlite\n\nIt builds, but still needs work before passing tests.\n\nIt was noted that leveldb is unmaintained, and this is part of researching\nalternatives that are maintained and reliable.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/751780a6/attachment.html>"
            },
            {
                "author": "Patrick Strateman",
                "date": "2015-10-22T21:54:14",
                "message_text_only": "Benchmarks?\n\nI cant imagine that's very fast.\n\nOn 10/22/2015 02:26 PM, Jeff Garzik via bitcoin-dev wrote:\n> Here is the beginnings of an implementation to replace leveldb with\n> sqlite: https://github.com/jgarzik/bitcoin/tree/2015_sqlite\n>\n> It builds, but still needs work before passing tests.\n>\n> It was noted that leveldb is unmaintained, and this is part of\n> researching alternatives that are maintained and reliable.\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/a4fb1966/attachment.html>"
            },
            {
                "author": "Joseph Gleason \u2448",
                "date": "2015-10-22T21:56:18",
                "message_text_only": "I have done a lot of recent work on local key value stores, mostly for a\njava electrum server I am working on.\n\nI'd suggest considering LMDB.  One downside is that it is memory mapped so\n32-bit systems that need over 2gb of storage are right out.  Other than\nthat, it is quite fast and seems reliable in my testing.\n\n\nOn Thu, Oct 22, 2015 at 2:37 PM Jeff Garzik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Here is the beginnings of an implementation to replace leveldb with\n> sqlite: https://github.com/jgarzik/bitcoin/tree/2015_sqlite\n>\n> It builds, but still needs work before passing tests.\n>\n> It was noted that leveldb is unmaintained, and this is part of researching\n> alternatives that are maintained and reliable.\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151022/50d97fdf/attachment.html>"
            },
            {
                "author": "Jonas Schnelli",
                "date": "2015-10-23T06:53:20",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n> Here is the beginnings of an implementation to replace leveldb\n> with sqlite: https://github.com/jgarzik/bitcoin/tree/2015_sqlite\n> \n> It builds, but still needs work before passing tests.\n\nNice work!\n\nAlthough not sure if we should focus directly on sqlite4 (could be\noptional with a configure flag and a subtree [until stable], sqlite3\nsupported over depends).\n\nAlso i personally would recommend to not implement it as a\nreplacement, instead, support multiple backends (wrapper header /\ndifferent wrapper implementations [leveldb / sqlite3 / sqlite4]). But\n\u2013 agreed \u2013 should not be the focus, but a nice additional flexibility\nif it not require much more work.\nAnd \u2013 in theory \u2013 multiple database back-ends would allow migration.\n\nBefore investigating to deep, i think we need a dbwrapper bench tool\nthat represents our needs and our style how we hit the database.\nGavins recently added bench target / bench environment could be used\nfor that.\n\n/jonas\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAEBAgAGBQJWKdlgAAoJECnUvLZBb1Ps7J8P/2L6215fd0rWGv5uvbLSnQvm\nhy1T2AaOfH5HXd2m95icaKYk+ugvQAL80Q/67YwZbPLsT4fErgegw8n75Z6nh/Pc\nOJ1EtAvD+Kc/Vm0Wcvt421HXwnm4f+j+8eoEvpG6DdC8gfIG+efhM7DljeNbPFrA\nieNe7XrQ1EZ29lMzpQv0nx3bi6tUHOWuazk82B6vnK49MjH7nrUFipcc18nXbSpM\nZKjQakXmfqIBG8QP9ZUYUlW4aoG0oaOoZnGjQA2LeXBJpIPLpE/WPg0XaXubC+No\n232CJNtNyUOmjkb2qbep6vSYgqGJNy1HbCU5y3qooxJhFnKdo63CQsyJKSpL/ssi\n0lWraNxjbacxsBn+63In3wEkj02orwm2zTO4I77wCrZmJgpvBFb9bZWTeL8DCYSG\nDTkZoKWEK74xvm+dNpEWXK9Lm1ltfyhPdaFeMoRDub4w2uuYlk3KuD8Vdy81HYJb\nsak8FbkiWw9xx2OP9+G56Arf9W6mnJ3YHJGrY4SXeRAfuNYwGFHIGt6I1JobuHy4\nVWmcHuooz/Q9JLUu3Rr3HsEdXYgCmgmWuzTgWG+Hx92Y6XLWV5pOX+vFRO6J5fSm\naTYPD4GsTM3FROXw5ezlXJ+2y1+ITzmrfm03fEDQvoIyH0TwBqBc5sMBBkma5DDR\n0HUthPHWCD+AxbBPbRVa\n=CUMX\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Lucas Betschart",
                "date": "2015-10-23T07:45:09",
                "message_text_only": "Facebook has a LevelDB fork which is maintained.\nIt's called RocksDB and the API seems to be nearly the same as for LevelDB,\nthus maybe easy to replace: http://rocksdb.org/\nhttps://github.com/facebook/rocksdb\n\nAlthough I don't know if we might have some negative effects for our\nuse-case since RocksDB was optimized for big databases running on multiple\ncores.\n\n\n2015-10-22 23:26 GMT+02:00 Jeff Garzik via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org>:\n\n> Here is the beginnings of an implementation to replace leveldb with\n> sqlite: https://github.com/jgarzik/bitcoin/tree/2015_sqlite\n>\n> It builds, but still needs work before passing tests.\n>\n> It was noted that leveldb is unmaintained, and this is part of researching\n> alternatives that are maintained and reliable.\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151023/2f7f59b1/attachment-0001.html>"
            },
            {
                "author": "Sean Lynch",
                "date": "2015-10-28T20:28:00",
                "message_text_only": "On Fri, Oct 23, 2015 at 1:23 AM Lucas Betschart via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Facebook has a LevelDB fork which is maintained.\n> It's called RocksDB and the API seems to be nearly the same as for\n> LevelDB, thus maybe easy to replace: http://rocksdb.org/\n> https://github.com/facebook/rocksdb\n>\n> Although I don't know if we might have some negative effects for our\n> use-case since RocksDB was optimized for big databases running on multiple\n> cores.\n>\n\nWhile RocksDB is pretty decent, note that it's optimized for flash. Not\nsure how well it will work on spinning disks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/a9c13b86/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2015-10-28T21:11:47",
                "message_text_only": "On Wed, Oct 28, 2015 at 4:28 PM, Sean Lynch <seanl at literati.org> wrote:\n\n> On Fri, Oct 23, 2015 at 1:23 AM Lucas Betschart via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Facebook has a LevelDB fork which is maintained.\n>> It's called RocksDB and the API seems to be nearly the same as for\n>> LevelDB, thus maybe easy to replace: http://rocksdb.org/\n>> https://github.com/facebook/rocksdb\n>>\n>> Although I don't know if we might have some negative effects for our\n>> use-case since RocksDB was optimized for big databases running on multiple\n>> cores.\n>>\n>\n> While RocksDB is pretty decent, note that it's optimized for flash. Not\n> sure how well it will work on spinning disks.\n>\n\nThat's OK for our purposes.  We have a huge database which already\nincentivized having zero seek time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/4d05bbae/attachment.html>"
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-23T10:30:37",
                "message_text_only": "On Thursday 22 Oct 2015 17:26:42 Jeff Garzik via bitcoin-dev wrote:\n> It was noted that leveldb is unmaintained, and this is part of researching\n> alternatives that are maintained and reliable.\n\nApart from it being unmaintained, any links to what are problems with levelDB?"
            },
            {
                "author": "Douglas Roark",
                "date": "2015-10-26T18:06:56",
                "message_text_only": "On 2015/10/23 03:30, Tom Zander via bitcoin-dev wrote:\n> On Thursday 22 Oct 2015 17:26:42 Jeff Garzik via bitcoin-dev wrote:\n>> It was noted that leveldb is unmaintained, and this is part of researching\n>> alternatives that are maintained and reliable.\n> \n> Apart from it being unmaintained, any links to what are problems with levelDB?\n\nWhile not exactly the most rigorous link,\nhttps://en.wikipedia.org/wiki/LevelDB#Bugs_and_Reliability seems like an\nokay place to start. One thing I can attest to is that, when Armory used\nLevelDB (0.8 - 0.92, IIRC), quite a few users had DB corruption issues,\nparticularly on Windows. Even when a switch to LMDB occurred for 0.93,\nloads of complaints would come in from users whose LevelDB-based Core\nDBs would fail. I know that the guy who moved Armory over to LMDB would\nlove to have more time in the day so that he could write a Core patch\nthat does the same. It's a very sore spot for him.\n\n(FWIW, LMDB seems to work quite nicely, at least once you patch up the\nsource a little bit. The latest version is also compatible with Core's\ncross-compiling scheme. I'd love to see it added to Core one day.)\n\nDoug"
            },
            {
                "author": "Tom Zander",
                "date": "2015-10-28T15:52:53",
                "message_text_only": "On Monday 26 Oct 2015 11:06:56 Douglas Roark via bitcoin-dev wrote:\n> While not exactly the most rigorous link,\n> https://en.wikipedia.org/wiki/LevelDB#Bugs_and_Reliability seems like an\n> okay place to start.\n\nThanks for that link!\n\nAnother Google open source product I'll avoid like the plague ;)"
            },
            {
                "author": "telemaco",
                "date": "2015-10-29T06:57:39",
                "message_text_only": "Why not allow two options:\n\n1/ a default RocksDB/SQLite/LevelDB (whatever is decided)\n2/ alternative provide instructions for connection to any other rdbms \nusing odbc or jdbc.\n\nWhy not allowing async disk writes or incredibly fast database systems \nif someone wants to have a node in a very fast datacenter or connected \nwith their existing leveraged dataservers. It is the traditional \napproach to just use the open standard for database connectivity.\n\nAny person or any organization would just need to have one machine with \ntheir bitcoin node with a rdbms client installed (SAP Sybase client, or \noracle client, or microsoft). The bitcoin node would just store their \ndata using the odbc/jdbc protocol on ANY rdbms installed anywhere in \ntheir organization (other machine or the same). They would just need to \nissue a \"create table\" with a very simple table structure and they would \nbenefit from async and indexes and using their already licensed, and \nconfigured system of their choosing, with bitcoin information being \navailable to thousands of software packages and available aswell to \nthousands of programmers that work with rdbms and not just \"RocksDB\" or \nsome obscure database system.\n\nWhy not \"outsource\" totally that data management part to the already \nexisting with decades of experience database world. People would be able \nto create incredibly easy bitcoin statistics/graphs/analisys with \nexisting software packages (hey even excel or libreoffice like) or \nconnect bitcoin data to their own sources and if so they chose analyze \nbitcoin data on a datawarehouse or any imaginable approach. Of course \nevery transaction would be have to do through the bitcoin node and only \nthe data management would be on rdbms side."
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-29T08:03:50",
                "message_text_only": "On Thursday, October 29, 2015 6:57:39 AM telemaco via bitcoin-dev wrote:\n> Why not allow two options:\n> \n> 1/ a default RocksDB/SQLite/LevelDB (whatever is decided)\n> 2/ alternative provide instructions for connection to any other rdbms\n> using odbc or jdbc.\n\nI predict this would be a disaster. UTXO storage is CONSENSUS-CRITICAL code.\nAny divergence in implementation behaviour, including bugs AND bugfixes, may \ncause consensus failure. For this to have a reasonable *hope* of working, we \nneed to choose one storage engine, and *will* need to maintain consensus-\ncompatibility of it ourselves (since nobody else cares).\n\nFixing LevelDB frankly seems like an easier task than switching to anything \nSQL-based, which would require a *lot* more *difficult-to-get-consensus-\ncompatible* code that we are all (or at least mostly) very unfamiliar with.\n\nResearch is fine, but let's be realistic about deployment.\n\nLuke"
            },
            {
                "author": "Simon Liu",
                "date": "2015-10-30T03:04:19",
                "message_text_only": "Storage of UTXO data looks like an implementation detail and thus one\nwould have thought that the choice of database would not increase the\nodds of consensus protocol failure.\n\nBtcd, a full node implementation written in Go, already provides a\ndatabase interface which supports different backends:\n\nhttps://github.com/btcsuite/btcd/tree/master/database\n\nGiven that UTXO storage is considered critical, it seems reasonable to\nlet a node operator decide for themselves if they want data stored in\nLevelDB (which is not fully ACID compliant) or a database like Sqlite,\nOracle, DB2 etc.\n\nIf the storage requirements for UTXO data are fairly simple, consisting\nmainly of puts and gets, there is a decent argument that using a\ndedicated key-value store provides superior performance over a\ntraditional SQL database.\n\nHowever, from a practical perspective, given that nodes operate on a\nrange of different hardware and even a little Raspberry Pi can run a\nfull node and keep up with the network, why not let those users with the\nresources to operate big iron databases do so?  It would be a good\nfeature to have.\n\n\nOn 10/29/2015 01:03 AM, Luke Dashjr via bitcoin-dev wrote:\n> I predict this would be a disaster. UTXO storage is CONSENSUS-CRITICAL code.\n> Any divergence in implementation behaviour, including bugs AND bugfixes, may \n> cause consensus failure. For this to have a reasonable *hope* of working, we \n> need to choose one storage engine, and *will* need to maintain consensus-\n> compatibility of it ourselves (since nobody else cares).\n> \n> Fixing LevelDB frankly seems like an easier task than switching to anything \n> SQL-based, which would require a *lot* more *difficult-to-get-consensus-\n> compatible* code that we are all (or at least mostly) very unfamiliar with.\n> \n> Research is fine, but let's be realistic about deployment.\n> \n> Luke\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-30T03:35:33",
                "message_text_only": "On Fri, Oct 30, 2015 at 3:04 AM, Simon Liu via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Given that UTXO storage is considered critical, it seems reasonable to\n\nThis sounds like a misunderstanding of what consensus criticial means.\nIt does not mean that it must be right (though obviously that is\npreferable) but that it must be _consistent_, between all nodes.\n\n> full node and keep up with the network, why not let those users with the\n> resources to operate big iron databases do so?  It would be a good\n> feature to have.\n\nBecause it provides no value, the data is opaque and propritarily\nencoded with a compression function which we may change from version\nto version, and because many of these alternatives are enormously\nslow; enough that they present problems with falling behind the\nnetwork even on high performance hardware.\n\nMoreover, additional functional which will not be sufficiently used\nwill not adequately maintained and result in increased maintains costs\nand more bugs."
            },
            {
                "author": "Peter R",
                "date": "2015-10-30T04:04:22",
                "message_text_only": "> On Oct 29, 2015, at 8:35 PM, Gregory Maxwell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> On Fri, Oct 30, 2015 at 3:04 AM, Simon Liu via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Given that UTXO storage is considered critical, it seems reasonable to\n> \n> This sounds like a misunderstanding of what consensus criticial means.\n> It does not mean that it must be right (though obviously that is\n> preferable) but that it must be _consistent_, between all nodes.\n\nCan you give a specific example of how nodes that used different database technologies might determine different answers to whether a given transaction is valid or invalid?  I\u2019m not a database expert, but to me it would seem that if all the unspent outputs can be found in the database, and if the relevant information about each output can be retrieved without corruption, then that\u2019s all that really matters as far as the database is concerned.\n\nLet\u2019s use an unspent pay-to-pubkey-hash output as an example: Alice spends this to Bob (she signs it properly), the TX propagates across the network and\u2026then what?  Do some nodes disagree on whether or not the TX is valid?  What exactly would they disagree on?  Are you suggesting that a database bug would cause some nodes to think the output was actually already spent, while others can correctly see that it\u2019s unspent?  Or maybe some nodes think the output doesn\u2019t exist while others do?  Or are you suggesting that the details about this output might be retrieved with errors from certain databases but correctly from others?  \n\nI\u2019d like a concrete example to help me understand why more than one implementation of something like the UTXO database would be unreasonable.    \n\nPeter"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-29T08:17:27",
                "message_text_only": "On Thu, Oct 29, 2015 at 6:57 AM, telemaco via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Why not \"outsource\" totally that data management part to the already\n> existing with decades of experience database world. People would be able to\n> create incredibly easy bitcoin statistics/graphs/analisys with existing\n> software packages (hey even excel or libreoffice like) or connect bitcoin\n> data to their own sources and if so they chose analyze bitcoin data on a\n> datawarehouse or any imaginable approach. Of course every transaction would\n> be have to do through the bitcoin node and only the data management would be\n> on rdbms side.\n\nThe word \"database\" is likely confusing people here.  This is not a\ndatabase in an ordinary sense.\n\nThe bitcoin core consensus engine requires a highly optimized ultra\ncompact data structure to perform the lookups for coin existence. The\ndata stored is highly compressed and very specialized, it would not be\nuseful to other applications.  Right now, on boring laptop hardware,\nduring network synchronization updates to this database run at over\n10,000 records per second, while the system is also busy doing the\nother validation chores of a node. This is backended by a high\nperformance transactional key value store.  The need for performance\nhere is essential to even keeping up with the network, it's not about\nenabling any kind of fancy querying (bitcoin core does not offer fancy\nquerying), it's about the base load that every node must handle to\nusably sync up and keep up with the Bitcoin network.\n\nThe backend can be swapped out for something else that provides the\nsame properties, but doing so does not give you any of the\ninspection/analytics that you're looking for.  Systems that do that\nexist, and they require databases taking hundreds of gigabytes of\nstorage and take days to weeks to import the network data.  They're\ngreat for what they're for, but they're not suitable for consensus use\nin the system for space efficiency, performance, and consensus\nconsistency reasons."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2015-10-30T04:28:47",
                "message_text_only": "On Fri, Oct 30, 2015 at 4:04 AM, Peter R <peter_r at gmx.com> wrote:\n> Can you give a specific example of how nodes that used different database technologies might determine different answers to whether a given transaction is valid or invalid?  I\u2019m not a database expert, but to me it would seem that if all the unspent outputs can be found in the database, and if the relevant information about each output can be retrieved without corruption, then that\u2019s all that really matters as far as the database is concerned.\n\nIf you add to those set of assumptions the handling of write ordering\nis the same (e.g. multiple updates in an change end up with the same\nentry surviving) and read/write interleave returning the same results\nthen it wouldn't.\n\nBut databases sometimes have errors which cause them to fail to return\nrecords, or to return stale data. And if those exist consistency must\nbe maintained; and \"fixing\" the bug can cause a divergence in\nconsensus state that could open users up to theft.\n\nCase in point, prior to leveldb's use in Bitcoin Core it had a bug\nthat, under rare conditions, could cause it to consistently return not\nfound on records that were really there (I'm running from memory so I\ndon't recall the specific cause).  Leveldb fixed this serious bug in a\nminor update.  But deploying a fix like this in an uncontrolled manner\nin the bitcoin network would potentially cause a fork in the consensus\nstate; so any such fix would need to be rolled out in an orderly\nmanner.\n\n> I\u2019d like a concrete example to help me understand why more than one implementation of something like the UTXO database would be unreasonable.\n\nIt's not unreasonable, but great care is required around the specifics.\n\nBitcoin consensus implements a mathematical function that defines the\noperation of the system and above all else all systems must agree (or\nelse the state can diverge and permit double-spends);  if you could\nprove that a component behaves identically under all inputs to another\nfunction then it can be replaced without concern but this is something\nthat cannot be done generally for all software, and proving\nequivalence even in special cases it is an open area of research.  The\ncase where the software itself is identical or nearly so is much\neasier to gain confidence in the equivalence of a change through\ntesting and review.\n\nWith that cost in mind one must then consider the other side of the\nequation-- utxo database is an opaque compressed representation,\nseveral of the posts here have been about desirability of blockchain\nanalysis interfaces, and I agree they're sometimes desirable but\naccess to the consensus utxo database is not helpful for that.\nSimilarly, other things suggested are so phenomenally slow that it's\nunlikely that a node would catch up and stay synced even on powerful\nhardware.  Regardless, in Bitcoin core the storage engine for this is\nfully internally abstracted and so it is relatively straight forward\nfor someone to drop something else in to experiment with; whatever the\nmotivation.\n\nI think people are falling into a trap of thinking \"It's a <database>,\nI know a <black box> for that!\"; but the application and needs are\nvery specialized here; no less than, say-- the table of pre-computed\nEC points used for signing in the ECDSA application. It just so\nhappens that on the back of the very bitcoin specific cryptographic\nconsensus algorithim there was a slot where a pre-existing high\nperformance key-value store fit; and so we're using one and saving\nourselves some effort.  If, in the future, Bitcoin Core adopts a\nmerkelized commitment for the UTXO it would probably need to stop\nusing any off-the-shelf key value store entirely, in order to avoid a\n20+ fold write inflation from updating hash tree paths (And Bram Cohen\nhas been working on just such a thing, in fact)."
            }
        ],
        "thread_summary": {
            "title": "Switching Bitcoin Core to sqlite db",
            "categories": [
                "bitcoin-dev",
                "patch"
            ],
            "authors": [
                "Jeff Garzik",
                "Lucas Betschart",
                "Patrick Strateman",
                "Tom Zander",
                "Simon Liu",
                "Luke Dashjr",
                "Gregory Maxwell",
                "Sean Lynch",
                "Douglas Roark",
                "Peter R",
                "telemaco",
                "Jonas Schnelli",
                "Joseph Gleason \u2448"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 22227
        }
    },
    {
        "title": "[bitcoin-dev] (no subject)",
        "thread_messages": [
            {
                "author": "cAmiLLe miGnon tRixia P. Anecito",
                "date": "2015-10-24T16:30:00",
                "message_text_only": "Sent from Yahoo Mail on Android\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151025/99498579/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "(no subject)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "cAmiLLe miGnon tRixia P. Anecito"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 215
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin URI for multiple addresses without using URLs",
        "thread_messages": [
            {
                "author": "Will White",
                "date": "2015-10-26T12:12:03",
                "message_text_only": "Dear bitcoin-dev,\n\nI'm making a website to tell my bitcoin wallet program to donate to more \nthan one address at a time. BIP71 needs me to include a URL to do this, \nand then the wallet has to find out the information from the URL. I'd \nprefer to just send my wallet a URI with all the information it needs to \nmake the donations.\n\nPlease would you tell me if this idea is BIP-able?\n\nWill"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2015-10-27T09:12:52",
                "message_text_only": "On 10/26/2015 01:12 PM, Will White via bitcoin-dev wrote:\n\n> I'm making a website to tell my bitcoin wallet program to donate to more\n> than one address at a time. BIP71 needs me to include a URL to do this,\n> and then the wallet has to find out the information from the URL. I'd\n> prefer to just send my wallet a URI with all the information it needs to\n> make the donations.\n\nYou can do this using a BIP70 payment request. It allows you to specify\nseveral scripts (addresses) to pay to, and the individual amounts for\neach script.\n\nBIP70 payment requests can be transmitted via NFC, Bluetooth, HTTP(S),\nMail... see\nhttps://github.com/schildbach/bitcoin-wallet/wiki/Payment-Requests for\nan overview."
            }
        ],
        "thread_summary": {
            "title": "Bitcoin URI for multiple addresses without using URLs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Will White",
                "Andreas Schildbach"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1088
        }
    },
    {
        "title": "[bitcoin-dev] Composite priority: combining fees and bitcoin-days into one number",
        "thread_messages": [
            {
                "author": "Jonathan Toomim",
                "date": "2015-10-28T04:26:52",
                "message_text_only": "Assigning 5% of block space based on bitcoin-days destroyed (BDD) and the other 95% based on fees seems like a rather awkward approach to me. For one thing, it means two code paths in pretty much every procedure dealing with a constrained resource (e.g. mempool, CNB). This makes code harder two write, harder to maintain, and slower to execute. As a result, some people have proposed eliminating BDD priority altogether. I have another idea.\n\nWe can create and maintain a conversion rate between BDD and fees to create a composite priority metric. Then we just do compPrio = BDD * conversionRate + txFee.\n\nHow do we calculate conversionRate? We want the following equation to be true:\n\nsum(fees) = sum(BDD) * conversionRate * BDDweight\n\nSo we sum up the mempool fees, and we sum up the mempool BDD. We get a policy statement from the command line for a relative weight of BDD vs fees (default 0.05), and then conversionRate = (summedFees / summedBDD) * BDDWeight.\n\nAs an optimization, rather than scanning over the whole mempool to calculate this, we can just store the sum and add or subtract from it each time a tx enters or leaves the mempool. In order to minimize drift (the BDD for a transaction changes over time), we recalculate the whole thing each time a new block is found.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151027/bb663efd/attachment.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-28T07:13:55",
                "message_text_only": "On Wednesday, October 28, 2015 4:26:52 AM Jonathan Toomim via bitcoin-dev \nwrote:\n> Assigning 5% of block space based on bitcoin-days destroyed (BDD) and the\n> other 95% based on fees seems like a rather awkward approach to me. For\n> one thing, it means two code paths in pretty much every procedure dealing\n> with a constrained resource (e.g. mempool, CNB). This makes code harder\n> two write, harder to maintain, and slower to execute.\n\nThis is all in the realm of node policy, which must be easy to \nmodify/customise in a flexible manner. So simplifying other code in a way that \nmakes the policy harder to configure is not a welcome change.\n\nThat is, by making the code simpler, if you make custom policies (such as the \ncurrent default) harder, it is better to leave the main code less simple.\n\nLuke"
            },
            {
                "author": "Jonathan Toomim",
                "date": "2015-10-28T22:41:39",
                "message_text_only": "On Oct 28, 2015, at 12:13 AM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> On Wednesday, October 28, 2015 4:26:52 AM Jonathan Toomim via bitcoin-dev\n> wrote:\n> \n> This is all in the realm of node policy, which must be easy to\n> modify/customise in a flexible manner. So simplifying other code in a way that\n> makes the policy harder to configure is not a welcome change.\n> \n> That is, by making the code simpler, if you make custom policies (such as the\n> current default) harder, it is better to leave the main code less simple.\n\nI think the only custom policy that this change would make harder to implement is the current default policy of 5% reserved space. Right now, in e.g. CreateNewBlock, you have two loops, each of which follows a completely different policy, plus additional code for corner cases like ensuring that a tx isn't added twice. If I were a miner and a mediocre programmer (which I actually am, on both accounts), and I wanted to change the mining policy, I would probably take a look at that code, groan, give up, and go sharpen my pickaxe instead.\n\nThis change could be written in an abstract way. We could define an API that is calibrated on the whole mempool, then has a method that takes transactions and returns priority scores.\n\nIf someone wanted to write a reserved-space algorithm in this priority API scheme, then they could just set it up so that most transactions would get a priority score between e.g. zero and 8999, and any transactions that were supposed to be prioritized would get a priority level over 9000. Easy enough?\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/a63666af/attachment.sig>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2015-10-29T00:55:53",
                "message_text_only": "On Wednesday, October 28, 2015 10:41:39 PM Jonathan Toomim wrote:\n> On Oct 28, 2015, at 12:13 AM, Luke Dashjr <luke at dashjr.org> wrote:\n> > On Wednesday, October 28, 2015 4:26:52 AM Jonathan Toomim via bitcoin-dev\n> > wrote:\n> > \n> > This is all in the realm of node policy, which must be easy to\n> > modify/customise in a flexible manner. So simplifying other code in a way\n> > that makes the policy harder to configure is not a welcome change.\n> > \n> > That is, by making the code simpler, if you make custom policies (such as\n> > the current default) harder, it is better to leave the main code less\n> > simple.\n> \n> I think the only custom policy that this change would make harder to\n> implement is the current default policy of 5% reserved space. Right now,\n> in e.g. CreateNewBlock, you have two loops, each of which follows a\n> completely different policy, plus additional code for corner cases like\n> ensuring that a tx isn't added twice. If I were a miner and a mediocre\n> programmer (which I actually am, on both accounts), and I wanted to change\n> the mining policy, I would probably take a look at that code, groan, give\n> up, and go sharpen my pickaxe instead.\n\nYes, I hope to improve the code significantly.\n\n> This change could be written in an abstract way. We could define an API\n> that is calibrated on the whole mempool, then has a method that takes\n> transactions and returns priority scores.\n\nTrying to communicate policies as simple numbers is significantly more \ncomplicated for the policy-writer than what we have now.\n\n> If someone wanted to write a reserved-space algorithm in this priority API\n> scheme, then they could just set it up so that most transactions would get\n> a priority score between e.g. zero and 8999, and any transactions that\n> were supposed to be prioritized would get a priority level over 9000. Easy\n> enough?\n\nNo, because it gets exponentially harder when there are more than two factors \ninvolved.\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "Composite priority: combining fees and bitcoin-days into one number",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jonathan Toomim",
                "Luke Dashjr"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6207
        }
    },
    {
        "title": "[bitcoin-dev] Compatibility requirements for hard or soft forks",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2015-10-28T14:06:22",
                "message_text_only": "I'm hoping this fits under the moderation rule of \"short-term changes to\nthe Bitcoin protcol\" (I'm not exactly clear on what is meant by\n\"short-term\"; it would be lovely if the moderators would start a thread on\nbitcoin-discuss to clarify that):\n\n\nShould it be a requirement that ANY one-megabyte transaction that is valid\nunder the existing rules also be valid under new rules?\n\nPro:  There could be expensive-to-validate transactions created and given a\nlockTime in the future stored somewhere safe. Their owners may have no\nother way of spending the funds (they might have thrown away the private\nkeys), and changing validation rules to be more strict so that those\ntransactions are invalid would be an unacceptable confiscation of funds.\n\nCon: It is extremely unlikely there are any such large, timelocked\ntransactions, because the Core code has had a clear policy for years that\n100,000-byte transactions are &quot;standard&quot; and are relayed and\nmined, and\nlarger transactions are not. The requirement should be relaxed so that only\nvalid 100,000-byte transaction under old consensus rules must be valid\nunder new consensus rules (larger transactions may or may not be valid).\n\n\nI had to wrestle with that question when I implemented BIP101/Bitcoin XT\nwhen deciding on a limit for signature hashing (and decided the right\nanswer was to support any \"non-attack\"1MB transaction; see\nhttps://bitcoincore.org/~gavin/ValidationSanity.pdf for more details).\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151028/061c73f2/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2015-10-31T03:43:13",
                "message_text_only": "Gavin Andresen via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n> Should it be a requirement that ANY one-megabyte transaction that is valid\n> under the existing rules also be valid under new rules?\n>\n> Pro:  There could be expensive-to-validate transactions created and given a\n> lockTime in the future stored somewhere safe. Their owners may have no\n> other way of spending the funds (they might have thrown away the private\n> keys), and changing validation rules to be more strict so that those\n> transactions are invalid would be an unacceptable confiscation of funds.\n\nNot just lockTime; potentially any tx locked away in a safe.\n\nConsider low-S enforcement: high chance a non-expert user will be unable\nto spend an old transaction.  They need to compromise their privacy\nand/or spend time and money.  A milder \"confiscation\" but a more likely\none.\n\nBy that benchmark, we should aim for \"reasonable certainty\".  A\ntransaction which would never have been generated by any known software\nis the minimum bar.  Adding \"...which would have to be deliberately\nstupid with many redundant OP_CHECKSIG etc\" surpasses it.  The only extra\nsafeguard I can think of is clear, widespread notification of the\nchange.\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Compatibility requirements for hard or soft forks",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Gavin Andresen"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2906
        }
    },
    {
        "title": "[bitcoin-dev] UTXO set commitment hash",
        "thread_messages": [
            {
                "author": "Bob McElrath",
                "date": "2015-10-30T16:36:04",
                "message_text_only": "The state of bitcoin transactions can be committed to in blocks by keeping two\nrunning hashes, one of unspent transaction outputs and one of spent transaction\noutputs.  A \"running hash\" $R$ I define as being computed by taking the previous\nvalue of the hash $r$, concatenating it with the new data $x$, and hashing it:\n\\[\n    R = hash(r|x).\n\\]\nIn the case of the UTXO set, the data $x$ can be taken to be the concatenation\n(txid|vout|amount) for all outputs, let's call this running hash hTXO.  Because\ndata cannot be \"removed\" from this set commitment, a second hash can be computed\nconsisting of the spent outputs, let's call this hSTXO.  Thus the pair of hashes\n(hTXO, hSTXO) is equivalent to a hash of all unspent outputs.  These hashes can\nbe placed into a block's Merkle tree by miners with a soft fork.  It can be\nreduced to a single hash hUXTO = hash(hTXO|hSXTO) if desired.\n\nBy defining *how* to compute (hTXO, hSXTO) we can define an implementation\nindependent definition of consensus that is extremely cheap to compute.  The\norder in which outputs are hashed is clearly important, but bitcoin has a well\ndefined ordering already in terms of the order in which transactions appear in\nblocks, and the sequential order of outputs.\n\nIn the recent discussion surrounding leveldb and jgarzik's new sqlite branch, it\nhas been brought up repeatedly by gmaxwell that this db is \"consensus critical\".\nAs a data structure storing the state of transactions, of course it's consensus\ncritical.  However there's only one right answer to what the set of UTXOs is.\nAny other result reported by the db is simply wrong.  By creating and publishing\n(hTXO, hSXTO), miners can publish their view of the transaction state, and any\nimplementation can be validated against it.\n\nAs I understand it, leveldb is in the bitcoin core source tree because it could\nhave bugs and give the wrong answer for a given UTXO (see BIP50).  This is worse\nthan a consensus failure, it's just wrong, and the argument that we have to keep\nleveldb around and maintain it because it could be wrong is pretty ugly, and I\ndon't think anyone actually wants to do this.  Let's not be wrong in the first\nplace, and let's choose databases based on performance and other considerations.\n\"Not being wrong\" should go without saying, regardless of implementation\ndetails.\n\nIt should be noted that (hTXO, hSXTO) can be computed twice, once without the\ndatabase (while processing a new block) and once by requesting the same data\nfrom the database.  So bad database behavior can be detected and prevented from\ncausing consensus failures.  And then we can remove leveldb from the core.\n\n--\nCheers, Bob McElrath\n\n\"For every complex problem, there is a solution that is simple, neat, and wrong.\"\n    -- H. L. Mencken \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 198 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20151030/387372b6/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "UTXO set commitment hash",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Bob McElrath"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3046
        }
    }
]