[
    {
        "title": "[bitcoin-dev] Bitcoin ungibility and inscribed sats",
        "thread_messages": [
            {
                "author": "Steve Lee",
                "date": "2023-04-01T07:29:59",
                "message_text_only": "\"want bitcoin to be money and money means different things for people in\nthis world\"\n\nI interpreted your above statement to mean that to some people,\ninscriptions/NFTs are money. That is what I was responding to.\n\n\n\nOn Fri, Mar 31, 2023 at 9:26\u202fAM alicexbt <alicexbt at protonmail.com> wrote:\n\n> Hi Steve and Bitcoin Developers,\n>\n> I have created a new thread as requested by one of the developers. I\n> respect him and the readers of this list.\n>\n> > \"want bitcoin to be money and money means different things for people in\n> this world\"\n>\n> > I think we can all agree that a property of money is fungibility, and by\n> its very definition NFTs are not fungible and thus not money.\n>\n> Inscriptions do not affect fungibility of bitcoin:\n>\n> - There is no token standard being used. These are just sats being\n> considered as inscription in an external protocol or explorer. Bitcoin\n> nodes do not consider them as something special.\n> - Users can always sell those inscribed sats or UTXO as normal bitcoin on\n> bisq or any exchange.\n> - They can use different amounts for it using tools like\n> https://raritygarden.inscribetheplanet.com/ which is created by super\n> testnet who is active dev in bitcoin and ln.\n> - Inscribed sats are different from Ethereum tokens because they will\n> never go to zero and you can always consolidate lot of them to use as\n> normal bitcoin.\n>\n> Bitcoin fungibility is anyways debatable and I cannot change anything\n> about it even though working on a coinjoin implmentation as some post mix\n> UTXOs are censored on some exchanges and its easy to identify them. Some\n> coinjoin implementation themselves work with chain analysis companies to\n> censor inputs used for rounds.\n>\n> Ordinals theory is a parallel universe in which some users believe in and\n> they have been trying to learn how bitcoin works. Example: I did call with\n> someone this evening to explain how PSBT and multisig works who never used\n> bitcoin before\n>\n> Developers are interested to build things and they have tried to create\n> BIP, DEX, look for libraries, ask questions, projects implementing PSBT etc.\n>\n> I do not live in first world country and do not attend bitdevs but always\n> wanted bitcoin to be here. I have tried my best but failed. Please let\n> people do what they want with bitcoin without changing consensus rules. It\n> will help Bitcoin.\n>\n> /dev/fd0\n> floppy disk guy\n>\n> Sent with Proton Mail secure email.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230401/6d4351f9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin ungibility and inscribed sats",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Steve Lee"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2613
        }
    },
    {
        "title": "[bitcoin-dev] Seeking concept ACKs for transaction terminology BIP",
        "thread_messages": [
            {
                "author": "Murch",
                "date": "2023-04-05T18:54:15",
                "message_text_only": "Hey everyone,\n\nOver the years, I have participated in a few conversations about various \naspects of transactions. Often a chunk of the conversation is spent on \nestablishing a shared vocabulary. There are many competing terms\u2014e.g. I \ncan think of at least three additional terms that refer to `scriptPubKey`.\n\nI\u2019ve drafted an informational BIP that proposes terminology for various \ncomponents and aspects of transactions. As some established terms are \nalready contradictory, the proposal does not aim for a perfectly \nconsistent selection of terms, but rather just to establish a shared \nvocabulary to avoid confusion.\n\nDraft: https://github.com/Xekyo/bips/pull/1\n\nPlease let me know whether you\u2019d be interested in the creation of such a \nBIP.\n\nCheers,\nMurch"
            },
            {
                "author": "Andrew Poelstra",
                "date": "2023-04-05T22:05:11",
                "message_text_only": "On Wed, Apr 05, 2023 at 02:54:15PM -0400, Murch via bitcoin-dev wrote:\n> Hey everyone,\n> \n> Over the years, I have participated in a few conversations about various\n> aspects of transactions. Often a chunk of the conversation is spent on\n> establishing a shared vocabulary. There are many competing terms\u2014e.g. I can\n> think of at least three additional terms that refer to `scriptPubKey`.\n> \n> I\u2019ve drafted an informational BIP that proposes terminology for various\n> components and aspects of transactions. As some established terms are\n> already contradictory, the proposal does not aim for a perfectly consistent\n> selection of terms, but rather just to establish a shared vocabulary to\n> avoid confusion.\n> \n> Draft: https://github.com/Xekyo/bips/pull/1\n> \n> Please let me know whether you\u2019d be interested in the creation of such a\n> BIP.\n>\n\nI would be interested in such a BIP existing.\n\nI will leave to others the hard work of bikeshedding every single term.\n\n\nCheers\n\n\n-- \nAndrew Poelstra\nDirector of Research, Blockstream\nEmail: apoelstra at wpsoftware.net\nWeb:   https://www.wpsoftware.net/andrew\n\nThe sun is always shining in space\n    -Justin Lewis-Webster\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 488 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230405/69c926e9/attachment.sig>"
            },
            {
                "author": "darosior",
                "date": "2023-04-06T09:03:14",
                "message_text_only": "Hello Murch,\n\nIt makes sense to me too. Thanks!\n\nAntoine\n\n-------- Original Message --------\nOn Apr 5, 2023, 8:54 PM, Murch via bitcoin-dev wrote:\n\n> Hey everyone, Over the years, I have participated in a few conversations about various aspects of transactions. Often a chunk of the conversation is spent on establishing a shared vocabulary. There are many competing terms\u2014e.g. I can think of at least three additional terms that refer to `scriptPubKey`. I\u2019ve drafted an informational BIP that proposes terminology for various components and aspects of transactions. As some established terms are already contradictory, the proposal does not aim for a perfectly consistent selection of terms, but rather just to establish a shared vocabulary to avoid confusion. Draft: https://github.com/Xekyo/bips/pull/1 Please let me know whether you\u2019d be interested in the creation of such a BIP. Cheers, Murch _______________________________________________ bitcoin-dev mailing list bitcoin-dev at lists.linuxfoundation.org https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230406/3adfd3c4/attachment.html>"
            },
            {
                "author": "Vincenzo Palazzo",
                "date": "2023-04-11T12:27:27",
                "message_text_only": "On Wed Apr 5, 2023 at 8:54 PM CEST, Murch via bitcoin-dev wrote:\n> Hey everyone,\n>\n> Over the years, I have participated in a few conversations about various \n> aspects of transactions. Often a chunk of the conversation is spent on \n> establishing a shared vocabulary. There are many competing terms\u2014e.g. I \n> can think of at least three additional terms that refer to `scriptPubKey`.\n>\n> I\u2019ve drafted an informational BIP that proposes terminology for various \n> components and aspects of transactions. As some established terms are \n> already contradictory, the proposal does not aim for a perfectly \n> consistent selection of terms, but rather just to establish a shared \n> vocabulary to avoid confusion.\n>\n> Draft: https://github.com/Xekyo/bips/pull/1\n>\n> Please let me know whether you\u2019d be interested in the creation of such a \n> BIP.\n\nMake a lot of sense to me, just recently I found that \nI was using a complete different word to refering to `scriptPubKey` \nthat only me was using :)\n\nSo, concept ACK.\n\nThanks!\n\nVincent."
            },
            {
                "author": "josibake",
                "date": "2023-04-21T09:36:08",
                "message_text_only": "Big Concept ACK.\n\nI've participated in several Bitcoin developer education programs over the past few years and have noticed that a consistent stumbling block for students is reconciling the different terms used in blogs, transcripts, mailing list posts, etc.\n\nHaving a reference document like this to include early in the curriculum(s) will help reduce cognitive load.\n\nIn particular, I'd like to highlight the importance of the \"synonyms\" field: since we can't retroactively re-write materials using different terms, having the synonyms will help map various resources to a shared terminology.\n\nThanks for working on this!\n\nCheers,\nJosie\n\n\n\n\nSent with Proton Mail secure email.\n\n------- Original Message -------\nOn Wednesday, April 5th, 2023 at 8:54 PM, Murch via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n\n> Hey everyone,\n> \n\n> Over the years, I have participated in a few conversations about various\n> aspects of transactions. Often a chunk of the conversation is spent on\n> establishing a shared vocabulary. There are many competing terms\u2014e.g. I\n> can think of at least three additional terms that refer to `scriptPubKey`.\n> \n\n> I\u2019ve drafted an informational BIP that proposes terminology for various\n> components and aspects of transactions. As some established terms are\n> already contradictory, the proposal does not aim for a perfectly\n> consistent selection of terms, but rather just to establish a shared\n> vocabulary to avoid confusion.\n> \n\n> Draft: https://github.com/Xekyo/bips/pull/1\n> \n\n> Please let me know whether you\u2019d be interested in the creation of such a\n> BIP.\n> \n\n> Cheers,\n> Murch\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: publickey - josibake at protonmail.com - 0x616516B8.asc\nType: application/pgp-keys\nSize: 3154 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230421/4f5c2878/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 855 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230421/4f5c2878/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Seeking concept ACKs for transaction terminology BIP",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Murch",
                "josibake",
                "darosior",
                "Andrew Poelstra",
                "Vincenzo Palazzo"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 6894
        }
    },
    {
        "title": "[bitcoin-dev] libsecp256k1 v0.3.1 released",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2023-04-10T20:00:29",
                "message_text_only": "Hello,\n\nToday we'd like to announce the release of version 0.3.1 of libsecp256k1:\n\n  https://github.com/bitcoin-core/secp256k1/releases/tag/v0.3.1\n\nThis is a bugfix release after 0.3.0 (which was not announced on this list). For the full release notes of 0.3.0 and 0.3.1 see:\n\n  https://github.com/bitcoin-core/secp256k1/blob/master/CHANGELOG.md\n\nbut the impetus for this release is the discovery that Clang 14 and later became smart enough to optimize out a specific timing side-channel protection mechanism in the code that could leave applications vulnerable to a side-channel attack. This has been fixed in 0.3.1.\n\nWe strongly recommend any users of the library to upgrade if their code may end up being compiled with Clang 14+. Bitcoin Core release binaries are not affected.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "libsecp256k1 v0.3.1 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Pieter Wuille"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 792
        }
    },
    {
        "title": "[bitcoin-dev] RGB protocol announcement",
        "thread_messages": [
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2023-04-10T22:09:52",
                "message_text_only": "TL;DR\n-----\n\nLNP/BP Standards Association <https://www.lnp-bp.org>, supported by Fulgur\nVentures, Bitfinex, Hojo Foundation, Pandora Prime, and DIBA, is happy to\nannounce the release of RGB v0.10 - the next significant milestone in the RGB\nprotocol <https://rgb.tech> which brings full support of smart contracts to\nBitcoin and Lightning. This is the result of a great cross-industry long-term\ncollaboration between these bitcoin companies and more than four years of\nextensive development work.\n\nRGB v0.10 can be downloaded and installed as described on <https://rgb.tech>\nwebsite, which also contains a number of user and developer guidelines.\nRGB source code can be found on <https://github.com/RGB-WG>\n\n\nBackground of RGB\n-----------------\n\nSome of you might remember the announcement of RGB protocol idea back in\n2018 [1]: it was an idea of \u201ccolored coins\u201d over Lightning by Giacomo\nZucco, based on new concepts developed by Peter Todd - client-side-validation\nand single-use-seals.\n\nIn 2019 me (Maxim Orlovsky) and Giacomo Zucco formed the LNP/BP Standard\nAssociation, aiming to bring RGB from the concept to production. The initiative\nwas supported by Bitfinex and Fulgur Ventures. My goal with RGB was not just to\nenable assets on Lightning, but that of a much larger scope: to build a\nprogrammability layer for Bitcoin and Lightning, which may unlock other cases\nthan just tokens - DAOs, decentralized identities and other things that\nbitcoin itself was lacking. This took much longer than was expected, and both\nmyself and the LNP/BP Standards Association had gone through very turbulent\ntimes on this road, relying on self-financing for more than a year...\n\nNevertheless, in 2021 we were able to present both RGB powered with a\nTuring-complete virtual machine (AluVM) [2] and RGB had became operational on\nLightning Network [3] using the LNP Node - a complete rust re-implementation of\nthe Lightning protocol made by me at the Association [4]. Those who are\ninterested in the history of RGB development and our past releases may refer\nto it graphical representation [5] - or navigate through years of videos and\ndemos on our YouTube channel <https://www.youtube.com/@LNPBP/videos>.\n\nDespite 4 years of active development, weekly community calls, talks on\nall mainstream bitcoin-only evens and conferences, the awareness about RGB\nin the bitcoin community is still very small - and some bitcoin media put\nas a requirement for us to submit information about RGB to the bitcoin-dev mail\nlist, so that they could see the new technology that has been developed -\nso here we are.\n\n\nRGB v0.10\n---------\n\nToday we\u2019d like to announce the next main milestone: **release of RGB v0.10**,\nwhich includes consensus layer, standard library (used by wallets/exchanges\nfor integration) and a command-line tool.\n\nv0.10 release is a major milestone which brings RGB further to being a\nproduction-ready system. It introduces the last consensus-breaking changes,\naiming at keeping future RGB versions fully backward-compatible. It also unlocks\nthe last features that were required for implementing fully-functional smart\ncontracts which may be arbitrary customized by contract developers.\n\nThis release brings the support of the following features to RGB:\n\n- ### Global state in RGB contracts\n  Now each RGB contract has a global state accessible by a virtual machine\n  and clients (wallets etc).\n\n- ### Contract interfaces\n  Interfaces, introduced in this version, represent a standard way of\n  communicating a diverse range of smart contracts through well-defined APIs.\n  Interfaces can be compared to contract ABIs and ERCs in Ethereum world,\n  however, unlike in Ethereum, they require neither obligatory standardization\n  (as ERCs) nor separate distribution, being always packed together with\n  contracts. By using interfaces, wallets and other software can provide a\n  semantic-aware UI for the users for working with the contracts - and contract\n  developers may add more interfaces to their existing contracts over time\n  without the need to update the immutable contract itself.\n\n- ### Strict type system\n  Strict types is a new functional data type system with provable\n  properties used for the RGB contract state representation and introspection.\n  It allows compile-time guarantees on the size of any data, simplifying RGB\n  operations on low-end and limited-memory devices like hardware wallets.\n  The whole RGB consensus layer is now compiled into strict types, which\n  allows formal proofs of the binary compatibility between releases (the\n  feature which might have been very useful for bitcoin consensus if it existed\n  back in the days of Satoshi). You can learn more about strict types on\n  <https://www.strict-types.org>\n\n- ### Contracts in Rust\n  Writing and compiling an RGB smart contracts in Rust. Thanks to the strict\n  types, it is also possible to compile rust data types right into RGB\n  contracts.\n\n- ### State introspection\n  Contracts can introspect their own state in the validation code used by the\n  virtual machine, which unlocks the way for writing complex forms of contracts\n  working with bitcoin transactions, DLCs and other complex data.\n\n- ### URL-based invoice format\n  Previously RGB was using Bech32m-encoded invoices, which were very long,\n  not human-readable and couldn't be automatically opened with most of the\n  software. The new format is much shorter, easier to verify by the user and\n  can be opened automatically as a link with a preconfigured software.\n\n- ### WASM support\n  RGB standard library can run without I/O and file system access,\n  i.e. can operate inside a web page or a browser plugin.\n\n- ### Tapret descriptors and custom derivation\n  RGB uses taproot-based OP_RETURN commitments (in short - tapret), which\n  require support on the descriptor level such that wallets could see the\n  transactions with tweaked outputs as those belonging to the wallet descriptor.\n  New version also introduces custom derivation indexes that prevent non-RGB\n  wallets from accidentally spending outputs with RGB assets (and thus -\n  destroying assets).\n\n- ### Simplified dependencies\n  RGB consensus layer is being shipped with fewer dependencies, improving the\n  stability of API. We have abandoned the dependency on custom bulletproofs\n  implementation from Grin projects. We also do not use rust-bitcoin and\n  rust-miniscript due to their overall API instability and recently discovered\n  bugs; since RGB uses a very small subset of bitcoin functionality it is now\n  implemented as a part of the library with no assumptions about bitcoin\n  consensus layer (like those which halted rust-bitcoin powered software when\n  Burak's hack had happened last year).\n\n- ### Simplified integration\n  Many operations that previously required multiple API calls, as well as\n  cross-language encoding of complex data structures now work with a\n  single API call. RGB contract state is represented as a JSON object and\n  can be serialized across different languages without a hassle.\n\n- ### Simplified UX\n  Previously, to use RGB, a wallet or a user had to run the RGB Node, interface\n  it through RPC (or cli tool) - and use a number of other libs and command-line\n  tools to perform most of the operations on PSBTs etc. With the new release\n  this complex stack was replaced by a single library API and a command-line\n  tool `rgb`, which operate like a swiss knife for RGB user (and it can be\n  compared to the way `git` works). RGB Node still can be run by users on their\n  home servers, but is not obligatory for using RGB anymore.\n\n### Migration notes\n\nThere is no migration from contracts issued on RGB v0.9 to the future versions.\nAll assets have to be re-issued; asset holders can contact asset issuers to\nprovide them with a newly re-issued contracts and assets matching the assets\nfrom v0.9.\n\nRGB v0.10 can be downloaded and installed as described on [https://rgb.tech]\n(https://rgb.tech) website, which also contains a number of user and\ndeveloper guidelines. RGB source code can be found on https://github.com/RGB-WG\n\n\nRoadmap after v0.10\n-------------------\n\nWith this release the future development of the core RGB technology (at in its\nconsensus layer) becomes gradually ossified, as the cases of\nclient-side-validated systems upgrades are more complex to coordinate than\nthose of blockchain layer 1. Also, the normal understanding of soft-forks and\nhard-forks do not apply to upgrades in layer 2 and 3. So we found a way\nfor backwards-compatible upgrades, which we call \u201cfast-forwards\u201d, where users\nkeep their assets issued under the older versions that can always operate and be\naccepted by the users of any other future version. However, the users of a newer\nversion will be restricted in transferring their assets only to the users of the\nsame or more recent version (but they can always ask recipients to upgrade their\nsoftware). We have a number of features planned for the future fast-forwards:\n\n- full support of bitcoin layer 1 and channel state introspection;\n- inter-contract interaction;\n- bulletproofs++ support;\n- zero-knowledge-based optimizations of the client-side-validated history.\n\nWe're also working on the design of a layer 1 which will be perfect for the\nclient-side-validated applications (\u201chow to design a blockchain today if we\nknew about client-side-validation/single-use-seals\u201d). This should be very\ncompact (order of one signature per block) ultra-scalable (theoretically\nunlimited no of tx in a block) chain which can run systems like RGB - with\nBitcoin UTXO set migrated into RGB operating on both bitcoin blockchain and\nthis new chain (we code-name it \u201csigchain\u201d). However, these are quite early\ndevelopments with a number of unsolved tradeoffs and challenges; if there is\nan interest on this topic here we can start a different discussion thread\non the matter.\n\n\nSoftware and integrations\n-------------------------\n\nCompanies, which are a part of the LNP/BP Standards Association, as well\nas other independent vendors are already working on upgrading their software\nto v0.10. This includes (but not limited to):\n\n- MyCitadel wallet (iOS, Desktop)\n- Iris wallet (Android) from RGB team inside Bitfinex\n- BitMask (Web browser plugin) from DIBA\n- LNP Node with RGB support - lightning node from the LNP/BP Standards Association\n- RGBEx.io - website listing RGB assets and contracts,\n  using pseudonymous credentials (public key + signatures)\n- RGB Tools library - SDK based on BitcoinDevKit for RGB wallet integration\n- LightningDevKit with RGB support - again by RGB team in Bitfinex\n- Core Lightning RGB plugin\n\nLNP/BP Standards Association will focus its further development activity\naround these three areas:\n\n- Completing RGB documentation, specification and helping public audits of the\n  technology. Right now we have a nearly-complete RGB whitepaper [6] a codified\n  standards [7]\n- Lightning network support for complex RGB smart contracts - the thing we name\n  #BiFi (Bitcoin finance) [8]. It includes further development of Storm -\n  a decentralized data storage & messaging network on top of Lightning, that we\n  presented last year.\n- RGB toolchain, which includes a new high-level functional smart contracting\n  language called Contractum (<https://www.contractum.org>) and other tools\n  which will simplify the life of RGB devs.\n\n\nSources of information\n----------------------\n\nWe have already witnessed some actors distributing misinformation about\nnon-existing products released with/on RGB even before the official releases of\nsome RGB components happened. Thus, we advise all media people to always check\nthe official sources before publishing information about the RGB protocol.\n\nAll releases and major things are being announced on:\n* Official website of the protocol <https://rgb.tech>,\n  community <https://rgbfaq.com> and LNP/BP Standards Association\n  <https://lnp-bp.org>.\n* Twitter of the Association: <https://twitter.com/lnp_bp>\n* Community telegram channel: <https://t.me/rgbtelegram>\n\nOther websites are not in control of the RGB protocol developers and are not\nopen-source and should not be considered to be trusted sources of information.\n\n\n-------------------------\nMaxim Orlovsky\nMail: orlovsky [at] lnp-bp.org\nGithub: https://github.com/dr-orlovsky\nTwitter: https://twitter.com/dr_orlovsky\nPGP: EAE7 30CE C0C6 6376 3F02 8A58 6009 4BAF 18A2 6EC9\n\n\n[1]: https://www.youtube.com/watch?v=xHWxtmgQP94\n[2]: https://www.youtube.com/watch?v=Mma0oyiVbSE\n[3]: https://www.youtube.com/watch?v=6Svmh0OQVf4\n[4]: https://github.com/LNP-WG/lnp-node\n[5]: https://twitter.com/dr_orlovsky/status/1640833926456307714/photo/1\n[6]: https://blackpaper.rgb.tech\n[7]: https://standards.lnp-bp.org\n[8]: https://www.youtube.com/watch?v=DtkTE6m0zio_"
            },
            {
                "author": "David A. Harding",
                "date": "2023-04-16T05:34:40",
                "message_text_only": "Hi Dr Orlovsky,\n\nThank you for writing about your interesting project.  Some replies\ninline below:\n\nOn 2023-04-10 12:09, Dr Maxim Orlovsky via bitcoin-dev wrote:\n> RGB v0.10 can be downloaded and installed as described on \n> <https://rgb.tech>\n> website, which also contains a number of user and developer guidelines.\n> RGB source code can be found on <https://github.com/RGB-WG>\n\nFYI: the RGB-WG organization page links to a repository whose latest\nrelease is 0.9 and whose latest commit is titled, \"Release v.0.9.1\", see\nhttps://github.com/RGB-WG/rgb-node/\n\n> My goal with RGB was not just to enable assets on Lightning, but that\n> of a much larger scope: to build a programmability layer for Bitcoin\n> and Lightning, which may unlock other cases than just tokens - DAOs,\n> decentralized identities and other things that bitcoin itself was \n> lacking.\n\nIs there any documentation or discussion archives that address the\nproblem of non-publishable conditional statements seemingly being \ninsecure in\nmultiparty protocols, as previously described on this list[1] by Ruben\nSomsen?  To give my own example of the problem:\n\n- Bob doesn't believe that there's a number which can be multiplied by 2\n   to produce 4.  He's willing to pay a bounty for proof that he's wrong\n   but Bitcoin does not currently provide a multiplication opcode, so he\n   can't simply pay a script that says: \"2 OP_MUL 4 OP_EQUAL\"\n\n- Bob hears that RGB has turing-complete scripting, so he buys some\n   random tokens that have an RGB contract which allows him to encumber\n   them by any AlumVM script.  He then creates a Bitcoin transaction\n   signed SIGHASH_NONE|SH_ANYONECANPAY that will allow anyone knowing the\n   solution to (x * 2 == 4) to spend his RGB-based tokens.  He publishes\n   a PSBT for the transaction along with the RGB data needed to claim the\n   tokens.\n\n- Anyone on the network can now claim the BTC without knowing the\n   solution, destroying the RGB-based tokens.\n\n- If, instead, Bob hears that Mallory knows the solution, he could sign \na\n   PSBT with the default SH_ALL to her, but then Mallory could take the\n   BTC without solving the problem, again destroying the RGB-based\n   tokens.\n\n- Or, in another case, Bob hears that Alice knows the solution, but he\n   doesn't want to risk his tokens being destroyed, so he refuses to sign\n   a transaction paying Alice until she provides him the answer.  When\n   Alice does provide him the answer, and he realizes it's so simple, he\n   changes his mind about paying her and doesn't sign his transaction to\n   her.  She has no recourse.\n\nIt seems to me, based on my understanding of Somsen's original insight,\nthat client-side validation by itself cannot enforce conditions in a\ntrustless multiparty setting.\n\nI think that implies that it's only possible to enforce conditions in a\nconsensus system (or in a trust-dependent system), which would have\nsignificant implications for the future direction of your work, as you\nwrote in your email:\n\n> We're also working on the design of a layer 1 which will be perfect for \n> the\n> client-side-validated applications (\u201chow to design a blockchain today \n> if we\n> knew about client-side-validation/single-use-seals\u201d). This should be \n> very\n> compact (order of one signature per block) ultra-scalable \n> (theoretically\n> unlimited no of tx in a block) chain which can run systems like RGB - \n> with\n> Bitcoin UTXO set migrated into RGB [...]\n\n* * *\n\nLooking at other parts of your email:\n\n> Nevertheless, in 2021 we were able to present both RGB powered with a\n> Turing-complete virtual machine (AluVM) [2] and RGB had became \n> operational on\n> Lightning Network [3] using the LNP Node - a complete rust \n> re-implementation of\n> the Lightning protocol made by me at the Association [4].\n\nCould you clarify the status of these implementations?  While trying to\nlearn about RGB, I noticed that you don't have much completed\ndocumentation.  Previous reviewers also mentioned this and I saw that\nyou suggested them to read the code or view your videos.\n\nWhen reading your code for your LN implementation (LNP), I noticed it\nseemed to be missing a lot of things present in other LN implementations\nI regularly review.  For example, I can't find where it supports\ncreating or parsing onions, which seems to be a fundamental requirement\nfor using LN.  In trying to figure out how it works, I also noticed that\nI couldn't find either unit tests or integration tests---indeed several\nof your applications seem to almost entirely lack the string \"test\".\nFor example, here are LNP-node and RGB-node compared to the four LN\nimplementations I regularly monitor:\n\n/tmp/rgb-node$ git grep -i '\\<test\\>' | wc -l\n7\n/tmp/lnp-node$ git grep -i '\\<test\\>' | wc -l\n4\n\n~/repos/rust-lightning$ git grep -i '\\<test\\>' | wc -l\n2008\n~/repos/cln$ git grep -i '\\<test\\>' | wc -l\n1459\n~/repos/lnd$ git grep -i '\\<test\\>' | wc -l\n3547\n~/repos/eclair$ git grep -i '\\<test\\>' | wc -l\n2576\n\nI realize those are all projects by larger teams than that which works\non RGB, but a difference of three orders of magnitude is very surprising\nto me.  Do you have out-of-tree testing or am I missing something else?\nI did my best to earnestly search both your repository and your GitHub\nissues and PRs.  All I found was that a small amount of previous unit\ntesting was removed, and that several issues mentioning the need for\ntesting were closed without referencing a resolution.\n\nAs your replies to previous reviewers also mentioned that they should\nview your Youtube videos, I also tried that.  I focused on the ones\ndiscussing LNP, as LN is something I know fairly well, and I admit that\nI skimmed them quite fast, but I couldn't find any demos where you\nprogressed beyond using LNP to open a channel with another node.  E.g.,\nthey seemed to stop at the same point as this demo:\nhttps://github.com/LNP-WG/lnp-node/blob/c402decc9ff5b557a9e3d542f74e2fd6ed856742/doc/demo-alpha.4/README.md\n\n> Despite 4 years of active development, weekly community calls, talks on\n> all mainstream bitcoin-only evens and conferences, the awareness about \n> RGB\n> in the bitcoin community is still very small\n\nMy understanding of the basic goal of RGB from years ago was that it\nwould allow ordinary users to define new assets on Bitcoin in a way that\nwould allow those assets to be transferred over LN.  As far as I can\ntell, it doesn't do that yet, not even in a way that's accessible to a\npower user such as myself.  Even for that original goal, there are\nseveral problems outstanding---problems which will likely require\nsignificant research and experimentation to overcome, e.g.[2].\n\nInstead of tackling those problems and building upon existing wallet and\nLN libraries, I see an ambitious effort at reimplementation and massive\nscope creep.  The payoff for that effort could be a huge change that\naffects how we use Bitcoin and LN for decades to come.  But it also\nseems possible that the ambition and scope creep may be preventing the\nproject from currently serving many of the people who were most excited\nabout it in the first place.  Awareness may be limited because the\nnear-term benefits for most people who invest time in learning about RGB\nalso seems limited.\n\nThanks again for writing about your research for this mailing list,\n\n-Dave\n\n[1] \nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2022-April/003540.html\n[2] \nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2022-April/003549.html"
            },
            {
                "author": "Federico Tenga",
                "date": "2023-04-16T07:15:58",
                "message_text_only": "To add some context to the conversation, I would like to point out that\nanother RGB lightning implementation exists based on LDK, you may want to\ncheck it out to have a better picture of how RGB works on LN:\nhttps://github.com/RGB-Tools/rgb-lightning-sample\n\nOn Sun, 16 Apr 2023 at 07:35, David A. Harding via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi Dr Orlovsky,\n>\n> Thank you for writing about your interesting project.  Some replies\n> inline below:\n>\n> On 2023-04-10 12:09, Dr Maxim Orlovsky via bitcoin-dev wrote:\n> > RGB v0.10 can be downloaded and installed as described on\n> > <https://rgb.tech>\n> > website, which also contains a number of user and developer guidelines.\n> > RGB source code can be found on <https://github.com/RGB-WG>\n>\n> FYI: the RGB-WG organization page links to a repository whose latest\n> release is 0.9 and whose latest commit is titled, \"Release v.0.9.1\", see\n> https://github.com/RGB-WG/rgb-node/\n>\n> > My goal with RGB was not just to enable assets on Lightning, but that\n> > of a much larger scope: to build a programmability layer for Bitcoin\n> > and Lightning, which may unlock other cases than just tokens - DAOs,\n> > decentralized identities and other things that bitcoin itself was\n> > lacking.\n>\n> Is there any documentation or discussion archives that address the\n> problem of non-publishable conditional statements seemingly being\n> insecure in\n> multiparty protocols, as previously described on this list[1] by Ruben\n> Somsen?  To give my own example of the problem:\n>\n> - Bob doesn't believe that there's a number which can be multiplied by 2\n>    to produce 4.  He's willing to pay a bounty for proof that he's wrong\n>    but Bitcoin does not currently provide a multiplication opcode, so he\n>    can't simply pay a script that says: \"2 OP_MUL 4 OP_EQUAL\"\n>\n> - Bob hears that RGB has turing-complete scripting, so he buys some\n>    random tokens that have an RGB contract which allows him to encumber\n>    them by any AlumVM script.  He then creates a Bitcoin transaction\n>    signed SIGHASH_NONE|SH_ANYONECANPAY that will allow anyone knowing the\n>    solution to (x * 2 == 4) to spend his RGB-based tokens.  He publishes\n>    a PSBT for the transaction along with the RGB data needed to claim the\n>    tokens.\n>\n> - Anyone on the network can now claim the BTC without knowing the\n>    solution, destroying the RGB-based tokens.\n>\n> - If, instead, Bob hears that Mallory knows the solution, he could sign\n> a\n>    PSBT with the default SH_ALL to her, but then Mallory could take the\n>    BTC without solving the problem, again destroying the RGB-based\n>    tokens.\n>\n> - Or, in another case, Bob hears that Alice knows the solution, but he\n>    doesn't want to risk his tokens being destroyed, so he refuses to sign\n>    a transaction paying Alice until she provides him the answer.  When\n>    Alice does provide him the answer, and he realizes it's so simple, he\n>    changes his mind about paying her and doesn't sign his transaction to\n>    her.  She has no recourse.\n>\n> It seems to me, based on my understanding of Somsen's original insight,\n> that client-side validation by itself cannot enforce conditions in a\n> trustless multiparty setting.\n>\n> I think that implies that it's only possible to enforce conditions in a\n> consensus system (or in a trust-dependent system), which would have\n> significant implications for the future direction of your work, as you\n> wrote in your email:\n>\n> > We're also working on the design of a layer 1 which will be perfect for\n> > the\n> > client-side-validated applications (\u201chow to design a blockchain today\n> > if we\n> > knew about client-side-validation/single-use-seals\u201d). This should be\n> > very\n> > compact (order of one signature per block) ultra-scalable\n> > (theoretically\n> > unlimited no of tx in a block) chain which can run systems like RGB -\n> > with\n> > Bitcoin UTXO set migrated into RGB [...]\n>\n> * * *\n>\n> Looking at other parts of your email:\n>\n> > Nevertheless, in 2021 we were able to present both RGB powered with a\n> > Turing-complete virtual machine (AluVM) [2] and RGB had became\n> > operational on\n> > Lightning Network [3] using the LNP Node - a complete rust\n> > re-implementation of\n> > the Lightning protocol made by me at the Association [4].\n>\n> Could you clarify the status of these implementations?  While trying to\n> learn about RGB, I noticed that you don't have much completed\n> documentation.  Previous reviewers also mentioned this and I saw that\n> you suggested them to read the code or view your videos.\n>\n> When reading your code for your LN implementation (LNP), I noticed it\n> seemed to be missing a lot of things present in other LN implementations\n> I regularly review.  For example, I can't find where it supports\n> creating or parsing onions, which seems to be a fundamental requirement\n> for using LN.  In trying to figure out how it works, I also noticed that\n> I couldn't find either unit tests or integration tests---indeed several\n> of your applications seem to almost entirely lack the string \"test\".\n> For example, here are LNP-node and RGB-node compared to the four LN\n> implementations I regularly monitor:\n>\n> /tmp/rgb-node$ git grep -i '\\<test\\>' | wc -l\n> 7\n> /tmp/lnp-node$ git grep -i '\\<test\\>' | wc -l\n> 4\n>\n> ~/repos/rust-lightning$ git grep -i '\\<test\\>' | wc -l\n> 2008\n> ~/repos/cln$ git grep -i '\\<test\\>' | wc -l\n> 1459\n> ~/repos/lnd$ git grep -i '\\<test\\>' | wc -l\n> 3547\n> ~/repos/eclair$ git grep -i '\\<test\\>' | wc -l\n> 2576\n>\n> I realize those are all projects by larger teams than that which works\n> on RGB, but a difference of three orders of magnitude is very surprising\n> to me.  Do you have out-of-tree testing or am I missing something else?\n> I did my best to earnestly search both your repository and your GitHub\n> issues and PRs.  All I found was that a small amount of previous unit\n> testing was removed, and that several issues mentioning the need for\n> testing were closed without referencing a resolution.\n>\n> As your replies to previous reviewers also mentioned that they should\n> view your Youtube videos, I also tried that.  I focused on the ones\n> discussing LNP, as LN is something I know fairly well, and I admit that\n> I skimmed them quite fast, but I couldn't find any demos where you\n> progressed beyond using LNP to open a channel with another node.  E.g.,\n> they seemed to stop at the same point as this demo:\n>\n> https://github.com/LNP-WG/lnp-node/blob/c402decc9ff5b557a9e3d542f74e2fd6ed856742/doc/demo-alpha.4/README.md\n>\n> > Despite 4 years of active development, weekly community calls, talks on\n> > all mainstream bitcoin-only evens and conferences, the awareness about\n> > RGB\n> > in the bitcoin community is still very small\n>\n> My understanding of the basic goal of RGB from years ago was that it\n> would allow ordinary users to define new assets on Bitcoin in a way that\n> would allow those assets to be transferred over LN.  As far as I can\n> tell, it doesn't do that yet, not even in a way that's accessible to a\n> power user such as myself.  Even for that original goal, there are\n> several problems outstanding---problems which will likely require\n> significant research and experimentation to overcome, e.g.[2].\n>\n> Instead of tackling those problems and building upon existing wallet and\n> LN libraries, I see an ambitious effort at reimplementation and massive\n> scope creep.  The payoff for that effort could be a huge change that\n> affects how we use Bitcoin and LN for decades to come.  But it also\n> seems possible that the ambition and scope creep may be preventing the\n> project from currently serving many of the people who were most excited\n> about it in the first place.  Awareness may be limited because the\n> near-term benefits for most people who invest time in learning about RGB\n> also seems limited.\n>\n> Thanks again for writing about your research for this mailing list,\n>\n> -Dave\n>\n> [1]\n>\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-April/003540.html\n> [2]\n>\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-April/003549.html\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230416/b611f172/attachment-0001.html>"
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2023-04-18T00:47:24",
                "message_text_only": "Hi David,\n\nThank you for taking time on doing analysis and writing comments.\nI will address all small questions in this reply -- with a follow-up \ne-mail dedicated to the technical question from your letter\nregarding the problem of \"on-publishable conditional statements seemingly\nbeing insecure in multiparty protocols\", which requires longer write-up.\n\n\n> FYI: the RGB-WG organization page links to a repository whose latest\n> release is 0.9 and whose latest commit is titled, \"Release v.0.9.1\", see\n> https://github.com/RGB-WG/rgb-node/\n\nThank you for spotting; we hadn't updated the readme. Now its fixed.\n\n\n> > Nevertheless, in 2021 we were able to present both RGB powered with a\n> > Turing-complete virtual machine (AluVM) [2] and RGB had became\n> > operational on\n> > Lightning Network [3] using the LNP Node - a complete rust\n> > re-implementation of\n> > the Lightning protocol made by me at the Association [4].\n>\n> Could you clarify the status of these implementations?\n\nThe status of LNP implementation is \"experimental\": it is an instrument\nfor testing new protocols in the scope of the Lightning network, and\nits main feature is in having lightweight and modular architecture.\n\nLNP implementation is not anymore required for using RGB on LN - as \nFederico already mentioned in his reply, Bitfinex team was able to\nindependently integrate RGB with existing LDK codebase [1] (I even \ndidn't know about that before they announced), and there is a WIP on\nintegrating RGB through CLN extensions. So the question of LNP node\nreadiness/completeness is unrelated to the question of RGB readiness,\nfeatures or technical properties; in my previous e-mail I just had \npointed out that at some (past) point in time we had to work on LN \nre-implementation due to some restrictions we had back those days -- \nlike with pay-to-contract commitments which were impossible to \nimplement in the existing nodes due to architecture limitations -- \nbut with the change to taproot-based commitments in late 2021-\nearly 2022 this is not true anymore.\n\n\n> While trying to\n> learn about RGB, I noticed that you don't have much completed\n> documentation. Previous reviewers also mentioned this and I saw that\n> you suggested them to read the code or view your videos.\n\nA lot of documentation was written and is being written. For instance,\nif you look at the foundational crates we have in RGB, they are\nwell documented, containing more docs than the code itself, like in\n<https://github.com/LNP-BP/client_side_validation/blob/master/single_use_seals/src/lib.rs>\n\nAlso, we have a number of websites tracking the RGB docs, listed in\n<https://rgb.tech/docs/> and <https://rgb.tech/learn/> - literally\ndozens of them. So your information is outdated.\n\nOf course, much more need to be written - but again, for a small team\nof community & self-fundend non-profit with the budget comparable to \na coffee  shop. I think we are doing all what we can. If community \nneeds more docs -- it is welcome to provide more funding or hands in \nwriting them.\n\n\n> When reading your code for your LN implementation (LNP), I noticed it\n> seemed to be missing a lot of things present in other LN implementations\n> I regularly review. For example, I can't find where it supports\n> creating or parsing onions, which seems to be a fundamental requirement\n> for using LN.\n\nIt is there, literally for years, where it should be - in P2P protocol,\nBOLT4, as directory and file names suggest:\n<https://github.com/LNP-WG/lnp-core/blob/master/lnp2p/src/bolt/bolt4.rs>\n\nIt is based on our other library which provides encryption:\n<https://docs.rs/internet2/0.9.0/internet2/presentation/sphinx/index.html>\n\n\n> In trying to figure out how it works, I also noticed that\n> I couldn't find either unit tests or integration tests---indeed several\n> of your applications seem to almost entirely lack the string \"test\".\n> For example, here are LNP-node and RGB-node compared to the four LN\n> implementations I regularly monitor:\n>\n> /tmp/rgb-node$ git grep -i '\\<test\\>' | wc -l\n> 7\n\nRGB Node is not a part of the current RGB release -- starting from \nv0.10 RGB do not require a background service. The node is still useful\nin server-side environments - but 100% of mobile and most of desktop\nusers and wallet devs would never need to touch it; thus the update\nof the node to v0.10 will come later. Anyway, there is no reason of\ndoing its extensive test coverage since it its role to be a wrapper\naround RGB libraries (existing in other repositories) which contain\n100% of RGB consensus and applied business logic. Node just manages\nthreads and file I/O - not the stuff which is test-covered first of \nall (and even for that task it uses others of our libraries with a \nlike io-react, used in other high-load projects. (BTW pls pay \nattention to how such libs are documented:\n<https://docs.rs/io-reactor/0.1.2/reactor/>).\n\nThe real RGB code is here, as it is clearly stated in the Github:\n* consensus-level \n  - <github.com/RGB-WG/rgb-core>\n  - <github.com/BP-WG/bp-core>\n  - <github.com/LNP-BP/client_side_validation>\n* integration libraries - <github.com/RGB-WG/rgb-wallet>\n\nWith the update to v0.10 a lot of code was changed, so most of tests\ngot outdated and were thrown out. Yes, we need more time and\neffort to re-do them -- but even taking that into the account,\nthe core of RGB is covered to much greater extent than the estimations\nyou have provided:\n* client-side-validation library - 80%: \n  <https://app.codecov.io/gh/LNP-BP/client_side_validation>\n* RGB Core - ~25% (due to significant re-write in v0.10)\n  <https://app.codecov.io/gh/RGB-WG/rgb-core>\n\nFinally, the most of code coverage happens due to the used\nstrict types system [4], which does compilation-type verification\nof all data serialization, deserialization and semantic type system.\nI.e. with its taken into account, the actual code coverage exceeds\n2/3 (>60%). I provide more explanations at the end of the letter.\n\n\n> /tmp/lnp-node$ git grep -i '\\<test\\>' | wc -l\n> 4\n>\n> ~/repos/rust-lightning$ git grep -i '\\<test\\>' | wc -l\n> 2008\n> ~/repos/cln$ git grep -i '\\<test\\>' | wc -l\n> 1459\n> ~/repos/lnd$ git grep -i '\\<test\\>' | wc -l\n> 3547\n> ~/repos/eclair$ git grep -i '\\<test\\>' | wc -l\n> 2576\n\nWell, that's a strange way to estimate the code coverage by counting\nlines with the word \"test\". I usually use code coverage reports, like\nthose coming from codecov.com -- since neither count of unit tests nor\ncode lines in them are a valid metric to see how the code is\ntest-covered.\n\nUnlike all those implementations, the node repository doesn't contain\nany lightning network business logic or protocols - it is just a \"shell\"\nproviding I/O, networking and thread management, not requiring much\ntesting. Instead, one should look into the actual LNP codebase\nimplementing BOLT standards, which is in\n<https://github.com/LNP-BP/lnp-core>. And as one might see from test\ncoverage reports [2] it has 40% of all code covered in tests - which\nis not huge, yes, but (see next reply)...\n\n\n> I realize those are all projects by larger teams than that which works\n> on RGB, but a difference of three orders of magnitude is very surprising\n> to me. Do you have out-of-tree testing or am I missing something else?\n\n... as I pointed above, there is no \"three orders of magnitude\" difference\nif the comparison is done correctly. Of course mainstream implementation\ndeveloped for more than 5 years, with millions invested by large companies/\nnon-profits and full teams of devs will have more test coverage than\nan implementation created at my own personal expense - and I do not\nunderstand what is surprising here :) I wrote about this implementation\nto attract more interest from the community devs who may be interested\nin joining to work/use an independent lightning re-implementation with\nmore open architecture allowing much larger protocol-level customizations\nthan any other mainstream implementation out there.\n\n\n> As your replies to previous reviewers also mentioned that they should\n> view your Youtube videos, I also tried that.\n\nI had never replied to previous _reviewers_ like that. For instance, the\nprotocol was reviewed by Peter Todd and Federico Tenga, as well as by\nother devs from the community, and I am sure they can confirm that the\ncommunications were complete and I was providing all the required answers\nand comments. If you are talking about Ruben Somsen, he was never\nintroduced to me as a reviewer, nor wrote to me anything other than\nseveral sarcastic tweets -- and I rather see him as an internet troll,\nwho, notwithstanding verbal communications and explanations I\nhad provided him over phone call, continues to spread miss-information \npositioning himself as \"RGB expert\" -- while still demonstrating absence \nof desire of reading any recent updates we had even when provided links.\n\n\n> I focused on the ones\n> discussing LNP, as LN is something I know fairly well,\n\nBut this discussion is an offtopic to RGB and this letter. I am fine to\nhave it, but let's move it to a separate thread.\n\n\n> I skimmed them quite fast, but I couldn't find any demos where you\n> progressed beyond using LNP to open a channel with another node. E.g.,\n> they seemed to stop at the same point as this demo:\n> https://github.com/LNP-WG/lnp-node/blob/c402decc9ff5b557a9e3d542f74e2fd6ed856742/doc/demo-alpha.4/README.md\n\nThe current LNP Node version is v0.9, so v0.4-alpha is extremely outdated,\nas well a doc there. For sure the doc needs an update. These are more \nrecent demos of node operations, with a remote CLN node as of end of 2021:\n* https://youtu.be/DoNfKLLjzsY\n* https://youtu.be/L6JlIQXbl6Y\n\n\n> My understanding of the basic goal of RGB from years ago was that it\n> would allow ordinary users to define new assets on Bitcoin in a way that\n> would allow those assets to be transferred over LN. As far as I can\n> tell, it doesn't do that yet, not even in a way that's accessible to a\n> power user such as myself.\n\nI do not know how to compare the power of users, but, for instance it\nwas successfully demonstrated by an independent Bitfinex team using BDK\nand LDK last month on the stage of Lightning Tuscany Summit. Of course \nthere yet no fancy UI all around, but absence of UI says nothing about\ntechnology or its readiness. In fact, several teams are working on the\nfirst UI apps using RGB, so this thing will change - and it is not a\ntask for a non-profit protocol-level research organization, but rather\nfor commercial ventures.\n\n\n> Even for that original goal, there are\n> several problems outstanding---problems which will likely require\n> significant research and experimentation to overcome, e.g.[2].\n> Instead of tackling those problems and building upon existing wallet and\n> LN libraries, I see an ambitious effort at reimplementation and massive\n> scope creep.\n\nSorry for not meeting your expectations about how I should use my time,\nfunds and funds of those who support such developments :)\n\nThe real part of the story is that 80% of the time we were working\non solving the original scope you pointed out. It just appeared that\nthere were much more hidden stones (than was expected back in 2018) \nin doing the idea of \"assets over Lightning\":\n* the original single-use-seals didn't worked for the world of multiple\n  assets which may co-exists, which required development of a set of\n  quite complex protocols (still being probably most complex part\n  of RGB);\n* the original pay-to-contract commitment scheme did work badly on\n  practice, being poorly inter-operable with existing lightning\n  implementations (which took a year of work on LNP node in total,\n  as I mentioned above) and leading to hard problems in wallet\n  integration and compatibility with all existing frameworks. We were\n  solving that problem until Taproot had arrived - and then we switched\n  to Taproot-based commitment scheme. It took another half of year\n  to update the whole code base - but the reward was compatibility\n  with BDK, LDK and other existing tools in the ecosystem, so your\n  comment on \"Instead of tackling those problems and building upon\n  existing wallet and LN libraries\" is not valid;\n* as a part of the above, I had to significantly contribute to\n  taproot implementation and maintenance of rust-bitcoin project,\n  being the most active project contributor during the course of\n  2019-2022 [3] (=\"building upon existing wallet libraries);\n* a lot of time was spent on privacy-related improvements, since none\n  of the original authors nor sponsors had seen any value about putting\n  \"colored coins on lightning\" without worriyng about the privacy;\nand only after that comes some \"fancy stuff\", like doing a dedicated\nvirtual machine and rich data type system -- which primary features\nwere not \"Turing completeness\" but ability of formal verification and\ncompiler-time safety guarantees. For instance, the developed type\nsystem [4] allows not just to \"compile\" any rust data type into a\nsmart contract, but also to prove that all data types used in \nconsensus code do not mutate between releases. If bitcoin had that\ntype system, there would be no \"unnoticed\" hardforks or risks of them\nin a future -- and I think not implementing such system in doing a\nnew consensus protocol would be a poor decision. And the last, but\nnot least, I do not want to be in such situation\n<https://twitter.com/fiatjaf/status/1647976362374844416?s=61&t=H4U6Q30N4eanvS4GjyAt4g>\npreferring to spend a year more on a proper design instead of\n\"shipping earlier\". What is acceptable for networking protocols\ncan't be acceptable for consensus-level protocols, which, unlike\neven blockchain consensus can't have softforks.\n\n----\n\nOverall, I am quite negatively impressed with the amount of \nmisinterpretations and estimates which are simply wrong - and I know\nthat they are being floated around working like fake news. \nUnfortunately writing answers to such claims takes a lot of time - \nand takes it from doing other stuff like writing docs, tests or \nintegrations. I understand that this letter will be read by many, \nthus I did address some of most common misconceptions. I am doing \nthat on bitcoin-dev mail list, but not elsewhere, since if I were\ndoing that on Twitter I would never have time for anything else.\n\n\n[1]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-April/021558.html\n[2]: https://app.codecov.io/gh/LNP-WG/lnp-core\n[3]: https://github.com/rust-bitcoin/rust-bitcoin/graphs/contributors?from=2019-01-11&to=2022-04-11&type=c\n[4]: https://www.strict-types.org"
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2023-04-18T23:16:05",
                "message_text_only": "Hi Harding,\n\nThis is the continuation from my previous e-mail [1] addressing the\nlargest and last unanswered question from your reply:\n\n> To give my own example of the problem <\u2026 description follows \u2026>\n\nI am not entirely understand your argument or question, even though\nI have spent a lot of time trying to crack it. For me it seems that\nthis is due to different paradigms we are thinking in. Client-side-\nvalidation and work on RGB had required me to dramatically change \nthe way I see distributed systems, bitcoin and other \u201cblockchains\u201d \nand multi-party contracts, thus this may have caused inability to \nspeak in the same terms. For me, the setup you are describing \ndoesn\u2019t make sense at all: there is no reason of doing things with\nRGB that way. I.e, you are suggesting invalid setup - and then \nprove that it is not working :).\n\nI will try first to explain why I think the reasoning you are \nputting into the argument is invalid in the assumptions: nobody \nshould expect that RGB somehow magically makes on-chain BTC (I will \nuse this acronym to distinguish BTC-as-money from bitcoin-as-\nblockchain or tech) more programmable or anyhow better: it is \nimpossible without softfork or a hardfork on _blockchain consensus_ \nlevel. What is possible is to add functionality on top of that; but\nanything additional won\u2019t work for BTC unless it is \u201clifted\u201d into \nthat new layer. This is true with sidechains, this is true with \nLightning, this is for sure true with RGB. So any setups we are \nanalyzing must analyze such lifted BTC* in RGB as a value, and not\nan on-chain. Next, most forms of contracts do not require a new \ntoken, so I propose not to make setups more complex and start \ndiscussing them without introducing a new tokens unless it is \nreally required.\n\nNow, my setup to cover your case (or at least what I understood \nfrom it) would be the following:\n\n1. Assume we have some BTC lifted to RGB, which we will name BTC*.\n   (let\u2019s leave the question on how to do that aside; it can be \n   discussed separately).\n\n2. > Bob doesn't believe that there's a number which can be\n   multiplied by to produce 4.\u00a0He's willing to pay a bounty for\n   proof that he's wrong.\n\n   This part I will take from your letter without changes, however \n   will skip the rest about production of some tokens etc, which \n   is unnecessary here.\n\n(Please correct me if I am wrong in understanding what you wanted\nto achieve and I will correct it - for instance I can't understand\nwhy we need some Carol(s) at all).\n\nTo fulfill the described setup, Bob have to create a new RGB \ncontract (its **genesis**) featuring BTC* AND providing the \nfollowing conditions (in the contract **schema**, which is a part \nof genesis):\n\n1. The value of BTC* is preserved within the contract not attached\n   to any of UTXOs (it has become possible with RGB v0.10 \n   introduction of \u201cglobal state\u201d)\n\n2. BTC* can be reclaimed by any party providing a solution (in form\n   of RGB **state extension**) which is verified by AluVM. Alice, \n   if she have found the solution, now can **assign** that \n   previously \u201cfloating\u201d/unowned BTC* to an UTXO she controls. \n\n   State extensions were introduced into RGB in late 2020 v0.4.\n   State extensions are different from a normal state transitions \n   by the fact that they do not have inputs referencing some \n   previously-owned (i.e. assigned to an UTXO) state, i.e. their \n   creation doesn\u2019t require creation of a corresponding bitcoin \n   transaction spending some UTXOs with a state (as it is in case \n   of a state transitions).\n\n3. To ensure uniqueness of the winner (i.e. prevent \n   \u201cdouble-spending\u201d of \u201cfree-floating\u201d/unowned BTC* from the \n   contract global state) Alice is also required (by the contract \n   conditions defined by Bob in the contract schema) to post some \n   identifiable information into a mined bitcoin transaction\n   on-chain (NB: this is not the same as a witness transaction; it \n   can be any transaction not related to the contract UTXOs in any \n   way). The transaction must contain a pre-defined signal in a \n   form known only to the contract participants; for instance some \n   pre-defined random value stored in OP_RETURN, address, value, \n   witness, pay-to-contract tweak of some pre-defined pubkey - or \n   anywhere else. This can re-use a transaction which can be mined\n   anyway (like a payment that happens in parallel) and can even\n   avoid additional block space consumption if something like P2C\n   or tapret commitment is used (though this will require\n   a pre-knowledge of public keys at the moment of contract\n   creation). The contract script claims that only the first \n   party who had made such tx mined wins the game (if two txes are \n   mined in a block, they may be sorted by their txid or block \n   position). Because of AluVM, contracts can inspect on-chain\n   bitcoin state and find the signal.\n\nThat\u2019s it! The structure of the contract would be genesis and that\nthing called \u201cstate extension\u201d - and nothing more. \u201cNormal\u201d RGB\nflow (known to those who read about RGB before introduction of \nstate extensions) with state transitions and witness bitcoin \ntransactions would start only when Alice would like to spend that \nBTC* or to peg out - and at that point of time an RGB state \ntransition will have to be created, and a corresponding bitcoin \ntransaction (called \u201cwitness transaction\u201d) spending that Alice\u2019s \nUTXO, will have to be crafted, signed and mined. \n\n\nFinal notes:\n============\n\nCommunication medium\n--------------------\n\nAll communications between Alice and Bob happens wherever they \nwant - in IRC, mailing list, Nostr, telegram - or using \ndecentralized networks like LN (with\u00a0[Storm]\u00a0on top, which we \ndeliberately created for that purpose). It would be also possible\nfor Alice and Bob to use their RGB Nodes which will be \ncommunicating through RGB RPC protocol - there is a lot of ways,\nand RGB is fully abstracted from them.\n\nGoing fully off-chain\n---------------------\n\nThe above design can be put fully off-chain if the group of players \nmay set up a n-of-n or n-of-m multiparty state channel (\u201cchannel \nfactory\u201d).\n\nQuestion of BTC*\n----------------\n\nRegarding BTC* creation, for now we do have at least two designs we \nhave developed over years: \n\n1) for Lightning channels, which has the same level of \n   trustlessness as the pure BTC in LN;\n\n2) on-chain \"lifting\" which is semi-trusted (trustless private \n   decentralized peg-in and semi-trusted federated peg-out \n   requiring user+federation multisig but no privacy/history \n   exposure thanks to zk; such on-chain lifting is still much \n   better than other alternatives with drivechains or federated \n   sidechains).\n\nLast, but not least\n-------------------\n\n> Is there any documentation or discussion archives that address the\n> problem of non-publishable conditional statements seemingly being\n> insecure in multiparty protocols, as previously described on this\n> list [1] by Ruben Somsen? \n\nAs far as I see, Ruben's letter was about different protocol, built\nby Lightning Labs after they had studied (since they did plan to \nimplement) RGB - but they ended up with taking results of many years\nof our research and did a successful fundraising of ~80m on it, even \n\"forgetting\" to mention the original authors - until they were\nashamed by the community. Funny enough, even the original name of \ntheir \"protocol\" was [CMYK].\n\nI have no desire on commenting how they solved (and did they solve) \nthat - or any other - problem. I expect that they would again try \nto take the solution I have described above and do another \nfundraising with motto of transforming their product into \u201csmart \ncontracts on Lightning\u201d :)\n\n\nKind regards,\nMaxim Orlovsky\nCEO (Chief engineering officer)\n@ LNP/BP Standards Association,\nhttps://lnp-bp.org\nTwitter: @lnp_bp\n\n-----\n\n[1]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-April/021559.html\n[Storm]: https://github.com/Storm-WG\n[CMYK]: [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020208.html](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020208.html)"
            },
            {
                "author": "David A. Harding",
                "date": "2023-04-19T19:37:53",
                "message_text_only": "On 2023-04-18 13:16, Dr Maxim Orlovsky wrote:\n> 1. Assume we have some BTC lifted to RGB, which we will name BTC*.\n>    (let\u2019s leave the question on how to do that aside; it can be\n>    discussed separately).\n\nHi Maxim,\n\nOk, I think I understand you, but I'd like to try rephrasing what you\nwrote in a very brief format to see if you agree that it's correct and\nin the hopes that it might help other Bitcoin/LN developers understand.\n\n- Xavier and Yasmin create an RGB contract that says any BTC deposited\n   into multi(2,x,y) can be used as BTC\\*\n\n- Bob acquires some of this BTC\\*\n\n- Bob offers his BTC\\* to anyone who can provide x for (4 == 2 * x)\n\n- Alice knows x = 2\n\n- Alice asks Xavier and Yasmin to sign an onchain transaction\n   withdrawing Bob's BTC\\*. She provides them proof that Bob offered his\n   BTC\\* and that she knew the answer.  The both sign the the \ntransaction.\n\nIn short, I think this capability of RGB allows easily creating\nuser-defined sidechains based on arbitrary scripts.  This is similar to\nwhat Elements allowed last I looked at it, although RGB makes the\nprocess of creating new sidechains much smoother, reduces global state,\nand allows sidechain tokens (including tokens like lifted BTC) to be\nused with LN without sidechain-specific programming.  That seems like a\nsignificant advance to me.\n\nWhat it doesn't provide is trustless contracting beyond the capabilities\nof Bitcoin script.  To be fair, when I looked at your documentation\nagain just now, I don't see it promising enhanced **trustless**\ncontracting---I see it only promising enhanced contracting, which I (and\nperhaps others) seem to have interpreted as also being trustless.\n\nI hope I've understood you correctly.  Regardless, thank you for your\nmany detailed answers to my questions!\n\n-Dave"
            },
            {
                "author": "Dr Maxim Orlovsky",
                "date": "2023-04-19T22:17:57",
                "message_text_only": "Hi David,\n\n> Ok, I think I understand you, but I'd like to try rephrasing what you\n> wrote in a very brief format to see if you agree that it's correct and\n> in the hopes that it might help other Bitcoin/LN developers understand.\n\nIn your description you mix together question of how BTC* can be issued\nand how the contract settlement happens. However, they must be \ndistinguished, otherwise the contract trust model can't be anyhow better\nthan a fixed centralized BTC* design you add to the equation as an \nassumption:\n\n> What it doesn't provide is trustless contracting beyond the \n> capabilities of Bitcoin script.\n\nHowever:\n1. Contract x*2=4 settlement is fully trustless.\n2. BTC* contract settlement may vary.\n\nOne may argue that there is no way of getting BTC* in a trustless way, \nbut this is not true:\n\n1. We may have a trustless BTC* in lightning channels (including\n   multiparty channels with many participants).\n\n2. It also depends on how you define the value of the original BTC.\n   If BTC is a coin existing in bitcoin blockchain, than yes - you\n   can't have a fully trustless BTC* for on-chain operations. But if\n   you define BTC as a digital scarcity strictly inheriting existing\n   UTXO  set from bitcoin blockchain, but which may exist elsewhere\n   than bitcoin blockchain, you may have a 100% trustless BTC*.\n\nWhat can be a case for (2)? As I told in my first letter, with RGB\nwe do not need the existing heavy-duty bitcoin blockchain at all.\nWe still need a layer 1 settlement for our single-use-seals, but it may\nhave a very different design comparing to existing bitcoin blockchain.\n\nAt LNP/BP Standards Association we are working on such design for the\nlast 3 years, and have quite a lot of progress in this direction. The\ndesign we have for the layer 1 needed for client-side-validation \n(which Peter Todd calls \"proof of publication medium\") can be \nrepresented as a single signature + pubkey per block, scaling up to\ntheoretically unlimited number of transactions. There are still some\nproblems we have to solve, but overall the direction seems realistic.\n\nSo, if/once we have a new blockchain, RGB (or its successor) can \noperate on both bitcoin blockchain (let's call it timechain) and the \nnew blockchain (we call the new blockchain \"sigchain\" or \"sealchain\", \ndepending on the design model - we currently have 2 of them). Than, BTC\ncan be 100% trustlessly lifted from the timechain into RGB - and than\noperate on top of the sigchain. In this model no pegout would be ever\nneeded, and the last point of trust gets removed.\n\n\n> In short, I think this capability of RGB allows easily creating\n> user-defined sidechains based on arbitrary scripts.\n\nTrue, but RGB capabilities are even much larger than that. There is a \nplenty of smart contracts which do not need BTC/BTC* at all and can \noperate on RGB even today - but which were impossible on bitcoin \nblockchain or lightning before RGB (at least without heavily polluting \nblock space):\n\n1. Bearer securities - corporate shares, bonds, options, futures etc. \n   They will be 100% confidential and censorship-resistant + scalable\n   b/c of Lightning network. Yes, you still trust the issuer (like with\n   corporate shares), but the the secondary market is much improved.\n2. Bearer ownership rights (\"NFTs done in the right way\"), again\n   private, scalable, not polluting blockchain. For instance, I would\n   like to have all books & songs as a bought to be present in this\n   format. This also opens options for creators to earn commissions not\n   just from an initial sale, but also from secondary market.\n3. Digital collateral-based stable coins (in terms of their purchasing\n   power and not necessary linked to any fiat).\n4. Digital identity, where RGB and single-use-seals make key revocation\n   a global event. Without this it is impossible to prove that a given\n   key was or was not revoked at certain date.\n5. Decentralized naming systems - like ENS, but much better because\n   no ethereum is required :)\n6. Provable historical event logs: opentimestamps doesn't allow\n   proving that there is no alternative commitments. With RGB it is \n   possible to build event logs which has 100% trustless provable\n   properties that no alternative history of the events does exist.\n   For instance, if a doctor gives a prediction that a baby will be\n   a boy and not a girl, it is impossible to witness the case with\n   OpenTimeStamp (the doctor can make 2 OTSes for both outcomes),\n   while with RGB it can be proven that no alternative commitment was\n   created.\n7. Liquidity pools, DEXes, AMM and other fancy stuff on Lightning,\n   which we call \"BiFi\" (Bitcoin finance). One may listen to the talk\n   on the last Bitcoin Amsterdam conference where I have presented\n   that concept [1]. It requires more than just RGB - also some\n   improvements to the Lightning network and protocols like Storm\n   as a decentralized (tokenless!) data layer - but all of that is\n   WIP at LNP/BP Standards Association with many parts already being\n   released in a test versions (another reason why LNP Node is\n   important - a topic we were discussing two e-mails ago).\n\nThus we say that RGB allows everything what can be done with existing\n\"blockchain smart contracts\" - but in much more scalable, \nprivacy-preserving way and with bitcoin, not requiring new/other \ntokens. Arguably, this is the largest thing that happened to bitcoin \nsince bitcoin, with a potential to make Lightning network obsolete\n(sigchain potentially exceeds in scalability the existing LN, \nespecially when gossip traffic and liquidity limitations are taken\ninto account).\n\nThe time will show where all these assumptions about the potential of\nsigchain and #BiFi are correct. Meanwhile, we at LNP/BP Standards\nAssociation continue our work on advancing bitcoin protocol and\nlightning network protocols - without whining about any soft- or hard-\nforks :). Of course, we, as a non-profit, need support - so all bitcoin\nhodlers are welcome to join the very few organizations and individuals\nalready supporting our efforts [2], making all this future possible \n(you can contact us via \"ukolova [at] lnp-bp.org\").\n\nAt the end, I'd like t, thank you for the detailed analysis and great\nwrite-up on RGB in the latest Bitcoin Optech Newsletter. It explains\nRGB in more simple words than I was was able to!\n\n\nKind regards,\nMaxim Orlovsky\nLNP/BP Standards Association\nGitHub: https://github.com/LNP-BP\nTwitter: @lnp_bp\n\n\n[1]: https://www.youtube.com/watch?v=DtkTE6m0zio\n[2]: https://rgb.tech/thanks/sponsors/"
            }
        ],
        "thread_summary": {
            "title": "RGB protocol announcement",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Federico Tenga",
                "Dr Maxim Orlovsky",
                "David A. Harding"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 59605
        }
    },
    {
        "title": "[bitcoin-dev] Civ Kit: A Peer-to-Peer Electronic Market System",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2023-04-13T14:10:01",
                "message_text_only": "Hi list,\n\nWe have been working since a while with Nicholas Gregory (Commerce Block),\nRay Youssef (the Built With Bitcoin foundation) and few others on a new\npeer-to-peer market system to enable censorship-resistant and\npermissionless global trading in all parts of the world. While the design\naims in priority to serve on-ramp/off-ramp trading, it can be extended to\nsupport any kind of trading: goods, services, bitcoin financial derivatives\nlike discreet log contracts.\n\nThe design combines the Nostr architecture of simple relays announcing\ntrade orders to their clients with Lightning onion routing infrastructure,\ntherefore granting high-level of confidentiality to the market\nparticipants. The market boards are Nostr relays with a Lightning gateway,\neach operating autonomously and in competition. The market boards can be\nrunned as a federation however there is no \"decentralized orderbook\" logged\ninto the blockchain. The trades are escrowed under Bitcoin Script\ncontracts, relying on moderations and know your peer oracles for\nadjudication.\n\nThe scoring of trades, counterparties and services operators should be\nenabled by the introduction of a Web-of-Stakes, assembled from previous\nideas [0]. From the Bitcoin UTXO set servicing as a trustless source of\ntruth, an economic weight can be assigned to each market entity. This\nreputation paradigm could be composed with state-of-the-art Web-of-Trust\ntechniques like decentralized identifiers [1].\n\nA consistent incentive framework for service operators is proposed by the\nintermediary of privacy-preserving credentials backed by Bitcoin payments,\nfollowing the lineaments of IETF's Privacy Pass [2]. Services operators\nlike market boards and oracles are incentivized to thrive for efficiency,\nakin to routing hops on Lightning and miners on the base layer.\n\nThe whitepaper goes deep in the architecture of the system [3] (Thanks to\nthe peer reviewers!).\n\nWe'll gradually release code and modules, extensively building on top of\nthe Lightning Dev Kit [4] and Nostr libraries. All according to the best\nBitcoin open-source and decentralized standards established by Bitcoin Core\nand we're looking forward to collaborating with everyone in the community\nto standardize libraries and guarantee interoperability between clients\nwith long-term thinking.\n\nFeedback is very welcome!\n\nCheers,\nNick, Ray and Antoine\n\n[0]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-November/002884.html\n[1] https://www.w3.org/TR/2022/REC-did-core-20220719/\n[2] https://privacypass.github.io\n[3] https://github.com/civkit/paper/blob/main/civ_kit_paper.pdf\n[4] https://lightningdevkit.org\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230413/50c9a4a1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Civ Kit: A Peer-to-Peer Electronic Market System",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Antoine Riard"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2821
        }
    },
    {
        "title": "[bitcoin-dev] Conjectures on solving the high interactivity issue in payment pools and channel factories",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2023-04-18T03:38:57",
                "message_text_only": "Hi John,\n\nThanks for the read!\n\n> Agreed that signing updates and monitoring the blockchain both create\nalways-online requirements that are not compatible with casual users'\ndesires. I think\n> it's helpful to separate these two cases, as they affect different\nparties and their solutions differ.\n> In particular, limited availability to sign updates affects one's\npartners and can be addressed by having fewer partners, not partnering with\ncasual users, evicting > unresponsive users, etc.\n> Limited availability to monitor the blockchain affects the security of\none's own funds and can be addressed by increasing one's safety parameters\n(such as the > to_self_delay parameter in Lightning).\n\nYes, I think effectively the logical coordination of the signed off-chain\nupdates and the chain monitoring is defining the problem space. Of course,\nthere is the solution of\nhaving less off-chain partners and bumping safety timelocks.\n\nThough here I think it comes at the downside of more UTXO storage\nrequirements for base-layer nodes and an average increase in the price of\nliquidity for LN users due to more extensive timevalue.\n\nI think an intermediary solution can be to make the signing updates (and\nthe fraud proofs or \"partition statements\" in the post) a structure\nenforceable by Bitcoin Script in a way than all the \"revoked\" on-chain\npartitions can be punished, like with some\nOP_MERKLE_ADD/TAPROOT_LEAF_UPDATE_VERIFY to ensure the cheater cannot\nescape the clawback ?\n\n> I would argue that we want a completely trust-free solution, if at all\npossible, while respecting users' actual availability.\n> We should only consider solutions that require trust if we can't find a\ntrust-free solution that meets all other requirements.\n\nI would love to find a completely trust-free solution. One of the hard\nthings is defining trust :)\n\nNote, as soon as you start to consider off-chain Bitcoin trust models you\nhave a multi-dimensional risks model to solve e.g miners incentives,\nnetwork connectivity, mempools congestion, proactive security of your\nthreshold signing shares in face of your counterparty liveliness, consensus\nupgrades\naltering network-wide transaction-relay rules, ...\n\n> Actually, there's a third class of solutions that are possible, namely\nones that use separate control transactions and value transactions (where\nthe value > transactions \"spend\", and therefore depend on, the control\ntransactions).\n> If an invalid control transaction is put on-chain, it can be blocked by\nanother user by spending its output(s) before the output(s) can affect the\nvalue transaction.\n> Thus, control transactions can be viewed as proposals for state updates,\nand those proposals are blocked if they aren't valid.\n> These solutions differ from prophylactic solutions, as they allow\nincorrect transactions to be put on-chain and require another user to block\nthem.\n> They also differ from your definition of a corrective security model, as\nthey never allow the state update to be applied to the value in the channel\nor pool, so\n> there's nothing to be corrected.\n> An example of this third class of solutions is the Tunable-Penalty\nFactory protocol [1].\n> Of course, this example was not available when you noted that solutions\nare either prophylactic or corrective.\n\nFYI, I think the idea of separating control transactions and value\ntransactions (as done in electronic engineering between control signal and\nactual voltage) has been explored in the past [0].\n\nI still believe this family of solutions can be fitted in the corrective\nclass, as you have an invalid control transaction that can be corrected by\nanother *valid* control transaction, and I still think it's incentive-based\nas there is a risk of the valid control transaction never confirming ? Or\nthe funds getting frozen due to a miscellaneous broadcast?\n\n> On the other hand, protocols that use separate control and value\ntransactions do not have this limitation.\n> For example, the Tunable-Penalty Factory protocol is a multi-party\nprotocol in which every dishonest party is penalized and there is no\neconomic disequilibrium.\n\nYes, I think this is a good observation. For the partitioned-payment pool\nthis can be corrected by ensuring only the honest party can enforce the\npartitioned statement and you have to timestamp them in the chain for\nBitcoin Script itself to order them, I think.\n\nDo the Tunable-Penalty Factory protocol have any \"partition-throughput\"\nlimit due to a subsidiary reliance on the chain or the liveliness of the N\ncounterparties ?\n\n> If I understand this correctly, I think a penalty mechanism that allows a\n\"wronged\" user to take some or all of a dishonest user's funds could be\nexploited by a malicious coalition.\n> Consider the case where Alice is an honest user who joins a partition\nwith Bob, where Bob and Carol are in a malicious coalition.\n> Alice believes she has pooled her funds with Bob's and so she is able to\nwork with Bob to implement an off-line update of their balances, with Alice\nbelieving\n> that she has gained ownership over some of Bob's funds.\n> However, when the partitioning Update transaction that joins Alice's and\nBob's funds is put on-chain, Carol pretends to have been \"wronged\" by Bob\nand uses > the penalty mechanism to seize Bob's funds.\n> In this case, Alice won't be able to get the funds that she thought she\nhad obtained from Bob.\n\nYes you need to order the \"partition-statements\" otherwise you're falling\non this issue and the ordering happening in a proof-of-non-publication\nspace, I think [1].\n\nBest,\nAntoine\n\n[0] https://rubin.io/talks/2017/01/26/multi-txn-contracts/\n[1] https://petertodd.org/2016/state-machine-consensus-building-blocks\n\nLe ven. 17 mars 2023 \u00e0 20:55, jlspc <jlspc at protonmail.com> a \u00e9crit :\n\n> Hi Antoine,\n>\n> Thanks for your insightful post on the interactivity issue.\n>\n> Some thoughts are inline below.\n>\n> > However, those constructions require all the users to be online and\n> > exchange rounds of signatures to update the balance distribution. Those\n> > liveliness/interactivity requirements are increasing with the number of\n> > users, as there are higher odds of *one* lazzy/buggy/offline user stalling\n> > the pool/factory updates.\n>\n> > In echo, the design of LN was envisioned for a network of\n> > always-online/self-hosted participants, the early deployment of LN showed\n> > the resort to delegated channel hosting solutions, relieving users from the\n> > liveliness requirement. While the trust trade-offs of those solutions are\n> > significant, they answer the reality of a world made of unreliable networks\n> > and mobile devices.\n>\n> Agreed that signing updates and monitoring the blockchain both create always-online requirements that are not compatible with casual users' desires.\n> I think it's helpful to separate these two cases, as they affect different parties and their solutions differ.\n> In particular, limited availability to sign updates affects one's partners and can be addressed by having fewer partners, not partnering with casual users, evicting unresponsive users, etc.\n> Limited availability to monitor the blockchain affects the security of one's own funds and can be addressed by increasing one's safety parameters (such as the to_self_delay parameter in Lightning).\n>\n> > Ideally, I think we would like a trust-minimized solution enabling\n> > non-interactive, off-chain updates of the pool/factory, with no or minimal\n> > consumption of blockspace.\n>\n> I would argue that we want a completely trust-free solution, if at all possible, while respecting users' actual availability.\n> We should only consider solutions that require trust if we can't find a trust-free solution that meets all other requirements.\n>\n> > For the remainder of this post, only the pool use-case will be mentioned.\n> > Though, I think the observations/implications can be extended to factories\n> > as well.\n>\n> > Of course, the double-spend issue is already addressed on the Bitcoin\n> > base-layer due to nodes consensus convergence on the most-proof-of-work\n> > accumulated valid chain of blocks. While reorg can happen, a UTXO cannot be\n> > spent twice on the same chain. This security model can be said to be\n> > prophylactic, i.e an invalid block cannot be applied to a node's state and\n> > should be rejected.\n>\n> > The double-spend issue is also solved in its own way in payment channels.\n> > If a transaction is published, of which the correctness has been revoked\n> > w.r.t negotiated, private channel state, the wronged channel users must\n> > react in consequence. This security model can be said to be corrective,\n> > states updates are applied first on the global ledger then eventually\n> > corrected.\n>\n> > A solution to the pool partition equivocation issue appears as either based\n> > on a prophylactic one or a corrective security model.\n>\n> Actually, there's a third class of solutions that are possible, namely ones that use separate control transactions and value transactions (where the value transactions \"spend\", and therefore depend on, the control transactions).\n> If an invalid control transaction is put on-chain, it can be blocked by another user by spending its output(s) before the output(s) can affect the value transaction.\n> Thus, control transactions can be viewed as proposals for state updates, and those proposals are blocked if they aren't valid.\n>\n> These solutions differ from prophylactic solutions, as they allow incorrect transactions to be put on-chain and require another user to block them.\n> They also differ from your definition of a corrective security model, as they never allow the state update to be applied to the value in the channel or pool, so there's nothing to be corrected.\n> An example of this third class of solutions is the Tunable-Penalty Factory protocol [1].\n> Of course, this example was not available when you noted that solutions are either prophylactic or corrective.\n>\n> > E.g, let's say you have Alice, Bob, Caroll and Dave as pool participants.\n> > Alice contacts Bob to form a first partition, then Caroll to form a second\n> > one, then Dave to form a last one. If she is successful in that\n> > equivocation trick, she can *triple*-spend her balance against any goods or\n> > out-of-pool payments.\n>\n> > However, correction can only\n> > be limited to the equivocated balance. Therefore, it appears that\n> > corrective security models in the context of multi-party are always\n> > producing an economic disequilibrium.\n>\n> On the other hand, protocols that use separate control and value transactions do not have this limitation.\n> For example, the Tunable-Penalty Factory protocol is a multi-party protocol in which every dishonest party is penalized and there is no economic disequilibrium.\n>\n> > I think that leveraging covenants a revocation mechanism could be attached\n> > on any equivocating branch of transactions, allowing in the above case a\n> > single honest user to punish the publication. While a revocation mechanism\n> > does not work in case of multiple defrauded users, I believe the existence\n> > of a revocation mechanism makes the formation of malicious coalitions\n> > unsafe for their conjurers.\n>\n> > Indeed, any user entering in the coalition is not guaranteed to be blinded\n> > to other equivocating branches generated by the partition initiator.\n> > Therefore, the publication of a partition statement by everyone is\n> > holistically optimal to discover any equivocating candidate among the pool\n> > users.\n>\n> If I understand this correctly, I think a penalty mechanism that allows a \"wronged\" user to take some or all of a dishonest user's funds could be exploited by a malicious coalition.\n> Consider the case where Alice is an honest user who joins a partition with Bob, where Bob and Carol are in a malicious coalition.\n> Alice believes she has pooled her funds with Bob's and so she is able to work with Bob to implement an off-line update of their balances, with Alice believing that she has gained ownership over some of Bob's funds.\n> However, when the partitioning Update transaction that joins Alice's and Bob's funds is put on-chain, Carol pretends to have been \"wronged\" by Bob and uses the penalty mechanism to seize Bob's funds.\n> In this case, Alice won't be able to get the funds that she thought she had obtained from Bob.\n>\n> Does that make sense?\n>\n> Regards,\n> John\n>\n> [1] Law, \"Efficient Factories For Lightning Channels\", available at https://github.com/JohnLaw2/ln-efficient-factories.\n>\n>\n>\n>\n> Sent with Proton Mail <https://proton.me/> secure email.\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230418/9909daea/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Conjectures on solving the high interactivity issue in payment pools and channel factories",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Antoine Riard"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 12720
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Contracting Primitives WG 6th Meeting, Tuesday 18 Apr. 18:00 UTC",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2023-04-18T04:11:03",
                "message_text_only": "Hi list,\n\nI'm proposing Tuesday 18th April at 18:00 UTC, i.e today in function of\nyour timezones for the\n6th Bitcoin contracting primitives WG meeting (the third Tuesday of April\nmonth, as done previously).\n\nMade a soft proposal for the agenda, pinning ANYPREVOUT+OP_VAULT and\nuse-cases like payments pools/factories, Eltoo channels and vaults as they\nhave been actively worked on during the last months.\n\nhttps://github.com/ariard/bitcoin-contracting-primitives-wg/issues/39\n\nVery sorry for the late announcement - Made an announcement on\n#bitcoin-contracting-primitives-wg on Libera chat last week. I was able to\nhost this meeting.\n\nStill looking to more maintainers and reviewers for the repository and move\nforward with the goal of doing high-quality archiving of the\nconsensus changes documentation. On the meetings themselves, personally I\nstill appreciate them as it's an opportunity to listen to what everyone has\nbeen working on and if review bandwidth is needed.\n\nCheers,\nAntoine\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230418/facf9fa9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Contracting Primitives WG 6th Meeting, Tuesday 18 Apr. 18:00 UTC",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Antoine Riard"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1172
        }
    },
    {
        "title": "[bitcoin-dev] Proposal to Remove BIP35 P2P 'mempool' Message",
        "thread_messages": [
            {
                "author": "Will Clark",
                "date": "2023-04-18T06:37:45",
                "message_text_only": "I'd like to discuss potential removal of the BIP35 P2P `mempool` \nmessage.\n\nSupporting the BIP35 `mempool` message for arbitrary peers is bad for \nprivacy while being relatively inefficient for trusted peers. Its \noriginal intention was to be publicly callable, but it is now (in \nBitcoin Core) gated behind stricter Net Permissions which make it \naccessible to trusted peers only.\n\nWhen serving trusted clients one alternative might be to use the \n`savemempool` RPC, which can then be loaded directly (in whole) by the \nclient. This does currently have some shortcomings, namely that the \nclient will lose the contents of their mempool in the process, so if \nthey have different policies some transactions may be lost. Currently \nthere is no way to load and de-duplicate a mempool dumped by this RPC \ninto an existing mempool, although a PR has been opened to Bitcoin Core \nenabling this functionality so it may be available in the \nnot-too-distant future: \nhttps://github.com/bitcoin/bitcoin/pull/27460\n\nIn my view dumping and loading a dumped mempool to sync two trusted \nnodes (or bootstrap one node) makes more sense via RPC as more \ntransaction data can be included in the sync (e.g. transaction expiry \ntime), but there is an argument to be made that syncing via P2P message \nwould be more convenient.\n\nN.B. that two (un-patched) bitcoin nodes cannot currently sync from each \nother using the `mempool` P2P message as there is no functionality to \n_send_ these messages, only to service them.\n\nRemoving this message would also provide an (albeit small) clean-up to \nthe P2P codebase, bringing with it the usual benefits in terms of \nmaintainability etc.\n\nI have a draft PR open for the removal of the mempool message here: \nhttps://github.com/bitcoin/bitcoin/pull/27426\n\nHowever, before moving forward, I want to ensure that there are no \nactive use cases or technical opposition to its removal from readers of \nthis list. To that end, I kindly request your input on the following \nquestions:\n\n1. Are there any parties who still directly rely on the BIP35 P2P \n`mempool` message? If so, please share your use case and any potential \nimpact that the removal might have on your operations.\n\n2. Do you foresee any issues or negative consequences resulting from the \nremoval of the `mempool` message? If so, please elaborate on the \npotential problems and their severity.\n\n From a quick search of node implementations I can see `btcd`, \n`libbitcoin` and `BitcoinJ` all have BIP35 messages specified, but I \nhave not checked more deeply to see if they are using/servicing/ignoring \nthem, and it's difficult to gauge upstream usage by other projects \nwithout outreach like this...\n\nI look forward to hearing your thoughts.\n\n\n-- \n\n\nCheers,\nWill"
            },
            {
                "author": "David A. Harding",
                "date": "2023-04-18T16:57:41",
                "message_text_only": "> When serving trusted clients one alternative might be to use the\n> `savemempool` RPC, which can then be loaded directly (in whole) by the\n> client.\n\nIt was common in the past for lightweight clients to load a BIP37 filter\nand then send a `getdata` for requesting `mempool`.  In that case, the\nnode would filter the mempool transactions and only send transactions\nmatching the filter to the client (plus false positives, which the\nclient could choose to keep very low).\n\nThe above approach minimized the amount of data that needed to be\ntransferred, which can be very important for lite clients on metered or\nbandwidth-limited connections---especially considering that lite clients\non poor connections (e.g. mobile) might get disconnected frequently and\nso need to re-request the filtered mempool every time they reconnect to\nacquire any new unconfirmed transactions that arrived while they were\ndisconnected.\n\nBy comparison, during a period of backlog (the natural state, we hope),\nthe mempool contents in the `savemempool` format are about 300 MB.  I\nthink that's a bit much to potentially be sending to lite clients just\nso they can learn about any unconfirmed transactions which arrived since\nthey last connected.\n\nAlthough I understand and support the desire to remove problematic\npublic interfaces like BIP37 and BIP35, I think we should also be aiming\nto build interfaces which make it easier for people to use third-party\nwallets with their own trusted nodes.  Right now, it's possible to \nuse[*]\n`getheaders`, BIP157/8, and `getdata(block)` with your own node to learn\nabout all confirmed transactions affecting your wallet.  It's also\npossible now to use BIP37 and BIP35 to get unconfirmed transactions in\na bandwidth-efficient manner, if your connection is allowlisted.\n\nI would personally like to see lite clients that use a trusted node\nreceive a replacement for BIP35/7 support before those protocols are\nremoved.  (Of course, I'd also like to see support for BIP324 and for\nsomething like countersign so that authenticated and encrypted\nconnections from a lite client to a trusted node are easy to setup.)\n\nThanks,\n\n-Dave\n\n[*]: Requires an authenticated connection to be secure (and should\n      ideally be encrypted)."
            }
        ],
        "thread_summary": {
            "title": "Proposal to Remove BIP35 P2P 'mempool' Message",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Will Clark",
                "David A. Harding"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4978
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core maintainers and communication on merge decisions",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2023-04-18T12:40:44",
                "message_text_only": "Communication has been a challenge on Bitcoin Core for what I can tell the entire history of the project. Maintainers merge a pull request and provide no commentary on why they\u2019ve merged it. Maintainers leave a pull request with many ACKs and few (if any) NACKs for months and provide no commentary on why they haven't merged it. I can only speculate on why and it probably depends on the individual maintainer. Sometimes it will be poor communication skills, sometimes it will be a desire to avoid accountability, sometimes it will be fear of unreasonable and spiteful legal action if they mistakenly merge a pull request that ends up containing a bug. But search through the pull requests on Bitcoin Core and you will rarely see a rationale for a merge decision. The difference between say previous maintainers like Wladimir and some of the current maintainers is that previous maintainers were extremely responsive on IRC. If you disagreed with a merge decision or thought it had been merged prematurely they would be happy to discuss it on IRC. In present times at least a subset of the current maintainers are not responsive on IRC and will refuse to discuss a merge decision. One farcical recent example [0] was the pull request to add Vasil Dimov as a maintainer where despite many ACKs from other maintainers and other long term contributors two maintainers (fanquake and Gloria) refused to discuss it on the pull request or on IRC. It took almost 5 months for Gloria to comment on the pull request despite many requests from me on the PR and on IRC. I even requested that they attend the weekly Core Dev IRC meeting to discuss it which they didn\u2019t attend.\n\nA pull request to add a maintainer isn\u2019t a normal pull request. Generally pull requests contain a lot more lines of code than a single line adding a trusted key. Not merging a pull request for a long period of time can be extremely frustrating for a pull request author especially when maintainers and long term contributors don\u2019t comment on the pull request and the pull request is stuck in \u201crebase hell\u201d. Clearly it is the lesser evil when compared to merging a harmful or bug ridden pull request but poor non-existent communication is not the only way to prevent this. Indeed it creates as many problems as it solves.\n\nAnother farcical recent(ish) example was the CTV pull request [1] that ultimately led to a contentious soft fork activation attempt that was called off at the last minute. If you look at the comments on the pull request there were 3 individuals (including myself) who NACKed the pull request and I think it is fair to say that none of us would be considered long term contributors to Bitcoin Core. I have criticised Jeremy Rubin multiple times for continuing to pursue a soft fork activation attempt when it was clear it was contentious [3] but if you look at the pull request comments it certainly isn\u2019t clear it was. Maintainers and long term contributors (if they commented at all) were gently enthusiastic (Concept ACKing etc) without ACKing that it was ready to merge. A long term observer of the Core repo would have known that it wasn\u2019t ready to merge or ready to attempt to activate (especially given it was a consensus change) but a casual observer would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of these casual observers inflated the numbers on the utxos.org site [4] signalling support for a soft fork activation attempt.\n\nI set out originally to write about the controls and processes around merges on the default signet (bitcoin-inquisition [5]) but it quickly became obvious to me that if communication around Core merges/non-merges is this weak you can hardly expect it to be any better on bitcoin-inquisition/default signet where there is no real monetary value at stake. I will probably write about bitcoin-inquisition/default signet in a future email as I do think the perception that it is \u201cthe one and only\u201d staging ground for consensus changes is dangerous [6] if the maintainer(s) on that project have the same inclinations as a subset of the Core maintainers.\n\nAs I stated at the beginning there is an element to this which is not individual(s) specific and an adverse reaction to outright malicious actors external to any of these projects. I do not think any of the current maintainers on Core or bitcoin-inquisition are outright malicious even if a subset of them consistently frustrate me with their lack of transparency and accountability. But this issue isn't going away and I'm sure we'll hear more on this from others in the coming months. To me it is a straight choice of taking transparency and accountability much more seriously or failing that investing more heavily (time and resources) in consensus compatible forks of Core and treating Core like it is a proprietary \"open source\" project where merge decisions are not explained or justified in the open.\n\n[0]: https://github.com/bitcoin/bitcoin/pull/25871\n\n[1]: https://github.com/bitcoin/bitcoin/pull/21702\n\n[2]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020386.html\n\n[3]: https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n\n[4]: https://utxos.org/signals/\n\n[5]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\n\n[6]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020948.html\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230418/dd827725/attachment-0001.html>"
            },
            {
                "author": "Erik Aronesty",
                "date": "2023-04-19T00:56:48",
                "message_text_only": "yes, the code itself was far less contentious than the weird stab at\nforking the network\n\nthere remains a real chance that bip 119 is the simplest and most flexible\nand reasonably safe covenant tech for many use cases\n\nalthough im partial to 118 as well because lightning is a killer app and it\nmakes batch channels more efficient\n\n\n\nOn Tue, Apr 18, 2023, 7:39 PM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Communication has been a challenge on Bitcoin Core for what I can tell the\n> entire history of the project. Maintainers merge a pull request and provide\n> no commentary on why they\u2019ve merged it. Maintainers leave a pull request\n> with many ACKs and few (if any) NACKs for months and provide no commentary\n> on why they haven't merged it. I can only speculate on why and it probably\n> depends on the individual maintainer. Sometimes it will be poor\n> communication skills, sometimes it will be a desire to avoid\n> accountability, sometimes it will be fear of unreasonable and spiteful\n> legal action if they mistakenly merge a pull request that ends up\n> containing a bug. But search through the pull requests on Bitcoin Core and\n> you will rarely see a rationale for a merge decision. The difference\n> between say previous maintainers like Wladimir and some of the current\n> maintainers is that previous maintainers were extremely responsive on IRC.\n> If you disagreed with a merge decision or thought it had been merged\n> prematurely they would be happy to discuss it on IRC. In present times at\n> least a subset of the current maintainers are not responsive on IRC and\n> will refuse to discuss a merge decision. One farcical recent example [0]\n> was the pull request to add Vasil Dimov as a maintainer where despite many\n> ACKs from other maintainers and other long term contributors two\n> maintainers (fanquake and Gloria) refused to discuss it on the pull request\n> or on IRC. It took almost 5 months for Gloria to comment on the pull\n> request despite many requests from me on the PR and on IRC. I even\n> requested that they attend the weekly Core Dev IRC meeting to discuss it\n> which they didn\u2019t attend.\n>\n>\n> A pull request to add a maintainer isn\u2019t a normal pull request. Generally\n> pull requests contain a lot more lines of code than a single line adding a\n> trusted key. Not merging a pull request for a long period of time can be\n> extremely frustrating for a pull request author especially when maintainers\n> and long term contributors don\u2019t comment on the pull request and the pull\n> request is stuck in \u201crebase hell\u201d. Clearly it is the lesser evil when\n> compared to merging a harmful or bug ridden pull request but poor\n> non-existent communication is not the only way to prevent this. Indeed it\n> creates as many problems as it solves.\n>\n>\n> Another farcical recent(ish) example was the CTV pull request [1] that\n> ultimately led to a contentious soft fork activation attempt that was\n> called off at the last minute. If you look at the comments on the pull\n> request there were 3 individuals (including myself) who NACKed the pull\n> request and I think it is fair to say that none of us would be considered\n> long term contributors to Bitcoin Core. I have criticised Jeremy Rubin\n> multiple times for continuing to pursue a soft fork activation attempt when\n> it was clear it was contentious [3] but if you look at the pull request\n> comments it certainly isn\u2019t clear it was. Maintainers and long term\n> contributors (if they commented at all) were gently enthusiastic (Concept\n> ACKing etc) without ACKing that it was ready to merge. A long term observer\n> of the Core repo would have known that it wasn\u2019t ready to merge or ready to\n> attempt to activate (especially given it was a consensus change) but a\n> casual observer would have only seen Concept ACKs and ACKs with 3 stray\n> NACKs. Many of these casual observers inflated the numbers on the\n> utxos.org site [4] signalling support for a soft fork activation attempt.\n>\n>\n> I set out originally to write about the controls and processes around\n> merges on the default signet (bitcoin-inquisition [5]) but it quickly\n> became obvious to me that if communication around Core merges/non-merges is\n> this weak you can hardly expect it to be any better on\n> bitcoin-inquisition/default signet where there is no real monetary value at\n> stake. I will probably write about bitcoin-inquisition/default signet in a\n> future email as I do think the perception that it is \u201cthe one and only\u201d\n> staging ground for consensus changes is dangerous [6] if the maintainer(s)\n> on that project have the same inclinations as a subset of the Core\n> maintainers.\n>\n>\n> As I stated at the beginning there is an element to this which is not\n> individual(s) specific and an adverse reaction to outright malicious actors\n> external to any of these projects. I do not think any of the current\n> maintainers on Core or bitcoin-inquisition are outright malicious even if a\n> subset of them consistently frustrate me with their lack of transparency\n> and accountability. But this issue isn't going away and I'm sure we'll\n> hear more on this from others in the coming months. To me it is a straight\n> choice of taking transparency and accountability much more seriously or\n> failing that investing more heavily (time and resources) in consensus\n> compatible forks of Core and treating Core like it is a proprietary \"open\n> source\" project where merge decisions are not explained or justified in the\n> open.\n>\n>\n> [0]: https://github.com/bitcoin/bitcoin/pull/25871\n>\n> [1]: https://github.com/bitcoin/bitcoin/pull/21702\n>\n> [2]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020386.html\n>\n> [3]:\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>\n> [4]: https://utxos.org/signals/\n>\n> [5]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\n>\n> [6]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020948.html\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230418/bcbd39a5/attachment-0001.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2023-04-19T10:09:00",
                "message_text_only": "Hi Erik\n\n> yes, the code itself was far less contentious than the weird stab at forking the network\n>\n> there remains a real chance that bip 119 is the simplest and most flexible and reasonably safe covenant tech for many use cases\n>\n> although im partial to 118 as well because lightning is a killer app and it makes batch channels more efficient\n\nThis is moving off the intended subject of the email although latest thoughts on BIP 118 and BIP 119 are an interesting separate topic. Perhaps start a new thread? The latest afaik is that both have been merged in bitcoin-inquisition [0] (default signet) and James O'Beirne concluded that he needed BIP 119/OP_CTV for his latest vault design that includes a new proposed opcode OP_VAULT (BIP 345) [1]. Designing and building vaults with the various proposed opcodes and sighash flags (and Simplicity when it is ready) is definitely what I hoped to see after the chaos of the attempted CTV activation. Hopefully more people will be drawn into this research and development area, I think it is a really interesting one [2] so I'm a bit bemused more people aren't following James and the Revault team and doing their own research and experimentation. I think darosior's (Revault) current view [3] is BIP 118/APO is sufficient for the vaults he wants to build. But yeah needs more informed views and you only really get a more informed view by trying to design and build things and realizing what you need or what is missing. It isn't convincing to embark on a soft fork activation process just because a couple of informed individuals want it.\n\nThanks\nMichael\n\n[0]: https://github.com/bitcoin-inquisition/bitcoin\n[1]: https://github.com/bitcoin/bips/pull/1421\n[2]: https://www.youtube.com/watch?v=S2lTfS5qMJE\n[3]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020276.html\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Wednesday, April 19th, 2023 at 01:56, Erik Aronesty <erik at q32.com> wrote:\n\n> yes, the code itself was far less contentious than the weird stab at forking the network\n>\n> there remains a real chance that bip 119 is the simplest and most flexible and reasonably safe covenant tech for many use cases\n>\n> although im partial to 118 as well because lightning is a killer app and it makes batch channels more efficient\n>\n> On Tue, Apr 18, 2023, 7:39 PM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Communication has been a challenge on Bitcoin Core for what I can tell the entire history of the project. Maintainers merge a pull request and provide no commentary on why they\u2019ve merged it. Maintainers leave a pull request with many ACKs and few (if any) NACKs for months and provide no commentary on why they haven't merged it. I can only speculate on why and it probably depends on the individual maintainer. Sometimes it will be poor communication skills, sometimes it will be a desire to avoid accountability, sometimes it will be fear of unreasonable and spiteful legal action if they mistakenly merge a pull request that ends up containing a bug. But search through the pull requests on Bitcoin Core and you will rarely see a rationale for a merge decision. The difference between say previous maintainers like Wladimir and some of the current maintainers is that previous maintainers were extremely responsive on IRC. If you disagreed with a merge decision or thought it had been merged prematurely they would be happy to discuss it on IRC. In present times at least a subset of the current maintainers are not responsive on IRC and will refuse to discuss a merge decision. One farcical recent example [0] was the pull request to add Vasil Dimov as a maintainer where despite many ACKs from other maintainers and other long term contributors two maintainers (fanquake and Gloria) refused to discuss it on the pull request or on IRC. It took almost 5 months for Gloria to comment on the pull request despite many requests from me on the PR and on IRC. I even requested that they attend the weekly Core Dev IRC meeting to discuss it which they didn\u2019t attend.\n>>\n>> A pull request to add a maintainer isn\u2019t a normal pull request. Generally pull requests contain a lot more lines of code than a single line adding a trusted key. Not merging a pull request for a long period of time can be extremely frustrating for a pull request author especially when maintainers and long term contributors don\u2019t comment on the pull request and the pull request is stuck in \u201crebase hell\u201d. Clearly it is the lesser evil when compared to merging a harmful or bug ridden pull request but poor non-existent communication is not the only way to prevent this. Indeed it creates as many problems as it solves.\n>>\n>> Another farcical recent(ish) example was the CTV pull request [1] that ultimately led to a contentious soft fork activation attempt that was called off at the last minute. If you look at the comments on the pull request there were 3 individuals (including myself) who NACKed the pull request and I think it is fair to say that none of us would be considered long term contributors to Bitcoin Core. I have criticised Jeremy Rubin multiple times for continuing to pursue a soft fork activation attempt when it was clear it was contentious [3] but if you look at the pull request comments it certainly isn\u2019t clear it was. Maintainers and long term contributors (if they commented at all) were gently enthusiastic (Concept ACKing etc) without ACKing that it was ready to merge. A long term observer of the Core repo would have known that it wasn\u2019t ready to merge or ready to attempt to activate (especially given it was a consensus change) but a casual observer would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of these casual observers inflated the numbers on the utxos.org site [4] signalling support for a soft fork activation attempt.\n>>\n>> I set out originally to write about the controls and processes around merges on the default signet (bitcoin-inquisition [5]) but it quickly became obvious to me that if communication around Core merges/non-merges is this weak you can hardly expect it to be any better on bitcoin-inquisition/default signet where there is no real monetary value at stake. I will probably write about bitcoin-inquisition/default signet in a future email as I do think the perception that it is \u201cthe one and only\u201d staging ground for consensus changes is dangerous [6] if the maintainer(s) on that project have the same inclinations as a subset of the Core maintainers.\n>>\n>> As I stated at the beginning there is an element to this which is not individual(s) specific and an adverse reaction to outright malicious actors external to any of these projects. I do not think any of the current maintainers on Core or bitcoin-inquisition are outright malicious even if a subset of them consistently frustrate me with their lack of transparency and accountability. But this issue isn't going away and I'm sure we'll hear more on this from others in the coming months. To me it is a straight choice of taking transparency and accountability much more seriously or failing that investing more heavily (time and resources) in consensus compatible forks of Core and treating Core like it is a proprietary \"open source\" project where merge decisions are not explained or justified in the open.\n>>\n>> [0]: https://github.com/bitcoin/bitcoin/pull/25871\n>>\n>> [1]: https://github.com/bitcoin/bitcoin/pull/21702\n>>\n>> [2]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020386.html\n>>\n>> [3]: https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>>\n>> [4]: https://utxos.org/signals/\n>>\n>> [5]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\n>>\n>> [6]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020948.html\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230419/77bcfdc9/attachment-0001.html>"
            },
            {
                "author": "alicexbt",
                "date": "2023-04-19T12:24:15",
                "message_text_only": "Hi Michael,\n\nI was initially sad about the politics in Vasil's pull request, written about it and also tried to document the process. Still think he deserves to be a maintainer. Although I have some counter arguments:\n\n> Maintainers merge a pull request and provide no commentary on why they\u2019ve merged it.\n\nI don't think commentary is required for each pull request that gets merged with enough reviews, ACKs and no controversy.\n\n> Maintainers leave a pull request with many ACKs and few (if any) NACKs for months and provide no commentary on why they haven't merged it\n\nThis could be considered normal in pull requests that involve code changes.\n\n> The difference between say previous maintainers like Wladimir and some of the current maintainers is that previous maintainers were extremely responsive on IRC.\n\nUnfair to expect every human to behave the same or work similarly. Sometimes the unresponsiveness could be to avoid controversies and heated debates that go off-topic.\n\n> One farcical recent example [0] was the pull request to add Vasil Dimov as a maintainer where despite many ACKs from other maintainers and other long term contributors two maintainers (fanquake and Gloria) refused to discuss it on the pull request or on IRC. It took almost 5 months for Gloria to comment on the pull request despite many requests from me on the PR and on IRC. I even requested that they attend the weekly Core Dev IRC meeting to discuss it which they didn\u2019t attend.\n\n- Maintainers should be free to avoid involvement in a pull request. As long as a subset of maintainers have an opinion on the pull request, things should be fine. \n- I agree with Gloria's [comment][0]: \"I had not NACKed this either because my opinion could change over time, NACKs are sometimes needlessly interpreted as personal attacks, and Brink has been antagonized on Twitter each time multiple grantees have similar opinions about this. So I'll add that if you wish to have more decentralization in Bitcoin Core funding, you can start by creating a nonprofit, gathering donations, and funding somebody who works on Bitcoin Core.\" Last part of this comment also solves the problem shared in other thread related to new bitcoin implementation. Brink needs some competition and bitcoin core needs more reviewers. \n- I also agree with Andrew's [comment][1]: \"frankly, I think opinions aren't being shared because of potential backlash from aggressive users such as yourself and bytes1440000\"\n\n> Maintainers and long term contributors (if they commented at all) were gently enthusiastic (Concept ACKing etc) without ACKing that it was ready to merge. A long term observer of the Core repo would have known that it wasn\u2019t ready to merge or ready to attempt to activate (especially given it was a consensus change) but a casual observer would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of these casual observers inflated the numbers on the utxos.org site [4] signalling support for a soft fork activation attempt.\n\n- I don't see anything wrong with sharing honest opinion if someone agrees with the concept. It does not make a pull request ready to get merged.\n- utxos.org is an external site maintained by Jeremy with opinions on BIP 119. Everyone is free to maintain such lists and I think you had also created one as GitHub gist.\n\n>  I will probably write about bitcoin-inquisition/default signet in a future email as I do think the perception that it is \u201cthe one and only\u201d staging ground for consensus changes is dangerous [6] if the maintainer(s) on that project have the same inclinations as a subset of the Core maintainers.\n\nThis perception (if exists) can be killed by creating a custom signet, maintaining it differently, get more reviews, testing and share details with community regularly.\n\n/dev/fd0\nfloppy disk guy\n\n[0]: https://github.com/bitcoin/bitcoin/pull/25871#issuecomment-1381654564\n[1]: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2023-01-12#883748\n\n\nSent with Proton Mail secure email.\n\n------- Original Message -------\nOn Tuesday, April 18th, 2023 at 6:10 PM, Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n\n> Communication has been a challenge on Bitcoin Core for what I can tell the entire history of the project. Maintainers merge a pull request and provide no commentary on why they\u2019ve merged it. Maintainers leave a pull request with many ACKs and few (if any) NACKs for months and provide no commentary on why they haven't merged it. I can only speculate on why and it probably depends on the individual maintainer. Sometimes it will be poor communication skills, sometimes it will be a desire to avoid accountability, sometimes it will be fear of unreasonable and spiteful legal action if they mistakenly merge a pull request that ends up containing a bug. But search through the pull requests on Bitcoin Core and you will rarely see a rationale for a merge decision. The difference between say previous maintainers like Wladimir and some of the current maintainers is that previous maintainers were extremely responsive on IRC. If you disagreed with a merge decision or thought it had been merged prematurely they would be happy to discuss it on IRC. In present times at least a subset of the current maintainers are not responsive on IRC and will refuse to discuss a merge decision. One farcical recent example [0] was the pull request to add Vasil Dimov as a maintainer where despite many ACKs from other maintainers and other long term contributors two maintainers (fanquake and Gloria) refused to discuss it on the pull request or on IRC. It took almost 5 months for Gloria to comment on the pull request despite many requests from me on the PR and on IRC. I even requested that they attend the weekly Core Dev IRC meeting to discuss it which they didn\u2019t attend.\n> \n> \n> \n> A pull request to add a maintainer isn\u2019t a normal pull request. Generally pull requests contain a lot more lines of code than a single line adding a trusted key. Not merging a pull request for a long period of time can be extremely frustrating for a pull request author especially when maintainers and long term contributors don\u2019t comment on the pull request and the pull request is stuck in \u201crebase hell\u201d. Clearly it is the lesser evil when compared to merging a harmful or bug ridden pull request but poor non-existent communication is not the only way to prevent this. Indeed it creates as many problems as it solves.\n> \n> \n> \n> Another farcical recent(ish) example was the CTV pull request [1] that ultimately led to a contentious soft fork activation attempt that was called off at the last minute. If you look at the comments on the pull request there were 3 individuals (including myself) who NACKed the pull request and I think it is fair to say that none of us would be considered long term contributors to Bitcoin Core. I have criticised Jeremy Rubin multiple times for continuing to pursue a soft fork activation attempt when it was clear it was contentious [3] but if you look at the pull request comments it certainly isn\u2019t clear it was. Maintainers and long term contributors (if they commented at all) were gently enthusiastic (Concept ACKing etc) without ACKing that it was ready to merge. A long term observer of the Core repo would have known that it wasn\u2019t ready to merge or ready to attempt to activate (especially given it was a consensus change) but a casual observer would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of these casual observers inflated the numbers on the utxos.org site [4] signalling support for a soft fork activation attempt.\n> \n> \n> \n> I set out originally to write about the controls and processes around merges on the default signet (bitcoin-inquisition [5]) but it quickly became obvious to me that if communication around Core merges/non-merges is this weak you can hardly expect it to be any better on bitcoin-inquisition/default signet where there is no real monetary value at stake. I will probably write about bitcoin-inquisition/default signet in a future email as I do think the perception that it is \u201cthe one and only\u201d staging ground for consensus changes is dangerous [6] if the maintainer(s) on that project have the same inclinations as a subset of the Core maintainers.\u00a0\n> \n> \n> \n> As I stated at the beginning there is an element to this which is not individual(s) specific and an adverse reaction to outright malicious actors external to any of these projects. I do not think any of the current maintainers on Core or bitcoin-inquisition are outright malicious even if a subset of them consistently frustrate me with their lack of transparency and accountability.\u00a0But this issue isn't going away and I'm sure we'll hear more on this from others in the coming months. To me it is a straight choice of taking transparency and accountability much more seriously or failing that investing more heavily (time and resources) in consensus compatible forks of Core and treating Core like it is a proprietary \"open source\" project where merge decisions are not explained or justified in the open.\n> \n> \n> \n> [0]: https://github.com/bitcoin/bitcoin/pull/25871\n> \n> [1]: https://github.com/bitcoin/bitcoin/pull/21702\n> \n> [2]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020386.html\n> \n> [3]: https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n> \n> [4]: https://utxos.org/signals/\n> \n> [5]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\n> \n> [6]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020948.html\n> \n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Michael Folkson",
                "date": "2023-04-19T13:33:35",
                "message_text_only": "Hi alicexbt\n\n> I don't think commentary is required for each pull request that gets merged with enough reviews, ACKs and no controversy.\n\nThe problem is defining what is \"enough\". \"Enough\" is determined by the quality of the review, the expertise of the reviewer(s), the complexity of the pull request and most importantly what risks a merge of the pull request poses. When there is zero communication on merge decisions (both merging and not merging over a long period of time) it creates frustration and worse vacuums and soft fork activation chaos. It is a complete black box. The vast majority of merge decisions are uncontroversial but it would still be nice to have a comment saying something like:\n\n\"This pull request only has 2 ACKs but it is low risk, relatively simple and is unlikely to be reviewed by anybody else in the near term\"\n\n\"This pull request is a consensus change, extremely high risk and is unlikely to be merged in the near term\"\n\nOn the rare occasions when merge decisions are controversial communication becomes a lot more important. If some maintainers aren't responsive on IRC and refuse to discuss merge decisions what can we expect in future? We wake up one day, a contentious consensus change has been merged with little review in advance of a release window and the maintainer won't discuss why they have merged it. This isn't a toy anymore, it is supporting hundreds of billions of dollars of value and could end up supporting a lot more. It is surely completely unreasonable to let maintainers merge or not merge whatever they like with no explanation and no willingness to discuss their merge decisions.\n\n> So I'll add that if you wish to have more decentralization in Bitcoin Core funding, you can start by creating a nonprofit, gathering donations, and funding somebody who works on Bitcoin Core.\" \n\nAs I responded on the pull request if any long term contributor from this alternative nonprofit is blocked from being a maintainer and current maintainers refuse to discuss merge decisions it is irrelevant. To contribute you need a maintainer to merge your pull request(s) and to spend your review time wisely you need to know what pull request(s) could viably be merged by a maintainer. Otherwise you're just wasting your time. We not only have opacity on merge decisions for normal pull requests (e.g. code) we also now have opacity on decisions for the addition of new maintainers. I was always under the impression that any long term contributor who demonstrated over time that they were sufficiently competent, qualified and able to contribute both through opening pull requests and reviewing other people's pull requests could become a maintainer. To me and many others (until it was blocked by two maintainers for 5 months) Vasil met this criteria. This not only impacts Vasil's and others' commitment to the project but it impacts what pull requests are ultimately reviewed and merged. What is the point of spending time opening or reviewing a pull request if the current maintainers won't look at it or are unqualified to review it and hence won't merge it?\n\nGloria's advice effectively boils down to spend months setting up a non-profit, spend years becoming a long term contributor to the project and then you can have the honor of being blocked from becoming a maintainer and have your contributions stunted by the current maintainers with no recourse or ability to discuss their merge decisions. So yeah thanks for repeating that advice but I'm sure most would rather pass and do something else.\n\nThanks\nMichael\n\n--\nMichael Folkson\nEmail: michaelfolkson at protonmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n\n------- Original Message -------\nOn Wednesday, April 19th, 2023 at 13:24, alicexbt <alicexbt at protonmail.com> wrote:\n\n\n> Hi Michael,\n> \n> I was initially sad about the politics in Vasil's pull request, written about it and also tried to document the process. Still think he deserves to be a maintainer. Although I have some counter arguments:\n> \n> > Maintainers merge a pull request and provide no commentary on why they\u2019ve merged it.\n> \n> \n> I don't think commentary is required for each pull request that gets merged with enough reviews, ACKs and no controversy.\n> \n> > Maintainers leave a pull request with many ACKs and few (if any) NACKs for months and provide no commentary on why they haven't merged it\n> \n> \n> This could be considered normal in pull requests that involve code changes.\n> \n> > The difference between say previous maintainers like Wladimir and some of the current maintainers is that previous maintainers were extremely responsive on IRC.\n> \n> \n> Unfair to expect every human to behave the same or work similarly. Sometimes the unresponsiveness could be to avoid controversies and heated debates that go off-topic.\n> \n> > One farcical recent example 0 was the pull request to add Vasil Dimov as a maintainer where despite many ACKs from other maintainers and other long term contributors two maintainers (fanquake and Gloria) refused to discuss it on the pull request or on IRC. It took almost 5 months for Gloria to comment on the pull request despite many requests from me on the PR and on IRC. I even requested that they attend the weekly Core Dev IRC meeting to discuss it which they didn\u2019t attend.\n> \n> \n> - Maintainers should be free to avoid involvement in a pull request. As long as a subset of maintainers have an opinion on the pull request, things should be fine.\n> - I agree with Gloria's comment: \"I had not NACKed this either because my opinion could change over time, NACKs are sometimes needlessly interpreted as personal attacks, and Brink has been antagonized on Twitter each time multiple grantees have similar opinions about this. So I'll add that if you wish to have more decentralization in Bitcoin Core funding, you can start by creating a nonprofit, gathering donations, and funding somebody who works on Bitcoin Core.\" Last part of this comment also solves the problem shared in other thread related to new bitcoin implementation. Brink needs some competition and bitcoin core needs more reviewers.\n> - I also agree with Andrew's comment: \"frankly, I think opinions aren't being shared because of potential backlash from aggressive users such as yourself and bytes1440000\"\n> \n> > Maintainers and long term contributors (if they commented at all) were gently enthusiastic (Concept ACKing etc) without ACKing that it was ready to merge. A long term observer of the Core repo would have known that it wasn\u2019t ready to merge or ready to attempt to activate (especially given it was a consensus change) but a casual observer would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of these casual observers inflated the numbers on the utxos.org site 4 signalling support for a soft fork activation attempt.\n> \n> \n> - I don't see anything wrong with sharing honest opinion if someone agrees with the concept. It does not make a pull request ready to get merged.\n> - utxos.org is an external site maintained by Jeremy with opinions on BIP 119. Everyone is free to maintain such lists and I think you had also created one as GitHub gist.\n> \n> > I will probably write about bitcoin-inquisition/default signet in a future email as I do think the perception that it is \u201cthe one and only\u201d staging ground for consensus changes is dangerous 6 if the maintainer(s) on that project have the same inclinations as a subset of the Core maintainers.\n> \n> \n> This perception (if exists) can be killed by creating a custom signet, maintaining it differently, get more reviews, testing and share details with community regularly.\n> \n> /dev/fd0\n> floppy disk guy\n> \n> 0: https://github.com/bitcoin/bitcoin/pull/25871#issuecomment-1381654564\n> 1: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2023-01-12#883748\n> \n> \n> Sent with Proton Mail secure email.\n> \n> ------- Original Message -------\n> On Tuesday, April 18th, 2023 at 6:10 PM, Michael Folkson via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> \n> \n> \n> > Communication has been a challenge on Bitcoin Core for what I can tell the entire history of the project. Maintainers merge a pull request and provide no commentary on why they\u2019ve merged it. Maintainers leave a pull request with many ACKs and few (if any) NACKs for months and provide no commentary on why they haven't merged it. I can only speculate on why and it probably depends on the individual maintainer. Sometimes it will be poor communication skills, sometimes it will be a desire to avoid accountability, sometimes it will be fear of unreasonable and spiteful legal action if they mistakenly merge a pull request that ends up containing a bug. But search through the pull requests on Bitcoin Core and you will rarely see a rationale for a merge decision. The difference between say previous maintainers like Wladimir and some of the current maintainers is that previous maintainers were extremely responsive on IRC. If you disagreed with a merge decision or thought it had been merged prematurely they would be happy to discuss it on IRC. In present times at least a subset of the current maintainers are not responsive on IRC and will refuse to discuss a merge decision. One farcical recent example 0 was the pull request to add Vasil Dimov as a maintainer where despite many ACKs from other maintainers and other long term contributors two maintainers (fanquake and Gloria) refused to discuss it on the pull request or on IRC. It took almost 5 months for Gloria to comment on the pull request despite many requests from me on the PR and on IRC. I even requested that they attend the weekly Core Dev IRC meeting to discuss it which they didn\u2019t attend.\n> > \n> > A pull request to add a maintainer isn\u2019t a normal pull request. Generally pull requests contain a lot more lines of code than a single line adding a trusted key. Not merging a pull request for a long period of time can be extremely frustrating for a pull request author especially when maintainers and long term contributors don\u2019t comment on the pull request and the pull request is stuck in \u201crebase hell\u201d. Clearly it is the lesser evil when compared to merging a harmful or bug ridden pull request but poor non-existent communication is not the only way to prevent this. Indeed it creates as many problems as it solves.\n> > \n> > Another farcical recent(ish) example was the CTV pull request 1 that ultimately led to a contentious soft fork activation attempt that was called off at the last minute. If you look at the comments on the pull request there were 3 individuals (including myself) who NACKed the pull request and I think it is fair to say that none of us would be considered long term contributors to Bitcoin Core. I have criticised Jeremy Rubin multiple times for continuing to pursue a soft fork activation attempt when it was clear it was contentious 3 but if you look at the pull request comments it certainly isn\u2019t clear it was. Maintainers and long term contributors (if they commented at all) were gently enthusiastic (Concept ACKing etc) without ACKing that it was ready to merge. A long term observer of the Core repo would have known that it wasn\u2019t ready to merge or ready to attempt to activate (especially given it was a consensus change) but a casual observer would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of these casual observers inflated the numbers on the utxos.org site 4 signalling support for a soft fork activation attempt.\n> > \n> > I set out originally to write about the controls and processes around merges on the default signet (bitcoin-inquisition 5) but it quickly became obvious to me that if communication around Core merges/non-merges is this weak you can hardly expect it to be any better on bitcoin-inquisition/default signet where there is no real monetary value at stake. I will probably write about bitcoin-inquisition/default signet in a future email as I do think the perception that it is \u201cthe one and only\u201d staging ground for consensus changes is dangerous 6 if the maintainer(s) on that project have the same inclinations as a subset of the Core maintainers.\n> > \n> > As I stated at the beginning there is an element to this which is not individual(s) specific and an adverse reaction to outright malicious actors external to any of these projects. I do not think any of the current maintainers on Core or bitcoin-inquisition are outright malicious even if a subset of them consistently frustrate me with their lack of transparency and accountability. But this issue isn't going away and I'm sure we'll hear more on this from others in the coming months. To me it is a straight choice of taking transparency and accountability much more seriously or failing that investing more heavily (time and resources) in consensus compatible forks of Core and treating Core like it is a proprietary \"open source\" project where merge decisions are not explained or justified in the open.\n> > \n> > --\n> > Michael Folkson\n> > Email: michaelfolkson at protonmail.com\n> > Keybase: michaelfolkson\n> > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "alicexbt",
                "date": "2023-04-19T21:13:23",
                "message_text_only": "Hi Michael,\n\nI will share something even though you didn't let me write things on several occasions on github, twitter etc.\n\nTry this:\n\n- As Gloria said (respect people you don't like and shared something against), create a competition for Brink. Fund bitcoin developers.\n- Do more reviews personally and devs you train even if they are neglected.\n- Acknowledge some reviewer know more than you. Try to learn and test things.\n- After some time you will achieve the power you crave.\n\nIts not possible to satisfy everyone even if you were bitcoin core maintainer now, some people would have issues. Closing a pull request hurt more so I respect them if they kept open something.\n\nNote: Do not disrespect people who are new and say something. Do not try to harass them. Do not try to be boss.\n\n/dev/fd0\nfloppy disk guy\n\nSent with Proton Mail secure email.\n\n------- Original Message -------\nOn Wednesday, April 19th, 2023 at 7:03 PM, Michael Folkson <michaelfolkson at protonmail.com> wrote:\n\n\n> Hi alicexbt\n> \n> > I don't think commentary is required for each pull request that gets merged with enough reviews, ACKs and no controversy.\n> \n> \n> The problem is defining what is \"enough\". \"Enough\" is determined by the quality of the review, the expertise of the reviewer(s), the complexity of the pull request and most importantly what risks a merge of the pull request poses. When there is zero communication on merge decisions (both merging and not merging over a long period of time) it creates frustration and worse vacuums and soft fork activation chaos. It is a complete black box. The vast majority of merge decisions are uncontroversial but it would still be nice to have a comment saying something like:\n> \n> \"This pull request only has 2 ACKs but it is low risk, relatively simple and is unlikely to be reviewed by anybody else in the near term\"\n> \n> \"This pull request is a consensus change, extremely high risk and is unlikely to be merged in the near term\"\n> \n> On the rare occasions when merge decisions are controversial communication becomes a lot more important. If some maintainers aren't responsive on IRC and refuse to discuss merge decisions what can we expect in future? We wake up one day, a contentious consensus change has been merged with little review in advance of a release window and the maintainer won't discuss why they have merged it. This isn't a toy anymore, it is supporting hundreds of billions of dollars of value and could end up supporting a lot more. It is surely completely unreasonable to let maintainers merge or not merge whatever they like with no explanation and no willingness to discuss their merge decisions.\n> \n> > So I'll add that if you wish to have more decentralization in Bitcoin Core funding, you can start by creating a nonprofit, gathering donations, and funding somebody who works on Bitcoin Core.\"\n> \n> \n> As I responded on the pull request if any long term contributor from this alternative nonprofit is blocked from being a maintainer and current maintainers refuse to discuss merge decisions it is irrelevant. To contribute you need a maintainer to merge your pull request(s) and to spend your review time wisely you need to know what pull request(s) could viably be merged by a maintainer. Otherwise you're just wasting your time. We not only have opacity on merge decisions for normal pull requests (e.g. code) we also now have opacity on decisions for the addition of new maintainers. I was always under the impression that any long term contributor who demonstrated over time that they were sufficiently competent, qualified and able to contribute both through opening pull requests and reviewing other people's pull requests could become a maintainer. To me and many others (until it was blocked by two maintainers for 5 months) Vasil met this criteria. This not only impacts Vasil's and others' commitment to the project but it impacts what pull requests are ultimately reviewed and merged. What is the point of spending time opening or reviewing a pull request if the current maintainers won't look at it or are unqualified to review it and hence won't merge it?\n> \n> Gloria's advice effectively boils down to spend months setting up a non-profit, spend years becoming a long term contributor to the project and then you can have the honor of being blocked from becoming a maintainer and have your contributions stunted by the current maintainers with no recourse or ability to discuss their merge decisions. So yeah thanks for repeating that advice but I'm sure most would rather pass and do something else.\n> \n> Thanks\n> Michael\n> \n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n> \n> \n> ------- Original Message -------\n> On Wednesday, April 19th, 2023 at 13:24, alicexbt alicexbt at protonmail.com wrote:\n> \n> \n> \n> > Hi Michael,\n> > \n> > I was initially sad about the politics in Vasil's pull request, written about it and also tried to document the process. Still think he deserves to be a maintainer. Although I have some counter arguments:\n> > \n> > > Maintainers merge a pull request and provide no commentary on why they\u2019ve merged it.\n> > \n> > I don't think commentary is required for each pull request that gets merged with enough reviews, ACKs and no controversy.\n> > \n> > > Maintainers leave a pull request with many ACKs and few (if any) NACKs for months and provide no commentary on why they haven't merged it\n> > \n> > This could be considered normal in pull requests that involve code changes.\n> > \n> > > The difference between say previous maintainers like Wladimir and some of the current maintainers is that previous maintainers were extremely responsive on IRC.\n> > \n> > Unfair to expect every human to behave the same or work similarly. Sometimes the unresponsiveness could be to avoid controversies and heated debates that go off-topic.\n> > \n> > > One farcical recent example 0 was the pull request to add Vasil Dimov as a maintainer where despite many ACKs from other maintainers and other long term contributors two maintainers (fanquake and Gloria) refused to discuss it on the pull request or on IRC. It took almost 5 months for Gloria to comment on the pull request despite many requests from me on the PR and on IRC. I even requested that they attend the weekly Core Dev IRC meeting to discuss it which they didn\u2019t attend.\n> > \n> > - Maintainers should be free to avoid involvement in a pull request. As long as a subset of maintainers have an opinion on the pull request, things should be fine.\n> > - I agree with Gloria's comment: \"I had not NACKed this either because my opinion could change over time, NACKs are sometimes needlessly interpreted as personal attacks, and Brink has been antagonized on Twitter each time multiple grantees have similar opinions about this. So I'll add that if you wish to have more decentralization in Bitcoin Core funding, you can start by creating a nonprofit, gathering donations, and funding somebody who works on Bitcoin Core.\" Last part of this comment also solves the problem shared in other thread related to new bitcoin implementation. Brink needs some competition and bitcoin core needs more reviewers.\n> > - I also agree with Andrew's comment: \"frankly, I think opinions aren't being shared because of potential backlash from aggressive users such as yourself and bytes1440000\"\n> > \n> > > Maintainers and long term contributors (if they commented at all) were gently enthusiastic (Concept ACKing etc) without ACKing that it was ready to merge. A long term observer of the Core repo would have known that it wasn\u2019t ready to merge or ready to attempt to activate (especially given it was a consensus change) but a casual observer would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of these casual observers inflated the numbers on the utxos.org site 4 signalling support for a soft fork activation attempt.\n> > \n> > - I don't see anything wrong with sharing honest opinion if someone agrees with the concept. It does not make a pull request ready to get merged.\n> > - utxos.org is an external site maintained by Jeremy with opinions on BIP 119. Everyone is free to maintain such lists and I think you had also created one as GitHub gist.\n> > \n> > > I will probably write about bitcoin-inquisition/default signet in a future email as I do think the perception that it is \u201cthe one and only\u201d staging ground for consensus changes is dangerous 6 if the maintainer(s) on that project have the same inclinations as a subset of the Core maintainers.\n> > \n> > This perception (if exists) can be killed by creating a custom signet, maintaining it differently, get more reviews, testing and share details with community regularly.\n> > \n> > /dev/fd0\n> > floppy disk guy\n> > \n> > 0: https://github.com/bitcoin/bitcoin/pull/25871#issuecomment-1381654564\n> > 1: https://bitcoin-irc.chaincode.com/bitcoin-core-dev/2023-01-12#883748\n> > \n> > Sent with Proton Mail secure email.\n> > \n> > ------- Original Message -------\n> > On Tuesday, April 18th, 2023 at 6:10 PM, Michael Folkson via bitcoin-dev bitcoin-dev at lists.linuxfoundation.org wrote:\n> > \n> > > Communication has been a challenge on Bitcoin Core for what I can tell the entire history of the project. Maintainers merge a pull request and provide no commentary on why they\u2019ve merged it. Maintainers leave a pull request with many ACKs and few (if any) NACKs for months and provide no commentary on why they haven't merged it. I can only speculate on why and it probably depends on the individual maintainer. Sometimes it will be poor communication skills, sometimes it will be a desire to avoid accountability, sometimes it will be fear of unreasonable and spiteful legal action if they mistakenly merge a pull request that ends up containing a bug. But search through the pull requests on Bitcoin Core and you will rarely see a rationale for a merge decision. The difference between say previous maintainers like Wladimir and some of the current maintainers is that previous maintainers were extremely responsive on IRC. If you disagreed with a merge decision or thought it had been merged prematurely they would be happy to discuss it on IRC. In present times at least a subset of the current maintainers are not responsive on IRC and will refuse to discuss a merge decision. One farcical recent example 0 was the pull request to add Vasil Dimov as a maintainer where despite many ACKs from other maintainers and other long term contributors two maintainers (fanquake and Gloria) refused to discuss it on the pull request or on IRC. It took almost 5 months for Gloria to comment on the pull request despite many requests from me on the PR and on IRC. I even requested that they attend the weekly Core Dev IRC meeting to discuss it which they didn\u2019t attend.\n> > > \n> > > A pull request to add a maintainer isn\u2019t a normal pull request. Generally pull requests contain a lot more lines of code than a single line adding a trusted key. Not merging a pull request for a long period of time can be extremely frustrating for a pull request author especially when maintainers and long term contributors don\u2019t comment on the pull request and the pull request is stuck in \u201crebase hell\u201d. Clearly it is the lesser evil when compared to merging a harmful or bug ridden pull request but poor non-existent communication is not the only way to prevent this. Indeed it creates as many problems as it solves.\n> > > \n> > > Another farcical recent(ish) example was the CTV pull request 1 that ultimately led to a contentious soft fork activation attempt that was called off at the last minute. If you look at the comments on the pull request there were 3 individuals (including myself) who NACKed the pull request and I think it is fair to say that none of us would be considered long term contributors to Bitcoin Core. I have criticised Jeremy Rubin multiple times for continuing to pursue a soft fork activation attempt when it was clear it was contentious 3 but if you look at the pull request comments it certainly isn\u2019t clear it was. Maintainers and long term contributors (if they commented at all) were gently enthusiastic (Concept ACKing etc) without ACKing that it was ready to merge. A long term observer of the Core repo would have known that it wasn\u2019t ready to merge or ready to attempt to activate (especially given it was a consensus change) but a casual observer would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of these casual observers inflated the numbers on the utxos.org site 4 signalling support for a soft fork activation attempt.\n> > > \n> > > I set out originally to write about the controls and processes around merges on the default signet (bitcoin-inquisition 5) but it quickly became obvious to me that if communication around Core merges/non-merges is this weak you can hardly expect it to be any better on bitcoin-inquisition/default signet where there is no real monetary value at stake. I will probably write about bitcoin-inquisition/default signet in a future email as I do think the perception that it is \u201cthe one and only\u201d staging ground for consensus changes is dangerous 6 if the maintainer(s) on that project have the same inclinations as a subset of the Core maintainers.\n> > > \n> > > As I stated at the beginning there is an element to this which is not individual(s) specific and an adverse reaction to outright malicious actors external to any of these projects. I do not think any of the current maintainers on Core or bitcoin-inquisition are outright malicious even if a subset of them consistently frustrate me with their lack of transparency and accountability. But this issue isn't going away and I'm sure we'll hear more on this from others in the coming months. To me it is a straight choice of taking transparency and accountability much more seriously or failing that investing more heavily (time and resources) in consensus compatible forks of Core and treating Core like it is a proprietary \"open source\" project where merge decisions are not explained or justified in the open.\n> > > \n> > > --\n> > > Michael Folkson\n> > > Email: michaelfolkson at protonmail.com\n> > > Keybase: michaelfolkson\n> > > PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2023-04-19T15:17:02",
                "message_text_only": "The different emails are overlong, it's difficult to follow\n\nIt is super surprising to see that Bitcoin has only 4 maintainers funded\nby Brink and Blockstream, but I think the decisions are taken elsewhere\n\nAnd I think the job of the maintainers is not only to be maintainers but\nto do the PR sometimes, since the process is too complicate and they are\nsupposed to know well the code\n\nAnd it seems like bitcoin is betting its future on lightning and/or\nsuper clever (non understandble) changes to bitcoin scripting\n\nWhile some simple changes can allow bitcoin to surpass ethereum, as\nusual, like \"Allow several OP_RETURN in one tx and no limited size\"\nhttps://github.com/bitcoin/bitcoin/issues/27043\n\nHow long it will take remains mysterious\n\n\nLe 18/04/2023 \u00e0 14:40, Michael Folkson via bitcoin-dev a \u00e9crit :\n>\n> Communication has been a challenge on Bitcoin Core for what I can tell\n> the entire history of the project. Maintainers merge a pull request\n> and provide no commentary on why they\u2019ve merged it. Maintainers leave\n> a pull request with many ACKs and few (if any) NACKs for months and\n> provide no commentary on why they haven't merged it. I can only\n> speculate on why and it probably depends on the individual maintainer.\n> Sometimes it will be poor communication skills, sometimes it will be a\n> desire to avoid accountability, sometimes it will be fear of\n> unreasonable and spiteful legal action if they mistakenly merge a pull\n> request that ends up containing a bug. But search through the pull\n> requests on Bitcoin Core and you will rarely see a rationale for a\n> merge decision. The difference between say previous maintainers like\n> Wladimir and some of the current maintainers is that previous\n> maintainers were extremely responsive on IRC. If you disagreed with a\n> merge decision or thought it had been merged prematurely they would be\n> happy to discuss it on IRC. In present times at least a subset of the\n> current maintainers are not responsive on IRC and will refuse to\n> discuss a merge decision. One farcical recent example [0] was the pull\n> request to add Vasil Dimov as a maintainer where despite many ACKs\n> from other maintainers and other long term contributors two\n> maintainers (fanquake and Gloria) refused to discuss it on the pull\n> request or on IRC. It took almost 5 months for Gloria to comment on\n> the pull request despite many requests from me on the PR and on IRC. I\n> even requested that they attend the weekly Core Dev IRC meeting to\n> discuss it which they didn\u2019t attend.\n>\n>\n> A pull request to add a maintainer isn\u2019t a normal pull request.\n> Generally pull requests contain a lot more lines of code than a single\n> line adding a trusted key. Not merging a pull request for a long\n> period of time can be extremely frustrating for a pull request author\n> especially when maintainers and long term contributors don\u2019t comment\n> on the pull request and the pull request is stuck in \u201crebase hell\u201d.\n> Clearly it is the lesser evil when compared to merging a harmful or\n> bug ridden pull request but poor non-existent communication is not the\n> only way to prevent this. Indeed it creates as many problems as it solves.\n>\n>\n> Another farcical recent(ish) example was the CTV pull request [1] that\n> ultimately led to a contentious soft fork activation attempt that was\n> called off at the last minute. If you look at the comments on the pull\n> request there were 3 individuals (including myself) who NACKed the\n> pull request and I think it is fair to say that none of us would be\n> considered long term contributors to Bitcoin Core. I have criticised\n> Jeremy Rubin multiple times for continuing to pursue a soft fork\n> activation attempt when it was clear it was contentious [3] but if you\n> look at the pull request comments it certainly isn\u2019t clear it was.\n> Maintainers and long term contributors (if they commented at all) were\n> gently enthusiastic (Concept ACKing etc) without ACKing that it was\n> ready to merge. A long term observer of the Core repo would have known\n\n> that it wasn\u2019t ready to merge or ready to attempt to activate\n> (especially given it was a consensus change) but a casual observer\n> would have only seen Concept ACKs and ACKs with 3 stray NACKs. Many of\n> these casual observers inflated the numbers on the utxos.org site [4]\n> signalling support for a soft fork activation attempt.\n>\n>\n> I set out originally to write about the controls and processes around\n> merges on the default signet (bitcoin-inquisition [5]) but it quickly\n> became obvious to me that if communication around Core\n> merges/non-merges is this weak you can hardly expect it to be any\n> better on bitcoin-inquisition/default signet where there is no real\n> monetary value at stake. I will probably write about\n> bitcoin-inquisition/default signet in a future email as I do think the\n> perception that it is \u201cthe one and only\u201d staging ground for consensus\n> changes is dangerous [6] if the maintainer(s) on that project have the\n> same inclinations as a subset of the Core maintainers. \n>\n>\n> As I stated at the beginning there is an element to this which is not\n> individual(s) specific and an adverse reaction to outright malicious\n> actors external to any of these projects. I do not think any of the\n> current maintainers on Core or bitcoin-inquisition are outright\n> malicious even if a subset of them consistently frustrate me with\n> their lack of transparency and accountability. But this issue isn't\n> going away and I'm sure we'll hear more on this from others in the\n> coming months. To me it is a straight choice of taking transparency\n> and accountability much more seriously or failing that investing more\n> heavily (time and resources) in consensus compatible forks of Core and\n> treating Core like it is a proprietary \"open source\" project where\n> merge decisions are not explained or justified in the open.\n>\n>\n> [0]: https://github.com/bitcoin/bitcoin/pull/25871\n>\n> [1]: https://github.com/bitcoin/bitcoin/pull/21702\n>\n> [2]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-April/020386.html\n>\n> [3]:\n> https://gist.github.com/michaelfolkson/352a503f4f9fc5de89af528d86a1b718\n>\n> [4]: https://utxos.org/signals/\n>\n> [5]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020921.html\n>\n> [6]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-September/020948.html\n>\n> -- Michael Folkson Email: michaelfolkson at protonmail.com\n> <http://protonmail.com/>\n> Keybase: michaelfolkson PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159\n> 214C FEE3\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSophia-Antipolis, France\nCV: https://www.peersm.com/CVAV.pdf\nLinkedIn: https://fr.linkedin.com/in/aymeric-vitte-05855b26\nGitHub : https://www.github.com/Ayms\nA Universal Coin Swap system based on Bitcoin: https://gist.github.com/Ayms/029125db2583e1cf9c3209769eb2cdd7\nA bitcoin NFT system: https://gist.github.com/Ayms/01dbfebf219965054b4a3beed1bfeba7\nMove your coins by yourself (browser version): https://peersm.com/wallet\nBitcoin transactions made simple: https://github.com/Ayms/bitcoin-transactions\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.peersm.com\nPeersm : http://www.peersm.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230419/4bf67dba/attachment-0001.html>"
            },
            {
                "author": "Andrew Chow",
                "date": "2023-04-19T21:33:33",
                "message_text_only": "Responses in-line.\nNote that the opinions expressed in this email are my own and are not\nrepresentative of what other maintainers think or believe.\n\nOn 04/18/2023 08:40 AM, Michael Folkson via bitcoin-dev wrote:\n >\n > Communication has been a challenge on Bitcoin Core for what I can\ntell the entire history of the project. Maintainers merge a pull request\nand provide no commentary on why they\u2019ve merged it.\n\nWhat commentary does there need to be?\nIt's self evident that the maintainer believes the code is ready to be\nmerged, and has observed enough ACKs from contributors that they are\ncomfortable to do so.\nYou're welcome to ask for clarification, but frankly, I don't think\nhaving any commentary on merges is going to be helpful or more elaborate\nin any way.\nRequiring maintainers to have to write explanations for every single\nmerge is simply going to increase the burden on them and increase the\nrate of burnout and resignations.\nWe've had too many maintainers step down already.\nIt'll end up being a bunch of boilerplate comments that don't say\nanything meaningful.\n\nThere are certainly situations where PRs are merged very quickly or with\notherwise little apparent review.\nBut, as I said, if you ask a maintainer why it was merged, the answer\nwill be \"I thought it was ready and had enough review\".\nThere may be other reasons that made the maintainer think it was ready\nsooner, such as the PR fixes a critical bug or security vulnerability,\nbut these reasons aren't going to be stated publicly.\n\n > Maintainers leave a pull request with many ACKs and few (if any)\nNACKs for months and provide no commentary on why they haven't merged it.\n\nThere are currently 320 open PRs and 366 open issues.\nI wake up every morning to 150+ email notifications containing\neverything that went on overnight, and throughout the day, I typically\nget hundreds more.\nIt's impossible to keep up with everything that goes on throughout the repo.\nACKs come in sporadically, PRs are updated, reviews are posted, etc.\nOften times PRs are not merged simply because the maintainers were not\naware that a PR was ready to be merged.\nThings can simply fall through the cracks.\n\nOf course there are other reasons why something might not be merged, and\nthese generally fall into the camp of \"I don't think it has had enough\nreview\".\nIt's the maintainer's judgement call to make as to whether something has\nbeen sufficiently reviewed, and part of the judgement call is to\nconsider the quality and competence of the reviewers.\nIf a PR had 100 ACKs but all from random people who have never\ncontributed to the project in any capacity, then it's not going to be\nmerged because those reviewers would be considered low quality.\nIt's not just about the numbers, but also about whether the reviewers\nare people the maintainers think are familiar enough with an area and\nhave had a history of thoroughly reviewing PRs.\nFor example, if a reviewer who primarily works on the mempool reviewed a\nPR in the wallet, I would consider their review and ACK with less weight\nbecause they are unlikely to be familiar with the intricacies of the wallet.\nObviously that changes over time as they make more reviews.\nFor another example, if I see an ACK from a reviewer who posts reviews\nthat primarily contain nits on code style and other trivialities, I\nwould consider that ACK with less weight.\n\nFurthermore, the maintainers are not necessarily the ones who block a merge.\nPart of evaluating if something is ready to be merged is to read the\ncomments on a PR.\nOther frequent contributors may have commented or asked questions that\nhaven't been resolved yet.\nPRs will often not be merged (even if they have ACKs) until a maintainer\ndeems that those comments and questions have been sufficiently resolved,\ntypically with the commenter stating in some way that their concerns\nwere addressed.\nIn these situations, no commentary from maintainers is given nor\nnecessary as it should be self evident (by reading the comments) that\nsomething is controversial.\nThese kinds of comments are not explicit NACKs (so someone who is only\ncounting (N)ACKs won't see them), but are blocking nonetheless.\n\nLastly, personally I like to review every PR before I merge it.\nThis often means that a PR that might otherwise be ready to be merged\nwouldn't be merged by myself as I may not be familiar with that part of\nthe codebase.\nIt may also mean that I would require more or specific additional people\nto review a PR before I merge it as I would weight my own review less\nheavily.\nWith several long time maintainers stepping away, this may be a factor\nin PRs taking longer to get merged as the remaining maintainers may be\nless familiar with the parts of the codebase that were previously\nmaintained by someone else.\n\n > but a casual observer would have only seen Concept ACKs and ACKs with\n3 stray NACKs. Many of these casual observers inflated the numbers on\nthe utxos.org site [4] signalling support for a soft fork activation\nattempt.\n\nAnyone who thinks that maintainers only look at the numbers of (N)ACKs\nis delusional.\nAs I explained above, there is a whole lot more nuance to determining\neven just the status of the opinions on a PR, nevermind the code itself.\n\nIn this specific example of a soft fork, there is also consideration of\nthe opinions outside of the repo itself, such as on this mailing list\nand elsewhere that people discuss soft forks.\n\nOn 04/19/2023 11:17 AM, Aymeric Vitte via bitcoin-dev wrote:\n > While some simple changes can allow bitcoin to surpass ethereum, as\nusual, like \"Allow several OP_RETURN in one tx and no limited size\"\nhttps://github.com/bitcoin/bitcoin/issues/27043\n >\n > How long it will take remains mysterious\n\nNo one (maintainers or contributors) is obligated to implement anything.\nA feature request not being implemented is because the people who do\nopen PRs are either not interested in implementing the feature, or are\nworking on other things that they believe to be higher priority.\nIf there is a feature that you want, then you will often need to either\nto it yourself, or pay someone to do it for you.\n\nAdditionally, a feature may seem like a good idea to you, but there are\noften interactions with other things that may end up resulting in it\nbeing rejected or need significant revision, especially for something\nwhich affects transaction relay.\n\n\n\nAndrew Chow"
            },
            {
                "author": "Michael Folkson",
                "date": "2023-04-20T08:45:58",
                "message_text_only": "Thanks for this Andrew.\n\n> What commentary does there need to be?\n\nThere doesn't \"need\" to be explanations about anything. There doesn't \"need\" to be any review comments whatsoever from anybody. But a world where reviewers explain what they've done to satisfy themselves that a pull request is ready to merge and a world where maintainers explain their thought process behind a merge decision is much easier to follow and much more scalable than the current black box where people see pull requests being self merged by a maintainer with no ACKs within a day of it being opened. Most likely these decisions make sense (low risk, unlikely to be reviewed by anybody else, blocking other pull requests etc). But more and more people are funded to work on Core and increasingly they seem to stick to their own mini projects and not review anybody else's work. Of course you can't put the responsibility for this entirely down to maintainers but the black box isn't scalable. Maintainers (presumably) have private discussions and so know how best to spend their review time. Everyone else (especially new contributors) are playing an uninformed and in the dark lottery with how they spend their review time (to the extent that they allocate any).\n\n> There are currently 320 open PRs and 366 open issues.\nI wake up every morning to 150+ email notifications containing\neverything that went on overnight, and throughout the day, I typically\nget hundreds more.\n\nIndeed. All the more reason for more and higher quality public communication. If you struggle and you're in those private discussions with other maintainers on merge decisions and ready for merge discussions how do you think everyone is trying to assess how to spend their time? It is even more bewildering. As far as I know most of the current maintainers haven't worked on other projects or in the private sector for a sustained period of time but the way other projects and businesses function is that those with the most experience and most responsibilities are able to manage and provide guidance to those with less experience and less responsibilities. I'm sure this goes on within Brink if you've been anointed but this is supposed to be an open source project. If everything is done in private conversations and everything other than the code is open source it is pretty much a fa\u00e7ade. It is very hard to make meaningful contributions without getting anointed. Those who do get anointed very early in their careers seem especially bad at hoarding information, refusing to do anything in public and not assisting those who haven't been anointed.\n\n> Things can simply fall through the cracks.\n\n> With several long time maintainers stepping away, this may be a factor\nin PRs taking longer to get merged as the remaining maintainers may be\nless familiar with the parts of the codebase that were previously\nmaintained by someone else.\n\n> Requiring maintainers to have to write explanations for every single\nmerge is simply going to increase the burden on them and increase the\nrate of burnout and resignations.\n\n> We've had too many maintainers step down already.\n\nThis all points to a a need for additional maintainers (assuming they are sufficiently competent and qualified). We had a potential maintainer (Vasil) come forward (long term contributor, made significant contributions over a number of years, a qualified reviewer, contributes to a part of the codebase that current maintainers aren't very familiar with, ACKed by maintainers and long term contributors) and it was blocked. How does that make sense? You seem to want it both ways. We can't ask maintainers to meet higher standards because there's a shortage and they're close to burning out. But there's no need to add a new maintainer.\n\nI've responded to the parts I disagree with and see inconsistencies with but generally I thought it was a very thoughtful and informative response so thank you. Of the current maintainers you seem to me to be one of (if not the) most responsive and open to public discussion on the project. I've learnt a tonne from your StackExchange posts and Twitch streams that are all public/open source that you do in addition to your contributions and maintenance of Core. \n\nThanks\nMichael\n\n\n--\nMichael Folkson\nEmail: michaelfolkson at protonmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n\n------- Original Message -------\nOn Wednesday, April 19th, 2023 at 22:33, Andrew Chow via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n\n> Responses in-line.\n> Note that the opinions expressed in this email are my own and are not\n> representative of what other maintainers think or believe.\n> \n> On 04/18/2023 08:40 AM, Michael Folkson via bitcoin-dev wrote:\n> \n> > Communication has been a challenge on Bitcoin Core for what I can\n> \n> tell the entire history of the project. Maintainers merge a pull request\n> and provide no commentary on why they\u2019ve merged it.\n> \n> What commentary does there need to be?\n> It's self evident that the maintainer believes the code is ready to be\n> merged, and has observed enough ACKs from contributors that they are\n> comfortable to do so.\n> You're welcome to ask for clarification, but frankly, I don't think\n> having any commentary on merges is going to be helpful or more elaborate\n> in any way.\n> Requiring maintainers to have to write explanations for every single\n> merge is simply going to increase the burden on them and increase the\n> rate of burnout and resignations.\n> We've had too many maintainers step down already.\n> It'll end up being a bunch of boilerplate comments that don't say\n> anything meaningful.\n> \n> There are certainly situations where PRs are merged very quickly or with\n> otherwise little apparent review.\n> But, as I said, if you ask a maintainer why it was merged, the answer\n> will be \"I thought it was ready and had enough review\".\n> There may be other reasons that made the maintainer think it was ready\n> sooner, such as the PR fixes a critical bug or security vulnerability,\n> but these reasons aren't going to be stated publicly.\n> \n> > Maintainers leave a pull request with many ACKs and few (if any)\n> \n> NACKs for months and provide no commentary on why they haven't merged it.\n> \n> There are currently 320 open PRs and 366 open issues.\n> I wake up every morning to 150+ email notifications containing\n> everything that went on overnight, and throughout the day, I typically\n> get hundreds more.\n> It's impossible to keep up with everything that goes on throughout the repo.\n> ACKs come in sporadically, PRs are updated, reviews are posted, etc.\n> Often times PRs are not merged simply because the maintainers were not\n> aware that a PR was ready to be merged.\n> Things can simply fall through the cracks.\n> \n> Of course there are other reasons why something might not be merged, and\n> these generally fall into the camp of \"I don't think it has had enough\n> review\".\n> It's the maintainer's judgement call to make as to whether something has\n> been sufficiently reviewed, and part of the judgement call is to\n> consider the quality and competence of the reviewers.\n> If a PR had 100 ACKs but all from random people who have never\n> contributed to the project in any capacity, then it's not going to be\n> merged because those reviewers would be considered low quality.\n> It's not just about the numbers, but also about whether the reviewers\n> are people the maintainers think are familiar enough with an area and\n> have had a history of thoroughly reviewing PRs.\n> For example, if a reviewer who primarily works on the mempool reviewed a\n> PR in the wallet, I would consider their review and ACK with less weight\n> because they are unlikely to be familiar with the intricacies of the wallet.\n> Obviously that changes over time as they make more reviews.\n> For another example, if I see an ACK from a reviewer who posts reviews\n> that primarily contain nits on code style and other trivialities, I\n> would consider that ACK with less weight.\n> \n> Furthermore, the maintainers are not necessarily the ones who block a merge.\n> Part of evaluating if something is ready to be merged is to read the\n> comments on a PR.\n> Other frequent contributors may have commented or asked questions that\n> haven't been resolved yet.\n> PRs will often not be merged (even if they have ACKs) until a maintainer\n> deems that those comments and questions have been sufficiently resolved,\n> typically with the commenter stating in some way that their concerns\n> were addressed.\n> In these situations, no commentary from maintainers is given nor\n> necessary as it should be self evident (by reading the comments) that\n> something is controversial.\n> These kinds of comments are not explicit NACKs (so someone who is only\n> counting (N)ACKs won't see them), but are blocking nonetheless.\n> \n> Lastly, personally I like to review every PR before I merge it.\n> This often means that a PR that might otherwise be ready to be merged\n> wouldn't be merged by myself as I may not be familiar with that part of\n> the codebase.\n> It may also mean that I would require more or specific additional people\n> to review a PR before I merge it as I would weight my own review less\n> heavily.\n> With several long time maintainers stepping away, this may be a factor\n> in PRs taking longer to get merged as the remaining maintainers may be\n> less familiar with the parts of the codebase that were previously\n> maintained by someone else.\n> \n> > but a casual observer would have only seen Concept ACKs and ACKs with\n> \n> 3 stray NACKs. Many of these casual observers inflated the numbers on\n> the utxos.org site [4] signalling support for a soft fork activation\n> attempt.\n> \n> Anyone who thinks that maintainers only look at the numbers of (N)ACKs\n> is delusional.\n> As I explained above, there is a whole lot more nuance to determining\n> even just the status of the opinions on a PR, nevermind the code itself.\n> \n> In this specific example of a soft fork, there is also consideration of\n> the opinions outside of the repo itself, such as on this mailing list\n> and elsewhere that people discuss soft forks.\n> \n> On 04/19/2023 11:17 AM, Aymeric Vitte via bitcoin-dev wrote:\n> \n> > While some simple changes can allow bitcoin to surpass ethereum, as\n> \n> usual, like \"Allow several OP_RETURN in one tx and no limited size\"\n> https://github.com/bitcoin/bitcoin/issues/27043\n> \n> > How long it will take remains mysterious\n> \n> \n> No one (maintainers or contributors) is obligated to implement anything.\n> A feature request not being implemented is because the people who do\n> open PRs are either not interested in implementing the feature, or are\n> working on other things that they believe to be higher priority.\n> If there is a feature that you want, then you will often need to either\n> to it yourself, or pay someone to do it for you.\n> \n> Additionally, a feature may seem like a good idea to you, but there are\n> often interactions with other things that may end up resulting in it\n> being rejected or need significant revision, especially for something\n> which affects transaction relay.\n> \n> \n> \n> Andrew Chow\n> \n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2023-04-20T10:54:53",
                "message_text_only": "Personnally I will never criticize the maintainers, but my comment was\nabout the global process, I thought that for something important like\nbitcoin there were many devs/maintainers, and as you point out, a PR\nmust be done by certified people\n\nI don't get very well why every company involved in bitcoin do not put\nat least one person in this process (a bit like W3C specs), with\ndifferent time zone so every time you wake up you don't have to look\nat/handle hundreds of requests/comments\n\nAnd we can read in the press that bitcoin maintenance is supposed to\ncost 200M per year, probably false then, but this is worrying to see\nthat devs/maintainers are stepping down one after the other\n\n\nLe 19/04/2023 \u00e0 23:33, Andrew Chow via bitcoin-dev a \u00e9crit :\n> Responses in-line.\n> Note that the opinions expressed in this email are my own and are not\n> representative of what other maintainers think or believe.\n>\n> On 04/18/2023 08:40 AM, Michael Folkson via bitcoin-dev wrote:\n>  >\n>  > Communication has been a challenge on Bitcoin Core for what I can\n> tell the entire history of the project. Maintainers merge a pull request\n> and provide no commentary on why they\u2019ve merged it.\n>\n> What commentary does there need to be?\n> It's self evident that the maintainer believes the code is ready to be\n> merged, and has observed enough ACKs from contributors that they are\n> comfortable to do so.\n> You're welcome to ask for clarification, but frankly, I don't think\n> having any commentary on merges is going to be helpful or more elaborate\n> in any way.\n> Requiring maintainers to have to write explanations for every single\n> merge is simply going to increase the burden on them and increase the\n> rate of burnout and resignations.\n> We've had too many maintainers step down already.\n> It'll end up being a bunch of boilerplate comments that don't say\n> anything meaningful.\n>\n> There are certainly situations where PRs are merged very quickly or with\n> otherwise little apparent review.\n> But, as I said, if you ask a maintainer why it was merged, the answer\n> will be \"I thought it was ready and had enough review\".\n> There may be other reasons that made the maintainer think it was ready\n> sooner, such as the PR fixes a critical bug or security vulnerability,\n> but these reasons aren't going to be stated publicly.\n>\n>  > Maintainers leave a pull request with many ACKs and few (if any)\n> NACKs for months and provide no commentary on why they haven't merged it.\n>\n> There are currently 320 open PRs and 366 open issues.\n> I wake up every morning to 150+ email notifications containing\n> everything that went on overnight, and throughout the day, I typically\n> get hundreds more.\n> It's impossible to keep up with everything that goes on throughout the repo.\n> ACKs come in sporadically, PRs are updated, reviews are posted, etc.\n> Often times PRs are not merged simply because the maintainers were not\n> aware that a PR was ready to be merged.\n> Things can simply fall through the cracks.\n>\n> Of course there are other reasons why something might not be merged, and\n> these generally fall into the camp of \"I don't think it has had enough\n> review\".\n> It's the maintainer's judgement call to make as to whether something has\n> been sufficiently reviewed, and part of the judgement call is to\n> consider the quality and competence of the reviewers.\n> If a PR had 100 ACKs but all from random people who have never\n> contributed to the project in any capacity, then it's not going to be\n> merged because those reviewers would be considered low quality.\n> It's not just about the numbers, but also about whether the reviewers\n> are people the maintainers think are familiar enough with an area and\n> have had a history of thoroughly reviewing PRs.\n> For example, if a reviewer who primarily works on the mempool reviewed a\n> PR in the wallet, I would consider their review and ACK with less weight\n> because they are unlikely to be familiar with the intricacies of the wallet.\n> Obviously that changes over time as they make more reviews.\n> For another example, if I see an ACK from a reviewer who posts reviews\n> that primarily contain nits on code style and other trivialities, I\n> would consider that ACK with less weight.\n>\n> Furthermore, the maintainers are not necessarily the ones who block a merge.\n> Part of evaluating if something is ready to be merged is to read the\n> comments on a PR.\n> Other frequent contributors may have commented or asked questions that\n> haven't been resolved yet.\n> PRs will often not be merged (even if they have ACKs) until a maintainer\n> deems that those comments and questions have been sufficiently resolved,\n> typically with the commenter stating in some way that their concerns\n> were addressed.\n> In these situations, no commentary from maintainers is given nor\n> necessary as it should be self evident (by reading the comments) that\n> something is controversial.\n> These kinds of comments are not explicit NACKs (so someone who is only\n> counting (N)ACKs won't see them), but are blocking nonetheless.\n>\n> Lastly, personally I like to review every PR before I merge it.\n> This often means that a PR that might otherwise be ready to be merged\n> wouldn't be merged by myself as I may not be familiar with that part of\n> the codebase.\n> It may also mean that I would require more or specific additional people\n> to review a PR before I merge it as I would weight my own review less\n> heavily.\n> With several long time maintainers stepping away, this may be a factor\n> in PRs taking longer to get merged as the remaining maintainers may be\n> less familiar with the parts of the codebase that were previously\n> maintained by someone else.\n>\n>  > but a casual observer would have only seen Concept ACKs and ACKs with\n> 3 stray NACKs. Many of these casual observers inflated the numbers on\n> the utxos.org site [4] signalling support for a soft fork activation\n> attempt.\n>\n> Anyone who thinks that maintainers only look at the numbers of (N)ACKs\n> is delusional.\n> As I explained above, there is a whole lot more nuance to determining\n> even just the status of the opinions on a PR, nevermind the code itself.\n>\n> In this specific example of a soft fork, there is also consideration of\n> the opinions outside of the repo itself, such as on this mailing list\n> and elsewhere that people discuss soft forks.\n>\n> On 04/19/2023 11:17 AM, Aymeric Vitte via bitcoin-dev wrote:\n>  > While some simple changes can allow bitcoin to surpass ethereum, as\n> usual, like \"Allow several OP_RETURN in one tx and no limited size\"\n> https://github.com/bitcoin/bitcoin/issues/27043\n>  >\n>  > How long it will take remains mysterious\n>\n> No one (maintainers or contributors) is obligated to implement anything.\n> A feature request not being implemented is because the people who do\n> open PRs are either not interested in implementing the feature, or are\n> working on other things that they believe to be higher priority.\n> If there is a feature that you want, then you will often need to either\n> to it yourself, or pay someone to do it for you.\n>\n> Additionally, a feature may seem like a good idea to you, but there are\n> often interactions with other things that may end up resulting in it\n> being rejected or need significant revision, especially for something\n> which affects transaction relay.\n>\n>\n>\n> Andrew Chow\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n\n-- \nSophia-Antipolis, France\nCV: https://www.peersm.com/CVAV.pdf\nLinkedIn: https://fr.linkedin.com/in/aymeric-vitte-05855b26\nGitHub : https://www.github.com/Ayms\nA Universal Coin Swap system based on Bitcoin: https://gist.github.com/Ayms/029125db2583e1cf9c3209769eb2cdd7\nA bitcoin NFT system: https://gist.github.com/Ayms/01dbfebf219965054b4a3beed1bfeba7\nMove your coins by yourself (browser version): https://peersm.com/wallet\nBitcoin transactions made simple: https://github.com/Ayms/bitcoin-transactions\n\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.peersm.com\nPeersm : http://www.peersm.com"
            },
            {
                "author": "Erik Aronesty",
                "date": "2023-04-20T13:59:07",
                "message_text_only": "i think the w3c is a very good example of a slow train wreck, and we should\ndo everything possible to avoid the decisions they made\n\nOn Thu, Apr 20, 2023 at 7:09\u202fAM Aymeric Vitte via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Personnally I will never criticize the maintainers, but my comment was\n> about the global process, I thought that for something important like\n> bitcoin there were many devs/maintainers, and as you point out, a PR\n> must be done by certified people\n>\n> I don't get very well why every company involved in bitcoin do not put\n> at least one person in this process (a bit like W3C specs), with\n> different time zone so every time you wake up you don't have to look\n> at/handle hundreds of requests/comments\n>\n> And we can read in the press that bitcoin maintenance is supposed to\n> cost 200M per year, probably false then, but this is worrying to see\n> that devs/maintainers are stepping down one after the other\n>\n>\n> Le 19/04/2023 \u00e0 23:33, Andrew Chow via bitcoin-dev a \u00e9crit :\n> > Responses in-line.\n> > Note that the opinions expressed in this email are my own and are not\n> > representative of what other maintainers think or believe.\n> >\n> > On 04/18/2023 08:40 AM, Michael Folkson via bitcoin-dev wrote:\n> >  >\n> >  > Communication has been a challenge on Bitcoin Core for what I can\n> > tell the entire history of the project. Maintainers merge a pull request\n> > and provide no commentary on why they\u2019ve merged it.\n> >\n> > What commentary does there need to be?\n> > It's self evident that the maintainer believes the code is ready to be\n> > merged, and has observed enough ACKs from contributors that they are\n> > comfortable to do so.\n> > You're welcome to ask for clarification, but frankly, I don't think\n> > having any commentary on merges is going to be helpful or more elaborate\n> > in any way.\n> > Requiring maintainers to have to write explanations for every single\n> > merge is simply going to increase the burden on them and increase the\n> > rate of burnout and resignations.\n> > We've had too many maintainers step down already.\n> > It'll end up being a bunch of boilerplate comments that don't say\n> > anything meaningful.\n> >\n> > There are certainly situations where PRs are merged very quickly or with\n> > otherwise little apparent review.\n> > But, as I said, if you ask a maintainer why it was merged, the answer\n> > will be \"I thought it was ready and had enough review\".\n> > There may be other reasons that made the maintainer think it was ready\n> > sooner, such as the PR fixes a critical bug or security vulnerability,\n> > but these reasons aren't going to be stated publicly.\n> >\n> >  > Maintainers leave a pull request with many ACKs and few (if any)\n> > NACKs for months and provide no commentary on why they haven't merged it.\n> >\n> > There are currently 320 open PRs and 366 open issues.\n> > I wake up every morning to 150+ email notifications containing\n> > everything that went on overnight, and throughout the day, I typically\n> > get hundreds more.\n> > It's impossible to keep up with everything that goes on throughout the\n> repo.\n> > ACKs come in sporadically, PRs are updated, reviews are posted, etc.\n> > Often times PRs are not merged simply because the maintainers were not\n> > aware that a PR was ready to be merged.\n> > Things can simply fall through the cracks.\n> >\n> > Of course there are other reasons why something might not be merged, and\n> > these generally fall into the camp of \"I don't think it has had enough\n> > review\".\n> > It's the maintainer's judgement call to make as to whether something has\n> > been sufficiently reviewed, and part of the judgement call is to\n> > consider the quality and competence of the reviewers.\n> > If a PR had 100 ACKs but all from random people who have never\n> > contributed to the project in any capacity, then it's not going to be\n> > merged because those reviewers would be considered low quality.\n> > It's not just about the numbers, but also about whether the reviewers\n> > are people the maintainers think are familiar enough with an area and\n> > have had a history of thoroughly reviewing PRs.\n> > For example, if a reviewer who primarily works on the mempool reviewed a\n> > PR in the wallet, I would consider their review and ACK with less weight\n> > because they are unlikely to be familiar with the intricacies of the\n> wallet.\n> > Obviously that changes over time as they make more reviews.\n> > For another example, if I see an ACK from a reviewer who posts reviews\n> > that primarily contain nits on code style and other trivialities, I\n> > would consider that ACK with less weight.\n> >\n> > Furthermore, the maintainers are not necessarily the ones who block a\n> merge.\n> > Part of evaluating if something is ready to be merged is to read the\n> > comments on a PR.\n> > Other frequent contributors may have commented or asked questions that\n> > haven't been resolved yet.\n> > PRs will often not be merged (even if they have ACKs) until a maintainer\n> > deems that those comments and questions have been sufficiently resolved,\n> > typically with the commenter stating in some way that their concerns\n> > were addressed.\n> > In these situations, no commentary from maintainers is given nor\n> > necessary as it should be self evident (by reading the comments) that\n> > something is controversial.\n> > These kinds of comments are not explicit NACKs (so someone who is only\n> > counting (N)ACKs won't see them), but are blocking nonetheless.\n> >\n> > Lastly, personally I like to review every PR before I merge it.\n> > This often means that a PR that might otherwise be ready to be merged\n> > wouldn't be merged by myself as I may not be familiar with that part of\n> > the codebase.\n> > It may also mean that I would require more or specific additional people\n> > to review a PR before I merge it as I would weight my own review less\n> > heavily.\n> > With several long time maintainers stepping away, this may be a factor\n> > in PRs taking longer to get merged as the remaining maintainers may be\n> > less familiar with the parts of the codebase that were previously\n> > maintained by someone else.\n> >\n> >  > but a casual observer would have only seen Concept ACKs and ACKs with\n> > 3 stray NACKs. Many of these casual observers inflated the numbers on\n> > the utxos.org site [4] signalling support for a soft fork activation\n> > attempt.\n> >\n> > Anyone who thinks that maintainers only look at the numbers of (N)ACKs\n> > is delusional.\n> > As I explained above, there is a whole lot more nuance to determining\n> > even just the status of the opinions on a PR, nevermind the code itself.\n> >\n> > In this specific example of a soft fork, there is also consideration of\n> > the opinions outside of the repo itself, such as on this mailing list\n> > and elsewhere that people discuss soft forks.\n> >\n> > On 04/19/2023 11:17 AM, Aymeric Vitte via bitcoin-dev wrote:\n> >  > While some simple changes can allow bitcoin to surpass ethereum, as\n> > usual, like \"Allow several OP_RETURN in one tx and no limited size\"\n> > https://github.com/bitcoin/bitcoin/issues/27043\n> >  >\n> >  > How long it will take remains mysterious\n> >\n> > No one (maintainers or contributors) is obligated to implement anything.\n> > A feature request not being implemented is because the people who do\n> > open PRs are either not interested in implementing the feature, or are\n> > working on other things that they believe to be higher priority.\n> > If there is a feature that you want, then you will often need to either\n> > to it yourself, or pay someone to do it for you.\n> >\n> > Additionally, a feature may seem like a good idea to you, but there are\n> > often interactions with other things that may end up resulting in it\n> > being rejected or need significant revision, especially for something\n> > which affects transaction relay.\n> >\n> >\n> >\n> > Andrew Chow\n> >\n> > _______________________________________________\n> > bitcoin-dev mailing list\n> > bitcoin-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> --\n> Sophia-Antipolis, France\n> CV: https://www.peersm.com/CVAV.pdf\n> LinkedIn: https://fr.linkedin.com/in/aymeric-vitte-05855b26\n> GitHub : https://www.github.com/Ayms\n> A Universal Coin Swap system based on Bitcoin:\n> https://gist.github.com/Ayms/029125db2583e1cf9c3209769eb2cdd7\n> A bitcoin NFT system:\n> https://gist.github.com/Ayms/01dbfebf219965054b4a3beed1bfeba7\n> Move your coins by yourself (browser version): https://peersm.com/wallet\n> Bitcoin transactions made simple:\n> https://github.com/Ayms/bitcoin-transactions\n>\n> torrent-live: https://github.com/Ayms/torrent-live\n> node-Tor : https://www.github.com/Ayms/node-Tor\n> Anti-spies and private torrents, dynamic blocklist:\n> http://torrent-live.peersm.com\n> Peersm : http://www.peersm.com\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230420/0f7fca51/attachment.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2023-04-20T14:25:30",
                "message_text_only": "Right, that's why I do not participate any longer, they specify things\nfor the participants (ie big companies), they disregard whatever\nsuggestion can be made, they are so slow that when they have specified\nsomething someone else has specified something better, then they throw\naway their spec and take what the others have specified\n\nAnd they are wrong in many design decisions\n\nWhat I meant is that bitcoin big companies should involve people, who\nare not just discussing stupid things all the day like W3C folks but do\nthe work efficiently\n\n\nLe 20/04/2023 \u00e0 15:59, Erik Aronesty a \u00e9crit :\n> i think the w3c is a very good example of a slow train wreck, and we\n> should do everything possible to avoid the decisions they made \n>\n> On Thu, Apr 20, 2023 at 7:09\u202fAM Aymeric Vitte via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org\n> <mailto:bitcoin-dev at lists.linuxfoundation.org>> wrote:\n>\n>     Personnally I will never criticize the maintainers, but my comment was\n>     about the global process, I thought that for something important like\n>     bitcoin there were many devs/maintainers, and as you point out, a PR\n>     must be done by certified people\n>\n>     I don't get very well why every company involved in bitcoin do not put\n>     at least one person in this process (a bit like W3C specs), with\n>     different time zone so every time you wake up you don't have to look\n>     at/handle hundreds of requests/comments\n>\n>     And we can read in the press that bitcoin maintenance is supposed to\n>     cost 200M per year, probably false then, but this is worrying to see\n>     that devs/maintainers are stepping down one after the other\n>\n>\n>     Le 19/04/2023 \u00e0 23:33, Andrew Chow via bitcoin-dev a \u00e9crit :\n>     > Responses in-line.\n>     > Note that the opinions expressed in this email are my own and\n>     are not\n>     > representative of what other maintainers think or believe.\n>     >\n>     > On 04/18/2023 08:40 AM, Michael Folkson via bitcoin-dev wrote:\n>     >  >\n>     >  > Communication has been a challenge on Bitcoin Core for what I can\n>     > tell the entire history of the project. Maintainers merge a pull\n>     request\n>     > and provide no commentary on why they\u2019ve merged it.\n>     >\n>     > What commentary does there need to be?\n>     > It's self evident that the maintainer believes the code is ready\n>     to be\n>     > merged, and has observed enough ACKs from contributors that they are\n>     > comfortable to do so.\n>     > You're welcome to ask for clarification, but frankly, I don't think\n>     > having any commentary on merges is going to be helpful or more\n>     elaborate\n>     > in any way.\n>     > Requiring maintainers to have to write explanations for every single\n>     > merge is simply going to increase the burden on them and\n>     increase the\n>     > rate of burnout and resignations.\n>     > We've had too many maintainers step down already.\n>     > It'll end up being a bunch of boilerplate comments that don't say\n>     > anything meaningful.\n>     >\n>     > There are certainly situations where PRs are merged very quickly\n>     or with\n>     > otherwise little apparent review.\n>     > But, as I said, if you ask a maintainer why it was merged, the\n>     answer\n>     > will be \"I thought it was ready and had enough review\".\n>     > There may be other reasons that made the maintainer think it was\n>     ready\n>     > sooner, such as the PR fixes a critical bug or security\n>     vulnerability,\n>     > but these reasons aren't going to be stated publicly.\n>     >\n>     >  > Maintainers leave a pull request with many ACKs and few (if any)\n>     > NACKs for months and provide no commentary on why they haven't\n>     merged it.\n>     >\n>     > There are currently 320 open PRs and 366 open issues.\n>     > I wake up every morning to 150+ email notifications containing\n>     > everything that went on overnight, and throughout the day, I\n>     typically\n>     > get hundreds more.\n>     > It's impossible to keep up with everything that goes on\n>     throughout the repo.\n>     > ACKs come in sporadically, PRs are updated, reviews are posted, etc.\n>     > Often times PRs are not merged simply because the maintainers\n>     were not\n>     > aware that a PR was ready to be merged.\n>     > Things can simply fall through the cracks.\n>     >\n>     > Of course there are other reasons why something might not be\n>     merged, and\n>     > these generally fall into the camp of \"I don't think it has had\n>     enough\n>     > review\".\n>     > It's the maintainer's judgement call to make as to whether\n>     something has\n>     > been sufficiently reviewed, and part of the judgement call is to\n>     > consider the quality and competence of the reviewers.\n>     > If a PR had 100 ACKs but all from random people who have never\n>     > contributed to the project in any capacity, then it's not going\n>     to be\n>     > merged because those reviewers would be considered low quality.\n>     > It's not just about the numbers, but also about whether the\n>     reviewers\n>     > are people the maintainers think are familiar enough with an\n>     area and\n>     > have had a history of thoroughly reviewing PRs.\n>     > For example, if a reviewer who primarily works on the mempool\n>     reviewed a\n>     > PR in the wallet, I would consider their review and ACK with\n>     less weight\n>     > because they are unlikely to be familiar with the intricacies of\n>     the wallet.\n>     > Obviously that changes over time as they make more reviews.\n>     > For another example, if I see an ACK from a reviewer who posts\n>     reviews\n>     > that primarily contain nits on code style and other trivialities, I\n>     > would consider that ACK with less weight.\n>     >\n>     > Furthermore, the maintainers are not necessarily the ones who\n>     block a merge.\n>     > Part of evaluating if something is ready to be merged is to read the\n>     > comments on a PR.\n>     > Other frequent contributors may have commented or asked\n>     questions that\n>     > haven't been resolved yet.\n>     > PRs will often not be merged (even if they have ACKs) until a\n>     maintainer\n>     > deems that those comments and questions have been sufficiently\n>     resolved,\n>     > typically with the commenter stating in some way that their concerns\n>     > were addressed.\n>     > In these situations, no commentary from maintainers is given nor\n>     > necessary as it should be self evident (by reading the comments)\n>     that\n>     > something is controversial.\n>     > These kinds of comments are not explicit NACKs (so someone who\n>     is only\n>     > counting (N)ACKs won't see them), but are blocking nonetheless.\n>     >\n>     > Lastly, personally I like to review every PR before I merge it.\n>     > This often means that a PR that might otherwise be ready to be\n>     merged\n>     > wouldn't be merged by myself as I may not be familiar with that\n>     part of\n>     > the codebase.\n>     > It may also mean that I would require more or specific\n>     additional people\n>     > to review a PR before I merge it as I would weight my own review\n>     less\n>     > heavily.\n>     > With several long time maintainers stepping away, this may be a\n>     factor\n>     > in PRs taking longer to get merged as the remaining maintainers\n>     may be\n>     > less familiar with the parts of the codebase that were previously\n>     > maintained by someone else.\n>     >\n>     >  > but a casual observer would have only seen Concept ACKs and\n>     ACKs with\n>     > 3 stray NACKs. Many of these casual observers inflated the\n>     numbers on\n>     > the utxos.org <http://utxos.org> site [4] signalling support for\n>     a soft fork activation\n>     > attempt.\n>     >\n>     > Anyone who thinks that maintainers only look at the numbers of\n>     (N)ACKs\n>     > is delusional.\n>     > As I explained above, there is a whole lot more nuance to\n>     determining\n>     > even just the status of the opinions on a PR, nevermind the code\n>     itself.\n>     >\n>     > In this specific example of a soft fork, there is also\n>     consideration of\n>     > the opinions outside of the repo itself, such as on this mailing\n>     list\n>     > and elsewhere that people discuss soft forks.\n>     >\n>     > On 04/19/2023 11:17 AM, Aymeric Vitte via bitcoin-dev wrote:\n>     >  > While some simple changes can allow bitcoin to surpass\n>     ethereum, as\n>     > usual, like \"Allow several OP_RETURN in one tx and no limited size\"\n>     > https://github.com/bitcoin/bitcoin/issues/27043\n>     >  >\n>     >  > How long it will take remains mysterious\n>     >\n>     > No one (maintainers or contributors) is obligated to implement\n>     anything.\n>     > A feature request not being implemented is because the people who do\n>     > open PRs are either not interested in implementing the feature,\n>     or are\n>     > working on other things that they believe to be higher priority.\n>     > If there is a feature that you want, then you will often need to\n>     either\n>     > to it yourself, or pay someone to do it for you.\n>     >\n>     > Additionally, a feature may seem like a good idea to you, but\n>     there are\n>     > often interactions with other things that may end up resulting in it\n>     > being rejected or need significant revision, especially for\n>     something\n>     > which affects transaction relay.\n>     >\n>     >\n>     >\n>     > Andrew Chow\n>     >\n>     > _______________________________________________\n>     > bitcoin-dev mailing list\n>     > bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n>     -- \n>     Sophia-Antipolis, France\n>     CV: https://www.peersm.com/CVAV.pdf\n>     LinkedIn: https://fr.linkedin.com/in/aymeric-vitte-05855b26\n>     GitHub : https://www.github.com/Ayms\n>     A Universal Coin Swap system based on Bitcoin:\n>     https://gist.github.com/Ayms/029125db2583e1cf9c3209769eb2cdd7\n>     A bitcoin NFT system:\n>     https://gist.github.com/Ayms/01dbfebf219965054b4a3beed1bfeba7\n>     Move your coins by yourself (browser version):\n>     https://peersm.com/wallet\n>     Bitcoin transactions made simple:\n>     https://github.com/Ayms/bitcoin-transactions\n>\n>     torrent-live: https://github.com/Ayms/torrent-live\n>     node-Tor : https://www.github.com/Ayms/node-Tor\n>     Anti-spies and private torrents, dynamic blocklist:\n>     http://torrent-live.peersm.com\n>     Peersm : http://www.peersm.com\n>\n>\n>     _______________________________________________\n>     bitcoin-dev mailing list\n>     bitcoin-dev at lists.linuxfoundation.org\n>     <mailto:bitcoin-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n-- \nSophia-Antipolis, France\nCV: https://www.peersm.com/CVAV.pdf\nLinkedIn: https://fr.linkedin.com/in/aymeric-vitte-05855b26\nGitHub : https://www.github.com/Ayms\nA Universal Coin Swap system based on Bitcoin: https://gist.github.com/Ayms/029125db2583e1cf9c3209769eb2cdd7\nA bitcoin NFT system: https://gist.github.com/Ayms/01dbfebf219965054b4a3beed1bfeba7\nMove your coins by yourself (browser version): https://peersm.com/wallet\nBitcoin transactions made simple: https://github.com/Ayms/bitcoin-transactions\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.peersm.com\nPeersm : http://www.peersm.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230420/8ea98348/attachment-0001.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2023-04-20T02:27:13",
                "message_text_only": "On Tue, Apr 18, 2023 at 12:40:44PM +0000, Michael Folkson via bitcoin-dev wrote:\n> I do think the perception that it is \u201cthe one and only\u201d staging\n> ground for consensus changes is dangerous\n\nIf you think that about any open source project, the answer is simple:\ncreate your own fork and do a better job. Competition is the only answer\nto concerns about the bad effects from a monopoly. (Often the good effects\nfrom cooperation and collaboration -- less wasted time and duplicated\neffort -- turn out to outweigh the bad effects, however)\n\nIn any event, inquisition isn't \"the one and only staging ground for\nconsensus changes\" -- every successful consensus change to date has\nbeen staged through the developers' own repo then the core PR process,\nand that option still exists.\n\nCheers,\naj"
            },
            {
                "author": "Michael Folkson",
                "date": "2023-04-20T09:24:19",
                "message_text_only": "Hi AJ\n\n> Competition is the only answer to concerns about the bad effects from a monopoly.\n\nWell one can first make suggestions and requests to the monopoly and see if the monopoly is open to them. In the case of bitcoin-inquisition/default signet I like the idea of a group who are interested in following and testing proposed future consensus changes working on the same fork of Core / same signet blockchain. But I've asked on a number of occasions now what the thinking is in terms of criteria for merging a proposed default policy change or a proposed consensus change (progress on BIP, level of review, a work in progress / still in flux / essentially finalized unless a problem is identified) and you haven't been willing to discuss it. So it is essentially the same black box model of maintainership we see on Core. As far as I know you could wake up one day and just merge all open pull requests to the bitcoin-inquisition repo because you're bored. On a custom signet do whatever you want. On the default signet that we're trying to build an ecosystem around, get block explorers to support, can be connected to through the default config in Core etc merge decisions essentially being subject to the whims of AJ doesn't seem ideal to me.\n\nThe brunt of having to deal with the CTV activation chaos fell on me (not a long term contributor, unfunded) because few wanted to get involved so it would be nice if lessons were learned and we don't have a soft fork proposal merged onto default signet, a bunch of transactions generated to simulate demand and then this used to justify another contentious soft fork activation attempt on mainnet. When there are vacuums of communication from maintainers and long term contributors it just invites unnecessary chaos.\n\nThanks\nMichael\n\n\n--\nMichael Folkson\nEmail: michaelfolkson at protonmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n\n------- Original Message -------\nOn Thursday, April 20th, 2023 at 03:27, Anthony Towns <aj at erisian.com.au> wrote:\n\n\n> On Tue, Apr 18, 2023 at 12:40:44PM +0000, Michael Folkson via bitcoin-dev wrote:\n> \n> > I do think the perception that it is \u201cthe one and only\u201d staging\n> > ground for consensus changes is dangerous\n> \n> \n> If you think that about any open source project, the answer is simple:\n> create your own fork and do a better job. Competition is the only answer\n> to concerns about the bad effects from a monopoly. (Often the good effects\n> from cooperation and collaboration -- less wasted time and duplicated\n> effort -- turn out to outweigh the bad effects, however)\n> \n> In any event, inquisition isn't \"the one and only staging ground for\n> consensus changes\" -- every successful consensus change to date has\n> been staged through the developers' own repo then the core PR process,\n> and that option still exists.\n> \n> Cheers,\n> aj"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core maintainers and communication on merge decisions",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson",
                "Anthony Towns",
                "Aymeric Vitte",
                "alicexbt",
                "Erik Aronesty",
                "Andrew Chow"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 116180
        }
    },
    {
        "title": "[bitcoin-dev] A new Bitcoin implementation integrated with Core Lightning",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2023-04-18T17:06:14",
                "message_text_only": "Any thoughts on this from the Core Lightning contributors? The way I see it with upcoming proposed changes to default policy (primarily though not exclusively for Lightning) and a soft fork activation attempt of APO/APOAS (primarily though not exclusively for Lightning) that a tighter coupling between the full node and the Lightning node could eventually make sense. In a world where transaction fees were much higher you'd think almost every full node would also want to be a Lightning node and so the separation of concerns would make less sense. Having two separate P2P networks and two separate P2P protocols also wouldn't make much sense in this scenario. You could obviously still opt out of Lightning P2P messages if you weren't interested in Lightning.\n\nThe alternative would be just to focus on Knots style consensus compatible forks of Core with limited additional functionality. But I think we've reached the point of no return on Core dominance and not having widely used \"distros\". As the ecosystem scales systems and processes should be constantly evolving and improving and to me if anything Core's seem to be going backwards.\n\nThanks\nMichael\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Saturday, January 14th, 2023 at 20:26, Michael Folkson <michaelfolkson at protonmail.com> wrote:\n\n> I tweeted this [0] back in November 2022.\n>\n> \"With the btcd bugs and the analysis paralysis on a RBF policy option in Core increasingly thinking @BitcoinKnots and consensus compatible forks of Core are the future. Gonna chalk that one up to another thing @LukeDashjr was right about all along.\"\n>\n> A new bare bones Knots style Bitcoin implementation (in C++/C) integrated with Core Lightning was a long term idea I had (and presumably many others have had) but the dysfunction on the Bitcoin Core project this week (if anything it has been getting worse over time, not better) has made me start to take the idea more seriously. It is clear to me that the current way the Bitcoin Core project is being managed is not how I would like an open source project to be managed. Very little discussion is public anymore and decisions seem to be increasingly made behind closed doors or in private IRC channels (to the extent that decisions are made at all). Core Lightning seems to have the opposite problem. It is managed effectively in the open (admittedly with fewer contributors) but doesn't have the eyeballs or the usage that Bitcoin Core does. Regardless, selfishly I at some point would like a bare bones Bitcoin and Lightning implementation integrated in one codebase. The Bitcoin Core codebase has collected a lot of cruft over time and the ultra conservatism that is needed when treating (potential) consensus code seems to permeate into parts of the codebase that no one is using, definitely isn't consensus code and should probably just be removed.\n>\n> The libbitcoinkernel project was (is?) an attempt to extract the consensus engine out of Core but it seems like it won't achieve that as consensus is just too slippery a concept and Knots style consensus compatible codebase forks of Bitcoin Core seem to still the model. To what extent you can safely chop off this cruft and effectively maintain this less crufty fork of Bitcoin Core also isn't clear to me yet.\n>\n> Then there is the question of whether it makes sense to mix C and C++ code that people have different views on. C++ is obviously a superset of C but assuming this merging of Bitcoin Core and Core Lightning is/was the optimal final destination it surely would have been better if Core Lightning was written in the same language (i.e. with classes) as Bitcoin Core.\n>\n> I'm just floating the idea to (hopefully) hear from people who are much more familiar with the entirety of the Bitcoin Core and Core Lightning codebases. It would be an ambitious long term project but it would be nice to focus on some ambitious project(s) (even if just conceptually) for a while given (thankfully) there seems to be a lull in soft fork activation chaos.\n>\n> Thanks\n> Michael\n>\n> [0]: https://twitter.com/michaelfolkson/status/1589220155006910464?s=20&t=GbPm7w5BqS7rS3kiVFTNcw\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230418/a61cc0c7/attachment.html>"
            },
            {
                "author": "Kostas Karasavvas",
                "date": "2023-04-19T09:05:10",
                "message_text_only": "Hi Michael,\n\nOn Wed, Apr 19, 2023 at 2:40\u202fAM Michael Folkson via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Any thoughts on this from the Core Lightning contributors? The way I see\n> it with upcoming proposed changes to default policy (primarily though not\n> exclusively for Lightning) and a soft fork activation attempt of APO/APOAS\n> (primarily though not\n>\n\nCould you please point me to a resource that describes the default policy\nchanges (that are happening for lightning)? I have seen discussions here\nand there but it would help if they are aggregated somewhere for reviewing.\n\n\n> exclusively for Lightning) that a tighter coupling between the full node\n> and the Lightning node could eventually make sense. In a world where\n> transaction fees were much higher you'd think almost every full node would\n> also want to be a Lightning node and so the separation of concerns would\n> make less sense.\n>\n\nSeparation of concerns always makes sense to manage complexity. One would\nneed to have really strong incentives to counter the complexity argument.\n\nI might be missing some context here but what would the actual benefit of\nintegrating them be? Not having to install lightning node separately and\nmaybe a more intuitive UX?\n\n\nHaving two separate P2P networks and two separate P2P protocols also\n> wouldn't make much sense in this scenario. You could obviously still opt\n> out of Lightning P2P messages if you weren't interested in Lightning.\n>\n> The alternative would be just to focus on Knots style consensus compatible\n> forks of Core with limited additional functionality. But I think we've\n> reached the point of no return on Core dominance and not having widely used\n> \"distros\". As the ecosystem scales systems and processes should be\n> constantly evolving and improving and to me if anything Core's seem to be\n> going backwards.\n>\n>\nPersonally, I have great difficulty seeing lightning as something other\nthan an L2 build on top of Bitcoin. There will be other L2s.\n\nRegards,\nKostas\n\nPS. Besides, the amount of effort would be significant. Wouldn't that\neffort be better spent on, say, separating the consensus logic (i.e. a\nsecond libbitcoinkernel attempt)?\n\n\n\n> Thanks\n> Michael\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n> On Saturday, January 14th, 2023 at 20:26, Michael Folkson <\n> michaelfolkson at protonmail.com> wrote:\n>\n> I tweeted this [0] back in November 2022.\n>\n> \"With the btcd bugs and the analysis paralysis on a RBF policy option in\n> Core increasingly thinking @BitcoinKnots and consensus compatible forks of\n> Core are the future. Gonna chalk that one up to another thing @LukeDashjr\n> was right about all along.\"\n>\n> A new bare bones Knots style Bitcoin implementation (in C++/C) integrated\n> with Core Lightning was a long term idea I had (and presumably many others\n> have had) but the dysfunction on the Bitcoin Core project this week (if\n> anything it has been getting worse over time, not better) has made me start\n> to take the idea more seriously. It is clear to me that the current way the\n> Bitcoin Core project is being managed is not how I would like an open\n> source project to be managed. Very little discussion is public anymore and\n> decisions seem to be increasingly made behind closed doors or in private\n> IRC channels (to the extent that decisions are made at all). Core Lightning\n> seems to have the opposite problem. It is managed effectively in the open\n> (admittedly with fewer contributors) but doesn't have the eyeballs or the\n> usage that Bitcoin Core does. Regardless, selfishly I at some point would\n> like a bare bones Bitcoin and Lightning implementation integrated in one\n> codebase. The Bitcoin Core codebase has collected a lot of cruft over time\n> and the ultra conservatism that is needed when treating (potential)\n> consensus code seems to permeate into parts of the codebase that no one is\n> using, definitely isn't consensus code and should probably just be removed.\n>\n> The libbitcoinkernel project was (is?) an attempt to extract the consensus\n> engine out of Core but it seems like it won't achieve that as consensus is\n> just too slippery a concept and Knots style consensus compatible codebase\n> forks of Bitcoin Core seem to still the model. To what extent you can\n> safely chop off this cruft and effectively maintain this less crufty fork\n> of Bitcoin Core also isn't clear to me yet.\n>\n> Then there is the question of whether it makes sense to mix C and C++ code\n> that people have different views on. C++ is obviously a superset of C but\n> assuming this merging of Bitcoin Core and Core Lightning is/was the optimal\n> final destination it surely would have been better if Core Lightning was\n> written in the same language (i.e. with classes) as Bitcoin Core.\n>\n> I'm just floating the idea to (hopefully) hear from people who are much\n> more familiar with the entirety of the Bitcoin Core and Core Lightning\n> codebases. It would be an ambitious long term project but it would be nice\n> to focus on some ambitious project(s) (even if just conceptually) for a\n> while given (thankfully) there seems to be a lull in soft fork activation\n> chaos.\n>\n> Thanks\n> Michael\n>\n> [0]:\n> https://twitter.com/michaelfolkson/status/1589220155006910464?s=20&t=GbPm7w5BqS7rS3kiVFTNcw\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n\n\n-- \nhttps://twitter.com/kkarasavvas\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230419/feeac28d/attachment.html>"
            },
            {
                "author": "Michael Folkson",
                "date": "2023-04-19T10:54:10",
                "message_text_only": "Hi Kostas\n\n> Could you please point me to a resource that describes the default policy changes (that are happening for lightning)? I have seen discussions here and there but it would help if they are aggregated somewhere for reviewing.\n\nIt is hard to follow because most of the discussions aren't on public channels, a number of the devs working on these proposed default policy changes aren't taking the BIP process seriously and no one is willing to discuss the criteria for merging default policy changes (and consensus changes for that matter) into bitcoin-inquisition (default signet). In addition the work (to the extent that it is public) is scattered all over the place. So yeah it seems like a mess to me from the perspective of someone is seeking to follow, review and monitor it.\n\nThis Bitcoin StackExchange post [0] is my first attempt to do what you're looking for and these Bitcoin Core PR review clubs [1], [2] were really good from Gloria. But yeah the BIP process (as I've said a thousand times and been ignored) is the place to hammer out specifications for complex things like default policy proposals and when people don't care about formalizing specifications it becomes very hard for people like you and me to follow.\n\n> Separation of concerns always makes sense to manage complexity. One would need to have really strong incentives to counter the complexity argument.\n>> I might be missing some context here but what would the actual benefit of integrating them be? Not having to install lightning node separately and maybe a more intuitive UX?\n\nAs I say in the original email having two separate P2P networks and two separate P2P protocols (perhaps) doesn't make much sense if all (or most of the nodes) are both full nodes and Lightning nodes. A testing framework that integrates both base layer and Lightning tests could potentially be easier to track edge cases which fall in the grey area between base layer and Lightning but are critically important for Lightning. A Core wallet that doesn't support Lightning doesn't make much sense in a world where transaction fees are really high and you have to use Lightning unless you are transferring huge amounts. I agree with you that these arguments have to be strong to counter the separation of concerns angle and maybe it is too early to consider it. But if moving in the direction of more widely used consensus compatible forks of Core then having Lightning integrated could make it an attractive option.\n\n> PS. Besides, the amount of effort would be significant. Wouldn't that effort be better spent on, say, separating the consensus logic (i.e. a second libbitcoinkernel attempt)?\n\nlibbitcoinkernel can achieve smaller (and still important) goals but I'm skeptical that the more ambitious goal of having lots of different implementations in different languages with libbitcoinkernel at its core and not having to worry about consensus bugs will be reached in the medium term. As we saw with the recent btcd/lnd bugs [3] consensus bugs can crop up in places you might not expect. In that case it was a wire parsing library that you wouldn't expect to be part of a libbitcoinkernel. So if you're still going to encounter consensus bugs outside of libbitcoinkernel there isn't much point (in my view) in using it for alternative implementations.\n\nThanks\nMichael\n\n[0]: https://bitcoin.stackexchange.com/questions/117315/what-and-where-are-the-current-status-of-the-bip-125-replacement-the-v3-policy\n[1]: https://bitcoincore.reviews/25038\n[2]: https://bitcoincore.reviews/25038-2\n[3]: https://bitcoin.stackexchange.com/questions/115527/what-is-the-october-2022-bug-in-lnd-what-caused-it-and-what-would-prevent-a-sim\n\n--\nMichael Folkson\nEmail: michaelfolkson at [protonmail.com](http://protonmail.com/)\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n\n------- Original Message -------\nOn Wednesday, April 19th, 2023 at 10:05, Kostas Karasavvas <kkarasavvas at gmail.com> wrote:\n\n> Hi Michael,\n>\n> On Wed, Apr 19, 2023 at 2:40\u202fAM Michael Folkson via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Any thoughts on this from the Core Lightning contributors? The way I see it with upcoming proposed changes to default policy (primarily though not exclusively for Lightning) and a soft fork activation attempt of APO/APOAS (primarily though not\n>\n> Could you please point me to a resource that describes the default policy changes (that are happening for lightning)? I have seen discussions here and there but it would help if they are aggregated somewhere for reviewing.\n>\n>> exclusively for Lightning) that a tighter coupling between the full node and the Lightning node could eventually make sense. In a world where transaction fees were much higher you'd think almost every full node would also want to be a Lightning node and so the separation of concerns would make less sense.\n>\n> Separation of concerns always makes sense to manage complexity. One would need to have really strong incentives to counter the complexity argument.\n>\n> I might be missing some context here but what would the actual benefit of integrating them be? Not having to install lightning node separately and maybe a more intuitive UX?\n>\n>> Having two separate P2P networks and two separate P2P protocols also wouldn't make much sense in this scenario. You could obviously still opt out of Lightning P2P messages if you weren't interested in Lightning.\n>\n>> The alternative would be just to focus on Knots style consensus compatible forks of Core with limited additional functionality. But I think we've reached the point of no return on Core dominance and not having widely used \"distros\". As the ecosystem scales systems and processes should be constantly evolving and improving and to me if anything Core's seem to be going backwards.\n>\n> Personally, I have great difficulty seeing lightning as something other than an L2 build on top of Bitcoin. There will be other L2s.\n>\n> Regards,\n> Kostas\n>\n> PS. Besides, the amount of effort would be significant. Wouldn't that effort be better spent on, say, separating the consensus logic (i.e. a second libbitcoinkernel attempt)?\n>\n>> Thanks\n>> Michael\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> ------- Original Message -------\n>> On Saturday, January 14th, 2023 at 20:26, Michael Folkson <michaelfolkson at protonmail.com> wrote:\n>>\n>>> I tweeted this [0] back in November 2022.\n>>>\n>>> \"With the btcd bugs and the analysis paralysis on a RBF policy option in Core increasingly thinking @BitcoinKnots and consensus compatible forks of Core are the future. Gonna chalk that one up to another thing @LukeDashjr was right about all along.\"\n>>>\n>>> A new bare bones Knots style Bitcoin implementation (in C++/C) integrated with Core Lightning was a long term idea I had (and presumably many others have had) but the dysfunction on the Bitcoin Core project this week (if anything it has been getting worse over time, not better) has made me start to take the idea more seriously. It is clear to me that the current way the Bitcoin Core project is being managed is not how I would like an open source project to be managed. Very little discussion is public anymore and decisions seem to be increasingly made behind closed doors or in private IRC channels (to the extent that decisions are made at all). Core Lightning seems to have the opposite problem. It is managed effectively in the open (admittedly with fewer contributors) but doesn't have the eyeballs or the usage that Bitcoin Core does. Regardless, selfishly I at some point would like a bare bones Bitcoin and Lightning implementation integrated in one codebase. The Bitcoin Core codebase has collected a lot of cruft over time and the ultra conservatism that is needed when treating (potential) consensus code seems to permeate into parts of the codebase that no one is using, definitely isn't consensus code and should probably just be removed.\n>>>\n>>> The libbitcoinkernel project was (is?) an attempt to extract the consensus engine out of Core but it seems like it won't achieve that as consensus is just too slippery a concept and Knots style consensus compatible codebase forks of Bitcoin Core seem to still the model. To what extent you can safely chop off this cruft and effectively maintain this less crufty fork of Bitcoin Core also isn't clear to me yet.\n>>>\n>>> Then there is the question of whether it makes sense to mix C and C++ code that people have different views on. C++ is obviously a superset of C but assuming this merging of Bitcoin Core and Core Lightning is/was the optimal final destination it surely would have been better if Core Lightning was written in the same language (i.e. with classes) as Bitcoin Core.\n>>>\n>>> I'm just floating the idea to (hopefully) hear from people who are much more familiar with the entirety of the Bitcoin Core and Core Lightning codebases. It would be an ambitious long term project but it would be nice to focus on some ambitious project(s) (even if just conceptually) for a while given (thankfully) there seems to be a lull in soft fork activation chaos.\n>>>\n>>> Thanks\n>>> Michael\n>>>\n>>> [0]: https://twitter.com/michaelfolkson/status/1589220155006910464?s=20&t=GbPm7w5BqS7rS3kiVFTNcw\n>>>\n>>> --\n>>> Michael Folkson\n>>> Email: michaelfolkson at [protonmail.com](http://protonmail.com/)\n>>> Keybase: michaelfolkson\n>>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> --\n>\n> https://twitter.com/kkarasavvas\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230419/43c5b5f7/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "A new Bitcoin implementation integrated with Core Lightning",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Kostas Karasavvas",
                "Michael Folkson"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 20639
        }
    },
    {
        "title": "[bitcoin-dev] [Lightning-dev] A new Bitcoin implementation integrated with Core Lightning",
        "thread_messages": [
            {
                "author": "niftynei",
                "date": "2023-04-24T16:06:59",
                "message_text_only": "Hi Michael,\n\nCLN as implemented is currently nicely decoupled from the block source; as\na project we assume that the node runner will choose a block backend that\nfits their self-sovereignty goals.\n\nThis provides us with a nice separation of concerns. The block source is\nresponsible for ensuring that only consensus valid data is delivered to the\nnode, which in turn allows us to focus on processing and reacting to that\ndata, as necessary.\n\nBitcoin core as a project implements a broad swath of functionality\n(wallet, consensus, peering, rpc server, coin selection, key management,\netc); breaking out the validation and peering functions into more\ncomposable parts would def open up more opportunities for building block\nsources for a wide variety of projects, not just CLN.\n\nThere\u2019s probably a real opportunity to \u201ccomingle\u201d the peering of LN gossip\n+ block data networks, this has been suggested a few times but never\nseriously pursued from the LN side. Having the peering functions of\nbitcoin-core broken out into a more composable/reusable piece may be a good\nfirst step here, and as a project would largely be on the bitcoin core\nside. Maybe this work is already in progress? I havent been keeping up with\ndevelopments there.\n\nThanks for the email, it\u2019s definitely a good question.\n\nLisa\n\n\nOn Mon, Apr 24, 2023 at 02:09 Michael Folkson via Lightning-dev <\nlightning-dev at lists.linuxfoundation.org> wrote:\n\n> Any thoughts on this from the Core Lightning contributors? The way I see\n> it with upcoming proposed changes to default policy (primarily though not\n> exclusively for Lightning) and a soft fork activation attempt of APO/APOAS\n> (primarily though not exclusively for Lightning) that a tighter coupling\n> between the full node and the Lightning node could eventually make sense.\n> In a world where transaction fees were much higher you'd think almost every\n> full node would also want to be a Lightning node and so the separation of\n> concerns would make less sense. Having two separate P2P networks and two\n> separate P2P protocols also wouldn't make much sense in this scenario. You\n> could obviously still opt out of Lightning P2P messages if you weren't\n> interested in Lightning.\n>\n> The alternative would be just to focus on Knots style consensus compatible\n> forks of Core with limited additional functionality. But I think we've\n> reached the point of no return on Core dominance and not having widely used\n> \"distros\". As the ecosystem scales systems and processes should be\n> constantly evolving and improving and to me if anything Core's seem to be\n> going backwards.\n>\n> Thanks\n> Michael\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n> ------- Original Message -------\n>\n> On Saturday, January 14th, 2023 at 20:26, Michael Folkson <\n> michaelfolkson at protonmail.com> wrote:\n>\n> I tweeted this [0] back in November 2022.\n>\n> \"With the btcd bugs and the analysis paralysis on a RBF policy option in\n> Core increasingly thinking @BitcoinKnots and consensus compatible forks of\n> Core are the future. Gonna chalk that one up to another thing @LukeDashjr\n> was right about all along.\"\n>\n> A new bare bones Knots style Bitcoin implementation (in C++/C) integrated\n> with Core Lightning was a long term idea I had (and presumably many others\n> have had) but the dysfunction on the Bitcoin Core project this week (if\n> anything it has been getting worse over time, not better) has made me start\n> to take the idea more seriously. It is clear to me that the current way the\n> Bitcoin Core project is being managed is not how I would like an open\n> source project to be managed. Very little discussion is public anymore and\n> decisions seem to be increasingly made behind closed doors or in private\n> IRC channels (to the extent that decisions are made at all). Core Lightning\n> seems to have the opposite problem. It is managed effectively in the open\n> (admittedly with fewer contributors) but doesn't have the eyeballs or the\n> usage that Bitcoin Core does. Regardless, selfishly I at some point would\n> like a bare bones Bitcoin and Lightning implementation integrated in one\n> codebase. The Bitcoin Core codebase has collected a lot of cruft over time\n> and the ultra conservatism that is needed when treating (potential)\n> consensus code seems to permeate into parts of the codebase that no one is\n> using, definitely isn't consensus code and should probably just be removed.\n>\n> The libbitcoinkernel project was (is?) an attempt to extract the consensus\n> engine out of Core but it seems like it won't achieve that as consensus is\n> just too slippery a concept and Knots style consensus compatible codebase\n> forks of Bitcoin Core seem to still the model. To what extent you can\n> safely chop off this cruft and effectively maintain this less crufty fork\n> of Bitcoin Core also isn't clear to me yet.\n>\n> Then there is the question of whether it makes sense to mix C and C++ code\n> that people have different views on. C++ is obviously a superset of C but\n> assuming this merging of Bitcoin Core and Core Lightning is/was the optimal\n> final destination it surely would have been better if Core Lightning was\n> written in the same language (i.e. with classes) as Bitcoin Core.\n>\n> I'm just floating the idea to (hopefully) hear from people who are much\n> more familiar with the entirety of the Bitcoin Core and Core Lightning\n> codebases. It would be an ambitious long term project but it would be nice\n> to focus on some ambitious project(s) (even if just conceptually) for a\n> while given (thankfully) there seems to be a lull in soft fork activation\n> chaos.\n>\n> Thanks\n> Michael\n>\n> [0]:\n> https://twitter.com/michaelfolkson/status/1589220155006910464?s=20&t=GbPm7w5BqS7rS3kiVFTNcw\n>\n> --\n> Michael Folkson\n> Email: michaelfolkson at protonmail.com\n> Keybase: michaelfolkson\n> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230424/911bc9d0/attachment.html>"
            },
            {
                "author": "Vincenzo Palazzo",
                "date": "2023-04-30T15:22:01",
                "message_text_only": "Hi Michael and Lisa,\n\n> Hi Michael,\n>\n> CLN as implemented is currently nicely decoupled from the block source; as\n> a project we assume that the node runner will choose a block backend that\n> fits their self-sovereignty goals.\n>\n> This provides us with a nice separation of concerns. The block source is\n> responsible for ensuring that only consensus valid data is delivered to the\n> node, which in turn allows us to focus on processing and reacting to that\n> data, as necessary.\n\nLet me just mention that [1] I have been working on a plugin \nthat allows experimentation with different types of Bitcoin Core \nnode alternatives (including core too), and it also supports BIP 157 \nwith nakamoto [2].\n\nIn the upcoming months, I plan to allocate some time to work \ndirectly on Nakamoto.\n\n> There\u2019s probably a real opportunity to \u201ccomingle\u201d the peering of LN gossip\n> + block data networks, this has been suggested a few times but never\n> seriously pursued from the LN side. Having the peering functions of\n> bitcoin-core broken out into a more composable/reusable piece may be a good\n> first step here, and as a project would largely be on the bitcoin core\n> side. Maybe this work is already in progress? I havent been keeping up with\n> developments there.\n\nA missing piece at the moment is a unified approach to fee calculation. \nThis logic is critical for Lightning nodes, so if we don't have a uniform \nway of estimating fees, it could lead to several issues.\n\nP.S: The fee estimation problem may have already been solved by Neutrino, \nbut I'm not aware of it.\n\n[1] https://github.com/coffee-tools/folgore\n[2] https://github.com/cloudhead/nakamoto\n\nCheers!\n\nVincent."
            }
        ],
        "thread_summary": {
            "title": "A new Bitcoin implementation integrated with Core Lightning",
            "categories": [
                "bitcoin-dev",
                "Lightning-dev"
            ],
            "authors": [
                "niftynei",
                "Vincenzo Palazzo"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8012
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin fungibility and inscribed sats",
        "thread_messages": [
            {
                "author": "Kree Love",
                "date": "2023-04-20T23:06:17",
                "message_text_only": "I have been meaning to respond to this thread earlier, but better late than never.\n\n\"want bitcoin to be money and money means different things for people in this world\u201d\n\nThe definition of money is very subjective; when I began my involvement with this project in Late 2010. It was a lot closer to my personal definition of money, being an electronic cash system, whilst transparent, we did not have dedicated corporations like Chainalysis, nor the level of regulation (AML/KYC/CFT). We were lucky to have forum cowboys to hunt down lost assets and even then, whether the exchange would acknowledge the findings was another kettle of fish.\n\nIn 2014, Me and many others were very much against Mike Hearn\u2019s Colored Coins as it recorded a public consensus and held judgement against parties which could be misused and abused. Now we are in an era where private consensus recorded behind closed doors rules the roost and you risk forfeiting your Bitcoin by merely sending it to an exchange and if you\u2019re lucky you may get asked intrusive questions and be allowed to have it returned to you.\n\nTechnically, the mandated application of the artificially rate limited block size has caused significant network congestion during any time of market turbulence and rallies. Whilst I support the development of Lightning Networks and Segregated Witness, it does not mean that the network should be subject to ever-increasing fees. When we had High Priority Transactions by Days Destroyed, I never had to worry about fees unless some security or situation-critical event happened. These unnecessary coin splits/forks that resulted in 2017 have made it confusing to the end-consumer and destroyed continuity to anyone new to the market.\n\nWith the ever-changing climate, it\u2019s an accomplishment that Bitcoin has survived but I would consider it an Electronic Asset more-than an Electronic Peer-to-Peer Cash System contrary to the white paper, as it\u2019s easier for the industry to rely on Bitcoin as a Reserve Currency to the maintain the value systems of alternative currencies. Any attempts to improve the fungibility of the protocol (such as CoinJoin) are met with regulatory hostility which then becomes external pressures on the developers and end-users.\n\nWe are now in a brave new world where different governments, industrial lobbies and cartels all want to have involvement in engineering the outcome of this project and we need to remember that the usability, the fungibility and practical applications are paramount to Bitcoin remaining a global currency, even if it\u2019s not practical to be used as an electronic cash now without additional development within the eco-system and very strong developers who are able to make personal sacrifices to ensure continued development in the face of hostility.\n\nNFTs are the result of hemorrhaging VC money and distracting the public on trivialities while hard work goes on in the background to ensure the reserve currency (Bitcoin) is safe. The current state is a status-quo that many do not want changing while it remains economically advantageous to them. We should do whatever is necessary to guarantee a free-as-in-freedom and global future for this project.\n\nKree Love\nEarly Adopter\n\n>> On Mar 31, 2023, at 11:30 AM, alicexbt via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> \n>> Hi Steve and Bitcoin Developers,\n>> \n>> I have created a new thread as requested by one of the developers. I respect him and the readers of this list.\n>> \n>>> \"want bitcoin to be money and money means different things for people in\n>> this world\"\n>> \n>>> I think we can all agree that a property of money is fungibility, and by\n>> its very definition NFTs are not fungible and thus not money.\n>> \n>> Inscriptions do not affect fungibility of bitcoin:\n>> \n>> - There is no token standard being used. These are just sats being considered as inscription in an external protocol or explorer. Bitcoin nodes do not consider them as something special.\n>> - Users can always sell those inscribed sats or UTXO as normal bitcoin on bisq or any exchange.\n>> - They can use different amounts for it using tools like https://raritygarden.inscribetheplanet.com/ which is created by super testnet who is active dev in bitcoin and ln.\n>> - Inscribed sats are different from Ethereum tokens because they will never go to zero and you can always consolidate lot of them to use as normal bitcoin.\n>> \n>> Bitcoin fungibility is anyways debatable and I cannot change anything about it even though working on a coinjoin implmentation as some post mix UTXOs are censored on some exchanges and its easy to identify them. Some coinjoin implementation themselves work with chain analysis companies to censor inputs used for rounds.\n>> \n>> Ordinals theory is a parallel universe in which some users believe in and they have been trying to learn how bitcoin works. Example: I did call with someone this evening to explain how PSBT and multisig works who never used bitcoin before\n>> \n>> Developers are interested to build things and they have tried to create BIP, DEX, look for libraries, ask questions, projects implementing PSBT etc.\n>> \n>> I do not live in first world country and do not attend bitdevs but always wanted bitcoin to be here. I have tried my best but failed. Please let people do what they want with bitcoin without changing consensus rules. It will help Bitcoin.\n>> \n>> /dev/fd0\n>> floppy disk guy\n>> \n>> \n>> Sent with Proton Mail secure email.\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230420/5b92f22f/attachment-0001.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 228 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230420/5b92f22f/attachment-0001.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin fungibility and inscribed sats",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Kree Love"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6140
        }
    },
    {
        "title": "[bitcoin-dev] TARO Protocol metadata BIP proposal",
        "thread_messages": [
            {
                "author": "Adam Ivansky",
                "date": "2023-04-21T09:46:53",
                "message_text_only": "Hi all / happy Friday ,\n\nI would like to propose a BIP for the metadata structure of assets traded\non TARO Protocol running on Bitcoin blockchain. A new bip-taro.mediawiki\nfile.\n\nThe BIP for TARO is here\nhttps://github.com/Roasbeef/bips/blob/bip-taro/bip-taro.mediawiki . TARO\nBIP does not explicitly talk about the format of metadata of the assets.\nHowever this is something we will have to agree on if we are to start\ntrading NFTs, Stablecoins and different synthetic assets such as tokenized\nstocks / options.\n\nFor the past few months I have been operating a wallet for TARO called\nTiramisu Wallet on testnet ( https://testnet.tarowallet.net/ ) and I was\nable to put together a list of fields that the metadata should have . This\nis a result of myself testing different use cases for the protocol as well\nas external users coming in and minting different assets.\n\nMy observation is that users care a lot about the ticker, asset name,\ndescription, image representing the asset, info on who minted the asset.\n\nFor this reason I would like to propose a BIP for TARO Protocol asset\nmetadata. I think this should be separate from the TARO BIP as the format\nof asset metadata might evolve depending on the real-life use cases and\nwhat assets end up being minted / traded on TARO.\n\nI am proposing that the metadata is structured as a JSON stored as a string\nand that it is formatted as follows:\n\n{\n    \"ticker\": // [optional] Fungible assets should have ticker\n    \"type\": // Stablecoin | Image | Video | Data ... Type of the asset\n    \"description\": // [mandatory] Short description of the asset explaining\nhow the asset works\n    \"data\": // [optional] Base64 formatted image data. This is the image\nrepresentation of the asset / an icon representing the asset.\n    \"hash_data\": // [optional] Hash of the data that asset represents\n    \"external_url\": // [optional] External URL to the thing that the asset\nrepresents\n    \"attributes\": { // [optional] External URL to the thing that the asset\nrepresents\n        \"collection_name\":\n        ...\n    }\n    \"minter_info\": { // [optional] Information about the entity that minted\nthe asset\n        \"name\":\n        \"email\":\n        \"phone\":\n        \"telegram\":\n        \"website\":\n    }\n}\n\nThis was loosely inspired by the standard use by OpenSea\nhttps://docs.opensea.io/docs/metadata-standards only in case of TARO we\nhave less of an incentive to make the metadata small as this data is not\nwritten to blockchain directly.\nThis is why I think we should start including the actual image data into\nthe metadata.\n\nTiramisu wallet is on testnet right now and uses some of these JSON fields.\n\nPlease let me know how you feel about this.\n\nPS: I am following the manual from here\nhttps://github.com/Roasbeef/bips/tree/bip-taro that says my first step\nshould be sending an email to this mailing list .\n\nBest regards,\n\nAdam Ivansky\n\nFounder of Tiramisu Wallet\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230421/cf41ff1e/attachment.html>"
            },
            {
                "author": "Andrew Melnychuk Oseen",
                "date": "2023-04-26T22:11:36",
                "message_text_only": "Big fan of this. I don't have the technical expertise to suggest much, but I think that is a really good start for a foundation of bearer instruments.\n\n-Andrew\n\nSent with [Proton Mail](https://proton.me/) secure email.\n\n------- Original Message -------\nOn Friday, April 21st, 2023 at 2:46 AM, Adam Ivansky via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi all / happy Friday ,\n>\n> I would like to propose a BIP for the metadata structure of assets traded on TARO Protocol running on Bitcoin blockchain. A new bip-taro.mediawiki file.\n>\n> The BIP for TARO is here https://github.com/Roasbeef/bips/blob/bip-taro/bip-taro.mediawiki . TARO BIP does not explicitly talk about the format of metadata of the assets. However this is something we will have to agree on if we are to start trading NFTs, Stablecoins and different synthetic assets such as tokenized stocks / options.\n>\n> For the past few months I have been operating a wallet for TARO called Tiramisu Wallet on testnet ( https://testnet.tarowallet.net/ ) and I was able to put together a list of fields that the metadata should have . This is a result of myself testing different use cases for the protocol as well as external users coming in and minting different assets.\n>\n> My observation is that users care a lot about the ticker, asset name, description, image representing the asset, info on who minted the asset.\n>\n> For this reason I would like to propose a BIP for TARO Protocol asset metadata. I think this should be separate from the TARO BIP as the format of asset metadata might evolve depending on the real-life use cases and what assets end up being minted / traded on TARO.\n>\n> I am proposing that the metadata is structured as a JSON stored as a string and that it is formatted as follows:\n>\n> {\n> \"ticker\": // [optional] Fungible assets should have ticker\n> \"type\": // Stablecoin | Image | Video | Data ... Type of the asset\n> \"description\": // [mandatory] Short description of the asset explaining how the asset works\n> \"data\": // [optional] Base64 formatted image data. This is the image representation of the asset / an icon representing the asset.\n> \"hash_data\": // [optional] Hash of the data that asset represents\n> \"external_url\": // [optional] External URL to the thing that the asset represents\n> \"attributes\": { // [optional] External URL to the thing that the asset represents\n> \"collection_name\":\n> ...\n> }\n> \"minter_info\": { // [optional] Information about the entity that minted the asset\n> \"name\":\n> \"email\":\n> \"phone\":\n> \"telegram\":\n> \"website\":\n> }\n> }\n>\n> This was loosely inspired by the standard use by OpenSea https://docs.opensea.io/docs/metadata-standards only in case of TARO we have less of an incentive to make the metadata small as this data is not written to blockchain directly.\n> This is why I think we should start including the actual image data into the metadata.\n>\n> Tiramisu wallet is on testnet right now and uses some of these JSON fields.\n>\n> Please let me know how you feel about this.\n>\n> PS: I am following the manual from here https://github.com/Roasbeef/bips/tree/bip-taro that says my first step should be sending an email to this mailing list .\n>\n> Best regards,\n>\n> Adam Ivansky\n>\n> Founder of Tiramisu Wallet\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230426/3ae36ec9/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "TARO Protocol metadata BIP proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Andrew Melnychuk Oseen",
                "Adam Ivansky"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 6512
        }
    },
    {
        "title": "[bitcoin-dev] Vaults in the MATT framework",
        "thread_messages": [
            {
                "author": "Salvatore Ingala",
                "date": "2023-04-24T19:37:20",
                "message_text_only": "Hello list,\n\nTL;DR: the core opcodes of MATT can build vaults with a very similar design\nto OP_VAULT. Code example here:\n\n\nhttps://github.com/bitcoin-inquisition/bitcoin/compare/24.0...bigspider:bitcoin-inquisition:matt-vault\n\n\nIn my previous emails about the MATT proposal for smart contracts in\nbitcoin [1], I mostly focused on proving its generality; that is, it\nallows arbitrary smart contracts thanks to fraud proofs.\n\nWhile I still find this \"completeness\" result compelling, I spent more time\nthinking about the framework itself; the construction is not very\ninteresting\nif it turns simple things into complicated ones. Luckily, this is not the\ncase.\nIn particular, in this email we will not merkleize anything (other than\ntaptrees).\n\nThis post describes some progress into formalizing the semantics of the core\nopcodes, and demonstrates how they could be used to create vaults that seem\ncomparable to the ones built with OP_VAULT [2], despite using general\npurpose\nopcodes.\n\nAn implementation and some minimal tests matching the content of this\ne-mail can be found in the link above, using the bitcoin-inquisition as the\nbase branch.\n\nNote that the linked code is not well tested and is only intended for\nexploratory and demonstrative purposes; therefore, bugs are likely at this\nstage.\n\n\n##########################\n#    PART 1: MATT's core\n##########################\n\nIn this section, I will discuss plausible semantics for the core opcodes\nfor MATT.\n\nThe two core opcodes are defined below as OP_CHECKINPUTCONTRACTVERIFY and\nOP_CHECKOUTPUTCONTRACTVERIFY.\n\n(the initial posts named them OP_CHECK{INPUT,OUTPUT}COVENANTVERIFY)\n\nThey enhance Script with the following capabilities:\n  - decide the taptree of the output\n  - embed some (dynamically computed) data in the output\n  - access the embedded data in the current UTXO (if any)\n\nThe opcodes below are incomplete, as they only control the output's Script\nand\nnot the amounts; more on that below.\n\nOther than that, the semantics should be quite close to the \"right\" one for\nthe MATT framework.\n\n\n### The opcodes\n\ncase OP_CHECKINPUTCONTRACTVERIFY:\n{\n    // OP_CHECKINPUTCONTRACTVERIFY is only available in Tapscript\n    if (sigversion == SigVersion::BASE || sigversion ==\nSigVersion::WITNESS_V0) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n    // (x d -- )\n    if (stack.size() < 2)\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n    valtype& x = stacktop(-2);\n    valtype& d = stacktop(-1);\n    if (x.size() != 32 || d.size() != 32)\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n    const XOnlyPubKey nakedXOnlyKey{Span<const unsigned char>{x.data(),\nx.data() + 32}};\n    const uint256 data(d);\n    if (!execdata.m_internal_key.has_value())\n        return set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR);  // TODO\n    // Verify that tweak(lift_x(x), d) equals the internal pubkey\n    if (!execdata.m_internal_key.value().CheckDoubleTweak(nakedXOnlyKey,\n&data, nullptr))\n        return set_error(serror, SCRIPT_ERR_WRONGCONTRACTDATA);\n    popstack(stack);\n    popstack(stack);\n}\nbreak;\ncase OP_CHECKOUTPUTCONTRACTVERIFY:\n{\n    // OP_CHECKOUTPUTCONTRACTVERIFY is only available in Tapscript\n    if (sigversion == SigVersion::BASE || sigversion ==\nSigVersion::WITNESS_V0) return set_error(serror, SCRIPT_ERR_BAD_OPCODE);\n    // (out_i x taptree d -- )\n    if (stack.size() < 4)\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n    int out_i = CScriptNum(stacktop(-4), fRequireMinimal).getint();\n    valtype& x = stacktop(-3);\n    valtype& taptree = stacktop(-2);\n    valtype& d = stacktop(-1);\n    auto outps = checker.GetTxvOut();\n    // Return error if the evaluation context is unavailable\n    if (!outps)\n        return set_error(serror, SCRIPT_ERR_UNKNOWN_ERROR); // TODO\n    if (x.size() != 32 || taptree.size() != 32 || (d.size() != 0 &&\nd.size() != 32))\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n    if (out_i < 0 || out_i >= (int)outps->size())\n        return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n    const XOnlyPubKey nakedXOnlyKey{Span<const unsigned char>{x.data(),\nx.data() + 32}};\n    const uint256 data(d);\n    const uint256 *data_ptr = (d.size() == 0 ? nullptr : &data);\n    const uint256 merkle_tree(taptree);\n    CScript scriptPubKey = outps->at(out_i).scriptPubKey;\n    if (scriptPubKey.size() != 1 + 1 + 32 || scriptPubKey[0] != OP_1 ||\nscriptPubKey[1] != 32)\n        return set_error(serror, SCRIPT_ERR_WRONGCONTRACTDATA);\n    const XOnlyPubKey outputXOnlyKey{Span<const unsigned\nchar>{scriptPubKey.data() + 2, scriptPubKey.data() + 34}};\n    // Verify that taptweak(tweak(lift_x(x), d), taptree) equals the\ninternal pubkey\n    if (!outputXOnlyKey.CheckDoubleTweak(nakedXOnlyKey, data_ptr,\n&merkle_tree))\n        return set_error(serror, SCRIPT_ERR_WRONGCONTRACTDATA);\n    popstack(stack);\n    popstack(stack);\n    popstack(stack);\n    popstack(stack);\n}\nbreak;\n\n### Commentary\n\nCheckDoubleTweak function (implemented in the branch) gets an x-only pubkey,\noptionally some data, and optionally taptree's merkle root.\nIt verifies that the x-only pubkey being tested equals the given naked\npubkey,\noptionally tweaked with the embedded data, optionally tweaked with the\ntagged\nhash of the merkle tree per BIP-0341 [3].\nMaking both the tweaks optional allows to simplify the code, and also to\nobtain\nmore compact scripts in some spending paths.\n\nIn words:\n\n- OP_CHECKINPUTCONTRACTVERIFY: verify that the current input's internal key\n  contains some embedded data (which would typically be passed through the\n  witness stack)\n- OP_CHECKOUTPUTCONTRACTVERIFY: verify that a given output is a certain P2TR\n  output script containing the desired embedded data.\n\nTBD if the tweaking used for the embedded data tweak should use a tagged\nhash;\nomitted for simplicity in this demo implementation.\n\n### Amount preservation\n\nIn the code above and in the linked demo implementation, the opcodes only\noperate on the scriptPubkey; a complete implementation would want to make\nsure\nthat amounts are correctly preserved.\n\nThe most direct and general way to address this would be to allow direct\nintrospection on the output amounts. This has the complication that output\namounts require 64-bits arithmetics, as discussed in the context of other\nproposals, for example: [4].\n\nOne more limited approach that works well for many interesting contracts\nis that of the deferred checks, implemented in OP_VAULT [2].\nThe idea is that all the amounts of the inputs that commit to the same\noutput\nscript with OP_CHECKOUTPUTCONTRACTVERIFY are added together, and the script\ninterpreter requires that the amount of that output is not smaller than the\ntotal amount of those inputs. This check is therefore transaction-wide\nrather\nthan being tested during the input's script evaluation.\n\nThis behaviour is adequate for vaults and likely suitable for many other\napplications; however, it's not the most general approach. I didn't try to\nimplement it yet, and defer the decision on the best approach to a later\ntime.\n\n### Extensions\n\nThe opcodes above are not enough for the full generality of MATT: one would\nneed to add an opcode like OP_SHA256CAT to allow the data embedding to\ncommit\nto multiple pieces of data.\nThis is not used in today's post, therefore I left it out of these code\nexamples.\n\nIt would be easy to extend OP_CHECKOUTPUTCONTRACTVERIFY to also apply for\nan arbitrary input (typically, different from the currently executed one);\nthere\nare likely use cases for that, allowing to define contracts with more\ncomplex\ncross-input semantics, but I preferred to keep things simple.\n\nOf course, one could also entirely replace CICV/COCV with generic full\nintrospection on inputs/output's program, plus opcodes for elliptic curve\nmath\nand tagged hashes.\n\n\n##########################\n#    PART 2: Vaults with MATT\n##########################\n\nIn the rest of this post, I will document the first attempt at creating a\nvault\nusing the opcodes described.\n\nWhile not an attempt at cloning exactly the functionality of OP_VAULT [2],\nit borrows heavily from the excellent work that was done there.\n\nIn particular, it also inherits the choice of using OP_CTV as a primitive,\nbuilding on top of the bitcoin-inquisition's current branch that has already\nmerged OP_CTV. Reasonable vaults would be possible without CTV, but they\nwould be less efficient, particularly in the case of sending to many\naddresses\nin a single unvaulting flow.\n\n### Distilling OP_VAULT\n\nAbstracting from the implementation details, I mentally model a vault as a\nsimple state machine with 2 states: [V] and [U]:\n\n[V]: the initial vault UTXO(s);\n[U]: the utxo produced by the \"trigger transaction\" during unvaulting.\n\nOn the typical path: one or more [V] UTXOs are sent to the [U] state, and\nafter\na timelock set on [U] expires, [U] is spent to one or several destinations.\nCrucially, the destination outputs and amounts are already decided when [V]\nis\nspent into [U].\n\nAt any time before the funds are spent from [U], they can always be spent by\nsending them to some specified recovery path.\n\nThere are two key elements that are part of OP_VAULT's semantics, and could\nbe\ngeneralized:\n\n\u2212 Forcing the script/amount of the next stepon\n\u2212 Storing some data for future Script's access (in the vault's case, a hash\n   that commits to the final withdrawal transaction).\n\nCICV/COCV generalize both to arbitrary scripts (taptrees) and state\nmachines,\nand to dynamical and witness-dependent data embedded in the pubkey of a P2TR\noutput.\n\n### Vault parameters\n\nA contract that represents a vault has the following parameters (hardcoded\nin\nthe script when the vault is created):\n\n- alternate_pk: a key that can be used any time.\n- spend_delay: the relative timelock before the withdrawal can be finalized;\n- recover_pk: a pubkey for a P2TR output where funds can be sent at any\ntime.\n\nThe alternate_pk is a pubkey that can optionally be used as the key-path\nspending condition for both states [V] and [U]. If such a spending\ncondition is not\ndesired, it can be replaced with a NUMS point, making the key-path\nunspendable.\n\nThe spend_delay is the number of blocks that must be mined before the final\nwithdrawal transaction\n\nIn this example we also use an unvault_pk needed to authorize the unvaulting\nprocess (that is, spend [V] into [U]); this could be replaced with any\nminiscript\nor other conditions expressible in Script.\n\n### P2TR structure for [V] (vault)\n\ninternal key: alternate_pk\n\nScript 1: \"trigger\"\n        # witness: <out_i> <ctv-hash>\n{\n    <alternate_pk>,\n    <merkle root of U's taptree>,\n    2, OP_ROLL,\n    OP_CHECKOUTPUTCONTRACTVERIFY,\n\n    <unvault_pk>\n    OP_CHECKSIG\n}\n\nScript 2: \"recover\"\n        # witness: <out_i>\n{\n    recover_pk,\n    OP_0,                          # no data tweak\n    OP_0,                          # no taptweak\n    OP_CHECKOUTPUTCONTRACTVERIFY,\n    OP_TRUE\n}\n\nThe \"trigger\" script requires in the witness an output index and the\nctv-hash\nthat describes the withdrawal transaction.\nCOCV forces the output to contain the ctv-hash as embedded data.\nThat's followed by the unvaulting condition \u2212 in this example, a simple\nsignature check.\n\nThe \"recover\" script doesn't require any signature, and it simply forces\nthe output specified in the witness to be a P2TR output with recover_pk as\nits\npubkey.\n\n(Omitting the \"recover\" script in [V] would reduce the size of the witness\nby\n32 bytes in the expected case, and might be preferred for some users)\n\n### P2TR structure for [U] (unvaulting state)\n\ninternal key: alternate_pk (tweaked with ctv_hash)\n\nScript 1: \"withdrawal\"\n        # witness: <ctv_hash>\n{\n    OP_DUP,\n\n    # check that the top of the stack is the\n    # embedded data in the current input\n    <alternate_pk>, OP_SWAP,\n    OP_CHECKINPUTCONTRACTVERIFY,\n\n    # Check timelock\n    <spend_delay>,\n    OP_CHECKSEQUENCEVERIFY,\n    OP_DROP,\n\n    # Check that the transaction output is as expected\n    OP_CHECKTEMPLATEVERIFY\n}\n\nScript 2: \"recover\"\n        # witness: <out_i>\n{\n    <recover_pk>,\n    OP_0,\n    OP_0,\n    OP_CHECKOUTPUTCONTRACTVERIFY,\n    OP_TRUE\n}\n\nThe \"withdrawal\" finalizes the transaction, by checking that the timelock\nexpired and\nthe outputs satisfy the CTV hash that was committed to in the previous\ntransaction.\n\nThe \"recover\" script is identical as before.\n\n\n### Differences with OP_VAULT vaults\n\nHere I refer to the latest version of OP_VAULT at the time of writing. [5]\nIt is not a thorough analysis.\n\nUnlike the implementation based on OP_VAULT, the [V] utxos don't have an\noption\nto add an additional output that is sent back to the same exact vault.\nSupporting this use case seems to require a more general way of handling the\ndistribution of amounts than what I discussed in the section above: that\nwould\nin fact need to be generalized to the case of multiple\nOP_CHECKOUTPUTCONTRACTVERIFY opcodes executed for the same input.\n\nBy separating the ctv-hash (which is considered \"data\") from the scripts in\nthe\ntaptree, one entirely avoids the need to dynamically create taptrees and\nreplace leaves in the covenant-encumbered UTXOs; in fact, the taptrees of\n[V]\nand [U] are already set in stone when [V] utxos are created, and only the\n\"data\" portion of [U]'s scriptPubKey is dynamically computed. In my opinion,\nthis makes it substantially easier to program \"state machines\" that control\nthe\nbehavior of coins, of which vaults are a special case.\n\nI hope you'll find this interesting, and look forward to your comments.\n\nSalvatore Ingala\n\n\n[1] -\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2022-November/021223.html\n[2] - https://github.com/bitcoin/bips/pull/1421\n[3] - https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki\n[4] -\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-September/019420.html\n[5] -\nhttps://github.com/bitcoin/bips/blob/7112f308b356cdf0c51d917dbdc1b98e30621f80/bip-0345.mediawiki\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230424/d12d6aad/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Vaults in the MATT framework",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Salvatore Ingala"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 14111
        }
    },
    {
        "title": "[bitcoin-dev] Spiral is Hiring Bitcoin Wizards",
        "thread_messages": [
            {
                "author": "Steve Lee",
                "date": "2023-04-24T20:24:46",
                "message_text_only": "Note: I checked with the moderators prior to posting this as normally job\npostings to this list would be frowned upon. I felt like it was appropriate\nin this case since (a) Spiral is 100% non-commercial FOSS bitcoin (b) many\non this list would either be interested in this opportunity or know people\nwho would be.\n\n\nSpiral is hiring bitcoin \u201cwizards,\u201d though we will settle for bitcoin\nmages, sorcerers and sorceresses, witches, warlocks, and druids.\n\nAbout Spiral\nSpiral is the first free and open-source, internal, non-profit bitcoin\norganization within a major tech company. We contribute to bitcoin by\nwriting code, funding projects and individuals, educating, entertaining,\nand testing the limits of what a tiny team can do to impact the future of\nmoney. Although many see bitcoin only as digital gold, via the Lightning\nNetwork, Spiral envisions bitcoin fulfilling its promise and potential as\nthe global standard for peer-to-peer payments.\n\nTo date, Spiral\u2019s full-time engineering team has focused exclusively on\ndeveloping LDK, a kit that simplifies how developers add the Lightning\nNetwork to apps and wallets. This year, we plan to build an R&D team within\nSpiral that will focus on improving bitcoin\u2019s security, decentralization,\nprivacy, scaling, and expressivity beyond LDK. The projects might include\napplying novel cryptography, developing existing protocol proposals, and\ncreating new innovative protocol proposals. The possibilities aren\u2019t\nendless, per se, but they are numerous.\n\nJob Responsibilities\n* Identify and drive forward multiple projects in collaboration with the\nSpiral team and the greater bitcoin development community.\n* Develop a project plan for each active project.\n* For a given project, do whatever it takes to make progress toward the\ngoal, including:\n   * Building prototypes\n   * Writing tests\n   * Developing production code\n   * Developing performance benchmarks\n   * Creating simulations\n   * Being thoughtful about how to gain consensus on changes\n   * Recruiting other FOSS devs to help\n   * Writing bitcoin-dev email posts\n   * Participating in podcasts and speaking at conferences\n* Regularly review bitcoin-dev and lightning-dev email lists, relevant\n\u201cwizards\u201d channels, Bitcoin Optech, relevant research papers, and R&D from\nother cryptocurrency projects. When possible, engage and provide\nconstructive feedback.\n* Propose new protocol designs building on what others have done or wholly\nnew ideas.\n\nQualifications\nApplicants should have a deep technical understanding of bitcoin and be\ncomfortable engaging on bitcoin topics and on bitcoin channels such as\nbitcoin-dev or lightning-dev email lists, local bitdevs, or in a \u201cwizards\u201d\nchannel such as IRC #bitcoin-wizards.\n\nApplicants should also know which projects they\u2019d like to work on. At a\nminimum, they should be able to identify three projects worth your time,\nwhy they benefit bitcoin, and how your involvement would improve them.\n\nFinally, strong people skills are a must. Many projects will require\nattaining developer consensus, including the bitcoin consensus protocol,\nbitcoin p2p policy, and the LN protocol. To successfully navigate this\nrequires more than just coding talent. Applicants should be ego-free,\nwilling to detach themselves from a particular proposal, and be prepared to\nconclude a proposal if something learned has made it untenable. Applicants\nshould also seek collaborators and co-authors, be patient yet persistent,\nand incorporate peer feedback. We undeniably expect a lot from whoever\nfills these roles. But there\u2019s no other job like them in bitcoin or\nelsewhere.\n\nExample Projects\nHere is a list of project examples Spiral would find valuable. Again, we\nexpect candidates to drive the process of which projects they will work on,\nso this list is merely a tool to help a candidate calibrate the scope and\ndepth of future projects.\n\nScaling innovation\n* New methods to share UTXOs among users as trustless and efficiently as\npossible\n* Lightning efficiency innovation\n* Cross-input signature aggregation\n\nSecurity innovation\n* BIP324\n* Mining pool decentralization\n* Threshold signatures for LN\n* Mempool/bitcoin p2p security for L2\n* Evaluate security risks to bitcoin stemming from MEV, tokens,\nstablecoins, etc and provide recommendations\n\nPrivacy innovation\n* Applied ZKP for LN gossip to hide UTXO funding\n\nBitcoin expressivity innovation\n* Bitcoin script opcode innovation, tradeoff evaluation, and driving (CTV,\nCSFS, TLUV, OP_VAULT, etc.)\n\nThe Position\nThis full-time role includes full-time worker benefits. Spiral supports you\nworking anywhere, but you need a home base in a country whose talent pool\nBlock can legally hire from. If you\u2019re not sure whether we can hire from\nwhere you live, just reach out and ask. We\u2019ll check.\n\nHow to Apply\nSound good? Not too confused? Great. You\u2019ve cleared the first hurdle. Shoot\nus an email with the top 3 project ideas you want to work on along with\nsupporting evidence that you\u2019ll successfully complete them: apply at spiral.xyz\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230424/04525bf7/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Spiral is Hiring Bitcoin Wizards",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Steve Lee"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5192
        }
    },
    {
        "title": "[bitcoin-dev] MyCitadel wallet v1.3 advances time-locked multi-sigs further",
        "thread_messages": [
            {
                "author": "Dr Olga Ukolova",
                "date": "2023-04-26T18:37:59",
                "message_text_only": "Dear community,\n\n\nMyCitadel [1] by Pandora Prime SA is a Bitcoin wallet that was first to support\naccount-based multi-sigs with time-locks and complex miniscript descriptors.\nToday an updated version 1.3 is released, extending this support, allowing the \nsame signer to participate in multiple spending conditions in SegWit v0\ncontexts. This enables creation of complex time-locked conditions involving \nthe same signers in different spending policies (for instance having 2-of-4 \nmulti-sig which in 1 year becomes 1-of-2).\n\n\nDetails\n=======\n\nA year ago we created desktop version of MyCitadel: it was the first bitcoin \nwallet fully written in Rust (using GDK3 framework) and also the first \nwith a support for both branched tapscripts and gracefully degrading \ntime-locked multi-sigs (with the later working for both Taproot and SegWit v0).\n\nToday we are happy to inform you about new release v1.3, with two main \nimprovements:\n\n* Creation of degrading time locked multi-sigs in SegWit v0 context, where \n  same device/signer can participate multiple conditions with different \n  timelocks and multisig thresholds. \n\n  NB: Previously, miniscript was preventing from creating SegWit policies \n  re-using the same extended key, while in Taproot it was possible [2]. \n  We have mitigated the problem by introducing account-based spending policies, \n  using different account from the same signer in different script branches.\n\n* Support for exporting Bitcoin Core/BIP380-compatible wallet descriptors, \n  which include Taproot script tree and miniscript fragments.\n\n\nMore about MyCitadel\n====================\n\nMyCitadel was designed with approach that avoids touching private keys and \nseeds. Unlike many other wallets, it is based not on BDK but on an\nalternative stack of rust libraries called \"descriptor wallet library\" [3], \ncreated by the LNP/BP Standards Association [4]. This library provides \ncompile-time type-level guarantees avoiding usage of private keys in wallet \ndescriptors, and miniscript fragments. The wallet works with hardware \nsigners, and also can produce and export PSBT files, which may be signed \nelsewhere (including air gaped devices, or even command-line hot-wallet \nsigners, if needed).\n\n\nAccessing release\n=================\n\nIf you want to check it out, play with it or leave feedback, please feel\nfree to go to the release GutHub discussion [5], which also links to the \nreleased binaries [6].\n\n\nAcknowledgements\n================\n\nThis release was made possible because with the help we received from \nthe NYM project team, which had provided both valuable ideas and financial \nsupport for continued MyCitadel development.\n\n\nThank you.\n\nRegards,\nOlga Ukolova\nCEO Pandora Prime SA, Switzerland\nhttps://mycitadel.io\nTwitter: @mycitadel_io\n\n[1]: https://mycitadel.io\n[2]: https://github.com/rust-bitcoin/rust-miniscript/issues/338#issuecomment-1137750428\n[3]: https://github.com/BP-WG/descriptor-wallet\n[4]: https://www.lnp-bp.org\n[5]: https://github.com/mycitadel/mycitadel-desktop/discussions/90\n[6]: https://github.com/mycitadel/mycitadel-desktop/releases/tag/v1.3.0"
            }
        ],
        "thread_summary": {
            "title": "MyCitadel wallet v1.3 advances time-locked multi-sigs further",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Dr Olga Ukolova"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3098
        }
    },
    {
        "title": "[bitcoin-dev] proposal: new opcode OP_ZKP to enable ZKP-based spending authorization",
        "thread_messages": [
            {
                "author": "Weiji Guo",
                "date": "2023-04-28T08:29:10",
                "message_text_only": "Hey everyone,\n\n\nI am writing this email to propose a new opcode to enable zero knowledge\nbased spending authorization for Bitcoin. This new opcode OP_ZKP will\nenable the Bitcoin network to authorize spending based on off-chain\ncomputation, provided acceptable proof is supplied. This will not only\nequip the Bitcoin script with Turing completeness, but also enable the\nbuilding of payment channels more flexible, stablecoin, decentralized\nexchange, DeFi, etc. directly over the Bitcoin network, or even a layer 2.\nAll these could be accomplished with a soft fork (and follow-up building).\n\n\nBefore any BIP could be requested, I\u2019d like to discuss all the aspects in\nmore detail, to cover as many corners as possible, and hopefully to build\nconsensus among developers and the community.\n\n\n*### 0. Overview*\n\nHere are what I am currently considering, listed as starting points for\ndiscussion. I hope that I have covered all major issues, but please do feel\nfree to add more.\n\n\n\n   1. How it works: we add OP_ZKP and OP_ZKPVERIFY using some unused OP_NOP\n   codes. OP_ZKP works similarly to OP_MULTISIG, with a number parameter to\n   indicate how many public inputs are to be read;\n   2. Security: to bind the spending conditions to certain UTXO set,\n   amount, and recipients, the hash of all this information shall be used as\n   public input to the proof;\n   3. Dealing with system limitation: verification keys could be very long\n   and exceed the MAX_SCRIPT_ELEMENT_SIZE (520 bytes). They could be put into\n   configurations and only use their hash in the scriptPubKey. The\n   configuration information such as new verification keys could be propagated\n   through P2P messages (we might need a separate BIP for this);\n   4. Scalability: arrangement for miners or computing power vendors to\n   aggregate some proofs for scalability and fee reduction. Alternatively,\n   this could be accomplished with recursive proof.\n   5. ZKP scheme and curve choices.\n   6. Potential uses are unlimited, although there is no apparent secret\n   key (private key or seed) in play.\n   7. Ecology implications. Impacts on wallets, etc.\n\n\nBelow, I will introduce/discuss the above-listed item one by one. Mostly I\nhave to keep the discussion minimal and brief. It is still a bit lengthy,\nplease bear with me.\n\n\n*### 1. How it works*\n\nConsider below script:\n\n\nscriptPubKey: <hash of the verification key> <Groth16_BN254> OP_ZKP\n\nscriptSig: <pubInput_1> <pubInput_2> \u2026 <pubInput_n> <n> <proof>\n\n\n<Groth16_BN254> is only an example in place of an indicator for the ZKP\nscheme and curve parameters. Other combinations are possible. Further\ndiscussion is provided in section 5.\n\n\n<hash of the verification key> - the node implementation should look up a\nverification key that hashed to this value. Verification keys tend to be\nlong and exceed the limitation imposed by MAX_SCRIPT_ELEMENT_SIZE (520\nbytes). And for various schemes/circuits, the size might be different. So a\nhash is used here. Further discussion is covered in section 3.\n\n\n<proof> refers to the proof data to be verified. Its size is also subject\nto MAX_SCRIPT_ELEMENT_SIZE. This might limit our choices of the ZKP scheme,\nalthough proof data could be split into several parts.\n\n\n<n> refers to how many public inputs are to be read. It should depend on\nthe circuit in use. However, this is *not* the actual number. There is also\nan implicit public input, which is the hash of the transaction, calculated\naccording to the script context.\n\n\nThe evaluation is pretty straightforward. The implementation of OP_ZKP\nreads in (and removes) all its parameters from the stack, calculates the\nimplicit public input from the transaction (UTXO inputs, amount,\nrecipients, etc.), and then leave a true or false in the stack after ZKP\nverification. The security reason behind this implicit public input design\nis discussed in the next section.\n\n\nOP_ZKPVERIFY works the same except for the last step, where it leaves\nnothing or fails the verification.\n\n\n*### 2. Security: replay protection*\n\nProof should not be replayed to authorize spending of another set of UTXO.\nTherefore it is critical to bind the proof to the transaction. This is\nsimilar to OP_CHECKSIG: the transaction hash is needed to verify the proof\nfor OP_ZKP. To calculate the hash, just follow what the context requires.\nFor a SegWit transaction, BIP 0143 seems natural. And most of the time this\nwill be the case. But if those opcodes are indeed used outside of SegWit,\nthen the hashing algorithm before SegWit should be fine.\n\n\nBinding proof to the transaction, especially the UTXO entries, also\nprotects from proof malleability, since once spent, the UTXO entries will\nbe removed from the available UTXO set.\n\n\nOn the other hand, since proof could be calculated by anybody given the\nwitness, circuit developers must take this into account. The private inputs\nshould be kept confidential. In some other uses, there might not be any\nprivate inputs but only an authoritative signature, then it is the\nauthority\u2019s responsibility to only sign valid information, and circuit\ndevelopers\u2019 responsibility to ensure proper protection. Further discussion\nis deferred for now.\n\n\n*### 3. Dealing with system limitations: verification key*\n\nThe size of proof data or verification key could exceed the limitation\nimposed by MAX_SCRIPT_ELEMENT_SIZE, which is 520 (bytes). In this section,\nwe discuss its implications for the verification key.\n\n\nThe size of a verification key varies with different schemes and circuits.\nHowever, the number of total different circuits will be rather limited, at\nleast at the Bitcoin network level. Therefore, using the hash of the\nverification key instead of the key itself renders fixed-size data, and\nflexibility without worrying if the verification key gets too long.\n\n\nFurther, it is not advisable to hard code the verification key in the code\nbase of nodes, as new verification keys arise every few days or months.\nRather, P2P messaging seems a suitable way to propagate new verification\nkeys. Once received, a node could save it to a configuration file, and also\nforward it to other nodes. If an unknown hash is encountered, the node\ncould also request it from its connected peers. If the node cannot gather a\nnew verification key in time, then it has to fail the transaction\nverification. If too many nodes cannot get the new verification key in\ntime, the new block containing the offending transaction will not be\naccepted by the Bitcoin network. It is suggested that a separate BIP be\nrequested to address these issues.\n\n\n*### 4. Scalability*\n\nZKP verification usually costs at least tens of milli-seconds, and might\nalso cost more data size. So, it should be fine to have a few dozen ZKP\ntransactions in a block. But a few thousand will cost too much time to\nverify and too much block space. In this section, we discuss how this could\nbe mitigated.\n\n\nThere are two options: proof aggregation (batching), and recursive\nverification.\n\n\nSome ZKP proofs are known to be capable of aggregation, however, with\ncertain limitations. For example, aggregating Groth16 proofs seems to\nrequire that all proofs are of the same circuit, so that the value of \u03b3 and\n\u03b4 remain the same across different proofs, as both parameters are from\nphase 2 setup, thus circuit specific. We can also aggregate KZG polynomial\ncommitment scheme-based proofs. Still, the aggregator needs to ensure that\nthe hash of each transaction has been verified as well.\n\n\nOn the other hand, recursive verification can handle these transaction hash\nverification, along with verifying the correctness of each proof. It might\nbe very computationally intensive to generate a recursive proof for a few\nthousand proofs but there are lots of room for further optimization.\n\n\nIt is also possible to develop a hybrid strategy, that some proofs are\naggregated, with additional verification being proved, then both the\naggregation and additional proof could be verified by a recursive proof.\n\n\nWe might need a new SegWit version so that transactions can refer to its\nproper proof once aggregated or recursively verified.\n\n\nReplay protection: once aggregated or proved via recursion to the network,\na transaction cannot be played to the Bitcoin network again, as the UTXO\nentries have been spent.\n\n\n*### 5. ZKP scheme and curve choice*\n\nA major concern is the size of the script, proof, cost of verification, and\nthe feasibility to aggregate/batching many proofs.\n\n\nGroth16 checks out here with short proof size, cheap verification, and\nfeasibility to aggregate. For example, the standard draft here ([1]) shows\nan implementation that can aggregate 1024 proofs in 2s and verifies them in\n23ms. Although it seems to require that all proofs belong to the same\ncircuit ( due to \u03b3 and \u03b4, which are circuit-specific). Still, the short\nproof size and cheap verification cost make Groth16 suitable to verify\nother proofs recursively. And when the upper layer proving schemes (and\nsetup) is the same, so are the verification circuits, therefore those\nproofs could be aggregated.\n\n\nOn the other hand, KZG commitment supports batching. So the zkSnarks based\non KZG should support as well. Further, this paper by Boneh, etc. ([2])\nenhances KZG commitment to allow one or two group element opening for\nmultiple polynomials each evaluated at a different set of points.\n\n\nThis is not an exhaustive list, not even a list. Overall, if we can\naggregate/batch many proofs together, then proof size is of smaller\nconcern. In this case, Plonk might be a better scheme than Groth16, if we\ncan implement a batching technique to batch proofs from different circuits\ntogether. But still, in the beginning, there might not be many proofs to be\nbatched/aggregated at all.\n\n\nWe shall designate a parameter to OP_ZKP and OP_ZKPVERIFY to indicate which\nscheme (and curve) to use.\n\n\nFor curve, BN254 is a natural choice as it has been adopted by many\nblockchain projects. However, this is largely an open issue.\n\n\nAll being said, as a proposal, it is my opinion that we should support\nGroth16-BN254 at the beginning. Based on that we could build recursive\nverification circuits for other scheme, which does not require a soft fork.\nOther schemes and curves, if much desired by the community, could be\nincluded as well. Maybe we can designate a separate BIP for each\nscheme-curve pair for direct support (instead of recursive verification).\n\n\n*### 6. Potential uses*\n\nThe potential uses are unlimited: payment aggregation for a fee reduction\nor anonymity, stablecoin, DeFi, decentralized exchange, DAO, NFT, etc.,\njust to name a few. But still, we could take as an example some uses to\ncheck if any issues arise and discuss how to address them.\n\n\nA. ZKP-based smart contract. We could reasonably assume ZKP-based smart\ncontracts to be rather different from consensus-based smart contracts\n(although OP_ZKP is part of a script). A notable difference is that with\nBitcoin\u2019s UTXO model instead of account-model, account-balance type of\ncontracts are hard to build without involving external storage or state\nmanagement. And even with external storage involved to manage the states,\nthe security of the external storage is also a concern. Data might be lost\nor corrupted. Bitcoin\u2019s security does not extend to those contracts\nautomatically. It takes innovations to address these issues.\n\n\nOn the other hand, there could be smart contracts without a need for\nexplicit state management. This could be gaming or decentralized identity,\nthat a ZKP proof is used to prove \u201dsomething happens or exists according to\ndesignated algorithm or criteria\u201c.\n\n\nB. Payment aggregation, or Bitcoin Layer 2. Every address can participate\nin such a protocol by sending certain Bitcoin to the designated address\n(the fund-holding address). Once signed up, participants can send Bitcoin\nto each other with very little fee or pays a higher fee to send to Layer 1.\nBookkeeping each participant\u2019s \u201cbalance\u201d is a challenge, but might be\nachievable via some complex circuits proving the ownership of certain UTXO\nentries. Once proven, the fund-holding address can send Bitcoins to the\naddress as requested by the participant. It is another challenge to\nmaintain those UTXO entries off the Bitcoin network with high security. We\nmight also need to segregate those UXTOs from the Bitcoin network so that\nno transaction can be replayed to the Bitcoin network or another Layer 2\nprotocol.\n\n\n*### 7. Ecology implications*\n\nProof generation, computing power services/vendors. Some proof might be\nvery computationally intensive to generate, for example, recursive\nverification of thousands of OP_ZKP transactions. In that case, computation\npower services or vendors can work with miners to speed up the generation,\nor simply propose a bundle of transactions to be included in a block. By\npaying a higher fee miners are motivated to include the bundle, while the\nservice or vendor can still profit a lot. The immediate reward could\nincentivize lots of efforts to further optimize the implementation,\nengineering, algorithms, or even ZKP schemes.\n\n\nContract composability. We need to figure out a systematic way for one\nsmart contract to call another, either on-chain or assisted-off-chain. For\nZKP-based smart contracts, proof will have to be generated off-chain and\nthen used later to call the target contract. Off-chain vendors could\nmonitor closely related signals, generate the proof, and submit it to the\nBitcoin network. There should be incentives to ensure the proper running of\nthe system. It is still an open issue about how to define a cross-contract\nAPI, how to signal the call, and how to incentivize computation power\nvendors.\n\n\nImpact on wallet applications. Generating proof to authorize spending seems\na heavy-duty computation task, and does not seem to fit into mobile\napplications or hardware wallets, especially those with SoC and powered by\na small battery. However, we argue that this is not the case. If no secret\n(private key or seed) is involved, there is no need to involve a wallet\nthat is tasked with safekeeping secrets. In such cases, the ZKP proof could\nbe proof that something has indeed happened or exists (including a\nsignature issued from a wallet), which makes up spending conditions.\n\n\n\n\nThat's it for now. I hope you are interested in this idea. I look forward\nto your comments.\n\n\nThanks,\n\nWeiji\n\n\n[1] -\nhttps://docs.zkproof.org/pages/standards/accepted-workshop4/proposal-aggregation.pdf\n\n[2] - https://eprint.iacr.org/2020/081.pdf\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20230428/8d114f17/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2023-04-30T02:15:50",
                "message_text_only": "Good morning Weiji,\n\nHave not completed reading, but this jumped out to me:\n\n\n\n> 3.  Dealing with system limitation: verification keys could be very long and exceed the MAX_SCRIPT_ELEMENT_SIZE (520 bytes). They could be put into configurations and only use their hash in the scriptPubKey. The configuration information such as new verification keys could be propagated through P2P messages (we might need a separate BIP for this);\n\n`scriptPubKey` is consensus-critical, and these new P2P messages would have to be consensus-critical.\n\nAs all nodes need to learn the new verification keys, we should consider how much resources are spent on each node just to maintain and forever remember verification keys.\n\nCurrently our resource-tracking methodology is via the synthetic \"weight units\" computation.\nThis reflects resources spent on acquiring block data, as well as maintaining the UTXO database.\nFor instance, the \"witness discount\" where witness data (i.e. modern equivalent of `scriptSig`) is charged 1/4 the weight units of other data, exists because spending a UTXO reduces the resources spent in the UTXO database, although still consumes resources in downloading block data (hence only a discount, not free or negative/rebate).\n\nSimilarly, any propagation of verification keys would need a similar adjustment for weight units.\n\nAs verification keys MUST be seen by all nodes before they can validate an `OP_ZKP`, I would suggest that it is best included in block data (which similarly needs to be seen by all nodes), together with some weight unit adjustment for that data, depending on how much resources verification keys would consume.\nThis is similar to how `scriptPubKey`s and amounts are included in block data, as those data are kept in the UTXO database, which nodes must maintain in order to validate the blockchain.\n\nIf verification keys are permanent, they should probably be weighted heavier than `scriptPubKey`s and amounts --- UTXOs can theoretically be deleted later by spending the UTXO (which reduces UTXO database size), while any data that must be permanently stored in a database must correspondingly be weighted higher.\n\nSimilarly, my understanding is that the CPU resources needed by validation of generic ZKPs is higher than that required for validation of ECC signatures.\nMuch of the current weight calculation assumes that witness data is primarily ECC signatures, so if ZKP witnesses translate to higher resource consumption, the weighting of ZKP witnesses should also be higher (i.e. greater than the 1/4 witness-discounted weight of current witness data).\n\nRegards,\nZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "proposal: new opcode OP_ZKP to enable ZKP-based spending authorization",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Weiji Guo"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 17265
        }
    },
    {
        "title": "[bitcoin-dev] Merkleize All The Things",
        "thread_messages": [
            {
                "author": "Johan Tor\u00e5s Halseth",
                "date": "2023-04-28T08:48:07",
                "message_text_only": "Hi, Salvatore.\n\nI find this proposal very interesting. Especially since you seemingly\ncan achieve such powerful capabilities by such simple opcodes.\n\nI'm still trying to grok how this would look like on-chain (forget\nabout the off-chain part for now), if we were to play out such a\ncomputation.\n\nLet's say you have a simple game like \"one player tic-tac-toe\" with\nonly two tiles: [ _ | _ ]. The player wins if he can get two in a row\n(pretty easy game tbh).\n\nCould you give a complete example how you would encode one such state\ntransition (going from [ X, _ ] -> [ X, X ] for instance) in Bitcoin\nscript?\n\nFeel free to choose a different game or program if you prefer :)\n\nThanks!\nJohan\n\n\n\nOn Tue, Dec 13, 2022 at 2:08\u202fPM Billy Tetrud via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> Re Verkle trees, that's a very interesting construction that would be super useful as a tool for something like Utreexo. A potentially substantial downside is that it seems the cryptography used to get those nice properties of Verkle trees isn't quantum safe. While a lot of things in Bitcoin seems to be going down the path of quantum-unsafe (I'm looking at you, taproot), there are still a lot of people who think quantum safety is important in a lot of contexts.\n>\n> On Thu, Dec 1, 2022 at 5:52 AM Salvatore Ingala via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>>\n>> Hello Rijndael,\n>>\n>>\n>>\n>> On Wed, 30 Nov 2022 at 23:09, Rijndael <rot13maxi at protonmail.com> wrote:\n>>>\n>>> Hello Salvatore,\n>>>\n>>> I found my answer re-reading your original post:\n>>> > During the arbitration phase (say at the i-th leaf node of M_T), any party can win the challenge by providing correct values for tr_i = (st_i, op_i, st_{i + 1}). Crucially, only one party is able to provide correct values, and Script can verify that indeed the state moves from st_i to st_{i + 1} by executing op_i. The challenge is over.\n>>\n>> You are correct, the computation step encoded in a leaf needs to be simple enough for Script to verify it.\n>>\n>> For the academic purpose of proving completeness (that is, any computation can be successfully \"proved\" by the availability of the corresponding fraud proof), one can imagine reducing the computation all the way down to a circuit, where each step (leaf) is as simple as what can be checked with {OP_NOT, OP_BOOLAND, OP_BOOLOR, OP_EQUAL}.\n>>\n>> In practice, you would want to utilize Script to its fullest, so for example you wouldn't compile a SHA256 computation to something else \u2013 you'd rather use OP_SHA256 directly.\n>>\n>>>\n>>> That raises leads to a different question: Alice initially posts a commitment to an execution trace of `f(x) = y`, `x`, and `y`. Bob Disagrees with `y` so starts the challenge protocol. Is there a commitment to `f`? In other words, the dispute protocol (as I read it) finds the leftmost step in Alice and Bob's execution traces that differ, and then rewards the coins to the participant who's \"after-value\" is computed by the step's operation applied to the \"before value\". But if the participants each present valid steps but with different operations, who wins? In other words, Alice could present [64, DECREMENT, 63] and Bob could present [64, INCREMENT, 65]. Those steps don't match, but both are valid. Is there something to ensure that before the challenge protocol starts, that the execution trace that Alice posts is for the right computation and not a different computation that yields a favorable result for her (and for which she can generate a valid merkle tree)?\n>>\n>>\n>> The function f is already hard-coded in the contract itself, by means of the tree of scripts \u2212 that already commits to the possible futures. Therefore, once you are at state S14, you know that you are verifying the 6th step of the computation; and the operation in the 6th step of the computation depends solely on f, not its inputs. In fact, you made me realize that I could drop op_i from the i-th leaf commitment, and just embed the information in the Script of that corresponding state.\n>>\n>> Note that the states S0 to S14 of the 256x game are not _all_ the possible states, but only the ones that occurred in that execution of the contract (corresponding to a path from the root to the leaf of the Merkle tree of the computation trace), and therefore the ones that materialized in a UTXO. Different choices made by the parties (by providing different data, and therefore choosing different branches) would lead to a different leaf, and therefore to different (but in a certain sense \"symmetric\") states.\n>>\n>> ========\n>>\n>> Since we are talking about the fact that f is committed to in the contract, I'll take the chance to extend on this a bit with a fun construction on top.\n>> It is well-known in the academic literature of state channels that you can create contracts where even the function (\"program\", or \"contract\") is not decided when the channel is created.\n>>\n>> Since f is generic, we can choose f itself to be a universal Turing machine. That is, we can imagine a function f(code, data) that executes a program (\"code\") on the \"data\" given to it as input.\n>> Since we can do fraud proofs on statements \"f(code, data) == output\", we could build contracts where the \"code\" itself is chosen later.\n>>\n>> For example, one could build a universal state channel, where parties can enter any contract among themselves (e.g.: start playing a chess game) entirely inside the channel. The state of this universal channel would contain all the states of the individual contracts that are currently open in the channel, and even starting/closing contracts can happen entirely off-chain.\n>>\n>> I believe these constructions are practical (the code of universal Turing machines is not really complicated), so it might be worth exploring further to figure out useful applications of this approach (supercharging lightning?).\n>>\n>> We should probably start by implementing testnet rock-paper-scissors in MATT, though :)\n>>\n>> Best,\n>> Salvatore Ingala\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            }
        ],
        "thread_summary": {
            "title": "Merkleize All The Things",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Johan Tor\u00e5s Halseth"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6391
        }
    },
    {
        "title": "[bitcoin-dev] On adaptor security (in protocols)",
        "thread_messages": [
            {
                "author": "AdamISZ",
                "date": "2023-04-28T18:13:03",
                "message_text_only": "Hi list,\nI was motivated to look more carefully at the question of the security of using signature adaptors after recently getting quite enthused about the idea of using adaptors across N signing sessions to do a kind of multiparty swap. But of course security analysis is also much more important for the base case of 2 party swapping, which is of .. some considerable practical importance :)\n\nThere is work (referenced in Section 3 here) that's pretty substantial on \"how secure are adaptors\" (think in terms of security reductions) already from I guess the 2019-2021 period. But I wanted to get into scenarios of multiple adaptors at once or multiple signing sessions at once with the *same* adaptor (as mentioned above, probably this is the most important scenario).\n\nTo be clear this is the work of an amateur and is currently unreviewed - hence (a) me posting it here and (b) putting the paper on github so people can easily add specific corrections or comments if they like:\n\nhttps://github.com/AdamISZ/AdaptorSecurityDoc/blob/main/adaptorsecurity.pdf\n\nI'll note that I did the analysis only around MuSig, not MuSig2.\n\nThe penultimate (\"third case\"), that as mentioned, of \"multiple signing sessions, same adaptor\" proved to be the most interesting: in trying to reduce this to ECDLP I found an issue around sequencing. It may just be irrelevant but I'd be curious to hear what others think about that.\n\nIf nothing else, I'd be very interested to hear what experts in the field have to say about security reductions for this primitive in the case of multiple concurrent signing sessions (which of course has been analyzed very carefully already for base MuSig(2)).\n\nCheers,\nAdamISZ/waxwing\n\n\n\n\nSent with Proton Mail secure email."
            }
        ],
        "thread_summary": {
            "title": "On adaptor security (in protocols)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "AdamISZ"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1736
        }
    }
]