[
    {
        "title": "[Bitcoin-development] test (ignore)",
        "thread_messages": [
            {
                "author": "Stephen Pair",
                "date": "2012-12-01T18:55:24",
                "message_text_only": "Test post.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121201/786bea4f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "test (ignore)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Stephen Pair"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 193
        }
    },
    {
        "title": "[Bitcoin-development] Payment Protocol Proposal: Invoices/Payments/Receipts",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2012-12-01T19:25:17",
                "message_text_only": "Spec updated: https://gist.github.com/4120476\n\nChanges are:\n\nVersion numbers:  a couple of people asked privately about adding\nversion numbers to the messages. In general, Protocol Buffers don't\nneed version numbers if later versions add only optional fields.\n\nAnd best-practice is to know what version of something you're\nexpecting BEFORE you start parsing that something.\n\nSo, if a bitcoin client is getting Invoice messages via email or from\na web server, the version will be specified as part of the MIME type;\nfor example:\n   Content-Type: application/x-bitcoin-invoice; version=1\nThe version= syntax is part of the MIME standard.\n\nFollowing that best-practice of knowing what you're parsing before you\nparse it, I added an invoice_version field to the SignedInvoice\nmessage. It is now:\n\nmessage SignedInvoice {\n    required bytes pki_data = 1;\n    required string pki_type = 2 [default = \"x509\"];\n    required bytes serialized_invoice = 3;\n    required uint32 invoice_version = 4 [default = 1];\n    required bytes signature = 5;\n}\n\n\nHandling of receiptURI errors:\n\nFollowing discussion here, I changed the spec to say:\n\n\"Clients may handle errors communicating with the receiptURI server\nhowever they like, but should assume that if they cannot communicate\nat all with the server then the Payment should either be retried later\nor immediately rejected.\"\n\nand under Receipt added:\n\n\"The Bitcoin client must be prepared to handle the case of an evil\nmerchant that returns accepted=false but broadcasts the transactions\nanyway.\"\n\n\nI also added a TODO \"Test Vectors\" section with base64-encoded\nexamples of everything.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Mike Koss",
                "date": "2012-12-03T19:35:13",
                "message_text_only": "The thing that bugged me most about the original spec was the sole reliance\non X.509 - glad to see you've made that optional.  I think many people will\nbalk at deferring our identity trust to the existing CA's.  I think it's a\nfine bootstrap method, but I'd really like to see another option that\nallows for out-of-band trust (based on ECDSA, probably).\n\nIt would also be really nice to migrate to textual representations of data\nstructures as opposed to binary ones.  The most successful internet\nstandards are based on text, making them that much more accessible for\ndevelopers to deal with them.   JSON would be my preferred candidate.\n\nWhy don't we sign the text representation of a (utf8) JSON, rather than\nsome complex encoding standard of JSON?  That way the signatures are simple\n- and you need only retain the original textual representation of a message\nto validate the signature (as well as the decoded version, if you don't\nwant to alway re-parse the message when writing programs that use it).\n\nOn Sat, Dec 1, 2012 at 11:25 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Spec updated: https://gist.github.com/4120476\n>\n> Changes are:\n>\n> Version numbers:  a couple of people asked privately about adding\n> version numbers to the messages. In general, Protocol Buffers don't\n> need version numbers if later versions add only optional fields.\n>\n> And best-practice is to know what version of something you're\n> expecting BEFORE you start parsing that something.\n>\n> So, if a bitcoin client is getting Invoice messages via email or from\n> a web server, the version will be specified as part of the MIME type;\n> for example:\n>    Content-Type: application/x-bitcoin-invoice; version=1\n> The version= syntax is part of the MIME standard.\n>\n> Following that best-practice of knowing what you're parsing before you\n> parse it, I added an invoice_version field to the SignedInvoice\n> message. It is now:\n>\n> message SignedInvoice {\n>     required bytes pki_data = 1;\n>     required string pki_type = 2 [default = \"x509\"];\n>     required bytes serialized_invoice = 3;\n>     required uint32 invoice_version = 4 [default = 1];\n>     required bytes signature = 5;\n> }\n>\n>\n> Handling of receiptURI errors:\n>\n> Following discussion here, I changed the spec to say:\n>\n> \"Clients may handle errors communicating with the receiptURI server\n> however they like, but should assume that if they cannot communicate\n> at all with the server then the Payment should either be retried later\n> or immediately rejected.\"\n>\n> and under Receipt added:\n>\n> \"The Bitcoin client must be prepared to handle the case of an evil\n> merchant that returns accepted=false but broadcasts the transactions\n> anyway.\"\n>\n>\n> I also added a TODO \"Test Vectors\" section with base64-encoded\n> examples of everything.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Keep yourself connected to Go Parallel:\n> INSIGHTS What's next for parallel hardware, programming and related areas?\n> Interviews and blogs by thought leaders keep you ahead of the curve.\n> http://goparallel.sourceforge.net\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nMike Koss\nCTO, CoinLab\n(425) 246-7701 (m)\n\nA Bitcoin Primer <http://coinlab.com/a-bitcoin-primer.pdf> - What you need\nto know about Bitcoins.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/62146299/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-12-03T20:59:16",
                "message_text_only": "On Mon, Dec 3, 2012 at 2:35 PM, Mike Koss <mike at coinlab.com> wrote:\n> Why don't we sign the text representation of a (utf8) JSON, rather than some\n> complex encoding standard of JSON?\n\nBecause the results from standard JSON parsers are undefined if I give\nyou an \"envelope\" JSON that has repeated keys.\n\nFor example:\n\n{\n  \"pki_data\" : \"...hex-or-base64-encoded certificate chain...\",\n  \"signature\" : \"....hex-or-base64-encoded-signature-bytes\",\n  \"message\" : \"....string-encoded-utf8-JSON\",\n  \"message\" : \"....another string-encoded-utf8-JSON\",\n  \"signature\" : \"....more hex-or-base64-encoded-signature-bytes\",\n  \"pki_data\" : \"...another certificate chain...\",\n}\n\nThe JSON spec doesn't say what you'll get when you decode that mess.\nMaybe the first instance of each field, maybe the last, maybe one\npicked at random...\n\nThe JOSE (Javascript Signing and Encryption) spec says \"Thou Shalt Use\nA JSON Parser That Treats Multi-defined-keys As An Error.\"\n\nI expect that most developers will be lazy and will just use whatever\nJSON parser is convenient, no matter how much the spec/documentation\nwarns them not to. And that makes me nervous, because I can imagine\nattackers taking advantage of mismatches between (say) the JSON\nparsing software used by some back-end server process and a front-end\nJavaScript web wallet UI.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-03T21:28:13",
                "message_text_only": "> It would also be really nice to migrate to textual representations of data\n> structures as opposed to binary ones.  The most successful internet\n> standards are based on text.\n\nThere are lots of successful binary protocols: TCP, IP, PNG, JPEG,\nMP3, DNS, SSH, SSL, the Bitcoin protocol itself. What's more some\nother protocols that are text based have suffered serious problems due\nto that choice. Witness the absurd design of SMTP that means you can't\nstart a paragraph with the word From because that's a new-message\nmarker! Or the fact that file attachments grow by 33% when you send\nthem. Or the various exploits that can exist in web servers thanks to\nheader splitting attacks.\n\nTrying to represent something binary as text doesn't make any sense.\nIf you look at these data structures they consist of keys, signatures,\nhashes, certificates and other fundamentally binary things. You'd just\nend up base64 encoding everything anyway, at which point all you've\ndone is design an inefficient binary protocol that masquerades as\ntext. The disadvantages of both with the advantages of neither.\n\nProtocol buffers have a text form that you can print to and parse\nfrom, if you so wish, though I only normally see people use that\nsupport for debug prints and sometimes because they want to load\nhand-written config files directly into protobuf generated objects."
            },
            {
                "author": "Roy Badami",
                "date": "2012-12-03T22:26:29",
                "message_text_only": "On Mon, Dec 03, 2012 at 10:28:13PM +0100, Mike Hearn wrote:\n> Witness the absurd design of SMTP that means you can't\n> start a paragraph with the word From because that's a new-message\n> marker!\n\nActually that has absolutely nothing to do with SMTP.  It's down to\nthe file format of the standard BSD UNIX mailbox (which uses lines\nbeginning with 'From ' to delimit messages).\n\nroy"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-12-03T22:34:12",
                "message_text_only": "On Mon, Dec 3, 2012 at 5:26 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n> On Mon, Dec 03, 2012 at 10:28:13PM +0100, Mike Hearn wrote:\n>> Witness the absurd design of SMTP that means you can't\n>> start a paragraph with the word From because that's a new-message\n>> marker!\n>\n> Actually that has absolutely nothing to do with SMTP.  It's down to\n> the file format of the standard BSD UNIX mailbox (which uses lines\n> beginning with 'From ' to delimit messages).\n\nHis point (pun intended) stands.  SMTP uses \".\" terminator, which also\ncauses annoying confusion.\n\nYou shouldn't need to escape and unescape data that is not being\ninterpreted in any way.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2012-12-16T21:15:40",
                "message_text_only": "On 3 December 2012 20:35, Mike Koss <mike at coinlab.com> wrote:\n\n> The thing that bugged me most about the original spec was the sole\n> reliance on X.509 - glad to see you've made that optional.  I think many\n> people will balk at deferring our identity trust to the existing CA's.  I\n> think it's a fine bootstrap method, but I'd really like to see another\n> option that allows for out-of-band trust (based on ECDSA, probably).\n>\n> It would also be really nice to migrate to textual representations of data\n> structures as opposed to binary ones.  The most successful internet\n> standards are based on text, making them that much more accessible for\n> developers to deal with them.   JSON would be my preferred candidate.\n>\n> Why don't we sign the text representation of a (utf8) JSON, rather than\n> some complex encoding standard of JSON?  That way the signatures are simple\n> - and you need only retain the original textual representation of a message\n> to validate the signature (as well as the decoded version, if you don't\n> want to alway re-parse the message when writing programs that use it).\n>\n\nBinary formats can be challenging to deal with and convert to other\nformats.  The experiences in the PKI world of ASN.1 have not been great, in\nterms of interop.  It tends to create islands and silos.  This is probably\none of the reasons why X.509 and GPG are fragmented and why we dont really\nhave a widely deployed web of trust on the net.  Another reason is simply\nlack of developer resources to make tools.  In that respect I think JSON\noffers significant advantages, though I am interested in the security\nissues raised.\n\n\n>\n> On Sat, Dec 1, 2012 at 11:25 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n>\n>> Spec updated: https://gist.github.com/4120476\n>>\n>> Changes are:\n>>\n>> Version numbers:  a couple of people asked privately about adding\n>> version numbers to the messages. In general, Protocol Buffers don't\n>> need version numbers if later versions add only optional fields.\n>>\n>> And best-practice is to know what version of something you're\n>> expecting BEFORE you start parsing that something.\n>>\n>> So, if a bitcoin client is getting Invoice messages via email or from\n>> a web server, the version will be specified as part of the MIME type;\n>> for example:\n>>    Content-Type: application/x-bitcoin-invoice; version=1\n>> The version= syntax is part of the MIME standard.\n>>\n>> Following that best-practice of knowing what you're parsing before you\n>> parse it, I added an invoice_version field to the SignedInvoice\n>> message. It is now:\n>>\n>> message SignedInvoice {\n>>     required bytes pki_data = 1;\n>>     required string pki_type = 2 [default = \"x509\"];\n>>     required bytes serialized_invoice = 3;\n>>     required uint32 invoice_version = 4 [default = 1];\n>>     required bytes signature = 5;\n>> }\n>>\n>>\n>> Handling of receiptURI errors:\n>>\n>> Following discussion here, I changed the spec to say:\n>>\n>> \"Clients may handle errors communicating with the receiptURI server\n>> however they like, but should assume that if they cannot communicate\n>> at all with the server then the Payment should either be retried later\n>> or immediately rejected.\"\n>>\n>> and under Receipt added:\n>>\n>> \"The Bitcoin client must be prepared to handle the case of an evil\n>> merchant that returns accepted=false but broadcasts the transactions\n>> anyway.\"\n>>\n>>\n>> I also added a TODO \"Test Vectors\" section with base64-encoded\n>> examples of everything.\n>>\n>> --\n>> --\n>> Gavin Andresen\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Keep yourself connected to Go Parallel:\n>> INSIGHTS What's next for parallel hardware, programming and related areas?\n>> Interviews and blogs by thought leaders keep you ahead of the curve.\n>> http://goparallel.sourceforge.net\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> --\n> Mike Koss\n> CTO, CoinLab\n> (425) 246-7701 (m)\n>\n> A Bitcoin Primer <http://coinlab.com/a-bitcoin-primer.pdf> - What you\n> need to know about Bitcoins.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Keep yourself connected to Go Parallel:\n> BUILD Helping you discover the best ways to construct your parallel\n> projects.\n> http://goparallel.sourceforge.net\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121216/5f8092c5/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2012-12-17T02:18:54",
                "message_text_only": "On Sun, Dec 16, 2012 at 4:15 PM, Melvin Carvalho\n<melvincarvalho at gmail.com> wrote:\n> On 3 December 2012 20:35, Mike Koss <mike at coinlab.com> wrote:\n>> It would also be really nice to migrate to textual representations of data\n>> structures as opposed to binary ones.  The most successful internet\n>> standards are based on text, making them that much more accessible for\n>> developers to deal with them.   JSON would be my preferred candidate.\n>>\n>> Why don't we sign the text representation of a (utf8) JSON, rather than\n>> some complex encoding standard of JSON?  That way the signatures are simple\n>> - and you need only retain the original textual representation of a message\n>> to validate the signature (as well as the decoded version, if you don't want\n>> to alway re-parse the message when writing programs that use it).\n\n> Binary formats can be challenging to deal with and convert to other formats.\n> The experiences in the PKI world of ASN.1 have not been great, in terms of\n> interop.  It tends to create islands and silos.  This is probably one of the\n> reasons why X.509 and GPG are fragmented and why we dont really have a\n> widely deployed web of trust on the net.  Another reason is simply lack of\n> developer resources to make tools.  In that respect I think JSON offers\n> significant advantages, though I am interested in the security issues\n> raised.\n\nI thought this had already been covered up-thread?\n\nWhen creating something that must be hashed and/or compared, the data\nstructure must be created and reproduced precisely, byte-for-byte.\nJSON offers significant -disadvantages- in this regard.  With JSON,\nyou would therefore require an additional middle layer, between JSON\nand application, ensuring that all fields are output in the same\norder, all whitespace is not only perfectly preserved -- but reliably\ngenerates identical whitespace output for identical inputs, given two\nseparate JSON implementations.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2012-12-17T08:24:19",
                "message_text_only": "On 17 December 2012 03:18, Jeff Garzik <jgarzik at exmulti.com> wrote:\n\n> On Sun, Dec 16, 2012 at 4:15 PM, Melvin Carvalho\n> <melvincarvalho at gmail.com> wrote:\n> > On 3 December 2012 20:35, Mike Koss <mike at coinlab.com> wrote:\n> >> It would also be really nice to migrate to textual representations of\n> data\n> >> structures as opposed to binary ones.  The most successful internet\n> >> standards are based on text, making them that much more accessible for\n> >> developers to deal with them.   JSON would be my preferred candidate.\n> >>\n> >> Why don't we sign the text representation of a (utf8) JSON, rather than\n> >> some complex encoding standard of JSON?  That way the signatures are\n> simple\n> >> - and you need only retain the original textual representation of a\n> message\n> >> to validate the signature (as well as the decoded version, if you don't\n> want\n> >> to alway re-parse the message when writing programs that use it).\n>\n> > Binary formats can be challenging to deal with and convert to other\n> formats.\n> > The experiences in the PKI world of ASN.1 have not been great, in terms\n> of\n> > interop.  It tends to create islands and silos.  This is probably one of\n> the\n> > reasons why X.509 and GPG are fragmented and why we dont really have a\n> > widely deployed web of trust on the net.  Another reason is simply lack\n> of\n> > developer resources to make tools.  In that respect I think JSON offers\n> > significant advantages, though I am interested in the security issues\n> > raised.\n>\n> I thought this had already been covered up-thread?\n>\n> When creating something that must be hashed and/or compared, the data\n> structure must be created and reproduced precisely, byte-for-byte.\n> JSON offers significant -disadvantages- in this regard.  With JSON,\n> you would therefore require an additional middle layer, between JSON\n> and application, ensuring that all fields are output in the same\n> order, all whitespace is not only perfectly preserved -- but reliably\n> generates identical whitespace output for identical inputs, given two\n> separate JSON implementations.\n>\n\nApologies if I am a bit late to the thread.  I bumped into someone that\nsuggested I take a look at it.  Will try and catch up!\n\nYou raise a good point.\n\nIs there no good canonicalization algorithm / library for JSON?\n\nI think that provided that each JSON object has an identifier,\ncanonicalization of JSON is not that hard.\n\nThen when you hash or sign the canonical form they can be compared reliably.\n\n\n>\n> --\n> Jeff Garzik\n> exMULTI, Inc.\n> jgarzik at exmulti.com\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121217/7cc6ab2d/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-17T09:19:19",
                "message_text_only": "Can we please drop the binary vs text issue? We have been around it\nmillions of times already. There are no compelling arguments to use\ntext here and several obvious problems with it. If you think you've\nfound a good argument to use JSON, please research protocol buffers\nmore thoroughly and see if it changes your mind."
            },
            {
                "author": "Gary Rowe",
                "date": "2012-12-17T09:31:38",
                "message_text_only": "I've been following this thread closely, and Mike is correct here -\nprotocol buffers is definitely the way to go.\n\n\nOn 17 December 2012 09:19, Mike Hearn <mike at plan99.net> wrote:\n\n> Can we please drop the binary vs text issue? We have been around it\n> millions of times already. There are no compelling arguments to use\n> text here and several obvious problems with it. If you think you've\n> found a good argument to use JSON, please research protocol buffers\n> more thoroughly and see if it changes your mind.\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121217/ac1042fa/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2012-12-17T11:23:37",
                "message_text_only": "On 17 December 2012 10:19, Mike Hearn <mike at plan99.net> wrote:\n\n> Can we please drop the binary vs text issue? We have been around it\n> millions of times already. There are no compelling arguments to use\n> text here and several obvious problems with it. If you think you've\n> found a good argument to use JSON, please research protocol buffers\n> more thoroughly and see if it changes your mind.\n>\n\nHi Mike, thanks you for the pointer.  I have read up on Protocol Buffers.\n\nIf the decision has already been made, then let's go with that, but if not\nperhaps I can offer some comments.\n\nLooking at:\n\nhttp://en.wikipedia.org/wiki/Comparison_of_data_serialization_formats\n\nAnd -- \"Canonically, Protocol Buffers are serialized into a binary wire\nformat which is compact, forwards-compatible, backwards-compatible, but not\nself-describing\"\n\nI can see there are advantages in this approach in that you can send\nmessages quickly and with low bandwidth.  However the non self describing\ndata means that it's significantly harder to convert from one format to\nanother.  Also references are important, and can be achieved in JSON.\n\nYet in my opinion there is great advantage to growing the bitcoin ecosystem\nto interoperate with the whole net, kind of creating a complete web\neconomy.  The way to do this is to foster interoperability.  Having looked\nat and worked with standards for the past 5-10 years that is the great\nchallenge.  Every system works in an island, and few talk to any others.\nHowever, a market based economy grows exponentially more valuable with\nextra liquidity.\n\nInventing yet another format may lead to balkanization.  If history is a\njudge, the chances are high.  A self describing JSON format, however is\nmuch more likely to interop.\n\nI can understand the hesitation with JOSE.  However, if you get a moment,\nplease look at :\n\nhttp://payswarm.com/specs/source/web-keys/\n\nThis should provide some of the tools that you need.\n\nAs I said above, if the matter is closed, that's fine and thanks for taking\nthe time to read.\n\nCan I at least propose to make it mandatory for the binary format to have a\ntranslation script to a self describing JSON format and back again.  I\nwould love to see the bitcoin ecosystem become a major part of the\ninfrastructure of the web itself (leading to even nice things like a proper\nweb of trust), as well as an awesome P2P system in its own right.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121217/8d6b697e/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-12-17T17:57:53",
                "message_text_only": "On Mon, Dec 17, 2012 at 6:23 AM, Melvin Carvalho\n<melvincarvalho at gmail.com>wrote:\n\n> If the decision has already been made, then let's go with that\n>\n>\nThe decision has already been made.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121217/d624c7e7/attachment.html>"
            },
            {
                "author": "Stephen Pair",
                "date": "2012-12-20T16:53:22",
                "message_text_only": "Here are my (mostly half baked) thoughts on the payments protocol proposal.\n\nMy first observation is that the proposal is too heavily oriented around a\nmerchant/customer interaction.  I think it's equally important to consider\nthe person to person scenarios.  It would be very cool if people could\nsend/receive payments by copying and pasting stuff on facebook or email\n(you can kind of do it now, but it's not safe unless you go to\nextraordinary lengths using PGP signatures and the like).\n\nProtobufs vs JSON: Protobufs are fine, although I will mention that the\nserialization/JOSE arguments are irrelevant...you only need that if you\nneed a reliable way of signing an in memory object structure...in this case\nyou would be signing a serialized form of the object...the recipient\ndoesn't have to be able to reproduce the serialized form, they only need to\nverify the signature on the already serialized bytes...I see protobufs as a\ngood serialization format for storage, while JSON being more practical for\ncommunications in a web oriented environment...with protobufs & a web\nwallet, you may find yourself in a situation needing to parse a protobuf\nmessage in a web browser...the protobuf parsing and serializing code is\njust going to add bloat to the web page...personally, I probably would have\ngone with JSON, but hey, I'm not writing the code.\n\nX.509 - nasty, but maybe ok ...as long as you can add root CAs to your\nBitcoin client or explicitly trust a certificate, I don't see that it poses\nany privacy issues...but there are some other things to think about here\n...like what about the casual user that wants to create a payment request\nto send to their friend over email (wrapped in a clear text block similar\nto PGP...it could also be sent as a file attachment)?  Are you now\nrequiring them to go and setup a certificate?  Btw, I really like the use\nof a payment request in this manner because you have a signed payment\nrequest that can be verified against an address book of known identities.\n This could be much safer than simply emailing an unsigned bitcoin address\naround.\n\nRefund addresses...this is not going to be as useful as people might\nthink...most refunds that bitpay needs to process happen days or even\nmonths after the initial purchase...in that span of time, people can change\nwallets, rendering such a refund address useless...so, as I think about the\nsituation, we would still need to contact the buyer to confirm a refund\naddress anyway.  What we really need is to verify the identity of the\nperson we're potentially sending the refund to...we need a way of\ndetermining that the person we're sending the refund to is the same person\nthat paid the original invoice.  Bitcoin addresses are identities, but they\nare too low level.  HD wallets come to mind...the top level or intermediate\nlevels of a deterministic hierarchy could be used for identity\npurposes...but it also seems like it might be conflating payments and\nidentity (which for many reasons you might want to keep separate).  What if\nbitcoin clients could manage one or more identities used for the purpose of\ncommunications?  You could have a bitcoin identity file that could be used\nby multiple wallets.  These identities would be used for signing messages\nand verifying the authenticity of communications...when sending a payment,\ninstead of a refund address, you would include one of these identities\nwhich could later be used to confirm a refund address.  In fact, the refund\nwould be processed by the buyer generating another payment request message\nsigned by the identity used in the original payment.\n\nPeople would understand that their identities are important for\ncommunications and they would keep those even when changing to new wallets\nand such (identities could be stored in ~/.bitcoin/id or something\n(encrypted of course)).\n\nThere are some other interesting possibilities if messaging and identities\nare done right...for example, I could add \"check\" feature (analogous to\npaper checks).  It would work like this...you create a transaction that\nspends to a newly generated address...you put that transaction, along with\nthe private key into an encrypted container (sent to the identity of the\nperson you want to pay).  The recipient can open it and their wallet would\ngo ahead and generate and broadcast a transaction moving the funds into\ntheir wallet (optionally including a fee).  But, if the recipient never\ncashes the check, the sender could pull those funds back after a certain\nperiod of time.  This also eliminates the possibility of accidentally\nsending the funds to the wrong address (or an old address) and the bitcoins\nbeing forever lost...the recipient can sweep the transaction into any\nwallet of their choice.\n\nAs I'm writing this, I'm beginning to wonder if the identity management\nproblem is unavoidable.  Maybe that needs to be dealt with first.  It would\nenable so many other interesting possibilities.\n\nI like the use of merchant_data...this means that you no longer will need a\nunique bitcoin address for every invoice.\n\nIn the signed invoice structure, why embed the serialized invoice?  Why not\nmake that a reference using a hash?  Generally speaking, I'm not a fan of\nembedding things like that.  You could have an over-arching structure\ncalled Message which is just \"repeated bytes objects\" (in protobuf lingo)\n...references between objects would use a hash and the first object would\nbe treated as the message.  In a payment request message, the\nSignedPaymentRequest would be the first object, the PaymentRequest the\nsecond.\n\nI think the Payment structure should refer to the SignedPaymentRequest (by\nits hash) instead of the merchant_data...you can of course access the\nmerchant_data through the SignedPaymentRequest.  I suppose you could always\nindex payment requests based on the merchant_data, but it just seems\ncleaner to refer back the the signed payment request when sending a payment.\n\nYou might want to include an optional memo for each output...I could\nimagine including one output that says \"Don't forget to tip your\nwaiter\"...any amount sent to that address could go directly to the waiter's\nwallet.\n\nWhat about payments from multiple wallets?  We see this a lot.  I think\nthis scheme would handle it ok, but just want to mention it.  I can imagine\nsomeone paying first from one wallet, then the invoice webpage updates with\na clickable link to a new PaymentRequest for the remaining amount.\n\nThe Receipt should be signed...it could be used as proof of payment by\nwallets.\n\nFinally, I've seen seen suggestions to tack on a payment request URI to the\ncurrent bitcoin: URI for backward compatibility...I say no.  A bitcoin URI\nalready has a lot of data (especially if it includes a memo)...this makes\nQR codes more dense and hence more difficult to scan...I say we stake a\nclaim on the \"pay\" URI .... pay:https://somewhere.com/payment/94kd83  ...or\nfor a clickable link, you could embed it right on the web page, eliminating\nthe need for a second https request... pay:data:<PaymentRequestMessage>\n ...and finally, to further shorten the URI, https could be assumed if the\nprotocol is omitted ... pay:somewhere.com/payment/94kd83\n\nWe can deal with backward compatibility by including a link on invoices to\ndisplay an old style bitcoin payment address.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121220/0cc1e450/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-20T17:43:34",
                "message_text_only": "Thanks for the thoughts. For those who don't know, Stephen works for BitPay.\n\n> My first observation is that the proposal is too heavily oriented around a\n> merchant/customer interaction.\n\nThe term \"merchant\" is just being used to mean the entity requesting\nthe payment. I'm hopeful that in future mobile wallets will be\ncreating these messages where today they'd make URLs and QRcodes. So\nit's definitely intended for person to person payments too.\n\n> you may find yourself in a situation needing to parse a protobuf\n> message in a web browser\n\nNothing stops you converting them into whatever form you want on the\nserver side. If you don't care about the signature checking then it's\nno problem to use a server. If you do then you'd need to ship all the\ncode for verifying signatures that to the client anyway, at which\npoint a small protobuf parser is hardly a deal killer.\n\n> ...like what about the casual user that wants to create a payment request to\n> send to their friend over email\n\nThey can send an unsigned payment request. Note that if you mail it as\nan attachment from a competent, up to date email provider then the\nattachment isn't really unsigned. The whole thing is covered by the\nemails DKIM signature which is applied transparently by the ESP. If\nthe signature fails to verify then the mail client can show that or\ntreat the mail differently (as Gmail does). This is easy to use for\nthe end user - they don't have to think about cryptography or PKI. As\nlong as their email account is secure then they can send signed mails\nasserting to their identity.\n\n> Refund addresses...this is not going to be as useful as people might\n> think...most refunds that bitpay needs to process happen days or even months\n> after the initial purchase\n\nUseful feedback, thanks. Still, there may be other types of merchants\nfor whom it's useful, and many users won't change their wallet. It\ncertainly simplifies things if you can present the refund address and\ngive a one-click option to use it. If the user wants to use a\ndifferent address, then they can go onto the slow/complicated path.\n\nThis current spec deliberately punts on the topic of identifying end\nusers. It's a difficult problem. Whereas many merchants have SSL\ncerts, most end users don't have published keys in any useful form. By\nfar the easiest way for 99% of people to generate a signed message is\nto send email that's signed by DKIM (from gmail, hotmail, yahoo, other\nproviders etc). Then it's all transparent and behind the scenes. Their\nidentity is their email address.\n\nSo for BitPays scenario, you could require an email to be sent by the\nend user containing new instructions. Your MTA can show you whether\nthe mail is correctly DKIM signed or not when deciding whether to\nfollow the instructions.\n\n> But, if the recipient never cashes the check, the sender could pull those\n> funds back after a certain period of time.\n\nYeah, I like the term \"check\"/\"cheque\" for that concept of a reversible payment.\n\n> I like the use of merchant_data...this means that you no longer will need a\n> unique bitcoin address for every invoice.\n\nIt's still a good idea to use one for privacy reasons. The merchant\ndata is there so you can stuff whatever state you want into it. So\nit's like cookies. You don't have to keep state on the server side.\nJust encrypt/sign it, put it in the invoice, and when you get a\npayment message back there's no need to do database lookups or\nanything, you can just do some crypto and know who is submitting it.\n\n> Generally speaking, I'm not a fan of embedding things like that\n\nWhat's wrong with it? Isn't your proposal more complex? I don't see\nwhy it's better than just embedding it.\n\n> The Receipt should be signed...it could be used as proof of payment by\n> wallets.\n\nThere's no Receipt message, a SignedPaymentRequest + transactions that\npay to the requested outputs are together the proof of payment.\n\nRe a new URI scheme. Interesting idea, thanks for the suggestion. It\nseemed like it'd be easier for merchants to integrate if a single\nlinked worked for all wallet implementations/versions. But I guess we\ncould do both schemes, even."
            },
            {
                "author": "Stephen Pair",
                "date": "2012-12-20T19:32:46",
                "message_text_only": "On Thu, Dec 20, 2012 at 12:43 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> > you may find yourself in a situation needing to parse a protobuf\n> > message in a web browser\n> Nothing stops you converting them into whatever form you want on the\n> server side. If you don't care about the signature checking then it's\n> no problem to use a server. If you do then you'd need to ship all the\n> code for verifying signatures that to the client anyway, at which\n> point a small protobuf parser is hardly a deal killer.\n\n\nNo, it's not a killer...just a hassle.  JSON is convenient and ubiquitous\nand there is something to be said for that (and I wanted to point out that\nthe JOSE objection was invalid).  Protobufs are nice and efficient, but who\ncares.  You're talking about direct communications rather than something\nthat will be bounced around every node in the mesh network.  I don't really\ncare much either way, it's not worth debating.  I'm just thankful no one is\narguing for XML or IIOP.  :)\n\n> ...like what about the casual user that wants to create a payment request\n> to\n> > send to their friend over email\n>\n> They can send an unsigned payment request. Note that if you mail it as\n> an attachment from a competent, up to date email provider then the\n> attachment isn't really unsigned. The whole thing is covered by the\n> emails DKIM signature which is applied transparently by the ESP. If\n> the signature fails to verify then the mail client can show that or\n> treat the mail differently (as Gmail does). This is easy to use for\n> the end user - they don't have to think about cryptography or PKI. As\n> long as their email account is secure then they can send signed mails\n> asserting to their identity.\n>\n\nThis leaves too much to chance for my taste.  Forget email, what about\njabber, ICQ, skype, IRC?  Email is just one communications medium, there\nare many others for which there would be no assurance that the payment\nrequest hasn't been tampered with.  You could at a minimum allow a person\nto create a normal ECC key, but have it used as an identity in\ncommunications rather than a payment address.  You store it in a separate\nfile in ~/.bitcoin/id  ...you don't have to solve the whole set of PKI\nproblems, people could exchange identities using any secure channel they\nare comfortable with (email + phone verification of a short hash id would\nbe sufficient).  In another scenario, an id could be made available over\nhttps, using the normal SSL certificate and CA infrastructure to verify\nauthenticity.  This way all messages could be signed and/or encrypted\nwithout the user having to go out of their way to use external tools or\ninfrastructure that is often not very user friendly.  You also need\nencryption for the \"cheque\" feature...asking people to use GPG would be too\nmuch of a burden (and email DKIM doesn't offer encryption).\n\n>>> wandering off topic >>>\nIndeed, \"cheques\" could become the dominant method of person to person\npayments...first, you would obtain someone's id, which you might already\nhave on file (rather than obtaining a bitcoin address), then you would\ngenerate a \"cheque\" for the amount desired and send it to them...the\nrecipient then has full control over what address they want to sweep the\nfunds to as well as whether they'd like to include a miner fee to speed the\nconfirmation along. Despite the fact that you may send many payments to the\nsame identity, the only thing showing up on the p2p network and the block\nchain is the one time use address for the cheque and the recipient's wallet\naddress.  This means the recipient has much more control over the address\npolicy used (compared with simply giving out a bitcoin address that may be\nreused).\n<<<\n\n> Refund addresses...this is not going to be as useful as people might\n> > think...most refunds that bitpay needs to process happen days or even\n> months\n> > after the initial purchase\n>\n> Useful feedback, thanks. Still, there may be other types of merchants\n> for whom it's useful, and many users won't change their wallet. It\n> certainly simplifies things if you can present the refund address and\n> give a one-click option to use it. If the user wants to use a\n> different address, then they can go onto the slow/complicated path.\n>\n> This current spec deliberately punts on the topic of identifying end\n> users. It's a difficult problem.\n>\n\nI know, but as I was responding, I began to realize this is a mistake.\n It's worthwhile to tackle that problem first...if done right, it would pay\nhuge dividends.  Also, identity is one thing, an elaborate trust based\nidentity verification system (like CA's) is a whole other thing.  I think\nthe former is pretty simple actually...and it's all that's really needed\nfor the time being (as I alluded, a bitcoin identity could be communicated\nor verified using the existing X.509/CA infrastructure if desired...you\ncould also use the PGP infrastructure).\n\n\n> > I like the use of merchant_data...this means that you no longer will\n> need a\n> > unique bitcoin address for every invoice.\n>\n> It's still a good idea to use one for privacy reasons.\n\n\nActually, I was speaking more in terms of relying on the address to match\nup a transaction to an invoice.  The merchant_data field frees you from\nhaving to do that.\n\n\n> The merchant\n> data is there so you can stuff whatever state you want into it. So\n> it's like cookies. You don't have to keep state on the server side.\n> Just encrypt/sign it, put it in the invoice, and when you get a\n> payment message back there's no need to do database lookups or\n> anything, you can just do some crypto and know who is submitting it.\n>\n\nYeah, that's neat...I hadn't thought of that possibility.\n\n\n>  > Generally speaking, I'm not a fan of embedding things like that\n>\n> What's wrong with it? Isn't your proposal more complex? I don't see\n> why it's better than just embedding it.\n>\n\nIt's not a big deal, I just think a referential model is more general than\nembedding objects within each other.\n\n\n>  > The Receipt should be signed...it could be used as proof of payment by\n> > wallets.\n>\n> There's no Receipt message, a SignedPaymentRequest + transactions that\n> pay to the requested outputs are together the proof of payment.\n>\n\nAh, I see it was renamed PaymentACK...the point of signing a PaymentACK is\nthat while you could prove that you paid according to a PaymentRequest, a\nsigned PaymentACK is proof that the recipient acknowledged you have made\nthat payment.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121220/4ba9c584/attachment.html>"
            },
            {
                "author": "Stephen Pair",
                "date": "2012-12-21T17:05:21",
                "message_text_only": "The more I think about this topic, the more I think the first task at hand\nis to implement secure, private messaging...the nature of any messages\n(payment requests or otherwise) sent between wallets is such that it needs\nto be secured.  And the great thing is that it's easy to do and you don't\nneed to solve the PKI problem.  Have the wallet maintain one or more ECC\nkey pairs for the purposes of signing and encrypting messages.  Allow these\nto be shared between wallets, or exported/imported, etc.  You can punt on\nthe whole topic of verifying the others' public keys using PKI (I mean,\npeople use bitcoin addresses today without the use of any formal or\nexplicit PKI to verify them...people will make do without it for\ncommunications keys just fine...and they can always use PGP or other PKI if\nthey feel the need...most people would just pick up the phone to verify a\nfriend's public key)...this also doesn't preclude the use of X.509 for the\nmerchant/customer scenario...\n\nFor a payment protocol, you could do something like this: use https & ssl\ncertificates/CAs as one method of obtaining an ECC public key...pki_type\ncould be \"https\" and pki_bytes could be a url for the https location to\ndownload the ECC public key.  The software would reject (or warn) if the\nSSL certificate isn't considered valid by the normal CA validation process.\n The wallet would not necessarily need to permanently store ECC public keys\nobtained in this manner.  This approach doesn't require people to obtain\nnew certificates just for bitcoin.\n\nIn fact, there would be very little difference to the proposed payments\nprotocol if this approach were taken...instead of using X.509 directly for\nsigning and encrypting messages, you are using it for signing and\nencrypting the ECC public key exchange.  And this allows people that don't\nhave web servers or SSL certificates to exchange their ECC public keys by\nother means and be able to use this payment protocol as well as any others\nthat one could imagine.  So, I actually think this is a better way of\nkeeping PKI out of the scope of the proposal.\n\nPayment requests are just one kind of messaging between wallets.  I've also\nmentioned the \"cheques\" feature.  I'm sure there are many more\npossibilities.  Having a uniform method of securing messages sent between\nwallets (that doesn't depend on external tools) would be a great step\nforward IMO.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121221/3e689ad1/attachment.html>"
            },
            {
                "author": "Elden Tyrell",
                "date": "2012-12-24T00:38:09",
                "message_text_only": "On 2012-12-21 17:05:21 +0000, Stephen Pair said:\n> Also, identity is one thing, an elaborate trust based identity \n> verification system (like CA's) is a whole other thing.\n\nYour distinction between \"identity\" and \"trust-based identity\" is one \nof the most important insights to emerge from this thread.  Thank you \nfor pointing this out.\n\n> the first task at hand is to implement secure, private messaging... \n> it's easy to do and you don't need to solve the PKI problem."
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-04T17:06:05",
                "message_text_only": "> So, if a bitcoin client is getting Invoice messages via email or from\n> a web server, the version will be specified as part of the MIME type;\n> for example:\n>    Content-Type: application/x-bitcoin-invoice; version=1\n> The version= syntax is part of the MIME standard.\n\nI think that's OK. However, you should only be getting the version you\nexpect because when you request an invoice, your client should be\ntelling the merchant what protocol version you implement.\n\nDoes it make sense to have this spec not include the details of\nbootstrapping? It's not complicated - we extend the URI spec in a\nbackwards compatible way:\n\n   bitcoin:1AbCdEfG?value=10.0&label=Pay%20for%20Foo&invoice=https://merchant.com/inv/aB425az\n\nWhen a compatible client sees the invoice param, it ignores the rest\nof the URI and downloads the URL\nhttps://merchant.com/inv/aB425az?ver=1.0\n\nA server on merchant.com sees that the client expects a version 1.0\ninvoice and vends it. If ver=2.0 or whatever, it knows it can use 2.0\nfeatures. If extensions are supported, add new query params.\n\nWe should define a simple mechanism for extending the protocol now, so\npeople who want to make proprietary extensions don't conflict. The\nsimplest is to just say, if you want to add new fields to an Invoice\nmessage, please update a wiki page with the tag numbers you're going\nto use, and start from number X. Protobufs have a simple way to\nformalize this in the language:\n\n   https://developers.google.com/protocol-buffers/docs/proto#extensions\n\nmessage Invoice {\n  extensions 1000 to max;\n}\n\nThe point of this is to allow you to define new parts of the messages\nin separate .proto files. It's only a minor convenience but it means\nif you want to use, say, two extensions that weren't yet folded into\nthe main spec, you can more easily do so without having to do a manual\nmerge of the message definitions together.\n\nFor instance, if you wanted to extend the protocol to support\nspecification of recurring billing, you could make a file called\nrecurring-invoices.proto containing:\n\nmessage Recurrences {\n  required uint32 every_seconds = 1;\n  optional uint32 start_time = 2;\n}\n\nextend Invoice {\n  optional Recurrences recurrences = 1005;\n}\n\nthen you update the wiki page to claim tag number 1005 and apps can\neasily use your new features. If/when the feature gets standardized\nvia a BIP, the core .proto definition can be extended to include these\nmessages and the extensions can go away."
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-12-05T19:34:49",
                "message_text_only": "I've had some push-back on the names of the proposed messages-- e.g.\n\"Invoice\" in the accounting world means \"I've already given you a\nproduct or service, here is what you owe, payment terms, what forms of\npayment are accepted, etc.\"\n\nI think there might also be confusion about why we're defining our own\nInvoice when there are at least three or four other existing standard\nfor electronic invoices.\n\nSo unless there is strong objection I'm going to change the names of\nthe messages:\n\nInvoice -->  PaymentRequest\nPayment : ok as-is\nReceipt --> PaymentACK  (payment acknowledgement)\n\nOn Tue, Dec 4, 2012 at 12:06 PM, Mike Hearn <mike at plan99.net> wrote:\n> Does it make sense to have this spec not include the details of\n> bootstrapping? It's not complicated ....\n\nBIP 0001 says:  \"If in doubt, split your BIP into several well-focussed ones.\"\n\nI think it makes sense to keep the URI extension separate from the\nbinary message format.\n\n> We should define a simple mechanism for extending the protocol now...\n>\n> message Invoice {\n>   extensions 1000 to max;\n> }\n\nOk.\n\n-- \n--\nGavin Andresen"
            },
            {
                "author": "Andreas Petersson",
                "date": "2012-12-06T06:31:54",
                "message_text_only": "During/before the Payment Request there should be a method to exchange \nthe public keys to be able to generate a common multisig address.\nShould this be handled in a different protocol, or be included in this \nspec?\nOr is there a method for the customer to verify that the specified BIP16 \nOutput contains his address and the one from an escrow service?\n\n--\nAndreas"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-06T08:53:51",
                "message_text_only": "Escrow/multisig is complicated enough to wait for another day. But\ncertainly having a payment protocol is an important step towards it\nOn 6 Dec 2012 07:32, \"Andreas Petersson\" <andreas at petersson.at> wrote:\n\n> During/before the Payment Request there should be a method to exchange\n> the public keys to be able to generate a common multisig address.\n> Should this be handled in a different protocol, or be included in this\n> spec?\n> Or is there a method for the customer to verify that the specified BIP16\n> Output contains his address and the one from an escrow service?\n>\n> --\n> Andreas\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121206/b9f464f6/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-12-06T16:56:49",
                "message_text_only": "Spec updated yet again:\n  https://gist.github.com/4120476\n\nRenamed to PaymentRequest/PaymentACK.\n\nAdded a 'network' field (\"main\" or \"test\") to PaymentRequest so testnet and\nmain network (and alterna-chain) payment requests don't get confused.\n\nUpdated description of PaymentRequest.outputs:\n\noutputs: one or more outputs where Bitcoins are to be sent. If the sum of\noutputs.amount is zero, the customer will be asked how much to pay, and the\nbitcoin client may choose any or all of the Outputs (if there are more than\none) for payment. If the sum of outputs.amount is non-zero, then the\ncustomer will be asked to pay the sum, and the payment shall be split among\nthe Outputs with non-zero amounts (if there are more than one; Outputs with\nzero amounts shall be ignored).\n-------------\n\nRE: escrow/multisig:\n\nSetting up a multi-person escrow will, I think, need it's own set of\nmessages. I think we should leave that for a future spec.\n\nThumbnail sketch:  escrow service or participant sends around an\nEscrowProposal, gets EscrowProposalACK's with public keys to use, then\nsends all participants an EscrowEstablished message with the final multisig\nscript or address.  Escrow gets funded by any/all of the participants, and\nthen gets spent using the SignedPaymentRequest/Payment/PaymentACK\nprotocol-- participants will pass around a SignedPaymentRequest and a\npartially-signed Payment message for all to approve.\n\nWhen I say \"pass around\" I'm not thinking of users copying and pasting,\nthat would be a terrible user experience; all of that communication needs\nto happen automatically behind the scenes. Lets tackle that after we've got\nthe simpler customer-pays-merchant flow working nicely\n(funded-escrow-pays-merchant is a subset of that, anyway).\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121206/3313a024/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-06T17:55:46",
                "message_text_only": "Re: the newest spec. Rather than make the signature over the\n\"concatenation of\", why not just make it a signature over the\nserialized protobuf minus the signature field (as I did in my demo\ncode). Otherwise it seems like we'd need more code than really\nnecessary. We can state explicitly tags must be ordered if you want,\neven though all implementations should do that already.\n\n> Thumbnail sketch:  escrow service or participant sends around an\n> EscrowProposal, gets EscrowProposalACK's with public keys to use, then sends\n> all participants an EscrowEstablished message with the final multisig script\n> or address.\n\nYeah, that sounds reasonable. Not that we should really design it now,\nbut let's use the term \"mediation\" rather than \"escrow\", which has\nconnotations of depositing funds with the escrow service.\n\nI think it's best to see the existing payment messages as structures\nthat'll get filled out with more features over time. So rather than\nhave a separate EscrowProposal message, you would integrate it with\npayment requests. Older clients that don't understand mediation would\njust ignore the extra data they don't recognize.\n\nmessage PaymentRequest {\n   ....\n\n  // One per mediator acceptable to the seller.\n  repeated MediationProposal mediation_data = 10;\n}\n\nmessage MediationProposal {\n  required SignedMediatorIdentity identity = 2;\n\n  // Opaque bytes that the mediator can be asked to turn into a human\nreadable description\n  // of how disputes will be mediated. The merchant sets this to\ndescribe whatever policy it\n  // is willing to go along with, so policies may be arbitrarily complicated.\n  required bytes policy = 3;\n}\n\nmessage SignedMediatorIdentity {\n  required MediatorIdentity identity = 1;\n  // If the identity data is signed ...\n  optional string pki_type = 2;\n  optional bytes pki_data = 3;\n  optional bytes pki_signature = 4;\n}\n\nmessage MediatorIdentity {\n  // Name of the mediator to be displayed to the user.\n  required string friendly_name = 1;\n  // PNG image that can be used to represent the mediator to the user.\n  optional bytes logo = 2;\n  // Some text shown to the user under the name explaining the\nmediators policies, why they should be chosen, etc.\n  optional string blurb = 3;\n\n  // An HTTP URL where a mediator can be reached to do things like\nprove ownership of pubkeys, initiate the protocols, etc.\n  required string contact_url = 4;\n}\n\n... etc ....\n\nSo the user experience would be that when a payment request is received:\n\n- older clients ignore the mediation_data field and do a direct\npayment as normal\n- newer clients ask the user to pick a mediator (if they want to) and\nif mediation is requested, the PaymentRequest is then discarded and\nthe next step of the mediation protocol begins.\n\nThe old request has to be discarded because the outputs would have\nbeen written on the assumption of no mediation being in use (for\nbackwards compatibility).\n\nAnyway, though I'm awfully guilty, let's not get off track. Just that\nthis is how I imagined new payment features being done - as new\nextensions to the payment protocol, which would be a living document\namended by BIPs."
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-12-06T19:13:06",
                "message_text_only": "On Thu, Dec 6, 2012 at 12:55 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Re: the newest spec. Rather than make the signature over the\n> \"concatenation of\", why not just make it a signature over the\n> serialized protobuf minus the signature field (as I did in my demo\n> code). Otherwise it seems like we'd need more code than really\n> necessary. We can state explicitly tags must be ordered if you want,\n> even though all implementations should do that already.\n\n\nOK. I want to keep the signature field required, though, so how about:\n\nsignature: digital signature over a protocol buffer serialized variation of\nthe SignedPaymentRequest message where signature is a zero-byte array and\nfields are serialized in numerical order (all current protocol buffer\nimplementations serialize fields in numerical order), using the public key\nin pki_data.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121206/bc7ff765/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-07T10:45:02",
                "message_text_only": "> OK. I want to keep the signature field required, though, so how about:\n>\n> signature: digital signature over a protocol buffer serialized variation of\n> the SignedPaymentRequest message where signature is a zero-byte array and\n> fields are serialized in numerical order (all current protocol buffer\n> implementations serialize fields in numerical order), using the public key\n> in pki_data.\n\nLooks good to me."
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-07T11:01:36",
                "message_text_only": "Yet more comments (I guess at some point we need to stick a fork in it\n- or at least move on to implementing a prototype version).\n\nMaybe don't require the payment URI to be HTTPS. If you want to pay a\nTor hidden service then HTTPS just adds unnecessary complexity. Just\nrecommend to merchants that they use an encrypted connection and leave\nit at that.\n\nThough it's not strictly necessary, it'd be nice to have defined\nbehavior for if you want to pay more than the requested amount, for a\ntip. Perhaps rather than \"zero value outputs will be ignored\" say, \"if\nsome outputs have value and others don't, the user will be given the\noption of overpaying and the extra money will be split evenly between\nthe zero valued outputs\". That way a waitress can have the phone add a\nzero-valued output to her own wallet and that would prompt the wallet\nsoftware to display some convenient UI for adding on 10% or whatever.\n\nreceiptURI -> receipt_url ? technically it has to be resolvable so\n\"uri\" isn't quite right.\n\n\"Display the proposed Outputs in as human-friendly a form as possible\"\n.... ??? Surely you'd just display the total amount requested? I don't\nthink it ever makes sense to try and display outputs to the user\ndirectly.\n\nRe: the UI TODO - agreed but let's take it out of the BIP and maybe\nmake it an alternative document. Or just replace it with a\nrecommendation that \"the user interface should be designed to ensure\nusers understand the difference between an unsigned and signed payment\nrequest, for best practices see <here>\"\n\nserialized_paymentrequest -> serialized_payment_request? Otherwise\nlanguages that use CamelCase will look odd ....\nsetSerializedPaymentrequest()\n\nThe question of root CAs still needs resolution. I stick with my\nrecommendation to support all CAs that browsers support. Obviously,\nit's better for a merchant to obtain an EV cert than a domain\nverification cert - the UI can reflect the higher level of\nverification.\n\nI doubt there's a need to specify a max number of certs in a chain.\nBut if you want to, go for something high, like 256. There's no point\nin trying to put DoS mitigations into something like this, for the\nsame reason HTML doesn't impose a maximum page size. It's in the\nmessage builders interest to ensure it gets read by all users.\nCrashing their clients doesn't achieve anything as long as the crash\nisn't exploitable.\n\n\n\n\nOn Fri, Dec 7, 2012 at 11:45 AM, Mike Hearn <mike at plan99.net> wrote:\n>> OK. I want to keep the signature field required, though, so how about:\n>>\n>> signature: digital signature over a protocol buffer serialized variation of\n>> the SignedPaymentRequest message where signature is a zero-byte array and\n>> fields are serialized in numerical order (all current protocol buffer\n>> implementations serialize fields in numerical order), using the public key\n>> in pki_data.\n>\n> Looks good to me."
            },
            {
                "author": "Gavin Andresen",
                "date": "2012-12-07T16:19:12",
                "message_text_only": "On Fri, Dec 7, 2012 at 6:01 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Yet more comments (I guess at some point we need to stick a fork in it\n> - or at least move on to implementing a prototype version).\n>\n\nYes, my next step is prototyping.\n\nNote that this is not a BIP yet:  I want to have a working implementation\nbefore making this an Official BIP.\n\n\n> Maybe don't require the payment URI to be HTTPS.\n\n\nChanged:\n   receipt_url: Secure (usually https) location where...\n\nThough it's not strictly necessary, it'd be nice to have defined\n> behavior for if you want to pay more than the requested amount, for a\n> tip.\n\n\nyeah... I had similar thoughts on what to do if some Outputs specify an\namount and others don't. I'm still waffling on whether or not I like\nallowing repeated Outputs; a single Output would make the spec a fair bit\nsimpler, and if a merchant wants to split up a payment for some reason they\ncould just generate another transaction.\n\nI want to move on to actually implementing this before creating complicated\nrules. Maybe the best way to tip a waitress is to get two separate\nPaymentRequests, one for the restaurant and one that goes directly to the\nwaitress (depends on whether or not the restaurant needs or wants to know\nhow much their employees are getting tipped, I suppose).  Maybe it would be\nbest to have a separate \"gratuity\" Output in the PaymentRequest. That's the\nkind of detail I think doesn't need to be worked out right now, I'd rather\nrestaurants tell us what they need/want.\n\n\n> \"Display the proposed Outputs in as human-friendly a form as possible\"\n> .... ??? Surely you'd just display the total amount requested? I don't\n> think it ever makes sense to try and display outputs to the user\n> directly.\n>\n\nThis is the case of getting an UNSIGNED payment request; I've changed the\nwording a little to make that more clear.\n\nIf a bitcoin client accepts unsigned payment requests (a couple of people\nhave asked if that would be possible so I think that is desired), then it\ndoesn't have the payer's identity-- all it has is the Outputs that will be\npaid.\n\n\n\n> Re: the UI TODO - agreed but let's take it out of the BIP...\n\n\nNot a BIP yet....\n\nserialized_paymentrequest -> serialized_payment_request?\n\n\nDone.\n\n\n> The question of root CAs still needs resolution.  I stick with\n> my recommendation to support all CAs that browsers support.\n\n\nI still like the idea of only including the root CAs who have jumped\nthrough the hoops needed to get the \"allowed to issue EV certs\" blessing.\n I'm not suggesting that all bitcoin merchants must get EV certs, but I am\nsuggesting that they must get a certificate from one of the most reputable\ncertificate authorities, and the ability to issue EV certificates is, I\nthink, a good proxy for that.\n\nBut, again:  Not a BIP yet.  Lets get something implemented and then hammer\nout details (implementing always turns up edge cases you forgot when\nspec'ing).\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121207/f5ce65e5/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-07T16:27:36",
                "message_text_only": "> yeah... I had similar thoughts on what to do if some Outputs specify an\n> amount and others don't. I'm still waffling on whether or not I like\n> allowing repeated Outputs; a single Output would make the spec a fair bit\n> simpler\n\nYes, but at the cost of privacy. Generators of payment requests always\nhave the option of just adding a single output and being done with it.\nBut in future they'll probably want to keep their income in unlinkable\nchunks of a size that's up to them, and multi-outputs are needed for\nthis (the idea being, the users wallet tries to keep a\nclose-as-possible match between the requested outputs and their own).\n\nOK, let's punt on tipping for now.\n\n> If a bitcoin client accepts unsigned payment requests (a couple of people\n> have asked if that would be possible so I think that is desired), then it\n> doesn't have the payer's identity-- all it has is the Outputs that will be\n> paid.\n\nI see. If I were to implement a wallet I'd just display nothing\n(except the size of the request). Showing an address doesn't really\nhelp the user in any way.\n\n> I still like the idea of only including the root CAs who have jumped through\n> the hoops needed to get the \"allowed to issue EV certs\" blessing.\n\nThe hoops only actually apply for EV certs though, they aren't\nrequired to do that verification for DV certs.\n\nThe main reason to use the browser root CAs is that merchants are\nguaranteed to be able to re-use their existing certs. Otherwise they\nmight have to buy new ones, which would be annoying."
            },
            {
                "author": "Alan Reiner",
                "date": "2012-12-06T18:13:00",
                "message_text_only": "On Thu, Dec 6, 2012 at 11:56 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> When I say \"pass around\" I'm not thinking of users copying and pasting,\n> that would be a terrible user experience; all of that communication needs\n> to happen automatically behind the scenes. Lets tackle that after we've got\n> the simpler customer-pays-merchant flow working nicely\n> (funded-escrow-pays-merchant is a subset of that, anyway).\n\n\n\nI think that the \"pass around\" method needs to happen in addition to the\nmethods of transparent protocols that occur behind the scenes.  For one,\nthere's a lot of CONOPs that need to be worked out by getting knowledgeable\npeople using it, and providing feedback about how it could/should/will be\nused and how it could be improved.  The pass-around method is simpler to\nimplement and still usable by the types of users that will be using it in\nthe beginning -- experts.  Also, I see that for very large, important\nmulti-sig tx/contracts/escrow, the \"manual\" method might be preferred --\nmuch the same way many people prefer manual-transmission cars even though\nautomatics are \"easier\" -- some people/organizations will want the control.\n\n\nI'm all for protocols that enable higher-level access to this\nfunctionality, I'm just saying there should be lower-level access, too.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121206/4dbf0af1/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-03T21:42:09",
                "message_text_only": "On Thu, Nov 29, 2012 at 12:31 PM, Mike Hearn <mike at plan99.net> wrote:\n> 4) A longer term reason - in time, people may choose to not broadcast\n> transactions at all in some cases. I think how network speed will be\n> funded post-inflation is still an open question. Assuming the simplest\n> arrangement where users pay fees, getting transactions into the chain\n> has a cost. In cases where you trust the sender to not double spend on\n> you, you may keep a fee-less transaction around \"in your pocket\". Then\n> when it's your turn to pay, you use some unconfirmed transactions to\n> do so.\n\nThis brings up an additional point.  If we're mutually trusting\nparties (or secured by some kind of external mechanism), and you've\ngiven me a payment which I haven't broadcast for confirmation\u2014 and\nlater we make another transactions I should be able to offer you the\noriginal unconfirmed txn and ask if you'd instead be willing to write\na replacement that combines both payments."
            },
            {
                "author": "Roy Badami",
                "date": "2012-12-03T22:48:26",
                "message_text_only": "On Mon, Dec 03, 2012 at 05:34:12PM -0500, Jeff Garzik wrote:\n> You shouldn't need to escape and unescape data that is not being\n> interpreted in any way.\n\nFunilly enough pretty much all low-level links that make up the\nInternet use either bit-stuffing or byte-stuffing to escape a\nparticular bit sequence or byte that terminates an HDLC frame.\n\nI'm not particularly agreeing or disagreeing with you on the\nsuitability for the case at hand, but as an absolute your statement\ndoesn't hold water.  The use of a terminator for a variable-length\ndata structure rather than a length prefix is a design desicion that\nhas little-to-nothing to do with the debate of text-versus-binary.\n\nAnyone remember Holerith constants?\n\nroy"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2012-12-23T02:33:22",
                "message_text_only": "I hope that this input does not come too late; I haven't had time to review\nthe proposal until now.\n\nFor alt-chains that have time-varying value (Freicoin[1], currently), it is\nnecessary in some applications to include a \"reference height\" in the\ninvoice. Since the bitcoin protocol does not assume a universally\nagreed-upon time source, Freicoin (and presumably other\nyet-to-be-implemented time-varying chains) uses blocktime as the clock for\ntime-value calculations: outputs lose 2**-20 of their value with each\npassing block. The reference height for an invoice is the blocktime at\nwhich amount values are specified and the reference point for time-varying\ncalculations. As a concrete example, an invoice for payment of 50 frc today\ncould be satisfied by 49.99313402 frc tomorrow.\n\nTo implement this, we would require an optional \"uint64 refheight\" field in\nthe invoice structure. \"refheight\" or \"nRefHeight\" is what we call this\nvalue internally, but \"blocktime\" or \"blockheight\" would work as well.\n\nGithub is currently down, so I apologize if a suitable field has already\nbeen added.\n\nCheers,\nMark Friedenbach\n\n[1] http://freico.in/ \"Freicoin: a P2P digital currency delivering freedom\nfrom usury.\"\n\n\nOn Mon, Nov 26, 2012 at 2:37 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> This is the next big \"lets all agree to do things the same way\" thing\n> I think we should tackle. I'm particularly looking for feedback from\n> other bitcoin client developers, even if it is just a quick \"looks\n> reasonable, if everybody else is going to do it then I will\n> (eventually) too...\"\n>\n> Thanks to Pieter Wuille and Mike Hearn for lots of feedback and\n> suggestions and brainstorming.\n>\n> This document is online at https://gist.github.com/4120476\n>\n> If you respond to this message, please be considerate of people who\n> subscribe to the digest version of this mailing list and trim your\n> response.\n>\n>\n> Invoices, Payments and Receipts for Bitcoin Transactions\n> ========================================================\n>\n> This document proposes protocol buffer-based formats for signed,\n> authenticated \"invoices\" and \"receipts\" -- requests for payment, and\n> proof-of-payment.\n>\n> Separate documents propose an extension to the Bitcoin URI syntax and\n> new MIME types to support them.\n>\n> Motivation\n> ==========\n>\n> The idea of a \"payment protocol\" to improve on Bitcoin addresses has\n> been around for over a year. Users have been asking for some features\n> in this proposal (like the ability to provide a refund address so\n> overpayments or refunds can be returned to customers without the need\n> to ask them for their address) for two or three years, and have\n> started to work around shortcomings in the Bitcoin payment process\n> with creative (but inefficient) uses of transactions.\n>\n> The key features of this proposal are:\n>\n> + Requests for payment (Invoices) are tied to authenticated identities\n> using the only widely-deployed identity authentication system we have\n> right now (X.509 certificates signed by root certificate authorities)\n> + Invoices include a user-friendly description of what the payment is for\n> + Payments include where refunds should be sent\n> + At the end of the payment process, the customer holds a\n> cryptographically signed Receipt that can be used as proof-of-payment\n> if there is any dispute with the merchant.\n>\n>\n> Specification\n> =============\n>\n> Invoice/SignedInvoice\n> ---------------------\n>\n> An Invoice is a request for payment from a merchant to a customer:\n>\n> ::\n>\n>     message Output {\n>         optional uint64 amount = 1;\n>         required bytes script = 2;\n>     }\n>\n> amount: Number of satoshis (0.00000001 BTC) to be paid. If not given\n> or zero, then the customer will be asked how much to pay.\n>\n> script: a \"TxOut\" script to which the customer should direct payment.\n> This will normally be one of the standard Bitcoin transaction script\n> (e.g. pubkey OP_CHECKSIG).\n>\n> ::\n>\n>     message Invoice {\n>         repeated bytes x509chain = 1;\n>         repeated Output outputs = 2;\n>         required uint64 time = 3;\n>         optional uint64 expires = 4;\n>         optional bool single_use = 5 [default = true];\n>         optional string memo = 6;\n>         optional string receiptURI = 7;\n>         optional bytes merchant_data = 8;\n>     }\n>\n> outputs: one or more outputs where Bitcoins are to be sent.\n>\n> x509chain: one or more DER-encoded X.509 certificates that identifies\n> the merchant. See the \"Certificates\" section below for details.\n>\n> time: Unix timestamp (seconds since 1-Jan-1970) when the Invoice was\n> created.\n>\n> expires: Unix timestamp after which the Invoice should be considered\n> invalid. If not given, the Invoice may be re-used until the earliest\n> certificate expiration date in the X509chain.\n>\n> single_use: If true, this Invoice should be used for only one payment.\n> If false, it may be added to the user's address book and used\n> repeatedly until it expires (e.g. for donations or a recurring\n> payment).\n>\n> memo: UTF-8 encoded, plain-text (no formatting) note that should be\n> displayed to the customer, explaining what this Invoice is for.\n>\n> receiptURI: Secure (https) URI where a Payment message (see below) may\n> be sent to obtain a SignedReceipt as proof-of-payment.\n>\n> merchant_data : Arbitrary data ignored by the client that may be used\n> by the merchant to identify the Invoice.\n>\n> ::\n>\n>     message SignedInvoice {\n>         required Invoice invoice = 1;\n>         required bytes signature = 2;\n>     }\n>\n> A SignedInvoice is an Invoice signed using the private key\n> corresponding to the public key in the first certificate in the\n> x509chain and the HMAC SHA-256 algorithm.\n>\n> When a Bitcoin client receives a SignedInvoice, it must authorize\n> payment by doing the following:\n>\n> 1. Validate the x509chain certificate chain up to it's list of root\n> certificate authorities\n> 2. Validate that the time on the customer's system is before\n> Invoice.expires\n> 3. Display the \"Common Name\" (CN) string from the first x509chain\n> certificate and ask the customer if they would like to submit payment\n>\n> Payment\n> -------\n>\n> ::\n>\n>     message Payment {\n>         required Invoice invoice = 1;\n>         repeated bytes transactions = 2;\n>         repeated Output refund_to = 3;\n>         optional string memo = 4;\n>     }\n>\n> invoice : the invoice received from the merchant. A merchant must\n> validate the Invoice and may reject the Payment if the Invoice was\n> altered by the customer.\n>\n> transactions : One or more valid, signed Bitcoin transactions that\n> fully pay the Invoice\n>\n> refund_to : One or more outputs where the merchant may return funds,\n> if necessary.\n>\n> memo : UTF-8 encoded, plain-text note from the customer to the merchant.\n>\n> If the customer authorizes payment, then the Bitcoin client:\n>\n> 1. Creates and signs a transaction with one output sending the\n> Invoice.script\n> 2. If there is no Invoice.receiptURI, then the transaction is\n> broadcast on the Bitcoin p2p network.\n> 3. Else POST a Payment message to Invoice.receiptURI and expect a\n> SignedReceipt in response.\n>\n> Invoice.receiptURI must be secure against man-in-the-middle attacks\n> that might alter Payment.refund_to.\n>\n> *Note: an alternative would be a SignedPayment message that ties the\n> signatures in Payment.transactions to a signature for the entire\n> Payment message. Spending multisig inputs that may be controlled by\n> more than one person or spending arbitrary non-standard transactions\n> makes that non-trivial.*\n>\n> Receipt/SignedReceipt\n> ---------------------\n>\n> ::\n>\n>     message Receipt {\n>         required Payment payment = 1;\n>         required bool accepted = 2;\n>         optional string memo = 3;\n>     }\n>\n> accepted : true if the Payment is accepted and will be broadcast on\n> the Bitcoin p2p network.\n>\n> memo : UTF-8 encoded note that should be displayed to the customer\n> indicating that the transaction is complete.\n>\n> ::\n>\n>     message SignedReceipt {\n>         required Receipt receipt = 1;\n>         required bytes signature = 3;\n>     }\n>\n> A SignedReceipt is a Receipt signed using the private key\n> corresponding to the public key in the first certificate in the\n> Receipt->Payment->Invoice.x509chain and the HMAC SHA-256 algorithm.\n>\n> Upon receiving a SignedReceipt, a Bitcoin client should validate the\n> signature and, if valid, display the Receipt.memo and store the\n> SignedReceipt as proof-of-payment.\n>\n> If a SignedReceipt is not received for any reason (timeout, error) and\n> Payment.transactions has not been broadcast by the merchant on the\n> Bitcoin p2p network, then the Bitcoin client should assume that the\n> payment failed, inform the customer that the payment failed, and\n> return coins involved in the transaction to the customer's wallet.\n>\n>\n> Certificates\n> ============\n>\n> The Invoice.x509chain (X.509 Certificate Chain) field contains the\n> X.509 public key certificate or certificate chain [RFC5280]\n> corresponding to the key used to digitally sign the Invoice and\n> Receipt. The certificate or certificate chain is represented as an\n> array of DER [ITU.X690.1994] PKIX certificate value. The certificate\n> containing the public key of the entity that digitally signed the\n> Invoice MUST be the first certificate. This MAY be followed by\n> additional certificates, with each subsequent certificate being the\n> one used to certify the previous one. The recipient MUST verify the\n> certificate chain according to [RFC5280] and reject the payment\n> request if any validation failure occurs.\n>\n> *What should we say about root certificates and certificate management\n> in general? Any requirements, or leave it up to each Bitcoin client to\n> determine which root CA's are trustworthy, as happens with web\n> browsers? Gavin suggests trusting only (say) ten of the Extended\n> Validation authorities:\n>\n> http://en.wikipedia.org/wiki/Extended_Validation_Certificate#Extended_Validation_certificate_identification\n> *\n>\n> *X.509 is widely criticised for doing too much. However, it is the\n> Public Key Infrastructure (PKI) system we're stuck with. Do web\n> browsers / certificate authorities support the full X.509 spec, or\n> only a subset? Should Bitcoin clients only support some well-defined\n> subset of X.509 ? More research needed here... *\n>\n> Use Cases\n> =========\n>\n> Merchant Payment Service\n> ------------------------\n>\n> A merchant payment service (like Paysius or bit-pay.com) would use\n> Invoices and Receipts as follows:\n>\n> 1. Merchant pays for a certificate from a certificate authority, and\n> then gives the payment service the certificate and their private key.\n> This could be the same certificate and private key as is used for the\n> merchant's web site, but best security practice would be to purchase a\n> separate certificate for authenticating Invoices. Very successful\n> merchant payment services might act as intermediate certificate\n> authorities, issuing certificates for their merchants.\n> 2. Customer goes through the checkout process on either the merchant's\n> or payment service's web site.\n> 3. At the end of the checkout process, a SignedInvoice is generated\n> and sent to the customer's Bitcoin client.\n> 4. Customer's Bitcoin client displays the Invoice, showing that the\n> payment is for the merchant.\n> 5. On customer approval, a Payment is sent to the payment service's\n> paymentURI. The merchant is notified of the payment, and the customer\n> receives a SignedReceipt as proof-of-payment.\n>\n> SatoshiDice\n> -----------\n>\n> SatoshiDice (www.satoshidice.com) is an extremely popular game that\n> uses tiny transactions for some customer/service communications. In\n> particular, customers can add an extra output to their transactions to\n> indicate where winnings should be sent. And SatoshiDice creates tiny\n> transactions to let their customers know that a bet was received, but\n> lost.\n>\n> Assuming Bitcoin clients upgrade to support this proposal, a bet on\n> SatoshiDice would proceed as follows:\n>\n> 1. Customer clicks on a link on SatoshiDice.com and their Bitcoin\n> client receives a SignedInvoice.\n> 2. Customer authorizes payment, and their Bitcoin client creates a\n> Payment message and submits it directly to\n> https://satoshidice.com/something\n> 3. The SatoshiDice web server checks to make sure the transaction is\n> valid, broadcasts it, and determines whether the customer wins or\n> loses. It returns a SignedReceipt with either a \"You win\" or \"You\n> lost\" memo.\n> 4. If the customer won, it broadcasts a transaction to pay them using\n> Payment.refund_to\n> 5. Customer's Bitcoin client displays the win/lose memo, and if they\n> won the winnings appear in their wallet when received over the p2p\n> network.\n>\n> Multiperson Wallet\n> ------------------\n>\n> This use case starts with a multi-signature Bitcoin address or wallet,\n> with keys held by two different people (Alice and Bob). Payments from\n> that address/wallet must be authorized by both Alice and Bob, and both\n> are running multi-signature-capable Bitcoin clients.\n>\n> Alice begins the payment process by getting a SignedInvoice from a\n> merchant that needs to be paid. She authorizes payment and her Bitcoin\n> client creates a Payment message with a partially-signed transaction,\n> which is then sent to Bob any way that is convenient (email\n> attachment, smoke signals...).\n>\n> Bob's Bitcoin client validates the SignedInvoice and asks Bob to\n> authorize the transaction. He says OK, his Bitcoin client completes\n> the transaction by providing his signature, submits the payment to the\n> merchant, and then sends a message to Alice with the SignedReceipt he\n> received from the merchant, completing the payment process.\n>\n>\n> Design Notes\n> ============\n>\n> Why X.509 Certificates?\n> -----------------------\n>\n> This proposal uses X.509 certificates as the identity system for\n> merchants because most of them will have already purchased a\n> certificate to secure their website and will be familiar with the\n> process of proving their identity to a certificate issuing authority.\n>\n> Implementing a better global PKI is outside the scope of this\n> proposal. If a better PKI is adopted, the only change to this proposal\n> would be to replace the Invoice.x509chain with whatever that better\n> infrastructure uses to identify entities.\n>\n>\n> Why not JSON?\n> -------------\n>\n> Invoice, Payment and Receipt messages could all be JSON-encoded. And\n> the Javascript Object Signing and Encryption (JOSE) working group at\n> the IETF has a draft specification for signing JSON data.\n>\n> But the spec is non-trivial. Signing JSON data is troublesome because\n> JSON can encode the same data in multiple ways (whitespace is\n> insignificant, characters in strings can be represented escaped or\n> un-escaped, etc.), and the standards committee identified at least one\n> security-related issue that will require special JSON parsers for\n> handling JSON-Web-Signed (JWS) data (duplicate keys must be rejected\n> by the parser, which is more strict than the JSON spec requires).\n>\n> A binary message format has none of those complicating issues. Which\n> encoding format to pick is largely a matter of taste, but Protocol\n> Buffers is a simple, robust, multi-programming-language,\n> well-documented, easy-to-work-with, extensible format.\n>\n> What about a merchant-pays-fee feature?\n> ---------------------------------------\n>\n> It is desireable to allow a merchant to pay the cost of any Bitcoin\n> network transaction processing fees, so if a customer is paying for a\n> 1 BTC item they pay exactly 1 BTC.\n>\n> One way of accomplishing that is to add a 'maxfee' field to the\n> Invoice, and have the Bitcoin client construct a transaction that pays\n> the merchant (amount-maxfee).\n>\n> Another way of accomplishing that is to change the transaction\n> selection code used by Bitcoin miners, so that dependent transactions\n> are considered as a group. Then a merchant with several unconfirmed\n> zero-fee transaction from customers can create a pay-to-self\n> transaction with a large enough fee to pay for the set of transactions\n> to be confirmed.\n>\n> A third way of accomplishing that is for the Bitcoin client to sign\n> Payment.transactions[0] using the SIGHASH_ANYONECANPAY flag, and for\n> the merchant to add an additional, small-BTC-value input to the\n> transaction before broadcasting it. That additional input would go\n> directly to miners as a fee. *Note: Gavin is not sure if he loves or\n> hates this idea.*\n>\n> Checking for revoked certificates\n> ---------------------------------\n>\n> The Online Certificate Checking Protocol (OCSP) is supposed to be a\n> quick and easy way for applications to check for revoked certificates.\n>\n> In practice, it doesn't work very well. Certificate Authorities have\n> no financial incentive to support a robust infrastructure that can\n> handle millions of OCSP validation requests quickly.\n>\n> Ideally, Bitcoin clients would use OCSP to check certificate statuses\n> every time they received or re-used an Invoice. But if that results in\n> long pauses or lots of false-positive rejections (because an OCSP\n> endpoint is offline or overwhelmed, perhaps) then merchants and\n> customers might revert to just using \"never fails\" Bitcoin addresses.\n>\n>\n>\n> References\n> ==========\n>\n> Public-Key Infrastructure (X.509) working group :\n> http://datatracker.ietf.org/wg/pkix/charter/\n>\n> RFC 2560, X.509 Internet Public Key Infrastructure Online Certificate\n> Status Protocol - OCSP : http://tools.ietf.org/html/rfc2560\n>\n> Protocol Buffers : https://developers.google.com/protocol-buffers/\n>\n> See Also\n> ========\n>\n> Javascript Object Signing and Encryption working group :\n> http://datatracker.ietf.org/wg/jose/\n>\n> sipa's payment protocol proposal: https://gist.github.com/1237788\n>\n> ThomasV's \"Signed Aliases\" proposal : http://ecdsa.org/bitcoin_URIs.html\n>\n>\n> ------------------------------------------------------------------------------\n> Monitor your physical, virtual and cloud infrastructure from a single\n> web console. Get in-depth insight into apps, servers, databases, vmware,\n> SAP, cloud infrastructure, etc. Download 30-day Free Trial.\n> Pricing starts from $795 for 25 servers or applications!\n> http://p.sf.net/sfu/zoho_dev2dev_nov\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121222/693f9192/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol Proposal: Invoices/Payments/Receipts",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Gary Rowe",
                "Andreas Petersson",
                "Mike Hearn",
                "Roy Badami",
                "Elden Tyrell",
                "Stephen Pair",
                "Alan Reiner",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Mark Friedenbach",
                "Melvin Carvalho",
                "Mike Koss"
            ],
            "messages_count": 33,
            "total_messages_chars_count": 85626
        }
    },
    {
        "title": "[Bitcoin-development] Chain dust mitigation: Demurrage based Chain Vacuuming",
        "thread_messages": [
            {
                "author": "Michael Gronager",
                "date": "2012-12-03T11:19:37",
                "message_text_only": "(Also posted on the forum: https://bitcointalk.org/index.php?topic=128900.0)\n\nThe amount of \"dust\" in the block chain is getting large and it is growing all the time. Currently 11% of unspent tx outputs (UTXO) are of 1Satoshi (0.00000001BTC), 32% is less than 0.0001BTC and 60% is less than 0.001BTC. (Thanks to Jan for digging out these numbers!)\n\nThis means that a huge part of the block chain is used for essentially nothing - e.g. the sum of the 11% is worth roughly 2 US cents !\n\nThe main source for these 1 Satoshi payouts is Sahtoshi Dice. And nothing wrong with that, however, we should work on ensuring that too many too small payments will not kill the size of the blockchain in the end - further, they are essentially too small to be included in other transaction as the added fee will often make it more expensive to remove them. Hence, there is no incentive to get rid of them.\n\nI have an idea for a possible mitigation of this problem - introduction of demurrage - not as in it normal meaning as a percentage over time (see:http://en.wikipedia.org/wiki/Demurrage_(currency) btw, this has also been tried in freicoin), but as a mean to recycle pennies over time. The proposal is simple - UTXOs age out if not re-transacted - the smaller the coin the faster the aging:\n1-99 Satoshi: lives for 210 blocks\n100-9999 Satoshi: lives for 2100 blocks\n10000-999999 Satoshi: lives for 21000 blocks\n1000000-99999999 Satoshi: lives for 210000 blocks\n\nOnly amounts above 1BTC lives forever - (or we could even impose aging on those too..)\n\nThe aged coins are simply included in the block mining reward, creating another incentive for miners. Further, if we include all coins in this recycle scheme coins will never be lost forever. \n\nThis scheme will impose some lifetimes also on e.g. colored coins (hence you need to use a certain amount to borrow space on the blockchain for the time needed, or simply transact them).\n\nIf you like this I would be happy to write it into a BIP.\n\nThoughts ?"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-12-03T12:05:41",
                "message_text_only": "On Mon, Dec 3, 2012 at 12:19 PM, Michael Gronager <gronager at ceptacle.com>wrote:\n\n> (Also posted on the forum:\n> https://bitcointalk.org/index.php?topic=128900.0)\n>\n> The amount of \"dust\" in the block chain is getting large and it is growing\n> all the time. Currently 11% of unspent tx outputs (UTXO) are of 1Satoshi\n> (0.00000001BTC), 32% is less than 0.0001BTC and 60% is less than 0.001BTC.\n> (Thanks to Jan for digging out these numbers!)\n>\n\nI've noticed this too, and it is a concern indeed.\n\n\n> I have an idea for a possible mitigation of this problem - introduction of\n> demurrage - not as in it normal meaning as a percentage over time (see:\n> http://en.wikipedia.org/wiki/Demurrage_(currency) btw, this has also been\n> tried in freicoin), but as a mean to recycle pennies over time. The\n> proposal is simple - UTXOs age out if not re-transacted - the smaller the\n> coin the faster the aging:\n> 1-99 Satoshi: lives for 210 blocks\n> 100-9999 Satoshi: lives for 2100 blocks\n> 10000-999999 Satoshi: lives for 21000 blocks\n> 1000000-99999999 Satoshi: lives for 210000 blocks\n>\n\nIf this were a proposal at the time Bitcoin was created, I would definitely\nbe in favor, but I feel we can't just change such a policy right now - it's\nnot what people signed up for when they started using the system. I also\nsee no way to implement this without a hard fork, which would require\nplanning at least 1-2 years in advance (imho). By that time, the economic\nlandscape of Bitcoin may be vastly different, and either dust spam will\nhave killed it, or we will have found another solution already.\n\nPersonally, I think the best solution is to change the mining policy to\nprioritize (and perhaps favor for free relay/inclusion) transactions that\nreduce the number of UTXO's.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/2ea2d932/attachment.html>"
            },
            {
                "author": "Michael Gronager",
                "date": "2012-12-03T12:24:56",
                "message_text_only": "> If this were a proposal at the time Bitcoin was created, I would definitely be in favor, but I feel we can't just change such a policy right now - it's not what people signed up for when they started using the system. I also see no way to implement this without a hard fork, which would require planning at least 1-2 years in advance (imho). By that time, the economic landscape of Bitcoin may be vastly different, and either dust spam will have killed it, or we will have found another solution already.\n\nBitcoin aka the blockchain is defined by the majority of the miners. This is what people have signed up to imo. A scheme that a) is of benefit for us all and b) is also of economical benefit for the miners, will likely be accepted quite fast - especially now when the bounty was just halved... I also fear that there is a lot of BTCs that is effectively un-owned and it could even drive Satoshi to use some of his BTCs ;)\n\n> Personally, I think the best solution is to change the mining policy to prioritize (and perhaps favor for free relay/inclusion) transactions that reduce the number of UTXO's.\n\nAgree - initially (and possibly in parallel) this would be a nice path to follow - it could be done solely by adjusting the relay fee: Transactions that increases the # UTXOs pay extra, those that reduce it pay less (symmetrical around a minimum fee). So in other words we 'tax' increasing the size of the UTXOs.\n\nNo matter how it is done - as long as a client is not punished for getting rid of dust, and clients are rewritten to do this automatically we could re-evaluate after a some time - but currently the number of UTXOs is growing rapidly. \n\n/M\n\n\n\n\n> \n> -- \n> Pieter\n>  \n> ------------------------------------------------------------------------------\n> Keep yourself connected to Go Parallel: \n> BUILD Helping you discover the best ways to construct your parallel projects.\n> http://goparallel.sourceforge.net_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-12-03T12:33:09",
                "message_text_only": "On Mon, Dec 3, 2012 at 1:24 PM, Michael Gronager <gronager at ceptacle.com>wrote:\n\n> > If this were a proposal at the time Bitcoin was created, I would\n> definitely be in favor, but I feel we can't just change such a policy right\n> now - it's not what people signed up for when they started using the\n> system. I also see no way to implement this without a hard fork, which\n> would require planning at least 1-2 years in advance (imho). By that time,\n> the economic landscape of Bitcoin may be vastly different, and either dust\n> spam will have killed it, or we will have found another solution already.\n>\n> Bitcoin aka the blockchain is defined by the majority of the miners. This\n> is what people have signed up to imo. A scheme that a) is of benefit for us\n> all and b) is also of economical benefit for the miners, will likely be\n> accepted quite fast - especially now when the bounty was just halved... I\n> also fear that there is a lot of BTCs that is effectively un-owned and it\n> could even drive Satoshi to use some of his BTCs ;)\n\n\nI disagree completely. The only power granted to miners is to decide the\norder of otherwise valid transactions (up to postponing some indefinitely)\n- they have no ability to control the rules for validity them self  In\nparticular, the rules that prevent double spending and (monetary) inflation\nof the currency are deliberately NOT left to miners. If this were the case,\nthey could just as well vote to keep the 50 BTC block payout, and that\nwould certainly not be what people signed up for.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/c9898492/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-03T15:02:07",
                "message_text_only": "On Mon, Dec 3, 2012 at 7:24 AM, Michael Gronager <gronager at ceptacle.com> wrote:\n> Bitcoin aka the blockchain is defined by the majority of the miners. This is what people have signed up to imo. A scheme that a) is of benefit for us all and b) is also of economical benefit for the miners, will likely be accepted quite fast - especially now when the bounty was just halved... I also fear that there is a lot of BTCs that is effectively un-owned and it could even drive Satoshi to use some of his BTCs ;)\n\nPieter already commented on this, but it's so important it must be\nsaid twice because everyone developing software for Bitcoin must\nunderstand and internalize it:\n\nBitcoin is not a democracy, it's certainly not a democracy of miners.\nEvery full node independently and autonomously validates the rules of\nthe system without the influence of other participants.\nUnfortunately, there is no universally consistent way to evaluate the\ntemporal ordering of transactions independently known\u2014 and none likely\nto ever exist\u2014 and a digital currency requires ordering to resolve\ndouble spends. Because of this Bitcoin must compromise the autonomy of\nits validation slightly: It uses a computational majority to determine\ntransaction ordering. But only ordering!\n\nThis is essential because if all the rules were subject to the whim of\na computing majority the system would be far less trustworthy.  The\neconomic incentives which keep the mining participants honest depend\non the value of defection being as limited as possible.\n\nSo, no\u2014 you can't achieve by what you want with miners. Any miner\nwhich applied your rules would instantly stop mining from the\nperspective of Bitcoin users. As a miner myself, I welcome my\ncompetition adopting your proposal :P.  You're looking for a hard fork\nof the system.  Such a change must be supported by ~all users, and so\nit must be something which has near universal consensus that it is\nessential.  I think it's not essential\u2014 though I agree that better\nUTXO set  size management would have been a useful component if it had\nbeen in the origin economic promise of the system\u2014  and I already know\nthat some participants take a principled position that views changes\nto the mere spendability of outputs as _theft_.\n\nYour proposal is also more economically hazardous than necessary: By\npaying unmoved coins to miners you create a substantial incentive for\nminers to delay processing transactions in the hopes that they expire\nfirst.  There is also some risk that the return of large coins from\nthe past after the currency has substantially deflated would be\nextremely economically disruptive.\n\nAs far as your concern\u2014 as opposed to the mechanism\u2014 I share it.  But\nit's important to note that the source of most of the problem\ntransactions is a single source, and a rather unusual one that defies\nthe normal anti-spamming economic incentives by attracting mentally\nill people to subsidize pay for the bloating transactions, which are\nalready penalized.  I believe this specific issue can be adequately\naddressed primarily through a three fold process:\n\n(1) Make client software aggressive about sweeping up dust inputs:\n\"Any time a transaction is created that has change keep adding in\nextra inputs\u2014 smallest to largest\u2014 until an additional one would\nincrease the cost of the transaction by 0.0001 BTC or more\"  \u2014 the\nonly major complication is doing this without concurrently harming\nprivacy which is why it's not done yet in the reference client.\n\n(2) Change the default relay and mining rules to further penalize\ntransactions with very small outputs.  Making sure that its\npractically possible to create inexpensive transactions right now is\nvery important for the long term success of the system while the small\nsize of the system makes it unattractive to use, but I don't believe\nthat applies for dust outputs.\n\n(3) Change the default relay and mining rules to further incentive\nreductions in the UTXO set size.  This would make the actions of (1)\nsave the participants funds instead of just being an altruistic\nbehavior that most do because its a default.\n\nIt might also be useful for client software to incorporate a \"destroy\nwallet\" button for people with wallets that only have dust remaining\nto send the private keys off to something of community benefit (e.g.\nbitcoin foundation, the faucet, or the developers of that that client)\nfor recovery so that they don't perpetually bloat the UTXO set.\n\nI expect that these actions would substantially address your concerns,\nand even if they do not I believe that they would be the most basic\nprerequisites for any kind of argument that something more drastic\n(especially something that some would could consider theft!) is\nessential."
            },
            {
                "author": "Alan Reiner",
                "date": "2012-12-03T15:17:30",
                "message_text_only": "On 12/03/2012 10:02 AM, Gregory Maxwell wrote:\n> (1) Make client software aggressive about sweeping up dust inputs:\n> \"Any time a transaction is created that has change keep adding in\n> extra inputs\u2014 smallest to largest\u2014 until an additional one would\n> increase the cost of the transaction by 0.0001 BTC or more\" \u2014 the only\n> major complication is doing this without concurrently harming privacy\n> which is why it's not done yet in the reference client.\n\n\nFYI, Armory uses exactly this logic to try to clean up dust outputs in\nthe user's transactions.  However, there's enough conditions on it, that\nI don't know how often it triggers.  Recommendations are welcome for how\nto improve it.\n\nRight now, if the transaction has less than 5 inputs, there exists dust\nUTXOs from addresses already included in the transaction, and those\nUTXOs are sufficiently small in priority, then the Armory will add them\nto the input side and increase the change accordingly.  Looking it just\nmade me realize I lost the last condition of making sure the tx already\nhas a change output -- don't want to turn a free tx into a fee-needed tx\njust to do this.  (reorganized the code\n<https://github.com/etotheipi/BitcoinArmory/blob/master/armoryengine.py#L5279>\nrecently, and must have fell through the cracks).\n\nPerhaps it could be improved by cleaning up dust from *any* address by\ndefault (not just ones already included in the tx), with the option for\nthe user to disable that behavior.  After all, anonymity was never a\ncore feature of the network -- I think it makes sense that the logic\nwould reduce anonymity by default in exchange for a cleaner network,\nwith a clear option to \"opt-out\" of that logic if user cares.  I think\nmost users don't actually care...\n\n-Alan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/d0a9abab/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-03T15:30:01",
                "message_text_only": "> Perhaps it could be improved by cleaning up dust from any address by default\n> (not just ones already included in the tx), with the option for the user to\n> disable that behavior.  After all, anonymity was never a core feature of the\n> network\n\nIt's cool that Armory already does this. I never had time to implement\ngood coin selection for bitcoinj :(\n\nJust a couple of points: as this is primarily a side effect of\nSatoshiDice, and a successful payment protocol will stop them doing\nit, code put in place to do temporary cleanup now probably won't\nseriously affect peoples privacy over the long term. Most people\naren't going to end up with lots of tiny outputs.\n\nSecond thing, it's best to carefully separate \"anonymity\" from\n\"privacy\". Privacy is supposed to be a feature of the system (it says\nso in Satoshis paper) because people demand it. If I loan a tenner to\nmy friend and he is able to find out what I earned last month, then\nthat trade was neither anonymous nor private. In this case I want\nprivacy but anonymity isn't useful. Mixing up anonymity with privacy\nis not only a public relations problem, but can lead to confusion from\nusers when they, eg, try and buy Bitcoins from an exchange and are\nasked to provide ID proofs."
            },
            {
                "author": "Stephen Pair",
                "date": "2012-12-03T16:18:27",
                "message_text_only": "On Mon, Dec 3, 2012 at 10:30 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Second thing, it's best to carefully separate \"anonymity\" from\n> \"privacy\". Privacy is supposed to be a feature of the system (it says\n> so in Satoshis paper) because people demand it. If I loan a tenner to\n> my friend and he is able to find out what I earned last month, then\n> that trade was neither anonymous nor private. In this case I want\n> privacy but anonymity isn't useful. Mixing up anonymity with privacy\n> is not only a public relations problem, but can lead to confusion from\n> users when they, eg, try and buy Bitcoins from an exchange and are\n> asked to provide ID proofs.\n\n\nI would like to second this point...privacy is essential because the market\ndemands it.  If Bitcoin doesn't do it well (and I would argue that it\ndoesn't today), then eventually a competitor to Bitcoin will do it better\nand that would be the beginning of the end for Bitcoin.  Debates about\nwhether it was or wasn't a core feature are pointless.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/848f1e36/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-12-03T16:29:49",
                "message_text_only": "These are all valid points.  I hadn't really thought much about this point\nuntil you all just brought it up.  The reason I so quickly spout off that\nphrase, is that I endlessly get requests from Armory users to implement\nmore anonymity-based features.  When I say there are bigger priorities,\nthey suggest that \"anonymity\" is a core benefit of Bitcoin and I should be\nsupporting it.  I'm not against anonymity, and I most certainly favor\nprivacy, but my goal was to produce a versatile client, not one focused on\nany one aspect -- there are plenty of people who use it for other reasons\nthan anonymity.\n\nHowever, I do like Greg's comment about \"attacks\" against a\nblind-dust-inclusion algorithm, and suggestion to maintain a clustering of\nalready-linked addresses.  That's not terribly difficult to do with the\ntransaction history in hand, and it could increase how often the logic\ntriggers.  I suppose these hardcore SD players probably have a lot of\none-satoshi outputs that could use vacuuming...\n\n\n\n\nOn Mon, Dec 3, 2012 at 11:18 AM, Stephen Pair <stephen at bitpay.com> wrote:\n\n> On Mon, Dec 3, 2012 at 10:30 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> Second thing, it's best to carefully separate \"anonymity\" from\n>> \"privacy\". Privacy is supposed to be a feature of the system (it says\n>> so in Satoshis paper) because people demand it. If I loan a tenner to\n>> my friend and he is able to find out what I earned last month, then\n>> that trade was neither anonymous nor private. In this case I want\n>> privacy but anonymity isn't useful. Mixing up anonymity with privacy\n>> is not only a public relations problem, but can lead to confusion from\n>> users when they, eg, try and buy Bitcoins from an exchange and are\n>> asked to provide ID proofs.\n>\n>\n> I would like to second this point...privacy is essential because the\n> market demands it.  If Bitcoin doesn't do it well (and I would argue that\n> it doesn't today), then eventually a competitor to Bitcoin will do it\n> better and that would be the beginning of the end for Bitcoin.  Debates\n> about whether it was or wasn't a core feature are pointless.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/cc823863/attachment.html>"
            },
            {
                "author": "Andreas Petersson",
                "date": "2012-12-03T19:50:39",
                "message_text_only": "These discussed features are all useful but quite contradicting.\n\nI imagine that a user will be able to switch between different coin \nselection policies \"minimize fees\",\"max privacy\",\"defragmentation\",\"i \ndon't care\" and even switch between them for individual sends."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-03T20:14:57",
                "message_text_only": "On Mon, Dec 3, 2012 at 2:50 PM, Andreas Petersson <andreas at petersson.at> wrote:\n> These discussed features are all useful but quite contradicting.\n>\n> I imagine that a user will be able to switch between different coin\n> selection policies \"minimize fees\",\"max privacy\",\"defragmentation\",\"i\n> don't care\" and even switch between them for individual sends.\n\nWhile thats a fine thing\u2014 and a feature that I'd personally use\u2014 its\nnot one that I expect to have a real measurable impact on the overall\nnetwork behavior.\n\nFor this kind of minutia especially, defaults are all powerful and\nmust be the best they can be. :)"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-03T15:51:41",
                "message_text_only": "On Mon, Dec 3, 2012 at 10:17 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n> Perhaps it could be improved by cleaning up dust from any address by default\n> (not just ones already included in the tx), with the option for the user to\n> disable that behavior.  After all, anonymity was never a core feature of the\n> network -- I think it makes sense that the logic would reduce anonymity by\n> default in exchange for a cleaner network, with a clear option to \"opt-out\"\n> of that logic if user cares.  I think most users don't actually care...\n\nYea, the obvious case would look for exact matches\u2014  but because sane\nsoftware pays change to fresh addresses I expect this to trigger an\nunfortunately infrequent amount of time.\n\nWhy do you bother with the 5 input limit?  The way I'd handle this in\nthe reference client is as a pure post-processing step. E.g. take any\nw/ change transaction formed and try adding small inputs in a greedy\nfashion until the next would change the fees. Do you see a reason not\nto do this?\n\nA next step up in infrequency is to use input taint tracking\ninformation to gather up coins from all inputs which are already\ncrosslinked.  In the reference client, which doesn't avoid\ncrosslinking, this would likely be quite effective but I worry about\nhaving an O(N^2)-ish algorithm as part of coin selection. And so I\nthink it would require maintaining in the wallet the cross link\nhistory for each address rather than building it on the fly. This\nseems like a lot of changes for a relatively modest optimization.\n\nAnother possibility would be to not apply the privacy rule to very\nsmall inputs or to addresses which have only ever received a very\nsmall sum total. But I don't know how to define very small in a robust\nway, and I think that the privacy behavior of the software being\n\"inconsistent\" from the users perspective would be somewhat\nunfortunate.  Perhaps a setting for the value considered very small\nfor this purpose which defaults to the relay MINFEE?   (And also\ninclude larger outputs when they're address matches).\n\nThe the problem with this is this:  Say I have an address 1GMaxwellFOO\n that everyone knows belongs to me. Someone who wants to identify all\nmy transactions sends me a constant spray of 1e-8 inputs to\n1GMaxwellFOO.  If the address association is ignored (even for only\nvery small inputs) then all my transactions become rapidly\nidentifiable.    Privacy, of at least a basic form, is an important\nelement of the system, if it's not preserved than bitcoin is inferior\nto traditional value transfer systems in an additional way.\n\n(And FWIW, I've seen self-appointed sluths on IRC trying to catch\ntrouble makers by paying tiny amounts to their extortion addresses;\nwith the incorrect expectation that it would taint their other\ntransactions. So even when it doesn't usually work people have tried\nusing this to attack people)"
            },
            {
                "author": "Wladimir",
                "date": "2012-12-03T12:40:52",
                "message_text_only": "I do think it would be nice to sweep up dust transactions, however I'm not\nthat happy with your solution\n\n1) Wouldn't the need to re-transact your coins to keep them safe from\n\"vultures\", result in people frantically sending coins to themselves, and\nthus expand the block chain, instead of reduce growth?\n\n2) putting those hard limits in passes a value judgement that IMO should\nnot be present in the protocol. <1BTC may be worth a lot some day, or it\ncould go the other way around, with dust spam of 10+ BTC. Either way the\nlimits will have to be changed again, with yet another fork.\n\n3) The (normal) user does not have a view of his balance consisting of\ninputs and outputs of various sizes. He just sees his balance as one\nnumber. And somehow, inexplicably (except through a very difficult\nexplanation), it's going down... what if he has 10000 BTC in 0.9999999 BTC\nunits? Annnnnd it's gone after 210000 blocks.\n\nI wonder if there is a way for the whole process to be transparent to the\nuser. The wallet is 'defragmented' but without losing the swept up coins to\nthe miner.\n\nWladimir\n\n\n\nOn Mon, Dec 3, 2012 at 12:19 PM, Michael Gronager <gronager at ceptacle.com>wrote:\n\n> (Also posted on the forum:\n> https://bitcointalk.org/index.php?topic=128900.0)\n>\n> The amount of \"dust\" in the block chain is getting large and it is growing\n> all the time. Currently 11% of unspent tx outputs (UTXO) are of 1Satoshi\n> (0.00000001BTC), 32% is less than 0.0001BTC and 60% is less than 0.001BTC.\n> (Thanks to Jan for digging out these numbers!)\n>\n> This means that a huge part of the block chain is used for essentially\n> nothing - e.g. the sum of the 11% is worth roughly 2 US cents !\n>\n> The main source for these 1 Satoshi payouts is Sahtoshi Dice. And nothing\n> wrong with that, however, we should work on ensuring that too many too\n> small payments will not kill the size of the blockchain in the end -\n> further, they are essentially too small to be included in other transaction\n> as the added fee will often make it more expensive to remove them. Hence,\n> there is no incentive to get rid of them.\n>\n> I have an idea for a possible mitigation of this problem - introduction of\n> demurrage - not as in it normal meaning as a percentage over time (see:\n> http://en.wikipedia.org/wiki/Demurrage_(currency) btw, this has also been\n> tried in freicoin), but as a mean to recycle pennies over time. The\n> proposal is simple - UTXOs age out if not re-transacted - the smaller the\n> coin the faster the aging:\n> 1-99 Satoshi: lives for 210 blocks\n> 100-9999 Satoshi: lives for 2100 blocks\n> 10000-999999 Satoshi: lives for 21000 blocks\n> 1000000-99999999 Satoshi: lives for 210000 blocks\n>\n> Only amounts above 1BTC lives forever - (or we could even impose aging on\n> those too..)\n>\n> The aged coins are simply included in the block mining reward, creating\n> another incentive for miners. Further, if we include all coins in this\n> recycle scheme coins will never be lost forever.\n>\n> This scheme will impose some lifetimes also on e.g. colored coins (hence\n> you need to use a certain amount to borrow space on the blockchain for the\n> time needed, or simply transact them).\n>\n> If you like this I would be happy to write it into a BIP.\n>\n> Thoughts ?\n>\n> ------------------------------------------------------------------------------\n> Keep yourself connected to Go Parallel:\n> BUILD Helping you discover the best ways to construct your parallel\n> projects.\n> http://goparallel.sourceforge.net\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/37667201/attachment.html>"
            },
            {
                "author": "Michael Gronager",
                "date": "2012-12-03T13:04:22",
                "message_text_only": "> 1) Wouldn't the need to re-transact your coins to keep them safe from \"vultures\", result in people frantically sending coins to themselves, and thus expand the block chain, instead of reduce growth?\n\nNot at the rate suggested\n\n> 2) putting those hard limits in passes a value judgement that IMO should not be present in the protocol. <1BTC may be worth a lot some day, or it could go the other way around, with dust spam of 10+ BTC. Either way the limits will have to be changed again, with yet another fork.\n\nWell, retransmitting 1BTC ones every 4 years isn't that bad. So I don't see a need for another fork for this reason.\n\n> 3) The (normal) user does not have a view of his balance consisting of inputs and outputs of various sizes. He just sees his balance as one number. And somehow, inexplicably (except through a very difficult explanation), it's going down... what if he has 10000 BTC in 0.9999999 BTC units? Annnnnd it's gone after 210000 blocks.\n\nAgree to this - and also to the fact that it will be hard to introduce - it would be changing the protocol quite a lot (perhaps too much).\n\nA better set of relay fee rules rewarding a decrease in # UTXOs is probably the (easiest) way forward.\n\n/M\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-03T15:00:18",
                "message_text_only": "> The main source for these 1 Satoshi payouts is Sahtoshi Dice.\n\nBecause people are making 1 satoshi bets, or is this part of their\nmessaging system?\n\nPieter is right, getting consensus behind your proposal is too hard\nand it's not likely to ever happen (I wouldn't support it, for one).\n\nOutputs that never get spent are simply using disk space, the working\nset is really defined by the coins that are moving. Disk space is\ncheap. So this problem doesn't feel that urgent to me. Now if people\nwere routinely spending those 1 satoshi outputs, it'd be less great as\nit'd increase the working set size.\n\nI suspect some of these coins can be cleared over time by adjusting\nwallets to consolidate outputs into the change outputs when a\ntransaction that has spare space before reaching the next size/fee\nlevel takes place."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-03T15:07:09",
                "message_text_only": "On Mon, Dec 3, 2012 at 10:00 AM, Mike Hearn <mike at plan99.net> wrote:\n>> The main source for these 1 Satoshi payouts is Sahtoshi Dice.\n>\n> Because people are making 1 satoshi bets, or is this part of their\n> messaging system?\n\nIt's part of their messaging system. Every losing play results in a\nnew 1e-8 output being created."
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-03T15:09:46",
                "message_text_only": "> It's part of their messaging system. Every losing play results in a\n> new 1e-8 output being created.\n\nEvery losing play? That's ... not excellent.\n\nWell, this why the payment protocol spec has a way for merchants to\nreply to customers with text instead of outputs."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2012-12-03T17:02:13",
                "message_text_only": "My only comment is that it should be called escheatment, not demurrage ;)\n\nIt's relation to demurrage is only that it might be desirable to garbage\ncollect decayed bit-dust. We looked at it early-on in the Freicoin\ndevelopment, but rejected it as a possibility due to reasons others have\nmentioned, even though we were starting from a hard-fork position.\n\n\nOn Mon, Dec 3, 2012 at 3:19 AM, Michael Gronager <gronager at ceptacle.com>wrote:\n\n> (Also posted on the forum:\n> https://bitcointalk.org/index.php?topic=128900.0)\n>\n> The amount of \"dust\" in the block chain is getting large and it is growing\n> all the time. Currently 11% of unspent tx outputs (UTXO) are of 1Satoshi\n> (0.00000001BTC), 32% is less than 0.0001BTC and 60% is less than 0.001BTC.\n> (Thanks to Jan for digging out these numbers!)\n>\n> This means that a huge part of the block chain is used for essentially\n> nothing - e.g. the sum of the 11% is worth roughly 2 US cents !\n>\n> The main source for these 1 Satoshi payouts is Sahtoshi Dice. And nothing\n> wrong with that, however, we should work on ensuring that too many too\n> small payments will not kill the size of the blockchain in the end -\n> further, they are essentially too small to be included in other transaction\n> as the added fee will often make it more expensive to remove them. Hence,\n> there is no incentive to get rid of them.\n>\n> I have an idea for a possible mitigation of this problem - introduction of\n> demurrage - not as in it normal meaning as a percentage over time (see:\n> http://en.wikipedia.org/wiki/Demurrage_(currency) btw, this has also been\n> tried in freicoin), but as a mean to recycle pennies over time. The\n> proposal is simple - UTXOs age out if not re-transacted - the smaller the\n> coin the faster the aging:\n> 1-99 Satoshi: lives for 210 blocks\n> 100-9999 Satoshi: lives for 2100 blocks\n> 10000-999999 Satoshi: lives for 21000 blocks\n> 1000000-99999999 Satoshi: lives for 210000 blocks\n>\n> Only amounts above 1BTC lives forever - (or we could even impose aging on\n> those too..)\n>\n> The aged coins are simply included in the block mining reward, creating\n> another incentive for miners. Further, if we include all coins in this\n> recycle scheme coins will never be lost forever.\n>\n> This scheme will impose some lifetimes also on e.g. colored coins (hence\n> you need to use a certain amount to borrow space on the blockchain for the\n> time needed, or simply transact them).\n>\n> If you like this I would be happy to write it into a BIP.\n>\n> Thoughts ?\n>\n> ------------------------------------------------------------------------------\n> Keep yourself connected to Go Parallel:\n> BUILD Helping you discover the best ways to construct your parallel\n> projects.\n> http://goparallel.sourceforge.net\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/5efe068d/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2012-12-04T09:54:38",
                "message_text_only": "On Monday 03 December 2012 11:19:37 Michael Gronager wrote:\n\n> The aged coins are simply included in the block mining reward, creating\n> another incentive for miners. Further, if we include all coins in this\n> recycle scheme coins will never be lost forever.\n\nIgnoring the cost of storing these never-spent outputs; there is absolutely no \nreason we need to ensure that coins aren't lost.  Nor worry about those that \nare.\n\nThe total bitcoins produced is an entirely arbitrary number -- a function of \nthe 210,000 halving rate and the initial block reward.  Satoshi could have \npicked anything for them and bitcoin would work exactly the same.\n\nLost coins never enter the economy ever again, and so supply is slightly lower \nthan it would have been, making all the non-lost coins worth ever so slightly \nmore.  Effectively: price adjustments will take care of lost coins.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            }
        ],
        "thread_summary": {
            "title": "Chain dust mitigation: Demurrage based Chain Vacuuming",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Michael Gronager",
                "Andreas Petersson",
                "Wladimir",
                "Mike Hearn",
                "Stephen Pair",
                "Alan Reiner",
                "Gregory Maxwell",
                "Andy Parkins",
                "Mark Friedenbach",
                "Pieter Wuille"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 33487
        }
    },
    {
        "title": "[Bitcoin-development] BIP 32 HD wallets, accounts should be labels not numbers",
        "thread_messages": [
            {
                "author": "Amir Taaki",
                "date": "2012-12-03T13:49:32",
                "message_text_only": "Can this be amended? I think it makes much more sense to allow people to input labels not numbers at this level.\n\nGeneral category names for different accounts is much more human than numbers, and you can still use incrementing numbers if you prefer."
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-12-03T13:54:12",
                "message_text_only": "On Mon, Dec 3, 2012 at 2:49 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Can this be amended? I think it makes much more sense to allow people to\n> input labels not numbers at this level.\n>\n> General category names for different accounts is much more human than\n> numbers, and you can still use incrementing numbers if you prefer.\n>\n\nThere is no way to iterate over all strings. The intention is that a wallet\napplication can detect a new account that becomes in use (e.g. during\ndisaster recovery), so the accounts get assigned incrementing numbers.\n\nI wouldn't mind adding the ability to do \"non-standard derivations\" using\narbitrary strings, if this recoverability property is not desired.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121203/e07ff9d8/attachment.html>"
            },
            {
                "author": "Amir Taaki",
                "date": "2012-12-03T14:48:34",
                "message_text_only": "ok, also what is the reasoning behind serialising points using a compressed format before going into the hash function? I'm looking at the sec1-v2.pdf and the compression format is a little confusing.\n\nI think the octet string for X is 32 bytes (using q = curve.order) and secp256k1 is a prime field so we follow step 2.2.1\n\n\n________________________________\nFrom: Pieter Wuille <pieter.wuille at gmail.com>\nTo: Amir Taaki <zgenjix at yahoo.com> \nCc: \"bitcoin-development at lists.sourceforge.net\" <bitcoin-development at lists.sourceforge.net> \nSent: Monday, December 3, 2012 2:54 PM\nSubject: Re: [Bitcoin-development] BIP 32 HD wallets, accounts should be labels not numbers\n\n\n\n\nOn Mon, Dec 3, 2012 at 2:49 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\nCan this be amended? I think it makes much more sense to allow people to input labels not numbers at this level.\n>\n>General category names for different accounts is much more human than numbers, and you can still use incrementing numbers if you prefer.\n>\n\nThere is no way to iterate over all strings. The intention is that a wallet application can detect a new account that becomes in use (e.g. during disaster recovery), so the accounts get assigned incrementing numbers.\n\nI wouldn't mind adding the ability to do \"non-standard derivations\" using arbitrary strings, if this recoverability property is not desired.\n\n--\u00a0\nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2012-12-03T20:44:40",
                "message_text_only": "On Mon, Dec 03, 2012 at 06:48:34AM -0800, Amir Taaki wrote:\n> ok, also what is the reasoning behind serialising points using a compressed\n> format before going into the hash function? I'm looking at the sec1-v2.pdf\n> and the compression format is a little confusing.\n\nI don't think there is a compelling reason to encourage uncompressed public\nkeys anymore on the network. They take more space in the block chain for no\nadditional value whatsoever. Software may of course continue supporting\nuncompressed keys if they wish to provide compatibility, but for a new\nstandard, I think it makes sense to standardize on just compressed keys.\nAnd since that software thus needs to support the compressed encoding,\nthere is no reason to use a different encoding inside the derivation scheme\nitself.\n\nRegarding the encoding itself, it is not hard: just 0x02 or 0x03 (depending\non whether Y is even or odd) followed by the 32-byte encoding of X. Decoding\nis harder, but is never needed in the derivation. Software internally can use\nany representation (and it will), which in almost all circumstances stores\nboth X and Y (and even more). Decoding compressed public keys is somewhat\nharder, as Y must be reconstructed (but the algorithm isn't hard) - this is\nonly necessary when someone wants to import an extended public key though for\nwatch-only wallets.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "BIP 32 HD wallets, accounts should be labels not numbers",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille",
                "Amir Taaki"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3878
        }
    },
    {
        "title": "[Bitcoin-development] Roadmap to getting users onto SPV clients",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2012-12-04T17:46:29",
                "message_text_only": "At the moment if you visit bitcoin.org then you're recommended to\ndownload the full client. I think we all agree that at some point we\nneed to start presenting users with something more like this:\n\n\nTo get started, download wallet apps A or B.\n\nIf you'd like to contribute your computing resources to the Bitcoin\nnetwork and have a fast computer with an unfiltered internet\nconnection, download:\n\n   - for desktop machines, Bitcoin-Qt\n   - for servers, bitcoind\n\n\n\nObviously not that exact wording.\n\nI personally feel it's a bit early for this, but it's true that users\nare being turned away by the fact that they're pointed to Bitcoin-Qt\nby default, so having some kind of roadmap or plan for changing that\nwould be good.\n\nI think MultiBit is maturing into a client that I'd feel comfortable\nrecommending to end users who take the fast-start path, though it\nstill has a few serious lacks (encrypted wallets aren't released yet,\nbloom filters will help performance a lot, needs to catch up with some\nnewer features). But there doesn't have to be a one true client.\n\nThe alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\nnot convinced this is the best use of time, but if somebody steps up\nto do it, that could also work. MultiBit has some unique features that\nare quite useful like integrating charting and exchange rate feeds.\n\nWhat does everyone think on this?"
            },
            {
                "author": "Alan Reiner",
                "date": "2012-12-04T18:03:11",
                "message_text_only": "My personal opinion is that the ideal first client has three features:\n\n(1) Starts up and is usable within a couple minutes (even 10 min the first\ntime would be okay, to sync block headers)\n(2) Supports Windows, Linux and OSX\n(3) Uses deterministic wallets that can produce a permanent backup\n(preferably paper)\n\nEncryption is a major upside, too, but people new enough to Bitcoin that\nthey need such a simple client, can survive without encryption (thye're not\ngoing to be holding a ton of coins) -- as long as they are made aware that\nthey do not currently have encryption, and the associated risks (and other\noptions).\n\nI think it's extremely important that users have a clear way to backup\ntheir coins to offline media or paper, in such a way that they don't ever\nneed to worry about it again.  Not only does it give users protection\nagainst hard-drive loss, it means that they may find it again in the far\nfuture when they haven't used Bitcoin in 2 years, and it reminds them that\nthey still have coins (and they don't have to type in 1000 private keys to\nget their coins)\n\nFor that reason, I think Multibit is an excellent choice.  I haven't spent\nmuch time with it, but I do understand it to  satisfy (1) and (2) clearly,\nand (3) may be happening in the near future (along with encryption).  But I\ndo wonder if it has enough staffing behind it to be the center of attention\n(no offense to jim618, but if this becomes the \"de-facto\" client for new\nusers, we should make sure there's a lot of people available to support it\n-- what if a major security bug is found?  how long would it take the\ncurrent team to identify, fix and test that bug?)\n\n-Alan\n\n\nOn Tue, Dec 4, 2012 at 12:46 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> At the moment if you visit bitcoin.org then you're recommended to\n> download the full client. I think we all agree that at some point we\n> need to start presenting users with something more like this:\n>\n>\n> To get started, download wallet apps A or B.\n>\n> If you'd like to contribute your computing resources to the Bitcoin\n> network and have a fast computer with an unfiltered internet\n> connection, download:\n>\n>    - for desktop machines, Bitcoin-Qt\n>    - for servers, bitcoind\n>\n>\n>\n> Obviously not that exact wording.\n>\n> I personally feel it's a bit early for this, but it's true that users\n> are being turned away by the fact that they're pointed to Bitcoin-Qt\n> by default, so having some kind of roadmap or plan for changing that\n> would be good.\n>\n> I think MultiBit is maturing into a client that I'd feel comfortable\n> recommending to end users who take the fast-start path, though it\n> still has a few serious lacks (encrypted wallets aren't released yet,\n> bloom filters will help performance a lot, needs to catch up with some\n> newer features). But there doesn't have to be a one true client.\n>\n> The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\n> not convinced this is the best use of time, but if somebody steps up\n> to do it, that could also work. MultiBit has some unique features that\n> are quite useful like integrating charting and exchange rate feeds.\n>\n> What does everyone think on this?\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/f76a7294/attachment.html>"
            },
            {
                "author": "Will",
                "date": "2012-12-04T18:08:01",
                "message_text_only": "...or should we be directing people to a (vetted) list of cloud services -\nI think this has a significantly lower entry cost than any client. I know\nthe mybitcoin debacle has clouded (pun intended) people's views of these\nproviders, but blockchain.info (for example) really does seem quite well\nengineered, and satisfies many of the features in particular a very low\ncost of entry, cross platform support and what appears to be very good\nsecurity (e.g. two factor)\n\nWill\n\nOn 4 December 2012 17:46, Mike Hearn <mike at plan99.net> wrote:\n\n> At the moment if you visit bitcoin.org then you're recommended to\n> download the full client. I think we all agree that at some point we\n> need to start presenting users with something more like this:\n>\n>\n> To get started, download wallet apps A or B.\n>\n> If you'd like to contribute your computing resources to the Bitcoin\n> network and have a fast computer with an unfiltered internet\n> connection, download:\n>\n>    - for desktop machines, Bitcoin-Qt\n>    - for servers, bitcoind\n>\n>\n>\n> Obviously not that exact wording.\n>\n> I personally feel it's a bit early for this, but it's true that users\n> are being turned away by the fact that they're pointed to Bitcoin-Qt\n> by default, so having some kind of roadmap or plan for changing that\n> would be good.\n>\n> I think MultiBit is maturing into a client that I'd feel comfortable\n> recommending to end users who take the fast-start path, though it\n> still has a few serious lacks (encrypted wallets aren't released yet,\n> bloom filters will help performance a lot, needs to catch up with some\n> newer features). But there doesn't have to be a one true client.\n>\n> The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\n> not convinced this is the best use of time, but if somebody steps up\n> to do it, that could also work. MultiBit has some unique features that\n> are quite useful like integrating charting and exchange rate feeds.\n>\n> What does everyone think on this?\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/cca423f4/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-04T18:17:42",
                "message_text_only": "On Tue, Dec 4, 2012 at 12:46 PM, Mike Hearn <mike at plan99.net> wrote:\n> The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\n> not convinced this is the best use of time, but if somebody steps up\n> to do it, that could also work.\n\nI strongly believe that if community leads with client software which\nis not a full _capable_ node (e.g. which can begin life as a SPV node\nbut at least eventually become full if the system resources permit)\nthen Bitcoin will fail, or at least fail to be anything but the\nworld's most inefficient centralized payment system.  Obviously SPV\nnodes are excellent tools for getting bitcoin into less capable\nsystems, but they aren't a general replacement for the software the\nparticipants in Bitcoin run.\n\n\u2014 Because the properties promised by the system can not be upheld if\nthere is only a fairly small number of self selecting nodes enforcing\nthe rules. If we wanted a system where its security against theft,\ndenial of service, and non-inflation were governed by the consensus of\n{mtgox,blockchain.info, deepbit, bitpay, slush, btcguild, bitminter}\nwe could have something infinitely more scalable by just using\nsomething OT like with a simple O(N) consensus between these parties.\nNo disrespect intended to any of these services\u2014 but a system whos\nrules were only enforced at the good graces of a small number of\ninterested parties is not what the users of bitcoin signed up for.\n\nPeople obviously care about supporting the goals and security of a the\nsystem they use but actions speak louder than words.  If a\nnon-validating node is promoted then we're telling people that it's\nnot important that many people run them.  If running a full node\nrequires using different software (with a different interface) or a\nmuch more painful initialization than another promoted option then it\nwill be correctly perceived as costly. If people perceive it to be\nboth costly and not important then rational participants will not run\nit. The result will be fragile to non-existent security, where\ndishonest or exploitative parties benefit from running all the full\nnodes until they start ripping people off and shift the equilibrium\njust a little towards running costly nodes.\n\nIt sounds to me that you're insisting that you're asking people who\noppose degrading our recommendations to commit to a costly rushed\ndevelopment timeline. I think this is a false choice.\n\nThere is no set timeline for the adoption of Bitcoin\u2014 man has survived\neons without Bitcoin just fine\u2014 and there are many practical reasons\nwhy slow adoption is beneficial, including reducing the harm users\nexperience from growing pains.  By allowing things to mature at their\nown pace we can preserve the principles that make the system valuable.\n\nIf the new user experience is sufficiently bad (and I agree it's bad,\nesp with the current release versions of Bitcoin-Qt) then that should\njustify more support of work that improves it without compromising the\nsystem. If it's not bad enough to apply those resources, then it's not\nbad enough to justify compromising it: as this sort of change is hard\nto reverse."
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-04T20:58:54",
                "message_text_only": "> It sounds to me that you're insisting that you're asking people who\n> oppose degrading our recommendations to commit to a costly rushed\n> development timeline. I think this is a false choice.\n\nHardly. I don't have any particular timeline in mind. But I disagree\nwe have \"forever\". New ideas have a certain time window to take off\nand become credible. If they never overcome their problems in that\ntime window, eventually people just give up and move on. Does anyone\ntake desktop Linux seriously anymore? No. \"The year of desktop Linux\"\nis a joke. People took it seriously in 2001 but despite great progress\nsince, the excitement and attention has gone. There were steady\nimprovements over the last 10 years but nobody is creating desktop\nLinux startups anymore - Bitcoin shouldn't go the same way.\n\nIt's unclear we need to have every man and his dog run a full node.\nTor is a successful P2P network where the number of users vastly\noutstrips the number of nodes, and exit nodes in particular are a\nscarce resource run by people who know what they're doing and commit\nto it.\n\nThe Tor guys could have said \"every node should be an exit if\npossible\", but that would have been a short term optimization at the\ncost of long term stability, and anyway doesn't seem to have been\nnecessary so far. Even with no incentives, they were able to obtain\nthe resources they need.\n\nSo why should Bitcoin be different? If there are a million users\nsupported by 50,000 full nodes, that wouldn't sound unhealthy to me.\nWe can easily send a clear and consistent \"this is important, please\nhelp\" message without complicated auto-upgrade/downgrade schemes that\nrisk annoying users."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-04T21:41:58",
                "message_text_only": "On Tue, Dec 4, 2012 at 3:58 PM, Mike Hearn <mike at plan99.net> wrote:\n>> It sounds to me that you're insisting that you're asking people who\n>> oppose degrading our recommendations to commit to a costly rushed\n>> development timeline. I think this is a false choice.\n>\n> Hardly. I don't have any particular timeline in mind. But I disagree\n> we have \"forever\". New ideas have a certain time window to take off\n> and become credible.\n\nMarketing initiatives have limited windows.  This matters, perhaps,\nwhen you're some VC pumping cash into a startup with the hopes of\nbeing the next stockmarket pump and dump darling.  Outside of that\npeople use whatever they use because it works for them.\n\nAnd by the numbers Linux desktops are more common than they've ever\nbeen\u2014 and certainly Linux kernel _systems_ half the people I know have\none in their pocket and its hard to go more than a few hours without\ntouching one.  To some extent the \"Year of the Linux desktop\" is a bit\nlike the \"Year of being able to turn lead into gold\" ... we can turn\nlead into gold now, but the particle accelerators, atomic power, and\natomic weapons enabled by the same technology are far more interesting\ndue to the particle realities of this. So we didn't get the ubiquitous\nLinux desktop: We got the ubiquitious Linux server, the ubiquitous\nLinux-kernel smart phone, the ubiquitous Linux television, media\nplayer, HVAC controller, etc. instead.\n\nDesktops\u2014 well, that didn't meet people's hopes though I think not for\nthe lack of marketing on the part of Linux, but because Apple stepped\nup and produced middle ground products that attracted a larger\naudience. Especially as MSFT dropped the ball. They did some things\nbetter, had a running start, and had a non open source software\nbusiness model which made reaping rewards easier.\n\nBut I don't see how any of this has anything to do with Bitcoin...\nExcept for the point that if Bitcoin doesn't become the money system\neveryone uses and instead becomes the money system infrastructure all\nthe systems people use depend on\u2014 just as Linux has with the desktop,\nwhere it might not be on the desktop but its in router firmware, cloud\nservers, and just about everything else\u2014 I wouldn't consider that much\nof a loss.\n\n> time window, eventually people just give up and move on. Does anyone\n> take desktop Linux seriously anymore? No. \"The year of desktop Linux\"\n> is a joke. People took it seriously in 2001 but despite great progress\n> since, the excitement and attention has gone. There were steady\n> improvements over the last 10 years but nobody is creating desktop\n> Linux startups anymore\n\nBitcoin already missed its first\u2014 and perhaps only\u2014 fad window in any\ncase. Today people say \"Bitcoin? Thats still around? I thought it got\nhacked\". ... thanks to compromised centralized services.\n\n> It's unclear we need to have every man and his dog run a full node.\n\nEvery man and his dog? Perhaps not.  But as many as can\u2014 probably so.\n\nIf we depend on the organic need for full nodes to overcome cost and\neffort to run one there will always be major incentives to let someone\nelse do that, and the system would have its equilibrium right on the\nbrink of insecurity. Perhaps worse, since insecurity is most obvious\nretrospectively. Security doesn't make for a good market force.\n\n> Tor is a successful P2P network where the number of users vastly\n> outstrips the number of nodes, and exit nodes in particular are a\n> scarce resource run by people who know what they're doing and commit\n> to it.\n\nTor is a distributed but controlled, by a small number of directory\nauthority operators, system.\n\nIt is a good system. But it has a trust model which is categorically\nweaker than the one in Bitcoin.  If you want something where a\nmajority of a dozen signing keys\u2014 hopefully in the hands of trusted\nparties\u2014 can decide the state of the system you can produce someting\nfar superior to Bitcoin\u2014 something that gives near instant\nnon-reversable transactions, something that gives good client security\nwithout the complexity of a SPV node, etc.\n\nBut that isn't Bitcoin.\n\n> Even with no incentives, they were able to obtain\n> the resources they need.\n\nAnd yet every tor user\u2014 if the have the bandwidth available can be a\nfull internal relay and the software nags them to do it (and also nags\nthem to act as invisible bridges for blocking avoidance), and every\nuser is technically able to run an exit (though they don't bludgeon\nusers to do that, because of the legal/political/technical issues\ninvolved).  To do any of this doesn't require a user to switch to\ndifferent software, and the tor project has previously opposed client\nonly software.\n\n> So why should Bitcoin be different?\n\nIt's less different than you make it out to be\u2014 but it _is_ different.\n  Bitcoin is a distributed currency. The value of bitcoin comes from\nthe soundness of its properties and from the persistence of its\nsecurity. If the integrity of the distributed ledger is disrupted the\ndamage produced, both in funds stolen and in undermining the\nconfidence of the system, can be irreversible. Because Bitcoin's value\ncomes from confidence in Bitcoin and not from the specific\nfunctionality of Bitcoins (they're random numbers that sit on your\ndisk) even if the ledger isn't actually compromised but people\nreasonably believe it could be compromised that undermines the value.\n Tor, on the other hand, is a functioning system whos value depends on\nits current usefulness, and not the past or future security.\n\nCompare in your mind\u2014 Say everyone just found out that at block\n420,000 Bitcoin would stop enforcing signature correctness or block\nsubsidy values (and this wasn't going to be fixed), and you also found\nout that one year from now Tor would hand over their sites, source\ncode repositories, and directory authority keys to Iran (and you have\nno suspicion that they already had done so).   How fast would you stop\nusing Tor vs how fast would to sell whatever coins you could?\n\n> We can easily send a clear and consistent \"this is important, please\n> help\" message without complicated auto-upgrade/downgrade schemes that\n> risk annoying users.\n\nI don't think we really can send such a message.  Thanks just the same\nas asking for donations, not completely unsuccessful but not easy to\nmake successful either.  You're arguing for people running distinct\nsoftware which has no capability to be a full node, and changing what\nthey're doing in order to support the network. This maximizes the\ncost, because in addition to the real cost the user must take a\nswitching cost too, and deemphasizes investing in keeping the full\nnode software as usable because 'oh just run a lite node if the full\nis too slow'."
            },
            {
                "author": "Alan Reiner",
                "date": "2012-12-04T22:44:01",
                "message_text_only": "This discussion sounds to be veering slightly off track.  I think we should\nbe focusing on how we will ease the transition for new users to get on the\nnetwork and use it.  Talking about the necessity and costs of running full\nnodes in the future is important, but irrelevant here:  unless we don't\nwant users who aren't willing to run full nodes, we need to accommodate\nusers who want to simply \"use\" the network, not necessarily \"support\" it.  *I'm\nmaking an assumption here that we want new users whether they use a full\nnode or not*.  Greg's point looks like it's veering towards \"we don't want\nto grow the network unless we're going to get more full nodes out of it.\"\n  I'm of the opinion, like Mike Hearn, that the number of full nodes needed\nfor a healthy network is *not* O(N) in the number of users of the network.\n I expect it to be something more like O(sqrt(N))... or perhaps there's\neven an upper limit above which the network gets no benefit, even if all 7\nbillion humans were using it.  (the bottleneck would be size of blocks and\nCPU processing power at that point, not a shortage of full nodes).  Would\nwe rather have a system that is \"full-node-or-nothing\" and drive away users\nthat won't support the network, or accommodate those users with various\ngradations of participation?\n\nI believe my proposal for an address-based meta-chain (or something like\nit) is *exactly* what is needed in the long run.  It could almost obsolete\nthis entire discussion.  However, as Greg pointed out there is a long,\ntreacherous path between the theory I presented, and a working&robust\nimplementation that can serve as the backbone for future SPV nodes.  I have\nevery intention to help pioneer that when Armory has other major features\ncompleted (such as multi-sig), but it's not something that we can even\nconsider in the near- or medium-term as a solution to rely on.  I'd be\nsurprised if any such solution existed in the next 6-12 months.\n\nI think it is very much in everyone's interest here to encourage new users\nto start \"using\" Bitcoin, even if they don't \"support\" it.  As long as\nthere is a convenient channel for interested users to get more information\nabout the system, the benefits of spending the effort to run a full node,\nand the features available in more-advanced clients that they might benefit\nfrom, then I'm not personally concerned about a shortage of full nodes, and\nwe should carry forward with the idea of promoting SPV nodes for the\nreally-new users.\n\n-Alan\n\n\n\n\nOn Tue, Dec 4, 2012 at 4:41 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Dec 4, 2012 at 3:58 PM, Mike Hearn <mike at plan99.net> wrote:\n> >> It sounds to me that you're insisting that you're asking people who\n> >> oppose degrading our recommendations to commit to a costly rushed\n> >> development timeline. I think this is a false choice.\n> >\n> > Hardly. I don't have any particular timeline in mind. But I disagree\n> > we have \"forever\". New ideas have a certain time window to take off\n> > and become credible.\n>\n> Marketing initiatives have limited windows.  This matters, perhaps,\n> when you're some VC pumping cash into a startup with the hopes of\n> being the next stockmarket pump and dump darling.  Outside of that\n> people use whatever they use because it works for them.\n>\n> And by the numbers Linux desktops are more common than they've ever\n> been\u2014 and certainly Linux kernel _systems_ half the people I know have\n> one in their pocket and its hard to go more than a few hours without\n> touching one.  To some extent the \"Year of the Linux desktop\" is a bit\n> like the \"Year of being able to turn lead into gold\" ... we can turn\n> lead into gold now, but the particle accelerators, atomic power, and\n> atomic weapons enabled by the same technology are far more interesting\n> due to the particle realities of this. So we didn't get the ubiquitous\n> Linux desktop: We got the ubiquitious Linux server, the ubiquitous\n> Linux-kernel smart phone, the ubiquitous Linux television, media\n> player, HVAC controller, etc. instead.\n>\n> Desktops\u2014 well, that didn't meet people's hopes though I think not for\n> the lack of marketing on the part of Linux, but because Apple stepped\n> up and produced middle ground products that attracted a larger\n> audience. Especially as MSFT dropped the ball. They did some things\n> better, had a running start, and had a non open source software\n> business model which made reaping rewards easier.\n>\n> But I don't see how any of this has anything to do with Bitcoin...\n> Except for the point that if Bitcoin doesn't become the money system\n> everyone uses and instead becomes the money system infrastructure all\n> the systems people use depend on\u2014 just as Linux has with the desktop,\n> where it might not be on the desktop but its in router firmware, cloud\n> servers, and just about everything else\u2014 I wouldn't consider that much\n> of a loss.\n>\n> > time window, eventually people just give up and move on. Does anyone\n> > take desktop Linux seriously anymore? No. \"The year of desktop Linux\"\n> > is a joke. People took it seriously in 2001 but despite great progress\n> > since, the excitement and attention has gone. There were steady\n> > improvements over the last 10 years but nobody is creating desktop\n> > Linux startups anymore\n>\n> Bitcoin already missed its first\u2014 and perhaps only\u2014 fad window in any\n> case. Today people say \"Bitcoin? Thats still around? I thought it got\n> hacked\". ... thanks to compromised centralized services.\n>\n> > It's unclear we need to have every man and his dog run a full node.\n>\n> Every man and his dog? Perhaps not.  But as many as can\u2014 probably so.\n>\n> If we depend on the organic need for full nodes to overcome cost and\n> effort to run one there will always be major incentives to let someone\n> else do that, and the system would have its equilibrium right on the\n> brink of insecurity. Perhaps worse, since insecurity is most obvious\n> retrospectively. Security doesn't make for a good market force.\n>\n> > Tor is a successful P2P network where the number of users vastly\n> > outstrips the number of nodes, and exit nodes in particular are a\n> > scarce resource run by people who know what they're doing and commit\n> > to it.\n>\n> Tor is a distributed but controlled, by a small number of directory\n> authority operators, system.\n>\n> It is a good system. But it has a trust model which is categorically\n> weaker than the one in Bitcoin.  If you want something where a\n> majority of a dozen signing keys\u2014 hopefully in the hands of trusted\n> parties\u2014 can decide the state of the system you can produce someting\n> far superior to Bitcoin\u2014 something that gives near instant\n> non-reversable transactions, something that gives good client security\n> without the complexity of a SPV node, etc.\n>\n> But that isn't Bitcoin.\n>\n> > Even with no incentives, they were able to obtain\n> > the resources they need.\n>\n> And yet every tor user\u2014 if the have the bandwidth available can be a\n> full internal relay and the software nags them to do it (and also nags\n> them to act as invisible bridges for blocking avoidance), and every\n> user is technically able to run an exit (though they don't bludgeon\n> users to do that, because of the legal/political/technical issues\n> involved).  To do any of this doesn't require a user to switch to\n> different software, and the tor project has previously opposed client\n> only software.\n>\n> > So why should Bitcoin be different?\n>\n> It's less different than you make it out to be\u2014 but it _is_ different.\n>   Bitcoin is a distributed currency. The value of bitcoin comes from\n> the soundness of its properties and from the persistence of its\n> security. If the integrity of the distributed ledger is disrupted the\n> damage produced, both in funds stolen and in undermining the\n> confidence of the system, can be irreversible. Because Bitcoin's value\n> comes from confidence in Bitcoin and not from the specific\n> functionality of Bitcoins (they're random numbers that sit on your\n> disk) even if the ledger isn't actually compromised but people\n> reasonably believe it could be compromised that undermines the value.\n>  Tor, on the other hand, is a functioning system whos value depends on\n> its current usefulness, and not the past or future security.\n>\n> Compare in your mind\u2014 Say everyone just found out that at block\n> 420,000 Bitcoin would stop enforcing signature correctness or block\n> subsidy values (and this wasn't going to be fixed), and you also found\n> out that one year from now Tor would hand over their sites, source\n> code repositories, and directory authority keys to Iran (and you have\n> no suspicion that they already had done so).   How fast would you stop\n> using Tor vs how fast would to sell whatever coins you could?\n>\n> > We can easily send a clear and consistent \"this is important, please\n> > help\" message without complicated auto-upgrade/downgrade schemes that\n> > risk annoying users.\n>\n> I don't think we really can send such a message.  Thanks just the same\n> as asking for donations, not completely unsuccessful but not easy to\n> make successful either.  You're arguing for people running distinct\n> software which has no capability to be a full node, and changing what\n> they're doing in order to support the network. This maximizes the\n> cost, because in addition to the real cost the user must take a\n> switching cost too, and deemphasizes investing in keeping the full\n> node software as usable because 'oh just run a lite node if the full\n> is too slow'.\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/93f291de/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-05T00:27:50",
                "message_text_only": "On Tue, Dec 4, 2012 at 5:44 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> Greg's point looks like it's veering towards \"we don't want to grow\n> the network unless we're going to get more full nodes out of it.\"\n\nNo\u2026\n\nThere is no fundamental completion between taking what actions we can\nto maximize the decentralization of the network and making the\nsoftware maximally friendly and painless to get started with and use.\nIt's possible\u2014 not even deep rocket science\u2014 to create software that\naccommodates both.\n\nAnd because of this, I don't think it's acceptable to promote\nsolutions which may endanger the decentralization that makes the\nsystem worthwhile in the first place.  If the current experience is so\npoor that you'd even consider talking about promoting directions which\nreduce its robustness then thats evidence that it would be worth\nfinding more resources to make the experience better without doing\nanything the that reduces the model, even if you've got an argument\nthat maybe we can get away with it.  If there isn't interest in\nputting in more resources to make these improvements then maybe the\nissue isn't as bad as we think it is?\n\n> I think it is very much in everyone's interest here to encourage new users to start \"using\" Bitcoin, even if they don't \"support\" it.\n\nAbsolutely\u2014 and yet that has nothing to do with promoting software to\nusers which only consumes without directly contributing and which\ndoesn't even have the capability to do so even if the user wants to\n(or much less, is indifferent)."
            },
            {
                "author": "Alan Reiner",
                "date": "2012-12-05T02:08:43",
                "message_text_only": "Our divergence is on two points (personal opinions):\n\n(1) I don't think there is any real risk to the centralization of the\nnetwork by promoting a SPV (purely-consuming) node to brand-new users. \nIn my opinion (but I'm not as familiar with the networking as you), as\nlong as all full nodes are full-validation, the bottleneck will be\ncomputation and bandwidth, long before a constant 10k nodes would be\ninsufficient to support propagating data through the network.  In fact,\nI was under the impression that \"connectedness\" was the real metric of\nconcern (and resilience of that connectedness to large percentage of\nusers disappearing suddenly).  If that's true, above a certain number of\nnodes, the connectedness isn't really going to get any better (I know\nit's not really that simple, but I feel like it is up to 10x the current\nnetwork size).\n\n(2) I think the current experience *is* really poor.  You seem to\nsuggest that the question for these new users is whether they will use\nfull-node-or-lite-node, but I believe it will be a decision between\nlite-node-or-nothing-at-all (losing interest altogether).  Waiting a day\nfor the full node to synchronize, and then run into issues like\nblkindex.dat corruption when their system crashes for some unrelated\nreason and they have to resync for another day... they'll be gone in a\nheartbeat.\n\nUsers need to experience, as quickly and easily as possible, that they\ncan move money across the world, without signing up for anything or\npaying any fees.  After they understand the value of the system and want\nto use it, they are much more likely to become educated and willing to\nsupport the network with full node. \n\n-Alan\n\n\n\n\nOn 12/04/2012 07:27 PM, Gregory Maxwell wrote:\n> On Tue, Dec 4, 2012 at 5:44 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n>> Greg's point looks like it's veering towards \"we don't want to grow\n>> the network unless we're going to get more full nodes out of it.\"\n> No\u2026\n>\n> There is no fundamental completion between taking what actions we can\n> to maximize the decentralization of the network and making the\n> software maximally friendly and painless to get started with and use.\n> It's possible\u2014 not even deep rocket science\u2014 to create software that\n> accommodates both.\n>\n> And because of this, I don't think it's acceptable to promote\n> solutions which may endanger the decentralization that makes the\n> system worthwhile in the first place.  If the current experience is so\n> poor that you'd even consider talking about promoting directions which\n> reduce its robustness then thats evidence that it would be worth\n> finding more resources to make the experience better without doing\n> anything the that reduces the model, even if you've got an argument\n> that maybe we can get away with it.  If there isn't interest in\n> putting in more resources to make these improvements then maybe the\n> issue isn't as bad as we think it is?\n>\n>> I think it is very much in everyone's interest here to encourage new users to start \"using\" Bitcoin, even if they don't \"support\" it.\n> Absolutely\u2014 and yet that has nothing to do with promoting software to\n> users which only consumes without directly contributing and which\n> doesn't even have the capability to do so even if the user wants to\n> (or much less, is indifferent)."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-05T02:54:52",
                "message_text_only": "On Tue, Dec 4, 2012 at 9:08 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> Our divergence is on two points (personal opinions):\n>\n> (1) I don't think there is any real risk to the centralization of the\n> network by promoting a SPV (purely-consuming) node to brand-new users.\n> In my opinion (but I'm not as familiar with the networking as you), as\n> long as all full nodes are full-validation, the bottleneck will be\n> computation and bandwidth, long before a constant 10k nodes would be\n> insufficient to support propagating data through the network.\n\nNot so\u2014 a moderately fast multicore desktop machine can keep up with\nthe maximum possible validation rate of the Bitcoin network and the\nbandwidth has a long term maximum rate of about 14kbit/sec\u2014 though\nyou'll want at least ten times that for convergence stability and the\nability feed multiple peers.\n\nHere are the worst blocks testnet3 (which has some intentionally\nconstructed maximum sized blocks),E31230 :\n(with the new parallel validation code)\n- Verify 2166 txins: 250.29ms (0.116ms/txin)\n- Verify 3386 txins: 1454.25ms (0.429ms/txin)\n- Verify 5801 txins: 575.46ms (0.099ms/txin)\n- Verify 6314 txins: 625.05ms (0.099ms/txin)\nEven the slowest one _validates_ at 400x realtime. (these measurements\nare probably a bit noisy\u2014 but the point is that its fast).\n(the connecting is fast too, but thats obvious with such a small database)\n\nAlthough I haven't tested leveldb+ultraprune with a really enormous\ntxout set or generally with sustained maximum load\u2014 so there may be\nother gaffs in the software that get exposed with sustained load, but\nthey'd all be correctable. Sounds like some interesting stuff to test\nwith on testnet fork that has the POW test disabled.\n\nWhile syncing up a behind node can take a while\u2014 keep in mind that\nyou're expecting to sync up weeks of network work in hours. Even\n'slow' is quite fast.\n\n> In fact,\n> I was under the impression that \"connectedness\" was the real metric of\n> concern (and resilience of that connectedness to large percentage of\n> users disappearing suddenly).  If that's true, above a certain number of\n> nodes, the connectedness isn't really going to get any better (I know\n> it's not really that simple, but I feel like it is up to 10x the current\n> network size).\n\nThats not generally concern for me. There are a number of DOS attack\nrisks... But attacker linear DOS attacks aren't generally avoidable\nand they don't persist.\n\nOf the class of connectedness concerns I have is that a sybil attacker\ncould spin up enormous numbers of nodes and then use them to partition\nlarge miners.  So, e.g. find BitTaco's node(s) and the nodes for\nminers covering 25% hashpower and get them into a separate partition\nfrom the rest of the network. Then they give double spends to that\npartition and use them to purchase an unlimited supply of digitally\ndelivered tacos\u2014 allowing their captured miners to build an ill fated\nfork\u2014 and drop the partition once the goods are delivered.\n\nBut there is no amount of full nodes that removes this concern,\nespecially if you allow for attackers which have compromised ISPs.\nIt can be adequately addressed by a healthy darknet of private\nauthenticated peerings between miners and other likely targets. I've\nalso thrown out some ideas on using merged mined node IDs to make some\nkinds of sybil attacks harder ... but it'll be interesting to see how\nthe deployment of ASICs influences the concentration of hashpower\u2014 it\nseems like there has already been a substantial move away from the\nlargest pools. Less hashpower consolidation makes attacks like this\nless worrisome.\n\n> (2) I think the current experience *is* really poor.\n\nYes, I said so specifically.  But the fact that people are flapping\ntheir lips here instead of testing the bitcoin-qt git master which is\nan 1-2 order of magnitude improvement suggests that perhaps I'm wrong\nabout that.  Certainly the dearth of people testing and making bug\nreports suggests people don't actually care that much.\n\n> You seem to\n> suggest that the question for these new users is whether they will use\n> full-node-or-lite-node, but I believe it will be a decision between\n> lite-node-or-nothing-at-all (losing interest altogether).\n\nNo. The \"question\" that I'm concerned with is do we promote lite nodes\nas equally good option\u2014 even for high end systems\u2014 remove the\nincentive for people to create, improve, and adopt more useful full\nnode software and forever degrade the security of the system.\n\n> Waiting a day\n> for the full node to synchronize, and then run into issues like\n> blkindex.dat corruption when their system crashes for some unrelated\n> reason and they have to resync for another day... they'll be gone in a\n> heartbeat.\n\nThe current software patches plus parallelism can sync on a fast\nsystem with luck network access (or a local copy of the data) in under\nan hour.\n\nThis is no replacement for start as SPV, but nor are handicapped\nclient programs a replacement for making fully capable ones acceptably\nperforming.\n\n> Users need to experience, as quickly and easily as possible, that they\n> can move money across the world, without signing up for anything or\n> paying any fees.\n\nMaking the all the software painless for users is a great goal\u2014 and\none I share.  I still maintain that it has nothing to do with\npromoting less capable and secure software to users."
            },
            {
                "author": "Jim Nguyen",
                "date": "2012-12-05T05:38:00",
                "message_text_only": "Gavin's grandma needs to be able to use bitcoin.  Here is a real world\nsampling of the types of people wanting to use bitcoin but are having some\ndifficulty which I have collected from Facebook.  Should we listen to the\nend user? :-P\n\n*\"what is the intention of Bitcoin? Is it supposed to be - eventually - for\ndummies like myself or is it just for those individuals who are code and\nalgorithm writers? I downloaded a wallet but how do I know if I need more\nsoftware or a massive computer system to solve \"the problem\" for the next\nblock? With all the talk of mathematical problem solving on a world wide\nnetwork of computers I can't see a small laptop figuring out anything thus\nnot gaining any bitcoins. Why should I be interested in this if it appears\nit's just for computer scientists?\"*\n\n*\"hi, instaled bitcoin qt, but after it dowladed all the stuff, now i get\nDEP protecction from windows, and it tells me bitcoinQT need to run with\nDEP on, dont let me make an exception for it, nor work it i turn DEP only\nfor sys, so hwat i should do?\"*\n\n*\"hi, i'm new to bitcoin, i got a bunch of free bitcoins from a bunch of\nthe free sites. how come when i tried to send my bitcoins to myself, it\nsays the fee exceeds the balance? I thought there was no fees?\"*\n\n*\"Is there a way to speed up the process of synchronisation with the\nnetwork? It has been taken ages on my MAC.*\n*Any help would be nice\"*\n*\n*\n*and more...*\n\nSorry if this doesn't belong to the bitcoin-development email list.  I just\nsee this as end-user/customer data gathering to refine the requirements,\nsince this is software engineering...isn't it?\n\nJim\n\nOn Tue, Dec 4, 2012 at 6:54 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Dec 4, 2012 at 9:08 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> > Our divergence is on two points (personal opinions):\n> >\n> > (1) I don't think there is any real risk to the centralization of the\n> > network by promoting a SPV (purely-consuming) node to brand-new users.\n> > In my opinion (but I'm not as familiar with the networking as you), as\n> > long as all full nodes are full-validation, the bottleneck will be\n> > computation and bandwidth, long before a constant 10k nodes would be\n> > insufficient to support propagating data through the network.\n>\n> Not so\u2014 a moderately fast multicore desktop machine can keep up with\n> the maximum possible validation rate of the Bitcoin network and the\n> bandwidth has a long term maximum rate of about 14kbit/sec\u2014 though\n> you'll want at least ten times that for convergence stability and the\n> ability feed multiple peers.\n>\n> Here are the worst blocks testnet3 (which has some intentionally\n> constructed maximum sized blocks),E31230 :\n> (with the new parallel validation code)\n> - Verify 2166 txins: 250.29ms (0.116ms/txin)\n> - Verify 3386 txins: 1454.25ms (0.429ms/txin)\n> - Verify 5801 txins: 575.46ms (0.099ms/txin)\n> - Verify 6314 txins: 625.05ms (0.099ms/txin)\n> Even the slowest one _validates_ at 400x realtime. (these measurements\n> are probably a bit noisy\u2014 but the point is that its fast).\n> (the connecting is fast too, but thats obvious with such a small database)\n>\n> Although I haven't tested leveldb+ultraprune with a really enormous\n> txout set or generally with sustained maximum load\u2014 so there may be\n> other gaffs in the software that get exposed with sustained load, but\n> they'd all be correctable. Sounds like some interesting stuff to test\n> with on testnet fork that has the POW test disabled.\n>\n> While syncing up a behind node can take a while\u2014 keep in mind that\n> you're expecting to sync up weeks of network work in hours. Even\n> 'slow' is quite fast.\n>\n> > In fact,\n> > I was under the impression that \"connectedness\" was the real metric of\n> > concern (and resilience of that connectedness to large percentage of\n> > users disappearing suddenly).  If that's true, above a certain number of\n> > nodes, the connectedness isn't really going to get any better (I know\n> > it's not really that simple, but I feel like it is up to 10x the current\n> > network size).\n>\n> Thats not generally concern for me. There are a number of DOS attack\n> risks... But attacker linear DOS attacks aren't generally avoidable\n> and they don't persist.\n>\n> Of the class of connectedness concerns I have is that a sybil attacker\n> could spin up enormous numbers of nodes and then use them to partition\n> large miners.  So, e.g. find BitTaco's node(s) and the nodes for\n> miners covering 25% hashpower and get them into a separate partition\n> from the rest of the network. Then they give double spends to that\n> partition and use them to purchase an unlimited supply of digitally\n> delivered tacos\u2014 allowing their captured miners to build an ill fated\n> fork\u2014 and drop the partition once the goods are delivered.\n>\n> But there is no amount of full nodes that removes this concern,\n> especially if you allow for attackers which have compromised ISPs.\n> It can be adequately addressed by a healthy darknet of private\n> authenticated peerings between miners and other likely targets. I've\n> also thrown out some ideas on using merged mined node IDs to make some\n> kinds of sybil attacks harder ... but it'll be interesting to see how\n> the deployment of ASICs influences the concentration of hashpower\u2014 it\n> seems like there has already been a substantial move away from the\n> largest pools. Less hashpower consolidation makes attacks like this\n> less worrisome.\n>\n> > (2) I think the current experience *is* really poor.\n>\n> Yes, I said so specifically.  But the fact that people are flapping\n> their lips here instead of testing the bitcoin-qt git master which is\n> an 1-2 order of magnitude improvement suggests that perhaps I'm wrong\n> about that.  Certainly the dearth of people testing and making bug\n> reports suggests people don't actually care that much.\n>\n> > You seem to\n> > suggest that the question for these new users is whether they will use\n> > full-node-or-lite-node, but I believe it will be a decision between\n> > lite-node-or-nothing-at-all (losing interest altogether).\n>\n> No. The \"question\" that I'm concerned with is do we promote lite nodes\n> as equally good option\u2014 even for high end systems\u2014 remove the\n> incentive for people to create, improve, and adopt more useful full\n> node software and forever degrade the security of the system.\n>\n> > Waiting a day\n> > for the full node to synchronize, and then run into issues like\n> > blkindex.dat corruption when their system crashes for some unrelated\n> > reason and they have to resync for another day... they'll be gone in a\n> > heartbeat.\n>\n> The current software patches plus parallelism can sync on a fast\n> system with luck network access (or a local copy of the data) in under\n> an hour.\n>\n> This is no replacement for start as SPV, but nor are handicapped\n> client programs a replacement for making fully capable ones acceptably\n> performing.\n>\n> > Users need to experience, as quickly and easily as possible, that they\n> > can move money across the world, without signing up for anything or\n> > paying any fees.\n>\n> Making the all the software painless for users is a great goal\u2014 and\n> one I share.  I still maintain that it has nothing to do with\n> promoting less capable and secure software to users.\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/52b496b5/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2012-12-05T07:50:28",
                "message_text_only": "Jim,\n\nMost of those issues don't have to do with the SPV versus non-SPV problem.\n\nFirst person doesn't understand what Bitcoin is supposed to do (he's\nconfusing mining and running a node). An information problem that could be\nsolved by explaining what is going on.\n\nAnother one seems to have a problem with DEP. That's probably an issue with\nhis OS configuration.\n\nThe third one is confused about the fees. Again, an information problem.\n\nOnly the fourth one is concerned with synchronization. The other ones could\nhappen with any client, as they're either based on misconceptions about\nbitcoin as a whole or computer problems.\n\nThis doesn't in any way make switching to another, reduced security model\nclient preferable. Let's first try to improve the Bitcoin experience with\nfull security model, and if that somehow turns out to be impossible it's\nalways possible to recommend some other client based on the 'user type'.\n\nI don't agree that this point is now. Anyway, security and stability of the\nnetwork is of utmost importance to do anything in the future, better to\ngrow organically than explode.\n\nMany initiatives are underway to improve the Satoshi client (for example to\nhave Bitcoin-Qt behave as SPV client during initial block download, and as\nfull node after that), but as usual in open source development, many of us\nare doing this basically for fun in our free time it does not always go as\nfast as users would like.\n\nI wish there was a straightforward solution for that, yeah pooling together\nour development on one or two clients instead of a zillion different ones\ncould help, but everyone has more fun working on their own client that's\njust how things go :)\n\nWladimir\n\nOn Wed, Dec 5, 2012 at 6:38 AM, Jim Nguyen <jimmy.winn at gmail.com> wrote:\n\n> Gavin's grandma needs to be able to use bitcoin.  Here is a real world\n> sampling of the types of people wanting to use bitcoin but are having some\n> difficulty which I have collected from Facebook.  Should we listen to the\n> end user? :-P\n>\n> *\"what is the intention of Bitcoin? Is it supposed to be - eventually -\n> for dummies like myself or is it just for those individuals who are code\n> and algorithm writers? I downloaded a wallet but how do I know if I need\n> more software or a massive computer system to solve \"the problem\" for the\n> next block? With all the talk of mathematical problem solving on a world\n> wide network of computers I can't see a small laptop figuring out anything\n> thus not gaining any bitcoins. Why should I be interested in this if it\n> appears it's just for computer scientists?\"*\n>\n> *\"hi, instaled bitcoin qt, but after it dowladed all the stuff, now i get\n> DEP protecction from windows, and it tells me bitcoinQT need to run with\n> DEP on, dont let me make an exception for it, nor work it i turn DEP only\n> for sys, so hwat i should do?\"*\n>\n> *\"hi, i'm new to bitcoin, i got a bunch of free bitcoins from a bunch of\n> the free sites. how come when i tried to send my bitcoins to myself, it\n> says the fee exceeds the balance? I thought there was no fees?\"*\n>\n> *\"Is there a way to speed up the process of synchronisation with the\n> network? It has been taken ages on my MAC.*\n> *Any help would be nice\"*\n> *\n> *\n> *and more...*\n>\n> Sorry if this doesn't belong to the bitcoin-development email list.  I\n> just see this as end-user/customer data gathering to refine the\n> requirements, since this is software engineering...isn't it?\n>\n> Jim\n>\n> On Tue, Dec 4, 2012 at 6:54 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Tue, Dec 4, 2012 at 9:08 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n>> > Our divergence is on two points (personal opinions):\n>> >\n>> > (1) I don't think there is any real risk to the centralization of the\n>> > network by promoting a SPV (purely-consuming) node to brand-new users.\n>> > In my opinion (but I'm not as familiar with the networking as you), as\n>> > long as all full nodes are full-validation, the bottleneck will be\n>> > computation and bandwidth, long before a constant 10k nodes would be\n>> > insufficient to support propagating data through the network.\n>>\n>> Not so\u2014 a moderately fast multicore desktop machine can keep up with\n>> the maximum possible validation rate of the Bitcoin network and the\n>> bandwidth has a long term maximum rate of about 14kbit/sec\u2014 though\n>> you'll want at least ten times that for convergence stability and the\n>> ability feed multiple peers.\n>>\n>> Here are the worst blocks testnet3 (which has some intentionally\n>> constructed maximum sized blocks),E31230 :\n>> (with the new parallel validation code)\n>> - Verify 2166 txins: 250.29ms (0.116ms/txin)\n>> - Verify 3386 txins: 1454.25ms (0.429ms/txin)\n>> - Verify 5801 txins: 575.46ms (0.099ms/txin)\n>> - Verify 6314 txins: 625.05ms (0.099ms/txin)\n>> Even the slowest one _validates_ at 400x realtime. (these measurements\n>> are probably a bit noisy\u2014 but the point is that its fast).\n>> (the connecting is fast too, but thats obvious with such a small database)\n>>\n>> Although I haven't tested leveldb+ultraprune with a really enormous\n>> txout set or generally with sustained maximum load\u2014 so there may be\n>> other gaffs in the software that get exposed with sustained load, but\n>> they'd all be correctable. Sounds like some interesting stuff to test\n>> with on testnet fork that has the POW test disabled.\n>>\n>> While syncing up a behind node can take a while\u2014 keep in mind that\n>> you're expecting to sync up weeks of network work in hours. Even\n>> 'slow' is quite fast.\n>>\n>> > In fact,\n>> > I was under the impression that \"connectedness\" was the real metric of\n>> > concern (and resilience of that connectedness to large percentage of\n>> > users disappearing suddenly).  If that's true, above a certain number of\n>> > nodes, the connectedness isn't really going to get any better (I know\n>> > it's not really that simple, but I feel like it is up to 10x the current\n>> > network size).\n>>\n>> Thats not generally concern for me. There are a number of DOS attack\n>> risks... But attacker linear DOS attacks aren't generally avoidable\n>> and they don't persist.\n>>\n>> Of the class of connectedness concerns I have is that a sybil attacker\n>> could spin up enormous numbers of nodes and then use them to partition\n>> large miners.  So, e.g. find BitTaco's node(s) and the nodes for\n>> miners covering 25% hashpower and get them into a separate partition\n>> from the rest of the network. Then they give double spends to that\n>> partition and use them to purchase an unlimited supply of digitally\n>> delivered tacos\u2014 allowing their captured miners to build an ill fated\n>> fork\u2014 and drop the partition once the goods are delivered.\n>>\n>> But there is no amount of full nodes that removes this concern,\n>> especially if you allow for attackers which have compromised ISPs.\n>> It can be adequately addressed by a healthy darknet of private\n>> authenticated peerings between miners and other likely targets. I've\n>> also thrown out some ideas on using merged mined node IDs to make some\n>> kinds of sybil attacks harder ... but it'll be interesting to see how\n>> the deployment of ASICs influences the concentration of hashpower\u2014 it\n>> seems like there has already been a substantial move away from the\n>> largest pools. Less hashpower consolidation makes attacks like this\n>> less worrisome.\n>>\n>> > (2) I think the current experience *is* really poor.\n>>\n>> Yes, I said so specifically.  But the fact that people are flapping\n>> their lips here instead of testing the bitcoin-qt git master which is\n>> an 1-2 order of magnitude improvement suggests that perhaps I'm wrong\n>> about that.  Certainly the dearth of people testing and making bug\n>> reports suggests people don't actually care that much.\n>>\n>> > You seem to\n>> > suggest that the question for these new users is whether they will use\n>> > full-node-or-lite-node, but I believe it will be a decision between\n>> > lite-node-or-nothing-at-all (losing interest altogether).\n>>\n>> No. The \"question\" that I'm concerned with is do we promote lite nodes\n>> as equally good option\u2014 even for high end systems\u2014 remove the\n>> incentive for people to create, improve, and adopt more useful full\n>> node software and forever degrade the security of the system.\n>>\n>> > Waiting a day\n>> > for the full node to synchronize, and then run into issues like\n>> > blkindex.dat corruption when their system crashes for some unrelated\n>> > reason and they have to resync for another day... they'll be gone in a\n>> > heartbeat.\n>>\n>> The current software patches plus parallelism can sync on a fast\n>> system with luck network access (or a local copy of the data) in under\n>> an hour.\n>>\n>> This is no replacement for start as SPV, but nor are handicapped\n>> client programs a replacement for making fully capable ones acceptably\n>> performing.\n>>\n>> > Users need to experience, as quickly and easily as possible, that they\n>> > can move money across the world, without signing up for anything or\n>> > paying any fees.\n>>\n>> Making the all the software painless for users is a great goal\u2014 and\n>> one I share.  I still maintain that it has nothing to do with\n>> promoting less capable and secure software to users.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n>> Remotely access PCs and mobile devices and provide instant support\n>> Improve your efficiency, and focus on delivering more value-add services\n>> Discover what IT Professionals Know. Rescue delivers\n>> http://p.sf.net/sfu/logmein_12329d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121205/0467fa08/attachment.html>"
            },
            {
                "author": "Gary Rowe",
                "date": "2012-12-05T09:43:58",
                "message_text_only": "I would like to chime on on the user experience of the SPV client (in\nparticular MultiBit).\n\nWithout exception, everyone that I have introduced Bitcoin (which is a lot\nof people) have expected an \"instant-on\" experience. It has to clobber\nPayPal and credit cards or people won't give it a second look, let alone a\nsecond chance. SPV clients deliver on that expectation.\n\nOnce the user has the great initial \"wow!\" moment then their interest in\nBitcoin is reinforced and they tend to explore further, particularly into\nthe economic theory behind it. Many decide to install the full node out of\na sense of community contribution to the security of the network.\n\nHaving a hybrid mode of SPV first then full node second should be something\nthat a user has control over - it is their computing resources we are using\nafter all and Bitcoin should not be perceived as a drain.\n\n\nOn 5 December 2012 07:50, Wladimir <laanwj at gmail.com> wrote:\n\n> Jim,\n>\n> Most of those issues don't have to do with the SPV versus non-SPV problem.\n>\n> First person doesn't understand what Bitcoin is supposed to do (he's\n> confusing mining and running a node). An information problem that could be\n> solved by explaining what is going on.\n>\n> Another one seems to have a problem with DEP. That's probably an issue\n> with his OS configuration.\n>\n> The third one is confused about the fees. Again, an information problem.\n>\n> Only the fourth one is concerned with synchronization. The other ones\n> could happen with any client, as they're either based on misconceptions\n> about bitcoin as a whole or computer problems.\n>\n> This doesn't in any way make switching to another, reduced security model\n> client preferable. Let's first try to improve the Bitcoin experience with\n> full security model, and if that somehow turns out to be impossible it's\n> always possible to recommend some other client based on the 'user type'.\n>\n> I don't agree that this point is now. Anyway, security and stability of\n> the network is of utmost importance to do anything in the future, better to\n> grow organically than explode.\n>\n> Many initiatives are underway to improve the Satoshi client (for\n> example to have Bitcoin-Qt behave as SPV client during initial block\n> download, and as full node after that), but as usual in open source\n> development, many of us are doing this basically for fun in our free time\n> it does not always go as fast as users would like.\n>\n> I wish there was a straightforward solution for that, yeah pooling\n> together our development on one or two clients instead of a zillion\n> different ones could help, but everyone has more fun working on their own\n> client that's just how things go :)\n>\n> Wladimir\n>\n> On Wed, Dec 5, 2012 at 6:38 AM, Jim Nguyen <jimmy.winn at gmail.com> wrote:\n>\n>> Gavin's grandma needs to be able to use bitcoin.  Here is a real world\n>> sampling of the types of people wanting to use bitcoin but are having some\n>> difficulty which I have collected from Facebook.  Should we listen to the\n>> end user? :-P\n>>\n>> *\"what is the intention of Bitcoin? Is it supposed to be - eventually -\n>> for dummies like myself or is it just for those individuals who are code\n>> and algorithm writers? I downloaded a wallet but how do I know if I need\n>> more software or a massive computer system to solve \"the problem\" for the\n>> next block? With all the talk of mathematical problem solving on a world\n>> wide network of computers I can't see a small laptop figuring out anything\n>> thus not gaining any bitcoins. Why should I be interested in this if it\n>> appears it's just for computer scientists?\"*\n>>\n>> *\"hi, instaled bitcoin qt, but after it dowladed all the stuff, now i\n>> get DEP protecction from windows, and it tells me bitcoinQT need to run\n>> with DEP on, dont let me make an exception for it, nor work it i turn DEP\n>> only for sys, so hwat i should do?\"*\n>>\n>> *\"hi, i'm new to bitcoin, i got a bunch of free bitcoins from a bunch of\n>> the free sites. how come when i tried to send my bitcoins to myself, it\n>> says the fee exceeds the balance? I thought there was no fees?\"*\n>>\n>> *\"Is there a way to speed up the process of synchronisation with the\n>> network? It has been taken ages on my MAC.*\n>> *Any help would be nice\"*\n>> *\n>> *\n>> *and more...*\n>>\n>> Sorry if this doesn't belong to the bitcoin-development email list.  I\n>> just see this as end-user/customer data gathering to refine the\n>> requirements, since this is software engineering...isn't it?\n>>\n>> Jim\n>>\n>> On Tue, Dec 4, 2012 at 6:54 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>>\n>>> On Tue, Dec 4, 2012 at 9:08 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n>>> > Our divergence is on two points (personal opinions):\n>>> >\n>>> > (1) I don't think there is any real risk to the centralization of the\n>>> > network by promoting a SPV (purely-consuming) node to brand-new users.\n>>> > In my opinion (but I'm not as familiar with the networking as you), as\n>>> > long as all full nodes are full-validation, the bottleneck will be\n>>> > computation and bandwidth, long before a constant 10k nodes would be\n>>> > insufficient to support propagating data through the network.\n>>>\n>>> Not so\u2014 a moderately fast multicore desktop machine can keep up with\n>>> the maximum possible validation rate of the Bitcoin network and the\n>>> bandwidth has a long term maximum rate of about 14kbit/sec\u2014 though\n>>> you'll want at least ten times that for convergence stability and the\n>>> ability feed multiple peers.\n>>>\n>>> Here are the worst blocks testnet3 (which has some intentionally\n>>> constructed maximum sized blocks),E31230 :\n>>> (with the new parallel validation code)\n>>> - Verify 2166 txins: 250.29ms (0.116ms/txin)\n>>> - Verify 3386 txins: 1454.25ms (0.429ms/txin)\n>>> - Verify 5801 txins: 575.46ms (0.099ms/txin)\n>>> - Verify 6314 txins: 625.05ms (0.099ms/txin)\n>>> Even the slowest one _validates_ at 400x realtime. (these measurements\n>>> are probably a bit noisy\u2014 but the point is that its fast).\n>>> (the connecting is fast too, but thats obvious with such a small\n>>> database)\n>>>\n>>> Although I haven't tested leveldb+ultraprune with a really enormous\n>>> txout set or generally with sustained maximum load\u2014 so there may be\n>>> other gaffs in the software that get exposed with sustained load, but\n>>> they'd all be correctable. Sounds like some interesting stuff to test\n>>> with on testnet fork that has the POW test disabled.\n>>>\n>>> While syncing up a behind node can take a while\u2014 keep in mind that\n>>> you're expecting to sync up weeks of network work in hours. Even\n>>> 'slow' is quite fast.\n>>>\n>>> > In fact,\n>>> > I was under the impression that \"connectedness\" was the real metric of\n>>> > concern (and resilience of that connectedness to large percentage of\n>>> > users disappearing suddenly).  If that's true, above a certain number\n>>> of\n>>> > nodes, the connectedness isn't really going to get any better (I know\n>>> > it's not really that simple, but I feel like it is up to 10x the\n>>> current\n>>> > network size).\n>>>\n>>> Thats not generally concern for me. There are a number of DOS attack\n>>> risks... But attacker linear DOS attacks aren't generally avoidable\n>>> and they don't persist.\n>>>\n>>> Of the class of connectedness concerns I have is that a sybil attacker\n>>> could spin up enormous numbers of nodes and then use them to partition\n>>> large miners.  So, e.g. find BitTaco's node(s) and the nodes for\n>>> miners covering 25% hashpower and get them into a separate partition\n>>> from the rest of the network. Then they give double spends to that\n>>> partition and use them to purchase an unlimited supply of digitally\n>>> delivered tacos\u2014 allowing their captured miners to build an ill fated\n>>> fork\u2014 and drop the partition once the goods are delivered.\n>>>\n>>> But there is no amount of full nodes that removes this concern,\n>>> especially if you allow for attackers which have compromised ISPs.\n>>> It can be adequately addressed by a healthy darknet of private\n>>> authenticated peerings between miners and other likely targets. I've\n>>> also thrown out some ideas on using merged mined node IDs to make some\n>>> kinds of sybil attacks harder ... but it'll be interesting to see how\n>>> the deployment of ASICs influences the concentration of hashpower\u2014 it\n>>> seems like there has already been a substantial move away from the\n>>> largest pools. Less hashpower consolidation makes attacks like this\n>>> less worrisome.\n>>>\n>>> > (2) I think the current experience *is* really poor.\n>>>\n>>> Yes, I said so specifically.  But the fact that people are flapping\n>>> their lips here instead of testing the bitcoin-qt git master which is\n>>> an 1-2 order of magnitude improvement suggests that perhaps I'm wrong\n>>> about that.  Certainly the dearth of people testing and making bug\n>>> reports suggests people don't actually care that much.\n>>>\n>>> > You seem to\n>>> > suggest that the question for these new users is whether they will use\n>>> > full-node-or-lite-node, but I believe it will be a decision between\n>>> > lite-node-or-nothing-at-all (losing interest altogether).\n>>>\n>>> No. The \"question\" that I'm concerned with is do we promote lite nodes\n>>> as equally good option\u2014 even for high end systems\u2014 remove the\n>>> incentive for people to create, improve, and adopt more useful full\n>>> node software and forever degrade the security of the system.\n>>>\n>>> > Waiting a day\n>>> > for the full node to synchronize, and then run into issues like\n>>> > blkindex.dat corruption when their system crashes for some unrelated\n>>> > reason and they have to resync for another day... they'll be gone in a\n>>> > heartbeat.\n>>>\n>>> The current software patches plus parallelism can sync on a fast\n>>> system with luck network access (or a local copy of the data) in under\n>>> an hour.\n>>>\n>>> This is no replacement for start as SPV, but nor are handicapped\n>>> client programs a replacement for making fully capable ones acceptably\n>>> performing.\n>>>\n>>> > Users need to experience, as quickly and easily as possible, that they\n>>> > can move money across the world, without signing up for anything or\n>>> > paying any fees.\n>>>\n>>> Making the all the software painless for users is a great goal\u2014 and\n>>> one I share.  I still maintain that it has nothing to do with\n>>> promoting less capable and secure software to users.\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n>>> Remotely access PCs and mobile devices and provide instant support\n>>> Improve your efficiency, and focus on delivering more value-add services\n>>> Discover what IT Professionals Know. Rescue delivers\n>>> http://p.sf.net/sfu/logmein_12329d2d\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n>> Remotely access PCs and mobile devices and provide instant support\n>> Improve your efficiency, and focus on delivering more value-add services\n>> Discover what IT Professionals Know. Rescue delivers\n>> http://p.sf.net/sfu/logmein_12329d2d\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121205/5e194147/attachment.html>"
            },
            {
                "author": "Robert Backhaus",
                "date": "2012-12-05T10:19:16",
                "message_text_only": "On 5 December 2012 19:43, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\n> I would like to chime on on the user experience of the SPV client (in\n> particular MultiBit).\n>\n> Without exception, everyone that I have introduced Bitcoin (which is a lot\n> of people) have expected an \"instant-on\" experience. It has to clobber\n> PayPal and credit cards or people won't give it a second look, let alone a\n> second chance. SPV clients deliver on that expectation.\n>\n> Once the user has the great initial \"wow!\" moment then their interest in\n> Bitcoin is reinforced and they tend to explore further, particularly into\n> the economic theory behind it. Many decide to install the full node out of\n> a sense of community contribution to the security of the network.\n>\n> Having a hybrid mode of SPV first then full node second should be\n> something that a user has control over - it is their computing resources we\n> are using after all and Bitcoin should not be perceived as a drain.\n\n\nHybrid SPV sounds like a good idea to me. Allows it to work out-of-the-box,\nthen slowly gets up-to-speed with the full network - working low priority,\nor even not at all, if it detects a slow system or network link.\nAnother idea is always distributing the client with a checkpoint that is\nonly days old, then starting by pulling in more recent blocks, so it can\ntransact. Following that, it will pull in progressively older blocks as\ntime permits.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121205/c358248c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-05T10:43:24",
                "message_text_only": ">> I was under the impression that \"connectedness\" was the real metric of\n>> concern\n\nI think the real thing we need full nodes for is \"sockets\" where by\nsocket I mean \"resources needed to serve another node\".\n\nLast year we actually ran out of sockets and it took forever for new\nnodes to connect because so many existing nodes were full. We don't\nwant to be in that situation again. So we need full nodes, nobody\ndisputes that.\n\nThe question is, if you have a node on your average desktop machine\nthat gets switched off at night, has a stupid virus scanner that\ninsists on checking every database write, has users who go from a bit\nof light word processing to watching HD video and expect no stutters\nor slowdowns - how valuable is such a node, really? Also has to be\nweighed against the risk of eventual user frustration when they\ndiscover Bitcoin is slowing their computer down and go around telling\ntheir friends how much it sucks.\n\nUltraprune+LevelDB+other optimizations are great. They aren't game\nchangers for two reasons:\n\n1) Eventually network traffic should increase to use up the additional\nperformance unlocked by optimizations\n\n2) Users demand instant on not just at first start, but any time they\nopen their wallet. I don't think it ever makes sense for a regular end\nuser to have their wallet integrated with a full node because it means\nif you get an email saying \"oh hey I sent you the money\" and you start\nyour wallet so you can see it/spend it, you still have to wait a while\nuntil it catches up from whenever it was last quit. I've done this a\nbunch of times and it really sucks to wait.\n\nThe only time it makes sense to have a wallet integrated with a full\nnode is if that node never shuts down, ie, it's a merchant node.\n\nIf a casual user has to be using an SPV wallet all the time no matter\nwhat, then it's not a big leap to simply have both an SPV client and a\nfull node running in parallel for users who want to support the\nnetwork. And how do we recruit such users? Well I've got nothing\nagainst light wallets noticing that the system seems to have high\nuptime, external connectivity etc and putting a notice on the screen\nasking users to take part. For Windows users you could have a\none-click install that sets up a background service (I think .NET\nOneClick makes this possible), so getting a full node is totally easy\nand transparent.\n\nGoing back to the Tor analogy, whilst I agree with Gregorys arguments\nthat they aren't quite the same, the Tor guys have wanted to\nautomatically opt users in to being relays for a while. But the\ntechnical complexity of doing it well is really high. It's still on\ntheir wishlist even though Tor is quite old. A good first base to\nreach is simply having accurate recommendations. If users start\ncomplaining that they were asked to run a full node but when they did,\nperformance suffered unacceptably, then we know we need better\nheuristics before automatically opting users in."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2012-12-04T18:57:40",
                "message_text_only": "Alan's UTxO meta-chain proposal becomes vastly easier to do now that\nultraprune is merged. That would allow the Satoshi client to know it's\nwallet balance and operate with a >=SPV level of security during the\ninitial block download, and keep them on the path of becoming a full node.\nIf users can see their balances, send and receive transactions, and\notherwise go about their business (except for mining) during the initial\nblock download, would that not address your concerns?\n\nIMHO the only time bitcoin.org should recommend a SPV-only client is when\nit is dynamically when it is being accessed from a mobile device, but\nthat's a separate issue.\n\nMark\n\n\nOn Tue, Dec 4, 2012 at 9:46 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> At the moment if you visit bitcoin.org then you're recommended to\n> download the full client. I think we all agree that at some point we\n> need to start presenting users with something more like this:\n>\n>\n> To get started, download wallet apps A or B.\n>\n> If you'd like to contribute your computing resources to the Bitcoin\n> network and have a fast computer with an unfiltered internet\n> connection, download:\n>\n>    - for desktop machines, Bitcoin-Qt\n>    - for servers, bitcoind\n>\n>\n>\n> Obviously not that exact wording.\n>\n> I personally feel it's a bit early for this, but it's true that users\n> are being turned away by the fact that they're pointed to Bitcoin-Qt\n> by default, so having some kind of roadmap or plan for changing that\n> would be good.\n>\n> I think MultiBit is maturing into a client that I'd feel comfortable\n> recommending to end users who take the fast-start path, though it\n> still has a few serious lacks (encrypted wallets aren't released yet,\n> bloom filters will help performance a lot, needs to catch up with some\n> newer features). But there doesn't have to be a one true client.\n>\n> The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\n> not convinced this is the best use of time, but if somebody steps up\n> to do it, that could also work. MultiBit has some unique features that\n> are quite useful like integrating charting and exchange rate feeds.\n>\n> What does everyone think on this?\n>\n>\n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/f061420b/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-04T19:36:39",
                "message_text_only": "On Tue, Dec 4, 2012 at 1:57 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> Alan's\n  :(\n\n> UTxO meta-chain proposal becomes vastly easier to do now that\n> ultraprune is merged.\n\nNo, not really. Somewhat easier due to some structural changes, but it\nstill needs to invent and get consensus on a normative data structure\nand people need to write implementations of the required operations on\nit (implementations probably required to prove performance for\nconsensus).  We still have to sort through the tradeoff of making a\n_single_ data structure the normative merkle tree representation for\nthe UTxO set to the preclusion of other implementations\u2014 including\nones which are  asymptotically faster, such as a straight hash table.\n\nThere are also issues that need to be sorted out like key structure\u2014\nthe most useful index for validation is txid:vout keyed, but Alan\nwanted 'address' prefixed, which is not friendly for validation but\nenables robust query by address\u2014 a query that the referce normal\nbitcoin software doesn't even optionally support right now.  Any\ndisagreements on this point must be hammed out because the structure\nwould be normative.\n\n> That would allow the Satoshi client to know it's\n> wallet balance and operate with a >=SPV level of security during the initial\n> block download, and keep them on the path of becoming a full node. If users\n> can see their balances, send and receive transactions, and otherwise go\n> about their business (except for mining) during the initial block download,\n> would that not address your concerns?\n\nThe above said, that is all good stuff too. And I do thing starting\nfast with reduced security (be it to SPV+ or SPV) is a good idea."
            },
            {
                "author": "Jim",
                "date": "2012-12-04T19:56:38",
                "message_text_only": "I think Alan's list of 'what should an ideal first client look like' is\nright here.\n\n>From the first time user's perspective if they can get up and running\nrelatively quickly but still have the safety of a deterministic wallet\nthen they should have a good first user experience. MultiBit is not\nthere yet, but BIP32 support is on the roadmap.\n\nIf we have a 'shopping list' of what we want in a first client then that\ngives me (and others) a list of what to focus on implementing.\n\nAlso, as BIP32 support is added to clients and codebases then the actual\nvariant of software to use to access your wallet will become relatively\nless important. Combined with a standardised seed -> passphrase\nalgorithm the user can just type in their long passphrase into any BIP32\ncompliant software and click/ buzz/ whirr : there is their wallet. We\nshould have a little logo for HD wallet compliance ! :-)\n\nAs Bitcoin's users become more varied there will be a spectrum of how\n'involved' they want to be computationally so we should have offerings\nto reflect this.\n\n\n\nOn Tue, Dec 4, 2012, at 07:09 PM,\nbitcoin-development-request at lists.sourceforge.net wrote:\n> Send Bitcoin-development mailing list submissions to\n> \tbitcoin-development at lists.sourceforge.net\n> \n> To subscribe or unsubscribe via the World Wide Web, visit\n> \thttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> or, via email, send a message with subject or body 'help' to\n> \tbitcoin-development-request at lists.sourceforge.net\n> \n> You can reach the person managing the list at\n> \tbitcoin-development-owner at lists.sourceforge.net\n> \n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of Bitcoin-development digest...\"\n> \n> \n> Today's Topics:\n> \n>    1. Re: Roadmap to getting users onto SPV clients (Alan Reiner)\n>    2. Re: Roadmap to getting users onto SPV clients (Gregory Maxwell)\n>    3. Re: Roadmap to getting users onto SPV clients (Mark Friedenbach)\n>    4. Re: Roadmap to getting users onto SPV clients (Will)\n> \n> \n> ----------------------------------------------------------------------\n> \n> Message: 1\n> Date: Tue, 4 Dec 2012 13:03:11 -0500\n> From: Alan Reiner <etotheipi at gmail.com>\n> Subject: Re: [Bitcoin-development] Roadmap to getting users onto SPV\n> \tclients\n> To: Mike Hearn <mike at plan99.net>\n> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\n> Message-ID:\n> \t<CALf2ePzFZLmQ2+0hmOO0m_=EFy5mOtJ22jy2CYMxmU5U5e3s1w at mail.gmail.com>\n> Content-Type: text/plain; charset=\"iso-8859-1\"\n> \n> My personal opinion is that the ideal first client has three features:\n> \n> (1) Starts up and is usable within a couple minutes (even 10 min the\n> first\n> time would be okay, to sync block headers)\n> (2) Supports Windows, Linux and OSX\n> (3) Uses deterministic wallets that can produce a permanent backup\n> (preferably paper)\n> \n> Encryption is a major upside, too, but people new enough to Bitcoin that\n> they need such a simple client, can survive without encryption (thye're\n> not\n> going to be holding a ton of coins) -- as long as they are made aware\n> that\n> they do not currently have encryption, and the associated risks (and\n> other\n> options).\n> \n> I think it's extremely important that users have a clear way to backup\n> their coins to offline media or paper, in such a way that they don't ever\n> need to worry about it again.  Not only does it give users protection\n> against hard-drive loss, it means that they may find it again in the far\n> future when they haven't used Bitcoin in 2 years, and it reminds them\n> that\n> they still have coins (and they don't have to type in 1000 private keys\n> to\n> get their coins)\n> \n> For that reason, I think Multibit is an excellent choice.  I haven't\n> spent\n> much time with it, but I do understand it to  satisfy (1) and (2)\n> clearly,\n> and (3) may be happening in the near future (along with encryption).  But\n> I\n> do wonder if it has enough staffing behind it to be the center of\n> attention\n> (no offense to jim618, but if this becomes the \"de-facto\" client for new\n> users, we should make sure there's a lot of people available to support\n> it\n> -- what if a major security bug is found?  how long would it take the\n> current team to identify, fix and test that bug?)\n> \n> -Alan\n> \n> \n> On Tue, Dec 4, 2012 at 12:46 PM, Mike Hearn <mike at plan99.net> wrote:\n> \n> > At the moment if you visit bitcoin.org then you're recommended to\n> > download the full client. I think we all agree that at some point we\n> > need to start presenting users with something more like this:\n> >\n> >\n> > To get started, download wallet apps A or B.\n> >\n> > If you'd like to contribute your computing resources to the Bitcoin\n> > network and have a fast computer with an unfiltered internet\n> > connection, download:\n> >\n> >    - for desktop machines, Bitcoin-Qt\n> >    - for servers, bitcoind\n> >\n> >\n> >\n> > Obviously not that exact wording.\n> >\n> > I personally feel it's a bit early for this, but it's true that users\n> > are being turned away by the fact that they're pointed to Bitcoin-Qt\n> > by default, so having some kind of roadmap or plan for changing that\n> > would be good.\n> >\n> > I think MultiBit is maturing into a client that I'd feel comfortable\n> > recommending to end users who take the fast-start path, though it\n> > still has a few serious lacks (encrypted wallets aren't released yet,\n> > bloom filters will help performance a lot, needs to catch up with some\n> > newer features). But there doesn't have to be a one true client.\n> >\n> > The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\n> > not convinced this is the best use of time, but if somebody steps up\n> > to do it, that could also work. MultiBit has some unique features that\n> > are quite useful like integrating charting and exchange rate feeds.\n> >\n> > What does everyone think on this?\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> > Remotely access PCs and mobile devices and provide instant support\n> > Improve your efficiency, and focus on delivering more value-add services\n> > Discover what IT Professionals Know. Rescue delivers\n> > http://p.sf.net/sfu/logmein_12329d2d\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> \n> ------------------------------\n> \n> Message: 2\n> Date: Tue, 4 Dec 2012 13:17:42 -0500\n> From: Gregory Maxwell <gmaxwell at gmail.com>\n> Subject: Re: [Bitcoin-development] Roadmap to getting users onto SPV\n> \tclients\n> To: Mike Hearn <mike at plan99.net>\n> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\n> Message-ID:\n> \t<CAAS2fgQYV7aR86QOwvqMLpFZ+MAwSOSZvV6XuZdXvqjeYziRng at mail.gmail.com>\n> Content-Type: text/plain; charset=UTF-8\n> \n> On Tue, Dec 4, 2012 at 12:46 PM, Mike Hearn <mike at plan99.net> wrote:\n> > The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\n> > not convinced this is the best use of time, but if somebody steps up\n> > to do it, that could also work.\n> \n> I strongly believe that if community leads with client software which\n> is not a full _capable_ node (e.g. which can begin life as a SPV node\n> but at least eventually become full if the system resources permit)\n> then Bitcoin will fail, or at least fail to be anything but the\n> world's most inefficient centralized payment system.  Obviously SPV\n> nodes are excellent tools for getting bitcoin into less capable\n> systems, but they aren't a general replacement for the software the\n> participants in Bitcoin run.\n> \n> ? Because the properties promised by the system can not be upheld if\n> there is only a fairly small number of self selecting nodes enforcing\n> the rules. If we wanted a system where its security against theft,\n> denial of service, and non-inflation were governed by the consensus of\n> {mtgox,blockchain.info, deepbit, bitpay, slush, btcguild, bitminter}\n> we could have something infinitely more scalable by just using\n> something OT like with a simple O(N) consensus between these parties.\n> No disrespect intended to any of these services? but a system whos\n> rules were only enforced at the good graces of a small number of\n> interested parties is not what the users of bitcoin signed up for.\n> \n> People obviously care about supporting the goals and security of a the\n> system they use but actions speak louder than words.  If a\n> non-validating node is promoted then we're telling people that it's\n> not important that many people run them.  If running a full node\n> requires using different software (with a different interface) or a\n> much more painful initialization than another promoted option then it\n> will be correctly perceived as costly. If people perceive it to be\n> both costly and not important then rational participants will not run\n> it. The result will be fragile to non-existent security, where\n> dishonest or exploitative parties benefit from running all the full\n> nodes until they start ripping people off and shift the equilibrium\n> just a little towards running costly nodes.\n> \n> It sounds to me that you're insisting that you're asking people who\n> oppose degrading our recommendations to commit to a costly rushed\n> development timeline. I think this is a false choice.\n> \n> There is no set timeline for the adoption of Bitcoin? man has survived\n> eons without Bitcoin just fine? and there are many practical reasons\n> why slow adoption is beneficial, including reducing the harm users\n> experience from growing pains.  By allowing things to mature at their\n> own pace we can preserve the principles that make the system valuable.\n> \n> If the new user experience is sufficiently bad (and I agree it's bad,\n> esp with the current release versions of Bitcoin-Qt) then that should\n> justify more support of work that improves it without compromising the\n> system. If it's not bad enough to apply those resources, then it's not\n> bad enough to justify compromising it: as this sort of change is hard\n> to reverse.\n> \n> \n> \n> ------------------------------\n> \n> Message: 3\n> Date: Tue, 4 Dec 2012 10:57:40 -0800\n> From: Mark Friedenbach <mark at monetize.io>\n> Subject: Re: [Bitcoin-development] Roadmap to getting users onto SPV\n> \tclients\n> To: Mike Hearn <mike at plan99.net>\n> Cc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\n> Message-ID:\n> \t<CACh7GpHUE2CYAMfRdAVPv1WAk102z94KYCWPV87fzzQEaP_hfw at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n> \n> Alan's UTxO meta-chain proposal becomes vastly easier to do now that\n> ultraprune is merged. That would allow the Satoshi client to know it's\n> wallet balance and operate with a >=SPV level of security during the\n> initial block download, and keep them on the path of becoming a full\n> node.\n> If users can see their balances, send and receive transactions, and\n> otherwise go about their business (except for mining) during the initial\n> block download, would that not address your concerns?\n> \n> IMHO the only time bitcoin.org should recommend a SPV-only client is when\n> it is dynamically when it is being accessed from a mobile device, but\n> that's a separate issue.\n> \n> Mark\n> \n> \n> On Tue, Dec 4, 2012 at 9:46 AM, Mike Hearn <mike at plan99.net> wrote:\n> \n> > At the moment if you visit bitcoin.org then you're recommended to\n> > download the full client. I think we all agree that at some point we\n> > need to start presenting users with something more like this:\n> >\n> >\n> > To get started, download wallet apps A or B.\n> >\n> > If you'd like to contribute your computing resources to the Bitcoin\n> > network and have a fast computer with an unfiltered internet\n> > connection, download:\n> >\n> >    - for desktop machines, Bitcoin-Qt\n> >    - for servers, bitcoind\n> >\n> >\n> >\n> > Obviously not that exact wording.\n> >\n> > I personally feel it's a bit early for this, but it's true that users\n> > are being turned away by the fact that they're pointed to Bitcoin-Qt\n> > by default, so having some kind of roadmap or plan for changing that\n> > would be good.\n> >\n> > I think MultiBit is maturing into a client that I'd feel comfortable\n> > recommending to end users who take the fast-start path, though it\n> > still has a few serious lacks (encrypted wallets aren't released yet,\n> > bloom filters will help performance a lot, needs to catch up with some\n> > newer features). But there doesn't have to be a one true client.\n> >\n> > The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\n> > not convinced this is the best use of time, but if somebody steps up\n> > to do it, that could also work. MultiBit has some unique features that\n> > are quite useful like integrating charting and exchange rate feeds.\n> >\n> > What does everyone think on this?\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> > Remotely access PCs and mobile devices and provide instant support\n> > Improve your efficiency, and focus on delivering more value-add services\n> > Discover what IT Professionals Know. Rescue delivers\n> > http://p.sf.net/sfu/logmein_12329d2d\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> \n> ------------------------------\n> \n> Message: 4\n> Date: Tue, 4 Dec 2012 18:08:01 +0000\n> From: Will <will at phase.net>\n> Subject: Re: [Bitcoin-development] Roadmap to getting users onto SPV\n> \tclients\n> To: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\n> Message-ID:\n> \t<CAHQs=o72Q3_DXmg80KtJzJgRMVcG+S3HJnseR_yxmWOFVEqnLg at mail.gmail.com>\n> Content-Type: text/plain; charset=\"iso-8859-1\"\n> \n> ...or should we be directing people to a (vetted) list of cloud services\n> -\n> I think this has a significantly lower entry cost than any client. I know\n> the mybitcoin debacle has clouded (pun intended) people's views of these\n> providers, but blockchain.info (for example) really does seem quite well\n> engineered, and satisfies many of the features in particular a very low\n> cost of entry, cross platform support and what appears to be very good\n> security (e.g. two factor)\n> \n> Will\n> \n> On 4 December 2012 17:46, Mike Hearn <mike at plan99.net> wrote:\n> \n> > At the moment if you visit bitcoin.org then you're recommended to\n> > download the full client. I think we all agree that at some point we\n> > need to start presenting users with something more like this:\n> >\n> >\n> > To get started, download wallet apps A or B.\n> >\n> > If you'd like to contribute your computing resources to the Bitcoin\n> > network and have a fast computer with an unfiltered internet\n> > connection, download:\n> >\n> >    - for desktop machines, Bitcoin-Qt\n> >    - for servers, bitcoind\n> >\n> >\n> >\n> > Obviously not that exact wording.\n> >\n> > I personally feel it's a bit early for this, but it's true that users\n> > are being turned away by the fact that they're pointed to Bitcoin-Qt\n> > by default, so having some kind of roadmap or plan for changing that\n> > would be good.\n> >\n> > I think MultiBit is maturing into a client that I'd feel comfortable\n> > recommending to end users who take the fast-start path, though it\n> > still has a few serious lacks (encrypted wallets aren't released yet,\n> > bloom filters will help performance a lot, needs to catch up with some\n> > newer features). But there doesn't have to be a one true client.\n> >\n> > The alternative, I guess, is to make Bitcoin-Qt have an SPV mode. I'm\n> > not convinced this is the best use of time, but if somebody steps up\n> > to do it, that could also work. MultiBit has some unique features that\n> > are quite useful like integrating charting and exchange rate feeds.\n> >\n> > What does everyone think on this?\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> > Remotely access PCs and mobile devices and provide instant support\n> > Improve your efficiency, and focus on delivering more value-add services\n> > Discover what IT Professionals Know. Rescue delivers\n> > http://p.sf.net/sfu/logmein_12329d2d\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> \n> ------------------------------\n> \n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> \n> ------------------------------\n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> End of Bitcoin-development Digest, Vol 19, Issue 7\n> **************************************************\n\n\n-- \nhttp://multibit.org    Money, reinvented"
            },
            {
                "author": "slush",
                "date": "2012-12-04T22:23:59",
                "message_text_only": "Jim, perfect idea with some logo indicating wallet compatibility! This\nshould cover BIP32 + some mnemonic algorithm for easy transferring of\nwallets across various clients.\n\nBtw I asked ThomasV for making BIP from his mnemonic algorithm and he\nagreed, so I believe some proposal will be here pretty soon.\n\nslush\n\nOn Tue, Dec 4, 2012 at 7:56 PM, Jim <jim618 at fastmail.co.uk> wrote:\n>\n> Also, as BIP32 support is added to clients and codebases then the actual\n> variant of software to use to access your wallet will become relatively\n> less important. Combined with a standardised seed -> passphrase\n> algorithm the user can just type in their long passphrase into any BIP32\n> compliant software and click/ buzz/ whirr : there is their wallet. We\n> should have a little logo for HD wallet compliance ! :-)\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/833e9f8b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Roadmap to getting users onto SPV clients",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gary Rowe",
                "Jim",
                "Wladimir",
                "Robert Backhaus",
                "slush",
                "Mike Hearn",
                "Alan Reiner",
                "Gregory Maxwell",
                "Mark Friedenbach",
                "Jim Nguyen",
                "Will"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 98811
        }
    },
    {
        "title": "[Bitcoin-development] String-based Hierarchical Deterministic Keys - Alternative to BIP 32",
        "thread_messages": [
            {
                "author": "Mike Koss",
                "date": "2012-12-05T03:06:00",
                "message_text_only": "I've implemented an alternative to the BIP 32 proposal.  I wanted a system\nbased on a hierarchical string representation (rather than hierarchy of\nintegers as BIP 32 proposes).  For example I name keys like this:\n\n[hd1.75491111].store.1. 1D7GM5dkUtxvGeWgn7SYtanBuyj1MD1EZy\n[hd1.75491111].store.2. 1QAqDbzpNKViGSjVe1XmnGbmZtvz5hM7t1\n[hd1.75491111].store.3. 14XkSN92QLGeorYPpoVbG87DQhowEx3mFn\n[hd1.75491111].store.4. 1JLcGdod6Wm33rMZuZZUmAEE6osLhM4QMn\n\nFirst draft of proposal:\n\nhttps://gist.github.com/4211704\n\n\nI envision using this in services, so I've not done any work to recommend\nhow the keys would be represented directly in the client (I just map from a\nseed value and\na hierarchy string in order to deterministic ally derive ECDSA public and\nprivate keys).\n\nI'm happy to release my source code for this (Python).  But I'd first like\nto get feedback about any security concerns with my scheme (I note that I\ndon't introduce the enlarged\nkey space that BIP 32 does with its \"chain code\" - I'm wondering if that\nrepresents a weakness of my scheme vs. BIP 32).\n\nOn Mon, Dec 3, 2012 at 12:44 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Mon, Dec 03, 2012 at 06:48:34AM -0800, Amir Taaki wrote:\n> > ok, also what is the reasoning behind serialising points using a\n> compressed\n> > format before going into the hash function? I'm looking at the\n> sec1-v2.pdf\n> > and the compression format is a little confusing.\n>\n> I don't think there is a compelling reason to encourage uncompressed public\n> keys anymore on the network. They take more space in the block chain for no\n> additional value whatsoever. Software may of course continue supporting\n> uncompressed keys if they wish to provide compatibility, but for a new\n> standard, I think it makes sense to standardize on just compressed keys.\n> And since that software thus needs to support the compressed encoding,\n> there is no reason to use a different encoding inside the derivation scheme\n> itself.\n>\n> Regarding the encoding itself, it is not hard: just 0x02 or 0x03 (depending\n> on whether Y is even or odd) followed by the 32-byte encoding of X.\n> Decoding\n> is harder, but is never needed in the derivation. Software internally can\n> use\n> any representation (and it will), which in almost all circumstances stores\n> both X and Y (and even more). Decoding compressed public keys is somewhat\n> harder, as Y must be reconstructed (but the algorithm isn't hard) - this is\n> only necessary when someone wants to import an extended public key though\n> for\n> watch-only wallets.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Keep yourself connected to Go Parallel:\n> BUILD Helping you discover the best ways to construct your parallel\n> projects.\n> http://goparallel.sourceforge.net\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nMike Koss\nCTO, CoinLab\n(425) 246-7701 (m)\n\nA Bitcoin Primer <http://coinlab.com/a-bitcoin-primer.pdf> - What you need\nto know about Bitcoins.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121204/9a5e0265/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-05T03:23:37",
                "message_text_only": "On Tue, Dec 4, 2012 at 10:06 PM, Mike Koss <mike at coinlab.com> wrote:\n> I've implemented an alternative to the BIP 32 proposal.  I wanted a system\n> based on a hierarchical string representation (rather than hierarchy of\n> integers as BIP 32 proposes).  For example I name keys like this:\n>\n> [hd1.75491111].store.1. 1D7GM5dkUtxvGeWgn7SYtanBuyj1MD1EZy\n> [hd1.75491111].store.2. 1QAqDbzpNKViGSjVe1XmnGbmZtvz5hM7t1\n> [hd1.75491111].store.3. 14XkSN92QLGeorYPpoVbG87DQhowEx3mFn\n> [hd1.75491111].store.4. 1JLcGdod6Wm33rMZuZZUmAEE6osLhM4QMn\n>\n> First draft of proposal:\n>\n> https://gist.github.com/4211704\n\nAs Pieter pointed out recently\u2014 it's not (realistically) possible to\nblindly iterate through strings.  This means your proposal loses the\nbackup recoverablity property which is part the point of a\ndeterministic wallet:  If you have a backup prior to a new string name\nbeing established you must also have a reliable backup of the string\nas well.\n\nOf course, if you're backing up the strings then you can also backup a\nmap equating the hdwallet indexes to your strings, and in the event of\na catastrophic loss where you are only left with the original ultimate\nroot you lose no coins (only metadata) with the BIP32 scheme. If,\ninstead, we have your scheme and the backup of strings is incomplete\nthen some or all assigned coin may be lost forever.\n\nYour extended hierarchy of multiplers also makes me uncomfortable.\nBIP32 uses a HMAC in its construction to obtain strongly unstructured\npoints."
            },
            {
                "author": "Watson Ladd",
                "date": "2012-12-05T03:36:29",
                "message_text_only": "On Tue, Dec 4, 2012 at 9:23 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Tue, Dec 4, 2012 at 10:06 PM, Mike Koss <mike at coinlab.com> wrote:\n>> I've implemented an alternative to the BIP 32 proposal.  I wanted a system\n>> based on a hierarchical string representation (rather than hierarchy of\n>> integers as BIP 32 proposes).  For example I name keys like this:\n>>\n>> [hd1.75491111].store.1. 1D7GM5dkUtxvGeWgn7SYtanBuyj1MD1EZy\n>> [hd1.75491111].store.2. 1QAqDbzpNKViGSjVe1XmnGbmZtvz5hM7t1\n>> [hd1.75491111].store.3. 14XkSN92QLGeorYPpoVbG87DQhowEx3mFn\n>> [hd1.75491111].store.4. 1JLcGdod6Wm33rMZuZZUmAEE6osLhM4QMn\n>>\n>> First draft of proposal:\n>>\n>> https://gist.github.com/4211704\n>\n> As Pieter pointed out recently\u2014 it's not (realistically) possible to\n> blindly iterate through strings.  This means your proposal loses the\n> backup recoverablity property which is part the point of a\n> deterministic wallet:  If you have a backup prior to a new string name\n> being established you must also have a reliable backup of the string\n> as well.\n\nI would like to note that BIP32 and this new proposal have a missing\nfeature: being able to spend\na coin sent to an address generated by this scheme implies being able\nto spend any coin generated\nby this scheme.\n\nThe easiest deterministic wallet construction is simply to use a\nstream cipher to generate random\nbytes used as the private keys in a wallet. Hierarchical constructions\ndo not seem to me to add more,\nother then distinguishing transactions by sending to unique addresses,\nwhich could be done by other means.\n\n>\n> Of course, if you're backing up the strings then you can also backup a\n> map equating the hdwallet indexes to your strings, and in the event of\n> a catastrophic loss where you are only left with the original ultimate\n> root you lose no coins (only metadata) with the BIP32 scheme. If,\n> instead, we have your scheme and the backup of strings is incomplete\n> then some or all assigned coin may be lost forever.\n>\n> Your extended hierarchy of multiplers also makes me uncomfortable.\n> BIP32 uses a HMAC in its construction to obtain strongly unstructured\n> points.\n\nI read BIP32. And while the multipliers at each level are\nunstructured, the ones in the next level are products\nof the ones before i.e. we have a multiplication tree with random\nlooking branches.\nNote that the order of the basepoint is prime or a small cofactor\ntimes a prime, so this isn't an issue (usually:\nthe cofactor could be annoying).\n\n--\n\"Those who would give up Essential Liberty to purchase a little\nTemporary Safety deserve neither  Liberty nor Safety.\"\n-- Benjamin Franklin"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-05T03:50:17",
                "message_text_only": "On Tue, Dec 4, 2012 at 10:36 PM, Watson Ladd <wbl at uchicago.edu> wrote:\n> being able to spend\n> a coin sent to an address generated by this scheme implies being able\n> to spend any coin generated\n> by this scheme.\n\nIf you have the the full extended secret there then you can spend\nalong the chain\u2014 but just the plain ecdsa secret by itself is not\nenough to spend anything but that address itself.\n\nOr have I misunderstood you here?\n\n> The easiest deterministic wallet construction is simply to use a\n> stream cipher to generate random\n> bytes used as the private keys in a wallet. Hierarchical constructions\n> do not seem to me to add more,\n> other then distinguishing transactions by sending to unique addresses,\n> which could be done by other means.\n\nSadly that construction has no ability to separate address generation\nfrom spending\u2014 an important element for merchant applications.  Not\njust for their own own distinguishing of transactions but because the\nuse of fresh addresses is essential to the limited privacy properties\nof the Bitcoin system.\n\nI called that a type-1 deterministic wallet in some old forum post\nwhere I wrote about the different derivation schemes as opposed to the\npoint combining type-2 construction. The hope in BIP32 was that we\ncould get away just using a single one."
            }
        ],
        "thread_summary": {
            "title": "String-based Hierarchical Deterministic Keys - Alternative to BIP 32",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Koss",
                "Watson Ladd",
                "Gregory Maxwell"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 8767
        }
    },
    {
        "title": "[Bitcoin-development] RFC: Updating dust output definition, and default fees",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2012-12-12T21:37:28",
                "message_text_only": "URL: https://github.com/bitcoin/bitcoin/pull/2100\n\n1) Create COIN_DUST constant, to represent the dust spam limit used.\n\n2) Decrease COIN_DUST to 0.001 BTC\n\nRationale: With the increase in bitcoin value (US$13.67 as of this\nwriting), it seems reasonable to reduce the value level of which we\nconsider \"dust spam.\"\n\n3) Update TX miner and relay fee defaults to 0.001 / 0.0005 BTC respectively\n\nRationale: Reflects growth of dust spam in unspent transaction output dataset.\n\nReview of impact:\na) Definition of COIN_DUST reduced from 0.01 to 0.001.\nb) Miners who mine with this code will require a fee >= 0.001 to\ninclude TX's with outputs <= COIN_DUST\nc) Normal clients will require a fee >= 0.0005 to relay TX's with\noutputs <= COIN_DUST\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com"
            }
        ],
        "thread_summary": {
            "title": "RFC: Updating dust output definition, and default fees",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 790
        }
    },
    {
        "title": "[Bitcoin-development]  Zero-length scripts",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2012-12-12T22:09:38",
                "message_text_only": "I've noticed a few transactions that have zero-length input and/or output scripts. There's a couple examples in block 0000000000000159a27442ee8b7f9ffad0cd799b003eafe007de9fbb47bd6ce7:\n\nTxs: cdb553214a51ef8d4393b96a185ebbbc2c84b7014e9497fea8aec1ff990dae35, af32bb06f12f2ae5fdb7face7cd272be67c923e86b7a66a76ded02d954c2f94d\n\n\nIs there ever a legitimate reason to create a transaction with a zero-length script? Should the protocol even allow it?\n\n-Eric Lombrozo\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121212/405452ae/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Zero-length scripts",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Lombrozo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 642
        }
    },
    {
        "title": "[Bitcoin-development] Zero-length scripts",
        "thread_messages": [
            {
                "author": "gronager at mac.com",
                "date": "2012-12-13T09:00:55",
                "message_text_only": "Normally I would consider it an error of the parsing script of blockchain (seen that before), however, this seems genuine enough.\n\nthe second transaction is the most amusing - it has an output script which is:\nOP_HASH256 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f OP_EQUAL\n\nThe hash is the most famous bitcoin hash... - so if you can come up with something that, when hashed with sha256 yields the genesisblock hash you can claim one BTC ;)\n\nIt is actually very easy to do (!), however, it is a game only for miners, as non_standard transactions are not relayed between standard clients. So now a miner can have a go creating a transaction redeeming this 1BTC.\n\nPerhaps, Eligius creating that block, might be playing a little christmas game :)\n\nCheers,\n\nMichael\n\nOn 12/12/2012, at 23:09, Eric Lombrozo <elombrozo at gmail.com> wrote:\n\n> I've noticed a few transactions that have zero-length input and/or output scripts. There's a couple examples in block 0000000000000159a27442ee8b7f9ffad0cd799b003eafe007de9fbb47bd6ce7:\n> \n> Txs: cdb553214a51ef8d4393b96a185ebbbc2c84b7014e9497fea8aec1ff990dae35, af32bb06f12f2ae5fdb7face7cd272be67c923e86b7a66a76ded02d954c2f94d\n> \n> \n> Is there ever a legitimate reason to create a transaction with a zero-length script? Should the protocol even allow it?\n> \n> -Eric Lombrozo\n> \n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gr\u00f8nager\nJens Juels Gade 33\n2100 Copenhagen E\nDENMARK\nMobile: +45 31 45 14 01\nE-mail: gronager at mac.com"
            }
        ],
        "thread_summary": {
            "title": "Zero-length scripts",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "gronager at mac.com"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2034
        }
    },
    {
        "title": "[Bitcoin-development]  Multiwallet support",
        "thread_messages": [
            {
                "author": "Eric Lombrozo",
                "date": "2012-12-21T08:53:16",
                "message_text_only": "I started working on a new feature to allow for watch-only addresses in wallets. https://github.com/bitcoin/bitcoin/pull/2121\n\nIn order to integrate this feature nicely into bitcoin / bitcoin, it will be necessary to disable signing and privkey export operations for watch-only addresses. Since disabling these things for only some of the keys in a wallet but not others is an API nightmare and complicates CreateTransaction logic, I propose adding multiple wallet capabilities and specifying upon creation whether a wallet is a:\n\n1)  full signing wallet\n\t- importaddress is disabled.\n\n2) watch-only wallet\n\t- signing and privkey export operations are disabled.\n\t- importprivkey only saves the associated address but not the private key. (behaves like importaddress <address for privkey>)\n\nIn order to do the above, it will be necessary to add multiple wallet support. Anyhow, that was my initial motivation for multiple wallets - but obviously, there are a number of other reasons why people might want multiple wallet support.\n\n----------------------\n\nAdding the ability to specify multiple wallets with associated names and passphrases in the config file should be fairly straightforward. However, exposing multiple wallets via RPC will be tricky as the existing RPC is not designed to support multiple wallets.\n\nAs to not break compatibility with the existing RPC calls, we can have a main wallet which is always used as the default wallet. If the user wants to use a different wallet, the name of the wallet would have to be specified in the call. Unfortunately, it doesn't look like we can use many of the existing RPC calls (sendfrom, sendmany,sendtoaddress, etc...) since they all have optional parameters already and it would be awkward to just tack on the wallet name parameter at the end. Also, walletpassphrase is problematic as it is not stateless. So it looks like we need a whole separate set of calls which require a wallet name and passphrase (if the wallet is encrypted).\n\nFor instance,\n\twalletsendtoaddress <walletname> <passphrase> <bitcoinaddress> <amount> [comment] [comment-to]\n\nI welcome any proposals or suggestions as to how this should be done.\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20121221/47dc8176/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Multiwallet support",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Lombrozo"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2356
        }
    },
    {
        "title": "[Bitcoin-development] Multiwallet support",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-21T13:20:29",
                "message_text_only": "On Fri, Dec 21, 2012 at 3:53 AM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n> I started working on a new feature to allow for watch-only addresses in\n> wallets. https://github.com/bitcoin/bitcoin/pull/2121\n>\n> In order to integrate this feature nicely into bitcoin / bitcoin, it will be\n> necessary to disable signing and privkey export operations for watch-only\n> addresses. Since disabling these things for only some of the keys in a\n> wallet but not others is an API nightmare and complicates CreateTransaction\n> logic, I propose adding multiple wallet capabilities and specifying upon\n> creation whether a wallet is a:\n>\n> 1)  full signing wallet\n> - importaddress is disabled.\n>\n> 2) watch-only wallet\n> - signing and privkey export operations are disabled.\n> - importprivkey only saves the associated address but not the private key.\n> (behaves like importaddress <address for privkey>)\n>\n> In order to do the above, it will be necessary to add multiple wallet\n> support. Anyhow, that was my initial motivation for multiple wallets - but\n> obviously, there are a number of other reasons why people might want\n> multiple wallet support.\n>\n> ----------------------\n>\n> Adding the ability to specify multiple wallets with associated names and\n> passphrases in the config file should be fairly straightforward. However,\n> exposing multiple wallets via RPC will be tricky as the existing RPC is not\n> designed to support multiple wallets.\n>\n> As to not break compatibility with the existing RPC calls, we can have a\n> main wallet which is always used as the default wallet. If the user wants to\n> use a different wallet, the name of the wallet would have to be specified in\n> the call. Unfortunately, it doesn't look like we can use many of the\n> existing RPC calls (sendfrom, sendmany,sendtoaddress, etc...) since they all\n> have optional parameters already and it would be awkward to just tack on the\n> wallet name parameter at the end. Also, walletpassphrase is problematic as\n> it is not stateless. So it looks like we need a whole separate set of calls\n> which require a wallet name and passphrase (if the wallet is encrypted).\n>\n> For instance,\n> walletsendtoaddress <walletname> <passphrase> <bitcoinaddress> <amount>\n> [comment] [comment-to]\n>\n> I welcome any proposals or suggestions as to how this should be done.\n>\n\nHow about a rpc like \"usewallet <foo> <normal RPC>\"  that simply\ngeneralizes all the rpcs?\n\nAnd instead of explicitly deactivating rpcs that don't make sense,\nsimply have them return an error.  Or, for example,  sendtoaddress on\na watching wallet should actually return an unsigned raw transaction\nand a wallet specific message that tells you where to find the private\nkey.\n\nI think it's desirable to not break compatibility but for this kind of\nfeature compatibility should not get in the way of doing it right."
            },
            {
                "author": "Eric Lombrozo",
                "date": "2012-12-21T18:11:21",
                "message_text_only": "I like that idea. I'm close to having something working along those lines. Hopefully I'll be able to push something by tonight.\n\n> \n> How about a rpc like \"usewallet <foo> <normal RPC>\"  that simply\n> generalizes all the rpcs?\n> \n> And instead of explicitly deactivating rpcs that don't make sense,\n> simply have them return an error.  Or, for example,  sendtoaddress on\n> a watching wallet should actually return an unsigned raw transaction\n> and a wallet specific message that tells you where to find the private\n> key.\n> \n> I think it's desirable to not break compatibility but for this kind of\n> feature compatibility should not get in the way of doing it right."
            }
        ],
        "thread_summary": {
            "title": "Multiwallet support",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Eric Lombrozo",
                "Gregory Maxwell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3509
        }
    },
    {
        "title": "[Bitcoin-development] Testnet3 difficulty transition problem?",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2012-12-22T18:39:59",
                "message_text_only": "Both blocks\n\n38304 00000000015bb4069249fa1f41ae61d8a7447aaacc33c50dacd3c3654377fa43\n\nand\n\n40320 000000008011f56b8c92ff27fb502df5723171c5374673670ef0eee3696aee6d\n\nare difficulty transition blocks. However, block 40320 has a difficulty\nof 1. I know there is this special testnet rule that allows mining a\nblock at difficulty 1, but I always thought you can't use this exception\non difficulty transition blocks.\n\nAs a result, bitcoinj based clients do not advance their blockchain past\nblock 40319."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2012-12-22T18:45:52",
                "message_text_only": "On Sat, Dec 22, 2012 at 1:39 PM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> Both blocks\n>\n> 38304 00000000015bb4069249fa1f41ae61d8a7447aaacc33c50dacd3c3654377fa43\n>\n> and\n>\n> 40320 000000008011f56b8c92ff27fb502df5723171c5374673670ef0eee3696aee6d\n>\n> are difficulty transition blocks. However, block 40320 has a difficulty\n> of 1. I know there is this special testnet rule that allows mining a\n> block at difficulty 1,\n\nYes.\n\n> but I always thought you can't use this exception\n> on difficulty transition blocks.\n\nNot so\u2014 but what you're actually seeing is that difficult change is\nrelative to the prior block's difficulty. E.g. if the penultimate\nblock in the difficulty cycle is under the special rule the difficulty\nchange will be relative to 1.\n\n(I had intentionally avoided triggering that test case when adding the\ntimewarp attack to the testnet chain in case we had wanted to fix it\nprior to testnet3's release\u2014 I guess I should have added it sooner in\norder to catch the bitcoinj misbehavior!)"
            },
            {
                "author": "Mike Hearn",
                "date": "2012-12-24T16:21:26",
                "message_text_only": "I pushed a fix for this."
            }
        ],
        "thread_summary": {
            "title": "Testnet3 difficulty transition problem?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Gregory Maxwell",
                "Andreas Schildbach"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 1531
        }
    },
    {
        "title": "[Bitcoin-development] Has anyone compiled under MacOS 10.8?",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2012-12-27T16:28:59",
                "message_text_only": "The problem mysteriously resurfaced. The magic incantation this time is to add:\n\nunix:*-g++*: QMAKE_CXXFLAGS += -fpermissive\n\nto the top. I suspect this may be related to how I am using qmake. To\nmake it spit out a real makefile instead of an xcode project, I have\nto run it like \"gmake -spec macx-g++\", which perhaps ends up making\ngcc stricter than it's supposed to be.\n\nOn Thu, Nov 29, 2012 at 8:34 PM, Mike Hearn <mike at plan99.net> wrote:\n> I found that the problem is the version of the Qt SDK I used didn't\n> like the new MacOS version. Re-installing Qt fixed it.\n>\n> On Mon, Nov 26, 2012 at 4:05 PM, Mike Hearn <mike at plan99.net> wrote:\n>> It appears that something about Boost doesn't play nicely with the default\n>> build instructions (possibly the switch to clang++?).\n>>\n>> I will dig in eventually but for now, if anyone has a recipe that fixes\n>> things, let me know."
            }
        ],
        "thread_summary": {
            "title": "Has anyone compiled under MacOS 10.8?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 884
        }
    }
]