[
    {
        "title": "[Bitcoin-development] Testing and reviewing requested for work on Bitcoin Core wallet",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-09-01T08:25:23",
                "message_text_only": "Hello,\n\nCozz Lovan has been doing great work on Bitcoin Core's wallet code lately.\n\nIf anyone cares about Bitcoin Core's wallet, for example its\nperformance, do help testing and reviewing these improvements so that\nthey can make it into 0.10:\n\nSubtract fee from amount\nhttps://github.com/bitcoin/bitcoin/pull/4331\n\n[Wallet] Improve ReorderTransactions(..)\nhttps://github.com/bitcoin/bitcoin/pull/4697\n\n[Wallet] Replace OrderedTxItems(..) with in-memory map\nhttps://github.com/bitcoin/bitcoin/pull/4702\n\n[Qt] Call checkBalanceChanged() periodically instead for every updated tx\nhttps://github.com/bitcoin/bitcoin/pull/4712\n\nMove g_signals.SetBestChain(..) below SyncWithWallets\nhttps://github.com/bitcoin/bitcoin/pull/4798\n\n[Wallet] Call SetBestChain before and after rescan\nhttps://github.com/bitcoin/bitcoin/pull/4800\n\n[Wallet] Do not flush the wallet in AddToWalletIfInvolvingMe(..)\nhttps://github.com/bitcoin/bitcoin/pull/4805\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Testing and reviewing requested for work on Bitcoin Core wallet",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 939
        }
    },
    {
        "title": "[Bitcoin-development] Small update to BIP 62",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2014-09-01T20:48:14",
                "message_text_only": "On Fri, Jul 18, 2014 at 8:14 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Hi all,\n>\n> I've sent a pull request to make a small change to BIP 62 (my\n> anti-malleability proposal) which is still a draft; see:\n> * https://github.com/bitcoin/bips/pull/90 (the request)\n> * https://github.com/sipa/bips/blob/bip62up/bip-0062.mediawiki (the result)\n>\n> It makes two of the 7 new rules mandatory in new blocks, even for\n> old-style transactions. Both are already non-standard since 0.8.0, and\n> have no use cases in my opinion.\n>\n> The reason for this change is dropping the requirement for signature\n> verification engines to be bug-for-bug compatible with OpenSSL (which\n> supports many non-standard encodings for signatures). Requiring strict\n> DER compliance for signatures means any implementation just needs to\n> support DER.\n\nNot related to this change but the definition of rule 4 may not be\nsufficiently specific\u2014 without a definition someone could reasonably\nreach a different conclusion about OP_1NEGATE being a \"push\noperation\", or might even decide any operation which added to the\nstack was a \"push operation\".\n\nAny particular reason to enforce 2 and 4 but not also 5?  Violation of\n5 is already non-standard and like 2,4 should be safely enforceable.\n\nPerhaps the rules should be reordered so that the applicable to all\ntransactions ones are contiguous and first?\n\n> The first six and part of the seventh can be fixed by extra consensus rules.\n\nThis should clarify that the scriptPubkey can still specify rules that\nare inherently malleable\u2014 e.g. require the input stack contain two\npushes which OP_ADD to 11.  Or a more elaborate one\u2014 a 1 of 2 check\nmultisig where the pubkey not selected for signing is selected by a\npush in the signature. The current text seems to ignore isomorphisms\nof this type. ... they're not important for what the BIP is trying to\nachieve, but the document shouldn't cause people to not think that\nsort of thing exists."
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-09-03T16:34:33",
                "message_text_only": "On Mon, Sep 1, 2014 at 10:48 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> Not related to this change but the definition of rule 4 may not be\n> sufficiently specific-- without a definition someone could reasonably\n> reach a different conclusion about OP_1NEGATE being a \"push\n> operation\", or might even decide any operation which added to the\n> stack was a \"push operation\".\n\nGood catch - I'll write an update soon.\n\n> Any particular reason to enforce 2 and 4 but not also 5?  Violation of\n> 5 is already non-standard and like 2,4 should be safely enforceable.\n\nPerhaps we can go further, and include 6 as well? I see zero use cases\nfor zero-padded numbers, as their interpretation is already identical\nto the non-padded case. I wouldn't include 1 (as it would break a\nlarge amount of wallets today), 3 (which may have a use case in more\ncomplex scripts with conditionals) or 7 (the superfluous element\nconsumed by CHECKMULTISIG could potentially be used for something in\nthe future).\n\n> Perhaps the rules should be reordered so that the applicable to all\n> transactions ones are contiguous and first?\n\nOk.\n\n>> The first six and part of the seventh can be fixed by extra consensus rules.\n>\n> This should clarify that the scriptPubkey can still specify rules that\n> are inherently malleable-- e.g. require the input stack contain two\n> pushes which OP_ADD to 11.  Or a more elaborate one-- a 1 of 2 check\n> multisig where the pubkey not selected for signing is selected by a\n> push in the signature. The current text seems to ignore isomorphisms\n> of this type. ... they're not important for what the BIP is trying to\n> achieve, but the document shouldn't cause people to not think that\n> sort of thing exists.\n\nI'll try to reword.\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-09-07T23:31:45",
                "message_text_only": "On Wed, Sep 3, 2014 at 6:34 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Mon, Sep 1, 2014 at 10:48 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> Not related to this change but the definition of rule 4 may not be\n>> sufficiently specific-- without a definition someone could reasonably\n>> reach a different conclusion about OP_1NEGATE being a \"push\n>> operation\", or might even decide any operation which added to the\n>> stack was a \"push operation\".\n>\n> Good catch - I'll write an update soon.\n\n>> Perhaps the rules should be reordered so that the applicable to all\n>> transactions ones are contiguous and first?\n> Ok.\n\n>>> The first six and part of the seventh can be fixed by extra consensus rules.\n>>\n>> This should clarify that the scriptPubkey can still specify rules that\n>> are inherently malleable [...]\n> I'll try to reword.\n\nI've sent out a new pull request\n(https://github.com/bitcoin/bips/pull/102/files) that:\n* Changes the order of the rules.\n* Adds more reference documentation about minimal pushes and number encodings.\n* Clarified that extra consensus rules cannot prevent someone from\ncreating outputs whose spending transactions will be malleable.\n\nI haven't changed which rules are mandatory in v3, so this is a pure\nclarification & reorganization of the text.\n\nAny comments?\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-09-12T16:35:25",
                "message_text_only": "On Mon, Sep 8, 2014 at 1:31 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> I've sent out a new pull request\n> (https://github.com/bitcoin/bips/pull/102/files) that:\n> * Changes the order of the rules.\n> * Adds more reference documentation about minimal pushes and number encodings.\n> * Clarified that extra consensus rules cannot prevent someone from\n> creating outputs whose spending transactions will be malleable.\n>\n> I haven't changed which rules are mandatory in v3, so this is a pure\n> clarification & reorganization of the text.\n\nChanges: https://github.com/bitcoin/bips/pull/102/files\n\nGregory, Jeff: does this address your concerns?\nOthers: comments?\n\n-- \nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-09-13T22:45:14",
                "message_text_only": "On Fri, Sep 12, 2014 at 6:35 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Changes: https://github.com/bitcoin/bips/pull/102/files\n>\n> Gregory, Jeff: does this address your concerns?\n> Others: comments?\n\nI've made another change in the PR, as language about strictly only\ncompressed or uncompressed public keys was missing; please have a\nlook.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "Small update to BIP 62",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille",
                "Gregory Maxwell"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 6089
        }
    },
    {
        "title": "[Bitcoin-development] BIP72 amendment proposal",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-09-12T09:29:42",
                "message_text_only": "This is the discussion post corresponding to this PR:\nhttps://github.com/bitcoin/bips/pull/106\n\n\"Amend BIP72 by an \"h\" parameter, which contains a hash of the\nPaymentRequest message that is fetched via the \"r\" parameter.\n\nThe hash is meant to link the trust anchor (e.g. the QR code) to the\npayment request message in a secure way. This will solve the problem\nseveral apps are comparing address+amount fields as a workaround\ninstead, preventing some advanced BIP70 usecases. When these apps read a\nmatching hash, they need not compare any of the other fields.\n\nThanks to Julian Haight for helping with the standard.\""
            },
            {
                "author": "Wladimir",
                "date": "2014-09-12T09:55:01",
                "message_text_only": "On Fri, Sep 12, 2014 at 11:29 AM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> This is the discussion post corresponding to this PR:\n> https://github.com/bitcoin/bips/pull/106\n>\n> \"Amend BIP72 by an \"h\" parameter, which contains a hash of the\n> PaymentRequest message that is fetched via the \"r\" parameter.\n>\n> The hash is meant to link the trust anchor (e.g. the QR code) to the\n> payment request message in a secure way. This will solve the problem\n> several apps are comparing address+amount fields as a workaround\n> instead, preventing some advanced BIP70 usecases. When these apps read a\n> matching hash, they need not compare any of the other fields.\n\nSounds like a good idea to me.\n\nI had no idea that some clients were comparing addresses and amounts\nin the URI with the payment request for security, that seems like a\nhacky and inflexible way. This is much better.\n\nWladimir"
            },
            {
                "author": "Mark van Cuijk",
                "date": "2014-09-12T10:11:48",
                "message_text_only": "On 12 Sep 2014, at 11:55 , bitcoin-development-request at lists.sourceforge.net wrote:\n\n> The hash is meant to link the trust anchor (e.g. the QR code) to the\n> payment request message in a secure way. This will solve the problem\n> several apps are comparing address+amount fields as a workaround\n> instead, preventing some advanced BIP70 usecases. When these apps read a\n> matching hash, they need not compare any of the other fields.\n\nSounds like a good plan.\n\nDo you have a list (possibly incomplete) of apps that perform this kind of checking? We\u2019re currently working with some parties in a supply chain to allow a consumer payment on a retail website to automatically pay supply chain parties, the way BIP70 allows with multiple outputs on a transaction. This behaviour would prohibit this use case.\n\n/Mark"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-09-12T11:07:27",
                "message_text_only": "On 09/12/2014 12:11 PM, Mark van Cuijk wrote:\n> On 12 Sep 2014, at 11:55 , bitcoin-development-request at lists.sourceforge.net wrote:\n> \n>> The hash is meant to link the trust anchor (e.g. the QR code) to the\n>> payment request message in a secure way. This will solve the problem\n>> several apps are comparing address+amount fields as a workaround\n>> instead, preventing some advanced BIP70 usecases. When these apps read a\n>> matching hash, they need not compare any of the other fields.\n> \n> Sounds like a good plan.\n> \n> Do you have a list (possibly incomplete) of apps that perform this kind of checking? We\u2019re currently working with some parties in a supply chain to allow a consumer payment on a retail website to automatically pay supply chain parties, the way BIP70 allows with multiple outputs on a transaction. This behaviour would prohibit this use case.\n\nHard to say, but here is my last assertion:\n\n- Bitcoin Wallet\n- Hive Bitcoin Wallet (checked by source)\n- countless (> 300) forks/clones of Bitcoin Wallet\n\nSince you're planning an advanced BIP70 usecase, you'll also have to\ndeal with the many wallets that don't support BIP70 at all."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-09-12T13:49:19",
                "message_text_only": "A few thoughts on this:\n\n(1) Base64 of SHA256 seems overkill. 256 bits of hash is a lot. The risk\nhere is that a MITM intercepts the payment request, which will be typically\nrequested just seconds after the QR code is vended. 80 bits of entropy\nwould still be a lot and take a long time to brute force, whilst keeping QR\ncodes more compact, which impacts scannability.\n\n(2) This should *not* be necessary in the common HTTPS context. The QR code\nitself is going to be fetched from some service, over HTTPS. I see no\nreasonable attacker that can MITM the request for the BIP70 message but not\nthe request to get the QR code. Adding a hash makes QR codes more bloated\nand harder to scan, all on the assumption that HTTPS is broken in some odd\nway that we haven't actually ever seen in practice.\n\n(3) This can be useful in the Bluetooth context, but then again, we could\nalso do things a different way by signing with the key in the first part of\nthe URI, thus avoiding the need for a hash.\n\nI know I've been around the loop on this one with Andreas many times. But\nthis BIP doesn't fix any actually existing problem in the previous spec. It\nexists because Andreas thinks SSL is useless. If SSL is useless we all have\nmuch bigger problems.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140912/4985906c/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-09-12T14:15:21",
                "message_text_only": "Indeed -- Every byte added to the QR code makes it more difficult to\nbe used in restaurants, pubs and other low-light conditions.  BitPay\ntested some of these scenarios.\n\nScannability is absolutely impacted.\n\nOn Fri, Sep 12, 2014 at 9:49 AM, Mike Hearn <mike at plan99.net> wrote:\n> A few thoughts on this:\n>\n> (1) Base64 of SHA256 seems overkill. 256 bits of hash is a lot. The risk\n> here is that a MITM intercepts the payment request, which will be typically\n> requested just seconds after the QR code is vended. 80 bits of entropy would\n> still be a lot and take a long time to brute force, whilst keeping QR codes\n> more compact, which impacts scannability.\n>\n> (2) This should not be necessary in the common HTTPS context. The QR code\n> itself is going to be fetched from some service, over HTTPS. I see no\n> reasonable attacker that can MITM the request for the BIP70 message but not\n> the request to get the QR code. Adding a hash makes QR codes more bloated\n> and harder to scan, all on the assumption that HTTPS is broken in some odd\n> way that we haven't actually ever seen in practice.\n>\n> (3) This can be useful in the Bluetooth context, but then again, we could\n> also do things a different way by signing with the key in the first part of\n> the URI, thus avoiding the need for a hash.\n>\n> I know I've been around the loop on this one with Andreas many times. But\n> this BIP doesn't fix any actually existing problem in the previous spec. It\n> exists because Andreas thinks SSL is useless. If SSL is useless we all have\n> much bigger problems.\n>\n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-09-12T14:36:41",
                "message_text_only": "On 09/12/2014 03:49 PM, Mike Hearn wrote:\n\n> (1) Base64 of SHA256 seems overkill. 256 bits of hash is a lot. The risk\n> here is that a MITM intercepts the payment request, which will be\n> typically requested just seconds after the QR code is vended. 80 bits of\n> entropy would still be a lot and take a long time to brute force, whilst\n> keeping QR codes more compact, which impacts scannability.\n\nTo put that into perspective, here is how a bitcoin: URI would look like:\nbitcoin:?h=J-J-4mra0VorfffEZm5J7mBmHGKX86Dpt-TnnmC_fhE&r=http://wallet.schildbach.de/bip70/r1409992884.bitcoinpaymentrequest\n(obviously for real-world usage you would optimize the \"r\" parameter)\n\nI looked at the list in this doc to evaluate what's easily available:\nhttps://code.google.com/p/guava-libraries/wiki/HashingExplained\n\nI thought SHA1 has a bad reputation these days, and we don't save much\nby using it. I don't know anything about Murmur. MD5 is clearly broken.\nWhat hash function would you recommend?\n\n> (2) This should *not* be necessary in the common HTTPS context.\n\nIt is. People can't check names. People don't want to check names.\nPeople can't get certificates for lots of reasons. X.509 is centralized.\nX.509 has had serious security issues in the past. And shit continues to\nhappen.\n\nTo sum up, X.509 can't replace the trust anchor that is established by\nscanning a QR code or tapping two devices together.\n\n> (3) This can be useful in the Bluetooth context, but then again, we\n> could also do things a different way by signing with the key in the\n> first part of the URI, thus avoiding the need for a hash.\n\nSure. But signing is harder than just calculating a hash."
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-09-12T15:25:48",
                "message_text_only": "> What hash function would you recommend?\n\nDue to the properties of hash functions, you can just take the first x\nbits of a SHA256 sum and they're pretty much as good as an equally\nsecure hash function of that length. In fact SHA512/224 and SHA512/256\nare defined in that way (Plus different initial values because you\nmight as well do that when defining a standard).\n\nOn Fri, Sep 12, 2014 at 10:36 AM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> On 09/12/2014 03:49 PM, Mike Hearn wrote:\n>\n>> (1) Base64 of SHA256 seems overkill. 256 bits of hash is a lot. The risk\n>> here is that a MITM intercepts the payment request, which will be\n>> typically requested just seconds after the QR code is vended. 80 bits of\n>> entropy would still be a lot and take a long time to brute force, whilst\n>> keeping QR codes more compact, which impacts scannability.\n>\n> To put that into perspective, here is how a bitcoin: URI would look like:\n> bitcoin:?h=J-J-4mra0VorfffEZm5J7mBmHGKX86Dpt-TnnmC_fhE&r=http://wallet.schildbach.de/bip70/r1409992884.bitcoinpaymentrequest\n> (obviously for real-world usage you would optimize the \"r\" parameter)\n>\n> I looked at the list in this doc to evaluate what's easily available:\n> https://code.google.com/p/guava-libraries/wiki/HashingExplained\n>\n> I thought SHA1 has a bad reputation these days, and we don't save much\n> by using it. I don't know anything about Murmur. MD5 is clearly broken.\n> What hash function would you recommend?\n>\n>> (2) This should *not* be necessary in the common HTTPS context.\n>\n> It is. People can't check names. People don't want to check names.\n> People can't get certificates for lots of reasons. X.509 is centralized.\n> X.509 has had serious security issues in the past. And shit continues to\n> happen.\n>\n> To sum up, X.509 can't replace the trust anchor that is established by\n> scanning a QR code or tapping two devices together.\n>\n>> (3) This can be useful in the Bluetooth context, but then again, we\n>> could also do things a different way by signing with the key in the\n>> first part of the URI, thus avoiding the need for a hash.\n>\n> Sure. But signing is harder than just calculating a hash.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-09-12T15:33:36",
                "message_text_only": "Specifically relevant here:\nhttp://security.stackexchange.com/questions/34796/truncating-the-output-of-sha256-to-128-bits.\n\nIf you're going to truncate though, why not just leave the amount of\nbits up the the person generating the QR code? The client simply takes\nthe hash prefix (any length up to full 256-bits) and makes sure it's a\nstrict prefix of the actual hash of the payment request.\n\nThat way we leave up to implementers to experiment with different\nlengths and figure out what the optimum is (which could depend on the\nsecurity/convenience tradeoff of that particular transaction, as in\nmore bits for large payments).\n\nOn Fri, Sep 12, 2014 at 11:25 AM, Christophe Biocca\n<christophe.biocca at gmail.com> wrote:\n>> What hash function would you recommend?\n>\n> Due to the properties of hash functions, you can just take the first x\n> bits of a SHA256 sum and they're pretty much as good as an equally\n> secure hash function of that length. In fact SHA512/224 and SHA512/256\n> are defined in that way (Plus different initial values because you\n> might as well do that when defining a standard).\n>\n> On Fri, Sep 12, 2014 at 10:36 AM, Andreas Schildbach\n> <andreas at schildbach.de> wrote:\n>> On 09/12/2014 03:49 PM, Mike Hearn wrote:\n>>\n>>> (1) Base64 of SHA256 seems overkill. 256 bits of hash is a lot. The risk\n>>> here is that a MITM intercepts the payment request, which will be\n>>> typically requested just seconds after the QR code is vended. 80 bits of\n>>> entropy would still be a lot and take a long time to brute force, whilst\n>>> keeping QR codes more compact, which impacts scannability.\n>>\n>> To put that into perspective, here is how a bitcoin: URI would look like:\n>> bitcoin:?h=J-J-4mra0VorfffEZm5J7mBmHGKX86Dpt-TnnmC_fhE&r=http://wallet.schildbach.de/bip70/r1409992884.bitcoinpaymentrequest\n>> (obviously for real-world usage you would optimize the \"r\" parameter)\n>>\n>> I looked at the list in this doc to evaluate what's easily available:\n>> https://code.google.com/p/guava-libraries/wiki/HashingExplained\n>>\n>> I thought SHA1 has a bad reputation these days, and we don't save much\n>> by using it. I don't know anything about Murmur. MD5 is clearly broken.\n>> What hash function would you recommend?\n>>\n>>> (2) This should *not* be necessary in the common HTTPS context.\n>>\n>> It is. People can't check names. People don't want to check names.\n>> People can't get certificates for lots of reasons. X.509 is centralized.\n>> X.509 has had serious security issues in the past. And shit continues to\n>> happen.\n>>\n>> To sum up, X.509 can't replace the trust anchor that is established by\n>> scanning a QR code or tapping two devices together.\n>>\n>>> (3) This can be useful in the Bluetooth context, but then again, we\n>>> could also do things a different way by signing with the key in the\n>>> first part of the URI, thus avoiding the need for a hash.\n>>\n>> Sure. But signing is harder than just calculating a hash.\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Want excitement?\n>> Manually upgrade your production database.\n>> When you want reliability, choose Perforce\n>> Perforce version control. Predictably reliable.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-09-12T15:37:05",
                "message_text_only": ">\n> That way we leave up to implementers to experiment with different\n> lengths and figure out what the optimum is\n\n\nAh, that's a good suggestion if we do go this way.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140912/e4af829f/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-09-12T16:31:36",
                "message_text_only": "Putting aside the question of necessity for a moment, a more efficient\napproach to this would be;\n\n   1. Add another marker param like &s to the end of the URL\n   2. Add another field to PaymentRequest that contains an ECC signature\n   calculated using the public key that hashes to the address in the URI\n   3. Upgraded wallets look for the additional param and if it's there,\n   expect to find the PaymentDetails signed with the address key. PKI signing\n   of course is still useful to provide an actual identity for receipts,\n   display on hardware wallets, dispute mediation etc.\n\nThis adds only a few characters to a normal backwards-compatible QR code,\nand is not hard to implement.\n\n\nOn Fri, Sep 12, 2014 at 5:37 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> That way we leave up to implementers to experiment with different\n>> lengths and figure out what the optimum is\n>\n>\n> Ah, that's a good suggestion if we do go this way.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140912/7122a333/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-09-12T18:43:32",
                "message_text_only": "Are there any circumstances where the payment request object might be\nserved over a different domain than the CNAME of the object's signer?\n\nBIP72 states \"Bitcoin wallets must support fetching PaymentRequests\nvia http and https protocols;\". If the request object is signed by the\nowner of the domain, then the worst an attacker who doesn't have the\nsigning key can do is replace the request with another validly signed\nrequest intended for someone else, but that could be the attacker's\nown product order, tricking someone else into paying for it.\n\nShould BIP72 require that signed payment requests be from the same\ndomain, and also require https?\n\nAaron\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Fri, Sep 12, 2014 at 9:31 AM, Mike Hearn <mike at plan99.net> wrote:\n> Putting aside the question of necessity for a moment, a more efficient\n> approach to this would be;\n>\n> Add another marker param like &s to the end of the URL\n> Add another field to PaymentRequest that contains an ECC signature\n> calculated using the public key that hashes to the address in the URI\n> Upgraded wallets look for the additional param and if it's there, expect to\n> find the PaymentDetails signed with the address key. PKI signing of course\n> is still useful to provide an actual identity for receipts, display on\n> hardware wallets, dispute mediation etc.\n>\n> This adds only a few characters to a normal backwards-compatible QR code,\n> and is not hard to implement.\n>\n>\n> On Fri, Sep 12, 2014 at 5:37 PM, Mike Hearn <mike at plan99.net> wrote:\n>>>\n>>> That way we leave up to implementers to experiment with different\n>>> lengths and figure out what the optimum is\n>>\n>>\n>> Ah, that's a good suggestion if we do go this way.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-09-15T07:43:32",
                "message_text_only": "On 09/12/2014 08:43 PM, Aaron Voisine wrote:\n\n> Should BIP72 require that signed payment requests be from the same\n> domain,\n\nAlthough it currently does not seem to be used that way, I'd like to see\nmerchants sign their payment requests but store them on their payment\nprocessors server. Currently if you buy from Humble Bundle, all you see\nis Coinbase which is unfortunate.\n\n> and also require https?\n\nI think that's unrealistic. HTTP is already in use, and also the\nproposed spec is open to other transports, e.g. Bluetooth which is also\nalready in common use."
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-09-15T07:12:03",
                "message_text_only": "I agree that this would be another way of achieving the same goal. I'd\nbe fine with that if there is a majority.\n\nHowever, I also see downsides of this approach:\n\n1. It's more complicated. It touches more BIPs, and although signing is\nterribly difficult its still more difficult than just hashing. E.g.\nsigning the payment request twice (ECC + X.509) poses the question in\nwhich order you sign, and which signature fields to null for signing.\n\n2. Isn't it discouraged to disclose the public key you're going to\nreceive coins on? (not sure about that)\n\n3. Unlike an hash we can just re-assign to different objects (see my\nproposal) I think we cannot easily do the same with a signature. It's\nprobably not very important to have this option, but still it should be\nconsidered.\n\n4. I'm afraid of the idea of re-purposing the BIP21 address. Someone\nmight send money to it although it isn't meant to receive money any more\n(service is already using an advanced BIP70 usecase). A clear separation\ninto two parameters would prevent such mistakes, and as soon as the\naddress can go away the URL needn't be longer than it used to be.\n\n5. A hash can be checked without knowing a secret. Are we excluding\nstateless devices (e.g. proxies, smartwatches)?\n\n\nGenerally about the URL length discussion:\n\nCurrently we have address, amount and r, and it works well. In future we\nwould have h and r.\n\nSo all we need to do is make sure h not longer than address+amount. I\nthink this is already the case with untruncated SHA256 hashes. But I'd\nbe fine with truncating to maybe 192 bits to save a few characters.\n\n\nOn 09/12/2014 06:31 PM, Mike Hearn wrote:\n> Putting aside the question of necessity for a moment, a more efficient\n> approach to this would be;\n> \n>  1. Add another marker param like &s to the end of the URL\n>  2. Add another field to PaymentRequest that contains an ECC signature\n>     calculated using the public key that hashes to the address in the URI\n>  3. Upgraded wallets look for the additional param and if it's there,\n>     expect to find the PaymentDetails signed with the address key. PKI\n>     signing of course is still useful to provide an actual identity for\n>     receipts, display on hardware wallets, dispute mediation etc.\n> \n> This adds only a few characters to a normal backwards-compatible QR\n> code, and is not hard to implement.\n> \n> \n> On Fri, Sep 12, 2014 at 5:37 PM, Mike Hearn <mike at plan99.net\n> <mailto:mike at plan99.net>> wrote:\n> \n>         That way we leave up to implementers to experiment with different\n>         lengths and figure out what the optimum is\n> \n> \n>     Ah, that's a good suggestion if we do go this way. \n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-09-12T15:36:18",
                "message_text_only": "Your example doesn't have an address in it at all, so isn't compatible with\nnon-BIP70 wallets. Maybe for QRcodes specifically there are no longer any\nsuch wallets out there. For clickable links it can still be an issue.\n\n\n> I thought SHA1 has a bad reputation these days, and we don't save much\n> by using it. I don't know anything about Murmur. MD5 is clearly broken.\n> What hash function would you recommend?\n>\n\nCan just truncate SHA256, I think.\n\n\n> It is. People can't check names. People don't want to check names.\n>\n\nTheir wallet checks the name, though. It sees:\n\nbitcoin:1AbCd?r=https://bitpay.com/r/12345\n\nand the wallet verifies that the presented certificate is for CN=bitpay.com\n\n\n> People can't get certificates for lots of reasons. X.509 is centralized.\n> X.509 has had serious security issues in the past. And shit continues to\n> happen.\n>\n\nWell, I wrote an article that argues with this PoV:\n\nhttps://medium.com/@octskyward/why-you-think-the-pki-sucks-b64cf5912aa7\n\nNo disagreement that it's a more complex mechanism. But seeing as we end up\ndepending on it anyway the moment you load any kind of web page to find out\nthe URI, adding another mechanism only increases complexity, it doesn't\nremove any.\n\nSure. But signing is harder than just calculating a hash.\n\n\nWell, again, it saves qrcode bytes. You don't have to include a dedicated\nhash. The existing address hash can double up as both a backwards\ncompatibility measure, and also an auth mechanism.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140912/a762740b/attachment.html>"
            },
            {
                "author": "Mark van Cuijk",
                "date": "2014-09-12T20:59:19",
                "message_text_only": "On 12 Sep 2014, at 20:43 , bitcoin-development-request at lists.sourceforge.net wrote:\n\n> Specifically relevant here:\n> http://security.stackexchange.com/questions/34796/truncating-the-output-of-sha256-to-128-bits.\n> \n> If you're going to truncate though, why not just leave the amount of\n> bits up the the person generating the QR code? The client simply takes\n> the hash prefix (any length up to full 256-bits) and makes sure it's a\n> strict prefix of the actual hash of the payment request.\n\nIf you do so, please make sure the length of the hash is included in the PaymentDetails/PaymentRequest. If someone parses the URI and doesn\u2019t have an authenticated way of knowing the expected length of the hash, a MITM attacker can just truncate the hash to lower security.\n\n/Mark"
            },
            {
                "author": "Wladimir",
                "date": "2014-09-13T08:53:34",
                "message_text_only": "On Fri, Sep 12, 2014 at 10:59 PM, Mark van Cuijk <mark at coinqy.com> wrote:\n> If you do so, please make sure the length of the hash is included in the PaymentDetails/PaymentRequest. If someone parses the URI and doesn\u2019t have an authenticated way of knowing the expected length of the hash, a MITM attacker can just truncate the hash to lower security.\n\nBut if they can truncate they can just as well pass a completely\ndifferent hash that matches their payment request. If an attacker can\nchange the bitcoin: URI, this scheme is broken.\n\nThe point of the proposal is to make sure that the payment request\nmatches the URI. So *if* you communicate the URI by secure means, this\nauthenticates the associated payment request as well, even if fetched\nby insecure means (such as http:...) itself.\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "BIP72 amendment proposal",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Andreas Schildbach",
                "Mike Hearn",
                "Mark van Cuijk",
                "Christophe Biocca",
                "Aaron Voisine"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 25576
        }
    },
    {
        "title": "[Bitcoin-development] Does anyone have anything at all signed by Satoshi's PGP key?",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-09-13T13:55:28",
                "message_text_only": "So far I have zero evidence that the common claim that \"Satoshi PGP\nsigned everything\" was true; I have no evidence he ever\ncryptographically signed any communications at all.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000ce4f740fb700bb8a9ed859ac96ac9871567a20fca07f76a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140913/db0bc9da/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-09-13T14:03:20",
                "message_text_only": "That claim is horse manure :)  He never signed private emails sent to\nme, nor the forum posts.\n\nHe -might- have signed the occasional thing related to releases, I'm not sure.\n\n\nOn Sat, Sep 13, 2014 at 9:55 AM, Peter Todd <pete at petertodd.org> wrote:\n> So far I have zero evidence that the common claim that \"Satoshi PGP\n> signed everything\" was true; I have no evidence he ever\n> cryptographically signed any communications at all.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000000000000ce4f740fb700bb8a9ed859ac96ac9871567a20fca07f76a\n>\n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2014-09-14T06:28:27",
                "message_text_only": "On Sat, Sep 13, 2014 at 10:03:20AM -0400, Jeff Garzik wrote:\n> That claim is horse manure :)  He never signed private emails sent to\n> me, nor the forum posts.\n\nThat's consistent with what everyone else is saying:\nhttps://twitter.com/petertoddbtc/status/509614729879642113\n\n> He -might- have signed the occasional thing related to releases, I'm not sure.\n\nDoesn't seem like there's any evidence of that either. For instance the\narchive.org Jan 31st 2009 capture of bitcoin.org with v1.3 has a link to\nhis PGP key, but the release itself is unsigned:\nhttps://web.archive.org/web/20090131115053/http://bitcoin.org/\n\nSimilarly the Nov 29 2009 capture of the sourceforge download directory\nhas releases v0.1.0, v0.1.2, v0.1.3, and v0.1.5, none of which have\nsignatures:\n\nhttps://web.archive.org/web/20091129231630/http://sourceforge.net/projects/bitcoin/files/Bitcoin/\n\nThe earliest signature I can find is from v0.3.20 from Gavin Andresen:\n\nhttps://web.archive.org/web/20110502125522/http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.3.20/\n\nEarliest sig in the git commit history is the v0.3.21 tag, again from\nGavin.\n\n\nMy best guess is Satoshi only created the PGP key in case\nsomeone needed to send him a security-related bug report. Which leads to\na related question:\n\nDo we have any evidence Satoshi ever even had access to that key? Did he\never use PGP at all for anything?\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000ce4f740fb700bb8a9ed859ac96ac9871567a20fca07f76a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140914/833ca2e5/attachment.sig>"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-09-15T07:23:02",
                "message_text_only": "On Sunday 14. September 2014 08.28.27 Peter Todd wrote:\n> Do we have any evidence Satoshi ever even had access to that key? Did he\n> ever use PGP at all for anything?\n\nAny and all PGP related howtos will tell you that you should not trust or sign \na formerly-untrusted PGP (or GPG for that matter) key without seeing that \nperson in real life, verifying their identity etc.\n\nI think that kind of disqualifies pgp for identity purposes wrt Satoshi :-)\n\n-- \nThomas Zander"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-09-15T09:49:53",
                "message_text_only": "On 15 September 2014 09:23, Thomas Zander <thomas at thomaszander.se> wrote:\n\n> On Sunday 14. September 2014 08.28.27 Peter Todd wrote:\n> > Do we have any evidence Satoshi ever even had access to that key? Did he\n> > ever use PGP at all for anything?\n>\n> Any and all PGP related howtos will tell you that you should not trust or\n> sign\n> a formerly-untrusted PGP (or GPG for that matter) key without seeing that\n> person in real life, verifying their identity etc.\n>\n> I think that kind of disqualifies pgp for identity purposes wrt Satoshi :-)\n>\n\nBut I presume that if the key is on bitcoin.org,  you can probably infer\nthat the owner of the key and the original owner of bitcoin.org are one and\nthe same ...\n\n\n>\n> --\n> Thomas Zander\n>\n>\n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140915/bf82a94b/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-09-15T13:08:48",
                "message_text_only": "On Mon, Sep 15, 2014 at 3:23 AM, Thomas Zander <thomas at thomaszander.se> wrote:\n> Any and all PGP related howtos will tell you that you should not trust or sign\n> a formerly-untrusted PGP (or GPG for that matter) key without seeing that\n> person in real life, verifying their identity etc.\n\nSuch guidelines are a perfect example of why PGP WoT is useless and\nstupid geek wanking.\n\nA person's behavioural signature is what is relevant.  We know how\nSatoshi coded and wrote.  It was the online Satoshi with which we\ninteracted.  The online Satoshi's PGP signature would be fine...\nassuming he established a pattern of use.\n\nAs another example, I know the code contributions and PGP key signed\nby the online entity known as \"sipa.\"  At a bitcoin conf I met a\nperson with photo id labelled \"Pieter Wuille\" who claimed to be sipa,\nbut that could have been an actor.  Absent a laborious and boring\nsigned challenge process, for all we know, \"sipa\" is a supercomputing\ncluster of 500 gnomes.\n\nThe point is, the \"online entity known as Satoshi\" is the relevant\nfingerprint.  That is easily established without any in-person\nmeetings.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Brian Hoffman",
                "date": "2014-09-15T13:32:03",
                "message_text_only": "I would agree that the in person aspect of the WoT is frustrating, but to dismiss this as \"geek wanking\" is the pot calling the kettle. \n\nThe value of in person vetting of identity is undeniable. Just because your risk acceptance is difference doesn't make it wanking. Please go see if you can get any kind of governmental clearance of credential without in-person vetting. Ask them if they accept your behavioral signature. \n\nI know there is a lot of PGP hating these days but this comment doesn't necessarily apply to every situation. \n\n\n\n> On Sep 15, 2014, at 9:08 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \n>> On Mon, Sep 15, 2014 at 3:23 AM, Thomas Zander <thomas at thomaszander.se> wrote:\n>> Any and all PGP related howtos will tell you that you should not trust or sign\n>> a formerly-untrusted PGP (or GPG for that matter) key without seeing that\n>> person in real life, verifying their identity etc.\n> \n> Such guidelines are a perfect example of why PGP WoT is useless and\n> stupid geek wanking.\n> \n> A person's behavioural signature is what is relevant.  We know how\n> Satoshi coded and wrote.  It was the online Satoshi with which we\n> interacted.  The online Satoshi's PGP signature would be fine...\n> assuming he established a pattern of use.\n> \n> As another example, I know the code contributions and PGP key signed\n> by the online entity known as \"sipa.\"  At a bitcoin conf I met a\n> person with photo id labelled \"Pieter Wuille\" who claimed to be sipa,\n> but that could have been an actor.  Absent a laborious and boring\n> signed challenge process, for all we know, \"sipa\" is a supercomputing\n> cluster of 500 gnomes.\n> \n> The point is, the \"online entity known as Satoshi\" is the relevant\n> fingerprint.  That is easily established without any in-person\n> meetings.\n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-09-15T14:33:09",
                "message_text_only": "It applies to OP, bitcoin community development and Satoshi.\n\n\"value of in person vetting of identity is undeniable\"...  no it is\nquite deniable. Satoshi is the quintessential example. We value brain\noutput, code.  The real world identity is irrelevant to whether or not\nbitcoin continues to function.\n\nThe currency of bitcoin development is code, and electronic messages\ndescribing cryptographic theses.  _That_ is the relevant fingerprint.\n\nGovernmental id is second class, can be forged or simply present a\ndifferent individual from that who is online.  PGP WoT wanking does\nnot solve that problem at all.\n\n\n\n\n\n\nOn Mon, Sep 15, 2014 at 9:32 AM, Brian Hoffman <brianchoffman at gmail.com> wrote:\n> I would agree that the in person aspect of the WoT is frustrating, but to dismiss this as \"geek wanking\" is the pot calling the kettle.\n>\n> The value of in person vetting of identity is undeniable. Just because your risk acceptance is difference doesn't make it wanking. Please go see if you can get any kind of governmental clearance of credential without in-person vetting. Ask them if they accept your behavioral signature.\n>\n> I know there is a lot of PGP hating these days but this comment doesn't necessarily apply to every situation.\n>\n>\n>\n>> On Sep 15, 2014, at 9:08 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>>> On Mon, Sep 15, 2014 at 3:23 AM, Thomas Zander <thomas at thomaszander.se> wrote:\n>>> Any and all PGP related howtos will tell you that you should not trust or sign\n>>> a formerly-untrusted PGP (or GPG for that matter) key without seeing that\n>>> person in real life, verifying their identity etc.\n>>\n>> Such guidelines are a perfect example of why PGP WoT is useless and\n>> stupid geek wanking.\n>>\n>> A person's behavioural signature is what is relevant.  We know how\n>> Satoshi coded and wrote.  It was the online Satoshi with which we\n>> interacted.  The online Satoshi's PGP signature would be fine...\n>> assuming he established a pattern of use.\n>>\n>> As another example, I know the code contributions and PGP key signed\n>> by the online entity known as \"sipa.\"  At a bitcoin conf I met a\n>> person with photo id labelled \"Pieter Wuille\" who claimed to be sipa,\n>> but that could have been an actor.  Absent a laborious and boring\n>> signed challenge process, for all we know, \"sipa\" is a supercomputing\n>> cluster of 500 gnomes.\n>>\n>> The point is, the \"online entity known as Satoshi\" is the relevant\n>> fingerprint.  That is easily established without any in-person\n>> meetings.\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>> ------------------------------------------------------------------------------\n>> Want excitement?\n>> Manually upgrade your production database.\n>> When you want reliability, choose Perforce\n>> Perforce version control. Predictably reliable.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Brian Hoffman",
                "date": "2014-09-15T14:49:14",
                "message_text_only": "In the context of Bitcoin I will concede that perhaps it holds true for now.\n\nI also never said the actual credential you receive from a government\nagency is trustable. I completely agree that they are forgeable and not\nnecessarily reliable. That was not my point. I was referring to the vetting\nprocess before issuance.\n\nJust as you have behavioral characteristics online that contribute to\ntrusting an \"identity\" you also exhibit in person attributes, such as\nphysically being in a specific location at a certain time or blue eyes or\nbiometrics, that are valuable. You simply cannot capture those in an\nonline-only world. I don't see how you can deny the value there.\n\nYou are most certainly and undeniably the expert in the Bitcoin context\nhere so I will not even attempt to argue with you on that, but I just think\nit's not realistic to ignore the value of an in-person network in other\ncontexts. You called it \"geek wanking\" with no qualifier \"in the Bitcoin\ncontext\" so excuse me if I misunderstood your intent.\n\n\nOn Mon, Sep 15, 2014 at 10:33 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> It applies to OP, bitcoin community development and Satoshi.\n>\n> \"value of in person vetting of identity is undeniable\"...  no it is\n> quite deniable. Satoshi is the quintessential example. We value brain\n> output, code.  The real world identity is irrelevant to whether or not\n> bitcoin continues to function.\n>\n> The currency of bitcoin development is code, and electronic messages\n> describing cryptographic theses.  _That_ is the relevant fingerprint.\n>\n> Governmental id is second class, can be forged or simply present a\n> different individual from that who is online.  PGP WoT wanking does\n> not solve that problem at all.\n>\n>\n>\n>\n>\n>\n> On Mon, Sep 15, 2014 at 9:32 AM, Brian Hoffman <brianchoffman at gmail.com>\n> wrote:\n> > I would agree that the in person aspect of the WoT is frustrating, but\n> to dismiss this as \"geek wanking\" is the pot calling the kettle.\n> >\n> > The value of in person vetting of identity is undeniable. Just because\n> your risk acceptance is difference doesn't make it wanking. Please go see\n> if you can get any kind of governmental clearance of credential without\n> in-person vetting. Ask them if they accept your behavioral signature.\n> >\n> > I know there is a lot of PGP hating these days but this comment doesn't\n> necessarily apply to every situation.\n> >\n> >\n> >\n> >> On Sep 15, 2014, at 9:08 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> >>\n> >>> On Mon, Sep 15, 2014 at 3:23 AM, Thomas Zander <thomas at thomaszander.se>\n> wrote:\n> >>> Any and all PGP related howtos will tell you that you should not trust\n> or sign\n> >>> a formerly-untrusted PGP (or GPG for that matter) key without seeing\n> that\n> >>> person in real life, verifying their identity etc.\n> >>\n> >> Such guidelines are a perfect example of why PGP WoT is useless and\n> >> stupid geek wanking.\n> >>\n> >> A person's behavioural signature is what is relevant.  We know how\n> >> Satoshi coded and wrote.  It was the online Satoshi with which we\n> >> interacted.  The online Satoshi's PGP signature would be fine...\n> >> assuming he established a pattern of use.\n> >>\n> >> As another example, I know the code contributions and PGP key signed\n> >> by the online entity known as \"sipa.\"  At a bitcoin conf I met a\n> >> person with photo id labelled \"Pieter Wuille\" who claimed to be sipa,\n> >> but that could have been an actor.  Absent a laborious and boring\n> >> signed challenge process, for all we know, \"sipa\" is a supercomputing\n> >> cluster of 500 gnomes.\n> >>\n> >> The point is, the \"online entity known as Satoshi\" is the relevant\n> >> fingerprint.  That is easily established without any in-person\n> >> meetings.\n> >>\n> >> --\n> >> Jeff Garzik\n> >> Bitcoin core developer and open source evangelist\n> >> BitPay, Inc.      https://bitpay.com/\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Want excitement?\n> >> Manually upgrade your production database.\n> >> When you want reliability, choose Perforce\n> >> Perforce version control. Predictably reliable.\n> >>\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140915/66d1dfaf/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-09-15T14:55:47",
                "message_text_only": "WoT is a perfectly reasonable way to establish trust about the link between\nan online identity and a real world identity.\n\nIn the case of a developer with an existing reputation for his online\nidentity, that link is just irrelevant.\nOn Sep 15, 2014 4:52 PM, \"Brian Hoffman\" <brianchoffman at gmail.com> wrote:\n\n> In the context of Bitcoin I will concede that perhaps it holds true for\n> now.\n>\n> I also never said the actual credential you receive from a government\n> agency is trustable. I completely agree that they are forgeable and not\n> necessarily reliable. That was not my point. I was referring to the vetting\n> process before issuance.\n>\n> Just as you have behavioral characteristics online that contribute to\n> trusting an \"identity\" you also exhibit in person attributes, such as\n> physically being in a specific location at a certain time or blue eyes or\n> biometrics, that are valuable. You simply cannot capture those in an\n> online-only world. I don't see how you can deny the value there.\n>\n> You are most certainly and undeniably the expert in the Bitcoin context\n> here so I will not even attempt to argue with you on that, but I just think\n> it's not realistic to ignore the value of an in-person network in other\n> contexts. You called it \"geek wanking\" with no qualifier \"in the Bitcoin\n> context\" so excuse me if I misunderstood your intent.\n>\n>\n> On Mon, Sep 15, 2014 at 10:33 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>\n>> It applies to OP, bitcoin community development and Satoshi.\n>>\n>> \"value of in person vetting of identity is undeniable\"...  no it is\n>> quite deniable. Satoshi is the quintessential example. We value brain\n>> output, code.  The real world identity is irrelevant to whether or not\n>> bitcoin continues to function.\n>>\n>> The currency of bitcoin development is code, and electronic messages\n>> describing cryptographic theses.  _That_ is the relevant fingerprint.\n>>\n>> Governmental id is second class, can be forged or simply present a\n>> different individual from that who is online.  PGP WoT wanking does\n>> not solve that problem at all.\n>>\n>>\n>>\n>>\n>>\n>>\n>> On Mon, Sep 15, 2014 at 9:32 AM, Brian Hoffman <brianchoffman at gmail.com>\n>> wrote:\n>> > I would agree that the in person aspect of the WoT is frustrating, but\n>> to dismiss this as \"geek wanking\" is the pot calling the kettle.\n>> >\n>> > The value of in person vetting of identity is undeniable. Just because\n>> your risk acceptance is difference doesn't make it wanking. Please go see\n>> if you can get any kind of governmental clearance of credential without\n>> in-person vetting. Ask them if they accept your behavioral signature.\n>> >\n>> > I know there is a lot of PGP hating these days but this comment doesn't\n>> necessarily apply to every situation.\n>> >\n>> >\n>> >\n>> >> On Sep 15, 2014, at 9:08 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>> >>\n>> >>> On Mon, Sep 15, 2014 at 3:23 AM, Thomas Zander <\n>> thomas at thomaszander.se> wrote:\n>> >>> Any and all PGP related howtos will tell you that you should not\n>> trust or sign\n>> >>> a formerly-untrusted PGP (or GPG for that matter) key without seeing\n>> that\n>> >>> person in real life, verifying their identity etc.\n>> >>\n>> >> Such guidelines are a perfect example of why PGP WoT is useless and\n>> >> stupid geek wanking.\n>> >>\n>> >> A person's behavioural signature is what is relevant.  We know how\n>> >> Satoshi coded and wrote.  It was the online Satoshi with which we\n>> >> interacted.  The online Satoshi's PGP signature would be fine...\n>> >> assuming he established a pattern of use.\n>> >>\n>> >> As another example, I know the code contributions and PGP key signed\n>> >> by the online entity known as \"sipa.\"  At a bitcoin conf I met a\n>> >> person with photo id labelled \"Pieter Wuille\" who claimed to be sipa,\n>> >> but that could have been an actor.  Absent a laborious and boring\n>> >> signed challenge process, for all we know, \"sipa\" is a supercomputing\n>> >> cluster of 500 gnomes.\n>> >>\n>> >> The point is, the \"online entity known as Satoshi\" is the relevant\n>> >> fingerprint.  That is easily established without any in-person\n>> >> meetings.\n>> >>\n>> >> --\n>> >> Jeff Garzik\n>> >> Bitcoin core developer and open source evangelist\n>> >> BitPay, Inc.      https://bitpay.com/\n>> >>\n>> >>\n>> ------------------------------------------------------------------------------\n>> >> Want excitement?\n>> >> Manually upgrade your production database.\n>> >> When you want reliability, choose Perforce\n>> >> Perforce version control. Predictably reliable.\n>> >>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140915/1fda7d57/attachment.html>"
            },
            {
                "author": "ThomasZander.se",
                "date": "2014-09-15T14:38:34",
                "message_text_only": "\u200eThe reason it is in fact wanking is because pgp tried to solve a problem that can't be solved.\nIt tried to provide distributed trust to a system of identity, while still depending on the local government (i.e centralized) for the upstream ID...\n\nIt's a marriage that has no benefit.\n\nWhat we really want is (decentralized) identity management that allows me to create a new anonymous ID and use that as something more secure than trusting a behavior pattern to proof it's me.\u00a0\n\nSent on the go. Excuse the brevity.\n\u00a0 Original Message \u00a0\nFrom: Brian Hoffman\nSent: 15:35 mandag 15. september 2014\nTo: Jeff Garzik\nCc: Thomas Zander; Bitcoin Dev\nSubject: Re: [Bitcoin-development] Does anyone have anything at all signed by Satoshi's PGP key?\n\nI would agree that the in person aspect of the WoT is frustrating, but to dismiss this as \"geek wanking\" is the pot calling the kettle. \n\nThe value of in person vetting of identity is undeniable. Just because your risk acceptance is difference doesn't make it wanking. Please go see if you can get any kind of governmental clearance of credential without in-person vetting. Ask them if they accept your behavioral signature. \n\nI know there is a lot of PGP hating these days but this comment doesn't necessarily apply to every situation. \n\n\n\n> On Sep 15, 2014, at 9:08 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \n>> On Mon, Sep 15, 2014 at 3:23 AM, Thomas Zander <thomas at thomaszander.se> wrote:\n>> Any and all PGP related howtos will tell you that you should not trust or sign\n>> a formerly-untrusted PGP (or GPG for that matter) key without seeing that\n>> person in real life, verifying their identity etc.\n> \n> Such guidelines are a perfect example of why PGP WoT is useless and\n> stupid geek wanking.\n> \n> A person's behavioural signature is what is relevant. We know how\n> Satoshi coded and wrote. It was the online Satoshi with which we\n> interacted. The online Satoshi's PGP signature would be fine...\n> assuming he established a pattern of use.\n> \n> As another example, I know the code contributions and PGP key signed\n> by the online entity known as \"sipa.\" At a bitcoin conf I met a\n> person with photo id labelled \"Pieter Wuille\" who claimed to be sipa,\n> but that could have been an actor. Absent a laborious and boring\n> signed challenge process, for all we know, \"sipa\" is a supercomputing\n> cluster of 500 gnomes.\n> \n> The point is, the \"online entity known as Satoshi\" is the relevant\n> fingerprint. That is easily established without any in-person\n> meetings.\n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc. https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> Want excitement?\n> Manually upgrade your production database.\n> When you want reliability, choose Perforce\n> Perforce version control. Predictably reliable.\n> http://pubads.g.doubleclick.net/gampad/clk?id=157508191&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Thomas Zander",
                "date": "2014-09-15T15:10:21",
                "message_text_only": "The reason it is in fact geek wanking is because pgp tried to solve a problem \nthat can't be solved.\nIt tried to provide distributed trust to a system of identity, while still \ndepending on the local governments (i.e. centralization) for the upstream ID.\n\nIts a marriage that has no benefits.\n\nWhat we really want is a (decentralized) identity management that allows me to \ncreate a new anonymous ID and use that as something more secure when needed \nthat I have to proof its me.\n\nSo for instance I start including a bitcoin public key in my email signature. \nI don't sign the emails or anything like that, just to establish that everyone \nhas my public key many times in their email archives.\nThen when I need to proof its me, I can provide a signature on the content \nthat the requester wants me to sign.\n\nAll the overhead of PGP and the WoT is really completely unneeded and just \nmeans that less people use it.\n\nConsider this; people create accounts on GitHub or Reddit and those have in \nfact more value than your pgp key!  Because they got the anonymous part right.\n\n\nOn Monday 15. September 2014 09.32.03 Brian Hoffman wrote:\n> I would agree that the in person aspect of the WoT is frustrating, but to\n> dismiss this as \"geek wanking\" is the pot calling the kettle.\n> \n> The value of in person vetting of identity is undeniable. Just because your\n> risk acceptance is difference doesn't make it wanking. Please go see if you\n> can get any kind of governmental clearance of credential without in-person\n> vetting. Ask them if they accept your behavioral signature.\n> \n> I know there is a lot of PGP hating these days but this comment doesn't\n> necessarily apply to every situation.\n> > On Sep 15, 2014, at 9:08 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> >> On Mon, Sep 15, 2014 at 3:23 AM, Thomas Zander <thomas at thomaszander.se>\n> >> wrote: Any and all PGP related howtos will tell you that you should not\n> >> trust or sign a formerly-untrusted PGP (or GPG for that matter) key\n> >> without seeing that person in real life, verifying their identity etc.\n> > \n> > Such guidelines are a perfect example of why PGP WoT is useless and\n> > stupid geek wanking.\n> > \n> > A person's behavioural signature is what is relevant.  We know how\n> > Satoshi coded and wrote.  It was the online Satoshi with which we\n> > interacted.  The online Satoshi's PGP signature would be fine...\n> > assuming he established a pattern of use.\n> > \n> > As another example, I know the code contributions and PGP key signed\n> > by the online entity known as \"sipa.\"  At a bitcoin conf I met a\n> > person with photo id labelled \"Pieter Wuille\" who claimed to be sipa,\n> > but that could have been an actor.  Absent a laborious and boring\n> > signed challenge process, for all we know, \"sipa\" is a supercomputing\n> > cluster of 500 gnomes.\n> > \n> > The point is, the \"online entity known as Satoshi\" is the relevant\n> > fingerprint.  That is easily established without any in-person\n> > meetings."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-09-15T15:51:35",
                "message_text_only": "On Monday, 15 September 2014, at 5:10 pm, Thomas Zander wrote:\n> So for instance I start including a bitcoin public key in my email signature. \n> I don't sign the emails or anything like that, just to establish that everyone \n> has my public key many times in their email archives.\n> Then when I need to proof its me, I can provide a signature on the content \n> that the requester wants me to sign.\n\nThat would not work. You would need to sign your messages. If you were merely attaching your public key to them, then the email server could have been systematically replacing your public key with some other public key, and then, when you would later try to provide a signature, your signature would not verify under the public key that everyone else had been seeing attached to your messages."
            },
            {
                "author": "Thomas Zander",
                "date": "2014-09-15T16:07:37",
                "message_text_only": "On Monday 15. September 2014 11.51.35 Matt Whitlock wrote:\n>  If you were merely attaching your public key to them, then the email server\n> could have been systematically replacing your public key with some other\n> public key,\n\nThe beauty of publicly archived mailinglists make it impossible to get away \nwith this without detection.\n\nI recall reading the awesome book \"The inmates are running the asylum\" which \nstates that solutions created by software engineers typically suffer from the \nflaw of absolutes. (find the part where he describes homo-digitalus for more)\n\nI think this applies to PGP and your objection; in order to make it absolutely \ncorrect, you need to introduce loads of things. Signatures, WoT, etc.\nPGP&GPG do this. But each change of the normal workflow means you loose about \n50% of your audience...\n\nSo, my silly example is not perfect. But I bet its good enough for most. In \nthe end the value of the imperfect solution is higher than the perfect one."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-09-15T16:10:14",
                "message_text_only": "On Mon, Sep 15, 2014 at 3:51 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> On Monday, 15 September 2014, at 5:10 pm, Thomas Zander wrote:\n>> So for instance I start including a bitcoin public key in my email signature.\n>> I don't sign the emails or anything like that, just to establish that everyone\n>> has my public key many times in their email archives.\n>> Then when I need to proof its me, I can provide a signature on the content\n>> that the requester wants me to sign.\n>\n> That would not work. You would need to sign your messages. If you were merely attaching your public key to them, then the email server could have been systematically replacing your public key with some other public key, and then, when you would later try to provide a signature, your signature would not verify under the public key that everyone else had been seeing attached to your messages.\n\nIf the server could replace the public key, it could replace the\nsignature in all the same places.\n\nPlease, can this stuff move to another list? It's offtopic."
            },
            {
                "author": "Peter Todd",
                "date": "2014-09-15T16:20:44",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nOn 15 September 2014 17:10:14 BST, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>If the server could replace the public key, it could replace the\n>signature in all the same places.\n>\n>Please, can this stuff move to another list? It's offtopic.\n\n+1\n\nMy original post was OT really, although obviously this was the right venue to be sure the required audience saw it and settle the question.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJUFxHcMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhfCtCACLNgMrxRQ4YlX4Tkyt\nCIlqRh4AOLVRXeh6ER+BJJhJA+hbunNfH6kkROIinpBsFxlRfoHwrv2ax6GIlegO\ns1+MSLFAoOob3tLQY/LrVF0PMTbKybdQRqQopzu81hbLTCjpnrnN2sDpAOA/bDsV\nxDTHNVbOWS7UapkZf7AjueDfuyW3yhvcgsq1Tuc4r7pdKCEQA/HjBzIqyFT2K9hp\nuahaENzCfsCVsEiTmAu+p9EvXhLWmMRfRz15z7D/KtOBTI83/t/WR7UnWlSRHn4i\nXyhj/iDv+kPj/vsGXZClCUZ7T/64ovVvoeY9Pk+1fc6okWWXmTHsH+R72szkhgEu\nO4QP\n=C27J\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Venzen",
                "date": "2014-09-15T14:44:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nFunny that you should describe WoT that way. According to some\npsycho-analysts the act of making love to a partner is actually a\nrealization of our subconscious desire to make love to ourselves.\n\nSo, in this sense, WoT geeks are indeed masturbating, but it's with\nthe good purpose of ensuring that it's being done via the intended\nrecipient and not some imposter or unsuspecting bystander.\n\nThat's a valid concern, especially as Bitcoin development ranks grow\nand branch beyond a small core team.\n\n\n\nOn 09/15/2014 08:08 PM, Jeff Garzik wrote:\n> On Mon, Sep 15, 2014 at 3:23 AM, Thomas Zander\n> <thomas at thomaszander.se> wrote:\n>> Any and all PGP related howtos will tell you that you should not\n>> trust or sign a formerly-untrusted PGP (or GPG for that matter)\n>> key without seeing that person in real life, verifying their\n>> identity etc.\n> \n> Such guidelines are a perfect example of why PGP WoT is useless\n> and stupid geek wanking.\n> \n> A person's behavioural signature is what is relevant.  We know how \n> Satoshi coded and wrote.  It was the online Satoshi with which we \n> interacted.  The online Satoshi's PGP signature would be fine... \n> assuming he established a pattern of use.\n> \n> As another example, I know the code contributions and PGP key\n> signed by the online entity known as \"sipa.\"  At a bitcoin conf I\n> met a person with photo id labelled \"Pieter Wuille\" who claimed to\n> be sipa, but that could have been an actor.  Absent a laborious and\n> boring signed challenge process, for all we know, \"sipa\" is a\n> supercomputing cluster of 500 gnomes.\n> \n> The point is, the \"online entity known as Satoshi\" is the relevant \n> fingerprint.  That is easily established without any in-person \n> meetings.\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAEBAgAGBQJUFvsyAAoJENQRrA3m8xlAwkAH/iRekS+Q0jIzaMPFJjD9Qh2e\nTTpnQ5MyceeWaEQ9BIS9Lp92k/KlhYUmdaHRmmgOuUQZ6VlOmLSyveMe2qpX3igb\njZX3ydZe2hs1D3Z48MFyNBz06eufApSi5LC8BvN4bYotOD+/qrrxag+jaU3NjDu3\nyCaSF563ZQ9xXkfh5JoZ3SGBcRmR5bS6QAoR29OQXBubriPwJuVxUBB37cfaL2Nf\nrc67q2KgpU/vOyucxMFZgoP0vDjxUzXTc2ONrEHGJUfdypMADFwXjxeA8ikOt4ik\nGIB69wMGQiMeE5e3H337yJxYaZJK4R1KnrSLF0j+Vkl3Yy25duBYAbFUGayeTw0=\n=xR8K\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-09-15T18:06:06",
                "message_text_only": "On 09/15/2014 03:08 PM, Jeff Garzik wrote:\n> Such guidelines are a perfect example of why PGP WoT is useless and\n> stupid geek wanking.\n> \n> A person's behavioural signature is what is relevant.  We know how\n> Satoshi coded and wrote.  It was the online Satoshi with which we\n> interacted.  The online Satoshi's PGP signature would be fine...\n> assuming he established a pattern of use.\n\nI wrote up an example of how the WoT and the behavior signature might be\ncombined via a game:\n\nhttp://bitcoinism.blogspot.ch/2013/09/building-pgp-web-of-trust-that-people.html\n\ntl;dr: \"Identity\" is not a name - it's a set of shared experiences with\nother people. Identity systems that want to be successful should focus\non those shared experiences rather than names.\n\n-- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140915/571a6599/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 455 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140915/571a6599/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Does anyone have anything at all signed by Satoshi's PGP key?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Brian Hoffman",
                "ThomasZander.se",
                "Thomas Zander",
                "Peter Todd",
                "Matt Whitlock",
                "Gregory Maxwell",
                "Venzen",
                "Melvin Carvalho",
                "Pieter Wuille",
                "Justus Ranvier"
            ],
            "messages_count": 18,
            "total_messages_chars_count": 36338
        }
    },
    {
        "title": "[Bitcoin-development] how",
        "thread_messages": [
            {
                "author": "ggprodukcija kig",
                "date": "2014-09-15T07:32:13",
                "message_text_only": "Hi\n\ni have some money on btc. How invest, and where invest for more eranig\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140915/1ee973a9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "how",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "ggprodukcija kig"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 257
        }
    },
    {
        "title": "[Bitcoin-development] Payment Protocol Proposal: Invoices/Payments/Receipts",
        "thread_messages": [
            {
                "author": "Vezalke",
                "date": "2014-09-17T19:28:08",
                "message_text_only": "Alan Reiner <etotheipi <at> gmail.com> writes:\n\n> \n> \n> \n> On Thu, Dec 6, 2012 at 11:56 AM, Gavin Andresen <gavinandresen <at>\ngmail.com> wrote:When I say \"pass around\" I'm not thinking of users copying\nand pasting, that would be a terrible user experience; all of that\ncommunication needs to happen automatically behind the scenes. Lets tackle\nthat after we've got the simpler customer-pays-merchant flow working nicely\n(funded-escrow-pays-merchant is a subset of that, anyway).\n> \n> \n> \n> \n> I think that the \"pass around\" method needs to happen in addition to the\nmethods of transparent protocols that occur behind the scenes. \u00a0For one,\nthere's a lot of CONOPs that need to be worked out by getting knowledgeable\npeople using it, and providing feedback about how it could/should/will be\nused and how it could be improved. \u00a0The pass-around method is simpler to\nimplement and still usable by the types of users that will be using it in\nthe beginning -- experts. \u00a0Also, I see that for very large, important\nmulti-sig tx/contracts/escrow, the \"manual\" method might be preferred --\nmuch the same way many people prefer manual-transmission cars even though\nautomatics are \"easier\" -- some people/organizations will want the control. \u00a0\u00a0\n> \n> I'm all for protocols that enable higher-level access to this\nfunctionality, I'm just saying there should be lower-level access, too.\n> \n> \n> \n> \n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> LogMeIn Rescue: Anywhere, Anytime Remote support for IT. Free Trial\n> Remotely access PCs and mobile devices and provide instant support\n> Improve your efficiency, and focus on delivering more value-add services\n> Discover what IT Professionals Know. Rescue delivers\n> http://p.sf.net/sfu/logmein_12329d2d\n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development <at> lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \nAnother online space wagering stage has been propelled and targets Bitcoin,\nLitecoin and Dogecoin fans from everywhere throughout the world. \n\nPresented in August, Crypto-Games.net is a straightforward space machine\ndiversion that might be immediately played in any web program with the\nutilization of cryptocurrencies, making it one of the first few wagering\ndestinations that are intended for Slot machine betting. \n\nAs indicated by its site, it emphasizes a four-reel space machine with one\npay line that acknowledges wagers measuring from 50 Credits to a greatest of\n9,999 Credits, where playing with most extreme wager yields a gigantic big\nstake of 4,999,500 Credits. \n\nThen, the store exchange routines for this opening machine amusement have\nbeen created to be productive with the stores taking online 2 to 10 minutes\nto be transformed and the withdrawals just 6 to 60 minutes without any\ntransaction charges. Moreover, a QR code has as of now been added to suit\nversatile bettors utilizing their cell phones and tablets. \n\nAlso, the administrators have taken the additional mile to guarantee\nreasonableness by depending on the random.org API to deliver genuine\narbitrariness that supplements the diversion's reasonable calculation. \n\nThe https://www.crypto-games.net opening diversion, on the other hand,\ncautions players to observe their remarkable ID number to abstain from\nlosing access to their account. This is essential on the grounds that\nCrypto-Games does not oblige any type of record enlistment; rather, it\ncomposes into cookies, which are erased following 14 days. \n\nBesides, it has taken off new extra arrangements for Crypto bettors aside\nfrom the 25% house edge that are up for gets through the referral system."
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol Proposal: Invoices/Payments/Receipts",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Vezalke"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3726
        }
    },
    {
        "title": "[Bitcoin-development] [ann] Bitcoin Core 0.9.3 rc2 is available for download",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-09-18T12:52:32",
                "message_text_only": "FYI rc2 has been uploaded last weekend to\nhttps://bitcoin.org/bin/0.9.3/test/, with some further fixes in\nnetwork and memory behaviour\n\n- Remove a useless millisleep in socket handler\n- Stricter memory limits on CNode\n- Better orphan transaction handling\n- Add `-maxorphantx=<n>` and `-maxorphanblocks=<n>` options for\ncontrol over the maximum orphan counts\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.9.3 rc2 is available for download",
            "categories": [
                "Bitcoin-development",
                "ann"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 367
        }
    },
    {
        "title": "[Bitcoin-development] Applying clang-format to Bitcoin Core",
        "thread_messages": [
            {
                "author": "Jeff Garzik",
                "date": "2014-09-20T13:00:39",
                "message_text_only": "We are slowly applying a consistent style to the C++ source, via\nclang-format (LLVM) and $repo/src/.clang-format.\n\nIf you have a patch that is difficult to apply to the tree due to\nreformatting, simply apply clang-format and then rediff.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Applying clang-format to Bitcoin Core",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 342
        }
    },
    {
        "title": "[Bitcoin-development] From block 0 to block 72499 the Merkle root is the same as the coinbase transaction id. Why is that?",
        "thread_messages": [
            {
                "author": "Peter Grigor",
                "date": "2014-09-20T15:38:15",
                "message_text_only": "-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140920/37a7adcd/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-09-20T16:22:10",
                "message_text_only": "1. Not all of them (just the ones that have a coinbase transaction and\nnothing else).\n2. The merkle root of a tree with just one item is the hash of that item.\n\nOn Sat, Sep 20, 2014 at 11:38 AM, Peter Grigor <peter at grigor.ws> wrote:\n>\n>\n> ------------------------------------------------------------------------------\n> Slashdot TV.  Video for Nerds.  Stuff that Matters.\n> http://pubads.g.doubleclick.net/gampad/clk?id=160591471&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-09-20T16:24:16",
                "message_text_only": "On Sat, Sep 20, 2014 at 08:38:15AM -0700, Peter Grigor wrote:\n> From block 0 to block 72499 the Merkle root is the same as the\n> coinbase transaction id. Why is that?\n\nIt's because of how the merkle tree algorithm works:\n\n    uint256 CBlock::BuildMerkleTree() const\n    {\n        vMerkleTree.clear();\n\nSo here all the txids are pushed onto the vMerkleTree vector:\n\n        BOOST_FOREACH(const CTransaction& tx, vtx)\n            vMerkleTree.push_back(tx.GetHash());\n\nFor most of the early blocks there's just the coinbase transaction and\nno other transactions.\n\n        int j = 0;\n        for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n\nThat means this for loop never executes! nSize = vtx.size() == 1, and\nthe loop terminates when nSize <= 1\n\n        {\n            for (int i = 0; i < nSize; i += 2)\n            {\n                int i2 = std::min(i+1, nSize-1);\n                vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n                                           BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n            }\n            j += nSize;\n        }\n        return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n    }\n\nThus the vMerkleTree still has only the coinbase txid in it, and and\nvMerkleTree.back() returns that txid as the merkle root. There's no\nproblem with the merkle root algorithm working that way - to make a long\nstory short all this means is that the merkle tree algorithm\nconsistently uses the txid as the merkle root whenever there is only one\ntransaction. The contents of the block is still being securely committed\nto by the merkleroot, which is the important thing, and there's no way\nto lie about those contents.\n\nThere is however a serious flaw in the algorithm, unrelated to the case\nof a single transaction, where the merkle tree is indistinguishable from\na merkle tree with duplicate txids if there are a non-power-of-two\nnumber of items in the tree. For bitcoin we fixed this flaw with BIP30\nand BIP34; for any other application you should *never* use the Satoshi\nmerkle root calculation code. Get it right on day one and do things\ncorrectly.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000000fbf83c9e14d8711e4b2264ceda0d1d06d169c811387eadd\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140920/956a305a/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "From block 0 to block 72499 the Merkle root is the same as the coinbase transaction id. Why is that?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Christophe Biocca",
                "Peter Grigor",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3347
        }
    },
    {
        "title": "[Bitcoin-development] Proposal: \"No-Collision\" mode for Multisig BIP32 Wallets",
        "thread_messages": [
            {
                "author": "Alan Reiner",
                "date": "2014-09-23T16:16:57",
                "message_text_only": "This topic has been touched on briefly here before, but I wanted to\nsolidify it and propose it as a BIP if there is wider support for it. \nAlso, the topic is difficult to discuss without lots of pictures -- so\nthat's what I've done (mainly to describe it to my team, but also as\ngeneral documentation).  It's in presentation form:\n\nhttps://s3.amazonaws.com/bitcoinarmory-media/MultisigWalletNoCollide.pdf\n\nThe proposal is that for an M-of-N multisig wallet based on BIP32, there\nshould be N internal chains and N external chains.  Each party is\nassigned a chain based on the lexicographic ordering of their wallet's\nroot public key in the multisig.   This guarantees that no parties are\ngenerating and distributing the same addresses, and also provides a\ncertain level of built-in book-keeping.  Coins being received on chain\n2*x were created by participant x (receiving), and coins received on\n2*x+1 are change outputs created by participant x (outgoing).  Thus,\nit's easy from simply looking at the wallet structure who was\nresponsible for which transactions.\n\nAlternatively, we could change it to suggest that each \"device\" is\nassigned a pair of chains.  For a 2-of-3 there may 3 participants plus a\nCFO with a \"watch-only\" version of the multisig wallet.  Then you might\nuse four pairs of chains.  I'm just not sure how they would be assigned.\n\nIf this has been proposed before, then consider this my contribution to\ndocumentation. \n-Alan\n\nP.S. -- \"No-Collision Mode\" is not a great name.  Happy to take\nsuggestions for changing it."
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-09-23T16:37:20",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 09/23/2014 04:16 PM, Alan Reiner wrote:\n> P.S. -- \"No-Collision Mode\" is not a great name.  Happy to take \n> suggestions for changing it.\n\nI'd call it a \"voting pool wallet\", since that was the original\napplication for this arrangement.\n\nWould be nice if you'd at least mention our work, since we did share\nit with you back in January and have been publicly documenting it ever\nsince.\n\nOr does the fact that we're implementing it in btcwallet mean what\nwe're working on is unmentionable here?\n\n- -- \nJustus Ranvier                   | Monetas <http://monetas.net/>\n<mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n                                 | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJUIaHAAAoJEMP3uyY4RQ21nwoH/3MYi9JibblZYmSOvCT1vJrN\nIh+Q2WNumIAI+Y9bh4bBgLuhnG5lXyHedhYEUW+mfuwGiX+92Uc47nwaWED2/Lte\n4Zk/KZnwLifdWCgKLdGpW6mzksRiOaVyU4vV5JchVOrGZZ2zYNIq+NcChtCph7Y5\nL202ReAG+1dfSpp4rFckuv7pTVjNcrq89UN1tJFDNQdxzIRd7bwoeCuvyFurZagB\n88bNiOl0BI3e090WC+CWmbC6BfqJiicn/d0gp/agW01wy7CVbLypPPTKmYqt3+54\nmsLUgaRHcbjuyKqu8HMHpYtgYVSNFg2q+U4SgmEepzPAkQ97khbduqA6i1B0ULM=\n=t/xp\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140923/691a56c9/attachment.bin>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-09-23T16:48:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 09/23/2014 12:37 PM, Justus Ranvier wrote:\n> Would be nice if you'd at least mention our work, since we did share\n> it with you back in January and have been publicly documenting it ever\n> since.\n>\n> Or does the fact that we're implementing it in btcwallet mean what\n> we're working on is unmentionable here?\n>\n\nPlease don't assume poor intentions or sneaky motives.  I get a lot of\nemails from a lot of people about a lot of things.  Nine months ago was\nan eternity in this world, and it can't be ruled out that I simply forgot.\n\nI have no problem giving credit where it is due, and I mentioned in my\nfirst email that I wasn't sure if my stuff was original.  Please\nrecap/link it here so that it can be part of this discussion.\n\n- -Alan\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAEBAgAGBQJUIaRiAAoJEBHe6b77WWmFcBgP/2IiQWda5diBIrd8MjbtYz/X\npF+B1zOipClil151pKN5h9f4CI75qwSBSG6pUS+QH1lCz97nr5AoVYV5SAaRzv0z\nL9Bz0PiHJFHd4IRbfuFqlPZB8mw2TMD7QWJx/1U+WmpnYYOGsUeJn25psIVZSRTU\nFTCsmYrA4cGZ4bZoUKI/eiXrHao8rm/zQ7QHKOMSFWZT57sNea67vlxPXKu+AkmK\nnEYa4hD0kD7/R/TrNcmRmOlmbqCnyjICd/yp8Lj26CdHPv3PAvaxUwSX3VhWPbdc\nUOiGeo+lXqRnBVpwMd+k7oFddwrc2k9ISRdUVsU86z3JdAXKl/dLS5UoOtfC1JA9\nm90TuRtq4QuuzjLF3brI9FthuHNowA//qaVfjo/AYgsKy15td9UBtFbt4E9w263M\nNiFEmFkXfbE1JmIvmPG3AQEEdQ1/nmWiN5UcLrBfauEHMDQ1fGd89A8IBpus7bWM\nkYXboW3E9RBN4lB6OdyYU4AuH0YQhZodmry4iElMPox/tclmNiaeqDR8UYhD5BMd\neQN9zAALyR1IY1167Ki/abVfWVf5jF7b0Eeu/wAfwcble3sCFrvWWAwzHjNi3GjY\ngNfy1eDTbwLj2M63QbtB+YqzQBZx3+SY4euGKYQ1s1CVV9ibAFI52oxeMhwzVOWF\nofeDK5BPL8H+5L3tk+1o\n=tX2n\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-09-23T17:07:58",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 09/23/2014 04:48 PM, Alan Reiner wrote:\n> Please recap/link it here so that it can be part of this\n> discussion.\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/32736455/\n\nhttp://opentransactions.org/wiki/index.php/Deposit_Address_(voting_pools)\n\nCurrently being implemented here:\n\nhttps://github.com/monetas/btcwallet/commits/vp\n\n- --\n\nReally what's so annoying is how the BIP numbering process is handled in\nsuch a way that proposals can be silently pigeonholed.\n\nEspecially so in the case of an *informational* BIP which requires no\naction on anyone's part (except for not using the same BIP43 purpose\ncode).\n\nWe resolved this by changing the naming scheme for our proposals, and\ntheir associated purpose codes, to not rely on centrally-allocated\nnumbers.\n\nhttps://github.com/Open-Transactions/rfc/tree/master/bips\n\n- -- \nJustus Ranvier                   | Monetas <http://monetas.net/>\n<mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n                                 | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJUIajuAAoJEMP3uyY4RQ215dQH/1GNOmZd19/e2Ys7MNFx0gqz\nrDmTFBylU3lhJrMY4CDd4Duq5+2U7HgaovqgX8UqxquHWLQUwEzZLqdEPCifLg0c\nd/u90cRlClFAaOxPh4HV2/3aZoS2R27N+ZjOfziW7RZySBP/2fMt4/ra+SPbkcAQ\noeplYgqMRDqW52C/o2zm4y4yb0TJPS+lzSNM+JfxHSPRyY55l0KzLJfUNz1RSOze\nA8UAwdsLiJROKPKiSrQcqFOejPV7uqSPh10ukm/AI0k8TbvX8ffGQ083394M9IuE\nDB/1eyeLQVP5+lQMWNrTHk3BQ75XBEDJoSukaRENcqxtHV2m1JzTWoS2CQBXi2M=\n=TwI3\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140923/c8cf6cc2/attachment.bin>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: \"No-Collision\" mode for Multisig BIP32 Wallets",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Alan Reiner",
                "Justus Ranvier"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6441
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-development Digest, Vol 40, Issue 9",
        "thread_messages": [
            {
                "author": "Vitalik Buterin",
                "date": "2014-09-23T17:57:29",
                "message_text_only": "Have you looked at how Coinvault does it? They have a similar setup, but\nsort the pubkeys at each address.\n\nOn Tue, Sep 23, 2014 at 1:09 PM, <\nbitcoin-development-request at lists.sourceforge.net> wrote:\n\n> Send Bitcoin-development mailing list submissions to\n>         bitcoin-development at lists.sourceforge.net\n>\n> To subscribe or unsubscribe via the World Wide Web, visit\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> or, via email, send a message with subject or body 'help' to\n>         bitcoin-development-request at lists.sourceforge.net\n>\n> You can reach the person managing the list at\n>         bitcoin-development-owner at lists.sourceforge.net\n>\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of Bitcoin-development digest...\"\n>\n>\n> Today's Topics:\n>\n>    1. Re: Proposal: \"No-Collision\" mode for Multisig BIP32 Wallets\n>       (Justus Ranvier)\n>    2. Re: Proposal: \"No-Collision\" mode for Multisig BIP32 Wallets\n>       (Alan Reiner)\n>    3. Re: Proposal: \"No-Collision\" mode for Multisig BIP32 Wallets\n>       (Justus Ranvier)\n>\n>\n> ----------------------------------------------------------------------\n>\n> Message: 1\n> Date: Tue, 23 Sep 2014 16:37:20 +0000\n> From: Justus Ranvier <justus at monetas.net>\n> Subject: Re: [Bitcoin-development] Proposal: \"No-Collision\" mode for\n>         Multisig BIP32 Wallets\n> To: bitcoin-development at lists.sourceforge.net\n> Message-ID: <5421A1C0.6080605 at monetas.net>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On 09/23/2014 04:16 PM, Alan Reiner wrote:\n> > P.S. -- \"No-Collision Mode\" is not a great name.  Happy to take\n> > suggestions for changing it.\n>\n> I'd call it a \"voting pool wallet\", since that was the original\n> application for this arrangement.\n>\n> Would be nice if you'd at least mention our work, since we did share\n> it with you back in January and have been publicly documenting it ever\n> since.\n>\n> Or does the fact that we're implementing it in btcwallet mean what\n> we're working on is unmentionable here?\n>\n> - --\n> Justus Ranvier                   | Monetas <http://monetas.net/>\n> <mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n>                                  | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQEcBAEBCAAGBQJUIaHAAAoJEMP3uyY4RQ21nwoH/3MYi9JibblZYmSOvCT1vJrN\n> Ih+Q2WNumIAI+Y9bh4bBgLuhnG5lXyHedhYEUW+mfuwGiX+92Uc47nwaWED2/Lte\n> 4Zk/KZnwLifdWCgKLdGpW6mzksRiOaVyU4vV5JchVOrGZZ2zYNIq+NcChtCph7Y5\n> L202ReAG+1dfSpp4rFckuv7pTVjNcrq89UN1tJFDNQdxzIRd7bwoeCuvyFurZagB\n> 88bNiOl0BI3e090WC+CWmbC6BfqJiicn/d0gp/agW01wy7CVbLypPPTKmYqt3+54\n> msLUgaRHcbjuyKqu8HMHpYtgYVSNFg2q+U4SgmEepzPAkQ97khbduqA6i1B0ULM=\n> =t/xp\n> -----END PGP SIGNATURE-----\n> -------------- next part --------------\n> A non-text attachment was scrubbed...\n> Name: 0x38450DB5.asc\n> Type: application/pgp-keys\n> Size: 14046 bytes\n> Desc: not available\n>\n> ------------------------------\n>\n> Message: 2\n> Date: Tue, 23 Sep 2014 12:48:34 -0400\n> From: Alan Reiner <etotheipi at gmail.com>\n> Subject: Re: [Bitcoin-development] Proposal: \"No-Collision\" mode for\n>         Multisig BIP32 Wallets\n> To: bitcoin-development at lists.sourceforge.net\n> Message-ID: <5421A462.6030205 at gmail.com>\n> Content-Type: text/plain; charset=ISO-8859-1\n>\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> On 09/23/2014 12:37 PM, Justus Ranvier wrote:\n> > Would be nice if you'd at least mention our work, since we did share\n> > it with you back in January and have been publicly documenting it ever\n> > since.\n> >\n> > Or does the fact that we're implementing it in btcwallet mean what\n> > we're working on is unmentionable here?\n> >\n>\n> Please don't assume poor intentions or sneaky motives.  I get a lot of\n> emails from a lot of people about a lot of things.  Nine months ago was\n> an eternity in this world, and it can't be ruled out that I simply forgot.\n>\n> I have no problem giving credit where it is due, and I mentioned in my\n> first email that I wasn't sure if my stuff was original.  Please\n> recap/link it here so that it can be part of this discussion.\n>\n> - -Alan\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1\n>\n> iQIcBAEBAgAGBQJUIaRiAAoJEBHe6b77WWmFcBgP/2IiQWda5diBIrd8MjbtYz/X\n> pF+B1zOipClil151pKN5h9f4CI75qwSBSG6pUS+QH1lCz97nr5AoVYV5SAaRzv0z\n> L9Bz0PiHJFHd4IRbfuFqlPZB8mw2TMD7QWJx/1U+WmpnYYOGsUeJn25psIVZSRTU\n> FTCsmYrA4cGZ4bZoUKI/eiXrHao8rm/zQ7QHKOMSFWZT57sNea67vlxPXKu+AkmK\n> nEYa4hD0kD7/R/TrNcmRmOlmbqCnyjICd/yp8Lj26CdHPv3PAvaxUwSX3VhWPbdc\n> UOiGeo+lXqRnBVpwMd+k7oFddwrc2k9ISRdUVsU86z3JdAXKl/dLS5UoOtfC1JA9\n> m90TuRtq4QuuzjLF3brI9FthuHNowA//qaVfjo/AYgsKy15td9UBtFbt4E9w263M\n> NiFEmFkXfbE1JmIvmPG3AQEEdQ1/nmWiN5UcLrBfauEHMDQ1fGd89A8IBpus7bWM\n> kYXboW3E9RBN4lB6OdyYU4AuH0YQhZodmry4iElMPox/tclmNiaeqDR8UYhD5BMd\n> eQN9zAALyR1IY1167Ki/abVfWVf5jF7b0Eeu/wAfwcble3sCFrvWWAwzHjNi3GjY\n> gNfy1eDTbwLj2M63QbtB+YqzQBZx3+SY4euGKYQ1s1CVV9ibAFI52oxeMhwzVOWF\n> ofeDK5BPL8H+5L3tk+1o\n> =tX2n\n> -----END PGP SIGNATURE-----\n>\n>\n>\n>\n>\n> ------------------------------\n>\n> Message: 3\n> Date: Tue, 23 Sep 2014 17:07:58 +0000\n> From: Justus Ranvier <justus at monetas.net>\n> Subject: Re: [Bitcoin-development] Proposal: \"No-Collision\" mode for\n>         Multisig BIP32 Wallets\n> To: bitcoin-development at lists.sourceforge.net\n> Message-ID: <5421A8EE.4060300 at monetas.net>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> On 09/23/2014 04:48 PM, Alan Reiner wrote:\n> > Please recap/link it here so that it can be part of this\n> > discussion.\n>\n> http://sourceforge.net/p/bitcoin/mailman/message/32736455/\n>\n> http://opentransactions.org/wiki/index.php/Deposit_Address_(voting_pools)\n>\n> Currently being implemented here:\n>\n> https://github.com/monetas/btcwallet/commits/vp\n>\n> - --\n>\n> Really what's so annoying is how the BIP numbering process is handled in\n> such a way that proposals can be silently pigeonholed.\n>\n> Especially so in the case of an *informational* BIP which requires no\n> action on anyone's part (except for not using the same BIP43 purpose\n> code).\n>\n> We resolved this by changing the naming scheme for our proposals, and\n> their associated purpose codes, to not rely on centrally-allocated\n> numbers.\n>\n> https://github.com/Open-Transactions/rfc/tree/master/bips\n>\n> - --\n> Justus Ranvier                   | Monetas <http://monetas.net/>\n> <mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n>                                  | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n> -----BEGIN PGP SIGNATURE-----\n>\n> iQEcBAEBCAAGBQJUIajuAAoJEMP3uyY4RQ215dQH/1GNOmZd19/e2Ys7MNFx0gqz\n> rDmTFBylU3lhJrMY4CDd4Duq5+2U7HgaovqgX8UqxquHWLQUwEzZLqdEPCifLg0c\n> d/u90cRlClFAaOxPh4HV2/3aZoS2R27N+ZjOfziW7RZySBP/2fMt4/ra+SPbkcAQ\n> oeplYgqMRDqW52C/o2zm4y4yb0TJPS+lzSNM+JfxHSPRyY55l0KzLJfUNz1RSOze\n> A8UAwdsLiJROKPKiSrQcqFOejPV7uqSPh10ukm/AI0k8TbvX8ffGQ083394M9IuE\n> DB/1eyeLQVP5+lQMWNrTHk3BQ75XBEDJoSukaRENcqxtHV2m1JzTWoS2CQBXi2M=\n> =TwI3\n> -----END PGP SIGNATURE-----\n> -------------- next part --------------\n> A non-text attachment was scrubbed...\n> Name: 0x38450DB5.asc\n> Type: application/pgp-keys\n> Size: 14046 bytes\n> Desc: not available\n>\n> ------------------------------\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n>\n> ------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> End of Bitcoin-development Digest, Vol 40, Issue 9\n> **************************************************\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140923/4ea46881/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-09-23T18:45:39",
                "message_text_only": "Yes, we sort the keys at each address as well.  But this isn't about key\nsorting, it's about assigning each device a different branch of the BIP 32\ntree to avoid accidental address re use and to make it self evident which\ndevices were used for each transaction in the overall wallet history.  I\nonly suggested sorting the root public keys as a way to assign which\ninternal/external pair of chains the device should use.\n\n@Justus... Looking at the links you sent I'm not clear how it is related.\nAnd naming it \"key voting pools\" seems unrelated to why we are proposing\nthis scheme.  I'll need more than naked links to understand (I'm not saying\nit isn't related, I'm just not seeing the connection)\n\n-Alan\n\nSent from my overpriced smartphone\nOn Sep 23, 2014 2:25 PM, \"Vitalik Buterin\" <v at buterin.com> wrote:\n\n> Have you looked at how Coinvault does it? They have a similar setup, but\n> sort the pubkeys at each address.\n>\n> On Tue, Sep 23, 2014 at 1:09 PM, <\n> bitcoin-development-request at lists.sourceforge.net> wrote:\n>\n>> Send Bitcoin-development mailing list submissions to\n>>         bitcoin-development at lists.sourceforge.net\n>>\n>> To subscribe or unsubscribe via the World Wide Web, visit\n>>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> or, via email, send a message with subject or body 'help' to\n>>         bitcoin-development-request at lists.sourceforge.net\n>>\n>> You can reach the person managing the list at\n>>         bitcoin-development-owner at lists.sourceforge.net\n>>\n>> When replying, please edit your Subject line so it is more specific\n>> than \"Re: Contents of Bitcoin-development digest...\"\n>>\n>>\n>> Today's Topics:\n>>\n>>    1. Re: Proposal: \"No-Collision\" mode for Multisig BIP32 Wallets\n>>       (Justus Ranvier)\n>>    2. Re: Proposal: \"No-Collision\" mode for Multisig BIP32 Wallets\n>>       (Alan Reiner)\n>>    3. Re: Proposal: \"No-Collision\" mode for Multisig BIP32 Wallets\n>>       (Justus Ranvier)\n>>\n>>\n>> ----------------------------------------------------------------------\n>>\n>> Message: 1\n>> Date: Tue, 23 Sep 2014 16:37:20 +0000\n>> From: Justus Ranvier <justus at monetas.net>\n>> Subject: Re: [Bitcoin-development] Proposal: \"No-Collision\" mode for\n>>         Multisig BIP32 Wallets\n>> To: bitcoin-development at lists.sourceforge.net\n>> Message-ID: <5421A1C0.6080605 at monetas.net>\n>> Content-Type: text/plain; charset=\"utf-8\"\n>>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA256\n>>\n>> On 09/23/2014 04:16 PM, Alan Reiner wrote:\n>> > P.S. -- \"No-Collision Mode\" is not a great name.  Happy to take\n>> > suggestions for changing it.\n>>\n>> I'd call it a \"voting pool wallet\", since that was the original\n>> application for this arrangement.\n>>\n>> Would be nice if you'd at least mention our work, since we did share\n>> it with you back in January and have been publicly documenting it ever\n>> since.\n>>\n>> Or does the fact that we're implementing it in btcwallet mean what\n>> we're working on is unmentionable here?\n>>\n>> - --\n>> Justus Ranvier                   | Monetas <http://monetas.net/>\n>> <mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n>>                                  | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n>> -----BEGIN PGP SIGNATURE-----\n>>\n>> iQEcBAEBCAAGBQJUIaHAAAoJEMP3uyY4RQ21nwoH/3MYi9JibblZYmSOvCT1vJrN\n>> Ih+Q2WNumIAI+Y9bh4bBgLuhnG5lXyHedhYEUW+mfuwGiX+92Uc47nwaWED2/Lte\n>> 4Zk/KZnwLifdWCgKLdGpW6mzksRiOaVyU4vV5JchVOrGZZ2zYNIq+NcChtCph7Y5\n>> L202ReAG+1dfSpp4rFckuv7pTVjNcrq89UN1tJFDNQdxzIRd7bwoeCuvyFurZagB\n>> 88bNiOl0BI3e090WC+CWmbC6BfqJiicn/d0gp/agW01wy7CVbLypPPTKmYqt3+54\n>> msLUgaRHcbjuyKqu8HMHpYtgYVSNFg2q+U4SgmEepzPAkQ97khbduqA6i1B0ULM=\n>> =t/xp\n>> -----END PGP SIGNATURE-----\n>> -------------- next part --------------\n>> A non-text attachment was scrubbed...\n>> Name: 0x38450DB5.asc\n>> Type: application/pgp-keys\n>> Size: 14046 bytes\n>> Desc: not available\n>>\n>> ------------------------------\n>>\n>> Message: 2\n>> Date: Tue, 23 Sep 2014 12:48:34 -0400\n>> From: Alan Reiner <etotheipi at gmail.com>\n>> Subject: Re: [Bitcoin-development] Proposal: \"No-Collision\" mode for\n>>         Multisig BIP32 Wallets\n>> To: bitcoin-development at lists.sourceforge.net\n>> Message-ID: <5421A462.6030205 at gmail.com>\n>> Content-Type: text/plain; charset=ISO-8859-1\n>>\n>>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA1\n>>\n>> On 09/23/2014 12:37 PM, Justus Ranvier wrote:\n>> > Would be nice if you'd at least mention our work, since we did share\n>> > it with you back in January and have been publicly documenting it ever\n>> > since.\n>> >\n>> > Or does the fact that we're implementing it in btcwallet mean what\n>> > we're working on is unmentionable here?\n>> >\n>>\n>> Please don't assume poor intentions or sneaky motives.  I get a lot of\n>> emails from a lot of people about a lot of things.  Nine months ago was\n>> an eternity in this world, and it can't be ruled out that I simply forgot.\n>>\n>> I have no problem giving credit where it is due, and I mentioned in my\n>> first email that I wasn't sure if my stuff was original.  Please\n>> recap/link it here so that it can be part of this discussion.\n>>\n>> - -Alan\n>> -----BEGIN PGP SIGNATURE-----\n>> Version: GnuPG v1\n>>\n>> iQIcBAEBAgAGBQJUIaRiAAoJEBHe6b77WWmFcBgP/2IiQWda5diBIrd8MjbtYz/X\n>> pF+B1zOipClil151pKN5h9f4CI75qwSBSG6pUS+QH1lCz97nr5AoVYV5SAaRzv0z\n>> L9Bz0PiHJFHd4IRbfuFqlPZB8mw2TMD7QWJx/1U+WmpnYYOGsUeJn25psIVZSRTU\n>> FTCsmYrA4cGZ4bZoUKI/eiXrHao8rm/zQ7QHKOMSFWZT57sNea67vlxPXKu+AkmK\n>> nEYa4hD0kD7/R/TrNcmRmOlmbqCnyjICd/yp8Lj26CdHPv3PAvaxUwSX3VhWPbdc\n>> UOiGeo+lXqRnBVpwMd+k7oFddwrc2k9ISRdUVsU86z3JdAXKl/dLS5UoOtfC1JA9\n>> m90TuRtq4QuuzjLF3brI9FthuHNowA//qaVfjo/AYgsKy15td9UBtFbt4E9w263M\n>> NiFEmFkXfbE1JmIvmPG3AQEEdQ1/nmWiN5UcLrBfauEHMDQ1fGd89A8IBpus7bWM\n>> kYXboW3E9RBN4lB6OdyYU4AuH0YQhZodmry4iElMPox/tclmNiaeqDR8UYhD5BMd\n>> eQN9zAALyR1IY1167Ki/abVfWVf5jF7b0Eeu/wAfwcble3sCFrvWWAwzHjNi3GjY\n>> gNfy1eDTbwLj2M63QbtB+YqzQBZx3+SY4euGKYQ1s1CVV9ibAFI52oxeMhwzVOWF\n>> ofeDK5BPL8H+5L3tk+1o\n>> =tX2n\n>> -----END PGP SIGNATURE-----\n>>\n>>\n>>\n>>\n>>\n>> ------------------------------\n>>\n>> Message: 3\n>> Date: Tue, 23 Sep 2014 17:07:58 +0000\n>> From: Justus Ranvier <justus at monetas.net>\n>> Subject: Re: [Bitcoin-development] Proposal: \"No-Collision\" mode for\n>>         Multisig BIP32 Wallets\n>> To: bitcoin-development at lists.sourceforge.net\n>> Message-ID: <5421A8EE.4060300 at monetas.net>\n>> Content-Type: text/plain; charset=\"utf-8\"\n>>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA256\n>>\n>> On 09/23/2014 04:48 PM, Alan Reiner wrote:\n>> > Please recap/link it here so that it can be part of this\n>> > discussion.\n>>\n>> http://sourceforge.net/p/bitcoin/mailman/message/32736455/\n>>\n>> http://opentransactions.org/wiki/index.php/Deposit_Address_(voting_pools)\n>>\n>> Currently being implemented here:\n>>\n>> https://github.com/monetas/btcwallet/commits/vp\n>>\n>> - --\n>>\n>> Really what's so annoying is how the BIP numbering process is handled in\n>> such a way that proposals can be silently pigeonholed.\n>>\n>> Especially so in the case of an *informational* BIP which requires no\n>> action on anyone's part (except for not using the same BIP43 purpose\n>> code).\n>>\n>> We resolved this by changing the naming scheme for our proposals, and\n>> their associated purpose codes, to not rely on centrally-allocated\n>> numbers.\n>>\n>> https://github.com/Open-Transactions/rfc/tree/master/bips\n>>\n>> - --\n>> Justus Ranvier                   | Monetas <http://monetas.net/>\n>> <mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n>>                                  | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n>> -----BEGIN PGP SIGNATURE-----\n>>\n>> iQEcBAEBCAAGBQJUIajuAAoJEMP3uyY4RQ215dQH/1GNOmZd19/e2Ys7MNFx0gqz\n>> rDmTFBylU3lhJrMY4CDd4Duq5+2U7HgaovqgX8UqxquHWLQUwEzZLqdEPCifLg0c\n>> d/u90cRlClFAaOxPh4HV2/3aZoS2R27N+ZjOfziW7RZySBP/2fMt4/ra+SPbkcAQ\n>> oeplYgqMRDqW52C/o2zm4y4yb0TJPS+lzSNM+JfxHSPRyY55l0KzLJfUNz1RSOze\n>> A8UAwdsLiJROKPKiSrQcqFOejPV7uqSPh10ukm/AI0k8TbvX8ffGQ083394M9IuE\n>> DB/1eyeLQVP5+lQMWNrTHk3BQ75XBEDJoSukaRENcqxtHV2m1JzTWoS2CQBXi2M=\n>> =TwI3\n>> -----END PGP SIGNATURE-----\n>> -------------- next part --------------\n>> A non-text attachment was scrubbed...\n>> Name: 0x38450DB5.asc\n>> Type: application/pgp-keys\n>> Size: 14046 bytes\n>> Desc: not available\n>>\n>> ------------------------------\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n>> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n>> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n>> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n>>\n>> ------------------------------\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> End of Bitcoin-development Digest, Vol 40, Issue 9\n>> **************************************************\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140923/5557b219/attachment.html>"
            },
            {
                "author": "Vitalik Buterin",
                "date": "2014-09-23T19:57:10",
                "message_text_only": "Okay I see, that makes sense.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140923/60514ec6/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-development Digest, Vol 40, Issue 9",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Alan Reiner",
                "Vitalik Buterin"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 18420
        }
    },
    {
        "title": "[Bitcoin-development] cryptographic review requested",
        "thread_messages": [
            {
                "author": "Mem Wallet",
                "date": "2014-09-23T21:12:04",
                "message_text_only": "Hello,\nI've made a proposal for a standardized ecies scheme for bitcoin\ncommunication. To address gmaxwell's criticism, I'd like to also\nfollow up with a proposed change to BIP44, such that a structured\nwallet would also include a series of identity keys, both addresses\nwhich will be used for signing, and public keys which would be used\nas destinations for encrypted messages.\n\nIf anyone is familiar with ECIES and would be interested, there is a\nworking implementation at http://memwallet.info/btcmssgs.html,\nwhich also includes this whitepaper:\n\nAbstract This document describes a scheme for sending signed encrypted\nmessages using bitcoin public and private keys. Motivation PGP and\nBitmessage and other secure communications channels exist. This standard\nallows for secure messaging using a bitcoin wallet alone, without the need\nfor other software. This standard allows the owner of an address to\nconveniently prove ownership to the holder of another address privately\nwithout the need for separate secure communications channels. Specification:\nMessage Format In the rest of this text we will assume the public key\ncryptography used in Bitcoin. The || operator is concatenation. All\noperations are defined over binary, and not text conversion of the data.\nWhen serializing public keys the compressed encoding is always used, even\nif the input parameters are passed as uncompressed. Bitcoin addresses are\nalways serialized from compressed public keys, and for mainnet. (directives\nto use testnet or uncompressed keys ignored) String literals are\nrepresented as if for the C programming language in native UTF-8. No\nassumptions are made about the payload message format, it may even be\nbinary. Caveat Decryptor. Plain unformatted text message payloads are\nrecommended to use utf-8.\n\n   - CompactSize format is a variable size little endian length field\n   serialization format, know as a bitcoin \"Variable length integer\"\n   - CompactSizePrefix(X) = CompactSize(X) || X\n   - QTHASH(x) = SHA256((SHA256( CompactSizePrefix(\"Bitcoin Signed\n   Message:\\n\") || CompactSizePrefix(x) )\n\nThis standard assumes the reader is familiar with the bitcoin compact\nsignature format, which is a 65 byte signature which allows the verifier to\nrecover the public key associated with the signature, eliminating the need\nto send it with the message. Once consequence of this format is that\nsignatures of tampered messages will nearly always result in some public\nkey, but it will not be the same as the orignial signing key. The address\nof the sender will be provided to enable validation of the signature. The\nformat is a 1 byte recid, followed by ECDSA R then S values.\n\n   - CompactSign( PrivateKey, 32 byte QT Hash ) == 65 byte message\n   - CompactVerify( 65 byte message, 32 bytes Hash ) public key counterpart\n   of (PrivateKey)\n   - ECIES with HMAC_SHA256 for mac, PBKDF2 for KDF\n   - PBKDF2 is used with 2048 iterations, salt=( \"Bitcoin Secure Message\"\n   || ecies_nonce_publickey )\n   - AES is used with 256 bit keys, and CFB mode, with a 128 bit feedback\n   buffer. No padding or envelope, simply a pure byte cipher\n   - compact_signed_message = 0x01 || CompactSizePrefix(M) ||\n   Sender_Address || Signature\n   - compact_unsigned_message = 0x00 || CompactSizePrefix(M)\n   - Secure message format: ECIES( compact_signed_message or\n   compact_unsigned_message )\n\nSummary of the functions defined:\n\n   - eM = SendMessage( M, Signing_Key, Dest_Pub )\n   - M,Sender_Address = ReceiveMessage( eM, Decrypting_Key ) It is\n   acceptable for deterministic nonces to be used for signatures, however\n   nonces generated for ECIES must be high quality random bytes. (excepting\n   unit test vectors)\n\nMessage Sending Inputs:\n\n   - The message to send \"M\" (treat as precise binary bytes, no space\n   stripping or normalization)\n   - The bitcoin private key \"Signing_Key\" to be used to sign the message\n   - The bitcoin public key \"Dest_Pub\" to be used as the destination of the\n   message Algorithm Calculations:\n   - Calculate the QTHASH(M) to obtain \"M_hash\", 32 bytes of data\n   - if signing Sign with CompactSign(Signing_Key,M_hash) to obtain\n   \"Signature\", 65 bytes of data ** Calculate the compressed address of\n   Signing_Key to obtain \"Sender_Address\" 21 bytes of data ** Serialize 0x01\n   || CompactSizePrefix(M) || Sender_Address || Signature to obtain\n   \"Signed_Message\"\n   - if not signing, instead Serialize 0x00 || CompactSizePrefix(M) to\n   obtain \"Unsigned_Message\"\n   - Generate 32 random bytes \"ecies_nonce_bytes\"\n   - Generate a bitcoin private key from ecies_nonce_bytes, \"Nonce_Key\" 32\n   bytes of data (retry if invalid)\n   - Derive the compressed public key of Nonce_Key, \"Nonce_Pub\", 33 bytes\n   of data\n   - ECMultiply Dest_Pub by Nonce_Key to obtain the point\n   \"Shared_Secret_Point\"\n   - Serialize Shared_Secret_Point as a compressed point \"Shared_Secret\"\n   - Derive \"KeyingBytes\" = PBKDF2( Shared_Secret ) to get 80 bytes of data\n   - Directly Derive \"AES256_Key\" from the first 32 bytes of KeyingBytes\n   (index 0 to 32)\n   - Directly Derive \"HMAC_Key\" from the second 32 bytes of KeyingBytes\n   (index 32 to 64)\n   - Directly Derive \"AES_IV\" from the last 16 bytes of KeyingBytes (index\n   64 to 80)\n   - Encrypt Signed_Message or Unsigned_Message using AES256_cfb_128 using\n   AES_IV and AES256_Key to obtain \"Encrypted_Payload\". Same length as M\n   - Compute the HMAC_SHA256 of Encrypted_Payload using HMAC_Key, truncate\n   to the first 8 bytes to obtain \"Message_HMAC\"\n\nSerialization output\n\n   - Serialize Nonce_Pub || Encrypted_Payload || Message_HMAC to obtain\n   \"eM\" For text transmission eM may be sent encoded with base 64, otherwise\n   binary is preferred.\n\nMessage Receiving Inputs:\n\n   - The message received \"eM\" (decode from base64 if needed)\n   - The bitcoin private key \"Decrypting_Key\" to be used to decode the\n   message Algorithm Calculations:\n   - Deserliaize eM to recover \"Nonce_Pub\", \"Encrypted_Payload\", and\n   \"Message_HMAC\"\n   - ECMultiply Nonce_Pub by Decrypting_Key to recover\n   \"Shared_Secret_Point\"\n   - Serialize Shared_Secret_Point as a compressed point to yield\n   \"Shared_Secret\", 33 bytes of data\n   - Derive \"KeyingBytes\" = PBKDF2( Shared_Secret ) to get 80 bytes of data\n   - Directly Derive \"AES256_Key\" from the first 32 bytes of KeyingBytes\n   (index 0 to 32)\n   - Directly Derive \"HMAC_Key\" from the second 32 bytes of KeyingBytes\n   (index 32 to 64)\n   - Directly Derive \"AES_IV\" from the last 16 bytes of KeyingBytes (index\n   64 to 80)\n   - Compute the HMAC_SHA256 of Encrypted_Payload using HMAC_Key, truncate\n   to the first 8 bytes to compare with Message_HMAC\n   - If the Message_HMAC did not match, the message is corrpted so abort\n   - Decrypt Encrypted_Payload using AES256_cfb, AES_IV and AES256_Key to\n   recover \"Payload_Message\"\n   - Verify that the first byte is a 0x01 or 0x00, else abort. 0x01\n   indicates signed\n   - if signed Deserialize \"Payload_Message\" to obtain \"M\",\n   \"Sender_Address\", and \"Signature\"\n   - if not signed Deserialize \"Payload_Message\" to obtain \"M\", and return\n   M\n   - Calculate the QTHASH(M) to obtain \"M_hash\", 32 bytes of data\n   - Call CompactVerify(Signature, M_hash) to obtain \"Signing_Pubkey\"\n   - Calculate the compressed address of Signing_Pubkey to obtian\n   \"Sender_Address_check\" 21 bytes of data\n   - Compare Sender_Address_check and Sender_Address, if they are not\n   identical, fail/stop\n\nOutput:\n\n   - Output Sender_Address to indicate who the mesage is from, and that the\n   signature is valid and untampered with\n   - Output M, considering it is valid and the content untampered with\n\nTest Vectors By convention keys will be in WIF format, public keys in\nbase58_check format, messages in c style UTF-8 string literals. Encrypted\nmessages are in Base64 format. Compliant implementations will use random\nnonces from a cryptographically strong DRBG. For the units tests, they will\nbe provided in hex format. The nonce bytes provided are to be used both for\nthe ECIES ecies_nonce_bytes, as well as for the Signature algorithm. Test\nvector 1\n\n   - M = \"Hello, World!\\n\"\n   - nonce bytes =\n   7357000000000000000000000000000000000000000000000000000000000000\n   - Dest_Pub = 6ebngTeKJNTjhVj67YhSw5EBNf6sqdGrz7KAT8kiFRwwL8QjHr\n   - Signing_Key = L48ftytpCTGe8GCkfmX1BQoR9yq6DZCoeTsNkxGR4UEiHjQV3uDF\n   - eM =\n   A34UI90GVmD1wJ0sMEwSsAaTG6bL+vHE0Ebk078EI7qAHZSWxYBy3rQTKw4XyQUgCnH90pXwwJRRfPIzlSINTiHm+rs\n   f8hL972pDsnjK5H4mBwu6koi0JCJeisH2j899Z97D9Dy7z9y8V7mW5q3HJDNPiRx99CW2hODHOzNlqHSKIItDyqwqMVoHJH7y1rA=\n   Decrypting WIF = Kwc89APmzQx9bT3u3iUYoCKmhKK4tgcnJih27r9QsxhrHyYY6U8F\n   - Signing_Addr = 1LCA11Udyw784zBhN3VQYsRadSUbUpeJrw\n\nTest vector 2\n\n   - M = \"Test Message\\n\u4e2d\u6587\\n\"\n   - nonce bytes =\n   00CDEF3636363636363635c5c5c5c5c5c5c5c5c3e3ee3e5c5c5c5c5c53636363\n   - Dest_Pub = 5RARVjiFrm4gBSEc3NQkhqSrmxtixY1Q4NNoQr5fhwK8gMQDLr\n   - Signing_Key = L3uN7ev8T5HV8ckp75YgMLzG6ijZ1AYAL8vKBubvvSmLw72yey4x\n   - eM =\n   AjUnA/xZbNa1uXu/fh2ZrEDFWNtpwBe5lQi4qRoTzUo6RF5EByEZ4n/eZmWk7MaHViGeO4yPXhQYyTK4O5XbRknXon4ApQcxsh\n   EaTj0QfoDLYYZ2/CL9p9G8aN2RCoXdcDrYwZ7KyRLdFnCZvUuvv4VZNZW8/h4fT7sf0MKl7H9eCv9OVaKwPJe2pyaNDshfzY12FMQ=\n\n   - Decrypting WIF = L5UxEELoqFr8eri8nsrBUX2YFmLKZYG6oYBjEUpRSnXwvofdfbgM\n   - Signing_Addr = 1HxcmSvFiviw1RDyzoPgktJfzgKcJ4pHeh\n\nImplementations http://memwallet.info/btcmssgs.html Acknowledgements\nImplementation by: 76NPRHE2g5pSvbLgP8fEEtBvfPB4zte56veXdxXfaXcsQwRjZB aka\n1Lk96ASyr3k6ZoTFGLrUgxGuctNKF24V5q Credit Must be given to bitaddress.org\nbrainwallet.org, and many others who have made crypto and bitcoin easy to\ncode for in javascript.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140923/6e476796/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "cryptographic review requested",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mem Wallet"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 9768
        }
    },
    {
        "title": "[Bitcoin-development] BIP43 Purpose code for voting pool HD wallets",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2014-09-26T01:53:58",
                "message_text_only": "On Tue, Aug 19, 2014 at 10:11 AM, Justus Ranvier <justus at monetas.net> wrote:\n> Two draft information BIPs are attached.\n\nI've pinged some people privately but also pinging the list\u2026 no\ncommentary on this proposal?"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-09-26T02:09:56",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nOn 09/26/2014 01:53 AM, Gregory Maxwell wrote:\n> On Tue, Aug 19, 2014 at 10:11 AM, Justus Ranvier\n> <justus at monetas.net> wrote:\n>> Two draft information BIPs are attached.\n> \n> I've pinged some people privately but also pinging the list\u2026 no \n> commentary on this proposal?\n> \n\nRegarding the BIP process itself, I rather think it's broken in the\ncase of informational BIPs.\n\nProposals that require explicit action on the part of others do not\nlogically belong in the same process as purely information proposals\nthat do not require any explicit action by others are going to be\ncarried out regardless.\n\nThe only reason we proposed these as BIPs at all was to support the\nintent of BIP43.\n\n- -- \nJustus Ranvier                   | Monetas <http://monetas.net/>\n<mailto:justus at monetas.net>      | Public key ID : C3F7BB2638450DB5\n                                 | BM-2cTepVtZ6AyJAs2Y8LpcvZB8KbdaWLwKqc\n-----BEGIN PGP SIGNATURE-----\n\niQEcBAEBCAAGBQJUJMrzAAoJEMP3uyY4RQ217DMH/1oGHayVo4smLM/OKeu1qqXC\nXex4NNh6g7Jsu2ulfJ5ow3g7jHEDzTBp33THhUv6cnV7CpDvTC+Y24LDRrYwOBQo\nYuQ9u0NNtrcgoi+6vs8NuGO+yZyTyBYs1emOipsICsg42H8yhEHlrMyfOTJsO6r/\nnAiqR+QH6isNOjQerd9Fs0nYQ6VANs8IksL41L8ch9YAvgKx7C8WxdcQrk/S2pNL\nJwD7Q729J34x34HPnOb5j5Rfm1gvQInYELBu0YBaCy7D05PZd5nPSYqUC3n35hUA\nAMvVf65jdQVBjvjlcqDPAPdBTQ3qjhQ+7EAWKJrwlrzhGXaWA3HpipRDUSyqzBg=\n=OhH8\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x38450DB5.asc\nType: application/pgp-keys\nSize: 14046 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140926/ac776cd5/attachment.bin>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-09-26T02:31:15",
                "message_text_only": "I'm in favor of BIP43.\n\nAdding a \"Purpose\" node can be used as an identifier for what kind of\ntree is in the wallet file we're reading.   I can envision a few\ndifferent, common tree structures.  Perhaps using a non-hardened\nfirst-layer derivation (we have clients who want this).  Similarly, my\nproposal for a \"No-collision mode\" for multisig BIP32 trees\n<http://sourceforge.net/p/bitcoin/mailman/message/32860512/> is another\nvariant that might get some traction but not everyone will use it. \nThese things could be \"supported\" by simply changing the BIP43 \"Purpose\"\nindex and wallet software could be designed to recognize and react to\nthe Purpose node for any number of different tree structures, and ignore\nany trees that it doesn't recognize (or maybe be able to view the\nbalance across all the leaves of the tree but not expand it)\n\nWe have clients with special use-cases (complex multi-layer trees) that\nare unlikely to be recycled across users.  In such cases we might just\nuse a \"random\" Purpose that is recognized by their system, and know that\nother software won't mess with it.  Though it would be better if that\nfield was encoded in the root seed, instead.\n\nNonetheless, putting that extra layer between the root and the\n\"important\" tree nodes provides flexibility to BIP32 as a whole.\n-Alan\n\n\nOn 09/25/2014 09:53 PM, Gregory Maxwell wrote:\n> On Tue, Aug 19, 2014 at 10:11 AM, Justus Ranvier <justus at monetas.net> wrote:\n>> Two draft information BIPs are attached.\n> I've pinged some people privately but also pinging the list\u2026 no\n> commentary on this proposal?\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140925/f4b201f1/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2014-09-26T02:32:44",
                "message_text_only": "On Thu, Sep 25, 2014 at 8:53 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> I've pinged some people privately but also pinging the list\u2026 no\n> commentary on this proposal?\n\nOne possible reason is that non-subscribed users aren't able to access\nthe file through sourceforge. The attachment through their web\ninterface is giving back HTTP 500.\n\nsee http://sourceforge.net/p/bitcoin/mailman/attachment/53F38542.2000704%40monetas.net/1/\n\n- Bryan\nhttp://heybryan.org/\n1 512 203 0507"
            }
        ],
        "thread_summary": {
            "title": "BIP43 Purpose code for voting pool HD wallets",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Bryan Bishop",
                "Alan Reiner",
                "Gregory Maxwell",
                "Justus Ranvier"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 4782
        }
    },
    {
        "title": "[Bitcoin-development] SPV clients and relaying double spends",
        "thread_messages": [
            {
                "author": "Aaron Voisine",
                "date": "2014-09-26T02:02:03",
                "message_text_only": "There was some discussion of having nodes relay double-spends in order\nto alert the network about double spend attempts.\n\nA lot more users will be using SPV wallets in the future, and one of\nthe techniques SPV clients use to judge how likely a transaction is to\nbe confirmed is if it propagates across the network. I wonder if and\nwhen double-spend relaying is introduced, if nodes should also send\nBIP61 reject messages or something along those lines to indicate which\ntransactions those nodes believe to be invalid, but are relaying\nanyway.\n\nThis would be subject to sybil attacks, as is monitoring propagation,\nhowever it does still increase the cost of performing a 0 confirmation\ndouble spend attack on an SPV client above just relaying double-spends\nwithout indicating if a node believes the transaction to be valid.\n\nAaron Voisine\nbreadwallet.com"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-09-26T02:07:28",
                "message_text_only": "What's to stop an attacker from broadcasting millions of spends of the same output(s) and overwhelming nodes with slower connections? Might it be a better strategy not to relay the actual transactions (after the first) but rather only propagate (once) some kind of double-spend alert?\n\n\nOn Thursday, 25 September 2014, at 7:02 pm, Aaron Voisine wrote:\n> There was some discussion of having nodes relay double-spends in order\n> to alert the network about double spend attempts.\n> \n> A lot more users will be using SPV wallets in the future, and one of\n> the techniques SPV clients use to judge how likely a transaction is to\n> be confirmed is if it propagates across the network. I wonder if and\n> when double-spend relaying is introduced, if nodes should also send\n> BIP61 reject messages or something along those lines to indicate which\n> transactions those nodes believe to be invalid, but are relaying\n> anyway.\n> \n> This would be subject to sybil attacks, as is monitoring propagation,\n> however it does still increase the cost of performing a 0 confirmation\n> double spend attack on an SPV client above just relaying double-spends\n> without indicating if a node believes the transaction to be valid.\n> \n> Aaron Voisine\n> breadwallet.com"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-09-26T02:12:04",
                "message_text_only": "Something like that would be a great help for SPV clients that can't\ndetect double spends on their own. (still limited of course to sybil\nattack concerns)\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Thu, Sep 25, 2014 at 7:07 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> What's to stop an attacker from broadcasting millions of spends of the same output(s) and overwhelming nodes with slower connections? Might it be a better strategy not to relay the actual transactions (after the first) but rather only propagate (once) some kind of double-spend alert?\n>\n>\n> On Thursday, 25 September 2014, at 7:02 pm, Aaron Voisine wrote:\n>> There was some discussion of having nodes relay double-spends in order\n>> to alert the network about double spend attempts.\n>>\n>> A lot more users will be using SPV wallets in the future, and one of\n>> the techniques SPV clients use to judge how likely a transaction is to\n>> be confirmed is if it propagates across the network. I wonder if and\n>> when double-spend relaying is introduced, if nodes should also send\n>> BIP61 reject messages or something along those lines to indicate which\n>> transactions those nodes believe to be invalid, but are relaying\n>> anyway.\n>>\n>> This would be subject to sybil attacks, as is monitoring propagation,\n>> however it does still increase the cost of performing a 0 confirmation\n>> double spend attack on an SPV client above just relaying double-spends\n>> without indicating if a node believes the transaction to be valid.\n>>\n>> Aaron Voisine\n>> breadwallet.com\n>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-09-26T02:16:43",
                "message_text_only": "Probably the first double-spend attempt (i.e., the second transaction to spend the same output(s) as another tx already in the mempool) would still need to be relayed. A simple \"double-spend alert\" wouldn't work because it could be forged. But after there have been two attempts to spend the same output, no further transactions spending that same output should be relayed, in order to prevent flooding the network.\n\n\nOn Thursday, 25 September 2014, at 7:12 pm, Aaron Voisine wrote:\n> Something like that would be a great help for SPV clients that can't\n> detect double spends on their own. (still limited of course to sybil\n> attack concerns)\n> \n> Aaron Voisine\n> breadwallet.com\n> \n> \n> On Thu, Sep 25, 2014 at 7:07 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > What's to stop an attacker from broadcasting millions of spends of the same output(s) and overwhelming nodes with slower connections? Might it be a better strategy not to relay the actual transactions (after the first) but rather only propagate (once) some kind of double-spend alert?\n> >\n> >\n> > On Thursday, 25 September 2014, at 7:02 pm, Aaron Voisine wrote:\n> >> There was some discussion of having nodes relay double-spends in order\n> >> to alert the network about double spend attempts.\n> >>\n> >> A lot more users will be using SPV wallets in the future, and one of\n> >> the techniques SPV clients use to judge how likely a transaction is to\n> >> be confirmed is if it propagates across the network. I wonder if and\n> >> when double-spend relaying is introduced, if nodes should also send\n> >> BIP61 reject messages or something along those lines to indicate which\n> >> transactions those nodes believe to be invalid, but are relaying\n> >> anyway.\n> >>\n> >> This would be subject to sybil attacks, as is monitoring propagation,\n> >> however it does still increase the cost of performing a 0 confirmation\n> >> double spend attack on an SPV client above just relaying double-spends\n> >> without indicating if a node believes the transaction to be valid.\n> >>\n> >> Aaron Voisine\n> >> breadwallet.com\n> >"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-09-26T02:37:13",
                "message_text_only": "Of course you wouldn't want nodes to propagate alerts without\nindependently verifying them, otherwise anyone could just issue alerts\nfor every new transaction.\n\nAaron Voisine\nbreadwallet.com\n\n\nOn Thu, Sep 25, 2014 at 7:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Probably the first double-spend attempt (i.e., the second transaction to spend the same output(s) as another tx already in the mempool) would still need to be relayed. A simple \"double-spend alert\" wouldn't work because it could be forged. But after there have been two attempts to spend the same output, no further transactions spending that same output should be relayed, in order to prevent flooding the network.\n>\n>\n> On Thursday, 25 September 2014, at 7:12 pm, Aaron Voisine wrote:\n>> Something like that would be a great help for SPV clients that can't\n>> detect double spends on their own. (still limited of course to sybil\n>> attack concerns)\n>>\n>> Aaron Voisine\n>> breadwallet.com\n>>\n>>\n>> On Thu, Sep 25, 2014 at 7:07 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n>> > What's to stop an attacker from broadcasting millions of spends of the same output(s) and overwhelming nodes with slower connections? Might it be a better strategy not to relay the actual transactions (after the first) but rather only propagate (once) some kind of double-spend alert?\n>> >\n>> >\n>> > On Thursday, 25 September 2014, at 7:02 pm, Aaron Voisine wrote:\n>> >> There was some discussion of having nodes relay double-spends in order\n>> >> to alert the network about double spend attempts.\n>> >>\n>> >> A lot more users will be using SPV wallets in the future, and one of\n>> >> the techniques SPV clients use to judge how likely a transaction is to\n>> >> be confirmed is if it propagates across the network. I wonder if and\n>> >> when double-spend relaying is introduced, if nodes should also send\n>> >> BIP61 reject messages or something along those lines to indicate which\n>> >> transactions those nodes believe to be invalid, but are relaying\n>> >> anyway.\n>> >>\n>> >> This would be subject to sybil attacks, as is monitoring propagation,\n>> >> however it does still increase the cost of performing a 0 confirmation\n>> >> double spend attack on an SPV client above just relaying double-spends\n>> >> without indicating if a node believes the transaction to be valid.\n>> >>\n>> >> Aaron Voisine\n>> >> breadwallet.com\n>> >"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-09-26T03:34:50",
                "message_text_only": "A lot of this discussion has already occured. Some code was even\nmerged into master, then reverted.\n\nSee:\nhttps://github.com/bitcoin/bitcoin/issues/4550\nhttps://github.com/bitcoin/bitcoin/pull/4570\n\nIt would probably be a good idea to start from that code, as it\naddresses many of the possible pitfalls you've been discussing.\n\nOn Thu, Sep 25, 2014 at 10:37 PM, Aaron Voisine <voisine at gmail.com> wrote:\n> Of course you wouldn't want nodes to propagate alerts without\n> independently verifying them, otherwise anyone could just issue alerts\n> for every new transaction.\n>\n> Aaron Voisine\n> breadwallet.com\n>\n>\n> On Thu, Sep 25, 2014 at 7:16 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n>> Probably the first double-spend attempt (i.e., the second transaction to spend the same output(s) as another tx already in the mempool) would still need to be relayed. A simple \"double-spend alert\" wouldn't work because it could be forged. But after there have been two attempts to spend the same output, no further transactions spending that same output should be relayed, in order to prevent flooding the network.\n>>\n>>\n>> On Thursday, 25 September 2014, at 7:12 pm, Aaron Voisine wrote:\n>>> Something like that would be a great help for SPV clients that can't\n>>> detect double spends on their own. (still limited of course to sybil\n>>> attack concerns)\n>>>\n>>> Aaron Voisine\n>>> breadwallet.com\n>>>\n>>>\n>>> On Thu, Sep 25, 2014 at 7:07 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n>>> > What's to stop an attacker from broadcasting millions of spends of the same output(s) and overwhelming nodes with slower connections? Might it be a better strategy not to relay the actual transactions (after the first) but rather only propagate (once) some kind of double-spend alert?\n>>> >\n>>> >\n>>> > On Thursday, 25 September 2014, at 7:02 pm, Aaron Voisine wrote:\n>>> >> There was some discussion of having nodes relay double-spends in order\n>>> >> to alert the network about double spend attempts.\n>>> >>\n>>> >> A lot more users will be using SPV wallets in the future, and one of\n>>> >> the techniques SPV clients use to judge how likely a transaction is to\n>>> >> be confirmed is if it propagates across the network. I wonder if and\n>>> >> when double-spend relaying is introduced, if nodes should also send\n>>> >> BIP61 reject messages or something along those lines to indicate which\n>>> >> transactions those nodes believe to be invalid, but are relaying\n>>> >> anyway.\n>>> >>\n>>> >> This would be subject to sybil attacks, as is monitoring propagation,\n>>> >> however it does still increase the cost of performing a 0 confirmation\n>>> >> double spend attack on an SPV client above just relaying double-spends\n>>> >> without indicating if a node believes the transaction to be valid.\n>>> >>\n>>> >> Aaron Voisine\n>>> >> breadwallet.com\n>>> >\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Tom Harding",
                "date": "2014-09-28T02:55:44",
                "message_text_only": "On 9/25/2014 7:37 PM, Aaron Voisine wrote:\n> Of course you wouldn't want nodes to propagate alerts without\n> independently verifying them\nHow would a node independently verify a double-spend alert, other than \nby having access to an actual signed double-spend?\n\n#4570 relays the first double-spend AS an alert.  Running this branch on \nmainnet, I have been keeping a live list of relayed double-spend \ntransactions at http://respends.thinlink.com"
            },
            {
                "author": "s7r",
                "date": "2014-09-26T16:27:01",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n\n\nOn 9/26/2014 5:16 AM, Matt Whitlock wrote:\n> Probably the first double-spend attempt (i.e., the second \n> transaction to spend the same output(s) as another tx already in \n> the mempool) would still need to be relayed. A simple\n> \"double-spend alert\" wouldn't work because it could be forged. But\n> after there have been two attempts to spend the same output, no\n> further transactions spending that same output should be relayed,\n> in order to prevent flooding the network.\n> \nThis sounds rational - is this already implemented nowadays or *SHOULD\nBE* implemented to prevent this attack type in the future?\n> \n> On Thursday, 25 September 2014, at 7:12 pm, Aaron Voisine wrote:\n>> Something like that would be a great help for SPV clients that \n>> can't detect double spends on their own. (still limited of\n>> course to sybil attack concerns)\n>> \n>> Aaron Voisine breadwallet.com\n>> \n>> \n>> On Thu, Sep 25, 2014 at 7:07 PM, Matt Whitlock \n>> <bip at mattwhitlock.name> wrote:\n>>> What's to stop an attacker from broadcasting millions of\n>>> spends of the same output(s) and overwhelming nodes with\n>>> slower connections? Might it be a better strategy not to relay\n>>> the actual transactions (after the first) but rather only\n>>> propagate (once) some kind of double-spend alert?\n>>> \n>>> \n>>> On Thursday, 25 September 2014, at 7:02 pm, Aaron Voisine \n>>> wrote:\n>>>> There was some discussion of having nodes relay\n>>>> double-spends in order to alert the network about double\n>>>> spend attempts.\n>>>> \n>>>> A lot more users will be using SPV wallets in the future,\n>>>> and one of the techniques SPV clients use to judge how likely\n>>>> a transaction is to be confirmed is if it propagates across\n>>>> the network. I wonder if and when double-spend relaying is \n>>>> introduced, if nodes should also send BIP61 reject messages \n>>>> or something along those lines to indicate which\n>>>> transactions those nodes believe to be invalid, but are\n>>>> relaying anyway.\n>>>> \n>>>> This would be subject to sybil attacks, as is monitoring \n>>>> propagation, however it does still increase the cost of \n>>>> performing a 0 confirmation double spend attack on an SPV \n>>>> client above just relaying double-spends without indicating \n>>>> if a node believes the transaction to be valid.\n>>>> \n>>>> Aaron Voisine breadwallet.com\n>>> \n> \n> ------------------------------------------------------------------------------\n>\n>\n> \nMeet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS \n> Reports Are you Audit-Ready for PCI DSS 3.0 Compliance? Download \n> White paper Comply to PCI DSS 3.0 Requirement 10 and 11.5 with \n> EventLog Analyzer \n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n>\n>\n> \n_______________________________________________\n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n- -- \ns7r\nPGP Fingerprint: 7C36 9232 5ABD FB0B 3021 03F1 837F A52C 8126 5B11\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\n\niQEcBAEBAgAGBQJUJZPVAAoJEIN/pSyBJlsRfgoIAI4x4qITdCDyYx/I1+z4eGz3\nu7zDbVGQEPsUlrgEZLf503TNUIKmEgYQvgQDGEdOQk615XlkrTJeqt5oLh9DVJKj\nTaXRqKgBp4iNd6BIIs1gKl0CzmH9sJ7U9ojhTS5aV7ZUhinO0WZlgISYaBZ3t9Kw\nt//jb8QNLqISOeotiO9A2jb06UVRf9Gh0FUSBYTJ/st0UvLWt286zT+4XOaeVI/c\n9I9nkTsd/jdw1Eorfcd5T8iHBORcdn9g+5+UpuXVq7d3KA5FA6oetzBVHgUfTMjF\nq9LAe0W9IUVSiRj+wWvADzlxeUwWjsHnJDxdGihBg/g+k6SfPnOAxEC1UjCH+OU=\n=kaIX\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "SPV clients and relaying double spends",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "s7r",
                "Matt Whitlock",
                "Christophe Biocca",
                "Aaron Voisine",
                "Tom Harding"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 15642
        }
    },
    {
        "title": "[Bitcoin-development]  replace-by-fee v0.9.3 release",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-09-28T05:15:53",
                "message_text_only": "On Sat, Sep 27, 2014 at 07:55:44PM -0700, Tom Harding wrote:\n> On 9/25/2014 7:37 PM, Aaron Voisine wrote:\n> > Of course you wouldn't want nodes to propagate alerts without\n> > independently verifying them\n> How would a node independently verify a double-spend alert, other than \n> by having access to an actual signed double-spend?\n> \n> #4570 relays the first double-spend AS an alert.  Running this branch on \n> mainnet, I have been keeping a live list of relayed double-spend \n> transactions at http://respends.thinlink.com\n\nSpeaking of, I ported my replace-by-fee branch the recent v0.9.3\nrelease: https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.9.3\n\nI actually ported it a few days ago; that release has been running on a\nhalf-dozen or so nodes right now for a few days with no issues.\n\nThe v0.9.3 release's scriptSig size limit increase adds a new category\nof double-spending exploit. I'm not going to get time to add that\nexploit to my replace-by-fee toolkit(1) for at least another week or so\nthough - pull-reqs accepted.\n\n1) https://github.com/petertodd/replace-by-fee-tools\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000084778cc7b7394a48d65c9451a59dcf98d0f1e1078f39c3a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140928/5ab04989/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "replace-by-fee v0.9.3 release",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1468
        }
    },
    {
        "title": "[Bitcoin-development] replace-by-fee v0.9.3 release",
        "thread_messages": [
            {
                "author": "Luke Dashjr",
                "date": "2014-09-28T17:03:50",
                "message_text_only": "On Sunday, September 28, 2014 5:15:53 AM Peter Todd wrote:\n> On Sat, Sep 27, 2014 at 07:55:44PM -0700, Tom Harding wrote:\n> > On 9/25/2014 7:37 PM, Aaron Voisine wrote:\n> > > Of course you wouldn't want nodes to propagate alerts without\n> > > independently verifying them\n> > \n> > How would a node independently verify a double-spend alert, other than\n> > by having access to an actual signed double-spend?\n> > \n> > #4570 relays the first double-spend AS an alert.  Running this branch on\n> > mainnet, I have been keeping a live list of relayed double-spend\n> > transactions at http://respends.thinlink.com\n> \n> Speaking of, I ported my replace-by-fee branch the recent v0.9.3\n> release: https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.9.3\n> \n> I actually ported it a few days ago; that release has been running on a\n> half-dozen or so nodes right now for a few days with no issues.\n> \n> The v0.9.3 release's scriptSig size limit increase adds a new category\n> of double-spending exploit. I'm not going to get time to add that\n> exploit to my replace-by-fee toolkit(1) for at least another week or so\n> though - pull-reqs accepted.\n> \n> 1) https://github.com/petertodd/replace-by-fee-tools\n\nDo you have or can you provide a version compatible with CPFP, such that a \nchild paying a higher fee trumps the parent's replacement?\n\nPreferably something that will merge cleanly into 0.9.x-ljr :)\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "replace-by-fee v0.9.3 release",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke Dashjr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1407
        }
    },
    {
        "title": "[Bitcoin-development] [ann] Bitcoin Core 0.9.3 has been released",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-09-27T13:56:56",
                "message_text_only": "Bitcoin Core version 0.9.3 is now available from:\n\n  https://bitcoin.org/bin/0.9.3/\n\nThis is a new minor version release, bringing only bug fixes and updated\ntranslations. Upgrading to this release is recommended.\n\nPlease report bugs using the issue tracker at github:\n\n  https://github.com/bitcoin/bitcoin/issues\n\nUpgrading and downgrading\n==========================\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\nbitcoind/bitcoin-qt (on Linux).\n\nIf you are upgrading from version 0.7.2 or earlier, the first time you run\n0.9.3 your blockchain files will be re-indexed, which will take anywhere from\n30 minutes to several hours, depending on the speed of your machine.\n\nDowngrading warnings\n--------------------\n\nThe 'chainstate' for this release is not always compatible with previous\nreleases, so if you run 0.9.x and then decide to switch back to a\n0.8.x release you might get a blockchain validation error when starting the\nold release (due to 'pruned outputs' being omitted from the index of\nunspent transaction outputs).\n\nRunning the old release with the -reindex option will rebuild the chainstate\ndata structures and correct the problem.\n\nAlso, the first time you run a 0.8.x release on a 0.9 wallet it will rescan\nthe blockchain for missing spent coins, which will take a long time (tens\nof minutes on a typical machine).\n\n0.9.3 Release notes\n=======================\n\nRPC:\n- Avoid a segfault on getblock if it can't read a block from disk\n- Add paranoid return value checks in base58\n\nProtocol and network code:\n- Don't poll showmyip.com, it doesn't exist anymore\n- Add a way to limit deserialized string lengths and use it\n- Add a new checkpoint at block 295,000\n- Increase IsStandard() scriptSig length\n- Avoid querying DNS seeds, if we have open connections\n- Remove a useless millisleep in socket handler\n- Stricter memory limits on CNode\n- Better orphan transaction handling\n- Add `-maxorphantx=<n>` and `-maxorphanblocks=<n>` options for\ncontrol over the maximum orphan transactions and blocks\n\nWallet:\n- Check redeemScript size does not exceed 520 byte limit\n- Ignore (and warn about) too-long redeemScripts while loading wallet\n\nGUI:\n- fix 'opens in testnet mode when presented with a BIP-72 link with no fallback'\n- AvailableCoins: acquire cs_main mutex\n- Fix unicode character display on MacOSX\n\nMiscellaneous:\n- key.cpp: fail with a friendlier message on missing ssl EC support\n- Remove bignum dependency for scripts\n- Upgrade OpenSSL to 1.0.1i (see\nhttps://www.openssl.org/news/secadv_20140806.txt - just to be sure, no\ncritical issues for Bitcoin Core)\n- Upgrade miniupnpc to 1.9.20140701\n- Fix boost detection in build system on some platforms\n\nCredits\n--------\n\nThanks to everyone who contributed to this release:\n\n- Andrew Poelstra\n- Cory Fields\n- Gavin Andresen\n- Jeff Garzik\n- Johnathan Corgan\n- Julian Haight\n- Michael Ford\n- Pavel Vasin\n- Peter Todd\n- phantomcircuit\n- Pieter Wuille\n- Rose Toomey\n- Ruben Dario Ponticelli\n- shshshsh\n- Trevin Hofmann\n- Warren Togami\n- Wladimir J. van der Laan\n- Zak Wilcox\n\nAs well as everyone that helped translating on\n[Transifex](https://www.transifex.com/projects/p/bitcoin/)."
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-09-27T19:32:02",
                "message_text_only": "On 27 September 2014 15:56, Wladimir <laanwj at gmail.com> wrote:\n\n> Bitcoin Core version 0.9.3 is now available from:\n>\n>   https://bitcoin.org/bin/0.9.3/\n>\n> This is a new minor version release, bringing only bug fixes and updated\n> translations. Upgrading to this release is recommended.\n>\n> Please report bugs using the issue tracker at github:\n>\n>   https://github.com/bitcoin/bitcoin/issues\n>\n> Upgrading and downgrading\n> ==========================\n>\n> How to Upgrade\n> --------------\n>\n> If you are running an older version, shut it down. Wait until it has\n> completely\n> shut down (which might take a few minutes for older versions), then run the\n> installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac)\n> or\n> bitcoind/bitcoin-qt (on Linux).\n>\n> If you are upgrading from version 0.7.2 or earlier, the first time you run\n> 0.9.3 your blockchain files will be re-indexed, which will take anywhere\n> from\n> 30 minutes to several hours, depending on the speed of your machine.\n>\n> Downgrading warnings\n> --------------------\n>\n> The 'chainstate' for this release is not always compatible with previous\n> releases, so if you run 0.9.x and then decide to switch back to a\n> 0.8.x release you might get a blockchain validation error when starting the\n> old release (due to 'pruned outputs' being omitted from the index of\n> unspent transaction outputs).\n>\n> Running the old release with the -reindex option will rebuild the\n> chainstate\n> data structures and correct the problem.\n>\n> Also, the first time you run a 0.8.x release on a 0.9 wallet it will rescan\n> the blockchain for missing spent coins, which will take a long time (tens\n> of minutes on a typical machine).\n>\n> 0.9.3 Release notes\n> =======================\n>\n> RPC:\n> - Avoid a segfault on getblock if it can't read a block from disk\n> - Add paranoid return value checks in base58\n>\n> Protocol and network code:\n> - Don't poll showmyip.com, it doesn't exist anymore\n> - Add a way to limit deserialized string lengths and use it\n> - Add a new checkpoint at block 295,000\n> - Increase IsStandard() scriptSig length\n> - Avoid querying DNS seeds, if we have open connections\n> - Remove a useless millisleep in socket handler\n> - Stricter memory limits on CNode\n> - Better orphan transaction handling\n> - Add `-maxorphantx=<n>` and `-maxorphanblocks=<n>` options for\n> control over the maximum orphan transactions and blocks\n>\n> Wallet:\n> - Check redeemScript size does not exceed 520 byte limit\n> - Ignore (and warn about) too-long redeemScripts while loading wallet\n>\n> GUI:\n> - fix 'opens in testnet mode when presented with a BIP-72 link with no\n> fallback'\n> - AvailableCoins: acquire cs_main mutex\n> - Fix unicode character display on MacOSX\n>\n> Miscellaneous:\n> - key.cpp: fail with a friendlier message on missing ssl EC support\n> - Remove bignum dependency for scripts\n> - Upgrade OpenSSL to 1.0.1i (see\n> https://www.openssl.org/news/secadv_20140806.txt - just to be sure, no\n> critical issues for Bitcoin Core)\n> - Upgrade miniupnpc to 1.9.20140701\n> - Fix boost detection in build system on some platforms\n>\n> Credits\n> --------\n>\n> Thanks to everyone who contributed to this release:\n>\n> - Andrew Poelstra\n> - Cory Fields\n> - Gavin Andresen\n> - Jeff Garzik\n> - Johnathan Corgan\n> - Julian Haight\n> - Michael Ford\n> - Pavel Vasin\n> - Peter Todd\n> - phantomcircuit\n> - Pieter Wuille\n> - Rose Toomey\n> - Ruben Dario Ponticelli\n> - shshshsh\n> - Trevin Hofmann\n> - Warren Togami\n> - Wladimir J. van der Laan\n> - Zak Wilcox\n>\n> As well as everyone that helped translating on\n> [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n>\n\nGreat work!\n\nApologies if this has been covered.  But I was curious about:\n\n- Increase IsStandard() scriptSig length\n\nIs there some place I read more to understand this change?\n\n\n>\n>\n> ------------------------------------------------------------------------------\n> Meet PCI DSS 3.0 Compliance Requirements with EventLog Analyzer\n> Achieve PCI DSS 3.0 Compliant Status with Out-of-the-box PCI DSS Reports\n> Are you Audit-Ready for PCI DSS 3.0 Compliance? Download White paper\n> Comply to PCI DSS 3.0 Requirement 10 and 11.5 with EventLog Analyzer\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=154622311&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140927/036469f3/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-09-27T19:39:23",
                "message_text_only": "On Sat, Sep 27, 2014 at 09:32:02PM +0200, Melvin Carvalho wrote:\n> > As well as everyone that helped translating on\n> > [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n> >\n> \n> Great work!\n> \n> Apologies if this has been covered.  But I was curious about:\n> \n> - Increase IsStandard() scriptSig length\n> \n> Is there some place I read more to understand this change?\n\ncommit 84fe0ffd685627689bbbcd14cf419938f2a100b2\nAuthor: Peter Todd <pete at petertodd.org>\nDate:   Mon Mar 10 16:38:44 2014 -0400\n\n    Increase IsStandard() scriptSig length\n\n    Removes the limits on number of pubkeys for P2SH CHECKMULTISIG outputs.\n    Previously with the 500 byte scriptSig limit there were odd restrictions\n    where even a 1-of-12 P2SH could be spent in a standard transaction(1),\n    yet multisig scriptPubKey's requiring more signatures quickly ran out of\n    scriptSig space.\n\n    From a \"stuff-data-in-the-blockchain\" point of view not much has changed\n    as with the prior commit now only allowing the dummy value to be null\n    the newly allowed scriptSig space can only be used for signatures. In\n    any case, just using more outputs is trivial and doesn't cost much.\n\n    1) See 779b519480d8c5346de6e635119c7ee772e97ec872240c45e558f582a37b4b73\n       Mined by BTC Guild.\n\ndiff --git a/src/main.cpp b/src/main.cpp\nindex a0b6842..63b87b8 100644\n--- a/src/main.cpp\n+++ b/src/main.cpp\n@@ -513,10 +513,14 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n-        // Biggest 'standard' txin is a 3-signature 3-of-3 CHECKMULTISIG\n-        // pay-to-script-hash, which is 3 ~80-byte signatures, 3\n-        // ~65-byte public keys, plus a few script ops.\n-        if (txin.scriptSig.size() > 500) {\n+        // Biggest 'standard' txin is a 15-of-15 P2SH multisig with compressed\n+        // keys. (remember the 520 byte limit on redeemScript size) That works\n+        // out to a (15*(33+1))+3=513 byte redeemScript, 513+1+15*(73+1)=1624\n+        // bytes of scriptSig, which we round off to 1650 bytes for some minor\n+        // future-proofing. That's also enough to spend a 20-of-20\n+        // CHECKMULTISIG scriptPubKey, though such a scriptPubKey is not\n+        // considered standard)\n+        if (txin.scriptSig.size() > 1650) {\n             reason = \"scriptsig-size\";\n             return false;\n         }\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000188beaebec22c62bcff1a5d92e5d21432e797ec717cfed3a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140927/533f0890/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.9.3 has been released",
            "categories": [
                "Bitcoin-development",
                "ann"
            ],
            "authors": [
                "Melvin Carvalho",
                "Wladimir",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 10761
        }
    },
    {
        "title": "[Bitcoin-development] New opcodes and transaction version numbers (was 'relax the IsStandard rules for P2SH transactions')",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-09-29T02:35:53",
                "message_text_only": "On Thu, Jun 19, 2014 at 09:54:31AM -0400, Gavin Andresen wrote:\n> RE: soft-forks bumping version numbers:\n> \n> Yes, we have consensus that is the way we will do it.  I should probably\n> turn https://gist.github.com/gavinandresen/2355445 into an informational\n> BIP.\n\nThat gist is mistaken. To see the problem consider the \"re-define\nOP_NOP1 to be OP_Q_CHECKSIGVERIFY\" example. It says \"Transactions that\nuse the new opcode are given a new version number.\" The problem is in\nthe definition of \"use\"\n\nLets first suppose that the evaluation of a scriptPubKey was done\naccording to the transaction version # of the transaction creating the\nscriptPubKey. This is technically feasible as the UTXO set records the\nversion of the transaction creating the txout. However if I create a\nP2SH address whose redeemScript makes use of a new opcode - say the new\nOP_Q_CHECKSIGVERIFY - non-upgraded clients sending funds to that address\nwill be creating scriptPubKeys whose contents can be spent by anyone.\nNot exactly ideal! This can be solved by upgrading the address format at\nthe same time to let senders know they must send the funds in a\ntransaction with an increased version number, but obviously needing new\naddresses for every new opcode defeats the purpose of P2SH.\n\nOn the other hand suppose scriptPubKey evaluation is done according to\nthe version of the transaction spending the scriptPubKey. This is\ninsecure as now transaction outputs using the new opcode can be\ntrivially spent by just spending them in a transaction with the previous\nversion number; the OP_Q_CHECKSIGVERIFY is evaluated as OP_NOP and\nchecks nothing.\n\nIf txouts be spent only by transactions with nVersion >= the nVersion of\nthe transaction spending them, but again you're forced to upgrade the\naddress format for every new opcode. Interestingly this shows that the\ncommon assertion that \"P2SH should have been done by upgrading the tx\nversion #\" is in fact wrong except for the fact that P2SH required an\naddress format upgrade anyway; doing that for future opcode upgrades\nwould be a mistake.\n\nWith the above in mind the \"Relax IsStandard rules for P2SH\ntransactions\" pull-req(1) is incomplete as it doesn't blacklist usage of\nthe upgradable NOPx opcodes. After a future soft-fork redefining a NOPx\nopcodes' behavior non-upgraded nodes will accept and mine transactions\nthat may now be invalid, the latter creating invalid blocks and thus\nfalse confirmations. I've created a pull-req to fix this issue by\nspecifically blacklisting the NOPx opcodes if they are executed:\n\n    https://github.com/bitcoin/bitcoin/pull/5000\n\nSecondly the \"Blockchain Rule Update Process\" gist above should be\nrewritten to say that new opcodes will be enabled for all scripts by the\nblock nVersion upgrade mechanism; scripts must never depend on a NOPx\nopcode being executed least they be rendered unspendable by a future\nupgrade.\n\nBy comparison BIP62 proposes that the transaction version # be increased\nto indicate that the sender wants anti-malleability rules to be applied.\nThis is an appropriate usage of tx version numbers as in this case the\nperson creating the transaction wants the anti-malleability rules\napplied; the creator of the scriptPubKey's being spent does not care\nwhether or not they are spent in a transaction that is or is not\nmalleable. Equally the new owners of the txouts being created don't in\ngeneral care how they were created. (modulo certain special-purpose\nprotocols where they would have the transaction anyway)\n\n1) https://github.com/bitcoin/bitcoin/pull/4365\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000005ec432fd4c506119a0123a028911fa3981bcde0568b66ab\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140928/36647802/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-09-29T04:30:11",
                "message_text_only": "On 09/28/2014 10:35 PM, Peter Todd wrote:\n> This can be solved by upgrading the address format at\n> the same time to let senders know they must send the funds in a\n> transaction with an increased version number, but obviously needing new\n> addresses for every new opcode defeats the purpose of P2SH.\n\nCan't this be solved with a single update to the address format,\nallowing a tx version number to be part of the address serialization? \nThen the sending software will apply that version to the payment tx.   \nOf course, I'm not sure if allowing nodes to create transactions with\nversion numbers outside of their programming is safe.  It seems like it\nshould be since we're talking about soft forks anyway, but there's\nprobably some subtleties I'm overlooking."
            },
            {
                "author": "Peter Todd",
                "date": "2014-09-29T05:35:26",
                "message_text_only": "On Mon, Sep 29, 2014 at 12:30:11AM -0400, Alan Reiner wrote:\n> On 09/28/2014 10:35 PM, Peter Todd wrote:\n> > This can be solved by upgrading the address format at\n> > the same time to let senders know they must send the funds in a\n> > transaction with an increased version number, but obviously needing new\n> > addresses for every new opcode defeats the purpose of P2SH.\n> \n> Can't this be solved with a single update to the address format,\n> allowing a tx version number to be part of the address serialization? \n> Then the sending software will apply that version to the payment tx.   \n> Of course, I'm not sure if allowing nodes to create transactions with\n> version numbers outside of their programming is safe.  It seems like it\n> should be since we're talking about soft forks anyway, but there's\n> probably some subtleties I'm overlooking.\n\nKeep in mind that when a *wallet* - not a node - creates a transaction\nthe scriptPubKeys in the transaction outputs have been specified by the\nreceiver(s) and aren't executed until they are spent. Modulo sigops(1)\nthere is absolutely no reason why the wallet should care what the\ncontents of those scriptPubKeys are at all.\n\nThis is particularly apparent when you remember that there may be\nmultiple recipients of a transaction. If I'm paying Alice and Bob, who\nhave specified that they want the transaction to have version number 2\nand 3 respectively, now what? Do we take the highest of the two and\nconstrain ourselves for how scripts are interpreted for all eternity? It\njust doesn't make very much sense.\n\nMeanwhile the man-hours of effort that would be required to implement\nthat \"one-time\" address format change is huge - it took literally years\nfor everyone to update their software to just support P2SH addresses.\nI'm working on a CHECKLOCKTIMEVERIFY implementation right now, and know\nof exchanges who would like to use it ASAP. Why make them wait years for\neveryone to upgrade?\n\nOn that basis alone I think the question ought to be why should we use\ntransaction version numbers to enable new opcodes rather than just\nenabling them globally based on block version numbers.\n\n\n1) Satoshi implemented a per-block sigop limit to prevent blocks from\ncausing an unreasonable number of signature checking operations, but\nrather than computing that limit based on the scripts actually executed,\nthe limit is computed based on the contents of all scriptSigs and\nscriptPubKeys in the block. This is bizzare given that the contents of\nthe latter are *not* executed, and the former misses the prevout\nscriptPubKeys that *are* executed. In short this means you can create a\nblock that passes the sigop limit, yet executes millions of expensive\nsignature operations by being filled with scriptSigs spending txouts\nwith large numbers of sigops in their scriptPubKeys. P2SH improves on\nthis situation somewhat by counting the sigops in redeemScripts towards\nthe limit, but missed the opportunity to just count all sigops in all\nscriptSigs directly.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000092e056ab9c5a3242bfa911ba9a0a8a3836bcd4b5fcab2f8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 650 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140929/8fd41a18/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "New opcodes and transaction version numbers (was 'relax the IsStandard rules for P2SH transactions')",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Alan Reiner",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 8035
        }
    }
]