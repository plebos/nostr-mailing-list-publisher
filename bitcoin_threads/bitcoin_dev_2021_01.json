[
    {
        "title": "[bitcoin-dev] Softchains: Sidechains as a Soft Fork via Proof-of-Work Fraud Proofs",
        "thread_messages": [
            {
                "author": "Ruben Somsen",
                "date": "2021-01-01T00:05:59",
                "message_text_only": "Hi Sergio,\n\nThanks for taking an interest.\n\n>I don't understand how your proposal prevents miners proposing a peg-out\nfor an invalid sidechain fork which is not made available to the nodes\n(there are missing blocks)\n\nGood question. Data availability is a common problem for sidechain designs,\nbut PoW FP are actually a unique solution to this problem. In order for a\nblock with missing data to be accepted for a peg-out, it has to a.) remain\nin the chain with the most PoW for a whole year, and b.) no fork that\nquestions the validity/availability of that block must exist. If a fork\ndoes exist, this triggers all nodes to attempt to download the block with\nthe missing data. Since they will fail, the chain will be considered\ninvalid. I recommend reading the original posts about PoW FP ([1] and [2]\nin my original post) for more elaboration.\n\n>it is very limited in the types of sidechains it can verify\n\nI agree that something like drivechains is much more flexible, but it comes\nwith a security tradeoff that many find uncomfortable.\n\n>based on both a large multisig AND a drivechain, where both groups need to\nagree for the peg-out to occur.  It's a censorship/security trade-off that\nmost users would be willing to accept\n\nI think federations are an absolutely fine tradeoff, but of course the\nsoftchain design is one that deliberately tries to avoid them for reasons\nthat I assume are obvious.\n\n>until a trusted-setup-free SNARK-like based solution is finally available\n\n>From my research into SNARKs I concluded that they still won't get you away\nfrom having the sidechain function like an extension block, so the fruit\ndoesn't seem to be hanging that low from my perspective. This is because\nSNARKs actually do suffer from the data availability problem you were\nasking about. You can definitely save a lot by aggregating witness data\nwith SNARKs, but non-witness data cannot be aggregated and must be\ndownloaded by everyone, so you're still going to be restricted by\nbandwidth. I described the issue here in detail:\nhttps://medium.com/@RubenSomsen/snarks-and-the-future-of-blockchains-55b82012452b\n\nCheers,\nRuben\n\n\n\n\nOn Fri, Jan 1, 2021 at 12:38 AM Sergio Demian Lerner <\nsergio.d.lerner at gmail.com> wrote:\n\n> Hi Roben,\n>  It's an interesting proposal, but I have two issues with it, one\n> technical and one philosophical.\n>\n> On the technical side, I don't understand how your proposal prevents\n> miners proposing a peg-out for an invalid sidechain fork which is not made\n> available to the nodes (there are missing blocks). It seems that the system\n> would need to allow users to challenge miners to make available full\n> sidechain blocks that are missing, which really complicates the protocol.\n>\n> On the philosophical side, as you mentioned, it is very limited in the\n> types of sidechains it can verify. I won't be able to verify RSK\n> (merge-mined with Bitcoin, but with different block format and different\n> functionality). It cannot verify a zCash-like sidechain for the same\n> reasons. Therefore it is strictly a payment scalability solution.\n> Drivechains, on the other hand, enable many new use cases apart from\n> scaling, which have a much lower level of complexity (if implemented\n> correctly).\n>\n> Since the inception of RSK sidechain, I suggested in its white-paper that\n> sidechains should be designed to support an hybrid peg-out system, based on\n> both a large multisig AND a drivechain, where both groups need to agree for\n> the peg-out to occur.  It's a censorship/security trade-off that most users\n> would be willing to accept until a trusted-setup-free SNARK-like based\n> solution is finally available.\n> Until we have a sidechain-selectable SNARK-like succinct verification of\n> any block state transition function, having a single succint proof to cover\n> the whole sidechain validity, as in Coda (now renamed Mina), drivechains\n> are the low-hanging-fruit.\n>\n> regards\n>\n> On Thu, Dec 31, 2020 at 7:01 PM Ruben Somsen via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hi everyone,\n>>\n>> This post describes a fully decentralized two-way peg sidechain design.\n>> Activating new sidechains requires a soft fork, hence the name softchains.\n>> The key aspect is that all softchains are validated by everyone via\n>> Proof-of-Work Fraud Proofs (PoW FP) -- a slow but very efficient consensus\n>> mechanism that only requires the validation of disputed blocks. This does\n>> increase the validation burden of mainchain full nodes, but only by a\n>> minimal amount (~100MB per chain per year). It's similar to drivechains[0],\n>> but without the major downside of having to rely on miners, since all\n>> Bitcoin full node users can efficiently validate each sidechain.\n>>\n>>\n>> Proof-of-Work Fraud Proofs\n>>\n>> Last year I posted the idea of PoW FP to the Bitcoin mailing list[1][2].\n>> The idea is that we can use the existence of a fork in Bitcoin's PoW as\n>> evidence that a block might be invalid (i.e. a proof of potential fraud).\n>> Whenever this occurs, we download the block in question to verify whether\n>> it was valid (and available), and reject it if it was not. We forego the\n>> need for maintaining a UTXO set with UTXO set commitments (such as\n>> utreexo[3]), by assuming that the commitment inside the last block to exist\n>> in both forks is valid. As a result, we only need to download as many\n>> blocks (and their corresponding UTXO set proofs) as there are orphans,\n>> which lowers the validation costs considerably compared to running a full\n>> node.\n>>\n>> In the past 4 months, Forkmonitor has registered 11 stale and invalid\n>> blocks[4]. Extrapolating from that data, a PoW FP node verifying Bitcoin\n>> consensus would have to download and verify a little over 100MB per year in\n>> order to have consensus guarantees that come close to that of a full node:\n>> - All PoW headers (~4MB per year)\n>> - 3 x 11 = 33 full blocks (~2MB x 33 = 66MB)\n>> - UTXO merkle proofs (~1MB x 33 = 33MB with utreexo)\n>>\n>> The reason consensus is considered slow, is because we need to allow time\n>> for a honest PoW minority to fork away from an invalid chain. If we assume\n>> only 1% of all miners are honest, this means consensus slows down by 100x.\n>> If you are normally satisfied waiting for 6 confirmations, you now need to\n>> wait 600 confirmations. The longer you wait, the less honest miners you\n>> need.\n>>\n>>\n>> Softchains\n>>\n>> In order to have two-way pegged sidechains, you need a succinct method\n>> for proving to the mainchain that a peg-out is valid. PoW FP provides\n>> exactly that -- a low-bandwidth way of determining if a chain, and thus a\n>> peg-out, is valid. The slowness of PoW FP consensus is not an issue, as\n>> peg-outs can be made arbitrarily slow (e.g. one year).\n>>\n>> The safest design would be a set of softchains that shares its consensus\n>> code with Bitcoin Core, with the addition of UTXO set commitments, and\n>> disabling non-taproot address types to minimize certain resource usage\n>> issues[5]. All users validate the mainchain as usual with their full node,\n>> and all softchains are validated with PoW FP consensus. If a user is\n>> interested in directly using a specific softchain, they should run it as a\n>> full node in order to get fast consensus.\n>>\n>> Peg-ins occur by freezing coins on the mainchain and assigning them to a\n>> softchain. Peg-outs occur by creating a mainchain transaction that points\n>> to a peg-out transaction on a softchain and waiting for a sufficient number\n>> of mainchain confirmations. If the peg-out transaction remains part of the\n>> softchain according to PoW FP consensus, the coins become spendable.\n>>\n>> The peg-in/peg-out mechanism itself would require a soft fork (the exact\n>> design is an open question), and subsequently every softchain that gets\n>> activated will also require a soft fork.\n>>\n>>\n>> Potential dangers\n>>\n>> Softchain consensus still requires a form of validation from mainchain\n>> users, which means that consensus bugs can have an adverse effect. In\n>> particular, if a softchain suffers from a non-deterministic consensus bug,\n>> it may be the case that a majority accepts a peg-in, while a minority\n>> rejects it. This specific scenario could cause a chain split in mainchain\n>> consensus. This is why it would be safest to base softchain designs on\n>> Bitcoin Core.\n>>\n>> Similarly, it can theoretically be possible that a softchain gets a major\n>> reorg, invalidating a peg-out right as it would have become accepted on the\n>> mainchain, thus splitting consensus. The slow peg-out process makes this\n>> increasingly unlikely, but not impossible. One thing that might help (or\n>> perhaps only make it worse) is introducing a consensus rule that disallows\n>> reorgs that are bigger than half the peg-out time (e.g. half a year, if the\n>> peg-out is one year). This kind of rule does not actually solve this\n>> consensus problem, but instead pushes the problem forward so it plays out\n>> first on the softchain, giving time to take action before the problem\n>> affects the mainchain.\n>>\n>> It is also important that each softchain produces a non-trivial amount of\n>> PoW, because if the difficulty is too low, the cost of creating forks and\n>> increasing the resource usage of PoW FP consensus goes down. It may\n>> therefore make sense to have a minimum accepted difficulty for softchain\n>> blocks (slowing down the chain when fees are not sufficient). Merged Mining\n>> could also help here, since that would allow the softchains to potentially\n>> receive the same hashrate as Bitcoin (assuming all miners participate), but\n>> of course this would also put an additional validation burden on miners.\n>>\n>>\n>> In closing\n>>\n>> It may turn out that the consensus risks outlined above make this\n>> prohibitively risky, but at the very least it seems worth exploring the\n>> possibilities. At a minimum it would provide more opt-in block space, and\n>> it could potentially open the door to chains with entirely different\n>> consensus rules.\n>>\n>> Thank you for taking the time to read and comprehend my work. I will\n>> happily answer any questions and I look forward to any feedback on issues\n>> that I might have overlooked, and ideas on mitigating problems to ensure\n>> maximum safety.\n>>\n>> Hopefully this will bring decentralized two-way peg sidechains one step\n>> closer to becoming a reality.\n>>\n>> Happy new year, everyone.\n>>\n>>\n>> -- Ruben Somsen\n>>\n>>\n>>\n>> This post is mirrored and kept up-to-date here:\n>> https://gist.github.com/RubenSomsen/7ecf7f13dc2496aa7eed8815a02f13d1\n>>\n>>\n>> [0] Drivechains\n>> https://www.drivechain.info/\n>>\n>> [1] PoW FP\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-April/016873.html\n>>\n>> [2] PoW FP without a soft fork\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-September/017287.html\n>>\n>> [3]: utreexo\n>> https://eprint.iacr.org/2019/611.pdf\n>>\n>> [4]: Forkmonitor\n>> https://forkmonitor.info/notifications\n>>\n>> [5]: Harding on worst-case utreexo\n>>\n>> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-September/017298.html\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210101/57365dee/attachment-0002.html>"
            }
        ],
        "thread_summary": {
            "title": "Softchains: Sidechains as a Soft Fork via Proof-of-Work Fraud Proofs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Ruben Somsen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 11463
        }
    },
    {
        "title": "[bitcoin-dev] New PSBT version proposal",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-01-02T06:34:00",
                "message_text_only": "One thing I think should be added in V2 is the ability to specify sighash\nflags per-key as opposed to per-input.\n\nThe per-key restriction is unfitting given that there are circumstances\nwhere multisig signers may validate heterogenous logic.\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n<https://twitter.com/JeremyRubin>\n\n\nOn Wed, Dec 23, 2020 at 1:37 PM Andrew Chow via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hi,\n>\n> On 12/22/20 10:30 PM, fiatjaf wrote:\n> > Hi Andrew.\n> >\n> > I'm just a lurker here and I have not much experience with PSBTs, but\n> still let me pose this very obvious question and concern: isn't this change\n> going to create a compatibility nightmare, with some software supporting\n> version 1, others supporting version 2, and the ones that care enough about\n> UX and are still maintained being forced to support both versions -- and\n> for no very important reason except some improvements in the way data is\n> structured?\n> No, it is not just \"improvements in the way data is structured.\"\n>\n> The primary reason for these changes is to allow PSBT to properly\n> support adding inputs and outputs. This is a feature that many people\n> have requested, and the ways that people have been doing it are honestly\n> just hacks and not really the right way to be doing that. These changes\n> allow for that feature to be supported well.\n>\n> Furthermore, it is possible to downgrade and upgrade PSBTs between the\n> two versions, once all inputs and outputs have been decided. Since\n> PSBTv2 is essentially just taking all of the normal transaction fields\n> and grouping them all with the rest of the data for those inputs and\n> outputs, it is easy to reconstruct a global unsigned transaction and\n> turn a PSBTv2 into a PSBTv0. It is likewise just as easy to go the other\n> way and break apart the global unsigned tx to turn a PSBTv0 into a\n> PSBTv2. Originally, I had considered requiring that once a transaction\n> was fully constructed it must be downgraded to a PSBTv0, but the\n> structure changes that were made do make it easier to work with PSBT so\n> I decided not to add this requirement.\n>\n> Perhaps to maintain compatibility PSBT_GLOBAL_UNSIGNED_TX shouldn't be\n> disallowed in PSBTv2 once the transaction is constructed? It would make\n> things much more confusing though as it would no longer be a clean break.\n>\n>\n> Andrew Chow\n>\n> > Ultimately I don't think it should matter if some data is structured in\n> not-the-best-possible way, as long as it is clear enough for the computer\n> and for the libraries already written to deal with it.\n> Backwards-compatibility and general interoperability is worth much more\n> than anything else in these cases.\n> >\n> > Also let me leave this article here, which I find very important (even\n> if for some reason it ends up not being relevant to this specific case):\n> http://scripting.com/2017/05/09/rulesForStandardsmakers.html\n> >\n> >   ---- On Tue, 22 Dec 2020 17:12:22 -0300 Andrew Chow via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote ----\n> >   > Hi All,\n> >   >\n> >   > I have some updates on this after speaking with some people off-list.\n> >   >\n> >   > Firstly, the version number will be set to 2. In most discussions,\n> this\n> >   > proposal was being referred to as PSBT version 2, so it'll be easier\n> and\n> >   > clearer to set the version number to 2.\n> >   >\n> >   > For lock times, instead of a single  PSBT_IN_REQUIRED_LOCKTIME field,\n> >   > there will be 2 of them, one for a time based lock time, and the\n> other\n> >   > for height based. These will be:\n> >   > * PSBT_IN_REQUIRED_TIME_LOCKTIME = 0x10\n> >   >    * Key: empty\n> >   >    * Value: 32 bit unsigned little endian integer greater than or\n> equal\n> >   > to 500000000 representing the minimum Unix timestamp that this input\n> >   > requires to be set as the transaction's lock time. Must be omitted in\n> >   > PSBTv0, and may be omitted in PSBTv2\n> >   > * PSBT_IN_REQUIRED_HEIGHT_LOCKTIME = 0x11\n> >   >    * Key: empty\n> >   >    * Value: 32 bit unsigned little endian integer less than 500000000\n> >   > representing the minimum block height that this input requires to be\n> set\n> >   > as the transaction's lock time. Must be omitted in PSBTv0, and may be\n> >   > omitted in PSBTv2.\n> >   >\n> >   > Having two lock time fields is necessary due to the behavior where\n> all\n> >   > inputs must use the same type of lock time (height or time). Thus if\n> an\n> >   > input requires a particular type of lock time, it must set the\n> requisite\n> >   > field. Any new inputs being added must be able to accommodate all\n> >   > existing inputs' lock time type. This means they either must not\n> have a\n> >   > lock time specified (i.e. no OP_CLTV involved), or have branches that\n> >   > allow the acceptance of either type. If an input has a lock time type\n> >   > that is incompatible with the rest of the transaction, it must not\n> be added.\n> >   >\n> >   > PSBT_GLOBAL_PREFERRED_LOCKTIME is changed to purely be the fallback\n> >   > option if no input lock time fields are present. If there are input\n> lock\n> >   > times, all lock time calculations must ignore it.\n> >   >\n> >   > Any role which does lock time calculation will first check if there\n> are\n> >   > input lock time fields. If there are not, it must then check for a\n> >   > PSBT_GLOBAL_PREFERRED_LOCKTIME. If this field exists, its value is\n> the\n> >   > transaction's lock time. If it does not, the lock time is 0. If there\n> >   > are input lock time fields, it must choose the type which does not\n> >   > invalidate any inputs. The lock time is then determined to be the\n> >   > maximum value of all of the lock time fields for the chosen type.\n> >   >\n> >   >\n> >   > Additionally, I would like to add a new global field:\n> >   > * PSBT_GLOBAL_UNDER_CONSTRUCTION = 0x05\n> >   >    * Key: empty\n> >   >    * Value: A single byte as a boolean. 0 for False, 1 for True. All\n> >   > other values ore prohibited. Must be omitted for PSBTv0, may be\n> omitted\n> >   > in PSBTv2.\n> >   >\n> >   > PSBT_GLOBAL_UNDER_CONSTRUCTION is used to signal whether inputs and\n> >   > outputs can be added to the PSBT. This flag may be set to True when\n> >   > inputs and outputs are being updated, signed, and finalized. However\n> >   > care must be taken when there are existing signatures. If this field\n> is\n> >   > omitted or set to False, no further inputs and outputs may be added\n> to\n> >   > the PSBT.\n> >   >\n> >   > Several rules must be followed to ensure that adding additional\n> inputs\n> >   > and outputs will not invalidate existing signatures. First, an input\n> or\n> >   > output adder must check for any existing signatures in all of the\n> other\n> >   > inputs. If there are none, the input or output may be added in any\n> >   > position. If there are one or more signatures, each signature's\n> sighash\n> >   > type must be examined. Inputs may only be added if all existing\n> >   > signatures use SIGHASH_ANYONECANPAY. Outputs may only be added if all\n> >   > existing signatures use SIGHASH_NONE. If an input has a signature\n> using\n> >   > SIGHASH_SINGLE, the same number of inputs and outputs must be added\n> >   > before that input and it's corresponding output. For all other\n> sighash\n> >   > types (i.e. SIGHASH_ALL and any future sighash types), no inputs or\n> >   > outputs may be added to the PSBT. Specific exceptions can be made in\n> the\n> >   > future for additional sighash types.\n> >   >\n> >   > Furthermore, these newly added inputs must follow additional lock\n> time\n> >   > rules. Because all signatures, regardless of sighash type, sign the\n> >   > transaction lock time, newly added inputs when there are existing\n> >   > signatures must have the same type of lock time used in the\n> transaction,\n> >   > and must be less than or equal to the transaction lock time. It must\n> not\n> >   > cause the transaction lock time to change, otherwise the signatures\n> will\n> >   > be invalidated.\n> >   >\n> >   >\n> >   > Lastly, to uniquely identify transactions for combiners, a txid can\n> be\n> >   > computed from the information present in the PSBT. Internally,\n> combiners\n> >   > can create an unsigned transaction given the transaction version, the\n> >   > input prevouts, the outputs, and the computed locktime. This can\n> then be\n> >   > used to calculate a txid and thus used as a way to identify PSBTs.\n> >   > Combiners will need to do this for all version 2 PSBTs in order to\n> avoid\n> >   > combining distinct transactions.\n> >   >\n> >   >\n> >   > Andrew Chow\n> >   >\n> >   > On 12/9/20 5:25 PM, Andrew Chow wrote:\n> >   > > Hi All,\n> >   > >\n> >   > > I would like to propose a new PSBT version that addresses a few\n> >   > > deficiencies in the current PSBT v0. As this will be backwards\n> >   > > incompatible, a new PSBT version will be used, v1.\n> >   > >\n> >   > > The primary change is to truly have all input and output data for\n> each\n> >   > > in their respective maps. Instead of having to parse an unsigned\n> >   > > transaction and lookup some data from there, and other data from\n> the\n> >   > > correct map, all of the data for an input will be contained in its\n> map.\n> >   > > Doing so also disallows PSBT_GLOBAL_UNSIGNED_TX in this new\n> version.\n> >   > > Thus I propose that the following fields be added:\n> >   > >\n> >   > > Global:\n> >   > > * PSBT_GLOBAL_TX_VERSION = 0x02\n> >   > >     * Key: empty\n> >   > >     * Value: 32-bit little endian unsigned integer for the\n> transaction\n> >   > > version number. Must be provided in PSBT v1 and omitted in v0.\n> >   > > * PSBT_GLOBAL_PREFERRED_LOCKTIME = 0x03\n> >   > >     * Key: empty\n> >   > >     * Value: 32 bit little endian unsigned integer for the\n> preferred\n> >   > > transaction lock time. Must be omitted in PSBT v0. May be provided\n> in\n> >   > > PSBT v1, assumed to be 0 if not provided.\n> >   > > * PSBT_GLOBAL_INPUT_COUNT = 0x04\n> >   > >     * Key: empty\n> >   > >     * Value: Compact size unsigned integer. Number of inputs in\n> this\n> >   > > PSBT. Must be provided in PSBT v1 and omitted in v0.\n> >   > > * PSBT_GLOBAL_OUTPUT_COUNT = 0x05\n> >   > >     * Key: empty\n> >   > >     * Value: Compact size unsigned integer. Number of outputs in\n> this\n> >   > > PSBT. Must be provided in PSBT v1 and omitted in v0.\n> >   > >\n> >   > > Input:\n> >   > > * PSBT_IN_PREVIOUS_TXID = 0x0e\n> >   > >     * Key: empty\n> >   > >     * Value: 32 byte txid of the previous transaction whose output\n> at\n> >   > > PSBT_IN_OUTPUT_INDEX is being spent. Must be provided in PSBT v1\n> and\n> >   > > omitted in v0.\n> >   > > * PSBT_IN_OUTPUT_INDEX = 0x0f\n> >   > >     * Key: empty\n> >   > >     * Value: 32 bit little endian integer for the index of the\n> output\n> >   > > being spent. Must be provided in PSBT v1 and omitted in v0.\n> >   > > * PSBT_IN_SEQUENCE = 0x0f\n> >   > >     * Key: empty\n> >   > >     * Value: 32 bit unsigned little endian integer for the sequence\n> >   > > number. Must be omitted in PSBT v0. May be provided in PSBT v1\n> assumed\n> >   > > to be max sequence (0xffffffff) if not provided.\n> >   > > * PSBT_IN_REQUIRED_LOCKTIME = 0x10\n> >   > >     * Key: empty\n> >   > >     * Value: 32 bit unsigned little endian integer for the lock\n> time that\n> >   > > this input requires. Must be omitted in PSBT v0. May be provided\n> in PSBT\n> >   > > v1, assumed to be 0 if not provided.\n> >   > >\n> >   > > Output:\n> >   > > * PSBT_OUT_VALUE = 0x03\n> >   > >     * Key: empty\n> >   > >     * Value: 64-bit unsigned little endian integer for the output's\n> >   > > amount in satoshis. Must be provided in PSBT v1 and omitted in v0.\n> >   > > * PSBT_OUT_OUTPUT_SCRIPT = 0x04\n> >   > >     * Key: empty\n> >   > >     * Value: The script for this output. Otherwise known as the\n> >   > > scriptPubKey. Must be provided in PSBT v1 and omitted in v0.\n> >   > >\n> >   > > This change allows for PSBT to be used in the construction of\n> >   > > transactions. With these new fields, inputs and outputs can be\n> added as\n> >   > > needed. One caveat is that there is no longer a unique transaction\n> >   > > identifier so more care must be taken when combining PSBTs.\n> >   > > Additionally, adding new inputs and outputs must be done such that\n> >   > > signatures are not invalidated. This may be harder to specify.\n> >   > >\n> >   > > An important thing to note in this proposal are the fields\n> >   > > PSBT_GLOBAL_PREFERRED_LOCKTIME and PSBT_IN_REQUIRED_LOCKTIME. A\n> Bitcoin\n> >   > > transaction only has a single locktime yet a PSBT may have multiple\n> >   > > locktimes. To choose the locktime for the transaction, finalizers\n> must\n> >   > > choose the maximum of all of the *_LOCKTIME fields.\n> >   > > PSBT_IN_REQUIRED_LOCKTIME is added because some inputs, such as\n> those\n> >   > > involving OP_CHECKLOCKTIMEVERIFY, require a specific minimum\n> locktime to\n> >   > > be set. This field allows finalizers to choose a locktime that is\n> high\n> >   > > enough for all inputs without needing to understand the scripts\n> >   > > involved. The PSBT_GLOBAL_PREFERRED_LOCKTIME is the locktime to\n> use if\n> >   > > no inputs require a particular locktime.\n> >   > >\n> >   > > As these changes disallow the PSBT_GLOBAL_UNSIGNED_TX field, PSBT\n> v1\n> >   > > needs the version number bump to enforce backwards incompatibility.\n> >   > > However once the inputs and outputs of a PSBT are decided, a PSBT\n> could\n> >   > > be \"downgraded\" back to v0 by creating the unsigned transaction\n> from the\n> >   > > above fields, and then dropping these new fields.\n> >   > >\n> >   > > If the list finds that these changes are reasonable, I will write\n> a PR\n> >   > > to modify BIP 174 to incorporate them.\n> >   > >\n> >   > > Thanks,\n> >   > > Andrew Chow\n> >   >\n> >   >\n> >   > _______________________________________________\n> >   > bitcoin-dev mailing list\n> >   > bitcoin-dev at lists.linuxfoundation.org\n> >   > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> >   >\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210101/98abd4fd/attachment-0001.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2021-01-06T23:26:25",
                "message_text_only": "Hi Andrew et al,\n\n        Very excited to see this progress; thanks for doing all the\nwork!  Sorry for the delayed feedback, I didn't get to this before the\nbreak.\n\n> Additionally, I would like to add a new global field:\n> * PSBT_GLOBAL_UNDER_CONSTRUCTION = 0x05\n>  \u00a0 * Key: empty\n>  \u00a0 * Value: A single byte as a boolean. 0 for False, 1 for True. All \n> other values ore prohibited. Must be omitted for PSBTv0, may be omitted \n> in PSBTv2.\n>\n> PSBT_GLOBAL_UNDER_CONSTRUCTION is used to signal whether inputs and \n> outputs can be added to the PSBT. This flag may be set to True when \n> inputs and outputs are being updated, signed, and finalized. However \n> care must be taken when there are existing signatures. If this field is \n> omitted or set to False, no further inputs and outputs may be added to \n> the PSBT.\n\nI wonder if this can be flagged simply by omitting the (AFAICT\nredundant) PSBT_GLOBAL_INPUT_COUNT and PSBT_GLOBAL_OUTPUT_COUNT?  What\nare the purposes of those fields?\n\nFor our uses, there would be no signatures at this stage; it's simply a\nsubdivision of the Creator role.  This role would be terminated by\nremoving the under-construction marker.  For this, it could be clear\nthat such an under-construction PSBT SHOULD NOT be signed.\n\nOtherwise, if an explicit marker is required, I would omit the value and\nsimply use its existence to as a flag.  Having two \"false\" values is\nsimply asking for trouble.\n\nThanks!\nRusty.\nPS.  Perhaps we should change the name to PBT (Partial Bitcoin\n     Transaction) now, since it's more than just signing..."
            },
            {
                "author": "Andrew Chow",
                "date": "2021-01-06T23:48:31",
                "message_text_only": "Hi Rusty,\n\nOn 1/6/21 6:26 PM, Rusty Russell wrote:\n> Hi Andrew et al,\n>\n>          Very excited to see this progress; thanks for doing all the\n> work!  Sorry for the delayed feedback, I didn't get to this before the\n> break.\n>\n>> Additionally, I would like to add a new global field:\n>> * PSBT_GLOBAL_UNDER_CONSTRUCTION = 0x05\n>>   \u00a0 * Key: empty\n>>   \u00a0 * Value: A single byte as a boolean. 0 for False, 1 for True. All\n>> other values ore prohibited. Must be omitted for PSBTv0, may be omitted\n>> in PSBTv2.\n>>\n>> PSBT_GLOBAL_UNDER_CONSTRUCTION is used to signal whether inputs and\n>> outputs can be added to the PSBT. This flag may be set to True when\n>> inputs and outputs are being updated, signed, and finalized. However\n>> care must be taken when there are existing signatures. If this field is\n>> omitted or set to False, no further inputs and outputs may be added to\n>> the PSBT.\n> I wonder if this can be flagged simply by omitting the (AFAICT\n> redundant) PSBT_GLOBAL_INPUT_COUNT and PSBT_GLOBAL_OUTPUT_COUNT?  What\n> are the purposes of those fields?\nThe purpose of those fields is to know how many input and output maps \nthere are. Without PSBT_GLOBAL_UNSIGNED_TX, there is no way to determine \nwhether a map is an input map or an output map. So the counts are there \nto allow that.\n> For our uses, there would be no signatures at this stage; it's simply a\n> subdivision of the Creator role.  This role would be terminated by\n> removing the under-construction marker.  For this, it could be clear\n> that such an under-construction PSBT SHOULD NOT be signed.\nThere are some protocols where signed inputs are added to transactions.\n> Otherwise, if an explicit marker is required, I would omit the value and\n> simply use its existence to as a flag.  Having two \"false\" values is\n> simply asking for trouble.\nSeems reasonable.\n\n\nAndrew\n\n> Thanks!\n> Rusty.\n> PS.  Perhaps we should change the name to PBT (Partial Bitcoin\n>       Transaction) now, since it's more than just signing..."
            },
            {
                "author": "Rusty Russell",
                "date": "2021-01-08T00:40:06",
                "message_text_only": "Andrew Chow <achow101-lists at achow101.com> writes:\n> Hi Rusty,\n>\n> On 1/6/21 6:26 PM, Rusty Russell wrote:\n>> Hi Andrew et al,\n>>\n>>          Very excited to see this progress; thanks for doing all the\n>> work!  Sorry for the delayed feedback, I didn't get to this before the\n>> break.\n>>\n>>> Additionally, I would like to add a new global field:\n>>> * PSBT_GLOBAL_UNDER_CONSTRUCTION = 0x05\n>>>   \u00a0 * Key: empty\n>>>   \u00a0 * Value: A single byte as a boolean. 0 for False, 1 for True. All\n>>> other values ore prohibited. Must be omitted for PSBTv0, may be omitted\n>>> in PSBTv2.\n>>>\n>>> PSBT_GLOBAL_UNDER_CONSTRUCTION is used to signal whether inputs and\n>>> outputs can be added to the PSBT. This flag may be set to True when\n>>> inputs and outputs are being updated, signed, and finalized. However\n>>> care must be taken when there are existing signatures. If this field is\n>>> omitted or set to False, no further inputs and outputs may be added to\n>>> the PSBT.\n>> I wonder if this can be flagged simply by omitting the (AFAICT\n>> redundant) PSBT_GLOBAL_INPUT_COUNT and PSBT_GLOBAL_OUTPUT_COUNT?  What\n>> are the purposes of those fields?\n> The purpose of those fields is to know how many input and output maps \n> there are. Without PSBT_GLOBAL_UNSIGNED_TX, there is no way to determine \n> whether a map is an input map or an output map. So the counts are there \n> to allow that.\n\nAh, yeah, you need at least the number of input maps :(\n\nIt's generally preferable to have sections be self-describing;\ninternally if you have a function which takes all the input maps you\nshould be able to trivially tell if you're handed the output maps by\nmistake.  Similarly, it would have been nice to have an input map be a\ndistinctly marked type from global or output maps.\n\nNonetheless, that's a bigger change.  You could just require a double-00\nterminator between the global, input and output sections though.\n\n>> For our uses, there would be no signatures at this stage; it's simply a\n>> subdivision of the Creator role.  This role would be terminated by\n>> removing the under-construction marker.  For this, it could be clear\n>> that such an under-construction PSBT SHOULD NOT be signed.\n>\n> There are some protocols where signed inputs are added to transactions.\n\nSure, but you can't solve every problem.  We've now created the\npossibility that a PSBT is \"under construction\" but can't be modified,\n*and* a very invasive requirement to determine that.\n\nI disagree with Andrew's goal here:\n\n>   1. PSBT provides no way to modify the set of inputs or outputs after the\n>      Creator role is done.\n\nIt's simpler if, \"the under-construction PSBT can be used within the\nCreator role, which can now have sub-roles\".\n\nIf you really want to allow this (and I think we need to explore\nconcrete examples to justify this complexity!), better to add data to\nPSBT_GLOBAL_UNDER_CONSTRUCTION:\n1. a flag to indicate whether inputs are modifiable.\n2. a flag to indicate whether outputs are modifiable.\n3. a bitmap of what inputs are SIGHASH_SINGLE.\n\nIf you add a signature which is not SIGHASH_NONE, you clear the \"outputs\nmodifiable\" flag.  If you add a signature which is not\nSIGHASH_ANYONECANPAY, you clear the \"inputs modifiable\" flag.  If you\nclear both flags, you remove the PSBT_GLOBAL_UNDER_CONSTRUCTION\naltogether.  You similarly set the bitmap depending on whether all sigs\nare SIGHASH_SINGLE.\n\nCheers,\nRusty."
            },
            {
                "author": "Andrew Chow",
                "date": "2021-01-14T17:07:44",
                "message_text_only": "On 1/7/21 7:40 PM, Rusty Russell wrote:\n> Andrew Chow <achow101-lists at achow101.com> writes:\n>> Hi Rusty,\n>>\n>> On 1/6/21 6:26 PM, Rusty Russell wrote:\n>>> Hi Andrew et al,\n>>>\n>>>           Very excited to see this progress; thanks for doing all the\n>>> work!  Sorry for the delayed feedback, I didn't get to this before the\n>>> break.\n>>>\n>>>> Additionally, I would like to add a new global field:\n>>>> * PSBT_GLOBAL_UNDER_CONSTRUCTION = 0x05\n>>>>    \u00a0 * Key: empty\n>>>>    \u00a0 * Value: A single byte as a boolean. 0 for False, 1 for True. All\n>>>> other values ore prohibited. Must be omitted for PSBTv0, may be omitted\n>>>> in PSBTv2.\n>>>>\n>>>> PSBT_GLOBAL_UNDER_CONSTRUCTION is used to signal whether inputs and\n>>>> outputs can be added to the PSBT. This flag may be set to True when\n>>>> inputs and outputs are being updated, signed, and finalized. However\n>>>> care must be taken when there are existing signatures. If this field is\n>>>> omitted or set to False, no further inputs and outputs may be added to\n>>>> the PSBT.\n>>> I wonder if this can be flagged simply by omitting the (AFAICT\n>>> redundant) PSBT_GLOBAL_INPUT_COUNT and PSBT_GLOBAL_OUTPUT_COUNT?  What\n>>> are the purposes of those fields?\n>> The purpose of those fields is to know how many input and output maps\n>> there are. Without PSBT_GLOBAL_UNSIGNED_TX, there is no way to determine\n>> whether a map is an input map or an output map. So the counts are there\n>> to allow that.\n> Ah, yeah, you need at least the number of input maps :(\n>\n> It's generally preferable to have sections be self-describing;\n> internally if you have a function which takes all the input maps you\n> should be able to trivially tell if you're handed the output maps by\n> mistake.  Similarly, it would have been nice to have an input map be a\n> distinctly marked type from global or output maps.\n>\n> Nonetheless, that's a bigger change.  You could just require a double-00\n> terminator between the global, input and output sections though.\nChanging that is a bigger change and I'd rather keep this as minimal as \npossible. Having only new fields is simpler.\n\n>>> For our uses, there would be no signatures at this stage; it's simply a\n>>> subdivision of the Creator role.  This role would be terminated by\n>>> removing the under-construction marker.  For this, it could be clear\n>>> that such an under-construction PSBT SHOULD NOT be signed.\n>> There are some protocols where signed inputs are added to transactions.\n> Sure, but you can't solve every problem.  We've now created the\n> possibility that a PSBT is \"under construction\" but can't be modified,\n> *and* a very invasive requirement to determine that.\n>\n> I disagree with Andrew's goal here:\n>\n>>    1. PSBT provides no way to modify the set of inputs or outputs after the\n>>       Creator role is done.\n> It's simpler if, \"the under-construction PSBT can be used within the\n> Creator role, which can now have sub-roles\".\n>\n> If you really want to allow this (and I think we need to explore\n> concrete examples to justify this complexity!), better to add data to\n> PSBT_GLOBAL_UNDER_CONSTRUCTION:\n> 1. a flag to indicate whether inputs are modifiable.\n> 2. a flag to indicate whether outputs are modifiable.\n> 3. a bitmap of what inputs are SIGHASH_SINGLE.\n>\n> If you add a signature which is not SIGHASH_NONE, you clear the \"outputs\n> modifiable\" flag.  If you add a signature which is not\n> SIGHASH_ANYONECANPAY, you clear the \"inputs modifiable\" flag.  If you\n> clear both flags, you remove the PSBT_GLOBAL_UNDER_CONSTRUCTION\n> altogether.  You similarly set the bitmap depending on whether all sigs\n> are SIGHASH_SINGLE.\nI think we do need to support adding signed inputs and adding inputs to \nsigned transactions. Someone had asked for this feature before. \nAdditionally Nicolas Dorier informed me that his NTumbleBit project does \nthose things.\n\nIn that case, I will include your suggestions for \nPSBT_GLOBAL_UNDER_CONSTRUCTION in the BIP.\n\n\nAndrew Chow\n>\n> Cheers,\n> Rusty."
            },
            {
                "author": "Andrew Chow",
                "date": "2021-01-15T17:28:09",
                "message_text_only": "Hi All,\n\nI've made some reorganization changes to the way that new PSBT versions \nshould be handled in BIP 174 (see \nhttps://github.com/bitcoin/bips/pull/1055) so PSBTv2 will be submitted \nas a separate BIP. The full document can be read at \nhttps://github.com/achow101/bips/blob/psbt2/bip-psbt2.mediawiki and I \nhave also included it in this email.\n\nI've included Rusty's suggestion for PSBT_GLOBAL_UNDER_CONSTRUCTION and \nmade a few modifications. First, the field will be named \nPSBT_GLOBAL_TX_MODIFIABLE and only include the inputs modifiable and \noutputs modifiable flags. The SIGHASH_SINGLE bitmap will be included as \na separate field PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS. This allows most \nPSBTs to not have to carry around a useless bitmap.\n\nAndrew\n\n***\n\n<pre>\n \u00a0 BIP: PSBTv2\n \u00a0 Layer: Applications\n \u00a0 Title: PSBT Version 2\n \u00a0 Author: Andrew Chow <achow101 at gmail.com>\n \u00a0 Comments-Summary: No comments yet.\n \u00a0 Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-PSBT2\n \u00a0 Status: Draft\n \u00a0 Type: Standards Track\n \u00a0 Created: 2021-01-14\n \u00a0 License: BSD-2-Clause\n</pre>\n\n==Introduction==\n\n===Abstract===\n\nThis document proposes a second version of the Partially Signed Bitcoin \nTransaction format\ndescribed in BIP 174 which allows for inputs and outputs to be added to \nthe PSBT after creation.\n\n===Copyright===\n\nThis BIP is licensed under the 2-clause BSD license.\n\n===Motivation===\n\nPartially Signed Bitcoin Transaction Version 0 as described in BIP 174 \nis unable to have new\ninputs and outputs be added to the transaction. The fixed global \nunsigned transaction\ncannot be changed which prevents any additional inputs or outputs to be \nadded.\nPSBT Version 2 is intended to rectify this problem.\n\nAn additional benficial side effect is that all information for a given \ninput or output will be\nprovided by its <tt><input-map></tt> or <tt><output-map></tt>. With \nVersion 0, to retrieve\nall of the information for an input or output, data would need to be \nfound in two locations:\nthe <tt><input-map></tt>/<tt><output-map></tt> and the global unsigned \ntransaction. PSBT\nVersion 2 now moves all related information to one place.\n\n==Specification==\n\nPSBT Version 2 (PSBTv2) only specifies new fields and field \ninclusion/exclusion requirements.\n\n<tt>PSBT_GLOBAL_UNSIGNED_TX</tt> must be excluded in PSBTv2.\n<tt>PSBT_GLOBAL_VERSION</tt> must be included in PSBTv2 and set to \nversion number 2<ref>'''What happened to version number 1?'''\nVersion number 1 is skipped because PSBT Version 0 has been colloquially \nreferred to as version 1. Originally this BIP was to be\nversion 1, but because it has been colloquially referred to as version 2 \nduring its design phrase, it was decided to change the\nversion number to 2 so that there would not be any confusion</ref>.\n\nThe new global types for PSBT Version 2 are as follows:\n\n{|\n! Name\n! <tt><keytype></tt>\n! <tt><keydata></tt>\n! <tt><keydata></tt> Description\n! <tt><valuedata></tt>\n! <tt><valuedata></tt> Description\n! Versions Requiring Inclusion\n! Versions Requiring Exclusion\n! Versions Allowing Inclusion\n|-\n| Transaction Version\n| <tt>PSBT_GLOBAL_TX_VERSION = 0x02</tt>\n| None\n| No key data\n| <tt><32-bit uint></tt>\n| The 32-bit little endian signed integer representing the version \nnumber of the transaction being created. Note that this is not the same \nas the PSBT version number specified by the PSBT_GLOBAL_VERSION field.\n| 2\n| 0\n| 2\n|-\n| Fallback Locktime\n| <tt>PSBT_GLOBAL_FALLBACK_LOCKTIME = 0x03</tt>\n| None\n| No key data\n| <tt><32-bit uint></tt>\n| The 32-bit little endian unsigned integer representing the transaction \nlocktime to use if no inputs specify a required locktime.\n|\n| 0\n| 2\n|-\n| Input Count\n| <tt>PSBT_GLOBAL_INPUT_COUNT = 0x04</tt>\n| None\n| No key data\n| <tt><compact size uint></tt>\n| Compact size unsigned integer representing the number of inputs in \nthis PSBT.\n| 2\n| 0\n| 2\n|-\n| Output Count\n| <tt>PSBT_GLOBAL_OUTPUT_COUNT = 0x05</tt>\n| None\n| No key data\n| <tt><compact size uint></tt>\n| Compact size unsigned integer representing the number of outputs in \nthis PSBT.\n| 2\n| 0\n| 2\n|-\n| Transaction Modifiable Flags\n| <tt>PSBT_GLOBAL_TX_MODIFIABLE = 0x06</tt>\n| None\n| No key data\n| <tt><single byte boolean> <single byte boolean></tt>\n| A single byte boolean (0 for False, 1 for True) representing whether \ninputs can be modified, referred to as the Inputs Modifiable Flag. This \nis followed by a single byte boolean representing whether outputs can be \nmodified, referred to as the Outputs Modifiable Flag.\n|\n| 0\n| 2\n|-\n| SIGHASH_SINGLE Inputs\n| <tt>PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS = 0x07</tt>\n| None\n| No key data\n| <tt><bit vector></tt>\n| A bit vector representing which input indexes use SIGHASH_SINGLE. If \nthe bit for an index is set to 1, then the input and output pair at that \nindex are tied together with SIGHASH_SINGLE and must be moved together.\n|\n| 0\n| 2\n|}\n\nThe new per-input types for PSBT Version 2 are defined as follows:\n\n{|\n! Name\n! <tt><keytype></tt>\n! <tt><keydata></tt>\n! <tt><keydata></tt> Description\n! <tt><valuedata></tt>\n! <tt><valuedata></tt> Description\n! Versions Requiring Inclusion\n! Versions Requiring Exclusion\n! Versions Allowing Inclusion\n|-\n| Previous TXID\n| <tt>PSBT_IN_PREVIOUS_TXID = 0x0e</tt>\n| None\n| No key data\n| <tt><txid></tt>\n| 32 byte txid of the previous transaction whose output at \nPSBT_IN_OUTPUT_INDEX is being spent.\n| 2\n| 0\n| 2\n|-\n| Spent Output Index\n| <tt>PSBT_IN_OUTPUT_INDEX = 0x0f</tt>\n| None\n| No key data\n| <tt><32-bit uint></tt>\n| 32 bit little endian integer representing the index of the output \nbeing spent in the transaction with the txid of PSBT_IN_PREVIOUS_TXID.\n| 2\n| 0\n| 2\n|-\n| Sequence Number\n| <tt>PSBT_IN_SEQUENCE = 0x10</tt>\n| None\n| No key data\n| <tt><32-bit uint></tt>\n| The 32 bit unsigned little endian integer for the sequence number of \nthis input. If omitted, the sequence number is assumed to be the final \nsequence number (0xffffffff).\n|\n| 0\n| 2\n|-\n| Required Time-based Locktime\n| <tt>PSBT_IN_REQUIRED_TIME_LOCKTIME = 0x11</tt>\n| None\n| No key data\n| <tt><32-bit uint></tt>\n| 32 bit unsigned little endian integer greater than or equal to \n500000000 representing the minimum Unix timestamp that this input \nrequires to be set as the transaction's lock time.\n|\n| 0\n| 2\n|-\n| Required Height-based Locktime\n| <tt>PSBT_IN_REQUIRED_HEIGHT_LOCKTIME = 0x12</tt>\n| None\n| No key data\n| <tt><32-bit uiht></tt>\n| 32 bit unsigned little endian integer less than 500000000 representing \nthe minimum block height that this input requires to be set as the \ntransaction's lock time.\n|\n| 0\n| 2\n|}\n\nThe new per-output types for PSBT Version 2 are defined as follows:\n\n{|\n! Name\n! <tt><keytype></tt>\n! <tt><keydata></tt>\n! <tt><keydata></tt> Description\n! <tt><valuedata></tt>\n! <tt><valuedata></tt> Description\n! Versions Requiring Inclusion\n! Versions Requiring Exclusion\n! Versions Allowing Inclusion\n|-\n| Output Amount\n| <tt>PSBT_OUT_AMOUNT = 0x03</tt>\n| None\n| No key data\n| <tt><64-bit uint></tt>\n| 64 bit signed little endian integer representing the output's amount \nin satoshis.\n| 2\n| 0\n| 2\n|-\n| Output Script\n| <tt>PSBT_OUT_SCRIPT = 0x03</tt>\n| None\n| No key data\n| <tt><script></tt>\n| The script for this output, also known as the scriptPubKey. Must be \nomitted in PSBTv0. Must be provided in PSBTv2.\n| 2\n| 0\n| 2\n|}\n\n===Determining Lock Time===\n\nThe nLockTime field of a transaction is determined by inspecting the \nPSBT_GLOBAL_PREFERRED_LOCKTIME and each input's \nPSBT_IN_REQUIRED_TIME_LOCKTIME and PSBT_IN_REQUIRED_HEIGHT_LOCKTIME fields.\nIf none of the inputs have a PSBT_IN_REQUIRED_TIME_LOCKTIME and \nPSBT_IN_REQUIRED_HEIGHT_LOCKTIME, then PSBT_GLOBAL_PREFERRED_LOCKTIME \nmust be used.\nIf PSBT_GLOBAL_PREFERRED_LOCKTIME is not provided, then it is assumed to \nbe 0.\n\nIf one or more inuts have a PSBT_IN_REQUIRED_TIME_LOCKTIME or \nPSBT_IN_REQUIRED_HEIGHT_LOCKTIME, then the field chosen is the one which \nis supported by all of the inputs.\nThis can be determined by looking at all of the inputs which specify a \nlocktime in either of those fields, and choosing the field which is \npresent in all of those inputs.\nInputs not specifying a lock time field can take both types of lock \ntimes, as can those that specify both.\nThe lock time chosen is then the maximum value of the chosen type of \nlock time.\n\n===Unique Identification===\n\nPSBTv2s can be uniquely identified by constructing an unsigned \ntransaction given the information provided in the PSBT and computing the \ntransaction ID of that transaction.\nSince PSBT_IN_SEQUENCE can be changed by Updaters and Combiners, the \nsequence number in this unsigned transaction must be set to 0 (not \nfinal, nor the sequence in PSBT_IN_SEQUENCE).\nThe lock time in this unsigned transaction must be computed as described \npreviously.\n\n==Roles==\n\nPSBTv2 introduces new roles and modifies some existing roles.\n\n===Creator===\n\nIn PSBTv2, the Creator initializes the PSBT with 0 inputs and 0 outputs.\nThe PSBT version number is set to 2. The transaction version number must \nbe set to at least 2. <ref>'''Why does the transaction version number \nneed to be at least 2?''' The transaction version number is part of the \nvalidation rules for some features such as OP_CHECKSEQUENCEVERIFY. Since \nit is backwards compatible, and there are other ways to disable those \nfeatures (e.g. through sequence numbers), it is easier to require \ntransactions be able to support these features than to try to negotiate \nthe transaction version number.</ref>\nThe Creator should also PSBT_GLOBAL_PREFERRED_LOCKTIME.\nIf the Creator is not also a Constructor and will be giving the PSBT to \nothers to add inputs and outputs, the PSBT_GLOBAL_TX_MODIFIABLE field \nmust be present and and the Inputs Modifiable and Outputs Modifiable \nflags set appropriately.\nIf the Creator is a Constructor and no inputs and outputs will be added \nby other entities, PSBT_GLOBAL_TX_MODIFIABLE may be omitted.\n\n===Constructor===\n\nThis Constructor is only present for PSBTv2.\nOnce a Creator initializes the PSBT, a constructor will add inputs and \noutputs.\nBefore any input or output may be added, the constructor must check the \nPSBT_GLOBAL_TX_MODIFIABLE field.\nInputs may only be added if the Inputs Modifiable flag (first boolean) \nis True.\nOutputs may only be added if the Outputs Modifiable flag (second \nboolean) is True.\nIf PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS is present and its bitvector \nindicates any inputs use SIGHASH_SINGLE, then the same number of inputs \nand outputs must be added before that input and its corresponding outputs.\n\nWhen an input or output is added, the corresponding \nPSBT_GLOBAL_INPUT_COUNT or PSBT_GLOBAL_OUTPUT_COUNT must be incremeted \nto reflect the number of inputs and outputs in the PSBT.\nWhen an input is added, it must have PSBT_IN_PREVIOUS_TXID and \nPSBT_IN_OUTPUT_INDEX set.\nWhen an output is added, it must have PSBT_OUT_VALUE and \nPSBT_OUT_OUTPUT_SCRIPT set.\nIf the input has a required timelock, Constructors must set the \nrequisite timelock field.\nIf the input has a required time based timelock, then \nPSBT_IN_REQUIRED_TIME_TIMELOCK.\nIf the input has a required height based timelock, then \nPSBT_IN_REQUIRED_HEIGHT_TIMELOCK.\nIf an input has both types of timelocks, then both may be set.\nIn some cases, an input that can allow both types, but a particular \nbranch supporting only one type of timelock will be taken, then the type \nof timelock that will be used can be the only one set.\n\nWhen adding a new input, the new input must be compatible with the \ntimelock types of all existing inputs.\nSince Bitcoin requires that a transaction uses only one type of \ntimelock, all of the inputs must be able to support the same type of \ntimelock.\nIf the type of timelock is incompatible with the timelock type of the \nother inputs, then the input must not be added.\n\nSince a Constructor may be adding inputs to a PSBT that has inputs with \nexisting signatures, the Constructor must be careful to not invalidate \nany existing signatures.\nThe PSBT_GLOBAL_TX_MODIFIABLE and PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS \nfields caches this information so that constructors do not need to \ninspect every input.\nIf the PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS bit vector indicates an input \nindex uses SIGHASH_SINGLE, the same number of inputs and outputs must be \nadded before that input and its corresponding output.\nWhen an input is added, the bit vector, if present, must be expanded to \ninclude a bit for this input in the correct position.\nWhen there are signatures, in addition to respecting the lock time rules \ndescribed previously, the newly added inputs must not change the lock \ntime used by the transaction.\nIt cannot cause the lock time to change as that will invalidate all \nsignatures since they all include the lock time regardless of the \nsighash type.\n\nA Constructor may choose to declare that no further inputs and outputs \ncan be added to the transaction by setting the booleans in \nPSBT_GLOBAL_TX_MODIFIABLE to False or by removing this field entirely.\n\nA single entity is likely to be both a Creator and Constructor.\n\n===Updater===\n\nFor PSBTv2, an Updater can set the sequence number.\n\n===Signer===\n\nFor PSBTv2s, a signer must update the PSBT_GLOBAL_TX_MODIFIABLE and \nPSBT_GLOBAL_SIGHASH_SINGLE_INPUTS fields after signing inputs so\nthat these fields accurately reflects the state of the PSBT.\nIf the Signer added a signature that does not use SIGHASH_ANYONECANPAY, \nthe Input Modifiable flag must be set to False.\nIf the Signer added a signature that does not use SIGHASH_NONE, the \nOutputs Modifiable flag must be set to False.\nIf the Signer added a signature that uses SIGHASH_SINGLE, a \nPSBT_GLOBAL_SIGHASH_SINGLE_INPUTS field must be added if not present, \nand the corresponding bit in its bit vector must be set to 1.\n\n===Transaction Extractor===\n\nFor PSBTv2s, the transaction is constructed using the PSBTv2 fields.\nThe lock time for this transaction is determined as described in the \nDetermining Lock Time section.\nThe Extractor should produce a fully valid, network serialized \ntransaction if all inputs are complete.\n\n==Compatibility==\n\nPSBTv2 shares the same gemeric format as PSBTv0 as defined in BIP 174. \nParsers for PSBTv0 should\nbe able to deserialize PSBTv2 with only changes to support the new fields.\n\nHowever PSBTv2 is incompatible with PSBTv0, and vice versa due to the \nuse of the PSBT_GLOBAL_VERSION.\nThis incompatibility is intentional so that PSBT_GLOBAL_UNSIGNED_TX \ncould be removed in PSBTv2.\nHowever it is possible to convert a PSBTv2 to a PSBTv0 by creating an \nunsigned\ntransaction from the PSBTv2 fields.\n\n==Test Vectors==\n\nTBD\n\n==Rationale==\n\n<references/>\n\n==Reference implementation==\n\nThe reference implementation of the PSBT format is available at \nhttps://github.com/achow101/bitcoin/tree/psbt2.\n\n\nOn 12/23/20 4:32 PM, Andrew Chow wrote:\n> Hi All,\n>\n> The full modified BIP can be read at\n> https://github.com/achow101/bips/blob/psbt2/bip-0174.mediawiki.\n>\n> I will open a PR to the BIPs repo soon after further discussion on this.\n>\n>\n> Andrew\n>\n> On 12/22/20 3:12 PM, Andrew Chow wrote:\n>> Hi All,\n>>\n>> I have some updates on this after speaking with some people off-list.\n>>\n>> Firstly, the version number will be set to 2. In most discussions, this\n>> proposal was being referred to as PSBT version 2, so it'll be easier and\n>> clearer to set the version number to 2.\n>>\n>> For lock times, instead of a single\u00a0 PSBT_IN_REQUIRED_LOCKTIME field,\n>> there will be 2 of them, one for a time based lock time, and the other\n>> for height based. These will be:\n>> * PSBT_IN_REQUIRED_TIME_LOCKTIME = 0x10\n>>    \u00a0 * Key: empty\n>>    \u00a0 * Value: 32 bit unsigned little endian integer greater than or equal\n>> to 500000000 representing the minimum Unix timestamp that this input\n>> requires to be set as the transaction's lock time. Must be omitted in\n>> PSBTv0, and may be omitted in PSBTv2\n>> * PSBT_IN_REQUIRED_HEIGHT_LOCKTIME = 0x11\n>>    \u00a0 * Key: empty\n>>    \u00a0 * Value: 32 bit unsigned little endian integer less than 500000000\n>> representing the minimum block height that this input requires to be set\n>> as the transaction's lock time. Must be omitted in PSBTv0, and may be\n>> omitted in PSBTv2.\n>>\n>> Having two lock time fields is necessary due to the behavior where all\n>> inputs must use the same type of lock time (height or time). Thus if an\n>> input requires a particular type of lock time, it must set the requisite\n>> field. Any new inputs being added must be able to accommodate all\n>> existing inputs' lock time type. This means they either must not have a\n>> lock time specified (i.e. no OP_CLTV involved), or have branches that\n>> allow the acceptance of either type. If an input has a lock time type\n>> that is incompatible with the rest of the transaction, it must not be added.\n>>\n>> PSBT_GLOBAL_PREFERRED_LOCKTIME is changed to purely be the fallback\n>> option if no input lock time fields are present. If there are input lock\n>> times, all lock time calculations must ignore it.\n>>\n>> Any role which does lock time calculation will first check if there are\n>> input lock time fields. If there are not, it must then check for a\n>> PSBT_GLOBAL_PREFERRED_LOCKTIME. If this field exists, its value is the\n>> transaction's lock time. If it does not, the lock time is 0. If there\n>> are input lock time fields, it must choose the type which does not\n>> invalidate any inputs. The lock time is then determined to be the\n>> maximum value of all of the lock time fields for the chosen type.\n>>\n>>\n>> Additionally, I would like to add a new global field:\n>> * PSBT_GLOBAL_UNDER_CONSTRUCTION = 0x05\n>>    \u00a0 * Key: empty\n>>    \u00a0 * Value: A single byte as a boolean. 0 for False, 1 for True. All\n>> other values ore prohibited. Must be omitted for PSBTv0, may be omitted\n>> in PSBTv2.\n>>\n>> PSBT_GLOBAL_UNDER_CONSTRUCTION is used to signal whether inputs and\n>> outputs can be added to the PSBT. This flag may be set to True when\n>> inputs and outputs are being updated, signed, and finalized. However\n>> care must be taken when there are existing signatures. If this field is\n>> omitted or set to False, no further inputs and outputs may be added to\n>> the PSBT.\n>>\n>> Several rules must be followed to ensure that adding additional inputs\n>> and outputs will not invalidate existing signatures. First, an input or\n>> output adder must check for any existing signatures in all of the other\n>> inputs. If there are none, the input or output may be added in any\n>> position. If there are one or more signatures, each signature's sighash\n>> type must be examined. Inputs may only be added if all existing\n>> signatures use SIGHASH_ANYONECANPAY. Outputs may only be added if all\n>> existing signatures use SIGHASH_NONE. If an input has a signature using\n>> SIGHASH_SINGLE, the same number of inputs and outputs must be added\n>> before that input and it's corresponding output. For all other sighash\n>> types (i.e. SIGHASH_ALL and any future sighash types), no inputs or\n>> outputs may be added to the PSBT. Specific exceptions can be made in the\n>> future for additional sighash types.\n>>\n>> Furthermore, these newly added inputs must follow additional lock time\n>> rules. Because all signatures, regardless of sighash type, sign the\n>> transaction lock time, newly added inputs when there are existing\n>> signatures must have the same type of lock time used in the transaction,\n>> and must be less than or equal to the transaction lock time. It must not\n>> cause the transaction lock time to change, otherwise the signatures will\n>> be invalidated.\n>>\n>>\n>> Lastly, to uniquely identify transactions for combiners, a txid can be\n>> computed from the information present in the PSBT. Internally, combiners\n>> can create an unsigned transaction given the transaction version, the\n>> input prevouts, the outputs, and the computed locktime. This can then be\n>> used to calculate a txid and thus used as a way to identify PSBTs.\n>> Combiners will need to do this for all version 2 PSBTs in order to avoid\n>> combining distinct transactions.\n>>\n>>\n>> Andrew Chow\n>>\n>> On 12/9/20 5:25 PM, Andrew Chow wrote:\n>>> Hi All,\n>>>\n>>> I would like to propose a new PSBT version that addresses a few\n>>> deficiencies in the current PSBT v0. As this will be backwards\n>>> incompatible, a new PSBT version will be used, v1.\n>>>\n>>> The primary change is to truly have all input and output data for each\n>>> in their respective maps. Instead of having to parse an unsigned\n>>> transaction and lookup some data from there, and other data from the\n>>> correct map, all of the data for an input will be contained in its map.\n>>> Doing so also disallows PSBT_GLOBAL_UNSIGNED_TX in this new version.\n>>> Thus I propose that the following fields be added:\n>>>\n>>> Global:\n>>> * PSBT_GLOBAL_TX_VERSION = 0x02\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 32-bit little endian unsigned integer for the transaction\n>>> version number. Must be provided in PSBT v1 and omitted in v0.\n>>> * PSBT_GLOBAL_PREFERRED_LOCKTIME = 0x03\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 32 bit little endian unsigned integer for the preferred\n>>> transaction lock time. Must be omitted in PSBT v0. May be provided in\n>>> PSBT v1, assumed to be 0 if not provided.\n>>> * PSBT_GLOBAL_INPUT_COUNT = 0x04\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: Compact size unsigned integer. Number of inputs in this\n>>> PSBT. Must be provided in PSBT v1 and omitted in v0.\n>>> * PSBT_GLOBAL_OUTPUT_COUNT = 0x05\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: Compact size unsigned integer. Number of outputs in this\n>>> PSBT. Must be provided in PSBT v1 and omitted in v0.\n>>>\n>>> Input:\n>>> * PSBT_IN_PREVIOUS_TXID = 0x0e\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 32 byte txid of the previous transaction whose output at\n>>> PSBT_IN_OUTPUT_INDEX is being spent. Must be provided in PSBT v1 and\n>>> omitted in v0.\n>>> * PSBT_IN_OUTPUT_INDEX = 0x0f\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 32 bit little endian integer for the index of the output\n>>> being spent. Must be provided in PSBT v1 and omitted in v0.\n>>> * PSBT_IN_SEQUENCE = 0x0f\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 32 bit unsigned little endian integer for the sequence\n>>> number. Must be omitted in PSBT v0. May be provided in PSBT v1 assumed\n>>> to be max sequence (0xffffffff) if not provided.\n>>> * PSBT_IN_REQUIRED_LOCKTIME = 0x10\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 32 bit unsigned little endian integer for the lock time that\n>>> this input requires. Must be omitted in PSBT v0. May be provided in PSBT\n>>> v1, assumed to be 0 if not provided.\n>>>\n>>> Output:\n>>> * PSBT_OUT_VALUE = 0x03\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 64-bit unsigned little endian integer for the output's\n>>> amount in satoshis. Must be provided in PSBT v1 and omitted in v0.\n>>> * PSBT_OUT_OUTPUT_SCRIPT = 0x04\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: The script for this output. Otherwise known as the\n>>> scriptPubKey. Must be provided in PSBT v1 and omitted in v0.\n>>>\n>>> This change allows for PSBT to be used in the construction of\n>>> transactions. With these new fields, inputs and outputs can be added as\n>>> needed. One caveat is that there is no longer a unique transaction\n>>> identifier so more care must be taken when combining PSBTs.\n>>> Additionally, adding new inputs and outputs must be done such that\n>>> signatures are not invalidated. This may be harder to specify.\n>>>\n>>> An important thing to note in this proposal are the fields\n>>> PSBT_GLOBAL_PREFERRED_LOCKTIME and PSBT_IN_REQUIRED_LOCKTIME. A Bitcoin\n>>> transaction only has a single locktime yet a PSBT may have multiple\n>>> locktimes. To choose the locktime for the transaction, finalizers must\n>>> choose the maximum of all of the *_LOCKTIME fields.\n>>> PSBT_IN_REQUIRED_LOCKTIME is added because some inputs, such as those\n>>> involving OP_CHECKLOCKTIMEVERIFY, require a specific minimum locktime to\n>>> be set. This field allows finalizers to choose a locktime that is high\n>>> enough for all inputs without needing to understand the scripts\n>>> involved. The PSBT_GLOBAL_PREFERRED_LOCKTIME is the locktime to use if\n>>> no inputs require a particular locktime.\n>>>\n>>> As these changes disallow the PSBT_GLOBAL_UNSIGNED_TX field, PSBT v1\n>>> needs the version number bump to enforce backwards incompatibility.\n>>> However once the inputs and outputs of a PSBT are decided, a PSBT could\n>>> be \"downgraded\" back to v0 by creating the unsigned transaction from the\n>>> above fields, and then dropping these new fields.\n>>>\n>>> If the list finds that these changes are reasonable, I will write a PR\n>>> to modify BIP 174 to incorporate them.\n>>>\n>>> Thanks,\n>>> Andrew Chow"
            },
            {
                "author": "Andrew Chow",
                "date": "2021-01-21T19:50:45",
                "message_text_only": "While working on the reference implementation for this, it occurred to \nme that the Inputs Modifiable flag needs to be more than just a boolean.\n\nIf there are existing signatures in the PSBT, then any added inputs \ncannot change the transaction's locktime as all signatures, regardless \nof sighash type, commit to the locktime. Additionally if an input with a \nsignature is being added, it also needs to set the locktime for the \ntransaction.\n\nIt also seems like the SIGHASH_SINGLE bitmap is unnecessary. Signers can \ninstead iterate all inputs, check for existing signatures, and extract \nthe sighash byte from those signatures to determine whether any are \nSIGHASH_SINGLE. This bitmap doesn't seem to provide much benefit and \nalso causes headaches for implementation. So I've decided to remove it.\n\nBut it is still useful to know that there are SIGHASH_SINGLE inputs and \nthat iteration of the inputs vector will be necessary. It is also useful \nto know that there are already some signatures in the transaction so the \nlocktime must be preserved. Thus I would like to change \nPSBT_GLOBAL_TX_MODIFIABLE to include those. I propose making \nPSBT_GLOBAL_TX_MODIFIABLE an 8 bit unsigned little endian integer that \nis treated as a bit field. If bit 0 is set, inputs may be added. This \nwill be the Inputs Modifiable flag. If bit 1 is set, outputs may be \nadded. This will be the Outputs Modifiable flag. If bit 2 is set, the \ntransaction contains signatures and locktime must be preserved. This \nwill be the Has Signatures flag. If bit 3 is set, the transaction \ncontains SIGHASH_SINGLE inputs and their index pairings must be \npreserved. This will be the Has SIGHASH_SINGLE flag.\n\nChanging PSBT_GLOBAL_TX_MODIFIABLE to a bitfield like this allows us to \ninclude more conditions that need to be considered when adding inputs \nand outputs. I think these are all of the conditions for now, but with 8 \nbits, there is still some space for additional conditions in the future. \nPerhaps it should be changed to be larger if we think there will be more \nconditions, but I think that is unlikely.\n\n\nAndrew\n\nOn 1/15/21 12:28 PM, Andrew Chow wrote:\n> Hi All,\n>\n> I've made some reorganization changes to the way that new PSBT versions\n> should be handled in BIP 174 (see\n> https://github.com/bitcoin/bips/pull/1055) so PSBTv2 will be submitted\n> as a separate BIP. The full document can be read at\n> https://github.com/achow101/bips/blob/psbt2/bip-psbt2.mediawiki and I\n> have also included it in this email.\n>\n> I've included Rusty's suggestion for PSBT_GLOBAL_UNDER_CONSTRUCTION and\n> made a few modifications. First, the field will be named\n> PSBT_GLOBAL_TX_MODIFIABLE and only include the inputs modifiable and\n> outputs modifiable flags. The SIGHASH_SINGLE bitmap will be included as\n> a separate field PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS. This allows most\n> PSBTs to not have to carry around a useless bitmap.\n>\n> Andrew\n>\n> ***\n>\n> <pre>\n>   \u00a0 BIP: PSBTv2\n>   \u00a0 Layer: Applications\n>   \u00a0 Title: PSBT Version 2\n>   \u00a0 Author: Andrew Chow <achow101 at gmail.com>\n>   \u00a0 Comments-Summary: No comments yet.\n>   \u00a0 Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-PSBT2\n>   \u00a0 Status: Draft\n>   \u00a0 Type: Standards Track\n>   \u00a0 Created: 2021-01-14\n>   \u00a0 License: BSD-2-Clause\n> </pre>\n>\n> ==Introduction==\n>\n> ===Abstract===\n>\n> This document proposes a second version of the Partially Signed Bitcoin\n> Transaction format\n> described in BIP 174 which allows for inputs and outputs to be added to\n> the PSBT after creation.\n>\n> ===Copyright===\n>\n> This BIP is licensed under the 2-clause BSD license.\n>\n> ===Motivation===\n>\n> Partially Signed Bitcoin Transaction Version 0 as described in BIP 174\n> is unable to have new\n> inputs and outputs be added to the transaction. The fixed global\n> unsigned transaction\n> cannot be changed which prevents any additional inputs or outputs to be\n> added.\n> PSBT Version 2 is intended to rectify this problem.\n>\n> An additional benficial side effect is that all information for a given\n> input or output will be\n> provided by its <tt><input-map></tt> or <tt><output-map></tt>. With\n> Version 0, to retrieve\n> all of the information for an input or output, data would need to be\n> found in two locations:\n> the <tt><input-map></tt>/<tt><output-map></tt> and the global unsigned\n> transaction. PSBT\n> Version 2 now moves all related information to one place.\n>\n> ==Specification==\n>\n> PSBT Version 2 (PSBTv2) only specifies new fields and field\n> inclusion/exclusion requirements.\n>\n> <tt>PSBT_GLOBAL_UNSIGNED_TX</tt> must be excluded in PSBTv2.\n> <tt>PSBT_GLOBAL_VERSION</tt> must be included in PSBTv2 and set to\n> version number 2<ref>'''What happened to version number 1?'''\n> Version number 1 is skipped because PSBT Version 0 has been colloquially\n> referred to as version 1. Originally this BIP was to be\n> version 1, but because it has been colloquially referred to as version 2\n> during its design phrase, it was decided to change the\n> version number to 2 so that there would not be any confusion</ref>.\n>\n> The new global types for PSBT Version 2 are as follows:\n>\n> {|\n> ! Name\n> ! <tt><keytype></tt>\n> ! <tt><keydata></tt>\n> ! <tt><keydata></tt> Description\n> ! <tt><valuedata></tt>\n> ! <tt><valuedata></tt> Description\n> ! Versions Requiring Inclusion\n> ! Versions Requiring Exclusion\n> ! Versions Allowing Inclusion\n> |-\n> | Transaction Version\n> | <tt>PSBT_GLOBAL_TX_VERSION = 0x02</tt>\n> | None\n> | No key data\n> | <tt><32-bit uint></tt>\n> | The 32-bit little endian signed integer representing the version\n> number of the transaction being created. Note that this is not the same\n> as the PSBT version number specified by the PSBT_GLOBAL_VERSION field.\n> | 2\n> | 0\n> | 2\n> |-\n> | Fallback Locktime\n> | <tt>PSBT_GLOBAL_FALLBACK_LOCKTIME = 0x03</tt>\n> | None\n> | No key data\n> | <tt><32-bit uint></tt>\n> | The 32-bit little endian unsigned integer representing the transaction\n> locktime to use if no inputs specify a required locktime.\n> |\n> | 0\n> | 2\n> |-\n> | Input Count\n> | <tt>PSBT_GLOBAL_INPUT_COUNT = 0x04</tt>\n> | None\n> | No key data\n> | <tt><compact size uint></tt>\n> | Compact size unsigned integer representing the number of inputs in\n> this PSBT.\n> | 2\n> | 0\n> | 2\n> |-\n> | Output Count\n> | <tt>PSBT_GLOBAL_OUTPUT_COUNT = 0x05</tt>\n> | None\n> | No key data\n> | <tt><compact size uint></tt>\n> | Compact size unsigned integer representing the number of outputs in\n> this PSBT.\n> | 2\n> | 0\n> | 2\n> |-\n> | Transaction Modifiable Flags\n> | <tt>PSBT_GLOBAL_TX_MODIFIABLE = 0x06</tt>\n> | None\n> | No key data\n> | <tt><single byte boolean> <single byte boolean></tt>\n> | A single byte boolean (0 for False, 1 for True) representing whether\n> inputs can be modified, referred to as the Inputs Modifiable Flag. This\n> is followed by a single byte boolean representing whether outputs can be\n> modified, referred to as the Outputs Modifiable Flag.\n> |\n> | 0\n> | 2\n> |-\n> | SIGHASH_SINGLE Inputs\n> | <tt>PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS = 0x07</tt>\n> | None\n> | No key data\n> | <tt><bit vector></tt>\n> | A bit vector representing which input indexes use SIGHASH_SINGLE. If\n> the bit for an index is set to 1, then the input and output pair at that\n> index are tied together with SIGHASH_SINGLE and must be moved together.\n> |\n> | 0\n> | 2\n> |}\n>\n> The new per-input types for PSBT Version 2 are defined as follows:\n>\n> {|\n> ! Name\n> ! <tt><keytype></tt>\n> ! <tt><keydata></tt>\n> ! <tt><keydata></tt> Description\n> ! <tt><valuedata></tt>\n> ! <tt><valuedata></tt> Description\n> ! Versions Requiring Inclusion\n> ! Versions Requiring Exclusion\n> ! Versions Allowing Inclusion\n> |-\n> | Previous TXID\n> | <tt>PSBT_IN_PREVIOUS_TXID = 0x0e</tt>\n> | None\n> | No key data\n> | <tt><txid></tt>\n> | 32 byte txid of the previous transaction whose output at\n> PSBT_IN_OUTPUT_INDEX is being spent.\n> | 2\n> | 0\n> | 2\n> |-\n> | Spent Output Index\n> | <tt>PSBT_IN_OUTPUT_INDEX = 0x0f</tt>\n> | None\n> | No key data\n> | <tt><32-bit uint></tt>\n> | 32 bit little endian integer representing the index of the output\n> being spent in the transaction with the txid of PSBT_IN_PREVIOUS_TXID.\n> | 2\n> | 0\n> | 2\n> |-\n> | Sequence Number\n> | <tt>PSBT_IN_SEQUENCE = 0x10</tt>\n> | None\n> | No key data\n> | <tt><32-bit uint></tt>\n> | The 32 bit unsigned little endian integer for the sequence number of\n> this input. If omitted, the sequence number is assumed to be the final\n> sequence number (0xffffffff).\n> |\n> | 0\n> | 2\n> |-\n> | Required Time-based Locktime\n> | <tt>PSBT_IN_REQUIRED_TIME_LOCKTIME = 0x11</tt>\n> | None\n> | No key data\n> | <tt><32-bit uint></tt>\n> | 32 bit unsigned little endian integer greater than or equal to\n> 500000000 representing the minimum Unix timestamp that this input\n> requires to be set as the transaction's lock time.\n> |\n> | 0\n> | 2\n> |-\n> | Required Height-based Locktime\n> | <tt>PSBT_IN_REQUIRED_HEIGHT_LOCKTIME = 0x12</tt>\n> | None\n> | No key data\n> | <tt><32-bit uiht></tt>\n> | 32 bit unsigned little endian integer less than 500000000 representing\n> the minimum block height that this input requires to be set as the\n> transaction's lock time.\n> |\n> | 0\n> | 2\n> |}\n>\n> The new per-output types for PSBT Version 2 are defined as follows:\n>\n> {|\n> ! Name\n> ! <tt><keytype></tt>\n> ! <tt><keydata></tt>\n> ! <tt><keydata></tt> Description\n> ! <tt><valuedata></tt>\n> ! <tt><valuedata></tt> Description\n> ! Versions Requiring Inclusion\n> ! Versions Requiring Exclusion\n> ! Versions Allowing Inclusion\n> |-\n> | Output Amount\n> | <tt>PSBT_OUT_AMOUNT = 0x03</tt>\n> | None\n> | No key data\n> | <tt><64-bit uint></tt>\n> | 64 bit signed little endian integer representing the output's amount\n> in satoshis.\n> | 2\n> | 0\n> | 2\n> |-\n> | Output Script\n> | <tt>PSBT_OUT_SCRIPT = 0x03</tt>\n> | None\n> | No key data\n> | <tt><script></tt>\n> | The script for this output, also known as the scriptPubKey. Must be\n> omitted in PSBTv0. Must be provided in PSBTv2.\n> | 2\n> | 0\n> | 2\n> |}\n>\n> ===Determining Lock Time===\n>\n> The nLockTime field of a transaction is determined by inspecting the\n> PSBT_GLOBAL_PREFERRED_LOCKTIME and each input's\n> PSBT_IN_REQUIRED_TIME_LOCKTIME and PSBT_IN_REQUIRED_HEIGHT_LOCKTIME fields.\n> If none of the inputs have a PSBT_IN_REQUIRED_TIME_LOCKTIME and\n> PSBT_IN_REQUIRED_HEIGHT_LOCKTIME, then PSBT_GLOBAL_PREFERRED_LOCKTIME\n> must be used.\n> If PSBT_GLOBAL_PREFERRED_LOCKTIME is not provided, then it is assumed to\n> be 0.\n>\n> If one or more inuts have a PSBT_IN_REQUIRED_TIME_LOCKTIME or\n> PSBT_IN_REQUIRED_HEIGHT_LOCKTIME, then the field chosen is the one which\n> is supported by all of the inputs.\n> This can be determined by looking at all of the inputs which specify a\n> locktime in either of those fields, and choosing the field which is\n> present in all of those inputs.\n> Inputs not specifying a lock time field can take both types of lock\n> times, as can those that specify both.\n> The lock time chosen is then the maximum value of the chosen type of\n> lock time.\n>\n> ===Unique Identification===\n>\n> PSBTv2s can be uniquely identified by constructing an unsigned\n> transaction given the information provided in the PSBT and computing the\n> transaction ID of that transaction.\n> Since PSBT_IN_SEQUENCE can be changed by Updaters and Combiners, the\n> sequence number in this unsigned transaction must be set to 0 (not\n> final, nor the sequence in PSBT_IN_SEQUENCE).\n> The lock time in this unsigned transaction must be computed as described\n> previously.\n>\n> ==Roles==\n>\n> PSBTv2 introduces new roles and modifies some existing roles.\n>\n> ===Creator===\n>\n> In PSBTv2, the Creator initializes the PSBT with 0 inputs and 0 outputs.\n> The PSBT version number is set to 2. The transaction version number must\n> be set to at least 2. <ref>'''Why does the transaction version number\n> need to be at least 2?''' The transaction version number is part of the\n> validation rules for some features such as OP_CHECKSEQUENCEVERIFY. Since\n> it is backwards compatible, and there are other ways to disable those\n> features (e.g. through sequence numbers), it is easier to require\n> transactions be able to support these features than to try to negotiate\n> the transaction version number.</ref>\n> The Creator should also PSBT_GLOBAL_PREFERRED_LOCKTIME.\n> If the Creator is not also a Constructor and will be giving the PSBT to\n> others to add inputs and outputs, the PSBT_GLOBAL_TX_MODIFIABLE field\n> must be present and and the Inputs Modifiable and Outputs Modifiable\n> flags set appropriately.\n> If the Creator is a Constructor and no inputs and outputs will be added\n> by other entities, PSBT_GLOBAL_TX_MODIFIABLE may be omitted.\n>\n> ===Constructor===\n>\n> This Constructor is only present for PSBTv2.\n> Once a Creator initializes the PSBT, a constructor will add inputs and\n> outputs.\n> Before any input or output may be added, the constructor must check the\n> PSBT_GLOBAL_TX_MODIFIABLE field.\n> Inputs may only be added if the Inputs Modifiable flag (first boolean)\n> is True.\n> Outputs may only be added if the Outputs Modifiable flag (second\n> boolean) is True.\n> If PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS is present and its bitvector\n> indicates any inputs use SIGHASH_SINGLE, then the same number of inputs\n> and outputs must be added before that input and its corresponding outputs.\n>\n> When an input or output is added, the corresponding\n> PSBT_GLOBAL_INPUT_COUNT or PSBT_GLOBAL_OUTPUT_COUNT must be incremeted\n> to reflect the number of inputs and outputs in the PSBT.\n> When an input is added, it must have PSBT_IN_PREVIOUS_TXID and\n> PSBT_IN_OUTPUT_INDEX set.\n> When an output is added, it must have PSBT_OUT_VALUE and\n> PSBT_OUT_OUTPUT_SCRIPT set.\n> If the input has a required timelock, Constructors must set the\n> requisite timelock field.\n> If the input has a required time based timelock, then\n> PSBT_IN_REQUIRED_TIME_TIMELOCK.\n> If the input has a required height based timelock, then\n> PSBT_IN_REQUIRED_HEIGHT_TIMELOCK.\n> If an input has both types of timelocks, then both may be set.\n> In some cases, an input that can allow both types, but a particular\n> branch supporting only one type of timelock will be taken, then the type\n> of timelock that will be used can be the only one set.\n>\n> When adding a new input, the new input must be compatible with the\n> timelock types of all existing inputs.\n> Since Bitcoin requires that a transaction uses only one type of\n> timelock, all of the inputs must be able to support the same type of\n> timelock.\n> If the type of timelock is incompatible with the timelock type of the\n> other inputs, then the input must not be added.\n>\n> Since a Constructor may be adding inputs to a PSBT that has inputs with\n> existing signatures, the Constructor must be careful to not invalidate\n> any existing signatures.\n> The PSBT_GLOBAL_TX_MODIFIABLE and PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS\n> fields caches this information so that constructors do not need to\n> inspect every input.\n> If the PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS bit vector indicates an input\n> index uses SIGHASH_SINGLE, the same number of inputs and outputs must be\n> added before that input and its corresponding output.\n> When an input is added, the bit vector, if present, must be expanded to\n> include a bit for this input in the correct position.\n> When there are signatures, in addition to respecting the lock time rules\n> described previously, the newly added inputs must not change the lock\n> time used by the transaction.\n> It cannot cause the lock time to change as that will invalidate all\n> signatures since they all include the lock time regardless of the\n> sighash type.\n>\n> A Constructor may choose to declare that no further inputs and outputs\n> can be added to the transaction by setting the booleans in\n> PSBT_GLOBAL_TX_MODIFIABLE to False or by removing this field entirely.\n>\n> A single entity is likely to be both a Creator and Constructor.\n>\n> ===Updater===\n>\n> For PSBTv2, an Updater can set the sequence number.\n>\n> ===Signer===\n>\n> For PSBTv2s, a signer must update the PSBT_GLOBAL_TX_MODIFIABLE and\n> PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS fields after signing inputs so\n> that these fields accurately reflects the state of the PSBT.\n> If the Signer added a signature that does not use SIGHASH_ANYONECANPAY,\n> the Input Modifiable flag must be set to False.\n> If the Signer added a signature that does not use SIGHASH_NONE, the\n> Outputs Modifiable flag must be set to False.\n> If the Signer added a signature that uses SIGHASH_SINGLE, a\n> PSBT_GLOBAL_SIGHASH_SINGLE_INPUTS field must be added if not present,\n> and the corresponding bit in its bit vector must be set to 1.\n>\n> ===Transaction Extractor===\n>\n> For PSBTv2s, the transaction is constructed using the PSBTv2 fields.\n> The lock time for this transaction is determined as described in the\n> Determining Lock Time section.\n> The Extractor should produce a fully valid, network serialized\n> transaction if all inputs are complete.\n>\n> ==Compatibility==\n>\n> PSBTv2 shares the same gemeric format as PSBTv0 as defined in BIP 174.\n> Parsers for PSBTv0 should\n> be able to deserialize PSBTv2 with only changes to support the new fields.\n>\n> However PSBTv2 is incompatible with PSBTv0, and vice versa due to the\n> use of the PSBT_GLOBAL_VERSION.\n> This incompatibility is intentional so that PSBT_GLOBAL_UNSIGNED_TX\n> could be removed in PSBTv2.\n> However it is possible to convert a PSBTv2 to a PSBTv0 by creating an\n> unsigned\n> transaction from the PSBTv2 fields.\n>\n> ==Test Vectors==\n>\n> TBD\n>\n> ==Rationale==\n>\n> <references/>\n>\n> ==Reference implementation==\n>\n> The reference implementation of the PSBT format is available at\n> https://github.com/achow101/bitcoin/tree/psbt2.\n>\n>\n> On 12/23/20 4:32 PM, Andrew Chow wrote:\n>> Hi All,\n>>\n>> The full modified BIP can be read at\n>> https://github.com/achow101/bips/blob/psbt2/bip-0174.mediawiki.\n>>\n>> I will open a PR to the BIPs repo soon after further discussion on this.\n>>\n>>\n>> Andrew\n>>\n>> On 12/22/20 3:12 PM, Andrew Chow wrote:\n>>> Hi All,\n>>>\n>>> I have some updates on this after speaking with some people off-list.\n>>>\n>>> Firstly, the version number will be set to 2. In most discussions, this\n>>> proposal was being referred to as PSBT version 2, so it'll be easier and\n>>> clearer to set the version number to 2.\n>>>\n>>> For lock times, instead of a single\u00a0 PSBT_IN_REQUIRED_LOCKTIME field,\n>>> there will be 2 of them, one for a time based lock time, and the other\n>>> for height based. These will be:\n>>> * PSBT_IN_REQUIRED_TIME_LOCKTIME = 0x10\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 32 bit unsigned little endian integer greater than or equal\n>>> to 500000000 representing the minimum Unix timestamp that this input\n>>> requires to be set as the transaction's lock time. Must be omitted in\n>>> PSBTv0, and may be omitted in PSBTv2\n>>> * PSBT_IN_REQUIRED_HEIGHT_LOCKTIME = 0x11\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: 32 bit unsigned little endian integer less than 500000000\n>>> representing the minimum block height that this input requires to be set\n>>> as the transaction's lock time. Must be omitted in PSBTv0, and may be\n>>> omitted in PSBTv2.\n>>>\n>>> Having two lock time fields is necessary due to the behavior where all\n>>> inputs must use the same type of lock time (height or time). Thus if an\n>>> input requires a particular type of lock time, it must set the requisite\n>>> field. Any new inputs being added must be able to accommodate all\n>>> existing inputs' lock time type. This means they either must not have a\n>>> lock time specified (i.e. no OP_CLTV involved), or have branches that\n>>> allow the acceptance of either type. If an input has a lock time type\n>>> that is incompatible with the rest of the transaction, it must not be added.\n>>>\n>>> PSBT_GLOBAL_PREFERRED_LOCKTIME is changed to purely be the fallback\n>>> option if no input lock time fields are present. If there are input lock\n>>> times, all lock time calculations must ignore it.\n>>>\n>>> Any role which does lock time calculation will first check if there are\n>>> input lock time fields. If there are not, it must then check for a\n>>> PSBT_GLOBAL_PREFERRED_LOCKTIME. If this field exists, its value is the\n>>> transaction's lock time. If it does not, the lock time is 0. If there\n>>> are input lock time fields, it must choose the type which does not\n>>> invalidate any inputs. The lock time is then determined to be the\n>>> maximum value of all of the lock time fields for the chosen type.\n>>>\n>>>\n>>> Additionally, I would like to add a new global field:\n>>> * PSBT_GLOBAL_UNDER_CONSTRUCTION = 0x05\n>>>     \u00a0 * Key: empty\n>>>     \u00a0 * Value: A single byte as a boolean. 0 for False, 1 for True. All\n>>> other values ore prohibited. Must be omitted for PSBTv0, may be omitted\n>>> in PSBTv2.\n>>>\n>>> PSBT_GLOBAL_UNDER_CONSTRUCTION is used to signal whether inputs and\n>>> outputs can be added to the PSBT. This flag may be set to True when\n>>> inputs and outputs are being updated, signed, and finalized. However\n>>> care must be taken when there are existing signatures. If this field is\n>>> omitted or set to False, no further inputs and outputs may be added to\n>>> the PSBT.\n>>>\n>>> Several rules must be followed to ensure that adding additional inputs\n>>> and outputs will not invalidate existing signatures. First, an input or\n>>> output adder must check for any existing signatures in all of the other\n>>> inputs. If there are none, the input or output may be added in any\n>>> position. If there are one or more signatures, each signature's sighash\n>>> type must be examined. Inputs may only be added if all existing\n>>> signatures use SIGHASH_ANYONECANPAY. Outputs may only be added if all\n>>> existing signatures use SIGHASH_NONE. If an input has a signature using\n>>> SIGHASH_SINGLE, the same number of inputs and outputs must be added\n>>> before that input and it's corresponding output. For all other sighash\n>>> types (i.e. SIGHASH_ALL and any future sighash types), no inputs or\n>>> outputs may be added to the PSBT. Specific exceptions can be made in the\n>>> future for additional sighash types.\n>>>\n>>> Furthermore, these newly added inputs must follow additional lock time\n>>> rules. Because all signatures, regardless of sighash type, sign the\n>>> transaction lock time, newly added inputs when there are existing\n>>> signatures must have the same type of lock time used in the transaction,\n>>> and must be less than or equal to the transaction lock time. It must not\n>>> cause the transaction lock time to change, otherwise the signatures will\n>>> be invalidated.\n>>>\n>>>\n>>> Lastly, to uniquely identify transactions for combiners, a txid can be\n>>> computed from the information present in the PSBT. Internally, combiners\n>>> can create an unsigned transaction given the transaction version, the\n>>> input prevouts, the outputs, and the computed locktime. This can then be\n>>> used to calculate a txid and thus used as a way to identify PSBTs.\n>>> Combiners will need to do this for all version 2 PSBTs in order to avoid\n>>> combining distinct transactions.\n>>>\n>>>\n>>> Andrew Chow\n>>>\n>>> On 12/9/20 5:25 PM, Andrew Chow wrote:\n>>>> Hi All,\n>>>>\n>>>> I would like to propose a new PSBT version that addresses a few\n>>>> deficiencies in the current PSBT v0. As this will be backwards\n>>>> incompatible, a new PSBT version will be used, v1.\n>>>>\n>>>> The primary change is to truly have all input and output data for each\n>>>> in their respective maps. Instead of having to parse an unsigned\n>>>> transaction and lookup some data from there, and other data from the\n>>>> correct map, all of the data for an input will be contained in its map.\n>>>> Doing so also disallows PSBT_GLOBAL_UNSIGNED_TX in this new version.\n>>>> Thus I propose that the following fields be added:\n>>>>\n>>>> Global:\n>>>> * PSBT_GLOBAL_TX_VERSION = 0x02\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: 32-bit little endian unsigned integer for the transaction\n>>>> version number. Must be provided in PSBT v1 and omitted in v0.\n>>>> * PSBT_GLOBAL_PREFERRED_LOCKTIME = 0x03\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: 32 bit little endian unsigned integer for the preferred\n>>>> transaction lock time. Must be omitted in PSBT v0. May be provided in\n>>>> PSBT v1, assumed to be 0 if not provided.\n>>>> * PSBT_GLOBAL_INPUT_COUNT = 0x04\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: Compact size unsigned integer. Number of inputs in this\n>>>> PSBT. Must be provided in PSBT v1 and omitted in v0.\n>>>> * PSBT_GLOBAL_OUTPUT_COUNT = 0x05\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: Compact size unsigned integer. Number of outputs in this\n>>>> PSBT. Must be provided in PSBT v1 and omitted in v0.\n>>>>\n>>>> Input:\n>>>> * PSBT_IN_PREVIOUS_TXID = 0x0e\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: 32 byte txid of the previous transaction whose output at\n>>>> PSBT_IN_OUTPUT_INDEX is being spent. Must be provided in PSBT v1 and\n>>>> omitted in v0.\n>>>> * PSBT_IN_OUTPUT_INDEX = 0x0f\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: 32 bit little endian integer for the index of the output\n>>>> being spent. Must be provided in PSBT v1 and omitted in v0.\n>>>> * PSBT_IN_SEQUENCE = 0x0f\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: 32 bit unsigned little endian integer for the sequence\n>>>> number. Must be omitted in PSBT v0. May be provided in PSBT v1 assumed\n>>>> to be max sequence (0xffffffff) if not provided.\n>>>> * PSBT_IN_REQUIRED_LOCKTIME = 0x10\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: 32 bit unsigned little endian integer for the lock time that\n>>>> this input requires. Must be omitted in PSBT v0. May be provided in PSBT\n>>>> v1, assumed to be 0 if not provided.\n>>>>\n>>>> Output:\n>>>> * PSBT_OUT_VALUE = 0x03\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: 64-bit unsigned little endian integer for the output's\n>>>> amount in satoshis. Must be provided in PSBT v1 and omitted in v0.\n>>>> * PSBT_OUT_OUTPUT_SCRIPT = 0x04\n>>>>      \u00a0 * Key: empty\n>>>>      \u00a0 * Value: The script for this output. Otherwise known as the\n>>>> scriptPubKey. Must be provided in PSBT v1 and omitted in v0.\n>>>>\n>>>> This change allows for PSBT to be used in the construction of\n>>>> transactions. With these new fields, inputs and outputs can be added as\n>>>> needed. One caveat is that there is no longer a unique transaction\n>>>> identifier so more care must be taken when combining PSBTs.\n>>>> Additionally, adding new inputs and outputs must be done such that\n>>>> signatures are not invalidated. This may be harder to specify.\n>>>>\n>>>> An important thing to note in this proposal are the fields\n>>>> PSBT_GLOBAL_PREFERRED_LOCKTIME and PSBT_IN_REQUIRED_LOCKTIME. A Bitcoin\n>>>> transaction only has a single locktime yet a PSBT may have multiple\n>>>> locktimes. To choose the locktime for the transaction, finalizers must\n>>>> choose the maximum of all of the *_LOCKTIME fields.\n>>>> PSBT_IN_REQUIRED_LOCKTIME is added because some inputs, such as those\n>>>> involving OP_CHECKLOCKTIMEVERIFY, require a specific minimum locktime to\n>>>> be set. This field allows finalizers to choose a locktime that is high\n>>>> enough for all inputs without needing to understand the scripts\n>>>> involved. The PSBT_GLOBAL_PREFERRED_LOCKTIME is the locktime to use if\n>>>> no inputs require a particular locktime.\n>>>>\n>>>> As these changes disallow the PSBT_GLOBAL_UNSIGNED_TX field, PSBT v1\n>>>> needs the version number bump to enforce backwards incompatibility.\n>>>> However once the inputs and outputs of a PSBT are decided, a PSBT could\n>>>> be \"downgraded\" back to v0 by creating the unsigned transaction from the\n>>>> above fields, and then dropping these new fields.\n>>>>\n>>>> If the list finds that these changes are reasonable, I will write a PR\n>>>> to modify BIP 174 to incorporate them.\n>>>>\n>>>> Thanks,\n>>>> Andrew Chow"
            }
        ],
        "thread_summary": {
            "title": "New PSBT version proposal",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Andrew Chow",
                "Jeremy"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 77578
        }
    },
    {
        "title": "[bitcoin-dev] Bech32m BIP: new checksum, and usage for segwit address",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2021-01-05T00:14:12",
                "message_text_only": "Hello all,\n\nhere is a BIP draft for changing the checksum in native segwit addresses for v1 and higher, following the discussion in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/018293.html\n\nOverall, the idea is:\n* Define a new encoding which is a tweaked variant of Bech32, called Bech32m. It refers to the Bech32 section of BIP173, which remains in effect.\n* Define a new segwit address encoding which replaces the corresponding section in BIP173. It prescribes using Bech32 for v0 witness addresses, and Bech32m for other versions.\n\nComments, suggestions, ideas?\n\nCheers,\n\n--\nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210105/a7a489de/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2021-01-05T01:25:29",
                "message_text_only": "On Monday, January 4, 2021 4:14 PM, Pieter Wuille <bitcoin-dev at wuille.net> wrote:\n\n> Hello all,\n>\n> here is a BIP draft for changing the checksum in native segwit addresses for v1 and higher, following the discussion in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/018293.html\n>\n> Overall, the idea is:\n> * Define a new encoding which is a tweaked variant of Bech32, called Bech32m. It refers to the Bech32 section of BIP173, which remains in effect.\n> * Define a new segwit address encoding which replaces the corresponding section in BIP173. It prescribes using Bech32 for v0 witness addresses, and Bech32m for other versions.\n\nOf course I forgot the actual link: https://github.com/sipa/bips/blob/bip-bech32m/bip-bech32m.mediawiki\n\nCheers,\n\n--\nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210105/bf63d22d/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2021-01-09T05:00:24",
                "message_text_only": "Perhaps title 'Bech32m address format for native v0-16 segregated\nwitness outputs' should probably be v1-16?\n\nThis is a thorough and clear write up; a superb read.\n\nSide note: I am deeply impressed with your mathematical jujitsu that no\nbech32 string is also a valid bech32m string *even with three errors*.\n\nThis sways me even more that this approach is correct.\n\nUntested-Ack.\n\nThanks,\nRusty.\n\nPieter Wuille via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org>\nwrites:\n\n> On Monday, January 4, 2021 4:14 PM, Pieter Wuille <bitcoin-dev at wuille.net> wrote:\n>\n>> Hello all,\n>>\n>> here is a BIP draft for changing the checksum in native segwit addresses for v1 and higher, following the discussion in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/018293.html\n>>\n>> Overall, the idea is:\n>> * Define a new encoding which is a tweaked variant of Bech32, called Bech32m. It refers to the Bech32 section of BIP173, which remains in effect.\n>> * Define a new segwit address encoding which replaces the corresponding section in BIP173. It prescribes using Bech32 for v0 witness addresses, and Bech32m for other versions.\n>\n> Of course I forgot the actual link: https://github.com/sipa/bips/blob/bip-bech32m/bip-bech32m.mediawiki\n>\n> Cheers,\n>\n> --\n> Pieter\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "nakagat",
                "date": "2021-01-15T08:01:24",
                "message_text_only": "Dear Pieter,\n\nI read the BIP draft of Bech32m and implemented it in Go.\n\nLet me ask you one question.\nDoes Checksum have to be fixed?\nThe 'bech32_verify_checksum' function has hrp and data as parameters,\nso how about committing Checksum with these two values?\n\nFor example, calculate Checksum from hrp and data using hash, chacha20, etc.\n\nThank you.\nTakatoshi Nakagawa\n\n2021\u5e741\u67085\u65e5(\u706b) 9:14 Pieter Wuille via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org>:\n>\n> Hello all,\n>\n> here is a BIP draft for changing the checksum in native segwit addresses for v1 and higher, following the discussion in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/018293.html\n>\n> Overall, the idea is:\n> * Define a new encoding which is a tweaked variant of Bech32, called Bech32m. It refers to the Bech32 section of BIP173, which remains in effect.\n> * Define a new segwit address encoding which replaces the corresponding section in BIP173. It prescribes using Bech32 for v0 witness addresses, and Bech32m for other versions.\n>\n> Comments, suggestions, ideas?\n>\n> Cheers,\n>\n> --\n> Pieter\n>\n>\n>\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev"
            },
            {
                "author": "Pieter Wuille",
                "date": "2021-01-18T04:15:49",
                "message_text_only": "Hi all,\n\nA few updates, in response to comments here and in a few other places:\n\n- Updated several reference implementations (C, C++, Python, Javascript) to support Bech32m: https://github.com/sipa/bech32/tree/bech32m (but contributions to update other languages are welcome!)\n\n- Updated website, including error-locating JS decoder, and demo: http://bitcoin.sipa.be/bech32/demo/demo.html\n\n- Opened a Bitcoin Core PR: https://github.com/bitcoin/bitcoin/pull/20861\n\n- Updates to the BIP draft (https://github.com/sipa/bips/blob/bip-bech32m/bip-bech32m.mediawiki):\n  * Made the title clearer (so it doesn't imply Bech32m is used for v0)\n  * Added rationale for not permitting both Bech32 and Bech32m for v0\n  * Added a section on error location\n  * Added links for more reference implementations\n\nOn Friday, January 15, 2021 12:01 AM, nakagat <nakagat at gmail.com> wrote:\n\n> I read the BIP draft of Bech32m and implemented it in Go.\n\nCool! Do feel like contributing it to https://github.com/sipa/bech32/tree/bech32m?\n\n> Let me ask you one question.\n> Does Checksum have to be fixed?\n> The 'bech32_verify_checksum' function has hrp and data as parameters,\n> so how about committing Checksum with these two values?\n>\n> For example, calculate Checksum from hrp and data using hash, chacha20, etc.\n\nI'm not entirely sure what you mean. Do you mean:\n\n1) Can we use a hash function to compute the checksum instead of Bech32's algorithm?\n\nIf you compute the checksum using the HRP and the data using a hash function, you just 2^-30 failure probability for any error. The idea behind Bech32 was doing better than that for common errors: any error that consists of up to 4 substitutions are a failure probability of 0 - far better than a hash can do.\n\n2) Can we keep using Bech32's algorithm, but compute the final xorred-in constant from the HRP and the data using a hash function?\n\nThat would be functionally equivalent to (1).\n\n3) Can we keep using Bech32's algorithm, but compute the final xorred-in constant from the HRP (but not the data) using a hash function?\n\nIt would mean that some (very) small set of potential HRPs would exhibit much worse behavior than others - including the 'q'-before-'p' that the original Bech32 has.\n\nDoes that clarify things?\n\nCheers,\n\n--\nPieter"
            },
            {
                "author": "nakagat",
                "date": "2021-01-18T05:59:05",
                "message_text_only": "Dear. Peter,\n\nI'm not good at English, so I'm sorry for the poor explanation.\n\nI thought that BECH32M_CONST could be created from hrp and data\ninstead of constants.\n\nI thought that the error position would be the same as bech32 by\nrecalculating the value created from hrp and data.\n\nIf this were possible, I thought I could commit hrp and data to the checksum.\n\nThank you.\nTakatoshi Nakagawa\n\n2021\u5e741\u670818\u65e5(\u6708) 13:15 Pieter Wuille <bitcoin-dev at wuille.net>:\n>\n> Hi all,\n>\n> A few updates, in response to comments here and in a few other places:\n>\n> - Updated several reference implementations (C, C++, Python, Javascript) to support Bech32m: https://github.com/sipa/bech32/tree/bech32m (but contributions to update other languages are welcome!)\n>\n> - Updated website, including error-locating JS decoder, and demo: http://bitcoin.sipa.be/bech32/demo/demo.html\n>\n> - Opened a Bitcoin Core PR: https://github.com/bitcoin/bitcoin/pull/20861\n>\n> - Updates to the BIP draft (https://github.com/sipa/bips/blob/bip-bech32m/bip-bech32m.mediawiki):\n>   * Made the title clearer (so it doesn't imply Bech32m is used for v0)\n>   * Added rationale for not permitting both Bech32 and Bech32m for v0\n>   * Added a section on error location\n>   * Added links for more reference implementations\n>\n> On Friday, January 15, 2021 12:01 AM, nakagat <nakagat at gmail.com> wrote:\n>\n> > I read the BIP draft of Bech32m and implemented it in Go.\n>\n> Cool! Do feel like contributing it to https://github.com/sipa/bech32/tree/bech32m?\n>\n> > Let me ask you one question.\n> > Does Checksum have to be fixed?\n> > The 'bech32_verify_checksum' function has hrp and data as parameters,\n> > so how about committing Checksum with these two values?\n> >\n> > For example, calculate Checksum from hrp and data using hash, chacha20, etc.\n>\n> I'm not entirely sure what you mean. Do you mean:\n>\n> 1) Can we use a hash function to compute the checksum instead of Bech32's algorithm?\n>\n> If you compute the checksum using the HRP and the data using a hash function, you just 2^-30 failure probability for any error. The idea behind Bech32 was doing better than that for common errors: any error that consists of up to 4 substitutions are a failure probability of 0 - far better than a hash can do.\n>\n> 2) Can we keep using Bech32's algorithm, but compute the final xorred-in constant from the HRP and the data using a hash function?\n>\n> That would be functionally equivalent to (1).\n>\n> 3) Can we keep using Bech32's algorithm, but compute the final xorred-in constant from the HRP (but not the data) using a hash function?\n>\n> It would mean that some (very) small set of potential HRPs would exhibit much worse behavior than others - including the 'q'-before-'p' that the original Bech32 has.\n>\n> Does that clarify things?\n>\n> Cheers,\n>\n> --\n> Pieter\n>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2021-01-19T17:57:08",
                "message_text_only": "On Sunday, January 17, 2021 9:59 PM, nakagat <nakagat at gmail.com> wrote:\n\n> I thought that BECH32M_CONST could be created from hrp and data\n> instead of constants.\n>\n> I thought that the error position would be the same as bech32 by\n> recalculating the value created from hrp and data.\n\nSo, bech32 can be written as:\n\n* checksum = polymod(expand(hrp) + data) xor 1\n\nBech32m changes that to:\n\n* checksum = polymod(expand(hrp) + data) xor 0x2bc830a3\n\nI believe that your idea is:\n\n* checksum = polymod(expand(hrp) + data) xor hash(hrp, data)\n\nThat has exactly the same error detecting capabilities as:\n\n* checksum = hash(hrp, data)\n\nThe hashing makes all types of errors uniform, and it doesn't matter what other things are added to the checksum. Once you hash the data, the checksum is uniformly random, and you can't make it \"less random\" anymore.\n\nIn this case, we *want* non-uniformity. The polymod function as a checksum detects some kinds of errors much better than others, and this is what we want.\n\nDoes that clarify things?\n\nCheers,\n\n--\nPieter"
            },
            {
                "author": "Pieter Wuille",
                "date": "2021-01-20T00:29:36",
                "message_text_only": "On Tuesday, January 19, 2021 4:23 PM, nakagat <nakagat at gmail.com> wrote:\n\n> Dear. Pieter,\n>\n> My idea is exactly what you wrote.\n>\n> However, I don't think it is the same as \"checksum = hash (hrp, data)\".\n\nNo, it is not the same. But it has the same error-detection properties as just a hash. Hash-based checksums aren't bad, but:\n* The BCH based checksum that Bech32 uses is better at detecting certain subsets of errors than a hash can be. Once you add in a hash you irrevocably lose these properties.\n* If we wanted a checksum with error detection properties that are equivalent to a hash, we should just use a hash like Base58Check did. However, that's not the goal of Bech32/Bech32m.\n\nIf this isn't clear, I'm afraid I don't know how to continue discussing this. We can take if off this list, if you want.\n\nCheers,\n\n--\nPieter"
            }
        ],
        "thread_summary": {
            "title": "Bech32m BIP: new checksum, and usage for segwit address",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Pieter Wuille",
                "nakagat"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 11476
        }
    },
    {
        "title": "[bitcoin-dev] Proposal for new \"disabletx\" p2p message",
        "thread_messages": [
            {
                "author": "Suhas Daftuar",
                "date": "2021-01-06T16:35:11",
                "message_text_only": "Hi,\n\nI'm proposing the addition of a new, optional p2p message to allow peers to\ncommunicate that they do not want to send or receive (loose) transactions\nfor the lifetime of a connection.\n\nThe goal of this message is to help facilitate connections on the network\nover which only block-related data (blocks/headers/compact blocks/etc) are\nrelayed, to create low-resource connections that help protect against\npartition attacks on the network.  In particular, by adding a network\nmessage that communicates that transactions will not be relayed for the\nlife of the connection, we ease the implementation of software that could\nhave increased inbound connection limits for such peers, which in turn will\nmake it easier to add additional persistent block-relay-only connections on\nthe network -- strengthening network security for little additional\nbandwidth.\n\nSoftware has been deployed for over a year now which makes such\nconnections, using the BIP37/BIP60 \"fRelay\" field in the version message to\nsignal that transactions should not be sent initially.  However, BIP37\nallows for transaction relay to be enabled later in the connection's\nlifetime, complicating software that would try to distinguish inbound peers\nthat will never relay transactions from those that might.\n\nThis proposal would add a single new p2p message, \"disabletx\", which (if\nused at all) must be sent between version and verack.  I propose that this\nmessage is valid for peers advertising protocol version 70017 or higher.\nSoftware is free to implement this BIP or ignore this message and remain\ncompatible with software that does implement it.\n\nFull text of the proposed BIP is below.\n\nThanks,\nSuhas\n\n---------------------------------------------------\n\n<pre>\n  BIP: XXX\n  Layer: Peer Services\n  Title: Disable transaction relay message\n  Author: Suhas Daftuar <sdaftuar at chaincode.com>\n  Comments-Summary: No comments yet.\n  Comments-URI:\n  Status: Draft\n  Type: Standards Track\n  Created: 2020-09-03\n  License: BSD-2-Clause\n</pre>\n\n==Abstract==\n\nThis BIP describes a change to the p2p protocol to allow a node to tell a peer\nthat a connection will not be used for transaction relay, to support\nblock-relay-only connections that are currently in use on the network.\n\n==Motivation==\n\nFor nearly the past year, software has been deployed[1] which initiates\nconnections on the Bitcoin network and sets the transaction relay field\n(introduced by BIP 37 and also defined in BIP 60) to false, to prevent\ntransaction relay from occurring on the connection. Additionally, addr messages\nreceived from the peer are ignored by this software.\n\nThe purpose of these connections is two-fold: by making additional\nlow-bandwidth connections on which blocks can propagate, the robustness of a\nnode to network partitioning attacks is strengthened.  Additionally, by not\nrelaying transactions and ignoring received addresses, the ability of an\nadversary to learn the complete network graph (or a subgraph) is reduced[2],\nwhich in turn increases the cost or difficulty to an attacker seeking to carry\nout a network partitioning attack (when compared with having such knowledge).\n\nThe low-bandwidth / minimal-resource nature of these connections is currently\nknown only by the initiator of the connection; this is because the transaction\nrelay field in the version message is not a permanent setting for the lifetime\nof the connection.  Consequently, a node receiving an inbound connection with\ntransaction relay disabled cannot distinguish between a peer that will never\nenable transaction relay (as described in BIP 37) and one that will.  Moreover,\nthe node also cannot determine that the incoming connection will ignore relayed\naddresses; with that knowledge a node would likely choose other peers to\nreceive announced addresses instead.\n\nThis proposal adds a new, optional message that a node can send a peer when\ninitiating a connection to that peer, to indicate that connection should not be\nused for transaction-relay for the connection's lifetime. In addition, without\na current mechanism to negotiate whether addresses should be relayed on a\nconnection, this BIP suggests that address messages not be sent on links where\ntx-relay has been disabled.\n\n==Specification==\n\n# A new disabletx message is added, which is defined as an empty\nmessage where pchCommand == \"disabletx\".\n# The protocol version of nodes implementing this BIP must be set to\n70017 or higher.\n# If a node sets the transaction relay field in the version message to\na peer to false, then the disabletx message MAY also be sent in\nresponse to a version message from that peer if the peer's protocol\nversion is >= 70017. If sent, the disabletx message MUST be sent prior\nto sending a verack.\n# A node that has sent or received a disabletx message to/from a peer\nMUST NOT send any of these messages to the peer:\n## inv messages for transactions\n## getdata messages for transactions\n## getdata messages for merkleblock (BIP 37)\n## filteradd/filterload/filterclear (BIP 37)\n## mempool (BIP 35)\n# It is RECOMMENDED that a node that has sent or received a disabletx\nmessage to/from a peer not send any of these messages to the peer:\n## addr/getaddr\n## addrv2 (BIP 155)\n# The behavior regarding sending or processing other message types is\nnot specified by this BIP.\n# Nodes MAY decide to not remain connected to peers that send this\nmessage (for example, if trying to find a peer that will relay\ntransactions).\n\n==Compatibility==\n\nNodes with protocol version >= 70017 that do not implement this BIP, and nodes\nwith protocol version < 70017, will continue to remain compatible with\nimplementing software: transactions would not be relayed to peers sending the\ndisabletx message (provided that BIP 37 or BIP 60 has been\nimplemented), and while\nperiodic address relay may still take place, software implementing this BIP\nshould not be disconnecting such peers solely for that reason.\n\nDisabling address relay is suggested but not required by this BIP, to allow for\nfuture protocol extensions that might specify more carefully how address relay\nis to be negotiated. This BIP's recommendations for software to not relay\naddresses is intended to be interpreted as guidance in the absence of any such\nfuture protocol extension, to accommodate existing software behavior.\n\nNote that all messages specified in BIP 152, including blocktxn and\ngetblocktxn, are permitted between peers that have sent/received a disabletx\nmessage, subject to the feature negotiation of BIP 152.\n\n==Implementation==\n\nTBD\n\n==References==\n\n# Bitcoin Core has [https://github.com/bitcoin/bitcoin/pull/15759\nimplemented this functionality] since version 0.19.0.1, released in\nNovember 2019.\n# For example, see\nhttps://www.cs.umd.edu/projects/coinscope/coinscope.pdf and\nhttps://arxiv.org/pdf/1812.00942.pdf.\n\n==Copyright==\n\nThis BIP is licensed under the 2-clause BSD license.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210106/a6651b31/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-01-13T06:40:03",
                "message_text_only": "Out of curiosity, was the interaction between fRelay and bloom disabling ever specified? ie if you aren\u2019t allowed to enable bloom filters on a connection due to resource constraints/new limits, is it ever possible to \u201cset\u201d fRelay later?\n\nMatt\n\n> On Jan 6, 2021, at 11:35, Suhas Daftuar via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> \n> \ufeff\n> Hi,\n> \n> I'm proposing the addition of a new, optional p2p message to allow peers to communicate that they do not want to send or receive (loose) transactions for the lifetime of a connection. \n> \n> The goal of this message is to help facilitate connections on the network over which only block-related data (blocks/headers/compact blocks/etc) are relayed, to create low-resource connections that help protect against partition attacks on the network.  In particular, by adding a network message that communicates that transactions will not be relayed for the life of the connection, we ease the implementation of software that could have increased inbound connection limits for such peers, which in turn will make it easier to add additional persistent block-relay-only connections on the network -- strengthening network security for little additional bandwidth.\n> \n> Software has been deployed for over a year now which makes such connections, using the BIP37/BIP60 \"fRelay\" field in the version message to signal that transactions should not be sent initially.  However, BIP37 allows for transaction relay to be enabled later in the connection's lifetime, complicating software that would try to distinguish inbound peers that will never relay transactions from those that might.\n> \n> This proposal would add a single new p2p message, \"disabletx\", which (if used at all) must be sent between version and verack.  I propose that this message is valid for peers advertising protocol version 70017 or higher.  Software is free to implement this BIP or ignore this message and remain compatible with software that does implement it.\n> \n> Full text of the proposed BIP is below.\n> \n> Thanks,\n> Suhas\n> \n> ---------------------------------------------------\n> \n> <pre>\n>   BIP: XXX\n>   Layer: Peer Services\n>   Title: Disable transaction relay message\n>   Author: Suhas Daftuar <sdaftuar at chaincode.com>\n>   Comments-Summary: No comments yet.\n>   Comments-URI:\n>   Status: Draft\n>   Type: Standards Track\n>   Created: 2020-09-03\n>   License: BSD-2-Clause\n> </pre>\n> \n> ==Abstract==\n> \n> This BIP describes a change to the p2p protocol to allow a node to tell a peer\n> that a connection will not be used for transaction relay, to support\n> block-relay-only connections that are currently in use on the network.\n> \n> ==Motivation==\n> \n> For nearly the past year, software has been deployed[1] which initiates\n> connections on the Bitcoin network and sets the transaction relay field\n> (introduced by BIP 37 and also defined in BIP 60) to false, to prevent\n> transaction relay from occurring on the connection. Additionally, addr messages\n> received from the peer are ignored by this software.\n> \n> The purpose of these connections is two-fold: by making additional\n> low-bandwidth connections on which blocks can propagate, the robustness of a\n> node to network partitioning attacks is strengthened.  Additionally, by not\n> relaying transactions and ignoring received addresses, the ability of an\n> adversary to learn the complete network graph (or a subgraph) is reduced[2],\n> which in turn increases the cost or difficulty to an attacker seeking to carry\n> out a network partitioning attack (when compared with having such knowledge).\n> \n> The low-bandwidth / minimal-resource nature of these connections is currently\n> known only by the initiator of the connection; this is because the transaction\n> relay field in the version message is not a permanent setting for the lifetime\n> of the connection.  Consequently, a node receiving an inbound connection with\n> transaction relay disabled cannot distinguish between a peer that will never\n> enable transaction relay (as described in BIP 37) and one that will.  Moreover,\n> the node also cannot determine that the incoming connection will ignore relayed\n> addresses; with that knowledge a node would likely choose other peers to\n> receive announced addresses instead.\n> \n> This proposal adds a new, optional message that a node can send a peer when\n> initiating a connection to that peer, to indicate that connection should not be\n> used for transaction-relay for the connection's lifetime. In addition, without\n> a current mechanism to negotiate whether addresses should be relayed on a\n> connection, this BIP suggests that address messages not be sent on links where\n> tx-relay has been disabled.\n> \n> ==Specification==\n> \n> # A new disabletx message is added, which is defined as an empty message where pchCommand == \"disabletx\".\n> # The protocol version of nodes implementing this BIP must be set to 70017 or higher.\n> # If a node sets the transaction relay field in the version message to a peer to false, then the disabletx message MAY also be sent in response to a version message from that peer if the peer's protocol version is >= 70017. If sent, the disabletx message MUST be sent prior to sending a verack.\n> # A node that has sent or received a disabletx message to/from a peer MUST NOT send any of these messages to the peer:\n> ## inv messages for transactions\n> ## getdata messages for transactions\n> ## getdata messages for merkleblock (BIP 37)\n> ## filteradd/filterload/filterclear (BIP 37)\n> ## mempool (BIP 35)\n> # It is RECOMMENDED that a node that has sent or received a disabletx message to/from a peer not send any of these messages to the peer:\n> ## addr/getaddr\n> ## addrv2 (BIP 155)\n> # The behavior regarding sending or processing other message types is not specified by this BIP.\n> # Nodes MAY decide to not remain connected to peers that send this message (for example, if trying to find a peer that will relay transactions).\n> \n> ==Compatibility==\n> \n> Nodes with protocol version >= 70017 that do not implement this BIP, and nodes\n> with protocol version < 70017, will continue to remain compatible with\n> implementing software: transactions would not be relayed to peers sending the\n> disabletx message (provided that BIP 37 or BIP 60 has been implemented), and while\n> periodic address relay may still take place, software implementing this BIP\n> should not be disconnecting such peers solely for that reason.\n> \n> Disabling address relay is suggested but not required by this BIP, to allow for\n> future protocol extensions that might specify more carefully how address relay\n> is to be negotiated. This BIP's recommendations for software to not relay\n> addresses is intended to be interpreted as guidance in the absence of any such\n> future protocol extension, to accommodate existing software behavior.\n> \n> Note that all messages specified in BIP 152, including blocktxn and\n> getblocktxn, are permitted between peers that have sent/received a disabletx\n> message, subject to the feature negotiation of BIP 152.\n> \n> ==Implementation==\n> \n> TBD\n> \n> ==References==\n> \n> # Bitcoin Core has [https://github.com/bitcoin/bitcoin/pull/15759 implemented this functionality] since version 0.19.0.1, released in November 2019.\n> # For example, see https://www.cs.umd.edu/projects/coinscope/coinscope.pdf and https://arxiv.org/pdf/1812.00942.pdf.\n> \n> ==Copyright==\n> \n> This BIP is licensed under the 2-clause BSD license.\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210113/573ec1b9/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-01-14T05:32:57",
                "message_text_only": "On Wed, Jan 13, 2021 at 01:40:03AM -0500, Matt Corallo via bitcoin-dev wrote:\n> Out of curiosity, was the interaction between fRelay and bloom disabling ever\n> specified? ie if you aren\u2019t allowed to enable bloom filters on a connection due\n> to resource constraints/new limits, is it ever possible to \u201cset\u201d fRelay later?\n\n(Maybe I'm missing something, but...)\n\nIn the current bitcoin implementation, no -- you either set\nm_tx_relay->fRelayTxes to true via the VERSION message (either explicitly\nor by not setting fRelay), or you enable it later with FILTERLOAD or\nFILTERCLEAR, both of which will cause a disconnect if bloom filters\naren't supported. Bloom filter support is (optionally?) indicated via\na service bit (BIP 111), so you could assume you know whether they're\nsupported as soon as you receive the VERSION line.\n\nfRelay is specified in BIP 37 as:\n\n  | 1 byte || fRelay || bool || If false then broadcast transactions will\n  not be announced until a filter{load,add,clear} command is received. If\n  missing or true, no change in protocol behaviour occurs.\n\nBIP 60 defines the field as \"relay\" and references BIP 37. Don't think\nit's referenced in any other bips.\n\nCheers,\naj"
            },
            {
                "author": "Matt Corallo",
                "date": "2021-01-14T05:39:16",
                "message_text_only": "So we\u2019d kill two birds with one stone if all bloom support was dropped. As far as I understand, precomputed filters are now provided via p2p connections as well.\n\nMatt\n\n> On Jan 14, 2021, at 00:33, Anthony Towns <aj at erisian.com.au> wrote:\n> \n> \ufeffOn Wed, Jan 13, 2021 at 01:40:03AM -0500, Matt Corallo via bitcoin-dev wrote:\n>> Out of curiosity, was the interaction between fRelay and bloom disabling ever\n>> specified? ie if you aren\u2019t allowed to enable bloom filters on a connection due\n>> to resource constraints/new limits, is it ever possible to \u201cset\u201d fRelay later?\n> \n> (Maybe I'm missing something, but...)\n> \n> In the current bitcoin implementation, no -- you either set\n> m_tx_relay->fRelayTxes to true via the VERSION message (either explicitly\n> or by not setting fRelay), or you enable it later with FILTERLOAD or\n> FILTERCLEAR, both of which will cause a disconnect if bloom filters\n> aren't supported. Bloom filter support is (optionally?) indicated via\n> a service bit (BIP 111), so you could assume you know whether they're\n> supported as soon as you receive the VERSION line.\n> \n> fRelay is specified in BIP 37 as:\n> \n>  | 1 byte || fRelay || bool || If false then broadcast transactions will\n>  not be announced until a filter{load,add,clear} command is received. If\n>  missing or true, no change in protocol behaviour occurs.\n> \n> BIP 60 defines the field as \"relay\" and references BIP 37. Don't think\n> it's referenced in any other bips.\n> \n> Cheers,\n> aj\n>"
            },
            {
                "author": "Anthony Towns",
                "date": "2021-01-14T06:46:00",
                "message_text_only": "On Wed, Jan 06, 2021 at 11:35:11AM -0500, Suhas Daftuar via bitcoin-dev wrote:\n> I'm proposing the addition of a new, optional p2p message to allow peers to\n> communicate that they do not want to send or receive (loose) transactions for\n> the lifetime of a connection.\u00a0\n> \n> The goal of this message is to help facilitate\u00a0connections on the network over\n> which only block-related data (blocks/headers/compact blocks/etc) are relayed,\n> to create low-resource connections that help protect against partition attacks\n> on the network.\n\nI think we should separate these ideas -- ie, the protocol change to\nallow indicating that you don't want transactions, and the policy change\nto protect against partition attacks using that protocol addition.\n\nThe idea (obviously?) being that the protocol should be simple and\nflexible enough to support many possible policies.\n\n> ==Specification==\n> # A new disabletx message is added, [...]\n> # A node that has sent or received a disabletx message to/from a peer MUST NOT send any of these messages to the peer:\n> ## inv messages for transactions\n> [...]\n> # It is RECOMMENDED that a node that has sent or received a disabletx message to/from a peer not send any of these messages to the peer:\n> ## addr/getaddr\n> ## addrv2 (BIP 155)\n\nIn particular, I think combining these doesn't make sense for:\n\n * nodes running with -blocksonly (that want to stay up to date with\n   the blockchain, but don't care about txes)\n    - not sending disabletx reduces their potential connectivity, if\n      nodes are willing to accept more disabletx peers due to the lower\n      resource usage\n    - sending disabletx means they can't maintain their addr db and find\n      other nodes to connect to\n\n * non-listening nodes running with -connect to one/more preselected peers\n    - they can't send disabletx generally because they want txes\n    - they don't need addr information (since they only make connections\n      to some known peers), and don't have many peers to relay addresses\n      on to, so are essentially blackholes, so would like to disable\n      addr relay for much the same reasons\n\nSo to me that says the protocol part of the design's not as flexible as\nit should be, which suggests DISABLETX and DISABLEADDR.\n\n(I think I'm going to flesh out the \"FEATURE\" idea as an alternative\nway of dealing with this, but that can be its own thread)\n\nCheers,\naj"
            },
            {
                "author": "Suhas Daftuar",
                "date": "2021-01-19T19:19:12",
                "message_text_only": "On Thu, Jan 14, 2021 at 1:46 AM Anthony Towns <aj at erisian.com.au> wrote:\n\n> > ==Specification==\n> > # A new disabletx message is added, [...]\n> > # A node that has sent or received a disabletx message to/from a peer\n> MUST NOT send any of these messages to the peer:\n> > ## inv messages for transactions\n> > [...]\n> > # It is RECOMMENDED that a node that has sent or received a disabletx\n> message to/from a peer not send any of these messages to the peer:\n> > ## addr/getaddr\n> > ## addrv2 (BIP 155)\n>\n> In particular, I think combining these doesn't make sense for:\n>\n>  * nodes running with -blocksonly (that want to stay up to date with\n>    the blockchain, but don't care about txes)\n>     - not sending disabletx reduces their potential connectivity, if\n>       nodes are willing to accept more disabletx peers due to the lower\n>       resource usage\n>     - sending disabletx means they can't maintain their addr db and find\n>       other nodes to connect to\n>\n\nThis is quite implementation specific, but the Bitcoin Core implementation\nof -blocksonly already differs from what you would get if all outbound\nconnections were treated as block-relay-only peers; I initially tried to\nmake the -blocksonly setting behave the same as block-relay-only\nconnections and never relay transactions, but it turned out that Bitcoin\nCore currently allows users running in -blocksonly mode to sometimes relay\ntransactions themselves (there's even a test for it [1]).\n\nThis isn't compatible with the design of disabletx, so I don't think it\ncould be used.  I think that is okay, as I don't think we need to make\nallowances right now to encourage the use of more -blocksonly nodes on the\nnetwork by prioritizing their existing outbound connections[2]. In the case\nof block-relay-only connections, the next step I plan to propose in the\nBitcoin Core implementation is an increase in the number of inbound slots\nto accommodate additional disabletx peers, to facilitate an eventual\nincrease in the number of outbound block-relay-only connections that\nBitcoin Core would initiate by default (and reduce potential concern about\noverwhelming the network's capacity).\n\n * non-listening nodes running with -connect to one/more preselected peers\n>     - they can't send disabletx generally because they want txes\n>     - they don't need addr information (since they only make connections\n>       to some known peers), and don't have many peers to relay addresses\n>       on to, so are essentially blackholes, so would like to disable\n>       addr relay for much the same reasons\n>\n\nWhile I think it's a valid use-case if someone wants to run nodes in this\nway, I don't see why it has direct bearing on this discussion -- adding\nprotocol support for this use case is not incompatible with my disabletx\nproposal; indeed, once we have worked out an addr relay protocol that\nsupports a peer telling another to not relay addresses, I would plan to use\nit along with disabletx.\n\n-----\n\nThere was some discussion about this proposal on IRC recently as well [3]\nand this issue of mentioning addr-relay in a BIP about tx-relay seems to\nhave drawn some critique.  I think if there were some other use case that\nother developers have which would use disabletx (say, because the current\nfRelay solution also is inadequate for those use cases today), yet would\nwant addr relay on these links, then that would be a good reason to drop\nmention of it from the BIP and defer discussion of addr relay entirely to\nsome new future proposal.  However, I'm not yet aware of such a use case,\nas the -blocksonly one mentioned above does not actually fit (and nor do I\nthink that a -blocksonly mode where transactions are never sent but addr\nmessages are exchanged is necessary beyond how we already do that today, by\njust sending fRelay=false).\n\nMoreover, because there is no specification/BIP that governs how address\nrelay should work on the network, I think that if we just dropped mention\nof addr-relay from the BIP, that software ought to just disable addr-relay\nto nodes sending disabletx, anyway!  Addr relay is currently purely local\npolicy, so I think it's reasonable to conclude that if the only known use\ncase of a peer sending disabletx is for a behavior that also would drop\naddr messages, then optimizing software for that use case is logical and I\nwould propose that myself for how Bitcoin Core behaves.  It seems polite to\nmention this in the BIP as well, so that other software implementors have\nthe same understanding that I have for how this should work, until we have\nan address relay protocol extension that governs it explicitly.\n\n-----\n\nWhy not simply add a \"disableaddr\" type of message now?  I am not opposed\nto someone championing an addr relay protocol, but I personally think it is\npremature.  I'm not aware of any research or shared understanding of what\nthe goals of address relay are or ought to be, particularly as they pertain\nto how addresses for obscure networks ought to propagate to nodes that may\nor may not support those networks.  Moreover, I'm not aware of any research\ninto what relay strategies make sense to achieve any particular relay goals\nwe might come up with.  I imagine that we will someday propose a way for\nsoftware to communicate support for various network types (as defined in\nBIP 155), and that will relate to the kinds of relay policies we expect\nsoftware on the network to be running.  But I think any p2p message we add\nnow to simply \"disableaddr\" would be made redundant by a more extensive\nprotocol in the future, so I don't feel comfortable defending a proposal to\nadd such a message at this time, when it seems to be unnecessary for\ntoday's use cases.\n\nSo to summarize my view on this BIP's recommendation against sending addr\nmessages to disabletx peers: if there is some software that someone plans\nto deploy soon that would seek to use disabletx but would prefer addr relay\non these links, then I think that would cause me to re-evaluate this\nproposal to figure out the best way to achieve both use cases.  For now I\nthink the recommendation I've proposed still makes sense.\n\n--Suhas\n\n[1]\nhttps://github.com/bitcoin/bitcoin/blob/f91587f050d9dceb45fe10129a76a4a9a060a09c/test/functional/p2p_blocksonly.py#L36\n\n[2] Perhaps confusingly, running in -blocksonly mode is largely irrelevant\nto the outbound peering of such a node, as it makes 10 outbound connections\nby default, 8 of which are considered \"full-relay\" yet send fRelay=false to\nnot receive inbound transaction traffic, and 2 considered\n\"block-relay-only\", also setting fRelay=false, but also not ever announcing\ntransactions on those links.  I anticipate that in the future, Bitcoin Core\nsoftware running in -blocksonly mode will continue to treat those 8\n\"full-relay\" connections the same as today, and just start sending the\ndisabletx message on the connections it considers to be truly\nblock-relay-only (the two existing connections, along with any additional\nones we later add).\n\n[3]\nhttps://bitcoin.jonasschnelli.ch/ircmeetings/logs/bitcoin-core-dev/2021/bitcoin-core-dev.2021-01-12-15.00.log.html\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210119/996bcadd/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal for new \"disabletx\" p2p message",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Suhas Daftuar",
                "Anthony Towns",
                "Matt Corallo"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 27196
        }
    },
    {
        "title": "[bitcoin-dev] Extension to BIP Format for Multiple Required SigHash Flags",
        "thread_messages": [
            {
                "author": "Jeremy",
                "date": "2021-01-10T19:39:15",
                "message_text_only": "- *# The Issue:*\n- Currently the PSBT BIP has a slight \"conceptual gap\" where it is possible\nto both:\n-\n- 1) Have a PSBT which obtains multiple signatures per-input with any set\nof SIGHASH Flags\n- 2) Have a PSBT which obtains multiple signatures per-input with a fixed\nSigHash type applying to all signatures.\n-\n- But not possible to:\n3) Have a PSBT which obtains multiple signatures per-input with a fixed\nsighash type applying to a specific key's signature\n4) Gracefully handle a PSBT with multiple uses of the same key, but\ndifferent code-separators.\n\nTo solve this we should introduce a new key type compatible with the\nexisting PSBT Spec (no V2 Requirement).\n\n(I'm not convinced that 4 needs to be fully supported, but I believe that\nit makes sense to lay the groundwork for it to be supported as the handling\nof different requests for sighash flags and multiple uses of the same key\nwith different codeseps should happen from the same field.)\n\nExcerpted relevant BIP text:\n```\n\n* Type: Partial Signature <tt>PSBT_IN_PARTIAL_SIG = 0x02</tt>\n** Key: The public key which corresponds to this signature.\n*** <tt>{0x02}|{public key}</tt>\n** Value: The signature as would be pushed to the stack from a\nscriptSig or witness.\n*** <tt>{signature}</tt>\n\n* Type: Sighash Type <tt>PSBT_IN_SIGHASH_TYPE = 0x03</tt>\n** Key: None. The key must only contain the 1 byte type.\n*** <tt>{0x03}</tt>\n** Value: The 32-bit unsigned integer specifying the sighash type to\nbe used for this input. Signatures for this input must use the sighash\ntype, finalizers must fail to finalize inputs which have signatures\nthat do not match the specified sighash type. Signers who cannot\nproduce signatures with the sighash type must not provide a signature.\n*** <tt>{sighash type}</tt>\n\n```\n\n*# Motivation*:\nAs An example where it may be relevant to cleanly support this, consider\nthe script:\n\n`2 <Key 1 Checks Approved Output Addresses> <Key 2 Checks Input Allowed to\nSpend> 2 CHECKMULTI`\n\nUnder such a script, we might have 2 HSMs operating each key. Key 2 is used\nfirst which verifies internal business logic only about the permissibility\nof spending an output, but does not sign off on any other logic. Key 1 is\nused last which checks that transaction sends only to the currently allowed\naddresses and is signed by Key 1. In such an example (discussion of this\nparticular application is off topic, this is a contrived example to\ndemonstrate the technical issue), it is not possible to express that Key 1\nwill sign with SIGHASH_ALL | ANYONECANPAY and Key 2 will sign with\nSIGHASH_NONE | ANYONECANPAY. It would be impossible to finalize a PSBT with\nSigHash type set, because the sighashes conflict. And while it is possible\nto not have any Sighash type set and successfully finalize, this fails to\ncapture the relevant information around which sighash types are supposed to\nbe used.\n\n(why the example is contrived: one could argue that you should just have\nsuch business logic *always* use SIGHASH_ALL for such business logic\nservers, but there are technical reasons (e.g., adding a change input or\noutput dynamically with SIGHASH_SINGLES) that you might have to do post-hoc)\n\n*# A Solution*\nTo address this I propose to add a new key type\nPSBT_IN_SIGHASH_PER_KEY_TYPE (e.g., 0x0e) which is followed by a public\nkey, a 8-bit bool (must be 0 or 1) if the next field will be a sighash\nflag, optionally a 32-bit unsigned integer representing the sighash type,\nand a compact size integer representing the codeseparator position + 1 (so\nthat 0 may represent no codeseparator) in the scriptpubkey. If a\ncodeseparator is set, the redeem script (+ witness script if witness) must\nbe present.\n\nFinalizers should verify that each requested signature is available.\n\nPSBT_IN_SIGHASH_PER_KEY_TYPE is fully compatible with existing PSBT as long\nas PSBT_IN_SIGHASH_TYPE is not set (or, trivially, if it is set and all\nPSBT_IN_SIGHASH_PER_KEY_TYPE's match it).\n\nFinalizers could deduce which codeseparator was used if multiple\nPSBT_IN_PARTIAL_SIGS are delivered by process of elimination, thus a new\nPSBT_IN_PARTIAL_SIG type to specify codeseparator is not required. However,\nin the case of multiple signatures, PSBT_IN_PARTIAL_SIG would lead to a\nduplicated key-pair specification error so we should also introduce the\ntype PSBT_IN_PARTIAL_SIG_EXTRA which has a key of a public key followed by\na compact size integer code separator (n.b. no +1 value to exclude the\ndefault!), and a signature as a value. Finalizers shall check that the\nPSBT_IN_PARTIAL_SIG_EXTRA values match the corresponding\nPSBT_IN_SIGHASH_PER_KEY_TYPE requests. Compatibility: PSBT_IN_PARTIAL_SIG\ndoes not overlap with PSBT_IN_PARTIAL_SIG_EXTRA as '_EXTRA must specify a\ncodeseparator. Thus, as long as no repeated key/codeseparators are used,\nthe new PSBT remains fully backwards compatible.\n\n--\n@JeremyRubin <https://twitter.com/JeremyRubin>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210110/9f254819/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Extension to BIP Format for Multiple Required SigHash Flags",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Jeremy"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5054
        }
    },
    {
        "title": "[bitcoin-dev] Bitcoin Core 0.21.0 released",
        "thread_messages": [
            {
                "author": "Wladimir J. van der Laan",
                "date": "2021-01-14T13:58:35",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n0.21.0 Release Notes\n====================\n\nBitcoin Core version 0.21.0 is now available from:\n\n  <https://bitcoincore.org/bin/bitcoin-core-0.21.0/>\n\nOr through BitTorrent:\n\n    magnet:?xt=urn:btih:665c5bdc6f49948e47c1098d91ace98bd216150e&dn=bitcoin-core-0.21.0&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&tr=udp%3A%2F%2Fexplodie.org%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.torrent.eu.org%3A451%2Fannounce&tr=udp%3A%2F%2Ftracker.bitcoin.sprovoost.nl%3A6969\n\nThis release includes new features, various bug fixes and performance\nimprovements, as well as updated translations.\n\nPlease report bugs using the issue tracker at GitHub:\n\n  <https://github.com/bitcoin/bitcoin/issues>\n\nTo receive security and update notifications, please subscribe to:\n\n  <https://bitcoincore.org/en/list/announcements/join/>\n\nHow to Upgrade\n==============\n\nIf you are running an older version, shut it down. Wait until it has completely\nshut down (which might take a few minutes in some cases), then run the\ninstaller (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\nor `bitcoind`/`bitcoin-qt` (on Linux).\n\nUpgrading directly from a version of Bitcoin Core that has reached its EOL is\npossible, but it might take some time if the data directory needs to be migrated. Old\nwallet versions of Bitcoin Core are generally supported.\n\nCompatibility\n==============\n\nBitcoin Core is supported and extensively tested on operating systems\nusing the Linux kernel, macOS 10.12+, and Windows 7 and newer.  Bitcoin\nCore should also work on most other Unix-like systems but is not as\nfrequently tested on them.  It is not recommended to use Bitcoin Core on\nunsupported systems.\n\n- From Bitcoin Core 0.20.0 onwards, macOS versions earlier than 10.12 are no\nlonger supported. Additionally, Bitcoin Core does not yet change appearance\nwhen macOS \"dark mode\" is activated.\n\nThe node's known peers are persisted to disk in a file called `peers.dat`. The\nformat of this file has been changed in a backwards-incompatible way in order to\naccommodate the storage of Tor v3 and other BIP155 addresses. This means that if\nthe file is modified by 0.21.0 or newer then older versions will not be able to\nread it. Those old versions, in the event of a downgrade, will log an error\nmessage \"Incorrect keysize in addrman deserialization\" and will continue normal\noperation as if the file was missing, creating a new empty one. (#19954, #20284)\n\nNotable changes\n===============\n\nP2P and network changes\n- -----------------------\n\n- - The mempool now tracks whether transactions submitted via the wallet or RPCs\n  have been successfully broadcast. Every 10-15 minutes, the node will try to\n  announce unbroadcast transactions until a peer requests it via a `getdata`\n  message or the transaction is removed from the mempool for other reasons.\n  The node will not track the broadcast status of transactions submitted to the\n  node using P2P relay. This version reduces the initial broadcast guarantees\n  for wallet transactions submitted via P2P to a node running the wallet. (#18038)\n\n- - The size of the set of transactions that peers have announced and we consider\n  for requests has been reduced from 100000 to 5000 (per peer), and further\n  announcements will be ignored when that limit is reached. If you need to dump\n  (very) large batches of transactions, exceptions can be made for trusted\n  peers using the \"relay\" network permission. For localhost for example it can\n  be enabled using the command line option `-whitelist=relay at 127.0.0.1`.\n  (#19988)\n\n- - This release adds support for Tor version 3 hidden services, and rumoring them\n  over the network to other peers using\n  [BIP155](https://github.com/bitcoin/bips/blob/master/bip-0155.mediawiki).\n  Version 2 hidden services are still fully supported by Bitcoin Core, but the\n  Tor network will start\n  [deprecating](https://blog.torproject.org/v2-deprecation-timeline) them in the\n  coming months. (#19954)\n\n- - The Tor onion service that is automatically created by setting the\n  `-listenonion` configuration parameter will now be created as a Tor v3 service\n  instead of Tor v2. The private key that was used for Tor v2 (if any) will be\n  left untouched in the `onion_private_key` file in the data directory (see\n  `-datadir`) and can be removed if not needed. Bitcoin Core will no longer\n  attempt to read it. The private key for the Tor v3 service will be saved in a\n  file named `onion_v3_private_key`. To use the deprecated Tor v2 service (not\n  recommended), the `onion_private_key` can be copied over\n  `onion_v3_private_key`, e.g.\n  `cp -f onion_private_key onion_v3_private_key`. (#19954)\n\n- - The client writes a file (`anchors.dat`) at shutdown with the network addresses\n  of the node\u2019s two outbound block-relay-only peers (so called \"anchors\"). The\n  next time the node starts, it reads this file and attempts to reconnect to those\n  same two peers. This prevents an attacker from using node restarts to trigger a\n  complete change in peers, which would be something they could use as part of an\n  eclipse attack. (#17428)\n\n- - This release adds support for serving\n  [BIP157](https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki) compact\n  filters to peers on the network when enabled using\n  `-blockfilterindex=1 -peercfilters=1`. (#16442)\n\n- - This release adds support for signets\n  ([BIP325](https://github.com/bitcoin/bips/blob/master/bip-0325.mediawiki)) in\n  addition to the existing mainnet, testnet, and regtest networks. Signets are\n  centrally-controlled test networks, allowing them to be more predictable\n  test environments than the older testnet. One public signet is maintained, and\n  selectable using `-signet`. It is also possible to create personal signets.\n  (#18267).\n\n- - This release implements\n  [BIP339](https://github.com/bitcoin/bips/blob/master/bip-0339.mediawiki)\n  wtxid relay. When negotiated, transactions are announced using their wtxid\n  instead of their txid. (#18044).\n\n- - This release implements the proposed Taproot consensus rules\n  ([BIP341](https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki) and\n  [BIP342](https://github.com/bitcoin/bips/blob/master/bip-0342.mediawiki)),\n  without activation on mainnet. Experimentation with Taproot can be done on\n  signet, where its rules are already active. (#19553)\n\nUpdated RPCs\n- ------------\n\n- - The `getpeerinfo` RPC has a new `network` field that provides the type of\n  network (\"ipv4\", \"ipv6\", or \"onion\") that the peer connected through. (#20002)\n\n- - The `getpeerinfo` RPC now has additional `last_block` and `last_transaction`\n  fields that return the UNIX epoch time of the last block and the last *valid*\n  transaction received from each peer. (#19731)\n\n- - `getnetworkinfo` now returns two new fields, `connections_in` and\n  `connections_out`, that provide the number of inbound and outbound peer\n  connections. These new fields are in addition to the existing `connections`\n  field, which returns the total number of peer connections. (#19405)\n\n- - Exposed transaction version numbers are now treated as unsigned 32-bit\n  integers instead of signed 32-bit integers. This matches their treatment in\n  consensus logic. Versions greater than 2 continue to be non-standard\n  (matching previous behavior of smaller than 1 or greater than 2 being\n  non-standard). Note that this includes the `joinpsbt` command, which combines\n  partially-signed transactions by selecting the highest version number.\n  (#16525)\n\n- - `getmempoolinfo` now returns an additional `unbroadcastcount` field. The\n  mempool tracks locally submitted transactions until their initial broadcast\n  is acknowledged by a peer. This field returns the count of transactions\n  waiting for acknowledgement.\n\n- - Mempool RPCs such as `getmempoolentry` and `getrawmempool` with\n  `verbose=true` now return an additional `unbroadcast` field. This indicates\n  whether initial broadcast of the transaction has been acknowledged by a\n  peer. `getmempoolancestors` and `getmempooldescendants` are also updated.\n\n- - The `getpeerinfo` RPC no longer returns the `banscore` field unless the configuration\n  option `-deprecatedrpc=banscore` is used. The `banscore` field will be fully\n  removed in the next major release. (#19469)\n\n- - The `testmempoolaccept` RPC returns `vsize` and a `fees` object with the `base` fee\n  if the transaction would pass validation. (#19940)\n\n- - The `getpeerinfo` RPC now returns a `connection_type` field. This indicates\n  the type of connection established with the peer. It will return one of six\n  options. For more information, see the `getpeerinfo` help documentation.\n  (#19725)\n\n- - The `getpeerinfo` RPC no longer returns the `addnode` field by default. This\n  field will be fully removed in the next major release.  It can be accessed\n  with the configuration option `-deprecatedrpc=getpeerinfo_addnode`. However,\n  it is recommended to instead use the `connection_type` field (it will return\n  `manual` when addnode is true). (#19725)\n\n- - The `getpeerinfo` RPC no longer returns the `whitelisted` field by default.\n  This field will be fully removed in the next major release. It can be accessed\n  with the configuration option `-deprecatedrpc=getpeerinfo_whitelisted`. However,\n  it is recommended to instead use the `permissions` field to understand if specific\n  privileges have been granted to the peer. (#19770)\n\n- - The `walletcreatefundedpsbt` RPC call will now fail with\n  `Insufficient funds` when inputs are manually selected but are not enough to cover\n  the outputs and fee. Additional inputs can automatically be added through the\n  new `add_inputs` option. (#16377)\n\n- - The `fundrawtransaction` RPC now supports `add_inputs` option that when `false`\n  prevents adding more inputs if necessary and consequently the RPC fails.\n\nChanges to Wallet or GUI related RPCs can be found in the GUI or Wallet section below.\n\nNew RPCs\n- --------\n\n- - The `getindexinfo` RPC returns the actively running indices of the node,\n  including their current sync status and height. It also accepts an `index_name`\n  to specify returning the status of that index only. (#19550)\n\nBuild System\n- ------------\n\nUpdated settings\n- ----------------\n\n- - The same ZeroMQ notification (e.g. `-zmqpubhashtx=address`) can now be\n  specified multiple times to publish the same notification to different ZeroMQ\n  sockets. (#18309)\n\n- - The `-banscore` configuration option, which modified the default threshold for\n  disconnecting and discouraging misbehaving peers, has been removed as part of\n  changes in 0.20.1 and in this release to the handling of misbehaving peers.\n  Refer to \"Changes regarding misbehaving peers\" in the 0.20.1 release notes for\n  details. (#19464)\n\n- - The `-debug=db` logging category, which was deprecated in 0.20 and replaced by\n  `-debug=walletdb` to distinguish it from `coindb`, has been removed. (#19202)\n\n- - A `download` permission has been extracted from the `noban` permission. For\n  compatibility, `noban` implies the `download` permission, but this may change\n  in future releases. Refer to the help of the affected settings `-whitebind`\n  and `-whitelist` for more details. (#19191)\n\n- - Netmasks that contain 1-bits after 0-bits (the 1-bits are not contiguous on\n  the left side, e.g. 255.0.255.255) are no longer accepted. They are invalid\n  according to RFC 4632. Netmasks are used in the `-rpcallowip` and `-whitelist`\n  configuration options and in the `setban` RPC. (#19628)\n\n- - The `-blocksonly` setting now completely disables fee estimation. (#18766)\n\nChanges to Wallet or GUI related settings can be found in the GUI or Wallet section below.\n\nTools and Utilities\n- -------------------\n\n- - A new `bitcoin-cli -netinfo` command provides a network peer connections\n  dashboard that displays data from the `getpeerinfo` and `getnetworkinfo` RPCs\n  in a human-readable format. An optional integer argument from `0` to `4` may\n  be passed to see increasing levels of detail. (#19643)\n\n- - A new `bitcoin-cli -generate` command, equivalent to RPC `generatenewaddress`\n  followed by `generatetoaddress`, can generate blocks for command line testing\n  purposes. This is a client-side version of the former `generate` RPC. See the\n  help for details. (#19133)\n\n- - The `bitcoin-cli -getinfo` command now displays the wallet name and balance for\n  each of the loaded wallets when more than one is loaded (e.g. in multiwallet\n  mode) and a wallet is not specified with `-rpcwallet`. (#18594)\n\n- - The `connections` field of `bitcoin-cli -getinfo` is now expanded to return a JSON\n  object with `in`, `out` and `total` numbers of peer connections. It previously\n  returned a single integer value for the total number of peer connections. (#19405)\n\nNew settings\n- ------------\n\n- - The `startupnotify` option is used to specify a command to\n  execute when Bitcoin Core has finished with its startup\n  sequence. (#15367)\n\nWallet\n- ------\n\n- - Backwards compatibility has been dropped for two `getaddressinfo` RPC\n  deprecations, as notified in the 0.20 release notes. The deprecated `label`\n  field has been removed as well as the deprecated `labels` behavior of\n  returning a JSON object containing `name` and `purpose` key-value pairs. Since\n  0.20, the `labels` field returns a JSON array of label names. (#19200)\n\n- - To improve wallet privacy, the frequency of wallet rebroadcast attempts is\n  reduced from approximately once every 15 minutes to once every 12-36 hours.\n  To maintain a similar level of guarantee for initial broadcast of wallet\n  transactions, the mempool tracks these transactions as a part of the newly\n  introduced unbroadcast set. See the \"P2P and network changes\" section for\n  more information on the unbroadcast set. (#18038)\n\n- - The `sendtoaddress` and `sendmany` RPCs accept an optional `verbose=True`\n  argument to also return the fee reason about the sent tx. (#19501)\n\n- - The wallet can create a transaction without change even when the keypool is\n  empty. Previously it failed. (#17219)\n\n- - The `-salvagewallet` startup option has been removed. A new `salvage` command\n  has been added to the `bitcoin-wallet` tool which performs the salvage\n  operations that `-salvagewallet` did. (#18918)\n\n- - A new configuration flag `-maxapsfee` has been added, which sets the max\n  allowed avoid partial spends (APS) fee. It defaults to 0 (i.e. fee is the\n  same with and without APS). Setting it to -1 will disable APS, unless\n  `-avoidpartialspends` is set. (#14582)\n\n- - The wallet will now avoid partial spends (APS) by default, if this does not\n  result in a difference in fees compared to the non-APS variant. The allowed\n  fee threshold can be adjusted using the new `-maxapsfee` configuration\n  option. (#14582)\n\n- - The `createwallet`, `loadwallet`, and `unloadwallet` RPCs now accept\n  `load_on_startup` options to modify the settings list. Unless these options\n  are explicitly set to true or false, the list is not modified, so the RPC\n  methods remain backwards compatible. (#15937)\n\n- - A new `send` RPC with similar syntax to `walletcreatefundedpsbt`, including\n  support for coin selection and a custom fee rate, is added. The `send` RPC is\n  experimental and may change in subsequent releases. (#16378)\n\n- - The `estimate_mode` parameter is now case-insensitive in the `bumpfee`,\n  `fundrawtransaction`, `sendmany`, `sendtoaddress`, `send` and\n  `walletcreatefundedpsbt` RPCs. (#11413)\n\n- - The `bumpfee` RPC now uses `conf_target` rather than `confTarget` in the\n  options. (#11413)\n\n- - `fundrawtransaction` and `walletcreatefundedpsbt` when used with the\n  `lockUnspents` argument now lock manually selected coins, in addition to\n  automatically selected coins. Note that locked coins are never used in\n  automatic coin selection, but can still be manually selected. (#18244)\n\n- - The `-zapwallettxes` startup option has been removed and its functionality\n  removed from the wallet.  This option was originally intended to allow for\n  rescuing wallets which were affected by a malleability attack. More recently,\n  it has been used in the fee bumping of transactions that did not signal RBF.\n  This functionality has been superseded with the abandon transaction feature. (#19671)\n\n- - The error code when no wallet is loaded, but a wallet RPC is called, has been\n  changed from `-32601` (method not found) to `-18` (wallet not found).\n  (#20101)\n\n### Automatic wallet creation removed\n\nBitcoin Core will no longer automatically create new wallets on startup. It will\nload existing wallets specified by `-wallet` options on the command line or in\n`bitcoin.conf` or `settings.json` files. And by default it will also load a\ntop-level unnamed (\"\") wallet. However, if specified wallets don't exist,\nBitcoin Core will now just log warnings instead of creating new wallets with\nnew keys and addresses like previous releases did.\n\nNew wallets can be created through the GUI (which has a more prominent create\nwallet option), through the `bitcoin-cli createwallet` or `bitcoin-wallet\ncreate` commands, or the `createwallet` RPC. (#15454, #20186)\n\n### Experimental Descriptor Wallets\n\nPlease note that Descriptor Wallets are still experimental and not all expected functionality\nis available. Additionally there may be some bugs and current functions may change in the future.\nBugs and missing functionality can be reported to the [issue tracker](https://github.com/bitcoin/bitcoin/issues).\n\n0.21 introduces a new type of wallet - Descriptor Wallets. Descriptor Wallets store\nscriptPubKey information using output descriptors. This is in contrast to the Legacy Wallet\nstructure where keys are used to implicitly generate scriptPubKeys and addresses. Because of this\nshift to being script based instead of key based, many of the confusing things that Legacy\nWallets do are not possible with Descriptor Wallets. Descriptor Wallets use a definition\nof \"mine\" for scripts which is simpler and more intuitive than that used by Legacy Wallets.\nDescriptor Wallets also uses different semantics for watch-only things and imports.\n\nAs Descriptor Wallets are a new type of wallet, their introduction does not affect existing wallets.\nUsers who already have a Bitcoin Core wallet can continue to use it as they did before without\nany change in behavior. Newly created Legacy Wallets (which remains the default type of wallet) will\nbehave as they did in previous versions of Bitcoin Core.\n\nThe differences between Descriptor Wallets and Legacy Wallets are largely limited to non user facing\nthings. They are intended to behave similarly except for the import/export and watchonly functionality\nas described below.\n\n#### Creating Descriptor Wallets\n\nDescriptor wallets are not the default type of wallet.\n\nIn the GUI, a checkbox has been added to the Create Wallet Dialog to indicate that a\nDescriptor Wallet should be created. And a `descriptors` option has been added to `createwallet` RPC.\nSetting `descriptors` to `true` will create a Descriptor Wallet instead of a Legacy Wallet.\n\nWithout those options being set, a Legacy Wallet will be created instead.\n\n#### `IsMine` Semantics\n\n`IsMine` refers to the function used to determine whether a script belongs to the wallet.\nThis is used to determine whether an output belongs to the wallet. `IsMine` in Legacy Wallets\nreturns true if the wallet would be able to sign an input that spends an output with that script.\nSince keys can be involved in a variety of different scripts, this definition for `IsMine` can\nlead to many unexpected scripts being considered part of the wallet.\n\nWith Descriptor Wallets, descriptors explicitly specify the set of scripts that are owned by\nthe wallet. Since descriptors are deterministic and easily enumerable, users will know exactly\nwhat scripts the wallet will consider to belong to it. Additionally the implementation of `IsMine`\nin Descriptor Wallets is far simpler than for Legacy Wallets. Notably, in Legacy Wallets, `IsMine`\nallowed for users to take one type of address (e.g. P2PKH), mutate it into another address type\n(e.g. P2WPKH), and the wallet would still detect outputs sending to the new address type\neven without that address being requested from the wallet. Descriptor Wallets do not\nallow for this and will only watch for the addresses that were explicitly requested from the wallet.\n\nThese changes to `IsMine` will make it easier to reason about what scripts the wallet will\nactually be watching for in outputs. However for the vast majority of users, this change is\nlargely transparent and will not have noticeable effect.\n\n#### Imports and Exports\n\nIn Legacy Wallets, raw scripts and keys could be imported to the wallet. Those imported scripts\nand keys are treated separately from the keys generated by the wallet. This complicates the `IsMine`\nlogic as it has to distinguish between spendable and watchonly.\n\nDescriptor Wallets handle importing scripts and keys differently. Only complete descriptors can be\nimported. These descriptors are then added to the wallet as if it were a descriptor generated by\nthe wallet itself. This simplifies the `IsMine` logic so that it no longer has to distinguish\nbetween spendable and watchonly. As such, the watchonly model for Descriptor Wallets is also\ndifferent and described in more detail in the next section.\n\nTo import into a Descriptor Wallet, a new `importdescriptors` RPC has been added that uses a syntax\nsimilar to that of `importmulti`.\n\nAs Legacy Wallets and Descriptor Wallets use different mechanisms for storing and importing scripts and keys\nthe existing import RPCs have been disabled for descriptor wallets.\nNew export RPCs for Descriptor Wallets have not yet been added.\n\nThe following RPCs are disabled for Descriptor Wallets:\n\n* `importprivkey`\n* `importpubkey`\n* `importaddress`\n* `importwallet`\n* `dumpprivkey`\n* `dumpwallet`\n* `importmulti`\n* `addmultisigaddress`\n* `sethdseed`\n\n#### Watchonly Wallets\n\nA Legacy Wallet contains both private keys and scripts that were being watched.\nThose watched scripts would not contribute to your normal balance. In order to see the watchonly\nbalance and to use watchonly things in transactions, an `include_watchonly` option was added\nto many RPCs that would allow users to do that. However it is easy to forget to include this option.\n\nDescriptor Wallets move to a per-wallet watchonly model. Instead an entire wallet is considered to be\nwatchonly depending on whether it was created with private keys disabled. This eliminates the need\nto distinguish between things that are watchonly and things that are not within a wallet itself.\n\nThis change does have a caveat. If a Descriptor Wallet with private keys *enabled* has\na multiple key descriptor without all of the private keys (e.g. `multi(...)` with only one private key),\nthen the wallet will fail to sign and broadcast transactions. Such wallets would need to use the PSBT\nworkflow but the typical GUI Send, `sendtoaddress`, etc. workflows would still be available, just\nnon-functional.\n\nThis issue is worsened if the wallet contains both single key (e.g. `wpkh(...)`) descriptors and such\nmultiple key descriptors as some transactions could be signed and broadcast and others not. This is\ndue to some transactions containing only single key inputs, while others would contain both single\nkey and multiple key inputs, depending on which are available and how the coin selection algorithm\nselects inputs. However this is not considered to be a supported use case; multisigs\nshould be in their own wallets which do not already have descriptors. Although users cannot export\ndescriptors with private keys for now as explained earlier.\n\n#### BIP 44/49/84 Support\n\nThe change to using descriptors changes the default derivation paths used by Bitcoin Core\nto adhere to BIP 44/49/84. Descriptors with different derivation paths can be imported without\nissue.\n\n#### SQLite Database Backend\n\nDescriptor wallets use SQLite for the wallet file instead of the Berkeley DB used in legacy wallets.\nThis will break compatibility with any existing tooling that operates on wallets, however compatibility\nwas already being broken by the move to descriptors.\n\n### Wallet RPC changes\n\n- - The `upgradewallet` RPC replaces the `-upgradewallet` command line option.\n  (#15761)\n\n- - The `settxfee` RPC will fail if the fee was set higher than the `-maxtxfee`\n  command line setting. The wallet will already fail to create transactions\n  with fees higher than `-maxtxfee`. (#18467)\n\n- - A new `fee_rate` parameter/option denominated in satoshis per vbyte (sat/vB)\n  is introduced to the `sendtoaddress`, `sendmany`, `fundrawtransaction` and\n  `walletcreatefundedpsbt` RPCs as well as to the experimental new `send`\n  RPC. The legacy `feeRate` option in `fundrawtransaction` and\n  `walletcreatefundedpsbt` still exists for setting a fee rate in BTC per 1,000\n  vbytes (BTC/kvB), but it is expected to be deprecated soon to avoid\n  confusion. For these RPCs, the fee rate error message is updated from BTC/kB\n  to sat/vB and the help documentation in BTC/kB is updated to BTC/kvB. The\n  `send` and `sendtoaddress` RPC examples are updated to aid users in creating\n  transactions with explicit fee rates. (#20305, #11413)\n\n- - The `bumpfee` RPC `fee_rate` option is changed from BTC/kvB to sat/vB and the\n  help documentation is updated. Users are warned that this is a breaking API\n  change, but it should be relatively benign: the large (100,000 times)\n  difference between BTC/kvB and sat/vB units means that a transaction with a\n  fee rate mistakenly calculated in BTC/kvB rather than sat/vB should raise an\n  error due to the fee rate being set too low. In the worst case, the\n  transaction may send at 1 sat/vB, but as Replace-by-Fee (BIP125 RBF) is active\n  by default when an explicit fee rate is used, the transaction fee can be\n  bumped. (#20305)\n\nGUI changes\n- -----------\n\n- - Wallets created or loaded in the GUI will now be automatically loaded on\n  startup, so they don't need to be manually reloaded next time Bitcoin Core is\n  started. The list of wallets to load on startup is stored in\n  `\\<datadir\\>/settings.json` and augments any command line or `bitcoin.conf`\n  `-wallet=` settings that specify more wallets to load. Wallets that are\n  unloaded in the GUI get removed from the settings list so they won't load\n  again automatically next startup. (#19754)\n\n- - The GUI Peers window no longer displays a \"Ban Score\" field. This is part of\n  changes in 0.20.1 and in this release to the handling of misbehaving\n  peers. Refer to \"Changes regarding misbehaving peers\" in the 0.20.1 release\n  notes for details. (#19512)\n\nLow-level changes\n=================\n\nRPC\n- ---\n\n- - To make RPC `sendtoaddress` more consistent with `sendmany` the following error\n    `sendtoaddress` codes were changed from `-4` to `-6`:\n  - Insufficient funds\n  - Fee estimation failed\n  - Transaction has too long of a mempool chain\n\n- - The `sendrawtransaction` error code for exceeding `maxfeerate` has been changed from\n  `-26` to `-25`. The error string has been changed from \"absurdly-high-fee\" to\n  \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate).\" The\n  `testmempoolaccept` RPC returns `max-fee-exceeded` rather than `absurdly-high-fee`\n  as the `reject-reason`. (#19339)\n\n- - To make wallet and rawtransaction RPCs more consistent, the error message for\n  exceeding maximum feerate has been changed to \"Fee exceeds maximum configured by user\n  (e.g. -maxtxfee, maxfeerate).\" (#19339)\n\nTests\n- -----\n\n- - The BIP 325 default signet can be enabled by the `-chain=signet` or `-signet`\n  setting. The settings `-signetchallenge` and `-signetseednode` allow\n  enabling a custom signet.\n\n- - The `generateblock` RPC allows testers using regtest mode to\n  generate blocks that consist of a custom set of transactions. (#17693)\n\n0.21.0 change log\n=================\n\n### Consensus\n- - #18267 BIP-325: Signet (kallewoof)\n- - #20016 uint256: 1 is a constant (ajtowns)\n- - #20006 Fix misleading error message: Clean stack rule (sanket1729)\n- - #19953 Implement BIP 340-342 validation (Schnorr/taproot/tapscript) (sipa)\n- - #20169 Taproot follow-up: Make ComputeEntrySchnorr and ComputeEntryECDSA const to clarify contract (practicalswift)\n\n### Policy\n- - #18766 Disable fee estimation in blocksonly mode (darosior)\n- - #19630 Cleanup fee estimation code (darosior)\n- - #20165 Only relay Taproot spends if next block has it active (sipa)\n\n### Mining\n- - #17946 Fix GBT: Restore \"!segwit\" and \"csv\" to \"rules\" key (luke-jr)\n\n### Privacy\n- - #16432 Add privacy to the Overview page (hebasto)\n- - #18861 Do not answer GETDATA for to-be-announced tx (sipa)\n- - #18038 Mempool tracks locally submitted transactions to improve wallet privacy (amitiuttarwar)\n- - #19109 Only allow getdata of recently announced invs (sipa)\n\n### Block and transaction handling\n- - #17737 Add ChainstateManager, remove BlockManager global (jamesob)\n- - #18960 indexes: Add compact block filter headers cache (jnewbery)\n- - #13204 Faster sigcache nonce (JeremyRubin)\n- - #19088 Use std::chrono throughout some validation functions (fanquake)\n- - #19142 Make VerifyDB level 4 interruptible (MarcoFalke)\n- - #17994 Flush undo files after last block write (kallewoof)\n- - #18990 log: Properly log txs rejected from mempool (MarcoFalke)\n- - #18984 Remove unnecessary input blockfile SetPos (dgenr8)\n- - #19526 log: Avoid treating remote misbehvior as local system error (MarcoFalke)\n- - #18044 Use wtxid for transaction relay (sdaftuar)\n- - #18637 coins: allow cache resize after init (jamesob)\n- - #19854 Avoid locking CTxMemPool::cs recursively in simple cases (hebasto)\n- - #19478 Remove CTxMempool::mapLinks data structure member (JeremyRubin)\n- - #19927 Reduce direct `g_chainman` usage (dongcarl)\n- - #19898 log: print unexpected version warning in validation log category (n-thumann)\n- - #20036 signet: Add assumed values for default signet (MarcoFalke)\n- - #20048 chainparams: do not log signet startup messages for other chains (jonatack)\n- - #19339 re-delegate absurd fee checking from mempool to clients (glozow)\n- - #20035 signet: Fix uninitialized read in validation (MarcoFalke)\n- - #20157 Bugfix: chainparams: Add missing (always enabled) Taproot deployment for Signet (luke-jr)\n- - #20263 Update assumed chain params (MarcoFalke)\n- - #20372 Avoid signed integer overflow when loading a mempool.dat file with a malformed time field (practicalswift)\n- - #18621 script: Disallow silent bool -> cscript conversion (MarcoFalke)\n- - #18612, #18732 script: Remove undocumented and unused operator+ (MarcoFalke)\n- - #19317 Add a left-justified width field to `log2_work` component for a uniform debug.log output (jamesgmorgan)\n\n### P2P protocol and network code\n- - #18544 Limit BIP37 filter lifespan (active between `filterload`..`filterclear`) (theStack)\n- - #18806 Remove is{Empty,Full} flags from CBloomFilter, clarify CVE fix (theStack)\n- - #18512 Improve asmap checks and add sanity check (sipa)\n- - #18877 Serve cfcheckpt requests (jnewbery)\n- - #18895 Unbroadcast followups: rpcs, nLastResend, mempool sanity check (gzhao408)\n- - #19010 net processing: Add support for `getcfheaders` (jnewbery)\n- - #16939 Delay querying DNS seeds (ajtowns)\n- - #18807 Unbroadcast follow-ups (amitiuttarwar)\n- - #19044 Add support for getcfilters (jnewbery)\n- - #19084 improve code documentation for dns seed behaviour (ajtowns)\n- - #19260 disconnect peers that send filterclear + update existing filter msg disconnect logic (gzhao408)\n- - #19284 Add seed.bitcoin.wiz.biz to DNS seeds (wiz)\n- - #19322 split PushInventory() (jnewbery)\n- - #19204 Reduce inv traffic during IBD (MarcoFalke)\n- - #19470 banlist: log post-swept banlist size at startup (fanquake)\n- - #19191 Extract download permission from noban (MarcoFalke)\n- - #14033 Drop `CADDR_TIME_VERSION` checks now that `MIN_PEER_PROTO_VERSION` is greater (Empact)\n- - #19464 net, rpc: remove -banscore option, deprecate banscore in getpeerinfo (jonatack)\n- - #19514 [net/net processing] check banman pointer before dereferencing (jnewbery)\n- - #19512 banscore updates to gui, tests, release notes (jonatack)\n- - #19360 improve encapsulation of CNetAddr (vasild)\n- - #19217 disambiguate block-relay-only variable names from blocksonly variables (glowang)\n- - #19473 Add -networkactive option (hebasto)\n- - #19472 [net processing] Reduce `cs_main` scope in MaybeDiscourageAndDisconnect() (jnewbery)\n- - #19583 clean up Misbehaving() (jnewbery)\n- - #19534 save the network type explicitly in CNetAddr (vasild)\n- - #19569 Enable fetching of orphan parents from wtxid peers (sipa)\n- - #18991 Cache responses to GETADDR to prevent topology leaks (naumenkogs)\n- - #19596 Deduplicate parent txid loop of requested transactions and missing parents of orphan transactions (sdaftuar)\n- - #19316 Cleanup logic around connection types (amitiuttarwar)\n- - #19070 Signal support for compact block filters with `NODE_COMPACT_FILTERS` (jnewbery)\n- - #19705 Shrink CAddress from 48 to 40 bytes on x64 (vasild)\n- - #19704 Move ProcessMessage() to PeerLogicValidation (jnewbery)\n- - #19628 Change CNetAddr::ip to have flexible size (vasild)\n- - #19797 Remove old check for 3-byte shifted IP addresses from pre-0.2.9 nodes (#19797)\n- - #19607 Add Peer struct for per-peer data in net processing (jnewbery)\n- - #19857 improve nLastBlockTime and nLastTXTime documentation (jonatack)\n- - #19724 Cleanup connection types- followups (amitiuttarwar)\n- - #19670 Protect localhost and block-relay-only peers from eviction (sdaftuar)\n- - #19728 Increase the ip address relay branching factor for unreachable networks (sipa)\n- - #19879 Miscellaneous wtxid followups (amitiuttarwar)\n- - #19697 Improvements on ADDR caching (naumenkogs)\n- - #17785 Unify Send and Receive protocol versions (hebasto)\n- - #19845 CNetAddr: add support to (un)serialize as ADDRv2 (vasild)\n- - #19107 Move all header verification into the network layer, extend logging (troygiorshev)\n- - #20003 Exit with error message if -proxy is specified without arguments (instead of continuing without proxy server) (practicalswift)\n- - #19991 Use alternative port for incoming Tor connections (hebasto)\n- - #19723 Ignore unknown messages before VERACK (sdaftuar)\n- - #19954 Complete the BIP155 implementation and upgrade to TORv3 (vasild)\n- - #20119 BIP155 follow-ups (sipa)\n- - #19988 Overhaul transaction request logic (sipa)\n- - #17428 Try to preserve outbound block-relay-only connections during restart (hebasto)\n- - #19911 Guard `vRecvGetData` with `cs_vRecv` and `orphan_work_set` with `g_cs_orphans` (narula)\n- - #19753 Don't add AlreadyHave transactions to recentRejects (troygiorshev)\n- - #20187 Test-before-evict bugfix and improvements for block-relay-only peers (sdaftuar)\n- - #20237 Hardcoded seeds update for 0.21 (laanwj)\n- - #20212 Fix output of peer address in version message (vasild)\n- - #20284 Ensure old versions don't parse peers.dat (vasild)\n- - #20405 Avoid calculating onion address checksum when version is not 3 (lontivero)\n- - #20564 Don't send 'sendaddrv2' to pre-70016 software, and send before 'verack' (sipa)\n- - #20660 Move signet onion seed from v2 to v3 (Sjors)\n\n### Wallet\n- - #18262 Exit selection when `best_waste` is 0 (achow101)\n- - #17824 Prefer full destination groups in coin selection (fjahr)\n- - #17219 Allow transaction without change if keypool is empty (Sjors)\n- - #15761 Replace -upgradewallet startup option with upgradewallet RPC (achow101)\n- - #18671 Add BlockUntilSyncedToCurrentChain to dumpwallet (MarcoFalke)\n- - #16528 Native Descriptor Wallets using DescriptorScriptPubKeyMan (achow101)\n- - #18777 Recommend absolute path for dumpwallet (MarcoFalke)\n- - #16426 Reverse `cs_main`, `cs_wallet` lock order and reduce `cs_main` locking (ariard)\n- - #18699 Avoid translating RPC errors (MarcoFalke)\n- - #18782 Make sure no DescriptorScriptPubKeyMan or WalletDescriptor members are left uninitialized after construction (practicalswift)\n- - #9381 Remove CWalletTx merging logic from AddToWallet (ryanofsky)\n- - #16946 Include a checksum of encrypted private keys (achow101)\n- - #17681 Keep inactive seeds after sethdseed and derive keys from them as needed (achow101)\n- - #18918 Move salvagewallet into wallettool (achow101)\n- - #14988 Fix for confirmed column in csv export for payment to self transactions (benthecarman)\n- - #18275 Error if an explicit fee rate was given but the needed fee rate differed (kallewoof)\n- - #19054 Skip hdKeypath of 'm' when determining inactive hd seeds (achow101)\n- - #17938 Disallow automatic conversion between disparate hash types (Empact)\n- - #19237 Check size after unserializing a pubkey (elichai)\n- - #11413 sendtoaddress/sendmany: Add explicit feerate option (kallewoof)\n- - #18850 Fix ZapSelectTx to sync wallet spends (bvbfan)\n- - #18923 Never schedule MaybeCompactWalletDB when `-flushwallet` is off (MarcoFalke)\n- - #19441 walletdb: Don't reinitialize desc cache with multiple cache entries (achow101)\n- - #18907 walletdb: Don't remove database transaction logs and instead error (achow101)\n- - #19334 Introduce WalletDatabase abstract class (achow101)\n- - #19335 Cleanup and separate BerkeleyDatabase and BerkeleyBatch (achow101)\n- - #19102 Introduce and use DummyDatabase instead of dummy BerkeleyDatabase (achow101)\n- - #19568 Wallet should not override signing errors (fjahr)\n- - #17204 Do not turn `OP_1NEGATE` in scriptSig into `0x0181` in signing code (sipa) (meshcollider)\n- - #19457 Cleanup wallettool salvage and walletdb extraneous declarations (achow101)\n- - #15937 Add loadwallet and createwallet `load_on_startup` options (ryanofsky)\n- - #16841 Replace GetScriptForWitness with GetScriptForDestination (meshcollider)\n- - #14582 always do avoid partial spends if fees are within a specified range (kallewoof)\n- - #19743 -maxapsfee follow-up (kallewoof)\n- - #19289 GetWalletTx and IsMine require `cs_wallet` lock (promag)\n- - #19671 Remove -zapwallettxes (achow101)\n- - #19805 Avoid deserializing unused records when salvaging (achow101)\n- - #19754 wallet, gui: Reload previously loaded wallets on startup (achow101)\n- - #19738 Avoid multiple BerkeleyBatch in DelAddressBook (promag)\n- - #19919 bugfix: make LoadWallet assigns status always (AkioNak)\n- - #16378 The ultimate send RPC (Sjors)\n- - #15454 Remove the automatic creation and loading of the default wallet (achow101)\n- - #19501 `send*` RPCs in the wallet returns the \"fee reason\" (stackman27)\n- - #20130 Remove db mode string (S3RK)\n- - #19077 Add sqlite as an alternative wallet database and use it for new descriptor wallets (achow101)\n- - #20125 Expose database format in getwalletinfo (promag)\n- - #20198 Show name, format and if uses descriptors in bitcoin-wallet tool (jonasschnelli)\n- - #20216 Fix buffer over-read in SQLite file magic check (theStack)\n- - #20186 Make -wallet setting not create wallets (ryanofsky)\n- - #20230 Fix bug when just created encrypted wallet cannot get address (hebasto)\n- - #20282 Change `upgradewallet` return type to be an object (jnewbery)\n- - #20220 Explicit fee rate follow-ups/fixes for 0.21 (jonatack)\n- - #20199 Ignore (but warn) on duplicate -wallet parameters (jonasschnelli)\n- - #20324 Set DatabaseStatus::SUCCESS in MakeSQLiteDatabase (MarcoFalke)\n- - #20266 Fix change detection of imported internal descriptors (achow101)\n- - #20153 Do not import a descriptor with hardened derivations into a watch-only wallet (S3RK)\n- - #20344 Fix scanning progress calculation for single block range (theStack)\n- - #19502 Bugfix: Wallet: Soft-fail exceptions within ListWalletDir file checks (luke-jr)\n- - #20378 Fix potential division by 0 in WalletLogPrintf (jonasschnelli)\n- - #18836 Upgradewallet fixes and additional tests (achow101)\n- - #20139 Do not return warnings from UpgradeWallet() (stackman27)\n- - #20305 Introduce `fee_rate` sat/vB param/option (jonatack)\n- - #20426 Allow zero-fee fundrawtransaction/walletcreatefundedpsbt and other fixes (jonatack)\n- - #20573 wallet, bugfix: allow send with string `fee_rate` amounts (jonatack)\n\n### RPC and other APIs\n- - #18574 cli: Call getbalances.ismine.trusted instead of getwalletinfo.balance (jonatack)\n- - #17693 Add `generateblock` to mine a custom set of transactions (andrewtoth)\n- - #18495 Remove deprecated migration code (vasild)\n- - #18493 Remove deprecated \"size\" from mempool txs (vasild)\n- - #18467 Improve documentation and return value of settxfee (fjahr)\n- - #18607 Fix named arguments in documentation (MarcoFalke)\n- - #17831 doc: Fix and extend getblockstats examples (asoltys)\n- - #18785 Prevent valgrind false positive in `rest_blockhash_by_height` (ryanofsky)\n- - #18999 log: Remove \"No rpcpassword set\" from logs (MarcoFalke)\n- - #19006 Avoid crash when `g_thread_http` was never started (MarcoFalke)\n- - #18594 cli: Display multiwallet balances in -getinfo (jonatack)\n- - #19056 Make gettxoutsetinfo/GetUTXOStats interruptible (MarcoFalke)\n- - #19112 Remove special case for unknown service flags (MarcoFalke)\n- - #18826 Expose txinwitness for coinbase in JSON form from RPC (rvagg)\n- - #19282 Rephrase generatetoaddress help, and use `PACKAGE_NAME` (luke-jr)\n- - #16377 don't automatically append inputs in walletcreatefundedpsbt (Sjors)\n- - #19200 Remove deprecated getaddressinfo fields (jonatack)\n- - #19133 rpc, cli, test: add bitcoin-cli -generate command (jonatack)\n- - #19469 Deprecate banscore field in getpeerinfo (jonatack)\n- - #16525 Dump transaction version as an unsigned integer in RPC/TxToUniv (TheBlueMatt)\n- - #19555 Deduplicate WriteHDKeypath() used in decodepsbt (theStack)\n- - #19589 Avoid useless mempool query in gettxoutproof (MarcoFalke)\n- - #19585 RPCResult Type of MempoolEntryDescription should be OBJ (stylesuxx)\n- - #19634 Document getwalletinfo's `unlocked_until` field as optional (justinmoon)\n- - #19658 Allow RPC to fetch all addrman records and add records to addrman (jnewbery)\n- - #19696 Fix addnode remove command error (fjahr)\n- - #18654 Separate bumpfee's psbt creation function into psbtbumpfee (achow101)\n- - #19655 Catch listsinceblock `target_confirmations` exceeding block count (adaminsky)\n- - #19644 Document returned error fields as optional if applicable (theStack)\n- - #19455 rpc generate: print useful help and error message (jonatack)\n- - #19550 Add listindices RPC (fjahr)\n- - #19169 Validate provided keys for `query_options` parameter in listunspent (PastaPastaPasta)\n- - #18244 fundrawtransaction and walletcreatefundedpsbt also lock manually selected coins (Sjors)\n- - #14687 zmq: Enable TCP keepalive (mruddy)\n- - #19405 Add network in/out connections to `getnetworkinfo` and `-getinfo` (jonatack)\n- - #19878 rawtransaction: Fix argument in combinerawtransaction help message (pinheadmz)\n- - #19940 Return fee and vsize from testmempoolaccept (gzhao408)\n- - #13686 zmq: Small cleanups in the ZMQ code (domob1812)\n- - #19386, #19528, #19717, #19849, #19994 Assert that RPCArg names are equal to CRPCCommand ones (MarcoFalke)\n- - #19725 Add connection type to getpeerinfo, improve logs (amitiuttarwar)\n- - #19969 Send RPC bug fix and touch-ups (Sjors)\n- - #18309 zmq: Add support to listen on multiple interfaces (n-thumann)\n- - #20055 Set HTTP Content-Type in bitcoin-cli (laanwj)\n- - #19956 Improve invalid vout value rpc error message (n1rna)\n- - #20101 Change no wallet loaded message to be clearer (achow101)\n- - #19998 Add `via_tor` to `getpeerinfo` output (hebasto)\n- - #19770 getpeerinfo: Deprecate \"whitelisted\" field (replaced by \"permissions\") (luke-jr)\n- - #20120 net, rpc, test, bugfix: update GetNetworkName, GetNetworksInfo, regression tests (jonatack)\n- - #20595 Improve heuristic hex transaction decoding (sipa)\n- - #20731 Add missing description of vout in getrawtransaction help text (benthecarman)\n- - #19328 Add gettxoutsetinfo `hash_type` option (fjahr)\n- - #19731 Expose nLastBlockTime/nLastTXTime as last `block/last_transaction` in getpeerinfo (jonatack)\n- - #19572 zmq: Create \"sequence\" notifier, enabling client-side mempool tracking (instagibbs)\n- - #20002 Expose peer network in getpeerinfo; simplify/improve -netinfo (jonatack)\n\n### GUI\n- - #17905 Avoid redundant tx status updates (ryanofsky)\n- - #18646 Use `PACKAGE_NAME` in exception message (fanquake)\n- - #17509 Save and load PSBT (Sjors)\n- - #18769 Remove bug fix for Qt < 5.5 (10xcryptodev)\n- - #15768 Add close window shortcut (IPGlider)\n- - #16224 Bilingual GUI error messages (hebasto)\n- - #18922 Do not translate InitWarning messages in debug.log (hebasto)\n- - #18152 Use NotificationStatus enum for signals to GUI (hebasto)\n- - #18587 Avoid wallet tryGetBalances calls in WalletModel::pollBalanceChanged (ryanofsky)\n- - #17597 Fix height of QR-less ReceiveRequestDialog (hebasto)\n- - #17918 Hide non PKHash-Addresses in signing address book (emilengler)\n- - #17956 Disable unavailable context menu items in transactions tab (kristapsk)\n- - #17968 Ensure that ModalOverlay is resized properly (hebasto)\n- - #17993 Balance/TxStatus polling update based on last block hash (furszy)\n- - #18424 Use parent-child relation to manage lifetime of OptionsModel object (hebasto)\n- - #18452 Fix shutdown when `waitfor*` cmds are called from RPC console (hebasto)\n- - #15202 Add Close All Wallets action (promag)\n- - #19132 lock `cs_main`, `m_cached_tip_mutex` in that order (vasild)\n- - #18898 Display warnings as rich text (hebasto)\n- - #19231 add missing translation.h include to fix build (fanquake)\n- - #18027 \"PSBT Operations\" dialog (gwillen)\n- - #19256 Change combiner for signals to `optional_last_value` (fanquake)\n- - #18896 Reset toolbar after all wallets are closed (hebasto)\n- - #18993 increase console command max length (10xcryptodev)\n- - #19323 Fix regression in *txoutset* in GUI console (hebasto)\n- - #19210 Get rid of cursor in out-of-focus labels (hebasto)\n- - #19011 Reduce `cs_main` lock accumulation during GUI startup (jonasschnelli)\n- - #19844 Remove usage of boost::bind (fanquake)\n- - #20479 Fix QPainter non-determinism on macOS (0.21 backport) (laanwj)\n- - gui#6 Do not truncate node flag strings in debugwindow peers details tab (Saibato)\n- - gui#8 Fix regression in TransactionTableModel (hebasto)\n- - gui#17 doc: Remove outdated comment in TransactionTablePriv (MarcoFalke)\n- - gui#20 Wrap tooltips in the intro window (hebasto)\n- - gui#30 Disable the main window toolbar when the modal overlay is shown (hebasto)\n- - gui#34 Show permissions instead of whitelisted (laanwj)\n- - gui#35 Parse params directly instead of through node (ryanofsky)\n- - gui#39 Add visual accenting for the 'Create new receiving address' button (hebasto)\n- - gui#40 Clarify block height label (hebasto)\n- - gui#43 bugfix: Call setWalletActionsEnabled(true) only for the first wallet (hebasto)\n- - gui#97 Relax GUI freezes during IBD (jonasschnelli)\n- - gui#71 Fix visual quality of text in QR image (hebasto)\n- - gui#96 Slight improve create wallet dialog (Sjors)\n- - gui#102 Fix SplashScreen crash when run with -disablewallet (hebasto)\n- - gui#116 Fix unreasonable default size of the main window without loaded wallets (hebasto)\n- - gui#120 Fix multiwallet transaction notifications (promag)\n\n### Build system\n- - #18504 Drop bitcoin-tx and bitcoin-wallet dependencies on libevent (ryanofsky)\n- - #18586 Bump gitian descriptors to 0.21 (laanwj)\n- - #17595 guix: Enable building for `x86_64-w64-mingw32` target (dongcarl)\n- - #17929 add linker optimisation flags to gitian & guix (Linux) (fanquake)\n- - #18556 Drop make dist in gitian builds (hebasto)\n- - #18088 ensure we aren't using GNU extensions (fanquake)\n- - #18741 guix: Make source tarball using git-archive (dongcarl)\n- - #18843 warn on potentially uninitialized reads (vasild)\n- - #17874 make linker checks more robust (fanquake)\n- - #18535 remove -Qunused-arguments workaround for clang + ccache (fanquake)\n- - #18743 Add --sysroot option to mac os native compile flags (ryanofsky)\n- - #18216 test, build: Enable -Werror=sign-compare (Empact)\n- - #18928 don't pass -w when building for Windows (fanquake)\n- - #16710 Enable -Wsuggest-override if available (hebasto)\n- - #18738 Suppress -Wdeprecated-copy warnings (hebasto)\n- - #18862 Remove fdelt_chk back-compat code and sanity check (fanquake)\n- - #18887 enable -Werror=gnu (vasild)\n- - #18956 enforce minimum required Windows version (7) (fanquake)\n- - #18958 guix: Make V=1 more powerful for debugging (dongcarl)\n- - #18677 Multiprocess build support (ryanofsky)\n- - #19094 Only allow ASCII identifiers (laanwj)\n- - #18820 Propagate well-known vars into depends (dongcarl)\n- - #19173 turn on --enable-c++17 by --enable-fuzz (vasild)\n- - #18297 Use pkg-config in BITCOIN_QT_CONFIGURE for all hosts including Windows (hebasto)\n- - #19301 don't warn when doxygen isn't found (fanquake)\n- - #19240 macOS toolchain simplification and bump (dongcarl)\n- - #19356 Fix search for brew-installed BDB 4 on OS X (gwillen)\n- - #19394 Remove unused `RES_IMAGES` (Bushstar)\n- - #19403 improve `__builtin_clz*` detection (fanquake)\n- - #19375 target Windows 7 when building libevent and fix ipv6 usage (fanquake)\n- - #19331 Do not include server symbols in wallet (MarcoFalke)\n- - #19257 remove BIP70 configure option (fanquake)\n- - #18288 Add MemorySanitizer (MSan) in Travis to detect use of uninitialized memory (practicalswift)\n- - #18307 Require pkg-config for all of the hosts (hebasto)\n- - #19445 Update msvc build to use ISO standard C++17 (sipsorcery)\n- - #18882 fix -Wformat-security check when compiling with GCC (fanquake)\n- - #17919 Allow building with system clang (dongcarl)\n- - #19553 pass -fcommon when building genisoimage (fanquake)\n- - #19565 call `AC_PATH_TOOL` for dsymutil in macOS cross-compile (fanquake)\n- - #19530 build LTO support into Apple's ld64 (theuni)\n- - #19525 add -Wl,-z,separate-code to hardening flags (fanquake)\n- - #19667 set minimum required Boost to 1.58.0 (fanquake)\n- - #19672 make clean removes .gcda and .gcno files from fuzz directory (Crypt-iQ)\n- - #19622 Drop ancient hack in gitian-linux descriptor (hebasto)\n- - #19688 Add support for llvm-cov (hebasto)\n- - #19718 Add missed gcov files to 'make clean' (hebasto)\n- - #19719 Add Werror=range-loop-analysis (MarcoFalke)\n- - #19015 Enable some commonly enabled compiler diagnostics (practicalswift)\n- - #19689 build, qt: Add Qt version checking (hebasto)\n- - #17396 modest Android improvements (icota)\n- - #18405 Drop all of the ZeroMQ patches (hebasto)\n- - #15704 Move Win32 defines to configure.ac to ensure they are globally defined (luke-jr)\n- - #19761 improve sed robustness by not using sed (fanquake)\n- - #19758 Drop deprecated and unused `GUARDED_VAR` and `PT_GUARDED_VAR` annotations (hebasto)\n- - #18921 add stack-clash and control-flow protection options to hardening flags (fanquake)\n- - #19803 Bugfix: Define and use `HAVE_FDATASYNC` correctly outside LevelDB (luke-jr)\n- - #19685 CMake invocation cleanup (dongcarl)\n- - #19861 add /usr/local/ to `LCOV_FILTER_PATTERN` for macOS builds (Crypt-iQ)\n- - #19916 allow user to specify `DIR_FUZZ_SEED_CORPUS` for `cov_fuzz` (Crypt-iQ)\n- - #19944 Update secp256k1 subtree (including BIP340 support) (sipa)\n- - #19558 Split pthread flags out of ldflags and dont use when building libconsensus (fanquake)\n- - #19959 patch qt libpng to fix powerpc build (fanquake)\n- - #19868 Fix target name (hebasto)\n- - #19960 The vcpkg tool has introduced a proper way to use manifests (sipsorcery)\n- - #20065 fuzz: Configure check for main function (MarcoFalke)\n- - #18750 Optionally skip external warnings (vasild)\n- - #20147 Update libsecp256k1 (endomorphism, test improvements) (sipa)\n- - #20156 Make sqlite support optional (compile-time) (luke-jr)\n- - #20318 Ensure source tarball has leading directory name (MarcoFalke)\n- - #20447 Patch `qt_intersect_spans` to avoid non-deterministic behavior in LLVM 8 (achow101)\n- - #20505 Avoid secp256k1.h include from system (dergoegge)\n- - #20527 Do not ignore Homebrew's SQLite on macOS (hebasto)\n- - #20478 Don't set BDB flags when configuring without (jonasschnelli)\n- - #20563 Check that Homebrew's berkeley-db4 package is actually installed (hebasto)\n- - #19493 Fix clang build on Mac (bvbfan)\n\n### Tests and QA\n- - #18593 Complete impl. of `msg_merkleblock` and `wait_for_merkleblock` (theStack)\n- - #18609 Remove REJECT message code (hebasto)\n- - #18584 Check that the version message does not leak the local address (MarcoFalke)\n- - #18597 Extend `wallet_dump` test to cover comments (MarcoFalke)\n- - #18596 Try once more when RPC connection fails on Windows (MarcoFalke)\n- - #18451 shift coverage from getunconfirmedbalance to getbalances (jonatack)\n- - #18631 appveyor: Disable functional tests for now (MarcoFalke)\n- - #18628 Add various low-level p2p tests (MarcoFalke)\n- - #18615 Avoid accessing free'd memory in `validation_chainstatemanager_tests` (MarcoFalke)\n- - #18571 fuzz: Disable debug log file (MarcoFalke)\n- - #18653 add coverage for bitcoin-cli -rpcwait (jonatack)\n- - #18660 Verify findCommonAncestor always initializes outputs (ryanofsky)\n- - #17669 Have coins simulation test also use CCoinsViewDB (jamesob)\n- - #18662 Replace gArgs with local argsman in bench (MarcoFalke)\n- - #18641 Create cached blocks not in the future (MarcoFalke)\n- - #18682 fuzz: `http_request` workaround for libevent < 2.1.1 (theStack)\n- - #18692 Bump timeout in `wallet_import_rescan` (MarcoFalke)\n- - #18695 Replace boost::mutex with std::mutex (hebasto)\n- - #18633 Properly raise FailedToStartError when rpc shutdown before warmup finished (MarcoFalke)\n- - #18675 Don't initialize PrecomputedTransactionData in txvalidationcache tests (jnewbery)\n- - #18691 Add `wait_for_cookie_credentials()` to framework for rpcwait tests (jonatack)\n- - #18672 Add further BIP37 size limit checks to `p2p_filter.py` (theStack)\n- - #18721 Fix linter issue (hebasto)\n- - #18384 More specific `feature_segwit` test error messages and fixing incorrect comments (gzhao408)\n- - #18575 bench: Remove requirement that all benches use same testing setup (MarcoFalke)\n- - #18690 Check object hashes in `wait_for_getdata` (robot-visions)\n- - #18712 display command line options passed to `send_cli()` in debug log (jonatack)\n- - #18745 Check submitblock return values (MarcoFalke)\n- - #18756 Use `wait_for_getdata()` in `p2p_compactblocks.py` (theStack)\n- - #18724 Add coverage for -rpcwallet cli option (jonatack)\n- - #18754 bench: Add caddrman benchmarks (vasild)\n- - #18585 Use zero-argument super() shortcut (Python 3.0+) (theStack)\n- - #18688 fuzz: Run in parallel (MarcoFalke)\n- - #18770 Remove raw-tx byte juggling in `mempool_reorg` (MarcoFalke)\n- - #18805 Add missing `sync_all` to `wallet_importdescriptors.py` (achow101)\n- - #18759 bench: Start nodes with -nodebuglogfile (MarcoFalke)\n- - #18774 Added test for upgradewallet RPC (brakmic)\n- - #18485 Add `mempool_updatefromblock.py` (hebasto)\n- - #18727 Add CreateWalletFromFile test (ryanofsky)\n- - #18726 Check misbehavior more independently in `p2p_filter.py` (robot-visions)\n- - #18825 Fix message for `ECC_InitSanityCheck` test (fanquake)\n- - #18576 Use unittest for `test_framework` unit testing (gzhao408)\n- - #18828 Strip down previous releases boilerplate (MarcoFalke)\n- - #18617 Add factor option to adjust test timeouts (brakmic)\n- - #18855 `feature_backwards_compatibility.py` test downgrade after upgrade (achow101)\n- - #18864 Add v0.16.3 backwards compatibility test, bump v0.19.0.1 to v0.19.1 (Sjors)\n- - #18917 fuzz: Fix vector size problem in system fuzzer (brakmic)\n- - #18901 fuzz: use std::optional for `sep_pos_opt` variable (brakmic)\n- - #18888 Remove RPCOverloadWrapper boilerplate (MarcoFalke)\n- - #18952 Avoid os-dependent path (fametrano)\n- - #18938 Fill fuzzing coverage gaps for functions in consensus/validation.h, primitives/block.h and util/translation.h (practicalswift)\n- - #18986 Add capability to disable RPC timeout in functional tests (rajarshimaitra)\n- - #18530 Add test for -blocksonly and -whitelistforcerelay param interaction (glowang)\n- - #19014 Replace `TEST_PREVIOUS_RELEASES` env var with `test_framework` option (MarcoFalke)\n- - #19052 Don't limit fuzzing inputs to 1 MB for afl-fuzz (now: \u221e \u2200 fuzzers) (practicalswift)\n- - #19060 Remove global `wait_until` from `p2p_getdata` (MarcoFalke)\n- - #18926 Pass ArgsManager into `getarg_tests` (glowang)\n- - #19110 Explain that a bug should be filed when the tests fail (MarcoFalke)\n- - #18965 Implement `base58_decode` (10xcryptodev)\n- - #16564 Always define the `raii_event_tests` test suite (candrews)\n- - #19122 Add missing `sync_blocks` to `wallet_hd` (MarcoFalke)\n- - #18875 fuzz: Stop nodes in `process_message*` fuzzers (MarcoFalke)\n- - #18974 Check that invalid witness destinations can not be imported (MarcoFalke)\n- - #18210 Type hints in Python tests (kiminuo)\n- - #19159 Make valgrind.supp work on aarch64 (MarcoFalke)\n- - #19082 Moved the CScriptNum asserts into the unit test in script.py (gillichu)\n- - #19172 Do not swallow flake8 exit code (hebasto)\n- - #19188 Avoid overwriting the NodeContext member of the testing setup [-Wshadow-field] (MarcoFalke)\n- - #18890 `disconnect_nodes` should warn if nodes were already disconnected (robot-visions)\n- - #19227 change blacklist to blocklist (TrentZ)\n- - #19230 Move base58 to own module to break circular dependency (sipa)\n- - #19083 `msg_mempool`, `fRelay`, and other bloomfilter tests (gzhao408)\n- - #16756 Connection eviction logic tests (mzumsande)\n- - #19177 Fix and clean `p2p_invalid_messages` functional tests (troygiorshev)\n- - #19264 Don't import asyncio to test magic bytes (jnewbery)\n- - #19178 Make `mininode_lock` non-reentrant (jnewbery)\n- - #19153 Mempool compatibility test (S3RK)\n- - #18434 Add a test-security target and run it in CI (fanquake)\n- - #19252 Wait for disconnect in `disconnect_p2ps` + bloomfilter test followups (gzhao408)\n- - #19298 Add missing `sync_blocks` (MarcoFalke)\n- - #19304 Check that message sends successfully when header is split across two buffers (troygiorshev)\n- - #19208 move `sync_blocks` and `sync_mempool` functions to `test_framework.py` (ycshao)\n- - #19198 Check that peers with forcerelay permission are not asked to feefilter (MarcoFalke)\n- - #19351 add two edge case tests for CSubNet (vasild)\n- - #19272 net, test: invalid p2p messages and test framework improvements (jonatack)\n- - #19348 Bump linter versions (duncandean)\n- - #19366 Provide main(\u2026) function in fuzzer. Allow building uninstrumented harnesses with --enable-fuzz (practicalswift)\n- - #19412 move `TEST_RUNNER_EXTRA` into native tsan setup (fanquake)\n- - #19368 Improve functional tests compatibility with BSD/macOS (S3RK)\n- - #19028 Set -logthreadnames in unit tests (MarcoFalke)\n- - #18649 Add std::locale::global to list of locale dependent functions (practicalswift)\n- - #19140 Avoid fuzzer-specific nullptr dereference in libevent when handling PROXY requests (practicalswift)\n- - #19214 Auto-detect SHA256 implementation in benchmarks (sipa)\n- - #19353 Fix mistakenly swapped \"previous\" and \"current\" lock orders (hebasto)\n- - #19533 Remove unnecessary `cs_mains` in `denialofservice_tests` (jnewbery)\n- - #19423 add functional test for txrelay during and after IBD (gzhao408)\n- - #16878 Fix non-deterministic coverage of test `DoS_mapOrphans` (davereikher)\n- - #19548 fuzz: add missing overrides to `signature_checker` (jonatack)\n- - #19562 Fix fuzzer compilation on macOS (freenancial)\n- - #19370 Static asserts for consistency of fee defaults (domob1812)\n- - #19599 clean `message_count` and `last_message` (troygiorshev)\n- - #19597 test decodepsbt fee calculation (count input value only once per UTXO) (theStack)\n- - #18011 Replace current benchmarking framework with nanobench (martinus)\n- - #19489 Fail `wait_until` early if connection is lost (MarcoFalke)\n- - #19340 Preserve the `LockData` initial state if \"potential deadlock detected\" exception thrown (hebasto)\n- - #19632 Catch decimal.InvalidOperation from `TestNodeCLI#send_cli` (Empact)\n- - #19098 Remove duplicate NodeContext hacks (ryanofsky)\n- - #19649 Restore test case for p2p transaction blinding (instagibbs)\n- - #19657 Wait until `is_connected` in `add_p2p_connection` (MarcoFalke)\n- - #19631 Wait for 'cmpctblock' in `p2p_compactblocks` when it is expected (Empact)\n- - #19674 use throwaway _ variable for unused loop counters (theStack)\n- - #19709 Fix 'make cov' with clang (hebasto)\n- - #19564 `p2p_feefilter` improvements (logging, refactoring, speedup) (theStack)\n- - #19756 add `sync_all` to fix race condition in wallet groups test (kallewoof)\n- - #19727 Removing unused classes from `p2p_leak.py` (dhruv)\n- - #19722 Add test for getblockheader verboseness (torhte)\n- - #19659 Add a seed corpus generation option to the fuzzing `test_runner` (darosior)\n- - #19775 Activate segwit in TestChain100Setup (MarcoFalke)\n- - #19760 Remove confusing mininode terminology (jnewbery)\n- - #19752 Update `wait_until` usage in tests not to use the one from utils (slmtpz)\n- - #19839 Set appveyor VM version to previous Visual Studio 2019 release (sipsorcery)\n- - #19830 Add tsan supp for leveldb::DBImpl::DeleteObsoleteFiles (MarcoFalke)\n- - #19710 bench: Prevent thread oversubscription and decreases the variance of result values (hebasto)\n- - #19842 Update the vcpkg checkout commit ID in appveyor config (sipsorcery)\n- - #19507 Expand functional zmq transaction tests (instagibbs)\n- - #19816 Rename wait until helper to `wait_until_helper` (MarcoFalke)\n- - #19859 Fixes failing functional test by changing version (n-thumann)\n- - #19887 Fix flaky `wallet_basic` test (fjahr)\n- - #19897 Change `FILE_CHAR_BLOCKLIST` to `FILE_CHARS_DISALLOWED` (verretor)\n- - #19800 Mockwallet (MarcoFalke)\n- - #19922 Run `rpc_txoutproof.py` even with wallet disabled (MarcoFalke)\n- - #19936 batch rpc with params (instagibbs)\n- - #19971 create default wallet in extended tests (Sjors)\n- - #19781 add parameterized constructor for `msg_sendcmpct()` (theStack)\n- - #19963 Clarify blocksonly whitelistforcerelay test (t-bast)\n- - #20022 Use explicit p2p objects where available (guggero)\n- - #20028 Check that invalid peer traffic is accounted for (MarcoFalke)\n- - #20004 Add signet witness commitment section parse tests (MarcoFalke)\n- - #20034 Get rid of default wallet hacks (ryanofsky)\n- - #20069 Mention commit id in scripted diff error (laanwj)\n- - #19947 Cover `change_type` option of \"walletcreatefundedpsbt\" RPC (guggero)\n- - #20126 `p2p_leak_tx.py` improvements (use MiniWallet, add `p2p_lock` acquires) (theStack)\n- - #20129 Don't export `in6addr_loopback` (vasild)\n- - #20131 Remove unused nVersion=1 in p2p tests (MarcoFalke)\n- - #20161 Minor Taproot follow-ups (sipa)\n- - #19401 Use GBT to get block versions correct (luke-jr)\n- - #20159 `mining_getblocktemplate_longpoll.py` improvements (use MiniWallet, add logging) (theStack)\n- - #20039 Convert amounts from float to decimal (prayank23)\n- - #20112 Speed up `wallet_resendwallettransactions` with mockscheduler RPC (MarcoFalke)\n- - #20247 fuzz: Check for addrv1 compatibility before using addrv1 serializer. Fuzz addrv2 serialization (practicalswift)\n- - #20167 Add test for -blockversion (MarcoFalke)\n- - #19877 Clarify `rpc_net` & `p2p_disconnect_ban functional` tests (amitiuttarwar)\n- - #20258 Remove getnettotals/getpeerinfo consistency test (jnewbery)\n- - #20242 fuzz: Properly initialize PrecomputedTransactionData (MarcoFalke)\n- - #20262 Skip --descriptor tests if sqlite is not compiled (achow101)\n- - #18788 Update more tests to work with descriptor wallets (achow101)\n- - #20289 fuzz: Check for addrv1 compatibility before using addrv1 serializer/deserializer on CService (practicalswift)\n- - #20290 fuzz: Fix DecodeHexTx fuzzing harness issue (practicalswift)\n- - #20245 Run `script_assets_test` even if built --with-libs=no (MarcoFalke)\n- - #20300 fuzz: Add missing `ECC_Start` to `descriptor_parse` test (S3RK)\n- - #20283 Only try witness deser when checking for witness deser failure (MarcoFalke)\n- - #20303 fuzz: Assert expected DecodeHexTx behaviour when using legacy decoding (practicalswift)\n- - #20316 Fix `wallet_multiwallet` test issue on Windows (MarcoFalke)\n- - #20326 Fix `ecdsa_verify` in test framework (stepansnigirev)\n- - #20328 cirrus: Skip tasks on the gui repo main branch (MarcoFalke)\n- - #20355 fuzz: Check for addrv1 compatibility before using addrv1 serializer/deserializer on CSubNet (practicalswift)\n- - #20332 Mock IBD in `net_processing` fuzzers (MarcoFalke)\n- - #20218 Suppress `epoll_ctl` data race (MarcoFalke)\n- - #20375 fuzz: Improve coverage for CPartialMerkleTree fuzzing harness (practicalswift)\n- - #19669 contrib: Fixup valgrind suppressions file (MarcoFalke)\n- - #18879 valgrind: remove outdated suppressions (fanquake)\n- - #19226 Add BerkeleyDatabase tsan suppression (MarcoFalke)\n- - #20379 Remove no longer needed UBSan suppression (float divide-by-zero in validation.cpp) (practicalswift)\n- - #18190, #18736, #18744, #18775, #18783, #18867, #18994, #19065,\n  #19067, #19143, #19222, #19247, #19286, #19296, #19379, #19934,\n  #20188, #20395 Add fuzzing harnessses (practicalswift)\n- - #18638 Use mockable time for ping/pong, add tests (MarcoFalke)\n- - #19951 CNetAddr scoped ipv6 test coverage, rename scopeId to `m_scope_id` (jonatack)\n- - #20027 Use mockable time everywhere in `net_processing` (sipa)\n- - #19105 Add Muhash3072 implementation in Python (fjahr)\n- - #18704, #18752, #18753, #18765, #18839, #18866, #18873, #19022,\n  #19023, #19429, #19552, #19778, #20176, #20179, #20214, #20292,\n  #20299, #20322 Fix intermittent test issues (MarcoFalke)\n- - #20390 CI/Cirrus: Skip `merge_base` step for non-PRs (luke-jr)\n- - #18634 ci: Add fuzzbuzz integration configuration file (practicalswift)\n- - #18591 Add C++17 build to Travis (sipa)\n- - #18581, #18667, #18798, #19495, #19519, #19538 CI improvements (hebasto)\n- - #18683, #18705, #18735, #18778, #18799, #18829, #18912, #18929,\n  #19008, #19041, #19164, #19201, #19267, #19276, #19321, #19371,\n  #19427, #19730, #19746, #19881, #20294, #20339, #20368 CI improvements (MarcoFalke)\n- - #20489, #20506 MSVC CI improvements (sipsorcery)\n\n### Miscellaneous\n- - #18713 scripts: Add macho stack canary check to security-check.py (fanquake)\n- - #18629 scripts: Add pe .reloc section check to security-check.py (fanquake)\n- - #18437 util: `Detect posix_fallocate()` instead of assuming (vasild)\n- - #18413 script: Prevent ub when computing abs value for num opcode serialize (pierreN)\n- - #18443 lockedpool: avoid sensitive data in core files (FreeBSD) (vasild)\n- - #18885 contrib: Move optimize-pngs.py script to the maintainer repo (MarcoFalke)\n- - #18317 Serialization improvements step 6 (all except wallet/gui) (sipa)\n- - #16127 More thread safety annotation coverage (ajtowns)\n- - #19228 Update libsecp256k1 subtree (sipa)\n- - #19277 util: Add assert identity function (MarcoFalke)\n- - #19491 util: Make assert work with any value (MarcoFalke)\n- - #19205 script: `previous_release.sh` rewritten in python (bliotti)\n- - #15935 Add <datadir>/settings.json persistent settings storage (ryanofsky)\n- - #19439 script: Linter to check commit message formatting (Ghorbanian)\n- - #19654 lint: Improve commit message linter in travis (fjahr)\n- - #15382 util: Add runcommandparsejson (Sjors)\n- - #19614 util: Use `have_fdatasync` to determine fdatasync() use (fanquake)\n- - #19813 util, ci: Hard code previous release tarball checksums (hebasto)\n- - #19841 Implement Keccak and `SHA3_256` (sipa)\n- - #19643 Add -netinfo peer connections dashboard (jonatack)\n- - #15367 feature: Added ability for users to add a startup command (benthecarman)\n- - #19984 log: Remove static log message \"Initializing chainstate Chainstate [ibd] @ height -1 (null)\" (practicalswift)\n- - #20092 util: Do not use gargs global in argsmanager member functions (hebasto)\n- - #20168 contrib: Fix `gen_key_io_test_vectors.py` imports (MarcoFalke)\n- - #19624 Warn on unknown `rw_settings` (MarcoFalke)\n- - #20257 Update secp256k1 subtree to latest master (sipa)\n- - #20346 script: Modify security-check.py to use \"==\" instead of \"is\" for literal comparison (tylerchambers)\n- - #18881 Prevent UB in DeleteLock() function (hebasto)\n- - #19180, #19189, #19190, #19220, #19399 Replace RecursiveMutex with Mutex (hebasto)\n- - #19347 Make `cs_inventory` nonrecursive (jnewbery)\n- - #19773 Avoid recursive lock in IsTrusted (promag)\n- - #18790 Improve thread naming (hebasto)\n- - #20140 Restore compatibility with old CSubNet serialization (sipa)\n- - #17775 DecodeHexTx: Try case where txn has inputs first (instagibbs)\n\n### Documentation\n- - #18502 Update docs for getbalance (default minconf should be 0) (uzyn)\n- - #18632 Fix macos comments in release-notes (MarcoFalke)\n- - #18645 Update thread information in developer docs (jnewbery)\n- - #18709 Note why we can't use `thread_local` with glibc back compat (fanquake)\n- - #18410 Improve commenting for coins.cpp|h (jnewbery)\n- - #18157 fixing init.md documentation to not require rpcpassword (jkcd)\n- - #18739 Document how to fuzz Bitcoin Core using Honggfuzz (practicalswift)\n- - #18779 Better explain GNU ld's dislike of ld64's options (fanquake)\n- - #18663 Mention build docs in README.md (saahilshangle)\n- - #18810 Update rest info on block size and json (chrisabrams)\n- - #18939 Add c++17-enable flag to fuzzing instructions (mzumsande)\n- - #18957 Add a link from ZMQ doc to ZMQ example in contrib/ (meeDamian)\n- - #19058 Drop protobuf stuff (hebasto)\n- - #19061 Add link to Visual Studio build readme (maitrebitcoin)\n- - #19072 Expand section on Getting Started (MarcoFalke)\n- - #18968 noban precludes maxuploadtarget disconnects (MarcoFalke)\n- - #19005 Add documentation for 'checklevel' argument in 'verifychain' RPC\u2026 (kcalvinalvin)\n- - #19192 Extract net permissions doc (MarcoFalke)\n- - #19071 Separate repository for the gui (MarcoFalke)\n- - #19018 fixing description of the field sequence in walletcreatefundedpsbt RPC method (limpbrains)\n- - #19367 Span pitfalls (sipa)\n- - #19408 Windows WSL build recommendation to temporarily disable Win32 PE support (sipsorcery)\n- - #19407 explain why passing -mlinker-version is required when cross-compiling (fanquake)\n- - #19452 afl fuzzing comment about afl-gcc and afl-g++ (Crypt-iQ)\n- - #19258 improve subtree check instructions (Sjors)\n- - #19474 Use precise permission flags where possible (MarcoFalke)\n- - #19494 CONTRIBUTING.md improvements (jonatack)\n- - #19268 Add non-thread-safe note to FeeFilterRounder::round() (hebasto)\n- - #19547 Update macOS cross compilation dependencies for Focal (hebasto)\n- - #19617 Clang 8 or later is required with `FORCE_USE_SYSTEM_CLANG` (fanquake)\n- - #19639 Remove Reference Links #19582 (RobertHosking)\n- - #19605 Set `CC_FOR_BUILD` when building on OpenBSD (fanquake)\n- - #19765 Fix getmempoolancestors RPC result doc (MarcoFalke)\n- - #19786 Remove label from good first issue template (MarcoFalke)\n- - #19646 Updated outdated help command for getblocktemplate (jakeleventhal)\n- - #18817 Document differences in bitcoind and bitcoin-qt locale handling (practicalswift)\n- - #19870 update PyZMQ install instructions, fix `zmq_sub.py` file permissions (jonatack)\n- - #19903 Update build-openbsd.md with GUI support (grubles)\n- - #19241 help: Generate checkpoint height from chainparams (luke-jr)\n- - #18949 Add CODEOWNERS file to automatically nominate PR reviewers (adamjonas)\n- - #20014 Mention signet in -help output (hebasto)\n- - #20015 Added default signet config for linearize script (gr0kchain)\n- - #19958 Better document features of feelers (naumenkogs)\n- - #19871 Clarify scope of eviction protection of outbound block-relay peers (ariard)\n- - #20076 Update and improve files.md (hebasto)\n- - #20107 Collect release-notes snippets (MarcoFalke)\n- - #20109 Release notes and followups from 19339 (glozow)\n- - #20090 Tiny followups to new getpeerinfo connection type field (amitiuttarwar)\n- - #20152 Update wallet files in files.md (hebasto)\n- - #19124 Document `ALLOW_HOST_PACKAGES` dependency option (skmcontrib)\n- - #20271 Document that wallet salvage is experimental (MarcoFalke)\n- - #20281 Correct getblockstats documentation for `(sw)total_weight` (shesek)\n- - #20279 release process updates/fixups (jonatack)\n- - #20238 Missing comments for signet parameters (decryp2kanon)\n- - #20756 Add missing field (permissions) to the getpeerinfo help (amitiuttarwar)\n- - #20668 warn that incoming conns are unlikely when not using default ports (adamjonas)\n- - #19961 tor.md updates (jonatack)\n- - #19050 Add warning for rest interface limitation (fjahr)\n- - #19390 doc/REST-interface: Remove stale info (luke-jr)\n- - #19344 docs: update testgen usage example (Bushstar)\n\nCredits\n=======\n\nThanks to everyone who directly contributed to this release:\n\n- - 10xcryptodev\n- - Aaron Clauson\n- - Aaron Hook\n- - Adam Jonas\n- - Adam Soltys\n- - Adam Stein\n- - Akio Nakamura\n- - Alex Willmer\n- - Amir Ghorbanian\n- - Amiti Uttarwar\n- - Andrew Chow\n- - Andrew Toth\n- - Anthony Fieroni\n- - Anthony Towns\n- - Antoine Poinsot\n- - Antoine Riard\n- - Ben Carman\n- - Ben Woosley\n- - Benoit Verret\n- - Brian Liotti\n- - Bushstar\n- - Calvin Kim\n- - Carl Dong\n- - Chris Abrams\n- - Chris L\n- - Christopher Coverdale\n- - codeShark149\n- - Cory Fields\n- - Craig Andrews\n- - Damian Mee\n- - Daniel Kraft\n- - Danny Lee\n- - David Reikher\n- - DesWurstes\n- - Dhruv Mehta\n- - Duncan Dean\n- - Elichai Turkel\n- - Elliott Jin\n- - Emil Engler\n- - Ethan Heilman\n- - eugene\n- - Fabian Jahr\n- - fanquake\n- - Ferdinando M. Ametrano\n- - freenancial\n- - furszy\n- - Gillian Chu\n- - Gleb Naumenko\n- - Glenn Willen\n- - Gloria Zhao\n- - glowang\n- - gr0kchain\n- - Gregory Sanders\n- - grubles\n- - gzhao408\n- - Harris\n- - Hennadii Stepanov\n- - Hugo Nguyen\n- - Igor Cota\n- - Ivan Metlushko\n- - Ivan Vershigora\n- - Jake Leventhal\n- - James O'Beirne\n- - Jeremy Rubin\n- - jgmorgan\n- - Jim Posen\n- - \u201cjkcd\u201d\n- - jmorgan\n- - John Newbery\n- - Johnson Lau\n- - Jon Atack\n- - Jonas Schnelli\n- - Jonathan Schoeller\n- - Jo\u00e3o Barbosa\n- - Justin Moon\n- - kanon\n- - Karl-Johan Alm\n- - Kiminuo\n- - Kristaps Kaupe\n- - lontivero\n- - Luke Dashjr\n- - Marcin Jachymiak\n- - MarcoFalke\n- - Martin Ankerl\n- - Martin Zumsande\n- - maskoficarus\n- - Matt Corallo\n- - Matthew Zipkin\n- - MeshCollider\n- - Miguel Herranz\n- - MIZUTA Takeshi\n- - mruddy\n- - Nadav Ivgi\n- - Neha Narula\n- - Nicolas Thumann\n- - Niklas G\u00f6gge\n- - Nima Yazdanmehr\n- - nsa\n- - nthumann\n- - Oliver Gugger\n- - pad\n- - pasta\n- - Peter Bushnell\n- - pierrenn\n- - Pieter Wuille\n- - practicalswift\n- - Prayank\n- - Ra\u00fal Mart\u00ednez (RME)\n- - RandyMcMillan\n- - Rene Pickhardt\n- - Riccardo Masutti\n- - Robert\n- - Rod Vagg\n- - Roy Shao\n- - Russell Yanofsky\n- - Saahil Shangle\n- - sachinkm77\n- - saibato\n- - Samuel Dobson\n- - sanket1729\n- - Sebastian Falbesoner\n- - Seleme Topuz\n- - Sishir Giri\n- - Sjors Provoost\n- - skmcontrib\n- - Stepan Snigirev\n- - Stephan Oeste\n- - Suhas Daftuar\n- - t-bast\n- - Tom Harding\n- - Torhte Butler\n- - TrentZ\n- - Troy Giorshev\n- - tryphe\n- - Tyler Chambers\n- - U-Zyn Chua\n- - Vasil Dimov\n- - wiz\n- - Wladimir J. van der Laan\n\nAs well as to everyone that helped with translations on\n[Transifex](https://www.transifex.com/bitcoin/bitcoin/).\n\n-----BEGIN PGP SIGNATURE-----\n\niQEzBAEBCgAdFiEEnerg3HBjJJ+wVHRoHkrtYphs0l0FAmAAS08ACgkQHkrtYphs\n0l1GQgf/R7yRDnaAiyvnIkpgO9LE5J6zjr8Ll3pc3xNEPuqRikFo5F3CQJpiFO22\nkvoasiXzHNJxGxYiiKlDdC+uHXj5mmlMi6yewLHa+w9gWf4XnEAIa6jhKmUjGQgD\nhLB44+g9d64lY+moBl4pi3mjbVxdTzSF7V1ZEvq3pjiOIvVN0jyLkW1yv2CRTuSO\n6IqTr0TqlNRtty+yfObycGAW/K/P+WWKbbfSulvDICtMt8MlcFODlc3pPXa3G+tD\nAC7B17LQsNX6veIBQxksm/pH5E/B4aYsuV65gweSrdklAwLRAAVU27zKr3flgBzR\nU58PFN0TycoDQAICy8Sjffd933bjVw==\n=nyFT\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.21.0 released",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Wladimir J. van der Laan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 75657
        }
    },
    {
        "title": "[bitcoin-dev] Hardware wallets and \"advanced\" Bitcoin features",
        "thread_messages": [
            {
                "author": "Kevin Loaec",
                "date": "2021-01-14T18:17:09",
                "message_text_only": "Hello everyone,\n\nI would like to start a discussion on improving Hardware Wallets.\n\nMy approach to this right now is from a vault protocol we are developing (Revault, [1]), and its Hardware Wallet\nrequirements. I started working on a Github Issue in our repo [2], other people recommended us to do a more general\ndiscussion on the mailing list instead as it could benefit many other protocols and users.\nThis email discusses improvements that would benefit everyone, and some that are more suitable for \"layer 2\" or pre-\nsigned transactions protocols.\nThe goal is to spark discussions and hopefully iterate to a more secure and more usable hardware ecosystem for all\nbitcoiners.\nWhile I mainly foresee issues/improvements that may affect Revault, I would be really happy to see people joining this\nthread with any other ideas and remarks that would benefit some parts of Bitcoin that I overlooked.\n\n\n\nPrior work on similar problematics:\n===================================\n- ZmnSCPx\nj: [Lightning-dev] Speculations on hardware wallet support for Lightning [3]\n- mflaxman: Known Issues: Verifying a Receive Address [4]\n- ksedgwic and devrandom01: Lightning-signer [5]\n- benma: How nearly all personal hardware wallet multisig setups are insecure [6]\n\n\nThe postulate we start from is that Hardware Wallets (HW) are useful to mitigate the compromission of the day-to-day\ndevice of a user. They mainly prevent private-key extraction today, and aren't very suitable against an attack on the\ntransaction being signed, as explained further.\nTo make this discussion security-focused, let's assume the general purpose device (laptop, for example) is compromised\nwith a malware implanted by an attacker, capable of modifying PSBTs, displayed addresses, etc.\n\nOur study so far:\n\n\nOutput Script Parsing:\n======================\nProblem: A typical HW today would display the \"destination\" of a transaction in the form of a bitcoin address. A user\nwould generally compare this wit\nh the address displayed on his laptop screen... which might have been compromised\nalready. The correct usage would be for a user to verify this address on a third device (mobile phone, for example).\nThis is weak security and bad user experience.\nProposed improvement: The HW should display the Bitcoin Script itself when possible (including the unlock conditions).\nThe best way to do so would be to lift this Script to a more user-friendly format such as a MiniScript Policy display,\nbut anything would be better than an \"address\".\nThis applies to pre-signed transaction protocols especially well as the template of these transactions could be known\nand recognized by the HW. Typically for Revault, the HW could display: \"Unvault Transaction, all expected pubkeys\npresent in the script\".\n\n\nPubkey Interpretation:\n======================\nProblem: currently HW cannot \"identify\" addresses or keys.\nProposed improvement: The HW could know pubkeys or xpubs it does not hold the private keys \nfor, and display a label (or\nunderstand it for logic reasons, such as \"expected pubkeys\" as the previous example). Going further, the xpubs could be\naliased the first time they are entered/verified (as part of, say, an initial setup ceremony) for instance with the\npreviously mentioned Miniscript policy: or(pk(Alice), and(pk(Bob), after(42))).\nThis should be done in the Secure Element if possible to avoid physical compromission, but would be a strong improvement\nversus a day-to-day laptop in any case.\n\n\nBetter Bitcoin Compatibility:\n=============================\nProblem: most HW cannot interpret some Script OPs such as OP_CSV, or any conditional outputs. This is a major issue for\nanyone using Bitcoin \"advanced\" features. Related to this are the Sighash flags: most HW do not support most Sighash\nflags. Kind of annoying for a signing device. Then there is PSBT support and the maximum transaction size limit for\nthese: we need more transparency from HW manufacturers on their li\nmitations.\nSolution: Make Bitcoin HW actually compatible with Bitcoin :D\n\n\nInputs (mainly for pre-signed Tx):\n==================================\nProblem: Poisoned inputs are a major risk for HW as they don't know the UTXO set. While this can be exploited for fee\nattacks, it is a bigger threat to pre-signed transactions protocols. Once any input of a (pre-signed)transaction is\nspent, this transaction isn't valid anymore. Most pre-signed transactions protocols are used today as a form of defense\nmechanism, spending any input would mean incapacitating the entire defense mechanism.\nProposed improvement: for protocols that requires it, keeping track of inputs already signed once would be extremely\nhelpful. Going further, most of these protocols require to follow a specific signing order (typically the \"clawback\"\nfirst, then the regular spend path) so adding a way to check that a \"clawback\" has been signed first, with the same\ninput, would be very helpful. All of this on the dev\nice itself.\n\n\n\n\nI understand some of these changes may be very difficult, especially given the low memory and computational power of\nsecure elements. However I truly believe most of these points are a MUST have for any decent security. If you don't\nassume the computer on which the transaction is crafted is compromised, then you don't need a hardware wallet. If you\nassume it may be compromised, then the HW needs to be able to defend against those.\n\nRevault does not plan on building hardware wallets, we hope existing and upcoming manufacturers will implement a strong\nsecurity that we could use for the Revault protocol users. Vault users will likely hold very large sums and would be\nhappy to pay a high premium for more secure HW. This will hopefully encourage existing players to keep on improving\ntheir devices and that will ultimately benefit us all.\n\nFeel free to reply with your comments or adding suggestions, I am not a hardware wallet expert and would take criticism\nwit\nhout being offended.\n\nKind Regards,\nKevin Loaec\n\n[1]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017835.html\n[2]: https://github.com/re-vault/practical-revault/issues/59\n[3]: https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002425.html\n[4]: https://btcguide.github.io/known-issues/verify-receive-address\n[5]: https://gitlab.com/lightning-signer/docs\n[6]: https://shiftcrypto.ch/blog/how-nearly-all-personal-hardware-wallet-multisig-setups-are-insecure/\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: publickey - kevin at revault.dev - 7c1d686c.asc\nType: application/pgp-keys\nSize: 643 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210114/7adc4c33/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 233 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210114/7adc4c33/attachment.sig>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2021-01-15T00:28:21",
                "message_text_only": "Good Morning Kevin,\n\n>     Inputs (mainly for pre-signed Tx):\n>     ==================================\n>     Problem: Poisoned inputs are a major risk for HW as they don't know the UTXO set. While this can be exploited for fee\n>     attacks, it is a bigger threat to pre-signed transactions protocols. Once any input of a (pre-signed)transaction is\n>     spent, this transaction isn't valid anymore. Most pre-signed transactions protocols are used today as a form of defense\n>     mechanism, spending any input would mean incapacitating the entire defense mechanism.\n>     Proposed improvement: for protocols that requires it, keeping track of inputs already signed once would be extremely\n>     helpful. Going further, most of these protocols require to follow a specific signing order (typically the \"clawback\"\n>     first, then the regular spend path) so adding a way to check that a \"clawback\" has been signed first, with the same\n>     input, would be very helpful. All of this on the dev\n>     ice itself.\n\nThis requires the hardware device to maintain some state in order to remember that the clawback has been signed before.\nMy post on HW devices for Lightning (which you already linked) contains a suggestion to use a Merklized persistent data structure to maintain state for the hardware device, with a majority of the state storage on the trust-minimized software.\n\nThe primary issue here is that we have a base assumption that the hardware wallet cannot be sophisticated enough to have Internet access; \"do not enter seed words on an online device\", as the typical advice goes.\nMost clawback transactions are time-based, and *must* be broadcast at a particular blockheight.\nYet if the hardware wallet cannot be an online device, then it cannot know the current blockheight is now at a time when the clawback transaction *must* be broadcast.\n\nThus, the hardware must always tr\\*st the software to actually perform the clawback in that case.\nIn protocols where clawbacks are at all necessary, often the counterparty can have an advantage / can steal if the clawback is not broadcast in a timely manner, thus the software that is corrupted by the counterparty can be corrupted to simply not broadcast the clawback.\n\nIf the software on an online device cannot be tr\\*sted (which is the model that hardware wallets use) then the software cannot be tr\\*sted to provide correct information on the current blockheight to the offline hardware device, and cannot be tr\\*sted to use clawback transactions.\n\nIt seems to me that we cannot use the same model of \"do not enter seed words on an online device\" for any protocol with a time-based clawback component (and honestly there seems to be no clawback mechanism that is not time-based).\n\nUltimately, I consider the blockchain as a proof of time passing, and as the blockchain is an online structure, we can only get at that proof by going online and actively searching for the block tip.\nYet going online increases our attack surface.\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Devrandom",
                "date": "2021-01-17T02:40:44",
                "message_text_only": "Dear ZmnSCPxj,\n\nOn Thu, Jan 14, 2021 at 4:28 PM ZmnSCPxj via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> The primary issue here is that we have a base assumption that the hardware\n> wallet cannot be sophisticated enough to have Internet access; \"do not\n> enter seed words on an online device\", as the typical advice goes.\n> Most clawback transactions are time-based, and *must* be broadcast at a\n> particular blockheight.\n> Yet if the hardware wallet cannot be an online device, then it cannot know\n> the current blockheight is now at a time when the clawback transaction\n> *must* be broadcast.\n>\n> Thus, the hardware must always tr\\*st the software to actually perform the\n> clawback in that case.\n>\n\nI believe it is possible to achieve much of the desired \"liveness\"\nrequirements without compromising too much on the air-gap.  The solution\nrequires the following:\n\n- a set of UTXO oracles which attest to the UTXO set\n- optionally, a set of clock oracles which attest to the current time (e.g.\nusing the roughtime protocol)\n- an air-gap connection between the node software and the signer, e.g.\nusing a narrow optical or serial protocol\n- a set of operators that can react to lack of liveness\n\nThe Signer performs the following steps periodically:\n\n- if the funding UTXO has not been spent (per oracle attestation), proceed\nnormally with any channel commitment signing\n- if the funding UTXO has been spent, ensure that the node provided the\nspending tx, and check if there is any reaction needed (e.g. a justice tx\nis needed)\n- if a reaction is needed, ensure that there is a further spend within a\ncertain deadline (shorter than the CSV/CLTV deadline)\n- if there is no deadline violation, sign a heartbeat message with the\ncurrent time (either from a local clock or from oracle clock)\n\nThe node software then relays the signed heartbeat message to the\noperators, e.g. through Tor.  If a heartbeat is not seen by the operators,\nthey manually intervene (e.g. by standing up a clean node).\n\nOf course, we will never have Lightning paper wallets, by definition, since\nyou can't participate in the network without being online.  But the above\nsetup seems to be at least as secure as USB hardware wallets attached to\nonline machines.  You could even have intermittently connected signers for\nslow-moving channels, or signers behind Tor, etc. .\n\n--\ndevrandom\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210116/25ea76d6/attachment-0001.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2021-01-17T01:31:07",
                "message_text_only": "Hello Kevin,\n\nThanks for starting this thread, that's a really relevant discussion\necosystem-wise !\n\n> * Proposed improvement: The HW should display the Bitcoin Script itself\nwhen possible (including the unlock conditions).\n\nWhat level of script literacy are you assuming on your users ? I can see\nenterprise/hobbyist folks to know enough of Script to understand the\nintended behavior but I don't think that's a reasonable assumption for your\naverage user. Of course, Miniscript Policy makes things easier, but IMHO, I\nstill hope to see some mature, higher-level language (e.g Ivy) to ease\nscript semantic understanding and thus widen the crowd of users.\n\nFurther, I would do a bit on UX research on the correctness model expected\nby your users. I.e if they fail to verify accordingly, are they losing\nfunds, transaction doesn't confirm, transaction doesn't even propagate,\netc. You should also make assumptions on the mental resources you're\nrequired from them. Time-sensitive L2 protocols have a wide scope to check,\ne.g not verifying the nSequence/nLocktime fields can provoke funds failures.\n\n> This applies to pre-signed transaction protocols especially well as the\ntemplate of these transactions could be known\nand recognized by the HW. Typically for Revault, the HW could display:\n\"Unvault Transaction, all expected pubkeys\npresent in the script\".\n\nIn the future, I would expect templates of high-security protocols like\nvaults to be part of the trusted computing base of any decent HW. I think\ngood standards there would avoid HW vendors to come with some kind of\ncertified-templates scheme and thus having to bless custom scripts of every\nvaults implementations.\n\n> Proposed improvement: The HW could know pubkeys or xpubs it does not hold\nthe private keys\nfor, and display a label (or\nunderstand it for logic reasons, such as \"expected pubkeys\" as the previous\nexample).\n\nI don't think you even need user input on this, the absence of pubkeys\nknowledge itself is a trigger to display a label or ask for further\ninformation. Where absence of pubkeys knowledge can be interpreted as\ndevoid from key whitelisting or privkey ownership.\n\n> Going further, the xpubs could be\naliased the first time they are entered/verified (as part of, say, an\ninitial setup ceremony) for instance with the\npreviously mentioned Miniscript policy: or(pk(Alice), and(pk(Bob),\nafter(42))).\n\nI would be careful about accidental or malicious alias collisions. But yes\nthat can be something, you can even conserve a merkle tree root in the\nSecure Element where the hashed element are\npreviously authenticated alias/pubkeys. And require from the non-trusted\nchallenger to come with a merkle branch to validate address inclusion.\n\n> Then there is PSBT support and the maximum transaction size limit for\nthese: we need more transparency from HW manufacturers on their li\nmitations.\n\nI understand them, Script is full of subtleties, taproot is likely to have\nmore of them and if you take sighash malleability that's not something you\nwant your average user to play with. Maybe it\nwould be better to come up with a first wave of script features on which\nyou expect transparency ? For sure, OP_CSV is a good candidate.\n\n> Once any input of a (pre-signed)transaction is\nspent, this transaction isn't valid anymore. Most pre-signed transactions\nprotocols are used today as a form of defense\nmechanism, spending any input would mean incapacitating the entire defense\nmechanism.\n\nI don't see the exact issue here. E.g in Lightning, even if you pre-sign a\njustice transaction punishing every revokeable outputs on counterparty\ntransaction, and one input is spent, will current HWs prevent you to-resign\nan updated justice transaction ?\n\n> I understand some of these changes may be very difficult, especially\ngiven the low memory and computational power of\nsecure elements.\n\nInstead of relying on hand-sized devices, what about relying on HSMs for a\nfirst-wave of adoptions, those ones have far enough resources to run a\nreasonable L2 stack on the trusted-side ?\n\nBut overall agree, on the requirement to level-up HWs for L2. IMO, a first\nstep could be to list a  common set of features beyond\ndeployed/soon-to-be-deployed L2s, that would make things easier for HW\nvendors to have a unique list of grievances. Before they engage in further,\ndedicated tweaks to adapt for each protocol security model. OP_CSV/OP_CTLV\ndecoding/\"burned\" standard scripts support would be a good starter.\n\n> Feel free to reply with your comments or adding suggestions, I am not a\nhardware wallet expert and would take criticism\nwit\nhout being offended.\n\nI don't know yet any *L2* hardware wallet expert :)\n\nCheers,\nAntoine\n\nLe jeu. 14 janv. 2021 \u00e0 13:46, Kevin Loaec via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n> Hello everyone,\n>\n> I would like to start a discussion on improving Hardware Wallets.\n>\n> My approach to this right now is from a vault protocol we are developing\n> (Revault, [1]), and its Hardware Wallet\n> requirements. I started working on a Github Issue in our repo [2], other\n> people recommended us to do a more general\n> discussion on the mailing list instead as it could benefit many other\n> protocols and users.\n> This email discusses improvements that would benefit everyone, and some\n> that are more suitable for \"layer 2\" or pre-\n> signed transactions protocols.\n> The goal is to spark discussions and hopefully iterate to a more secure\n> and more usable hardware ecosystem for all\n> bitcoiners.\n> While I mainly foresee issues/improvements that may affect Revault, I\n> would be really happy to see people joining this\n> thread with any other ideas and remarks that would benefit some parts of\n> Bitcoin that I overlooked.\n>\n>\n>\n> Prior work on similar problematics:\n> ===================================\n> - ZmnSCPx\n> j: [Lightning-dev] Speculations on hardware wallet support for Lightning\n> [3]\n> - mflaxman: Known Issues: Verifying a Receive Address [4]\n> - ksedgwic and devrandom01: Lightning-signer [5]\n> - benma: How nearly all personal hardware wallet multisig setups are\n> insecure [6]\n>\n>\n> The postulate we start from is that Hardware Wallets (HW) are useful to\n> mitigate the compromission of the day-to-day\n> device of a user. They mainly prevent private-key extraction today, and\n> aren't very suitable against an attack on the\n> transaction being signed, as explained further.\n> To make this discussion security-focused, let's assume the general purpose\n> device (laptop, for example) is compromised\n> with a malware implanted by an attacker, capable of modifying PSBTs,\n> displayed addresses, etc.\n>\n> Our study so far:\n>\n>\n> Output Script Parsing:\n> ======================\n> Problem: A typical HW today would display the \"destination\" of a\n> transaction in the form of a bitcoin address. A user\n> would generally compare this wit\n> h the address displayed on his laptop screen... which might have been\n> compromised\n> already. The correct usage would be for a user to verify this address on a\n> third device (mobile phone, for example).\n> This is weak security and bad user experience.\n> Proposed improvement: The HW should display the Bitcoin Script itself when\n> possible (including the unlock conditions).\n> The best way to do so would be to lift this Script to a more user-friendly\n> format such as a MiniScript Policy display,\n> but anything would be better than an \"address\".\n> This applies to pre-signed transaction protocols especially well as the\n> template of these transactions could be known\n> and recognized by the HW. Typically for Revault, the HW could display:\n> \"Unvault Transaction, all expected pubkeys\n> present in the script\".\n>\n>\n> Pubkey Interpretation:\n> ======================\n> Problem: currently HW cannot \"identify\" addresses or keys.\n> Proposed improvement: The HW could know pubkeys or xpubs it does not hold\n> the private keys\n> for, and display a label (or\n> understand it for logic reasons, such as \"expected pubkeys\" as the\n> previous example). Going further, the xpubs could be\n> aliased the first time they are entered/verified (as part of, say, an\n> initial setup ceremony) for instance with the\n> previously mentioned Miniscript policy: or(pk(Alice), and(pk(Bob),\n> after(42))).\n> This should be done in the Secure Element if possible to avoid physical\n> compromission, but would be a strong improvement\n> versus a day-to-day laptop in any case.\n>\n>\n> Better Bitcoin Compatibility:\n> =============================\n> Problem: most HW cannot interpret some Script OPs such as OP_CSV, or any\n> conditional outputs. This is a major issue for\n> anyone using Bitcoin \"advanced\" features. Related to this are the Sighash\n> flags: most HW do not support most Sighash\n> flags. Kind of annoying for a signing device. Then there is PSBT support\n> and the maximum transaction size limit for\n> these: we need more transparency from HW manufacturers on their li\n> mitations.\n> Solution: Make Bitcoin HW actually compatible with Bitcoin :D\n>\n>\n> Inputs (mainly for pre-signed Tx):\n> ==================================\n> Problem: Poisoned inputs are a major risk for HW as they don't know the\n> UTXO set. While this can be exploited for fee\n> attacks, it is a bigger threat to pre-signed transactions protocols. Once\n> any input of a (pre-signed)transaction is\n> spent, this transaction isn't valid anymore. Most pre-signed transactions\n> protocols are used today as a form of defense\n> mechanism, spending any input would mean incapacitating the entire defense\n> mechanism.\n> Proposed improvement: for protocols that requires it, keeping track of\n> inputs already signed once would be extremely\n> helpful. Going further, most of these protocols require to follow a\n> specific signing order (typically the \"clawback\"\n> first, then the regular spend path) so adding a way to check that a\n> \"clawback\" has been signed first, with the same\n> input, would be very helpful. All of this on the dev\n> ice itself.\n>\n>\n>\n>\n> I understand some of these changes may be very difficult, especially given\n> the low memory and computational power of\n> secure elements. However I truly believe most of these points are a MUST\n> have for any decent security. If you don't\n> assume the computer on which the transaction is crafted is compromised,\n> then you don't need a hardware wallet. If you\n> assume it may be compromised, then the HW needs to be able to defend\n> against those.\n>\n> Revault does not plan on building hardware wallets, we hope existing and\n> upcoming manufacturers will implement a strong\n> security that we could use for the Revault protocol users. Vault users\n> will likely hold very large sums and would be\n> happy to pay a high premium for more secure HW. This will hopefully\n> encourage existing players to keep on improving\n> their devices and that will ultimately benefit us all.\n>\n> Feel free to reply with your comments or adding suggestions, I am not a\n> hardware wallet expert and would take criticism\n> wit\n> hout being offended.\n>\n> Kind Regards,\n> Kevin Loaec\n>\n> [1]:\n> https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017835.html\n> [2]: https://github.com/re-vault/practical-revault/issues/59\n> [3]:\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002425.html\n> [4]: https://btcguide.github.io/known-issues/verify-receive-address\n> [5]: https://gitlab.com/lightning-signer/docs\n> [6]:\n> https://shiftcrypto.ch/blog/how-nearly-all-personal-hardware-wallet-multisig-setups-are-insecure/\n>\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210116/7b763fff/attachment.html>"
            },
            {
                "author": "darosior",
                "date": "2021-01-17T10:02:32",
                "message_text_only": "Hi Antoine, and Kevin,\n\n>> * Proposed improvement: The HW should display the Bitcoin Script itself when possible (including the unlock conditions).\n>\n> What level of script literacy are you assuming on your users ? I can see enterprise/hobbyist folks to know enough of Script to understand the intended behavior but I don't think that's a reasonable assumption for your average user. Of course, Miniscript Policy makes things easier, but IMHO, I still hope to see some mature, higher-level language (e.g Ivy) to ease script semantic understanding and thus widen the crowd of users.\n\nNo Script literacy should be assumed. I believe with Miniscript Policy (with possibly alias instead of pubkeys, see below) we are to the highest possible level of abstraction\nwithout loss of meaning for user verification. I don't think Ivy would be helpful here.\nAlso, as Kevin mentioned, anything would be better than an address anyways.\n\n> Further, I would do a bit on UX research on the correctness model expected by your users. I.e if they fail to verify accordingly, are they losing funds, transaction doesn't confirm, transaction doesn't even propagate, etc. You should also make assumptions on the mental resources you're required from them. Time-sensitive L2 protocols have a wide scope to check, e.g not verifying the nSequence/nLocktime fields can provoke funds failures.\n\nRegarding the correctness, with the OP threat model (laptop compromised), for any transaction: if they fail to verify the locking policy, fund loss.\nRe nSeq: If we trust the HM, and the HM support Miniscript, it must be able to satisfy inputs in a sa[n,f]e way.\n\n>> This applies to pre-signed transaction protocols especially well as the template of these transactions could be known\n> and recognized by the HW. Typically for Revault, the HW could display: \"Unvault Transaction, all expected pubkeys\n> present in the script\".\n>\n> In the future, I would expect templates of high-security protocols like vaults to be part of the trusted computing base of any decent HW. I think good standards there would avoid HW vendors to come with some kind of certified-templates scheme and thus having to bless custom scripts of every vaults implementations.\n\n+1\n\n>> Then there is PSBT support and the maximum transaction size limit for\n> these: we need more transparency from HW manufacturers on their li\n> mitations.\n>\n> I understand them, Script is full of subtleties, taproot is likely to have more of them and if you take sighash malleability that's not something you want your average user to play with. Maybe it\n> would be better to come up with a first wave of script features on which you expect transparency ? For sure, OP_CSV is a good candidate.\n\nI agree that rather than supporting all of Script it would be better to support a \"safe\", analyzable subset of Script: that's Miniscript :p\nI also believe supporting any new Script capabilities without Miniscript would be a huge footgun. It would also ease the upgrade to Tapscript.\n\n>> Once any input of a (pre-signed)transaction is\n> spent, this transaction isn't valid anymore. Most pre-signed transactions protocols are used today as a form of defense\n> mechanism, spending any input would mean incapacitating the entire defense mechanism.\n>\n> I don't see the exact issue here. E.g in Lightning, even if you pre-sign a justice transaction punishing every revokeable outputs on counterparty transaction, and one input is spent, will current HWs prevent you to-resign an updated justice transaction ?\n\nThat's because in Revault we don't require HMs for watchtowers. Funds holders are expected to have a routine signing of cancel / deterrent / unvault transactions\nand share them with the watchtowers. The attack Kevin is talking about is a (expected-to-be-stateless) HM will happily sign a cancel of deterrent transaction that\nspends an already-signed input. So let's say a fund holder sends a signature for an Unvault tx and a Cancel tx that does not spend this Unvault to their watchtower.\nThe watchtower would cringe (in our v0 protocol, send an NACK): but the NACK isn't handled by the HM therefore at the end of the day the already-compromised laptop\nis ensuring the (statefull) validity of the signature.\n\nThanks,\nAntoine\n\n> Le jeu. 14 janv. 2021 \u00e0 13:46, Kevin Loaec via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> a \u00e9crit :\n>\n>> Hello everyone,\n>>\n>> I would like to start a discussion on improving Hardware Wallets.\n>>\n>> My approach to this right now is from a vault protocol we are developing (Revault, [1]), and its Hardware Wallet\n>> requirements. I started working on a Github Issue in our repo [2], other people recommended us to do a more general\n>> discussion on the mailing list instead as it could benefit many other protocols and users.\n>> This email discusses improvements that would benefit everyone, and some that are more suitable for \"layer 2\" or pre-\n>> signed transactions protocols.\n>> The goal is to spark discussions and hopefully iterate to a more secure and more usable hardware ecosystem for all\n>> bitcoiners.\n>> While I mainly foresee issues/improvements that may affect Revault, I would be really happy to see people joining this\n>> thread with any other ideas and remarks that would benefit some parts of Bitcoin that I overlooked.\n>>\n>> Prior work on similar problematics:\n>> ===================================\n>> - ZmnSCPx\n>> j: [Lightning-dev] Speculations on hardware wallet support for Lightning [3]\n>> - mflaxman: Known Issues: Verifying a Receive Address [4]\n>> - ksedgwic and devrandom01: Lightning-signer [5]\n>> - benma: How nearly all personal hardware wallet multisig setups are insecure [6]\n>>\n>> The postulate we start from is that Hardware Wallets (HW) are useful to mitigate the compromission of the day-to-day\n>> device of a user. They mainly prevent private-key extraction today, and aren't very suitable against an attack on the\n>> transaction being signed, as explained further.\n>> To make this discussion security-focused, let's assume the general purpose device (laptop, for example) is compromised\n>> with a malware implanted by an attacker, capable of modifying PSBTs, displayed addresses, etc.\n>>\n>> Our study so far:\n>>\n>> Output Script Parsing:\n>> ======================\n>> Problem: A typical HW today would display the \"destination\" of a transaction in the form of a bitcoin address. A user\n>> would generally compare this wit\n>> h the address displayed on his laptop screen... which might have been compromised\n>> already. The correct usage would be for a user to verify this address on a third device (mobile phone, for example).\n>> This is weak security and bad user experience.\n>> Proposed improvement: The HW should display the Bitcoin Script itself when possible (including the unlock conditions).\n>> The best way to do so would be to lift this Script to a more user-friendly format such as a MiniScript Policy display,\n>> but anything would be better than an \"address\".\n>> This applies to pre-signed transaction protocols especially well as the template of these transactions could be known\n>> and recognized by the HW. Typically for Revault, the HW could display: \"Unvault Transaction, all expected pubkeys\n>> present in the script\".\n>>\n>> Pubkey Interpretation:\n>> ======================\n>> Problem: currently HW cannot \"identify\" addresses or keys.\n>> Proposed improvement: The HW could know pubkeys or xpubs it does not hold the private keys\n>> for, and display a label (or\n>> understand it for logic reasons, such as \"expected pubkeys\" as the previous example). Going further, the xpubs could be\n>> aliased the first time they are entered/verified (as part of, say, an initial setup ceremony) for instance with the\n>> previously mentioned Miniscript policy: or(pk(Alice), and(pk(Bob), after(42))).\n>> This should be done in the Secure Element if possible to avoid physical compromission, but would be a strong improvement\n>> versus a day-to-day laptop in any case.\n>>\n>> Better Bitcoin Compatibility:\n>> =============================\n>> Problem: most HW cannot interpret some Script OPs such as OP_CSV, or any conditional outputs. This is a major issue for\n>> anyone using Bitcoin \"advanced\" features. Related to this are the Sighash flags: most HW do not support most Sighash\n>> flags. Kind of annoying for a signing device. Then there is PSBT support and the maximum transaction size limit for\n>> these: we need more transparency from HW manufacturers on their li\n>> mitations.\n>> Solution: Make Bitcoin HW actually compatible with Bitcoin :D\n>>\n>> Inputs (mainly for pre-signed Tx):\n>> ==================================\n>> Problem: Poisoned inputs are a major risk for HW as they don't know the UTXO set. While this can be exploited for fee\n>> attacks, it is a bigger threat to pre-signed transactions protocols. Once any input of a (pre-signed)transaction is\n>> spent, this transaction isn't valid anymore. Most pre-signed transactions protocols are used today as a form of defense\n>> mechanism, spending any input would mean incapacitating the entire defense mechanism.\n>> Proposed improvement: for protocols that requires it, keeping track of inputs already signed once would be extremely\n>> helpful. Going further, most of these protocols require to follow a specific signing order (typically the \"clawback\"\n>> first, then the regular spend path) so adding a way to check that a \"clawback\" has been signed first, with the same\n>> input, would be very helpful. All of this on the dev\n>> ice itself.\n>>\n>> I understand some of these changes may be very difficult, especially given the low memory and computational power of\n>> secure elements. However I truly believe most of these points are a MUST have for any decent security. If you don't\n>> assume the computer on which the transaction is crafted is compromised, then you don't need a hardware wallet. If you\n>> assume it may be compromised, then the HW needs to be able to defend against those.\n>>\n>> Revault does not plan on building hardware wallets, we hope existing and upcoming manufacturers will implement a strong\n>> security that we could use for the Revault protocol users. Vault users will likely hold very large sums and would be\n>> happy to pay a high premium for more secure HW. This will hopefully encourage existing players to keep on improving\n>> their devices and that will ultimately benefit us all.\n>>\n>> Feel free to reply with your comments or adding suggestions, I am not a hardware wallet expert and would take criticism\n>> wit\n>> hout being offended.\n>>\n>> Kind Regards,\n>> Kevin Loaec\n>>\n>> [1]: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-May/017835.html\n>> [2]: https://github.com/re-vault/practical-revault/issues/59\n>> [3]: https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002425.html\n>> [4]: https://btcguide.github.io/known-issues/verify-receive-address\n>> [5]: https://gitlab.com/lightning-signer/docs\n>> [6]: https://shiftcrypto.ch/blog/how-nearly-all-personal-hardware-wallet-multisig-setups-are-insecure/\n>>\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210117/8d1d6722/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Hardware wallets and \"advanced\" Bitcoin features",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Antoine Riard",
                "darosior",
                "Kevin Loaec",
                "ZmnSCPxj",
                "Devrandom"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 35843
        }
    },
    {
        "title": "[bitcoin-dev] PayJoin adoption",
        "thread_messages": [
            {
                "author": "Chris Belcher",
                "date": "2021-01-16T00:07:08",
                "message_text_only": "PayJoin is an exciting bitcoin privacy technology which has the\npotential to damage the ability of blockchain surveillance to spy on\nbitcoin users and destroy bitcoin's fungibility. A protocol standard has\nalready been defined and implemented by a couple of projects such as\nBTCPayServer, Wasabi Wallet, JoinMarket and BlueWallet.\n\nI've made a wiki page tracking adoption:\nhttps://en.bitcoin.it/wiki/PayJoin_adoption\n\nIt is similar to the Bech32 adoption page.\n\n\nRecently a UK bitcoin exchange shut down due to new regulations, with\nthe owner writing a very interesting and relevant blog post that I'll\nquote here:\n\n> you\u2019re considered suspicious if you used a marketplace and not an\nexchange. Coinjoin counts as high risk. Gambling is high risk. As you\nuse entities that are paranoid about keeping their coins clean and\nadhering to all the regulations, your risk scores will continue to\nincrease and without you even knowing why, your deposits will become\nrejected, you may be asked to supply documents or lose the coins, your\naccount may become suspended without you having any clue what you did\nwrong. And quite possibly you didn\u2019t do anything wrong. But that won\u2019t\nmatter.\n>\n> The goal post, the risk score threshold will keep moving along this\ntrend until the point where you will be afraid of using your personal\nwallet, donating to someone online, receiving bitcoins from anywhere\nexcept for regulated exchanges. At that point, crypto will be akin to a\nregular bank account. You won\u2019t have a bitcoin wallet, you will have\naccounts to websites.\n\nhttps://blog.bitbargain.com/post/638504004285054976/goodbye\n\nIf we want bitcoin to fulfill its dream of a permissionless money for\nthe internet then we'll have to work on this. What can we do to increase\nadoption of PayJoin?"
            },
            {
                "author": "dev_f",
                "date": "2021-01-16T02:52:34",
                "message_text_only": "Hey Chris,\n\nI assume that a major reason for the lack of adoption is the lack of visibility.\nI personally first found out about PayJoin when using BTCPayServer for a donation\nand being told by the site that PayJoin was available (https://hrf.org/donate-bitcoin/payjoin/).\nThe wiki page you created is a good starting point. Bringing up the issue of implementing\nPayJoin directly with the companies / in the respective software repos seems like it would\nbe a strong first step for greater adoption. Gets more eyes on it in general.\n(Directly contributing to the software by writing an implementation is obviously the\nmost helpful, though clearly harder.)\n\nAs a second option, pushing merchants towards accepting Bitcoin specifically via\nsoftware like BTCPayServer, which already supports PayJoin, might be immensely\nhelpful when Bitcoin adoption itself rises.\n\nFitti\n\nSent with ProtonMail Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n\nOn Saturday, January 16th, 2021 at 1:07 AM, Chris Belcher via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> PayJoin is an exciting bitcoin privacy technology which has the\n> \n\n> potential to damage the ability of blockchain surveillance to spy on\n> \n\n> bitcoin users and destroy bitcoin's fungibility. A protocol standard has\n> \n\n> already been defined and implemented by a couple of projects such as\n> \n\n> BTCPayServer, Wasabi Wallet, JoinMarket and BlueWallet.\n> \n\n> I've made a wiki page tracking adoption:\n> \n\n> https://en.bitcoin.it/wiki/PayJoin_adoption\n> \n\n> It is similar to the Bech32 adoption page.\n> \n\n> Recently a UK bitcoin exchange shut down due to new regulations, with\n> \n\n> the owner writing a very interesting and relevant blog post that I'll\n> \n\n> quote here:\n> \n\n> > you\u2019re considered suspicious if you used a marketplace and not an\n> \n\n> exchange. Coinjoin counts as high risk. Gambling is high risk. As you\n> \n\n> use entities that are paranoid about keeping their coins clean and\n> \n\n> adhering to all the regulations, your risk scores will continue to\n> \n\n> increase and without you even knowing why, your deposits will become\n> \n\n> rejected, you may be asked to supply documents or lose the coins, your\n> \n\n> account may become suspended without you having any clue what you did\n> \n\n> wrong. And quite possibly you didn\u2019t do anything wrong. But that won\u2019t\n> \n\n> matter.\n> \n\n> > The goal post, the risk score threshold will keep moving along this\n> \n\n> trend until the point where you will be afraid of using your personal\n> \n\n> wallet, donating to someone online, receiving bitcoins from anywhere\n> \n\n> except for regulated exchanges. At that point, crypto will be akin to a\n> \n\n> regular bank account. You won\u2019t have a bitcoin wallet, you will have\n> \n\n> accounts to websites.\n> \n\n> https://blog.bitbargain.com/post/638504004285054976/goodbye\n> \n\n> If we want bitcoin to fulfill its dream of a permissionless money for\n> \n\n> the internet then we'll have to work on this. What can we do to increase\n> \n\n> adoption of PayJoin?\n> \n\n> bitcoin-dev mailing list\n> \n\n> bitcoin-dev at lists.linuxfoundation.org\n> \n\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: publickey - dev at fitti.io - 0xC413574E.asc\nType: application/pgp-keys\nSize: 640 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210116/2bc4b8db/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 249 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210116/2bc4b8db/attachment.sig>"
            },
            {
                "author": "Craig Raw",
                "date": "2021-01-16T06:15:27",
                "message_text_only": "Hey Chris,\n\nYou can add Sparrow Wallet to the list for Sending :)\n\nI think one of the barriers to greater Payjoin adoption is the need for a\nserver endpoint on the receiving side. Ideally, all wallets should be able\nto conduct Payjoin transactions with each other. This would require a\ndifferent mechanism to exchange the PSBTs, but otherwise the specification\nshould need no amendment. Samourai has implemented their Soroban protocol\nto do this over Tor, but as far as I know it's not yet documented.\n\nGiven Payjoin is fee efficient (much more so than coinjoin) and relatively\nsimple to implement, it appears to hold great promise in disrupting\nblockchain analysis. I'd love to see a standard that wallets can adopt to\nreceive Payjoin transactions without a server endpoint.\n\nCraig\n\nOn Sat, Jan 16, 2021 at 5:13 AM dev_f via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> Hey Chris,\n>\n> I assume that a major reason for the lack of adoption is the lack of\n> visibility.\n> I personally first found out about PayJoin when using BTCPayServer for a\n> donation\n> and being told by the site that PayJoin was available (\n> https://hrf.org/donate-bitcoin/payjoin/).\n> The wiki page you created is a good starting point. Bringing up the issue\n> of implementing\n> PayJoin directly with the companies / in the respective software repos\n> seems like it would\n> be a strong first step for greater adoption. Gets more eyes on it in\n> general.\n> (Directly contributing to the software by writing an implementation is\n> obviously the\n> most helpful, though clearly harder.)\n>\n> As a second option, pushing merchants towards accepting Bitcoin\n> specifically via\n> software like BTCPayServer, which already supports PayJoin, might be\n> immensely\n> helpful when Bitcoin adoption itself rises.\n>\n> Fitti\n>\n> Sent with ProtonMail Secure Email.\n>\n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n>\n> On Saturday, January 16th, 2021 at 1:07 AM, Chris Belcher via bitcoin-dev <\n> bitcoin-dev at lists.linuxfoundation.org> wrote:\n>\n> > PayJoin is an exciting bitcoin privacy technology which has the\n> >\n>\n> > potential to damage the ability of blockchain surveillance to spy on\n> >\n>\n> > bitcoin users and destroy bitcoin's fungibility. A protocol standard has\n> >\n>\n> > already been defined and implemented by a couple of projects such as\n> >\n>\n> > BTCPayServer, Wasabi Wallet, JoinMarket and BlueWallet.\n> >\n>\n> > I've made a wiki page tracking adoption:\n> >\n>\n> > https://en.bitcoin.it/wiki/PayJoin_adoption\n> >\n>\n> > It is similar to the Bech32 adoption page.\n> >\n>\n> > Recently a UK bitcoin exchange shut down due to new regulations, with\n> >\n>\n> > the owner writing a very interesting and relevant blog post that I'll\n> >\n>\n> > quote here:\n> >\n>\n> > > you\u2019re considered suspicious if you used a marketplace and not an\n> >\n>\n> > exchange. Coinjoin counts as high risk. Gambling is high risk. As you\n> >\n>\n> > use entities that are paranoid about keeping their coins clean and\n> >\n>\n> > adhering to all the regulations, your risk scores will continue to\n> >\n>\n> > increase and without you even knowing why, your deposits will become\n> >\n>\n> > rejected, you may be asked to supply documents or lose the coins, your\n> >\n>\n> > account may become suspended without you having any clue what you did\n> >\n>\n> > wrong. And quite possibly you didn\u2019t do anything wrong. But that won\u2019t\n> >\n>\n> > matter.\n> >\n>\n> > > The goal post, the risk score threshold will keep moving along this\n> >\n>\n> > trend until the point where you will be afraid of using your personal\n> >\n>\n> > wallet, donating to someone online, receiving bitcoins from anywhere\n> >\n>\n> > except for regulated exchanges. At that point, crypto will be akin to a\n> >\n>\n> > regular bank account. You won\u2019t have a bitcoin wallet, you will have\n> >\n>\n> > accounts to websites.\n> >\n>\n> > https://blog.bitbargain.com/post/638504004285054976/goodbye\n> >\n>\n> > If we want bitcoin to fulfill its dream of a permissionless money for\n> >\n>\n> > the internet then we'll have to work on this. What can we do to increase\n> >\n>\n> > adoption of PayJoin?\n> >\n>\n> > bitcoin-dev mailing list\n> >\n>\n> > bitcoin-dev at lists.linuxfoundation.org\n> >\n>\n> > https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210116/005e8719/attachment.html>"
            },
            {
                "author": "Lucas Ontivero",
                "date": "2021-01-18T20:38:51",
                "message_text_only": "Hi\n\nBefore all, thanks for the wiki page tracking the payjoin adoption, it is a\ngood idea.\n\n-----\n\nEven when there is a reasonable economical incentive to use segwit\ntransactions to save fees a big percentage of the transactions are not\nusing segwit yet. In the case of payjoins the economic incentives are not\nso big while the privacy benefits are not so clear for the payer as they\nare for the global transactions graph as a whole. This means that payjoins\nrequires some level of altruist attitude from the payers. The payjoins UX\nis also not good because I think most users are not familiar with bip21\nuris (users still request support because they pay a bech32 address in an\nexchange and the exchange tells them that's not a valid bitcoin address).\nAll this is relative and subjective but in general terms I would say it is\nmore or less true for many people.\n\nAnyway, imagine wallets' developers agree on making payjoins payment by\ndefault because it is the right thing to do (fight against surveillance to\nspy on bitcoin users and improve bitcoin's fungibility). In that case it\nshould be completely transparent to the users and at not cost, it shouldn't\nrequire the user to do anything different, it shouldn't be noticeable\nslower, etc. In fact, users should have to know they are payjoining at all.\n\nThe only way I see to achieve something like that is by moving to schemes\nwhere wallets can communicate and interact. I should be able to know\nsomething about you that allows me to select your name from my contact list\nand select \"Pay to Chris\" and if my wallet knows how to find yours then it\ncan request a new address and pays, or generate a new one for you (probably\nusing a output descriptor you created to share with me).\n\nSorry for the long semi-random rant.\n\nEl vie, 15 ene 2021 a las 21:07, Chris Belcher via bitcoin-dev (<\nbitcoin-dev at lists.linuxfoundation.org>) escribi\u00f3:\n\n> PayJoin is an exciting bitcoin privacy technology which has the\n> potential to damage the ability of blockchain surveillance to spy on\n> bitcoin users and destroy bitcoin's fungibility. A protocol standard has\n> already been defined and implemented by a couple of projects such as\n> BTCPayServer, Wasabi Wallet, JoinMarket and BlueWallet.\n>\n> I've made a wiki page tracking adoption:\n> https://en.bitcoin.it/wiki/PayJoin_adoption\n>\n> It is similar to the Bech32 adoption page.\n>\n>\n> Recently a UK bitcoin exchange shut down due to new regulations, with\n> the owner writing a very interesting and relevant blog post that I'll\n> quote here:\n>\n> > you\u2019re considered suspicious if you used a marketplace and not an\n> exchange. Coinjoin counts as high risk. Gambling is high risk. As you\n> use entities that are paranoid about keeping their coins clean and\n> adhering to all the regulations, your risk scores will continue to\n> increase and without you even knowing why, your deposits will become\n> rejected, you may be asked to supply documents or lose the coins, your\n> account may become suspended without you having any clue what you did\n> wrong. And quite possibly you didn\u2019t do anything wrong. But that won\u2019t\n> matter.\n> >\n> > The goal post, the risk score threshold will keep moving along this\n> trend until the point where you will be afraid of using your personal\n> wallet, donating to someone online, receiving bitcoins from anywhere\n> except for regulated exchanges. At that point, crypto will be akin to a\n> regular bank account. You won\u2019t have a bitcoin wallet, you will have\n> accounts to websites.\n>\n> https://blog.bitbargain.com/post/638504004285054976/goodbye\n>\n> If we want bitcoin to fulfill its dream of a permissionless money for\n> the internet then we'll have to work on this. What can we do to increase\n> adoption of PayJoin?\n> _______________________________________________\n> bitcoin-dev mailing list\n> bitcoin-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210118/d900c8f8/attachment.html>"
            },
            {
                "author": "Chris Belcher",
                "date": "2021-01-19T15:44:11",
                "message_text_only": "Regarding incentives, privacy is itself an incentive.\n\nIf your business suffers from being spied on (for example you're a\ncasino or p2p exchange, and regulated exchanges keep banning your\ncustomers) then the cost of adopting payjoin is worth it. That's why I\nexpect and hope that p2p exchanges will be one of the earlier adopters.\n\nWhile researching for the Adoption page I was surprised to find that one\nexchange has already adopted PayJoin: a no-signup altcoin exchange\ncalled sideshift.ai\n\n\nOn 18/01/2021 20:38, Lucas Ontivero wrote:\n> Hi\n> \n> Before all, thanks for the wiki page tracking the payjoin adoption, it is a\n> good idea.\n> \n> -----\n> \n> Even when there is a reasonable economical incentive to use segwit\n> transactions to save fees a big percentage of the transactions are not\n> using segwit yet. In the case of payjoins the economic incentives are not\n> so big while the privacy benefits are not so clear for the payer as they\n> are for the global transactions graph as a whole. This means that payjoins\n> requires some level of altruist attitude from the payers. The payjoins UX\n> is also not good because I think most users are not familiar with bip21\n> uris (users still request support because they pay a bech32 address in an\n> exchange and the exchange tells them that's not a valid bitcoin address).\n> All this is relative and subjective but in general terms I would say it is\n> more or less true for many people.\n> \n> Anyway, imagine wallets' developers agree on making payjoins payment by\n> default because it is the right thing to do (fight against surveillance to\n> spy on bitcoin users and improve bitcoin's fungibility). In that case it\n> should be completely transparent to the users and at not cost, it shouldn't\n> require the user to do anything different, it shouldn't be noticeable\n> slower, etc. In fact, users should have to know they are payjoining at all.\n> \n> The only way I see to achieve something like that is by moving to schemes\n> where wallets can communicate and interact. I should be able to know\n> something about you that allows me to select your name from my contact list\n> and select \"Pay to Chris\" and if my wallet knows how to find yours then it\n> can request a new address and pays, or generate a new one for you (probably\n> using a output descriptor you created to share with me).\n> \n> Sorry for the long semi-random rant.\n> \n> El vie, 15 ene 2021 a las 21:07, Chris Belcher via bitcoin-dev (<\n> bitcoin-dev at lists.linuxfoundation.org>) escribi\u00f3:\n> \n>> PayJoin is an exciting bitcoin privacy technology which has the\n>> potential to damage the ability of blockchain surveillance to spy on\n>> bitcoin users and destroy bitcoin's fungibility. A protocol standard has\n>> already been defined and implemented by a couple of projects such as\n>> BTCPayServer, Wasabi Wallet, JoinMarket and BlueWallet.\n>>\n>> I've made a wiki page tracking adoption:\n>> https://en.bitcoin.it/wiki/PayJoin_adoption\n>>\n>> It is similar to the Bech32 adoption page.\n>>\n>>\n>> Recently a UK bitcoin exchange shut down due to new regulations, with\n>> the owner writing a very interesting and relevant blog post that I'll\n>> quote here:\n>>\n>>> you\u2019re considered suspicious if you used a marketplace and not an\n>> exchange. Coinjoin counts as high risk. Gambling is high risk. As you\n>> use entities that are paranoid about keeping their coins clean and\n>> adhering to all the regulations, your risk scores will continue to\n>> increase and without you even knowing why, your deposits will become\n>> rejected, you may be asked to supply documents or lose the coins, your\n>> account may become suspended without you having any clue what you did\n>> wrong. And quite possibly you didn\u2019t do anything wrong. But that won\u2019t\n>> matter.\n>>>\n>>> The goal post, the risk score threshold will keep moving along this\n>> trend until the point where you will be afraid of using your personal\n>> wallet, donating to someone online, receiving bitcoins from anywhere\n>> except for regulated exchanges. At that point, crypto will be akin to a\n>> regular bank account. You won\u2019t have a bitcoin wallet, you will have\n>> accounts to websites.\n>>\n>> https://blog.bitbargain.com/post/638504004285054976/goodbye\n>>\n>> If we want bitcoin to fulfill its dream of a permissionless money for\n>> the internet then we'll have to work on this. What can we do to increase\n>> adoption of PayJoin?\n>> _______________________________________________\n>> bitcoin-dev mailing list\n>> bitcoin-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev\n>>\n>"
            }
        ],
        "thread_summary": {
            "title": "PayJoin adoption",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Chris Belcher",
                "dev_f",
                "Craig Raw",
                "Lucas Ontivero"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 18803
        }
    },
    {
        "title": "[bitcoin-dev] Taproot activation meeting on IRC - Tuesday 2nd February 19:00 UTC",
        "thread_messages": [
            {
                "author": "Michael Folkson",
                "date": "2021-01-22T12:01:37",
                "message_text_only": "There has been an incredible community effort to make progress towards\nconsensus on an activation method for the proposed Taproot soft fork.\n\n\nSpecial mentions go to David Harding, AJ Towns, Aaron van Wirdum, Jonathan\nBier, Ben Carman, Alejandro De La Torre whose resources are linked below\nbut there have been many others, too many to name, who have all made an\nimpact on moving the needle in recent months.\n\n\nTaproot activation proposals:\nhttps://en.bitcoin.it/wiki/Taproot_activation_proposals\n\n\nActivating Soft Forks in Bitcoin:\nhttp://www.erisian.com.au/wordpress/2020/10/26/activating-soft-forks-in-bitcoin\n\n\nBIP 8, BIP 9 or Modern Soft Fork Activation: How Bitcoin Could Upgrade\nNext:\nhttps://bitcoinmagazine.com/articles/bip-8-bip-9-or-modern-soft-fork-activation-how-bitcoin-could-upgrade-next\n\n\nBitcoin Softfork Activation Methodology:\nhttps://blog.bitmex.com/bitcoin-softfork-activation-methodology/\n\n\nActivating Taproot: https://suredbits.com/activating-taproot/\n\n\nTaproot activation website: https://taprootactivation.com/\n\n\nIn an effort to get this closer to the finish line we are organizing a\nmeeting on IRC on the ##taproot-activation channel on Tuesday 2nd February\nat 19:00 UTC. The primary objective will be to finalize the revised BIP 8\nactivation method but general questions or discussion on Taproot activation\nare welcome too. There is lots of prior context so please do sufficient\npre-reading in advance of attending if you would like to participate.\n\n\nThe relevant pull requests relating to revised BIP 8 are:\n\n\nReplace unused BIP 9 logic with draft BIP 8 (Bitcoin Core PR)\n\n\nhttps://github.com/bitcoin/bitcoin/pull/19573\n\n\nBIP 8: Make signalling during LOCKED_IN recommended rather than mandatory\n(BIP PR)\n\n\nhttps://github.com/bitcoin/bips/pull/1020\n\n\nBIP 8: allow some MUST_SIGNAL blocks to not signal (BIP PR)\n\n\nhttps://github.com/bitcoin/bips/pull/1021\n\n\nFeel free to post comments or questions at any time on the\n##taproot-activation channel IRC in advance or following the meeting.\n\n-- \nMichael Folkson\nEmail: michaelfolkson at gmail.com\nKeybase: michaelfolkson\nPGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210122/47eaf1f3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Taproot activation meeting on IRC - Tuesday 2nd February 19:00 UTC",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Michael Folkson"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2331
        }
    },
    {
        "title": "[bitcoin-dev] Libre/Open blockchain / cryptographic ASICs",
        "thread_messages": [
            {
                "author": "Luke Kenneth Casson Leighton",
                "date": "2021-01-25T18:00:35",
                "message_text_only": "folks, hi, please do cc me as i am subscribed \"digest\", apologies for the\ninconvenience.\n\ni've been speaking on and off with kanzure, asking his advice about a libre\n/ transparently-developed ASIC / SoC, for some time, since meeting a very\ninteresting person at the Barcelona RISC-V Workshop in 2018.\n\nthis person pointed out that FIPS-approved algorithms, implemented in\nFIPS-approved crypto-chips used in hardware wallets to protect billions to\ntrillions in cryptocurrency assets world-wide are basically asking for\ntrouble.  i heard 3rd-hand that the constants used in the original bitcoin\nprotocol were very deliberately changed from those approved by FIPS and the\nNSA for exactly the reasons that drive people to question whether it is a\ngood idea to trust closed and secretive crypto-chips, no matter how\nwell-intentioned the company that manufactures them.  the person i met was\nthere to \"sound out\" interested parties willing to help with such a\nventure, even to the extent of actually buying a Foundry, in order to\nguarantee that the crypto-chip they would like to see made had not been\ntampered with at any point during manufacturing.\n\nat FOSDEM2019 i was also approached by a team that also wanted to do a\nbasic \"embedded\" processor, entirely libre-licensed, only in 350nm or\n180nm, with just enough horsepower to do digital signing and so on.  since\nthen, fascinatingly, NLnet has obtained a new EU Horizon Grant and started\ntheir \"Assure\" Programme:\nhttps://nlnet.nl/assure/\n\n(our application may be found here):\nhttps://libre-soc.org/nlnet_2021_crypto_router/\n\nin addition, betrusted (headed by Bunnie Huang) is also funded by NLnet and\nis along similar lines:\nhttps://betrusted.io/\n\nNLnet is even funding LibreSOC with a 180nm test chip tape-out of the\nLibreSOC Core, with help from Sorbonne University and\nhttps://chips4makers.io\nhttps://bugs.libre-soc.org/show_bug.cgi?id=199\n\nand we also have funding to do Formal Correctness Proofs for the low-level\nportions of the HDL (similar to c++ and python \"assert\", but for hardware)\nhttps://bugs.libre-soc.org/show_bug.cgi?id=158\n\nthe point being that where even one year ago the idea of an open source\ndeveloper creating and paying for an actual ASIC was so ridiculous they\nwould be laughed at and viewed in a derisive fashion thereafter, reality is\nthat things are opening up to the point where even Foundry PDKs are now\nopen source:\nhttps://github.com/google/skywater-pdk\n\ntechnically it is possible to use Open Hardware to create commercial\n(closed) products.  Richard Herveille, most well-known for his early\ninvolvement in Opencores, was the Open Hardware developer responsible for\nthe HDL behind the first Antminer product by Bitmain, for example.  It used\nhis RV32 core and i believe he also developed the SHA256 HDL for them.\nhowever that is different in that it was a closed product, not open for\nindependent public audit and review.\n\nwhat i am therefore trying to say is that it is a genuinely achievable\ngoal, now, to create fully transparently-openly-developed ASICs that could\nperform crytographic tasks such as mining and hardware wallet key\nprotection *and have a full audit trail* even to the extent of having\nmathematical Formal Correctness Proofs.\n\nmy question is - therefore - with all that background in mind - is: is this\nsomething that is of interest?\n\nnow, before getting all excited about the possibilities, it's critically\nimportant to provide a reality-check on the costs involved:\n\n* 350nm ASICs: https://chips4makers.io - EUR 1750 for 20 samples\n* 180nm ASICs: EUR $600 per mm^2 MPW Shuttle (test ASICs) and EUR 50,000\nfor production masks\n* ... exponential curve going through 130nm, 65nm, 45nm gets to around\n$500k...\n* 28nm ASICs: USD 100,000 for MPW and USD $1 million for production masks\n* 22nm ASICs: double 28nm\n* 14nm: double 22nm\n* 7nm: quadruple 14nm\n\nyou get where that is going.  where higher geometries are now easily within\nreach even of a hobbyist ASIC developer, USD 20 million is a bare minimum\nto design, develop and bring to manufacture a 7nm Custom ASIC.  full-custom\nsilicon, as carried out regularly by Intel, is USD 100 million.\n\nthis is not to say that it is completely outside the realm of possibility\nto do something in these lower geometries: you either simply have to have a\ndamn good reason, or a hell of a lot of money, or a product that's so\ncompelling that customers really *really* want it, or you have OEMs lining\nup to sign LOIs or put up cash-with-preorder.\n\n[my personal favourite is a focus on power-efficiency: battery-operated\nhand-held devices at or below 3.5 watts (thus not requiring thermal pipes\nor fans - which tend to break). i have to admit i am a little alarmed at\nthe world-wide energy consumption of bitcoin: personally i would very much\nprefer to be involved in eco-conscious blockchain and crypto-currency\nproducts].\n\nso - as an open question: what would people really like to see happen,\nhere, what do people feel would be of interest to the wider bitcoin\ncommunity, and, crucially, is there a realistic way to bridge (fund) the\ngap and actually deliver to the bitcoin user community?\n\nbest,\n\nl.\n\n---\ncrowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68\n\n\n-- \n---\ncrowd-funded eco-conscious hardware: https://www.crowdsupply.com/eoma68\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210125/7f74fdde/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2021-01-26T10:47:50",
                "message_text_only": "On Tue, 26 Jan 2021 at 00:10, Luke Kenneth Casson Leighton via bitcoin-dev <\nbitcoin-dev at lists.linuxfoundation.org> wrote:\n\n> so - as an open question: what would people really like to see happen,\n> here, what do people feel would be of interest to the wider bitcoin\n> community, and, crucially, is there a realistic way to bridge (fund) the\n> gap and actually deliver to the bitcoin user community?\n\n\nHi Luke!\n\nVery excited to hear more about your effort! Recently, SatoshiLabs\n(creators of Trezor) spinned off a new entity Tropic Square[1], which has\nthe same goal - to bring the truly open security chips to the general\npublic. I'll send you another email, where we can arrange the call to\nexchange ideas.\n\n[1] https://tropicsquare.com\n\n-- \nBest Regards / S pozdravom,\n\nPavol \"stick\" Rusnak\nCTO, SatoshiLabs\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210126/bdf172f3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Libre/Open blockchain / cryptographic ASICs",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Luke Kenneth Casson Leighton",
                "Pavol Rusnak"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 6478
        }
    },
    {
        "title": "[bitcoin-dev] Update on DLCs (new mailing list)",
        "thread_messages": [
            {
                "author": "Nadav Kohen",
                "date": "2021-01-25T22:17:36",
                "message_text_only": "Hi all,\n\nA Discreet Log Contract (DLC) is a Bitcoin-compatible oracle contract\nenabling transactions to be contingent on signatures broadcasted by some\nset of oblivious oracles. This scheme is a contracting building block that\nenables a variety of applications such as disintermediated betting,\nhedging, financial contracts, and even such things as synthetic assets.\n\nI am excited to announce that there is now a dlc-dev mailing list (\nhttps://mailmanlists.org/mailman/listinfo/dlc-dev) for anyone who wants to\nfollow or participate in work related to Discreet Log Contracts! Here is\nthe repository which has links to many resources including blog posts and\nthe white paper: https://github.com/discreetlogcontracts/dlcspecs.\n\nWe also have monthly specification meetings on the first Tuesday of every\nmonth, if you are interested in attending and do not have an invite feel\nfree to reach out.\n\nIn case you haven't been following recent progress in DLCs, here's a quick\n(incomplete) list of updates:\n\n* We are using ECDSA Adaptor signatures, soon to be PR'd to secp256k1-zkp:\nhttps://github.com/discreetlogcontracts/dlcspecs/pull/114.\n\n* We have defined TLV-serializations for messages (like Lightning) required\nto set up DLCs between parties (including messages from oracles).\n\n* We have multiple compatible DLC implementations.\n\n* We have specified (and implemented) compression algorithms which make\nDLCs that are contingent on numeric outcomes (such as prices) practical and\nexpressive enough to support any payout curve.\n\n* We have specified (and implemented) algorithms which allow users to use a\nthreshold t-of-n oracles, even supporting numeric cases where some bounded\ndifference is permitted between oracles.\n\n* We are aiming to have a more stable v0 tag/release of the specification\nin a few months!\n\nBest,\nNadav Kohen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20210125/64d643d3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Update on DLCs (new mailing list)",
            "categories": [
                "bitcoin-dev"
            ],
            "authors": [
                "Nadav Kohen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2010
        }
    }
]