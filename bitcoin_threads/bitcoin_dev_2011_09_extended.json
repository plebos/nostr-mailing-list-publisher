[{"title": "[Bitcoin-development] Bitcoin-qt ready for merging", "thread_messages": [{"author": "John Smith", "date": "2011-09-01T02:11:40", "message_text_only": "Would it be possible to port some of the existing translations?\n>\n\nWell, the strings in the core can be reused one-on-one as the _ function is\nmapped to the Qt translation function.\n\nAnd some of the UI texts probably can be reused as well, at least for a\nrough approximation.\n\nThe files will have to be converted, as Qt uses an XML-based format whereas\nWx uses a line-based one. Also, Qt translations have a \"context\"\n(file/object) defined whereas in Wx the \"msgid\" is only the English text.\nNah, nothing that a bit of Python hacking can't solve.\n\nThough IMHO its not a huge deal if qt is merged without all the\n> translations as IMHO it should be merged soon and then not the default\n> release GUI until its in tree for a bit (like one release) and some\n> translations can be built up.\n>\n\nExactly... if there is some time between Qt being merged and Wx being phased\nout, translations can be added. The Qt translation tool (Qt Linguist) is\nuser friendly enough to be used by anyone.\n\n>\n> > So IMO, it is ready to be merged.\n> IMHO it should be merged right after 0.4 is pushed.\n>\n\nSounds fine with me,\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110901/e5fb7740/attachment.html>", "summary": "Qt translations can be reused for Bitcoin Core, but files need to be converted from Wx's line-based format to Qt's XML-based format. Translations can be added later."}, {"author": "Luke-Jr", "date": "2011-09-01T02:13:33", "message_text_only": "On Wednesday, August 31, 2011 10:20:48 AM John Smith wrote:\n> The project builds on Windows, MacOSX and Linux using qmake.\n\nHow do you set build options with qmake?", "summary": "John Smith uses qmake to build a project on Windows, MacOSX, and Linux and seeks guidance on setting build options."}, {"author": "John Smith", "date": "2011-09-01T02:32:52", "message_text_only": "On Thu, Sep 1, 2011 at 2:13 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Wednesday, August 31, 2011 10:20:48 AM John Smith wrote:\n> > The project builds on Windows, MacOSX and Linux using qmake.\n>\n> How do you set build options with qmake?\n>\n\nYou can put assignments on the commandline; for example,\n\nqmake \"CONFIG+=test\" test.pro\n\nLike in plain make, these variables can be used for conditionally\nenabling/disabling libraries or other options in the .pro file.\n\nhttp://doc.qt.nokia.com/latest/qmake-manual.html\n\n(reminds me that I still need to add the USE_UPNP option)\n\nNote that qmake is a pretty simple tool, optimized for conveniently building\nQt applications in a cross-platform way; it in no way compares to\ncmake/autotools or another \"full\" build system. But it's enough for building\nbitcoin-qt on the supported target architectures so that's good enough for\nme... For \"bitcoind\" and \"bitcoin-wx\" you probably want to keep around the\nmakefile.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110901/b7a21c59/attachment.html>", "summary": "Luke-Jr asks how to set build options with qmake. You can put assignments on the command line, and these variables can be used for conditionally enabling/disabling libraries or other options in the .pro file."}, {"author": "Alex Waters", "date": "2011-09-11T00:20:22", "message_text_only": "Can you please submit a pull request and testing plan? If these already\nexist, can you please link them here?\n\nI'm exciting to get this in, as it will close the wx issues. (and hopefully\nnot bring on too many qt issues)\n\nThanks,\nAlex\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110910/414ee27d/attachment.html>", "summary": "Alex requests a pull request and testing plan to close wx issues and avoid qt issues. Excited to get it in."}, {"author": "John Smith", "date": "2011-09-11T07:37:54", "message_text_only": "Hello Alex,\n\nOn Sun, Sep 11, 2011 at 12:20 AM, Alex Waters <ampedal at gmail.com> wrote:\n\n> Can you please submit a pull request and testing plan? If these already\n> exist, can you please link them here?\n\n\nWhat testing plan do you need?\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110911/1d750276/attachment.html>", "summary": "Alex requested a pull request and testing plan, asking for clarification on the testing plan needed."}, {"author": "John Smith", "date": "2011-09-11T09:54:18", "message_text_only": "Alex,\n\nOn Sun, Sep 11, 2011 at 7:45 AM, Alex Waters <ampedal at gmail.com> wrote:\n\n> Hey John,\n>\n> It could be as simple as listing some things that you think could possibly\n> break if qt is implemented. For example, \"check the UI for artifacts\". I\n> don't really know what could potentially need to be tested, so any help\n> would get things processed faster.\n>\n> I can't acknowledge a pull unless there is substantial evidence that it's\n> been tested, especially something of this size...\n>\n\nIt has been under development for a long time, the thread on the bitcointalk\nforum is \"substantial evidence\" that many people are using it (also, I\nreceive quite a lot of mail about it, and the number of followers on github\nsteadily fluctuates around ~30).  So nothing obvious is broken, at least, I\nthink has worked better than the Wx UI for quite a while.\n\nBut as I've said before I'm fine with keeping bitcoin-qt as a parallel,\nexperimental, release for a while.  I think that's the only way to get more\ntesting with people that don't want to or can't build from source (could\njust mark the download as \"New GUI, experimental\" or so...).\n\nTo be honest I think it should be merged at least as experimental ASAP, it\nwould save a lot of GUI complaints on the forum about things I've\nimplemented months ago already. However I will only put up a pull request as\nsoon as it is clear that it will actually be integrated. It is too much work\nfor me to keep the pull request up-to-date if it lingers for months like\nmany others have.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110911/a4fa11c6/attachment.html>", "summary": "Alex suggests listing potential issues with implementing qt. John needs substantial evidence of testing before acknowledging a pull request. Bitcoin-qt may be released as experimental."}, {"author": "Gavin Andresen", "date": "2011-09-11T17:12:27", "message_text_only": "On Sun, Sep 11, 2011 at 5:54 AM, John Smith <witchspace81 at gmail.com> wrote:\n> However I will only put up a pull request as\n> soon as it is clear that it will actually be integrated. It is too much work\n> for me to keep the pull request up-to-date if it lingers for months like\n> many others have.\n\nI haven't heard any objections to pulling it as soon as 0.4 is\nofficially released, a pull request is ready, and a couple of people\nhave a chance to read over the differences and ACKnowledge that\nnothing sinister snuck in somewhere.\n\n-- \n--\nGavin Andresen", "summary": "John Smith will only submit a pull request for integration if it is confirmed and won't linger for months, as it is too much work."}, {"author": "Luke-Jr", "date": "2011-09-22T20:11:16", "message_text_only": "Various issues with bitcoin-qt's qmake build system still...\n\nRegressions remaining on bitcoin-qt branch:\n- Building without DBus still tries to use dbus symbols (and fails linking)\n- No way to disable SSL support for JSON-RPC\n- UPnP is no longer built/enabled by default\n\nThese weren't quite working in the old makefiles either, but it was a lot\neasier to workaround with DEBUGFLAGS:\n- No way to specify include path or library names for bdb and boost\n  (won't build, since bdb C++ includes aren't default on many OS)\n- No way to build with out-of-tree/system cryptopp or json", "summary": "Bitcoin-qt's qmake build system has several issues, including failed linking without DBus, no SSL support for JSON-RPC, and disabled UPnP by default."}], "thread_summary": {"title": "Bitcoin-qt ready for merging", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "Gavin Andresen", "Alex Waters"], "messages_count": 8, "total_messages_chars_count": 6270, "convo_summary": "The group discusses the reuse of Qt translations for Bitcoin Core, setting build options with qmake, and the need for a testing plan before submitting a pull request. They also mention potential issues with implementing qt, including failed linking without DBus and disabled UPnP by default in the qmake build system."}}, {"title": "[Bitcoin-development] Version 0.4 release candidate 1", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-02T20:12:43", "message_text_only": "Bitcoin version 0.4 release candidate 1 is ready for initial testing;\nplease grab the source from github and try to break it.\n\nThe big, visible change is wallet private key encryption, which is NOT\nturned on by default.\n\nThe big, invisible change is a reworking of internal critical section\nmutexes to fix some chronic problems with bitcoind becoming\nunresponsive due to deadlocks.\n\ngit shortlog --no-merges v0.3.24..\n ... will give you all the changes.\n\nThanks to everybody who contributed patches, and sorry if your\nfavorite patch is not included.\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin version 0.4 release candidate 1 is available for testing with wallet private key encryption and internal critical section mutexes reworked."}, {"author": "John Smith", "date": "2011-09-03T07:15:06", "message_text_only": "On Fri, Sep 2, 2011 at 8:12 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Bitcoin version 0.4 release candidate 1 is ready for initial testing;\n> please grab the source from github and try to break it.\n>\n> The big, visible change is wallet private key encryption, which is NOT\n> turned on by default.\n>\n> The big, invisible change is a reworking of internal critical section\n> mutexes to fix some chronic problems with bitcoind becoming\n> unresponsive due to deadlocks.\n>\n\nGreat, congrats!\n\nThe mutex overhaul was badly needed. I'm glad to see the project move this\nfast in a sudden.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110903/b6ecfdb2/attachment.html>", "summary": "Bitcoin version 0.4 release candidate 1 is available for testing, featuring wallet private key encryption and a reworking of internal critical section mutexes."}], "thread_summary": {"title": "Version 0.4 release candidate 1", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Gavin Andresen"], "messages_count": 2, "total_messages_chars_count": 1353, "convo_summary": "Gavin Andresen and John Smith discussed the release of Bitcoin version 0.4 release candidate 1, which includes wallet private key encryption and reworked internal critical section mutexes. The new version is available for testing."}}, {"title": "[Bitcoin-development] BitCoin and MinorFs/AppArmor", "thread_messages": [{"author": "Rob Meijer", "date": "2011-09-02T20:32:38", "message_text_only": "Given that there was not a single response to my post, I gather there is\nno to little interest in an updated MinorFs that could be used by bitcoin\non systems that support AppArmor (Ubuntu and OpenSuse).\n\nNevertheless I've put down the initial set of specs for a rewrite of\nMinorFs for if anyone would like to comment on them to make a future match\nwith Bitcoin more likely, I'm open to all sugestions:\n\nhttp://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2\n\nOn Fri, August 26, 2011 09:48, Rob Meijer wrote:\n> A few years ago I wrote a least authority based set of filesystems named\n> MinorFs that worked closely together with AppArmor (suse/ubuntu) to give '\n> pseudo persistent processes' their own private but decomposable and\n> delegatable piece of filesystem storage:\n>\n> http://www.linuxjournal.com/magazine/minorfs\n> http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/\n>\n> Currently there is only one perfect fit for MinorFs and that's the stack\n> AppArmor/MinorFs/E-language-persistent-application. There are some close\n> fits like running ssh without a passphrase (\n> http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase )\n> but these require lots of manual fiddling by the user to get working. The\n> ssh trick would probably work with bitcoin, but as you can see from the\n> link above, it would be rather cumbersome.\n>\n> I am trying to get specs together for rewriting MinorFs (in Python) in a\n> way that would make it easy and natural for application developers that\n> want their application to be able to protect user data (like bitcoin\n> wallets) from mallware running under the same uid as that user.\n>\n> Currently minorfs granularity is hard fixed to that of the 'pseudo\n> persistent process', and that granularity is determined as described in\n> the following link:\n>\n> http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process\n>\n> When using pseudo persistent processes, you basically end up with\n> file-system storage that follows almost all of the modeling principles of\n> the object capability model. This is great when designing a least\n> authority program from scratch and writing it in the (object capability)\n> e-language using its persistence facilities.\n>\n> Given however that I don't expect bitcoin, openssh, chrome, firefox, or\n> any other application that would benefit from what MinorFs provides to be\n> rewritten in E, it seems like the next version of MinorFs should give up\n> on the purity of its least authority model, and take an approach that\n> better suits common development languages and practices.\n>\n> With bitcoin being a project that could benefit most from what MinorFs has\n> to offer, I would like to ask bitcoin developers to think about what\n> attributes from the current granularity level (pseudo persistent process)\n> should be kept, what attributes should be dropped, and what properties\n> should be added to arrive at an 'id' that is the best fit for granularity\n> of persistent private storage for bitcoin.\n>\n> I really want to accommodate bitcoin developer needs in this, so all input\n> that helps me help you guys to get the next MinorFs version to accommodate\n> your needs to a level that code to use MinorFs where available can be\n> added to bitcoin, would be extremely welcome.\n>\n> Let me know what you think,\n>\n> Rob\n>\n>\n> ------------------------------------------------------------------------------\n> EMC VNX: the world's simplest storage, starting under $10K\n> The only unified storage solution that offers unified management\n> Up to 160% more powerful than alternatives and 25% more efficient.\n> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>", "summary": "MinorFs, a least authority based set of filesystems, could be updated for Bitcoin, but there seems to be little interest. Specs are available for comment."}, {"author": "Nils Schneider", "date": "2011-09-02T22:05:18", "message_text_only": "MinorFs sounds like an interesting concept and but wallet encryption\n(already being tested and close to release) is a simpler solution for\nend-users.\n\nWould MinorFs help securing the wallet on a server, maybe even a\n(insecure) VPS?\n\nCan it work without changes to Bitcoin? If not, what is the minimal\namount of changes needed?\n\nIs there any guarantee it will never corrupt the wallet?\n\nWhat would be the proper way to do backups?\n\nOn 02.09.2011 22:32, Rob Meijer wrote:\n> Given that there was not a single response to my post, I gather there is\n> no to little interest in an updated MinorFs that could be used by bitcoin\n> on systems that support AppArmor (Ubuntu and OpenSuse).\n> \n> Nevertheless I've put down the initial set of specs for a rewrite of\n> MinorFs for if anyone would like to comment on them to make a future match\n> with Bitcoin more likely, I'm open to all sugestions:\n> \n> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2\n> \n> On Fri, August 26, 2011 09:48, Rob Meijer wrote:\n>> A few years ago I wrote a least authority based set of filesystems named\n>> MinorFs that worked closely together with AppArmor (suse/ubuntu) to give '\n>> pseudo persistent processes' their own private but decomposable and\n>> delegatable piece of filesystem storage:\n>>\n>> http://www.linuxjournal.com/magazine/minorfs\n>> http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/\n>>\n>> Currently there is only one perfect fit for MinorFs and that's the stack\n>> AppArmor/MinorFs/E-language-persistent-application. There are some close\n>> fits like running ssh without a passphrase (\n>> http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase )\n>> but these require lots of manual fiddling by the user to get working. The\n>> ssh trick would probably work with bitcoin, but as you can see from the\n>> link above, it would be rather cumbersome.\n>>\n>> I am trying to get specs together for rewriting MinorFs (in Python) in a\n>> way that would make it easy and natural for application developers that\n>> want their application to be able to protect user data (like bitcoin\n>> wallets) from mallware running under the same uid as that user.\n>>\n>> Currently minorfs granularity is hard fixed to that of the 'pseudo\n>> persistent process', and that granularity is determined as described in\n>> the following link:\n>>\n>> http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process\n>>\n>> When using pseudo persistent processes, you basically end up with\n>> file-system storage that follows almost all of the modeling principles of\n>> the object capability model. This is great when designing a least\n>> authority program from scratch and writing it in the (object capability)\n>> e-language using its persistence facilities.\n>>\n>> Given however that I don't expect bitcoin, openssh, chrome, firefox, or\n>> any other application that would benefit from what MinorFs provides to be\n>> rewritten in E, it seems like the next version of MinorFs should give up\n>> on the purity of its least authority model, and take an approach that\n>> better suits common development languages and practices.\n>>\n>> With bitcoin being a project that could benefit most from what MinorFs has\n>> to offer, I would like to ask bitcoin developers to think about what\n>> attributes from the current granularity level (pseudo persistent process)\n>> should be kept, what attributes should be dropped, and what properties\n>> should be added to arrive at an 'id' that is the best fit for granularity\n>> of persistent private storage for bitcoin.\n>>\n>> I really want to accommodate bitcoin developer needs in this, so all input\n>> that helps me help you guys to get the next MinorFs version to accommodate\n>> your needs to a level that code to use MinorFs where available can be\n>> added to bitcoin, would be extremely welcome.\n>>\n>> Let me know what you think,\n>>\n>> Rob\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> EMC VNX: the world's simplest storage, starting under $10K\n>> The only unified storage solution that offers unified management\n>> Up to 160% more powerful than alternatives and 25% more efficient.\n>> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Special Offer -- Download ArcSight Logger for FREE!\n> Finally, a world-class log management solution at an even better \n> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n> download Logger. Secure your free ArcSight Logger TODAY!\n> http://p.sf.net/sfu/arcsisghtdev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "MinorFs, a least authority based set of filesystems, could potentially secure Bitcoin wallets on servers, but wallet encryption is a simpler solution for end-users."}, {"author": "Rob Meijer", "date": "2011-09-05T11:55:43", "message_text_only": "On Sat, September 3, 2011 00:05, Nils Schneider wrote:\n> MinorFs sounds like an interesting concept and but wallet encryption\n> (already being tested and close to release) is a simpler solution for\n> end-users.\n\nI think the two could be considered complementary. Basicaly the existing\nMinorFs provides to the pseudo-persistent-process that private members\nprovide to objects. 'Encapsulation of variables that still can be\ndelegated by the object that encapsulates them'. In the MinorFs2 that I\njust started writing, I try to lower the barrier to using MinorFs by\nproviding facilities to do pick a granularity for 'object' more suitable\nfor most lines of development (where pseudo persistent processes are an\nunnatural concept).\n\nThink of BitCoin running as user certain user as an object and a piece of\nmalware running as the same user as a second object. You can than think of\nthe users home directory as a global variable, while MinorFs gives a\nprivate home to both the bitcoin object and the malware object. The\nbitcoin object can delegate parts of its private state to other objects,\nbut as long as bit-coin doesn't do that, the private state won't be\ndisclosed.\n\nIts a good idea to have data on disk encrypted even if you use something\nlike Minorfs, if only to protect against bootable media attacks.\n\n> Would MinorFs help securing the wallet on a server, maybe even a\n> (insecure) VPS?\n\nNo.\n\n> Can it work without changes to Bitcoin? If not, what is the minimal\n> amount of changes needed?\n\nBasically the existing MinorFs will work already with the existing BitCoin\ndue to the fact that Bitcoin seems to extract $HOME from an environment\nvariable, but there are some caveats:\n\n* It needs a bash script for starting up bitcoin with $HOME set to the\n  MinorFs home.\n* Bitcoin can be started in only one way. That is, bitcoin started from\nthe gnome menu is interpret being a completely differnt bitcoin than\nbitcoin started from an xterm.\n* There can only be one bitcoin started and running at once.\n* All potential malware needs to run with at least an AppArmor profile\nthat keeps it from reading /proc/$PID for pids other than itself.\n\nIn the new version I'm contemplating, there would I think at least be a\nminor change to bitcoin needed:\n\n* bitcoin would have to use a small library that provides a\n'minorfs_getpwuid' function.\n\nThis function will work like getpwuid on any system without an active\nMinorFs2, and for any non apparmor confined process.\nOn a system with MinorFs running it should return a passwd structure with\nthe home changed to the MinorFs2 home.\n\n> Is there any guarantee it will never corrupt the wallet?\n\nAll read and write operations will map directly to the underlying\nfile-system, so basically it comes with the same lack of guarantee that\nany\nfile-system comes with once the underlying media becomes flaky.\n\n> What would be the proper way to do backups?\n\nHaven't really thought about that, what is considered the currently proper\nway to keep backups for bitcoin?\n\n> On 02.09.2011 22:32, Rob Meijer wrote:\n>> Given that there was not a single response to my post, I gather there is\n>> no to little interest in an updated MinorFs that could be used by\n>> bitcoin\n>> on systems that support AppArmor (Ubuntu and OpenSuse).\n>>\n>> Nevertheless I've put down the initial set of specs for a rewrite of\n>> MinorFs for if anyone would like to comment on them to make a future\n>> match\n>> with Bitcoin more likely, I'm open to all sugestions:\n>>\n>> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2\n>>\n>> On Fri, August 26, 2011 09:48, Rob Meijer wrote:\n>>> A few years ago I wrote a least authority based set of filesystems\n>>> named\n>>> MinorFs that worked closely together with AppArmor (suse/ubuntu) to\n>>> give '\n>>> pseudo persistent processes' their own private but decomposable and\n>>> delegatable piece of filesystem storage:\n>>>\n>>> http://www.linuxjournal.com/magazine/minorfs\n>>> http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/\n>>>\n>>> Currently there is only one perfect fit for MinorFs and that's the\n>>> stack\n>>> AppArmor/MinorFs/E-language-persistent-application. There are some\n>>> close\n>>> fits like running ssh without a passphrase (\n>>> http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase\n>>> )\n>>> but these require lots of manual fiddling by the user to get working.\n>>> The\n>>> ssh trick would probably work with bitcoin, but as you can see from the\n>>> link above, it would be rather cumbersome.\n>>>\n>>> I am trying to get specs together for rewriting MinorFs (in Python) in\n>>> a\n>>> way that would make it easy and natural for application developers that\n>>> want their application to be able to protect user data (like bitcoin\n>>> wallets) from mallware running under the same uid as that user.\n>>>\n>>> Currently minorfs granularity is hard fixed to that of the 'pseudo\n>>> persistent process', and that granularity is determined as described in\n>>> the following link:\n>>>\n>>> http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process\n>>>\n>>> When using pseudo persistent processes, you basically end up with\n>>> file-system storage that follows almost all of the modeling principles\n>>> of\n>>> the object capability model. This is great when designing a least\n>>> authority program from scratch and writing it in the (object\n>>> capability)\n>>> e-language using its persistence facilities.\n>>>\n>>> Given however that I don't expect bitcoin, openssh, chrome, firefox, or\n>>> any other application that would benefit from what MinorFs provides to\n>>> be\n>>> rewritten in E, it seems like the next version of MinorFs should give\n>>> up\n>>> on the purity of its least authority model, and take an approach that\n>>> better suits common development languages and practices.\n>>>\n>>> With bitcoin being a project that could benefit most from what MinorFs\n>>> has\n>>> to offer, I would like to ask bitcoin developers to think about what\n>>> attributes from the current granularity level (pseudo persistent\n>>> process)\n>>> should be kept, what attributes should be dropped, and what properties\n>>> should be added to arrive at an 'id' that is the best fit for\n>>> granularity\n>>> of persistent private storage for bitcoin.\n>>>\n>>> I really want to accommodate bitcoin developer needs in this, so all\n>>> input\n>>> that helps me help you guys to get the next MinorFs version to\n>>> accommodate\n>>> your needs to a level that code to use MinorFs where available can be\n>>> added to bitcoin, would be extremely welcome.\n>>>\n>>> Let me know what you think,\n>>>\n>>> Rob\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> EMC VNX: the world's simplest storage, starting under $10K\n>>> The only unified storage solution that offers unified management\n>>> Up to 160% more powerful than alternatives and 25% more efficient.\n>>> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Special Offer -- Download ArcSight Logger for FREE!\n>> Finally, a world-class log management solution at an even better\n>> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n>> download Logger. Secure your free ArcSight Logger TODAY!\n>> http://p.sf.net/sfu/arcsisghtdev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Special Offer -- Download ArcSight Logger for FREE!\n> Finally, a world-class log management solution at an even better\n> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n> download Logger. Secure your free ArcSight Logger TODAY!\n> http://p.sf.net/sfu/arcsisghtdev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>", "summary": "MinorFs, a filesystem that provides private storage to objects, could complement wallet encryption for Bitcoin. It requires minor changes to Bitcoin and proper backups."}, {"author": "John Smith", "date": "2011-09-03T07:04:44", "message_text_only": "On Fri, Sep 2, 2011 at 8:32 PM, Rob Meijer <capibara at xs4all.nl> wrote:\n\n> Given that there was not a single response to my post, I gather there is\n> no to little interest in an updated MinorFs that could be used by bitcoin\n> on systems that support AppArmor (Ubuntu and OpenSuse).\n>\n\nOh yes there is interest. I meant to reply but haven't been able to put much\nenergy in bitcoin development lately.\n\nMore strict privilege seperation between applications on a least-authority\nbasis is something that Ubuntu is certainly going to need if they're serious\nwith the app store thing (and want to keep up with Android and Macosx...).\n\nThis has been needed for a long time, and this would be useful for any\nprivate data managed by applications running as the same user (ssh,\nbrowsers, pgp, ...)\n\nWallet encryption is useful and necessary but no substitute for OS-level\nprotection.\n\n\n> Nevertheless I've put down the initial set of specs for a rewrite of\n> MinorFs for if anyone would like to comment on them to make a future match\n> with Bitcoin more likely, I'm open to all sugestions:\n>\n> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2\n>\n\nYou have to rewrite the entire thing from scratch?\n\nThis is probably blasphemy but: how can it be compared to the android model,\nwith a UID per application/user, and thus layering the security on top of\ncurrent UNIX/ACL permissions?  Is another FS really needed?\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110903/df200631/attachment.html>", "summary": "Rob Meijer proposed an updated MinorFs for Bitcoin on systems that support AppArmor, but received little response. Ubuntu may need stricter privilege separation for their app store."}, {"author": "Rob Meijer", "date": "2011-09-05T12:13:58", "message_text_only": "On Sat, September 3, 2011 09:04, John Smith wrote:\n> On Fri, Sep 2, 2011 at 8:32 PM, Rob Meijer <capibara at xs4all.nl> wrote:\n>\n>> Given that there was not a single response to my post, I gather there is\n>> no to little interest in an updated MinorFs that could be used by\n>> bitcoin\n>> on systems that support AppArmor (Ubuntu and OpenSuse).\n>>\n>\n> Oh yes there is interest. I meant to reply but haven't been able to put\n> much\n> energy in bitcoin development lately.\n>\n> More strict privilege seperation between applications on a least-authority\n> basis is something that Ubuntu is certainly going to need if they're\n> serious\n> with the app store thing (and want to keep up with Android and Macosx...).\n>\n> This has been needed for a long time, and this would be useful for any\n> private data managed by applications running as the same user (ssh,\n> browsers, pgp, ...)\n>\n> Wallet encryption is useful and necessary but no substitute for OS-level\n> protection.\n>\n>\n>> Nevertheless I've put down the initial set of specs for a rewrite of\n>> MinorFs for if anyone would like to comment on them to make a future\n>> match\n>> with Bitcoin more likely, I'm open to all sugestions:\n>>\n>> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2\n>>\n>\n> You have to rewrite the entire thing from scratch?\n\nI think its best. The old version I wrote in Perl using some rather rarely\nused perl modules from cpan that don't have packages in either opensuse\nnor ubuntu. I've moved most of my other new development projects to Python\nor C++ for a long time, so Python has become much more natural for me to\nwork in, while migrating all perl module usage to a packaging compatible\nset would also be a pretty large task.\n>From this I concluded that it would probably be best to take lessons\nlearned from the existing MinorFs and do a rewrite in Python, making sure\nall python modules used are available in both OpenSuse and ubuntu.\n\n> This is probably blasphemy but: how can it be compared to the android\n> model,\n> with a UID per application/user, and thus layering the security on top of\n> current UNIX/ACL permissions?  Is another FS really needed?\n\nMinorFs IS basically a set of user space file-systems on top of current\nUNIX/ACL permissions. Without further changes with application granularity\nand without delegation of sub-trees, the two are basically equivalent.\n\nThe plans I currently have will allow a migration path from such a model\nto one with a finer granularity level where sub systems delegate sub trees\nto eachother in a pass by reference way.\n\n\n> JS\n>", "summary": "John Smith expresses interest in an updated MinorFs for Bitcoin on systems that support AppArmor, and suggests a rewrite in Python for compatibility."}], "thread_summary": {"title": "BitCoin and MinorFs/AppArmor", "categories": ["Bitcoin-development"], "authors": ["Nils Schneider", "John Smith", "Rob Meijer"], "messages_count": 5, "total_messages_chars_count": 21312, "convo_summary": "MinorFs, a least authority based set of filesystems, could complement wallet encryption for Bitcoin. However, there seems to be little interest in updating it for Bitcoin. John Smith expressed interest in an updated MinorFs for Bitcoin on systems that support AppArmor, and suggested a rewrite in Python for compatibility."}}, {"title": "[Bitcoin-development] Transaction limit size in CWallet::CreateTransaction", "thread_messages": [{"author": "Chris Double", "date": "2011-09-03T13:52:19", "message_text_only": "In CWallet::CreateTransaction there is a call to 'GetSerializeSize' on\nline 979 (https://github.com/bitcoin/bitcoin/blob/master/src/wallet.cpp#L979).\nIt looks like:\n\n---------8<----------\nunsigned int nBytes = ::GetSerializeSize(*(CTransaction*)&wtxNew, SER_NETWORK)\nif (nBytes >= MAX_BLOCK_SIZE_GEN/5)\n  return false;\ndPriority /= nBytes;\n---------8<----------\n\n'wtxNew' is a CWalletTxn. So this gets the serialized size of the\ntransaction, including all the extra data held in the wallet for that\ntransaction, and uses that size for computation of priority. Is that\ncorrect? Should it be only the size of the CTransaction* part of the\ntransaction that should be used?\n\nIt looks this was from the casting shenanigans but unless I'm\nmistaken, that casting doesn't actually do anything. We get a pointer\nto a CTransaction but then dereference it, so the template function\n'GetSerializeSize' would get the most derived class, right?\n\nSo was the intent to use the CWalletTxn size, and the casting is\nsuperfluous, or was it supposed to be the CTransaction* portion and\nthe cast is an incorrect way of doing that? Or am I suffering from\nlate night programmer syndrome and reading it wrong?\n\nChris.\n-- \nhttp://www.bluishcoder.co.nz", "summary": "The Bitcoin code may be using the wrong size calculation for transaction priority due to casting shenanigans in CWallet::CreateTransaction."}, {"author": "Chris Double", "date": "2011-09-03T14:16:40", "message_text_only": "On Sun, Sep 4, 2011 at 1:52 AM, Chris Double <chris.double at double.co.nz> wrote:\n> So was the intent to use the CWalletTxn size, and the casting is\n> superfluous, or was it supposed to be the CTransaction* portion and\n> the cast is an incorrect way of doing that? Or am I suffering from\n> late night programmer syndrome and reading it wrong?\n\nAfter a discussion on #bitcoin-dev it is indeed the latter. I was\nunder the mistaken believe that the GetSerializeSize method in\nCTransaction and CWalletTxn were virtual, which would result in the\nbehavior I was thinking of. But they're not so it works. Please\ndisregard!\n\nChris.\n-- \nhttp://www.bluishcoder.co.nz", "summary": "A programmer discusses a mistake he made in casting and clarifies that the intended behavior was to use the CTransaction* portion."}], "thread_summary": {"title": "Transaction limit size in CWallet::CreateTransaction", "categories": ["Bitcoin-development"], "authors": ["Chris Double"], "messages_count": 2, "total_messages_chars_count": 1882, "convo_summary": "Chris Double pointed out a mistake in the Bitcoin code's transaction priority calculation due to casting errors in CWallet::CreateTransaction. He clarified that the intended behavior was to use the CTransaction* portion."}}, {"title": "[Bitcoin-development] Last try: Fixes for 0.4", "thread_messages": [{"author": "Luke-Jr", "date": "2011-09-03T15:27:40", "message_text_only": "Once more before I just give up on trying...\n\nThese branches fix bugs still remaining in 0.4rc1:\n- bugfix_getwork_newblk_race\n- getwork_dedupe\n- boost_fs3\n- gitignore\n\nAdditionally, this branch adds a tolerance to human error typing in base58 \nwith ambiguous symbols, and should be very safe to merge:\n- base58_liberal_parsing\n\nAgain, these can all be merged with:\n# git fetch git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git \\\n#           <branch name> && git merge FETCH_HEAD", "summary": "Bug fixes for Bitcoin 0.4rc1 and a new branch that adds tolerance to human error typing in base58 with ambiguous symbols."}], "thread_summary": {"title": "Last try: Fixes for 0.4", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr"], "messages_count": 1, "total_messages_chars_count": 485}}, {"title": "[Bitcoin-development] 0.4rc1 known bugs", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-04T00:13:14", "message_text_only": "Quick status update on 0.4; I probably won't have time to tackle these\nproperly before Tuesday:\n\n+ sipa found what looks like a deadlock between the addr-handling and\nIRC-join-handling code.\n+ UukGoblin reports a deadlock problem on a bitcoind handling getwork requests.\n\nIf you want to get more familiar with the bitcoin code and you have a\nlot of patience, tracking down deadlocks a great way to do it.\n\n+ ArtForz found a performance bug with transactions that have\nthousands of inputs and outputs on the solidcoin test network.\n (not as big an issue for bitcoin due to fees being based on\ntransaction size, but still worrying)\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin 0.4 update: Deadlock issues found in addr-handling and IRC-join-handling code, and performance bug with transactions on solidcoin test network."}, {"author": "Matt Corallo", "date": "2011-09-04T02:43:48", "message_text_only": "On Sat, 2011-09-03 at 20:13 -0400, Gavin Andresen wrote:\n> Quick status update on 0.4; I probably won't have time to tackle these\n> properly before Tuesday:\n> \n> + sipa found what looks like a deadlock between the addr-handling and\n> IRC-join-handling code.\n> + UukGoblin reports a deadlock problem on a bitcoind handling getwork requests.\n> \n> If you want to get more familiar with the bitcoin code and you have a\n> lot of patience, tracking down deadlocks a great way to do it.\n> \n> + ArtForz found a performance bug with transactions that have\n> thousands of inputs and outputs on the solidcoin test network.\n>  (not as big an issue for bitcoin due to fees being based on\n> transaction size, but still worrying)\n> \n+ (my fault) Gitian doesnt build properly.", "summary": "Bitcoin 0.4 update: deadlock issues found in addr-handling and IRC-join-handling code, performance bug with transactions, and Gitian build problem."}, {"author": "Michael Gr\u00f8nager", "date": "2011-09-05T07:25:47", "message_text_only": "Hi Gavin,\n\nDid a quick compile and run (bitcoind, Ubuntu 10.04.3 LTS)\n\nFindings - compile (I do not use the UPNP feature):\nin the makefile.unix I have to change the:\nUSE_UPNP:=0\nto \nUSE_UPNP:=\ni.e. it is defined if it is \"0\" ! \n\nrunning: no apparent issues (I have never managed to trigger the deadlocks.?.)\n\nNice job, but a quick cleanup of interfaces and classes (one file pr class, all interfaces defined in headers) would really be nice... Would be happy to do it myself, as it would greatly enhance the flexibility of the code and be a first step towards a more library/interface like split.\n\nCheers,\n\nMichael\n\n\nOn 04/09/2011, at 02:13, Gavin Andresen wrote:\n\n> Quick status update on 0.4; I probably won't have time to tackle these\n> properly before Tuesday:\n> \n> + sipa found what looks like a deadlock between the addr-handling and\n> IRC-join-handling code.\n> + UukGoblin reports a deadlock problem on a bitcoind handling getwork requests.\n> \n> If you want to get more familiar with the bitcoin code and you have a\n> lot of patience, tracking down deadlocks a great way to do it.\n> \n> + ArtForz found a performance bug with transactions that have\n> thousands of inputs and outputs on the solidcoin test network.\n> (not as big an issue for bitcoin due to fees being based on\n> transaction size, but still worrying)\n> \n> -- \n> --\n> Gavin Andresen\n> \n> ------------------------------------------------------------------------------\n> Special Offer -- Download ArcSight Logger for FREE!\n> Finally, a world-class log management solution at an even better \n> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n> download Logger. Secure your free ArcSight Logger TODAY!\n> http://p.sf.net/sfu/arcsisghtdev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com", "summary": "Michael Gronager reports successful compilation and running of bitcoind on Ubuntu 10.04.3 LTS, with a suggestion for code cleanup."}, {"author": "Luke-Jr", "date": "2011-09-05T12:42:22", "message_text_only": "On Monday, September 05, 2011 3:25:47 AM Michael Gr\u00f8nager wrote:\n> Findings - compile (I do not use the UPNP feature):\n> in the makefile.unix I have to change the:\n> USE_UPNP:=0\n> to\n> USE_UPNP:=\n> i.e. it is defined if it is \"0\" !\n\nYes, the default is \"UPnP supported, disabled by default\" (USE_UPNP=0), not \n\"UPnP not supported\" (USE_UPNP=). This is documented in build-unix.txt ...", "summary": "The default setting for UPnP in makefile.unix is \"UPnP supported, disabled by default\" (USE_UPNP=0), not \"UPnP not supported\" (USE_UPNP=)."}, {"author": "Michael Gr\u00f8nager", "date": "2011-09-05T12:47:16", "message_text_only": "Sorry, by bad - first clean checkout for quite a while (must have changed it earlier myself...).\n\n/M\n\nOn 05/09/2011, at 14:42, Luke-Jr wrote:\n\n> On Monday, September 05, 2011 3:25:47 AM Michael Gr\u00f8nager wrote:\n>> Findings - compile (I do not use the UPNP feature):\n>> in the makefile.unix I have to change the:\n>> USE_UPNP:=0\n>> to\n>> USE_UPNP:=\n>> i.e. it is defined if it is \"0\" !\n> \n> Yes, the default is \"UPnP supported, disabled by default\" (USE_UPNP=0), not \n> \"UPnP not supported\" (USE_UPNP=). This is documented in build-unix.txt ...\n> \n> ------------------------------------------------------------------------------\n> Special Offer -- Download ArcSight Logger for FREE!\n> Finally, a world-class log management solution at an even better \n> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n> download Logger. Secure your free ArcSight Logger TODAY!\n> http://p.sf.net/sfu/arcsisghtdev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com", "summary": "The email is an apology for a mistake made in the code. The mistake was corrected and the email includes the corrected code."}, {"author": "Luke-Jr", "date": "2011-09-06T20:55:27", "message_text_only": "Got a fix for the encrypted-wallet mining issue:\n- unique_coinbase\n\nIt depends on (and merges) the getwork_dedupe fix already common on pools and \nother miners who pay attention to the latest mining fixes.\n\nTo merge:\n  git fetch git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git \\\n    unique_coinbase && git merge FETCH_HEAD", "summary": "A solution for the encrypted-wallet mining issue is the unique_coinbase, which merges the getwork_dedupe fix already used by other miners."}, {"author": "Gavin Andresen", "date": "2011-09-07T15:07:25", "message_text_only": "On Tue, Sep 6, 2011 at 4:55 PM, Luke-Jr <luke at dashjr.org> wrote:\n> Got a fix for the encrypted-wallet mining issue:\n> - unique_coinbase\n\nTurned this into a pull request:\n  https://github.com/bitcoin/bitcoin/pull/505\n\nI reviewed the code but have not tested.\n\nRough sketch of a test plan:\n\nRun clean testnet-in-a-box bitcoind, with -keypool=1\nEncrypt the wallet\nRun bitcoind getnewaddress until it tell you keypool is exhausted\nGenerate a couple of blocks via internal miner -- verify: coinbase\ntransactions have unique txids even though they pay-to default key\nGenerate a couple of blocks via getwork RPC call -- verify: coinbase\ntransactions have unique txids\n\n\n-- \n--\nGavin Andresen", "summary": "A fix for the encrypted-wallet mining issue has been proposed, with a unique_coinbase. A test plan has been outlined and a pull request submitted."}, {"author": "Pieter Wuille", "date": "2011-09-06T11:55:30", "message_text_only": "On Sun, Sep 4, 2011 at 13:59, Pieter Wuille\n<pieter.wuille at cs.kuleuven.be> wrote:\n> I've compiled bitcoind with Gavin's DEBUG_LOCKORDER, and fixed two potential\n> reported deadlock issues (see https://github.com/sipa/bitcoin/commits/lockfixes).\n\nMy mistake: these are not actual potential deadlocks, as all locking\nof cs_vRecv/cs_vSend\nhappens inside TRY_CRITICAL_SECTION blocks. Gavin, maybe you can add the rule to\nyour debug code that ignores critical sections which are only locked\nthrough TRY_...?\n\n>> + sipa found what looks like a deadlock between the addr-handling and\n>> IRC-join-handling code.\n\nRegarding the actual deadlock between IRC seeding and AddAddress:\n\nInternally, DB also uses pthreads to implement the txn_begin()/commit() scheme,\nthough I'm not sure with which granularity. These need to be taken into account\nwhen searching for deadlocks, but are obviously not detected by\nDEBUG_LOCKORDER.\n\nIn particular here, the processing of \"addr\" created a db transaction for the\nentire message, while only locking cs_mapAddresses inside AddAddress. For\nIRC seeded addresses however, no db tx was precreated, and AddAddress first\nlocked cs_mapAddress, and then did the database write (causing a lock) inside.\n\nA solution: in main.cpp, ProcessMessage, case \"addr\":\n\n          // Store the new addresses\n          CAddrDB addrDB;\n+         CRITICAL_BLOCK(cs_mapAddresses) {\n          addrDB.TxnBegin();\n          int64 nNow = GetAdjustedTime();\n          int64 nSince = nNow - 10 * 60;\n\n              }\n          }\n          addrDB.TxnCommit();  // Save addresses (it's ok if this fails)\n+         }\n          if (vAddr.size() < 1000)\n\n\nwhich makes sure that cs_mapAddresses is always entered before starting\na database transaction.\n\nHowever, there may be similar issues in other place where TxnBegin is called\nexplicitly. Also, maybe there are other solutions, like changing BDB parameters\nthat make the db transaction fail instead of block, for example.\n\n-- \nPieter", "summary": "Pieter Wuille fixed two potential deadlock issues in bitcoind with Gavin's DEBUG_LOCKORDER, but later found they were not actual deadlocks."}, {"author": "Gavin Andresen", "date": "2011-09-06T17:59:29", "message_text_only": "Nice work, Detective Wuille!\n\nPatch for the deadlock issue:\n\nhttps://github.com/bitcoin/bitcoin/pull/500\n\nI took a different approach to fix from the one Pieter suggested,\nperforming the database operation after the cs_mapaddresses deadlock\nis released.  Please review to check my logic, it did survive my\nstart/stop/restart... stress test.\n\nAnd I did review every place in the code that starts a database\ntransaction, to look for similar issues, and they are all OK.\n\n\nRE: improving DEBUG_LOCKORDER:  requires some thought.  Deadlocks are\nstill possible with TRY_CRITICAL_SECTION, if some codepaths TRY and\nsome don't.\n\n\nOn Tue, Sep 6, 2011 at 7:55 AM, Pieter Wuille\n<pieter.wuille at cs.kuleuven.be> wrote:\n> My mistake: these are not actual potential deadlocks, as all locking\n> of cs_vRecv/cs_vSend\n> happens inside TRY_CRITICAL_SECTION blocks. Gavin, maybe you can add the rule to\n> your debug code that ignores critical sections which are only locked\n> through TRY_...?\n>\n>>> + sipa found what looks like a deadlock between the addr-handling and\n>>> IRC-join-handling code.\n>\n> Regarding the actual deadlock between IRC seeding and AddAddress:\n>\n> Internally, DB also uses pthreads to implement the txn_begin()/commit() scheme,\n> though I'm not sure with which granularity. These need to be taken into account\n> when searching for deadlocks, but are obviously not detected by\n> DEBUG_LOCKORDER.\n\n\n-- \n--\nGavin Andresen", "summary": "A patch for a deadlock issue in Bitcoin's code has been proposed, with a different approach to fixing it than originally suggested. The code has been stress-tested and reviewed."}], "thread_summary": {"title": "0.4rc1 known bugs", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Michael Gr\u00f8nager", "Matt Corallo", "Gavin Andresen", "Pieter Wuille"], "messages_count": 9, "total_messages_chars_count": 9579, "convo_summary": "Bitcoin 0.4 update has deadlock issues in addr-handling and IRC-join-handling code, performance bug with transactions, and Gitian build problem. Successful compilation and running of bitcoind on Ubuntu 10.04.3 LTS reported with a suggestion for code cleanup. A fix for the encrypted-wallet mining issue has been proposed with a unique_coinbase. Two potential deadlock issues in bitcoind were fixed with a different approach."}}, {"title": "[Bitcoin-development] 0.4rc1 known bugs]", "thread_messages": [{"author": "Pieter Wuille", "date": "2011-09-04T12:04:48", "message_text_only": "On Sat, Sep 03, 2011 at 08:13:14PM -0400, Gavin Andresen wrote:\n> Quick status update on 0.4; I probably won't have time to tackle these\n> properly before Tuesday:\n> \n> + sipa found what looks like a deadlock between the addr-handling and\n> IRC-join-handling code.\n\nI've compiled bitcoind with Gavin's DEBUG_LOCKORDER, and fixed two potential\nreported deadlock issues (see https://github.com/sipa/bitcoin/commits/lockfixes).\n\nNo deadlock warnings are given any more, but the issue remains. Just starting up\nbitcoin with an empty addr.dat seems enough to cause it every few attempts. \nIs there is locked code that waits for an event that never occurs?\n\n-- \nPieter", "summary": "A potential deadlock issue has been found in the addr-handling and IRC-join-handling code of Bitcoin 0.4, but it has not been fixed yet."}], "thread_summary": {"title": "0.4rc1 known bugs]", "categories": ["Bitcoin-development"], "authors": ["Pieter Wuille"], "messages_count": 1, "total_messages_chars_count": 662}}, {"title": "[Bitcoin-development] Pull request for \"getmemorypool\" RPC call", "thread_messages": [{"author": "Forrest Voight", "date": "2011-09-05T02:21:24", "message_text_only": "(Moving here because forum thread at\nhttps://bitcointalk.org/index.php?topic=39088 didn't yield much\ndiscussion)\n\nPull request: https://github.com/bitcoin/bitcoin/pull/476\nDiff: https://github.com/bitcoin/bitcoin/pull/476/files\n\nThis was originally a patch that returned bitcoin's memory pool as\nlist of transaction hashes and the amount of total fees, but evolved\ninto a full alternative to the \"getwork\" RPC call for clients that\ncreate their own generation transactions.\n\nLike getwork, this call calls CreateBlock and returns parts of it for\nmining, but instead of generating its own merkle tree, it returns all\nthe information needed to create a generation transaction in addition\nto the full contents of other transactions that should be included.\nIt, as is, has had some testing done with p2pool - it resulted the\nfirst p2pool generated block with transactions:\nhttp://blockexplorer.com/block/00000000000002436bd2ae60d67d6fc0dce44deba2ad739619a3d364f6283e64\n\n\nHelp text:\n\ngetmemorypool [data]\nIf [data] is not specified, returns data needed to construct a block to work on:\n  \"version\" : block version\n  \"previousblockhash\" : hash of current highest block\n  \"transactions\" : contents of non-coinbase transactions that should\nbe included in the next block\n  \"coinbasevalue\" : maximum allowable input to coinbase transaction,\nincluding the generation award and transaction fees\n  \"time\" : timestamp appropriate for next block\n  \"bits\" : compressed target of next block\nIf [data] is specified, tries to solve the block and returns true if\nit was successful.\n\n\nThank you,\nForrest Voight", "summary": "A new pull request on GitHub proposes an alternative to the \"getwork\" RPC call for clients that create their own generation transactions."}], "thread_summary": {"title": "Pull request for \"getmemorypool\" RPC call", "categories": ["Bitcoin-development"], "authors": ["Forrest Voight"], "messages_count": 1, "total_messages_chars_count": 1588}}, {"title": "[Bitcoin-development] Adding a pong message to the protocol", "thread_messages": [{"author": "Mike Hearn", "date": "2011-09-05T12:04:49", "message_text_only": "I haven't written a patch for this, I might do so if there's\nsufficient interest.\n\nNodes that are under heavy load exhibit extremely high latency, this\nmakes downloading the block chain from a node that is itself\ndownloading the block chain basically useless as it takes 30-60\nseconds for the node to respond to clients.\n\nIt could be fixed by making nodes not accept connections/advertise\nuntil they feel sure they have the best chain, but a more general fix\nis to add a \"pong\" which is returned by \"ping\". It could contain some\nuseful stats about the node for network crawlers, but most importantly\ntiming the delta between ping and pong would let you order nodes by\nresponsiveness. Currently if you want to do this, it has to be\nindirect, using some message that is guarantee to yield a known\nresponse.\n\nBecause old clients ignore messages they don't understand, adding the\npong response would be easy and backwards compatible. Making nodes\nprefer responsive servers might need a bit of care to avoid sloshing\nload around too much.\n\nThoughts?", "summary": "Nodes under heavy load have high latency, making downloading the blockchain from them useless. A \"pong\" response could fix this by ordering nodes by responsiveness."}, {"author": "Gregory Maxwell", "date": "2011-09-05T13:30:24", "message_text_only": "On Mon, Sep 5, 2011 at 8:04 AM, Mike Hearn <mike at plan99.net> wrote:\n> I haven't written a patch for this, I might do so if there's\n> sufficient interest.\n[snip]\n> Thoughts?\n\nI'd rather see effort spent on the root issues, e.g. having nodes\ngauge their own suitability (working inbound port, reasonably current\nblock chain, etc) before becoming advertised listeners.\n\nOr more importantly\u2014 figuring some way of setting up network\nsimulations which could be used to actually _validate_ proposed\nchanges in this area.\n\nI, or many other people, could spout endlessly about attractive\nsounding network enhancements (e.g. move-to-front peer prioritization,\ntweaks to peer selection, etc.) but it's all just arm waving without a\nway to measure it, and the real network is far too slow to upgrade\n(and important) to test things in situ while testnet is far too small\nand unlike the real network for useful testing.", "summary": "A proposal to focus on root issues and network simulations to validate proposed changes in the Bitcoin network rather than just spouting attractive-sounding enhancements."}, {"author": "Mike Hearn", "date": "2011-09-05T14:32:36", "message_text_only": "> I'd rather see effort spent on the root issues, e.g. having nodes\n> gauge their own suitability (working inbound port, reasonably current\n> block chain, etc) before becoming advertised listeners.\n\nThey can't always judge it, eg if the link between you and that peer\nis saturated then you may have connectivity, but it may be very slow\nyet appear fast to the node itself.\n\nThis really has two parts:\n\n(1) Making it easy to determine latency\n(2) Using that data to make better connection decisions\n\nAdding a pong message is fairly trivial and can help solve (1). For\ninstance we can start building latency histograms of nodes to see how\nperformant the network is, without risking any issues. Then that data\ncan be used to inform simulations of what happens if the measurements\nare used by the node software. It also lets us experiment with less\ncritical software like Android clients.", "summary": "Efforts should be focused on root issues such as nodes gauging their own suitability before becoming advertised listeners, determining latency, and making better connection decisions. Adding a pong message can help solve latency issues."}], "thread_summary": {"title": "Adding a pong message to the protocol", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn", "Gregory Maxwell"], "messages_count": 3, "total_messages_chars_count": 2836, "convo_summary": "Mike Hearn suggests that nodes with high latency are useless for downloading the blockchain and proposes a \"pong\" response to order nodes by responsiveness. Gregory Maxwell proposes focusing on root issues and network simulations to validate changes in the Bitcoin network. Hearn agrees and suggests efforts should be focused on nodes gauging their own suitability and making better connection decisions, with the addition of a pong message to solve latency issues."}}, {"title": "[Bitcoin-development] Pull request: faster initial blockchain download", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-05T20:41:24", "message_text_only": "I'd appreciate review/feedback on this:\n\nhttps://github.com/bitcoin/bitcoin/pull/492\n\nThis change skips ECDSA signature verification for transactions during\nthe initial block-chain download, which makes downloading the block\nchain much faster.\n\n\"Initial block chain download\" is all blocks up to 120 blocks before\nthe last blockchain lock-in point.\n\nReasoning for why this is safe:\n\nIf an attacker tries to feed a client bad transactions during the\ninitial block-chain download (transactions with invalid signatures),\nthen they change the merkle tree, and at the first blockchain lock-in\nthe bad chain will be rejected.\n\nTransactions are still checked for orphan blocks that come in during\ninitial block-chain-download (ConnectInputs will be called with\nfBlock=FALSE) and for mined blocks (ConnectInputs called with\nfMiner=TRUE).\n\n-- \n--\nGavin Andresen", "summary": "This change in Bitcoin's code skips signature verification during initial blockchain download, making it faster, but still checks for orphan blocks and mined blocks."}], "thread_summary": {"title": "Pull request: faster initial blockchain download", "categories": ["Bitcoin-development"], "authors": ["Gavin Andresen"], "messages_count": 1, "total_messages_chars_count": 852}}, {"title": "[Bitcoin-development] Pull request: Optimize database writes for transactions with lots of TxIns.", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-05T20:43:17", "message_text_only": "And I'd appreciate review/feedback on this:\n  https://github.com/bitcoin/bitcoin/pull/491\n\nPatch from ArtForz, who discovered the problem.\n\nThe problem was chaining large transactions (transactions with lots of\nins and outs) would make the berkeley db transaction log get very big,\nas the dependencies (TxIns) of a transaction might be re-written\nmultiple times.\n\nWith this fix, each each transaction referred to by TxIns is written once.\n\n-- \n--\nGavin Andresen", "summary": "A patch from ArtForz fixes a problem where chaining large transactions would make the berkeley db transaction log get very big."}], "thread_summary": {"title": "Pull request: Optimize database writes for transactions with lots of TxIns.", "categories": ["Bitcoin-development"], "authors": ["Gavin Andresen"], "messages_count": 1, "total_messages_chars_count": 461}}, {"title": "[Bitcoin-development] Building a node crawler to map network", "thread_messages": [{"author": "Steve", "date": "2011-09-06T07:42:30", "message_text_only": "Hi All,\n\nI started messing around today with building a node crawler to try and \nmap out the bitcoin network and hopefully provide some useful \nstatistics.  It's very basic so far using a mutilated bitcoinj to \nconnect (due me being java developer and not having a clue with c/c++). \n  If it's worthwhile I'll hack bitcoinj some more to run on top Netty to \ntake advantage of it's NIO architecture (netty's been shown to handle \n1/2 million concurrent connections so would be ideal for the purpose).\n\nHoping to a get a bit of input into what would be useful as well as \nstrategy for getting max possible connections without distorted data.  I \nseem to recall Gavin talking about the need for some kind of network \nhealth monitoring so I assume there's a need for something like this...\n\nFirstly at the moment basically I'm just storing version message and the \nresults of getaddr for each node that I can connect to.  Is there any \nother useful info that can be extracted from a node that's worth collecting?\n\nSecond and main issue is how to connect.  From my first very basic \nprobing it seems the very vast majority of nodes don't accept incoming \nconnections no doubt due to lack of upnp.  So it seems the active crawl \napproach is not really ideal for the purpose.  Even if it was used the \nresultant data would be hopelessly distorted.\n\nA honeypot approach would probably be better if there was some way to \nmake a node 'attractive' to other nodes to connect to.  That way it \ncould capture non-listening nodes as well.  If there is some way to \ninfluence other nodes to connect to the crawler node that solves the \nproblem.  If there isn't which I suspect is the case then perhaps \nanother approach is to build an easy to deploy crawler node that many \nvolunteers could run and that could then upload collected data to a \ncentral repository.\n\nWhile I'm asking questions I'll add one more regarding the getaddr \nmessage.  It seems most nodes return about 1000 addresses in response to \nthis message.  Obviously most of these nodes haven't actually talked to \nall 1000 on the list so where does this list come from?  Is it mixture \nof addresses obtained from other nodes somehow sorted by timestamp? \nDoes it include some nodes discovered by IRC/DNS? Or are those only used \nto find the first nodes to connect to?\n\nThanks for any input... Hopefully I can build something that's useful \nfor the network...", "summary": "A developer is building a node crawler to map out the Bitcoin network and provide useful statistics, seeking input on useful information and connection strategies."}, {"author": "Steve", "date": "2011-09-06T08:29:58", "message_text_only": ">\n> While I'm asking questions I'll add one more regarding the getaddr \n> message.\n\nTalking to myself here.  I just sent this message then found this \nbrilliant set of articles in the Dev & Tech forum which answers the \nquestion very nicely: *https://bitcointalk.org/index.php?topic=41722.0 \n<https://bitcointalk.org/index.php?board=6.0>\n*\nAnyway just as an FYI I've been running v0.0.0.0.0.0.0.0.1 for about an \nhour.  It's only running 10 concurrent connections due to girlfriend \ncomplaining she couldn't watch youtube but here's some early results.\n\nNew nodes: 19319 // node address discovered but no contact attempt made yet\nContacted nodes: 754\nUncontactable nodes: 3253\nLimbo nodes: 9 //not as exciting as it sounds, just nodes with connect \nin progress\nTotal nodes: 23335 // about 5000 from initial IRC discover, the rest are \nfrom getaddr\n\nVersions: {\n300=1,\n31900=7,\n31902=1,\n32000=2,\n32001=7,\n32002=22,\n32100=100,\n32200=24,\n32300=277,\n32400=317,\n32500=2}\n\nFails: {\nConnectException: Connection refused=377,\nIOException: Socket is disconnected=87,\nSocketException: Network is unreachable=2,\nProtocolException: Error deserializing message =1,\nNoRouteToHostException: No route to host=115,\nSocketException: Connection reset=149,\nSocketTimeoutException: connect timed out=2521}\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/13d77ec5/attachment.html>", "summary": "The author found a helpful article on the Dev & Tech forum regarding the getaddr message. They also shared some early results from running v0.0.0.0.0.0.0.0.1."}, {"author": "Christian Decker", "date": "2011-09-06T08:36:19", "message_text_only": "Hi Steve,\n\nbefore attempting to hack BitcoinJ to use NIO you might want to take a look\nat BitDroid (https://github.com/cdecker/BitDroid-Network), which is my\nattempt to build an easily extensible network client (no crypto stuff so\nfar) on top of NIO and a simple publish-subscribe architecture. I build a\ncrawler like yours with just a single class that subscribes to events\npublished and closes and opens connections to crawl.\n\nHTH,\nChristian\n\nOn Tue, Sep 6, 2011 at 10:29 AM, Steve <shadders.del at gmail.com> wrote:\n\n> **\n>\n>\n> While I'm asking questions I'll add one more regarding the getaddr message.\n>\n>\n>\n> Talking to myself here.  I just sent this message then found this brilliant\n> set of articles in the Dev & Tech forum which answers the question very\n> nicely: *https://bitcointalk.org/index.php?topic=41722.0<https://bitcointalk.org/index.php?board=6.0>\n> *\n> Anyway just as an FYI I've been running v0.0.0.0.0.0.0.0.1 for about an\n> hour.  It's only running 10 concurrent connections due to girlfriend\n> complaining she couldn't watch youtube but here's some early results.\n>\n> New nodes: 19319 // node address discovered but no contact attempt made yet\n> Contacted nodes: 754\n> Uncontactable nodes: 3253\n> Limbo nodes: 9 //not as exciting as it sounds, just nodes with connect in\n> progress\n> Total nodes: 23335 // about 5000 from initial IRC discover, the rest are\n> from getaddr\n>\n> Versions: {\n> 300=1,\n> 31900=7,\n> 31902=1,\n> 32000=2,\n> 32001=7,\n> 32002=22,\n> 32100=100,\n> 32200=24,\n> 32300=277,\n> 32400=317,\n> 32500=2}\n>\n> Fails: {\n> ConnectException: Connection refused=377,\n> IOException: Socket is disconnected=87,\n> SocketException: Network is unreachable=2,\n> ProtocolException: Error deserializing message =1,\n> NoRouteToHostException: No route to host=115,\n> SocketException: Connection reset=149,\n> SocketTimeoutException: connect timed out=2521}\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Special Offer -- Download ArcSight Logger for FREE!\n> Finally, a world-class log management solution at an even better\n> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n> download Logger. Secure your free ArcSight Logger TODAY!\n> http://p.sf.net/sfu/arcsisghtdev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/700d09a3/attachment.html>", "summary": "Christian suggests looking at BitDroid, an easily extensible network client built on NIO and a simple publish-subscribe architecture."}, {"author": "Mike Hearn", "date": "2011-09-06T12:49:34", "message_text_only": "Actually Steve, take a look at the bitcoinj mailing list today. Somebody has\nalready built this and has it running. It's accumulating data at the moment,\nthey'll announce it more widely soon. But I think there's no need to\nduplicate work.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/5d8e0f89/attachment.html>", "summary": "Bitcoinj mailing list reports someone has built and is running a data accumulation system, no need to duplicate work."}, {"author": "Steve", "date": "2011-09-06T13:27:10", "message_text_only": "Hi Mike,\n\nI've looked but can't find a post like you're talking about.  Can you \npoint me to it?\n\nIf so then bollocks... I'm looking for something useful to do atm.  \nPoolServerJ is in a holding pattern atm as I've stabilisied all the bugs \nI know about and am waiting for several pools to finish testing and move \ninto production so I'm twiddling thumbs trying to figure out how to \nspend my time.\n\nOn 06/09/11 22:49, Mike Hearn wrote:\n> Actually Steve, take a look at the bitcoinj mailing list today. \n> Somebody has already built this and has it running. It's accumulating \n> data at the moment, they'll announce it more widely soon. But I think \n> there's no need to duplicate work.", "summary": "The writer is looking for a post mentioned by Mike, who suggests someone has already built what they were looking for."}, {"author": "Mike Hearn", "date": "2011-09-06T13:31:34", "message_text_only": ">\n> I've looked but can't find a post like you're talking about.  Can you point\n> me to it?\n>\n\nhttps://groups.google.com/forum/?pli=1#!topic/bitcoinj/LSlZdUWcCdk\n\n\n> If so then bollocks... I'm looking for something useful to do atm.\n>  PoolServerJ is in a holding pattern atm as I've stabilisied all the bugs I\n> know about and am waiting for several pools to finish testing and move into\n> production so I'm twiddling thumbs trying to figure out how to spend my\n> time.\n>\n\nPatches to BitCoinJ are always welcome :-)\n\nIf you'd rather do your own thing, you could experiment with writing a proxy\nthat sits in front of bitcoind and multiplexes connections. Gavin is\nconcerned about socket exhaustion as users move to lightweight clients.\nMultiplexing proxies are a battle-tested technique for reducing the strain\nof this type of thing. BitCoinJ uses thread-per-connection so wouldn't do a\ngood job of that right now, but allowing it to use a mix of async io and\nmulti-threading would be a nice improvement. It'd need some changes to\nbitcoind as well for a really good effort, to allow for IPs to be forwarded.\nI'm happy to discuss it more with you over on the bitcoinj list if wanted.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/1c52c3de/attachment.html>", "summary": "The author is looking for a useful project to work on and suggests writing a proxy to reduce strain on Bitcoind. Patches to BitCoinJ are also welcome."}, {"author": "Steve", "date": "2011-09-06T14:17:29", "message_text_only": "Hi Mike,\n\nI expect I'll be submitting patches for bitcoinj sometime in the future \nbut I'm not really across it yet to the point where I'd be confident \nsubmitting patches right now...\n\nThis proxy sound like a good match for what I've been up to lately \nthough so long as it wouldn't involve direct changes to bitcoind on my \npart.  My c/c++ skills are non-existent.\n\nHowever I have been building a pool protocol using protobufs and netty \nfor non-blocking IO and I'd imagine the kind of multiplexing proxy \nyou're talking about could be easily implemented using netty.\n\nI'm not really understanding the use case though.  I believe most \nbitcoind's have a default max connections of 8.  Is the goal to increase \nthis without fundamentally altering the bitcoind concurrency model?  Or \nis it to provide capactity for a more hub/client oriented network?  If \nthe latter then presumably this is functionality that should ideally be \nnative to the client in the long term in the form of NIO?\n\nOn 06/09/11 23:31, Mike Hearn wrote:\n>\n>     I've looked but can't find a post like you're talking about.  Can\n>     you point me to it?\n>\n> https://groups.google.com/forum/?pli=1#!topic/bitcoinj/LSlZdUWcCdk \n> <https://groups.google.com/forum/?pli=1#%21topic/bitcoinj/LSlZdUWcCdk>\n>\n>     If so then bollocks... I'm looking for something useful to do atm.\n>      PoolServerJ is in a holding pattern atm as I've stabilisied all\n>     the bugs I know about and am waiting for several pools to finish\n>     testing and move into production so I'm twiddling thumbs trying to\n>     figure out how to spend my time.\n>\n>\n> Patches to BitCoinJ are always welcome :-)\n>\n> If you'd rather do your own thing, you could experiment with writing a \n> proxy that sits in front of bitcoind and multiplexes connections. \n> Gavin is concerned about socket exhaustion as users move to \n> lightweight clients. Multiplexing proxies are a battle-tested \n> technique for reducing the strain of this type of thing. BitCoinJ uses \n> thread-per-connection so wouldn't do a good job of that right now, but \n> allowing it to use a mix of async io and multi-threading would be a \n> nice improvement. It'd need some changes to bitcoind as well for a \n> really good effort, to allow for IPs to be forwarded. I'm happy to \n> discuss it more with you over on the bitcoinj list if wanted.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110907/23380133/attachment.html>", "summary": "A developer is considering submitting patches for bitcoinj in the future and is interested in a multiplexing proxy to reduce socket exhaustion."}, {"author": "Mike Hearn", "date": "2011-09-06T14:52:20", "message_text_only": "On Tue, Sep 6, 2011 at 4:17 PM, Steve <shadders.del at gmail.com> wrote:\n\n> **\n> I'm not really understanding the use case though.  I believe most\n> bitcoind's have a default max connections of 8.  Is the goal to increase\n> this without fundamentally altering the bitcoind concurrency model?\n>\n\nbitcoind already uses asynchronous IO. That's not the problem.\n\nThe issue came up in a conversation about scalability. If Bitcoins\npopularity continues to grow, users are very likely to migrate away from\nrunning full verifying nodes to lightweight clients, either a different mode\nof the Satoshi client or different implementations like the Android Wallet\nor MultiBit.\n\nLightweight clients cannot verify thus should not relay. And they'll be run\nby users who just want to send/receive coins from time to time, so don't\nleave the programs running 24/7. The result could be running out of sockets\n(like we have had problems with recently). It's especially true because\nlightweight clients cannot check transactions for themselves. If they want\nto show transactions appearing immediately (and they do), they have to use\n\"heard from lots of nodes\" as a proxy for validity. So lightweight clients\nare likely to be socket intensive.\n\nWe could solve this by just hoping that lots of people run full nodes. The\nproblem is that a full node is quite an intensive thing already, it uses\nlots of CPU and disk seeks, and will just get more expensive in future. And\nas transaction traffic increases, that leaves less CPU time available to\nservice thousands of connected clients. The ROI of bringing up a new node\ndecreases at the same time as the userbase increases.\n\nOne traditional approach to solving this is frontend proxies. Jabber.com/org\nused this technique many years ago, and Google has also used it to scale up the\nlockservice<http://static.googleusercontent.com/external_content/untrusted_dlcp/labs.google.com/en/us/papers/chubby-osdi06.pdf>\n(see\nsection 3.1). It's effective because often maintaining connections to\nthousands of clients doesn't involve much brainwork, just shifting bytes\naround. This is especially true of Bitcoin. So if somebody is running a full\nnode already they could increase their client capacity by just bringing up a\nfrontend proxy and having it handle things like outbound tx\nbroadcasts/deduping inbound broadcasts, connection setup, relaying recently\nfound blocks etc. A well written proxy could probably support tens of\nthousands of simultaneous clients which frees up the bitcoinds time for\nverification and wallet manipulation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/ec7f989a/attachment.html>", "summary": "The issue of scalability in Bitcoin was discussed, with the concern that as more users migrate to lightweight clients, there could be a shortage of sockets. One solution proposed was the use of frontend proxies to handle outbound tx broadcasts and connection setup, freeing up bitcoind's time for verification and wallet manipulation."}, {"author": "Steve", "date": "2011-09-06T15:25:09", "message_text_only": "Thanks for the overview Mike.  I just bailed up Gavin on IRC and between \nthat convo and what you've just written I'm starting to picture a plan \nin my head... This sounds right up my alley, I wish I didn't have to go \nto bed right now as I've got a ton of ideas buzzing around I'd like to \nget started on right now.  But I'll be onto it as soon as I've got a \nfree moment...\n\nOn 07/09/11 00:52, Mike Hearn wrote:\n> On Tue, Sep 6, 2011 at 4:17 PM, Steve <shadders.del at gmail.com \n> <mailto:shadders.del at gmail.com>> wrote:\n>\n>     I'm not really understanding the use case though.  I believe most\n>     bitcoind's have a default max connections of 8.  Is the goal to\n>     increase this without fundamentally altering the bitcoind\n>     concurrency model?\n>\n>\n> bitcoind already uses asynchronous IO. That's not the problem.\n>\n> The issue came up in a conversation about scalability. If Bitcoins \n> popularity continues to grow, users are very likely to migrate away \n> from running full verifying nodes to lightweight clients, either a \n> different mode of the Satoshi client or different implementations like \n> the Android Wallet or MultiBit.\n>\n> Lightweight clients cannot verify thus should not relay. And they'll \n> be run by users who just want to send/receive coins from time to time, \n> so don't leave the programs running 24/7. The result could be running \n> out of sockets (like we have had problems with recently). It's \n> especially true because lightweight clients cannot check transactions \n> for themselves. If they want to show transactions appearing \n> immediately (and they do), they have to use \"heard from lots of nodes\" \n> as a proxy for validity. So lightweight clients are likely to be \n> socket intensive.\n>\n> We could solve this by just hoping that lots of people run full nodes. \n> The problem is that a full node is quite an intensive thing already, \n> it uses lots of CPU and disk seeks, and will just get more expensive \n> in future. And as transaction traffic increases, that leaves less CPU \n> time available to service thousands of connected clients. The ROI of \n> bringing up a new node decreases at the same time as the userbase \n> increases.\n>\n> One traditional approach to solving this is frontend proxies. \n> Jabber.com/org used this technique many years ago, and Google has also \n> used it to scale up the lockservice \n> <http://static.googleusercontent.com/external_content/untrusted_dlcp/labs.google.com/en/us/papers/chubby-osdi06.pdf> (see \n> section 3.1). It's effective because often maintaining connections to \n> thousands of clients doesn't involve much brainwork, just shifting \n> bytes around. This is especially true of Bitcoin. So if somebody is \n> running a full node already they could increase their client capacity \n> by just bringing up a frontend proxy and having it handle things like \n> outbound tx broadcasts/deduping inbound broadcasts, connection setup, \n> relaying recently found blocks etc. A well written proxy could \n> probably support tens of thousands of simultaneous clients which frees \n> up the bitcoinds time for verification and wallet manipulation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110907/30632ded/attachment.html>", "summary": "The issue of scalability in Bitcoin was discussed, with the potential problem of running out of sockets due to the increasing popularity of lightweight clients. A solution proposed was the use of frontend proxies to handle client capacity."}, {"author": "Rick Wesson", "date": "2011-09-06T14:36:45", "message_text_only": "I've got minna patches for nio based on bitcoinj. I've enumerated the\nnetwork a few times and am working on a DNS seed service as well as some\nweather reports.\n\nHappy to start a branch when the committers are ready.\n\n-rick\n\n\nOn Tue, Sep 6, 2011 at 12:42 AM, Steve <shadders.del at gmail.com> wrote:\n\n> Hi All,\n>\n> I started messing around today with building a node crawler to try and\n> map out the bitcoin network and hopefully provide some useful\n> statistics.  It's very basic so far using a mutilated bitcoinj to\n> connect (due me being java developer and not having a clue with c/c++).\n>  If it's worthwhile I'll hack bitcoinj some more to run on top Netty to\n> take advantage of it's NIO architecture (netty's been shown to handle\n> 1/2 million concurrent connections so would be ideal for the purpose).\n>\n> Hoping to a get a bit of input into what would be useful as well as\n> strategy for getting max possible connections without distorted data.  I\n> seem to recall Gavin talking about the need for some kind of network\n> health monitoring so I assume there's a need for something like this...\n>\n> Firstly at the moment basically I'm just storing version message and the\n> results of getaddr for each node that I can connect to.  Is there any\n> other useful info that can be extracted from a node that's worth\n> collecting?\n>\n> Second and main issue is how to connect.  From my first very basic\n> probing it seems the very vast majority of nodes don't accept incoming\n> connections no doubt due to lack of upnp.  So it seems the active crawl\n> approach is not really ideal for the purpose.  Even if it was used the\n> resultant data would be hopelessly distorted.\n>\n> A honeypot approach would probably be better if there was some way to\n> make a node 'attractive' to other nodes to connect to.  That way it\n> could capture non-listening nodes as well.  If there is some way to\n> influence other nodes to connect to the crawler node that solves the\n> problem.  If there isn't which I suspect is the case then perhaps\n> another approach is to build an easy to deploy crawler node that many\n> volunteers could run and that could then upload collected data to a\n> central repository.\n>\n> While I'm asking questions I'll add one more regarding the getaddr\n> message.  It seems most nodes return about 1000 addresses in response to\n> this message.  Obviously most of these nodes haven't actually talked to\n> all 1000 on the list so where does this list come from?  Is it mixture\n> of addresses obtained from other nodes somehow sorted by timestamp?\n> Does it include some nodes discovered by IRC/DNS? Or are those only used\n> to find the first nodes to connect to?\n>\n> Thanks for any input... Hopefully I can build something that's useful\n> for the network...\n>\n>\n> ------------------------------------------------------------------------------\n> Special Offer -- Download ArcSight Logger for FREE!\n> Finally, a world-class log management solution at an even better\n> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n> download Logger. Secure your free ArcSight Logger TODAY!\n> http://p.sf.net/sfu/arcsisghtdev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/8c63140e/attachment.html>", "summary": "A developer is working on a node crawler to map out the Bitcoin network and provide useful statistics, using a mutilated bitcoinj to connect."}], "thread_summary": {"title": "Building a node crawler to map network", "categories": ["Bitcoin-development"], "authors": ["Rick Wesson", "Mike Hearn", "Steve", "Christian Decker"], "messages_count": 10, "total_messages_chars_count": 21075, "convo_summary": "Developers discussed the scalability issue in Bitcoin due to the increasing popularity of lightweight clients and the potential shortage of sockets. They proposed using frontend proxies to handle client capacity and reduce strain on Bitcoind. A developer is building a node crawler to map out the Bitcoin network and seeking input on useful information and connection strategies."}}, {"title": "[Bitcoin-development] Many-output transactions in the main chain", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-06T15:21:52", "message_text_only": "Somebody has been inserting transactions with lots of outputs into the\nmain bitcoin block chain:\n  http://blockexplorer.com/block/0000000000000305f98ffbe1db8445ce847fb9a924551945b465386c828f136f\n\nTheir next step will be creating transactions with thousands of inputs\nfrom those transactions. The result will be lots of excessive disk\nspace usage.\n\nThe fix is this patch:\n  https://github.com/bitcoin/bitcoin/pull/491\n\nSuggestions on the best way to let merchants, miners, and pools know\nabout the potential problem?\nI hate to take time away from the 0.4 release to re-spin 0.3.24 with\nthe patch, but we may have to.\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin block chain is being filled with transactions with lots of outputs, leading to excessive disk space usage. A patch has been suggested to fix the issue."}, {"author": "Steve", "date": "2011-09-06T15:24:11", "message_text_only": "Is this the ArtForz solidcoin 'attack'?\n\nOn 07/09/11 01:21, Gavin Andresen wrote:\n> Somebody has been inserting transactions with lots of outputs into the\n> main bitcoin block chain:\n>    http://blockexplorer.com/block/0000000000000305f98ffbe1db8445ce847fb9a924551945b465386c828f136f\n>\n> Their next step will be creating transactions with thousands of inputs\n> from those transactions. The result will be lots of excessive disk\n> space usage.\n>\n> The fix is this patch:\n>    https://github.com/bitcoin/bitcoin/pull/491\n>\n> Suggestions on the best way to let merchants, miners, and pools know\n> about the potential problem?\n> I hate to take time away from the 0.4 release to re-spin 0.3.24 with\n> the patch, but we may have to.\n>", "summary": "Bitcoin block chain is being attacked with transactions with lots of outputs, leading to excessive disk space usage. A patch has been suggested to fix the issue."}], "thread_summary": {"title": "Many-output transactions in the main chain", "categories": ["Bitcoin-development"], "authors": ["Steve", "Gavin Andresen"], "messages_count": 2, "total_messages_chars_count": 1366, "convo_summary": "The Bitcoin block chain is facing an issue of excessive disk space usage due to transactions with multiple outputs. Gavin Andresen suggests a patch to fix the problem, while Steve believes it is an attack on the block chain."}}, {"title": "[Bitcoin-development] Testing commits", "thread_messages": [{"author": "Alex Waters", "date": "2011-09-07T00:32:27", "message_text_only": "I am working on the following to create a stable build environment for\ntesters:\n\n- Build bitcoin 4.0 source in Windows 7\n- Create a package of the build dependencies, and upload to SF\n- Write up instructions for the build process\n\nx Build bitcoin 4.0 source in Ubuntu 11\n- Create a package of the build dependencies, and upload to SF\n- Write up instructions for the build process\n\nI am also compiling a list of commits that need to be tested in both\nenvironments. If you can think of any priority commits that need testing,\nand/or have a test case for them - please link the pull request in a\nresponse to https://github.com/alexwaters/bitcoin/issues/2\n\nThis is not a requirement for pull requests, but will help process the\nimportant/easy ones a lot faster. I would love to discuss other ways of\nprioritizing pull requests, but this seems like it can get the job done for\nthe time-being.\n\n-Alex Waters\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110906/e5b96ef8/attachment.html>", "summary": "Professional is creating stable build environment for testers by building bitcoin 4.0 source in Windows 7 and Ubuntu 11, creating package of build dependencies, and compiling list of commits for testing."}, {"author": "Jeff Garzik", "date": "2011-09-07T02:59:38", "message_text_only": "On Tue, Sep 6, 2011 at 8:32 PM, Alex Waters <ampedal at gmail.com> wrote:\n> I am working on the following to create a stable build environment for\n> testers:\n> - Build bitcoin 4.0 source in Windows 7\n> - Create a package of the build\u00a0dependencies, and upload to SF\n> - Write up instructions for the build process\n> x Build bitcoin 4.0 source in Ubuntu 11\n> - Create a package of the build\u00a0dependencies, and upload to SF\n> - Write up instructions for the build process\n\nMay we assume you're working with / building upon the existing gitian\nbuild stuff?\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Alex Waters is creating a stable build environment for testers by building Bitcoin 4.0 source in Windows 7 and Ubuntu 11."}, {"author": "Matt Corallo", "date": "2011-09-07T03:51:05", "message_text_only": "On Tue, 2011-09-06 at 20:32 -0400, Alex Waters wrote:\n> I am working on the following to create a stable build environment for\n> testers:\n> \n> \n> - Build bitcoin 4.0 source in Windows 7\nWhen did it switch from 0.4 to 4.0?\nI feel like the user-facing quality of the software should not be\nover-emphasized when it really is very beta in quality.\n> - Create a package of the build dependencies, and upload to SF\nhttps://bitcointalk.org/index.php?topic=4750.0 (a bit outdated, but it\nshould still work fine)\n> - Write up instructions for the build process\nhttps://bitcointalk.org/index.php?topic=5851.msg86700#msg86700\nIf the instructions were updated with fresh links/versions/etc, they\nshould work 100%.\n> \n> \n> x Build bitcoin 4.0 source in Ubuntu 11\n> - Create a package of the build dependencies, and upload to SF\nNo package needed, just apt-get the relevant packages?\n> - Write up instructions for the build process\ndoc/build-unix.txt is (though in some cases somewhat ubuntu-specific)\nquite good IMHO.\n> \n> \n> I am also compiling a list of commits that need to be tested in both\n> environments. If you can think of any priority commits that need\n> testing, and/or have a test case for them - please link the pull\n> request in a response\n>  to https://github.com/alexwaters/bitcoin/issues/2\nIf you are feeling lazy, I can convince jenkins.bluematt.me to churn out\nwindows and ubuntu builds almost identical to those that will come out\nof gitian (ie the same build as the official release builds) if you\nwant.\nSomething like the current jenkins scripts could also be easily hacked\nup to automatically sanity-test pull requests as they come in and catch\ncommon errors (or just sanity failures).\n> \n> \n> This is not a requirement for pull requests, but will help process the\n> important/easy ones a lot faster. I would love to discuss other ways\n> of prioritizing pull requests, but this seems like it can get the job\n> done for the time-being.\n> \n> \n> -Alex Waters", "summary": "Alex Waters is creating a stable build environment for testers by building Bitcoin 4.0 source in Windows 7 and Ubuntu 11. He is also compiling a list of commits that need testing."}, {"author": "Alex Waters", "date": "2011-09-09T10:08:27", "message_text_only": "I expect that I will make a lot of mistakes, and probably ask too many\nquestions - but I hope you can bear with me.\n\nI've been trying to keep a low profile as I get better acquainted with the\nproject. I'm clearly in the company of some very smart people - and would\nlike to keep it that way.\n\nI've tried to do my research on the main contributors, and it seems that\nMatt is the only one to escape my Google stalking. If you have any questions\nabout my background - feel free to inquire.\n\nIt's difficult to ascertain what needs QA work first, so any guidance or\nsuggestion is appreciated. I'm available via social networks, email, phone,\nfax?, IM, IRC, etc. Let me know your preference, or don't and I'll bugger\noff.\n\nI'll try to stay out of the way, and do my best to make the development\ncycle easier. Let me know if I'm stepping on toes, or being annoying. I\nwon't be offended.\n\nAs for the commit testing, I want to have an idiot proof solution to get as\nmany people testing as possible (eventually). With code like this, I think\nit's better to go full-auto with the ACKs.\n\n-Alex\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/2cfd1924/attachment.html>", "summary": "A new team member introduces themselves, expressing a desire to learn and contribute. They seek guidance and offer to make the development cycle easier."}], "thread_summary": {"title": "Testing commits", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Matt Corallo", "Alex Waters"], "messages_count": 4, "total_messages_chars_count": 4917, "convo_summary": "Alex Waters is building a stable build environment for testers by compiling Bitcoin 4.0 source in Windows 7 and Ubuntu 11, creating a package of build dependencies, and listing commits for testing. Additionally, a new team member expresses a desire to learn and contribute, offering to make the development cycle easier."}}, {"title": "[Bitcoin-development] bitcoind multiplexing proxy - request/response routing problem", "thread_messages": [{"author": "Steve diy-eco-life", "date": "2011-09-08T02:11:42", "message_text_only": "This a reworking of a post I made on the bitcoinj list under a\ndifferent topic but it's something I'd like to throw out there for\ninput.\n\nI'm going to build a proof of concept this weekend of the multiplexing\nproxy that Gavin and Mike were talking about here:\nhttp://sourceforge.net/mailarchive/message.php?msg_id=28049519\n\nInitially just a dumb as doornails proxy between one local bitcoind\nand one remote node.  Once I've got that far the next step is to work\nout how deal with request-response exchanges from multiple remote\nnodes.  I discussed this tatcm on IRC last night.  The problem is\nafter relaying several requests from different remote nodes to the\nlocal daemon you expect multiple responses to come back.  How identify\nwhich response matches which client's request. Bitcoind can implicitly\nidentify the recipient based on which connection made the request.  By\npiling all the requests onto one channel we lose this identifier.  I\ncan think of 3 approaches to dealing with this:\n\n1/ Generate a unique key from the request and can also be generated\nfrom the response.  e.g. getheaders key could be \"headers\" +\nhash_start.  We locally store a mapping to client (or clients) that\nrequested it and pass it to bitcoind.  When we get a headers packet\nback unique key = \"headers\" + hash_of_first_header, so we can lookup\nthe clients who requested it and send it back.\n\nThe unique key should have the following properties:\n - can be reliably generated from both the request and the response.\n - identical requests from different clients should generate the same\nunique key (this allows us to recycle responses)\n\nProblems:\n\nThis is dependent on each pair of request/response messages being\nguaranteed to contain information needed to create an identical unique\nkey.  I haven't looked in detail at every request/response pair yet to\nconfirm this.  If it is the case then this is an onerous obligation to\nplace on the protocol to fulfil this condition for all future protocol\nchanges.\n\nTo obtain guaranteed uniqueness may require large keys.  Is\n'almost-unique' an option?  e.g. generating a key off a getblocks\nrequest using the first n bytes of each block_locator_hash would be\nmuch smaller/faster and very likely to be unique.  Are the risks of\nsending back the wrong response to a request acceptable?\n\n\n2/ Modify bitcoind to accept sequence numbers for request/response\ntype messages, similar to 'id' field in json-rpc.  This is more\nreliable but potentially quite invasive to the bitcoin protocol.  It\nalso loses the inherent de-duplication of requests that we get with\nthe previous solution.  If it were to be implemented I'd suggest\nsomething like a separate sequence number message.  i.e. proxy sends\nseq message containing a unique ID.  The contract is that the seq\nmessage refers to the next message that comes over the wire.  When the\nresponse is ready the bitcoind sends a seq message with matching id\nthen sends the response message.  A separate seq message at least\nleaves the existing protocol untouched as the handling will remain\nunchanged unless a request type message is preceded by a seq message.\n\nThis approach allows the proxy remain a lot thinner and dumber but we\nlose a lot of the de-duplicating efficiencies from the first approach.\n If we want to add this capability as well we essentially need to\nimplement option 1 as well although in this case we have a reliable\nfallback.  i.e. If we can't generate a unique key then we just use\nsingle request/response matching via the seq id.\n\n3/ Make the proxy intelligent enough to handle these requests itself.\nUsing getheaders as an example again.  Proxy maintains it's own local\ncache of headers.  when a getheaders message comes in the proxy checks\nif it has all requested.  If not it requests the missing ones from the\nlocal daemon, adds to it's cache and builds a headers response itself.\n In this case the proxy definately has to be protocol version aware...\n\nAdvantages:\n - This probably achieves the best combination of request/response\nmatching reliability and de-duplication of work.\n\nDisadvantages:\n- Complexity.  The proxy needs to be far more protocol aware which\ncreates a maintenance dependency for future protocol changes.\n\nHaving spent the last couple of days studying the protocol I'm\ninclined toward the first approach as an initial easy implementation\nwith a view to moving to the 3rd approach.  It appears that most\nresponse type messages could be relatively easily constructed from a\nlocal cache.  Before I looked at the protocol I would have said no way\nto the 3rd but the depth of protocol awareness for 1 or 3 is not\nreally much different.  Option 2 allows for a much dumber and thinner\nproxy but loses a lot of potential efficiencies and if those were to\nbe regained it would require the same level of protocol awareness\ninherent in 1 and 3 anyway.  It would also require someone on the\nbitcoind side to put their hand up to add the seq message\nfunctionality as I don't have any c skills to speak of.\n\nUltimately option 3 is where I was seeing the proxy progressing to at\nsome point far in the future but the routing problem needs to be\nsolved right from the beginning as I see it.\n\nI hope I'm not over complicating it.  If anyone can think of a simpler\napproach to the request/response routing problem I'm all ears.", "summary": "The author plans to build a proof of concept for a multiplexing proxy between a local bitcoind and a remote node, discussing three approaches to deal with request-response exchanges from multiple remote nodes. The first approach involves generating a unique key from the request and response, the second involves modifying bitcoind to accept sequence numbers for request/response type messages, and the third involves making the proxy intelligent enough to handle requests itself. The author is inclined towards the first approach as an initial easy implementation with a view to moving to the third approach."}, {"author": "Steve", "date": "2011-09-08T08:15:50", "message_text_only": "4a/ Serialize all request/response exchanges.  i.e. request comes in \nfrom remote node, proxy aquires lock on the proxy-localdaemon channel \nand sends request.  Channel remains locked until response is received or \ntimeout (in which case remote node gets no response).  Unlock channel \nafter response received and send to client.\n\nPossibly messages that don't expect a response (e.g. relaying a tx \nbroadcast from remote node) can be pushed down a locked channel to \nimprove performance as they won't interfere with sequencing.  Locked \nchannels may also receive other unsolicited messages from local daemon \nbefore the expected response message which would be dealt with the same \nas if they came from an unlocked channel.\n\nDisadvantages:  Idle time for channel while waiting for response.  As \nper option 2 this allows the proxy to stay dumb/thin but loses \nopportunity for de-duplicating/caching unless option 1 is layered on top.\n\n4b/ As per 4a but use all 125 available bitcoind connections in a \nchannel pool.  Acquiring a lock on a channel consists of checking for an \nunlocked channel first then waiting in a queue for one to become available.", "summary": "Serialize request/response exchanges by locking channels until response is received or timeout. Use channel pool to improve performance with some disadvantages."}, {"author": "Mike Hearn", "date": "2011-09-08T09:29:25", "message_text_only": "It's probably best to keep this discussion on just one mailing list. It's\nconfusing to have duplicate threads in different places. People will end up\nmaking the same points.\n\nTo repeat what I posted elsewhere, for now I'd just start with the simplest\npossible approach:\n\n- Ignore version skew for now (disconnect older clients)\n\n- Don't send received transactions/blocks to the bitcoind. Let it hear about\nthem from its own p2p connections. That way you will always receive all\nvalid transactions/blocks which you can then relay/cache/drop inbound\nduplicates.\n\n- Parse/handle inv/getblocks/getheaders requests so clients that connect and\ncatch up with the chain don't place any load on the bitcoind. If a client\nrequests data the proxy doesn't have in RAM, it can go fetch it from the\nunderlying bitcoind.\n\nIf you can make v1 work and demonstrate actual scalability improvements,\nthen you can always go back and make it smarter in v2.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/4ae500f3/attachment.html>", "summary": "Keeping the discussion on one mailing list is less confusing. A simple approach to scalability is suggested, with the option to improve later."}, {"author": "Steve", "date": "2011-09-08T10:29:50", "message_text_only": "> It's probably best to keep this discussion on just one mailing list. \n> It's confusing to have duplicate threads in different places. People \n> will end up making the same points.\n>\n\nFair enough I'll take it to the bitcoinj list.  I wanted to post here in \ncase I got any nibbles from c developers about option 2.  If anyone \nwant's the follow this discussion on the other list it's here:\nhttps://groups.google.com/forum/#!topic/bitcoinj/kqiBq9VxL-k", "summary": "Duplicate discussions in multiple mailing lists can be confusing. It's best to keep the discussion in one place to avoid repetition."}], "thread_summary": {"title": "bitcoind multiplexing proxy - request/response routing problem", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn", "Steve diy-eco-life", "Steve"], "messages_count": 4, "total_messages_chars_count": 8031, "convo_summary": "Steve discusses three approaches to building a multiplexing proxy between a local bitcoind and a remote node. He favors the first approach, which generates a unique key from the request and response. Steve also suggests serializing request/response exchanges by locking channels until a response is received or timeout. Mike Hearn suggests keeping the discussion on one mailing list to avoid confusion."}}, {"title": "[Bitcoin-development] Alert System", "thread_messages": [{"author": "David Perry", "date": "2011-09-08T14:42:17", "message_text_only": "There has been some discussion on the new Bitcoin\nStackExchange<http://bitcoin.stackexchange.com>site lately about the\nalert protocol. A few have suggested that it might\ncarry the potential for abuse (spam/DoS) and others have argued that it's\nmerely deprecated. In any case, enough have voiced concerns that I've forked\nbitcoin/bitcoin, removed the snippet of code from main.cpp that makes the\nquestionable call and submitted a pull\nrequest<https://github.com/bitcoin/bitcoin/pull/506>.\nOn that pull request it was noted by Gavin Andresen that it merited\ndiscussion here and some kind of consensus should be reached before acting\non that pull request. It was also mentioned that he thought the feature was\nstill more useful than dangerous and that he would argue against.\n\nSo I pose the question to you fine fellows: Is the alert system valuable, an\nunnecessary risk or merely a snippet of deprecated code? Should it be\nremoved?\n\nSources:\nhttp://bitcoin.stackexchange.com/questions/583/what-is-the-alert-system-in-the-bitcoin-protocol-how-does-it-work/590\nhttp://bitcoin.stackexchange.com/questions/636/is-the-alert-system-still-in-the-main-clients-code-will-it-be-removed/711\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/9d17171f/attachment.html>", "summary": "There are concerns about the potential for abuse of the alert protocol in Bitcoin. A pull request has been submitted to remove it, but consensus is needed."}, {"author": "Steve", "date": "2011-09-08T15:04:08", "message_text_only": "I think there's a significant risk to not having it at this stage.  \nThere's many reasons why an urgent update may been to rapidly propagated \nin this stage of the network's lifecycle.  Perhaps if there's a \nperceived threat of abuse the protocol could be altered slightly so it \ncan't carry content.  Only a notification of the fact that there is an \nalert.  Then it would be up to individual clients whether they react to \nit or not.  The main clients would probably check a central trusted \nserver for actual alert content.  This would give a lot more flexibility \nin how to deal with the alert.  Alert content servers could for example \nimplement a json api to provide alert content with meta data like target \nclient version, priority etc.\n\nI think it should be removed in the future but not for a good while yet.\n\nOn 09/09/11 00:42, David Perry wrote:\n> There has been some discussion on the new Bitcoin StackExchange \n> <http://bitcoin.stackexchange.com> site lately about the alert \n> protocol. A few have suggested that it might carry the potential for \n> abuse (spam/DoS) and others have argued that it's merely deprecated. \n> In any case, enough have voiced concerns that I've forked \n> bitcoin/bitcoin, removed the snippet of code from main.cpp that makes \n> the questionable call and submitted a pull request \n> <https://github.com/bitcoin/bitcoin/pull/506>. On that pull request it \n> was noted by Gavin Andresen that it merited discussion here and some \n> kind of consensus should be reached before acting on that pull \n> request. It was also mentioned that he thought the feature was still \n> more useful than dangerous and that he would argue against.\n>\n> So I pose the question to you fine fellows: Is the alert system \n> valuable, an unnecessary risk or merely a snippet of deprecated code? \n> Should it be removed?\n>\n> Sources:\n> http://bitcoin.stackexchange.com/questions/583/what-is-the-alert-system-in-the-bitcoin-protocol-how-does-it-work/590\n> http://bitcoin.stackexchange.com/questions/636/is-the-alert-system-still-in-the-main-clients-code-will-it-be-removed/711\n>\n>\n> ------------------------------------------------------------------------------\n> Doing More with Less: The Next Generation Virtual Desktop\n> What are the key obstacles that have prevented many mid-market businesses\n> from deploying virtual desktops?   How do next-generation virtual desktops\n> provide companies an easier-to-deploy, easier-to-manage and more affordable\n> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/753154f6/attachment.html>", "summary": "There is debate over whether the Bitcoin alert protocol is valuable or a potential risk for abuse, with some suggesting it be removed."}, {"author": "David Perry", "date": "2011-09-08T16:09:12", "message_text_only": "@Steve re \"Who knows, it might be the only way we'll ever hear from Satoshi\nagain.\"\n\nThat brings up a good point... Does anyone aside from Satoshi actually have\nthe ability to send such an alert? Should we at the very least change the\nalert system to give such privileges to current devs and ensure that that if\nthe missing Mr. Satoshi has had his key compromised we don't see an\nauthoritative-looking alert come up from a malicious source?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/129de602/attachment.html>", "summary": "Concerns raised about the alert system in case Satoshi's key has been compromised; suggestion to give such privileges to current developers."}, {"author": "Matt Corallo", "date": "2011-09-08T16:16:51", "message_text_only": "On Thu, 2011-09-08 at 09:09 -0700, David Perry wrote:\n> @Steve re \"Who knows, it might be the only way we'll ever hear from\n> Satoshi again.\"\n> \n> \n> That brings up a good point... Does anyone aside from Satoshi actually\n> have the ability to send such an alert?\nGavin does\n> Should we at the very least change the alert system to give such\n> privileges to current devs and ensure that that if the missing Mr.\n> Satoshi has had his key compromised we don't see an\n> authoritative-looking alert come up from a malicious source?\nMeh, why make the key-holder send out two alerts for old clients and new\nclients.  I also highly doubt satoshi would let his key get compromised.\nThat said, keep in mind they are literally just messages, they make no\nfunctional difference.", "summary": "Discussion on whether anyone other than Satoshi has the ability to send an alert and the need to change the alert system to prevent malicious alerts."}, {"author": "Pieter Wuille", "date": "2011-09-08T16:20:16", "message_text_only": "On Thu, Sep 08, 2011 at 09:09:12AM -0700, David Perry wrote:\n> @Steve re \"Who knows, it might be the only way we'll ever hear from Satoshi\n> again.\"\n> \n> That brings up a good point... Does anyone aside from Satoshi actually have\n> the ability to send such an alert? Should we at the very least change the\n> alert system to give such privileges to current devs and ensure that that if\n> the missing Mr. Satoshi has had his key compromised we don't see an\n> authoritative-looking alert come up from a malicious source?\n\nYes, Satoshi transferred the key to Gavin when he \"left\". I agree we should\nkeep it, btw. There have been suggestions before on this list to use the\nalert system to ask people to upgrade to recent versions of the client (eg.\nthe disconnect issue 0.3.20-0.3.23 had). I feel there may come a moment when\nwe really need to use it for that purpose.\n\n-- \nPieter", "summary": "Discussion on the Bitcoin alert system and the possibility of malicious alerts being sent by someone other than Satoshi, who transferred the key to Gavin."}, {"author": "John Smith", "date": "2011-09-08T16:37:01", "message_text_only": "There is a lot of complaining about this alert system, but I really don't\nsee the problem.\n\nAs others have already said, it's just a message. Even if someone managed to\ncompromise the private key, the most they could do is spam graffiti messages\nor try phishing. There are much worse things that could happen to the\nnetwork (in which case an alert system could come in very handy). It's just\nnot worth worrying about.\n\nJS\n\nOn Thu, Sep 8, 2011 at 4:20 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Thu, Sep 08, 2011 at 09:09:12AM -0700, David Perry wrote:\n> > @Steve re \"Who knows, it might be the only way we'll ever hear from\n> Satoshi\n> > again.\"\n> >\n> > That brings up a good point... Does anyone aside from Satoshi actually\n> have\n> > the ability to send such an alert? Should we at the very least change the\n> > alert system to give such privileges to current devs and ensure that that\n> if\n> > the missing Mr. Satoshi has had his key compromised we don't see an\n> > authoritative-looking alert come up from a malicious source?\n>\n> Yes, Satoshi transferred the key to Gavin when he \"left\". I agree we should\n> keep it, btw. There have been suggestions before on this list to use the\n> alert system to ask people to upgrade to recent versions of the client (eg.\n> the disconnect issue 0.3.20-0.3.23 had). I feel there may come a moment\n> when\n> we really need to use it for that purpose.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Doing More with Less: The Next Generation Virtual Desktop\n> What are the key obstacles that have prevented many mid-market businesses\n> from deploying virtual desktops?   How do next-generation virtual desktops\n> provide companies an easier-to-deploy, easier-to-manage and more affordable\n> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/8fe4ee50/attachment.html>", "summary": "The Bitcoin alert system is not a cause for concern as even if the private key was compromised, the worst that could happen is spam messages."}, {"author": "Mike Hearn", "date": "2011-09-08T16:51:02", "message_text_only": "Alert system should be upgraded to pop up a dialog box every 30 minutes\nwhilst you're using the software.\n\nBitcoin is one of the few pieces of software I use that has no concept of\nautomatic updates or even notifications at all. Yet the network badly relies\non people upgrading for stability, scalability and to enable new features.\n\nIf the alert system goes away, it'd just end up being replaced by polling\nsomething over HTTP, which is less decentralized than before. Having zero\nway to communicate upgrades to end-users is a non-starter for anything\nserious about mass market penetration.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/c4338875/attachment.html>", "summary": "Bitcoin needs an upgraded alert system to notify users of necessary updates every 30 minutes to ensure stability, scalability, and new features."}, {"author": "Alex Waters", "date": "2011-09-08T16:56:32", "message_text_only": "https://github.com/bitcoin/bitcoin/pull/506 has been closed pending\nadditional commits or a change in consensus.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/8bf319dc/attachment.html>", "summary": "Pull request #506 on the Bitcoin repository has been closed until further changes or consensus is reached."}, {"author": "Luke-Jr", "date": "2011-09-08T17:15:09", "message_text_only": "On Thursday, September 08, 2011 12:51:02 PM Mike Hearn wrote:\n> Bitcoin is one of the few pieces of software I use that has no concept of\n> automatic updates or even notifications at all. Yet the network badly\n> relies on people upgrading for stability, scalability and to enable new\n> features.\n> \n> If the alert system goes away, it'd just end up being replaced by polling\n> something over HTTP, which is less decentralized than before. Having zero\n> way to communicate upgrades to end-users is a non-starter for anything\n> serious about mass market penetration.\n\nIn fact, I think the alert system should relay (note, NOT display) messages \n*regardless of the key used*, so it isn't yet another \"our client gets special \nstatus\" thing, and can be used for other clients as well.", "summary": "Bitcoin lacks automatic updates or notifications, making it difficult to ensure stability and scalability. The alert system is crucial for mass market penetration."}, {"author": "John Smith", "date": "2011-09-08T17:33:15", "message_text_only": "Be careful though, if you relay everything, it suddenly *does* have DDoS\npotential...\n\nJS\n\n\nOn Thu, Sep 8, 2011 at 5:15 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Thursday, September 08, 2011 12:51:02 PM Mike Hearn wrote:\n> > Bitcoin is one of the few pieces of software I use that has no concept of\n> > automatic updates or even notifications at all. Yet the network badly\n> > relies on people upgrading for stability, scalability and to enable new\n> > features.\n> >\n> > If the alert system goes away, it'd just end up being replaced by polling\n> > something over HTTP, which is less decentralized than before. Having zero\n> > way to communicate upgrades to end-users is a non-starter for anything\n> > serious about mass market penetration.\n>\n> In fact, I think the alert system should relay (note, NOT display) messages\n> *regardless of the key used*, so it isn't yet another \"our client gets\n> special\n> status\" thing, and can be used for other clients as well.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/a8f8d307/attachment.html>", "summary": "The Bitcoin network relies on people upgrading for stability, scalability, and new features, but lacks automatic updates or notifications. The alert system should relay messages regardless of the key used."}, {"author": "Luke-Jr", "date": "2011-09-08T17:59:29", "message_text_only": "On Thursday, September 08, 2011 1:33:15 PM John Smith wrote:\n> Be careful though, if you relay everything, it suddenly *does* have DDoS\n> potential...\n\nMaybe require a proof-of-work then?", "summary": "John Smith warns about the potential of DDoS attacks if everything is relayed and suggests implementing proof-of-work as a solution."}, {"author": "Will", "date": "2011-09-08T19:25:22", "message_text_only": "> In fact, I think the alert system should relay (note, NOT display) messages\n> *regardless of the key used*, so it isn't yet another \"our client gets\n> special\n> status\" thing, and can be used for other clients as well.\n>\n>\n> Be careful though, if you relay everything, it suddenly *does* have DDoS\npotential...\n\nno more than other messages such as transactions.\n\n>Maybe require a proof-of-work then?\n\nkind of defeats the purpose of the alert if it takes a long time to issue\none.\n\nI think leave the alert in, but relay alert messages even if they don't use\nthe correct key.  This means that if we later decide to add new keys to the\nalert root trust then older clients will still relay these.\n\nmy .02btc\n\nWill\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110908/584a4849/attachment.html>", "summary": "The alert system should relay messages regardless of the key used, but be cautious of DDoS potential and consider proof-of-work."}, {"author": "Matt Corallo", "date": "2011-09-08T15:20:42", "message_text_only": "On Thu, 2011-09-08 at 07:42 -0700, David Perry wrote:\n> There has been some discussion on the new Bitcoin StackExchange site\n> lately about the alert protocol. A few have suggested that it might\n> carry the potential for abuse (spam/DoS) and others have argued that\n> it's merely deprecated. In any case, enough have voiced concerns that\n> I've forked bitcoin/bitcoin, removed the snippet of code from main.cpp\n> that makes the questionable call and submitted a pull request. On that\n> pull request it was noted by Gavin Andresen that it merited discussion\n> here and some kind of consensus should be reached before acting on\n> that pull request. It was also mentioned that he thought the feature\n> was still more useful than dangerous and that he would argue against.\n> \n> \n> So I pose the question to you fine fellows: Is the alert system\n> valuable, an unnecessary risk or merely a snippet of deprecated code?\n> Should it be removed?\n\nThe alert system requires a signature verification when it receives an\nalert, but so do blocks and transactions so it really isn't a DoS target\n(remember that the alert system requires alerts to be signed by a key\nthat only gavin and satoshi have).\n\nThe alert system could prove very, very valuable.  In much software it\ncarries the risk for abuse or simply seems wrong that the developers can\nsend a message to everyone's computer to notify them of something, but\nkeep in mind that Bitcoin is financial software.  If there is an urgent\nproblem (like the overflow bug) there must be a way to notify people to\nupgrade immediately, which is exactly what alerts provide.  Since alerts\nno longer carry the ability to put Bitcoin into RPC safe-mode, they are\nliterally just a message and I see no reason why they should be removed.", "summary": "The Bitcoin alert system has been questioned for its potential for abuse, but it is valuable for urgent notifications and not a DoS target."}, {"author": "Steve Coughlan", "date": "2011-09-08T15:25:57", "message_text_only": "Who knows, it might be the only way we'll ever hear from Satoshi again.\nOn Sep 9, 2011 1:21 AM, \"Matt Corallo\" <bitcoin-list at bluematt.me> wrote:\n> On Thu, 2011-09-08 at 07:42 -0700, David Perry wrote:\n>> There has been some discussion on the new Bitcoin StackExchange site\n>> lately about the alert protocol. A few have suggested that it might\n>> carry the potential for abuse (spam/DoS) and others have argued that\n>> it's merely deprecated. In any case, enough have voiced concerns that\n>> I've forked bitcoin/bitcoin, removed the snippet of code from main.cpp\n>> that makes the questionable call and submitted a pull request. On that\n>> pull request it was noted by Gavin Andresen that it merited discussion\n>> here and some kind of consensus should be reached before acting on\n>> that pull request. It was also mentioned that he thought the feature\n>> was still more useful than dangerous and that he would argue against.\n>>\n>>\n>> So I pose the question to you fine fellows: Is the alert system\n>> valuable, an unnecessary risk or merely a snippet of deprecated code?\n>> Should it be removed?\n>\n> The alert system requires a signature verification when it receives an\n> alert, but so do blocks and transactions so it really isn't a DoS target\n> (remember that the alert system requires alerts to be signed by a key\n> that only gavin and satoshi have).\n>\n> The alert system could prove very, very valuable. In much software it\n> carries the risk for abuse or simply seems wrong that the developers can\n> send a message to everyone's computer to notify them of something, but\n> keep in mind that Bitcoin is financial software. If there is an urgent\n> problem (like the overflow bug) there must be a way to notify people to\n> upgrade immediately, which is exactly what alerts provide. Since alerts\n> no longer carry the ability to put Bitcoin into RPC safe-mode, they are\n> literally just a message and I see no reason why they should be removed.\n>\n>\n>\n------------------------------------------------------------------------------\n> Doing More with Less: The Next Generation Virtual Desktop\n> What are the key obstacles that have prevented many mid-market businesses\n> from deploying virtual desktops? How do next-generation virtual desktops\n> provide companies an easier-to-deploy, easier-to-manage and more\naffordable\n> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/9580ac87/attachment.html>", "summary": "Discussion on the potential abuse of the Bitcoin alert protocol, with some arguing for its removal, while others see its value in urgent situations."}, {"author": "theymos", "date": "2011-09-08T19:43:12", "message_text_only": "The alert system will be very important if there are ever any critical\nproblems in the network. For example, it is currently Bitcoin's only\ndefense against an attacker with >50% of the computational power, where\nalerts would be used to tell people to stop accepting transactions.\n\nDisplaying a message is pretty harmless. In fact, I don't think the\nmessage is prominent enough. The GUI client should not allow people to\nsee received transactions or send new transactions while an alert is in\neffect (with an opt-out), and there should be an opt-in feature that\nputs RPC into safe mode in response to an alert.\n\nAlerts are no worse than transactions as a DoS attack vector. They're\nmuch safer than typical HTTPS because there are no CAs that can break\nits security.\n\n(FYI: I also have a copy of the alert key.)", "summary": "Alert system is crucial for network's security against attackers with >50% computational power. GUI client should restrict transactions during alerts."}, {"author": "Luke-Jr", "date": "2011-09-08T19:45:35", "message_text_only": "On Thursday, September 08, 2011 3:43:12 PM theymos wrote:\n> The alert system will be very important if there are ever any critical\n> problems in the network. For example, it is currently Bitcoin's only\n> defense against an attacker with >50% of the computational power, where\n> alerts would be used to tell people to stop accepting transactions.\n\nI don't seem to recall this ever happening, despite Deepbit having over 50% \nmultiple times now.", "summary": "Bitcoin's alert system is crucial in case of network issues, especially against attackers with over 50% computational power, but it has never been used."}, {"author": "theymos", "date": "2011-09-08T20:17:25", "message_text_only": "On Thursday, September 08, 2011 3:45 PM, \"Luke-Jr\" <luke at dashjr.org> wrote:\n> I don't seem to recall this ever happening, despite Deepbit having over 50% \n> multiple times now.\n\nAn alert would have been issued if they had abused that position.", "summary": "Deepbit had over 50% of the position multiple times, but no alert was issued as they did not abuse their position."}, {"author": "Christian Decker", "date": "2011-09-09T09:15:38", "message_text_only": "Resending to mailing list as I replied directly...\nOn Thu, Sep 8, 2011 at 11:03 PM, Christian Decker <\ndecker.christian at gmail.com> wrote:\n\n>\n>\n> Will <will at phase.net> wrote:\n>\n> >> In fact, I think the alert system should relay (note, NOT display)\n> >messages\n> >> *regardless of the key used*, so it isn't yet another \"our client\n> >gets\n> >> special\n> >> status\" thing, and can be used for other clients as well.\n> >>\n> >>\n> >> Be careful though, if you relay everything, it suddenly *does* have\n> >DDoS\n> >potential...\n> >\n> >no more than other messages such as transactions.\n> Only verified and valid trandactions are forwarded which is desired as it\n> costs the sender a fee if he attempts to spam, messages have no such\n> penalty.\n> >\n> >>Maybe require a proof-of-work then?\n> >\n> >kind of defeats the purpose of the alert if it takes a long time to\n> >issue\n> >one.\n> >\n> >I think leave the alert in, but relay alert messages even if they don't\n> >use\n> >the correct key.  This means that if we later decide to add new keys to\n> >the\n> >alert root trust then older clients will still relay these.\n> >\n> >my .02btc\n> >\n> >Will\n> I'm for keeping it in there as well, maybe even extend it with a mechanism\n> to sign other certificates giving alternative client developers the ability\n> to issue their own alerts. Think ssl certificates...\n>\n> Regards,\n> Chris\n>\n> >------------------------------------------------------------------------------\n> >Doing More with Less: The Next Generation Virtual Desktop\n> >What are the key obstacles that have prevented many mid-market\n> >businesses\n> >from deploying virtual desktops?   How do next-generation virtual\n> >desktops\n> >provide companies an easier-to-deploy, easier-to-manage and more\n> >affordable\n> >virtual desktop\n> >model.\n> http://www.accelacomm.com/jaw/sfnl/114/51426474/_______________________________________________\n> >Bitcoin-development mailing list\n> >Bitcoin-development at lists.sourceforge.net\n> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> --\n> Sent from my Android phone with K-9 Mail. Please excuse my brevity.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/3053b5e1/attachment.html>", "summary": "Discussion on relaying alert messages in Bitcoin network, including potential DDoS risks and the possibility of extending the mechanism to sign other certificates."}], "thread_summary": {"title": "Alert System", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "David Perry", "Mike Hearn", "Steve", "theymos", "Christian Decker", "Steve Coughlan", "Matt Corallo", "Pieter Wuille", "Will", "Alex Waters"], "messages_count": 18, "total_messages_chars_count": 21222, "convo_summary": "The Bitcoin alert protocol is being debated for its potential for abuse, with some suggesting its removal. Concerns have been raised about the possibility of malicious alerts being sent by someone other than Satoshi, who transferred the key to Gavin. The alert system is crucial for urgent notifications and network security against attackers with over 50% computational power. There is a need to change the alert system to prevent malicious alerts and ensure stability, scalability, and new features."}}, {"title": "[Bitcoin-development] 0.3.23+patches bug: JSON-RPC leaves sockets around when not connected", "thread_messages": [{"author": "Luke-Jr", "date": "2011-09-09T06:57:03", "message_text_only": "On Eligius, I have two bitcoinds running on the same system:\n- a hub node, which is dedicated to relaying network activity between the\n  hundreds of nodes Eligius peers with\n- a work node, which is dedicated to managing mining, and only ever connects\n  to the hub node\n\nLately, the hub node has been dying (yet to determine cause; I haven't changed \nanything recently), leaving the work node with no connections. The work node, \nof course, starts responding to getworks with \"not connected\" messages. \nStrangely enough, the sockets used for these are never cleaned up properly, \nand eventually overflow the system's socket limits.\n\nI am using a very heavily patched 0.3.23, so this bug could be related to one \nof those patches (perhaps the threaded JSON-RPC?), but I felt like I should \nmention it somewhere else just in case before 0.4 final got released. I have \nnot tried to reproduce it on an unpatched bitcoind yet, and am extremely busy \nlately so I might not get a chance before you guys finish 0.4.", "summary": "Two bitcoinds run on the same system: a hub node relays network activity and a work node manages mining. The hub node has been dying, causing issues."}, {"author": "John Smith", "date": "2011-09-09T20:00:30", "message_text_only": "On Fri, Sep 9, 2011 at 6:57 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Eligius, I have two bitcoinds running on the same system:\n> - a hub node, which is dedicated to relaying network activity between the\n>  hundreds of nodes Eligius peers with\n> - a work node, which is dedicated to managing mining, and only ever\n> connects\n>  to the hub node\n>\n> Lately, the hub node has been dying (yet to determine cause; I haven't\n> changed\n> anything recently),\n\n\nStack trace or it didn't happen :p\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/a02e2709/attachment.html>", "summary": "Luke-Jr reports issues with his Eligius Bitcoin nodes, with the hub node dying recently, and the cause yet to be determined."}], "thread_summary": {"title": "0.3.23+patches bug: JSON-RPC leaves sockets around when not connected", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr"], "messages_count": 2, "total_messages_chars_count": 1685, "convo_summary": "Luke-Jr reported issues with his Eligius Bitcoin nodes, where the hub node has been dying and causing problems. The cause is yet to be determined."}}, {"title": "[Bitcoin-development] 0.4 Release Candidate 2", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-09T14:02:05", "message_text_only": "I just tagged the git tree:  v0.4.00rc2\n\nFixes from release candidate 1:\n\n+ Optimize database writes for transactions with lots of inputs\n+ Fix a deadlock that could occur when adding addresses from 'addr'\nmessages and irc\n+ Fix a potential problem with duplicate, un-spendable coinbase\ntransactions if you were generating bitcoins, with a locked wallet,\nand ran out of keypool keys.\n\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen released v0.4.00rc2 of the git tree, which includes optimizations for database writes and fixes for potential issues with coinbase transactions."}, {"author": "Matt Corallo", "date": "2011-09-09T23:49:17", "message_text_only": "On Fri, 2011-09-09 at 10:02 -0400, Gavin Andresen wrote:\n> I just tagged the git tree:  v0.4.00rc2\n> \n> Fixes from release candidate 1:\n> \n> + Optimize database writes for transactions with lots of inputs\n> + Fix a deadlock that could occur when adding addresses from 'addr'\n> messages and irc\n> + Fix a potential problem with duplicate, un-spendable coinbase\n> transactions if you were generating bitcoins, with a locked wallet,\n> and ran out of keypool keys.\n> \n> \nI'm too lazy to make nice tars so here is the raw gitian output (I plan\non working out gitian-downloader stuff sometime in the next couple\ndays).\nAlso, setup exe still not deterministic so theres that...\n\nAnyway:\nhttp://dl.dropbox.com/u/29653426/bitcoin-ubuntu-v0.4.00rc2.zip\nhttp://dl.dropbox.com/u/29653426/bitcoin-win32-v0.4.00rc2.zip\n\nSHA1s:\nfd886d79bf48ba0d90f2f99fdd19d96946662bf5  bitcoin-ubuntu-v0.4.00rc2.zip\n703712859ecdce423020116ebf65d087b179997d  bitcoin-win32-v0.4.00rc2.zip\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110909/67a647b0/attachment.sig>", "summary": "Bitcoin v0.4.00rc2 has been released, with optimizations for database writes and fixes for potential problems with coinbase transactions."}, {"author": "Jeff Garzik", "date": "2011-09-10T05:18:04", "message_text_only": "On Fri, Sep 9, 2011 at 10:02 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> I just tagged the git tree: \u00a0v0.4.00rc2\n>\n> Fixes from release candidate 1:\n>\n> + Optimize database writes for transactions with lots of inputs\n> + Fix a deadlock that could occur when adding addresses from 'addr'\n> messages and irc\n> + Fix a potential problem with duplicate, un-spendable coinbase\n> transactions if you were generating bitcoins, with a locked wallet,\n> and ran out of keypool keys.\n\n\nShould I go ahead and upload src + builds to SF?\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Bitcoin v0.4.00rc2 released with optimizations for transactions with many inputs, fixes for deadlocks and potential problems with coinbase transactions."}, {"author": "Jeff Garzik", "date": "2011-09-16T16:38:27", "message_text_only": "On Fri, Sep 9, 2011 at 10:02 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> I just tagged the git tree: \u00a0v0.4.00rc2\n\n\nSigned builds up at sourceforge:\nhttps://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.0/test/\n\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Bitcoin version 0.4.00rc2 has been tagged and signed builds are available for testing on Sourceforge, according to Jeff Garzik."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-09-22T07:46:22", "message_text_only": "Hi everybody!!\n\n This is my first message here... I'm ThiagoCMC at bitcointalk...\n\n Well, one of the features that I like most is that, every time I receive\nsome Bitcoin amount, a new address appear at my \"AddressBook\"automatically,\nAND, I like to track it.\n\n This feature is broken at 0.3.24 but it is working again! Thanks BTW!!\n\n But, I've read in some places that you guys are thinking in disable this\nfeature... Is that true?!\n\n PLEASE, do NOT deactivate this feature! I mean, do not deactivate ANY\nfeature. Instead of, just add a option to turn it ON and OFF. Right?!  ^^\n\n Bitcoin is the most amazing project since Linux and Git!!  :-P\n\n Thank you guys!!\n\nBest,\nThiago\n\nOn 9 September 2011 11:02, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> I just tagged the git tree:  v0.4.00rc2\n>\n> Fixes from release candidate 1:\n>\n> + Optimize database writes for transactions with lots of inputs\n> + Fix a deadlock that could occur when adding addresses from 'addr'\n> messages and irc\n> + Fix a potential problem with duplicate, un-spendable coinbase\n> transactions if you were generating bitcoins, with a locked wallet,\n> and ran out of keypool keys.\n>\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Why Cloud-Based Security and Archiving Make Sense\n> Osterman Research conducted this study that outlines how and why cloud\n> computing security and archiving is rapidly being adopted across the IT\n> space for its ease of implementation, lower cost, and increased\n> reliability. Learn more. http://www.accelacomm.com/jaw/sfnl/114/51425301/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/e9d8d5b6/attachment.html>", "summary": "ThiagoCMC likes the feature where a new address appears in his \"AddressBook\" every time he receives Bitcoin, and hopes it won't be deactivated."}, {"author": "John Smith", "date": "2011-09-22T22:25:31", "message_text_only": "2011/9/22 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n\n> Hi everybody!!\n>\n>  This is my first message here... I'm ThiagoCMC at bitcointalk...\n>\n>  Well, one of the features that I like most is that, every time I receive\n> some Bitcoin amount, a new address appear at my \"AddressBook\"automatically,\n> AND, I like to track it.\n>\n\nCan I ask your rationale for this?\n\n>From what I've noticed, most people's workflow is to create a new receiving\naddress for each new contact that sends them bitcoins (either for every\ntransaction, or they reuse the address for this person).  To make sure that\nthe address is labeled, they create it themselves and then give out the\ngenerated address.\n\nThey are utterly spooked by suddenly appearing unlabeled addresses, of which\nthey are unsure whether they are used, and which can never be removed.\n\nI'm fine with adding it back as an option but please leave it disabled by\ndefault...\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/532731f7/attachment.html>", "summary": "A user on the Bitcoin forum likes the feature where a new address appears in their \"AddressBook\" automatically every time they receive Bitcoin, but others are spooked by it."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-09-22T22:55:05", "message_text_only": "Hi John!\n\n Thank you for your answer...\n\n I have \"two kinds\" of address, the \"static address\", which I created myself\nfor any personal reason, and the \"dinamic address\", which is the automatic\ngenerated address when I receive some Bitcoin amount, I label each one (the\nautomatic created by the software) with something like \"DINAMIC-1\",\n\"DINAMIC-2\" and so on...\n\n I use my \"dinamic address\" in a \"random\" way, following the moon phase...\nlol\n\n My point is: I like to keep track of all my Bitcoin Address, they are all\nmy...\n\n Please, leave this feature alive, as a option, disabled by default.\n\n I don't know why people fear about their own address... It is all under\n\"Receiving\" tab! There is nothing to fear about it.\n\n ---\n\n BTW, I think this option should have some explanations at the \"Options\nscreen\", for example:\n\n For increasing your anonymity, enable the \"Dinamic Bitcoin Address\" option\nand make sure to always use one new and different address for each\ntransaction. And do not link each address with your person!\n\n (X) Dynamic Bitcoin Address (a new Bitcoin Address will be created\nautomatically for you, after each new received Bitcoin amount)\n\n ---\n\n Thank you so much!\n\nBest,\nThiago\n\n2011/9/22 John Smith <witchspace81 at gmail.com>\n\n>\n>\n> 2011/9/22 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n>\n>> Hi everybody!!\n>>\n>>  This is my first message here... I'm ThiagoCMC at bitcointalk...\n>>\n>>  Well, one of the features that I like most is that, every time I receive\n>> some Bitcoin amount, a new address appear at my \"AddressBook\"automatically,\n>> AND, I like to track it.\n>>\n>\n> Can I ask your rationale for this?\n>\n> From what I've noticed, most people's workflow is to create a new receiving\n> address for each new contact that sends them bitcoins (either for every\n> transaction, or they reuse the address for this person).  To make sure that\n> the address is labeled, they create it themselves and then give out the\n> generated address.\n>\n> They are utterly spooked by suddenly appearing unlabeled addresses, of\n> which they are unsure whether they are used, and which can never be removed.\n>\n> I'm fine with adding it back as an option but please leave it disabled by\n> default...\n>\n> JS\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/c1429a26/attachment.html>", "summary": "ThiagoCMC requests that the option to track all Bitcoin addresses, including dynamic ones, be kept as an option, disabled by default. He believes there is nothing to fear about Bitcoin addresses and that the option should be explained in the options screen."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-09-23T01:20:00", "message_text_only": "Hi!\n\n When my network goes down and I close the Bitcoin, I see the following\nmessage:\n\n---\nmartinx at floyd:~$ ./bitcoin-0.4.0rc2/bin/32/bitcoin\nconnect: Network is unreachable\n\n\n************************\nUNKNOWN EXCEPTION\nbitcoin in CMyApp::OnUnhandledException()\n\nSegmentation fault\nmartinx at floyd:~$\n---\n\nThanks,\nThiago\n\n2011/9/22 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n\n> Hi John!\n>\n>  Thank you for your answer...\n>\n>  I have \"two kinds\" of address, the \"static address\", which I created\n> myself for any personal reason, and the \"dinamic address\", which is the\n> automatic generated address when I receive some Bitcoin amount, I label each\n> one (the automatic created by the software) with something like \"DINAMIC-1\",\n> \"DINAMIC-2\" and so on...\n>\n>  I use my \"dinamic address\" in a \"random\" way, following the moon phase...\n> lol\n>\n>  My point is: I like to keep track of all my Bitcoin Address, they are all\n> my...\n>\n>  Please, leave this feature alive, as a option, disabled by default.\n>\n>  I don't know why people fear about their own address... It is all under\n> \"Receiving\" tab! There is nothing to fear about it.\n>\n>  ---\n>\n>  BTW, I think this option should have some explanations at the \"Options\n> screen\", for example:\n>\n>  For increasing your anonymity, enable the \"Dinamic Bitcoin Address\" option\n> and make sure to always use one new and different address for each\n> transaction. And do not link each address with your person!\n>\n>  (X) Dynamic Bitcoin Address (a new Bitcoin Address will be created\n> automatically for you, after each new received Bitcoin amount)\n>\n>  ---\n>\n>  Thank you so much!\n>\n> Best,\n> Thiago\n>\n> 2011/9/22 John Smith <witchspace81 at gmail.com>\n>\n>>\n>>\n>> 2011/9/22 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n>>\n>>> Hi everybody!!\n>>>\n>>>  This is my first message here... I'm ThiagoCMC at bitcointalk...\n>>>\n>>>  Well, one of the features that I like most is that, every time I receive\n>>> some Bitcoin amount, a new address appear at my \"AddressBook\"automatically,\n>>> AND, I like to track it.\n>>>\n>>\n>> Can I ask your rationale for this?\n>>\n>> From what I've noticed, most people's workflow is to create a new\n>> receiving address for each new contact that sends them bitcoins (either for\n>> every transaction, or they reuse the address for this person).  To make sure\n>> that the address is labeled, they create it themselves and then give out the\n>> generated address.\n>>\n>> They are utterly spooked by suddenly appearing unlabeled addresses, of\n>> which they are unsure whether they are used, and which can never be removed.\n>>\n>> I'm fine with adding it back as an option but please leave it disabled by\n>> default...\n>>\n>> JS\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/67f08fa4/attachment.html>", "summary": "The message describes an error when trying to connect to the Bitcoin network and an unknown exception causing a segmentation fault."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-09-23T02:05:24", "message_text_only": "BTW...\n\n I'm running Ubuntu 11.04 32 bits...\n\n When I just close the bitcoin with the network still online, I see almost\nthe same message:\n\n---\nmartinx at floyd:~$ *./bitcoin-0.4.0rc2/bin/32/bitcoin*\n\n\n************************\nUNKNOWN EXCEPTION\nbitcoin in CMyApp::OnUnhandledException()\n\nSegmentation fault\nmartinx at floyd:~$ *lsb_release -ra*\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription: Ubuntu 11.04\nRelease: 11.04\nCodename: natty\n---\n\nThanks!\nThiago\n\n2011/9/22 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n\n> Hi!\n>\n>  When my network goes down and I close the Bitcoin, I see the following\n> message:\n>\n> ---\n> martinx at floyd:~$ ./bitcoin-0.4.0rc2/bin/32/bitcoin\n> connect: Network is unreachable\n>\n>\n> ************************\n> UNKNOWN EXCEPTION\n> bitcoin in CMyApp::OnUnhandledException()\n>\n> Segmentation fault\n> martinx at floyd:~$\n> ---\n>\n> Thanks,\n> Thiago\n>\n> 2011/9/22 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n>\n>> Hi John!\n>>\n>>  Thank you for your answer...\n>>\n>>  I have \"two kinds\" of address, the \"static address\", which I created\n>> myself for any personal reason, and the \"dinamic address\", which is the\n>> automatic generated address when I receive some Bitcoin amount, I label each\n>> one (the automatic created by the software) with something like \"DINAMIC-1\",\n>> \"DINAMIC-2\" and so on...\n>>\n>>  I use my \"dinamic address\" in a \"random\" way, following the moon phase...\n>> lol\n>>\n>>  My point is: I like to keep track of all my Bitcoin Address, they are all\n>> my...\n>>\n>>  Please, leave this feature alive, as a option, disabled by default.\n>>\n>>  I don't know why people fear about their own address... It is all under\n>> \"Receiving\" tab! There is nothing to fear about it.\n>>\n>>  ---\n>>\n>>  BTW, I think this option should have some explanations at the \"Options\n>> screen\", for example:\n>>\n>>  For increasing your anonymity, enable the \"Dinamic Bitcoin Address\"\n>> option and make sure to always use one new and different address for each\n>> transaction. And do not link each address with your person!\n>>\n>>  (X) Dynamic Bitcoin Address (a new Bitcoin Address will be created\n>> automatically for you, after each new received Bitcoin amount)\n>>\n>>  ---\n>>\n>>  Thank you so much!\n>>\n>> Best,\n>> Thiago\n>>\n>> 2011/9/22 John Smith <witchspace81 at gmail.com>\n>>\n>>>\n>>>\n>>> 2011/9/22 Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba <thiagocmartinsc at gmail.com>\n>>>\n>>>> Hi everybody!!\n>>>>\n>>>>  This is my first message here... I'm ThiagoCMC at bitcointalk...\n>>>>\n>>>>  Well, one of the features that I like most is that, every time I\n>>>> receive some Bitcoin amount, a new address appear at my\n>>>> \"AddressBook\"automatically, AND, I like to track it.\n>>>>\n>>>\n>>> Can I ask your rationale for this?\n>>>\n>>> From what I've noticed, most people's workflow is to create a new\n>>> receiving address for each new contact that sends them bitcoins (either for\n>>> every transaction, or they reuse the address for this person).  To make sure\n>>> that the address is labeled, they create it themselves and then give out the\n>>> generated address.\n>>>\n>>> They are utterly spooked by suddenly appearing unlabeled addresses, of\n>>> which they are unsure whether they are used, and which can never be removed.\n>>>\n>>> I'm fine with adding it back as an option but please leave it disabled by\n>>> default...\n>>>\n>>> JS\n>>>\n>>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110922/07ce02e5/attachment.html>", "summary": "User reports an error message when closing Bitcoin with network still online. Running Ubuntu 11.04 32 bits. Unknown exception and segmentation fault."}], "thread_summary": {"title": "0.4 Release Candidate 2", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Jeff Garzik", "Matt Corallo", "Gavin Andresen", "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba"], "messages_count": 9, "total_messages_chars_count": 14458, "convo_summary": "Bitcoin v0.4.00rc2 has been released with optimizations for database writes, transactions with many inputs, and fixes for potential issues with coinbase transactions. Some users like the feature where a new address appears in their \"AddressBook\" every time they receive Bitcoin, while others are spooked by it. A user reported an error message when closing Bitcoin with the network still online, causing a segmentation fault."}}, {"title": "[Bitcoin-development] Network status charts", "thread_messages": [{"author": "Mike Hearn", "date": "2011-09-13T12:53:25", "message_text_only": "These are now formally announced:\n\nhttps://bitcointalk.org/index.php?topic=43626.0\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110913/300d988a/attachment.html>", "summary": "Announcement made on Bitcointalk.org regarding formal announcement of undisclosed information. No further details provided."}], "thread_summary": {"title": "Network status charts", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn"], "messages_count": 1, "total_messages_chars_count": 265}}, {"title": "[Bitcoin-development] Project status", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-13T14:43:27", "message_text_only": "0.4 RELEASE\n\nBitcoin version 0.4 release candidate 2 looks stable; I've been\nrunning a slightly-modified version of it on the Faucet website with\nno issues for a couple of days now, and am not aware of any\nshow-stopper issues.\n\nI built and uploaded OSX binaries to github:\n  https://github.com/bitcoin/bitcoin/downloads\n\nWindows and Linux binaries will appear as soon as our \"gitian-capable\"\nbuilders get a minute to create them (Jeff and Matt have been busy\nwith real life or their day jobs).\n\nI'd like to switch from distributing binaries on SourceForge to\ndistributing them on GitHub, since GitHub supports https downloads.\n\n\nNEXT RELEASE\n\nIf you have patches waiting to be pulled, now would be a good time to\nrebase them; I expect minimal-to-no changes between release candidate\n2 and the final 0.4 release.\n\nAnd, if you haven't already, write up a little test plan and/or add\nsome unit tests.\n\nThe big planned feature for next release is switching from wxWidgets\nto qt for the GUI client.\n\nON THE RADAR\n\nI'm going to start separate discussions about a few need-deep-thinking issues:\n\n1) There is a bug/design flaw in bitcoin's difficulty adjustment\nalgorithm. More generally, there have been nagging issues surrounding\nhow bitcoin handles time that I think need to be addressed.\n\n2) I'm going to submit pull requests for an implementation of the\n\"don't talk to misbehaving peers\" idea. That should proactively\nprevent a whole swath of potential denial-of-service attacks, but if I\ngot it wrong it could be very bad for the network.\n\n3) I'd really like to come to consensus on one or more\n'multi-signature' standard transactions to enable much better wallet\nbackup and security.\n\nLets talk about those three issues in separate threads.\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin version 0.4 release candidate 2 is stable, with OSX binaries available on GitHub, and Windows and Linux binaries to follow. The next release will feature a switch from wxWidgets to qt for the GUI client. Discussions will be held on issues with the difficulty adjustment algorithm, preventing denial-of-service attacks, and multi-signature standard transactions."}, {"author": "Luke-Jr", "date": "2011-09-13T16:40:23", "message_text_only": "On Tuesday, September 13, 2011 10:43:27 AM Gavin Andresen wrote:\n> 3) I'd really like to come to consensus on one or more\n> 'multi-signature' standard transactions to enable much better wallet\n> backup and security.\n\nMore important in this area, IMO, is support for deterministic keychains in \nwallets. Type 2, according to gmaxwell's original spec, seems pretty ideal, \nand significantly improves security for many use cases. Since it allows a \nwallet to contain a public keychain without the matching private keychain, \nwebservers, POS, and other services can be provisioned only with the keychain \nrequired to generate/access infinite public keys, and without the private \nkeyroot needed to spend them.\n\nThe ideal scenario in this regard, as I see it, is this:\n- Webserver wallets are provisioned with multiple public keychains (one per \nwebserver), and configured to use a specific one for getnewaddress/etc. By \nprovisioning them with *all* the public keychains, their listtransactions/etc \ncan see the transactions sent to other webservers, necessary to show \nconfirmations to the end user and such.\n- Business keeps a locked-down *offline* wallet with the private keychains for \nall the forementioned public keychains. Only this wallet has the information \nrequired to spend the income. The wallet is encrypted, and can only be \naccessed by staff with the proper position/authority to authorize expenses.\n- A third wallet is used by staff to prepare expense transactions. It keeps \ntrack of locking coins it knows are in the process of being spent, and any \nstaff member can create new ones. Once created, they must submit the \ntransaction to a staff member with the proper authority to bring it to the \noffline transaction-signing wallet (on a USB key), where it is signed, and \nreturned to this third wallet.\n\n\nAnother feature that needs some attention is signmessage. It can be used to \nsend a transaction id/summary to a specified email address signed by the \nsending key of the same transaction (these can be added to the send-money \nGUI). This would allow merchants to publish a single payment address and still \nbe able to verify which customers sent payment.", "summary": "Gavin Andresen proposes standard multi-signature transactions for better wallet backup and security, and suggests using deterministic keychains and signmessage for improved security."}, {"author": "Douglas Huff", "date": "2011-09-13T16:48:58", "message_text_only": "On Sep 13, 2011 11:40 AM, \"Luke-Jr\" <luke at dashjr.org> wrote:\n> Once created, they must submit the\n> transaction to a staff member with the proper authority to bring it to the\n> offline transaction-signing wallet (on a USB key), where it is signed, and\n> returned to this third wallet.\n\nI agreed up to this point. Private keys should not be stored on nand. Please\nlook in to the data recovery clusterfuck nand creates when concerning\nsensitive data.\n\nIt is close to impossible to reliably delete such data, moreso on usb keys\nthan ssd, short of absolute physical destruction and noone should be\nrecommending this. Ever.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110913/b0a35ffa/attachment.html>", "summary": "A professional warns against storing private keys on USB keys due to the difficulty of reliably deleting sensitive data."}, {"author": "Luke-Jr", "date": "2011-09-13T16:53:40", "message_text_only": "On Tuesday, September 13, 2011 12:48:58 PM Douglas Huff wrote:\n> On Sep 13, 2011 11:40 AM, \"Luke-Jr\" <luke at dashjr.org> wrote:\n> > Once created, they must submit the\n> > transaction to a staff member with the proper authority to bring it to\n> > the offline transaction-signing wallet (on a USB key), where it is\n> > signed, and returned to this third wallet.\n> \n> I agreed up to this point. Private keys should not be stored on nand.\n> Please look in to the data recovery clusterfuck nand creates when\n> concerning sensitive data.\n\nI didn't recommend storing private keys on NAND. The USB stick would contain \nonly the transaction that it being approved, and the offline-signing-wallet \nwould sign it. The USB stick then contains only the signed transaction to be \nreturned to an online node. At no time does it contain keys.", "summary": "A discussion about the security of storing private keys on a USB key for offline transaction signing, with a recommendation to not store keys on NAND."}], "thread_summary": {"title": "Project status", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Gavin Andresen", "Douglas Huff"], "messages_count": 4, "total_messages_chars_count": 5566, "convo_summary": "Bitcoin version 0.4 release candidate 2 is stable, with OSX binaries available on GitHub. The next release will feature a switch from wxWidgets to qt for the GUI client. Discussions will be held on issues with the difficulty adjustment algorithm, preventing denial-of-service attacks, and multi-signature standard transactions. Private keys should not be stored on USB keys due to the difficulty of reliably deleting sensitive data."}}, {"title": "[Bitcoin-development] Difficulty adjustment / time issues", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-13T15:06:37", "message_text_only": "Background:\n\nTimejacking:\n  http://culubas.blogspot.com/2011/05/timejacking-bitcoin_802.html\n\nAnd a recent related exploit launched against the low-difficulty\nalternative chains:\n  https://bitcointalk.org/index.php?topic=43692.msg521772#msg521772\n\n\nSeems to me there are two fundamental problems:\n\n1) Bitcoin should be overlapping the ranges of block timestamps that\nit uses to calculate difficulty adjustments.\n\n2) Bitcoin's \"what time is it\" code is kind of a hack.\n\n\nFixing (1) would mean a potential block-chain split; before\nconsidering doing that I'd like to consider second-best solutions.\n\nFixing (2) is easier; incorporating a ntp library and/or simply\nremoving the bitcoin mining code from the client but requiring pools\nand miners to have accurate-to-within-a-minute system clocks (or their\nblocks will be \"discouraged\") seems reasonable to me. If you want to\nproduce blocks that the rest of the network will accept, run ntp on\nyour system.\n\nI THINK that fixing (2) will make (1) a non-issue-- if miners can't\nmess around with block times very much then it will be very difficult\nfor them to manipulate the difficulty for their benefit.\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin's \"timejacking\" vulnerability allows miners to manipulate block timestamps, leading to difficulty adjustment issues. Fixing it requires addressing the \"what time is it\" code."}, {"author": "Vladimir Marchenko", "date": "2011-09-13T15:15:28", "message_text_only": "> 2) Bitcoin's \"what time is it\" code is kind of a hack.\n...\n> Fixing (2) is easier; incorporating a ntp library and/or simply\n> removing the bitcoin mining code from the client but requiring pools\n> and miners to have accurate-to-within-a-minute system clocks (or their\n> blocks will be \"discouraged\") seems reasonable to me. If you want to\n> produce blocks that the rest of the network will accept, run ntp on\n> your system.\n...\n> --\n> Gavin Andresen\n>\n\nAs a miner I fully support route (2) and do not think that this would\ncause any serious issues or discontent among miners. Most miners\nsurely are running ntpd already. Those who mess with the clock\nintentionally will have to play ball.\n\n--\nVladimir\n-\nhttp://bitcoin.org.uk/forums - clean and moderated bitcoin forum", "summary": "Bitcoin's code for time synchronization is a hack, but fixing it by incorporating an ntp library or removing mining code seems reasonable to experts."}, {"author": "John Smith", "date": "2011-09-13T15:54:04", "message_text_only": "> Fixing (2) is easier; incorporating a ntp library and/or simply\n> removing the bitcoin mining code from the client but requiring pools\n> and miners to have accurate-to-within-a-minute system clocks (or their\n> blocks will be \"discouraged\") seems reasonable to me.\n\n\nIncorporating NTP seems overkill. Most OSes come with NTP support integrated\nthese days (even XP did?), there is no excuse to not be running it,\nespecially on a server.\n\nIf you want to\n> produce blocks that the rest of the network will accept, run ntp on\n> your system.\n>\n\nRequiring it for miners sounds very reasonable.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110913/1fa29c73/attachment.html>", "summary": "Incorporating NTP or removing bitcoin mining code from the client but requiring accurate system clocks for miners seems reasonable."}, {"author": "kjj", "date": "2011-09-13T16:24:35", "message_text_only": "Gavin Andresen wrote:\n> Background:\n>\n> Timejacking:\n>    http://culubas.blogspot.com/2011/05/timejacking-bitcoin_802.html\n>\n> And a recent related exploit launched against the low-difficulty\n> alternative chains:\n>    https://bitcointalk.org/index.php?topic=43692.msg521772#msg521772\n>\n>\n> Seems to me there are two fundamental problems:\n>\n> 1) Bitcoin should be overlapping the ranges of block timestamps that\n> it uses to calculate difficulty adjustments.\n>\n> 2) Bitcoin's \"what time is it\" code is kind of a hack.\n>\n>\n> Fixing (1) would mean a potential block-chain split; before\n> considering doing that I'd like to consider second-best solutions.\n>\n> Fixing (2) is easier; incorporating a ntp library and/or simply\n> removing the bitcoin mining code from the client but requiring pools\n> and miners to have accurate-to-within-a-minute system clocks (or their\n> blocks will be \"discouraged\") seems reasonable to me. If you want to\n> produce blocks that the rest of the network will accept, run ntp on\n> your system.\n>\n> I THINK that fixing (2) will make (1) a non-issue-- if miners can't\n> mess around with block times very much then it will be very difficult\n> for them to manipulate the difficulty for their benefit.\n>\nThe first thing I always do when I grab the source for my colo server is \npatch util.cpp so that GetAdjustedTime() returns GetTime() with no \nadjustment.  But I'm the kind of guy that buys special GPS receivers \nbecause stratum 2 isn't low enough and occasionally checks ebay for \ncaesium fountains.\n\nNTP has been around for long enough now that there is no reason for the \nclient to screw with the clock.  If the client sees different times on \nthe network, it should issue a warning, and if it is off too far, it \nshould give an error and fail to run (and/or peers should reject it).\n\nBut that doesn't solve the whole problem, because the block timestamp \nchecking is based on the assumption that the node is looking at the \nbitcoin clock rather than the, ahem, real clock.  If we change the idea \nof network time to NTP, we will then need to write (and test!) new block \ntimestamp rules to account for the new assumptions.\n\nI'm not sure that just fixing item 2 is going to stop the attacks found \nby ArtForz, et al.  Some of the attacks Art pointed out are particularly \nbad because they change the incentive structure of the system, at least \nin the short term.  We need to flip that back around ASAP.\n\nAlso, this is going to cause problems for at least one pool operator.", "summary": "Bitcoin's timejacking and related exploits can be fixed by overlapping block timestamps and using NTP, but new block timestamp rules are needed."}, {"author": "Gavin Andresen", "date": "2011-09-14T14:45:36", "message_text_only": "> But that doesn't solve the whole problem, because the block timestamp\n> checking is based on the assumption that the node is looking at the bitcoin\n> clock rather than the, ahem, real clock. \u00a0If we change the idea of network\n> time to NTP, we will then need to write (and test!) new block timestamp\n> rules to account for the new assumptions.\n\nWhy?\n\nThe block timestamp rules currently give HOURS of wiggle-room for\ntimestamps. We can't change those rules without risking a chain split.\n\nHere's a thumbnail sketch of what I'm thinking:\n\nWhen new tip-of-chain blocks are received, IF their timestamp is\nunreasonable with respect to system time and the previous block's\ntimestamp, then add them to a 'discouraged' list.  (but follow the\ncurrent rules for outright rejecting blocks based on timestamps too\nfar in the future or past)\n\nModify the getwork code to build on the second-from-tip block if the\nfirst-on-tip block is on the discouraged list.\n\nAssuming a majority of pools/miners adopt the \"discourage blocks with\nstale timestamps\" rule, that should squash any incentive for cartels\nto try to start playing with difficulty-- you would have to have 50+%\npower to start, or you risk producing mostly orphan blocks.\n\n> Also, this is going to cause problems for at least one pool operator.\n\nI'll trade more security for \"make at least one pool operator have to\ndo some work\" any day.\n\n-- \n--\nGavin Andresen", "summary": "Changing the network time to NTP would require new block timestamp rules, risking a chain split. Discouraging blocks with unreasonable timestamps could increase security."}, {"author": "Luke-Jr", "date": "2011-09-14T15:43:20", "message_text_only": "On Wednesday, September 14, 2011 10:45:36 AM Gavin Andresen wrote:\n> The block timestamp rules currently give HOURS of wiggle-room for\n> timestamps. We can't change those rules without risking a chain split.\n\nAnd those hours of wiggle-room are not enough to cause a problem.\nThe problem only comes in (AFAIK) when the existing rules are *not* enforced.\n\n> Assuming a majority of pools/miners adopt the \"discourage blocks with\n> stale timestamps\" rule, that should squash any incentive for cartels\n> to try to start playing with difficulty-- you would have to have 50+%\n> power to start, or you risk producing mostly orphan blocks.\n\nAs this is against pools/miners' interests, and doesn't seem to solve any real \nproblems, I'm going to discourage its adoption if it ever gets done.", "summary": "Changing block timestamp rules could cause a chain split, but enforcing rules to discourage blocks with stale timestamps could prevent cartel manipulation."}, {"author": "Christian Decker", "date": "2011-09-14T16:06:08", "message_text_only": "Am I the only one to think putting pools at a disadvantage is actually\ndesirable?\nBack when pools started to appear we all had huge reservations about putting\nso much control into the hands of a few pool operators, but nowadays it\nseems that having pool operators control a vast majority of the\ncomputational power is desired.\nI do like pools (I use them myself), but we should put the security of the\nprotocol in first place and then only think about individual players.\nAlways remember that the problems pool operators encounter are likely also\nthe ones of a potential attacker that tries to accumulate 50%+ of the\nnetwork power :-)\n\nRegards,\nChris\nOn Wed, Sep 14, 2011 at 5:43 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Wednesday, September 14, 2011 10:45:36 AM Gavin Andresen wrote:\n> > The block timestamp rules currently give HOURS of wiggle-room for\n> > timestamps. We can't change those rules without risking a chain split.\n>\n> And those hours of wiggle-room are not enough to cause a problem.\n> The problem only comes in (AFAIK) when the existing rules are *not*\n> enforced.\n>\n> > Assuming a majority of pools/miners adopt the \"discourage blocks with\n> > stale timestamps\" rule, that should squash any incentive for cartels\n> > to try to start playing with difficulty-- you would have to have 50+%\n> > power to start, or you risk producing mostly orphan blocks.\n>\n> As this is against pools/miners' interests, and doesn't seem to solve any\n> real\n> problems, I'm going to discourage its adoption if it ever gets done.\n>\n>\n> ------------------------------------------------------------------------------\n> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n> Learn about the latest advances in developing for the\n> BlackBerry&reg; mobile platform with sessions, labs & more.\n> See new tools and technologies. Register for BlackBerry&reg; DevCon today!\n> http://p.sf.net/sfu/rim-devcon-copy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110914/7cbfb95f/attachment.html>", "summary": "The security of the Bitcoin protocol should be the top priority, even if it means putting pools at a disadvantage. Pool operators' problems are also potential attackers' problems."}, {"author": "Aidan Thornton", "date": "2011-09-14T19:52:49", "message_text_only": "On Wed, Sep 14, 2011 at 3:45 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> Modify the getwork code to build on the second-from-tip block if the\n> first-on-tip block is on the discouraged list.\n>\n> Assuming a majority of pools/miners adopt the \"discourage blocks with\n> stale timestamps\" rule, that should squash any incentive for cartels\n> to try to start playing with difficulty-- you would have to have 50+%\n> power to start, or you risk producing mostly orphan blocks.\nOf course, if only a small percentage of mining power adopts this\nscheme, everyone that does so will presumably be harming themselves by\ndoing so since they're essentially increasing the odds that the next\nblock they mine will become invalid...", "summary": "Proposal to modify getwork code to discourage blocks with stale timestamps. Majority adoption would prevent cartels from manipulating difficulty."}, {"author": "Gregory Maxwell", "date": "2011-09-14T20:09:00", "message_text_only": "On Wed, Sep 14, 2011 at 3:52 PM, Aidan Thornton <makosoft at gmail.com> wrote:\n> Of course, if only a small percentage of mining power adopts this\n> scheme, everyone that does so will presumably be harming themselves by\n> doing so since they're essentially increasing the odds that the next\n> block they mine will become invalid...\n\nPerhaps better thing to do is to also delay the _forwarding_ of these\nblocks _and_ blocks that extend them, until extended one more time.\n\nThis policy, if adopted by the forwarding nodes (who really shouldn't\ncare for much other than the overall health of bitcoins) puts miners\nat risk if they don't run the augmented extension policy.\n\n\nThough I generally agree with Luke that we should just fix the root\ncause even though it forks the chain. Not for his reasons (I don't\ngive a crap about the burden on _one_ pool operator\u2014 the rest cope\nwith bitcoind scaling fine without excessive dependance on ntime\nrolling),  but simply because not fixing it makes the bitcoin security\nmodel harder to explain and analyze.\n\n\"Here is a vulnerability, but its offset by this workaround\" is\ninferior to \"the system is secure against this kind of attack\".", "summary": "Delay forwarding of blocks and extensions to increase Bitcoin's overall health. Miners at risk if they don't adopt this policy. Fix root cause to maintain security."}, {"author": "Gavin Andresen", "date": "2011-09-14T20:28:01", "message_text_only": "> Perhaps better thing to do is to also delay the _forwarding_ of these\n> blocks _and_ blocks that extend them, until extended one more time.\n\nExcellent idea, that gets the incentives right.\n\nRE: fixing the root cause with a forking change:\n\nWhat do other people think?  I think it is too high risk for too\nlittle benefit and shouldn't be done until we have a really compelling\nreason to introduce a forking change.\n\nThe first really compelling reason I can think of is removing the\nMAX_BLOCK_SIZE limit (but does something clever to prevent the\nrogue-miner-sends-you-a-valid-10Terabyte-block attack).\n\n-- \n--\nGavin Andresen", "summary": "Delay forwarding of blocks and their extensions until extended one more time to get the incentives right. Forking change is high risk for little benefit."}, {"author": "Alex Waters", "date": "2011-09-14T21:36:03", "message_text_only": "On Wed, Sep 14, 2011 at 4:28 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> What do other people think? \u00a0I think it is too high risk for too\n> little benefit and shouldn't be done until we have a really compelling\n> reason to introduce a forking change.\n\nCould we bundle this and potential future blockchain-splitting changes\n- to implement them in a major release (down the road)? Or save them\nfor when they are very necessary?\n\nTL;DR shelf it until needed, have it written just in case.\n\n-Alex", "summary": "Gavin Andresen suggests that forking changes should not be introduced until there is a compelling reason, and should be saved for when they are necessary."}, {"author": "Gregory Maxwell", "date": "2011-09-14T21:51:30", "message_text_only": "On Wed, Sep 14, 2011 at 5:36 PM, Alex Waters <ampedal at gmail.com> wrote:\n> On Wed, Sep 14, 2011 at 4:28 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>\n>> What do other people think? \u00a0I think it is too high risk for too\n>> little benefit and shouldn't be done until we have a really compelling\n>> reason to introduce a forking change.\n>\n> Could we bundle this and potential future blockchain-splitting changes\n> - to implement them in a major release (down the road)? Or save them\n> for when they are very necessary?\n>\n> TL;DR shelf it until needed, have it written just in case.\n\nI'm generally opposed to doing \"too much\" at once in this kind of change.\n\nSome changes, like this one, are completely uncontroversial (except\nsome argument about having fork causing change at all) where some have\nmore complicated social/economic impacts (the block size being among\nthem, though probably not the worst).\n\nMoreover, the longer we go between such changes the more the cost is\nperceived to be infinite. Better to take one per year, with six months\nof gap between implementation, and give everyone the right\nexpectations than to have prolonged arguments due to our inexperience\nthat only get trumped by emergency changes.\n\nGeneral network health and user security _requires_ periodic upgrades\nin any case, and will for the foreseeable future. The whole notion\nthat old versions will _stop working_ would be a pretty good thing at\nthis point in bitcoin's existence, judging by the high number of\npre-.24 listeners still reported.", "summary": "Discussion on implementing a forking change in Bitcoin. Suggestion to save it until necessary and implement it in a major release. Periodic upgrades are necessary for network health and user security."}, {"author": "theymos", "date": "2011-09-14T22:07:40", "message_text_only": "On Wednesday, September 14, 2011 5:51 PM, \"Gregory Maxwell\" <gmaxwell at gmail.com> wrote:\n> General network health and user security _requires_ periodic upgrades\n> in any case, and will for the foreseeable future. The whole notion\n> that old versions will _stop working_ would be a pretty good thing at\n> this point in bitcoin's existence, judging by the high number of pre-\n> .24 listeners still reported.\n\nBackward-compatibility is valuable. I believe version 0.1 will still\nmore or less work on the current network. This is a real selling point\nfor Bitcoin: the code is solid enough that even 2-year-old clients are\nstill working.", "summary": "Upgrading Bitcoin periodically is necessary for network health and user security. However, backward-compatibility is valuable, and even 2-year-old clients still work."}, {"author": "Luke-Jr", "date": "2011-09-14T23:01:54", "message_text_only": "On Wednesday, September 14, 2011 4:09:00 PM Gregory Maxwell wrote:\n> Though I generally agree with Luke that we should just fix the root\n> cause even though it forks the chain.\n\nI don't support this, unless all other chain-forking-needed changes are made \nat the same time. I do point out that changing the time rules *does not help*.\n\n> Not for his reasons (I don't give a crap about the burden on _one_ pool\n> operator\u2014 the rest cope with bitcoind scaling fine without excessive\n> dependance on ntime rolling),\n\nThe rest don't generate rewards immediately as the same block being mined. \nThey either eat the loss of invalid blocks, or wait for 100+ confirmations \nbefore paying. Also, restricting the time rules basically breaks miners \nwithout rollntime support (such as Phoenix).", "summary": "Gregory Maxwell disagrees with Luke's suggestion to fix the root cause of chain-forking, unless all other changes are made simultaneously. Changing time rules does not help and restricting them breaks miners without rollntime support."}, {"author": "Luke-Jr", "date": "2011-09-13T16:48:29", "message_text_only": "On Tuesday, September 13, 2011 11:06:37 AM Gavin Andresen wrote:\n> Fixing (2) is easier; incorporating a ntp library and/or simply\n> removing the bitcoin mining code from the client but requiring pools\n> and miners to have accurate-to-within-a-minute system clocks (or their\n> blocks will be \"discouraged\") seems reasonable to me. If you want to\n> produce blocks that the rest of the network will accept, run ntp on\n> your system.\n\nThis is not currently reasonable. Rolling extranonce is not efficient, and \nusing it to generate work for 400+ GH/s worth of miners every new block \n(longpoll) can easily take seconds. Noncerange helps a little, but has poor \nsupport presently, and still requires an otherwise-unique work per 4 GH/s.\nThat only leaves pools with the time header to play with. Furthermore, within-\na-minute accuracy basically forces all miners to rollntime-- I'm not against \nthis result, but it does mean many miners and pools will be left out in the \ncold.\n\n> I THINK that fixing (2) will make (1) a non-issue-- if miners can't\n> mess around with block times very much then it will be very difficult\n> for them to manipulate the difficulty for their benefit.\n\nMiners already have very limited area to mess around with block times.\nMy understanding of these attacks is that they somehow bypass the limitations \nin place.", "summary": "The proposal to fix Bitcoin's vulnerability to timestamp manipulation involves incorporating an NTP library and removing mining code from the client."}, {"author": "theymos", "date": "2011-09-14T21:45:33", "message_text_only": "A better retarget strategy might be to use the real average time\nbetween all of the blocks in the interval so that no blocks are\ntreated specially in the calculation. I agree that this is not\nimportant enough to fork the chain over, though. An attacker would\nhave to maintain control for a *very* long time because of Bitcoin's\nlong retarget interval. (Maybe this kind of thing is why the retarget\ninterval is so long?)\n\nI don't like requiring block times to be within minutes of reality. It\nwould be fine if only miners had to keep accurate time, but clients will\nalso need to have good time in order to see if a block will be\ndiscouraged. A discouraged block should not count toward confirmations.\nIf relays will also discourage blocks, then they'll need accurate\ntime as well.\n\nThe network should not be allowed to adjust your time by more than 40\nminutes to prevent the timejacking attack, but I don't see a problem\nwith the other time rules. Time is only used for retargets and LockTime,\nso it only needs to be generally accurate.", "summary": "A better retarget strategy for Bitcoin would be to use the real average time between all blocks, but it's not worth forking the chain over. Accurate time is important for discouraging blocks and should not be adjusted by more than 40 minutes."}], "thread_summary": {"title": "Difficulty adjustment / time issues", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Vladimir Marchenko", "Luke-Jr", "kjj", "Aidan Thornton", "Alex Waters", "theymos", "Gregory Maxwell", "Gavin Andresen", "Christian Decker"], "messages_count": 16, "total_messages_chars_count": 18054, "convo_summary": "Experts discuss Bitcoin's vulnerability to timestamp manipulation, with suggestions including incorporating an NTP library, removing mining code, and enforcing rules to discourage blocks with stale timestamps. However, changing block timestamp rules could cause a chain split, and forking changes should only be introduced when necessary. Accurate time is important for discouraging blocks, and periodic upgrades are necessary for network health and user security."}}, {"title": "[Bitcoin-development] Request review: drop misbehaving peers", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-15T01:57:00", "message_text_only": "I'm looking for review of this pull request:\n  https://github.com/bitcoin/bitcoin/pull/517\n\nThe big idea: if a peer is sending you obviously wrong information,\npunish it by maybe dropping your connection to it, and ban it's IP\naddress so it cannot immediately re-connect.\n\nThe probability of dropping the connection, and the length of the ban,\ndepend on how how potentially wasteful/damaging the peer is behaving.\nSo sending an extra 'version' message is a minor transgression that is\nusually tolerated, sending a more-than MAX_BLOCK_SIZE block is a major\ntransgression that gets the peer disconnected immediately.\n\nDetailed how-it-works, using \"I got a version message I wasn't\nexpecting\" as the specific example:\n\nGetting an unexpected version message from a peer increases that\npeer's 'misbehaving' score by 10, and (assuming that is the peer's\nfirst bad behavior) gives it a 10% chance of being disconnected.  If\nit is disconnected, then that peer's IP address is banned from\nconnecting for a couple of hours.  If it is not disconnected, then\nnothing happens unless the peer misbehaves again; if it does, then its\nchances of being disconnected go up, and the length of time it will be\nbanned increases.\n\nMisbehavior/ban information is stored only in memory, and information\nabout misbehaving peers is never broadcast. Also, peers that are\ndisconnected/banned are just dropped, there is no warning or reason\nsent.\n\nI think this will eliminate a lot of potential denial-of-service\nattacks, and could be a good framework for responding to other\npotential attacks. \"We\" should still look through the code and limit\nthe potential size of any data structures that an attacker might\ntarget (transaction pool, orphan block pool); the DoSprevention\nchanges are meant to make it harder for an attacker to stay connected\nlong enough to pull off an attack.\n\nThe danger is that I got something wrong; what if an attacker can\nleverage the DoSprevention code to split or shatter the network?\nHere's my thinking on that, please help check my work:\n\n+ I'm relying on TCP to prevent IP address spoofing (otherwise an\nattacker could force you to disconnect from your peers by pretending\nto be them and sending you a bad block).\n\n+ Peers are only penalized for sending messages that won't, and\nshouldn't, get relayed. So an attacker shouldn't be able to poison the\nnetwork with a bad message that is propogated and then causes\neverybody to disconnect from everybody else.\n\n+ I specifically do not punish peers for relaying what look like\ndouble-spend transactions. If I did, then an attacker could try to\nsegment the network into two pieces by broadcasting a series of\ndouble-spends from two halves of the network, and waiting until the\nnodes \"in the middle\" disconnected/banned across the 'seam'.\n\nSo: please let me know if or how I'm being an idiot.\n\n-- \n--\nGavin Andresen", "summary": "The pull request proposes a system to punish peers sending wrong information by dropping the connection and banning their IP address. Misbehavior information is stored in memory, and peers are not warned or given a reason for disconnection. The system aims to prevent potential denial-of-service attacks and could be a framework for responding to other attacks. The danger is that an attacker could leverage the system to split or shatter the network, but the author believes that relying on TCP, penalizing only non-relayable messages, and not punishing peers for double-spends should prevent this."}, {"author": "Luke-Jr", "date": "2011-09-15T02:06:37", "message_text_only": "On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:\n> I'm looking for review of this pull request:\n>   https://github.com/bitcoin/bitcoin/pull/517\n\n\"Non-standard\" transactions, or those with \"insufficient\" fees should not be \npenalised. These are properly relay/miner policy decisions, not protocol \nviolations, and should be made more easily configurable, not punished for \nconfiguration.", "summary": "A request for review of a pull request regarding \"non-standard\" transactions and insufficient fees not being penalized but rather made configurable."}, {"author": "Christian Decker", "date": "2011-09-15T10:43:20", "message_text_only": "I'd be happy with a sort of BitTorrent like snubbing, and dropping in\nextreme cases.\nSharing blacklist decisions would be dangerous. We could even extend the\nprotocol to include some sort of choking/unchoking in order to warn peers\nthat we might drop him if he continues to misbehave.\n\nIn general I think that we have to be careful in what we consider\nmisbehaving, it should be really conservative to begin with, and extend the\nrules over time. Making them too restrictive might make future development\ndifficult, not to speak of alternative clients.\n\nRegards,\nChris\n\nOn Thu, Sep 15, 2011 at 4:06 AM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:\n> > I'm looking for review of this pull request:\n> >   https://github.com/bitcoin/bitcoin/pull/517\n>\n> \"Non-standard\" transactions, or those with \"insufficient\" fees should not\n> be\n> penalised. These are properly relay/miner policy decisions, not protocol\n> violations, and should be made more easily configurable, not punished for\n> configuration.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Doing More with Less: The Next Generation Virtual Desktop\n> What are the key obstacles that have prevented many mid-market businesses\n> from deploying virtual desktops?   How do next-generation virtual desktops\n> provide companies an easier-to-deploy, easier-to-manage and more affordable\n> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/3c9778ee/attachment.html>", "summary": "Chris suggests a BitTorrent-like snubbing and dropping protocol for misbehaving peers, but warns against making the rules too restrictive."}, {"author": "kjj", "date": "2011-09-15T12:56:24", "message_text_only": "Luke-Jr wrote:\n> On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:\n>> I'm looking for review of this pull request:\n>>    https://github.com/bitcoin/bitcoin/pull/517\n> \"Non-standard\" transactions, or those with \"insufficient\" fees should not be\n> penalised. These are properly relay/miner policy decisions, not protocol\n> violations, and should be made more easily configurable, not punished for\n> configuration.\n>\n>\nA few non-standard transactions are probably legitimate.  A whole bunch \nof them are probably not.  I would think that assigning a point or two \nof badness to a peer sending one is pretty reasonable, with the \nunderstanding that we would need to adjust that as the network evolves.", "summary": "Luke-Jr argues that \"non-standard\" transactions with insufficient fees should not be penalized as they are policy decisions, not protocol violations."}, {"author": "Luke-Jr", "date": "2011-09-15T15:36:44", "message_text_only": "On Thursday, September 15, 2011 8:56:24 AM kjj wrote:\n> Luke-Jr wrote:\n> > On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:\n> >> I'm looking for review of this pull request:\n> >>    https://github.com/bitcoin/bitcoin/pull/517\n> > \n> > \"Non-standard\" transactions, or those with \"insufficient\" fees should not\n> > be penalised. These are properly relay/miner policy decisions, not\n> > protocol violations, and should be made more easily configurable, not\n> > punished for configuration.\n> \n> A few non-standard transactions are probably legitimate.  A whole bunch\n> of them are probably not.  I would think that assigning a point or two\n> of badness to a peer sending one is pretty reasonable, with the\n> understanding that we would need to adjust that as the network evolves.\n\nNo. There is no such thing as \"non-standard transactions\" really; it is simply \n\"transactions outside of the bounds that I as a user/miner will relay/accept\". \nIt is perfectly legitimate for other users/miners to relay/accept transactions \nmore liberally. By penalising for transactions falling outside of your \n*personal policies*, you would end up banning many legitimate nodes.", "summary": "Penalizing \"non-standard\" transactions or those with insufficient fees is not fair. It should be configurable, not punished, as it could ban legitimate nodes."}, {"author": "kjj", "date": "2011-09-15T16:04:37", "message_text_only": "Luke-Jr wrote:\n> On Thursday, September 15, 2011 8:56:24 AM kjj wrote:\n>> Luke-Jr wrote:\n>>> On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:\n>>>> I'm looking for review of this pull request:\n>>>>     https://github.com/bitcoin/bitcoin/pull/517\n>>> \"Non-standard\" transactions, or those with \"insufficient\" fees should not\n>>> be penalised. These are properly relay/miner policy decisions, not\n>>> protocol violations, and should be made more easily configurable, not\n>>> punished for configuration.\n>> A few non-standard transactions are probably legitimate.  A whole bunch\n>> of them are probably not.  I would think that assigning a point or two\n>> of badness to a peer sending one is pretty reasonable, with the\n>> understanding that we would need to adjust that as the network evolves.\n> No. There is no such thing as \"non-standard transactions\" really; it is simply\n> \"transactions outside of the bounds that I as a user/miner will relay/accept\".\n> It is perfectly legitimate for other users/miners to relay/accept transactions\n> more liberally. By penalising for transactions falling outside of your\n> *personal policies*, you would end up banning many legitimate nodes.\nIt is certainly true that standardness is an artificial construct that \nonly has meaning to this particular implementation of the software, but \nno meaning in the context of the protocol or the system as a whole.\n\nOn the other hand, the vast, vast majority of all transactions follow a \nparticular pattern.  If someone gives you one that doesn't match the \nstandard pattern, you might be a little suspicious, but it is no big \ndeal.  But, if they emit dozens or hundreds, it is hardly unreasonable \nto disconnect them until you figure out what's going on.", "summary": "Luke-Jr argues that penalizing \"non-standard\" transactions or those with insufficient fees is not fair, as it is a policy decision, not a protocol violation. However, Gavin Andresen believes that assigning a point or two of badness to a peer sending one is reasonable."}, {"author": "solar", "date": "2011-09-15T16:41:05", "message_text_only": "I don't think that any kind of peer disconnection should be present in the reference client implementation.  This is a lot like using packet filters and stateful firewalls - they are implemented based on local policy and they require constant tweaking because they always cause problems when some change in usage dictates allowing things that weren't allowed before.  Essentially every new service, protocol (or creative use of an existing protocol) needs to be 'opened up' so it's a hassle to change it each time.\n\nPerhaps there is a use for this in helping implement local policy but even something that's considered a 'liberal' filtering rule today will eventually be in the way of something legitimate and will need to be adjusted.  It is not possible to just adjust this network wide when and adjustment needs to be created, so any type of built-in filtering is limiting to future innovation.\n\nMaybe this type of thing would be better implemented in a separate bitcoin proxy - much like how a firewall can be placed between a router and network.  All traffic is legitimate to a router (bitcoind) if it's formatted correctly and can be forwarded, but the firewall can implement local policy.  The problem with providing this out-of-the-box is that even in the case of internet traffic, they are often misused and configured too restrictively so they end up causing service problems for the users behind them.\n\nI think the idea is good, in that we need a way to filter out things we consider bad, but I don't think it is the job of the bitcoin client.  There are tons of tunable things and people will want to tweak them - what is 'a lot' to me might be nothing to someone else.  People's policies will differ greatly as you can see with everything else on the internet.\n\n\nLaszlo Hanyecz\nsolar at heliacal.net\n\n\nOn Sep 15, 2011, at 4:04 PM, kjj wrote:\n\n> Luke-Jr wrote:\n>> On Thursday, September 15, 2011 8:56:24 AM kjj wrote:\n>>> Luke-Jr wrote:\n>>>> On Wednesday, September 14, 2011 9:57:00 PM Gavin Andresen wrote:\n>>>>> I'm looking for review of this pull request:\n>>>>>    https://github.com/bitcoin/bitcoin/pull/517\n>>>> \"Non-standard\" transactions, or those with \"insufficient\" fees should not\n>>>> be penalised. These are properly relay/miner policy decisions, not\n>>>> protocol violations, and should be made more easily configurable, not\n>>>> punished for configuration.\n>>> A few non-standard transactions are probably legitimate.  A whole bunch\n>>> of them are probably not.  I would think that assigning a point or two\n>>> of badness to a peer sending one is pretty reasonable, with the\n>>> understanding that we would need to adjust that as the network evolves.\n>> No. There is no such thing as \"non-standard transactions\" really; it is simply\n>> \"transactions outside of the bounds that I as a user/miner will relay/accept\".\n>> It is perfectly legitimate for other users/miners to relay/accept transactions\n>> more liberally. By penalising for transactions falling outside of your\n>> *personal policies*, you would end up banning many legitimate nodes.\n> It is certainly true that standardness is an artificial construct that \n> only has meaning to this particular implementation of the software, but \n> no meaning in the context of the protocol or the system as a whole.\n> \n> On the other hand, the vast, vast majority of all transactions follow a \n> particular pattern.  If someone gives you one that doesn't match the \n> standard pattern, you might be a little suspicious, but it is no big \n> deal.  But, if they emit dozens or hundreds, it is hardly unreasonable \n> to disconnect them until you figure out what's going on.\n> \n> ------------------------------------------------------------------------------\n> Doing More with Less: The Next Generation Virtual Desktop \n> What are the key obstacles that have prevented many mid-market businesses\n> from deploying virtual desktops?   How do next-generation virtual desktops\n> provide companies an easier-to-deploy, easier-to-manage and more affordable\n> virtual desktop model.http://www.accelacomm.com/jaw/sfnl/114/51426474/\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Peer disconnection and built-in filtering in the reference client implementation may limit future innovation and cause service problems. Filtering should be implemented in a separate bitcoin proxy."}, {"author": "Luke-Jr", "date": "2011-09-15T17:29:16", "message_text_only": "On Thursday, September 15, 2011 12:04:37 PM kjj wrote:\n> On the other hand, the vast, vast majority of all transactions follow a\n> particular pattern.  If someone gives you one that doesn't match the\n> standard pattern, you might be a little suspicious, but it is no big\n> deal.  But, if they emit dozens or hundreds, it is hardly unreasonable\n> to disconnect them until you figure out what's going on.\n\nThat would make sense if you knew the node was originating them, MAYBE--\nbut not given the fact that they may merely be relaying transactions.", "summary": "Suspicious transaction patterns should be investigated, but caution should be exercised when disconnecting nodes as they may only be relaying transactions."}, {"author": "Gavin Andresen", "date": "2011-09-15T16:19:45", "message_text_only": "I hate to get specific about potential attacks on a public mailing\nlist, but I think the debate over what to do with non-standard\ntransactions means we need to.\n\nI agree with Gregory; if there are NO rules about what transactions\npeers can send at you, then an attacker can trivially get around other\nthe DoS rules.\n\nI also agree we need to think hard about what will happen when new\n'standard' transaction types are deployed.\n\nThere are two significant DoS attacks I can imagine using transactions\nthat will never be included in blocks.  The \"will never be included in\nblocks\" bit is important, because if an attacker can make you do\nsignificant work at no cost to themselves then they win. And if the\ntransactions will never be included in blocks the attacker can include\nlots of transaction fees that will never be spent.\n\n1) Exhaust memory by filling up the transaction memory pool. I think\nanother patch needs to be written to deal with that (keep the size of\nthe transaction pool reasonable by evicting low-priority\ntransactions).\n\n2) Waste CPU time validating transactions   They can make you use an\narbitrary amount of CPU time just by flooding you with a stream of\nvalid-but-won't-ever-get-into-a-block transactions.\n\nThe code already refuses to relay non-standard transactions, and\ndoesn't check their signatures or add them to the memory pool, so I\nthink no DoS check is needed for them (and would be harmful when we do\nstart supporting new standard transactions).\n\nIt also drops transactions with \"too few fees\" before checking\nsignatures or doing other CPU-intensive work, so no I think no DoS\ncheck is needed there, either (and again, would be harmful when\ntransaction fee rules change).\n\nI'm ignoring bandwidth DoS attacks-- we already have the\n-maxreceivebuffer option to deal with those.\n\n\nPS: I'll add Gregory's comment:\n\n\"There should be nothing I can give a node that it will\nforward on that will make that node's peers drop it. (and this needs\nto remain true while forwarding rules evolve)\"\n\n... as a comment in the code so hopefully we don't forget it.\n\n-- \n--\nGavin Andresen", "summary": "The debate over non-standard transactions means we need to consider potential DoS attacks, including memory exhaustion and CPU time waste, when new 'standard' transaction types are deployed."}, {"author": "Douglas Huff", "date": "2011-09-15T17:41:06", "message_text_only": "On Sep 15, 2011 11:20 AM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n> I'm ignoring bandwidth DoS attacks-- we already have the\n> -maxreceivebuffer option to deal with those.\n\nI disagree with this comment. The way this is currently implemented is a mem\nexhaustion dos in itself waiting to happen and does nothing to prevent\nnetwork flooding.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/2706e88f/attachment.html>", "summary": "A disagreement over the effectiveness of the -maxreceivebuffer option to deal with bandwidth DoS attacks in Bitcoin."}, {"author": "Mike Hearn", "date": "2011-09-15T11:45:04", "message_text_only": "Probabilistic disconnections could make it quite hard to debug protocol\nimplementations and increases the risk of flaky behaviour in the wild\nsignificantly. I don't see why a simpler solution isn't better.\n\nThe most likely failure mode of this is not an attack but the same as\nprevious breakages - scaling or legitimate version skew that causes problems\nas the network evolves.\n\nAgree with Luke that non-standard transactions should not be considered an\nattack.\n\nIf you stay with the scoring system I'd be tempted to have a flag (defaults\nto 100) that sets a minimum threshold for the badness scores and ignores any\nbelow that. Attacks based on sending transactions that aren't syntactically\nvalid don't seem likely to me, this isn't a good way to DoS somebody because\ndiscarding them is so cheap. If it turns out later there is a problem,\npeople under attack could flip the flag until a new version is released.\n\nThe formula for the DoS score in the case of invalid signatures/merkle roots\nseem unnecessarily elaborate. An invalid signature should never occur and\ncould always result in immediate disconnection.\n\nTreating a block with too many sigops as invalid means legitimate relayers\nmight be treated as an attacker if/when the constant changes in future. I'd\nsuggest not treating this as an attacking situation at all.\n\nWhy use a mutable field with a const setter?\n\nUnit tests that rely on sleeps like this can be flaky because the OS delay\nisn't always precise, not to mention slow/irritating to run. It's better if\ntests can override the clock, eg, if GetTime() did something like\n\n   if (nMockTime) { return nMockTime} else { ... }\n\nthen unit tests could reliably modify and advance the clock in a\nfast/efficient manner.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/0124d72f/attachment.html>", "summary": "Probabilistic disconnections increase debugging difficulty and risk of flaky behavior. Non-standard transactions should not be considered an attack. A flag for badness scores could be implemented. Invalid signatures should result in immediate disconnection. Blocks with too many sigops should not be treated as an attack. Mutable fields with const setters should not be used. Unit tests relying on sleeps can be flaky."}, {"author": "Gavin Andresen", "date": "2011-09-15T12:25:23", "message_text_only": "Thanks Mike, that's exactly the kind of detailed review I was looking\nfor.  I think you're right an all points.\n\nI'll simplify:  I'll add a -banscore option (default 100), and if a\nnode accumulates more than -banscore misbehavior points it'll get\ndropped and banned for -bantime (default 60*60*24) seconds.\n\nI'll make bad signatures a banning offense, and I'll remove the\nnumber-of-sigops and non-standard-transaction penalties.\n\nI used a mutable field with const setter to avoid modifying a bunch of\nmethods to take non-const blocks/transactions instead of const; I\nthink it is appropriate because a block/transaction's DoS score is\nreally meta-data and not part of it's state.\n\nI'll make GetTime() unit-test friendly as you suggest.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen plans to simplify the banning system for nodes accumulating more than -banscore misbehavior points and add a bad signature banning offense."}, {"author": "Stefan Thomas", "date": "2011-09-15T13:00:06", "message_text_only": "A few thoughts:\n\nShould the DoS protection auto-disable if the node has less than a \nminimum number of connections? The idea being that if our node seems to \nbe kicking /everybody /off the roster maybe there is something wrong \nwith the protections.\n\nIt would be nice if the node sent a message to the banned peer with a \ncode indicating the reason for the ban, specifically the offense that \nput Bitcoin over the edge. Logging the reason is probably fine for most \ncases, but I wanted to put the idea out there, because it might make \ndebugging easier if there are some weird bans happening in the wild and \nwe can't figure out why.\n\nShould sending lots of messages that don't pass the protocol-level \nchecksum test be a bannable offense? Or generally sending garbage data? \nThe attacks I'm thinking of are cross-protocol attacks. So as rough \nexample: The attacker puts an iframe on a website with a url like \nhttp://victim.com:8333 so lots of people's browsers connect to it. Maybe \nhe could even use something like [magic-bytes]tx\\0[...][valid orphan \ntransaction] in the URL, so the browser would send GET /[magic-bytes] \netc. and the Bitcoin node would interpret it.\n\nkjj wrote:\n\n> A few non-standard transactions are probably legitimate.  A whole bunch\n> of them are probably not.  I would think that assigning a point or two\n> of badness to a peer sending one is pretty reasonable, with the\n> understanding that we would need to adjust that as the network evolves.\n\nStrongly disagree. What is a non-standard transaction today may /be /a \nstandard transaction tomorrow.\n\n\nOn 9/15/2011 2:25 PM, Gavin Andresen wrote:\n> Thanks Mike, that's exactly the kind of detailed review I was looking\n> for.  I think you're right an all points.\n>\n> I'll simplify:  I'll add a -banscore option (default 100), and if a\n> node accumulates more than -banscore misbehavior points it'll get\n> dropped and banned for -bantime (default 60*60*24) seconds.\n>\n> I'll make bad signatures a banning offense, and I'll remove the\n> number-of-sigops and non-standard-transaction penalties.\n>\n> I used a mutable field with const setter to avoid modifying a bunch of\n> methods to take non-const blocks/transactions instead of const; I\n> think it is appropriate because a block/transaction's DoS score is\n> really meta-data and not part of it's state.\n>\n> I'll make GetTime() unit-test friendly as you suggest.\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/d97d1e45/attachment.html>", "summary": "Gavin Andresen proposes adding a -banscore option to ban nodes accumulating more than -banscore misbehavior points for -bantime seconds."}, {"author": "Gavin Andresen", "date": "2011-09-15T14:06:37", "message_text_only": "> Should the DoS protection auto-disable if the node has less than a minimum\n> number of connections? The idea being that if our node seems to be kicking\n> everybody off the roster maybe there is something wrong with the\n> protections.\n\nDarn good question. If the protection fails, would it be better for it\nto 'fail hard', leaving people complaining \"bitcoin won't stay\nconnected!\"\n\nOr fail soft, so you at least have a couple of connections.\n\nI think fail hard is better-- we'll immediately know about the\nproblem, and can fix it.  Fail soft makes me nervous because  I think\nthat would make it more likely a bug splits the network (and,\ntherefore, the blockchain).\n\n\n> It would be nice if the node sent a message to the banned peer with a code\n> indicating the reason for the ban\n\nIf I think you're trying to DoS me, why would I be nice to you?  I\nthink response messages would just give an attacker another potential\nattack vector, and it is clear from the debug.log what triggers a ban.\n\n> Should sending lots of messages that don't pass the protocol-level checksum\n> test be a bannable offense? Or generally sending garbage data?\n\nGood question. Anybody see a reason not to?  How much tolerance (if\nany) should there be for sending garbage data (I assume the\nlower-level network stack almost never garbles data, is that a good\nassumption)?\n\n\n-- \n--\nGavin Andresen", "summary": "Should DoS protection disable if node has few connections? Fail hard or soft? Sending messages with bad checksums bannable?"}, {"author": "Gregory Maxwell", "date": "2011-09-15T14:21:44", "message_text_only": "On Thu, Sep 15, 2011 at 10:06 AM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> If I think you're trying to DoS me, why would I be nice to you? \u00a0I\n> think response messages would just give an attacker another potential\n> attack vector, and it is clear from the debug.log what triggers a ban.\n\nFail hard, log the reason locally. Problem becomes tractable. Also,\nfor any problem big enough to cause a network outage the issue won't\nbe reproducibility.\n\nI support the imposition of txn rules\u2014 otherwise the dropping is\nnearly pointless due to the hole that any attack can just take the\nform of junk txn\u2014 but you must be super careful that an attack can't\nbe transitive: There should be nothing I can give a node that it will\nforward on that will make that node's peers drop it. (and this needs\nto remain true while forwarding rules evolve)\n\nSo, I'd suggest that you'd only drop on transactions that would\ninvalidate a block if included in it but the problem there is that\ndouble spends meet that criteria. Better would, perhaps be something\nlike \"would invalidate a block if included; except that double spends\nafter the last checkpoint are allowed, and nodes should not forward\nany txn until they are current with their last checkpoint\"\n\n(That bit of complexity is to reduce exposure where a new node gets\nhit with double spends that its yet too stupid to reject, and it\nforwards them onto its friendly peers who then hang up on it thus\nprolonging its period of ignorance\u2014 in general care needs to be taken\nto avoid hanging up on nodes that are just too young to know better)\n\n> Good question. Anybody see a reason not to? \u00a0How much tolerance (if\n> any) should there be for sending garbage data (I assume the\n> lower-level network stack almost never garbles data, is that a good\n> assumption)?\n\nIt would be fine to hang up on any garbage data: something is\nobviously wrong. I'd be hesitant to ban on a single instance of it,\nit's rare but happens. (e.g. see\nhttp://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.14.150&rep=rep1&type=ps)", "summary": "A suggestion to handle DoS attacks by logging the reason locally and imposing transaction rules to avoid dropping due to junk transactions."}, {"author": "Mike Hearn", "date": "2011-09-15T16:21:34", "message_text_only": "> If I think you're trying to DoS me, why would I be nice to you?\n\nThe issue is, what if I'm not trying to DoS you, but something went wrong?\n\n> think response messages would just give an attacker another potential\n> attack vector, and it is clear from the debug.log what triggers a ban.\n\nOnly clear to the node owner. Not the sender, who may in a better\nposition to debug.\n\nIt's pretty common for protocols to return useful errors even in DoS\nconditions. Eg, http servers will often return 503 Service Unavailable\nin overload conditions. Google actually sends a redirect telling you\nwhy you got blocked.", "summary": "The debate is whether response messages should be given to potential attackers, as it may provide another attack vector, or to the sender for better debugging."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-09-16T12:57:20", "message_text_only": "> Darn good question. If the protection fails, would it be better for it\n> to 'fail hard', leaving people complaining \"bitcoin won't stay\n> connected!\"\n> \n> Or fail soft, so you at least have a couple of connections.\n> \n> I think fail hard is better-- we'll immediately know about the\n> problem, and can fix it.  Fail soft makes me nervous because  I think\n> that would make it more likely a bug splits the network (and,\n> therefore, the blockchain).\n\nMy own preference would be to fail hard with detection of the problem\nand notification of the user if there's a GUI connected and/or running.\n\n- Joel", "summary": "Failing hard is better for Bitcoin's protection as it immediately notifies users of the problem, while failing soft may increase the risk of network splitting."}, {"author": "Douglas Huff", "date": "2011-09-15T18:36:20", "message_text_only": "On Sep 15, 2011, at 1:17 PM, Gavin Andresen wrote:\n\n>> On Sep 15, 2011 11:20 AM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n>>> I'm ignoring bandwidth DoS attacks-- we already have the\n>>> -maxreceivebuffer option to deal with those.\n>> \n>> I disagree with this comment. The way this is currently implemented is a mem\n>> exhaustion dos in itself waiting to happen and does nothing to prevent\n>> network flooding.\n> \n> Have you submitted a patch to fix it?\n\nNo, it requires the entirety of the p2p network code be reworked and large patches aren't accepted.\n\nNo reason to take that off list, it's an issue that's been acknowledged on irc numerous times and is in the public channel logs.\n\n-- \nDouglas Huff\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110915/1aa29047/attachment.sig>", "summary": "A discussion about a potential mem exhaustion DoS attack in the p2p network code of Bitcoin, with no patch submitted yet."}, {"author": "Gavin Andresen", "date": "2011-09-15T19:07:57", "message_text_only": "I took it off the list because snarky comments are not appropriate for\nbitcoin-dev, and I was being snarky.\n\nPlease try to keep your comments on-topic; if you want to talk about\nfixing -maxreceivebuffer (a change I would wholeheartedly embrace, the\ncode I slapped together was reacting to phantomcircuit's \"here's a\npython script that will kill any bitcoin node on the network\" 0-day\nexploit), then please start a new topic.\n\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen removed a topic from bitcoin-dev due to inappropriate snarky comments and urged users to stay on-topic."}], "thread_summary": {"title": "Request review: drop misbehaving peers", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "kjj", "Douglas Huff", "solar", "Mike Hearn", "Gregory Maxwell", "Gavin Andresen", "Stefan Thomas", "Joel Joonatan Kaartinen", "Christian Decker"], "messages_count": 19, "total_messages_chars_count": 27577, "convo_summary": "The bitcoin-dev community discussed a proposed system to punish peers sending wrong information by dropping the connection and banning their IP address to prevent potential denial-of-service attacks. However, there were debates over penalizing \"non-standard\" transactions and insufficient fees, and the danger of splitting or shattering the network. The community also discussed DoS protection, bad checksums, and potential mem exhaustion DoS attacks. Gavin Andresen plans to simplify the banning system and add a bad signature banning offense. The discussion was moderated to stay on-topic."}}, {"title": "[Bitcoin-development] 0.4.x stable branch", "thread_messages": [{"author": "Luke-Jr", "date": "2011-09-18T23:30:56", "message_text_only": "Gavin, Jeff, et al:\n\nA group of developers would be interested in maintaining 0.4 into the future \nas a stable branch (ie, bugfixes only). Would you be willing to plan on making \nthe next mainline version after 0.4, being called 0.5, so we can release \n0.4.1, 0.4.2, etc? If we prepare the git repository + tags, would you guys be \nwilling to make the actual release builds + source, and/or post such on the \nwebsites you administrate?\n\nLuke and various others in #bitcoin-stable", "summary": "Developers propose maintaining stable branch 0.4 with bugfixes only and releasing 0.5 as the next mainline version. Requesting assistance from administrators for release builds."}, {"author": "Gavin Andresen", "date": "2011-09-19T12:49:08", "message_text_only": "On Sun, Sep 18, 2011 at 7:30 PM, Luke-Jr <luke at dashjr.org> wrote:\n> If we prepare the git repository + tags, would you guys be\n> willing to make the actual release builds + source, and/or post such on the\n> websites you administrate?\n> Luke and various others in #bitcoin-stable\n\nMy initial reaction is no. Testing and bug-fixing is the bottleneck\nfor making core bitcoin better, and maintaining two release lines\nwon't make that better.\n\nI also think that until we get to a \"1.0\" that we can all agree is\nready for everybody AND their grandma to use, using the word \"stable\"\nwould be dishonest.\n\nWould we link to your binaries if you want to create 0.4.* releases,\nbuild binaries, then QA test and release them?\n\nI dunno-- what do other people think?\n\nEventually, when there are a bunch of bitcoin implementations to\nchoose from, I think bitcoin.org should look like bittorrent.org -- it\nshould become a forum for developers to exchange ideas about the\ndirection of bitcoin.\n\n-- \n--\nGavin Andresen", "summary": "Luke-Jr proposed preparing the git repository and tags for Bitcoin release builds, but Gavin Andresen rejected the idea due to the bottleneck of testing and bug-fixing."}, {"author": "Gregory Maxwell", "date": "2011-09-19T13:03:39", "message_text_only": "On Mon, Sep 19, 2011 at 8:49 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> My initial reaction is no. Testing and bug-fixing is the bottleneck\n> for making core bitcoin better, and maintaining two release lines\n> won't make that better.\n>\n> I also think that until we get to a \"1.0\" that we can all agree is\n> ready for everybody AND their grandma to use, using the word \"stable\"\n> would be dishonest.\n\nI think the primary concern that they are attempting to address there\nis providing a stable base bitcoind for miners, banks, and webservices\nto apply their patches on top of.\n\nRight now, if they want to keep up with development they are stuck\nforward porting against often disruptive changes as just about\neveryone running something of importance needs some patch or another\nso you have people who are clearly in the know like Luke and tcatm\ntrailing development on some of their systems by many months.\n\nThis isn't healthy for the network.\n\nI'm not convinced a bugfixes only branch will help much: Even bug fixes\nwill disrupt local fixes, and testing and supervising your upgrade usually\ntakes more effort than the forward porting.\n\nI'd rather see more effort put into mainlining the changes people are\ncarrying sooner and restructuring code to better accommodate patches\nwhich aren't suitable for mainline.  This will also encourage people\nto make the fixes they're running publicly available, rather than\njust keeping them private for competitive advantage.", "summary": "The idea of maintaining two release lines for Bitcoin is not practical as testing and bug-fixing is already a bottleneck. A bug-fixes only branch may not help much either. Instead, more effort should be put into mainlining changes and restructuring code to better accommodate patches."}, {"author": "Amir Taaki", "date": "2011-09-19T13:48:47", "message_text_only": ">Eventually, when there are a bunch of bitcoin implementations to\n\n>choose from, I think bitcoin.org should look like bittorrent.org -- it\n>should become a forum for developers to exchange ideas about the\n>direction of bitcoin.\n>\n>Gavin Andresen\n\nThanks for your support. This is a noble ideal and will ensure bitcoin's eventual success by serving as a neutral platform for discussions.\n\nOne step I've taken in this direction is to setup a process for proposing changes to the bitcoin protocol. See my other email to this list and this url:\n\n\u00a0 https://en.bitcoin.it/wiki/Bitcoin_Enhancement_Proposals\n\nThe first proposal BEP 0001 is copied from Python's PEP 0001 and is a good starting point. I've marked it as a draft since it's only a non-working proposal. After that with mutual consent and discussion, we can move it to active status and start to think about setting up an arbitration committee.\n\nWe should in general favour long discussion over voting. The Wikipedia model for resolving issues through hammering out details is superior to debian with a cycling board of voting members.\n\nThe bittorrent page looks like a good future ideal to model ourselves off of and the EP pages too:\n\n\u00a0 http://bittorrent.org/beps/bep_0000.html\n\nBEP 0001 needs review and comments. As you can see, bittorrent did the exact same thing here (copying the PEP process) with success:\n\n\u00a0 http://bittorrent.org/beps/bep_0001.html\n\ngenjix / Amir Taaki", "summary": "Bitcoin.org should become a forum for developers to exchange ideas about the direction of Bitcoin, similar to bittorrent.org, with a process for proposing changes."}, {"author": "Luke-Jr", "date": "2011-09-19T15:00:54", "message_text_only": "On Monday, September 19, 2011 8:49:08 AM Gavin Andresen wrote:\n> On Sun, Sep 18, 2011 at 7:30 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > If we prepare the git repository + tags, would you guys be\n> > willing to make the actual release builds + source, and/or post such on\n> > the websites you administrate?\n> > Luke and various others in #bitcoin-stable\n> \n> My initial reaction is no. Testing and bug-fixing is the bottleneck\n> for making core bitcoin better, and maintaining two release lines\n> won't make that better.\n> \n> I also think that until we get to a \"1.0\" that we can all agree is\n> ready for everybody AND their grandma to use, using the word \"stable\"\n> would be dishonest.\n\nThe problem with the current development model is that bugfixes are done \nalongside improvements, and code changes *always* have the potential to \nintroduce new bugs, no matter how careful anyone is. So to stay on top of \nbugfixes right now implies risking new bugs being introduced. What good is \ngetting one bug fixed, if it comes with 20 new yet-to-be-discovered bugs?\n\nFor example, 0.3.20.2 was the last version if bitcoind before people started \nexperiencing random (albeit rare) deadlocks. However, there have been many \nbugfixes since then. Since there is no stable branch, someone who wishes to \nget those bugfixes is forced to either create their own stable branch from \nscratch, or risk getting all the new bugs introduced in the latest version \n(most of which are unknown at this time).\n\nOn the other hand, a stable 0.4.x branch can provide people with upgrades \nwhich they know make only the minimal changes required to fix bugs with a much \nsmaller risk of new bugs being introduced (not only are there fewer changes, \nbut bugfixes tend to also be less invasive changes). While there are arguably \nstill various \"must-have\" features missing from 0.4, having a stable branch \nalso allows people to maintain a stable+<feature I need> branch with greater \nease too.", "summary": "Developers discuss the idea of creating a stable branch for Bitcoin to provide bug fixes with minimal changes and fewer risks of introducing new bugs."}, {"author": "Gregory Maxwell", "date": "2011-09-19T15:06:07", "message_text_only": "On Mon, Sep 19, 2011 at 11:00 AM, Luke-Jr <luke at dashjr.org> wrote:\n> The problem with the current development model is that bugfixes are done\n> alongside improvements, and code changes *always* have the potential to\n> introduce new bugs, no matter how careful anyone is. So to stay on top of\n> bugfixes right now implies risking new bugs being introduced. What good is\n> getting one bug fixed, if it comes with 20 new yet-to-be-discovered bugs?\n\nBug fixes also introduce bugs. Considering the fairly small number of new\nfeatures added, I'd take a bet that most of the more recently introduced\nbugs were the result of fixes not features.", "summary": "Fixing bugs alongside improvements can introduce new bugs, making it risky to stay on top of bugfixes. New bugs can outweigh the benefits of fixing one."}, {"author": "theymos", "date": "2011-09-20T04:41:42", "message_text_only": "On Monday, September 19, 2011 11:00 AM, \"Luke-Jr\" <luke at dashjr.org> wrote:\n> The problem with the current development model is that bugfixes are\n> done alongside improvements, and code changes *always* have the\n> potential to introduce new bugs, no matter how careful anyone is. So\n> to stay on top of bugfixes right now implies risking new bugs being\n> introduced. What good is getting one bug fixed, if it comes with 20\n> new yet-to-be-discovered bugs?\n\nA stable version is a good idea. This is why I'm still using 0.3.19\n(with some modifications): none of the bugfixes after this version help\nme much, and I don't need any of the new features. I've also thought\nabout starting an unofficial stable version with my modifications to\n0.3.19 and some backported bugfixes.", "summary": "The current development model introduces new bugs with code changes, making it risky to fix bugs. A stable version with bugfixes is needed."}, {"author": "Jeff Garzik", "date": "2011-09-20T19:10:16", "message_text_only": "This is the way it works for the kernel, the process on which I've\nsuggested we follow with bitcoin, to a small extent:\n\n- Version X is released.  Linus now begins accepting pull requests\ninto torvalds/linux.git for X+1 (\"merge window opens\").  It is\nstrongly recommended that all pull requests have seen some exposure to\nthe public via \"linux-next\", which is a tree-of-trees generated from\npulling the trees of top developers.  linux-next is maintained by\nanother volunteer, Stephen Rothwell.\n\n- After a week, Linus stops taking pull requests from subsystem\nmaintainers (\"merge window closes\").  At this point, a 2.5-month\nstabilization and bug fix period begins.  No new features are merged\ninto torvalds/linux.git, and developers are expected to focus on bug\nfixing.  Developers, of course, accept new features and changes into\ntheir own trees and branches.  linux-next publishes these, while the\nmain torvalds/linux.git remains in bug fix mode.\n\n- Three months after version X is released, version X+1 is released\nfrom torvalds/linux.git top-of-tree, and the process begins anew.\n\n- From time to time, _not_ every version, a Linux \"enterprise\"\ndistribution like Red Hat Enterprise Linux (plug plug) or Ubuntu LTS,\nwill maintain a kernel for a long time, for the benefit of their\ncustomers who need stability over new feature.  Or, the community\nsimply decides that a kernel should be maintained for a longer period\nof time.\n\nIn particular, Greg Kroah-Hartman (gregkh) maintains stable trees for\nversion X-1 and X-2, where he will accept fixes provided that the fix\n(or a variant thereof) has been accepted in upstream.\n\nIn that case, an employee or volunteer maintains a stable branch of\nthe kernel.  They \"backport\" fixes from the main torvalds/linux.git\ntree into their own gregkh/stable-2.6.36-linux.git tree.\n\nThus, we observe a few things that may be applied to bitcoin:\n\n- decentralized operation, where stable branches and bitcoin-next are\nnot maintained by the core team\n- the community decides which versions are important to maintain long term\n- the core team may maintain a merge/stabilize/merge/stabilize\nworkflow, introducing new features without huge negative impact to\nexisting userbase\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "The process of releasing and maintaining a new version of the Linux kernel can be applied to Bitcoin, including decentralized operation and community decision-making."}, {"author": "Luke-Jr", "date": "2011-09-20T20:37:50", "message_text_only": "On Tuesday, September 20, 2011 3:10:16 PM Jeff Garzik wrote:\n> Thus, we observe a few things that may be applied to bitcoin:\n\nThis is basically what the #bitcoin-stable team wants to do.", "summary": "Jeff Garzik suggests applying observations to Bitcoin, aligning with the goals of the #bitcoin-stable team."}, {"author": "Alex Waters", "date": "2011-09-21T14:24:25", "message_text_only": "I think what Jeff has said is ideal for a stable 1.0 or 1.1 release of\na kernal. I also think it's absolutely the direction we should be\nheading in, but not this afternoon. The desire to keep a 0.4.x stable\nbranch is a symptom of a bigger QA problem, one that I am attempting\nto address in general.\n\nGavin has reminded me to test, test, test. I implore anyone who clicks\nthe pull button to not only test their code, but write down how they\ntested it. The issue tracker is somewhat out of control, and my\nopinion is that a stable branch is not going to fix it.\n\nThis stage of development can be agitating, as you implement code in\nthe wild - it is outpaced or broken easily. The sooner we can get a\nrobust QA process to hammer out bugs, and process pulls - the closer\nwe are to a stable 1.0 release.\n\nPlease contact me if you would like to help contribute to the bug\nhammering - I promise that we can find ways to make it\ninteresting/challenging. (working on a zapper too!)", "summary": "Jeff's suggestion for a stable kernel release is good, but there's a bigger QA problem. Testing and bug fixing are needed for a stable 1.0 release."}], "thread_summary": {"title": "0.4.x stable branch", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Luke-Jr", "Amir Taaki", "theymos", "Gregory Maxwell", "Gavin Andresen", "Alex Waters"], "messages_count": 10, "total_messages_chars_count": 11180, "convo_summary": "Developers propose maintaining a stable branch 0.4 with bugfixes only and releasing 0.5 as the next mainline version. However, Gregory Maxwell and Gavin Andresen reject the idea due to the bottleneck of testing and bug-fixing. Instead, they suggest restructuring the code to better accommodate patches. Bitcoin.org should become a forum for developers to exchange ideas about the direction of Bitcoin, according to Amir Taaki. Jeff Garzik suggests applying observations to Bitcoin, aligning with the goals of the #bitcoin-stable team."}}, {"title": "[Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)", "thread_messages": [{"author": "Amir Taaki", "date": "2011-09-19T00:31:55", "message_text_only": "I adapted the Python PEP 0001 to Bitcoin (its license is public domain):\n\nhttps://en.bitcoin.it/wiki/Bitcoin_Enhancement_Proposals\n\nhttps://en.bitcoin.it/wiki/BEP_0001\n\nBEP 0001 is open to additional authors and revisions.\n\nIdeally these should go in a github.com/bitcoin/beps/ repo.\n\nLets have a standardisation track for changes to the protocol.", "summary": "Bitcoin Enhancement Proposal (BEP) 0001, adapted from Python PEP 0001, aims to standardize changes to the Bitcoin protocol and is open for revisions and additional authors."}, {"author": "Luke-Jr", "date": "2011-09-19T01:04:43", "message_text_only": "On Sunday, September 18, 2011 8:31:55 PM Amir Taaki wrote:\n> Ideally these should go in a github.com/bitcoin/beps/ repo.\n\nPlease, somewhere people can freely commit to...", "summary": "Amir Taaki suggests creating a repository on Github for Bitcoin Improvement Proposals (BEPs) where people can freely contribute."}, {"author": "Alex Waters", "date": "2011-09-19T03:22:55", "message_text_only": "http://www.python.org/dev/peps/ is a good reference if you're\ninterested in seeing how PEPs work in action. I would be more than\nwilling to maintain a similar index if that's what people want.\n\nSomething to note is that Python does not use Git or GitHub (AFAIK).\nSo we would need to update 001 to reflect the BEP involvement with\nGit, or transition away from it completely (which I discourage).\n\nMy full-time experience as a project manager with Basecamp, Redmine,\nTeamlab, Pivotal Tracker, SVN, and custom VC has taught me that it is\nhard to find a good solution for the organization of the development\nlife cycle. Having examined Bitcoin for the past three weeks, it is\nhard to discern the willingness to implement meta changes.\n\nIt looks like Git/GitHub is working, but not ideal for everyone. My\nopinion is that there will always be a missing feature in VC systems.\nMy major gripes with GitHub are the lack of prioritization options,\nvoting system, and reporting/metrics.\n\nGavin has asked me to research various O/S projects, to see how they\nare doing things. I have been focused mostly on organizing a pull\ntesting system, and learning the testing process - but I can spend\nmore time on meta organization if that is in demand. It would be\nhelpful to me if I could hear some feedback on what needs changing,\nand how important it is.\n\nMy recommendation is that we continue with the current system, but\nplan alternative organization voting around the time of 0.5 release.\nThis could be an alternative to GitHub, or a supplement, or neither.\nSeeing as we are still in Beta, I don't believe there needs immense\nstructure until we approach 1.0. The PEP system is outstanding, and is\nclearly a solid alternative/supplement to consider.\n\n-Alex", "summary": "Alex suggests maintaining an index similar to Python's PEPs for organizing Bitcoin development. He recommends continuing with the current system and considering alternative organization voting around the time of 0.5 release."}, {"author": "bgroff at lavabit.com", "date": "2011-09-19T16:01:24", "message_text_only": "> http://www.python.org/dev/peps/ is a good reference if you're\n> interested in seeing how PEPs work in action. I would be more than\n> willing to maintain a similar index if that's what people want.\n\nWould the multi-signature proposal be a good test case for BEP-0002?\n\nhttps://gist.github.com/dba89537d352d591eb36\n\nI can reformat it and email here.\n\nGavin has a competing one:  https://gist.github.com/39158239e36f6af69d6f\n\nand I have a pull request matching a previous version of my proposal.\n\n--\nBobby Groff", "summary": "Proposal for a multi-signature system being considered for implementation. Two competing proposals exist and a reference for PEPs is provided."}, {"author": "Gavin Andresen", "date": "2011-09-19T16:57:58", "message_text_only": "New 'standard' transaction forms would be perfect candidates for BEPS.\n\nI think we aught to have a formal proposal to separate the protocol\nversion from the client version, too.\n\n--\n\nDoes anybody besides me think maybe we should name them something\nother than \"BEP\" ?\n\nI'm worried we'll regret it in two years when a google for \"BEP003\"\ntakes you to the BitTorrent EPs instead of the BitCoin EPs.\n\nMaybe \"BIP\" == Bitcoin Improvement Proposal\nor \"PEB\" == Proposal to Enhance Bitcoin\nor \"BER\" == Bitcoin Enhancement Request\n\nI think I like \"BIP\"  (PEB sounds like a diet soda, and I don't know\nif BER should be pronounced \"bear\" or \"beer\").\n\nI generally don't care about names, but it seems like a little\nplanning now might save some confusion later. And I don't want the\nBitTorrent folks to get pissed off at us for 'stealing' their acronym,\neither.\n\n\n-- \n--\nGavin Andresen", "summary": "A proposal to separate protocol version from client version and rename BEPs to BIPs, PEBs, or BERs to avoid confusion with BitTorrent EPs."}, {"author": "Alex Waters", "date": "2011-09-19T17:23:55", "message_text_only": "I'm sorry that I misunderstood the protocol being separate from the\nclient in regard to 'BEPS'. It definitely makes more sense that way.\n\nAs far as naming; I vote BER pronounced Beer.\n\n\nOn Mon, Sep 19, 2011 at 12:57 PM, Gavin Andresen\n<gavinandresen at gmail.com> wrote:\n> New 'standard' transaction forms would be perfect candidates for BEPS.\n>\n> I think we aught to have a formal proposal to separate the protocol\n> version from the client version, too.\n>\n> --\n>\n> Does anybody besides me think maybe we should name them something\n> other than \"BEP\" ?\n>\n> I'm worried we'll regret it in two years when a google for \"BEP003\"\n> takes you to the BitTorrent EPs instead of the BitCoin EPs.\n>\n> Maybe \"BIP\" == Bitcoin Improvement Proposal\n> or \"PEB\" == Proposal to Enhance Bitcoin\n> or \"BER\" == Bitcoin Enhancement Request\n>\n> I think I like \"BIP\" \u00a0(PEB sounds like a diet soda, and I don't know\n> if BER should be pronounced \"bear\" or \"beer\").\n>\n> I generally don't care about names, but it seems like a little\n> planning now might save some confusion later. And I don't want the\n> BitTorrent folks to get pissed off at us for 'stealing' their acronym,\n> either.\n>\n>\n> --\n> --\n> Gavin Andresen\n>\n> ------------------------------------------------------------------------------\n> BlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\n> Learn about the latest advances in developing for the\n> BlackBerry&reg; mobile platform with sessions, labs & more.\n> See new tools and technologies. Register for BlackBerry&reg; DevCon today!\n> http://p.sf.net/sfu/rim-devcon-copy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Participants discuss the naming of a proposal to enhance Bitcoin, with suggestions including BIP, PEB, and BER. Concerns are raised about confusion with BitTorrent EPs."}, {"author": "Amir Taaki", "date": "2011-09-20T02:06:16", "message_text_only": "Good idea.\n\n\nHow about BRC?\n\n\u00a0 Bitcoin Request for Comments?\n\nOtherwise I like the sound of BERs, but it doesn't matter too much the name.\n\n\n\n----- Original Message -----\nFrom: Gavin Andresen <gavinandresen at gmail.com>\nTo: bitcoin-development at lists.sourceforge.net\nCc: \nSent: Monday, September 19, 2011 6:57 PM\nSubject: Re: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)\n\nNew 'standard' transaction forms would be perfect candidates for BEPS.\n\nI think we aught to have a formal proposal to separate the protocol\nversion from the client version, too.\n\n--\n\nDoes anybody besides me think maybe we should name them something\nother than \"BEP\" ?\n\nI'm worried we'll regret it in two years when a google for \"BEP003\"\ntakes you to the BitTorrent EPs instead of the BitCoin EPs.\n\nMaybe \"BIP\" == Bitcoin Improvement Proposal\nor \"PEB\" == Proposal to Enhance Bitcoin\nor \"BER\" == Bitcoin Enhancement Request\n\nI think I like \"BIP\"\u00a0 (PEB sounds like a diet soda, and I don't know\nif BER should be pronounced \"bear\" or \"beer\").\n\nI generally don't care about names, but it seems like a little\nplanning now might save some confusion later. And I don't want the\nBitTorrent folks to get pissed off at us for 'stealing' their acronym,\neither.\n\n\n-- \n--\nGavin Andresen\n\n------------------------------------------------------------------------------\nBlackBerry&reg; DevCon Americas, Oct. 18-20, San Francisco, CA\nLearn about the latest advances in developing for the \nBlackBerry&reg; mobile platform with sessions, labs & more.\nSee new tools and technologies. Register for BlackBerry&reg; DevCon today!\nhttp://p.sf.net/sfu/rim-devcon-copy1 \n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Gavin Andresen suggests naming Bitcoin Enhancement Proposals (BEPS) something else to avoid confusion with BitTorrent EPs. He proposes BIP, PEB, or BER."}, {"author": "Daniel F", "date": "2011-09-23T19:45:50", "message_text_only": "> Does anybody besides me think maybe we should name them something\n> other than \"BEP\" ?\n>\n> I'm worried we'll regret it in two years when a google for \"BEP003\"\n> takes you to the BitTorrent EPs instead of the BitCoin EPs.\n\nthis is an excellent \"painting the bikeshed\" question, so i cannot\nresist participation :)\n\nimo, anyone who has any business looking at the beps (which would\ngenerally be technically-minded people), will be smart enough to\ngoogle for \"bitcoin bep003\" to find what he's looking for. so i don't\nsee an issue, whatever acronym we end up using.", "summary": "A suggestion to rename \"BEP\" to avoid confusion with BitTorrent EPs is dismissed as unnecessary, as those searching for Bitcoin BEPs will likely use specific search terms."}, {"author": "Amir Taaki", "date": "2011-09-25T03:27:25", "message_text_only": "Hey,\n\nNames aren't too important and people were in favour of BIPs. I've moved them from BEPs to BIPs (Bitcoin Improvement Proposals).\n\n\n\n----- Original Message -----\nFrom: Daniel F <nanotube at gmail.com>\nTo: Gavin Andresen <gavinandresen at gmail.com>\nCc: bitcoin-development at lists.sourceforge.net\nSent: Friday, September 23, 2011 9:45 PM\nSubject: Re: [Bitcoin-development] Bitcoin Enhancement Proposals (BEPS)\n\n> Does anybody besides me think maybe we should name them something\n> other than \"BEP\" ?\n>\n> I'm worried we'll regret it in two years when a google for \"BEP003\"\n> takes you to the BitTorrent EPs instead of the BitCoin EPs.\n\nthis is an excellent \"painting the bikeshed\" question, so i cannot\nresist participation :)\n\nimo, anyone who has any business looking at the beps (which would\ngenerally be technically-minded people), will be smart enough to\ngoogle for \"bitcoin bep003\" to find what he's looking for. so i don't\nsee an issue, whatever acronym we end up using.\n\n------------------------------------------------------------------------------\nAll of the data generated in your IT infrastructure is seriously valuable.\nWhy? It contains a definitive record of application performance, security\nthreats, fraudulent activity, and more. Splunk takes this data and makes\nsense of it. IT sense. And common sense.\nhttp://p.sf.net/sfu/splunk-d2dcopy2\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Bitcoin Improvement Proposals (BIPs) were preferred over Bitcoin Enhancement Proposals (BEPs) due to potential confusion with BitTorrent EPs."}], "thread_summary": {"title": "Bitcoin Enhancement Proposals (BEPS)", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "bgroff at lavabit.com", "Amir Taaki", "Gavin Andresen", "Daniel F", "Alex Waters"], "messages_count": 9, "total_messages_chars_count": 9351, "convo_summary": "Bitcoin developers discussed standardizing changes to the protocol through Bitcoin Enhancement Proposals (BEPs) and creating a repository on Github for contributions. They also considered organizing proposals with an index similar to Python's PEPs and renaming BEPs to avoid confusion with BitTorrent EPs. Bitcoin Improvement Proposals (BIPs) were ultimately preferred over BEPs."}}, {"title": "[Bitcoin-development] Issue / Pulls timers", "thread_messages": [{"author": "Alex Waters", "date": "2011-09-20T00:20:19", "message_text_only": "I would like to propose adding timers to the pulls / issues:\n\nhttps://github.com/bitcoin/bitcoin/pull/523\n\n\"From time to time a pull request will become outdated. If this occurs, and\nthe pull is no longer automatically mergeable; it will be closed after 15\ndays. This can be avoided by rebasing the commit. Pull requests closed in this\nmanner will have their corresponding issue labeled stagnant.\n\nNon-bug issues with no commits will be closed after 15 days from their\nlast activity.\nIssues closed in this manner will be labeled stale.\n\nRequests to reopen closed pull requests and/or issues can be submitted to\nQA at BitcoinTesting.org. \"\n\nThis will help cut down on the abandoned / stagnant pulls and issues.\nIt will also focus attention on priority items, and phase out unwanted changes.\n\nSidenote: QA at BitcoinTesting.org is working, unlike QA at Bitcoin.org\n\n-Alex", "summary": "Proposal to add timers to pull requests and issues on Bitcoin's GitHub repository. Outdated requests will be closed after 15 days to avoid stagnation."}, {"author": "Jeff Garzik", "date": "2011-09-20T18:54:46", "message_text_only": "On Mon, Sep 19, 2011 at 8:20 PM, Alex Waters <ampedal at gmail.com> wrote:\n> I would like to propose adding timers to the pulls / issues:\n>\n> https://github.com/bitcoin/bitcoin/pull/523\n>\n> \"From time to time a pull request will become outdated. If this occurs, and\n> the pull is no longer automatically mergeable; it will be closed after 15\n> days. This can be avoided by rebasing the commit. Pull requests closed in this\n> manner will have their corresponding issue labeled stagnant.\n>\n> Non-bug issues with no commits will be closed after 15 days from their\n> last activity.\n> Issues closed in this manner will be labeled stale.\n>\n> Requests to reopen closed pull requests and/or issues can be submitted to\n> QA at BitcoinTesting.org. \"\n\n\nWe need to avoid a user/contributor experience of:  \"my pull request\nwas abruptly closed with no warning\"\n\nContributors might not track the state of the tree on a day-to-day\nbasis.  Thus, following the example of bugzilla.redhat.com and many\nother \"tracker\" applications, outdated issues first initiate an\nautomated warning email -- usually by adding a comment to the bug\nreport -- that describes the policy, why the policy (closing outdated\nreports) exists, and how to avoid automated report closure.\n\nIn our case, this means a \"we will close pull req, unless you update\nthis commit in 15 days\" comment should be added to the pull req.  The\ncomment should describe in broad terms, with links, how to rebase a\ncommit, what standard expectations are, etc.\n\nClosing with no warning should be avoided.\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "Proposal to add timers to pull requests and issues to avoid abrupt closure. Automated warning emails will be sent before closure."}, {"author": "Alex Waters", "date": "2011-09-21T02:34:35", "message_text_only": "> We need to avoid a user/contributor experience of: \u00a0\"my pull request\n> was abruptly closed with no warning\"\n\nI agree, I definitely want to go about this in a non-jerk way. I would\nbe pissed if I spent hours coding something, and it was put on the\nback burner and eventually closed (especially without notice). The\nwording and process could use refinement.\n\n> Contributors might not track the state of the tree on a day-to-day\n> basis. \u00a0Thus, following the example of bugzilla.redhat.com and many\n> other \"tracker\" applications, outdated issues first initiate an\n> automated warning email -- usually by adding a comment to the bug\n> report -- that describes the policy, why the policy (closing outdated\n> reports) exists, and how to avoid automated report closure.\n\nI can definitely do this, and give a wordy notice before I start the\ntimer. I will write up a message that links to a rebase walkthrough\n(any suggestions? I think Gavin has one somewhere...), I would like it\nto be more detailed than GitHub's walk-through.\n\nMy main reason for pushing this is that it will help clear out some of\nthe older pulls/issues that exist right now. I'm hoping that in the\nfuture, the QA process will be good enough that pulls/issues won't\nfall behind from lack of testing - and the timers will be used very\nsparingly. It should only be in place to sort out the pulls/issues\nthat the majority doesn't want included in the client.", "summary": "Refinement needed to avoid abruptly closing pull requests without warning. Suggest automated warning emails and detailed rebase walkthroughs to avoid outdated issues."}], "thread_summary": {"title": "Issue / Pulls timers", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Alex Waters"], "messages_count": 3, "total_messages_chars_count": 3882, "convo_summary": "Alex Waters proposed adding timers to pull requests and issues on Bitcoin's GitHub repository to avoid stagnation. Jeff Garzik suggested automated warning emails before closure, but Waters suggested refinement to avoid abrupt closure without warning, including detailed rebase walkthroughs."}}, {"title": "[Bitcoin-development] Bitcoin 0.4 Release", "thread_messages": [{"author": "Matt Corallo", "date": "2011-09-23T04:57:06", "message_text_only": "Gavin tagged 0.4 release today, so here are my gitian builds.\nThese zips are in gitian-download format which means they can be\nautomatically downloaded and pgp-verified using the gitian-updater\nscript (see\nhttps://github.com/devrandom/gitian-builder/blob/master/share/gitian-updater). Currently they only contain my sig, but if other devs have time to gitian build and re-roll the same zip with other sigs added as well it would make updating via gitian scripts easy and secure :).\n\nhttp://dl.dropbox.com/u/29653426/bitcoin-0.4.0-linux-gitian.zip\nhttp://dl.dropbox.com/u/29653426/bitcoin-0.4.0-win32-gitian.zip\n\nSHA1:\n3794ec0ce8a3ea96200b3970937c5f224313267d  bitcoin-0.4.0-linux-gitian.zip\na4857b2238a102d8f4ba9a2bdfed74ddd985ad3d  bitcoin-0.4.0-win32-gitian.zip\n\nEmail PGP signed as always.\n\nMatt\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 836 bytes\nDesc: This is a digitally signed message part\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110923/5e2738a2/attachment.sig>", "summary": "Bitcoin 0.4.0 release is available for download in gitian format, allowing for automatic downloads and pgp-verification via gitian-updater script."}], "thread_summary": {"title": "Bitcoin 0.4 Release", "categories": ["Bitcoin-development"], "authors": ["Matt Corallo"], "messages_count": 1, "total_messages_chars_count": 1097}}, {"title": "[Bitcoin-development] Beyond IP transactions: towards a bitcoin payment protocol", "thread_messages": [{"author": "Pieter Wuille", "date": "2011-09-23T16:21:04", "message_text_only": "Hello everyone,\n\nhere is an idea i've bean writing up: https://gist.github.com/1237788\n\nI hope it can start some discussion about moving away from static bitcoin addresses\nas descriptions for transactions. I suppose it's a candidate for a BIP/BEPS/BFC/...,\nbut as things don't seem to have been decided completely about those, I put it in a\nGist.\n\nPlease, comment.\n\n-- \nPieter", "summary": "Proposal to move away from static bitcoin addresses as transaction descriptions, sparking discussion on potential BIP/BEPS/BFC implementation. Comment encouraged."}, {"author": "kjj", "date": "2011-09-23T17:38:48", "message_text_only": "Pieter Wuille wrote:\n> Hello everyone,\n>\n> here is an idea i've bean writing up: https://gist.github.com/1237788\n>\n> I hope it can start some discussion about moving away from static bitcoin addresses\n> as descriptions for transactions. I suppose it's a candidate for a BIP/BEPS/BFC/...,\n> but as things don't seem to have been decided completely about those, I put it in a\n> Gist.\n>\n> Please, comment.\n>\nThis may just be me, but this really looks like an incredibly convoluted \nway to solve a bunch of problems that aren't really problems.  The \ncentral issue that I see, is that you assume that there is no out of \nband channel, as if people were just sending transactions to addresses \nthat came to them in a dream.\n\nI think that this assumption is only true when it doesn't matter.  For \nexample, I have a donation link in my sig on the forums.  I don't care \nmuch who sends to it, or why, and I certainly don't need annotations or \na refund address.  The rest of the time, payments are sent to addresses \nthat already have sufficient context.\n\nOnly one of the advantages listed is actually an advantage.  That is \nthat payments to stale addresses can be stopped.  This isn't much of an \nadvantage though, as someone blindly sending payments (donations, \nreally) to addresses found on backup tapes and web archives without \nverifying that they are still current kinda deserve what they get.  So \nit really only stops payments to services that go defunct the same day \n(more or less).\n\nIn the end, I just don't see the value in giving a URL so that I can go \nask a server for information that could just as easily have been encoded \nin the URL directly.\n\nThen again, I'm cynical, and didn't sleep very well last night.  Maybe \nthe next person will think better of it.", "summary": "Pieter Wuille proposes moving away from static bitcoin addresses as descriptions for transactions. However, some argue that this solution is convoluted and unnecessary."}, {"author": "Pieter Wuille", "date": "2011-09-23T23:15:48", "message_text_only": "On Fri, Sep 23, 2011 at 12:38:48PM -0500, kjj wrote:\n> Pieter Wuille wrote:\n> >Hello everyone,\n> >\n> >here is an idea i've bean writing up: https://gist.github.com/1237788\n> >\n> >I hope it can start some discussion about moving away from static bitcoin addresses\n> >as descriptions for transactions. I suppose it's a candidate for a BIP/BEPS/BFC/...,\n> >but as things don't seem to have been decided completely about those, I put it in a\n> >Gist.\n> >\n> >Please, comment.\n> >\n> This may just be me, but this really looks like an incredibly\n> convoluted way to solve a bunch of problems that aren't really\n> problems.  The central issue that I see, is that you assume that\n> there is no out of band channel, as if people were just sending\n> transactions to addresses that came to them in a dream.\n> \n> I think that this assumption is only true when it doesn't matter.\n> For example, I have a donation link in my sig on the forums.  I\n> don't care much who sends to it, or why, and I certainly don't need\n> annotations or a refund address.  The rest of the time, payments are\n> sent to addresses that already have sufficient context.\n\nWell, I agree, this scheme is not (primarily) intended to be a solution\nfor people who want to accept anonymous donations; static addresses\nwork very well for that application (unless you want unlinkability\nbetween different payments).\n\nLet me try to explain what I do want to accomplish.\n\nWhat current addresses are, is a reference to a public key. The way they\nare used is as a template for a transaction. If you do not need complex\ntransactions, this suffices indeed, given that all other negotiation about\nthe payment occurs out-of-band already (e.g., a webshop interface that\nafter clicking 'pay' gives you a freshly generated bitcoin address and\nstores it so it can track your payment).\n\nWhat I want to do is to standardize part of that out-of-band communication\ninside a protocol. The first observation is that if you want a freshly\nnegotiated key each time, some form of bidirectional communication is \nnecessary anyway, and a static txout template does not suffice anymore.\nIf you're doing bidirectional communication, you are no longer limited\nby the space constraints of something by-human-copy-pastable, and you can\njust negotiate the txout directly, which transparently adds support for\nanything that is possible through bitcoin scripts.\n\nSo far, the creation of transactions is \"solved\". However, by asking nodes\nnot to broadcast their transaction, but instead just send it back (we're\ncommunicating with some other party already anyway, and this other party\nis the one who cares about the tx being accepted), the receiver can track\nit as well. Furthermore, by passing tags along, identification of\ntransactions becomes a lot easier. As a  extra advantage, this makes the\nrequirements for a client easier as well (it doesn't need to be a p2p\nnode).\n\nThe third step is adding signatures to authenticate the whole process.\nThey are necessary to make sure the client is communicating with who he\nthinks he is, but by using them for the submission of the transaction as\nwell, it gives the client a proof of payment acceptance too.\n\nSummarized: addresses are a limited method for defining payments, and as\nsoon as you move to a protocol instead of a static template, a lot of\npossibilities open up.\n\n-- \nPieter", "summary": "Pieter Wuille proposes a protocol to standardize out-of-band communication for Bitcoin transactions, allowing for more complex transactions and easier identification."}, {"author": "Luke-Jr", "date": "2011-09-23T23:21:58", "message_text_only": "On Friday, September 23, 2011 7:15:48 PM Pieter Wuille wrote:\n> What I want to do is to standardize part of that out-of-band communication\n> inside a protocol. \n\nEmail and XMPP are suitable. Just sign the message with the \"from\" key.\n\n> The first observation is that if you want a freshly negotiated key each\n> time, some form of bidirectional communication is necessary anyway, and a\n> static txout template does not suffice anymore.\n\nFalse. Deterministic keypairs remove the necessity of bidirectional \ncommunication. A standard for a \"public key root\" \"address\" could be \nworthwhile.\n\nBoth of these combined retain pseudonomity, while providing stateless \ntransactions with out-of-band data.", "summary": "Pieter Wuille proposes standardizing out-of-band communication within a protocol using email or XMPP and suggests deterministic keypairs for stateless transactions."}, {"author": "Pieter Wuille", "date": "2011-09-24T03:05:08", "message_text_only": "On Fri, Sep 23, 2011 at 07:21:58PM -0400, Luke-Jr wrote:\n> On Friday, September 23, 2011 7:15:48 PM Pieter Wuille wrote:\n> > What I want to do is to standardize part of that out-of-band communication\n> > inside a protocol. \n> \n> Email and XMPP are suitable. Just sign the message with the \"from\" key.\n\nI don't want to send a mail to you or chat with you when I'm buying something\nin your webshop. Or do you mean my client does that automatically? Why not\nthrough an HTTP connection like the one I'm already using anyway to view\nthe static address on your website?\n\n> > The first observation is that if you want a freshly negotiated key each\n> > time, some form of bidirectional communication is necessary anyway, and a\n> > static txout template does not suffice anymore.\n> \n> False. Deterministic keypairs remove the necessity of bidirectional \n> communication. A standard for a \"public key root\" \"address\" could be \n> worthwhile.\n\nThey still require you to give me your public key root, and me to give\nyou the ephemeral private key I generated, optionally together with what\nI'm paying you for. That's bidirectional communication to me. Agreed, your\nscheme requires a few steps less, but I believe mine is far more flexible\nand user-friendly.\n\n-- \nPieter", "summary": "Discussion on standardizing out-of-band communication inside a protocol for buying something in a webshop, with different opinions on bidirectional communication and keypairs."}], "thread_summary": {"title": "Beyond IP transactions: towards a bitcoin payment protocol", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Pieter Wuille", "kjj"], "messages_count": 5, "total_messages_chars_count": 7446, "convo_summary": "Pieter Wuille suggests moving away from static bitcoin addresses as transaction descriptions and proposes a protocol to standardize out-of-band communication for Bitcoin transactions. This would allow for more complex transactions and easier identification. There is discussion on standardizing out-of-band communication within a protocol using email or XMPP and using deterministic keypairs for stateless transactions. Different opinions exist on bidirectional communication and keypairs for buying something in a webshop."}}, {"title": "[Bitcoin-development] Bitcoin 0.4.0 released", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-23T18:09:58", "message_text_only": "Thanks to everybody who contributed:\n\nBitcoin version 0.4.0 is now available for download at:\n  http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.0/\n\nThe main feature in this release is wallet private key encryption;\nyou can set a passphrase that must be entered before sending coins.\nSee below for more information; if you decide to encrypt your wallet,\nWRITE DOWN YOUR PASSPHRASE AND PUT IT IN A SECURE LOCATION. If you\nforget or lose your wallet passphrase, you lose your bitcoins.\nPrevious versions of bitcoin are unable to read encrypted wallets,\nand will crash on startup if the wallet is encrypted.\n\nAlso note: bitcoin version 0.4 uses a newer version of Berkeley DB\n(bdb version 4.8) than previous versions (bdb 4.7). If you upgrade\nto version 0.4 and then revert back to an earlier version of bitcoin\nthe it may be unable to start because bdb 4.7 cannot read bdb 4.8\n\"log\" files.\n\nNotable bug fixes from version 0.3.24:\n--------------------------------------\n\nFix several bitcoin-becomes-unresponsive bugs due to multithreading\ndeadlocks.\n\nOptimize database writes for large (lots of inputs) transactions\n(fixes a potential denial-of-service attack)\n\n\n\nWallet Encryption\n-----------------\nBitcoin supports native wallet encryption so that people who steal your\nwallet file don't automatically get access to all of your Bitcoins.\nIn order to enable this feature, choose \"Encrypt Wallet\" from the\nOptions menu.  You will be prompted to enter a passphrase, which\nwill be used as the key to encrypt your wallet and will be needed\nevery time you wish to send Bitcoins.  If you lose this passphrase,\nyou will lose access to spend all of the bitcoins in your wallet,\nno one, not even the Bitcoin developers can recover your Bitcoins.\nThis means you are responsible for your own security, store your\npassphrase in a secure location and do not forget it.\n\nRemember that the encryption built into bitcoin only encrypts the\nactual keys which are required to send your bitcoins, not the full\nwallet.  This means that someone who steals your wallet file will\nbe able to see all the addresses which belong to you, as well as the\nrelevant transactions, you are only protected from someone spending\nyour coins.\n\nIt is recommended that you backup your wallet file before you\nencrypt your wallet.  To do this, close the Bitcoin client and\ncopy the wallet.dat file from ~/.bitcoin/ on Linux, /Users/(user\nname)/Application Support/Bitcoin/ on Mac OSX, and %APPDATA%/Bitcoin/\non Windows (that is /Users/(user name)/AppData/Roaming/Bitcoin on\nWindows Vista and 7 and /Documents and Settings/(user name)/Application\nData/Bitcoin on Windows XP).  Once you have copied that file to a\nsafe location, reopen the Bitcoin client and Encrypt your wallet.\nIf everything goes fine, delete the backup and enjoy your encrypted\nwallet.  Note that once you encrypt your wallet, you will never be\nable to go back to a version of the Bitcoin client older than 0.4.\n\nKeep in mind that you are always responsible for your own security.\nAll it takes is a slightly more advanced wallet-stealing trojan which\ninstalls a keylogger to steal your wallet passphrase as you enter it\nin addition to your wallet file and you have lost all your Bitcoins.\nWallet encryption cannot keep you safe if you do not practice\ngood security, such as running up-to-date antivirus software, only\nentering your wallet passphrase in the Bitcoin client and using the\nsame passphrase only as your wallet passphrase.\n\nSee the doc/README file in the bitcoin source for technical details\nof wallet encryption.\n\n\nFull changelog (\"git shortlog --no-merges v0.3.24..\")\n-----------------------------------------\nAbraham Jewowich (1):\n      Fix bug with accessing vchData[0] when vchData is empty.     Fix\ntypo in CBase58Data::CompareTo\n\nAlex B (2):\n      Romanian translation added\n      Spanish translation update\n\nAlex Waters (1):\n      Updated readme file\n\nDaniel Folkinshteyn (1):\n      Update the list of seednodes.\n\nDawid Spiechowicz (1):\n      added polish wallet encryption messages\n\nDean Lee (1):\n      Update to the Chinese Simp translation\n\nDev Random (4):\n      Linux gitian config with separate wxWidgets build\n      Mingw gitian with separate wxWidgets and boost\n      Mingw gitian build with deterministic bitcoin.exe by use of faketime\n      Add Gitian Build descriptors for Boost and wxWidgets.\n\nDoug Huff (1):\n      Make mlock() and munlock() portable to systems that require the\naddress to be on a page boundary.\n\nDylan Noblesmith (1):\n      mlock() all private keys in memory\n\nEric Hosmer (1):\n      Added crypter to makefile.vc.\n\nFabian H jr. (1):\n      Updated checkpoints, maybe Tx fee should be reduced to 0.0001\nfrom 0.0005 and maximum minimum tx should be 0.0010.\n\nGavin Andresen (24):\n      Do-nothing MapPort() ifndef USE_UPNP.  fixes #450\n      Don't std::advance past beginning of transactions array.  Fixes #465\n      Remove unused ScanMessageStart function\n      Compile with DEBUG_LOCKORDER to detect inconsistent lock\norderings that can cause deadlocks\n      CHECKMULTISIG unit tests.\n      Highlight mis-matching locks\n      Fix rpc-hanging deadlocks\n      Fixed potential deadlocks in GUI code.     Also changed\nsemantics of CWalletTx::GetTxTime(); now always returns the time the\ntransaction was received by this node, not the average block time.\nAnd added information about -DDEBUG_LOCKORDER to coding.txt.\n      Fix typo (\"you own security\")\n      SetCrypted() obtains keystore lock, to be safe.\n      Logic running with -keypool=0 was wrong (empty keys were being\nreturned). Fixes #445\n      Fix RPC call name in error message.\n      obtain cs_wallet mutex to protect vchDefaultKey\n      Fixed regression I introduced: wallets with lots of transactions\nwere unusable in GUI.\n      Fix bad merge: getaccountaddress was broken for new accounts\n      Give hard-coded seed nodes a random last-seen time, to randomize\norder they're tried.\n      Do not try to download blockchain from 0.3.23 nodes\n      If compiled -DDEBUG_LOCKORDER and run with -debug, print out\nevery mutex lock/unlock (helpful for debugging\nsomething-is-holding-a-mutex-too-long problems)\n      Stay connected to seed nodes; disconnecting causes problems if\nyou are trying to make the initial blockchain download.\n      Versions 0.3.20 THROUGH 0.3.23 have trouble with blockchain\ndownloads; avoid them\n      Bumped version numbers to 0.4.0rc1\n      Optimize database writes for transactions with lots of TxIns.\n Patch from ArtForz, who discovered the problem.\n      Fix AddAddress cs_mapaddresses/db transaction deadlock\n      Fix QA email address\n\nGiel van Schijndel (15):\n      fix warning on 64bit systems: cast to pointer from integer of\ndifferent size [-Wint-to-pointer-cast]\n      fix warnings: expression result unused [-Wunused-value]\n      fix warnings: using the result of an assignment as a condition\nwithout parentheses [-Wparentheses]\n      fix warning: comparison of unsigned expression < 0 is always\nfalse [-Wtautological-compare]\n      fix warning: X enumeration values not handled in switch [-Wswitch-enum]\n      fix warning: unused variable 'X' [-Wunused-variable]\n      fix warning: unused function 'SigIllHandlerSSE2' [-Wunused-function]\n      fix warning: variable \u2018nMinDepth\u2019 set but not used\n[-Wunused-but-set-variable]\n      fix warning: control reaches end of non-void function [-Wreturn-type]\n      Make some global variables less-global (static)\n      Cleanup makefiles such that diffs to them are smaller\n      Move func 'REF' from util.h to serialize.h\n      Start moving protocol-specific code to protocol.[ch]pp\n      Move CAddress to protocol.[ch]pp\n      Move CInv to protocol.[ch]pp\n\nHan Lin Yap (2):\n      Comment \"deprecated\"\n      Add a note to only include .po file\n\nJay Weisskopf (4):\n      Add logos/branding currently found on bitcoin.org into NSIS installer.\n      Set default compression for NSIS installer to LZMA.\n      Remove NSIS branding from bottom divider.\n      Increase resolution of Windows icon.\n\nJeff Garzik (8):\n      Update CWallet::LoadWallet for proper return type.\n      Bump version to 0.3.25\n      doc/README: word wrap into something readable\n      CAddrDB::LoadAddresses: properly initialize CAddress\n      src/makefile.unix: remove -DFOURWAYSSE2\n      Add reference python miner, in contrib/pyminer/\n      README.md: word wrap text file\n      Revert \"Define MSG_NOSIGNAL to 0 on platforms where it is unavailable.\"\n\nJeroenz0r (1):\n      Translation from \"Open Bitcoin\" to \"Verstuur Bitcoins\"\n\nJoelKatz (1):\n      Fix UNIX-specific thread handle leak.\n\nJohannes Henninger (1):\n      Identify as \"Bitcoin + version number\" when mapping UPnP port\n\nLuke Dashjr (7):\n      Update nTime after nExtraNonce to avoid potential race\n(extraNonce being reset due to just-occurred time change after nTime\nis set)\n      Reset extraNonce only every 15 seconds, just in case some miner\nis updating time himself and stuff\n      Reset extraNonce only when prevBlock changes, so miners can\ncontinue updating the time on their work until it's stale\n      Support for boost filesystem version 3\n      ignore stuff\n      Save coinbase, not just extraNonce\n      Bugfix: Use timestamp in coinbase rather than \"bits\", needed to\nensure coinbase txn is unique even if address is the same\n\nMatt Corallo (35):\n      Add minversion to wallet.\n      Add wallet privkey encryption.\n      Set the number of SHA512 rounds based on the speed of the computer.\n      Push unlocked_until in getinfo.\n      Dynamically remove/insert the Options for encryption in the menus.\n      Add the walletlock RPC method to lock the wallet manually.\n      Add Wallet Encryption section to README\n      Use DB Transactions when encrypting wallet.     This speeds up\nthe encryption process significantly.\n      Make an invalid addrIncoming so that old clients crash.\n      Update makefile.linux-mingw to work with crypter and UPnP fix.\n      Fix makefile.linux-mingw\n      Fix crashes when a wallet is locked and GetReservedKey() is called\n      Generate Warning when using default key.\n      Fix Build in GetReservedKey() in wallet.cpp\n      Fix bad return values in LoadWallet.\n      Actually use mapAlreadyAskedFor.\n      Fix EncryptKeys crash introduced by a9ba4710, identified by TD.\n      Check for duplicate txins in CheckTransaction.\n      Make it clear that setting proxy requires restart to fully apply.\n      Don't listen if on TOR (resolves #441).\n      Add missing include to serialize.h\n      Add file for transaction tests.\n      Cleanup test suite output to be more useful.\n      Unify copyright notices.\n      Missed a 'password' should be 'passphrase'.\n      Fix incorrect RPC error messages\n      Add specific wallet encryption details to doc/README\n      Upgrade dependancies and tweak build process.\n      Update binary mos to latest translations.\n      Fix build process to actually work.\n      Add binary mo for new translation.\n      Update gitian build descriptors to produce proper builds.\n      Update bitcoin icon to make nsis setup exe deterministic.\n      Update binary mo to match latest po translation.\n      Restructure gitian files and add download config files.\n\nMichael Bemmerl (4):\n      Basically some grammatical fixes of the German translation.\n      Added German wallet encryption messages translation.\n      Changed Russian translation according to comment in issue 395\n      Updated German translation\n\nMichal Zima (1):\n      Updated czech translation\n\nNils Schneider (2):\n      log low-level network messages only when fDebug is set\n      missed printf in AbortMessage(); merged printfs in EndMessage\n\nPatrick Varilly (1):\n      Single DB transaction for all addresses in a message\n\nPieter Wuille (11):\n      Prepare codebase for Encrypted Keys.\n      Do not use obsolete CPrivKey for passing keys around\n      Bugfix: add autogenerated addresses to address book\n      get rid of mapPubKeys\n      Use CBitcoinAddress instead of string/uint160\n      split off CBase58Data from CBitcoinAddress\n      Fix for small change outputs\n      Bugfix: don't overuse limited ExtractAddress\n      avoid strAddress + validity checks\n      SocketHandler thread can be detached\n      Updated dutch translation\n\nSt\u00e9phane Gimenez (1):\n      Single DB transaction for addresses from DNS seeds\n\nVegard Nossum (6):\n      Add missing includes to key.h\n      Add missing include to script.h\n      Add missing includes to net.h\n      Fix testing setup\n      Add prototype for EvalScript() to script.h\n      Add a file for script tests\n\nVenkatesh Srinivas (4):\n      Test for SO_NOSIGPIPE rather than assuming all BSDs support it.\n      Qualify make_tuple with boost:: namespace.\n      Use 'unsigned char' rather than 'char' for pchMessageStart.\n      Define MSG_NOSIGNAL to 0 on platforms where it is unavailable.\n\nWladimir J. van der Laan (2):\n      remove magic number: change threshold for nLockTime to constant\n      make SetHash160 return a value (as specified in the function signature)\n\ncjdelisle (1):\n      wxWidgets needs to be at least version 2.9.1 because wallet\ncrypto uses ToStdString() which is not in 2.9.0\n\novdeathiam (1):\n      Edited locale/pl/LC_MESSAGES/bitcoin.po via GitHub", "summary": "Bitcoin version 0.4.0 is now available for download, featuring wallet private key encryption, and a newer version of Berkeley DB."}, {"author": "Andreas Schildbach", "date": "2011-09-23T19:42:08", "message_text_only": "On 09/23/2011 08:09 PM, Gavin Andresen wrote:\n\n> Bitcoin version 0.4.0 is now available for download at:\n>   http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.4.0/\n\nThanks everyone for this great release!\n\nCan you post secure file checksums somewhere, preferably not on Sourceforge?\n\nI'd rather not install something directly from SourceForge.\n\nCheers,\n\nAndreas", "summary": "Bitcoin version 0.4.0 is released and available for download. Request for secure file checksums to be posted somewhere other than Sourceforge."}, {"author": "Daniel F", "date": "2011-09-23T21:18:40", "message_text_only": "> Can you post secure file checksums somewhere, preferably not on Sourceforge?\n\nas long as it's gpg-signed, what's the difference where it is posted?", "summary": "GPG-signed secure file checksums can be posted anywhere, regardless of the platform, as long as they are verified."}, {"author": "Gavin Andresen", "date": "2011-09-23T21:36:56", "message_text_only": "> as long as it's gpg-signed, what's the difference where it is posted?\n\nWhat Daniel said.  Although I did upload the signatures to github, too:\n  https://github.com/bitcoin/bitcoin/downloads\n\nThe github downloads have been unreliable, so I didn't announce that\nyou can download from there.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen uploaded GPG-signed signatures to Github for Bitcoin downloads, but warns that the downloads have been unreliable."}], "thread_summary": {"title": "Bitcoin 0.4.0 released", "categories": ["Bitcoin-development"], "authors": ["Daniel F", "Gavin Andresen", "Andreas Schildbach"], "messages_count": 4, "total_messages_chars_count": 14024, "convo_summary": "Bitcoin version 0.4.0 is now available for download with wallet private key encryption and a newer version of Berkeley DB. Andreas Schildbach requests secure file checksums to be posted somewhere other than Sourceforge. Daniel F suggests GPG-signed secure file checksums can be posted anywhere as long as they are verified. Gavin Andresen uploaded GPG-signed signatures to Github for Bitcoin downloads, but warns of unreliable downloads."}}, {"title": "[Bitcoin-development] Pulling for the 0.5 release", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-24T15:19:40", "message_text_only": "Bright and early Monday morning I plan on pulling changes for the\nBitcoin 0.5 release into tip-of-git. Expect some tip-of-git chaos and\ninstability, I'm sure there will be issues to work through to move\nfrom wxwidgets to qt for the GUI.\n\nI'd like to have a release candidate ready in a week or two, giving\ntime for a week or two of testing, and have the 0.5 release available\na month from now, assuming no major show-stopper bugs or network\nstability or denial-of-service or security vulnerabilities turn up\nbetween now and then.\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin 0.5 release changes will be pulled into tip-of-git, with a release candidate ready in a week or two and the 0.5 release available a month from now."}], "thread_summary": {"title": "Pulling for the 0.5 release", "categories": ["Bitcoin-development"], "authors": ["Gavin Andresen"], "messages_count": 1, "total_messages_chars_count": 552}}, {"title": "[Bitcoin-development] Newly introduced DoS", "thread_messages": [{"author": "Luke-Jr", "date": "2011-09-26T19:17:09", "message_text_only": "+        return DoS(10, error(\"AcceptToMemoryPool() : transaction with out-of-\nbounds SigOpCount\"));\n+                        return DoS(10, error(\"ConnectInputs() : tried to \nspend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight));\n+        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n\nThese shouldn't be \"DoS\"'d, or else you open a new DoS when nodes legitimately \nrelay such transactions/blocks.", "summary": "Code snippets show potential denial-of-service (DoS) attacks on Bitcoin nodes, but caution is advised to avoid false positives and legitimate transactions/blocks being affected."}, {"author": "Gavin Andresen", "date": "2011-09-26T20:47:06", "message_text_only": "On Mon, Sep 26, 2011 at 3:17 PM, Luke-Jr <luke at dashjr.org> wrote:\n> + \u00a0 \u00a0 \u00a0 \u00a0return DoS(10, error(\"AcceptToMemoryPool() : transaction with out-of-\n> bounds SigOpCount\"));\n> + \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0return DoS(10, error(\"ConnectInputs() : tried to\n> spend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight));\n> These shouldn't be \"DoS\"'d, or else you open a new DoS when nodes legitimately\n> relay such transactions/blocks.\n\nHuh?\n\nSo in the future lets suppose we schedule a change to the acceptable\nblock rules that allows more SigOps in a block, or allows generation\ntransaction to be spent before 100 confirmations. At that same time,\nthe DoS rules will be changed.\n\nYou cannot \"legitimately\" relay those blocks without a scheduled\nblock-chain-split.  If a block-chain-split IS scheduled and the rules\nchange, then denying service to nodes running old, obsolete versions\nof bitcoin is the right thing to do-- it is better to \"fail hard\" and\nfind it difficult or impossible to connect to the network rather than\ncontinue with an obsolete client and a non-majority block chain.\n\n(and the third DoS in AcceptBlock(): prev block not found  is a\n\"should be impossible\" case, because AcceptBlock is only called when\nextending the best-block chain).\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen discusses the potential for DoS attacks on Bitcoin nodes and the importance of updating to avoid obsolete clients and non-majority block chains."}, {"author": "Luke-Jr", "date": "2011-09-26T20:55:57", "message_text_only": "On Monday, September 26, 2011 4:47:06 PM Gavin Andresen wrote:\n> On Mon, Sep 26, 2011 at 3:17 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > +        return DoS(10, error(\"AcceptToMemoryPool() : transaction with\n> > out-of- bounds SigOpCount\"));\n> > +                        return DoS(10, error(\"ConnectInputs() : tried to\n> > spend coinbase at depth %d\", pindexBlock->nHeight - pindex->nHeight));\n> > These shouldn't be \"DoS\"'d, or else you open a new DoS when nodes\n> > legitimately relay such transactions/blocks.\n> \n> Huh?\n> \n> So in the future lets suppose we schedule a change to the acceptable\n> block rules that allows more SigOps in a block, or allows generation\n> transaction to be spent before 100 confirmations. At that same time,\n> the DoS rules will be changed.\n> \n> You cannot \"legitimately\" relay those blocks without a scheduled\n> block-chain-split.  If a block-chain-split IS scheduled and the rules\n> change, then denying service to nodes running old, obsolete versions\n> of bitcoin is the right thing to do-- it is better to \"fail hard\" and\n> find it difficult or impossible to connect to the network rather than\n> continue with an obsolete client and a non-majority block chain.\n> \n> (and the third DoS in AcceptBlock(): prev block not found  is a\n> \"should be impossible\" case, because AcceptBlock is only called when\n> extending the best-block chain).\n\nThe first one I was referring to is a *transaction* with \"non-standard\" sig op \ncount, which is AFAIK allowed in blocks, just not accepted by the mainline \nrules. In the second case, that transaction is not tied to a specific block. \nMaybe the person spending it sees it matured beyond 100 confirmations, and you \nonly see 99. An attacker could use these things to get nodes to ban each \nother.", "summary": "A discussion about the potential risks of using DoS (Denial of Service) rules in Bitcoin's block acceptance process."}, {"author": "Gavin Andresen", "date": "2011-09-26T21:38:41", "message_text_only": "> The first one I was referring to is a *transaction* with \"non-standard\" sig op\n> count, which is AFAIK allowed in blocks, just not accepted by the mainline\n> rules.\n\nI sit corrected. The context is:\n    // Checking ECDSA signatures is a CPU bottleneck, so to avoid\ndenial-of-service\n    // attacks disallow transactions with more than one SigOp per 34\nbytes.\n    // 34 bytes because a TxOut is:\n    //   20-byte address + 8 byte bitcoin amount + 5 bytes of ops + 1\nbyte script length\n    if (GetSigOpCount() > nSize / 34 || nSize < 100)\n\treturn DoS(10, error(\"AcceptToMemoryPool() : transaction with\nout-of-bounds SigOpCount\"));\n\nI'm having trouble imagining some future world where valid,\nnew-versions-agree-to-relay-transactions have more than one SigOp per\n34 bytes; can you give an example?\n\n> Maybe the person spending it sees it matured beyond 100 confirmations, and you\n> only see 99. An attacker could use these things to get nodes to ban each\n> other.\n\nThat would imply you're on a blockchain fork of more than 99 blocks\nwith respect to the person spending the transaction, in which case I'd\nargue you have much bigger problems and it is a good idea for the DoS\ncode to kick in and kick either you or them off the network...\n\n-- \n--\nGavin Andresen", "summary": "A transaction with \"non-standard\" sig op count is allowed in blocks but not accepted by mainline rules, causing potential DoS attacks."}, {"author": "Luke-Jr", "date": "2011-09-26T21:53:23", "message_text_only": "On Monday, September 26, 2011 5:38:41 PM Gavin Andresen wrote:\n> > The first one I was referring to is a *transaction* with \"non-standard\"\n> > sig op count, which is AFAIK allowed in blocks, just not accepted by the\n> > mainline rules.\n> \n> I sit corrected. The context is:\n>     // Checking ECDSA signatures is a CPU bottleneck, so to avoid\n> denial-of-service\n>     // attacks disallow transactions with more than one SigOp per 34\n> bytes.\n>     // 34 bytes because a TxOut is:\n>     //   20-byte address + 8 byte bitcoin amount + 5 bytes of ops + 1\n> byte script length\n>     if (GetSigOpCount() > nSize / 34 || nSize < 100)\n> \treturn DoS(10, error(\"AcceptToMemoryPool() : transaction with\n> out-of-bounds SigOpCount\"));\n> \n> I'm having trouble imagining some future world where valid,\n> new-versions-agree-to-relay-transactions have more than one SigOp per\n> 34 bytes; can you give an example?\n\nIt's not future. It's presently allowed in blocks. Which means it's perfectly \nvalid to relay (and also perfectly value to NOT relay or accept). Ergo, \nshouldn't be punished.\n\n> > Maybe the person spending it sees it matured beyond 100 confirmations,\n> > and you only see 99. An attacker could use these things to get nodes to\n> > ban each other.\n> \n> That would imply you're on a blockchain fork of more than 99 blocks\n> with respect to the person spending the transaction, in which case I'd\n> argue you have much bigger problems and it is a good idea for the DoS\n> code to kick in and kick either you or them off the network...\n\nUm, no? It implies you have 99 blocks since the coinbase, and he has 100 and \nwants to spend. In this scenario, it's proper to reject his transaction *until \nyou have the next block*, but it doesn't make sense to punish for it.", "summary": "A discussion about the acceptance of transactions with \"non-standard\" sig op count in blocks, and the potential for DoS attacks."}, {"author": "theymos", "date": "2011-09-26T22:34:33", "message_text_only": "On Monday, September 26, 2011 5:53 PM, \"Luke-Jr\" <luke at dashjr.org> wrote:\n> It's not future. It's presently allowed in blocks. Which means it's\n> perfectly valid to relay (and also perfectly value to NOT relay or\n> accept). Ergo, shouldn't be punished.\n\nYeah, my node has always relayed these transactions. The limit seems\npointless to me, especially when it's per kB: people will just add\nmore data.\n\nThe coinbase maturity DoS limit should not have a chance of immediately\nkicking the node, as I believe this could happen normally in rare cases.\nRejecting these transactions is also pretty cheap, AFAIK. A small DoS\nscore seems reasonable, though.", "summary": "A limit on coinbase maturity DoS should not immediately kick the node, and a small DoS score seems reasonable."}, {"author": "Gavin Andresen", "date": "2011-09-27T00:07:07", "message_text_only": "> It's not future. It's presently allowed in blocks. Which means it's perfectly\n> valid to relay (and also perfectly value to NOT relay or accept). Ergo,\n> shouldn't be punished.\n\nYou're absolutely right.\n\nAnd you're right about the 99 confirmations, too-- I was thinking\nblocks again, not transactions.\n\nGood to get all of the wrong-ness out of my system on a Monday so I\nknow I'll be perfect the rest of the week.  :-)\n\n-- \n--\nGavin Andresen", "summary": "Relaying transactions is currently allowed in blocks, but it's up to individuals to decide whether to accept them or not, and they shouldn't be punished."}, {"author": "Luke-Jr", "date": "2011-09-27T20:08:05", "message_text_only": "What about this one?\n\n@@ -1276,13 +1278,13 @@ bool CBlock::AcceptBlock()\n     // Get prev block index\n     map<uint256, CBlockIndex*>::iterator mi = \nmapBlockIndex.find(hashPrevBlock);\n     if (mi == mapBlockIndex.end())\n-        return error(\"AcceptBlock() : prev block not found\");\n+        return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n\n\nIs it certain that it cannot be triggered by a peer having some huge number \nmore blocks than you?", "summary": "Code change ensures error message is returned if previous block is not found, preventing potential issues with peers having more blocks."}, {"author": "Gregory Maxwell", "date": "2011-09-27T20:23:47", "message_text_only": "On Tue, Sep 27, 2011 at 4:08 PM, Luke-Jr <luke at dashjr.org> wrote:\n> Is it certain that it cannot be triggered by a peer having some huge number\n> more blocks than you?\n\nMight be better to have a global flag that indicates when the node\nthinks its current with the network (this could have other UI impacts,\nlike letting the user know if they send and their connectivity looks\nnon-current), and only enforce this check when the node believes that\nits current.\n\nCurrency could be\n=height>last_checkpoint&&top_timestamp>now()-safe_amount;  with\nsafe_amount to be high enough that it's very unlikely to be falsely\ntriggered by an improbably long gap.", "summary": "Proposal for a global flag indicating a node's current status with the network, with a check for currency only when the node believes it is current."}, {"author": "Gavin Andresen", "date": "2011-09-27T20:39:32", "message_text_only": "> @@ -1276,13 +1278,13 @@ bool CBlock::AcceptBlock()\n> \u00a0 \u00a0 // Get prev block index\n> \u00a0 \u00a0 map<uint256, CBlockIndex*>::iterator mi =\n> mapBlockIndex.find(hashPrevBlock);\n> \u00a0 \u00a0 if (mi == mapBlockIndex.end())\n> - \u00a0 \u00a0 \u00a0 \u00a0return error(\"AcceptBlock() : prev block not found\");\n> + \u00a0 \u00a0 \u00a0 \u00a0return DoS(10, error(\"AcceptBlock() : prev block not found\"));\n>\n>\n> Is it certain that it cannot be triggered by a peer having some huge number\n> more blocks than you?\n\nAs I said, that is a \"can't never happen but we'll wear a\nbelt-and-suspenders just in case\" case.\n\nAcceptBlock() is called from two places in the code:\n\nProcessBlock, if the block is not an orphan:\n    // If don't already have its previous block, shunt it off to\nholding area until we get it\n    if (!mapBlockIndex.count(pblock->hashPrevBlock))\n    {\n....  orphan processing stuff...\n      return true;\n    }\n\n    // Store to disk\n    if (!pblock->AcceptBlock())\n        return error(\"ProcessBlock() : AcceptBlock FAILED\");\n\nThe mapBlockIndex.find(hashPrevBlock) in AcceptBlock can't fail.\n\nThe second place is recursively, in AcceptBlock(), processing orphans\nthat link to the block being accepted, and mapBlockIndex.find() would\nfind the used-to-be-an-orphan-block-that-is-now-being-accepted.\n\nSo: it is a case that should be impossible to trigger. However, in\ncase there is some subtle bug or edge case I'm not considering it seem\nto me keeping the check is appropriate, and, because it will be a\nsubtle bug or edge case, it seems to me keeping the DoS penalty is\nalso appropriate, because attackers look for subtle bugs and edge\ncases that can be exploited.\n\n\n-- \n--\nGavin Andresen", "summary": "The code snippet includes a check that is considered impossible to trigger, but is kept as a precaution against subtle bugs or edge cases."}], "thread_summary": {"title": "Newly introduced DoS", "categories": ["Bitcoin-development"], "authors": ["theymos", "Luke-Jr", "Gregory Maxwell", "Gavin Andresen"], "messages_count": 10, "total_messages_chars_count": 10331, "convo_summary": "Bitcoin experts discuss the potential for denial-of-service (DoS) attacks on nodes and the importance of updating to avoid obsolete clients and non-majority block chains. They also discuss the risks of using DoS rules in Bitcoin's block acceptance process and the acceptance of transactions with \"non-standard\" sig op count in blocks. A proposal for a global flag indicating a node's current status with the network is also suggested."}}, {"title": "[Bitcoin-development] Miscommitted version", "thread_messages": [{"author": "Luke-Jr", "date": "2011-09-26T19:18:35", "message_text_only": "* 6b8a5ab Bump version to 0.4.1\n\nThis should be some pre-0.5.0, not 0.4.1 which will be the stable team's first \nrelease...", "summary": "Version bumped to 0.4.1, but it's a pre-release before the stable team's first release of 0.5.0."}, {"author": "Jeff Garzik", "date": "2011-09-28T03:44:43", "message_text_only": "On Mon, Sep 26, 2011 at 3:18 PM, Luke-Jr <luke at dashjr.org> wrote:\n> * 6b8a5ab Bump version to 0.4.1\n>\n> This should be some pre-0.5.0, not 0.4.1 which will be the stable team's first\n> release...\n\nNo.  Technically speaking this most recent release was 0.4.0.  That is\nwhat is serialized in the build, and what is tagged.\n\nAny stable version based off the most recent release would be 0.4.0.1.\n\nAnd of course you're following the \"upstream must have merged this fix\nfirst\" rule, right?\n\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "There is a disagreement about the version number of a recent release, with one person suggesting it should be pre-0.5.0."}, {"author": "Luke-Jr", "date": "2011-09-28T03:53:08", "message_text_only": "On Tuesday, September 27, 2011 11:44:43 PM Jeff Garzik wrote:\n> On Mon, Sep 26, 2011 at 3:18 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > * 6b8a5ab Bump version to 0.4.1\n> > \n> > This should be some pre-0.5.0, not 0.4.1 which will be the stable team's\n> > first release...\n> \n> No.  Technically speaking this most recent release was 0.4.0.  That is\n> what is serialized in the build, and what is tagged.\n\nI'm aware of that.\n\n> Any stable version based off the most recent release would be 0.4.0.1.\n\nOk. That's not usually how versions work, though. Gavin also recently stated \nthat the next version after 0.4.0 was to be 0.5, which is why the commit was a \nsurprise. I'm just trying to clarify what version number to use for stable, \nand getting apparently mixed answers.\n\n> And of course you're following the \"upstream must have merged this fix\n> first\" rule, right?\n\nYep.", "summary": "A discussion about the version number for a stable release of a software, with some disagreement on what the next version should be."}], "thread_summary": {"title": "Miscommitted version", "categories": ["Bitcoin-development"], "authors": ["Jeff Garzik", "Luke-Jr"], "messages_count": 3, "total_messages_chars_count": 1536, "convo_summary": "Luke-Jr announced a pre-release version 0.4.1 before the stable team's 0.5.0 release. Jeff Garzik mentioned a disagreement on the version number, with one person suggesting it should be pre-0.5.0. The convo was about the version number for a stable software release, with some disagreement on what the next version should be."}}, {"title": "[Bitcoin-development] Deprecating \"midstate\" in getwork?", "thread_messages": [{"author": "Nils Schneider", "date": "2011-09-26T19:42:09", "message_text_only": "Hey,\n\nI'd like to simplify the internal reference miner and remove all\ndependencies on cryptopp (it's the only place we use cryptopp instead of\nOpenSSL).\n\nUnfortunately, cryptopp is also used to calculate getwork \"midstate\".\nThis field is redundant and the miner could easily calculate it from the\nblockheader so I'd like to remove it.\n\nAny thoughts? Where should such a change should be announced so all\nminers can be upgraded?", "summary": "Proposal to simplify internal reference miner by removing dependencies on cryptopp and redundant getwork \"midstate\" calculation. Upgrade announcement for miners needed."}, {"author": "Jeff Garzik", "date": "2011-09-28T03:45:48", "message_text_only": "On Mon, Sep 26, 2011 at 3:42 PM, Nils Schneider <nils at nilsschneider.net> wrote:\n> I'd like to simplify the internal reference miner and remove all\n> dependencies on cryptopp (it's the only place we use cryptopp instead of\n> OpenSSL).\n>\n> Unfortunately, cryptopp is also used to calculate getwork \"midstate\".\n> This field is redundant and the miner could easily calculate it from the\n> blockheader so I'd like to remove it.\n>\n> Any thoughts? Where should such a change should be announced so all\n> miners can be upgraded?\n\nI think one of the pools was already working on something like that?\nI'm pretty sure it can be removed, and I'm pretty sure somebody has\nalready field-tested that guess.\n-- \nJeff Garzik\nexMULTI, Inc.\njgarzik at exmulti.com", "summary": "The internal reference miner may be simplified by removing dependencies on cryptopp, which is only used for getwork \"midstate\" calculation."}, {"author": "Luke-Jr", "date": "2011-09-28T03:54:00", "message_text_only": "On Tuesday, September 27, 2011 11:45:48 PM Jeff Garzik wrote:\n> On Mon, Sep 26, 2011 at 3:42 PM, Nils Schneider <nils at nilsschneider.net> \nwrote:\n> > I'd like to simplify the internal reference miner and remove all\n> > dependencies on cryptopp (it's the only place we use cryptopp instead of\n> > OpenSSL).\n> > \n> > Unfortunately, cryptopp is also used to calculate getwork \"midstate\".\n> > This field is redundant and the miner could easily calculate it from the\n> > blockheader so I'd like to remove it.\n> > \n> > Any thoughts? Where should such a change should be announced so all\n> > miners can be upgraded?\n> \n> I think one of the pools was already working on something like that?\n> I'm pretty sure it can be removed, and I'm pretty sure somebody has\n> already field-tested that guess.\n\nI tested removing midstate myself, and found at least one miner (cpuminer \nIIRC) requires it.", "summary": "A proposal to simplify the internal reference miner by removing dependencies on cryptopp and the getwork \"midstate\" field is being discussed."}, {"author": "John Smith", "date": "2011-09-29T10:23:32", "message_text_only": "Nils,\n\nSounds good. I'm also doubtful of depending on two crypto libraries when\nOpenSSL does perfectly well.\n\nHowever, losing compatibility with miners is not very nice. Is there really\nnot a way to compute midstate with OpenSSL?\n\nJS\n\nOn Mon, Sep 26, 2011 at 7:42 PM, Nils Schneider <nils at nilsschneider.net>wrote:\n\n> Hey,\n>\n> I'd like to simplify the internal reference miner and remove all\n> dependencies on cryptopp (it's the only place we use cryptopp instead of\n> OpenSSL).\n>\n> Unfortunately, cryptopp is also used to calculate getwork \"midstate\".\n> This field is redundant and the miner could easily calculate it from the\n> blockheader so I'd like to remove it.\n>\n> Any thoughts? Where should such a change should be announced so all\n> miners can be upgraded?\n>\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure contains a\n> definitive record of customers, application performance, security\n> threats, fraudulent activity and more. Splunk takes this data and makes\n> sense of it. Business sense. IT sense. Common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110929/5081cf92/attachment.html>", "summary": "A proposal to simplify the internal reference miner by removing dependencies on cryptopp and calculating getwork \"midstate\" from the blockheader."}, {"author": "Nils Schneider", "date": "2011-09-29T11:40:37", "message_text_only": "Yes, that's possible and what\nhttps://github.com/bitcoin/bitcoin/pull/535 does. However, deprecating\nmidstate (and hash1) would allow for much cleaner code.\n\nA pull request for marking midstate (and hash1) as deprecated can be\nfound at https://github.com/bitcoin/bitcoin/pull/538\n\nOn 29.09.2011 12:23, John Smith wrote:\n> Nils,\n> \n> Sounds good. I'm also doubtful of depending on two crypto libraries when\n> OpenSSL does perfectly well.\n> \n> However, losing compatibility with miners is not very nice. Is there\n> really not a way to compute midstate with OpenSSL?\n> \n> JS\n> \n> On Mon, Sep 26, 2011 at 7:42 PM, Nils Schneider <nils at nilsschneider.net\n> <mailto:nils at nilsschneider.net>> wrote:\n> \n>     Hey,\n> \n>     I'd like to simplify the internal reference miner and remove all\n>     dependencies on cryptopp (it's the only place we use cryptopp instead of\n>     OpenSSL).\n> \n>     Unfortunately, cryptopp is also used to calculate getwork \"midstate\".\n>     This field is redundant and the miner could easily calculate it from the\n>     blockheader so I'd like to remove it.\n> \n>     Any thoughts? Where should such a change should be announced so all\n>     miners can be upgraded?\n> \n>     ------------------------------------------------------------------------------\n>     All the data continuously generated in your IT infrastructure contains a\n>     definitive record of customers, application performance, security\n>     threats, fraudulent activity and more. Splunk takes this data and makes\n>     sense of it. Business sense. IT sense. Common sense.\n>     http://p.sf.net/sfu/splunk-d2dcopy1\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n>", "summary": "A pull request for deprecating midstate and hash1 in Bitcoin's code has been made to simplify the internal reference miner and remove dependencies on cryptopp."}, {"author": "Stefan Thomas", "date": "2011-09-29T11:48:25", "message_text_only": "BitcoinJS uses OpenSSL to calculate midstate:\n\nhttps://github.com/bitcoinjs/node-bitcoin-p2p/blob/master/native.cc#L380\n\n\nOn 9/29/2011 1:40 PM, Nils Schneider wrote:\n> Yes, that's possible and what\n> https://github.com/bitcoin/bitcoin/pull/535 does. However, deprecating\n> midstate (and hash1) would allow for much cleaner code.\n>\n> A pull request for marking midstate (and hash1) as deprecated can be\n> found at https://github.com/bitcoin/bitcoin/pull/538\n>\n> On 29.09.2011 12:23, John Smith wrote:\n>> Nils,\n>>\n>> Sounds good. I'm also doubtful of depending on two crypto libraries when\n>> OpenSSL does perfectly well.\n>>\n>> However, losing compatibility with miners is not very nice. Is there\n>> really not a way to compute midstate with OpenSSL?\n>>\n>> JS\n>>\n>> On Mon, Sep 26, 2011 at 7:42 PM, Nils Schneider<nils at nilsschneider.net\n>> <mailto:nils at nilsschneider.net>>  wrote:\n>>\n>>      Hey,\n>>\n>>      I'd like to simplify the internal reference miner and remove all\n>>      dependencies on cryptopp (it's the only place we use cryptopp instead of\n>>      OpenSSL).\n>>\n>>      Unfortunately, cryptopp is also used to calculate getwork \"midstate\".\n>>      This field is redundant and the miner could easily calculate it from the\n>>      blockheader so I'd like to remove it.\n>>\n>>      Any thoughts? Where should such a change should be announced so all\n>>      miners can be upgraded?\n>>\n>>      ------------------------------------------------------------------------------\n>>      All the data continuously generated in your IT infrastructure contains a\n>>      definitive record of customers, application performance, security\n>>      threats, fraudulent activity and more. Splunk takes this data and makes\n>>      sense of it. Business sense. IT sense. Common sense.\n>>      http://p.sf.net/sfu/splunk-d2dcopy1\n>>      _______________________________________________\n>>      Bitcoin-development mailing list\n>>      Bitcoin-development at lists.sourceforge.net\n>>      <mailto:Bitcoin-development at lists.sourceforge.net>\n>>      https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure contains a\n> definitive record of customers, application performance, security\n> threats, fraudulent activity and more. Splunk takes this data and makes\n> sense of it. Business sense. IT sense. Common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "BitcoinJS plans to remove dependencies on cryptopp and use OpenSSL to calculate midstate, which is currently redundant and easily calculable."}, {"author": "solar", "date": "2011-09-29T12:49:46", "message_text_only": "It's just simple SHA2, you can implement the whole thing easily without dragging in a huge lib like OpenSSL.  I guess I haven't looked at it recently but the original CPU miner was just implemented locally in bitcoin and didn't use any libs.\n\nIt's just that because it's block based, there is no need to ever recalculate the first half since the brute forcing value is in the second half of the block..\n\nThis was the original prototype for the OpenCL miner without eliminating redundant calculations and it shows the block1 and block2 calculations clearly.\n\nhttp://heliacal.net/~solar/bitcoin/sha256.cl\n\nLaszlo\n\nOn Sep 29, 2011, at 11:48 AM, Stefan Thomas wrote:\n\n> BitcoinJS uses OpenSSL to calculate midstate:\n> \n> https://github.com/bitcoinjs/node-bitcoin-p2p/blob/master/native.cc#L380\n> \n> \n> On 9/29/2011 1:40 PM, Nils Schneider wrote:\n>> Yes, that's possible and what\n>> https://github.com/bitcoin/bitcoin/pull/535 does. However, deprecating\n>> midstate (and hash1) would allow for much cleaner code.\n>> \n>> A pull request for marking midstate (and hash1) as deprecated can be\n>> found at https://github.com/bitcoin/bitcoin/pull/538\n>> \n>> On 29.09.2011 12:23, John Smith wrote:\n>>> Nils,\n>>> \n>>> Sounds good. I'm also doubtful of depending on two crypto libraries when\n>>> OpenSSL does perfectly well.\n>>> \n>>> However, losing compatibility with miners is not very nice. Is there\n>>> really not a way to compute midstate with OpenSSL?\n>>> \n>>> JS\n>>> \n>>> On Mon, Sep 26, 2011 at 7:42 PM, Nils Schneider<nils at nilsschneider.net\n>>> <mailto:nils at nilsschneider.net>>  wrote:\n>>> \n>>>     Hey,\n>>> \n>>>     I'd like to simplify the internal reference miner and remove all\n>>>     dependencies on cryptopp (it's the only place we use cryptopp instead of\n>>>     OpenSSL).\n>>> \n>>>     Unfortunately, cryptopp is also used to calculate getwork \"midstate\".\n>>>     This field is redundant and the miner could easily calculate it from the\n>>>     blockheader so I'd like to remove it.\n>>> \n>>>     Any thoughts? Where should such a change should be announced so all\n>>>     miners can be upgraded?\n>>> \n>>>     ------------------------------------------------------------------------------\n>>>     All the data continuously generated in your IT infrastructure contains a\n>>>     definitive record of customers, application performance, security\n>>>     threats, fraudulent activity and more. Splunk takes this data and makes\n>>>     sense of it. Business sense. IT sense. Common sense.\n>>>     http://p.sf.net/sfu/splunk-d2dcopy1\n>>>     _______________________________________________\n>>>     Bitcoin-development mailing list\n>>>     Bitcoin-development at lists.sourceforge.net\n>>>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> \n>>> \n>> \n>> ------------------------------------------------------------------------------\n>> All the data continuously generated in your IT infrastructure contains a\n>> definitive record of customers, application performance, security\n>> threats, fraudulent activity and more. Splunk takes this data and makes\n>> sense of it. Business sense. IT sense. Common sense.\n>> http://p.sf.net/sfu/splunk-d2dcopy1\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> \n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure contains a\n> definitive record of customers, application performance, security\n> threats, fraudulent activity and more. Splunk takes this data and makes\n> sense of it. Business sense. IT sense. Common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "The original CPU miner for Bitcoin didn't use any libraries like OpenSSL, and it's possible to implement SHA2 without it."}], "thread_summary": {"title": "Deprecating \"midstate\" in getwork?", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "Jeff Garzik", "solar", "Nils Schneider", "Stefan Thomas"], "messages_count": 7, "total_messages_chars_count": 12235, "convo_summary": "A proposal to simplify the internal reference miner by removing dependencies on cryptopp and the getwork \"midstate\" field is being discussed. A pull request has been made to deprecate midstate and hash1 in Bitcoin's code to remove dependencies on cryptopp. BitcoinJS plans to remove dependencies on cryptopp and use OpenSSL to calculate midstate. The original CPU miner for Bitcoin didn't use any libraries like OpenSSL."}}, {"title": "[Bitcoin-development] More denial-of-service prevention code to review", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-27T17:12:09", "message_text_only": "Pull request:\n  https://github.com/bitcoin/bitcoin/pull/534\n\nDenial-of-service prevention: orphan blocks\n\nThe attack this prevents: Generate valid \"orphan\" blocks and send them\nto a bitcoin node. Orphan blocks are blocks that are not in the main\nblockchain, and before this patch the bitcoin client would store an\narbitrary number of them in memory, in case they later became part of\nthe main chain.\n\nTwo checks are added:\n\n1) Orphan blocks before the last blockchain lock-in are rejected, and\nif the node sends enough of those obviously-not-part-of-the-main-chain\nblocks it will be disconnected and banned.\n\n2) Orphan blocks must have a plausible proof-of-work. It is impossible\nfor a difficulty 1.0 block to follow a difficulty 1-million block (it\nwould take at least 19 months for difficulty to drop from 1-million to\n1). Orphan blocks with too-low proof-of-work are ignored, and if a\nnode sends ten of them it is disconnected/banned.\n\nRequiring plausible proof-of-work for orphan blocks will make this\nattack too expensive to attempt (you would have to generate valid\nblocks at current difficulty).\n\n-- \n--\nGavin Andresen", "summary": "A new patch has been added to Bitcoin's code to prevent denial-of-service attacks by rejecting orphan blocks with implausible proof-of-work."}], "thread_summary": {"title": "More denial-of-service prevention code to review", "categories": ["Bitcoin-development"], "authors": ["Gavin Andresen"], "messages_count": 1, "total_messages_chars_count": 1125}}, {"title": "[Bitcoin-development] Pull request for translation - who reviews it?", "thread_messages": [{"author": "david at bitcoin.se", "date": "2011-09-27T18:28:13", "message_text_only": "Hi all,\n\nI posted this question on the forums but got no answers.\n\nI'd like to make some improvements to the Swedish translation of the\nclient. I understand the technical side of making a pull request etc.,\nbut will my request be accepted? There aren't many people in the\nproject who can judge if the Swedish translation is good or not, so\nwill it simply be accepted if noone opposes it?\n\nPrevious Swedish translations seem to have been commited by codler, is\nthis person \"responsible\" for the Swedish translation? Related to\nthis, is there anywhere I can see a list of people who have\npermissions to make a pull?\n\nDavid", "summary": "A user seeks advice on improving the Swedish translation of a client and wonders if their pull request will be accepted."}, {"author": "Matt Corallo", "date": "2011-09-27T18:56:18", "message_text_only": "On Tue, 2011-09-27 at 20:28 +0200, david at bitcoin.se wrote:\n> Hi all,\n> \n> I posted this question on the forums but got no answers.\nMost developers treat the forums as write-only or just ignore them all\ntogether, they are way too full of junk to bother reading.\n> \n> I'd like to make some improvements to the Swedish translation of the\n> client. I understand the technical side of making a pull request etc.,\n> but will my request be accepted? There aren't many people in the\n> project who can judge if the Swedish translation is good or not, so\n> will it simply be accepted if noone opposes it?\nTranslation updates are pretty much just blindly pulled unless someone\nopposes. \n> \n> Previous Swedish translations seem to have been commited by codler, is\n> this person \"responsible\" for the Swedish translation? \nNo one is responsible for translations in Bitcoin, though it would be\nnice to have people agree to keep their translations up-to-date when\nthey submit new ones...\n> Related to\n> this, is there anywhere I can see a list of people who have\n> permissions to make a pull?\nAnyone can make a pull request, people who can push to the bitcoin repo\n(ie can pull a pull request) are Gavin, tcatm, sipa, jgarzik, and\nalexwaters.\n\nMatt", "summary": "A developer wants to improve the Swedish translation of the Bitcoin client and wonders if their pull request will be accepted without opposition. Translation updates are typically accepted unless someone objects. No one is responsible for translations in Bitcoin, and anyone can make a pull request."}], "thread_summary": {"title": "Pull request for translation - who reviews it?", "categories": ["Bitcoin-development"], "authors": ["david at bitcoin.se", "Matt Corallo"], "messages_count": 2, "total_messages_chars_count": 1856, "convo_summary": "A user on bitcoin.se seeks advice on improving the Swedish translation of a client and wonders if their pull request will be accepted. Developer Matt Corallo responds that translation updates are typically accepted unless someone objects, and anyone can make a pull request as no one is responsible for translations in Bitcoin."}}, {"title": "[Bitcoin-development] Multisignature transations", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-09-29T16:07:41", "message_text_only": "Design discussion:  https://gist.github.com/39158239e36f6af69d6f\nPull request:  https://github.com/bitcoin/bitcoin/pull/541\n\nInitial support for multisignature transactions\n\nThis adds initial support for three new types of transactions:\n(a and b)\n(a or b)\n(a and b) or c\n\n... where a/b/c are keys. These new transaction types will enable\nbetter wallet security and backup in future versions of bitcoin.\n\nI've taken a conservative approach with this initial pull; the new\ntransaction types will be relayed and included in blocks, but are\nignored by the wallet code, so will not affect the balance and will\nnever be considered available to spend. I'm going to start a\ndiscussion on bitcoin-dev to do a bit of a brain-dump on what NOT to\ndo with multi-signature transactions (there are several potential\nattacks that we'll need to be careful to avoid).\n\nI'll be creating a multisig_testing branch in the gavinandresen github\nfork that WILL add multisig transactions to the balance, will have a\nnew RPC call to create multisig transactions, and will be able to\nspend the multisig transactions; that will be for testing this PULL\nonly for now.\n=======================\n\nHere's the discussion of potential attacks that occurred to me while I\nwas working on this:\n\n+ Attacker has an account and a funding address/key (\"a\") at a\nshared-wallet service.  Attacker also has their own address/key (\"b\").\n+ They send 100 bitcoins that can be spent by (a or b).  Note that the\nshared-wallet service can't stop the attacker from doing that.\n\nIF the shared-wallet service credits their account (because \"a\" can\nspend the coins), then Bad Things might happen:\n\n+ The shared-wallet service probably assumes that it controls all the\nkeys in its wallet, and the only time coins in its wallet will be\nspent will be when it issues a send* RPC command. But the attacker can\nspend using \"b\" anytime they like.\n\n+ If the shared-wallet service allows importing of keys then the\nattacker might be able to get double-credit by importing \"b\"\n(depending on what the 'import private key' code does).\n\nThe pull I've submitted doesn't have any of those issues because\nmultisignature transactions are not credited / added to the wallet.\n\nGoing forward, I think the right thing to do is only add\nmultisignature transactions to the wallet's balance (and make them\navailable to spend) if the public half of ALL of the keys involved are\nknown to the wallet.  The private half of the key may not be in the\nwallet (maybe it is on another device or maybe it is a deterministic\nbackup master key protected by a passphrase), but the public key must\nbe known and in the wallet.\n\n\nI'd really like to get this into the 0.5 release because it will\nenable much better wallet security and backup in some future release\nor alternative client (but these transaction types need to be relayed\nand mined BEFORE then to make that possible).\n\n-- \n--\nGavin Andresen", "summary": "Initial support for multisignature transactions has been added to Bitcoin, enabling better wallet security and backup in future versions. Potential attacks have been discussed."}, {"author": "Mike Hearn", "date": "2011-09-30T16:25:49", "message_text_only": ">\n> This adds initial support for three new types of transactions:\n> (a and b)\n> (a or b)\n> (a and b) or c\n>\n\nDoes this mean dispute mediation (2-of-3) will not be supported? I thought\nthe plan was also to allow CHECKMULTISIG for smallish numbers of keys.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20110930/8500a46b/attachment.html>", "summary": "New transaction types (a and b), (a or b), and (a and b) or c are added, but it's unclear if dispute mediation will be supported."}, {"author": "Gregory Maxwell", "date": "2011-09-30T16:32:11", "message_text_only": "On Fri, Sep 30, 2011 at 12:25 PM, Mike Hearn <mike at plan99.net> wrote:\n>> This adds initial support for three new types of transactions:\n>> (a and b)\n>> (a or b)\n>> (a and b) or c\n>\n> Does this mean dispute mediation (2-of-3) will not be supported? I thought\n> the plan was also to allow CHECKMULTISIG for smallish numbers of keys.\n\nThe ease of omitting useful cases is why I was strongly supporting the\nfull RPN boolean validation, even though it's harder to get good\ntesting confidence.", "summary": "New transaction types added: (a and b), (a or b), (a and b) or c. Dispute mediation (2-of-3) may not be supported. RPN boolean validation recommended."}, {"author": "Gavin Andresen", "date": "2011-09-30T17:21:33", "message_text_only": ">> Does this mean dispute mediation (2-of-3) will not be supported?\n\nNot with this PULL-- I think wallet security and backup is a critical\nfeature, so that is what this is for.\n\n> I thought the plan was also to allow CHECKMULTISIG for smallish numbers of keys.\n\ngroffer pointed out that might cause problems when transaction volume\nramps up, because each CHECKMULTISIG counts as 20 sigops, and there is\na limit to the number of sigops you can put into a block. And since it\nisn't needed for wallet security and backup I dropped it.\n\nAccepting this does not preclude adding more 'standard' transaction\ntypes in the future.\n\n-- \n--\nGavin Andresen", "summary": "Dispute mediation will not be supported in this pull request. Wallet security and backup are prioritized, and CHECKMULTISIG may cause issues with transaction volume."}, {"author": "Gregory Maxwell", "date": "2011-09-30T17:29:52", "message_text_only": "On Fri, Sep 30, 2011 at 1:21 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> Accepting this does not preclude adding more 'standard' transaction\n> types in the future.\n\nI think 2 of 3 is a _far_ more useful example than (a or b), \u00a0it is\nthe prototype for a normal escrow transaction., and still only results\nin three address and at most two signatures like the (A and B) or C\ncase.\n\nYou can also replicate the functionality of (a or b) in a hashish and\ninefficient sort of way with two of three by simply using a public\nknown key as one of the roles.", "summary": "Gavin Andresen suggests that accepting the 2 of 3 transaction is more useful than the (a or b) transaction, and more transaction types may be added in the future."}, {"author": "Gavin Andresen", "date": "2011-09-30T17:57:38", "message_text_only": "RE: 2 of 3 being far more useful:\n\nSo create a clean pull request, unit tests, and test plan for an\n\"IsStandard\" 2-of-3 transaction, either using CHECKMULTISIG or\ngroffers proposal:\n\n0\nOVER 2SWAP CHECKSIG SWAP HASH160 {pk1hash} EQUAL BOOLAND ADD\nOVER 2SWAP CHECKSIG SWAP HASH160 {pk2hash} EQUAL BOOLAND ADD\nOVER 2SWAP CHECKSIG SWAP HASH160 {pk3hash} EQUAL BOOLAND ADD\n2 GREATERTHANOREQUAL\n\nThe low-level support is relatively easy, reporting these transactions\nin listtransactions and figuring out if or how to report them in your\nwallet balance is tricky.\n\nI generated and then spent three multisig transactions on testnet:\n http://blockexplorer.com/testnet/block/0000000000cfe382f690777e3b52ea255717122465db6fcfd80efdf2d0080d8b\n\nCode I used to send them is:\n https://github.com/gavinandresen/bitcoin-git/tree/multisig_testing\n(that code is NOT intended for mainline bitcoin, I just needed a way\nof testing the new transactions).\n\n-- \n--\nGavin Andresen", "summary": "Create a clean pull request, unit tests, and test plan for an \"IsStandard\" 2-of-3 transaction using CHECKMULTISIG or groffers proposal."}], "thread_summary": {"title": "Multisignature transations", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn", "Gregory Maxwell", "Gavin Andresen"], "messages_count": 6, "total_messages_chars_count": 5991, "convo_summary": "Bitcoin has added initial support for multisignature transactions, improving wallet security and backup. New transaction types have been added, but dispute mediation may not be supported. Wallet security and backup are prioritized over dispute mediation. More transaction types may be added in the future. A clean pull request, unit tests, and test plan are needed for an \"IsStandard\" 2-of-3 transaction."}}]