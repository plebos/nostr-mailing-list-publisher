[
    {
        "title": "[Bitcoin-development] The insecurity of merge-mining",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-01-01T04:53:42",
                "message_text_only": "On Tue, Dec 31, 2013 at 01:14:05AM +0000, Luke-Jr wrote:\n> On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:\n> > that you are using merge-mining is a red-flag because without majority, or\n> > at least near-majority, hashing power an attacker can 51% attack your\n> > altcoin at negligible cost by re-using existing hashing power.\n> \n> I strongly disagree on this isolated point. Using the same logic, Bitcoin is \n> vulnerable to an attacker at negligible cost by re-using existing hashing \n> power from mining Namecoin. Any non-scam altcoin is pretty safe using merged \n> mining, since any would-be attacker is going to have it in their interests to \n> invest in the altcoin instead of attacking it. It's only the scam ones that \n> want to pump & dump with no improvements, that are really at risk here.\n> \n> The rational decision for a non-scam altcoin, is to take advantage of merged \n> mining to get as much security as possible. There are also some possible \n> tricks to get the full security of the bitcoin miners even when not all \n> participate in your altcoin (but this area probably needs some studying to get \n> right).\n\nYou assume the value of a crypto-currency is equal to all miners, it's\nnot.\n\nSuppose I create a merge-mined Zerocoin implementation with a 1:1\nBTC/ZTC exchange rate enforced by the software. You can't argue this is\na scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the\nonly thing you can do with the coin is get some privacy. But inevitably\nsome miners won't agree that enabling better privacy is a good thing, or\ntheir local governments won't. Either way, they can attack the Zerocoin\nmerge-mined chain with a marginal cost of nearly zero.\n\nOTOH if the Zerocoin scheme was implemented by embedding ZTC\ntransactions within standard Bitcoin transactions - even without any\nattempt at hiding them - the attackers would need a 50% majority of\nhashing power to succeed. Of course potentially slow confirmations is a\ntrade-off, but that's likely a perfectly OK trade-off in this case.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/31697ca5/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-01-01T05:09:27",
                "message_text_only": "On Wednesday, January 01, 2014 4:53:42 AM Peter Todd wrote:\n> On Tue, Dec 31, 2013 at 01:14:05AM +0000, Luke-Jr wrote:\n> > On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:\n> > > that you are using merge-mining is a red-flag because without majority,\n> > > or at least near-majority, hashing power an attacker can 51% attack\n> > > your altcoin at negligible cost by re-using existing hashing power.\n> > \n> > I strongly disagree on this isolated point. Using the same logic, Bitcoin\n> > is vulnerable to an attacker at negligible cost by re-using existing\n> > hashing power from mining Namecoin. Any non-scam altcoin is pretty safe\n> > using merged mining, since any would-be attacker is going to have it in\n> > their interests to invest in the altcoin instead of attacking it. It's\n> > only the scam ones that want to pump & dump with no improvements, that\n> > are really at risk here.\n> > \n> > The rational decision for a non-scam altcoin, is to take advantage of\n> > merged mining to get as much security as possible. There are also some\n> > possible tricks to get the full security of the bitcoin miners even when\n> > not all participate in your altcoin (but this area probably needs some\n> > studying to get right).\n> \n> You assume the value of a crypto-currency is equal to all miners, it's\n> not.\n> \n> Suppose I create a merge-mined Zerocoin implementation with a 1:1\n> BTC/ZTC exchange rate enforced by the software. You can't argue this is\n> a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the\n> only thing you can do with the coin is get some privacy. But inevitably\n> some miners won't agree that enabling better privacy is a good thing, or\n> their local governments won't. Either way, they can attack the Zerocoin\n> merge-mined chain with a marginal cost of nearly zero.\n\nNot necessarily. If Zerocoin was tied directly to Bitcoin proof-of-work, the \nworst they could do is not-participate by mining empty blocks.\n\n> OTOH if the Zerocoin scheme was implemented by embedding ZTC\n> transactions within standard Bitcoin transactions - even without any\n> attempt at hiding them - the attackers would need a 50% majority of\n> hashing power to succeed. Of course potentially slow confirmations is a\n> trade-off, but that's likely a perfectly OK trade-off in this case.\n\nPotentially slow confirmation is also the only shortcoming of using Bitcoin's \nproof-of-work directly.\n\nLuke"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-01T05:25:14",
                "message_text_only": "On Wed, Jan 01, 2014 at 05:09:27AM +0000, Luke-Jr wrote:\n> > You assume the value of a crypto-currency is equal to all miners, it's\n> > not.\n> > \n> > Suppose I create a merge-mined Zerocoin implementation with a 1:1\n> > BTC/ZTC exchange rate enforced by the software. You can't argue this is\n> > a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the\n> > only thing you can do with the coin is get some privacy. But inevitably\n> > some miners won't agree that enabling better privacy is a good thing, or\n> > their local governments won't. Either way, they can attack the Zerocoin\n> > merge-mined chain with a marginal cost of nearly zero.\n> \n> Not necessarily. If Zerocoin was tied directly to Bitcoin proof-of-work, the \n> worst they could do is not-participate by mining empty blocks.\n\nNope. Tying the alt-coin difficulty to the Bitcoin difficulty isn't some\nmagic way to avoid a 51% attack - you still need a majority of\nconsensus. The attackers can still mine a conflicting chain and there's\nstill no reasonable way to choose between the two chains other than\nproof-of-something. Even worse, then can do a data-hiding attack by\nmining a conflicting chain without publishing the blockchain data, then\nrevealing it some time in the future, or just sowing FUD by making it\nclear that the mining is happening. Like it or not crypto-coins solve\ndouble-spending with proof-of-publication, and that can't be done\nwithout some kind of mathematically verifiable majority aligned with the\ninterests of the crypto-coin users.\n\nRecall that my zookeyv(1) and zerocoin alt(2) proposals from last summer\nwas specifically designed to take that situation into account, and of\ncourse could at best only make it clear that it was happening and how\nmany Bitcoins needed to be sacrificed to make the chain secure.\n\n\n1) #bitcoin-wizards, 2013-05-31\n2) http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02472.html\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/f2599b87/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-03T19:14:25",
                "message_text_only": "On 1/1/14, Peter Todd <pete at petertodd.org> wrote:\n> On Tue, Dec 31, 2013 at 01:14:05AM +0000, Luke-Jr wrote:\n>> On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:\n>> > that you are using merge-mining is a red-flag because without majority,\n>> > or\n>> > at least near-majority, hashing power an attacker can 51% attack your\n>> > altcoin at negligible cost by re-using existing hashing power.\n>>\n>> I strongly disagree on this isolated point. Using the same logic, Bitcoin\n>> is\n>> vulnerable to an attacker at negligible cost by re-using existing hashing\n>>\n>> power from mining Namecoin. Any non-scam altcoin is pretty safe using\n>> merged\n>> mining, since any would-be attacker is going to have it in their interests\n>> to\n>> invest in the altcoin instead of attacking it. It's only the scam ones\n>> that\n>> want to pump & dump with no improvements, that are really at risk here.\n>>\n>> The rational decision for a non-scam altcoin, is to take advantage of\n>> merged\n>> mining to get as much security as possible. There are also some possible\n>> tricks to get the full security of the bitcoin miners even when not all\n>> participate in your altcoin (but this area probably needs some studying to\n>> get\n>> right).\n>\n> You assume the value of a crypto-currency is equal to all miners, it's\n> not.\n\nThey should be able to sell the reward at similar prices in the market.\nAttackers are losing the opportunity cost of mining the currency by\nattacking it, just like with Bitcoin.\n\n> Suppose I create a merge-mined Zerocoin implementation with a 1:1\n> BTC/ZTC exchange rate enforced by the software. You can't argue this is\n> a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the\n> only thing you can do with the coin is get some privacy.\n\nThe idea of sacrificing something external and make bitcoins appear\nstill sounds crazy to me.\nI don't see how this pegging contributes in anything to a technical\nargument against merged mining, just looks like a moral argument\nagainst altcoin in general.\n\nBut anyway, if you're going to make bitcoin's validation dependent on\nsome external chain, it surprises me even more that you prefer that\nexternal dependency to be non-merge mineable.\n\n> But inevitably\n> some miners won't agree that enabling better privacy is a good thing, or\n> their local governments won't. Either way, they can attack the Zerocoin\n> merge-mined chain with a marginal cost of nearly zero.\n\nOk, so either we assume that the external-pegging hardfork wasn't a\nconsensus or we just forget about the pegging and go back to talk\nabout merged mining in general.\nYour argument is still \"for some reason some miners don't like the MM\naltcoin and prefer to attack it than to be profitable miners\".\n\nIf I mine BTC + NMC and you only mine BTC, it will be harder for you\nto compete against me: I can afford higher costs than you for the same\nBTC reward, since I'm also getting NMC.\n\nWhat you're saying is that Litecoin is more secure than Namecoin\nbecause while Litecoin can only be attacked by external attackers and\ncurrent miners of other scrypt coins, Namecoin can also be attacked\nthe Bitcoin miners that aren't currently mining Namecoin.\nThis doesn't sound very reasonable to me.\nI think Namecoin is more secure than Litecoin and new coins should be\ncreated with SHA256 and merged mining in mind. At least merged mine\nwith Litecoin if the still believe scrypt is so \"anti-ASIC\" and\n\"centralization-resistant\" (in fact Litecoin is more centralized than\nbitcoin with their shorter block intervals since better connections\nare favored, but that's another story).\n\nMerged mining is not only about not competing for proof of work like\nSatoshi defended.\nIt is also about wasting resources: the more mining subsidies to\ndifferent chains, the more wasted resources.\nBy criticizing merged mining you're also indirectly legitimizing the\nsame scamcoin madness you criticize.\nIf you don't plan to merge mine, having SHA256 doesn't make sense\nbecause that makes you more fragile to potential bitcoin miners\nattacks and chainhopers.\nI don't think we would have this many alts living right now if all\nproof of work was SHA256.\n\nSo if the \"anti-asic PoW\" myth and the absurd emerging morals of\n\"GPU-mining as an universal right\" weren't enough, you want to add an\nequally false \"merged mining is insecure\" to the collection of\narguments supporting the search of the more absurd possible PoW holy\ngrail.\n\nPlease try to prove that MM is insecure and I'll try to prove your\nwrong. But we don't need zerocoin or an artificial pegging to discuss\nabout this.\n\nI think Namecoin has a lower reward for miners than litecoin and still\nhas much better security. I haven't run the numbers but, will you deny\nit?\nHow many amazon VMs do you need to attack each one of them?"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-03T21:01:39",
                "message_text_only": "On Fri, Jan 03, 2014 at 08:14:25PM +0100, Jorge Tim\u00f3n wrote:\n> > You assume the value of a crypto-currency is equal to all miners, it's\n> > not.\n> \n> They should be able to sell the reward at similar prices in the market.\n> Attackers are losing the opportunity cost of mining the currency by\n> attacking it, just like with Bitcoin.\n\nAs I showed with my zerocoin example, often that is not the case, e.g. I\ndo not support anonymity, or *can't* support it because of the local\nlaws.\n\nOr for that matter, really boring examples like there's two competing\nimplementations of some basic idea and we'd rather the winner be picked\non technical merits rather than \"I have a grudge and a small pool so\nI'll this upstart at birth\"\n\n> > Suppose I create a merge-mined Zerocoin implementation with a 1:1\n> > BTC/ZTC exchange rate enforced by the software. You can't argue this is\n> > a scamcoin; no-one is getting rich. There's a 1:1 exchange rate so the\n> > only thing you can do with the coin is get some privacy.\n> \n> The idea of sacrificing something external and make bitcoins appear\n> still sounds crazy to me.\n> I don't see how this pegging contributes in anything to a technical\n> argument against merged mining, just looks like a moral argument\n> against altcoin in general.\n\nIt's a thought experiment; read my original post on how to make a\nzerocoin alt-chain and it might make more sense:\n\nhttp://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02472.html\n\nEven better might be to use a merge-mined version of Mastercoin as an\nexample, where the initial distribution of coins is fixed at genesis and\nforward from that is independent of the Bitcoin blockchain.\n\n\n> > But inevitably\n> > some miners won't agree that enabling better privacy is a good thing, or\n> > their local governments won't. Either way, they can attack the Zerocoin\n> > merge-mined chain with a marginal cost of nearly zero.\n> \n> Ok, so either we assume that the external-pegging hardfork wasn't a\n> consensus or we just forget about the pegging and go back to talk\n> about merged mining in general.\n> Your argument is still \"for some reason some miners don't like the MM\n> altcoin and prefer to attack it than to be profitable miners\".\n> \n> If I mine BTC + NMC and you only mine BTC, it will be harder for you\n> to compete against me: I can afford higher costs than you for the same\n> BTC reward, since I'm also getting NMC.\n> \n> What you're saying is that Litecoin is more secure than Namecoin\n> because while Litecoin can only be attacked by external attackers and\n> current miners of other scrypt coins, Namecoin can also be attacked\n> the Bitcoin miners that aren't currently mining Namecoin.\n> This doesn't sound very reasonable to me.\n> I think Namecoin is more secure than Litecoin and new coins should be\n> created with SHA256 and merged mining in mind. At least merged mine\n> with Litecoin if the still believe scrypt is so \"anti-ASIC\" and\n> \"centralization-resistant\" (in fact Litecoin is more centralized than\n> bitcoin with their shorter block intervals since better connections\n> are favored, but that's another story).\n> \n> Merged mining is not only about not competing for proof of work like\n> Satoshi defended.\n> It is also about wasting resources: the more mining subsidies to\n> different chains, the more wasted resources.\n> By criticizing merged mining you're also indirectly legitimizing the\n> same scamcoin madness you criticize.\n> If you don't plan to merge mine, having SHA256 doesn't make sense\n> because that makes you more fragile to potential bitcoin miners\n> attacks and chainhopers.\n> I don't think we would have this many alts living right now if all\n> proof of work was SHA256.\n> \n> So if the \"anti-asic PoW\" myth and the absurd emerging morals of\n> \"GPU-mining as an universal right\" weren't enough, you want to add an\n> equally false \"merged mining is insecure\" to the collection of\n> arguments supporting the search of the more absurd possible PoW holy\n> grail.\n> \n> Please try to prove that MM is insecure and I'll try to prove your\n> wrong. But we don't need zerocoin or an artificial pegging to discuss\n> about this.\n> \n> I think Namecoin has a lower reward for miners than litecoin and still\n> has much better security. I haven't run the numbers but, will you deny\n> it?\n> How many amazon VMs do you need to attack each one of them?\n\nI'll give you a hint: \"marginal cost\"\n\nYou're rant has rather little to do with my argument.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000003065f32da26de1deda93eb722bf1dc4a1b787e7d68d282dbc\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/e9aa536c/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-04T00:27:42",
                "message_text_only": "On 1/3/14, Peter Todd <pete at petertodd.org> wrote:\n> On Fri, Jan 03, 2014 at 08:14:25PM +0100, Jorge Tim\u00f3n wrote:\n>> > You assume the value of a crypto-currency is equal to all miners, it's\n>> > not.\n>>\n>> They should be able to sell the reward at similar prices in the market.\n>> Attackers are losing the opportunity cost of mining the currency by\n>> attacking it, just like with Bitcoin.\n>\n> As I showed with my zerocoin example, often that is not the case, e.g. I\n> do not support anonymity, or *can't* support it because of the local\n> laws.\n>\n> Or for that matter, really boring examples like there's two competing\n> implementations of some basic idea and we'd rather the winner be picked\n> on technical merits rather than \"I have a grudge and a small pool so\n> I'll this upstart at birth\"\n\nFor whatever reason, someone wants to attack one chain, fine.\nBut if the market is competitive enough and/or the reward of the\nMM-coin is high enough comparatively to the biggest ones in the MM\ngroup, then it is not profitable to mine.\nIf you make a MM coin, it's fees reward are 5% of BTC + NMC rewards,\nand a jurisdiction somehow prohibits to mine the new coin (I can't\nimagine such a law being enforced, but I'll follow your argument),\nthen BTC + NMC miners will just tend to disappear from that\njurisdiction.\n\n> It's a thought experiment; read my original post on how to make a\n> zerocoin alt-chain and it might make more sense:\n>\n> http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02472.html\n>\n> Even better might be to use a merge-mined version of Mastercoin as an\n> example, where the initial distribution of coins is fixed at genesis and\n> forward from that is independent of the Bitcoin blockchain.\n\nI've read it until the end this time, and I have many doubts about\nproof of sacrifice as a security mechanism. Although it's certainly\nnot proof of stake, it smells similarly to me. I'll have to think more\nabout it.\nI still think that link doesn't prove anything against merged mining security.\n\n>> I think Namecoin has a lower reward for miners than litecoin and still\n>> has much better security. I haven't run the numbers but, will you deny\n>> it?\n>> How many amazon VMs do you need to attack each one of them?\n>\n> I'll give you a hint: \"marginal cost\"\n\nPlease, don't give me clues and let's discuss the economics, that's\nprecisely what I want and where I think you're getting it wrong.\nSince you refuse to try to prove that MM is less secure, I'll try\nmyself to prove the opposite.\n\nLet's say we have currencies A, B, C and D, with daily rewards of 70,\n20, 10 and 10 valuns respectively.\n\nA, B and C are merged mined, D is not.\nSo with an equivalent reward to miners and one being merged mined\nwhile the other being independent, what's the more secure chain? C or\nD?\n\nAssuming similar hashing algorithms and perfect competition, the cost\nof producing enough hashing power to obtain 1 valun in rewards from D\nequals the cost of extracting 1 valun in rewards from the group A + B\n+ C.\nLet's define 1 valun as the costs in energy and capital resources to\nproduce X GH/s.\nSo we have the following hashrates for each chain:\n\nA = 100*X GH/s\nB = 100*X GH/s\nC = 100*X GH/s\nD = 10*X GH/s\n\nNow here it comes our attacker paying for amazon servers.\nThe costs in value to rent a server to produce X GH/s during a day\ncannot be lower than 1 valun, given the earlier assumptions. Let's\nassume it is equal to 1 valun for simplicity.\n\nSo the cost to have 50% of D's hashing power for a day is 10 valuns.\nThe cost to to have 50% of C's hashing power for a day is 100 valuns,\nbut, hey, I'll use your hint now.\nMarginal costs.\nSo I'm using 100 valuns to attack C, but I'm still getting my rewards\nfrom A and B as normal.\nAs normal?\nLet's assume it's as normal first.\nI would be getting 90 valuns from chains A and B, so 100 - 90 = 10 valuns.\nMhmm, it seems that although I need to make a considerably bigger\ninvestment in the case of attacking C, in the end the total costs will\nbe the same of attacking D, that is 10 valuns.\nBut, wait, I've doubled the hashrate!!\nMiners were getting 1 valun in reward per valun in mining costs when\nthe hashrate was 100*X GH/s, now A and B hashrates are 200*X GH/s\nbecause I came to mine.\nSome of them will be smart enough to leave fast, but I will be really\ngetting something between 45 and 90 valuns from honestly mining A + B,\nnot 90 valuns as I was assuming.\nSo it turns out that attacking D is actually cheaper than attacking C.\n\nFeel free to ask for corrections in the example if you think it needs them.\nFeel free to bring your edge legal cases back, but please try to do it\non top of the example.\n\nPD I'm eager to read your post on BIP32-ish payment protocol, bloom\nfilters and prefix filters, so I hope I'm not distracting you too much\nwith this."
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-06T15:44:56",
                "message_text_only": "On Sat, Jan 04, 2014 at 01:27:42AM +0100, Jorge Tim\u00f3n wrote:\n> > It's a thought experiment; read my original post on how to make a\n> > zerocoin alt-chain and it might make more sense:\n> >\n> > http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02472.html\n> >\n> > Even better might be to use a merge-mined version of Mastercoin as an\n> > example, where the initial distribution of coins is fixed at genesis and\n> > forward from that is independent of the Bitcoin blockchain.\n> \n> I've read it until the end this time, and I have many doubts about\n> proof of sacrifice as a security mechanism. Although it's certainly\n> not proof of stake, it smells similarly to me. I'll have to think more\n> about it.\n> I still think that link doesn't prove anything against merged mining security.\n\nIt's not meant to prove anything - the proof-of-sacrificed-bitcoins\nmentioned(*) in it is secure only if Bitcoin itself is secure and\nfunctional. I referred you to it because understanding the system will\nhelp you understand my thinking behind merge-mining.\n\n*) It also mentions proof-of-sacrificed-zerocoins which *is* distinct\nbecause you're sacrificing the thing that the chain is about. Now that\nhas some proof-of-stake tinges to it for sure - I myself am not\nconvinced it is or isn't a viable scheme.\n\n> >> I think Namecoin has a lower reward for miners than litecoin and still\n> >> has much better security. I haven't run the numbers but, will you deny\n> >> it?\n> >> How many amazon VMs do you need to attack each one of them?\n> >\n> > I'll give you a hint: \"marginal cost\"\n> \n> Please, don't give me clues and let's discuss the economics, that's\n> precisely what I want and where I think you're getting it wrong.\n> Since you refuse to try to prove that MM is less secure, I'll try\n> myself to prove the opposite.\n\n<snip>\n\n> Feel free to ask for corrections in the example if you think it needs them.\n> Feel free to bring your edge legal cases back, but please try to do it\n> on top of the example.\n\nYou're argument is perfectly valid and correct, *if* the assumptions\nbehind it hold. The problem is you're assuming miners act rationally and\nhave equal opportunities - that's a very big assumption and I have\nstrong doubts it holds, particularly for alts with a small amount of\nhashing power.\n\nYou know, something that I haven't made clear in this discussion is that\nwhile I think merge-mining is insecure, in the sense of \"should my new\nfancy alt-coin protocol widget use it?\", I *also* don't think regular\nmining is much better. In some cases it will be worse due to social\nfactors. (e.g. a bunch of big pools are going to merge-mine my scheme on\nlaunch day because it makes puppies cuter and kids smile)\n\nAll I'm saying is that if you can afford the transaction fees stuffing\nyour data into the Bitcoin blockchain has orders of magnitude better\nsecurity. I'm not saying it'll be cheap - if miners start trying to\nblock your protocol blacklists they can make it fairly expensive for\nyour alt - but it will be just as secure against reorganization attack\nas Bitcoin itself.\n\n> PD I'm eager to read your post on BIP32-ish payment protocol, bloom\n> filters and prefix filters, so I hope I'm not distracting you too much\n> with this.\n\nHeh, my one line reply might have been a bit harsh because of that. :)\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000bf0a7634ebb2c909bada84ce0dce859e9298d3ac504db3c8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140106/d8ae1307/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-09T17:19:04",
                "message_text_only": "On 1/6/14, Peter Todd <pete at petertodd.org> wrote:\n> On Sat, Jan 04, 2014 at 01:27:42AM +0100, Jorge Tim\u00f3n wrote:\n> It's not meant to prove anything - the proof-of-sacrificed-bitcoins\n> mentioned(*) in it is secure only if Bitcoin itself is secure and\n> functional. I referred you to it because understanding the system will\n> help you understand my thinking behind merge-mining.\n>\n> *) It also mentions proof-of-sacrificed-zerocoins which *is* distinct\n> because you're sacrificing the thing that the chain is about. Now that\n> has some proof-of-stake tinges to it for sure - I myself am not\n> convinced it is or isn't a viable scheme.\n\nI'm not sure I understand all the differences between\nproof-of-sacrificed-bitcoins and proof-of-sacrificed-newcoins, but I'm\nstill convinced this doesn't have anything to do with MM PoW vs PoW.\nThe idea looks very interesting and I will ask you and adam to\nunderstand it better on IRC, but take into account that when you say\n\"merged mining is insecure\" some people hear \"merged mined altcoins\nare less secure than non-MM altcoins\" (which is false) and somehow\nconclude \"scrypt altchains are more secure than SHA256 altchains\".\nWhether we like it or not, many people believe that scrypt, quark or\nprimecoin PoW algorithms are somehow more secure than SHA256, and\nclaims that \"merged mining is insecure\" from core bitcoin developers\ncontribute to spread those beliefs and that no new altcoin has been\ncreated with the intend of being merged mined for quite a while.\nI'm not trying to make you or anyone here responsible for the mistakes\nother people make.\n\nBut rephrasing your claims as \"We're exploring new ideas for altchains\nthat could be more secure than MM...\" sounds very different from \"MM\nis insecure, by the way look at this new idea...\"\n\n>> Feel free to ask for corrections in the example if you think it needs\n>> them.\n>> Feel free to bring your edge legal cases back, but please try to do it\n>> on top of the example.\n>\n> You're argument is perfectly valid and correct, *if* the assumptions\n> behind it hold. The problem is you're assuming miners act rationally and\n> have equal opportunities - that's a very big assumption and I have\n> strong doubts it holds, particularly for alts with a small amount of\n> hashing power.\n\nThat's why I made the offer above.\nWhat you point out is the reason why freicoin started without merged\nmining, to grow its own independent security first, before starting to\nbe merged mined.\n\n> You know, something that I haven't made clear in this discussion is that\n> while I think merge-mining is insecure, in the sense of \"should my new\n> fancy alt-coin protocol widget use it?\", I *also* don't think regular\n> mining is much better. In some cases it will be worse due to social\n> factors. (e.g. a bunch of big pools are going to merge-mine my scheme on\n> launch day because it makes puppies cuter and kids smile)\n\nFair enough.\nDo you see any case where an independently pow validated altcoin is\nmore secure than a merged mined one?\nThe reason why I participated in the discussion was that I believe\nthat merged mined PoW is more secure than\ncompletely-independent-from-bitcoin pow.\nAnd I thought that that was the general understanding in the Bitcoin\ndevelopment community.\n\nIf that's the case, we agree on what's more important to me.\n\nAbout the new proposal, I don't have a firm opinion yet. I'm sorry but\nI have to understand it better and think about it in more depth."
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-10T11:11:28",
                "message_text_only": "On Thu, Jan 09, 2014 at 06:19:04PM +0100, Jorge Tim\u00f3n wrote:\n> On 1/6/14, Peter Todd <pete at petertodd.org> wrote:\n> > On Sat, Jan 04, 2014 at 01:27:42AM +0100, Jorge Tim\u00f3n wrote:\n> > It's not meant to prove anything - the proof-of-sacrificed-bitcoins\n> > mentioned(*) in it is secure only if Bitcoin itself is secure and\n> > functional. I referred you to it because understanding the system will\n> > help you understand my thinking behind merge-mining.\n> >\n> > *) It also mentions proof-of-sacrificed-zerocoins which *is* distinct\n> > because you're sacrificing the thing that the chain is about. Now that\n> > has some proof-of-stake tinges to it for sure - I myself am not\n> > convinced it is or isn't a viable scheme.\n> \n> I'm not sure I understand all the differences between\n> proof-of-sacrificed-bitcoins and proof-of-sacrificed-newcoins, but I'm\n> still convinced this doesn't have anything to do with MM PoW vs PoW.\n\nProof-of-sacrified-bitcoins is always a true sacrifice - provided\nBitcoin itself maintains consensus the proof is a guarantee that\nsomething of value was given up.\n\nProof-of-sacrificed-\"newcoins\" means that within some consensus system I\ncreated a signed statement that *within the system* means I lose\nsomething of value. However that sacrifice is only valid if the\nconsensus of the system includes that sacrifice within the consensus,\nand if the mechanism by which that consensus is maintained has anything\nto do with those sacrifices you quickly find yourself on pretty shakey\nground.\n\n> > You know, something that I haven't made clear in this discussion is that\n> > while I think merge-mining is insecure, in the sense of \"should my new\n> > fancy alt-coin protocol widget use it?\", I *also* don't think regular\n> > mining is much better. In some cases it will be worse due to social\n> > factors. (e.g. a bunch of big pools are going to merge-mine my scheme on\n> > launch day because it makes puppies cuter and kids smile)\n> \n> Fair enough.\n> Do you see any case where an independently pow validated altcoin is\n> more secure than a merged mined one?\n\nSituations where decentralized consensus systems are competing for\nmarket share in some domain certainely apply. For instance if I were to\ncreate a competitor to Namecoin, perhaps because I thought the existing\nallocation of names was unfair, and/or I had technical improvements like\nSPV, it's easy to imagine Namecoin miners deciding to attack my\ncompetitor to preserve the value of their namecoins and domain names\nregistered in Namecoin.\n\nThe problem here is that my new system has a substantial *negative*\nvalue to those existing Namecoin holders - if it catches on the value of\ntheir Namecoin investment in the form of coins and domain names may go\ndown. Thus for them doing nothing has a negative return, attacking my\ncoin has a positive return minus costs, and with merge-mining the costs\nare zero.\n\nWithout merge mining if the value to the participants in the new system\nis greater than the harm done to the participants in the old system the\ntotal work on the new system's chain will still be positive and it has a\nchance of surviving.\n\nOf course, this is what Luke-Jr was getting at when he was talking about\nscam-coins and merge mining: if you're alt-currency is a currency, and\nit catches on, then it dilutes the value of your existing coins and\npeople who own those coins have an incentive to attack the competitor.\nThat's why merge-mined alt-coins that are currencies get often get\nattacked very quickly.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/4706d6f0/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-10T11:25:42",
                "message_text_only": "On Fri, Jan 10, 2014 at 06:11:28AM -0500, Peter Todd wrote:\n> > Fair enough.\n> > Do you see any case where an independently pow validated altcoin is\n> > more secure than a merged mined one?\n> \n> Situations where decentralized consensus systems are competing for\n> market share in some domain certainely apply. For instance if I were to\n> create a competitor to Namecoin, perhaps because I thought the existing\n> allocation of names was unfair, and/or I had technical improvements like\n> SPV, it's easy to imagine Namecoin miners deciding to attack my\n> competitor to preserve the value of their namecoins and domain names\n> registered in Namecoin.\n\nCome to think of it, we've got that exact situation right now: the new\nTwister P2P Microblogging thing has a blockchain for registering\nusernames that could have been easily done with Namecoin, thus in theory\nNamecoin owners have an incentive to make sure the Twister blockchain\ngets killed at birth.\n\nPretty easy to do right now too as the hashing power behind Twister is\nminiscule and probably will stay that way - the only incentive to mining\nis that you get the right to make a \"promoted post\" - called a spam\nmessage in the codebase - that in theory Twister clients are supposed to\nshow to their users. Of course, there's absolutely no way to guarantee\nthat clients actually do that.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/396141e6/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-10T12:37:26",
                "message_text_only": "On 1/10/14, Peter Todd <pete at petertodd.org> wrote:\n> Come to think of it, we've got that exact situation right now: the new\n> Twister P2P Microblogging thing has a blockchain for registering\n> usernames that could have been easily done with Namecoin, thus in theory\n> Namecoin owners have an incentive to make sure the Twister blockchain\n> gets killed at birth.\n\nYou don't have to MM from birth. That I've already agreed is\ndangerous. But if you start with SHA256, then merged mining is a\ntrivial fork at least 3 currencies have done successfully.\nAs said we plan to make Freicoin merge-mineable in the future, and we\nexpect to get much more security after we do.\nThe only \"adverse\" effect may be a temporary drop in price due to the\nnew miners selling all the frc they get until a new price equilibrates\nwith the demand. But that's not really \"bad for the currency\", just to\nthe holders at that moment.\n\n> Pretty easy to do right now too as the hashing power behind Twister is\n> miniscule and probably will stay that way - the only incentive to mining\n> is that you get the right to make a \"promoted post\" - called a spam\n> message in the codebase - that in theory Twister clients are supposed to\n> show to their users. Of course, there's absolutely no way to guarantee\n> that clients actually do that.\n\nIf a system doesn't compensate its miners in a liquid enough way, the\nsystem will probably be insecure, but that's another topic..."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-10T12:29:03",
                "message_text_only": "On 1/10/14, Peter Todd <pete at petertodd.org> wrote:\n>> Fair enough.\n>> Do you see any case where an independently pow validated altcoin is\n>> more secure than a merged mined one?\n>\n> Situations where decentralized consensus systems are competing for\n> market share in some domain certainely apply. For instance if I were to\n> create a competitor to Namecoin, perhaps because I thought the existing\n> allocation of names was unfair, and/or I had technical improvements like\n> SPV, it's easy to imagine Namecoin miners deciding to attack my\n> competitor to preserve the value of their namecoins and domain names\n> registered in Namecoin.\n\nNamecoin, Devcoin and Ixcoin are also currencies and therefore compete\nwith Bitcoin.\nHow is that even Ixcoin (clearly a scamcoin that indirectly damages\nthe image of Bitcoin) has survived?\n\nMy explanation is that miners aren't necessarily holders. It's certain\nthat there's holders who don't mind and \"can't do anything about it\".\nIn fact, I think many miners sell their mined coins for fiat to cover\ntheir investment and costs. The profit margin is reduced as the mining\nmarket becomes more competitive, so even for miners it will get very\nexpensive and risky to do stupid things.\nTalking about stupid things, I don't see many bitcoiners throwing\nrocks at local currency users or barter clubs nor burning down banks\nto \"protect their investment\". Barter is just another competitor in\nthe media of exchange market.\n\n> The problem here is that my new system has a substantial *negative*\n> value to those existing Namecoin holders - if it catches on the value of\n> their Namecoin investment in the form of coins and domain names may go\n> down. Thus for them doing nothing has a negative return, attacking my\n> coin has a positive return minus costs, and with merge-mining the costs\n> are zero.\n\nWhat percentage of Bitcoin/Namecoin miners do you think own namecoins?\nHow much can they afford to lose to attack competition?\n\n> Without merge mining if the value to the participants in the new system\n> is greater than the harm done to the participants in the old system the\n> total work on the new system's chain will still be positive and it has a\n> chance of surviving.\n\nNo, the \"harm to the old system participants\" is distributed among all\nthe participants, not only miners (assuming miners have any\nspeculative position at all).\nI'm not denying that people do crazy and stupid things, but let's at\nleast allow the \"anti-competition attacker\" be equally crazy in both\ncases.\nMiners attacking \"competition\" for one or more of the chains they mine\nare acting irrationally in both cases.\nYou're trying to rationalize the actions of the MM attackers, but\nthey're just being stupid, since if they weren't, they would just try\nto maximize profits.\n\n> Of course, this is what Luke-Jr was getting at when he was talking about\n> scam-coins and merge mining: if you're alt-currency is a currency, and\n> it catches on, then it dilutes the value of your existing coins and\n> people who own those coins have an incentive to attack the competitor.\n> That's why merge-mined alt-coins that are currencies get often get\n> attacked very quickly.\n\nI have many other explanations for the few currencies that died with\nMM (can you remember any name?). At the beginning all altcoins were\nmuch smaller and easier to attack, all of them. Bitcoin mining pools\ndidn't wanted to update to merged mining and didn't acted very\nrationally about it.\nNamecoin went through a really delicate situation just before\nhardforking to MM, but now is by far the most secure altcoin of them\nall, all thanks to MM.\nAll rational bitcoin miners should also mine namecoin. Period. All\nthose who consider it competition with their current Bitcoin\nspeculative position, should just \"attack in the market\" by selling\nthe namecoins as soon as they get them.\nProviding security for a chain DOES NOT give it an utility or rise its demand.\nOperation COSTS DO NOT CAUSE VALUE.\n\nAbout Luke-Jr's thinking, I don't think it's along those lines.\n\nIf you create a new chain for the long term, you should try to\nmaximize its security and that currently means you should merged mine\nwith bitcoin.\nThe main rational reason to never do merged mining is to prevent\ncompetitive and rational miners from crashing the price of your\ncurrency, which is everything a scamcoiner cares about, the price and\nmarket cap.\n\nOf course Luke-Jr can correct me if that's not how he thinks."
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-10T17:22:06",
                "message_text_only": "On Fri, Jan 10, 2014 at 01:29:03PM +0100, Jorge Tim\u00f3n wrote:\n> On 1/10/14, Peter Todd <pete at petertodd.org> wrote:\n> > Situations where decentralized consensus systems are competing for\n> > market share in some domain certainely apply. For instance if I were to\n> > create a competitor to Namecoin, perhaps because I thought the existing\n> > allocation of names was unfair, and/or I had technical improvements like\n> > SPV, it's easy to imagine Namecoin miners deciding to attack my\n> > competitor to preserve the value of their namecoins and domain names\n> > registered in Namecoin.\n> \n> Namecoin, Devcoin and Ixcoin are also currencies and therefore compete\n> with Bitcoin.\n> How is that even Ixcoin (clearly a scamcoin that indirectly damages\n> the image of Bitcoin) has survived?\n\nBecause there aren't that many pools out there and Ixcoin (and devcoin)\nappear to have been lucky enough to servive long enough to get the\nsupport of a reasonably big one. Once you do that, the potential\nattackers have PR to think about. (namecoin especially has a PR\nadvantage) None of this stuff is hard and fast rules after all.\n\n> Talking about stupid things, I don't see many bitcoiners throwing\n> rocks at local currency users or barter clubs nor burning down banks\n> to \"protect their investment\". Barter is just another competitor in\n> the media of exchange market.\n\nThose are all examples where the cost to the \"bitcoiner defending their\ncurrency\" is high - I might get arrested trying to burn down a bank.\n\n\nAnyway, I'm starting to think you're reading too much into my statement\n\"merge mining is insecure\", which, keep in mind, I said in relation to a\nguy who was trying to recruit devs to implement some unknown \"altcoin\"\nthing.\n\nImagine you're one of the first US cave divers back in the early 70's.\nYou've been doing it for only a few years yourself, and you and your\nbuddies, some of them now late, realized pretty quick it's bloody\ndangerous and there's all kinds of ways to get yourself killed. (caving\nitself is bad enough) On the other hand, if you're careful and have good\ntraining it *is* possible to reduce the risks significantly. Meanwhile\nthe media and public in general is starting to pick up on caving and\ncave diving and there's a tonne of new people - most of whome don't seem\nto know what they're doing - are getting into both sports. You just know\nthis is going to lead to a lot of people getting hurt and killed who\nprobably should have just stuck to caving. (IE, stuck to making\nBitcoin-using applications)\n\nIn that context I sure as heck would loudly yell \"CAVE DIVING IS FUCKING\nDANGEROUS, DON'T DO IT\". Sure, that's not quite telling the whole story,\nbut the message is pretty close to the truth. The people that should be\nin the sport are the ones that take a statement like that as a warning\nto do their research; I have no reason to think the OP asking for\ndevelopers was one of those people.\n\n> > Without merge mining if the value to the participants in the new system\n> > is greater than the harm done to the participants in the old system the\n> > total work on the new system's chain will still be positive and it has a\n> > chance of surviving.\n> \n> No, the \"harm to the old system participants\" is distributed among all\n> the participants, not only miners (assuming miners have any\n> speculative position at all).\n> I'm not denying that people do crazy and stupid things, but let's at\n> least allow the \"anti-competition attacker\" be equally crazy in both\n> cases.\n\nDistributing harm among n people just reduces the harm for each person\nby a factor of n. That may or may not make that harm smaller than\nwhatever tiny reward mining the chain would be.\n\n> I have many other explanations for the few currencies that died with\n> MM (can you remember any name?). At the beginning all altcoins were\n> much smaller and easier to attack, all of them. Bitcoin mining pools\n> didn't wanted to update to merged mining and didn't acted very\n> rationally about it.\n> Namecoin went through a really delicate situation just before\n> hardforking to MM, but now is by far the most secure altcoin of them\n> all, all thanks to MM.\n> All rational bitcoin miners should also mine namecoin. Period. All\n\nYou assume doing so has zero cost - it doesn't. Running namecoind\ninvolves effort and bandwidth on my part.\n\n> those who consider it competition with their current Bitcoin\n> speculative position, should just \"attack in the market\" by selling\n> the namecoins as soon as they get them.\n> Providing security for a chain DOES NOT give it an utility or rise its demand.\n> Operation COSTS DO NOT CAUSE VALUE.\n\nLets rephrase that \"A secure chain is no more useful than a less secure\nchain. A secure chain will not be more valuable than a less secure\nchain, all other things being equal.\"\n\nI don't think we're going to see eye to eye on this.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000028e2c0ade6ce50b5ce4d95037e5e2dcd500b4bb52adbe73c\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/03dff192/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-10T18:50:36",
                "message_text_only": "On 1/10/14, Peter Todd <pete at petertodd.org> wrote:\n> Because there aren't that many pools out there and Ixcoin (and devcoin)\n> appear to have been lucky enough to servive long enough to get the\n> support of a reasonably big one. Once you do that, the potential\n> attackers have PR to think about. (namecoin especially has a PR\n> advantage) None of this stuff is hard and fast rules after all.\n\nBut shouldn't your reasoning apply here so that ixcoin would be\ndestroyed by those who aren't even mining it. Because of the\n\"supposedly obvious\" harm it does to Bitcoin through competition?\n\n> Anyway, I'm starting to think you're reading too much into my statement\n> \"merge mining is insecure\", which, keep in mind, I said in relation to a\n> guy who was trying to recruit devs to implement some unknown \"altcoin\"\n> thing.\n\nThat's precisely my worry. Most of those guys planning to implement\nrandom altcoins will conclude after reading you that what they need is\nnot merged mining but yet another independent scrypt coin, or worse,\nyet another stupid PoW algorithm.\n\n> In that context I sure as heck would loudly yell \"CAVE DIVING IS FUCKING\n> DANGEROUS, DON'T DO IT\". Sure, that's not quite telling the whole story,\n> but the message is pretty close to the truth. The people that should be\n> in the sport are the ones that take a statement like that as a warning\n> to do their research; I have no reason to think the OP asking for\n> developers was one of those people.\n\nI'm approached many times with questions like \"How much would it cost\nto create a new altcoin?\" (Thanks, BlueMatt for creating coingen!!).\nI try to explain them that there's more currencies beyond p2p\ncurrencies and they probably don't need that. I talk them about local\ncurrencies, colored coins or open transactions as solution that\nprobably fit their needs much better without the need to bootstrap and\nantire economy with a network of computer that consumes plenty of\nresources.\n\nIf none of that fits them (say, for crazy experiments like datacoin or\ngridcoin), I recommend them merged mining because is more secure for\nthem, more secure for bitcoin, and better for the environment and\neveryone in general.\n\nStill, for some reason a new non merged mined chain is the most popular choice.\nLess efficient, less secure, more popular.\nWhy?\nI wonder if devs warning against merged mining or making stupid\npredictions like \"bitcoin's PoW algorithm won't survive the year\" have\nanything to do with that...\n\n>> > Without merge mining if the value to the participants in the new system\n>> > is greater than the harm done to the participants in the old system the\n>> > total work on the new system's chain will still be positive and it has\n>> > a\n>> > chance of surviving.\n>>\n>> No, the \"harm to the old system participants\" is distributed among all\n>> the participants, not only miners (assuming miners have any\n>> speculative position at all).\n>> I'm not denying that people do crazy and stupid things, but let's at\n>> least allow the \"anti-competition attacker\" be equally crazy in both\n>> cases.\n>\n> Distributing harm among n people just reduces the harm for each person\n> by a factor of n. That may or may not make that harm smaller than\n> whatever tiny reward mining the chain would be.\n\nThe harm TO THE MINERS alone (again, assuming they have any position\nat all in the coins they're mining) is less than the \"total harm\" to\nthe competing system, assuming that's quantifiable at all.\nMiners won't think about the \"total harm\", but only about their share\nof harm vs their share of just mining the competing system alongside\nwith the old one.\n\n>> I have many other explanations for the few currencies that died with\n>> MM (can you remember any name?). At the beginning all altcoins were\n>> much smaller and easier to attack, all of them. Bitcoin mining pools\n>> didn't wanted to update to merged mining and didn't acted very\n>> rationally about it.\n>> Namecoin went through a really delicate situation just before\n>> hardforking to MM, but now is by far the most secure altcoin of them\n>> all, all thanks to MM.\n>> All rational bitcoin miners should also mine namecoin. Period. All\n>\n> You assume doing so has zero cost - it doesn't. Running namecoind\n> involves effort and bandwidth on my part.\n\nYeah, true, they will only mine if all those costs are lower than the\nreward. Only the hashing is \"for free\".\nI'm assuming that those costs are very small compared to the reward,\nthat is, that most of the reward pays for hashing and not validation.\n\n>> those who consider it competition with their current Bitcoin\n>> speculative position, should just \"attack in the market\" by selling\n>> the namecoins as soon as they get them.\n>> Providing security for a chain DOES NOT give it an utility or rise its\n>> demand.\n>> Operation COSTS DO NOT CAUSE VALUE.\n>\n> Lets rephrase that \"A secure chain is no more useful than a less secure\n> chain. A secure chain will not be more valuable than a less secure\n> chain, all other things being equal.\"\n\nNot exactly, a less secure chain can become completely useless due to\nthe lack of security.\nWhat I'm saying is that a useless chain is still useless no matter the security.\n\n> I don't think we're going to see eye to eye on this.\n\nIt is possible.\nAt least now we know each other position in MM.\nI'm not sure if the silence means that only Maaku and Luke-Jr agree\nwith me on merged mining, that it is you who are more alone than me on\nthis one, or if it's just that not many people had taken the time to\nthink about this..."
            }
        ],
        "thread_summary": {
            "title": "The insecurity of merge-mining",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Jorge Tim\u00f3n",
                "Peter Todd"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 50881
        }
    },
    {
        "title": "[Bitcoin-development] Dedicated server for bitcoin.org, your thoughts?",
        "thread_messages": [
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-01T10:02:02",
                "message_text_only": "So I looked into gitian, the first thing I noticed was the hashes that  \npeople were signing, for example:\n\n    https://github.com/bitcoin/gitian.sigs/blob/master/0.8.6-win32/gavinandresen/bitcoin-build.assert\n\ndon't match the hash of the file 'bitcoin-0.8.6-win32-setup.exe' actually  \nhosted by sourceforce. That was a bit alarming at first, but I talked to  \nBlueMatt and maaku on IRC and the difference is due to Gavin Authenticode  \nsigning the executable for windows.\n\nBlueMatt asked if someone could implement in gitian-downloader a way to  \nstrip off the signature so that we could get back to the raw binary with a  \nhash that matches what everyone is producing from gitian.  I found:\n\n   http://blog.didierstevens.com/programs/disitool/\n\nwhich is a Python script which can strip the signature nicely, but the  \nhashes still don't match.\n\nI couldn't find a gitian build of 0.8.6 so I built my own, and after  \nverifying the hash for v0.8.6 was '49547ff9...' as expected I looked at  \nthe hex diff between that and the sig-stripped .exe from sourceforge, and  \nthe only two differences are:\n\n   - At offset D8 the stripped file has '5D E2 B2' versus 'F9 F4 00' in the  \ngitian build\n   - The sig-stripped file has an extra byte '00' at the end\n\nI started to look at the file spec for windows PE files and quickly  \nthought better of it. Maybe someone better informed can chime in on what  \nthose three bytes at offset D8 specify.\n\nI'm not sure if we want to patch the signature onto the gitian build, or  \nstrip the signature off of the Gavin-signed build, but something of the  \nsort is necessary if you want get gitian-downloader to match the official  \ndistro (for Windows at least).\n\nIn any case, I think wallet users want to know when an upgrade is  \navailable, and ability to click an 'update' button get a binary they can  \ntrust. It's not a problem unique to bitcoind, deterministic builds are  \nawesome, but I don't think fully solve it.\n\nThanks,\nJeremy\n\nOn Tue, 31 Dec 2013 13:33:54 -0800, Matt Corallo  \n<bitcoin-list at bluematt.me> wrote:\n\n> We already have a wonderful system for secure updating -  \n> gitian-downloader. We just neither use it >not bother making actual  \n> gitian releases so anyone can use it to verify signatures of downloads."
            },
            {
                "author": "Wladimir",
                "date": "2014-01-01T11:37:51",
                "message_text_only": ">\n> In any case, I think wallet users want to know when an upgrade is\n> available, and ability to click an 'update' button get a binary they can\n> trust. It's not a problem unique to bitcoind, deterministic builds are\n> awesome, but I don't think fully solve it.\n>\n\nDeterministic builds are one part of the equation. Matt Corallo actually\ndid implement auto-updating using gitian updater:\nhttps://github.com/bitcoin/bitcoin/pull/1453\n\nIt ran into lots of bike shedding and was eventually abandoned, but there\nis no question whether it is possible with the current build process.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/1b70dd49/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-01T15:10:05",
                "message_text_only": "That seems overly complicated, there's no need for the Bitcoin protocol to\nbe involved. Deterministic builds with threshold signed updates are a\nproblem the entire crypto community is now interested in solving - any\nsolution should be generic.\n\nReally all you need is an update engine that allows a CHECKMULTISIG type\napproach. When the update engine is not under our control, i.e. on Android,\nShoup style RSA threshold signatures can potentially work (though I must\nadmit, I have never found time to play with the implementation I have for\nthat algorithm).\n\n\n\nOn Tue, Dec 31, 2013 at 9:25 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n>  I didn't know about the dedicated server meltdown, it wasn't any of my\n> infra. Anyway, my previous offer still stands.\n>\n> One less 'security theater' approach would be if we could provide\n> forward-validation of updates using the blockchain. It's always going to be\n> up to the user the first time they install the wallet to verify the\n> provenance of the binaries/source. From that point forward, we could make\n> it easier if the wallet could detect updates and prove they were valid.\n>\n> This could be as simple as hard-coding a public key into the client and\n> checking a signature on the new binaries. But it could also be more\n> interesting...\n>\n> For example, a well known address on the blockchain corresponds to\n> multi-sig with keys controlled by developers (or whatever key policy the\n> release team wants to impose). A spend from that address announces a new\n> release, and includes the expected hash of the file.\n>\n> You would probably need some way to handle the different release targets.\n> A more rigorous approach could identify all the various releases in terms\n> of a BIP32 xpubkey whose branches would correspond to the different release\n> trains and platform builds. Spends from a node announce the release and the\n> expected hash.\n>\n> This provides zero benefit if the wallet software is already compromised,\n> but I think this would allow trusted automatic update notification, and a\n> trusted way to deliver the expected hashes. It also might resolve some of\n> the consternation around when a release is truly \"released\", if that's\n> really a problem.\n>\n> I'm not sure how far along the slope you would want to go; 1) announcing\n> updates in the UI, 2) providing a button the user could click to verify a\n> binary matches its expected hash, 3) click to download and verify the\n> upgrade matches the expected hash, 4) click to upgrade\n>\n> Formalizing the release process around a set of privkeys (or split shares\n> of keys) may raise its own set of questions.\n>\n> For the download itself, I've heard the advocates of announcing\n> availability on the blockchain leading to a BitTorrent magnet link, but I\n> also understand objections to adding an entire BitTorrent stack into a\n> wallet.\n>\n> On Tue, 31 Dec 2013 06:23:55 -0800, Mike Hearn <mike at plan99.net> wrote:\n>\n> The site was actually moved onto a dedicated server temporarily and it\n>> melted down under the load. I wouldn't call that no progress.\n>>\n>\n> Oh, it did? When was that? I must have missed this excitement :)\n>\n> Any idea how much load it had?\n>\n> Perhaps I wasn't clear on the point I was making Drak's threat model\n>> is not improved in the slightest by SSL. It would be improved by\n>> increasing the use of signature checking, e.g. by making it easier.\n>>\n>\n> Well, that depends. If you watch Applebaums talk he is pushing TLS pretty\n> hard, and saying that based on the access to the source docs some of their\n> MITM attacks can't beat TLS. It appears that they have the capability to do\n> bulk MITM and rewrite of downloads as Drak says but *not* when TLS is\n> present, that would force more targeted attacks. So to me that implies that\n> TLS does raise the bar and is worth doing.\n>\n> However if we can't find a server that won't melt under the load, then\n> that'd be an issue. We could consider hosting downloads on AppEngine or\n> something else that can handle both high load and TLS.\n>\n>\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/6f3e8e26/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-01T22:15:01",
                "message_text_only": ">\n> Oh, it did? When was that? I must have missed this excitement :)\n>>\n>\nI would be very interested to learn more about this. It seems the steady\nstate load on the site is not very high:\n\nhttps://github.com/bitcoin/bitcoin.org/pull/287\n\n(Saivann ran Google Analytics on the site for a little while to get traffic\nfigures). Peak of 10 visitors per second, assume a 10x blowup on resources,\nthat's only ~100 reqs/sec steady state, that shouldn't strain any kind of\nreasonable server. So perhaps the specs of the dedicated server were not\nwhat you might imagine.\n\nPerhaps we should move the site over to Jeremy's hosting? It shouldn't be\nvery expensive to serve outside of major press cycles. Once that is done,\nperhaps we can find/blag some SSL-protected file hosting.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/20754667/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-02T19:49:27",
                "message_text_only": "On 12/31/13, Mike Hearn <mike at plan99.net> wrote:\n>  remember suggesting that we whack Google Analytics or\n> some other statistics package on when the new website design was done and\n> that was rejected for similar reasons (\"organisations are bad\").\n\nAnalytics software would be useful. I suggest using Piwik or another\nfree software alternative instead of Google's package."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-01-03T05:45:15",
                "message_text_only": "On Tue, Dec 31, 2013 at 05:48:06AM -0800, Gregory Maxwell wrote:\n> On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:\n> > The NSA has the ability, right now to change every download of bitcoin-qt,\n> > on the fly and the only cure is encryption.\n\nNo, the only cure is the check the hashes. We should know something\nabout hashes here. TLS is a big pile of 'too big to audit'. Spend\na couple of satoshis and put the hash of the source tar.gz and the\nbinaries in the blockchain. Problem solved.\n\n<snipped>\n\n> The downloads are protected by something far stronger than SSL\n> already, which might even have a chance against the NSA. Actual\n> signatures of the downloads with offline keys.\n> \n> I'm all pro-SSL and all that, but you are\u2014 piece by piece\u2014 really\n> convincing me that it produces an entirely false sense of security\n> which is entirely unjustified.\n\nI used to think encryption was important, and this exchange convinced\nme that kerberized telnet with no encryption but with integrity\nchecking would be far more secure than 'secure' shell.\n\nAlso, there's some organization that's inserting malicious memes\nthat try to get me to buy shit below my signature. How about we \nmove the mailing list? I've run mailman servers before, and there's\nalso http://savannah.gnu.org/maintenance/WhyChooseSavannah/\n\n-- Troy (da hozer)"
            },
            {
                "author": "Drak",
                "date": "2014-01-03T09:59:15",
                "message_text_only": "On 3 January 2014 05:45, Troy Benjegerdes <hozer at hozed.org> wrote:\n\n> On Tue, Dec 31, 2013 at 05:48:06AM -0800, Gregory Maxwell wrote:\n> > On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:\n> > > The NSA has the ability, right now to change every download of\n> bitcoin-qt,\n> > > on the fly and the only cure is encryption.\n>\n> No, the only cure is the check the hashes. We should know something\n> about hashes here. TLS is a big pile of 'too big to audit'. Spend\n> a couple of satoshis and put the hash of the source tar.gz and the\n> binaries in the blockchain. Problem solved.\n\n\nWhich is why, as pointed out several times at 30c3 by several renowned\nfigures, why cryptography has remained squarely outside of mainstream use.\nIt needs to just work and until you can trust the connection and what the\nend point sends you, automatically, it's a big fail and the attack vectors\nare many.\n\n<sarcasm>I can just see my mother or grandma manually checking the hash of\na download... </sarcasm>\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/37cd808c/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-01-03T11:22:35",
                "message_text_only": "On Fri, Jan 3, 2014 at 9:59 AM, Drak <drak at zikula.org> wrote:\n\n> Which is why, as pointed out several times at 30c3 by several renowned\n> figures, why cryptography has remained squarely outside of mainstream use.\n> It needs to just work and until you can trust the connection and what the\n> end point sends you, automatically, it's a big fail and the attack vectors\n> are many.\n>\n> <sarcasm>I can just see my mother or grandma manually checking the hash of\n> a download... </sarcasm>\n>\n\nMaybe a simple compromise would be to add a secure downloader to the\nbitcoin client.\n\nThe download link could point to a meta-data file that has info on the\ndownload.\n\nfile_url=\nhash_url=\nsig_url=\nmessage=This is version x.y.z of the bitcoin client\n\nIt still suffers from the root CA problem though.  The bitcoin client would\naccept Gavin's signature or a \"core team\" signature.\n\nAt least it would provide forward security.\n\nIt could also be used to download files for different projects, with\nexplicit warnings that you are adding a new trusted key.\n\nWhen you try to download, you would be given a window\n\nProject: Some Alternative Wallet\nSigned by: P. Lead\nMessage:\n\nConfirm download Yes No\n\nHowever, even if you do that, each trusted key is only linked to a\nparticular project.\n\nIt would say if the project and/or leader is unknown.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/5294c903/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2014-01-03T13:09:11",
                "message_text_only": "You know if you want to make some form of investment, you might like make an\nattempt to look them up on the internet, check the phone number in a phone\nbook or directory enquiries, look for references and reviews?\n\nSo it is with the hash of the binary you are about to trust with your\ninvestment funds.  I dont think its such a difficult question.  Ask your\nmore technical friends to confirm this hash is correct.\n\nIts interesting that hashes are more trustworthy than signatures, since all\nthe NSLs and backdoors, its hard to trust a signature.\n\nI have the same problem with linux distros that want to install hundreds of\ncomponents downloaded over the internet, based on signatures.  I would far\nrather a merkle hash of the distribution at that point in time, which\nauthenticates directly any of the optional downloadable components.\n\n(Or better yet a distro that like comes on a CD and doesnt download\nanything...  Amazing how most CD and even DVD iso images immediately\ndownload stupid things like fonts???  What were they thinking?  I downloaded\nfedora > 4GB of stuff and they need to download a font just to get past step\n2 of the installer?  Thats a sensless, retrograde, selective backdoor\nopportunity.)\n\nAdam\n\nOn Fri, Jan 03, 2014 at 11:22:35AM +0000, Tier Nolan wrote:\n>   On Fri, Jan 3, 2014 at 9:59 AM, Drak <[1]drak at zikula.org> wrote:\n>\n>   Which is why, as pointed out several times at 30c3 by several renowned\n>   figures, why cryptography has remained squarely outside of mainstream\n>   use. It needs to just work and until you can trust the connection and\n>   what the end point sends you, automatically, it's a big fail and the\n>   attack vectors are many.\n>   <sarcasm>I can just see my mother or grandma manually checking the hash\n>   of a download... </sarcasm>\n>\n>   Maybe a simple compromise would be to add a secure downloader to the\n>   bitcoin client.\n>   The download link could point to a meta-data file that has info on the\n>   download.\n>   file_url=\n>   hash_url=\n>   sig_url=\n>   message=This is version x.y.z of the bitcoin client\n>   It still suffers from the root CA problem though.  The bitcoin client\n>   would accept Gavin's signature or a \"core team\" signature.\n>   At least it would provide forward security.\n>   It could also be used to download files for different projects, with\n>   explicit warnings that you are adding a new trusted key.\n>   When you try to download, you would be given a window\n>   Project: Some Alternative Wallet\n>   Signed by: P. Lead\n>   Message:\n>   Confirm download Yes No\n>   However, even if you do that, each trusted key is only linked to a\n>   particular project.\n>   It would say if the project and/or leader is unknown.\n>\n>References\n>\n>   1. mailto:drak at zikula.org\n\n>------------------------------------------------------------------------------\n>Rapidly troubleshoot problems before they affect your business. Most IT\n>organizations don't have a clear picture of how application performance\n>affects their revenue. With AppDynamics, you get 100% visibility into your\n>Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n>http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-01-03T17:38:17",
                "message_text_only": "On Fri, Jan 03, 2014 at 09:59:15AM +0000, Drak wrote:\n> On 3 January 2014 05:45, Troy Benjegerdes <hozer at hozed.org> wrote:\n> \n> > On Tue, Dec 31, 2013 at 05:48:06AM -0800, Gregory Maxwell wrote:\n> > > On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:\n> > > > The NSA has the ability, right now to change every download of\n> > bitcoin-qt,\n> > > > on the fly and the only cure is encryption.\n> >\n> > No, the only cure is the check the hashes. We should know something\n> > about hashes here. TLS is a big pile of 'too big to audit'. Spend\n> > a couple of satoshis and put the hash of the source tar.gz and the\n> > binaries in the blockchain. Problem solved.\n> \n> \n> Which is why, as pointed out several times at 30c3 by several renowned\n> figures, why cryptography has remained squarely outside of mainstream use.\n> It needs to just work and until you can trust the connection and what the\n> end point sends you, automatically, it's a big fail and the attack vectors\n> are many.\n> \n> <sarcasm>I can just see my mother or grandma manually checking the hash of\n> a download... </sarcasm>\n\n'make' should check the hash. The binary should check it's own hash. The\noperating system should check the hash.\n\nHow about if I sell your Grandma an android table loaded only with free \nsoftware, and use the existing infrastructure android provides to only\nallow software to be installed that can be integrity-verified from a \npublic key that can be downloaded from the blockchain?\n\nWould you pay $50 (or 2 litecoin) more for at tablet with free software\nthat protects you and your grandma's interests, rather than selling them\nto google/apple/microsoft?\n\nI'm working on eventually being able to build hardware for which the \nentire design specifications, from case to cpu core verilog, all they way\nup to the pre-installed cryptographic currency wallet(s) are all signed\nand released as part of the Debian archive. \n\nBut I need people like you to explain to your Grandma why this hardware\ncosts more than hardware that monetizes eyeballs and sells your private\ninformation to the highest bidder."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-03T18:21:17",
                "message_text_only": "On 1/3/14, Troy Benjegerdes <hozer at hozed.org> wrote:\n> 'make' should check the hash.\n\nAn attacker could replace that part of the makefile.\nAnyway, I think this is more oriented for compiled binaries, not for\npeople downloading the sources. I assume most of that people just use\ngit.\n\n> The binary should check it's own hash.\n\nI'm afraid this is not possible.\n\n> The operating system should check the hash.\n\nThere's package management systems like apt-secure that do exactly this."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-01-04T01:43:36",
                "message_text_only": "On Fri, Jan 03, 2014 at 07:21:17PM +0100, Jorge Tim\u00f3n wrote:\n> On 1/3/14, Troy Benjegerdes <hozer at hozed.org> wrote:\n> > 'make' should check the hash.\n> \n> An attacker could replace that part of the makefile.\n> Anyway, I think this is more oriented for compiled binaries, not for\n> people downloading the sources. I assume most of that people just use\n> git.\n> \n> > The binary should check it's own hash.\n> \n> I'm afraid this is not possible.\n>\n> > The operating system should check the hash.\n> \n> There's package management systems like apt-secure that do exactly this.\n\nYes. Promoting operating systems (and signed .deb packages) is a far better\nthing to do than worrying about TLS on the bitcoin.org server."
            }
        ],
        "thread_summary": {
            "title": "Dedicated server for bitcoin.org, your thoughts?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Wladimir",
                "Adam Back",
                "Mike Hearn",
                "Tier Nolan",
                "Jorge Tim\u00f3n",
                "Jeremy Spilman",
                "Drak"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 19320
        }
    },
    {
        "title": "[Bitcoin-development] Happy new year!",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-01-01T18:33:23",
                "message_text_only": "Bitcoin had an incredible year in 2013, and I very much enjoyed working\nwith and meeting you all.\n\nI'm very much looking forward to some of the upgrades coming in 2014.\nThough a lot happened in the general community, last year was kind of quiet\nwith respect to the core software. I'm hoping this year we can pick up the\npace a little.\n\nCheers!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/1c9e6b87/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2014-01-01T18:50:28",
                "message_text_only": "Same here.\n\nI feel incredibly lucky to know some of you, and to be able to contribute in some small way to what this is ultimately becoming. It's been an amazing ride, and I'm pretty sure that 2014 is going to totally blow our minds.\n\n-wendell\n\nhivewallet.com | twitter.com/hivewallet | pgp: B7179FA88C498718\n\nOn Jan 1, 2014, at 1:33 PM, Mike Hearn wrote:\n\n> Bitcoin had an incredible year in 2013, and I very much enjoyed working with and meeting you all.\n> \n> I'm very much looking forward to some of the upgrades coming in 2014. Though a lot happened in the general community, last year was kind of quiet with respect to the core software. I'm hoping this year we can pick up the pace a little.\n> \n> Cheers!"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-01-01T19:25:40",
                "message_text_only": "On 1 January 2014 19:33, Mike Hearn <mike at plan99.net> wrote:\n\n> Bitcoin had an incredible year in 2013, and I very much enjoyed working\n> with and meeting you all.\n>\n> I'm very much looking forward to some of the upgrades coming in 2014.\n> Though a lot happened in the general community, last year was kind of quiet\n> with respect to the core software. I'm hoping this year we can pick up the\n> pace a little.\n>\n\nHappy new year!  Thanks for your awesome contribution and to all those that\ncontributed to development.\n\n\"Bitcoin\" was one of the 100 most searched for terms in 2013, really\nlooking forward to 2014!\n\n\n>\n> Cheers!\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/0a03d2a7/attachment.html>"
            },
            {
                "author": "Gary Rowe",
                "date": "2014-01-01T19:48:18",
                "message_text_only": "Happy New Year to all the good people out there working hard to make\nBitcoin better than ever before.\n\nThank you!\n\n\nOn 1 January 2014 19:25, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n\n>\n>\n>\n> On 1 January 2014 19:33, Mike Hearn <mike at plan99.net> wrote:\n>\n>> Bitcoin had an incredible year in 2013, and I very much enjoyed working\n>> with and meeting you all.\n>>\n>> I'm very much looking forward to some of the upgrades coming in 2014.\n>> Though a lot happened in the general community, last year was kind of quiet\n>> with respect to the core software. I'm hoping this year we can pick up the\n>> pace a little.\n>>\n>\n> Happy new year!  Thanks for your awesome contribution and to all those\n> that contributed to development.\n>\n> \"Bitcoin\" was one of the 100 most searched for terms in 2013, really\n> looking forward to 2014!\n>\n>\n>>\n>> Cheers!\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Rapidly troubleshoot problems before they affect your business. Most IT\n>> organizations don't have a clear picture of how application performance\n>> affects their revenue. With AppDynamics, you get 100% visibility into your\n>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n>> Pro!\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140101/089e165d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Happy new year!",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "Mike Hearn",
                "Gary Rowe",
                "Wendell"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5124
        }
    },
    {
        "title": "[Bitcoin-development] Looking for GREAT C++ developer for exciting opportunity in bitcoin space",
        "thread_messages": [
            {
                "author": "Troy Benjegerdes",
                "date": "2014-01-03T05:11:28",
                "message_text_only": "On Sun, Dec 29, 2013 at 11:53:19AM -0700, Evan Duffield wrote:\n> Hello,\n> \n> We\u2019re a startup looking for 1 or 2 really good C++ programmer that is\n> familiar with the bitcoin internals to help with a for-profit startup.\n> \n> We will be able to provide more information about the project after signing\n> a non-compete/non-disclosure agreement. Our coin will be one of the truly\n> unique coins that are not just a clone of the original Bitcoin code. In\n> short the project will be a merge-mined altcoin that will provide a very\n> useful service to the whole crypto-coin ecosystem.\n> \n> If you have added any features to Bitcoin or related technologies this is a\n> definite bonus. Please include information about the work you\u2019re done in\n> the space.\n> \n> We have detailed plans on how to implement it and the roles we are looking\n> to fill. If interested please email eduffield82 at gmail.com with a\n> description of your work experience and we\u2019ll vett the applications and\n> share our plans to see if you\u2019re interested.\n> \n> Thanks,\n> \n> Evan & Kyle\n> Hawk Financial Group, LLC\n\nEvan & Kyle,\n\nI have a very unique and one-of-a kind offer for you. I will buy your company\nfrom the revenue generated from my AGPLv3 copyright licensed Minco.me(c) \ncryptographic currency, which will revolutionize work by ensuring that anyone\nwith a Mincome(C) address doesn't need to work.\n\nAsk yourself.. why would someone who can write a cryptocurrency want to *work*\nfor you, to get paid with... money.. that they can just ...\n  ** write code that makes them money **\n\nPlease be aware that any concept(s) that I have publicly discussed, or that \nwe may or may not have talked about if I would have signed a non-enforceable\nnon-compete agreement are COPYRIGHT 2013,2014 Troy Benjegerdes, and that I\nwould advise you seek competent legal council to ensure that this email, or\nany other contact we may or may not have had does not contaminate your \nbusiness model with a viral copyright license.\n\n\nTo everyone else on this list, I'm sorry, I just could not resist feeding \nthe VC/marketing trolls.\n\n\n-- Troy, 'da hozer'"
            }
        ],
        "thread_summary": {
            "title": "Looking for GREAT C++ developer for exciting opportunity in bitcoin space",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2099
        }
    },
    {
        "title": "[Bitcoin-development] BIP: register with IANA for bitcoin/cryptocoin port numbers",
        "thread_messages": [
            {
                "author": "Troy Benjegerdes",
                "date": "2014-01-03T05:22:43",
                "message_text_only": "I believe this is self-explainatory:\n\n1) Bitcoin usually runs on port 8333. Why?\n\n2) Bitcoin does not show in up http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml .. why?\n\n3) What needs to happen to have someone from the Bitcoin foundation \n  to fill out the form asking for an assigned port (see \n  http://www.iana.org/form/ports-services )\n\n4) what should the process be for new cryptocoins to get both default\nport numbers, as well as P2P network identifier 'magic numbers'"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-01-03T05:56:59",
                "message_text_only": "On 3 January 2014 06:22, Troy Benjegerdes <hozer at hozed.org> wrote:\n\n> I believe this is self-explainatory:\n>\n> 1) Bitcoin usually runs on port 8333. Why?\n>\n> 2) Bitcoin does not show in up\n> http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml.. why?\n>\n> 3) What needs to happen to have someone from the Bitcoin foundation\n>   to fill out the form asking for an assigned port (see\n>   http://www.iana.org/form/ports-services )\n>\n> 4) what should the process be for new cryptocoins to get both default\n> port numbers, as well as P2P network identifier 'magic numbers'\n>\n\nIANA normally register ports with the principle of conservation in mind.\nSee section 7.2 of RFC6335 for more details.\n\nhttp://tools.ietf.org/html/rfc6335#section-7.2\n\n8333 and 18333 are currently unassigned, which is good news.\n\nIdeally it would be good to have two ports, one for the main net, and one\nfor the test net.  However, in light of conservation only one may be\ngranted.  The question as to whether traffic could be multiplexed over a\nsingle port may be raised.\n\ntnp                8321        udp    Thin(ium) Network Protocol\n[Aly_Orady]                                        [Aly_Orady]\n                                      2007-08-07\n                 8322-8350            Unassigned\nserver-find        8351        tcp    Server Find\n[Chris_Brown]                                      [Chris_Brown]\n\ngv-pf              18262       udp    GV NetConfig Service\n[Scott_Libert]                                     [Scott_Libert]\n                                      2008-01-29\n                18263-18462           Unassigned\nac-cluster         18463       tcp    AC Cluster\n[Lisa_Zhong]\n\nhttp://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt\n\nIf a whole slew of alt coins also tried to reserve ports, I suspect that\nmay raise eyebrows.\n\n\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/3a0f63e9/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-01-03T08:16:55",
                "message_text_only": ">\n> Ideally it would be good to have two ports, one for the main net, and one\n> for the test net.  However, in light of conservation only one may be\n> granted.  The question as to whether traffic could be multiplexed over a\n> single port may be raised.\n>\n\nI'm sure it would be *possible*, but testnet and mainnet are entirely\nseparate networks. Not only that, but the entire point of the testnet is\nseparation. There is no logic to multiplexing them.\n\nIf conservation is an issue, I'd forgo the testnet port. We don't have a\n'test ssh' or 'test mail server' port either, most people will just\nallocate a temporary number for those themselves.\n\nIn case the port is already in use, bitcoin can run on and announce any\nanother port. There is no strict need for it to be 8333 (or 18333) at all.\n\nThere isn't even an argument for convenience. Most of the time, users don't\nspecify nodes. And in the rare cases that they do they can specify a port\nas well.\n\nIf a whole slew of alt coins also tried to reserve ports, I suspect that\n> may raise eyebrows.\n>\n\nThat's somebody else's problem. Bitcoin is by far the most well-known of\nthe 'coins' so it may be considered realistic to allocate one or two ports\nfor it. Or not, in which case the altcoins can forget it too.\n\nRegards,\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/2121b4f7/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-03T05:57:10",
                "message_text_only": "On Thu, Jan 2, 2014 at 9:22 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> I believe this is self-explainatory:\n>\n> 1) Bitcoin usually runs on port 8333. Why?\n>\n> 2) Bitcoin does not show in up http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml .. why?\n>\n> 3) What needs to happen to have someone from the Bitcoin foundation\n>   to fill out the form asking for an assigned port (see\n>   http://www.iana.org/form/ports-services )\n\nI have requested an assignment."
            }
        ],
        "thread_summary": {
            "title": "BIP: register with IANA for bitcoin/cryptocoin port numbers",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "Troy Benjegerdes",
                "Gregory Maxwell",
                "Wladimir"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5238
        }
    },
    {
        "title": "[Bitcoin-development] An idea for alternative payment scheme",
        "thread_messages": [
            {
                "author": "Nadav Ivgi",
                "date": "2014-01-03T18:00:49",
                "message_text_only": "I had an idea for a payment scheme that uses key derivation, but instead of\nthe payee deriving the addresses, the payer would do it.\n\nIt would work like that:\n\n   1. The payee publishes his master public key\n   2. The payer generates a random \"receipt number\" (say, 25 random bytes)\n   3. The payer derives an address from the master public key using the\n   receipt number and pays to it\n   4. The payer sends the receipt to the payee\n   5. The payee derives a private key with that receipt and adds it to his\n   wallet\n\n\nAdvantages:\n\n   - It increases privacy by avoiding address reuse\n   - The process is asynchronous. The payee is completely passive in the\n   payment process and isn't required to provide new addresses before each\n   payment (so no payment server required)\n   - Its usable as a replacement for cases where re-used addresses are the\n   most viable solution (like putting an address in a forum signature or as a\n   development fund in a github readme)\n   - The receipt also acts as a proof of payment that the payer can provide\n   to the payee\n   - Also, if the master is known to belong to someone, this also allows\n   the payer prove to a third-party that the payment was made to that someone.\n   If the output was spent, it also proves that he was aware of the payment\n   and has the receipt.\n   - Its a really thin abstraction layer that doesn't require much changes\n\nDisadvantages:\n\n   - Losing the receipt numbers means losing access to your funds, they are\n   random and there's no way to restore them\n   - It requires sending the receipt to the payee somehow. Email could work\n   for that, but a better defined channel that also can talk to the Bitcoin\n   client and add the receipt would be much better.\n\nWhat do you think?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/312ac06c/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-01-03T18:16:43",
                "message_text_only": "The random number that the buyer uses could be generated from a root key\ntoo.\n\nThis would allow them to regenerate all random numbers that they used and\nrecreate their receipts.  The master root would have to be stored on your\ncomputer though.\n\nThe payment protocol is supposed to do something like this already though.\n\n\nOn Fri, Jan 3, 2014 at 6:00 PM, Nadav Ivgi <nadav at shesek.info> wrote:\n\n> I had an idea for a payment scheme that uses key derivation, but instead\n> of the payee deriving the addresses, the payer would do it.\n>\n> It would work like that:\n>\n>    1. The payee publishes his master public key\n>    2. The payer generates a random \"receipt number\" (say, 25 random bytes)\n>    3. The payer derives an address from the master public key using the\n>    receipt number and pays to it\n>    4. The payer sends the receipt to the payee\n>    5. The payee derives a private key with that receipt and adds it to\n>    his wallet\n>\n>\n> Advantages:\n>\n>    - It increases privacy by avoiding address reuse\n>    - The process is asynchronous. The payee is completely passive in the\n>    payment process and isn't required to provide new addresses before each\n>    payment (so no payment server required)\n>    - Its usable as a replacement for cases where re-used addresses are\n>    the most viable solution (like putting an address in a forum signature or\n>    as a development fund in a github readme)\n>    - The receipt also acts as a proof of payment that the payer can\n>    provide to the payee\n>    - Also, if the master is known to belong to someone, this also allows\n>    the payer prove to a third-party that the payment was made to that someone.\n>    If the output was spent, it also proves that he was aware of the payment\n>    and has the receipt.\n>    - Its a really thin abstraction layer that doesn't require much changes\n>\n> Disadvantages:\n>\n>    - Losing the receipt numbers means losing access to your funds, they\n>    are random and there's no way to restore them\n>    - It requires sending the receipt to the payee somehow. Email could\n>    work for that, but a better defined channel that also can talk to the\n>    Bitcoin client and add the receipt would be much better.\n>\n> What do you think?\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/23c1bf5d/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-03T18:23:41",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nThere is a standard mechanism for doing that called deterministic\nsignatures and is described in RFC 6979. It uses the private key and\nthe HMAC construction to generate a ECDSA k value.\n\nOn 01/03/2014 10:16 AM, Tier Nolan wrote:\n> The random number that the buyer uses could be generated from a\n> root key too.\n> \n> This would allow them to regenerate all random numbers that they\n> used and recreate their receipts.  The master root would have to be\n> stored on your computer though.\n> \n> The payment protocol is supposed to do something like this already\n> though.\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSxwAqAAoJEAdzVfsmodw4nAoQAJLyI7m2uII6Lp0bk2odiT84\nrqoAZut4ESGK+lMHsVoFIkFPKAD4ZXpKEEhOa212Q4ZtQG+Ceescs04qslfzwAfO\nbnAQrzRzKQf68bQlvtdZ4xjsfe38GgI5LEkyxHVrwd39ZJhP2Hp4xJT5TbvrNzq7\nGRDTNcM30GTAF5nW9HPT4/KXIpzYQcuylaK9IX2KRHdC5/PFMDKu3b5lGe9BqbtF\nhYLVyj4jAGfTr/K6UFS37sFbdPoyhkiz+S7YHy6dsqc0XMUFnx3xvkgirKkAtGBw\nhjDK6m+Ay+qdR6XcnOft1IXM7ctujH7Ru9RHM6K4x0Pt3x0DBLE5yahPEPg5uEAW\nHAHwuOGs0mDoqeYzW9Ftegh2QkmlVd0CZQmGvcVHLzuugxeR49XPIIURNTmEyk6e\n9Ui6EKEbFSiQ/jeMnARIKmTAfp3uTHwEIOoNFBgFHXAe5iVtWEr/jkL1dSKrHpVm\nDnt4g+IB5a8HOlvU789QeJh/wVrOH+msuhuXgb1W86zvurnnKxb5eSQx5TMy/fy1\ne3IKZ9qKCodVt1I6zSCf1xJjd6QXPpxcnKco/G604GEZsg87sC3sMUsJ+g7GuHJI\nM05U8pNAnDjH/HHJLQj3IJhAQO4IforvgMri4sM0OeAEdDfrONjwwbWFnx638kyD\nr4jvFeIPyVM1574GwfJW\n=8qjF\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-03T18:30:38",
                "message_text_only": "On Fri, Jan 3, 2014 at 10:00 AM, Nadav Ivgi <nadav at shesek.info> wrote:\n> I had an idea for a payment scheme that uses key derivation, but instead of\n> the payee deriving the addresses, the payer would do it.\n>\n> It would work like that:\n>\n> The payee publishes his master public key\n> The payer generates a random \"receipt number\" (say, 25 random bytes)\n> The payer derives an address from the master public key using the receipt\n> number and pays to it\n> The payer sends the receipt to the payee\n> The payee derives a private key with that receipt and adds it to his wallet\n\nAllow me to introduce an even more wild idea.\n\nThe payee publishes two public keys PP  PP2.\n\nThe payer picks the first k value he intends to use in his signatures.\n\nThe payer multiplies PP2*k = n.\n\nThe payer pays to pubkey PP+n  with r in his first signature, or if\nnone of the txins are ECDSA signed, in an OP_RETURN additional output.\n\nThe payer advises the payee that PP+(pp2_secret*r) is something he can\nredeem. But this is technically optional because the payee can simply\ninspect every transaction to check for this condition.\n\nThis is a (subset) of a scheme by Bytecoin published a long time ago\non Bitcoin talk.\n\nIt has the advantage that if payer drops his computer down a well\nafter making the payment the funds are not lost, and yet it is still\ncompletely confidential.\n\n(The downside is particular way I've specified this breaks using\ndeterministic DSA unless you use the OP_RETURN, ... it could instead\nbe done by using one of the signature pubkeys, but the pubkeys may\nonly exist in the prior txin, which kinda stinks. Also the private\nkeys for the pubkeys may only exist in some external hardware, where a\nOP_RETURN nonce could be produced when signing).\n\nThese schemes have an advantage over the plain payment protocol\nintended use (where you can just give them their receipt number, or\njust the whole key) in that they allow the first round of\ncommunication to be broadcast (e.g. payee announced to EVERYONE that\nhe's accepting payments) while preserving privacy."
            },
            {
                "author": "Adam Back",
                "date": "2014-01-03T20:23:20",
                "message_text_only": "Seems like you (Nadav) are the third person to reinvent this idea so far :)\n\nI wrote up some of the post-Bytecoin variants here:\n\nhttps://bitcointalk.org/index.php?topic=317835.msg4103530#msg4103530\n\nThe general limitation so far is its not SPV compatible, so the recipient\nhas to test each payment to see if its one he can compute the private key\nfor.  Or the sender has to send the recipient out of band the derivation\nkey.\n\nHowever at present most of the bitcoin infrastructure is using the bitcoin\nbroadcast channel as the communication channel, which also supports payer\nand payee not being simultaneously online.  You have to be careful also not\nto lose the key.  You dont want a subsequent payer data loss event to lose\nmoney for the recipient.  You want the message to be sent atomically.\n\nIt does seem like a very attractive proposition to be able to fix the\naddress reuse issue.  Admonishment to not reuse addresses doesnt seem to\nhave been successful so far, and there are multiple widely used wallets that\nreuse addresses (probably in part because they didnt implement HD wallets\nand so are scared of losing addresses due to backup failure risks of non HD\nwallets and fresh addresses).\n\nAdam\n\nOn Fri, Jan 03, 2014 at 10:30:38AM -0800, Gregory Maxwell wrote:\n>On Fri, Jan 3, 2014 at 10:00 AM, Nadav Ivgi <nadav at shesek.info> wrote:\n>> I had an idea for a payment scheme that uses key derivation, but instead of\n>> the payee deriving the addresses, the payer would do it.\n>>\n>> It would work like that:\n>>\n>> The payee publishes his master public key\n>> The payer generates a random \"receipt number\" (say, 25 random bytes)\n>> The payer derives an address from the master public key using the receipt\n>> number and pays to it\n>> The payer sends the receipt to the payee\n>> The payee derives a private key with that receipt and adds it to his wallet\n>\n>Allow me to introduce an even more wild idea.\n>\n>The payee publishes two public keys PP  PP2.\n>\n>The payer picks the first k value he intends to use in his signatures.\n>\n>The payer multiplies PP2*k = n.\n>\n>The payer pays to pubkey PP+n  with r in his first signature, or if\n>none of the txins are ECDSA signed, in an OP_RETURN additional output.\n>\n>The payer advises the payee that PP+(pp2_secret*r) is something he can\n>redeem. But this is technically optional because the payee can simply\n>inspect every transaction to check for this condition.\n>\n>This is a (subset) of a scheme by Bytecoin published a long time ago\n>on Bitcoin talk.\n>\n>It has the advantage that if payer drops his computer down a well\n>after making the payment the funds are not lost, and yet it is still\n>completely confidential.\n>\n>(The downside is particular way I've specified this breaks using\n>deterministic DSA unless you use the OP_RETURN, ... it could instead\n>be done by using one of the signature pubkeys, but the pubkeys may\n>only exist in the prior txin, which kinda stinks. Also the private\n>keys for the pubkeys may only exist in some external hardware, where a\n>OP_RETURN nonce could be produced when signing).\n>\n>These schemes have an advantage over the plain payment protocol\n>intended use (where you can just give them their receipt number, or\n>just the whole key) in that they allow the first round of\n>communication to be broadcast (e.g. payee announced to EVERYONE that\n>he's accepting payments) while preserving privacy.\n>\n>------------------------------------------------------------------------------\n>Rapidly troubleshoot problems before they affect your business. Most IT\n>organizations don't have a clear picture of how application performance\n>affects their revenue. With AppDynamics, you get 100% visibility into your\n>Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n>http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-03T20:39:39",
                "message_text_only": "On Fri, Jan 03, 2014 at 09:23:20PM +0100, Adam Back wrote:\n> Seems like you (Nadav) are the third person to reinvent this idea so far :)\n\nLol, fourth if you include me, although my case is rather embarassing as\nI had re-read Bytecoin's original post recently and completely missed\nthe main point of it!\n\n> I wrote up some of the post-Bytecoin variants here:\n> \n> https://bitcointalk.org/index.php?topic=317835.msg4103530#msg4103530\n> \n> The general limitation so far is its not SPV compatible, so the recipient\n> has to test each payment to see if its one he can compute the private key\n> for.  Or the sender has to send the recipient out of band the derivation\n> key.\n\nActually I think it has the potential to be *more* SPV compatible than\nthe alternative, as in conjunction with prefix filters it lets you\nreceive unlimited unrelated payments that you can find in the blockchain\nwith a single prefix query with a fixed bandwidth/anonymity set size\ntradeoff. (obviously in conjunction with one of the many ways of tagging\ntransactions for more efficient search)\n\nThe BIP38 approach with UI's that make it easy to create a new address\nfor every payment on the other hand force you to either accept higher\nbandwidth consumption, or decrease your anonymity set size, or lose\npayments. (inclusive)\n\nI've got a post talking about this in more detail as well as an overview\nof bloom filters vs. prefix filters that I'll publish tomorrow. (tl;dr:\nbloom filters have very poor O(n^2) scalability and should be\ndepreciated)\n\n> However at present most of the bitcoin infrastructure is using the bitcoin\n> broadcast channel as the communication channel, which also supports payer\n> and payee not being simultaneously online.  You have to be careful also not\n> to lose the key.  You dont want a subsequent payer data loss event to lose\n> money for the recipient.  You want the message to be sent atomically.\n> \n> It does seem like a very attractive proposition to be able to fix the\n> address reuse issue.  Admonishment to not reuse addresses doesnt seem to\n> have been successful so far, and there are multiple widely used wallets that\n> reuse addresses (probably in part because they didnt implement HD wallets\n> and so are scared of losing addresses due to backup failure risks of non HD\n> wallets and fresh addresses).\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001a96469654430aa06e4ae7c7328a7eb848c6fc63443f24e4a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140103/a067cbfe/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "An idea for alternative payment scheme",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back",
                "Peter Todd",
                "Nadav Ivgi",
                "Tier Nolan",
                "Gregory Maxwell",
                "Mark Friedenbach"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 15345
        }
    },
    {
        "title": "[Bitcoin-development] Merge mining",
        "thread_messages": [
            {
                "author": "David Vorick",
                "date": "2014-01-04T08:49:52",
                "message_text_only": "If you have the resources to attack one of the bigger altcoins, you\nprobably have a significant investment in the cryptocurrency space, and a\nsignificant interest in protecting it. Compromising even something like\ndogecoin would cause a lot of questions to be raised and likely drop the\nvalue of bitcoin as well as all the cryptocurrencies using the same work\nfunction as dogecoin.\n\nRight now, there's very little benefit to attacking a significant currency,\nbecause it would be very expensive and likely traumatize the whole system.\nUnless it's some power like the NSA, I don't think there's much to worry\nabout.\n\n\nOn Tue, Dec 31, 2013 at 2:38 AM, <rob.golding at astutium.com> wrote:\n\n> > But there's so much 'dry powder' out there (GPUs), I wonder if *not*\n> > supporting merge-mining is any better? At least the attacker has to do\n> > some unique PoW, so you hope it's costing them something.\n>\n> With lots of people having access to 100TH+ there's not really much\n> 'cost' to doing a 51% attack on an alt-coin beyond a short-term\n> diversion away from 'profitable' mining.\n>\n> At least by supporting merged mining, more miners are likely to\n> 'support' multiple coin types, thus making a 51% attack from an\n> individual/group less straightforward.\n>\n> >> The rational decision for a non-scam altcoin, is to take advantage of\n> >> merged mining to get as much security as possible.\n>\n> Exactly.\n>\n> Rob\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140104/9c382479/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-04T10:05:46",
                "message_text_only": "On 1/4/14, David Vorick <david.vorick at gmail.com> wrote:\n> If you have the resources to attack one of the bigger altcoins, you\n> probably have a significant investment in the cryptocurrency space, and a\n> significant interest in protecting it. Compromising even something like\n> dogecoin would cause a lot of questions to be raised and likely drop the\n> value of bitcoin as well as all the cryptocurrencies using the same work\n> function as dogecoin.\n>\n> Right now, there's very little benefit to attacking a significant currency,\n> because it would be very expensive and likely traumatize the whole system.\n> Unless it's some power like the NSA, I don't think there's much to worry\n> about.\n\nThe launch thread says it clear: \"very scrypt, such random, much\nprofit, wow, many coin\".\nSo it seems that Dogecoin doesn't use SHA256 like Bitcoin, but scrypt\nlike most of the other scamcoins.\nAnyway, I don't see anything in your comment in favor or against\nmerged mining..."
            },
            {
                "author": "David Vorick",
                "date": "2014-01-04T10:08:25",
                "message_text_only": "It's meant to be in favor of merge mining.\n\nDogecoin uses scrypt, which is a very popular algorithm. If any large\ncurrency were to be attacked through merge mining, it would probably be\nlitecoin miners attacking dogecoin. But if you control enough of the\nlitecoin network to do attack mining against dogecoin, you almost certainly\nhave a huge vested interest in cryptocurrencies doing well. By attacking\ndogecoin successfully, you'll cast doubt on the entire cryptocurrency\necosystem and hurt yourself in the process.\n\n\nOn Sat, Jan 4, 2014 at 5:05 AM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> On 1/4/14, David Vorick <david.vorick at gmail.com> wrote:\n> > If you have the resources to attack one of the bigger altcoins, you\n> > probably have a significant investment in the cryptocurrency space, and a\n> > significant interest in protecting it. Compromising even something like\n> > dogecoin would cause a lot of questions to be raised and likely drop the\n> > value of bitcoin as well as all the cryptocurrencies using the same work\n> > function as dogecoin.\n> >\n> > Right now, there's very little benefit to attacking a significant\n> currency,\n> > because it would be very expensive and likely traumatize the whole\n> system.\n> > Unless it's some power like the NSA, I don't think there's much to worry\n> > about.\n>\n> The launch thread says it clear: \"very scrypt, such random, much\n> profit, wow, many coin\".\n> So it seems that Dogecoin doesn't use SHA256 like Bitcoin, but scrypt\n> like most of the other scamcoins.\n> Anyway, I don't see anything in your comment in favor or against\n> merged mining...\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140104/b5885f64/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-04T10:34:55",
                "message_text_only": "On 1/4/14, David Vorick <david.vorick at gmail.com> wrote:\n> It's meant to be in favor of merge mining.\n>\n> Dogecoin uses scrypt, which is a very popular algorithm.\n\nAlso, MS windows is a very popular operative system.\nThat's a fallacy:\nhttp://en.wikipedia.org/wiki/Argumentum_ad_populum\n\n> If any large\n> currency were to be attacked through merge mining, it would probably be\n> litecoin miners attacking dogecoin. But if you control enough of the\n> litecoin network to do attack mining against dogecoin, you almost certainly\n> have a huge vested interest in cryptocurrencies doing well.\n\nWait, wait, is Dogecoin merge-mineable with litecoin?\nIt could be if its developers wanted to, but I highly doubt it.\nPrecisely because of the myths spread against merged mining.\n\n> By attacking\n> dogecoin successfully, you'll cast doubt on the entire cryptocurrency\n> ecosystem and hurt yourself in the process.\n\nYou shouldn't make such assumptions about the interests of a potential attacker.\nFor example, even being of the \"cryptocurrency ecosystem\" I could\nconsider that their slogans and videos are confusing newcomers and\nthey're really harming the general image of p2p currencies by\nassociating them with mad speculation and pump and dump schemes.\n\nBeing heavily involved in this \"ecosystem\", I would be very happy if\ndogecoin disappeared tomorrow. Personally I've never mined anything,\nbut if I had the resources I would actually consider such an attack.\n\nAgain, I think we're getting off-topic with perrocoin. It hardly has\nanything to do with MM.\n\n> On Sat, Jan 4, 2014 at 5:05 AM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n>\n>> On 1/4/14, David Vorick <david.vorick at gmail.com> wrote:\n>> > If you have the resources to attack one of the bigger altcoins, you\n>> > probably have a significant investment in the cryptocurrency space, and\n>> > a\n>> > significant interest in protecting it. Compromising even something like\n>> > dogecoin would cause a lot of questions to be raised and likely drop\n>> > the\n>> > value of bitcoin as well as all the cryptocurrencies using the same\n>> > work\n>> > function as dogecoin.\n>> >\n>> > Right now, there's very little benefit to attacking a significant\n>> currency,\n>> > because it would be very expensive and likely traumatize the whole\n>> system.\n>> > Unless it's some power like the NSA, I don't think there's much to\n>> > worry\n>> > about.\n>>\n>> The launch thread says it clear: \"very scrypt, such random, much\n>> profit, wow, many coin\".\n>> So it seems that Dogecoin doesn't use SHA256 like Bitcoin, but scrypt\n>> like most of the other scamcoins.\n>> Anyway, I don't see anything in your comment in favor or against\n>> merged mining...\n>>\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            }
        ],
        "thread_summary": {
            "title": "Merge mining",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "David Vorick"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 7744
        }
    },
    {
        "title": "[Bitcoin-development] BIP proposal: Authenticated prefix trees",
        "thread_messages": [
            {
                "author": "Thomas Voegtlin",
                "date": "2014-01-05T18:43:58",
                "message_text_only": "Hello and happy new year to this mailing list!\n\n\nThank you Mark for the incredible work you've been doing on this.\nI am following this very closely, because it is of primary importance\nfor Electrum.\n\nI have written a Python-levelDB implementation of this UTXO hashtree,\nwhich is currently being tested, and will be added to Electrum servers.\n\nMy implementation follows Alan Reiner's idea to store the tree as items\nin a key-value database. I believe that a C++ implementation like yours\nwill be at least an order of magnitude faster, and I am looking forward \nto it.\n\nI too believe that BIPs should define interoperability points, but probably\nnot implementation details. For the UTXO hashtree, this means that a BIP\nshould at least specify how the root hash is constructed. This might be the\nonly thing that needs to be specified.\n\nHowever, I see no pressing issue with writing a BIP; it might be preferable\nto implement and test different options first, and learn from that.\n\nThomas\n\n\n\nLe 20/12/2013 02:47, Mark Friedenbach a \u00e9crit :\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Hello fellow bitcoin developers. Included below is the first draft of\n> a BIP for a new Merkle-compressed data structure. The need for this\n> data structure arose out of the misnamed \"Ultimate blockchain\n> compression\" project, but it has since been recognized to have many\n> other applications.\n>\n> In addition to this BIP I am preparing three additional BIPs\n> describing the use of this data structure in stateless validation &\n> mining, the UBC address index for \"SPV+\" operating modes, document\n> timestamping and merged mining.\n>\n> A Python implementation of this data structure is available here:\n>\n> https://github.com/monetizeio/python-bitcoin\n>\n> A C++ implementation is being worked on.\n>\n> As per the BIP-1 procedure, I am submitting this rough draft to the\n> community for discussion. I welcome all comments and criticisms of\n> both form and content.\n>\n> - -Mark\n>\n>\n> ==Abstract==\n>\n> This BIP describes a [http://en.wikipedia.org/wiki/Hash_tree Merkle\n> hash tree] variant of the [http://en.wikipedia.org/wiki/Trie\n> prefix-tree data structure], ideally suited for encoding key-value\n> indices which support memory-efficient proofs.\n>\n> ==Motivation==\n>\n> There are a number of applications which would benefit from having a\n> data structure with the following properties:\n>\n> * '''Arbitrary mapping of keys to values.''' A ''key'' can be any\n> bytestring, and its ''value'' any other bytestring.\n> * '''Duplicate keys disallowed.''' Every key has one, and only one\n> value associated with it. Some applications demand assurance that no\n> key value is reused, and that this constraint can be checked without\n> requiring access to the entire data structure.\n> * '''Efficient look-up by key.''' The data structure should support\n> sub-linear lookup operations with respect to the number of keys in the\n> mapping. Logarithmic time or linear with respect to the length of the\n> key should be achievable and would be sufficient for realistic\n> applications.\n> * '''Merkle compression of mapping structure.''' It should be possible\n> to produce a reduced description of the tree consisting of a single\n> root hash value which is deterministically calculated from the mapping\n> structure.\n> * '''Efficient proofs of inclusion.''' It should be possible to\n> extract a proof of key/value mapping which is limited in size and\n> verification time by the length of the key in the worst case.\n> * '''Computation of updates using local information.''' Given a set of\n> inclusion proofs, it should be possible to calculate adjustments to\n> the local mapping structure (update or deletion of included mappings,\n> or insertion between two included mappings which are adjacent in the\n> global structure).\n>\n> Such applications include committed validation indices which enable\n> stateless mining nodes, committed wallet indices which enable\n> trust-less querying of the unspent transaction output set by\n> <code>scriptPubKey</code>, efficient document time-stamping, and\n> secure & efficient merged mining. This BIP describes an authenticated\n> prefix tree which has the above properties, but leaves the myriad\n> applications to be formalized in future BIPs.\n>\n> ==Data structure==\n>\n> This BIP defines a binary prefix tree. Such a structure provides a\n> mapping of bitstrings (the ''keys'') to bytestrings (the ''values'').\n> It is an acyclic binary tree which implicitly encodes keys within the\n> traversal path -- a \"left\" branch is a 0, and a \"right\" branch is a 1.\n> Each node is reachable by only one unique path, and reading off the\n> branches taken (0 for each left, 1 for each right) as one follows the\n> path from root to target yields the node's key.\n>\n> The particular binary prefix tree defined by this BIP is a hybrid\n> PATRICIA / de la Brandais tree structure.\n> [http://en.wikipedia.org/wiki/Radix_tree PATRICIA trees] compress a\n> long sequence of non-branching nodes into a single interior node with\n> a per-branch ''skip prefix''. This achieves significant savings in\n> storage space, root hash calculation, and traversal time.\n>\n> A de la Brandais trie achieves compression by only storing branches\n> actually taken in a node. The space savings are minimal for a binary\n> tree, but place the serialized size of a non-branching interior node\n> under the SHA-256 block size, thereby reducing the number of hash\n> operations required to perform updates and validate proofs.\n>\n> This BIP describes the authenticated prefix tree and its many\n> variations in terms of its serialized representation. Additional BIPs\n> describe the application of authenticated prefix trees to such\n> applications as committed indices, document time-stamping, and merged\n> mining.\n>\n> ==Serialization format==\n>\n> As a hierarchical structure, the serialization of an entire tree is\n> the serialization of its root node. A serialized node is the\n> concatenation of five structures:\n>\n>      node := flags || VARCHAR(extra) || value || left || right\n>\n> The <code>flags</code> is a single byte field whose composite values\n> determine the bytes that follow.\n>\n>      flags = (left_flags  << 0) |\n>              (right_flags << 2) |\n>              (has_value   << 4) |\n>              (prune_left  << 5) |\n>              (prune_right << 6) |\n>              (prune_value << 7)\n>\n> The <code>left_flags</code> and <code>right_flags</code> are special\n> 2-bit enumeration fields. A value of 0 indicates that the node does\n> not branch in this direction, and the corresponding <code>left</code>\n> or <code>right</code> branch is missing (replaced with the empty\n> string in the node serialization). A value of 1 indicates a single bit\n> key prefix for this branch, implicitly 0 for <code>left</code> and 1\n> for <code>right</code>. A 2 indicates up to 7 bits of additional skip\n> prefix (beyond the implicit first bit, making 8 bits total) are stored\n> in a compact single-byte format. A 3 indicates a skip prefix with\n> greater than 7 additional bits, stored length-prefix encoded.\n>\n> The single bit <code>has_value</code> indicates whether the node\n> stores a data bytestring, the value associated with its key prefix.\n> Since keys may be any value or length, including one key being a\n> prefix of another, it is possible for interior nodes in addition to\n> leaf nodes to have values associated with them, and therefore an\n> explicit value-existence bit is required.\n>\n> The remaining three bits are used for proof extraction, and are masked\n> away prior to hash operations. <code>prune_left</code> indicates that\n> the entire left branch has been pruned. <code>prune_right</code> has\n> similar meaning for the right branch. If <code>has_value</code> is\n> set, <code>prune_value</code> may be set to exclude the node's value\n> from encoded proof. This is necessary field for interior nodes, since\n> it is possible that their values may be pruned while their children\n> are not.\n>\n> The <code>value</code> field is only present if the bit\n> <code>flags.has_value</code> is set, in which case it is a\n> <code>VARCHAR</code> bytestring:\n>\n>      switch flags.has_value:\n>        case 0:\n>          value := \u03b5\n>        case 1:\n>          value := VARCHAR(node.value)\n>\n> The <code>extra</code> field is always present, and takes on a\n> bytestring value defined by the particular application. Use of the\n> <code>extra</code> field is application dependent, and will not be\n> covered in this specification. It can be set to the empty bytestring\n> (serialized as a single zero byte) if the application has no use for\n> the <code>extra</code> field.\n>\n>      value := VARCHAR(calculate_extra(node))\n>\n> The <code>left</code> and <code>right</code> non-terminals are only\n> present if the corresponding <code>flags.left_flags</code> or\n> <code>flags.right_flags</code> are non-zero. The format depends on the\n> value of this flags setting:\n>\n>      switch branch_flags:\n>        case 0:\n>          branch := \u03b5\n>        case 1:\n>          branch := branch_node_or_hash\n>        case 2:\n>          prefix  = prefix >> 1\n>          branch := int_to_byte(1 << len(prefix) | bits_to_int(prefix)) ||\n>                    branch_node_or_hash\n>        case 3:\n>          prefix  = prefix >> 1\n>          branch := VARINT(len(prefix) - 9) ||\n>                    bits_to_string(prefix) ||\n>                    branch_node_or_hash\n>\n> <code>branch_flags</code> is a stand-in meant to describe either\n> <code>left_flags</code> or <code>right_flags</code>, and likewise\n> everywhere else in the above pseudocode <code>branch</code> can be\n> replaced with either <code>left</code> or <code>right</code>.\n>\n> <code>prefix</code> is the key bits between the current node and the\n> next branching, terminal, and/or leaf node, including the implicit\n> leading bit for the branch (0 for the left branch, 1 for the right\n> branch). In the above code, <code>len(prefix)</code> returns the\n> number of bits in the bitstring, and <code>prefix >> 1</code> drops\n> the first bit reducing the size of the bitstring by one and\n> renumbering the indices accordingly.\n>\n> The function <code>int_to_byte</code> takes an integer in the range\n> [0, 255] and returns the octet representing that value. This is a NOP\n> in many languages, but present in this pseudocode so as to be explicit\n> about what is going on.\n>\n> The function <code>bits_to_int</code> interprets a sequence of bits as\n> a little-endian integer value. This is analogous to the following\n> pseudocode:\n>\n>      def bits_to_int(bits):\n>          result = 0\n>          for idx in 1..len(bits):\n>              if bits[idx] == 1:\n>                  result |= 1<<idx\n>\n> The function <code>bits_to_string</code> serializes a sequence of bits\n> into a binary string. It uses little-endian bit and byte order, as\n> demonstrated by the following pseudocode:\n>\n>      def bits_to_string(bits):\n>          bytes = [0] * ceil(len(bits) / 8)\n>          for idx in 1..len(bits):\n>              if bits[idx] == 1:\n>                  bytes[idx / 8] |= 1 << idx % 8\n>          return map(int_to_byte, bytes)\n>\n> <code>branch_node_or_hash</code> is either the serialized child node\n> or its SHA-256 hash and associated meta-data. Context determines which\n> value to use: during digest calculations, disk/database serialization,\n> and when the branch is pruned the hash value is used and serialized in\n> the same way as other SHA-256 values in the bitcoin protocol (note\n> however that it is single-SHA-256, not the double-SHA-256 more\n> commonly used in bitcoin). The number of terminal (value-containing)\n> nodes and the serialized size in bytes of the fully unpruned branch\n> are suffixed to the branch hash. When serializing a proof or\n> snapshotting tree state and the branch is not pruned, the serialized\n> child node is included directly and the count and size are omitted as\n> they can be derived from the serialization.\n>\n>      if branch_pruned or SER_HASH:\n>          branch_node_or_hash := SHA-256(branch) ||\n>                                 count(branch) ||\n>                                 size(branch)\n>      else:\n>          branch_node_or_hash := serialize(branch)\n>\n> As an example, here is the serialization of a prefix tree mapping the\n> names men and women of science to the year of their greatest publication:\n>\n>      >>> dict = AuthTree()\n>      >>> dict['Curie'] = VARINT(1898)\n>      >>> dict('Einstein') = VARINT(1905)\n>      >>> dict['Fleming'] = VARINT(1928)\n>      >>> dict['\u4e2d\u672c'] = VARINT(2009)\n>      >>> dict.serialize()\n>      # An bytestring, broken out into parts:\n>\n>      # . Root node:\n>      0x0e # left_flags: 2, right_flags: 3, has_value: 1\n>      0x00 # extra: \u03b5\n>\n>      # .l Inner node: 0b01000\n>      0x11 # 0b01000\n>      0x07 # left_flags: 3, right_flags: 1\n>      0x00 # extra: \u03b5\n>\n>      # .l.l Inner node: 0b01000011 0b01110101 0b01110010 0b01101001\n>      #                  'C'        'u'        'r'        'i'\n>      #                  0b01100101\n>      #                  'e'\n>      0x1abb3a599a02 # 0b01101110101011100100110100101100101\n>      0x10           # has_value: 1\n>      0x00           # extra: \u03b5\n>      0x03fd6a07     # value: VARINT(1911)\n>\n>      # .l.r Inner node: 0b010001\n>      0x0f # left_flags: 3, right_flags: 3\n>      0x00 # extra: \u03b5\n>\n>      # .l.r.l Inner node: 0b01000101 0b01101001 0b01101110 0b01110011\n>      #                    'E'        'i'        'n'        's'\n>      #                    0b01110100 0b01100101 0b01101001 0b01101110\n>      #                    't'        'e'        'i'        'n'\n>      0x312ded9c5d4c2ded00 # 0b1011010010110111\n>                           # 0b0011100110111010\n>                           # 0b0011001010110100\n>                           # 0b101101110\n>      0x10                 # has_value: 1\n>      0x00                 # extra: \u03b5\n>      0x03fd7107           # value: VARINT(1905)\n>\n>      # .l.r.r Inner node: 0b01000110 0b01101100 0b01100101 0b01101101\n>      #                    'F'        'l'        'e'        'm'\n>      #                    0b01101001 0b01101110 0b01100111\n>      #                    'i'        'n'        'g'\n>      0x296c4c6d2dedcc01 # 0b0011011000110010\n>                         # 0b1011011010110100\n>                         # 0b10110111001100111\n>      0x10               # has_value: 1\n>      0x00               # extra: \u03b5\n>      0x03fd8807         # value: VARINT(1928)\n>\n>      # .r Inner node: 0b11100100 0b10111000 0b10101101\n>      #                '\u4e2d'\n>      #                0b11100110 0b10011100 0b10101100\n>      #                '\u672c'\n>      0x27938edab39c1a # 0b1100100101110001\n>                       # 0b0101101111001101\n>                       # 0b001110010101100\n>      0x10             # has_value: 1\n>      0x00             # extra: \u03b5\n>      0x03fdd907       # value: VARINT(2009)\n>\n> ==Hashing==\n>\n> There are two variations of the authenticated prefix tree presented in\n> this draft BIP. They differ only in the way in which hash values of a\n> node and its left/right branches are constructed. The variations,\n> discussed below, tradeoff computational resources for the ability to\n> compose operational proofs. Whether the performance hit is\n> significant, and whether or not the added features are worth the\n> tradeoff depends very much on the application.\n>\n> ===Variation 1: Level-compressed hashing===\n>\n> In this variation the referenced child node's hash is used in\n> construction of an interior node's hash digest. The interior node is\n> serialized just as described (using the child node's digest instead of\n> inline serialization), the resulting bytestring is passed through one\n> round of SHA-256, and the digest that comes out of that is the hash\n> value of the node. This is very efficient to calculate, requiring the\n> absolute minimum number of SHA-256 hash operations, and achieving\n> level-compression of computational resources in addition to reduction\n> of space usage.\n>\n> For example:\n>\n>      >>> dict = AuthTree()\n>      >>> dict['a'] = 0xff\n>      >>> dict.serialize()\n>      0x0200c3100001ff\n>      >>> dict.root\n>      AuthTreeNode(\n>          left_prefix = 0b01100001,\n>          left_hash   =\n> 0xbafa0e2bba3396c5e9804b6cbe61be82bc442c1121aed81f8d5de36e9b20dc2f,\n>          left_count  = 1,\n>          left_size   = 4)\n>      >>> dict.hash\n>      0xb4837376022a7c9ddaa7d685ad183bcbd5d16c362b81fa293a7b9e911766cf3c\n>\n> Assuming uniform distribution of key values, level-compressed hashing\n> has time-complexity logarithmic with respect to the number of keys in\n> the prefix tree. The disadvantage is that it is not possible in\n> general to \"rebase\" an operational proof on top of a sibling,\n> particularly if that sibling deletes branches that result in\n> reorganization and level compression of internal nodes used by the\n> rebased proof.\n>\n> ===Variation 2: Proof-updatable hashing===\n>\n> In this variation, level-compressed branches are expanded into a\n> series of chained single-branch internal nodes, each including the\n> hash of its direct child. For a brach with a prefix N bits in length,\n> this requires N chained hashes. Thanks to node-compression (excluding\n> empty branches from the serialization), it is possible for each hash\n> operation + padding to fit within a single SHA-256 block.\n>\n> Note that the serialization semantics are unchanged! The variation\n> only changes the procedure for calculating the hash values of interior\n> nodes. The serialization format remains the same (modulo differing\n> hash values standing in for pruned branches).\n>\n> Using the above example, calling <code>dict.hash</code> causes the\n> following internal nodes to be constructed:\n>\n>      >>> node1 = AuthTreeNode(\n>          right_prefix = 0b1,\n>          right_hash   =\n> 0xbafa0e2bba3396c5e9804b6cbe61be82bc442c1121aed81f8d5de36e9b20dc2f,\n>          right_count  = 1,\n>          right_size   = 4)\n>      >>> node2 = AuthTreeNode( left_prefix=0b0,  left_hash=node1.hash,\n>   left_count=1,  left_size=4)\n>      >>> node3 = AuthTreeNode( left_prefix=0b0,  left_hash=node2.hash,\n>   left_count=1,  left_size=4)\n>      >>> node4 = AuthTreeNode( left_prefix=0b0,  left_hash=node3.hash,\n>   left_count=1,  left_size=4)\n>      >>> node5 = AuthTreeNode( left_prefix=0b0,  left_hash=node4.hash,\n>   left_count=1,  left_size=4)\n>      >>> node6 = AuthTreeNode(right_prefix=0b1, right_hash=node5.hash,\n> right_count=1, right_size=4)\n>      >>> node7 = AuthTreeNode(right_prefix=0b1, right_hash=node6.hash,\n> right_count=1, right_size=4)\n>      >>> node8 = AuthTreeNode( left_prefix=0b0,  left_hash=node7.hash,\n>   left_count=1,  left_size=4,\n>                                value=0xff)\n>      >>> dict.hash == node8.hash\n>      True\n>      >>> dict.hash\n>      0xc3a9328eff06662ed9ff8e82aa9cc094d05f70f0953828ea8c643c4679213895\n>\n> The advantage of proof-updatable hashing is that any operational proof\n> may be \"rebased\" onto the tree resulting from a sibling proof, using\n> only the information locally available in the proofs, even in the\n> presence of deletion operations that result in level-compression of\n> the serialized form. The disadvantage is performance: validating an\n> updatable proof requires a number of hash operations lower-bounded by\n> the length of the key in bits.\n>\n> ==Inclusion proofs==\n>\n> An inclusion proof is a prefix tree pruned to contain a subset of its\n> keys. The serialization of an inclusion proof takes the following form:\n>\n>      inclusion_proof := variant || root_hash || root_node || checksum\n>\n> Where <code>variant</code> is a single-byte value indicating the\n> presence of level-compression (0 for proof-updatable hashing, 1 for\n> level-compressed hashing). <code>root_hash</code> is the Merkle\n> compression hash of the tree, the 32-byte SHA-256 hash of the root\n> node. <code>tree</code> is the possibly pruned, serialized\n> representation of the tree. And finally, <code>checksum</code> is the\n> first 4 bytes of the SHA-256 checksum of <code>variant</code>,\n> <code>root_hash</code>, and <code>root_node</code>.\n>\n> For ease of transport, the standard envelope for display of an\n> inclusion proof is internet-standard base64 encoding in the following\n> format:\n>\n> - -----BEGIN INCLUSION PROOF-----\n> ATzPZheRnns6KfqBKzZs0dXLOxithdan2p18KgJ2c4O0DgARBwAauzpZmgIQAAP9agcPADEt7Zxd\n> TC3tABAAA/1xBylsTG0t7cwBEAAD/YgHJ5OO2rOcGhAAA/3ZByEg+2g=\n> - -----END INCLUSION PROOF-----\n>\n> Decoded, it looks like this:\n>\n>      0x01 # Level-compressed hashing\n>      # Merkle root:\n>      0x3ccf6617919e7b3a29fa812b366cd1d5cb3b18ad85d6a7da9d7c2a02767383b4\n>      # Serialized tree (unpruned):\n>      0x0e001107001abb3a599a02100003fd6a070f00312ded9c5d4c2ded00100003fd\n>      0x7107296c4c6d2dedcc01100003fd880727938edab39c1a100003fdd907\n>      # Checksum:\n>      0x2120fb68\n>\n> ==Operational proofs==\n>\n> An operational proof is a list of insert/update and delete operations\n> suffixed to an inclusion proof which contains the pathways necessary\n> to perform the specified operations. The inclusion proof must contain\n> the key values to be updated or deleted, and the nearest adjacent key\n> values for each insertion. The serialization of an operational proof\n> takes the following form:\n>\n>      operational_proof := variant || root_hash || tree ||\n>                           VARLIST(delete*) || VARLIST(update*) ||\n>                           new_hash || checksum\n>\n>      delete := VARCHAR(key)\n>      update := VARCHAR(key) || VARCHAR(value)\n>\n> The first three fields, <code>variant</code>, <code>root_hash</code>,\n> and <code>tree</code> are the inclusion proof, and take the same\n> values described in the previous section. <code>deletes</code> is a\n> list of key values to be deleted; each key value in this list must\n> exist in the inclusion proof. <code>updates</code> is a list of key,\n> value mappings which are to be inserted into the tree, possibly\n> replacing any mapping for the key which already exists; either the key\n> itself if it exists (update), or the two lexicographically closest\n> keys on either side if it does not (insert) must be present in the\n> insertion proof. <code>new_hash</code> is the resulting Merkle root\n> after the insertion, updates, and deletes are performed, and\n> <code>checksum</code> is the initial 4 bytes of the SHA-256 hash of\n> the preceding fields.\n>\n> Just like inclusion proofs, an operational proof is encoded in base64\n> for display and transport. Here's the same\n>\n> - -----BEGIN OPERATIONAL PROOF-----\n> ATzPZheRnns6KfqBKzZs0dXLOxithdan2p18KgJ2c4O0LgARaIsVaQi/GdhOPOgA8p4Pu4PiEfEg\n> lcmy3j7bOc7hXw0DLSeTjtqznBoQAAP92QcBMOS4reacrACzuZJbyP7fqIOf5VEk4iarG4+uPoZC\n> oun8BztQMQBy0LHVeSY=\n> - -----END OPERATIONAL PROOF-----\n>\n> Decoded and broken into its constituent fields:\n>\n>      0x01 # Level-compressed hashing\n>      # Original Merkle root:\n>      0x3ccf6617919e7b3a29fa812b366cd1d5cb3b18ad85d6a7da9d7c2a02767383b4\n>      # Serialized tree (included keys: '\u4e2d\u672c'):\n>      0x2e0011688b156908bf19d84e3ce800f29e0fbb83e211f12095c9b2de3edb39ce\n>      0xe15f0d032d27938edab39c1a100003fdd907\n>      # Deletion list ['\u4e2d\u672c']:\n>      0x01\n>      0x30e4b8ade69cac\n>      # Insertion list []:\n>      0x00\n>      # New Merkle root:\n>      0xb3b9925bc8fedfa8839fe55124e226ab1b8fae3e8642a2e9fc073b50310072d0\n>      # Checksum:\n>      0xb1d57926\n>\n> ~End of File~\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.14 (GNU/Linux)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJSs6HIAAoJEAdzVfsmodw4gooQAJm7XNsZjgdeTSpKIvUIU38f\n> tQx2FD08hQdLl48me5mDUbHJgGlYINsKAgoZ8Mqwi/kHEEYhuIlLIX1p6Ovigidb\n> 21BiVoOLdG1egGOwxp17DuwYaDPTppFTlN9TBjZzW6WKc7+4aNvyc1KtrbHIhtj/\n> 04ekFyAn4U5UH0ht7CI79j0u3Kp85p5D4PyYZB2m82mzti6OxpSM4tXlMkDW7ihg\n> QJwiZSjzejqTd7WF0zr0SLeGVRSN2A0dzUCoVsI98eIa3hkw2N4ae6dRkibyStOT\n> V8VEDvHArEDlvu8jiryajhsom5mvtOOclNDkVXWAf/Te4gj05iYdTIvNvDEJtqsP\n> XDbmw6GgV1kBLlLo0mp//t/+wr+nIvy+sVAP+eqtM/0vjaVXBkXxkUMqqNkrtVpB\n> f3whq7nFahssUMSoWE93jgob1ayAax2XUALVMAXYsJl7b2MqBGlhiTZ8FQZ+TW4A\n> tIpKeUprPmDvA18rO3SCbmLMQryZqYiH0sRyvUc5kvn3qCRHrISZNkEuK591eS+x\n> BO1eOluPzVqeXPPSK1jvGeY0FNJtwzbov4nI1mzOvzQHLCvkHn5PhUFCK5tL5tAe\n> b0Z5qwDV+SvVs7W1R7ejYBzEj77U1zuzZ9AtikOuvy+bNGrkIlpI49EyXHijm7C3\n> Q6JacTuI0PelYji2gaBJ\n> =BbDs\n> -----END PGP SIGNATURE-----\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-06T18:13:24",
                "message_text_only": "On Sun, Jan 05, 2014 at 07:43:58PM +0100, Thomas Voegtlin wrote:\n> Hello and happy new year to this mailing list!\n> \n> \n> Thank you Mark for the incredible work you've been doing on this.\n> I am following this very closely, because it is of primary importance\n> for Electrum.\n> \n> I have written a Python-levelDB implementation of this UTXO hashtree,\n> which is currently being tested, and will be added to Electrum servers.\n\nAlong the lines of my recent post on blockchain data:\n\nIs it going to be possible to do partial prefix queries on that tree?\n\nAlso have you considered creating per-block indexes of all\nscriptPubKeys, spent or unspent, queryable via the same partial prefix\nmethod?\n\n> I too believe that BIPs should define interoperability points, but probably\n> not implementation details. For the UTXO hashtree, this means that a BIP\n> should at least specify how the root hash is constructed. This might be the\n> only thing that needs to be specified.\n> \n> However, I see no pressing issue with writing a BIP; it might be preferable\n> to implement and test different options first, and learn from that.\n\nIt'd be very good to test this stuff thoroughly on Electrum first and\nget a feel for the performance and usability before any soft-fork to\nmake it a miner commitment.\n\nSimilarly a C++ implementation should be simply added to Bitcoin Core as\na bloom filter replacement and made available over the P2P network.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000009bc28e08b41a74801c5878bf87978c2486aee7ed8a85778\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140106/9cfcd23b/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-07T00:21:25",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 01/06/2014 10:13 AM, Peter Todd wrote:\n> On Sun, Jan 05, 2014 at 07:43:58PM +0100, Thomas Voegtlin wrote:\n>> I have written a Python-levelDB implementation of this UTXO\n>> hashtree, which is currently being tested, and will be added to\n>> Electrum servers.\n> \n> Along the lines of my recent post on blockchain data:\n> \n> Is it going to be possible to do partial prefix queries on that\n> tree?\n\nThere's really two tree structures being talked about here. Correct me\nif I'm wrong Thomas, but last time I looked at your code it was still\nimplementing a 256-way PATRICIA trie, correct? This structure lends\nitself to indexing either scriptPubKey or H(scriptPubKey) with\napproximately the same performance characteristics, and in the\n\"Ultimate blockchain compression\" thread there is much debate about\nwhich to use.\n\nIn the process of experimentation I've since moved from a 256-way\nPATRICIA trie to a bitwise, non-level-compressed trie structure - what\nI call proof-updatable trees in the BIP. These have the advantage of\nallowing stateless application of one proof to another, and as\nconsequence enable mining & mempool operations without access to the\nUTXO set, so long as proofs are initially provided in the transaction\n& block wire format.\n\nThe \"disadvantage\" is that performance is closely tied to key length,\nmaking H(scriptPubKey) the much more desirable option. I'm sure you\nsee that as an advantage, however :)\n\n> Also have you considered creating per-block indexes of all \n> scriptPubKeys, spent or unspent, queryable via the same partial\n> prefix method?\n\nThis would be quite easy to do, separate from the UTXO structure but\nusing the same trie format.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSy0iFAAoJEAdzVfsmodw434MQAIA/fDYT7SfMtfLEgDQKhXCn\nslRqFEx/HXjvgHHSYnbr9V+8LrGzNvT2ImebbV9ge8VlziAFNGIUq2EYhFs4kHWu\nGVm9aL8Jj/27SvM0tRwr9n2XIifKOh2sVINAjbv+UwPv/O+cULU95/b53DEF6aqI\nOWxioOR50TPe4t9AevAGVypNLm1DsyDdymhO9xyBN92xGTNj5QKL5hHG3kcsLIl1\n7KaxO0w4UC2sdSGj9FeyH1b0zYg8FlzjJHc1CUshHwUwyYo8LRJtRypL5lrayERg\nEr/kIGEDovcenNBW8G79l+8VKPfB/lMTssT2pDiQL+1e1fg46CIQxHSyap2JSFTE\njgleRk/+1NK/ZjOQ8dEBPZK3TE1WY3qlm/ekjG/8W5kXqcxzFBoAkeBNXuJ/8UMi\nmKe+DTmbp0xnvLO1p+hpugXKfrQSpcFL+ZvJHlFS1lz7O1N3WvuDCNP9El+L6ueM\nnFzjr1NTnX0z4vYtscI7qBKVqUrB7Z84c3O/lSYpw4Jilxl4trzV4cn7+AF7KWGM\nktR9JJeIoNcJ2Zx4EpRp6OSwhtLkWZyLpPnidQ2p6ev2ytXpTpGsW/i5XS2w57UD\n2IG5E0Q7Xzvd58lI/YollWQcagVOZdyzYXa+wVZoFQ6gLF47andpUmtUJOhI7gxv\nT/rWhPhkTMUn8TdvUcV/\n=N9zM\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-01-07T06:31:57",
                "message_text_only": "Le 07/01/2014 01:21, Mark Friedenbach a \u00e9crit :\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> On 01/06/2014 10:13 AM, Peter Todd wrote:\n>> On Sun, Jan 05, 2014 at 07:43:58PM +0100, Thomas Voegtlin wrote:\n>>> I have written a Python-levelDB implementation of this UTXO\n>>> hashtree, which is currently being tested, and will be added to\n>>> Electrum servers.\n>> Along the lines of my recent post on blockchain data:\n>>\n>> Is it going to be possible to do partial prefix queries on that\n>> tree?\n> There's really two tree structures being talked about here. Correct me\n> if I'm wrong Thomas, but last time I looked at your code it was still\n> implementing a 256-way PATRICIA trie, correct? This structure lends\n> itself to indexing either scriptPubKey or H(scriptPubKey) with\n> approximately the same performance characteristics, and in the\n> \"Ultimate blockchain compression\" thread there is much debate about\n> which to use.\n\nYou are right. The 256-way branching follows from the fact that\nthe tree was implemented using a key-value database operating\nwith byte strings (leveldb). With this implementation constraint,\na different branching would probably be possible but wasteful.\n\nMy recent code creates one leaf per unspent, and uses 56-byte\nkeys built as:\n\n   H(scriptPubKey) + txid + txpos\n\n(This is not pushed yet, it needs cleanup. Previous code created one \nleaf per address)\n\nPartial prefix queries are possible with database iterators.\n\n> In the process of experimentation I've since moved from a 256-way\n> PATRICIA trie to a bitwise, non-level-compressed trie structure - what\n> I call proof-updatable trees in the BIP. These have the advantage of\n> allowing stateless application of one proof to another, and as\n> consequence enable mining & mempool operations without access to the\n> UTXO set, so long as proofs are initially provided in the transaction\n> & block wire format.\n\nI see the advantage of doing that, but this looks really far-fetched..\nMy understanding is that it would require a complete change in the\nway clients and miners work. Could such a change be brought iteratively?"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-08T01:04:58",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 01/06/2014 10:31 PM, Thomas Voegtlin wrote:\n> You are right. The 256-way branching follows from the fact that the\n> tree was implemented using a key-value database operating with byte\n> strings (leveldb). With this implementation constraint, a different\n> branching would probably be possible but wasteful.\n\nNot really. Just use a suffix to determine the number of bits used in\nthe final key byte. For example, the string \"abc\" would have the key\n\n    0x61626308 // \"abc\\x08\"\n\nDropping the final bit would mean masking it off and having a\ndifferent terminating value:\n\n    0x61626207 // \"abb\\x07\"\n\nThat way you keep the lexical ordering of keys necessary for database\niteration, and the efficient binary encoding.\n\n> I see the advantage of doing that, but this looks really\n> far-fetched.. My understanding is that it would require a complete\n> change in the way clients and miners work. Could such a change be\n> brought iteratively?\n\nIt is an iterative change, I believe. You might be confusing this idea\nwith Peter Todd's TXO commitment proposal using MMR trees, which is a\ndrastic change with its own set of tradeoffs. Just to be clear, here's\nwhat I'm proposing:\n\n1) Restructure the current UTXO index to be a Merkle tree, basically\nby splitting coins into individual outputs and adding interior nodes\nto the leveldb database.\n\n2) Add hash commitments of this structure to the coinbase.\n\nIt's still mapping txid's to unspent outputs, just as before - this\nhas nothing to do with the script keyed \"wallet index.\" It's just now\nnodes can prefix optional proofs to block or transaction messages\nwhich prove by reference to the current best block's hash the spend\nstatus of the inputs of a transaction, or all the inputs of all the\ntransactions of a block.\n\nIf the more expensive proof-updatable hashing is used, then these\nproofs can even be composed or \"rebased\" onto a new block by applying\nthe contents of an \"operational proof\" representing the diff between\ntwo blocks / the application of a series of transactions.\n\nThis means that a node which does not have access to the UTXO set can\nnevertheless receive transactions or entire blocks with prefixed\nproofs and check the validity of the transaction with just the\ninformation available (proof + transaction contents).\n\nAll that is required after the above soft-fork is a protocol version\nupdate and/or a service bit to indicate the ability to send or receive\nproof-prefixed messages. I'd call that an incremental update.\n\n[Aside: adding the wallet index requires storing the entire UTXO set\nin duplicated form, indexed this time by scriptPubKey or\nH(scriptPubKey), and including proofs of this structure as well. It is\nunlikely that any soft-fork would occur forcing consensus over the\nwallet index, but it could be done as a meta-chain or as an index\ncovering just the contents of the block.]\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSzKQ2AAoJEAdzVfsmodw4hyoQAJ0f6P3ijZCEw7IPd/RcrmkI\nViv4j17ZyAAcbNUplvjzhr/tIIKYPg51ltvfkp8cGRHgez88QsljzvM8B5n+nbPa\njaaI6eiJ3AU1bR8hWYKtlXFwMvRjyr3ofl8hhTvYptGv9x3/Tr+2FwxIRY0413m6\n2h95vItsvBs8v7clqLoBEqx9uyUpsH3+J32V4oGubrNAFXh1oOHi4Ban+TOKYaQV\nGHZaIZ3bVAvcMd5riaWSPUPLHwJnxQ8w6SlVRy2UNUPe+9yTuy4n1GW4vk4WHvop\nFgZFrM3LBmh1MhlYHRdEUUtwk3mfDuGbfW5UJVMri0Nis1PsXr5VK4qQaMbd/9e6\nM2uWKslY9QCnzMajnHen9OwotteAJy2I1KHVcxXb0tFqrvqZ6o/auIe0G4VdKYuI\nXfNF3mokX93tiSflmphDba6qgB/W+Y6UD2gG2AeFuMGhFF/Hy62pVC6Zx7PKZ3vL\nKh27rKkO/0FJau2JCQm5xBiQgCnKghqOiHefY3o+l+Y9kJ8fXKWCuwJ0lJ3LxZ2u\n8H6sp6Jm9Ct9L90wSn7VmmI5H3bRe8sa7sylH4BR2T6jP3/tKDYTEeNWj+F9FfO1\nFxsjYrjAyv1HxYYKd/Y1svEVSsKMv3a2SR9pF36ynBABdFjvx+oEuCyCO4tspFe6\n15eA1QoMKvEQe/Ww5kRC\n=L9WT\n-----END PGP SIGNATURE-----"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal: Authenticated prefix trees",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Thomas Voegtlin",
                "Peter Todd",
                "Mark Friedenbach"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 35359
        }
    },
    {
        "title": "[Bitcoin-development] Privacy and blockchain data",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-01-06T02:53:12",
                "message_text_only": "* Summary\n\nCoinJoin, CoinSwap and similar technologies improve your privacy by\nmaking sure information about what coins you own doesn't make it into\nthe blockchain, but syncing your wallet is a privacy risk in itself and\ncan easily leak that same info. Here's an overview of that risk, how to\nquantify it, and how to reduce it efficiently.\n\n\n* Background\n\nIn the most general sense a Bitcoin wallet is a collection of one or\nmore scriptPubKeys, often known as addresses.(*) The basic purpose of\nthe wallet is maintain the set of all transaction outputs (txouts)\nmatching the scriptPubKeys in the wallet.  Secondary to that purpose is\nto maintain the set of all transactions associated with scriptPubKeys in\nthe wallet; almost all (all?) wallet software maintains transaction\ninformation rather than only txout data. Usually, but not always, the\nwallet will have some mechanism to spend transaction outputs, creating\nnew transactions. (if the wallet doesn't it is referred to as a\nwatch-only wallet)\n\nGiven a full set of blockchain data the task of keeping the set of all\nrelevant transactions and txouts up-to-date is simple: scan the\nblockchain for the relevant data. The challenge is to devise systems\nwhere wallets can be kept up to date without this requirement in a way\nthat is secure, efficient, scalable, and meets the user's privacy\nrequirements.\n\n*) Alternatively addresses can be thought of as instructions to the\n   payor as to how to generate a scriptPubKey that the payee can spend,\n   a subtlety different concept.\n\n\n* Threat Model and Goals\n\nCurrently the Bitcoin network consists of a large (low thousands) number\nof allegedly independent nodes. There is no mechanism to prevent an\nattacker from sybil attacking the network other than the availability of\nIP addresses. This protection is made even weaker by the difficulty of\nbeing sure you have a non-sybilled list of nodes to connect too; IP\naddresses are passed gossip-style with no authentication.\n\nFrom a privacy perspective we are conservative and assume an active,\ninternal, and global attacker - using the terminology of Diaz et al.(1)\n- that controls up to 100% of the nodes you are connected too. With\nregard to retrieval of blockchain data we can use the Sweeney's notion\nof k-anonymity(2) where the privacy-sensitive data for an individual is\nobscured by it's inclusion in a data of a large set of individuals, the\nanonymity set.\n\n\n* Basic Functionality\n\nWith regard to blockchain data we have the following basic functions:\n\n** Spending funds\n\nThe user creates a transaction and gets it to miners by some method,\nusually the P2P network although also possibly by direct submission.\nEither way privacy can be achieved through a mix network such as Tor\nand/or relaying other users' transactions so as to embed yours within a\nlarger anonymity set. In some cases payment protocols can shift the\nproblem to the recipient of the funds. Using CoinJoin also helps\nincrease the anonymity set.\n\nUsually the sender will want to determine when the transaction confirms;\nonce the transaction has confirmed modulo a reorganization the\nconfirmation count can only increase. Transaction mutability and\ndouble-spends by malicious CoinJoin participants complicate the task of\ndetecting confirmation: ideally we could simply query for the presence\nof a given txid in each new block, however the transaction could be\nmutated, changing the txid. The most simple way to detect confirmation\nis then to query for spends of the txouts spend by the transaction.\n\n\n** Receiving new funds\n\nWhile in the future payment protocols may give recipients transaction\ninformation directly it is most likely that wallets will continue to\nhave to query peers for new transactions paying scriptPubKey's under the\nuser's control for the forseeable future.\n\n\n** Detection of unauthorized spends\n\nUsers' want early detection of private key compromise, accomplished by\nquerying blockchain data for spends from txouts in their wallets. This\nhas implications for how change must be handled, discussed below.\n\n\n* Scalability/Efficiency\n\nThe total work done by the system as a whole for all queries given some\nnumber of transactions n is the scalability of the scheme. In addition\nscalability, and privacy in some cases, is improved if work can be\neasily spread out across multiple nodes both at a per-block and\nwithin-block level.\n\n\n* Reliability/Robustness\n\nDeterministic wallets using BIP32 or similar, where all private keys are\nderived from a fixed seed, have proven to be extremely popular with\nusers for their simple backup model. While losing transaction metadata\nafter a data-loss event is unfortunate, losing access to all funds is a\ndisaster. Any address generation scheme must take this into account and\nmake it possible for all funds to be recovered quickly and efficiently\nfrom blockchain data. Preserving privacy during this recovery is a\nconsideration, but 100% recovery of funds should not be sacrificed for\nthat goal.\n\n\n* Query schemes\n\n** Bloom filters\n\nBIP37 bloom filters are currently implemented by the Bitcoin reference\nimplementation and used by bitcoinj-based SPV clients. Bloom filters\nachieve a privacy-bandwidth tradeoff by having probabalistic\nfalse-positives; the false-positives comprise the anonymity set.\n\nBoom filters have a number of problems, both in the specific BIP37\nimplementation, as well as fundemental to the idea. Scalability is a\nserious problem: the client sends asks a peer with a copy of all\nblockchain data to filter data sent to the client, limiting the client's\nbandwidth to only the data they are interested in. In the typical case\nof a SPV wallet syncronizing against m new blocks this requires the peer\nto read those m blocks from disk in their entirety, apply the filter,\nand send the client the subset of matching transactions. Obviously this\nresults in poor O(n^2) scaling for n clients each making some fixed\nnumber of transactions.\n\nOf course bloom filters are attractive in that they have very good\nperformance per match, but this performance is only really relevant for\nthe most recent blockchain information where the data is in RAM. For\nolder information they make possible the Bloom IO attack where an\nattacker uses an inordinant amount of disk IO bandwidth at little cost\nto themselves.(3)\n\nThe actual BIP37 standard, and existing implementations of it, have a\nnumber of other flaws that reduce privacy. For instance the standard\nlets the seed value of the hash function be tweaked with a 32-bit\ninteger, nTweak. However on the one hand if randomly chosen and rarely\nchanged, as suggested by BIP37, the 32-bit integer can be used by an\nattacker to correlate multiple connections from the same wallet. On the\nother hand if nTweak is changed an attacker that can link multiple bloom\nfilters can AND those filters together to greatly decrease the\nfalse-positive rate and determine exactly what funds are in the user's\nwallet.\n\n\n** Prefix filters\n\nWith a randomly distributed keyspace - common in cryptographic\napplications - clients can query using variable length prefixes that\npartially match the desired keys. A very simple format for a query of n\nprefixes will look like the following:\n\n    <1 byte length in bits> <1 to 256/8 bytes of prefix>\n    ...\n    ...\n    0x00\n\nThe anonymity set is then the blockchain data whose key is the same\nprefix, usually H(scriptPubKey) or scriptPubKey directly. An important\nadvantage of prefix filters is compatibility with the proposed (U)TXO\ncommitment schemes: the prefix maps directly to the committed\nscriptPubKey lookup trees, and nodes simply return all entries matching\nthe prefix, as well the the rest of the merkle path to the blockchain\nheaders proving the data is valid.\n\nWhile bloom filters have O(n) cost per lookup, or O(n^2) scalability\nsystem-wide, prefix filters have significantly better O(log n) cost per\nlookup, or O(n log n) system-wide. It's also worth noting that a naive\nimplementation can achieve very similar performance to bloom filters\nwithout bothering to build key-value indexes by just scanning blockchain\ndata; once the data is hashed testing the hash against a prefix has a\nminimal cost.\n\n\n** Cryptographically blinded schemes\n\nThere are many blinded database query schemes in existence. While we do\nnot reject such schemes completely, technologies that rely on simple and\neasy-to-understand cryptography have a significant advantage in their\nsimplicity. In addition such complex schemes are unlikely to ever be\nmade into miner commitments and thus are less trustworthy in the long\nrun.\n\n\n* Correlation attacks\n\nIt is often advantageous if blockchain queries can be efficiently spread\nacross multiple servers to avoid allowing the attacker to correllate the\ninformation into a whole. If you have n addresses that need to be\nwatched for new transactions, splitting the queries across m nodes\nreduces the information any one node may learn. With bloom filters doing\nthis is extremely costly as the full blockchain data needs to be read\nfrom disk to apply the filter; with prefix filters if the nodes have\nappropriate indexes there is little overhead to splitting the queries\nand no performance loss.\n\n\n* DoS attacks\n\nA possible DoS attack on bandwidth is to insert a large amount of\nblockchain data matching the target's filter; the BIP37 nTweak parameter\nwas an attempt to avoid this problem, although with privacy tradeoffs.\nBlockchain data is an extremely expensive communications channel so we\ndo not consider this a serious issue. Implementations may wish to give\nclients the ability to specify a filter for information they do not want\nto avoid unintentional collisions, although hopefully in the future the\naddress reuse making this a potential problem will become less common.\n\n\n* Address use, management, and generation\n\nIf privacy was not a consideration the most efficient mode of operation\nwould be to use a single address, as is done by many existing wallets,\nnotably the bitcoinj-derived Multibit and Android Wallet, both of which\nuse bloom filters. In addition to strongly encouraging address re-use,\nneither provide the user any control over the privacy/bandwidth tradeoff\ngiven by bloom filters; the default settings have an extremely low\nfalse-positive rate that is a significant privacy risk.\n\nTaking privacy into account better clients such as Electrum, Armory, and\nBitcoin Core discourage the re-use of addresses in their UIs, and send\nchange to new addresses. However this leads to problem with user\nexpectations: users expect it to be possible to be notified quickly of\nnew transactions paying any address ever generated by their wallet, as\nwell as unauthorized spends from any txout, yet for privacy each query\nfor transactions related to the address/txout must match false-positives\nthat consume bandwidth; for a fixed bandwidth budget the specificity and\nsize of the filter must increase over time.\n\nWe have two main avenues to solve this problem:\n\n1) Txin-reuse: Continue to reinforce the idea that transaction inputs\n   have no particular relationship to outputs. Using them for refunds or\n   other purposes implying \"ownership\" must be strongly discouraged.\n   CoinJoin will help here. If addresses associated with change txouts\n   are truly one-time-use, we can reduce or eliminate queries associated\n   with them. In particular, while the set of all change addresses ever\n   used will grow linearly with time, the set of all change addresses\n   with funds in them will remain roughly stable - it's this set that\n   needs to be queried to detect unauthorized spends.\n\n2) Common prefixes: Generate addresses such that for a given wallet they\n   all share a fixed prefix. The length of that prefix determines the\n   anonymity set and associated privacy/bandwidth tradeoff, which\n   remainds a fixed ratio of all transactions for the life of the\n   wallet.\n\nWith this approach change addresses continue to be generated randomly, a\nrequirement for CoinJoin privacy. There is some statistical information\nleaked if many non-change txouts are spent in a single transaction in a\nCoinJoin, but even that leak can be avoided with the authors\nOP_RETURN-based stealth addresses proposal. (to be published)\n\nThe actual prefix-forcing scheme in many cases will have to be\nbrute-force search; fortunately the search space involved is reasonably\nsmall, ~2 to ~16 bits, and can be done as a background task.\n\n\n1) Towards Measuring Anonymity, Claudia Diaz and Stefaan Seys and Joris\n   Claessens and Bart Preneel (April 2002)\n\n2) k-Anonymity: A Model for Protecting Privacy, Latanya Sweeney, May\n   2002\n\n3) Private discussions with developers.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140105/41f8b0fc/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-08T06:34:46",
                "message_text_only": ">\n> 2) Common prefixes: Generate addresses such that for a given wallet they\n>    all share a fixed prefix. The length of that prefix determines the\n>    anonymity set and associated privacy/bandwidth tradeoff, which\n>    remainds a fixed ratio of all transactions for the life of the\n>    wallet.\n>\n\nInteresting thought to make the privacy/bandwidth trade-off using  \nvanitygen and prefix filters.\n\nBut doesn't this effectively expand the universe of potential spies from  \n'the global attacker' who is watching your SPV queries, to simply 'the  \nglobe' -- anyone with a copy of the blockchain?\n\nSome stats on UTXO set size:  (slightly stale -- as of block 270733)\n\n    7.4m unspent outputs\n    2.2m transactions with unspent outputs\n    2.1m unique unspent scriptPubKeys\n    Side note: the top 1,000 scriptPubKeys have 10% of all unspent outputs.\n\nLet's say you use an 8-bit prefix (1/256) that would be ~10,000  \ntransactions in the UTXO you would be monitoring. But if I knew a few  \ndifferent days / time-periods you transacted, I could figure out your  \nprefix.\n\nOf course, anyone you transact with would know your prefix outright.\n\nWouldn't this also allow obvious identification of spend versus change  \naddresses in a transaction?"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-10T10:10:51",
                "message_text_only": "On Tue, Jan 07, 2014 at 10:34:46PM -0800, Jeremy Spilman wrote:\n> >\n> >2) Common prefixes: Generate addresses such that for a given wallet they\n> >   all share a fixed prefix. The length of that prefix determines the\n> >   anonymity set and associated privacy/bandwidth tradeoff, which\n> >   remainds a fixed ratio of all transactions for the life of the\n> >   wallet.\n> >\n> \n> Interesting thought to make the privacy/bandwidth trade-off using\n> vanitygen and prefix filters.\n> \n> But doesn't this effectively expand the universe of potential spies\n> from 'the global attacker' who is watching your SPV queries, to\n> simply 'the globe' -- anyone with a copy of the blockchain?\n\nIt's a trade-off. Most people are going to use public peers for their\nSPV nodes - they're not going to run full nodes. They also are going to\nwant to limit how much bandwidth they use to sync their wallets; if they\ndon't care the can use a very short, or no, prefix and the problem goes\naway.\n\nIf you make that bandwidth/privacy trade-off by using very specific\nfilters and non-specific addresses then you have a situation where those\npublic peers are learning a lot of potentially valuable data. It's easy\nto imagine, say, the IRS being willing to pay for data on how many\nBitcoins people have in their wallets to try to catch tax cheats for\ninstance, and that can easily fund a lot of fast and high-quality peers\nthat don't advertise the fact that they're selling data on the contents\nof your wallet.\n\nOn the other hand if you use non-specific filters, and prefixed\naddresses for incoming payments, then you're not leaking high-quality\ninformation to anyone. I think this makes for a more robust Bitcoin\nsystem, especially as we need things like CoinJoin for privacy that make\n*everyones* privacy matter to you; CoinJoin could easily be defeated by\naquiring lots of good info on the contents of wallets through SPV\nqueries.\n\n> Some stats on UTXO set size:  (slightly stale -- as of block 270733)\n> \n>    7.4m unspent outputs\n>    2.2m transactions with unspent outputs\n>    2.1m unique unspent scriptPubKeys\n>    Side note: the top 1,000 scriptPubKeys have 10% of all unspent outputs.\n> \n> Let's say you use an 8-bit prefix (1/256) that would be ~10,000\n> transactions in the UTXO you would be monitoring. But if I knew a\n> few different days / time-periods you transacted, I could figure out\n> your prefix.\n\nActually UTXO isn't the right way to look at this; prefix filters would\nbe almost certainly matched against all txouts in blocks. Or put another\nway, UTXO isn't the right way to look at it because the attacker will\nhave some rough idea of the time period, and wants to know about\ntransactions made.\n\n> Of course, anyone you transact with would know your prefix outright.\n\nWell what good, in your example, is it for the attacker to go from \"I\nknow my target gets a paycheck every two weeks for $x\" to \"His wallet\nprefix is abcd with y% probability\"? Even once you learn the prefix of\nyour target's wallet, what funds they actually own is still embedded in\na much larger anonymity set of hundreds to thousands of transactions\nthat had nothing to do with them.\n\n> Wouldn't this also allow obvious identification of spend versus\n> change addresses in a transaction?\n\nNo, I specifically said that you don't want to use prefixes with change\ntxouts for that reason. Fortunately while the set of all scriptPubKey's\never used for change txouts will grow over time, as long as you are not\nwatching for new payments on any key in that set you only need to query\nfor the ones that still have funds on them, and that's only because you\nwant to be able to detect unauthorized spends of them.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/430ba5cd/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Privacy and blockchain data",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeremy Spilman",
                "Peter Todd"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 18276
        }
    },
    {
        "title": "[Bitcoin-development] Stealth Addresses",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-01-06T12:03:38",
                "message_text_only": "* Abstract\n\nA Stealth Address is a new type of Bitcoin address and related\nscriptPubKey/transaction generation scheme that allowers payees to\npublish a single, fixed, address that payors can send funds efficiently,\nprivately, reliably and non-interactively. Payors do not learn what\nother payments have been made to the stealth address, and third-parties\nlearn nothing at all. (both subject to an adjustable anonymity set)\n\n\n* Acknowledgments\n\nCredit goes to ByteCoin for the original idea.(1) Gregory Maxwell, Adam\nBack, and others on #bitcoin-wizards contributed valuable input on the\nimplementation. Finally thanks goes to Amir Taaki for input on the\ngeneral idea of stealth addresses and use-cases.\n\n\n* Background\n\nViewed generally a Bitcoin address is a mechanism by which a payee\ninstructs a payor to create a transaction such that the payee can spend\none or more of the transaction outputs. Of course, typically the address\nis simply the hash of a pubkey, and the mechanism by which the funds are\nmade available to the payee is to simply create a scriptPubKey of the\nfollowing form:\n\n    DUP HASH160 <pubKeyHash> EQUALVERIFY CHECKSIG\n\nThe problem however is address reuse: it is convenient for payees to\ngive one or more payor a single address and use it multiple times for\nvarious purposes. This results in all those payments becoming trivially\nlinkable to each other by an attacker - a threat not only to the privacy\nof the user, but also to all users of Bitcoin.(2)\n\nBIP32 hierarchical deterministic wallets are frequently proposed as a\nsolution. Now an address is a chain code and the mechanism by which a\nscriptPubKey is generated is to derive a one-time-use pubkey from that\nchain code and some index i. However, this quickly runs into two main\nproblems:\n\n1) Lack of privacy: While someone not in possession of the address can't\n   link payments together, someone who is can.\n\n2) State: If the index is not to be re-used wallets must either maintain\n   per-address state, or somehow query for already used indexes, or\n   somehow generate them in a sufficiently small range that the payee\n   can recover the indexes. All these solutions are problematic.\n\nA good example of where the BIP32-derivation solutions fails come up at\nthe Dark Wallet Hackathon where it was suggested by the author that for\nthe purpose of securing person-to-person payments OpenPGP public keys\nand X.509 certificates be extended with a new user-id field containing a\nBitcoin address. Wallet software could then use either certificate\nsystem to ensure funds were being sent to the intended recipients -\nessentially a non-interactive way of solving what the BIP70 payment\nprotocol solves interactively. Of course, without stealth addresses the\nscheme would likely have little or no privacy.\n\n\n* Requirements\n\n1) Generated scriptPubKey must be globally unique\n\n2) Must be only spendable by payee\n\n3) scriptPubKey and associated transaction must be indistinguishable to\n   third-parties from other transactions in some anonymity set.\n\n4) Method must be fully deterministic and funds recoverable from a\n   wallet seed and blockchain data for both payee and payor.\n\n5) Funds must be efficiently recoverable by payee with reasonable, and\n   configurable, computation and bandwidth costs.\n\n6) Must be compatible with CoinJoin/Must not leak information to payee\n   about what txins were used to pay them.\n\n7) Must be compatible with multisig-protected wallets.\n\n8) Must not make assumptions about txin scriptSig form.\n\n9) Must be possible to prove to third parties that payment was made in\n   accordance to instructions without revealing any other information.\n\n\n** Payment Reliability\n\nSchemes for making payments by transmitting nonces to the recipient\nthrough some other medium, such as Bitmessage, were discussed at the\nDark Wallet Hackathon. However using any medium but the blockchain\nitself for the communication means that the reliability of the payment\ngetting to the recipient is less than that of a standard transaction.\nFor instance Bitmessage nodes only keep messages for two weeks. We\ndecided that anything less than reliable atomic transactions was\nunacceptable.\n\n\n* Applying encryption to payments, simple explanation\n\nUsing Elliptic curve Diffie-Hellman (ECDH) we can generate a shared\nsecret that the payee can use to recover their funds. Let the payee have\nkeypair Q=dG. The payor generates nonce keypair P=eG and uses ECDH to\narrive at shared secret c=H(eQ)=H(dP). This secret could be used to\nderive a ECC secret key, and from that a scriptPubKey, however that\nwould allow both payor and payee the ability to spend the funds. So\ninstead we use BIP32-style derivation to create Q'=(Q+c)G and associated\nscriptPubKey.\n\nAs for the nonce keypair, that is included in the transaction in an\nadditional zero-valued output:\n\n    RETURN <P>\n\nThe payee recovers the funds by scanning the blockchain for candiate P's\nin transactions, regenerating the scriptPubKey, and finally checking if\nany txouts in the transactions match. Note the close similarity of this\ntechnique to how the Bitmessage network functions - an initial\nimplementation of the idea will find the Bitmessage code a suitable\nstarting point.\n\n\n* Trading off anonymity set size for decreased bandwidth/CPU\n\nBy taking advantage of prefix filters(3) we can choose a tradeoff\nbetween anonymity set size and bandwidth/CPU usage if the payee\nspecifies that payments to them are to match some short prefix k. There\nare a few possibilities for how the prefix is to the applied - the most\nsimple is if per-block indexes of scriptPubKeys are available:\n\n    RETURN <k> <P>\n\nAlternatively if per-block indexes of H(scriptPubKeys) are only\navailable the wallet software can grind the scriptPubKey with nonce i\nuntil it matches the specified prefix:\n\n    RETURN <i> <P>\n\nFurthermore as symmetric ciphers are quite cheap we might as well hide\nthe purpose of the OP_RETURN txout and encrypt the pubkey P using H(Q)\nas a symmetric key. This gives us a slightly larger anonymity set.\n\n\n* Advantages of using a separate output\n\nAn alternative would be to either re-use a pubkey or signature nonce\nvalue from a transaction input, saving about 45 bytes per txout. An\nabsolute minimum sized Bitcoin transaction is 166 bytes(4) so at best we\nhave a 27% savings in tx fees, and more typically around ~15%. (modulo\nmass-payments from a single txin)\n\nHowever using an explicit prunable OP_RETURN output to store the pubkey\nrather than re-using one from a txin or txin signature has a number of\nadvantages:\n\n1) The txin's owned by the payor are not revealed to the payee. In fact,\n   they could be held by a third-party who simply makes a transaction\n   with the appropriate txouts on behalf of the payee.\n\n2) Less information about the txouts is leaked. The statistical\n   distribution of txouts remains unchanged - not possible in re-use\n   schemes because they need to grind the payee scriptPubKey's for the\n   sake of the prefix filters.\n\n3) If required the nonce secret can be revealed to prove that a payment\n   was made to a third-party, e.g. for dispute resolution.\n\n\n* Bare CHECK(MULTI)SIG output alternative\n\nAn alternative with better efficiency could be to use bare\nOP_CHECK(MULTI)SIG outputs to hold the nonce pubkey - generally a second\noutput is needed anyway for change. The most simple would be to use Jeff\nGarzik's OP_DROP proposal(5) for the prefix:\n\n  <prefix> DROP n <pubkey>...<pubkey> m CHECKMULTISIG\n\n  or\n\n  <prefix> DROP <pubkey> CHECKSIG\n\nThe payor pubkey is in the *change* txout, and the payee's ECDH-derived\npubkey in the other txout. By setting the prefix to be the same on both\ntxouts and using the same basic scriptPubKey form the relationship of\nchange and payment is still hidden; CoinJoin-using implementations can\nadopt even more sophisticated approaches.\n\nIf IsStandard() rules remain the same and using OP_DROP is impractical,\nwe can also grind the change pubkey to match the prefix in a\ndeterministic manner so the wallet can still be recovered from a seed.\nMore costly, but maybe still acceptable for reasonably short prefixes.\nEither way the result is transactions that are actually smaller and\ncheaper than standard transactions, although without the advantage of\npushing scriptPubKey size payment to the receiver. (a pity we didn't\nspend the extra time to adopt OP_EVAL)\n\nA disadvantage is that revealing the nonce secret to prove a payment was\nmade is more problematic - either the txout needs to be spent first, or\nwe need a CHECKMULTISIG.\n\n\n* Address format\n\nTo be decided. To support mulisig we probably want the ability to\nspecify n-of-m master pubkeys, using the nonce to generate derived ones.\nFor the single pubkey case the addresses will be a little longer than\nstandard Bitcoin addresses:\n\n  s9KND3vfXjs3YqfZp86Acce3bM7Mhuptwh6mjeDnThsDei9Z2ZZcU\n\n  vs.\n\n  1LZn91ynrA6BCmoUKwnV3Ygk4FQMfPxLbg\n\n\n1) ByteCoin, Untraceable transactions which can contain a secure message\n   are inevitable, https://bitcointalk.org/index.php?topic=5965.0\n\n2) Gregory Maxwell, Dark Wallet Certification discussions, also\n   http://snowdenandthefuture.info/PartIII.html\n\n3) Peter Todd, [Bitcoin-development] Privacy and blockchain data,\n   http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03612.html\n\n4) Bitcoin Wiki, Maximum transaction rate,\n   https://en.bitcoin.it/w/index.php?title=Maximum_transaction_rate&oldid=36983\n\n5) Jeff Garzik, Add small-data OP_DROP transactions as standard\n   transactions, https://github.com/bitcoin/bitcoin/pull/1809\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000002861ee0919fc86990573ac360820766dc1b9ba580e5ccf7b6\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140106/53d085cc/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-08T10:20:57",
                "message_text_only": "Thanks Peter for the paper!\n\nI'm just going to restate your 'simple explanation' to make sure I got  \nit...\n\nThe payee publishes a public key of theirs, which will be a long-standing  \nidentifier, public key = 'Q', corresponding private key = 'd'.\n\nTo pay them, payee generate a keypair, private key = 'e' public key of  \n'P'. Publish 'P' in the transaction.\n\nThe payer can calculate S = eQ, where S is a shared secret between  \npayer/payee. The payee calculates the same S as S = dP. So the payee sees  \n'P' in a transaction, and multiplies by their private key, to get S.\n\nNow that we have the shared secret, either side can calculate an offset to  \nQ which becomes the pay-to-address. When you say BIP32-style derivation,  \nQ' = H(S) + Q, does this mean Q + SHA256(33-byte S)?\n\nA payee has to check each transaction (or every transaction of a fixed  \nprefix) with 'P', calculate Q' = Q + H(dP) and see if that transaction  \npays to Q'. If the address matches, then the payee can spend it with  \nprivate key of d + H(dP).\n\nOne downside is that you have to hold your private key in memory  \nunencrypted in order to identify new payments coming in. So  \nstealth-addresses may not be suitable for receiving eCommerce payments,  \nsince you can't implement a corresponding watch-only wallet, e.g. there's  \nno way to \"direct-deposit into cold storage.\"\n\nHope I got that right...\n\nOn Mon, 06 Jan 2014 04:03:38 -0800, Peter Todd <pete at petertodd.org> wrote:\n\n> Using Elliptic curve Diffie-Hellman (ECDH) we can generate a shared\n> secret that the payee can use to recover their funds. Let the payee have\n> keypair Q=dG. The payor generates nonce keypair P=eG and uses ECDH to\n> arrive at shared secret c=H(eQ)=H(dP). This secret could be used to\n> derive a ECC secret key, and from that a scriptPubKey, however that\n> would allow both payor and payee the ability to spend the funds. So\n> instead we use BIP32-style derivation to create Q'=(Q+c)G and associated\n> scriptPubKey.\n>\n> As for the nonce keypair, that is included in the transaction in an\n> additional zero-valued output:\n>    RETURN <P>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-10T10:20:37",
                "message_text_only": "On Wed, Jan 08, 2014 at 02:20:57AM -0800, Jeremy Spilman wrote:\n> Thanks Peter for the paper!\n> \n> I'm just going to restate your 'simple explanation' to make sure I\n> got it...\n> \n> The payee publishes a public key of theirs, which will be a\n> long-standing identifier, public key = 'Q', corresponding private\n> key = 'd'.\n> \n> To pay them, payee generate a keypair, private key = 'e' public key\n> of 'P'. Publish 'P' in the transaction.\n> \n> The payer can calculate S = eQ, where S is a shared secret between\n> payer/payee. The payee calculates the same S as S = dP. So the payee\n> sees 'P' in a transaction, and multiplies by their private key, to\n> get S.\n> \n> Now that we have the shared secret, either side can calculate an\n> offset to Q which becomes the pay-to-address. When you say\n> BIP32-style derivation, Q' = H(S) + Q, does this mean Q +\n> SHA256(33-byte S)?\n\nI think that's correct, but my ECC math is a bit shakey... In any case,\nwhat's important is that you can derive a pubkey such that only the\nrecipient has the privkey, and without knowledge of the shared secret\nyou can't determine what the recipients master pubkey was.\n\n> A payee has to check each transaction (or every transaction of a\n> fixed prefix) with 'P', calculate Q' = Q + H(dP) and see if that\n> transaction pays to Q'. If the address matches, then the payee can\n> spend it with private key of d + H(dP).\n\nYup, you're understanding matches mine. (no guarantee if my\nunderstanding is correct!)\n\n> One downside is that you have to hold your private key in memory\n> unencrypted in order to identify new payments coming in. So\n> stealth-addresses may not be suitable for receiving eCommerce\n> payments, since you can't implement a corresponding watch-only\n> wallet, e.g. there's no way to \"direct-deposit into cold storage.\"\n\nOh, sorry, I forgot to mention it in my first write-up but you can\neasily make stealth addresses include a second pubkey for the purpose of\nthe communication that either isn't used in the scriptPubKey at all, or\nis part of a n-of-m multisig. (n>=2) Interestingly that also means you\ncan give a third-party that key and out-source the effort of scanning\nthe blockchain for you.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/f85268c9/attachment.sig>"
            },
            {
                "author": "Drak",
                "date": "2014-01-10T11:28:33",
                "message_text_only": "On 10 January 2014 10:20, Peter Todd <pete at petertodd.org> wrote:\n\n> Oh, sorry, I forgot to mention it in my first write-up but you can\n> easily make stealth addresses include a second pubkey for the purpose of\n> the communication that either isn't used in the scriptPubKey at all, or\n> is part of a n-of-m multisig. (n>=2) Interestingly that also means you\n> can give a third-party that key and out-source the effort of scanning\n> the blockchain for you.\n\n\nThat seems pretty exciting to me. What is the chance of this becoming a BIP?\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/24259da9/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-10T12:00:47",
                "message_text_only": "On Fri, Jan 10, 2014 at 11:28:33AM +0000, Drak wrote:\n> On 10 January 2014 10:20, Peter Todd <pete at petertodd.org> wrote:\n> \n> > Oh, sorry, I forgot to mention it in my first write-up but you can\n> > easily make stealth addresses include a second pubkey for the purpose of\n> > the communication that either isn't used in the scriptPubKey at all, or\n> > is part of a n-of-m multisig. (n>=2) Interestingly that also means you\n> > can give a third-party that key and out-source the effort of scanning\n> > the blockchain for you.\n> \n> \n> That seems pretty exciting to me. What is the chance of this becoming a BIP?\n\nNeeds a prototype implementation first. The version with no prefix is\nthe simple one and doesn't have any other dependencies; the prefix\nversion is harder because it isn't clear yet what's the best way to\nforce the prefix, or for that matter whether scriptPubKey or\nH(scriptPubKey) indexes will be available.\n\nIt's on my todo list, but as you've probably noticed my todo list is\nrather long. :)\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000028a5c9edabc9697fe96405f667be1d6d558d1db21d49b8857\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140110/a7ae8027/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-12T10:33:02",
                "message_text_only": "> Oh, sorry, I forgot to mention it in my first write-up but you can\n> easily make stealth addresses include a second pubkey for the purpose of\n> the communication that either isn't used in the scriptPubKey at all, or\n> is part of a n-of-m multisig. (n>=2) Interestingly that also means you\n> can give a third-party that key and out-source the effort of scanning\n> the blockchain for you.\n\nGreat point. Even if it's not a 3rd party, I think it's really important  \nto be able to scan for transactions with a key which can't actually spend  \nthe funds.\n\nThe first approach is just one-pass ECDH. I think you're saying the second  \napproach is two rounds of ECDH but re-using the same e/P (usually referred  \nto as r/R in ECIES). I think this is safe, unlike reusing an ephemeral key  \nfor signing operations.\n\n   Payee: Publish Q, Q2                     [d, d2 are privkeys, Q, Q2 are  \npubkeys]\n   Payer: 1) Generate ephemeral key: e / P  [e is privkey, P is pubkey]\n          2) S = e * Q                      [first shared secret]\n          3) S2 = e * Q2                    [second shared secret, reusing  \n'e']\n          4) Q' = Q + H(S)                  [pay-to stealth address]\n          5) Q2' = Q2 + H(S2)               [stealth 'marker']\n\n   Watch: 1) Look for TxOut with OP_RETURN <P>\n          2) Q2' = Q2 + H(d2 * P)\n          3) Check for Q2' elsewhere in the Tx\n\nS/MIME for example, allows reuse of the ephemeral keypair. When reusing an  \nephemeral keypair where A reuses (x, X) to encrypt different messages to  \nmore than one user, A should verify the static public keys to prevent  \nsmall-subgroup attacks.[1][2]\n\nLet's say you pay-to Q' and then Q2' value has to be somewhere else in the  \ntransaction. You could put it next to the shared P in OP_RETURN. OP_RETURN  \n<P> <Q2'> would be 66 bytes.\n\nBut then Mallory could generate transactions with the right Q2' but with  \nhis own pubkey in Step 2 instead of Q. So your scanner would detect a  \npayment, but you wouldn't be able to spend it, and Mallory could.\n\nThat's a good argument for putting Q2' in a 2-of-2 multisig so that  \npulling this trick would at least make the transaction unspendable for  \nboth parties, which may be good enough deterrent, but you're still going  \nto want to check it against your 'd' before fulfilling a large order. Your  \nonline watch process could queue the matching transactions, which you  \ncould move to your offline machine, decrypt your key, and verify the  \ntransactions are spendable.\n\nNow, you would need to get two pubkeys to the payer, throw in a prefix to  \nhelp standardize it, and end up with addresses that could look like (for  \nexample):\n\nxSTLxsn59oaupR6ZKt2yddQ4dp5hcFinnTWkvsDiXtHgAEDg5ajNVzTY8MMQsmqnEn3ZMKxQzrfC3pDimfTWMkiUb7x3jX3J26JSX\ntSTLcpwzupCFL3maVZkSiB9ib3BXsCAfkhMLgckQEyoj8Tk83ANzofeuDdbX6bSPqNRfACLLFYK8EwVo1jdjxNDFNDWxhnQiAy4ba\n\nThose addresses are 74 bytes:  \n<Prefix><CompressedPubKey1><CompressedPubKey2><Checksum>\n\n   xSTL Prefix = 0xC0CB9270\n   tSTL Prefix = 0xB2E27D50\n   NOTE: I do NOT have the corresponding privkeys for these four pubkeys!\n\nThose just happened to be the first matching prefixes I found for 74 byte  \naddresses. I could try to find ones which start with a specific byte if  \nthat's somehow better, like 0x04 to match BIP32.\n\nUnfortunately, I don't think you can just derive a second public key from  \nthe first to keep the address shorter, and still keep the first private  \nkey secure, even if the second private key is stolen. You only get  \nequivalent security as BIP32 public derivation, where you can't lose a  \nchild private key.\n\nDo we also want xSTL (or whatever user friendly string) prefixes for  \nsingle pubkey (41 byte) stealth addresses?\n\nI'll wait a couple days for feedback, then I'll try to implement the  \nfollowing prototypes:\n\n1) Pay to STL addresses\n2) Watcher process to detect and queue STL payments for a given d2/Q2\n3) Offline verifier to take output from Watcher and verify spendable given  \nencrypted d/d2\n\nObviously extending QT directly for #1 would be ideal, I may even be able  \nto do that since supporting a new address type should be fairly contained.  \nBut if not I'll punt to writing a node.js or python script which connects  \nto bitcoind via RPC.\n\nThanks,\nJeremy\n\n[1] - On Reusing Ephemeral Keys in Diffie-Hellman Key Agreement Protocols\n       http://www.math.uwaterloo.ca/~ajmeneze/publications/ephemeral.pdf\n\n[2] - Validation of Elliptic Curve Public Keys\n       http://www.iacr.org/archive/pkc2003/25670211/25670211.pdf"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-12T12:51:54",
                "message_text_only": "You can always just extend the payment protocol with the new fields as\nwell, vs making very long addresses. If this technique can be made to work\nwell, it would have applicability in both fixed textual address context,\nand for a fixed/upload-once payment protocol file. That has the advantage\nof backwards compatibility as well - the new addresses would not be\nclickable or acceptable by old wallets, but with the payment protocol you\ncan always craft a bitcoin URI that contains a regular current style\naddress, and a link to a fixed payment protocol file (uploaded to a\npastebin type site), and modern wallets would ignore the address and use\nthe ECDH based system instead.\n\n\n\nOn Sun, Jan 12, 2014 at 11:33 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n> > Oh, sorry, I forgot to mention it in my first write-up but you can\n> > easily make stealth addresses include a second pubkey for the purpose of\n> > the communication that either isn't used in the scriptPubKey at all, or\n> > is part of a n-of-m multisig. (n>=2) Interestingly that also means you\n> > can give a third-party that key and out-source the effort of scanning\n> > the blockchain for you.\n>\n> Great point. Even if it's not a 3rd party, I think it's really important\n> to be able to scan for transactions with a key which can't actually spend\n> the funds.\n>\n> The first approach is just one-pass ECDH. I think you're saying the second\n> approach is two rounds of ECDH but re-using the same e/P (usually referred\n> to as r/R in ECIES). I think this is safe, unlike reusing an ephemeral key\n> for signing operations.\n>\n>    Payee: Publish Q, Q2                     [d, d2 are privkeys, Q, Q2 are\n> pubkeys]\n>    Payer: 1) Generate ephemeral key: e / P  [e is privkey, P is pubkey]\n>           2) S = e * Q                      [first shared secret]\n>           3) S2 = e * Q2                    [second shared secret, reusing\n> 'e']\n>           4) Q' = Q + H(S)                  [pay-to stealth address]\n>           5) Q2' = Q2 + H(S2)               [stealth 'marker']\n>\n>    Watch: 1) Look for TxOut with OP_RETURN <P>\n>           2) Q2' = Q2 + H(d2 * P)\n>           3) Check for Q2' elsewhere in the Tx\n>\n> S/MIME for example, allows reuse of the ephemeral keypair. When reusing an\n> ephemeral keypair where A reuses (x, X) to encrypt different messages to\n> more than one user, A should verify the static public keys to prevent\n> small-subgroup attacks.[1][2]\n>\n> Let's say you pay-to Q' and then Q2' value has to be somewhere else in the\n> transaction. You could put it next to the shared P in OP_RETURN. OP_RETURN\n> <P> <Q2'> would be 66 bytes.\n>\n> But then Mallory could generate transactions with the right Q2' but with\n> his own pubkey in Step 2 instead of Q. So your scanner would detect a\n> payment, but you wouldn't be able to spend it, and Mallory could.\n>\n> That's a good argument for putting Q2' in a 2-of-2 multisig so that\n> pulling this trick would at least make the transaction unspendable for\n> both parties, which may be good enough deterrent, but you're still going\n> to want to check it against your 'd' before fulfilling a large order. Your\n> online watch process could queue the matching transactions, which you\n> could move to your offline machine, decrypt your key, and verify the\n> transactions are spendable.\n>\n> Now, you would need to get two pubkeys to the payer, throw in a prefix to\n> help standardize it, and end up with addresses that could look like (for\n> example):\n>\n>\n> xSTLxsn59oaupR6ZKt2yddQ4dp5hcFinnTWkvsDiXtHgAEDg5ajNVzTY8MMQsmqnEn3ZMKxQzrfC3pDimfTWMkiUb7x3jX3J26JSX\n>\n> tSTLcpwzupCFL3maVZkSiB9ib3BXsCAfkhMLgckQEyoj8Tk83ANzofeuDdbX6bSPqNRfACLLFYK8EwVo1jdjxNDFNDWxhnQiAy4ba\n>\n> Those addresses are 74 bytes:\n> <Prefix><CompressedPubKey1><CompressedPubKey2><Checksum>\n>\n>    xSTL Prefix = 0xC0CB9270\n>    tSTL Prefix = 0xB2E27D50\n>    NOTE: I do NOT have the corresponding privkeys for these four pubkeys!\n>\n> Those just happened to be the first matching prefixes I found for 74 byte\n> addresses. I could try to find ones which start with a specific byte if\n> that's somehow better, like 0x04 to match BIP32.\n>\n> Unfortunately, I don't think you can just derive a second public key from\n> the first to keep the address shorter, and still keep the first private\n> key secure, even if the second private key is stolen. You only get\n> equivalent security as BIP32 public derivation, where you can't lose a\n> child private key.\n>\n> Do we also want xSTL (or whatever user friendly string) prefixes for\n> single pubkey (41 byte) stealth addresses?\n>\n> I'll wait a couple days for feedback, then I'll try to implement the\n> following prototypes:\n>\n> 1) Pay to STL addresses\n> 2) Watcher process to detect and queue STL payments for a given d2/Q2\n> 3) Offline verifier to take output from Watcher and verify spendable given\n> encrypted d/d2\n>\n> Obviously extending QT directly for #1 would be ideal, I may even be able\n> to do that since supporting a new address type should be fairly contained.\n> But if not I'll punt to writing a node.js or python script which connects\n> to bitcoind via RPC.\n>\n> Thanks,\n> Jeremy\n>\n> [1] - On Reusing Ephemeral Keys in Diffie-Hellman Key Agreement Protocols\n>        http://www.math.uwaterloo.ca/~ajmeneze/publications/ephemeral.pdf\n>\n> [2] - Validation of Elliptic Curve Public Keys\n>        http://www.iacr.org/archive/pkc2003/25670211/25670211.pdf\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140112/2c0d73d8/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-12T18:20:18",
                "message_text_only": "> You can always just extend the payment protocol with the new fields as  \n> well, vs making very long addresses.\n\nI should have mentioned that as Task #4. Agree it could be an optional  \nextension and backward compatible. I think for displaying the payment in  \nthe UI after it's been made via PP, we have to fully support sending to a  \nnew standard address type anyway. Probably easiest to implement in PP  \nafter the address and transaction building code is done.\n\nSo '4a' would be building a static PP file given the necessary inputs.  \nWhen I get to that point, I'll send out a draft PP extension with  \nfields/formats if someone else hasn't already. '4b' would be actually  \nadding support for parsing those fields and generating the new transaction  \ntype into bitcoind.\n\nAny thoughts on the prefix, and one vs two pubkey approach? First of all,  \ndo we try to support both equally, or favor one over the other? I was  \nthinking we could have two different 4 byte prefixes but that both render  \nas xSTL/tSTL in Base58 but correspond to the one vs two pubkeys expected.  \nI think the chance of finding a single prefix which looks like xSTL for  \nboth address lengths is 1 in (58^4)^2, so that's probably not going to  \nhappen.\n\n From the payer/user perspective, short stealth vs. long stealth is  \nirrelevant; they both have the same usability properties from the payer  \nperspective. So giving them the same Base58 prefix seems like a good plan.\n\nThe full 4-byte prefix seems worth the usability trade-off versus 1-byte  \nprefix, especially since it will impact the ability to lookup the  \ntransaction on an outside service, which I think a lot of people do to  \nverify their payments. IMO a longer prefix isn't \"wasting bytes\" anywhere  \nthat it really counts.\n\nWe could save two bytes in the address if we required both pubkeys to  \nstart with '03', or save one byte if we required they both start with the  \nsame byte, but again doesn't seem worth it (to me) for the arbitrary  \nrestriction.\n\nThe actual internal wallet code for *receiving* STL payments and updating  \nbalances is more tricky and probably not something I can personally tackle  \nfor bitcoind. Assuming we even want first-class support for generating STL  \naddresses and receiving STL payments in a standard user wallet, someone  \nhas to decide if the STL 'd' / 'd2' keys should be...\n\n   1) Encrypted as usual, and then keep a list of blocks with interesting  \ntransactions, and go through them when the user enters their password?   \nThis would cause balances to update differently than how they do now, but  \nperhaps be more secure.\n\n   2) Kept unencrypted to allow live scanning as usual? Or keep just 'd2'  \nunencrypted, with some new concept of 'unconfirmed' until the user enters  \ntheir password to prove they can spend that TX? That kind of extra step  \nseems OK for a merchant but sounds very scary for an average user.\n\n   3) Kept encrypted under a separate password? Meh...\n\nAnd last thought for now... At some point, we might want to decide on a  \nconvention to highlight these STL addresses as 'reusable' -- but similar  \nquestions around revocability remain. I hope we don't need anything like a  \nUTC expiration time baked in to the address. A static PP file will have an  \nexpiration date either in the certificate or in 'expires' field, so I  \nthink if you want it to expire then use PP?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140112/462cb3bc/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-12T18:26:18",
                "message_text_only": "On Sun, Jan 12, 2014 at 7:20 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n>  I think for displaying the payment in the UI after it's been made via\n> PP, we have to fully support sending to a new standard address type anyway.\n>\n\nWhy? Showing an address is meaningless, especially if the user didn't type\nit in or see it somewhere else. It's just an opaque random number, all\nputting it in the UI can do is make it look scarier :)\n\nPart of the point of the payment protocol is it lets merchants provide\nhuman readable text for transactions instead of addresses.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140112/e2d2f4b8/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-13T09:13:08",
                "message_text_only": "On Sun, Jan 12, 2014 at 7:20 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n> > I think for displaying the payment in the UI after it's been made via  \n> PP, we have to fully\n> > support sending to a new standard address type anyway.\n\nOn Sun, 12 Jan 2014 10:26:18 -0800, Mike Hearn <mike at plan99.net> wrote:\n> Why? Showing an address is meaningless, especially if the user didn't  \n> type it in or see\n> it somewhere else. It's just an opaque random number, all putting it in  \n> the UI can do is\n> make it look scarier :)\n>\n> Part of the point of the payment protocol is it lets merchants provide  \n> human readable text\n> for transactions instead of addresses.\n\nOf course you're right, moving away from addresses is definitely part of  \nthe point of PP.\n\nOn Sun, 12 Jan 2014 13:18:33 -0800, Gavin Andresen  \n<gavinandresen at gmail.com> wrote:\n> No, please. Make it easy for non-geeks, extend the payment protocol, or  \n> we'll spend the next\n> two years writing code that tries to ignore linebreaks and spaces and  \n> changing <input> in HTML\n> forms to <textarea>...\n\nAgreed, it's long enough to be even more problematic than usual. If the  \ngeneral consensus is that there should not even be a standardized address  \nform, then I can skip that entirely, and go straight to trying to extend  \nPP.\n\nIt's a given this will be implemented for Payment Protocol. The question  \nis whether it's also usable outside of PP.\n\nI was kind of imagining that we could encourage people to replace all  \ntheir static address text that live on Github pages, and README.me, and  \nforum signatures, etc. with new 'href=bitcoin:xSTL...' URIs. Convention  \ncould be to require only transporting xSTL addresses within a URI, even  \ngoing so far as to not support them copy/pasted. 101 characters is not  \nmuch longer (and sometimes shorter) than PaymentRequest URIs end up being.\n\nI think there are ways to make stealth addresses easy enough to use that  \npeople actually prefer using them for P2P payments which do not involve a  \nfull-stack merchant. In that case, if it was a PaymentRequest it would  \nalmost certainly not be signed, and would be more easily shared over email  \nor SMS as a URI than as a file attachment or, even worse, putting the  \nunsigned PR file up on a third-party server which probably won't do a good  \njob securing it.\n\n* PP Implementation Overview *\n\nThe basic PaymentRequest>PaymentDetails is expecting 'output' containing  \none or more TxOuts with script and amount. I believe the general approach  \nis to put a fallback address into 'output' for backward compatibility, and  \nput Q and Q2 into an extension field.\n\nSo we add a new optional field to PaymentDetails which contains the one or  \ntwo PubKeys. Not sure if we want different protobuf tags, or if the  \ndifference in length of the value makes it obvious enough which approach  \nis being used;\n\n    optional bytes stealthOnePubKey = 1000\n    optional bytes stealthTwoPubKey = 1001\n\nor just\n\n    optional bytes stealth = 1000\n\n* User Interaction / Flow *\n\nLets follow this through from the user perspective, starting with what it  \nlooks like today. I'm having a hard time finding screenshots of what PP  \nlooks like in BitcoinQT, so I built from HEAD and using Gavin's  \nHandy-Dandy PaymentRequest Generator  \n(https://bitcoincore.org/~gavin/createpaymentrequest.php):\n\nScreenshots: http://imgur.com/a/k6j9D\n\nImage 1 - 'Send' screen after clicking a PR URI with a small transaction  \nand auto-calculated fee\nImage 2 - System Tray notification after clicking 'Send'\nImage 3 - Transaction List showing partially confirmed transaction\nImage 4 - Transactions details popup\n\nWe see 'Pay To' (Common Name from the cert) and 'Memo' on the Send screen.  \nThe System Tray notification popup and Transaction List shows just the  \naddress string. The 'Transaction details' window shows 'Merchant' which I  \nthink is the same as 'Pay To'. You also have 'Copy address' option in the  \nright-click menu.\n\nMemo seems not to be saved, or at least not visible in the UI after  \nsending a payment.\n\n* Transaction Display *\n\nThe address string is fairly pervasive, which is why I was originally  \nthinking it would make sense to implement all the address handling first,  \nso all those screens would continue to work as specified, without trying  \nto hack something different in those fields.\n\nWithout digging too far into the code, it looks like \"address\" displayed  \nis derived from the TxOut -- e.g. script.cpp:ExtractDestination. This  \ncould be a bit problematic depending on what we really want to show to the  \nuser -- the stealth multisig, or the pubkeys?\n\nPart of the point of stealth addresses is actually making them reusable.  \nSo if you're the originator of the payment, you might want the wallet to  \ntag that transaction somehow with the pubkeys used to generate it.\n\nAlso, ideally I think I would want multiple different stealth payments  \nwithin a single wallet to the same merchant / pubkeys to be identifiable  \nas such.\n\n* Sample Code *\n\nWill follow in another email, to be sent shortly!"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-14T14:15:17",
                "message_text_only": "On Mon, Jan 13, 2014 at 01:13:08AM -0800, Jeremy Spilman wrote:\n> It's a given this will be implemented for Payment Protocol. The question  \n> is whether it's also usable outside of PP.\n\nI think what stealth addresses is showing is that the concept of an\naddress being \"instructions on how to generate a txout/tx that results\nin me getting Bitcoins\" is actually quite valuable; it and\nBIP32-derivation addresses with chaincodes are pretty clear cases where\njust replacing address with scriptPubKey isn't sufficient.\n\n> I was kind of imagining that we could encourage people to replace all  \n> their static address text that live on Github pages, and README.me, and  \n> forum signatures, etc. with new 'href=bitcoin:xSTL...' URIs. Convention  \n> could be to require only transporting xSTL addresses within a URI, even  \n> going so far as to not support them copy/pasted. 101 characters is not  \n> much longer (and sometimes shorter) than PaymentRequest URIs end up being.\n\nYeah, I don't see anything wrong with stealth addresses whatever length\nthey wind up being. It's a good intermediate step, and without them\npeople will just pass around unsigned payment requests and other stuff.\n\n> I think there are ways to make stealth addresses easy enough to use that  \n> people actually prefer using them for P2P payments which do not involve a  \n> full-stack merchant. In that case, if it was a PaymentRequest it would  \n> almost certainly not be signed, and would be more easily shared over email  \n> or SMS as a URI than as a file attachment or, even worse, putting the  \n> unsigned PR file up on a third-party server which probably won't do a good  \n> job securing it.\n\nAt the DarkWallet hackathon we had discussed how to integrate stealth\naddresses into OpenPGP keys as a new user id type for instance, and\nsimilarly into x.509 certs.\n\nThe big advantage here is the identity of *who* you are paying is\nimportant, not just \"I got this signed payment request\". Basically the\nconcept becomes \"identity signed payment address\" and the signature\nbinding the identity to the address is a one time and offline thing; an\nissue with the payment protocol as it stands is that it encourages\nsigning keys to be kept online to issue payment requests. If you have a\nscheme where the private keys that bound the identity to the address can\nbe kept offline you're much better off, because the attacker can only\ncreate a fake payment request, they can't divert the funds to\nthemselves.\n\nSo with that in mind, I strongly suggest sticking with defining a\nreasonable stealth address spec. But when you do, keep in mind that you\nmay want to upgrade it in the future, preferably in a backwards\ncompatible way. Also, it shouldn't be limited to exactly 2-of-2\nCHECKMULTISIG, there's no reason why n and m can't be picked as needed.\nSure, it means the addresses are not fixed length, but for something\nthat is mostly an internal detail and only occasionally visible to\nadvanced users, I see no issues there.\n\nAlong those lines: what would a BIP32 chain code address look like? What\nhappens when you want to use that with a multisig-protected wallet?\n\n> * PP Implementation Overview *\n> \n> The basic PaymentRequest>PaymentDetails is expecting 'output' containing  \n> one or more TxOuts with script and amount. I believe the general approach  \n> is to put a fallback address into 'output' for backward compatibility, and  \n> put Q and Q2 into an extension field.\n> \n> So we add a new optional field to PaymentDetails which contains the one or  \n> two PubKeys. Not sure if we want different protobuf tags, or if the  \n> difference in length of the value makes it obvious enough which approach  \n> is being used;\n> \n>     optional bytes stealthOnePubKey = 1000\n>     optional bytes stealthTwoPubKey = 1001\n\nI think you're missing the bigger picture here, not least of which is\nthat backwards compatibility is a bit of a misnomer for an unreleased\nstandard. :)\n\nWhy put this into the PaymentDetails? That a stealth address is to be\nused for the payment is a property of the outputs being requested, not\nthe payment itself. We're better off if that goes into the Output\nmessage, and further more it suggests that the Output message shouldn't\ncontain raw scriptPubKey's but rather addresses. After all, IsStandard()\nmeans we have to inspect the scriptPubKey to see if we can even pay to\nwhat the sender is requesting.\n\nOnce you establish that it's addresses that Outputs specify, then it's\neasy enough to make a stealth address type, or a BIP32-chain-code\naddress type, or whatever else comes up in the future.\n\n\n> Also, ideally I think I would want multiple different stealth payments  \n> within a single wallet to the same merchant / pubkeys to be identifiable  \n> as such.\n\nAgreed.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000bda8ab55740699711a11572c4eec9dc9f714e4896559aac310a115ff\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/95b840b6/attachment.sig>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-01-14T17:54:01",
                "message_text_only": "Hello Peter et. al.\n\nAs I read more into this stealth discussion I am curious to know what you\nthink of the background microdonation concept I posted recently.\n\nIt is shown in full here\nhttp://sourceforge.net/mailarchive/message.php?msg_id=31837430\n\nGiven the lengthy nature of the concept as presented I would be happy to\ndistill it further, but I am interested in your thoughts as to the idea\ngenerally and how to further present it.\n\n-Odinn\n\n> On Mon, Jan 13, 2014 at 01:13:08AM -0800, Jeremy Spilman wrote:\n>> It's a given this will be implemented for Payment Protocol. The question\n>> is whether it's also usable outside of PP.\n>\n> I think what stealth addresses is showing is that the concept of an\n> address being \"instructions on how to generate a txout/tx that results\n> in me getting Bitcoins\" is actually quite valuable; it and\n> BIP32-derivation addresses with chaincodes are pretty clear cases where\n> just replacing address with scriptPubKey isn't sufficient.\n>\n>> I was kind of imagining that we could encourage people to replace all\n>> their static address text that live on Github pages, and README.me, and\n>> forum signatures, etc. with new 'href=bitcoin:xSTL...' URIs. Convention\n>> could be to require only transporting xSTL addresses within a URI, even\n>> going so far as to not support them copy/pasted. 101 characters is not\n>> much longer (and sometimes shorter) than PaymentRequest URIs end up\n>> being.\n>\n> Yeah, I don't see anything wrong with stealth addresses whatever length\n> they wind up being. It's a good intermediate step, and without them\n> people will just pass around unsigned payment requests and other stuff.\n>\n>> I think there are ways to make stealth addresses easy enough to use that\n>> people actually prefer using them for P2P payments which do not involve\n>> a\n>> full-stack merchant. In that case, if it was a PaymentRequest it would\n>> almost certainly not be signed, and would be more easily shared over\n>> email\n>> or SMS as a URI than as a file attachment or, even worse, putting the\n>> unsigned PR file up on a third-party server which probably won't do a\n>> good\n>> job securing it.\n>\n> At the DarkWallet hackathon we had discussed how to integrate stealth\n> addresses into OpenPGP keys as a new user id type for instance, and\n> similarly into x.509 certs.\n>\n> The big advantage here is the identity of *who* you are paying is\n> important, not just \"I got this signed payment request\". Basically the\n> concept becomes \"identity signed payment address\" and the signature\n> binding the identity to the address is a one time and offline thing; an\n> issue with the payment protocol as it stands is that it encourages\n> signing keys to be kept online to issue payment requests. If you have a\n> scheme where the private keys that bound the identity to the address can\n> be kept offline you're much better off, because the attacker can only\n> create a fake payment request, they can't divert the funds to\n> themselves.\n>\n> So with that in mind, I strongly suggest sticking with defining a\n> reasonable stealth address spec. But when you do, keep in mind that you\n> may want to upgrade it in the future, preferably in a backwards\n> compatible way. Also, it shouldn't be limited to exactly 2-of-2\n> CHECKMULTISIG, there's no reason why n and m can't be picked as needed.\n> Sure, it means the addresses are not fixed length, but for something\n> that is mostly an internal detail and only occasionally visible to\n> advanced users, I see no issues there.\n>\n> Along those lines: what would a BIP32 chain code address look like? What\n> happens when you want to use that with a multisig-protected wallet?\n>\n>> * PP Implementation Overview *\n>>\n>> The basic PaymentRequest>PaymentDetails is expecting 'output' containing\n>> one or more TxOuts with script and amount. I believe the general\n>> approach\n>> is to put a fallback address into 'output' for backward compatibility,\n>> and\n>> put Q and Q2 into an extension field.\n>>\n>> So we add a new optional field to PaymentDetails which contains the one\n>> or\n>> two PubKeys. Not sure if we want different protobuf tags, or if the\n>> difference in length of the value makes it obvious enough which approach\n>> is being used;\n>>\n>>     optional bytes stealthOnePubKey = 1000\n>>     optional bytes stealthTwoPubKey = 1001\n>\n> I think you're missing the bigger picture here, not least of which is\n> that backwards compatibility is a bit of a misnomer for an unreleased\n> standard. :)\n>\n> Why put this into the PaymentDetails? That a stealth address is to be\n> used for the payment is a property of the outputs being requested, not\n> the payment itself. We're better off if that goes into the Output\n> message, and further more it suggests that the Output message shouldn't\n> contain raw scriptPubKey's but rather addresses. After all, IsStandard()\n> means we have to inspect the scriptPubKey to see if we can even pay to\n> what the sender is requesting.\n>\n> Once you establish that it's addresses that Outputs specify, then it's\n> easy enough to make a stealth address type, or a BIP32-chain-code\n> address type, or whatever else comes up in the future.\n>\n>\n>> Also, ideally I think I would want multiple different stealth payments\n>> within a single wallet to the same merchant / pubkeys to be identifiable\n>> as such.\n>\n> Agreed.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000bda8ab55740699711a11572c4eec9dc9f714e4896559aac310a115ff\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-01-12T21:18:33",
                "message_text_only": "On Sun, Jan 12, 2014 at 5:33 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n> ...\n> Now, you would need to get two pubkeys to the payer, throw in a prefix to\n> help standardize it, and end up with addresses that could look like (for\n> example):\n>\n>\n> xSTLxsn59oaupR6ZKt2yddQ4dp5hcFinnTWkvsDiXtHgAEDg5ajNVzTY8MMQsmqnEn3ZMKxQzrfC3pDimfTWMkiUb7x3jX3J26JSX\n>\n> tSTLcpwzupCFL3maVZkSiB9ib3BXsCAfkhMLgckQEyoj8Tk83ANzofeuDdbX6bSPqNRfACLLFYK8EwVo1jdjxNDFNDWxhnQiAy4ba\n>\n\nNo, please. Make it easy for non-geeks, extend the payment protocol, or\nwe'll spend the next two years writing code that tries to ignore linebreaks\nand spaces and changing <input> elements in HTML forms to <textarea> ....\n\n-- \n--\nGavin Andrese\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140112/4de94ef8/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-13T09:52:25",
                "message_text_only": "On Sun, Jan 12, 2014 at 1:18 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> No, please. Make it easy for non-geeks, extend the payment protocol, or\n> we'll spend the next two years writing code that tries to ignore linebreaks\n> and spaces and changing <input> elements in HTML forms to <textarea> ....\n\nHowever, if you're able to use the payment protocol then you probably\ndon't need stealth addresses to prevent reuse.\n\nE.g. What can I put for a donation address on a totally static\nwebpage? or on a billboard?\n\nAt least thats what I understood these things were trying to solve\u2014\nfix privacy where realtime two way communication just isn't available."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-13T10:39:35",
                "message_text_only": ">\n> However, if you're able to use the payment protocol then you probably\n> don't need stealth addresses to prevent reuse.\n>\n\nI was thinking that people could upload a payment protocol file somewhere\nonce (like to their personal web page, or shared via dropbox or google\ndrive or some custom new pastebin style service), and then just encode a\nregular bitcoin URI into the qrcode on the billboard.\n\nLikewise, I could attach a payment request to an email and send it to you,\nand now you can pay me whenever you want forever.\n\nGetting a little static piece of data to someone *once* should be something\nwe can make easy. Constantly refreshing it, on the other hand ...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/caf2111a/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-13T13:37:46",
                "message_text_only": "> I was thinking that people could upload a payment protocol file somewhere\n> once (like to their personal web page, or shared via dropbox or google\n> drive or some custom new pastebin style service), and then just encode a\n> regular bitcoin URI into the qrcode on the billboard.\n\nThat does require trusting the third party not to later tamper with\nthe payment request, though.  (I'm assuming that a signed payment\nrequest is not always going to be all that useful in the case of\nprivate individuals, even assuming the payee is willing to sign up for\none.)\n\n> Likewise, I could attach a payment request to an email and send it to you,\n> and now you can pay me whenever you want forever.\n\nThat certainly sounds like a plausible use case.  You do still have\nthe problem that e-mail is an insecure channel, but it's no worse than\nexchanging Bitcoin addreses over e-mail as things stand at the\nmoment.\n\nroy"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-13T15:58:01",
                "message_text_only": "On Mon, Jan 13, 2014 at 2:37 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n\n> That does require trusting the third party not to later tamper with\n> the payment request, though.\n\n\nYou have to trust the billboard owner too. If you're relying on a third\nparty to relay a payment instruction, that will always be an issue, hence\nthe signing.\n\nSigning a payment request for an individual is easy, anyway, depending on\nthe kind of ID you want. If you want to sign with an email address, just go\nhere with a browser like Chrome/Safari/IE that uses the system keystore:\n\n   http://www.comodo.com/home/email-security/free-email-certificate.php\n\nThey'll send you an email, you click the link to verify, and a cert will be\ngenerated and installed by your web browser. It's actually easier than\nsigning up for a website. There are lots of other places that do it for\nfree too, I just picked the first one from a google search for [free email\ncertificate].\n\nOnce you've got that in your keystore, a wallet app can quite easily be\ntold to sign payment requests with your email address.\n\nFor a billboard I guess you'd probably be an organisation or company\ninstead, though an email address can work there too as long as you have a\nwell known domain name.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/ad38ed64/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-13T20:11:20",
                "message_text_only": "On Mon, Jan 13, 2014 at 04:58:01PM +0100, Mike Hearn wrote:\n> Signing a payment request for an individual is easy, anyway, depending on\n> the kind of ID you want. If you want to sign with an email address, just go\n> here with a browser like Chrome/Safari/IE that uses the system keystore:\n> \n>    http://www.comodo.com/home/email-security/free-email-certificate.php\n> \n\nOk, cool, I wasn't aware of such services, and I can certainly see\nthey could be useful.  But it's not that great for the business card\nscenario.\n\nAs far as I can see, using it in that scenario would have to rely on\nthe payer scanning the QR code on the business card, and then check\nthat the email address displayed by their wallet matched the email\naddress printed on the business card.\n\nroy"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-14T22:53:21",
                "message_text_only": "On Mon, Jan 13, 2014 at 04:58:01PM +0100, Mike Hearn wrote:\n> \n> Signing a payment request for an individual is easy, anyway, depending on\n> the kind of ID you want. If you want to sign with an email address, just go\n> here with a browser like Chrome/Safari/IE that uses the system keystore:\n> \n>    http://www.comodo.com/home/email-security/free-email-certificate.php\n\nHaving now read that page, I'll just leave you with the first bullet\npoint from it:\n\n * Digital signature ensures confidentiality\n\n(I'm not trying to make any particular point here - I just couldn't resist)\n\n\nroy"
            },
            {
                "author": "Drak",
                "date": "2014-01-15T00:19:29",
                "message_text_only": "Sorry this is possibly OT, but someone posted this thread to r/bitcoin and\nit's gone straight to position 1. People are really enthusiastic about this\nfeature.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/4539c6f0/attachment.html>"
            },
            {
                "author": "Ben Davenport",
                "date": "2014-01-15T20:22:25",
                "message_text_only": "Love what's happening here, and how quickly things are moving, from initial\nconcept, to first implementation, to first transaction.\n\nBut may I suggest we consider changing the name \"stealth address\" to\nsomething more neutral?\n\nAlready, many people on Reddit and elsewhere are misinterpreting the\npurpose of such addresses, whether for tax evasion, criminal activity, or\nwho knows what. Bitcoin already has plenty of political hurdles based\nsheerly on the technology. We don't need to make life harder for ourselves.\nEven forgetting about politics, the \"stealth\" association just seems to\nimply something secretive going on. Is a Fortune 500 company or worldwide\ncharity going to want to use something called a \"stealth address\"?\n\nI'd propose the alternate term \"routing address\".\n\n- It's a descriptive, neutral term\n- It accurately describes what the address is: it's a way to route payment\nto a recipient, but not the actual final address\n- It can be analogized to a bank's routing number: It is uniquely, publicly\nand persistently tied to the receiving institution. The payor and payee\nknows when payment is made using it, but it's not publicly visible.\n\nThat's the best I've got, but here are some alternate terms in case that\ndoesn't work:\n\n- reusable public address\n- permanent public address\n- permanent address\n- static address\n\nI don't like these quite as much because they're not as clear. Normal\naddresses are all reusable, permanent and static -- they just _shouldn't_\nbe used that way.\n\nBen\n\n\nOn Tue, Jan 14, 2014 at 4:19 PM, Drak <drak at zikula.org> wrote:\n\n> Sorry this is possibly OT, but someone posted this thread to r/bitcoin and\n> it's gone straight to position 1. People are really enthusiastic about this\n> feature.\n>\n> Drak\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/4e4a71a9/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-15T20:38:41",
                "message_text_only": "On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com> wrote:\n> But may I suggest we consider changing the name \"stealth address\" to\n> something more neutral?\n\nACK.  Regardless of the 'political' overtones, I think stealth is a\nlittle cringe-worthy.\n\n\"Private address\" would be fine if not for confusion with private-keys.\n\n\"Static address\" is perhaps the best in my view. (also helps improve\nawareness that normal addresses are intended to be more one-use-ness)"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-01-15T20:44:17",
                "message_text_only": "\"static address\" seems like a reasonable attempt at describing intended\nuse/direction.\n\n\n\nOn Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>\n> wrote:\n> > But may I suggest we consider changing the name \"stealth address\" to\n> > something more neutral?\n>\n> ACK.  Regardless of the 'political' overtones, I think stealth is a\n> little cringe-worthy.\n>\n> \"Private address\" would be fine if not for confusion with private-keys.\n>\n> \"Static address\" is perhaps the best in my view. (also helps improve\n> awareness that normal addresses are intended to be more one-use-ness)\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/87a1eb7e/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-15T23:01:12",
                "message_text_only": "Do any people who aren't computer programmers or physicists ever use the\nterm \"static\"?\n\nI liked routing address.\n\n\nOn Wed, Jan 15, 2014 at 9:44 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> \"static address\" seems like a reasonable attempt at describing intended\n> use/direction.\n>\n>\n>\n> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>\n>> wrote:\n>> > But may I suggest we consider changing the name \"stealth address\" to\n>> > something more neutral?\n>>\n>> ACK.  Regardless of the 'political' overtones, I think stealth is a\n>> little cringe-worthy.\n>>\n>> \"Private address\" would be fine if not for confusion with private-keys.\n>>\n>> \"Static address\" is perhaps the best in my view. (also helps improve\n>> awareness that normal addresses are intended to be more one-use-ness)\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/5560f619/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-15T23:04:23",
                "message_text_only": "On Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:\n> \"static address\" seems like a reasonable attempt at describing intended\n> use/direction.\n\n...as opposed to an address configured by DHCP?\n\nMore seriously, I don't think a typical user will understand anything from\nthe phrase \"static address\".  But it is a neutral name, and it is shorter\nthan \"address-of-a-type-for-which-reuse-is-not-deprecated\". :-)\n\n-roy"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-01-15T23:07:28",
                "message_text_only": "\"Routing address\" is pretty good too.  Unsure whether the synergy and\nfamiliarity with bank routing numbers improves the situation, or\nnot...\n\n\nOn Wed, Jan 15, 2014 at 6:04 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n> On Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:\n>> \"static address\" seems like a reasonable attempt at describing intended\n>> use/direction.\n>\n> ...as opposed to an address configured by DHCP?\n>\n> More seriously, I don't think a typical user will understand anything from\n> the phrase \"static address\".  But it is a neutral name, and it is shorter\n> than \"address-of-a-type-for-which-reuse-is-not-deprecated\". :-)\n>\n> -roy\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-15T23:17:34",
                "message_text_only": "How about just calling them 'type S addresses'?\n\nNot sure any other name will in reality convey much more meaning than\nthat.\n\nOn Wed, Jan 15, 2014 at 06:07:28PM -0500, Jeff Garzik wrote:\n> \"Routing address\" is pretty good too.  Unsure whether the synergy and\n> familiarity with bank routing numbers improves the situation, or\n> not...\n> \n> \n> On Wed, Jan 15, 2014 at 6:04 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n> > On Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:\n> >> \"static address\" seems like a reasonable attempt at describing intended\n> >> use/direction.\n> >\n> > ...as opposed to an address configured by DHCP?\n> >\n> > More seriously, I don't think a typical user will understand anything from\n> > the phrase \"static address\".  But it is a neutral name, and it is shorter\n> > than \"address-of-a-type-for-which-reuse-is-not-deprecated\". :-)\n> >\n> > -roy\n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-15T23:19:48",
                "message_text_only": "On Wed, Jan 15, 2014 at 11:17:33PM +0000, I wrote:\n> How about just calling them 'type S addresses'?\n\n(Assuming they're encoded in such as way that they actually start with 's'.\nOtherwise whatever prefix is actually used, obviously.)"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-16T00:05:27",
                "message_text_only": "Might I propose \"reusable address\".\n\nI think that describes it best to any non-programmer, and even more so  \nencourages wallets to present options as 'one time use' vs 'reusable'.\n\nIt definitely packs a marketing punch which could help drive adoption. The  \nfeature is only useful if/when broadly adopted.\n\nI think it meets all the criteria required:\n\n   - Communication between parties is a single message from the payee,  \nwhich may be public\n   - Multiple payments to the same address are not publicly linkable on the  \nblockchain\n   - The payee has explicitly designated they expect to receive more than  \none payment at that address\n   - Payer can publicly prove they made a payment to the reusable address  \nby revealing a secret\n\nI have high hopes for this feature. The war *against* address reuse may  \nsoon be a distant memory.\n\nOn Wed, 15 Jan 2014 12:44:17 -0800, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \"static address\" seems like a reasonable attempt at describing intended  \n> use/direction.\n>\n> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>  \n> wrote:\n>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport  \n>> <bendavenport at gmail.com> wrote:\n>>> But may I suggest we consider changing the name \"stealth address\" to\n>>> something more neutral?\n>>\n>> ACK.  Regardless of the 'political' overtones, I think stealth is a\n>> little cringe-worthy.\n>>\n>> \"Private address\" would be fine if not for confusion with private-keys.\n>>\n>> \"Static address\" is perhaps the best in my view. (also helps improve\n>> awareness that normal addresses are intended to be more one-use-ness)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/8d3a6dc5/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-16T00:10:47",
                "message_text_only": "On Wed, Jan 15, 2014 at 4:05 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n> Might I propose \"reusable address\".\n\nI like this too."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-16T00:24:03",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 01/15/2014 04:05 PM, Jeremy Spilman wrote:\n> Might I propose \"reusable address\".\n\nSay it like it is. This is the only suggestion so far that I really like.\n\nNo amount of finger wagging got people to stop using the block chain\nfor data storage, but news of the OP_RETURN change to relay rules in\n0.9 got people to at least be less damaging in how they do it.\n\nHaving an officially named \"reusable address\" format won't stop people\nfrom doing dumb things (e.g. vanity addresses), but at least maybe\nthey'll stop using traditional addresses for it.\n\nMark\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJS1yafAAoJEAdzVfsmodw40ccQAI0EFAyODzx7yXvlq9idctSd\nxisH4xsOMlsW4lV7xReMnhQsCZ5A+qTMcCd7n7a0bveAxWg1srqBDONLXtHZfwiN\nPx/TfoJKPt1oIHnCoyN8G6pcuHhbUbL3lV19sH02dGnM9Ystf9F4oeqwDTITYb5i\nhuqShMfaTdLEig76zPCLQcOT88deIWZgIxc3R4Do4aCDoyh//2LVZKfzQyEJzVms\nnjgxcVLVRlomofPW+a+60zm/iLsrbmDjwvWSH8IB4d5ik1aO3732pWgNz3X4HSLk\n1s9hVEnpN3GLIWmCcPkbrE9RZtcitghjwrt/xOMKQaqprUuFW4COc0fsfzdLIRtP\nbhrA/dnhVSxiUnjc7gLJBnB9+udVKdk2aTdJvSMB1PvhW9QKPjU/H4AW/yQYmism\nrSr9imurbi3WosTewtwdcQD47SNS4ALMh//3MeHWOBUMEHP7Tki6i8qR+/xOK+vx\nzMc4dnnTQsbgu9bKhrU7ia4eoe/UDvPoLck5cb2+PwYTInfdYBWn1ivbHO7S5ppP\nR+/Tc8h3TyLLcPQmH0tpSX+C/YwvctiGsd+iXBRfSTe7o+0wLn8NcDNGi7QI0ipQ\niCHJup9K0FJqf9OuH9qYeaWht7cyuRJ5H4P/HNESGZaPSdTHDpStSmAzdtbBZOkI\nqrFg7irL2+CxXwI4H6vC\n=XEtz\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Eric Martindale",
                "date": "2014-01-16T00:44:29",
                "message_text_only": "One variation of this, \"recycled address\", might avert misconceptions that\nthe \"re-use\" is exclusive to one's own identity.\n\n\nEric Martindale, relentless maker.\nhttp://www.ericmartindale.com\n+1 (919) 374-2020 | *BitMessage: *BM-2cWCmYBpV64FRSJpHHKWi1Cfc9W52jydwe\n*Note:* Beginning December 11th, 2013, I will only be intermittently\navailable via email, SMS, and BitMessage.  As a courtesy, please leave a\ndetailed message so that I can respond in kind.  Thanks!\n\n\nOn Wed, Jan 15, 2014 at 7:05 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n>  Might I propose \"reusable address\".\n>\n> I think that describes it best to any non-programmer, and even more so\n> encourages wallets to present options as 'one time use' vs 'reusable'.\n>\n> It definitely packs a marketing punch which could help drive adoption. The\n> feature is only useful if/when broadly adopted.\n>\n> I think it meets all the criteria required:\n>\n>   - Communication between parties is a single message from the payee,\n> which may be public\n>   - Multiple payments to the same address are not publicly linkable on the\n> blockchain\n>   - The payee has explicitly designated they expect to receive more than\n> one payment at that address\n>   - Payer can publicly prove they made a payment to the reusable address\n> by revealing a secret\n>\n> I have high hopes for this feature. The war *against* address reuse may\n> soon be a distant memory.\n>\n> On Wed, 15 Jan 2014 12:44:17 -0800, Jeff Garzik <jgarzik at bitpay.com>\n> wrote:\n>\n> \"static address\" seems like a reasonable attempt at describing intended\n> use/direction.\n>\n> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>\n>> wrote:\n>> > But may I suggest we consider changing the name \"stealth address\" to\n>> > something more neutral?\n>>\n>> ACK.  Regardless of the 'political' overtones, I think stealth is a\n>> little cringe-worthy.\n>>\n>> \"Private address\" would be fine if not for confusion with private-keys.\n>>\n>> \"Static address\" is perhaps the best in my view. (also helps improve\n>>  awareness that normal addresses are intended to be more one-use-ness)\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/dad871e2/attachment.html>"
            },
            {
                "author": "Gary Rowe",
                "date": "2014-01-16T06:26:47",
                "message_text_only": "I like \"reusable address\".\n\nIt is very clear what the intended purpose is and gives a subtle hint that\nother types of address should not be re-used.\n\n\n\nOn 16 January 2014 00:44, Eric Martindale <eric at ericmartindale.com> wrote:\n\n> One variation of this, \"recycled address\", might avert misconceptions that\n> the \"re-use\" is exclusive to one's own identity.\n>\n>\n> Eric Martindale, relentless maker.\n> http://www.ericmartindale.com\n> +1 (919) 374-2020 | *BitMessage: *BM-2cWCmYBpV64FRSJpHHKWi1Cfc9W52jydwe\n> *Note:* Beginning December 11th, 2013, I will only be intermittently\n> available via email, SMS, and BitMessage.  As a courtesy, please leave a\n> detailed message so that I can respond in kind.  Thanks!\n>\n>\n> On Wed, Jan 15, 2014 at 7:05 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n>\n>>  Might I propose \"reusable address\".\n>>\n>> I think that describes it best to any non-programmer, and even more so\n>> encourages wallets to present options as 'one time use' vs 'reusable'.\n>>\n>> It definitely packs a marketing punch which could help drive adoption.\n>> The feature is only useful if/when broadly adopted.\n>>\n>> I think it meets all the criteria required:\n>>\n>>   - Communication between parties is a single message from the payee,\n>> which may be public\n>>   - Multiple payments to the same address are not publicly linkable on\n>> the blockchain\n>>   - The payee has explicitly designated they expect to receive more than\n>> one payment at that address\n>>   - Payer can publicly prove they made a payment to the reusable address\n>> by revealing a secret\n>>\n>> I have high hopes for this feature. The war *against* address reuse may\n>> soon be a distant memory.\n>>\n>> On Wed, 15 Jan 2014 12:44:17 -0800, Jeff Garzik <jgarzik at bitpay.com>\n>> wrote:\n>>\n>> \"static address\" seems like a reasonable attempt at describing intended\n>> use/direction.\n>>\n>> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>>\n>>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>\n>>> wrote:\n>>> > But may I suggest we consider changing the name \"stealth address\" to\n>>> > something more neutral?\n>>>\n>>> ACK.  Regardless of the 'political' overtones, I think stealth is a\n>>> little cringe-worthy.\n>>>\n>>> \"Private address\" would be fine if not for confusion with private-keys.\n>>>\n>>> \"Static address\" is perhaps the best in my view. (also helps improve\n>>>  awareness that normal addresses are intended to be more one-use-ness)\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/73f3769a/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-01-16T09:48:19",
                "message_text_only": "On Thu, Jan 16, 2014 at 7:26 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\n> I like \"reusable address\".\n>\n\nSimple and clear, I like it too.\n\nI see the term is routing is used in finance in the USA, but as a Dutch\nperson I associate \"routing address\" with network routing, not with\nbanking. It's non-trivial to translate to a local term.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/c241b654/attachment.html>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-01-16T01:16:14",
                "message_text_only": "Yes. Good idea(s).\n\n> Might I propose \"reusable address\".\n>\n> I think that describes it best to any non-programmer, and even more so\n> encourages wallets to present options as 'one time use' vs 'reusable'.\n>\n> It definitely packs a marketing punch which could help drive adoption. The\n> feature is only useful if/when broadly adopted.\n>\n> I think it meets all the criteria required:\n>\n>    - Communication between parties is a single message from the payee,\n> which may be public\n>    - Multiple payments to the same address are not publicly linkable on\n> the\n> blockchain\n>    - The payee has explicitly designated they expect to receive more than\n> one payment at that address\n>    - Payer can publicly prove they made a payment to the reusable address\n> by revealing a secret\n>\n> I have high hopes for this feature. The war *against* address reuse may\n> soon be a distant memory.\n>\n> On Wed, 15 Jan 2014 12:44:17 -0800, Jeff Garzik <jgarzik at bitpay.com>\n> wrote:\n>> \"static address\" seems like a reasonable attempt at describing intended\n>> use/direction.\n>>\n>> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com>\n>> wrote:\n>>> On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport\n>>> <bendavenport at gmail.com> wrote:\n>>>> But may I suggest we consider changing the name \"stealth address\" to\n>>>> something more neutral?\n>>>\n>>> ACK.  Regardless of the 'political' overtones, I think stealth is a\n>>> little cringe-worthy.\n>>>\n>>> \"Private address\" would be fine if not for confusion with private-keys.\n>>>\n>>> \"Static address\" is perhaps the best in my view. (also helps improve\n>>> awareness that normal addresses are intended to be more\n>>> one-use-ness)------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Drak",
                "date": "2014-01-16T10:14:24",
                "message_text_only": "On 16 January 2014 00:05, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n>  Might I propose \"reusable address\".\n>\n> I think that describes it best to any non-programmer, and even more so\n> encourages wallets to present options as 'one time use' vs 'reusable'.\n>\n\nThe problem is all addresses are reusable and to an average user, addresses\nare already reusable so there is little to distinguish the address format.\nIt might be better to call it a \"public address\" in common terminology.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/1b92b504/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-16T10:19:41",
                "message_text_only": "I think we have a winner in \"reusable address\". Yes an existing address can\nbe reused and will superficially appear to work, it just won't work well.\nCalling them reusable addresses helps reinforce the idea in peoples mind\nthat the other kind shouldn't be reused.\n\n\nOn Thu, Jan 16, 2014 at 11:14 AM, Drak <drak at zikula.org> wrote:\n\n> On 16 January 2014 00:05, Jeremy Spilman <jeremy at taplink.co> wrote:\n>\n>>  Might I propose \"reusable address\".\n>>\n>> I think that describes it best to any non-programmer, and even more so\n>> encourages wallets to present options as 'one time use' vs 'reusable'.\n>>\n>\n> The problem is all addresses are reusable and to an average user,\n> addresses are already reusable so there is little to distinguish the\n> address format.\n> It might be better to call it a \"public address\" in common terminology.\n>\n> Drak\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/1c7e3591/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-16T21:28:05",
                "message_text_only": "On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:\n> Might I propose \"reusable address\".\n> \n> I think that describes it best to any non-programmer, and even more\n> so encourages wallets to present options as 'one time use' vs\n> 'reusable'.\n> \n> It definitely packs a marketing punch which could help drive\n> adoption. The feature is only useful if/when broadly adopted.\n\nI'm very against the name \"reusable addresses\" and strongly belive we\nshould stick with the name stealth addresses.\n\nYou gotta look at it from the perspective of a user; lets take standard\npay-to-pubkey-hash addresses: I can tell my wallet to pay one as many\ntimes as I want and everything works just great. I also can enter the\naddress on blockchain.info's search box, and every transaction related\nto the address, and the balance of it, pops up immediately.\n\nWhat is that telling me? A: Addresses starting with \"1\" are reusable. B:\nTransactions associated with them appear to be public knowledge.\n\nNow I upgrade my wallet software and it says I now have a \"reusable\"\naddress. My reaction is \"Huh? Normal addresses are reusable, what's\nspecial about this weird reusable address thing that my buddy Bob's\nwallet software couldn't pay.\" I might even try to enter in a \"reusable\"\naddress in blockchain.info, which won't work, and I'll just figure\n\"must be some new unsupported thing\" and move on with my life.\n\nOn the other hand, suppose my wallet says I now have \"stealth address\"\nsupport. I'm going to think \"Huh, stealth? I guess that means privacy\nright? I like privacy.\" If I try searching for a stealth address on\nblockchain.info, when it doesn't work I might think twig on \"Oh right!\nIt said stealth addresses are private, so maybe the transactions are\nhidden?\" I might also think \"Maybe this is like stealth/incognito mode\nin my browser? So like, there's no history being kept for others to\nsee?\" Regardless, I'm going to be thinking \"well I hear scary stuff\nabout Bitcoin privacy, and this stealth thing sounds like it's gonna\nhelp, so I should learn more about that\"\n\nFinally keep in mind that stealth addresses have had a tonne of very\nfast, and very wide reaching PR. The name is in the public conciousness\nalready, and trying to change it now just because of vague bad\nassociations is going to throw away the momentum of that good PR and\nslow down adoption. Last night I was at the Toronto Bitcoin Meetup and I\nbased on conversations there with people there, technical and\nnon-technical, almost everyone had heard about them and almost everyone\nseemed to understand the basic idea of why they were a good thing. That\njust wouldn't have happened with a name that tried to hide what stealth\naddresses were for, and by changing the name now we risk people not\nmaking the connection when wallet software gets upgraded to support\nthem.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/e268c71f/attachment.sig>"
            },
            {
                "author": "Johnathan Corgan",
                "date": "2014-01-17T02:30:35",
                "message_text_only": "On 01/16/2014 01:28 PM, Peter Todd wrote:\n\n> I'm very against the name \"reusable addresses\" and strongly belive we\n> should stick with the name stealth addresses.\n\nI agree wholeheartedly against using \"reusable address\".  I personally\nam fine with \"stealth address\", but can see where there might be a\nnegative connotation.\n\nMight I suggest \"master address\", which is neutral in connotation, but\nindicates both that it is fixed and that payment addresses are generated\nas needed from it.\n\nBut please, no \"reusable address.\"\n\n-- \nJohnathan Corgan, Corgan Labs\nSDR Training and Development Services\nhttp://corganlabs.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: johnathan.vcf\nType: text/x-vcard\nSize: 334 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/14d333f0/attachment.vcf>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 230 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/14d333f0/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-17T03:13:39",
                "message_text_only": "I hear you, and I really don't care that much what it's called, as much as, does it work and how!\n\n> I might even try to enter in a \"reusable\" address in blockchain.info, which won't work, and I'll just figure\n> \"must be some new unsupported thing\" and move on with my life.\n> \n\nRegardless of what it's called, Blockchain.info should tell the user, hey this address doesn't let the whole world see every single payment that's made to it! If you paid something to this address, only you know how to find the payment - look for the stealth address in your transaction list. \n\nSo if we call the address that has the pubKeys the \"reusable address\" and the address that's generated from the shared secret the \"stealth address\" then is everyone happy? :-)"
            },
            {
                "author": "Drak",
                "date": "2014-01-17T07:49:36",
                "message_text_only": "Peter I agree with you about  \"reusable addresses\", but aren't we also\ntrying to get away from the word \"address\" entirely?  How about calling it\na \"payment key\" or \"reusable payment key\" instead? using \"stealth\" is just\nasking for bad press imo.\n\n\nOn 16 January 2014 21:28, Peter Todd <pete at petertodd.org> wrote:\n\n> On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:\n> > Might I propose \"reusable address\".\n> >\n> > I think that describes it best to any non-programmer, and even more\n> > so encourages wallets to present options as 'one time use' vs\n> > 'reusable'.\n> >\n> > It definitely packs a marketing punch which could help drive\n> > adoption. The feature is only useful if/when broadly adopted.\n>\n> I'm very against the name \"reusable addresses\" and strongly belive we\n> should stick with the name stealth addresses.\n>\n> You gotta look at it from the perspective of a user; lets take standard\n> pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many\n> times as I want and everything works just great. I also can enter the\n> address on blockchain.info's search box, and every transaction related\n> to the address, and the balance of it, pops up immediately.\n>\n> What is that telling me? A: Addresses starting with \"1\" are reusable. B:\n> Transactions associated with them appear to be public knowledge.\n>\n> Now I upgrade my wallet software and it says I now have a \"reusable\"\n> address. My reaction is \"Huh? Normal addresses are reusable, what's\n> special about this weird reusable address thing that my buddy Bob's\n> wallet software couldn't pay.\" I might even try to enter in a \"reusable\"\n> address in blockchain.info, which won't work, and I'll just figure\n> \"must be some new unsupported thing\" and move on with my life.\n>\n> On the other hand, suppose my wallet says I now have \"stealth address\"\n> support. I'm going to think \"Huh, stealth? I guess that means privacy\n> right? I like privacy.\" If I try searching for a stealth address on\n> blockchain.info, when it doesn't work I might think twig on \"Oh right!\n> It said stealth addresses are private, so maybe the transactions are\n> hidden?\" I might also think \"Maybe this is like stealth/incognito mode\n> in my browser? So like, there's no history being kept for others to\n> see?\" Regardless, I'm going to be thinking \"well I hear scary stuff\n> about Bitcoin privacy, and this stealth thing sounds like it's gonna\n> help, so I should learn more about that\"\n>\n> Finally keep in mind that stealth addresses have had a tonne of very\n> fast, and very wide reaching PR. The name is in the public conciousness\n> already, and trying to change it now just because of vague bad\n> associations is going to throw away the momentum of that good PR and\n> slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I\n> based on conversations there with people there, technical and\n> non-technical, almost everyone had heard about them and almost everyone\n> seemed to understand the basic idea of why they were a good thing. That\n> just wouldn't have happened with a name that tried to hide what stealth\n> addresses were for, and by changing the name now we risk people not\n> making the connection when wallet software gets upgraded to support\n> them.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/e2b36d03/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-17T09:15:40",
                "message_text_only": "I must say, this shed is mighty fine looking. It'd be a great place to\nstore our bikes. But, what colour should we paint it?\n\nHow about we split the difference and go with \"privacy address\"? As Peter\nnotes, that's what people actually like and want. The problem with stealth\nis it's got strong connotations with American military hardware and perhaps\nthieves sneaking around in the night:\n\n   https://www.google.com/search?tbm=isch&q=stealth\n\nBut everyone loves privacy.\n\n\nOn Fri, Jan 17, 2014 at 8:49 AM, Drak <drak at zikula.org> wrote:\n\n> Peter I agree with you about  \"reusable addresses\", but aren't we also\n> trying to get away from the word \"address\" entirely?  How about calling it\n> a \"payment key\" or \"reusable payment key\" instead? using \"stealth\" is just\n> asking for bad press imo.\n>\n>\n> On 16 January 2014 21:28, Peter Todd <pete at petertodd.org> wrote:\n>\n>> On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:\n>> > Might I propose \"reusable address\".\n>> >\n>> > I think that describes it best to any non-programmer, and even more\n>> > so encourages wallets to present options as 'one time use' vs\n>> > 'reusable'.\n>> >\n>> > It definitely packs a marketing punch which could help drive\n>> > adoption. The feature is only useful if/when broadly adopted.\n>>\n>> I'm very against the name \"reusable addresses\" and strongly belive we\n>> should stick with the name stealth addresses.\n>>\n>> You gotta look at it from the perspective of a user; lets take standard\n>> pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many\n>> times as I want and everything works just great. I also can enter the\n>> address on blockchain.info's search box, and every transaction related\n>> to the address, and the balance of it, pops up immediately.\n>>\n>> What is that telling me? A: Addresses starting with \"1\" are reusable. B:\n>> Transactions associated with them appear to be public knowledge.\n>>\n>> Now I upgrade my wallet software and it says I now have a \"reusable\"\n>> address. My reaction is \"Huh? Normal addresses are reusable, what's\n>> special about this weird reusable address thing that my buddy Bob's\n>> wallet software couldn't pay.\" I might even try to enter in a \"reusable\"\n>> address in blockchain.info, which won't work, and I'll just figure\n>> \"must be some new unsupported thing\" and move on with my life.\n>>\n>> On the other hand, suppose my wallet says I now have \"stealth address\"\n>> support. I'm going to think \"Huh, stealth? I guess that means privacy\n>> right? I like privacy.\" If I try searching for a stealth address on\n>> blockchain.info, when it doesn't work I might think twig on \"Oh right!\n>> It said stealth addresses are private, so maybe the transactions are\n>> hidden?\" I might also think \"Maybe this is like stealth/incognito mode\n>> in my browser? So like, there's no history being kept for others to\n>> see?\" Regardless, I'm going to be thinking \"well I hear scary stuff\n>> about Bitcoin privacy, and this stealth thing sounds like it's gonna\n>> help, so I should learn more about that\"\n>>\n>> Finally keep in mind that stealth addresses have had a tonne of very\n>> fast, and very wide reaching PR. The name is in the public conciousness\n>> already, and trying to change it now just because of vague bad\n>> associations is going to throw away the momentum of that good PR and\n>> slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I\n>> based on conversations there with people there, technical and\n>> non-technical, almost everyone had heard about them and almost everyone\n>> seemed to understand the basic idea of why they were a good thing. That\n>> just wouldn't have happened with a name that tried to hide what stealth\n>> addresses were for, and by changing the name now we risk people not\n>> making the connection when wallet software gets upgraded to support\n>> them.\n>>\n>> --\n>> 'peter'[:-1]@petertodd.org\n>> 0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/44ddef9f/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-17T09:19:03",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 01/17/2014 01:15 AM, Mike Hearn wrote:\n> I must say, this shed is mighty fine looking. It'd be a great place\n> to store our bikes. But, what colour should we paint it?\n> \n> How about we split the difference and go with \"privacy address\"?\n> As\n\nToo close to private key, IMHO.\n\n> Peter notes, that's what people actually like and want. The problem\n> with stealth is it's got strong connotations with American military\n> hardware and perhaps thieves sneaking around in the night:\n\nAnd ninjas.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJS2PWHAAoJEAdzVfsmodw4QKoP/iCB62bthf+VyOAZFtP/LbU3\nop//I06zOd6oj3zSM0B3Qwz0+H3L9OqWeo9yP1KzYb8YG7RelGf6KOh0LBQoo0bY\neEv8EqvJiW0JOi7gmMsaBgxtZ99TKibGVWMramAV+pSOkKbbbQ23O8a3Y2uopZIg\neypB9sUO9STTc/vwEKZRtefoXHWDUF8bXel/YfTGJQjOuxN/z6gsXRPp4xDvySL3\nLl3OvgEGrqIjIodvMZY+V5wzxj/TlU5kCKS6Vug/JEM1U0DmiBBikaR6Yus5m/fC\nyyxEQH8jATLZVsAac4Z16rQXj1nTRh4w6X9KCTynEaba5Z8fz38habUNxyjT8JG+\ncP+QDQac9Nnxuw6gzM4QRkOiQas5eVNRdzNJ48k2SGDLb7AYPBO/URAV8Cd05caY\nGx1ruC3MVGu7Fu1/9rtKeWMcNyAvpklzs9DhHfqNmYcRCl6NcoaCvxfq3NesI4Z9\nuQrTfL9VBUXJJ2z8ZLe3ZAdBz46159JXCBKHIWwZ+fm0uPkelvoUo8oP+OdxwP1x\nwGCYmfvuf8lSnud8WM5EDDGo4+7GUU5Pnh9p+o6Lyp4d0WoplUmSvz2XriiANQjq\nz/Xo3B321sdLOEI/Nrqnn3S/hMveru7HO7xQx1aUATvYga4ZyFZh/Yp0bwOAESBZ\nGoG0piwQbQhoQZMslV4T\n=40o3\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Natanael",
                "date": "2014-01-17T09:23:22",
                "message_text_only": "So far I've only liked the original name \"Stealth address\" and the\nsuggestion \"routing address\".\n\nShould we put this up for some kind of informal vote with comments allowed?\nLike a Google docs form?\n\n- Sent from my phone\nDen 17 jan 2014 10:18 skrev \"Mike Hearn\" <mike at plan99.net>:\n\n> I must say, this shed is mighty fine looking. It'd be a great place to\n> store our bikes. But, what colour should we paint it?\n>\n> How about we split the difference and go with \"privacy address\"? As Peter\n> notes, that's what people actually like and want. The problem with stealth\n> is it's got strong connotations with American military hardware and perhaps\n> thieves sneaking around in the night:\n>\n>    https://www.google.com/search?tbm=isch&q=stealth\n>\n> But everyone loves privacy.\n>\n>\n> On Fri, Jan 17, 2014 at 8:49 AM, Drak <drak at zikula.org> wrote:\n>\n>> Peter I agree with you about  \"reusable addresses\", but aren't we also\n>> trying to get away from the word \"address\" entirely?  How about calling it\n>> a \"payment key\" or \"reusable payment key\" instead? using \"stealth\" is just\n>> asking for bad press imo.\n>>\n>>\n>> On 16 January 2014 21:28, Peter Todd <pete at petertodd.org> wrote:\n>>\n>>> On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:\n>>> > Might I propose \"reusable address\".\n>>> >\n>>> > I think that describes it best to any non-programmer, and even more\n>>> > so encourages wallets to present options as 'one time use' vs\n>>> > 'reusable'.\n>>> >\n>>> > It definitely packs a marketing punch which could help drive\n>>> > adoption. The feature is only useful if/when broadly adopted.\n>>>\n>>> I'm very against the name \"reusable addresses\" and strongly belive we\n>>> should stick with the name stealth addresses.\n>>>\n>>> You gotta look at it from the perspective of a user; lets take standard\n>>> pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many\n>>> times as I want and everything works just great. I also can enter the\n>>> address on blockchain.info's search box, and every transaction related\n>>> to the address, and the balance of it, pops up immediately.\n>>>\n>>> What is that telling me? A: Addresses starting with \"1\" are reusable. B:\n>>> Transactions associated with them appear to be public knowledge.\n>>>\n>>> Now I upgrade my wallet software and it says I now have a \"reusable\"\n>>> address. My reaction is \"Huh? Normal addresses are reusable, what's\n>>> special about this weird reusable address thing that my buddy Bob's\n>>> wallet software couldn't pay.\" I might even try to enter in a \"reusable\"\n>>> address in blockchain.info, which won't work, and I'll just figure\n>>> \"must be some new unsupported thing\" and move on with my life.\n>>>\n>>> On the other hand, suppose my wallet says I now have \"stealth address\"\n>>> support. I'm going to think \"Huh, stealth? I guess that means privacy\n>>> right? I like privacy.\" If I try searching for a stealth address on\n>>> blockchain.info, when it doesn't work I might think twig on \"Oh right!\n>>> It said stealth addresses are private, so maybe the transactions are\n>>> hidden?\" I might also think \"Maybe this is like stealth/incognito mode\n>>> in my browser? So like, there's no history being kept for others to\n>>> see?\" Regardless, I'm going to be thinking \"well I hear scary stuff\n>>> about Bitcoin privacy, and this stealth thing sounds like it's gonna\n>>> help, so I should learn more about that\"\n>>>\n>>> Finally keep in mind that stealth addresses have had a tonne of very\n>>> fast, and very wide reaching PR. The name is in the public conciousness\n>>> already, and trying to change it now just because of vague bad\n>>> associations is going to throw away the momentum of that good PR and\n>>> slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I\n>>> based on conversations there with people there, technical and\n>>> non-technical, almost everyone had heard about them and almost everyone\n>>> seemed to understand the basic idea of why they were a good thing. That\n>>> just wouldn't have happened with a name that tried to hide what stealth\n>>> addresses were for, and by changing the name now we risk people not\n>>> making the connection when wallet software gets upgraded to support\n>>> them.\n>>>\n>>> --\n>>> 'peter'[:-1]@petertodd.org\n>>> 0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>>> Critical Workloads, Development Environments & Everything In Between.\n>>> Get a Quote or Start a Free Trial Today.\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/0b612dbf/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2014-01-17T09:59:01",
                "message_text_only": "That could also work. Still, didn't we want to ditch the word address?\nCould be a privacy key...\nOn 17 Jan 2014 09:15, \"Mike Hearn\" <mike at plan99.net> wrote:\n\n> I must say, this shed is mighty fine looking. It'd be a great place to\n> store our bikes. But, what colour should we paint it?\n>\n> How about we split the difference and go with \"privacy address\"? As Peter\n> notes, that's what people actually like and want. The problem with stealth\n> is it's got strong connotations with American military hardware and perhaps\n> thieves sneaking around in the night:\n>\n>    https://www.google.com/search?tbm=isch&q=stealth\n>\n> But everyone loves privacy.\n>\n>\n> On Fri, Jan 17, 2014 at 8:49 AM, Drak <drak at zikula.org> wrote:\n>\n>> Peter I agree with you about  \"reusable addresses\", but aren't we also\n>> trying to get away from the word \"address\" entirely?  How about calling it\n>> a \"payment key\" or \"reusable payment key\" instead? using \"stealth\" is just\n>> asking for bad press imo.\n>>\n>>\n>> On 16 January 2014 21:28, Peter Todd <pete at petertodd.org> wrote:\n>>\n>>> On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:\n>>> > Might I propose \"reusable address\".\n>>> >\n>>> > I think that describes it best to any non-programmer, and even more\n>>> > so encourages wallets to present options as 'one time use' vs\n>>> > 'reusable'.\n>>> >\n>>> > It definitely packs a marketing punch which could help drive\n>>> > adoption. The feature is only useful if/when broadly adopted.\n>>>\n>>> I'm very against the name \"reusable addresses\" and strongly belive we\n>>> should stick with the name stealth addresses.\n>>>\n>>> You gotta look at it from the perspective of a user; lets take standard\n>>> pay-to-pubkey-hash addresses: I can tell my wallet to pay one as many\n>>> times as I want and everything works just great. I also can enter the\n>>> address on blockchain.info's search box, and every transaction related\n>>> to the address, and the balance of it, pops up immediately.\n>>>\n>>> What is that telling me? A: Addresses starting with \"1\" are reusable. B:\n>>> Transactions associated with them appear to be public knowledge.\n>>>\n>>> Now I upgrade my wallet software and it says I now have a \"reusable\"\n>>> address. My reaction is \"Huh? Normal addresses are reusable, what's\n>>> special about this weird reusable address thing that my buddy Bob's\n>>> wallet software couldn't pay.\" I might even try to enter in a \"reusable\"\n>>> address in blockchain.info, which won't work, and I'll just figure\n>>> \"must be some new unsupported thing\" and move on with my life.\n>>>\n>>> On the other hand, suppose my wallet says I now have \"stealth address\"\n>>> support. I'm going to think \"Huh, stealth? I guess that means privacy\n>>> right? I like privacy.\" If I try searching for a stealth address on\n>>> blockchain.info, when it doesn't work I might think twig on \"Oh right!\n>>> It said stealth addresses are private, so maybe the transactions are\n>>> hidden?\" I might also think \"Maybe this is like stealth/incognito mode\n>>> in my browser? So like, there's no history being kept for others to\n>>> see?\" Regardless, I'm going to be thinking \"well I hear scary stuff\n>>> about Bitcoin privacy, and this stealth thing sounds like it's gonna\n>>> help, so I should learn more about that\"\n>>>\n>>> Finally keep in mind that stealth addresses have had a tonne of very\n>>> fast, and very wide reaching PR. The name is in the public conciousness\n>>> already, and trying to change it now just because of vague bad\n>>> associations is going to throw away the momentum of that good PR and\n>>> slow down adoption. Last night I was at the Toronto Bitcoin Meetup and I\n>>> based on conversations there with people there, technical and\n>>> non-technical, almost everyone had heard about them and almost everyone\n>>> seemed to understand the basic idea of why they were a good thing. That\n>>> just wouldn't have happened with a name that tried to hide what stealth\n>>> addresses were for, and by changing the name now we risk people not\n>>> making the connection when wallet software gets upgraded to support\n>>> them.\n>>>\n>>> --\n>>> 'peter'[:-1]@petertodd.org\n>>> 0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>>> Critical Workloads, Development Environments & Everything In Between.\n>>> Get a Quote or Start a Free Trial Today.\n>>>\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/521c0ff2/attachment.html>"
            },
            {
                "author": "Cameron Garnham",
                "date": "2014-01-17T20:16:23",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nOne of the possible words that haven't been proposed is 'personal' where\nbitcoin addressed are commonly incorrectly called public address.\n\nMaybe 'personal account' or even 'personal address' would imply that the\nbalance on such an account shouldn't be assumed to be public knowledge.\n\nCam.\n\n\nOn 17/01/2014 5:59 pm, Drak wrote:\n> That could also work. Still, didn't we want to ditch the word address?\n> Could be a privacy key...\n> \n> On 17 Jan 2014 09:15, \"Mike Hearn\" <mike at plan99.net\n> <mailto:mike at plan99.net>> wrote:\n> \n>     I must say, this shed is mighty fine looking. It'd be a great place\n>     to store our bikes. But, what colour should we paint it?\n> \n>     How about we split the difference and go with \"privacy address\"? As\n>     Peter notes, that's what people actually like and want. The problem\n>     with stealth is it's got strong connotations with American military\n>     hardware and perhaps thieves sneaking around in the night:\n> \n>        https://www.google.com/search?tbm=isch&q=stealth\n> \n>     But everyone loves privacy.\n> \n> \n>     On Fri, Jan 17, 2014 at 8:49 AM, Drak <drak at zikula.org\n>     <mailto:drak at zikula.org>> wrote:\n> \n>         Peter I agree with you about  \"reusable addresses\", but aren't\n>         we also trying to get away from the word \"address\" entirely?\n>          How about calling it a \"payment key\" or \"reusable payment key\"\n>         instead? using \"stealth\" is just asking for bad press imo.\n> \n> \n>         On 16 January 2014 21:28, Peter Todd <pete at petertodd.org\n>         <mailto:pete at petertodd.org>> wrote:\n> \n>             On Wed, Jan 15, 2014 at 04:05:27PM -0800, Jeremy Spilman wrote:\n>             > Might I propose \"reusable address\".\n>             >\n>             > I think that describes it best to any non-programmer, and\n>             even more\n>             > so encourages wallets to present options as 'one time use' vs\n>             > 'reusable'.\n>             >\n>             > It definitely packs a marketing punch which could help drive\n>             > adoption. The feature is only useful if/when broadly adopted.\n> \n>             I'm very against the name \"reusable addresses\" and strongly\n>             belive we\n>             should stick with the name stealth addresses.\n> \n>             You gotta look at it from the perspective of a user; lets\n>             take standard\n>             pay-to-pubkey-hash addresses: I can tell my wallet to pay\n>             one as many\n>             times as I want and everything works just great. I also can\n>             enter the\n>             address on blockchain.info <http://blockchain.info>'s search\n>             box, and every transaction related\n>             to the address, and the balance of it, pops up immediately.\n> \n>             What is that telling me? A: Addresses starting with \"1\" are\n>             reusable. B:\n>             Transactions associated with them appear to be public knowledge.\n> \n>             Now I upgrade my wallet software and it says I now have a\n>             \"reusable\"\n>             address. My reaction is \"Huh? Normal addresses are reusable,\n>             what's\n>             special about this weird reusable address thing that my\n>             buddy Bob's\n>             wallet software couldn't pay.\" I might even try to enter in\n>             a \"reusable\"\n>             address in blockchain.info <http://blockchain.info>, which\n>             won't work, and I'll just figure\n>             \"must be some new unsupported thing\" and move on with my life.\n> \n>             On the other hand, suppose my wallet says I now have\n>             \"stealth address\"\n>             support. I'm going to think \"Huh, stealth? I guess that\n>             means privacy\n>             right? I like privacy.\" If I try searching for a stealth\n>             address on\n>             blockchain.info <http://blockchain.info>, when it doesn't\n>             work I might think twig on \"Oh right!\n>             It said stealth addresses are private, so maybe the\n>             transactions are\n>             hidden?\" I might also think \"Maybe this is like\n>             stealth/incognito mode\n>             in my browser? So like, there's no history being kept for\n>             others to\n>             see?\" Regardless, I'm going to be thinking \"well I hear\n>             scary stuff\n>             about Bitcoin privacy, and this stealth thing sounds like\n>             it's gonna\n>             help, so I should learn more about that\"\n> \n>             Finally keep in mind that stealth addresses have had a tonne\n>             of very\n>             fast, and very wide reaching PR. The name is in the public\n>             conciousness\n>             already, and trying to change it now just because of vague bad\n>             associations is going to throw away the momentum of that\n>             good PR and\n>             slow down adoption. Last night I was at the Toronto Bitcoin\n>             Meetup and I\n>             based on conversations there with people there, technical and\n>             non-technical, almost everyone had heard about them and\n>             almost everyone\n>             seemed to understand the basic idea of why they were a good\n>             thing. That\n>             just wouldn't have happened with a name that tried to hide\n>             what stealth\n>             addresses were for, and by changing the name now we risk\n>             people not\n>             making the connection when wallet software gets upgraded to\n>             support\n>             them.\n> \n>             --\n>             'peter'[:-1]@petertodd.org <http://petertodd.org>\n>             0000000000000001b0e0ae7ef97681ad77188030b6c791aef304947e6f524740\n> \n>             ------------------------------------------------------------------------------\n>             CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>             Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>             Critical Workloads, Development Environments & Everything In\n>             Between.\n>             Get a Quote or Start a Free Trial Today.\n>             http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>             _______________________________________________\n>             Bitcoin-development mailing list\n>             Bitcoin-development at lists.sourceforge.net\n>             <mailto:Bitcoin-development at lists.sourceforge.net>\n>             https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n>         ------------------------------------------------------------------------------\n>         CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>         Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>         Critical Workloads, Development Environments & Everything In\n>         Between.\n>         Get a Quote or Start a Free Trial Today.\n>         http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>         _______________________________________________\n>         Bitcoin-development mailing list\n>         Bitcoin-development at lists.sourceforge.net\n>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today. \n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG/MacGPG2 v2.0.22 (Darwin)\nComment: GPGTools - https://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niF4EAREKAAYFAlLZj5cACgkQBJ8cMDO159YxKQEAh8QHHgMaL1IVvfYROU0yKG89\nAp1byTpAvt/+O5chTGQBAK4K+DfUOOkaMvUmssWIVsLQ56xKxsuzZiIJXF2yPI0g\n=fcYD\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-17T14:46:02",
                "message_text_only": "On Fri, Jan 17, 2014 at 10:15:40AM +0100, Mike Hearn wrote:\n> I must say, this shed is mighty fine looking. It'd be a great place to\n> store our bikes. But, what colour should we paint it?\n\nI think we should paint it this colour:\n\n    They had uncovered what seemed to be the side of a large coloured\n    globule embedded in the substance. The colour, which resembled some\n    of the bands in the meteor's strange spectrum, was almost impossible\n    to describe; and it was only by analogy that they called it colour\n    at all.  Its texture was glossy, and upon tapping it appeared to\n    promise both brittle ness and hollowness. One of the professors gave\n    it a smart blow with a hammer, and it burst with a nervous little\n    pop. Nothing was emitted, and all trace of the thing vanished with\n    the puncturing. It left behind a hollow spherical space about three\n    inches across, and all thought it probable that others would be\n    discovered as the enclosing substance wasted away.\n\nI think it really gets to the core of my feelings about this naming\ndiscussion.\n\n> How about we split the difference and go with \"privacy address\"? As Peter\n> notes, that's what people actually like and want. The problem with stealth\n> is it's got strong connotations with American military hardware and perhaps\n> thieves sneaking around in the night:\n> \n>    https://www.google.com/search?tbm=isch&q=stealth\n\nWOW! AWESOME KICK-ASS PICS!\n\nCome to think of it, I could have called it \"incognito addresses\" - a\nterm nice enough that Google and Firefox use it in their browsers - but\nwhat's done is done and any further discussion about this is just going\nto confuse the public. Remember that in the long run all this stuff will\nbe hidden behind payment protocols anyway, and users *won't even know*\nthat under the hood a stealth address is being used, making the name\njust a technical detail. For now though, lets use the good PR and get\nsome early adopters on board.\n\nHowever, the term 'incognito' probably would be a good one to use within\nwallet software itself to describe what it's doing when the user clicks\nthe \"I want my transactions to be private\" setting - there are after all\nfundemental bandwidth-privacy trade-offs in the threat model supposed by\nboth prefix and bloom filters. In this instance the term isn't going to\ngo away.\n\n\nAnyway, back to work: For the actual address format I strongly think we\nneed to ensure that it can be upgrading in a backwards compatible way.\nThis means we have to be able to add new fields - for instance if\nGregory's ideas for different ways of doing the SPV-bait came to\nfruition. Given that \"addresses\" aren't something that should stay\nuser-visible forever, thoughts on just making the actual data a protocol\nbuffers object?\n\nSecond question: Any performance figures yet on how efficient scanning\nthe blockchain for matching transactions actually is? I'd like to get an\nidea soon for both desktop and smartphone wallets so we can figure out\nwhat kind of trade-offs users might be forced into in terms of prefix\nlength.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001c9b372ed519ecc6d41c10b42a7457d1ca5acd560a535596b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/588e739e/attachment.sig>"
            },
            {
                "author": "Ben Davenport",
                "date": "2014-01-17T19:21:24",
                "message_text_only": "Well, at least we don't have to worry about cache invalidation.\n\nBen\n\n\nOn Fri, Jan 17, 2014 at 6:46 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Fri, Jan 17, 2014 at 10:15:40AM +0100, Mike Hearn wrote:\n> > I must say, this shed is mighty fine looking. It'd be a great place to\n> > store our bikes. But, what colour should we paint it?\n>\n> I think we should paint it this colour:\n>\n>     They had uncovered what seemed to be the side of a large coloured\n>     globule embedded in the substance. The colour, which resembled some\n>     of the bands in the meteor's strange spectrum, was almost impossible\n>     to describe; and it was only by analogy that they called it colour\n>     at all.  Its texture was glossy, and upon tapping it appeared to\n>     promise both brittle ness and hollowness. One of the professors gave\n>     it a smart blow with a hammer, and it burst with a nervous little\n>     pop. Nothing was emitted, and all trace of the thing vanished with\n>     the puncturing. It left behind a hollow spherical space about three\n>     inches across, and all thought it probable that others would be\n>     discovered as the enclosing substance wasted away.\n>\n> I think it really gets to the core of my feelings about this naming\n> discussion.\n>\n> > How about we split the difference and go with \"privacy address\"? As Peter\n> > notes, that's what people actually like and want. The problem with\n> stealth\n> > is it's got strong connotations with American military hardware and\n> perhaps\n> > thieves sneaking around in the night:\n> >\n> >    https://www.google.com/search?tbm=isch&q=stealth\n>\n> WOW! AWESOME KICK-ASS PICS!\n>\n> Come to think of it, I could have called it \"incognito addresses\" - a\n> term nice enough that Google and Firefox use it in their browsers - but\n> what's done is done and any further discussion about this is just going\n> to confuse the public. Remember that in the long run all this stuff will\n> be hidden behind payment protocols anyway, and users *won't even know*\n> that under the hood a stealth address is being used, making the name\n> just a technical detail. For now though, lets use the good PR and get\n> some early adopters on board.\n>\n> However, the term 'incognito' probably would be a good one to use within\n> wallet software itself to describe what it's doing when the user clicks\n> the \"I want my transactions to be private\" setting - there are after all\n> fundemental bandwidth-privacy trade-offs in the threat model supposed by\n> both prefix and bloom filters. In this instance the term isn't going to\n> go away.\n>\n>\n> Anyway, back to work: For the actual address format I strongly think we\n> need to ensure that it can be upgrading in a backwards compatible way.\n> This means we have to be able to add new fields - for instance if\n> Gregory's ideas for different ways of doing the SPV-bait came to\n> fruition. Given that \"addresses\" aren't something that should stay\n> user-visible forever, thoughts on just making the actual data a protocol\n> buffers object?\n>\n> Second question: Any performance figures yet on how efficient scanning\n> the blockchain for matching transactions actually is? I'd like to get an\n> idea soon for both desktop and smartphone wallets so we can figure out\n> what kind of trade-offs users might be forced into in terms of prefix\n> length.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000001c9b372ed519ecc6d41c10b42a7457d1ca5acd560a535596b\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/f1767ee8/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-01-18T04:55:25",
                "message_text_only": "*Avoiding ECDH calcs on every blockchain transaction (and avoiding the\nprefix thing):*\n\nCan we skip the whole ECDSA/ECDH thing, and use the second key pair for\nencryption instead?  Then we don't need any ephemeral keys.  We use the\nmuch simpler scheme like I mentioned before (just root keys and\nmultpliers), but instead of requesting a multiplier from the person\nreceiving the money, the payer can create their own multiplier and\nencrypt it into an OP_RETURN msg (using the secondary public key of the\nreceiver).  When they do this, they append a deterministic identifier to\nit, so that the receiver can immediately identify it upon decryption.\n\nBasically, the receiver simply attempts decryption of every OP_RETURN\nmessage, and if the identifier is there, they immediately know that the\ntx is theirs, and that the other bytes of the decrypted message is the\nmultiplier used.\n\nOf course, using something like ECIES and forcing the receiver to\nattempt decryption of every OP_RETURN tx may not be any faster than the\nECDH we've already talked about here.  But with this, we are not tied to\nany particular crypto.  Isn't there a much faster asymmetric scheme that\nwe can use?  I've heard people talk about ed25519, though I'm not sure\nit can be used for encryption.  I'd bet money there is an asymmetric\n_/encryption/_//algorithm that would be fast enough to not burden the\nreceiver.\n\nHere's how I envision it:\n\n--Alice gives out her business card that has public key X (BIP32 root),\nand public key Y (fastCrypto)\n--Bob generates a random 32-byte nonce, and EC-multiplies Alice's public\nkey by it.   He prepares a transaction sending coins to that address (Z)\n--Bob also computes a deterministic identifier, perhaps hash(pubKeyX ||\naddrZ)[8:].  Bob appends the those 8 bytes to the multiplier, and\nencrypts all of it with Alice's fastCrypto key, Y.   He puts that\nmessage in the OP_RETURN output.\n--Alice's wallet will attempt decryption of every OP_RETURN message. \nFirst she computes hash(pubKeyX, addrZ)[8:], and then decrypts the\nmessage with the fastCrypto private key.  If the tx is actually hers,\nthe last 8 bytes will match the identifier, and she knows to use the\nother 32 bytes as a multiplier.  If it doesn't, it's irrelevant to her\nand she moves on.\n\n[**Should probably use 24-byte values for the multipliers (or hashes of\n24-byte values), so that adding 8 bytes makes the whole message an even\n32 bytes which is better for encryption]\n\nDoesn't this have the exact same properties as the original proposal\n(including compatibility with CoinJoin)?  But it all depends on having\nfast asymmetric encryption.\n\n-Alan\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/ef9e2937/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-18T05:09:42",
                "message_text_only": "On Fri, Jan 17, 2014 at 8:55 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> Isn't there a much faster asymmetric scheme that we can use?  I've heard people talk about ed25519, though I'm not sure it can be used for encryption.\n\nDoing ECDH with our curve is within a factor of ~2 of the fastest\nencryption available at this security level, AFAIK.  And separate\nencryption would ~double the amount of data vs using the ephemeral key\nfor derivation.\n\nUsing another cryptosystem would mandate carry around additional code\nfor a fast implementation of that cryptosystem, which wouldn't be\nfantastic.\n\nSo I'm not sure much can be improved there."
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-18T23:12:58",
                "message_text_only": "> On Fri, Jan 17, 2014 at 8:55 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n>> Isn't there a much faster asymmetric scheme that we can use?  I've heard people talk about ed25519, though I'm not sure it can be used for encryption.\n> \n> Doing ECDH with our curve is within a factor of ~2 of the fastest\n> encryption available at this security level, AFAIK.  And separate\n> encryption would ~double the amount of data vs using the ephemeral key\n> for derivation.\n> \n> Using another cryptosystem would mandate carry around additional code\n> for a fast implementation of that cryptosystem, which wouldn't be\n> fantastic.\n> \n> So I'm not sure much can be improved there.\n\nIn the case where payment is being sent only to Q1, and Q2 is for discovery only, perhaps we could use a 160-bit curve for d2/Q2 and e/P resulting in 20 byte vs 32 bytes in the OP_RETURN, and of course faster multiplication. \n\n80-bits of security I assume still greatly exceeds the actual level of privacy you get with the overall solution, and since Q2 is never protecting actual funds...\n\nBut if it's a \"real weakening\" of the privacy then definitely not worth it, and even the added complexity of another curve seems possibly not worth it..."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-18T23:50:41",
                "message_text_only": "On Sat, Jan 18, 2014 at 3:12 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n> In the case where payment is being sent only to Q1, and Q2 is for discovery only, perhaps we could use a 160-bit curve for d2/Q2 and e/P resulting in 20 byte vs 32 bytes in the OP_RETURN, and of course faster multiplication.\n>\n> 80-bits of security I assume still greatly exceeds the actual level of privacy you get with the overall solution, and since Q2 is never protecting actual funds...\n>\n> But if it's a \"real weakening\" of the privacy then definitely not worth it, and even the added complexity of another curve seems possibly not worth it...\n\nWell super-fast hand optimized code for (your choice of) 160 bit curve\nmay not ever exist, making it slower in practice. Plus the extra code\nto carry around even if it does exist\u2026"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-20T11:08:47",
                "message_text_only": "On Sat, Jan 18, 2014 at 05:12:58PM -0600, Jeremy Spilman wrote:\n> \n> \n> > On Fri, Jan 17, 2014 at 8:55 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> >> Isn't there a much faster asymmetric scheme that we can use?  I've heard people talk about ed25519, though I'm not sure it can be used for encryption.\n> > \n> > Doing ECDH with our curve is within a factor of ~2 of the fastest\n> > encryption available at this security level, AFAIK.  And separate\n> > encryption would ~double the amount of data vs using the ephemeral key\n> > for derivation.\n> > \n> > Using another cryptosystem would mandate carry around additional code\n> > for a fast implementation of that cryptosystem, which wouldn't be\n> > fantastic.\n> > \n> > So I'm not sure much can be improved there.\n> \n> In the case where payment is being sent only to Q1, and Q2 is for discovery only, perhaps we could use a 160-bit curve for d2/Q2 and e/P resulting in 20 byte vs 32 bytes in the OP_RETURN, and of course faster multiplication. \n> \n> 80-bits of security I assume still greatly exceeds the actual level of privacy you get with the overall solution, and since Q2 is never protecting actual funds...\n> \n> But if it's a \"real weakening\" of the privacy then definitely not worth it, and even the added complexity of another curve seems possibly not worth it...\n\nKeep in mind that Bitmessage uses the same ECDH mechanism as what\nstealth addresses will use. They seem to get decent enough performance\nfrom it for a use-case not-unlike that of a Bitcoin wallet.\n\nIn any case I'm interested in knowing actual performance numbers for it;\nlast I talked to Kyle Drake he said he was working on getting ECDH\nnumbers on Javascript, probably the slowest possible implementation of\nthe idea. As for send to stealth addresses using prefixes, he's\nconfirmed that you'll be able to do that will well under a second to\nbrute-force the prefixes with the proposed OP_RETURN mechanism even with\nrather long 8-bit prefixes.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000190a2900f1a25c507a999fa11116f7bd0126618c1ebc4f5fb\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/69317ce0/attachment.sig>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-13T19:53:19",
                "message_text_only": "> > Likewise, I could attach a payment request to an email and send it to you,\n> > and now you can pay me whenever you want forever.\n> \n> That certainly sounds like a plausible use case.  You do still have\n> the problem that e-mail is an insecure channel, but it's no worse than\n> exchanging Bitcoin addreses over e-mail as things stand at the\n> moment.\n\nOn further reflection, I'm not sure I understand this use case of the\npayment protocol.  Since a PaymentRequest currently contains the\nOutputs that specify the addresses to send to, reusing a\nPaymentRequest like this without using stealth addresses implies\naddress reuse.\n\n(Granted there are alternative solutions to stealth addresses, such as\na BIP32-style derivation.)\n\nroy"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-13T19:57:33",
                "message_text_only": ">\n> On further reflection, I'm not sure I understand this use case of the\n> payment protocol.  Since a PaymentRequest currently contains the\n> Outputs that specify the addresses to send to, reusing a\n> PaymentRequest like this without using stealth addresses implies\n> address reuse.\n\n\nYes indeed ...... which is why we're talking about extending the protocol\n(in a future version! the first version isn't even out yet!).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/21032b84/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-13T20:01:05",
                "message_text_only": "rOn Mon, Jan 13, 2014 at 08:57:33PM +0100, Mike Hearn wrote:\n> >\n> > On further reflection, I'm not sure I understand this use case of the\n> > payment protocol.  Since a PaymentRequest currently contains the\n> > Outputs that specify the addresses to send to, reusing a\n> > PaymentRequest like this without using stealth addresses implies\n> > address reuse.\n> \n> \n> Yes indeed ...... which is why we're talking about extending the protocol\n> (in a future version! the first version isn't even out yet!).\n\nYes, sorry, I miscontrued the thread here and now see that your\nmessage was exactly talking about using stealth addresses within the\npayment protocol.\n\nSorry for the confusion.\n\nroy"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-13T19:40:50",
                "message_text_only": "On Mon, Jan 13, 2014 at 01:52:25AM -0800, Gregory Maxwell wrote:\n> On Sun, Jan 12, 2014 at 1:18 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> > No, please. Make it easy for non-geeks, extend the payment protocol, or\n> > we'll spend the next two years writing code that tries to ignore linebreaks\n> > and spaces and changing <input> elements in HTML forms to <textarea> ....\n> \n> However, if you're able to use the payment protocol then you probably\n> don't need stealth addresses to prevent reuse.\n\nI definitely think this is a case that should be addressed better than\nat present.\n\nTo consider a concrete use case, imagine I wish to be able to give my\nfriends and acquaintances a paper business card with a QR code on it,\nthat they can use to make payments to me.  I don't own a domain or any\nkind of X.509 certificate and I don't run an HTTP server.  I don't\nfeel comfortable with a solution that requires me to trust a third\nparty to complete the payments.\n\nAt the moment, I can give them a business card with a Bitcoin address.\nBeing able to give out a business card with a stealth address would be\na major advance.\n\nroy"
            },
            {
                "author": "Drak",
                "date": "2014-01-13T19:44:13",
                "message_text_only": "On 13 January 2014 19:40, Roy Badami <roy at gnomon.org.uk> wrote:\n\n> At the moment, I can give them a business card with a Bitcoin address.\n> Being able to give out a business card with a stealth address would be\n> a major advance.\n\n\nMy thoughts exactly.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/488b025d/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-01-13T19:59:08",
                "message_text_only": "How is this different from the proposal I have made?\n\nYou distribute the root public key (but not chaincode!) of a BIP32\nbranch.  You can put your root key on a business card if you want.  Then\nwhen someone wants to pay you, you simply give them the multiplier and\nroot key (they already have the root key, but should verify).  The\nmultiplier does not reveal the chaincode, thus keeping it private, but\nit does allow them to confirm that the final address they are paying is\nderived from that root key they know belongs to you (\"Please pay address\nX; oh btw, X=rootKey*mult\").\n\nYou can /choose/ to reveal that a given payment address is linked to\nyour root key without any compromise of privacy.  Or you can choose to\nignore it and just give them a bare address the old way and still\nmaintain privacy.  What advantages does \"stealth addresses\" have over\nthis scheme?  You could extend it using some kind of deterministic\nsub-branching and/or ECDH to create multiple payment addresses without\nquerying the payee. \n\nI had planned to implement this system and push for people to accept it\nbecause I don't see any downsides to it.  It can easily be integrated\ninto a WoT (with signed root keys), or CA system piggybacking on SSL.\n\n-Alan\n\n\nOn 01/13/2014 02:44 PM, Drak wrote:\n> On 13 January 2014 19:40, Roy Badami <roy at gnomon.org.uk\n> <mailto:roy at gnomon.org.uk>> wrote:\n>\n>     At the moment, I can give them a business card with a Bitcoin address.\n>     Being able to give out a business card with a stealth address would be\n>     a major advance.\n>\n>\n> My thoughts exactly.\n>\n> Drak \n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today. \n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/85d58fe9/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-13T20:10:56",
                "message_text_only": "On Mon, Jan 13, 2014 at 11:59 AM, Alan Reiner <etotheipi at gmail.com> wrote:\n> Then when someone\n> wants to pay you, you simply give them the multiplier and root key (they\n> already have the root key, but should verify).\n[...]\n> What\n> advantages does \"stealth addresses\" have over this scheme?  You could extend\n> it using some kind of deterministic sub-branching and/or ECDH to create\n> multiple payment addresses without querying the payee.\n\nThe stealth address stuff is the ECDH to create multiple payment\naddresses without querying the payee.\n\n\nUh while I'm responding again, what I'd discussed with Peter Todd in\nIRC used two EC points in the stealth address. One for the payment and\none for the ECDH.  The reason to use two is that it makes delegating\ndetection possible and so you don't have to have you spending keys\nonline to even detect these payments.  Why'd that get dropped?\n\nI don't think this is a good idea if you have to constantly keep your\nspending key(s) online even to detect payments, even with the limited\nuse-cases envisioned."
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-13T20:15:10",
                "message_text_only": "On Mon, Jan 13, 2014 at 12:10:56PM -0800, Gregory Maxwell wrote:\n> Uh while I'm responding again, what I'd discussed with Peter Todd in\n> IRC used two EC points in the stealth address. One for the payment and\n> one for the ECDH.  The reason to use two is that it makes delegating\n> detection possible and so you don't have to have you spending keys\n> online to even detect these payments.  Why'd that get dropped?\n\nI mentioned it again in another email; I just forgot to include it in my\nfinal write-up.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000023d5a8bbe131414328a6c50a2741933ba03775afd3c3db395\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/276bfc39/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-13T22:02:00",
                "message_text_only": "> Uh while I'm responding again, what I'd discussed with Peter Todd in\n> IRC used two EC points in the stealth address. One for the payment and\n> one for the ECDH.  The reason to use two is that it makes delegating\n> detection possible and so you don't have to have you spending keys\n> online to even detect these payments.  Why'd that get dropped?\n\nI think this is exactly what I've implemented.\n\nI decided to put both pubKeys in a 2-of-2 multisig, instead of keeping one of the pubKeys in the OP-RETURN, to prevent a malicious sender from triggering false positives on your online detection key when the funds are actually still fully controlled by the payer.\n\nYou can still have a false positive (only 1 of 2 keys actually yours) but the funds would be trapped so it's unlikely anyone would do it. \n\nCan you take a look at the Gist and TXs on TestNet I sent out, and see if that's in line with what you expected?\n\nI would also greatly appreciate if you could review the discussion around doing two ECDH operations with a single ephemeral key.\n\nThanks!\n--Jeremy"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-14T14:19:08",
                "message_text_only": "On Mon, Jan 13, 2014 at 02:02:00PM -0800, Jeremy Spilman wrote:\n> \n> > Uh while I'm responding again, what I'd discussed with Peter Todd in\n> > IRC used two EC points in the stealth address. One for the payment and\n> > one for the ECDH.  The reason to use two is that it makes delegating\n> > detection possible and so you don't have to have you spending keys\n> > online to even detect these payments.  Why'd that get dropped?\n> \n> I think this is exactly what I've implemented.\n> \n> I decided to put both pubKeys in a 2-of-2 multisig, instead of keeping one of the pubKeys in the OP-RETURN, to prevent a malicious sender from triggering false positives on your online detection key when the funds are actually still fully controlled by the payer.\n> \n> You can still have a false positive (only 1 of 2 keys actually yours) but the funds would be trapped so it's unlikely anyone would do it. \n\nHow would they trigger false positives? The payee recovers the nonce\nwith ECDH from the payor's ephemereal pubkey and their online detection\nsecret key. They use BIP32 public derivation with their offline spending\npubkey(s), if the derived pubkeys match the actual scriptPubKey they\nknow the output is spendable by them. I don't see how that can go wrong.\n\n-- \n'peter'[:-1]@petertodd.org\n000000007dd7a87aec311fb7fb13770f54edf628e6976f8c6091a5b2638878a7\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/7e3c7857/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-14T19:12:40",
                "message_text_only": "On Tue, 14 Jan 2014 06:19:08 -0800, Peter Todd <pete at petertodd.org> wrote:\n\n> On Mon, Jan 13, 2014 at 02:02:00PM -0800, Jeremy Spilman wrote:\n>> I decided to put both pubKeys in a 2-of-2 multisig, instead of keeping  \n>> one of the pubKeys in the OP-RETURN, to prevent a malicious sender from  \n>> triggering false positives on your online detection key when the funds  \n>> are actually still fully controlled by the payer.\n>>\n>> You can still have a false positive (only 1 of 2 keys actually yours)  \n>> but the funds would be trapped so it's unlikely anyone would do it.\n>\n> How would they trigger false positives? The payee recovers the nonce\n> with ECDH from the payor's ephemereal pubkey and their online detection\n> secret key. They use BIP32 public derivation with their offline spending\n> pubkey(s), if the derived pubkeys match the actual scriptPubKey they\n> know the output is spendable by them. I don't see how that can go wrong.\n>\n\nRight now I have this:\n\n   byte[] e = EC.NewPrivateKey();\n   byte[] P = EC.GetPublicKey(e, compressed: true);\n   byte[] S1 = EC.DH(e, Q1);\n   byte[] S2 = EC.DH(e, Q2);\n   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S1));\n   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S2));\n   stealthTx.Vout.Add(TxOut.PayToMultiSig(Util.Amount(\".995\"), 2, 2, q1New,  \nq2New));\n   stealthTx.Vout.Add(TxOut.OpReturn(P));\n\nIn this case, you can scan with d2, calculate S2, and matching payments  \nwill have the right 'q2New'. But you need to check again offline with d1  \nsince it's a separate shared secret.\n\nMaybe you are saying:\n\n   byte[] S = EC.DH(e, Q2);\n   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S));\n   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S));\n\nBut the payment would have (q2New - q1New) == (Q2 - Q1), so I think not  \nentirely stealth? OK, let's fix that by adding a counter to the hash  \nfunction...\n\n   byte[] S = EC.DH(e, Q2);\n   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S || 1));\n   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S || 2));\n   stealthTx.Vout.Add(TxOut.PayToMultiSig(Util.Amount(\".995\"), 2, 2, q1New,  \nq2New));\n   stealthTx.Vout.Add(TxOut.OpReturn(P));\n\nThis is assuming we want to put q2New somewhere into the transaction,  \nwhich, is it even required?\n\n   byte[] S = EC.DH(e, Q2);\n   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S));\n   stealthTx.Vout.Add(TxOut.PayToPubKeyHash(Util.Amount(\".995\"), q1New);\n   stealthTx.Vout.Add(TxOut.OpReturn(P));\n\nI'll wait for ACK and then update my sample code."
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-14T20:48:06",
                "message_text_only": "On Tue, Jan 14, 2014 at 11:12:40AM -0800, Jeremy Spilman wrote:\n> Maybe you are saying:\n> \n>   byte[] S = EC.DH(e, Q2);\n>   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S));\n>   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S));\n> \n> But the payment would have (q2New - q1New) == (Q2 - Q1), so I think\n> not entirely stealth? OK, let's fix that by adding a counter to the\n> hash function...\n\nGood catch, yeah, use the master shared secret to derive per-pubkey\nsecrets.\n\n>   byte[] S = EC.DH(e, Q2);\n>   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S || 1));\n>   byte[] q2New = EC.PointAdd(Q2, Util.SingleSHA256(S || 2));\n>   stealthTx.Vout.Add(TxOut.PayToMultiSig(Util.Amount(\".995\"), 2, 2,\n> q1New, q2New));\n>   stealthTx.Vout.Add(TxOut.OpReturn(P));\n> \n> This is assuming we want to put q2New somewhere into the\n> transaction, which, is it even required?\n> \n>   byte[] S = EC.DH(e, Q2);\n>   byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S));\n>   stealthTx.Vout.Add(TxOut.PayToPubKeyHash(Util.Amount(\".995\"), q1New);\n>   stealthTx.Vout.Add(TxOut.OpReturn(P));\n\nWell like I said, you shouldn't force the txout to be exactly a 2-of-2\nmultisig - the recipient might be using a multi-factor wallet for\ninstance. So, if I understand your code, what you want is the following:\n\nbyte[] Q = <payee root pubkeys>;\nbyte[] Q_Scan = <may or may not be provided in Q>\nint m = <# of pubkeys required to redeem>;\nbyte[] S = EC.DH(e, Q_Scan);\n\nbyte[] qDerived[];\nfor (int = 0; i < len(Q); i++){\n    qDerived[i] = EC.PointAdd(Q[i], Util.SingleSHA256(S || i));\n}\n\n// Best to have a single canonical order re: anonymity set.\nqDerived = sorted(qDerived);\n\nif (len(Q) > 1){\n    stealthTx.Vout.Add(TxOut.PayToMultiSig(amount, m, len(Q), qDerived));\n} else {\n    stealthTx.Vout.Add(TxOut.PayToPubKeyHash(amount, qDerived[0]);\n}\nstealthTx.Vout.Add(TxOut.OpReturn(P));\n\n\nFinally, it would probably be better if the multisig output was wrapped\nin a P2SH output to better match the behavior of other wallets for the\nsake of a bigger anonymity set - seems that stuff that is implementing\nmultifactor wallets and escrow is using P2SH to do it rather than bare\nmultisig. Also there's quite a bit of support for making bare multisig\nnot IsStandard() to discourage data-storage applications.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000010c474cd4e25913535ec1c166b6d43fbdd9a5f2726711ced7\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/7569f46b/attachment.sig>"
            },
            {
                "author": "Adam Back",
                "date": "2014-01-14T21:51:06",
                "message_text_only": "I saw in the math version you had said Q'=Q+H(S) and I presumed it was a\ntypo, but your code says the same thing.  I presume you meant Q'=Q+H(S)*G\nand therefore that Util.SingleSHA256() multiplies by G internally?\n\nAdam"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-14T22:34:01",
                "message_text_only": "On Tue, 14 Jan 2014 13:51:06 -0800, Adam Back <adam at cypherspace.org> wrote:\n> I saw in the math version you had said Q'=Q+H(S) and I presumed it was a\n> typo, but your code says the same thing.  I presume you meant Q'=Q+H(S)*G\n> and therefore that Util.SingleSHA256() multiplies by G internally?\n>\n> Adam\n>\n\nThanks for reviewing this. The relevant line:\n\n    byte[] q1New = EC.PointAdd(Q1, Util.SingleSHA256(S1));\n\nSingleSHA256 is a single application of SHA256 -- named so since 'SHA256'  \nfunctions in many Bitcoin libraries too often actually run DoubleSHA256.  \n32 bytes are returned.\n\nThe multiplication by 'G' that you mention is part of my EC.PointAdd...\n\nI should probably just publish all my code as MIT and be done with it ;-)\n\nThanks,\nJeremy\n\n\npublic static byte[] PointAdd(byte[] point, byte[] scalar, bool compressed  \n= true)\n{\n     var point1 = new OpenSSL.Crypto.EC.Point(EcGroup, point);\n\n     var num = OpenSSL.Core.BigNumber.FromArray(scalar);\n     var point2 = OpenSSL.Crypto.EC.Point.Multiply(EcGroup, num,  \nEcBnContext);\n\n     var result = point1.Add(point2, EcBnContext);\n\n     if (compressed)\n         return result.GetBytes(ConversionForm.Compressed);\n     else\n         return result.GetBytes(ConversionForm.Uncompressed);\n}"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-13T20:14:08",
                "message_text_only": "On Mon, Jan 13, 2014 at 02:59:08PM -0500, Alan Reiner wrote:\n> How is this different from the proposal I have made?\n> \n> You distribute the root public key (but not chaincode!) of a BIP32\n> branch.  You can put your root key on a business card if you want.  Then\n> when someone wants to pay you, you simply give them the multiplier and\n> root key (they already have the root key, but should verify).  The\n> multiplier does not reveal the chaincode, thus keeping it private, but\n> it does allow them to confirm that the final address they are paying is\n> derived from that root key they know belongs to you (\"Please pay address\n> X; oh btw, X=rootKey*mult\").\n> \n> You can /choose/ to reveal that a given payment address is linked to\n> your root key without any compromise of privacy.  Or you can choose to\n> ignore it and just give them a bare address the old way and still\n> maintain privacy.  What advantages does \"stealth addresses\" have over\n> this scheme?  You could extend it using some kind of deterministic\n> sub-branching and/or ECDH to create multiple payment addresses without\n> querying the payee. \n\nBasically stealth addresses *are* your scheme, using the blockchain as a\nlow or even no overhead communication channel for the payor to give the\npayee that multiplier without bidirectional communication.\n\nIn the business card example I can't easily take your business card and\njust send you some money without that transaction being linked to public\ninformation. (your business card)\n\n> I had planned to implement this system and push for people to accept it\n> because I don't see any downsides to it.  It can easily be integrated\n> into a WoT (with signed root keys), or CA system piggybacking on SSL.\n\nWoT is a perfect example of the problem: if you put BIP32 branch payment\ninfo into my OpenPGP key I can't pay you securely and reliably without\nmaking the transaction public. The best I can do is pick a nonce and pay\nX=rootKey*nonce, communicating to you the nonce later - this isn't\nreliable because if I or you lose the nonce the funds are lost.\n\nWith stealth addresses the user experience can be as simple as you\ntelling me on the phone \"hey! send me that 0.234 BTC you owe me!\", me\nclicking on \"Send to Alan Reiner (verified by PGP)\" (perhaps again on my\noff-line second factor device for a multi-sig wallet) and tellling you\n\"OK, sent\".\n\nEven if your phone has been wiretapped, the attacker still didn't learn\nexactly what transaction was actually used to make the payment - a big\nadvantage over per-tx nonce stuff.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000023d5a8bbe131414328a6c50a2741933ba03775afd3c3db395\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/a4b83e82/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-01-13T20:41:42",
                "message_text_only": "On 01/13/2014 03:14 PM, Peter Todd wrote:\n> On Mon, Jan 13, 2014 at 02:59:08PM -0500, Alan Reiner wrote:\n>> How is this different from the proposal I have made?\n>>\n>> You distribute the root public key (but not chaincode!) of a BIP32\n>> branch.  You can put your root key on a business card if you want.  Then\n>> when someone wants to pay you, you simply give them the multiplier and\n>> root key (they already have the root key, but should verify).  The\n>> multiplier does not reveal the chaincode, thus keeping it private, but\n>> it does allow them to confirm that the final address they are paying is\n>> derived from that root key they know belongs to you (\"Please pay address\n>> X; oh btw, X=rootKey*mult\").\n>>\n>> You can /choose/ to reveal that a given payment address is linked to\n>> your root key without any compromise of privacy.  Or you can choose to\n>> ignore it and just give them a bare address the old way and still\n>> maintain privacy.  What advantages does \"stealth addresses\" have over\n>> this scheme?  You could extend it using some kind of deterministic\n>> sub-branching and/or ECDH to create multiple payment addresses without\n>> querying the payee.\n>\n> Basically stealth addresses *are* your scheme, using the blockchain as a\n> low or even no overhead communication channel for the payor to give the\n> payee that multiplier without bidirectional communication.\n>\n> In the business card example I can't easily take your business card and\n> just send you some money without that transaction being linked to public\n> information. (your business card)\n\nIt's not public.  When I say \"please pay me\" I also say \"use this\nmultiplier\".  The multiplier isn't published, and it's not publicly\ndiscoverable without my wallet (or access to my email).  The address\nremains private between you and me.  As you said, it could be\ndiscoverable if the email is discoverable, but I'm not seeing how how\ncritical that really is.\n\nThere's a lot of complexity around this constraint (possibly involving\nnew/secondary private keys, extra outputs, relying on change outputs,\nand/or using 3rd parties to help look for transactions).  I'm not\nconvinced that what is being gained is really worth that extra complexity.\n\nBy contrast, what I proposed, that does require sending sending the\npayer a multiplier once, is easy to implement in any BIP 32 wallet,\ndoesn't require any special address formats, and achieves 98% of the\nsame benefits without any special computation.   I guess I'm just not\nconvinced that it's really necessary for people to be able to send\nothers payments without contacting them (and/or hiding the evidence a\npayment was made even if they communications were discovered).\n\n-Alan\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/d7ebb30c/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-13T20:47:21",
                "message_text_only": "On Mon, Jan 13, 2014 at 12:41 PM, Alan Reiner <etotheipi at gmail.com> wrote:\n> It's not public.  When I say \"please pay me\" I also say \"use this\n> multiplier\".  The multiplier isn't published, and it's not publicly\n> discoverable without my wallet (or access to my email).\n\nIf you have enough of a communications channel to do that you can just\ngive the person the finished address (authentication aside).\n\nThe idea here is to cover the cases where the communication is one way\nor nearly so.  Consider a donation address on a fully static webpage,\nin a forum signature or email address, or on a billboard. ... or where\nusers-being-users mean that the user isn't going to start up their\nwallet software to compute a new multiplier every time they give out\nan address no matter how much we whine at them."
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-13T21:02:18",
                "message_text_only": "> It's not public.  When I say \"please pay me\" I also say \"use this\n> multiplier\".\n\nSending a \"please pay me\" message is really great for business\ntransactions.\n\nBut I think the use case that Peter Todd mentions is actually *the*\nmost important currently under-addresesd use case:\n\n> With stealth addresses the user experience can be as simple as you\n> telling me on the phone \"hey! send me that 0.234 BTC you owe me!\",\n> me clicking on \"Send to Alan Reiner (verified by PGP)\" (perhaps\n> again on my off-line second factor device for a multi-sig wallet)\n> and tellling you \"OK, sent\".\n\nLots of work is being done on handling consumer-to-merchant\ntransactions.  BIP 70 does a good job of tackling the online purchase\ncase, and the work that Andreas Schildbach is doing with Bluetooth and\nNFC will improve the options for a payer in a physical PoS transaction\nwho might not have Internet connectivity on their smartphone.\n\nBut relatively little work (that I know of) is being done on\nnon-transactional personal payments - that is, being able to pay money\nto friends and other people that you have a face-to-face relationship\nwith.\n\nWhat I want... no need... is to be able to open my wallet, select a\nfriend from my address book, and transfer the $10 I owe them from the\nbar last night.\n\nI don't care - within reason - what process is involved in getting my\nfriend set up in my address book.  That may well requires two way\ncommunication (e.g. over NFC).  But once it's set up, I should be able\nto just select the payee from the address book and send them some\nfunds.  Anything else is just too complciated.\n\nI don't know if stealth addresses are the best solution to address\nthis use case, but AFAIK the only current solution to this use case is\nto store a long-lived Bitcoin address in the addresss book.\n\nroy"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-01-13T21:15:01",
                "message_text_only": "On 01/13/2014 04:02 PM, Roy Badami wrote:\n>> It's not public.  When I say \"please pay me\" I also say \"use this\n>> multiplier\".\n> Sending a \"please pay me\" message is really great for business\n> transactions.\n>\n> But I think the use case that Peter Todd mentions is actually *the*\n> most important currently under-addresesd use case:\n>\n>> With stealth addresses the user experience can be as simple as you\n>> telling me on the phone \"hey! send me that 0.234 BTC you owe me!\",\n>> me clicking on \"Send to Alan Reiner (verified by PGP)\" (perhaps\n>> again on my off-line second factor device for a multi-sig wallet)\n>> and tellling you \"OK, sent\".\n> Lots of work is being done on handling consumer-to-merchant\n> transactions.  BIP 70 does a good job of tackling the online purchase\n> case, and the work that Andreas Schildbach is doing with Bluetooth and\n> NFC will improve the options for a payer in a physical PoS transaction\n> who might not have Internet connectivity on their smartphone.\n>\n> But relatively little work (that I know of) is being done on\n> non-transactional personal payments - that is, being able to pay money\n> to friends and other people that you have a face-to-face relationship\n> with.\n>\n> What I want... no need... is to be able to open my wallet, select a\n> friend from my address book, and transfer the $10 I owe them from the\n> bar last night.\n>\n> I don't care - within reason - what process is involved in getting my\n> friend set up in my address book.  That may well requires two way\n> communication (e.g. over NFC).  But once it's set up, I should be able\n> to just select the payee from the address book and send them some\n> funds.  Anything else is just too complciated.\n>\n> I don't know if stealth addresses are the best solution to address\n> this use case, but AFAIK the only current solution to this use case is\n> to store a long-lived Bitcoin address in the addresss book.\n>\n> roy\n>\n\nFair enough.  I haven't spent much time thinking about that use case. \nThough, I question the feasibility of anything that requires O(N) EC\nmultiply operations/sec, where N is the total volume of transactions\nmoving over the network.  But I guess if the prefix is big enough, the\nscanning operations will remain feasible forever."
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-13T21:27:52",
                "message_text_only": "On Mon, Jan 13, 2014 at 04:15:01PM -0500, Alan Reiner wrote:\n> > I don't know if stealth addresses are the best solution to address\n> > this use case, but AFAIK the only current solution to this use case is\n> > to store a long-lived Bitcoin address in the addresss book.\n> >\n> > roy\n> >\n> \n> Fair enough.  I haven't spent much time thinking about that use case. \n> Though, I question the feasibility of anything that requires O(N) EC\n> multiply operations/sec, where N is the total volume of transactions\n> moving over the network.  But I guess if the prefix is big enough, the\n> scanning operations will remain feasible forever.\n\nWell that's the thing: the cost to find all stealth-address-using\npayments to you isn't O(n) transaction volume, it's O(n) anonymity set\nsize. I think we can make a pretty good argument that the anonymity set\npeople need is mostly fixed in size and has nothing to do with overall\ntx volume, so really we've got O(1) scaling.\n\nThere is a catch however: if you need the prefix to be against\nH(scriptPubKey) rather than scriptPubKey directly the sender needs to\ngrind the OP_RETURN output at 2^len(prefix) cost. Fortunately that\ngrinding can be done with hash operations rather than ECC - even if we\nneeded 32-bit prefixes eventually computing 32-bit hash collisions is\nplausible, and more reasonable 8-bit is quite doable now.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000013f56c73dbb82447ba01e303648109b2e7ea0adf6ca53a7ff\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/b70d93cc/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-14T12:10:51",
                "message_text_only": "On Mon, Jan 13, 2014 at 03:20:15PM -0800, Jeremy Spilman wrote:\n> On Mon, 13 Jan 2014 13:27:52 -0800, Peter Todd <pete at petertodd.org> wrote:\n> \n> >There is a catch however: if you need the prefix to be against\n> >H(scriptPubKey) rather than scriptPubKey directly the sender needs to\n> >grind the OP_RETURN output at 2^len(prefix) cost. Fortunately that\n> >grinding can be done with hash operations rather than ECC - even if we\n> >needed 32-bit prefixes eventually computing 32-bit hash collisions is\n> >plausible, and more reasonable 8-bit is quite doable now.\n> \n> I'll be updating my test code to support a prefix on the OP_RETURN\n> TxOut, for either where we expect to have an index on scriptPubKey,\n> or where we have an index on H(scriptPubKey) and have to grind with\n> a nonce.\n> \n> Where do we say what prefix we are targeting, or how many bits\n> should match with Q? I assume the only place to communicate this,\n> dare I say it, is in the address string.\n\nThat's exactly where you need to put it.\n\nIncidentally a prefix nonce, either direct or grind-style, is a bit of a\nprivacy leak by suggestion how long the prefix was in the original\nstealth address. Code should be written such that grinding routines\nstart at a random nonce, and nonces of any length are accepted. The\neasiest way to do that is to just stick the grind nonce at the end after\nthe 33 bytes of pubkey.\n\nI dunno yet what hashing algorithm to target for grinding. I'd assume\nSHA256^2 on the basis that it's identical to what the merkle tree uses\nand thus will have the same security properties in a committed index,\nbut I can see people pushing for the shorter 20-byte HASH160 too.\n\n> Also, for symmetric encryption of P in the OP_RETURN TxOut using a\n> key H(Q), what cipher did you have in mind? Since P is ephemeral and\n> random, I don't follow, why does encrypting it 'gives a slightly\n> larger anonymity set'?\n\nThe idea was to make the anonymity set include other uses of OP_RETURN\ntxouts, however Gregory Maxwell pointed out that it'd easily lead to a\nmuch reduced anonymity set because someone could trial decrypt the\nencrypted P and check if it was a valid pubkey. If you encrypted the\nfull 33 bytes that'd be a total disaster - only 1/256 candidate stealth\nkeys would work. There are ways to do it right, but it's tricky and\nthere may be other attacks I don't know about, so I'm inclined to just\ndrop that idea for now unless a professional cryptographer wants to take\nit on.\n\n> You made an interesting point in the original post that payer should\n> hold onto their ephemeral privKey 'e' corresponding to pubKey P if\n> they need to later prove the payment was actually sent to Q.\n\nYup. You can even use that pubkey to disambiguate/prove payments with\nTimo Hanke's pay-to-contract ideas by deriving it from some root and a\ncontract hash.\n\nConversely Amir Taaki pointed out on the unsystem list that once a nonce\nis agreed on, it can be used directly with BIP32 derivation so that\nfuture payments don't have to use an OP_RETURN txout. Interesting idea,\nalthough I worry that the statelessness advantage of stealth payments\ngets lost if you do that. Probably best to look at that one after an\ninitial implementation happens and we get some experience with them in\nthe real world - adding that can be done in a backwards compatible\nfashion.\n\n> Finally, I hope you can take a look at the Gist and sample Test-Net\n> TXs I sent out this morning. I just went back and re-read your\n> original post, and compared to what I implemented there are some\n> differences, I'd like to make sure you think it's on track.\n\nWill do.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001420349f2276e53e5b087faea67c7c40aa12383c416067364\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/8419ac67/attachment.sig>"
            },
            {
                "author": "joseph at vaughn.perling.com",
                "date": "2014-01-17T12:16:37",
                "message_text_only": "On naming, please allow consideration of \"Confidential address\".\nLess conflation with \"private key\", connotes confidence, and as the address is known to the transacting parties, it is a precisely accurate name.\n \nOne of the use cases for these will be in multinational corporate internal international settlement.  For a company to use bitcoin for its internal settlement and maintain confidence that competitors will not be able to suss out its transactions, these confidential addresses will be of great use.\n \n \nStealth connotes stealing, theft, hiding, fear, sneakiness, stealth bombers.  Maybe it is a good name, but not the best name.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/90d30b4b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Stealth Addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Roy Badami",
                "Eric Martindale",
                "Cameron Garnham",
                "joseph at vaughn.perling.com",
                "Adam Back",
                "Mike Hearn",
                "Peter Todd",
                "Jeremy Spilman",
                "Gregory Maxwell",
                "Alan Reiner",
                "Mark Friedenbach",
                "Gary Rowe",
                "Jeff Garzik",
                "Natanael",
                "Johnathan Corgan",
                "Gavin Andresen",
                "Odinn Cyberguerrilla",
                "Ben Davenport",
                "Drak"
            ],
            "messages_count": 75,
            "total_messages_chars_count": 165444
        }
    },
    {
        "title": "[Bitcoin-development] Static addresses on chains encouraging address *RE* use",
        "thread_messages": [
            {
                "author": "Troy Benjegerdes",
                "date": "2014-01-15T22:38:15",
                "message_text_only": "Let's suppose I have an alternate blockchain that specifically encourages\naddress *RE* use, and charges those that desire privacy higher transaction\nfees to cover the network cost in computation and storage.\n\nDoes the static address privacy system still work, or does it fall apart\nbecause 95% of the transactions re-use addresses, making them 'effectively \nstatic', just like my DHCP IP that has not changed as long as I've used it?\n\n\nOn Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:\n> \"static address\" seems like a reasonable attempt at describing intended\n> use/direction.\n> \n> \n> \n> On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> \n> > On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport <bendavenport at gmail.com>\n> > wrote:\n> > > But may I suggest we consider changing the name \"stealth address\" to\n> > > something more neutral?\n> >\n> > ACK.  Regardless of the 'political' overtones, I think stealth is a\n> > little cringe-worthy.\n> >\n> > \"Private address\" would be fine if not for confusion with private-keys.\n> >\n> > \"Static address\" is perhaps the best in my view. (also helps improve\n> > awareness that normal addresses are intended to be more one-use-ness)\n> >"
            }
        ],
        "thread_summary": {
            "title": "Static addresses on chains encouraging address *RE* use",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1214
        }
    },
    {
        "title": "[Bitcoin-development] unlinakble static address? & spv-privacy (Re: Stealth Addresses)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2014-01-15T23:09:01",
                "message_text_only": "So I like static address name too.  In the write up for my variant I called\nit something less sexy than stealth \"unlinkable public address\":\n\nhttps://bitcointalk.org/index.php?topic=317835.msg4103530#msg4103530\n\n(there are 3 variants that are approximately the same thing).\n\nMaybe we could call it an unlinkable static address.  Otherwise static\naddresses are maybe too synonymous with reused addresses a bad practice we\nhave been complaining about users and wallet authors incorrectly doing.\n\nBut to explain, in Peter Todds (and Amir Taaki also?) variant stealth refers\nto an actual useful security criteria.  Stealth objective actually means\n\"looks like a normal bitcoin payment to the outside observer\".  You\ngenerally want that to be the case for fungibility reasons.  Its like\nbrowser cookie state, the more things that are unusual about your\ntransaction, the more your transactions identify you in the public\nblock-chain.  Statistics are cumulative so it matters.\n\n\nAnd is an actual element of stealthiness (hence the name) in this variant\nthat Peter Todd proposed, at least as an objective, though I think the\nstealthiness somewhat fails because the P parameter is extra and not present\nin a normal transaction.\n\nUnfortunately so far removing P and using an input in its stead breaks\nCoinJoin which is also necessary for fungibility.  Maybe there is another\nway to make an extended CoinJoin that can mix inputs and unlinkable static\naddresses.\n\n\nI was meaning to comment on the SPV privacy properties.\n\nFor full-node use these unlinkable static addresses have quite nice\nproperties.  It also nicely solves the problem of having to educate users\nand wallet authors to not reuse addresses.  But for SPV nodes they have no\ndirect-way to find the payments.  So then in Peter Todd's variant (maybe it\nwas suggested by Greg Maxwell?) there is a second address so that the SPV\nclient can delegate detection to a full node without giving it the private\nkey allowing it to spend!  (This is something analogous to bloom filtering). \nBut I think its moderately expensive for the full node because it has to do\na DH calculation per transaction and its not precomputable so there is IO\nper query.  (In the P version in fact only payments which are thereby\nreconizable as unlinkable static need to be processed).\n\nThen an artificial prefix is proposed to constrain the query to a subset,\nhowever that leaks to everyone so in some wayts its a worse privacy leak\nthan bloom filtering.  It can be used to rule out recipients and could be\nquite a powerful extra lever for statistical analysis.  (And also there is\nproposed a version of the prefix computed via brute-force to make it\nsomewhat stealthy still).\n\n\nSo I also am quite enthusiastic about the possiblity to fix this address\nreuse problem, but there remain a few open problems in my view, for SPV\nuses.  Not nay-saying, I spent quite a bit of time trying to solve this for\nmy variant, its a tricky problem, or basically we wouldnt have one-use\naddresses and bloom filtering.\n\n\nBut maybe its intereting enough already for full-node uses.  Many processors\nand businesses are full nodes.  Many power users run full-nodes  The data\nisnt lost, you just need to scan a full-node.\n\nIt could help the related problem of paying the wrong person.  Ie deposit\naddress given by merchant.  If the deposit address is static, and the used\naddress user derived from it, then that itself is an assurance to the user\nthat they are paying an address at least owned by the service.  (As opposed\nto someone who hacked the web site or MITM the link).  Of course for users\nprobably the main likelihood is they have malware on their machine, but that\nis what offline wallets are for.  A smartphone is maybe a little less\nhackable and could be trained to store the static address and warn if its\nnot the same as the last time they used the site.  (TOFU for bitcoin\naddresses, or at least be able to call someone you know who also uses the\nservice and compare static addresses).\n\nMaybe in the payment address case the service should choose the derivation\nfactor and communicate it and the client with the static address, as\nsuggeste by Alan Reiner because then it can also serve the function of\nallowing the service to tie the payment to the users account.\n\nPeople also mention payment protocol for certifying addresses however I\nthink it is useful to have address level TOFU / static to principal\nverification because it is simpler for harware wallets, maps to account\nnumber concept users understand, and doesnt rely on the CA infrastructure. \nAlso the typical payment protcol is talking about a message constructed by a\nweb app.  Thats millions of lines of web server, script language, db code\netc in play on an online server.  The static address private key would be\nairgapped from that mess.  \n\nMike Hearn proposed if I understand that you could something analogous and\nupload in batches signed payment protocol sub-messages from a different CA\ncertificate key.  But I think the above is simpler, and its useful to have\nsomething that works at the low level.  What we have now is like SSH without\nthe knownhosts cache.  Lets add it.  It can then play with the payment\nprotocol at the address level.\n\nAdam\n\nOn Wed, Jan 15, 2014 at 03:44:17PM -0500, Jeff Garzik wrote:\n>   \"static address\" seems like a reasonable attempt at describing intended\n>   use/direction.\n>\n>   On Wed, Jan 15, 2014 at 3:38 PM, Gregory Maxwell\n>   <[1]gmaxwell at gmail.com> wrote:\n>\n>   On Wed, Jan 15, 2014 at 12:22 PM, Ben Davenport\n>   <[2]bendavenport at gmail.com> wrote:\n>   > But may I suggest we consider changing the name \"stealth address\" to\n>   > something more neutral?\n>\n>     ACK.  Regardless of the 'political' overtones, I think stealth is a\n>     little cringe-worthy.\n>     \"Private address\" would be fine if not for confusion with\n>     private-keys.\n>     \"Static address\" is perhaps the best in my view. (also helps improve\n>     awareness that normal addresses are intended to be more\n>     one-use-ness)\n>\n>   -----------------------------------------------------------------------\n>   -------\n>   CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>   Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>   Critical Workloads, Development Environments & Everything In Between.\n>   Get a Quote or Start a Free Trial Today.\n>   [3]http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ost\n>   g.clktrk\n>   _______________________________________________\n>   Bitcoin-development mailing list\n>   [4]Bitcoin-development at lists.sourceforge.net\n>   [5]https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>   --\n>   Jeff Garzik\n>   Bitcoin core developer and open source evangelist\n>   BitPay, Inc.      [6]https://bitpay.com/\n>\n>References\n>\n>   1. mailto:gmaxwell at gmail.com\n>   2. mailto:bendavenport at gmail.com\n>   3. http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>   4. mailto:Bitcoin-development at lists.sourceforge.net\n>   5. https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>   6. https://bitpay.com/\n\n>------------------------------------------------------------------------------\n>CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>Critical Workloads, Development Environments & Everything In Between.\n>Get a Quote or Start a Free Trial Today.\n>http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-16T01:02:10",
                "message_text_only": "On Wed, 15 Jan 2014 15:09:01 -0800, Adam Back <adam at cypherspace.org> wrote:\n> I was meaning to comment on the SPV privacy properties.\n>\n> For full-node use these unlinkable static addresses have quite nice\n> properties.  It also nicely solves the problem of having to educate users\n> and wallet authors to not reuse addresses.  But for SPV nodes they have  \n> no direct-way to find the payments.  So then in Peter Todd's variant  \n> (maybe it was suggested by Greg Maxwell?) there is a second address so  \n> that the SPV\n> client can delegate detection to a full node without giving it the  \n> private key allowing it to spend!  (This is something analogous to bloom  \n> filtering).\n\nThe second pubKey is useful for delegating scanning, or even just being  \nable to scan for transactions yourself without keeping bitcoin-encumbered  \nprivate keys decrypted in memory. So even while running your own full node  \nthere are good reasons to use a second pubKey to derive the shared secret.\n\n> But I think its moderately expensive for the full node because it has to  \n> do a DH calculation per transaction and its not precomputable so there  \n> is IO\n> per query.  (In the P version in fact only payments which are thereby\n> reconizable as unlinkable static need to be processed).\n\nAnd of course, if you have multiple reuseable addresses, then you're doing  \nthis calculation separately to check each one.\n\nSo the load on a popular centralized service would be quite high, which  \nyou may consider a feature.\n\n>\n> Then an artificial prefix is proposed to constrain the query to a subset,\n> however that leaks to everyone so in some ways its a worse privacy leak\n> than bloom filtering.  It can be used to rule out recipients and could be\n> quite a powerful extra lever for statistical analysis.\n\nChoosing how many bits to put in the prefix may be difficult, particularly  \nif transaction load changes dramatically over time. 0 or 1 bits may be  \njust fine for a single user running their own node, whereas a central  \nservice might want 4 or 5 bits to keep their computation costs scalable.\n\nBut I think it's great people can choose how to trade privacy for  \ncomputation/bandwidth however they want, and services can compete to offer  \nmonitoring for 0+ bit prefixes.\n\n> (And also there is proposed a version of the prefix computed via\n> brute-force to make it somewhat stealthy still).\n\nI think in this case the hash grinding of the prefix would only being used  \nif thats how transactions are being indexed. I don't think it adds any  \nprivacy, it's just added work we're forced to do in order for the prefix  \nto work as designed. Peter, please correct me if I'm wrong.\n\n\n>\n> Maybe in the payment address case the service should choose the  \n> derivation factor and communicate it and the client with the static\n> address, as suggested by Alan Reiner because then it can also serve\n> the function of allowing the service to tie the payment to the users\n> account.\n\nI think any change which requires more than a single published public  \nmessage (e.g. a posting in a forum, or in a README.me in Github) should be  \nseen as solving an entirely different problem.\n\nIf you have directed communication from payee->payer, I think there's  \nsimply no reason to do it this way. (By \"this way\" I mean ECDH with  \nOP_RETURN P).\n\nWe could try to define a different reusable address type, for when you can  \nmake a single directed message from payer->payee, and in that case there's  \nprobably no need for ECDH or the prefix, like Alan's proposal.\n\nBut once you admit having that directed communication, then you are  \nswimming very close to the payment protocol."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-16T01:32:31",
                "message_text_only": "On Wed, Jan 15, 2014 at 5:02 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n> Choosing how many bits to put in the prefix may be difficult, particularly\n> if transaction load changes dramatically over time. 0 or 1 bits may be\n> just fine for a single user running their own node, whereas a central\n> service might want 4 or 5 bits to keep their computation costs scalable.\n\nIgnoring prefixes the cost for each reusable address is only a small\npercentage of the full node cost (rational: each transaction has one\nor more ECDSA signatures, and the derivation is no more expensive), so\nI would only expect computation to be an issue for large centralized\nservices. (non-full nodes suffer more from just the bandwidth impact).\n\nI'd point out that regardless of how long the desired prefix is, the\nencoded prefix should probably always be constant length in all\nreusable addresses. If you don't want a particular prefix then the\nsender should just pick random data for the rest of the space. There\nis no need to publish any additional distinguishing data in the form\nof how long the prefix is."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-01-18T17:44:52",
                "message_text_only": "On Wed, Jan 15, 2014 at 05:32:31PM -0800, Gregory Maxwell wrote:\n> On Wed, Jan 15, 2014 at 5:02 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n> > Choosing how many bits to put in the prefix may be difficult, particularly\n> > if transaction load changes dramatically over time. 0 or 1 bits may be\n> > just fine for a single user running their own node, whereas a central\n> > service might want 4 or 5 bits to keep their computation costs scalable.\n> \n> Ignoring prefixes the cost for each reusable address is only a small\n> percentage of the full node cost (rational: each transaction has one\n> or more ECDSA signatures, and the derivation is no more expensive), so\n> I would only expect computation to be an issue for large centralized\n> services. (non-full nodes suffer more from just the bandwidth impact).\n\nI have not seen anyone address my high-level question to (somewhat) complicated\nmechanisms to keep coin flows private.\n\nWho pays for it? From what I see it's going to double the amount of data \nneeded per address, further centralizing 'full' nodes. I'm fine if the NSA\nis paying for privacy (I actually trust them more than banks and advertisers),\nbut let's just be honest, okay?\n\nIf socializing the cost of privacy is Bitcoin's goal, and giving the benefits\nto a few that understand it and/or have the resources to determine privacy\nproviders that won't scam them, then say so, so I can get on with launching\na 'transparencycoin' with a modified code that explicitly ALWAYS re-uses\naddresses, and has miners and pools that charge more for addresses they have\nnever seen before. I bet it will be more distributed and have about half the\naverage transaction cost of Bitcoin, because most people *just don't care*\nabout privacy if they get cheap and/or free services.\n\n\n-- Troy, transparency advocate who is quite transparent that if you buy me\nfarmland, I'll shut up about transparency, because I'll be too busy growing\nfood and giving part of it away."
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-01-18T20:25:36",
                "message_text_only": "Like any other mechanism that puts extra data in the blockchain, the\nsender pays the fees.\n\nThis mechanism is to improve privacy for static addresses (donation\nlinks on websites and so on). I personally don't think it will be used\nnearly as much as BIP0032 or the payment protocol (both of which don't\nneed on-blockchain data), precisely because it increases the fees\nrequired to send funds, but this doesn't externalize costs anymore\nthan any other use of the blockchain does.\n\nPeople who don't care about privacy and want smallest cost and maximum\nconvenience already use SPV nodes. Their resource usage will not be\naffected in the least.\n\nOn Sat, Jan 18, 2014 at 12:44 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> On Wed, Jan 15, 2014 at 05:32:31PM -0800, Gregory Maxwell wrote:\n>> On Wed, Jan 15, 2014 at 5:02 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n>> > Choosing how many bits to put in the prefix may be difficult, particularly\n>> > if transaction load changes dramatically over time. 0 or 1 bits may be\n>> > just fine for a single user running their own node, whereas a central\n>> > service might want 4 or 5 bits to keep their computation costs scalable.\n>>\n>> Ignoring prefixes the cost for each reusable address is only a small\n>> percentage of the full node cost (rational: each transaction has one\n>> or more ECDSA signatures, and the derivation is no more expensive), so\n>> I would only expect computation to be an issue for large centralized\n>> services. (non-full nodes suffer more from just the bandwidth impact).\n>\n> I have not seen anyone address my high-level question to (somewhat) complicated\n> mechanisms to keep coin flows private.\n>\n> Who pays for it? From what I see it's going to double the amount of data\n> needed per address, further centralizing 'full' nodes. I'm fine if the NSA\n> is paying for privacy (I actually trust them more than banks and advertisers),\n> but let's just be honest, okay?\n>\n> If socializing the cost of privacy is Bitcoin's goal, and giving the benefits\n> to a few that understand it and/or have the resources to determine privacy\n> providers that won't scam them, then say so, so I can get on with launching\n> a 'transparencycoin' with a modified code that explicitly ALWAYS re-uses\n> addresses, and has miners and pools that charge more for addresses they have\n> never seen before. I bet it will be more distributed and have about half the\n> average transaction cost of Bitcoin, because most people *just don't care*\n> about privacy if they get cheap and/or free services.\n>\n>\n> -- Troy, transparency advocate who is quite transparent that if you buy me\n> farmland, I'll shut up about transparency, because I'll be too busy growing\n> food and giving part of it away.\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-20T11:11:44",
                "message_text_only": "On Sat, Jan 18, 2014 at 11:44:52AM -0600, Troy Benjegerdes wrote:\n> > Ignoring prefixes the cost for each reusable address is only a small\n> > percentage of the full node cost (rational: each transaction has one\n> > or more ECDSA signatures, and the derivation is no more expensive), so\n> > I would only expect computation to be an issue for large centralized\n> > services. (non-full nodes suffer more from just the bandwidth impact).\n> \n> I have not seen anyone address my high-level question to (somewhat) complicated\n> mechanisms to keep coin flows private.\n> \n> Who pays for it? From what I see it's going to double the amount of data \n> needed per address, further centralizing 'full' nodes. I'm fine if the NSA\n\nActually the exact encoding is still undetermined - other encodings I\nproposed in my original paper are the same size or even smaller than a\nstandard transaction.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000190a2900f1a25c507a999fa11116f7bd0126618c1ebc4f5fb\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/175dd35d/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-21T04:00:05",
                "message_text_only": "On Wed, 15 Jan 2014 17:32:31 -0800, Gregory Maxwell <gmaxwell at gmail.com>  \nwrote:\n> I'd point out that regardless of how long the desired prefix is, the\n> encoded prefix should probably always be constant length in all\n> reusable addresses.\n\nI might be misunderstanding, but I think prefix length must be specified  \nin the reusable address, however I agree the prefix actually published to  \nthe blockchain should be constant length.\n\n> If you don't want a particular prefix then the\n> sender should just pick random data for the rest of the space. There\n> is no need to publish any additional distinguishing data in the form\n> of how long the prefix is.\n\nLet's say the payee's reusable address is '<version> <prefix> <Q1> <Q2>  \n...', where <prefix> is 2 bytes. Without any length indicator. What's the  \npayer going to put on the blockchain? How would they know what the 'rest  \nof the space' is? They would have to put the whole <prefix> verbatim into  \nthe OP_RETURN without knowing how many bits of <prefix> the payee actually  \nwants to see there.\n\nIf instead, the address is '<version> <prefix> <prefixLen> <Q1> <Q2> ...'  \nwhere <prefix> is 2 bytes, and <prefixLen> is 1 byte, representing number  \nof bits of prefix that should be fixed.\n\nThen payer will know how much of <prefix> from the address should be taken  \nverbatim, and the rest of the two bytes would be replaced with random  \ndata, and exactly two bytes would be put in the OP_RETURN.\n\nIf <prefixLen> was zero, the 2 byte prefix in the reusable address must be  \nignored, and an entirely random 2 byte prefix would be put into the  \nOP_RETURN.\n\nI'm a bit worried about broken implementations copying the <prefix> from  \nthe reusable address into OP_RETURN when <prefixLen> is 0, and ending up  \nbasically identifying the payee. That's the only reason I can think of to  \nmake '<prefix> <prefixLen>' optional in the reusable address, to prevent  \nthe opportunity to screw it up. You would *still* put a 2-byte random  \nprefix in the OP_RETURN, even if the fields weren't in the address at all.  \nIt's just a minor concern though."
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-24T09:17:33",
                "message_text_only": "On Mon, Jan 20, 2014 at 08:00:05PM -0800, Jeremy Spilman wrote:\n> Let's say the payee's reusable address is '<version> <prefix> <Q1> <Q2>  \n> ...', where <prefix> is 2 bytes. Without any length indicator. What's the  \n> payer going to put on the blockchain? How would they know what the 'rest  \n> of the space' is? They would have to put the whole <prefix> verbatim into  \n> the OP_RETURN without knowing how many bits of <prefix> the payee actually  \n> wants to see there.\n> \n> If instead, the address is '<version> <prefix> <prefixLen> <Q1> <Q2> ...'  \n> where <prefix> is 2 bytes, and <prefixLen> is 1 byte, representing number  \n> of bits of prefix that should be fixed.\n> \n> Then payer will know how much of <prefix> from the address should be taken  \n> verbatim, and the rest of the two bytes would be replaced with random  \n> data, and exactly two bytes would be put in the OP_RETURN.\n> \n> If <prefixLen> was zero, the 2 byte prefix in the reusable address must be  \n> ignored, and an entirely random 2 byte prefix would be put into the  \n> OP_RETURN.\n> \n> I'm a bit worried about broken implementations copying the <prefix> from  \n> the reusable address into OP_RETURN when <prefixLen> is 0, and ending up  \n> basically identifying the payee. That's the only reason I can think of to  \n> make '<prefix> <prefixLen>' optional in the reusable address, to prevent  \n> the opportunity to screw it up. You would *still* put a 2-byte random  \n> prefix in the OP_RETURN, even if the fields weren't in the address at all.  \n> It's just a minor concern though.\n\nSomething to keep in mind is that it's quite likely that the indexes\navailable will be over H(scriptPubKey). There's really good engineering\nreasons for doing this: you need to be able to create succinct proofs of\nfraud in indexes, miner committed and otherwise, and the only way they\nare succinct is if you limit the length. Hashes naturally do that\nbecause it's so expensive to generate partial collisions.\n\nIf you don't do this on the other hand now you have a situation where\nthe usual case - max 16 level deep tree -  and worst case - hundreds or\neven thousands of levels deep - are vastly different. That's hard to\ntest for and likely to reveal implementation-specific limits in nasty\nways.\n\nAnyway, grinding nonces isn't much of a burden given it's fast hash\nfunctions. The prefixes in question are fairly small and will be small\nfor the forseeable future. As I said elsewhere in this thread, even\nJavascript has performance that's perfectly adequate for the task.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000003590a8a20ec9ff5b1c1af3f046a1f62dc1ac9a464721fd8f\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/eb99c0a2/attachment.sig>"
            },
            {
                "author": "Adam Back",
                "date": "2014-01-16T11:42:42",
                "message_text_only": "On Wed, Jan 15, 2014 at 05:02:10PM -0800, Jeremy Spilman wrote:\n>The second pubKey is useful [...] even just being able to scan for\n>transactions yourself without keeping bitcoin-encumbered private keys\n>decrypted in memory.\n\nAgreed.\n\n>On Wed, 15 Jan 2014 15:09:01 -0800, Adam Back <adam at cypherspace.org> wrote:\n>>But I think its moderately expensive for the full node because it has to\n>>do a DH calculation per transaction and its not precomputable so there is\n>>IO per query.  (In the P version in fact only payments which are thereby\n>>reconizable as unlinkable static need to be processed).\n>\n>And of course, if you have multiple reuseable addresses, then you're \n>doing this calculation separately to check each one.\n>\n>So the load on a popular centralized service would be quite high, \n>which you may consider a feature.\n\nWell only a linear increase, which is not any kind of realistic security\ndefense for even an academic researcher analysing flows.  More concern is\nthat it could be expensive enough discourage adoption by full-nodes as an\nopen/free service to support SPV clients in finding their reusable address\npayments.  Its possibly an I/O DoS multiplier: send requests to the full\nnodes at a moderate network rate and and watch as its disk thrashes.\n\n>But I think it's great people can choose how to trade privacy for \n>computation/bandwidth however they want, and services can compete to \n>offer monitoring for 0+ bit prefixes.\n\nIts not a decision with user localised effect.  If most users use it with\nparameters giving high elimination probability, that affects everyone else's\nprivacy also.  Also statistical effects are accumulative as more plausibly\nrelated addresses are eliminated at each potentially linked transaction.  I\nthink once the network flow analysis guys are done with incorporating it,\nand if reusable addresses saw significant use, my prediction is the result\nwill be pretty close to privacy game over and it will undo most if not all\nof the hard-won privacy benefit of CoinJoin.  (Recalling CoinJoin is only\nadding a bit or two of entropy per join, this elimination effect could\neasily undo more than that).\n\n>>(And also there is proposed a version of the prefix computed via\n>>brute-force to make it somewhat stealthy still).\n>\n>I think in this case the hash grinding of the prefix would only being \n>used if thats how transactions are being indexed. I don't think it \n>adds any privacy, it's just added work we're forced to do in order \n>for the prefix to work as designed. \n\nThe point of the stealth security objective is to avoid creating a new and\nsmaller anonymity set.  If all reusable addresses are easily recognizable as\nreusable, thats far more revealing and useful to the network flow analysis.\n\nAdam"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-01-16T18:19:26",
                "message_text_only": "> >But I think it's great people can choose how to trade privacy for \n> >computation/bandwidth however they want, and services can compete to \n> >offer monitoring for 0+ bit prefixes.\n> \n> Its not a decision with user localised effect.  If most users use it with\n> parameters giving high elimination probability, that affects everyone else's\n> privacy also.  Also statistical effects are accumulative as more plausibly\n> related addresses are eliminated at each potentially linked transaction.  I\n> think once the network flow analysis guys are done with incorporating it,\n> and if reusable addresses saw significant use, my prediction is the result\n> will be pretty close to privacy game over and it will undo most if not all\n> of the hard-won privacy benefit of CoinJoin.  (Recalling CoinJoin is only\n> adding a bit or two of entropy per join, this elimination effect could\n> easily undo more than that).\n\nYou've got a major social engineering problem here. \n\n1) who is marketing privacy \n2) how do you validate 'privacy providers' \n\nJust like all the scamcoins, there will be scamprivacy providers, which will\ndrive the market price of privacy down to zero.\n\nWho's paying the network/development/bandwidth/etc cost for privacy?\n\nI'd guess 85% of real users don't really care about some abstract 'privacy'\nideal, they just want payments to work and to download cat pictures.\n\nIf you say 'regular address re-use is deprecated, and the top 1% in bitcoin\nweatlh who own 95% of the miners want privacy', well fine. But you just \nopened yourself up to 'OccupyBitcoin', and an altcoin that ENCOURAGES plain\nold regular address re-use and transparency.\n\nDoes this stuff still work if regular address re-use is a transparency feature\nand not a bug?"
            }
        ],
        "thread_summary": {
            "title": "unlinakble static address? & spv-privacy (Re: Stealth Addresses)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Adam Back",
                "Peter Todd",
                "Christophe Biocca",
                "Jeremy Spilman",
                "Gregory Maxwell"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 28518
        }
    },
    {
        "title": "[Bitcoin-development] reusable address privacy problems & fuzzy bait limitations (Re: Stealth Addresses)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2014-01-16T11:12:20",
                "message_text_only": "On Thu, Jan 16, 2014 at 10:14:24AM +0000, Drak wrote:\n>   On 16 January 2014 00:05, Jeremy Spilman <[1]jeremy at taplink.co> wrote:\n>   > Might I propose \"reusable address\".\n>\n>   The problem is all addresses are reusable and to an average user,\n>   addresses are already reusable so there is little to distinguish the\n>   address format.\n>   It might be better to call it a \"public address\" in common terminology.\n\nYeah I called my variant \"(unlinkable) public\" but I also think I prefer\nJeremy's \"reusable address\" which has the added bonus of being yet another\nimplied admonishment not to reuse the non-reusable ones :)\n\nAnyway my primary concern so far is that the reusable addresses/(unlinkable)\npublic addresses are actually worse for privacy than SPV bloom mechanism by\nany reasonable definition.  So I think we have some work to do yet, on a\ntough problem which may not have an efficient index precomputable solution\n(or a solution period.)  I would also have been promoting this as an\nalternative solution to bloom privcy mechanism and address-reuse, if I\ncould've found a mechansim for the unlinkable public proposal...\n\nWhats different so far I think is that Peter just went with it anyway\ndespite that problem, where as I put it in the pile of interesting but not\nquite workable for privacy reasons ideas.  (Bearing in mind that my bloom\nbait concept is the same as the prefix concept so I had functional\nequivalence).  The additional feature of Peter's variant is to stealthify\nthe payment, which I do think is a useful additioanl consideration, however\nas I said I think its fair to say it so far largely fails to do that,\nbecause the exposed P parameter.  (And using the input instead of the P\nparameter breaks CoinJoin, which is also thereby damaging to privacy).\n\nSo also about Greg Maxwell's improved prefix/bloom bait (lets call it fuzzy\nbloom bait), while I agree that H(nonce)[rand(32)] ^ prefix is an\ninteresting incremental improvement, over raw bloom bait/prefix (with an\nexample 8-bit prefix, and [] being byte index, ^=xor), it is\nindex-precomputable, but it still publicly allows statistical elimination\nwhich is still nearly as dangerous in lieu of the remarkable success people\nhave had doing statistical network flow analysis.  ie with probability\n(255/256)^32=88% it eliminates you as a payee of any given reusable payment. \n(And that effect remains with any parameter set and conflicts with bandwidth\nefficiency for the requestor - ie lower elimination probability seems\nunavoidably to imply higher false positive match, right down to the point of\ndownloading the entire set, giving with 0 probability).\n\nThinking-hats time people.\n\n(As I said I still like reusable-addr for full-node recipient scenarios.)\n\nAdam"
            }
        ],
        "thread_summary": {
            "title": "reusable address privacy problems & fuzzy bait limitations (Re: Stealth Addresses)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2744
        }
    },
    {
        "title": "[Bitcoin-development] Getting trusted metrics from the block chain in an untrusted environment ?",
        "thread_messages": [
            {
                "author": "Cl\u00e9ment Elbaz",
                "date": "2014-01-08T19:38:14",
                "message_text_only": "Hello all,\n\nI'm designing a program that needs some metrics computed from the Bitcoin\nblock chain (some address balances, or the occurrence or not of a specific\ntransaction). The kind of infos you get from http://blockchain.info/,\nprovided you trust this website (my program do not).\n\nMy program should run on lightweight/embedded hardware. The execution\nenvironment provides access to the Bitcoin network but not enough resources\nto set up a trusted node along with my program. Also, my program trusts the\nglobal Bitcoin network but no individual node.\n\nI would need a way to ask an untrusted Bitcoin node to compute some 'metric\nrequest' on my behalf and having the result of that metric request\nvalidated by the network.\n\nIs there any available or work-in-progress projects that would come close\nto this need ? Or should I do it myself ? :-)\n\nThank you all,\n\nCl\u00e9ment Elbaz\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140108/2a00a136/attachment.html>"
            },
            {
                "author": "Cl\u00e9ment Elbaz",
                "date": "2014-01-08T19:44:29",
                "message_text_only": "Some more thoughts :\n\nIf no such project exist yet, I thought it could work with an alternate,\nsmall and fixed-length 'metric request block chain' of some sort.\n\nIt would temporarily stores structures defined as [metric request | current\nblock number when request was made | hash of the response] instead of\nfinancial transactions.\n\nThese structures are verifiable so it could work the same way as a regular\nfinancial blochchain.\n\nIt should not be part of the main Bitcoin protocol but could be a plugin\ninteracting with the data managed by the fullnode bitcoin software.\n\nAlso, metrics requests can be expensive to compute and validate, so it\nwould make sense to pay a fee everytime you ask one.\n\nDoes any of this makes any sense to you ?\n\nThanks,\n\nCl\u00e9ment\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140108/71676559/attachment.html>"
            },
            {
                "author": "Cl\u00e9ment Elbaz",
                "date": "2014-01-08T22:29:15",
                "message_text_only": "Hello all,\n\nIt seems there was a problem with my first email (thank you Mark for the\nheads up), so I'll copy paste it there :\n\n-----------------------\nHello all,\n\nI'm designing a program that needs some metrics computed from the Bitcoin\nblock chain (some address balances, or the occurrence or not of a specific\ntransaction). The kind of infos you get from http://blockchain.info/,\nprovided you trust this website (my program do not).\n\nMy program should run on lightweight/embedded hardware. The execution\nenvironment provides access to the Bitcoin network but not enough resources\nto set up a trusted node along with my program. Also, my program trusts the\nglobal Bitcoin network but no individual node.\n\nI would need a way to ask an untrusted Bitcoin node to compute some 'metric\nrequest' on my behalf and having the result of that metric request\nvalidated by the network.\n\nIs there any available or work-in-progress projects that would come close\nto this need ? Or should I do it myself ? :-)\n\nThank you all,\n\nCl\u00e9ment Elbaz\n\n-----------------------\n\n\nOn Wed, Jan 8, 2014 at 8:44 PM, Cl\u00e9ment Elbaz <clem.ds at gmail.com> wrote:\n\n> Some more thoughts :\n>\n> If no such project exist yet, I thought it could work with an alternate,\n> small and fixed-length 'metric request block chain' of some sort.\n>\n> It would temporarily stores structures defined as [metric request |\n> current block number when request was made | hash of the response] instead\n> of financial transactions.\n>\n> These structures are verifiable so it could work the same way as a regular\n> financial blochchain.\n>\n> It should not be part of the main Bitcoin protocol but could be a plugin\n> interacting with the data managed by the fullnode bitcoin software.\n>\n> Also, metrics requests can be expensive to compute and validate, so it\n> would make sense to pay a fee everytime you ask one.\n>\n> Does any of this makes any sense to you ?\n>\n> Thanks,\n>\n> Cl\u00e9ment\n>\n\n\n\n-- \nCl\u00e9ment ELBAZ\n06. 09. 55. 78. 41\nclem.ds at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140108/6dc30995/attachment.html>"
            },
            {
                "author": "Cl\u00e9ment Elbaz",
                "date": "2014-01-09T17:46:05",
                "message_text_only": "Hi Rob,\n\nThank you for answering.\n\n> So you want to 'benefit' from the network without contributing to it ?\n\n> Not going to happen - why would anyone be interested in providing you\n'free compute resources' ?\n\nNot free. As I stated in my second email (\"some more thoughts\" etc.), it\nseems really fitting to pay a fee to the network for every metric request\nyou send. 'I want to execute this request on your blockchain, and I want\nthe response to be approved by the Bitcoin network, and here is a fee for\nall the computing trouble\".\n\nYou either have the blockchain and the hardware resources to compute things\nbased on it, or you have addresses that takes a few bytes of data in your\nenvironement but contains money, potentially a lot. The situation seems\nplausible to me.\n\nThe thing is, as soon as there is an exchange of value (hardware computing\nresources vs bitcoins) between parties that do not trust each other, there\nis a need for proof of work, and thus my idea (in my second email) of a\nspecifc block chain that would store metric requests, current block number\nwhen they were asked, and hash of theirs responses. This can be validated\nby others nodes and as such can be published in a ledger just like bitcoin\ntransaction.\n\n> Setup a node, create an API interface and have your 'app' use your API on\nyoru node :p\n\nThe idea would have been actually to be able to get these computations in a\ntrusted way without having access to a specific trusted node. Compensating\nabsence of trust by providing actual money.\n\nAnyways. I got quite a few answer privately, and after study it seems SPV\nmode of bitcoinj will be just fine for my specific needs. I would have\nliked the solution to be network-centric ideally (By committing to an\nSPV-ready API like bitcoinj, I'm committing to languages that provide a\nstable SPV API), but I'll be just fine with bitcoinj for now.\n\nThank you Rob and everyone for your time.\n\nCl\u00e9ment\n\n\n\n\n\nOn Wed, Jan 8, 2014 at 8:44 PM, Cl\u00e9ment Elbaz <clem.ds at gmail.com> wrote:\n\n> Some more thoughts :\n>\n> If no such project exist yet, I thought it could work with an alternate,\n> small and fixed-length 'metric request block chain' of some sort.\n>\n> It would temporarily stores structures defined as [metric request |\n> current block number when request was made | hash of the response] instead\n> of financial transactions.\n>\n> These structures are verifiable so it could work the same way as a regular\n> financial blochchain.\n>\n> It should not be part of the main Bitcoin protocol but could be a plugin\n> interacting with the data managed by the fullnode bitcoin software.\n>\n> Also, metrics requests can be expensive to compute and validate, so it\n> would make sense to pay a fee everytime you ask one.\n>\n> Does any of this makes any sense to you ?\n>\n> Thanks,\n>\n> Cl\u00e9ment\n>\n\n\n\n-- \nCl\u00e9ment ELBAZ\n06. 09. 55. 78. 41\nclem.ds at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140109/e419fe72/attachment.html>"
            },
            {
                "author": "Rob Golding",
                "date": "2014-01-09T14:03:08",
                "message_text_only": "> My program should run on lightweight/embedded hardware. The execution\n> environment provides access to the Bitcoin network but not enough\n> resources to set up a trusted node along with my program. \n\nSo you want to 'benefit' from the network without contributing to it ?\n\n> I would need a way to ask an untrusted Bitcoin node to compute some\n> 'metric request' on my behalf and having the result of that metric\n> request validated by the network.\n\nNot going to happen - why would anyone be interested in providing you 'free\ncompute resources' ?\n\n> Is there any available or work-in-progress projects that would come\n> close to this need ? Or should I do it myself ? :-)\n\nSetup a node, create an API interface and have your 'app' use your API on\nyoru node :p\n\nRob"
            }
        ],
        "thread_summary": {
            "title": "Getting trusted metrics from the block chain in an untrusted environment ?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Rob Golding",
                "Cl\u00e9ment Elbaz"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 7976
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin strengthening, giving, more - Re:  Stealth Addresses",
        "thread_messages": [
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-01-12T21:48:32",
                "message_text_only": "Hello,\n\nMy apologies, to start with, as I am temporarily unable to reply directly\nto the thread.  I am remembering this conversation due to a few things:\n\n1) the discussion re. extending the payment protocol with new fields\n2) discussions about \"long addresses\"\n3) bitcoin strengthening / decentralization / cex.io,ghash.io growth etc.\n4) microdonation / giving / microtransaction development, e.g.\ncoinbase-bitmonet Android SDK,\nhttp://blog.coinbase.com/post/72785739620/android-sdk-released-accept-bitcoin-payment-in-your\n5) multisignature via browser, e.g. https://coinb.in/multisig/\n\nDifferent thoughts are running through my head here, so I will make a\nsincere effort to coagulate them into a couple of meaningful and coherent\nquestions, and perhaps as time goes on, an issue or BIP.  However, I will\nprecede this with a \"scenario\" and with some \"possibilities\" (all of which\nare hypothetical - I think) before presenting the \"questions\" below.\n\n                          |\n                          |\n                          V\n\n\"Scenario(s)\"\n\nSuppose that there were to exist a method of extending the payment\nprotocol such that either \"very long addresses\" or multiple addresses were\npresented by default from within the bitcoin client.  In the scenario\nbeing imagined here, the standard option would exist to enter a payment\naddress directly.  However, coupled with this would be an option to enable\nmicrodonations (or put another way, multiple transactions associated with\neach instance of use of the protocol to facilitate a purchase) as a\ndefault (as background activity automatically corresponding to any given\ntransaction). Whether or not this process is engaged in would be entirely\nvoluntary, in other words, users' choice.\n\nThe addresses to which this giving or microdonation would occur would be\nstipulated by the user but also would be limited to the ability of the\nnetwork to support this microdonation process.\n\nSo, for example:\n\n1) Let us say that you are to buy a piece of gum and the price of that\npiece of gum is 0.00008 BTC.\n    1)a.  The user has the ability to support additional (individuals,\norganizations, causes, etc) for each transaction (instance of use of\nthe protocol to facilitate a purchase).\n    1)b.  The user has set as a default to be \"microdonated\" each time a\ntransaction occurs, the following:\n          1)b.1 0.0003 BTC to Sean's Outpost\n          1)b.2 0.0004 BTC to a cousin who has a medical debt\n          1)b.3 0.00006 BTC to a multisignature account which is intended\nto \"give youth a future and old age a security\"\n( Re: https://www.youtube.com/watch?v=qLci5DoZqHU&feature=youtu.be&t=2m38s )\n          1)b.4 0.00005 BTC to a future US gov't-run Social Security address\n          1)b.5 0.0002 BTC to an anarchist collective's donation address\n          1)b.6 0.0002 BTC to a personal investment or retirement account\n     1)c. The user then purchases a compound bow for 0.17 BTC.  The\npurchase occurs the day after the gum purchase was initiated.  The\nuser has left the default microdonation settings in place, so Sean's\nOutpost, the cousin, the multisignature account, the US gov't run\nSocial Security address, the anarchist collective, and the personal\ninvestment / retirement account all receive something (automatically)\nagain as per the user's settings.\n\n\"Possibilities\"\n\n2) Some Possibilities (depending on implementation):\n    2)a. The transaction completes for the purchase of gum but the\nmicrotransactions are not allowed to complete until the compound bow\npurchase is complete due to that the gum price is lower than the\ncollective microdonations which are set by the user as default.\n    2)b. The transaction for the purchase of gum is not completed due to\nthe user realizing that the fee will be larger than the price of gum,\nbut the microdonations are completed (the user has opted to allow them\nto occur anyway) and transaction(s) confirmed.  Subsequently, the\ncompound bow purchase occurs and the microdonations are given again.\n    2)c.  The transaction for the purchase of gum is completed and the\nmicrodonations are completed, everything is confirmed, the next day\nthe same thing happens with the compound bow purchase, more\nmicrodonations arrive.\n    2)d.  The microdonations are interpreted by the system as part of a\nvery long address created for the transaction.  Due to the tiny price\nof the gum the microtransactions are held until another larger\npurchase is completed.  The microtransactions occur \"times 2\" at the\ntime of the compound bow purchase, since they could not be completed\nduring the gum purchase, they are completed / confirmed at the time of\nthe compound bow purchase.  The user is alerted that the ordinary\nmicrodonations will be multiplied by two for the transaction and is\noffered an option to either run the default microdonation or the\nmicronation \"times two.\"  The user confirms the \"times two\" option and\nthe microdonations are completed.\n    2)e.  The microdonations are each handled as seperate microdonations -\neach has a distinct transaction\n    2)f.  A fee is collected for some microdonations but not for others\ndepending upon their size of the microdonation and other factors\n    2)g.  Microtransactions are conducted over mobile with zero fees, the\nfees are applied only to the item purchased, unless the value of the\nmicrodonations is at a certain threshold value where fees will apply.\n    2)h.  The user has the microdonations set by default in the user's\nbitcoin client, but also uses 'donation services' (that operate\nthrough a website) apart from the user's client, for example, flattr,\nwhich can provide small bitcoin donations to persons or entities that\nthe user selects without having to also commit to the \"microdonation\ndefault\" (Sean's outpost, the cousin, etc) when that 'donation\nservice' is used.  In other words, the user can commit to a\ntransaction for the purpose of donation to some person or entity, with\nthe option of not having the default microdonations occur (user's\noption) for that transaction.\n\n(I could go on with all sorts of scenarios here but I think those will\nsuffice to describe _some_ possibilities)\n\n\"Possibilities - continued\"\n\n3) The system uses the microdonation process to limit possibility of a 50%\n+ 1 attack.  At the user's option, microdonations are routed to different\npools when certain thresholds are reached, to decentralize mining.  This\nwould occur either as distinct microtransaction (materially, no different\nthan the microdonation to Sean's Outpost that the user has set as a\ndefault for every purchase) or would occur as part of a \"very long\naddress.\"\n\n\"Questions\"\n\n1) What are (some) obstacles to this sort of suggestion to decentralize\nthe giving process?\n2) Would donations be identified as donations or just as another\ntransaction in the Bitcoin network?  Maybe there is another question\nflowing from this question:\n  2)a.  Where the user wants the ability to decide to make a donation\n'anonymously' or not, could this occur as a default setting for either\none (or all) of the microdonations that the user has set?\n3) What would be the simplest possible form of a prototype implementation?\n\nReferences / things being reflected upon in background / note(s):\n\na) 'ABIS' - protocol concept to enable decentralization and expansion of a\ngiving economy and a new social good (ABISprotocol)\nhttps://github.com/ABISprotocol/ABIS\nb) 'BitHub' - An experiment in funding privacy OSS (WhisperSystems /\nmoxie0) https://github.com/WhisperSystems/BitHub\nc) 'coinbase-android-sdk' - Coinbase Android SDK developed in\ncollaboration with Bitmonet Open-source project (coinbase / bitmonet)\nhttps://github.com/coinbase/coinbase-android-sdk\nd) 'bitcoin' (bitcoin) https://github.com/bitcoin/bitcoin\n\nFinally:  My apologies in advance for any obvious omissions,\ninconsistencies, poorly constructed statements, or whatever malformed\nthing you perceive that you have just endured reading.  (If you liked it,\nthough, you are most welcome.  I'm happy to contribute.)  This is an\ninitial stab by me in this list to generate discussion about these issues.\n\n          -----this message is in reply to the below-------\n\nFrom: Mike Hearn <mike at plan99.net>\nTo: Jeremy Spilman <jeremy at taplink.co>\nCc: \"bitcoin-development at lists.sourceforge.net\"\n<bitcoin-development at lists.sourceforge.net>\nSubject: Re: [Bitcoin-development] Stealth Addresses\nDate: Sun, 12 Jan 2014 13:51:54 +0100\n\nYou can always just extend the payment protocol with the new fields as\nwell, vs making very long addresses. If this technique can be made to work\nwell, it would have applicability in both fixed textual address context,\nand for a fixed/upload-once payment protocol file. That has the advantage\nof backwards compatibility as well - the new addresses would not be\nclickable or acceptable by old wallets, but with the payment protocol you\ncan always craft a bitcoin URI that contains a regular current style\naddress, and a link to a fixed payment protocol file (uploaded to a\npastebin type site), and modern wallets would ignore the address and use\nthe ECDH based system instead.\n\n\n\nOn Sun, Jan 12, 2014 at 11:33 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n> > Oh, sorry, I forgot to mention it in my first write-up but you can\n> > easily make stealth addresses include a second pubkey for the purpose of\n> > the communication that either isn't used in the scriptPubKey at all, or\n> > is part of a n-of-m multisig. (n>=2) Interestingly that also means you\n> > can give a third-party that key and out-source the effort of scanning\n> > the blockchain for you.\n>\n> Great point. Even if it's not a 3rd party, I think it's really important\n> to be able to scan for transactions with a key which can't actually spend\n> the funds.\n>\n> The first approach is just one-pass ECDH. I think you're saying the second\n> approach is two rounds of ECDH but re-using the same e/P (usually referred\n> to as r/R in ECIES). I think this is safe, unlike reusing an ephemeral key\n> for signing operations.\n>\n>    Payee: Publish Q, Q2                     [d, d2 are privkeys, Q, Q2 are\n> pubkeys]\n>    Payer: 1) Generate ephemeral key: e / P  [e is privkey, P is pubkey]\n>           2) S = e * Q                      [first shared secret]\n>           3) S2 = e * Q2                    [second shared secret, reusing\n> 'e']\n>           4) Q' = Q + H(S)                  [pay-to stealth address]\n>           5) Q2' = Q2 + H(S2)               [stealth 'marker']\n>\n>    Watch: 1) Look for TxOut with OP_RETURN <P>\n>           2) Q2' = Q2 + H(d2 * P)\n>           3) Check for Q2' elsewhere in the Tx\n>\n> S/MIME for example, allows reuse of the ephemeral keypair. When reusing an\n> ephemeral keypair where A reuses (x, X) to encrypt different messages to\n> more than one user, A should verify the static public keys to prevent\n> small-subgroup attacks.[1][2]\n>\n> Let's say you pay-to Q' and then Q2' value has to be somewhere else in the\n> transaction. You could put it next to the shared P in OP_RETURN. OP_RETURN\n> <P> <Q2'> would be 66 bytes.\n>\n> But then Mallory could generate transactions with the right Q2' but with\n> his own pubkey in Step 2 instead of Q. So your scanner would detect a\n> payment, but you wouldn't be able to spend it, and Mallory could.\n>\n> That's a good argument for putting Q2' in a 2-of-2 multisig so that\n> pulling this trick would at least make the transaction unspendable for\n> both parties, which may be good enough deterrent, but you're still going\n> to want to check it against your 'd' before fulfilling a large order. Your\n> online watch process could queue the matching transactions, which you\n> could move to your offline machine, decrypt your key, and verify the\n> transactions are spendable.\n>\n> Now, you would need to get two pubkeys to the payer, throw in a prefix to\n> help standardize it, and end up with addresses that could look like (for\n> example):\n>\n>\n> xSTLxsn59oaupR6ZKt2yddQ4dp5hcFinnTWkvsDiXtHgAEDg5ajNVzTY8MMQsmqnEn3ZMKxQzrfC3pDimfTWMkiUb7x3jX3J26JSX\n>\n> tSTLcpwzupCFL3maVZkSiB9ib3BXsCAfkhMLgckQEyoj8Tk83ANzofeuDdbX6bSPqNRfACLLFYK8EwVo1jdjxNDFNDWxhnQiAy4ba\n>\n> Those addresses are 74 bytes:\n> <Prefix><CompressedPubKey1><CompressedPubKey2><Checksum>\n>\n>    xSTL Prefix = 0xC0CB9270\n>    tSTL Prefix = 0xB2E27D50\n>    NOTE: I do NOT have the corresponding privkeys for these four pubkeys!\n>\n> Those just happened to be the first matching prefixes I found for 74 byte\n> addresses. I could try to find ones which start with a specific byte if\n> that's somehow better, like 0x04 to match BIP32.\n>\n> Unfortunately, I don't think you can just derive a second public key from\n> the first to keep the address shorter, and still keep the first private\n> key secure, even if the second private key is stolen. You only get\n> equivalent security as BIP32 public derivation, where you can't lose a\n> child private key.\n>\n> Do we also want xSTL (or whatever user friendly string) prefixes for\n> single pubkey (41 byte) stealth addresses?\n>\n> I'll wait a couple days for feedback, then I'll try to implement the\n> following prototypes:\n>\n> 1) Pay to STL addresses\n> 2) Watcher process to detect and queue STL payments for a given d2/Q2\n> 3) Offline verifier to take output from Watcher and verify spendable given\n> encrypted d/d2\n>\n> Obviously extending QT directly for #1 would be ideal, I may even be able\n> to do that since supporting a new address type should be fairly contained.\n> But if not I'll punt to writing a node.js or python script which connects\n> to bitcoind via RPC.\n>\n> Thanks,\n> Jeremy\n>\n> [1] - On Reusing Ephemeral Keys in Diffie-Hellman Key Agreement Protocols\n>        http://www.math.uwaterloo.ca/~ajmeneze/publications/ephemeral.pdf\n>\n> [2] - Validation of Elliptic Curve Public Keys\n>        http://www.iacr.org/archive/pkc2003/25670211/25670211.pdf\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n------------------------------------------------------------------------------\nCenturyLink Cloud: The Leader in Enterprise Cloud Services.\nLearn Why More Businesses Are Choosing CenturyLink Cloud For\nCritical Workloads, Development Environments & Everything In Between.\nGet a Quote or Start a Free Trial Today.\nhttp://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin strengthening, giving, more - Re:  Stealth Addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Odinn Cyberguerrilla"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 15003
        }
    },
    {
        "title": "[Bitcoin-development] Stealth Payments - Sample Code / Proof of Concept",
        "thread_messages": [
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-13T09:18:39",
                "message_text_only": "* Transaction *\n\nI spent 1BTC on TestNet to a stealth address...\n    TxID: df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c\n\nhttp://blockexplorer.com/testnet/tx/df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c#i8166574\n\n* Code *\n\nCode which generated this transaction is here:  \nhttps://gist.github.com/jspilman/8396495\n\nNote, one minor change from the protocol we discussed is I'm just using  \nthe 32-byte x coordinate for the shared secret, not the compressed pubKey  \n(so, throwing away the first byte) before hashing with SHA256.\n\n* How it Looks *\n\nAfter importing the privkey for the TxIn to that transaction  \n(importprivkey \"cNL8XqRtqwC1YEc9kKspbX2aukWnXfgHQSvjsPYbuPif5Q3DJkEs\"  \nrescan) you will see two rows in the Transaction List of Bitcoin-QT...\n\nBoth rows simply say 'Sent to' with a blank address. One has 1BTC amount  \nwhich is the 2-of-2 stealth multisig, the other has 0BTC amount, and it's  \nthe OP_RETURN.\n\nI wonder if the 0BTC OP_RETURN transactions should be hidden from the  \nTransaction List? 'Transaction Details' truncates the <data> after  \nOP_RETURN anyway, so it's not even particularly useful for seeing what  \ndata you embedded.\n\n* Next Steps *\n\nI'm not quite sure. If we're going to try to deploy this, I think we need  \nto fully understand what users who are making these payments should see in  \ntheir wallet software while making a payment, and after a payment has been  \nmade.\n\nRight now I'm thinking...\n\n   1) Define the PaymentRequest extension\n   2) Update Gavin's PHP to generate PaymentRequests for stealth payments\n   3) Get Bitcoin-QT loading the PaymentRequest and generating transactions  \n from those PaymentRequests\n   4) Write an agent to detect incoming stealth payments\n\nBut we would still be showing meaningless rows in the payer's Transaction  \nList without some additional work.\n\nIf there is a place to add TxOut meta-data with the pubkeys used to  \ngenerate it... well, there must be since the 'Merchant' field is attached  \nsomehow. So we could probably use the same method to keep the pubKeys  \naround.\n\nMaybe the simple way to punt on this is to just show 'Merchant' in the  \naddress column if it is available and an address is not. We could skip  \nsaving the pubKeys for now, so there would be no way to send follow on  \nstealth payments, but at least the Transaction List would make sense  \ninstead of looking like two empty transactions.\n\n* Other Open Questions *\n\nI think the biggest is if/how to receive P2P stealth payments in  \nBitcoin-QT as an end-user not a merchant.\n\nI can probably make the necessary changes to IsMine, but I don't know  \nwhere we should keep 'd2'/'Q2' unencrypted so it's available for doing the  \nnecessary tests, but has no chance of ever be used as a stand-alone  \nprivate key?\n\nAnd then there's still the question of: when 'd1'/Q1 is available  \ndecrypted, we must fully verify the transaction, and how to indicate if  \nthat has or has not been done yet.\n\nIt really seems crippled to me without fully integrated support for  \nreceiving P2P stealth payments in Bitcoin-QT. It doesn't seem like that  \nmuch code, just some details to work out first."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-13T11:18:28",
                "message_text_only": "Cool!\n\nOn Mon, Jan 13, 2014 at 10:18 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n> I spent 1BTC on TestNet to a stealth address...\n>     TxID: df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c\n>\n\n... but can you redeem it?\n\n\n> Code which generated this transaction is here:\n> https://gist.github.com/jspilman/8396495\n\n\nThat's rather interesting code. Is this using a private C# bitcoin\nimplementation?\n\n\n> I wonder if the 0BTC OP_RETURN transactions should be hidden from the\n> Transaction List?\n>\n\nYes, of course. The transaction list should just say something like\n\n    \"Payment received from Jeremy,  0.1 BTC\"\n\nMaybe the simple way to punt on this is to just show 'Merchant' in the\n> address column if it is available and an address is not.\n\n\nI am surprised it's not already the case! Though \"merchant\" is perhaps a\nbit biased as a name, internally it perhaps should just be called\n\"Recipient\". There's no requirement for you to be a merchant to create\npayment protocol requests.\n\n\n> I can probably make the necessary changes to IsMine, but I don't know\n> where we should keep 'd2'/'Q2' unencrypted so it's available for doing the\n> necessary tests, but has no chance of ever be used as a stand-alone\n> private key?\n>\n\nThe wallet format would need extending.\n\nI'd feel a lot more comfortable if the protocol was reviewed by a\nprofessional cryptographer though. I think think Gregory already brought up\nan issue to do with people able to detect such payments by testing if\ndecrypted values are points on the curve, or something like that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/a81a887a/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-13T14:10:14",
                "message_text_only": "On Mon, 13 Jan 2014 03:18:28 -0800, Mike Hearn <mike at plan99.net> wrote:\n\n> Cool!\n>\n> On Mon, Jan 13, 2014 at 10:18 AM, Jeremy Spilman <jeremy at taplink.co>  \n> wrote:\n>> I spent 1BTC on TestNet to a stealth address...\n>>    TxID:  \n>> df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c\n>\n> ... but can you redeem it?\n\nBut of course!\n\nEvery time the test runs it makes a new ephemeral key, so I wrote a  \nseparate test with hard-coded values from the block chain (as it would be  \nin real-life) to create a redeeming Tx. I've added the RedeemStealth code  \nto the Gist.\n\nIt sent successfully using sendrawtransaction, TxID:  \ned92364d2b6f6528dea32dbf6c4d5d6291b601aff1ddb4eeb124d003c7c7ff07\n\nI'm self mining since no one else seems to be on TestNet this time of  \nnight... going to catch some sleep, hopefully by the time I wake up it'll  \nbe on the chain.\n\n\n>> Code which generated this transaction is here:\n>> https://gist.github.com/jspilman/8396495\n>\n> That's rather interesting code. Is this using a private C# bitcoin  \n> implementation?\n\nIndeed it is. One day I may publish the libraries, but they aren't doing  \nanything particularly special under the hood, just the standard  \nBitcoin/EC/BIP32 stuff and using OpenSSL under the hood instead of the  \nmore typical BouncyCastle.\n\nI just tried to keep things extremely concise in the APIs. Hopefully all  \nthe function calls are obvious what they are doing. Since there's no  \nactual wallet behind it, the code to setup the inputs is a bit annoying,  \nbut actually building and signing transactions is super clean.\n\n\n>> I wonder if the 0BTC OP_RETURN transactions should be hidden from the\n>> Transaction List?\n>\n> Yes, of course. The transaction list should just say something like\n>\n>    \"Payment received from Jeremy,  0.1 BTC\"\n\nIn this case I'm just looking at the payee wallet, but yes, \"Payment set  \nto Jeremy\" should be possible, with the name coming from the CN.\n\n>\n>> Maybe the simple way to punt on this is to just show 'Merchant' in the\n>> address column if it is available and an address is not.\n>\n> I am surprised it's not already the case! Though \"merchant\" is perhaps a  \n> bit biased as a name, internally it perhaps should just be called  \n> \"Recipient\". >There's no requirement for you to be a merchant to create  \n> payment protocol requests.\n\nYeah, right now for PaymentProtocol fulfilled payments, on the payer's  \nTransaction List, it shows the address in the 'Address' column, but if you  \nright-click and look at 'Transaction details' you will see something like:\n\n\n    Status: 42 confirmations\n    Date: 1/12/2014 21:07\n    To: mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\n    Debit: -0.10 BTC\n    Net amount: -0.10 BTC\n    Transaction ID:  \n93c50347e35062a3501fcea15d1a22ace8d1b059affb9913fc9e7df4e7d6a00b-000\n    Merchant: www.bitcoincore.org\n\n\n\nI agree 'Merchant' might not be the best name, especially since when  \nyou're making the payment the field is labeled simply 'Pay To'.\n\n\n\nBut I think we agree, why show 'mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV' in the  \ntransaction list instead of just \"Paid To: www.bitcoincore.org\" and then  \nperhaps the Memo field could be stuck under 'Transaction details', instead  \nof losing that important bit of info.\n\n>\n>> I can probably make the necessary changes to IsMine, but I don't know\n>> where we should keep 'd2'/'Q2' unencrypted so it's available for doing  \n>> the\n>> necessary tests, but has no chance of ever be used as a stand-alone\n>> private key?\n>\n> The wallet format would need extending.\n>\n> I'd feel a lot more comfortable if the protocol was reviewed by a  \n> professional cryptographer though. I think think Gregory already brought  \n> up an issue >to do with people able to detect such payments by testing  \n> if decrypted values are points on the curve, or something like that.\n\nNot sure I follow that, will look forward to hearing more about it.\n\nThe only risk I know of is that there are checks in theory that you would  \ndo on Q1/Q2, but since the payee is the one generating Q1/Q2 they would  \nliterally be attacking themselves. I referenced two papers in a prior  \nemail specifically on reusing ephemeral keys in ECDH, and the validation  \nyou need to do on Q1/Q2 when re-using an ephemeral key to send two  \nmessages to two different pubKeys. I think the idea of checking the  \npubKeys when re-using ephemeral keys is more when the pubKeys are under  \nthe attackers control. But the validation is not complicated, and I'll see  \nif I can add it tomorrow.\n\nIt would be good to fully understand how a possible small-group attack  \nwould work...  This is a bit of guess-work on my part:\n\n    If a payee managed to foot-shoot themselves with a bad Q2 pubKey, then  \ngives out d2/Q2 to a scanning service run by Mallory...\n\n    Mallory has d2/Q2, given P from a transaction, he calculates S2 (as  \nusual):\n\n       byte[] S2 = EC.DH(d2, P);\n\n    But with the small sub-group attack with Q2 he can learn 'e' (the  \nephemeral private key) used:\n\n       byte[] S2 = EC.DH(e, Q2);\n\n    and from that he can calculate S1 directly, when he should only know S2.\n\n       byte[] S1 = EC.DH(e, Q1);\n\nSo does that mean Mallory can find 'd1'? It looks like you would need  \nanother small sub-group attack on P, the ephemeral public key, so another  \nkey the attacker doesn't control which would have to randomly be bad.\n\n       byte[] S1 = EC.DH(d1, P);\n\nBut I'm definitely not a professional cryptographer. Perhaps Matthew Green  \nmight be a good candidate to review this?\n\nAND YAY, my stealth redemption Tx just went through, goodnight :-)  \nhttp://blockexplorer.com/testnet/tx/df092896c1347b303da299bc84c92bef1946f455dbdc80ffdb01a18ea4ed8b4c#o0\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140113/21e4df9f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Stealth Payments - Sample Code / Proof of Concept",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Jeremy Spilman"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 10780
        }
    },
    {
        "title": "[Bitcoin-development] Payment protocol and reliable Payment messages",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2014-01-13T16:43:41",
                "message_text_only": "Hi all,\n\nwhile thinking about what use cases the stealth addresses covers, in\nparticular in addition to the payment protocol, I found it useful to\nbring this up again.\n\ncurrently, BIP70 says for \"payment_url\": Secure (usually https)\nlocation where a Payment message (see below) may be sent to obtain a\nPaymentACK.\n\nThe fact that this is optional makes the \"memo\" and \"refund\" and\n\"merchant_data\" fields in the Payment message useless, as merchants\ncannot rely on it, thus need to provide an alternative, thus nobody\nwould have a use for trying to use the in-Payment versions. If we\ntruly want the use of this Payment being sent be optional, I'd vote to\nget rid of these and just send the transaction.\n\nIn particular in the case of more anonymous senders, if the Payment\nmessage isn't sent, it may result in funds being transferred without a\nway to know who to refund it to if something goes wrong.\n\nThat would be a pity. I think having bi-directional communication in\nthe protocol is one of the nicest things the payment protocol can add.\nI would prefer to at least formulate it in the BIP as \"location where\na Payment message must be attempted to be sent to\". In case it fails,\nit should probably be stored in the client and retried later.\n\nAs an optimization (and I believe this is what Mike plans to implement\nin BitcoinJ), if a payment_url is present, it should be encouraged to\nonly send the payment there, and not broadcast the transaction at all\non the P2P network (minimizing the risk that the transaction confirms\nwithout the payment being received; it can't be guaranteed however).\n\n-- \nPieter"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-13T17:44:18",
                "message_text_only": "On 01/13/2014 05:43 PM, Pieter Wuille wrote:\n\n> As an optimization (and I believe this is what Mike plans to implement\n> in BitcoinJ), if a payment_url is present, it should be encouraged to\n> only send the payment there, and not broadcast the transaction at all\n> on the P2P network (minimizing the risk that the transaction confirms\n> without the payment being received; it can't be guaranteed however).\n\nCan you explain what the problem is here? The payment message can be\ntransmitted after the payment has been received through the P2P network.\nAm I missing something?\n\nFurthermore, if we give up the robustness of the P2P network, we will\nlikely end up with more failed payments. There is so much that can go\nwrong when trying to connect via HTTP (proxies etc.), Bluetooth\nendpoints can go away, etc. At least we should provide fallback\npayment_url's in this case.\n\nAs for you proposal, just be aware I'd like to use the payment protocol\nfor face to face payments as well. That meant payment request via NFC or\nQR, payment message and payment confirmations via Bluetooth. I think it\ncan be done by putting a Bluetooth mac address into the payment_url."
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-01-13T17:56:57",
                "message_text_only": "On Mon, Jan 13, 2014 at 6:44 PM, Andreas Schildbach\n<andreas at schildbach.de> wrote:\n> On 01/13/2014 05:43 PM, Pieter Wuille wrote:\n>\n>> As an optimization (and I believe this is what Mike plans to implement\n>> in BitcoinJ), if a payment_url is present, it should be encouraged to\n>> only send the payment there, and not broadcast the transaction at all\n>> on the P2P network (minimizing the risk that the transaction confirms\n>> without the payment being received; it can't be guaranteed however).\n\nI want to avoid the case where a transaction confirms, but the\nassociated payment is not delivered. If there is a reasonable chance\nthat this case occurs in normal operation, it means the payment\ntransmission cannot be relied upon.\n\nOn the other hand, if the payment gets sent, but the transaction is\nnot broadcasted, it can be broadcasted by the receiver (who has much\nmore reason to do so; he wants to spend his money).\n>\n> Can you explain what the problem is here? The payment message can be\n> transmitted after the payment has been received through the P2P network.\n> Am I missing something?\n\nSo, yes, sending on the P2P network is fine, as long as everything is\ndone to get the payment delivered. Not broadcasting on P2P is just an\noptimization that makes failures of not getting the transaction out\nand not getting the payment delivered coincide better. I say just\noptimization, as you can't rely on the fact that if the payment fails,\nthe transaction will also fail (the merchant may be malicious, make\nthe submission of the payment fail, but broadcast the transaction\nanyway), so wallets must still be able to deal with this. Nonetheless,\nI think it can increase the reliability of \"payment being received for\notherwise confirming transactions\".\n>\n> Furthermore, if we give up the robustness of the P2P network, we will\n> likely end up with more failed payments. There is so much that can go\n> wrong when trying to connect via HTTP (proxies etc.), Bluetooth\n> endpoints can go away, etc. At least we should provide fallback\n> payment_url's in this case.\n\nThat's a different issue. I'm very aware that payments over HTTP can\nfail. The point is that I prefer the entire transaction to fail in\nthat case, instead, and focus on making the payment submission more\nreliable.\n>\n> As for you proposal, just be aware I'd like to use the payment protocol\n> for face to face payments as well. That meant payment request via NFC or\n> QR, payment message and payment confirmations via Bluetooth. I think it\n> can be done by putting a Bluetooth mac address into the payment_url.\n\nI'm aware. What issues do you see?\n\n-- \nPieter"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-13T22:24:58",
                "message_text_only": "Thanks for the explanation.\n\nOn 01/13/2014 06:56 PM, Pieter Wuille wrote:\n\n>> As for you proposal, just be aware I'd like to use the payment protocol\n>> for face to face payments as well. That meant payment request via NFC or\n>> QR, payment message and payment confirmations via Bluetooth. I think it\n>> can be done by putting a Bluetooth mac address into the payment_url.\n> \n> I'm aware. What issues do you see?\n\nLooks good so far. Just wanted to keep you aware (-:"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-14T09:40:58",
                "message_text_only": "On 01/13/2014 06:56 PM, Pieter Wuille wrote:\n\n> I want to avoid the case where a transaction confirms, but the\n> associated payment is not delivered. If there is a reasonable chance\n> that this case occurs in normal operation, it means the payment\n> transmission cannot be relied upon.\n\nI was thinking about this some more. Generally I think you have a point.\nHowever, there is one case I'm worried about.\n\nImagine you get a good offer (payment request) from a merchant. You\nwould like to accept that offer, however the merchant has changed his\nmind. If you don't broadcast the payment to the blockchain, you won't\nhave a chance to accept and legally bind the offer. The merchant will\nsilently discard your payment messages.\n\nAt some point, you will involve a judge. If you can present the payment\nrequest and the payment from the block chain, you're in a much better\nposition than if you just present a request but no confirmed payment.\n\nI think in some cases you might want to broadcast your txn to the P2P\nnetwork, even if the payment messages get lost. What do you think?"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-14T10:45:59",
                "message_text_only": ">\n> Imagine you get a good offer (payment request) from a merchant. You\n> would like to accept that offer, however the merchant has changed his\n> mind.\n\n\nUsually if the merchant has not delivered, then at that point it's not a\nproblem and he is allowed to change his mind. It's only if they change\ntheir mind *after* you pay that it's a problem, right?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140114/ad28d45b/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-14T11:01:08",
                "message_text_only": "On 01/14/2014 11:45 AM, Mike Hearn wrote:\n>     Imagine you get a good offer (payment request) from a merchant. You\n>     would like to accept that offer, however the merchant has changed his\n>     mind.\n> \n> \n> Usually if the merchant has not delivered, then at that point it's not a\n> problem and he is allowed to change his mind. It's only if they change\n> their mind *after* you pay that it's a problem, right?\n\nIt was my understanding of the spec that a payment request is legally\nbinding one side for the specified amount of time.\n\nBasically I offer you to sell you these 10 eggs (described in the memo)\nfor this amount if you accept until this time. I have even signed this\nso you can know its me who made you the offer. If you accept (by\npaying), the contract is valid and there should be nothing I can do\nabout it (except for extreme cases which are covered by law already).\n\nActually what good is the payment request if its not binding?\n\nWhy do we have an expiry time in the message?"
            },
            {
                "author": "Adam Back",
                "date": "2014-01-14T11:41:34",
                "message_text_only": "He's probably thinking of fair advertising rules.  There are regulations\nmotivated by consumer protection/advertising standards (prevents merchant\nlisting attractive prices in media, and then when consumer goes to pay the\nmerchant says \"oh actually that doesnt include X and Y, and the minimum\nprice is 10% more\" after the user has already partly committed to the\npurchase.  Ryanair, an airline near and dear to Europeans ;) is infamous for\naggressive use of such tactics.  Or worse systematic abuse of \"sorry that\nwas a pricing mistake\".\n\nIn trading situations its even more important, you're facing a dynamic\nprice, and revocable bids after acceptance but before payment allow system\ngaming.  There were court cases about such things and trading systems gamed. \nSo I think this is the use case to consider.  Payment request is an offer,\npayment message is an acceptance, transaction broadcast is settlment.  After\nacceptance the asker must not be allowed to retract ther ask.\n\nGoing back to Pieter's comment it seems there are two approaches: i) send\npayment message to merchant, merchant broadcasts tx to network to claim\nfunds; ii) user broadcasts tx, and sends payment message to merchant.\n\nIn case i) the user is relying on the merchant in terms of retraction, for\nmany use-cases that doesnt matter, or consumer law says they can do that in\nsome places.  Though transferable proof the merchant is systematically\nretracting advertised offers could be indirectly useful as it maybe evidence\nof unfair trading, which can result in censure for the merchant!\n\nIn case ii) I think Andreas has a point.  Maybe the way to do that is to\nalso bind the transaction to the payment message.  Eg include the hash of\nthe payment message in the tx (circular ref may have to use multisig\napproach?), or as Timo Hanke's paper where the offer/acceptance contact hash\nis bound to the address (ie the address paid is Q'=H(Q+H(contract)G).\n\nAdam\n\nOn Tue, Jan 14, 2014 at 11:45:59AM +0100, Mike Hearn wrote:\n>     Imagine you get a good offer (payment request) from a merchant. You\n>     would like to accept that offer, however the merchant has changed\n>     his\n>     mind.\n>\n>   Usually if the merchant has not delivered, then at that point it's not\n>   a problem and he is allowed to change his mind. It's only if they\n>   change their mind *after* you pay that it's a problem, right?\n\n>------------------------------------------------------------------------------\n>CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>Critical Workloads, Development Environments & Everything In Between.\n>Get a Quote or Start a Free Trial Today.\n>http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Adam Back",
                "date": "2014-01-14T13:18:38",
                "message_text_only": "Maybe even pay to (address derived from) contract hash has a hole: it\nassumes the merchant cashes the funds (or cashes then reimburses via the\nrefund address).  There is another rational (though abusive) move for the\nmerchant: let the buyers funds sit in limbo.  Then the buyer has the onus to\ngo into disupte, maybe the seller is anonymous, in another country, or the\ncost of dispute resolution more than the value lost, and anyway its not very\nsmart-contract like.\n\nIt might be better if the buyer has time-stamped evidence of having sent the\nfunds to the merchant, and evidence of non-collection of funds by the\nmerchant (by omission from the block chain).\n\nAdam"
            }
        ],
        "thread_summary": {
            "title": "Payment protocol and reliable Payment messages",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Pieter Wuille",
                "Adam Back",
                "Andreas Schildbach"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 12076
        }
    },
    {
        "title": "[Bitcoin-development] Tor / SPV",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-01-15T22:51:21",
                "message_text_only": "intro text starts here, protocol upgrade proposal starts further down\n\nRecently on IRC we have discussed what it'd take to use SSL on P2P connections, the goal being encryption and authentication of traffic to help avoid passive wiretapping and sybil attacks.\n\nGregory pointed out - very reasonably - that OpenSSL is huge and very old-school C, meaning that using it to implement SSL would put a big piece of code exposed to the internet into the same process as people\u2019s wallets. This would be not excellent. Also, even with encryption, with SSL you only get some resistance to traffic analysis. And it'd be a complicated upgrade.\n\nTor is an option, but it has other disadvantages:\n\n1) Also a giant piece of C that is likely to contain bugs\n2) Breaks our anti-sybil heuristics when connecting to hidden services\n3) MITM very likely when not connecting to hidden services\n4) Is not usable as a library at all. Convention to use Tor is \"tell user to start TorBrowser and connect to the SOCKS port\".\n\nThe latter point means in reality hardly anyone will ever connect via Tor, as you'd have to do extra setup and most people are lazy. Especially it's not going to work on mobile. It\u2019s not worth doing something complicated if hardly anyone would use it.\n\nBut recently I discovered this interesting piece of code:\n\n   http://www.subgraph.com/orchid.html\n\nIt is a pure Java implementation of the Tor protocol (client only, no relays), easily usable as a library. Sure enough after about an hour of fiddling around, I now have a bitcoinj that connects via Tor with no other software running.\n\nSuddenly making MultiBit, the Android Bitcoin Wallet app, Hive and other bitcoinj based wallets use Tor by default seems very plausible.\n\nSo I started thinking about what it'd take to switch this on for everyone. The biggest problem is that SPV wallets can't verify unconfirmed/pending transactions for themselves, so they rely on counting the number of peers that announced it and assuming that their internet connections aren't being tampered with. Mostly this assumption is a good one - we have never heard anyone report that they were paid with a fake pending tx using a MITM attack.\n\nHowever, with Tor the chance of being MITMd goes up dramatically. Lots of people have reported exit nodes that are doing SSL stripping. Being sybilled when using exit nodes seems rather likely.\n\nConnecting to hidden services solve the MITM problem but screws you in a different way. Bitcoin Core has some weak heuristics in the code to try and ensure we don\u2019t accidentally connect to nodes all controlled by the same guys \u2026 mostly by trying to keep a good mix of /16s. This is probably not very hard to defeat, but it does at least raise the bar beyond \u201cbuy lots of amazon VMs\u201d. With hidden services we lose that. Also, there aren\u2019t very many nodes running as hidden services - if all bitcoinjs started hitting them simultaneously they\u2019d probably die.\n\ntl;dr the proposal starts here\n\nLet\u2019s fix this so SPV wallets can use Tor by default. Downgrading things is not an option, it must be pure upgrade. We can do it like this:\n\n1) Firstly, we observe that MITM only matters when we\u2019re trying to count pending transaction announcements, but most of the load SPV wallets impose on the network is chain filtering. So it\u2019s OK to download the chain from any arbitrary clearnet IP via Tor because we\u2019re checking Merkle branches.  This ensures we won\u2019t put excessive load on hidden service nodes.\n\n2) Secondly, we bump the protocol version, add a service flag and introduce a new P2P protocol command \u201ctor?\u201d. If a client sends a tor? message to a node that has the new service flag set, it will respond with a new \u201ctor\u201d message that contains a regular addr packet, with a single address, the IPv6-ified version of its hidden service name.\n\n3) SPV wallets that want to get a good mix of nodes for measuring pending transactions identify nodes on the clearnet via their addr announcements+service flag, in the normal way. They select some of these nodes using the standard clearnet anti-sybil heuristics and connect without using Tor. They proceed to query them for their hidden service key. After they\u2019ve done that, they record the public IP->hidden service mapping and can go ahead and connect back to them at any later time via Tor itself.\n\nThis would seem to be pointless - did we not just go ahead and bypass Tor entirely, thus making neither node hidden? Is it not a dead cert that the next connection the node gets via Tor is likely the same computer? Yes, but it only matters the first time. As long as those nodes are somewhat stable the mapping will be recorded on disk and the next time the wallet starts, it\u2019ll skip straight to using Tor.\n\nThe goal of all that is that we get to keep our existing IPv4 based anti-sybil heuristics, so we can\u2019t possibly make anything worse, only better. Plus, we\u2019ve now set things up so in future if/when we come up with a better anti-sybil system based on anonymous identities or other fancy crypto, we can take out the \u201cconnect via clearnet\u201d step and go straight to using hidden services with only a very small set of code changes and no new protocol work.\n\nI like this idea for several reasons:\n\nIt feels implementable to me in about a couple of weeks wall-time. The tasks are small - the new tor? p2p message is super easy to implement because a node already knows if it\u2019s a hidden service or not. On the bitcoinj side, it\u2019d take a bit of work to implement the extra storage of IPv4->onion mappings and ensure the right kind of connection is used at the right time, but it\u2019s not all that hard.\nWe could switch Tor on by default for a lot of users.\nOn the bitcoind side, Tor runs as a separate process and because it initiates connections to bitcoind, it can be easily sandboxed, e.g. ran as a different UNIX user or even run inside a chroot/ptrace jail. Even though Tor is likely to contain exploits, we can easily keep them away from the wallet. So there\u2019s not much additional surface area.\nObviously as it\u2019s pure Java and client only, Orchid is immune to buffer overflows/double frees and other such security problems.\nIt\u2019s optional for all parties. Wallet clients can try to fall back to non-Tor usage if their access to Tor seems to be blocked somehow.\nTor is the gold standard for resisting traffic analysis - we know thanks to Snowden that it\u2019s good at this task.\n\nTo launch I\u2019d probably have a percentage throttle hosted on some SSLd website, so we can control the load placed on the existing hidden service nodes.\n\nFeedback welcome.\n\n\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/18fe96f5/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 7453 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/18fe96f5/attachment.p7s>"
            },
            {
                "author": "Brooks Boyd",
                "date": "2014-01-15T23:07:07",
                "message_text_only": ">\n> 2) Secondly, we bump the protocol version, add a service flag and\n> introduce a new P2P protocol command \u201ctor?\u201d. If a client sends a tor?\n> message to a node that has the new service flag set, it will respond with a\n> new \u201ctor\u201d message that contains a regular addr packet, with a single\n> address, the IPv6-ified version of its hidden service name.\n>\n\n\nRather than a separate message type that implies binding a clearnet IP to a\nhidden service ID, why not add the service flag that the peer would like\nTor addresses, and the remote peer can then add IPv6-ified hidden service\naddresses to \"addr\" messages? May need to modify the network address format\nto include the ability to differentiate IPv6 clearnet vs. Tor addresses,\nbut then you remove the implication that a node has to give both public and\nprivate IPs to a peer. If it's part of a batch of \"addr\"s, it could be my\nown hidden service ID, but it could also be one that I learned from someone\nelse and is now propagating, for anyone to bootstrap with Tor hidden\nservice peers if they'd like.\n\nBrooks\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/2f39ea14/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-15T23:32:38",
                "message_text_only": ">\n> May need to modify the network address format to include the ability to\n> differentiate IPv6 clearnet vs. Tor addresses\n>\n\nsipa already implemented some clever hack where the 80-bit Tor keys are\nmapped to a subregion of reserved IPv6 space, giving magical IPv6 hidden\nservice addresses. So addr packets can and do already contain onion\naddresses.\n\n\n> but then you remove the implication that a node has to give both public\n> and private IPs to a peer. If it's part of a batch of \"addr\"s, it could be\n> my own hidden service ID, but it could also be one that I learned from\n> someone else and is now propagating, for anyone to bootstrap with Tor\n> hidden service peers if they'd like.\n>\n\nHmm. So you mean that we pick a set of peers we believe to not be sybils of\neach other, but they might give us hidden services run by other people? I\nneed to think about that. If they're getting the hidden services just from\naddr announcements themselves, then you just punt the issue up a layer -\nwhat stops me generating 10000 hidden service keys that all map to my same\nmalicious node, announcing them, and then waiting for the traffic to\narrive? If clearnet nodes inform of their own hidden service IDs, that\nissue is avoided.\n\nMy goal here is not necessarily to hide P2P nodes - we still need lots of\nclearnet P2P nodes for the forseeable future no matter what. Rather we're\njust using hidden services as a way to get authentication and encryption.\nActually the 6-hop hidden service circuits are overkill for this\napplication, a 3-hop circuit would work just as well for most nodes that\naren't Tor-exclusive.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/bb7a5a6d/attachment.html>"
            },
            {
                "author": "Brooks Boyd",
                "date": "2014-01-16T02:26:23",
                "message_text_only": ">\n> My goal here is not necessarily to hide P2P nodes - we still need lots of\n> clearnet P2P nodes for the forseeable future no matter what. Rather we're\n> just using hidden services as a way to get authentication and encryption.\n> Actually the 6-hop hidden service circuits are overkill for this\n> application, a 3-hop circuit would work just as well for most nodes that\n> aren't Tor-exclusive.\n>\n\nAh, I see, so you're intending to use the Tor hidden services not for their\noriginal purpose (hiding), but rather as as \"authentication\" (someone may\nspoof my clearnet IP, but only I have the private key that makes this Tor\nhidden service connect to me, so you can trust when you connect to it it's\nreally me). So if you trust the clearnet IP to be a friendly node, that\nmakes a more secure connection, but if you're already talking to a bad\nnode, moving the communication to Tor doesn't change that. I agree the\nsix-hop circuits would be overkill for that; I wonder if the network\nslowdown you get on Tor will be worth the increased security? Yes, you'll\nbe more protected from MITM, but if this is widely adopted, would the\noverall transactions/second the Bitcoin network could handle go down?\n\nBrooks\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140115/89df0023/attachment.html>"
            },
            {
                "author": "Miron",
                "date": "2014-01-16T04:30:11",
                "message_text_only": "On Wed, 2014-01-15 at 20:26 -0600, Brooks Boyd wrote:\n>         My goal here is not necessarily to hide P2P nodes - we still\n>         need lots of clearnet P2P nodes for the forseeable future no\n>         matter what. Rather we're just using hidden services as a way\n>         to get authentication and encryption. Actually the 6-hop\n>         hidden service circuits are overkill for this application, a\n>         3-hop circuit would work just as well for most nodes that\n>         aren't Tor-exclusive. \n>         \n> \n> \n...\n> communication to Tor doesn't change that. I agree the six-hop circuits\n> would be overkill for that; I wonder if the network slowdown you get\n\nBTW, I believe that the number of hops can be reduced below 3 on both\nsides (client/server).  For Orchid, this will require a change to\nCircuitPathChooser.  For other Tor implementations, it might require\nusing the control port to custom-build a circuit."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-16T10:25:18",
                "message_text_only": "Yes correct, using hidden services just as a kind of more complicated, out\nof process/sandboxable SSL.\n\n\n> would the overall transactions/second the Bitcoin network could handle go\n> down?\n>\n\nIf all nodes talked to each other all the time over Tor, probably yes\nbecause Bitcoin is quite sensitive to latency. But what I'm proposing here\nis less ambitious. It's just about protecting (parts of)\nend-user-to-network communication, which is a much less risky sort of\nchange. P2P nodes would still talk to each other in the clear.\n\nSSL for everything is still an idea I like, but it's true that increasing\nbitcoind attack surface area is not something to take lightly.\n\nConsidering that the clearnet sybil protection also relies on scaling\n> up the resource requirements for an attacker, why not require hidden\n> service addresses following a certain pattern, like a fixed prefix?\n\n\nI'm sure we can come up with all kinds of neat anti-sybil techniques, but\nIMHO they are separate projects. I'm trying to find an upgrade that's small\nenough to be easily switched on by default for lots of users, today, that\nis low risk for the network overall. Later on we can add elaborations.\n\nThe SPV node could connect to the IP using Tor.  It would preserve the\n> privacy of the SPV node - hard to see it's running Bitcoin.  It also\n> reduces the ability of an attacker to MITM because the routing varies\n> with each exit node.\n\n\nRight so the key question is, to what extent does Tor open you up to MITM\nattacks?  I don't have a good feel for this. I read about exit nodes\nroutinely doing very naughty things, but I don't know how widespread that\nis. Probably you're right that with random selection of exits you're not\nexcessively likely to get MITMd.\n\nHow does Tor itself manage anti-sybil? I know they have the directory\nconsensus and they measure nodes to ensure they're delivering the resources\nthey claim to have. Punting anti-sybil up to the Tor people and letting\nthem worry about it is quite an attractive idea.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/61cfcf3b/attachment.html>"
            },
            {
                "author": "Isidor Zeuner",
                "date": "2014-01-16T03:54:43",
                "message_text_only": "quote:\n> > but then you remove the implication that a node has to give both public\n> > and private IPs to a peer. If it's part of a batch of \"addr\"s, it could be\n> > my own hidden service ID, but it could also be one that I learned from\n> > someone else and is now propagating, for anyone to bootstrap with Tor\n> > hidden service peers if they'd like.\n> >\n>\n> Hmm. So you mean that we pick a set of peers we believe to not be sybils of\n> each other, but they might give us hidden services run by other people? I\n> need to think about that. If they're getting the hidden services just from\n> addr announcements themselves, then you just punt the issue up a layer -\n> what stops me generating 10000 hidden service keys that all map to my same\n> malicious node, announcing them, and then waiting for the traffic to\n> arrive? If clearnet nodes inform of their own hidden service IDs, that\n> issue is avoided.\n>\n\nConsidering that the clearnet sybil protection also relies on scaling\nup the resource requirements for an attacker, why not require hidden\nservice addresses following a certain pattern, like a fixed prefix?\nEssentially also a PoW scheme...\n\n> My goal here is not necessarily to hide P2P nodes - we still need lots of\n> clearnet P2P nodes for the forseeable future no matter what.\n\nWhat would you consider as the main merits of clearnet nodes?\n\nBest regards,\n\nIsidor"
            },
            {
                "author": "Robert McKay",
                "date": "2014-01-15T23:37:15",
                "message_text_only": "On Wed, 15 Jan 2014 23:51:21 +0100, Mike Hearn wrote:\n> The goal of all that is that we get to keep our existing IPv4 based\n> anti-sybil heuristics, so we can\u2019t possibly make anything worse,\n> only better. Plus, we\u2019ve now set things up so in future if/when we\n> come up with a better anti-sybil system based on anonymous identities\n> or other fancy crypto, we can take out the \u201cconnect via clearnet\u201d\n> step and go straight to using hidden services with only a very small\n> set of code changes and no new protocol work.\n\nI think it might be ok to use proof-of-stake on as an anti-sybil scheme \non tor.. people would obviously not want to associate their wallet with \ntheir IP address, but is there any harm in associating it with a \n(temporary) tor service id (especially one that isn't used for anything \nother than relaying bitcoin transactions)? If each node you connect too \ncan sign some challenge with a key that controls some BTC (and your \nclient node verifies that the funds are different) then that might be \nuseful.. even if it were only a small 0.01BTC stake that would be \nsimilar to the cost of obtaining another IP through a cheap VPS or VPN \nand significantly higher than the cost to an attacker who is able to \nMITM everything and operate on any IP anyway.\n\nRob"
            },
            {
                "author": "Miron",
                "date": "2014-01-16T04:29:47",
                "message_text_only": "On Wed, 2014-01-15 at 23:51 +0100, Mike Hearn wrote:\n...\n> 3) SPV wallets that want to get a good mix of nodes for measuring\n> pending transactions identify nodes on the clearnet via their addr\n> announcements+service flag, in the normal way. They select some of\n> these nodes using the standard clearnet anti-sybil heuristics and\n> connect without using Tor. They proceed to query them for their hidden\n\nThe SPV node could connect to the IP using Tor.  It would preserve the\nprivacy of the SPV node - hard to see it's running Bitcoin.  It also\nreduces the ability of an attacker to MITM because the routing varies\nwith each exit node."
            },
            {
                "author": "Miron",
                "date": "2014-01-16T04:40:26",
                "message_text_only": "On Wed, 2014-01-15 at 20:29 -0800, Miron wrote:\n> On Wed, 2014-01-15 at 23:51 +0100, Mike Hearn wrote:\n> ...\n> > 3) SPV wallets that want to get a good mix of nodes for measuring\n> > pending transactions identify nodes on the clearnet via their addr\n> > announcements+service flag, in the normal way. They select some of\n> > these nodes using the standard clearnet anti-sybil heuristics and\n> > connect without using Tor. They proceed to query them for their hidden\n> \n> The SPV node could connect to the IP using Tor.  It would preserve the\n> privacy of the SPV node - hard to see it's running Bitcoin.  It also\n> reduces the ability of an attacker to MITM because the routing varies\n> with each exit node.\n> \n\nIt would also be good to gossip the mapping of (IP -> onion address).\nThis would allow detection of a future MITM, since the MITM can't spoof\nthe onion fingerprint."
            }
        ],
        "thread_summary": {
            "title": "Tor / SPV",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Miron",
                "Robert McKay",
                "Isidor Zeuner",
                "Mike Hearn",
                "Brooks Boyd"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 18705
        }
    },
    {
        "title": "[Bitcoin-development] Bait for reusable addresses",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2014-01-16T01:23:04",
                "message_text_only": "One challenge with reusable addresses is that while they result in a\nsmall constant overhead for full nodes in searching for their own\ntransactions they create large overheads for SPV nodes.\n\nOne way to address this is for the SPV nodes to hand their servers\ntheir blinding private key so that the server may test addresses on\ntheir behalf. The primary problem with this is that it is\nnon-reputable:  If I show you a blinding private key and say a set of\ntransactions are related you will be utterly convinced of it, the\ntransactions really are related. This makes the privacy brittle.\n\nIt also has a downside of not being indexable for the server, the\nserver must do O(clients * reusable-address-txn) work and the work\nincludes an ECC multiply.\n\nAn idea that Adam Back had originally proposed was including optional\n\"bloom bait\", a small token\u2014 say 8 bits\u2014 that distinguished\ntransactions which allowed an anonymity set vs filtering trade off.\nSuch a bait would be indexable, enabling faster lookup too.\n\nBut bloom bait has privacy problems more severe than the current SPV\nbloom filtering. While you leak information to your SPV servers today\nif you use bloom filtering the leak usually goes no further. So a\ncompromise requires both a statistical attack _and_ using SPV servers\nthat log data against your interest.  With bloom bait the whole\nnetwork can see the relation. That is unfortunate.\n\nI suggest instead that with optional bait is included in an address\nthat the sender compute H(nonce-pubkey) and then pick one byte at\nrandom out of the first 16 and xor it with the specified bait and\nstore the result in the transaction.  An SPV server can now index the\nbait as it comes in by extracting 16 8-bit keys from each transaction\n(the 16 bytes xored with the bait in the transaction).  When the\nclient wants to search for transactions it can give the server a list\nof keys its interested in\u2014 including their real key and number of\nrandom number of cover keys.\n\nObTechnicalWank:  This is a specific simple instance of a general\nclass of solutions which are related to locally decodable error\ncorrecting codes: E.g. the transaction data represents a codeword in a\nvector-space and the degree of freedom provided by the adjustable\nprefix is used to ensure that codeword is never more than a certain\ndistance from a specified point.  The point isn't made public in the\ntransaction and it's hidden from the server by providing several\npoints.   There is still an information leak here\u2014 as if someone\nbelieves a set of transactions are related they can intersect their\nradiuses and test if the intersection is empty, and if it's not assume\nthat they found the secret bait\u2014 but it is substantially lower an\ninformation leak than the prefix case.\n\nI didn't give any though into the parameters 8-bits and 16 dimensions.\nSome reasoning should be done to fix the parameters in order to make\nthem the most useful: e.g.\n\nSystems derived from more complex linear codes might give better\nperformance, e.g. two secret bloom baits, two prefixes in the\ntransaction bait0^random_char[0-8], bait1^random_char[0-8],  server\nextracts 16 keys.. and returns to the client transactions which have\nat least two key matches with their list.\n\nObviously whatever is used needs to be easy to implement, but schemes\nloosely based on fountain codes should only require picking some\nthings and xoring... so they should be simple enough."
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-24T09:02:18",
                "message_text_only": "On Wed, Jan 15, 2014 at 05:23:04PM -0800, Gregory Maxwell wrote:\n> It also has a downside of not being indexable for the server, the\n> server must do O(clients * reusable-address-txn) work and the work\n> includes an ECC multiply.\n> \n> An idea that Adam Back had originally proposed was including optional\n> \"bloom bait\", a small token\u2014 say 8 bits\u2014 that distinguished\n> transactions which allowed an anonymity set vs filtering trade off.\n> Such a bait would be indexable, enabling faster lookup too.\n> \n> But bloom bait has privacy problems more severe than the current SPV\n> bloom filtering. While you leak information to your SPV servers today\n> if you use bloom filtering the leak usually goes no further. So a\n> compromise requires both a statistical attack _and_ using SPV servers\n> that log data against your interest.  With bloom bait the whole\n> network can see the relation. That is unfortunate.\n\nYes, but remember I proposed prefixing in my blockchain data query paper\nbecause it's a trade-off between theoretical good privacy and\nbrittleness. The real world experience is that users, or to be exact\nwallet authors, turn down SPV privacy parameters until bloom filters\nhave almost no privacy in exchange for little bandwidth usage. (though\nload on the server is unchanged of course)\n\nThe brittleness comes in because the moment you connect to a malicious,\ndata-collecting peer, the contents of your wallet are all revealed.\nFrankly that'd be a disaster for CoinJoin too, and I think it'd be a\nbigger disaster than the poor specificity patterns leaked by prefix\nusage. If anyone wants to deanonymize CoinJoin there will be a lot of\nincentives to do so, and you only need wallet content data to do that.\n\n> I suggest instead that with optional bait is included in an address\n> that the sender compute H(nonce-pubkey) and then pick one byte at\n> random out of the first 16 and xor it with the specified bait and\n> store the result in the transaction.  An SPV server can now index the\n> bait as it comes in by extracting 16 8-bit keys from each transaction\n> (the 16 bytes xored with the bait in the transaction).  When the\n> client wants to search for transactions it can give the server a list\n> of keys its interested in\u2014 including their real key and number of\n> random number of cover keys.\n> \n> I didn't give any though into the parameters 8-bits and 16 dimensions.\n> Some reasoning should be done to fix the parameters in order to make\n> them the most useful: e.g.\n> \n> Systems derived from more complex linear codes might give better\n> performance, e.g. two secret bloom baits, two prefixes in the\n> transaction bait0^random_char[0-8], bait1^random_char[0-8],  server\n> extracts 16 keys.. and returns to the client transactions which have\n> at least two key matches with their list.\n> \n> Obviously whatever is used needs to be easy to implement, but schemes\n> loosely based on fountain codes should only require picking some\n> things and xoring... so they should be simple enough.\n\nWell, that's the big question: How much extra data do we need and what's\nthe chance that this will get turned into miner-committed indexes? Or\neven just provided at all? We keep on saying that miner-commitments may\nnext happen at all because of performance issues, and adding n extra\nindexes doesn't exactly help that situation. I really suspect that the\nmoment that gets implemented we'll see wallet software use that for\nsimple security reasons, so plan ahead for that.\n\nIn the short term without miner-commitments it's just a question of how\nmuch extra load we subject servers to. Again, getting people to even\nimplement prefixes isn't a trivial argument to make, yet bloom has some\nserious scalability problems. (though does do roughly what you're\nproposing)\n\nIn any case, your \"bait\" proposal is stealth address specific - how\nwould you propose applying the same principle to all addresses? Again,\nit's a tradeoff between brittleness - connecting to a malicious peer\nreveals your wallet - and blockchain stats data.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001315c71472fdce344f85f794a7135e25554f2b51dfa6b83c4\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/d822bb2a/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-24T12:26:19",
                "message_text_only": ">\n> brittleness. The real world experience is that users, or to be exact\n> wallet authors, turn down SPV privacy parameters until bloom filters\n> have almost no privacy in exchange for little bandwidth usage.\n\n\nThat's not fundamental though, it just reflects that the only\nimplementation of this is used on a wide range of devices and doesn't yet\nhave any notion of bandwidth modes or monitoring. It can and will be\nresolved at some point.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/ce962977/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-24T15:26:18",
                "message_text_only": "On Fri, Jan 24, 2014 at 12:26:19PM +0000, Mike Hearn wrote:\n> >\n> > brittleness. The real world experience is that users, or to be exact\n> > wallet authors, turn down SPV privacy parameters until bloom filters\n> > have almost no privacy in exchange for little bandwidth usage.\n> \n> \n> That's not fundamental though, it just reflects that the only\n> implementation of this is used on a wide range of devices and doesn't yet\n> have any notion of bandwidth modes or monitoring. It can and will be\n> resolved at some point.\n\nResolved for some users, not for all. The underlying trade-off will\nalways be there; less bandwidth makes it harder, more addresses to check\nmakes it harder; an HD wallet used properly without re-using addresses\nwill quickly lead to a fairly full bloom filter unless addresses are\nexpired, and expiration leads to scenarios where funds can be lost.\n\nI think we need to provide users with better options than that.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000064ddd387d7548c97c4d42f4df1008d180f306c59e0440f4f\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/8a53d806/attachment.sig>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-24T21:58:28",
                "message_text_only": "> \n> \n> \n> I think we need to provide users with better options than that.\n> \n\nPerfect privacy without extraordinary computational overhead today means downloading everything. But we could provide better tools to *shift* bandwidth requirements rather than try to reduce them. \n\nI've been thinking about a setup where user runs a UTXO only, and maybe even outbound-connect only (like bitcoinj), full node at home. Then using Tor, mostly for tunneling, they host a hidden service they can connect back to from their smartphone to see balances, manage receive addresses, send funds, etc.\n\nThe smartphone is not doing SPV, it's like a web client for the wallet running at home. The initial connection between the smartphone and home wallet has the phone learn two codes, one is the hidden service name, another is an access token which is revocable. You may require further authentication from that point. \n\nWith fast bootstrapping / checkpointing of the UTXO I think usability could be as good as SPV, and you would get push-notification of relevant transactions with zero privacy trade-off.\n\nI wonder if people would want to run such an app, if they would run it on their desktop, a dedicated machine, or an old smartphone or other cheap ARM device."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-24T23:15:56",
                "message_text_only": "I've thought about [ab]using Tor as a STUN replacement before, but the\nissue is a lot of people don't have computers that are switched on all the\ntime anymore except for their smartphones, which are too weak to calculate\nthe UTXO set. The trend has been for a while towards laptops, phones and\ntablets, all of which are relatively weak.\n\nI think there might be a market for a one-click \"bring up an amazon VPS,\nsync a full node and make it accessible only to me\" type service though!\n\n\n\nOn Fri, Jan 24, 2014 at 10:58 PM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n> >\n> >\n> >\n> > I think we need to provide users with better options than that.\n> >\n>\n> Perfect privacy without extraordinary computational overhead today means\n> downloading everything. But we could provide better tools to *shift*\n> bandwidth requirements rather than try to reduce them.\n>\n> I've been thinking about a setup where user runs a UTXO only, and maybe\n> even outbound-connect only (like bitcoinj), full node at home. Then using\n> Tor, mostly for tunneling, they host a hidden service they can connect back\n> to from their smartphone to see balances, manage receive addresses, send\n> funds, etc.\n>\n> The smartphone is not doing SPV, it's like a web client for the wallet\n> running at home. The initial connection between the smartphone and home\n> wallet has the phone learn two codes, one is the hidden service name,\n> another is an access token which is revocable. You may require further\n> authentication from that point.\n>\n> With fast bootstrapping / checkpointing of the UTXO I think usability\n> could be as good as SPV, and you would get push-notification of relevant\n> transactions with zero privacy trade-off.\n>\n> I wonder if people would want to run such an app, if they would run it on\n> their desktop, a dedicated machine, or an old smartphone or other cheap ARM\n> device.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140125/c0829de3/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2014-01-24T15:42:35",
                "message_text_only": "I think prefix has analysis side effects.  There are (at least) 4 things\nthat link payments: the graph of payment flows, timing, precise amounts, IP\naddresses, but with prefix a 5th: the prefix allows public elmination of\ncandidates connections, I think that may make network flow analysis even\nmore effective than it has been.\n\nSo SPV can be tuned as Mike just said, and as Greg pointed out somewhere\nbloom is more private than prefix because its a wallet to node connection,\nnot a node broadcast, and Mike mentioned embedded Tor in another post to\nboost node-capture issues with hostile network.\n\nSo reusable addresses are cool for full node recipients (0-bit prefix) or\ntrusted server offload (your own desktop, VPS, or trusted service provider\nnode, and solve real problems for the use case of static and donation\naddresses particularly with this second delegatable key for no-funds at risk\nsearch (which is even good as Jeremey said for your own node, in a offline\nwallet use case).\n\nNow while it would be clearly a very nice win if reusable addresses could be\nmade SPV-like in network characteristics and privacy, but we dont have a\nplausible mechanism yet IMO.  Close as we got was Greg's enhancement of\nmy/your \"bloom bait\"/\"prefix\" concept to make multiple candidate baits to\nprovide some ambiguity (still allows elimination, just slightly less of it).\n\nIf we can find some efficient crypto to solve that last one, we could even\nadopt them generally if it was efficient enough without needing interactive\none-use address release.\n\nMaybe we should ask some math/theoretical crypto people if there is anything\nlike public key watermarking or something that could solve this problem\nefficiently.\n\nFor the related but different case of transaction level authenticity I like\nAlan's server derived but communicated scalar & base to allow the client to\ndo at least TOFU.\n\nPayment protocol may add another level of identity framework on top of TOFU\naddresses (at a lower level than the payment messages defined now), and\nwithout then needing a batch upload of offline signed secondary address\nsigature that Mike described a while back, at least in person, maybe online\nsomewhere (an add on with similar purpose and effect to Alan's TOFU, but\nthen with revocation, identity and certification for merchants).\n\nI have not talked about payment protocols main app level function I think we\nall understand and agree on the purpose and use of the server and optional\nclient certs in that.  People may wish to add other cert types later (eg\nPGP, SSH etc) but this version covers the common merchant tech, and allows\nclient-side certs to be experimented with for identity also (eg imagine as a\nway to enrol with regulated entities like exchanges.)\n\nTell me if I am misunderstanding anything :)\n\nAdam\n\nOn Fri, Jan 24, 2014 at 12:26:19PM +0000, Mike Hearn wrote:\n>     brittleness. The real world experience is that users, or to be exact\n>     wallet authors, turn down SPV privacy parameters until bloom filters\n>     have almost no privacy in exchange for little bandwidth usage.\n>\n>   That's not fundamental though, it just reflects that the only\n>   implementation of this is used on a wide range of devices and doesn't\n>   yet have any notion of bandwidth modes or monitoring. It can and will\n>   be resolved at some point.\u00c2"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-24T16:13:30",
                "message_text_only": "On Fri, Jan 24, 2014 at 04:42:35PM +0100, Adam Back wrote:\n> I think prefix has analysis side effects.  There are (at least) 4 things\n> that link payments: the graph of payment flows, timing, precise amounts, IP\n> addresses, but with prefix a 5th: the prefix allows public elmination of\n> candidates connections, I think that may make network flow analysis even\n> more effective than it has been.\n\nYou know, we've made this discussion rather confusing because we're\nusing the term \"prefix\" for both prefix filters - which are equivalent\nto bloom filters but with better scalability - and the act of forcing a\nscriptPubKey to match some given prefix. I suggest we call the latter\nconcept 'wallet clustering' as it can just as easily be applied to bloom\nfilters, as well as Gregory Maxwell's candidate bait scheme, and for\nthat matter, prefix filters with a tweak option, e.g. H(scriptPubKey |\nnTweak)\n\nSo yeah, clustering schemes make network flow analysis easier if the\nattacker only has blockchain data to work from. But they can also make\nnetwork flow analysis significantly harder for attackers that have query\nlogs from attackers running nodes, and as we know sybiling the network\nto get query logs is very easy. I'd rather develop systems that don't\nfail catastrophically against sybil attack.\n\n> So SPV can be tuned as Mike just said, and as Greg pointed out somewhere\n> bloom is more private than prefix because its a wallet to node connection,\n> not a node broadcast, and Mike mentioned embedded Tor in another post to\n> boost node-capture issues with hostile network.\n\nThe hostile network is likely to have a significant percentage of\nhostile, query-logging nodes. For one thing, running nodes is expensive\nand would be even more so in a blocksize limit raising scenario, and a\neasy way to pay those costs is by selling query data.\n\n> So reusable addresses are cool for full node recipients (0-bit prefix) or\n> trusted server offload (your own desktop, VPS, or trusted service provider\n> node, and solve real problems for the use case of static and donation\n> addresses particularly with this second delegatable key for no-funds at risk\n> search (which is even good as Jeremey said for your own node, in a offline\n> wallet use case).\n\nSure, in some cases you can use zero-length prefixes with trusted nodes;\nnot many users have access to such nodes.\n\n> Now while it would be clearly a very nice win if reusable addresses could be\n> made SPV-like in network characteristics and privacy, but we dont have a\n> plausible mechanism yet IMO.  Close as we got was Greg's enhancement of\n> my/your \"bloom bait\"/\"prefix\" concept to make multiple candidate baits to\n> provide some ambiguity (still allows elimination, just slightly less of it).\n> \n> If we can find some efficient crypto to solve that last one, we could even\n> adopt them generally if it was efficient enough without needing interactive\n> one-use address release.\n\nConversely, it'd be interesting if someone can dig up a proof showing\nthat doing much better than Gregory's ambiguity tradeoff is impossible.\nMy gut feeling is that it is, especially if you take into account the\ndesire for scalability - if we're to make the blocksize bigger assuming\nall nodes have all data for every block just isn't going to happen.\n\n> Maybe we should ask some math/theoretical crypto people if there is anything\n> like public key watermarking or something that could solve this problem\n> efficiently.\n\nYes, and I think such schemes should be pursued. But in the near-term\nwhat can we offer users?\n\nRemember that making stealth addresses and similar clustering-using\nschemes capable of backward compatible upgrades isn't hard; if the\ncrypto is found later it can be adopted.\n\nWhat is harder is that people want miners to commit to various types of\nindexes - changing those indexes would require a soft-fork and there's\nmuch pressure for those indexes to have very good performance\nproperties.\n\n> For the related but different case of transaction level authenticity I like\n> Alan's server derived but communicated scalar & base to allow the client to\n> do at least TOFU.\n> \n> Payment protocol may add another level of identity framework on top of TOFU\n> addresses (at a lower level than the payment messages defined now), and\n> without then needing a batch upload of offline signed secondary address\n> sigature that Mike described a while back, at least in person, maybe online\n> somewhere (an add on with similar purpose and effect to Alan's TOFU, but\n> then with revocation, identity and certification for merchants).\n\nNote how well the OpenPGP + bitcoin address UID ideas I and others have\nbeen talking about meshes with TOFU: the logic for \"Do I trust this\naddress to send money?\" and \"Do I trust this PGP key to send more\nencrypted mail/verify signatures?\" is just different questions about the\nsame human identity, so combining the two is synergistic. For instance I\nmight want to communicate securely with a friend via email and also send\nfunds to them securely.\n\nAn interesting nuance is ideally that UID can be used for more than just\na single address type, e.g. BIP32 derivation chains can the same root\npubkeys as stealth addresses. Though I don't know if the added\ncomplexity is worthwhile vs. just adding another UID for the BIP32\nderivation case.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001a2aeb2101283cb4e35d4a038b38a72a21af5092d8d8c9d2e\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/f31d3e9e/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Bait for reusable addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back",
                "Mike Hearn",
                "Peter Todd",
                "Jeremy Spilman",
                "Gregory Maxwell"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 22021
        }
    },
    {
        "title": "[Bitcoin-development] (space) efficient reusable addr via weil pairing IBE (Re: Bait for reusable addresses)",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2014-01-25T16:19:01",
                "message_text_only": "I think I figured out a proof of existance for a space efficient way to do\nbetter than bloom filters/prefix/bloom-bait.  (Must have been dreaming on it\nas I woke up with the idea following Peter's suggestion to try prove instead\nif its possible or not:).\n\nI wrote up the details here:\n\nhttps://bitcointalk.org/index.php?topic=431756.new\n\nIn summary with a use of novel application of IBE (*) based on weil-pairing\nso the recipient can send a delegation private key that is specific to the\nblock being queried.  It means the node that services the query has no\nability to correlate with queries in other blocks from the some user.  The\nsender derives a pub=IBE-extract(master-pub, id=previous block hash).  The\nabove link has more explanation, links and costs/risks.\n\nI think it maybe within possibility to do further than this because it is\nnot technically necessary to delegate decryption, only to delegate\nfiltering, which can be a simpler requirement so there remains perhaps\n(speculatively) a possibility to do it without introducing weil pairing\nhardness problem or using eg I mentioned public key steganography or\nsomething like that if there is anything similarly efficient but with more\nwidely used hardness assumptions.\n\nAdam\n\n(*) analogous to the way IBE is used as a building block for Non-Interactive\nForward Secrecy (NIFS)\n\nOn Fri, Jan 24, 2014 at 11:13:30AM -0500, Peter Todd wrote:\n>On Fri, Jan 24, 2014 at 04:42:35PM +0100, Adam Back wrote:\n>> Now while it would be clearly a very nice win if reusable addresses could\n>> be made SPV-like in network characteristics and privacy, but we dont have\n>> a plausible mechanism yet IMO.  [...]\n>>\n>> If we can find some efficient crypto to solve that last one, we could even\n>> adopt them generally if it was efficient enough without needing interactive\n>> one-use address release.\n>\n>Conversely, it'd be interesting if someone can dig up a proof showing\n>that doing much better than Gregory's ambiguity tradeoff is impossible."
            }
        ],
        "thread_summary": {
            "title": "(space) efficient reusable addr via weil pairing IBE (Re: Bait for reusable addresses)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1985
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Core 0.9rc1 release schedule",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-01-16T09:09:52",
                "message_text_only": "Hello all,\n\nIt has been way to long since last major release. Many improvements and new\nfeatures have been added to master since, so we'd like to do a 0.9rc1\nrelease soon.\n\nThe current aim is next month, February 2014.\n\nOf course there are still some open issues that need to be resolved before\nrelease\nhttps://github.com/bitcoin/bitcoin/issues?milestone=12&state=open\n\nIf there is something else that you're working on and needs to end up in\n0.9, or know of some nasty bug in master that should absolutely be solved\nfirst, please tell.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/48a8e991/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2014-01-16T10:41:37",
                "message_text_only": "Just a small note of caution for those joining in testing.\n\nhttps://github.com/bitcoin/bitcoin/issues/3529\nCurrently the master branch has this issue where leveldb renames all of\n.sst files to .ldb.  This makes running the 0.8.x version of Bitcoin think\nthe index is corrupt.  Until a fix is included in Bitcoin master, a\nworkaround to allow 0.8.x to work again is to simply rename all the files\nfrom .ldb back to .sst.\n\n(This workaround worked for me today but failed yesterday.  It's possible I\nmade an error yesterday.  If it fails for you please report as we really\nneed to know if there are other leveldb incompatibilities.)\n\nhttps://github.com/bitcoin/leveldb/pull/3\nThe fix for Bitcoin's leveldb is being discussed here.\n\nWarren\n\n\nOn Wed, Jan 15, 2014 at 11:09 PM, Wladimir <laanwj at gmail.com> wrote:\n\n> Hello all,\n>\n> It has been way to long since last major release. Many improvements and\n> new features have been added to master since, so we'd like to do a 0.9rc1\n> release soon.\n>\n> The current aim is next month, February 2014.\n>\n> Of course there are still some open issues that need to be resolved before\n> release\n> https://github.com/bitcoin/bitcoin/issues?milestone=12&state=open\n>\n> If there is something else that you're working on and needs to end up in\n> 0.9, or know of some nasty bug in master that should absolutely be solved\n> first, please tell.\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/592c2421/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-01-16T15:23:37",
                "message_text_only": "On Thursday, January 16, 2014 9:09:52 AM Wladimir wrote:\n> Hello all,\n> \n> It has been way to long since last major release. Many improvements and new\n> features have been added to master since, so we'd like to do a 0.9rc1\n> release soon.\n> \n> The current aim is next month, February 2014.\n> \n> Of course there are still some open issues that need to be resolved before\n> release\n> https://github.com/bitcoin/bitcoin/issues?milestone=12&state=open\n> \n> If there is something else that you're working on and needs to end up in\n> 0.9, or know of some nasty bug in master that should absolutely be solved\n> first, please tell.\n> \n> Wladimir\n\nhttps://github.com/bitcoin/bitcoin/pulls/luke-jr\n\nThese are pretty much all well-tested and stable for months now."
            },
            {
                "author": "Wladimir",
                "date": "2014-01-17T11:44:09",
                "message_text_only": "On Thu, Jan 16, 2014 at 4:23 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n>\n> https://github.com/bitcoin/bitcoin/pulls/luke-jr\n>\n> These are pretty much all well-tested and stable for months now.\n>\n\n#3242: Autoconf improvements needs rebase, and comment from jgarzik and me\ntaken into account (about -enable-frontends=).\n\nThe others appear to be more controversial as they affect mining/consensus.\nI'd really like to see ACKs from more reviewers and testers there before\nmerging.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/8541f89d/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-01-17T18:41:36",
                "message_text_only": "On Friday, January 17, 2014 11:44:09 AM Wladimir wrote:\n> On Thu, Jan 16, 2014 at 4:23 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > https://github.com/bitcoin/bitcoin/pulls/luke-jr\n> > \n> > These are pretty much all well-tested and stable for months now.\n> \n> #3242: Autoconf improvements needs rebase, and comment from jgarzik and me\n> taken into account (about -enable-frontends=).\n\nI'll try to get this done over the weekend.\n\n> The others appear to be more controversial as they affect mining/consensus.\n> I'd really like to see ACKs from more reviewers and testers there before\n> merging.\n\nCan you elaborate on this? I can see how Proposals might, if buggy, affect \nconsensus, but the rest shouldn't. I don't think there's anything \ncontroversial in any of these (does someone disagree with CPFP?).\n\nLuke"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-01-17T20:53:47",
                "message_text_only": "<vendor hat: on>  BitPay sure would like to see CPFP in upstream.\n\nI think the main hurdle to merging was that various people disagreed\non various edge case handling and implementation details, but no\nfundamental objections.\n\n\nOn Fri, Jan 17, 2014 at 1:41 PM, Luke-Jr <luke at dashjr.org> wrote:\n> On Friday, January 17, 2014 11:44:09 AM Wladimir wrote:\n>> On Thu, Jan 16, 2014 at 4:23 PM, Luke-Jr <luke at dashjr.org> wrote:\n>> > https://github.com/bitcoin/bitcoin/pulls/luke-jr\n>> >\n>> > These are pretty much all well-tested and stable for months now.\n>>\n>> #3242: Autoconf improvements needs rebase, and comment from jgarzik and me\n>> taken into account (about -enable-frontends=).\n>\n> I'll try to get this done over the weekend.\n>\n>> The others appear to be more controversial as they affect mining/consensus.\n>> I'd really like to see ACKs from more reviewers and testers there before\n>> merging.\n>\n> Can you elaborate on this? I can see how Proposals might, if buggy, affect\n> consensus, but the rest shouldn't. I don't think there's anything\n> controversial in any of these (does someone disagree with CPFP?).\n>\n> Luke\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-17T21:04:16",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nCPFP is *extremely* important. People have lost money because this\nfeature is missing. I think it's critical that it makes it into 0.9\n\nIf I get a low-priority donation from a blockchain.info wallet, that\nmoney can disappear if it doesn't make it into a block in 24 hours -\nbc.i will forget the transaction and happily respend its inputs on the\nnext transaction that user makes.\n\nI wouldn't mind paying $1 in fees to receive a $50 donation. But\nwithout CPFP there's no way to do that.\n\n\nOn 01/17/2014 12:53 PM, Jeff Garzik wrote:\n> <vendor hat: on>  BitPay sure would like to see CPFP in upstream.\n> \n> I think the main hurdle to merging was that various people\n> disagreed on various edge case handling and implementation details,\n> but no fundamental objections.\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJS2ZrQAAoJEAdzVfsmodw4CrwP+gM2iXLcvQK2VlhoN7kRCnvH\n+YJ87fXlMl0IcRqVDyaCF6w3+U/9VG+p+/eFvBNzxMMTbylWbsSXF6GxavwPhVt4\nzw//VNLIfOu+88HsUofamvZJGHQOArwzlOYRgX1Lr9ms3KSQ2QWkW+Z6QD7qmkO2\nbJNzxJ+vffmz24mQ6hg7a33YW+403TbeqxcPewbjNr76hvPEjzlTPhpVo4A/gqSu\n6rcJPQIkFdTZX/xy5hyZsQzswNv/bYyrE9XhEIimsqt96sjTDrB4EZKzfkQ/jLeP\nfudEcGEvRzJL9BSsa6mfUBzct2ilpii33q1vIIVYfIQIJmYl7U6YubloT235l2C7\n0v0RWn5Kux2R9B4YFKjR09Jc2273mrnGuUj7hKD0LPHfn/Jzxy1Ce4AIcaodlgwP\nu7vpvWiVEUcJkl3rn3enAyKCtD7zqe4k73ALq4yWjnDZRFEQ9DJEdEPEy+H8HlXY\nRFOtFxAr/Vdyp9STAgjve46M4g/Qc5C10qIueTyJO1h8XDPfV8HnZJNVJP3wtj0K\npC5vq7ADxkQ60F9w+vNEdo85AVWhITQ/Kq7dbSq5J1LxddivzRurnp2uX+U2LEkV\n9Hd2HuIM7E4uR0JZKRqPsFCJrpBuI4YPGHQB5pbq9eYAG4BdmTwTXUvd2FacI3mL\nbeN/c4m26MKQJTiMQyTl\n=u7Qb\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jouke Hofman",
                "date": "2014-01-18T11:34:41",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nWe rebroadcast incoming transactions without fees at several nodes,\nincluding bc.info, to keep them in mempools.\n\nOn 01/17/2014 10:04 PM, Mark Friedenbach wrote:\n> CPFP is *extremely* important. People have lost money because this \n> feature is missing. I think it's critical that it makes it into\n> 0.9\n> \n> If I get a low-priority donation from a blockchain.info wallet,\n> that money can disappear if it doesn't make it into a block in 24\n> hours - bc.i will forget the transaction and happily respend its\n> inputs on the next transaction that user makes.\n> \n> I wouldn't mind paying $1 in fees to receive a $50 donation. But \n> without CPFP there's no way to do that.\n> \n> \n> On 01/17/2014 12:53 PM, Jeff Garzik wrote:\n>> <vendor hat: on>  BitPay sure would like to see CPFP in\n>> upstream.\n> \n>> I think the main hurdle to merging was that various people \n>> disagreed on various edge case handling and implementation\n>> details, but no fundamental objections.\n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nCenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For \n> Critical Workloads, Development Environments & Everything In\n> Between. Get a Quote or Start a Free Trial Today. \n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>\n> \n_______________________________________________\n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.12 (GNU/Linux)\nComment: Using GnuPG with undefined - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJS2mbQAAoJEIilnEpWGBYhH+8H/2nIZjrrZIPi/4ZeTi71cZOe\n78oD4mzWM9zvRbjbGfIWrgTnkRQi4OQ/GorbRiyoAeKzAQ+SdeY8dkRsS14zpqpC\nw4efoJOTxgi69giBWGPWlPvAtTwD65EcfJmUs5XeGi7J/3E0qTyry6sDu8t2ip84\nhLUnqMOcNhc0J/k0KvBbEyl1YXcRWMjz5X2pMtY9yeMk+qFQPR1+RjZ+91OCRyui\nZ47jhHlbhc5daXAWrq4fb54uNSJWUnYky7yN2pDTovAVq5PNNVNJTdxbjXSyYmcP\nFwFNkARrgXRlSvf07FN991aa2u4CTkjRgA9uRrvcTtLXr8g2F0yymfPr0AQrgZg=\n=J9Z4\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-01-17T21:31:15",
                "message_text_only": "On Friday, January 17, 2014 8:53:47 PM Jeff Garzik wrote:\n> <vendor hat: on>  BitPay sure would like to see CPFP in upstream.\n> \n> I think the main hurdle to merging was that various people disagreed\n> on various edge case handling and implementation details, but no\n> fundamental objections.\n\nHeck, even I disagree with implementation details, but it's still better than \nnothing. We can always merge major reorganisations/reimplementations later \nwhen they're written: merging this one doesn't mean we're stuck with it \nforever...\n\nLuke"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-01-18T08:11:02",
                "message_text_only": "<ABISprotocol hat: on>\n\nregarding:\nstuff not getting into blockchain in a day's time,\nmicrodonations not facilitated as much as they could be,\n\nthat would be:\n\nvery bad\nmuch news\nsuch fail\n\nSeriously, that would not be so good.\n\nHope I made you laugh a bit\n\n\n\n> <vendor hat: on>  BitPay sure would like to see CPFP in upstream.\n>\n> I think the main hurdle to merging was that various people disagreed\n> on various edge case handling and implementation details, but no\n> fundamental objections.\n>\n>\n> On Fri, Jan 17, 2014 at 1:41 PM, Luke-Jr <luke at dashjr.org> wrote:\n>> On Friday, January 17, 2014 11:44:09 AM Wladimir wrote:\n>>> On Thu, Jan 16, 2014 at 4:23 PM, Luke-Jr <luke at dashjr.org> wrote:\n>>> > https://github.com/bitcoin/bitcoin/pulls/luke-jr\n>>> >\n>>> > These are pretty much all well-tested and stable for months now.\n>>>\n>>> #3242: Autoconf improvements needs rebase, and comment from jgarzik and\n>>> me\n>>> taken into account (about -enable-frontends=).\n>>\n>> I'll try to get this done over the weekend.\n>>\n>>> The others appear to be more controversial as they affect\n>>> mining/consensus.\n>>> I'd really like to see ACKs from more reviewers and testers there\n>>> before\n>>> merging.\n>>\n>> Can you elaborate on this? I can see how Proposals might, if buggy,\n>> affect\n>> consensus, but the rest shouldn't. I don't think there's anything\n>> controversial in any of these (does someone disagree with CPFP?).\n>>\n>> Luke\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Wladimir",
                "date": "2014-01-18T11:05:30",
                "message_text_only": "On Sat, Jan 18, 2014 at 9:11 AM, Odinn Cyberguerrilla <\nodinn.cyberguerrilla at riseup.net> wrote:\n\n> <ABISprotocol hat: on>\n>\n> regarding:\n> stuff not getting into blockchain in a day's time,\n> microdonations not facilitated as much as they could be,\n>\n\nPlease point to your pull requests improving these issues.\n\nIf your organization didn't contribute anything to further these issues\nthen there can't be much surprise that they didn't make it in, either.\n\nthat would be:\n>\n> very bad\n> much news\n> such fail\n>\n> Seriously, that would not be so good.\n>\n> Hope I made you laugh a bit\n>\n\nSo it's more like a jester's hat then :)\nHow did I end up on the dogecoin-development list?!?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140118/aa5226db/attachment.html>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-01-18T11:28:25",
                "message_text_only": "clarification, I am not a doge dev.  It was intended just as a joke, to\nmake you laugh.\n\nregarding pull requests improving these issues I am under the impression\nthat the developers will take care of what needs to be taken care of in\nthat regard.  Am presently in collaboration on a bitcoin project that may\nimplement aspects of the ABIS concept as presented, but it is in very very\nearly stage(es).\n\nI hope you had a good laugh, that was my intent. good morning / afternoon\n/ evening\n\n> On Sat, Jan 18, 2014 at 9:11 AM, Odinn Cyberguerrilla <\n> odinn.cyberguerrilla at riseup.net> wrote:\n>\n>> <ABISprotocol hat: on>\n>>\n>> regarding:\n>> stuff not getting into blockchain in a day's time,\n>> microdonations not facilitated as much as they could be,\n>>\n>\n> Please point to your pull requests improving these issues.\n>\n> If your organization didn't contribute anything to further these issues\n> then there can't be much surprise that they didn't make it in, either.\n>\n> that would be:\n>>\n>> very bad\n>> much news\n>> such fail\n>>\n>> Seriously, that would not be so good.\n>>\n>> Hope I made you laugh a bit\n>>\n>\n> So it's more like a jester's hat then :)\n> How did I end up on the dogecoin-development list?!?\n>\n> Wladimir\n>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-18T17:38:21",
                "message_text_only": "On 01/18/2014 03:05 AM, Wladimir wrote:\n> On Sat, Jan 18, 2014 at 9:11 AM, Odinn Cyberguerrilla\n> \n>     <ABISprotocol hat: on>\n> \n>     regarding:\n>     stuff not getting into blockchain in a day's time,\n>     microdonations not facilitated as much as they could be,\n> \n> Please point to your pull requests improving these issues.\n> \n> If your organization didn't contribute anything to further these issues\n> then there can't be much surprise that they didn't make it in, either.\n\nhttps://github.com/bitcoin/bitcoin/pull/1647"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-01-19T02:53:09",
                "message_text_only": "There's a reason why luke-jr's pull request for CPfP remains open.\nThere is general agreement that it appears to be useful.  CPfP works\nto close the mismatch between how bitcoin transaction fees are\nattached by the sender, versus modern economic situations where the\nreceiver is willing to pay a fee.\n\n\nOn Sat, Jan 18, 2014 at 12:38 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> On 01/18/2014 03:05 AM, Wladimir wrote:\n>> On Sat, Jan 18, 2014 at 9:11 AM, Odinn Cyberguerrilla\n>>\n>>     <ABISprotocol hat: on>\n>>\n>>     regarding:\n>>     stuff not getting into blockchain in a day's time,\n>>     microdonations not facilitated as much as they could be,\n>>\n>> Please point to your pull requests improving these issues.\n>>\n>> If your organization didn't contribute anything to further these issues\n>> then there can't be much surprise that they didn't make it in, either.\n>\n> https://github.com/bitcoin/bitcoin/pull/1647\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Wladimir",
                "date": "2014-01-19T10:24:08",
                "message_text_only": "On Sun, Jan 19, 2014 at 3:53 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> There's a reason why luke-jr's pull request for CPfP remains open.\n>\n\n\n> There is general agreement that it appears to be useful.  CPfP works\n> to close the mismatch between how bitcoin transaction fees are\n> attached by the sender, versus modern economic situations where the\n> receiver is willing to pay a fee.\n>\n\nThe only thing controversial are the code changes themselves, not the\nfeature.\n\nConsensus running through the comments in the pull is that it needs\n(auto)tests.\n\nAre you going to do this Luke? Or is anyone else working on this?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140119/a6d14b0f/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-01-23T11:10:34",
                "message_text_only": "On Sun, Jan 19, 2014 at 11:24 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> Consensus running through the comments in the pull is that it needs\n> (auto)tests.\n>\n> Are you going to do this Luke? Or is anyone else working on this?\n>\n\n*crickets*\n\nAnyone willing to give pull #1647 its final push by addressing the\ncomments, so that it can be integrated in the 0.9 release?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140123/a8aeee0a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core 0.9rc1 release schedule",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Wladimir",
                "Odinn Cyberguerrilla",
                "Warren Togami Jr.",
                "Jouke Hofman",
                "Mark Friedenbach"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 19838
        }
    },
    {
        "title": "[Bitcoin-development] TOFU verifiable HD publicly derived addresses",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2014-01-16T12:31:05",
                "message_text_only": "Put this into a separate thread about Alan Reiner's user validatable HD\naddress idea.\n\nOn Wed, Jan 15, 2014 at 05:02:10PM -0800, Jeremy Spilman wrote:\n>On Wed, 15 Jan 2014 15:09:01 -0800, Adam Back <adam at cypherspace.org> wrote\n>>Maybe in the payment address case the service should choose the \n>>derivation factor and communicate it and the client with the static\n>>address, as suggested by Alan Reiner because then it can also serve\n>>the function of allowing the service to tie the payment to the users\n>>account.\n>\n>I think any change which requires more than a single published public \n>message (e.g. a posting in a forum, or in a README.me in Github) \n>should be seen as solving an entirely different problem.\n\nYes it is.  This part is a separate topic, about simple TOFU cross-check &\nverifiability of deposit addresses by users.\n\n(However as we've seen in practice users treat as static and expect service\ndeposit addresses to be reusable.  So it could be useful to combine.)\n\n>But once you admit having that directed communication, then you are \n>swimming very close to the payment protocol.\n\nMy view is that certification (X509 or raw ECDSA message signature) is\nfunctionally inferior (and more complex) than communicating scalar, base\naddress because certification requires an online private key to\nauthenticate.  Scalar, base does not require a private key.  In fact you\ncould use HD address public derivation as the mechanism to derive the scalar,\nwhere the deposit address recipient does not know the scalar.  So I am a fan\nof Alan Reiner's simple authenticatable derived address proposal.\n\nNow of course you can take the private key offline and use eg private\nderivation and upload batches, but that is complexity and work; so again its\nan approach with arguably inferior characteristics.\n\nAlso to date payment message is application level, and while you could add\nanother level of signed message with a different offline X509 key, which\nMike Hearn did suggest as a future possibility, and upload signed addresses\nin batches, its clunky by comparison, involves many more lines of code, adds\na security dependency on CAs, and I think you could somewhat argue is a\nprotocol layering violation.\n\nAnyway if people want to do that, there is no loss in X509 signing a TOFU\nvalidatable address form.  ie go ahead and combine them.  TOFU\nvalidatability of the low level address format is useful, you can cross\ncheck.\n\n\nOne could also consider augmenting the derivation with Timo Hanke's bind to\ncontract hash, though there is risk that both parties lose the contract and\nif it has too much entropy that could lose coins.\n\nAdam"
            }
        ],
        "thread_summary": {
            "title": "TOFU verifiable HD publicly derived addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2635
        }
    },
    {
        "title": "[Bitcoin-development] Reusable addresses",
        "thread_messages": [
            {
                "author": "Byte Coin",
                "date": "2014-01-16T23:48:11",
                "message_text_only": "I'm very pleased that my old idea is getting some traction and that I have been appropriately credited!\nI also think the term \"reusable addresses\" is preferable to anything to do with \"stealth\" for the reasons mentioned.\n\nYou should note that the privacy guarantees they provide are not that strong but their limitations have been adequately discussed elsewhere.\n\nOn an unrelated note - I'd like to solicit some help in restoring access to my Bytecoin account on http://bitcointalk.org/\n\nCheers!\n\nBytecoin\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/1223bdf3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Reusable addresses",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Byte Coin"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 688
        }
    },
    {
        "title": "[Bitcoin-development] Suggestion: allow receivers to pay optional fee for transactions without fees",
        "thread_messages": [
            {
                "author": "D\u00e2niel Fraga",
                "date": "2014-01-17T01:39:59",
                "message_text_only": "Someone sent me a very small donation (0.00121 BTC) without\npaying fees. I don't know who sent it and I know this type of\ntransaction are usually rejected by miners. Take a look at it below:\n\nhttps://imageshack.com/i/ngv5g8j\n\n\tEven with the a low probability of confirmation, I\nwas hoping that after a few days it could be included in a block, but\nBlockchain.info simply removed it (I know the sender sent from a\nBlockchain.info wallet, because he added a note):\n\nhttps://blockchain.info/pt/tx/3cde47ee3979a46b36bd61bdb0caf9c11dea58ac99f17fb17b95728766de70e0\n\t\n\tAs you can see now it shows as \"Transaction not found\".\n\n\tMy suggestion is: it would be nice if the receiver could have a\nchance to pay the fee when the sender didn't pay any fee. For example,\nI could pay a fee of 0.0001 BTC and receive 0.00121 BTC. In the end I'd\nhave 0.00111 BTC. Better than nothing.\n\n\tWould it be technically possible to do that or it would be too\nmuch trouble to change the protocol to allow the receiver to pay an\noptional fee?\n\n\tPs: I'm not a programmer, but if the receiver could\noptionally \"attach\" some fee to the transaction, even if he/she didn't\nsent the transaction, this could be solved. Bitcoin-qt could even warn\nthe receiver he received a transaction without fee and if he wants \nfaster confirmation he could pay a fee.\n\n\tPs2: if this is a silly suggestion, just ignore it. I tried on\nBitcointalk, but nobody answered.\n\n-- \nLinux 3.12.0: One Giant Leap for Frogkind\nhttp://www.youtube.com/DanielFragaBR\nhttp://mcxnow.com\nBitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL"
            },
            {
                "author": "Ben Davenport",
                "date": "2014-01-17T01:52:39",
                "message_text_only": "You can create a transaction which spends the output to yourself, attaching\na fee to that transaction. In order for miners to grab the transaction fee\non that transaction, they would have to also mine the original transaction.\nLikely, you'd have to do this by hand, but software could be written to\nsimplify doing it. No protocol changes needed.\n\nBen\n\n\nOn Thu, Jan 16, 2014 at 5:39 PM, D\u00e2niel Fraga <fragabr at gmail.com> wrote:\n\n>         Someone sent me a very small donation (0.00121 BTC) without\n> paying fees. I don't know who sent it and I know this type of\n> transaction are usually rejected by miners. Take a look at it below:\n>\n> https://imageshack.com/i/ngv5g8j\n>\n>         Even with the a low probability of confirmation, I\n> was hoping that after a few days it could be included in a block, but\n> Blockchain.info simply removed it (I know the sender sent from a\n> Blockchain.info wallet, because he added a note):\n>\n>\n> https://blockchain.info/pt/tx/3cde47ee3979a46b36bd61bdb0caf9c11dea58ac99f17fb17b95728766de70e0\n>\n>         As you can see now it shows as \"Transaction not found\".\n>\n>         My suggestion is: it would be nice if the receiver could have a\n> chance to pay the fee when the sender didn't pay any fee. For example,\n> I could pay a fee of 0.0001 BTC and receive 0.00121 BTC. In the end I'd\n> have 0.00111 BTC. Better than nothing.\n>\n>         Would it be technically possible to do that or it would be too\n> much trouble to change the protocol to allow the receiver to pay an\n> optional fee?\n>\n>         Ps: I'm not a programmer, but if the receiver could\n> optionally \"attach\" some fee to the transaction, even if he/she didn't\n> sent the transaction, this could be solved. Bitcoin-qt could even warn\n> the receiver he received a transaction without fee and if he wants\n> faster confirmation he could pay a fee.\n>\n>         Ps2: if this is a silly suggestion, just ignore it. I tried on\n> Bitcointalk, but nobody answered.\n>\n> --\n> Linux 3.12.0: One Giant Leap for Frogkind\n> http://www.youtube.com/DanielFragaBR\n> http://mcxnow.com\n> Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140116/8f21db5d/attachment.html>"
            },
            {
                "author": "D\u00e2niel Fraga",
                "date": "2014-01-17T02:06:13",
                "message_text_only": "This is good news! Thank you very much Ben for the answer.\n\nOn Thu, 16 Jan 2014 17:52:39 -0800\nBen Davenport <bendavenport at gmail.com> wrote:\n\n> You can create a transaction which spends the output to yourself, attaching\n> a fee to that transaction. In order for miners to grab the transaction fee\n> on that transaction, they would have to also mine the original transaction.\n> Likely, you'd have to do this by hand, but software could be written to\n> simplify doing it. No protocol changes needed.\n> \n> Ben\n> \n> \n> On Thu, Jan 16, 2014 at 5:39 PM, D\u00e2niel Fraga <fragabr at gmail.com> wrote:\n> \n> >         Someone sent me a very small donation (0.00121 BTC) without\n> > paying fees. I don't know who sent it and I know this type of\n> > transaction are usually rejected by miners. Take a look at it below:\n> >\n> > https://imageshack.com/i/ngv5g8j\n> >\n> >         Even with the a low probability of confirmation, I\n> > was hoping that after a few days it could be included in a block, but\n> > Blockchain.info simply removed it (I know the sender sent from a\n> > Blockchain.info wallet, because he added a note):\n> >\n> >\n> > https://blockchain.info/pt/tx/3cde47ee3979a46b36bd61bdb0caf9c11dea58ac99f17fb17b95728766de70e0\n> >\n> >         As you can see now it shows as \"Transaction not found\".\n> >\n> >         My suggestion is: it would be nice if the receiver could have a\n> > chance to pay the fee when the sender didn't pay any fee. For example,\n> > I could pay a fee of 0.0001 BTC and receive 0.00121 BTC. In the end I'd\n> > have 0.00111 BTC. Better than nothing.\n> >\n> >         Would it be technically possible to do that or it would be too\n> > much trouble to change the protocol to allow the receiver to pay an\n> > optional fee?\n> >\n> >         Ps: I'm not a programmer, but if the receiver could\n> > optionally \"attach\" some fee to the transaction, even if he/she didn't\n> > sent the transaction, this could be solved. Bitcoin-qt could even warn\n> > the receiver he received a transaction without fee and if he wants\n> > faster confirmation he could pay a fee.\n> >\n> >         Ps2: if this is a silly suggestion, just ignore it. I tried on\n> > Bitcointalk, but nobody answered.\n> >\n> > --\n> > Linux 3.12.0: One Giant Leap for Frogkind\n> > http://www.youtube.com/DanielFragaBR\n> > http://mcxnow.com\n> > Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL\n> >\n> >\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> > Critical Workloads, Development Environments & Everything In Between.\n> > Get a Quote or Start a Free Trial Today.\n> >\n> > http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> \n\n\n-- \nLinux 3.12.0: One Giant Leap for Frogkind\nhttp://www.youtube.com/DanielFragaBR\nhttp://mcxnow.com\nBitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-01-17T02:39:31",
                "message_text_only": "To clarify, there are proposals to make miners recognize this\nsituation and account for it, only eligius is running it at the moment\nIIRC:\nhttp://bitcoin.stackexchange.com/questions/8390/are-there-any-pools-or-large-miners-running-child-pays-for-parent-patch\nRight now if you were to try it likely wouldn't result in inclusion.\nBut this is on the radar, and I suspect it'll eventually get merged\ninto mainline.\n\nOn Thu, Jan 16, 2014 at 9:06 PM, D\u00e2niel Fraga <fragabr at gmail.com> wrote:\n>         This is good news! Thank you very much Ben for the answer.\n>\n> On Thu, 16 Jan 2014 17:52:39 -0800\n> Ben Davenport <bendavenport at gmail.com> wrote:\n>\n>> You can create a transaction which spends the output to yourself, attaching\n>> a fee to that transaction. In order for miners to grab the transaction fee\n>> on that transaction, they would have to also mine the original transaction.\n>> Likely, you'd have to do this by hand, but software could be written to\n>> simplify doing it. No protocol changes needed.\n>>\n>> Ben\n>>\n>>\n>> On Thu, Jan 16, 2014 at 5:39 PM, D\u00e2niel Fraga <fragabr at gmail.com> wrote:\n>>\n>> >         Someone sent me a very small donation (0.00121 BTC) without\n>> > paying fees. I don't know who sent it and I know this type of\n>> > transaction are usually rejected by miners. Take a look at it below:\n>> >\n>> > https://imageshack.com/i/ngv5g8j\n>> >\n>> >         Even with the a low probability of confirmation, I\n>> > was hoping that after a few days it could be included in a block, but\n>> > Blockchain.info simply removed it (I know the sender sent from a\n>> > Blockchain.info wallet, because he added a note):\n>> >\n>> >\n>> > https://blockchain.info/pt/tx/3cde47ee3979a46b36bd61bdb0caf9c11dea58ac99f17fb17b95728766de70e0\n>> >\n>> >         As you can see now it shows as \"Transaction not found\".\n>> >\n>> >         My suggestion is: it would be nice if the receiver could have a\n>> > chance to pay the fee when the sender didn't pay any fee. For example,\n>> > I could pay a fee of 0.0001 BTC and receive 0.00121 BTC. In the end I'd\n>> > have 0.00111 BTC. Better than nothing.\n>> >\n>> >         Would it be technically possible to do that or it would be too\n>> > much trouble to change the protocol to allow the receiver to pay an\n>> > optional fee?\n>> >\n>> >         Ps: I'm not a programmer, but if the receiver could\n>> > optionally \"attach\" some fee to the transaction, even if he/she didn't\n>> > sent the transaction, this could be solved. Bitcoin-qt could even warn\n>> > the receiver he received a transaction without fee and if he wants\n>> > faster confirmation he could pay a fee.\n>> >\n>> >         Ps2: if this is a silly suggestion, just ignore it. I tried on\n>> > Bitcointalk, but nobody answered.\n>> >\n>> > --\n>> > Linux 3.12.0: One Giant Leap for Frogkind\n>> > http://www.youtube.com/DanielFragaBR\n>> > http://mcxnow.com\n>> > Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL\n>> >\n>> >\n>> >\n>> >\n>> > ------------------------------------------------------------------------------\n>> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> > Critical Workloads, Development Environments & Everything In Between.\n>> > Get a Quote or Start a Free Trial Today.\n>> >\n>> > http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>>\n>\n>\n> --\n> Linux 3.12.0: One Giant Leap for Frogkind\n> http://www.youtube.com/DanielFragaBR\n> http://mcxnow.com\n> Bitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-01-17T05:40:52",
                "message_text_only": "On Friday, January 17, 2014 2:39:31 AM Christophe Biocca wrote:\n> To clarify, there are proposals to make miners recognize this\n> situation and account for it, only eligius is running it at the moment\n> IIRC:\n> http://bitcoin.stackexchange.com/questions/8390/are-there-any-pools-or-larg\n> e-miners-running-child-pays-for-parent-patch Right now if you were to try\n> it likely wouldn't result in inclusion. But this is on the radar, and I\n> suspect it'll eventually get merged into mainline.\n\nIf you did it and relayed directly to Eligius, it'd probably get mined.. the \nhard part is creating the transaction - once that's done it's smooth sailing \n;)\n\nSide note: mining nodes should *not* be running mainline. In fact, they should \nbe setting up their own customised transaction policies."
            }
        ],
        "thread_summary": {
            "title": "Suggestion: allow receivers to pay optional fee for transactions without fees",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Christophe Biocca",
                "D\u00e2niel Fraga",
                "Ben Davenport"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 12721
        }
    },
    {
        "title": "[Bitcoin-development] Reality Keys trusted oracle service",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-01-17T14:52:12",
                "message_text_only": "Finally seeing a more complex script-use-case being implemented:\n\nhttp://www.coindesk.com/reality-keys-bitcoins-third-party-guarantor-contracts/\n\n    Enter Reality Keys, a new service by Tokyo-based startup Social\n    Minds due for public launch on 20th January. Reality Keys provides\n    real-world data in a form that can be used to complete or disregard\n    bitcoin transactions, based on quantifiable facts.\n\n    [...]\n\n    Users then specify a date at which they would like to confirm the\n    status or outcome of a particular event, and two cryptographic\n    public keys are provided: one for if the event happens and another\n    for if it doesn\u2019t.\n\n    [...]\n\n    It is all, of course, anonymous. Reality Keys provides only the\n    keys, and has no interest in or knowledge of the nature of the\n    contract or the amounts of bitcoin at stake.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000d34d6e0e8d8290c7248f32bb3c39400892a34a3e761f6e78\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140117/90561c89/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Reality Keys trusted oracle service",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1224
        }
    },
    {
        "title": "[Bitcoin-development] BIP0039: Final call",
        "thread_messages": [
            {
                "author": "slush",
                "date": "2014-01-20T17:42:37",
                "message_text_only": "Hi all,\n\nduring recent months we've reconsidered all comments which we received from\nthe community about our BIP39 proposal and we tried to meet all\nrequirements for such standard. Specifically the proposal now doesn't\nrequire any specific wordlist, so every client can use its very own list of\npreferred words. Generated mnemonic can be then applied to any other\nBIP39-compatible client. Please follow current draft at\nhttps://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n\nBecause we're quickly moving towards release of Trezor firmware and we need\nto finalize this part of the firmware, we're asking for the last comments\nto current BIP39 draft.\n\nThanks,\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/bd7b8cb2/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-20T19:55:04",
                "message_text_only": "We have an implementation of the latest spec in bitcoinj, with the wordlist\nprovided by slush+stick. As far as I can see it's all working fine so LGTM\nfrom us.\n\n\nOn Mon, Jan 20, 2014 at 5:42 PM, slush <slush at centrum.cz> wrote:\n\n> Hi all,\n>\n> during recent months we've reconsidered all comments which we received\n> from the community about our BIP39 proposal and we tried to meet all\n> requirements for such standard. Specifically the proposal now doesn't\n> require any specific wordlist, so every client can use its very own list of\n> preferred words. Generated mnemonic can be then applied to any other\n> BIP39-compatible client. Please follow current draft at\n> https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n>\n> Because we're quickly moving towards release of Trezor firmware and we\n> need to finalize this part of the firmware, we're asking for the last\n> comments to current BIP39 draft.\n>\n> Thanks,\n> slush\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/8b149749/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-01-20T20:02:27",
                "message_text_only": "On Monday, January 20, 2014 5:42:37 PM slush wrote:\n> Hi all,\n> \n> during recent months we've reconsidered all comments which we received from\n> the community about our BIP39 proposal and we tried to meet all\n> requirements for such standard. Specifically the proposal now doesn't\n> require any specific wordlist, so every client can use its very own list of\n> preferred words. Generated mnemonic can be then applied to any other\n> BIP39-compatible client. Please follow current draft at\n> https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n\nHow are they compatible if they could be using entirely different word lists??\n\n> Because we're quickly moving towards release of Trezor firmware and we need\n> to finalize this part of the firmware, we're asking for the last comments\n> to current BIP39 draft.\n\nMaybe I'm missing something, but shouldn't this be a client-side thing, not \nimplemented in the Trezor firmware at all?? O.o;;\n\nLuke"
            },
            {
                "author": "slush",
                "date": "2014-01-20T21:47:56",
                "message_text_only": "On Mon, Jan 20, 2014 at 9:02 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n>\n> How are they compatible if they could be using entirely different word\n> lists??\n>\n>\nWordlist is necessary for the step [seed]->[mnemonic]. Step\n[mnemonic]->[bip32 root] doesn't need any wordlist, there's just hashing\ninvolved.\nFor this reason client can generate whatever mnemonic and unless all\nclients use the same process [mnemonic]->[bip32 root], the result is the\nsame.\n\n\n> Maybe I'm missing something, but shouldn't this be a client-side thing, not\n> implemented in the Trezor firmware at all?? O.o;;\n>\n>\nTrezor generates the seed and transforms it to mnemonic (which is then\nshown on internal display). Generating the mnemonic outside the client-side\n(computer) is one of main functionality of Trezor.\n\nslush\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/1c516e00/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-20T22:01:40",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nSince you are taking the hash of Unicode data, I would strongly\nrecommend using a canonical form, e.g. Normalized Form C.\n\nOn 01/20/2014 09:42 AM, slush wrote:\n> Hi all,\n> \n> during recent months we've reconsidered all comments which we\n> received from the community about our BIP39 proposal and we tried\n> to meet all requirements for such standard. Specifically the\n> proposal now doesn't require any specific wordlist, so every client\n> can use its very own list of preferred words. Generated mnemonic\n> can be then applied to any other BIP39-compatible client. Please\n> follow current draft at\n> https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n> \n> Because we're quickly moving towards release of Trezor firmware and\n> we need to finalize this part of the firmware, we're asking for the\n> last comments to current BIP39 draft.\n> \n> Thanks, slush\n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nCenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For \n> Critical Workloads, Development Environments & Everything In\n> Between. Get a Quote or Start a Free Trial Today. \n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJS3ZzAAAoJEAdzVfsmodw4L3sP/2VjvICLTYlkZcY6brBIZhoU\nP6ei6qECzmBCWpW5iC1r99j76bPwP3M6jH6P7iBljj72J5NgHXq+K8GvA5M6qu0o\n6s+WJ7HYJ8KwRZuvGPvcopXBKJAJXadrN7xSPikYD2zMm2KCZTUI5IurR1p/dpUR\n3HzL2RdjbDugBOiAjiMMq0dAs1x9/vmF0F2KDZHiCJEtP/+gbtOE/KmXrnrAJSNI\nAswb/lZg1GWGpOs+iCdEaRfST2PIL/jGgnteJ4iKHvh2+dOW0/AhINo5g56LTVvU\nQ+pAv8SRLad/30PVaWAStrtLMxu+j0JQ1wgEkRCrsQ0xE3iKtmbppzh2dIQ8Idrt\nEkjqoykB2wn4Kw+QcT2TXIcBV7LBqSurE/jDWWIFtHxdV0++8PDYFOesq2Xf9Rif\nVStYnUVvUhuzGXD3oOnIGpEvMm2i30Qyi33oJLvqfWUBkzJzFdtZ+YYBYlbpwBOQ\nYLEr2DmVHLk/MXWL1POruvnIT4N+6uyh59HKHKRJI0nGMmRR3cBLkM8vEEHerD3P\nucg++TTdqXM6XoSmIk55CQnGdglDJEOGc+gzaGffqeDMJhmz/apEawN5en7ogN0o\nXfWDWSdtwMvlza3F6cMejvBkuFZTLUxyaedP13vOTDhUIbmqsliyhwA2YrXE7udQ\n1JMYADuvb18LYE/hQJX3\n=Ycdc\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Brooks Boyd",
                "date": "2014-01-20T22:05:14",
                "message_text_only": "On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:\n\n> Hi all,\n>\n> during recent months we've reconsidered all comments which we received\n> from the community about our BIP39 proposal and we tried to meet all\n> requirements for such standard. Specifically the proposal now doesn't\n> require any specific wordlist, so every client can use its very own list of\n> preferred words. Generated mnemonic can be then applied to any other\n> BIP39-compatible client. Please follow current draft at\n> https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n>\n\n\nSo, because the [mnemonic]->[bip32 root] is just hashing, you've\neffectively made your \"mnemonic sentence\" into a brainwallet? Since every\nmnemonic sentence can now lead to a bip32 root, and only the client that\ncreated the mnemonic can verify the mnemonic passes its checksum (assuming\nall clients use different wordlists, the only client that can help you if\nyou fat-finger the sentence is the client that created it)?\n\nBrooks\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/6d9774f0/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-20T22:35:02",
                "message_text_only": "On Mon, Jan 20, 2014 at 04:05:14PM -0600, Brooks Boyd wrote:\n> On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:\n> \n> > Hi all,\n> >\n> > during recent months we've reconsidered all comments which we received\n> > from the community about our BIP39 proposal and we tried to meet all\n> > requirements for such standard. Specifically the proposal now doesn't\n> > require any specific wordlist, so every client can use its very own list of\n> > preferred words. Generated mnemonic can be then applied to any other\n> > BIP39-compatible client. Please follow current draft at\n> > https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n> \n> So, because the [mnemonic]->[bip32 root] is just hashing, you've\n> effectively made your \"mnemonic sentence\" into a brainwallet? Since every\n> mnemonic sentence can now lead to a bip32 root, and only the client that\n> created the mnemonic can verify the mnemonic passes its checksum (assuming\n> all clients use different wordlists, the only client that can help you if\n> you fat-finger the sentence is the client that created it)?\n\nThat issue is more than enough to get a NACK from me on making the\ncurrent BIP39 draft a standard - I can easily see that leading to users\nlosing a lot of money.\n\nHave any wallets implemented BIP39 this way already in released code?\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000009c3092c0b245722363df8b29cfbb86368f4f7303e655983a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140120/c30a540b/attachment.sig>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-01-20T23:06:24",
                "message_text_only": "I remember the wordlist choice getting bikeshedded to death a month ago.\n\nI would just include the wordlist as part of the standard (as a\nrecommendation) so that fully compliant implementations can correct a\nuser's typos regardless of the original generator.\n\nThose who don't like it will have to deal with the compatibility\nconcerns themselves, or get an alternate wordlist approved as a BIP.\nOdds are no one will go that route.\n\nOn Mon, Jan 20, 2014 at 5:35 PM, Peter Todd <pete at petertodd.org> wrote:\n> On Mon, Jan 20, 2014 at 04:05:14PM -0600, Brooks Boyd wrote:\n>> On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:\n>>\n>> > Hi all,\n>> >\n>> > during recent months we've reconsidered all comments which we received\n>> > from the community about our BIP39 proposal and we tried to meet all\n>> > requirements for such standard. Specifically the proposal now doesn't\n>> > require any specific wordlist, so every client can use its very own list of\n>> > preferred words. Generated mnemonic can be then applied to any other\n>> > BIP39-compatible client. Please follow current draft at\n>> > https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n>>\n>> So, because the [mnemonic]->[bip32 root] is just hashing, you've\n>> effectively made your \"mnemonic sentence\" into a brainwallet? Since every\n>> mnemonic sentence can now lead to a bip32 root, and only the client that\n>> created the mnemonic can verify the mnemonic passes its checksum (assuming\n>> all clients use different wordlists, the only client that can help you if\n>> you fat-finger the sentence is the client that created it)?\n>\n> That issue is more than enough to get a NACK from me on making the\n> current BIP39 draft a standard - I can easily see that leading to users\n> losing a lot of money.\n>\n> Have any wallets implemented BIP39 this way already in released code?\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000000000009c3092c0b245722363df8b29cfbb86368f4f7303e655983a\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "slush",
                "date": "2014-01-20T23:18:16",
                "message_text_only": "On Tue, Jan 21, 2014 at 12:06 AM, Christophe Biocca <\nchristophe.biocca at gmail.com> wrote:\n\n> I remember the wordlist choice getting bikeshedded to death a month ago.\n>\n> I would just include the wordlist as part of the standard (as a\n> recommendation) so that fully compliant implementations can correct a\n> user's typos regardless of the original generator.\n>\n>\nThat's exactly our attitude. We realized that have a community-wide\nagreement on the wordlist itself is simply imposible, so to reach at least\nsome consensus we split the proposal to two parts - one what is essential\nto call itself a \"bip39 compatible\", i.e. converting the mnemonic to bip32\nnode and second which is optional, including our proposed wordlist, which\nhas some advanced features like checksums etc. Now it is up to client\ndevelopers to decide if they really insist on their superior wordlist or if\nthey'll implement checksums following the full specification.\n\n\n\n> Those who don't like it will have to deal with the compatibility\n> concerns themselves, or get an alternate wordlist approved as a BIP.\n\nOdds are no one will go that route.\n>\n>\nAt least Trezor and bitcoinj (Multibit) seems to be going in this way,\nwhich is 100% of clients which expressed interest in bip39 :-).\n\nslush\n\n\n> On Mon, Jan 20, 2014 at 5:35 PM, Peter Todd <pete at petertodd.org> wrote:\n> > On Mon, Jan 20, 2014 at 04:05:14PM -0600, Brooks Boyd wrote:\n> >> On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:\n> >>\n> >> > Hi all,\n> >> >\n> >> > during recent months we've reconsidered all comments which we received\n> >> > from the community about our BIP39 proposal and we tried to meet all\n> >> > requirements for such standard. Specifically the proposal now doesn't\n> >> > require any specific wordlist, so every client can use its very own\n> list of\n> >> > preferred words. Generated mnemonic can be then applied to any other\n> >> > BIP39-compatible client. Please follow current draft at\n> >> > https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n> >>\n> >> So, because the [mnemonic]->[bip32 root] is just hashing, you've\n> >> effectively made your \"mnemonic sentence\" into a brainwallet? Since\n> every\n> >> mnemonic sentence can now lead to a bip32 root, and only the client that\n> >> created the mnemonic can verify the mnemonic passes its checksum\n> (assuming\n> >> all clients use different wordlists, the only client that can help you\n> if\n> >> you fat-finger the sentence is the client that created it)?\n> >\n> > That issue is more than enough to get a NACK from me on making the\n> > current BIP39 draft a standard - I can easily see that leading to users\n> > losing a lot of money.\n> >\n> > Have any wallets implemented BIP39 this way already in released code?\n> >\n> > --\n> > 'peter'[:-1]@petertodd.org\n> > 00000000000000009c3092c0b245722363df8b29cfbb86368f4f7303e655983a\n> >\n> >\n> ------------------------------------------------------------------------------\n> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> > Critical Workloads, Development Environments & Everything In Between.\n> > Get a Quote or Start a Free Trial Today.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/c4e498fc/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-01-21T00:00:43",
                "message_text_only": "Hi slush,\n\nThank you for your new proposal; it seems to be a compromise.\n\n@Christophe Biocca:\nIf the wordlist becomes part of the standard, then we will run into\nproblems of collisions once users ask for wordlists in every language.\n\nIMO the right approach is to implement checksums that do not depend\non the wordlist (eg the 'brute force' method, Hash(mnemonic||1) mod 2^k \n== 0 )\nthis would also allow us to implement sipa's variable stretching proposal.\n\nI understand this is not possible because of the computational\nrequirements of devices such as trezor.\n\nI am leaning toward considering these devices as a nonstandard case,\ninstead of enforcing a given wordlist in the standard.\n\nThomas\n\n\n\n\n\n\nLe 21/01/2014 00:18, slush a \u00e9crit :\n>\n> On Tue, Jan 21, 2014 at 12:06 AM, Christophe Biocca \n> <christophe.biocca at gmail.com <mailto:christophe.biocca at gmail.com>> wrote:\n>\n>     I remember the wordlist choice getting bikeshedded to death a\n>     month ago.\n>\n>     I would just include the wordlist as part of the standard (as a\n>     recommendation) so that fully compliant implementations can correct a\n>     user's typos regardless of the original generator.\n>\n>\n> That's exactly our attitude. We realized that have a community-wide \n> agreement on the wordlist itself is simply imposible, so to reach at \n> least some consensus we split the proposal to two parts - one what is \n> essential to call itself a \"bip39 compatible\", i.e. converting the \n> mnemonic to bip32 node and second which is optional, including our \n> proposed wordlist, which has some advanced features like checksums \n> etc. Now it is up to client developers to decide if they really insist \n> on their superior wordlist or if they'll implement checksums following \n> the full specification.\n>\n>     Those who don't like it will have to deal with the compatibility\n>     concerns themselves, or get an alternate wordlist approved as a BIP. \n>\n>     Odds are no one will go that route.\n>\n> At least Trezor and bitcoinj (Multibit) seems to be going in this way, \n> which is 100% of clients which expressed interest in bip39 :-).\n>\n> slush\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/2f2ab616/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-24T09:05:32",
                "message_text_only": "On Tue, Jan 21, 2014 at 01:00:43AM +0100, Thomas Voegtlin wrote:\n> Hi slush,\n> \n> Thank you for your new proposal; it seems to be a compromise.\n> \n> @Christophe Biocca:\n> If the wordlist becomes part of the standard, then we will run into\n> problems of collisions once users ask for wordlists in every language.\n> \n> IMO the right approach is to implement checksums that do not depend\n> on the wordlist (eg the 'brute force' method, Hash(mnemonic||1) mod\n> 2^k == 0 )\n> this would also allow us to implement sipa's variable stretching proposal.\n> \n> I understand this is not possible because of the computational\n> requirements of devices such as trezor.\n\nIs it? Surely the trezor can bruteforce, say, 8 bits == 0. How many\nSHA256/sec can the trezor hardware do? Generating your seed is a\none-time thing after all - that taking 10-30s doesn't seem like a big\ndeal to me.\n\nEven a 1/256th \"checksum\" will really cut down on the number of mistakes\nmade and money lost.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001d8b9d438c18e856735ddae5b1d918416010350d19794aab6\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140124/e8ceffc8/attachment.sig>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-01-24T16:47:21",
                "message_text_only": "Le 24/01/2014 10:05, Peter Todd a \u00e9crit :\n> On Tue, Jan 21, 2014 at 01:00:43AM +0100, Thomas Voegtlin wrote:\n>> Hi slush,\n>>\n>> Thank you for your new proposal; it seems to be a compromise.\n>>\n>> @Christophe Biocca:\n>> If the wordlist becomes part of the standard, then we will run into\n>> problems of collisions once users ask for wordlists in every language.\n>>\n>> IMO the right approach is to implement checksums that do not depend\n>> on the wordlist (eg the 'brute force' method, Hash(mnemonic||1) mod\n>> 2^k == 0 )\n>> this would also allow us to implement sipa's variable stretching proposal.\n>>\n>> I understand this is not possible because of the computational\n>> requirements of devices such as trezor.\n> Is it? Surely the trezor can bruteforce, say, 8 bits == 0. How many\n> SHA256/sec can the trezor hardware do? Generating your seed is a\n> one-time thing after all - that taking 10-30s doesn't seem like a big\n> deal to me.\n>\n> Even a 1/256th \"checksum\" will really cut down on the number of mistakes\n> made and money lost.\n\nslush, correct me if I'm wrong, but I don't think that's the only reason:\nThey want to generate a seed by combining entropy from the trezor device \nand from the user's computer;\nIn addition, they want the computer to be able to check that the seed \nactually was derived from the entropy it provided, using only a master \npublic key (the computer does not have access to the seed)\n\nThis is why they designed bip39 that way.\n\nI think the new bip39 proposal could be used in Electrum as an option \nfor trezor, but I am reluctant to make it default, because it imposes \nits own dictionary."
            },
            {
                "author": "Adam Back",
                "date": "2014-01-20T23:14:41",
                "message_text_only": "Because the mnemonic is an encoding of a 128-bit random number using its\nhash as a private key (or derived part of one) is not a problem, its just an\nalternate alphabet encoding of the random private key.\n\nNot being able to generically understand the checksum.  Seems tricky to\nsolve other than say brute force eg H(mnemonic||1) mod 2^k == 0 where k is\nthe amount of check digit redundancy.  But that might be expensive for a\ntrezor if k is very big at all.  And then key = H(mnemonic).\n\nAdam\n\nOn Mon, Jan 20, 2014 at 05:35:02PM -0500, Peter Todd wrote:\n>On Mon, Jan 20, 2014 at 04:05:14PM -0600, Brooks Boyd wrote:\n>> On Mon, Jan 20, 2014 at 11:42 AM, slush <slush at centrum.cz> wrote:\n>>\n>> > Hi all,\n>> >\n>> > during recent months we've reconsidered all comments which we received\n>> > from the community about our BIP39 proposal and we tried to meet all\n>> > requirements for such standard. Specifically the proposal now doesn't\n>> > require any specific wordlist, so every client can use its very own list of\n>> > preferred words. Generated mnemonic can be then applied to any other\n>> > BIP39-compatible client. Please follow current draft at\n>> > https://github.com/trezor/bips/blob/master/bip-0039.mediawiki.\n>>\n>> So, because the [mnemonic]->[bip32 root] is just hashing, you've\n>> effectively made your \"mnemonic sentence\" into a brainwallet? Since every\n>> mnemonic sentence can now lead to a bip32 root, and only the client that\n>> created the mnemonic can verify the mnemonic passes its checksum (assuming\n>> all clients use different wordlists, the only client that can help you if\n>> you fat-finger the sentence is the client that created it)?\n>\n>That issue is more than enough to get a NACK from me on making the\n>current BIP39 draft a standard - I can easily see that leading to users\n>losing a lot of money.\n>\n>Have any wallets implemented BIP39 this way already in released code?\n>\n>-- \n>'peter'[:-1]@petertodd.org\n>00000000000000009c3092c0b245722363df8b29cfbb86368f4f7303e655983a\n\n\n\n>------------------------------------------------------------------------------\n>CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>Critical Workloads, Development Environments & Everything In Between.\n>Get a Quote or Start a Free Trial Today.\n>http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-01-20T23:18:36",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nProper Unicode handling is a serious issue however. You don't want\nsomeone to move from one input method / machine to another and\nsuddenly find that their coins are inaccessible, because of an issue\nof decomposed vs. compatibility forms or whatever.\n\nOn 01/20/2014 03:14 PM, Adam Back wrote:\n> Because the mnemonic is an encoding of a 128-bit random number\n> using its hash as a private key (or derived part of one) is not a\n> problem, its just an alternate alphabet encoding of the random\n> private key.\n> \n> Not being able to generically understand the checksum.  Seems\n> tricky to solve other than say brute force eg H(mnemonic||1) mod\n> 2^k == 0 where k is the amount of check digit redundancy.  But that\n> might be expensive for a trezor if k is very big at all.  And then\n> key = H(mnemonic).\n> \n> Adam\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJS3a7MAAoJEAdzVfsmodw4/MAP/3Rk4sbQBv5aGqM2iAMBZkjq\nCxGNSrzxKKgAYf+aFka6FVrBZJRHU39mEon53H0DR92+3vA2BHns8YEKH18LneQ9\n16qJAp4y+ml5jbdCI6TY1JCM4ObmXsZbsPF17lKdVPISkz8DhUMUNLHdOx8cZHkw\nKj5RXuLBFwqFiCcAqYdoIpFmDpfaJfZ3k9OHzPRsto1oyOrXdwc+TK8YZHISWR3M\nnzsMcp2z9Uu8M/NeDo4gM0WFpIZ41W9JsYeMeJzdU6xd1HKdmC0CZCyc8EmAre58\nXGc2gtc9PjXIwWW+FTkZ5pYJz718WBq4Wja1hir5eaTJZurs1fp+1iJ7jiDkloJH\nh/pWp8wcXVaAklaImota3PASr5qnP8zjzaKZALn/0gJEkIKnIJz3N32BLw7QsoEL\nk5VaMQ5x7/9zK+Qc5kWvtTjleRO23DnW+XVud0jbAHTM1wfTQH0dJIgEpe3HQZOR\n9a09/ZKN8kC+2fj/u6EjkVh5RvwTv0iq+RvBDmsFjaVOfBzRL1LVKgKJvdG+0hix\nXyPtnBflC1uNLNg/yjBEP7/cKePJVMcDzVBwjpbnEOo9ZGO2ixSh8qMQ/nn6V96R\nhZZv8mVI1bGhWlvQEoMw5X7M4xyP25GboCv4wJrYT/8VQfe56BSKXS+AHfl+hIoa\nJjmcqvm+sfk/0awxj4Ce\n=1crJ\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-01-21T05:43:49",
                "message_text_only": "> At least Trezor and bitcoinj (Multibit) seems to be going in this way,\n> which is 100% of clients which expressed interest in bip39 :-).\n> \n> slush\n\nThe the current spec with TREZOR's wordlist is also implemented by Bits of Proof\nhttps://github.com/bitsofproof/supernode/blob/master/api/src/main/java/com/bitsofproof/supernode/wallet/BIP39.java\n\nand deployed in two projects, one being btc1k also open sourced at our github.\n\nRegards,\n\nTam\u00e1s Blummer\nhttp://bitsofproof.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/e732b10e/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/e732b10e/attachment.sig>"
            },
            {
                "author": "Gary Rowe",
                "date": "2014-01-21T10:01:55",
                "message_text_only": "MultiBit here.\n\n>At least Trezor and bitcoinj (Multibit) seems to be going in this way,\n>which is 100% of clients which expressed interest in bip39 :-).\n>\n>slush\n\nWe'll be using the BIP39 implementation present in Bitcoinj as slush says.\n\n>Proper Unicode handling is a serious issue however. You don't want\n>someone to move from one input method / machine to another and\n>suddenly find that their coins are inaccessible, because of an issue\n>of decomposed vs. compatibility forms or whatever.\n\nWe generate the word list internally (12,18,24) and confirm it is entered\ncorrectly through a retyping operation. This will allow us to detect\ncharacter encoding transpositions (e.g. u0032 vs u00a0) and alert the user\nbefore it becomes an issue.\n\nWhile English is the language of the first word list to be implemented, we\nwould definitely integrate alternative non-English word lists to make life\neasier for the global community. In general the approach would be for the\nuser to select their language (implying a locale) and then the word list to\nbe selected from that locale if available with a fallback to English. This\nfollows the same approach as resource bundles in Java.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/c576faef/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-21T10:11:39",
                "message_text_only": "We should just perform Unicode canonicalization before any text hits the\ncrypto code.  There are algorithms that automatically resolve such issues.\nAlthough with an English wordlist it would seem to make no difference\nanyway.\n\n\nOn Tue, Jan 21, 2014 at 10:01 AM, Gary Rowe <g.rowe at froot.co.uk> wrote:\n\n> MultiBit here.\n>\n> >At least Trezor and bitcoinj (Multibit) seems to be going in this way,\n> >which is 100% of clients which expressed interest in bip39 :-).\n> >\n> >slush\n>\n> We'll be using the BIP39 implementation present in Bitcoinj as slush says.\n>\n> >Proper Unicode handling is a serious issue however. You don't want\n> >someone to move from one input method / machine to another and\n> >suddenly find that their coins are inaccessible, because of an issue\n> >of decomposed vs. compatibility forms or whatever.\n>\n> We generate the word list internally (12,18,24) and confirm it is entered\n> correctly through a retyping operation. This will allow us to detect\n> character encoding transpositions (e.g. u0032 vs u00a0) and alert the user\n> before it becomes an issue.\n>\n> While English is the language of the first word list to be implemented, we\n> would definitely integrate alternative non-English word lists to make life\n> easier for the global community. In general the approach would be for the\n> user to select their language (implying a locale) and then the word list to\n> be selected from that locale if available with a fallback to English. This\n> follows the same approach as resource bundles in Java.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140121/3a445fb4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP0039: Final call",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Tamas Blummer",
                "Thomas Voegtlin",
                "slush",
                "Adam Back",
                "Mike Hearn",
                "Brooks Boyd",
                "Peter Todd",
                "Christophe Biocca",
                "Mark Friedenbach",
                "Gary Rowe"
            ],
            "messages_count": 17,
            "total_messages_chars_count": 30979
        }
    },
    {
        "title": "[Bitcoin-development] Combining big transactions with hash-only blocks to improve tps.",
        "thread_messages": [
            {
                "author": "bc",
                "date": "2014-01-22T21:06:05",
                "message_text_only": "Pdf version:\nhttp://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf\n\n\n== Combining big transactions with hash-only blocks to improve tps. ==\n\n==== Abstract: ====\nI've heard people talk about including only hashes in a block to speed \nup the network and also about using CoinJoin to improve privacy. I've \nnot heard anyone talk about implications of combining these two \ntechniques. I think that it would both improve network's anonymity, but \nalso improve tps by a few orders of magnitude.\n\nI propose two optimizations:\n1. Keep only hashes of transactions included in a block. Transfer all tx \nseparately.\n2. Use CoinJoin to merge transactions from many users for online \nshopping and banking.\n3. Use Jumbo transactions as a fallback for applications where CoinJoin \nis inappropriate.\n\n==== Keeping only hashes of tx in a block: ====\nCurrently every bitcoin block includes a copy of all transactions. This \nis redundant and unnecessary, since after the transaction gets \ntransmitted, every node learns about it in seconds.\nBy keeping only transaction hashes in block, we can keep block \npropagation time from increasing.\nAssuming a typical tx with one or two inputs and two outputs [typically \n300 bytes], current 1MiB block can contain about [assuming a block every \n10 minutes]:\n1MiB / 300 bytes = 3300tx = 5.5tps\n\nBy keeping only hashes in a block [32 bytes per hash]:\n1MiB / 32 bytes = 31000tx = 50tps\n\n== Benefits: ==\nThis method allows to achieve more tps without increasing the block \npropagation time, which is critical for mining decentralization.\nIt removes redundancy, since every tx has to be transmitted only once.\nIt leads to a more consistent bandwidth utilization [large transactions \nare transmitted all the time, while blocks are kept small and easy to \npropagate].\nBecause a block size is a constant, mining fees would not depend on the \nsize of a transaction. Obviously to limit the network flood, there \nshould be a transaction size limit.\n\n== Problems: ==\nSelfish miner can keep a subset of transactions only for yourself and \nrelease them only with a new block. This problem can be mitigated by \nmaking nodes verify all transactions before propagating a block. The \nincentive will then be to mine only a well-distributed transactions to \nlower orphan rate.\nThe miner can try to sneak up invalid transaction in a block. This \nproblem is also mitigated by not accepting a block before it gets verified.\n\n==== CoinJoin: ====\nIf the block size keeps only hashes, a transaction can be much bigger. \nSince CoinJoin allows many people to send coins with one transaction, \nthe effective transaction rate can be increased considerably.\n\n== Example: ==\nLet's assume the transaction size limit of 50KiB. Limit of this size \nallows for a CoinJoin transaction between 50KiB / 300b = 170 participants.\nSo for a block of 1MiB, it would allow for 50tps * \n170effective_transactions/tx = 8500tps.\n\n== Benefits: ==\nThere would be an incentive for users to use CoinJoin by default [lower \ntx fees per effective transaction], which would greatly increase \nanonymity of the network.\nSince block size stays the same, block propagation time also stays the same.\nIt doesn't require any changes to the protocol. CoinJoin transactions \nwere always supported in bitcoin.\n\n== Problems: ==\n1) CoinJoin requires collaboration between many users in real-time. It \nmeans, that transaction must be distributed to every CoinJoin \nparticipant, and every participant has to sign it before it can be \nreleased. Therefore it induces delays, which can take some time.\nIt wouldn't be an issue with Internet banking or on-line shopping [where \neven 10 minutes per transaction is fast enough], however even 20 seconds \ncan make the system unsuitable for POS payments.\nPotential solution: Use bigger CoinJoin user base for online payments \n[with smaller fees], and a smaller one for POS payments [with larger fees].\n\n2) Signing a CoinJoin transaction requires to transfer a whole \ntransaction for a user to sign.\nThis can sometimes take up to a few minutes on a very slow networks.\n\n3) CoinJoin transactions are limited. They are good enough for money \ntransfer, but for more advanced appliances CoinJoin might be inadequate.\n\n==== Jumbo transactons: ====\nI propose another tx type as a fallback where CoinJoin is not Combining \nbig transactions with hash-only blocks to improve tps.applicable. It \nwould remove the CoinJoin induced delays, while keeping transaction \nsizes big.\n\nImage: http://bcdev.net/data/jubo_transaction_description.png\n\nTransaction joiner is a service that collects transactions from clients \nand publishes them as a Jumbo transaction.\nJumbo pubkey prevents transaction from being modified. It can only be \naccepted or rejected by the miner as a whole, which should limit \ndiscrimination.\n\n== Algorithm: ==\n1) Transaction joiner sends a Jumbo pubkey hash to the client.\n2) Client creates a transaction, includes a Jumbo pubkey hash and signs it.\n3) Transaction joiner waits until there are enough transactions and \nreleases a Jumbo transaction to the network.\n4) A miner includes only a hash of a Jumbo transaction in a block, he \ncannot cherry-pick individual transactions from the bulk.\n5) The network checks if every transaction inside a Jumbo transaction \nincludes a Jumbo pubkey hash and if every transaction inside is valid.\n\n== Benefits: ==\nSince the block size stays the same, block propagation time also stay \nthe same.\nThere is no need to wait for every participant to sign the transaction. \nIt's therefore more suitable for POS payments.\nNo additional network overhead for a thin client compared to a standard tx.\nBackwards compatibility with current transaction system.\n\n== Problems: ==\n1) Jumbo transactions don't mix coins. Anonymity of the network is not \nincreased.\n2) There would be an incentive to use this transaction type by default \n[compared to CoinJoin].\n\nPotential solution:\nMake Jumbo transaction size limit lower than CoinJoin. That would make \nfees for these transactions higher, thus creating an incentive to only \nuse them when necessary.\n\n3) Transaction joiner has to wait for a Jumbo transaction to be big \nenough before it gets released.\nIt's not a big problem. When the network load is low, the fee required \nfor a tx to be included should be lower, allowing for smaller Jumbo \ntransactions. When the network load is high, it takes less time to fill \na Jumbo transaction.\n\n==== References: ====\nIncreasing the Network Hashing Power by reducing block propagation time \nhttps://bitcointalk.org/index.php?topic=145066.0\n\nCoinJoin: Bitcoin privacy for the real world\nhttps://bitcointalk.org/index.php?topic=279249.0\n\nBitcoin: A Peer-to-Peer Electronic Cash System\nhttp://bitcoin.org/bitcoin.pdf"
            },
            {
                "author": "Natanael",
                "date": "2014-01-22T21:43:44",
                "message_text_only": "Couldn't we also use the type of zkSNARK's that Zerocoin adopted to\nprove that the hash-only blocks only have valid transactions in it,\nsince they are small and quite efficient to verify? The trouble is\nthat they're still inefficient to generate, but given powerful enough\ncomputers that compiles the hashes for the block and it could likely\nstill be done fast enough to handle large amounts of transactions. The\ncomputer is likely not going to be the most expensive part anyway by a\nfar margin.\n\nzkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge\n\nOn Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:\n> Pdf version:\n> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf\n>\n>\n> == Combining big transactions with hash-only blocks to improve tps. ==\n>\n> ==== Abstract: ====\n> I've heard people talk about including only hashes in a block to speed\n> up the network and also about using CoinJoin to improve privacy. I've\n> not heard anyone talk about implications of combining these two\n> techniques. I think that it would both improve network's anonymity, but\n> also improve tps by a few orders of magnitude.\n>\n> I propose two optimizations:\n> 1. Keep only hashes of transactions included in a block. Transfer all tx\n> separately.\n> 2. Use CoinJoin to merge transactions from many users for online\n> shopping and banking.\n> 3. Use Jumbo transactions as a fallback for applications where CoinJoin\n> is inappropriate.\n>\n> ==== Keeping only hashes of tx in a block: ====\n> Currently every bitcoin block includes a copy of all transactions. This\n> is redundant and unnecessary, since after the transaction gets\n> transmitted, every node learns about it in seconds.\n> By keeping only transaction hashes in block, we can keep block\n> propagation time from increasing.\n> Assuming a typical tx with one or two inputs and two outputs [typically\n> 300 bytes], current 1MiB block can contain about [assuming a block every\n> 10 minutes]:\n> 1MiB / 300 bytes = 3300tx = 5.5tps\n>\n> By keeping only hashes in a block [32 bytes per hash]:\n> 1MiB / 32 bytes = 31000tx = 50tps\n>\n> == Benefits: ==\n> This method allows to achieve more tps without increasing the block\n> propagation time, which is critical for mining decentralization.\n> It removes redundancy, since every tx has to be transmitted only once.\n> It leads to a more consistent bandwidth utilization [large transactions\n> are transmitted all the time, while blocks are kept small and easy to\n> propagate].\n> Because a block size is a constant, mining fees would not depend on the\n> size of a transaction. Obviously to limit the network flood, there\n> should be a transaction size limit.\n>\n> == Problems: ==\n> Selfish miner can keep a subset of transactions only for yourself and\n> release them only with a new block. This problem can be mitigated by\n> making nodes verify all transactions before propagating a block. The\n> incentive will then be to mine only a well-distributed transactions to\n> lower orphan rate.\n> The miner can try to sneak up invalid transaction in a block. This\n> problem is also mitigated by not accepting a block before it gets verified.\n>\n> ==== CoinJoin: ====\n> If the block size keeps only hashes, a transaction can be much bigger.\n> Since CoinJoin allows many people to send coins with one transaction,\n> the effective transaction rate can be increased considerably.\n>\n> == Example: ==\n> Let's assume the transaction size limit of 50KiB. Limit of this size\n> allows for a CoinJoin transaction between 50KiB / 300b = 170 participants.\n> So for a block of 1MiB, it would allow for 50tps *\n> 170effective_transactions/tx = 8500tps.\n>\n> == Benefits: ==\n> There would be an incentive for users to use CoinJoin by default [lower\n> tx fees per effective transaction], which would greatly increase\n> anonymity of the network.\n> Since block size stays the same, block propagation time also stays the same.\n> It doesn't require any changes to the protocol. CoinJoin transactions\n> were always supported in bitcoin.\n>\n> == Problems: ==\n> 1) CoinJoin requires collaboration between many users in real-time. It\n> means, that transaction must be distributed to every CoinJoin\n> participant, and every participant has to sign it before it can be\n> released. Therefore it induces delays, which can take some time.\n> It wouldn't be an issue with Internet banking or on-line shopping [where\n> even 10 minutes per transaction is fast enough], however even 20 seconds\n> can make the system unsuitable for POS payments.\n> Potential solution: Use bigger CoinJoin user base for online payments\n> [with smaller fees], and a smaller one for POS payments [with larger fees].\n>\n> 2) Signing a CoinJoin transaction requires to transfer a whole\n> transaction for a user to sign.\n> This can sometimes take up to a few minutes on a very slow networks.\n>\n> 3) CoinJoin transactions are limited. They are good enough for money\n> transfer, but for more advanced appliances CoinJoin might be inadequate.\n>\n> ==== Jumbo transactons: ====\n> I propose another tx type as a fallback where CoinJoin is not Combining\n> big transactions with hash-only blocks to improve tps.applicable. It\n> would remove the CoinJoin induced delays, while keeping transaction\n> sizes big.\n>\n> Image: http://bcdev.net/data/jubo_transaction_description.png\n>\n> Transaction joiner is a service that collects transactions from clients\n> and publishes them as a Jumbo transaction.\n> Jumbo pubkey prevents transaction from being modified. It can only be\n> accepted or rejected by the miner as a whole, which should limit\n> discrimination.\n>\n> == Algorithm: ==\n> 1) Transaction joiner sends a Jumbo pubkey hash to the client.\n> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs it.\n> 3) Transaction joiner waits until there are enough transactions and\n> releases a Jumbo transaction to the network.\n> 4) A miner includes only a hash of a Jumbo transaction in a block, he\n> cannot cherry-pick individual transactions from the bulk.\n> 5) The network checks if every transaction inside a Jumbo transaction\n> includes a Jumbo pubkey hash and if every transaction inside is valid.\n>\n> == Benefits: ==\n> Since the block size stays the same, block propagation time also stay\n> the same.\n> There is no need to wait for every participant to sign the transaction.\n> It's therefore more suitable for POS payments.\n> No additional network overhead for a thin client compared to a standard tx.\n> Backwards compatibility with current transaction system.\n>\n> == Problems: ==\n> 1) Jumbo transactions don't mix coins. Anonymity of the network is not\n> increased.\n> 2) There would be an incentive to use this transaction type by default\n> [compared to CoinJoin].\n>\n> Potential solution:\n> Make Jumbo transaction size limit lower than CoinJoin. That would make\n> fees for these transactions higher, thus creating an incentive to only\n> use them when necessary.\n>\n> 3) Transaction joiner has to wait for a Jumbo transaction to be big\n> enough before it gets released.\n> It's not a big problem. When the network load is low, the fee required\n> for a tx to be included should be lower, allowing for smaller Jumbo\n> transactions. When the network load is high, it takes less time to fill\n> a Jumbo transaction.\n>\n> ==== References: ====\n> Increasing the Network Hashing Power by reducing block propagation time\n> https://bitcointalk.org/index.php?topic=145066.0\n>\n> CoinJoin: Bitcoin privacy for the real world\n> https://bitcointalk.org/index.php?topic=279249.0\n>\n> Bitcoin: A Peer-to-Peer Electronic Cash System\n> http://bitcoin.org/bitcoin.pdf\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-01-22T22:04:05",
                "message_text_only": "Comments:\n\nbc:\n- Ultimately, this helps with block propagation latency, but not with\nthe bandwidth constraints themselves, because all transactions do need\nto be broadcast.\n- Most of the benefits of your approach can be obtained simply by\nprebroadcasting the entire merkle tree while you're working on it. You\ncan get even bigger gains by the miners reusing large chunks of each\nother's merkle trees (which they could if they had similar transaction\nselection policies). Then there's just the headers to broadcast.\n\nNatanael:\n- Most of the block's content is important though, because I don't\njust want to know that the block is valid, I also want to know what\nchanges to make to my local copy of the UTXO. So I don't know how much\nspace/bandwidth you'd save. You would definitely save on signature\nchecking and independent validation, but that's CPU time.\n\nOn Wed, Jan 22, 2014 at 4:43 PM, Natanael <natanael.l at gmail.com> wrote:\n> Couldn't we also use the type of zkSNARK's that Zerocoin adopted to\n> prove that the hash-only blocks only have valid transactions in it,\n> since they are small and quite efficient to verify? The trouble is\n> that they're still inefficient to generate, but given powerful enough\n> computers that compiles the hashes for the block and it could likely\n> still be done fast enough to handle large amounts of transactions. The\n> computer is likely not going to be the most expensive part anyway by a\n> far margin.\n>\n> zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge\n>\n> On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:\n>> Pdf version:\n>> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf\n>>\n>>\n>> == Combining big transactions with hash-only blocks to improve tps. ==\n>>\n>> ==== Abstract: ====\n>> I've heard people talk about including only hashes in a block to speed\n>> up the network and also about using CoinJoin to improve privacy. I've\n>> not heard anyone talk about implications of combining these two\n>> techniques. I think that it would both improve network's anonymity, but\n>> also improve tps by a few orders of magnitude.\n>>\n>> I propose two optimizations:\n>> 1. Keep only hashes of transactions included in a block. Transfer all tx\n>> separately.\n>> 2. Use CoinJoin to merge transactions from many users for online\n>> shopping and banking.\n>> 3. Use Jumbo transactions as a fallback for applications where CoinJoin\n>> is inappropriate.\n>>\n>> ==== Keeping only hashes of tx in a block: ====\n>> Currently every bitcoin block includes a copy of all transactions. This\n>> is redundant and unnecessary, since after the transaction gets\n>> transmitted, every node learns about it in seconds.\n>> By keeping only transaction hashes in block, we can keep block\n>> propagation time from increasing.\n>> Assuming a typical tx with one or two inputs and two outputs [typically\n>> 300 bytes], current 1MiB block can contain about [assuming a block every\n>> 10 minutes]:\n>> 1MiB / 300 bytes = 3300tx = 5.5tps\n>>\n>> By keeping only hashes in a block [32 bytes per hash]:\n>> 1MiB / 32 bytes = 31000tx = 50tps\n>>\n>> == Benefits: ==\n>> This method allows to achieve more tps without increasing the block\n>> propagation time, which is critical for mining decentralization.\n>> It removes redundancy, since every tx has to be transmitted only once.\n>> It leads to a more consistent bandwidth utilization [large transactions\n>> are transmitted all the time, while blocks are kept small and easy to\n>> propagate].\n>> Because a block size is a constant, mining fees would not depend on the\n>> size of a transaction. Obviously to limit the network flood, there\n>> should be a transaction size limit.\n>>\n>> == Problems: ==\n>> Selfish miner can keep a subset of transactions only for yourself and\n>> release them only with a new block. This problem can be mitigated by\n>> making nodes verify all transactions before propagating a block. The\n>> incentive will then be to mine only a well-distributed transactions to\n>> lower orphan rate.\n>> The miner can try to sneak up invalid transaction in a block. This\n>> problem is also mitigated by not accepting a block before it gets verified.\n>>\n>> ==== CoinJoin: ====\n>> If the block size keeps only hashes, a transaction can be much bigger.\n>> Since CoinJoin allows many people to send coins with one transaction,\n>> the effective transaction rate can be increased considerably.\n>>\n>> == Example: ==\n>> Let's assume the transaction size limit of 50KiB. Limit of this size\n>> allows for a CoinJoin transaction between 50KiB / 300b = 170 participants.\n>> So for a block of 1MiB, it would allow for 50tps *\n>> 170effective_transactions/tx = 8500tps.\n>>\n>> == Benefits: ==\n>> There would be an incentive for users to use CoinJoin by default [lower\n>> tx fees per effective transaction], which would greatly increase\n>> anonymity of the network.\n>> Since block size stays the same, block propagation time also stays the same.\n>> It doesn't require any changes to the protocol. CoinJoin transactions\n>> were always supported in bitcoin.\n>>\n>> == Problems: ==\n>> 1) CoinJoin requires collaboration between many users in real-time. It\n>> means, that transaction must be distributed to every CoinJoin\n>> participant, and every participant has to sign it before it can be\n>> released. Therefore it induces delays, which can take some time.\n>> It wouldn't be an issue with Internet banking or on-line shopping [where\n>> even 10 minutes per transaction is fast enough], however even 20 seconds\n>> can make the system unsuitable for POS payments.\n>> Potential solution: Use bigger CoinJoin user base for online payments\n>> [with smaller fees], and a smaller one for POS payments [with larger fees].\n>>\n>> 2) Signing a CoinJoin transaction requires to transfer a whole\n>> transaction for a user to sign.\n>> This can sometimes take up to a few minutes on a very slow networks.\n>>\n>> 3) CoinJoin transactions are limited. They are good enough for money\n>> transfer, but for more advanced appliances CoinJoin might be inadequate.\n>>\n>> ==== Jumbo transactons: ====\n>> I propose another tx type as a fallback where CoinJoin is not Combining\n>> big transactions with hash-only blocks to improve tps.applicable. It\n>> would remove the CoinJoin induced delays, while keeping transaction\n>> sizes big.\n>>\n>> Image: http://bcdev.net/data/jubo_transaction_description.png\n>>\n>> Transaction joiner is a service that collects transactions from clients\n>> and publishes them as a Jumbo transaction.\n>> Jumbo pubkey prevents transaction from being modified. It can only be\n>> accepted or rejected by the miner as a whole, which should limit\n>> discrimination.\n>>\n>> == Algorithm: ==\n>> 1) Transaction joiner sends a Jumbo pubkey hash to the client.\n>> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs it.\n>> 3) Transaction joiner waits until there are enough transactions and\n>> releases a Jumbo transaction to the network.\n>> 4) A miner includes only a hash of a Jumbo transaction in a block, he\n>> cannot cherry-pick individual transactions from the bulk.\n>> 5) The network checks if every transaction inside a Jumbo transaction\n>> includes a Jumbo pubkey hash and if every transaction inside is valid.\n>>\n>> == Benefits: ==\n>> Since the block size stays the same, block propagation time also stay\n>> the same.\n>> There is no need to wait for every participant to sign the transaction.\n>> It's therefore more suitable for POS payments.\n>> No additional network overhead for a thin client compared to a standard tx.\n>> Backwards compatibility with current transaction system.\n>>\n>> == Problems: ==\n>> 1) Jumbo transactions don't mix coins. Anonymity of the network is not\n>> increased.\n>> 2) There would be an incentive to use this transaction type by default\n>> [compared to CoinJoin].\n>>\n>> Potential solution:\n>> Make Jumbo transaction size limit lower than CoinJoin. That would make\n>> fees for these transactions higher, thus creating an incentive to only\n>> use them when necessary.\n>>\n>> 3) Transaction joiner has to wait for a Jumbo transaction to be big\n>> enough before it gets released.\n>> It's not a big problem. When the network load is low, the fee required\n>> for a tx to be included should be lower, allowing for smaller Jumbo\n>> transactions. When the network load is high, it takes less time to fill\n>> a Jumbo transaction.\n>>\n>> ==== References: ====\n>> Increasing the Network Hashing Power by reducing block propagation time\n>> https://bitcointalk.org/index.php?topic=145066.0\n>>\n>> CoinJoin: Bitcoin privacy for the real world\n>> https://bitcointalk.org/index.php?topic=279249.0\n>>\n>> Bitcoin: A Peer-to-Peer Electronic Cash System\n>> http://bitcoin.org/bitcoin.pdf\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-01-22T22:10:16",
                "message_text_only": "Maybe I'm missing something.\nHow do miners validate blocks if they only receive the hashes of the\ntransactions?\nWill they mine on top of a block when they don't know if it's valid?\n\n\nOn 1/22/14, Christophe Biocca <christophe.biocca at gmail.com> wrote:\n> Comments:\n>\n> bc:\n> - Ultimately, this helps with block propagation latency, but not with\n> the bandwidth constraints themselves, because all transactions do need\n> to be broadcast.\n> - Most of the benefits of your approach can be obtained simply by\n> prebroadcasting the entire merkle tree while you're working on it. You\n> can get even bigger gains by the miners reusing large chunks of each\n> other's merkle trees (which they could if they had similar transaction\n> selection policies). Then there's just the headers to broadcast.\n>\n> Natanael:\n> - Most of the block's content is important though, because I don't\n> just want to know that the block is valid, I also want to know what\n> changes to make to my local copy of the UTXO. So I don't know how much\n> space/bandwidth you'd save. You would definitely save on signature\n> checking and independent validation, but that's CPU time.\n>\n> On Wed, Jan 22, 2014 at 4:43 PM, Natanael <natanael.l at gmail.com> wrote:\n>> Couldn't we also use the type of zkSNARK's that Zerocoin adopted to\n>> prove that the hash-only blocks only have valid transactions in it,\n>> since they are small and quite efficient to verify? The trouble is\n>> that they're still inefficient to generate, but given powerful enough\n>> computers that compiles the hashes for the block and it could likely\n>> still be done fast enough to handle large amounts of transactions. The\n>> computer is likely not going to be the most expensive part anyway by a\n>> far margin.\n>>\n>> zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge\n>>\n>> On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:\n>>> Pdf version:\n>>> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf\n>>>\n>>>\n>>> == Combining big transactions with hash-only blocks to improve tps. ==\n>>>\n>>> ==== Abstract: ====\n>>> I've heard people talk about including only hashes in a block to speed\n>>> up the network and also about using CoinJoin to improve privacy. I've\n>>> not heard anyone talk about implications of combining these two\n>>> techniques. I think that it would both improve network's anonymity, but\n>>> also improve tps by a few orders of magnitude.\n>>>\n>>> I propose two optimizations:\n>>> 1. Keep only hashes of transactions included in a block. Transfer all tx\n>>> separately.\n>>> 2. Use CoinJoin to merge transactions from many users for online\n>>> shopping and banking.\n>>> 3. Use Jumbo transactions as a fallback for applications where CoinJoin\n>>> is inappropriate.\n>>>\n>>> ==== Keeping only hashes of tx in a block: ====\n>>> Currently every bitcoin block includes a copy of all transactions. This\n>>> is redundant and unnecessary, since after the transaction gets\n>>> transmitted, every node learns about it in seconds.\n>>> By keeping only transaction hashes in block, we can keep block\n>>> propagation time from increasing.\n>>> Assuming a typical tx with one or two inputs and two outputs [typically\n>>> 300 bytes], current 1MiB block can contain about [assuming a block every\n>>> 10 minutes]:\n>>> 1MiB / 300 bytes = 3300tx = 5.5tps\n>>>\n>>> By keeping only hashes in a block [32 bytes per hash]:\n>>> 1MiB / 32 bytes = 31000tx = 50tps\n>>>\n>>> == Benefits: ==\n>>> This method allows to achieve more tps without increasing the block\n>>> propagation time, which is critical for mining decentralization.\n>>> It removes redundancy, since every tx has to be transmitted only once.\n>>> It leads to a more consistent bandwidth utilization [large transactions\n>>> are transmitted all the time, while blocks are kept small and easy to\n>>> propagate].\n>>> Because a block size is a constant, mining fees would not depend on the\n>>> size of a transaction. Obviously to limit the network flood, there\n>>> should be a transaction size limit.\n>>>\n>>> == Problems: ==\n>>> Selfish miner can keep a subset of transactions only for yourself and\n>>> release them only with a new block. This problem can be mitigated by\n>>> making nodes verify all transactions before propagating a block. The\n>>> incentive will then be to mine only a well-distributed transactions to\n>>> lower orphan rate.\n>>> The miner can try to sneak up invalid transaction in a block. This\n>>> problem is also mitigated by not accepting a block before it gets\n>>> verified.\n>>>\n>>> ==== CoinJoin: ====\n>>> If the block size keeps only hashes, a transaction can be much bigger.\n>>> Since CoinJoin allows many people to send coins with one transaction,\n>>> the effective transaction rate can be increased considerably.\n>>>\n>>> == Example: ==\n>>> Let's assume the transaction size limit of 50KiB. Limit of this size\n>>> allows for a CoinJoin transaction between 50KiB / 300b = 170\n>>> participants.\n>>> So for a block of 1MiB, it would allow for 50tps *\n>>> 170effective_transactions/tx = 8500tps.\n>>>\n>>> == Benefits: ==\n>>> There would be an incentive for users to use CoinJoin by default [lower\n>>> tx fees per effective transaction], which would greatly increase\n>>> anonymity of the network.\n>>> Since block size stays the same, block propagation time also stays the\n>>> same.\n>>> It doesn't require any changes to the protocol. CoinJoin transactions\n>>> were always supported in bitcoin.\n>>>\n>>> == Problems: ==\n>>> 1) CoinJoin requires collaboration between many users in real-time. It\n>>> means, that transaction must be distributed to every CoinJoin\n>>> participant, and every participant has to sign it before it can be\n>>> released. Therefore it induces delays, which can take some time.\n>>> It wouldn't be an issue with Internet banking or on-line shopping [where\n>>> even 10 minutes per transaction is fast enough], however even 20 seconds\n>>> can make the system unsuitable for POS payments.\n>>> Potential solution: Use bigger CoinJoin user base for online payments\n>>> [with smaller fees], and a smaller one for POS payments [with larger\n>>> fees].\n>>>\n>>> 2) Signing a CoinJoin transaction requires to transfer a whole\n>>> transaction for a user to sign.\n>>> This can sometimes take up to a few minutes on a very slow networks.\n>>>\n>>> 3) CoinJoin transactions are limited. They are good enough for money\n>>> transfer, but for more advanced appliances CoinJoin might be inadequate.\n>>>\n>>> ==== Jumbo transactons: ====\n>>> I propose another tx type as a fallback where CoinJoin is not Combining\n>>> big transactions with hash-only blocks to improve tps.applicable. It\n>>> would remove the CoinJoin induced delays, while keeping transaction\n>>> sizes big.\n>>>\n>>> Image: http://bcdev.net/data/jubo_transaction_description.png\n>>>\n>>> Transaction joiner is a service that collects transactions from clients\n>>> and publishes them as a Jumbo transaction.\n>>> Jumbo pubkey prevents transaction from being modified. It can only be\n>>> accepted or rejected by the miner as a whole, which should limit\n>>> discrimination.\n>>>\n>>> == Algorithm: ==\n>>> 1) Transaction joiner sends a Jumbo pubkey hash to the client.\n>>> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs\n>>> it.\n>>> 3) Transaction joiner waits until there are enough transactions and\n>>> releases a Jumbo transaction to the network.\n>>> 4) A miner includes only a hash of a Jumbo transaction in a block, he\n>>> cannot cherry-pick individual transactions from the bulk.\n>>> 5) The network checks if every transaction inside a Jumbo transaction\n>>> includes a Jumbo pubkey hash and if every transaction inside is valid.\n>>>\n>>> == Benefits: ==\n>>> Since the block size stays the same, block propagation time also stay\n>>> the same.\n>>> There is no need to wait for every participant to sign the transaction.\n>>> It's therefore more suitable for POS payments.\n>>> No additional network overhead for a thin client compared to a standard\n>>> tx.\n>>> Backwards compatibility with current transaction system.\n>>>\n>>> == Problems: ==\n>>> 1) Jumbo transactions don't mix coins. Anonymity of the network is not\n>>> increased.\n>>> 2) There would be an incentive to use this transaction type by default\n>>> [compared to CoinJoin].\n>>>\n>>> Potential solution:\n>>> Make Jumbo transaction size limit lower than CoinJoin. That would make\n>>> fees for these transactions higher, thus creating an incentive to only\n>>> use them when necessary.\n>>>\n>>> 3) Transaction joiner has to wait for a Jumbo transaction to be big\n>>> enough before it gets released.\n>>> It's not a big problem. When the network load is low, the fee required\n>>> for a tx to be included should be lower, allowing for smaller Jumbo\n>>> transactions. When the network load is high, it takes less time to fill\n>>> a Jumbo transaction.\n>>>\n>>> ==== References: ====\n>>> Increasing the Network Hashing Power by reducing block propagation time\n>>> https://bitcointalk.org/index.php?topic=145066.0\n>>>\n>>> CoinJoin: Bitcoin privacy for the real world\n>>> https://bitcointalk.org/index.php?topic=279249.0\n>>>\n>>> Bitcoin: A Peer-to-Peer Electronic Cash System\n>>> http://bitcoin.org/bitcoin.pdf\n>>>\n>>> ------------------------------------------------------------------------------\n>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>>> Critical Workloads, Development Environments & Everything In Between.\n>>> Get a Quote or Start a Free Trial Today.\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "bc",
                "date": "2014-01-22T22:20:54",
                "message_text_only": "Jorge Tim\u00f3n:\nThe node would need to first verify a block before mining on top of it.\nBasically a receiver would ask a sender for missing transactions if he \ndoesn't know them already before propagating or mining the block.\n\nChristophe Biocca:\nYou're right, my idea doesn't offer any real advantage over \nprebroadcasting of the tree and including only it's header in a block.\n\nThanks,\nEric\n\n\nOn 22.01.2014 23:10, Jorge Tim\u00f3n wrote:\n> Maybe I'm missing something.\n> How do miners validate blocks if they only receive the hashes of the\n> transactions?\n> Will they mine on top of a block when they don't know if it's valid?\n>\n>\n> On 1/22/14, Christophe Biocca <christophe.biocca at gmail.com> wrote:\n>> Comments:\n>>\n>> bc:\n>> - Ultimately, this helps with block propagation latency, but not with\n>> the bandwidth constraints themselves, because all transactions do need\n>> to be broadcast.\n>> - Most of the benefits of your approach can be obtained simply by\n>> prebroadcasting the entire merkle tree while you're working on it. You\n>> can get even bigger gains by the miners reusing large chunks of each\n>> other's merkle trees (which they could if they had similar transaction\n>> selection policies). Then there's just the headers to broadcast.\n>>\n>> Natanael:\n>> - Most of the block's content is important though, because I don't\n>> just want to know that the block is valid, I also want to know what\n>> changes to make to my local copy of the UTXO. So I don't know how much\n>> space/bandwidth you'd save. You would definitely save on signature\n>> checking and independent validation, but that's CPU time.\n>>\n>> On Wed, Jan 22, 2014 at 4:43 PM, Natanael <natanael.l at gmail.com> wrote:\n>>> Couldn't we also use the type of zkSNARK's that Zerocoin adopted to\n>>> prove that the hash-only blocks only have valid transactions in it,\n>>> since they are small and quite efficient to verify? The trouble is\n>>> that they're still inefficient to generate, but given powerful enough\n>>> computers that compiles the hashes for the block and it could likely\n>>> still be done fast enough to handle large amounts of transactions. The\n>>> computer is likely not going to be the most expensive part anyway by a\n>>> far margin.\n>>>\n>>> zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge\n>>>\n>>> On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:\n>>>> Pdf version:\n>>>> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf\n>>>>\n>>>>\n>>>> == Combining big transactions with hash-only blocks to improve tps. ==\n>>>>\n>>>> ==== Abstract: ====\n>>>> I've heard people talk about including only hashes in a block to speed\n>>>> up the network and also about using CoinJoin to improve privacy. I've\n>>>> not heard anyone talk about implications of combining these two\n>>>> techniques. I think that it would both improve network's anonymity, but\n>>>> also improve tps by a few orders of magnitude.\n>>>>\n>>>> I propose two optimizations:\n>>>> 1. Keep only hashes of transactions included in a block. Transfer all tx\n>>>> separately.\n>>>> 2. Use CoinJoin to merge transactions from many users for online\n>>>> shopping and banking.\n>>>> 3. Use Jumbo transactions as a fallback for applications where CoinJoin\n>>>> is inappropriate.\n>>>>\n>>>> ==== Keeping only hashes of tx in a block: ====\n>>>> Currently every bitcoin block includes a copy of all transactions. This\n>>>> is redundant and unnecessary, since after the transaction gets\n>>>> transmitted, every node learns about it in seconds.\n>>>> By keeping only transaction hashes in block, we can keep block\n>>>> propagation time from increasing.\n>>>> Assuming a typical tx with one or two inputs and two outputs [typically\n>>>> 300 bytes], current 1MiB block can contain about [assuming a block every\n>>>> 10 minutes]:\n>>>> 1MiB / 300 bytes = 3300tx = 5.5tps\n>>>>\n>>>> By keeping only hashes in a block [32 bytes per hash]:\n>>>> 1MiB / 32 bytes = 31000tx = 50tps\n>>>>\n>>>> == Benefits: ==\n>>>> This method allows to achieve more tps without increasing the block\n>>>> propagation time, which is critical for mining decentralization.\n>>>> It removes redundancy, since every tx has to be transmitted only once.\n>>>> It leads to a more consistent bandwidth utilization [large transactions\n>>>> are transmitted all the time, while blocks are kept small and easy to\n>>>> propagate].\n>>>> Because a block size is a constant, mining fees would not depend on the\n>>>> size of a transaction. Obviously to limit the network flood, there\n>>>> should be a transaction size limit.\n>>>>\n>>>> == Problems: ==\n>>>> Selfish miner can keep a subset of transactions only for yourself and\n>>>> release them only with a new block. This problem can be mitigated by\n>>>> making nodes verify all transactions before propagating a block. The\n>>>> incentive will then be to mine only a well-distributed transactions to\n>>>> lower orphan rate.\n>>>> The miner can try to sneak up invalid transaction in a block. This\n>>>> problem is also mitigated by not accepting a block before it gets\n>>>> verified.\n>>>>\n>>>> ==== CoinJoin: ====\n>>>> If the block size keeps only hashes, a transaction can be much bigger.\n>>>> Since CoinJoin allows many people to send coins with one transaction,\n>>>> the effective transaction rate can be increased considerably.\n>>>>\n>>>> == Example: ==\n>>>> Let's assume the transaction size limit of 50KiB. Limit of this size\n>>>> allows for a CoinJoin transaction between 50KiB / 300b = 170\n>>>> participants.\n>>>> So for a block of 1MiB, it would allow for 50tps *\n>>>> 170effective_transactions/tx = 8500tps.\n>>>>\n>>>> == Benefits: ==\n>>>> There would be an incentive for users to use CoinJoin by default [lower\n>>>> tx fees per effective transaction], which would greatly increase\n>>>> anonymity of the network.\n>>>> Since block size stays the same, block propagation time also stays the\n>>>> same.\n>>>> It doesn't require any changes to the protocol. CoinJoin transactions\n>>>> were always supported in bitcoin.\n>>>>\n>>>> == Problems: ==\n>>>> 1) CoinJoin requires collaboration between many users in real-time. It\n>>>> means, that transaction must be distributed to every CoinJoin\n>>>> participant, and every participant has to sign it before it can be\n>>>> released. Therefore it induces delays, which can take some time.\n>>>> It wouldn't be an issue with Internet banking or on-line shopping [where\n>>>> even 10 minutes per transaction is fast enough], however even 20 seconds\n>>>> can make the system unsuitable for POS payments.\n>>>> Potential solution: Use bigger CoinJoin user base for online payments\n>>>> [with smaller fees], and a smaller one for POS payments [with larger\n>>>> fees].\n>>>>\n>>>> 2) Signing a CoinJoin transaction requires to transfer a whole\n>>>> transaction for a user to sign.\n>>>> This can sometimes take up to a few minutes on a very slow networks.\n>>>>\n>>>> 3) CoinJoin transactions are limited. They are good enough for money\n>>>> transfer, but for more advanced appliances CoinJoin might be inadequate.\n>>>>\n>>>> ==== Jumbo transactons: ====\n>>>> I propose another tx type as a fallback where CoinJoin is not Combining\n>>>> big transactions with hash-only blocks to improve tps.applicable. It\n>>>> would remove the CoinJoin induced delays, while keeping transaction\n>>>> sizes big.\n>>>>\n>>>> Image: http://bcdev.net/data/jubo_transaction_description.png\n>>>>\n>>>> Transaction joiner is a service that collects transactions from clients\n>>>> and publishes them as a Jumbo transaction.\n>>>> Jumbo pubkey prevents transaction from being modified. It can only be\n>>>> accepted or rejected by the miner as a whole, which should limit\n>>>> discrimination.\n>>>>\n>>>> == Algorithm: ==\n>>>> 1) Transaction joiner sends a Jumbo pubkey hash to the client.\n>>>> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs\n>>>> it.\n>>>> 3) Transaction joiner waits until there are enough transactions and\n>>>> releases a Jumbo transaction to the network.\n>>>> 4) A miner includes only a hash of a Jumbo transaction in a block, he\n>>>> cannot cherry-pick individual transactions from the bulk.\n>>>> 5) The network checks if every transaction inside a Jumbo transaction\n>>>> includes a Jumbo pubkey hash and if every transaction inside is valid.\n>>>>\n>>>> == Benefits: ==\n>>>> Since the block size stays the same, block propagation time also stay\n>>>> the same.\n>>>> There is no need to wait for every participant to sign the transaction.\n>>>> It's therefore more suitable for POS payments.\n>>>> No additional network overhead for a thin client compared to a standard\n>>>> tx.\n>>>> Backwards compatibility with current transaction system.\n>>>>\n>>>> == Problems: ==\n>>>> 1) Jumbo transactions don't mix coins. Anonymity of the network is not\n>>>> increased.\n>>>> 2) There would be an incentive to use this transaction type by default\n>>>> [compared to CoinJoin].\n>>>>\n>>>> Potential solution:\n>>>> Make Jumbo transaction size limit lower than CoinJoin. That would make\n>>>> fees for these transactions higher, thus creating an incentive to only\n>>>> use them when necessary.\n>>>>\n>>>> 3) Transaction joiner has to wait for a Jumbo transaction to be big\n>>>> enough before it gets released.\n>>>> It's not a big problem. When the network load is low, the fee required\n>>>> for a tx to be included should be lower, allowing for smaller Jumbo\n>>>> transactions. When the network load is high, it takes less time to fill\n>>>> a Jumbo transaction.\n>>>>\n>>>> ==== References: ====\n>>>> Increasing the Network Hashing Power by reducing block propagation time\n>>>> https://bitcointalk.org/index.php?topic=145066.0\n>>>>\n>>>> CoinJoin: Bitcoin privacy for the real world\n>>>> https://bitcointalk.org/index.php?topic=279249.0\n>>>>\n>>>> Bitcoin: A Peer-to-Peer Electronic Cash System\n>>>> http://bitcoin.org/bitcoin.pdf\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>>>> Critical Workloads, Development Environments & Everything In Between.\n>>>> Get a Quote or Start a Free Trial Today.\n>>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>> ------------------------------------------------------------------------------\n>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>>> Critical Workloads, Development Environments & Everything In Between.\n>>> Get a Quote or Start a Free Trial Today.\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-01-22T22:20:58",
                "message_text_only": "Transactions are already sitting in everyone's (or nearly everyone's)\nmempools (because they get broadcast to get to a miner in the first\nplace). If you don't have it (because you just connected to the\nnetwork after stopping for a bit) you can just call getdata against\nyour peers to get a copy.\n\nNot rebroadcasting the transactions as part of the blocks is already\nin the cards because it's such an easy way to cut network traffic\nnearly in half.\n\nOn Wed, Jan 22, 2014 at 5:10 PM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n> Maybe I'm missing something.\n> How do miners validate blocks if they only receive the hashes of the\n> transactions?\n> Will they mine on top of a block when they don't know if it's valid?\n>\n>\n> On 1/22/14, Christophe Biocca <christophe.biocca at gmail.com> wrote:\n>> Comments:\n>>\n>> bc:\n>> - Ultimately, this helps with block propagation latency, but not with\n>> the bandwidth constraints themselves, because all transactions do need\n>> to be broadcast.\n>> - Most of the benefits of your approach can be obtained simply by\n>> prebroadcasting the entire merkle tree while you're working on it. You\n>> can get even bigger gains by the miners reusing large chunks of each\n>> other's merkle trees (which they could if they had similar transaction\n>> selection policies). Then there's just the headers to broadcast.\n>>\n>> Natanael:\n>> - Most of the block's content is important though, because I don't\n>> just want to know that the block is valid, I also want to know what\n>> changes to make to my local copy of the UTXO. So I don't know how much\n>> space/bandwidth you'd save. You would definitely save on signature\n>> checking and independent validation, but that's CPU time.\n>>\n>> On Wed, Jan 22, 2014 at 4:43 PM, Natanael <natanael.l at gmail.com> wrote:\n>>> Couldn't we also use the type of zkSNARK's that Zerocoin adopted to\n>>> prove that the hash-only blocks only have valid transactions in it,\n>>> since they are small and quite efficient to verify? The trouble is\n>>> that they're still inefficient to generate, but given powerful enough\n>>> computers that compiles the hashes for the block and it could likely\n>>> still be done fast enough to handle large amounts of transactions. The\n>>> computer is likely not going to be the most expensive part anyway by a\n>>> far margin.\n>>>\n>>> zkSNARK = zero-knowledge Succinct Non-interactive ARgument of Knowledge\n>>>\n>>> On Wed, Jan 22, 2014 at 10:06 PM, bc <bc at bcdev.net> wrote:\n>>>> Pdf version:\n>>>> http://bcdev.net/data/bitcoin_big_tx_with_coin_join.pdf\n>>>>\n>>>>\n>>>> == Combining big transactions with hash-only blocks to improve tps. ==\n>>>>\n>>>> ==== Abstract: ====\n>>>> I've heard people talk about including only hashes in a block to speed\n>>>> up the network and also about using CoinJoin to improve privacy. I've\n>>>> not heard anyone talk about implications of combining these two\n>>>> techniques. I think that it would both improve network's anonymity, but\n>>>> also improve tps by a few orders of magnitude.\n>>>>\n>>>> I propose two optimizations:\n>>>> 1. Keep only hashes of transactions included in a block. Transfer all tx\n>>>> separately.\n>>>> 2. Use CoinJoin to merge transactions from many users for online\n>>>> shopping and banking.\n>>>> 3. Use Jumbo transactions as a fallback for applications where CoinJoin\n>>>> is inappropriate.\n>>>>\n>>>> ==== Keeping only hashes of tx in a block: ====\n>>>> Currently every bitcoin block includes a copy of all transactions. This\n>>>> is redundant and unnecessary, since after the transaction gets\n>>>> transmitted, every node learns about it in seconds.\n>>>> By keeping only transaction hashes in block, we can keep block\n>>>> propagation time from increasing.\n>>>> Assuming a typical tx with one or two inputs and two outputs [typically\n>>>> 300 bytes], current 1MiB block can contain about [assuming a block every\n>>>> 10 minutes]:\n>>>> 1MiB / 300 bytes = 3300tx = 5.5tps\n>>>>\n>>>> By keeping only hashes in a block [32 bytes per hash]:\n>>>> 1MiB / 32 bytes = 31000tx = 50tps\n>>>>\n>>>> == Benefits: ==\n>>>> This method allows to achieve more tps without increasing the block\n>>>> propagation time, which is critical for mining decentralization.\n>>>> It removes redundancy, since every tx has to be transmitted only once.\n>>>> It leads to a more consistent bandwidth utilization [large transactions\n>>>> are transmitted all the time, while blocks are kept small and easy to\n>>>> propagate].\n>>>> Because a block size is a constant, mining fees would not depend on the\n>>>> size of a transaction. Obviously to limit the network flood, there\n>>>> should be a transaction size limit.\n>>>>\n>>>> == Problems: ==\n>>>> Selfish miner can keep a subset of transactions only for yourself and\n>>>> release them only with a new block. This problem can be mitigated by\n>>>> making nodes verify all transactions before propagating a block. The\n>>>> incentive will then be to mine only a well-distributed transactions to\n>>>> lower orphan rate.\n>>>> The miner can try to sneak up invalid transaction in a block. This\n>>>> problem is also mitigated by not accepting a block before it gets\n>>>> verified.\n>>>>\n>>>> ==== CoinJoin: ====\n>>>> If the block size keeps only hashes, a transaction can be much bigger.\n>>>> Since CoinJoin allows many people to send coins with one transaction,\n>>>> the effective transaction rate can be increased considerably.\n>>>>\n>>>> == Example: ==\n>>>> Let's assume the transaction size limit of 50KiB. Limit of this size\n>>>> allows for a CoinJoin transaction between 50KiB / 300b = 170\n>>>> participants.\n>>>> So for a block of 1MiB, it would allow for 50tps *\n>>>> 170effective_transactions/tx = 8500tps.\n>>>>\n>>>> == Benefits: ==\n>>>> There would be an incentive for users to use CoinJoin by default [lower\n>>>> tx fees per effective transaction], which would greatly increase\n>>>> anonymity of the network.\n>>>> Since block size stays the same, block propagation time also stays the\n>>>> same.\n>>>> It doesn't require any changes to the protocol. CoinJoin transactions\n>>>> were always supported in bitcoin.\n>>>>\n>>>> == Problems: ==\n>>>> 1) CoinJoin requires collaboration between many users in real-time. It\n>>>> means, that transaction must be distributed to every CoinJoin\n>>>> participant, and every participant has to sign it before it can be\n>>>> released. Therefore it induces delays, which can take some time.\n>>>> It wouldn't be an issue with Internet banking or on-line shopping [where\n>>>> even 10 minutes per transaction is fast enough], however even 20 seconds\n>>>> can make the system unsuitable for POS payments.\n>>>> Potential solution: Use bigger CoinJoin user base for online payments\n>>>> [with smaller fees], and a smaller one for POS payments [with larger\n>>>> fees].\n>>>>\n>>>> 2) Signing a CoinJoin transaction requires to transfer a whole\n>>>> transaction for a user to sign.\n>>>> This can sometimes take up to a few minutes on a very slow networks.\n>>>>\n>>>> 3) CoinJoin transactions are limited. They are good enough for money\n>>>> transfer, but for more advanced appliances CoinJoin might be inadequate.\n>>>>\n>>>> ==== Jumbo transactons: ====\n>>>> I propose another tx type as a fallback where CoinJoin is not Combining\n>>>> big transactions with hash-only blocks to improve tps.applicable. It\n>>>> would remove the CoinJoin induced delays, while keeping transaction\n>>>> sizes big.\n>>>>\n>>>> Image: http://bcdev.net/data/jubo_transaction_description.png\n>>>>\n>>>> Transaction joiner is a service that collects transactions from clients\n>>>> and publishes them as a Jumbo transaction.\n>>>> Jumbo pubkey prevents transaction from being modified. It can only be\n>>>> accepted or rejected by the miner as a whole, which should limit\n>>>> discrimination.\n>>>>\n>>>> == Algorithm: ==\n>>>> 1) Transaction joiner sends a Jumbo pubkey hash to the client.\n>>>> 2) Client creates a transaction, includes a Jumbo pubkey hash and signs\n>>>> it.\n>>>> 3) Transaction joiner waits until there are enough transactions and\n>>>> releases a Jumbo transaction to the network.\n>>>> 4) A miner includes only a hash of a Jumbo transaction in a block, he\n>>>> cannot cherry-pick individual transactions from the bulk.\n>>>> 5) The network checks if every transaction inside a Jumbo transaction\n>>>> includes a Jumbo pubkey hash and if every transaction inside is valid.\n>>>>\n>>>> == Benefits: ==\n>>>> Since the block size stays the same, block propagation time also stay\n>>>> the same.\n>>>> There is no need to wait for every participant to sign the transaction.\n>>>> It's therefore more suitable for POS payments.\n>>>> No additional network overhead for a thin client compared to a standard\n>>>> tx.\n>>>> Backwards compatibility with current transaction system.\n>>>>\n>>>> == Problems: ==\n>>>> 1) Jumbo transactions don't mix coins. Anonymity of the network is not\n>>>> increased.\n>>>> 2) There would be an incentive to use this transaction type by default\n>>>> [compared to CoinJoin].\n>>>>\n>>>> Potential solution:\n>>>> Make Jumbo transaction size limit lower than CoinJoin. That would make\n>>>> fees for these transactions higher, thus creating an incentive to only\n>>>> use them when necessary.\n>>>>\n>>>> 3) Transaction joiner has to wait for a Jumbo transaction to be big\n>>>> enough before it gets released.\n>>>> It's not a big problem. When the network load is low, the fee required\n>>>> for a tx to be included should be lower, allowing for smaller Jumbo\n>>>> transactions. When the network load is high, it takes less time to fill\n>>>> a Jumbo transaction.\n>>>>\n>>>> ==== References: ====\n>>>> Increasing the Network Hashing Power by reducing block propagation time\n>>>> https://bitcointalk.org/index.php?topic=145066.0\n>>>>\n>>>> CoinJoin: Bitcoin privacy for the real world\n>>>> https://bitcointalk.org/index.php?topic=279249.0\n>>>>\n>>>> Bitcoin: A Peer-to-Peer Electronic Cash System\n>>>> http://bitcoin.org/bitcoin.pdf\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>>>> Critical Workloads, Development Environments & Everything In Between.\n>>>> Get a Quote or Start a Free Trial Today.\n>>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>> ------------------------------------------------------------------------------\n>>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>>> Critical Workloads, Development Environments & Everything In Between.\n>>> Get a Quote or Start a Free Trial Today.\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n> --\n> Jorge Tim\u00f3n\n>\n> http://freico.in/"
            }
        ],
        "thread_summary": {
            "title": "Combining big transactions with hash-only blocks to improve tps.",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Christophe Biocca",
                "Natanael",
                "bc"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 59317
        }
    },
    {
        "title": "[Bitcoin-development] BIP 32 proposed changes",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2014-01-26T10:09:42",
                "message_text_only": "Hello all,\n\nbased on some feedback, I've created a pull request with a rewritten\nversion of BIP 32, hopefully making it more readable:\n* Don't reuse the terminology 'public' vs 'private' for the alternate\nderivation scheme which doesn't allow computing child public keys from\nparent public keys, but call them \"hardened\".\n* Add explicit type conversion functions.\n* Don't use the ' suffix to mean \"alternate\" in two very different\nmeanings (use the 'h' suffix to mean hardened, and use CKDpriv and\nCKDpub for the derivation functions that operate on private and public\nkeys).\n* Several smaller changes.\n\nThese are just documentation changes, the semantics are unchanged.\n\nComments are welcome, see https://github.com/bitcoin/bips/pull/12.\n\n-- \nPieter"
            }
        ],
        "thread_summary": {
            "title": "BIP 32 proposed changes",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Pieter Wuille"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 750
        }
    },
    {
        "title": "[Bitcoin-development] BIP70/71 issue, RFD",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-26T21:11:47",
                "message_text_only": "I'm experimenting with BIP70/71 (payment protocol) usage in face to face\npayments (more on that soon).\n\nI've excountered an issue with the protobuf format. Protobufs are not\nself-delimiting. That means if you're reading from an undelimited\nstream, you will read endlessly because you don't know how much to read.\n\nThe current BIP70 implementations probably work because they're reading\neither from a file or from an HTTP resource which sets the\nContent-Length header. Trouble is the Content-Length header is optional,\nand also there are many kinds of streams that don't have this built-in\ndelimiting mechanism.\n\nThe Java protobuf API solves this by offering delimited I/O, like\n\npayment.writeDelimitedTo(os);\n\nThis writes the size of the message as a varint before writing the data.\nI don't know about protobuf implementations for other languages but I'd\nexpect them to offer something compatible.\n\nHowever, this leading varint is an incompatible change and would need to\nbe added to the spec.\n\nI specifically encountered this with PaymentMessage and PaymentACK, but\nit might be a good idea to apply this to all messages if any. Open for\ndiscussion."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-26T21:24:35",
                "message_text_only": "Which medium is this an issue for? As you note, for files and HTTP\nresponses it's not a problem in practice. i'd guess nor for NFC tags nor QR\ncodes.\n\n\nOn Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> I'm experimenting with BIP70/71 (payment protocol) usage in face to face\n> payments (more on that soon).\n>\n> I've excountered an issue with the protobuf format. Protobufs are not\n> self-delimiting. That means if you're reading from an undelimited\n> stream, you will read endlessly because you don't know how much to read.\n>\n> The current BIP70 implementations probably work because they're reading\n> either from a file or from an HTTP resource which sets the\n> Content-Length header. Trouble is the Content-Length header is optional,\n> and also there are many kinds of streams that don't have this built-in\n> delimiting mechanism.\n>\n> The Java protobuf API solves this by offering delimited I/O, like\n>\n> payment.writeDelimitedTo(os);\n>\n> This writes the size of the message as a varint before writing the data.\n> I don't know about protobuf implementations for other languages but I'd\n> expect them to offer something compatible.\n>\n> However, this leading varint is an incompatible change and would need to\n> be added to the spec.\n>\n> I specifically encountered this with PaymentMessage and PaymentACK, but\n> it might be a good idea to apply this to all messages if any. Open for\n> discussion.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140126/27dd7d73/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-26T21:32:52",
                "message_text_only": "Bluetooth, Wifi Direct, HTTP request/responses via broken proxies, smoke\nsignals... basically anything that is a stream rather than a file.\n\nRight, NFC NDEF and QR codes are not affected, so we can skip the\ndelimiter for these mediums.\n\n\nOn 01/26/2014 10:24 PM, Mike Hearn wrote:\n> Which medium is this an issue for? As you note, for files and HTTP\n> responses it's not a problem in practice. i'd guess nor for NFC tags nor\n> QR codes.\n> \n> \n> On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach\n> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> \n>     I'm experimenting with BIP70/71 (payment protocol) usage in face to face\n>     payments (more on that soon).\n> \n>     I've excountered an issue with the protobuf format. Protobufs are not\n>     self-delimiting. That means if you're reading from an undelimited\n>     stream, you will read endlessly because you don't know how much to read.\n> \n>     The current BIP70 implementations probably work because they're reading\n>     either from a file or from an HTTP resource which sets the\n>     Content-Length header. Trouble is the Content-Length header is optional,\n>     and also there are many kinds of streams that don't have this built-in\n>     delimiting mechanism.\n> \n>     The Java protobuf API solves this by offering delimited I/O, like\n> \n>     payment.writeDelimitedTo(os);\n> \n>     This writes the size of the message as a varint before writing the data.\n>     I don't know about protobuf implementations for other languages but I'd\n>     expect them to offer something compatible.\n> \n>     However, this leading varint is an incompatible change and would need to\n>     be added to the spec.\n> \n>     I specifically encountered this with PaymentMessage and PaymentACK, but\n>     it might be a good idea to apply this to all messages if any. Open for\n>     discussion.\n> \n> \n>     ------------------------------------------------------------------------------\n>     CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>     Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>     Critical Workloads, Development Environments & Everything In Between.\n>     Get a Quote or Start a Free Trial Today.\n>     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-26T22:00:41",
                "message_text_only": "I think for \"binding\" the payment protocol to those transports we should\nindeed use protobuf varint length prefixes. But it's unnecessary for all\ncases. Unless Gavin feels it'd be better to be consistent everywhere and is\nwilling to change the spec and code - as far as I know though we're trying\nto ship 0.9rc1 soonish .....\n\n\nOn Sun, Jan 26, 2014 at 10:32 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> Bluetooth, Wifi Direct, HTTP request/responses via broken proxies, smoke\n> signals... basically anything that is a stream rather than a file.\n>\n> Right, NFC NDEF and QR codes are not affected, so we can skip the\n> delimiter for these mediums.\n>\n>\n> On 01/26/2014 10:24 PM, Mike Hearn wrote:\n> > Which medium is this an issue for? As you note, for files and HTTP\n> > responses it's not a problem in practice. i'd guess nor for NFC tags nor\n> > QR codes.\n> >\n> >\n> > On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach\n> > <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> >\n> >     I'm experimenting with BIP70/71 (payment protocol) usage in face to\n> face\n> >     payments (more on that soon).\n> >\n> >     I've excountered an issue with the protobuf format. Protobufs are not\n> >     self-delimiting. That means if you're reading from an undelimited\n> >     stream, you will read endlessly because you don't know how much to\n> read.\n> >\n> >     The current BIP70 implementations probably work because they're\n> reading\n> >     either from a file or from an HTTP resource which sets the\n> >     Content-Length header. Trouble is the Content-Length header is\n> optional,\n> >     and also there are many kinds of streams that don't have this\n> built-in\n> >     delimiting mechanism.\n> >\n> >     The Java protobuf API solves this by offering delimited I/O, like\n> >\n> >     payment.writeDelimitedTo(os);\n> >\n> >     This writes the size of the message as a varint before writing the\n> data.\n> >     I don't know about protobuf implementations for other languages but\n> I'd\n> >     expect them to offer something compatible.\n> >\n> >     However, this leading varint is an incompatible change and would\n> need to\n> >     be added to the spec.\n> >\n> >     I specifically encountered this with PaymentMessage and PaymentACK,\n> but\n> >     it might be a good idea to apply this to all messages if any. Open\n> for\n> >     discussion.\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> >     Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> >     Critical Workloads, Development Environments & Everything In Between.\n> >     Get a Quote or Start a Free Trial Today.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> >     _______________________________________________\n> >     Bitcoin-development mailing list\n> >     Bitcoin-development at lists.sourceforge.net\n> >     <mailto:Bitcoin-development at lists.sourceforge.net>\n> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> > Critical Workloads, Development Environments & Everything In Between.\n> > Get a Quote or Start a Free Trial Today.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> >\n> >\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140126/117a4b48/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-26T22:14:52",
                "message_text_only": "Just keep in mind that if it turns out we need to retrofit messages with\nlength prefixes I fear we will have to restart with new mime-types. The\nnature of prefixes being always at the start means this rules out simply\nincrementing a protocol version number.\n\nCorrecting myself:\n\n> it might be a good idea to apply this to all messages if any.\n\nOf course I only mean the \"root\" messages, namely PaymentRequest,\nPayment, and PaymentACK. The embedded messages don't need length prefixes.\n\n\nOn 01/26/2014 11:00 PM, Mike Hearn wrote:\n> I think for \"binding\" the payment protocol to those transports we should\n> indeed use protobuf varint length prefixes. But it's unnecessary for all\n> cases. Unless Gavin feels it'd be better to be consistent everywhere and\n> is willing to change the spec and code - as far as I know though we're\n> trying to ship 0.9rc1 soonish .....\n> \n> \n> On Sun, Jan 26, 2014 at 10:32 PM, Andreas Schildbach\n> <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> \n>     Bluetooth, Wifi Direct, HTTP request/responses via broken proxies, smoke\n>     signals... basically anything that is a stream rather than a file.\n> \n>     Right, NFC NDEF and QR codes are not affected, so we can skip the\n>     delimiter for these mediums.\n> \n> \n>     On 01/26/2014 10:24 PM, Mike Hearn wrote:\n>     > Which medium is this an issue for? As you note, for files and HTTP\n>     > responses it's not a problem in practice. i'd guess nor for NFC\n>     tags nor\n>     > QR codes.\n>     >\n>     >\n>     > On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach\n>     > <andreas at schildbach.de <mailto:andreas at schildbach.de>\n>     <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>> wrote:\n>     >\n>     >     I'm experimenting with BIP70/71 (payment protocol) usage in\n>     face to face\n>     >     payments (more on that soon).\n>     >\n>     >     I've excountered an issue with the protobuf format. Protobufs\n>     are not\n>     >     self-delimiting. That means if you're reading from an undelimited\n>     >     stream, you will read endlessly because you don't know how\n>     much to read.\n>     >\n>     >     The current BIP70 implementations probably work because\n>     they're reading\n>     >     either from a file or from an HTTP resource which sets the\n>     >     Content-Length header. Trouble is the Content-Length header is\n>     optional,\n>     >     and also there are many kinds of streams that don't have this\n>     built-in\n>     >     delimiting mechanism.\n>     >\n>     >     The Java protobuf API solves this by offering delimited I/O, like\n>     >\n>     >     payment.writeDelimitedTo(os);\n>     >\n>     >     This writes the size of the message as a varint before writing\n>     the data.\n>     >     I don't know about protobuf implementations for other\n>     languages but I'd\n>     >     expect them to offer something compatible.\n>     >\n>     >     However, this leading varint is an incompatible change and\n>     would need to\n>     >     be added to the spec.\n>     >\n>     >     I specifically encountered this with PaymentMessage and\n>     PaymentACK, but\n>     >     it might be a good idea to apply this to all messages if any.\n>     Open for\n>     >     discussion.\n>     >\n>     >\n>     >    \n>     ------------------------------------------------------------------------------\n>     >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>     >     Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>     >     Critical Workloads, Development Environments & Everything In\n>     Between.\n>     >     Get a Quote or Start a Free Trial Today.\n>     >    \n>     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>     >     _______________________________________________\n>     >     Bitcoin-development mailing list\n>     >     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     >     <mailto:Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>>\n>     >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>     >\n>     >\n>     >\n>     >\n>     >\n>     ------------------------------------------------------------------------------\n>     > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>     > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>     > Critical Workloads, Development Environments & Everything In Between.\n>     > Get a Quote or Start a Free Trial Today.\n>     >\n>     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>     >\n>     >\n>     >\n>     > _______________________________________________\n>     > Bitcoin-development mailing list\n>     > Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>     >\n> \n> \n> \n>     ------------------------------------------------------------------------------\n>     CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>     Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>     Critical Workloads, Development Environments & Everything In Between.\n>     Get a Quote or Start a Free Trial Today.\n>     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-26T23:01:53",
                "message_text_only": "To be more accurate, the embedded messages already have length prefixes :-)\n\n\nOn Sun, Jan 26, 2014 at 11:14 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> Just keep in mind that if it turns out we need to retrofit messages with\n> length prefixes I fear we will have to restart with new mime-types. The\n> nature of prefixes being always at the start means this rules out simply\n> incrementing a protocol version number.\n>\n> Correcting myself:\n>\n> > it might be a good idea to apply this to all messages if any.\n>\n> Of course I only mean the \"root\" messages, namely PaymentRequest,\n> Payment, and PaymentACK. The embedded messages don't need length prefixes.\n>\n>\n> On 01/26/2014 11:00 PM, Mike Hearn wrote:\n> > I think for \"binding\" the payment protocol to those transports we should\n> > indeed use protobuf varint length prefixes. But it's unnecessary for all\n> > cases. Unless Gavin feels it'd be better to be consistent everywhere and\n> > is willing to change the spec and code - as far as I know though we're\n> > trying to ship 0.9rc1 soonish .....\n> >\n> >\n> > On Sun, Jan 26, 2014 at 10:32 PM, Andreas Schildbach\n> > <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n> >\n> >     Bluetooth, Wifi Direct, HTTP request/responses via broken proxies,\n> smoke\n> >     signals... basically anything that is a stream rather than a file.\n> >\n> >     Right, NFC NDEF and QR codes are not affected, so we can skip the\n> >     delimiter for these mediums.\n> >\n> >\n> >     On 01/26/2014 10:24 PM, Mike Hearn wrote:\n> >     > Which medium is this an issue for? As you note, for files and HTTP\n> >     > responses it's not a problem in practice. i'd guess nor for NFC\n> >     tags nor\n> >     > QR codes.\n> >     >\n> >     >\n> >     > On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach\n> >     > <andreas at schildbach.de <mailto:andreas at schildbach.de>\n> >     <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>>\n> wrote:\n> >     >\n> >     >     I'm experimenting with BIP70/71 (payment protocol) usage in\n> >     face to face\n> >     >     payments (more on that soon).\n> >     >\n> >     >     I've excountered an issue with the protobuf format. Protobufs\n> >     are not\n> >     >     self-delimiting. That means if you're reading from an\n> undelimited\n> >     >     stream, you will read endlessly because you don't know how\n> >     much to read.\n> >     >\n> >     >     The current BIP70 implementations probably work because\n> >     they're reading\n> >     >     either from a file or from an HTTP resource which sets the\n> >     >     Content-Length header. Trouble is the Content-Length header is\n> >     optional,\n> >     >     and also there are many kinds of streams that don't have this\n> >     built-in\n> >     >     delimiting mechanism.\n> >     >\n> >     >     The Java protobuf API solves this by offering delimited I/O,\n> like\n> >     >\n> >     >     payment.writeDelimitedTo(os);\n> >     >\n> >     >     This writes the size of the message as a varint before writing\n> >     the data.\n> >     >     I don't know about protobuf implementations for other\n> >     languages but I'd\n> >     >     expect them to offer something compatible.\n> >     >\n> >     >     However, this leading varint is an incompatible change and\n> >     would need to\n> >     >     be added to the spec.\n> >     >\n> >     >     I specifically encountered this with PaymentMessage and\n> >     PaymentACK, but\n> >     >     it might be a good idea to apply this to all messages if any.\n> >     Open for\n> >     >     discussion.\n> >     >\n> >     >\n> >     >\n> >\n> ------------------------------------------------------------------------------\n> >     >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> >     >     Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> >     >     Critical Workloads, Development Environments & Everything In\n> >     Between.\n> >     >     Get a Quote or Start a Free Trial Today.\n> >     >\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> >     >     _______________________________________________\n> >     >     Bitcoin-development mailing list\n> >     >     Bitcoin-development at lists.sourceforge.net\n> >     <mailto:Bitcoin-development at lists.sourceforge.net>\n> >     >     <mailto:Bitcoin-development at lists.sourceforge.net\n> >     <mailto:Bitcoin-development at lists.sourceforge.net>>\n> >     >\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >     >\n> >     >\n> >     >\n> >     >\n> >     >\n> >\n> ------------------------------------------------------------------------------\n> >     > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> >     > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> >     > Critical Workloads, Development Environments & Everything In\n> Between.\n> >     > Get a Quote or Start a Free Trial Today.\n> >     >\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> >     >\n> >     >\n> >     >\n> >     > _______________________________________________\n> >     > Bitcoin-development mailing list\n> >     > Bitcoin-development at lists.sourceforge.net\n> >     <mailto:Bitcoin-development at lists.sourceforge.net>\n> >     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >     >\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> >     Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> >     Critical Workloads, Development Environments & Everything In Between.\n> >     Get a Quote or Start a Free Trial Today.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> >     _______________________________________________\n> >     Bitcoin-development mailing list\n> >     Bitcoin-development at lists.sourceforge.net\n> >     <mailto:Bitcoin-development at lists.sourceforge.net>\n> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> > Critical Workloads, Development Environments & Everything In Between.\n> > Get a Quote or Start a Free Trial Today.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> >\n> >\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/4a153af7/attachment.html>"
            },
            {
                "author": "Gavin",
                "date": "2014-01-27T02:05:31",
                "message_text_only": "Message encoding and length (or terminator or checksum or error correction or...) should be part of the transport protocol, in my humble opinion.\n\n--\nGavin Andresen\n\n\n> On Jan 26, 2014, at 6:01 PM, Mike Hearn <mike at plan99.net> wrote:\n> \n> To be more accurate, the embedded messages already have length prefixes :-)\n> \n> \n>> On Sun, Jan 26, 2014 at 11:14 PM, Andreas Schildbach <andreas at schildbach.de> wrote:\n>> Just keep in mind that if it turns out we need to retrofit messages with\n>> length prefixes I fear we will have to restart with new mime-types. The\n>> nature of prefixes being always at the start means this rules out simply\n>> incrementing a protocol version number.\n>> \n>> Correcting myself:\n>> \n>> > it might be a good idea to apply this to all messages if any.\n>> \n>> Of course I only mean the \"root\" messages, namely PaymentRequest,\n>> Payment, and PaymentACK. The embedded messages don't need length prefixes.\n>> \n>> \n>> On 01/26/2014 11:00 PM, Mike Hearn wrote:\n>> > I think for \"binding\" the payment protocol to those transports we should\n>> > indeed use protobuf varint length prefixes. But it's unnecessary for all\n>> > cases. Unless Gavin feels it'd be better to be consistent everywhere and\n>> > is willing to change the spec and code - as far as I know though we're\n>> > trying to ship 0.9rc1 soonish .....\n>> >\n>> >\n>> > On Sun, Jan 26, 2014 at 10:32 PM, Andreas Schildbach\n>> > <andreas at schildbach.de <mailto:andreas at schildbach.de>> wrote:\n>> >\n>> >     Bluetooth, Wifi Direct, HTTP request/responses via broken proxies, smoke\n>> >     signals... basically anything that is a stream rather than a file.\n>> >\n>> >     Right, NFC NDEF and QR codes are not affected, so we can skip the\n>> >     delimiter for these mediums.\n>> >\n>> >\n>> >     On 01/26/2014 10:24 PM, Mike Hearn wrote:\n>> >     > Which medium is this an issue for? As you note, for files and HTTP\n>> >     > responses it's not a problem in practice. i'd guess nor for NFC\n>> >     tags nor\n>> >     > QR codes.\n>> >     >\n>> >     >\n>> >     > On Sun, Jan 26, 2014 at 10:11 PM, Andreas Schildbach\n>> >     > <andreas at schildbach.de <mailto:andreas at schildbach.de>\n>> >     <mailto:andreas at schildbach.de <mailto:andreas at schildbach.de>>> wrote:\n>> >     >\n>> >     >     I'm experimenting with BIP70/71 (payment protocol) usage in\n>> >     face to face\n>> >     >     payments (more on that soon).\n>> >     >\n>> >     >     I've excountered an issue with the protobuf format. Protobufs\n>> >     are not\n>> >     >     self-delimiting. That means if you're reading from an undelimited\n>> >     >     stream, you will read endlessly because you don't know how\n>> >     much to read.\n>> >     >\n>> >     >     The current BIP70 implementations probably work because\n>> >     they're reading\n>> >     >     either from a file or from an HTTP resource which sets the\n>> >     >     Content-Length header. Trouble is the Content-Length header is\n>> >     optional,\n>> >     >     and also there are many kinds of streams that don't have this\n>> >     built-in\n>> >     >     delimiting mechanism.\n>> >     >\n>> >     >     The Java protobuf API solves this by offering delimited I/O, like\n>> >     >\n>> >     >     payment.writeDelimitedTo(os);\n>> >     >\n>> >     >     This writes the size of the message as a varint before writing\n>> >     the data.\n>> >     >     I don't know about protobuf implementations for other\n>> >     languages but I'd\n>> >     >     expect them to offer something compatible.\n>> >     >\n>> >     >     However, this leading varint is an incompatible change and\n>> >     would need to\n>> >     >     be added to the spec.\n>> >     >\n>> >     >     I specifically encountered this with PaymentMessage and\n>> >     PaymentACK, but\n>> >     >     it might be a good idea to apply this to all messages if any.\n>> >     Open for\n>> >     >     discussion.\n>> >     >\n>> >     >\n>> >     >\n>> >     ------------------------------------------------------------------------------\n>> >     >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> >     >     Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> >     >     Critical Workloads, Development Environments & Everything In\n>> >     Between.\n>> >     >     Get a Quote or Start a Free Trial Today.\n>> >     >\n>> >     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> >     >     _______________________________________________\n>> >     >     Bitcoin-development mailing list\n>> >     >     Bitcoin-development at lists.sourceforge.net\n>> >     <mailto:Bitcoin-development at lists.sourceforge.net>\n>> >     >     <mailto:Bitcoin-development at lists.sourceforge.net\n>> >     <mailto:Bitcoin-development at lists.sourceforge.net>>\n>> >     >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >     >\n>> >     >\n>> >     >\n>> >     >\n>> >     >\n>> >     ------------------------------------------------------------------------------\n>> >     > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> >     > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> >     > Critical Workloads, Development Environments & Everything In Between.\n>> >     > Get a Quote or Start a Free Trial Today.\n>> >     >\n>> >     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> >     >\n>> >     >\n>> >     >\n>> >     > _______________________________________________\n>> >     > Bitcoin-development mailing list\n>> >     > Bitcoin-development at lists.sourceforge.net\n>> >     <mailto:Bitcoin-development at lists.sourceforge.net>\n>> >     > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >     >\n>> >\n>> >\n>> >\n>> >     ------------------------------------------------------------------------------\n>> >     CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> >     Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> >     Critical Workloads, Development Environments & Everything In Between.\n>> >     Get a Quote or Start a Free Trial Today.\n>> >     http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> >     _______________________________________________\n>> >     Bitcoin-development mailing list\n>> >     Bitcoin-development at lists.sourceforge.net\n>> >     <mailto:Bitcoin-development at lists.sourceforge.net>\n>> >     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>> >\n>> >\n>> >\n>> > ------------------------------------------------------------------------------\n>> > CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> > Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> > Critical Workloads, Development Environments & Everything In Between.\n>> > Get a Quote or Start a Free Trial Today.\n>> > http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> >\n>> >\n>> >\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n>> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n>> Critical Workloads, Development Environments & Everything In Between.\n>> Get a Quote or Start a Free Trial Today.\n>> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140126/5708a30b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP70/71 issue, RFD",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin",
                "Mike Hearn",
                "Andreas Schildbach"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 33406
        }
    },
    {
        "title": "[Bitcoin-development] BIP70: PaymentACK semantics",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-26T21:56:11",
                "message_text_only": "The BIP70 is very brief on what a PaymentACK is supposed to mean. Quote:\n\n\"it [PaymentACK] is sent from the merchant's server to the bitcoin\nwallet in response to a Payment message\"\n\nDoes it simply mean we received a syntactically correct Payment message?\nDoes it mean the Payment is valid?\nDoes it mean the Payment is valid and confirmed?\nHow long can we delay the ack until all conditions for payment are met?\nI assume its not a good idea to keep the HTTP (or Bluetooth, for that\nmatter) connection open for an hour while waiting for a blockchain\nconfirmation."
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-01-27T14:54:09",
                "message_text_only": "On Sun, Jan 26, 2014 at 4:56 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> The BIP70 is very brief on what a PaymentACK is supposed to mean. Quote:\n>\n> \"it [PaymentACK] is sent from the merchant's server to the bitcoin\n> wallet in response to a Payment message\"\n>\n> Does it simply mean we received a syntactically correct Payment message?\n>\nDoes it mean the Payment is valid?\n> Does it mean the Payment is valid and confirmed?\n> How long can we delay the ack until all conditions for payment are met?\n> I assume its not a good idea to keep the HTTP (or Bluetooth, for that\n> matter) connection open for an hour while waiting for a blockchain\n> confirmation.\n>\n\nThe purpose of PaymentACK is to give the customer reassurance that their\npayment request has been received and will be processed (or not).\n\nIf it is syntactically incorrect or invalid in a way that the payment\nprocessor can detect right away then a PaymentACK with a message saying\nthat there is a problem should be the response.\n\nWaiting until confirmed is definitely not the right thing to do, but\nwaiting a few seconds to detect a 0-confirmation double-spend attempt\nbefore sending back an ACK is fine.  The BIP is intentionally vague on how\nlong it might take to get an ACK, but, again, the intent is to give the\ncustomer reassurance that their payment was received and is being\nprocessed, whatever \"processed\" means (order sent to shipping for\nfulfillment, or awaiting 11 confirmations, or \"your burger is paid for you\ncan leave the restaurant and we won't chase after you\").\n\n\n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/f50b885b/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-27T15:20:39",
                "message_text_only": "On 01/27/2014 03:54 PM, Gavin Andresen wrote:\n\n> The purpose of PaymentACK is to give the customer reassurance that their\n> payment request has been received and will be processed (or not).\n> \n> If it is syntactically incorrect or invalid in a way that the payment\n> processor can detect right away then a PaymentACK with a message saying\n> that there is a problem should be the response.\n\nThanks for the clarification. So I am *always* supposed to reply with an\nack. I was assuming that if I actually send a nack, I would just close\nthe connection without sending an ack.\n\nMaybe that should be mentioned in the spec explicitly. I must admit that\nI think the name of the message is misleading -- PaymentResponse would\nmake this clearer."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-27T15:52:43",
                "message_text_only": "At the moment there's no way to distinguish between a failed / rejected\nsubmission and a successful one beyond the freeform memo field, right? It'd\nbe good if we had an error code field as well, perhaps for a future version.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/5322d53a/attachment.html>"
            },
            {
                "author": "Kevin Greene",
                "date": "2014-01-27T22:03:22",
                "message_text_only": "+1 for an error field.\n\nShould the wallet broadcast the transaction to the bitcoin network when it\nreceives an ACK, or always assume that the merchant server will do that?\n\n\nOn Mon, Jan 27, 2014 at 7:52 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> At the moment there's no way to distinguish between a failed / rejected\n> submission and a successful one beyond the freeform memo field, right? It'd\n> be good if we had an error code field as well, perhaps for a future version.\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/96cae56c/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-01-27T22:17:58",
                "message_text_only": "On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com> wrote:\n> +1 for an error field.\n\nAgree, I think we need a way for client applications to interpret the response.\n\n> Should the wallet broadcast the transaction to the bitcoin network when it\n> receives an ACK, or always assume that the merchant server will do that?\n\nIn my opinion, that should be the primary meaning of receiving an ACK:\nacknowledgement that the receiver takes responsibility for getting the\ntransaction confirmed (to the extent possible, of course).\n\n\n-- \nPieter"
            },
            {
                "author": "Kevin Greene",
                "date": "2014-01-27T22:39:56",
                "message_text_only": ">> Should the wallet broadcast the transaction to the bitcoin network when\nit\n>> receives an ACK, or always assume that the merchant server will do that?\n>\n> In my opinion, that should be the primary meaning of receiving an ACK:\n> acknowledgement that the receiver takes responsibility for getting the\n> transaction confirmed (to the extent possible, of course).\n\nOk, so if there is no\npayment\n_url specified in the PaymentRequest, then the wallet is responsible for\nbroadcasting\nthe transaction to the bitcoin network\n.\nOtherwise, the wallet should\nrely on the merchant server to broadcast.\n\n\nOn Mon, Jan 27, 2014 at 2:17 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com> wrote:\n> > +1 for an error field.\n>\n> Agree, I think we need a way for client applications to interpret the\n> response.\n>\n> > Should the wallet broadcast the transaction to the bitcoin network when\n> it\n> > receives an ACK, or always assume that the merchant server will do that?\n>\n> In my opinion, that should be the primary meaning of receiving an ACK:\n> acknowledgement that the receiver takes responsibility for getting the\n> transaction confirmed (to the extent possible, of course).\n\n\n>\n> --\n> Pieter\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/a97c0293/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-28T11:42:58",
                "message_text_only": "Yeah, that's the interpretation I think we should go with for now. There\nwas a reason why this isn't specified and I forgot what it was - some\ninability to come to agreement on when to broadcast vs when to submit via\nHTTP, I think.\n\n\n\n\nOn Mon, Jan 27, 2014 at 11:39 PM, Kevin Greene <kgreenek at gmail.com> wrote:\n\n> >> Should the wallet broadcast the transaction to the bitcoin network when\n> it\n> >> receives an ACK, or always assume that the merchant server will do that?\n> >\n> > In my opinion, that should be the primary meaning of receiving an ACK:\n> > acknowledgement that the receiver takes responsibility for getting the\n> > transaction confirmed (to the extent possible, of course).\n>\n> Ok, so if there is no\n> payment\n> _url specified in the PaymentRequest, then the wallet is responsible for\n> broadcasting\n> the transaction to the bitcoin network\n> .\n> Otherwise, the wallet should\n> rely on the merchant server to broadcast.\n>\n>\n> On Mon, Jan 27, 2014 at 2:17 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n>\n>> On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com>\n>> wrote:\n>> > +1 for an error field.\n>>\n>> Agree, I think we need a way for client applications to interpret the\n>> response.\n>>\n>> > Should the wallet broadcast the transaction to the bitcoin network when\n>> it\n>> > receives an ACK, or always assume that the merchant server will do that?\n>>\n>> In my opinion, that should be the primary meaning of receiving an ACK:\n>> acknowledgement that the receiver takes responsibility for getting the\n>> transaction confirmed (to the extent possible, of course).\n>\n>\n>>\n>> --\n>> Pieter\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/9ccedef8/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-01-28T12:53:14",
                "message_text_only": "On Tue, Jan 28, 2014 at 6:42 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> Yeah, that's the interpretation I think we should go with for now. There\n> was a reason why this isn't specified and I forgot what it was - some\n> inability to come to agreement on when to broadcast vs when to submit via\n> HTTP, I think.\n>\n\nIf the wallet software is doing automatic CoinJoin (for example), then\ntypically one or several of the other participants will broadcast the\ntransaction as soon as it is complete.\n\nIf the spec said that wallets must not broadcast until they receive a\nPaymentACK (if a payment_url is specified), then you'd have to violate the\nspec to do CoinJoin.\n\nAnd even if you don't care about CoinJoin, not broadcasting the transaction\nas soon as the inputs are signed adds implementation complexity (should you\nretry if payment_url is unavailable? how many times? if you eventually\nunlock the probably-not-quite-spent-yet inputs, should you double-spend\nthem to yourself just in case the merchant eventually gets around to\nbroadcasting the transaction, or should you just unlock them and squirrel\naway the failed Payment so if the merchant does eventually broadcast you\nhave a record of why the coins were spent).\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/c835cc97/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-01-28T13:09:28",
                "message_text_only": "On Tue, Jan 28, 2014 at 1:53 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> On Tue, Jan 28, 2014 at 6:42 AM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> Yeah, that's the interpretation I think we should go with for now. There\n>> was a reason why this isn't specified and I forgot what it was - some\n>> inability to come to agreement on when to broadcast vs when to submit via\n>> HTTP, I think.\n>\n>\n> If the wallet software is doing automatic CoinJoin (for example), then\n> typically one or several of the other participants will broadcast the\n> transaction as soon as it is complete.\n>\n> If the spec said that wallets must not broadcast until they receive a\n> PaymentACK (if a payment_url is specified), then you'd have to violate the\n> spec to do CoinJoin.\n\nYou cannot prevent transactions from being broadcasted, but an ACK can\nstill mean \"You're now relieved of the responsibility of getting the\ntransaction confirmed\". That's independent from being allowed to\nbroadcast it.\n\n> And even if you don't care about CoinJoin, not broadcasting the transaction\n> as soon as the inputs are signed adds implementation complexity (should you\n> retry if payment_url is unavailable? how many times? if you eventually\n> unlock the probably-not-quite-spent-yet inputs, should you double-spend them\n> to yourself just in case the merchant eventually gets around to broadcasting\n> the transaction, or should you just unlock them and squirrel away the failed\n> Payment so if the merchant does eventually broadcast you have a record of\n> why the coins were spent).\n\nIf a payment_url is unavailable, you should imho retry. If you\nbroadcasted, and the payment_url is unavailable, you should\n*certainly* retry. Otherwise the recipient cannot rely on receiving\nmemo and refund address, which would imho make these fields completely\nuseless.\n\nI still like suggesting not broadcasting if a payment_uri to minimize\nthat risk further, but as you say - there are enough cases where you\ncannot enforce that anyway.\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-28T13:24:34",
                "message_text_only": ">\n> And even if you don't care about CoinJoin, not broadcasting the\n> transaction as soon as the inputs are signed adds implementation complexity\n> (should you retry if payment_url is unavailable? how many times?\n>\n\nI guess a lot of wallets just won't broadcast at all and try to submit via\nthe URL. If they don't succeed, then the transaction is just never\ncommitted to the wallet. Doesn't seem like a big deal. Payment submission\nis online, interactive. If it fails, you keep the coins. This seems simple\nand straightforward.\n\nIf someone really wanted to do a real-time coinjoin, they can build the\ntransaction together and submit it via payment_url, and broadcast as well.\nIf the merchant has an issue with the payment for some reason (e.g. request\nis expired or the tx is non-standard), well, you'll have to sort it out\nwith them manually.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/926390c5/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-28T17:23:49",
                "message_text_only": "On Tue, Jan 28, 2014 at 07:53:14AM -0500, Gavin Andresen wrote:\n> On Tue, Jan 28, 2014 at 6:42 AM, Mike Hearn <mike at plan99.net> wrote:\n> \n> > Yeah, that's the interpretation I think we should go with for now. There\n> > was a reason why this isn't specified and I forgot what it was - some\n> > inability to come to agreement on when to broadcast vs when to submit via\n> > HTTP, I think.\n> >\n> \n> If the wallet software is doing automatic CoinJoin (for example), then\n> typically one or several of the other participants will broadcast the\n> transaction as soon as it is complete.\n> \n> If the spec said that wallets must not broadcast until they receive a\n> PaymentACK (if a payment_url is specified), then you'd have to violate the\n> spec to do CoinJoin.\n> \n> And even if you don't care about CoinJoin, not broadcasting the transaction\n> as soon as the inputs are signed adds implementation complexity (should you\n> retry if payment_url is unavailable? how many times? if you eventually\n> unlock the probably-not-quite-spent-yet inputs, should you double-spend\n> them to yourself just in case the merchant eventually gets around to\n> broadcasting the transaction, or should you just unlock them and squirrel\n> away the failed Payment so if the merchant does eventually broadcast you\n> have a record of why the coins were spent).\n\nAlso users don't have infinite unspent txouts in their wallets - if they\nneed to make two payments in a row and run out their wallet software is\n(currently) going to spend the change txout and either be forced to\nbroadcast both transactions anyway, or the second payment-protocol-using\nrecipient will do so on their behalf. (in the future they might also do\na replacement tx replacing the first with a single tx paying both to\nsave on fees, again with the same problem)\n\nAnyway what you want is payment atomicity: the customer losing control\nof the funds must be atomic with respect to the payment going through.\nFrom that point of view it's unfortunate that Payment message contains\nrefund_to, memo, etc. That information should have been provided to the\nmerchant prior to them providing the list of addresses to pay.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000085c725a905444d271c56fdee4e4ec7f27bdb2e777c872925\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/d1694efc/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-28T17:33:28",
                "message_text_only": "In practice this should only be an issue if a payment is submitted and\nfails, which should be rare. Barring internal server errors and screwups on\nthe merchants side, the only reasons for a rejection at submit time would\nbe the imperfect fungibility of bitcoins, e.g. you try and pay with a huge\ndust tx or one that's invalid/too low fee/etc.\n\nSo I think we have a bit of time to figure this out. But yes - once you\nbroadcast, you probably accept that there might be a more painful path to\nresolve issues if something goes wrong, I guess. Right now BitPay has a\nsupport system where you can file a ticket if you pay the bitcoins and they\ndon't recognise it or the tx never confirms or whatever. It's grotty manual\nwork but they do it. Not broadcasting unless you \"have\" to seems like an\noptimisation that can reduce pain without much additional complexity.\n\n\n\nOn Tue, Jan 28, 2014 at 6:23 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> On Tue, Jan 28, 2014 at 07:53:14AM -0500, Gavin Andresen wrote:\n> > On Tue, Jan 28, 2014 at 6:42 AM, Mike Hearn <mike at plan99.net> wrote:\n> >\n> > > Yeah, that's the interpretation I think we should go with for now.\n> There\n> > > was a reason why this isn't specified and I forgot what it was - some\n> > > inability to come to agreement on when to broadcast vs when to submit\n> via\n> > > HTTP, I think.\n> > >\n> >\n> > If the wallet software is doing automatic CoinJoin (for example), then\n> > typically one or several of the other participants will broadcast the\n> > transaction as soon as it is complete.\n> >\n> > If the spec said that wallets must not broadcast until they receive a\n> > PaymentACK (if a payment_url is specified), then you'd have to violate\n> the\n> > spec to do CoinJoin.\n> >\n> > And even if you don't care about CoinJoin, not broadcasting the\n> transaction\n> > as soon as the inputs are signed adds implementation complexity (should\n> you\n> > retry if payment_url is unavailable? how many times? if you eventually\n> > unlock the probably-not-quite-spent-yet inputs, should you double-spend\n> > them to yourself just in case the merchant eventually gets around to\n> > broadcasting the transaction, or should you just unlock them and squirrel\n> > away the failed Payment so if the merchant does eventually broadcast you\n> > have a record of why the coins were spent).\n>\n> Also users don't have infinite unspent txouts in their wallets - if they\n> need to make two payments in a row and run out their wallet software is\n> (currently) going to spend the change txout and either be forced to\n> broadcast both transactions anyway, or the second payment-protocol-using\n> recipient will do so on their behalf. (in the future they might also do\n> a replacement tx replacing the first with a single tx paying both to\n> save on fees, again with the same problem)\n>\n> Anyway what you want is payment atomicity: the customer losing control\n> of the funds must be atomic with respect to the payment going through.\n> From that point of view it's unfortunate that Payment message contains\n> refund_to, memo, etc. That information should have been provided to the\n> merchant prior to them providing the list of addresses to pay.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000085c725a905444d271c56fdee4e4ec7f27bdb2e777c872925\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/3d176184/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-01-28T21:12:18",
                "message_text_only": "On Tue, Jan 28, 2014 at 06:33:28PM +0100, Mike Hearn wrote:\n> In practice this should only be an issue if a payment is submitted and\n> fails, which should be rare. Barring internal server errors and screwups on\n> the merchants side, the only reasons for a rejection at submit time would\n> be the imperfect fungibility of bitcoins, e.g. you try and pay with a huge\n> dust tx or one that's invalid/too low fee/etc.\n> \n> So I think we have a bit of time to figure this out. But yes - once you\n> broadcast, you probably accept that there might be a more painful path to\n> resolve issues if something goes wrong, I guess. Right now BitPay has a\n> support system where you can file a ticket if you pay the bitcoins and they\n> don't recognise it or the tx never confirms or whatever. It's grotty manual\n> work but they do it. Not broadcasting unless you \"have\" to seems like an\n> optimisation that can reduce pain without much additional complexity.\n\nThat's the reason you use a model where things happen atomicly: the\nfunds either can or can't be transferred, so if the merchant screws up\ndue to a server failure at worst the wallet can always send the\noriginal, signed, payment request and transaction details proving to the\nmerchant that they agreed. Since the asked for txouts exist in the\nblockchain they must either refund the money, or ship the goods.\n\nWallet software can handle that kind of worst-case failure by\nautomatically sending the original payment request back to the merchant.\nAt worst all customer support has to do is tell the customer \"Sorry\nabout that; we didn't get your payment. Please start your wallet up and\nhit the 'resend transaction' button in your wallet and we'll clear that\nright up.\"\n\nKeep in mind that we're probably going to see fraudsters figuring out\nways to make payment servers fail. This means conversely that a customer\ncalling up a merchant and saying \"Hey! Something didn work but the\nwallet says I paid!\" is going to be treated more suspiciously. By using\natomic protocols the issue of did or didn't they pay becomes much more\nblack and white, and failure resistant. That's exactly what we keep\nsaying Bitcoin offers that PayPal doesn't.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000085c725a905444d271c56fdee4e4ec7f27bdb2e777c872925\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/ed5c7f71/attachment.sig>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-01-30T14:51:24",
                "message_text_only": "On Mon, Jan 27, 2014 at 5:17 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com> wrote:\n> > Should the wallet broadcast the transaction to the bitcoin network when it\n> > receives an ACK, or always assume that the merchant server will do that?\n\n> In my opinion, that should be the primary meaning of receiving an ACK:\n> acknowledgement that the receiver takes responsibility for getting the\n> transaction confirmed (to the extent possible, of course).\n\nIs this truly the intent?  That the merchant/processor takes full\nresponsibility for getting the TX confirmed?\n\nIt is within the customer's economic incentive -- and right as a free\nperson -- to work to get their transaction relayed to the network and\nconfirmed in parallel with whatever the merchant is doing.\n\nBIP 70 states that the customer broadcasts the transaction, in\naddition to sending the Payment message.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-01-30T14:58:56",
                "message_text_only": "On Thu, Jan 30, 2014 at 3:51 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> On Mon, Jan 27, 2014 at 5:17 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>> On Mon, Jan 27, 2014 at 11:03 PM, Kevin Greene <kgreenek at gmail.com> wrote:\n>> > Should the wallet broadcast the transaction to the bitcoin network when it\n>> > receives an ACK, or always assume that the merchant server will do that?\n>\n>> In my opinion, that should be the primary meaning of receiving an ACK:\n>> acknowledgement that the receiver takes responsibility for getting the\n>> transaction confirmed (to the extent possible, of course).\n>\n> Is this truly the intent?  That the merchant/processor takes full\n> responsibility for getting the TX confirmed?\n\nConfirmed is probably the wrong word. But IMHO (not how it's currently\nworded), the merchant should take that responsibility after delivering\na PaymentACK. This means the client does not need to stay online\nanymore. More importantly, it removes the requirement for the P2P\nnetwork to function as a reliable sender->receiver communication\nchannel (and reduces it to a broadcast medium to get transactions to\nminers).\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-30T15:01:52",
                "message_text_only": ">\n> Is this truly the intent?  That the merchant/processor takes full\n> responsibility for getting the TX confirmed?\n\n\nAs per Gavin at the top of the thread, the intent is to give the customer\nreassurance that their payment will be processed. The merchant trying to\nget the tx confirmed is presumably a part of that as it'd make no sense for\na merchant to give that assurance and decide they don't care about the\nmoney.\n\nBut nothing stops the user broadcasting the tx as well, once the receiver\nhas given that assurance.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/72a31f31/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-01-30T15:06:23",
                "message_text_only": "On Thu, Jan 30, 2014 at 9:51 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Is this truly the intent?  That the merchant/processor takes full\n> responsibility for getting the TX confirmed?\n>\n\nThe intent is to give the customer a great experience. We could talk for\nmonths about whether having the wallet broadcast the transaction as soon as\npossible or having it wait for the merchant to respond with a PaymentACK is\nbetter. But I think we should let wallets experiment with different ways of\ndoing it, and see what works best in practice.\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/46892b70/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-01-30T15:16:54",
                "message_text_only": "On Thu, Jan 30, 2014 at 4:06 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> On Thu, Jan 30, 2014 at 9:51 AM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>> Is this truly the intent?  That the merchant/processor takes full\n>> responsibility for getting the TX confirmed?\n>\n>\n> The intent is to give the customer a great experience. We could talk for\n> months about whether having the wallet broadcast the transaction as soon as\n> possible or having it wait for the merchant to respond with a PaymentACK is\n> better. But I think we should let wallets experiment with different ways of\n> doing it, and see what works best in practice.\n\nCurrently, with the specification and implementation in Bitcoin Core,\nif a merchant wants to use the refund or memo feature, they need to\nprovide an alternative route for delivering that information to them\n*before* the transaction is made, as sending the transaction may\nresult in the transfer of funds without knowing what to do with it (if\ntheir receive server is down at the right time) and potnetially no way\nto contact the sender. This makes these fields utterly useless.\n\nThis is not a matter of letting wallets experiment with the best\nbehaviour. This is removing the ability to rely on the payment\nprotocol being bidirectional.\n\nI don't care whether wallets broadcast the transactions or not (they\ncan experiment with that as they like). But we should take measures to\nprevent a transaction for being broadcast without the payment being\ndelivered. One way is never broadcasting the transaction yourself.\nAnother is retrying to send the payment if delivery fails.\n\nHere is what I would suggest to add to the specification:\n* If a payment_uri is specified, the client must attempt to send the\npayment there.\n* If a transaction is broadcast (which is permitted even if sending\nthe payment fails), a client should make a reasonable attempt of\ndelivering the payment (remembering, retrying, ...).\n* If a paymentACK has been received, the client is no longer\nresponsible for broadcasting the transaction (but still may).\n\n-- \nPieter"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-30T20:16:28",
                "message_text_only": "Please note, responding to Pieter and Chuck concurrently.\n\nOn Thu, 30 Jan 2014 07:16:54 -0800, Pieter Wuille  \n<pieter.wuille at gmail.com> wrote:\n> Currently, with the specification and implementation in Bitcoin Core,\n> if a merchant wants to use the refund or memo feature, they need to\n> provide an alternative route for delivering that information to them\n> *before* the transaction is made, as sending the transaction may\n> result in the transfer of funds without knowing what to do with it (if\n> their receive server is down at the right time) and potnetially no way\n> to contact the sender. This makes these fields utterly useless.\n>\n> This is not a matter of letting wallets experiment with the best\n> behaviour. This is removing the ability to rely on the payment\n> protocol being bidirectional.\n\nI think we want to separate the two issues;\n\n   1) Reliably getting refund/memo fields to the merchant/payee\n   2) Who broadcasts a TX, how it's retried, how outputs are 'locked' and  \nif/when they should be [double]-spent to clear them\n\nWe should be able to solve '1' without having to fully spec out behavior  \nfor 2.\n\nOn Thu, 30 Jan 2014 07:16:54 -0800, Pieter Wuille  \n<pieter.wuille at gmail.com> wrote:\n> I don't care whether wallets broadcast the transactions or not (they\n> can experiment with that as they like). But we should take measures to\n> prevent a transaction for being broadcast without the payment being\n> delivered. One way is never broadcasting the transaction yourself.\n> Another is retrying to send the payment if delivery fails.\n>\n> Here is what I would suggest to add to the specification:\n> * If a payment_uri is specified, the client must attempt to send the\n> payment there.\n> * If a transaction is broadcast (which is permitted even if sending\n> the payment fails), a client should make a reasonable attempt of\n> delivering the payment (remembering, retrying, ...).\n> * If a paymentACK has been received, the client is no longer\n> responsible for broadcasting the transaction (but still may).\n\nTo reliably deliver refund/memo fields, we could;\n\n   a) Send them as part of the initial request for the  \nPaymentRequest/PaymentDetails\n   b) Send them as a response to the PaymentRequest/PaymentDetails before  \nthe transaction is even formed and any unspent outputs are selected\n   c) Send them as a response to the PaymentRequest/PaymentDetails with the  \nUNsigned transaction, and then follow up with the signed transaction in a  \nseparate message.\n\n'a' is problematic because while wallet software could easily append some  \ndata to the queryString, it doesn't work if the user is downloading then  \nopening the PaymentRequest as a file. So 'a' is a no-go I think.\n\n'b' is fine, if not overly chatty. The only thing committed is a refund  \naddress, which is a lot less problematic than committed unspent outputs.\n\n'c' is nice because it lets the server preview the transaction (and  \nACK/NACK it with a memo of their own -- e.g. 'fee too low'?) without being  \nable to broadcast it, so we know unspent outputs are not yet committed.\n\nBut all of these require too many changes to the protocol for my liking.\n\nOn Wed, 29 Jan 2014 21:47:51 -0800, Chuck <chuck+bitcoindev at borboggle.com>  \nwrote:\n> 3. Customer builds a set of transactions and sends a new \n> PaymentApprovalRequest message which includes a refund address and the \n> unsigned transactions and their associated fully-signed transactionhash,  \n> the whole message signed with the private key of the refund address.\n\n\"Unsigned transactions and their associated fully-signed transaction hash\"  \n-- isn't that a fully signed transaction? In this case, it doesn't solve  \nthe core problem of the server being able to broadcast that transaction  \nwithout ACKing.\n\nOn Wed, 29 Jan 2014 21:47:51 -0800, Chuck <chuck+bitcoindev at borboggle.com>  \nwrote:\n> In Step 3, it's critical the customer sign the message with the private\n> key of the refund address, so that the merchant can be confident the\n> refund address is correct.\n\nFor merchant confidence that the address is correct, we can leave the  \ntransport security to the transport layer.\n\nFor payer proving refund address was X after merchant sends a refund to Y,  \nthat's a different story. I don't think we want to *require* access to the  \nrefund address private key. For example, BIP32 public derivation may have  \njust the pubkey available. Offline transaction signing is one thing, but  \noffline PP message signing is too much. I think there are better ways to  \nsecure the refund address which can reuse existing code, and certainly the  \noption should remain to send a plain refund address just relying on  \ntransport security and trusting the merchant."
            },
            {
                "author": "Chuck",
                "date": "2014-01-31T04:16:36",
                "message_text_only": "On 1/31/2014 3:16 AM, Jeremy Spilman wrote:\n> I think we want to separate the two issues;\n>\n>     1) Reliably getting refund/memo fields to the merchant/payee\n>     2) Who broadcasts a TX, how it's retried, how outputs are 'locked' and\n> if/when they should be [double]-spent to clear them\n>\n> We should be able to solve '1' without having to fully spec out behavior\n> for 2.\nMy original message was focused on #1.  Not only #1, but ensuring the \nmerchant can't act maliciously too.\n\nAs far as #2 is concerned, I don't think it makes any difference - it's \nin both the customer and the merchant's best interest to have the \ntransactions confirmed.\n\n>     c) Send them as a response to the PaymentRequest/PaymentDetails with the\n> UNsigned transaction, and then follow up with the signed transaction in a\n> separate message.\n...\n> On Wed, 29 Jan 2014 21:47:51 -0800, Chuck <chuck+bitcoindev at borboggle.com>\n> wrote:\n>> 3. Customer builds a set of transactions and sends a new\n>> PaymentApprovalRequest message which includes a refund address and the\n>> unsigned transactions and their associated fully-signed transactionhash,\n>> the whole message signed with the private key of the refund address.\n> \"Unsigned transactions and their associated fully-signed transaction hash\"\n> -- isn't that a fully signed transaction? In this case, it doesn't solve\n> the core problem of the server being able to broadcast that transaction\n> without ACKing.\nWhat I meant was (and maybe this was roundabout?): the customer includes \nthe UNsigned transactions as well as the hashes (and only the hashes) of \nthe fully signed transactions.  The customer keeps the fully signed \ntransactions private until the merchant ACKs the unsigned versions.  If \nthe merchant has the hash of the fully signed transaction, he can \nmonitor the network for delivery of the signed transaction.\n\nIt definitely complicates things, but it's nothing that can't be done.\n\nCheers,\n\nChuck"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-01-31T16:21:59",
                "message_text_only": "The merchant can always act maliciously by simply not delivering the\ngoods. The only recourse the payment protocol provides at that point\nis that you have proof the merchant is acting maliciously (or at the\nvery least his payment system is broken).\n\nYour scheme just adds an ACK of the specific unsigned transactions\nbefore the payment is effectively irreversible.\n\nI can't come up with a situation where the combination of signed\nrequest and blockchain entry aren't enough evidence, yet where adding\nan ACK by the merchant of the unsigned transaction tips the balance\nthe other way. If you know of such a possibility, I'd love to hear it,\nbecause we'd know what we're trying to fix.\n\nThe only way I can see a malicious merchant exploiting wallet\nbehaviour around PaymentACK is by accepting the Payment message, not\nbroadcasting it, not returning an ACK, and hoping the wallet/user\nretries paying with a new, non-conflicting transaction. Then he can\ntry milking multiple small payments out of the user before they\nrealize what happened, and broadcast them all at once, stealing more\nfunds than the user ever was willing to risk in the transaction. But\nthis is trivial to guard against at the wallet level (by making every\nnew payment conflict with all previous non-acked payments).\n\nThe non-reliability of getting memo/refund fields is a separate\nproblem, but it seems BitcoinJ's approach addresses that nicely.\n\nOn Thu, Jan 30, 2014 at 11:16 PM, Chuck <chuck+bitcoindev at borboggle.com> wrote:\n> On 1/31/2014 3:16 AM, Jeremy Spilman wrote:\n>> I think we want to separate the two issues;\n>>\n>>     1) Reliably getting refund/memo fields to the merchant/payee\n>>     2) Who broadcasts a TX, how it's retried, how outputs are 'locked' and\n>> if/when they should be [double]-spent to clear them\n>>\n>> We should be able to solve '1' without having to fully spec out behavior\n>> for 2.\n> My original message was focused on #1.  Not only #1, but ensuring the\n> merchant can't act maliciously too.\n>\n> As far as #2 is concerned, I don't think it makes any difference - it's\n> in both the customer and the merchant's best interest to have the\n> transactions confirmed.\n>\n>>     c) Send them as a response to the PaymentRequest/PaymentDetails with the\n>> UNsigned transaction, and then follow up with the signed transaction in a\n>> separate message.\n> ...\n>> On Wed, 29 Jan 2014 21:47:51 -0800, Chuck <chuck+bitcoindev at borboggle.com>\n>> wrote:\n>>> 3. Customer builds a set of transactions and sends a new\n>>> PaymentApprovalRequest message which includes a refund address and the\n>>> unsigned transactions and their associated fully-signed transactionhash,\n>>> the whole message signed with the private key of the refund address.\n>> \"Unsigned transactions and their associated fully-signed transaction hash\"\n>> -- isn't that a fully signed transaction? In this case, it doesn't solve\n>> the core problem of the server being able to broadcast that transaction\n>> without ACKing.\n> What I meant was (and maybe this was roundabout?): the customer includes\n> the UNsigned transactions as well as the hashes (and only the hashes) of\n> the fully signed transactions.  The customer keeps the fully signed\n> transactions private until the merchant ACKs the unsigned versions.  If\n> the merchant has the hash of the fully signed transaction, he can\n> monitor the network for delivery of the signed transaction.\n>\n> It definitely complicates things, but it's nothing that can't be done.\n>\n> Cheers,\n>\n> Chuck\n>\n> ------------------------------------------------------------------------------\n> WatchGuard Dimension instantly turns raw network data into actionable\n> security intelligence. It gives you real-time visual feedback on key\n> security issues and trends.  Skip the complicated setup - simply import\n> a virtual appliance and go from zero to informed in seconds.\n> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            }
        ],
        "thread_summary": {
            "title": "BIP70: PaymentACK semantics",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kevin Greene",
                "Jeff Garzik",
                "Andreas Schildbach",
                "Mike Hearn",
                "Chuck",
                "Peter Todd",
                "Christophe Biocca",
                "Jeremy Spilman",
                "Gavin Andresen",
                "Pieter Wuille"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 38056
        }
    },
    {
        "title": "[Bitcoin-development] Payment Protocol for Face-to-face Payments",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-27T11:59:25",
                "message_text_only": "As promised I'd like to present my work done on leveraging the payment\nprotocol for face-to-face payments. The general assumption is that\nindividuals don't own X.509 certificates. Their devices may be only\nbadly connected to the internet or in some cases not at all. I've\nimplemented a prototype on a branch of Bitcoin Wallet. It is using\nbitcoinj 0.11 (not released).\n\nhttps://github.com/schildbach/bitcoin-wallet/commits/payment-protocol\n\n\nTAP TO PAY\n\nFirst I looked at the NFC tap-to-pay usecase. The way it works as\ncurrently rolled out: A BIP21 URL is published using an NDEF URI\nmessage. The URL is supplemented by a Bluetooth MAC address that can be\nconnected in order to finish the payment. Once connected, a very simple\ncustom protocol transmits the signed transaction(s) in\nbitcoin-serialized form to the payee, who replies with an ack or nack.\n\nThe way I prototyped it to work in future: Instead of the BIP21 URL a\nBIP70 payment request is published using an NDEF MIME message (mime-type\nas per BIP71). The paymentUrl field can (and in the face-to-face case\nshould) contain a Bluetooth URL which contains the MAC address of the\npayee. Because I could not find any standard for Bluetooth URLs, I made\nup my own: \"bt:112233445566\" means MAC address 11:22:33:44:55:66. Once\nconnected, Payment message and PaymentACK reply are used to finish the\npayment. Since Bluetooth sockets are streams, I had to use the delimited\nvariant of the protobufs for Payment and PaymentACK messages. This\nprepends them with a VARINT containing the message length.\n\nAll of the above should be easy to migrate. NFC implementations are\nrare, and the current Bluetooth protocol is implemented only by Bitcoin\nWallet afaik. Fallbacks are provided where necessary.\n\nIn future, I'd like to add encryption to the Bluetooth connection, maybe\nusing SSL and some DH key exchange.\n\n\nSCAN TO PAY\n\nFor scan-to-pay, the current landscape looks different. I assume at\nleast 50% of Bitcoin transactions are initiated by a BIP21 URL encoded\ninto a QR-code. Nevertheless, I tried to encode a payment request into\nthe bitcoin URL. I used my existing work on encoding transactions into\nQR-codes. Steps to encode:\n\n1. The payment request is protobuf-serialized. For a simple payment\nrequest, this results in only ~50 bytes thanks to the efficiency of\nprotobuf.\n2. The bytes are encoded using \"Base43\", which is the same as\nBase64/Base58, but its alphabet consists of the characters allowed in\nso-called \"alphanumeric\" QR-codes, minus the characters not allowed in URLs.\n3. The resulting string is prefixed by \"BITCOIN:\"\n4. All of that goes into a QR-code, and because it only contains\n\"alphanumeric\" characters, it will produce a very efficient code. For\nsimple payment requests, I could not notice any difference in scanning\ndifficulty.\n\nThere are some limitations however:\n\n- Obviously such QR-encoded payment requests cannot grow in size as much\nas using other media. In particular, I expect PKI signed requests are\nout of question. However, in face to face payments the value of a sig\nbased on PKI is highly questionable, and the fact the sig cannot be\nverified without TCP connectivity doesn't help. There should be some\nheadroom for multiple-output requests and moderately more complex\nscripts though.\n\n- I chose to re-use the \"bitcoin:\" URL scheme, because it's already\nwhitelisted in web browsers, QR-code scanners and so on. In order to\ndifferentiate \"payment requests URLs\" from BIP21 URLs, I test for\nuri.startsWith(\"BITCOIN:\") because you'll get letters in all-caps from\nalphanumeric QR-codes. I will investigate into a better solution.\n\n- Due to wide deployment of BIP21 QR-codes, migration needs to happen in\ndistinct phases. Ability to parse \"payment protocol URLs\" comes first,\ndefault to presenting them to users has to come (much) later.\n\n\nCLICK TO PAY\n\nFinally this is the usecase the payment protocol was invented for and\nit's not face-to-face. I don't have much to add, just one thing. As a\nbyproduct of the above, \"payment protocol URLs\" can be used for links\npublished on web pages as well. This might provide a nice replacement\nfor the imho rather ugly BIP72 specification once the payment protocol\nis widely deployed.\n\n\nOpen for discussion."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-27T13:11:40",
                "message_text_only": "Thanks Andreas, that's really interesting work. Comments below.\n\nOn Mon, Jan 27, 2014 at 12:59 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> Because I could not find any standard for Bluetooth URLs, I made\n> up my own: \"bt:112233445566\" means MAC address 11:22:33:44:55:66.\n\n\nI would like to see Bluetooth continue to work for scan-to-pay even in the\nsigned case. So for this reason the current approach with a BTMAC parameter\nin the Bitcoin URI seems to work universally across NFC tags and QR codes,\nand would allow download of a signed PaymentRequest even in the case where\na QR code is used.\n\nBecause a Bitcoin URI already contains a public key (hash), re-using that\nto establish an encrypted/authd connection on top of an insecure RFCOMM\nsocket would seem to be relatively straightforward.\n\n\n> Obviously such QR-encoded payment requests cannot grow in size as much\n> as using other media. In particular, I expect PKI signed requests are\n> out of question. However, in face to face payments the value of a sig\n> based on PKI is highly questionable, and the fact the sig cannot be\n> verified without TCP connectivity doesn't help.\n>\n\nJust a correction here - the reason signed payment requests are \"large\"\n(about 4000 bytes) is exactly because they *can* be verified offline, i.e.\nby a Trezor. The signed payment request contains all the data needed to\nestablish its authenticity, including certificates and the signature\nitself. No TCP connection is needed.\n\nFor face to face payments, I think signing is still useful. For one, we\nwant to keep the distinction between \"merchant\" and \"user\" as blurry and\nindistinct as possible. A strong separation between merchants and consumers\nis one of the many bad things about the credit card system. Whilst\ninitially we'd expect the payment protocol to be used by online webshops,\nin future it could be used by little corner shops, children's lemonade\nstands and so on. You don't want to exclude entire classes of transactions\nfrom being secure with Trezor type devices, and besides, even without a\nTrezor you probably still would like a receipt if you buy something from a\nlocal market trader.\n\nAnother use case - we heard a story about a restaurant owner who accepted\nBitcoin. He printed a static bitcoin URI onto a QR code on the menu. A\nmonth or two later he discovered one of his waiters had re-printed the\nmenus with his own QR code! The people thought they had been paying for the\nmeal, and in fact it went right into the pocket of the waiter.\n\nAs to how it works, well, that's not hard. Comodo give away free email\naddress certs with a few mouse clicks, it's no harder than signing up for a\nwebsite. Then you can just open that cert file on your phone to install it\nand it should become usable automatically with a future version of\nbitcoinj. Email address doesn't prove a whole lot, of course, but it's\nbetter than nothing. If the restaurant owner had even just a hotmail\naddress, he could have stuck it up behind the bar or painted it on the\noutside of his shop and some customer would have got suspicious when he\ndidn't see the address (assuming we're successful at deploying it of\ncourse).\n\n\n> - I chose to re-use the \"bitcoin:\" URL scheme\n>\n\nOther wallets won't know what to do with it and would yield a strange error\nmessage.\n\n\n> Finally this is the usecase the payment protocol was invented for and\n> it's not face-to-face. I don't have much to add, just one thing. As a\n> byproduct of the above, \"payment protocol URLs\" can be used for links\n> published on web pages as well. This might provide a nice replacement\n> for the imho rather ugly BIP72 specification once the payment protocol\n> is widely deployed.\n\n\nURL length is limited on some versions of internet explorer (probably on\nall browsers). Rather than pack a file into a URL, if you don't want to use\nthe current r= extension it's better for apps to just register to handle\n.bitcoinpaymentrequest files / the right MIME type. Downloading it and\nopening it would do the right thing automatically.\n\nRemember BIP 73 also! It says that with the apps built-in QR scanner, if\nyou scan an HTTP[S] URI, you should try downloading it with a magic header.\nThat way you can get a payment request file out of the server. Without the\nmagic header (i.e.  a normal generic barcode scanner app) it would open a\nweb page containing a bitcoin URI clickable link.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/55485834/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-27T18:18:11",
                "message_text_only": "On 01/27/2014 02:11 PM, Mike Hearn wrote:\n\n> I would like to see Bluetooth continue to work for scan-to-pay even in\n> the signed case. So for this reason the current approach with a BTMAC\n> parameter in the Bitcoin URI seems to work universally across NFC tags\n> and QR codes, and would allow download of a signed PaymentRequest even\n> in the case where a QR code is used.\n\nI'm not saying I'm against signed payment requests, but unfortunately\nthey are just too big for QR-codes. Then again, QR-codes *can* take up\nto 2 KB. How big would a very basic trust chain plus signature be?\n\n> Because a Bitcoin URI already contains a public key (hash), re-using\n> that to establish an encrypted/authd connection on top of an insecure\n> RFCOMM socket would seem to be relatively straightforward.\n\nI was under the impression that addresses will go away. Can you\nelaborate on the mechanism?\n\n>     Obviously such QR-encoded payment requests cannot grow in size as much\n>     as using other media. In particular, I expect PKI signed requests are\n>     out of question. However, in face to face payments the value of a sig\n>     based on PKI is highly questionable, and the fact the sig cannot be\n>     verified without TCP connectivity doesn't help.\n> \n> Just a correction here - the reason signed payment requests are \"large\"\n> (about 4000 bytes) is exactly because they *can* be verified offline,\n> i.e. by a Trezor. The signed payment request contains all the data\n> needed to establish its authenticity, including certificates and the\n> signature itself. No TCP connection is needed.\n\nOk, that's good news (to me). However, you are going to manage trust\nstores (adding and revoking) without TCP?\n\n> For face to face payments, I think signing is still useful. For one, we\n> want to keep the distinction between \"merchant\" and \"user\" as blurry and\n> indistinct as possible. A strong separation between merchants and\n> consumers is one of the many bad things about the credit card system.\n\nAck.\n\n> Whilst initially we'd expect the payment protocol to be used by online\n> webshops, in future it could be used by little corner shops, children's\n> lemonade stands and so on.\n\nWell I'm thinking the other way round. Use Bitcoin where its already\nused today -- face to face.\n\n> you probably still would like a receipt if you buy\n> something from a local market trader.\n\nYes, but where is the problem?\n\n> Another use case - we heard a story about a restaurant owner who\n> accepted Bitcoin. He printed a static bitcoin URI onto a QR code on the\n> menu. A month or two later he discovered one of his waiters had\n> re-printed the menus with his own QR code! The people thought they had\n> been paying for the meal, and in fact it went right into the pocket of\n> the waiter.\n\nSad story, but it's really a special case. Using a printed QR-code is\nclearly the wrong tool for his task, for several reasons.\n\nAnd again, how is he going to provide the payment request to the payer\nwithout TCP?\n\n> As to how it works, well, that's not hard. Comodo give away free email\n> address certs with a few mouse clicks, it's no harder than signing up\n> for a website.\n\nWe don't want to force people to sign up anywhere. Bitcoin is instant-on.\n\n>     - I chose to re-use the \"bitcoin:\" URL scheme\n>\n> Other wallets won't know what to do with it and would yield a strange\n> error message.\n\nWhich is why I said we need some transition time.\n\n> Rather than pack a file into a URL, if you don't want to\n> use the current r= extension it's better for apps to just register to\n> handle .bitcoinpaymentrequest files / the right MIME type. Downloading\n> it and opening it would do the right thing automatically.\n\nThat's a good point. I'll implement this asap.\n\n> Remember BIP 73 also! It says that with the apps built-in QR scanner, if\n> you scan an HTTP[S] URI, you should try downloading it with a magic\n> header. That way you can get a payment request file out of the server.\n> Without the magic header (i.e.  a normal generic barcode scanner app) it\n> would open a web page containing a bitcoin URI clickable link.\n\nInteresting, did not know about this BIP. However I don't understand the\nusecase. Its not like my browsers always display QR-codes with URL of\nthe page being shown. And if the page in question bothers to show a QR\ncode, it could just as well also link to a payment request resource (as\nsuggested above)."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-27T18:34:55",
                "message_text_only": "On Mon, Jan 27, 2014 at 7:18 PM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> I'm not saying I'm against signed payment requests, but unfortunately\n> they are just too big for QR-codes. Then again, QR-codes *can* take up\n> to 2 KB. How big would a very basic trust chain plus signature be?\n>\n\nAs I said, the test requests generated by Gavin's generator end up being\nabout 4kb.\n\nUnfortunately most certs are using RSA keys which aren't very compact. You\ncan get ECC certs, but for whatever reason, the test requests aren't using\none.\n\n\n> I was under the impression that addresses will go away. Can you\n> elaborate on the mechanism?\n>\n\nThere's still an address in the URI for backwards compatibility, right? In\ntheory if everyone some day uses wallets that support BIP70 it'd be\nsuperfluous and could be removed, but whilst it's there, we could find\nalternative uses for it ...\n\n\n> Ok, that's good news (to me). However, you are going to manage trust\n> stores (adding and revoking) without TCP?\n>\n\nTrust store is just a local database. Why would it involve TCP?\n\n\n> Well I'm thinking the other way round. Use Bitcoin where its already\n> used today -- face to face.\n>\n\nMaybe in Berlin :-) Most of my transactions are sadly with online shops,\nstill.\n\n\n> > you probably still would like a receipt if you buy\n> > something from a local market trader.\n>\n> Yes, but where is the problem?\n>\n\nA receipt is a proof of purchase. If the payment request isn't signed then\nit proves nothing as you could have made it yourself. Of course paper\nreceipts are forgeable too - we sort of pretend receipt\nfraud<http://en.wikipedia.org/wiki/Return_fraud>does not exist, but it\ndoes.\n\nNobody would ever be forced to sign to receive money, obviously, but it's\nbetter if people do as it leads to herd immunity. If people expect to see\nit then they will be suspicious if an attacker strips the signing data. If\nit's randomly hit/miss then the signing data can just be deleted by a MITM\nand you'd never think anything was amiss.\n\nAnd again, how is he going to provide the payment request to the payer\n> without TCP?\n>\n\nOver Bluetooth, perhaps. That's what we're talking about, right?\n\n\n> Interesting, did not know about this BIP. However I don't understand the\n> usecase.\n\n\nIt was proposed by the BitPay guys. I think they feel that scanning a QR\ncode should always make something intelligent happen, even if you don't\n(for instance) have a wallet app installed at all. Overloading the URL so\nit works for both web browsers and wallet apps is easy, so I can see why\nthey suggested it. Doesn't seem like a big deal either way.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/dcd2f111/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-27T17:11:08",
                "message_text_only": "On Mon, 27 Jan 2014 03:59:25 -0800, Andreas Schildbach  \n<andreas at schildbach.de> wrote:\n\n> SCAN TO PAY\n> For scan-to-pay, the current landscape looks different. I assume at\n> least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded\n> into a QR-code. Nevertheless, I tried to encode a payment request into\n> the bitcoin URL. I used my existing work on encoding transactions into\n> QR-codes. Steps to encode:\n\nReally interesting work. When using scan-to-pay, after the payer scans the  \nQR code with the protobuf PaymentRequest (not a URL to download the  \nPaymentRequest) are they using their own connectivity to submit the  \nPayment response?\n\nIf we assume connectivity on the phone, might as well just get a URL from  \nthe QR code and re-use existing infrastructure for serving that?\n\nHow about putting a Bluetooth address in the payment_url inside the  \nPaymentDetails message for the smartphone to send back the Payment  \nresponse and get PaymentAck?"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-27T17:39:53",
                "message_text_only": "On 01/27/2014 06:11 PM, Jeremy Spilman wrote:\n\n>> SCAN TO PAY\n>> For scan-to-pay, the current landscape looks different. I assume at\n>> least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded\n>> into a QR-code. Nevertheless, I tried to encode a payment request into\n>> the bitcoin URL. I used my existing work on encoding transactions into\n>> QR-codes. Steps to encode:\n> \n> Really interesting work. When using scan-to-pay, after the payer scans the  \n> QR code with the protobuf PaymentRequest (not a URL to download the  \n> PaymentRequest) are they using their own connectivity to submit the  \n> Payment response?\n>\n> How about putting a Bluetooth address in the payment_url inside the\n> PaymentDetails message for the smartphone to send back the Payment\n> response and get PaymentAck?\n\nThat's exactly what I have prototyped. I am putting a Bluetooth MAC\naddress into the payment_url. Have a look at the TAP TO PAY paragraph\nfor details, its mostly the same mechanism."
            },
            {
                "author": "Jeremy Spilman",
                "date": "2014-01-27T18:18:16",
                "message_text_only": "On Jan 27, 2014, at 9:39 AM, Andreas Schildbach <andreas at schildbach.de> wrote:\n\n> On 01/27/2014 06:11 PM, Jeremy Spilman wrote:\n> \n>>> SCAN TO PAY\n>>> For scan-to-pay, the current landscape looks different. I assume at\n>>> least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded\n>>> into a QR-code. Nevertheless, I tried to encode a payment request into\n>>> the bitcoin URL. I used my existing work on encoding transactions into\n>>> QR-codes. Steps to encode:\n>> \n>> Really interesting work. When using scan-to-pay, after the payer scans the  \n>> QR code with the protobuf PaymentRequest (not a URL to download the  \n>> PaymentRequest) are they using their own connectivity to submit the  \n>> Payment response?\n>> \n>> How about putting a Bluetooth address in the payment_url inside the\n>> PaymentDetails message for the smartphone to send back the Payment\n>> response and get PaymentAck?\n> \n> That's exactly what I have prototyped. I am putting a Bluetooth MAC\n> address into the payment_url. Have a look at the TAP TO PAY paragraph\n> for details, its mostly the same mechanism.\n> \n\nSame mechanism for both, of course. Sorry, that was obvious. :)"
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-27T20:34:36",
                "message_text_only": "On Mon, Jan 27, 2014 at 09:11:08AM -0800, Jeremy Spilman wrote:\n> On Mon, 27 Jan 2014 03:59:25 -0800, Andreas Schildbach  \n> <andreas at schildbach.de> wrote:\n> \n> > SCAN TO PAY\n> > For scan-to-pay, the current landscape looks different. I assume at\n> > least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded\n> > into a QR-code. Nevertheless, I tried to encode a payment request into\n> > the bitcoin URL. I used my existing work on encoding transactions into\n> > QR-codes. Steps to encode:\n> \n> Really interesting work. When using scan-to-pay, after the payer scans the  \n> QR code with the protobuf PaymentRequest (not a URL to download the  \n> PaymentRequest) are they using their own connectivity to submit the  \n> Payment response?\n> \n> If we assume connectivity on the phone, might as well just get a URL from  \n> the QR code and re-use existing infrastructure for serving that?\n\nMy first thought was likewise.  In the case where the phone needs\nInternet connectivity anyway, why not include an HTTPS URL in a BIP 72 URL?\n\nI'm assuming that every client will have to support this is any case,\nsince it's effectively mandated by the BIP, so why add another mode of\noperation?\n\nHowever, PaymentRequest-over-QR-code does seem to me to have one\nrather attractive advantage: the authentication model is orders of\nmagnitude simpler and more intuitive for a face-to-face transaction\nthan anything else.  You're saying \"pay the coins to that thing over\nthere displaying that QR code\".  Which, most of the time, is exactly\nwhat you want.\n\nIn the web case, it's fine to ignore the case where the URL domain has\nbeen subverted (and an cert obtained by the attacker) because in that\ncase you've lost before you even get to payments (MitM attacker shows\nyou a modified web page with different payment details).  But the\nface-to-face case isn't intrinsically dependent on SSL security, and\nit's nice not to introduce that attack vector...\n\nroy"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-01-29T14:57:38",
                "message_text_only": "> But the face-to-face case isn't intrinsically dependent on SSL security, and it's nice not to introduce that attack vector...\n\nIf the only concern is to make scan-to-pay work without reliance on\nSSL's PKI, it might be better to specify the payment protocol url\n*and* the public key used for signing right in the qr code. The wallet\nconnects to the url, fetches the payment request (maybe over a secure\nconnection, maybe not, doesn't matter), and verifies the signature\nmatches the public key from the qr code.\n\nDownsides compared to embedding the entire request:\nPayee needs to host/serve requests somewhere online. This introduces\nreliability and DoS concerns.\nPayer needs an internet connection to fetch the request.\n\nAdvantages:\nServe variable payment requests from the same qr code (improving\nrecipient privacy).\nStill no hard dependency on CAs. Even if both CA and DNS are\ncompromised by an attacker, the worst they can do is Denial of\nService.\nOptionally use CAs so that the wallet can attach an identity to who\nyou're paying by QR code. This partly addresses the problem of the\nwaiter overwriting the QR code. A non-PKI transaction would simply\nshow \"Unknown recipient\".\nMuch smaller QR code (only overhead is the key parameter, and you\ncould use a boolean param + the \"address as public key\" hack Mike\nmentionned, for only 4 characters of overhead).\nNo need for a backward-incompatible bitcoin: scheme\n\nOn Mon, Jan 27, 2014 at 3:34 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n> On Mon, Jan 27, 2014 at 09:11:08AM -0800, Jeremy Spilman wrote:\n>> On Mon, 27 Jan 2014 03:59:25 -0800, Andreas Schildbach\n>> <andreas at schildbach.de> wrote:\n>>\n>> > SCAN TO PAY\n>> > For scan-to-pay, the current landscape looks different. I assume at\n>> > least 50% of Bitcoin transactions are initiated by a BIP21 URL encoded\n>> > into a QR-code. Nevertheless, I tried to encode a payment request into\n>> > the bitcoin URL. I used my existing work on encoding transactions into\n>> > QR-codes. Steps to encode:\n>>\n>> Really interesting work. When using scan-to-pay, after the payer scans the\n>> QR code with the protobuf PaymentRequest (not a URL to download the\n>> PaymentRequest) are they using their own connectivity to submit the\n>> Payment response?\n>>\n>> If we assume connectivity on the phone, might as well just get a URL from\n>> the QR code and re-use existing infrastructure for serving that?\n>\n> My first thought was likewise.  In the case where the phone needs\n> Internet connectivity anyway, why not include an HTTPS URL in a BIP 72 URL?\n>\n> I'm assuming that every client will have to support this is any case,\n> since it's effectively mandated by the BIP, so why add another mode of\n> operation?\n>\n> However, PaymentRequest-over-QR-code does seem to me to have one\n> rather attractive advantage: the authentication model is orders of\n> magnitude simpler and more intuitive for a face-to-face transaction\n> than anything else.  You're saying \"pay the coins to that thing over\n> there displaying that QR code\".  Which, most of the time, is exactly\n> what you want.\n>\n> In the web case, it's fine to ignore the case where the URL domain has\n> been subverted (and an cert obtained by the attacker) because in that\n> case you've lost before you even get to payments (MitM attacker shows\n> you a modified web page with different payment details).  But the\n> face-to-face case isn't intrinsically dependent on SSL security, and\n> it's nice not to introduce that attack vector...\n>\n> roy\n>\n>\n> ------------------------------------------------------------------------------\n> CenturyLink Cloud: The Leader in Enterprise Cloud Services.\n> Learn Why More Businesses Are Choosing CenturyLink Cloud For\n> Critical Workloads, Development Environments & Everything In Between.\n> Get a Quote or Start a Free Trial Today.\n> http://pubads.g.doubleclick.net/gampad/clk?id=119420431&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-30T10:46:50",
                "message_text_only": "Just a small update. I merged the code to my bitcoinj-0.11 branch and\nput up binary .apk files for experimentation. Just make sure to tick\n\"BIP70 for tap-to-pay/scan-to-pay\" in the labs settings.\n\nSource:\nhttps://github.com/schildbach/bitcoin-wallet/commits/bitcoinj-0.11\n\nBinaries:\nhttps://github.com/schildbach/bitcoin-wallet/releases/tag/v3.30-bitcoinj0.11\n\n\nOn 01/27/2014 12:59 PM, Andreas Schildbach wrote:\n> As promised I'd like to present my work done on leveraging the payment\n> protocol for face-to-face payments. The general assumption is that\n> individuals don't own X.509 certificates. Their devices may be only\n> badly connected to the internet or in some cases not at all. I've\n> implemented a prototype on a branch of Bitcoin Wallet. It is using\n> bitcoinj 0.11 (not released).\n> \n> https://github.com/schildbach/bitcoin-wallet/commits/payment-protocol"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-30T10:50:22",
                "message_text_only": "Although it should be noted that these binaries don't yet do URI support so\nyou can't scan a bitcoin URI with r= in it and see the verified merchant\nname, etc. I think Andreas plans to do the UI for that in the next update.\n\n\nOn Thu, Jan 30, 2014 at 11:46 AM, Andreas Schildbach\n<andreas at schildbach.de>wrote:\n\n> Just a small update. I merged the code to my bitcoinj-0.11 branch and\n> put up binary .apk files for experimentation. Just make sure to tick\n> \"BIP70 for tap-to-pay/scan-to-pay\" in the labs settings.\n>\n> Source:\n> https://github.com/schildbach/bitcoin-wallet/commits/bitcoinj-0.11\n>\n> Binaries:\n>\n> https://github.com/schildbach/bitcoin-wallet/releases/tag/v3.30-bitcoinj0.11\n>\n>\n> On 01/27/2014 12:59 PM, Andreas Schildbach wrote:\n> > As promised I'd like to present my work done on leveraging the payment\n> > protocol for face-to-face payments. The general assumption is that\n> > individuals don't own X.509 certificates. Their devices may be only\n> > badly connected to the internet or in some cases not at all. I've\n> > implemented a prototype on a branch of Bitcoin Wallet. It is using\n> > bitcoinj 0.11 (not released).\n> >\n> > https://github.com/schildbach/bitcoin-wallet/commits/payment-protocol\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> WatchGuard Dimension instantly turns raw network data into actionable\n> security intelligence. It gives you real-time visual feedback on key\n> security issues and trends.  Skip the complicated setup - simply import\n> a virtual appliance and go from zero to informed in seconds.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/a3e7bd64/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Payment Protocol for Face-to-face Payments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Andreas Schildbach",
                "Mike Hearn",
                "Roy Badami",
                "Christophe Biocca",
                "Jeremy Spilman"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 28031
        }
    },
    {
        "title": "[Bitcoin-development] Experiment with linking payment requests via href",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-01-27T20:53:49",
                "message_text_only": "On 01/27/2014 07:18 PM, Andreas Schildbach wrote:\n\n>> Rather than pack a file into a URL, if you don't want to\n>> use the current r= extension it's better for apps to just register to\n>> handle .bitcoinpaymentrequest files / the right MIME type. Downloading\n>> it and opening it would do the right thing automatically.\n> \n> That's a good point. I'll implement this asap.\n\nIt doesn't look too good. I've tried Chrome, the AOSP browser and\nFirefox. All insist on handling the link with their download manager,\nwhich would involve an additional click. In the case of Chrome and AOSP,\nthat download manager a separate component that is not updatable with\nthe browser (rather its tied to the OS version afaik).\n\nIf you click on the file in the download manager of Chrome and AOSP it\nopens as expected. On Firefox, it just ignores the click.\n\nI registered the correct mime type and also set the mime type of the\nhref just in case. In case you want to have a look at the href, its on\nhttp://wallet.schildbach.de and links to Gavins generator.\n\nI didn't try suffixes, but I'd assume it behaves similar.\n\nAny ideas what else to try?"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-27T21:47:55",
                "message_text_only": ">\n> All insist on handling the link with their download manager, which would\n> involve an additional click.\n\n\nThat's the expected behaviour, right? That's why I said \"download and\nopen\". The Bitcoin URI with r= is better because it lets you remove that\nsecond click, but in some contexts the file approach is the right way to go\n- like for an email attachment or payment request sent via WhatsApp.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/d0b68c67/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Experiment with linking payment requests via href",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Andreas Schildbach"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1703
        }
    },
    {
        "title": "[Bitcoin-development] Extension for BIP-0070 to support recurring payments",
        "thread_messages": [
            {
                "author": "Stephane Brossier",
                "date": "2014-01-28T02:36:34",
                "message_text_only": "Hi,\n\n[I sent this email 2 days ago prior my registration to the mailing list; please forgive me if this is a duplicate]\n\nI would like to propose an extension to the Payment Protocol (bip-0070) to address the case of recurring payments in Bitcoin -- new bip or modification of bip-0070.\n\nThere has been a lot of growth in the last few years in the 'subscription economy' with many new companies embracing that model -- online video, gaming, groceries, newspapers,... In parallel, Bitcoin is growing into a mainstream currency (hence bip-0070), and so the next logical step would be to define a protocol to address that need.\n\nWe have been working in the past few years on an open-source billing platform (http://kill-bill.org/), and recently came with a prototype to do recurring billing in Bitcoin (see http://thekillbillstory.wordpress.com/2014/01/20/bitcoin-plugin/ and http://thekillbillstory.wordpress.com/2014/01/11/coinbase-integration-experiment/).\n\n\nThe work flow would look similar to the one from bip-0070. There would need to be some additions; the flow could be summarized as follow:\n\n0. Click: 'Subscribe Now'\n1. Wallet would get  a RecurringPaymentRequestAuth which describes the nature of the future recurring payments\n2. The Customer would get prompted from the wallet to authorize it.\n3. The wallet would then poll the Merchant server (startup time, and/or well defined frequency) and potentially merchant would start issuing a PaymentRequest); the role of the wallet is to ensure that PaymentRequest is within the bounds of what was accepted by the customer-- amount, frequency,.. If it is, then it would make the Payment the same way it works for bip-0070\n\nIs that something that the community would be interested in? We could provide more details about the protocol we have in mind (messages and flow), and also provide an implementation with bitcoinj as a wallet and Kill Bill as a merchant server.\n\nLe me know what you think.\n\nSt\u00e9phane\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/a12cf437/attachment.html>"
            },
            {
                "author": "Kevin Greene",
                "date": "2014-01-28T03:58:21",
                "message_text_only": "+1 to the idea of recurring payment requests.\n\nPerhaps one way to realize this would be to add an optional URL to the\nPaymentRequest object where the next PaymentRequest can be fetched and the\ndate at which the merchant expects the next payment.\n\n\nOn Mon, Jan 27, 2014 at 6:36 PM, Stephane Brossier\n<stephane at kill-bill.org>wrote:\n\n> Hi,\n>\n> [I sent this email 2 days ago prior my registration to the mailing list;\n> please forgive me if this is a duplicate]\n>\n> I would like to propose an extension to the Payment Protocol (bip-0070) to\n> address the case of recurring payments in Bitcoin -- new bip or\n> modification of bip-0070.\n>\n> There has been a lot of growth in the last few years in the 'subscription\n> economy' with many new companies embracing that model -- online video,\n> gaming, groceries, newspapers,... In parallel, Bitcoin is growing into a\n> mainstream currency (hence bip-0070), and so the next logical step would be\n> to define a protocol to address that need.\n>\n> We have been working in the past few years on an open-source billing\n> platform (http://kill-bill.org/), and recently came with a prototype to\n> do recurring billing in Bitcoin (see\n> http://thekillbillstory.wordpress.com/2014/01/20/bitcoin-plugin/ and\n> http://thekillbillstory.wordpress.com/2014/01/11/coinbase-integration-experiment/\n> ).\n>\n>\n> The work flow would look similar to the one from bip-0070. There would\n> need to be some additions; the flow could be summarized as follow:\n>\n> 0. Click: 'Subscribe Now'\n> 1. Wallet would get  a RecurringPaymentRequestAuth which describes the\n> nature of the future recurring payments\n> 2. The Customer would get prompted from the wallet to authorize it.\n> 3. The wallet would then poll the Merchant server (startup time, and/or\n> well defined frequency) and potentially merchant would start issuing a\n> PaymentRequest); the role of the wallet is to ensure that PaymentRequest is\n> within the bounds of what was accepted by the customer-- amount,\n> frequency,.. If it is, then it would make the Payment the same way it works\n> for bip-0070\n>\n> Is that something that the community would be interested in? We could\n> provide more details about the protocol we have in mind (messages and\n> flow), and also provide an implementation with bitcoinj as a wallet and\n> Kill Bill as a merchant server.\n>\n> Le me know what you think.\n>\n> St\u00e9phane\n>\n>\n> ------------------------------------------------------------------------------\n> WatchGuard Dimension instantly turns raw network data into actionable\n> security intelligence. It gives you real-time visual feedback on key\n> security issues and trends.  Skip the complicated setup - simply import\n> a virtual appliance and go from zero to informed in seconds.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/f154809e/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-01-28T04:29:55",
                "message_text_only": "Yes, recurring payments and subscriptions is a frequently-requested\nfeature.  It needs a new BIP.  Here is an outline:\n\nThe situation is somewhat analogous to HTML5 local storage.  The\nremote (merchant) wants to initiate a persistent behavior.\n\nNote: This is ONE\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-01-28T04:43:58",
                "message_text_only": "Yes, recurring payments and subscriptions is a frequently-requested\nfeature.  It needs a new BIP.  Here is an outline:\n\nThe situation is somewhat analogous to HTML5 local storage.  The remote\n(merchant) wants to initiate a persistent behavior.  This is bitcoin, so we\nhave a \"push\" model for payment, and the user has complete control.  The\nmerchant can, at most, send a \"subscription request.\"  The user is\nresponsible for making on-time payments after that point.\n\nCentralized services like coinbase.com or blockchain.info will have an easy\ntime of it.  An automated program on their backend, sending payments as\nneeded, is easy and direct.\n\nMore inventive services might employ multisig transactions, generating and\nsigning one signature of a TX, then sending that TX to the human for\nfurther signing and publishing.  A few competing vendors could offer bots\nthat provide this signing service.\n\nDecentralized, standalone wallet clients will be somewhat troublesome.  We\ncan store a local subscription request, and send recurring payments...  if\nthe wallet app is running.  If not, the user will be missing payments, that\nperhaps they intended to make (rent!).\n\nEach of these solutions can be cancelled at any time by the user.  As such,\na courtesy \"subscription cancelled\" message sent to the merchant is\nrecommended.  User controls the usage of their money at all times, the way\nthings should be.\n\nAnd finally, you do not want to make it /too easy/ to send money over and\nover again.  From a human-interface perspective, a textual reminder to send\nmoney might be preferred over actual recurring payment automation: reminder\nemail + manual spend inserts a bit of additional human thought and review\ninto the process, with all that entails.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140127/9f0d3050/attachment.html>"
            },
            {
                "author": "PikaPay",
                "date": "2014-01-28T05:07:56",
                "message_text_only": "It could be useful to schedule x payments for y amount every z time\nperiod, but you'd want to be able to pause or cancel at any time.\n\nIf you want the merchant to be able to request a series of payments\nlike a subscription, the merchant might also be able to request that\nthe subscription be paused or cancelled as well.\n\n\n-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -\nRichard Kohl  -  richard at pikapay.com\n\nTwitter: @generalseven\nPhone: +31 6 284 00112\n\nPikaPay: Send Bitcoins with Twitter"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-01-28T06:08:43",
                "message_text_only": "Greatly appreciate seeing this discussion occur.  This is something that\npotentially could be supported through a bounty - possibly a process BIP?\n\nPossibly related: https://gist.github.com/ABISprotocol/8515891\n\n> Yes, recurring payments and subscriptions is a frequently-requested\n> feature.  It needs a new BIP.  Here is an outline:\n>\n> The situation is somewhat analogous to HTML5 local storage.  The remote\n> (merchant) wants to initiate a persistent behavior.  This is bitcoin, so\n> we\n> have a \"push\" model for payment, and the user has complete control.  The\n> merchant can, at most, send a \"subscription request.\"  The user is\n> responsible for making on-time payments after that point.\n>\n> Centralized services like coinbase.com or blockchain.info will have an\n> easy\n> time of it.  An automated program on their backend, sending payments as\n> needed, is easy and direct.\n>\n> More inventive services might employ multisig transactions, generating and\n> signing one signature of a TX, then sending that TX to the human for\n> further signing and publishing.  A few competing vendors could offer bots\n> that provide this signing service.\n>\n> Decentralized, standalone wallet clients will be somewhat troublesome.  We\n> can store a local subscription request, and send recurring payments...  if\n> the wallet app is running.  If not, the user will be missing payments,\n> that\n> perhaps they intended to make (rent!).\n>\n> Each of these solutions can be cancelled at any time by the user.  As\n> such,\n> a courtesy \"subscription cancelled\" message sent to the merchant is\n> recommended.  User controls the usage of their money at all times, the way\n> things should be.\n>\n> And finally, you do not want to make it /too easy/ to send money over and\n> over again.  From a human-interface perspective, a textual reminder to\n> send\n> money might be preferred over actual recurring payment automation:\n> reminder\n> email + manual spend inserts a bit of additional human thought and review\n> into the process, with all that entails.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> ------------------------------------------------------------------------------\n> WatchGuard Dimension instantly turns raw network data into actionable\n> security intelligence. It gives you real-time visual feedback on key\n> security issues and trends.  Skip the complicated setup - simply import\n> a virtual appliance and go from zero to informed in seconds.\n> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-01-28T06:48:42",
                "message_text_only": "Let's keep fund raising off this mailing list, please.  PS bounties don't\nwork.\n\n\nOn Tue, Jan 28, 2014 at 1:08 AM, Odinn Cyberguerrilla <\nodinn.cyberguerrilla at riseup.net> wrote:\n\n> Greatly appreciate seeing this discussion occur.  This is something that\n> potentially could be supported through a bounty - possibly a process BIP?\n>\n> Possibly related: https://gist.github.com/ABISprotocol/8515891\n>\n> > Yes, recurring payments and subscriptions is a frequently-requested\n> > feature.  It needs a new BIP.  Here is an outline:\n> >\n> > The situation is somewhat analogous to HTML5 local storage.  The remote\n> > (merchant) wants to initiate a persistent behavior.  This is bitcoin, so\n> > we\n> > have a \"push\" model for payment, and the user has complete control.  The\n> > merchant can, at most, send a \"subscription request.\"  The user is\n> > responsible for making on-time payments after that point.\n> >\n> > Centralized services like coinbase.com or blockchain.info will have an\n> > easy\n> > time of it.  An automated program on their backend, sending payments as\n> > needed, is easy and direct.\n> >\n> > More inventive services might employ multisig transactions, generating\n> and\n> > signing one signature of a TX, then sending that TX to the human for\n> > further signing and publishing.  A few competing vendors could offer bots\n> > that provide this signing service.\n> >\n> > Decentralized, standalone wallet clients will be somewhat troublesome.\n>  We\n> > can store a local subscription request, and send recurring payments...\n>  if\n> > the wallet app is running.  If not, the user will be missing payments,\n> > that\n> > perhaps they intended to make (rent!).\n> >\n> > Each of these solutions can be cancelled at any time by the user.  As\n> > such,\n> > a courtesy \"subscription cancelled\" message sent to the merchant is\n> > recommended.  User controls the usage of their money at all times, the\n> way\n> > things should be.\n> >\n> > And finally, you do not want to make it /too easy/ to send money over and\n> > over again.  From a human-interface perspective, a textual reminder to\n> > send\n> > money might be preferred over actual recurring payment automation:\n> > reminder\n> > email + manual spend inserts a bit of additional human thought and review\n> > into the process, with all that entails.\n> >\n> > --\n> > Jeff Garzik\n> > Bitcoin core developer and open source evangelist\n> > BitPay, Inc.      https://bitpay.com/\n> >\n> ------------------------------------------------------------------------------\n> > WatchGuard Dimension instantly turns raw network data into actionable\n> > security intelligence. It gives you real-time visual feedback on key\n> > security issues and trends.  Skip the complicated setup - simply import\n> > a virtual appliance and go from zero to informed in seconds.\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk_______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/d8612bb0/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-28T06:34:20",
                "message_text_only": "I think the right approach for this is to actually implement it and\n*then* propose\na BIP. There are so many possible features we could add to the payment\nprotocol, any other approach would rapidly turn into lots of people\ndeciding to do the \"fun bits\" and often leaving others doing the hard work\nwith difficult or unworkable specs.\n\nFor instance, if you try to implement this, you would rapidly discover that\nit probably makes more sense to do this as an additional set of fields in\nPaymentDetails rather than a new message type entirely. A new top level\nmessage type would in turn require new MIME types, URI extensions and so\non. That doesn't make any sense.\n\nOnce you decide to extend PaymentDetails, the next discovery would be that\nit probably makes sense to try and solve the problem of address re-use for\nrecurring payments first, before speccing out time intervals and so on.\nThat's a separate BIP.\n\nI'm all for adding recurring payments as a feature, that's what the\nprotocol is there for. But I'd like to see future protocol extension\nrequests come after at least one working implementation has been made .....\n\n\nOn Tue, Jan 28, 2014 at 3:36 AM, Stephane Brossier\n<stephane at kill-bill.org>wrote:\n\n> Hi,\n>\n> [I sent this email 2 days ago prior my registration to the mailing list;\n> please forgive me if this is a duplicate]\n>\n> I would like to propose an extension to the Payment Protocol (bip-0070) to\n> address the case of recurring payments in Bitcoin -- new bip or\n> modification of bip-0070.\n>\n> There has been a lot of growth in the last few years in the 'subscription\n> economy' with many new companies embracing that model -- online video,\n> gaming, groceries, newspapers,... In parallel, Bitcoin is growing into a\n> mainstream currency (hence bip-0070), and so the next logical step would be\n> to define a protocol to address that need.\n>\n> We have been working in the past few years on an open-source billing\n> platform (http://kill-bill.org/), and recently came with a prototype to\n> do recurring billing in Bitcoin (see\n> http://thekillbillstory.wordpress.com/2014/01/20/bitcoin-plugin/ and\n> http://thekillbillstory.wordpress.com/2014/01/11/coinbase-integration-experiment/\n> ).\n>\n>\n> The work flow would look similar to the one from bip-0070. There would\n> need to be some additions; the flow could be summarized as follow:\n>\n> 0. Click: 'Subscribe Now'\n> 1. Wallet would get  a RecurringPaymentRequestAuth which describes the\n> nature of the future recurring payments\n> 2. The Customer would get prompted from the wallet to authorize it.\n> 3. The wallet would then poll the Merchant server (startup time, and/or\n> well defined frequency) and potentially merchant would start issuing a\n> PaymentRequest); the role of the wallet is to ensure that PaymentRequest is\n> within the bounds of what was accepted by the customer-- amount,\n> frequency,.. If it is, then it would make the Payment the same way it works\n> for bip-0070\n>\n> Is that something that the community would be interested in? We could\n> provide more details about the protocol we have in mind (messages and\n> flow), and also provide an implementation with bitcoinj as a wallet and\n> Kill Bill as a merchant server.\n>\n> Le me know what you think.\n>\n> St\u00e9phane\n>\n>\n> ------------------------------------------------------------------------------\n> WatchGuard Dimension instantly turns raw network data into actionable\n> security intelligence. It gives you real-time visual feedback on key\n> security issues and trends.  Skip the complicated setup - simply import\n> a virtual appliance and go from zero to informed in seconds.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/de263dbf/attachment.html>"
            },
            {
                "author": "Stephane Brossier",
                "date": "2014-01-29T02:47:20",
                "message_text_only": "From what I have seen so far, there seems to be an agreement that this is a nice feature to add. We are pretty new to that community and so we don't know exactly what the process is, and in particular how we reach consensus via email. I am certainly open to follow 'the way' if there is one, but one solution would be to follow Mike's suggestion on providing a (prototype) implementation first and then defining/refining the BIP. Odinn also suggested a possible retribution for our time through crowd-sourcing which I am interested to pursue if that makes sense.\n\n\nWe have quite some experience on the subscription side of things and while we are growing our knowledge on the Bitcoin technology (and ecosystem at large) we would benefit from:\n* some feedbacks on the high level proposal\n* additional requirements we might have missed\n\nSo, below is a high level description of what we have in mind. If this sounds reasonable, we could start working on an implementation.\n\n\n \nI. Abstract\n---------------\n\nThis describes a protocol to enable recurring payments in bitcoins and can be seen as an extension of BIP-0070. The main goal here is to have the customer subscribe to a service of some kind (that is, agreeing on the terms of that subscription contract), and then have the wallet make recurring payments without any intervention from the customer as long as the payments match what the customer agreed on paying.\n\nAn example of such service would be an online streaming website, to which a user pays a fixed recurring monthly fee to access videos (a.k.a. resources). Note that there is also usage based billing: for example, the user may need to purchase additional access for premium videos (overage charges). This type of billing is more complicated and there are many variations to it used in the industry (pre-paid, \u2026). For the sake of discussion, we\u2019ll focus on fixed recurring payments only, but we will keep usage in mind to make sure the protocol will be able to support it as well.\n\n\nII. Motivation\n------------------\n\nSubscription based services have been growing in the past few years and so the intent it to make it possible for customers to pay in bitcoins. \n\nBitcoin\u2019s push model presents new advantages for the customer compared to traditional payment methods: the user has control over the subscription (for example, there is no need to call the merchant to explicitly cancel the credit card payments). It also opens the door to subscription management tools in wallets (e.g. Hive apps), which would give user an overview of what they are paying each month.\n\n\nIII. Flow of Operations\n----------------------------------------\n\n\nCreation of the subscription:\n- - - - - - - - - - - - - - - - - - - - - - \n\n1. The customer clicks 'subscribe' -> A message is sent to the merchant.\n2. The merchant sends back a message to the wallet with the details of the subscription such as the amount to be paid. In reality, there will be more information but for the purpose of the prototype implementation this is sufficient.\n3. The wallet prompts the customer for authorization.\n4. The customer authorizes (or denies) it.\n5. The wallet sends the confirmation to the merchant.\n6. The merchant confirms the subscription was created.\n\nOngoing payments:\n- - - - - - - - - - - - - - - -\n\nFrom that time on and since Bitcoin is a 'push' model, the wallet is responsible to poll the merchant for due payments associated with that subscription. Note that the merchant could specify hints to the wallet on when to poll (specific dates) or not during the registration of the subscription.\n\nNote that we can't simply have the wallet push X bitcoins every month: the user account on the merchant side may have gotten credits, invoice adjustments, etc. since the last invoice, so the amount to pay for a given billing period may be lower than the regular amount. It could even be zero if the user decides to make a one-time payment to the merchant directly using a different wallet. Hence, the wallet needs to get the latest invoice balance to make sure how much it should pay. This also opens the door for the support of overage charges.\n\n\nQuick note on the implementation on the merchant side: an entitlement system is a piece of logic on the merchant side which grants the user access to certain resources depending on the account status (unpaid invoices, etc.). This goes often hand in hand with a dunning system, which progressively restricts access as the user's account is more and more overdue. Since wallets can be offline for an extended period of time, payments may be missed and lead to an overdue state (e.g. extra fees, service degraded). It is the responsibility of the customer to ensure the wallet is up often enough for payments to happen.\n\n\nIn that recurring phase where the wallet polls the merchant, the wallet is responsible to check that payments match the subscription contract; that is, the amount, frequency of payments, \u2026 match what the customer agreed on. If so, the payment is made without asking for explicit approval from customer, and the flow is similar to BIP-0070: The message is sent to the merchant, and in parallel, a transaction is sent to the btcnet. The merchant sends an ACK to the wallet and of course checks the states of the transactions on the btcnet to mark that payment as successful.\n\nSubscription change (optional):\n- - - - - - - - - - - - - - - - - - - - - - - - \n\nOptionally we could implement a change in the ongoing subscription to address the upgrade/downgrade scenarios. Of course, we could also simply support a cancellation followed by a creation of a new subscription, but having that as a one atomic message is probably better. The steps are very similar to the initial registration.\n\n1. The customer clicks 'upgrade', 'downgrade', \u2026 -> A msg is sent to the merchant.\n2. The merchant sends back a msg to the wallet with the detail of the NEW subscription. \n3. The wallet prompts the customer for authorization.\n4. The customer authorizes (or denies) it.\n5. The wallet sends the confirmation to the merchant.\n6. The merchant confirms the change in the subscription.\n\nCancellation of the subscription:\n- - - - - - - - - - - - - - - - - - - - - - - - - \n\nThe cancellation is initiated from the customer:\n\n1. The customer clicks 'cancel' -> The wallet is informed that it  should not accept any new payment associated to that subscription.\n2. The wallet sends a message to the merchant to inform about the cancellation.\n3. The merchant confirms the subscription was cancelled.\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/d9cc39aa/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-31T18:13:42",
                "message_text_only": "That looks OK at a very high level. Things you probably want to think about:\n\n   - How to trigger it off the existing payment protocol (no new top level\n   messages or mime types or uri extensions please)\n   - Data structures to define the payment schedule\n   - Do you allow pre-submission of time locked transactions or not?\n\nI think as you prototype these things will become clearer.  You could try\nprototyping either in Bitcoin Core (C++) or bitcoinj (java, look at the\nPaymentSession class).\n\n\n\nOn Wed, Jan 29, 2014 at 3:47 AM, Stephane Brossier\n<stephane at kill-bill.org>wrote:\n\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> *From what I have seen so far, there seems to be an agreement that this is\n> a nice feature to add. We are pretty new to that community and so we don't\n> know exactly what the process is, and in particular how we reach consensus\n> via email. I am certainly open to follow 'the way' if there is one, but one\n> solution would be to follow Mike's suggestion on providing a (prototype)\n> implementation first and then defining/refining the BIP. Odinn also\n> suggested a possible retribution for our time through crowd-sourcing which\n> I am interested to pursue if that makes sense.We have quite some experience\n> on the subscription side of things and while we are growing our knowledge\n> on the Bitcoin technology (and ecosystem at large) we would benefit from:*\n> some feedbacks on the high level proposal* additional requirements we might\n> have missedSo, below is a high level description of what we have in mind.\n> If this sounds reasonable, we could start working on an implementation. I.\n> Abstract---------------This describes a protocol to enable recurring\n> payments in bitcoins and can be seen as an extension of BIP-0070. The main\n> goal here is to have the customer subscribe to a service of some kind (that\n> is, agreeing on the terms of that subscription contract), and then have the\n> wallet make recurring payments without any intervention from the customer\n> as long as the payments match what the customer agreed on paying.An example\n> of such service would be an online streaming website, to which a user pays\n> a fixed recurring monthly fee to access videos (a.k.a. resources). Note\n> that there is also usage based billing: for example, the user may need to\n> purchase additional access for premium videos (overage charges). This type\n> of billing is more complicated and there are many variations to it used in\n> the industry (pre-paid, \u2026). For the sake of discussion, we\u2019ll focus on\n> fixed recurring payments only, but we will keep usage in mind to make sure\n> the protocol will be able to support it as well.II.\n> Motivation------------------Subscription based services have been growing\n> in the past few years and so the intent it to make it possible for\n> customers to pay in bitcoins. Bitcoin\u2019s push model presents new advantages\n> for the customer compared to traditional payment methods: the user has\n> control over the subscription (for example, there is no need to call the\n> merchant to explicitly cancel the credit card payments). It also opens the\n> door to subscription management tools in wallets (e.g. Hive apps), which\n> would give user an overview of what they are paying each month.III. Flow of\n> Operations----------------------------------------*\n>\n>\n>\n>\n> *Creation of the subscription:- - - - - - - - - - - - - - - - - - - - - -\n> 1. The customer clicks 'subscribe' -> A message is sent to the merchant.2.\n> The merchant sends back a message to the wallet with the details of the\n> subscription such as the amount to be paid. In reality, there will be more\n> information but for the purpose of the prototype implementation this is\n> sufficient.3. The wallet prompts the customer for authorization.4. The\n> customer authorizes (or denies) it.5. The wallet sends the confirmation to\n> the merchant.6. The merchant confirms the subscription was created.Ongoing\n> payments:*\n>\n> *- - - - - - - - - - - - - - - -*\n>\n>\n>\n>\n>\n>\n> *From that time on and since Bitcoin is a 'push' model, the wallet is\n> responsible to poll the merchant for due payments associated with that\n> subscription. Note that the merchant could specify hints to the wallet on\n> when to poll (specific dates) or not during the registration of the\n> subscription.Note that we can't simply have the wallet push X bitcoins\n> every month: the user account on the merchant side may have gotten credits,\n> invoice adjustments, etc. since the last invoice, so the amount to pay for\n> a given billing period may be lower than the regular amount. It could even\n> be zero if the user decides to make a one-time payment to the merchant\n> directly using a different wallet. Hence, the wallet needs to get the\n> latest invoice balance to make sure how much it should pay. This also opens\n> the door for the support of overage charges.Quick note on the\n> implementation on the merchant side: an entitlement system is a piece of\n> logic on the merchant side which grants the user access to certain\n> resources depending on the account status (unpaid invoices, etc.). This\n> goes often hand in hand with a dunning system, which progressively\n> restricts access as the user's account is more and more overdue. Since\n> wallets can be offline for an extended period of time, payments may be\n> missed and lead to an overdue state (e.g. extra fees, service degraded). It\n> is the responsibility of the customer to ensure the wallet is up often\n> enough for payments to happen.In that recurring phase where the wallet\n> polls the merchant, the wallet is responsible to check that payments match\n> the subscription contract; that is, the amount, frequency of payments, \u2026\n> match what the customer agreed on. If so, the payment is made without\n> asking for explicit approval from customer, and the flow is similar to\n> BIP-0070: The message is sent to the merchant, and in parallel, a\n> transaction is sent to the btcnet. The merchant sends an ACK to the wallet\n> and of course checks the states of the transactions on the btcnet to mark\n> that payment as successful.Subscription change (optional):*\n>\n> *- - - - - - - - - - - - - - - - - - - - - - - - *\n>\n>\n> *Optionally we could implement a change in the ongoing subscription to\n> address the upgrade/downgrade scenarios. Of course, we could also simply\n> support a cancellation followed by a creation of a new subscription, but\n> having that as a one atomic message is probably better. The steps are very\n> similar to the initial registration.1. The customer clicks 'upgrade',\n> 'downgrade', \u2026 -> A msg is sent to the merchant.2. The merchant sends back\n> a msg to the wallet with the detail of the NEW subscription. 3. The wallet\n> prompts the customer for authorization.4. The customer authorizes (or\n> denies) it.5. The wallet sends the confirmation to the merchant.6. The\n> merchant confirms the change in the subscription.Cancellation of the\n> subscription:*\n>\n> *- - - - - - - - - - - - - - - - - - - - - - - - - *\n>\n>\n>\n> *The cancellation is initiated from the customer:1. The customer clicks\n> 'cancel' -> The wallet is informed that it  should not accept any new\n> payment associated to that subscription.2. The wallet sends a message to\n> the merchant to inform about the cancellation.3. The merchant confirms the\n> subscription was cancelled.*\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140131/9beb6bd1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Extension for BIP-0070 to support recurring payments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kevin Greene",
                "Jeff Garzik",
                "Odinn Cyberguerrilla",
                "Mike Hearn",
                "PikaPay",
                "Stephane Brossier"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 32681
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-development Digest, Vol 32, Issue 57",
        "thread_messages": [
            {
                "author": "Ryan Carboni",
                "date": "2014-01-29T04:01:28",
                "message_text_only": "This will easily create too much data in the block chain.\nI think it's probably better to trust online wallets to handle complex\nfinancial transactions such a debits or credits.\nIf Bitcoin achieves Visa-levels of popularity, that would mean one megabyte\nof transactions per second (even assuming script isn't used), or ~30\nterabytes per year. After a decade the Bitcoin blockchain can only be\nstored by Amazon or Google or the Web Archive, even assuming Kryder's Law\ncontinues.\nIf the Bitcoin blockchain instead becomes cheque clearinghouse style\ntransaction system, many problems involving blockchain growth become\nnegligible.\nSure, this is supposed to be a trustless system, but there's a reason why\neveryone relies on trust in the real world.\n\n\nOn Tue, Jan 28, 2014 at 7:13 PM, <\nbitcoin-development-request at lists.sourceforge.net> wrote:\n\n> Send Bitcoin-development mailing list submissions to\n>         bitcoin-development at lists.sourceforge.net\n>\n> To subscribe or unsubscribe via the World Wide Web, visit\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> or, via email, send a message with subject or body 'help' to\n>         bitcoin-development-request at lists.sourceforge.net\n>\n> You can reach the person managing the list at\n>         bitcoin-development-owner at lists.sourceforge.net\n>\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of Bitcoin-development digest...\"\n>\n>\n> Today's Topics:\n>\n>    1. Re: BIP70: PaymentACK semantics (Peter Todd)\n>    2. Re: Extension for BIP-0070 to support     recurring payments\n>       (Stephane Brossier)\n>\n>\n> ----------------------------------------------------------------------\n>\n> Message: 1\n> Date: Tue, 28 Jan 2014 16:12:18 -0500\n> From: Peter Todd <pete at petertodd.org>\n> Subject: Re: [Bitcoin-development] BIP70: PaymentACK semantics\n> To: Mike Hearn <mike at plan99.net>\n> Cc: Andreas Schildbach <andreas at schildbach.de>, Bitcoin Dev\n>         <bitcoin-development at lists.sourceforge.net>\n> Message-ID: <20140128211218.GE22059 at savin>\n> Content-Type: text/plain; charset=\"us-ascii\"\n>\n> On Tue, Jan 28, 2014 at 06:33:28PM +0100, Mike Hearn wrote:\n> > In practice this should only be an issue if a payment is submitted and\n> > fails, which should be rare. Barring internal server errors and screwups\n> on\n> > the merchants side, the only reasons for a rejection at submit time would\n> > be the imperfect fungibility of bitcoins, e.g. you try and pay with a\n> huge\n> > dust tx or one that's invalid/too low fee/etc.\n> >\n> > So I think we have a bit of time to figure this out. But yes - once you\n> > broadcast, you probably accept that there might be a more painful path to\n> > resolve issues if something goes wrong, I guess. Right now BitPay has a\n> > support system where you can file a ticket if you pay the bitcoins and\n> they\n> > don't recognise it or the tx never confirms or whatever. It's grotty\n> manual\n> > work but they do it. Not broadcasting unless you \"have\" to seems like an\n> > optimisation that can reduce pain without much additional complexity.\n>\n> That's the reason you use a model where things happen atomicly: the\n> funds either can or can't be transferred, so if the merchant screws up\n> due to a server failure at worst the wallet can always send the\n> original, signed, payment request and transaction details proving to the\n> merchant that they agreed. Since the asked for txouts exist in the\n> blockchain they must either refund the money, or ship the goods.\n>\n> Wallet software can handle that kind of worst-case failure by\n> automatically sending the original payment request back to the merchant.\n> At worst all customer support has to do is tell the customer \"Sorry\n> about that; we didn't get your payment. Please start your wallet up and\n> hit the 'resend transaction' button in your wallet and we'll clear that\n> right up.\"\n>\n> Keep in mind that we're probably going to see fraudsters figuring out\n> ways to make payment servers fail. This means conversely that a customer\n> calling up a merchant and saying \"Hey! Something didn work but the\n> wallet says I paid!\" is going to be treated more suspiciously. By using\n> atomic protocols the issue of did or didn't they pay becomes much more\n> black and white, and failure resistant. That's exactly what we keep\n> saying Bitcoin offers that PayPal doesn't.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000085c725a905444d271c56fdee4e4ec7f27bdb2e777c872925\n> -------------- next part --------------\n> A non-text attachment was scrubbed...\n> Name: not available\n> Type: application/pgp-signature\n> Size: 685 bytes\n> Desc: Digital signature\n>\n> ------------------------------\n>\n> Message: 2\n> Date: Tue, 28 Jan 2014 18:47:20 -0800\n> From: Stephane Brossier <stephane at kill-bill.org>\n> Subject: Re: [Bitcoin-development] Extension for BIP-0070 to support\n>         recurring payments\n> To: \"bitcoin-development at lists.sourceforge.net\"\n>         <bitcoin-development at lists.sourceforge.net>\n> Cc: Pierre-Alexandre Meyer <pierre at kill-bill.org>, PikaPay\n>         <hello at PikaPay.com>\n> Message-ID: <D6BCC0C4-EF22-4DE8-868E-825D19C387E3 at kill-bill.org>\n> Content-Type: text/plain; charset=\"windows-1252\"\n>\n> >From what I have seen so far, there seems to be an agreement that this is\n> a nice feature to add. We are pretty new to that community and so we don't\n> know exactly what the process is, and in particular how we reach consensus\n> via email. I am certainly open to follow 'the way' if there is one, but one\n> solution would be to follow Mike's suggestion on providing a (prototype)\n> implementation first and then defining/refining the BIP. Odinn also\n> suggested a possible retribution for our time through crowd-sourcing which\n> I am interested to pursue if that makes sense.\n>\n>\n> We have quite some experience on the subscription side of things and while\n> we are growing our knowledge on the Bitcoin technology (and ecosystem at\n> large) we would benefit from:\n> * some feedbacks on the high level proposal\n> * additional requirements we might have missed\n>\n> So, below is a high level description of what we have in mind. If this\n> sounds reasonable, we could start working on an implementation.\n>\n>\n>\n> I. Abstract\n> ---------------\n>\n> This describes a protocol to enable recurring payments in bitcoins and can\n> be seen as an extension of BIP-0070. The main goal here is to have the\n> customer subscribe to a service of some kind (that is, agreeing on the\n> terms of that subscription contract), and then have the wallet make\n> recurring payments without any intervention from the customer as long as\n> the payments match what the customer agreed on paying.\n>\n> An example of such service would be an online streaming website, to which\n> a user pays a fixed recurring monthly fee to access videos (a.k.a.\n> resources). Note that there is also usage based billing: for example, the\n> user may need to purchase additional access for premium videos (overage\n> charges). This type of billing is more complicated and there are many\n> variations to it used in the industry (pre-paid, ?). For the sake of\n> discussion, we?ll focus on fixed recurring payments only, but we will keep\n> usage in mind to make sure the protocol will be able to support it as well.\n>\n>\n> II. Motivation\n> ------------------\n>\n> Subscription based services have been growing in the past few years and so\n> the intent it to make it possible for customers to pay in bitcoins.\n>\n> Bitcoin?s push model presents new advantages for the customer compared to\n> traditional payment methods: the user has control over the subscription\n> (for example, there is no need to call the merchant to explicitly cancel\n> the credit card payments). It also opens the door to subscription\n> management tools in wallets (e.g. Hive apps), which would give user an\n> overview of what they are paying each month.\n>\n>\n> III. Flow of Operations\n> ----------------------------------------\n>\n>\n> Creation of the subscription:\n> - - - - - - - - - - - - - - - - - - - - - -\n>\n> 1. The customer clicks 'subscribe' -> A message is sent to the merchant.\n> 2. The merchant sends back a message to the wallet with the details of the\n> subscription such as the amount to be paid. In reality, there will be more\n> information but for the purpose of the prototype implementation this is\n> sufficient.\n> 3. The wallet prompts the customer for authorization.\n> 4. The customer authorizes (or denies) it.\n> 5. The wallet sends the confirmation to the merchant.\n> 6. The merchant confirms the subscription was created.\n>\n> Ongoing payments:\n> - - - - - - - - - - - - - - - -\n>\n> >From that time on and since Bitcoin is a 'push' model, the wallet is\n> responsible to poll the merchant for due payments associated with that\n> subscription. Note that the merchant could specify hints to the wallet on\n> when to poll (specific dates) or not during the registration of the\n> subscription.\n>\n> Note that we can't simply have the wallet push X bitcoins every month: the\n> user account on the merchant side may have gotten credits, invoice\n> adjustments, etc. since the last invoice, so the amount to pay for a given\n> billing period may be lower than the regular amount. It could even be zero\n> if the user decides to make a one-time payment to the merchant directly\n> using a different wallet. Hence, the wallet needs to get the latest invoice\n> balance to make sure how much it should pay. This also opens the door for\n> the support of overage charges.\n>\n>\n> Quick note on the implementation on the merchant side: an entitlement\n> system is a piece of logic on the merchant side which grants the user\n> access to certain resources depending on the account status (unpaid\n> invoices, etc.). This goes often hand in hand with a dunning system, which\n> progressively restricts access as the user's account is more and more\n> overdue. Since wallets can be offline for an extended period of time,\n> payments may be missed and lead to an overdue state (e.g. extra fees,\n> service degraded). It is the responsibility of the customer to ensure the\n> wallet is up often enough for payments to happen.\n>\n>\n> In that recurring phase where the wallet polls the merchant, the wallet is\n> responsible to check that payments match the subscription contract; that\n> is, the amount, frequency of payments, ? match what the customer agreed on.\n> If so, the payment is made without asking for explicit approval from\n> customer, and the flow is similar to BIP-0070: The message is sent to the\n> merchant, and in parallel, a transaction is sent to the btcnet. The\n> merchant sends an ACK to the wallet and of course checks the states of the\n> transactions on the btcnet to mark that payment as successful.\n>\n> Subscription change (optional):\n> - - - - - - - - - - - - - - - - - - - - - - - -\n>\n> Optionally we could implement a change in the ongoing subscription to\n> address the upgrade/downgrade scenarios. Of course, we could also simply\n> support a cancellation followed by a creation of a new subscription, but\n> having that as a one atomic message is probably better. The steps are very\n> similar to the initial registration.\n>\n> 1. The customer clicks 'upgrade', 'downgrade', ? -> A msg is sent to the\n> merchant.\n> 2. The merchant sends back a msg to the wallet with the detail of the NEW\n> subscription.\n> 3. The wallet prompts the customer for authorization.\n> 4. The customer authorizes (or denies) it.\n> 5. The wallet sends the confirmation to the merchant.\n> 6. The merchant confirms the change in the subscription.\n>\n> Cancellation of the subscription:\n> - - - - - - - - - - - - - - - - - - - - - - - - -\n>\n> The cancellation is initiated from the customer:\n>\n> 1. The customer clicks 'cancel' -> The wallet is informed that it  should\n> not accept any new payment associated to that subscription.\n> 2. The wallet sends a message to the merchant to inform about the\n> cancellation.\n> 3. The merchant confirms the subscription was cancelled.\n>\n>\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n>\n> ------------------------------\n>\n>\n> ------------------------------------------------------------------------------\n> WatchGuard Dimension instantly turns raw network data into actionable\n> security intelligence. It gives you real-time visual feedback on key\n> security issues and trends.  Skip the complicated setup - simply import\n> a virtual appliance and go from zero to informed in seconds.\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=123612991&iu=/4140/ostg.clktrk\n>\n> ------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> End of Bitcoin-development Digest, Vol 32, Issue 57\n> ***************************************************\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140128/44a3671d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-development Digest, Vol 32, Issue 57",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Ryan Carboni"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 13102
        }
    },
    {
        "title": "[Bitcoin-development] BIP70 message delivery reliability",
        "thread_messages": [
            {
                "author": "Chuck",
                "date": "2014-01-30T05:47:51",
                "message_text_only": "I spoke briefly with Peter (sipa). He recommend I forward this post to \nthe mailing list for further discussion.\n\nMy apologies if this has been discussed before, but I was curious about \nsome things re BIP70 message delivery.  In particular, I don't clearly \nsee the value of the PaymentACK message.  Allow me to explain...\n\nThe current BIP70 workflow designates PaymentACK as the final message in \na payment exchange. However, it doesn't appear that any mention is made \nof what happens if that delivery fails. I assume that re-delivery is \nleft as a detail to the implementation, actually.\n\nFor sake of argument, let's assume that PaymentACK is never delivered \neither because of a network outage or a malicious merchant or \nincompatible software between wallets or a bug.  I ask myself: what \nwould be necessary for sufficient proof of payment, say, to an arbiter?  \nI presume the receipt R=(PaymentRequest,[transactions]) would suffice.  \nAm I correct there?\n\nBut if the PaymentRequest and broadcasted transactions are enough to \nprove payment, what's the point of the Payment message? The merchant \nnever has to verify the Payment message, possibly maliciously ignoring \nit.  In the well-behaved case, I presume the point is to help the \nmerchant associate some arbitrary data with the purchase as well as \nprovide a refunding address for the customer.  If that's the case, \ncouldn't this protocol be slightly improved like so:\n\nRequired steps:\n1. Customer clicks \"pay now\"\n2. Merchant sends PaymentRequest/PaymentDetails, which should be signed\n3. Customer builds a set of transactions and sends a new \nPaymentApprovalRequest message which includes a refund address and the \nunsigned transactions and their associated fully-signed transaction \nhash, the whole message signed with the private key of the refund address.\n4. Merchant responds with PaymentApproved message, signing the \nPaymentApprovalRequest message with the same key from step 2.\n\nOptional steps:\n5. The customer can send a Payment message, which is only a set of \nsigned transactions.\n6. The merchant can respond with a PaymentACK message.\n\nIn Step 4, the merchant is acknowledging that if the transactions \nprovided PaymentApprovalRequest are broadcast, then payment is complete \nand no other steps are required. Steps 5 and 6 aren't required but are \nconsidered considerate:)\n\nAfter step 4, all the merchant needs is to do is watch for the \ntransactions that were listed in PaymentApprovalRequest.  The \n(PaymentApproved,[signed transactions]) pair is the customer's proof of \npayment and this proof of payment includes a refund address that the \nmerchant has agreed to prior to payment, instead of after.  Step 3 & 4 \nalso allow the merchant to verify transactions, providing an extra layer \nof redundancy.  The merchant will also be able to ack on fees, time lock \n(time sensitive purchases?), sequence numbers, etc.\n\nIn Step 3, it's critical the customer sign the message with the private \nkey of the refund address, so that the merchant can be confident the \nrefund address is correct.\n\nIn each step along the way until step 5, if a message delivery fails \nnobody is harmed because the purchase is incomplete.\n\nThoughts?\n\nChuck"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-30T10:49:32",
                "message_text_only": "Hi Chuck,\n\nBoth Bitcoin Core and bitcoinj are about to ship with the protocol as-is,\nso any changes from this point on have to be backwards compatible.\n\nOn Thu, Jan 30, 2014 at 6:47 AM, Chuck <chuck+bitcoindev at borboggle.com>wrote:\n\n> I presume the receipt R=(PaymentRequest,[transactions]) would suffice.\n>\n\nThat's all you need to prove payment, yes.\n\n\n> In the well-behaved case, I presume the point is to help the\n> merchant associate some arbitrary data with the purchase as well as\n> provide a refunding address for the customer.\n\n\nThat's right (+memo). And to provide an additional hook for future\nfeatures, like recurring billing, ECDH key agreements etc.\n\n\n> In Step 3, it's critical the customer sign the message with the private\n> key of the refund address, so that the merchant can be confident the\n> refund address is correct.\n>\n\nRefund addresses as specced currently are optional. For instance bitcoinj\ncurrently doesn't use them and won't until HD wallets support is done.\n\nLet's get some practical experience with what we've got so far. We can\nevolve PaymentRequest/Payment/PaymentACK in the right direction with\nbackwards compatible upgrades, I am hoping.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/c3bc08b3/attachment.html>"
            },
            {
                "author": "Chuck",
                "date": "2014-01-30T11:15:10",
                "message_text_only": "Hi Mike.  Thanks for replying.\n\nOn 1/30/2014 5:49 PM, Mike Hearn wrote:\n> Both Bitcoin Core and bitcoinj are about to ship with the protocol \n> as-is, so any changes from this point on have to be backwards compatible.\nThen I think it's critically important to talk about failure situations \nnow, rather than trying to patch on solutions later; it's going to be \nvery hard to wedge/\"hack\" in fixes for potential problems when they \ncould be addressed now with minor changes.\n> Let's get some practical experience with what we've got so far. We can \n> evolve PaymentRequest/Payment/PaymentACK in the right direction with \n> backwards compatible upgrades, I am hoping.\nI think what I'm trying to discuss or find out here is whether the \ncurrent PP description is defunct or incomplete in some manner, thus \nmaking any experience we gain from the current implementation moot.\n\nIt seems the largest hole in the implementation is delivery of the \nPayment message, but I'm happy to accept that maybe I'm just missing \nsomething.  A malicious merchant could claim he never received the \nPayment message, or a faulty network connection could cause the message \nto never be delivered. In arbitration the merchant could argue the \ntransactions seen on the network were insufficient.\n\nTo me, this could be a problem.\n\nCheers,\n\nChuck"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-30T11:31:03",
                "message_text_only": "On Thu, Jan 30, 2014 at 12:15 PM, Chuck <chuck+bitcoindev at borboggle.com>wrote:\n\n> In arbitration the merchant could argue the transactions seen on the\n> network were insufficient.\n>\n\nThe arbitrator would presumably have some rules about what is or isn't an\nacceptable form of payment.\n\nHTTP has response codes for submission of the Payment message. We could add\nsigning to PaymentACK and other things in future, if that turns out to be\ninsufficient in practice.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/5db41388/attachment.html>"
            },
            {
                "author": "Chuck",
                "date": "2014-01-30T11:42:56",
                "message_text_only": "On 1/30/2014 6:31 PM, Mike Hearn wrote:\n> The arbitrator would presumably have some rules about what is or isn't \n> an acceptable form of payment.\nDo you think this puts unnecessary trust into a third party?  If the \nmerchant instead signed and agreed to the unsigned transactions before \nthey were broadcast (as in my OP), these arbitration concerns disappear.\n\n> HTTP has response codes for submission of the Payment message. We \n> could add signing to PaymentACK and other things in future, if that \n> turns out to be insufficient in practice.\nHTTP isn't the only message delivery mechanism.  Merchants can also lie: \nreply with 200 OK and an empty body.  Or, reply with 404 not found and \nbroadcast transactions anyway.\n\nCheers,\n\nChuck"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-01-30T11:46:30",
                "message_text_only": "On Thu, Jan 30, 2014 at 12:15 PM, Chuck <chuck+bitcoindev at borboggle.com> wrote:\n> Hi Mike.  Thanks for replying.\n>\n> On 1/30/2014 5:49 PM, Mike Hearn wrote:\n>> Both Bitcoin Core and bitcoinj are about to ship with the protocol\n>> as-is, so any changes from this point on have to be backwards compatible.\n> Then I think it's critically important to talk about failure situations\n> now, rather than trying to patch on solutions later; it's going to be\n> very hard to wedge/\"hack\" in fixes for potential problems when they\n> could be addressed now with minor changes.\n>> Let's get some practical experience with what we've got so far. We can\n>> evolve PaymentRequest/Payment/PaymentACK in the right direction with\n>> backwards compatible upgrades, I am hoping.\n> I think what I'm trying to discuss or find out here is whether the\n> current PP description is defunct or incomplete in some manner, thus\n> making any experience we gain from the current implementation moot.\n>\n> It seems the largest hole in the implementation is delivery of the\n> Payment message, but I'm happy to accept that maybe I'm just missing\n> something.  A malicious merchant could claim he never received the\n> Payment message, or a faulty network connection could cause the message\n> to never be delivered. In arbitration the merchant could argue the\n> transactions seen on the network were insufficient.\n\nYou don't even have to assume malicious intent. A payment message\ncould just fail to arrive because the server is unreachable. As the\nspecification currently doesn't even suggest retrying, there is no way\nthe merchant can rely at all on the memo and refund address being\ndelivered, which makes them in my opinion useless.\n\nYour proposal makes the whole protocol more atomic, which may be a\nstep too far at this point (though I like the idea very much), but I\nreally think the specification should do everything possible to\nprevent transactions confirming without the payment message ever being\ndelivered (i.e., store them in the sender's client, retry when\nnecessary, exponential backoff, ...).\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-30T11:59:05",
                "message_text_only": "With the way it works in bitcoinj, the tx is only committed to the wallet\nif the server accepts the Payment message and ACKs it. So the tx would not\nbe retried if there's a failure submitting or some kind of internal server\nerror, and the UI would show that the payment failed. That seems\nstraightforward and how I'd expect things to work as a user.\n\n\nOn Thu, Jan 30, 2014 at 12:46 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Thu, Jan 30, 2014 at 12:15 PM, Chuck <chuck+bitcoindev at borboggle.com>\n> wrote:\n> > Hi Mike.  Thanks for replying.\n> >\n> > On 1/30/2014 5:49 PM, Mike Hearn wrote:\n> >> Both Bitcoin Core and bitcoinj are about to ship with the protocol\n> >> as-is, so any changes from this point on have to be backwards\n> compatible.\n> > Then I think it's critically important to talk about failure situations\n> > now, rather than trying to patch on solutions later; it's going to be\n> > very hard to wedge/\"hack\" in fixes for potential problems when they\n> > could be addressed now with minor changes.\n> >> Let's get some practical experience with what we've got so far. We can\n> >> evolve PaymentRequest/Payment/PaymentACK in the right direction with\n> >> backwards compatible upgrades, I am hoping.\n> > I think what I'm trying to discuss or find out here is whether the\n> > current PP description is defunct or incomplete in some manner, thus\n> > making any experience we gain from the current implementation moot.\n> >\n> > It seems the largest hole in the implementation is delivery of the\n> > Payment message, but I'm happy to accept that maybe I'm just missing\n> > something.  A malicious merchant could claim he never received the\n> > Payment message, or a faulty network connection could cause the message\n> > to never be delivered. In arbitration the merchant could argue the\n> > transactions seen on the network were insufficient.\n>\n> You don't even have to assume malicious intent. A payment message\n> could just fail to arrive because the server is unreachable. As the\n> specification currently doesn't even suggest retrying, there is no way\n> the merchant can rely at all on the memo and refund address being\n> delivered, which makes them in my opinion useless.\n>\n> Your proposal makes the whole protocol more atomic, which may be a\n> step too far at this point (though I like the idea very much), but I\n> really think the specification should do everything possible to\n> prevent transactions confirming without the payment message ever being\n> delivered (i.e., store them in the sender's client, retry when\n> necessary, exponential backoff, ...).\n>\n> --\n> Pieter\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/d3500aca/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-01-30T12:02:02",
                "message_text_only": "On Thu, Jan 30, 2014 at 12:59 PM, Mike Hearn <mike at plan99.net> wrote:\n> With the way it works in bitcoinj, the tx is only committed to the wallet if\n> the server accepts the Payment message and ACKs it. So the tx would not be\n> retried if there's a failure submitting or some kind of internal server\n> error, and the UI would show that the payment failed. That seems\n> straightforward and how I'd expect things to work as a user.\n\nThat's one right way to do it imho, but not what is suggested or\nrequired by the specification, and not what bitcoin core master\ncurrently implements.\n\n-- \nPieter"
            },
            {
                "author": "Chuck",
                "date": "2014-01-30T12:03:57",
                "message_text_only": "On 1/30/2014 7:02 PM, Pieter Wuille wrote:\n> On Thu, Jan 30, 2014 at 12:59 PM, Mike Hearn <mike at plan99.net> wrote:\n>> With the way it works in bitcoinj, the tx is only committed to the wallet if\n>> the server accepts the Payment message and ACKs it. So the tx would not be\n>> retried if there's a failure submitting or some kind of internal server\n>> error, and the UI would show that the payment failed. That seems\n>> straightforward and how I'd expect things to work as a user.\n> That's one right way to do it imho, but not what is suggested or\n> required by the specification, and not what bitcoin core master\n> currently implements.\n>\nIf you sent the Payment message and the server goes silent after \nreceiving it, you retry to delivery.  However, the merchant can \nbroadcast the transactions and force them into your wallet anyway. You \ncould, quite likely, pay and never get an ACK."
            },
            {
                "author": "Roy Badami",
                "date": "2014-01-30T12:20:16",
                "message_text_only": "On Thu, Jan 30, 2014 at 07:03:57PM +0700, Chuck wrote:\n> On 1/30/2014 7:02 PM, Pieter Wuille wrote:\n> > On Thu, Jan 30, 2014 at 12:59 PM, Mike Hearn <mike at plan99.net> wrote:\n> >> With the way it works in bitcoinj, the tx is only committed to the wallet if\n> >> the server accepts the Payment message and ACKs it. So the tx would not be\n> >> retried if there's a failure submitting or some kind of internal server\n> >> error, and the UI would show that the payment failed. That seems\n> >> straightforward and how I'd expect things to work as a user.\n> > That's one right way to do it imho, but not what is suggested or\n> > required by the specification, and not what bitcoin core master\n> > currently implements.\n> >\n> If you sent the Payment message and the server goes silent after \n> receiving it, you retry to delivery.  However, the merchant can \n> broadcast the transactions and force them into your wallet anyway. You \n> could, quite likely, pay and never get an ACK.\n\nI think in that case, you absolultely have to invalidate all the\ntransactions in the Payment message by broadcasting a send-to-self\ntransaction as soon as possible; until that point your wallet balance\nis indeterminate.  Otherwise what will happen if the merchant did in\nfact receive the Payment message, and then processes it (and\nbroadcasts the transaction) after some delay?\n\nThen what the user will see is: an apparently failed attempt to pay,\nleaving their wallet balance unchanged.  Then, perhaps many hours\nlater, their wallet balance will appear to spontaneously decrement.\n\nroy"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-01-30T12:38:10",
                "message_text_only": ">\n> If you sent the Payment message and the server goes silent after receiving\n> it, you retry to delivery.  However, the merchant can broadcast the\n> transactions and force them into your wallet anyway. You could, quite\n> likely, pay and never get an ACK.\n>\n\nNo retries. If there's a timeout the wallet will consider the payment not\nmade, and if the merchant broadcasts anyway, the wallet will see the\ntransactions and sync with them correctly. The ACK is not particularly\nimportant in the current design, so that's no big deal.\n\nIf we see this situation crop up routinely we can take measures to improve\nthings. I doubt we will.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140130/41050190/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP70 message delivery reliability",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Chuck",
                "Pieter Wuille",
                "Roy Badami"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 16002
        }
    }
]