[
    {
        "title": "[Bitcoin-development] secure assigned bitcoin address directory",
        "thread_messages": [
            {
                "author": "Chris D'Costa",
                "date": "2014-04-01T08:13:31",
                "message_text_only": "On 31 Mar 2014, at 20:57, Roy Badami wrote:\n\n> Is namecoin actively maintained these days?\n\nThat's a very good quest. It was one of the reasons why we ruled out namecoin, but not the only one.\n\nAlthough in principle it is a similar concept to namecoin + PGP, in practice at least for our device, that felt like a hammer to crack a nut, \"How could this operate if the device was carried to one of the non-3G countries i.e. with no direct internet access? How could we syncronise the chain in a low bandwidth environment, if at all? Could at least some of the chain be pre-loaded at the factory? What would the risks be if it was?\". \n\nThese are just a few of the practical considerations that we are addressing, and our feeling is that when we can get the proposed distributed ledger to work properly at \"the lowest common denominator\" level, then everything above is easier. \n\nOn one other point, I don't ever see the Bitcoin software using a second blockchain, like namecoin, in order just to provide safe communication of a non-face-to-face, person-to-person, pay-to address (far too many hyphens), but I do see some other standard emerging that provides the equivalent of BIP70 for this use case.  \n\nIn this context, when we posed these questions, \"Why do we have to provide a reward for a ledger of information? Why do we have to wait for confirmation when no money is at risk? What is the worst that can happen if your device key is discovered or replaced?\", it did not make sense to include all the incumbent coin stuff just to arrive at a distributed ledger for a set of ultimately disposable keys.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/b916cfaa/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-01T11:32:41",
                "message_text_only": "Re-reading this, even with the most recent message, is still isn't\nclear _precisely_ how your technology works, or why it is better than\nnamecoin.  User profiles (and distributed ledgers) need to reflect the\nlatest updates, and a stream of updates of over time is precisely what\nbitcoin technology secures.\n\nKeys expire or are compromised, and the public ledger needs to reflect\nthat.  There is a lot of computer science involved in making sure the\npublic ledger you see is not an outdated view.  A log-like stream of\nchanges is not the only way to do things, but other methods need less\nhand-wavy details (show the code) before they are well recognized as\nuseful.\n\n\n\nOn Mon, Mar 31, 2014 at 7:14 AM, Chris D'Costa <chris.dcosta at meek.io> wrote:\n> Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet.\n>\n> I have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, \"device keys\".\n>\n> These keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide \"advanced knowledge\" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.\n>\n> As I understand it the BlockChain uses \"time\" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.\n>\n> There is of course more to this, but I like to refer to the \"distributed ledger of device keys\" as the \"Web-of-trust re-imagined\" although that isn't strictly true.\n>\n> Ok there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.\n>\n> Regards\n>\n> Chris D'Costa\n>\n>\n>> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:\n>>\n>> Some users on bitcointalk[0] would like to have their vanity addresses\n>> available for others easily to find and verify the ownership over a kind\n>> of WoT. Right now they sign their own addresses and quote them in the\n>> forums.\n>> As I pointed out there already the centralized storage in the forums is\n>> not secury anyhow and signed messages could be swapped easily with the\n>> next hack of the forums.\n>>\n>> Is that use case taken care of in any plans already?\n>>\n>> I thought about abusing pgp keyservers but that would suit for single\n>> vanity addresses only.\n>> It seems webfinger could be part of a solution where servers of a\n>> business can tell and proof you if a specific address is owned by them.\n>>\n>> [0] https://bitcointalk.org/index.php?topic=502538\n>> [1] https://bitcointalk.org/index.php?topic=505095\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Chris D'Costa",
                "date": "2014-04-01T12:20:37",
                "message_text_only": "The code will be available as soon as we are ready, and apologies again for it not being a more meaningful conversation - I did say I hesitated about posting it ;)\n\nI think it is fair to say that we have not assumed anything about other technologies, without asking if they can answer all (not just some) of the questions I raised. I have yet to be convinced that anything existing meets those requirements, namecoin included, hence why we are looking at creating an alternative (non-coin by the way) but this alternative has some  of the important properties that the distributed ledger provides.\n\nTo answer the question about expiry, we're looking at something we'll call proof-of-life for the device keys. In a nutshell on of the pieces of information stored with the device public key will be a last heard from date - a date which is sent only by the device from time to time. Records that are expired are devices that have not been heard from for a given period (to be decided). As the device keys are not related to the Bitcoin keys it will be safe to expire a device key by default. An expired device would require reinitialisation, which would make a new device key set, a new proof of life date and then the Bitcoin keys (BIP32) can be restored. \n\n\n\nRegards\n\nChris D'Costa\n\nSent from my iPhone\n\n> On 1 Apr 2014, at 13:32, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \n> Re-reading this, even with the most recent message, is still isn't\n> clear _precisely_ how your technology works, or why it is better than\n> namecoin.  User profiles (and distributed ledgers) need to reflect the\n> latest updates, and a stream of updates of over time is precisely what\n> bitcoin technology secures.\n> \n> Keys expire or are compromised, and the public ledger needs to reflect\n> that.  There is a lot of computer science involved in making sure the\n> public ledger you see is not an outdated view.  A log-like stream of\n> changes is not the only way to do things, but other methods need less\n> hand-wavy details (show the code) before they are well recognized as\n> useful.\n> \n> \n> \n>> On Mon, Mar 31, 2014 at 7:14 AM, Chris D'Costa <chris.dcosta at meek.io> wrote:\n>> Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet.\n>> \n>> I have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, \"device keys\".\n>> \n>> These keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide \"advanced knowledge\" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.\n>> \n>> As I understand it the BlockChain uses \"time\" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.\n>> \n>> There is of course more to this, but I like to refer to the \"distributed ledger of device keys\" as the \"Web-of-trust re-imagined\" although that isn't strictly true.\n>> \n>> Ok there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.\n>> \n>> Regards\n>> \n>> Chris D'Costa\n>> \n>> \n>>> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:\n>>> \n>>> Some users on bitcointalk[0] would like to have their vanity addresses\n>>> available for others easily to find and verify the ownership over a kind\n>>> of WoT. Right now they sign their own addresses and quote them in the\n>>> forums.\n>>> As I pointed out there already the centralized storage in the forums is\n>>> not secury anyhow and signed messages could be swapped easily with the\n>>> next hack of the forums.\n>>> \n>>> Is that use case taken care of in any plans already?\n>>> \n>>> I thought about abusing pgp keyservers but that would suit for single\n>>> vanity addresses only.\n>>> It seems webfinger could be part of a solution where servers of a\n>>> business can tell and proof you if a specific address is owned by them.\n>>> \n>>> [0] https://bitcointalk.org/index.php?topic=502538\n>>> [1] https://bitcointalk.org/index.php?topic=505095\n>>> \n>>> ------------------------------------------------------------------------------\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Daryl Banttari",
                "date": "2014-04-01T18:16:26",
                "message_text_only": "I posted some code on Reddit a while back around adding a simple x509\ndigital signature to a Bitcoin address URL, since you could gain the\nbenefit of an x.509 authenticated Bitcoin address without having to do a\nfull BIP70 implementation.  It's not WoT, but x509, for all its flaws,\nworks very well in the real world almost all of the time.\n\nFor added authentication, one could always wrap the URL with a PGP\nsignature.\n\nAfter lurking on this list for a while, I assumed there's some reason this\nhasn't already been implemented, likely based in the general disgust around\nx509.\n\nAnyway, here's my idea (complete with working Java source):\n\nhttp://www.reddit.com/r/BitcoinSerious/comments/1sebj0/proposal_bitcoin_invoice_signatures/\n\nFWIW.\n\n--Daryl\n\n\n\nOn Tue, Apr 1, 2014 at 7:20 AM, Chris D'Costa <chris.dcosta at meek.io> wrote:\n\n> The code will be available as soon as we are ready, and apologies again\n> for it not being a more meaningful conversation - I did say I hesitated\n> about posting it ;)\n>\n> I think it is fair to say that we have not assumed anything about other\n> technologies, without asking if they can answer all (not just some) of the\n> questions I raised. I have yet to be convinced that anything existing meets\n> those requirements, namecoin included, hence why we are looking at creating\n> an alternative (non-coin by the way) but this alternative has some  of the\n> important properties that the distributed ledger provides.\n>\n> To answer the question about expiry, we're looking at something we'll call\n> proof-of-life for the device keys. In a nutshell on of the pieces of\n> information stored with the device public key will be a last heard from\n> date - a date which is sent only by the device from time to time. Records\n> that are expired are devices that have not been heard from for a given\n> period (to be decided). As the device keys are not related to the Bitcoin\n> keys it will be safe to expire a device key by default. An expired device\n> would require reinitialisation, which would make a new device key set, a\n> new proof of life date and then the Bitcoin keys (BIP32) can be restored.\n>\n>\n>\n> Regards\n>\n> Chris D'Costa\n>\n> Sent from my iPhone\n>\n> > On 1 Apr 2014, at 13:32, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> >\n> > Re-reading this, even with the most recent message, is still isn't\n> > clear _precisely_ how your technology works, or why it is better than\n> > namecoin.  User profiles (and distributed ledgers) need to reflect the\n> > latest updates, and a stream of updates of over time is precisely what\n> > bitcoin technology secures.\n> >\n> > Keys expire or are compromised, and the public ledger needs to reflect\n> > that.  There is a lot of computer science involved in making sure the\n> > public ledger you see is not an outdated view.  A log-like stream of\n> > changes is not the only way to do things, but other methods need less\n> > hand-wavy details (show the code) before they are well recognized as\n> > useful.\n> >\n> >\n> >\n> >> On Mon, Mar 31, 2014 at 7:14 AM, Chris D'Costa <chris.dcosta at meek.io>\n> wrote:\n> >> Security of transmission of person-to-person pay-to addresses is one of\n> the use cases that we are addressing on our hardware wallet.\n> >>\n> >> I have yet to finish the paper but in a nutshell it uses a\n> decentralised ledger of, what we refer to as, \"device keys\".\n> >>\n> >> These keys are not related in any way to the Bitcoin keys, (which is\n> why I'm hesitating about discussing it here) neither do they even attempt\n> to identify the human owner if the device. But they do have a specific use\n> case and that is to provide \"advanced knowledge\" of a publickey that can be\n> used for encrypting a message to an intended recipient, without the\n> requirement for a third-party CA, and more importantly without prior\n> dialogue. We think it is this that would allow you to communicate a pay-to\n> address to someone without seeing them in a secure way.\n> >>\n> >> As I understand it the BlockChain uses \"time\" bought through proof of\n> work to establish a version of the truth, we are using time in the reverse\n> sense : advanced knowledge of all pubkeys. Indeed all devices could easily\n> check their own record to identify problems on the ledger.\n> >>\n> >> There is of course more to this, but I like to refer to the\n> \"distributed ledger of device keys\" as the \"Web-of-trust re-imagined\"\n> although that isn't strictly true.\n> >>\n> >> Ok there you have it. The cat is out of the bag, feel free to give\n> feedback, I have to finish the paper, apologies if it is not a topic for\n> this list.\n> >>\n> >> Regards\n> >>\n> >> Chris D'Costa\n> >>\n> >>\n> >>> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:\n> >>>\n> >>> Some users on bitcointalk[0] would like to have their vanity addresses\n> >>> available for others easily to find and verify the ownership over a\n> kind\n> >>> of WoT. Right now they sign their own addresses and quote them in the\n> >>> forums.\n> >>> As I pointed out there already the centralized storage in the forums is\n> >>> not secury anyhow and signed messages could be swapped easily with the\n> >>> next hack of the forums.\n> >>>\n> >>> Is that use case taken care of in any plans already?\n> >>>\n> >>> I thought about abusing pgp keyservers but that would suit for single\n> >>> vanity addresses only.\n> >>> It seems webfinger could be part of a solution where servers of a\n> >>> business can tell and proof you if a specific address is owned by them.\n> >>>\n> >>> [0] https://bitcointalk.org/index.php?topic=502538\n> >>> [1] https://bitcointalk.org/index.php?topic=505095\n> >>>\n> >>>\n> ------------------------------------------------------------------------------\n> >>> _______________________________________________\n> >>> Bitcoin-development mailing list\n> >>> Bitcoin-development at lists.sourceforge.net\n> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> > --\n> > Jeff Garzik\n> > Bitcoin core developer and open source evangelist\n> > BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/8c70b333/attachment.html>"
            },
            {
                "author": "Chris D'Costa",
                "date": "2014-04-01T22:26:42",
                "message_text_only": "Hi Daryl\n\nI think the two issues with this are\n1) pay to addresses are not fixed - ie you can have a different address for each transaction (which is why BIP70 is necessary to allow per transaction addresses via https.)\n2) unless you are already aware of the  public key of the signature, you do not know if the signature is made by the person you think it is supposed to be from. See recent concern over fake key for Gavin Andresen. Ie a signature can always be verified with a valid public key, the question is was it the real person's key. That is what WoT tried to resolve with so-called \"signing parties\", nowadays keys posted to a public forum by a known user, but it's not a standard and not ideal.\n\n\n\nRegards\n\nChris D'Costa\n\n\nSent from my iPhone\n\n> On 1 Apr 2014, at 20:16, Daryl Banttari <dbanttari at gmail.com> wrote:\n> \n> I posted some code on Reddit a while back around adding a simple x509 digital signature to a Bitcoin address URL, since you could gain the benefit of an x.509 authenticated Bitcoin address without having to do a full BIP70 implementation.  It's not WoT, but x509, for all its flaws, works very well in the real world almost all of the time.\n> \n> For added authentication, one could always wrap the URL with a PGP signature.\n> \n> After lurking on this list for a while, I assumed there's some reason this hasn't already been implemented, likely based in the general disgust around x509.\n> \n> Anyway, here's my idea (complete with working Java source):\n> \n> http://www.reddit.com/r/BitcoinSerious/comments/1sebj0/proposal_bitcoin_invoice_signatures/\n> \n> FWIW.\n> \n> --Daryl\n> \n> \n> \n>> On Tue, Apr 1, 2014 at 7:20 AM, Chris D'Costa <chris.dcosta at meek.io> wrote:\n>> The code will be available as soon as we are ready, and apologies again for it not being a more meaningful conversation - I did say I hesitated about posting it ;)\n>> \n>> I think it is fair to say that we have not assumed anything about other technologies, without asking if they can answer all (not just some) of the questions I raised. I have yet to be convinced that anything existing meets those requirements, namecoin included, hence why we are looking at creating an alternative (non-coin by the way) but this alternative has some  of the important properties that the distributed ledger provides.\n>> \n>> To answer the question about expiry, we're looking at something we'll call proof-of-life for the device keys. In a nutshell on of the pieces of information stored with the device public key will be a last heard from date - a date which is sent only by the device from time to time. Records that are expired are devices that have not been heard from for a given period (to be decided). As the device keys are not related to the Bitcoin keys it will be safe to expire a device key by default. An expired device would require reinitialisation, which would make a new device key set, a new proof of life date and then the Bitcoin keys (BIP32) can be restored.\n>> \n>> \n>> \n>> Regards\n>> \n>> Chris D'Costa\n>> \n>> Sent from my iPhone\n>> \n>> > On 1 Apr 2014, at 13:32, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>> >\n>> > Re-reading this, even with the most recent message, is still isn't\n>> > clear _precisely_ how your technology works, or why it is better than\n>> > namecoin.  User profiles (and distributed ledgers) need to reflect the\n>> > latest updates, and a stream of updates of over time is precisely what\n>> > bitcoin technology secures.\n>> >\n>> > Keys expire or are compromised, and the public ledger needs to reflect\n>> > that.  There is a lot of computer science involved in making sure the\n>> > public ledger you see is not an outdated view.  A log-like stream of\n>> > changes is not the only way to do things, but other methods need less\n>> > hand-wavy details (show the code) before they are well recognized as\n>> > useful.\n>> >\n>> >\n>> >\n>> >> On Mon, Mar 31, 2014 at 7:14 AM, Chris D'Costa <chris.dcosta at meek.io> wrote:\n>> >> Security of transmission of person-to-person pay-to addresses is one of the use cases that we are addressing on our hardware wallet.\n>> >>\n>> >> I have yet to finish the paper but in a nutshell it uses a decentralised ledger of, what we refer to as, \"device keys\".\n>> >>\n>> >> These keys are not related in any way to the Bitcoin keys, (which is why I'm hesitating about discussing it here) neither do they even attempt to identify the human owner if the device. But they do have a specific use case and that is to provide \"advanced knowledge\" of a publickey that can be used for encrypting a message to an intended recipient, without the requirement for a third-party CA, and more importantly without prior dialogue. We think it is this that would allow you to communicate a pay-to address to someone without seeing them in a secure way.\n>> >>\n>> >> As I understand it the BlockChain uses \"time\" bought through proof of work to establish a version of the truth, we are using time in the reverse sense : advanced knowledge of all pubkeys. Indeed all devices could easily check their own record to identify problems on the ledger.\n>> >>\n>> >> There is of course more to this, but I like to refer to the \"distributed ledger of device keys\" as the \"Web-of-trust re-imagined\" although that isn't strictly true.\n>> >>\n>> >> Ok there you have it. The cat is out of the bag, feel free to give feedback, I have to finish the paper, apologies if it is not a topic for this list.\n>> >>\n>> >> Regards\n>> >>\n>> >> Chris D'Costa\n>> >>\n>> >>\n>> >>> On 31 Mar 2014, at 12:21, vv01f <vv01f at riseup.net> wrote:\n>> >>>\n>> >>> Some users on bitcointalk[0] would like to have their vanity addresses\n>> >>> available for others easily to find and verify the ownership over a kind\n>> >>> of WoT. Right now they sign their own addresses and quote them in the\n>> >>> forums.\n>> >>> As I pointed out there already the centralized storage in the forums is\n>> >>> not secury anyhow and signed messages could be swapped easily with the\n>> >>> next hack of the forums.\n>> >>>\n>> >>> Is that use case taken care of in any plans already?\n>> >>>\n>> >>> I thought about abusing pgp keyservers but that would suit for single\n>> >>> vanity addresses only.\n>> >>> It seems webfinger could be part of a solution where servers of a\n>> >>> business can tell and proof you if a specific address is owned by them.\n>> >>>\n>> >>> [0] https://bitcointalk.org/index.php?topic=502538\n>> >>> [1] https://bitcointalk.org/index.php?topic=505095\n>> >>>\n>> >>> ------------------------------------------------------------------------------\n>> >>> _______________________________________________\n>> >>> Bitcoin-development mailing list\n>> >>> Bitcoin-development at lists.sourceforge.net\n>> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >> ------------------------------------------------------------------------------\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>> >\n>> >\n>> > --\n>> > Jeff Garzik\n>> > Bitcoin core developer and open source evangelist\n>> > BitPay, Inc.      https://bitpay.com/\n>> \n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140402/eb17bb32/attachment.html>"
            },
            {
                "author": "Daryl Banttari",
                "date": "2014-04-02T00:59:34",
                "message_text_only": "Chris,\n\nThank you for taking the time to look at my proposal.\n\n1) pay to addresses are not fixed - ie you can have a different address for\n> each transaction (which is why BIP70 is necessary to allow per transaction\n> addresses via https.)\n>\n\nThis is certainly true for a \"published\" address; however a new address\n(and URL) can be generated for each one-off peer-to-peer transaction.\n However, I'd expect that most of the time this use case will be handed by\nBIP70.  Still, this could allow someone to implement a authenticated,\nnon-repudiable payment request without having to go through the hassle of a\nfull BIP70 implementation.\n\n\n> 2) unless you are already aware of the  public key of the signature, you\n> do not know if the signature is made by the person you think it is supposed\n> to be from. See recent concern over fake key for Gavin Andresen. Ie a\n> signature can always be verified with a valid public key, the question is\n> was it the real person's key. That is what WoT tried to resolve with\n> so-called \"signing parties\", nowadays keys posted to a public forum by a\n> known user, but it's not a standard and not ideal.\n>\n\nMy proposal leverages the existing SSL key system (yes, PKI), so there is a\nreasonable expectation that if the signature verifies, it came from the\nparty indicated on the cert.  While SSL (and the PKI system underpinning\nit) have its faults, the example you highlighted was specifically a problem\nwith WoT, not PKI.  Can a compromised web server cause payments to be made\nto the wrong party?  Of course-- but that's already true.  And that's not\nsomething BIP70 solves (or attempts to solve) either.\n\n(To explain [better than I could] why I feel PKI is a pragmatic solution, I\ndefer to Mike Hearn 's article:\nhttps://medium.com/bitcoin-security-functionality/b64cf5912aa7)\n\n--Daryl\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/2764dfac/attachment.html>"
            },
            {
                "author": "Chris D'Costa",
                "date": "2014-04-02T05:16:39",
                "message_text_only": "Hi Daryl\n> My proposal leverages the existing SSL key system\n\nOk I thought you were suggesting wrapping the URL in an additional PGP  signature."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-02T12:01:51",
                "message_text_only": "Hi Daryl,\n\nI think the reason nobody has done that is that BIP70 isn't really that\nmuch work. It's basically just certs inside a protobuf, with a bit of extra\ndata. I'm not sure yet another way to do the same thing is worth much.\n\n\nOn Wed, Apr 2, 2014 at 2:59 AM, Daryl Banttari <dbanttari at gmail.com> wrote:\n\n> Chris,\n>\n> Thank you for taking the time to look at my proposal.\n>\n> 1) pay to addresses are not fixed - ie you can have a different address\n>> for each transaction (which is why BIP70 is necessary to allow per\n>> transaction addresses via https.)\n>>\n>\n> This is certainly true for a \"published\" address; however a new address\n> (and URL) can be generated for each one-off peer-to-peer transaction.\n>  However, I'd expect that most of the time this use case will be handed by\n> BIP70.  Still, this could allow someone to implement a authenticated,\n> non-repudiable payment request without having to go through the hassle of a\n> full BIP70 implementation.\n>\n>\n>> 2) unless you are already aware of the  public key of the signature, you\n>> do not know if the signature is made by the person you think it is supposed\n>> to be from. See recent concern over fake key for Gavin Andresen. Ie a\n>> signature can always be verified with a valid public key, the question is\n>> was it the real person's key. That is what WoT tried to resolve with\n>> so-called \"signing parties\", nowadays keys posted to a public forum by a\n>> known user, but it's not a standard and not ideal.\n>>\n>\n> My proposal leverages the existing SSL key system (yes, PKI), so there is\n> a reasonable expectation that if the signature verifies, it came from the\n> party indicated on the cert.  While SSL (and the PKI system underpinning\n> it) have its faults, the example you highlighted was specifically a problem\n> with WoT, not PKI.  Can a compromised web server cause payments to be made\n> to the wrong party?  Of course-- but that's already true.  And that's not\n> something BIP70 solves (or attempts to solve) either.\n>\n> (To explain [better than I could] why I feel PKI is a pragmatic solution,\n> I defer to Mike Hearn 's article:\n> https://medium.com/bitcoin-security-functionality/b64cf5912aa7)\n>\n> --Daryl\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140402/544e3387/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "secure assigned bitcoin address directory",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Daryl Banttari",
                "Chris D'Costa"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 30392
        }
    },
    {
        "title": "[Bitcoin-development] Finite monetary supply for Bitcoin",
        "thread_messages": [
            {
                "author": "Pieter Wuille",
                "date": "2014-04-01T19:00:07",
                "message_text_only": "Hi all,\n\nI understand this is a controversial proposal, but bear with me please.\n\nI believe we cannot accept the current subsidy schedule anymore, so I\nwrote a small draft BIP with a proposal to turn Bitcoin into a\nlimited-supply currency. Dogecoin has already shown how easy such\nchanges are, so I consider this a worthwhile idea to be explored.\n\nThe text can be found here: https://gist.github.com/sipa/9920696\n\nPlease comment!\n\nThanks,\n\n-- \nPieter"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-01T19:04:31",
                "message_text_only": "The creation date in your BIP header has the wrong format. It should be 01-04-2014, per BIP 1.\n\n:-)\n\n\nOn Tuesday, 1 April 2014, at 9:00 pm, Pieter Wuille wrote:\n> Hi all,\n> \n> I understand this is a controversial proposal, but bear with me please.\n> \n> I believe we cannot accept the current subsidy schedule anymore, so I\n> wrote a small draft BIP with a proposal to turn Bitcoin into a\n> limited-supply currency. Dogecoin has already shown how easy such\n> changes are, so I consider this a worthwhile idea to be explored.\n> \n> The text can be found here: https://gist.github.com/sipa/9920696\n> \n> Please comment!\n> \n> Thanks,\n> \n> -- \n> Pieter\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-01T20:59:06",
                "message_text_only": "On Tue, Apr 1, 2014 at 9:04 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> The creation date in your BIP header has the wrong format. It should be 01-04-2014, per BIP 1.\n\nThanks - fixed!\n\n-- \nPieter"
            },
            {
                "author": "kjj",
                "date": "2014-04-04T03:41:36",
                "message_text_only": "Matt Whitlock wrote:\n> The creation date in your BIP header has the wrong format. It should be 01-04-2014, per BIP 1.\n>\nAt first, I thought this was a second April Fool's joke, but then I \nlooked and saw that all of the BIPs really do use this format.  As far \nas I can tell, we are using this insane format because RFC 822 predates \nISO 8601 by half a decade.\n\nSince we don't have half a gajillion mail servers to patch, we could, if \nwe desired, adopt a sensible date format here.  The cost to the \ncommunity would be minimal, with probably not more than a half dozen \npeople needing to update scripts.  It could even be as simple as one guy \nrunning sed s/parseabomination/parsedate/g"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-04T07:01:48",
                "message_text_only": "On Fri, Apr 4, 2014 at 5:41 AM, kjj <bitcoin-devel at jerviss.org> wrote:\n\n> Matt Whitlock wrote:\n> > The creation date in your BIP header has the wrong format. It should be\n> 01-04-2014, per BIP 1.\n> >\n> At first, I thought this was a second April Fool's joke, but then I\n> looked and saw that all of the BIPs really do use this format.  As far\n> as I can tell, we are using this insane format because RFC 822 predates\n> ISO 8601 by half a decade.\n>\n> Since we don't have half a gajillion mail servers to patch, we could, if\n> we desired, adopt a sensible date format here.  The cost to the\n> community would be minimal, with probably not more than a half dozen\n> people needing to update scripts.  It could even be as simple as one guy\n> running sed s/parseabomination/parsedate/g\n>\n\nBIPs were based on Python PIPs, PIPs use this same ordering but spell out\nthe month like '1-Oct-2000'. This is slightly more readable than our format.\n\nhttp://legacy.python.org/dev/peps/pep-0453/\n\nBut to make it more confusing they have two different date conventions\nwithin the header (one for the modified date, and one for the created date).\n\nPersonally I'd prefer to standardize on ISO 8601 (YYYY-MM-DD) dates as well.\n\nFeel free to submit a pull against bips/bips that changes around the dates.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/70a5278c/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-04T13:19:33",
                "message_text_only": "On Fri, Apr 4, 2014 at 3:01 AM, Wladimir <laanwj at gmail.com> wrote:\n> Personally I'd prefer to standardize on ISO 8601 (YYYY-MM-DD) dates as well.\n\n+1 for all-numeric, easily computer parse-able without a lookup table,\nand naturally sorts correctly in a lexicographic sort.\n\nEnglish (or any language) should never be in a date format, on a computer.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-05T10:21:03",
                "message_text_only": "I like both DD-MM-YYYY and YYYY-MM-DD. I just dislike MM-DD-YYYY and YYYY-DD-MM.\n\nOn 4/4/14, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> On Fri, Apr 4, 2014 at 3:01 AM, Wladimir <laanwj at gmail.com> wrote:\n>> Personally I'd prefer to standardize on ISO 8601 (YYYY-MM-DD) dates as\n>> well.\n>\n> +1 for all-numeric, easily computer parse-able without a lookup table,\n> and naturally sorts correctly in a lexicographic sort.\n>\n> English (or any language) should never be in a date format, on a computer.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-05T10:40:33",
                "message_text_only": "On Saturday, 5 April 2014, at 12:21 pm, Jorge Tim\u00f3n wrote:\n> I like both DD-MM-YYYY and YYYY-MM-DD. I just dislike MM-DD-YYYY and YYYY-DD-MM.\n\nYour preferences reflect a cultural bias. The only entirely numeric date format that is unambiguous across all cultures is YYYY-MM-DD. (No culture uses YYYY-DD-MM, or at least the ISO seems to think so.)"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-05T11:28:21",
                "message_text_only": "On 4/5/14, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> On Saturday, 5 April 2014, at 12:21 pm, Jorge Tim\u00f3n wrote:\n>> I like both DD-MM-YYYY and YYYY-MM-DD. I just dislike MM-DD-YYYY and\n>> YYYY-DD-MM.\n>\n> Your preferences reflect a cultural bias. The only entirely numeric date\n> format that is unambiguous across all cultures is YYYY-MM-DD. (No culture\n> uses YYYY-DD-MM, or at least the ISO seems to think so.)\n\nProbably my acceptance of DD-MM-YYYY is caused by cultural bias.\nThe ISO YYYY-MM-DD seems what you normally do with indo-arabic\nnumerals: put the more weighted numbers on the left, so I guess it's\nthe most universal (in addition to being standard).\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-05T11:28:41",
                "message_text_only": "On Sat, Apr 5, 2014 at 12:40 PM, Matt Whitlock <bip at mattwhitlock.name>wrote:\n\n> On Saturday, 5 April 2014, at 12:21 pm, Jorge Tim\u00f3n wrote:\n> > I like both DD-MM-YYYY and YYYY-MM-DD. I just dislike MM-DD-YYYY and\n> YYYY-DD-MM.\n>\n> Your preferences reflect a cultural bias. The only entirely numeric date\n> format that is unambiguous across all cultures is YYYY-MM-DD. (No culture\n> uses YYYY-DD-MM, or at least the ISO seems to think so.)\n>\n\nLet's not waste any time shed-painting this. I'd like to finish this\ndiscussion at once:\n\nhttps://xkcd.com/1179/\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140405/f40e3dcb/attachment.html>"
            },
            {
                "author": "Daryl Tucker",
                "date": "2014-04-05T15:54:12",
                "message_text_only": "YYYY-MM-DD sorts more naturally.\n\n\nOn 04/05/2014 06:28 AM, Wladimir wrote:\n>\n> On Sat, Apr 5, 2014 at 12:40 PM, Matt Whitlock <bip at mattwhitlock.name\n> <mailto:bip at mattwhitlock.name>> wrote:\n>\n>     On Saturday, 5 April 2014, at 12:21 pm, Jorge Tim\u00f3n wrote:\n>     > I like both DD-MM-YYYY and YYYY-MM-DD. I just dislike MM-DD-YYYY\n>     and YYYY-DD-MM.\n>\n>     Your preferences reflect a cultural bias. The only entirely\n>     numeric date format that is unambiguous across all cultures is\n>     YYYY-MM-DD. (No culture uses YYYY-DD-MM, or at least the ISO seems\n>     to think so.)\n>\n>\n> Let's not waste any time shed-painting this. I'd like to finish this\n> discussion at once:\n>\n> https://xkcd.com/1179/\n>\n> Wladimir\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \nDaryl Tucker\ndaryl at daryltucker.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140405/d351d2b2/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 901 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140405/d351d2b2/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-05T17:29:49",
                "message_text_only": "On Thu, Apr 3, 2014 at 8:41 PM, kjj <bitcoin-devel at jerviss.org> wrote:\n> At first, I thought this was a second April Fool's joke, but then I\n> looked and saw that all of the BIPs really do use this format.  As far\n> as I can tell, we are using this insane format because RFC 822 predates\n> ISO 8601 by half a decade.\n\nIn my opinion you can have whatever style you want on the BIPs, so\nlong as you pledge to slay all who come and complain about the new\nstyle."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-01T19:07:05",
                "message_text_only": "On Tue, Apr 1, 2014 at 12:00 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> Hi all,\n> I understand this is a controversial proposal, but bear with me please.\n> I believe we cannot accept the current subsidy schedule anymore, so I\n> wrote a small draft BIP with a proposal to turn Bitcoin into a\n> limited-supply currency. Dogecoin has already shown how easy such\n> changes are, so I consider this a worthwhile idea to be explored.\n>\n> The text can be found here: https://gist.github.com/sipa/9920696\n\nA minor nitpick:  It is well known that the Bitcoin core developers\nare some of the most active TypeScript coders around,\nE.g. http://osrc.dfm.io/sipa  and http://osrc.dfm.io/gavinandresen\n\nBut I think this is an important step forward: Seminal alternative\ncrypto-currencies such as SolidCoin showed us that economic parameters\ncan be freely changed at any time, for any (or no) reason at all; and\nso we should take this opportunity to demonstrate our commitment to\nadopting innovative features like non-inflation regardless of their\norigins in other crypto-currencies."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-01T19:09:22",
                "message_text_only": "While at that let's allow coin bases to be merged from orphan blocks,\nso miner are fairly rewarded even if unlucky.\n\nOn 01.04.2014, at 21:00, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> Hi all,\n> \n> I understand this is a controversial proposal, but bear with me please.\n> \n> I believe we cannot accept the current subsidy schedule anymore, so I\n> wrote a small draft BIP with a proposal to turn Bitcoin into a\n> limited-supply currency. Dogecoin has already shown how easy such\n> changes are, so I consider this a worthwhile idea to be explored.\n> \n> The text can be found here: https://gist.github.com/sipa/9920696\n> \n> Please comment!\n> \n> Thanks,\n> \n> -- \n> Pieter\n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/c1635d40/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-01T19:09:44",
                "message_text_only": "This proposal will destroy Bitcoin. I would expect nothing less coming from\na Google employee.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/8e76d1b0/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-04-01T19:11:01",
                "message_text_only": "I disagree with this proposal both in spirit and in practice.\n\nWe all know satoshi was the best programmer like no one ever was. Clearly he intended this monetary supply from the beginning, who are we but mere mortals to go against satoshi's will?\n\nAlso, should we really do this with a soft fork when we can take this opportunity to redesign the whole system with a hard fork? This is out chance to switch to a whole new script engine!\n\nMatt\n\nOn April 1, 2014 3:00:07 PM EDT, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>Hi all,\n>\n>I understand this is a controversial proposal, but bear with me please.\n>\n>I believe we cannot accept the current subsidy schedule anymore, so I\n>wrote a small draft BIP with a proposal to turn Bitcoin into a\n>limited-supply currency. Dogecoin has already shown how easy such\n>changes are, so I consider this a worthwhile idea to be explored.\n>\n>The text can be found here: https://gist.github.com/sipa/9920696\n>\n>Please comment!\n>\n>Thanks,\n>\n>-- \n>Pieter\n>\n>------------------------------------------------------------------------------\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/9a63d81b/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-01T21:42:53",
                "message_text_only": "On 4/1/14, Matt Corallo <bitcoin-list at bluematt.me> wrote:\n> Also, should we really do this with a soft fork when we can take this\n> opportunity to redesign the whole system with a hard fork? This is out\n> chance to switch to a whole new script engine!\n\n+1\nThe hard fork also forces the whole community and not a few miners to decide.\nWell, if it is possible for the community to reach an agreement with\nsuch a short time frame...\n\n> Matt\n>\n> On April 1, 2014 3:00:07 PM EDT, Pieter Wuille <pieter.wuille at gmail.com>\n> wrote:\n>>Hi all,\n>>\n>>I understand this is a controversial proposal, but bear with me please.\n>>\n>>I believe we cannot accept the current subsidy schedule anymore, so I\n>>wrote a small draft BIP with a proposal to turn Bitcoin into a\n>>limited-supply currency. Dogecoin has already shown how easy such\n>>changes are, so I consider this a worthwhile idea to be explored.\n>>\n>>The text can be found here: https://gist.github.com/sipa/9920696\n>>\n>>Please comment!\n>>\n>>Thanks,\n>>\n>>--\n>>Pieter\n>>\n>>------------------------------------------------------------------------------\n>>_______________________________________________\n>>Bitcoin-development mailing list\n>>Bitcoin-development at lists.sourceforge.net\n>>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-01T19:12:22",
                "message_text_only": "On Tuesday, April 01, 2014 7:00:07 PM Pieter Wuille wrote:\n> Hi all,\n> \n> I understand this is a controversial proposal, but bear with me please.\n> \n> I believe we cannot accept the current subsidy schedule anymore, so I\n> wrote a small draft BIP with a proposal to turn Bitcoin into a\n> limited-supply currency. Dogecoin has already shown how easy such\n> changes are, so I consider this a worthwhile idea to be explored.\n> \n> The text can be found here: https://gist.github.com/sipa/9920696\n> \n> Please comment!\n\nI cleaned it up a bit. By 2214, we should be using tonal numbers after all:\n\nhttps://gist.github.com/luke-jr/9920788"
            },
            {
                "author": "Benjamin Cordes",
                "date": "2014-04-01T19:16:42",
                "message_text_only": "luke, you might enjoy the book Topos of Music. It's a complete\nmathematical music theory by a student of Grothendieck. He advanced\nEuler's theories of harmony based on advanced category theory. I'm\nsure there are many applications to Bitcoin.\n\nOn Tue, Apr 1, 2014 at 9:12 PM, Luke-Jr <luke at dashjr.org> wrote:\n> On Tuesday, April 01, 2014 7:00:07 PM Pieter Wuille wrote:\n>> Hi all,\n>>\n>> I understand this is a controversial proposal, but bear with me please.\n>>\n>> I believe we cannot accept the current subsidy schedule anymore, so I\n>> wrote a small draft BIP with a proposal to turn Bitcoin into a\n>> limited-supply currency. Dogecoin has already shown how easy such\n>> changes are, so I consider this a worthwhile idea to be explored.\n>>\n>> The text can be found here: https://gist.github.com/sipa/9920696\n>>\n>> Please comment!\n>\n> I cleaned it up a bit. By 2214, we should be using tonal numbers after all:\n>\n> https://gist.github.com/luke-jr/9920788\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-01T19:19:01",
                "message_text_only": "Please, *music* is obsolete, but inline replies *are not*!\n\nOn Tuesday, April 01, 2014 7:16:42 PM Benjamin Cordes wrote:\n> luke, you might enjoy the book Topos of Music. It's a complete\n> mathematical music theory by a student of Grothendieck. He advanced\n> Euler's theories of harmony based on advanced category theory. I'm\n> sure there are many applications to Bitcoin.\n> \n> On Tue, Apr 1, 2014 at 9:12 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > On Tuesday, April 01, 2014 7:00:07 PM Pieter Wuille wrote:\n> >> Hi all,\n> >> \n> >> I understand this is a controversial proposal, but bear with me please.\n> >> \n> >> I believe we cannot accept the current subsidy schedule anymore, so I\n> >> wrote a small draft BIP with a proposal to turn Bitcoin into a\n> >> limited-supply currency. Dogecoin has already shown how easy such\n> >> changes are, so I consider this a worthwhile idea to be explored.\n> >> \n> >> The text can be found here: https://gist.github.com/sipa/9920696\n> >> \n> >> Please comment!\n> > \n> > I cleaned it up a bit. By 2214, we should be using tonal numbers after\n> > all:\n> > \n> > https://gist.github.com/luke-jr/9920788\n> > \n> > -------------------------------------------------------------------------\n> > ----- _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-01T20:00:39",
                "message_text_only": "On Tue, Apr 01, 2014 at 09:00:07PM +0200, Pieter Wuille wrote:\n> Hi all,\n> \n> I understand this is a controversial proposal, but bear with me please.\n> \n> I believe we cannot accept the current subsidy schedule anymore, so I\n> wrote a small draft BIP with a proposal to turn Bitcoin into a\n> limited-supply currency. Dogecoin has already shown how easy such\n> changes are, so I consider this a worthwhile idea to be explored.\n> \n> The text can be found here: https://gist.github.com/sipa/9920696\n\nWhat's interesting about this bug is we could also fix the problem - the\neconomic shock - by first implementing the OP_CHECKLOCKTIMEVERIFY opcode\nin a soft-fork, followed by a second soft-fork requiring miners to\n\"pay-forward\" a percentage of their coinbase outputs to the future.\n(remember that whomever mines a block controls what\nrecently-made-available anyone-can-spend txouts are included in their\nblock) We could then pick the distribution rate fairly arbitrarily; I\npropose the following linear distribution:\n\nEach gold mine produces 21,000,000 coins over 210,000*64 blocks, or\n1.5625 BTC/block evenly distributed. Measured as an absolute against the\nmonetary the inflation rate will converge towards zero; measured against\nthe actual economic monetary supply the value will converge towards some\nlow value of inflation. In the short run we get an immediate reduction\nin inflation, which can help our currently sluggish price. Either\noutcome should be acceptable to any reasonable goldbug - fortunately our\ncommunity is almost entirely made up of such calm and reasonable people.\nMeanwhile maintaining a miner reward has significant advantages in terms\nof the long-term sustainability of the system - everyone needs PoW\nsecurity regardless of whether or not you do transactions, thus we\nshould all pay into it.\n\nAs for your example of Python, I'm sure they'll accept a pull-req\nchanging the behavior in the language.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 665 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/62ef3258/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-01T20:53:37",
                "message_text_only": "On Tue, Apr 1, 2014 at 10:00 PM, Peter Todd <pete at petertodd.org> wrote:\n> On Tue, Apr 01, 2014 at 09:00:07PM +0200, Pieter Wuille wrote:\n>> The text can be found here: https://gist.github.com/sipa/9920696\n>\n> What's interesting about this bug is we could also fix the problem - the\n> economic shock - by first implementing the OP_CHECKLOCKTIMEVERIFY opcode\n> in a soft-fork, followed by a second soft-fork requiring miners to\n> \"pay-forward\" a percentage of their coinbase outputs to the future.\n> (remember that whomever mines a block controls what\n> recently-made-available anyone-can-spend txouts are included in their\n> block) We could then pick the distribution rate fairly arbitrarily; I\n> propose the following linear distribution:\n\nInteresting idea, but perhaps we can keep that change for a future\nhard fork, as Matt suggested? That means it could be implemented much\nmore concisely too.\n\nMike, I'm sad to hear you feel that way. I'll move your name in the\ndocument from ACKnowledgements to NAKnowledgements.\n\nAs this is a relatively urgent matter - we risk forks within 250 years\notherwise, I'd like to move this forward quickly.\n\nIn case there are no further objections (excluding from people who\ndisagree with me), I'd like to request a BIP number for this. Any\nnumber is fine, I guess, as long as it's finite.\n\n-- \nPieter"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-01T21:47:34",
                "message_text_only": "On Tue, Apr 1, 2014 at 1:53 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> In case there are no further objections (excluding from people who\n> disagree with me), I'd like to request a BIP number for this. Any\n> number is fine, I guess, as long as it's finite.\n\nWith ten people commenting on this proposal there are quite a few ways\nin which you could partition their views. Only one possible integer\npartitioning has everyone in the same partition, so consensus seems\nunlikely.\n\nBut owing to a rather large bribe (or at least not less large than any\nother offered by competing parties) I hereby assign BIP 42 for this\nproposal."
            },
            {
                "author": "Daryl Banttari",
                "date": "2014-04-01T21:51:09",
                "message_text_only": "On Tue, Apr 1, 2014 at 4:47 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> But owing to a rather large bribe (or at least not less large than any\n> other offered by competing parties) I hereby assign BIP 42 for this\n> proposal.\n>\n\nWhat about BIP 420?  Everyone knows if you add zero it's still the same\nnumber.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/2a414b95/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-01T22:03:08",
                "message_text_only": "On Tue, Apr 1, 2014 at 5:51 PM, Daryl Banttari <dbanttari at gmail.com> wrote:\n> What about BIP 420?  Everyone knows if you add zero it's still the same\n> number.\n\nSimilarly, everyone knows if you multiply both sides by zero, the\nresult is always a true statement.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-04-01T21:51:16",
                "message_text_only": "I move to reclaim bip 42 as reserved for a bip containing either a reference to musical dolphins or towels in the name.\n\nMatt\n\nOn April 1, 2014 5:47:34 PM EDT, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>On Tue, Apr 1, 2014 at 1:53 PM, Pieter Wuille <pieter.wuille at gmail.com>\n>wrote:\n>> In case there are no further objections (excluding from people who\n>> disagree with me), I'd like to request a BIP number for this. Any\n>> number is fine, I guess, as long as it's finite.\n>\n>With ten people commenting on this proposal there are quite a few ways\n>in which you could partition their views. Only one possible integer\n>partitioning has everyone in the same partition, so consensus seems\n>unlikely.\n>\n>But owing to a rather large bribe (or at least not less large than any\n>other offered by competing parties) I hereby assign BIP 42 for this\n>proposal.\n>\n>------------------------------------------------------------------------------\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140401/775ce156/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-01T22:37:31",
                "message_text_only": "On Tue, Apr 1, 2014 at 11:47 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Tue, Apr 1, 2014 at 1:53 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> But owing to a rather large bribe (or at least not less large than any\n> other offered by competing parties) I hereby assign BIP 42 for this\n> proposal.\n\nSubmitted as BIP 42\n(https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki)\nthrough PR #42 (https://github.com/bitcoin/bips/pull/42).\n\nThanks!"
            }
        ],
        "thread_summary": {
            "title": "Finite monetary supply for Bitcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Tamas Blummer",
                "kjj",
                "Wladimir",
                "Mike Hearn",
                "Peter Todd",
                "Matt Whitlock",
                "Benjamin Cordes",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Daryl Banttari",
                "Matt Corallo",
                "Daryl Tucker",
                "Pieter Wuille"
            ],
            "messages_count": 27,
            "total_messages_chars_count": 24564
        }
    },
    {
        "title": "[Bitcoin-development] Okay, time to bring up bitcoin/bitcoin",
        "thread_messages": [
            {
                "author": "Kevin",
                "date": "2014-04-01T20:00:52",
                "message_text_only": "I've sat on this for some time after starting this.  I have forked this \nfrom bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It \nis written in Autoit.  I know I know, scripting language alert!  I would \nlike people to look at:\nhttp://www.githubb.com/bitcoin/bitcoin\nLook at it, and let's have an open dialog about it.  I want to know the \ngood, the bad, and the ugly!\n\n-- \nKevin"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-02T13:08:51",
                "message_text_only": "At first, this is a poor choice of URL.\n\nBut it really looks like a phishing attempt that no one should visit.\n\n\nOn Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n> I've sat on this for some time after starting this.  I have forked this\n> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n> is written in Autoit.  I know I know, scripting language alert!  I would\n> like people to look at:\n> http://www.githubb.com/bitcoin/bitcoin\n> Look at it, and let's have an open dialog about it.  I want to know the\n> good, the bad, and the ugly!\n>\n> --\n> Kevin\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Kevin",
                "date": "2014-04-02T14:53:42",
                "message_text_only": "On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n> At first, this is a poor choice of URL.\n>\n> But it really looks like a phishing attempt that no one should visit.\n>\n>\n> On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>> I've sat on this for some time after starting this.  I have forked this\n>> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n>> is written in Autoit.  I know I know, scripting language alert!  I would\n>> like people to look at:\n>> http://www.githubb.com/bitcoin/bitcoin\n>> Look at it, and let's have an open dialog about it.  I want to know the\n>> good, the bad, and the ugly!\n>>\n>> --\n>> Kevin\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\nAs far as choice of U R L, it may be a poor choice but I did this \nbecause I wanted it connected with the core.  As far as fishing it \ncertainly is not that!  This is a serious project.\n\n\n-- \nKevin"
            },
            {
                "author": "Laszlo Hanyecz",
                "date": "2014-04-02T15:13:29",
                "message_text_only": "Maybe this site serves up exploits selectively?  I'm guessing most people are getting the 'domain for sale' but whoever is the target probably gets something special? \n\nOn Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n\n> On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n>> At first, this is a poor choice of URL.\n>> \n>> But it really looks like a phishing attempt that no one should visit.\n>> \n>> \n>> On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>> I've sat on this for some time after starting this.  I have forked this\n>>> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n>>> is written in Autoit.  I know I know, scripting language alert!  I would\n>>> like people to look at:\n>>> http://www.githubb.com/bitcoin/bitcoin\n>>> Look at it, and let's have an open dialog about it.  I want to know the\n>>> good, the bad, and the ugly!\n>>> \n>>> --\n>>> Kevin\n>>> \n>>> \n>>> ------------------------------------------------------------------------------\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n> As far as choice of U R L, it may be a poor choice but I did this \n> because I wanted it connected with the core.  As far as fishing it \n> certainly is not that!  This is a serious project.\n> \n> \n> -- \n> Kevin\n> \n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Kevin",
                "date": "2014-04-02T15:30:12",
                "message_text_only": "On 4/2/2014 11:13 AM, Laszlo Hanyecz wrote:\n> Maybe this site serves up exploits selectively?  I'm guessing most people are getting the 'domain for sale' but whoever is the target probably gets something special?\n>\n> On Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>\n>> On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n>>> At first, this is a poor choice of URL.\n>>>\n>>> But it really looks like a phishing attempt that no one should visit.\n>>>\n>>>\n>>> On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>> I've sat on this for some time after starting this.  I have forked this\n>>>> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n>>>> is written in Autoit.  I know I know, scripting language alert!  I would\n>>>> like people to look at:\n>>>> http://www.githubb.com/bitcoin/bitcoin\n>>>> Look at it, and let's have an open dialog about it.  I want to know the\n>>>> good, the bad, and the ugly!\n>>>>\n>>>> --\n>>>> Kevin\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>> As far as choice of U R L, it may be a poor choice but I did this\n>> because I wanted it connected with the core.  As far as fishing it\n>> certainly is not that!  This is a serious project.\n>>\n>>\n>> -- \n>> Kevin\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nI tell you that this is a serious project for bitcoin.  You are free to \nassume the worst.  After all, I did say the good the bad and the ugly \nwould come out of this.  I happen to be a big believer in bitcoin and I \nfeel this project holds water.  If you disagree, that's fine.\n\n\n-- \nKevin"
            },
            {
                "author": "Laszlo Hanyecz",
                "date": "2014-04-02T15:41:51",
                "message_text_only": "www.githubb.com resolves to addresses announced by AS53665\n\nSome basic info about AS53665 can be seen at http://bgp.he.net/AS53665\nThey probably have a dedi or VPS at Cogent.  They didn't even create an IRR record for their AS or their only route.\n\nLet's see what google has to say about malware from AS53665 (TL;DR - it's a malware site)\nhttp://www.google.com/safebrowsing/diagnostic?site=AS:53665\n\n-Laszlo\n\n\n\nOn Apr 2, 2014, at 3:30 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n\n> On 4/2/2014 11:13 AM, Laszlo Hanyecz wrote:\n>> Maybe this site serves up exploits selectively?  I'm guessing most people are getting the 'domain for sale' but whoever is the target probably gets something special?\n>> \n>> On Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>> \n>>> On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n>>>> At first, this is a poor choice of URL.\n>>>> \n>>>> But it really looks like a phishing attempt that no one should visit.\n>>>> \n>>>> \n>>>> On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>>> I've sat on this for some time after starting this.  I have forked this\n>>>>> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n>>>>> is written in Autoit.  I know I know, scripting language alert!  I would\n>>>>> like people to look at:\n>>>>> http://www.githubb.com/bitcoin/bitcoin\n>>>>> Look at it, and let's have an open dialog about it.  I want to know the\n>>>>> good, the bad, and the ugly!\n>>>>> \n>>>>> --\n>>>>> Kevin\n>>>>> \n>>>>> \n>>>>> ------------------------------------------------------------------------------\n>>>>> _______________________________________________\n>>>>> Bitcoin-development mailing list\n>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>> \n>>> As far as choice of U R L, it may be a poor choice but I did this\n>>> because I wanted it connected with the core.  As far as fishing it\n>>> certainly is not that!  This is a serious project.\n>>> \n>>> \n>>> -- \n>>> Kevin\n>>> \n>>> \n>>> ------------------------------------------------------------------------------\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> I tell you that this is a serious project for bitcoin.  You are free to assume the worst.  After all, I did say the good the bad and the ugly would come out of this.  I happen to be a big believer in bitcoin and I feel this project holds water.  If you disagree, that's fine.\n> \n> \n> -- \n> Kevin\n>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-02T15:55:45",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/02/2014 03:41 PM, Laszlo Hanyecz wrote:\n> www.githubb.com resolves to addresses announced by AS53665\n> \n> Some basic info about AS53665 can be seen at\n> http://bgp.he.net/AS53665 They probably have a dedi or VPS at\n> Cogent.  They didn't even create an IRR record for their AS or\n> their only route.\n> \n> Let's see what google has to say about malware from AS53665 (TL;DR\n> - it's a malware site) \n> http://www.google.com/safebrowsing/diagnostic?site=AS:53665\n\nBe careful out there.\n\nhttps://www.techdirt.com/articles/20140124/10564825981/nsa-interception-action-tor-developers-computer-gets-mysteriously-re-routed-to-virginia.shtml\n\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTPDMBAAoJECoisBQbQ4v0SrgIAJIHBmYbWCmZhQqt0trfrjDk\nGT5jQmQwo7yUzhgan/3Bx0BFD9t0EL65iK6e4RZei5EK7tXvWeaAYztQsfuEybxc\n+sm6B5w1497Tdj1PwqrfS/OITasY7+CJKLurYn0e/01sZp2STMR0d/rjYxtgUAnI\n9hf6FOi/KbXRj7AUoUm3Ut1J9xxIv3GgP3oZVtWNBdWFgk0KcoNVtMxZMARz1OUd\nOnUCQnyLLfNVT79HdQiHmYMDkPXttLNS4VMfryx9gccCZfJK1ES58YpZA31EFEe7\nzsWOYRV4H124upD4fog2KBASyQj5e7dHjqWSjxcitX6kt8Sbf7WzSC2lKwaJPZ0=\n=Awk+\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140402/2f128bf6/attachment.bin>"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2014-04-02T15:45:49",
                "message_text_only": "Kevin,\nthe thing is you gave us a bad link... what is the correct URL of your project?\n\n2014-04-02 16:30 GMT+01:00 Kevin <kevinsisco61784 at gmail.com>:\n> On 4/2/2014 11:13 AM, Laszlo Hanyecz wrote:\n>> Maybe this site serves up exploits selectively?  I'm guessing most people are getting the 'domain for sale' but whoever is the target probably gets something special?\n>>\n>> On Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>\n>>> On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n>>>> At first, this is a poor choice of URL.\n>>>>\n>>>> But it really looks like a phishing attempt that no one should visit.\n>>>>\n>>>>\n>>>> On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>>> I've sat on this for some time after starting this.  I have forked this\n>>>>> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n>>>>> is written in Autoit.  I know I know, scripting language alert!  I would\n>>>>> like people to look at:\n>>>>> http://www.githubb.com/bitcoin/bitcoin\n>>>>> Look at it, and let's have an open dialog about it.  I want to know the\n>>>>> good, the bad, and the ugly!\n>>>>>\n>>>>> --\n>>>>> Kevin\n>>>>>\n>>>>>\n>>>>> ------------------------------------------------------------------------------\n>>>>> _______________________________________________\n>>>>> Bitcoin-development mailing list\n>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>> As far as choice of U R L, it may be a poor choice but I did this\n>>> because I wanted it connected with the core.  As far as fishing it\n>>> certainly is not that!  This is a serious project.\n>>>\n>>>\n>>> --\n>>> Kevin\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> I tell you that this is a serious project for bitcoin.  You are free to\n> assume the worst.  After all, I did say the good the bad and the ugly\n> would come out of this.  I happen to be a big believer in bitcoin and I\n> feel this project holds water.  If you disagree, that's fine.\n>\n>\n> --\n> Kevin\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Kevin",
                "date": "2014-04-02T15:59:28",
                "message_text_only": "On 4/2/2014 11:45 AM, Ricardo Filipe wrote:\n> Kevin,\n> the thing is you gave us a bad link... what is the correct URL of your project?\n>\n> 2014-04-02 16:30 GMT+01:00 Kevin <kevinsisco61784 at gmail.com>:\n>> On 4/2/2014 11:13 AM, Laszlo Hanyecz wrote:\n>>> Maybe this site serves up exploits selectively?  I'm guessing most people are getting the 'domain for sale' but whoever is the target probably gets something special?\n>>>\n>>> On Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>\n>>>> On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n>>>>> At first, this is a poor choice of URL.\n>>>>>\n>>>>> But it really looks like a phishing attempt that no one should visit.\n>>>>>\n>>>>>\n>>>>> On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>>>> I've sat on this for some time after starting this.  I have forked this\n>>>>>> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n>>>>>> is written in Autoit.  I know I know, scripting language alert!  I would\n>>>>>> like people to look at:\n>>>>>> http://www.githubb.com/bitcoin/bitcoin\n>>>>>> Look at it, and let's have an open dialog about it.  I want to know the\n>>>>>> good, the bad, and the ugly!\n>>>>>>\n>>>>>> --\n>>>>>> Kevin\n>>>>>>\n>>>>>>\n>>>>>> ------------------------------------------------------------------------------\n>>>>>> _______________________________________________\n>>>>>> Bitcoin-development mailing list\n>>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>> As far as choice of U R L, it may be a poor choice but I did this\n>>>> because I wanted it connected with the core.  As far as fishing it\n>>>> certainly is not that!  This is a serious project.\n>>>>\n>>>>\n>>>> --\n>>>> Kevin\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> I tell you that this is a serious project for bitcoin.  You are free to\n>> assume the worst.  After all, I did say the good the bad and the ugly\n>> would come out of this.  I happen to be a big believer in bitcoin and I\n>> feel this project holds water.  If you disagree, that's fine.\n>>\n>>\n>> --\n>> Kevin\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nI understand now why someone thought I was fishing.  That link should \nwork just fine...I'm not sure what the problem is as I know I forked \ncorrectly.  I guess I'll need to register a domain for it an get a page \ngoing and link from there.  I just haven't gotten around to it but will \ndo that.  I'll get going!  Just know that I would never set up fishing; \nthat's not my style.\n\n\n-- \nKevin"
            },
            {
                "author": "Laszlo Hanyecz",
                "date": "2014-04-02T16:45:29",
                "message_text_only": "Maybe he has a fork on the real github.com and the link was a mistake.\n\nhttp://news.nurse.com/article/20121203/NY02/112030026#.Uzw5UVy2uw8\n\nI think it's possible that 'Kevin' is for real and maybe he doesn't realize he linked to a phishing site, if it was an accident.  If this is the same person, then he's blind, and maybe that's why he wrote 'U R L' instead of the usual 'URL', by using speech to text or some other assistive tech.  It might be that he tried to fork github.com/bitcoin/bitcoin and just provided the wrong link.  But regardless, stay away from the one with two Bs in it.\n\nThanks,\nLaszlo\n\n\nOn Apr 2, 2014, at 3:59 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n\n> On 4/2/2014 11:45 AM, Ricardo Filipe wrote:\n>> Kevin,\n>> the thing is you gave us a bad link... what is the correct URL of your project?\n>> \n>> 2014-04-02 16:30 GMT+01:00 Kevin <kevinsisco61784 at gmail.com>:\n>>> On 4/2/2014 11:13 AM, Laszlo Hanyecz wrote:\n>>>> Maybe this site serves up exploits selectively?  I'm guessing most people are getting the 'domain for sale' but whoever is the target probably gets something special?\n>>>> \n>>>> On Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>> \n>>>>> On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n>>>>>> At first, this is a poor choice of URL.\n>>>>>> \n>>>>>> But it really looks like a phishing attempt that no one should visit.\n>>>>>> \n>>>>>> \n>>>>>> On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>>>>> I've sat on this for some time after starting this.  I have forked this\n>>>>>>> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n>>>>>>> is written in Autoit.  I know I know, scripting language alert!  I would\n>>>>>>> like people to look at:\n>>>>>>> http://www.githubb.com/bitcoin/bitcoin\n>>>>>>> Look at it, and let's have an open dialog about it.  I want to know the\n>>>>>>> good, the bad, and the ugly!\n>>>>>>> \n>>>>>>> --\n>>>>>>> Kevin\n>>>>>>> \n>>>>>>> \n>>>>>>> ------------------------------------------------------------------------------\n>>>>>>> _______________________________________________\n>>>>>>> Bitcoin-development mailing list\n>>>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>> As far as choice of U R L, it may be a poor choice but I did this\n>>>>> because I wanted it connected with the core.  As far as fishing it\n>>>>> certainly is not that!  This is a serious project.\n>>>>> \n>>>>> \n>>>>> --\n>>>>> Kevin\n>>>>> \n>>>>> \n>>>>> ------------------------------------------------------------------------------\n>>>>> _______________________________________________\n>>>>> Bitcoin-development mailing list\n>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> I tell you that this is a serious project for bitcoin.  You are free to\n>>> assume the worst.  After all, I did say the good the bad and the ugly\n>>> would come out of this.  I happen to be a big believer in bitcoin and I\n>>> feel this project holds water.  If you disagree, that's fine.\n>>> \n>>> \n>>> --\n>>> Kevin\n>>> \n>>> \n>>> ------------------------------------------------------------------------------\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> I understand now why someone thought I was fishing.  That link should work just fine...I'm not sure what the problem is as I know I forked correctly.  I guess I'll need to register a domain for it an get a page going and link from there.  I just haven't gotten around to it but will do that.  I'll get going!  Just know that I would never set up fishing; that's not my style.\n> \n> \n> -- \n> Kevin\n>"
            },
            {
                "author": "Kevin",
                "date": "2014-04-02T16:54:57",
                "message_text_only": "On 4/2/2014 12:45 PM, Laszlo Hanyecz wrote:\n> Maybe he has a fork on the real github.com and the link was a mistake.\n>\n> http://news.nurse.com/article/20121203/NY02/112030026#.Uzw5UVy2uw8\n>\n> I think it's possible that 'Kevin' is for real and maybe he doesn't realize he linked to a phishing site, if it was an accident.  If this is the same person, then he's blind, and maybe that's why he wrote 'U R L' instead of the usual 'URL', by using speech to text or some other assistive tech.  It might be that he tried to fork github.com/bitcoin/bitcoin and just provided the wrong link.  But regardless, stay away from the one with two Bs in it.\n>\n> Thanks,\n> Laszlo\n>\n>\n> On Apr 2, 2014, at 3:59 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>\n>> On 4/2/2014 11:45 AM, Ricardo Filipe wrote:\n>>> Kevin,\n>>> the thing is you gave us a bad link... what is the correct URL of your project?\n>>>\n>>> 2014-04-02 16:30 GMT+01:00 Kevin <kevinsisco61784 at gmail.com>:\n>>>> On 4/2/2014 11:13 AM, Laszlo Hanyecz wrote:\n>>>>> Maybe this site serves up exploits selectively?  I'm guessing most people are getting the 'domain for sale' but whoever is the target probably gets something special?\n>>>>>\n>>>>> On Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>>>\n>>>>>> On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n>>>>>>> At first, this is a poor choice of URL.\n>>>>>>>\n>>>>>>> But it really looks like a phishing attempt that no one should visit.\n>>>>>>>\n>>>>>>>\n>>>>>>> On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>>>>>> I've sat on this for some time after starting this.  I have forked this\n>>>>>>>> from bitcoin core and am working on a secure tax \"mode\" for bitcoin.  It\n>>>>>>>> is written in Autoit.  I know I know, scripting language alert!  I would\n>>>>>>>> like people to look at:\n>>>>>>>> http://www.githubb.com/bitcoin/bitcoin\n>>>>>>>> Look at it, and let's have an open dialog about it.  I want to know the\n>>>>>>>> good, the bad, and the ugly!\n>>>>>>>>\n>>>>>>>> --\n>>>>>>>> Kevin\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> ------------------------------------------------------------------------------\n>>>>>>>> _______________________________________________\n>>>>>>>> Bitcoin-development mailing list\n>>>>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>>> As far as choice of U R L, it may be a poor choice but I did this\n>>>>>> because I wanted it connected with the core.  As far as fishing it\n>>>>>> certainly is not that!  This is a serious project.\n>>>>>>\n>>>>>>\n>>>>>> --\n>>>>>> Kevin\n>>>>>>\n>>>>>>\n>>>>>> ------------------------------------------------------------------------------\n>>>>>> _______________________________________________\n>>>>>> Bitcoin-development mailing list\n>>>>>> Bitcoin-development at lists.sourceforge.net\n>>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>> I tell you that this is a serious project for bitcoin.  You are free to\n>>>> assume the worst.  After all, I did say the good the bad and the ugly\n>>>> would come out of this.  I happen to be a big believer in bitcoin and I\n>>>> feel this project holds water.  If you disagree, that's fine.\n>>>>\n>>>>\n>>>> --\n>>>> Kevin\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> I understand now why someone thought I was fishing.  That link should work just fine...I'm not sure what the problem is as I know I forked correctly.  I guess I'll need to register a domain for it an get a page going and link from there.  I just haven't gotten around to it but will do that.  I'll get going!  Just know that I would never set up fishing; that's not my style.\n>>\n>>\n>> -- \n>> Kevin\n>>\nThank you for giving me the benifit of the doubt.  I did not realize my \nmistake.  I hope we can now get back to talking about bitcoin\n\n\n-- \nKevin"
            },
            {
                "author": "Jud",
                "date": "2014-04-02T16:55:37",
                "message_text_only": "Looks like Kevin was probably trying to point us to his fork for comments:\n\nhttps://github.com/kjsisco/bitcoin/tree/patch-1 \n\n-- \nJud\n\n\nOn Wednesday, April 2, 2014 at 12:45 PM, Laszlo Hanyecz wrote:\n\n> Maybe he has a fork on the real github.com (http://github.com) and the link was a mistake.\n> \n> http://news.nurse.com/article/20121203/NY02/112030026#.Uzw5UVy2uw8\n> \n> I think it's possible that 'Kevin' is for real and maybe he doesn't realize he linked to a phishing site, if it was an accident. If this is the same person, then he's blind, and maybe that's why he wrote 'U R L' instead of the usual 'URL', by using speech to text or some other assistive tech. It might be that he tried to fork github.com/bitcoin/bitcoin (http://github.com/bitcoin/bitcoin) and just provided the wrong link. But regardless, stay away from the one with two Bs in it.\n> \n> Thanks,\n> Laszlo\n> \n> \n> On Apr 2, 2014, at 3:59 PM, Kevin <kevinsisco61784 at gmail.com (mailto:kevinsisco61784 at gmail.com)> wrote:\n> \n> > On 4/2/2014 11:45 AM, Ricardo Filipe wrote:\n> > > Kevin,\n> > > the thing is you gave us a bad link... what is the correct URL of your project?\n> > > \n> > > 2014-04-02 16:30 GMT+01:00 Kevin <kevinsisco61784 at gmail.com (mailto:kevinsisco61784 at gmail.com)>:\n> > > > On 4/2/2014 11:13 AM, Laszlo Hanyecz wrote:\n> > > > > Maybe this site serves up exploits selectively? I'm guessing most people are getting the 'domain for sale' but whoever is the target probably gets something special?\n> > > > > \n> > > > > On Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com (mailto:kevinsisco61784 at gmail.com)> wrote:\n> > > > > \n> > > > > > On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n> > > > > > > At first, this is a poor choice of URL.\n> > > > > > > \n> > > > > > > But it really looks like a phishing attempt that no one should visit.\n> > > > > > > \n> > > > > > > \n> > > > > > > On Tue, Apr 1, 2014 at 4:00 PM, Kevin <kevinsisco61784 at gmail.com (mailto:kevinsisco61784 at gmail.com)> wrote:\n> > > > > > > > I've sat on this for some time after starting this. I have forked this\n> > > > > > > > from bitcoin core and am working on a secure tax \"mode\" for bitcoin. It\n> > > > > > > > is written in Autoit. I know I know, scripting language alert! I would\n> > > > > > > > like people to look at:\n> > > > > > > > http://www.githubb.com/bitcoin/bitcoin\n> > > > > > > > Look at it, and let's have an open dialog about it. I want to know the\n> > > > > > > > good, the bad, and the ugly!\n> > > > > > > > \n> > > > > > > > --\n> > > > > > > > Kevin\n> > > > > > > > \n> > > > > > > > \n> > > > > > > > ------------------------------------------------------------------------------\n> > > > > > > > _______________________________________________\n> > > > > > > > Bitcoin-development mailing list\n> > > > > > > > Bitcoin-development at lists.sourceforge.net (mailto:Bitcoin-development at lists.sourceforge.net)\n> > > > > > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > > > > > > \n> > > > > > > \n> > > > > > > \n> > > > > > \n> > > > > > As far as choice of U R L, it may be a poor choice but I did this\n> > > > > > because I wanted it connected with the core. As far as fishing it\n> > > > > > certainly is not that! This is a serious project.\n> > > > > > \n> > > > > > \n> > > > > > --\n> > > > > > Kevin\n> > > > > > \n> > > > > > \n> > > > > > ------------------------------------------------------------------------------\n> > > > > > _______________________________________________\n> > > > > > Bitcoin-development mailing list\n> > > > > > Bitcoin-development at lists.sourceforge.net (mailto:Bitcoin-development at lists.sourceforge.net)\n> > > > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > > > > \n> > > > > \n> > > > > \n> > > > \n> > > > I tell you that this is a serious project for bitcoin. You are free to\n> > > > assume the worst. After all, I did say the good the bad and the ugly\n> > > > would come out of this. I happen to be a big believer in bitcoin and I\n> > > > feel this project holds water. If you disagree, that's fine.\n> > > > \n> > > > \n> > > > --\n> > > > Kevin\n> > > > \n> > > > \n> > > > ------------------------------------------------------------------------------\n> > > > _______________________________________________\n> > > > Bitcoin-development mailing list\n> > > > Bitcoin-development at lists.sourceforge.net (mailto:Bitcoin-development at lists.sourceforge.net)\n> > > > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > > > \n> > > \n> > > \n> > \n> > I understand now why someone thought I was fishing. That link should work just fine...I'm not sure what the problem is as I know I forked correctly. I guess I'll need to register a domain for it an get a page going and link from there. I just haven't gotten around to it but will do that. I'll get going! Just know that I would never set up fishing; that's not my style.\n> > \n> > \n> > -- \n> > Kevin\n> > \n> \n> \n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net (mailto:Bitcoin-development at lists.sourceforge.net)\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140402/6252a88a/attachment.html>"
            },
            {
                "author": "Kevin",
                "date": "2014-04-02T16:57:20",
                "message_text_only": "On 4/2/2014 12:55 PM, Jud wrote:\n> Looks like Kevin was probably trying to point us to his fork for comments:\n>\n> https://github.com/kjsisco/bitcoin/tree/patch-1\n>\n> -- \n> Jud\n>\n> On Wednesday, April 2, 2014 at 12:45 PM, Laszlo Hanyecz wrote:\n>\n>> Maybe he has a fork on the real github.com <http://github.com> and \n>> the link was a mistake.\n>>\n>> http://news.nurse.com/article/20121203/NY02/112030026#.Uzw5UVy2uw8\n>>\n>> I think it's possible that 'Kevin' is for real and maybe he doesn't \n>> realize he linked to a phishing site, if it was an accident. If this \n>> is the same person, then he's blind, and maybe that's why he wrote 'U \n>> R L' instead of the usual 'URL', by using speech to text or some \n>> other assistive tech. It might be that he tried to fork \n>> github.com/bitcoin/bitcoin <http://github.com/bitcoin/bitcoin> and \n>> just provided the wrong link. But regardless, stay away from the one \n>> with two Bs in it.\n>>\n>> Thanks,\n>> Laszlo\n>>\n>>\n>> On Apr 2, 2014, at 3:59 PM, Kevin <kevinsisco61784 at gmail.com \n>> <mailto:kevinsisco61784 at gmail.com>> wrote:\n>>\n>>> On 4/2/2014 11:45 AM, Ricardo Filipe wrote:\n>>>> Kevin,\n>>>> the thing is you gave us a bad link... what is the correct URL of \n>>>> your project?\n>>>>\n>>>> 2014-04-02 16:30 GMT+01:00 Kevin <kevinsisco61784 at gmail.com \n>>>> <mailto:kevinsisco61784 at gmail.com>>:\n>>>>> On 4/2/2014 11:13 AM, Laszlo Hanyecz wrote:\n>>>>>> Maybe this site serves up exploits selectively? I'm guessing most \n>>>>>> people are getting the 'domain for sale' but whoever is the \n>>>>>> target probably gets something special?\n>>>>>>\n>>>>>> On Apr 2, 2014, at 2:53 PM, Kevin <kevinsisco61784 at gmail.com \n>>>>>> <mailto:kevinsisco61784 at gmail.com>> wrote:\n>>>>>>\n>>>>>>> On 4/2/2014 9:08 AM, Jeff Garzik wrote:\n>>>>>>>> At first, this is a poor choice of URL.\n>>>>>>>>\n>>>>>>>> But it really looks like a phishing attempt that no one should \n>>>>>>>> visit.\n>>>>>>>>\n>>>>>>>>\n>>>>>>>> On Tue, Apr 1, 2014 at 4:00 PM, Kevin \n>>>>>>>> <kevinsisco61784 at gmail.com <mailto:kevinsisco61784 at gmail.com>> \n>>>>>>>> wrote:\n>>>>>>>>> I've sat on this for some time after starting this. I have \n>>>>>>>>> forked this\n>>>>>>>>> from bitcoin core and am working on a secure tax \"mode\" for \n>>>>>>>>> bitcoin. It\n>>>>>>>>> is written in Autoit. I know I know, scripting language alert! \n>>>>>>>>> I would\n>>>>>>>>> like people to look at:\n>>>>>>>>> http://www.githubb.com/bitcoin/bitcoin\n>>>>>>>>> Look at it, and let's have an open dialog about it. I want to \n>>>>>>>>> know the\n>>>>>>>>> good, the bad, and the ugly!\n>>>>>>>>>\n>>>>>>>>> --\n>>>>>>>>> Kevin\n>>>>>>>>>\n>>>>>>>>>\n>>>>>>>>> ------------------------------------------------------------------------------\n>>>>>>>>> _______________________________________________\n>>>>>>>>> Bitcoin-development mailing list\n>>>>>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>>>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>>>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>>>> As far as choice of U R L, it may be a poor choice but I did this\n>>>>>>> because I wanted it connected with the core. As far as fishing it\n>>>>>>> certainly is not that! This is a serious project.\n>>>>>>>\n>>>>>>>\n>>>>>>> --\n>>>>>>> Kevin\n>>>>>>>\n>>>>>>>\n>>>>>>> ------------------------------------------------------------------------------\n>>>>>>> _______________________________________________\n>>>>>>> Bitcoin-development mailing list\n>>>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>> I tell you that this is a serious project for bitcoin. You are free to\n>>>>> assume the worst. After all, I did say the good the bad and the ugly\n>>>>> would come out of this. I happen to be a big believer in bitcoin and I\n>>>>> feel this project holds water. If you disagree, that's fine.\n>>>>>\n>>>>>\n>>>>> --\n>>>>> Kevin\n>>>>>\n>>>>>\n>>>>> ------------------------------------------------------------------------------\n>>>>> _______________________________________________\n>>>>> Bitcoin-development mailing list\n>>>>> Bitcoin-development at lists.sourceforge.net \n>>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> I understand now why someone thought I was fishing. That link should \n>>> work just fine...I'm not sure what the problem is as I know I forked \n>>> correctly. I guess I'll need to register a domain for it an get a \n>>> page going and link from there. I just haven't gotten around to it \n>>> but will do that. I'll get going! Just know that I would never set \n>>> up fishing; that's not my style.\n>>>\n>>>\n>>> -- \n>>> Kevin\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net \n>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\nI was trying to point you to that.  I am embarrassed.\n\n\n-- \nKevin\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140402/8fff8e1f/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Okay, time to bring up bitcoin/bitcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Laszlo Hanyecz",
                "Kevin",
                "Ricardo Filipe",
                "Jud",
                "Justus Ranvier"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 35106
        }
    },
    {
        "title": "[Bitcoin-development] Detailed gitian build guide",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-04-02T12:27:06",
                "message_text_only": "Hello all,\n\nI'm working on a detailed guide on how to install and set up a Debian VM\nfor gitian building. As this guide can be used on any operating system that\nhas VirtualBox, hopefully this will make it easier for people to get\nstarted with gitian builds.\n\nSee https://github.com/bitcoin/bitcoin/pull/3994\n\nRendered version is here:\nhttps://github.com/laanwj/bitcoin/blob/2014_04_debian_gitian_build_doc/doc/gitian-building.md\n\nComments and patches are welcome.\nIf you bump into problems while following the guide please let me know.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140402/2338755e/attachment.html>"
            },
            {
                "author": "devrandom",
                "date": "2014-04-03T04:47:48",
                "message_text_only": "Nice!\n\nI wonder how much of this could be scripted.\n\nOn Wed, 2014-04-02 at 14:27 +0200, Wladimir wrote:\n> Hello all,\n> \n> \n> I'm working on a detailed guide on how to install and set up a Debian\n> VM for gitian building. As this guide can be used on any operating\n> system that has VirtualBox, hopefully this will make it easier for\n> people to get started with gitian builds.\n> \n> \n> See https://github.com/bitcoin/bitcoin/pull/3994\n> \n> \n> Rendered version is here:\n> https://github.com/laanwj/bitcoin/blob/2014_04_debian_gitian_build_doc/doc/gitian-building.md\n> \n> \n> \n> Comments and patches are welcome.\n> \n> If you bump into problems while following the guide please let me\n> know.\n> \n> \n> \n> Wladimir\n> \n> \n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \nMiron / devrandom"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-03T05:51:55",
                "message_text_only": "On Thu, Apr 3, 2014 at 6:47 AM, devrandom <c1.sf-bitcoin at niftybox.net>wrote:\n\n> Nice!\n>\n> I wonder how much of this could be scripted.\n>\n\nEverything, probably, using vmbuilder (and/or vagrant as Nick Simpson\nsuggests). But that's not the point here. It is to provide exact steps that\npeople can follow to get a basic (virtual) machine that they can use to do\ngitian builds.\n\nI didn't want to end up with a gitian-builder-that-builds-a-gitian-builder\n:-) The host machine may not even have any scripting languages installed\n(in the case of Windows).\n\nIt may be possible to script *some* parts (most of the quoted bash script\nis runnable as script) without automating the entire process, but I hope\nthat over time we can make Gitian itself easier to use/setup, so that less\nsteps are needed in the first place.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140403/4dd280d6/attachment.html>"
            },
            {
                "author": "devrandom",
                "date": "2014-04-03T16:01:58",
                "message_text_only": "On Thu, 2014-04-03 at 07:51 +0200, Wladimir wrote:\n> \n> On Thu, Apr 3, 2014 at 6:47 AM, devrandom <c1.sf-bitcoin at niftybox.net>\n> wrote:\n>         Nice!\n>         \n>         I wonder how much of this could be scripted.\n> \n> \n> Everything, probably, using vmbuilder (and/or vagrant as Nick Simpson\n> suggests). But that's not the point here. It is to provide exact steps\n> that people can follow to get a basic (virtual) machine that they can\n> use to do gitian builds.\n\nUnderstood.\n> \n> I didn't want to end up with a\n> gitian-builder-that-builds-a-gitian-builder :-) The host machine may\n> not even have any scripting languages installed (in the case of\n> Windows).\n\nYes, I can see the turtles there.\n> \n> \n> It may be possible to script *some* parts (most of the quoted bash\n> script is runnable as script) without automating the entire process,\n> but I hope that over time we can make Gitian itself easier to\n> use/setup, so that less steps are needed in the first place.\n\nUnderstood. :)  I would definitely like to see in Gitian any\nimprovements that make it easier for newcomers to get started.\n> \n> \n> Wladimir\n> \n> \n> \n\n-- \nMiron / devrandom"
            }
        ],
        "thread_summary": {
            "title": "Detailed gitian build guide",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "devrandom",
                "Wladimir"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3898
        }
    },
    {
        "title": "[Bitcoin-development] Presenting a BIP for Shamir's Secret Sharing of Bitcoin private keys",
        "thread_messages": [
            {
                "author": "Nikita Schmidt",
                "date": "2014-04-03T12:41:06",
                "message_text_only": "Matt Whitlock wrote:\n> Okay, you've convinced me. However, it looks like the consensus here is\n> that my BIP is unneeded, so I'm not sure it would be worth the effort\n> for me to improve it with your suggestions.\n\nI need your BIP.\n\nWe are going to implement SSS and we'd rather stick with something\npublicly discussed, even if it has not formally become a BIP, than\ninvent our own stuff.\n\nI'll go ahead and comment on the current proposal here.  BIP or no\nBIP, I propose to finalise this spec anyway for those who want to\nimplement SSS now or in future.\n\nI agree with the recently mentioned suggestion to make non-essential\nmetadata, namely key fingerprint and degree (M), optional.  Their\n4-byte and 1-byte fields can be added individually at an\nimplementation's discretion.  During decoding, the total length will\ndetermine which fields are included.\n\nFor example, as a compromise between usability and security, the\nmetadata can be supplied out-of-band, like in plain text accompanying\nthe Base-58 encoded share.\n\nEncoding for the testnet is not specified.\n\nSpeaking of encoding, is it not wasteful to allocate three different\napplication/version bytes just for the sake of always starting with\n'SS'?  It would be OK if it were accepted as a BIP, but merely as a\nde-facto standard it should aim at minimising future chances of\ncollision.\n\nI'd add a clause allowing the use of random coefficients instead of\ndeterministic, as long as the implementation guarantees to never make\nanother set of shares for the same private key or master seed.\n\nWhat about using the same P256 prime as for the elliptic curve?  Just\nfor consistency's sake.\n\nAlso, I'm somewhat inclined towards using the actual x instead of j in\nthe encoding.  I find it more direct and straightforward to encode the\npair (x, y).  And x=0 can denote a special case for future extensions.\n There is no technical reason behind this, it's just for (subjective)\nclarity and consistency."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-03T21:42:32",
                "message_text_only": "On Thursday, 3 April 2014, at 4:41 pm, Nikita Schmidt wrote:\n> I agree with the recently mentioned suggestion to make non-essential\n> metadata, namely key fingerprint and degree (M), optional.  Their\n> 4-byte and 1-byte fields can be added individually at an\n> implementation's discretion.  During decoding, the total length will\n> determine which fields are included.\n\nThe fingerprint field, Hash16(K), is presently specified as a 16-bit field. Rationale: There is no need to consume 4 bytes just to allow shares to be grouped together. And if someone has more than 100 different secrets, they probably have a good system for managing their shares and won't need the hash anyway.\n\n> Encoding for the testnet is not specified.\n\nHmm, is that actually needed?\n\n> Speaking of encoding, is it not wasteful to allocate three different\n> application/version bytes just for the sake of always starting with\n> 'SS'?  It would be OK if it were accepted as a BIP, but merely as a\n> de-facto standard it should aim at minimising future chances of\n> collision.\n\nI agree on principle, however I think the more user-acceptable behavior is for all base58-encoded Shamir shares to begin with a common prefix, such as \"SS\". Users are accustomed to relying on the prefix of the base58 encoding to understand what the object is: \"1\" for mainnet pubkey hash, \"3\" for mainnet script hash, \"5\" for uncompressed private key, \"P\" for passphrase-protected private key, etc.\n\n> I'd add a clause allowing the use of random coefficients instead of\n> deterministic, as long as the implementation guarantees to never make\n> another set of shares for the same private key or master seed.\n\nI'm not sure that's necessary, as this is an Informational BIP. Implementations are free to ignore it. Shares with randomly selected coefficients would work just fine in a share joiner that conforms to the BIP, so I would expect implementors to feel free to ignore the deterministic formula and use randomly selected coefficients.\n\n> What about using the same P256 prime as for the elliptic curve?  Just\n> for consistency's sake.\n\nThe initial draft of this BIP used the cyclic order (n) of the generator point on the secp256k1 elliptic curve as the modulus. The change to the present scheme was actually done for consistency's sake, so all sizes of secret can use a consistently defined modulus.\n\n> Also, I'm somewhat inclined towards using the actual x instead of j in\n> the encoding.  I find it more direct and straightforward to encode the\n> pair (x, y).  And x=0 can denote a special case for future extensions.\n>  There is no technical reason behind this, it's just for (subjective)\n> clarity and consistency.\n\nThere is a technical reason for encoding j rather than x[j]: it allows for the first 256 shares to be encoded, rather than only the first 255 shares.\n\nIf you want a sentinel value reserved for future extensions, then you might take notice that 0xFFFF is an invalid key fingerprint, along with several other values, and also that 0xFF is an unusable value of M\u22122, as that would imply M=257, but the scheme can only encode up to 256 shares, so one would never have enough shares to meet the threshold. I considered having the two optional fields be mandatory and allowing 0xFFFF and 0xFF as \"redacted\" field values, but I like allowing the shares to be shorter if the optional fields are omitted. (Imagine engraving Shamir secret shares onto metal bars by hand with an engraving tool. Fewer characters is better!)"
            },
            {
                "author": "Nikita Schmidt",
                "date": "2014-04-04T13:51:07",
                "message_text_only": "On 4 April 2014 01:42, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> The fingerprint field, Hash16(K), is presently specified as a 16-bit field. Rationale: There is no need to consume 4 bytes just to allow shares to be grouped together. And if someone has more than 100 different secrets, they probably have a good system for managing their shares and won't need the hash anyway.\n\nRight, of course.  Sorry, I didn't notice there was an update.  Two\nbytes are plenty.\n\nI'm worried however about the dependency on SHA-512, which may be\nstretching it for a tiny embedded application.  The other uses of\nHashL can be avoided.  We are balancing here between consistency with\nthe rest of this proposal, where everything is done via HashL, and\nconsistency with the general practice of generating fingerprints with\nSHA-256, like in Base58Check.\n\nSimilarly, re-assembly software suddenly finds itself having to\nimplement Hash16 just to check this particular fingerprint.  So I'd\nvote for a more traditional approach here, also considering that HashL\nis designed specifically to generate numbers in a finite field.\n\n>\n>> Encoding for the testnet is not specified.\n>\n> Hmm, is that actually needed?\n\nIt's been a tradition to support it in general, however I guess it's\nnot really needed here.  I'm happy without a dedicated testnet\nencoding.\n\n>\n>> Speaking of encoding, is it not wasteful to allocate three different\n>> application/version bytes just for the sake of always starting with\n>> 'SS'?  It would be OK if it were accepted as a BIP, but merely as a\n>> de-facto standard it should aim at minimising future chances of\n>> collision.\n>\n> I agree on principle, however I think the more user-acceptable behavior is for all base58-encoded Shamir shares to begin with a common prefix, such as \"SS\". Users are accustomed to relying on the prefix of the base58 encoding to understand what the object is: \"1\" for mainnet pubkey hash, \"3\" for mainnet script hash, \"5\" for uncompressed private key, \"P\" for passphrase-protected private key, etc.\n\nYes, \"5\" for uncompressed private key and \"K\" or \"L\" for compressed\nprivate key.  One A/VB and three prefixes in base58.  Am I the only\none to see this as a counter-example?\n\nHowever, thinking about this, I can find logic in wanting to stabilise\ntext prefixes at a cost of six A/V bytes (as per the latest spec).\nThere are only 58 first characters versus 256 AVBs, so we should\nrather be saving the former.\n\n>> What about using the same P256 prime as for the elliptic curve?  Just\n>> for consistency's sake.\n>\n> The initial draft of this BIP used the cyclic order (n) of the generator point on the secp256k1 elliptic curve as the modulus. The change to the present scheme was actually done for consistency's sake, so all sizes of secret can use a consistently defined modulus.\n\nFair enough.  Although I would have chosen the field order (p) simply\nbecause that's how all arithmetic already works in bitcoin.  One field\nfor everybody.  It's also very close to 2^256, although still smaller\nthan your maximum prime.  Now of course with different bit lengths we\nhave to pick one consistency over others.\n\n>\n>> Also, I'm somewhat inclined towards using the actual x instead of j in\n>> the encoding.  I find it more direct and straightforward to encode the\n>> pair (x, y).  And x=0 can denote a special case for future extensions.\n>>  There is no technical reason behind this, it's just for (subjective)\n>> clarity and consistency.\n>\n> There is a technical reason for encoding j rather than x[j]: it allows for the first 256 shares to be encoded, rather than only the first 255 shares.\n\nWow, big deal.  It's hard to imagine anyone needing exactly 256\nshares, but who knows.  And with j = x (starting from 1) we'd get\nuser-friendly share numbering and simpler formulas in the spec and\npossibly in the implementation, with no off-by-one stuff.  And M\ninstead of M-2...\n\n>\n> If you want a sentinel value reserved for future extensions, then you might take notice that 0xFFFF is an invalid key fingerprint, along with several other values, and also that 0xFF is an unusable value of M-2, as that would imply M=257, but the scheme can only encode up to 256 shares, so one would never have enough shares to meet the threshold. I considered having the two optional fields be mandatory and allowing 0xFFFF and 0xFF as \"redacted\" field values, but I like allowing the shares to be shorter if the optional fields are omitted. (Imagine engraving Shamir secret shares onto metal bars by hand with an engraving tool. Fewer characters is better!)\n\nExactly.  Thank you.  Without these fields, a secret share still fits\ninto a 29x29 QR code.  Add one more byte and it'll need a 33x33.\nImagine engraving that onto metal plates!  Or the hassle of going\nabove 32 bits per line in a tiny embedded system."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-04T14:14:12",
                "message_text_only": "On Fri, Apr 4, 2014 at 6:51 AM, Nikita Schmidt\n<nikita at megiontechnologies.com> wrote:\n> Fair enough.  Although I would have chosen the field order (p) simply\n> because that's how all arithmetic already works in bitcoin.  One field\n> for everybody.  It's also very close to 2^256, although still smaller\n> than your maximum prime.  Now of course with different bit lengths we\n> have to pick one consistency over others.\n\nOperation mod the group order is how secret keys must be combined in\ntype-2 private derivation for BIP-32. It's also absolutely essential\nif you want to build a secret sharing scheme in which the shares are\nusable for threshold ECDSA.\n\nI still repeat my concern that any private key secret sharing scheme\nreally ought to be compatible with threshold ECDSA, otherwise we're\njust going to have another redundant specification."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-04T16:05:44",
                "message_text_only": "On Friday, 4 April 2014, at 7:14 am, Gregory Maxwell wrote:\n> I still repeat my concern that any private key secret sharing scheme\n> really ought to be compatible with threshold ECDSA, otherwise we're\n> just going to have another redundant specification.\n\nI have that concern too, but then how can we support secrets of sizes other than 256 bits? A likely use case for this BIP (even more likely than using it to decompose Bitcoin private keys) is using it to decompose BIP32 master seeds, which can be 512 bits in size. We can't use secp256k1_n as the modulus there."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-04T16:25:14",
                "message_text_only": "On Fri, Apr 4, 2014 at 9:05 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> On Friday, 4 April 2014, at 7:14 am, Gregory Maxwell wrote:\n>> I still repeat my concern that any private key secret sharing scheme\n>> really ought to be compatible with threshold ECDSA, otherwise we're\n>> just going to have another redundant specification.\n>\n> I have that concern too, but then how can we support secrets of sizes other than 256 bits? A likely use case for this BIP (even more likely than using it to decompose Bitcoin private keys) is using it to decompose BIP32 master seeds, which can be 512 bits in size. We can't use secp256k1_n as the modulus there.\n\nWell, if you're not doing anything homorphic with the result the\ncomputation should probably be over a small field (for computational\nefficiency and implementation simplicity reasons) and the data split\nup, this also makes it easier to deal with many different data sizes,\nsince the various sizes will more efficiently divide into the small\nfield.   The field only needs to be large enough to handle the number\nof distinct shares you wish to issue, so even an 8 bit field would\nprobably be adequate (and yields some very simple table based\nimplementations).\n\nIf that route is taken, rather than encoding BIP32 master keys, it\nwould probably be prudent to encode the encryption optional version\nhttps://bitcointalk.org/index.php?topic=258678.0 ... and if we're\ntalking about a new armored private key format then perhaps we should\nbe talking about Mark Friedenbach's error correcting capable scheme:\nhttps://gist.github.com/maaku/8996338#file-bip-ecc32-mediawiki\n(though it would be nicer if we could find a decoding scheme that\nsupported list decoding without increasing the complexity of a basic\nimplementation, since an advanced recovery tool could make good use of\na list decode)\n\nI'd think that changing to a small field with a simple implementation,\nand encoding the form with encryption, etc. probably makes it distinct\nenough from an implementation of ECDSA thresholding that redundancy\nisn't a problem."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-04T16:36:29",
                "message_text_only": "On Friday, 4 April 2014, at 9:25 am, Gregory Maxwell wrote:\n> On Fri, Apr 4, 2014 at 9:05 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > On Friday, 4 April 2014, at 7:14 am, Gregory Maxwell wrote:\n> >> I still repeat my concern that any private key secret sharing scheme\n> >> really ought to be compatible with threshold ECDSA, otherwise we're\n> >> just going to have another redundant specification.\n> >\n> > I have that concern too, but then how can we support secrets of sizes other than 256 bits? A likely use case for this BIP (even more likely than using it to decompose Bitcoin private keys) is using it to decompose BIP32 master seeds, which can be 512 bits in size. We can't use secp256k1_n as the modulus there.\n> \n> Well, if you're not doing anything homorphic with the result the\n> computation should probably be over a small field (for computational\n> efficiency and implementation simplicity reasons) and the data split\n> up, this also makes it easier to deal with many different data sizes,\n> since the various sizes will more efficiently divide into the small\n> field.   The field only needs to be large enough to handle the number\n> of distinct shares you wish to issue, so even an 8 bit field would\n> probably be adequate (and yields some very simple table based\n> implementations).\n\nAre you proposing to switch from prime fields to a binary field? Because if you're going to \"break up\" a secret into little pieces, you can't assume that every piece of the secret will be strictly less than some 8-bit prime modulus. And if you're going to do a base conversion, then you have to do arbitrary-precision integer math anyway, so I don't see that the small field really saves you any code.\n\n> If that route is taken, rather than encoding BIP32 master keys, it\n> would probably be prudent to encode the encryption optional version\n> https://bitcointalk.org/index.php?topic=258678.0 ... and if we're\n> talking about a new armored private key format then perhaps we should\n> be talking about Mark Friedenbach's error correcting capable scheme:\n> https://gist.github.com/maaku/8996338#file-bip-ecc32-mediawiki\n> (though it would be nicer if we could find a decoding scheme that\n> supported list decoding without increasing the complexity of a basic\n> implementation, since an advanced recovery tool could make good use of\n> a list decode)\n\nWeren't you just clamoring for implementation *simplicity* in your previous paragraph? :)"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-04T17:08:05",
                "message_text_only": "On Fri, Apr 4, 2014 at 9:36 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Are you proposing to switch from prime fields to a binary field? Because if you're going to \"break up\" a secret into little pieces, you can't assume that every piece of the secret will be strictly less than some 8-bit prime modulus. And if you're going to do a base conversion, then you have to do arbitrary-precision integer math anyway, so I don't see that the small field really saves you any code.\n\nYes, I'm proposing using the binary extension field of GF(2^8).  There\nare many secret sharing and data integrity applications available\nalready operating over GF(2^8) so you can go compare implementation\napproaches without having to try them our yourself. Obviously anything\nefficiently encoded as bytes will efficiently encode over GF(2^8).\n\n> Weren't you just clamoring for implementation *simplicity* in your previous paragraph? :)\n\nI do think there is a material difference in complexity that comes in\nlayers rather than at a single point. It's much easier to implement a\ncomplex thing that has many individually testable parts then a single\ncomplex part. (Implementing arithmetic mod some huge P is quite a bit\nof work unless you're using some very high level language with\nintegrated bignums\u2014 and are comfortable hoping that their bignums are\nsufficiently consistent with the spec)."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-04T17:16:27",
                "message_text_only": "On Friday, 4 April 2014, at 10:08 am, Gregory Maxwell wrote:\n> On Fri, Apr 4, 2014 at 9:36 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > Are you proposing to switch from prime fields to a binary field? Because if you're going to \"break up\" a secret into little pieces, you can't assume that every piece of the secret will be strictly less than some 8-bit prime modulus. And if you're going to do a base conversion, then you have to do arbitrary-precision integer math anyway, so I don't see that the small field really saves you any code.\n> \n> Yes, I'm proposing using the binary extension field of GF(2^8).  There\n> are many secret sharing and data integrity applications available\n> already operating over GF(2^8) so you can go compare implementation\n> approaches without having to try them our yourself. Obviously anything\n> efficiently encoded as bytes will efficiently encode over GF(2^8).\n\nHonestly, that sounds a lot more complicated than what I have now. I made my current implementation because I just wanted something simple that would let me divide a private key into shares for purposes of dissemination to my next of kin et al.\n\n> > Weren't you just clamoring for implementation *simplicity* in your previous paragraph? :)\n> \n> I do think there is a material difference in complexity that comes in\n> layers rather than at a single point. It's much easier to implement a\n> complex thing that has many individually testable parts then a single\n> complex part. (Implementing arithmetic mod some huge P is quite a bit\n> of work unless you're using some very high level language with\n> integrated bignums\u2014 and are comfortable hoping that their bignums are\n> sufficiently consistent with the spec).\n\nI already have a fairly polished implementation of my BIP, and it's not written in a \"very high-level language\"; it's C++, and the parts that do the big-integer arithmetic are basically C. I'm using the GMP library: very straightforward, very reliable, very fast.\n\nDo you have a use case in mind that would benefit from byte-wise operations rather than big-integer operations? I mean, I guess if you were trying to implement this BIP on a PIC microcontroller, it might be nice to process the secret in smaller bites. (No pun intended.) But I get this feeling that you're only pushing me away from the present incarnation of my proposal because you think it's too similar (but not quite similar enough) to a threshold ECDSA key scheme."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-04T17:51:56",
                "message_text_only": "On Fri, Apr 4, 2014 at 10:16 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Honestly, that sounds a lot more complicated than what I have now. I made my current implementation because I just wanted something simple that would let me divide a private key into shares for purposes of dissemination to my next of kin et al.\n\nI suggest you go look at some of the other secret sharing\nimplementations that use GF(2^8), they end up just being a couple of\ndozen lines of code. Pretty simple stuff, and they work efficiently\nfor all sizes of data, there are implementations in a multitude of\nlanguages. There are a whole bunch of these.\n\n> I already have a fairly polished implementation of my BIP, and it's not written in a \"very high-level language\"; it's C++, and the parts that do the big-integer arithmetic are basically C. I'm using the GMP library: very straightforward, very reliable, very fast.\n\nWith respect for the awesome work that GMP is\u2014  It's 250,000 lines of\nLGPLed code.  It's not just \"pic microcontrollers\" that would find\nthat scale of a dependency unwelcome.\n\n> Do you have a use case in mind that would benefit from byte-wise operations rather than big-integer operations? I mean, I guess if you were trying to implement this BIP on a PIC microcontroller, it might be nice to process the secret in smaller bites. (No pun intended.) But I get this feeling that you're only pushing me away from the present incarnation of my proposal because you think it's too similar (but not quite similar enough) to a threshold ECDSA key scheme.\n\nIt lets you efficiently scale to any size data being encoded without\nextra overhead or having additional primes. It can be compactly\nimplemented in Javascript (there are several implementations you can\nfind if you google), it shouldn't be burdensome to implement on a\ndevice like a trezor (much less a real microcontroller).\n\nAnd yea, sure, it's distinct from the implementation you'd use for\nthreshold signing. A threshold singing one would lack the size agility\nor the easy of implementation on limited devices.  So I do think that\nif there is to be two it would be good to gain the advantages that\ncan't be achieved in an threshold ECDSA compatible approach."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-04T18:53:41",
                "message_text_only": "On Friday, 4 April 2014, at 10:51 am, Gregory Maxwell wrote:\n> On Fri, Apr 4, 2014 at 10:16 AM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > Honestly, that sounds a lot more complicated than what I have now. I made my current implementation because I just wanted something simple that would let me divide a private key into shares for purposes of dissemination to my next of kin et al.\n> \n> I suggest you go look at some of the other secret sharing\n> implementations that use GF(2^8), they end up just being a couple of\n> dozen lines of code. Pretty simple stuff, and they work efficiently\n> for all sizes of data, there are implementations in a multitude of\n> languages. There are a whole bunch of these.\n\nOkay, I will.\n\n> > Do you have a use case in mind that would benefit from byte-wise operations rather than big-integer operations? I mean, I guess if you were trying to implement this BIP on a PIC microcontroller, it might be nice to process the secret in smaller bites. (No pun intended.) But I get this feeling that you're only pushing me away from the present incarnation of my proposal because you think it's too similar (but not quite similar enough) to a threshold ECDSA key scheme.\n> \n> It lets you efficiently scale to any size data being encoded without\n> extra overhead or having additional primes. It can be compactly\n> implemented in Javascript (there are several implementations you can\n> find if you google), it shouldn't be burdensome to implement on a\n> device like a trezor (much less a real microcontroller).\n\nThose are fair points.\n\n> And yea, sure, it's distinct from the implementation you'd use for\n> threshold signing. A threshold singing one would lack the size agility\n> or the easy of implementation on limited devices.  So I do think that\n> if there is to be two it would be good to gain the advantages that\n> can't be achieved in an threshold ECDSA compatible approach.\n\nI agree. I'll look into secret sharing in GF(2^8), but it may take me a few days."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-04T16:03:37",
                "message_text_only": "On Friday, 4 April 2014, at 5:51 pm, Nikita Schmidt wrote:\n> On 4 April 2014 01:42, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > The fingerprint field, Hash16(K), is presently specified as a 16-bit field. Rationale: There is no need to consume 4 bytes just to allow shares to be grouped together. And if someone has more than 100 different secrets, they probably have a good system for managing their shares and won't need the hash anyway.\n> \n> Right, of course.  Sorry, I didn't notice there was an update.  Two\n> bytes are plenty.\n> \n> I'm worried however about the dependency on SHA-512, which may be\n> stretching it for a tiny embedded application.  The other uses of\n> HashL can be avoided.  We are balancing here between consistency with\n> the rest of this proposal, where everything is done via HashL, and\n> consistency with the general practice of generating fingerprints with\n> SHA-256, like in Base58Check.\n\nI'd be fine with changing the key fingerprint algorithm to something else. Do you like CRC16?\n\n> >> Speaking of encoding, is it not wasteful to allocate three different\n> >> application/version bytes just for the sake of always starting with\n> >> 'SS'?  It would be OK if it were accepted as a BIP, but merely as a\n> >> de-facto standard it should aim at minimising future chances of\n> >> collision.\n> >\n> > I agree on principle, however I think the more user-acceptable behavior is for all base58-encoded Shamir shares to begin with a common prefix, such as \"SS\". Users are accustomed to relying on the prefix of the base58 encoding to understand what the object is: \"1\" for mainnet pubkey hash, \"3\" for mainnet script hash, \"5\" for uncompressed private key, \"P\" for passphrase-protected private key, etc.\n> \n> Yes, \"5\" for uncompressed private key and \"K\" or \"L\" for compressed\n> private key.  One A/VB and three prefixes in base58.  Am I the only\n> one to see this as a counter-example?\n> \n> However, thinking about this, I can find logic in wanting to stabilise\n> text prefixes at a cost of six A/V bytes (as per the latest spec).\n> There are only 58 first characters versus 256 AVBs, so we should\n> rather be saving the former.\n\nThe type of a base58-encoded object is determined not only by the application/version byte but by the payload length as well. For example, a base58-encoded object with an application/version byte of 0x80 but a payload length of 16 bytes would not be mistakable for a Bitcoin private key, even though AVB 0x80 does denote a Bitcoin private key when the payload length is 32 or 33 bytes. So it's not as simple as saying that this proposal costs 6 AVBs. It really costs one AVB for 18-byte payloads, one AVB for 21-byte payloads, one AVB for 34-byte payloads, one AVB fo 37-byte payloads, one AVB for 66-byte payloads, and one AVB for 69-byte payloads.\n\n> >> What about using the same P256 prime as for the elliptic curve?  Just\n> >> for consistency's sake.\n> >\n> > The initial draft of this BIP used the cyclic order (n) of the generator point on the secp256k1 elliptic curve as the modulus. The change to the present scheme was actually done for consistency's sake, so all sizes of secret can use a consistently defined modulus.\n> \n> Fair enough.  Although I would have chosen the field order (p) simply\n> because that's how all arithmetic already works in bitcoin.  One field\n> for everybody.  It's also very close to 2^256, although still smaller\n> than your maximum prime.  Now of course with different bit lengths we\n> have to pick one consistency over others.\n\nAs Gregory Maxwell pointed out, you can't use p when you're dealing with private keys, as that is the order of the finite field over which the elliptic curve is defined, but private keys are not points on that curve; a private key is a scalar number of times to multiply the generator point. That means you have to use the order of the generator point as the modulus when working with private keys.\n\n> >> Also, I'm somewhat inclined towards using the actual x instead of j in\n> >> the encoding.  I find it more direct and straightforward to encode the\n> >> pair (x, y).  And x=0 can denote a special case for future extensions.\n> >>  There is no technical reason behind this, it's just for (subjective)\n> >> clarity and consistency.\n> >\n> > There is a technical reason for encoding j rather than x[j]: it allows for the first 256 shares to be encoded, rather than only the first 255 shares.\n> \n> Wow, big deal.  It's hard to imagine anyone needing exactly 256\n> shares, but who knows.  And with j = x (starting from 1) we'd get\n> user-friendly share numbering and simpler formulas in the spec and\n> possibly in the implementation, with no off-by-one stuff.  And M\n> instead of M-2...\n\nIt's common for implementation limits to be powers of two. I don't foresee any off-by-one errors, as the spec is clear on the value of each byte in the encoding."
            },
            {
                "author": "Nikita Schmidt",
                "date": "2014-04-08T00:33:04",
                "message_text_only": ">\n> I'd be fine with changing the key fingerprint algorithm to something else. Do you like CRC16?\n>\nI like CRC16.  Do you intend to use it in conjunction with a cryptographic hash?\n\nRegarding the choice of fields, any implementation of this BIP will\nneed big integer arithmetic to do base-58 anyway.  The operations\nrequired for SSS are nearly the same as for base-58 and can probably\nbe done by the same subset of the chosen bignum library.  So in fact\nusing GF(2^8) will add complexity to both the BIP and its\nimplementations.  However, the maths in GF(2^8) is so simple that this\nadditional complexity can be considered negligible.\n\nAs a co-author of a bitcoin application running on a real\nmicrocontroller (not the sort of big-iron thing Trezor runs on), I was\nalso going to implement my SSS over a 256-bit prime field.  (I am not\ngoing into 512-bit master seeds at this time.)\n\nUniform processing of secrets of any size (instead of using different\nprimes for different cases) is a valid argument in favour of GF(2^8),\nthough.  I have no preference one way or another."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-08T00:38:22",
                "message_text_only": "On Mon, Apr 7, 2014 at 5:33 PM, Nikita Schmidt\n<nikita at megiontechnologies.com> wrote:\n> Regarding the choice of fields, any implementation of this BIP will\n> need big integer arithmetic to do base-58 anyway.\n\nNah, it doesn't. E.g.\nhttps://gitorious.org/bitcoin/libblkmaker/source/eb33f9c8e441ffef457a79d76ceed1ea20ab3059:base58.c\n\n> However, the maths in GF(2^8) is so simple that this\n> additional complexity can be considered negligible.\n[...]\n> Uniform processing of secrets of any size (instead of using different\n> primes for different cases) is a valid argument in favour of GF(2^8),\n> though.  I have no preference one way or another.\n\nI think this is really one of the bigger selling points."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-08T01:46:21",
                "message_text_only": "On Monday, 7 April 2014, at 5:38 pm, Gregory Maxwell wrote:\n> On Mon, Apr 7, 2014 at 5:33 PM, Nikita Schmidt\n> <nikita at megiontechnologies.com> wrote:\n> > Regarding the choice of fields, any implementation of this BIP will\n> > need big integer arithmetic to do base-58 anyway.\n> \n> Nah, it doesn't. E.g.\n> https://gitorious.org/bitcoin/libblkmaker/source/eb33f9c8e441ffef457a79d76ceed1ea20ab3059:base58.c\n\nThat only *decodes* Base58Check. It has no encode function, which would require biginteger division."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-08T02:07:45",
                "message_text_only": "On Mon, Apr 7, 2014 at 6:46 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> On Monday, 7 April 2014, at 5:38 pm, Gregory Maxwell wrote:\n>> On Mon, Apr 7, 2014 at 5:33 PM, Nikita Schmidt\n>> <nikita at megiontechnologies.com> wrote:\n>> > Regarding the choice of fields, any implementation of this BIP will\n>> > need big integer arithmetic to do base-58 anyway.\n>> Nah, it doesn't. E.g.\n>> https://gitorious.org/bitcoin/libblkmaker/source/eb33f9c8e441ffef457a79d76ceed1ea20ab3059:base58.c\n> That only *decodes* Base58Check. It has no encode function, which would require biginteger division.\n\nYes thats only a decode but the same process (long division with\nmanual carries) works just fine the other way. There is absolutely no\nneed to use big integers for this."
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-08T11:52:41",
                "message_text_only": "On Monday, 7 April 2014, at 7:07 pm, Gregory Maxwell wrote:\n> On Mon, Apr 7, 2014 at 6:46 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> > On Monday, 7 April 2014, at 5:38 pm, Gregory Maxwell wrote:\n> >> On Mon, Apr 7, 2014 at 5:33 PM, Nikita Schmidt\n> >> <nikita at megiontechnologies.com> wrote:\n> >> > Regarding the choice of fields, any implementation of this BIP will\n> >> > need big integer arithmetic to do base-58 anyway.\n> >> Nah, it doesn't. E.g.\n> >> https://gitorious.org/bitcoin/libblkmaker/source/eb33f9c8e441ffef457a79d76ceed1ea20ab3059:base58.c\n> > That only *decodes* Base58Check. It has no encode function, which would require biginteger division.\n> \n> Yes thats only a decode but the same process (long division with\n> manual carries) works just fine the other way. There is absolutely no\n> need to use big integers for this.\n\nWhat do you think a big-integer division by a word-sized divisor *is*? Obviously rolling your own is always an option. Are you just saying that Base58 encoding and decoding is easier than Shamir's Secret Sharing because the divisors are small?"
            },
            {
                "author": "Nikita Schmidt",
                "date": "2014-04-10T22:31:59",
                "message_text_only": "> What do you think a big-integer division by a word-sized divisor *is*? Obviously rolling your own is always an option. Are you just saying that Base58 encoding and decoding is easier than Shamir's Secret Sharing because the divisors are small?\n\nWell, yes, to be fair, in fact it is.  The small divisor and lack of\nmodulo arithmetic make base-58 encoding and decoding noticeably\nsmaller and easier than Shamir's Secret Sharing over GF(P256)."
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2014-04-22T08:06:09",
                "message_text_only": "This is a very useful BIP, and I am very much looking forward to\nimplementing it in Mycelium, in particular for bip32 wallets.\nTo me this is not about whether to use SSS instead of multisig\ntransactions. In the end you want to protect a secret (be it a HD master\nseed or a private key) in such a way that you can recover it in case of\npartial theft/loss. Whether I'll use the master seed to generate keys that\nare going to be used for multisig transactions is another discussion IMO.\n\nA few suggestions:\n - I think it is very useful to define different prefixes for testnet\nkeys/seeds. As a developer I use the testnet every day, and many of our\nusers use it for trying out new functionality. Mixing up keys meant for\ntestnet and mainnet is bad.\n - Please allow M=1. From a usability point of view it makes sense to allow\nthe user to select 1 share if that is what he wants.\n\nI have no strong opinions of whether to use GF(2^8) over Shamir's Secret\nSharing, but the simplicity of GF(2^8) is appealing.\n\n - Jan\n\n\nOn Fri, Apr 11, 2014 at 12:31 AM, Nikita Schmidt <\nnikita at megiontechnologies.com> wrote:\n\n> > What do you think a big-integer division by a word-sized divisor *is*?\n> Obviously rolling your own is always an option. Are you just saying that\n> Base58 encoding and decoding is easier than Shamir's Secret Sharing because\n> the divisors are small?\n>\n> Well, yes, to be fair, in fact it is.  The small divisor and lack of\n> modulo arithmetic make base-58 encoding and decoding noticeably\n> smaller and easier than Shamir's Secret Sharing over GF(P256).\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/1ba69db4/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-22T08:11:48",
                "message_text_only": "On Tuesday, 22 April 2014, at 10:06 am, Jan M\u00f8ller wrote:\n> This is a very useful BIP, and I am very much looking forward to\n> implementing it in Mycelium, in particular for bip32 wallets.\n> To me this is not about whether to use SSS instead of multisig\n> transactions. In the end you want to protect a secret (be it a HD master\n> seed or a private key) in such a way that you can recover it in case of\n> partial theft/loss. Whether I'll use the master seed to generate keys that\n> are going to be used for multisig transactions is another discussion IMO.\n> \n> A few suggestions:\n>  - I think it is very useful to define different prefixes for testnet\n> keys/seeds. As a developer I use the testnet every day, and many of our\n> users use it for trying out new functionality. Mixing up keys meant for\n> testnet and mainnet is bad.\n\nA fair point. I'll add some prefixes for testnet.\n\n>  - Please allow M=1. From a usability point of view it makes sense to allow\n> the user to select 1 share if that is what he wants.\n\nHow does that make sense? Decomposing a key/seed into 1 share is functionally equivalent to dispensing with the secret sharing scheme entirely.\n\n> I have no strong opinions of whether to use GF(2^8) over Shamir's Secret\n> Sharing, but the simplicity of GF(2^8) is appealing.\n\nI'll welcome forks of my draft BIP. I don't really have the inclination to research GF(2^8) secret sharing schemes and write an implementation at the present time, but if someone wants to take my BIP in that direction, then okay."
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2014-04-22T08:27:18",
                "message_text_only": ">\n>\n> >  - Please allow M=1. From a usability point of view it makes sense to\n> allow\n> > the user to select 1 share if that is what he wants.\n>\n> How does that make sense? Decomposing a key/seed into 1 share is\n> functionally equivalent to dispensing with the secret sharing scheme\n> entirely.\n>\n>\nI agree that it may look silly to have just one-of-one share from a\ntechnical point of view, but from an end-user point of view there could be\nreasons for just having one piece of paper to manage. If M can be 1 then\nthe software/hardware doesn't have to support multiple formats,\nimport/export paths + UI  (one for SIPA keys in one share, one for HD seeds\nin one share, one for SIPA keys + HD seeds in multiple shares).\n\nLess complexity & more freedom of choice.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/50e835f2/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-22T08:29:26",
                "message_text_only": "On Tuesday, 22 April 2014, at 10:27 am, Jan M\u00f8ller wrote:\n> > >  - Please allow M=1. From a usability point of view it makes sense to\n> > allow\n> > > the user to select 1 share if that is what he wants.\n> >\n> > How does that make sense? Decomposing a key/seed into 1 share is\n> > functionally equivalent to dispensing with the secret sharing scheme\n> > entirely.\n> >\n> >\n> I agree that it may look silly to have just one-of-one share from a\n> technical point of view, but from an end-user point of view there could be\n> reasons for just having one piece of paper to manage. If M can be 1 then\n> the software/hardware doesn't have to support multiple formats,\n> import/export paths + UI  (one for SIPA keys in one share, one for HD seeds\n> in one share, one for SIPA keys + HD seeds in multiple shares).\n> \n> Less complexity & more freedom of choice.\n\nAlright. It's a fair argument. Do you agree with encoding M using a bias of -1 so that M up to and including 256 can be encoded in one byte?"
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2014-04-22T08:39:52",
                "message_text_only": "Necessary Shares = M+1, not a problem\n\nI would probably encode N-of-M in 1 byte as I don't see good use cases with\nmore than 17 shares. Anyway, I am fine with it as it is.\n\n\nOn Tue, Apr 22, 2014 at 10:29 AM, Matt Whitlock <bip at mattwhitlock.name>wrote:\n\n> On Tuesday, 22 April 2014, at 10:27 am, Jan M\u00f8ller wrote:\n> > > >  - Please allow M=1. From a usability point of view it makes sense to\n> > > allow\n> > > > the user to select 1 share if that is what he wants.\n> > >\n> > > How does that make sense? Decomposing a key/seed into 1 share is\n> > > functionally equivalent to dispensing with the secret sharing scheme\n> > > entirely.\n> > >\n> > >\n> > I agree that it may look silly to have just one-of-one share from a\n> > technical point of view, but from an end-user point of view there could\n> be\n> > reasons for just having one piece of paper to manage. If M can be 1 then\n> > the software/hardware doesn't have to support multiple formats,\n> > import/export paths + UI  (one for SIPA keys in one share, one for HD\n> seeds\n> > in one share, one for SIPA keys + HD seeds in multiple shares).\n> >\n> > Less complexity & more freedom of choice.\n>\n> Alright. It's a fair argument. Do you agree with encoding M using a bias\n> of -1 so that M up to and including 256 can be encoded in one byte?\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/9a2dfdff/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-22T08:43:45",
                "message_text_only": "On Tuesday, 22 April 2014, at 10:39 am, Jan M\u00f8ller wrote:\n> Necessary Shares = M+1, not a problem\n> \n> I would probably encode N-of-M in 1 byte as I don't see good use cases with\n> more than 17 shares. Anyway, I am fine with it as it is.\n\nI agree that M > 16 is probably not a viable use case for human beings, but machines would probably be able to make use of it. I, for one, welcome our new robot overlords.\n\nAlso, the byte that encodes M\u22121 is optional, so if you're concerned about space, you can omit it (and the checksum)."
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2014-04-22T08:51:42",
                "message_text_only": "I am concerned about space, but more about usability :-)\n I'll definitely use both M and the checksum.\n\n\nOn Tue, Apr 22, 2014 at 10:43 AM, Matt Whitlock <bip at mattwhitlock.name>wrote:\n\n> On Tuesday, 22 April 2014, at 10:39 am, Jan M\u00f8ller wrote:\n> > Necessary Shares = M+1, not a problem\n> >\n> > I would probably encode N-of-M in 1 byte as I don't see good use cases\n> with\n> > more than 17 shares. Anyway, I am fine with it as it is.\n>\n> I agree that M > 16 is probably not a viable use case for human beings,\n> but machines would probably be able to make use of it. I, for one, welcome\n> our new robot overlords.\n>\n> Also, the byte that encodes M\u22121 is optional, so if you're concerned about\n> space, you can omit it (and the checksum).\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/65bfc4e4/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-22T09:13:01",
                "message_text_only": "On Tuesday, 22 April 2014, at 10:39 am, Jan M\u00f8ller wrote:\n> On Tue, Apr 22, 2014 at 10:29 AM, Matt Whitlock <bip at mattwhitlock.name>wrote:\n> > On Tuesday, 22 April 2014, at 10:27 am, Jan M\u00f8ller wrote:\n> > > > >  - Please allow M=1. From a usability point of view it makes sense to allow\n> > > > > the user to select 1 share if that is what he wants.\n> > > >\n> > > > How does that make sense? Decomposing a key/seed into 1 share is\n> > > > functionally equivalent to dispensing with the secret sharing scheme\n> > > > entirely.\n> > > >\n> > > I agree that it may look silly to have just one-of-one share from a\n> > > technical point of view, but from an end-user point of view there could be\n> > > reasons for just having one piece of paper to manage. If M can be 1 then\n> > > the software/hardware doesn't have to support multiple formats,\n> > > import/export paths + UI  (one for SIPA keys in one share, one for HD seeds\n> > > in one share, one for SIPA keys + HD seeds in multiple shares).\n> > >\n> > > Less complexity & more freedom of choice.\n> >\n> > Alright. It's a fair argument. Do you agree with encoding M using a bias\n> > of -1 so that M up to and including 256 can be encoded in one byte?\n> \n> Necessary Shares = M+1, not a problem\n> \n> I would probably encode N-of-M in 1 byte as I don't see good use cases with\n> more than 17 shares. Anyway, I am fine with it as it is.\n\nEncoding bias of M changed to -1, and test vectors updated:\nhttps://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki"
            },
            {
                "author": "Justin A",
                "date": "2014-04-22T11:50:34",
                "message_text_only": "Is there a reason you prefer doing the M-1 offset as opposed to limiting\nthe range to 255 instead? Seems like something that will certainly confuse\nsome developers in exchange for adding one more value at the high end of a\nrange. I don't gather there's much difference between 255 and 256 here is\nthere? Also requires the small bit of explanation to hang around as a rider\nin all future documentation, and the name of the field may not be\nself-documenting anymore.\n\nBy way of predicting how I'm wrong, perhaps it is better to have a field\nwhere all possible values are legitimate (by not biasing you would have to\ncheck it's not zero), or perhaps it's important that powers of 2 be\nrepresented here? Perhaps there's some use case at 256 that 255 just won't\ndo for?\n\nI'm mostly just curious, as I find problems and funnies crop up when people\nget clever with optimization of things like message bit-packing etc.. If\nit's not necessary then maybe better to keep to what's intuitive (i.e. the\ngirls name is clear and self-documenting)\n\nAnyway enough of my bike shedding!\nOn Apr 22, 2014 5:38 AM, \"Matt Whitlock\" <bip at mattwhitlock.name> wrote:\n\n> On Tuesday, 22 April 2014, at 10:39 am, Jan M\u00f8ller wrote:\n> > On Tue, Apr 22, 2014 at 10:29 AM, Matt Whitlock <bip at mattwhitlock.name\n> >wrote:\n> > > On Tuesday, 22 April 2014, at 10:27 am, Jan M\u00f8ller wrote:\n> > > > > >  - Please allow M=1. From a usability point of view it makes\n> sense to allow\n> > > > > > the user to select 1 share if that is what he wants.\n> > > > >\n> > > > > How does that make sense? Decomposing a key/seed into 1 share is\n> > > > > functionally equivalent to dispensing with the secret sharing\n> scheme\n> > > > > entirely.\n> > > > >\n> > > > I agree that it may look silly to have just one-of-one share from a\n> > > > technical point of view, but from an end-user point of view there\n> could be\n> > > > reasons for just having one piece of paper to manage. If M can be 1\n> then\n> > > > the software/hardware doesn't have to support multiple formats,\n> > > > import/export paths + UI  (one for SIPA keys in one share, one for\n> HD seeds\n> > > > in one share, one for SIPA keys + HD seeds in multiple shares).\n> > > >\n> > > > Less complexity & more freedom of choice.\n> > >\n> > > Alright. It's a fair argument. Do you agree with encoding M using a\n> bias\n> > > of -1 so that M up to and including 256 can be encoded in one byte?\n> >\n> > Necessary Shares = M+1, not a problem\n> >\n> > I would probably encode N-of-M in 1 byte as I don't see good use cases\n> with\n> > more than 17 shares. Anyway, I am fine with it as it is.\n>\n> Encoding bias of M changed to -1, and test vectors updated:\n> https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/ffcc6955/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-22T08:35:36",
                "message_text_only": "On Tuesday, 22 April 2014, at 4:11 am, Matt Whitlock wrote:\n> On Tuesday, 22 April 2014, at 10:06 am, Jan M\u00f8ller wrote:\n> >  - I think it is very useful to define different prefixes for testnet\n> > keys/seeds. As a developer I use the testnet every day, and many of our\n> > users use it for trying out new functionality. Mixing up keys meant for\n> > testnet and mainnet is bad.\n> \n> A fair point. I'll add some prefixes for testnet.\n\nTestnet encodings are added: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-22T08:39:19",
                "message_text_only": "Extra encoding for testnet is quite useless complexity in face of many alt chains.\nBIPS should be chain agnostic.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 22.04.2014, at 10:35, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\n> On Tuesday, 22 April 2014, at 4:11 am, Matt Whitlock wrote:\n>> On Tuesday, 22 April 2014, at 10:06 am, Jan M\u00f8ller wrote:\n>>> - I think it is very useful to define different prefixes for testnet\n>>> keys/seeds. As a developer I use the testnet every day, and many of our\n>>> users use it for trying out new functionality. Mixing up keys meant for\n>>> testnet and mainnet is bad.\n>> \n>> A fair point. I'll add some prefixes for testnet.\n> \n> Testnet encodings are added: https://github.com/whitslack/btctool/blob/bip/bip-xxxx.mediawiki\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/00dd9e11/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/00dd9e11/attachment.sig>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-22T08:40:39",
                "message_text_only": "On Tuesday, 22 April 2014, at 10:39 am, Tamas Blummer wrote:\n> Extra encoding for testnet is quite useless complexity in face of many alt chains.\n> BIPS should be chain agnostic.\n\nI would argue that Bitcoin should be altcoin-agnostic. :)\n\nI have no interest in catering to altcoins. But that's just me."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-22T15:32:23",
                "message_text_only": "Testnet vs mainnet is quite a separate issue than bitcoin vs altcoin.\nUnfortunately few of the alts ever figured this out.\n\nOn 04/22/2014 01:39 AM, Tamas Blummer wrote:\n> Extra encoding for testnet is quite useless complexity in face of many\n> alt chains.\n> BIPS should be chain agnostic.\n> \n> Regards,\n> \n> Tamas Blummer\n> http://bitsofproof.com"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-22T15:49:10",
                "message_text_only": "I use several test chains while testing my software, the official test net, a standalone net in house and even chains only created on the fly for unit tests. I found no use of distinguishing serialization of keys while using any of them.\n\nIf you have some deep insights about why this is needed share it, as I am not goint to guess your valuable thoughts.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 22.04.2014, at 17:32, Mark Friedenbach <mark at monetize.io> wrote:\n\n> Testnet vs mainnet is quite a separate issue than bitcoin vs altcoin.\n> Unfortunately few of the alts ever figured this out.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/4f3b8727/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/4f3b8727/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-22T17:03:59",
                "message_text_only": "What I was saying is that while it may or may not make sense to have\nseparate prefixes for testnet, it makes no sense to have per-alt prefixes.\n\nOn 04/22/2014 08:49 AM, Tamas Blummer wrote:\n> I use several test chains while testing my software, the official test\n> net, a standalone net in house and even chains only created on the fly\n> for unit tests. I found no use of distinguishing serialization of keys\n> while using any of them.\n> \n> If you have some deep insights about why this is needed share it, as I\n> am not goint to guess your valuable thoughts.\n> \n> Regards,\n> \n> Tamas Blummer\n> http://bitsofproof.com\n> \n> On 22.04.2014, at 17:32, Mark Friedenbach <mark at monetize.io\n> <mailto:mark at monetize.io>> wrote:\n> \n>> Testnet vs mainnet is quite a separate issue than bitcoin vs altcoin.\n>> Unfortunately few of the alts ever figured this out.\n>"
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2014-04-22T17:07:24",
                "message_text_only": "Treating testnet differently is quite the norm, we have that in BIP 32, 38,\n70, SIPA private keys (no BIP for that I guess), bitcoin addresses etc. At\nthe same time none of them define values for alt coins as far as I recall.\n\n\nOn Tue, Apr 22, 2014 at 5:49 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> I use several test chains while testing my software, the official test\n> net, a standalone net in house and even chains only created on the fly for\n> unit tests. I found no use of distinguishing serialization of keys while\n> using any of them.\n>\n> If you have some deep insights about why this is needed share it, as I am\n> not goint to guess your valuable thoughts.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n> On 22.04.2014, at 17:32, Mark Friedenbach <mark at monetize.io> wrote:\n>\n> Testnet vs mainnet is quite a separate issue than bitcoin vs altcoin.\n> Unfortunately few of the alts ever figured this out.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/8c017d18/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-22T18:29:50",
                "message_text_only": "Yes, it is current norm. I am questioning if we should hang on to it in BIPs.\n\nI see testnet as a tool for a certain type of testing. Its existence is likely a consequence of Satoshi not writing unit tests and having automated integration tests, but creating a shadow chain to try things out, mostly manually.\n\nI do not say testnet (as we know) would not be useful for certain tests. E.g. as we developed myTREZOR with slush it was useful to have a shared chain with worthless tokens and transactions we can both refer to. However for our automated tests chains-in-a-box are better as we can easily create and exactly re-create wierd situations on-the-fly.\n\nWhile talking about BIP32 hierarchy use, several people argued to use a level of the hierarchy to identify the chain the key is used on. That level could identify testnet but as well an alt coin chain.\n\nAbove leads me thinking that testnet is far less important than to be addressed in every future BIP.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 22.04.2014, at 19:07, Jan M\u00f8ller <jan.moller at gmail.com> wrote:\n\n> Treating testnet differently is quite the norm, we have that in BIP 32, 38, 70, SIPA private keys (no BIP for that I guess), bitcoin addresses etc. At the same time none of them define values for alt coins as far as I recall.\n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/b51096da/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/b51096da/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-22T18:46:18",
                "message_text_only": "On Tue, Apr 22, 2014 at 11:29 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> Yes, it is current norm. I am questioning if we should hang on to it in\n> BIPs.\n>\n> I see testnet as a tool for a certain type of testing. Its existence is\n> likely a consequence of Satoshi not writing unit tests and having automated\n> integration tests, but creating a shadow chain to try things out, mostly\n> manually.\n\nSatoshi didn't create testnet.  Testnet exists so you can do public\ntests involving multiple people and services, so you can have shadow\nversions of sites and services interacting with each other and trading\nworthless tokens. Importantly, testnet also creates a public live fire\nenvironment where grey hats can try out their attacks while minimizing\ndamage (and it's been very successful at this).  Testnet is not an\nalternative to the unit and integration tests that exist in Bitcoin\ncore but exists for more or less completely different reasons.\n\n> Above leads me thinking that testnet is far less important than to be\n> addressed in every future BIP.\n\nTestnet is not normally addressed in BIPs at all, except for soft fork\nbips that had compressed deployment schedules on testnet.  For address\nlike specification we have always used a version byte and there is a\ncommon encoding for version bytes that flags the network ID in the\nbyte."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-23T05:33:32",
                "message_text_only": "So you agree, that SSS should not contain specific flag for testnet?\n\nOr for that matter not even BIP32 needs them since it is not an address to send to.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 22.04.2014, at 20:46, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> Testnet is not normally addressed in BIPs at all, except for soft fork\n> bips that had compressed deployment schedules on testnet.  For address\n> like specification we have always used a version byte and there is a\n> common encoding for version bytes that flags the network ID in the\n> byte.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/80731794/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/80731794/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T06:16:25",
                "message_text_only": "On Tue, Apr 22, 2014 at 10:33 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> So you agree, that SSS should not contain specific flag for testnet?\n>\n> Or for that matter not even BIP32 needs them since it is not an address to\n> send to.\n\nI think the convention we have so far is that addresses and address\nrelate thing we share normally contain an opaque 'version' identifier\nwhich we use to identify the purpose for the data (E.g. network\nmeaning, etc.) and I think its a generally reasonable custom."
            },
            {
                "author": "Nikita Schmidt",
                "date": "2014-04-22T13:37:36",
                "message_text_only": ">\n> A fair point. I'll add some prefixes for testnet.\n>\n\nI've looked at the latest draft and am worried about the increased AVB\nnamespace usage.  Would it make sense to differentiate main/testnet in\nthe prefix byte instead of the AVB?  Perhaps aiming for ST rather than\nTS.\n\n> I'll welcome forks of my draft BIP. I don't really have the inclination to research GF(2^8) secret sharing schemes and write an implementation at the present time, but if someone wants to take my BIP in that direction, then okay.\n\nI'm willing to fork it.\nThe maximum number of shares possible over GF(2^8) is 255.  That would\nmake M and x biases unnecessary."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-22T08:15:33",
                "message_text_only": "On Tue, Apr 22, 2014 at 1:06 AM, Jan M\u00f8ller <jan.moller at gmail.com> wrote:\n> This is a very useful BIP, and I am very much looking forward to\n> implementing it in Mycelium, in particular for bip32 wallets.\n\nI haven't seen commentary from you on the Kogelman draft, it would be\nhelpful there: https://bitcointalk.org/index.php?topic=258678.0"
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2014-04-22T08:49:41",
                "message_text_only": "I did comment on it back in october (\nhttps://bitcointalk.org/index.php?topic=258678.msg3298089#msg3298089) :-)\nBut I must admit that I haven't been tracking it since then.\n\nI have never been a proponent of BIP 38 (which this BIP is derived from)\nand generally think that encrypting a secret with a human generated\npassword is silly for many reasons (Let me know if I should repeat my list\nof concerns). As far as I remember we are pretty much on the same page here.\nUsing SSS is superior in every way that I can think of.\n\n\nOn Tue, Apr 22, 2014 at 10:15 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> On Tue, Apr 22, 2014 at 1:06 AM, Jan M\u00f8ller <jan.moller at gmail.com> wrote:\n> > This is a very useful BIP, and I am very much looking forward to\n> > implementing it in Mycelium, in particular for bip32 wallets.\n>\n> I haven't seen commentary from you on the Kogelman draft, it would be\n> helpful there: https://bitcointalk.org/index.php?topic=258678.0\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/f1e3ca35/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-04T02:38:09",
                "message_text_only": "On Sat, Mar 29, 2014 at 2:10 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n> Okay, you've convinced me. However, it looks like the consensus here is that my BIP is unneeded, so I'm not sure it would be worth the effort for me to improve it with your suggestions.\n\nDiscussion of whether you should or should not use SSS is separate\nfrom whether you should or should not write a BIP.\n\nIf people are using SSS in the field, it is better to write a BIP than\nnot.  Informational BIPs describing existing practice can be useful.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-22T08:43:57",
                "message_text_only": "It is not about taste, but the fact that BIPs are used by many chains. \nAlts are useful for at least for experiments, and I think that the notion of main and testnet is superseeded by a wide choice of chains.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/8cbcc6fe/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/8cbcc6fe/attachment.sig>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-22T08:47:26",
                "message_text_only": "On Tuesday, 22 April 2014, at 10:43 am, Tamas Blummer wrote:\n> It is not about taste, but the fact that BIPs are used by many chains. \n> Alts are useful for at least for experiments, and I think that the notion of main and testnet is superseeded by a wide choice of chains.\n\nThere aren't enough distinct bytes to allow for every altcoin. I believe what they do is their own business and is outside the scope of a Bitcoin Improvement Proposal.\n\nIf your argument were valid, then we would also have to apply it to private keys. Why do we bother specifying a separate encoding for Bitcoin testnet private keys? There are so many altcoins, after all."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-22T08:50:37",
                "message_text_only": "I do not suggest to encode the chain, in contrary.\n\nI consider the encoding of main and testnet in WIF and BIP32 as legacy, that I ignore, and suggest that new BIPs should no longer carry this forward.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/171ac6b5/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/171ac6b5/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Presenting a BIP for Shamir's Secret Sharing of Bitcoin private keys",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Tamas Blummer",
                "Justin A",
                "Nikita Schmidt",
                "Matt Whitlock",
                "Gregory Maxwell",
                "Mark Friedenbach",
                "Jan M\u00f8ller"
            ],
            "messages_count": 45,
            "total_messages_chars_count": 63535
        }
    },
    {
        "title": "[Bitcoin-development] Draft BIP for seamless website authentication using Bitcoin address",
        "thread_messages": [
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-04T12:15:56",
                "message_text_only": "Hello,\n\nI've written a draft BIP description of an authentication protocol based on\nBitcoin public address.\n\nBy authentication we mean to prove to a service/application that we control\na specific Bitcoin address by signing a challenge, and that all related\ndata and settings may securely be linked to our session.\n\nThe aim is to greatly facilitate sign ups and logins to services and\napplications, improving the Bitcoin ecosystem as a whole.\n\nhttps://github.com/bitid/bitid/blob/master/BIP_draft.md\n\nDemo website :\nhttp://bitid-demo.herokuapp.com/\n\nClassical password authentication is an insecure process that could be\nsolved with public key cryptography. The problem is that it theoretically\noffloads a lot of complexity and responsibility on the user. Managing\nprivate keys securely is complex. However this complexity is already being\naddressed in the Bitcoin ecosystem. So doing public key authentication is\npractically a free lunch to bitcoiners.\n\nI've formatted the protocol description as a BIP because this is the only\nway to have all major wallets implementing it, and because it completely\nfits in my opinion the BIP \"process\" category.\n\nPlease read it and let me know your thoughts and comments so we can improve\non this draft.\n\nEric Larcheveque\nelarch at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/78771884/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-04T13:08:57",
                "message_text_only": "This comes up every few months. I think the problem you are trying to solve\nis already solved by SSL client certificates, and if you want to help make\nthem more widespread the programs you need to upgrade are web browsers and\nnot Bitcoin wallets. There are certainly bits of infrastructure you could\nreuse here and there, like perhaps a TREZOR with a custom firmware\nextension for really advanced/keen users, but overall Bitcoin and website\nauthentication are unrelated problems.\n\n\nOn Fri, Apr 4, 2014 at 2:15 PM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n\n> Hello,\n>\n> I've written a draft BIP description of an authentication protocol based\n> on Bitcoin public address.\n>\n> By authentication we mean to prove to a service/application that we\n> control a specific Bitcoin address by signing a challenge, and that all\n> related data and settings may securely be linked to our session.\n>\n> The aim is to greatly facilitate sign ups and logins to services and\n> applications, improving the Bitcoin ecosystem as a whole.\n>\n> https://github.com/bitid/bitid/blob/master/BIP_draft.md\n>\n> Demo website :\n> http://bitid-demo.herokuapp.com/\n>\n> Classical password authentication is an insecure process that could be\n> solved with public key cryptography. The problem is that it theoretically\n> offloads a lot of complexity and responsibility on the user. Managing\n> private keys securely is complex. However this complexity is already being\n> addressed in the Bitcoin ecosystem. So doing public key authentication is\n> practically a free lunch to bitcoiners.\n>\n> I've formatted the protocol description as a BIP because this is the only\n> way to have all major wallets implementing it, and because it completely\n> fits in my opinion the BIP \"process\" category.\n>\n> Please read it and let me know your thoughts and comments so we can\n> improve on this draft.\n>\n> Eric Larcheveque\n> elarch at gmail.com\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/99be34a9/attachment.html>"
            },
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-04T13:22:59",
                "message_text_only": "What I'm trying to achieve, is to have a very simple way of authenticating\nyourself with one Bitcoin address from your wallet.\nFor most of the people using Bitcoin, their wallet is on their phone.\n\nThe UX is clear and simple :\n1. click on \"connect with Bitcoin\" (the audience is normal people)\n2. flash the QRcode with your wallet (blockchain.info, mycelium, ...)\n3. accept the authentication request (same style than OpenID or Facebook\nconnect)\n4. user is autologged and identified by the chosen Bitcoin public address\n\nIt makes sense only if major wallets are supporting the protocol. If you\nneed to install a plugin or download a third party software, no one will do\nit.\nI see only benefits for the entire ecosystem, and if I'm working on such a\nproposition it is because I really need this feature.\n\nOf course, it can be done without a BIP, I just need to convince wallet\ndeveloppers one by one to implement the feature.\nBut I thought it was much better to start the \"official\" way, so all wallet\ncould easily find and implement the same authentication mechanism.\n\n>  Bitcoin and website authentication are unrelated problems\n\nI respectfully disagree. Many services require your Bitcoin address, and to\ndo that they artificially request an email/password to store it.\nThis is not about authentication as an identity (as \"I'm Eric\nLarcheveque\"), but as in \"I'm proving to you that I control this address\".\n\nWithout such a standard protocol, you could never envision a pure Bitcoin\nphysical locker rental, or booking an hotel room via Bitcoin and opening\nthe door through the paying address.\n\nEric\n\n\n\nOn Fri, Apr 4, 2014 at 3:08 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> This comes up every few months. I think the problem you are trying to\n> solve is already solved by SSL client certificates, and if you want to help\n> make them more widespread the programs you need to upgrade are web browsers\n> and not Bitcoin wallets. There are certainly bits of infrastructure you\n> could reuse here and there, like perhaps a TREZOR with a custom firmware\n> extension for really advanced/keen users, but overall Bitcoin and website\n> authentication are unrelated problems.\n>\n>\n> On Fri, Apr 4, 2014 at 2:15 PM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n>\n>> Hello,\n>>\n>> I've written a draft BIP description of an authentication protocol based\n>> on Bitcoin public address.\n>>\n>> By authentication we mean to prove to a service/application that we\n>> control a specific Bitcoin address by signing a challenge, and that all\n>> related data and settings may securely be linked to our session.\n>>\n>> The aim is to greatly facilitate sign ups and logins to services and\n>> applications, improving the Bitcoin ecosystem as a whole.\n>>\n>> https://github.com/bitid/bitid/blob/master/BIP_draft.md\n>>\n>> Demo website :\n>> http://bitid-demo.herokuapp.com/\n>>\n>> Classical password authentication is an insecure process that could be\n>> solved with public key cryptography. The problem is that it theoretically\n>> offloads a lot of complexity and responsibility on the user. Managing\n>> private keys securely is complex. However this complexity is already being\n>> addressed in the Bitcoin ecosystem. So doing public key authentication is\n>> practically a free lunch to bitcoiners.\n>>\n>> I've formatted the protocol description as a BIP because this is the only\n>> way to have all major wallets implementing it, and because it completely\n>> fits in my opinion the BIP \"process\" category.\n>>\n>> Please read it and let me know your thoughts and comments so we can\n>> improve on this draft.\n>>\n>> Eric Larcheveque\n>> elarch at gmail.com\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/caca26c8/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-04-04T13:32:40",
                "message_text_only": "Using a bitcoin address repeatedly is something we're trying to move away\nfrom.\n\nAnd using a bitcoin address as a persistent identity key feels like the\nwrong direction to me.\n\nBetter to use something like client certificates, the FIDO alliance's\n(new!) specs:\n  http://fidoalliance.org/specifications/download\n\n... or Steve Gibson's proposed SQRL system:\n  https://www.grc.com/sqrl/sqrl.htm\n\nIf one of those systems gets critical mass and actually starts being\nsuccessful, then I think it would make sense to specify a standard way of\nusing a HD wallet's deterministic seed to derive a key used for the FIDO or\nSQRL systems.\n\n\n\n\nOn Fri, Apr 4, 2014 at 9:22 AM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n\n> What I'm trying to achieve, is to have a very simple way of authenticating\n> yourself with one Bitcoin address from your wallet.\n> For most of the people using Bitcoin, their wallet is on their phone.\n>\n> The UX is clear and simple :\n> 1. click on \"connect with Bitcoin\" (the audience is normal people)\n> 2. flash the QRcode with your wallet (blockchain.info, mycelium, ...)\n> 3. accept the authentication request (same style than OpenID or Facebook\n> connect)\n> 4. user is autologged and identified by the chosen Bitcoin public address\n>\n> It makes sense only if major wallets are supporting the protocol. If you\n> need to install a plugin or download a third party software, no one will do\n> it.\n> I see only benefits for the entire ecosystem, and if I'm working on such a\n> proposition it is because I really need this feature.\n>\n> Of course, it can be done without a BIP, I just need to convince wallet\n> developpers one by one to implement the feature.\n> But I thought it was much better to start the \"official\" way, so all\n> wallet could easily find and implement the same authentication mechanism.\n>\n> >  Bitcoin and website authentication are unrelated problems\n>\n> I respectfully disagree. Many services require your Bitcoin address, and\n> to do that they artificially request an email/password to store it.\n> This is not about authentication as an identity (as \"I'm Eric\n> Larcheveque\"), but as in \"I'm proving to you that I control this address\".\n>\n> Without such a standard protocol, you could never envision a pure Bitcoin\n> physical locker rental, or booking an hotel room via Bitcoin and opening\n> the door through the paying address.\n>\n> Eric\n>\n>\n>\n> On Fri, Apr 4, 2014 at 3:08 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> This comes up every few months. I think the problem you are trying to\n>> solve is already solved by SSL client certificates, and if you want to help\n>> make them more widespread the programs you need to upgrade are web browsers\n>> and not Bitcoin wallets. There are certainly bits of infrastructure you\n>> could reuse here and there, like perhaps a TREZOR with a custom firmware\n>> extension for really advanced/keen users, but overall Bitcoin and website\n>> authentication are unrelated problems.\n>>\n>>\n>> On Fri, Apr 4, 2014 at 2:15 PM, Eric Larchev\u00eaque <elarch at gmail.com>wrote:\n>>\n>>> Hello,\n>>>\n>>> I've written a draft BIP description of an authentication protocol based\n>>> on Bitcoin public address.\n>>>\n>>> By authentication we mean to prove to a service/application that we\n>>> control a specific Bitcoin address by signing a challenge, and that all\n>>> related data and settings may securely be linked to our session.\n>>>\n>>> The aim is to greatly facilitate sign ups and logins to services and\n>>> applications, improving the Bitcoin ecosystem as a whole.\n>>>\n>>> https://github.com/bitid/bitid/blob/master/BIP_draft.md\n>>>\n>>> Demo website :\n>>> http://bitid-demo.herokuapp.com/\n>>>\n>>> Classical password authentication is an insecure process that could be\n>>> solved with public key cryptography. The problem is that it theoretically\n>>> offloads a lot of complexity and responsibility on the user. Managing\n>>> private keys securely is complex. However this complexity is already being\n>>> addressed in the Bitcoin ecosystem. So doing public key authentication is\n>>> practically a free lunch to bitcoiners.\n>>>\n>>> I've formatted the protocol description as a BIP because this is the\n>>> only way to have all major wallets implementing it, and because it\n>>> completely fits in my opinion the BIP \"process\" category.\n>>>\n>>> Please read it and let me know your thoughts and comments so we can\n>>> improve on this draft.\n>>>\n>>> Eric Larcheveque\n>>> elarch at gmail.com\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/a545ece6/attachment.html>"
            },
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-04T13:47:45",
                "message_text_only": "> Using a bitcoin address repeatedly is something we're trying to move away\nfrom.\n\nThis is indeed a flaw of the proposed protocol. However it really depends\nin the end of the usage : you could use an auth just once, to redeem a good\nyou paid, or multiple times if this makes a sense (mining pool app for\ninstance).\n\n> And using a bitcoin address as a persistent identity key feels like the\nwrong direction to me.\n\nWhat would be really the difference between artificially create a\ncertificate for identity and selecting one address for identity?\n\n> Better to use something like client certificates, the FIDO alliance's\n(new!) specs:\n>   http://fidoalliance.org/specifications/download\n> ... or Steve Gibson's proposed SQRL system:\n>   https://www.grc.com/sqrl/sqrl.htm\n\nThe proposal is nothing more than sqrl scoped to Bitcoin keys.\n\n> If one of those systems gets critical mass and actually starts being\nsuccessful, then I think it would make sense to specify a standard way of\nusing a HD wallet's deterministic seed to derive a key used for the FIDO or\nSQRL systems.\n\nThis could be a very interesting approach. But I think the system which\nwould get critical mass is the one which would be implemented into major\nBitcoin wallets.\n\nWhy adding another app or software when you already have all you need?\n\n>\n>\n>\n>\n> On Fri, Apr 4, 2014 at 9:22 AM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n>>\n>> What I'm trying to achieve, is to have a very simple way of\nauthenticating yourself with one Bitcoin address from your wallet.\n>> For most of the people using Bitcoin, their wallet is on their phone.\n>>\n>> The UX is clear and simple :\n>> 1. click on \"connect with Bitcoin\" (the audience is normal people)\n>> 2. flash the QRcode with your wallet (blockchain.info, mycelium, ...)\n>> 3. accept the authentication request (same style than OpenID or Facebook\nconnect)\n>> 4. user is autologged and identified by the chosen Bitcoin public address\n>>\n>> It makes sense only if major wallets are supporting the protocol. If you\nneed to install a plugin or download a third party software, no one will do\nit.\n>> I see only benefits for the entire ecosystem, and if I'm working on such\na proposition it is because I really need this feature.\n>>\n>> Of course, it can be done without a BIP, I just need to convince wallet\ndeveloppers one by one to implement the feature.\n>> But I thought it was much better to start the \"official\" way, so all\nwallet could easily find and implement the same authentication mechanism.\n>>\n>> >  Bitcoin and website authentication are unrelated problems\n>>\n>> I respectfully disagree. Many services require your Bitcoin address, and\nto do that they artificially request an email/password to store it.\n>> This is not about authentication as an identity (as \"I'm Eric\nLarcheveque\"), but as in \"I'm proving to you that I control this address\".\n>>\n>> Without such a standard protocol, you could never envision a pure\nBitcoin physical locker rental, or booking an hotel room via Bitcoin and\nopening the door through the paying address.\n>>\n>> Eric\n>>\n>>\n>>\n>> On Fri, Apr 4, 2014 at 3:08 PM, Mike Hearn <mike at plan99.net> wrote:\n>>>\n>>> This comes up every few months. I think the problem you are trying to\nsolve is already solved by SSL client certificates, and if you want to help\nmake them more widespread the programs you need to upgrade are web browsers\nand not Bitcoin wallets. There are certainly bits of infrastructure you\ncould reuse here and there, like perhaps a TREZOR with a custom firmware\nextension for really advanced/keen users, but overall Bitcoin and website\nauthentication are unrelated problems.\n>>>\n>>>\n>>> On Fri, Apr 4, 2014 at 2:15 PM, Eric Larchev\u00eaque <elarch at gmail.com>\nwrote:\n>>>>\n>>>> Hello,\n>>>>\n>>>> I've written a draft BIP description of an authentication protocol\nbased on Bitcoin public address.\n>>>>\n>>>> By authentication we mean to prove to a service/application that we\ncontrol a specific Bitcoin address by signing a challenge, and that all\nrelated data and settings may securely be linked to our session.\n>>>>\n>>>> The aim is to greatly facilitate sign ups and logins to services and\napplications, improving the Bitcoin ecosystem as a whole.\n>>>>\n>>>> https://github.com/bitid/bitid/blob/master/BIP_draft.md\n>>>>\n>>>> Demo website :\n>>>> http://bitid-demo.herokuapp.com/\n>>>>\n>>>> Classical password authentication is an insecure process that could be\nsolved with public key cryptography. The problem is that it theoretically\noffloads a lot of complexity and responsibility on the user. Managing\nprivate keys securely is complex. However this complexity is already being\naddressed in the Bitcoin ecosystem. So doing public key authentication is\npractically a free lunch to bitcoiners.\n>>>>\n>>>> I've formatted the protocol description as a BIP because this is the\nonly way to have all major wallets implementing it, and because it\ncompletely fits in my opinion the BIP \"process\" category.\n>>>>\n>>>> Please read it and let me know your thoughts and comments so we can\nimprove on this draft.\n>>>>\n>>>> Eric Larcheveque\n>>>> elarch at gmail.com\n>>>>\n>>>>\n>>>>\n------------------------------------------------------------------------------\n>>>>\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>\n>>\n>>\n>>\n------------------------------------------------------------------------------\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> --\n> --\n> Gavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/f2c5cf7a/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-04-07T20:08:39",
                "message_text_only": "I have to play dissenter here again..\n\nUsing a bitcoin address as a persistent identity key is the first real-world\nuse of Bitcoin that I can imagine will make it a 'killer app' that everyone\nand their grandma will want to use.\n\nIf you think 'certificates' are a good solution, then there is some way in\nwhich we have dramatically divergent goals.\n\nI like distributed, decentralized systems in which anyone can download the \ncode and be free to participate in the things they want to securely and \nreliably.\n\nAs soon as I hear 'certificate', I see a system in which one must pay at toll\nto speak, and which puts the listeners at risk because a certificate issuer\nis such a high-value target for malicious attack.\n\nSelf-signed certificates are great for techno-wizards, but grandma has no\nidea if the self-signed cert was signed by her grandson, or by the hacker\ntrying to redirect her social security check.\n\n\"This is your bitcoin address, it's your money AND your key to log into \nyour bank website securely, so don't lose it. If you want our address\nprotection insurance service that will be $20 per month, and if you do lose\nit, we'll fix it. If you keep losing it, then your rates will go up, just \nlike car insurance if you keep crashing\"\n\n\nOn Fri, Apr 04, 2014 at 09:32:40AM -0400, Gavin Andresen wrote:\n> Using a bitcoin address repeatedly is something we're trying to move away\n> from.\n> \n> And using a bitcoin address as a persistent identity key feels like the\n> wrong direction to me.\n> \n> Better to use something like client certificates, the FIDO alliance's\n> (new!) specs:\n>   http://fidoalliance.org/specifications/download\n> \n> ... or Steve Gibson's proposed SQRL system:\n>   https://www.grc.com/sqrl/sqrl.htm\n> \n> If one of those systems gets critical mass and actually starts being\n> successful, then I think it would make sense to specify a standard way of\n> using a HD wallet's deterministic seed to derive a key used for the FIDO or\n> SQRL systems.\n> \n> \n> \n> \n> On Fri, Apr 4, 2014 at 9:22 AM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n> \n> > What I'm trying to achieve, is to have a very simple way of authenticating\n> > yourself with one Bitcoin address from your wallet.\n> > For most of the people using Bitcoin, their wallet is on their phone.\n> >\n> > The UX is clear and simple :\n> > 1. click on \"connect with Bitcoin\" (the audience is normal people)\n> > 2. flash the QRcode with your wallet (blockchain.info, mycelium, ...)\n> > 3. accept the authentication request (same style than OpenID or Facebook\n> > connect)\n> > 4. user is autologged and identified by the chosen Bitcoin public address\n> >\n> > It makes sense only if major wallets are supporting the protocol. If you\n> > need to install a plugin or download a third party software, no one will do\n> > it.\n> > I see only benefits for the entire ecosystem, and if I'm working on such a\n> > proposition it is because I really need this feature.\n> >\n> > Of course, it can be done without a BIP, I just need to convince wallet\n> > developpers one by one to implement the feature.\n> > But I thought it was much better to start the \"official\" way, so all\n> > wallet could easily find and implement the same authentication mechanism.\n> >\n> > >  Bitcoin and website authentication are unrelated problems\n> >\n> > I respectfully disagree. Many services require your Bitcoin address, and\n> > to do that they artificially request an email/password to store it.\n> > This is not about authentication as an identity (as \"I'm Eric\n> > Larcheveque\"), but as in \"I'm proving to you that I control this address\".\n> >\n> > Without such a standard protocol, you could never envision a pure Bitcoin\n> > physical locker rental, or booking an hotel room via Bitcoin and opening\n> > the door through the paying address.\n> >\n> > Eric\n> >\n> >\n> >\n> > On Fri, Apr 4, 2014 at 3:08 PM, Mike Hearn <mike at plan99.net> wrote:\n> >\n> >> This comes up every few months. I think the problem you are trying to\n> >> solve is already solved by SSL client certificates, and if you want to help\n> >> make them more widespread the programs you need to upgrade are web browsers\n> >> and not Bitcoin wallets. There are certainly bits of infrastructure you\n> >> could reuse here and there, like perhaps a TREZOR with a custom firmware\n> >> extension for really advanced/keen users, but overall Bitcoin and website\n> >> authentication are unrelated problems.\n> >>\n> >>\n> >> On Fri, Apr 4, 2014 at 2:15 PM, Eric Larchev\u00eaque <elarch at gmail.com>wrote:\n> >>\n> >>> Hello,\n> >>>\n> >>> I've written a draft BIP description of an authentication protocol based\n> >>> on Bitcoin public address.\n> >>>\n> >>> By authentication we mean to prove to a service/application that we\n> >>> control a specific Bitcoin address by signing a challenge, and that all\n> >>> related data and settings may securely be linked to our session.\n> >>>\n> >>> The aim is to greatly facilitate sign ups and logins to services and\n> >>> applications, improving the Bitcoin ecosystem as a whole.\n> >>>\n> >>> https://github.com/bitid/bitid/blob/master/BIP_draft.md\n> >>>\n> >>> Demo website :\n> >>> http://bitid-demo.herokuapp.com/\n> >>>\n> >>> Classical password authentication is an insecure process that could be\n> >>> solved with public key cryptography. The problem is that it theoretically\n> >>> offloads a lot of complexity and responsibility on the user. Managing\n> >>> private keys securely is complex. However this complexity is already being\n> >>> addressed in the Bitcoin ecosystem. So doing public key authentication is\n> >>> practically a free lunch to bitcoiners.\n> >>>\n> >>> I've formatted the protocol description as a BIP because this is the\n> >>> only way to have all major wallets implementing it, and because it\n> >>> completely fits in my opinion the BIP \"process\" category.\n> >>>\n> >>> Please read it and let me know your thoughts and comments so we can\n> >>> improve on this draft.\n> >>>\n> >>> Eric Larcheveque\n> >>> elarch at gmail.com\n> >>>\n> >>>\n> >>>\n> >>> ------------------------------------------------------------------------------\n> >>>\n> >>> _______________________________________________\n> >>> Bitcoin-development mailing list\n> >>> Bitcoin-development at lists.sourceforge.net\n> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>\n> >>>\n> >>\n> >\n> >\n> > ------------------------------------------------------------------------------\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> \n> \n> -- \n> --\n> Gavin Andresen\n\n> ------------------------------------------------------------------------------\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2014-04-07T21:55:04",
                "message_text_only": "2014-04-07 21:08 GMT+01:00 Troy Benjegerdes <hozer at hozed.org>:\n> I have to play dissenter here again..\n>\n> Using a bitcoin address as a persistent identity key is the first real-world\n> use of Bitcoin that I can imagine will make it a 'killer app' that everyone\n> and their grandma will want to use.\n>\n\nI am of the same opinion, although i understand Gavin's point. Would\nthe multisig seed work for this purpose?\nI have been toying with this idea and I think that for this BIP to\nmake sense it would require a \"root\" key as your login. Then if you\nneed to make transfers the system would request you to create and\nassociate a new key to your account for each purchase (signing the new\nkey with the root one for example)."
            },
            {
                "author": "Eric Martindale",
                "date": "2014-04-07T22:00:47",
                "message_text_only": "This is toying with the economics of cryptofinance in a way that needs to\nbe understood before being put under consideration for implementation in\nBitcoin.  This is an opportunity for an altcoin to explore the implications\nof these proposals prior to changing the properties of an already\nprecarious system.\n\nEric Martindale\nDeveloper Evangelist, BitPay\n+1 (919) 374-2020\nOn Apr 7, 2014 2:55 PM, \"Ricardo Filipe\" <ricardojdfilipe at gmail.com> wrote:\n\n> 2014-04-07 21:08 GMT+01:00 Troy Benjegerdes <hozer at hozed.org>:\n> > I have to play dissenter here again..\n> >\n> > Using a bitcoin address as a persistent identity key is the first\n> real-world\n> > use of Bitcoin that I can imagine will make it a 'killer app' that\n> everyone\n> > and their grandma will want to use.\n> >\n>\n> I am of the same opinion, although i understand Gavin's point. Would\n> the multisig seed work for this purpose?\n> I have been toying with this idea and I think that for this BIP to\n> make sense it would require a \"root\" key as your login. Then if you\n> need to make transfers the system would request you to create and\n> associate a new key to your account for each purchase (signing the new\n> key with the root one for example).\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/bbd4f161/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-04T13:43:13",
                "message_text_only": "On Fri, Apr 4, 2014 at 3:22 PM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n\n> I see only benefits for the entire ecosystem, and if I'm working on such a\n> proposition it is because I really need this feature.\n>\n\nWhy do you need it? Because you don't want to implement a login system?\nVery, very few websites are the sort of place where they'd want to\nauthenticate with only a Bitcoin address. If for no other reason than\nthey'd have no way to email you, and if you lost your wallet, you'd lose\nall your associated data.\n\n\n> Without such a standard protocol, you could never envision a pure Bitcoin\n> physical locker rental, or booking an hotel room via Bitcoin and opening\n> the door through the paying address.\n>\n\nIn future there often won't be a simple paying address. For instance, if my\ncoins are in a multi-sig relationship with a risk analysis service, there\nwill be two keys for each input and an arbitrary number of inputs. So does\nthat mean the risk analysis service gets to open my locker? Why?\n\nWhat if I do a shared spend/CoinJoin type tx? Now anyone who took part in\nthe shared tx with me can get into my hotel room too?\n\nThese are the kinds of problems that crop up when you mix together two\ndifferent things: the act of paying, and the act of identifying yourself.\nYou're assuming that replacing a password people can remember with a\nphysical token (their phone) which can be stolen or lost, would be seen as\nan upgrade. Given a choice between two physical lockers, one of which lets\nme open it with a password and one of which insists on a cryptographic\ntoken, I'm going to go for the former because the chances of me losing my\nphone is much higher than me forgetting my password.\n\nAll the tools you need already exist in the form of client certificates,\nwith the advantage that web servers and web browsers already support them.\nThe biggest pain point with them is backup and cross-device sync, which of\ncourse wallets suffer from too!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/3477a62d/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-04T13:47:56",
                "message_text_only": "On Fri, Apr 4, 2014 at 9:43 AM, Mike Hearn <mike at plan99.net> wrote:\n> These are the kinds of problems that crop up when you mix together two\n> different things: the act of paying, and the act of identifying yourself.\n\nThis is precisely why SINs use a different version byte from bitcoin\naddresses.  There should never be any confusion between money/payments\nand identity.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-04T13:54:52",
                "message_text_only": ">\n> What if I do a shared spend/CoinJoin type tx? Now anyone who took part in\n> the shared tx with me can get into my hotel room too?\n>\n\nOh, if these seem too abstract, also consider bitbanks. In an ideal world\nnobody would outsource running of their Bitcoin wallet, but sadly people\ndo, so then they don't control the private keys at all.\n\nThe goal of writing a BIP seems to be to get lots of different wallet\nauthors to write lots of code for you - but I *am* a wallet author, and I\ndon't think that's the right way to get traction with a new scheme. For\ninstance the TREZOR guys would have to support your new protocol otherwise\nif I paid my hotel bill with my TREZOR I couldn't open the door when I got\nthere! But they probably have better things to be doing right now.\n\nThe key difference between just generating a client certificate and using a\nBitcoin address is that the client certificate is something that is used\n*specifically* for identification. It leaves no trace in the block chain,\nso no weird privacy issues, it doesn't matter how you manage your wallet,\nand you don't have to persuade lots of people to support your idea because\nit was already done >10 years ago and basically every browser/web server\nsupports it.\n\nSome reasons client certs aren't more widely used boil down to:\n\n   1. People like passwords. In particular they like forgetting them and\n   then having friendly people assist them to get it back. Client certs can\n   support this use case, but only if apps are checking the identity in them\n   and not the key.\n   2. The UI for managing client certs in browsers is pretty horrible.\n   There's little incentive to improve it because of (1).\n   3. Cross-device sync doesn't work very well. Apple are starting to\n   tackle this with their iCloud Keychain Sync service but then of course,\n   Apple has all your keys and you may well just sign in to things with your\n   Apple account (if it were to be supported). Cross-device sync where the\n   server *doesn't* get your keys is supported by Chrome for passwords, but\n   not client certs, because (1)\n\nNone of the above issues have any obvious fix lurking within Bitcoin.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/bbeaf3b0/attachment.html>"
            },
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-04T14:42:56",
                "message_text_only": ">\n> The goal of writing a BIP seems to be to get lots of different wallet\n> authors to write lots of code for you - but I *am* a wallet author, and I\n> don't think that's the right way to get traction with a new scheme.\n>\n\nI started without a BIP and the feedback I got is that I should to a BIP.\nWe cannot write all the code for all the wallets ; this is after all a\ncommunauty project.\nHowever we have and we will propose bounties for each wallet to support\nnatively the protocol.\n\n\n> For instance the TREZOR guys would have to support your new protocol\n> otherwise if I paid my hotel bill with my TREZOR I couldn't open the door\n> when I got there! But they probably have better things to be doing right\n> now.\n>\n\nYes you are right. But if the concept of authenticating yourself gets\ntraction, they will probably do it.\n\n\n> The key difference between just generating a client certificate and using\n> a Bitcoin address is that the client certificate is something that is used\n> *specifically* for identification. It leaves no trace in the block chain,\n> so no weird privacy issues, it doesn't matter how you manage your wallet,\n> and you don't have to persuade lots of people to support your idea because\n> it was already done >10 years ago and basically every browser/web server\n> supports it.\n>\n\nMy view on this is mainly about the UX and the fact everyone in Bitcoinland\nhas a wallet.\nIt's a approach leveraging this fact, with the possibility to build\ninteresting apps combining address auth and the blockchain.\n\nI understand the problems related to multisig, contracts etc,\nThere is no such thing as a from address in a transaction, however many\nservices still take first tx as the return address.\nPeople will always find way of building and doing stuff (cf the message in\nthe blockchain debate).\n\n\n> Some reasons client certs aren't more widely used boil down to:\n>\n>    1. People like passwords. In particular they like forgetting them and\n>    then having friendly people assist them to get it back. Client certs can\n>    support this use case, but only if apps are checking the identity in them\n>    and not the key.\n>    2. The UI for managing client certs in browsers is pretty horrible.\n>    There's little incentive to improve it because of (1).\n>    3. Cross-device sync doesn't work very well. Apple are starting to\n>    tackle this with their iCloud Keychain Sync service but then of course,\n>    Apple has all your keys and you may well just sign in to things with your\n>    Apple account (if it were to be supported). Cross-device sync where the\n>    server *doesn't* get your keys is supported by Chrome for passwords,\n>    but not client certs, because (1)\n>\n> None of the above issues have any obvious fix lurking within Bitcoin.\n>\n\nThere is also the benefit of revocation with certificate and central\nauthority.\n\nBut, again, you already have a wallet and a Bitcoin address.\nSo if you add a simple auth protocol, people will use it at no cost.\n\nEric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/9e6d4ffc/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-04T14:51:07",
                "message_text_only": ">\n> My view on this is mainly about the UX and the fact everyone in\n> Bitcoinland has a wallet.\n>\n\nWell, yes, but we also have browsers too :)\n\nI don't want to suggest the problem is unimportant - I'd love it if the\nworld could move beyond passwords. But I have many scars from my time in\nthe Google account swamps. We had a big team, lots of resources and even\njust getting people to use their phone as a second factor - *the simplest\nsecond factor possible* - was a huge uphill battle that most users just\ndidn't care about. People like passwords. If you can find a way to make\nsomething that's better than a password but just as convenient, fantastic!\nBut I don't think Bitcoin addresses are such a thing.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/9bb59940/attachment.html>"
            },
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-04T14:56:10",
                "message_text_only": "On Fri, Apr 4, 2014 at 4:51 PM, Mike Hearn <mike at plan99.net> wrote:\n\n>  My view on this is mainly about the UX and the fact everyone in\n>> Bitcoinland has a wallet.\n>>\n>\n> Well, yes, but we also have browsers too :)\n>\n>\nYes, but no one will ever install a plug in.\nAnd all will update their wallets with the last version, including the auth\nprotocol.\n\n\n> I don't want to suggest the problem is unimportant - I'd love it if the\n> world could move beyond passwords. But I have many scars from my time in\n> the Google account swamps. We had a big team, lots of resources and even\n> just getting people to use their phone as a second factor - *the simplest\n> second factor possible* - was a huge uphill battle that most users just\n> didn't care about. People like passwords. If you can find a way to make\n> something that's better than a password but just as convenient, fantastic!\n> But I don't think Bitcoin addresses are such a thing.\n>\n\nI perfectly understand all the objections, and they are very good points.\n\nI have at least two wallets enthousiastic about the project so the protocol\nwill be implemented and it will give some room to experiment.\nThe BIP came from the idea we should formalize the standard so all wallets\ncould participate, and it felt more logical to come forward with it.\n\nMaybe a better strategy would be to start \"privately\" with a few wallets\nand services using the protocol, and to come back to the BIP there is\nusability and traction.\n\nEric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/c8740919/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-08T03:28:54",
                "message_text_only": "On Fri, Apr 4, 2014 at 10:56 AM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n> Yes, but no one will ever install a plug in.\n\nThis is quite true.  I said the same about KryptoKit.  Incredibly cool\nto do bitcoin + PGP in client...  but ultimately plugins reach 0.01%\nof the user population.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-08T08:13:59",
                "message_text_only": "I'd be careful with swift generalisations. It depends a lot on the value of\nyour product. I didn't have any hangups about installing a plugin to use my\nTREZOR:  compared to the cost and effort involved with the rest of it,\ninstalling a plugin was by far the easiest part.\n\nAnother example. Back in 2005 people also used to say that nobody wanted to\ndownload apps anymore. Then I started working on Google Earth, which got\n~400 million installs. Obviously, that was cool enough that people were\nwilling to download and install a giant hulking ugly Qt app :)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/a2053c1c/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-08T15:19:32",
                "message_text_only": "On Tue, Apr 8, 2014 at 4:13 AM, Mike Hearn <mike at plan99.net> wrote:\n> I'd be careful with swift generalisations. It depends a lot on the value of\n> your product. I didn't have any hangups about installing a plugin to use my\n\n-You- are irrelevant, as am I.  We don't mind such things.\n\nBut based on personal observations as well as Mozilla and other\nbrowser data, the user populace in general does not install plugins.\nFlash is the LONE exception to that ironclad general rule.\n\nPS. Google Earth is not a plugin :)\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2014-04-22T06:34:22",
                "message_text_only": "The reason why client side certificates have never gained traction because\nit is a pain to safely store/backup secrets.\nIn bitcoinland we are forced to solve the problem of safely storing\nsecrets, and over the years we have come up with software and hardware\nsolutions to make this safer and easier to manage for ordinary people.\nSolving this is paramount to the success of Bitcoin, and nobody has solved\nit before on a grand scale.\n\nI see no reason for forcing end users to use two different mechanisms for\nsafely managing secrets.\n\nI agree that using a bitcoin address for authentication purposes might be\nconfusing and potentially linking your funds with your identity. So I am\nall for using something else than bitcoin addresses and bitcoin private\nkeys.\n\nWith bip32 we have finally agreed on a mechanism for generating a hierarchy\nof bitcoin private keys from a master seed. A similar approach can be used\nfor generating a parallel hierarchy for authentication purposes.\n\n- Jan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/34e800f0/attachment.html>"
            },
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-22T08:57:18",
                "message_text_only": "The development of BitID has had some progress, and we have now a working\nwallet prototype based on Android Bitcoin Wallet (bitoinj).\nThe user flow is quite nice and if you are curious here is a short video\ndemonstration :\nhttps://www.youtube.com/watch?v=3eepEWTnRTc\n\nBy default, each new first auth request will create and save a new address\n(SQRL like). It could be based on BIP32, but this works also without.\nThis requires to add metadata to addresses, as described here :\nhttps://github.com/bitid/bitid/blob/master/bitid_metadata.md\n\nIt open also the fields for decentralized 2FA as well as \"pay as guest\"\ncheckout in conjonction with BIP70 payment request.\n\nEric\n\n\n\nOn Tue, Apr 22, 2014 at 8:34 AM, Jan M\u00f8ller <jan.moller at gmail.com> wrote:\n\n> The reason why client side certificates have never gained traction because\n> it is a pain to safely store/backup secrets.\n> In bitcoinland we are forced to solve the problem of safely storing\n> secrets, and over the years we have come up with software and hardware\n> solutions to make this safer and easier to manage for ordinary people.\n> Solving this is paramount to the success of Bitcoin, and nobody has solved\n> it before on a grand scale.\n>\n> I see no reason for forcing end users to use two different mechanisms for\n> safely managing secrets.\n>\n> I agree that using a bitcoin address for authentication purposes might be\n> confusing and potentially linking your funds with your identity. So I am\n> all for using something else than bitcoin addresses and bitcoin private\n> keys.\n>\n> With bip32 we have finally agreed on a mechanism for generating a\n> hierarchy of bitcoin private keys from a master seed. A similar approach\n> can be used for generating a parallel hierarchy for authentication\n> purposes.\n>\n> - Jan\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/97fad26c/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-04T15:00:09",
                "message_text_only": "On Fri, Apr 4, 2014 at 4:51 PM, Mike Hearn <mike at plan99.net> wrote:\n>\n> I don't want to suggest the problem is unimportant - I'd love it if the\n> world could move beyond passwords. But I have many scars from my time in\n> the Google account swamps. We had a big team, lots of resources and even\n> just getting people to use their phone as a second factor - *the simplest\n> second factor possible* - was a huge uphill battle that most users just\n> didn't care about. People like passwords. If you can find a way to make\n> something that's better than a password but just as convenient, fantastic!\n> But I don't think Bitcoin addresses are such a thing.\n>\n>\nWith all respect to your experience, I think you're wrong, for one reason.\n\n2fa auth doesn't *remove* the need of password. It actually *adds* yet\nanother layer, which complicates stuff for average user. Common user, which\nis not paranoid enough (like me) simply don't think he has anything to\nhide, so they simply don't see why they should *complicate* their live with\n2fa, backing up their phone etc.\n\nIn the oposite, authentication based on bitcoin wallet could make the\nprocess much easier and remove the need of passwords at all, because people\n*already* care about safe storage of their coins.\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/3012d59c/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-04T14:56:25",
                "message_text_only": "I'm cracking my head for many months with the idea of using TREZOR for web\nauth purposes. Unfortunately I'm far from any usable solution yet.\n\nMy main comments to your BIP: Don't use bitcoin addresses directly and\ndon't encourage services to use this \"login\" for financial purposes. Mike\nis right, mixing authentication and financial services is wrong. Use some\nfunction to generate other private/public key from bitcoin's seed/private\nkey to not leak bitcoin-related data to website.\n\nCheers,\nMarek\n\n\nOn Fri, Apr 4, 2014 at 4:42 PM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n\n>  The goal of writing a BIP seems to be to get lots of different wallet\n>> authors to write lots of code for you - but I *am* a wallet author, and\n>> I don't think that's the right way to get traction with a new scheme.\n>>\n>\n> I started without a BIP and the feedback I got is that I should to a BIP.\n> We cannot write all the code for all the wallets ; this is after all a\n> communauty project.\n> However we have and we will propose bounties for each wallet to support\n> natively the protocol.\n>\n>\n>> For instance the TREZOR guys would have to support your new protocol\n>> otherwise if I paid my hotel bill with my TREZOR I couldn't open the door\n>> when I got there! But they probably have better things to be doing right\n>> now.\n>>\n>\n> Yes you are right. But if the concept of authenticating yourself gets\n> traction, they will probably do it.\n>\n>\n>> The key difference between just generating a client certificate and using\n>> a Bitcoin address is that the client certificate is something that is used\n>> *specifically* for identification. It leaves no trace in the block\n>> chain, so no weird privacy issues, it doesn't matter how you manage your\n>> wallet, and you don't have to persuade lots of people to support your idea\n>> because it was already done >10 years ago and basically every browser/web\n>> server supports it.\n>>\n>\n> My view on this is mainly about the UX and the fact everyone in\n> Bitcoinland has a wallet.\n> It's a approach leveraging this fact, with the possibility to build\n> interesting apps combining address auth and the blockchain.\n>\n> I understand the problems related to multisig, contracts etc,\n> There is no such thing as a from address in a transaction, however many\n> services still take first tx as the return address.\n> People will always find way of building and doing stuff (cf the message in\n> the blockchain debate).\n>\n>\n>> Some reasons client certs aren't more widely used boil down to:\n>>\n>>    1. People like passwords. In particular they like forgetting them and\n>>    then having friendly people assist them to get it back. Client certs can\n>>    support this use case, but only if apps are checking the identity in them\n>>    and not the key.\n>>    2. The UI for managing client certs in browsers is pretty horrible.\n>>    There's little incentive to improve it because of (1).\n>>    3. Cross-device sync doesn't work very well. Apple are starting to\n>>    tackle this with their iCloud Keychain Sync service but then of course,\n>>    Apple has all your keys and you may well just sign in to things with your\n>>    Apple account (if it were to be supported). Cross-device sync where the\n>>    server *doesn't* get your keys is supported by Chrome for passwords,\n>>    but not client certs, because (1)\n>>\n>> None of the above issues have any obvious fix lurking within Bitcoin.\n>>\n>\n> There is also the benefit of revocation with certificate and central\n> authority.\n>\n> But, again, you already have a wallet and a Bitcoin address.\n> So if you add a simple auth protocol, people will use it at no cost.\n>\n> Eric\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/5fdb03ea/attachment.html>"
            },
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-04T15:09:08",
                "message_text_only": "On Fri, Apr 4, 2014 at 4:56 PM, slush <slush at centrum.cz> wrote:\n\n> I'm cracking my head for many months with the idea of using TREZOR for web\n> auth purposes. Unfortunately I'm far from any usable solution yet.\n>\n> My main comments to your BIP: Don't use bitcoin addresses directly and\n> don't encourage services to use this \"login\" for financial purposes. Mike\n> is right, mixing authentication and financial services is wrong. Use some\n> function to generate other private/public key from bitcoin's seed/private\n> key to not leak bitcoin-related data to website.\n>\n>\nI'm probably very naive, but the fact that the authentication key is your\nBitcoin address was for me a great feature :)\nWhat are the risks associated of id yourself with a bitcoin address you\nplan to use on the website for transaction ?\n\nI mean, what is the difference between doing that, and id with a login/pass\nand add your bitcoin address in a settings field ? (knowing you could\nalways find a mechanism to transfer the account to another bitcoin address\nif needed)\n\nEric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/6e0e0513/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-04T15:28:27",
                "message_text_only": "On Fri, Apr 4, 2014 at 5:09 PM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n\n> On Fri, Apr 4, 2014 at 4:56 PM, slush <slush at centrum.cz> wrote:\n>\n>> I'm cracking my head for many months with the idea of using TREZOR for\n>> web auth purposes. Unfortunately I'm far from any usable solution yet.\n>>\n>> My main comments to your BIP: Don't use bitcoin addresses directly and\n>> don't encourage services to use this \"login\" for financial purposes. Mike\n>> is right, mixing authentication and financial services is wrong. Use some\n>> function to generate other private/public key from bitcoin's seed/private\n>> key to not leak bitcoin-related data to website.\n>>\n>>\n> I'm probably very naive, but the fact that the authentication key is your\n> Bitcoin address was for me a great feature :)\n> What are the risks associated of id yourself with a bitcoin address you\n> plan to use on the website for transaction ?\n>\n>\nIdeally you should not reuse the address, so the website will need more\naddresses or bip32 xpub anyway.\n\nBy using wallet address and accidentally using such address in some\ntransaction, you may be leaking your identity with with other business -\nthink about Silkroad (sorry Mike :-).\n\n By using derived key, you can be sure your identity won't be linked with\nany other activity on the internet.\n\nI mean, what is the difference between doing that, and id with a login/pass\n> and add your bitcoin address in a settings field ? (knowing you could\n> always find a mechanism to transfer the account to another bitcoin address\n> if needed)\n>\n> *) You can change address in settings field. It's not so easy when address\n== your identity.\n*)  There's plenty of websites which do need authentication but don't need\nto know your bank account / bitcoin address at all. Facebook, Gmail,\nTwitter ...\n\nIdeally, the user should not care about \"what address do I use for this\nservice\", because in the future user should not care about addresses at all\n(handling of private keys is already eliminated by bip32, handling of raw\naddresses may be eliminated soon by bip70 or similar solutions).\n\nI can imagine that the private/public data will be derived automatically\nfrom some secret master key (ideally derived from bip32 seed, which is\nalready secured well by the user) and the URL of the service.\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/5c5b14cb/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-04T15:37:35",
                "message_text_only": "Hmmm, well TREZOR requires a web plugin. So if nobody installs plugins then\nwe have a problem :) But regardless, actually like I said, you don't need a\nplugin. Browsers do it all already. With the <keygen> tag they even create\na private key and upload the public part to be signed for you, it's\nseamless for the user. I wanted to give you a link to a demo site, but I\ncan't find it anymore :(\n\nSo there's not even a need for people to upgrade anything! It's all there,\nalready, for everyone.\n\nIf you were to make some upgrades, then you'd want to focus on key\nmanagement, which indeed is something the Bitcoin world is trying hard to\nsolve.  But that's a small subcomponent.  Making a modified version of\nChrome or Firefox that can take their key from a BIP32 hierarchy or\n12-words scheme is certainly possible, but then you could still reuse all\nthe rest of it.\n\nSomething I'd really like to see is TREZOR supporting a simple\nrequest/response protocol that a server can trigger, via the USB plugin,\nthat would allow a server to display some arbitrary text and get a\nconfirmation. Slush and I talked about it before. There are a LOT of places\nthat don't care about Bitcoin but do need some kind of safe second factor\nauth where users know what they are confirming (e.g. at Google!). If TREZOR\ncould be used for these things too, that'd increase demand and help push\ndown prices for Bitcoin users.\n\n\n\nOn Fri, Apr 4, 2014 at 5:09 PM, Eric Larchev\u00eaque <elarch at gmail.com> wrote:\n\n> On Fri, Apr 4, 2014 at 4:56 PM, slush <slush at centrum.cz> wrote:\n>\n>> I'm cracking my head for many months with the idea of using TREZOR for\n>> web auth purposes. Unfortunately I'm far from any usable solution yet.\n>>\n>> My main comments to your BIP: Don't use bitcoin addresses directly and\n>> don't encourage services to use this \"login\" for financial purposes. Mike\n>> is right, mixing authentication and financial services is wrong. Use some\n>> function to generate other private/public key from bitcoin's seed/private\n>> key to not leak bitcoin-related data to website.\n>>\n>>\n> I'm probably very naive, but the fact that the authentication key is your\n> Bitcoin address was for me a great feature :)\n> What are the risks associated of id yourself with a bitcoin address you\n> plan to use on the website for transaction ?\n>\n> I mean, what is the difference between doing that, and id with a\n> login/pass and add your bitcoin address in a settings field ? (knowing you\n> could always find a mechanism to transfer the account to another bitcoin\n> address if needed)\n>\n> Eric\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/f6e7b6e0/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-04T15:42:35",
                "message_text_only": "On Fri, Apr 4, 2014 at 5:37 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Hmmm, well TREZOR requires a web plugin. So if nobody installs plugins\n> then we have a problem :) But regardless, actually like I said, you don't\n> need a plugin.\n>\n\nI see the plugin as a temporary solution and we'll eliminate the plugin\nonce there'll be any way to talk to USB HID directly from browser (which is\nnot possible yet, but there's some effort already).\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/08a39900/attachment.html>"
            },
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-04T16:00:43",
                "message_text_only": ">\n> Hmmm, well TREZOR requires a web plugin. So if nobody installs plugins\n> then we have a problem :) But regardless, actually like I said, you don't\n> need a plugin. Browsers do it all already. With the <keygen> tag they even\n> create a private key and upload the public part to be signed for you, it's\n> seamless for the user. I wanted to give you a link to a demo site, but I\n> can't find it anymore :(\n>\n>\nIf you buy a TREZOR you will of course install the plugin :)\n\nWhat I mean is that normal people are lazy : if the solution is already in\ntheir hand they will use it, if they need to install/configure something,\nthey won't do it.\n\nI'm not trying to propose a solution to solve the auth on the web, but to\nease the sign up / login on the Bitcoin ecosystem websites and apps.\nMore sign ups to new services (whatever the services) = more usage =\nexpanding ecosystem = more global value to Bitcoin\n\nWallets are a key element of the equation because :\n- everyone has one (desktop or mobile)\n- everyone (in theory) has already taken all steps to backup and secure\ntheir keys\n- id yourself with a Bitcoin address often makes sense on a Bitcoin related\nservice\n\nEric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/8f22a17a/attachment.html>"
            },
            {
                "author": "Eric Larchev\u00eaque",
                "date": "2014-04-04T15:03:20",
                "message_text_only": ">\n>\n> Why do you need it? Because you don't want to implement a login system?\n> Very, very few websites are the sort of place where they'd want to\n> authenticate with only a Bitcoin address. If for no other reason than\n> they'd have no way to email you, and if you lost your wallet, you'd lose\n> all your associated data.\n>\n\nWell, the major difference is that you could sign up effortlessy to a\nservice, and associate your email later.\nIf more people sign up to more services, it's a good thing for the\necosystem.\n\n\n>\n>\n>> Without such a standard protocol, you could never envision a pure Bitcoin\n>> physical locker rental, or booking an hotel room via Bitcoin and opening\n>> the door through the paying address.\n>>\n>\n> In future there often won't be a simple paying address. For instance, if\n> my coins are in a multi-sig relationship with a risk analysis service,\n> there will be two keys for each input and an arbitrary number of inputs. So\n> does that mean the risk analysis service gets to open my locker? Why?\n>\n\n\n> What if I do a shared spend/CoinJoin type tx? Now anyone who took part in\n> the shared tx with me can get into my hotel room too?\n>\n>\n\nIn a perfect world, you would pay your locker with a \"normal\" transaction.\nThe same way you shouldn't play satoshi dice from a shared wallet.\n\nBut your point is totaly valid, and I don't have answer to that except that\nI'd love to have a Bitcoin authenticated locker in our Bitcoin co working\noffice.\n\n\n>\n>\n> These are the kinds of problems that crop up when you mix together two\n> different things: the act of paying, and the act of identifying yourself.\n> You're assuming that replacing a password people can remember with a\n> physical token (their phone) which can be stolen or lost, would be seen as\n> an upgrade. Given a choice between two physical lockers, one of which lets\n> me open it with a password and one of which insists on a cryptographic\n> token, I'm going to go for the former because the chances of me losing my\n> phone is much higher than me forgetting my password.\n>\n> All the tools you need already exist in the form of client certificates,\n> with the advantage that web servers and web browsers already support them.\n> The biggest pain point with them is backup and cross-device sync, which of\n> course wallets suffer from too!\n>\n\n\nBitcoin users are normaly already paying some effort to securise and backup\ntheir wallets / keys. So it's just about leveraging that.\n\nI would myself pick a crypto locker, because I'm the kind of guy who\nFacebook connects and I follow the easiest path, even if it has long term\ncosts :)\n\nEric\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140404/4f3c14f7/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Draft BIP for seamless website authentication using Bitcoin address",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Troy Benjegerdes",
                "slush",
                "Mike Hearn",
                "Eric Larchev\u00eaque",
                "Eric Martindale",
                "Ricardo Filipe",
                "Gavin Andresen",
                "Jan M\u00f8ller"
            ],
            "messages_count": 27,
            "total_messages_chars_count": 61374
        }
    },
    {
        "title": "[Bitcoin-development] Standardizing OP_RETURN message format",
        "thread_messages": [
            {
                "author": "Maciej Trebacz",
                "date": "2014-04-06T07:35:20",
                "message_text_only": "So, OP_RETURN is here and there is no coming back. So if we have it, it\nwould be nice to actually make use of it in a good way. I would like to\nwrite a process BIP with a proposal for standardizing OP_RETURN\ntransactions for better interoperability between services. Right now there\nare no guidelines for crafting these transactions, so everyone just does\nwhat he believes is good for him.\n\nWhat I would propose is a common, extensible protocol that can be used by\nanyone. The generic format would be like this:\n\nOP_RETURN OP_PUSHDATA[length] {2-byte message type} {data}\n\nSo basically, we would have a list of message types, that can be then\nparsed by everyone because the format is open. It could go like this:\n\nMSG Type | Parameters | Description\n\n00 00 | unknown | Unused type, use it if you don't want to share your\nmessage format with others\n00 01 | none | Proof of burn transaction. Use it if you want to effectively\ndestroy coins (by sending it all as fees to miners)\n...\n\nAnd so on. I have few more ideas for these kind of messages, but it will\nonly work if we try to make it an open standard, hence the BIP idea. Can I\nexpect that it will be included with other BIPs if I write it?\n\n-- \nBest regards,\nMaciej Tr\u0119bacz - Bitalo.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140406/ea43f13d/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-06T09:21:32",
                "message_text_only": "On Sun, Apr 6, 2014 at 12:35 AM, Maciej Trebacz <maciej at bitalo.com> wrote:\n> 00 01 | none | Proof of burn transaction. Use it if you want to effectively\n> destroy coins (by sending it all as fees to miners)\n\nFor just having a dummy output for an all fee transaction you do not\nneed to have a PUSH at all."
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-06T10:37:32",
                "message_text_only": "On Sun, Apr 06, 2014 at 09:35:20AM +0200, Maciej Trebacz wrote:\n> So, OP_RETURN is here and there is no coming back. So if we have it, it\n> would be nice to actually make use of it in a good way. I would like to\n> write a process BIP with a proposal for standardizing OP_RETURN\n> transactions for better interoperability between services. Right now there\n> are no guidelines for crafting these transactions, so everyone just does\n> what he believes is good for him.\n> \n> What I would propose is a common, extensible protocol that can be used by\n> anyone. The generic format would be like this:\n> \n> OP_RETURN OP_PUSHDATA[length] {2-byte message type} {data}\n> \n> So basically, we would have a list of message types, that can be then\n> parsed by everyone because the format is open. It could go like this:\n> \n> MSG Type | Parameters | Description\n> \n> 00 00 | unknown | Unused type, use it if you don't want to share your\n> message format with others\n> 00 01 | none | Proof of burn transaction. Use it if you want to effectively\n> destroy coins (by sending it all as fees to miners)\n> ...\n> \n> And so on. I have few more ideas for these kind of messages, but it will\n> only work if we try to make it an open standard, hence the BIP idea. Can I\n> expect that it will be included with other BIPs if I write it?\n\nWhy do you want to make it easier for third-parties to determine what\nyour OP_RETURN messages are for? You want the messages to be\nindistinguishable from each other to avoid censorship of them, and give\nnode operators plausible deniability, just like you want your Bitcoin\ntransactions to be indistinguishable from each other. Efficient discover\nshould be done by controlled disambiguation, for instance with the\nprefix filtering method. (easily applied to bloom filters as well)\n\nSecondly do not restrict yourself to OP_RETURN - it is far from certain\nthat it will survive in its present form with the high centralization of\nmining we currently have. Note how it was rather arbitrarily reduced\nfrom 80 bytes to 40 bytes, screwing over a number of projects who had\nnaively written code assuming it would be deployed as promised in the\npromised form.\n\nIn any case I have better encoding methods for proof-of-publication and\ncommitments on my TODO list and will be pubishing code and best\npractices specifications in the coming weeks.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000f4f5ba334791a4102917e4d3f22f6ad7f2c4f15d97307fe2\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 665 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140406/10804c6f/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Standardizing OP_RETURN message format",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd",
                "Gregory Maxwell",
                "Maciej Trebacz"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4443
        }
    },
    {
        "title": "[Bitcoin-development] Feedback request: colored coins protocol",
        "thread_messages": [
            {
                "author": "Flavien Charlon",
                "date": "2014-04-06T20:59:34",
                "message_text_only": "Hi,\n\nI am the lead developer of Coinprism <https://www.coinprism.com/>, the new\ncolored coins web wallet. After some discussions with the other people\ninvolved with colored coins, I wrote a specification document describing\nthe colored coins protocol that we are using in coinprism.\n\nI am looking for feedback/discussions regarding the protocol before we move\nfrom TestNet to MainNet. The document is here:\nhttps://github.com/Flavien/colored-coins-protocol/blob/master/specification.mediawiki\n.\n\nThe colored coin protocol is layered on top of the existing Bitcoin\nprotocol and requires no modification of the existing protocol, so it can\nbe used today. This means that SPV is not as efficient, as the client needs\nto backtrack up to the issuing transaction to find the color of an output,\nbut that is something we can live with.\n\n\nThe protocol marks transactions either as issuance or transfer transactions\nby using an OP_RETURN output with a 9 bytes marker. The protocol uses the\nvalue of an output as the colored value. So if an output has 1 BTC and is\ncolored with color A, that means we have 1 BTC colored with color A.\n\nAn alternative would have been to completely disconnect the colored value\nand the real BTC value. The colored value of each output would be encoded\nin an OP_RETURN output. Someone who wants to send 1000 colored coins would\ncraft a transaction with an output with the smallest possible amount of BTC\n(5,400 satoshis) and indicate in the OP_RETURN that they are sending 1000\ncolored coins.\nThe two reasons why we haven't chosen that approach is that first, this\nonly works with a limited number of outputs given that we have only 40\nbytes. And second, this could lead to people spamming the network with very\nsmall outputs (but containing an arbitrary number of colored coins).\n\nOn the other hand, with the approach we're using (colored value = actual\nvalue of the output), the 5,400 satoshis rule means that the smallest unit\nof colored coin you can send is 5,400 satoshis.\n\nIf you want to issue 1 million shares, while still being able to trade each\nshare individually, you'd have to set 1 share = 5,400 satoshis, and you\nwould need a capital of 54 BTC for issuing a million shares. It's not a big\nproblem in itself, but still a slight inconvenience.\n\nDo you think this is the right approach?\n\nFeel free to reply with any feedback regarding the protocol.\n\nThanks,\nFlavien\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140406/41d33754/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-06T23:23:43",
                "message_text_only": "On 04/06/2014 01:59 PM, Flavien Charlon wrote:\n> Do you think this is the right approach?\n\nNo, I'm afraid it has significant flaws. The two chief flaws are (1)\nthere is absolutely no reason to include asset tagging information if it\nis not validated - that just bloats the block chain, and (2) you\nshouldn't be using fixed increments for share sizes either. It's not\nfuture-proof as the minimum output size changes based on the minimum fee\n(currently 540 satoshis, not 5,400, and it will float in the near\nfuture). And needing a capital of 54 btc for a million shares is totally\nunacceptable.\n\nFlavien, I know that I've seen you on the Bitcoin-X mailing list, where\nthese issues have been mostly worked out:\n\nhttps://groups.google.com/forum/#!forum/bitcoinx\n\nHave you seen the padded order-based coloring scheme worked out here?\n\nhttps://github.com/bitcoinx/colored-coin-tools/wiki/colored_coins_intro\n\nKind regards,\nMark Friedenbach"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-04-07T09:49:55",
                "message_text_only": "Thanks for the feedback Mark.\n\n> (1) there is absolutely no reason to include asset tagging information if\nit is not validated\n\nSure, there is a good reason to include it in the blockchain: so that\nclients don't need external information to recognize colored coins. Also,\nI'm not sure what you mean by \"not validated\", in that proposal, the tagged\ntransaction is the authoritative source of information.\n\n> that just bloats the block chain\n\n9 bytes is much less than what Mastercoin and counterparty are doing\n(certainly under the 40 bytes allowed).\n\n> Have you seen the padded order-based coloring scheme worked out here?\n\nYes I have seen it and find the padding quite clumsy and unintuitive. A\nmore general solution is the one I described in my original post, where the\ncolor value is entirely separate from the satoshi value, and encoded\nseparately: if you have to have an additional \"padding\" value to calculate\ncolor_value = satoshi_value - padding, you might as well have color_value\ndirectly, independently from satoshi_value. But I don't even think it is\nnecessary:\n\n> (2) And needing a capital of 54 btc for a million shares is totally\nunacceptable.\n\nAn easy workaround is to have various scales, the same way you have $1\nbills, $5 bills an $10 bills. I don't see that as a big problem. That way\nthe protocol is more lightweight and simple.\n\nAlso those 54 BTC (actually 5.4 BTC if the dust is now 540 satoshis) become\npart of the capital of the company, and can always be recovered by\nuncoloring the shares. It's an investment, not an expense, so I think it is\nacceptable.\n\nBest,\nFlavien\n\n\n\n\n\n\nOn Mon, Apr 7, 2014 at 12:23 AM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> On 04/06/2014 01:59 PM, Flavien Charlon wrote:\n> > Do you think this is the right approach?\n>\n> No, I'm afraid it has significant flaws. The two chief flaws are (1)\n> there is absolutely no reason to include asset tagging information if it\n> is not validated - that just bloats the block chain, and (2) you\n> shouldn't be using fixed increments for share sizes either. It's not\n> future-proof as the minimum output size changes based on the minimum fee\n> (currently 540 satoshis, not 5,400, and it will float in the near\n> future). And needing a capital of 54 btc for a million shares is totally\n> unacceptable.\n>\n> Flavien, I know that I've seen you on the Bitcoin-X mailing list, where\n> these issues have been mostly worked out:\n>\n> https://groups.google.com/forum/#!forum/bitcoinx\n>\n> Have you seen the padded order-based coloring scheme worked out here?\n>\n> https://github.com/bitcoinx/colored-coin-tools/wiki/colored_coins_intro\n>\n> Kind regards,\n> Mark Friedenbach\n>\n>\n> ------------------------------------------------------------------------------\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/ce33a33f/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-07T12:12:58",
                "message_text_only": "On 4/7/14, Flavien Charlon <flavien.charlon at coinprism.com> wrote:\n> Also those 54 BTC (actually 5.4 BTC if the dust is now 540 satoshis) become\n> part of the capital of the company, and can always be recovered by\n> uncoloring the shares. It's an investment, not an expense, so I think it is\n> acceptable.\n\nThis doesn't make much sense to me.\nIf you print shares on gold plates instead of paper, is that gold\n\"part of the capital of the company\"? I don't think so."
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-04-07T14:00:20",
                "message_text_only": "Jorge, they'd have to be. Otherwise, assuming the price of the share goes\nlow enough, you could buy a share of the company, melt the gold plate, and\nsell it for a profit. If the gold is part of the capital of the company,\nthe cheapest a share can be is the price of the gold on which the stock\ncertificate is printed.\n\nThis is why I think the importance of padding with colored coins is\noverblown.\n\n\nOn Mon, Apr 7, 2014 at 1:12 PM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> On 4/7/14, Flavien Charlon <flavien.charlon at coinprism.com> wrote:\n> > Also those 54 BTC (actually 5.4 BTC if the dust is now 540 satoshis)\n> become\n> > part of the capital of the company, and can always be recovered by\n> > uncoloring the shares. It's an investment, not an expense, so I think it\n> is\n> > acceptable.\n>\n> This doesn't make much sense to me.\n> If you print shares on gold plates instead of paper, is that gold\n> \"part of the capital of the company\"? I don't think so.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/9186845a/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-07T15:06:08",
                "message_text_only": "Flavien, capital is wealth or resources available for the stated purpose\nof the company. These bitcoins represent nothing more than a speculative\nfloor owned by the investors, not the company.\n\nOn 04/07/2014 07:00 AM, Flavien Charlon wrote:\n> Jorge, they'd have to be. Otherwise, assuming the price of the share\n> goes low enough, you could buy a share of the company, melt the gold\n> plate, and sell it for a profit. If the gold is part of the capital of\n> the company, the cheapest a share can be is the price of the gold on\n> which the stock certificate is printed.\n> \n> This is why I think the importance of padding with colored coins is\n> overblown.\n> \n> \n> On Mon, Apr 7, 2014 at 1:12 PM, Jorge Tim\u00f3n <jtimon at monetize.io\n> <mailto:jtimon at monetize.io>> wrote:\n> \n>     On 4/7/14, Flavien Charlon <flavien.charlon at coinprism.com\n>     <mailto:flavien.charlon at coinprism.com>> wrote:\n>     > Also those 54 BTC (actually 5.4 BTC if the dust is now 540\n>     satoshis) become\n>     > part of the capital of the company, and can always be recovered by\n>     > uncoloring the shares. It's an investment, not an expense, so I\n>     think it is\n>     > acceptable.\n> \n>     This doesn't make much sense to me.\n>     If you print shares on gold plates instead of paper, is that gold\n>     \"part of the capital of the company\"? I don't think so.\n> \n>"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-04-07T15:19:20",
                "message_text_only": "Ok, I guess I'm not using the proper terminology. It would be listed on the\n\"Asset\" section of the company's balance sheet, is what I meant.\n\n\nOn Mon, Apr 7, 2014 at 4:06 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> Flavien, capital is wealth or resources available for the stated purpose\n> of the company. These bitcoins represent nothing more than a speculative\n> floor owned by the investors, not the company.\n>\n> On 04/07/2014 07:00 AM, Flavien Charlon wrote:\n> > Jorge, they'd have to be. Otherwise, assuming the price of the share\n> > goes low enough, you could buy a share of the company, melt the gold\n> > plate, and sell it for a profit. If the gold is part of the capital of\n> > the company, the cheapest a share can be is the price of the gold on\n> > which the stock certificate is printed.\n> >\n> > This is why I think the importance of padding with colored coins is\n> > overblown.\n> >\n> >\n> > On Mon, Apr 7, 2014 at 1:12 PM, Jorge Tim\u00f3n <jtimon at monetize.io\n> > <mailto:jtimon at monetize.io>> wrote:\n> >\n> >     On 4/7/14, Flavien Charlon <flavien.charlon at coinprism.com\n> >     <mailto:flavien.charlon at coinprism.com>> wrote:\n> >     > Also those 54 BTC (actually 5.4 BTC if the dust is now 540\n> >     satoshis) become\n> >     > part of the capital of the company, and can always be recovered by\n> >     > uncoloring the shares. It's an investment, not an expense, so I\n> >     think it is\n> >     > acceptable.\n> >\n> >     This doesn't make much sense to me.\n> >     If you print shares on gold plates instead of paper, is that gold\n> >     \"part of the capital of the company\"? I don't think so.\n> >\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/bffc7bc8/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-07T18:23:53",
                "message_text_only": "On 4/7/14, Flavien Charlon <flavien.charlon at coinprism.com> wrote:\n> Ok, I guess I'm not using the proper terminology. It would be listed on the\n> \"Asset\" section of the company's balance sheet, is what I meant.\n\nNo, it's an asset for the owner of the share, not the company, just\nlike the gold plates are not assets for the company when someone else\nholds them.\nWhat you're doing is getting less capital for the company due to the\nmoney that is going to pay the gold costs.\nAre you rising capital or selling gold?\nIt doesn't make sense to do both at once.\nYou need money, why would you spend money on gold before asking for\nother people's money to build your company?\nInvestors will appreciate the convenience of being able to buy shares\nof your company and gold separately (or not buy gold at all).\n\nIt may even be more clear for other use cases different than stocks.\nDoes an IOU written in a gold plate make sense to you?"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-04-07T19:26:07",
                "message_text_only": "An IOU written in a gold plate sure makes no sense. I see what you are\nsaying, the inconvenience comes from the fact that the buyer has to buy\nsome amount of BTC at the same time as he buys a share.\n\nThat's why I was making the point that you could have a colored coin\nrepresenting a single share, a different colored coin representing 10\nshares, and another one representing 100 shares (like the different\ndenominations of dollar bills). Assuming you have a proper application\nlayer/UI that can hide this from the user, the need for padding is greatly\nreduced. My opinion is that the protocol should do the minimum required and\nremain as simple as possible. If a proper UI can work around this, then it\nmight not be worth complicating the protocol for this. Also, the dust rule\nmay disappear all together one day (it's already been slashed heavily to\n540 satoshis), at which point we'll be left with a useless padding\nparameter. It's easier to add something when you need it than to remove it.\n\nBut I am posting here to see how people feel about this, and I see you are\non the opinion that satoshi_value and color_value should have a degree of\nfreedom between each other. Thanks for the feedback.\n\n\nOn Mon, Apr 7, 2014 at 7:23 PM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> On 4/7/14, Flavien Charlon <flavien.charlon at coinprism.com> wrote:\n> > Ok, I guess I'm not using the proper terminology. It would be listed on\n> the\n> > \"Asset\" section of the company's balance sheet, is what I meant.\n>\n> No, it's an asset for the owner of the share, not the company, just\n> like the gold plates are not assets for the company when someone else\n> holds them.\n> What you're doing is getting less capital for the company due to the\n> money that is going to pay the gold costs.\n> Are you rising capital or selling gold?\n> It doesn't make sense to do both at once.\n> You need money, why would you spend money on gold before asking for\n> other people's money to build your company?\n> Investors will appreciate the convenience of being able to buy shares\n> of your company and gold separately (or not buy gold at all).\n>\n> It may even be more clear for other use cases different than stocks.\n> Does an IOU written in a gold plate make sense to you?\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/d60b3540/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-07T19:58:35",
                "message_text_only": "This is beyond ridiculous...\n\nColor kernel which works with padding is still quite simple. I think we\nhave extra 10-50 lines of code to handle padding in coloredcoinlib.\nEssentially we have a couple of lines like this :\n\n    value_wop = tx.outputs[oi].value - padding\n\n(value_wop means \"value without padding\").\nAnd then we have like 10 lines of code which selects padding for a\ntransaction.\n\nThat's not a lot of extra complexity. And it solves the problem once and\nfor all.\n\nWhat you propose instead: \"a different colored coin representing 10 shares,\nand another one representing 100 shares (like the different denominations\nof dollar bills)\"  is much more complex, and it won't work:\n\nSuppose you have $100 coin, as a single coin.\nHow do you send $54.23?\nThat's simply impossible.\n\nSo you'd rather push complexity to higher levels (and create inconvenience\nfor end users, as you admitted yourself) than add 10-50 lines of code to\ncolor kernel?\nI just do not understand this.\n\nBut I'm not going to argue. I already wrote everything which I could write\non this topic.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/9330b1bf/attachment.html>"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-04-10T12:19:18",
                "message_text_only": "Thanks for the valuable feedback. I see there is a strong concern with\nrequiring a large BTC capital for issuing coloring coins, so I am now in\nthe process of modifying the specification to address that. I will post an\nupdate when this is finished.\n\nBy the way, padding doesn't solve the issue entirely (issuing 10 billion\nshares sill takes you 100 BTC, even with padding and 1 satoshi = 1 share),\nso I am going for the solution where the asset quantity of every output is\nexplicitly encoded in the OP_RETURN output. That way, whether you are\nissuing 1 share or 100 trillions, you never need to pay more than 540\nsatoshis.\n\n\nOn Mon, Apr 7, 2014 at 8:58 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n\n> This is beyond ridiculous...\n>\n> Color kernel which works with padding is still quite simple. I think we\n> have extra 10-50 lines of code to handle padding in coloredcoinlib.\n> Essentially we have a couple of lines like this :\n>\n>     value_wop = tx.outputs[oi].value - padding\n>\n> (value_wop means \"value without padding\").\n> And then we have like 10 lines of code which selects padding for a\n> transaction.\n>\n> That's not a lot of extra complexity. And it solves the problem once and\n> for all.\n>\n> What you propose instead: \"a different colored coin representing 10\n> shares, and another one representing 100 shares (like the different\n> denominations of dollar bills)\"  is much more complex, and it won't work:\n>\n> Suppose you have $100 coin, as a single coin.\n> How do you send $54.23?\n> That's simply impossible.\n>\n> So you'd rather push complexity to higher levels (and create inconvenience\n> for end users, as you admitted yourself) than add 10-50 lines of code to\n> color kernel?\n> I just do not understand this.\n>\n> But I'm not going to argue. I already wrote everything which I could write\n> on this topic.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/06ce07c4/attachment.html>"
            },
            {
                "author": "Jean-Pierre Rupp",
                "date": "2014-04-10T14:28:29",
                "message_text_only": "By deciding to use a decentralized network to hold your assets, it may\nmake more sense to emit less shares. Two billion shares backed by\ncoloured coins makes less sense than a more conservative number, like\n10,000. That costs a negligible amount of money, at least until the day\nwhen Bitcoin takes over the world and a satoshi becomes very expensive.\nBut it is irrelevant now.\n\nIf you have already created a massive amount of shares for your company,\nthen the only reasonable solution is for a coloured coin to represent a\nbundle of shares as Flavien suggested. Some shareholder could emit\nanother coloured coin instrument with a genesis block based on a smaller\nset of shares to trade among smaller investors unwilling to deal in\nterms of the bundled shares.\n\nWe need to understand that coloured coins provide benefits, but also has\nconstraints that are not difficult to live with.\n\nOn 10/04/14 13:19, Flavien Charlon wrote:\n> By the way, padding doesn't solve the issue entirely (issuing 10 billion\n> shares sill takes you 100 BTC, even with padding and 1 satoshi = 1\n> share), so I am going for the solution where the asset quantity of every\n> output is explicitly encoded in the OP_RETURN output. That way, whether\n> you are issuing 1 share or 100 trillions, you never need to pay more\n> than 540 satoshis.\n\n-- \nhaskoin.com\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xFF4BF34C.asc\nType: application/pgp-keys\nSize: 20252 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/ce7c983f/attachment.bin>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: root.vcf\nType: text/x-vcard\nSize: 227 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/ce7c983f/attachment.vcf>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 884 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/ce7c983f/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-10T16:59:00",
                "message_text_only": "On 04/10/2014 05:19 AM, Flavien Charlon wrote:\n> By the way, padding doesn't solve the issue entirely (issuing 10 billion\n> shares sill takes you 100 BTC, even with padding and 1 satoshi = 1\n> share), so I am going for the solution where the asset quantity of every\n> output is explicitly encoded in the OP_RETURN output. That way, whether\n> you are issuing 1 share or 100 trillions, you never need to pay more\n> than 540 satoshis.\n\nAt this point, I don't think what you are doing is even colored coins\nanymore. You might want to look into Counterparty or Mastercoin."
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-10T17:24:24",
                "message_text_only": "> At this point, I don't think what you are doing is even colored coins\n> anymore. You might want to look into Counterparty or Mastercoin.\n>\n\nNope, it's still colored coins. The difference between colored coin model\nand Mastercoin model is that colored coins are linked to transaction\noutputs, while Mastercoin has a notion of address balances.\n\nThe implications of this is that in colored coin model explicit\ndependencies allow us to rely on SPV. (Assuming that one can fetch the\ndependency graph to link txout in question to genesis.)\nWhile it is not the case with Mastercoin.\n\nWhile it's pretty far from the original colored coins model, what Flavien\nhave described is identical to it in majority of aspects.\n\nThis is an interesting approach, but OP_RETURN size limitations can be a\nsignificant problem for some kinds of applications.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/b16e7b4b/attachment.html>"
            },
            {
                "author": "Flavien Charlon",
                "date": "2014-04-11T12:51:10",
                "message_text_only": "I have updated the\nspec<https://github.com/Flavien/colored-coins-protocol/blob/master/specification.mediawiki>\n.\n\n> This is an interesting approach, but OP_RETURN size limitations can be a\nsignificant problem for some kinds of applications.\n\nThis is correct, the number of colored outputs you can have per transaction\nis limited by OP_RETURN's 40 bytes. We use a compact format\n(LEB128<http://en.wikipedia.org/wiki/LEB128>)\nfor the asset quantity of each output to mitigate that. Assuming you're\ntransferring small amounts of colored coins, you could have up to about 30\ncolored ouputs.\n\nIt should work for a decentralized exchange (you only really need 2 or 3\ncolored outputs). Applications like sending dividends in colored coins\nhowever may require splitting into several smaller transactions, but I\nbelieve that's an acceptable limitation.\n\n\nOn Thu, Apr 10, 2014 at 6:24 PM, Alex Mizrahi <alex.mizrahi at gmail.com>wrote:\n\n>\n>\n>>  At this point, I don't think what you are doing is even colored coins\n>> anymore. You might want to look into Counterparty or Mastercoin.\n>>\n>\n> Nope, it's still colored coins. The difference between colored coin model\n> and Mastercoin model is that colored coins are linked to transaction\n> outputs, while Mastercoin has a notion of address balances.\n>\n> The implications of this is that in colored coin model explicit\n> dependencies allow us to rely on SPV. (Assuming that one can fetch the\n> dependency graph to link txout in question to genesis.)\n> While it is not the case with Mastercoin.\n>\n> While it's pretty far from the original colored coins model, what Flavien\n> have described is identical to it in majority of aspects.\n>\n> This is an interesting approach, but OP_RETURN size limitations can be a\n> significant problem for some kinds of applications.\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140411/e5f3036b/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-07T11:28:33",
                "message_text_only": ">\n> Have you seen the padded order-based coloring scheme worked out here?\n>\n> https://github.com/bitcoinx/colored-coin-tools/wiki/colored_coins_intro\n\n\nJust to clarify, a variant of padded order-based coloring called epobc is\nalready implemented in coloredcoinlib (which is used by\nngcccbase/ChromaWallet). It isn't document yet, however.\nThe idea is to use the otherwise unused nSequence field of first input to\nspecify padding and differentiate between genesis and transfer transactions.\nPadding can be chosen for each transaction individually and can be set to\nzero.\n\nPython code is here (I recommend waiting for documentation, though):\n\nhttps://github.com/bitcoinx/ngcccbase/blob/master/coloredcoinlib/colordef.py#L262\n\nIt is able to work with transactions with multiple colored and uncolored\noutputs, particularly, p2ptrade transactions.\n\nExamples of p2ptrade transactions on mainnet:\nhttps://blockchain.info/tx/8c1926f2e3527153bf06e8ab2c8a417aad3d8e6cd993a4350efbb4050ab961fa\nhttps://blockchain.info/tx/f85b6213939c9cbc14538dd24838061179cac2485f50be20a974b819a85e5ee9(It\nlooks quite a bit weird, I know.)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/37a2e265/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Feedback request: colored coins protocol",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jean-Pierre Rupp",
                "Flavien Charlon",
                "Jorge Tim\u00f3n",
                "Alex Mizrahi",
                "Mark Friedenbach"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 26069
        }
    },
    {
        "title": "[Bitcoin-development] Help with PR 3845",
        "thread_messages": [
            {
                "author": "Daniel Newton",
                "date": "2014-04-07T00:28:26",
                "message_text_only": "https://github.com/bitcoin/bitcoin/pull/3845 (Add a method for removing a\nsingle wallet tx)\n\nHi All,\n\nI am hoping there are some who would like to review/test this pull request.\nBasically it enables a user to zap individually those pesky zombie\ntransactions that were popping up a couple of months ago.\n\nBest regards,\nDan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/5a97fab9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Help with PR 3845",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Daniel Newton"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 504
        }
    },
    {
        "title": "[Bitcoin-development] Why are we bleeding nodes?",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-04-07T11:34:37",
                "message_text_only": "At the start of February we had 10,000 bitcoin nodes. Now we have 8,500 and\nstill falling:\n\n   http://getaddr.bitnodes.io/dashboard/chart/?days=60\n\nI know all the reasons why people *might* stop running a node (uses too\nmuch disk space, bandwidth, lost interest etc). But does anyone have any\nidea how we might get more insight into what's really going on? It'd be\nconvenient if the subVer contained the operating system, as then we could\ntell if the bleed was mostly from desktops/laptops (Windows/Mac), which\nwould be expected, or from virtual servers (Linux), which would be more\nconcerning.\n\nWhen you set up a Tor node, you can add your email address to the config\nfile and the Tor project sends you emails from time to time about things\nyou should know about. If we did the same, we could have a little exit\nsurvey: if your node disappears for long enough, we could email the\noperator and ask why they stopped.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/7c7bf641/attachment.html>"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2014-04-07T12:17:53",
                "message_text_only": "phasing out of bitcoinqt into spv wallets?\n\n2014-04-07 12:34 GMT+01:00 Mike Hearn <mike at plan99.net>:\n> At the start of February we had 10,000 bitcoin nodes. Now we have 8,500 and\n> still falling:\n>\n>    http://getaddr.bitnodes.io/dashboard/chart/?days=60\n>\n> I know all the reasons why people might stop running a node (uses too much\n> disk space, bandwidth, lost interest etc). But does anyone have any idea how\n> we might get more insight into what's really going on? It'd be convenient if\n> the subVer contained the operating system, as then we could tell if the\n> bleed was mostly from desktops/laptops (Windows/Mac), which would be\n> expected, or from virtual servers (Linux), which would be more concerning.\n>\n> When you set up a Tor node, you can add your email address to the config\n> file and the Tor project sends you emails from time to time about things you\n> should know about. If we did the same, we could have a little exit survey:\n> if your node disappears for long enough, we could email the operator and ask\n> why they stopped.\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-04-07T13:43:52",
                "message_text_only": "They're _not_ phasing out into SPV wallets from what I can say. At\naround the 24th of February, there has been a sharp change of the\n\"current installs\" graph of Bitcoin Wallet. That number used to grow at\nabout 20.000 per month. After that date until now, it just barely moves\nhorizontal.\n\nMy guess is that a large number of users have lost interest after they\nlost their money in MtGox. The 24th of February coincides with the\n\"final\" shutdown, according to\n\nhttp://en.wikipedia.org/wiki/Mt._Gox#February_2014_shutdown_and_bankruptcy\n\n\nOn 04/07/2014 02:17 PM, Ricardo Filipe wrote:\n> phasing out of bitcoinqt into spv wallets?\n> \n> 2014-04-07 12:34 GMT+01:00 Mike Hearn <mike at plan99.net>:\n>> At the start of February we had 10,000 bitcoin nodes. Now we have 8,500 and\n>> still falling:\n>>\n>>    http://getaddr.bitnodes.io/dashboard/chart/?days=60\n>>\n>> I know all the reasons why people might stop running a node (uses too much\n>> disk space, bandwidth, lost interest etc). But does anyone have any idea how\n>> we might get more insight into what's really going on? It'd be convenient if\n>> the subVer contained the operating system, as then we could tell if the\n>> bleed was mostly from desktops/laptops (Windows/Mac), which would be\n>> expected, or from virtual servers (Linux), which would be more concerning.\n>>\n>> When you set up a Tor node, you can add your email address to the config\n>> file and the Tor project sends you emails from time to time about things you\n>> should know about. If we did the same, we could have a little exit survey:\n>> if your node disappears for long enough, we could email the operator and ask\n>> why they stopped.\n>>\n>> ------------------------------------------------------------------------------\n>> Put Bad Developers to Shame\n>> Dominate Development with Jenkins Continuous Integration\n>> Continuously Automate Build, Test & Deployment\n>> Start a new project now. Try Jenkins in the cloud.\n>> http://p.sf.net/sfu/13600_Cloudbees_APR\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-07T14:05:34",
                "message_text_only": ">\n> My guess is that a large number of users have lost interest after they\n> lost their money in MtGox. The 24th of February coincides with the\n> \"final\" shutdown\n\n\nSigh. It would not be surprising if MtGox has indeed dealt the community a\ncritical blow in this regard. TX traffic is down since then too:\n\nhttps://blockchain.info/charts/n-transactions-excluding-popular?timespan=60days&showDataPoints=false&daysAverageString=1&show_header=true&scale=0&address=\n\nJudging from comments and the leaked user db, it seems a lot of well known\npeople lost money there   (not me fortunately). I wish I could say people\nhave learned but from the size of the deposit base at Bitstamp they clearly\nhave not. A lot of Bitcoin users don't seem to be ready to be their own\nbank, yet still want to own some on the assumption everyone else either is\nor soon will be. So it's really only a matter of time until something goes\nwrong with some large bitbank again, either Bitstamp or Coinbase.\n\nSome days I wonder if Bitcoin will be killed off by people who just refuse\nto use it properly before it ever gets a chance to shine. The general\npublic doesn't distinguish between \"Bitcoin users\" who deposit with a third\nparty and the real Bitcoin users who don't.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/a7331cc1/attachment.html>"
            },
            {
                "author": "Eric Martindale",
                "date": "2014-04-07T14:15:15",
                "message_text_only": "We need to make it so mind-numbingly simple to \"run Bitcoin correctly\" that\nthe average user doesn't find reasons to do so in the course of normal\nuse.  Right now, Coinbase and Bitstamp are winning in the user experience\nbattle, which technically endanger the user, and by proxy the Bitcoin\nnetwork.\n\nMulti-sig as a default is a start.  It won't succeed unless the user\nexperience is simply better than trusted third parties, but we need to\nstart the education process with the very basic fundamental: trusting a\nthird-party with full access to your Bitcoin is just replacing one\ncentralized banking system with another.\n\nEric Martindale\nDeveloper Evangelist, BitPay\n+1 (919) 374-2020\nOn Apr 7, 2014 7:05 AM, \"Mike Hearn\" <mike at plan99.net> wrote:\n\n> My guess is that a large number of users have lost interest after they\n>> lost their money in MtGox. The 24th of February coincides with the\n>> \"final\" shutdown\n>\n>\n> Sigh. It would not be surprising if MtGox has indeed dealt the community a\n> critical blow in this regard. TX traffic is down since then too:\n>\n>\n> https://blockchain.info/charts/n-transactions-excluding-popular?timespan=60days&showDataPoints=false&daysAverageString=1&show_header=true&scale=0&address=\n>\n> Judging from comments and the leaked user db, it seems a lot of well known\n> people lost money there   (not me fortunately). I wish I could say people\n> have learned but from the size of the deposit base at Bitstamp they clearly\n> have not. A lot of Bitcoin users don't seem to be ready to be their own\n> bank, yet still want to own some on the assumption everyone else either is\n> or soon will be. So it's really only a matter of time until something goes\n> wrong with some large bitbank again, either Bitstamp or Coinbase.\n>\n> Some days I wonder if Bitcoin will be killed off by people who just refuse\n> to use it properly before it ever gets a chance to shine. The general\n> public doesn't distinguish between \"Bitcoin users\" who deposit with a third\n> party and the real Bitcoin users who don't.\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/ba5bd602/attachment.html>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-04-07T19:46:01",
                "message_text_only": "I understand the theoretical benefits of multi-sig. But if you want\nto make this mind-numbingly simple, do it on the *existing* single-sig.\n\nBut why in the world do we not have a *business* that offers bitcoin\nwallet insurance? The bitcoin world (and this list) ran around blaming\nMtGox and users for being 'stupid' to trust mtgox.\n\nSo start a multi-level marketing business that offers *insurance* so\nif your bitcoin wallet gets hacked/stolen/whatever, your 'upstream'\nor whomever sold you the wallet comes to your house with a new \ncomputer or installs the new wallet software, or whatever, or just\nmakes it good.\n\nNow, if the **insurance underwriter** decides that multisig will \nreduce fraud, and **tests it**, then I'd say we do multi-sig. But right\nnow we are just a bunch of technology wizards trying to force our own\nopinions about what's right and 'simple' for end users without ever\nasking the damn end-users.\n\nAnd then we call the end-users idiots because some scammer calls them\nand says \"I'm calling from Microsoft and your computer is broke, please\ndownload this software to fix it\".\n\nMulti-sig is more magical moon-math that scammers will exploit to con\nyour grandma out of bitcoin, and then your friends will call her a stupid\nluddite for falling for it.\n\nFix the cultural victim-blaming bullshit and you'll fix the node bleeding\nproblem.\n\nOn Mon, Apr 07, 2014 at 10:15:15AM -0400, Eric Martindale wrote:\n> We need to make it so mind-numbingly simple to \"run Bitcoin correctly\" that\n> the average user doesn't find reasons to do so in the course of normal\n> use.  Right now, Coinbase and Bitstamp are winning in the user experience\n> battle, which technically endanger the user, and by proxy the Bitcoin\n> network.\n> \n> Multi-sig as a default is a start.  It won't succeed unless the user\n> experience is simply better than trusted third parties, but we need to\n> start the education process with the very basic fundamental: trusting a\n> third-party with full access to your Bitcoin is just replacing one\n> centralized banking system with another.\n> \n> Eric Martindale\n> Developer Evangelist, BitPay\n> +1 (919) 374-2020\n> On Apr 7, 2014 7:05 AM, \"Mike Hearn\" <mike at plan99.net> wrote:\n> \n> > My guess is that a large number of users have lost interest after they\n> >> lost their money in MtGox. The 24th of February coincides with the\n> >> \"final\" shutdown\n> >\n> >\n> > Sigh. It would not be surprising if MtGox has indeed dealt the community a\n> > critical blow in this regard. TX traffic is down since then too:\n> >\n> >\n> > https://blockchain.info/charts/n-transactions-excluding-popular?timespan=60days&showDataPoints=false&daysAverageString=1&show_header=true&scale=0&address=\n> >\n> > Judging from comments and the leaked user db, it seems a lot of well known\n> > people lost money there   (not me fortunately). I wish I could say people\n> > have learned but from the size of the deposit base at Bitstamp they clearly\n> > have not. A lot of Bitcoin users don't seem to be ready to be their own\n> > bank, yet still want to own some on the assumption everyone else either is\n> > or soon will be. So it's really only a matter of time until something goes\n> > wrong with some large bitbank again, either Bitstamp or Coinbase.\n> >\n> > Some days I wonder if Bitcoin will be killed off by people who just refuse\n> > to use it properly before it ever gets a chance to shine. The general\n> > public doesn't distinguish between \"Bitcoin users\" who deposit with a third\n> > party and the real Bitcoin users who don't.\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > Put Bad Developers to Shame\n> > Dominate Development with Jenkins Continuous Integration\n> > Continuously Automate Build, Test & Deployment\n> > Start a new project now. Try Jenkins in the cloud.\n> > http://p.sf.net/sfu/13600_Cloudbees_APR\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "kjj",
                "date": "2014-04-08T03:13:59",
                "message_text_only": "Multi-sig requires infrastructure.  It isn't a magic wand that we can \nwave to make everyone secure.  The protocols and techniques necessary \ndon't exist yet, and apparently no one has much of an incentive to \ncreate them.\n\nI mean no offense, and I don't mean to pick on you.  Your post stuck out \nwhile I was reading.  Secure multi-sig is what we all want, but wanting \napparently isn't enough to make it happen.\n\nOther random notes from reading this 50+ post thread:\n\nPerhaps we should have a config flag to prevent a node from serving IBD \nto new nodes.  IBD crushes marginal machines, particularly those with \nspinning disks.  This has been extensively discussed elsewhere.\n\nThe ideal IBD hosts are serving the blockchain out of a RAM disk. Is \nthere any interest in setting up a network of volunteers to host \nexpensive servers with fast connections?  It doesn't look too terribly \ndifficult to figure out when a node has stopped asking for blocks in \nbulk, so we could add another config flag to eject nodes once they are \ndone booting.\n\nEven ignoring IBD, I think that we are gradually outgrowing cheapass \nhosting options.  Personally, I long ago gave up on answering forum \nquestions about running nodes on virtual servers and VPSs.  It is \ncertainly still possible to run bitcoind on small boxes, but it isn't \ntrivial any more.  (Anyone running on less than my Athlon XP 1800+ with \n896 MB RAM?)  If we want those nodes back, we need to optimize the hell \nout of the memory use, and even that might not be enough.\n\n\nEric Martindale wrote:\n>\n> We need to make it so mind-numbingly simple to \"run Bitcoin correctly\" \n> that the average user doesn't find reasons to do so in the course of \n> normal use.  Right now, Coinbase and Bitstamp are winning in the user \n> experience battle, which technically endanger the user, and by proxy \n> the Bitcoin network.\n>\n> Multi-sig as a default is a start.  It won't succeed unless the user \n> experience is simply better than trusted third parties, but we need to \n> start the education process with the very basic fundamental: trusting \n> a third-party with full access to your Bitcoin is just replacing one \n> centralized banking system with another.\n>\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-08T07:50:31",
                "message_text_only": ">\n> Multi-sig requires infrastructure.  It isn't a magic wand that we can\n> wave to make everyone secure.  The protocols and techniques necessary\n> don't exist yet, and apparently no one has much of an incentive to\n> create them.\n\n\nIt is starting to happen. If you're OK with using a specific web wallet\nthere's BitGo and greenaddress.it already, though I think their risk\nanalysis is just sending you an SMS code. I wrote up an integration plan\nfor bitcoinj a few days ago:\n\n https://groups.google.com/forum/#!topic/bitcoinj/Uxl-z40OLuQ\n\nbut guess what? It's quite complicated. As with all these features.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/650f36bd/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2014-04-09T10:38:54",
                "message_text_only": "On that note, I think we have every possibility to make desktop and mobile wallets mind-numbingly simple -- and perhaps even do one better. Is this now a community priority? If so, I would really appreciate some additional contributors to Hive!\n\nhttps://github.com/hivewallet/hive-osx\nhttps://github.com/hivewallet/hive-android\n\n-wendell\n\nhivewallet.com | twitter.com/hivewallet | pgp 0x8C498718\ntwitter.com/bitcoinbookclub | campbitcoin.hivewallet.com\n\nOn Apr 7, 2014, at 9:15 PM, Eric Martindale wrote:\n\n> We need to make it so mind-numbingly simple to \"run Bitcoin correctly\" that the average user doesn't find reasons to do so in the course of normal use.  Right now, Coinbase and Bitstamp are winning in the user experience battle, which technically endanger the user, and by proxy the Bitcoin network.\n> \n> Multi-sig as a default is a start.  It won't succeed unless the user experience is simply better than trusted third parties, but we need to start the education process with the very basic fundamental: trusting a third-party with full access to your Bitcoin is just replacing one centralized banking system with another.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/0b52c0a2/attachment.sig>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-09T11:15:44",
                "message_text_only": "On Wed, Apr 9, 2014 at 12:38 PM, Wendell <w at hivewallet.com> wrote:\n\n> On that note, I think we have every possibility to make desktop and mobile\n> wallets mind-numbingly simple -- and perhaps even do one better. Is this\n> now a community priority? If so, I would really appreciate some additional\n> contributors to Hive!\n>\n>\nHow does that relate to the nodes issue?\n\nWould packaging an optional bitcoind with your wallet be an option, which\nis automatically managed in the background, so that users can run a full\nnode if they want?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/a1b6a0ec/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2014-04-07T14:45:33",
                "message_text_only": "On 4/7/2014 7:05 AM, Mike Hearn wrote:\n> Some days I wonder if Bitcoin will be killed off by people who just \n> refuse to use it properly before it ever gets a chance to shine. The \n> general public doesn't distinguish between \"Bitcoin users\" who deposit \n> with a third party and the real Bitcoin users who don't.\n>\n\nA Mt-Gox-scale incident was inevitable and there are probably more hard \nlessons in the future.  But it has made bitcoin much better already.  \nI'm referring to things like malleability fixes, cleaning house at the \nfoundation, and public education (hard as the lesson was).  A lot more \npeople than before understand the distinction you're making, and they \nare sharing the lesson."
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-04-07T12:19:04",
                "message_text_only": "I'm glad to see that I'm not the only one concerned about the consistent dropping of nodes. Though I think that the fundamental question should be: how many nodes do we really need? Obviously more is better, but it's difficult to say how concerned we should be without more information. I posted my thoughts last month: http://coinchomp.com/2014/03/19/bitcoin-nodes-many-enough/\n\nI have begun working on my node monitoring project and will post updates if it results in me gaining any new insights about the network.\n\n- Jameson\n\nOn 04/07/2014 07:34 AM, Mike Hearn wrote:\n> At the start of February we had 10,000 bitcoin nodes. Now we have 8,500 and\n> still falling:\n> \n>    http://getaddr.bitnodes.io/dashboard/chart/?days=60\n> \n> I know all the reasons why people *might* stop running a node (uses too\n> much disk space, bandwidth, lost interest etc). But does anyone have any\n> idea how we might get more insight into what's really going on? It'd be\n> convenient if the subVer contained the operating system, as then we could\n> tell if the bleed was mostly from desktops/laptops (Windows/Mac), which\n> would be expected, or from virtual servers (Linux), which would be more\n> concerning.\n> \n> When you set up a Tor node, you can add your email address to the config\n> file and the Tor project sends you emails from time to time about things\n> you should know about. If we did the same, we could have a little exit\n> survey: if your node disappears for long enough, we could email the\n> operator and ask why they stopped.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-07T12:26:40",
                "message_text_only": "On Mon, Apr 7, 2014 at 2:19 PM, Jameson Lopp <jameson.lopp at gmail.com> wrote:\n> I'm glad to see that I'm not the only one concerned about the consistent dropping of nodes. Though I think that the fundamental question should be: how many nodes do we really need? Obviously more is better, but it's difficult to say how concerned we should be without more information. I posted my thoughts last month: http://coinchomp.com/2014/03/19/bitcoin-nodes-many-enough/\n\nIn my opinion, the number of full nodes doesn't matter (as long as\nit's enough to satisfy demand by other nodes).\n\nWhat matters is how hard it is to run one. If someone is interesting\nin verifying that nobody is cheating on the network, can they, and can\nthey without significant investment? Whether they actually will\ndepends also no how interesting the currency and its digital transfers\nare.\n\n> On 04/07/2014 07:34 AM, Mike Hearn wrote:\n>> At the start of February we had 10,000 bitcoin nodes. Now we have 8,500 and\n>> still falling:\n>>\n>>    http://getaddr.bitnodes.io/dashboard/chart/?days=60\n\nMy own network crawler (which feeds my DNS seeder) hasn't seen any\nsignificant drop that I remember, but I don't have actual logs. It's\nseeing around 6000 \"well reachable nodes\" currently, which is the\nhighest number I've ever seen (though it's been around 6000 for quite\na while now).\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-07T12:34:03",
                "message_text_only": ">\n> In my opinion, the number of full nodes doesn't matter (as long as\n> it's enough to satisfy demand by other nodes).\n>\n\nCorrect. Still, a high number of nodes has a few other benefits:\n\n1) The more nodes there are, the cheaper it should be to run each one,\ngiven that the bandwidth and CPU for serving the chain will be spread over\nmore people.\n\n2) It makes Bitcoin *seem* bigger, more robust and more decentralised,\nbecause there are more people uniting to run it. So there's a psychological\nbenefit.\n\nAlso, we don't have a good way to measure capacity vs demand at the moment.\nWhether we have enough capacity is rather a shot in the dark right now.\n\n\n> What matters is how hard it is to run one.\n>\n\nWhich is why I'm interested to learn the reason behind the drop. Is it\ninsufficient interest, or is running a node too painful?\n\nFor this purpose I'd like to exclude people running Bitcoin Core on laptops\nor non-dedicated desktops. I don't think full nodes will ever make sense\nfor consumer wallets again, and I see the bleeding off of those people as\nnatural and expected (as Satoshi did). But if someone feels it's too hard\nto run on a cheap server then that'd concern me.\n\n\n> My own network crawler (which feeds my DNS seeder) hasn't seen any\n> significant drop\n\n\nIt would be good to explain the difference, but I suspect your definition\nof \"well reachable\" excludes people running Core at home. From the diurnal\ncycle we see in Addy's graphs it's clear some nodes are being shut down\nwhen people go to bed. So if we have 6000 nodes on servers and 2000 at\nhome, then I'd expect Addy's graphs and yours to slowly come into alignment\nas people give up using Core as a consumer wallet.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/3d4fd9cb/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-04-07T12:34:49",
                "message_text_only": "On 04/07/2014 08:26 AM, Pieter Wuille wrote:\n> In my opinion, the number of full nodes doesn't matter (as long as\n> it's enough to satisfy demand by other nodes).\n\nI agree, but if we don't quantify \"demand\" then we are practically blind. What is the plan? To wait until SPV clients start lagging / timing out because their requests cannot be handled by the nodes?\n\nFor all I know, the network would run just fine on 100 nodes. But not knowing really irks me as an engineer.\n\n- Jameson"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T13:50:54",
                "message_text_only": "On Mon, Apr 7, 2014 at 4:34 AM, Mike Hearn <mike at plan99.net> wrote:\n> At the start of February we had 10,000 bitcoin nodes. Now we have 8,500 and\n> still falling:\n\nFWIW, A few months before that we had even less than 8500 by the bitnodes count.\n\nBitcoin.org recommends people away from running Bitcoin-QT now, so I'm\nnot sure that we should generally find that trend surprising."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T13:53:20",
                "message_text_only": "On Mon, Apr 7, 2014 at 6:50 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> FWIW, A few months before that we had even less than 8500 by the bitnodes count.\n\nGah, accidentally send.... I wanted to continue here that it was less\nthan 8500 and had been falling pretty consistently for months,\nbasically since the bitcoin.org change.  Unfortunately it looks like\nthe old bitnodes.io data isn't available anymore, so I'm going off my\nmemory here.\n\nThe Bitnodes counts have always been somewhat higher than my or sipa's\nnode counts too, fwiw."
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-04-07T13:58:37",
                "message_text_only": "The Bitnodes project updated their counting algorithm a month or so ago. It used to be slower and less accurate - prior to their update, it was reporting in excess of 100,000 nodes.\n\n- Jameson\n\nOn 04/07/2014 09:53 AM, Gregory Maxwell wrote:\n> On Mon, Apr 7, 2014 at 6:50 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> FWIW, A few months before that we had even less than 8500 by the bitnodes count.\n> \n> Gah, accidentally send.... I wanted to continue here that it was less\n> than 8500 and had been falling pretty consistently for months,\n> basically since the bitcoin.org change.  Unfortunately it looks like\n> the old bitnodes.io data isn't available anymore, so I'm going off my\n> memory here.\n> \n> The Bitnodes counts have always been somewhat higher than my or sipa's\n> node counts too, fwiw.\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T14:04:13",
                "message_text_only": "On Mon, Apr 7, 2014 at 6:58 AM, Jameson Lopp <jameson.lopp at gmail.com> wrote:\n> The Bitnodes project updated their counting algorithm a month or so ago. It used to be slower and less accurate - prior to their update, it was reporting in excess of 100,000 nodes.\n\nNah.  It reported multiple metrics. The \"100,000\" number was an mostly\nuseless metric that just counted the number of distinct addr messages\nfloating around the network, which contains a lot of junk.  They also\nreported an actual connectable node count previously and while they\nmay have tweaked things here and there as far as I can tell it has\nbeen consistent with the numbers they are using in the headlines now."
            },
            {
                "author": "Jesus Cea",
                "date": "2014-04-08T11:28:21",
                "message_text_only": "On 07/04/14 15:50, Gregory Maxwell wrote:\n> Bitcoin.org recommends people away from running Bitcoin-QT now, so I'm\n> not sure that we should generally find that trend surprising.\n\nWhat options are out there for people caring about 20GB blockchain?\nDepending of third party server is not an option.\n\n-- \nJes\u00fas Cea Avi\u00f3n                         _/_/      _/_/_/        _/_/_/\njcea at jcea.es - http://www.jcea.es/     _/_/    _/_/  _/_/    _/_/  _/_/\nTwitter: @jcea                        _/_/    _/_/          _/_/_/_/_/\njabber / xmpp:jcea at jabber.org  _/_/  _/_/    _/_/          _/_/  _/_/\n\"Things are not so easy\"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/\n\"My name is Dump, Core Dump\"   _/_/_/        _/_/_/      _/_/  _/_/\n\"El amor es poner tu felicidad en la felicidad de otro\" - Leibniz\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 538 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/eaf7912b/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-07T15:45:55",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/07/2014 11:34 AM, Mike Hearn wrote:\n> At the start of February we had 10,000 bitcoin nodes. Now we have 8,500 and\n> still falling:\n> \n>    http://getaddr.bitnodes.io/dashboard/chart/?days=60\n> \n> I know all the reasons why people *might* stop running a node (uses too\n> much disk space, bandwidth, lost interest etc). But does anyone have any\n> idea how we might get more insight into what's really going on? It'd be\n> convenient if the subVer contained the operating system, as then we could\n> tell if the bleed was mostly from desktops/laptops (Windows/Mac), which\n> would be expected, or from virtual servers (Linux), which would be more\n> concerning.\n\nIt doesn't do much good to only focus on the immediate symptoms at the\nexclusion of big picture trends. There are three things happening now\nthat have nothing to do with operating systems.\n\n1. The resource requirements of a full node are moving beyond the\ncapabilities of casual users. This isn't inherently a problem - after\nall most people don't grow their own food, tailor their own clothes, or\nkeep blacksmith tools handy in to forge their own horseshoes either.\n\n2. The growth of small and medium-sized native Bitcoin businesses is\nlagging #1. Native here means their revenue and expenses are both\ndenominated in BTC. Most business adoption we've seen so far doesn't\nactually handle bitcoins themselves. They use Bitcoin as a payment\nmethod whose processing they outsource.\n\nContributing to this is the fact that Bitcoin Core, although it has made\ngreat progress in the 0.9 release, can't be accurately described as\n\"enterprise ready\".\n\n3. The P2P protocol used by the network is broken from an incentive\nperspective. Resource usage wouldn't be a problem as long as the users\nwhich consume resources pay for them and the users who provide resources\nare compensated, and they communicate via an efficient price discovery\nmechanism. Right now there is no obvious way to incorporate price\ndiscovery for bandwidth usage or storage space without a completely new\nP2P protocol, and the effectiveness with which progress has been blocked\ntowards price discovery of transaction fees (the area where it is most\nobviously necessary) means that I'm not optimistic that this subject\nwill ever be effectively addressed by Bitcoin Core.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTQsgzAAoJECoisBQbQ4v0ZA8H/1YIJAg7AEUUe5RnuuAz7lVV\nuiHtpmbmGaZ+Bd0qi1DEfPdeBP9bDKpO3O5napmtz+mqIE5H3VgAVg7z9U0sMf16\nsZAJIWuVCg2drY/NaE+n3TKEEd4Z1Zj51rWde/KD6xjgR2usV9nLugkEJdLNahZu\n0EbdAv40oCSZ8PScNElYqQyM8qcbta7LuDRCnnWvCyunZJzL4LSkQwDcsAWQ+oSv\nFyqKY/e1Kd6mLyrN/NppMzdqiLv95zmE56Qkh6rlKeF+JgXxlfiEfDv8osl8IWJR\nTOpmW0Dr+E4qe9E3nA7X5gV46nf8gxGZ4b0cUP+wivN9RRaE27+JlKhKaAV3ulc=\n=vdPa\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/a3b1250c/attachment.bin>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T15:53:10",
                "message_text_only": "On Mon, Apr 7, 2014 at 8:45 AM, Justus Ranvier <justusranvier at gmail.com> wrote:\n> 1. The resource requirements of a full node are moving beyond the\n> capabilities of casual users. This isn't inherently a problem - after\n> all most people don't grow their own food, tailor their own clothes, or\n> keep blacksmith tools handy in to forge their own horseshoes either.\n\nRight now running a full node consumes about $1 in disk space\nnon-reoccurring and costs a couple cents in power per month.\n\nThis isn't to say things are all ducky. But if you're going to say the\nresource requirements are beyond the capabilities of casual users I'm\nafraid I'm going to have to say: citation needed."
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-04-07T16:02:49",
                "message_text_only": "I would point to bandwidth as the most important issue to the casual user who runs a node at home. Few casual users have the know-how to set up QoS rules and thus become quite annoyed when their Internet connection is discernibly slowed.\n\n- Jameson\n\nOn 04/07/2014 11:53 AM, Gregory Maxwell wrote:\n> On Mon, Apr 7, 2014 at 8:45 AM, Justus Ranvier <justusranvier at gmail.com> wrote:\n>> 1. The resource requirements of a full node are moving beyond the\n>> capabilities of casual users. This isn't inherently a problem - after\n>> all most people don't grow their own food, tailor their own clothes, or\n>> keep blacksmith tools handy in to forge their own horseshoes either.\n> \n> Right now running a full node consumes about $1 in disk space\n> non-reoccurring and costs a couple cents in power per month.\n> \n> This isn't to say things are all ducky. But if you're going to say the\n> resource requirements are beyond the capabilities of casual users I'm\n> afraid I'm going to have to say: citation needed.\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-07T16:27:07",
                "message_text_only": "Right now running a full-node on my home DSL connection (<1Mbps) makes\nother internet activity periodically unresponsive. I think we've already\nhit a point where resource requirements are pushing out casual users,\nalthough of course we can't be certain that accounts for all lost nodes.\n\nOn 04/07/2014 08:53 AM, Gregory Maxwell wrote:\n> On Mon, Apr 7, 2014 at 8:45 AM, Justus Ranvier <justusranvier at gmail.com> wrote:\n>> 1. The resource requirements of a full node are moving beyond the\n>> capabilities of casual users. This isn't inherently a problem - after\n>> all most people don't grow their own food, tailor their own clothes, or\n>> keep blacksmith tools handy in to forge their own horseshoes either.\n> \n> Right now running a full node consumes about $1 in disk space\n> non-reoccurring and costs a couple cents in power per month.\n> \n> This isn't to say things are all ducky. But if you're going to say the\n> resource requirements are beyond the capabilities of casual users I'm\n> afraid I'm going to have to say: citation needed.\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> .\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T16:57:08",
                "message_text_only": "On Mon, Apr 7, 2014 at 9:27 AM, Mark Friedenbach <mark at monetize.io> wrote:\n> Right now running a full-node on my home DSL connection (<1Mbps) makes\n> other internet activity periodically unresponsive. I think we've already\n> hit a point where resource requirements are pushing out casual users,\n> although of course we can't be certain that accounts for all lost nodes.\n\nThat is an implementation issue\u2014 mostly one that arises as an indirect\nconsequence of not having headers first and the parallel fetch, not a\nrequirements issue.\n\nUnder the current bitcoin validity rules it should be completely\nreasonable to run a full contributing node with no more than 30 kb/s\ninbound (reviving two copies of everything, blocks + tansactions ) and\n60 kbit/sec outbound (sending out four copies of everything). (So long\nas you're sending out >= what you're taking in you're contributing to\nthe network's capacity). Throw in a factor of two for bursting, though\nnot every node needs to be contributing super low latency capacity.\n\nThis is absolutely not the case with the current implementation, but\nit's not a requirements thing."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-07T17:01:46",
                "message_text_only": "On 04/07/2014 09:57 AM, Gregory Maxwell wrote:\n> That is an implementation issue\u2014 mostly one that arises as an indirect\n> consequence of not having headers first and the parallel fetch, not a\n> requirements issue.\n\nOh, absolutely. But the question \"why are people not running full\nnodes?\" has to do with the current implementation, not abstract\ncapabilities of a future version of the bitcoind code base."
            },
            {
                "author": "Chris Williams",
                "date": "2014-04-07T17:39:37",
                "message_text_only": "I\u2019m afraid this is a highly simplistic view of the costs of running a full node.\n\nMy node consumes fantastic amounts of data traffic, which is a real cost.\n\nIn the 30 days ending Apri 6, my node:\n\n* Received 36.8 gb of data\n* Sent 456.5 gb data\n\nAt my geographic service location (Singapore), this cost about $90 last month for bandwidth alone. It would be slightly cheaper if I was hosted in the US of course.\n\nBut anyone can understand that moving a half-terrabyte of data around in a month will not be cheap.\n\n\nOn Apr 7, 2014, at 8:53 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Apr 7, 2014 at 8:45 AM, Justus Ranvier <justusranvier at gmail.com> wrote:\n>> 1. The resource requirements of a full node are moving beyond the\n>> capabilities of casual users. This isn't inherently a problem - after\n>> all most people don't grow their own food, tailor their own clothes, or\n>> keep blacksmith tools handy in to forge their own horseshoes either.\n> \n> Right now running a full node consumes about $1 in disk space\n> non-reoccurring and costs a couple cents in power per month.\n> \n> This isn't to say things are all ducky. But if you're going to say the\n> resource requirements are beyond the capabilities of casual users I'm\n> afraid I'm going to have to say: citation needed.\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/07ccb3d7/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-07T18:23:36",
                "message_text_only": ">\n> * Sent 456.5 gb data\n>\n> At my geographic service location (Singapore), this cost about $90 last\n> month for bandwidth alone.\n\n\nOne of the reasons I initiated the (now stalled) PayFile project was in\nanticipation of this problem:\n\nhttps://github.com/mikehearn/PayFile\nhttp://www.youtube.com/watch?v=r0BXnWlnIi4&feature=youtu.be\n\nAt some point if you want to actually download and validate the full block\nchain from scratch, you will have to start paying for it I'm sure.\n\nIn the meantime:\n\n   1. Getting headers-first implemented and rolled out everywhere would\n   reduce the amount of redundant downloading and hopefully reduce transmit\n   traffic network-wide.\n   2. Implementing chain pruning would allow people to control upload\n   bandwidth consumption by reducing the amount of disk storage they allow.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/a570ba8f/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-07T18:35:40",
                "message_text_only": "Headers first loading allows the node to run SPV from the very first minutes and it can converge to full node by time.\nThis is BTW how newest versions of BOP can work.\n\nPruning however disqualifies the node as a source for bootstrapping an other full node. \nBTW, did we already agree on the service bits for an archive node?\n\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 20:23, Mike Hearn <mike at plan99.net> wrote:\n\n> * Sent 456.5 gb data\n> \n> At my geographic service location (Singapore), this cost about $90 last month for bandwidth alone.\n> \n> One of the reasons I initiated the (now stalled) PayFile project was in anticipation of this problem:\n> \n> https://github.com/mikehearn/PayFile\n> http://www.youtube.com/watch?v=r0BXnWlnIi4&feature=youtu.be\n> \n> At some point if you want to actually download and validate the full block chain from scratch, you will have to start paying for it I'm sure.\n> \n> In the meantime:\n> Getting headers-first implemented and rolled out everywhere would reduce the amount of redundant downloading and hopefully reduce transmit traffic network-wide.\n> Implementing chain pruning would allow people to control upload bandwidth consumption by reducing the amount of disk storage they allow.\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/3bc77bbe/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/3bc77bbe/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T18:49:05",
                "message_text_only": "On Mon, Apr 7, 2014 at 11:35 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> BTW, did we already agree on the service bits for an archive node?\n\nI'm still very concerned that a binary archive bit will cause extreme\nload hot-spotting and the kind of binary \"Use lots of resources YES or\nNO\" I think we're currently suffering some from, but at that point\nenshrined in the protocol.\n\nIt would be much better to extend the addr messages so that nodes can\nindicate a range or two of blocks that they're serving, so that all\nnodes can contribute fractionally according to their means. E.g. if\nyou want to offer up 8 GB of distributed storage and contribute to the\navailability of the blockchain,  without having to swollow the whole\n20, 30, 40 ... gigabyte pill.\n\nAlready we need that kind of distributed storage for the most recent\nblocks to prevent extreme bandwidth load on archives, so extending it\nto arbitrary ranges is only more complicated because there is\ncurrently no room to signal it."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-07T19:00:27",
                "message_text_only": "Once a single transaction in pruned in a block, the block is no longer eligible to be served to other nodes. \nWhich transactions are pruned can be rather custom e.g. even depending on the wallet(s) of the node,\ntherefore I guess it is more handy to return some bitmap of pruned/full blocks than ranges.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 20:49, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Apr 7, 2014 at 11:35 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>> BTW, did we already agree on the service bits for an archive node?\n> \n> I'm still very concerned that a binary archive bit will cause extreme\n> load hot-spotting and the kind of binary \"Use lots of resources YES or\n> NO\" I think we're currently suffering some from, but at that point\n> enshrined in the protocol.\n> \n> It would be much better to extend the addr messages so that nodes can\n> indicate a range or two of blocks that they're serving, so that all\n> nodes can contribute fractionally according to their means. E.g. if\n> you want to offer up 8 GB of distributed storage and contribute to the\n> availability of the blockchain,  without having to swollow the whole\n> 20, 30, 40 ... gigabyte pill.\n> \n> Already we need that kind of distributed storage for the most recent\n> blocks to prevent extreme bandwidth load on archives, so extending it\n> to arbitrary ranges is only more complicated because there is\n> currently no room to signal it.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/e37eb022/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/e37eb022/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-07T18:48:26",
                "message_text_only": "On 04/07/2014 12:00 PM, Tamas Blummer wrote:\n> Once a single transaction in pruned in a block, the block is no longer\n> eligible to be served to other nodes. \n> Which transactions are pruned can be rather custom e.g. even depending\n> on the wallet(s) of the node,\n> therefore I guess it is more handy to return some bitmap of pruned/full\n> blocks than ranges.\n\nThe point is that the node has decided not to prune transactions from\nthat block, so that it is capable of returning full blocks within that\nrange."
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T19:02:28",
                "message_text_only": "On Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> Once a single transaction in pruned in a block, the block is no longer\n> eligible to be served to other nodes.\n> Which transactions are pruned can be rather custom e.g. even depending on\n> the wallet(s) of the node,\n> therefore I guess it is more handy to return some bitmap of pruned/full\n> blocks than ranges.\n\nThis isn't at all how pruning works in Bitcoin-QT  (nor is it how I\nexpect pruning to work for any mature implementation). Pruning can\nwork happily on a whole block at a time basis regardless if all the\ntransactions in it are spent or not."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-07T19:05:48",
                "message_text_only": "Maybe it is not a question of the maturity of the implementation but that of the person making presumptions of it.\n\nI consider a fully pruned blockchain being equivalent to the UTXO. Block that hold no\nmore unspent transaction are reduced to a header. There is however no harm if more retained.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 21:02, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>> Once a single transaction in pruned in a block, the block is no longer\n>> eligible to be served to other nodes.\n>> Which transactions are pruned can be rather custom e.g. even depending on\n>> the wallet(s) of the node,\n>> therefore I guess it is more handy to return some bitmap of pruned/full\n>> blocks than ranges.\n> \n> This isn't at all how pruning works in Bitcoin-QT  (nor is it how I\n> expect pruning to work for any mature implementation). Pruning can\n> work happily on a whole block at a time basis regardless if all the\n> transactions in it are spent or not.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/5d49d687/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/5d49d687/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T19:03:54",
                "message_text_only": "On Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> therefore I guess it is more handy to return some bitmap of pruned/full\n> blocks than ranges.\n\nA bitmap also means high overhead and\u2014 if it's used to advertise\nnon-contiguous blocks\u2014 poor locality, since blocks are fetched\nsequentially."
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-07T19:13:07",
                "message_text_only": "On Mon, Apr 7, 2014 at 8:03 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> A bitmap also means high overhead and-- if it's used to advertise\n> non-contiguous blocks-- poor locality, since blocks are fetched\n> sequentially.\n>\n\nA range seems like a great compromise.  Putting it in the address is also a\npretty cool.\n\nIf light nodes selected a random contiguous 1GB of the block-chain, then\nthey could handle most of the download overhead, rather than the full nodes.\n\nAnother way to do it would be to have something like a routing table.  If a\nnode is queried for a block, it can reply with the IP of a node with that\nblock instead of sending the block.\n\nOne problem is that it means that light nodes have to accept incoming\nconnections.  Otherwise, it would have to be routed through the network.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/b5bfb780/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-07T19:20:31",
                "message_text_only": "Once headers are loaded first there is no reason for sequential loading. \n\nValidation has to be sequantial, but that step can be deferred until the blocks before a point are loaded and continous.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 21:03, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>> therefore I guess it is more handy to return some bitmap of pruned/full\n>> blocks than ranges.\n> \n> A bitmap also means high overhead and\u2014 if it's used to advertise\n> non-contiguous blocks\u2014 poor locality, since blocks are fetched\n> sequentially.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/895983a6/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/895983a6/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-07T19:13:04",
                "message_text_only": "On 04/07/2014 12:20 PM, Tamas Blummer wrote:\n> Validation has to be sequantial, but that step can be deferred until the\n> blocks before a point are loaded and continous.\n\nAnd how do you find those blocks?\n\nI have a suggestion: have nodes advertise which range of full blocks\nthey possess, then you can perform synchronization from the adversed ranges!"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-07T19:36:56",
                "message_text_only": "You have the trunk defined by the headers. Once a range from genesis to block n is fully downloaded,\nyou may validate upto block n. Furthermore after validation you can prune transactions spent until block n.\n\nYou would approach the highest block with validation and stop pruning say 100 blocks before it, to leave room for reorgs.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 21:13, Mark Friedenbach <mark at monetize.io> wrote:\n\n> \n> \n> On 04/07/2014 12:20 PM, Tamas Blummer wrote:\n>> Validation has to be sequantial, but that step can be deferred until the\n>> blocks before a point are loaded and continous.\n> \n> And how do you find those blocks?\n> \n> I have a suggestion: have nodes advertise which range of full blocks\n> they possess, then you can perform synchronization from the adversed ranges!\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/cc4c7838/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/cc4c7838/attachment.sig>"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2014-04-07T21:46:26",
                "message_text_only": "Or have blocks distributed through pruned nodes as a DHT.\n\n2014-04-07 20:13 GMT+01:00 Mark Friedenbach <mark at monetize.io>:\n>\n>\n> On 04/07/2014 12:20 PM, Tamas Blummer wrote:\n>> Validation has to be sequantial, but that step can be deferred until the\n>> blocks before a point are loaded and continous.\n>\n> And how do you find those blocks?\n>\n> I have a suggestion: have nodes advertise which range of full blocks\n> they possess, then you can perform synchronization from the adversed ranges!\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Paul Lyon",
                "date": "2014-04-07T19:30:54",
                "message_text_only": "I hope I'm not thread-jacking here, apologies if so, but that's the approach I've taken with the node I'm working on.\nHeaders can be downloaded and stored in any order, it'll make sense of what the winning chain is. Blocks don't need to be downloaded in any particular order and they don't need to be saved to disk, the UTXO is fully self-contained. That way the concern of storing blocks for seeding (or not) is wholly separated from syncing the UTXO. This allows me to do the initial blockchain sync in ~6 hours when I use my SSD. I only need enough disk space to store the UTXO, and then whatever amount of block data the user would want to store for the health of the network.\nThis project is a bitcoin learning exercise for me, so I can only hope I don't have any critical design flaws in there. :)\n\nFrom: tamas at bitsofproof.com\nDate: Mon, 7 Apr 2014 21:20:31 +0200\nTo: gmaxwell at gmail.com\nCC: bitcoin-development at lists.sourceforge.net\nSubject: Re: [Bitcoin-development] Why are we bleeding nodes?\n\n\nOnce headers are loaded first there is no reason for sequential loading. \nValidation has to be sequantial, but that step can be deferred until the blocks before a point are loaded and continous.\nTamas Blummerhttp://bitsofproof.com\n\n\nOn 07.04.2014, at 21:03, Gregory Maxwell <gmaxwell at gmail.com> wrote:On Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\ntherefore I guess it is more handy to return some bitmap of pruned/full\nblocks than ranges.\n\nA bitmap also means high overhead and\u2014 if it's used to advertise\nnon-contiguous blocks\u2014 poor locality, since blocks are fetched\nsequentially.\n\n\n\n------------------------------------------------------------------------------\nPut Bad Developers to Shame\nDominate Development with Jenkins Continuous Integration\nContinuously Automate Build, Test & Deployment \nStart a new project now. Try Jenkins in the cloud.\nhttp://p.sf.net/sfu/13600_Cloudbees\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development \t\t \t   \t\t  \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/8d2a8562/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-07T19:50:26",
                "message_text_only": "You have to load headers sequantially to be able to connect them and determine the longest chain.\n\nBlocks can be loaded in random order once you have their order given by the headers.\nComputing the UTXO however will force you to at least temporarily store the blocks unless you have plenty of RAM. \n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 21:30, Paul Lyon <pmlyon at hotmail.ca> wrote:\n\n> I hope I'm not thread-jacking here, apologies if so, but that's the approach I've taken with the node I'm working on.\n> \n> Headers can be downloaded and stored in any order, it'll make sense of what the winning chain is. Blocks don't need to be downloaded in any particular order and they don't need to be saved to disk, the UTXO is fully self-contained. That way the concern of storing blocks for seeding (or not) is wholly separated from syncing the UTXO. This allows me to do the initial blockchain sync in ~6 hours when I use my SSD. I only need enough disk space to store the UTXO, and then whatever amount of block data the user would want to store for the health of the network.\n> \n> This project is a bitcoin learning exercise for me, so I can only hope I don't have any critical design flaws in there. :)\n> \n> From: tamas at bitsofproof.com\n> Date: Mon, 7 Apr 2014 21:20:31 +0200\n> To: gmaxwell at gmail.com\n> CC: bitcoin-development at lists.sourceforge.net\n> Subject: Re: [Bitcoin-development] Why are we bleeding nodes?\n> \n> \n> Once headers are loaded first there is no reason for sequential loading. \n> \n> Validation has to be sequantial, but that step can be deferred until the blocks before a point are loaded and continous.\n> \n> Tamas Blummer\n> http://bitsofproof.com\n> \n> On 07.04.2014, at 21:03, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> \n>> On Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>>> therefore I guess it is more handy to return some bitmap of pruned/full\n>>> blocks than ranges.\n>> \n>> A bitmap also means high overhead and\u2014 if it's used to advertise\n>> non-contiguous blocks\u2014 poor locality, since blocks are fetched\n>> sequentially.\n>> \n> \n> \n> ------------------------------------------------------------------------------ Put Bad Developers to Shame Dominate Development with Jenkins Continuous Integration Continuously Automate Build, Test & Deployment Start a new project now. Try Jenkins in the cloud.http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/c7bb2295/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/c7bb2295/attachment.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-07T21:48:03",
                "message_text_only": "On Mon, Apr 7, 2014 at 8:50 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n\n> You have to load headers sequantially to be able to connect them and\n> determine the longest chain.\n>\n\nThe isn't strictly true.  If you are connected to a some honest nodes, then\nyou could download portions of the chain and then connect the various\nsub-chains together.\n\nThe protocol doesn't support it though.  There is no system to ask for\nblock headers for the main chain block with a given height,\n\nFinding one high bandwidth peer to download the entire header chain\nsequentially is pretty much forced.  The client can switch if there is a\ntimeout.\n\nOther peers could be used to parallel download the block chain while the\nmain chain is downloading.  Even if the header download stalled, it\nwouldn't be that big a deal.\n\n> Blocks can be loaded in random order once you have their order given by\nthe headers.\n> Computing the UTXO however will force you to at least temporarily store\nthe blocks unless you have plenty of RAM.\n\nYou only need to store the UTXO set, rather than the entire block chain.\n\nIt is possible to generate the UTXO set without doing any signature\nverification.\n\nA lightweight node could just verify the UTXO set and then do random\nsignature verifications.\n\nThe keeps disk space and CPU reasonably low.  If an illegal transaction is\nadded to be a block, then proof could be provided for the bad transaction.\n\nThe only slightly difficult thing is confirming inflation.  That can be\nchecked on a block by block basis when downloading the entire block chain.\n\n> Regards,\n> Tamas Blummer\n> http://bitsofproof.com <http://bitsofproof.com>\n\nOn 07.04.2014, at 21:30, Paul Lyon <pmlyon at hotmail.ca> wrote:\n\nI hope I'm not thread-jacking here, apologies if so, but that's the\napproach I've taken with the node I'm working on.\n\nHeaders can be downloaded and stored in any order, it'll make sense of what\nthe winning chain is. Blocks don't need to be downloaded in any particular\norder and they don't need to be saved to disk, the UTXO is fully\nself-contained. That way the concern of storing blocks for seeding (or not)\nis wholly separated from syncing the UTXO. This allows me to do the initial\nblockchain sync in ~6 hours when I use my SSD. I only need enough disk\nspace to store the UTXO, and then whatever amount of block data the user\nwould want to store for the health of the network.\n\nThis project is a bitcoin learning exercise for me, so I can only hope I\ndon't have any critical design flaws in there. :)\n\n------------------------------\nFrom: tamas at bitsofproof.com\nDate: Mon, 7 Apr 2014 21:20:31 +0200\nTo: gmaxwell at gmail.com\nCC: bitcoin-development at lists.sourceforge.net\nSubject: Re: [Bitcoin-development] Why are we bleeding nodes?\n\n\nOnce headers are loaded first there is no reason for sequential loading.\n\nValidation has to be sequantial, but that step can be deferred until the\nblocks before a point are loaded and continous.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 21:03, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\nOn Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com>\nwrote:\n\ntherefore I guess it is more handy to return some bitmap of pruned/full\nblocks than ranges.\n\n\nA bitmap also means high overhead and-- if it's used to advertise\nnon-contiguous blocks-- poor locality, since blocks are fetched\nsequentially.\n\n\n\n------------------------------------------------------------------------------\nPut Bad Developers to Shame Dominate Development with Jenkins Continuous\nIntegration Continuously Automate Build, Test & Deployment Start a new\nproject now. Try Jenkins in the cloud.http://p.sf.net/sfu/13600_Cloudbees\n\n_______________________________________________ Bitcoin-development mailing\nlist Bitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/391b78f4/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T21:56:21",
                "message_text_only": "On Mon, Apr 7, 2014 at 2:48 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>> Blocks can be loaded in random order once you have their order given by\n>> the headers.\n>> Computing the UTXO however will force you to at least temporarily store\n>> the blocks unless you have plenty of RAM.\n> You only need to store the UTXO set, rather than the entire block chain.\n\nThe comment was specifically in the context of an out of order fetch.\nVerification must be in order. If you have fetched blocks out of order\nyou must preserve them at least long enough to reorder them. Thats\nall."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-08T03:44:14",
                "message_text_only": "Being Mr. Torrent, I've held open the \"80% serious\" suggestion to\nsimply refuse to serve blocks older than X (3 months?).\n\nThat forces download by other means (presumably torrent).\n\nI do not feel it is productive for any nodes on the network to waste\ntime/bandwidth/etc. serving static, ancient data.  There remain, of\ncourse, issues of older nodes and \"getting the word out\" that prevents\nthis switch from being flipped on tomorrow.\n\n\n\nOn Mon, Apr 7, 2014 at 2:49 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Mon, Apr 7, 2014 at 11:35 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>> BTW, did we already agree on the service bits for an archive node?\n>\n> I'm still very concerned that a binary archive bit will cause extreme\n> load hot-spotting and the kind of binary \"Use lots of resources YES or\n> NO\" I think we're currently suffering some from, but at that point\n> enshrined in the protocol.\n>\n> It would be much better to extend the addr messages so that nodes can\n> indicate a range or two of blocks that they're serving, so that all\n> nodes can contribute fractionally according to their means. E.g. if\n> you want to offer up 8 GB of distributed storage and contribute to the\n> availability of the blockchain,  without having to swollow the whole\n> 20, 30, 40 ... gigabyte pill.\n>\n> Already we need that kind of distributed storage for the most recent\n> blocks to prevent extreme bandwidth load on archives, so extending it\n> to arbitrary ranges is only more complicated because there is\n> currently no room to signal it.\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jean-Paul Kogelman",
                "date": "2014-04-08T07:24:37",
                "message_text_only": "Isn't that just conceding that p2p protocol A is better than p2p protocol B?\n\nCan't Bitcoin Core's block fetching be improved to get similar performance as a torrent + import?\n\nCurrently it's hard to go wide on data fetching because headers first is still pretty 'beefy'. The headers can be compressed, which would get you about 50% savings.\n\nAlso, maybe adding a layer that groups block headers into a single hash (say, 2016 headers), and then being able to fetch those (possibly compressed) header 'blocks' from multiple sources in parallel. And fanning out block fetches even further, favoring fast nodes.\n\nJust thinking out loud.\n\njp\n\n> On Apr 7, 2014, at 8:44 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n> \n> Being Mr. Torrent, I've held open the \"80% serious\" suggestion to\n> simply refuse to serve blocks older than X (3 months?).\n> \n> That forces download by other means (presumably torrent).\n> \n> I do not feel it is productive for any nodes on the network to waste\n> time/bandwidth/etc. serving static, ancient data.  There remain, of\n> course, issues of older nodes and \"getting the word out\" that prevents\n> this switch from being flipped on tomorrow.\n> \n> \n> \n>> On Mon, Apr 7, 2014 at 2:49 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>>> On Mon, Apr 7, 2014 at 11:35 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>>> BTW, did we already agree on the service bits for an archive node?\n>> \n>> I'm still very concerned that a binary archive bit will cause extreme\n>> load hot-spotting and the kind of binary \"Use lots of resources YES or\n>> NO\" I think we're currently suffering some from, but at that point\n>> enshrined in the protocol.\n>> \n>> It would be much better to extend the addr messages so that nodes can\n>> indicate a range or two of blocks that they're serving, so that all\n>> nodes can contribute fractionally according to their means. E.g. if\n>> you want to offer up 8 GB of distributed storage and contribute to the\n>> availability of the blockchain,  without having to swollow the whole\n>> 20, 30, 40 ... gigabyte pill.\n>> \n>> Already we need that kind of distributed storage for the most recent\n>> blocks to prevent extreme bandwidth load on archives, so extending it\n>> to arbitrary ranges is only more complicated because there is\n>> currently no room to signal it.\n>> \n>> ------------------------------------------------------------------------------\n>> Put Bad Developers to Shame\n>> Dominate Development with Jenkins Continuous Integration\n>> Continuously Automate Build, Test & Deployment\n>> Start a new project now. Try Jenkins in the cloud.\n>> http://p.sf.net/sfu/13600_Cloudbees\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-08T07:59:24",
                "message_text_only": "Specialization of nodes is ongoing most prominent with SPV wallets and mining.\n\nThere is a need I see on my own business for software that is able to serve multiple wallets, and is multi tiered,\nso the world facing P2P node can be in a DMZ. I target them with a hybrid model that is SPV plus mempool transaction validation \nagainst UTXO and use \u2018reference\u2019 implementations as border router.  I think that this setup will be common for enterprises \nand hence push for a stripped down \u2018reference\u2019 border router without wallet, payment protocol, GUI, RPC calls here. \n\nThat border router could also serve as archive node evtl. also offering blocks at bulk e.g. through http. \nEnterprises that run a multi tiered environment have the bandwith to serve as archives.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 08.04.2014, at 05:44, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> Being Mr. Torrent, I've held open the \"80% serious\" suggestion to\n> simply refuse to serve blocks older than X (3 months?).\n> \n> That forces download by other means (presumably torrent).\n> \n> I do not feel it is productive for any nodes on the network to waste\n> time/bandwidth/etc. serving static, ancient data.  There remain, of\n> course, issues of older nodes and \"getting the word out\" that prevents\n> this switch from being flipped on tomorrow.\n> \n> \n> \n> On Mon, Apr 7, 2014 at 2:49 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> On Mon, Apr 7, 2014 at 11:35 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>>> BTW, did we already agree on the service bits for an archive node?\n>> \n>> I'm still very concerned that a binary archive bit will cause extreme\n>> load hot-spotting and the kind of binary \"Use lots of resources YES or\n>> NO\" I think we're currently suffering some from, but at that point\n>> enshrined in the protocol.\n>> \n>> It would be much better to extend the addr messages so that nodes can\n>> indicate a range or two of blocks that they're serving, so that all\n>> nodes can contribute fractionally according to their means. E.g. if\n>> you want to offer up 8 GB of distributed storage and contribute to the\n>> availability of the blockchain,  without having to swollow the whole\n>> 20, 30, 40 ... gigabyte pill.\n>> \n>> Already we need that kind of distributed storage for the most recent\n>> blocks to prevent extreme bandwidth load on archives, so extending it\n>> to arbitrary ranges is only more complicated because there is\n>> currently no room to signal it.\n>> \n>> ------------------------------------------------------------------------------\n>> Put Bad Developers to Shame\n>> Dominate Development with Jenkins Continuous Integration\n>> Continuously Automate Build, Test & Deployment\n>> Start a new project now. Try Jenkins in the cloud.\n>> http://p.sf.net/sfu/13600_Cloudbees\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> -- \n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/45cfae92/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/45cfae92/attachment.sig>"
            },
            {
                "author": "Andrew LeCody",
                "date": "2014-04-08T17:18:01",
                "message_text_only": "My node (based in Dallas, TX) has about 240 connections and is using a\nlittle under 4 Mbps in bandwidth right now.\n\nAccording the hosting provider I'm at 11.85 Mbps for this week, using 95th\npercentile billing. The report from my provider includes my other servers\nthough.\n\n\nOn Mon, Apr 7, 2014 at 12:39 PM, Chris Williams <chris at icloudtools.net>wrote:\n\n> I\u2019m afraid this is a highly simplistic view of the costs of running a full\n> node.\n>\n> My node consumes fantastic amounts of data traffic, which is a real cost.\n>\n> In the 30 days ending Apri 6, my node:\n>\n> * Received 36.8 gb of data\n> * Sent 456.5 gb data\n>\n> At my geographic service location (Singapore), this cost about $90 last\n> month for bandwidth alone. It would be slightly cheaper if I was hosted in\n> the US of course.\n>\n> But anyone can understand that moving a half-terrabyte of data around in a\n> month will not be cheap.\n>\n>\n> On Apr 7, 2014, at 8:53 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>\n> > On Mon, Apr 7, 2014 at 8:45 AM, Justus Ranvier <justusranvier at gmail.com>\n> wrote:\n> >> 1. The resource requirements of a full node are moving beyond the\n> >> capabilities of casual users. This isn't inherently a problem - after\n> >> all most people don't grow their own food, tailor their own clothes, or\n> >> keep blacksmith tools handy in to forge their own horseshoes either.\n> >\n> > Right now running a full node consumes about $1 in disk space\n> > non-reoccurring and costs a couple cents in power per month.\n> >\n> > This isn't to say things are all ducky. But if you're going to say the\n> > resource requirements are beyond the capabilities of casual users I'm\n> > afraid I'm going to have to say: citation needed.\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Put Bad Developers to Shame\n> > Dominate Development with Jenkins Continuous Integration\n> > Continuously Automate Build, Test & Deployment\n> > Start a new project now. Try Jenkins in the cloud.\n> > http://p.sf.net/sfu/13600_Cloudbees_APR\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/d50a040e/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2014-04-07T17:07:09",
                "message_text_only": "For what it's worth, the number of nodes rose dramatically during the China\nbullrun (I recall 45k in China alone) and dropped as dramatically as the\nprice after the first PBOC announcement designed to cool down bitcoin\ntrading in China.\n\n\nOn 7 April 2014 12:34, Mike Hearn <mike at plan99.net> wrote:\n\n> At the start of February we had 10,000 bitcoin nodes. Now we have 8,500\n> and still falling:\n>\n>    http://getaddr.bitnodes.io/dashboard/chart/?days=60\n>\n> I know all the reasons why people *might* stop running a node (uses too\n> much disk space, bandwidth, lost interest etc). But does anyone have any\n> idea how we might get more insight into what's really going on? It'd be\n> convenient if the subVer contained the operating system, as then we could\n> tell if the bleed was mostly from desktops/laptops (Windows/Mac), which\n> would be expected, or from virtual servers (Linux), which would be more\n> concerning.\n>\n> When you set up a Tor node, you can add your email address to the config\n> file and the Tor project sends you emails from time to time about things\n> you should know about. If we did the same, we could have a little exit\n> survey: if your node disappears for long enough, we could email the\n> operator and ask why they stopped.\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_APR\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/8869112e/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-07T14:23:59",
                "message_text_only": "Indeed, fully agreed. The only way to really make progress here is to make\nthe UX of being your own bank not only as good as trusting a third party,\nbut better.\n\nI've been encouraged by the rise of risk analysis services, but we need to\nintegrate them into wallets more widely for them to have much impact.\nOtherwise people get to pick between a variety of wallets, none of which\nhave *all* the features they want. And TREZOR is cool, albeit, something\nthat's going to be for committed users only.\n\n\n\nOn Mon, Apr 7, 2014 at 4:15 PM, Eric Martindale <eric at ericmartindale.com>wrote:\n\n> We need to make it so mind-numbingly simple to \"run Bitcoin correctly\"\n> that the average user doesn't find reasons to do so in the course of normal\n> use.  Right now, Coinbase and Bitstamp are winning in the user experience\n> battle, which technically endanger the user, and by proxy the Bitcoin\n> network.\n>\n> Multi-sig as a default is a start.  It won't succeed unless the user\n> experience is simply better than trusted third parties, but we need to\n> start the education process with the very basic fundamental: trusting a\n> third-party with full access to your Bitcoin is just replacing one\n> centralized banking system with another.\n>\n> Eric Martindale\n> Developer Evangelist, BitPay\n> +1 (919) 374-2020\n> On Apr 7, 2014 7:05 AM, \"Mike Hearn\" <mike at plan99.net> wrote:\n>\n>>  My guess is that a large number of users have lost interest after they\n>>> lost their money in MtGox. The 24th of February coincides with the\n>>> \"final\" shutdown\n>>\n>>\n>> Sigh. It would not be surprising if MtGox has indeed dealt the community\n>> a critical blow in this regard. TX traffic is down since then too:\n>>\n>>\n>> https://blockchain.info/charts/n-transactions-excluding-popular?timespan=60days&showDataPoints=false&daysAverageString=1&show_header=true&scale=0&address=\n>>\n>> Judging from comments and the leaked user db, it seems a lot of well\n>> known people lost money there   (not me fortunately). I wish I could say\n>> people have learned but from the size of the deposit base at Bitstamp they\n>> clearly have not. A lot of Bitcoin users don't seem to be ready to be their\n>> own bank, yet still want to own some on the assumption everyone else either\n>> is or soon will be. So it's really only a matter of time until something\n>> goes wrong with some large bitbank again, either Bitstamp or Coinbase.\n>>\n>> Some days I wonder if Bitcoin will be killed off by people who just\n>> refuse to use it properly before it ever gets a chance to shine. The\n>> general public doesn't distinguish between \"Bitcoin users\" who deposit with\n>> a third party and the real Bitcoin users who don't.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Put Bad Developers to Shame\n>> Dominate Development with Jenkins Continuous Integration\n>> Continuously Automate Build, Test & Deployment\n>> Start a new project now. Try Jenkins in the cloud.\n>> http://p.sf.net/sfu/13600_Cloudbees_APR\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/baedd37f/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T17:16:03",
                "message_text_only": "On Mon, Apr 7, 2014 at 10:01 AM, Mark Friedenbach <mark at monetize.io> wrote:\n> On 04/07/2014 09:57 AM, Gregory Maxwell wrote:\n>> That is an implementation issue\u2014 mostly one that arises as an indirect\n>> consequence of not having headers first and the parallel fetch, not a\n>> requirements issue.\n>\n> Oh, absolutely. But the question \"why are people not running full\n> nodes?\" has to do with the current implementation, not abstract\n> capabilities of a future version of the bitcoind code base.\n\nThe distinction is very important because it's a matter of things we\ncan and should fix vs things that cannot be fixed except by changing\ngoals/incentives!  Opposite approaches to handling them.\n\nWhen I read \"resource requirements of a full node are moving beyond\" I\ndidn't extract from that that \"there are implementation issues that\nneed to be improved to make it work better for low resource users\" due\nto the word \"requirements\"."
            },
            {
                "author": "Brent Shambaugh",
                "date": "2014-04-07T17:35:59",
                "message_text_only": "How difficult would it be to set up a node? Using lots of electricity at\nhome (if required) could be an issue, but I do have a Webfaction account.\n\n\nOn Mon, Apr 7, 2014 at 12:16 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Apr 7, 2014 at 10:01 AM, Mark Friedenbach <mark at monetize.io>\n> wrote:\n> > On 04/07/2014 09:57 AM, Gregory Maxwell wrote:\n> >> That is an implementation issue-- mostly one that arises as an indirect\n> >> consequence of not having headers first and the parallel fetch, not a\n> >> requirements issue.\n> >\n> > Oh, absolutely. But the question \"why are people not running full\n> > nodes?\" has to do with the current implementation, not abstract\n> > capabilities of a future version of the bitcoind code base.\n>\n> The distinction is very important because it's a matter of things we\n> can and should fix vs things that cannot be fixed except by changing\n> goals/incentives!  Opposite approaches to handling them.\n>\n> When I read \"resource requirements of a full node are moving beyond\" I\n> didn't extract from that that \"there are implementation issues that\n> need to be improved to make it work better for low resource users\" due\n> to the word \"requirements\".\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/1a30bc9b/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-07T17:40:17",
                "message_text_only": "It uses ~no electricity, it's not like mining.\n\nThe primary resources it needs are disk space and bandwidth, after an\nintensive initial day or two of building the database.\n\nActually, I wonder if we should start shipping (auditable) pre-baked\ndatabases calculated up to the last checkpoint so people can download them\nand boot up their node right away. Recalculating the entire thing from\nscratch every time isn't sustainable in the long run anyway.\n\n\nOn Mon, Apr 7, 2014 at 7:35 PM, Brent Shambaugh\n<brent.shambaugh at gmail.com>wrote:\n\n> How difficult would it be to set up a node? Using lots of electricity at\n> home (if required) could be an issue, but I do have a Webfaction account.\n>\n>\n> On Mon, Apr 7, 2014 at 12:16 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Mon, Apr 7, 2014 at 10:01 AM, Mark Friedenbach <mark at monetize.io>\n>> wrote:\n>> > On 04/07/2014 09:57 AM, Gregory Maxwell wrote:\n>> >> That is an implementation issue\u2014 mostly one that arises as an indirect\n>> >> consequence of not having headers first and the parallel fetch, not a\n>> >> requirements issue.\n>> >\n>> > Oh, absolutely. But the question \"why are people not running full\n>> > nodes?\" has to do with the current implementation, not abstract\n>> > capabilities of a future version of the bitcoind code base.\n>>\n>> The distinction is very important because it's a matter of things we\n>> can and should fix vs things that cannot be fixed except by changing\n>> goals/incentives!  Opposite approaches to handling them.\n>>\n>> When I read \"resource requirements of a full node are moving beyond\" I\n>> didn't extract from that that \"there are implementation issues that\n>> need to be improved to make it work better for low resource users\" due\n>> to the word \"requirements\".\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Put Bad Developers to Shame\n>> Dominate Development with Jenkins Continuous Integration\n>> Continuously Automate Build, Test & Deployment\n>> Start a new project now. Try Jenkins in the cloud.\n>> http://p.sf.net/sfu/13600_Cloudbees\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/5ce1e052/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-07T17:44:08",
                "message_text_only": "On Mon, Apr 7, 2014 at 10:40 AM, Mike Hearn <mike at plan99.net> wrote:\n> Actually, I wonder\n\nThe actual validation isn't really the problem today. The slowness of\nthe IBD is almost exclusively the lack of parallel fetching and the\nexistence of slow peers.  And making the signature gate adaptive (and\ndeploying the 6x faster ECDSA code) would improve that future.\n\nGo grab sipa's headers first branch, it has no problem saturating a\n20mbit/sec pipe syncing up."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-07T17:45:30",
                "message_text_only": "I rather prefer to start with SPV and upgrade to full node, if desired.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 19:40, Mike Hearn <mike at plan99.net> wrote:\n\n> \n> Actually, I wonder if we should start shipping (auditable) pre-baked databases calculated up to the last checkpoint so people can download them and boot up their node right away. Recalculating the entire thing from scratch every time isn't sustainable in the long run anyway.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/a48a9890/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/a48a9890/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-07T17:50:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/07/2014 05:40 PM, Mike Hearn wrote:\n> The primary resources it needs are disk space and bandwidth, after\n> an intensive initial day or two of building the database.\n\nCheck out the kind of hardware causal users are running these days.\n\nThe bottleneck is not bulk disk space, but rather IOPS.\n\nMost users don't have spare machines to dedicate to the task of\nrunning a full node, nor is it acceptable for them to not be able to\nuse their device for other tasks while the node is bootstrapping.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTQuVNAAoJECoisBQbQ4v004EIAMPpQLrVlzCoGjcgALyHV4xK\n6JDnlCHXTR72mTlKwcbD6Dpyr/Dl6tcXtdbQi0m3gsbOcAZI/eHtrswgunaq7c1y\nmTOM2klPE4M8+B/4Ecp+2iK2UM/swlL3z8ryx/HPhgOZ+Rr7AENe3WUYOKiVNE4O\nYQP1x9c0l09ma3ZU0sLmz2VTyqVzI7yV3mu/+HKcwYnqNrK9i/c8MRhOLdZ0gcUL\nb2PtjjCdnSNLelZvwSLcqqR5+1oejAVwgt1Aq4RGyZzD9DVdCXUR9c9HWLAs0MEU\nWPU5gU03YmrE5mkgGHRO3YnDbky0gdAGEw2Phzqd2upud4CLqdhEqA4v6/tQhpk=\n=BVpU\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/4cb4a70b/attachment.bin>"
            },
            {
                "author": "Arne Brutschy",
                "date": "2014-04-07T18:30:07",
                "message_text_only": "> The bottleneck is not bulk disk space, but rather IOPS.\n\nExactly. I stopped running a full node on both of my desktops machines\nin the last month. Both systems were simply becoming very noticeable\n(=unbearably) sluggish. I am also running dedicated nodes, which are\nfine, but on a desktop latency is a major issue (or, let's say,  a\ndifferent issue than on a server).\n\nI didn't notice any network latency, but that's hard to judge as our\ninternet is pants anyway.\n\nArne\n\nPS: my machines aren't the newest, but still do a stellar job (without\nbitcoind running ;)"
            },
            {
                "author": "Brent Shambaugh",
                "date": "2014-04-07T17:56:07",
                "message_text_only": "Okay awesome. It seems like I set up a Litecoin node without knowing it\n(because it was like this:\nhttps://bitcointalk.org/index.php?topic=128122.0) I was able to bootstrap\nit (https://litecoin.info/).\n\n\nOn Mon, Apr 7, 2014 at 12:40 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> It uses ~no electricity, it's not like mining.\n>\n> The primary resources it needs are disk space and bandwidth, after an\n> intensive initial day or two of building the database.\n>\n> Actually, I wonder if we should start shipping (auditable) pre-baked\n> databases calculated up to the last checkpoint so people can download them\n> and boot up their node right away. Recalculating the entire thing from\n> scratch every time isn't sustainable in the long run anyway.\n>\n>\n> On Mon, Apr 7, 2014 at 7:35 PM, Brent Shambaugh <brent.shambaugh at gmail.com\n> > wrote:\n>\n>> How difficult would it be to set up a node? Using lots of electricity at\n>> home (if required) could be an issue, but I do have a Webfaction account.\n>>\n>>\n>> On Mon, Apr 7, 2014 at 12:16 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>>\n>>> On Mon, Apr 7, 2014 at 10:01 AM, Mark Friedenbach <mark at monetize.io>\n>>> wrote:\n>>> > On 04/07/2014 09:57 AM, Gregory Maxwell wrote:\n>>> >> That is an implementation issue-- mostly one that arises as an indirect\n>>> >> consequence of not having headers first and the parallel fetch, not a\n>>> >> requirements issue.\n>>> >\n>>> > Oh, absolutely. But the question \"why are people not running full\n>>> > nodes?\" has to do with the current implementation, not abstract\n>>> > capabilities of a future version of the bitcoind code base.\n>>>\n>>> The distinction is very important because it's a matter of things we\n>>> can and should fix vs things that cannot be fixed except by changing\n>>> goals/incentives!  Opposite approaches to handling them.\n>>>\n>>> When I read \"resource requirements of a full node are moving beyond\" I\n>>> didn't extract from that that \"there are implementation issues that\n>>> need to be improved to make it work better for low resource users\" due\n>>> to the word \"requirements\".\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Put Bad Developers to Shame\n>>> Dominate Development with Jenkins Continuous Integration\n>>> Continuously Automate Build, Test & Deployment\n>>> Start a new project now. Try Jenkins in the cloud.\n>>> http://p.sf.net/sfu/13600_Cloudbees\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Put Bad Developers to Shame\n>> Dominate Development with Jenkins Continuous Integration\n>> Continuously Automate Build, Test & Deployment\n>> Start a new project now. Try Jenkins in the cloud.\n>> http://p.sf.net/sfu/13600_Cloudbees\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/e8c86e05/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-07T17:46:12",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/07/2014 05:16 PM, Gregory Maxwell wrote:\n> When I read \"resource requirements of a full node are moving\n> beyond\" I didn't extract from that that \"there are implementation\n> issues that need to be improved to make it work better for low\n> resource users\" due to the word \"requirements\".\n\nIn order to prevent future confusion: whenever I talk about\nrequirements (or generally use the present tense) , I'm talking about\nreality as it currently exists.\n\nIf I ever decide to talk about hypothetical future requirements in\nsome imaginary world of Platonic forms, as opposed to the requirements\nimposed by the software that's actually available for casual users to\ndownload today, I'll mention that specifically.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTQuRkAAoJECoisBQbQ4v07zUH/2wNQ7+0211+wm5oQP/ABHg7\nkQVeQcRz8/BhOp3hzv6HiQ9Oaekfz7QhClbJYPUPE3aR2gxGoCgT6B1G2N75q0pG\npiGVgCeogaBA3Ny91sOPRMv92cGWpbTeyO+rhIIIlYWPiZobTaYttYYm1zF6oc6K\nCdYzCW9X12/NIXxEkbPnAFJ01Uty0HKccTP+9jex7+gobzl2yCo4MyywwtWF9XEk\nK9aZ3+3i+12+F4nDMAAimD02SV6dI8GMpahMf4kNXn0CcMefC9A28FdhhApPh7Nx\n1phQnMPZMPdYt0aHgjgzt4N+SR/1EOUZaoqk9ccyXh+khBR84tiUEo6NuOIfTGM=\n=Mr12\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/3990ddd2/attachment.bin>"
            },
            {
                "author": "Paul Lyon",
                "date": "2014-04-07T21:55:53",
                "message_text_only": "I actually ask for headers from each peer I\u2019m connected to and then dump them into the backend to be sorted out.. is this abusive to the network? I\u2019m concerned about that as I work on this, it only dawned on me the other night that I really shouldn\u2019t use the seed peers for downloading\u2026\n\n\nI figured with the headers being so tiny, it wouldn\u2019t be a burden to ask for them from each peer. I won\u2019t actually end up downloading the full blockchain\u2019s worth of headers from every peer; I\u2019m continually getting an updated view of the current winning chain before I send out additional header requests to peers.\n\n\n\n\n\n\nFrom: Tier Nolan\nSent: \u200eMonday\u200e, \u200eApril\u200e \u200e07\u200e, \u200e2014 \u200e6\u200e:\u200e48\u200e \u200ePM\nTo: bitcoin-development at lists.sourceforge.net\n\n\n\n\n\n\n\n\nOn Mon, Apr 7, 2014 at 8:50 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n\n\nYou have to load headers sequantially to be able to connect them and determine the longest chain.\n\n\n\n\nThe isn't strictly true.  If you are connected to a some honest nodes, then you could download portions of the chain and then connect the various sub-chains together.\n\nThe protocol doesn't support it though.  There is no system to ask for block headers for the main chain block with a given height,\n\n\nFinding one high bandwidth peer to download the entire header chain sequentially is pretty much forced.  The client can switch if there is a timeout.\n\n\nOther peers could be used to parallel download the block chain while the main chain is downloading.  Even if the header download stalled, it wouldn't be that big a deal.\n\n\n\n\n\n\n> Blocks can be loaded in random order once you have their order given by the headers.\n> Computing the UTXO however will force you to at least temporarily store the blocks unless you have plenty of RAM. \n\n\nYou only need to store the UTXO set, rather than the entire block chain.\n\n\n\nIt is possible to generate the UTXO set without doing any signature verification.\n\n\n\nA lightweight node could just verify the UTXO set and then do random signature verifications.\n\n\n\nThe keeps disk space and CPU reasonably low.  If an illegal transaction is added to be a block, then proof could be provided for the bad transaction.\n\n\n\nThe only slightly difficult thing is confirming inflation.  That can be checked on a block by block basis when downloading the entire block chain.\n\n\n\n\n> Regards,\n> Tamas Blummer\n> http://bitsofproof.com \n\n\n\n\nOn 07.04.2014, at 21:30, Paul Lyon <pmlyon at hotmail.ca> wrote:\n\n\n\n\n\nI hope I'm not thread-jacking here, apologies if so, but that's the approach I've taken with the node I'm working on.\n\n\n\nHeaders can be downloaded and stored in any order, it'll make sense of what the winning chain is. Blocks don't need to be downloaded in any particular order and they don't need to be saved to disk, the UTXO is fully self-contained. That way the concern of storing blocks for seeding (or not) is wholly separated from syncing the UTXO. This allows me to do the initial blockchain sync in ~6 hours when I use my SSD. I only need enough disk space to store the UTXO, and then whatever amount of block data the user would want to store for the health of the network.\n\n\n\n\n\nThis project is a bitcoin learning exercise for me, so I can only hope I don't have any critical design flaws in there. :)\n\n\n\n\n\n\nFrom: tamas at bitsofproof.com\nDate: Mon, 7 Apr 2014 21:20:31 +0200\nTo: gmaxwell at gmail.com\nCC: bitcoin-development at lists.sourceforge.net\nSubject: Re: [Bitcoin-development] Why are we bleeding nodes?\n\n\n\n\n\nOnce headers are loaded first there is no reason for sequential loading. \n\n\n\n\nValidation has to be sequantial, but that step can be deferred until the blocks before a point are loaded and continous.\n\n\nTamas Blummer\nhttp://bitsofproof.com\n\n\n\nOn 07.04.2014, at 21:03, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n\nOn Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n\ntherefore I guess it is more handy to return some bitmap of pruned/full\nblocks than ranges.\n\n\nA bitmap also means high overhead and\u2014 if it's used to advertise\nnon-contiguous blocks\u2014 poor locality, since blocks are fetched\nsequentially.\n\n\n\n------------------------------------------------------------------------------ Put Bad Developers to Shame Dominate Development with Jenkins Continuous Integration Continuously Automate Build, Test & Deployment Start a new project now. Try Jenkins in the cloud.http://p.sf.net/sfu/13600_Cloudbees\n \n_______________________________________________ Bitcoin-development mailing list Bitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n------------------------------------------------------------------------------\nPut Bad Developers to Shame\nDominate Development with Jenkins Continuous Integration\nContinuously Automate Build, Test & Deployment\nStart a new project now. Try Jenkins in the cloud.\nhttp://p.sf.net/sfu/13600_Cloudbees\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/bd4612f0/attachment.html>\n-------------- next part --------------\n------------------------------------------------------------------------------\nPut Bad Developers to Shame\nDominate Development with Jenkins Continuous Integration\nContinuously Automate Build, Test & Deployment \nStart a new project now. Try Jenkins in the cloud.\nhttp://p.sf.net/sfu/13600_Cloudbees\n-------------- next part --------------\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-07T22:14:10",
                "message_text_only": "On Mon, Apr 7, 2014 at 10:55 PM, Paul Lyon <pmlyon at hotmail.ca> wrote:\n\n>  I actually ask for headers from each peer I'm connected to and then dump\n> them into the backend to be sorted out.. is this abusive to the network?\n>\n\nI think downloading from a subset of the peers and switching out any slow\nones is a reasonable compromise.\n\nOnce you have a chain, you can quickly check that all peers have the same\nmain chain.\n\nYour backend system could have a method that gives you the hash of the last\n10 headers on the longest chain it knows about.  You can use the block\nlocator hash system.\n\nThis can be used with the getheaders message and if the new peer is on a\ndifferent chain, then it will just send you the headers starting at the\ngenesis block.\n\nIf that happens, you need to download the entire chain from that peer and\nsee if it is better than your current best.\n\n\n*From:* Tier Nolan <tier.nolan at gmail.com>\n*Sent:* Monday, April 07, 2014 6:48 PM\n*To:* bitcoin-development at lists.sourceforge.net\n\n\nOn Mon, Apr 7, 2014 at 8:50 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n\n> You have to load headers sequantially to be able to connect them and\n> determine the longest chain.\n>\n\nThe isn't strictly true.  If you are connected to a some honest nodes, then\nyou could download portions of the chain and then connect the various\nsub-chains together.\n\nThe protocol doesn't support it though.  There is no system to ask for\nblock headers for the main chain block with a given height,\n\nFinding one high bandwidth peer to download the entire header chain\nsequentially is pretty much forced.  The client can switch if there is a\ntimeout.\n\nOther peers could be used to parallel download the block chain while the\nmain chain is downloading.  Even if the header download stalled, it\nwouldn't be that big a deal.\n\n> Blocks can be loaded in random order once you have their order given by\nthe headers.\n> Computing the UTXO however will force you to at least temporarily store\nthe blocks unless you have plenty of RAM.\n\nYou only need to store the UTXO set, rather than the entire block chain.\n\nIt is possible to generate the UTXO set without doing any signature\nverification.\n\nA lightweight node could just verify the UTXO set and then do random\nsignature verifications.\n\nThe keeps disk space and CPU reasonably low.  If an illegal transaction is\nadded to be a block, then proof could be provided for the bad transaction.\n\nThe only slightly difficult thing is confirming inflation.  That can be\nchecked on a block by block basis when downloading the entire block chain.\n\n> Regards,\n> Tamas Blummer\n> http://bitsofproof.com <http://bitsofproof.com>\n\nOn 07.04.2014, at 21:30, Paul Lyon <pmlyon at hotmail.ca> wrote:\n\nI hope I'm not thread-jacking here, apologies if so, but that's the\napproach I've taken with the node I'm working on.\n\nHeaders can be downloaded and stored in any order, it'll make sense of what\nthe winning chain is. Blocks don't need to be downloaded in any particular\norder and they don't need to be saved to disk, the UTXO is fully\nself-contained. That way the concern of storing blocks for seeding (or not)\nis wholly separated from syncing the UTXO. This allows me to do the initial\nblockchain sync in ~6 hours when I use my SSD. I only need enough disk\nspace to store the UTXO, and then whatever amount of block data the user\nwould want to store for the health of the network.\n\nThis project is a bitcoin learning exercise for me, so I can only hope I\ndon't have any critical design flaws in there. :)\n\n------------------------------\nFrom: tamas at bitsofproof.com\nDate: Mon, 7 Apr 2014 21:20:31 +0200\nTo: gmaxwell at gmail.com\nCC: bitcoin-development at lists.sourceforge.net\nSubject: Re: [Bitcoin-development] Why are we bleeding nodes?\n\n\nOnce headers are loaded first there is no reason for sequential loading.\n\nValidation has to be sequantial, but that step can be deferred until the\nblocks before a point are loaded and continous.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 07.04.2014, at 21:03, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\nOn Mon, Apr 7, 2014 at 12:00 PM, Tamas Blummer <tamas at bitsofproof.com>\nwrote:\n\ntherefore I guess it is more handy to return some bitmap of pruned/full\nblocks than ranges.\n\n\nA bitmap also means high overhead and-- if it's used to advertise\nnon-contiguous blocks-- poor locality, since blocks are fetched\nsequentially.\n\n\n\n------------------------------------------------------------------------------\nPut Bad Developers to Shame Dominate Development with Jenkins Continuous\nIntegration Continuously Automate Build, Test & Deployment Start a new\nproject now. Try Jenkins in the cloud.http://p.sf.net/sfu/13600_Cloudbees\n\n_______________________________________________ Bitcoin-development mailing\nlist Bitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140407/ddf2c7e2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Why are we bleeding nodes?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Arne Brutschy",
                "Wladimir",
                "Andreas Schildbach",
                "Eric Martindale",
                "Tier Nolan",
                "Brent Shambaugh",
                "Justus Ranvier",
                "Tom Harding",
                "Troy Benjegerdes",
                "kjj",
                "Mike Hearn",
                "Andrew LeCody",
                "Ricardo Filipe",
                "Gregory Maxwell",
                "Mark Friedenbach",
                "Wendell",
                "Jeff Garzik",
                "Tamas Blummer",
                "Drak",
                "Jean-Paul Kogelman",
                "Jameson Lopp",
                "Paul Lyon",
                "Chris Williams",
                "Pieter Wuille",
                "Jesus Cea"
            ],
            "messages_count": 61,
            "total_messages_chars_count": 108915
        }
    },
    {
        "title": "[Bitcoin-development] New BIP32 structure",
        "thread_messages": [
            {
                "author": "slush",
                "date": "2014-04-08T12:43:30",
                "message_text_only": "After some off-list discussion about details with wallet developers, it\nseems that structure\n\nm/<cointype>'/<account>'/<change>/<n>\n\nfulfill requirements of all wallet developers around, including myTrezor,\nElectrum, Multibit, Wallet32 and other software is willing to adapt once\nanything will be standardized (i.e. they don't care).\n\nBecause I think that everybody told their comments to the topic already and\nbecause it seems that there's quite wide agreement on that, I would like to\nclose the discussion and finally implement these paths into our software.\n\nCheers,\nMarek\n\n\nOn Fri, Mar 28, 2014 at 3:59 PM, slush <slush at centrum.cz> wrote:\n\n> I agree that 'version' field of bip32 is not necessary and xpriv/xpub\n> should be enough for all cases; there's actually no need to use different\n> BIP32 roots for different altcoins.\n>\n> I'm happily using one xpub for Bitcoin/Testnet/Litecoin at once, and by\n> having the \"cointype\" distinction in the bip32 path itself, I'm sure that I\n> don't reuse the same pubkey across blockchains which may be a privacy issue\n> otherwise.\n>\n> Marek\n>\n>\n> On Thu, Mar 27, 2014 at 5:28 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n>\n>> On Thu, Mar 27, 2014 at 5:21 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n>> > Cointype in path is for separation purposes, not for identification.\n>>\n>> I don't understand what that gains you.\n>>\n>> --\n>> Pieter\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/3409249a/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-08T13:18:52",
                "message_text_only": "I still don't understand the purpose of cointype. If you don't want to\nrisk reusing the same keys across different currencies, just don't use\nthe same seed or the same account? That is purely a client-side issue.\n\nIf the consensus is to add the cointype anyway, can we fix it to be\nequal to the 4-byte magic in the serialization (after setting the high\nbit to true)? That way there aren't two 4-byte magic codes that need\nto be defined for each, and at the same time make it obvious from the\nserialized form what it is for.\n\n\n\nOn Tue, Apr 8, 2014 at 2:43 PM, slush <slush at centrum.cz> wrote:\n> After some off-list discussion about details with wallet developers, it\n> seems that structure\n>\n> m/<cointype>'/<account>'/<change>/<n>\n>\n> fulfill requirements of all wallet developers around, including myTrezor,\n> Electrum, Multibit, Wallet32 and other software is willing to adapt once\n> anything will be standardized (i.e. they don't care).\n>\n> Because I think that everybody told their comments to the topic already and\n> because it seems that there's quite wide agreement on that, I would like to\n> close the discussion and finally implement these paths into our software.\n>\n> Cheers,\n> Marek\n>\n>\n> On Fri, Mar 28, 2014 at 3:59 PM, slush <slush at centrum.cz> wrote:\n>>\n>> I agree that 'version' field of bip32 is not necessary and xpriv/xpub\n>> should be enough for all cases; there's actually no need to use different\n>> BIP32 roots for different altcoins.\n>>\n>> I'm happily using one xpub for Bitcoin/Testnet/Litecoin at once, and by\n>> having the \"cointype\" distinction in the bip32 path itself, I'm sure that I\n>> don't reuse the same pubkey across blockchains which may be a privacy issue\n>> otherwise.\n>>\n>> Marek\n>>\n>>\n>> On Thu, Mar 27, 2014 at 5:28 PM, Pieter Wuille <pieter.wuille at gmail.com>\n>> wrote:\n>>>\n>>> On Thu, Mar 27, 2014 at 5:21 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n>>> > Cointype in path is for separation purposes, not for identification.\n>>>\n>>> I don't understand what that gains you.\n>>>\n>>> --\n>>> Pieter\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "slush",
                "date": "2014-04-08T13:40:05",
                "message_text_only": "On Tue, Apr 8, 2014 at 3:18 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> I still don't understand the purpose of cointype. If you don't want to\n> risk reusing the same keys across different currencies, just don't use\n> the same seed or the same account? That is purely a client-side issue.\n>\n>\nOf course it is purely client-side issue, but it matters.\n\nThere's actually no reason to generate, backup and store individual seeds\nfor various coins and purposes. User can handle all his identities and\naltcoins with single seed, avoiding potential issues with using wrong seed\nfor other purposes.\n\nActually with accounts and cointypes in the path, you can have all your\ncrypto funds stored on single seed, which I see as very comfortable\nsolution.\n\nBut to gain advantages of such solution and avoid reusing the same path\nacross blockchains, we need to separate the space, which is achieved by\ncointype.\n\n\n> If the consensus is to add the cointype anyway, can we fix it to be\n> equal to the 4-byte magic in the serialization (after setting the high\n> bit to true)? That way there aren't two 4-byte magic codes that need\n> to be defined for each, and at the same time make it obvious from the\n> serialized form what it is for.\n>\n>\nSerialization magic of bip32 seed is in my opinion completely unnecessary.\nMost of software does not care about it anyway; You can use xprv/xpub pair\nfor main net, testnet, litecoin, dogecoin, whatevercoin.\n\nInstead using the same seed (xprv) and then separate the chains *inside*\nthe bip32 path seems more useful to me.\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/1e5227bc/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-08T13:43:49",
                "message_text_only": "tl;dr;\n\nIt is dangerous to expect that other seed than \"xprv\" does not contain\nbitcoins or that \"xprv\" contains only bitcoins, because technically are\nboth situations possible. It is still safer to do the lookup; the magic\nitself is ambiguous.\n\nMarek\n\nOn Tue, Apr 8, 2014 at 3:40 PM, slush <slush at centrum.cz> wrote:\n\n>\n> Serialization magic of bip32 seed is in my opinion completely unnecessary.\n> Most of software does not care about it anyway; You can use xprv/xpub pair\n> for main net, testnet, litecoin, dogecoin, whatevercoin.\n>\n> Instead using the same seed (xprv) and then separate the chains *inside*\n> the bip32 path seems more useful to me.\n>\n> Marek\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/8f510949/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-08T13:53:52",
                "message_text_only": "I see the cause of our disagreement now.\n\nYou actually want to share a single BIP32 tree across different\ncurrency types, but do it in a way that guarantees that they never use\nthe same keys.\n\nI would have expected that different chains would use independent\nchains, and have serializations encode which chain they belong to.\n\nLet me offer an alternative suggestion, which is compatible with the\noriginal default BIP32 structure:\n* You can use one seed across different chains, but the master nodes\nare separate.\n* To derive the master node from the seed, the key string \"Bitcoin\nseed\" is replaced by something chain-specific.\n* Every encoded node (including master nodes) has a chain-specific\nserialization magic.\n\nThis is in practice almost the same as your suggestion, except that\nthe m/cointype' in m/cointype'/account'/change/n is replaced by\ndifferent masters. The only disadvantage I see is that you do not have\na way to encode the \"super master\" that is the parent of all\nchain-specific masters. You can - and with the same security\nproperties - encode the seed, though.\n\n-- \nPieter\n\n\nOn Tue, Apr 8, 2014 at 3:43 PM, slush <slush at centrum.cz> wrote:\n> tl;dr;\n>\n> It is dangerous to expect that other seed than \"xprv\" does not contain\n> bitcoins or that \"xprv\" contains only bitcoins, because technically are both\n> situations possible. It is still safer to do the lookup; the magic itself is\n> ambiguous.\n>\n> Marek\n>\n> On Tue, Apr 8, 2014 at 3:40 PM, slush <slush at centrum.cz> wrote:\n>>\n>>\n>> Serialization magic of bip32 seed is in my opinion completely unnecessary.\n>> Most of software does not care about it anyway; You can use xprv/xpub pair\n>> for main net, testnet, litecoin, dogecoin, whatevercoin.\n>>\n>> Instead using the same seed (xprv) and then separate the chains *inside*\n>> the bip32 path seems more useful to me.\n>>\n>> Marek\n>\n>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-04-08T13:59:36",
                "message_text_only": "+1\n\nI would prefer that solution...\n\n\n\nLe 08/04/2014 15:53, Pieter Wuille a \u00e9crit :\n> I see the cause of our disagreement now.\n>\n> You actually want to share a single BIP32 tree across different\n> currency types, but do it in a way that guarantees that they never use\n> the same keys.\n>\n> I would have expected that different chains would use independent\n> chains, and have serializations encode which chain they belong to.\n>\n> Let me offer an alternative suggestion, which is compatible with the\n> original default BIP32 structure:\n> * You can use one seed across different chains, but the master nodes\n> are separate.\n> * To derive the master node from the seed, the key string \"Bitcoin\n> seed\" is replaced by something chain-specific.\n> * Every encoded node (including master nodes) has a chain-specific\n> serialization magic.\n>\n> This is in practice almost the same as your suggestion, except that\n> the m/cointype' in m/cointype'/account'/change/n is replaced by\n> different masters. The only disadvantage I see is that you do not have\n> a way to encode the \"super master\" that is the parent of all\n> chain-specific masters. You can - and with the same security\n> properties - encode the seed, though.\n>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-08T14:00:14",
                "message_text_only": "Pieter,\n\nyour suggestion has charm since \u201cBitcoin seed\u201d would even not need \na global dictionary like the interpretation of the first level, since it would be self describing.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 08.04.2014, at 15:53, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> I see the cause of our disagreement now.\n> \n> You actually want to share a single BIP32 tree across different\n> currency types, but do it in a way that guarantees that they never use\n> the same keys.\n> \n> I would have expected that different chains would use independent\n> chains, and have serializations encode which chain they belong to.\n> \n> Let me offer an alternative suggestion, which is compatible with the\n> original default BIP32 structure:\n> * You can use one seed across different chains, but the master nodes\n> are separate.\n> * To derive the master node from the seed, the key string \"Bitcoin\n> seed\" is replaced by something chain-specific.\n> * Every encoded node (including master nodes) has a chain-specific\n> serialization magic.\n> \n> This is in practice almost the same as your suggestion, except that\n> the m/cointype' in m/cointype'/account'/change/n is replaced by\n> different masters. The only disadvantage I see is that you do not have\n> a way to encode the \"super master\" that is the parent of all\n> chain-specific masters. You can - and with the same security\n> properties - encode the seed, though.\n> \n> -- \n> Pieter\n> \n> \n> On Tue, Apr 8, 2014 at 3:43 PM, slush <slush at centrum.cz> wrote:\n>> tl;dr;\n>> \n>> It is dangerous to expect that other seed than \"xprv\" does not contain\n>> bitcoins or that \"xprv\" contains only bitcoins, because technically are both\n>> situations possible. It is still safer to do the lookup; the magic itself is\n>> ambiguous.\n>> \n>> Marek\n>> \n>> On Tue, Apr 8, 2014 at 3:40 PM, slush <slush at centrum.cz> wrote:\n>>> \n>>> \n>>> Serialization magic of bip32 seed is in my opinion completely unnecessary.\n>>> Most of software does not care about it anyway; You can use xprv/xpub pair\n>>> for main net, testnet, litecoin, dogecoin, whatevercoin.\n>>> \n>>> Instead using the same seed (xprv) and then separate the chains *inside*\n>>> the bip32 path seems more useful to me.\n>>> \n>>> Marek\n>> \n>> \n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/272c6548/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/272c6548/attachment.sig>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-08T14:35:35",
                "message_text_only": "On 04/08/2014 03:53 PM, Pieter Wuille wrote:\n> Let me offer an alternative suggestion, which is compatible with the\n> original default BIP32 structure:\n> * You can use one seed across different chains, but the master nodes\n> are separate.\n> * To derive the master node from the seed, the key string \"Bitcoin\n> seed\" is replaced by something chain-specific.\n> * Every encoded node (including master nodes) has a chain-specific\n> serialization magic.\n\nThis is possible, but I find it much more practical to use just one list\n(assignment of coins to indexes) than to use two lists (assignment of\ncoins to key strings and to serialization magic).\n\nKeeping two lists is harder and adds unnecessary friction. (Also I am\nnot very happy for the possibility we'll have to deal with key strings\n\"sCAMCo1N RULEZZZZ!!!! bRoUghT TO YoU bY M4rty\" and serialization magic\nthat leads to prefix \"lulz\").\n\nAlso from wallet's implementer perspective it is a little easier to use\njust one root node and then descend in tree as needed than to use method\nyou described.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "slush",
                "date": "2014-04-08T15:41:06",
                "message_text_only": "On Tue, Apr 8, 2014 at 3:53 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> I see the cause of our disagreement now.\n>\n> You actually want to share a single BIP32 tree across different\n> currency types, but do it in a way that guarantees that they never use\n> the same keys.\n>\n> I would have expected that different chains would use independent\n> chains, and have serializations encode which chain they belong to.\n>\n> Let me offer an alternative suggestion, which is compatible with the\n> original default BIP32 structure:\n> * You can use one seed across different chains, but the master nodes\n> are separate.\n> * To derive the master node from the seed, the key string \"Bitcoin\n> seed\" is replaced by something chain-specific.\n>\n\nI've discussed the solution of \"Litecoin seed\" in BIP32 HMAC with Litecoin\ndevs already, and after long discussion we've concluded that it is\ngenerally bad idea.\n\nWhen changing \"Bitcoin seed\" constant to something different, same\n*entropy* will produce different *master node*. That's actually the\nopposite what's requested, because xprv serialization format stores *node*,\nnot *entropy*. By changing HMAC constant, you still won't be able to store\none node and derive wallets for multiple coins at same time.\n\n\n\n> * Every encoded node (including master nodes) has a chain-specific\n> serialization magic.\n>\nThis is in practice almost the same as your suggestion, except that\n> the m/cointype' in m/cointype'/account'/change/n is replaced by\n> different masters. The only disadvantage I see is that you do not have\n> a way to encode the \"super master\" that is the parent of all\n> chain-specific masters. You can - and with the same security\n> properties - encode the seed, though.\n>\n>\nActually I don't understand why there's such disagreement about \"cointype\"\nlevel here, what it breaks? I see it as the cleanest solution so far. It is\nforward and backward compatible, does need any special extension to bip32\n(to be strict, bip32 says \"Bitcoin seed\", so client using \"Litecoin seed\"\ncannot be \"bip32 compatible\").\n\nOf course, the problem of \"cointype\" can be solved in zillion ways, but\nstill using cointype in bip32 path seem to be the most elegant way so far,\nbecause it fullfill all requirements for single backup, for separating\npubkeys and for handling all coins by one master...\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/5da80ea7/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-23T17:42:58",
                "message_text_only": "On Tue, Apr 8, 2014 at 5:41 PM, slush <slush at centrum.cz> wrote:\n> I've discussed the solution of \"Litecoin seed\" in BIP32 HMAC with Litecoin\n> devs already, and after long discussion we've concluded that it is generally\n> bad idea.\n>\n> When changing \"Bitcoin seed\" constant to something different, same *entropy*\n> will produce different *master node*. That's actually the opposite what's\n> requested, because xprv serialization format stores *node*, not *entropy*.\n> By changing HMAC constant, you still won't be able to store one node and\n> derive wallets for multiple coins at same time.\n\nStoring the seed is superior to storing the master node already\n(whether coin specific or not), as it is smaller.\n\nAll this changes is making the seed the \"super master\" which allows\ngenerating the coin-specific masters (which get an actual useful\nfunction: revealing your entire-tree, but only one coin's subset of\nit).\n\n>> * Every encoded node (including master nodes) has a chain-specific\n>> serialization magic.\n>>\n>> This is in practice almost the same as your suggestion, except that\n>> the m/cointype' in m/cointype'/account'/change/n is replaced by\n>> different masters. The only disadvantage I see is that you do not have\n>> a way to encode the \"super master\" that is the parent of all\n>> chain-specific masters. You can - and with the same security\n>> properties - encode the seed, though.\n>>\n>\n> Actually I don't understand why there's such disagreement about \"cointype\"\n> level here, what it breaks? I see it as the cleanest solution so far. It is\n> forward and backward compatible, does need any special extension to bip32\n> (to be strict, bip32 says \"Bitcoin seed\", so client using \"Litecoin seed\"\n> cannot be \"bip32 compatible\").\n\nFair enough, it would break strictly BIP32. Then again, BIP32 is a\n*Bitcoin* improvement proposal, and not something that necessarily\napplies to other coins (they can adopt it of course, I don't care).\n\nWhat I dislike is that this removes the ability of using the magic in\nthe serialization to prevent importing a chain from the wrong coin.\nThe standard could just say that instead of \"Bitcoin seed\", you'd use\n\"Coin seed: \" + magic, so you don't need an extra mapping from\ncointype to seed strings.\n\n-- \nPieter"
            },
            {
                "author": "slush",
                "date": "2014-04-23T18:01:57",
                "message_text_only": "On Wed, Apr 23, 2014 at 7:42 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n>\n> Storing the seed is superior to storing the master node already\n> (whether coin specific or not), as it is smaller.\n>\n>\n...Except that you're loosing flexibility (serialization, deserialization)\nwhich gives you BIP32 node.\n\nI see \"bip32 seed\" as some transitional, internal state from raw entropy to\nbip32 master node and this seed should not be handled by the end user in\nany form. In the oposite, well-serialized bip32 node (in xpriv, or even in\nmnemonic format) can be used very widely and have no downsides against\nusing raw \"bip32 seed\".\n\n\n>\n> Fair enough, it would break strictly BIP32. Then again, BIP32 is a\n> *Bitcoin* improvement proposal, and not something that necessarily\n> applies to other coins (they can adopt it of course, I don't care).\n>\n>\nI also don't care too much about altcoins, but people want them so me, as\ninfrastructure developer, need to think about it. And I don't see any\nreason for breaking compatibility between Bitcoin and other altcoins. I\nwould be happier if there will be another sentence than \"Bitcoin seed\", but\nhonestly, who cares. It is just some magic string for hashing the raw\nseed...\n\n\n> What I dislike is that this removes the ability of using the magic in\n> the serialization to prevent importing a chain from the wrong coin.\n>\n\nThe truth is that even existing software which handle bip32 don't care\nabout 'version' at all. I think that \"xpub/xprv\" distinction is the only\nuseful feature of version, so user se if it stores public or private\ninformation.\n\nBut using prefixes which doesn't enforce anything is even more dangerous.\nIf somebody exports node \"dogeblablabla\", it creates false exceptations\nthat there's only dogecoin stored.\n\n Marek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/8d56414d/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-23T18:18:16",
                "message_text_only": "For those who don't follow github pull requests regularly; there's pull\nrequest for BIP64 defining HD wallet structure as discussed in this thread:\n\nhttps://github.com/bitcoin/bips/pull/52\n\n\n\nOn Wed, Apr 23, 2014 at 8:01 PM, slush <slush at centrum.cz> wrote:\n\n>\n>\n>\n> On Wed, Apr 23, 2014 at 7:42 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n>>\n>> Storing the seed is superior to storing the master node already\n>> (whether coin specific or not), as it is smaller.\n>>\n>>\n> ...Except that you're loosing flexibility (serialization, deserialization)\n> which gives you BIP32 node.\n>\n> I see \"bip32 seed\" as some transitional, internal state from raw entropy\n> to bip32 master node and this seed should not be handled by the end user in\n> any form. In the oposite, well-serialized bip32 node (in xpriv, or even in\n> mnemonic format) can be used very widely and have no downsides against\n> using raw \"bip32 seed\".\n>\n>\n>>\n>> Fair enough, it would break strictly BIP32. Then again, BIP32 is a\n>> *Bitcoin* improvement proposal, and not something that necessarily\n>> applies to other coins (they can adopt it of course, I don't care).\n>>\n>>\n> I also don't care too much about altcoins, but people want them so me, as\n> infrastructure developer, need to think about it. And I don't see any\n> reason for breaking compatibility between Bitcoin and other altcoins. I\n> would be happier if there will be another sentence than \"Bitcoin seed\", but\n> honestly, who cares. It is just some magic string for hashing the raw\n> seed...\n>\n>\n>> What I dislike is that this removes the ability of using the magic in\n>> the serialization to prevent importing a chain from the wrong coin.\n>>\n>\n> The truth is that even existing software which handle bip32 don't care\n> about 'version' at all. I think that \"xpub/xprv\" distinction is the only\n> useful feature of version, so user se if it stores public or private\n> information.\n>\n> But using prefixes which doesn't enforce anything is even more dangerous.\n> If somebody exports node \"dogeblablabla\", it creates false exceptations\n> that there's only dogecoin stored.\n>\n>  Marek\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/ffd687fd/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-23T18:39:40",
                "message_text_only": "Different users could have different gap limit requirements.  20 seems very\nlow as the default.\n\nA merchant could easily send 20 addresses in a row to customers and none of\nthem bother to actually buy anything.\n\nSetting the gap limit to high is just a small extra cost in that case.\n\nBip-32 serialization doesn't have a way of adding meta data though.\n\n\nOn Wed, Apr 23, 2014 at 7:18 PM, slush <slush at centrum.cz> wrote:\n\n> For those who don't follow github pull requests regularly; there's pull\n> request for BIP64 defining HD wallet structure as discussed in this thread:\n>\n> https://github.com/bitcoin/bips/pull/52\n>\n>\n>\n> On Wed, Apr 23, 2014 at 8:01 PM, slush <slush at centrum.cz> wrote:\n>\n>>\n>>\n>>\n>> On Wed, Apr 23, 2014 at 7:42 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n>>>\n>>> Storing the seed is superior to storing the master node already\n>>> (whether coin specific or not), as it is smaller.\n>>>\n>>>\n>> ...Except that you're loosing flexibility (serialization,\n>> deserialization) which gives you BIP32 node.\n>>\n>> I see \"bip32 seed\" as some transitional, internal state from raw entropy\n>> to bip32 master node and this seed should not be handled by the end user in\n>> any form. In the oposite, well-serialized bip32 node (in xpriv, or even in\n>> mnemonic format) can be used very widely and have no downsides against\n>> using raw \"bip32 seed\".\n>>\n>>\n>>>\n>>> Fair enough, it would break strictly BIP32. Then again, BIP32 is a\n>>> *Bitcoin* improvement proposal, and not something that necessarily\n>>> applies to other coins (they can adopt it of course, I don't care).\n>>>\n>>>\n>> I also don't care too much about altcoins, but people want them so me, as\n>> infrastructure developer, need to think about it. And I don't see any\n>> reason for breaking compatibility between Bitcoin and other altcoins. I\n>> would be happier if there will be another sentence than \"Bitcoin seed\", but\n>> honestly, who cares. It is just some magic string for hashing the raw\n>> seed...\n>>\n>>\n>>> What I dislike is that this removes the ability of using the magic in\n>>> the serialization to prevent importing a chain from the wrong coin.\n>>>\n>>\n>> The truth is that even existing software which handle bip32 don't care\n>> about 'version' at all. I think that \"xpub/xprv\" distinction is the only\n>> useful feature of version, so user se if it stores public or private\n>> information.\n>>\n>> But using prefixes which doesn't enforce anything is even more dangerous.\n>> If somebody exports node \"dogeblablabla\", it creates false exceptations\n>> that there's only dogecoin stored.\n>>\n>>  Marek\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/dd62bab3/attachment.html>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T18:46:11",
                "message_text_only": "On 04/23/2014 08:39 PM, Tier Nolan wrote:\n> A merchant could easily send 20 addresses in a row to customers and none of\n> them bother to actually buy anything.\n\nSuch merchant would surely use some merchant system instead of generic\nwallet software.\n\n> Setting the gap limit to high is just a small extra cost in that case.\n\nNot if you have 100 accounts on 10 different devices.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-23T19:00:41",
                "message_text_only": "On Wed, Apr 23, 2014 at 7:46 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n\n>\n> > Setting the gap limit to high is just a small extra cost in that case.\n>\n> Not if you have 100 accounts on 10 different devices.\n>\n\nI meant for a merchant with a server that is handing out hundreds of\naddresses.\n\nThe point is to have a single system that is compatible over a large number\nof systems.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/77da2094/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-23T19:06:02",
                "message_text_only": "Using higher gap limit in the software is not prohibited, but then it\nbreaks the standard \"as is\", in mean that importing such wallet to another\nBIP64 wallet won't recover the funds properly, without proper settings of\ngap limit...\n\nGap limit 20 is the most sane defaults for majority of users (actually I\nthink it is a bit higher than is really necessary for 99% users) and\nmajority of users won't need to change it at any time.\n\nMarek\n\n\nOn Wed, Apr 23, 2014 at 9:00 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> On Wed, Apr 23, 2014 at 7:46 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n>\n>>\n>> > Setting the gap limit to high is just a small extra cost in that case.\n>>\n>> Not if you have 100 accounts on 10 different devices.\n>>\n>\n> I meant for a merchant with a server that is handing out hundreds of\n> addresses.\n>\n> The point is to have a single system that is compatible over a large\n> number of systems.\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/73fa1ccd/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-23T19:36:39",
                "message_text_only": "Pieter suggested in IRC couple of months ago to append key birth to key serialization in xprv\u2026. at unixtime format.\n\nWhat about picking this idea up in BIP64? It would greatly help the importing client.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/a787e044/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/a787e044/attachment.sig>"
            },
            {
                "author": "slush",
                "date": "2014-04-23T19:46:39",
                "message_text_only": "We do not want BIP64 to be incompatible with BIP32 in any way. BIP64 is\njust set of some recommendations for wallet developers how to browse bip32\ntree.\n\nModifying serialization format would break the compatibility.\n\nHowever we have our solution for storing wallet birth time, which is out of\nscope of BIP64, but we'll communicate it as soon as we'll write down that\nidea to some more specific format.\n\nMarek\n\n\nOn Wed, Apr 23, 2014 at 9:36 PM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> Pieter suggested in IRC couple of months ago to append key birth to key\n> serialization in xprv.... at unixtime format.\n>\n> What about picking this idea up in BIP64? It would greatly help the\n> importing client.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/db8776a4/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-23T19:07:00",
                "message_text_only": "I built such a merchant system handing out BIP32 addresses. \n\nThe gap size problem does not arise there since such a system has to have an extra database keeping track of requests, so there is no added cost of storing the key coordinates used by them. A scan is not needed the keys can be accessed at random order.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 23.04.2014, at 21:00, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> On Wed, Apr 23, 2014 at 7:46 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n> \n> > Setting the gap limit to high is just a small extra cost in that case.\n> \n> Not if you have 100 accounts on 10 different devices.\n> \n> I meant for a merchant with a server that is handing out hundreds of addresses.\n>  \n> The point is to have a single system that is compatible over a large number of systems.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/693f3869/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/693f3869/attachment.sig>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T19:29:04",
                "message_text_only": "On 04/23/2014 09:00 PM, Tier Nolan wrote:\n> The point is to have a single system that is compatible over a large number\n> of systems.\n\nThere is such system and it is called BIP32.\n\nOn the other hand, in BIP64 we try to put a set of restrictions and\nrules on top of BIP32. There will always be some special usecases where\nBIP64 is not a good fit and there's no reason why you cannot use BIP32\nin a different manner using a different \"purpose\" field.\n\nExamples: Electrum does not want to use accounts and they start to use\nscheme m/65'/change/address (where change = 0 or 1). Or Andreas\nSchildbach wants to have refunds chain so he uses m/66'/chain/address\n(where chain = 0, 1 or 2).\n\nWe wanted to find one good solution that fits all, but unfortunately it\nturned out everyone wants something a little bit different.\n\nThe point of the whole effort is that you can have ONE SINGLE BACKUP\n(master node) for all these independent purposes and suddenly claims\nsuch as \"my wallet is BIP64 and BIP66 compatible\" actually mean\nsomething as opposed to \"BIP32 compatible\" which actually means nothing\nexcept that the wallet author is capable of using HMAC in context of\ngenerating the tree.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T19:44:13",
                "message_text_only": "On Wednesday, April 23, 2014 7:29:04 PM Pavol Rusnak wrote:\n> On 04/23/2014 09:00 PM, Tier Nolan wrote:\n> > The point is to have a single system that is compatible over a large\n> > number of systems.\n> \n> There is such system and it is called BIP32.\n> \n> On the other hand, in BIP64 we try to put a set of restrictions and\n> rules on top of BIP32. There will always be some special usecases where\n> BIP64 is not a good fit and there's no reason why you cannot use BIP32\n> in a different manner using a different \"purpose\" field.\n> \n> Examples: Electrum does not want to use accounts and they start to use\n> scheme m/65'/change/address (where change = 0 or 1). Or Andreas\n> Schildbach wants to have refunds chain so he uses m/66'/chain/address\n> (where chain = 0, 1 or 2).\n> \n> We wanted to find one good solution that fits all, but unfortunately it\n> turned out everyone wants something a little bit different.\n\nWhy do clients need to use the features in BIP 64? If Electrum doesn't want to \nuse accounts, then it can just use account 0 for everything. Refund chains are \ndefinitely a third case that should be added to the external and \ninternal/change address division... and a wallet not implementing refund \naddresses would simply not use that chain.\n\nLuke"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T19:49:38",
                "message_text_only": "On 04/23/2014 09:44 PM, Luke-Jr wrote:\n> Why do clients need to use the features in BIP 64? If Electrum doesn't want to \n> use accounts, then it can just use account 0 for everything. Refund chains are \n\nAs Andreas wrote earlier in this thread: \"There is no \"bare minimum\".\nEither you implement the \"BIP\" fully or not.\"\n\nWhat you suggest does not follow the principle of least surprise.\nSuppose user imports his BIP64 compatible wallet into Electrum, which\nclaims it is BIP64 compatible, but actually implements just a subset of\nthe spec (sticking account index to 0). The user now sees just a\nfraction of his coins and is puzzled.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T19:55:08",
                "message_text_only": "On Wednesday, April 23, 2014 7:49:38 PM Pavol Rusnak wrote:\n> On 04/23/2014 09:44 PM, Luke-Jr wrote:\n> > Why do clients need to use the features in BIP 64? If Electrum doesn't\n> > want to use accounts, then it can just use account 0 for everything.\n> > Refund chains are\n> \n> As Andreas wrote earlier in this thread: \"There is no \"bare minimum\".\n> Either you implement the \"BIP\" fully or not.\"\n> \n> What you suggest does not follow the principle of least surprise.\n> Suppose user imports his BIP64 compatible wallet into Electrum, which\n> claims it is BIP64 compatible, but actually implements just a subset of\n> the spec (sticking account index to 0). The user now sees just a\n> fraction of his coins and is puzzled.\n\nAny wallet should import all the coins just fine, it just wouldn't *use* any \naccount other than 0. Remember addresses are used to receive bitcoins; once \nthe UTXOs are in the wallet, they are no longer associated with the address or \nany other details of how they were received.\n\nLuke"
            },
            {
                "author": "slush",
                "date": "2014-04-23T19:57:46",
                "message_text_only": "On Wed, Apr 23, 2014 at 9:55 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> Any wallet should import all the coins just fine, it just wouldn't *use*\n> any\n> account other than 0. Remember addresses are used to receive bitcoins; once\n> the UTXOs are in the wallet, they are no longer associated with the\n> address or\n> any other details of how they were received.\n>\n\nWallet don't see UTXO until it scans all branches/accounts on HD node\nimport.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/d88cb7b2/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T20:01:05",
                "message_text_only": "On Wednesday, April 23, 2014 7:57:46 PM slush wrote:\n> On Wed, Apr 23, 2014 at 9:55 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > Any wallet should import all the coins just fine, it just wouldn't *use*\n> > any\n> > account other than 0. Remember addresses are used to receive bitcoins;\n> > once the UTXOs are in the wallet, they are no longer associated with the\n> > address or\n> > any other details of how they were received.\n> \n> Wallet don't see UTXO until it scans all branches/accounts on HD node\n> import.\n\nYes, it should scan all possible (under the BIP-defined structure) branches \nregardless of which features it supports.\n\nLuke"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T20:04:03",
                "message_text_only": "On 04/23/2014 10:01 PM, Luke-Jr wrote:\n> Yes, it should scan all possible (under the BIP-defined structure) branches \n> regardless of which features it supports.\n\nSo you suggest to scan for accounts, show balances but don't allow user\nto spend them? Does not seem right to me.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T20:09:07",
                "message_text_only": "On Wednesday, April 23, 2014 8:04:03 PM Pavol Rusnak wrote:\n> On 04/23/2014 10:01 PM, Luke-Jr wrote:\n> > Yes, it should scan all possible (under the BIP-defined structure)\n> > branches regardless of which features it supports.\n> \n> So you suggest to scan for accounts, show balances but don't allow user\n> to spend them? Does not seem right to me.\n\nScan all branches for UTXOs, then you have the balance for the wallet. Account \nbalances are metadata, so cannot be known from the seed alone. If you want to \nhave a way to restore accounts, you must define some more detailed wallet file \nformat (which could be built on top of this).\n\nOn Wednesday, April 23, 2014 8:04:35 PM you wrote:\n> On 23.04.2014, at 22:02, Luke-Jr <luke at dashjr.org> wrote:\n> > On Wednesday, April 23, 2014 8:01:16 PM Tamas Blummer wrote:\n> >> The wallet has to know how it got the UTXO in order to be able to spend\n> >> it.\n> > \n> > No it doesn't... Just the assigned scriptPubKey and secret(s) required to\n> > satisfy it.\n> \n> To know the secret it needs to know which key coordinate to use that is\n> logically the same as knowing the address it used to receive it.\n\nSure, it *knows* what address was used to receive it. But at the point it's a \nUTXO, that address is no longer relevant.\n\nLuke"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T20:16:45",
                "message_text_only": "On 04/23/2014 10:09 PM, Luke-Jr wrote:\n> Scan all branches for UTXOs, then you have the balance for the wallet. Account \n> balances are metadata, so cannot be known from the seed alone. If you want to \n> have a way to restore accounts, you must define some more detailed wallet file \n> format (which could be built on top of this).\n\nI think one of the following is happening:\n\na) you have not read the document\nb) you don't understand what accounts are, because you have not read\n   the document\nc) you don't understand how restoring accounts work, because you\n   have not read the document\nd) you don't understand that accounts funds are not meant to be mixed\n   together, because you have not read the document\ne) I got your emails wrong because I am not a native speaker,\n   but please read the the document ;-)\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T20:32:07",
                "message_text_only": "On Wednesday, April 23, 2014 8:16:45 PM Pavol Rusnak wrote:\n> On 04/23/2014 10:09 PM, Luke-Jr wrote:\n> > Scan all branches for UTXOs, then you have the balance for the wallet.\n> > Account balances are metadata, so cannot be known from the seed alone.\n> > If you want to have a way to restore accounts, you must define some more\n> > detailed wallet file format (which could be built on top of this).\n> \n> I think one of the following is happening:\n> \n> a) you have not read the document\n> b) you don't understand what accounts are, because you have not read\n>    the document\n> c) you don't understand how restoring accounts work, because you\n>    have not read the document\n> d) you don't understand that accounts funds are not meant to be mixed\n>    together, because you have not read the document\n> e) I got your emails wrong because I am not a native speaker,\n>    but please read the the document ;-)\n\nYou missed one:\nf) I missed the part where BIP 32 redefined \"account\" to mean \"subwallet\" \ninstead of what has traditionally been called \"account\" in Bitcoin.\n\n:)\n\nIn that case, single-subwallet wallet software probably needs to have the user \nprovide a subwallet number in addition to the seed.\n\nLuke"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T20:35:50",
                "message_text_only": "On 04/23/2014 10:32 PM, Luke-Jr wrote:\n> f) I missed the part where BIP 32 redefined \"account\" to mean \"subwallet\" \n> instead of what has traditionally been called \"account\" in Bitcoin.\n\nAh, okay. The last time I saw Bitcoin-qt it was still using independent\naddresses.\n\n> In that case, single-subwallet wallet software probably needs to have the user \n> provide a subwallet number in addition to the seed.\n\nWhich brings us back to my original complaint that the user can be\nconfused because he doesn't see all his funds.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T20:41:13",
                "message_text_only": "On Wednesday, April 23, 2014 8:35:50 PM Pavol Rusnak wrote:\n> On 04/23/2014 10:32 PM, Luke-Jr wrote:\n> > f) I missed the part where BIP 32 redefined \"account\" to mean \"subwallet\"\n> > instead of what has traditionally been called \"account\" in Bitcoin.\n> \n> Ah, okay. The last time I saw Bitcoin-qt it was still using independent\n> addresses.\n\nIt is. Accounts have been a bitcoind feature since before 0.4.\n\n> > In that case, single-subwallet wallet software probably needs to have the\n> > user provide a subwallet number in addition to the seed.\n> \n> Which brings us back to my original complaint that the user can be\n> confused because he doesn't see all his funds.\n\nI don't see how. The user knows he has money in different subwallets. As long \nas he has a way to specify which subwallet he is accessing in single-subwallet \nclients, there shouldn't be a problem.\n\nLuke"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T20:43:57",
                "message_text_only": "On 04/23/2014 10:41 PM, Luke-Jr wrote:\n> I don't see how. The user knows he has money in different subwallets. As long \n> as he has a way to specify which subwallet he is accessing in single-subwallet \n> clients, there shouldn't be a problem.\n\nRight. But these clients have no right to call themselves BIP64\ncompatible then.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-23T20:54:48",
                "message_text_only": "On Wed, Apr 23, 2014 at 10:43 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n> On 04/23/2014 10:41 PM, Luke-Jr wrote:\n>> I don't see how. The user knows he has money in different subwallets. As long\n>> as he has a way to specify which subwallet he is accessing in single-subwallet\n>> clients, there shouldn't be a problem.\n>\n> Right. But these clients have no right to call themselves BIP64\n> compatible then.\n\nWould you consider software which scans all accounts as specified by\nBIP64, but has no user interface option to distinguish them in any\nway, view them independently, and has no ability to keep the coins\napart... compatible with BIP64?\n\nAccording to the argument here mentioned earlier (\"all or nothing\"),\nit is, as it will not break interoperability with other BIP64\nsoftware. Still, it doesn't support the accounts feature, and perhaps\nthat's fine?\n\n-- \nPieter"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T21:06:26",
                "message_text_only": "On 04/23/2014 10:54 PM, Pieter Wuille wrote:\n> Would you consider software which scans all accounts as specified by\n> BIP64, but has no user interface option to distinguish them in any\n> way, view them independently, and has no ability to keep the coins\n> apart... compatible with BIP64?\n\nThis is not a desired behavior. Do you have any idea how to make it even\nmore explicit in the spec? Currently we just have (in Account sectrion):\n\n\"This level splits the key space into independent user identities, so\nthe wallet never mixes the coins across different accounts.\"\n\n\nI would like to make it obvious from the spec that if you mix funds\naccross the accounts you are not doing a right thing and you are not\ncompliant to the spec.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T21:18:57",
                "message_text_only": "On Wednesday, April 23, 2014 9:06:26 PM Pavol Rusnak wrote:\n> On 04/23/2014 10:54 PM, Pieter Wuille wrote:\n> > Would you consider software which scans all accounts as specified by\n> > BIP64, but has no user interface option to distinguish them in any\n> > way, view them independently, and has no ability to keep the coins\n> > apart... compatible with BIP64?\n> \n> This is not a desired behavior. Do you have any idea how to make it even\n> more explicit in the spec? Currently we just have (in Account sectrion):\n> \n> \"This level splits the key space into independent user identities, so\n> the wallet never mixes the coins across different accounts.\"\n> \n> \n> I would like to make it obvious from the spec that if you mix funds\n> accross the accounts you are not doing a right thing and you are not\n> compliant to the spec.\n\nHow do you get the more expected/usual behaviour of mixing funds between \naccounts? Only a very niche user base needs funds isolated...\n\nLuke"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T21:22:44",
                "message_text_only": "On Wed, Apr 23, 2014 at 2:18 PM, Luke-Jr <luke at dashjr.org> wrote:\n> How do you get the more expected/usual behaviour of mixing funds between\n> accounts? Only a very niche user base needs funds isolated...\n\nHopefully it would be clarified as only a MUST NOT do so silently...\n\"I have funds split across two wallets and it WONT LET ME SPEND THEM\"\nsounds like a terrible user experience. :)"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T21:33:48",
                "message_text_only": "On 04/23/2014 11:22 PM, Gregory Maxwell wrote:\n> Hopefully it would be clarified as only a MUST NOT do so silently...\n> \"I have funds split across two wallets and it WONT LET ME SPEND THEM\"\n> sounds like a terrible user experience. :)\n\nThat is a subjective matter. To me it makes PERFECT SENSE that funds\nacross accounts NEVER MIX. One can still send funds from one account to\nanother and then perform another spend.\n\nThat's what I consider a consistent and thus GOOD user experience.\nWhat's the purpose of Accounts if wallet mixes coins among them anyway?\n\nI know it's not good to use classic bank accounts as analogy, but that's\nexactly how they work. Or have you every done ONE transaction from two\nbank accounts simultaneously?\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-23T21:42:30",
                "message_text_only": "On Wed, Apr 23, 2014 at 11:33 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n> On 04/23/2014 11:22 PM, Gregory Maxwell wrote:\n>> Hopefully it would be clarified as only a MUST NOT do so silently...\n>> \"I have funds split across two wallets and it WONT LET ME SPEND THEM\"\n>> sounds like a terrible user experience. :)\n>\n> That is a subjective matter. To me it makes PERFECT SENSE that funds\n> across accounts NEVER MIX. One can still send funds from one account to\n> another and then perform another spend.\n\nIn that case, maybe it makes sense to define another purpose id\nwithout accounts as well already.\n\nI believe many simple wallets will find multiple subwallets too\nburdening for the user experience, or not worth the technical\ncomplexity.\n\n-- \nPieter"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T21:44:20",
                "message_text_only": "On 04/23/2014 11:42 PM, Pieter Wuille wrote:\n> In that case, maybe it makes sense to define another purpose id\n> without accounts as well already.\n> \n> I believe many simple wallets will find multiple subwallets too\n> burdening for the user experience, or not worth the technical\n> complexity.\n\nRight. See my previous email where I describe hypothetical creation of\nBIP65 and BIP66 which the exact thing you describe.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T21:48:41",
                "message_text_only": "On Wed, Apr 23, 2014 at 2:42 PM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> In that case, maybe it makes sense to define another purpose id\n> without accounts as well already.\n>\n> I believe many simple wallets will find multiple subwallets too\n> burdening for the user experience, or not worth the technical\n> complexity.\n\nOr implement them but in a form where the different wallets can have\ndifferent security policies and thus wouldn't share a common piece of\nprivate key material.  I can see it being pretty confusing to have\nmultiple wallets which are both sharing a private key and not sharing\na private key."
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T21:53:05",
                "message_text_only": "On Wednesday, April 23, 2014 9:33:48 PM Pavol Rusnak wrote:\n> On 04/23/2014 11:22 PM, Gregory Maxwell wrote:\n> > Hopefully it would be clarified as only a MUST NOT do so silently...\n> > \"I have funds split across two wallets and it WONT LET ME SPEND THEM\"\n> > sounds like a terrible user experience. :)\n> \n> That is a subjective matter. To me it makes PERFECT SENSE that funds\n> across accounts NEVER MIX. One can still send funds from one account to\n> another and then perform another spend.\n\nOnly by crossing the blockchain unnecessarily.\n\n> That's what I consider a consistent and thus GOOD user experience.\n> What's the purpose of Accounts if wallet mixes coins among them anyway?\n\nTo keep balances separated. For example, I might have an account for each of \nmy children, move their allowance money to it every day/week (off-chain), and \nthey can spend only what they have in their account. Or an exchange might have \nan account for each user's deposits. In neither case, would it make sense to \npay special attention to which UTXOs are consumed in transactions from any of \nthe account.\n\nThe only use case that requires tracking UTXOs per-account is when you want to \nhave multiple uncoordinated copies of the wallet in use at the same time, and \ntherefore need to immediately identify which account a transaction came from \nbased on the UTXOs it consumed - although even then, you could still mix funds \nas long as you use only the first UTXO for tracking, so maybe there isn't even \na niche use case! In any case, Trezor, being a hardware wallet, should never \noverlap with this niche...?\n\n> I know it's not good to use classic bank accounts as analogy, but that's\n> exactly how they work. Or have you every done ONE transaction from two\n> bank accounts simultaneously?\n\nBad analogy. Banks *always* mix funds. You don't expect your bank wire to use \nexactly the specific dollar bills you deposited, do you??\n\nLuke"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-23T21:24:43",
                "message_text_only": "On 04/23/2014 11:18 PM, Luke-Jr wrote:\n> Only a very niche user base needs funds isolated...\n\nOur users do and we are creating this BIP for them, because we love them. ;)\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "slush",
                "date": "2014-04-23T21:07:36",
                "message_text_only": "On Wed, Apr 23, 2014 at 10:54 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n>\n> Would you consider software which scans all accounts as specified by\n> BIP64, but has no user interface option to distinguish them in any\n> way, view them independently, and has no ability to keep the coins\n> apart... compatible with BIP64?\n>\n>\nNo, because one of requirement of BIP64 is to do not mix addressess between\naccounts. Without handling those accounts fully, it won't pass this\nrequirement.\n\n(\"This level [accounts] splits the key space into independent user\nidentities, so the wallet never mixes the coins across different accounts.\")\n\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/a6be1997/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T20:59:08",
                "message_text_only": "On Wednesday, April 23, 2014 8:43:57 PM Pavol Rusnak wrote:\n> On 04/23/2014 10:41 PM, Luke-Jr wrote:\n> > I don't see how. The user knows he has money in different subwallets. As\n> > long as he has a way to specify which subwallet he is accessing in\n> > single-subwallet clients, there shouldn't be a problem.\n> \n> Right. But these clients have no right to call themselves BIP64\n> compatible then.\n\nThen BIP 64 is pretty restrictive. Most end users really have no need for \nsubwallet support."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-23T20:17:12",
                "message_text_only": "On 23.04.2014, at 22:09, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Wednesday, April 23, 2014 8:04:03 PM Pavol Rusnak wrote:\n>> On 04/23/2014 10:01 PM, Luke-Jr wrote:\n>>> Yes, it should scan all possible (under the BIP-defined structure)\n>>> branches regardless of which features it supports.\n>> \n>> So you suggest to scan for accounts, show balances but don't allow user\n>> to spend them? Does not seem right to me.\n> \n> Scan all branches for UTXOs, then you have the balance for the wallet. Account \n> balances are metadata, so cannot be known from the seed alone. If you want to \n> have a way to restore accounts, you must define some more detailed wallet file \n> format (which could be built on top of this).\n> \n> On Wednesday, April 23, 2014 8:04:35 PM you wrote:\n>> On 23.04.2014, at 22:02, Luke-Jr <luke at dashjr.org> wrote:\n>>> On Wednesday, April 23, 2014 8:01:16 PM Tamas Blummer wrote:\n>>>> The wallet has to know how it got the UTXO in order to be able to spend\n>>>> it.\n>>> \n>>> No it doesn't... Just the assigned scriptPubKey and secret(s) required to\n>>> satisfy it.\n>> \n>> To know the secret it needs to know which key coordinate to use that is\n>> logically the same as knowing the address it used to receive it.\n> \n> Sure, it *knows* what address was used to receive it. But at the point it's a \n> UTXO, that address is no longer relevant.\n> \n\nIn context of BIP32 one does not store secrets but re-create them on-the-fly if needed using key coordinates known to the UTXO.\nIndividual secrets per UTXO are about as irrelevant and accessible as addresses.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/73badbe8/attachment.sig>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-23T20:12:37",
                "message_text_only": "I believe Luke means scanning chains as defined by the structure, but not\nhanding out addresses from other accounts than the first one.\n\nThat's certainly a possibly way to compatibly implement BIP64, but it\ndoesn't reduce all that much complexity. I hope people would choose that\nover defining their own accountless structure though.\nOn 23 Apr 2014 22:06, \"Pavol Rusnak\" <stick at gk2.sk> wrote:\n\n> On 04/23/2014 10:01 PM, Luke-Jr wrote:\n> > Yes, it should scan all possible (under the BIP-defined structure)\n> branches\n> > regardless of which features it supports.\n>\n> So you suggest to scan for accounts, show balances but don't allow user\n> to spend them? Does not seem right to me.\n>\n> --\n> Best Regards / S pozdravom,\n>\n> Pavol Rusnak <stick at gk2.sk>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/05488236/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-23T20:08:18",
                "message_text_only": "That's the point. BIP64 specifies such a structure, and you have to scan\nall that it defines.\n\nIf you want to write wallet software that does not have the complexity to\ndeal with just one account, it is not BIP64 compliant. It could try to\ndefine its own purpose system, with a hierarchy without accounts in it. I'm\nnot sure this is a very interesting use case, but I like how strict it is.\nConstruction of related chains for multisig addresses is perhaps a better\nexample of a different purpose structure.\n On 23 Apr 2014 22:03, \"Luke-Jr\" <luke at dashjr.org> wrote:\n\n> On Wednesday, April 23, 2014 7:57:46 PM slush wrote:\n> > On Wed, Apr 23, 2014 at 9:55 PM, Luke-Jr <luke at dashjr.org> wrote:\n> > > Any wallet should import all the coins just fine, it just wouldn't\n> *use*\n> > > any\n> > > account other than 0. Remember addresses are used to receive bitcoins;\n> > > once the UTXOs are in the wallet, they are no longer associated with\n> the\n> > > address or\n> > > any other details of how they were received.\n> >\n> > Wallet don't see UTXO until it scans all branches/accounts on HD node\n> > import.\n>\n> Yes, it should scan all possible (under the BIP-defined structure) branches\n> regardless of which features it supports.\n>\n> Luke\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/056fd594/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-23T20:01:16",
                "message_text_only": "On 23.04.2014, at 21:55, Luke-Jr <luke at dashjr.org> wrote:\n> Any wallet should import all the coins just fine, it just wouldn't *use* any \n> account other than 0. Remember addresses are used to receive bitcoins; once \n> the UTXOs are in the wallet, they are no longer associated with the address or \n> any other details of how they were received.\n\nThis is a bit idealistic. \nThe wallet has to know how it got the UTXO in order to be able to spend it.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/baa76914/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-23T20:02:11",
                "message_text_only": "On Wednesday, April 23, 2014 8:01:16 PM Tamas Blummer wrote:\n> On 23.04.2014, at 21:55, Luke-Jr <luke at dashjr.org> wrote:\n> > Any wallet should import all the coins just fine, it just wouldn't *use*\n> > any account other than 0. Remember addresses are used to receive\n> > bitcoins; once the UTXOs are in the wallet, they are no longer\n> > associated with the address or any other details of how they were\n> > received.\n> \n> This is a bit idealistic.\n> The wallet has to know how it got the UTXO in order to be able to spend it.\n\nNo it doesn't... Just the assigned scriptPubKey and secret(s) required to \nsatisfy it."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-23T20:04:35",
                "message_text_only": "On 23.04.2014, at 22:02, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Wednesday, April 23, 2014 8:01:16 PM Tamas Blummer wrote:\n>> On 23.04.2014, at 21:55, Luke-Jr <luke at dashjr.org> wrote:\n>>> Any wallet should import all the coins just fine, it just wouldn't *use*\n>>> any account other than 0. Remember addresses are used to receive\n>>> bitcoins; once the UTXOs are in the wallet, they are no longer\n>>> associated with the address or any other details of how they were\n>>> received.\n>> \n>> This is a bit idealistic.\n>> The wallet has to know how it got the UTXO in order to be able to spend it.\n> \n> No it doesn't... Just the assigned scriptPubKey and secret(s) required to \n> satisfy it.\n> \n\nTo know the secret it needs to know which key coordinate to use that is logically the same as knowing the address it used to receive it.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/5bc05ae4/attachment.sig>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-04-24T06:54:23",
                "message_text_only": "Le 23/04/2014 21:44, Luke-Jr a \u00e9crit :\n> On Wednesday, April 23, 2014 7:29:04 PM Pavol Rusnak wrote:\n>>\n>> Examples: Electrum does not want to use accounts [...]\n\n> Why do clients need to use the features in BIP 64? If Electrum doesn't want to \n> use accounts, [...]\n\nTo clarify:\nElectrum plans to have bip32 accounts; Multibit will not, afaik.\n\nI think Pavol just wanted to make an example."
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-24T07:10:48",
                "message_text_only": "On Thu, Apr 24, 2014 at 8:54 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n>> Why do clients need to use the features in BIP 64? If Electrum doesn't want to\n>> use accounts, [...]\n>\n> To clarify:\n> Electrum plans to have bip32 accounts; Multibit will not, afaik.\n\nTo clarify:\nBIP64 has a much stricter definition for accounts than BIP32.\n\nIn BIP32, it is not well specified what accounts are used for. They\ncan be used for \"subwallets\", \"receive accounts\" (as in bitcoind's\naccount feature), \"recurring payments\", part of a chain used as\nmultisig addresses, ... determined individually for each index.\n\nIn BIP64, they are strictly used for subwallets, and can't be used by\nanything else.\n\n-- \nPieter"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-24T07:21:28",
                "message_text_only": "On Thu, Apr 24, 2014 at 12:10 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> On Thu, Apr 24, 2014 at 8:54 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n>>> Why do clients need to use the features in BIP 64? If Electrum doesn't want to\n>>> use accounts, [...]\n>>\n>> To clarify:\n>> Electrum plans to have bip32 accounts; Multibit will not, afaik.\n>\n> To clarify:\n> BIP64 has a much stricter definition for accounts than BIP32.\n>\n> In BIP32, it is not well specified what accounts are used for. They\n> can be used for \"subwallets\", \"receive accounts\" (as in bitcoind's\n> account feature), \"recurring payments\", part of a chain used as\n> multisig addresses, ... determined individually for each index.\n>\n> In BIP64, they are strictly used for subwallets, and can't be used by\n> anything else.\n\nIt doesn't appear to me that reoccurring payments, receive accounts,\nmultisig addresses, etc can be used with this proposal, but instead\nyou must use a different purpose code and another BIP and are not\ncompatible with the draft here.\n\nAm I misunderstanding it?   Will Electrum be limiting itself in this\nway?  I'd consider it a unfortunate loss of functionality if wallets\ncouldn't implement reoccurring payment chains without making users\ngenerate entirely different wallets (which they couldn't share funds\nacross) since addresses for recurring payments was one of the main\nmotivations in BIP32."
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-04-24T08:15:18",
                "message_text_only": "Le 24/04/2014 09:21, Gregory Maxwell a \u00e9crit :\n> \n> It doesn't appear to me that reoccurring payments, receive accounts,\n> multisig addresses, etc can be used with this proposal, but instead\n> you must use a different purpose code and another BIP and are not\n> compatible with the draft here.\n> \n> Am I misunderstanding it?   Will Electrum be limiting itself in this\n> way?  I'd consider it a unfortunate loss of functionality if wallets\n> couldn't implement reoccurring payment chains without making users\n> generate entirely different wallets (which they couldn't share funds\n> across) since addresses for recurring payments was one of the main\n> motivations in BIP32.\n> \n> \n\nNo, Electrum will not be limiting itself in this way. I believe that we\nare only at the beginning of exploring the different possibilities\nopened by HD wallets. It will probably take years until we have clear\nideas on what users need, what choices they make, and how to organize\neverything. Therefore it is too early to take decisions that might limit\nfuture functionality.\n\nI can see that it is very difficult today to find a consensus on wallet\nstructure between wallet developers. In addition, I changed my mind\nseveral times on these questions, so I guess I will probably need to\nchange things again in the future.\n\nThis is why I decided to include a version number in Electrum seeds. The\nversion number will be updated everytime the wallet structure changes. I\nknow many developers do not follow me on this, but that is something I\nam quite sure Electrum needs, despite all the other things I am not sure\nabout :)\n\nI think it is too early to aim for inter-wallet compatibility today. I\nguess we should postpone this goal, and move on with software releases.\nAs Andreas pointed out, we should just make sure that we do not import\nan incompatible seed in another wallet, because not recovering all your\nbitcoins would be a terrible user experience; the version number built\nin the seed will ensure that for Electrum."
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-04-24T07:42:30",
                "message_text_only": "Le 24/04/2014 09:10, Pieter Wuille a \u00e9crit :\n> To clarify:\n> BIP64 has a much stricter definition for accounts than BIP32.\n> \n> In BIP32, it is not well specified what accounts are used for. They\n> can be used for \"subwallets\", \"receive accounts\" (as in bitcoind's\n> account feature), \"recurring payments\", part of a chain used as\n> multisig addresses, ... determined individually for each index.\n> \n> In BIP64, they are strictly used for subwallets, and can't be used by\n> anything else.\n> \n\nyes, I saw that.\n\nIn particular, bip64 stipulates that the wallet \"never mixes coins\nacross different accounts\". This is not what Electrum does currently.\nThe UI allows you to chose between two modes: activate a single account\n(and the wallet will only use UTXOs from that acccount), or activate all\naccounts (and spend from all of them simultaneously).\n\nConcerning multisig addresses, I have changed my mind: Electrum will use\nparallel BIP32 trees. A wallet will not mix standard and multisig\naccounts. I think that is better in terms of UX.\n\nI agree with Mike Hearn's view that wallets with multiple accounts are\nprobably too difficult to deal with for most users. If a user feels the\nneed to have different \"accounting identities\", they will probably\ncreate different wallet files, instead of creating bip32 subwallets.\n\nHowever, since multiple subwallets have been asked by many users,\nElectrum will propose them. But this should not be the default. More\nimportant, multiple accounts should never be required (in my previous\nimplementation, they were required for multisig, because the wallet was\ncreating multisig addresses in dedicated multisig accounts)\n\nThomas"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T08:09:26",
                "message_text_only": "Right. So part of this is my fault, I'm afraid, because I do not intend to\nimplement any kind of subwallet/account support in bitcoinj. My reasons are:\n\n   1. The bitcoinj API already lets you create and use multiple wallets.\n   What's more, because of the desire to do key rotation (think rotating a\n   previously unencrypted wallet to an encrypted one that is stored on SSD's\n   that cannot reliably erase data), a bitcoinj wallet can actually contain\n   multiple BIP32 seeds and hierarchies at once, although only the last one\n   will be used for vending addresses. So adding subwallet support onto this\n   makes it even more complicated.\n\n   2. If there was a much better user experience to be enabled by this, it\n   may be worth it, but I believe many people will find subwallets rather\n   confusing. They don't match the analogy of bank accounts in several ways.\n   For instance, transferring money across them leaks private data and costs\n   miners fees, neither of which are true with banks.\n\n   Also it differs in a more important way. People have different bank\n   accounts because those accounts implement different policies. Current\n   accounts may pay a lower interest rate than savings accounts, but have\n   different features, and accounts can be used as security boundaries i.e. no\n   card withdrawals from savings. But \"subwallets\" are not like this. The only\n   justification for their existence is to avoid outputs being merged together\n   to make payments - a subtle technical detail of the protocol that users are\n   ill equipped to understand. If someone asked me \"why should I create a\n   second account\" I would be unable to give them a satisfying answer without\n   first teaching them about how the Bitcoin protocol works and the privacy\n   implications of that, which is practically a lecture sized topic.\n\n   3. MultiBit did support multiple wallets for a long time (just by\n   creating multiple wallet files and using the support in bitcoinj for\n   running them in parallel), but they decided to remove this feature in\n   MultiBit HD because it caused support headaches. People would stash money\n   in one wallet or the other, close the wallet and then forget and think they\n   had lost it, etc. It may be that TREZOR type subwallets don't suffer this\n   confusion because they can't be moved around or \"closed\" in the same way a\n   file can be, but still, this is a data point against multiple simultaneous\n   wallets. At least for products targeting entry level consumers.\n\nWhilst I can well believe there are TREZOR users who are asking for this\nfeature today, currently the costs feel a bit higher than the benefits.\n\nIt would be rather nice to be able to type in a mnemonic code that myTREZOR\nwas initialised with and duplicate that wallet into a bitcoinj based wallet\napp. But if I have to implement subwallets and expose this in the API, and\nif all wallet authors that want to be able to share a wallet with myTREZOR\nhave to expose subwallets in their GUIs too, even though the concept may\nprove confusing and hard to explain, then it might be more tempting to just\ntell users that want to switch wallet apps to send the money via the block\nchain instead.\n\n\n\n\nOn Thu, Apr 24, 2014 at 9:10 AM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Thu, Apr 24, 2014 at 8:54 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n> >> Why do clients need to use the features in BIP 64? If Electrum doesn't\n> want to\n> >> use accounts, [...]\n> >\n> > To clarify:\n> > Electrum plans to have bip32 accounts; Multibit will not, afaik.\n>\n> To clarify:\n> BIP64 has a much stricter definition for accounts than BIP32.\n>\n> In BIP32, it is not well specified what accounts are used for. They\n> can be used for \"subwallets\", \"receive accounts\" (as in bitcoind's\n> account feature), \"recurring payments\", part of a chain used as\n> multisig addresses, ... determined individually for each index.\n>\n> In BIP64, they are strictly used for subwallets, and can't be used by\n> anything else.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/095c0435/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-23T18:48:22",
                "message_text_only": "The most useful meta data to optimize chain scan is the key birth date, then the allowed gap size. \n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 23.04.2014, at 20:39, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> Different users could have different gap limit requirements.  20 seems very low as the default.\n> \n> A merchant could easily send 20 addresses in a row to customers and none of them bother to actually buy anything.\n> \n> Setting the gap limit to high is just a small extra cost in that case.\n> \n> Bip-32 serialization doesn't have a way of adding meta data though.\n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/88279ae3/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/88279ae3/attachment.sig>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-04-08T14:49:43",
                "message_text_only": "On 04/08/2014 02:43 PM, slush wrote:\n\n> After some off-list discussion about details with wallet developers, it\n> seems that structure\n> \n> m/<cointype>'/<account>'/<change>/<n> \n> \n> fulfill requirements of all wallet developers around, including\n> myTrezor, Electrum, Multibit, Wallet32 and other software is willing to\n> adapt once anything will be standardized (i.e. they don't care).\n> \n> Because I think that everybody told their comments to the topic already\n> and because it seems that there's quite wide agreement on that, I would\n> like to close the discussion and finally implement these paths into our\n> software.\n\nWhile there is an agreement that a standard would be useful for sharing\nwallets, we certainly didn't agree on every aspect of a standard. At\nleast not on this thread, and also not at the Berlin meeting.\n\nI understand each client will implement things a little bit different,\nfor example the current plan is bitcoinj will hold all keys in memory\nand start reusing keys on low resources. Electrum uses a chain for their\nprivate purpose. Etc.\n\nIf we cannot 100% agree on a standard and also agree it will not be\nextended in future, I think we should not even try. It's dangerous for\nthe money of users.\n\nI propose we keep our chains deliberately separate and only try\nstandardizing after each of us has a feel for the specific requirements."
            },
            {
                "author": "slush",
                "date": "2014-04-08T15:46:04",
                "message_text_only": "On Tue, Apr 8, 2014 at 4:49 PM, Andreas Schildbach <andreas at schildbach.de>wrote:\n\n> While there is an agreement that a standard would be useful for sharing\n> wallets, we certainly didn't agree on every aspect of a standard. At\n> least not on this thread, and also not at the Berlin meeting.\n>\n>\nWe're going to write down BIP describing such structure. If any wallet want\nto be BIP XX compatible, then it has chance to. Of course if any wallet\nwant to use another format, then it cannot call itself BIP XX compatible,\nthus nobody will expect that such software will see/recover all keys\ngenerated by BIP XX wallet.\n\n\n> I understand each client will implement things a little bit different,\n> for example the current plan is bitcoinj will hold all keys in memory\n> and start reusing keys on low resources. Electrum uses a chain for their\n> private purpose. Etc.\n>\n>\nIt still doesn't mean that bitcoinj or Electrum cannot share the bare\nminimum of BIP XX. Of course if somebody will use Electrum for 2to3\ntransactions and then move wallet to client which does not offer such\nfeature, it won't work. But I don't see that as a problem.\n\n\n> If we cannot 100% agree on a standard and also agree it will not be\n> extended in future, I think we should not even try. It's dangerous for\n> the money of users.\n\n\nIf some developers agree on some specific BIP, then it should be cross\ncompatible.  Of course if somebody implements BIP XX in different way, then\nit isn't BIP XX compatible.\n\n\n>\n>\nI propose we keep our chains deliberately separate and only try\n> standardizing after each of us has a feel for the specific requirements.\n>\n\nOf course, if somebody don't want to generate compatible bip32 paths, no\nproblem. It will be the same situation as now.\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/5cd11bda/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-04-08T15:58:03",
                "message_text_only": "On 04/08/2014 05:46 PM, slush wrote:\n\n>     I understand each client will implement things a little bit different,\n>     for example the current plan is bitcoinj will hold all keys in memory\n>     and start reusing keys on low resources. Electrum uses a chain for their\n>     private purpose. Etc.\n> \n> It still doesn't mean that bitcoinj or Electrum cannot share the bare\n> minimum of BIP XX. Of course if somebody will use Electrum for 2to3\n> transactions and then move wallet to client which does not offer such\n> feature, it won't work. But I don't see that as a problem.\n\nThere is no \"bare minimum\". Either you implement the \"BIP\" fully or not.\nThere is no inbetween. Likewise, the standard cannot be extended unless\nyou create a new standard that is based on the old (without re-using the\npath, of course).\n\nWe're lightyears away from a BIP. Lets first create implementations and\nsee if they are compatible in all possible combinations and situations.\nThe moment any two apps have a different view on their wallets generated\nfrom the same seed, they're incompatible. In this case they should\neither fix the issue or intentionally choose incompatible paths, so that\nthey don't see and spend \"subsets\" of each other."
            },
            {
                "author": "slush",
                "date": "2014-04-08T16:24:14",
                "message_text_only": "On Tue, Apr 8, 2014 at 5:58 PM, Andreas Schildbach <andreas at schildbach.de>wrote:\n\n> On 04/08/2014 05:46 PM, slush wrote:\n>\n> > It still doesn't mean that bitcoinj or Electrum cannot share the bare\n> > minimum of BIP XX. Of course if somebody will use Electrum for 2to3\n> > transactions and then move wallet to client which does not offer such\n> > feature, it won't work. But I don't see that as a problem.\n>\n> There is no \"bare minimum\". Either you implement the \"BIP\" fully or not.\n>\n\nI didn't mean \"Bare minimum of some spec\", but \"spec describing bare\nminimum\", which is different. I'm sorry for confusion.\n\nMarek\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/792dd287/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "New BIP32 structure",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Tamas Blummer",
                "Thomas Voegtlin",
                "slush",
                "Andreas Schildbach",
                "Pavol Rusnak",
                "Mike Hearn",
                "Tier Nolan",
                "Gregory Maxwell",
                "Pieter Wuille"
            ],
            "messages_count": 61,
            "total_messages_chars_count": 78127
        }
    },
    {
        "title": "[Bitcoin-development] have there been complains about network congestion? (router crashes, slow internet when running Bitcoin nodes)",
        "thread_messages": [
            {
                "author": "Angel Leon",
                "date": "2014-04-08T16:13:18",
                "message_text_only": "I was wondering if the level of traffic a Bitcoin node gets is or will be\nso high that you have heard/will hear complains like the following:\n\n\n   1. a home router that crashes or slows down when its NAT pin-hole table\n   overflows, triggered by many TCP connections.\n   2. a home router that crashes or slows down by UDP traffic\n   3. a home DSL or cable modem having its send buffer filled up by\n   outgoing data, and the buffer fits seconds worth of bytes. This adds\n   seconds of delay on interactive traffic. For a web site that needs 10 round\n   trips to load this may mean 10s of seconds of delay to load compared to\n   without bittorrent. Skype or other delay sensitive applications would be\n   affected even more.\n\nThese are issues the bittorrent community faced and eventually solved\nbrilliantly with uTP, which uses a congestion window algorithm that allows\nyou to use as much of the TCP bandwidth as possible and automatically\nthrottling down if there's any cross traffic, while also taking into\nconsideration things like the optimum MTUs (Path MTU discovery), Clock\nDrift phenomena and other features.\n\nI was wondering if we have or expect to have these issues in the future,\nperhaps uTP could help greatly the performance of the entire network at\nsome point.\n\nDetailed information about uTP here\nhttp://www.libtorrent.org/utp.html\n\n@gubatron\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/476cfadd/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-08T16:30:59",
                "message_text_only": "On Tuesday, 8 April 2014, at 12:13 pm, Angel Leon wrote:\n> I was wondering if we have or expect to have these issues in the future,\n> perhaps uTP could help greatly the performance of the entire network at\n> some point.\n\nOr people could simply learn to configure their routers correctly. The only time I ever notice that Bitcoind is saturating my upstream link is when I try to transfer a file using SCP from a computer on my home network to a computer out on the Internet somewhere. SCP sets the \"maximize throughput\" flag in the IP \"type of service\" field, and my router interprets that as meaning low priority, and so those SCP transfers get stalled behind Bitcoind. But mostly everything else (e.g., email, web browsing, instant messaging, SSH) shows no degration whatsoever regardless of what Bitcoind is doing. The key is to move the packet queue from the cable modem into the router, where intelligent decisions about packet priority and reordering can be enacted.\n\n\u00b5TP pretty much reinvents the wheel, and it does so in userspace, where the overhead is greater. There's no need for it if proper QoS is in effect."
            },
            {
                "author": "Angel Leon",
                "date": "2014-04-08T16:36:07",
                "message_text_only": "only that in the real world most routers suck and people don't even know\nhow to configure them (reminds me of the convo about people not installing\nplugins)\nthis is why the wheel had to be reinvented for the bittorrent world, and it\nworks.\n\nhttp://twitter.com/gubatron\n\n\nOn Tue, Apr 8, 2014 at 12:30 PM, Matt Whitlock <bip at mattwhitlock.name>wrote:\n\n> On Tuesday, 8 April 2014, at 12:13 pm, Angel Leon wrote:\n> > I was wondering if we have or expect to have these issues in the future,\n> > perhaps uTP could help greatly the performance of the entire network at\n> > some point.\n>\n> Or people could simply learn to configure their routers correctly. The\n> only time I ever notice that Bitcoind is saturating my upstream link is\n> when I try to transfer a file using SCP from a computer on my home network\n> to a computer out on the Internet somewhere. SCP sets the \"maximize\n> throughput\" flag in the IP \"type of service\" field, and my router\n> interprets that as meaning low priority, and so those SCP transfers get\n> stalled behind Bitcoind. But mostly everything else (e.g., email, web\n> browsing, instant messaging, SSH) shows no degration whatsoever regardless\n> of what Bitcoind is doing. The key is to move the packet queue from the\n> cable modem into the router, where intelligent decisions about packet\n> priority and reordering can be enacted.\n>\n> \u00b5TP pretty much reinvents the wheel, and it does so in userspace, where\n> the overhead is greater. There's no need for it if proper QoS is in effect.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/c345250e/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-08T16:44:07",
                "message_text_only": "On Tue, Apr 8, 2014 at 9:13 AM, Angel Leon <gubatron at gmail.com> wrote:\n> a home router that crashes or slows down when its NAT pin-hole table\n> overflows, triggered by many TCP connections.\n\nWe don't form or need to form a great many connections.\n\n> a home router that crashes or slows down by UDP traffic\n\nWe don't use UDP.\n\n> a home DSL or cable modem having its send buffer filled up by outgoing data,\n> and the buffer fits seconds worth of bytes. This adds seconds of delay on\n> interactive traffic. For a web site that needs 10 round trips to load this\n> may mean 10s of seconds of delay to load compared to without bittorrent.\n> Skype or other delay sensitive applications would be affected even more.\n>\n> These are issues the bittorrent community faced and eventually solved\n> brilliantly with uTP, which uses a congestion window algorithm that allows\n\nYes, TCP has a congestion window too, still sometimes some poorly\ndesigned or configured routers suffer from buffer bloat.\n\n> perhaps uTP could help greatly\n\nAdding our own UDP network stack involving a ton of exposed code\nsounds like a great way to gain inadvertent bugs or backdoors.\n\nBut there doesn't have to be and shouldn't just be one network\ntransport for Bitcoin. You can gateway to other protocols and run them\nin parallel.  I think it would be great for someone to go build an\nalternative transport protocol to gateway to and see what useful\nthings they can accomplish."
            },
            {
                "author": "Wladimir",
                "date": "2014-04-08T16:48:01",
                "message_text_only": "On Tue, Apr 8, 2014 at 6:13 PM, Angel Leon <gubatron at gmail.com> wrote:\n\n> I was wondering if the level of traffic a Bitcoin node gets is or will be\n> so high that you have heard/will hear complains like the following:\n>\n>\n>    1. a home router that crashes or slows down when its NAT pin-hole\n>    table overflows, triggered by many TCP connections.\n>\n>\nThe default maximum amount of connections is 125, which only happens if you\nhave a stable node that accepts incoming connections. The maximum number of\noutgoing connections is always 8.\nShould be no problem even for cheapass routers.\n\n\n>    1. a home router that crashes or slows down by UDP traffic\n>\n> N/A - We don't use UDP\n\n\n>    1. a home DSL or cable modem having its send buffer filled up by\n>    outgoing data, and the buffer fits seconds worth of bytes. This adds\n>    seconds of delay on interactive traffic. For a web site that needs 10 round\n>    trips to load this may mean 10s of seconds of delay to load compared to\n>    without bittorrent. Skype or other delay sensitive applications would be\n>    affected even more.\n>\n> Filling up the send buffer is certainly possible.\nAdding throttling wouldn't be horribly hard, but this is postponed until\nparallel block download is implemented, so that other peers will not get\nstuck on your throttled node.\n\n>\n>    1.\n>\n> I was wondering if we have or expect to have these issues in the future,\n> perhaps uTP could help greatly the performance of the entire network at\n> some point.\n>\n\nThere is enough lower-hanging fruit left.\n\nIf you're interested in speeding up the performance I think it's important\nto start with benchmarking and analysis to find out where the pain points\nare.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/34cc00c4/attachment.html>"
            },
            {
                "author": "Angel Leon",
                "date": "2014-04-08T17:33:18",
                "message_text_only": "Those clarifications are what I needed to hear. For some reason I started\nthinking about this last night and wanted to bring it up just in case it\nwould help, but def. not necessary. Will get back to more low hanging fruit\nin the UI/UX as I get to know the project more.\n\nGregory: \"But there doesn't have to be and shouldn't just be one\nnetwork transport\nfor Bitcoin.\"\nis there a formal abstraction for a Transport layer? I suppose if there\nisn't it'll be there when needed.\n\nThanks!\n\nhttp://twitter.com/gubatron\n\n\nOn Tue, Apr 8, 2014 at 12:48 PM, Wladimir <laanwj at gmail.com> wrote:\n\n>\n> On Tue, Apr 8, 2014 at 6:13 PM, Angel Leon <gubatron at gmail.com> wrote:\n>\n>> I was wondering if the level of traffic a Bitcoin node gets is or will be\n>> so high that you have heard/will hear complains like the following:\n>>\n>>\n>>    1. a home router that crashes or slows down when its NAT pin-hole\n>>    table overflows, triggered by many TCP connections.\n>>\n>>\n> The default maximum amount of connections is 125, which only happens if\n> you have a stable node that accepts incoming connections. The maximum\n> number of outgoing connections is always 8.\n> Should be no problem even for cheapass routers.\n>\n>\n>>    1. a home router that crashes or slows down by UDP traffic\n>>\n>> N/A - We don't use UDP\n>\n>\n>>    1. a home DSL or cable modem having its send buffer filled up by\n>>    outgoing data, and the buffer fits seconds worth of bytes. This adds\n>>    seconds of delay on interactive traffic. For a web site that needs 10 round\n>>    trips to load this may mean 10s of seconds of delay to load compared to\n>>    without bittorrent. Skype or other delay sensitive applications would be\n>>    affected even more.\n>>\n>> Filling up the send buffer is certainly possible.\n> Adding throttling wouldn't be horribly hard, but this is postponed until\n> parallel block download is implemented, so that other peers will not get\n> stuck on your throttled node.\n>\n>>\n>>    1.\n>>\n>> I was wondering if we have or expect to have these issues in the future,\n>> perhaps uTP could help greatly the performance of the entire network at\n>> some point.\n>>\n>\n> There is enough lower-hanging fruit left.\n>\n> If you're interested in speeding up the performance I think it's important\n> to start with benchmarking and analysis to find out where the pain points\n> are.\n>\n> Wladimir\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/39fdb937/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "have there been complains about network congestion? (router crashes, slow internet when running Bitcoin nodes)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Whitlock",
                "Gregory Maxwell",
                "Wladimir",
                "Angel Leon"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 10226
        }
    },
    {
        "title": "[Bitcoin-development] 0.9.1 released",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2014-04-08T21:11:50",
                "message_text_only": "Bitcoin Core version 0.9.1 is now available from:\n\n  https://bitcoin.org/bin/0.9.1/\n\nThis is a security update. It is recommended to upgrade to this release\nas soon as possible.\n\nIt is especially important to upgrade if you currently have version\n0.9.0 installed and are using the graphical interface OR you are using\nbitcoind from any pre-0.9.1 version, and have enabled SSL for RPC and\nhave configured allowip to allow rpc connections from potentially\nhostile hosts.\n\nPlease report bugs using the issue tracker at github:\n\n  https://github.com/bitcoin/bitcoin/issues\n\nHow to Upgrade\n--------------\n\nIf you are running an older version, shut it down. Wait until it has\ncompletely\nshut down (which might take a few minutes for older versions), then run the\ninstaller (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac)\nor\nbitcoind/bitcoin-qt (on Linux).\n\nIf you are upgrading from version 0.7.2 or earlier, the first time you run\n0.9.1 your blockchain files will be re-indexed, which will take anywhere\nfrom\n30 minutes to several hours, depending on the speed of your machine.\n\n0.9.1 Release notes\n=======================\n\nNo code changes were made between 0.9.0 and 0.9.1. Only the dependencies\nwere changed.\n\n- Upgrade OpenSSL to 1.0.1g. This release fixes the following\nvulnerabilities which can\n  affect the Bitcoin Core software:\n\n  - CVE-2014-0160 (\"heartbleed\")\n    A missing bounds check in the handling of the TLS heartbeat extension\ncan\n    be used to reveal up to 64k of memory to a connected client or server.\n\n  - CVE-2014-0076\n    The Montgomery ladder implementation in OpenSSL does not ensure that\n    certain swap operations have a constant-time behavior, which makes it\n    easier for local users to obtain ECDSA nonces via a FLUSH+RELOAD cache\n    side-channel attack.\n\n- Add statically built executables to Linux build\n\nCredits\n--------\n\nCredits go to the OpenSSL team for fixing the vulnerabilities quickly.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140408/5993f617/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "0.9.1 released",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin Andresen"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2124
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoind-in-background mode for SPV wallets",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-04-09T15:29:32",
                "message_text_only": "Hello,\n\nThis is primarily aimed at developers of SPV wallets.\n\nThe recently reported decrease in number of full nodes could have several\nreasons, one of them that less people are running Bitcoin Core for the\nwallet because the other wallets are getting ahead in both features and\nuseability.\n\nIt's great to see innovation in wallets, but it's worrying that the number\nof full nodes decreases.\n\nIt may be that lots of people would support the network by running a full\nnode, but don't want to go through the trouble of installing bitcoin core\nseparately (and get confused because it's a wallet, too).\n\nHence I'd like to explore the idea of adding an option to popular SPV\nwallets, to spin a bitcoind process in the background. This could be pretty\nmuch transparent to the user - it would sync in the background, the wallet\ncould show statistics about the node, but is not dependent on it.\n\nIn exchange the user would get increased (full node level) security, as the\nSPV wallet would have a local trusted node.\n\nDoes this sound like a good idea?\n\nIs there any way that Bitcoin Core can help to accomedate this 'embedded'\nusage? Specific Interfaces, special builds - maybe add a walletless\nbitcoind build to gitian - bindings, dlls, etc?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/6673abbe/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-09T15:37:43",
                "message_text_only": "YES\n\nSuch a bitcoind is what I called border router in a previous mail. \n\nYes, SPV wallets are getting ahead of features, so people will use them also because on size just does not fit all, but all want to ensure being on the same trunk of the chain.\nTherefore serious user of Bitcoin run a bitcoind as a border router and connect SPV wallets with higher functionality to that trusted node(s).\n\nThis is what I think the core should focus on: Being a lightweight superfast consensus building border router and nothing more. No wallet, no GUI, no RPC calls,\nno Payment protocol and the rest.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 09.04.2014, at 17:29, Wladimir <laanwj at gmail.com> wrote:\n\n> Hello,\n> \n> This is primarily aimed at developers of SPV wallets.\n> \n> The recently reported decrease in number of full nodes could have several reasons, one of them that less people are running Bitcoin Core for the wallet because the other wallets are getting ahead in both features and useability.\n> \n> It's great to see innovation in wallets, but it's worrying that the number of full nodes decreases. \n> \n> It may be that lots of people would support the network by running a full node, but don't want to go through the trouble of installing bitcoin core separately (and get confused because it's a wallet, too).\n> \n> Hence I'd like to explore the idea of adding an option to popular SPV wallets, to spin a bitcoind process in the background. This could be pretty much transparent to the user - it would sync in the background, the wallet could show statistics about the node, but is not dependent on it.\n> \n> In exchange the user would get increased (full node level) security, as the SPV wallet would have a local trusted node.\n> \n> Does this sound like a good idea?\n> \n> Is there any way that Bitcoin Core can help to accomedate this 'embedded' usage? Specific Interfaces, special builds - maybe add a walletless bitcoind build to gitian - bindings, dlls, etc?\n> \n> Wladimir\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/714a611c/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/714a611c/attachment.sig>"
            },
            {
                "author": "Natanael",
                "date": "2014-04-09T15:41:31",
                "message_text_only": "This could probably be done fairly easily by bundling Stratum (it's\nnot just for pools!) and allowing SPV wallets to ask Bitcoind to start\nit (if you don't use it, there's no need to waste the resources), and\nthen connect to it. The point of using Stratum is that it already is\nbeing used by Electrum, and that it might be an easier way to support\nSPV clients than creating a new API in bitcoind for it since Stratum\nitself already relies on bitcoind to provide it's services.\n\nOn Wed, Apr 9, 2014 at 5:29 PM, Wladimir <laanwj at gmail.com> wrote:\n> Hello,\n>\n> This is primarily aimed at developers of SPV wallets.\n>\n> The recently reported decrease in number of full nodes could have several\n> reasons, one of them that less people are running Bitcoin Core for the\n> wallet because the other wallets are getting ahead in both features and\n> useability.\n>\n> It's great to see innovation in wallets, but it's worrying that the number\n> of full nodes decreases.\n>\n> It may be that lots of people would support the network by running a full\n> node, but don't want to go through the trouble of installing bitcoin core\n> separately (and get confused because it's a wallet, too).\n>\n> Hence I'd like to explore the idea of adding an option to popular SPV\n> wallets, to spin a bitcoind process in the background. This could be pretty\n> much transparent to the user - it would sync in the background, the wallet\n> could show statistics about the node, but is not dependent on it.\n>\n> In exchange the user would get increased (full node level) security, as the\n> SPV wallet would have a local trusted node.\n>\n> Does this sound like a good idea?\n>\n> Is there any way that Bitcoin Core can help to accomedate this 'embedded'\n> usage? Specific Interfaces, special builds - maybe add a walletless bitcoind\n> build to gitian - bindings, dlls, etc?\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-09T15:54:25",
                "message_text_only": "On Wed, Apr 9, 2014 at 8:41 AM, Natanael <natanael.l at gmail.com> wrote:\n> This could probably be done fairly easily by bundling Stratum (it's\n> not just for pools!) and allowing SPV wallets to ask Bitcoind to start\n> it (if you don't use it, there's no need to waste the resources), and\n> then connect to it. The point of using Stratum is that it already is\n> being used by Electrum,\n\nSadly today Electrum requires more than a full node, it requires a\nnumber of large additional indexes over what a full node has and\npruning is precluded. I don't think that increasing the resource\nutilization of the node is a good way to go there for the purposes\nexpressed here. (not that electrum couldn't be used here, but not\nunmodified without the resource usage increasing route)\n\n> and that it might be an easier way to support\n> SPV clients than creating a new API in bitcoind for it since Stratum\n> itself already relies on bitcoind to provide it's services.\n\nBitcoin's own P2P protocol is already the API for a ordinary SPV\nclient. So I don't believe any new API would be require, except\nperhaps for some process management stuff (which also isn't provided\nfor Electrum)."
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-04-09T16:09:06",
                "message_text_only": "Le 09/04/2014 17:54, Gregory Maxwell a \u00e9crit :\n\n> Sadly today Electrum requires more than a full node, it requires a\n> number of large additional indexes over what a full node has and\n> pruning is precluded. I don't think that increasing the resource\n> utilization of the node is a good way to go there for the purposes\n> expressed here. (not that electrum couldn't be used here, but not\n> unmodified without the resource usage increasing route)\n>\n\nElectrum uses two large indexes:\n\n     address -> utxo\n\n(patricia tree, aka \"ultimate blockchain compression\", see thread \nstarted by Alan Reiner in the bitcointalk forum)\n\n     address -> spent history\n\nThe first index is not going to grow larger than what bitcoind already \nneeds to store, because bitcoind will always need to store utxos.\n\nThe second index threatens to become large. However, Electrum servers do \nnot keep the full histories, they prune older entries. Without adapting \nElectrum clients, it would even be possible to keep only one bit per \naddress (to know whether that address has been used or not), and that \ninformation is only used to restore wallets from seed, not during normal \noperations.\n\nIf the first index (patricia tree) was implemented in bitcoind, that \nwould obviously be a big relief for electrum servers.\n\n\n\n>> and that it might be an easier way to support\n>> SPV clients than creating a new API in bitcoind for it since Stratum\n>> itself already relies on bitcoind to provide it's services.\n>\n> Bitcoin's own P2P protocol is already the API for a ordinary SPV\n> client. So I don't believe any new API would be require, except\n> perhaps for some process management stuff (which also isn't provided\n> for Electrum).\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-09T19:25:13",
                "message_text_only": "On Wed, Apr 9, 2014 at 6:09 PM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n\n> Le 09/04/2014 17:54, Gregory Maxwell a \u00e9crit :\n>\n> > Sadly today Electrum requires more than a full node, it requires a\n> > number of large additional indexes over what a full node has and\n> > pruning is precluded. I don't think that increasing the resource\n> > utilization of the node is a good way to go there for the purposes\n> > expressed here. (not that electrum couldn't be used here, but not\n> > unmodified without the resource usage increasing route)\n> >\n>\n> Electrum uses two large indexes:\n>\n>      address -> utxo\n>\n> (patricia tree, aka \"ultimate blockchain compression\", see thread\n> started by Alan Reiner in the bitcointalk forum)\n>\n\nThanks for the explanation.\n\nAdding a RPC call for a \"address -> utxo\" query wouldn't be a big deal. It\nhas been requested before for other purposes as well, all the better if it\nhelps for interaction with Electrum.\n\nSpent history would be involve a much larger index, and it's not likely\nthat will end up in bitcoin\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/4cf070b4/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-10T06:04:28",
                "message_text_only": "Hi Wladimir,\n\nIf the motivation of the SPV wallet is to radically extend functionality, as in my case, then the index is specific to the added features and the subset of the blockchain that is of interest for the wallet.\nAs you also point out, adding huge generic purpose indices to core would rather discourage people using full nodes due to excess requirements. \n\nI believe nothing would add more to the core\u2019s popularity as a trusted background node to SPV than full validation at lowest possible memory, disk and CPU footprint.\nServing headers should be default but storing and serving full blocks configurable to ranges, so people can tailor to their bandwith and space available.\n\nTamas Blummer\nBits of Proof\n\nOn 09.04.2014, at 21:25, Wladimir <laanwj at gmail.com> wrote:\n> \n> \n> Adding a RPC call for a \"address -> utxo\" query wouldn't be a big deal. It has been requested before for other purposes as well, all the better if it helps for interaction with Electrum.\n> \n> Spent history would be involve a much larger index, and it's not likely that will end up in bitcoin\n> \n> Wladimir\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/45889b81/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/45889b81/attachment.sig>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-10T11:09:59",
                "message_text_only": "On Thu, Apr 10, 2014 at 8:04 AM, Tamas Blummer <tamas at bitsofproof.com>wrote:\n\n> Serving headers should be default but storing and serving full blocks\n> configurable to ranges, so people can tailor to their bandwith and space\n> available.\n>\n\nI do agree that it is important.\n\nThis does require changes to the P2P protocol, as currently there is no way\nfor a node to signal that they store only part of the block chain. Also,\nclients will have to be modified to take this into account. Right now they\nare under the assumption that every full node can send them every\n(previous) block.\n\nWhat would this involve?\n\nDo you know of any previous work towards this?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/fb3a77bb/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-10T11:29:59",
                "message_text_only": ">\n> What would this involve?\n>\n> Do you know of any previous work towards this?\n>\n\nChain pruning is a fairly complicated project, partly because it spans\ncodebases. For instance if you try and implement it *just* by changing\nBitcoin Core, you will break all the SPV clients based on bitcoinj (i.e.\nall of them). Big changes to the P2P network like this require upgrading\nboth codebases simultaneously.\n\nI think things like this may be why Gavin is now just \"chief scientist\"\ninstead of Core maintainer - in future, the changes people need will span\nprojects and require fairly significant planning.\n\n>From a technical perspective, it means extending addr broadcasts so nodes\nbroadcast how much of the chain they have, and teaching both Core and\nbitcoinj how to search for nodes that have enough of the chain for them to\nuse. Currently bitcoinj still doesn't use addr broadcasts at all, there's\nan incomplete patch available but it was never finished or merged. So that\nhas to be fixed first. And that probably implies improving Bitcoin Core so\nthe results of getaddr are more usable, ideally as high quality as what the\nDNS seeds provide, because if lots of bad addresses are returned this will\nslow down initial connect time, which is an important performance metric.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/3beeb426/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-10T11:32:44",
                "message_text_only": "There were earlier discussions.\n\nThe two ideas were either using one or a few service bits to indicate\navailability of blocks, or to extend addr messages with some flags to\nindicate this information.\n\nI wonder whether we can't have a hybrid: bits to indicate general\ndegree of availability of blocks (none, only recent, everything), but\nindicate actual availability only upon actually connecting (through a\n\"version\" extension, or - preferably - a separate message). Reason is\nthat the actual blocks available are likely to change frequently (if\nyou keep the last week of blocks, a 3-day old addr entry will have\nquite outdated information), and not that important to actual peer\nselection - only to drive the decision which blocks to ask after\nconnection.\n\nOn Thu, Apr 10, 2014 at 1:09 PM, Wladimir <laanwj at gmail.com> wrote:\n> On Thu, Apr 10, 2014 at 8:04 AM, Tamas Blummer <tamas at bitsofproof.com>\n> wrote:\n>>\n>> Serving headers should be default but storing and serving full blocks\n>> configurable to ranges, so people can tailor to their bandwith and space\n>> available.\n>\n>\n> I do agree that it is important.\n>\n> This does require changes to the P2P protocol, as currently there is no way\n> for a node to signal that they store only part of the block chain. Also,\n> clients will have to be modified to take this into account. Right now they\n> are under the assumption that every full node can send them every (previous)\n> block.\n>\n> What would this involve?\n>\n> Do you know of any previous work towards this?\n>\n> Wladimir\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-10T11:43:21",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 10 April 2014 07:32:44 GMT-04:00, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>There were earlier discussions.\n>\n>The two ideas were either using one or a few service bits to indicate\n>availability of blocks, or to extend addr messages with some flags to\n>indicate this information.\n>\n>I wonder whether we can't have a hybrid: bits to indicate general\n>degree of availability of blocks (none, only recent, everything), but\n>indicate actual availability only upon actually connecting (through a\n>\"version\" extension, or - preferably - a separate message). Reason is\n>that the actual blocks available are likely to change frequently (if\n>you keep the last week of blocks, a 3-day old addr entry will have\n>quite outdated information), and not that important to actual peer\n>selection - only to drive the decision which blocks to ask after\n>connection.\n\nWhy not just put an expiration date on that information and delay deletion until the expiration is reached?\n\nAlso, its worth noting how the node bit solution you proposed can be done as a gradual upgrade path for SPV client. From the perspective of nodes that don't know about it they just see the pruned nodes as SPV nodes without any chain data at all. The only issue would be if large numbers of uses turned off their full nodes, but that's a possibility regardless. Done with partial UTXO set mode this may even result in an eventual increase in the number of full nodes.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRoPZMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhetrCACA02EJQ0VpcYvafuNc\n7pvqMVeirJRu3Uv7Wy8rcl9jW5irM5fmNdznARtv2vwpEZN7MU0wp3ZY1FYOCv2f\nPvWC7DBCSBs2BuyGkvPuwnXEppTrYmWFT3qjg+99lF1IlOV4yWFacja2RGDuJkea\nfYUkODosHJjFVcXi5aMkBPQ5sOFdlUVbC94YV4d4PDSmF2fHLGG8uEfEweYb6Pv+\ngj1CsfuAWf8DWzygDeL8x/wOG9HeqYqEbjxyOb9hxlp1ByUof+4WJtz3QfGsR2Xt\nfvkmgS8vkUxSIZorMdypj7oLBOnfDW1bEK5He2SlqPdYi5FEQusZ/jMMX3Fw74GV\nfJKt\n=Wyv8\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-10T11:50:55",
                "message_text_only": "On Thu, Apr 10, 2014 at 4:32 AM, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n> There were earlier discussions.\n\nOn this list.\n\n> The two ideas were either using one or a few service bits to indicate\n> availability of blocks, or to extend addr messages with some flags to\n> indicate this information.\n>\n> I wonder whether we can't have a hybrid: bits to indicate general\n> degree of availability of blocks (none, only recent, everything), but\n> indicate actual availability only upon actually connecting (through a\n> \"version\" extension, or - preferably - a separate message). Reason is\n> that the actual blocks available are likely to change frequently (if\n> you keep the last week of blocks, a 3-day old addr entry will have\n> quite outdated information), and not that important to actual peer\n> selection - only to drive the decision which blocks to ask after\n> connection.\n\nI think you actually do need the kept ranges to be circulated,\notherwise you might need to hunt for a very long time to find the\nright nodes with the blocks you need.  Alternatively, you give up and\ndon't hunt and pick some node that has them all and we get poor load\ndistribution. I'd rather be in a case where the nodes that have the\nfull history are only hit as a last resort.\n\nWRT the changing values, I think that is pretty uniquely related to\nthe most recent blocks, and so instead I think that should be handled\nsymbolically (e.g. the hybrid approach... a flag for the \"I keep the\nmost recent 2000 blocks\", I say 2000 because thats about where the\nrequest offset historgrams flattened out) or as a single offset range\n\"I keep the last N=200\",  and the flag or the offset would be in\naddition to whatever additional range was signaled. The latter could\nbe infrequently changing.\n\nSignaling _more_ and more current range data on connect seems fine to\nme, I just don't think it replaces something that gets relayed.\n\nBased on the safety against reorgs and the block request access\npatterns we observed I'm pretty sure we'd want any node serving blocks\nat all to be at least the last N (for some number between 144 and 2000\nor so). Based on the request patterns if just the recent blocks use up\nall the space you're willing to spend, then I think thats probably\nstill the optimal contribution...\n\n(Just be glad I'm not suggesting coding the entire blockchain with an\nerror correcting code so that it doesn't matter which subset you're\nholding)"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-10T11:54:38",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 10 April 2014 07:50:55 GMT-04:00, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>(Just be glad I'm not suggesting coding the entire blockchain with an\n>error correcting code so that it doesn't matter which subset you're\n>holding)\n\nI forgot to ask last night: if you do that, can you add new blocks to the chain with the encoding incrementally?\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRoZ+MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhYudCAC7ImifMnLIFHv1UifV\nzRxtDkx7UxIf9dncDAcrTIyKEDhoouh0TmoZl3HKQ3KUEETAVKsMzqXLgqVe6Ezr\nny1bm0pQlkBCZFRwuZvmB27Y3mwC8PD6rT9ywtWzFjWd8PEg6/UaM547nQPw7ir0\n27S3XMfE/BMiQWfWnWc/nqpbmJjd8x/dM3oiTG9SVZ7iNxotxAqfnW2X5tkhJb0q\ndAV08wpu6aZ5hTyLpvDxXDFjEG119HJeLkT9QVIrg+GBG55PYORqE4gQr6uhrF4L\nfGZS2EIlbk+kAiv0EjglQfxWM7KSRegplSASiKEOuX80tqLIsEugNh1em8qvG401\nNOAS\n=CWql\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-10T17:30:32",
                "message_text_only": "Error correction is an interesting suggestion.\n\nIf there was 10000 nodes and each stored 0.1% of the blocks, at random,\nthen the odds of a block not being stored is 45 in a million.\n\nBlocks are stored on average 10 times, so there is already reasonable\nredundancy.\n\nWith 1 million blocks, 45 would be lost in that case, even though most are\nstored multiple times.\n\nWith error correction codes, the chances of blocks going missing is much\nlower.\n\nFor example, if there was 32 out of 34 Reed-Solomon-like system, then 2\nblocks out of 34 could be lost without any actual data loss for the network.\n\nAs a back of the envelop check, the odds of 2 missing blocks landing within\n34 of another is 68/1000000.  That means that the odds of 2 missing blocks\nfalling in the same correction section is 45 * 34 / 1000000 = 0.153%.  Even\nin that case, the missing blocks could be reconstructed, as long as you\nknow that they are missing.\n\nThe error correction code has taken it from being a near certainty that\nsome blocks would be lost to less than 0.153%.\n\nA simple error correction system would just take 32 blocks in sequence and\nthen compute 2 extra blocks.\n\nThe extra blocks would have to be the same length as the longest block in\nthe 32 being corrected.\n\nThe shorter blocks would be padded with zeroes so everything is the same\nsize.\n\nFor each byte position in the blocks you compute the polynomial that goes\nthrough byte (x, data(x)), for x = 0 to 31.  This could be a finite field,\nor just mod 257.\n\nYou can then compute the value for x=32 and x = 33.  Those are the values\nfor the 2 extra blocks.\n\nIf mod 257 is used, then only the 2 extra blocks have to deal with symbols\nfrom 0 to 256.\n\nIf you have 32 of the 34 blocks, you can compute the polynomial and thus\ngenerate the 32 actual blocks.\n\nThis could be achieved by a soft fork by having a commitment every 32\nblocks in the coinbase.\n\nIt makes the header chain much longer though.\n\nLonger sections are more efficient, but need more calculations to recover\neverything.  You could also do interleaving to handle the case where entire\nsections are missing.\n\n\nOn Thu, Apr 10, 2014 at 12:54 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA512\n>\n>\n>\n> On 10 April 2014 07:50:55 GMT-04:00, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> >(Just be glad I'm not suggesting coding the entire blockchain with an\n> >error correcting code so that it doesn't matter which subset you're\n> >holding)\n>\n> I forgot to ask last night: if you do that, can you add new blocks to the\n> chain with the encoding incrementally?\n> -----BEGIN PGP SIGNATURE-----\n> Version: APG v1.1.1\n>\n> iQFQBAEBCgA6BQJTRoZ+MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhYudCAC7ImifMnLIFHv1UifV\n> zRxtDkx7UxIf9dncDAcrTIyKEDhoouh0TmoZl3HKQ3KUEETAVKsMzqXLgqVe6Ezr\n> ny1bm0pQlkBCZFRwuZvmB27Y3mwC8PD6rT9ywtWzFjWd8PEg6/UaM547nQPw7ir0\n> 27S3XMfE/BMiQWfWnWc/nqpbmJjd8x/dM3oiTG9SVZ7iNxotxAqfnW2X5tkhJb0q\n> dAV08wpu6aZ5hTyLpvDxXDFjEG119HJeLkT9QVIrg+GBG55PYORqE4gQr6uhrF4L\n> fGZS2EIlbk+kAiv0EjglQfxWM7KSRegplSASiKEOuX80tqLIsEugNh1em8qvG401\n> NOAS\n> =CWql\n> -----END PGP SIGNATURE-----\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/1f9c48ef/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-11T16:54:44",
                "message_text_only": "On Thu, Apr 10, 2014 at 10:30 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n> Error correction is an interesting suggestion.\n\nThough I mentioned it, it was in jest\u2014 I think right now it would be\nan over-design at least for the basic protocol.  Also, storing\n'random' blocks has some locality problems, when verifying blocks you\nneed to obtain them contiguously, and so we can take advantage of the\nlocality of reference.  For the non-error-coded case I believe nodes\nwith random spans of blocks works out asymptotically to the same\nfailure rates as random.\n\nOne thing that I like to point out is that there is absolutely no need\nfor the entire network to use the same p2p protocol. Diversity here\nwould be very good.  I think it would be really good for someone to\nhave an alternative p2p protocol using these techniques even though I\nthink they aren't yet compelling enough to be table stakes in the\nbasic protocol.\n\nThere are some very helpful things you can do with forward error\ncorrection for faster and more efficient block relaying too:\nhttps://en.bitcoin.it/wiki/User:Gmaxwell/block_network_coding\n\n(The conversation Peter Todd was referring to was one where I was\npointing out that with suitable error coding you also get an\nanti-censorship effect where its very difficult to provide part of the\ndata without potentially providing all of it)\n\n> If there was 10000 nodes and each stored 0.1% of the blocks, at random, then\n> the odds of a block not being stored is 45 in a million.\n\nI think in the network we have today and for the foreseeable future we\ncan reasonably count on there being a reasonable number of nodes that\nstore all the blocks... quite likely not enough to satisfy the\nhistorical block demand from the network alone, but easily enough to\nsupply blocks that have otherwise gone missing."
            },
            {
                "author": "Wladimir",
                "date": "2014-04-09T17:31:34",
                "message_text_only": "On Wed, Apr 9, 2014 at 5:41 PM, Natanael <natanael.l at gmail.com> wrote:\n\n> This could probably be done fairly easily by bundling Stratum (it's\n> not just for pools!) and allowing SPV wallets to ask Bitcoind to start\n> it (if you don't use it, there's no need to waste the resources), and\n> then connect to it. The point of using Stratum is that it already is\n> being used by Electrum, and that it might be an easier way to support\n> SPV clients than creating a new API in bitcoind for it since Stratum\n> itself already relies on bitcoind to provide it's services.\n>\n\nWhy would a new API be needed? (beside maybe some functionality that would\nmake it easier to integrate)\n\nP2P should be enough for SPV clients such as BitcoinJ to get access to\n(filtered) blocks and transations, and RPC can be used to manage/query the\nbitcoind instance. I'm not sure what stratum would add.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/a2914bc4/attachment.html>"
            },
            {
                "author": "Brian Hoffman",
                "date": "2014-04-09T15:42:31",
                "message_text_only": "How would this affect the user in terms of disk storage? They're going to\nget hammered on space constraints aren't they? If it's not required how\nlikely are users to enable this?\n\n\nOn Wed, Apr 9, 2014 at 11:29 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> Hello,\n>\n> This is primarily aimed at developers of SPV wallets.\n>\n> The recently reported decrease in number of full nodes could have several\n> reasons, one of them that less people are running Bitcoin Core for the\n> wallet because the other wallets are getting ahead in both features and\n> useability.\n>\n> It's great to see innovation in wallets, but it's worrying that the number\n> of full nodes decreases.\n>\n> It may be that lots of people would support the network by running a full\n> node, but don't want to go through the trouble of installing bitcoin core\n> separately (and get confused because it's a wallet, too).\n>\n> Hence I'd like to explore the idea of adding an option to popular SPV\n> wallets, to spin a bitcoind process in the background. This could be pretty\n> much transparent to the user - it would sync in the background, the wallet\n> could show statistics about the node, but is not dependent on it.\n>\n> In exchange the user would get increased (full node level) security, as\n> the SPV wallet would have a local trusted node.\n>\n> Does this sound like a good idea?\n>\n> Is there any way that Bitcoin Core can help to accomedate this 'embedded'\n> usage? Specific Interfaces, special builds - maybe add a walletless\n> bitcoind build to gitian - bindings, dlls, etc?\n>\n> Wladimir\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/0039915d/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-09T15:57:58",
                "message_text_only": "On Wed, Apr 9, 2014 at 8:42 AM, Brian Hoffman <brianchoffman at gmail.com> wrote:\n> How would this affect the user in terms of disk storage? They're going to\n> get hammered on space constraints aren't they? If it's not required how\n> likely are users to enable this?\n\nIf Bitcoin core activates pruning a full node can be supported in\u2014\nsay\u2014 4GBytes or so. (That gives enough space to store the utxo about\n350MB now, and a couple gigs for blocks to serve out).\n\nI'd imagine getting information from SPV wallet developers how much\ndisk usage agility they think is required is part of what Wladimir is\nlooking for."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-09T16:09:13",
                "message_text_only": "I am glad that SPV wallets are discussed outside the scope of mobile devices!\n\nYes, SPV is a sufficient API to a trusted node to build sophisticated features not offered by the core.\nSPV clients of the border router will build their own archive and indices based on their interest of the chain therefore the\nborder router core does not need to store (and process) anything not needed for consensus, its memory\nor disk footprint would be as low as an optimal storage of UTXO.\n\nRegards,\n\nTam\u00e1s Blummer\nhttp://bitsofproof.com\n\nOn 09.04.2014, at 17:57, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Apr 9, 2014 at 8:42 AM, Brian Hoffman <brianchoffman at gmail.com> wrote:\n>> How would this affect the user in terms of disk storage? They're going to\n>> get hammered on space constraints aren't they? If it's not required how\n>> likely are users to enable this?\n> \n> If Bitcoin core activates pruning a full node can be supported in\u2014\n> say\u2014 4GBytes or so. (That gives enough space to store the utxo about\n> 350MB now, and a couple gigs for blocks to serve out).\n> \n> I'd imagine getting information from SPV wallet developers how much\n> disk usage agility they think is required is part of what Wladimir is\n> looking for.\n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/44274e19/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/44274e19/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-09T15:47:37",
                "message_text_only": "On 04/09/2014 09:09 AM, Tamas Blummer wrote:\n> Yes, SPV is a sufficient API to a trusted node to build sophisticated\n> features not offered by the core.\n> SPV clients of the border router will build their own archive and\n> indices based on their interest of the chain therefore the\n> border router core does not need to store (and process) anything not\n> needed for consensus, its memory\n> or disk footprint would be as low as an optimal storage of UTXO.\n\nStoring zero full blocks does nothing to aid the network."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-09T16:27:13",
                "message_text_only": "A border router that is not able to serve blocks is still protecting consensus rules, that SPVs do not.\nIf the network would only consist of SPV nodes only then e.g. a majority coalition of miner could increase their reward at will.\n\nArchives need a different solution.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 09.04.2014, at 17:47, Mark Friedenbach <mark at monetize.io> wrote:\n\n> On 04/09/2014 09:09 AM, Tamas Blummer wrote:\n>> Yes, SPV is a sufficient API to a trusted node to build sophisticated\n>> features not offered by the core.\n>> SPV clients of the border router will build their own archive and\n>> indices based on their interest of the chain therefore the\n>> border router core does not need to store (and process) anything not\n>> needed for consensus, its memory\n>> or disk footprint would be as low as an optimal storage of UTXO.\n> \n> Storing zero full blocks does nothing to aid the network.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/7f11ea3a/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/7f11ea3a/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-09T17:46:00",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 9 April 2014 12:27:13 GMT-04:00, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>A border router that is not able to serve blocks is still protecting\n>consensus rules, that SPVs do not.\n>If the network would only consist of SPV nodes only then e.g. a\n>majority coalition of miner could increase their reward at will.\n>\n>Archives need a different solution.\n\nAny collective group that has a majority of hashing power will have no major issues running enough nodes that follow their rules to make SPV insecure anyway.\n\nThere's no good reason not to have SPV security nodes distribute block chain data, particularly block headers. It helps provide redundancy in the network topology and helps provide more resources for full nodes to sync up faster. For instance in a network with a large number of partial UTXO set nodes if those nodes are forwarding block data to each other they can get enough data to become fully fledged full nodes without putting all the load on the existing full nodes.  This is a good thing.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRYdYMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhdwRB/46MAw7OHwnVkLHOD0g\nY4X6p1/QHgRisJIgpG2Y4nGVeAjOFleQWe4PWS4Wwdr4u0BDGPmJompiR3A99CaL\nMUPnxJhtdiUsomn6kI704f5pkrqslQGLzejWFb7/9WuQtvGm8RwnzIs7uAqKasni\nKJMn3jmqFIUcCEy9dePUdmMySCQj8qSxjGDdwZnwf8BZSdSLqd8dYiN0jQi/aA1I\n2hWWyyDK9V9yQ8peAg+1dfg754Tc76lj3mEQOD39Wu3Klb9mBF3+wQCW2tJYEj2E\nstzeOdFZsUNUIOKFb6mo0IoUipPOvrAkfm91ais+FIwlCf+k5KcwmAUXpV45rLHm\negCr\n=2vMf\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-09T17:50:03",
                "message_text_only": "Block header has to be available in SPV and also in an UTXO only storing core node, so why not serve it if bandwith allows.\n\nServing any additional information like known peer adresses or known full blocks is certainly beneficial and should be offered if at hand.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 09.04.2014, at 19:46, Peter Todd <pete at petertodd.org> wrote:\n\n> Signed PGP part\n> \n> \n> On 9 April 2014 12:27:13 GMT-04:00, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> >A border router that is not able to serve blocks is still protecting\n> >consensus rules, that SPVs do not.\n> >If the network would only consist of SPV nodes only then e.g. a\n> >majority coalition of miner could increase their reward at will.\n> >\n> >Archives need a different solution.\n> \n> Any collective group that has a majority of hashing power will have no major issues running enough nodes that follow their rules to make SPV insecure anyway.\n> \n> There's no good reason not to have SPV security nodes distribute block chain data, particularly block headers. It helps provide redundancy in the network topology and helps provide more resources for full nodes to sync up faster. For instance in a network with a large number of partial UTXO set nodes if those nodes are forwarding block data to each other they can get enough data to become fully fledged full nodes without putting all the load on the existing full nodes.  This is a good thing.\n> \n> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/781e75c1/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/781e75c1/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-09T18:00:16",
                "message_text_only": "The right way to start with this, if anyone cares, is to add\ninstrumentation to existing SPV wallet apps to report back to home base how\nlong they are running for, how much disk space / RAM they have, and\npossibly what kind of hardware.\n\nI *strongly* suspect that the vast majority of SPV wallets are not left\nrunning permanently, and run on laptops where battery life is at a premium.\nThese people will never want to run full nodes.\n\nSorry. I don't think it will ever make sense to run full nodes on consumer\nhardware again. Our time is much better spent on optimising so it's cheaper\nfor full node operators to run them on cheap virtualised servers.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/7478abb7/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-09T18:19:56",
                "message_text_only": "On Wed, Apr 9, 2014 at 8:00 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> The right way to start with this, if anyone cares, is to add\n> instrumentation to existing SPV wallet apps to report back to home base how\n> long they are running for, how much disk space / RAM they have, and\n> possibly what kind of hardware.\n>\n> I *strongly* suspect that the vast majority of SPV wallets are not left\n> running permanently, and run on laptops where battery life is at a premium.\n> These people will never want to run full nodes.\n>\n\nBitcoins stands or falls with people running full nodes.\n\nIf no one wants to volunteer resources to support the network anymore,\nwe'll have failed.\n\nSorry. I don't think it will ever make sense to run full nodes on consumer\n> hardware again. Our time is much better spent on optimising so it's cheaper\n> for full node operators to run them on cheap virtualised servers.\n>\n\nMost consumer hardware is much more powerful than 'cheap virtualized\nservers'. More memory, disks are cheap, and at least in the Netherlands\nhome bandwidth is much cheaper than server bandwidth.\n\nAlso: any optimization that helps running on cheap servers will also help\nrunning it on consumer hardware. It's not the one or the other.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/00a9ece0/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-09T18:35:14",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/09/2014 06:19 PM, Wladimir wrote:\n> If no one wants to volunteer resources to support the network\n> anymore, we'll have failed.\n\nIf the security of the network depends on a broken incentive model,\nthen fix the design of the network so that economics works for you\ninstead of against you.\n\n\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTRZLiAAoJECoisBQbQ4v0RRMIAKL84ju4b9XAls9sOxQGrLMr\nxifQDhThCQKC4/qkOmGU8zseIdKRgXEq4auMF9/0BlgoSxsBcKynlRH2fFtYY7ol\nsdjCy/5dk+MBu3K1GCvNn/cuGkpIJJxrom/9riSiaPtivE5ncl7cyW5hFqf2MzRd\ndF6q937ocgBd8d2VuOQleQ9N5gue1+du77soxfp8oY7dXNdwk5ZrngeYxz1umsjQ\nlBAI/3JYkKVhU5Rte3deJcMHe6xA+neIzvcfWbOZYrkdwWE+jLSKnDkDkCOXJnuP\nvOI8CAteaFctV2mfgXX2CmNDWVeFsyCwoQwbnCmuE/uiM5y235PcTrsyr6U+Zzs=\n=oQPK\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/2996507b/attachment.bin>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-09T18:46:06",
                "message_text_only": "On Wed, Apr 9, 2014 at 8:35 PM, Justus Ranvier <justusranvier at gmail.com>wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> On 04/09/2014 06:19 PM, Wladimir wrote:\n> > If no one wants to volunteer resources to support the network\n> > anymore, we'll have failed.\n>\n> If the security of the network depends on a broken incentive model,\n> then fix the design of the network so that economics works for you\n> instead of against you.\n>\n\nMy solution would be quick to implement and could help increase the number\nof nodes in the short term. It will also smooth the way towards splitting\noff the wallet from Bitcoin Core, by giving people a choice what wallet\nthey use with their full node.\n\nThat doesn't preclude looking for longer-term solutions that change the\nincentive structure, but that is much more difficult and risky. I don't\nbelieve it's a matter of 'fixing that instead' in a few hours, though I\nnevertheless look forward to your pull request.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/b71b8fa0/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-09T18:50:01",
                "message_text_only": "On Wed, Apr 9, 2014 at 11:35 AM, Justus Ranvier <justusranvier at gmail.com> wrote:\n> If the security of the network depends on a broken incentive model,\n> then fix the design of the network so that economics works for you\n> instead of against you.\n\nWho says anything about a broken incentive model. You've made past\nclaims about resource requirements that I think made no sense and then\nfailed to defend them when they were challenge.\n\nWith suitable software improvements running a full node could be done\nin as little as a few gigabytes in disk space (e.g. cost 25-50 cents),\nand as 50-100kbit/sec bandwidth in and out ongoing, and a moderate\namount of ram. Power costs are already just a few cents per month.  By\nfar the greatest cost is the figuring out and setting up part, which\nbundling could fix. The exact resources could be tunable to what the\nusers are willing and able to contribute.\n\nIf improved marginal security and privacy in addition to supporting\nthe network is not enough incentive to overcome costs like these then\nBitcoin is already doomed.  I think that fundamental costs aren't an\nissue at all, just implementation warts and education are.\n\nPart of asking the question is feeling out which improvements need to\nhappen first, and what the prospects of getting the bundling going\nonce those improvements are made."
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-09T18:58:52",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/09/2014 06:50 PM, Gregory Maxwell wrote:\n> Who says anything about a broken incentive model. You've made past \n> claims about resource requirements that I think made no sense and\n> then failed to defend them when they were challenge.\n\nAnyone reading the archives of the list will see about triple the\nnumber of people independently confirming the resource usage problem\nthan they will see denying it, so I'm not particularly worried.\n\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTRZhsAAoJECoisBQbQ4v0iD8H/A1RZyLJN6f+zt5x78CFgRdp\nzqZua3NBwUN2L9mI/PU1NADtxoXgkq49XusHRc+bjLu17VxGMUOsmB+AeK3VU4sN\nBVC1qIcWCa+OPMkgnMFrdydz4OGxX5xiJoCNsqveZIEYc8nQoCDfsn/fwqL50/Ct\nNfmPzh/cW7uUZ+h2bBgduGD3fzpQBlnnswAbHHX3FbBh9MvcaCfROeXXqUCedWj9\nH2qVCNWTkIFJksJkqyF3f+KfedOTIyUwflx/0niBvzXcP9w4oK+WpBApHACWxiSA\nH3KHYNF0s2/fs+mIkabPLRX1PIUk15ln29FapoDvlHW9jzDE92x6JFnMppI4rEs=\n=ILks\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/509a4b23/attachment.bin>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-09T19:33:33",
                "message_text_only": "On Wed, Apr 9, 2014 at 11:58 AM, Justus Ranvier <justusranvier at gmail.com> wrote:\n> Anyone reading the archives of the list will see about triple the\n> number of people independently confirming the resource usage problem\n> than they will see denying it, so I'm not particularly worried.\n\nThe list has open membership, there is no particular qualification or\nbackground required to post here. Optimal use of an information source\nrequires critical reading and understanding the limitations of the\nmedium. Counting comments is usually not a great way to assess\ntechnical considerations on an open public forum.  Doubly so because\nthose comments were not actually talking about the same thing I am\ntalking about.\n\nExisting implementations are inefficient in many known ways (and, no\ndoubt, some unknown ones). This list is about developing protocol and\nimplementations including improving their efficiency.  When talking\nabout incentives the costs you need to consider are the costs of the\nbest realistic option.  As far as I know there is no doubt from anyone\ntechnically experienced that under the current network rules full\nnodes can be operated with vastly less resources than current\nimplementations use, it's just a question of the relatively modest\nimplementation improvements.\n\nWhen you argue that Bitcoin doesn't have the right incentives (and\nthus something??) I retort that the actual resource _requirements_ are\nfor the protocol very low. I gave specific example numbers to enable\ncorrection or clarification if I've said something wrong or\ncontroversial. Pointing out that existing implementations are not that\ncurrently as efficient as the underlying requirements and that some\nlarge number of users do not like the efficiency of existing\nimplementations doesn't tell me anything I disagree with or didn't\nalready know. Whats being discussed around here contributes to\nprioritizing improvements over the existing implementations.\n\nI hope this clarifies something."
            },
            {
                "author": "slush",
                "date": "2014-04-09T20:12:17",
                "message_text_only": "I believe there're plenty bitcoind instances running, but they don't have\nconfigured port forwarding properly.There's uPNP support in bitcoind, but\nit works only on simple setups.\n\nMaybe there're some not yet considered way how to expose these *existing*\ninstances to Internet, to strenghten the network. Maybe just self-test\nindicating the node is not reachable from outside (together with short\nhowto like in some torrent clients).\n\nThese days IPv6 is slowly deploying to server environments, but maybe\nthere's some simple way how to bundle ipv6 tunnelling into bitcoind so any\ninstance will become ipv6-reachable automatically?\n\nMaybe there're other ideas how to improve current situation without needs\nof reworking the architecture.\n\nMarek\n\n\nOn Wed, Apr 9, 2014 at 9:33 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Apr 9, 2014 at 11:58 AM, Justus Ranvier <justusranvier at gmail.com>\n> wrote:\n> > Anyone reading the archives of the list will see about triple the\n> > number of people independently confirming the resource usage problem\n> > than they will see denying it, so I'm not particularly worried.\n>\n> The list has open membership, there is no particular qualification or\n> background required to post here. Optimal use of an information source\n> requires critical reading and understanding the limitations of the\n> medium. Counting comments is usually not a great way to assess\n> technical considerations on an open public forum.  Doubly so because\n> those comments were not actually talking about the same thing I am\n> talking about.\n>\n> Existing implementations are inefficient in many known ways (and, no\n> doubt, some unknown ones). This list is about developing protocol and\n> implementations including improving their efficiency.  When talking\n> about incentives the costs you need to consider are the costs of the\n> best realistic option.  As far as I know there is no doubt from anyone\n> technically experienced that under the current network rules full\n> nodes can be operated with vastly less resources than current\n> implementations use, it's just a question of the relatively modest\n> implementation improvements.\n>\n> When you argue that Bitcoin doesn't have the right incentives (and\n> thus something??) I retort that the actual resource _requirements_ are\n> for the protocol very low. I gave specific example numbers to enable\n> correction or clarification if I've said something wrong or\n> controversial. Pointing out that existing implementations are not that\n> currently as efficient as the underlying requirements and that some\n> large number of users do not like the efficiency of existing\n> implementations doesn't tell me anything I disagree with or didn't\n> already know. Whats being discussed around here contributes to\n> prioritizing improvements over the existing implementations.\n>\n> I hope this clarifies something.\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/477817a3/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-09T20:31:03",
                "message_text_only": "Another idea: Integrate torrent download of bootstrap.dat into bitcoind.\nNormal user (especially a beginner) won't learn how to download bootstrap\nseparately and import it into bitcoind; he simply give up the\nsynchronization once he realize it takes too much time. From my experience\ndownloading the bootstrap significantly improves catching the blockchain,\nwhich may attract some more users to run bitcoind.\n\nNot sure about C++, but simple torrent client in python is like 30 lines of\ncode (using libtorrent).\n\nMarek\n\n\nOn Wed, Apr 9, 2014 at 10:12 PM, slush <slush at centrum.cz> wrote:\n\n> I believe there're plenty bitcoind instances running, but they don't have\n> configured port forwarding properly.There's uPNP support in bitcoind, but\n> it works only on simple setups.\n>\n> Maybe there're some not yet considered way how to expose these *existing*\n> instances to Internet, to strenghten the network. Maybe just self-test\n> indicating the node is not reachable from outside (together with short\n> howto like in some torrent clients).\n>\n> These days IPv6 is slowly deploying to server environments, but maybe\n> there's some simple way how to bundle ipv6 tunnelling into bitcoind so any\n> instance will become ipv6-reachable automatically?\n>\n> Maybe there're other ideas how to improve current situation without needs\n> of reworking the architecture.\n>\n> Marek\n>\n>\n> On Wed, Apr 9, 2014 at 9:33 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Wed, Apr 9, 2014 at 11:58 AM, Justus Ranvier <justusranvier at gmail.com>\n>> wrote:\n>> > Anyone reading the archives of the list will see about triple the\n>> > number of people independently confirming the resource usage problem\n>> > than they will see denying it, so I'm not particularly worried.\n>>\n>> The list has open membership, there is no particular qualification or\n>> background required to post here. Optimal use of an information source\n>> requires critical reading and understanding the limitations of the\n>> medium. Counting comments is usually not a great way to assess\n>> technical considerations on an open public forum.  Doubly so because\n>> those comments were not actually talking about the same thing I am\n>> talking about.\n>>\n>> Existing implementations are inefficient in many known ways (and, no\n>> doubt, some unknown ones). This list is about developing protocol and\n>> implementations including improving their efficiency.  When talking\n>> about incentives the costs you need to consider are the costs of the\n>> best realistic option.  As far as I know there is no doubt from anyone\n>> technically experienced that under the current network rules full\n>> nodes can be operated with vastly less resources than current\n>> implementations use, it's just a question of the relatively modest\n>> implementation improvements.\n>>\n>> When you argue that Bitcoin doesn't have the right incentives (and\n>> thus something??) I retort that the actual resource _requirements_ are\n>> for the protocol very low. I gave specific example numbers to enable\n>> correction or clarification if I've said something wrong or\n>> controversial. Pointing out that existing implementations are not that\n>> currently as efficient as the underlying requirements and that some\n>> large number of users do not like the efficiency of existing\n>> implementations doesn't tell me anything I disagree with or didn't\n>> already know. Whats being discussed around here contributes to\n>> prioritizing improvements over the existing implementations.\n>>\n>> I hope this clarifies something.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Put Bad Developers to Shame\n>> Dominate Development with Jenkins Continuous Integration\n>> Continuously Automate Build, Test & Deployment\n>> Start a new project now. Try Jenkins in the cloud.\n>> http://p.sf.net/sfu/13600_Cloudbees\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/e99a782c/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-09T20:36:35",
                "message_text_only": "I've advocated for this in the past, and reasonable counter-arguments I\nwas presented with are: (1) bittorrent is horribly insecure - it would\nbe easy to DoS the initial block download if that were the goal, and (2)\nthere's a reasonable pathway to doing this all in-protocol, so there's\nno reason to introduce external dependencies.\n\nOn 04/09/2014 01:31 PM, slush wrote:\n> Another idea: Integrate torrent download of bootstrap.dat into bitcoind.\n> Normal user (especially a beginner) won't learn how to download\n> bootstrap separately and import it into bitcoind; he simply give up the\n> synchronization once he realize it takes too much time. From my\n> experience downloading the bootstrap significantly improves catching the\n> blockchain, which may attract some more users to run bitcoind.\n> \n> Not sure about C++, but simple torrent client in python is like 30 lines\n> of code (using libtorrent).\n> \n> Marek\n> \n> \n> On Wed, Apr 9, 2014 at 10:12 PM, slush <slush at centrum.cz\n> <mailto:slush at centrum.cz>> wrote:\n> \n>     I believe there're plenty bitcoind instances running, but they don't\n>     have configured port forwarding properly.There's uPNP support in\n>     bitcoind, but it works only on simple setups.\n> \n>     Maybe there're some not yet considered way how to expose these\n>     *existing* instances to Internet, to strenghten the network. Maybe\n>     just self-test indicating the node is not reachable from outside\n>     (together with short howto like in some torrent clients).\n> \n>     These days IPv6 is slowly deploying to server environments, but\n>     maybe there's some simple way how to bundle ipv6 tunnelling into\n>     bitcoind so any instance will become ipv6-reachable automatically?\n> \n>     Maybe there're other ideas how to improve current situation without\n>     needs of reworking the architecture.\n> \n>     Marek\n> \n> \n>     On Wed, Apr 9, 2014 at 9:33 PM, Gregory Maxwell <gmaxwell at gmail.com\n>     <mailto:gmaxwell at gmail.com>> wrote:\n> \n>         On Wed, Apr 9, 2014 at 11:58 AM, Justus Ranvier\n>         <justusranvier at gmail.com <mailto:justusranvier at gmail.com>> wrote:\n>         > Anyone reading the archives of the list will see about triple the\n>         > number of people independently confirming the resource usage\n>         problem\n>         > than they will see denying it, so I'm not particularly worried.\n> \n>         The list has open membership, there is no particular\n>         qualification or\n>         background required to post here. Optimal use of an information\n>         source\n>         requires critical reading and understanding the limitations of the\n>         medium. Counting comments is usually not a great way to assess\n>         technical considerations on an open public forum.  Doubly so because\n>         those comments were not actually talking about the same thing I am\n>         talking about.\n> \n>         Existing implementations are inefficient in many known ways (and, no\n>         doubt, some unknown ones). This list is about developing\n>         protocol and\n>         implementations including improving their efficiency.  When talking\n>         about incentives the costs you need to consider are the costs of the\n>         best realistic option.  As far as I know there is no doubt from\n>         anyone\n>         technically experienced that under the current network rules full\n>         nodes can be operated with vastly less resources than current\n>         implementations use, it's just a question of the relatively modest\n>         implementation improvements.\n> \n>         When you argue that Bitcoin doesn't have the right incentives (and\n>         thus something??) I retort that the actual resource\n>         _requirements_ are\n>         for the protocol very low. I gave specific example numbers to enable\n>         correction or clarification if I've said something wrong or\n>         controversial. Pointing out that existing implementations are\n>         not that\n>         currently as efficient as the underlying requirements and that some\n>         large number of users do not like the efficiency of existing\n>         implementations doesn't tell me anything I disagree with or didn't\n>         already know. Whats being discussed around here contributes to\n>         prioritizing improvements over the existing implementations.\n> \n>         I hope this clarifies something.\n> \n>         ------------------------------------------------------------------------------\n>         Put Bad Developers to Shame\n>         Dominate Development with Jenkins Continuous Integration\n>         Continuously Automate Build, Test & Deployment\n>         Start a new project now. Try Jenkins in the cloud.\n>         http://p.sf.net/sfu/13600_Cloudbees\n>         _______________________________________________\n>         Bitcoin-development mailing list\n>         Bitcoin-development at lists.sourceforge.net\n>         <mailto:Bitcoin-development at lists.sourceforge.net>\n>         https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-09T21:04:24",
                "message_text_only": "On Wed, Apr 9, 2014 at 1:36 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> (2) there's a reasonable pathway to doing this all in-protocol, so there's\n> no reason to introduce external dependencies.\n\nNot just a speculative pathway. Pieter implemented headers first:\nhttps://github.com/sipa/bitcoin/tree/headersfirst  and it was\neverything we hoped it would be\u2014 it easily can saturate residential\nbroadband, produces less load hot-spotting, copes with unreliable\npeers, etc. It's now just slowly making its way into Bitcoin core."
            },
            {
                "author": "Wladimir",
                "date": "2014-04-09T20:37:10",
                "message_text_only": "On Wed, Apr 9, 2014 at 10:31 PM, slush <slush at centrum.cz> wrote:\n\n> Another idea: Integrate torrent download of bootstrap.dat into bitcoind.\n> Normal user (especially a beginner) won't learn how to download bootstrap\n> separately and import it into bitcoind; he simply give up the\n> synchronization once he realize it takes too much time. From my experience\n> downloading the bootstrap significantly improves catching the blockchain,\n> which may attract some more users to run bitcoind.\n>\n> Not sure about C++, but simple torrent client in python is like 30 lines\n> of code (using libtorrent).\n>\n\nParallel block download would be better for that. No need to involve\nbittorrent.\n\nBut please let's not derail this thread, this is not about other solutions\nfor faster block download or such, let's keep it focused.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/bbaa8006/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-09T20:35:13",
                "message_text_only": "On Wed, Apr 9, 2014 at 10:12 PM, slush <slush at centrum.cz> wrote:\n\n> Maybe there're other ideas how to improve current situation without needs\n> of reworking the architecture.\n>\n\nNothing I've proposed here would require larger changes to the architecture\nthen were already planned. After SPV lands we are going to split off the\nwallet, and that will need an interface to an bitcoind to allow 'running\nwith full node'. If that can be generalized to be useful for other (SPV)\nclients as well, that would be useful, hence I asked for input.\n\nIt of course doesn't preclude also looking for other solutions.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/eb8737dd/attachment.html>"
            },
            {
                "author": "slush",
                "date": "2014-04-09T20:50:08",
                "message_text_only": "We definitely *need* lightweight bitcoin router / \"core\" which can be\neasily deployed anywhere. No disagreement here.\n\nI just wanted to remind that there're actually much more running nodes\n*already* and maybe converting those hidden nodes to publicly reachable\nnodes may be way easier than attracting fresh instances.\n\nTo the idea of bundled core with SPV clients - it won't improve anything,\nin my opinion. SPV wallets are not running long-term (maybe Multibit team\nhas any better stats) so blockchain catching will turn the computer to be\nunusable everytime user starts the wallet; that's exactly the reason why\npeople choose SPV wallets over full blockchain wallets.\n\nNot saying that SPV clients usually aren't reachable from outside, which\nturns the topic back to my ideas about motivating users to expose their\nexisting instances over Internet.\n\nMarek\n\nOn Wed, Apr 9, 2014 at 10:35 PM, Wladimir <laanwj at gmail.com> wrote:\n\n>\n>\n> On Wed, Apr 9, 2014 at 10:12 PM, slush <slush at centrum.cz> wrote:\n>\n>> Maybe there're other ideas how to improve current situation without needs\n>> of reworking the architecture.\n>>\n>\n> Nothing I've proposed here would require larger changes to the\n> architecture then were already planned. After SPV lands we are going to\n> split off the wallet, and that will need an interface to an bitcoind to\n> allow 'running with full node'. If that can be generalized to be useful for\n> other (SPV) clients as well, that would be useful, hence I asked for input.\n>\n> It of course doesn't preclude also looking for other solutions.\n>\n> Wladimir\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/a49a8414/attachment.html>"
            },
            {
                "author": "Laszlo Hanyecz",
                "date": "2014-04-09T20:55:18",
                "message_text_only": "On Apr 9, 2014, at 8:12 PM, slush <slush at centrum.cz> wrote:\n\n> \n> These days IPv6 is slowly deploying to server environments, but maybe there's some simple way how to bundle ipv6 tunnelling into bitcoind so any instance will become ipv6-reachable automatically?\n> \n\nTeredo is available by default on Microsoft systems and it's actually very common to see Teredo addresses as peers in torrents - this should work for bitcoin too, though I'm not sure if an app needs to set special flags to gain access to it.. there are probably some security settings around it.  In the US, AT&T/CenturyLink provide IPv6 by way of 6RD for DSL customers, Comcast has native IPv6 on residential (but not business) cable modems, and of course those who want to can always set up with a tunnel broker like Hurricane Electric - they even let you use your own IPv6 addresses.  IPv6 is great, but having an application running its own tunnels would not be a good way to leverage it.\n\nProbably what's keeping a lot of them from being reachable is that most people just plug their CPE into a NAT router (without IPv6).  Teredo can help here though.\nPutting an IPv6 checkbox in the settings with a link to an explanation might help with education and result in smarter operators who can make their nodes reachable.  A built in checker would be even better - something like a checklist showing red/green for different aspects of reachability (v4/teredo/v6).\n\n-Laszlo"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-10T06:38:49",
                "message_text_only": "I tend to agree with slush here - counting the IPs in addr broadcasts often\ngives a number like 100,000 vs just 10,000 for actually reachable nodes (or\nless). It seems like optimising the NAT tunneling code would help. Starting\nby adding more diagnostic stuff to the GUI. STUN support may also help.\n\nThe main constraint with home devices is not IMHO their actual power but\nrather that a lot of people no longer keep computers switched on all the\ntime. If you don't do that then spv with bundled Core can't help your\nsecurity because the spv wallet would always be syncing from the p2p\nnetwork for performance reasons.\nOn 9 Apr 2014 22:13, \"slush\" <slush at centrum.cz> wrote:\n\n> I believe there're plenty bitcoind instances running, but they don't have\n> configured port forwarding properly.There's uPNP support in bitcoind, but\n> it works only on simple setups.\n>\n> Maybe there're some not yet considered way how to expose these *existing*\n> instances to Internet, to strenghten the network. Maybe just self-test\n> indicating the node is not reachable from outside (together with short\n> howto like in some torrent clients).\n>\n> These days IPv6 is slowly deploying to server environments, but maybe\n> there's some simple way how to bundle ipv6 tunnelling into bitcoind so any\n> instance will become ipv6-reachable automatically?\n>\n> Maybe there're other ideas how to improve current situation without needs\n> of reworking the architecture.\n>\n> Marek\n>\n>\n> On Wed, Apr 9, 2014 at 9:33 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Wed, Apr 9, 2014 at 11:58 AM, Justus Ranvier <justusranvier at gmail.com>\n>> wrote:\n>> > Anyone reading the archives of the list will see about triple the\n>> > number of people independently confirming the resource usage problem\n>> > than they will see denying it, so I'm not particularly worried.\n>>\n>> The list has open membership, there is no particular qualification or\n>> background required to post here. Optimal use of an information source\n>> requires critical reading and understanding the limitations of the\n>> medium. Counting comments is usually not a great way to assess\n>> technical considerations on an open public forum.  Doubly so because\n>> those comments were not actually talking about the same thing I am\n>> talking about.\n>>\n>> Existing implementations are inefficient in many known ways (and, no\n>> doubt, some unknown ones). This list is about developing protocol and\n>> implementations including improving their efficiency.  When talking\n>> about incentives the costs you need to consider are the costs of the\n>> best realistic option.  As far as I know there is no doubt from anyone\n>> technically experienced that under the current network rules full\n>> nodes can be operated with vastly less resources than current\n>> implementations use, it's just a question of the relatively modest\n>> implementation improvements.\n>>\n>> When you argue that Bitcoin doesn't have the right incentives (and\n>> thus something??) I retort that the actual resource _requirements_ are\n>> for the protocol very low. I gave specific example numbers to enable\n>> correction or clarification if I've said something wrong or\n>> controversial. Pointing out that existing implementations are not that\n>> currently as efficient as the underlying requirements and that some\n>> large number of users do not like the efficiency of existing\n>> implementations doesn't tell me anything I disagree with or didn't\n>> already know. Whats being discussed around here contributes to\n>> prioritizing improvements over the existing implementations.\n>>\n>> I hope this clarifies something.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Put Bad Developers to Shame\n>> Dominate Development with Jenkins Continuous Integration\n>> Continuously Automate Build, Test & Deployment\n>> Start a new project now. Try Jenkins in the cloud.\n>> http://p.sf.net/sfu/13600_Cloudbees\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/0246775b/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-10T06:50:55",
                "message_text_only": "On Thu, Apr 10, 2014 at 8:38 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> I tend to agree with slush here - counting the IPs in addr broadcasts\n> often gives a number like 100,000 vs just 10,000 for actually reachable\n> nodes (or less). It seems like optimising the NAT tunneling code would\n> help. Starting by adding more diagnostic stuff to the GUI. STUN support may\n> also help.\n>\n> The main constraint with home devices is not IMHO their actual power but\n> rather that a lot of people no longer keep computers switched on all the\n> time. If you don't do that then spv with bundled Core can't help your\n> security because the spv wallet would always be syncing from the p2p\n> network for performance reasons.\n>\nI agree that there is a fundamental incompatibility in usage between\nwallets and nodes. Wallets need to be online as little as possible, nodes\nneed to online as much as possible.\n\nHowever, a full node background process could also be running if the wallet\nis not open itself. Ffor example - by running as a system service.\n\nBitcoin Core's own wallet is also moving to SPV, so this means a general\nsolution is needed to get people to run a node when the wallet is not\nrunning.\n\nMaybe the node shouldn't be controlled from the wallet at all, it could be\na 'node control' user interface on its own (this is what -disablewallet\ndoes currently). In this case, there is no need for packaging it with a\nwallet The only drawback would be that initially, people wouldn't know why\nor when to install this, hence my suggestion to pack it with wallets...\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/edc08ddf/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-10T07:09:25",
                "message_text_only": "It's an optimisation problem. Home environments are much more hostile than\nservers are due to things like virus scanners, wildly varying memory\npressure as apps are started and shut down, highly asymmetrical upstream\nversus downstream bandwidth,  complicated nat setups, people who only use\nlaptops (which I think is most people these days) and so on.\n\nSo I think the right way to go is to optimise the things that hurt server\nnode operators like large memory and disk  usage, and this will\nautomatically make it more pleasant to run on the desktop as well. If at\nsome point all the low hanging fruit for the server side is gone then\nimproving things on the desktop would be the next place to go. But we have\nto be realistic. Desktop tower machines that are always on are dying and\nwill not be coming back. Not a single person I know uses them anymore, they\nhave been wiped out in favour of laptops. This is why, given the tiny size\nof the bitcoin core development team, I do not think it makes sense to\nspend precious coding hours chasing this goal.\nOn 10 Apr 2014 08:51, \"Wladimir\" <laanwj at gmail.com> wrote:\n\n> On Thu, Apr 10, 2014 at 8:38 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> I tend to agree with slush here - counting the IPs in addr broadcasts\n>> often gives a number like 100,000 vs just 10,000 for actually reachable\n>> nodes (or less). It seems like optimising the NAT tunneling code would\n>> help. Starting by adding more diagnostic stuff to the GUI. STUN support may\n>> also help.\n>>\n>> The main constraint with home devices is not IMHO their actual power but\n>> rather that a lot of people no longer keep computers switched on all the\n>> time. If you don't do that then spv with bundled Core can't help your\n>> security because the spv wallet would always be syncing from the p2p\n>> network for performance reasons.\n>>\n> I agree that there is a fundamental incompatibility in usage between\n> wallets and nodes. Wallets need to be online as little as possible, nodes\n> need to online as much as possible.\n>\n> However, a full node background process could also be running if the\n> wallet is not open itself. Ffor example - by running as a system service.\n>\n> Bitcoin Core's own wallet is also moving to SPV, so this means a general\n> solution is needed to get people to run a node when the wallet is not\n> running.\n>\n> Maybe the node shouldn't be controlled from the wallet at all, it could be\n> a 'node control' user interface on its own (this is what -disablewallet\n> does currently). In this case, there is no need for packaging it with a\n> wallet The only drawback would be that initially, people wouldn't know why\n> or when to install this, hence my suggestion to pack it with wallets...\n>\n> Wladimir\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/8d12e844/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-10T09:33:03",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\n But we\n>have\n>to be realistic. Desktop tower machines that are always on are dying\n>and\n>will not be coming back. Not a single person I know uses them anymore,\n>they\n>have been wiped out in favour of laptops. This is why, given the tiny\n>size\n>of the bitcoin core development team, I do not think it makes sense to\n>spend precious coding hours chasing this goal.\n\nYour social group is weird.\n\nNearly every coworker at my previous job had a tower computer at work and at home. Equally in my nontechnical social group lots of people, a significant minority if not majority, have Apple and PC desktops hooked up to large monitors at home for media production and games. Those who don't more often than not have laptops used as desktops, sitting in one place 95% of the time and left on.\n\nPeople have found it most efficient to work at a static desk for centuries - that's not going away. Of course we're seeing desktop usage and sales falling, but that's only because previously the mobile usage was forced into suboptimal options by technical realities. The trend will bottom out a long way from zero.\n\nBesides, even if just 1% of bitcoin users had a machine they left on that could usefully contribute to the network it would still vastly outweigh the much smaller percentage who would run nodes on expensive hosted capacity out of the goodness of their hearts. If we educated users about the privacy advantages of full nodes and gave them software that automatically contributed back within defined limits we'd have tens of thousands more useful nodes in the exact same way that user friendly filesharing software has lead to millions of users contributing bandwidth to filesharing networks. Similarly take advantage of the fault tolerance inherent in what we're doing and ensure that our software can shrug off nodes with a few % of downtime - certainly possible.\n\nOf course, this doesn't fit in the business plans of those who might want to run full nodes to data mine and deanonymize users for marketing, tax collection, and law enforcement - one of the few profitable things to do with a full node - but screw those people.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRmVPMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhYb9B/0QWgQusFrQoPfYIzig\nvpeo9sQgHAfA3gPYdqDLTtlaTgt8w3oP+/N46+Pi3lEphhCusXstzAFxi6c0XXsk\ns96l9MqrUCZu55oEj1wZP0LJQx1uyUdevFv9bmocG5+94jBvGIoy3JZ3iQg+nNjL\nuE9FpTnL43VOZ0WI9g6pXIE6XX6CxTx56tcxla4LTTypA1DijXa9MyYGOfYxXdPJ\nw7jiRKl6Ijb3twP8+pX07GSIlL9yP7bESydnwyzwEo/RxAJxPmUpLuxluQ5DKTNY\nG9TtwCpT+c6g5nXOxkI31XRcDuzhT+2kEhiDA6Neu2YNGrnyQx2WL6XuZNhi8nKB\nIOMm\n=rwGV\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-10T07:10:36",
                "message_text_only": "You ask why people would install this ?\n\nI find it is odd that we who hold the key to instant machine to machine micro payments do not use it to incentivise committing resources to the network.\nWhat about serving archive blocks to peers paying for it ?\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 10.04.2014, at 08:50, Wladimir <laanwj at gmail.com> wrote:\n> The only drawback would be that initially, people wouldn't know why or when to install this, hence my suggestion to pack it with wallets...\n> \n> Wladimir\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/251ef004/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/251ef004/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-10T09:17:28",
                "message_text_only": ">\n> I find it is odd that we who hold the key to instant machine to machine\n> micro payments do not use it to incentivise committing resources to the\n> network.\n>\n\nIt's not a new idea, obviously, but there are some practical consequences:\n\n1) To pay a node for serving, you have to have bitcoins. To get bitcoins,\nyou need to sync with the network via a node. Catch 22.\n\n2) If some nodes choose to charge and others choose to not charge, a smart\nwallet will always use the free nodes. In the absence of any global load\nbalancing algorithms, this would lead to the free nodes getting overloaded\nand collapsing whilst the for-pay nodes remain silent.\n\n3) The only payment channel implementations today are bitcoinj's (Java) and\none written by Jeff in Javascript. There are no C++ implementations. And as\nMatt and I can attest to, doing a real, solid, fully debugged\nimplementation that's integrated into a real app is .... a lot of work.\n\nI still think the lowest hanging fruit is basic, boring optimisations\nrather than architectural rethinks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/47c486d0/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-10T09:39:07",
                "message_text_only": "I know the idea is not new. Just bringing it up to emphasize that if we don\u2019t use it how could we expect other networks using it.\nMachine to machine micro payments could become the killer application for Bitcoin.\n\n1) There is no catch 22 as there are plenty of ways getting bitcoin without bootstrapping a full node.\n\n2) let markets work out and not speculate what would happen.\n\n3) Serving archive bolcks does not have to be part of core but could be a distinct service written in a language of your choice using new protocol.\n\nAs mentioned earlier I am for a stripped down core that does nothing else than consensus and stores nothing else needed for that task and offering SPV api to the wallets.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 10.04.2014, at 11:17, Mike Hearn <mike at plan99.net> wrote:\n\n> I find it is odd that we who hold the key to instant machine to machine micro payments do not use it to incentivise committing resources to the network.\n> \n> It's not a new idea, obviously, but there are some practical consequences:\n> \n> 1) To pay a node for serving, you have to have bitcoins. To get bitcoins, you need to sync with the network via a node. Catch 22.\n> \n> 2) If some nodes choose to charge and others choose to not charge, a smart wallet will always use the free nodes. In the absence of any global load balancing algorithms, this would lead to the free nodes getting overloaded and collapsing whilst the for-pay nodes remain silent.\n> \n> 3) The only payment channel implementations today are bitcoinj's (Java) and one written by Jeff in Javascript. There are no C++ implementations. And as Matt and I can attest to, doing a real, solid, fully debugged implementation that's integrated into a real app is .... a lot of work.\n> \n> I still think the lowest hanging fruit is basic, boring optimisations rather than architectural rethinks.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/2fb654ae/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/2fb654ae/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-10T10:40:37",
                "message_text_only": ">\n> 1) There is no catch 22 as there are plenty of ways getting bitcoin\n> without bootstrapping a full node.\n>\n\nI think I maybe wasn't clear. To spend coins you need transaction data.\nToday, the dominant model is that people get that data by scanning the\nblock chain. If you can obtain the transaction data without doing that\nthen, either:\n\n1) Someone is doing chain scanning for free. See my point about \"why pay if\nyou can get it for free\".\n\n2) You got your tx data direct from the person you who sent you the funds,\nperhaps via the payment protocol. This would resolve the catch 22 by\nallowing you to spend bitcoins without actually having talked to the P2P\nnetwork first, but we're a loooooong way from this world.\n\nAnd that's it. I don't think there are any other ways to get the tx data\nyou need. Either someone gives it to you in the act of spending, or someone\nelse gives it away for free, undermining the charge-for-the-p2p-network\nmodel.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/1862e335/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-10T10:44:32",
                "message_text_only": "Thanks, Peter and you convinced me. I run away with a thought.\n\nIt\u2019d be great to find a spot to deploy payment channels, but I agree this is not it.\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 10.04.2014, at 12:40, Mike Hearn <mike at plan99.net> wrote:\n\n> 1) There is no catch 22 as there are plenty of ways getting bitcoin without bootstrapping a full node.\n> \n> I think I maybe wasn't clear. To spend coins you need transaction data. Today, the dominant model is that people get that data by scanning the block chain. If you can obtain the transaction data without doing that then, either:\n> \n> 1) Someone is doing chain scanning for free. See my point about \"why pay if you can get it for free\".\n> \n> 2) You got your tx data direct from the person you who sent you the funds, perhaps via the payment protocol. This would resolve the catch 22 by allowing you to spend bitcoins without actually having talked to the P2P network first, but we're a loooooong way from this world.\n> \n> And that's it. I don't think there are any other ways to get the tx data you need. Either someone gives it to you in the act of spending, or someone else gives it away for free, undermining the charge-for-the-p2p-network model.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/57f54465/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/57f54465/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-10T11:36:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 10 April 2014 06:44:32 GMT-04:00, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>Thanks, Peter and you convinced me. I run away with a thought.\n>\n>It\u2019d be great to find a spot to deploy payment channels, but I agree\n>this is not it.\n\nNo problem!\n\nI'm sure we'll see payment channels implemented sooner or later\nthe form of \"hub and spoke\" payment networks. The idea there is you have one or more centralised hubs who in turn have payment channels setup to and from payors and payees. So long as the person you want to pay is connected to the same hub as you are, or in more advanced versions connected via a ripple style chain, you can push payment to the hub and get proof they did the same for the recipient. Your loss is always limited to the incremental payment amount and payment is essentially instant.\n\nOf course, it's got some disadvantages compared to standard bitcoin transactions - its less decentralised - but when compared to other forms of off-chain payment in most situations its a strict improvement, and having the capability available is always a strict improvement. Like fidelity bonded banks the trust required in the hubs is low enough that with some minor effort applied to anti-DoS you could probably get away with using even hubs run by anonymous actors, making the centralisation less important. (hubs are essentially interchangeable) Unlike pure fidelity bonded banks the effort required to build this is relatively minor!\n\nYou can even combine it with chaum tokens for anonymity. You'll want to hold the tokens for some amount of time to thwart timing analysis, leaving you somewhat vulnerable to theft, but in that case fidelity bonded banking principles can be applied. Other than that case the idea is probably made obsolete by micropayment hubs.\n\nRegulatory issues will be interesting... If you wind up with a few central payment hubs, without chaum tokens, those hubs learn all details about every transaction made. Obviously if a big actor like BitPay implemented this there would be a lot of pressure on them to make those records available to law enforcement and tax authorities, not to mention marketing and other data mining. Equally I suspect that if an alternative more decentralised version was implemented there would be strong government pressure for those approved hubs to not interoperate with the decentralised hubs, and equally for merchants to not accept payment from the decentralised hubs.\n\nBut all the same, if widely implemented this reduces pressure to raise the block size enormously, keeping the underlying system decentralised. So the net effect is probably positive regardless.\n\nOh yeah, credit goes to Mike Hearn for the payment channels, and if I'm correct, for the hub concept as well.\n\nAmir: You should think about adding the above to dark wallet. It'd be good if the protocols are implemented in an open and decentralised fashion first, prior to vendor lock in.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRoIlMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhW26B/9A9OtYjoSHo620XZzF\nVqfnnVFCPr3DpD/HuT3JYhF1kkL2vTt5wkRIHmHmfJ29Sduj8St7EFiLOyUg2mvt\nq9heZgzCnqxLJm9zMiiQnb3Y/plvhTLfaONnHI+OPSfrABL6DA04nEe8OBPuFfv/\nNowJ74DP/65YBq3EqbqG0dJExKm1BhdrEpWNq0v5YoCVuEYkWgFHL8SdRHnfFyxA\nXTkP8avzlG82r98k55IrV0O/6VQNHjE0+xF4EHjEYBacy6OwlpEYeLrqx/VDAQ5R\nRufXeAltNZI0tzLQ8nY0aMBH3YFxF0+14/sbmOAtmnD6EW49gEcV9MnSJc5ct4m7\nSzq5\n=aC39\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-10T11:45:16",
                "message_text_only": ">\n> Oh yeah, credit goes to Mike Hearn for the payment channels, and if I'm\n> correct, for the hub concept as well.\n>\n\nActually, the design is from Satoshi and Matt did most of the\nimplementation work last year during a Google internship. Though I ended up\ndoing a lot of work on it too. We actually got pretty far: there was\nAndroid UI for it and a couple of apps we coded up. I wish we could have\npushed it over the finishing line and got real world usage. Hopefully we\ncan return to it someday soon.\n\nI think the hub/spoke concept was invented by goldsmiths in 16th century\nItaly, as they started handing pieces of paper across their benches, or\n*bancos* in Italian   :-)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/662c5b53/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-10T11:52:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 10 April 2014 07:45:16 GMT-04:00, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> Oh yeah, credit goes to Mike Hearn for the payment channels, and if\n>I'm\n>> correct, for the hub concept as well.\n>>\n>\n>Actually, the design is from Satoshi and Matt did most of the\n>implementation work last year during a Google internship.\n\nAh right, of course. Along those lines we should credit Jeremy Spilman (?) for figuring out how to get rid of the dependency on nSequence, makimg the protocol trust-free.\n\nI do recall it having an issue with malleability, semi-fixed with the P2SH trick. Be good to clear that up for good for Pieter's proposed malleability patch.\n\n>Though I\n>ended up\n>doing a lot of work on it too. We actually got pretty far: there was\n>Android UI for it and a couple of apps we coded up. I wish we could\n>have\n>pushed it over the finishing line and got real world usage. Hopefully\n>we\n>can return to it someday soon.\n>\n>I think the hub/spoke concept was invented by goldsmiths in 16th\n>century\n>Italy, as they started handing pieces of paper across their benches, or\n>*bancos* in Italian   :-)\n\n...and only took another five hundred years for math to catch up and make it trust free, modulo miner centralisation!\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRoYCMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhdNMB/9zFBT3nFSkasHkMVW8\n01pE/VYrclH5BsxANakOqfb57Rprc4xue9H4AuppqAlIo/i/gYtOyoDy9y8oQDmC\nYRiM6K5+bqUH8uC/Rjz1AASBrnb3zAasqCJlklheb5nP3+EoLpKNJ04Brk8rnlqp\nCMO5GktE43r9buYL9MOMXHanB523wRmNV8JjpEF+y5tPYe9YW7rsdmpjX8F8sRga\nPE1MMNy43lctoej4tR0iSBfK2ZNudsz7PdzW9+4Gvpc4NDMHp5O4JwhX/vPbSyyC\n+Or1BvPKe58zVSi5kBi7AJEeFXasfuKpwBwT9r2CGmjvI62ESmkj5M9eqcb4i8Yy\ni2Zr\n=E4NH\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-10T09:47:41",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 10 April 2014 05:17:28 GMT-04:00, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> I find it is odd that we who hold the key to instant machine to\n>machine\n>> micro payments do not use it to incentivise committing resources to\n>the\n>> network.\n>>\n>\n>It's not a new idea, obviously, but there are some practical\n>consequences:\n\nYou're both missing a more important issue: a core security assumption of bitcoin is that information is so easy to spread that censorship of it becomes impractical. If we're at the point where nodes are charging for their data we've failed that assumption.\n\nMore concretely, if my business is charging for block chain data and I can make a profit doing so via micro payments I have perverse incentives to drive away my competitors. If I give a peer a whole block they can sell access to that information in turn. Why would I make it easy for them if I don't have too?\n\nAnyway, much of this discussion seems to stem from the misconception that contributing back to the network is a binary all or nothing thing - it's not. Over a year ago I myself was lamenting how I and the other \"bitcoin-wizards\" working on scalability had quickly solved every scaling problem *but* how to make it possible to scale up and keep mining decentralised.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRmi9MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhT/BB/98DudTV85hmruk0WRS\nxVt7gGK6DJ2Isc7iJE09i9wSQc/PbHu7rZ2MYPreOdVzRmlHYhOV2ShnZaZJ7A9g\nqB8pwy1wVrZgbrFeXXOLegNxGF2Xzc8OtL1E0bkNtTUUkuPIvT3UV4xn/Z+UZToR\nXImXpfakfJvyRH80cbMNu4xG/t7Ym4K63nEpCCdsEKNm5a1vHTNRTNfGYMC1wrSV\nXI3boZk7BQjqFDZADnonUU9zQ1WOmpdaVBYm+Xtgc+HXl3QODLcwGCY9hIRvaxek\nL+IYX9yTVbgngDGy70BYG4ekWxvMtNzRU+9HG5DgA1/Er9r1KIaf/98xiFR7RVB4\nYfia\n=34aD\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-09T18:04:46",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 9 April 2014 13:50:03 GMT-04:00, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>Block header has to be available in SPV and also in an UTXO only\n>storing core node, so why not serve it if bandwith allows.\n>\n>Serving any additional information like known peer adresses or known\n>full blocks is certainly beneficial and should be offered if at hand.\n\nBig security advantages too. For instance if an attacker hacks, say, 10\u2105 of hashing power the next step for them to attack SPV clients is to try to Sybil attack them so they won't find out about the longer chain. The fewer providers of block chain data there are out there the easier that attack is - just simultaneously DoS a bunch of nodes, perhaps by a low-bandwidth exploit like the bloom io or division by zero DoS attacks. This is much harder to pull off if every SPV client is passing around block headers.\n\nSimilarly by passing around full blocks the attacker has a harder time knocking other miners off the network. Regardless of whether or not a miner's peers are fully validating chain data they still have the data they need to mine the next block and thus extend the longest correct chain.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRYu+MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwheuQCADUyClLOLP1xpG1000l\nuzcfPTZuIXTpzOAmYHKs/MSb6mph/Shsu0/94eW7npQNSVeZC8wQQZ1oFQ9j1GJc\nSKViYJfn5yMdNvMkaWazhC0r3jxxF0AI7oy2KlnSjasfczfOQuYICJadTCwvUHrb\nGrKVDbgsKNzZYYKn86vF4hsLwtJN4moeqX85TYN1DC7//7hgNywA73Xt2/gdwfqe\nLOsD4nS7mUQObQd6TcLwXDDNEGTrdS572jdYH5sykwZjPH+wqwcm2WKTnIULsJR0\nOwGUi505AKJJnLcEmZ/kGbCmKB+xJ5kExjlExtcUPrJlc+xqubhnnGCMjBiGCXSY\nkYCK\n=HXRZ\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-09T16:03:08",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nTwo talking points for said developers yo their user re: \"Why use a full node?\":\n\n1) It's more private. Bloom filters gives away quite accurate statistical information about what coins you own to whom ever you happen to be connected too. An attacker can easily use this to deanonymize you even if you don't reuse addresses; Tor does not help much against this attack.\n\n2) It's more secure. SPV means you are trusting miners to do validation for you. With the extremely high degree of mining centralisation we currently have it would only take one or two pools getting hacked for an attacker to be able to get enough hashing power to easily fool your SPV wallet into accepting a fake transaction.\n\n\nAs for what we can offer those developers, partial UTXO set mode would be a great long term goal.\n\nOn 9 April 2014 11:29:32 GMT-04:00, Wladimir <laanwj at gmail.com> wrote:\n>Hello,\n>\n>This is primarily aimed at developers of SPV wallets.\n>\n>The recently reported decrease in number of full nodes could have\n>several\n>reasons, one of them that less people are running Bitcoin Core for the\n>wallet because the other wallets are getting ahead in both features and\n>useability.\n>\n>It's great to see innovation in wallets, but it's worrying that the\n>number\n>of full nodes decreases.\n>\n>It may be that lots of people would support the network by running a\n>full\n>node, but don't want to go through the trouble of installing bitcoin\n>core\n>separately (and get confused because it's a wallet, too).\n>\n>Hence I'd like to explore the idea of adding an option to popular SPV\n>wallets, to spin a bitcoind process in the background. This could be\n>pretty\n>much transparent to the user - it would sync in the background, the\n>wallet\n>could show statistics about the node, but is not dependent on it.\n>\n>In exchange the user would get increased (full node level) security, as\n>the\n>SPV wallet would have a local trusted node.\n>\n>Does this sound like a good idea?\n>\n>Is there any way that Bitcoin Core can help to accomedate this\n>'embedded'\n>usage? Specific Interfaces, special builds - maybe add a walletless\n>bitcoind build to gitian - bindings, dlls, etc?\n>\n>Wladimir\n>\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>Put Bad Developers to Shame\n>Dominate Development with Jenkins Continuous Integration\n>Continuously Automate Build, Test & Deployment\n>Start a new project now. Try Jenkins in the cloud.\n>http://p.sf.net/sfu/13600_Cloudbees\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRW88MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhUIBB/4tVMqj7NEHFekUgv7O\nhKgUNreD5RQbVLjiG9BIKWTdOrD79qNk66QVxuH7oOCypMLCdT2ctdvsvfH8ncdG\nGVpTcbXL39vEk9qkGN4wY2++pKn5unqKg1C99YbJAcC62XMFJjjES2XiwyKGsYmb\nIplOEN7BXh9KE01f7gPh4nZqtqsb6XnlLQGjjRWGlX/oIMphUOdfMtBdWql59bx3\nwnHUDc1pAv2bCcyiUI/nOoyNyZixZC16wXoM2pnAJ9PhPbd79lmiKVmjNmrqhu17\nHIHlKXk6YD8JVlHD8NoaC1GUwG39jmt5nk1vsfvvesXF+c0VqctVNIitVkvqLNj+\nmwXd\n=4b5H\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-09T17:33:19",
                "message_text_only": ">\n> 1) It's more private. Bloom filters gives away quite accurate statistical\n> information about what coins you own to whom ever you happen to be\n> connected too. An attacker can easily use this to deanonymize you even if\n> you don't reuse addresses; Tor does not help much against this attack.\n>\n\nThere is also an option to download everything, but do only a very basic\nsurface validation (without keeping track of UTXOs).\nYou do not need a full node for that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/120496bf/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-09T17:38:21",
                "message_text_only": "On Wed, Apr 9, 2014 at 7:33 PM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n\n> 1) It's more private. Bloom filters gives away quite accurate statistical\n>> information about what coins you own to whom ever you happen to be\n>> connected too. An attacker can easily use this to deanonymize you even if\n>> you don't reuse addresses; Tor does not help much against this attack.\n>>\n>\n> There is also an option to download everything, but do only a very basic\n> surface validation (without keeping track of UTXOs).\n> You do not need a full node for that.\n>\n\nYou may not *need* a full node, but the point of this (which I clearly\nexplained in my opening post) would be to support the network.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/6371ea18/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-09T17:38:28",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\n\n\nOn 9 April 2014 13:33:19 GMT-04:00, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n>>\n>> 1) It's more private. Bloom filters gives away quite accurate\n>statistical\n>> information about what coins you own to whom ever you happen to be\n>> connected too. An attacker can easily use this to deanonymize you\n>even if\n>> you don't reuse addresses; Tor does not help much against this\n>attack.\n>>\n>\n>There is also an option to download everything, but do only a very\n>basic\n>surface validation (without keeping track of UTXOs).\n>You do not need a full node for that.\n\nYup, that's part of the idea behind partial UTXO set mode. You could have a model where your node starts with no data at all, and hence SPV security. You tell your node what the oldest key birthday is that your interested in and it downloads the full block chain starting at that date, giving you your txs w/ SPV security and full node privacy.\n\nWhat partial UTXO would add on top of that is then your node would gradually scan backwards until block zero, at which point it has a complete UTXO set and is a full node.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCgA6BQJTRYWUMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhaHEB/0Q0P544nJrtapnzogG\nQpREeBlwR5I8fZ+BCbNcAk6afk9KLOFIsLBW0bFvFXfSO1TiyCLMezLkvhuDC5lM\nvrCBKdmaXhwMaTGppgFNl9adu8yBRQ6I2BN21hQejyfmCvHTsoN6u1oeYccL+K+D\nlTK2dMCmXLixcQIJjS9sGA8/TXjmiY65RzIdXl0UHeV4JUtRREMUB1HeXJWCxMEt\n4KQXb5tk21vZ+BTf9kRirnCtFT+Wudyo73M2XGKbR3mzHc2jY+RjEb71J0hUmh8s\nh4kVhuMMkEFjNUwU017kEYQpmXMMRwCyUydc7BoV6hZXnUx4ROTpc6pDv2IZkeLB\nbGiE\n=adiR\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Kevin",
                "date": "2014-04-09T18:35:33",
                "message_text_only": "On 4/9/2014 11:29 AM, Wladimir wrote:\n> Hello,\n>\n> This is primarily aimed at developers of SPV wallets.\n>\n> The recently reported decrease in number of full nodes could have \n> several reasons, one of them that less people are running Bitcoin Core \n> for the wallet because the other wallets are getting ahead in both \n> features and useability.\n>\n> It's great to see innovation in wallets, but it's worrying that the \n> number of full nodes decreases.\n>\n> It may be that lots of people would support the network by running a \n> full node, but don't want to go through the trouble of installing \n> bitcoin core separately (and get confused because it's a wallet, too).\n>\n> Hence I'd like to explore the idea of adding an option to popular SPV \n> wallets, to spin a bitcoind process in the background. This could be \n> pretty much transparent to the user - it would sync in the background, \n> the wallet could show statistics about the node, but is not dependent \n> on it.\n>\n> In exchange the user would get increased (full node level) security, \n> as the SPV wallet would have a local trusted node.\n>\n> Does this sound like a good idea?\n>\n> Is there any way that Bitcoin Core can help to accomedate this \n> 'embedded' usage? Specific Interfaces, special builds - maybe add a \n> walletless bitcoind build to gitian - bindings, dlls, etc?\n>\n> Wladimir\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nI personally like the ida.  Are you talking about a flag that could \ntoggle this \"in the background\" mode or recoding for in the background use?\n\n\n-- \nKevin\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/a35b1353/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoind-in-background mode for SPV wallets",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Laszlo Hanyecz",
                "Natanael",
                "Tamas Blummer",
                "Thomas Voegtlin",
                "Wladimir",
                "Brian Hoffman",
                "slush",
                "Mike Hearn",
                "Peter Todd",
                "Tier Nolan",
                "Kevin",
                "Gregory Maxwell",
                "Alex Mizrahi",
                "Mark Friedenbach",
                "Pieter Wuille",
                "Justus Ranvier"
            ],
            "messages_count": 57,
            "total_messages_chars_count": 106680
        }
    },
    {
        "title": "[Bitcoin-development] Fwd: Bitcoind-in-background mode for SPV wallets",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-04-09T17:35:24",
                "message_text_only": "On Wed, Apr 9, 2014 at 5:42 PM, Brian Hoffman <brianchoffman at gmail.com>wrote:\n\n> How would this affect the user in terms of disk storage? They're going to\n> get hammered on space constraints aren't they? If it's not required how\n> likely are users to enable this?\n>\n\nIf they make the (conscious) choice to run a full node they will require\nthe bandwidth and disk space to run it.\n\nThe difference with running Bitcoin Core as wallet will be that they can\nchoose their own wallet to go with the full node.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/5b28b814/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Bitcoind-in-background mode for SPV wallets",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 699
        }
    },
    {
        "title": "[Bitcoin-development] Jenkins pull-tester",
        "thread_messages": [
            {
                "author": "Drak",
                "date": "2014-04-09T19:07:32",
                "message_text_only": "I would like to set up my own bitcoin pull-tester on Jenkins. Are there any\ninstructions or guidance written anywhere?\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140409/c72690f9/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Jenkins pull-tester",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Drak"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 307
        }
    },
    {
        "title": "[Bitcoin-development] Chain pruning",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-04-10T11:37:58",
                "message_text_only": "Chain pruning is probably a separate thread, changing subject.\n\n\n> Reason is that the actual blocks available are likely to change frequently\n> (if\n> you keep the last week of blocks\n\n\nI doubt anyone would specify blocks to keep in terms of time. More likely\nit'd be in terms of megabytes, as that's the actual resource constraint on\nnodes. Given a block size average it's easy to go from megabytes to\nnum_blocks, so I had imagined it'd be a new addr field that specifies how\nmany blocks from the chain head are stored. Then you'd connect to some\nnodes and if they indicate their chain head - num_blocks_stored is higher\nthan your current chain height, you'd do a getaddr and go looking for nodes\nthat are storing far enough back.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/97cd4703/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-10T11:57:00",
                "message_text_only": "On Thu, Apr 10, 2014 at 1:37 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Chain pruning is probably a separate thread, changing subject.\n>\n>\n>> Reason is that the actual blocks available are likely to change\n>> frequently (if\n>> you keep the last week of blocks\n>\n>\n> I doubt anyone would specify blocks to keep in terms of time. More likely\n> it'd be in terms of megabytes, as that's the actual resource constraint on\n> nodes.\n>\n\nWell with bitcoin, (average) time, number of blocks and (maximum) size are\nall related to each other so it doesn't matter how it is specified, it's\nalways possible to give estimates of all three.\n\nAs for implementation it indeed makes most sense to work with block ranges.\n\n\n> Given a block size average it's easy to go from megabytes to num_blocks,\n> so I had imagined it'd be a new addr field that specifies how many blocks\n> from the chain head are stored. Then you'd connect to some nodes and if\n> they indicate their chain head - num_blocks_stored is higher than your\n> current chain height, you'd do a getaddr and go looking for nodes that are\n> storing far enough back.\n>\n\nThis assumes that nodes will always be storing the latest blocks. For\ndynamic nodes that take part in the consensus this makes sense.\n\nJust wondering: Would there be a use for a [static] node that, say, always\nserves only the first 100000 blocks? Or, even, a static range like block\n100000 - 200000?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/d9a682b3/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-10T12:10:35",
                "message_text_only": "On Thu, Apr 10, 2014 at 4:57 AM, Wladimir <laanwj at gmail.com> wrote:\n> Just wondering: Would there be a use for a [static] node that, say, always\n> serves only the first 100000 blocks? Or, even, a static range like block\n> 100000 - 200000?\n\nThe last time we discussed this sipa collected data based on how often\nblocks were feteched as a function of their depth and there was a huge\nincrease for recent blocks that didn't really level out until 2000\nblocks or so\u2014 presumably its not uncommon for nodes to be offline for\na week or two at a time.\n\nBut sure I could see a fixed range as also being a useful contribution\nthough I'm struggling to figure out what set of constraints would\nleave a node without following the consensus?   Obviously it has\nbandwidth if you're expecting to contribute much in serving those\nhistoric blocks... and verifying is reasonably cpu cheap with fast\necdsa code.   Maybe it has a lot of read only storage?\n\nI think it should be possible to express and use such a thing in the\nprotocol even if I'm currently unsure as to why you wouldn't do 100000\n- 200000  _plus_ the most recent 144 that you were already keeping\naround for reorgs.\n\nIn terms of peer selection, if the blocks you need aren't covered by\nthe nodes you're currently connected to I think you'd prefer to seek\nnode nodes which have the least rare-ness in the ranges they offer.\nE.g. if you're looking for a block 50 from the tip,  you're should\nprobably not prefer to fetch it from someone with blocks 100000-150000\nif its one of only 100 nodes that has that range."
            },
            {
                "author": "Wladimir",
                "date": "2014-04-10T14:19:25",
                "message_text_only": "On Thu, Apr 10, 2014 at 2:10 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> But sure I could see a fixed range as also being a useful contribution\n> though I'm struggling to figure out what set of constraints would\n> leave a node without following the consensus?   Obviously it has\n> bandwidth if you're expecting to contribute much in serving those\n> historic blocks... and verifying is reasonably cpu cheap with fast\n> ecdsa code.   Maybe it has a lot of read only storage?\n>\n\nThe use case is that you could burn the node implementation + block data +\na live operating system on a read-only medium. This could be set in stone\nfor a long time.\n\nThere would be no consensus code to keep up to date with protocol\ndevelopments, because it doesn't take active part in it.\n\nI don't think it would be terribly useful right now, but it could be useful\nwhen nodes that host all history become rare. It'd allow distributing\n'pieces of history' in a self-contained form.\n\n\n> I think it should be possible to express and use such a thing in the\n> protocol even if I'm currently unsure as to why you wouldn't do 100000\n> - 200000  _plus_ the most recent 144 that you were already keeping\n> around for reorgs.\n>\n\nYes, it would be nice to at least be able to express it, if it doesn't make\nthe protocol too finicky.\n\nIn terms of peer selection, if the blocks you need aren't covered by\n> the nodes you're currently connected to I think you'd prefer to seek\n> node nodes which have the least rare-ness in the ranges they offer.\n> E.g. if you're looking for a block 50 from the tip,  you're should\n> probably not prefer to fetch it from someone with blocks 100000-150000\n> if its one of only 100 nodes that has that range.\n>\n\nThat makes sense.\n\nIn general, if you want a block 50 from the tip, it would be best to\nrequest it from a node that only serves the last N (N>~50) blocks, and not\na history node that could use the same bandwidth to serve earlier, rarer\nblocks to others.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/dc261288/attachment.html>"
            },
            {
                "author": "Brian Hoffman",
                "date": "2014-04-10T16:23:40",
                "message_text_only": "This is probably just noise, but what if nodes could compress and store\nearlier transaction sets (archive sets) and serve them up conditionally. So\nif there were let's say 100 archive sets of (10,000 blocks) you might have\n5 open at any time when you're an active archive node while the others sit\non your disk compressed and unavailable to the network. This would allow\nnodes to have all full transactions but conserve disk space and network\nactivity since they wouldn't ever respond about every possible transaction.\n\nThis could be based on a rotational request period, based on request count\nor done periodically. Once their considered active they would be expected\nto uncompress a set and make it available to the network. Clients would\nhave to piece together archive sets from different nodes, but if there\nweren't enough archive nodes to cover the chain they could ratchet up the\namount of required open archive sets when your node was active.\n\nI fully expect to have my idea trashed, but I'm dipping toes in the waters\nof contribution.\n\n\n\n\nOn Thu, Apr 10, 2014 at 10:19 AM, Wladimir <laanwj at gmail.com> wrote:\n\n>\n> On Thu, Apr 10, 2014 at 2:10 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> But sure I could see a fixed range as also being a useful contribution\n>> though I'm struggling to figure out what set of constraints would\n>> leave a node without following the consensus?   Obviously it has\n>> bandwidth if you're expecting to contribute much in serving those\n>> historic blocks... and verifying is reasonably cpu cheap with fast\n>> ecdsa code.   Maybe it has a lot of read only storage?\n>>\n>\n> The use case is that you could burn the node implementation + block data +\n> a live operating system on a read-only medium. This could be set in stone\n> for a long time.\n>\n> There would be no consensus code to keep up to date with protocol\n> developments, because it doesn't take active part in it.\n>\n> I don't think it would be terribly useful right now, but it could be\n> useful when nodes that host all history become rare. It'd allow\n> distributing 'pieces of history' in a self-contained form.\n>\n>\n>> I think it should be possible to express and use such a thing in the\n>> protocol even if I'm currently unsure as to why you wouldn't do 100000\n>> - 200000  _plus_ the most recent 144 that you were already keeping\n>> around for reorgs.\n>>\n>\n> Yes, it would be nice to at least be able to express it, if it doesn't\n> make the protocol too finicky.\n>\n> In terms of peer selection, if the blocks you need aren't covered by\n>> the nodes you're currently connected to I think you'd prefer to seek\n>> node nodes which have the least rare-ness in the ranges they offer.\n>> E.g. if you're looking for a block 50 from the tip,  you're should\n>> probably not prefer to fetch it from someone with blocks 100000-150000\n>> if its one of only 100 nodes that has that range.\n>>\n>\n> That makes sense.\n>\n> In general, if you want a block 50 from the tip, it would be best to\n> request it from a node that only serves the last N (N>~50) blocks, and not\n> a history node that could use the same bandwidth to serve earlier, rarer\n> blocks to others.\n>\n> Wladimir\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/34295a52/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-10T16:28:08",
                "message_text_only": "Suggestions always welcome!\n\nThe main problem with this is that the block chain is mostly random bytes\n(hashes, keys) so it doesn't compress that well. It compresses a bit, but\nnot enough to change the fundamental physics.\n\nHowever, that does not mean the entire chain has to be stored on expensive\nrotating platters. I've suggested that in some star trek future where the\nchain really is gigantic, it could be stored on tape and spooled off at\nhigh speed. Literally a direct DMA from tape drive to NIC. But we're not\nthere yet :)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/f4ecb19c/attachment.html>"
            },
            {
                "author": "Brian Hoffman",
                "date": "2014-04-10T16:47:50",
                "message_text_only": "Looks like only about ~30% disk space savings so I see your point. Is there\na critical reason why blocks couldn't be formed into \"superblocks\" that are\nchained together and nodes could serve a specific superblock, which could\nbe pieced together from different nodes to get the full blockchain? This\nwould allow participants with limited resources to serve full portions of\nthe blockchain rather than limited pieces of the entire blockchain.\n\n\nOn Thu, Apr 10, 2014 at 12:28 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> Suggestions always welcome!\n>\n> The main problem with this is that the block chain is mostly random bytes\n> (hashes, keys) so it doesn't compress that well. It compresses a bit, but\n> not enough to change the fundamental physics.\n>\n> However, that does not mean the entire chain has to be stored on expensive\n> rotating platters. I've suggested that in some star trek future where the\n> chain really is gigantic, it could be stored on tape and spooled off at\n> high speed. Literally a direct DMA from tape drive to NIC. But we're not\n> there yet :)\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/0927179b/attachment.html>"
            },
            {
                "author": "Ricardo Filipe",
                "date": "2014-04-10T16:54:18",
                "message_text_only": "that's what blockchain pruning is all about :)\n\n2014-04-10 17:47 GMT+01:00 Brian Hoffman <brianchoffman at gmail.com>:\n> Looks like only about ~30% disk space savings so I see your point. Is there\n> a critical reason why blocks couldn't be formed into \"superblocks\" that are\n> chained together and nodes could serve a specific superblock, which could be\n> pieced together from different nodes to get the full blockchain? This would\n> allow participants with limited resources to serve full portions of the\n> blockchain rather than limited pieces of the entire blockchain.\n>\n>\n> On Thu, Apr 10, 2014 at 12:28 PM, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> Suggestions always welcome!\n>>\n>> The main problem with this is that the block chain is mostly random bytes\n>> (hashes, keys) so it doesn't compress that well. It compresses a bit, but\n>> not enough to change the fundamental physics.\n>>\n>> However, that does not mean the entire chain has to be stored on expensive\n>> rotating platters. I've suggested that in some star trek future where the\n>> chain really is gigantic, it could be stored on tape and spooled off at high\n>> speed. Literally a direct DMA from tape drive to NIC. But we're not there\n>> yet :)\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Brian Hoffman",
                "date": "2014-04-10T16:56:03",
                "message_text_only": "Okay...will let myself out now ;P\n\n\nOn Thu, Apr 10, 2014 at 12:54 PM, Ricardo Filipe\n<ricardojdfilipe at gmail.com>wrote:\n\n> that's what blockchain pruning is all about :)\n>\n> 2014-04-10 17:47 GMT+01:00 Brian Hoffman <brianchoffman at gmail.com>:\n> > Looks like only about ~30% disk space savings so I see your point. Is\n> there\n> > a critical reason why blocks couldn't be formed into \"superblocks\" that\n> are\n> > chained together and nodes could serve a specific superblock, which\n> could be\n> > pieced together from different nodes to get the full blockchain? This\n> would\n> > allow participants with limited resources to serve full portions of the\n> > blockchain rather than limited pieces of the entire blockchain.\n> >\n> >\n> > On Thu, Apr 10, 2014 at 12:28 PM, Mike Hearn <mike at plan99.net> wrote:\n> >>\n> >> Suggestions always welcome!\n> >>\n> >> The main problem with this is that the block chain is mostly random\n> bytes\n> >> (hashes, keys) so it doesn't compress that well. It compresses a bit,\n> but\n> >> not enough to change the fundamental physics.\n> >>\n> >> However, that does not mean the entire chain has to be stored on\n> expensive\n> >> rotating platters. I've suggested that in some star trek future where\n> the\n> >> chain really is gigantic, it could be stored on tape and spooled off at\n> high\n> >> speed. Literally a direct DMA from tape drive to NIC. But we're not\n> there\n> >> yet :)\n> >\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Put Bad Developers to Shame\n> > Dominate Development with Jenkins Continuous Integration\n> > Continuously Automate Build, Test & Deployment\n> > Start a new project now. Try Jenkins in the cloud.\n> > http://p.sf.net/sfu/13600_Cloudbees\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/10c46b57/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-10T16:59:54",
                "message_text_only": "On Thu, Apr 10, 2014 at 6:47 PM, Brian Hoffman <brianchoffman at gmail.com> wrote:\n> Looks like only about ~30% disk space savings so I see your point. Is there\n> a critical reason why blocks couldn't be formed into \"superblocks\" that are\n> chained together and nodes could serve a specific superblock, which could be\n> pieced together from different nodes to get the full blockchain? This would\n> allow participants with limited resources to serve full portions of the\n> blockchain rather than limited pieces of the entire blockchain.\n\nAs this is a suggestion that I think I've seen come up once a month\nfor the past 3 years, let's try to answer it thoroughly.\n\nThe actual \"state\" of the blockchain is the UTXO set (stored in\nchainstate/ by the reference client). It's the set of all unspent\ntransaction outputs at the currently active point in the block chain.\nIt is all you need for validating future blocks.\n\nThe problem is, you can't just give someone the UTXO set and expect\nthem to trust it, as there is no way to prove that it was the result\nof processing the actual blocks.\n\nAs Bitcoin's full node uses a \"zero trust\" model, where (apart from\none detail: the order of otherwise valid transactions) it never\nassumes any data received from the outside it valid, it HAS to see the\nprevious blocks in order to establish the validity of the current UTXO\nset. This is what initial block syncing does. Nothing but the actual\nblocks can provide this data, and it is why the actual blocks need to\nbe available. It does not require everyone to have all blocks, though\n- they just need to have seen them during processing.\n\nA related, but not identical evolution is merkle UTXO commitments.\nThis means that we shape the UTXO set as a merkle tree, compute its\nroot after every block, and require that the block commits to this\nroot hash (by putting it in the coinbase, for example). This means a\nfull node can copy the chain state from someone else, and check that\nits hash matches what the block chain commits to. It's important to\nnote that this is a strict reduction in security: we're now trusting\nthat the longest chain (with most proof of work) commits to a valid\nUTXO set (at some point in the past).\n\nIn essence, combining both ideas means you get \"superblocks\" (the UTXO\nset is essentially the summary of the result of all past blocks), in a\nway that is less-than-currently-but-perhaps-still-acceptably-validated.\n\n-- \nPieter"
            },
            {
                "author": "Brian Hoffman",
                "date": "2014-04-10T17:06:22",
                "message_text_only": "Ok I think I've got a good understanding of where we're at now. I can\npromise that the next person to waste your time in 30 days will not be me.\nI'm pleasantly surprised to see a community that doesn't kickban newcomers\nand takes the time to explain (re-explain) concepts.\n\nHoping to add *beneficial* thoughts in the future!\n\n\nOn Thu, Apr 10, 2014 at 12:59 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Thu, Apr 10, 2014 at 6:47 PM, Brian Hoffman <brianchoffman at gmail.com>\n> wrote:\n> > Looks like only about ~30% disk space savings so I see your point. Is\n> there\n> > a critical reason why blocks couldn't be formed into \"superblocks\" that\n> are\n> > chained together and nodes could serve a specific superblock, which\n> could be\n> > pieced together from different nodes to get the full blockchain? This\n> would\n> > allow participants with limited resources to serve full portions of the\n> > blockchain rather than limited pieces of the entire blockchain.\n>\n> As this is a suggestion that I think I've seen come up once a month\n> for the past 3 years, let's try to answer it thoroughly.\n>\n> The actual \"state\" of the blockchain is the UTXO set (stored in\n> chainstate/ by the reference client). It's the set of all unspent\n> transaction outputs at the currently active point in the block chain.\n> It is all you need for validating future blocks.\n>\n> The problem is, you can't just give someone the UTXO set and expect\n> them to trust it, as there is no way to prove that it was the result\n> of processing the actual blocks.\n>\n> As Bitcoin's full node uses a \"zero trust\" model, where (apart from\n> one detail: the order of otherwise valid transactions) it never\n> assumes any data received from the outside it valid, it HAS to see the\n> previous blocks in order to establish the validity of the current UTXO\n> set. This is what initial block syncing does. Nothing but the actual\n> blocks can provide this data, and it is why the actual blocks need to\n> be available. It does not require everyone to have all blocks, though\n> - they just need to have seen them during processing.\n>\n> A related, but not identical evolution is merkle UTXO commitments.\n> This means that we shape the UTXO set as a merkle tree, compute its\n> root after every block, and require that the block commits to this\n> root hash (by putting it in the coinbase, for example). This means a\n> full node can copy the chain state from someone else, and check that\n> its hash matches what the block chain commits to. It's important to\n> note that this is a strict reduction in security: we're now trusting\n> that the longest chain (with most proof of work) commits to a valid\n> UTXO set (at some point in the past).\n>\n> In essence, combining both ideas means you get \"superblocks\" (the UTXO\n> set is essentially the summary of the result of all past blocks), in a\n> way that is less-than-currently-but-perhaps-still-acceptably-validated.\n>\n> --\n> Pieter\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/b0cab188/attachment.html>"
            },
            {
                "author": "Paul Rabahy",
                "date": "2014-04-10T18:19:05",
                "message_text_only": "You say UTXO commitments is \"a strict reduction in security\". If UTXO\ncommitments were rolled in as a soft fork, I do not see any new attacks\nthat could happen to a person trusting the committed UTXO + any remaining\nblocks to catch up to the head.\n\nI would imagine the soft fork to proceed similar to the following.\n1. Miners begin including UTXO commitments.\n2. Miners begin rejecting blocks with invalid UTXO commitments.\n3. Miners begin rejecting blocks with no UTXO commitments.\n\nTo start up a fresh client it would follow the following.\n1. Sync headers.\n2. Pick a committed UTXO that is deep enough to not get orphaned.\n3. Sync blocks from commitment to head.\n\nI would argue that a client following this methodology is strictly more\nsecure than SPV, and I don't see any attacks that make it less secure than\na full client. It is obviously still susceptible to a 51% attack, but so is\nthe traditional block chain. I also do not see any sybil attacks that are\nstrengthened by this change because it is not modifying the networking code.\n\nI guess if the soft fork happened, then miners began to not include the\nUTXO commitment anymore, it would lower the overall network hash rate, but\nthis would be self-harming to the miners so they have an incentive to not\ndo it.\n\nPlease let me know if I have missed something.\n\n\nOn Thu, Apr 10, 2014 at 12:59 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n>\n> As this is a suggestion that I think I've seen come up once a month\n> for the past 3 years, let's try to answer it thoroughly.\n>\n> The actual \"state\" of the blockchain is the UTXO set (stored in\n> chainstate/ by the reference client). It's the set of all unspent\n> transaction outputs at the currently active point in the block chain.\n> It is all you need for validating future blocks.\n>\n> The problem is, you can't just give someone the UTXO set and expect\n> them to trust it, as there is no way to prove that it was the result\n> of processing the actual blocks.\n>\n> As Bitcoin's full node uses a \"zero trust\" model, where (apart from\n> one detail: the order of otherwise valid transactions) it never\n> assumes any data received from the outside it valid, it HAS to see the\n> previous blocks in order to establish the validity of the current UTXO\n> set. This is what initial block syncing does. Nothing but the actual\n> blocks can provide this data, and it is why the actual blocks need to\n> be available. It does not require everyone to have all blocks, though\n> - they just need to have seen them during processing.\n>\n> A related, but not identical evolution is merkle UTXO commitments.\n> This means that we shape the UTXO set as a merkle tree, compute its\n> root after every block, and require that the block commits to this\n> root hash (by putting it in the coinbase, for example). This means a\n> full node can copy the chain state from someone else, and check that\n> its hash matches what the block chain commits to. It's important to\n> note that this is a strict reduction in security: we're now trusting\n> that the longest chain (with most proof of work) commits to a valid\n> UTXO set (at some point in the past).\n>\n> In essence, combining both ideas means you get \"superblocks\" (the UTXO\n> set is essentially the summary of the result of all past blocks), in a\n> way that is less-than-currently-but-perhaps-still-acceptably-validated.\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/4ccbfd4d/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-10T18:32:40",
                "message_text_only": "On Thu, Apr 10, 2014 at 8:19 PM, Paul Rabahy <prabahy at gmail.com> wrote:\n> Please let me know if I have missed something.\n\nA 51% attack can make you believe you were paid, while you weren't.\n\nFull node security right now validates everything - there is no way\nyou can ever be made to believe something invalid. The only attacks\nagainst it are about which version of valid history eventually gets\nchosen.\n\nIf you trust hashrate for determining which UTXO set is valid, a 51%\nattack becomes worse in that you can be made to believe a version of\nhistory which is in fact invalid.\n\n-- \nPieter"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-10T20:12:00",
                "message_text_only": "On Thu, Apr 10, 2014 at 7:32 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> If you trust hashrate for determining which UTXO set is valid, a 51%\n> attack becomes worse in that you can be made to believe a version of\n> history which is in fact invalid.\n>\n\nIf there are invalidation proofs, then this isn't strictly true.\n\nIf you are connected to 10 nodes and only 1 is honest, it can send you the\nproof that your main chain is invalid.\n\nFor bad scripts, it shows you the input transaction for the invalid input\nalong with the merkle path to prove it is in a previous block.\n\nFor double spends, it could show the transaction which spent the output.\n\nDouble spends are pretty much the same as trying to spend non-existent\noutputs anyway.\n\nIf the UTXO set commit was actually a merkle tree, then all updates could\nbe included.\n\nBlocks could have extra data with the proofs that the UTXO set is being\nupdated correctly.\n\nTo update the UTXO set, you need the paths for all spent inputs.\n\nIt puts a large load on miners to keep things working, since they have to\nrun a full node.\n\nIf they commit the data to the chain, then SPV nodes can do local checking.\n\nOne of them will find invalid blocks eventually (even if one of the other\nminers don't).\n\n>\n> --\n> Pieter\n>\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/fc6c4fba/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-10T20:29:40",
                "message_text_only": "On Thu, Apr 10, 2014 at 10:12 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n> On Thu, Apr 10, 2014 at 7:32 PM, Pieter Wuille <pieter.wuille at gmail.com>\n> wrote:\n>>\n>> If you trust hashrate for determining which UTXO set is valid, a 51%\n>> attack becomes worse in that you can be made to believe a version of\n>> history which is in fact invalid.\n>\n>\n> If there are invalidation proofs, then this isn't strictly true.\n\nI'm aware of fraud proofs, and they're a very cool idea. They allow\nyou to leverage some \"herd immunity\" in the system (assuming you'll be\ntold about invalid data you received without actually validating it).\nHowever, they are certainly not the same thing as zero trust security\na fully validating node offers.\n\nFor example, a sybil attack that hides the actual best chain + fraud\nproofs from you, plus being fed a chain that commits to an invalid\nUTXO set.\n\nThere are many ideas that make attacks harder, and they're probably\ngood ideas to deploy, but there is little that achieves the security\nof a full node. (well, perhaps a zero-knowledge proof of having run\nthe validation code against the claimed chain tip to produce the known\nUTXO set...).\n-- \nPieter"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-10T19:36:39",
                "message_text_only": "You took the quote out of context:\n\n\"a full node can copy the chain state from someone else, and check that\nits hash matches what the block chain commits to. It's important to\nnote that this is a strict reduction in security: we're now trusting\nthat the longest chain (with most proof of work) commits to a valid\nUTXO set (at some point in the past).\"\n\nThe described synchronization mechanism would be to determine the\nmost-work block header (SPV level of security!), and then sync the UTXO\nset committed to within that block. This is strictly less security than\nbuilding the UTXO set yourself because it is susceptible to a 51% attack\nwhich violates protocol rules.\n\nOn 04/10/2014 11:19 AM, Paul Rabahy wrote:\n> You say UTXO commitments is \"a strict reduction in security\". If UTXO\n> commitments were rolled in as a soft fork, I do not see any new attacks\n> that could happen to a person trusting the committed UTXO + any\n> remaining blocks to catch up to the head.\n> \n> I would imagine the soft fork to proceed similar to the following.\n> 1. Miners begin including UTXO commitments.\n> 2. Miners begin rejecting blocks with invalid UTXO commitments.\n> 3. Miners begin rejecting blocks with no UTXO commitments.\n> \n> To start up a fresh client it would follow the following.\n> 1. Sync headers.\n> 2. Pick a committed UTXO that is deep enough to not get orphaned.\n> 3. Sync blocks from commitment to head.\n> \n> I would argue that a client following this methodology is strictly more\n> secure than SPV, and I don't see any attacks that make it less secure\n> than a full client. It is obviously still susceptible to a 51% attack,\n> but so is the traditional block chain. I also do not see any sybil\n> attacks that are strengthened by this change because it is not modifying\n> the networking code.\n> \n> I guess if the soft fork happened, then miners began to not include the\n> UTXO commitment anymore, it would lower the overall network hash rate,\n> but this would be self-harming to the miners so they have an incentive\n> to not do it.\n> \n> Please let me know if I have missed something."
            },
            {
                "author": "Jesus Cea",
                "date": "2014-04-10T21:34:29",
                "message_text_only": "On 10/04/14 18:59, Pieter Wuille wrote:\n> It's important to\n> note that this is a strict reduction in security: we're now trusting\n> that the longest chain (with most proof of work) commits to a valid\n> UTXO set (at some point in the past).\n\nAFAIK, current bitcoin code code already set blockchain checkpoints from\ntime to time. It is a garanteed that a longer chain starting before the\ncheckpoint is not going to be accepted suddently. See\n<https://bitcointalk.org/index.php?topic=194078.0>.\n\nCould be perfectly valid to store only unspend wallets before last\ncheckpoint, if during the blockchain download the node did all the checks.\n\nWould be interesting, of course, to be able to verify \"unspend wallet\naccounting\" having only that checkpoint data (the merkle tree can do\nthat, I guess). So you could detect a data corruption or manipulation in\nyour local harddisk.\n\n-- \nJes\u00fas Cea Avi\u00f3n                         _/_/      _/_/_/        _/_/_/\njcea at jcea.es - http://www.jcea.es/     _/_/    _/_/  _/_/    _/_/  _/_/\nTwitter: @jcea                        _/_/    _/_/          _/_/_/_/_/\njabber / xmpp:jcea at jabber.org  _/_/  _/_/    _/_/          _/_/  _/_/\n\"Things are not so easy\"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/\n\"My name is Dump, Core Dump\"   _/_/_/        _/_/_/      _/_/  _/_/\n\"El amor es poner tu felicidad en la felicidad de otro\" - Leibniz\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 538 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140410/7e5e4f38/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-10T22:15:15",
                "message_text_only": "Checkpoints will go away, eventually.\n\nOn 04/10/2014 02:34 PM, Jesus Cea wrote:\n> On 10/04/14 18:59, Pieter Wuille wrote:\n>> It's important to\n>> note that this is a strict reduction in security: we're now trusting\n>> that the longest chain (with most proof of work) commits to a valid\n>> UTXO set (at some point in the past).\n> \n> AFAIK, current bitcoin code code already set blockchain checkpoints from\n> time to time. It is a garanteed that a longer chain starting before the\n> checkpoint is not going to be accepted suddently. See\n> <https://bitcointalk.org/index.php?topic=194078.0>.\n> \n> Could be perfectly valid to store only unspend wallets before last\n> checkpoint, if during the blockchain download the node did all the checks.\n> \n> Would be interesting, of course, to be able to verify \"unspend wallet\n> accounting\" having only that checkpoint data (the merkle tree can do\n> that, I guess). So you could detect a data corruption or manipulation in\n> your local harddisk.\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment \n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Jesus Cea",
                "date": "2014-04-10T22:24:53",
                "message_text_only": "On 11/04/14 00:15, Mark Friedenbach wrote:\n> Checkpoints will go away, eventually.\n\nWhy?. The points in the forum thread seem pretty sensible.\n\n-- \nJes\u00fas Cea Avi\u00f3n                         _/_/      _/_/_/        _/_/_/\njcea at jcea.es - http://www.jcea.es/     _/_/    _/_/  _/_/    _/_/  _/_/\nTwitter: @jcea                        _/_/    _/_/          _/_/_/_/_/\njabber / xmpp:jcea at jabber.org  _/_/  _/_/    _/_/          _/_/  _/_/\n\"Things are not so easy\"      _/_/  _/_/    _/_/  _/_/    _/_/  _/_/\n\"My name is Dump, Core Dump\"   _/_/_/        _/_/_/      _/_/  _/_/\n\"El amor es poner tu felicidad en la felicidad de otro\" - Leibniz\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 538 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140411/54c02f6c/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-10T22:33:36",
                "message_text_only": "On Thu, Apr 10, 2014 at 3:24 PM, Jesus Cea <jcea at jcea.es> wrote:\n> On 11/04/14 00:15, Mark Friedenbach wrote:\n>> Checkpoints will go away, eventually.\n> Why?. The points in the forum thread seem pretty sensible.\n\nBecause with headers first synchronization the major problems that\nthey solve\u2014 e.g. block flooding DOS attacks, weak chain isolation, and\nchecking shortcutting can be addressed in other more efficient ways\nthat don't result in putting trust in third parties.\n\nThey also cause really severe confusion about the security model.\n\nInstead you can embed in software knoweldge that the longest chain is\n\"at least this long\" to prevent isolation attacks, which is a lot\nsimpler and less trusting.  You can also do randomized validation of\nthe deeply burried old history for performance, instead of constantly\ndepending on 'trusted parties' to update software or it gets slower\nover time, and locally save your own validation fingerprints so if you\nneed to reinitilize data you can remember what you've check so far by\nhash."
            },
            {
                "author": "Ricardo Filipe",
                "date": "2014-04-10T16:52:42",
                "message_text_only": "anyway, any kind of compression that comes to the blockchain is\northogonal to pruning.\n\nI agree that you will probably want some kind of replication on more\nrecent nodes than on older ones. However, nodes with older blocks\ndon't need to be \"static\", get the block distribution algorithm to\nsort it out.\n\n2014-04-10 17:28 GMT+01:00 Mike Hearn <mike at plan99.net>:\n> Suggestions always welcome!\n>\n> The main problem with this is that the block chain is mostly random bytes\n> (hashes, keys) so it doesn't compress that well. It compresses a bit, but\n> not enough to change the fundamental physics.\n>\n> However, that does not mean the entire chain has to be stored on expensive\n> rotating platters. I've suggested that in some star trek future where the\n> chain really is gigantic, it could be stored on tape and spooled off at high\n> speed. Literally a direct DMA from tape drive to NIC. But we're not there\n> yet :)\n>\n> ------------------------------------------------------------------------------\n> Put Bad Developers to Shame\n> Dominate Development with Jenkins Continuous Integration\n> Continuously Automate Build, Test & Deployment\n> Start a new project now. Try Jenkins in the cloud.\n> http://p.sf.net/sfu/13600_Cloudbees\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "Chain pruning",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Brian Hoffman",
                "Wladimir",
                "Mike Hearn",
                "Tier Nolan",
                "Gregory Maxwell",
                "Ricardo Filipe",
                "Mark Friedenbach",
                "Pieter Wuille",
                "Jesus Cea",
                "Paul Rabahy"
            ],
            "messages_count": 21,
            "total_messages_chars_count": 37922
        }
    },
    {
        "title": "[Bitcoin-development] Ubuntu LTS Packaging?",
        "thread_messages": [
            {
                "author": "Oliver Egginger",
                "date": "2014-04-12T14:26:07",
                "message_text_only": "Hello,\n\nso far, nothing yet?\n\nSee: https://launchpad.net/~bitcoin/\n\nI'm developing currently a LiveCD for hot/cold wallet management on\nUbuntu LTS basis. For critical vulnerabilities I have to provide timely\nupdates. I have now decided to maintain my own repository for this\nproject. If there are better alternatives, let me know.\n\nregards\nOliver"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-12T14:35:21",
                "message_text_only": "On Sat, Apr 12, 2014 at 4:26 PM, Oliver Egginger <bitcoin at olivere.de> wrote:\n\n> Hello,\n>\n> so far, nothing yet?\n>\n> See: https://launchpad.net/~bitcoin/\n>\n\nWell, the only change in 0.9.1 is the dependency version of OpenSSL that is\nused in the binary gitian builds.\n\nHowever, the PPA build, which happens on the Ubuntu build server, simply\nuses the operating system OpenSSL. So if you upgrade that you should be OK.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140412/3faa43e2/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-12T14:43:58",
                "message_text_only": "On Saturday, April 12, 2014 2:26:07 PM Oliver Egginger wrote:\n> Hello,\n> \n> so far, nothing yet?\n> \n> See: https://launchpad.net/~bitcoin/\n> \n> I'm developing currently a LiveCD for hot/cold wallet management on\n> Ubuntu LTS basis. For critical vulnerabilities I have to provide timely\n> updates. I have now decided to maintain my own repository for this\n> project. If there are better alternatives, let me know.\n\nThis mailing list is for development, not support.\n\nThe PPA you linked has 0.9.0, which is the latest relevant version for \npackaging.\n\nLuke"
            },
            {
                "author": "Matt Corallo",
                "date": "2014-04-12T15:34:46",
                "message_text_only": "Hmm? It's up to date... 0.9.1 doesn't change anything for dynamically-linked-to-openssl builds.\n\nMatt\n\nOn April 12, 2014 10:26:07 AM EDT, Oliver Egginger <bitcoin at olivere.de> wrote:\n>Hello,\n>\n>so far, nothing yet?\n>\n>See: https://launchpad.net/~bitcoin/\n>\n>I'm developing currently a LiveCD for hot/cold wallet management on\n>Ubuntu LTS basis. For critical vulnerabilities I have to provide timely\n>updates. I have now decided to maintain my own repository for this\n>project. If there are better alternatives, let me know.\n>\n>regards\n>Oliver\n>\n>------------------------------------------------------------------------------\n>Put Bad Developers to Shame\n>Dominate Development with Jenkins Continuous Integration\n>Continuously Automate Build, Test & Deployment \n>Start a new project now. Try Jenkins in the cloud.\n>http://p.sf.net/sfu/13600_Cloudbees\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140412/5de6dcad/attachment.html>"
            },
            {
                "author": "Oliver Egginger",
                "date": "2014-04-12T16:33:16",
                "message_text_only": "Am 12.04.2014 17:34, schrieb Matt Corallo:\n> Hmm? It's up to date... 0.9.1 doesn't change anything for\n> dynamically-linked-to-openssl builds.\n> \n\nOkay, my mistake. Sorry to trouble you, but good to know that you are here.\n\nregards\nOliver"
            }
        ],
        "thread_summary": {
            "title": "Ubuntu LTS Packaging?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Matt Corallo",
                "Luke-Jr",
                "Wladimir",
                "Oliver Egginger"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 2978
        }
    },
    {
        "title": "[Bitcoin-development] Bug in 2-of-3 transaction signing in Bitcoind?",
        "thread_messages": [
            {
                "author": "Matt Whitlock",
                "date": "2014-04-15T15:00:36",
                "message_text_only": "For the life of me, I cannot figure out what's wrong with this. It seems like Bitcoind has lost its mind. I'm trying to redeem a 2-of-3 multisig P2SH output using a raw transaction.\n\n\nHere's the address that the P2SH output was sent to:\n\n$ bitcoind createmultisig 2 '[\"03566474f987a012a69a08097253394ebd681454df29c3f1fb0495a5b45490f928\", \"03927407ca158155d0d30366395ca9cdc7d93cfa0a5b22181374431c15aae7b358\", \"02cff98aba464f5d4ebac5e6417f142326235f5a0a59708ba6231471cce4ee0747\"]'\n{\n    \"address\" : \"33snuCcVUmn9iBG345keJRzMfVwz7Uo87C\",\n    \"redeemScript\" : \"522103566474f987a012a69a08097253394ebd681454df29c3f1fb0495a5b45490f9282103927407ca158155d0d30366395ca9cdc7d93cfa0a5b22181374431c15aae7b3582102cff98aba464f5d4ebac5e6417f142326235f5a0a59708ba6231471cce4ee074753ae\"\n}\n\n\nThe transaction containing the output is ec7d985ae265a3a79c68d852e0e52cf4177c3362d7a25fb718be82f980f39285. It's the second output.\n\n\nSo I ask Bitcoind to create a raw transaction to spend the output:\n\n$ bitcoind createrawtransaction '[{\"txid\":\"ec7d985ae265a3a79c68d852e0e52cf4177c3362d7a25fb718be82f980f39285\", \"vout\":1}]' '{\"19YNEu4ZqX3nU9rJMuMcDy3pzFhactZPmk\":0.00050000, \"1J2qtR7HBbE4rkNAgZCo4hZUEd2Z4jtSgz\":0.00040000}'\n01000000018592f380f982be18b75fa2d762337c17f42ce5e052d8689ca7a365e25a987dec0100000000ffffffff0250c30000000000001976a9145dafa18ab21debe3d20f2c39e88d630f822bd29e88ac409c0000000000001976a914bad35cd767b657daa4a735b32e3d1f1dab52872d88ac00000000\n\n\nAnd here is the decoded transaction, for completeness:\n\n$ bitcoind decoderawtransaction 01000000018592f380f982be18b75fa2d762337c17f42ce5e052d8689ca7a365e25a987dec0100000000ffffffff0250c30000000000001976a9145dafa18ab21debe3d20f2c39e88d630f822bd29e88ac409c0000000000001976a914bad35cd767b657daa4a735b32e3d1f1dab52872d88ac00000000\n{\n    \"txid\" : \"8d731e6e333d805f6c8b569e1a608d14127d61d3123b699355133b2c757c16fb\",\n    \"version\" : 1,\n    \"locktime\" : 0,\n    \"vin\" : [\n        {\n            \"txid\" : \"ec7d985ae265a3a79c68d852e0e52cf4177c3362d7a25fb718be82f980f39285\",\n            \"vout\" : 1,\n            \"scriptSig\" : {\n                \"asm\" : \"\",\n                \"hex\" : \"\"\n            },\n            \"sequence\" : 4294967295\n        }\n    ],\n    \"vout\" : [\n        {\n            \"value\" : 0.00050000,\n            \"n\" : 0,\n            \"scriptPubKey\" : {\n                \"asm\" : \"OP_DUP OP_HASH160 5dafa18ab21debe3d20f2c39e88d630f822bd29e OP_EQUALVERIFY OP_CHECKSIG\",\n                \"hex\" : \"76a9145dafa18ab21debe3d20f2c39e88d630f822bd29e88ac\",\n                \"reqSigs\" : 1,\n                \"type\" : \"pubkeyhash\",\n                \"addresses\" : [\n                    \"19YNEu4ZqX3nU9rJMuMcDy3pzFhactZPmk\"\n                ]\n            }\n        },\n        {\n            \"value\" : 0.00040000,\n            \"n\" : 1,\n            \"scriptPubKey\" : {\n                \"asm\" : \"OP_DUP OP_HASH160 bad35cd767b657daa4a735b32e3d1f1dab52872d OP_EQUALVERIFY OP_CHECKSIG\",\n                \"hex\" : \"76a914bad35cd767b657daa4a735b32e3d1f1dab52872d88ac\",\n                \"reqSigs\" : 1,\n                \"type\" : \"pubkeyhash\",\n                \"addresses\" : [\n                    \"1J2qtR7HBbE4rkNAgZCo4hZUEd2Z4jtSgz\"\n                ]\n            }\n        }\n    ]\n}\n\n\nNow I'll sign the transaction with 2 of 3 keys:\n\n$ bitcoind signrawtransaction 01000000018592f380f982be18b75fa2d762337c17f42ce5e052d8689ca7a365e25a987dec0100000000ffffffff0250c30000000000001976a9145dafa18ab21debe3d20f2c39e88d630f822bd29e88ac409c0000000000001976a914bad35cd767b657daa4a735b32e3d1f1dab52872d88ac00000000 '[{\"txid\":\"ec7d985ae265a3a79c68d852e0e52cf4177c3362d7a25fb718be82f980f39285\", \"vout\":1, \"scriptPubKey\":\"a91417f9f4ba5c2f2b9334805f91bbbf90a19aaa3d5687\", \"redeemScript\":\"522103566474f987a012a69a08097253394ebd681454df29c3f1fb0495a5b45490f9282103927407ca158155d0d30366395ca9cdc7d93cfa0a5b22181374431c15aae7b3582102cff98aba464f5d4ebac5e6417f142326235f5a0a59708ba6231471cce4ee074753ae\"}]' '[\"Ky7EQeg71YHeftLc31tt8AoNSezFEgUCbvwYak1eKksg6gQww6FF\", \"KxAXrjTMZJN1Egqkckdz9TXyB2kyJ68wu7CiJk6Rygmr9zv2nScG\"]'\n{\n    \"hex\" : \"01000000018592f380f982be18b75fa2d762337c17f42ce5e052d8689ca7a365e25a987dec01000000fc004730440220781ae7e3e309289f53cc2c4016adfb5a1d0081157d4366b9f77f0358b7aeccbb022009c7297f60088b1815d6970c8e246e6b516ff8fce5e85de209004d8cc29e460201473044022018a23405ca72c52222577f78c2356bdb8ba36259edb1320b90e2c31188e6317602201972db07bf5ef8e30221d3707ce6eb7ab748527ec8e7ca14241350920f03257f014c69522103566474f987a012a69a08097253394ebd681454df29c3f1fb0495a5b45490f9282103927407ca158155d0d30366395ca9cdc7d93cfa0a5b22181374431c15aae7b3582102cff98aba464f5d4ebac5e6417f142326235f5a0a59708ba6231471cce4ee074753aeffffffff0250c30000000000001976a9145dafa18ab21debe3d20f2c39e88d630f822bd29e88ac409c0000000000001976a914bad35cd767b657daa4a735b32e3d1f1dab52872d88ac00000000\",\n    \"complete\" : true\n}\n\n\nAnd here's the decode of the signed transaction:\n\n$ bitcoind decoderawtransaction 01000000018592f380f982be18b75fa2d762337c17f42ce5e052d8689ca7a365e25a987dec01000000fc004730440220781ae7e3e309289f53cc2c4016adfb5a1d0081157d4366b9f77f0358b7aeccbb022009c7297f60088b1815d6970c8e246e6b516ff8fce5e85de209004d8cc29e460201473044022018a23405ca72c52222577f78c2356bdb8ba36259edb1320b90e2c31188e6317602201972db07bf5ef8e30221d3707ce6eb7ab748527ec8e7ca14241350920f03257f014c69522103566474f987a012a69a08097253394ebd681454df29c3f1fb0495a5b45490f9282103927407ca158155d0d30366395ca9cdc7d93cfa0a5b22181374431c15aae7b3582102cff98aba464f5d4ebac5e6417f142326235f5a0a59708ba6231471cce4ee074753aeffffffff0250c30000000000001976a9145dafa18ab21debe3d20f2c39e88d630f822bd29e88ac409c0000000000001976a914bad35cd767b657daa4a735b32e3d1f1dab52872d88ac00000000\n{\n    \"txid\" : \"a01bff867229de4bb622b0ebdd8cd293d6b9ad2fb576612974ae89ed5798eb3e\",\n    \"version\" : 1,\n    \"locktime\" : 0,\n    \"vin\" : [\n        {\n            \"txid\" : \"ec7d985ae265a3a79c68d852e0e52cf4177c3362d7a25fb718be82f980f39285\",\n            \"vout\" : 1,\n            \"scriptSig\" : {\n                \"asm\" : \"0 30440220781ae7e3e309289f53cc2c4016adfb5a1d0081157d4366b9f77f0358b7aeccbb022009c7297f60088b1815d6970c8e246e6b516ff8fce5e85de209004d8cc29e460201 3044022018a23405ca72c52222577f78c2356bdb8ba36259edb1320b90e2c31188e6317602201972db07bf5ef8e30221d3707ce6eb7ab748527ec8e7ca14241350920f03257f01 522103566474f987a012a69a08097253394ebd681454df29c3f1fb0495a5b45490f9282103927407ca158155d0d30366395ca9cdc7d93cfa0a5b22181374431c15aae7b3582102cff98aba464f5d4ebac5e6417f142326235f5a0a59708ba6231471cce4ee074753ae\",\n                \"hex\" : \"004730440220781ae7e3e309289f53cc2c4016adfb5a1d0081157d4366b9f77f0358b7aeccbb022009c7297f60088b1815d6970c8e246e6b516ff8fce5e85de209004d8cc29e460201473044022018a23405ca72c52222577f78c2356bdb8ba36259edb1320b90e2c31188e6317602201972db07bf5ef8e30221d3707ce6eb7ab748527ec8e7ca14241350920f03257f014c69522103566474f987a012a69a08097253394ebd681454df29c3f1fb0495a5b45490f9282103927407ca158155d0d30366395ca9cdc7d93cfa0a5b22181374431c15aae7b3582102cff98aba464f5d4ebac5e6417f142326235f5a0a59708ba6231471cce4ee074753ae\"\n            },\n            \"sequence\" : 4294967295\n        }\n    ],\n    \"vout\" : [\n        {\n            \"value\" : 0.00050000,\n            \"n\" : 0,\n            \"scriptPubKey\" : {\n                \"asm\" : \"OP_DUP OP_HASH160 5dafa18ab21debe3d20f2c39e88d630f822bd29e OP_EQUALVERIFY OP_CHECKSIG\",\n                \"hex\" : \"76a9145dafa18ab21debe3d20f2c39e88d630f822bd29e88ac\",\n                \"reqSigs\" : 1,\n                \"type\" : \"pubkeyhash\",\n                \"addresses\" : [\n                    \"19YNEu4ZqX3nU9rJMuMcDy3pzFhactZPmk\"\n                ]\n            }\n        },\n        {\n            \"value\" : 0.00040000,\n            \"n\" : 1,\n            \"scriptPubKey\" : {\n                \"asm\" : \"OP_DUP OP_HASH160 bad35cd767b657daa4a735b32e3d1f1dab52872d OP_EQUALVERIFY OP_CHECKSIG\",\n                \"hex\" : \"76a914bad35cd767b657daa4a735b32e3d1f1dab52872d88ac\",\n                \"reqSigs\" : 1,\n                \"type\" : \"pubkeyhash\",\n                \"addresses\" : [\n                    \"1J2qtR7HBbE4rkNAgZCo4hZUEd2Z4jtSgz\"\n                ]\n            }\n        }\n    ]\n}\n\n\nAnd now I'll try to transmit the transaction to the network:\n\n$ bitcoind sendrawtransaction 01000000018592f380f982be18b75fa2d762337c17f42ce5e052d8689ca7a365e25a987dec01000000fc004730440220781ae7e3e309289f53cc2c4016adfb5a1d0081157d4366b9f77f0358b7aeccbb022009c7297f60088b1815d6970c8e246e6b516ff8fce5e85de209004d8cc29e460201473044022018a23405ca72c52222577f78c2356bdb8ba36259edb1320b90e2c31188e6317602201972db07bf5ef8e30221d3707ce6eb7ab748527ec8e7ca14241350920f03257f014c69522103566474f987a012a69a08097253394ebd681454df29c3f1fb0495a5b45490f9282103927407ca158155d0d30366395ca9cdc7d93cfa0a5b22181374431c15aae7b3582102cff98aba464f5d4ebac5e6417f142326235f5a0a59708ba6231471cce4ee074753aeffffffff0250c30000000000001976a9145dafa18ab21debe3d20f2c39e88d630f822bd29e88ac409c0000000000001976a914bad35cd767b657daa4a735b32e3d1f1dab52872d88ac00000000\nerror: {\"code\":-22,\"message\":\"TX rejected\"}\n\n\nWhoops!\n\nSo, what gives?"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-15T15:05:53",
                "message_text_only": "Check debug.log to find out the reason it was rejected.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140415/d2341c96/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-15T15:11:40",
                "message_text_only": "The first input seems to be already spent by another transaction\n(which looks very similar).\n\n0.9 should report a more detailed reason for rejection, by the way.\n\n\n\nOn Tue, Apr 15, 2014 at 5:05 PM, Mike Hearn <mike at plan99.net> wrote:\n> Check debug.log to find out the reason it was rejected.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-15T15:22:17",
                "message_text_only": "Thanks for the quick reply to both of you, Mike and Pieter.\n\nI feel foolish for posting to this list, because the debug.log does indeed say \"inputs already spent.\" That's so weird, though, because we haven't been able to get anything to accept the transaction, seemingly, and yet it was accepted into the block chain 15 blocks ago.\n\nAnyway, I'm sorry for the noise.\n\n\nOn Tuesday, 15 April 2014, at 5:11 pm, Pieter Wuille wrote:\n> The first input seems to be already spent by another transaction\n> (which looks very similar).\n> \n> 0.9 should report a more detailed reason for rejection, by the way.\n> \n> \n> \n> On Tue, Apr 15, 2014 at 5:05 PM, Mike Hearn <mike at plan99.net> wrote:\n> > Check debug.log to find out the reason it was rejected.\n> >\n> >\n> >\n> > ------------------------------------------------------------------------------\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> > \"Graph Databases\" is the definitive new guide to graph databases and their\n> > applications. Written by three acclaimed leaders in the field,\n> > this first edition is now available. Download your free book today!\n> > http://p.sf.net/sfu/NeoTech\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-15T15:30:37",
                "message_text_only": ">\n> That's so weird, though, because we haven't been able to get anything to\n> accept the transaction, seemingly, and yet it was accepted into the block\n> chain 15 blocks ago.\n\n\nIf the tx is already in the block chain then it won't be accepted again,\nbecause it would be double spending itself!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140415/df648e69/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-15T15:42:14",
                "message_text_only": "On Tuesday, 15 April 2014, at 5:30 pm, Mike Hearn wrote:\n> >\n> > That's so weird, though, because we haven't been able to get anything to\n> > accept the transaction, seemingly, and yet it was accepted into the block\n> > chain 15 blocks ago.\n> \n> \n> If the tx is already in the block chain then it won't be accepted again,\n> because it would be double spending itself!\n\nHaha, yes, I know that. But we had been trying to get a 2-of-3 to be accepted by something for hours, and everything was rejecting it: Coinb.in, our local Bitcoind, the Eligius tx push form. Evidently something did accept it and we didn't notice. We're starting over again now and trying to reproduce the success (or failure)."
            },
            {
                "author": "Mike Belshe",
                "date": "2014-04-15T15:47:33",
                "message_text_only": "For what it is worth, I found btcd (the go implementation of bitcoind) has\nmuch better error/diagnostics messages.  It would have given you more than\n\"-22 TX Rejected\".  I used it to debug my own multi-sig transactions and it\nwas very helpful.\n\nMike\n\n\n\nOn Tue, Apr 15, 2014 at 8:42 AM, Matt Whitlock <bip at mattwhitlock.name>wrote:\n\n> On Tuesday, 15 April 2014, at 5:30 pm, Mike Hearn wrote:\n> > >\n> > > That's so weird, though, because we haven't been able to get anything\n> to\n> > > accept the transaction, seemingly, and yet it was accepted into the\n> block\n> > > chain 15 blocks ago.\n> >\n> >\n> > If the tx is already in the block chain then it won't be accepted again,\n> > because it would be double spending itself!\n>\n> Haha, yes, I know that. But we had been trying to get a 2-of-3 to be\n> accepted by something for hours, and everything was rejecting it: Coinb.in,\n> our local Bitcoind, the Eligius tx push form. Evidently something did\n> accept it and we didn't notice. We're starting over again now and trying to\n> reproduce the success (or failure).\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140415/1bab2261/attachment.html>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-15T16:27:41",
                "message_text_only": "On Tuesday, 15 April 2014, at 8:47 am, Mike Belshe wrote:\n> For what it is worth, I found btcd (the go implementation of bitcoind) has\n> much better error/diagnostics messages.  It would have given you more than\n> \"-22 TX Rejected\".  I used it to debug my own multi-sig transactions and it\n> was very helpful.\n\nI'll have to check that out.\n\n\nA follow-up on my initial post... I did just successfully create, sign, and transmit another 2-of-3 transaction, so once again, I'm sorry I bothered this list. But since I did (and am now doing so again), I'll give a little more background on what we've been up to. It's not quite as simple as what I've shared thus far. \n\nWe have built a tool from scratch in C++ that is kind of a Swiss Army knife of Bitcoin. It does all sorts of key and address conversions, hash functions, encoding and decoding, script disassembly, BIP38 encryption/decrytion, the Shamir Secret Sharing that I've posted about here on this list before, and transaction building and signing. It has its own wallet and it's own UTXO cache that contains only TXOs that are relevant to the objects in its wallet. It synchronizes its cache by scanning bitcoind's block data files. (It memory maps them and can do a full scan of the entire block chain in about a minute!) The wallet can contain keys, seeds, and multi-signature aggregates (which in turn can comprise keys and seeds). What we've been testing is deriving sequences of multi-sig P2SH addresses from a set of public seeds, sending bitcoins to those addresses, then using our tool to find those outputs in the block chain and to create transactions that redeem them, and then signing those transactions by supplying the private seeds to the tool.\n\nOur tool is quite a bit easier to use than Bitcoind. (I was frankly appalled at the command-line syntax that was necessary to get Bitcoind to sign a P2SH multi-sig transaction.)\n\n$ ./btctool privkey < /dev/random > privseed1\n$ ./btctool privkey < /dev/random > privseed2\n$ ./btctool privkey < /dev/random > privseed3\n$ pubseed1=$(./btctool pubkey < privseed1)\n$ pubseed2=$(./btctool pubkey < privseed2)\n$ pubseed3=$(./btctool pubkey < privseed3)\n$ ./chaintool init\n$ ./chaintool add demo 2 \":${pubseed1}\" \":${pubseed2}\" \":${pubseed3}\"\n$ ./chaintool ls\ndemo    2 :036447c7edc861b9f41fa0f611d81784f19ce692f37e8772b55c37c743cd526b49 :03c831711ea65decc06b0f3ccb4b9f1ba1a99a6933e520f6e7e4c3dbb4f015b701 :0347f2a0a346f21538fc451b95a600bc64ce5d2d28b89bf547697f3a77195d8dd1\n$ ./btctool addresses 1 2 \"${pubseed1}\" \"${pubseed2}\" \"${pubseed3}\"\n3GQd1tosFCE7Vo4TAiDHEKTaBgoyZTeL6R\n$ bitcoind sendtoaddress 3GQd1tosFCE7Vo4TAiDHEKTaBgoyZTeL6R 0.01\n6a9538f496f4c2d7f50c342fa6f6f76904a3b19f55f3a54a0003fc00b327d81b\n(I waited here for the tx to get into a block)\n$ ./chaintool sync /var/lib/bitcoin/.bitcoin/blocks 2> /dev/null\n$ ./chaintool listunspent\n[\n        {\n                \"txid\": \"6a9538f496f4c2d7f50c342fa6f6f76904a3b19f55f3a54a0003fc00b327d81b\",\n                \"vout\": 1,\n                \"address\": \"3GQd1tosFCE7Vo4TAiDHEKTaBgoyZTeL6R\",\n                \"scriptPubKey\": \"a914a1701be36532f05a74511fca89afce180c58189587\",\n                \"amount\": 1000000,\n                \"confirmations\": 1\n        }\n]\n$ cat > outputs << EOF\n> 13QAKNuh9uFcEiNAsct6LSF1qWQR6HLarT 50000\n> 1FV4Fm3VCXfWy7BAXzT8t5qqTvEKZSad9v\n> EOF\n$ tx=$(./chaintool createtx 10000 demo < outputs)\n(I manually edited ${tx} at this point to add an OP_RETURN output. We're currently working toward using OP_RETURN in a provable solvency scheme.)\n$ signedtx1=$(./chaintool signtx \"${tx}\" < privseed1)\ninput #0: need 1 of [:03c831711ea65decc06b0f3ccb4b9f1ba1a99a6933e520f6e7e4c3dbb4f015b701, :0347f2a0a346f21538fc451b95a600bc64ce5d2d28b89bf547697f3a77195d8dd1]\n$ signedtx2=$(./chaintool signtx \"${signedtx1}\" < privseed2)\n$ bitcoind sendrawtransaction \"${signedtx2}\"\nb485b185c77d803f75e1ccfee1b5072846c9e0728f4c955ca40dce82263f8f16\n$ exit\n\n:-)"
            },
            {
                "author": "Chris Beams",
                "date": "2014-04-15T16:39:35",
                "message_text_only": "Hi Matt,\n\nLooks interesting. Is the source available?\n\n\nOn Apr 15, 2014, at 6:27 PM, Matt Whitlock <bip at mattwhitlock.name> wrote:\n\nOn Tuesday, 15 April 2014, at 8:47 am, Mike Belshe wrote:\nFor what it is worth, I found btcd (the go implementation of bitcoind) has\nmuch better error/diagnostics messages.  It would have given you more than\n\"-22 TX Rejected\".  I used it to debug my own multi-sig transactions and it\nwas very helpful.\n\nI'll have to check that out.\n\n\nA follow-up on my initial post... I did just successfully create, sign, and transmit another 2-of-3 transaction, so once again, I'm sorry I bothered this list. But since I did (and am now doing so again), I'll give a little more background on what we've been up to. It's not quite as simple as what I've shared thus far.\n\nWe have built a tool from scratch in C++ that is kind of a Swiss Army knife of Bitcoin. It does all sorts of key and address conversions, hash functions, encoding and decoding, script disassembly, BIP38 encryption/decrytion, the Shamir Secret Sharing that I've posted about here on this list before, and transaction building and signing. It has its own wallet and it's own UTXO cache that contains only TXOs that are relevant to the objects in its wallet. It synchronizes its cache by scanning bitcoind's block data files. (It memory maps them and can do a full scan of the entire block chain in about a minute!) The wallet can contain keys, seeds, and multi-signature aggregates (which in turn can comprise keys and seeds). What we've been testing is deriving sequences of multi-sig P2SH addresses from a set of public seeds, sending bitcoins to those addresses, then using our tool to find those outputs in the block chain and to create transactions that redeem them, and then signing those trans\nactions by supplying the private seeds to the tool.\n\nOur tool is quite a bit easier to use than Bitcoind. (I was frankly appalled at the command-line syntax that was necessary to get Bitcoind to sign a P2SH multi-sig transaction.)\n\n$ ./btctool privkey < /dev/random > privseed1\n$ ./btctool privkey < /dev/random > privseed2\n$ ./btctool privkey < /dev/random > privseed3\n$ pubseed1=$(./btctool pubkey < privseed1)\n$ pubseed2=$(./btctool pubkey < privseed2)\n$ pubseed3=$(./btctool pubkey < privseed3)\n$ ./chaintool init\n$ ./chaintool add demo 2 \":${pubseed1}\" \":${pubseed2}\" \":${pubseed3}\"\n$ ./chaintool ls\ndemo    2 :036447c7edc861b9f41fa0f611d81784f19ce692f37e8772b55c37c743cd526b49 :03c831711ea65decc06b0f3ccb4b9f1ba1a99a6933e520f6e7e4c3dbb4f015b701 :0347f2a0a346f21538fc451b95a600bc64ce5d2d28b89bf547697f3a77195d8dd1\n$ ./btctool addresses 1 2 \"${pubseed1}\" \"${pubseed2}\" \"${pubseed3}\"\n3GQd1tosFCE7Vo4TAiDHEKTaBgoyZTeL6R\n$ bitcoind sendtoaddress 3GQd1tosFCE7Vo4TAiDHEKTaBgoyZTeL6R 0.01\n6a9538f496f4c2d7f50c342fa6f6f76904a3b19f55f3a54a0003fc00b327d81b\n(I waited here for the tx to get into a block)\n$ ./chaintool sync /var/lib/bitcoin/.bitcoin/blocks 2> /dev/null\n$ ./chaintool listunspent\n[\n       {\n               \"txid\": \"6a9538f496f4c2d7f50c342fa6f6f76904a3b19f55f3a54a0003fc00b327d81b\",\n               \"vout\": 1,\n               \"address\": \"3GQd1tosFCE7Vo4TAiDHEKTaBgoyZTeL6R\",\n               \"scriptPubKey\": \"a914a1701be36532f05a74511fca89afce180c58189587\",\n               \"amount\": 1000000,\n               \"confirmations\": 1\n       }\n]\n$ cat > outputs << EOF\n13QAKNuh9uFcEiNAsct6LSF1qWQR6HLarT 50000\n1FV4Fm3VCXfWy7BAXzT8t5qqTvEKZSad9v\nEOF\n$ tx=$(./chaintool createtx 10000 demo < outputs)\n(I manually edited ${tx} at this point to add an OP_RETURN output. We're currently working toward using OP_RETURN in a provable solvency scheme.)\n$ signedtx1=$(./chaintool signtx \"${tx}\" < privseed1)\ninput #0: need 1 of [:03c831711ea65decc06b0f3ccb4b9f1ba1a99a6933e520f6e7e4c3dbb4f015b701, :0347f2a0a346f21538fc451b95a600bc64ce5d2d28b89bf547697f3a77195d8dd1]\n$ signedtx2=$(./chaintool signtx \"${signedtx1}\" < privseed2)\n$ bitcoind sendrawtransaction \"${signedtx2}\"\nb485b185c77d803f75e1ccfee1b5072846c9e0728f4c955ca40dce82263f8f16\n$ exit\n\n:-)\n\n------------------------------------------------------------------------------\nLearn Graph Databases - Download FREE O'Reilly Book\n\"Graph Databases\" is the definitive new guide to graph databases and their\napplications. Written by three acclaimed leaders in the field,\nthis first edition is now available. Download your free book today!\nhttp://p.sf.net/sfu/NeoTech\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140415/508cfd71/attachment.sig>"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-15T16:45:52",
                "message_text_only": "On Tuesday, 15 April 2014, at 6:39 pm, Chris Beams wrote:\n> Looks interesting. Is the source available?\n\nThe intent is to open-source it. We will do so when I'm confident that we have all the kinks worked out.\n\nHere's what it can do presently:\n\n$ ./btctool\nusage: ./btctool <function> [<args>]\n  encode16\n    Encode stdin to hex.\n  decode16 [<hex>]\n    Decode hex from stdin or string.\n  encode64 [<hex>]\n    Encode stdin or octets to Base64.\n  decode64 [<base64>]\n    Decode Base64 from stdin or string.\n  encode58 <version> [<hex>]\n    Encode stdin or octets to Base58Check.\n  decode58 [<base58>]\n    Decode Base58Check from stdin or string.\n  disassemble [<script>]\n    Disassemble hex script.\n  sha256 [<hex>]\n    Hash stdin or octets using SHA-256.\n  rmd160 [<hex>]\n    Hash stdin or octets using RIPEMD-160.\n  privkey [<hex>]\n    Derive private key from stdin or octets.\n  pubkey [<privkey>]\n    Derive public key from private key.\n  address [<pubkey>]\n    Derive address from public key.\n  address <m> [<pubkey>...]\n    Derive m-of-n P2SH address from public keys.\n  encrypt [<privkey>]\n    Encrypt private key per BIP38.\n  decrypt [<privkey>]\n    Decrypt private key per BIP38.\n  shares <m> <n> [<privkey>]\n    Distribute private key into m-of-n shares.\n  join [<share>...]\n    Join shares to reconstitute private key.\n  privkeys <k> [<privseed>]\n    Derive k private keys from private seed.\n  pubkeys <k> [<pubseed>]\n    Derive k public keys from public seed.\n  addresses <k> [<pubseed>]\n    Derive k addresses from public seed.\n  addresses <k> <m> [<pubseed>...]\n    Derive k m-of-n P2SH addresses from public seeds.\n\n$ ./chaintool\nusage: ./chaintool <function> [<args>]\n  init\n    Initialize a new cache file.\n  add <label> <pubkey>\n    Add a public key.\n  add <label> :<pubseed>\n    Add a public seed.\n  add <label> <m> {<pubkey>|:<pubseed>}...\n    Add public keys/seeds for m-of-n P2SH.\n  rm <label>\n    Remove a public key or seed.\n  ls\n    List public keys and seeds.\n  sync <blocksdir>\n    Synchronize with block chain.\n  tip\n    Print hash of block at tip of main chain.\n  getbalance [<label>...]\n    Get available balance.\n  listunspent [<label>...]\n    List unspent outputs in JSON.\n  createtx [<fee>] [<label>...]\n    Create transaction from address+amount pairs on stdin.\n  signtx <tx> [{<privkey>|<privseed>}...]\n    Sign transaction with private key(s)/seed(s)."
            }
        ],
        "thread_summary": {
            "title": "Bug in 2-of-3 transaction signing in Bitcoind?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Matt Whitlock",
                "Pieter Wuille",
                "Chris Beams",
                "Mike Belshe"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 25570
        }
    },
    {
        "title": "[Bitcoin-development] Warning message when running wallet in Windows XP (or drop support?)",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-04-16T08:14:58",
                "message_text_only": "Hello,\n\nToday I noticed that even my bank is warning people to not do internet\nbanking with Windows XP.\n\nIf it is no longer secure enough for online banking it's CERTAINLY not\nsecure enough to run a wallet (for a node only it would be ok-ish as they\nhave no keys to protect).\nAny opinions on what to do here? Just warn and allow the user to continue?\nRedirect them to a 'Windows XP is dangerous' message on bitcoin.org?\n(Microsoft uses http://windows.microsoft.com/en-us/windows/end-support-help)\n\nThe drawback of dropping XP support completely would be that a lot of\ncomputers (especially in China and Russia etc) are still running XP, so\nthis could cause the network to lose nodes.\n\nIf you're maintainer of other wallet software: how are you handling this?\nAre you going to drop XP support completely? If so, starting from when?\n\nRegards,\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/8f20412a/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-04-16T08:45:48",
                "message_text_only": "On 16 April 2014 10:14, Wladimir <laanwj at gmail.com> wrote:\n\n> Hello,\n>\n> Today I noticed that even my bank is warning people to not do internet\n> banking with Windows XP.\n>\n> If it is no longer secure enough for online banking it's CERTAINLY not\n> secure enough to run a wallet (for a node only it would be ok-ish as they\n> have no keys to protect).\n> Any opinions on what to do here? Just warn and allow the user to continue?\n> Redirect them to a 'Windows XP is dangerous' message on bitcoin.org?\n> (Microsoft uses\n> http://windows.microsoft.com/en-us/windows/end-support-help)\n>\n> The drawback of dropping XP support completely would be that a lot of\n> computers (especially in China and Russia etc) are still running XP, so\n> this could cause the network to lose nodes.\n>\n\nXP with a trezor would work fine tho?\n\nMy personal preference would be a warning, and to direct them to a free\nsoftware operating system that they could upgrade to.\n\n\n>\n> If you're maintainer of other wallet software: how are you handling this?\n> Are you going to drop XP support completely? If so, starting from when?\n>\n> Regards,\n> Wladimir\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/35d4f081/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-16T09:41:48",
                "message_text_only": "On Wed, Apr 16, 2014 at 10:45 AM, Melvin Carvalho\n<melvincarvalho at gmail.com>wrote:\n\n> XP with a trezor would work fine tho?\n>\n\nProbably - but that's a very rare edge case. People that are security\nconscious enough to buy a Trezor will not run XP. Also I don't dare to say\nthat there is not some way to sociaal-engineer the user with malware on a\ncompromised OS even with a trezor.\n\nMaybe: for 0.9.2 add a warning message and push people to upgrade (either\nto Win8.1 or something else), then in the next major release 0.10.0 drop XP\nsupport completely.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/7b36d743/attachment.html>"
            },
            {
                "author": "Kevin",
                "date": "2014-04-16T15:12:28",
                "message_text_only": "On 4/16/2014 4:14 AM, Wladimir wrote:\n> Hello,\n>\n> Today I noticed that even my bank is warning people to not do internet \n> banking with Windows XP.\n>\n> If it is no longer secure enough for online banking it's CERTAINLY not \n> secure enough to run a wallet (for a node only it would be ok-ish as \n> they have no keys to protect).\n>\n> Any opinions on what to do here? Just warn and allow the user to \n> continue? Redirect them to a 'Windows XP is dangerous' message on \n> bitcoin.org <http://bitcoin.org>? (Microsoft uses \n> http://windows.microsoft.com/en-us/windows/end-support-help)\n>\n> The drawback of dropping XP support completely would be that a lot of \n> computers (especially in China and Russia etc) are still running XP, \n> so this could cause the network to lose nodes.\n>\n> If you're maintainer of other wallet software: how are you handling this?\n> Are you going to drop XP support completely? If so, starting from when?\n>\n> Regards,\n> Wladimir\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nI think we should get to the bottom of this.  Should we assume that xp \nis not secure enough?  What is this warning?  Who is issuing this warning?\n\n\n-- \nKevin\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/25e492a7/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-16T15:20:41",
                "message_text_only": "On Wed, Apr 16, 2014 at 5:12 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n> I think we should get to the bottom of this.  Should we assume that xp is\n> not secure enough?\n\nYes.\n\n> What is this warning?\n\nWindows XP is no longer maintained. Don't use such a system for\nprotecting your money.\n\n> Who is issuing this warning?\n\nMicrosoft: http://windows.microsoft.com/en-us/windows/end-support-help\n\nThe suggestion here is to make Bitcoin Core detect when it's running\non Windows XP, and warn the user (they are likely unaware of the\nrisks).\n\n-- \nPieter"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-16T15:28:27",
                "message_text_only": "On Wed, Apr 16, 2014 at 5:20 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> On Wed, Apr 16, 2014 at 5:12 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n> > I think we should get to the bottom of this.  Should we assume that xp is\n> > not secure enough?\n>\n> Yes.\n>\n\nIt will quickly grow extremely insecure.\n\nPeople will be actively analyzing patches to post-XP versions to find\nsecurity problems that are patched there, to see if they can be exploited\non XP.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/70aa4816/attachment.html>"
            },
            {
                "author": "Kevin",
                "date": "2014-04-16T16:27:29",
                "message_text_only": "On 4/16/2014 11:28 AM, Wladimir wrote:\n>\n> On Wed, Apr 16, 2014 at 5:20 PM, Pieter Wuille \n> <pieter.wuille at gmail.com <mailto:pieter.wuille at gmail.com>> wrote:\n>\n>     On Wed, Apr 16, 2014 at 5:12 PM, Kevin <kevinsisco61784 at gmail.com\n>     <mailto:kevinsisco61784 at gmail.com>> wrote:\n>     > I think we should get to the bottom of this.  Should we assume\n>     that xp is\n>     > not secure enough?\n>\n>     Yes.\n>\n>\n> It will quickly grow extremely insecure.\n>\n> People will be actively analyzing patches to post-XP versions to find \n> security problems that are patched there, to see if they can be \n> exploited on XP.\n>\n> Wladimir\n>\nShould we then add an alert message to wallet installers such as, \"Such \nand such will not run on windows xp?\"\n\n\n-- \nKevin\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/d88f01af/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-16T16:35:36",
                "message_text_only": "On 04/16/2014 09:27 AM, Kevin wrote:\n> Should we then add an alert message to wallet installers such as, \"Such\n> and such will not run on windows xp?\"\n\nIt's not really our place to police that ... plus it's perfectly safe to\nbe running Bitcoin Core as a full node on XP. It's just the wallet\nfunctionality that people should be careful about. We're talking about\nsuch a small intersection of people who are running XP, have systems\npowerful enough to run Bitcoin Core, and use the wallet functionality."
            },
            {
                "author": "Chris Williams",
                "date": "2014-04-16T16:41:03",
                "message_text_only": "It may not be our place to say whether XP is secure or not, but if we say that we support it then we have to run test passes against XP as a platform, and if an XP user reports a bug, then we have to do something to address it.  So, it becomes a test and support issue, not a security issue.\n\nThat\u2019s why it doesn\u2019t make sense to support an OS platform that the original vendor (MS) no longer supports themselves.\n\nOn Apr 16, 2014, at 9:35 AM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> On 04/16/2014 09:27 AM, Kevin wrote:\n>> Should we then add an alert message to wallet installers such as, \"Such\n>> and such will not run on windows xp?\"\n> \n> It's not really our place to police that ... plus it's perfectly safe to\n> be running Bitcoin Core as a full node on XP. It's just the wallet\n> functionality that people should be careful about. We're talking about\n> such a small intersection of people who are running XP, have systems\n> powerful enough to run Bitcoin Core, and use the wallet functionality.\n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/6c7e3a4d/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-16T16:44:55",
                "message_text_only": "We don't support XP. In fact we don't support *any* distribution, but I\nwill assume you mean \"provide a binary which runs on X.\" Can you find\nany reference to Windows XP on the website? I can't.\n\nOn 04/16/2014 09:41 AM, Chris Williams wrote:\n> It may not be our place to say whether XP is secure or not, but if we say that we support it then we have to run test passes against XP as a platform, and if an XP user reports a bug, then we have to do something to address it.  So, it becomes a test and support issue, not a security issue.\n> \n> That\u2019s why it doesn\u2019t make sense to support an OS platform that the original vendor (MS) no longer supports themselves.\n> \n> On Apr 16, 2014, at 9:35 AM, Mark Friedenbach <mark at monetize.io> wrote:\n> \n>> On 04/16/2014 09:27 AM, Kevin wrote:\n>>> Should we then add an alert message to wallet installers such as, \"Such\n>>> and such will not run on windows xp?\"\n>>\n>> It's not really our place to police that ... plus it's perfectly safe to\n>> be running Bitcoin Core as a full node on XP. It's just the wallet\n>> functionality that people should be careful about. We're talking about\n>> such a small intersection of people who are running XP, have systems\n>> powerful enough to run Bitcoin Core, and use the wallet functionality.\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Chris Williams",
                "date": "2014-04-16T16:50:45",
                "message_text_only": "You\u2019re right.  That\u2019s a huge oversight.  I think any software product you\u2019ve ever considered installing has a section that says\n\n\u201cHey, we want this much ram on your system, this much disk space, this processor, etc\u201d.\n\nOtherwise, you\u2019re just setting yourself up for a bad user experience from people with marginal machines.\n\n\nOn Apr 16, 2014, at 9:44 AM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> We don't support XP. In fact we don't support *any* distribution, but I\n> will assume you mean \"provide a binary which runs on X.\" Can you find\n> any reference to Windows XP on the website? I can't.\n> \n> On 04/16/2014 09:41 AM, Chris Williams wrote:\n>> It may not be our place to say whether XP is secure or not, but if we say that we support it then we have to run test passes against XP as a platform, and if an XP user reports a bug, then we have to do something to address it.  So, it becomes a test and support issue, not a security issue.\n>> \n>> That\u2019s why it doesn\u2019t make sense to support an OS platform that the original vendor (MS) no longer supports themselves.\n>> \n>> On Apr 16, 2014, at 9:35 AM, Mark Friedenbach <mark at monetize.io> wrote:\n>> \n>>> On 04/16/2014 09:27 AM, Kevin wrote:\n>>>> Should we then add an alert message to wallet installers such as, \"Such\n>>>> and such will not run on windows xp?\"\n>>> \n>>> It's not really our place to police that ... plus it's perfectly safe to\n>>> be running Bitcoin Core as a full node on XP. It's just the wallet\n>>> functionality that people should be careful about. We're talking about\n>>> such a small intersection of people who are running XP, have systems\n>>> powerful enough to run Bitcoin Core, and use the wallet functionality.\n>>> \n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/3d3ee08c/attachment.sig>"
            },
            {
                "author": "Kevin",
                "date": "2014-04-16T18:59:10",
                "message_text_only": "On 4/16/2014 12:41 PM, Chris Williams wrote:\n> It may not be our place to say whether XP is secure or not, but if we say that we support it then we have to run test passes against XP as a platform, and if an XP user reports a bug, then we have to do something to address it.  So, it becomes a test and support issue, not a security issue.\n>\n> That's why it doesn't make sense to support an OS platform that the original vendor (MS) no longer supports themselves.\n>\n> On Apr 16, 2014, at 9:35 AM, Mark Friedenbach <mark at monetize.io> wrote:\n>\n>> On 04/16/2014 09:27 AM, Kevin wrote:\n>>> Should we then add an alert message to wallet installers such as, \"Such\n>>> and such will not run on windows xp?\"\n>> It's not really our place to police that ... plus it's perfectly safe to\n>> be running Bitcoin Core as a full node on XP. It's just the wallet\n>> functionality that people should be careful about. We're talking about\n>> such a small intersection of people who are running XP, have systems\n>> powerful enough to run Bitcoin Core, and use the wallet functionality.\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nOkay, so we simply stop supporting it.  Should bitcoin pull support \naltogether?\n\n\n-- \nKevin\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/fbce3b17/attachment.html>"
            },
            {
                "author": "Adam Back",
                "date": "2014-04-16T19:43:10",
                "message_text_only": "Not to get snarky or OS elitist but as I understand it windows security,\neven during its support period has been measured in low digit number of days\nin the year when is NOT an outstanding known remote root compromise or\ncombination of remote user compromise + priviledge escalation.  Add in\nphishing, watering holes, malware and the average windows computer is\nprobably compromised a dozen times over.  Apparently for sometime it was not\neasily possible to secure it install boot - install OS, connect to network\nto download security updates, IP range scanned and compromised faster than\nyou can patch it.\n\nAdam\n\nOn Wed, Apr 16, 2014 at 05:28:27PM +0200, Wladimir wrote:\n>   On Wed, Apr 16, 2014 at 5:20 PM, Pieter Wuille\n>   <[1]pieter.wuille at gmail.com> wrote:\n>\n>   On Wed, Apr 16, 2014 at 5:12 PM, Kevin <[2]kevinsisco61784 at gmail.com>\n>   wrote:\n>   > I think we should get to the bottom of this. \u00c2 Should we assume that\n>   xp is\n>   > not secure enough?\n>\n>     Yes.\n>\n>   It will quickly grow extremely insecure.\n>   People will be actively analyzing patches to post-XP versions to find\n>   security problems that are patched there, to see if they can be\n>   exploited on XP.\n>   Wladimir"
            },
            {
                "author": "Roy Badami",
                "date": "2014-04-16T20:42:24",
                "message_text_only": "On Wed, Apr 16, 2014 at 05:20:41PM +0200, Pieter Wuille wrote:\n> On Wed, Apr 16, 2014 at 5:12 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n> > I think we should get to the bottom of this.  Should we assume that xp is\n> > not secure enough?\n> \n> Yes.\n\nDo we need a similar warning for OS X 10.6?  The EOL of that one is\n*far* less well known than XP (because of Apple's failure to\ncommunicate product lifecycles).\n\nroy\n\n\n> \n> > What is this warning?\n> \n> Windows XP is no longer maintained. Don't use such a system for\n> protecting your money.\n> \n> > Who is issuing this warning?\n> \n> Microsoft: http://windows.microsoft.com/en-us/windows/end-support-help\n> \n> The suggestion here is to make Bitcoin Core detect when it's running\n> on Windows XP, and warn the user (they are likely unaware of the\n> risks).\n> \n> -- \n> Pieter\n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Laszlo Hanyecz",
                "date": "2014-04-16T21:10:56",
                "message_text_only": "I think a warning like this is inappropriate.\n\nThere are many reasons to use an out of date operating system and high level applications like wallets need not concern themselves with the rest of the system.  Maybe the wallet can scan your browser cache and tell you to stop visiting somesite.com too?\n\nIt just sounds like some kind of behavior modification that's being discussed here.. not-so-subtly suggesting that users shell out money for a newer version of the operating system, just to use their bitcoin wallets in a 'blessed' configuration.  This actually sounds very similar to what happens with Apple iPhones.. they somehow manage to 'invalidate' the charging cables and accessories with every major software version.  One day an accessory is working fine, then after the update users get a behavior modification nag every time they use it, urging them to buy a new one.  Along these same lines, might as well put a warning about the registry keys needing to be cleaned, and maybe a 'shock the money' banner[1].\n\nYou guys all know how it works with financial software - there are many organizations using decades old software (and hardware) because they know its shortcomings, they've taken care of them in a way that works them, and they don't want to start all over just for the sake of having the newest version.\n\n-Laszlo\n\n[1] http://www.buzzfeed.com/adobe/obnoxious-banner-ads-that-everyone-remembers\n\n\nOn Apr 16, 2014, at 8:42 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n\n> On Wed, Apr 16, 2014 at 05:20:41PM +0200, Pieter Wuille wrote:\n>> On Wed, Apr 16, 2014 at 5:12 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>> I think we should get to the bottom of this.  Should we assume that xp is\n>>> not secure enough?\n>> \n>> Yes.\n> \n> Do we need a similar warning for OS X 10.6?  The EOL of that one is\n> *far* less well known than XP (because of Apple's failure to\n> communicate product lifecycles).\n> \n> roy\n> \n> \n>> \n>>> What is this warning?\n>> \n>> Windows XP is no longer maintained. Don't use such a system for\n>> protecting your money.\n>> \n>>> Who is issuing this warning?\n>> \n>> Microsoft: http://windows.microsoft.com/en-us/windows/end-support-help\n>> \n>> The suggestion here is to make Bitcoin Core detect when it's running\n>> on Windows XP, and warn the user (they are likely unaware of the\n>> risks).\n>> \n>> -- \n>> Pieter\n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Kevin",
                "date": "2014-04-16T21:29:48",
                "message_text_only": "On 4/16/2014 5:10 PM, Laszlo Hanyecz wrote:\n> I think a warning like this is inappropriate.\n>\n> There are many reasons to use an out of date operating system and high level applications like wallets need not concern themselves with the rest of the system.  Maybe the wallet can scan your browser cache and tell you to stop visiting somesite.com too?\n>\n> It just sounds like some kind of behavior modification that's being discussed here.. not-so-subtly suggesting that users shell out money for a newer version of the operating system, just to use their bitcoin wallets in a 'blessed' configuration.  This actually sounds very similar to what happens with Apple iPhones.. they somehow manage to 'invalidate' the charging cables and accessories with every major software version.  One day an accessory is working fine, then after the update users get a behavior modification nag every time they use it, urging them to buy a new one.  Along these same lines, might as well put a warning about the registry keys needing to be cleaned, and maybe a 'shock the money' banner[1].\n>\n> You guys all know how it works with financial software - there are many organizations using decades old software (and hardware) because they know its shortcomings, they've taken care of them in a way that works them, and they don't want to start all over just for the sake of having the newest version.\n>\n> -Laszlo\n>\n> [1] http://www.buzzfeed.com/adobe/obnoxious-banner-ads-that-everyone-remembers\n>\n>\n> On Apr 16, 2014, at 8:42 PM, Roy Badami <roy at gnomon.org.uk> wrote:\n>\n>> On Wed, Apr 16, 2014 at 05:20:41PM +0200, Pieter Wuille wrote:\n>>> On Wed, Apr 16, 2014 at 5:12 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n>>>> I think we should get to the bottom of this.  Should we assume that xp is\n>>>> not secure enough?\n>>> Yes.\n>> Do we need a similar warning for OS X 10.6?  The EOL of that one is\n>> *far* less well known than XP (because of Apple's failure to\n>> communicate product lifecycles).\n>>\n>> roy\n>>\n>>\n>>>> What is this warning?\n>>> Windows XP is no longer maintained. Don't use such a system for\n>>> protecting your money.\n>>>\n>>>> Who is issuing this warning?\n>>> Microsoft: http://windows.microsoft.com/en-us/windows/end-support-help\n>>>\n>>> The suggestion here is to make Bitcoin Core detect when it's running\n>>> on Windows XP, and warn the user (they are likely unaware of the\n>>> risks).\n>>>\n>>> -- \n>>> Pieter\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nOkay, so how about an autoupdate function which pulls a work around off \nthe server?  Sooner or later, the vulnerabilities must be faced.\n\n\n-- \nKevin"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-16T21:39:27",
                "message_text_only": "On 04/16/2014 02:29 PM, Kevin wrote:\n> Okay, so how about an autoupdate function which pulls a work around off \n> the server?  Sooner or later, the vulnerabilities must be faced.\n\nNO. Bitcoin Core will never have an auto-update functionality. That\nwould be a single point of failure whose compromise could result in the\ntheft of every last bitcoin held in a Bitcoin Core wallet."
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-16T22:00:28",
                "message_text_only": "On Wed, Apr 16, 2014 at 11:39 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> On 04/16/2014 02:29 PM, Kevin wrote:\n>> Okay, so how about an autoupdate function which pulls a work around off\n>> the server?  Sooner or later, the vulnerabilities must be faced.\n>\n> NO. Bitcoin Core will never have an auto-update functionality. That\n> would be a single point of failure whose compromise could result in the\n> theft of every last bitcoin held in a Bitcoin Core wallet.\n\nOr, even accidentally, cause a hard forking bug to be rolled out (or\nworsen one).\n\n-- \nPieter"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-16T15:23:54",
                "message_text_only": "XP is no longer receiving security patches from Microsoft, and hasn't been\nfor some time. There are known remote exploits that aren't going to be\nfixed, ever.\nOn Apr 16, 2014 8:15 AM, \"Kevin\" <kevinsisco61784 at gmail.com> wrote:\n\n>  On 4/16/2014 4:14 AM, Wladimir wrote:\n>\n>  Hello,\n>\n> Today I noticed that even my bank is warning people to not do internet\n> banking with Windows XP.\n>\n> If it is no longer secure enough for online banking it's CERTAINLY not\n> secure enough to run a wallet (for a node only it would be ok-ish as they\n> have no keys to protect).\n>  Any opinions on what to do here? Just warn and allow the user to\n> continue? Redirect them to a 'Windows XP is dangerous' message on\n> bitcoin.org? (Microsoft uses\n> http://windows.microsoft.com/en-us/windows/end-support-help)\n>\n>  The drawback of dropping XP support completely would be that a lot of\n> computers (especially in China and Russia etc) are still running XP, so\n> this could cause the network to lose nodes.\n>\n> If you're maintainer of other wallet software: how are you handling this?\n>  Are you going to drop XP support completely? If so, starting from when?\n>\n> Regards,\n>  Wladimir\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!http://p.sf.net/sfu/NeoTech\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>  I think we should get to the bottom of this.  Should we assume that xp is\n> not secure enough?  What is this warning?  Who is issuing this warning?\n>\n>\n> --\n> Kevin\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/8b0d3aa6/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-16T22:06:47",
                "message_text_only": "Bringing the thread back on-topic:\n\nOn Wed, Apr 16, 2014 at 1:14 AM, Wladimir <laanwj at gmail.com> wrote:\n> Hello,\n> Today I noticed that even my bank is warning people to not do internet\n> banking with Windows XP.\n> If it is no longer secure enough for online banking it's CERTAINLY not\n> secure enough to run a wallet (for a node only it would be ok-ish as they\n> have no keys to protect).\n> Any opinions on what to do here?\n\nI think eventually multi-wallet support will make it so that a wallet\nwon't be created by default. Instead users would create-wallet, which\nwould also give them options like using a HSM (e.g. trezor) or\nmultisig secured wallet.  That would be a great point where, if they\nelect to run and ordinary unsecured wallet, and the software detects\nthat the host is known-to-not-likely-be-secure it could whine at them\nand direct them to a security best practices page.\n\nThen you also avoid whining at people who never run a wallet or use a\nhsm making the host security somewhat moot."
            },
            {
                "author": "Wladimir",
                "date": "2014-04-17T07:39:33",
                "message_text_only": "On Thu, Apr 17, 2014 at 12:06 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> Bringing the thread back on-topic:\n>\n\nThanks.\n\n\n>  On Wed, Apr 16, 2014 at 1:14 AM, Wladimir <laanwj at gmail.com> wrote:\n> > Hello,\n> > Today I noticed that even my bank is warning people to not do internet\n> > banking with Windows XP.\n> > If it is no longer secure enough for online banking it's CERTAINLY not\n> > secure enough to run a wallet (for a node only it would be ok-ish as they\n> > have no keys to protect).\n> > Any opinions on what to do here?\n>\n> I think eventually multi-wallet support will make it so that a wallet\n> won't be created by default.\n\n\nAfter the wallet split-off this will also be easier:\n\n- Bitcoin Core Node\n- Bitcoin Core Wallet\n\nThe node would be as compatible as possible with any OS in existence, but\nthe wallet can be more picky.\n\n\n> Instead users would create-wallet, which\n> would also give them options like using a HSM (e.g. trezor) or\n> multisig secured wallet.\n\n\nHSMs complicate this; I'm not even sure how this will work, are the Trezor\nguys planning to contribute support for their device to wallets including\nBitcoin Core?\n\nHopefully by that time, everyone will have forgotten about XP already :)\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140417/f7614f51/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-17T07:27:38",
                "message_text_only": "On Wed, Apr 16, 2014 at 10:14 PM, Ben Carroll <ben at q9y.net> wrote:\n\nWhile forcefully dropping XP support would seem like a waste of time, and\n> somewhat arbitrary.  If windows builds just stops working for XP, it just\n> stops working, however I don't foresee that happening.  I would make a\n> reasonable guess that the client probably would even run without fuss on\n> Win2k.\n>\n\nThe _WIN32_WINNT define that is used (0x0501) makes Windows XP the lowest\nversion that the software will run on. It would be trivial to bump this to\nWindows Vista (0x0600).\n\nBut in that case the user won't get a helpful message, the software will\noutright refuse to run. So I thought, maybe it makes sense to show a\nmessage that XP support is going to be removed - which must happen sooner\nor later.\n\nThe insecurity of the platform adds urgence to this. So I thought \"let's\nask for advice on the mailing list\".\n\nBut what I get is contortions into unrelated topics (what does auto-update\nhave to do with this?), paranoid banter about 'manipulating users',\ndiversions into other topics. Sure, there's a thin line between being\nhelpful and being seen as manipulative, but it's over the top to compare\nthis with in-browser banners. It could be so much as a one-time message.\n\nBut it's time to close this issue. I'll do nothing here. I will however\nstop testing on a Windows XP VM myself.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140417/fac874f2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Warning message when running wallet in Windows XP (or drop support?)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Laszlo Hanyecz",
                "Wladimir",
                "Adam Back",
                "Roy Badami",
                "Chris Williams",
                "Kevin",
                "Gregory Maxwell",
                "Mark Friedenbach",
                "Melvin Carvalho",
                "Pieter Wuille"
            ],
            "messages_count": 22,
            "total_messages_chars_count": 35155
        }
    },
    {
        "title": "[Bitcoin-development] mid-term bitcoin security (Re: Warning message when running wallet in Windows XP (or drop support?))",
        "thread_messages": [
            {
                "author": "Adam Back",
                "date": "2014-04-16T11:06:27",
                "message_text_only": "Big picture/mid-term I think air-gaps and zero-trust ecosystem components\nare the only solution.  (zero-trust meaning like real-time auditability, or\ntype 2/type 3 exchanges based on atomic-swap, trustless escrow etc).\n\nNeed a mass-production and air-drop of trezors :)\n\nThere is one more problem address-substitution via untrusted network/user\nand weak site with 1mil lines of swiss-cheese security app-store.  So some\nkind of address authentication TOFU.  Aside from X509 bloatware which could\nbe extended from payment protocol to do that, I'd argue for a native simple\nTOFU format like Alan Reiner's multiplier * base approach (where base is the\nTOFU handle).  And/or something like the IBE address proposal (which gives a\nbandwidth efficiently SPV queryable way to check if funds received).  Worst\ncase if weil-pairing gets broken it auto-devolves to the current status\nquo.\n\nBtw not to reignite the stealth vs reusable address bike shedding, but\ncontrarily I was thinking it maybe actually better to try to rebrand address\nas \"invoice number\".  People understand double paying an invoice is not a\ngood idea.  And if they receive the same invoice twice they'll query it.\n\nAdam\n\nOn Wed, Apr 16, 2014 at 11:41:48AM +0200, Wladimir wrote:\n>   On Wed, Apr 16, 2014 at 10:45 AM, Melvin Carvalho\n>   <[1]melvincarvalho at gmail.com> wrote:\n>\n>   XP with a trezor would work fine tho?\n>\n>   Probably - but that's a very rare edge case. People that are security\n>   conscious enough to buy a Trezor will not run XP. Also I don't dare to\n>   say that there is not some way to sociaal-engineer the user with\n>   malware on a compromised OS even with a trezor.\n>   Maybe: for 0.9.2 add a warning message and push people to upgrade\n>   (either to Win8.1 or something else), then in the next major release\n>   0.10.0 drop XP support completely.\n>   Wladimir\n>\n>References\n>\n>   1. mailto:melvincarvalho at gmail.com\n\n>------------------------------------------------------------------------------\n>Learn Graph Databases - Download FREE O'Reilly Book\n>\"Graph Databases\" is the definitive new guide to graph databases and their\n>applications. Written by three acclaimed leaders in the field,\n>this first edition is now available. Download your free book today!\n>http://p.sf.net/sfu/NeoTech\n\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-18T14:26:17",
                "message_text_only": "On Wed, Apr 16, 2014 at 7:06 AM, Adam Back <adam at cypherspace.org> wrote:\n> Btw not to reignite the stealth vs reusable address bike shedding, but\n> contrarily I was thinking it maybe actually better to try to rebrand address\n> as \"invoice number\".  People understand double paying an invoice is not a\n> good idea.  And if they receive the same invoice twice they'll query it.\n\nAnd that is certainly how BitPay works today, including the language used.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-18T14:39:14",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/16/2014 11:06 AM, Adam Back wrote:\n> Btw not to reignite the stealth vs reusable address bike shedding,\n> but contrarily I was thinking it maybe actually better to try to\n> rebrand address as \"invoice number\".  People understand double\n> paying an invoice is not a good idea.  And if they receive the same\n> invoice twice they'll query it.\n\n\"Invoice number\" is still too coarse-grained.\n\nIf anyone cared about user privacy, then whatever was supplied to\nusers as an \"invoice number\" would be a BIP32 extended public key, or\nsomething equivalent to that, which would allow the payer to create as\nmany unique addresses as they needed to avoid merging inputs.\n\nAlso, from a business accounting perspective it's broken and wrong to\nassume a 1:1 relationship between payment transactions and invoices\nanyway:\n\nhttp://bitcoinism.blogspot.com/2014/01/business-accounting-and-bitcoin-privacy.html\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTUTkSAAoJECoisBQbQ4v0t44H/1dl/QFBbJKNatghyaCnrcYE\neQlq6RtUo9ZCGTehg4K8Q3wlHcNxTi5ojkZ0ccf9O6lWFAO3Dij9jeiUB0irX1SP\nleGVV6I3CU6DYMLN+1AHqeHfGQ6T367zdlc69TO5E3Z3nEfStWVAnp6BwraDpgLs\nOslTSlWiqAFZRrP9G18E7OF/jZcjxdW5QUuQk1ktW0yyZpL6LuwWHqRwoJ0LuR/V\nnL/OeUUHD3k563c4et5uejVkoGRkLOnk9rLiAQNeX6FfL5T4t2Ae/45PywiLmXoN\n7Egd9g7pDU0qZMnXTd9/JLMi1Vlx61pKogg3xSj/NLQuUwJJDTbua7dxjXOtC8I=\n=9KG3\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140418/e3436a10/attachment.bin>"
            }
        ],
        "thread_summary": {
            "title": "mid-term bitcoin security (Re: Warning message when running wallet in Windows XP (or drop support?))",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Back",
                "Justus Ranvier",
                "Jeff Garzik"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4934
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin Core Nightly Builds",
        "thread_messages": [
            {
                "author": "Warren Togami Jr.",
                "date": "2014-04-17T01:43:17",
                "message_text_only": "The Bitcoin Core developers have a desire to do a mostly bug-fix, cleanup\nand translation update release in v0.9.2 a few weeks from now.  You do not\nneed to be a developer to help!  With these unofficial nightly builds,\npower users can more easily aid in testing of the master branch which will\nhelp to find bugs and polish things up faster.  Additionally translators\ncan more easily run the latest code and see what strings need to be\ntranslated as we rapidly approach the next stable release.\n\nhttps://bitcointalk.org/index.php?topic=571414.0\nRead more details here.\n\nWarren Togami\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/da6bc74c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin Core Nightly Builds",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Warren Togami Jr."
            ],
            "messages_count": 1,
            "total_messages_chars_count": 766
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-development Digest, Vol 35, Issue 61",
        "thread_messages": [
            {
                "author": "Ron",
                "date": "2014-04-17T03:37:56",
                "message_text_only": "________________________________\n...\nMessage: 4\nDate: Wed, 16 Apr 2014 21:43:10 +0200\nFrom: Adam Back <adam at cypherspace.org>\nSubject: Re: [Bitcoin-development] Warning message when running wallet\n\u00a0\u00a0\u00a0 in Windows XP (or drop support?)\nTo: Wladimir <laanwj at gmail.com>\nCc: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\nMessage-ID: <20140416194310.GA11552 at netbook.cypherspace.org>\nContent-Type: text/plain; charset=iso-8859-1; format=flowed\n\nNot to get snarky or OS elitist but as I understand it windows security,\neven during its support period has been measured in low digit number of days\nin the year when is NOT an outstanding known remote root compromise or\ncombination of remote user compromise + priviledge escalation.\u00a0 Add in\nphishing, watering holes, malware and the average windows computer is\nprobably compromised a dozen times over.\u00a0 Apparently for sometime it was not\neasily possible to secure it install boot - install OS, connect to network\nto download security updates, IP range scanned and compromised faster than\nyou can patch it.\n\nAdam\n...\n________________________________________________________________\nRight.\n\nThe trick was to install off line, add your own (free or commercial s/w firewall) then \nconnect, behind a router that had no port forwarding, etc.\u00a0 Hell before cheap \nrouters I ran one Win95B as I remember, using ICS to a hub that feed my LAN and in front \nwas a dialup and a cable modem.\u00a0 Atguard was the S/W firewall, worked great and \nnever was penetrated.\n\nAnd if one used IE for anything, or any form of Outlook one was and still is a fool. \nThere are still fools who think that their Windows Vista, 7, 8 or 8.1 is safe because \nMS updates it days, weeks or longer after an exploit is found/exposed/known... And\nthey feel that they can install and run anything anyone says is OK?\u00a0 No firewall can protect \nagainst shall we say digital naivety. \n\nAh what fools these mortals be.\u00a0 Then there are others that have never used IE, \nnever installed/enabled Outlook, never enabled UPNP &/or, DCOM; never executed \n\"unknown\" s/w, and always had their own s/w firewall on, long before MS even \nthought of \"Windows Firewall\".\u00a0 Does anyone (other than zone alarm) check for \ndata leaving one's computer \"unexpectedely\"?\u00a0 Those machines could run Win95B, \nWin98SE, NT4, Win2K, XP pro long past MS's \"cut off date\" and barely notice\nanything. The show stopper is usually the browser (FF) or Adobe flash or pdf \ndemanding more OS functions, usually so that they can perform more functions \nmore poorly, I'm sorry to say.\n\nCheck the live desktop OSs connected to the internet, by version at \nMarket share for mobile, browsers, operating systems and search engines | NetMarketShare \n\n\n \n Market share for mobile, browsers, operating systems and search engines | NetMarketShare\nMarket share for mobile, browsers, operating systems, search engines and social media. Mobile market share and desktop market share data.  \nView on www.netmarketshare.com Preview by Yahoo  \n\u00a0 last I checked, XP was still ~29% and all Windows versions, ~90%\n\nComputer safety, like driver safety, has more to do with the knowledge and skill \nof the operator/driver, than the \"newness\" of the car/computer.\u00a0 A good driver/computer \nuser, never gets into a situation that he/she can't repair/reverse/prevent/recover from\netc.\u00a0 Drive/run a motorcycle/computer and you will learn defensive driving/computing \n\nreally fast or be roadkill on the highway/digital highway.\n\nRon\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140416/64a7443b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-development Digest, Vol 35, Issue 61",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Ron"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3665
        }
    },
    {
        "title": "[Bitcoin-development] question about ProcessMessage()",
        "thread_messages": [
            {
                "author": "Sharon Dvir",
                "date": "2014-04-17T09:43:19",
                "message_text_only": "Hi, in main.cpp, ProcessMessage(), the line:\nif (vAddr.size() < 1000) that appears at about line 3290\n(not sure which, as I have made changes.)\nWhat is the purpose of this line?\nvAddr.size() was already checked at about line 3240, and if it was >\n1000, the function has returned.\nIs pfrom->fGetAddr allowed to be true iff  vAddr.size()==1000 ?\nCould not find it in list archive.\nThanks."
            },
            {
                "author": "Matthieu Riou",
                "date": "2014-04-17T18:00:04",
                "message_text_only": "Github has a nice feature that lets you link to a specific line of code:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L3549\n\nIs it the line you're referring to? It just flags the peer as at that point\nwe know we don't have more addresses to learn from it (peers send 1000\naddrs). The previous\ncheck<https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L3497>only\napplies for peers sending an addr message that would have more than\n1000 addresses, which is disallowed to prevent flooding. And no number is\nboth greater and lesser than 1000 :)\n\nMatthieu\n\n\nOn Thu, Apr 17, 2014 at 2:43 AM, Sharon Dvir <sharondvir at cs.huji.ac.il>wrote:\n\n> Hi, in main.cpp, ProcessMessage(), the line:\n> if (vAddr.size() < 1000) that appears at about line 3290\n> (not sure which, as I have made changes.)\n> What is the purpose of this line?\n> vAddr.size() was already checked at about line 3240, and if it was >\n> 1000, the function has returned.\n> Is pfrom->fGetAddr allowed to be true iff  vAddr.size()==1000 ?\n> Could not find it in list archive.\n> Thanks.\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140417/35590b2a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "question about ProcessMessage()",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Sharon Dvir",
                "Matthieu Riou"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2214
        }
    },
    {
        "title": "[Bitcoin-development] Timed testing",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-17T12:25:24",
                "message_text_only": "I'm implementing a new testing mode that produces blocks\nperiodically. You can get what I have so far here:\n\nhttps://github.com/jtimon/bitcoin/tree/timed\n\nIt depends on pull request #3824 with some improvements on\nCChainParams, but after that the changes required to add this new\nmode are very small:\n\nhttps://github.com/jtimon/bitcoin/commit/445321928a143cb9a6f56777cbb7479dd32c3bcd\n\nI guess I need a new genesis block, different magic numbers, etc. So\nthis is definitely not ready.\nYou can run it like this:\n\nbitcoind -timedtest -gen=1 blocktime=2000\n\nblocktime defaults to 1000 milliseconds for timedtest mode and 0 for\nthe rest of the modes.\n\nWhat could this testing mode be useful for?\n\nBasically, simulations.\nFor example, you could run several nodes implementing different mining\npolicies. Let's say I want to mine 50% of the blocks with standard policy,\n25% with policy A and 25% with policy B. I can run 1 one for each of\none with block times 2000, 1000 and 1000 respectively.\n\nMaybe I want to detect performance bottlenecks by stressing this mode\nwith as many transaction as can be processed, maybe removing the\nblock size limits in the simulations.\n\nBut this still doesn't serve for hardfork or double-spend attacks\nsimulations without calculating any pow, which would be another\ninteresting feature for a new testing mode.\nI would like to implement the new mode following as the concept of\nprivate chains described in freimarkets:\n\nhttp://freico.in/docs/freimarkets.pdf\nhttps://github.com/jtimon/freimarkets/blob/master/doc/freimarkets_specs.org#private-ledgers\nhttps://github.com/jtimon/freimarkets/blob/master/doc/freimarkets_specs.org#off-chain-transactions\n\nI know this could be considered a \"non-bitcoinish\" application and\ntherefore be controversial as discussed in PR 3824, so I want to keep\nthe conversation focused on testing use cases useful to bitcoin itself\nonly: additional changes can be implemented elsewhere.\nOne way I think you could support chain races simulations by using a\nprivate mode could be the following:\n\n1) The private mode works like the timed mode in how often it\n   produces blocks.\n\n2) In private mode you replace the pow-related fields with a\n   blockPubkeyScript and a lastBlockSigScript fields. In the genesis\n   block, lastBlockSigScript is empty and the initial\n   blockPubkeyScript can be an optional parameter like blocktime. You\n   can set any valid script, probably p2sh, maybe with multisig to\n   allow different nodes to sign.\n\n3) In this context, longer chains mean \"more work\". Another way to\n   see it is that all blocks just contain work==1 in them.\n\nSo let's say we want to simulate an attack using 50% standard and 50%\nattacker blocks. You set up the private mode script to be a 1 of 2\nmultisig and make each node sign always with the same private key\n(maybe an additional parameter).\nYou make the attacker reject any blocks from height X that he hasn't\nsigned himself to get the result you wanted: the standard node will\nproduce blocks on top of the longest chain while the attacker will\nonly hash on top of his own blocks.\n\nSo my question to the community is, how invasive is this to bitcoin's\nsource code?\nIn my opinion, done properly could actually result (apart from getting\nthe new features) in more readable code, not less, since you will\nprobably need to make sure proof of work functionality is properly\nencapsulated during the implementation process (see PR 3839 for a first\nstep on that direction).\nBut, should I push a private mode to the core or just the timed one\nand implement the private mode elsewhere?\n\nOf course other comments on the parameters, defaults or any other\ndesign or implementation details are also welcomed.\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-04-17T13:00:54",
                "message_text_only": "How is this different from just running in -regtest mode and asking the\nnodes to generate a block after 1 or 2 seconds?\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140417/4fc02e51/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-17T15:11:05",
                "message_text_only": "On 4/17/14, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> How is this different from just running in -regtest mode and asking the\n> nodes to generate a block after 1 or 2 seconds?\n\nThere's no difference, the -timedtest mode does exactly that. But\nautomatically instead of having to manually ask for a new block every\nsecond.\nI assume your position is that the difference is too small to justify\na new mode, or that you just don't see any value in it.\n\nThe -private mode, on the other hand, would allow you to simulate\nproof of work attacks as described in the previous post, but maybe\nthere's a simpler way to do the same solely using regtest/timedtest.\n\nMaybe I should have asked the following questions before proposing anything:\n\n1) How does someone simulate a pow race situation without doing any\npow right now?\nDoes anybody try these things? How?\n\n2) If I wanted to measure validation performance, to get the number of\npeak tps that could be processed without taking block sides or network\nlatency into account, how would I do that? Has anybody tried this\nbefore?"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-17T15:49:40",
                "message_text_only": ">\n> 2) If I wanted to measure validation performance, to get the number of\n> peak tps that could be processed without taking block sides or network\n> latency into account, how would I do that? Has anybody tried this\n> before?\n\n\nYou can just reindex/replay the chain. It's been done many times.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140417/a661951e/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-17T16:09:45",
                "message_text_only": "On 4/17/14, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> 2) If I wanted to measure validation performance, to get the number of\n>> peak tps that could be processed without taking block sides or network\n>> latency into account, how would I do that? Has anybody tried this\n>> before?\n>\n>\n> You can just reindex/replay the chain. It's been done many times.\n\nYes, thank you. I guess that's what everybody is doing to measure\nvalidation performance.\nSo I guess the timedtest mode doesn't make much sense, at most only as\nthe blocktime parameter defaulting to zero. If bool\nMineBlocksOnDemand() gets refactored out of ChainParams into a\nparameter (maybe just use genproclimit ?), you can have the periodic\nblock generation and the generation on demand reusing the same regtest\nmode.\n\nSo it seems a new mode only makes sense if the -private mode makes\nsense, which in turn only makes sense to include in bitcoind if it's\nuseful enough for the network attack simulations, which remains the\nopen question."
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-04-17T17:07:48",
                "message_text_only": "On Thu, Apr 17, 2014 at 12:09 PM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> So it seems a new mode only makes sense if the -private mode makes\n> sense, which in turn only makes sense to include in bitcoind if it's\n> useful enough for the network attack simulations, which remains the\n> open question.\n>\n\nUnless I misunderstood what your private mode does, you can get the same\neffect with -regtest by just controlling nodes connectivity. For example:\n\nStart 2 nodes, connected to each other. Mine a -regtest chain they both\nagree on.\n\nRestart them so they're not connected.  Have one mine normally,\nhave the other  mine... however you like to simulate some attack (deep\nchain re-org, double-spend,\nwhatever).\n\nTo simulate launching the attack, connect them together again, let the two\nchains compete and see\nwhat happens.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140417/481e77ff/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-17T17:43:35",
                "message_text_only": "Thank you for all the explanations on how to use regtest to reproduce\nthe example scenarios.\nIt seems like a private mode wouldn't be particularly helpful for\ntesting so I won't create a pull request and will just work on the\nprivate chains separately from bitcoind.\n\nGoing back to chainparam modes in general, I've heard Sipa complain\nsome times about regtest being too specific, arguing that some of the\nbehaviors should be specified as independent parameters instead of\nchainparams attributes.\nOne example could be bool CChainPrams::MineBlocksOnDemand() (see\nhttps://github.com/jtimon/bitcoin/commit/5bd4bc7f3694e46568c9276f0cb26402dfb99718\n).\nIf that was an independent parameter that people set to true when\nusing regtest, the blocktime param I was proposing for -timedtest\ncould also be implemented as an independent parameter without any need\nfor a new mode.\n\nIt's not clear to me if the timedtest parameter would be useful for\nbitcoind testing or not, but it's just something I've noticed while\nplaying with this part of the code.\nSipa, is this the kind of thing you refer to when you say regtest is\ntoo specific?\nDo you have any suggestion on how to solve the issue as part of PR 3824?\n\nWell, any suggestions from anyone on how to improve PR 3824 are\nwelcomed, I was just asking specifically to sipa because as said it is\nmy understanding that he had some complaints about regtest and I think\nthis is something simple enough for me to start contributing to\nbitcoind. Specially given that I was going to review all that part of\nthe code to externally write the private mode anyway.\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-17T16:35:52",
                "message_text_only": "Not necessarily. Running a private server involves listening to the p2p\nnetwork for incoming transactions, performing validation on receipt and\norganizing a mempool, performing transaction selection, and relaying\nblocks to auditors - none of which is tested in a reindex.\n\nA reindex would give you an optimistic upper bound though, if that's all\nyou care about.\n\nOn 04/17/2014 08:49 AM, Mike Hearn wrote:\n>     2) If I wanted to measure validation performance, to get the number of\n>     peak tps that could be processed without taking block sides or network\n>     latency into account, how would I do that? Has anybody tried this\n>     before?\n> \n> You can just reindex/replay the chain. It's been done many times."
            },
            {
                "author": "Brian Hoffman",
                "date": "2014-04-17T14:37:45",
                "message_text_only": "\"So my question to the community is, how invasive is this to bitcoin's\nsource code?\"\n\nI'd say not very considering you have regression testing mode.\n\n\nOn Thu, Apr 17, 2014 at 8:25 AM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> I'm implementing a new testing mode that produces blocks\n> periodically. You can get what I have so far here:\n>\n> https://github.com/jtimon/bitcoin/tree/timed\n>\n> It depends on pull request #3824 with some improvements on\n> CChainParams, but after that the changes required to add this new\n> mode are very small:\n>\n>\n> https://github.com/jtimon/bitcoin/commit/445321928a143cb9a6f56777cbb7479dd32c3bcd\n>\n> I guess I need a new genesis block, different magic numbers, etc. So\n> this is definitely not ready.\n> You can run it like this:\n>\n> bitcoind -timedtest -gen=1 blocktime=2000\n>\n> blocktime defaults to 1000 milliseconds for timedtest mode and 0 for\n> the rest of the modes.\n>\n> What could this testing mode be useful for?\n>\n> Basically, simulations.\n> For example, you could run several nodes implementing different mining\n> policies. Let's say I want to mine 50% of the blocks with standard policy,\n> 25% with policy A and 25% with policy B. I can run 1 one for each of\n> one with block times 2000, 1000 and 1000 respectively.\n>\n> Maybe I want to detect performance bottlenecks by stressing this mode\n> with as many transaction as can be processed, maybe removing the\n> block size limits in the simulations.\n>\n> But this still doesn't serve for hardfork or double-spend attacks\n> simulations without calculating any pow, which would be another\n> interesting feature for a new testing mode.\n> I would like to implement the new mode following as the concept of\n> private chains described in freimarkets:\n>\n> http://freico.in/docs/freimarkets.pdf\n>\n> https://github.com/jtimon/freimarkets/blob/master/doc/freimarkets_specs.org#private-ledgers\n>\n> https://github.com/jtimon/freimarkets/blob/master/doc/freimarkets_specs.org#off-chain-transactions\n>\n> I know this could be considered a \"non-bitcoinish\" application and\n> therefore be controversial as discussed in PR 3824, so I want to keep\n> the conversation focused on testing use cases useful to bitcoin itself\n> only: additional changes can be implemented elsewhere.\n> One way I think you could support chain races simulations by using a\n> private mode could be the following:\n>\n> 1) The private mode works like the timed mode in how often it\n>    produces blocks.\n>\n> 2) In private mode you replace the pow-related fields with a\n>    blockPubkeyScript and a lastBlockSigScript fields. In the genesis\n>    block, lastBlockSigScript is empty and the initial\n>    blockPubkeyScript can be an optional parameter like blocktime. You\n>    can set any valid script, probably p2sh, maybe with multisig to\n>    allow different nodes to sign.\n>\n> 3) In this context, longer chains mean \"more work\". Another way to\n>    see it is that all blocks just contain work==1 in them.\n>\n> So let's say we want to simulate an attack using 50% standard and 50%\n> attacker blocks. You set up the private mode script to be a 1 of 2\n> multisig and make each node sign always with the same private key\n> (maybe an additional parameter).\n> You make the attacker reject any blocks from height X that he hasn't\n> signed himself to get the result you wanted: the standard node will\n> produce blocks on top of the longest chain while the attacker will\n> only hash on top of his own blocks.\n>\n> So my question to the community is, how invasive is this to bitcoin's\n> source code?\n> In my opinion, done properly could actually result (apart from getting\n> the new features) in more readable code, not less, since you will\n> probably need to make sure proof of work functionality is properly\n> encapsulated during the implementation process (see PR 3839 for a first\n> step on that direction).\n> But, should I push a private mode to the core or just the timed one\n> and implement the private mode elsewhere?\n>\n> Of course other comments on the parameters, defaults or any other\n> design or implementation details are also welcomed.\n>\n> --\n> Jorge Tim\u00f3n\n>\n> http://freico.in/\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140417/b7b7e1bd/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Timed testing",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Brian Hoffman",
                "Mike Hearn",
                "Jorge Tim\u00f3n",
                "Gavin Andresen",
                "Mark Friedenbach"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 14867
        }
    },
    {
        "title": "[Bitcoin-development] Tree-chains preliminary summary",
        "thread_messages": [
            {
                "author": "Tier Nolan",
                "date": "2014-04-17T21:41:55",
                "message_text_only": "How does this system handle problems with the lower chains after they have\nbeen \"locked-in\"?\n\nThe rule is that if a block in the child chain is pointed to by its parent,\nthen it effectively has infinite POW?\n\nThe point of the system is that a node monitoring the parent chain only has\nto watch the header chain for its 2 children.\n\nA parent block header could point to an invalid block in one of the child\nchains.  That parent block could end up built on top of before the problem\nwas discovered.\n\nThis would mean that a child chain problem could cause a roll-back of a\nparent chain.  This violates the principle that parents are dominant over\nchild chains.\n\nAlternatively, the child chain could discard the infinite POW blocks, since\nthey are illegal.\n\nP1 -> C1\nP2 -> ---\nP3 -> C3\nP4 -> C5\n\nIt turns out C4 (or C5) was an invalid block\n\nP5 -> C4'\nP6 -> ---\nP7 -> C8'\n\nThis is a valid sequence.  Once P7 points at C8, the alternative chain\ndisplaces C5.\n\nThis displacement could require a compact fraud proof to show that C4 was\nan illegal block and that C5 was built on it.\n\nThis shouldn't happen if the miner was actually watching the log(N) chains,\nbut can't be guaranteed against.\n\nI wonder if the proof of stake \"nothing is at stake\" principle applies\nhere.  Miners aren't putting anything at stake by merge mining the lower\nchains.\n\nAt minimum, they should get tx-fees for the lower chains that they merge\nmine.  The rule could require that the minting reward is divided over the\nmerge mined chains.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140417/61776f00/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Tree-chains preliminary summary",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tier Nolan"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1688
        }
    },
    {
        "title": "[Bitcoin-development] Update alert false positives",
        "thread_messages": [
            {
                "author": "Oliver Egginger",
                "date": "2014-04-19T21:34:23",
                "message_text_only": "Hello,\n\nbitcoin-qt produces on many systems an unnecessary alert:\n\n\"URGENT: Upgrade required: see https://www.bitcoin.org/heartbleed\"\n\nEspecially the stable channel is affected:\n\nhttps://launchpad.net/~bitcoin/+archive/bitcoin\n\nThis is a bit frightening for normal users. I think the best would be to\nturn off this message (if possible). It produces too many false\npositives and motivates people to maybe harmful workarounds.\n\n- oliver"
            },
            {
                "author": "patrick",
                "date": "2014-04-19T21:39:51",
                "message_text_only": "The alert system filters based on the clients version number.\n\nThe ubuntu bitcoin ppa is dynamically linked to openssl unlike the \nbinaries available from bitcoin.org\n\nThere is no way currently to notify users of 0.9.0 w/ static linking \nwithout also notify 0.9.0 w/ dynamic linking.\n\nOn 04/19/2014 04:34 PM, Oliver Egginger wrote:\n> Hello,\n>\n> bitcoin-qt produces on many systems an unnecessary alert:\n>\n> \"URGENT: Upgrade required: see https://www.bitcoin.org/heartbleed\"\n>\n> Especially the stable channel is affected:\n>\n> https://launchpad.net/~bitcoin/+archive/bitcoin\n>\n> This is a bit frightening for normal users. I think the best would be to\n> turn off this message (if possible). It produces too many false\n> positives and motivates people to maybe harmful workarounds.\n>\n> - oliver\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-04-19T22:41:43",
                "message_text_only": "Looks like Matt just pushed out new builds to the Ubuntu PPA, so this issue should resolve itself shortly.\n\n- Jameson\n\nOn 04/19/2014 05:39 PM, patrick wrote:\n> The alert system filters based on the clients version number.\n> \n> The ubuntu bitcoin ppa is dynamically linked to openssl unlike the \n> binaries available from bitcoin.org\n> \n> There is no way currently to notify users of 0.9.0 w/ static linking \n> without also notify 0.9.0 w/ dynamic linking.\n> \n> On 04/19/2014 04:34 PM, Oliver Egginger wrote:\n>> Hello,\n>>\n>> bitcoin-qt produces on many systems an unnecessary alert:\n>>\n>> \"URGENT: Upgrade required: see https://www.bitcoin.org/heartbleed\"\n>>\n>> Especially the stable channel is affected:\n>>\n>> https://launchpad.net/~bitcoin/+archive/bitcoin\n>>\n>> This is a bit frightening for normal users. I think the best would be to\n>> turn off this message (if possible). It produces too many false\n>> positives and motivates people to maybe harmful workarounds.\n>>\n>> - oliver\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "Update alert false positives",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jameson Lopp",
                "patrick",
                "Oliver Egginger"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3959
        }
    },
    {
        "title": "[Bitcoin-development] \"bits\": Unit of account",
        "thread_messages": [
            {
                "author": "Mike Gehl",
                "date": "2014-04-20T12:35:08",
                "message_text_only": "The usefulness of a \"bitcoin\" unit will decrease as the value of the\nnetwork increases. Today, a majority of transactions are denominated\nin fractions of a bitcoin. As a consequence, millibitcoin (mBTC) and\nmicrobitcoin (uBTC) units have been introduced to alleviate the\ndecimal problem.\n\nWhile SI units are great for people well versed in them, there is a\nvery good reason people aren't asking for 100 micro dollars in change.\nThe average person is not going to be confident that the prefix they\nare using is the correct one, people WILL send 1000x more or less than\nintended if we go down this road, and these mistakes will happen\nfrequently. Labeling should be easy enough for kindergarten kids.\n\nI propose that users are offered a preference to denominate the\nBitcoin currency in a unit called a bit. Where one bitcoin (BTC)\nequals one million bits (bits) and one bit equals 100 satoshis.\n\nFor a user discussion on the topic see:\nhttp://www.reddit.com/r/Bitcoin/comments/23flcn/bits_instead_of_%CE%BCbtc/\nhttp://www.reddit.com/r/Bitcoin/comments/1rmto3/its_bits/"
            },
            {
                "author": "Rob Golding",
                "date": "2014-04-20T13:15:57",
                "message_text_only": "> The average person is not going to be confident that the prefix they\n> are using is the correct one, \n\nThe use of any 'prefix' is one of choice and entirely unnecessary, and there\nare already established 'divisions' in u/mBTC for those that feel they need\nto use such things.\n\n> people WILL send 1000x more or less than\n> intended if we go down this road, \n\nExceptionally unlikely - I deal every day with currencies with 0, 2 and 3\ndp's in amount ranging from 'under 1 whole unit' to tens of thousands - Not\nonce in 20 years has anyone ever 'sent' more or less than intended - oh,\nthey've 'intended' to underpay just fine, but never *unintended*.\n\n> I propose that users are offered a preference to denominate the\n> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n> equals one million bits (bits) and one bit equals 100 satoshis.\n\nI propose that for people unable to understand what a bitcoin is, they can\njust use satoshi's and drop this entire proposal.\n\nRob"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-20T14:28:52",
                "message_text_only": "People on this list are mostly engineers who have no problem dealing with magnitudes and have rather limited empathy for people who have a problem with them.\nThey also tend to think, that because they invented money 2.0 they would not need to care of finance\u2019s or people\u2019s current customs. \n\nThe importance of their decisions in these questions will fade as people already use wallets other than the core.\n\nBring this particular discussion elsewhere, to the wallet developer. \n\nBTW the topic was discussed here several times, you have my support and Jeff Garzik\u2019s.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 20.04.2014, at 15:15, Rob Golding <rob.golding at astutium.com> wrote:\n\n>> The average person is not going to be confident that the prefix they\n>> are using is the correct one, \n> \n> The use of any 'prefix' is one of choice and entirely unnecessary, and there\n> are already established 'divisions' in u/mBTC for those that feel they need\n> to use such things.\n> \n>> people WILL send 1000x more or less than\n>> intended if we go down this road, \n> \n> Exceptionally unlikely - I deal every day with currencies with 0, 2 and 3\n> dp's in amount ranging from 'under 1 whole unit' to tens of thousands - Not\n> once in 20 years has anyone ever 'sent' more or less than intended - oh,\n> they've 'intended' to underpay just fine, but never *unintended*.\n> \n>> I propose that users are offered a preference to denominate the\n>> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n>> equals one million bits (bits) and one bit equals 100 satoshis.\n> \n> I propose that for people unable to understand what a bitcoin is, they can\n> just use satoshi's and drop this entire proposal.\n> \n> Rob\n> \n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/1fb70649/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/1fb70649/attachment.sig>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-04-20T14:52:42",
                "message_text_only": "If you absolutely want a name for some small unit (which may be\nvaluable, not knocking that part of the idea), please use anything\nother than \"bits\", which is already a massively overloaded term that\nwill confuse the hell out of people:\n\nHarddrive costs measured in \"bits per gigabyte\"?\nAn itunes movie download that costs 200,000 bits and takes 804.2\nmegabytes of space?\nOr a 10-megabit internet connection costing 10,000,000 bits per month?\n\nIt's especially bad given that bitcoin will likely be adopted first\nfor online use, where the competing (and more recognized) meaning of\n\"bit\" is most prevalent.\n\nNot to mention the overlap within bitcoin itself, with people already\nusing \"millibits\" in conversation as a shorthand for mBTC. Hence one\nnew \"bit\" is exactly 1/1000 of the old \"millibit\".\n\nMake something up if you have to, or just use satoshis.\n\nOn Sun, Apr 20, 2014 at 10:28 AM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> People on this list are mostly engineers who have no problem dealing with\n> magnitudes and have rather limited empathy for people who have a problem\n> with them.\n> They also tend to think, that because they invented money 2.0 they would not\n> need to care of finance\u2019s or people\u2019s current customs.\n>\n> The importance of their decisions in these questions will fade as people\n> already use wallets other than the core.\n>\n> Bring this particular discussion elsewhere, to the wallet developer.\n>\n> BTW the topic was discussed here several times, you have my support and Jeff\n> Garzik\u2019s.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n> On 20.04.2014, at 15:15, Rob Golding <rob.golding at astutium.com> wrote:\n>\n> The average person is not going to be confident that the prefix they\n> are using is the correct one,\n>\n>\n> The use of any 'prefix' is one of choice and entirely unnecessary, and there\n> are already established 'divisions' in u/mBTC for those that feel they need\n> to use such things.\n>\n> people WILL send 1000x more or less than\n> intended if we go down this road,\n>\n>\n> Exceptionally unlikely - I deal every day with currencies with 0, 2 and 3\n> dp's in amount ranging from 'under 1 whole unit' to tens of thousands - Not\n> once in 20 years has anyone ever 'sent' more or less than intended - oh,\n> they've 'intended' to underpay just fine, but never *unintended*.\n>\n> I propose that users are offered a preference to denominate the\n> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n> equals one million bits (bits) and one bit equals 100 satoshis.\n>\n>\n> I propose that for people unable to understand what a bitcoin is, they can\n> just use satoshi's and drop this entire proposal.\n>\n> Rob\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-04-21T08:52:56",
                "message_text_only": "Let me make a sacrilegious proposal: keep using the name \"bitcoin\", and\nshift the decimal point.\n\nThere would be a short adaption period, where people will need to talk\nabout \"new bitcoins\" and \"old bitcoins\" in order to disambiguate them.\nHowever, Bitcoin users are techies, so I don't think that the ambiguity\nwill be a big issue. I don't think lots of people will mistakenly send\n1000 times more than the amount they intended.\n\nThe name \"bitcoin\" has a huge advantage over any other proposal, because\nit is already established. No marketing is needed.\n\nThis kind of renaming has already taken place many times in history,\nbecause the currency was debased. Bitcoin would be the first time it\nhappens in the other direction."
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-21T09:34:42",
                "message_text_only": "Thomas V: \n\nYour proposal misses the points that:\n\n- this is about a unit with 1e-6 Bitcoins or 100 satoshis. \n- it is not about people who know Bitcoin and are techies, but about those who don\u2019t and aren\u2019t.\n\nThe reasons for such a unit are more than shifting the comma some places for convinience, \nbut to align Bitcoin with capabilities of existing financial software and customs of finance and average people,\nand ISO standard of currency abbreviations.\n\nbit and XBT seems to check the boxes. \n\nI would love to have some feedback on xbit as per my previous mail.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/2b053b14/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/2b053b14/attachment.sig>"
            },
            {
                "author": "Natanael",
                "date": "2014-04-22T14:55:54",
                "message_text_only": "I am in favor of xbit, my only concern is if average Joes will consider\nthat name \"stupid\" (like various attempts at \"cool\" branding with unusual\nletters like Q, X, Z, etc). We should see if we can get support for it in\nthe community and if there would be any notable opposition against it or\nnot. If there's no significant opposition and most people are in favor, I'd\nsay go ahead.\n\n- Sent from my phone\nDen 21 apr 2014 11:38 skrev \"Tamas Blummer\" <tamas at bitsofproof.com>:\n\n> Thomas V:\n>\n> Your proposal misses the points that:\n>\n> - this is about a unit with 1e-6 Bitcoins or 100 satoshis.\n> - it is not about people who know Bitcoin and are techies, but about those\n> who don\u2019t and aren\u2019t.\n>\n> The reasons for such a unit are more than shifting the comma some places\n> for convinience,\n> but to align Bitcoin with capabilities of existing financial software and\n> customs of finance and average people,\n> and ISO standard of currency abbreviations.\n>\n> bit and XBT seems to check the boxes.\n>\n> I would love to have some feedback on xbit as per my previous mail.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/101e72c4/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-20T14:53:05",
                "message_text_only": "I told him specifically to bring it here (on a pull request for\nBitcoin Core), as there is no point in making such convention changes\nto just one client.\n\nI wasn't aware of any discussion about the \"bits\" proposal here before.\n\nOn Sun, Apr 20, 2014 at 4:28 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> People on this list are mostly engineers who have no problem dealing with\n> magnitudes and have rather limited empathy for people who have a problem\n> with them.\n> They also tend to think, that because they invented money 2.0 they would not\n> need to care of finance's or people's current customs.\n>\n> The importance of their decisions in these questions will fade as people\n> already use wallets other than the core.\n>\n> Bring this particular discussion elsewhere, to the wallet developer.\n>\n> BTW the topic was discussed here several times, you have my support and Jeff\n> Garzik's.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n> On 20.04.2014, at 15:15, Rob Golding <rob.golding at astutium.com> wrote:\n>\n> The average person is not going to be confident that the prefix they\n> are using is the correct one,\n>\n>\n> The use of any 'prefix' is one of choice and entirely unnecessary, and there\n> are already established 'divisions' in u/mBTC for those that feel they need\n> to use such things.\n>\n> people WILL send 1000x more or less than\n> intended if we go down this road,\n>\n>\n> Exceptionally unlikely - I deal every day with currencies with 0, 2 and 3\n> dp's in amount ranging from 'under 1 whole unit' to tens of thousands - Not\n> once in 20 years has anyone ever 'sent' more or less than intended - oh,\n> they've 'intended' to underpay just fine, but never *unintended*.\n>\n> I propose that users are offered a preference to denominate the\n> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n> equals one million bits (bits) and one bit equals 100 satoshis.\n>\n>\n> I propose that for people unable to understand what a bitcoin is, they can\n> just use satoshi's and drop this entire proposal.\n>\n> Rob\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-20T15:05:47",
                "message_text_only": "Here is an earlier reference to bits:\n\nhttps://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04248.html\n\nI forgot that Alan Reiner was also supporting a unit equals to bits :\n\nhttps://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04264.html\n\nand here the earlier going back to March 2013 and a poll at that time pushing for XBT being 1 bit\n\nhttps://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04256.html\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 20.04.2014, at 16:53, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> I told him specifically to bring it here (on a pull request for\n> Bitcoin Core), as there is no point in making such convention changes\n> to just one client.\n> \n> I wasn't aware of any discussion about the \"bits\" proposal here before.\n> \n> On Sun, Apr 20, 2014 at 4:28 PM, Tamas Blummer <tamas at bitsofproof.com> wrote:\n>> People on this list are mostly engineers who have no problem dealing with\n>> magnitudes and have rather limited empathy for people who have a problem\n>> with them.\n>> They also tend to think, that because they invented money 2.0 they would not\n>> need to care of finance's or people's current customs.\n>> \n>> The importance of their decisions in these questions will fade as people\n>> already use wallets other than the core.\n>> \n>> Bring this particular discussion elsewhere, to the wallet developer.\n>> \n>> BTW the topic was discussed here several times, you have my support and Jeff\n>> Garzik's.\n>> \n>> Regards,\n>> \n>> Tamas Blummer\n>> http://bitsofproof.com\n>> \n>> On 20.04.2014, at 15:15, Rob Golding <rob.golding at astutium.com> wrote:\n>> \n>> The average person is not going to be confident that the prefix they\n>> are using is the correct one,\n>> \n>> \n>> The use of any 'prefix' is one of choice and entirely unnecessary, and there\n>> are already established 'divisions' in u/mBTC for those that feel they need\n>> to use such things.\n>> \n>> people WILL send 1000x more or less than\n>> intended if we go down this road,\n>> \n>> \n>> Exceptionally unlikely - I deal every day with currencies with 0, 2 and 3\n>> dp's in amount ranging from 'under 1 whole unit' to tens of thousands - Not\n>> once in 20 years has anyone ever 'sent' more or less than intended - oh,\n>> they've 'intended' to underpay just fine, but never *unintended*.\n>> \n>> I propose that users are offered a preference to denominate the\n>> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n>> equals one million bits (bits) and one bit equals 100 satoshis.\n>> \n>> \n>> I propose that for people unable to understand what a bitcoin is, they can\n>> just use satoshi's and drop this entire proposal.\n>> \n>> Rob\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/33517770/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/33517770/attachment.sig>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-04-20T15:50:55",
                "message_text_only": "I've been a staunch supporter of \"microbitcoin\" and would like to do\nanything I can to make sure that we jump directly to it if we're going\nto promote changing the default units.  And I'm happy to integrate it\ninto Armory as a default (with appropriate explanations and\nsettings/options).  I'm not so convinced about the \"bits\" name though --\nI do like it, but I do also think that word is too overloaded.  Though,\nI think we could get away with it. \n\n(Sadly, I still use \"microbes\" occasionally (as in *microb*itcoin) when\nI'm talking to coworkers, because it slips off the tongue and is\nactually a good combination of brevity and self-explanatory -- it just\ndoesn't instill the right visuals...)\n\nWe started integrating alternative units into Armory.  But, of course,\nthere were a few more loose ends than I expected, which will require\nsome work.   We want to put it in but not necessarily change the default\nright away.  I'd /prefer/ we get some commitments from some other wallet\ndevelopers, so we can make a unified push for it.  I'm happy to lead\nthat and make it default as long as I'm not the only one in the world\ndoing it.\n\n-Alan\n\n\n\nOn 04/20/2014 11:05 AM, Tamas Blummer wrote:\n> Here is an earlier reference to bits:\n>\n> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04248.html\n> <https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04248.html>\n>\n> I forgot that Alan Reiner was also supporting a unit equals to bits :\n>\n> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04264.html\n> <https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04264.html>\n>\n> and here the earlier going back to March 2013 and a poll at that time\n> pushing for XBT being 1 bit\n>\n> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04256.html\n> <https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04256.html>\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n> On 20.04.2014, at 16:53, Pieter Wuille <pieter.wuille at gmail.com\n> <mailto:pieter.wuille at gmail.com>> wrote:\n>\n>> I told him specifically to bring it here (on a pull request for\n>> Bitcoin Core), as there is no point in making such convention changes\n>> to just one client.\n>>\n>> I wasn't aware of any discussion about the \"bits\" proposal here before.\n>>\n>> On Sun, Apr 20, 2014 at 4:28 PM, Tamas Blummer <tamas at bitsofproof.com\n>> <mailto:tamas at bitsofproof.com>> wrote:\n>>> People on this list are mostly engineers who have no problem dealing\n>>> with\n>>> magnitudes and have rather limited empathy for people who have a problem\n>>> with them.\n>>> They also tend to think, that because they invented money 2.0 they\n>>> would not\n>>> need to care of finance's or people's current customs.\n>>>\n>>> The importance of their decisions in these questions will fade as people\n>>> already use wallets other than the core.\n>>>\n>>> Bring this particular discussion elsewhere, to the wallet developer.\n>>>\n>>> BTW the topic was discussed here several times, you have my support\n>>> and Jeff\n>>> Garzik's.\n>>>\n>>> Regards,\n>>>\n>>> Tamas Blummer\n>>> http://bitsofproof.com\n>>>\n>>> On 20.04.2014, at 15:15, Rob Golding <rob.golding at astutium.com> wrote:\n>>>\n>>> The average person is not going to be confident that the prefix they\n>>> are using is the correct one,\n>>>\n>>>\n>>> The use of any 'prefix' is one of choice and entirely unnecessary,\n>>> and there\n>>> are already established 'divisions' in u/mBTC for those that feel\n>>> they need\n>>> to use such things.\n>>>\n>>> people WILL send 1000x more or less than\n>>> intended if we go down this road,\n>>>\n>>>\n>>> Exceptionally unlikely - I deal every day with currencies with 0, 2\n>>> and 3\n>>> dp's in amount ranging from 'under 1 whole unit' to tens of\n>>> thousands - Not\n>>> once in 20 years has anyone ever 'sent' more or less than intended - oh,\n>>> they've 'intended' to underpay just fine, but never *unintended*.\n>>>\n>>> I propose that users are offered a preference to denominate the\n>>> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n>>> equals one million bits (bits) and one bit equals 100 satoshis.\n>>>\n>>>\n>>> I propose that for people unable to understand what a bitcoin is,\n>>> they can\n>>> just use satoshi's and drop this entire proposal.\n>>>\n>>> Rob\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and\n>>> their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and\n>>> their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/542338d8/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-04-20T16:19:23",
                "message_text_only": "The term bit is really only overloaded for those who are techy. 95% of the\npopulation never uses the term bit in their daily lives and I doubt most\ncould even name one use of the term.\nPlus bit used to be a unit of money way back when, so this is kind of\nreclaiming it. I think it's a great fit.\nOn Apr 20, 2014 11:52 AM, \"Alan Reiner\" <etotheipi at gmail.com> wrote:\n\n>  I've been a staunch supporter of \"microbitcoin\" and would like to do\n> anything I can to make sure that we jump directly to it if we're going to\n> promote changing the default units.  And I'm happy to integrate it into\n> Armory as a default (with appropriate explanations and settings/options).\n> I'm not so convinced about the \"bits\" name though -- I do like it, but I do\n> also think that word is too overloaded.  Though, I think we could get away\n> with it.\n>\n> (Sadly, I still use \"microbes\" occasionally (as in *microb*itcoin) when\n> I'm talking to coworkers, because it slips off the tongue and is actually a\n> good combination of brevity and self-explanatory -- it just doesn't instill\n> the right visuals...)\n>\n> We started integrating alternative units into Armory.  But, of course,\n> there were a few more loose ends than I expected, which will require some\n> work.   We want to put it in but not necessarily change the default right\n> away.  I'd *prefer* we get some commitments from some other wallet\n> developers, so we can make a unified push for it.  I'm happy to lead that\n> and make it default as long as I'm not the only one in the world doing it.\n>\n> -Alan\n>\n>\n>\n> On 04/20/2014 11:05 AM, Tamas Blummer wrote:\n>\n> Here is an earlier reference to bits:\n>\n>\n> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04248.html<https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04248.html>\n>\n>  I forgot that Alan Reiner was also supporting a unit equals to bits :\n>\n>\n> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04264.html<https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04264.html>\n>\n>  and here the earlier going back to March 2013 and a poll at that time\n> pushing for XBT being 1 bit\n>\n>\n> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04256.html<https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04256.html>\n>\n>  Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n>  On 20.04.2014, at 16:53, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>\n> I told him specifically to bring it here (on a pull request for\n> Bitcoin Core), as there is no point in making such convention changes\n> to just one client.\n>\n> I wasn't aware of any discussion about the \"bits\" proposal here before.\n>\n> On Sun, Apr 20, 2014 at 4:28 PM, Tamas Blummer <tamas at bitsofproof.com>\n> wrote:\n>\n> People on this list are mostly engineers who have no problem dealing with\n> magnitudes and have rather limited empathy for people who have a problem\n> with them.\n> They also tend to think, that because they invented money 2.0 they would\n> not\n> need to care of finance's or people's current customs.\n>\n> The importance of their decisions in these questions will fade as people\n> already use wallets other than the core.\n>\n> Bring this particular discussion elsewhere, to the wallet developer.\n>\n> BTW the topic was discussed here several times, you have my support and\n> Jeff\n> Garzik's.\n>\n> Regards,\n>\n> Tamas Blummer\n> http://bitsofproof.com\n>\n> On 20.04.2014, at 15:15, Rob Golding <rob.golding at astutium.com><rob.golding at astutium.com>wrote:\n>\n> The average person is not going to be confident that the prefix they\n> are using is the correct one,\n>\n>\n> The use of any 'prefix' is one of choice and entirely unnecessary, and\n> there\n> are already established 'divisions' in u/mBTC for those that feel they need\n> to use such things.\n>\n> people WILL send 1000x more or less than\n> intended if we go down this road,\n>\n>\n> Exceptionally unlikely - I deal every day with currencies with 0, 2 and 3\n> dp's in amount ranging from 'under 1 whole unit' to tens of thousands - Not\n> once in 20 years has anyone ever 'sent' more or less than intended - oh,\n> they've 'intended' to underpay just fine, but never *unintended*.\n>\n> I propose that users are offered a preference to denominate the\n> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n> equals one million bits (bits) and one bit equals 100 satoshis.\n>\n>\n> I propose that for people unable to understand what a bitcoin is, they can\n> just use satoshi's and drop this entire proposal.\n>\n> Rob\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!http://p.sf.net/sfu/NeoTech\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing listBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/46548050/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-20T16:27:07",
                "message_text_only": "On Sun, Apr 20, 2014 at 6:19 PM, Chris Pacia <ctpacia at gmail.com> wrote:\n> The term bit is really only overloaded for those who are techy. 95% of the\n> population never uses the term bit in their daily lives and I doubt most\n> could even name one use of the term.\n> Plus bit used to be a unit of money way back when, so this is kind of\n> reclaiming it. I think it's a great fit.\n\nThat's a very anglocentric way of thinking.\n\nHere in the Netherlands, a \"bit\" is something you put in a horses's\nmouth. It's also used as imported word (in the information sense).\nWe've never used the term for money.\n\nWladimir"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-04-20T16:30:12",
                "message_text_only": "You're correct, my impression of the term is based of what I experience in\nthe US. If it is more widely used in other cultures that should be a\nconsideration.\nOn Apr 20, 2014 12:27 PM, \"Wladimir\" <laanwj at gmail.com> wrote:\n\n> On Sun, Apr 20, 2014 at 6:19 PM, Chris Pacia <ctpacia at gmail.com> wrote:\n> > The term bit is really only overloaded for those who are techy. 95% of\n> the\n> > population never uses the term bit in their daily lives and I doubt most\n> > could even name one use of the term.\n> > Plus bit used to be a unit of money way back when, so this is kind of\n> > reclaiming it. I think it's a great fit.\n>\n> That's a very anglocentric way of thinking.\n>\n> Here in the Netherlands, a \"bit\" is something you put in a horses's\n> mouth. It's also used as imported word (in the information sense).\n> We've never used the term for money.\n>\n> Wladimir\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/9a876d8c/attachment.html>"
            },
            {
                "author": "Aaron Axvig",
                "date": "2014-04-22T13:51:42",
                "message_text_only": "That piece of horse equipment is called a bit in the US too.  But the point\nstands: most people don't use \"bit\" on a daily basis other than referring to\n\"a little bit of <something>.\"\n\n-----Original Message-----\nFrom: Wladimir [mailto:laanwj at gmail.com] \nSent: Sunday, April 20, 2014 11:27 AM\nTo: Chris Pacia\nCc: Bitcoin Dev\nSubject: Re: [Bitcoin-development] \"bits\": Unit of account\n\nOn Sun, Apr 20, 2014 at 6:19 PM, Chris Pacia <ctpacia at gmail.com> wrote:\n> The term bit is really only overloaded for those who are techy. 95% of \n> the population never uses the term bit in their daily lives and I \n> doubt most could even name one use of the term.\n> Plus bit used to be a unit of money way back when, so this is kind of \n> reclaiming it. I think it's a great fit.\n\nThat's a very anglocentric way of thinking.\n\nHere in the Netherlands, a \"bit\" is something you put in a horses's mouth.\nIt's also used as imported word (in the information sense).\nWe've never used the term for money.\n\nWladimir\n\n----------------------------------------------------------------------------\n--\nLearn Graph Databases - Download FREE O'Reilly Book \"Graph Databases\" is the\ndefinitive new guide to graph databases and their applications. Written by\nthree acclaimed leaders in the field, this first edition is now available.\nDownload your free book today!\nhttp://p.sf.net/sfu/NeoTech\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Danny Hamilton",
                "date": "2014-04-23T09:44:55",
                "message_text_only": "It seems to me that xbit is no more distinct or intuitive than \u00b5bit. In\neither case it's simply an arbitrary character in front of the word \"bit\".\nOf course, for the majority of the world familiar with SI, the \u00b5 actually\nadds additional meaning that is lost with the x.\n\nFurthermore, given the multiple concerns voiced about the overuse of the\nword \"bit\", \u00b5BTC seems to solve the problem.\n\nSince we are talking about how it would be displayed in software, we don't\nneed to be concerned about how people will pronounce it, or what the\nnickname will be.  If most of the wallets start displaying amounts in \u00b5BTC\nquantities, it will be obvious that a \u00b5BTC is a different magnitude than a\nBTC.  Nobody is going to look at their 100,000 \u00b5BTC balance and think they\nhave 100,000 BTC. People will immediately make the mental adjustment to the\nnew order of magnitude even if they don't specifically know that \u00b5 means\nmicro, or that micro means 1e-6.\n\nNicknames will form organically (much like buck, fin, large, k, grand, and\nbenny for U.S. currency), I've always been partial to milly (or millie) and\nmike (or micky) as nicknames for mBTC and \u00b5BTC.  I've personally used those\nwhen speaking with people, and they seem to catch on pretty quickly.\n\nAs has already been mentioned, you're going to be hard pressed to find\nsoftware that denotes U.S. balances in \"bucks\".  There isn't any good\nreason to be coding a nickname like \"bit\", \"xbit\", or \"mike\" into wallet\nsoftware.\n\n-  Danny Hamilton\n\n\nOn Tue, Apr 22, 2014 at 8:51 AM, Aaron Axvig <aaron at axvigs.com> wrote:\n\n> That piece of horse equipment is called a bit in the US too.  But the point\n> stands: most people don't use \"bit\" on a daily basis other than referring\n> to\n> \"a little bit of <something>.\"\n>\n> -----Original Message-----\n> From: Wladimir [mailto:laanwj at gmail.com]\n> Sent: Sunday, April 20, 2014 11:27 AM\n> To: Chris Pacia\n> Cc: Bitcoin Dev\n> Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>\n> On Sun, Apr 20, 2014 at 6:19 PM, Chris Pacia <ctpacia at gmail.com> wrote:\n> > The term bit is really only overloaded for those who are techy. 95% of\n> > the population never uses the term bit in their daily lives and I\n> > doubt most could even name one use of the term.\n> > Plus bit used to be a unit of money way back when, so this is kind of\n> > reclaiming it. I think it's a great fit.\n>\n> That's a very anglocentric way of thinking.\n>\n> Here in the Netherlands, a \"bit\" is something you put in a horses's mouth.\n> It's also used as imported word (in the information sense).\n> We've never used the term for money.\n>\n> Wladimir\n>\n>\n> ----------------------------------------------------------------------------\n> --\n> Learn Graph Databases - Download FREE O'Reilly Book \"Graph Databases\" is\n> the\n> definitive new guide to graph databases and their applications. Written by\n> three acclaimed leaders in the field, this first edition is now available.\n> Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/d7919234/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-23T09:56:07",
                "message_text_only": "The problem is \u00b5BTC that bit tries to solve. \n\nBTC, mBTC and \u00b5BTC are just too similiar for enyone else than engineers. The mixed use of them leads to misunderstanding. \nI think adoption would benefit of a single unit with easily remembered and associated name that has no smaller than 1/100 fractions called satoshis.\n\nRegards,\n\nTam\u00e1s Blummer\nFounder, CEO\n\nhttp://bitsofproof.com\n\nOn 23.04.2014, at 11:44, Danny Hamilton <danny.hamilton at gmail.com> wrote:\n\n> It seems to me that xbit is no more distinct or intuitive than \u00b5bit. In either case it's simply an arbitrary character in front of the word \"bit\".  Of course, for the majority of the world familiar with SI, the \u00b5 actually adds additional meaning that is lost with the x.\n> \n> Furthermore, given the multiple concerns voiced about the overuse of the word \"bit\", \u00b5BTC seems to solve the problem.\n> \n> Since we are talking about how it would be displayed in software, we don't need to be concerned about how people will pronounce it, or what the nickname will be.  If most of the wallets start displaying amounts in \u00b5BTC quantities, it will be obvious that a \u00b5BTC is a different magnitude than a BTC.  Nobody is going to look at their 100,000 \u00b5BTC balance and think they have 100,000 BTC. People will immediately make the mental adjustment to the new order of magnitude even if they don't specifically know that \u00b5 means micro, or that micro means 1e-6.\n> \n> Nicknames will form organically (much like buck, fin, large, k, grand, and benny for U.S. currency), I've always been partial to milly (or millie) and mike (or micky) as nicknames for mBTC and \u00b5BTC.  I've personally used those when speaking with people, and they seem to catch on pretty quickly.\n> \n> As has already been mentioned, you're going to be hard pressed to find software that denotes U.S. balances in \"bucks\".  There isn't any good reason to be coding a nickname like \"bit\", \"xbit\", or \"mike\" into wallet software.\n> \n> -  Danny Hamilton\n> \n> \n> On Tue, Apr 22, 2014 at 8:51 AM, Aaron Axvig <aaron at axvigs.com> wrote:\n> That piece of horse equipment is called a bit in the US too.  But the point\n> stands: most people don't use \"bit\" on a daily basis other than referring to\n> \"a little bit of <something>.\"\n> \n> -----Original Message-----\n> From: Wladimir [mailto:laanwj at gmail.com]\n> Sent: Sunday, April 20, 2014 11:27 AM\n> To: Chris Pacia\n> Cc: Bitcoin Dev\n> Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> \n> On Sun, Apr 20, 2014 at 6:19 PM, Chris Pacia <ctpacia at gmail.com> wrote:\n> > The term bit is really only overloaded for those who are techy. 95% of\n> > the population never uses the term bit in their daily lives and I\n> > doubt most could even name one use of the term.\n> > Plus bit used to be a unit of money way back when, so this is kind of\n> > reclaiming it. I think it's a great fit.\n> \n> That's a very anglocentric way of thinking.\n> \n> Here in the Netherlands, a \"bit\" is something you put in a horses's mouth.\n> It's also used as imported word (in the information sense).\n> We've never used the term for money.\n> \n> Wladimir\n> \n> ----------------------------------------------------------------------------\n> --\n> Learn Graph Databases - Download FREE O'Reilly Book \"Graph Databases\" is the\n> definitive new guide to graph databases and their applications. Written by\n> three acclaimed leaders in the field, this first edition is now available.\n> Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/be82e058/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: email.png\nType: image/png\nSize: 7120 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/be82e058/attachment.png>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/be82e058/attachment.sig>"
            },
            {
                "author": "Chris D'Costa",
                "date": "2014-04-23T11:48:14",
                "message_text_only": "I have a rather off-beat suggestion. Perhaps decimal was not satoshi's intention.\n\nIn old English money 1 guinea is 21 shillings. I wonder if 1 million guineas is more or less the total number of bitcoins = 21 million shillings. There was also the notion of bits (two bob bits = 1 florin = 2 shillings). I quite like the idea as it's absolutely not expected.\n\nOld English money is a funny mix of decimal and imperial (base12) measures but may have some interesting properties, one of which would be to have multiple names for overlapping \"layers\" not just the 2 or 3 that has been mentioned here and elsewhere.\n\nI wonder in the long run if this will not just naturally occur anyway.\n\nRegards\n\nChris D'Costa\n\nEmail: chris_dcosta at meek.io\n\nSent from my iPhone\n\n> On 23 Apr 2014, at 11:56, Tamas Blummer <tamas at bitsofproof.com> wrote:\n> \n> The problem is \u00b5BTC that bit tries to solve. \n> \n> BTC, mBTC and \u00b5BTC are just too similiar for enyone else than engineers. The mixed use of them leads to misunderstanding. \n> I think adoption would benefit of a single unit with easily remembered and associated name that has no smaller than 1/100 fractions called satoshis.\n> \n> Regards,\n> \n> Tam\u00e1s Blummer\n> Founder, CEO\n> <email.png>\n> http://bitsofproof.com\n> \n>> On 23.04.2014, at 11:44, Danny Hamilton <danny.hamilton at gmail.com> wrote:\n>> \n>> It seems to me that xbit is no more distinct or intuitive than \u00b5bit. In either case it's simply an arbitrary character in front of the word \"bit\".  Of course, for the majority of the world familiar with SI, the \u00b5 actually adds additional meaning that is lost with the x.\n>> \n>> Furthermore, given the multiple concerns voiced about the overuse of the word \"bit\", \u00b5BTC seems to solve the problem.\n>> \n>> Since we are talking about how it would be displayed in software, we don't need to be concerned about how people will pronounce it, or what the nickname will be.  If most of the wallets start displaying amounts in \u00b5BTC quantities, it will be obvious that a \u00b5BTC is a different magnitude than a BTC.  Nobody is going to look at their 100,000 \u00b5BTC balance and think they have 100,000 BTC. People will immediately make the mental adjustment to the new order of magnitude even if they don't specifically know that \u00b5 means micro, or that micro means 1e-6.\n>> \n>> Nicknames will form organically (much like buck, fin, large, k, grand, and benny for U.S. currency), I've always been partial to milly (or millie) and mike (or micky) as nicknames for mBTC and \u00b5BTC.  I've personally used those when speaking with people, and they seem to catch on pretty quickly.\n>> \n>> As has already been mentioned, you're going to be hard pressed to find software that denotes U.S. balances in \"bucks\".  There isn't any good reason to be coding a nickname like \"bit\", \"xbit\", or \"mike\" into wallet software.\n>> \n>> -  Danny Hamilton\n>> \n>> \n>>> On Tue, Apr 22, 2014 at 8:51 AM, Aaron Axvig <aaron at axvigs.com> wrote:\n>>> That piece of horse equipment is called a bit in the US too.  But the point\n>>> stands: most people don't use \"bit\" on a daily basis other than referring to\n>>> \"a little bit of <something>.\"\n>>> \n>>> -----Original Message-----\n>>> From: Wladimir [mailto:laanwj at gmail.com]\n>>> Sent: Sunday, April 20, 2014 11:27 AM\n>>> To: Chris Pacia\n>>> Cc: Bitcoin Dev\n>>> Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>>> \n>>> On Sun, Apr 20, 2014 at 6:19 PM, Chris Pacia <ctpacia at gmail.com> wrote:\n>>> > The term bit is really only overloaded for those who are techy. 95% of\n>>> > the population never uses the term bit in their daily lives and I\n>>> > doubt most could even name one use of the term.\n>>> > Plus bit used to be a unit of money way back when, so this is kind of\n>>> > reclaiming it. I think it's a great fit.\n>>> \n>>> That's a very anglocentric way of thinking.\n>>> \n>>> Here in the Netherlands, a \"bit\" is something you put in a horses's mouth.\n>>> It's also used as imported word (in the information sense).\n>>> We've never used the term for money.\n>>> \n>>> Wladimir\n>>> \n>>> ----------------------------------------------------------------------------\n>>> --\n>>> Learn Graph Databases - Download FREE O'Reilly Book \"Graph Databases\" is the\n>>> definitive new guide to graph databases and their applications. Written by\n>>> three acclaimed leaders in the field, this first edition is now available.\n>>> Download your free book today!\n>>> http://p.sf.net/sfu/NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> \n>>> ------------------------------------------------------------------------------\n>>> Start Your Social Network Today - Download eXo Platform\n>>> Build your Enterprise Intranet with eXo Platform Software\n>>> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>>> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>>> http://p.sf.net/sfu/ExoPlatform\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> ------------------------------------------------------------------------------\n>> Start Your Social Network Today - Download eXo Platform\n>> Build your Enterprise Intranet with eXo Platform Software\n>> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>> http://p.sf.net/sfu/ExoPlatform_______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/9fdf8596/attachment.html>"
            },
            {
                "author": "Erik Garrison",
                "date": "2014-04-20T16:23:44",
                "message_text_only": "The world is rapidly becoming a place in which a solid grasp of orders of\nmagnitude could be considered a basic mathematical skill.  People are very\nlikely to learn what mBTC and \u00b5BTC are simply because they risk their money\nif they do not.  This is not a bad thing and I think stands only to help\npeople who learn about these monikers for orders of magnitude this way.\n\nAny appropriate nicknames for these denominations is sure to develop in due\ncourse.  Promoting an already-overloaded term that could just as easily be\napplied colloquially to refer to a small amount of value in any currency\nseems problematic.\n I've been a staunch supporter of \"microbitcoin\" and would like to do\nanything I can to make sure that we jump directly to it if we're going to\npromote changing the default units.  And I'm happy to integrate it into\nArmory as a default (with appropriate explanations and settings/options).\nI'm not so convinced about the \"bits\" name though -- I do like it, but I do\nalso think that word is too overloaded.  Though, I think we could get away\nwith it.\n\n(Sadly, I still use \"microbes\" occasionally (as in *microb*itcoin) when I'm\ntalking to coworkers, because it slips off the tongue and is actually a\ngood combination of brevity and self-explanatory -- it just doesn't instill\nthe right visuals...)\n\nWe started integrating alternative units into Armory.  But, of course,\nthere were a few more loose ends than I expected, which will require some\nwork.   We want to put it in but not necessarily change the default right\naway.  I'd *prefer* we get some commitments from some other wallet\ndevelopers, so we can make a unified push for it.  I'm happy to lead that\nand make it default as long as I'm not the only one in the world doing it.\n\n-Alan\n\n\n\nOn 04/20/2014 11:05 AM, Tamas Blummer wrote:\n\nHere is an earlier reference to bits:\n\n\nhttps://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04248.html<https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04248.html>\n\n I forgot that Alan Reiner was also supporting a unit equals to bits :\n\n\nhttps://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04264.html<https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04264.html>\n\n and here the earlier going back to March 2013 and a poll at that time\npushing for XBT being 1 bit\n\n\nhttps://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04256.html<https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04256.html>\n\n Regards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\n On 20.04.2014, at 16:53, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\nI told him specifically to bring it here (on a pull request for\nBitcoin Core), as there is no point in making such convention changes\nto just one client.\n\nI wasn't aware of any discussion about the \"bits\" proposal here before.\n\nOn Sun, Apr 20, 2014 at 4:28 PM, Tamas Blummer <tamas at bitsofproof.com>\nwrote:\n\nPeople on this list are mostly engineers who have no problem dealing with\nmagnitudes and have rather limited empathy for people who have a problem\nwith them.\nThey also tend to think, that because they invented money 2.0 they would not\nneed to care of finance's or people's current customs.\n\nThe importance of their decisions in these questions will fade as people\nalready use wallets other than the core.\n\nBring this particular discussion elsewhere, to the wallet developer.\n\nBTW the topic was discussed here several times, you have my support and Jeff\nGarzik's.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 20.04.2014, at 15:15, Rob Golding\n<rob.golding at astutium.com><rob.golding at astutium.com>wrote:\n\nThe average person is not going to be confident that the prefix they\nare using is the correct one,\n\n\nThe use of any 'prefix' is one of choice and entirely unnecessary, and there\nare already established 'divisions' in u/mBTC for those that feel they need\nto use such things.\n\npeople WILL send 1000x more or less than\nintended if we go down this road,\n\n\nExceptionally unlikely - I deal every day with currencies with 0, 2 and 3\ndp's in amount ranging from 'under 1 whole unit' to tens of thousands - Not\nonce in 20 years has anyone ever 'sent' more or less than intended - oh,\nthey've 'intended' to underpay just fine, but never *unintended*.\n\nI propose that users are offered a preference to denominate the\nBitcoin currency in a unit called a bit. Where one bitcoin (BTC)\nequals one million bits (bits) and one bit equals 100 satoshis.\n\n\nI propose that for people unable to understand what a bitcoin is, they can\njust use satoshi's and drop this entire proposal.\n\nRob\n\n\n------------------------------------------------------------------------------\nLearn Graph Databases - Download FREE O'Reilly Book\n\"Graph Databases\" is the definitive new guide to graph databases and their\napplications. Written by three acclaimed leaders in the field,\nthis first edition is now available. Download your free book today!\nhttp://p.sf.net/sfu/NeoTech\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n------------------------------------------------------------------------------\nLearn Graph Databases - Download FREE O'Reilly Book\n\"Graph Databases\" is the definitive new guide to graph databases and their\napplications. Written by three acclaimed leaders in the field,\nthis first edition is now available. Download your free book today!\nhttp://p.sf.net/sfu/NeoTech\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n\n\n------------------------------------------------------------------------------\nLearn Graph Databases - Download FREE O'Reilly Book\n\"Graph Databases\" is the definitive new guide to graph databases and their\napplications. Written by three acclaimed leaders in the field,\nthis first edition is now available. Download your free book\ntoday!http://p.sf.net/sfu/NeoTech\n\n\n\n_______________________________________________\nBitcoin-development mailing\nlistBitcoin-development at lists.sourceforge.nethttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n------------------------------------------------------------------------------\nLearn Graph Databases - Download FREE O'Reilly Book\n\"Graph Databases\" is the definitive new guide to graph databases and their\napplications. Written by three acclaimed leaders in the field,\nthis first edition is now available. Download your free book today!\nhttp://p.sf.net/sfu/NeoTech\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/02878e8a/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-04-20T16:30:55",
                "message_text_only": "Btw, I should clarify my email: I'm a staunch supporter of moving to\n1e-6 BTC as the default unit for wallet applications, not necessarily\nany particular name.  I would be fine with \"bits\" as I think this\ncontext is sufficiently different that it won't be confused by regular\nconsumers.  But it wouldn't be my first choice.  I don't know what my\nfirst choice would be.\n\nWhile writing this email, I asked my wife (who's been tired of hearing\nabout Bitcoin for two years), what she thinks of \"bits\", \"microbes\",\n\"micros\".  She said she is fine with any of them.  Apparently microbes\nreminders her of biology, not \"germs\".  But she's also well-educated, so\nshe fine with milli, micro, kilo, etc... and apparently biology...\n\nWhatever we call it. I'm happy to support it as long as it's 1e-6.\n\n\nOn 04/20/2014 12:23 PM, Erik Garrison wrote:\n>\n> The world is rapidly becoming a place in which a solid grasp of orders\n> of magnitude could be considered a basic mathematical skill.  People\n> are very likely to learn what mBTC and \u00b5BTC are simply because they\n> risk their money if they do not.  This is not a bad thing and I think\n> stands only to help people who learn about these monikers for orders\n> of magnitude this way.\n>\n> Any appropriate nicknames for these denominations is sure to develop\n> in due course.  Promoting an already-overloaded term that could just\n> as easily be applied colloquially to refer to a small amount of value\n> in any currency seems problematic.\n>\n> I've been a staunch supporter of \"microbitcoin\" and would like to do\n> anything I can to make sure that we jump directly to it if we're going\n> to promote changing the default units.  And I'm happy to integrate it\n> into Armory as a default (with appropriate explanations and\n> settings/options).  I'm not so convinced about the \"bits\" name though\n> -- I do like it, but I do also think that word is too overloaded. \n> Though, I think we could get away with it. \n>\n> (Sadly, I still use \"microbes\" occasionally (as in *microb*itcoin)\n> when I'm talking to coworkers, because it slips off the tongue and is\n> actually a good combination of brevity and self-explanatory -- it just\n> doesn't instill the right visuals...)\n>\n> We started integrating alternative units into Armory.  But, of course,\n> there were a few more loose ends than I expected, which will require\n> some work.   We want to put it in but not necessarily change the\n> default right away.  I'd /prefer/ we get some commitments from some\n> other wallet developers, so we can make a unified push for it.  I'm\n> happy to lead that and make it default as long as I'm not the only one\n> in the world doing it.\n>\n> -Alan\n>\n>\n>\n> On 04/20/2014 11:05 AM, Tamas Blummer wrote:\n>> Here is an earlier reference to bits:\n>>\n>> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04248.html\n>> <https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04248.html>\n>>\n>> I forgot that Alan Reiner was also supporting a unit equals to bits :\n>>\n>> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04264.html\n>> <https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04264.html>\n>>\n>> and here the earlier going back to March 2013 and a poll at that time\n>> pushing for XBT being 1 bit\n>>\n>> https://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg04256.html\n>> <https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04256.html>\n>>\n>> Regards,\n>>\n>> Tamas Blummer\n>> http://bitsofproof.com\n>>\n>> On 20.04.2014, at 16:53, Pieter Wuille <pieter.wuille at gmail.com\n>> <mailto:pieter.wuille at gmail.com>> wrote:\n>>\n>>> I told him specifically to bring it here (on a pull request for\n>>> Bitcoin Core), as there is no point in making such convention changes\n>>> to just one client.\n>>>\n>>> I wasn't aware of any discussion about the \"bits\" proposal here before.\n>>>\n>>> On Sun, Apr 20, 2014 at 4:28 PM, Tamas Blummer\n>>> <tamas at bitsofproof.com <mailto:tamas at bitsofproof.com>> wrote:\n>>>> People on this list are mostly engineers who have no problem\n>>>> dealing with\n>>>> magnitudes and have rather limited empathy for people who have a\n>>>> problem\n>>>> with them.\n>>>> They also tend to think, that because they invented money 2.0 they\n>>>> would not\n>>>> need to care of finance's or people's current customs.\n>>>>\n>>>> The importance of their decisions in these questions will fade as\n>>>> people\n>>>> already use wallets other than the core.\n>>>>\n>>>> Bring this particular discussion elsewhere, to the wallet developer.\n>>>>\n>>>> BTW the topic was discussed here several times, you have my support\n>>>> and Jeff\n>>>> Garzik's.\n>>>>\n>>>> Regards,\n>>>>\n>>>> Tamas Blummer\n>>>> http://bitsofproof.com\n>>>>\n>>>> On 20.04.2014, at 15:15, Rob Golding <rob.golding at astutium.com>\n>>>> <mailto:rob.golding at astutium.com> wrote:\n>>>>\n>>>> The average person is not going to be confident that the prefix they\n>>>> are using is the correct one,\n>>>>\n>>>>\n>>>> The use of any 'prefix' is one of choice and entirely unnecessary,\n>>>> and there\n>>>> are already established 'divisions' in u/mBTC for those that feel\n>>>> they need\n>>>> to use such things.\n>>>>\n>>>> people WILL send 1000x more or less than\n>>>> intended if we go down this road,\n>>>>\n>>>>\n>>>> Exceptionally unlikely - I deal every day with currencies with 0, 2\n>>>> and 3\n>>>> dp's in amount ranging from 'under 1 whole unit' to tens of\n>>>> thousands - Not\n>>>> once in 20 years has anyone ever 'sent' more or less than intended\n>>>> - oh,\n>>>> they've 'intended' to underpay just fine, but never *unintended*.\n>>>>\n>>>> I propose that users are offered a preference to denominate the\n>>>> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n>>>> equals one million bits (bits) and one bit equals 100 satoshis.\n>>>>\n>>>>\n>>>> I propose that for people unable to understand what a bitcoin is,\n>>>> they can\n>>>> just use satoshi's and drop this entire proposal.\n>>>>\n>>>> Rob\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>>> \"Graph Databases\" is the definitive new guide to graph databases\n>>>> and their\n>>>> applications. Written by three acclaimed leaders in the field,\n>>>> this first edition is now available. Download your free book today!\n>>>> http://p.sf.net/sfu/NeoTech\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>>> \"Graph Databases\" is the definitive new guide to graph databases\n>>>> and their\n>>>> applications. Written by three acclaimed leaders in the field,\n>>>> this first edition is now available. Download your free book today!\n>>>> http://p.sf.net/sfu/NeoTech\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> <mailto:Bitcoin-development at lists.sourceforge.net>\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net <mailto:Bitcoin-development at lists.sourceforge.net>\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> <mailto:Bitcoin-development at lists.sourceforge.net>\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/f67ef7e9/attachment.html>"
            },
            {
                "author": "Mike Caldwell",
                "date": "2014-04-20T16:56:55",
                "message_text_only": "As someone who has put a lot of thought into how to best help typical everyday people understand bitcoin, I strongly favor 1 bit = 1e-6 BTC as being very straightforward to explain to non technical types, and also XBT as one \"bit\".  \"There are a million bits in a bit coin\" is highly intelligible to average people. \n\nI consider overload/conflict with existing meanings of \"bit\" as a non-issue for typical population at large. \n\nMike\n\nSent from my iPhone\n\n> On Apr 20, 2014, at 10:31 AM, \"Alan Reiner\" <etotheipi at gmail.com> wrote:\n> \n> Whatever we call it. I'm happy to support it as long as it's 1e-6."
            },
            {
                "author": "Jannis Froese",
                "date": "2014-04-20T17:47:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nI agree that a unit based on 1e-6 BTC is easier to use in practice\nthan BTC. The name microbitcoin is ok-ish. Nearly all countries\nofficially use the SI-system, but that doesn't mean that the average\ncitizen knows all the SI prefixes. Mega, kilo and milli are\nuniversally understood, micro not so much. This is a serious\naccessibility concern.\n\nBut I dislike the term bit for the already stated reasons: It's\nalready used in various languages for various things. Simply using\nSatoshis may be easier and is universally understood.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.13 (MingW32)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJTVAgZAAoJEBrvn3PsoRcmWYgP/0JMXmJjzdBFBQscl3+yA987\n4zD+W+7o/wPqRmtCU9voJ1PFj9zM6zagHAz455wjnF4IwdgYZjqtadyfxgP5Mg8p\nWGoplGQPWJ5KorsQfbiJP8uTOfTzJK5p6Aw9DwscN4aBjCMaHskvyWGVpE8U7ibQ\nPk+a6lX1UUOnjm/G7v5UDKFSlUGAe0GCTnI8FDjxAfF8mzS9XzMSPCfbZfoc7eEx\nF7yKkAQGZCDJKP4y6oenj4CGXn100KSZEmombNQ7PeOEwqcKsd1RgPtHWTZzb0Ya\nhk2sSnEEt05uwyYsGRnb1EYUwiSS/6sgT9m7fU3bpFf3dWqGuMweSVuGgCTMPrRb\n3ei18TJAI59lF/du5zbhQOujpNx/ocmf538hcpFkqaM3RTpeXifaSAefp37S5Zbq\nxw013M5T55SmJZYQwdWTFA689kvmOT1N33ht2QtSszl6ZJDFOrwICdcIqMsS6a0a\ncGcigi2Ru4M9J7w7wk448ky22Z8VjZrKTQFqhiKzoRk2t0N/SQbKSFKCm7ffsAB/\n7EGB9cA3va5ZFBnDAae84Vj0RAMJDHYO7VZIg/mF5qNs8YWs6okQoeJ8FMfNAhW2\npDgZdJfl46lnzfQvgiV/jAMkFr/oSj0UZUPAWXbaGcAm3ZFNO4B0SgNB2VYUfLIe\nVNW1pzTKiwL83RjNTGfV\n=EPvS\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-20T18:10:10",
                "message_text_only": "On 04/20/2014 06:56 PM, Mike Caldwell wrote:\n> I consider overload/conflict with existing meanings of \"bit\" as a non-issue for typical population at large. \n\nSo far I have not seen any reasonable name except for \"bit\". I also\ntried to come up with something else (e.g.naka, toshi, etc.) to avoid\nthe confusion with bits used in computing, but I was not satisfied with\nneither of them.\n\nThen I though about \"credit\", which is more-or-less established in video\ngames and sci-fi literature and people are already used to sentences\nlike \"Not enough credits\" or \"This item costs 10000 credits\", because of\nthis. Also it would be particularly funny if these sci-fi pieces\npredicted the future by actually defining it. ;-)\n\nAnother options might be \"cubit\" or \"crebit\", but the latter is\nsometimes used as a compound word meaning both \"credit\" and \"debit\" such\nas in \"You can use crebit cards here\".\n\nAlso this Wikipedia source is a list of sometimes rather funny\npossibilites: https://en.wikipedia.org/wiki/List_of_fictional_currencies\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Arne Brutschy",
                "date": "2014-04-20T17:42:45",
                "message_text_only": "Hello,\n\n> While SI units are great for people well versed in them, there is a\n> very good reason people aren't asking for 100 micro dollars in change.\n> The average person is not going to be confident that the prefix they\n> are using is the correct one, people WILL send 1000x more or less than\n> intended if we go down this road, and these mistakes will happen\n> frequently. Labeling should be easy enough for kindergarten kids.\n\nAgree - but why do you propose not only a new label but also a different\nsubunit?\n\nAlso, everybody in the metric world is used to the milli- prefix due to\nmeters and millimeters. It's not such a stretch to expect people to\nmaster that; but I agree that most people would struggle with microbitcoins.\n\n> I propose that users are offered a preference to denominate the\n> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n> equals one million bits (bits) and one bit equals 100 satoshis.\n\nThere have been many proposals for more or less arbitrary subunits. What\nwould be the merit of your proposal? I don't really follow the reasoning\nthat it's better if it's uncommon for everyone rather than just uncommon\nfor people not used to metric units.\n\nRegarding the label of a \"bit\": I have to agree with the others that bit\nis heavily overused as a unit, but I am a computer scientist, so I don't\nhave the \"average joe's\" perspective on this. I find it weird to use as\nit's already in use in English - \"a bit of work\" etc\n\nI don't really see the advantage of a \"bit\" - it is part of \"bitcoin\"\nand it's short, but that's about it. I think we are free to pick\nanything we want for a label, so why not avoid ambiguities?\n\nSee this thread for many creative ideas for labels (and another\narbitrary subunit proposal:\nhttps://bitcointalk.org/index.php?topic=396522.0\n\nArne"
            },
            {
                "author": "Mike Caldwell",
                "date": "2014-04-20T18:11:18",
                "message_text_only": "It is a paradigm that is easy to explain and grasp for neurotypical people. \n\nThe average mind has no problem overloading words and distinguishing the intended meaning from context. For most people, overloading a single syllable word with a new meaning is much less complicated than using a unique 3+ syllable word like satoshi or micro-anything.\n\nDoing software development warps our minds to demand fully qualified names for everything. We know our compilers would say \"bit? Fatal error 0xaaabbbbwtf, can't continue, not sure if you mean a Boolean or a dog bite\".  But this peculiarity should not be projected onto the people we are trying to get bitcoin to appeal to, not if we want them to feel like we think about their experience. \n\nIf I were to say \"a Bitcoin can be divided into a million bits\", less than 0.1% of average joes would think I was talking about German beers or the thing that goes in horses mouths. Really, most people are good at using context to relate this to \"a dollar can be divided into 100 cents\" and accepting it.  This requires much less of their mind resources than using SI prefixes correctly or learning 3 syllable words that (to them) have no instantly apparent relationship to Bitcoin. \n\nMike\n\nSent from my iPhone\n\nOn Apr 20, 2014, at 11:44 AM, \"Arne Brutschy\" <abrutschy at xylon.de> wrote:\n\n>> I propose that users are offered a preference to denominate the\n>> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC)\n>> equals one million bits (bits) and one bit equals 100 satoshis.\n> \n> There have been many proposals for more or less arbitrary subunits. What\n> would be the merit of your proposal? I don't really follow the reasoning\n> that it's better if it's uncommon for everyone rather than just uncommon\n> for people not used to metric units.\n> \n> Regarding the label of a \"bit\": I have to agree with the others that bit\n> is heavily overused as a unit, but I am a computer scientist, so I don't\n> have the \"average joe's\" perspective on this. I find it weird to use as\n> it's already in use in English - \"a bit of work\" etc"
            },
            {
                "author": "Arne Brutschy",
                "date": "2014-04-20T18:22:49",
                "message_text_only": "I agree that overloading isn't an issue when necessary, but my point was\nthat the necessity is lacking. If we're free to pick anything, why pick\nsomething that is overloaded?\n\nMoreover, \"bit\" is an abbreviation of bitcoin and might be confused with\nit. Most currencies use a work that is phonetically very different and\nshort, so why not do the same?\n\nPluk, or cred, or finney (as proposed the thread I posted), or\nwhichever. We could call it \"unsp\" for unspent ;)\n\nArne\n\n\nOn 20/04/14 20:11, Mike Caldwell wrote:\n> It is a paradigm that is easy to explain and grasp for neurotypical\n> people.\n> \n> The average mind has no problem overloading words and distinguishing\n> the intended meaning from context. For most people, overloading a\n> single syllable word with a new meaning is much less complicated than\n> using a unique 3+ syllable word like satoshi or micro-anything.\n> \n> Doing software development warps our minds to demand fully qualified\n> names for everything. We know our compilers would say \"bit? Fatal\n> error 0xaaabbbbwtf, can't continue, not sure if you mean a Boolean or\n> a dog bite\".  But this peculiarity should not be projected onto the\n> people we are trying to get bitcoin to appeal to, not if we want them\n> to feel like we think about their experience.\n> \n> If I were to say \"a Bitcoin can be divided into a million bits\", less\n> than 0.1% of average joes would think I was talking about German\n> beers or the thing that goes in horses mouths. Really, most people\n> are good at using context to relate this to \"a dollar can be divided\n> into 100 cents\" and accepting it.  This requires much less of their\n> mind resources than using SI prefixes correctly or learning 3\n> syllable words that (to them) have no instantly apparent relationship\n> to Bitcoin.\n> \n> Mike\n> \n> Sent from my iPhone\n> \n> On Apr 20, 2014, at 11:44 AM, \"Arne Brutschy\" <abrutschy at xylon.de>\n> wrote:\n> \n>>> I propose that users are offered a preference to denominate the \n>>> Bitcoin currency in a unit called a bit. Where one bitcoin (BTC) \n>>> equals one million bits (bits) and one bit equals 100 satoshis.\n>> \n>> There have been many proposals for more or less arbitrary subunits.\n>> What would be the merit of your proposal? I don't really follow the\n>> reasoning that it's better if it's uncommon for everyone rather\n>> than just uncommon for people not used to metric units.\n>> \n>> Regarding the label of a \"bit\": I have to agree with the others\n>> that bit is heavily overused as a unit, but I am a computer\n>> scientist, so I don't have the \"average joe's\" perspective on this.\n>> I find it weird to use as it's already in use in English - \"a bit\n>> of work\" etc\n> \n> ------------------------------------------------------------------------------\n>\n> \nLearn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and\n> their applications. Written by three acclaimed leaders in the field, \n> this first edition is now available. Download your free book today! \n> http://p.sf.net/sfu/NeoTech \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Caldwell",
                "date": "2014-04-20T18:34:32",
                "message_text_only": "Mainly because it is short, memorable, effectively leads the listener to infer the proper meaning, is culturally neutral, is easy to say by speakers of just about any language, and many other reasons. \n\nMike\n\nSent from my iPhone\n\n> On Apr 20, 2014, at 12:23 PM, \"Arne Brutschy\" <abrutschy at xylon.de> wrote:\n> \n> agree that overloading isn't an issue when necessary, but my point was\n> that the necessity is lacking. If we're free to pick anything, why pick\n> something that is overloaded?\n> \n> Moreover, \"bit\" is an abbreviation of bitcoin and might be confused with\n> it. Most currencies use a work that is phonetically very different and\n> short, so why not do the same?\n> \n> Pluk, or cred, or finney (as proposed the thread I posted), or\n> whichever. We could call it \"unsp\" for unspent ;)\n> \n> Arne\n>"
            },
            {
                "author": "Oliver Egginger",
                "date": "2014-04-20T18:43:24",
                "message_text_only": "Hello,\n\njust my two 'cents':\n\nTerms arises by itself. Just as most people speak of coins when they\nmean bitcoins. I do not see that bitcoin is currently in common use\nexcept for speculation. Therefore no term for smaller units has\nestablished yet. No problem in my eyes. Time will tell.\n\n- oliver"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-04-20T19:19:38",
                "message_text_only": "Culturally neutral? \"bit\" in French phonetically collides with slang\nfor phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\nin Turkish as well.\n\nNot that this really would be avoidable with any short word (all the\nshort possible words are usually taken), but it's not neutral.\n\nOn Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de> wrote:\n> Hello,\n>\n> just my two 'cents':\n>\n> Terms arises by itself. Just as most people speak of coins when they\n> mean bitcoins. I do not see that bitcoin is currently in common use\n> except for speculation. Therefore no term for smaller units has\n> established yet. No problem in my eyes. Time will tell.\n>\n> - oliver\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Gmail",
                "date": "2014-04-20T19:32:26",
                "message_text_only": "People in the Bitcoin community are sometimes resistant to the idea of using the word \"credit\" as a unit of Bitcoin, because Bitcoin is not a credit-based system. \n\nHowever, given that the average person has close to no understanding of what \"credit\" means, and probably no concern for the distinction even if they do know, it may be wise to use the futuristic and easily understandable \"credit\" as our human-friendly unit. \n\nDo others agree that \"credits\" as a unit of account has a desirable futuristic connotation?\n\nWill\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 1593 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/b90be90b/attachment.p7s>"
            },
            {
                "author": "Mike Caldwell",
                "date": "2014-04-20T20:28:34",
                "message_text_only": "By culturally neutral I mean we avoid deliberately invoking a cultural reference in the name.  For example \"satoshi\" would be a reference to Japanese culture just for being a common Japanese name regardless of who Satoshi turns out to be. \n\nMike\n\nSent from my iPhone\n\n> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com> wrote:\n> \n> Culturally neutral? \"bit\" in French phonetically collides with slang\n> for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n> in Turkish as well.\n> \n> Not that this really would be avoidable with any short word (all the\n> short possible words are usually taken), but it's not neutral.\n> \n>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de> wrote:\n>> Hello,\n>> \n>> just my two 'cents':\n>> \n>> Terms arises by itself. Just as most people speak of coins when they\n>> mean bitcoins. I do not see that bitcoin is currently in common use\n>> except for speculation. Therefore no term for smaller units has\n>> established yet. No problem in my eyes. Time will tell.\n>> \n>> - oliver\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Justin A",
                "date": "2014-04-21T00:16:35",
                "message_text_only": "<delurk>\n\nWhat about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin? Easy to\nsay, tied in a visual way to the metric micro, leaves the required 2\ndecimal places for the marginally numerate.. What more could one want?\n\n</delurk>\n\nAlso, hi. My first post; plan to get involved over the southern hemisphere\nwinter if I can learn enough.\nOn Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com> wrote:\n\n> By culturally neutral I mean we avoid deliberately invoking a cultural\n> reference in the name.  For example \"satoshi\" would be a reference to\n> Japanese culture just for being a common Japanese name regardless of who\n> Satoshi turns out to be.\n>\n> Mike\n>\n> Sent from my iPhone\n>\n> > On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n> christophe.biocca at gmail.com> wrote:\n> >\n> > Culturally neutral? \"bit\" in French phonetically collides with slang\n> > for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n> > in Turkish as well.\n> >\n> > Not that this really would be avoidable with any short word (all the\n> > short possible words are usually taken), but it's not neutral.\n> >\n> >> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de>\n> wrote:\n> >> Hello,\n> >>\n> >> just my two 'cents':\n> >>\n> >> Terms arises by itself. Just as most people speak of coins when they\n> >> mean bitcoins. I do not see that bitcoin is currently in common use\n> >> except for speculation. Therefore no term for smaller units has\n> >> established yet. No problem in my eyes. Time will tell.\n> >>\n> >> - oliver\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> >> applications. Written by three acclaimed leaders in the field,\n> >> this first edition is now available. Download your free book today!\n> >> http://p.sf.net/sfu/NeoTech\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Learn Graph Databases - Download FREE O'Reilly Book\n> > \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> > applications. Written by three acclaimed leaders in the field,\n> > this first edition is now available. Download your free book today!\n> > http://p.sf.net/sfu/NeoTech\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/7da437db/attachment.html>"
            },
            {
                "author": "Mike Caldwell",
                "date": "2014-04-21T01:18:03",
                "message_text_only": "My impression:\n\nGood because it is short, memorable, and pronounceable by speakers of most languages (though to most of the world that would be oo-bit, as \"u\" being \"yu\" is mostly an English thing)\n\nDownsides include the fact that \u03bc is not a U, it just resembles one. It is a lowercase M in Greek, a live spoken language also studied by many, and calling it a U conveys a notion of global unawareness. And the potential for \"XBT\" to be 1e-6 BTC on the world stage would be huge, worth pursuing.\n\nMike\n\nSent from my iPhone\n\nOn Apr 20, 2014, at 6:16 PM, \"Justin A\" <allport at gmail.com<mailto:allport at gmail.com>> wrote:\n\n\n<delurk>\n\nWhat about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin? Easy to say, tied in a visual way to the metric micro, leaves the required 2 decimal places for the marginally numerate.. What more could one want?\n\n</delurk>\n\nAlso, hi. My first post; plan to get involved over the southern hemisphere winter if I can learn enough.\n\nOn Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com<mailto:mcaldwell at swipeclock.com>> wrote:\nBy culturally neutral I mean we avoid deliberately invoking a cultural reference in the name.  For example \"satoshi\" would be a reference to Japanese culture just for being a common Japanese name regardless of who Satoshi turns out to be.\n\nMike\n\nSent from my iPhone\n\n> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com<mailto:christophe.biocca at gmail.com>> wrote:\n>\n> Culturally neutral? \"bit\" in French phonetically collides with slang\n> for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n> in Turkish as well.\n>\n> Not that this really would be avoidable with any short word (all the\n> short possible words are usually taken), but it's not neutral.\n>\n>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de<mailto:bitcoin at olivere.de>> wrote:\n>> Hello,\n>>\n>> just my two 'cents':\n>>\n>> Terms arises by itself. Just as most people speak of coins when they\n>> mean bitcoins. I do not see that bitcoin is currently in common use\n>> except for speculation. Therefore no term for smaller units has\n>> established yet. No problem in my eyes. Time will tell.\n>>\n>> - oliver\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net<mailto:Bitcoin-development at lists.sourceforge.net>\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net<mailto:Bitcoin-development at lists.sourceforge.net>\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n------------------------------------------------------------------------------\nLearn Graph Databases - Download FREE O'Reilly Book\n\"Graph Databases\" is the definitive new guide to graph databases and their\napplications. Written by three acclaimed leaders in the field,\nthis first edition is now available. Download your free book today!\nhttp://p.sf.net/sfu/NeoTech\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net<mailto:Bitcoin-development at lists.sourceforge.net>\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/fb9c396c/attachment.html>"
            },
            {
                "author": "Un Ix",
                "date": "2014-04-21T01:33:47",
                "message_text_only": "Something tells me this would be reduced to a single syllable in common usage I.e. bit.\n\nMy 2 cents goes for \"bit\". \n\nBecause: Bitcoin is a digital currency, BTC starts with \"bit\", \"bit\" refers to a small amount of something in its regular english usage and lastly 99.9876543% of people on the planet don't know what a digital \"bit\" is yet ...\n\nGavin\n\n> On 21/04/2014, at 9:20 am, \"Mike Caldwell\" <mcaldwell at swipeclock.com> wrote:\n> \n> My impression:\n> \n> Good because it is short, memorable, and pronounceable by speakers of most languages (though to most of the world that would be oo-bit, as \"u\" being \"yu\" is mostly an English thing)\n> \n> Downsides include the fact that \u03bc is not a U, it just resembles one. It is a lowercase M in Greek, a live spoken language also studied by many, and calling it a U conveys a notion of global unawareness. And the potential for \"XBT\" to be 1e-6 BTC on the world stage would be huge, worth pursuing. \n> \n> Mike\n> \n> Sent from my iPhone\n> \n>> On Apr 20, 2014, at 6:16 PM, \"Justin A\" <allport at gmail.com> wrote:\n>> \n>> <delurk>\n>> \n>> What about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin? Easy to say, tied in a visual way to the metric micro, leaves the required 2 decimal places for the marginally numerate.. What more could one want?\n>> \n>> </delurk>\n>> \n>> Also, hi. My first post; plan to get involved over the southern hemisphere winter if I can learn enough.\n>> \n>>> On Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com> wrote:\n>>> By culturally neutral I mean we avoid deliberately invoking a cultural reference in the name.  For example \"satoshi\" would be a reference to Japanese culture just for being a common Japanese name regardless of who Satoshi turns out to be.\n>>> \n>>> Mike\n>>> \n>>> Sent from my iPhone\n>>> \n>>> > On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com> wrote:\n>>> >\n>>> > Culturally neutral? \"bit\" in French phonetically collides with slang\n>>> > for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n>>> > in Turkish as well.\n>>> >\n>>> > Not that this really would be avoidable with any short word (all the\n>>> > short possible words are usually taken), but it's not neutral.\n>>> >\n>>> >> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de> wrote:\n>>> >> Hello,\n>>> >>\n>>> >> just my two 'cents':\n>>> >>\n>>> >> Terms arises by itself. Just as most people speak of coins when they\n>>> >> mean bitcoins. I do not see that bitcoin is currently in common use\n>>> >> except for speculation. Therefore no term for smaller units has\n>>> >> established yet. No problem in my eyes. Time will tell.\n>>> >>\n>>> >> - oliver\n>>> >>\n>>> >>\n>>> >> ------------------------------------------------------------------------------\n>>> >> Learn Graph Databases - Download FREE O'Reilly Book\n>>> >> \"Graph Databases\" is the definitive new guide to graph databases and their\n>>> >> applications. Written by three acclaimed leaders in the field,\n>>> >> this first edition is now available. Download your free book today!\n>>> >> http://p.sf.net/sfu/NeoTech\n>>> >> _______________________________________________\n>>> >> Bitcoin-development mailing list\n>>> >> Bitcoin-development at lists.sourceforge.net\n>>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> >\n>>> > ------------------------------------------------------------------------------\n>>> > Learn Graph Databases - Download FREE O'Reilly Book\n>>> > \"Graph Databases\" is the definitive new guide to graph databases and their\n>>> > applications. Written by three acclaimed leaders in the field,\n>>> > this first edition is now available. Download your free book today!\n>>> > http://p.sf.net/sfu/NeoTech\n>>> > _______________________________________________\n>>> > Bitcoin-development mailing list\n>>> > Bitcoin-development at lists.sourceforge.net\n>>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> \n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/1bb133b3/attachment.html>\n-------------- next part --------------\n------------------------------------------------------------------------------\nStart Your Social Network Today - Download eXo Platform\nBuild your Enterprise Intranet with eXo Platform Software\nJava Based Open Source Intranet - Social, Extensible, Cloud Ready\nGet Started Now And Turn Your Intranet Into A Collaboration Platform\nhttp://p.sf.net/sfu/ExoPlatform\n-------------- next part --------------\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mike Caldwell",
                "date": "2014-04-21T03:34:55",
                "message_text_only": "If bit had to be preceded by a letter I would nominate \"ebit\" or \"xbit\" (which could still be XBT)\n\nThose needing a definition for x could define it as \"coin/1000000\".\n\nThat said, I am still more in favor of \"bit\". Xbit would just solve the problems others cite about ambiguity if they had to be solved without the resulting name being too long.\n\nMike\n\nSent from my iPhone\n\nOn Apr 20, 2014, at 7:33 PM, \"Un Ix\" <slashdevnull at hotmail.com<mailto:slashdevnull at hotmail.com>> wrote:\n\nSomething tells me this would be reduced to a single syllable in common usage I.e. bit.\n\nMy 2 cents goes for \"bit\".\n\nBecause: Bitcoin is a digital currency, BTC starts with \"bit\", \"bit\" refers to a small amount of something in its regular english usage and lastly 99.9876543% of people on the planet don't know what a digital \"bit\" is yet ...\n\nGavin\n\nOn 21/04/2014, at 9:20 am, \"Mike Caldwell\" <mcaldwell at swipeclock.com<mailto:mcaldwell at swipeclock.com>> wrote:\n\nMy impression:\n\nGood because it is short, memorable, and pronounceable by speakers of most languages (though to most of the world that would be oo-bit, as \"u\" being \"yu\" is mostly an English thing)\n\nDownsides include the fact that \u03bc is not a U, it just resembles one. It is a lowercase M in Greek, a live spoken language also studied by many, and calling it a U conveys a notion of global unawareness. And the potential for \"XBT\" to be 1e-6 BTC on the world stage would be huge, worth pursuing.\n\nMike\n\nSent from my iPhone\n\nOn Apr 20, 2014, at 6:16 PM, \"Justin A\" <allport at gmail.com<mailto:allport at gmail.com>> wrote:\n\n\n<delurk>\n\nWhat about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin? Easy to say, tied in a visual way to the metric micro, leaves the required 2 decimal places for the marginally numerate.. What more could one want?\n\n</delurk>\n\nAlso, hi. My first post; plan to get involved over the southern hemisphere winter if I can learn enough.\n\nOn Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com<mailto:mcaldwell at swipeclock.com>> wrote:\nBy culturally neutral I mean we avoid deliberately invoking a cultural reference in the name.  For example \"satoshi\" would be a reference to Japanese culture just for being a common Japanese name regardless of who Satoshi turns out to be.\n\nMike\n\nSent from my iPhone\n\n> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com<mailto:christophe.biocca at gmail.com>> wrote:\n>\n> Culturally neutral? \"bit\" in French phonetically collides with slang\n> for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n> in Turkish as well.\n>\n> Not that this really would be avoidable with any short word (all the\n> short possible words are usually taken), but it's not neutral.\n>\n>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de<mailto:bitcoin at olivere.de>> wrote:\n>> Hello,\n>>\n>> just my two 'cents':\n>>\n>> Terms arises by itself. Just as most people speak of coins when they\n>> mean bitcoins. I do not see that bitcoin is currently in common use\n>> except for speculation. Therefore no term for smaller units has\n>> established yet. No problem in my eyes. Time will tell.\n>>\n>> - oliver\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net<mailto:Bitcoin-development at lists.sourceforge.net>\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> Learn Graph Databases - Download FREE O'Reilly Book\n> \"Graph Databases\" is the definitive new guide to graph databases and their\n> applications. Written by three acclaimed leaders in the field,\n> this first edition is now available. Download your free book today!\n> http://p.sf.net/sfu/NeoTech\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net<mailto:Bitcoin-development at lists.sourceforge.net>\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n------------------------------------------------------------------------------\nLearn Graph Databases - Download FREE O'Reilly Book\n\"Graph Databases\" is the definitive new guide to graph databases and their\napplications. Written by three acclaimed leaders in the field,\nthis first edition is now available. Download your free book today!\nhttp://p.sf.net/sfu/NeoTech\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net<mailto:Bitcoin-development at lists.sourceforge.net>\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n------------------------------------------------------------------------------\nStart Your Social Network Today - Download eXo Platform\nBuild your Enterprise Intranet with eXo Platform Software\nJava Based Open Source Intranet - Social, Extensible, Cloud Ready\nGet Started Now And Turn Your Intranet Into A Collaboration Platform\nhttp://p.sf.net/sfu/ExoPlatform\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net<mailto:Bitcoin-development at lists.sourceforge.net>\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n------------------------------------------------------------------------------\nStart Your Social Network Today - Download eXo Platform\nBuild your Enterprise Intranet with eXo Platform Software\nJava Based Open Source Intranet - Social, Extensible, Cloud Ready\nGet Started Now And Turn Your Intranet Into A Collaboration Platform\nhttp://p.sf.net/sfu/ExoPlatform\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net<mailto:Bitcoin-development at lists.sourceforge.net>\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/1509b60f/attachment.html>"
            },
            {
                "author": "Christopher Paika",
                "date": "2014-04-21T04:08:08",
                "message_text_only": "Bit is simple phonetically, I'm for it.\n\n\nOn Mon, Apr 21, 2014 at 1:34 PM, Mike Caldwell <mcaldwell at swipeclock.com>wrote:\n\n> If bit had to be preceded by a letter I would nominate \"ebit\" or \"xbit\"\n> (which could still be XBT)\n>\n> Those needing a definition for x could define it as \"coin/1000000\".\n>\n> That said, I am still more in favor of \"bit\". Xbit would just solve the\n> problems others cite about ambiguity if they had to be solved without the\n> resulting name being too long.\n>\n> Mike\n>\n> Sent from my iPhone\n>\n> On Apr 20, 2014, at 7:33 PM, \"Un Ix\" <slashdevnull at hotmail.com> wrote:\n>\n> Something tells me this would be reduced to a single syllable in common\n> usage I.e. bit.\n>\n> My 2 cents goes for \"bit\".\n>\n> Because: Bitcoin is a digital currency, BTC starts with \"bit\", \"bit\"\n> refers to a small amount of something in its regular english usage and\n> lastly 99.9876543% of people on the planet don't know what a digital \"bit\"\n> is yet ...\n>\n> Gavin\n>\n> On 21/04/2014, at 9:20 am, \"Mike Caldwell\" <mcaldwell at swipeclock.com>\n> wrote:\n>\n> My impression:\n>\n> Good because it is short, memorable, and pronounceable by speakers of most\n> languages (though to most of the world that would be oo-bit, as \"u\" being\n> \"yu\" is mostly an English thing)\n>\n> Downsides include the fact that \u03bc is not a U, it just resembles one. It is\n> a lowercase M in Greek, a live spoken language also studied by many, and\n> calling it a U conveys a notion of global unawareness. And the potential\n> for \"XBT\" to be 1e-6 BTC on the world stage would be huge, worth pursuing.\n>\n> Mike\n>\n> Sent from my iPhone\n>\n> On Apr 20, 2014, at 6:16 PM, \"Justin A\" <allport at gmail.com> wrote:\n>\n> <delurk>\n>\n> What about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin? Easy\n> to say, tied in a visual way to the metric micro, leaves the required 2\n> decimal places for the marginally numerate.. What more could one want?\n>\n> </delurk>\n>\n> Also, hi. My first post; plan to get involved over the southern hemisphere\n> winter if I can learn enough.\n> On Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com> wrote:\n>\n>> By culturally neutral I mean we avoid deliberately invoking a cultural\n>> reference in the name.  For example \"satoshi\" would be a reference to\n>> Japanese culture just for being a common Japanese name regardless of who\n>> Satoshi turns out to be.\n>>\n>> Mike\n>>\n>> Sent from my iPhone\n>>\n>> > On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n>> christophe.biocca at gmail.com> wrote:\n>> >\n>> > Culturally neutral? \"bit\" in French phonetically collides with slang\n>> > for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n>> > in Turkish as well.\n>> >\n>> > Not that this really would be avoidable with any short word (all the\n>> > short possible words are usually taken), but it's not neutral.\n>> >\n>> >> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de>\n>> wrote:\n>> >> Hello,\n>> >>\n>> >> just my two 'cents':\n>> >>\n>> >> Terms arises by itself. Just as most people speak of coins when they\n>> >> mean bitcoins. I do not see that bitcoin is currently in common use\n>> >> except for speculation. Therefore no term for smaller units has\n>> >> established yet. No problem in my eyes. Time will tell.\n>> >>\n>> >> - oliver\n>> >>\n>> >>\n>> >>\n>> ------------------------------------------------------------------------------\n>> >> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> \"Graph Databases\" is the definitive new guide to graph databases and\n>> their\n>> >> applications. Written by three acclaimed leaders in the field,\n>> >> this first edition is now available. Download your free book today!\n>> >> http://p.sf.net/sfu/NeoTech\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> > Learn Graph Databases - Download FREE O'Reilly Book\n>> > \"Graph Databases\" is the definitive new guide to graph databases and\n>> their\n>> > applications. Written by three acclaimed leaders in the field,\n>> > this first edition is now available. Download your free book today!\n>> > http://p.sf.net/sfu/NeoTech\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/ed682496/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-21T05:41:30",
                "message_text_only": "On Apr 21, 2014 3:37 AM, \"Un Ix\" <slashdevnull at hotmail.com> wrote:\n>\n> Something tells me this would be reduced to a single syllable in common\nusage I.e. bit.\n\nWhat units will be called colloquially is not something developers will\ndetermine. It will vary, depend on language and culture, and is not\nrelevant to this discussion in my opinion.\n\nIt may well be that people in some geographic or language area will end up\n(or for a while) calling 1e-06 BTC \"bits\". That's fine, but using that as\n\"official\" name in software would be very strange and potentially confusing\nin my opinion. As mentioned by others, that would seem to me like calling\ndollars \"bucks\" in bank software. Nobody seems to have a problem with\nhaving colloquial names, but \"US dollar\" or \"euro\" are far less ambiguous\nthan \"bit\". I think we need a more distinctive name.\n\n-- \nPieter\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/8bf1a762/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-21T05:51:45",
                "message_text_only": "I think we have two very good candidates both substantiated with arguments for their use in their context:\n\nbit  - the word for everyday use \nXBT - the acronym to fit into the ISO currency set.\n\nboth meaning 100 satoshis or 1e-6 Bitcoin. \n\nI am glad that I erred, and this list finaly cares of finance customs and average Joe\u2019s.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 21.04.2014, at 07:41, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> \n> On Apr 21, 2014 3:37 AM, \"Un Ix\" <slashdevnull at hotmail.com> wrote:\n> >\n> > Something tells me this would be reduced to a single syllable in common usage I.e. bit.\n> \n> What units will be called colloquially is not something developers will determine. It will vary, depend on language and culture, and is not relevant to this discussion in my opinion.\n> \n> It may well be that people in some geographic or language area will end up (or for a while) calling 1e-06 BTC \"bits\". That's fine, but using that as \"official\" name in software would be very strange and potentially confusing in my opinion. As mentioned by others, that would seem to me like calling dollars \"bucks\" in bank software. Nobody seems to have a problem with having colloquial names, but \"US dollar\" or \"euro\" are far less ambiguous than \"bit\". I think we need a more distinctive name.\n> \n> -- \n> Pieter\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/ed77a20c/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/ed77a20c/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-21T06:21:17",
                "message_text_only": "Here is one to please those looking for a \u201cfully qualified\u201d slang word, that links with the official XBT:\n\nxbit (spoken: ex-bit) would rationalise XBT (where X comes from supranational use) and is unique.\n\nI personally associate from x to six also supporting the 1e-6 divisor of Bitcoin.\n\nRegarding XBT: No matter who used it for what. The way Bloomberg will use it will define its use in finance,\nand since that did not happen yet, we are not late to shape.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 21.04.2014, at 07:41, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n\n> \n> On Apr 21, 2014 3:37 AM, \"Un Ix\" <slashdevnull at hotmail.com> wrote:\n> >\n> > Something tells me this would be reduced to a single syllable in common usage I.e. bit.\n> \n> What units will be called colloquially is not something developers will determine. It will vary, depend on language and culture, and is not relevant to this discussion in my opinion.\n> \n> It may well be that people in some geographic or language area will end up (or for a while) calling 1e-06 BTC \"bits\". That's fine, but using that as \"official\" name in software would be very strange and potentially confusing in my opinion. As mentioned by others, that would seem to me like calling dollars \"bucks\" in bank software. Nobody seems to have a problem with having colloquial names, but \"US dollar\" or \"euro\" are far less ambiguous than \"bit\". I think we need a more distinctive name.\n> \n> -- \n> Pieter\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/cf27cf74/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/cf27cf74/attachment.sig>"
            },
            {
                "author": "Un Ix",
                "date": "2014-04-21T12:14:25",
                "message_text_only": "Tamas,\n\n\"xbit\" is only a typo or spelling error away from \"XBT\", and some folks may assume they refer to the same unit of measure, not knowing the new currency system as developers here do.\n\nFrom your email, I got the idea of using \"x\" as a suffix at the end of a number of bits e.g. 17500x, like cents or centavos. I guess this might clash with formal S.I. notation but it's easy to read and has less ambiguity, IMHO.\n\n> On 21/04/2014, at 2:21 pm, \"Tamas Blummer\" <tamas at bitsofproof.com> wrote:\n> \n> Here is one to please those looking for a \u201cfully qualified\u201d slang word, that links with the official XBT:\n> \n> xbit (spoken: ex-bit) would rationalise XBT (where X comes from supranational use) and is unique.\n> \n> I personally associate from x to six also supporting the 1e-6 divisor of Bitcoin.\n> \n> Regarding XBT: No matter who used it for what. The way Bloomberg will use it will define its use in finance,\n> and since that did not happen yet, we are not late to shape.\n> \n> Regards,\n> \n> Tamas Blummer\n> http://bitsofproof.com\n> \n>> On 21.04.2014, at 07:41, Pieter Wuille <pieter.wuille at gmail.com> wrote:\n>> \n>> \n>> On Apr 21, 2014 3:37 AM, \"Un Ix\" <slashdevnull at hotmail.com> wrote:\n>> >\n>> > Something tells me this would be reduced to a single syllable in common usage I.e. bit.\n>> \n>> What units will be called colloquially is not something developers will determine. It will vary, depend on language and culture, and is not relevant to this discussion in my opinion.\n>> \n>> It may well be that people in some geographic or language area will end up (or for a while) calling 1e-06 BTC \"bits\". That's fine, but using that as \"official\" name in software would be very strange and potentially confusing in my opinion. As mentioned by others, that would seem to me like calling dollars \"bucks\" in bank software. Nobody seems to have a problem with having colloquial names, but \"US dollar\" or \"euro\" are far less ambiguous than \"bit\". I think we need a more distinctive name.\n>> \n>> -- \n>> Pieter\n>> ------------------------------------------------------------------------------\n>> Start Your Social Network Today - Download eXo Platform\n>> Build your Enterprise Intranet with eXo Platform Software\n>> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>> http://p.sf.net/sfu/ExoPlatform_______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/9cf942b1/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-21T12:24:36",
                "message_text_only": "xbit is close to XBT because it would be the same unit, both would mean 100 satoshi or 1e-6 Bitcoin.\n\nxbit would be for everyday use, XBT for ISO.\n\nI know, the XBT was used by some sites to be a synonym for BTC that is however in my opinion not yet graved in stone until it is used by e.g. Bloomberg.\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 21.04.2014, at 14:14, Un Ix <slashdevnull at hotmail.com> wrote:\n\n> Tamas,\n> \n> \"xbit\" is only a typo or spelling error away from \"XBT\", and some folks may assume they refer to the same unit of measure, not knowing the new currency system as developers here do.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/9da7cb3a/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/9da7cb3a/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "\"bits\": Unit of account",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Arne Brutschy",
                "Chris D'Costa",
                "Wladimir",
                "Pavol Rusnak",
                "Un Ix",
                "Jannis Froese",
                "Mike Caldwell",
                "Alan Reiner",
                "Danny Hamilton",
                "Tamas Blummer",
                "Natanael",
                "Justin A",
                "Pieter Wuille",
                "Christopher Paika",
                "Mike Gehl",
                "Oliver Egginger",
                "Gmail",
                "Erik Garrison",
                "Thomas Voegtlin",
                "Aaron Axvig",
                "Christophe Biocca",
                "Rob Golding",
                "Chris Pacia"
            ],
            "messages_count": 40,
            "total_messages_chars_count": 121436
        }
    },
    {
        "title": "[Bitcoin-development] Economics of information propagation",
        "thread_messages": [
            {
                "author": "Jonathan Levin",
                "date": "2014-04-21T01:30:28",
                "message_text_only": "Hi all,\n\nI am a post-graduate economist writing a paper on the incentives of mining. Even though this issue has been debated in the forums, I think it is important to get a sense of the magnitude of the incentives at play and determine what implications this has for the transaction fee market.\n\nAs it has been pointed out before the marginal cost for miners does not stem from the private cost of the miner validating the signature and including it in the list of transactions in the block but rather the increased probability that the block will be orphaned as a result of slower propagation. Gavin did some back of the envelope worst case calculations but these overstated the effect of propagation delay. The reason being the 80ms additional time to reach 50% of the network is spread throughout the time that it takes to reach 50% of the network. During this time miners are notified about the block and treat it as the longest chain and hence are no longer mining with the aim to produce a competing block. \n\nI am looking to calculate the change in the curvature of the probability mass function that a block hears about my block in any given second as a function of the block size. Although there is likely to be significant noise here, there seems to be some stable linear relationships with the time that it takes to reach different quartiles. Has anyone done this? I have used some empirical data that I am happy to share but ideally I would like analytical solutions.\n\nFollowing Peter Todd, I also find the concerning result that propagation delays results in increasing returns to higher shares of the hashing power. Indeed it may well be in the interest of large pools to publish large blocks to increase propagation delays on the network which would increase orphan rates particularly for small miners and miners that have not invested in sufficient bandwidth / connectivity. If a small miner hears about a block after 4.5 seconds on average there is a 0.7% chance that there is already a block in circulation.  Large miners can increase the time that it takes for small miners to hear about blocks by increasing the size of their blocks. For example if the time that it takes for a small miner to hear about the block goes to 12 seconds there is a 2 percent chance there is already a block in circulation for the small miner. There is also a 1.2% chance that there will be a competing block published after a small miner propagates in the time that it gets to full propagation. Am I getting this right that the probability of a miner\u2019s block being orphaned is comprised of the probability that the miner was not the first to find a valid block and the probability that given they are first, someone else in the absence of hearing about it finds a competing valid block. \n\nOne question is: Are orphans probabilistic and only resolved after hearing about a new block that lengthens the chain or is there a way to know in advance? Is it frowned upon to mine on top of a block that you have just found even though it is very likely going to end up an orphan?\n\nWould be happy to share the draft form of the paper and receive any feedback.\n\nFinally, at coinometrics we are working on a modified client to capture information on network propagation and would invite any suggestions of any other useful statistics that would be useful in the development of software. \n\nBest,\n\nJonathan\n\n\n\n\n\n\n\n\n\n\nOn 21 Apr 2014, at 01:16, <bitcoin-development-request at lists.sourceforge.net> <bitcoin-development-request at lists.sourceforge.net> wrote:\n\n> Send Bitcoin-development mailing list submissions to\n> \tbitcoin-development at lists.sourceforge.net\n> \n> To subscribe or unsubscribe via the World Wide Web, visit\n> \thttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> or, via email, send a message with subject or body 'help' to\n> \tbitcoin-development-request at lists.sourceforge.net\n> \n> You can reach the person managing the list at\n> \tbitcoin-development-owner at lists.sourceforge.net\n> \n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of Bitcoin-development digest...\"\n> \n> \n> Today's Topics:\n> \n>   1. Re: \"bits\": Unit of account (Oliver Egginger)\n>   2. Re: \"bits\": Unit of account (Christophe Biocca)\n>   3. Re: \"bits\": Unit of account (Gmail)\n>   4. Re: \"bits\": Unit of account (Mike Caldwell)\n>   5. Re: \"bits\": Unit of account (Justin A)\n> \n> \n> ----------------------------------------------------------------------\n> \n> Message: 1\n> Date: Sun, 20 Apr 2014 20:43:24 +0200\n> From: Oliver Egginger <bitcoin at olivere.de>\n> Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> Message-ID: <5354154C.1080908 at olivere.de>\n> Content-Type: text/plain; charset=ISO-8859-1\n> \n> Hello,\n> \n> just my two 'cents':\n> \n> Terms arises by itself. Just as most people speak of coins when they\n> mean bitcoins. I do not see that bitcoin is currently in common use\n> except for speculation. Therefore no term for smaller units has\n> established yet. No problem in my eyes. Time will tell.\n> \n> - oliver\n> \n> \n> \n> \n> ------------------------------\n> \n> Message: 2\n> Date: Sun, 20 Apr 2014 15:19:38 -0400\n> From: Christophe Biocca <christophe.biocca at gmail.com>\n> Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> Message-ID:\n> \t<CANOOu=9=TAnaCuyh_P2GqHaguyY39xjhj84HSA_x+6F4MOqM_A at mail.gmail.com>\n> Content-Type: text/plain; charset=UTF-8\n> \n> Culturally neutral? \"bit\" in French phonetically collides with slang\n> for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n> in Turkish as well.\n> \n> Not that this really would be avoidable with any short word (all the\n> short possible words are usually taken), but it's not neutral.\n> \n> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de> wrote:\n>> Hello,\n>> \n>> just my two 'cents':\n>> \n>> Terms arises by itself. Just as most people speak of coins when they\n>> mean bitcoins. I do not see that bitcoin is currently in common use\n>> except for speculation. Therefore no term for smaller units has\n>> established yet. No problem in my eyes. Time will tell.\n>> \n>> - oliver\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------\n> \n> Message: 3\n> Date: Sun, 20 Apr 2014 14:32:26 -0500\n> From: Gmail <will.yager at gmail.com>\n> Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> Message-ID: <B687D4AD-263F-4594-BE7A-FF238B8DF7AF at gmail.com>\n> Content-Type: text/plain; charset=\"us-ascii\"\n> \n> People in the Bitcoin community are sometimes resistant to the idea of using the word \"credit\" as a unit of Bitcoin, because Bitcoin is not a credit-based system. \n> \n> However, given that the average person has close to no understanding of what \"credit\" means, and probably no concern for the distinction even if they do know, it may be wise to use the futuristic and easily understandable \"credit\" as our human-friendly unit. \n> \n> Do others agree that \"credits\" as a unit of account has a desirable futuristic connotation?\n> \n> Will\n> \n> -------------- next part --------------\n> A non-text attachment was scrubbed...\n> Name: smime.p7s\n> Type: application/pkcs7-signature\n> Size: 1593 bytes\n> Desc: not available\n> \n> ------------------------------\n> \n> Message: 4\n> Date: Sun, 20 Apr 2014 16:28:34 -0400\n> From: Mike Caldwell <mcaldwell at swipeclock.com>\n> Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> To: Christophe Biocca <christophe.biocca at gmail.com>\n> Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> Message-ID: <4098C706-D67F-474E-9C13-E4C8F56B41ED at swipeclock.com>\n> Content-Type: text/plain; charset=\"us-ascii\"\n> \n> By culturally neutral I mean we avoid deliberately invoking a cultural reference in the name.  For example \"satoshi\" would be a reference to Japanese culture just for being a common Japanese name regardless of who Satoshi turns out to be. \n> \n> Mike\n> \n> Sent from my iPhone\n> \n>> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com> wrote:\n>> \n>> Culturally neutral? \"bit\" in French phonetically collides with slang\n>> for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n>> in Turkish as well.\n>> \n>> Not that this really would be avoidable with any short word (all the\n>> short possible words are usually taken), but it's not neutral.\n>> \n>>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de> wrote:\n>>> Hello,\n>>> \n>>> just my two 'cents':\n>>> \n>>> Terms arises by itself. Just as most people speak of coins when they\n>>> mean bitcoins. I do not see that bitcoin is currently in common use\n>>> except for speculation. Therefore no term for smaller units has\n>>> established yet. No problem in my eyes. Time will tell.\n>>> \n>>> - oliver\n>>> \n>>> \n>>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------\n> \n> Message: 5\n> Date: Sun, 20 Apr 2014 20:16:35 -0400\n> From: Justin A <allport at gmail.com>\n> Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> To: Mike Caldwell <mcaldwell at swipeclock.com>\n> Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> Message-ID:\n> \t<CAK2MuX3GufxU_AH0Kaw3pUkzgX_agok86ahCh+7r96UkxZwneQ at mail.gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n> \n> <delurk>\n> \n> What about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin? Easy to\n> say, tied in a visual way to the metric micro, leaves the required 2\n> decimal places for the marginally numerate.. What more could one want?\n> \n> </delurk>\n> \n> Also, hi. My first post; plan to get involved over the southern hemisphere\n> winter if I can learn enough.\n> On Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com> wrote:\n> \n>> By culturally neutral I mean we avoid deliberately invoking a cultural\n>> reference in the name.  For example \"satoshi\" would be a reference to\n>> Japanese culture just for being a common Japanese name regardless of who\n>> Satoshi turns out to be.\n>> \n>> Mike\n>> \n>> Sent from my iPhone\n>> \n>>> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n>> christophe.biocca at gmail.com> wrote:\n>>> \n>>> Culturally neutral? \"bit\" in French phonetically collides with slang\n>>> for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n>>> in Turkish as well.\n>>> \n>>> Not that this really would be avoidable with any short word (all the\n>>> short possible words are usually taken), but it's not neutral.\n>>> \n>>>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de>\n>> wrote:\n>>>> Hello,\n>>>> \n>>>> just my two 'cents':\n>>>> \n>>>> Terms arises by itself. Just as most people speak of coins when they\n>>>> mean bitcoins. I do not see that bitcoin is currently in common use\n>>>> except for speculation. Therefore no term for smaller units has\n>>>> established yet. No problem in my eyes. Time will tell.\n>>>> \n>>>> - oliver\n>>>> \n>>>> \n>>>> \n>> ------------------------------------------------------------------------------\n>>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>>> \"Graph Databases\" is the definitive new guide to graph databases and\n>> their\n>>>> applications. Written by three acclaimed leaders in the field,\n>>>> this first edition is now available. Download your free book today!\n>>>> http://p.sf.net/sfu/NeoTech\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>> \n>>> \n>> ------------------------------------------------------------------------------\n>>> Learn Graph Databases - Download FREE O'Reilly Book\n>>> \"Graph Databases\" is the definitive new guide to graph databases and\n>> their\n>>> applications. Written by three acclaimed leaders in the field,\n>>> this first edition is now available. Download your free book today!\n>>> http://p.sf.net/sfu/NeoTech\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Learn Graph Databases - Download FREE O'Reilly Book\n>> \"Graph Databases\" is the definitive new guide to graph databases and their\n>> applications. Written by three acclaimed leaders in the field,\n>> this first edition is now available. Download your free book today!\n>> http://p.sf.net/sfu/NeoTech\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> \n> ------------------------------\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> \n> ------------------------------\n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> End of Bitcoin-development Digest, Vol 35, Issue 72\n> ***************************************************\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/cfaa58dc/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-21T03:58:58",
                "message_text_only": "As soon as we switch to headers\nfirst - which will be soon - there will be no difference in propagation\ntime no matter how large the block is. Only 80 bites will be required to\npropagate the block header which establishes priority for when the block is\nfully validated.\nOn Apr 20, 2014 6:56 PM, \"Jonathan Levin\" <jonathan.levin at sant.ox.ac.uk>\nwrote:\n\n> Hi all,\n>\n> I am a post-graduate economist writing a paper on the incentives of\n> mining. Even though this issue has been debated in the forums, I think it\n> is important to get a sense of the magnitude of the incentives at play and\n> determine what implications this has for the transaction fee market.\n>\n> As it has been pointed out before the marginal cost for miners does not\n> stem from the private cost of the miner validating the signature and\n> including it in the list of transactions in the block but rather the\n> increased probability that the block will be orphaned as a result of slower\n> propagation. Gavin did some back of the envelope worst case calculations\n> but these overstated the effect of propagation delay. The reason being the\n> 80ms additional time to reach 50% of the network is spread throughout the\n> time that it takes to reach 50% of the network. During this time miners are\n> notified about the block and treat it as the longest chain and hence are no\n> longer mining with the aim to produce a competing block.\n>\n> I am looking to calculate the change in the curvature of the probability\n> mass function that a block hears about my block in any given second as a\n> function of the block size. Although there is likely to be significant\n> noise here, there seems to be some stable linear relationships with the\n> time that it takes to reach different quartiles. Has anyone done this? I\n> have used some empirical data that I am happy to share but ideally I would\n> like analytical solutions.\n>\n> Following Peter Todd, I also find the concerning result that propagation\n> delays results in increasing returns to higher shares of the hashing power.\n> Indeed it may well be in the interest of large pools to publish large\n> blocks to increase propagation delays on the network which would increase\n> orphan rates particularly for small miners and miners that have not\n> invested in sufficient bandwidth / connectivity. If a small miner hears\n> about a block after 4.5 seconds on average there is a 0.7% chance that\n> there is already a block in circulation.  Large miners can increase the\n> time that it takes for small miners to hear about blocks by increasing the\n> size of their blocks. For example if the time that it takes for a small\n> miner to hear about the block goes to 12 seconds there is a 2 percent\n> chance there is already a block in circulation for the small miner. There\n> is also a 1.2% chance that there will be a competing block published after\n> a small miner propagates in the time that it gets to full propagation. Am I\n> getting this right that the probability of a miner\u2019s block being orphaned\n> is comprised of the probability that the miner was not the first to find a\n> valid block and the probability that given they are first, someone else in\n> the absence of hearing about it finds a competing valid block.\n>\n> One question is: Are orphans probabilistic and only resolved after hearing\n> about a new block that lengthens the chain or is there a way to know in\n> advance? Is it frowned upon to mine on top of a block that you have just\n> found even though it is very likely going to end up an orphan?\n>\n> Would be happy to share the draft form of the paper and receive any\n> feedback.\n>\n> Finally, at coinometrics we are working on a modified client to capture\n> information on network propagation and would invite any suggestions of any\n> other useful statistics that would be useful in the development of software.\n>\n> Best,\n>\n> Jonathan\n>\n>\n>\n>\n>\n>\n>\n>\n>\n>\n> On 21 Apr 2014, at 01:16, <\n> bitcoin-development-request at lists.sourceforge.net> <\n> bitcoin-development-request at lists.sourceforge.net> wrote:\n>\n> > Send Bitcoin-development mailing list submissions to\n> >       bitcoin-development at lists.sourceforge.net\n> >\n> > To subscribe or unsubscribe via the World Wide Web, visit\n> >       https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> > or, via email, send a message with subject or body 'help' to\n> >       bitcoin-development-request at lists.sourceforge.net\n> >\n> > You can reach the person managing the list at\n> >       bitcoin-development-owner at lists.sourceforge.net\n> >\n> > When replying, please edit your Subject line so it is more specific\n> > than \"Re: Contents of Bitcoin-development digest...\"\n> >\n> >\n> > Today's Topics:\n> >\n> >   1. Re: \"bits\": Unit of account (Oliver Egginger)\n> >   2. Re: \"bits\": Unit of account (Christophe Biocca)\n> >   3. Re: \"bits\": Unit of account (Gmail)\n> >   4. Re: \"bits\": Unit of account (Mike Caldwell)\n> >   5. Re: \"bits\": Unit of account (Justin A)\n> >\n> >\n> > ----------------------------------------------------------------------\n> >\n> > Message: 1\n> > Date: Sun, 20 Apr 2014 20:43:24 +0200\n> > From: Oliver Egginger <bitcoin at olivere.de>\n> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> > To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> > Message-ID: <5354154C.1080908 at olivere.de>\n> > Content-Type: text/plain; charset=ISO-8859-1\n> >\n> > Hello,\n> >\n> > just my two 'cents':\n> >\n> > Terms arises by itself. Just as most people speak of coins when they\n> > mean bitcoins. I do not see that bitcoin is currently in common use\n> > except for speculation. Therefore no term for smaller units has\n> > established yet. No problem in my eyes. Time will tell.\n> >\n> > - oliver\n> >\n> >\n> >\n> >\n> > ------------------------------\n> >\n> > Message: 2\n> > Date: Sun, 20 Apr 2014 15:19:38 -0400\n> > From: Christophe Biocca <christophe.biocca at gmail.com>\n> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> > To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> > Message-ID:\n> >       <CANOOu=9=\n> TAnaCuyh_P2GqHaguyY39xjhj84HSA_x+6F4MOqM_A at mail.gmail.com>\n> > Content-Type: text/plain; charset=UTF-8\n> >\n> > Culturally neutral? \"bit\" in French phonetically collides with slang\n> > for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n> > in Turkish as well.\n> >\n> > Not that this really would be avoidable with any short word (all the\n> > short possible words are usually taken), but it's not neutral.\n> >\n> > On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de>\n> wrote:\n> >> Hello,\n> >>\n> >> just my two 'cents':\n> >>\n> >> Terms arises by itself. Just as most people speak of coins when they\n> >> mean bitcoins. I do not see that bitcoin is currently in common use\n> >> except for speculation. Therefore no term for smaller units has\n> >> established yet. No problem in my eyes. Time will tell.\n> >>\n> >> - oliver\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> >> applications. Written by three acclaimed leaders in the field,\n> >> this first edition is now available. Download your free book today!\n> >> http://p.sf.net/sfu/NeoTech\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> > ------------------------------\n> >\n> > Message: 3\n> > Date: Sun, 20 Apr 2014 14:32:26 -0500\n> > From: Gmail <will.yager at gmail.com>\n> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> > Message-ID: <B687D4AD-263F-4594-BE7A-FF238B8DF7AF at gmail.com>\n> > Content-Type: text/plain; charset=\"us-ascii\"\n> >\n> > People in the Bitcoin community are sometimes resistant to the idea of\n> using the word \"credit\" as a unit of Bitcoin, because Bitcoin is not a\n> credit-based system.\n> >\n> > However, given that the average person has close to no understanding of\n> what \"credit\" means, and probably no concern for the distinction even if\n> they do know, it may be wise to use the futuristic and easily\n> understandable \"credit\" as our human-friendly unit.\n> >\n> > Do others agree that \"credits\" as a unit of account has a desirable\n> futuristic connotation?\n> >\n> > Will\n> >\n> > -------------- next part --------------\n> > A non-text attachment was scrubbed...\n> > Name: smime.p7s\n> > Type: application/pkcs7-signature\n> > Size: 1593 bytes\n> > Desc: not available\n> >\n> > ------------------------------\n> >\n> > Message: 4\n> > Date: Sun, 20 Apr 2014 16:28:34 -0400\n> > From: Mike Caldwell <mcaldwell at swipeclock.com>\n> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> > To: Christophe Biocca <christophe.biocca at gmail.com>\n> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> > Message-ID: <4098C706-D67F-474E-9C13-E4C8F56B41ED at swipeclock.com>\n> > Content-Type: text/plain; charset=\"us-ascii\"\n> >\n> > By culturally neutral I mean we avoid deliberately invoking a cultural\n> reference in the name.  For example \"satoshi\" would be a reference to\n> Japanese culture just for being a common Japanese name regardless of who\n> Satoshi turns out to be.\n> >\n> > Mike\n> >\n> > Sent from my iPhone\n> >\n> >> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n> christophe.biocca at gmail.com> wrote:\n> >>\n> >> Culturally neutral? \"bit\" in French phonetically collides with slang\n> >> for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n> >> in Turkish as well.\n> >>\n> >> Not that this really would be avoidable with any short word (all the\n> >> short possible words are usually taken), but it's not neutral.\n> >>\n> >>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de>\n> wrote:\n> >>> Hello,\n> >>>\n> >>> just my two 'cents':\n> >>>\n> >>> Terms arises by itself. Just as most people speak of coins when they\n> >>> mean bitcoins. I do not see that bitcoin is currently in common use\n> >>> except for speculation. Therefore no term for smaller units has\n> >>> established yet. No problem in my eyes. Time will tell.\n> >>>\n> >>> - oliver\n> >>>\n> >>>\n> >>>\n> ------------------------------------------------------------------------------\n> >>> Learn Graph Databases - Download FREE O'Reilly Book\n> >>> \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> >>> applications. Written by three acclaimed leaders in the field,\n> >>> this first edition is now available. Download your free book today!\n> >>> http://p.sf.net/sfu/NeoTech\n> >>> _______________________________________________\n> >>> Bitcoin-development mailing list\n> >>> Bitcoin-development at lists.sourceforge.net\n> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> >> applications. Written by three acclaimed leaders in the field,\n> >> this first edition is now available. Download your free book today!\n> >> http://p.sf.net/sfu/NeoTech\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> > ------------------------------\n> >\n> > Message: 5\n> > Date: Sun, 20 Apr 2014 20:16:35 -0400\n> > From: Justin A <allport at gmail.com>\n> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> > To: Mike Caldwell <mcaldwell at swipeclock.com>\n> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> > Message-ID:\n> >       <\n> CAK2MuX3GufxU_AH0Kaw3pUkzgX_agok86ahCh+7r96UkxZwneQ at mail.gmail.com>\n> > Content-Type: text/plain; charset=\"utf-8\"\n> >\n> > <delurk>\n> >\n> > What about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin? Easy\n> to\n> > say, tied in a visual way to the metric micro, leaves the required 2\n> > decimal places for the marginally numerate.. What more could one want?\n> >\n> > </delurk>\n> >\n> > Also, hi. My first post; plan to get involved over the southern\n> hemisphere\n> > winter if I can learn enough.\n> > On Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com>\n> wrote:\n> >\n> >> By culturally neutral I mean we avoid deliberately invoking a cultural\n> >> reference in the name.  For example \"satoshi\" would be a reference to\n> >> Japanese culture just for being a common Japanese name regardless of who\n> >> Satoshi turns out to be.\n> >>\n> >> Mike\n> >>\n> >> Sent from my iPhone\n> >>\n> >>> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n> >> christophe.biocca at gmail.com> wrote:\n> >>>\n> >>> Culturally neutral? \"bit\" in French phonetically collides with slang\n> >>> for phallus (\"bitte\", with a silent \"e\"). Apparently it means \"louse\"\n> >>> in Turkish as well.\n> >>>\n> >>> Not that this really would be avoidable with any short word (all the\n> >>> short possible words are usually taken), but it's not neutral.\n> >>>\n> >>>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger <bitcoin at olivere.de>\n> >> wrote:\n> >>>> Hello,\n> >>>>\n> >>>> just my two 'cents':\n> >>>>\n> >>>> Terms arises by itself. Just as most people speak of coins when they\n> >>>> mean bitcoins. I do not see that bitcoin is currently in common use\n> >>>> except for speculation. Therefore no term for smaller units has\n> >>>> established yet. No problem in my eyes. Time will tell.\n> >>>>\n> >>>> - oliver\n> >>>>\n> >>>>\n> >>>>\n> >>\n> ------------------------------------------------------------------------------\n> >>>> Learn Graph Databases - Download FREE O'Reilly Book\n> >>>> \"Graph Databases\" is the definitive new guide to graph databases and\n> >> their\n> >>>> applications. Written by three acclaimed leaders in the field,\n> >>>> this first edition is now available. Download your free book today!\n> >>>> http://p.sf.net/sfu/NeoTech\n> >>>> _______________________________________________\n> >>>> Bitcoin-development mailing list\n> >>>> Bitcoin-development at lists.sourceforge.net\n> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>>\n> >>>\n> >>\n> ------------------------------------------------------------------------------\n> >>> Learn Graph Databases - Download FREE O'Reilly Book\n> >>> \"Graph Databases\" is the definitive new guide to graph databases and\n> >> their\n> >>> applications. Written by three acclaimed leaders in the field,\n> >>> this first edition is now available. Download your free book today!\n> >>> http://p.sf.net/sfu/NeoTech\n> >>> _______________________________________________\n> >>> Bitcoin-development mailing list\n> >>> Bitcoin-development at lists.sourceforge.net\n> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> \"Graph Databases\" is the definitive new guide to graph databases and\n> their\n> >> applications. Written by three acclaimed leaders in the field,\n> >> this first edition is now available. Download your free book today!\n> >> http://p.sf.net/sfu/NeoTech\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> > -------------- next part --------------\n> > An HTML attachment was scrubbed...\n> >\n> > ------------------------------\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Start Your Social Network Today - Download eXo Platform\n> > Build your Enterprise Intranet with eXo Platform Software\n> > Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> > Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> > http://p.sf.net/sfu/ExoPlatform\n> >\n> > ------------------------------\n> >\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> > End of Bitcoin-development Digest, Vol 35, Issue 72\n> > ***************************************************\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/5697c590/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-21T04:06:27",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThat is mistaken: you can't mine on top of just a block header, leaving small miners disadvantaged as they are earning no profit while they wait for the information to validate the block and update their UTXO sets. This results in the same problem as before, as the large pools who mine most blocks can validate either instantly - the self-mine case - or more quickly than the smaller miners.\n\nOf course, in reality smaller miners can just mine on top of block headers and include no transactions and do no validation, but that is extremely harmful to the security of Bitcoin.\n\n\nOn 20 April 2014 23:58:58 GMT-04:00, Mark Friedenbach <mark at monetize.io> wrote:\n>As soon as we switch to headers\n>first - which will be soon - there will be no difference in propagation\n>time no matter how large the block is. Only 80 bites will be required\n>to\n>propagate the block header which establishes priority for when the\n>block is\n>fully validated.\n>On Apr 20, 2014 6:56 PM, \"Jonathan Levin\"\n><jonathan.levin at sant.ox.ac.uk>\n>wrote:\n>\n>> Hi all,\n>>\n>> I am a post-graduate economist writing a paper on the incentives of\n>> mining. Even though this issue has been debated in the forums, I\n>think it\n>> is important to get a sense of the magnitude of the incentives at\n>play and\n>> determine what implications this has for the transaction fee market.\n>>\n>> As it has been pointed out before the marginal cost for miners does\n>not\n>> stem from the private cost of the miner validating the signature and\n>> including it in the list of transactions in the block but rather the\n>> increased probability that the block will be orphaned as a result of\n>slower\n>> propagation. Gavin did some back of the envelope worst case\n>calculations\n>> but these overstated the effect of propagation delay. The reason\n>being the\n>> 80ms additional time to reach 50% of the network is spread throughout\n>the\n>> time that it takes to reach 50% of the network. During this time\n>miners are\n>> notified about the block and treat it as the longest chain and hence\n>are no\n>> longer mining with the aim to produce a competing block.\n>>\n>> I am looking to calculate the change in the curvature of the\n>probability\n>> mass function that a block hears about my block in any given second\n>as a\n>> function of the block size. Although there is likely to be\n>significant\n>> noise here, there seems to be some stable linear relationships with\n>the\n>> time that it takes to reach different quartiles. Has anyone done\n>this? I\n>> have used some empirical data that I am happy to share but ideally I\n>would\n>> like analytical solutions.\n>>\n>> Following Peter Todd, I also find the concerning result that\n>propagation\n>> delays results in increasing returns to higher shares of the hashing\n>power.\n>> Indeed it may well be in the interest of large pools to publish large\n>> blocks to increase propagation delays on the network which would\n>increase\n>> orphan rates particularly for small miners and miners that have not\n>> invested in sufficient bandwidth / connectivity. If a small miner\n>hears\n>> about a block after 4.5 seconds on average there is a 0.7% chance\n>that\n>> there is already a block in circulation.  Large miners can increase\n>the\n>> time that it takes for small miners to hear about blocks by\n>increasing the\n>> size of their blocks. For example if the time that it takes for a\n>small\n>> miner to hear about the block goes to 12 seconds there is a 2 percent\n>> chance there is already a block in circulation for the small miner.\n>There\n>> is also a 1.2% chance that there will be a competing block published\n>after\n>> a small miner propagates in the time that it gets to full\n>propagation. Am I\n>> getting this right that the probability of a miner\u2019s block being\n>orphaned\n>> is comprised of the probability that the miner was not the first to\n>find a\n>> valid block and the probability that given they are first, someone\n>else in\n>> the absence of hearing about it finds a competing valid block.\n>>\n>> One question is: Are orphans probabilistic and only resolved after\n>hearing\n>> about a new block that lengthens the chain or is there a way to know\n>in\n>> advance? Is it frowned upon to mine on top of a block that you have\n>just\n>> found even though it is very likely going to end up an orphan?\n>>\n>> Would be happy to share the draft form of the paper and receive any\n>> feedback.\n>>\n>> Finally, at coinometrics we are working on a modified client to\n>capture\n>> information on network propagation and would invite any suggestions\n>of any\n>> other useful statistics that would be useful in the development of\n>software.\n>>\n>> Best,\n>>\n>> Jonathan\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>>\n>> On 21 Apr 2014, at 01:16, <\n>> bitcoin-development-request at lists.sourceforge.net> <\n>> bitcoin-development-request at lists.sourceforge.net> wrote:\n>>\n>> > Send Bitcoin-development mailing list submissions to\n>> >       bitcoin-development at lists.sourceforge.net\n>> >\n>> > To subscribe or unsubscribe via the World Wide Web, visit\n>> >\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> > or, via email, send a message with subject or body 'help' to\n>> >       bitcoin-development-request at lists.sourceforge.net\n>> >\n>> > You can reach the person managing the list at\n>> >       bitcoin-development-owner at lists.sourceforge.net\n>> >\n>> > When replying, please edit your Subject line so it is more specific\n>> > than \"Re: Contents of Bitcoin-development digest...\"\n>> >\n>> >\n>> > Today's Topics:\n>> >\n>> >   1. Re: \"bits\": Unit of account (Oliver Egginger)\n>> >   2. Re: \"bits\": Unit of account (Christophe Biocca)\n>> >   3. Re: \"bits\": Unit of account (Gmail)\n>> >   4. Re: \"bits\": Unit of account (Mike Caldwell)\n>> >   5. Re: \"bits\": Unit of account (Justin A)\n>> >\n>> >\n>> >\n>----------------------------------------------------------------------\n>> >\n>> > Message: 1\n>> > Date: Sun, 20 Apr 2014 20:43:24 +0200\n>> > From: Oliver Egginger <bitcoin at olivere.de>\n>> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> > To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> > Message-ID: <5354154C.1080908 at olivere.de>\n>> > Content-Type: text/plain; charset=ISO-8859-1\n>> >\n>> > Hello,\n>> >\n>> > just my two 'cents':\n>> >\n>> > Terms arises by itself. Just as most people speak of coins when\n>they\n>> > mean bitcoins. I do not see that bitcoin is currently in common use\n>> > except for speculation. Therefore no term for smaller units has\n>> > established yet. No problem in my eyes. Time will tell.\n>> >\n>> > - oliver\n>> >\n>> >\n>> >\n>> >\n>> > ------------------------------\n>> >\n>> > Message: 2\n>> > Date: Sun, 20 Apr 2014 15:19:38 -0400\n>> > From: Christophe Biocca <christophe.biocca at gmail.com>\n>> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> > To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> > Message-ID:\n>> >       <CANOOu=9=\n>> TAnaCuyh_P2GqHaguyY39xjhj84HSA_x+6F4MOqM_A at mail.gmail.com>\n>> > Content-Type: text/plain; charset=UTF-8\n>> >\n>> > Culturally neutral? \"bit\" in French phonetically collides with\n>slang\n>> > for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n>\"louse\"\n>> > in Turkish as well.\n>> >\n>> > Not that this really would be avoidable with any short word (all\n>the\n>> > short possible words are usually taken), but it's not neutral.\n>> >\n>> > On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n><bitcoin at olivere.de>\n>> wrote:\n>> >> Hello,\n>> >>\n>> >> just my two 'cents':\n>> >>\n>> >> Terms arises by itself. Just as most people speak of coins when\n>they\n>> >> mean bitcoins. I do not see that bitcoin is currently in common\n>use\n>> >> except for speculation. Therefore no term for smaller units has\n>> >> established yet. No problem in my eyes. Time will tell.\n>> >>\n>> >> - oliver\n>> >>\n>> >>\n>> >>\n>>\n>------------------------------------------------------------------------------\n>> >> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> \"Graph Databases\" is the definitive new guide to graph databases\n>and\n>> their\n>> >> applications. Written by three acclaimed leaders in the field,\n>> >> this first edition is now available. Download your free book\n>today!\n>> >> http://p.sf.net/sfu/NeoTech\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>> >\n>> >\n>> > ------------------------------\n>> >\n>> > Message: 3\n>> > Date: Sun, 20 Apr 2014 14:32:26 -0500\n>> > From: Gmail <will.yager at gmail.com>\n>> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> > Message-ID: <B687D4AD-263F-4594-BE7A-FF238B8DF7AF at gmail.com>\n>> > Content-Type: text/plain; charset=\"us-ascii\"\n>> >\n>> > People in the Bitcoin community are sometimes resistant to the idea\n>of\n>> using the word \"credit\" as a unit of Bitcoin, because Bitcoin is not\n>a\n>> credit-based system.\n>> >\n>> > However, given that the average person has close to no\n>understanding of\n>> what \"credit\" means, and probably no concern for the distinction even\n>if\n>> they do know, it may be wise to use the futuristic and easily\n>> understandable \"credit\" as our human-friendly unit.\n>> >\n>> > Do others agree that \"credits\" as a unit of account has a desirable\n>> futuristic connotation?\n>> >\n>> > Will\n>> >\n>> > -------------- next part --------------\n>> > A non-text attachment was scrubbed...\n>> > Name: smime.p7s\n>> > Type: application/pkcs7-signature\n>> > Size: 1593 bytes\n>> > Desc: not available\n>> >\n>> > ------------------------------\n>> >\n>> > Message: 4\n>> > Date: Sun, 20 Apr 2014 16:28:34 -0400\n>> > From: Mike Caldwell <mcaldwell at swipeclock.com>\n>> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> > To: Christophe Biocca <christophe.biocca at gmail.com>\n>> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> > Message-ID: <4098C706-D67F-474E-9C13-E4C8F56B41ED at swipeclock.com>\n>> > Content-Type: text/plain; charset=\"us-ascii\"\n>> >\n>> > By culturally neutral I mean we avoid deliberately invoking a\n>cultural\n>> reference in the name.  For example \"satoshi\" would be a reference to\n>> Japanese culture just for being a common Japanese name regardless of\n>who\n>> Satoshi turns out to be.\n>> >\n>> > Mike\n>> >\n>> > Sent from my iPhone\n>> >\n>> >> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n>> christophe.biocca at gmail.com> wrote:\n>> >>\n>> >> Culturally neutral? \"bit\" in French phonetically collides with\n>slang\n>> >> for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n>\"louse\"\n>> >> in Turkish as well.\n>> >>\n>> >> Not that this really would be avoidable with any short word (all\n>the\n>> >> short possible words are usually taken), but it's not neutral.\n>> >>\n>> >>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n><bitcoin at olivere.de>\n>> wrote:\n>> >>> Hello,\n>> >>>\n>> >>> just my two 'cents':\n>> >>>\n>> >>> Terms arises by itself. Just as most people speak of coins when\n>they\n>> >>> mean bitcoins. I do not see that bitcoin is currently in common\n>use\n>> >>> except for speculation. Therefore no term for smaller units has\n>> >>> established yet. No problem in my eyes. Time will tell.\n>> >>>\n>> >>> - oliver\n>> >>>\n>> >>>\n>> >>>\n>>\n>------------------------------------------------------------------------------\n>> >>> Learn Graph Databases - Download FREE O'Reilly Book\n>> >>> \"Graph Databases\" is the definitive new guide to graph databases\n>and\n>> their\n>> >>> applications. Written by three acclaimed leaders in the field,\n>> >>> this first edition is now available. Download your free book\n>today!\n>> >>> http://p.sf.net/sfu/NeoTech\n>> >>> _______________________________________________\n>> >>> Bitcoin-development mailing list\n>> >>> Bitcoin-development at lists.sourceforge.net\n>> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >>\n>>\n>------------------------------------------------------------------------------\n>> >> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> \"Graph Databases\" is the definitive new guide to graph databases\n>and\n>> their\n>> >> applications. Written by three acclaimed leaders in the field,\n>> >> this first edition is now available. Download your free book\n>today!\n>> >> http://p.sf.net/sfu/NeoTech\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>> >\n>> >\n>> > ------------------------------\n>> >\n>> > Message: 5\n>> > Date: Sun, 20 Apr 2014 20:16:35 -0400\n>> > From: Justin A <allport at gmail.com>\n>> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> > To: Mike Caldwell <mcaldwell at swipeclock.com>\n>> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> > Message-ID:\n>> >       <\n>> CAK2MuX3GufxU_AH0Kaw3pUkzgX_agok86ahCh+7r96UkxZwneQ at mail.gmail.com>\n>> > Content-Type: text/plain; charset=\"utf-8\"\n>> >\n>> > <delurk>\n>> >\n>> > What about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin?\n>Easy\n>> to\n>> > say, tied in a visual way to the metric micro, leaves the required\n>2\n>> > decimal places for the marginally numerate.. What more could one\n>want?\n>> >\n>> > </delurk>\n>> >\n>> > Also, hi. My first post; plan to get involved over the southern\n>> hemisphere\n>> > winter if I can learn enough.\n>> > On Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com>\n>> wrote:\n>> >\n>> >> By culturally neutral I mean we avoid deliberately invoking a\n>cultural\n>> >> reference in the name.  For example \"satoshi\" would be a reference\n>to\n>> >> Japanese culture just for being a common Japanese name regardless\n>of who\n>> >> Satoshi turns out to be.\n>> >>\n>> >> Mike\n>> >>\n>> >> Sent from my iPhone\n>> >>\n>> >>> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n>> >> christophe.biocca at gmail.com> wrote:\n>> >>>\n>> >>> Culturally neutral? \"bit\" in French phonetically collides with\n>slang\n>> >>> for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n>\"louse\"\n>> >>> in Turkish as well.\n>> >>>\n>> >>> Not that this really would be avoidable with any short word (all\n>the\n>> >>> short possible words are usually taken), but it's not neutral.\n>> >>>\n>> >>>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n><bitcoin at olivere.de>\n>> >> wrote:\n>> >>>> Hello,\n>> >>>>\n>> >>>> just my two 'cents':\n>> >>>>\n>> >>>> Terms arises by itself. Just as most people speak of coins when\n>they\n>> >>>> mean bitcoins. I do not see that bitcoin is currently in common\n>use\n>> >>>> except for speculation. Therefore no term for smaller units has\n>> >>>> established yet. No problem in my eyes. Time will tell.\n>> >>>>\n>> >>>> - oliver\n>> >>>>\n>> >>>>\n>> >>>>\n>> >>\n>>\n>------------------------------------------------------------------------------\n>> >>>> Learn Graph Databases - Download FREE O'Reilly Book\n>> >>>> \"Graph Databases\" is the definitive new guide to graph databases\n>and\n>> >> their\n>> >>>> applications. Written by three acclaimed leaders in the field,\n>> >>>> this first edition is now available. Download your free book\n>today!\n>> >>>> http://p.sf.net/sfu/NeoTech\n>> >>>> _______________________________________________\n>> >>>> Bitcoin-development mailing list\n>> >>>> Bitcoin-development at lists.sourceforge.net\n>> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>>\n>> >>>\n>> >>\n>>\n>------------------------------------------------------------------------------\n>> >>> Learn Graph Databases - Download FREE O'Reilly Book\n>> >>> \"Graph Databases\" is the definitive new guide to graph databases\n>and\n>> >> their\n>> >>> applications. Written by three acclaimed leaders in the field,\n>> >>> this first edition is now available. Download your free book\n>today!\n>> >>> http://p.sf.net/sfu/NeoTech\n>> >>> _______________________________________________\n>> >>> Bitcoin-development mailing list\n>> >>> Bitcoin-development at lists.sourceforge.net\n>> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >>\n>> >>\n>>\n>------------------------------------------------------------------------------\n>> >> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> \"Graph Databases\" is the definitive new guide to graph databases\n>and\n>> their\n>> >> applications. Written by three acclaimed leaders in the field,\n>> >> this first edition is now available. Download your free book\n>today!\n>> >> http://p.sf.net/sfu/NeoTech\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> > -------------- next part --------------\n>> > An HTML attachment was scrubbed...\n>> >\n>> > ------------------------------\n>> >\n>> >\n>>\n>------------------------------------------------------------------------------\n>> > Start Your Social Network Today - Download eXo Platform\n>> > Build your Enterprise Intranet with eXo Platform Software\n>> > Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> > Get Started Now And Turn Your Intranet Into A Collaboration\n>Platform\n>> > http://p.sf.net/sfu/ExoPlatform\n>> >\n>> > ------------------------------\n>> >\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>> >\n>> > End of Bitcoin-development Digest, Vol 35, Issue 72\n>> > ***************************************************\n>>\n>>\n>>\n>>\n>------------------------------------------------------------------------------\n>> Start Your Social Network Today - Download eXo Platform\n>> Build your Enterprise Intranet with eXo Platform Software\n>> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>> http://p.sf.net/sfu/ExoPlatform\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>Start Your Social Network Today - Download eXo Platform\n>Build your Enterprise Intranet with eXo Platform Software\n>Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>http://p.sf.net/sfu/ExoPlatform\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.1.1\n\niQFQBAEBCAA6BQJTVJlDMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhTbNB/4lHTsUN/iee7H0UyBn\n+TDRgf1BSoUx9HP+vtwXzS0JkVQoxoB5x4Pls+ex7qIXGNxdG9EPYi1RqQ5A8RUo\nX2ntOL2pj6qTmW4aYxqqyihiQayLs5ixHPmJxqHv343g5ekqsKmBeDuWR4hXjUyZ\n0Pfcp40Xd3eJ38dSbq98letl5eD+ryBPKYtb91Trumqa9S0WB8kw9IqNaXjlpfG1\nlYuaVEllpaLpZW+4cx1mlPneS1GmLvloWhXf4Qh4X39VXECAjOAmNKh1atJCyT7H\nugkOcx1F2Rxo5P3jNzBRJKyAD96sbOhKm4sX7rzSjhT3WJgyHtJm3wkeluDCOVbR\nQZqK\n=R7Tv\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Daniel Lidstrom",
                "date": "2014-04-21T04:44:24",
                "message_text_only": "> Of course, in reality smaller miners can just mine on top of block headers\n> and include no transactions and do no validation, but that is extremely\n> harmful to the security of Bitcoin.\n\n\nIf it's only during the few seconds that it takes to to verify the block,\nthen would this really be that big of a deal?  E.g. even if all miners did\nthis, a 10 second delay would only yield an average of a couple blind/empty\nblocks per day.\n\n\nOn Sun, Apr 20, 2014 at 10:06 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA256\n>\n> That is mistaken: you can't mine on top of just a block header, leaving\n> small miners disadvantaged as they are earning no profit while they wait\n> for the information to validate the block and update their UTXO sets. This\n> results in the same problem as before, as the large pools who mine most\n> blocks can validate either instantly - the self-mine case - or more quickly\n> than the smaller miners.\n>\n> Of course, in reality smaller miners can just mine on top of block headers\n> and include no transactions and do no validation, but that is extremely\n> harmful to the security of Bitcoin.\n>\n>\n> On 20 April 2014 23:58:58 GMT-04:00, Mark Friedenbach <mark at monetize.io>\n> wrote:\n> >As soon as we switch to headers\n> >first - which will be soon - there will be no difference in propagation\n> >time no matter how large the block is. Only 80 bites will be required\n> >to\n> >propagate the block header which establishes priority for when the\n> >block is\n> >fully validated.\n> >On Apr 20, 2014 6:56 PM, \"Jonathan Levin\"\n> ><jonathan.levin at sant.ox.ac.uk>\n> >wrote:\n> >\n> >> Hi all,\n> >>\n> >> I am a post-graduate economist writing a paper on the incentives of\n> >> mining. Even though this issue has been debated in the forums, I\n> >think it\n> >> is important to get a sense of the magnitude of the incentives at\n> >play and\n> >> determine what implications this has for the transaction fee market.\n> >>\n> >> As it has been pointed out before the marginal cost for miners does\n> >not\n> >> stem from the private cost of the miner validating the signature and\n> >> including it in the list of transactions in the block but rather the\n> >> increased probability that the block will be orphaned as a result of\n> >slower\n> >> propagation. Gavin did some back of the envelope worst case\n> >calculations\n> >> but these overstated the effect of propagation delay. The reason\n> >being the\n> >> 80ms additional time to reach 50% of the network is spread throughout\n> >the\n> >> time that it takes to reach 50% of the network. During this time\n> >miners are\n> >> notified about the block and treat it as the longest chain and hence\n> >are no\n> >> longer mining with the aim to produce a competing block.\n> >>\n> >> I am looking to calculate the change in the curvature of the\n> >probability\n> >> mass function that a block hears about my block in any given second\n> >as a\n> >> function of the block size. Although there is likely to be\n> >significant\n> >> noise here, there seems to be some stable linear relationships with\n> >the\n> >> time that it takes to reach different quartiles. Has anyone done\n> >this? I\n> >> have used some empirical data that I am happy to share but ideally I\n> >would\n> >> like analytical solutions.\n> >>\n> >> Following Peter Todd, I also find the concerning result that\n> >propagation\n> >> delays results in increasing returns to higher shares of the hashing\n> >power.\n> >> Indeed it may well be in the interest of large pools to publish large\n> >> blocks to increase propagation delays on the network which would\n> >increase\n> >> orphan rates particularly for small miners and miners that have not\n> >> invested in sufficient bandwidth / connectivity. If a small miner\n> >hears\n> >> about a block after 4.5 seconds on average there is a 0.7% chance\n> >that\n> >> there is already a block in circulation.  Large miners can increase\n> >the\n> >> time that it takes for small miners to hear about blocks by\n> >increasing the\n> >> size of their blocks. For example if the time that it takes for a\n> >small\n> >> miner to hear about the block goes to 12 seconds there is a 2 percent\n> >> chance there is already a block in circulation for the small miner.\n> >There\n> >> is also a 1.2% chance that there will be a competing block published\n> >after\n> >> a small miner propagates in the time that it gets to full\n> >propagation. Am I\n> >> getting this right that the probability of a miner\u2019s block being\n> >orphaned\n> >> is comprised of the probability that the miner was not the first to\n> >find a\n> >> valid block and the probability that given they are first, someone\n> >else in\n> >> the absence of hearing about it finds a competing valid block.\n> >>\n> >> One question is: Are orphans probabilistic and only resolved after\n> >hearing\n> >> about a new block that lengthens the chain or is there a way to know\n> >in\n> >> advance? Is it frowned upon to mine on top of a block that you have\n> >just\n> >> found even though it is very likely going to end up an orphan?\n> >>\n> >> Would be happy to share the draft form of the paper and receive any\n> >> feedback.\n> >>\n> >> Finally, at coinometrics we are working on a modified client to\n> >capture\n> >> information on network propagation and would invite any suggestions\n> >of any\n> >> other useful statistics that would be useful in the development of\n> >software.\n> >>\n> >> Best,\n> >>\n> >> Jonathan\n> >>\n> >>\n> >>\n> >>\n> >>\n> >>\n> >>\n> >>\n> >>\n> >>\n> >> On 21 Apr 2014, at 01:16, <\n> >> bitcoin-development-request at lists.sourceforge.net> <\n> >> bitcoin-development-request at lists.sourceforge.net> wrote:\n> >>\n> >> > Send Bitcoin-development mailing list submissions to\n> >> >       bitcoin-development at lists.sourceforge.net\n> >> >\n> >> > To subscribe or unsubscribe via the World Wide Web, visit\n> >> >\n> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> > or, via email, send a message with subject or body 'help' to\n> >> >       bitcoin-development-request at lists.sourceforge.net\n> >> >\n> >> > You can reach the person managing the list at\n> >> >       bitcoin-development-owner at lists.sourceforge.net\n> >> >\n> >> > When replying, please edit your Subject line so it is more specific\n> >> > than \"Re: Contents of Bitcoin-development digest...\"\n> >> >\n> >> >\n> >> > Today's Topics:\n> >> >\n> >> >   1. Re: \"bits\": Unit of account (Oliver Egginger)\n> >> >   2. Re: \"bits\": Unit of account (Christophe Biocca)\n> >> >   3. Re: \"bits\": Unit of account (Gmail)\n> >> >   4. Re: \"bits\": Unit of account (Mike Caldwell)\n> >> >   5. Re: \"bits\": Unit of account (Justin A)\n> >> >\n> >> >\n> >> >\n> >----------------------------------------------------------------------\n> >> >\n> >> > Message: 1\n> >> > Date: Sun, 20 Apr 2014 20:43:24 +0200\n> >> > From: Oliver Egginger <bitcoin at olivere.de>\n> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> >> > To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> >> > Message-ID: <5354154C.1080908 at olivere.de>\n> >> > Content-Type: text/plain; charset=ISO-8859-1\n> >> >\n> >> > Hello,\n> >> >\n> >> > just my two 'cents':\n> >> >\n> >> > Terms arises by itself. Just as most people speak of coins when\n> >they\n> >> > mean bitcoins. I do not see that bitcoin is currently in common use\n> >> > except for speculation. Therefore no term for smaller units has\n> >> > established yet. No problem in my eyes. Time will tell.\n> >> >\n> >> > - oliver\n> >> >\n> >> >\n> >> >\n> >> >\n> >> > ------------------------------\n> >> >\n> >> > Message: 2\n> >> > Date: Sun, 20 Apr 2014 15:19:38 -0400\n> >> > From: Christophe Biocca <christophe.biocca at gmail.com>\n> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> >> > To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> >> > Message-ID:\n> >> >       <CANOOu=9=\n> >> TAnaCuyh_P2GqHaguyY39xjhj84HSA_x+6F4MOqM_A at mail.gmail.com>\n> >> > Content-Type: text/plain; charset=UTF-8\n> >> >\n> >> > Culturally neutral? \"bit\" in French phonetically collides with\n> >slang\n> >> > for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n> >\"louse\"\n> >> > in Turkish as well.\n> >> >\n> >> > Not that this really would be avoidable with any short word (all\n> >the\n> >> > short possible words are usually taken), but it's not neutral.\n> >> >\n> >> > On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n> ><bitcoin at olivere.de>\n> >> wrote:\n> >> >> Hello,\n> >> >>\n> >> >> just my two 'cents':\n> >> >>\n> >> >> Terms arises by itself. Just as most people speak of coins when\n> >they\n> >> >> mean bitcoins. I do not see that bitcoin is currently in common\n> >use\n> >> >> except for speculation. Therefore no term for smaller units has\n> >> >> established yet. No problem in my eyes. Time will tell.\n> >> >>\n> >> >> - oliver\n> >> >>\n> >> >>\n> >> >>\n> >>\n>\n> >------------------------------------------------------------------------------\n> >> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> >> \"Graph Databases\" is the definitive new guide to graph databases\n> >and\n> >> their\n> >> >> applications. Written by three acclaimed leaders in the field,\n> >> >> this first edition is now available. Download your free book\n> >today!\n> >> >> http://p.sf.net/sfu/NeoTech\n> >> >> _______________________________________________\n> >> >> Bitcoin-development mailing list\n> >> >> Bitcoin-development at lists.sourceforge.net\n> >> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >\n> >> >\n> >> >\n> >> > ------------------------------\n> >> >\n> >> > Message: 3\n> >> > Date: Sun, 20 Apr 2014 14:32:26 -0500\n> >> > From: Gmail <will.yager at gmail.com>\n> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> >> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> >> > Message-ID: <B687D4AD-263F-4594-BE7A-FF238B8DF7AF at gmail.com>\n> >> > Content-Type: text/plain; charset=\"us-ascii\"\n> >> >\n> >> > People in the Bitcoin community are sometimes resistant to the idea\n> >of\n> >> using the word \"credit\" as a unit of Bitcoin, because Bitcoin is not\n> >a\n> >> credit-based system.\n> >> >\n> >> > However, given that the average person has close to no\n> >understanding of\n> >> what \"credit\" means, and probably no concern for the distinction even\n> >if\n> >> they do know, it may be wise to use the futuristic and easily\n> >> understandable \"credit\" as our human-friendly unit.\n> >> >\n> >> > Do others agree that \"credits\" as a unit of account has a desirable\n> >> futuristic connotation?\n> >> >\n> >> > Will\n> >> >\n> >> > -------------- next part --------------\n> >> > A non-text attachment was scrubbed...\n> >> > Name: smime.p7s\n> >> > Type: application/pkcs7-signature\n> >> > Size: 1593 bytes\n> >> > Desc: not available\n> >> >\n> >> > ------------------------------\n> >> >\n> >> > Message: 4\n> >> > Date: Sun, 20 Apr 2014 16:28:34 -0400\n> >> > From: Mike Caldwell <mcaldwell at swipeclock.com>\n> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> >> > To: Christophe Biocca <christophe.biocca at gmail.com>\n> >> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> >> > Message-ID: <4098C706-D67F-474E-9C13-E4C8F56B41ED at swipeclock.com>\n> >> > Content-Type: text/plain; charset=\"us-ascii\"\n> >> >\n> >> > By culturally neutral I mean we avoid deliberately invoking a\n> >cultural\n> >> reference in the name.  For example \"satoshi\" would be a reference to\n> >> Japanese culture just for being a common Japanese name regardless of\n> >who\n> >> Satoshi turns out to be.\n> >> >\n> >> > Mike\n> >> >\n> >> > Sent from my iPhone\n> >> >\n> >> >> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n> >> christophe.biocca at gmail.com> wrote:\n> >> >>\n> >> >> Culturally neutral? \"bit\" in French phonetically collides with\n> >slang\n> >> >> for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n> >\"louse\"\n> >> >> in Turkish as well.\n> >> >>\n> >> >> Not that this really would be avoidable with any short word (all\n> >the\n> >> >> short possible words are usually taken), but it's not neutral.\n> >> >>\n> >> >>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n> ><bitcoin at olivere.de>\n> >> wrote:\n> >> >>> Hello,\n> >> >>>\n> >> >>> just my two 'cents':\n> >> >>>\n> >> >>> Terms arises by itself. Just as most people speak of coins when\n> >they\n> >> >>> mean bitcoins. I do not see that bitcoin is currently in common\n> >use\n> >> >>> except for speculation. Therefore no term for smaller units has\n> >> >>> established yet. No problem in my eyes. Time will tell.\n> >> >>>\n> >> >>> - oliver\n> >> >>>\n> >> >>>\n> >> >>>\n> >>\n>\n> >------------------------------------------------------------------------------\n> >> >>> Learn Graph Databases - Download FREE O'Reilly Book\n> >> >>> \"Graph Databases\" is the definitive new guide to graph databases\n> >and\n> >> their\n> >> >>> applications. Written by three acclaimed leaders in the field,\n> >> >>> this first edition is now available. Download your free book\n> >today!\n> >> >>> http://p.sf.net/sfu/NeoTech\n> >> >>> _______________________________________________\n> >> >>> Bitcoin-development mailing list\n> >> >>> Bitcoin-development at lists.sourceforge.net\n> >> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>\n> >> >>\n> >>\n>\n> >------------------------------------------------------------------------------\n> >> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> >> \"Graph Databases\" is the definitive new guide to graph databases\n> >and\n> >> their\n> >> >> applications. Written by three acclaimed leaders in the field,\n> >> >> this first edition is now available. Download your free book\n> >today!\n> >> >> http://p.sf.net/sfu/NeoTech\n> >> >> _______________________________________________\n> >> >> Bitcoin-development mailing list\n> >> >> Bitcoin-development at lists.sourceforge.net\n> >> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >\n> >> >\n> >> >\n> >> > ------------------------------\n> >> >\n> >> > Message: 5\n> >> > Date: Sun, 20 Apr 2014 20:16:35 -0400\n> >> > From: Justin A <allport at gmail.com>\n> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n> >> > To: Mike Caldwell <mcaldwell at swipeclock.com>\n> >> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n> >> > Message-ID:\n> >> >       <\n> >> CAK2MuX3GufxU_AH0Kaw3pUkzgX_agok86ahCh+7r96UkxZwneQ at mail.gmail.com>\n> >> > Content-Type: text/plain; charset=\"utf-8\"\n> >> >\n> >> > <delurk>\n> >> >\n> >> > What about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin?\n> >Easy\n> >> to\n> >> > say, tied in a visual way to the metric micro, leaves the required\n> >2\n> >> > decimal places for the marginally numerate.. What more could one\n> >want?\n> >> >\n> >> > </delurk>\n> >> >\n> >> > Also, hi. My first post; plan to get involved over the southern\n> >> hemisphere\n> >> > winter if I can learn enough.\n> >> > On Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com>\n> >> wrote:\n> >> >\n> >> >> By culturally neutral I mean we avoid deliberately invoking a\n> >cultural\n> >> >> reference in the name.  For example \"satoshi\" would be a reference\n> >to\n> >> >> Japanese culture just for being a common Japanese name regardless\n> >of who\n> >> >> Satoshi turns out to be.\n> >> >>\n> >> >> Mike\n> >> >>\n> >> >> Sent from my iPhone\n> >> >>\n> >> >>> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n> >> >> christophe.biocca at gmail.com> wrote:\n> >> >>>\n> >> >>> Culturally neutral? \"bit\" in French phonetically collides with\n> >slang\n> >> >>> for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n> >\"louse\"\n> >> >>> in Turkish as well.\n> >> >>>\n> >> >>> Not that this really would be avoidable with any short word (all\n> >the\n> >> >>> short possible words are usually taken), but it's not neutral.\n> >> >>>\n> >> >>>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n> ><bitcoin at olivere.de>\n> >> >> wrote:\n> >> >>>> Hello,\n> >> >>>>\n> >> >>>> just my two 'cents':\n> >> >>>>\n> >> >>>> Terms arises by itself. Just as most people speak of coins when\n> >they\n> >> >>>> mean bitcoins. I do not see that bitcoin is currently in common\n> >use\n> >> >>>> except for speculation. Therefore no term for smaller units has\n> >> >>>> established yet. No problem in my eyes. Time will tell.\n> >> >>>>\n> >> >>>> - oliver\n> >> >>>>\n> >> >>>>\n> >> >>>>\n> >> >>\n> >>\n>\n> >------------------------------------------------------------------------------\n> >> >>>> Learn Graph Databases - Download FREE O'Reilly Book\n> >> >>>> \"Graph Databases\" is the definitive new guide to graph databases\n> >and\n> >> >> their\n> >> >>>> applications. Written by three acclaimed leaders in the field,\n> >> >>>> this first edition is now available. Download your free book\n> >today!\n> >> >>>> http://p.sf.net/sfu/NeoTech\n> >> >>>> _______________________________________________\n> >> >>>> Bitcoin-development mailing list\n> >> >>>> Bitcoin-development at lists.sourceforge.net\n> >> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>>\n> >> >>>\n> >> >>\n> >>\n>\n> >------------------------------------------------------------------------------\n> >> >>> Learn Graph Databases - Download FREE O'Reilly Book\n> >> >>> \"Graph Databases\" is the definitive new guide to graph databases\n> >and\n> >> >> their\n> >> >>> applications. Written by three acclaimed leaders in the field,\n> >> >>> this first edition is now available. Download your free book\n> >today!\n> >> >>> http://p.sf.net/sfu/NeoTech\n> >> >>> _______________________________________________\n> >> >>> Bitcoin-development mailing list\n> >> >>> Bitcoin-development at lists.sourceforge.net\n> >> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>\n> >> >>\n> >> >>\n> >>\n>\n> >------------------------------------------------------------------------------\n> >> >> Learn Graph Databases - Download FREE O'Reilly Book\n> >> >> \"Graph Databases\" is the definitive new guide to graph databases\n> >and\n> >> their\n> >> >> applications. Written by three acclaimed leaders in the field,\n> >> >> this first edition is now available. Download your free book\n> >today!\n> >> >> http://p.sf.net/sfu/NeoTech\n> >> >> _______________________________________________\n> >> >> Bitcoin-development mailing list\n> >> >> Bitcoin-development at lists.sourceforge.net\n> >> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >>\n> >> > -------------- next part --------------\n> >> > An HTML attachment was scrubbed...\n> >> >\n> >> > ------------------------------\n> >> >\n> >> >\n> >>\n>\n> >------------------------------------------------------------------------------\n> >> > Start Your Social Network Today - Download eXo Platform\n> >> > Build your Enterprise Intranet with eXo Platform Software\n> >> > Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> >> > Get Started Now And Turn Your Intranet Into A Collaboration\n> >Platform\n> >> > http://p.sf.net/sfu/ExoPlatform\n> >> >\n> >> > ------------------------------\n> >> >\n> >> > _______________________________________________\n> >> > Bitcoin-development mailing list\n> >> > Bitcoin-development at lists.sourceforge.net\n> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >> >\n> >> >\n> >> > End of Bitcoin-development Digest, Vol 35, Issue 72\n> >> > ***************************************************\n> >>\n> >>\n> >>\n> >>\n>\n> >------------------------------------------------------------------------------\n> >> Start Your Social Network Today - Download eXo Platform\n> >> Build your Enterprise Intranet with eXo Platform Software\n> >> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> >> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> >> http://p.sf.net/sfu/ExoPlatform\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >>\n> >\n> >\n> >------------------------------------------------------------------------\n> >\n>\n> >------------------------------------------------------------------------------\n> >Start Your Social Network Today - Download eXo Platform\n> >Build your Enterprise Intranet with eXo Platform Software\n> >Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> >Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> >http://p.sf.net/sfu/ExoPlatform\n> >\n> >------------------------------------------------------------------------\n> >\n> >_______________________________________________\n> >Bitcoin-development mailing list\n> >Bitcoin-development at lists.sourceforge.net\n> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> -----BEGIN PGP SIGNATURE-----\n> Version: APG v1.1.1\n>\n> iQFQBAEBCAA6BQJTVJlDMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhTbNB/4lHTsUN/iee7H0UyBn\n> +TDRgf1BSoUx9HP+vtwXzS0JkVQoxoB5x4Pls+ex7qIXGNxdG9EPYi1RqQ5A8RUo\n> X2ntOL2pj6qTmW4aYxqqyihiQayLs5ixHPmJxqHv343g5ekqsKmBeDuWR4hXjUyZ\n> 0Pfcp40Xd3eJ38dSbq98letl5eD+ryBPKYtb91Trumqa9S0WB8kw9IqNaXjlpfG1\n> lYuaVEllpaLpZW+4cx1mlPneS1GmLvloWhXf4Qh4X39VXECAjOAmNKh1atJCyT7H\n> ugkOcx1F2Rxo5P3jNzBRJKyAD96sbOhKm4sX7rzSjhT3WJgyHtJm3wkeluDCOVbR\n> QZqK\n> =R7Tv\n> -----END PGP SIGNATURE-----\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/3e2600cd/attachment.html>"
            },
            {
                "author": "Daniel Lidstrom",
                "date": "2014-04-21T05:46:29",
                "message_text_only": "If this policy of mining empty blocks upon new block headers before\ndownloading and verifying the blocks became the standard, then wouldn't the\nmarginal orphan probability per transaction vanish?  It seems like this\ncould be a way to seriously reduce transaction fees.\n\n\nOn Sun, Apr 20, 2014 at 10:44 PM, Daniel Lidstrom <lidstrom83 at gmail.com>wrote:\n\n>\n> Of course, in reality smaller miners can just mine on top of block headers\n>> and include no transactions and do no validation, but that is extremely\n>> harmful to the security of Bitcoin.\n>\n>\n> If it's only during the few seconds that it takes to to verify the block,\n> then would this really be that big of a deal?  E.g. even if all miners did\n> this, a 10 second delay would only yield an average of a couple blind/empty\n> blocks per day.\n>\n>\n> On Sun, Apr 20, 2014 at 10:06 PM, Peter Todd <pete at petertodd.org> wrote:\n>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA256\n>>\n>> That is mistaken: you can't mine on top of just a block header, leaving\n>> small miners disadvantaged as they are earning no profit while they wait\n>> for the information to validate the block and update their UTXO sets. This\n>> results in the same problem as before, as the large pools who mine most\n>> blocks can validate either instantly - the self-mine case - or more quickly\n>> than the smaller miners.\n>>\n>> Of course, in reality smaller miners can just mine on top of block\n>> headers and include no transactions and do no validation, but that is\n>> extremely harmful to the security of Bitcoin.\n>>\n>>\n>> On 20 April 2014 23:58:58 GMT-04:00, Mark Friedenbach <mark at monetize.io>\n>> wrote:\n>> >As soon as we switch to headers\n>> >first - which will be soon - there will be no difference in propagation\n>> >time no matter how large the block is. Only 80 bites will be required\n>> >to\n>> >propagate the block header which establishes priority for when the\n>> >block is\n>> >fully validated.\n>> >On Apr 20, 2014 6:56 PM, \"Jonathan Levin\"\n>> ><jonathan.levin at sant.ox.ac.uk>\n>> >wrote:\n>> >\n>> >> Hi all,\n>> >>\n>> >> I am a post-graduate economist writing a paper on the incentives of\n>> >> mining. Even though this issue has been debated in the forums, I\n>> >think it\n>> >> is important to get a sense of the magnitude of the incentives at\n>> >play and\n>> >> determine what implications this has for the transaction fee market.\n>> >>\n>> >> As it has been pointed out before the marginal cost for miners does\n>> >not\n>> >> stem from the private cost of the miner validating the signature and\n>> >> including it in the list of transactions in the block but rather the\n>> >> increased probability that the block will be orphaned as a result of\n>> >slower\n>> >> propagation. Gavin did some back of the envelope worst case\n>> >calculations\n>> >> but these overstated the effect of propagation delay. The reason\n>> >being the\n>> >> 80ms additional time to reach 50% of the network is spread throughout\n>> >the\n>> >> time that it takes to reach 50% of the network. During this time\n>> >miners are\n>> >> notified about the block and treat it as the longest chain and hence\n>> >are no\n>> >> longer mining with the aim to produce a competing block.\n>> >>\n>> >> I am looking to calculate the change in the curvature of the\n>> >probability\n>> >> mass function that a block hears about my block in any given second\n>> >as a\n>> >> function of the block size. Although there is likely to be\n>> >significant\n>> >> noise here, there seems to be some stable linear relationships with\n>> >the\n>> >> time that it takes to reach different quartiles. Has anyone done\n>> >this? I\n>> >> have used some empirical data that I am happy to share but ideally I\n>> >would\n>> >> like analytical solutions.\n>> >>\n>> >> Following Peter Todd, I also find the concerning result that\n>> >propagation\n>> >> delays results in increasing returns to higher shares of the hashing\n>> >power.\n>> >> Indeed it may well be in the interest of large pools to publish large\n>> >> blocks to increase propagation delays on the network which would\n>> >increase\n>> >> orphan rates particularly for small miners and miners that have not\n>> >> invested in sufficient bandwidth / connectivity. If a small miner\n>> >hears\n>> >> about a block after 4.5 seconds on average there is a 0.7% chance\n>> >that\n>> >> there is already a block in circulation.  Large miners can increase\n>> >the\n>> >> time that it takes for small miners to hear about blocks by\n>> >increasing the\n>> >> size of their blocks. For example if the time that it takes for a\n>> >small\n>> >> miner to hear about the block goes to 12 seconds there is a 2 percent\n>> >> chance there is already a block in circulation for the small miner.\n>> >There\n>> >> is also a 1.2% chance that there will be a competing block published\n>> >after\n>> >> a small miner propagates in the time that it gets to full\n>> >propagation. Am I\n>> >> getting this right that the probability of a miner\u2019s block being\n>> >orphaned\n>> >> is comprised of the probability that the miner was not the first to\n>> >find a\n>> >> valid block and the probability that given they are first, someone\n>> >else in\n>> >> the absence of hearing about it finds a competing valid block.\n>> >>\n>> >> One question is: Are orphans probabilistic and only resolved after\n>> >hearing\n>> >> about a new block that lengthens the chain or is there a way to know\n>> >in\n>> >> advance? Is it frowned upon to mine on top of a block that you have\n>> >just\n>> >> found even though it is very likely going to end up an orphan?\n>> >>\n>> >> Would be happy to share the draft form of the paper and receive any\n>> >> feedback.\n>> >>\n>> >> Finally, at coinometrics we are working on a modified client to\n>> >capture\n>> >> information on network propagation and would invite any suggestions\n>> >of any\n>> >> other useful statistics that would be useful in the development of\n>> >software.\n>> >>\n>> >> Best,\n>> >>\n>> >> Jonathan\n>> >>\n>> >>\n>> >>\n>> >>\n>> >>\n>> >>\n>> >>\n>> >>\n>> >>\n>> >>\n>> >> On 21 Apr 2014, at 01:16, <\n>> >> bitcoin-development-request at lists.sourceforge.net> <\n>> >> bitcoin-development-request at lists.sourceforge.net> wrote:\n>> >>\n>> >> > Send Bitcoin-development mailing list submissions to\n>> >> >       bitcoin-development at lists.sourceforge.net\n>> >> >\n>> >> > To subscribe or unsubscribe via the World Wide Web, visit\n>> >> >\n>> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >> > or, via email, send a message with subject or body 'help' to\n>> >> >       bitcoin-development-request at lists.sourceforge.net\n>> >> >\n>> >> > You can reach the person managing the list at\n>> >> >       bitcoin-development-owner at lists.sourceforge.net\n>> >> >\n>> >> > When replying, please edit your Subject line so it is more specific\n>> >> > than \"Re: Contents of Bitcoin-development digest...\"\n>> >> >\n>> >> >\n>> >> > Today's Topics:\n>> >> >\n>> >> >   1. Re: \"bits\": Unit of account (Oliver Egginger)\n>> >> >   2. Re: \"bits\": Unit of account (Christophe Biocca)\n>> >> >   3. Re: \"bits\": Unit of account (Gmail)\n>> >> >   4. Re: \"bits\": Unit of account (Mike Caldwell)\n>> >> >   5. Re: \"bits\": Unit of account (Justin A)\n>> >> >\n>> >> >\n>> >> >\n>> >----------------------------------------------------------------------\n>> >> >\n>> >> > Message: 1\n>> >> > Date: Sun, 20 Apr 2014 20:43:24 +0200\n>> >> > From: Oliver Egginger <bitcoin at olivere.de>\n>> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> >> > To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> >> > Message-ID: <5354154C.1080908 at olivere.de>\n>> >> > Content-Type: text/plain; charset=ISO-8859-1\n>> >> >\n>> >> > Hello,\n>> >> >\n>> >> > just my two 'cents':\n>> >> >\n>> >> > Terms arises by itself. Just as most people speak of coins when\n>> >they\n>> >> > mean bitcoins. I do not see that bitcoin is currently in common use\n>> >> > except for speculation. Therefore no term for smaller units has\n>> >> > established yet. No problem in my eyes. Time will tell.\n>> >> >\n>> >> > - oliver\n>> >> >\n>> >> >\n>> >> >\n>> >> >\n>> >> > ------------------------------\n>> >> >\n>> >> > Message: 2\n>> >> > Date: Sun, 20 Apr 2014 15:19:38 -0400\n>> >> > From: Christophe Biocca <christophe.biocca at gmail.com>\n>> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> >> > To: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> >> > Message-ID:\n>> >> >       <CANOOu=9=\n>> >> TAnaCuyh_P2GqHaguyY39xjhj84HSA_x+6F4MOqM_A at mail.gmail.com>\n>> >> > Content-Type: text/plain; charset=UTF-8\n>> >> >\n>> >> > Culturally neutral? \"bit\" in French phonetically collides with\n>> >slang\n>> >> > for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n>> >\"louse\"\n>> >> > in Turkish as well.\n>> >> >\n>> >> > Not that this really would be avoidable with any short word (all\n>> >the\n>> >> > short possible words are usually taken), but it's not neutral.\n>> >> >\n>> >> > On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n>> ><bitcoin at olivere.de>\n>> >> wrote:\n>> >> >> Hello,\n>> >> >>\n>> >> >> just my two 'cents':\n>> >> >>\n>> >> >> Terms arises by itself. Just as most people speak of coins when\n>> >they\n>> >> >> mean bitcoins. I do not see that bitcoin is currently in common\n>> >use\n>> >> >> except for speculation. Therefore no term for smaller units has\n>> >> >> established yet. No problem in my eyes. Time will tell.\n>> >> >>\n>> >> >> - oliver\n>> >> >>\n>> >> >>\n>> >> >>\n>> >>\n>>\n>> >------------------------------------------------------------------------------\n>> >> >> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> >> \"Graph Databases\" is the definitive new guide to graph databases\n>> >and\n>> >> their\n>> >> >> applications. Written by three acclaimed leaders in the field,\n>> >> >> this first edition is now available. Download your free book\n>> >today!\n>> >> >> http://p.sf.net/sfu/NeoTech\n>> >> >> _______________________________________________\n>> >> >> Bitcoin-development mailing list\n>> >> >> Bitcoin-development at lists.sourceforge.net\n>> >> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >> >\n>> >> >\n>> >> >\n>> >> > ------------------------------\n>> >> >\n>> >> > Message: 3\n>> >> > Date: Sun, 20 Apr 2014 14:32:26 -0500\n>> >> > From: Gmail <will.yager at gmail.com>\n>> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> >> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> >> > Message-ID: <B687D4AD-263F-4594-BE7A-FF238B8DF7AF at gmail.com>\n>> >> > Content-Type: text/plain; charset=\"us-ascii\"\n>> >> >\n>> >> > People in the Bitcoin community are sometimes resistant to the idea\n>> >of\n>> >> using the word \"credit\" as a unit of Bitcoin, because Bitcoin is not\n>> >a\n>> >> credit-based system.\n>> >> >\n>> >> > However, given that the average person has close to no\n>> >understanding of\n>> >> what \"credit\" means, and probably no concern for the distinction even\n>> >if\n>> >> they do know, it may be wise to use the futuristic and easily\n>> >> understandable \"credit\" as our human-friendly unit.\n>> >> >\n>> >> > Do others agree that \"credits\" as a unit of account has a desirable\n>> >> futuristic connotation?\n>> >> >\n>> >> > Will\n>> >> >\n>> >> > -------------- next part --------------\n>> >> > A non-text attachment was scrubbed...\n>> >> > Name: smime.p7s\n>> >> > Type: application/pkcs7-signature\n>> >> > Size: 1593 bytes\n>> >> > Desc: not available\n>> >> >\n>> >> > ------------------------------\n>> >> >\n>> >> > Message: 4\n>> >> > Date: Sun, 20 Apr 2014 16:28:34 -0400\n>> >> > From: Mike Caldwell <mcaldwell at swipeclock.com>\n>> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> >> > To: Christophe Biocca <christophe.biocca at gmail.com>\n>> >> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> >> > Message-ID: <4098C706-D67F-474E-9C13-E4C8F56B41ED at swipeclock.com>\n>> >> > Content-Type: text/plain; charset=\"us-ascii\"\n>> >> >\n>> >> > By culturally neutral I mean we avoid deliberately invoking a\n>> >cultural\n>> >> reference in the name.  For example \"satoshi\" would be a reference to\n>> >> Japanese culture just for being a common Japanese name regardless of\n>> >who\n>> >> Satoshi turns out to be.\n>> >> >\n>> >> > Mike\n>> >> >\n>> >> > Sent from my iPhone\n>> >> >\n>> >> >> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n>> >> christophe.biocca at gmail.com> wrote:\n>> >> >>\n>> >> >> Culturally neutral? \"bit\" in French phonetically collides with\n>> >slang\n>> >> >> for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n>> >\"louse\"\n>> >> >> in Turkish as well.\n>> >> >>\n>> >> >> Not that this really would be avoidable with any short word (all\n>> >the\n>> >> >> short possible words are usually taken), but it's not neutral.\n>> >> >>\n>> >> >>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n>> ><bitcoin at olivere.de>\n>> >> wrote:\n>> >> >>> Hello,\n>> >> >>>\n>> >> >>> just my two 'cents':\n>> >> >>>\n>> >> >>> Terms arises by itself. Just as most people speak of coins when\n>> >they\n>> >> >>> mean bitcoins. I do not see that bitcoin is currently in common\n>> >use\n>> >> >>> except for speculation. Therefore no term for smaller units has\n>> >> >>> established yet. No problem in my eyes. Time will tell.\n>> >> >>>\n>> >> >>> - oliver\n>> >> >>>\n>> >> >>>\n>> >> >>>\n>> >>\n>>\n>> >------------------------------------------------------------------------------\n>> >> >>> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> >>> \"Graph Databases\" is the definitive new guide to graph databases\n>> >and\n>> >> their\n>> >> >>> applications. Written by three acclaimed leaders in the field,\n>> >> >>> this first edition is now available. Download your free book\n>> >today!\n>> >> >>> http://p.sf.net/sfu/NeoTech\n>> >> >>> _______________________________________________\n>> >> >>> Bitcoin-development mailing list\n>> >> >>> Bitcoin-development at lists.sourceforge.net\n>> >> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >> >>\n>> >> >>\n>> >>\n>>\n>> >------------------------------------------------------------------------------\n>> >> >> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> >> \"Graph Databases\" is the definitive new guide to graph databases\n>> >and\n>> >> their\n>> >> >> applications. Written by three acclaimed leaders in the field,\n>> >> >> this first edition is now available. Download your free book\n>> >today!\n>> >> >> http://p.sf.net/sfu/NeoTech\n>> >> >> _______________________________________________\n>> >> >> Bitcoin-development mailing list\n>> >> >> Bitcoin-development at lists.sourceforge.net\n>> >> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >> >\n>> >> >\n>> >> >\n>> >> > ------------------------------\n>> >> >\n>> >> > Message: 5\n>> >> > Date: Sun, 20 Apr 2014 20:16:35 -0400\n>> >> > From: Justin A <allport at gmail.com>\n>> >> > Subject: Re: [Bitcoin-development] \"bits\": Unit of account\n>> >> > To: Mike Caldwell <mcaldwell at swipeclock.com>\n>> >> > Cc: Bitcoin Development <bitcoin-development at lists.sourceforge.net>\n>> >> > Message-ID:\n>> >> >       <\n>> >> CAK2MuX3GufxU_AH0Kaw3pUkzgX_agok86ahCh+7r96UkxZwneQ at mail.gmail.com>\n>> >> > Content-Type: text/plain; charset=\"utf-8\"\n>> >> >\n>> >> > <delurk>\n>> >> >\n>> >> > What about \"ubit\", pronounced \"YOU-bit\", representing 1e-6 bitcoin?\n>> >Easy\n>> >> to\n>> >> > say, tied in a visual way to the metric micro, leaves the required\n>> >2\n>> >> > decimal places for the marginally numerate.. What more could one\n>> >want?\n>> >> >\n>> >> > </delurk>\n>> >> >\n>> >> > Also, hi. My first post; plan to get involved over the southern\n>> >> hemisphere\n>> >> > winter if I can learn enough.\n>> >> > On Apr 20, 2014 4:32 PM, \"Mike Caldwell\" <mcaldwell at swipeclock.com>\n>> >> wrote:\n>> >> >\n>> >> >> By culturally neutral I mean we avoid deliberately invoking a\n>> >cultural\n>> >> >> reference in the name.  For example \"satoshi\" would be a reference\n>> >to\n>> >> >> Japanese culture just for being a common Japanese name regardless\n>> >of who\n>> >> >> Satoshi turns out to be.\n>> >> >>\n>> >> >> Mike\n>> >> >>\n>> >> >> Sent from my iPhone\n>> >> >>\n>> >> >>> On Apr 20, 2014, at 1:20 PM, \"Christophe Biocca\" <\n>> >> >> christophe.biocca at gmail.com> wrote:\n>> >> >>>\n>> >> >>> Culturally neutral? \"bit\" in French phonetically collides with\n>> >slang\n>> >> >>> for phallus (\"bitte\", with a silent \"e\"). Apparently it means\n>> >\"louse\"\n>> >> >>> in Turkish as well.\n>> >> >>>\n>> >> >>> Not that this really would be avoidable with any short word (all\n>> >the\n>> >> >>> short possible words are usually taken), but it's not neutral.\n>> >> >>>\n>> >> >>>> On Sun, Apr 20, 2014 at 2:43 PM, Oliver Egginger\n>> ><bitcoin at olivere.de>\n>> >> >> wrote:\n>> >> >>>> Hello,\n>> >> >>>>\n>> >> >>>> just my two 'cents':\n>> >> >>>>\n>> >> >>>> Terms arises by itself. Just as most people speak of coins when\n>> >they\n>> >> >>>> mean bitcoins. I do not see that bitcoin is currently in common\n>> >use\n>> >> >>>> except for speculation. Therefore no term for smaller units has\n>> >> >>>> established yet. No problem in my eyes. Time will tell.\n>> >> >>>>\n>> >> >>>> - oliver\n>> >> >>>>\n>> >> >>>>\n>> >> >>>>\n>> >> >>\n>> >>\n>>\n>> >------------------------------------------------------------------------------\n>> >> >>>> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> >>>> \"Graph Databases\" is the definitive new guide to graph databases\n>> >and\n>> >> >> their\n>> >> >>>> applications. Written by three acclaimed leaders in the field,\n>> >> >>>> this first edition is now available. Download your free book\n>> >today!\n>> >> >>>> http://p.sf.net/sfu/NeoTech\n>> >> >>>> _______________________________________________\n>> >> >>>> Bitcoin-development mailing list\n>> >> >>>> Bitcoin-development at lists.sourceforge.net\n>> >> >>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >> >>>\n>> >> >>>\n>> >> >>\n>> >>\n>>\n>> >------------------------------------------------------------------------------\n>> >> >>> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> >>> \"Graph Databases\" is the definitive new guide to graph databases\n>> >and\n>> >> >> their\n>> >> >>> applications. Written by three acclaimed leaders in the field,\n>> >> >>> this first edition is now available. Download your free book\n>> >today!\n>> >> >>> http://p.sf.net/sfu/NeoTech\n>> >> >>> _______________________________________________\n>> >> >>> Bitcoin-development mailing list\n>> >> >>> Bitcoin-development at lists.sourceforge.net\n>> >> >>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >> >>\n>> >> >>\n>> >> >>\n>> >>\n>>\n>> >------------------------------------------------------------------------------\n>> >> >> Learn Graph Databases - Download FREE O'Reilly Book\n>> >> >> \"Graph Databases\" is the definitive new guide to graph databases\n>> >and\n>> >> their\n>> >> >> applications. Written by three acclaimed leaders in the field,\n>> >> >> this first edition is now available. Download your free book\n>> >today!\n>> >> >> http://p.sf.net/sfu/NeoTech\n>> >> >> _______________________________________________\n>> >> >> Bitcoin-development mailing list\n>> >> >> Bitcoin-development at lists.sourceforge.net\n>> >> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >> >>\n>> >> > -------------- next part --------------\n>> >> > An HTML attachment was scrubbed...\n>> >> >\n>> >> > ------------------------------\n>> >> >\n>> >> >\n>> >>\n>>\n>> >------------------------------------------------------------------------------\n>> >> > Start Your Social Network Today - Download eXo Platform\n>> >> > Build your Enterprise Intranet with eXo Platform Software\n>> >> > Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> >> > Get Started Now And Turn Your Intranet Into A Collaboration\n>> >Platform\n>> >> > http://p.sf.net/sfu/ExoPlatform\n>> >> >\n>> >> > ------------------------------\n>> >> >\n>> >> > _______________________________________________\n>> >> > Bitcoin-development mailing list\n>> >> > Bitcoin-development at lists.sourceforge.net\n>> >> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >> >\n>> >> >\n>> >> > End of Bitcoin-development Digest, Vol 35, Issue 72\n>> >> > ***************************************************\n>> >>\n>> >>\n>> >>\n>> >>\n>>\n>> >------------------------------------------------------------------------------\n>> >> Start Your Social Network Today - Download eXo Platform\n>> >> Build your Enterprise Intranet with eXo Platform Software\n>> >> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> >> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>> >> http://p.sf.net/sfu/ExoPlatform\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >>\n>> >\n>> >\n>> >------------------------------------------------------------------------\n>> >\n>>\n>> >------------------------------------------------------------------------------\n>> >Start Your Social Network Today - Download eXo Platform\n>> >Build your Enterprise Intranet with eXo Platform Software\n>> >Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> >Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>> >http://p.sf.net/sfu/ExoPlatform\n>> >\n>> >------------------------------------------------------------------------\n>> >\n>> >_______________________________________________\n>> >Bitcoin-development mailing list\n>> >Bitcoin-development at lists.sourceforge.net\n>> >https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> -----BEGIN PGP SIGNATURE-----\n>> Version: APG v1.1.1\n>>\n>> iQFQBAEBCAA6BQJTVJlDMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\n>> cGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhTbNB/4lHTsUN/iee7H0UyBn\n>> +TDRgf1BSoUx9HP+vtwXzS0JkVQoxoB5x4Pls+ex7qIXGNxdG9EPYi1RqQ5A8RUo\n>> X2ntOL2pj6qTmW4aYxqqyihiQayLs5ixHPmJxqHv343g5ekqsKmBeDuWR4hXjUyZ\n>> 0Pfcp40Xd3eJ38dSbq98letl5eD+ryBPKYtb91Trumqa9S0WB8kw9IqNaXjlpfG1\n>> lYuaVEllpaLpZW+4cx1mlPneS1GmLvloWhXf4Qh4X39VXECAjOAmNKh1atJCyT7H\n>> ugkOcx1F2Rxo5P3jNzBRJKyAD96sbOhKm4sX7rzSjhT3WJgyHtJm3wkeluDCOVbR\n>> QZqK\n>> =R7Tv\n>> -----END PGP SIGNATURE-----\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Start Your Social Network Today - Download eXo Platform\n>> Build your Enterprise Intranet with eXo Platform Software\n>> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>> http://p.sf.net/sfu/ExoPlatform\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140420/731cb618/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-21T11:34:49",
                "message_text_only": "On Mon, Apr 21, 2014 at 5:06 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> Of course, in reality smaller miners can just mine on top of block headers\n> and include no transactions and do no validation, but that is extremely\n> harmful to the security of Bitcoin.\n>\n\nI don't think it reduces security much.  It is extremely unlikely that\nsomeone would publish an invalid block, since they would waste their POW.\n\nPresuming that new headers are correct is reasonable, as long as you check\nthe full block within a few minutes of receiving the header.\n\nIf anything, it increases security, since less hashing power is wasted\nwhile the full block is broadcast.\n\nBlock propagation could take the form\n\n- broadcast new header\n- all miners switch to mining empty blocks\n- broadcast new block\n- miners update to a block with transactions\n\nIf the block doesn't arrive within a timeout, then the miner could switch\nback to the old block.\n\nThis would mean that a few percent of empty blocks end up in the\nblockchain, but that doesn't do any harm.\n\nIt is only harmful, if it is used as a DOS attack on the network.\n\nThe empty blocks will only occur when 2 blocks are found in quick\nsuccession, so it doesn't have much affect on average time until 1\nconfirm.  Empty blocks are just as good for providing 1 of the 6 confirms\nneeded too.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/b5fe8aad/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-21T13:04:35",
                "message_text_only": "I'm not convinced that headers first will result in miners hashing on\ntop of the block with more work without knowing if it's valid yet\ninstead of just keep hashing on top of the longest known-to-be-valid\nchain.\nBoth options are risky for the miner in some way, and I guess the\nprobability of someone hashing an invalid block above difficulty is\ntoo low to be the main concern, but there's intermediate solutions,\nlike say, waiting to validate at least 5% of the block.\n\nBut I don't see how miners mining headers first would result in empty\nblocks either.\nWhy wouldn't them validate and include transactions after they have\nreceived the full block?\nThey will likely know most of the transaction before receiving the block anyway.\nIn a future where they ONLY live on transaction fees, why would they\nrefuse to validate and include transactions? What are they hashing for\nthen?\nIf anything, looks like a threat to the current situation with huge\nmining subsidies coming from the seigniorage, not a problem that you\nwould have when the the seigniorage is gone.\n\nIn any case, it is true that this is mining policy and therefore out\nof the realm of what the protocol can regulate, so we should assume\nminers will do whatever it's best for them.\n\nThe trade-off between tps and centralization remains: if you want\nhigher tx volume, less full nodes will be able to process it.\n\nOn 4/21/14, Tier Nolan <tier.nolan at gmail.com> wrote:\n> On Mon, Apr 21, 2014 at 5:06 AM, Peter Todd <pete at petertodd.org> wrote:\n>\n>> Of course, in reality smaller miners can just mine on top of block\n>> headers\n>> and include no transactions and do no validation, but that is extremely\n>> harmful to the security of Bitcoin.\n>>\n>\n> I don't think it reduces security much.  It is extremely unlikely that\n> someone would publish an invalid block, since they would waste their POW.\n>\n> Presuming that new headers are correct is reasonable, as long as you check\n> the full block within a few minutes of receiving the header.\n>\n> If anything, it increases security, since less hashing power is wasted\n> while the full block is broadcast.\n>\n> Block propagation could take the form\n>\n> - broadcast new header\n> - all miners switch to mining empty blocks\n> - broadcast new block\n> - miners update to a block with transactions\n>\n> If the block doesn't arrive within a timeout, then the miner could switch\n> back to the old block.\n>\n> This would mean that a few percent of empty blocks end up in the\n> blockchain, but that doesn't do any harm.\n>\n> It is only harmful, if it is used as a DOS attack on the network.\n>\n> The empty blocks will only occur when 2 blocks are found in quick\n> succession, so it doesn't have much affect on average time until 1\n> confirm.  Empty blocks are just as good for providing 1 of the 6 confirms\n> needed too.\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Ashley Holman",
                "date": "2014-04-21T15:40:48",
                "message_text_only": "On Mon, Apr 21, 2014 at 1:36 PM, Peter Todd <pete at petertodd.org> wrote:\n>\n> That is mistaken: you can't mine on top of just a block header, leaving\n> small miners disadvantaged as they are earning no profit while they wait\n> for the information to validate the block and update their UTXO sets. This\n> results in the same problem as before, as the large pools who mine most\n> blocks can validate either instantly - the self-mine case - or more quickly\n> than the smaller miners.\n>\n>\nUnder the headers first scenario, wouldn't the full block still reach\neveryone in the same time as it would under the current rules?  So the\nsmall miner loses nothing in terms of updating their UTXO set, but gains an\nearly \"heads up\" alert that a new block is coming.  This allows them spend\nthe propagation time working more productively on an empty block in the new\nchain rather than wasting time on an orphan.  It's true that it doesn't\nsolve the problem of larger pools vs smaller pools, but if it doesn't make\nit any worse then headers-first propagation would be a net benefit to the\nnetwork since it removes the incentive to make small blocks.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/55badfcc/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-04-21T15:58:06",
                "message_text_only": "On 04/21/2014 11:40 AM, Ashley Holman wrote:\n> On Mon, Apr 21, 2014 at 1:36 PM, Peter Todd <pete at petertodd.org\n> <mailto:pete at petertodd.org>> wrote:\n>\n>     That is mistaken: you can't mine on top of just a block header,\n>     leaving small miners disadvantaged as they are earning no profit\n>     while they wait for the information to validate the block and\n>     update their UTXO sets. This results in the same problem as\n>     before, as the large pools who mine most blocks can validate\n>     either instantly - the self-mine case - or more quickly than the\n>     smaller miners.\n>\n>  \n> Under the headers first scenario, wouldn't the full block still reach\n> everyone in the same time as it would under the current rules?  So the\n> small miner loses nothing in terms of updating their UTXO set, but\n> gains an early \"heads up\" alert that a new block is coming.  This\n> allows them spend the propagation time working more productively on an\n> empty block in the new chain rather than wasting time on an orphan.\n>  It's true that it doesn't solve the problem of larger pools vs\n> smaller pools, but if it doesn't make it any worse then headers-first\n> propagation would be a net benefit to the network since it removes the\n> incentive to make small blocks.\n>\n\nI think the most important part is that nodes can reliably decide on\n\"first received\", regardless of how they subsequently act on it.  I\nbelieve it would be fine for a node to receive a header and continue\nmining the old block, or a subsequently-verified competing block, until\nit has the necessary pieces to fully verify the first header received. \nIf that block data doesn't come, then it will be naturally ignored.  But\nif multiple blocks come at once, even if a competing block \"verifies\"\nfirst, the node would still switch to considering the first header\nreceived as the best block when it later receives proof it is valid\n(which may only be a couple seconds).\n\nIn other words, the node will always consider the header-received time\nas the primary ordering criteria, but will not mine on anything until it\nhas full proof of validity, even if /that/ is out of order.  This means\nthat new blocks \"effectively\" propagate at the speed of 80 bytes, which\nlimits certain kinds of block-injection/racing attacks. \n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/b0ca4320/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-21T16:00:09",
                "message_text_only": "That wasn't what I was saying. Right now the primacy of a block is\ndetermined by the time at which the `block` message is received, which\nis delays due to both the time it takes to transmit the block data and\nthe time it takes to validate. Headers-first, on the other hand, has the\noption of basing primacy on the time the block header is received, which\nis O(1) time to transmit and to SPV-validate. Mining on that block\ndoesn't actually commence until the full block is received and validated.\n\nTo see how this works, take an example: two blocks with a common parent\nare found relatively close to each other, block A and block B. A is\nfound first but is a large block with the maximum block size and many\nslow scripts. B is found a few seconds later and is an empty block. In\nthe current regime it is entirely possible that block B, the later but\nsmaller block, would get received and processed first by more mining\npeers than the larger block A, exactly as described in Jonathan Levin's\nemail.\n\nWith headers-first, however, the cost of propagation of the block header\nis the same and we should expect block A to win out over block B nearly\nevery time. Miners will continue working on the old, known valid parent\nblock until the contents of block A are received and processed. So the\nsmaller block B is still found, and since it's data moves across the\nnetwork faster, miners even briefly mine on block B. But as soon as they\nreceive and process the contents of block A, they switch to that.\n\nThe earlier, larger block A will only become stale if *two* blocks are\nfound in the extra time it takes for block A to propagate the network.\nThat is a substantially different risk, and probably a negligible\nconcern to most miners.\n\nOn 04/20/2014 09:06 PM, Peter Todd wrote:\n> That is mistaken: you can't mine on top of just a block header,\n> leaving small miners disadvantaged as they are earning no profit\n> while they wait for the information to validate the block and update\n> their UTXO sets. This results in the same problem as before, as the\n> large pools who mine most blocks can validate either instantly - the\n> self-mine case - or more quickly than the smaller miners.\n> \n> Of course, in reality smaller miners can just mine on top of block\n> headers and include no transactions and do no validation, but that is\n> extremely harmful to the security of Bitcoin."
            },
            {
                "author": "Paul Lyon",
                "date": "2014-04-21T16:22:48",
                "message_text_only": "I haven't done the math on this, so it may be a terrible idea. :)\nI've been wondering if block propagation times could also be improved by allowing peers to request the list of transaction hashes that make up a block, and then making a follow-up request to only download any transactions not currently known. I'm not sure what percentage of transactions a node will usually already have when it receives a new block, but if it's high I figure this could be beneficial.\n\n> Date: Mon, 21 Apr 2014 09:00:09 -0700\n> From: mark at monetize.io\n> To: pete at petertodd.org; jonathan.levin at sant.ox.ac.uk\n> CC: bitcoin-development at lists.sourceforge.net\n> Subject: Re: [Bitcoin-development] Economics of information propagation\n> \n> That wasn't what I was saying. Right now the primacy of a block is\n> determined by the time at which the `block` message is received, which\n> is delays due to both the time it takes to transmit the block data and\n> the time it takes to validate. Headers-first, on the other hand, has the\n> option of basing primacy on the time the block header is received, which\n> is O(1) time to transmit and to SPV-validate. Mining on that block\n> doesn't actually commence until the full block is received and validated.\n> \n> To see how this works, take an example: two blocks with a common parent\n> are found relatively close to each other, block A and block B. A is\n> found first but is a large block with the maximum block size and many\n> slow scripts. B is found a few seconds later and is an empty block. In\n> the current regime it is entirely possible that block B, the later but\n> smaller block, would get received and processed first by more mining\n> peers than the larger block A, exactly as described in Jonathan Levin's\n> email.\n> \n> With headers-first, however, the cost of propagation of the block header\n> is the same and we should expect block A to win out over block B nearly\n> every time. Miners will continue working on the old, known valid parent\n> block until the contents of block A are received and processed. So the\n> smaller block B is still found, and since it's data moves across the\n> network faster, miners even briefly mine on block B. But as soon as they\n> receive and process the contents of block A, they switch to that.\n> \n> The earlier, larger block A will only become stale if *two* blocks are\n> found in the extra time it takes for block A to propagate the network.\n> That is a substantially different risk, and probably a negligible\n> concern to most miners.\n> \n> On 04/20/2014 09:06 PM, Peter Todd wrote:\n> > That is mistaken: you can't mine on top of just a block header,\n> > leaving small miners disadvantaged as they are earning no profit\n> > while they wait for the information to validate the block and update\n> > their UTXO sets. This results in the same problem as before, as the\n> > large pools who mine most blocks can validate either instantly - the\n> > self-mine case - or more quickly than the smaller miners.\n> > \n> > Of course, in reality smaller miners can just mine on top of block\n> > headers and include no transactions and do no validation, but that is\n> > extremely harmful to the security of Bitcoin.\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n \t\t \t   \t\t  \n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/d01531da/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-21T16:38:17",
                "message_text_only": "Yes, it certainly can be improved in this way. You can even extend the\nidea to distribute partial proofs of work (block headers + Merkle lists\nwhich represent significant but not sufficient work), and 'prime' your\nmemory pools with the transactions contained within.\n\nThis is, btw, basically what p2pool does, which is why last time I\ncalculated you get roughly 1% better return from p2pool than a zero-fee\nmining pool would get you, specifically because of the lower stale rate.\n\nOn 04/21/2014 09:22 AM, Paul Lyon wrote:\n> I haven't done the math on this, so it may be a terrible idea. :)\n> \n> I've been wondering if block propagation times could also be improved by\n> allowing peers to request the list of transaction hashes that make up a\n> block, and then making a follow-up request to only download any\n> transactions not currently known. I'm not sure what percentage of\n> transactions a node will usually already have when it receives a new\n> block, but if it's high I figure this could be beneficial.\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-21T16:39:31",
                "message_text_only": "Pieter tried it already. If the two nodes views of each others mempools are\nnot exactly in alignment it ends up being slower than just sending the data\nimmediately and redundantly.\n\n\nOn Mon, Apr 21, 2014 at 6:38 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> Yes, it certainly can be improved in this way. You can even extend the\n> idea to distribute partial proofs of work (block headers + Merkle lists\n> which represent significant but not sufficient work), and 'prime' your\n> memory pools with the transactions contained within.\n>\n> This is, btw, basically what p2pool does, which is why last time I\n> calculated you get roughly 1% better return from p2pool than a zero-fee\n> mining pool would get you, specifically because of the lower stale rate.\n>\n> On 04/21/2014 09:22 AM, Paul Lyon wrote:\n> > I haven't done the math on this, so it may be a terrible idea. :)\n> >\n> > I've been wondering if block propagation times could also be improved by\n> > allowing peers to request the list of transaction hashes that make up a\n> > block, and then making a follow-up request to only download any\n> > transactions not currently known. I'm not sure what percentage of\n> > transactions a node will usually already have when it receives a new\n> > block, but if it's high I figure this could be beneficial.\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/f3aba223/attachment.html>"
            },
            {
                "author": "Jonathan Levin",
                "date": "2014-04-21T16:45:22",
                "message_text_only": "Thank you for your thoughts. \n\n> The earlier, larger block A will only become stale if *two* blocks are\n> found in the extra time it takes for block A to propagate the network.\n> That is a substantially different risk, and probably a negligible\n> concern to most miners.\n\nI really like Mark\u2019s suggestion but one concern is that it might tip the needle too far. Currently, there is a private cost to include more transactions, which might be too high, but limit the amount of negative externalities that this creates on other miners. If I am able to create blocks that are very likely to be on the main chain with the maximum number of transactions then this makes imposing negative externalities on other miners less costly. Other nodes that are closely connected to me would experience a positive externality through this as well. Would have do some more thinking here but it seems that there is a balance to strike.\n\n> If anything, looks like a threat to the current situation with huge\n> mining subsidies coming from the seigniorage, not a problem that you\n> would have when the the seigniorage is gone.\n\nThe incentives remain so long as the ratio of the seignorage revenues to transaction fees remain very high. Even though the dollar price does not change that relationship it does mean that Bitcoin becomes more expensive in USD terms as the USD price of Bitcoin rises.\n\n> I think the most important part is that nodes can reliably decide on\n> \"first received\", regardless of how they subsequently act on it. \n\nIf we want to limit the amount of network time spent on redundant problems it would be best for miners to act on this information? What is the benefit of serialisation? Is it that the miner would consider it more likely to make it into the main chain rather than the block that came second?\n\n> But I don't see how miners mining headers first would result in empty\n> blocks either.\n\nI guess it is due to the fact that this is the only way a miner can be certain that none of the transactions have been spent already resulting in an orphan block.\n\nOn 21 Apr 2014, at 17:00, Mark Friedenbach <mark at monetize.io> wrote:\n\n> That wasn't what I was saying. Right now the primacy of a block is\n> determined by the time at which the `block` message is received, which\n> is delays due to both the time it takes to transmit the block data and\n> the time it takes to validate. Headers-first, on the other hand, has the\n> option of basing primacy on the time the block header is received, which\n> is O(1) time to transmit and to SPV-validate. Mining on that block\n> doesn't actually commence until the full block is received and validated.\n> \n> To see how this works, take an example: two blocks with a common parent\n> are found relatively close to each other, block A and block B. A is\n> found first but is a large block with the maximum block size and many\n> slow scripts. B is found a few seconds later and is an empty block. In\n> the current regime it is entirely possible that block B, the later but\n> smaller block, would get received and processed first by more mining\n> peers than the larger block A, exactly as described in Jonathan Levin's\n> email.\n> \n> With headers-first, however, the cost of propagation of the block header\n> is the same and we should expect block A to win out over block B nearly\n> every time. Miners will continue working on the old, known valid parent\n> block until the contents of block A are received and processed. So the\n> smaller block B is still found, and since it's data moves across the\n> network faster, miners even briefly mine on block B. But as soon as they\n> receive and process the contents of block A, they switch to that.\n> \n> The earlier, larger block A will only become stale if *two* blocks are\n> found in the extra time it takes for block A to propagate the network.\n> That is a substantially different risk, and probably a negligible\n> concern to most miners.\n> \n> On 04/20/2014 09:06 PM, Peter Todd wrote:\n>> That is mistaken: you can't mine on top of just a block header,\n>> leaving small miners disadvantaged as they are earning no profit\n>> while they wait for the information to validate the block and update\n>> their UTXO sets. This results in the same problem as before, as the\n>> large pools who mine most blocks can validate either instantly - the\n>> self-mine case - or more quickly than the smaller miners.\n>> \n>> Of course, in reality smaller miners can just mine on top of block\n>> headers and include no transactions and do no validation, but that is\n>> extremely harmful to the security of Bitcoin.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 496 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/6994ddfc/attachment.sig>"
            },
            {
                "author": "Tom Harding",
                "date": "2014-04-23T02:54:24",
                "message_text_only": "Jonathan -\n\nThese are a few things I've been wishing for recent data on:\n\n  - 95th percentile transaction propagation time vs. fees/kb, vs. total fees\n  - Count of blocks bypassing well-propagated transactions vs. fees/kb, \nvs. total fees\n  - Signed-double-spend confirmation probability vs. broadcast time \noffset from first spend\n\nOn 4/20/2014 5:30 PM, Jonathan Levin wrote:\n> at coinometrics we are working on a modified client to capture information on network propagation and would invite any suggestions of any other useful statistics that would be useful in the development of software."
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-23T15:05:55",
                "message_text_only": "On Mon, Apr 21, 2014 at 01:30:28AM +0000, Jonathan Levin wrote:\n\nCC'ing bitcoin-research - may be more appropriate to move the discussion\nthere as this discussion is delving into future scenarios.\n\n> Hi all,\n> \n> I am a post-graduate economist writing a paper on the incentives of mining. Even though this issue has been debated in the forums, I think it is important to get a sense of the magnitude of the incentives at play and determine what implications this has for the transaction fee market.\n> \n> As it has been pointed out before the marginal cost for miners does not stem from the private cost of the miner validating the signature and including it in the list of transactions in the block but rather the increased probability that the block will be orphaned as a result of slower propagation. Gavin did some back of the envelope worst case calculations but these overstated the effect of propagation delay. The reason being the 80ms additional time to reach 50% of the network is spread throughout the time that it takes to reach 50% of the network. During this time miners are notified about the block and treat it as the longest chain and hence are no longer mining with the aim to produce a competing block. \n> \n> I am looking to calculate the change in the curvature of the probability mass function that a block hears about my block in any given second as a function of the block size. Although there is likely to be significant noise here, there seems to be some stable linear relationships with the time that it takes to reach different quartiles. Has anyone done this? I have used some empirical data that I am happy to share but ideally I would like analytical solutions.\n> \n> Following Peter Todd, I also find the concerning result that propagation delays results in increasing returns to higher shares of the hashing power. Indeed it may well be in the interest of large pools to publish large blocks to increase propagation delays on the network which would increase orphan rates particularly for small miners and miners that have not invested in sufficient bandwidth / connectivity. If a small miner hears about a block after 4.5 seconds on average there is a 0.7% chance that there is already a block in circulation.  Large miners can increase the time that it takes for small miners to hear about blocks by increasing the size of their blocks. For example if the time that it takes for a small miner to hear about the block goes to 12 seconds there is a 2 percent chance there is already a block in circulation for the small miner. There is also a 1.2% chance that there will be a competing block published after a small miner propagates in the time that it gets to full propagation. Am I getting this right that the probability of a miner\u2019s block being orphaned is comprised of the probability that the miner was not the first to find a valid block and the probability that given they are first, someone else in the absence of hearing about it finds a competing valid block. \n> \n> One question is: Are orphans probabilistic and only resolved after hearing about a new block that lengthens the chain or is there a way to know in advance?\n\nThey're probabilistic; mining is progress free so per unit hashing power\nevery miner has an equal chance of finding a block. As for resolution,\nwell, currently nodes (and miners) mine on the block they saw first; if\nthey learn about another block at the same height they stick to the\nblock they are already mining on. First seen at same height is probably\ngenerally economically rational as the first block you see probably\npropagated to the most nodes, although tweaks to that are probably\npossible.\n\n> Is it frowned upon to mine on top of a block that you have just found even though it is very likely going to end up an orphan?\n\nNot at all, in fact mining on top of the block is the best thing to do\nbecause it *prevents* your block from ending up as an orphan. Basically\nimagine I find block b1a, and you find conflicting block b1b. What I\nneed to do is find block b2a, which is on top of b1a, before you find\nblock b1b to avoid my block being orphaned. The best way to do that is\nmining on top of my block - that's what's most rational for me.\n\n> Would be happy to share the draft form of the paper and receive any feedback.\n\nSure thing.\n\n> Finally, at coinometrics we are working on a modified client to capture information on network propagation and would invite any suggestions of any other useful statistics that would be useful in the development of software. \n\n\nSo looking at the replies your post got in the past few days it looks\nlike there's some misinformation going around. First of all is the\nquestion of how harmful it is if miners mine on top of blocks that they\nhaven't actually validated, and yes, that's extremely harmful. For\ninstance if I were an attacker I could mine an invalid block that makes\ncoins out of thin air and use it to defraud SPV-wallet-using clients;\neveryone who is mining without validating is helping me succesfully pull\noff that attack by increasing the chance I'll get enough confirms to\ntrick my target into thinking the coins are real. (remember I could have\nstolen the hashing power by hacking into a pool)\n\nMark Friedenbach suggested headers first where the block header and\nblock contents are propagated around the network separately. What that\nresults in has a few different scenarios:\n\n1) Fee's don't matter and miners aren't forced to validate\n\nThis is the scenario we're in right now. The block reward comprises the\nsupermajority of mining income, and it is possible to mine a block\nwithout first validating the contents of the previous block. When a\nminer receives a block header that extends the longest known blockchain\nthey can immediately switch to it and start mining.\n\nWhether or not doing so is rational is just a matter of what's the\nprobability that the previous block was invalid? If it was, the miner\nmining it just wasted 25BTC, $12.5k, so you can be almost sure it is\nvalid and you don't need to wait. Of course, if you then find a block,\nyou can pull the same trick all over again and the next guy might be\nmining on top of two blocks they haven't validated, and so on.\n\nObviously this presents a very nasty failure mode if the majority of\nminers follow this behavior and a block is invalid, or even just gets\nlost. Similarly in the majority scenario there's no direct incentive to\nactually propagate your blocks - they'll still get accepted to the main\nchain anyway.\n\nThat said, small and large miners make roughly the same amount as the\nblock reward dominates and blocks of any size will get confirmations\nfairly quickly.\n\n\n2) Fee's do matter and miners aren't forced to validate\n\nNow transaction fees represent a non-trivial portion of a miner's\nincome. Centralization incentives would depend on to what extent fees do\nmatter. Again, there's some nasty failure modes possible. That large,\nslow-to-propagate blocks still get confirmed, yet small miners can't\nmine transaction fees is likely a major centralization incentive.\n\n3) Miners are forced to validate\n\nOr at least, we can force miners to actually have the previous block.\nAndrew Miller's Permacoin is one approach; some varients of UTXO\ncommitments have this as a side-effect too. On the one hand this solves\nthe really nasty failure modes that headers-first has; on the other hand\nyou're back to the centralization incentives we have right now.\n\n\nWhat's important however to remember is that any attempt at saying\nthings like \"[A]s soon as [Miners] receive and process the contents of\nblock A, they switch to that.\" - as Mark suggested(2) - doesn't belong\nin an economic analysis as such rules are unenforcable. For instance\nthat'd suggest that in the forced-validation headers-first scenario a\nlarge miner who received a block header, then found block themselves,\nwould switch to mining the block they *didn't* find simply because they\n\"got the header first\". Obviously this is not economically rational for\nthem to do so they won't, leading to the same centralization incentives\nas always.\n\nAs for why that's economically irrational: so the large miner finds that\nsecond block and broadcasts it around the network. Do you the small\nminer keep mining on the shorter chain just because the large miner\nbroke the gentlemans agreement to respect header times? Of course not,\ntime is relative and you have no idea whether or not anyone else is\ndoing so. If you mine on the shorter chain you're side is going to need\nto find two blocks to catch up - not likely. Secondly you risk forking\nthe network due to a consensus failure, say by a divergent times the\nheaders were received.\n\n1) http://cs.umd.edu/%7Eamiller/permacoin.pdf\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000278031f86c71265f6eaf1fe9ce6cc831dc4f956676a7a7f7\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/084a5c8d/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Economics of information propagation",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jonathan Levin",
                "Daniel Lidstrom",
                "Ashley Holman",
                "Mike Hearn",
                "Paul Lyon",
                "Peter Todd",
                "Tier Nolan",
                "Jorge Tim\u00f3n",
                "Alan Reiner",
                "Mark Friedenbach",
                "Tom Harding"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 129798
        }
    },
    {
        "title": "[Bitcoin-development] Mailing list abuse",
        "thread_messages": [
            {
                "author": "Rodney Morris",
                "date": "2014-04-21T04:58:45",
                "message_text_only": "What is the procedure for dealing with it? Is it considered abuse to reply\nto and quote the entire digest for the sake of a few lines of content? Am I\nthe only one annoyed by this (if so I'll just shut right up).\n\nRodney\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/df8dfb85/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-21T05:47:28",
                "message_text_only": "On Mon, Apr 21, 2014 at 6:58 AM, Rodney Morris <rodney.morris at gmail.com> wrote:\n> What is the procedure for dealing with it? Is it considered abuse to reply\n> to and quote the entire digest for the sake of a few lines of content? Am I\n> the only one annoyed by this (if so I'll just shut right up).\n\nI would not go as far as calling it 'abuse' if it is not done on\npurpose. Probably the person doesn't even know he/she is doing this.\nBest to mail the person and ask (nicely) instead of complaining to the\nlist.\n\nWladimir"
            },
            {
                "author": "Rodney Morris",
                "date": "2014-04-21T06:02:21",
                "message_text_only": "Not a bad idea. Semantics of the word abuse not withstanding.\n\nI don't want to become the self appointed mailing list cop, but I notice it\nmaybe more than others because I almost exclusively read this mailing list\non a mobile device. Hence my asking for feedback without publicly calling\nanyone out.\n\nThanks for taking the time to reply.\n\nRodney\n On 21/04/2014 3:47 pm, \"Wladimir\" <laanwj at gmail.com> wrote:\n\n> On Mon, Apr 21, 2014 at 6:58 AM, Rodney Morris <rodney.morris at gmail.com>\n> wrote:\n> > What is the procedure for dealing with it? Is it considered abuse to\n> reply\n> > to and quote the entire digest for the sake of a few lines of content?\n> Am I\n> > the only one annoyed by this (if so I'll just shut right up).\n>\n> I would not go as far as calling it 'abuse' if it is not done on\n> purpose. Probably the person doesn't even know he/she is doing this.\n> Best to mail the person and ask (nicely) instead of complaining to the\n> list.\n>\n> Wladimir\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/9cd49c00/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Mailing list abuse",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Rodney Morris",
                "Wladimir"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2071
        }
    },
    {
        "title": "[Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet root key with optional encryption",
        "thread_messages": [
            {
                "author": "William Yager",
                "date": "2014-04-22T00:05:04",
                "message_text_only": "The spec has been updated a bit.\n\nEven if the bulk of the key-stretching work has been outsourced to another\ndevice, and that device is compromised, the passphrase is now protected by\nminimum 8192 rounds of salted PBKDF2-HMAC-SHA512.\n\nThe idea is that more powerful devices (mobile phones, laptops, etc.) can\ndo all the key-stretching on their own, whereas weaker devices with access\nto another device with more computing power (like Trezors) do a fair amount\nof key-stretching on their own, but can safely export the rest of the\nkey-stretching to the other device.\n\nWill\n\nOn Tue, Mar 11, 2014 at 10:17 PM, Jean-Paul Kogelman <\njeanpaulkogelman at me.com> wrote:\n\n> Hi everyone,\n>\n> We've been hard at work updating the spec to include features that were\n> requested. We've removed the Scrypt dependency that was present in the\n> initial drafts, added new KDFs, added plausible deniability and have a\n> reference implementation.\n>\n>\n> Kind regards,\n>\n>\n> Jean-Paul Kogelman\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140421/2c96e31b/attachment.html>"
            },
            {
                "author": "William Yager",
                "date": "2014-04-24T19:39:52",
                "message_text_only": "Gmaxwell pointed out that we could safely front-load all the key\npre-stretching. The spec has been updated to take advantage of this.\n\nThe user's password is now protected by 10,000 rounds of salted\nPBKDF2-HMAC-SHA512, as well as the main KDF (which ranges from scrypt\n2^14/8/8 to scrypt 2^18/16/16 and PBKDF2-HMAC-SHA512 2^16 to 2^21).\n\nWill\n\nOn Mon, Apr 21, 2014 at 7:05 PM, William Yager <will.yager at gmail.com> wrote:\n\n>\n> The idea is that more powerful devices (mobile phones, laptops, etc.) can\n> do all the key-stretching on their own, whereas weaker devices with access\n> to another device with more computing power (like Trezors) do a fair amount\n> of key-stretching on their own, but can safely export the rest of the\n> key-stretching to the other device.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/22603d98/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Base58 encoded HD Wallet root key with optional encryption",
            "categories": [
                "Bitcoin-development",
                "RFC"
            ],
            "authors": [
                "William Yager"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2110
        }
    },
    {
        "title": "[Bitcoin-development] Development Roadmap of Bitcoin Core 0.9.2",
        "thread_messages": [
            {
                "author": "Warren Togami Jr.",
                "date": "2014-04-22T13:30:04",
                "message_text_only": "Development Roadmap of Bitcoin Core 0.9.2\n\nThe Bitcoin Core developers have a desire to do a mostly bug-fix and\ntranslation update release in v0.9.2. A feature and string freeze will\nstart about 3 weeks from now.\n\nThe purpose of this development roadmap is to communicate the project\nintent and to better organize volunteers. Hopefully doing so will make\nclear when particular types of contributions are most welcome and help to\npush the release process forward in a more timely manner while also\nimproving the quality of the release.  Missing a target goal is OK. The\ndevelopers may decide to delay particular goals if there are good reasons\non a case-by-case basis. While schedules may slip, it is generally a good\nthing for a goal to have existed.\n\nSchedule (subject to change)\n\n13 May 2014: Feature freeze.  Source string freeze.  Release candidate.\n\n20 May 2014: Testing of a release candidate is roughly a week. More time\ncan be added at the discretion of the developers to allow for testing if\nfurther release candidates are deemed necessary due to subsequent changes.\n\nNightly Gitian Builds\n\nhttps://bitcointalk.org/index.php?topic=571414.0\n\nTo make it easier for non-developers and translators to get involved in\ntesting unofficial deterministic nightly builds are now available.\n\nTranslation of Bitcoin Core\n\nhttps://www.transifex.com/projects/p/bitcoin/\n\nTransifex allows open source projects a convenient way to coordinate the\nwork of many translators.  Periodically English language source strings\nfrom Bitcoin Core are synchronized to the Transifex project.  Those strings\nare then translated in the convenient Transifex web interface where\ncontributors are able to join by creating a free account.  Senior\ncontributors can be promoted to a Reviewer or Maintainer role for each\nlanguage.  Developers pull from Transifex to merge translated strings back\ninto Bitcoin Core. As a matter of policy translations are NOT accepted via\nGithub pull requests as those changes would be overwritten by the next\nTransifex pull and there is no clean way to keep them in sync when changes\nare made in both places.\n\nhttps://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md\n\nThe latest version of the Translation process can be found here.\n\nBitcoin-Translators Announce-only List\n\nhttps://groups.google.com/forum/#!forum/bitcoin-translators\nBitcoin-Translators mailing list is an announce-only mailing list for\ndevelopers to communicate to translators at particular times when new\ntranslations are needed.  Replies and discussion would go to the bitcoin\ndev list.  Subscriptions to this list would additionally be valuable to the\nproject as it allows for a convenient way to ask for translations of other\nrelated projects like bitcoin.org that are hosted on theTransifex platform.\n Whenever source strings of significance are changed or deadlines are\nannounced, translators will learn of work to be done in Transifex quickly\nas they will all be subscribed to this announce list.  Discussion of\ntranslation issues should be on the Bitcoin-Development list.\n\nOther Improvements to the Translation process\n\n   -\n\n   Prior to an intended release a String Freeze is declared on a particular\n   date.  The string freeze exists to ensure that translators have a\n   reasonable amount of time to translate new or modified source strings so\n   their work can be included in a release.\n   -\n\n   A significant issue with our past translation process was the lack of\n   branch support in Transifex.  This meant that since master and v0.8.2\n   diverged in May 2013, translation updates made in Transifex were not\n   included in the v0.8.x stable releases until the release of v0.9.0 in early\n   2014.  v0.9.1 similarly was released from a branch outside from master.\n    v0.9.2 is planned to be released directly from the master branch so\n   translations for this upcoming release can be developed directly.  laanwj\n   came up with a great idea for dealing with future releases where we will be\n   able to keep translations for both diverged stable and master branch\n   simultaneously in Transifex, with scripts automating the process of merging\n   strings and separating them back to the diverged branches.\n\n\nPlease post questions or comments about the release or translation process\nhere on Bitcoin-Development list. Bug reports should be posted a Github\nIssues<https://github.com/bitcoin/bitcoin/issues?direction=desc&sort=updated&state=open>tickets.\n\nWarren Togami\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/2fec3522/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-22T14:05:04",
                "message_text_only": "On Tue, Apr 22, 2014 at 3:30 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n> Development Roadmap of Bitcoin Core 0.9.2\n>\n> The Bitcoin Core developers have a desire to do a mostly bug-fix and\n> translation update release in v0.9.2. A feature and string freeze will start\n> about 3 weeks from now.\n\nACK, thanks for writing the announcement.\n\nWladimir"
            },
            {
                "author": "Kristov Atlas",
                "date": "2014-04-23T20:05:49",
                "message_text_only": "On 04/22/2014 09:30 AM, Warren Togami Jr. wrote:\n> Bitcoin-Translators mailing list is an announce-only mailing list for \n> developers to communicate to translators at particular times when new \n> translations are needed.  Replies and discussion would go to the \n> bitcoin dev list.  Subscriptions to this list would additionally be \n> valuable to the project as it allows for a convenient way to ask for \n> translations of other related projects like bitcoin.org \n> <http://bitcoin.org> that are hosted on theTransifex platform. \n>  Whenever source strings of significance are changed or deadlines are \n> announced, translators will learn of work to be done in Transifex \n> quickly as they will all be subscribed to this announce list. \n>  Discussion of translation issues should be on the Bitcoin-Development \n> list.\n>\n> Development Roadmap of Bitcoin Core 0.9.2\n>\n> The Bitcoin Core developers have a desire to do a mostly bug-fix and \n> translation update release in v0.9.2. A feature and string freeze will \n> start about 3 weeks from now.\n>\n>\n> The purpose of this development roadmap is to communicate the project \n> intent and to better organize volunteers. Hopefully doing so will make \n> clear when particular types of contributions are most welcome and help \n> to push the release process forward in a more timely manner while also \n> improving the quality of the release.  Missing a target goal is OK. \n> The developers may decide to delay particular goals if there are good \n> reasons on a case-by-case basis. While schedules may slip, it is \n> generally a good thing for a goal to have existed.\n>\n>\n> Schedule (subject to change)\n>\n> 13 May 2014:Feature freeze.  Source string freeze.  Release candidate.\n>\n> 20 May 2014: Testing of a release candidate is roughly a week. More \n> time can be added at the discretion of the developers to allow for \n> testing if further release candidates are deemed necessary due to \n> subsequent changes.\n>\n>\n> Nightly Gitian Builds\n>\n> https://bitcointalk.org/index.php?topic=571414.0\n>\n> To make it easier for non-developers and translators to get involved \n> in testing unofficial deterministic nightly builds are now available.\n>\n>\n> Warren Togami\n\nI see that the latest nightly build (thanks for that, Warren) is still \nnot compatible with Tails/Debian Squeeze. Is there still an intention to \naddress this issue? Might it be fixed by 0.9.2?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/1be17057/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-23T20:28:27",
                "message_text_only": "> I see that the latest nightly build (thanks for that, Warren) is still not\n> compatible with Tails/Debian Squeeze. Is there still an intention to address\n> this issue? Might it be fixed by 0.9.2?\n\nCan you be more specific as to what problem you're having?\n\nWladimir"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2014-04-23T20:39:21",
                "message_text_only": "On Wed, Apr 23, 2014 at 10:05 AM, Kristov Atlas <kristovatlas at gmail.com>wrote:\n\n> I see that the latest nightly build (thanks for that, Warren) is still not\n> compatible with Tails/Debian Squeeze. Is there still an intention to\n> address this issue? Might it be fixed by 0.9.2?\n>\n\nIf I understand the situation, bitcoind does work but not bitcoin-qt due to\nqt-4.6?  If that is so, then the official Bitcoin 0.8.6 binaries didn't\nwork on Squeeze either this is not a regression.\n\nThe priority is for bitcoind to work on as many distributions as reasonably\npossible as older stable distributions are most often headless.  If you are\na rare user who needs Bitcoin-Qt on an incompatible system you can at least\nbuild it from source.\n\nWarren\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/b39f21e4/attachment.html>"
            },
            {
                "author": "Kristov Atlas",
                "date": "2014-04-23T20:52:31",
                "message_text_only": "On 04/23/2014 04:39 PM, Warren Togami Jr. wrote:\n> On Wed, Apr 23, 2014 at 10:05 AM, Kristov Atlas \n> <kristovatlas at gmail.com <mailto:kristovatlas at gmail.com>> wrote:\n>\n>     I see that the latest nightly build (thanks for that, Warren) is\n>     still not compatible with Tails/Debian Squeeze. Is there still an\n>     intention to address this issue? Might it be fixed by 0.9.2?\n>\n>\n> If I understand the situation, bitcoind does work but not bitcoin-qt \n> due to qt-4.6?  If that is so, then the official Bitcoin 0.8.6 \n> binaries didn't work on Squeeze either this is not a regression.\n>\n> The priority is for bitcoind to work on as many distributions as \n> reasonably possible as older stable distributions are most often \n> headless.  If you are a rare user who needs Bitcoin-Qt on an \n> incompatible system you can at least build it from source.\n>\n> Warren\n\nBitcoin-Qt 0.8.6 worked fine on Tails (and Debian Squeeze, I assume). \nSo, it is a regression.\n\nHere's output from the latest nightly build for Linux:\n\namnesia at amnesia:~/bitcoin-0.9.99.0-20140422-2bbecc8-linux/bin/32$ ./bitcoin-qt\n./bitcoin-qt: symbol lookup error: ./bitcoin-qt: undefined symbol: _ZN19QAbstractProxyModel11setItemDataERK11QModelIndexRK4QMapIi8QVariantE\n\nSince Tails has many simple development tools like \"make\" stripped out \nfor security reasons, one could not simply build from source in Tails. \nIt might be possible to build in Debian Squeeze and transplant that, \nhowever. I'll have to give that a shot some time. I'd argue that Tails \nis an incredibly important -- and hardly obscure -- Linux distribution \nthat Bitcoin should endeavour to support. See: \nhttps://tails.boum.org/press/index.en.html\n\n-Kristov\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/be54ba9b/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T22:28:02",
                "message_text_only": "On Wed, Apr 23, 2014 at 1:39 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n> If you are\n> a rare user who needs Bitcoin-Qt on an incompatible system you can at least\n> build it from source.\n\nTails users usually can't really build it from source\u2014 talks is a live\nboot mostly stateless linux distribution for privacy applications.\nIt's really good in general.\n\nI agree that we shouldn't be statically linking QT on linux generally\n(due to things like theming), though maybe we could just have the\nbuild process dump out a seperate extra static QT binary just for\nthese other cases? I feel like the work maintaining it would be less\nthan what we've had in answering questions/complaints about it."
            },
            {
                "author": "Kristov Atlas",
                "date": "2014-04-24T01:56:23",
                "message_text_only": "On 04/23/2014 06:28 PM, Gregory Maxwell wrote:\n> Tails users usually can't really build it from source\u2014 talks is a live\n> boot mostly stateless linux distribution for privacy applications.\n> It's really good in general.\n>\n> I agree that we shouldn't be statically linking QT on linux generally\n> (due to things like theming), though maybe we could just have the\n> build process dump out a seperate extra static QT binary just for\n> these other cases? I feel like the work maintaining it would be less\n> than what we've had in answering questions/complaints about it.\n>\n> ------------------------------------------------------------------------------\nDumping out a separate, extra static QT binary is a great idea."
            },
            {
                "author": "Wladimir",
                "date": "2014-04-24T08:02:52",
                "message_text_only": "On Thu, Apr 24, 2014 at 12:28 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Wed, Apr 23, 2014 at 1:39 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n>> If you are\n>> a rare user who needs Bitcoin-Qt on an incompatible system you can at least\n>> build it from source.\n>\n> Tails users usually can't really build it from source\u2014 talks is a live\n> boot mostly stateless linux distribution for privacy applications.\n> It's really good in general.\n\nAside: But is Bitcoin Core a well-suited application for those uses? I\ncannot imagine someone running a full node on a stateless system.\n\nAnyhow: As this is only one symbol, we can probably get rid of it (as\nwe didn't use it in 0.8.6?), or put it behind some #ifdef\nCOMPATIBILITY_BUILD...\n\nAnother option: Instead of statically building it'd be easy enough to\nbuild against the 4.6 Qt headers instead without even swapping the\nlibrary. Qt is, after all, forward-compatible - between the 4.x\nversions. This will lose some GUI features but if compatibility is\nmore important here that's a choice that can be made.\n\nWladimir"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-24T08:07:22",
                "message_text_only": "On Thu, Apr 24, 2014 at 10:02 AM, Wladimir <laanwj at gmail.com> wrote:\n> On Thu, Apr 24, 2014 at 12:28 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n>> On Wed, Apr 23, 2014 at 1:39 PM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n>>> If you are\n> > Another option: Instead of statically building it'd be easy enough to\n> build against the 4.6 Qt headers instead without even swapping the\n> library. Qt is, after all, forward-compatible - between the 4.x\n> versions. This will lose some GUI features but if compatibility is\n> more important here that's a choice that can be made.\n\nAre you sure this is Qt 4.6 at all? Not Qt 4.7?\n\nI'd expect *much* more symbols if this was a Qt 4.8 versus 4.6\nconflict. Qt 4.7 introduced a lot of new things (see all the\noccurences of  #if QT_VERSION >= 0x040700 - things like\nsetPlaceHolderText would be expected to pop up too), but 4.8 did not.\n\nCan you check?\n\nWladimir"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2014-04-24T08:15:11",
                "message_text_only": "On Wed, Apr 23, 2014 at 10:02 PM, Wladimir <laanwj at gmail.com> wrote:\n\n> On Thu, Apr 24, 2014 at 12:28 AM, Gregory Maxwell <gmaxwell at gmail.com>\n> wrote:\n> > On Wed, Apr 23, 2014 at 1:39 PM, Warren Togami Jr. <wtogami at gmail.com>\n> wrote:\n> >> If you are\n> >> a rare user who needs Bitcoin-Qt on an incompatible system you can at\n> least\n> >> build it from source.\n> >\n> > Tails users usually can't really build it from source\u2014 talks is a live\n> > boot mostly stateless linux distribution for privacy applications.\n> > It's really good in general.\n>\n> Aside: But is Bitcoin Core a well-suited application for those uses? I\n> cannot imagine someone running a full node on a stateless system.\n>\n> Anyhow: As this is only one symbol, we can probably get rid of it (as\n> we didn't use it in 0.8.6?), or put it behind some #ifdef\n> COMPATIBILITY_BUILD...\n>\n> Another option: Instead of statically building it'd be easy enough to\n> build against the 4.6 Qt headers instead without even swapping the\n> library. Qt is, after all, forward-compatible - between the 4.x\n> versions. This will lose some GUI features but if compatibility is\n> more important here that's a choice that can be made.\n>\n> Wladimir\n>\n\nI now see how it worked with Bitcoin 0.8.6.  Lucid has qt-4.6.2.\n\nIt is more than one symbol.  It does not seem to be a wise thing to replace\nfunctions beyond the trivial in glibc and libstdc++.\n\nI personally think we need to decide upon a cut-off point beyond which it\nmakes no sense to add the risk of increased complexity.  RHEL6 had qt-4.6.2\nas well and I don't think I've heard a single complaint about bitcoin-qt\nbeing broken there given almost nobody uses it as a desktop.\n\nWarren\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/feeeee08/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-24T08:25:43",
                "message_text_only": "On Thu, Apr 24, 2014 at 10:15 AM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n\n> I now see how it worked with Bitcoin 0.8.6.  Lucid has qt-4.6.2.\n>\n> It is more than one symbol.  It does not seem to be a wise thing to replace\n> functions beyond the trivial in glibc and libstdc++.\n\nQt is not part of the compiler/build environment. Thus we don't need\nto resort to those kind of tricks.\n\nAs I said: we can easily build against Qt 4.6 instead. As said, that\nwouldn't even need building Qt on linux, just unpacking and exporting\nthe headers.\n\nBut indeed we need to decide on a cut-off point. I'd have preferred\n4.7 or 4.8. Qt 4.6 is *ancient* - it was released in februari 2010.\nApart from tails it doesn't seem like anyone is using those old stable\ndistributions on the desktop.\n\nWladimir"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-24T12:18:51",
                "message_text_only": "On Thu, Apr 24, 2014 at 10:25 AM, Wladimir <laanwj at gmail.com> wrote:\n> On Thu, Apr 24, 2014 at 10:15 AM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n>\n> But indeed we need to decide on a cut-off point. I'd have preferred\n> 4.7 or 4.8. Qt 4.6 is *ancient* - it was released in februari 2010.\n> Apart from tails it doesn't seem like anyone is using those old stable\n> distributions on the desktop.\n\nDoes anyone know of the timeframe in which tails will switch to a\nnewer version of Qt?\n\nAs it's debian based: will switch to a Wheezy/7.4. Wheezy has Qt 4.8\nso is decidedly unproblematic.\n\nI see they're working on migration at least:\n\n- https://tails.boum.org/blueprint/Wheezy/\n- https://git-tails.immerda.ch/tails/log/?h=feature/wheezy\n\nWladimir"
            },
            {
                "author": "Kristov Atlas",
                "date": "2014-04-25T20:09:29",
                "message_text_only": "Yes. Tails 1.1, based on Wheezy, will be out on June 10: \nhttps://tails.boum.org/contribute/calendar/\n\n-Kristov Atlas\n\nOn 04/24/2014 08:18 AM, Wladimir wrote:\n> On Thu, Apr 24, 2014 at 10:25 AM, Wladimir <laanwj at gmail.com> wrote:\n>> On Thu, Apr 24, 2014 at 10:15 AM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n>>\n>> But indeed we need to decide on a cut-off point. I'd have preferred\n>> 4.7 or 4.8. Qt 4.6 is *ancient* - it was released in februari 2010.\n>> Apart from tails it doesn't seem like anyone is using those old stable\n>> distributions on the desktop.\n> Does anyone know of the timeframe in which tails will switch to a\n> newer version of Qt?\n>\n> As it's debian based: will switch to a Wheezy/7.4. Wheezy has Qt 4.8\n> so is decidedly unproblematic.\n>\n> I see they're working on migration at least:\n>\n> - https://tails.boum.org/blueprint/Wheezy/\n> - https://git-tails.immerda.ch/tails/log/?h=feature/wheezy\n>\n> Wladimir\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-25T20:47:31",
                "message_text_only": "On Fri, Apr 25, 2014 at 10:09 PM, Kristov Atlas\n<author at anonymousbitcoinbook.com> wrote:\n> Yes. Tails 1.1, based on Wheezy, will be out on June 10:\n> https://tails.boum.org/contribute/calendar/\n\nThanks!\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Development Roadmap of Bitcoin Core 0.9.2",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Warren Togami Jr.",
                "Kristov Atlas",
                "Gregory Maxwell",
                "Wladimir"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 19201
        }
    },
    {
        "title": "[Bitcoin-development] Double-spending unconfirmed transactions is a lot easier than most people realise",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-04-22T21:31:28",
                "message_text_only": "You may have seen my reddit post of the same title a few days ago:\n\nhttp://www.reddit.com/r/Bitcoin/comments/239bj1/doublespending_unconfirmed_transactions_is_a_lot/\n\nI've done some more experiments since, with good results. For instance\nhere's a real-world double-spend of the gambling service Lucky Bit:\n\nOriginal: 7801c3b996716025dbac946ca7a123b7c1c5429341738e8a6286a389de51bd20\n\n01000000012a14c8e6ce1e625513847b2ff271b3e6a1849f2a634c601b7f383ef710483f79000000006a4730440220692d09f5415f23118f865b81430990a15517954fd14a8bda74a5a38c4f2f39450220391f6251e39cdd3cab7363b912b897146a0a78e295f6ecd23b078c9f64ca7ae8012103a11c09c09874833eedc58a031d01d161ab4d2eba3874959537c5609ef5d5401fffffffff030c4d0f00000000001976a914d5245b64fcf8e873a9d1c0bfe2d258492bec6cc888ac400d0300000000001976a914da5dde8abec4f3b67561bcd06aaf28b790cff75588ac10270000000000001976a914c4c5d791fcb4654a1ef5e03fe0ad3d9c598f982788ac00000000\n\nDouble-spend: f4e8e930bdfa3666b4a46c67544e356876a72ec70060130b2c7078c4ce88582a\n\n01000000012a14c8e6ce1e625513847b2ff271b3e6a1849f2a634c601b7f383ef710483f79000000006a473044022074f0c6912b482c6b51f1a91fb2bdca3f3dde3a3aed4fc54bd5ed563390011c2d02202719fe49578591edfbdd4b79ceeaa7f9550e4323748b3dbdd4135f38e70c476d012103a11c09c09874833eedc58a031d01d161ab4d2eba3874959537c5609ef5d5401fffffffff01d9c90f00000000001976a914d5245b64fcf8e873a9d1c0bfe2d258492bec6cc888ac00000000\n\nThe double-spend was mined by Eligius and made use of the fact that\nEligius blacklists transactions to a number of addresses considered to\nbe \"spam\" by the pool operators; affected transactions are not added to\nthe Eligus mempool at all. Lucky Bit has a real-time display of bets as\nthey are accepted; I simply watched that display to determine whether or\nnot I had lost. With Eligius at 8% and the house edge at 1.75% the\nattack is profitable when automated. My replace-by-fee patch(1) was\nused, although as there are only a handful of such nodes running - none\nconnected directly to Eligius from what I can determine - I submitted\nthe double-spend transactions to Eligius directly via their pushtxn\nwebform.(2)\n\nOf course, this is an especially difficult case, as you must send the\ndouble-spend after the original transaction - normally just sending a\nnon-standard tx to Eligius first would suffice. Note how this defeats\nAndresen's double-spend-relay patch(3) as proposed since the\ndouble-spend is a non-standard transaction.\n\nIn discussion with Lucky Bit they have added case-specific code to\nreject transactions with known blacklisted outputs; the above\ndouble-spend I preformed is no longer possible. Of course, if the\n(reused) Lucky Bit addresses are added to that blacklist, that approach\nisn't viable - I suggest they switch to a scheme where addresses are not\nreused. (per-customer? rotated?) They also have added code to keep track\nof double-spend occurances and trigger human intervention prior to\nunacceptable losses. Longer term as with most services (e.g. Just-Dice)\nthey intend to move to off-chain transactions. They are also considering\nimplementing replace-by-fee scorched earth(4) - in their case a single\npool, such as Eligius, implementing it would be enough to make the\nattack unprofitable. It may also be enough security to allow users to\nuse their deposits prior to the first confirmation in a Just-Dice style\noff-chain implementation.\n\n1) https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.9.1\n\n2) http://eligius.st/~wizkid057/newstats/pushtxn.php\n\n3) https://github.com/bitcoin/bitcoin/pull/3354 and\n   https://github.com/bitcoin/bitcoin/pull/3883\n\n4) https://bitcointalk.org/index.php?topic=251233.msg2669189#msg2669189\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000024abc60eebba42333d74b30635ca5fb0b7c776a579c307a8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140422/62be07b3/attachment.sig>"
            },
            {
                "author": "Jan M\u00f8ller",
                "date": "2014-04-23T04:29:22",
                "message_text_only": ">Of course, this is an especially difficult case, as you must send the\n>double-spend after the original transaction - normally just sending a\n>non-standard tx to Eligius first would suffice. Note how this defeats\n>Andresen's double-spend-relay patch(3) as proposed since the\n>double-spend is a non-standard transaction.\n\nWhy can't you send a non-standard tx to Eligius first in this scenario?\u200b\nIs it because LuckyBit is connected directly to Eligius, and does Eligius\nrelay (not only mine) non-standard transactions?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/169b24c1/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-23T06:35:06",
                "message_text_only": "On 04/22/2014 09:29 PM, Jan M\u00f8ller wrote:\n>>Of course, this is an especially difficult case, as you must send the\n>>double-spend after the original transaction - normally just sending a\n>>non-standard tx to Eligius first would suffice. Note how this defeats\n>>Andresen's double-spend-relay patch(3) as proposed since the\n>>double-spend is a non-standard transaction.\n> \n> Why can't you send a non-standard tx to Eligius first in this scenario?\u200b\n> Is it because LuckyBit is connected directly to Eligius, and does\n> Eligius relay (not only mine) non-standard transactions?\n> \n\nBecause you only want to double-spend if you loss the bet. If you tried\nto double-spend every bet, there'd be no point :)"
            },
            {
                "author": "Tom Harding",
                "date": "2014-04-23T04:45:53",
                "message_text_only": "Since no complete solution to preventing 0-confirmation respends in the \nbitcoin network has been proposed, or is likely to exist, when \nevaluating partial solutions let's ask \"what kind of network does this \nmove toward?\"\n\nDoes the solution move toward a network with simple rules, where the \ncertainty that decreases from the many-confirmations state, down to 1 \nconfirmation, does not immediately disappear just below the time of 1 \nconfirmation?\n\nA network where transaction submitters consider their (final) \ntransactions to be unchangeable the moment they are transmitted, and \nwhere the network's goal is to confirm only transactions all of whose \nUTXO's have not yet been seen in a final transaction's input, has a \nchance to be such a network.  If respend attempts are broadcast widely, \nthen after a time on the order of transaction propagation time (<< 1 \nminute) has passed, participants have a good chance to avoid relying on \na transaction whose funds are spent to someone else.  This is both \nbecause after this time the network is unlikely to split on the primacy \nof one spend, and because the recipient, able to see a respend attempt, \ncan withhold delivery of the good or service until confirmation.\n\nOr, does the solution move toward a network that\n  - Requires participants to have knowledge of the policies of multiple \nentities, like Eligius and whoever maintains the blacklist mentioned below?\n  - Requires a transaction submitter to intently monitor transactions \nand try to climb over the top of attempted respends with \n\"scorched-earth\" triple spends, until a random moment some time between, \nlet's say, 5 and 15 minutes in the future?\n  - Punts the problem to off-network solutions?\n\n\nOn 4/22/2014 1:31 PM, Peter Todd wrote:\n> You may have seen my reddit post of the same title a few days ago:\n>\n> http://www.reddit.com/r/Bitcoin/comments/239bj1/doublespending_unconfirmed_transactions_is_a_lot/\n>\n> I've done some more experiments since, with good results. For instance\n> here's a real-world double-spend of the gambling service Lucky Bit:\n>\n> Original: 7801c3b996716025dbac946ca7a123b7c1c5429341738e8a6286a389de51bd20\n>\n> 01000000012a14c8e6ce1e625513847b2ff271b3e6a1849f2a634c601b7f383ef710483f79000000006a4730440220692d09f5415f23118f865b81430990a15517954fd14a8bda74a5a38c4f2f39450220391f6251e39cdd3cab7363b912b897146a0a78e295f6ecd23b078c9f64ca7ae8012103a11c09c09874833eedc58a031d01d161ab4d2eba3874959537c5609ef5d5401fffffffff030c4d0f00000000001976a914d5245b64fcf8e873a9d1c0bfe2d258492bec6cc888ac400d0300000000001976a914da5dde8abec4f3b67561bcd06aaf28b790cff75588ac10270000000000001976a914c4c5d791fcb4654a1ef5e03fe0ad3d9c598f982788ac00000000\n>\n> Double-spend: f4e8e930bdfa3666b4a46c67544e356876a72ec70060130b2c7078c4ce88582a\n>\n> 01000000012a14c8e6ce1e625513847b2ff271b3e6a1849f2a634c601b7f383ef710483f79000000006a473044022074f0c6912b482c6b51f1a91fb2bdca3f3dde3a3aed4fc54bd5ed563390011c2d02202719fe49578591edfbdd4b79ceeaa7f9550e4323748b3dbdd4135f38e70c476d012103a11c09c09874833eedc58a031d01d161ab4d2eba3874959537c5609ef5d5401fffffffff01d9c90f00000000001976a914d5245b64fcf8e873a9d1c0bfe2d258492bec6cc888ac00000000\n>\n> The double-spend was mined by Eligius and made use of the fact that\n> Eligius blacklists transactions to a number of addresses considered to\n> be \"spam\" by the pool operators; affected transactions are not added to\n> the Eligus mempool at all. Lucky Bit has a real-time display of bets as\n> they are accepted; I simply watched that display to determine whether or\n> not I had lost. With Eligius at 8% and the house edge at 1.75% the\n> attack is profitable when automated. My replace-by-fee patch(1) was\n> used, although as there are only a handful of such nodes running - none\n> connected directly to Eligius from what I can determine - I submitted\n> the double-spend transactions to Eligius directly via their pushtxn\n> webform.(2)\n>\n> Of course, this is an especially difficult case, as you must send the\n> double-spend after the original transaction - normally just sending a\n> non-standard tx to Eligius first would suffice. Note how this defeats\n> Andresen's double-spend-relay patch(3) as proposed since the\n> double-spend is a non-standard transaction.\n>\n> In discussion with Lucky Bit they have added case-specific code to\n> reject transactions with known blacklisted outputs; the above\n> double-spend I preformed is no longer possible. Of course, if the\n> (reused) Lucky Bit addresses are added to that blacklist, that approach\n> isn't viable - I suggest they switch to a scheme where addresses are not\n> reused. (per-customer? rotated?) They also have added code to keep track\n> of double-spend occurances and trigger human intervention prior to\n> unacceptable losses. Longer term as with most services (e.g. Just-Dice)\n> they intend to move to off-chain transactions. They are also considering\n> implementing replace-by-fee scorched earth(4) - in their case a single\n> pool, such as Eligius, implementing it would be enough to make the\n> attack unprofitable. It may also be enough security to allow users to\n> use their deposits prior to the first confirmation in a Just-Dice style\n> off-chain implementation.\n>\n> 1) https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.9.1\n>\n> 2) http://eligius.st/~wizkid057/newstats/pushtxn.php\n>\n> 3) https://github.com/bitcoin/bitcoin/pull/3354 and\n>     https://github.com/bitcoin/bitcoin/pull/3883\n>\n> 4) https://bitcointalk.org/index.php?topic=251233.msg2669189#msg2669189"
            },
            {
                "author": "Matt Whitlock",
                "date": "2014-04-23T04:03:17",
                "message_text_only": "On Tuesday, 22 April 2014, at 8:45 pm, Tom Harding wrote:\n> A network where transaction submitters consider their (final) \n> transactions to be unchangeable the moment they are transmitted, and \n> where the network's goal is to confirm only transactions all of whose \n> UTXO's have not yet been seen in a final transaction's input, has a \n> chance to be such a network.\n\nRespectfully, this is not the goal of miners. The goal of miners is to maximize profits. Always will be. If they can do that by enabling replace-by-fee (and they can), then they will. Altruism does not factor into business."
            },
            {
                "author": "Tom Harding",
                "date": "2014-04-23T22:29:33",
                "message_text_only": "On 4/22/2014 9:03 PM, Matt Whitlock wrote:\n> On Tuesday, 22 April 2014, at 8:45 pm, Tom Harding wrote:\n>> A network where transaction submitters consider their (final)\n>> transactions to be unchangeable the moment they are transmitted, and\n>> where the network's goal is to confirm only transactions all of whose\n>> UTXO's have not yet been seen in a final transaction's input, has a\n>> chance to be such a network.\n> Respectfully, this is not the goal of miners. The goal of miners is to maximize profits. Always will be. If they can do that by enabling replace-by-fee (and they can), then they will. Altruism does not factor into business.\n\nThe rational miner works hard digging hashes out of the ether, and wants \nthe reward to be great.  How much more valuable would his reward be if \nhe were paid in something that is spendable like cash on a 1-minute \nnetwork for coffee and other innumerable real-time transactions, versus \nsomething that is only spendable on a 15-minute network?\n\nThere is a prisoner's dilemma, to be sure, but do the fees from helping \npeople successfully double-spend their coffee supplier really outweigh \nthe increased value to the entire network - including himself - of \nensuring that digital cash actually works like cash?"
            },
            {
                "author": "Simon Barber",
                "date": "2014-04-24T00:42:20",
                "message_text_only": "Miners earn bitcoins, and clearly a network where reasonable certainty \ncan be achieved with 0-confirm transactions is more useful, thus will \nresult in those bitcoins being more valuable. One would expect rational \nminers (or pool operators) to want to collaborate to reduce the \npossibilities for double spend attacks as much as possible.\n\nSimon\n\nOn 4/23/2014 3:29 PM, Tom Harding wrote:\n> On 4/22/2014 9:03 PM, Matt Whitlock wrote:\n>> On Tuesday, 22 April 2014, at 8:45 pm, Tom Harding wrote:\n>>> A network where transaction submitters consider their (final)\n>>> transactions to be unchangeable the moment they are transmitted, and\n>>> where the network's goal is to confirm only transactions all of whose\n>>> UTXO's have not yet been seen in a final transaction's input, has a\n>>> chance to be such a network.\n>> Respectfully, this is not the goal of miners. The goal of miners is to maximize profits. Always will be. If they can do that by enabling replace-by-fee (and they can), then they will. Altruism does not factor into business.\n> The rational miner works hard digging hashes out of the ether, and wants\n> the reward to be great.  How much more valuable would his reward be if\n> he were paid in something that is spendable like cash on a 1-minute\n> network for coffee and other innumerable real-time transactions, versus\n> something that is only spendable on a 15-minute network?\n>\n> There is a prisoner's dilemma, to be sure, but do the fees from helping\n> people successfully double-spend their coffee supplier really outweigh\n> the increased value to the entire network - including himself - of\n> ensuring that digital cash actually works like cash?\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-23T04:22:35",
                "message_text_only": "A lot of these \"should the network...\" questions depend on business\nrules and business models.\n\nEven if a 0-conf double spend is possible in a given business\nsituation, the incentives quite often are aligned to avoid\ndouble-spend attempts in any case.  Any physical good being shipped\ncan \"accept\" the transaction, and then wait for confirmations before\nshipping.  Digital goods might be accepted for 0-conf payment from\nusers who have a good history with the merchant.  The 0-conf attacker\nwill tend to /not/ be a regular user, and also have many other typical\nmarkers of a fraudster.\n\nThe subset of (a) double-spend attackers making a one-time or\nshort-term attack on (b) a naive merchant with mistuned business rules\nwill tend to be very small.\n\n\nOn Wed, Apr 23, 2014 at 12:45 AM, Tom Harding <tomh at thinlink.com> wrote:\n>\n> Since no complete solution to preventing 0-confirmation respends in the\n> bitcoin network has been proposed, or is likely to exist, when\n> evaluating partial solutions let's ask \"what kind of network does this\n> move toward?\"\n>\n> Does the solution move toward a network with simple rules, where the\n> certainty that decreases from the many-confirmations state, down to 1\n> confirmation, does not immediately disappear just below the time of 1\n> confirmation?\n>\n> A network where transaction submitters consider their (final)\n> transactions to be unchangeable the moment they are transmitted, and\n> where the network's goal is to confirm only transactions all of whose\n> UTXO's have not yet been seen in a final transaction's input, has a\n> chance to be such a network.  If respend attempts are broadcast widely,\n> then after a time on the order of transaction propagation time (<< 1\n> minute) has passed, participants have a good chance to avoid relying on\n> a transaction whose funds are spent to someone else.  This is both\n> because after this time the network is unlikely to split on the primacy\n> of one spend, and because the recipient, able to see a respend attempt,\n> can withhold delivery of the good or service until confirmation.\n>\n> Or, does the solution move toward a network that\n>   - Requires participants to have knowledge of the policies of multiple\n> entities, like Eligius and whoever maintains the blacklist mentioned below?\n>   - Requires a transaction submitter to intently monitor transactions\n> and try to climb over the top of attempted respends with\n> \"scorched-earth\" triple spends, until a random moment some time between,\n> let's say, 5 and 15 minutes in the future?\n>   - Punts the problem to off-network solutions?\n>\n>\n> On 4/22/2014 1:31 PM, Peter Todd wrote:\n>> You may have seen my reddit post of the same title a few days ago:\n>>\n>> http://www.reddit.com/r/Bitcoin/comments/239bj1/doublespending_unconfirmed_transactions_is_a_lot/\n>>\n>> I've done some more experiments since, with good results. For instance\n>> here's a real-world double-spend of the gambling service Lucky Bit:\n>>\n>> Original: 7801c3b996716025dbac946ca7a123b7c1c5429341738e8a6286a389de51bd20\n>>\n>> 01000000012a14c8e6ce1e625513847b2ff271b3e6a1849f2a634c601b7f383ef710483f79000000006a4730440220692d09f5415f23118f865b81430990a15517954fd14a8bda74a5a38c4f2f39450220391f6251e39cdd3cab7363b912b897146a0a78e295f6ecd23b078c9f64ca7ae8012103a11c09c09874833eedc58a031d01d161ab4d2eba3874959537c5609ef5d5401fffffffff030c4d0f00000000001976a914d5245b64fcf8e873a9d1c0bfe2d258492bec6cc888ac400d0300000000001976a914da5dde8abec4f3b67561bcd06aaf28b790cff75588ac10270000000000001976a914c4c5d791fcb4654a1ef5e03fe0ad3d9c598f982788ac00000000\n>>\n>> Double-spend: f4e8e930bdfa3666b4a46c67544e356876a72ec70060130b2c7078c4ce88582a\n>>\n>> 01000000012a14c8e6ce1e625513847b2ff271b3e6a1849f2a634c601b7f383ef710483f79000000006a473044022074f0c6912b482c6b51f1a91fb2bdca3f3dde3a3aed4fc54bd5ed563390011c2d02202719fe49578591edfbdd4b79ceeaa7f9550e4323748b3dbdd4135f38e70c476d012103a11c09c09874833eedc58a031d01d161ab4d2eba3874959537c5609ef5d5401fffffffff01d9c90f00000000001976a914d5245b64fcf8e873a9d1c0bfe2d258492bec6cc888ac00000000\n>>\n>> The double-spend was mined by Eligius and made use of the fact that\n>> Eligius blacklists transactions to a number of addresses considered to\n>> be \"spam\" by the pool operators; affected transactions are not added to\n>> the Eligus mempool at all. Lucky Bit has a real-time display of bets as\n>> they are accepted; I simply watched that display to determine whether or\n>> not I had lost. With Eligius at 8% and the house edge at 1.75% the\n>> attack is profitable when automated. My replace-by-fee patch(1) was\n>> used, although as there are only a handful of such nodes running - none\n>> connected directly to Eligius from what I can determine - I submitted\n>> the double-spend transactions to Eligius directly via their pushtxn\n>> webform.(2)\n>>\n>> Of course, this is an especially difficult case, as you must send the\n>> double-spend after the original transaction - normally just sending a\n>> non-standard tx to Eligius first would suffice. Note how this defeats\n>> Andresen's double-spend-relay patch(3) as proposed since the\n>> double-spend is a non-standard transaction.\n>>\n>> In discussion with Lucky Bit they have added case-specific code to\n>> reject transactions with known blacklisted outputs; the above\n>> double-spend I preformed is no longer possible. Of course, if the\n>> (reused) Lucky Bit addresses are added to that blacklist, that approach\n>> isn't viable - I suggest they switch to a scheme where addresses are not\n>> reused. (per-customer? rotated?) They also have added code to keep track\n>> of double-spend occurances and trigger human intervention prior to\n>> unacceptable losses. Longer term as with most services (e.g. Just-Dice)\n>> they intend to move to off-chain transactions. They are also considering\n>> implementing replace-by-fee scorched earth(4) - in their case a single\n>> pool, such as Eligius, implementing it would be enough to make the\n>> attack unprofitable. It may also be enough security to allow users to\n>> use their deposits prior to the first confirmation in a Just-Dice style\n>> off-chain implementation.\n>>\n>> 1) https://github.com/petertodd/bitcoin/tree/replace-by-fee-v0.9.1\n>>\n>> 2) http://eligius.st/~wizkid057/newstats/pushtxn.php\n>>\n>> 3) https://github.com/bitcoin/bitcoin/pull/3354 and\n>>     https://github.com/bitcoin/bitcoin/pull/3883\n>>\n>> 4) https://bitcointalk.org/index.php?topic=251233.msg2669189#msg2669189\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Double-spending unconfirmed transactions is a lot easier than most people realise",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Simon Barber",
                "Peter Todd",
                "Matt Whitlock",
                "Mark Friedenbach",
                "Jan M\u00f8ller",
                "Tom Harding"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 22041
        }
    },
    {
        "title": "[Bitcoin-development] Coinbase reallocation to discourage Finney attacks",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T07:55:30",
                "message_text_only": "Lately someone launched Finney attacks as a service (BitUndo). As a\nreminder for newcomers, Finney attacks are where a miner secretly works on\na block containing a double spend. When they eventually find a block, they\nrun to the merchant and pay, then broadcast the block. In a simpler variant\nof this attack you make purchases as normal with a modified wallet that\nalways submits a double spend to the service, and then N% of the time where\nN is the percentage of overall hash power the dishonest miners have, you\nget your money back minus their fee.\n\nN does not need to be very high to render Bitcoin much less useful. Real\ntime transactions are very important. Although I never expected it when I\nfirst started using Bitcoin, nowadays most of my purchases with it are for\nfood and drink. If Bitcoin could not support such purchases, I would use it\nmuch less.\nEven with their woeful security many merchants see <1-2% credit card\nchargeback rates, and chargebacks can be disputed. In fact merchants win\nabout 40% of chargeback disputes. So if N was only, say, 5%, and there was\na large enough population of users who were systematically trying to\ndefraud merchants, we'd already be having worse security than magstripe\ncredit cards. EMV transactions have loss rates in the noise, so for\nmerchants who take those Bitcoin would be dramatically less secure.\n\nThe idea of discouraging blocks that perform Finney attacks by having\nhonest miners refuse to build on them has been proposed. But it has a\ncouple of problems:\n\n   1. It's hard to automatically detect Finney attacks. Looking for blocks\n   that contain unseen transactions that override the mempool doesn't work -\n   the dishonest users could broadcast all their double spends once a Finney\n   block was found and then broadcast the block immediately afterwards, thus\n   making the block look like any other would in the presence of double spends.\n\n   2. If they could be automatically identified, it possibly could be\n   converted into a DoS on the network by broadcasting double spends in such a\n   way that the system races, and every miner produces a block that looks like\n   a Finney attack to some of the others. The chain would stop advancing.\n\n   3. Miners who want to vote \"no\" on a block take a big risk, they could\n   be on the losing side of the fork and end up wasting their work.\n\nWe can resolve these problems with a couple of tweaks:\n\n   1. Dishonest blocks can be identified out of band, by having honest\n   miners submit double spends against themselves to the service anonymously\n   using a separate tool. When their own double spend appears they know the\n   block is bad.\n\n   2. Miners can vote to reallocate the coinbase value of bad blocks before\n   they mature. If a majority of blocks leading up to maturity vote for\n   reallocation, the value goes into a pot that subsequent blocks are allowed\n   to claim for themselves. Thus there is no risk to voting \"no\" on a block,\n   the work done by the Finney attacker is not wasted, and users do not have\n   to suffer through huge reorgs.\n\nThis may seem a radical suggestion, but I think it's much less radical than\nsome of the others being thrown around.\n\nThe above approach works as long as the majority of hashpower is honest,\ndefined to mean, working to stop double spending. This is the same security\nproperty as described in the white paper, thus this introduces no new\nsecurity assumptions. Note that assuming *all* miners are dishonest and are\nwilling to double spend automatically resolves the Bitcoin experiment as a\nfailure, because that would invalidate the entire theory upon which the\nsystem is built. That doesn't mean the assumption is wrong! It may be that\nan entirely unregulated market for double spending prevention cannot work\nand the participants eventually all end up trashing the commons - but the\nhope is that smart incentives can replace the traditional reliance on law\nand regulation to avoid this.\n\nThe voting mechanism would only apply to coinbases, not arbitrary\ntransactions, thus it cannot be used to steal arbitrary users bitcoins. A\nmajority of miners can already reallocate coinbases by forking them out,\nbut this wastes energy and work presenting a significant discouragement to\nvote unless you already know via some out of band mechanism that you have a\nsolid majority. Placing votes into the coinbase scriptSig as is done with\nother things avoids that problem.\n\nThe identification of Finney blocks relies on miners to take explicit\naction, like downloading and running a tool that submits votes via RPC. It\ncan be expected that double spending services would try to identify and\nblock the sentinel transactions, which is why it's better to have the code\nthat fights this arms race be out of process and developed externally to\nBitcoin Core itself, which should ultimately just enforce the new (forking)\nrule change.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/82270925/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2014-04-23T09:57:53",
                "message_text_only": "On Wednesday 23 Apr 2014 08:55:30 Mike Hearn wrote:\n\n> Even with their woeful security many merchants see <1-2% credit card\n> chargeback rates, and chargebacks can be disputed. In fact merchants win\n> about 40% of chargeback disputes. So if N was only, say, 5%, and there\n> was a large enough population of users who were systematically trying to\n> defraud merchants, we'd already be having worse security than magstripe\n> credit cards. EMV transactions have loss rates in the noise, so for\n> merchants who take those Bitcoin would be dramatically less secure.\n\nJust pedantry: 100% of credit card transactions _can_ be fradulantly charged \nback but arent.  In fact, only 2% are ever attempted.\n\nIf N was 5%, then only 5% of bitcoin transactions _could_ be fraudulantly \n\"charged back\"; so then why wouldn't only 2% of those bitcoin transactions \nbe fraudulant too, just as in the CC case?\n\nThe comparison would then be 2% chargebacks for credit cards, equivalent to \n0.1% (5%*2%) for bitcoin.\n\n\nNot that I think that makes anything else you say invalid.\n\n\n\nAndy\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T11:07:25",
                "message_text_only": ">\n> Just pedantry: 100% of credit card transactions _can_ be fradulantly\n> charged\n> back but arent.\n>\n\nIf you do a chargeback the bank double checks this, investigates it and\npeople who repeatedly try and do fraudulent chargebacks get their accounts\nterminated. It's not like your bank offers you a \"reverse this payment\"\nbutton in the UI that always works, right?\n\n\n> If N was 5%, then only 5% of bitcoin transactions _could_ be fraudulantly\n> \"charged back\"; so then why wouldn't only 2% of those bitcoin transactions\n> be fraudulant too, just as in the CC case?\n>\n\nIf you attempt fraud against a bank, they know who you are and will come\nafter you in one way or another. But it's safe to assume that users of a\ndouble spend service would be anonymous and the kind of merchants they go\nafter are not hassling their customers with strong ID checks, so there\nwould be no consequences for them. It's a game they can only win.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/f073fecc/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2014-04-23T11:39:18",
                "message_text_only": "On Wednesday 23 Apr 2014 12:07:25 Mike Hearn wrote:\n> > Just pedantry: 100% of credit card transactions _can_ be fradulantly\n> > charged\n> > back but arent.\n> \n> If you do a chargeback the bank double checks this, investigates it and\n> people who repeatedly try and do fraudulent chargebacks get their\n> accounts terminated. It's not like your bank offers you a \"reverse this\n> payment\" button in the UI that always works, right?\n\nTrue; the effort of a chargeback is non-zero on credit cards; but that's my \npoint: it's non-zero for bitcoin too.\n\n> > If N was 5%, then only 5% of bitcoin transactions _could_ be\n> > fraudulantly \"charged back\"; so then why wouldn't only 2% of those\n> > bitcoin transactions be fraudulant too, just as in the CC case?\n> \n> If you attempt fraud against a bank, they know who you are and will come\n> after you in one way or another. But it's safe to assume that users of a\n> double spend service would be anonymous and the kind of merchants they go\n> after are not hassling their customers with strong ID checks, so there\n> would be no consequences for them. It's a game they can only win.\n\nYou're still being unfair to bitcoin.  Not everyone who uses bitcoins will \nbe dishonest.  The dishonest 5% hashing power is not going to be used in \n100% of any given merchants transactions.  That's all I'm saying.  You're \noriginal statement that we could end up in a position that bitcoin has a \nhigher failure rate than credit cards seems unfair to me.\n\n> if N was only, say, 5%, and there was a large enough population of users \nwho were systematically trying to defraud merchants, we'd already be having \nworse security than magstripe credit cards.\n\n\"[If] there was a large enough population\" -- why are bitcoin users more \ndishonest than credit card users?  Most people are honest, so it seems \nunlikely that that 5% attack surface would be used at 100%; or even 40% \nnecessary to equal the 2% chargeback rate with CC.  \n\nI really didn't want to get into an argument over this: all I'm saying is \nthat things aren't as bad as you painted them.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T11:45:34",
                "message_text_only": ">\n> You're still being unfair to bitcoin.  Not everyone who uses bitcoins will\n> be dishonest.  The dishonest 5% hashing power is not going to be used in\n> 100% of any given merchants transactions.\n>\n\nOK, sure, let's say most Bitcoin users will be honest (we hope). But\nunfortunately in a situation where fraud is possible users wouldn't\nnecessarily distribute evenly over transactions.\n\nBack when I worked on Gmail, we did a little study where we selected a\nrandom subset of email accounts from Nigeria and waited to see if they\nreceived abuse reports, showed up on dating site blacklists etc. It turned\nout about 2/3rds of them did. This obviously doesn't imply that 2/3rds of\nall Nigerians are scammers, but unfortunately the few that are are\nresponsible for a disproportionate number of account creations.\n\nIf a merchant is selling something of value repeatedly, then a small number\nof scammers can go back and try their luck over and over. I'm not sure how\nmany trades fall into such an exploitable category, though.\n\nAlso, there's the philosophical question of how honest people really are\nwhen there's no consequences to their actions. For instance, if most people\nwere honest, then piracy would be not a big problem. But game studios that\nhave cracked DRM quite often report piracy rates of 95%, i.e. for every 5\nsales they make, they get 100 people playing on their servers - the vast\nmajority of their users are not honest.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/8617479c/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2014-04-23T13:21:53",
                "message_text_only": "On Wednesday 23 Apr 2014 12:45:34 Mike Hearn wrote:\n\n> OK, sure, let's say most Bitcoin users will be honest (we hope). But\n> unfortunately in a situation where fraud is possible users wouldn't\n> necessarily distribute evenly over transactions.\n\nThat's true, but even in the worst that that 5% hashing power attack means \nthat 95% of the time, your attack fails.  That means you end up paying for \nwhat you bought.  Also, you're again changing the comparison basis -- your \nCC figures were for the entire industry, not the most badly affected \nmerchant.  You can't say \"one particular bitcoin merchant suffers 5% fraud, \ntherefore that's worse than the 2% fraud averaged across all CC merchants\".\n\n> If a merchant is selling something of value repeatedly, then a small\n> number of scammers can go back and try their luck over and over. I'm not\n> sure how many trades fall into such an exploitable category, though.\n>\n> Also, there's the philosophical question of how honest people really are\n> when there's no consequences to their actions. For instance, if most\n\nThere _are_ consequences though: 95% of the time, you end up buying \nsomething and paying for it.\n\nViewed another way, if I buy something repeatedly from an at risk merchant \n(and there won't be many; as you pointed out, mail order is completely \nunaffected as you can simply wait for your confirmations) that costs, say \n0.01 BTC per item, then I have to buy 100 of them to get 5 of them for free.  \nDo I really want 100 of them?  Even if I do want them, then I've had to \nsupply capital of 1 BTC to earn 0.05 BTC in kind.\n\nIf what I'm buying is another form of money (as with exchanges, or perhaps \ncasinos) when that \"in kind\" is just as liquid as the BTC, then fair enough, \nthere is a risk, but that just incentivises the merchant in those cases to \nnot allow withdrawal/deposit until 6 confirmations have been received.  \nThose merchants then move from \"at risk\" to \"not at risk\".\n\nI'm still struggling to see how bitcoin could ever be as bad as CC fraud.\n\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T13:31:38",
                "message_text_only": ">\n> There _are_ consequences though: 95% of the time, you end up buying\n> something and paying for it.\n\n\nYeah, I was imagining a situation in which people who use Bitcoin regularly\ndo buy things they actually want, but wouldn't say no to occasionally\ngetting them for free (think coffees at starbucks etc). So if their double\nspend fails, no big deal, they're no worse off than if they didn't try.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/8314bf4a/attachment.html>"
            },
            {
                "author": "Andy Parkins",
                "date": "2014-04-24T09:21:26",
                "message_text_only": "On Wednesday 23 April 2014 15:31:38 Mike Hearn wrote:\n> > There _are_ consequences though: 95% of the time, you end up buying\n> > something and paying for it.\n> \n> Yeah, I was imagining a situation in which people who use Bitcoin regularly\n> do buy things they actually want, but wouldn't say no to occasionally\n> getting them for free (think coffees at starbucks etc). So if their double\n> spend fails, no big deal, they're no worse off than if they didn't try.\n\nAgain true enough; but then we're back to evenly distributed dishonesty, and \nso you still don't get the potential 5% scam being used at 100% capacity.\n\n\nAndy\n\n-- \nDr Andy Parkins\nandyparkins at gmail.com"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-04-23T12:43:56",
                "message_text_only": "Just a few issues with the idea as it currently stands:\n\n1. This provides a very strong incentive to always vote for\nreallocating a block if it isn't yours, regardless of whether it's bad\nor not (there's a positive expected return to voting to reallocate\ncoinbases from other miners). The incentive is bigger the more hash\npower you have. You can partially address this by:\n    a) Requiring supermajorities\n    b) Requiring a vote to include proof of a double spend (that's not\na very strong safeguard, since anyone can create them after the fact\nif one of their own transactions has been included).\n    c) Burning, rather than reallocating, the coins. Miners' immediate\nincentive to attack honest pools is much reduced.\n\n2. BitUndo gets paid using additional txouts in the double-spend\ntransaction, no by miner's fees. This means that the coinbase\ntransaction will represent a smaller and smaller share of their\nrevenues over time (however if the total honest transaction fees they\nget in their block are high enough, the risk of losing those might\nstill be enough).\n\nOn Wed, Apr 23, 2014 at 3:55 AM, Mike Hearn <mike at plan99.net> wrote:\n> Lately someone launched Finney attacks as a service (BitUndo). As a reminder\n> for newcomers, Finney attacks are where a miner secretly works on a block\n> containing a double spend. When they eventually find a block, they run to\n> the merchant and pay, then broadcast the block. In a simpler variant of this\n> attack you make purchases as normal with a modified wallet that always\n> submits a double spend to the service, and then N% of the time where N is\n> the percentage of overall hash power the dishonest miners have, you get your\n> money back minus their fee.\n>\n> N does not need to be very high to render Bitcoin much less useful. Real\n> time transactions are very important. Although I never expected it when I\n> first started using Bitcoin, nowadays most of my purchases with it are for\n> food and drink. If Bitcoin could not support such purchases, I would use it\n> much less.\n> Even with their woeful security many merchants see <1-2% credit card\n> chargeback rates, and chargebacks can be disputed. In fact merchants win\n> about 40% of chargeback disputes. So if N was only, say, 5%, and there was a\n> large enough population of users who were systematically trying to defraud\n> merchants, we'd already be having worse security than magstripe credit\n> cards. EMV transactions have loss rates in the noise, so for merchants who\n> take those Bitcoin would be dramatically less secure.\n>\n> The idea of discouraging blocks that perform Finney attacks by having honest\n> miners refuse to build on them has been proposed. But it has a couple of\n> problems:\n>\n> It's hard to automatically detect Finney attacks. Looking for blocks that\n> contain unseen transactions that override the mempool doesn't work - the\n> dishonest users could broadcast all their double spends once a Finney block\n> was found and then broadcast the block immediately afterwards, thus making\n> the block look like any other would in the presence of double spends.\n>\n> If they could be automatically identified, it possibly could be converted\n> into a DoS on the network by broadcasting double spends in such a way that\n> the system races, and every miner produces a block that looks like a Finney\n> attack to some of the others. The chain would stop advancing.\n>\n> Miners who want to vote \"no\" on a block take a big risk, they could be on\n> the losing side of the fork and end up wasting their work.\n>\n> We can resolve these problems with a couple of tweaks:\n>\n> Dishonest blocks can be identified out of band, by having honest miners\n> submit double spends against themselves to the service anonymously using a\n> separate tool. When their own double spend appears they know the block is\n> bad.\n>\n> Miners can vote to reallocate the coinbase value of bad blocks before they\n> mature. If a majority of blocks leading up to maturity vote for\n> reallocation, the value goes into a pot that subsequent blocks are allowed\n> to claim for themselves. Thus there is no risk to voting \"no\" on a block,\n> the work done by the Finney attacker is not wasted, and users do not have to\n> suffer through huge reorgs.\n>\n> This may seem a radical suggestion, but I think it's much less radical than\n> some of the others being thrown around.\n>\n> The above approach works as long as the majority of hashpower is honest,\n> defined to mean, working to stop double spending. This is the same security\n> property as described in the white paper, thus this introduces no new\n> security assumptions. Note that assuming all miners are dishonest and are\n> willing to double spend automatically resolves the Bitcoin experiment as a\n> failure, because that would invalidate the entire theory upon which the\n> system is built. That doesn't mean the assumption is wrong! It may be that\n> an entirely unregulated market for double spending prevention cannot work\n> and the participants eventually all end up trashing the commons - but the\n> hope is that smart incentives can replace the traditional reliance on law\n> and regulation to avoid this.\n>\n> The voting mechanism would only apply to coinbases, not arbitrary\n> transactions, thus it cannot be used to steal arbitrary users bitcoins. A\n> majority of miners can already reallocate coinbases by forking them out, but\n> this wastes energy and work presenting a significant discouragement to vote\n> unless you already know via some out of band mechanism that you have a solid\n> majority. Placing votes into the coinbase scriptSig as is done with other\n> things avoids that problem.\n>\n> The identification of Finney blocks relies on miners to take explicit\n> action, like downloading and running a tool that submits votes via RPC. It\n> can be expected that double spending services would try to identify and\n> block the sentinel transactions, which is why it's better to have the code\n> that fights this arms race be out of process and developed externally to\n> Bitcoin Core itself, which should ultimately just enforce the new (forking)\n> rule change.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T12:51:24",
                "message_text_only": "On Wed, Apr 23, 2014 at 2:43 PM, Christophe Biocca <\nchristophe.biocca at gmail.com> wrote:\n\n> 1. This provides a very strong incentive to always vote for\n> reallocating a block if it isn't yours\n\n\nIf everyone votes to reallocate everyone elses blocks all the time, then\nyou'd end up losing your own coins too, so this doesn't seem like a\nworkable strategy.\n\n\n>     a) Requiring supermajorities\n>     c) Burning, rather than reallocating, the coins. Miners' immediate\n> incentive to attack honest pools is much reduced.\n>\n\nI'm OK with burning actually. The total amount of coins in the system\nessentially defines its maximum price resolution. Ideally we'd not lose\nresolution, but it's less important than having a system that does actually\nwork. Moreover, this sort of system is like double spending defence itself\n- if it does work, it doesn't need to actually be done very frequently\nbecause people know the safeguards work and don't try. So in practice total\nloss of resolution should be limited.\n\n\n> 2. BitUndo gets paid using additional txouts in the double-spend\n> transaction, no by miner's fees.\n\n\nRight. It's indeed an assumption that block rewards matter to miners, even\nthe ones that have double spend revenues.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/53570a01/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-23T14:52:04",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/23/2014 07:55 AM, Mike Hearn wrote:\n\n> 2. Miners can vote to reallocate the coinbase value of bad blocks\n> before they mature. If a majority of blocks leading up to maturity\n> vote for reallocation, the value goes into a pot that subsequent\n> blocks are allowed to claim for themselves. Thus there is no risk\n> to voting \"no\" on a block, the work done by the Finney attacker is\n> not wasted, and users do not have to suffer through huge reorgs.\n\nIf enough miners don't like a block that has been mined, they can all\nwork to orphan it without any change to the protocol whatsoever.\n\nWhy are proposing this a change to the network that allows miners to\nvote to disregard output scripts, instead of creating an out of band\nnetwork via which miners can coordinate actions using the capabilities\nthe protocol already allows?\n\nOnce you've changed the network such that it is no longer a machine\nthat faithfully processes scripts, and instead is a machine via which\na set of controllers can decide which valid scripts will be honored\nand which ones will not, what will be the next proposed condition\nunder which the miners can confiscate and redistribute balances?\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTV9OUAAoJECoisBQbQ4v0XE8H+QGcOc3JiYsS2/xoR8SqpyEx\ngDChDFvhaao9qMPhfxBG0bso+4ITZ5c3mJawkqdBm3ZZPeygt1fLqvxe4c1AWocH\nYCf9CyZJlm8KsDJOqorja5o/6oXjH5xiGgVi042Jhb9wj/aGNPFvL9X6DGhEeFKQ\nuXFN4wTSPViEOryVqo3vEFh3md9Y1AIqcvc/b5M+EAtvaAD33/ALnzY9CNKymQZE\no0JGLEfwamKkZ+QA0mTfeDheJe9kj0KOQhXqOG/x3NlKCFVpmGz3daWZHJCFMDb4\n+RmDwoxOKvXxgveXu9w4d3bc3SQZ75hygmeMvVQwZggia31wqrHtsWLqIiFhVnU=\n=hpdg\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/6ba05543/attachment.bin>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T15:07:40",
                "message_text_only": "On Wed, Apr 23, 2014 at 4:52 PM, Justus Ranvier <justusranvier at gmail.com>wrote:\n\n> If enough miners don't like a block that has been mined, they can all\n> work to orphan it without any change to the protocol whatsoever.\n>\n\nAs was already pointed out, yes. However this requires them to immediate\nestablish a majority consensus and be absolutely sure it really is the\nmajority. You suggest an out of band mechanism for that, but why is this\nbetter than using the actual consensus mechanism you're trying to measure?\n\n\n> Once you've changed the network such that it is no longer a machine\n> that faithfully processes scripts\n\n\nBitcoin imposes far more rules than just execution of the scripting\nlanguage, many of which are entirely arbitrary and the result of\n(controversial) human judgement, like the inflation schedule. You can't\nclaim Bitcoin implements only some kind of natural law.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/addd0c4f/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-23T17:19:48",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/23/2014 03:07 PM, Mike Hearn wrote:\n> On Wed, Apr 23, 2014 at 4:52 PM, Justus Ranvier\n> <justusranvier at gmail.com>wrote:\n> \n>> If enough miners don't like a block that has been mined, they can\n>> all work to orphan it without any change to the protocol\n>> whatsoever.\n>> \n> \n> As was already pointed out, yes. However this requires them to\n> immediate establish a majority consensus and be absolutely sure it\n> really is the majority. You suggest an out of band mechanism for\n> that, but why is this better than using the actual consensus\n> mechanism you're trying to measure?\n> \n> \n>> Once you've changed the network such that it is no longer a\n>> machine that faithfully processes scripts\n> \n> \n> Bitcoin imposes far more rules than just execution of the\n> scripting language, many of which are entirely arbitrary and the\n> result of (controversial) human judgement, like the inflation\n> schedule. You can't claim Bitcoin implements only some kind of\n> natural law.\n> \n\nI've formulated my replies to you and this proposal in a more public\nvenue, where such discussions of existential changes to the protocol\nmore rightfully belong:\n\nhttp://bitcoinism.blogspot.com/2014/04/dirty-deals-in-smoke-filled-rooms.html\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTV/Y0AAoJECoisBQbQ4v08NcH/RfkaBAcS5eAKmwePqFuqIUN\nxJKyIWo+tyY1vPYgArCVNsYr3YM8Wc5fkpqLNxCaM7S0/UmO8YaOdiD7XJyl7bF9\nxAveyRt1mfHhx9x6hnPLYbe8WKqtjssSt6MglN8OXtf0EDO+eIxPj6Ya8OZ5YJrL\nN8SMHaDs2J+qy3Qfec9keE5dyhYLNRC6PjYPVvrRAyqFSjt/8r4Z2a4r0oqvv3Yt\nmYU1Tx+WoXMKXWY/Dwql1NLbuspZsOhPx/ncROZ5KVryCdrcW/GEIEQ6P0AIdHvT\nTKYJzh1bdRDYDmVS5z8nUG6waxJwuWPStQo7UYdg26daRUw5qPzjO9SMLLFZPCU=\n=OOck\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/4c0947ef/attachment.bin>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-04-23T17:47:47",
                "message_text_only": ">\n>\n> I've formulated my replies to you and this proposal in a more public\n> venue, where such discussions of existential changes to the protocol\n> more rightfully belong\n>\n>\nI strongly disagree.  It makes perfect sense to discuss changes here,\nfirst, where there are lots of people who understand how the system works\nat a very detailed level.\n\nAnd why do you think your blog is more public than this open, publicly\narchived mailing list???\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/94b199e3/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-23T17:49:38",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/23/2014 05:47 PM, Gavin Andresen wrote:\n> And why do you think your blog is more public than this open,\n> publicly archived mailing list???\n> \n\nNon-developers are more comfortable using social media tools. Blog\nposts can be shared, Tweeted, and commented upon using nothing more\nthan a web browser.\n\nThe barrier to participation on a mailing list is higher, and the\nvisibility is lower.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTV/0yAAoJECoisBQbQ4v0Fm8H/j0fG7s/iEQUDlV2+5mxeiBO\neoPY2gwuDSTjXc74/3olPHrL/BTGtGg90zwFmlwruUJOaW2m3xvbTD78S8e3HmCC\nfqqFKQLg+gOQYud2oiHVNW6H++QqKgSJXu4Lr87ZTkpiRGTgr5PWyhe+4sLeXxam\nInqcFmtTHiUMKlmiPj/FUaPHxYT+n+FaPuiZRUYt0Wfxcc9b1n6gEpV7r36Wh8gl\ne3rMeDwTfsj/0R4+E+oFEgPl7XBGIJWAf4Nzebuog4ABlqzm4B/RlclZ/5N3W2zZ\n6ym6dGpFwN+RuDY2/S2kah6dAeKyk2mAsAChoSOj+vfhCW9wKzclVyM2FNV6lwE=\n=djWj\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/3e5c938c/attachment.bin>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T17:57:20",
                "message_text_only": ">\n> Non-developers are more comfortable using social media tools. Blog\n> posts can be shared, Tweeted, and commented upon using nothing more\n> than a web browser.\n>\n\nI don't think Twitter is an appropriate medium for discussing the details\nof byzantine consensus algorithms.\n\nI'm not going to bother arguing in replies to a blog post. Suffice it to\nsay, miners are already handsomely compensated via both inflation and fees\nfor doing their job of preventing double spends. Your suggestion is people\nshould pay them EVEN MORE for simply not being corrupt. My proposal is\nsimpler - how about we find the ones that are claiming people's money via\ncoinbases yet not doing their jobs correctly, and take the money back (or\ndestroy it). I think I prefer that one. Miners that are maliciously double\nspending cannot justify their existence, they offer no useful service and\ndo not deserve compensation as a result.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/2ba5d5ad/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-23T18:04:49",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/23/2014 05:57 PM, Mike Hearn wrote:\n> I'm not going to bother arguing in replies to a blog post. Suffice\n> it to say, miners are already handsomely compensated via both\n> inflation and fees for doing their job of preventing double spends.\n> Your suggestion is people should pay them EVEN MORE for simply not\n> being corrupt. My proposal is simpler - how about we find the ones\n> that are claiming people's money via coinbases yet not doing their\n> jobs correctly, and take the money back (or destroy it). I think I\n> prefer that one. Miners that are maliciously double spending cannot\n> justify their existence, they offer no useful service and do not\n> deserve compensation as a result.\n> \n\n\nThe integrity of Bitcoin is more important than you and your personal\npreferences.\n\n\nYou don't have the right to decide which valid scripts in the\nblockchain will be disregarded, and neither does anyone else.\n\n\nIf you don't like what's in the blockchain, you and everybody else can\nwork within the protocol to orphan the offending block.\n\n\nBut if you fail, then what's written in the blockchain is final and\nthe sole purpose of the network is to enforce it - deal with it.\n\n\nPS: We don't even know who runs BitUndo. They seem to have lots of\nmoney to spend on web design - I wonder where it came from?\n\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTWADBAAoJECoisBQbQ4v0A/0H/25j9bvZaEqfyLJSHNh7PGwC\nTpMu0s8D94nX/ipwaOjeY1QMtnWnX9b2H/lDZSnk1rm7IXJTq1c+R/50Uqx5U9QI\noYnsKX1TiB+T5Uv0C5PaIptEMgPkcNyHwsdXyaaUcu2djB0/YhFRlWR7WCH2QyNG\n3LR5XWLGJz7v6rDxwvMXEHJWO5950bASP1xCVLc/N0PI7BoEUmeRzAoDa1mGJ9yw\nXkVUVDV03B85uTSEriBuQ49ASvv9faAhcehwRwvFFp2krVz6Ov5Jxrv7UN+B61R2\nsgZhI3vaTsyRf+8+pkp0dvSpbwwJ7ESBm+BRMPGTnV1AlwJKqjzDYHgowSe01Nw=\n=COsH\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/22a72186/attachment.bin>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-23T18:15:45",
                "message_text_only": "On Wed, Apr 23, 2014 at 06:04:49PM +0000, Justus Ranvier wrote:\n> The integrity of Bitcoin is more important than you and your personal\n> preferences.\n> \n> \n> You don't have the right to decide which valid scripts in the\n> blockchain will be disregarded, and neither does anyone else.\n> \n> \n> If you don't like what's in the blockchain, you and everybody else can\n> work within the protocol to orphan the offending block.\n> \n> \n> But if you fail, then what's written in the blockchain is final and\n> the sole purpose of the network is to enforce it - deal with it.\n\nAgreed, although I think waxwing put it better: Bitcoin's most\nfundamental property is its neutrality. If it loses this, it is not\nBitcoin.\n\nBut I also agree with Gavin that the bitcoin-development email list is a\nperfectly good place to have these types of discussions. I myself have\nused it repeatedly to publish ideas specifically due to wide readership\nand multiple independent archives.\n\n> PS: We don't even know who runs BitUndo. They seem to have lots of\n> money to spend on web design - I wonder where it came from?\n\nActually we do: Eric Springer\n\nSee\n\nhttp://www.coindesk.com/double-spending-unconfirmed-transactions-concern-bitcoin/\n\nhttps://github.com/espringe - joined Feb 11 2010\n\nAnyway that's just twitter bootstrap or something; I hear the wizards\ncan pump out a site like that in a few hours.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000004af1fb3b77c0f7ffe640982e440ac3eb085fa51d8207838\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/f0ab2011/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-23T18:20:02",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/23/2014 06:15 PM, Peter Todd wrote:\n\n> But I also agree with Gavin that the bitcoin-development email list\n> is a perfectly good place to have these types of discussions. I\n> myself have used it repeatedly to publish ideas specifically due to\n> wide readership and multiple independent archives.\n\nA development list is a great place to decide how to implement a\ntechnical feature, one that feature has been deemed desirable.\n\nThe chief scientist has a platform via which he can publicly announce\nproposed protocol changes. Anyone else could do the same.\n\nThere are conference happening all the time where people can announce\nideas like this, to give time for the community to hear the idea and\ngenerate feedback.\n\nThere is absolutely nothing so urgent about this attack that requires\nthe consensus process to start here, in a place that most Bitcoin\nusers don't even know about and wouldn't even know which search terms\nto apply to look for such a discussion if they did.\n\n>> PS: We don't even know who runs BitUndo. They seem to have lots\n>> of money to spend on web design - I wonder where it came from?\n> \n> Actually we do: Eric Springer\n> \n> See\n> \n> http://www.coindesk.com/double-spending-unconfirmed-transactions-concern-bitcoin/\n>\n>  https://github.com/espringe - joined Feb 11 2010\n> \n> Anyway that's just twitter bootstrap or something; I hear the\n> wizards can pump out a site like that in a few hours.\n> \n\nI stand corrected.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTWARRAAoJECoisBQbQ4v08kkIAKMSSCn9mBCMj6RwWHK6abud\nUlaKOAh4LNAaJ+pIQD103EGH3JE9pzeaDouupTbdIHqb8CxVO3dn9UFXdfkDW1cf\nYsOOfE0N5crfaODd+NU6jjaf5jXOgmT2ibCU3sSjmphDBMstZfrSaCljtyaj290Y\nurnW1pdL5ZA0zLAUjNO2kXSbuHaE3CTz72s4dWsiRBsQLVAD8j5C5o8gxFVeZd7s\nBa4yGtGAsd0HWikUjE2L4G/J8RzbxUrm5w31A4lawkF+SqtJcFiwoxrXX+FVdi/8\nrfAY/l0EBoRrkW+cajcj29eq1eOOIER0Zcu2FzpPc45Xywh9RCh8C3zgWitOvcI=\n=IR+Y\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/bf90e17d/attachment.bin>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T18:37:27",
                "message_text_only": "If you want to try and argue that the development list is the wrong place\nto discuss development, please do so on another thread (or your blog).\nLet's keep this thread for discussion of the original proposal - ideally,\ndiscussed with the dryness that a topic as nerdy as distributed consensus\nalgorithms deserves ;)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/249fc6b8/attachment.html>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-23T18:49:10",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/23/2014 06:37 PM, Mike Hearn wrote:\n> If you want to try and argue that the development list is the wrong\n> place to discuss development, please do so on another thread (or\n> your blog). Let's keep this thread for discussion of the original\n> proposal - ideally, discussed with the dryness that a topic as\n> nerdy as distributed consensus algorithms deserves ;)\n> \n\nIs that what you say to yourself to quiet your conscience at night\n(assuming you're one of the non-sociopathic humans who does indeed\nhave one)? It's \"just a nerdy distributed consensus problem\"?\n\nThe things you're talking about fucking around with have real life\nimplications for quite a few people and your casual dismissal of this\nis precisely why I responded in the way that I did.\n\nWhat you're doing is reckless endangerment and you're not got to get\naway with brushing it off as a mere technical detail.\n\nSunlight is the best disinfectant, and this episode is demonstrating\nto the world exactly how averse you are do that kind of transparency.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTWAsmAAoJECoisBQbQ4v0XTcIAL70+EAkSMUgvGeTN+mROkkd\n3ap5NhUYehfW33gEEEyO3a6ofrb6k1a8EbHlzDyq7qPZ925kdvbnwqXDQm7auAh1\nV8IPAwp+JfCgVDVAxtHuUBUvTuuCn1Mrxnf6ppwzFywBxU6l6KYK9zac1HoX3EVY\nQxME15zrBmtJfo9/ed9yWz8ZXl6nsx47D3r0VE8FiENJRgxLfZ7Odsr/sGvgL71N\naYPv7vMxRBNXDvrMhEuYKa3L83W5kv4JJxzueUyO/0bww/aaeZMZr850u/hUjMgU\nui37M+kiFHug3semWGKs1yJiKsEPsEPaU4j6WSDrd0bNbc73bBjvHm9SGYRHzDQ=\n=L5nX\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/a3c7daac/attachment.bin>"
            },
            {
                "author": "Drak",
                "date": "2014-04-23T19:01:58",
                "message_text_only": "Cut it out with the ad hominem attacks please. If you cant be civil, please\ngo away until you learn some manners.\n\nI think the issue being discussed is do you orphan an entire block causing\ndistress to users as well, or try to just cause distress just to the evil\nminer? This discussion is about exploring the ramifications of all these\noptions.\n\nI think you are also forgetting that, miners can implement their own\nfilters and behaviours without anyone's consent. So having an open\ndiscussion and exploring all possibilities can only be a good thing before\nsomeone goes off an implements a change without taking into account other\npoints of view they may not have considered yet.\n On 23 Apr 2014 19:51, \"Justus Ranvier\" <justusranvier at gmail.com> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> On 04/23/2014 06:37 PM, Mike Hearn wrote:\n> > If you want to try and argue that the development list is the wrong\n> > place to discuss development, please do so on another thread (or\n> > your blog). Let's keep this thread for discussion of the original\n> > proposal - ideally, discussed with the dryness that a topic as\n> > nerdy as distributed consensus algorithms deserves ;)\n> >\n>\n> Is that what you say to yourself to quiet your conscience at night\n> (assuming you're one of the non-sociopathic humans who does indeed\n> have one)? It's \"just a nerdy distributed consensus problem\"?\n>\n> The things you're talking about fucking around with have real life\n> implications for quite a few people and your casual dismissal of this\n> is precisely why I responded in the way that I did.\n>\n> What you're doing is reckless endangerment and you're not got to get\n> away with brushing it off as a mere technical detail.\n>\n> Sunlight is the best disinfectant, and this episode is demonstrating\n> to the world exactly how averse you are do that kind of transparency.\n>\n> - --\n> Support online privacy by using email encryption whenever possible.\n> Learn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v2.0.22 (GNU/Linux)\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQEcBAEBAgAGBQJTWAsmAAoJECoisBQbQ4v0XTcIAL70+EAkSMUgvGeTN+mROkkd\n> 3ap5NhUYehfW33gEEEyO3a6ofrb6k1a8EbHlzDyq7qPZ925kdvbnwqXDQm7auAh1\n> V8IPAwp+JfCgVDVAxtHuUBUvTuuCn1Mrxnf6ppwzFywBxU6l6KYK9zac1HoX3EVY\n> QxME15zrBmtJfo9/ed9yWz8ZXl6nsx47D3r0VE8FiENJRgxLfZ7Odsr/sGvgL71N\n> aYPv7vMxRBNXDvrMhEuYKa3L83W5kv4JJxzueUyO/0bww/aaeZMZr850u/hUjMgU\n> ui37M+kiFHug3semWGKs1yJiKsEPsEPaU4j6WSDrd0bNbc73bBjvHm9SGYRHzDQ=\n> =L5nX\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/1fa69efc/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-23T18:58:16",
                "message_text_only": "Bitcoin has various checks and balances that help keep everything honest.\n\nEven if a pool had 60% of the hashing power, they couldn't reverse 6 blocks\nwithout anyone noticing that it had happened.\n\nThere are sites which monitor the blocks and estimate the percentage of the\nblocks found by each pool.\n\nIn a way, bitcoin doesn't depend on the majority of miners following the\nprotocol, it depends on miners believing that a majority of the other\nminers will follow the protocol.\n\nIf a miner has 5% of the hashing power and believes that the other 95% will\nfollow the protocol, then the system should be set up so that it is in that\nminer's interests to follow the protocol too.\n\nThis is why soft forks work.  The formal process convinces all the miners\nthat the new rules are locked in.\n\nIn a system where miners can vote to cancel coinbases, each pool has an\nincentive to vote to reject everyone else's blocks.\n\nPools on the receiving end will be less profitable and lose customers.\n\nIt is possible that \"predatory\" pools would lose hashing power as miners\nswitch to other pools, in protest.\n\nThe proposal allows \"established\" pools to vote to disallow new entrants.\nThey could even justify it by saying that those pools haven't invested in\n\"anti-double spending\" infrastructure.\n\nThe proposal doesn't suddenly give the majority the ability to do it, but\nit isn't clear that making the process less disruptive is a good thing.\n\n\n\nOn Wed, Apr 23, 2014 at 7:37 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> If you want to try and argue that the development list is the wrong place\n> to discuss development, please do so on another thread (or your blog).\n> Let's keep this thread for discussion of the original proposal - ideally,\n> discussed with the dryness that a topic as nerdy as distributed consensus\n> algorithms deserves ;)\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/2d0343ba/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-23T15:04:00",
                "message_text_only": "This is outright ridiculous.\n\nZero-confirmation double-spending is a small problem, and possible\nsolutions are known. (E.g. trusted third party + multi-sig addresses for\nsmall-value transactions.)\n\nOn the other hand, protocol changes like described above might have\ngame-theoretical implications which are non-trivial and hard to understand.\n\nThe above approach works as long as the majority of hashpower is honest,\n> defined to mean, working to stop double spending. This is the same security\n> property as described in the white paper, thus this introduces no new\n> security assumptions.\n>\n\nNo. Bitcoin should work if miners are merely individually rational, i.e.\nthey try to maximize their pay-offs without colluding with others.\n\nI guess word \"honest\" might have different meanings, that can be a source\nof confusing.\n1. Honest -- not trying to destroy bitcoin\n2. Honest -- following rules which are not required by the protocol\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/65999bd2/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T15:09:39",
                "message_text_only": ">\n> No. Bitcoin should work if miners are merely individually rational, i.e.\n> they try to maximize their pay-offs without colluding with others.\n>\n\nAnd it still would. Non-collusive miners cast votes based on the outcome of\ntheir own attempts to double spend. If enough agree then they all agree\nthat the vote is binding.\n\n\n> I guess word \"honest\" might have different meanings, that can be a source\n> of confusing.\n> 1. Honest -- not trying to destroy bitcoin\n> 2. Honest -- following rules which are not required by the protocol\n>\n\nI'm using it in the same sense Satoshi used it. Honest miners work to\nprevent double spends. That's the entire justification for their existence.\nMiners that are deliberately trying to double spend are worse than useless.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/d4fe9367/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-23T15:38:21",
                "message_text_only": "> And it still would. Non-collusive miners cast votes based on the outcome\n> of their own attempts to double spend.\n>\n\nIndividually rational strategy is to vote for coinbase reallocation on\nevery block.\n\nYes, in that case nobody will get reward. It is similar to prisoner's\ndilemma: equilibrium has worst pay-off.\nIn practice that would mean that simple game-theoretic models are no longer\napplicable, as they lead to absurd results.\n\n\n> I'm using it in the same sense Satoshi used it. Honest miners work to\n> prevent double spends. That's the entire justification for their existence.\n> Miners that are deliberately trying to double spend are worse than useless.\n>\n\nMiners work to get rewards.\nIt absolutely doesn't matter whether they are deliberately trying to\ndouble-spend or not: they won't be able to double-spend without a collusion.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/94b5255c/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-04-23T16:04:13",
                "message_text_only": "It's not necessary that this \"coinbase retribution\" be either\nprofitable or risk-free for this scheme to work. I think we should\nseparate out the different layers of the proposal:\n\n1. Attacking the coinbase instead of orphaning allows for 100 blocks'\ntime for a consensus to be reached, rather than 10 minutes. This\nallows for human verification/intervention if needed (orphaning\ndecisions would almost always need to be automated, due to the short\ntimeframe). This is a useful insight, and I don't think it's been\nbrought up before.\n\n2. The original specification of how it's done (redistribution, no\ncost to voting) does seem exploitable. This can be fixed by reducing\nthe incentive (burning instead of redistributing) and/or adding a risk\nto the orphaning attempts (a vote that fails destroys X bitcoins'\nworth from each voting block's own coinbase). The incentives can be\ntailored to mirror those of orphaning a block, to reduce the risk of\nabuse. Then the only difference from orphaning are 1) More limited\nrewriting of history (only the coinbase, vs all transactions in the\nblock), and 2) More time to coordinate a response.\n\n3. This proposal may be used for things other than punishing\ndouble-spend pools. In fact it might be used to punish miners for\ndoing anything a significant percentage of hashpower dislikes (large\nOP_RETURNs, large blocks, gambling transactions, transactions banned\nby a government). But we can make the threshold higher than 51%, so\nthat this doesn't turn into a significant risk (if 75% of hashpower is\nwilling to enforce a rule, we're already likely to see it enforced\nthrough orphaning).\n\nOn Wed, Apr 23, 2014 at 11:38 AM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n>\n>>\n>> And it still would. Non-collusive miners cast votes based on the outcome\n>> of their own attempts to double spend.\n>\n>\n> Individually rational strategy is to vote for coinbase reallocation on every\n> block.\n>\n> Yes, in that case nobody will get reward. It is similar to prisoner's\n> dilemma: equilibrium has worst pay-off.\n> In practice that would mean that simple game-theoretic models are no longer\n> applicable, as they lead to absurd results.\n>\n>>\n>> I'm using it in the same sense Satoshi used it. Honest miners work to\n>> prevent double spends. That's the entire justification for their existence.\n>> Miners that are deliberately trying to double spend are worse than useless.\n>\n>\n> Miners work to get rewards.\n> It absolutely doesn't matter whether they are deliberately trying to\n> double-spend or not: they won't be able to double-spend without a collusion.\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-04-23T16:19:52",
                "message_text_only": "What is the advantage of this proposal over just orphaning the block with\ndouble spends?\n\nThere's currently a set of rules which government what constitutes a valid\nblock. Miners don't build on blocks that don't accord with those rules out\nof fear that a major won't follow and they will waste hashing power.\n\nIf there was a rule supported by the majority that considered blocks with\ndouble spends (defined in some fashion) as invalid miners wouldn't build on\nthem for the same reason they wouldn't build on a block with a coinbase\nover 25 btc, say. It seems that would accomplish the same without the other\nissues.\nOn Apr 23, 2014 12:04 PM, \"Christophe Biocca\" <christophe.biocca at gmail.com>\nwrote:\n\n> It's not necessary that this \"coinbase retribution\" be either\n> profitable or risk-free for this scheme to work. I think we should\n> separate out the different layers of the proposal:\n>\n> 1. Attacking the coinbase instead of orphaning allows for 100 blocks'\n> time for a consensus to be reached, rather than 10 minutes. This\n> allows for human verification/intervention if needed (orphaning\n> decisions would almost always need to be automated, due to the short\n> timeframe). This is a useful insight, and I don't think it's been\n> brought up before.\n>\n> 2. The original specification of how it's done (redistribution, no\n> cost to voting) does seem exploitable. This can be fixed by reducing\n> the incentive (burning instead of redistributing) and/or adding a risk\n> to the orphaning attempts (a vote that fails destroys X bitcoins'\n> worth from each voting block's own coinbase). The incentives can be\n> tailored to mirror those of orphaning a block, to reduce the risk of\n> abuse. Then the only difference from orphaning are 1) More limited\n> rewriting of history (only the coinbase, vs all transactions in the\n> block), and 2) More time to coordinate a response.\n>\n> 3. This proposal may be used for things other than punishing\n> double-spend pools. In fact it might be used to punish miners for\n> doing anything a significant percentage of hashpower dislikes (large\n> OP_RETURNs, large blocks, gambling transactions, transactions banned\n> by a government). But we can make the threshold higher than 51%, so\n> that this doesn't turn into a significant risk (if 75% of hashpower is\n> willing to enforce a rule, we're already likely to see it enforced\n> through orphaning).\n>\n> On Wed, Apr 23, 2014 at 11:38 AM, Alex Mizrahi <alex.mizrahi at gmail.com>\n> wrote:\n> >\n> >>\n> >> And it still would. Non-collusive miners cast votes based on the outcome\n> >> of their own attempts to double spend.\n> >\n> >\n> > Individually rational strategy is to vote for coinbase reallocation on\n> every\n> > block.\n> >\n> > Yes, in that case nobody will get reward. It is similar to prisoner's\n> > dilemma: equilibrium has worst pay-off.\n> > In practice that would mean that simple game-theoretic models are no\n> longer\n> > applicable, as they lead to absurd results.\n> >\n> >>\n> >> I'm using it in the same sense Satoshi used it. Honest miners work to\n> >> prevent double spends. That's the entire justification for their\n> existence.\n> >> Miners that are deliberately trying to double spend are worse than\n> useless.\n> >\n> >\n> > Miners work to get rewards.\n> > It absolutely doesn't matter whether they are deliberately trying to\n> > double-spend or not: they won't be able to double-spend without a\n> collusion.\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Start Your Social Network Today - Download eXo Platform\n> > Build your Enterprise Intranet with eXo Platform Software\n> > Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> > Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> > http://p.sf.net/sfu/ExoPlatform\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/48d8a89a/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T16:21:56",
                "message_text_only": "I think the cost to mines is the same as what's possible today, actually.\n\nConsider a group of miners who wish to do this with no changes to the rule\nset. They can coordinate out of band and figure out if they have a majority\nof hashpower behind the decision to orphan a block, e.g. by signing a nonce\nwith their coinbase keys. If they reach quorum, then they begin work on a\nparallel chain. Because they have majority they are guaranteed to\neventually win, though depending on luck it may take a while. Because of\nthis, assuming the external quorum system is public, the moment consensus\nis reached the other miners should all abandon the existing branch and\nstart work on the parallel chain too, lest they waste work mining on a\nbranch that is surely doomed.\n\nThe end result would be that the chain stops making progress, disrupting\nend users and generally creating uncertainty as the new chain is forged.\nAlso, miners who built on top of the orphaned block end up being punished\neven if they did nothing wrong. Both these side effects are undesirable and\nunnecessary.\n\nSo the more I think about this scheme, the more it seems like a simple\nimprovement on the current status quo. Miners can do what they could\nalready do, but with a more reliable in-band signalling mechanism that\ndoesn't require things like coinbase keys to be online, and them doing so\ndoes not disrupt existing users or waste energy.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/97196da4/attachment.html>"
            },
            {
                "author": "Kevin",
                "date": "2014-04-23T16:33:56",
                "message_text_only": "On 4/23/2014 12:04 PM, Christophe Biocca wrote:\n> It's not necessary that this \"coinbase retribution\" be either\n> profitable or risk-free for this scheme to work. I think we should\n> separate out the different layers of the proposal:\n>\n> 1. Attacking the coinbase instead of orphaning allows for 100 blocks'\n> time for a consensus to be reached, rather than 10 minutes. This\n> allows for human verification/intervention if needed (orphaning\n> decisions would almost always need to be automated, due to the short\n> timeframe). This is a useful insight, and I don't think it's been\n> brought up before.\n>\n> 2. The original specification of how it's done (redistribution, no\n> cost to voting) does seem exploitable. This can be fixed by reducing\n> the incentive (burning instead of redistributing) and/or adding a risk\n> to the orphaning attempts (a vote that fails destroys X bitcoins'\n> worth from each voting block's own coinbase). The incentives can be\n> tailored to mirror those of orphaning a block, to reduce the risk of\n> abuse. Then the only difference from orphaning are 1) More limited\n> rewriting of history (only the coinbase, vs all transactions in the\n> block), and 2) More time to coordinate a response.\n>\n> 3. This proposal may be used for things other than punishing\n> double-spend pools. In fact it might be used to punish miners for\n> doing anything a significant percentage of hashpower dislikes (large\n> OP_RETURNs, large blocks, gambling transactions, transactions banned\n> by a government). But we can make the threshold higher than 51%, so\n> that this doesn't turn into a significant risk (if 75% of hashpower is\n> willing to enforce a rule, we're already likely to see it enforced\n> through orphaning).\n>\n> On Wed, Apr 23, 2014 at 11:38 AM, Alex Mizrahi <alex.mizrahi at gmail.com> wrote:\n>>> And it still would. Non-collusive miners cast votes based on the outcome\n>>> of their own attempts to double spend.\n>>\n>> Individually rational strategy is to vote for coinbase reallocation on every\n>> block.\n>>\n>> Yes, in that case nobody will get reward. It is similar to prisoner's\n>> dilemma: equilibrium has worst pay-off.\n>> In practice that would mean that simple game-theoretic models are no longer\n>> applicable, as they lead to absurd results.\n>>\n>>> I'm using it in the same sense Satoshi used it. Honest miners work to\n>>> prevent double spends. That's the entire justification for their existence.\n>>> Miners that are deliberately trying to double spend are worse than useless.\n>>\n>> Miners work to get rewards.\n>> It absolutely doesn't matter whether they are deliberately trying to\n>> double-spend or not: they won't be able to double-spend without a collusion.\n>>\n>> ------------------------------------------------------------------------------\n>> Start Your Social Network Today - Download eXo Platform\n>> Build your Enterprise Intranet with eXo Platform Software\n>> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>> http://p.sf.net/sfu/ExoPlatform\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nThis all sounds verry restrictive.  Is it possible to do a \"sweep\" in \norder to \"clean up\" double spending?  Why punish miners for the sake of \npunishing them?\n\n\n-- \nKevin"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-24T11:22:24",
                "message_text_only": "On 4/23/14, Mike Hearn <mike at plan99.net> wrote:\n>> I guess word \"honest\" might have different meanings, that can be a source\n>> of confusing.\n>> 1. Honest -- not trying to destroy bitcoin\n>> 2. Honest -- following rules which are not required by the protocol\n>>\n>\n> I'm using it in the same sense Satoshi used it. Honest miners work to\n> prevent double spends. That's the entire justification for their existence.\n\nI thought the mechanism they used to prevent double-spends was proof of work.\nTherefore dishonest miners where only those who mine on top of a block\nwhich is not the longest valid chain they've seen.\nTo distinguish this definition from your own \"honest miners are those\nwho decide on double-spends by mining the transaction they saw first\"\ndefinition I propose to give another new name to the later, instead of\nchanging the definition of the former.\nSo inside the group of honest miners we have some that decide on\ntransactions based on reception times and others that simply maximize\ntheir revenue while respecting the protocol rules.\nI suggest \"stupid miners\" and \"smart miners\" respectively as more\nclear terms for what we're talking about here.\n\n> Miners that are deliberately trying to double spend are worse than useless.\n\nI completely disagree.\nMiner's proof of work makes transactions irreversible. Even if zero\nconfirmation transactions weren't possible in a replace-by-fee\nenvironment, that's very useful.\nEven if you always had to wait for transactions to be confirmed with\nsome irreversible proof of work (as described in Satoshi's\nwhitepaper), it doesn't follow that \"automatically resolves the\nBitcoin experiment as a failure\". I don't understand how can you\nconclude that.\n\nBut in fact 0 conf txs are possible *precisely* using replace-by-fee,\nas described in the \"\n0 confirmation txs using replace-by-fee and game theory\" thread. So\nthat conclusion is definitely wrong.\n\nOn your concrete proposal, it seems to me that you're trying to\nprevent double-spending without relying on proof of work, which I\nthink it impossible in the context of a truly p2p system.\nI don't think your current proposal is secure and I fear that at best\nyou will end up with an \"invite only\" transaction processing network\nlike Ripple.com has with their consensus algorithm and Unique Node\nLists: that's not really p2p.\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T11:43:20",
                "message_text_only": "On Thu, Apr 24, 2014 at 1:22 PM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> > I'm using it in the same sense Satoshi used it. Honest miners work to\n> > prevent double spends. That's the entire justification for their\n> existence.\n>\n> I thought the mechanism they used to prevent double-spends was proof of\n> work.\n> Therefore dishonest miners where only those who mine on top of a block\n> which is not the longest valid chain they've seen.\n>\n\nNo! This is a misunderstanding. The mechanism they use to prevent double\nspends is to *ignore double spends*. The blocks they created indicate the\nordering of transactions they saw and proof of work is used to arrive at a\nshared consensus ordering given the possibility that transactions arrived\nat different times.\n\nI'm continually amazed at how many people seem to see the current algorithm\nas the goal in and of itself, instead of an imperfect but workable means of\nachieving the actual goal.\n\nTo distinguish this definition from your own \"honest miners are those\n> who decide on double-spends by mining the transaction they saw first\"\n>\n\nThis definition of honesty is not my own, the one Bitcoin has always used.\nObviously if Satoshi had wanted transactions to be double spendable by fee\nin the mempool he would have made Bitcoin work that way, instead of coming\nup with the nSequence based replacement scheme instead.\n\nFirst-seen *is* a protocol rule, as much as Set-Cookie storing data in a\nbrowser is an HTTP protocol rule. The fact that auditing compliance with it\nis harder to do than some others does not make it less of a rule.\n\nI completely disagree.\n> Miner's proof of work makes transactions irreversible.\n\n\nAgain you are hopelessly confused. Miners that are trying to double spend\nare *by definition* not making transactions irreversible, they are trying\nto make transactions reversible.\n\nLook at it this way. There is no inherent reason BitUndo has to undo only\nFinney attacks. If it gets sufficient hash power it could offer undoing of\n1-confirm transactions too, right? Sure it'll mostly fail but that's\nalready a part of its business model. Sometimes it'll get two blocks in a\nrow and succeed. It's a very minor tweak to what they're doing. Would you\nargue these miners are still useful? After all, it's impossible to be\ncertain after the fact that miners built on top of the \"wrong\" block\nbecause forks occur naturally.\n\n\n> Even if you always had to wait for transactions to be confirmed with\n> some irreversible proof of work (as described in Satoshi's\n> whitepaper), it doesn't follow that \"automatically resolves the\n> Bitcoin experiment as a failure\". I don't understand how can you\n> conclude that.\n>\n\nWhat I said is, if you believe all miners are willing to double spend for a\nfee then this resolves the experiment as a failure. This is also obvious -\nif you can pay miners to go back and rewrite the chain at will, Bitcoin\ndoesn't work.\n\nConsider the incentives. Let's say all miners are \"smart\" in your\nestimation and are willing to double spend transactions for higher fees.\nBecause all miners follow this ridiculous policy, they should be willing to\nfork the chain at any point to claim the higher fee on the new tx. After\nall, although they will throw away the work they did on the previous chain,\nif the fee on the new tx is high enough to balance this then it can be\nprofitable for them to do it.\n\nBecause a double spender can afford to give nearly all of his new tx away\nin fees, this means even txns well buried in the chain can be profitably\ndouble spent: even if the double spender gets back only 10% of the\ntransferred amount, if it was a big transfer for some expensive object,\nthey still win! They got object + 10%\n\nDo you see now why your definition of honesty is completely broken?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/65f8c640/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-24T13:57:04",
                "message_text_only": "On 4/24/14, Mike Hearn <mike at plan99.net> wrote:\n> No! This is a misunderstanding. The mechanism they use to prevent double\n> spends is to *ignore double spends*. The blocks they created indicate the\n> ordering of transactions they saw and proof of work is used to arrive at a\n> shared consensus ordering given the possibility that transactions arrived\n> at different times.\n>\n> I'm continually amazed at how many people seem to see the current algorithm\n> as the goal in and of itself, instead of an imperfect but workable means of\n> achieving the actual goal.\n\nI'm not saying proof of work is the goal, the goal is still p2p\ntransaction serialization.\nAnd that's achieved through proof of work, not through \"miner's honesty\".\n\n> This definition of honesty is not my own, the one Bitcoin has always used.\n\nWhatever, let's keep calling stupid miners \"honest miners\", smart\nminers \"dishonest-by-replace-by fee miners\" and miners that do replace\nby fee and also hash on top of old blocks \"utterly dishonest miners\".\n\n> Obviously if Satoshi had wanted transactions to be double spendable by fee\n> in the mempool he would have made Bitcoin work that way, instead of coming\n> up with the nSequence based replacement scheme instead.\n\nMaybe Satoshi hadn't thought in depth about replace-by-fee when he\nwrote the code.\nWhy should we care?\nIf nSequence was a design mistake Satoshi did, should we maintain it\nto somehow honor him?\nMaybe the payment protocol shouldn't have been developed because he\nhad some weird ideas about paying to ips? Maybe we shouldn't write any\ntests because he didn't do so?\nThis persistent argument from authority is annoying.\n\n> First-seen *is* a protocol rule, as much as Set-Cookie storing data in a\n> browser is an HTTP protocol rule. The fact that auditing compliance with it\n> is harder to do than some others does not make it less of a rule.\n\nIt is not a protocol rule that validators can use to discriminate the\nlongest valid chain and therefore is not enforceable. Not even through\na softfork because miners can't know which transactions other miners\nsaw first.\nSo if it is a protocol rule, I think it shouldn't be.\n\n> Again you are hopelessly confused. Miners that are trying to double spend\n> are *by definition* not making transactions irreversible, they are trying\n> to make transactions reversible.\n\nMiners that mine on top of the longest valid chain are helping in\nmaking transactions irreversible whether they implement a first-saw or\na replace-by-fee policy.\n\n> Look at it this way. There is no inherent reason BitUndo has to undo only\n> Finney attacks. If it gets sufficient hash power it could offer undoing of\n> 1-confirm transactions too, right? Sure it'll mostly fail but that's\n> already a part of its business model. Sometimes it'll get two blocks in a\n> row and succeed. It's a very minor tweak to what they're doing. Would you\n> argue these miners are still useful? After all, it's impossible to be\n> certain after the fact that miners built on top of the \"wrong\" block\n> because forks occur naturally.\n\nThat's not what I'm saying. Miners that don't mine on top of the\nlongest chain are dishonest by my own definition as well.\nYou want to equate replace-by-fee \"dishonesty\" with\ntrying-to-rewrite-history dishonesty by saying that the transactions\nthat \"have been seen\" in the network are already history and that's\nwhere we disagree. I think only what's in the chain is history and I\nalso think that's the whole point of proof of work.\nAnd I also disagree that all the people who think this way are\n\"hopelessly confused\". We may be confused, but I think there's always\nhope for removing confusions provided that there's will to learn,\nwhich I think it is at least my case.\n\n> What I said is, if you believe all miners are willing to double spend for a\n> fee then this resolves the experiment as a failure. This is also obvious -\n> if you can pay miners to go back and rewrite the chain at will, Bitcoin\n> doesn't work.\n\nThis is in fact quite polemic and thus obviously not obvious.\nBitcoin works because rewriting the chain gets exponentially more\nexpensive as time passes.\n\n> Because all miners follow this ridiculous policy, they should be willing to\n> fork the chain at any point to claim the higher fee on the new tx. After\n> ...\n>\n> Do you see now why your definition of honesty is completely broken?\n\nI see now that I may have not properly expressed myself in the earlier\npost since you clearly misunderstood what I meant by \"smart miners\".\nBy that I mean miners implementing replace-by-fee and\nchild-pays-for-parent policies Not miners trying to rewrite history,\nwhich I agree is about as smart as mining on top of orphan blocks."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T14:28:54",
                "message_text_only": ">\n> And that's achieved through proof of work, not through \"miner's honesty\".\n>\n\nYou can't disentangle the two. Proof of work just makes a block chain hard\nto tamper with. What it contains is arbitrary. Honest miners build a block\nchain that's intended to stop double spending. Dishonest miners don't.\nThey're both engaging in proof of work, to different ends.\n\n\n> Whatever, let's keep calling stupid miners \"honest miners\"\n>\n\nNo, let's not. Your definition of \"smart miner\" is one I'd called \"stupid\nminer\" (or possibly \"short bitcoin miner\"). They are miners who would\nreduce the value of their coins, by making their own system less useful.\nThat's not smart, that's simply short termism taken to an extreme, sort of\nlike a business owner who puts so much pressure on his employees they all\nquit. He might have gained a bit more profit in the short term, but only at\nthe cost of destroying his business that would have given lower but\nsustainable returns over the long term.\n\n\n> This persistent argument from authority is annoying.\n>\n\nPeter always says this too, but it's again an incorrect position. This is\nnot an argument from authority.\n\nWhy are we here? We are here because we were brought together by shared\ngoals.\n\nWhat are those goals? They were defined at the start of the project by the\ncreator of the project.\n\nWhy do we issue 21 million coins and not 42? Because 21 million is the goal\neveryone signed up for.\n\nWhy did everyone sign up for 21 million coins? Because that's what Satoshi\npicked.\n\n\nIf someone asked us to change from 21 to 42 million coins, we'd probably\nsay no and the justification would be that this is the number we started\nwith. That's not \"argument from authority\", it's just recognition that the\nparameters of a shared project has to be defined somehow, and for Bitcoin\nit was defined at the start.\n\nNow the argument Gregory makes is that changing the block chain algorithm\nin this way would be a violation of the social contract. This is a generic\noutcome to be legitimately worried about - we don't want to change what\nBitcoin is in ways that would dismay its users. That just leads to a fork.\n\nI argue that this isn't such a change because it makes nothing possible\nthat was previously impossible, it just makes it less disruptive, and the\n*actual* shared goal of Bitcoin is not \"preserve the block chain algorithm\nexactly as found in v0.1\" but rather \"stop double spending\".\n\nYou are arguing elsewhere that Bitcoin should allow double spending for a\nfee. That *would* be a clear violation of the social contract!\n\n\n> That's not what I'm saying. Miners that don't mine on top of the\n> longest chain are dishonest by my own definition as well.\n>\n\nRight, but I don't accept this definition of honesty. That's not a\ndefinition any man on the street would use:\n\n    \"If you pay for something with forged bank notes and walk out\nimmediately, you are honest. But if you pay for something with forged bank\nnotes and hang around for longer than 10 minutes, you are dishonest\"\n\nThat would sound silly to anyone because what's so special about 10\nminutes? It's the act of passing counterfeit money and stealing from the\nmerchant that's the dishonest act, how long it takes is irrelevant.\n\nIn Bitcoin, the dishonest act by the user is signing for the same output\ntwice (ignoring special protocols here), and the dishonest act by the miner\nis deviating from normal behaviour for a fee to try and trick the recipient\ninto believing they have been paid. The exact details are something\ncomputer scientists care about, but the average Bitcoin user would not.\n\n\n> And I also disagree that all the people who think this way are\n> \"hopelessly confused\". We may be confused, but I think there's always\n> hope for removing confusions provided that there's will to learn,\n> which I think it is at least my case.\n>\n\nIndeed and that's why we have these threads! These are fundamental issues\nthat simply must be debated.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/77b3e511/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-24T15:37:22",
                "message_text_only": "On 4/24/14, Mike Hearn <mike at plan99.net> wrote:\n> You can't disentangle the two. Proof of work just makes a block chain hard\n> to tamper with. What it contains is arbitrary. Honest miners build a block\n> chain that's intended to stop double spending. Dishonest miners don't.\n> They're both engaging in proof of work, to different ends.\n\nYes, you can disentangle replace-by-fee policies from \"rewriting\nhistory\" attacks.\nThat's exactly what I'm saying.\nProof of work is the most important thing that makes the blockchain\nhard to tamper with.\n\n>> Whatever, let's keep calling stupid miners \"honest miners\"\n>>\n>\n> No, let's not. Your definition of \"smart miner\" is one I'd called \"stupid\n> miner\" (or possibly \"short bitcoin miner\"). They are miners who would\n> reduce the value of their coins, by making their own system less useful.\n> That's not smart, that's simply short termism taken to an extreme, sort of\n> like a business owner who puts so much pressure on his employees they all\n> quit. He might have gained a bit more profit in the short term, but only at\n> the cost of destroying his business that would have given lower but\n> sustainable returns over the long term.\n\nWhatever, pick the terms yourself but let's just stick to the same ones, please.\nI've read this argument before, but I simply don't buy it because I\ndisagree with the premise that replace-by-fee reduces the value of the\ncoins (not to mention we shouldn't assume miners stock coins for\nlong).\nI think replace-by-fee policies are actually an improvement over\nfirst-saw-first-included policies.\n\n>> This persistent argument from authority is annoying.\n>>\n>\n> Peter always says this too, but it's again an incorrect position. This is\n> not an argument from authority.\n\nI don't know about other occasions with other people but what you just\nused with me was an argument from authority fallacy. Now you're using\na false analogy to try to convince us you didn't.\n\nIf I was saying \"we should change the maximum from 21 M to 100 M\nbecause mining subsidies could continue for longer\".\n\"Mining subsidies aren't necessarily a good thing\" or\n\"That's no justification for a hardfork\" or\n\"That could destroy people's confidence in the currency\"\nwould be logical arguments.\n\n\"No, because Satoshi picked 21 M\" would be an argument from authority fallacy.\n\n>> That's not what I'm saying. Miners that don't mine on top of the\n>> longest chain are dishonest by my own definition as well.\n>>\n>\n> Right, but I don't accept this definition of honesty. That's not a\n> definition any man on the street would use:\n\nWhatever let's use whatever definitions you want, if I don't like your\ndefinition of honesty I will just invent a new term to define my own.\n\n>     \"If you pay for something with forged bank notes and walk out\n> immediately, you are honest. But if you pay for something with forged bank\n> notes and hang around for longer than 10 minutes, you are dishonest\"\n\nSorry, I don't see the analogy.\n\n> That would sound silly to anyone because what's so special about 10\n> minutes? It's the act of passing counterfeit money and stealing from the\n> merchant that's the dishonest act, how long it takes is irrelevant.\n\n10 minutes is what Satoshi picked. Just kidding...\n\n> In Bitcoin, the dishonest act by the user is signing for the same output\n> twice (ignoring special protocols here), and the dishonest act by the miner\n> is deviating from normal behaviour for a fee to try and trick the recipient\n> into believing they have been paid. The exact details are something\n> computer scientists care about, but the average Bitcoin user would not.\n\nPeople need to understand that Bitcoin transactions are not instant.\nFor instants transactions you need to rely somehow on trust, use some\ntrust-less offchain mechanism or use a payment protocol that would\nmake double-spending irrational (like the one described in the other\nthread that uses replace-by-fee).\nSo I think miner's default behavior should be replace-by-fee. But that\ndoesn't imply that I want miners to rewrite pow-validated history."
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-24T17:07:34",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/24/2014 03:37 PM, Jorge Tim\u00f3n wrote:\n\n\nThe 21 million bitcoin limit is not important because of its exact\nvalue, nor is it important because Satoshi picked it.\n\nThe 21 million limit is important because users hold bitcoin based on\nthe promise that the block reward will never be adjusted ex post\nfacto. The behavior users are relying on is \"The bitcoins you hold are\nforever a calculable fraction of all the bitcoins that will ever be\nissued.\"\n\nThat's what bitcoin holders agreed to, and that's what can never be\nchanged.\n\nThe fact that the number is arbitrary is not relevant. We can agree to\nmeet for lunch at some arbitrarily chosen time, and the fact that the\ntime was chosen arbitrary in no way means that one party arbitrarily\nchoosing not to show up doesn't break the agreement.\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTWUTWAAoJECoisBQbQ4v0JiwIALQtf4GrNaIdEidJr+f3z8G3\nsmDgU5xXhN4+1Eo5xU/ZmQy03tU5E00/PRiMTHz1RNXeO+w/iu4PlAJN7pk5oy75\nQzDtaCzDjKMCN+1PCQ5VNCL04ws8JifU6QLxSgXgsShBnv19FlxiejgvjNWg+Lzc\nuHxyP0PlvfF5BWTiEV68KYcfQPbamOH7Vb8v4tQ4/j/ioA7mYso+Q0jX0Y4ae1FN\nXNs4KnTsIFTsXWzBIYFlFPwQ5d+mdG84W7FpmwwcXaRWQxMwdJq8QjlUuFng439B\n6OgQqtq4wmvwoPjKS5nOesfdrdH9Scx2zg6uwhaY0zKMtPW/CEzzLFUfq+cZ6q0=\n=r+t0\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21191 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/6283c3e0/attachment.bin>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-25T04:31:05",
                "message_text_only": "On 25/04/14 00:28, Mike Hearn wrote:\n> Why are we here? We are here because we were brought together by shared\n> goals.\n> \n> What are those goals? They were defined at the start of the project by\n> the creator of the project.\n> \n> Why do we issue 21 million coins and not 42? Because 21 million is the\n> goal everyone signed up for.\n\nMike: the blockchain is a public document, with a very public and well\ndefined interpretation, which we've all signed up for too.\n\nWhat's the point of piling PoW on top of some data to make it difficult\nto modify if the interpretation itself is open to modification?\n\nThere is an important distinction to draw between a hard fork via a\nchange in block validation rules, and a hard fork via a change in the\n/interpretation of the blockchain itself/.\n\nBitcoin validates data /before/ it makes it into a block; we can all be\nconfident that, short of a reorg, /if it's in a block, it's the law/. As\nmuch as the 21m cap is the law anyway.\n\nProving that you can convince the economic majority that the\ninterpretation of existing blocks is in any way up for grabs would set a\ndangerous precedent, and shake some people's faith in Bitcoin's overall\nrobustness and security (well, mine anyway.)\n\nMy 2 bits.\n\n-Gareth\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/864fe1bb/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-25T10:17:34",
                "message_text_only": ">\n> Proving that you can convince the economic majority that the\n>\ninterpretation of existing blocks is in any way up for grabs would set a\n> dangerous precedent, and shake some people's faith in Bitcoin's overall\n> robustness and security (well, mine anyway.)\n\n\nHmm, then I think your faith needs to be shaken. Bitcoin  is money, and\nmoney is a purely artificial social construct. The interpretation of what a\nbitcoin means, or what a dollar means, has always been and always will be a\nhuman decision taken in order to achieve some socially useful goal. How\ncould it be any other way? Do you want humanity to be enslaved by its own\nmoney?\n\nThis notion that the block chain encodes some kind of natural, immovable\nlaw that's above human judgement is a very strange one to me - I guess it\ncomes from the fact that encryption *is* based on some kind of natural law.\nWithout the key you can't decrypt a message no matter how strong the\nconsensus is. But Bitcoin doesn't use encryption anywhere, just digital\nsignatures. The only thing approaching natural law, that stops majority\nconsensus controlling everything, is lack of information. Hence all the\ndiscussion around privacy and anonymity that goes on all the time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/49fa90a7/attachment.html>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-25T13:19:58",
                "message_text_only": "On 25/04/14 20:17, Mike Hearn wrote:\n>     Proving that you can convince the economic majority that the\n> \n>     interpretation of existing blocks is in any way up for grabs would set a\n>     dangerous precedent, and shake some people's faith in Bitcoin's overall\n>     robustness and security (well, mine anyway.)\n> \n> \n> Hmm, then I think your faith needs to be shaken. Bitcoin  is money, and\n> money is a purely artificial social construct. The interpretation of\n> what a bitcoin means, or what a dollar means, has always been and always\n> will be a human decision taken in order to achieve some socially useful\n> goal. \n\nMy argument does not concern what a bitcoin means, just what data in the\nblockchain means. People are free to value an individual bitcoin however\nthey like. But it's useful if we all agree on a standard that defines\nwho owns them - ie. the protocol as described in Satoshi's whitepaper. I\nrecognise that your ability to provide a valid scriptSig for /any\nexisting UTXO in the blockchain/ as proof of your ownership of the\ncorresponding bitcoin. You want to pick and choose which UTXO (well,\ncoinbase; same diff) you consider valid and spendable /after they've\nbecome part of the blockchain/, regardless of the fact they're buried\nunder PoW.\n\nAs an illustration, consider Counterparty - an altcoin whose TXns are\nembedded as unvalidated data in the bitcoin blockchain. A lot of people\nimagine that an XCP transaction buried under 100 blocks and a BTC\ntransaction buried under the same 100 blocks are equally secure. You\ntell me: are they? It's the same PoW chain after all.\n\nHell no they're not! The way Counterparty interprets that data in the\nblockchain is anything but stable or well documented. On more than one\noccasion they've gone \"whoops, found a bug that caused some transactions\nto occur that we don't consider valid - we'll just fix that.\" A suddenly\nthe reference client doesn't consider the XCP in your wallet valid\nanymore - they just magically disappear - because the parent of the TXn\nthat paid you was actually invalid. Nobody rewrote history via PoW; they\nsimply tweaked their interpretation of the existing history.\n\nWhen you have a *bitcoin* TXn buried under 100 blocks you can be damn\nsure that money is yours - but only because the rules for interpreting\ndata in the blockchain are publicly documented and (hopefully)\nimmutable. If they're mutable then the PoW alone gives me no confidence\nthat the money is really mine, and we're left with a much less useful\nsystem. This should be more sacred than the 21m limit.\n\n\n\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/e6f0b788/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-25T15:28:15",
                "message_text_only": ">\n> When you have a *bitcoin* TXn buried under 100 blocks you can be damn\n>\nsure that money is yours - but only because the rules for interpreting\n> data in the blockchain are publicly documented and (hopefully)\n> immutable. If they're mutable then the PoW alone gives me no confidence\n> that the money is really mine, and we're left with a much less useful\n> system. This should be more sacred than the 21m limit.\n\n\nWell, I think we should avoid the term \"sacred\" - nothing is sacred because\nwe're not building a religion here, we're engineering a tool.\n\nConsider a world in which 1 satoshi is too valuable to represent some kinds\nof transactions, so those transactions stop happening even though we all\nagree they're useful. The obvious solution is to change the rules so there\ncan be 210 million coins and 10x everyones UTXOs at some pre-agreed flag\nday. We probably wouldn't phrase it like that, it's easier for people to\nimagine what's happening if it's phrased as \"adding more places after the\ndecimal point\" or something, but at the protocol level coins are\nrepresented using integers, so it'd have to be implemented as a multiply.\n\nWould this be a violation of the social contract? A violation of all that\nis sacred? I don't think so, it'd just be sensible engineering and there'd\nbe strong consensus for that exactly because 21 million *is* so arbitrary.\nIf all balances and prices multiply 100-fold overnight, no wealth is\nreallocated which would be the *actual* violation of the social\ncontract: we just get more resolution for setting prices.\n\nSo. The thing that protects your money from confiscation is not proof of\nwork. PoW is just a database synchronisation mechanism. The thing that\nprotects your money from confiscation is a strong group consensus that\ntheft is bad. But that's a social rule, not a mathematical rule.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/4c07030d/attachment.html>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-26T12:15:19",
                "message_text_only": "On 26/04/14 01:28, Mike Hearn wrote:\n>     When you have a *bitcoin* TXn buried under 100 blocks you can be damn\n> \n>     sure that money is yours - but only because the rules for interpreting\n>     data in the blockchain are publicly documented and (hopefully)\n>     immutable. If they're mutable then the PoW alone gives me no confidence\n>     that the money is really mine, and we're left with a much less useful\n>     system. This should be more sacred than the 21m limit.\n> \n> \n> Well, I think we should avoid the term \"sacred\" - nothing is sacred\n> because we're not building a religion here, we're engineering a tool.\n\nAre you sure there isn't room for just a touch of \"religion\"? :) As you\nstate below, all that protects my money from confiscation is strong\ngroup consensus that it's mine - \"a social rule, not a mathematical one.\"\n\nEverything ultimately balances on that. People being a little bit\n\"religious\" about following the protocol faithfully are the linchpin of\nBitcoin security, not PoW.\n\n\n> Consider a world in which 1 satoshi is too valuable to represent some\n> kinds of transactions, so those transactions stop happening even though\n> we all agree they're useful. The obvious solution is to change the rules\n> so there can be 210 million coins and 10x everyones UTXOs at some\n> pre-agreed flag day. We probably wouldn't phrase it like that, it's\n> easier for people to imagine what's happening if it's phrased as \"adding\n> more places after the decimal point\" or something, but at the protocol\n> level coins are represented using integers, so it'd have to be\n> implemented as a multiply.\n\nAgree.\n\n\n> Would this be a violation of the social contract? A violation of all\n> that is sacred? I don't think so, it'd just be sensible engineering and\n> there'd be strong consensus for that exactly because 21 million /is/ so\n> arbitrary. If all balances and prices multiply 100-fold overnight, no\n> wealth is reallocated which would be the /actual/ violation of the\n> social contract: we just get more resolution for setting prices.\n\nWholeheartedly agree. \"21 million\" is just shorthand for the\npreservation of artificial scarcity. No rational person could argue that\nwhat you described violates the social contract.\n\nI do see what you're driving at - that there exists a situation where it\nwould be justified to change the interpretation of data in existing blocks.\n\nBut, please consider: if I controlled a single UTXO worth 1% of the\ntotal money supply before your change, the network would still recognise\nthat I control a single UTXO worth 1% of the total money supply after\nyour change. So you haven't really changed the interpretation of\nexisting blocks at all there. It's just semantics :)\n\nContrast this with invalidating a coinbase before maturity, which\nclearly has a very real impact. At the point the vote passes, you're ***\nsidestepping the PoW mechanism and rewriting the meaning of an existing,\nvalidated block ***.\n\n\n> So. The thing that protects your money from confiscation is not proof of\n> work. PoW is just a database synchronisation mechanism. The thing that\n> protects your money from confiscation is a strong group consensus that\n> theft is bad. But that's a social rule, not a mathematical rule.\n\nAgree. That's my whole point :)\n\nI recognise my security is in the hands of the users (the economic\nmajority.) Tomorrow they could all decide to patch their nodes to\nreallocate my UTXOs, and there's not a damn thing I could do about it,\nPoW and private keys notwithstanding. I must simply trust that they will\nnot do this.\n\nSo we can have:\n1. \"Neutral Bitcoin\", where everyone is committed to prevention of theft\nby following a simple set of mathematical rules which treat all\nvalidated blocks as equal.\nOr:\n2. \"Political Bitcoin\", where everyone is committed to prevention of\ntheft based on human judgements, and the contents of some validated\nblocks are more equal than others.\n\nI recognise that the latter allows for a lot of flexibility in combating\nfraud, but with (substantial) due respect, it isn't Bitcoin.\n\n-Gareth\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/c5fcc01b/attachment.sig>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-04-27T01:42:55",
                "message_text_only": "This seems like splitting hairs, no? A block isn't a guarantee (it can\nget orphaned). And as a user of bitcoin (as opposed to a miner), this\nchange cannot affect any payment you ever receive.\n\nSome of the interpretation is already different for coinbase UTXO's\n(need a valid height, locked for 100 blocks). Anyone expecting them to\nbehave like any other UTXO will get bitten by one of those subtleties\n(MtGox's withdrawals had issues with exactly this, IIRC).\n\nOn Sat, Apr 26, 2014 at 8:15 AM, Gareth Williams <gacrux at gmail.com> wrote:\n> On 26/04/14 01:28, Mike Hearn wrote:\n>>     When you have a *bitcoin* TXn buried under 100 blocks you can be damn\n>>\n>>     sure that money is yours - but only because the rules for interpreting\n>>     data in the blockchain are publicly documented and (hopefully)\n>>     immutable. If they're mutable then the PoW alone gives me no confidence\n>>     that the money is really mine, and we're left with a much less useful\n>>     system. This should be more sacred than the 21m limit.\n>>\n>>\n>> Well, I think we should avoid the term \"sacred\" - nothing is sacred\n>> because we're not building a religion here, we're engineering a tool.\n>\n> Are you sure there isn't room for just a touch of \"religion\"? :) As you\n> state below, all that protects my money from confiscation is strong\n> group consensus that it's mine - \"a social rule, not a mathematical one.\"\n>\n> Everything ultimately balances on that. People being a little bit\n> \"religious\" about following the protocol faithfully are the linchpin of\n> Bitcoin security, not PoW.\n>\n>\n>> Consider a world in which 1 satoshi is too valuable to represent some\n>> kinds of transactions, so those transactions stop happening even though\n>> we all agree they're useful. The obvious solution is to change the rules\n>> so there can be 210 million coins and 10x everyones UTXOs at some\n>> pre-agreed flag day. We probably wouldn't phrase it like that, it's\n>> easier for people to imagine what's happening if it's phrased as \"adding\n>> more places after the decimal point\" or something, but at the protocol\n>> level coins are represented using integers, so it'd have to be\n>> implemented as a multiply.\n>\n> Agree.\n>\n>\n>> Would this be a violation of the social contract? A violation of all\n>> that is sacred? I don't think so, it'd just be sensible engineering and\n>> there'd be strong consensus for that exactly because 21 million /is/ so\n>> arbitrary. If all balances and prices multiply 100-fold overnight, no\n>> wealth is reallocated which would be the /actual/ violation of the\n>> social contract: we just get more resolution for setting prices.\n>\n> Wholeheartedly agree. \"21 million\" is just shorthand for the\n> preservation of artificial scarcity. No rational person could argue that\n> what you described violates the social contract.\n>\n> I do see what you're driving at - that there exists a situation where it\n> would be justified to change the interpretation of data in existing blocks.\n>\n> But, please consider: if I controlled a single UTXO worth 1% of the\n> total money supply before your change, the network would still recognise\n> that I control a single UTXO worth 1% of the total money supply after\n> your change. So you haven't really changed the interpretation of\n> existing blocks at all there. It's just semantics :)\n>\n> Contrast this with invalidating a coinbase before maturity, which\n> clearly has a very real impact. At the point the vote passes, you're ***\n> sidestepping the PoW mechanism and rewriting the meaning of an existing,\n> validated block ***.\n>\n>\n>> So. The thing that protects your money from confiscation is not proof of\n>> work. PoW is just a database synchronisation mechanism. The thing that\n>> protects your money from confiscation is a strong group consensus that\n>> theft is bad. But that's a social rule, not a mathematical rule.\n>\n> Agree. That's my whole point :)\n>\n> I recognise my security is in the hands of the users (the economic\n> majority.) Tomorrow they could all decide to patch their nodes to\n> reallocate my UTXOs, and there's not a damn thing I could do about it,\n> PoW and private keys notwithstanding. I must simply trust that they will\n> not do this.\n>\n> So we can have:\n> 1. \"Neutral Bitcoin\", where everyone is committed to prevention of theft\n> by following a simple set of mathematical rules which treat all\n> validated blocks as equal.\n> Or:\n> 2. \"Political Bitcoin\", where everyone is committed to prevention of\n> theft based on human judgements, and the contents of some validated\n> blocks are more equal than others.\n>\n> I recognise that the latter allows for a lot of flexibility in combating\n> fraud, but with (substantial) due respect, it isn't Bitcoin.\n>\n> -Gareth\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-27T12:53:08",
                "message_text_only": "On 27/04/14 11:42, Christophe Biocca wrote:> This seems like splitting\nhairs, no? A block isn't a guarantee (it can\n> get orphaned). And as a user of bitcoin (as opposed to a miner), this\n> change cannot affect any payment you ever receive.\n\nDisagree. Maybe we just have a fundamental disagreement about what\nBitcoin is? :)\n\nBitcoin is this perfect /trustless/ mathematical machine, built - most\nunfortunately - upon a foundation of mushy humans.\n\nWe depend specifically upon these three assumptions:\n1. >50% of hashpower will not cooperate to rewrite history\n2. the economic majority will not cooperate to reinterpret history\n3. enough people believe in the illusion of artificial scarcity to give\nit real value\n\nGiven that the above hold, from there up the system operates completely\ntrustlessly, with predictable security parameters. (Of course a block\nisn't a guarantee of anything, but I know the probability that you can\ncause a re-org from depth N with X% hashpower, which allows me to reason\nabout security.)\n\nNow, some people on this thread might point to the above 3 points and\nsay \"that isn't really a trustless system, it's a democratic system.\"\nAnd then advocate that we can do without assumption 2, replacing it with:\n2. the economic majority will not cooperate to reinterpret history\nagainst any good guys, only against bad guys; \"please trust their good\njudgement.\"\n\nThat moves us away from a pure trustless system built upon a small\ndemocratic foundation (as something of a necessary evil in an imperfect\nworld where humans run our computers and use our system) and toward a\n\"democratic system\".\n\nYou don't have to agree, but I hope you can understand the point I'm\nmaking :-) It's a fundamental shift in the nature of the system, and to\nsome people a violation of the social contract. Definitely not splitting\nhairs.\n\nI feel I've now consumed rather more bytes of everyone's inboxes than I\nought to have with this topic. I appreciate you and Mike taking the time\nto reply to a newbie/lurker.\n\n-Gareth\n\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140427/421557d1/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-27T14:31:05",
                "message_text_only": ">\n> That moves us away from a pure trustless system built upon a small\n> democratic foundation (as something of a necessary evil in an imperfect\n> world where humans run our computers and use our system) and toward a\n> \"democratic system\".\n>\n> You don't have to agree, but I hope you can understand the point I'm\n> making :-)\n\n\nYep, your point is well made.\n\nI don't have much more to say about this proposal specifically, but I think\nthis whole question of what changes are OK and what would be a violation of\nthe social contract will get discussed endlessly over the coming years. Put\nanother way, what do Bitcoin's users expect and want - a system that\nevolves or a system that remains exactly as they found it? There will be\ngood arguments on both sides, and the answer will probably be different on\na case by case basis. But personally I'm skeptical of any argument that\nargues against change for its own sake. It has to be an argument rooted in\na careful analysis of costs and benefits.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140427/acb15bfc/attachment.html>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-27T23:10:43",
                "message_text_only": "Agreed. I'm a pragmatist, certainly not anti-change (or even anti-zero-conf.) Useful and non-controversial hard forks don't keep me awake at night :) I support your general position on zero-conf payments (that they're useful and we should make them as reliable as practical.)\n\nBut the very essence of Bitcoin, to me, is trustlessness. Satoshi's great invention isn't just another payment network - it's /ecash/. Bearer-negotiable, whoever-controls-the-private-keys-owns-it, **ecash**.\n\nIf not that, what do you think it is? :-)\n\nI like trustless systems for purely pragmatic, cost-benefit reasons. They allow us to avoid all the costs associated with imperfect humans, while reaping the benefits of reliability and predictability :P\n\n\nOn 28 April 2014 12:31:05 AM AEST, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> That moves us away from a pure trustless system built upon a small\n>> democratic foundation (as something of a necessary evil in an\n>imperfect\n>> world where humans run our computers and use our system) and toward a\n>> \"democratic system\".\n>>\n>> You don't have to agree, but I hope you can understand the point I'm\n>> making :-)\n>\n>\n>Yep, your point is well made.\n>\n>I don't have much more to say about this proposal specifically, but I\n>think\n>this whole question of what changes are OK and what would be a\n>violation of\n>the social contract will get discussed endlessly over the coming years.\n>Put\n>another way, what do Bitcoin's users expect and want - a system that\n>evolves or a system that remains exactly as they found it? There will\n>be\n>good arguments on both sides, and the answer will probably be different\n>on\n>a case by case basis. But personally I'm skeptical of any argument that\n>argues against change for its own sake. It has to be an argument rooted\n>in\n>a careful analysis of costs and benefits.\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity."
            },
            {
                "author": "Adam Back",
                "date": "2014-04-28T21:41:02",
                "message_text_only": "On Sun, Apr 27, 2014 at 10:53:08PM +1000, Gareth Williams wrote:\n>Bitcoin is this perfect /trustless/ mathematical machine [...]\n>\n>2. the economic majority will not cooperate to reinterpret history\n>\n> [this proposal was...] replacing it with:\n> \n>2. the economic majority will not cooperate to reinterpret history\n>against any good guys, only against bad guys; \"please trust their good\n>judgement.\"\n\nNicely put.\n\nI agree the idea of a populist vote to redistribute or remove mining reward\nis an inelegant thing which would probably devolve into politics.\n\nI think the reason that it would likely work out badly is that its not\nprovable, and so no consensus rule can be constructed requiring proof, so\nthen it risks devolving to a political decision.  \n\nStep 1: Finney attackers for hire anonymize their blocks (publish via Tor,\nuse a different reward address for each block, and each pool miner). \nDemanding identification of blocks is generally undesirable for the\nobjective of avoiding centralization and policy abuse.  Dont even think\nabout demanding identity, there is no identity in a distributed system.\n\nStep 2: people send tracer payments through Finney attackers, and use that\nevidence to decide to vote away their reward.  (However the proof is\nnon-transitive so people can vote anyway they like for any reason).\n\nStep 3: Finney attackers vote down other pools to make the point.\n\nAdam"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-29T14:13:28",
                "message_text_only": "I do think we need to move beyond this idea of Bitcoin being some kind of\nelegant embodiment of natural mathematical law. It just ain't so.\n\nEvery time miners and nodes ignore a block that creates >formula() coins\nthat's a majority vote on a controversial political matter, as evidenced by\nthe disagreement with mainstream economics and that it's one of the most\ncommon things for alt coins to change. Indeed Satoshi's chosen inflation\nformula is a highly political statement on the value of inflation - he\ncould have programmed Bitcoin to inflate forever and avoided a whole area\nof politics, but he chose not to.\n\nSo please, let's agree to accept that Bitcoin is ultimately just a piece of\nsoftware that encodes rules helping us run our little community in some\nspecific ways. It's not physics and we should believe our own hype by\npretending it is.\n\nOn Mon, Apr 28, 2014 at 11:41 PM, Adam Back <adam at cypherspace.org> wrote:\n\n> I think the reason that it would likely work out badly is that its not\n> provable, and so no consensus rule can be constructed requiring proof, so\n> then it risks devolving to a political decision.\n>\n\nIt's the other way around. If miners decide to fork the chain then that\nleaves no proof (beyond the old blocks, which could have been a natural\nfork - there's no way to know - and nodes don't want to keep them around\nanyway). If they explicitly vote to get the same effect but without\nactually forking, it leaves a proof in the form of the votes in the\ncoinbase that can be seen afterwards.\n\n\n> Step 3: Finney attackers vote down other pools to make the point.\n\n\nIt only works if the majority of hashpower is controlled by attackers, in\nwhich case Bitcoin is already doomed. So it doesn't matter at that point.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140429/d34bb0b1/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-29T14:21:34",
                "message_text_only": "On Tue, Apr 29, 2014 at 7:13 AM, Mike Hearn <mike at plan99.net> wrote:\n> It only works if the majority of hashpower is controlled by attackers, in\n> which case Bitcoin is already doomed. So it doesn't matter at that point.\n\nThese parties wouldn't generally consider themselves attackers\u2014 nor\nwould many users (presumably everyone who mines on ghash.io, for\nexample)\u2014 rather they'd they may consider someone using hashpower\nvoting to reassign coins to be an attacker, and reassigning their\ncoins instead to be a morally justified and pragmatic response.\n\nI think we're capable here of discussing the specifics without needing\nto use generalizations which invite definitional arguments... I don't\nthink that bombastic language like doomed helps the dialog."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-29T14:26:01",
                "message_text_only": ">\n> These parties wouldn't generally consider themselves attackers\n>\n\nOf course not, attackers rarely do :)\n\nBut they are miners who are taking part in malicious double spending. That\nmakes them attackers. If miners don't exist to stop double spending, what\ndo they exist for?\n\nI mean, this is fundamental. What do you think miners exist for?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140429/b3dcfb3b/attachment.html>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-30T13:12:30",
                "message_text_only": "On 30/04/14 00:26, Mike Hearn wrote:\n>     These parties wouldn't generally consider themselves attackers\n> \n> \n> Of course not, attackers rarely do :)\n\nIf Bitcoin works correctly nobody should have to care if they consider\nthemselves attackers, defenders, or little green men from Mars. There\nare simply nodes that follow the protocol, and nodes that do not.\n\nThe fact that you even need to think about who should and should not be\nconsidered an attacker, in the context of your proposed change, should\nbe ringing alarm bells :)\n\n\n> What do you think miners exist for?\n\nOrdering transactions.\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140430/e5d8bcd3/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-30T13:55:56",
                "message_text_only": "I think we're going around in circles here so this will be my last message\non the thread unless someone comes up with something new.\n\nOn Wed, Apr 30, 2014 at 3:12 PM, Gareth Williams <gacrux at gmail.com> wrote:\n\n> If Bitcoin works correctly nobody should have to care if they consider\n> themselves attackers, defenders, or little green men from Mars.\n\n\nOne last time, I request that people read the white paper from 2008 before\nmaking statements like this. If the notion of attacker was irrelevant to\nBitcoin, it would not be mentioned in the abstract, would it?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140430/eabdcb7b/attachment.html>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-30T14:31:08",
                "message_text_only": "On 30/04/14 23:55, Mike Hearn wrote:\n>     If Bitcoin works correctly nobody should have to care if they consider\n>     themselves attackers, defenders, or little green men from Mars.\n> \n> \n> One last time, I request that people read the white paper from 2008\n> before making statements like this. If the notion of attacker was\n> irrelevant to Bitcoin, it would not be mentioned in the abstract, would it? \n\nI've read it :) The notion of an attacker is obviously relevant to\nsomeone designing the system. It should not be relevant to someone\nrunning a node.\n\nI'll retire from posting on this too, I've posted way too much.\n\nOur fundamental disagreement is simply that you think Bitcoin is, or\nshould be, a /democratic/ system. I think Bitcoin is, and should be, a\n/trustless/ system. If we're going to resort to appeal to authority,\nI'll point to the words \"Electronic Cash System\" in the title of\nSatoshi's whitepaper :-P He intended to create ecash; that's widely\nunderstood to mean trustless.\n\nIf there was this magic computer up in the sky somewhere, free from\nhuman influence, that would run Satoshi's code for him in perpetuity\n(let's overlook the initial upload please, bear with me), then I believe\nSatoshi would've built his perfectly trustless ecash to run on that.\n\nFor lack of such a magic masterless computer he had to approximate one,\ningeniously using distributed consensus to achieve it. That's his real\ninvention - the \"magic masterless computer\" simulator, and the incentive\nscheme to get the world to run it for him. (We'll see more of what it\ncan do if Ethereum ever gets off the ground.)\n\nBut for Pete's sake, Bitcoin is trustless. Just because the\ninfrastructure it sits atop is \"democratic\" (because there was no other\nway to implement it,) doesn't mean you suddenly have to start voting on\neverything.\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140501/afb10d09/attachment.sig>"
            },
            {
                "author": "Justus Ranvier",
                "date": "2014-04-29T19:29:33",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 04/29/2014 02:13 PM, Mike Hearn wrote:\n> I do think we need to move beyond this idea of Bitcoin being some\n> kind of elegant embodiment of natural mathematical law. It just\n> ain't so.\n> \n\nI think everybody understands that Bitcoin has a positive net present\nvalue exactly because it, unlike every other digital currency which\ncame before, does not include a feature that allows for balances to be\nconfiscated. Implementing any such feature, to any degree at all,\nwould render Bitcoin completely valueless.\n\nThere are two possibilities here:\n\nIf you understand this, then your proposal is a malicious attempt to\nundermine Bitcoin.\n\nIf you don't understand this then you suffer from a very serious case\nof economic illiteracy, a case so bad that your continued\nparticipation in Bitcoin represents a clear and present danger to all\nBitcoin users. If you can't even get the easy questions right, then\ngod help us all if you're ever faced with a difficult one.\n\nI don't have enough evidence to distinguish between the incompetence\nhypothesis and the malice hypothesis, but it doesn't matter.\nRegardless of your abilities or motives your proposal is unacceptable.\nIf you want a currency where miners can vote to steal from other\nminers then implement it in Hearncoin and leave Bitcoin alone.\n\n\n- -- \nSupport online privacy by using email encryption whenever possible.\nLearn how here: http://www.youtube.com/watch?v=bakOKJFtB-k\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTX/2dAAoJECoisBQbQ4v0jAoH/R1oNZ1tVp6DJ5BuPg0ZTav0\nDvzq8EfX/uRbRgmxotCHMwY6FJCoXqJTLyOnl2p670t7l5ZXqd91MdKKP2z7jYPY\nGsVbqfGreF0dWKCd0mKTG5DM8pxndNWteGIsw9/sYvY/3p2Vopzp6N7fpl8TEf6p\n2nyIzEqTD4aK5QkhM+sNnP1Cyh/l5AjJTES23GqSQIMG6vzLgqE8kyze+ANFVg1U\nyka6bz4DX7DO7meyJyyOFaMJu6mgY+m6dSVaR7j/QmQMu22SwlSiPgqe6iO//os3\nzcmwe/x4+5CmqJOO/PL5Or28iw/Qdf6vNePiaEIFtBzoKnHBhS2nAtL6jnOL928=\n=4yIu\n-----END PGP SIGNATURE-----\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0x1B438BF4.asc\nType: application/pgp-keys\nSize: 21678 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140429/b00469ee/attachment.bin>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-30T13:00:06",
                "message_text_only": "On 30/04/14 00:13, Mike Hearn wrote:\n> I do think we need to move beyond this idea of Bitcoin being some kind\n> of elegant embodiment of natural mathematical law. It just ain't so. \n\nI haven't seen anybody arguing that it is.\n\nBitcoin is the elegant embodiment of /artificially contrived/\nmathematical rules, which just so happen to be very useful in their\ncurrent configuration :-P\n\nNobody is saying those rules are immutable. Just that it isn't sensible\nto undermine them by introducing imprecise and unpredictable elements\nlike human politics.\n\n\n> Every time miners and nodes ignore a block that creates >formula() coins\n> that's a majority vote on a controversial political matter\n\nNo it isn't. That's the node enforcing the protocol. It isn't a matter\nof opinion, and it isn't a vote. The protocol is clearly defined: you\neither follow it or you're not running a Bitcoin node. If 51% don't\nfollow it tomorrow /they're/ not running Bitcoin.\n\nContrast with your \"vote to reinterpret the meaning of arbitrary blocks\"\nmechaism - you're free to vote either way while remaining within the\nprotocol. That's a /real/ vote - majority decides what the Bitcoin\nprotocol /and every node that follows it/ will recognise as valid.\nNothing like that currently exists. Thank $deity.\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140430/3e39d0ea/attachment.sig>"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-04-30T17:06:38",
                "message_text_only": "On Wed, Apr 30, 2014 at 11:00:06PM +1000, Gareth Williams wrote:\n> On 30/04/14 00:13, Mike Hearn wrote:\n> > I do think we need to move beyond this idea of Bitcoin being some kind\n> > of elegant embodiment of natural mathematical law. It just ain't so. \n> \n> I haven't seen anybody arguing that it is.\n> \n> Bitcoin is the elegant embodiment of /artificially contrived/\n> mathematical rules, which just so happen to be very useful in their\n> current configuration :-P\n> \n> Nobody is saying those rules are immutable. Just that it isn't sensible\n> to undermine them by introducing imprecise and unpredictable elements\n> like human politics.\n\nAs an end-user of Bitcoin, the whole possible value of a set of mathematical\nrules has become completely trashed by the imprecise and unpredictable behavior\nof buyers and sellers.\n\nIf the rules are not responsive to real human needs, bitcoin is worthless\nas a long-term store of value because **my idea of value** changes over time.\nThis implies, in my mind, an absolutely requirement to attempt to gather \nsome useful signal from the human political noise.\n\nHow do you determine what that signal is, so you can **change the rules**\nand the mathematics so it makes more sense?\n\nYou've got to deal with politics, one way or another.\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Jameson Lopp",
                "date": "2014-04-30T17:13:50",
                "message_text_only": "Perhaps I missed it somewhere, but I don't recall it ever being a goal of Bitcoin to act as a stable long-term store of value.\n\n- Jameson\n\nOn 04/30/2014 01:06 PM, Troy Benjegerdes wrote:\n> On Wed, Apr 30, 2014 at 11:00:06PM +1000, Gareth Williams wrote:\n>> On 30/04/14 00:13, Mike Hearn wrote:\n>>> I do think we need to move beyond this idea of Bitcoin being some kind\n>>> of elegant embodiment of natural mathematical law. It just ain't so. \n>>\n>> I haven't seen anybody arguing that it is.\n>>\n>> Bitcoin is the elegant embodiment of /artificially contrived/\n>> mathematical rules, which just so happen to be very useful in their\n>> current configuration :-P\n>>\n>> Nobody is saying those rules are immutable. Just that it isn't sensible\n>> to undermine them by introducing imprecise and unpredictable elements\n>> like human politics.\n> \n> As an end-user of Bitcoin, the whole possible value of a set of mathematical\n> rules has become completely trashed by the imprecise and unpredictable behavior\n> of buyers and sellers.\n> \n> If the rules are not responsive to real human needs, bitcoin is worthless\n> as a long-term store of value because **my idea of value** changes over time.\n> This implies, in my mind, an absolutely requirement to attempt to gather \n> some useful signal from the human political noise.\n> \n> How do you determine what that signal is, so you can **change the rules**\n> and the mathematics so it makes more sense?\n> \n> You've got to deal with politics, one way or another.\n> \n>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-30T14:08:41",
                "message_text_only": "On 30/04/14 00:13, Mike Hearn wrote:\n> Every time miners and nodes ignore a block that creates >formula() coins\n> that's a majority vote on a controversial political matter\n\nActually, there's one more thing I'd like to add. Apologies to the list,\nbut it bears repeating:\n\n* rejecting a block at validation\n\nIs /very different/ from:\n\n* reinterpreting a block that has already passed validation\n\nNodes ignoring a block that creates >formula() coins is rejection at\nblock *validation*. That's the protocol working as it is supposed to.\nIt's deliberately an all-or-nothing mechanism; you can't pick and choose\nwhich blocks you like. If 51% of the network say your block is invalid,\nthey're now on a different fork. The consequences are this drastic on\npurpose, for stability.\n\nNodes reinterpreting a block that has already passed validation is\nalmost the polar opposite of this. They're /ignoring the protocol/ and\nmaking up their own meaning for stuff. Sidestepping the mechanism in the\nparagraph above. I would hope it'd be self evident that this is dangerous.\n\nAdam Back is arguing practicality in this thread. I'm arguing\nfundamental principle. (And, er, someone else is randomly throwing\naround ad hominems, which we'll politely ignore; Mike could work for\nLucifer himself and his good ideas would still be good, and his bad\nideas would still be bad, so let's just stick to the ideas eh.)\n\nSo, fundamental principle: don't reinterpret history!\n\nWe have validation for a very good reason. Undermine it and you might as\nwell have an unvalidated system like Counterparty, which I wouldn't\never trust with more than the value of a small hamburger.\n\nIf the economic majority starts reinterpreting history (through whatever\nvoting mechanism / side-channel you like) that completely undermines\nBitcoin's validation, and its PoW. It's worse than 51% of miners\ndeciding to rewrite history.\n\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140501/cba8ecc6/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-23T15:28:18",
                "message_text_only": "On Wed, Apr 23, 2014 at 06:04:00PM +0300, Alex Mizrahi wrote:\n> This is outright ridiculous.\n> \n> Zero-confirmation double-spending is a small problem, and possible\n> solutions are known. (E.g. trusted third party + multi-sig addresses for\n> small-value transactions.)\n\nAlso replace-by-fee scorched earth.\n\n> On the other hand, protocol changes like described above might have\n> game-theoretical implications which are non-trivial and hard to understand.\n\nTo put it mildly. :) Beyond the obvious issues with adding mechanisms\nfor miners to vote on what blacklists they wish to apply, it's\ninteresting to consider how trying to make zeroconf transactions secure\ndirectly is quite close to changing the block interval. Like the\nblocksize that's a fundemental economic parameter of the system - how\nlow-latency and well connected you must be to be allowed to mine. Even\nin a scheme where the punishment for allowing a double-spend was somehow\napplied perfectly fairly, you'd still be favoring large well-connected\nminers in a very similar way to reducing the block interval.\n\n> The above approach works as long as the majority of hashpower is honest,\n> > defined to mean, working to stop double spending. This is the same security\n> > property as described in the white paper, thus this introduces no new\n> > security assumptions.\n> >\n> \n> No. Bitcoin should work if miners are merely individually rational, i.e.\n> they try to maximize their pay-offs without colluding with others.\n\nIt's worth noting that the academic efforts studying Bitcoin are\nspending quite a bit of effort focused on the incentive compatibility of\nvarious mechanisms in the protocol: https://github.com/citp/bitcoin-sok/issues/5\n\nThere's solid consensus in the academic community that Bitcoin can't\njust depend on notions of \"honesty\" to work.\n\n> I guess word \"honest\" might have different meanings, that can be a source\n> of confusing.\n> 1. Honest -- not trying to destroy bitcoin\n> 2. Honest -- following rules which are not required by the protocol\n\nWhat exactly those rules are is up for debate too. Right now if, say,\njust 5% of Bitcoin miners were willing to accept Colored Coin\ntransactions you could still use Colored Coins. The other 95% may want\nto block said transactions, but there's huge practical difficulties in\norganizing a reorg and ensuring that everyone co-operates; miners have\nstrong incentives to defect if the consensus isn't assured as any miners\nattempting to reorg are wasting their hashing power if it doesn't\nsucceed.\n\nOTOH with a voting scheme the cost to propose that a specific block or a\ntransaction be blacklisted is much lower. In Mike's proposed scheme to\nnot just blacklist, but actually take coinbases it's downright\nprofitable. Rather than being a last resort option, it'll be easy for\nminers to propose various things be blacklisted, if the vote goes\nthrough, great, if it doesn't, no harm done. Obviously that makes\nblacklists into a much more useful tool and greatly changes the\npolitical landscape around them.\n\nRemember, if you're operating a publicly known pool, and there's a\nvoting mechanism available to you to blacklist specific blocks, how are\nyou going to resist pressure from your local authorities to do just when\nthere's no cost to you to do so?\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000278031f86c71265f6eaf1fe9ce6cc831dc4f956676a7a7f7\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/50cd1cfa/attachment.sig>"
            },
            {
                "author": "Kevin",
                "date": "2014-04-23T15:34:39",
                "message_text_only": "On 4/23/2014 3:55 AM, Mike Hearn wrote:\n> Lately someone launched Finney attacks as a service (BitUndo). As a \n> reminder for newcomers, Finney attacks are where a miner secretly \n> works on a block containing a double spend. When they eventually find \n> a block, they run to the merchant and pay, then broadcast the block. \n> In a simpler variant of this attack you make purchases as normal with \n> a modified wallet that always submits a double spend to the service, \n> and then N% of the time where N is the percentage of overall hash \n> power the dishonest miners have, you get your money back minus their fee.\n>\n> N does not need to be very high to render Bitcoin much less useful. \n> Real time transactions are very important. Although I never expected \n> it when I first started using Bitcoin, nowadays most of my purchases \n> with it are for food and drink. If Bitcoin could not support such \n> purchases, I would use it much less.\n> Even with their woeful security many merchants see <1-2% credit card \n> chargeback rates, and chargebacks can be disputed. In fact merchants \n> win about 40% of chargeback disputes. So if N was only, say, 5%, and \n> there was a large enough population of users who were systematically \n> trying to defraud merchants, we'd already be having worse security \n> than magstripe credit cards. EMV transactions have loss rates in the \n> noise, so for merchants who take those Bitcoin would be dramatically \n> less secure.\n>\n> The idea of discouraging blocks that perform Finney attacks by having \n> honest miners refuse to build on them has been proposed. But it has a \n> couple of problems:\n>\n>  1. It's hard to automatically detect Finney attacks. Looking for\n>     blocks that contain unseen transactions that override the mempool\n>     doesn't work - the dishonest users could broadcast all their\n>     double spends once a Finney block was found and then broadcast the\n>     block immediately afterwards, thus making the block look like any\n>     other would in the presence of double spends.\n>\n>  2. If they could be automatically identified, it possibly could be\n>     converted into a DoS on the network by broadcasting double spends\n>     in such a way that the system races, and every miner produces a\n>     block that looks like a Finney attack to some of the others. The\n>     chain would stop advancing.\n>\n>  3. Miners who want to vote \"no\" on a block take a big risk, they\n>     could be on the losing side of the fork and end up wasting their work.\n>\n> We can resolve these problems with a couple of tweaks:\n>\n>  1. Dishonest blocks can be identified out of band, by having honest\n>     miners submit double spends against themselves to the service\n>     anonymously using a separate tool. When their own double spend\n>     appears they know the block is bad.\n>\n>  2. Miners can vote to reallocate the coinbase value of bad blocks\n>     before they mature. If a majority of blocks leading up to maturity\n>     vote for reallocation, the value goes into a pot that subsequent\n>     blocks are allowed to claim for themselves. Thus there is no risk\n>     to voting \"no\" on a block, the work done by the Finney attacker is\n>     not wasted, and users do not have to suffer through huge reorgs.\n>\n> This may seem a radical suggestion, but I think it's much less radical \n> than some of the others being thrown around.\n>\n> The above approach works as long as the majority of hashpower is \n> honest, defined to mean, working to stop double spending. This is the \n> same security property as described in the white paper, thus this \n> introduces no new security assumptions. Note that assuming \n> /all/ miners are dishonest and are willing to double spend \n> automatically resolves the Bitcoin experiment as a failure, because \n> that would invalidate the entire theory upon which the system is \n> built. That doesn't mean the assumption is wrong! It may be that an \n> entirely unregulated market for double spending prevention cannot work \n> and the participants eventually all end up trashing the commons - but \n> the hope is that smart incentives can replace the traditional reliance \n> on law and regulation to avoid this.\n>\n> The voting mechanism would only apply to coinbases, not arbitrary \n> transactions, thus it cannot be used to steal arbitrary users \n> bitcoins. A majority of miners can already reallocate coinbases by \n> forking them out, but this wastes energy and work presenting a \n> significant discouragement to vote unless you already know via some \n> out of band mechanism that you have a solid majority. Placing votes \n> into the coinbase scriptSig as is done with other things avoids that \n> problem.\n>\n> The identification of Finney blocks relies on miners to take explicit \n> action, like downloading and running a tool that submits votes via \n> RPC. It can be expected that double spending services would try to \n> identify and block the sentinel transactions, which is why it's better \n> to have the code that fights this arms race be out of process and \n> developed externally to Bitcoin Core itself, which should ultimately \n> just enforce the new (forking) rule change.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\nI have some questions:\n1.  How can we work towards solving the double-spending problem?\n2.  Is it possible to \"scan\" for double-spending and correct it?\n3.  Is the network at large not secure enough?\n\n\n-- \nKevin\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/e1e5bf4e/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-23T15:41:26",
                "message_text_only": "On Wed, Apr 23, 2014 at 5:34 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n> I have some questions:\n> 1.  How can we work towards solving the double-spending problem?\n\nWe have this awesome technology that solves the double-spending\nproblem. It's called a blockchain. Of course, it only works when\ntransactions are actually in a block.\n\nThis issue is about double-spending preventing before they're\nconfirmed. This is (and has always been) just a best-effort mechanism\nin the network.\n\n> 2.  Is it possible to \"scan\" for double-spending and correct it?\n\nThat is what is being proposed here, by introducing a mechanism where\nminers can vote to penalize other miners if they seem to allow (too\nmany?) double spends.\n\n> 3.  Is the network at large not secure enough?\n\nNot very relevant.\n\n-- \nPieter"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-23T15:55:31",
                "message_text_only": "On Wed, Apr 23, 2014 at 05:41:26PM +0200, Pieter Wuille wrote:\n> On Wed, Apr 23, 2014 at 5:34 PM, Kevin <kevinsisco61784 at gmail.com> wrote:\n> > I have some questions:\n> > 1.  How can we work towards solving the double-spending problem?\n> \n> We have this awesome technology that solves the double-spending\n> problem. It's called a blockchain. Of course, it only works when\n> transactions are actually in a block.\n> \n> This issue is about double-spending preventing before they're\n> confirmed. This is (and has always been) just a best-effort mechanism\n> in the network.\n> \n> > 2.  Is it possible to \"scan\" for double-spending and correct it?\n> \n> That is what is being proposed here, by introducing a mechanism where\n> miners can vote to penalize other miners if they seem to allow (too\n> many?) double spends.\n\nWorse, it's a mechanism where miners can vote to penalize other miners\nfor any reason at all. Nothing in the mechanism requires any proof that\na double-spend happened, nor can it.  Even if you require the simple\n\"two signatures for same output\" mechanism, that just proves the\nexistance of a second signature, and says nothing at all about whether\nor not that signature was ever broadcast on any network.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000278031f86c71265f6eaf1fe9ce6cc831dc4f956676a7a7f7\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/c189cccd/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T18:57:01",
                "message_text_only": "On Wed, Apr 23, 2014 at 12:55 AM, Mike Hearn <mike at plan99.net> wrote:\n> Lately someone launched Finney attacks as a service (BitUndo). As a reminder\n> for newcomers, Finney attacks are where a miner secretly works on a block\n> containing a double spend.\n\nHm? I didn't think this is at all what they did.  What they claim to\ndo is to prioritize transactions in their mempool from people who pay\nthem, potentially over and above other transactions which they may or\nmay not have received first.\n\nThis may still be bad news for someone taking an irreversible action\nin response to an unconfirmed payment and it may or may not be really\nill advised in general, but I think it's less sinister than it sounds\nin your posts.  Is there some reason to believe it isn't what it\nclaims to be?\n\nI think we have very clear evidence that the Bitcoin community doesn't\ncare if miners reorder transactions in their mempool to profitable\nends: In https://bitcointalk.org/index.php?topic=327767.0 it's\ndemonstrated that GHash.IO, currently the largest publicly identified\npool was used to rip off Betcoin dice via double-spends.\n\n> first started using Bitcoin, nowadays most of my purchases with it are for\n> food and drink. If Bitcoin could not support such purchases, I would use it\n> much less.\n\nAccepting zero-conf inherently has some risk (well, so does all\nbusiness, but there is substantially more in a zero-conf payment).\nEven in a spherical-cow Bitcoin absent anything like Bitundo someone\ncan just give a double spend to a large miner and currently give the\nwhole rest of the network the one paying the merchant.  They will,\nwith high success rate be successful.   Worse, it may _appear_ to the\nnetwork that the miner was a \"bitundo\" but they really were not.   The\nblockchain exists to establish consensus ordering, prior to the\nblockchain there is no order, and so it is not easy to really say\nwhich transaction came first in any meaningful sense.\n\nBut in business we balance risks and the risk that sometimes a\ntransaction will be reversed exists in every electronic payment system\navailable today, in most of them the risk persists for _months_ rather\nthan minutes.  Businesses can still operate in the face of these\nrisks.\n\nMore importantly, it's possible to deploy technological approaches to\nmake zero-conf very secure against reversal: Things like performing\nmulti-sig with a anti-double-spending system, or using an external\nfederated payment network... but this stuff requires substantial\ndevelopment work\u2014 though it's not work thats likely to happen if\npeople are still confused about the level of security that zero-conf\nhas.\n\n> Miners can vote to reallocate the coinbase value of bad blocks before they\n> mature.\n\nI think miners 'voting' to reallocate coins, even if they're\nthoroughly convinced that the owner of the coins is a nasty party, is\na much greater violation of the Bitcoin social contract than some\ntwiddling with the unspecified unconfirmed transaction ordering.\n\nDoubly so because a 'nasty' party with non-trivial hash-power can\ndoublespend their own transactions with a pretty good success rate (as\nwas the case for the GHash.io betcoin spends) including not-just\nzero-conf (though with obviously reduced effectiveness), and all of\nyour reliable detection depends on it being a public service.\n\nA much better defense is having the control of hash power very well\ndistributed and so there isn't any central point that excerts enough\ninfluence to change the risk statistics much.  Giving miners the\nability to steal each others payments is, if anything, a force away\nfrom that decentralization."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T19:19:24",
                "message_text_only": "On Wed, Apr 23, 2014 at 8:57 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> Hm? I didn't think this is at all what they did.  What they claim to\n> do is to prioritize transactions in their mempool from people who pay\n> them\n>\n\nThat's the definition of a Finney attack, right? A tx is broadcast and\nnodes normally take the first one they saw, allowing you to measure\npropagation and use double spend alerts to get pretty good confidence,\npretty quick. A Finney attacker doesn't do that and includes a double\nspend, so the one in the mempool gets overridden.\n\nI mean, I hope that's the definition of a Finney attack, given that I\ncoined the term :)\n\n\n> I think we have very clear evidence that the Bitcoin community doesn't\n> care if miners reorder transactions in their mempool to profitable\n> ends: In https://bitcointalk.org/index.php?topic=327767.0 it's\n> demonstrated that GHash.IO, currently the largest publicly identified\n> pool was used to rip off Betcoin dice via double-spends.\n>\n\nYes, very disappointing. Though I'd hope that if this sort of thing was\nsustained over months and merchants started dropping Bitcoin as a result,\nminers would pay more attention.\n\nRight now I suspect miners don't pay attention to anything other than\nhardware builds though.\n\nYes, Bitcoin is imperfect at stopping double spends today. It can certainly\nbe improved! There are plenty of oft-discussed measures like double spend\nalerts and discouraging Finney-attack blocks as was debated extensively in\n2011. This thread is just a third such proposal.\n\nMore importantly, it's possible to deploy technological approaches to\n> make zero-conf very secure against reversal: Things like performing\n> multi-sig with a anti-double-spending system\n>\n\nThese sorts of proposals are all just ways of saying block chains kind of\nsuck and we should go back to using trusted third parties.\n\nThat may well be how the Bitcoin experiment ends, but I think we all agree\nhere that block chains and decentralised consensus are quite spiffy and we\nshould try hard to make them work as well as possible before just shrugging\nand say \"find a trusted third party\". Otherwise why not just go back to\nusing MasterCard? Any TTP that enforces anti double spending rules will be\na lot more centralised than miners, given the difficulty of finding them,\ntheir need for a strong brand/reputation, and the difficulty of getting\neveryone to agree on them.\n\nNot to mention that this solution makes Bitcoin sound like a joke currency.\nIt's a super duper low fee totally decentralised financial system .....\nunless you want to buy something in, you know, a shop. And walk out. Then\nyou need to sign up with this company that looks suspiciously like a bank,\nand pay their fees, and yeah there's like 3 to pick from. Totally\ndecentralised!\n\n\n> Doubly so because a 'nasty' party with non-trivial hash-power can\n> doublespend their own transactions\n>\n\nIf a miner is vertically integrated and defrauding merchants themselves,\nwith no service component, pretty quickly people would talk to each other,\nnotice this pattern and stop trading with them, making their coins rather\nuseless. Also if their real identity is ever revealed they could be liable\nand there'd be a lot of people wanting to sue them.\n\nSo I think the ability to resell double spending to lots of different\npeople around the world seems important to practicality.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/06e5e291/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T19:47:46",
                "message_text_only": "On Wed, Apr 23, 2014 at 12:19 PM, Mike Hearn <mike at plan99.net> wrote:\n> That's the definition of a Finney attack, right?\n\nA finney attack is where you attempt to mine a block with a\ntransaction paying you, and as soon as you are successful you quickly\nmake a transaction spending that coin to someone else, then release\nthe block after they've taken an irreversible action. If everything is\nautomated it should have something like a 99% success rate, though it\nhas a cost of some small increase in the number of orphan blocks you\nexperience.\n\n> I mean, I hope that's the definition of a Finney attack, given that I coined\n> the term :)\n\nYou might have coined the term, but I don't think the attack you're\ndescribing is the attack Hal described:\nhttps://bitcointalk.org/index.php?topic=3441.msg48384#msg48384\n\nWhat you're talking about is just disagreement about the content of\nthe memory pool, but we have no consensus mechanism there (the\nblockchain _is_ the consensus mechanism).  Mempools are sometimes\ninconsistent all on their own, without any attacker being involved.\n\n> These sorts of proposals are all just ways of saying block chains kind of\n> suck and we should go back to using trusted third parties.\n\nI think thats an unsophisticated view.\n\nConsider this protocol.\n\nI take some of my funds and assign them to a 2 of 2 multisig with\nmyself and Oscar. I do not announce this transaction until I get Oscar\nto sign a timelocked anyonecanpay refund to send the coin back to me\n(say in 3 months).  Oscar gives me my refund and I announce the\ntransaction.\n\nLater I can make instant payments with oscar signing up until the\nrefund time comes clue to anyone who trusts Oscar to never double\nspend.  For the receiver this is purely additive with regular\nblockchain security: in that even with Oscar's help I cannot double\nspend except where I would have been successful absent Oscar. On the\nsender side, Oscar cannot up and steal my funds and he can't try to\nextort me (except by creating a delay up to the refund time).\n\nOscar himself can be implemented as a majority M parties to further\nincrease confidence, though if you're talking about using this for low\nvalue retail transactions\u2014 the fact that any cheating by oscar is\ncryptographically provable (just show them the double signatures)\nmaybe be strong enough alone. (Though there is a multitude of other\nproposals to provide more evidence of Oscar's honesty). There are also\nways to blind Oscar so he can't reliably identify which transactions\nare ones he signed for.\n\nI don't think this is at all a \"return to trusted third parties\"\u2014 that\nit's a shrug and an admission of defeat. Its a very narrowly scoped\ntrust, filling in precisely where large scale decentralized consensus\nis fundamentally weak... the result is something which combines\nadvantages from both classes and is stronger than either trust or\nblockchains alone.  (I'm also not trying to say that an implementation\nof this is _simple_ by any means, working out all the details is\nhard.)\n\nBy contrast, I think proposals which overly depend on colluding miners\nto behave in very specific ways are themselves just a way of saying\nblock chains suck unless we turn the miners themselves into a trusted\nthird party. I'm much more in favor of adding a little bit of\nmastercard to transactions where mastercard is really what people\nwant, than turning mining\u2014 and thus bitcoin itself\u2014 into mastercard,\nespecially since miners\u2014 self selecting as they are\u2014 are a pretty poor\nset of parties to act as trusted agents. :)\n\n>> Doubly so because a 'nasty' party with non-trivial hash-power can\n>> doublespend their own transactions\n> If a miner is vertically integrated and defrauding merchants themselves,\n> with no service component, pretty quickly people would talk to each other,\n> notice this pattern and stop trading with them, making their coins rather\n> useless. Also if their real identity is ever revealed they could be liable\n> and there'd be a lot of people wanting to sue them.\n\nWe have an existence proof that it isn't so\u2014 you can say that it\nwasn't consistent enough, but what is? There wasn't any major doubt\nthat they were actually doing it. They're the largest identifiable\npool as we speak.\n\nI think, instead, that strong zero-conf security isn't a part of what\nmany people think of when they think of Bitcoin's characteristics.\nZero conf is risky, and I think for a lot of people thats okay.  If it\nisn't there are ways to improve it that don't involve asking miners to\nparticipate in a majority vote to take away funds from people."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T19:59:14",
                "message_text_only": ">\n> What you're talking about is just disagreement about the content of\n> the memory pool\n>\n\nThat's the same thing. Whilst you're mining your double spend tx, it's in\nyour mempool but you don't broadcast it as per normal. Then when you find\nthe block you broadcast it to override everyone elses mempool. So yours and\ntheirs were inconsistent.\n\nThe only slight way BitUndo differs is, they provide it as a service, and I\ndon't know if they inform you when they found a block (probably not), so\nyou have to do the purchase and then hope BitUndo finds the next block.\nOtherwise the purchase clears. But they could certainly add a\npre-notification before they broadcast to get back to the exact scheme\noriginally described, they have everything else in place.\n\n\n> Oscar himself can be implemented as a majority M parties to further\n> increase confidence\n\n\nThis just brings us back to square one. Who are these parties and what if I\npay them to be corrupt? What if they offer to be corrupt as a service?\n\nLet's say I succeed in finding some parties who are incorruptible no matter\nhow large of a percentage I offer them. At this point, why bother with\nminers at all? Why pay for double spend protection twice, once to a group\nof Oscar's who are trustworthy and once to a group of miners who are not?\n\nThe point of the broadcast network and mining is so there can be lots of\nOscar's and I don't have to know who they are or sign up with them or put\nany effort into evaluating their reputation.\n\n\n> value retail transactions\u2014 the fact that any cheating by oscar is\n> cryptographically provable (just show them the double signatures)\n> maybe be strong enough alone.\n>\n\nBut as you point out, cheating my GHash.io did not result in any obvious\nnegative consequence to them, despite that preventing double spending is\ntheir sole task. Why would Oscar be different to GHash.io?\n\nTrying to solve the problem of dishonest miners is effectively trying to\nsolve the \"automatically find trusted third parties\" problem at scale.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/8dac5331/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T20:24:09",
                "message_text_only": "On Wed, Apr 23, 2014 at 12:59 PM, Mike Hearn <mike at plan99.net> wrote:\n>> What you're talking about is just disagreement about the content of\n>> the memory pool\n> That's the same thing. Whilst you're mining your double spend tx, it's in\n> your mempool but you don't broadcast it as per normal. Then when you find\n> the block you broadcast it to override everyone elses mempool. So yours and\n> theirs were inconsistent.\n\nThe difference is when you transact.  In the attack Hal described you\ntransact with your victim only after finding a block but before\nannouncing it.\n\n> don't know if they inform you when they found a block (probably not), so you\n> have to do the purchase and then hope BitUndo finds the next block.\n\nRight, this works in the Bitcoin network today absent any collusion by\nthe miners. You give one miner a transaction and you give every other\nnode you can reach another transaction.  You then hope your selected\nminer finds the next block and 'undoes' the transaction you gave the\nrest of the network.\n\n> This just brings us back to square one. Who are these parties and what if I\n> pay them to be corrupt? What if they offer to be corrupt as a service?\n>\n> Let's say I succeed in finding some parties who are incorruptible no matter\n> how large of a percentage I offer them. At this point, why bother with\n> miners at all? Why pay for double spend protection twice, once to a group of\n> Oscar's who are trustworthy and once to a group of miners who are not?\n>\n> The point of the broadcast network and mining is so there can be lots of\n> Oscar's and I don't have to know who they are or sign up with them or put\n> any effort into evaluating their reputation.\n\nBut it isn't at all the same thing.  Miners select themselves based on\ncontrolling hash-power. You can distrust a miner all you like but all\nyour distrust does not prevent him from participating in the\nconsensus, potentially to your detriment.  Moreover, the set of miners\nhas to be the same for everyone or otherwise the network doesn't\nconverge. There are miners I _know_ to be scoundrels, but there is\nnothing I can do about it.\n\nSomeone you ask to not double spend is an entirely separate matter.\nThey aren't self-selecting: you select who you trust to not make\ndouble spends and there is no need for this trust to be globally\nconsistent. If they behave in an untrustworthy way you can instantly\nstop honoring them because the bad action is provable beyond any doubt\nand never trust them again (unlike mempool consistency)... and you can\ndo this even if everyone else is too foolish to do so for some reason.\n\nThe trustworthness of oscars needs only be limited and is different in\nkind from the kind of 'trust' we need over the history\u2014 they\narbitrating over the ordering of some subset of transactions right at\nthe tip of the chain, and only those transaction of people who have\nspecifically chosen to use them, of lower value transactions where you\nneed instant settlement.  Why pay twice? Because you're actually\ngetting a different part of your security from each, and the result is\nadditive.\n\nThere is no such thing as an uncorruptable party, invoking that is a\nuseless strawman. Instead we can consider how difficult the corruption\nis and what can happen if they're corrupted and hope to balance the\nrisks and the controls for those risks.  Any self-selectingness as\nanonymity (in the not-previously-enumerated sense) of mining is\nimportant for censorship security but it's terrible for other things\nlike getting reliable mempool behavior.\n\n> But as you point out, cheating my GHash.io did not result in any obvious\n> negative consequence to them, despite that preventing double spending is\n> their sole task. Why would Oscar be different to GHash.io?\n\nBecause you can choose to stop trusting an oscar while you\u2014\nindividually\u2014 can't choose anything about ghash.io.  To stop GHash.io\nwe would have to take away their hardware or change the Bitcoin\nprotocol to make their hardware useless, and in the latter case we'd\n_all_ have to agree to do this not just some (perhaps quite large)\nsubset of us who doesn't want to trust them, and even though it is\nquite apparent what they did there is still some room to claim doubt.\n\n> Trying to solve the problem of dishonest miners is effectively trying to\n> solve the \"automatically find trusted third parties\" problem at scale.\n\nMining is universal\u2014 everyone must use the same miners, trust seldom\nis seldom universal and shouldn't be. The trust we have in mining is\nexceptionally limited, I think any effort to increase it is doomed to\nfail\u2014 both because trust heavy systems stink, because mining is a bad\nfit for trust, and because increasing the requirements create other\nexposures and vulnerabilities."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T20:37:20",
                "message_text_only": "On Wed, Apr 23, 2014 at 10:24 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> Right, this works in the Bitcoin network today absent any collusion by\n> the miners. You give one miner a transaction and you give every other\n> node you can reach another transaction.\n>\n\nYes, but that can be fixed with double spend alerts.\n\n\n> Someone you ask to not double spend is an entirely separate matter.\n> They aren't self-selecting: you select who you trust to not make\n> double spends and there is no need for this trust to be globally\n> consistent.\n>\n\nNo? It's not just your decision that matters, the receiver also has to\ntrust them. They're like a dispute mediator in this regard. You can pick\nwhoever you want, but that doesn't matter if the receiver doesn't recognise\nthem or trust them. You have to find an overlap to make an instant trade.\n\nIn practice if people have to think about this, evaluate brands etc then\nyou'd get a very small number of parties because the value of global\nagreement is so high. Then it becomes hard to remove ones that have a lot\nof momentum.\n\nThe censorship resistance of the block chain doesn't matter if your double\nspending partners refuse to help you spend your money (because they're\nbeing coerced). The censorship can just happen at a different place.\n\n\n> To stop GHash.io we would have to take away their hardware or change the\n> Bitcoin\n> protocol to make their hardware useless\n>\n\n..... or, have a majority decide to zero out their coinbase rewards for\nblocks that double spent against dice sites. That wouldn't undo the double\nspend, but you can't do that with the multisig scheme either. All you can\ndo is punish the corrupted party post-hoc, either by not using them again,\nor by \"unpaying\" them for the service they did not provide.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/91399fa1/attachment.html>"
            },
            {
                "author": "Adam Ritter",
                "date": "2014-04-23T20:44:29",
                "message_text_only": "Isn't a faster blockchain for transactions (maybe as a sidechain) solving\nthe problem? If there would be a safe way for 0-confirmation transactions,\nthe Bitcoin blockchain wouldn't even be needed.\n\n\nOn Wed, Apr 23, 2014 at 10:37 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> On Wed, Apr 23, 2014 at 10:24 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> Right, this works in the Bitcoin network today absent any collusion by\n>> the miners. You give one miner a transaction and you give every other\n>> node you can reach another transaction.\n>>\n>\n> Yes, but that can be fixed with double spend alerts.\n>\n>\n>> Someone you ask to not double spend is an entirely separate matter.\n>> They aren't self-selecting: you select who you trust to not make\n>> double spends and there is no need for this trust to be globally\n>> consistent.\n>>\n>\n> No? It's not just your decision that matters, the receiver also has to\n> trust them. They're like a dispute mediator in this regard. You can pick\n> whoever you want, but that doesn't matter if the receiver doesn't recognise\n> them or trust them. You have to find an overlap to make an instant trade.\n>\n> In practice if people have to think about this, evaluate brands etc then\n> you'd get a very small number of parties because the value of global\n> agreement is so high. Then it becomes hard to remove ones that have a lot\n> of momentum.\n>\n> The censorship resistance of the block chain doesn't matter if your double\n> spending partners refuse to help you spend your money (because they're\n> being coerced). The censorship can just happen at a different place.\n>\n>\n>> To stop GHash.io we would have to take away their hardware or change the\n>> Bitcoin\n>> protocol to make their hardware useless\n>>\n>\n> ..... or, have a majority decide to zero out their coinbase rewards for\n> blocks that double spent against dice sites. That wouldn't undo the double\n> spend, but you can't do that with the multisig scheme either. All you can\n> do is punish the corrupted party post-hoc, either by not using them again,\n> or by \"unpaying\" them for the service they did not provide.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/381deca8/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-23T20:51:36",
                "message_text_only": "On Wed, Apr 23, 2014 at 10:44 PM, Adam Ritter <aritter at gmail.com> wrote:\n\n> Isn't a faster blockchain for transactions (maybe as a sidechain) solving\n> the problem? If there would be a safe way for 0-confirmation transactions,\n> the Bitcoin blockchain wouldn't even be needed.\n>\n\nThe 10 minute average comes from a desire to balance wasted work due to\nnatural chain splits with latency. With a very fast block interval you end\nup with lots of forks and things take longer to converge, also, it can make\nattacks easier because an attacker is building on his own blocks so he\ndoesn't suffer propagation delays and the attendant splits.\n\nIt's not clear you can just make a faster block chain. 10 minutes is\nsomewhat arbitrary, it could be 5 minutes and the system would still work,\nbut it probably can't be 5 seconds.\n\nUnfortunately for best physical-world usability you really need very fast\npayments. A few seconds is competitive with modern credit cards. The new\ncontactless cards seem to be able to reliably manage <1 sec which is\nimpressive. Waiting for blocks in a block chain can't really work. Waiting\nfor propagation can work and has been working so far. Hence, the question\nof how that mechanism can be kept working in the face of malicious miners,\nbefore you end up having to fall back to trusted third parties and\nrecentralisation.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/642547fe/attachment.html>"
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-04-24T15:13:40",
                "message_text_only": "On 23/04/2014 05:51 p.m., Mike Hearn wrote:\n> On Wed, Apr 23, 2014 at 10:44 PM, Adam Ritter <aritter at gmail.com\n> <mailto:aritter at gmail.com>> wrote:\n>\n>     Isn't a faster blockchain for transactions (maybe as a sidechain)\n>     solving the problem? If there would be a safe way for\n>     0-confirmation transactions, the Bitcoin blockchain wouldn't even\n>     be needed.\n>\n>\n> The 10 minute average comes from a desire to balance wasted work due\n> to natural chain splits with latency. With a very fast block interval\n> you end up with lots of forks and things take longer to converge,\n> also, it can make attacks easier because an attacker is building on\n> his own blocks so he doesn't suffer propagation delays and the\n> attendant splits.\n>\n> It's not clear you can just make a faster block chain. 10 minutes is\n> somewhat arbitrary, it could be 5 minutes and the system would still\n> work, but it probably can't be 5 seconds.\n5 seconds block interval is possible. I've simulate it with great\nsuccess and I encourage anyone to repeat or check my simulations.\n\nThere are a very few protocol modifications that are required to allow 5\nseconds block, and most of them have already been discussed in the forums.\nFor more information you can check my post:\nhttp://bitslog.wordpress.com/2014/02/17/5-sec-block-interval/\nAlso NimbleCoin is a new alt-coin that uses 5-sec block intervals,\nallows 100 tps and .... it's based on BitcoinJ (NimbleCoinJ now). So not\nonly it is possible, but it was coded by Mike itself.\nImportant note: the 5-sec block interval method probably requires a\nblock reward forever. It doesn't work well if there is no block reward\nat all.\n\n>\n> Unfortunately for best physical-world usability you really need very\n> fast payments. A few seconds is competitive with modern credit cards.\nAnother solution to achieve <5 secs block intervals is this:\nhttp://bitslog.wordpress.com/2014/03/20/mincen-a-new-protocol-to-achieve-instant-payments/\n\nSo the problem with 0-confirmations is solely of Bitcoin and other\nalt-coins, new alt-coins may achieve instant transactions and no not\nhave to rely on 0-confirmations.\n\nBest regards,\n Sergio.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/516c9e13/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T15:34:39",
                "message_text_only": "Thanks Sergio!\n\nOn Thu, Apr 24, 2014 at 5:13 PM, Sergio Lerner <sergiolerner at certimix.com>wrote:\n\n> For more information you can check my post:\n> http://bitslog.wordpress.com/2014/02/17/5-sec-block-interval/\n> Also NimbleCoin is a new alt-coin that uses 5-sec block intervals, allows\n> 100 tps and .... it's based on BitcoinJ (NimbleCoinJ now). So not only it\n> is possible, but it was coded by Mike itself.\n>\n\nFascinating! I think that's the first time I heard of an alt coin entirely\nbased on bitcoinj as its core implementation. Looking forward to your\nrelease.\n\nMy understanding is that dogecoin suffers somewhat from having so many\nheaders. SPV clients have to download them all in sequence so the more\nblocks you have, the more data they must download and thus the slower they\nsync. Sync times for SPV wallets today are fast enough that unless you\nspend six months in the jungle with your phone switched off, you probably\nwon't notice. With 5 second block times unless there's some other solution\nyou'd have much worse UX.\n\nBTW, Pieter experimented with relaying blocks as hash lists (actually\nmerkleblocks) and I believe he found that it could often fail and be slower\nif the mempools were not quite synced. At any rate, it was apparently more\ncomplicated than it looked. That may be a side effect of trying to reuse\nthe Bloom filtering code however.\n\n\n> Another solution to achieve <5 secs block intervals is this:\n> http://bitslog.wordpress.com/2014/03/20/mincen-a-new-protocol-to-achieve-instant-payments/\n>\n\nMinCen looks like a rather interesting idea. I will read the paper.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/fb39a1e7/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T20:53:59",
                "message_text_only": "On Wed, Apr 23, 2014 at 1:44 PM, Adam Ritter <aritter at gmail.com> wrote:\n> Isn't a faster blockchain for transactions (maybe as a sidechain) solving\n> the problem? If there would be a safe way for 0-confirmation transactions,\n> the Bitcoin blockchain wouldn't even be needed.\n\nLarge scale consensus can't generally provide instantly irreversible\ntransactions directly: Increasing the block speed can't help past the\npoint where the time starts getting close to the network diameter...\nyou simply can't tell what a consensus of a group of nodes is until\nseveral times the light cone that includes all of them.  And if you\nstart getting close to the limit you dilute the power working on the\nconsensus and potentially make life easier for a large attacker.\n\nMaybe other chains with different parameters could achieve a different\ntradeoff which was better suited to low value retail transactions\n(e.g. where you want a soft confirmation fast). A choice of tradeoffs\ncould be very useful, and maybe you can practically get close enough\n(e.g. would knowing you lost a zero-conf double spend within 30\nseconds 90% of the time be good enough?)... but I'm not aware of any\nsilver bullet there which gives you something identical to what a\ncentralized service can give you without invoking at least a little\nbit of centralization."
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-23T21:23:08",
                "message_text_only": "An interesting experiment would be a transaction \"proof of publication\"\nchain.\n\nEach transaction would be added to that chain when it is received.  It\ncould be merge mined with the main chain.\n\nIf the size was limited, then it doesn't even require spam protection.\n\nBlocks could be \"discouraged\" if they have transactions which violate the\nordering in that chain.  Miners could still decide which transactions they\ninclude, but couldn't include transactions which are double spends.\n\nThe locktime/final field could be used for transactions which want to be\nreplaceable.\n\nThe chain could use some of the fast block proposals.  For example, it\ncould include orphans of a block when computing the block's POW.\n\n\n\nOn Wed, Apr 23, 2014 at 9:53 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Wed, Apr 23, 2014 at 1:44 PM, Adam Ritter <aritter at gmail.com> wrote:\n> > Isn't a faster blockchain for transactions (maybe as a sidechain) solving\n> > the problem? If there would be a safe way for 0-confirmation\n> transactions,\n> > the Bitcoin blockchain wouldn't even be needed.\n>\n> Large scale consensus can't generally provide instantly irreversible\n> transactions directly: Increasing the block speed can't help past the\n> point where the time starts getting close to the network diameter...\n> you simply can't tell what a consensus of a group of nodes is until\n> several times the light cone that includes all of them.  And if you\n> start getting close to the limit you dilute the power working on the\n> consensus and potentially make life easier for a large attacker.\n>\n> Maybe other chains with different parameters could achieve a different\n> tradeoff which was better suited to low value retail transactions\n> (e.g. where you want a soft confirmation fast). A choice of tradeoffs\n> could be very useful, and maybe you can practically get close enough\n> (e.g. would knowing you lost a zero-conf double spend within 30\n> seconds 90% of the time be good enough?)... but I'm not aware of any\n> silver bullet there which gives you something identical to what a\n> centralized service can give you without invoking at least a little\n> bit of centralization.\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/bf4cfe10/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-23T21:39:26",
                "message_text_only": "On Wed, Apr 23, 2014 at 2:23 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n> An interesting experiment would be a transaction \"proof of publication\"\n> chain.\n>\n> Each transaction would be added to that chain when it is received.  It could\n> be merge mined with the main chain.\n>\n> If the size was limited, then it doesn't even require spam protection.\n>\n> Blocks could be \"discouraged\" if they have transactions which violate the\n> ordering in that chain.  Miners could still decide which transactions they\n> include, but couldn't include transactions which are double spends.\n>\n> The locktime/final field could be used for transactions which want to be\n> replaceable.\n>\n> The chain could use some of the fast block proposals.  For example, it could\n> include orphans of a block when computing the block's POW.\n\nYou can see me proposing this kind of thing in a number of places (e.g.\nhttp://download.wpsoftware.net/bitcoin/wizards/2014-04-15.txt \"p2pool\nonly forces the subsidy today, but the same mechnism could instead\nforce transactions.. e.g. to get you fast confirmation.\", or\npreviously on BCT for the last couple years) but there are still\nlimits here:  If you don't follow the fast-confirmation share chain\nyou cannot mine third party transactions because you'll be at risk of\nmining a double spend that gets you orphaned, or building on a prior\nblock that other miners have decided is bad.  This means that if the\nlatency or data rate requirements of the share chain are too large\nrelative to ordinary mining it may create some centralization\npressure.\n\nThat said, I think using a fast confirmation share-chain is much\nbetter than decreasing block times and could be a very useful tool if\nwe believe that there are many applications which could be improved\nwith e.g. a 30 second or 1 minute interblock time.  Mostly my thinking\nhas been that these retail applications really want sub-second\nconfirmation, which can't reasonably be provided in this manner so I\ndidn't mention it in this thread.\n\nOne of the neat things about this is that you can introduce it totally\nseparately from Bitcoin without any consensus or approval from anyone\nelse\u2014 E.g. P2pool builds such a chain today though it doesn't enforce\ntransactions.  It would immediately provide the useful service of\ndemonstrating that some chunk of hashpower was currently working on\nincluding a particular set of transactions.  Once the details were\nworked out it could be added as a soft-forking requirement to the\ncommonly run system."
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-23T22:26:08",
                "message_text_only": "On Wed, Apr 23, 2014 at 10:39 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> You can see me proposing this kind of thing in a number of places (e.g.\n> http://download.wpsoftware.net/bitcoin/wizards/2014-04-15.txt \"p2pool\n> only forces the subsidy today, but the same mechnism could instead\n> force transactions..\n\n\nInteresting.  You set the share-block size to 16kB and set the share POW to\n1/64 of the main target.\n\nEach share-block would be allowed to append up to 16kB on the previous\nshare-block.\n\nThis would keep the bandwidth the same, but on average blocks would be only\n512kB.\n\ne.g. to get you fast confirmation.\", or\n> previously on BCT for the last couple years) but there are still\n> limits here:  If you don't follow the fast-confirmation share chain\n> you cannot mine third party transactions because you'll be at risk of\n> mining a double spend that gets you orphaned, or building on a prior\n> block that other miners have decided is bad.  This means that if the\n> latency or data rate requirements of the share chain are too large\n> relative to ordinary mining it may create some centralization\n> pressure.\n>\n\nThis effect could be reduced by having \"colours\" for blocks and\ntransactions.\n\nThe block colour would be a loop based on block height.\n\nYou could have 16 transaction \"colours\" based on the lowest 4 bits in the\ntxId.\n\nA transaction is only valid if all inputs into the transaction are the\ncorrect colour for that block.\n\nThis allows blocks to be created in advance.  If you are processing colour\n7 at the moment, you can have a colour 8 block ready.\n\n16 colours is probably to many.   It would only be necessary for things\nlike 1 second block rates.\n\nThe disadvantage is that wallets would have to make sure that they have\ncoins for each of the 16 colours.\n\nIf you spend the wrong colour, you add 16 block times of latency.\n\n\n>\n> That said, I think using a fast confirmation share-chain is much\n> better than decreasing block times and could be a very useful tool if\n> we believe that there are many applications which could be improved\n> with e.g. a 30 second or 1 minute interblock time.  Mostly my thinking\n> has been that these retail applications really want sub-second\n> confirmation, which can't reasonably be provided in this manner so I\n> didn't mention it in this thread.\n>\n\nIn a shop setting, you could set it up so that the person scans a QR-code\nto setup a channel with the shop.\n\nThey can then scan all their stuff and by the time they have done that, the\nchannel would be ready.\n\nIf there was a queue, it could be done when the person enters the queue.\n\nIn fact, there could be QR-codes at multiple locations.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/e2f80e85/attachment.html>"
            },
            {
                "author": "Tom Harding",
                "date": "2014-04-24T00:55:18",
                "message_text_only": "On 4/23/2014 2:23 PM, Tier Nolan wrote:\n> An interesting experiment would be a transaction \"proof of \n> publication\" chain.\n\nWhat if a transaction could simply point back to an earlier transaction, \nforming a chain?  Not a separately mined blockchain, just a way to \nestablish an official publication (execution) order. Double spends would \nbe immediately actionable with such a sequence. Transactions in a block \ncould eventually be required to be connected in such a chain.  Miners \nwould have to keep or reject a whole mempool chain, since they lack the \nkeys to change the sequence.  They would have to prune a whole tx \nsubchain to insert a double spend (and this would still require private \nkeys to the double spend utxo's).\n\nThis idea seemed promising, until I realized that with the collision \nrebasing required, it would barely scale to today's transaction rate.  \nSomething that scales to 10,000's of transactions per second, and really \nwithout limit, is needed.\n\nAnyway, I wrote it up here: \nhttps://github.com/dgenr8/out-there/blob/master/tx-chains.md"
            },
            {
                "author": "Daniel Krawisz",
                "date": "2014-04-23T20:41:50",
                "message_text_only": "The memory pool is just talk. There is no expectation that the memory pool\nhas to satisfy some standard as to what will eventually exist in the block\nchain, and there are any number of ways that people could communicate\ntransactions to one another without putting them in the memory pool. The\nmemory pool can't be treated like a contract because there is no\ncryptography to enforce it--there is no contract until the transactions\nappear in the block chain, inherently.\n\nMike Hearn's proposal is nonsense because it requires miners to develop a\nconcensus on which blocks in the block chain are dishonest. There is no way\nto prove cryptographically that a block is dishonest because the block\nchain itself is the concensus system--before there is concensus, there is\nno concept of dishonesty, at least as far as double-spending goes. In order\nto decide that a block is dishonest and reallocate the coinbase, a prior\nconsensus mechanism would be required. Of course, such a consensus\nmechanism would also be subject to attacks just like the block chain.\n\nMaxwell's proposal is very good. One only trusts the oscar not to double\nspend, which is perfectly reasonable if oscar is a well-known service.\nNormal everyday wallets for immediate payments would simply require a\nlittle more infrastructure.\n\nDaniel Krawisz\n\n\nOn Wed, Apr 23, 2014 at 2:59 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> What you're talking about is just disagreement about the content of\n>>  the memory pool\n>>\n>\n> That's the same thing. Whilst you're mining your double spend tx, it's in\n> your mempool but you don't broadcast it as per normal. Then when you find\n> the block you broadcast it to override everyone elses mempool. So yours and\n> theirs were inconsistent.\n>\n> The only slight way BitUndo differs is, they provide it as a service, and\n> I don't know if they inform you when they found a block (probably not), so\n> you have to do the purchase and then hope BitUndo finds the next block.\n> Otherwise the purchase clears. But they could certainly add a\n> pre-notification before they broadcast to get back to the exact scheme\n> originally described, they have everything else in place.\n>\n>\n>> Oscar himself can be implemented as a majority M parties to further\n>> increase confidence\n>\n>\n> This just brings us back to square one. Who are these parties and what if\n> I pay them to be corrupt? What if they offer to be corrupt as a service?\n>\n>  Let's say I succeed in finding some parties who are incorruptible no\n> matter how large of a percentage I offer them. At this point, why bother\n> with miners at all? Why pay for double spend protection twice, once to a\n> group of Oscar's who are trustworthy and once to a group of miners who are\n> not?\n>\n> The point of the broadcast network and mining is so there can be lots of\n> Oscar's and I don't have to know who they are or sign up with them or put\n> any effort into evaluating their reputation.\n>\n>\n>> value retail transactions\u2014 the fact that any cheating by oscar is\n>> cryptographically provable (just show them the double signatures)\n>> maybe be strong enough alone.\n>>\n>\n> But as you point out, cheating my GHash.io did not result in any obvious\n> negative consequence to them, despite that preventing double spending is\n> their sole task. Why would Oscar be different to GHash.io?\n>\n> Trying to solve the problem of dishonest miners is effectively trying to\n> solve the \"automatically find trusted third parties\" problem at scale.\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/fdc513e7/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-23T22:06:48",
                "message_text_only": ">\n> These sorts of proposals are all just ways of saying block chains kind of\n> suck and we should go back to using trusted third parties.\n>\n\nNo.\nDifferent approaches have different trade-offs, and thus different areas of\napplicability.\n\nProof-of-work's inherent disadvantage is that it takes some time until\ntransaction becomes practically irreversible. On the other hand, it has\nadvantages like neutrality, censorship-resistance, high degree of security,\netc.\n\nTTP can be very efficient, but doesn't have advantages mentioned above.\n\nIt is possible to combine several different approaches into one hybrid\nsystems. For example, classic Bitcoin PoW blockchain can be used for\nsettlements, large transactions, savings and so on. While TTP-based payment\nsystem will be used for small-value transaction like buying coffee.\n\nIn this case you get benefits of both approaches. Censorship-resistance is\nirrelevant when one buys a cup of coffee with his pocket money, isn't it?\n\nFor some reason, instead of considering these hybrid solutions (which can\nalso address scalability problems), you want to make PoW-based system more\ncomplex to be applicable for real-time transaction too.\n\nThis will, likely, weaken advantages provided by PoW, and also it won't\nprovide any hard guarantees, and, if implemented, will undermine\ndevelopment of alternative solutions.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/e3509046/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T07:58:42",
                "message_text_only": "On Thu, Apr 24, 2014 at 12:06 AM, Alex Mizrahi <alex.mizrahi at gmail.com>wrote:\n>\n> Different approaches have different trade-offs, and thus different areas\n> of applicability.\n>\n> Proof-of-work's inherent disadvantage is that it takes some time until\n> transaction becomes practically irreversible. On the other hand, it has\n> advantages like neutrality, censorship-resistance, high degree of security,\n> etc.\n>\n\nSure, they have different tradeoffs. My assertion is this:  the costs and\ndisadvantages that come with building what is in effect an entirely\nparallel and separate system for stopping double spends, are much much\nworse than making simple tweaks to strengthen the mechanism we already have.\n\nPut another way, the cost/benefit ratio of this proposal seems much better\nto me than the alternatives.\n\n\n> In this case you get benefits of both approaches.\n>\n\nYou also get the costs of both approaches, which are extremely significant.\n\n Censorship-resistance is irrelevant when one buys a cup of coffee with his\n> pocket money, isn't it?\n\n\nThat's like saying banks can't censor you because you can always withdraw\nall your money in cash. But in practice:\n\n   1. That's a huge pain in the ass so nobody does it\n   2. Many merchants will refuse non-trivial payments in cash and demand\n   bank money because it's simpler for them\n\nAnalogously, having to wait some large expiry period to extract your money\nfrom the \"double spending prevention service\" (a.k.a. bitbank) is a pain in\nthe ass, and many merchants would refuse to take your newly double\nspendable money even if theoretically they could, because it keeps their\noperations much simpler if they can just assume a sale is final and can't\nbe reversed.\n\nSo I think such a scheme would rapidly return to the a world that looks\nmuch like the one we have now.\n\n\n> For some reason, instead of considering these hybrid solutions (which can\n> also address scalability problems), you want to make PoW-based system more\n> complex to be applicable for real-time transaction too.\n>\n\nThe complexity overhead is trivial - we already used coinbase scriptSigs\nfor voting on P2SH, I'm sure it'll be used for voting on other things in\nfuture too. So that's already in place. Counting up votes and editing the\nUTXO set is the sort of patch one guy can create, it's not very big. And\nit's conceptually just the same as what miners can do today by re-orging\nout blocks, but with much less impact on end users and less implementation\ncomplexity (no giant reorgs that might themselves have to split recursively\nwhilst they're being built).\n\nOn the other hand, building an entirely separate system, with separate\ntrusted companies that have trusted brand names, adding support to all the\nwallets, getting all sellers on board, making everything use an extended\nBIP 70 (as that's the only real way to implement it), trying to explain to\nusers why they're now expected to pay extra fees when they previously\ndidn't and then discovering that you got a choice of only a handful of\ndouble-spend-preventers everyone could agree on with little potential for\nmore .... that's hugely complex and messy.\n\n\n> This will, likely, weaken advantages provided by PoW\n>\n\nWhy? Remember deleting coinbases with nothing more than a simple majority\nis already possible in the existing protocol and always has been.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/e9fea46d/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-24T08:19:20",
                "message_text_only": "On Thu, Apr 24, 2014 at 12:58 AM, Mike Hearn <mike at plan99.net> wrote:\n> The complexity overhead is trivial - we already used coinbase scriptSigs for\n> voting on P2SH, I'm sure it'll be used for voting on other things in future\n> too.\n\nWe use coinbase sigs to gauge the safety of enforcing a soft fork\nseveral times and not just for P2SH, to determine when enforcement of\nit will be decisive and not result in risking a partition in the\nnetwork that might permit transaction reversals. This is not voting.\nAs a feature decision mechanism his is a rather coercive thing because\nit gives the highest hash-power bidders control even when their\ninterests may be rather thoroughly unaligned with population that owns\nand uses bitcoin in general, but as a plain indicator of when its safe\nto enforce a new rule (same mechanism, different motivation\u2014 though a\npoint is that safe usage means using much more than 50% as the\nthreshold) it works pretty well.\n\n> .... that's hugely complex and messy.\n\nYes, making really distributed systems that work in a complex world is\nhard. It certantly would be /easier/ to just declare miners \"trusted\nparties\" and require them to always collude to produce a single\nconsensus view of the world that is always honest and never\ncontradictory, except that it doesn't work. Because they aren't\nindividually trusted or even trustworthy.\n\n> Why? Remember deleting coinbases with nothing more than a simple majority is\n> already possible in the existing protocol and always has been.\n\nTemporarily censoring transactions by orphaning otherwise valid blocks\nthat contain them for as long as you retain a majority is possible and\nimpossible to prevent in this architecture. This isn't the same as\ndeleting.  Deleting suggests the common misconception that a majority\nof miners can do anything they want."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T08:39:41",
                "message_text_only": "On Thu, Apr 24, 2014 at 10:19 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> This is not voting.\n>\n\nIt absolutely is! It was widely discussed as such at the time, here is a\nthread where people ask how to vote and the operator of Eclipse said he was\nremoving his vote for P2SH:\n\nhttps://bitcointalk.org/index.php?topic=60937.0\n\nYou might not feel it's a particularly fair or representative vote, but\nit's still miners saying \"I support enforcement of this new rule\" or \"I do\nnot support this\" where the majority of cast votes wins. Some miners have\nmore votes than others, but it's still a vote.\n\n\n> Yes, making really distributed systems that work in a complex world is\n> hard. It certantly would be /easier/ to just declare miners \"trusted\n> parties\"\n>\n\nMiners *are* trusted parties, they are just not all trusted simultaneously.\nBitcoin can tolerate a small number of dishonest miners whilst producing a\ndegraded service. It cannot work if all miners are dishonest or decide to\ndeviate from their intended operation, like if they all produce empty\nblocks. The white paper made this clear from the start, and it's also\ncommon sense.\n\nAllowing the majority of honest miners to keep the dishonest ones in check\nis what Bitcoin is all about. I don't understand this view that a very\nsmall change to the existing protocol is somehow terrible or impossible,\nbut expecting everyone to simply build an entirely new system from scratch\nis easy and inevitable. I'd much prefer to just keep the existing system\nworking as well as it has so far, and I think that is true of most users\ntoo.\n\n\n> Temporarily censoring transactions by orphaning otherwise valid blocks\n> that contain them for as long as you retain a majority is possible\n\n\nNo, coinbases are deletable. If some miners fork the chain and build a\nlonger one, the others will all switch to it and the coinbases blocks they\npreviously mined will never become spendable (effectively they were\n\"deleted\" before maturity). Only if the other miners also blacklist the\nmajorities fork and never join it, then the majority for some reason gives\nup and rejoins the minority, is what you described correct. But why would\nthey do that? If they're the majority then all the other nodes will follow\nthem. They have no incentive to throw away their fork and rejoin the\nminority chain ever again.\n\nI think the root of this disagreement is whether the block chain algorithm\nleft by Satoshi is somehow immutable and itself the end, or whether it's\n(as I see it) just a means to an end and therefore an algorithm that can be\ntweaked and improved, to get us closer to the goal.\n\nIf the end is a useful payments system, as decentralised as possible, that\nprevents double spending, then this proposal is a simple enhancement of the\ncurrent system that ensures corrupt miners don't get paid by honest users\nfor services they didn't provide, thus discouraging a particular kind of\nattack.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/53211318/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-24T09:25:02",
                "message_text_only": "On Thu, Apr 24, 2014 at 1:39 AM, Mike Hearn <mike at plan99.net> wrote:\n> It absolutely is!\n> https://bitcointalk.org/index.php?topic=60937.0\n\nMay I direct your attention to the third post in that thread?\n\nLuke attempting to ret-con the enforcement flag into a vote didn't\nmake it one, and certantly wouldn't make it a fair, just, or sane\nmethod of one. And so much for the effectiveness\u2014 you didn't implement\nit for years even after it was deployed.\n\nAnd yes, you can take any decision system and draw comparisons to\nvoting and call it a vote but that doesn't mean is serves the same\nrole or was intended for that purpose.\n\n> No, coinbases are deletable. If some miners fork the chain and build a\n> longer one, the others will all switch to it and the coinbases blocks they\n\nYes, you can reorg out the blocks and actually remove them, but I\nunderstood that you were _not_ proposing that quite specifically. But\ninstead proposed without reorging taking txouts that were previously\nassigned to one party and simply assigning them to others.\n\n> I think the root of this disagreement is whether the block chain algorithm\n> left by Satoshi is somehow immutable and itself the end, or whether it's (as\n> I see it) just a means to an end and therefore an algorithm that can be\n> tweaked and improved, to get us closer to the goal.\n\nI don't think thats the root of the the disagreement at all. I think\nall sorts of changes are interesting, especially ones that increase\nflexibility or fix bugs but less so ones that would impose significant\nchanges on parties without their consent especially things that look\nlike taking someone's coins and assigning them to someone else.\n\nI think the root is that you believe that the miners are, should be,\nor even could be trustworthy in ways that I do not,  and as a result\nyou expect to be able to extract the performance of a trusted\ncentralized system out of them that I do not. Bitcoin is a system\nwhere the incentives are well enough aligned that you appear to only\nneed a small amount of altruism to make it reliable. ... and even\nsummoning that altruism is a challenge\u2014 as miners hand over control of\ntheir hash-power to centralized pools (some known to have behaved\npoorly in the past), etc.\n\nI would like that performance if it came at no cost: But proposals\nthat miners conspiring to blacklist transactions/blocks produced by\nother people is something with a risk of a worse violation of the\nsystem's promises than some disagreement of the ordering of\nunconfirmed transactions.  Pretty much immediately after your post\nPeter Todd\u2014 in his trouble making manner\u2014 went and posted on reddit\nproposing the mechanism be used to claw back mining income from a\nhardware vendor accused of violating its agreements on the amount of\nself mining / mining on customers hardware.  While Peter's suggestion\nwas no doubt intentionally trouble making\u2014 I'm not clear on where the\nline is here: Harm from reordering pretty much non-existent currently\nand is highly speculative, while the harm to miners by hardware\nvendors who've promised to not compete with their own customers or use\ntheir equipment is not at all speculative and very salient to miners.\n\nThis especially in light of the fact that the system already has an\nequitable method to decide what order transactions should be in... but\ninstead you propose an additional complex heuristic system where based\non some unspecified collusion some majority of miners take a\nminorities coins and assign them to themselves.\n\nUnlike reorginization this form of wealth transferal has no collateral\ndamage meaning that a majority cabal can use it to deprive a minority\noutsider of some or all income without risking disrupting the network,\nit would also lay the groundwork for additional forms of censorship\nwhich I believe would be at odds with the purpose and architecture of\nthe system... and, as I noted above, it wouldn't actually prevent\ntheft, it would just mean that no single block could make its theft\nservices available to all comers (or even any of the public at all).\nThe simple mechenism of allowing only only a small number of paid\nreordering transactions per block would prevent forming a quorum on\nthe decision to revoke the coinbase, and you'd even get additional\nincome from the probe transactions without even helping any real\ndouble spends at all. The incentives seem very hard to analyze."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T09:56:23",
                "message_text_only": ">\n> Yes, you can reorg out the blocks and actually remove them, but I\n>\nunderstood that you were _not_ proposing that quite specifically. But\n> instead proposed without reorging taking txouts that were previously\n> assigned to one party and simply assigning them to others.\n>\n\nWell, my original thought was just to delete the coinbases. But then some\npeople don't like the idea of destroying money (equivalently, reducing the\nsystem's resolution) so I proposed reallocating it instead. I'm not sure\nwhich is better though. Deletion is closer to what the existing system\nallows, for sure.\n\nWould you feel differently if the consequence was UTXO deletion rather than\nreallocation? I think the difference makes no impact to the goal of\ndiscouraging double spending.\n\n\n> ... proposing the mechanism be used to claw back mining income from a\n> hardware vendor accused of violating its agreements on the amount of\n> self mining / mining on customers hardware.\n>\n\nI think this would not be doable in practice, unless there was a way to\nidentify that a block was mined with pre-sold equipment. Peter points out\nthat the pool in question is marking their blocks by reusing addresses -\nditto for the double spending against dice sites - but that's a trivial\nthing for them to fix. Then it'd be difficult (impossible?) for miners to\nidentify KnC blocks even if there was a strong majority consensus to delete\ntheir coinbases.\n\nThe reason I think this particular change is doable is that it should be\npossible to quite reliably identify blocks that are Finney attacking for\nprofit. That doesn't generalise to any policy though. Blocks are intended\nto be structurally identical to each other if best practices are followed\nand even with the dire pool situation a big chunk of mining hash power\ntoday is effectively anonymous.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/33b9083b/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-24T13:44:41",
                "message_text_only": "On Thu, Apr 24, 2014 at 11:56:23AM +0200, Mike Hearn wrote:\n> > ... proposing the mechanism be used to claw back mining income from a\n> > hardware vendor accused of violating its agreements on the amount of\n> > self mining / mining on customers hardware.\n> >\n> \n> I think this would not be doable in practice, unless there was a way to\n> identify that a block was mined with pre-sold equipment. Peter points out\n> that the pool in question is marking their blocks by reusing addresses -\n> ditto for the double spending against dice sites - but that's a trivial\n> thing for them to fix. Then it'd be difficult (impossible?) for miners to\n> identify KnC blocks even if there was a strong majority consensus to delete\n> their coinbases.\n\nLike I said before, that leads to the obvious next step of\ndeleting/stealing their coinbases if they don't identify themselves.\n\nAnother likely outcome would be for coinbase blacklisting to be used as\na way to force a minority of miners to adopt a transaction blacklist\nthat the majority of miners had adopted. Any block containing\ntransactions spending coins on the txout blacklist would itself be\npunished by having the block reward either blacklisted or taken.\n\n> The reason I think this particular change is doable is that it should be\n> possible to quite reliably identify blocks that are Finney attacking for\n> profit. That doesn't generalise to any policy though.\n\nIt's not possible to produce a cryptographic proof that a given block\nengaged in a Finney attack. You're proposed coinbase blacklisting/reallocation\nmechanism is simply a way of voting on what coinbases to either\nblacklist or reallocation, nothing more.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000003d5f2a2a68690093cd99f8af1bc8395061251017019cc30a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/082da52b/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T14:09:31",
                "message_text_only": ">\n> Like I said before, that leads to the obvious next step of\n> deleting/stealing their coinbases if they don't identify themselves.\n>\n\nAnd as I said before, that's a huge leap. A majority of miners deciding\ndouble spending needs tougher enforcement doesn't imply they also think all\nminers should identify themselves. Those are unrelated things.\n\nThis kind of totally unsupported \"obvious next step\" argument can be\napplied to any proposal in any walk of life. We developed SPV clients? The\nobvious next step is that miners have to stop being anonymous. We developed\nfloating fees? The obvious next step is that miners have to stop being\nanonymous. The prior arguments sound absurd exactly because they're not\nobvious or even logical - same as this.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/d53d354b/attachment.html>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-04-24T14:47:35",
                "message_text_only": "Actually Peter, coinbase confiscations are a much worse mechanism for\nenforcement of widespread censorship rules than simple orphaning. They\nlose their power when the transaction miners are punished for can\nbuild up over time without losing their usefulness:\n\nAssume a world where 75% of the hashpower is coerced into\nstealing/burning the coinbases of miners who allow transactions to and\nfrom a particular set of addresses (the actual rule isn't that\nimportant). Then the following would be a rational behaviour from the\nremaining 25%:\n\n- Mine according to the enforced rules most of the time.\n- Accept banned transactions paying you with an output (no real\nminers' fees) and keep them in an ever-accumulating pool.\n- When there's so much of those to make it worth your while, mine a\nblock filled with them.\n\nIf miners don't orphan your block, you made money. They can't\nretaliate further, because you can publish the block anonymously, not\ntying it to your previous identity. Hell, some of the 75% might be\nable to do the same right under the authorities' noses (it would be\nreally hard to spot by an external observer).\n\nNote that I, banned user, can submit to all these non-enforcing miners\nat once (with a different fee txout for each). I get a severe\ndegradation of service, especially if I'm part of an extremely small\nminority, but ultimately as long as a single miner can accumulate\nenough transactions with enough fees, I'll eventually get through.\n\nOf course, in such a dystopian future, orphaning would be the\nenforcement mechanism. It would be stupid to rely on coinbase\nreallocation/burning to do this task when the existing tools work so\nmuch better.\n\nWhat's interesting is that this mechanism is especially tailored to\nblocking time sensitive transactions (that need to be confirmed\nnow/soon, or are worthless), such that their total out-of-band fees\ncan't build up over time. Double spending is one such category. I'm at\na loss to come up with something else, but maybe someone has a good\nexample?\n\nOn Thu, Apr 24, 2014 at 10:09 AM, Mike Hearn <mike at plan99.net> wrote:\n>> Like I said before, that leads to the obvious next step of\n>> deleting/stealing their coinbases if they don't identify themselves.\n>\n>\n> And as I said before, that's a huge leap. A majority of miners deciding\n> double spending needs tougher enforcement doesn't imply they also think all\n> miners should identify themselves. Those are unrelated things.\n>\n> This kind of totally unsupported \"obvious next step\" argument can be applied\n> to any proposal in any walk of life. We developed SPV clients? The obvious\n> next step is that miners have to stop being anonymous. We developed floating\n> fees? The obvious next step is that miners have to stop being anonymous. The\n> prior arguments sound absurd exactly because they're not obvious or even\n> logical - same as this.\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-24T15:03:37",
                "message_text_only": "On Thu, Apr 24, 2014 at 10:47:35AM -0400, Christophe Biocca wrote:\n> Actually Peter, coinbase confiscations are a much worse mechanism for\n> enforcement of widespread censorship rules than simple orphaning. They\n> lose their power when the transaction miners are punished for can\n> build up over time without losing their usefulness:\n<snip>\n> Of course, in such a dystopian future, orphaning would be the\n> enforcement mechanism. It would be stupid to rely on coinbase\n> reallocation/burning to do this task when the existing tools work so\n> much better.\n\nI don't disagree with you at an end stage, but the thing with coinbase\nblacklists/confiscation is because it's a voting mechanism the initial\nstages of enforcing widespread censorship rules with it are much easier.\nFor instance, if a 10% pool that has been forced/wants to blacklist\ncertain transactions can do so, and then vote to blacklist blocks that\ndo not abide by that blacklist. Casting that vote does them no harm.\nEvery time another pool joins the blacklist, there's no harm to them to\ndoing so.  At some point they will reach a majority, which causes the\nblacklist to actually apply. The whole process happens smoothly, letting\nthe blacklist be applied safely and easily.  With orphaning/reorging on\nthe other hand you just can't be sure that the other miners will\nactually adopt it, making adoption risky.\n\nOf course, that's above and beyond the fact that you can't prove a\nFinney attack happened to a third-party, making it easy to attack\nsmaller miners with Sybil attacks, get them creating blocks with\ndouble-spends in them, and using that as an excuse to punish them.\n\n> What's interesting is that this mechanism is especially tailored to\n> blocking time sensitive transactions (that need to be confirmed\n> now/soon, or are worthless), such that their total out-of-band fees\n> can't build up over time. Double spending is one such category. I'm at\n> a loss to come up with something else, but maybe someone has a good\n> example?\n\nDecentralized markets are a great example: the bids and orders they\ndepend on are time-senstive and become much less valuable if they get\ndelayed greatly.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000091ae589c034bc0466e2feca51dc018bb2c3303e8ab8648b\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/5f1845c6/attachment.sig>"
            },
            {
                "author": "Christophe Biocca",
                "date": "2014-04-24T16:05:55",
                "message_text_only": "> Casting that vote does them no harm.\n> Every time another pool joins the blacklist, there's no harm to them to doing so.\n\nI actually agree that this is a problem, but that's actually not\ninherent in the proposed enforcement mechanism (just the current\nvoting rules).\n\nHere's an alternate:\n\n- To start a vote, you set aside a part of your coinbase with amount X\n<= their entire coinbase amount.\n- Then you need 51 blocks with a \"yes\" vote before the coinbase\nmaturity of the target for the vote to be considered a success.\n- Success means target coinbase has X coins reallocated/burned.\n- Failure means vote-initiating coinbase has X coins reallocated/burned.\n\nThe incentives for voting miners are to vote yes if and only if they\ndislike the targeted miner more than the initiator (all other monetary\neffects are identical). That isn't a bulletproof way to force miners\nto only punish double spenders (rather than anything they dislike in\ngeneral), but it removes the risk free nature of trying to take away\nanother miner's coinbase.\n\nIt means that you'll need a high level of confidence other miners are\non your side before taking a risk, but, because you've got a much\nlonger time frame than 10 minutes, you can get manual confirmation\nfrom other miners.\n\nOn Thu, Apr 24, 2014 at 11:03 AM, Peter Todd <pete at petertodd.org> wrote:\n> On Thu, Apr 24, 2014 at 10:47:35AM -0400, Christophe Biocca wrote:\n>> Actually Peter, coinbase confiscations are a much worse mechanism for\n>> enforcement of widespread censorship rules than simple orphaning. They\n>> lose their power when the transaction miners are punished for can\n>> build up over time without losing their usefulness:\n> <snip>\n>> Of course, in such a dystopian future, orphaning would be the\n>> enforcement mechanism. It would be stupid to rely on coinbase\n>> reallocation/burning to do this task when the existing tools work so\n>> much better.\n>\n> I don't disagree with you at an end stage, but the thing with coinbase\n> blacklists/confiscation is because it's a voting mechanism the initial\n> stages of enforcing widespread censorship rules with it are much easier.\n> For instance, if a 10% pool that has been forced/wants to blacklist\n> certain transactions can do so, and then vote to blacklist blocks that\n> do not abide by that blacklist. Casting that vote does them no harm.\n> Every time another pool joins the blacklist, there's no harm to them to\n> doing so.  At some point they will reach a majority, which causes the\n> blacklist to actually apply. The whole process happens smoothly, letting\n> the blacklist be applied safely and easily.  With orphaning/reorging on\n> the other hand you just can't be sure that the other miners will\n> actually adopt it, making adoption risky.\n>\n> Of course, that's above and beyond the fact that you can't prove a\n> Finney attack happened to a third-party, making it easy to attack\n> smaller miners with Sybil attacks, get them creating blocks with\n> double-spends in them, and using that as an excuse to punish them.\n>\n>> What's interesting is that this mechanism is especially tailored to\n>> blocking time sensitive transactions (that need to be confirmed\n>> now/soon, or are worthless), such that their total out-of-band fees\n>> can't build up over time. Double spending is one such category. I'm at\n>> a loss to come up with something else, but maybe someone has a good\n>> example?\n>\n> Decentralized markets are a great example: the bids and orders they\n> depend on are time-senstive and become much less valuable if they get\n> delayed greatly.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 0000000000000000091ae589c034bc0466e2feca51dc018bb2c3303e8ab8648b"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T16:14:41",
                "message_text_only": ">\n> Casting that vote does them no harm.\n> Every time another pool joins the blacklist, there's no harm to them to\n> doing so.  At some point they will reach a majority\n\n\nThese statements do not follow from each other.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/4db223f2/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Coinbase reallocation to discourage Finney attacks",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tier Nolan",
                "Justus Ranvier",
                "Tom Harding",
                "Daniel Krawisz",
                "Troy Benjegerdes",
                "Adam Back",
                "Mike Hearn",
                "Sergio Lerner",
                "Peter Todd",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Gareth Williams",
                "Andy Parkins",
                "Alex Mizrahi",
                "Gavin Andresen",
                "Jameson Lopp",
                "Adam Ritter",
                "Christophe Biocca",
                "Kevin",
                "Chris Pacia",
                "Pieter Wuille",
                "Drak"
            ],
            "messages_count": 89,
            "total_messages_chars_count": 209392
        }
    },
    {
        "title": "[Bitcoin-development] Coinbase reallocation to discourage Finney attacks]",
        "thread_messages": [
            {
                "author": "Sergio Lerner",
                "date": "2014-04-23T19:33:24",
                "message_text_only": "(this e-mail is cc to the bitcoin-research list)\n\nHi everyone from the bitcoin-development mailing list!\nI decided to join this legendary list because it seems that all the\nresearch fun is taking place in here, and I don't want to miss the\nresearch party.\n\nRegarding the discussion about BitUndo, a year ago I posted about an\nattack (which I called the the Bitcoin Eternal Choice for the Dark Side\nAttack or ECDSA)\nthat tries to erode the confidence in Bitcoin by offering double-spends\nas a service.\n\nI think it's related to the last post from Peter Todd about the problems\nwith BitUndo.\n\nHere is the link if anyone is interested in reading about it...\nhttp://bitslog.wordpress.com/2013/06/26/the-bitcoin-eternal-choice-for-the-dark-side-attack-ecdsa/\n\nSergio D. Lerner.\n\n\n\nOn 23/04/2014 12:29 p.m., Peter Todd wrote:\n> Interesting discussion re: incentive compatibility happening on the\n> bitcoin-development email list:\n>\n> ----- Forwarded message from Mike Hearn <mike at plan99.net> -----\n>\n> Date: Wed, 23 Apr 2014 09:55:30 +0200\n> From: Mike Hearn <mike at plan99.net>\n> To: Bitcoin Dev <bitcoin-development at lists.sourceforge.net>\n> Subject: [Bitcoin-development] Coinbase reallocation to discourage Finney attacks\n>\n> Lately someone launched Finney attacks as a service (BitUndo). As a\n> reminder for newcomers, Finney attacks are where a miner secretly works on\n> a block containing a double spend. When they eventually find a block, they\n> run to the merchant and pay, then broadcast the block. In a simpler variant\n> of this attack you make purchases as normal with a modified wallet that\n> always submits a double spend to the service, and then N% of the time where\n> N is the percentage of overall hash power the dishonest miners have, you\n> get your money back minus their fee.\n>\n> N does not need to be very high to render Bitcoin much less useful. Real\n> time transactions are very important. Although I never expected it when I\n> first started using Bitcoin, nowadays most of my purchases with it are for\n> food and drink. If Bitcoin could not support such purchases, I would use it\n> much less.\n> Even with their woeful security many merchants see <1-2% credit card\n> chargeback rates, and chargebacks can be disputed. In fact merchants win\n> about 40% of chargeback disputes. So if N was only, say, 5%, and there was\n> a large enough population of users who were systematically trying to\n> defraud merchants, we'd already be having worse security than magstripe\n> credit cards. EMV transactions have loss rates in the noise, so for\n> merchants who take those Bitcoin would be dramatically less secure.\n>\n> The idea of discouraging blocks that perform Finney attacks by having\n> honest miners refuse to build on them has been proposed. But it has a\n> couple of problems:\n>\n>    1. It's hard to automatically detect Finney attacks. Looking for blocks\n>    that contain unseen transactions that override the mempool doesn't work -\n>    the dishonest users could broadcast all their double spends once a Finney\n>    block was found and then broadcast the block immediately afterwards, thus\n>    making the block look like any other would in the presence of double spends.\n>\n>    2. If they could be automatically identified, it possibly could be\n>    converted into a DoS on the network by broadcasting double spends in such a\n>    way that the system races, and every miner produces a block that looks like\n>    a Finney attack to some of the others. The chain would stop advancing.\n>\n>    3. Miners who want to vote \"no\" on a block take a big risk, they could\n>    be on the losing side of the fork and end up wasting their work.\n>\n> We can resolve these problems with a couple of tweaks:\n>\n>    1. Dishonest blocks can be identified out of band, by having honest\n>    miners submit double spends against themselves to the service anonymously\n>    using a separate tool. When their own double spend appears they know the\n>    block is bad.\n>\n>    2. Miners can vote to reallocate the coinbase value of bad blocks before\n>    they mature. If a majority of blocks leading up to maturity vote for\n>    reallocation, the value goes into a pot that subsequent blocks are allowed\n>    to claim for themselves. Thus there is no risk to voting \"no\" on a block,\n>    the work done by the Finney attacker is not wasted, and users do not have\n>    to suffer through huge reorgs.\n>\n> This may seem a radical suggestion, but I think it's much less radical than\n> some of the others being thrown around.\n>\n> The above approach works as long as the majority of hashpower is honest,\n> defined to mean, working to stop double spending. This is the same security\n> property as described in the white paper, thus this introduces no new\n> security assumptions. Note that assuming *all* miners are dishonest and are\n> willing to double spend automatically resolves the Bitcoin experiment as a\n> failure, because that would invalidate the entire theory upon which the\n> system is built. That doesn't mean the assumption is wrong! It may be that\n> an entirely unregulated market for double spending prevention cannot work\n> and the participants eventually all end up trashing the commons - but the\n> hope is that smart incentives can replace the traditional reliance on law\n> and regulation to avoid this.\n>\n> The voting mechanism would only apply to coinbases, not arbitrary\n> transactions, thus it cannot be used to steal arbitrary users bitcoins. A\n> majority of miners can already reallocate coinbases by forking them out,\n> but this wastes energy and work presenting a significant discouragement to\n> vote unless you already know via some out of band mechanism that you have a\n> solid majority. Placing votes into the coinbase scriptSig as is done with\n> other things avoids that problem.\n>\n> The identification of Finney blocks relies on miners to take explicit\n> action, like downloading and running a tool that submits votes via RPC. It\n> can be expected that double spending services would try to identify and\n> block the sentinel transactions, which is why it's better to have the code\n> that fights this arms race be out of process and developed externally to\n> Bitcoin Core itself, which should ultimately just enforce the new (forking)\n> rule change.\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ----- End forwarded message -----"
            }
        ],
        "thread_summary": {
            "title": "Coinbase reallocation to discourage Finney attacks]",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Sergio Lerner"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 6875
        }
    },
    {
        "title": "[Bitcoin-development] Translators Needed for Bitcoin Core",
        "thread_messages": [
            {
                "author": "Warren Togami Jr.",
                "date": "2014-04-24T05:47:07",
                "message_text_only": "You do not need to be a developer to help in the improvement of Bitcoin.\n\nhttp://sourceforge.net/p/bitcoin/mailman/message/32255092/\nBitcoin Core 0.9.2 feature freeze is May 13th, 2014.  Now is the time for\nnative non-English speakers to join Transifex to clean up the translations\nin all languages.  This is important for more than just Bitcoin because\nLitecoin will use these same translations.\n\n*What should volunteer translators do?*\nhttps://bitcointalk.org/index.php?topic=571414\nTry the nightly builds of Bitcoin Core as it heads toward 0.9.2.  Not\nrecommended for your production wallet.\n\nhttps://www.transifex.com/projects/p/bitcoin/\nJoin Transifex as a translator and add your account to your language.\n\nhttps://groups.google.com/forum/#!forum/bitcoin-translators\nJoin the Translator mailing list to receive announcements when translations\nare needed for Bitcoin.  You will also receive notifications if other\nBitcoin Project things in Transifex need translations (likely bitcoin.org).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140423/b3edb6a0/attachment.html>"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2014-04-25T01:56:27",
                "message_text_only": "Thanks for this reminder, I will bring this up with some others who I\nthink may be able to help in this area and dedicate some time.  I may be\nable to free up some time with a little language work as well.\n\n> You do not need to be a developer to help in the improvement of Bitcoin.\n>\n> http://sourceforge.net/p/bitcoin/mailman/message/32255092/\n> Bitcoin Core 0.9.2 feature freeze is May 13th, 2014.  Now is the time for\n> native non-English speakers to join Transifex to clean up the translations\n> in all languages.  This is important for more than just Bitcoin because\n> Litecoin will use these same translations.\n>\n> *What should volunteer translators do?*\n> https://bitcointalk.org/index.php?topic=571414\n> Try the nightly builds of Bitcoin Core as it heads toward 0.9.2.  Not\n> recommended for your production wallet.\n>\n> https://www.transifex.com/projects/p/bitcoin/\n> Join Transifex as a translator and add your account to your language.\n>\n> https://groups.google.com/forum/#!forum/bitcoin-translators\n> Join the Translator mailing list to receive announcements when\n> translations\n> are needed for Bitcoin.  You will also receive notifications if other\n> Bitcoin Project things in Transifex need translations (likely\n> bitcoin.org).\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "Translators Needed for Bitcoin Core",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Warren Togami Jr.",
                "Odinn Cyberguerrilla"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2988
        }
    },
    {
        "title": "[Bitcoin-development] 0 confirmation txs using replace-by-fee and game theory",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-24T10:48:54",
                "message_text_only": "Here is a solution to the problem of having 0 confirmation\ntransactions that relies on game\ntheory and most miners implementing replace-by-fee and child-pays-for-parent.\n\nThis has been proposed before\nhttp://sourceforge.net/p/bitcoin/mailman/message/30876033/\nI'm just going to describe the general idea in more detail.\n\nHere's a small draft on how this could work:\n\nAlice goes to Bob's store and wants to buy something cheaper than a\ncar, say a smartphone.\nSo Bob says, \"it's 200 usd in btc, please pay me 400 usd in btc\"\nSo Alice signs a tx with 400 and no fee with her old phone and she\njust sends it to Bob rather than the network.\nBob creates a child transaction keeping 200 and giving 199.9 (0.1 usd\nfee) back to Alice.\n\nBut you know, Alice wants to double spend.\nShe double spends 399.8 to herself (0.2 fee)\nBob thinks \"last chance\", he double-spends the child: 200 to Bob, back\n199 to Alice (1 usd fee).\nAlice is stubborn: 398 to Alice (2 usd fee).\nBob is really pissed off, double spends the child: 400 in fees.\n\nSo, ok, Bob lost the phone and got nothing but Alice has paid twice as\nshe needed for the phone.\nNobody's happy thus everybody's happy.\n\nThis is similar to the general game theory \"stag hunt\" case.\nThe payoff matrix could be something like this:\n\n                        Bob returns change   Bob burns in fees\n ---------------------+--------------------+-------------------\n  Alice behaves         + 1 , + 1            - 1, + 1\n ---------------------+--------------------+-------------------\n  Alice double-spends   + 3, - 1             - 1, - 1\n\nThe game has two Nash equilibria, but cooperation is Pareto efficient.\n\nReplace-by-fee and child-pays-for parent cannot be prohibited by a\nprotocol rule.\nI believe all miners will eventually implement these policies because\nit is the more rational way for them to prioritize transactions.\nFinally I hope they do because it would make 0-confirmation\ntransactions possible as described in this post.\nSo I can't find any reasoning against replace-by-fee unless my example\nis terribly flawed.\nAm I missing something?\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T11:54:19",
                "message_text_only": ">\n> Am I missing something?\n\n\nThe scheme you described does nothing about Finney attacks, which is the\nissue presently faced.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/9afc906e/attachment.html>"
            },
            {
                "author": "Chris Pacia",
                "date": "2014-04-24T12:07:10",
                "message_text_only": "This scheme would discourage people from attempting a Finney attack because\nthey would end up worse off if they did.\n\nIt would work but it's an ugly hack IMO. What do people do if they don't\nhave extra to pay when making a purchase? I have 200 mbtc and want to buy a\n200 mbtc phone but I can't because I need 400 mbtc. Sucks for me.\n\nI would much prefer the hassle of a green address notary than always having\nto make sure I have double what I need to make a purchase.\nOn Apr 24, 2014 7:55 AM, \"Mike Hearn\" <mike at plan99.net> wrote:\n\n> Am I missing something?\n>\n>\n> The scheme you described does nothing about Finney attacks, which is the\n> issue presently faced.\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/af5cd2cc/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T12:15:13",
                "message_text_only": ">\n> This scheme would discourage people from attempting a Finney attack\n> because they would end up worse off if they did.\n>\nPhrased another way, it simply makes every block a Finney attack that\ncharges the maximum double spending fee possible. This doesn't solve the\nproblem.\n\nBeyond needing to double balances, what if the shop is selling me a phone\non contract? So the actual cost of the phone is lower than the real price\non the assumption of future revenue. Alice double spends (aka steals) the\nphone, paying double the artifically lower cost but still making a good\nsaving. Bob does not end up with \"nothing\", he ends up in the red.\n\nBut there's a much simpler way to dispose with this idea. Jorge, go down to\nyour local bars and cafes, and ask them if they'd be willing to accept a\nform of payment that allows anyone to steal from them by simply paying\ndouble the purchase price to some other random guy. They *will* look at you\nas if you're crazy. Why would they ever do that?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/04073c89/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-24T14:49:31",
                "message_text_only": "On 4/24/14, Mike Hearn <mike at plan99.net> wrote:\n>>\n>> This scheme would discourage people from attempting a Finney attack\n>> because they would end up worse off if they did.\n>>\n> Phrased another way, it simply makes every block a Finney attack that\n> charges the maximum double spending fee possible. This doesn't solve the\n> problem.\n\nThis solves regular double-spends, not Finney attacks, but finney\nattacks (which are not really the easiest attacks in the world) don't\nget any worse.\n\nOn 4/24/14, Chris Pacia <ctpacia at gmail.com> wrote:\n> It would work but it's an ugly hack IMO. What do people do if they don't\n> have extra to pay when making a purchase? I have 200 mbtc and want to buy a\n> 200 mbtc phone but I can't because I need 400 mbtc. Sucks for me.\n>\n> I would much prefer the hassle of a green address notary than always having\n> to make sure I have double what I need to make a purchase.\n\nThis scheme wouldn't be mandatory. You can still wait for\nconfirmations or rely somehow on existing trust instead if that's\nbetter for you on that situation.\n\n> Beyond needing to double balances, what if the shop is selling me a phone\n> on contract? So the actual cost of the phone is lower than the real price\n> on the assumption of future revenue. Alice double spends (aka steals) the\n> phone, paying double the artifically lower cost but still making a good\n> saving. Bob does not end up with \"nothing\", he ends up in the red.\n\nSybil attacks aside, Alice can't save anything, period. If she tries\nshe will end up losing it all.\nI don't see how signing a longer term contract protects her in any way.\n\n> But there's a much simpler way to dispose with this idea. Jorge, go down to\n> your local bars and cafes, and ask them if they'd be willing to accept a\n> form of payment that allows anyone to steal from them by simply paying\n> double the purchase price to some other random guy. They *will* look at you\n> as if you're crazy. Why would they ever do that?\n\nThey would do that to avoid having to wait for a confirmation or two\n(I think one is good enough for most small purchases) when being paid\nby people they don't trust just before they leave.\nMaybe they prefer to just make people wait if they think that will\nmake them pay up-front.\nThis is completely optional and only an improvement on the current situation.\n\nOf course if we're not comparing this with Bitcoin today and we're\ncomparing it to some theoretical mechanism for instant p2p\nserialization without requiring proof of work then, yes, this concept\nis not very interesting."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-24T15:45:36",
                "message_text_only": ">\n> Of course if we're not comparing this with Bitcoin today and we're\n> comparing it to some theoretical mechanism for instant p2p\n> serialization without requiring proof of work then, yes, this concept\n> is not very interesting.\n>\n\nBitcoin's competition is not some theoretical perfect p2p system but\nrather, bank notes and credit cards.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/05f0277e/attachment.html>"
            },
            {
                "author": "Jannis Froese",
                "date": "2014-04-24T17:13:08",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 24.04.2014 14:15, Mike Hearn wrote:\n> Beyond needing to double balances, what if the shop is selling me a\n> phone on contract? So the actual cost of the phone is lower than\n> the real price on the assumption of future revenue. Alice double\n> spends (aka steals) the phone, paying double the artifically lower\n> cost but still making a good saving. Bob does not end up with\n> \"nothing\", he ends up in the red.\n\nNearly every payment system in existence has this problem: you have to\nbe able to enforce the contract out-of-band. The scenario you describe\nis no worse than a payment network with instant, secure confirmations\nbecause Alice could just as well refuse to make the second payment.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2.0.22 (MingW32)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJTWUYdAAoJEBrvn3PsoRcmT28QAJNbxjLRPYvkIfizeHoAFRH2\npNfd9458/AECJ6muGAs+tYeDw9uhYMVPnbMLZOwzgPl8HE5NN9XbGjCpwpNzsEK4\na8zb5CsonBh+xBNgbx1CIjCNYYQLd2qmgxMVaH4R7VWS+DgVBjfKq5MnM0vdSNcw\nSSzb9dMEjgl1cOZa07CG4GuPwEUIFiCVygjYSrGP2E8qCepKvH+0webIXk7COqZK\nSyhTdhS+dsdgGW5Mm8cA8zIVPaWYXMo88kOq2S4fIs5HiWtnVXQ9ljJ4r2Py1SEO\nH3u4lMWc7Hu0PUW6b6K+uDQfyJtRNi0diJSswseA37v6BeQW4zYMNfL40AsnG+Fv\nMusJFtBqHzXKhAeE/zpwi5QWs/qHvRYlETifIMKMrQldssDJo15ed/M8wNCZRobv\nQ7K3XKOt228nUUP2FrZl1I4wGWwkBMpzP89t8HMrTZYV2EFWqE+lu9oXcEjz9k12\n64UXiWXU0jRAhMiCAvQUL7fKaOb9TXfGPy+3+bZOAtKM5M582+0d94EObA67SBsm\nO4H5vLTwS041x1cndW0NDxDbtM+IAuu2Jorzqzcie3ld7cqsKAyDbSk3i1C7zQzG\nhvI6FxIy0n6GA9ciw8RM44Q4zPVxYQ4e/MMby9ko7otmL5HLlOCnOUmJ/JHn+QJG\nZ7MDRkKAslLUUEqzgQWb\n=HNO6\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-25T04:51:23",
                "message_text_only": "On 24/04/14 22:07, Chris Pacia wrote:\n> It would work but it's an ugly hack IMO. What do people do if they don't\n> have extra to pay when making a purchase? I have 200 mbtc and want to\n> buy a 200 mbtc phone but I can't because I need 400 mbtc. Sucks for me.\n\nI don't see why it couldn't work with just 200mBTC.\n* you sign a 200mBTC TX to me, walk out of my shop with the phone\n* you immediately sign & broadcast a double-spend TX with higher fee\n* my POS computer (or BitPay's) sees the double spend, immediately\nspends the initial TX to fees, and sounds the shoplifting alarm.\n\nYou don't get any money back, but you do get an angry shopkeeper chasing\nyou down the street / calling the police / blacklisting you from the\nstore. Assuming my POS computer's behaviour was completely automated and\nwidespread - and therefore predictable on your part - why would you ever\ntry this?\n\nThe number of people irrational enough to try this /knowing it never\nworks/ is likely to be way lower than the number who just stuff the\nphone in their pocket and shoplift the old fashioned way. So I'd be\ncomfortable without the extra 200mBTC collateral :-)\n\n\n\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/6303edf4/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-25T10:19:12",
                "message_text_only": ">\n> You don't get any money back, but you do get an angry shopkeeper chasing\n> you down the street / calling the police / blacklisting you from the\n> store.\n>\n\nIf they could do that they'd just take the stolen property back and you\nwould have failed to spend your money twice. So this is by definition, not\na successful double spend. We are worried about the cases when you could\nsuccessfully double spend, and the only thing stopping you is Bitcoin.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/0678d3da/attachment.html>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-25T13:38:06",
                "message_text_only": "On 25/04/14 20:19, Mike Hearn wrote:\n>     You don't get any money back, but you do get an angry shopkeeper chasing\n>     you down the street / calling the police / blacklisting you from the\n>     store.\n> \n> \n> If they could do that they'd just take the stolen property back and you\n> would have failed to spend your money twice. So this is by definition,\n> not a successful double spend. We are worried about the cases when you\n> could successfully double spend, and the only thing stopping you is Bitcoin.\n\nYou might not succeed in catching them, but however small the risk of\ngetting caught is, they're taking that risk for an assured zero gain.\nAny rational attacker would therefore not bother.\n\nI think it's a very elegant solution to the typical \"broadcast double\nspend\" attack. Of course it unfortunately does nothing to stop a\ndishonest mining pool from secretly working on your double spend for a\nfee. But that breaks down to:\n* trade first and hope the dishonest pool finds the next block\n* the dishonest pool finds and withholds the block while you trade\n\nWe can discount the second one entirely - the orphan risk makes it very\nexpensive to execute, and people are typically accepting zero-conf for\nlow value items like cups of coffee. For high value items it is probably\nreasonable (and hopefully common practice?) to wait for a block.\n\nSo we're left with the first situation. As others have noted, given a\ndishonest pool with 5% total hashrate, a dedicated attack is out (unless\nyou want to end up actually buying goods to 20x the value of the attack\nin the process.)\n\nThat leaves the opportunists, who press the \"attempt to take-back 70% of\nthis transaction\" (remember the pool gets their cut) every time they buy\na coffee and very occasionally get lucky. They're the only unsolvable\nproblem I can see here. It remains to be seen how many such opportunists\nwe'll end up with, or how much hashrate the dishonest pool can actually\nattract.\n\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 555 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/4eec67b2/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-24T12:59:53",
                "message_text_only": "On Thu, Apr 24, 2014 at 12:48:54PM +0200, Jorge Tim\u00f3n wrote:\n> Here is a solution to the problem of having 0 confirmation\n> transactions\n\nFWIW I'm running an experiment right now to detect how easy it is to\ndoublespend 0-conf transactions I need to collect more data, but initial\nresults indicate that transaction propagation is sufficiently unreliable\nthat double-spending frequently works without miners using\nreplace-by-fee even when both transactions pay high fees, there is a 60\nsecond delay between first and second, and there's only about four\nreplace-by-fee nodes on the network.\n\nWith replace-by-fee scorched-earth the success rate of such\ndouble-spends would be significantly reduced as the attacker would need\nto get lucky with bad propagation not just once, but twice in a row.\n\n> that relies on game\n> theory and most miners implementing replace-by-fee and child-pays-for-parent.\n> \n> This has been proposed before\n> http://sourceforge.net/p/bitcoin/mailman/message/30876033/\n> I'm just going to describe the general idea in more detail.\n\nJust to be clear, while that post is mine, original credit for the idea\nactually goes to John Dillon as far as I know; I first heard about it\nfrom him in private discussion.\n\n> Replace-by-fee and child-pays-for parent cannot be prohibited by a\n> protocol rule.\n> I believe all miners will eventually implement these policies because\n> it is the more rational way for them to prioritize transactions.\n> Finally I hope they do because it would make 0-confirmation\n> transactions possible as described in this post.\n> So I can't find any reasoning against replace-by-fee unless my example\n> is terribly flawed.\n> Am I missing something?\n\nA few things:\n\n1) Replace-by-fee doesn't protect against sybil attacks; only\nconfirmations are solid evidence that a transaction has actually reached\nthe mining power and your communication channel to that mining power\nisn't being blocked. Keep in mind that Bitcoin depends on the existence\nof a jam-free network, and very importantly, lets you detect when that\nnetwork has failed and you are being jammed. No unconfirmed transaction\nscheme can solve this problem in a decentralized network.\n\n2) Replace-by-fee scorched earth does require you to keep private keys\nonline to sign the replacements. Not a big deal, but it's yet another\nreason why you wouldn't want to use it for high-value stuff.\n\n3) It doesn't directly solve finney attacks(1) where the miner mines the\ntransaction in private. However finney attacks are only relevant if\nthere is high centralization of hashing power, and all other proposed\nmechanisms, e.g. coinbase reallocation, themselves do a lot of harm to\ndecentralization. (just look at how coinbase reallocation lets large\npools bully smaller miners out of business by blacklisting their blocks)\n\nOne interesting thing with regard to finney attacks and replace-by-fee\nthough is that enforcing hasher visibility of the blocks they are mining\n- what getblocktemplate was meant to do voluntarily - lets any hasher\ndetect a finney attack double-spend and broadcast it. They have a weak\nincentive to do so - the scorched earth reply is a high-fee transaction\nof course and pre-broadcasting transactions makes blocks propagate\nfaster - at which point you're back to a public double-spend.  Enforcing\nvisibility of block contents to hashers is definitely a good thing for\ndecentralization.\n\n1) https://bitcointalk.org/index.php?topic=3441.msg48384#msg48384\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000093d8af23978adc9e201a1f2e2dc52844f9013a1da3621572\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/5fb4a89a/attachment.sig>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-24T14:20:10",
                "message_text_only": "On 4/24/14, Peter Todd <pete at petertodd.org> wrote:\n> ...\n> With replace-by-fee scorched-earth the success rate of such\n> double-spends would be significantly reduced as the attacker would need\n> to get lucky with bad propagation not just once, but twice in a row.\n\nInteresting.\n\n>> Replace-by-fee and child-pays-for parent cannot be prohibited by a\n>> protocol rule.\n>> I believe all miners will eventually implement these policies because\n>> it is the more rational way for them to prioritize transactions.\n>> Finally I hope they do because it would make 0-confirmation\n>> transactions possible as described in this post.\n>> So I can't find any reasoning against replace-by-fee unless my example\n>> is terribly flawed.\n>> Am I missing something?\n>\n> A few things:\n>\n> 1) Replace-by-fee doesn't protect against sybil attacks; only\n\nNo worse than the current situation.\n\n> 2) Replace-by-fee scorched earth does require you to keep private keys\n> online to sign the replacements. Not a big deal, but it's yet another\n> reason why you wouldn't want to use it for high-value stuff.\n\nHigh-value transactions should wait for several confirmations.\n\n> 3) It doesn't directly solve finney attacks(1) where the miner mines the\n> transaction in private. However finney attacks are only relevant if\n> there is high centralization of hashing power, and all other proposed\n> mechanisms, e.g. coinbase reallocation, themselves do a lot of harm to\n> decentralization. (just look at how coinbase reallocation lets large\n> pools bully smaller miners out of business by blacklisting their blocks)\n\nAgain, no worse than the current situation. And regular double-spends\nattacks are much simpler than finney attacks.\n\n> One interesting thing with regard to finney attacks and replace-by-fee\n> though is that enforcing hasher visibility of the blocks they are mining\n> - what getblocktemplate was meant to do voluntarily - lets any hasher\n> detect a finney attack double-spend and broadcast it. They have a weak\n> incentive to do so - the scorched earth reply is a high-fee transaction\n> of course and pre-broadcasting transactions makes blocks propagate\n> faster - at which point you're back to a public double-spend.  Enforcing\n> visibility of block contents to hashers is definitely a good thing for\n> decentralization.\n\nWhere can I read more about \"enforcing hashing visibility of block contents\"?\nSounds somewhat similar to p2pool to me but I'm not sure I understand it."
            }
        ],
        "thread_summary": {
            "title": "0 confirmation txs using replace-by-fee and game theory",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Peter Todd",
                "Jannis Froese",
                "Gareth Williams",
                "Jorge Tim\u00f3n",
                "Chris Pacia"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 20315
        }
    },
    {
        "title": "[Bitcoin-development] Fwd: Coinbase reallocation to discourage Finney attacks",
        "thread_messages": [
            {
                "author": "Adam Ritter",
                "date": "2014-04-24T14:52:14",
                "message_text_only": "I wouldn't mind having $5 of my money held at\nApple/Google/VISA/Mastercard/BitPay (and I wouldn't be sad of losing $5 if\nany of these companies go bankrupt).\nActually I had in mind creating a centralized version of Bitcoin for\nultra-fast payments. With keeping all addresses on SSDs, asking for 1 cent\n/ address month, 1 cent / transaction should be possible to reach even with\n6x replication. Companies could compete in price as long as the API is\nstandardized. Automatic top-up should be simple as well.\n\n\nOn Wed, Apr 23, 2014 at 10:53 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> On Wed, Apr 23, 2014 at 1:44 PM, Adam Ritter <aritter at gmail.com> wrote:\n> > Isn't a faster blockchain for transactions (maybe as a sidechain) solving\n> > the problem? If there would be a safe way for 0-confirmation\n> transactions,\n> > the Bitcoin blockchain wouldn't even be needed.\n>\n> Large scale consensus can't generally provide instantly irreversible\n> transactions directly: Increasing the block speed can't help past the\n> point where the time starts getting close to the network diameter...\n> you simply can't tell what a consensus of a group of nodes is until\n> several times the light cone that includes all of them.  And if you\n> start getting close to the limit you dilute the power working on the\n> consensus and potentially make life easier for a large attacker.\n>\n> Maybe other chains with different parameters could achieve a different\n> tradeoff which was better suited to low value retail transactions\n> (e.g. where you want a soft confirmation fast). A choice of tradeoffs\n> could be very useful, and maybe you can practically get close enough\n> (e.g. would knowing you lost a zero-conf double spend within 30\n> seconds 90% of the time be good enough?)... but I'm not aware of any\n> silver bullet there which gives you something identical to what a\n> centralized service can give you without invoking at least a little\n> bit of centralization.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140424/7ace8643/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fwd: Coinbase reallocation to discourage Finney attacks",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Adam Ritter"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2141
        }
    },
    {
        "title": "[Bitcoin-development] Proof-of-Stake branch?",
        "thread_messages": [
            {
                "author": "Stephen Reed",
                "date": "2014-04-24T23:32:15",
                "message_text_only": "Hello all.\n\nI understand that Proof-of-Stake as a replacement for Proof-of-Work is a prohibited yet disputed change to Bitcoin Core. I would like to create a Bitcoin branch that provides a sandboxed testbed for researching the best PoS implementations. In the years to come, perhaps circumstances might arise, such as shifting of user opinion as to whether PoS should be moved from the prohibited list to the hard-fork list.\n-----\n\nA poll I conducted today on bitcointalk,\u00a0https://bitcointalk.org/index.php?topic=581635.0\u00a0with an attention-grabbing title suggests some minority support for Bitcoin Proof-of-Stake. I invite any of you to critically comment on that thread.\n\n\"Annual 10% bitcoin dividends can be ours if  Proof-of-Stake full nodes outnumber existing Proof-of-Work full nodes by three-to-one. What is your choice?\"\n\n\"I do not care or do not know enough.\" - 5 (16.1%)\u00a0\n\"I would download and run the existing Proof-of-Work program to fight the change.\" - 14 (45.2%)\u00a0\n\"I would download and run the new Proof-of-Stake program to favor the change. \" - 12 (38.7%)\u00a0\nTotal Voters: 31 \n-----\n\nBefore I branch the source code and learn the proper way of doing things in this community, I ask you simply if creating the branch is harmful? My goal is to develop, test and document PoS, while exploring its vulnerabilities and fixing them in a transparent fashion.\n\nThanks for taking a bit of your time to read this message.\n\n-Steve\n\nStephen L. Reed\n\nAustin, Texas, USA\n512.791.7860"
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2014-04-25T07:33:34",
                "message_text_only": "Do it. Someone will scream harm. The loudest voices screaming how it would\nbe harmful are doing the most harm.\n\nThe only way to know is build it, and test it. If the network breaks, then\nit is better we find out sooner rather than later.\n\nMy only suggestion is call it 'bitstake' or something to clearly differentiate\nit from Bitcoin. This also might be an interesting application of the side\nchains concept Peter Todd has discussed.\n\nOn Thu, Apr 24, 2014 at 04:32:15PM -0700, Stephen Reed wrote:\n> Hello all.\n> \n> I understand that Proof-of-Stake as a replacement for Proof-of-Work is a prohibited yet disputed change to Bitcoin Core. I would like to create a Bitcoin branch that provides a sandboxed testbed for researching the best PoS implementations. In the years to come, perhaps circumstances might arise, such as shifting of user opinion as to whether PoS should be moved from the prohibited list to the hard-fork list.\n> -----\n> \n> A poll I conducted today on bitcointalk,\u00a0https://bitcointalk.org/index.php?topic=581635.0\u00a0with an attention-grabbing title suggests some minority support for Bitcoin Proof-of-Stake. I invite any of you to critically comment on that thread.\n> \n> \"Annual 10% bitcoin dividends can be ours if  Proof-of-Stake full nodes outnumber existing Proof-of-Work full nodes by three-to-one. What is your choice?\"\n> \n> \"I do not care or do not know enough.\" - 5 (16.1%)\u00a0\n> \"I would download and run the existing Proof-of-Work program to fight the change.\" - 14 (45.2%)\u00a0\n> \"I would download and run the new Proof-of-Stake program to favor the change. \" - 12 (38.7%)\u00a0\n> Total Voters: 31 \n> -----\n> \n> Before I branch the source code and learn the proper way of doing things in this community, I ask you simply if creating the branch is harmful? My goal is to develop, test and document PoS, while exploring its vulnerabilities and fixing them in a transparent fashion.\n> \n> Thanks for taking a bit of your time to read this message.\n\n\n\n\n-- \n----------------------------------------------------------------------------\nTroy Benjegerdes                 'da hozer'                  hozer at hozed.org\n7 elements      earth::water::air::fire::mind::spirit::soul        grid.coop\n\n      Never pick a fight with someone who buys ink by the barrel,\n         nor try buy a hacker who makes money by the megahash"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-26T20:39:28",
                "message_text_only": "There's no need to be confrontational. I don't think anyone here objects\nto the basic concept of proof-of-stake. Some people, myself included,\nhave proposed protocols which involve some sort of proof of stake\nmechanism, and the idea itself originated as a mechanism for eliminating\ncheckpoints, something which is very much on topic and of concern to\nmany here.\n\nThe problems come when one tries to *replace* proof-of-work mining with\nproof-of-stake \"mining.\" You encounter problems related to the fact that\nwith proof-of-stake nothing is actually at stake. You are free to sign\nas many different forks as you wish, and worse have incentive to do so,\nbecause whatever fork does win, you want it to be yours. In the worst\ncase this results in double-spends at will, and in the best case with\nany of the various proposed protections deployed, it merely reduces to\nproof-of-work as miners grind blocks until they find one that names them\nor one of their sock puppets as the signer of the next block.\n\nI sincerely doubt you will find a solution to this, as it appears to be\na fundamental issue with proof-of-stake, in that it must leverage an\nexisting mechanism for enforced scarcity (e.g. proof-of-work) in order\nto work in a consensus algorithm. Is there some solution that you have\nin mind for this?\n\nMark\n\nOn 04/25/2014 12:33 AM, Troy Benjegerdes wrote:\n> Do it. Someone will scream harm. The loudest voices screaming how it would\n> be harmful are doing the most harm.\n> \n> The only way to know is build it, and test it. If the network breaks, then\n> it is better we find out sooner rather than later.\n> \n> My only suggestion is call it 'bitstake' or something to clearly differentiate\n> it from Bitcoin. This also might be an interesting application of the side\n> chains concept Peter Todd has discussed.\n> \n> On Thu, Apr 24, 2014 at 04:32:15PM -0700, Stephen Reed wrote:\n>> Hello all.\n>>\n>> I understand that Proof-of-Stake as a replacement for Proof-of-Work is a prohibited yet disputed change to Bitcoin Core. I would like to create a Bitcoin branch that provides a sandboxed testbed for researching the best PoS implementations. In the years to come, perhaps circumstances might arise, such as shifting of user opinion as to whether PoS should be moved from the prohibited list to the hard-fork list.\n>> -----\n>>\n>> A poll I conducted today on bitcointalk, https://bitcointalk.org/index.php?topic=581635.0 with an attention-grabbing title suggests some minority support for Bitcoin Proof-of-Stake. I invite any of you to critically comment on that thread.\n>>\n>> \"Annual 10% bitcoin dividends can be ours if  Proof-of-Stake full nodes outnumber existing Proof-of-Work full nodes by three-to-one. What is your choice?\"\n>>\n>> \"I do not care or do not know enough.\" - 5 (16.1%) \n>> \"I would download and run the existing Proof-of-Work program to fight the change.\" - 14 (45.2%) \n>> \"I would download and run the new Proof-of-Stake program to favor the change. \" - 12 (38.7%) \n>> Total Voters: 31 \n>> -----\n>>\n>> Before I branch the source code and learn the proper way of doing things in this community, I ask you simply if creating the branch is harmful? My goal is to develop, test and document PoS, while exploring its vulnerabilities and fixing them in a transparent fashion.\n>>\n>> Thanks for taking a bit of your time to read this message.\n> \n> \n> \n>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-26T23:44:13",
                "message_text_only": "What about using fraud proofs? Your coinbase only matures if nobody publishes proof that you signed a competing block. \n\nThen something is at least at stake. When it's your chance to sign a block, attempting to sign and publish more than one at the same height reliably punishes you (you effectively waste your chance and receive no reward.)\n\nI can't remember who I saw discussing this idea. Might have been Vitalik Buterin?\n\nOn 27 April 2014 6:39:28 AM AEST, Mark Friedenbach <mark at monetize.io> wrote:\n>There's no need to be confrontational. I don't think anyone here\n>objects\n>to the basic concept of proof-of-stake. Some people, myself included,\n>have proposed protocols which involve some sort of proof of stake\n>mechanism, and the idea itself originated as a mechanism for\n>eliminating\n>checkpoints, something which is very much on topic and of concern to\n>many here.\n>\n>The problems come when one tries to *replace* proof-of-work mining with\n>proof-of-stake \"mining.\" You encounter problems related to the fact\n>that\n>with proof-of-stake nothing is actually at stake. You are free to sign\n>as many different forks as you wish, and worse have incentive to do so,\n>because whatever fork does win, you want it to be yours. In the worst\n>case this results in double-spends at will, and in the best case with\n>any of the various proposed protections deployed, it merely reduces to\n>proof-of-work as miners grind blocks until they find one that names\n>them\n>or one of their sock puppets as the signer of the next block.\n>\n>I sincerely doubt you will find a solution to this, as it appears to be\n>a fundamental issue with proof-of-stake, in that it must leverage an\n>existing mechanism for enforced scarcity (e.g. proof-of-work) in order\n>to work in a consensus algorithm. Is there some solution that you have\n>in mind for this?\n>\n>Mark\n>\n>On 04/25/2014 12:33 AM, Troy Benjegerdes wrote:\n>> Do it. Someone will scream harm. The loudest voices screaming how it\n>would\n>> be harmful are doing the most harm.\n>> \n>> The only way to know is build it, and test it. If the network breaks,\n>then\n>> it is better we find out sooner rather than later.\n>> \n>> My only suggestion is call it 'bitstake' or something to clearly\n>differentiate\n>> it from Bitcoin. This also might be an interesting application of the\n>side\n>> chains concept Peter Todd has discussed.\n>> \n>> On Thu, Apr 24, 2014 at 04:32:15PM -0700, Stephen Reed wrote:\n>>> Hello all.\n>>>\n>>> I understand that Proof-of-Stake as a replacement for Proof-of-Work\n>is a prohibited yet disputed change to Bitcoin Core. I would like to\n>create a Bitcoin branch that provides a sandboxed testbed for\n>researching the best PoS implementations. In the years to come, perhaps\n>circumstances might arise, such as shifting of user opinion as to\n>whether PoS should be moved from the prohibited list to the hard-fork\n>list.\n>>> -----\n>>>\n>>> A poll I conducted today on bitcointalk,\n>https://bitcointalk.org/index.php?topic=581635.0 with an\n>attention-grabbing title suggests some minority support for Bitcoin\n>Proof-of-Stake. I invite any of you to critically comment on that\n>thread.\n>>>\n>>> \"Annual 10% bitcoin dividends can be ours if  Proof-of-Stake full\n>nodes outnumber existing Proof-of-Work full nodes by three-to-one. What\n>is your choice?\"\n>>>\n>>> \"I do not care or do not know enough.\" - 5 (16.1%) \n>>> \"I would download and run the existing Proof-of-Work program to\n>fight the change.\" - 14 (45.2%) \n>>> \"I would download and run the new Proof-of-Stake program to favor\n>the change. \" - 12 (38.7%) \n>>> Total Voters: 31 \n>>> -----\n>>>\n>>> Before I branch the source code and learn the proper way of doing\n>things in this community, I ask you simply if creating the branch is\n>harmful? My goal is to develop, test and document PoS, while exploring\n>its vulnerabilities and fixing them in a transparent fashion.\n>>>\n>>> Thanks for taking a bit of your time to read this message.\n>> \n>> \n>> \n>> \n>\n>------------------------------------------------------------------------------\n>Start Your Social Network Today - Download eXo Platform\n>Build your Enterprise Intranet with eXo Platform Software\n>Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>http://p.sf.net/sfu/ExoPlatform\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-27T01:22:07",
                "message_text_only": "That makes double-spends trivially easy: sign two blocks, withholding\none. Then at a later point in time reveal the second signed block\n(demonstrating your own fraud) and force a reorg.\n\nOn 04/26/2014 04:44 PM, Gareth Williams wrote:\n> What about using fraud proofs? Your coinbase only matures if nobody publishes proof that you signed a competing block. \n> \n> Then something is at least at stake. When it's your chance to sign a block, attempting to sign and publish more than one at the same height reliably punishes you (you effectively waste your chance and receive no reward.)\n> \n> I can't remember who I saw discussing this idea. Might have been Vitalik Buterin?\n> \n> On 27 April 2014 6:39:28 AM AEST, Mark Friedenbach <mark at monetize.io> wrote:\n>> There's no need to be confrontational. I don't think anyone here\n>> objects\n>> to the basic concept of proof-of-stake. Some people, myself included,\n>> have proposed protocols which involve some sort of proof of stake\n>> mechanism, and the idea itself originated as a mechanism for\n>> eliminating\n>> checkpoints, something which is very much on topic and of concern to\n>> many here.\n>>\n>> The problems come when one tries to *replace* proof-of-work mining with\n>> proof-of-stake \"mining.\" You encounter problems related to the fact\n>> that\n>> with proof-of-stake nothing is actually at stake. You are free to sign\n>> as many different forks as you wish, and worse have incentive to do so,\n>> because whatever fork does win, you want it to be yours. In the worst\n>> case this results in double-spends at will, and in the best case with\n>> any of the various proposed protections deployed, it merely reduces to\n>> proof-of-work as miners grind blocks until they find one that names\n>> them\n>> or one of their sock puppets as the signer of the next block.\n>>\n>> I sincerely doubt you will find a solution to this, as it appears to be\n>> a fundamental issue with proof-of-stake, in that it must leverage an\n>> existing mechanism for enforced scarcity (e.g. proof-of-work) in order\n>> to work in a consensus algorithm. Is there some solution that you have\n>> in mind for this?\n>>\n>> Mark\n>>\n>> On 04/25/2014 12:33 AM, Troy Benjegerdes wrote:\n>>> Do it. Someone will scream harm. The loudest voices screaming how it\n>> would\n>>> be harmful are doing the most harm.\n>>>\n>>> The only way to know is build it, and test it. If the network breaks,\n>> then\n>>> it is better we find out sooner rather than later.\n>>>\n>>> My only suggestion is call it 'bitstake' or something to clearly\n>> differentiate\n>>> it from Bitcoin. This also might be an interesting application of the\n>> side\n>>> chains concept Peter Todd has discussed.\n>>>\n>>> On Thu, Apr 24, 2014 at 04:32:15PM -0700, Stephen Reed wrote:\n>>>> Hello all.\n>>>>\n>>>> I understand that Proof-of-Stake as a replacement for Proof-of-Work\n>> is a prohibited yet disputed change to Bitcoin Core. I would like to\n>> create a Bitcoin branch that provides a sandboxed testbed for\n>> researching the best PoS implementations. In the years to come, perhaps\n>> circumstances might arise, such as shifting of user opinion as to\n>> whether PoS should be moved from the prohibited list to the hard-fork\n>> list.\n>>>> -----\n>>>>\n>>>> A poll I conducted today on bitcointalk,\n>> https://bitcointalk.org/index.php?topic=581635.0 with an\n>> attention-grabbing title suggests some minority support for Bitcoin\n>> Proof-of-Stake. I invite any of you to critically comment on that\n>> thread.\n>>>>\n>>>> \"Annual 10% bitcoin dividends can be ours if  Proof-of-Stake full\n>> nodes outnumber existing Proof-of-Work full nodes by three-to-one. What\n>> is your choice?\"\n>>>>\n>>>> \"I do not care or do not know enough.\" - 5 (16.1%) \n>>>> \"I would download and run the existing Proof-of-Work program to\n>> fight the change.\" - 14 (45.2%) \n>>>> \"I would download and run the new Proof-of-Stake program to favor\n>> the change. \" - 12 (38.7%) \n>>>> Total Voters: 31 \n>>>> -----\n>>>>\n>>>> Before I branch the source code and learn the proper way of doing\n>> things in this community, I ask you simply if creating the branch is\n>> harmful? My goal is to develop, test and document PoS, while exploring\n>> its vulnerabilities and fixing them in a transparent fashion.\n>>>>\n>>>> Thanks for taking a bit of your time to read this message.\n>>>\n>>>\n>>>\n>>>\n>>\n>> ------------------------------------------------------------------------------\n>> Start Your Social Network Today - Download eXo Platform\n>> Build your Enterprise Intranet with eXo Platform Software\n>> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>> http://p.sf.net/sfu/ExoPlatform\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gareth Williams",
                "date": "2014-04-27T02:01:44",
                "message_text_only": "Who said anything about a re-org? The original block remains valid, your block reward is just zero, upon maturity, in light of a valid fraud proof.\n\nie. the \"coinbase confiscation\" that I was just arguing against in another thread :P but of course here based on cryptographic proof, not human judgement.\n\nOn 27 April 2014 11:22:07 AM AEST, Mark Friedenbach <mark at monetize.io> wrote:\n>That makes double-spends trivially easy: sign two blocks, withholding\n>one. Then at a later point in time reveal the second signed block\n>(demonstrating your own fraud) and force a reorg.\n>\n>On 04/26/2014 04:44 PM, Gareth Williams wrote:\n>> What about using fraud proofs? Your coinbase only matures if nobody\n>publishes proof that you signed a competing block. \n>> \n>> Then something is at least at stake. When it's your chance to sign a\n>block, attempting to sign and publish more than one at the same height\n>reliably punishes you (you effectively waste your chance and receive no\n>reward.)\n>> \n>> I can't remember who I saw discussing this idea. Might have been\n>Vitalik Buterin?\n>> \n>> On 27 April 2014 6:39:28 AM AEST, Mark Friedenbach <mark at monetize.io>\n>wrote:\n>>> There's no need to be confrontational. I don't think anyone here\n>>> objects\n>>> to the basic concept of proof-of-stake. Some people, myself\n>included,\n>>> have proposed protocols which involve some sort of proof of stake\n>>> mechanism, and the idea itself originated as a mechanism for\n>>> eliminating\n>>> checkpoints, something which is very much on topic and of concern to\n>>> many here.\n>>>\n>>> The problems come when one tries to *replace* proof-of-work mining\n>with\n>>> proof-of-stake \"mining.\" You encounter problems related to the fact\n>>> that\n>>> with proof-of-stake nothing is actually at stake. You are free to\n>sign\n>>> as many different forks as you wish, and worse have incentive to do\n>so,\n>>> because whatever fork does win, you want it to be yours. In the\n>worst\n>>> case this results in double-spends at will, and in the best case\n>with\n>>> any of the various proposed protections deployed, it merely reduces\n>to\n>>> proof-of-work as miners grind blocks until they find one that names\n>>> them\n>>> or one of their sock puppets as the signer of the next block.\n>>>\n>>> I sincerely doubt you will find a solution to this, as it appears to\n>be\n>>> a fundamental issue with proof-of-stake, in that it must leverage an\n>>> existing mechanism for enforced scarcity (e.g. proof-of-work) in\n>order\n>>> to work in a consensus algorithm. Is there some solution that you\n>have\n>>> in mind for this?\n>>>\n>>> Mark\n>>>\n>>> On 04/25/2014 12:33 AM, Troy Benjegerdes wrote:\n>>>> Do it. Someone will scream harm. The loudest voices screaming how\n>it\n>>> would\n>>>> be harmful are doing the most harm.\n>>>>\n>>>> The only way to know is build it, and test it. If the network\n>breaks,\n>>> then\n>>>> it is better we find out sooner rather than later.\n>>>>\n>>>> My only suggestion is call it 'bitstake' or something to clearly\n>>> differentiate\n>>>> it from Bitcoin. This also might be an interesting application of\n>the\n>>> side\n>>>> chains concept Peter Todd has discussed.\n>>>>\n>>>> On Thu, Apr 24, 2014 at 04:32:15PM -0700, Stephen Reed wrote:\n>>>>> Hello all.\n>>>>>\n>>>>> I understand that Proof-of-Stake as a replacement for\n>Proof-of-Work\n>>> is a prohibited yet disputed change to Bitcoin Core. I would like to\n>>> create a Bitcoin branch that provides a sandboxed testbed for\n>>> researching the best PoS implementations. In the years to come,\n>perhaps\n>>> circumstances might arise, such as shifting of user opinion as to\n>>> whether PoS should be moved from the prohibited list to the\n>hard-fork\n>>> list.\n>>>>> -----\n>>>>>\n>>>>> A poll I conducted today on bitcointalk,\n>>> https://bitcointalk.org/index.php?topic=581635.0 with an\n>>> attention-grabbing title suggests some minority support for Bitcoin\n>>> Proof-of-Stake. I invite any of you to critically comment on that\n>>> thread.\n>>>>>\n>>>>> \"Annual 10% bitcoin dividends can be ours if  Proof-of-Stake full\n>>> nodes outnumber existing Proof-of-Work full nodes by three-to-one.\n>What\n>>> is your choice?\"\n>>>>>\n>>>>> \"I do not care or do not know enough.\" - 5 (16.1%) \n>>>>> \"I would download and run the existing Proof-of-Work program to\n>>> fight the change.\" - 14 (45.2%) \n>>>>> \"I would download and run the new Proof-of-Stake program to favor\n>>> the change. \" - 12 (38.7%) \n>>>>> Total Voters: 31 \n>>>>> -----\n>>>>>\n>>>>> Before I branch the source code and learn the proper way of doing\n>>> things in this community, I ask you simply if creating the branch is\n>>> harmful? My goal is to develop, test and document PoS, while\n>exploring\n>>> its vulnerabilities and fixing them in a transparent fashion.\n>>>>>\n>>>>> Thanks for taking a bit of your time to read this message.\n>>>>\n>>>>\n>>>>\n>>>>\n>>>\n>>>\n>------------------------------------------------------------------------------\n>>> Start Your Social Network Today - Download eXo Platform\n>>> Build your Enterprise Intranet with eXo Platform Software\n>>> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>>> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>>> http://p.sf.net/sfu/ExoPlatform\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>\n>------------------------------------------------------------------------------\n>Start Your Social Network Today - Download eXo Platform\n>Build your Enterprise Intranet with eXo Platform Software\n>Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>http://p.sf.net/sfu/ExoPlatform\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity."
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-28T12:03:54",
                "message_text_only": ">\n> I can't remember who I saw discussing this idea. Might have been Vitalik\n> Buterin?\n>\n\nYes, he described it in an article a couple of months ago:\n\nhttp://blog.ethereum.org/2014/01/15/slasher-a-punitive-proof-of-stake-algorithm/\n\nbut it is an old idea.\nFor example, I've mentioned punishment of this kind in discussion about\nPPCoin when it was released in 2012, and, I think, it was described in\nEtlase2's Decrit design.\n\nAlso, I and Iddo did some research on pure proof-of-stake, and it seems to\nbe feasible, in the sense that there are no obvious problems like \"nothing\nis actually at stake\". (Unfortunately I can't refer to it now as it isn't\npublished yet.)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140428/4d1fdaa3/attachment.html>"
            },
            {
                "author": "Stephen Reed",
                "date": "2014-04-25T10:35:00",
                "message_text_only": "My understanding is that sidechains require merged mining support and that sidechains create no coinbase transactions themselves. When Bitcoin Core supports the two-way peg then I would update my source code branch to incorporate that or any other change that is released. Ideally, when sidechains can work with PoW Bitcoin, then those same sidechains should work without any changes with PoS Bitcoin running in my testnet.\n\nI will be examining PPC, NXT and whitepapers for ideas that I can implement in such a way as the result can be called Bitcoin. The only difference would be the absence of wasteful Proof-of-Work, and the presence of mining rewards distributed to full nodes in proportion to the amount of bitcoin each is willing to expose to the network. Coin age is a good starting point. A reference peer-to-peer pool developed by me would be responsible for fairly distributing the mining rewards as daily dividend payments to PoS full node pool members.\n\nIn a few days, I plan to establish a Proof-of-Stake Bitcoin project thread in the Project Development sub-forum of Bitcointalk. We can continue the technical discussion there, starting with a list of principles.\n\n\nStephen L. Reed \nAustin, Texas, USA \n512.791.7860\n\nOn Friday, April 25, 2014 4:42 AM, Jeffrey Paul <sneak at acidhou.se> wrote:\n\nAre proof of stake blockchains compatible with the sidechain/two-way peg system invented by Greg (and maybe others - reports unclear)?\n>\n>http://letstalkbitcoin.com/blockchain-2-0-let-a-thousand-chains-blossom/\n>\n>It's my limited understanding that any sidechains in such a model are somewhat cryptographically tied to the PoW system that bitcoin's chain uses. I am seriously curious if alternate decentralized consensus algorithms (proof of execution, proof of stake, et c) are compatible with the sidechain universe as envisioned. \n>\n>Perhaps someone with a deeper technical understanding could explain how, if so, or if my incomplete hunch (that alternate consensus algorithms cannot retain compatibility with Bitcoin in a two way peg model) is correct.\n>\n>These sorts of \"alternate universe\" altcoin experiments with different proof models take on a different cost/benefit ratio if they can't ever interoperate as sidechains, which is why I'm curious. \n>\n>Best,\n>-jp\n>\n>-- \n>Jeffrey Paul\u00a0\u00a0\u00a0+1 (312) 361-0355\n>5539 AD00 DE4C 42F3 AFE1 1575 0524 43F4 DF2A 55C2\n>\n>\n>> On 25.04.2014, at 00:33, Troy Benjegerdes <hozer at hozed.org> wrote:\n>> \n>> This also might be an interesting application of the side\n>> chains concept Peter Todd has discussed.\n>\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-26T18:18:36",
                "message_text_only": "Please be aware that your emails are being spamfoldered by Gmail. This is\nbecause Yahoo has enabled DMARC enforcement for mail sent from Yahoo and\nthat renders it incompatible with Sourceforge mailing lists.\n\nThere are two fixes:\n\n1) Don't use Yahoo.\n\n2) The real fix which is, we should stop using Sourceforge mailing list\nsoftware\n\nFundamentally all Yahoo is saying with their policy is that rewriting of\nmails sent from their service is not allowed. This is a highly reasonable\npolicy, akin to forbidding SSL MITM attacks, but for email.\n\nThere are several ways to be compatible with this policy: unfortunately\nsf.net doesn't do any of them.\n\n\n\n\nOn Fri, Apr 25, 2014 at 12:35 PM, Stephen Reed <stephenreed at yahoo.com>wrote:\n\n> My understanding is that sidechains require merged mining support and that\n> sidechains create no coinbase transactions themselves. When Bitcoin Core\n> supports the two-way peg then I would update my source code branch to\n> incorporate that or any other change that is released. Ideally, when\n> sidechains can work with PoW Bitcoin, then those same sidechains should\n> work without any changes with PoS Bitcoin running in my testnet.\n>\n> I will be examining PPC, NXT and whitepapers for ideas that I can\n> implement in such a way as the result can be called Bitcoin. The only\n> difference would be the absence of wasteful Proof-of-Work, and the presence\n> of mining rewards distributed to full nodes in proportion to the amount of\n> bitcoin each is willing to expose to the network. Coin age is a good\n> starting point. A reference peer-to-peer pool developed by me would be\n> responsible for fairly distributing the mining rewards as daily dividend\n> payments to PoS full node pool members.\n>\n> In a few days, I plan to establish a Proof-of-Stake Bitcoin project thread\n> in the Project Development sub-forum of Bitcointalk. We can continue the\n> technical discussion there, starting with a list of principles.\n>\n>\n> Stephen L. Reed\n> Austin, Texas, USA\n> 512.791.7860\n>\n> On Friday, April 25, 2014 4:42 AM, Jeffrey Paul <sneak at acidhou.se> wrote:\n>\n> Are proof of stake blockchains compatible with the sidechain/two-way peg\n> system invented by Greg (and maybe others - reports unclear)?\n> >\n> >http://letstalkbitcoin.com/blockchain-2-0-let-a-thousand-chains-blossom/\n> >\n> >It's my limited understanding that any sidechains in such a model are\n> somewhat cryptographically tied to the PoW system that bitcoin's chain\n> uses. I am seriously curious if alternate decentralized consensus\n> algorithms (proof of execution, proof of stake, et c) are compatible with\n> the sidechain universe as envisioned.\n> >\n> >Perhaps someone with a deeper technical understanding could explain how,\n> if so, or if my incomplete hunch (that alternate consensus algorithms\n> cannot retain compatibility with Bitcoin in a two way peg model) is correct.\n> >\n> >These sorts of \"alternate universe\" altcoin experiments with different\n> proof models take on a different cost/benefit ratio if they can't ever\n> interoperate as sidechains, which is why I'm curious.\n> >\n> >Best,\n> >-jp\n> >\n> >--\n> >Jeffrey Paul   +1 (312) 361-0355\n> >5539 AD00 DE4C 42F3 AFE1 1575 0524 43F4 DF2A 55C2\n> >\n> >\n> >> On 25.04.2014, at 00:33, Troy Benjegerdes <hozer at hozed.org> wrote:\n> >>\n> >> This also might be an interesting application of the side\n> >> chains concept Peter Todd has discussed.\n> >\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/21500d1c/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Proof-of-Stake branch?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes",
                "Mike Hearn",
                "Gareth Williams",
                "Alex Mizrahi",
                "Mark Friedenbach",
                "Stephen Reed"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 30284
        }
    },
    {
        "title": "[Bitcoin-development] SmartSPV \u2013 A better Simplified Payment Verification for Smartphones",
        "thread_messages": [
            {
                "author": "Sergio Lerner",
                "date": "2014-04-25T04:52:44",
                "message_text_only": "In a previous e-mail Mike Hearn asked me how I was going to handle 17K\nblock headers a day in my NimbleCoin currency in a the SPV mode.\nI designed a variation of the standard headers-only SPV mode I called\nSmartSPV. This mode could also be implemented by BitcoinJ for Bitcoin.\n\nThe method is explained here:\nhttp://bitslog.wordpress.com/2014/04/25/smartspv-a-better-simplified-payment-verification-for-smartphones/\n\nBut I copy the whole blog post in this e-mail so you don't need to click\non it.\n\n\n    SmartSPV \u2013 A better Simplified Payment Verification for Smartphones\n\nNimbleCoin <http://NimbleCoin.com> is a new cryptocurrency I\u2019ll be\nhopefully launching soon. One of its nice features is that it uses the\nFastBlock5\n<http://bitslog.wordpress.com/2014/02/17/5-sec-block-interval/> protocol\n(a 5 seconds block interval) to achieve near instant payments. Because\nNimbleCoin also implements merged mining\n<http://bitslog.wordpress.com/2014/02/20/safe-merged-mining/>, each\nblock header can be as large as 700 bytes (including Merkle branch and\ncoinbase transaction). Yesterday Mike Hearn asked my a difficult\nquestion: how would NimbleCoin SPV nodes (such as the ones running on\nsmartphones) process tons of headers if the bandwidth is limited or the\nclients are disconnected from the Internet for long periods?\n\nThe answer is Smart-SPV, a variation of the standard SPV headers-only\n<https://en.bitcoin.it/wiki/Thin_Client_Security> mode that allows a\nsmartphone to keep a fairly accurate state of the wallet balance without\ndownloading all the missing headers and without sacrificing battery life\nand time.\n\nHeaders-only SPV clients\n<http://bitcoin.stackexchange.com/questions/11054/understanding-spv-simple-payment-verification>\ndownloads a complete copy of the headers for all blocks in the entire\nblockchain but not all the transactions. In order to update the user\nwallet, SPV clients ask their peers to filter those blocks that contains\ntransactions that the SPV is interested in, such as those that have\npayments to their own bitcoin addresses. This is done using bloom\nfilters <https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki>.\n\nIn Smart-SPV mode, when a client is missing block headers two things\nhappen simultaneously:\n\n1. The client starts downloading block headers from the last one solved\nbackwards.\n\n2. The client starts downloading the blocks headers from the first\nmissing header, forward.\n\nWhile the client catches up with all the missing blocks, the wallet\nbalance may not be fully reliable. Nevertheless if a new payment is\nreceived and confirmed, or a new payment is made, the wallet will\nincreased the balance and show it. This is what the user expects.\n\n*How it works*\n\nA live block is a block which is the last block of the block-chain and\nit\u2019s received on time (it has a time-stamp near the current time). Each\ntime a live block is received, it is flagged as LIVE and this flag is\nstored permanently with the block.  A live transaction is a transaction\nthat is included in a live block. When a live transaction is confirmed\nby 6 blocks flagged as LIVE the transaction is considered mature. A\nmature transaction may be included in a block that is still orphan. All\nmature transactions are scanned and used to compute the balance of the\nwallet. Also all transactions that are included in blocks rooted at the\nlast checkpoint and finishing in the last live block are also considered\nmature (this is the standard condition). Since the wallet always\nmodifies the balance according to mature transactions, an payment is\nreceived and acknowledged even if the branch where it is included is\nstill orphaned. If the SPV client clock is correctly synchronized, the\nSmart-SPV protocol does not pose any additional security risk different\nfrom the known SPV limitations.\n\n\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/952ccb87/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-25T04:59:39",
                "message_text_only": "On Thu, Apr 24, 2014 at 9:52 PM, Sergio Lerner\n<sergiolerner at certimix.com> wrote:\n> In a previous e-mail Mike Hearn asked me how I was going to handle 17K block\n> headers a day in my NimbleCoin currency in a the SPV mode.\n> I designed a variation of the standard headers-only SPV mode I called\n> SmartSPV. This mode could also be implemented by BitcoinJ for Bitcoin.\n\nIf you are freely specifying things, and you control the headers than\nyou can can already make SPV evaluations of work have log(n) scaling.\n\nSee: https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04318.html\n\n\n(wrt headers in reverse, perhaps you might also want to mine\nhttps://en.bitcoin.it/wiki/User:Gmaxwell/Reverse_header-fetching_sync\nfor ideas)."
            }
        ],
        "thread_summary": {
            "title": "SmartSPV \u2013 A better Simplified Payment Verification for Smartphones",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Sergio Lerner",
                "Gregory Maxwell"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4731
        }
    },
    {
        "title": "[Bitcoin-development] BIP32 \"wallet structure\" in use? Remove it?",
        "thread_messages": [
            {
                "author": "Andreas Schildbach",
                "date": "2014-04-25T10:23:05",
                "message_text_only": "Does anyone use or plan to use the \"wallet structure\" part of the BIP32\ndocument?\n\nI suggest removing it from the document and maybe instead point at\nBIP43. That new specification proposal just defines a \"purpose\" and\nleaves everything else to the inventor of that purpose. The idea it that\nover time a standard will evolve naturally rather than top-down.\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki\n\nI'd volunteer to submit a pull request if I can see some level of\nconsent here."
            },
            {
                "author": "Jim",
                "date": "2014-04-25T14:53:27",
                "message_text_only": "Oh dear.\n\nFor reasons that are perfectly reasonable we are close to losing any chance of intra-client HD compatibility for BIP32 wallets.\n\nIn the next 12 months there will probably be collectively millions of users of our new wallets. I don't want them to suffer from vendor lockin.\n\nCan we not agree on a lowest common denominator that we agree to support ?\nAn \"HD Basic\" if you like. \nFor entry level users we can keep things simple and any \"HD Basic\" bitcoin will be fully interoperable.\n\nSure, if you use anything fancy you'll be locked in to a particular wallet but a lot of users just want somewhere safe to put their bitcoin, spend it and receive it.\n\nI appreciate standising everything is very difficult (if not impossible) but if we don't have a minimum of interoperability I think we'll do our users a disservice.\n\n\n\n\n\n\nOn Fri, Apr 25, 2014, at 11:23 AM, Andreas Schildbach wrote:\n> Does anyone use or plan to use the \"wallet structure\" part of the BIP32\n> document?\n> \n> I suggest removing it from the document and maybe instead point at\n> BIP43. That new specification proposal just defines a \"purpose\" and\n> leaves everything else to the inventor of that purpose. The idea it that\n> over time a standard will evolve naturally rather than top-down.\n> \n> https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki\n> \n> I'd volunteer to submit a pull request if I can see some level of\n> consent here.\n> \n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \nhttp://bitcoin-solutions.co.uk"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-25T15:46:15",
                "message_text_only": "On Fri, Apr 25, 2014 at 7:53 AM, Jim <jim618 at fastmail.co.uk> wrote:\n> Oh dear.\n>\n> For reasons that are perfectly reasonable we are close to losing any chance of intra-client HD compatibility for BIP32 wallets.\n>\n> In the next 12 months there will probably be collectively millions of users of our new wallets. I don't want them to suffer from vendor lockin.\n>\n> Can we not agree on a lowest common denominator that we agree to support ?\n> An \"HD Basic\" if you like.\n> For entry level users we can keep things simple and any \"HD Basic\" bitcoin will be fully interoperable.\n>\n> Sure, if you use anything fancy you'll be locked in to a particular wallet but a lot of users just want somewhere safe to put their bitcoin, spend it and receive it.\n>\n> I appreciate standising everything is very difficult (if not impossible) but if we don't have a minimum of interoperability I think we'll do our users a disservice.\n\nI don't believe that wallet interoperability at this level is possible\nin general except as an explicit compatibility feature. I also don't\nbelieve that it is a huge loss that it is so.\n\nThe structure of the derivation defines and constrains functionality.\nYou cannot be structure compatible unless you have the same features\nand behavior with respect to key management.  To that extent that\nwallets have the same features, I agree its better if they are\ncompatible\u2014 but unless they are dead software they likely won't keep\nthe same features for long.\n\nEven if their key management were compatible there are many other\nthings that go into making a wallet portable between systems; the\nhandling of private keys is just one part:  a complete wallet will\nhave other (again, functionality specific) metadata.\n\nI agree that it would be it would be possible to support a\ncompatibility mode where a wallet has just a subset of features which\nworks when loaded into different systems, but I'm somewhat doubtful\nthat it would be widely used. The decision to use that mode comes at\nthe wrong time\u2014 when you start, not when you need the features you\nchose to disable or when you want to switch programs. But the obvious\nthing to do there is to just specify that a linear chain with no\nfurther branching is that mode: then that will be the same mode you\nuse when someone gives you a master public key and asks you to use it\nfor reoccurring changes\u2014 so at least the software will get used.\n\nCompatibility for something like a recovery tool is another matter,\nand BIP32 probably defines enough there that with a bit of extra data\nabout how the real wallet worked that recovery can be successful.\n\nCalling it \"vendor lock in\" sounds overblown to me.  If someone wants\nto change wallets they can transfer the funds\u2014 manual handling of\nprivate keys is seldom advisable, and as is they're going to lose\ntheir metadata in any case.  No one expects to switch banks and to\nkeep their account records at the new bank. And while less than\nperfect, the price of heavily constraining functionality in order to\nget another result is just too high."
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-25T15:49:32",
                "message_text_only": "I generally agree, but I wonder how popular cloning wallets between devices\nwill be in future. Right now if someone wants to have a wallet shared\nbetween Hive, blockchain.info and Bitcoin Wallet for Android, we just tell\nthem they're out of luck and they need to pick one, or split their funds up\nmanually.\n\nBut probably a lot of people would like to use different UI's to access the\nsame wallets. Sharing key trees is a part of that, though full blown wallet\nmetadata sync would also be needed.\n\nSo I guess we're going to end up with some kind of fairly complex\ncompatibility matrix. But I agree it may be unavoidable.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/4458e5ba/attachment.html>"
            },
            {
                "author": "Aaron Voisine",
                "date": "2014-04-25T21:58:07",
                "message_text_only": "On github I commented on the BIP43 pull request about adding a\n\"purpose\" of 0' which would correspond to the BIP32 recommended tree\nstructure for a single account wallet. (m/0'/chain) This will allow\nfor backwards compatibility and interoperability at least for existing\nsingle account BIP32 implementations like my own. The only issue is\nthat it would involve a new BIP, and it wouldn't follow the BIP43\nrecommendation of using the BIP number as the \"purpose number\", unless\nI can get BIP0.  :)\n\nAaron\n\nThere's no trick to being a humorist when you have the whole\ngovernment working for you -- Will Rodgers\n\n\nOn Fri, Apr 25, 2014 at 8:49 AM, Mike Hearn <mike at plan99.net> wrote:\n> I generally agree, but I wonder how popular cloning wallets between devices\n> will be in future. Right now if someone wants to have a wallet shared\n> between Hive, blockchain.info and Bitcoin Wallet for Android, we just tell\n> them they're out of luck and they need to pick one, or split their funds up\n> manually.\n>\n> But probably a lot of people would like to use different UI's to access the\n> same wallets. Sharing key trees is a part of that, though full blown wallet\n> metadata sync would also be needed.\n>\n> So I guess we're going to end up with some kind of fairly complex\n> compatibility matrix. But I agree it may be unavoidable.\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-04-26T10:36:51",
                "message_text_only": "I totally agree with gmaxwell here. The cost of interoperability is too\nhigh. It would force us to freeze all features, and to require a broad\nconsensus everytime we want to add something new.\n\nIn addition, some partial level of compatibility would probably lead to\nusers not able to recover all their funds when they enter their seed in\nanother wallet. That is not acceptable, and should be avoided.\n\n\n\n\nLe 25/04/2014 17:46, Gregory Maxwell a \u00e9crit :\n> \n> I don't believe that wallet interoperability at this level is possible\n> in general except as an explicit compatibility feature. I also don't\n> believe that it is a huge loss that it is so.\n> \n> The structure of the derivation defines and constrains functionality.\n> You cannot be structure compatible unless you have the same features\n> and behavior with respect to key management.  To that extent that\n> wallets have the same features, I agree its better if they are\n> compatible\u2014 but unless they are dead software they likely won't keep\n> the same features for long.\n> \n> Even if their key management were compatible there are many other\n> things that go into making a wallet portable between systems; the\n> handling of private keys is just one part:  a complete wallet will\n> have other (again, functionality specific) metadata.\n> \n> I agree that it would be it would be possible to support a\n> compatibility mode where a wallet has just a subset of features which\n> works when loaded into different systems, but I'm somewhat doubtful\n> that it would be widely used. The decision to use that mode comes at\n> the wrong time\u2014 when you start, not when you need the features you\n> chose to disable or when you want to switch programs. But the obvious\n> thing to do there is to just specify that a linear chain with no\n> further branching is that mode: then that will be the same mode you\n> use when someone gives you a master public key and asks you to use it\n> for reoccurring changes\u2014 so at least the software will get used.\n> \n> Compatibility for something like a recovery tool is another matter,\n> and BIP32 probably defines enough there that with a bit of extra data\n> about how the real wallet worked that recovery can be successful.\n> \n> Calling it \"vendor lock in\" sounds overblown to me.  If someone wants\n> to change wallets they can transfer the funds\u2014 manual handling of\n> private keys is seldom advisable, and as is they're going to lose\n> their metadata in any case.  No one expects to switch banks and to\n> keep their account records at the new bank. And while less than\n> perfect, the price of heavily constraining functionality in order to\n> get another result is just too high.\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-26T10:48:07",
                "message_text_only": "Maybe the solution is to have a defined way to import an unknown wallet?\n\nThis means that the gap space and a search ordering needs to be defined.\n\nGiven a blockchain and a root seed, it should be possible to find all the\naddresses for that root seed.\n\nThe hierarchy that the wallet actually uses could be anything.\n\n\nOn Sat, Apr 26, 2014 at 11:36 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n\n> I totally agree with gmaxwell here. The cost of interoperability is too\n> high. It would force us to freeze all features, and to require a broad\n> consensus everytime we want to add something new.\n>\n> In addition, some partial level of compatibility would probably lead to\n> users not able to recover all their funds when they enter their seed in\n> another wallet. That is not acceptable, and should be avoided.\n>\n>\n>\n>\n> Le 25/04/2014 17:46, Gregory Maxwell a \u00e9crit :\n> >\n> > I don't believe that wallet interoperability at this level is possible\n> > in general except as an explicit compatibility feature. I also don't\n> > believe that it is a huge loss that it is so.\n> >\n> > The structure of the derivation defines and constrains functionality.\n> > You cannot be structure compatible unless you have the same features\n> > and behavior with respect to key management.  To that extent that\n> > wallets have the same features, I agree its better if they are\n> > compatible\u2014 but unless they are dead software they likely won't keep\n> > the same features for long.\n> >\n> > Even if their key management were compatible there are many other\n> > things that go into making a wallet portable between systems; the\n> > handling of private keys is just one part:  a complete wallet will\n> > have other (again, functionality specific) metadata.\n> >\n> > I agree that it would be it would be possible to support a\n> > compatibility mode where a wallet has just a subset of features which\n> > works when loaded into different systems, but I'm somewhat doubtful\n> > that it would be widely used. The decision to use that mode comes at\n> > the wrong time\u2014 when you start, not when you need the features you\n> > chose to disable or when you want to switch programs. But the obvious\n> > thing to do there is to just specify that a linear chain with no\n> > further branching is that mode: then that will be the same mode you\n> > use when someone gives you a master public key and asks you to use it\n> > for reoccurring changes\u2014 so at least the software will get used.\n> >\n> > Compatibility for something like a recovery tool is another matter,\n> > and BIP32 probably defines enough there that with a bit of extra data\n> > about how the real wallet worked that recovery can be successful.\n> >\n> > Calling it \"vendor lock in\" sounds overblown to me.  If someone wants\n> > to change wallets they can transfer the funds\u2014 manual handling of\n> > private keys is seldom advisable, and as is they're going to lose\n> > their metadata in any case.  No one expects to switch banks and to\n> > keep their account records at the new bank. And while less than\n> > perfect, the price of heavily constraining functionality in order to\n> > get another result is just too high.\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Start Your Social Network Today - Download eXo Platform\n> > Build your Enterprise Intranet with eXo Platform Software\n> > Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> > Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> > http://p.sf.net/sfu/ExoPlatform\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/2f2a8298/attachment.html>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-26T10:59:41",
                "message_text_only": "Yes, it is expensive but possible to discover any funds associated with a seed, provided there are set limits to:\n\n1. gap of address use (e.g. 20)\n2. depth of hierarchy (e.g. 6)\n3. gap in use of parallel branches (e.g. 0) \n\nI would pick the limits in brackets above. \n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 26.04.2014, at 12:48, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> Maybe the solution is to have a defined way to import an unknown wallet?\n> \n> This means that the gap space and a search ordering needs to be defined.\n> \n> Given a blockchain and a root seed, it should be possible to find all the addresses for that root seed.\n> \n> The hierarchy that the wallet actually uses could be anything.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/e6b66a73/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/e6b66a73/attachment.sig>"
            },
            {
                "author": "Tamas Blummer",
                "date": "2014-04-26T11:03:14",
                "message_text_only": "Actually gap in parallel branches already fails with BIP64 as it starts with m/64'/\u2026. without having m/63'\n\nRegards,\n\nTamas Blummer\nhttp://bitsofproof.com\n\nOn 26.04.2014, at 12:59, Tamas Blummer <tamas at bitsofproof.com> wrote:\n\n> Yes, it is expensive but possible to discover any funds associated with a seed, provided there are set limits to:\n> \n> 1. gap of address use (e.g. 20)\n> 2. depth of hierarchy (e.g. 6)\n> 3. gap in use of parallel branches (e.g. 0) \n> \n> I would pick the limits in brackets above. \n> \n> Regards,\n> \n> Tamas Blummer\n> http://bitsofproof.com\n> \n> On 26.04.2014, at 12:48, Tier Nolan <tier.nolan at gmail.com> wrote:\n> \n>> Maybe the solution is to have a defined way to import an unknown wallet?\n>> \n>> This means that the gap space and a search ordering needs to be defined.\n>> \n>> Given a blockchain and a root seed, it should be possible to find all the addresses for that root seed.\n>> \n>> The hierarchy that the wallet actually uses could be anything.\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/16c43082/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 495 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/16c43082/attachment.sig>"
            },
            {
                "author": "Pavol Rusnak",
                "date": "2014-04-26T12:24:55",
                "message_text_only": "On 04/26/2014 12:48 PM, Tier Nolan wrote:\n> Maybe the solution is to have a defined way to import an unknown wallet?\n\nThat is nonsense. There is no way how to import the wallet if you don't\nknow its structure.\n\n> Given a blockchain and a root seed, it should be possible to find all the\n> addresses for that root seed.\n\nUnless the keyspace is almost infinite because:\n\n> The hierarchy that the wallet actually uses could be anything.\n\n-- \nBest Regards / S pozdravom,\n\nPavol Rusnak <stick at gk2.sk>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2014-04-26T13:41:56",
                "message_text_only": "On Sat, Apr 26, 2014 at 2:24 PM, Pavol Rusnak <stick at gk2.sk> wrote:\n> On 04/26/2014 12:48 PM, Tier Nolan wrote:\n>> Maybe the solution is to have a defined way to import an unknown wallet?\n>\n> That is nonsense. There is no way how to import the wallet if you don't\n> know its structure.\n\nI agree. Especially when multiple chains are combined (multisig) for\nP2SH usage, defining things like a gap limit becomes impossible\nwithout knowing some metadata.\n\nHowever, perhaps it is possible to define something like \"BIP44\nimport-compatible\", meaning that the application doesn't actually\nsupport all of BIP44 features, but does guarantee not losing any funds\nwhen imported? Similar things could be done for other purpose types.\n\n-- \nPieter"
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-26T16:03:31",
                "message_text_only": "It is very young in bitcoin's life.  We don't know what features will\nwork out best, or need to be radically changed after initial\ndeployment in the field.\n\nLoose coordination is good.  Good ideas will spread on their own.\nUsers will demand compatibility with certain features, and fail to\ncare incompatibilities in other features.\n\nTight interoperability at this stage is too confining.\n\n\n\n\nOn Fri, Apr 25, 2014 at 11:46 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Fri, Apr 25, 2014 at 7:53 AM, Jim <jim618 at fastmail.co.uk> wrote:\n>> Oh dear.\n>>\n>> For reasons that are perfectly reasonable we are close to losing any chance of intra-client HD compatibility for BIP32 wallets.\n>>\n>> In the next 12 months there will probably be collectively millions of users of our new wallets. I don't want them to suffer from vendor lockin.\n>>\n>> Can we not agree on a lowest common denominator that we agree to support ?\n>> An \"HD Basic\" if you like.\n>> For entry level users we can keep things simple and any \"HD Basic\" bitcoin will be fully interoperable.\n>>\n>> Sure, if you use anything fancy you'll be locked in to a particular wallet but a lot of users just want somewhere safe to put their bitcoin, spend it and receive it.\n>>\n>> I appreciate standising everything is very difficult (if not impossible) but if we don't have a minimum of interoperability I think we'll do our users a disservice.\n>\n> I don't believe that wallet interoperability at this level is possible\n> in general except as an explicit compatibility feature. I also don't\n> believe that it is a huge loss that it is so.\n>\n> The structure of the derivation defines and constrains functionality.\n> You cannot be structure compatible unless you have the same features\n> and behavior with respect to key management.  To that extent that\n> wallets have the same features, I agree its better if they are\n> compatible-- but unless they are dead software they likely won't keep\n> the same features for long.\n>\n> Even if their key management were compatible there are many other\n> things that go into making a wallet portable between systems; the\n> handling of private keys is just one part:  a complete wallet will\n> have other (again, functionality specific) metadata.\n>\n> I agree that it would be it would be possible to support a\n> compatibility mode where a wallet has just a subset of features which\n> works when loaded into different systems, but I'm somewhat doubtful\n> that it would be widely used. The decision to use that mode comes at\n> the wrong time-- when you start, not when you need the features you\n> chose to disable or when you want to switch programs. But the obvious\n> thing to do there is to just specify that a linear chain with no\n> further branching is that mode: then that will be the same mode you\n> use when someone gives you a master public key and asks you to use it\n> for reoccurring changes-- so at least the software will get used.\n>\n> Compatibility for something like a recovery tool is another matter,\n> and BIP32 probably defines enough there that with a bit of extra data\n> about how the real wallet worked that recovery can be successful.\n>\n> Calling it \"vendor lock in\" sounds overblown to me.  If someone wants\n> to change wallets they can transfer the funds-- manual handling of\n> private keys is seldom advisable, and as is they're going to lose\n> their metadata in any case.  No one expects to switch banks and to\n> keep their account records at the new bank. And while less than\n> perfect, the price of heavily constraining functionality in order to\n> get another result is just too high.\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "BIP32 \"wallet structure\" in use? Remove it?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Jim",
                "Tamas Blummer",
                "Thomas Voegtlin",
                "Andreas Schildbach",
                "Mike Hearn",
                "Pavol Rusnak",
                "Tier Nolan",
                "Gregory Maxwell",
                "Pieter Wuille",
                "Aaron Voisine"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 24182
        }
    },
    {
        "title": "[Bitcoin-development] BIP - Selector Script",
        "thread_messages": [
            {
                "author": "Tier Nolan",
                "date": "2014-04-25T18:49:35",
                "message_text_only": "This is a BIP to allow the spender to choose one of multiple standard\nscripts to use for spending the output.\n\nhttps://github.com/TierNolan/bips/blob/bip4x/bip-0045.mediawiki\n\nThis is required as part of the atomic cross chain transfer protocol.  It\nis required so that outputs can be retrieved, if the process ends before\nbeing committed.\n\nhttps://bitcointalk.org/index.php?topic=193281.msg2224949#msg2224949\n\nThe script allows multiple standard scripts to be included in the\nscriptPubKey.\n\nWhen redeeming the script the spender indicates which of the standard\nscripts to use.\n\nOnly one standard script is actually executed, so the only cost is the\nextra storage required.\n\nA more ambitious change would be a soft fork like P2SH, except the spender\nis allowed to select from multiple hashes.  Effectively, it would be\n\"Multi-P2SH\".\n\nThis gets much of the benefits of MAST, but it requires a formal soft fork\nto implement.\n\nIf there is agreement, I can code up the reference implementation as a PR.\nThe multi-P2SH might actually be easier.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/a77e346c/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-25T19:17:48",
                "message_text_only": "I believe you meant to link here instead?\n    https://github.com/TierNolan/bips/blob/bip4x/bip-0046.mediawiki\n\nThis looks reasonable from a brief skim over, but does not define any use \ncases (it mentions \"necessary for atomic cross chain transfers\", but does not \nexplain how it is useful for that - perhaps that belongs in another BIP you \nhaven't written yet, though). IMO, it should also require P2SH.\n\nLuke\n\n\nOn Friday, April 25, 2014 6:49:35 PM Tier Nolan wrote:\n> This is a BIP to allow the spender to choose one of multiple standard\n> scripts to use for spending the output.\n> \n> https://github.com/TierNolan/bips/blob/bip4x/bip-0045.mediawiki\n> \n> This is required as part of the atomic cross chain transfer protocol.  It\n> is required so that outputs can be retrieved, if the process ends before\n> being committed.\n> \n> https://bitcointalk.org/index.php?topic=193281.msg2224949#msg2224949\n> \n> The script allows multiple standard scripts to be included in the\n> scriptPubKey.\n> \n> When redeeming the script the spender indicates which of the standard\n> scripts to use.\n> \n> Only one standard script is actually executed, so the only cost is the\n> extra storage required.\n> \n> A more ambitious change would be a soft fork like P2SH, except the spender\n> is allowed to select from multiple hashes.  Effectively, it would be\n> \"Multi-P2SH\".\n> \n> This gets much of the benefits of MAST, but it requires a formal soft fork\n> to implement.\n> \n> If there is agreement, I can code up the reference implementation as a PR.\n> The multi-P2SH might actually be easier."
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-25T19:58:38",
                "message_text_only": "On Fri, Apr 25, 2014 at 07:17:48PM +0000, Luke-Jr wrote:\n> I believe you meant to link here instead?\n>     https://github.com/TierNolan/bips/blob/bip4x/bip-0046.mediawiki\n> \n> This looks reasonable from a brief skim over, but does not define any use \n> cases (it mentions \"necessary for atomic cross chain transfers\", but does not \n> explain how it is useful for that - perhaps that belongs in another BIP you \n> haven't written yet, though). IMO, it should also require P2SH.\n\nKeep in mind that P2SH redeemScripts are limited to just 520 bytes;\nthere's going to be many cases where more complex transactions just\ncan't be encoded in P2SH at all.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000006407c80d5d4506a4253b4b426e0c7702963f8bf91e7971aa\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/15e065b8/attachment.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-25T20:05:02",
                "message_text_only": "On Fri, Apr 25, 2014 at 8:58 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> Keep in mind that P2SH redeemScripts are limited to just 520 bytes;\n> there's going to be many cases where more complex transactions just\n> can't be encoded in P2SH at all.\n>\n\nTrue.  Having said that, this is just a change to isStandard(), rather than\na protocol change.\n\nThese transactions can already be mined into blocks.\n\n\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000000000006407c80d5d4506a4253b4b426e0c7702963f8bf91e7971aa\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/bf9e5583/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-25T20:02:41",
                "message_text_only": "On Fri, Apr 25, 2014 at 8:17 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> I believe you meant to link here instead?\n>     https://github.com/TierNolan/bips/blob/bip4x/bip-0046.mediawiki\n>\n> Yeah, sorry.\n\n\n> This looks reasonable from a brief skim over, but does not define any use\n> cases (it mentions \"necessary for atomic cross chain transfers\", but does\n> not\n> explain how it is useful for that - perhaps that belongs in another BIP you\n> haven't written yet, though).\n\n\nOne use case should be enough.  The atomic cross chain proposal has been\ndiscussed for a while.  It feels like bitcoin works on an \"ask permission\nfirst\" basis.\n\nIt always stalls at the fact that non-standard transactions are hard to get\nconfirmed on other coins.  It is hard to find pools on other coins which\nhave weaker isStandard() checks.  The timeouts have to be set so that they\nare long enough to guarantee that transactions are accepted before they\nexpire.\n\nA testnet to testnet transfer is the best that would be possible at the\nmoment.\n\nI don't think the cross chain system needs a BIP (except to justify this\none).\n\nIf cross chain transfer become popular, then it would be useful to ensure\nthat clients are interoperable, but first things first.  If the\ntransactions aren't accepted in any chains, then everything stalls.\n\nSecure transfers require that the malleability issue is fixed, but that is\na separate issue.  I am assuming that will be fixed at some point in the\nfuture, since micro-payment channels also requires that it is fixed.\n\n\n> IMO, it should also require P2SH.\n>\n\nIt could be restricted to only P2SH, I don't think there would be a loss in\ndoing that.\n\nPersonally, I would make it so that P2SH is mandatory after a certain\ntime.  It makes distributed verification of the block chain easier.\nEverything needed to verify a script is present in the transaction (except\nthat the output actually exists).\n\nA soft fork that expands P2SH functionality would be even better, but I\nwould rather not let the best be the enemy of the good.\n\n>\n>\n> Luke\n>\n>\n> On Friday, April 25, 2014 6:49:35 PM Tier Nolan wrote:\n> > This is a BIP to allow the spender to choose one of multiple standard\n> > scripts to use for spending the output.\n> >\n> > https://github.com/TierNolan/bips/blob/bip4x/bip-0045.mediawiki\n> >\n> > This is required as part of the atomic cross chain transfer protocol.  It\n> > is required so that outputs can be retrieved, if the process ends before\n> > being committed.\n> >\n> > https://bitcointalk.org/index.php?topic=193281.msg2224949#msg2224949\n> >\n> > The script allows multiple standard scripts to be included in the\n> > scriptPubKey.\n> >\n> > When redeeming the script the spender indicates which of the standard\n> > scripts to use.\n> >\n> > Only one standard script is actually executed, so the only cost is the\n> > extra storage required.\n> >\n> > A more ambitious change would be a soft fork like P2SH, except the\n> spender\n> > is allowed to select from multiple hashes.  Effectively, it would be\n> > \"Multi-P2SH\".\n> >\n> > This gets much of the benefits of MAST, but it requires a formal soft\n> fork\n> > to implement.\n> >\n> > If there is agreement, I can code up the reference implementation as a\n> PR.\n> > The multi-P2SH might actually be easier.\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/fd5c4a56/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-25T20:13:25",
                "message_text_only": "On Fri, Apr 25, 2014 at 1:02 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>> This looks reasonable from a brief skim over, but does not define any use\n>> cases (it mentions \"necessary for atomic cross chain transfers\", but does\n>> not\n>> explain how it is useful for that - perhaps that belongs in another BIP\n>> you\n>> haven't written yet, though).\n> One use case should be enough.  The atomic cross chain proposal has been\n> discussed for a while.  It feels like bitcoin works on an \"ask permission\n> first\" basis.\n\nYou're reading that response the wrong way. It isn't in any way\nopposed to the specification, it's pointing out that the specification\nis _unclear_ about the applications, it mentions one but doesn't\nexplain it and it wouldn't be apparent to all readers. Thats all.\n\nIt could be clarified by saying something like \"allows spending to be\ncontrolled by the publication of information, for example in another\ntransaction so that they can only be completed atomically [citation to\na revision of the contracts page]\"."
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-25T20:26:55",
                "message_text_only": "On Friday, April 25, 2014 8:02:41 PM Tier Nolan wrote:\n> I don't think the cross chain system needs a BIP (except to justify this\n> one).\n> \n> If cross chain transfer become popular, then it would be useful to ensure\n> that clients are interoperable, but first things first.  If the\n> transactions aren't accepted in any chains, then everything stalls.\n\nI think you may be misunderstanding what BIPs are. They do not force nodes to \ntake on any given relay/mining policy (thus, BIPs should never talk about \nIsStandard at all). They define standard for interoperability between \nsoftware. So, if you want nodes to relay these transactions, you need to \nconvince them, not merely write a BIP for the transaction format. Defining a \nBIP for cross-chain trading would be one way to do that.\n\n> Secure transfers require that the malleability issue is fixed, but that is\n> a separate issue.  I am assuming that will be fixed at some point in the\n> future, since micro-payment channels also requires that it is fixed.\n\nThe malleability \"issue\" has been known for years.\nI wouldn't expect any special effort made to fix it...\n\n> A soft fork that expands P2SH functionality would be even better, but I\n> would rather not let the best be the enemy of the good.\n\nThere is some ongoing discussion of a softfork to basically redo the Script \nlanguage entirely, but it will take quite a bit of time and development before \nwe'll see it in the wild.\n\nLuke\n\nP.S. Did the BIP editor assign these numbers? If not, best to keep them \nnumberless until assigned, to avoid confusion when people Google the real BIP \n44 and 45..."
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-25T20:48:52",
                "message_text_only": "On Fri, Apr 25, 2014 at 9:26 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> They define standard for interoperability between\n> software. So, if you want nodes to relay these transactions, you need to\n> convince them, not merely write a BIP for the transaction format.\n\n\nI agree with you in theory, each miner could decide their inclusion rules\nfor themselves.\n\nIn practice, if the reference client is updated, then most miners will\naccept those transactions.  In addition, it would eventually propagate to\nalt-coins (or at least the supported ones).\n\nI could simply submit the changes as a pull request for the reference\nclient, but I was hoping that by doing it this way, it would increase the\nodds of it being accepted.\n\n\n> Defining a BIP for cross-chain trading would be one way to do that.\n>\n\nI don't think it quite requires the same coordination in the short term.  I\ncould write up the sequence as an info BIP.\n\nThe malleability \"issue\" has been known for years.\n> I wouldn't expect any special effort made to fix it...\n>\n\nIt is possible to tweak the protocol so that it still works.  However, it\nmeans that 3rd parties are required (that could go in the BIP too).\n\n\n> There is some ongoing discussion of a softfork to basically redo the Script\n> language entirely, but it will take quite a bit of time and development\n> before\n> we'll see it in the wild.\n>\n\nImplementing multi-P2SH gets a lot of the benefits of MAST, in terms of\nefficiency.\n\n\n>\n> Luke\n>\n> P.S. Did the BIP editor assign these numbers? If not, best to keep them\n> numberless until assigned, to avoid confusion when people Google the real\n> BIP\n> 44 and 45...\n>\n\nNot yet, but that is just my personal repo.  I did email gmaxwell, but he\nsaid that they can't be assigned until some discussion has happened.\n\nI take your point that the name appears in the link though, so could cause\nissues with searching.\n\n\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/86e59f20/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-26T17:00:23",
                "message_text_only": "I think you're misunderstanding the point. The way you get IsStandard\nchanged is that you make an application-oriented BIP detailing the use\nof some new standard transaction type (say, generalized hash-locked\ntransactions for atomic swaps). We then discuss that proposal for its\ntechnical merits and reach consensus about the best way to do, for\nexample, cross-chain atomic swaps. It is then implemented.\n\nSo please, focus on some BIP(s) detailing applications of hash-locked\ntransactions, and we will engage more constructively -- I promise that I\nwill as cross-chain atomic swaps scratch my itch as well.\n\nOn 04/25/2014 01:48 PM, Tier Nolan wrote:\n> On Fri, Apr 25, 2014 at 9:26 PM, Luke-Jr <luke at dashjr.org\n> <mailto:luke at dashjr.org>> wrote:\n> \n>     They define standard for interoperability between\n>     software. So, if you want nodes to relay these transactions, you need to\n>     convince them, not merely write a BIP for the transaction format.\n> \n> \n> I agree with you in theory, each miner could decide their inclusion\n> rules for themselves.\n> \n> In practice, if the reference client is updated, then most miners will\n> accept those transactions.  In addition, it would eventually propagate\n> to alt-coins (or at least the supported ones).\n> \n> I could simply submit the changes as a pull request for the reference\n> client, but I was hoping that by doing it this way, it would increase\n> the odds of it being accepted.\n>  \n> \n>     Defining a BIP for cross-chain trading would be one way to do that.\n> \n> \n> I don't think it quite requires the same coordination in the short\n> term.  I could write up the sequence as an info BIP.\n> \n>     The malleability \"issue\" has been known for years.\n>     I wouldn't expect any special effort made to fix it...\n> \n> \n> It is possible to tweak the protocol so that it still works.  However,\n> it means that 3rd parties are required (that could go in the BIP too).\n>  \n> \n>     There is some ongoing discussion of a softfork to basically redo the\n>     Script\n>     language entirely, but it will take quite a bit of time and\n>     development before\n>     we'll see it in the wild.\n> \n> \n> Implementing multi-P2SH gets a lot of the benefits of MAST, in terms of\n> efficiency.\n>  \n> \n> \n>     Luke\n> \n>     P.S. Did the BIP editor assign these numbers? If not, best to keep them\n>     numberless until assigned, to avoid confusion when people Google the\n>     real BIP\n>     44 and 45...\n> \n> \n> Not yet, but that is just my personal repo.  I did email gmaxwell, but\n> he said that they can't be assigned until some discussion has happened.\n>  \n> I take your point that the name appears in the link though, so could\n> cause issues with searching.\n> \n> \n>     ------------------------------------------------------------------------------\n>     Start Your Social Network Today - Download eXo Platform\n>     Build your Enterprise Intranet with eXo Platform Software\n>     Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n>     Get Started Now And Turn Your Intranet Into A Collaboration Platform\n>     http://p.sf.net/sfu/ExoPlatform\n>     _______________________________________________\n>     Bitcoin-development mailing list\n>     Bitcoin-development at lists.sourceforge.net\n>     <mailto:Bitcoin-development at lists.sourceforge.net>\n>     https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "BIP - Selector Script",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Peter Todd",
                "Tier Nolan",
                "Gregory Maxwell",
                "Mark Friedenbach"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 18340
        }
    },
    {
        "title": "[Bitcoin-development] BIP - Hash Locked Transaction",
        "thread_messages": [
            {
                "author": "Tier Nolan",
                "date": "2014-04-25T18:49:37",
                "message_text_only": "As part of the atomic cross chain system, outputs need to be hash locked.\n\nhttps://github.com/TierNolan/bips/blob/bip4x/bip-0045.mediawiki\n\nhttps://bitcointalk.org/index.php?topic=193281.msg2224949#msg2224949\n\nA user needs to provide x corresponding to hash(x) in order to spend an\noutput.\n\nUnder the protocol, one of the participants is required to provide the\nsecret number in order to spend an output.  Once they do that, the other\nparticipant can use the secret number to spend an output on the other\nchain.  This provides a mechanism to link the 2 chains together (in\naddition to lock times).  Once the first output is spent, that commits the\ntransfer.\n\nThis is half of the scripting operations required to implement the protocol.\n\nThe proposal is to make this an adder on to the other standard\ntransactions.  It does a check that the hash matches, and then runs the\nstandard transaction as normal.\n\nAdding the prefix to a P2SH transactions wouldn't work, since the template\nwouldn't match.\n\nA script of this form could be embedded into a P2SH output.\n\nI think that is ok, since embedding the \"password\" in the hashed script\ngets all the benefits.\n\nIf there is agreement, I can code up the reference implementation as a PR.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/f6e19f03/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2014-04-25T19:18:43",
                "message_text_only": "This one looks entirely useless (it cannot be made secure), and the assertion \nthat it is necessary for atomic cross-chain transfers seems unfounded and \nprobably wrong...\n\nLuke\n\nOn Friday, April 25, 2014 6:49:37 PM Tier Nolan wrote:\n> As part of the atomic cross chain system, outputs need to be hash locked.\n> \n> https://github.com/TierNolan/bips/blob/bip4x/bip-0045.mediawiki\n> \n> https://bitcointalk.org/index.php?topic=193281.msg2224949#msg2224949\n> \n> A user needs to provide x corresponding to hash(x) in order to spend an\n> output.\n> \n> Under the protocol, one of the participants is required to provide the\n> secret number in order to spend an output.  Once they do that, the other\n> participant can use the secret number to spend an output on the other\n> chain.  This provides a mechanism to link the 2 chains together (in\n> addition to lock times).  Once the first output is spent, that commits the\n> transfer.\n> \n> This is half of the scripting operations required to implement the\n> protocol.\n> \n> The proposal is to make this an adder on to the other standard\n> transactions.  It does a check that the hash matches, and then runs the\n> standard transaction as normal.\n> \n> Adding the prefix to a P2SH transactions wouldn't work, since the template\n> wouldn't match.\n> \n> A script of this form could be embedded into a P2SH output.\n> \n> I think that is ok, since embedding the \"password\" in the hashed script\n> gets all the benefits.\n> \n> If there is agreement, I can code up the reference implementation as a PR."
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-25T19:37:53",
                "message_text_only": "On Fri, Apr 25, 2014 at 8:18 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> This one looks entirely useless (it cannot be made secure)\n\n\nThe hash locking isn't to prevent someone else stealing your coin.  Once a\nuser broadcasts a transaction with x in it, then everyone has access to x.\n\nIt is to release the coin on the other chain.  If you spend the output, you\nautomatically give the other participant the password to take your coin on\nthe other chain (completing the trade).\n\nThe BIP allows the hash to protect any of other standard transactions\n(except P2SH, since that is a template match).\n\nFor example, it would allow a script of the form\n\nOP_HASH160 [20-byte-password-hash] OP_EQUAL_VERIFY OP_DUP OP_HASH160\n<pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n\n\nTo spend it, you would need to provide the password and also sign the\ntransaction using the private key.\n\n\n\n> and the assertion\n> that it is necessary for atomic cross-chain transfers seems unfounded and\n> probably wrong...\n>\n>\nI meant that it is required for the particular protocol.\n\n\n\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/fb4be86e/attachment.html>"
            },
            {
                "author": "Alex Mizrahi",
                "date": "2014-04-25T20:06:37",
                "message_text_only": "It is also useful for betting: an oracle will associate a hash with each\npossible outcome, and when outcome is know, it will reveal a corresponding\npreimage which will unlock the transaction.\n\nThis approach has several advantages over approach with multi-sig script:\n1. oracle doesn't need to be involved in each specific transaction\n2. resolution is same for everyone who makes a bet on a specific event\noutcome\n3. no need for two-way communication\n4. no need for a special protocol: oracle might publish unlocking preimage\non a web page, and participants will manually enter it into their clients\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/d8b04816/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-25T20:14:03",
                "message_text_only": "On Fri, Apr 25, 2014 at 11:06:37PM +0300, Alex Mizrahi wrote:\n> It is also useful for betting: an oracle will associate a hash with each\n> possible outcome, and when outcome is know, it will reveal a corresponding\n> preimage which will unlock the transaction.\n> \n> This approach has several advantages over approach with multi-sig script:\n> 1. oracle doesn't need to be involved in each specific transaction\n> 2. resolution is same for everyone who makes a bet on a specific event\n> outcome\n> 3. no need for two-way communication\n> 4. no need for a special protocol: oracle might publish unlocking preimage\n> on a web page, and participants will manually enter it into their clients\n\nActually I did some work looking at this problem a few months ago and\nother than somewhat larger transactions it looks like implementing\noracles by having the oracle reveal ECC secret keys works better in\nevery case. Notably the oracle can prove they really do have the key by\nsigning a challenge message, and with some ECC math the transaction can\ninclude keys that have been derived from the oracle keys, blinding what\npurposes the oracle is being used for from the oracle itself.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000852baa93672889c1cc0ebe0b886b153410529d6bf404b835\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/03d4db96/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2014-04-25T20:19:48",
                "message_text_only": "On Fri, Apr 25, 2014 at 1:14 PM, Peter Todd <pete at petertodd.org> wrote:\n> Actually I did some work looking at this problem a few months ago and\n> other than somewhat larger transactions it looks like implementing\n> oracles by having the oracle reveal ECC secret keys works better in\n> every case. Notably the oracle can prove they really do have the key by\n> signing a challenge message, and with some ECC math the transaction can\n> include keys that have been derived from the oracle keys, blinding what\n> purposes the oracle is being used for from the oracle itself.\n\nI think the hash-locked transactions are very useful, and I think\nPeter agrees (no?)\n\nBut I agree with him that that for the oracle case the EC public\npoints are superior. (Also: Reality keys works like this.)"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-25T21:14:26",
                "message_text_only": "On Fri, Apr 25, 2014 at 01:19:48PM -0700, Gregory Maxwell wrote:\n> On Fri, Apr 25, 2014 at 1:14 PM, Peter Todd <pete at petertodd.org> wrote:\n> > Actually I did some work looking at this problem a few months ago and\n> > other than somewhat larger transactions it looks like implementing\n> > oracles by having the oracle reveal ECC secret keys works better in\n> > every case. Notably the oracle can prove they really do have the key by\n> > signing a challenge message, and with some ECC math the transaction can\n> > include keys that have been derived from the oracle keys, blinding what\n> > purposes the oracle is being used for from the oracle itself.\n> \n> I think the hash-locked transactions are very useful, and I think\n> Peter agrees (no?)\n\nYup. Revealing EC points is *not* a replacement for the hash-locked\ncase.\n\n> But I agree with him that that for the oracle case the EC public\n> points are superior. (Also: Reality keys works like this.)\n\nSame again, and on top of that the EC public point method still works\nbetter in many circumstances with what are currently non-standard\ntransactions rather than trying to shoe-horn everything into one big\nCHECKMULTISIG.\n\n\nAlong those lines, rather than doing up yet another format specific type\nas Tier Nolan is doing with his BIP, why not write a BIP looking at how\nthe IsStandard() rules could be removed? Last year John Dillon proposed\nit be replaced by a P2SH opcode whitelist(1) and I proposed some\nextensions(2) to the idea to make sure the whitelist didn't pose\ntransaction mutability issues; very similar to Pieter Wuille's proposed\nsoft-fork to stamp-out mutability.(3)\n\nThe key reasons to have IsStandard() right now are the following:\n\n1) Mitigate transaction mutability.\n\nPieter's soft-fork mitigates mutability well, and can be applied even\nmore easily as an IsStandard() rule.\n\n\n2) Reduce the potential for scripting bugs to impact the ecosystem.\n\nThe scripting system has had a lot more testing since IsStandard() was\nimplemented. Additionally we have a large pool mining non-standard\ntransactions anyway, mostly negating the value of IsStandard() for this\npurpose.\n\n\n3) Ensure that after a soft-fork upgrade transactions considered\n   IsStandard() by the the remaining non-upgraded hashing power continue\n   to be valid.\n\nWe don't want that hashing power to be able to be tricked into mining\ninvalid blocks. Future soft-forks for transactions will most likely be\ndone by either incrementing the transaction version number, or by\nredefining one of the OP_NOPx opcodes with new functionality. We just\nneed to ignore transactions with version numbers that we are not\nfamiliar with and additionally not include any of the OP_NOPx opcodes in\nthe whitelist.\n\n\nOne last detail is that sigops should be taken into account when\ncalculating fees; Luke-Jr's accept non-standard patch has code to do\nthis already.\n\n1) http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02606.html\n2) http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02611.html\n3) https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000231ff812c54986461c6f76414390f88e41476a2c2c877304\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/6cb7df59/attachment.sig>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-25T21:52:01",
                "message_text_only": "On Fri, Apr 25, 2014 at 10:14 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> Along those lines, rather than doing up yet another format specific type\n> as Tier Nolan is doing with his BIP, why not write a BIP looking at how\n> the IsStandard() rules could be removed?\n\n\nRemoval of isStandard() would be even better/more flexible.\n\nA whitelist of low risk opcodes seems like a reasonable compromise.\n\nMy thoughts behind these two BIPs are that they are a smaller change that\nadds functionality required for a particular use-case (and some others).\n\nChanging the entire philosophy behind isStandard() is a much bigger change\nthan just adding one new type.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/97b0bb8d/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2014-04-26T11:11:37",
                "message_text_only": "Does it make sense to implement a generic Policy interface (abstract\nclass) which StandardPolicy extends?\n\nMaybe you can then implement a WhitelistPolicy,\nReplacebyFeeStandardPolicy, ReplacebyFeeWhitelistPolicy...\n\nThis would make it simpler for miners to implement their own policies\nin general.\nThe following functions (maybe more) could become methods of Policy:\n\nscript IsStandard\nmain IsStandardTx\nmain AcceptToMemoryPool"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-26T11:31:44",
                "message_text_only": "On Sat, Apr 26, 2014 at 12:11 PM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> script IsStandard\n> main IsStandardTx\n> main AcceptToMemoryPool\n>\n\nAccept to memory pool could probably be replaced with an\nIsStandard(scriptPubKey, scriptSig) method.  The only \"isStandard\" part of\nthe process is the check inputs method (and AcceptToMemoryPool calls\nIsStandardTx).\n\nThe standard script methods at the moment are also used for extracting\naddresses for wallet management.\n\nThe standard script check could be made easier if it just checked for\npattern matches.\n\nIs there any objections to this change, other than it doesn't go far enough?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/1255bbc4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP - Hash Locked Transaction",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Peter Todd",
                "Tier Nolan",
                "Jorge Tim\u00f3n",
                "Gregory Maxwell",
                "Alex Mizrahi"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 12839
        }
    },
    {
        "title": "[Bitcoin-development] Error handling in payment protocol (BIP-0070 and BIP-0072)",
        "thread_messages": [
            {
                "author": "J Ross Nicoll",
                "date": "2014-04-25T19:54:05",
                "message_text_only": "Dear Gavin, all,\n\nGoing over the payment protocol specifications, I've noticed that\nthere's appears to be a lack of specificity on handling of error states.\nIn most cases there are reasonably obvious solutions, however it would\nseem positive to formalise processes to ensure consistency. I'm\nwondering therefore if either you'd be willing to edit the existing BIP,\nor advise on whether this is useful to write up as a new BIP?\n\nThe main area of concern is handling unexpected problems while sending\nthe Payment message, or receiving the corresponding PaymentACK message.\nFor example, in case of a transport layer failure or non-200 HTTP status\ncode while sending the Payment message, what should the wallet software\ndo next? Is it safe to re-send the Payment message? I'd propose that for\nany transport failure or 500 status code, the client retries after a\ndelay (suggested at 30-60 seconds). For 400 status codes, the request\nshould not be repeated, and as such the user should be alerted and a\ncopy of the Payment message saved to be resent later.\n\nFor 300 (redirect and similar) status codes, is it considered safe to\nfollow redirects? I think we have to, but good to make it clear in the\nspecification.\n\n\nOn the merchant's side; I think it would be useful for there to be\nguidance for handling of errors processing Payment messages. I'd suggest\nthat Payment messages should have a fixed maximum size to avoid merchant\nsystems theoretically having to accept files of any size; 10MB would\nseem far larger than in any way practical, and therefore a good maximum\nsize? A defined maximum time to wait (to avoid DDoS via connection\nholding) might be useful too, although I'd need to do measurements to\nfind what values are tolerable.\n\nI would like to have the protocol state that merchant systems should\nhandle repeatedly receiving the same Payment message, and return an\nequivalent (if not identical) PaymentACK to each. This is important in\ncase of a network failure while the client is sending the Payment\nmessage, as outlined above.\n\nLastly, I'm wondering about potential timing issues with transactions;\nif a merchant system wants to see confirmation of a transaction before\nsending a PaymentACK, any thoughts on whether it should hold the\nconnection, or send a PaymentACK with a memo indicating payment has been\nseen on the relay network but is not yet confirmed, or something else?\n\nHappy to write this up as a new BIP if that's more appropriate than\nediting the original, and please do tell me if I've missed anything\nobvious/prior discussion on this topic.\n\n\nRoss"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2014-04-25T22:33:36",
                "message_text_only": "These two BIPs are not accepted yet, so feel free to submit PRs for them.\n\nNote BIP70 is almost agnostic to transport layer. For example, I have\nimplemented it for NFC, QR-codes, Bluetooth, e-mail and In-app payments\nin Bitcoin Wallet -- doesn't make much sense to put HTTP status codes\ninto the spec.\n\nMax message sizes make sense. I also thought about adding a guarantee\nthat the payment_url is valid for as long as the payment request is valid.\n\n\nOn 04/25/2014 09:54 PM, J Ross Nicoll wrote:\n> Dear Gavin, all,\n> \n> Going over the payment protocol specifications, I've noticed that\n> there's appears to be a lack of specificity on handling of error states.\n> In most cases there are reasonably obvious solutions, however it would\n> seem positive to formalise processes to ensure consistency. I'm\n> wondering therefore if either you'd be willing to edit the existing BIP,\n> or advise on whether this is useful to write up as a new BIP?\n> \n> The main area of concern is handling unexpected problems while sending\n> the Payment message, or receiving the corresponding PaymentACK message.\n> For example, in case of a transport layer failure or non-200 HTTP status\n> code while sending the Payment message, what should the wallet software\n> do next? Is it safe to re-send the Payment message? I'd propose that for\n> any transport failure or 500 status code, the client retries after a\n> delay (suggested at 30-60 seconds). For 400 status codes, the request\n> should not be repeated, and as such the user should be alerted and a\n> copy of the Payment message saved to be resent later.\n> \n> For 300 (redirect and similar) status codes, is it considered safe to\n> follow redirects? I think we have to, but good to make it clear in the\n> specification.\n> \n> \n> On the merchant's side; I think it would be useful for there to be\n> guidance for handling of errors processing Payment messages. I'd suggest\n> that Payment messages should have a fixed maximum size to avoid merchant\n> systems theoretically having to accept files of any size; 10MB would\n> seem far larger than in any way practical, and therefore a good maximum\n> size? A defined maximum time to wait (to avoid DDoS via connection\n> holding) might be useful too, although I'd need to do measurements to\n> find what values are tolerable.\n> \n> I would like to have the protocol state that merchant systems should\n> handle repeatedly receiving the same Payment message, and return an\n> equivalent (if not identical) PaymentACK to each. This is important in\n> case of a network failure while the client is sending the Payment\n> message, as outlined above.\n> \n> Lastly, I'm wondering about potential timing issues with transactions;\n> if a merchant system wants to see confirmation of a transaction before\n> sending a PaymentACK, any thoughts on whether it should hold the\n> connection, or send a PaymentACK with a memo indicating payment has been\n> seen on the relay network but is not yet confirmed, or something else?\n> \n> Happy to write this up as a new BIP if that's more appropriate than\n> editing the original, and please do tell me if I've missed anything\n> obvious/prior discussion on this topic.\n> \n> \n> Ross\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2014-04-26T13:23:03",
                "message_text_only": ">\n> The main area of concern is handling unexpected problems while sending\n> the Payment message, or receiving the corresponding PaymentACK message.\n> For example, in case of a transport layer failure or non-200 HTTP status\n> code while sending the Payment message, what should the wallet software\n> do next? Is it safe to re-send the Payment message? I'd propose that for\n> any transport failure or 500 status code, the client retries after a\n> delay (suggested at 30-60 seconds). For 400 status codes, the request\n> should not be repeated, and as such the user should be alerted and a\n> copy of the Payment message saved to be resent later.\n>\n\nWhy does error handling have to be standardized?\n\nI generally think that wallet software should be free to do whatever gives\nthe user the best experience, so I'm in favor of restricting BIPs to things\nthat must be standardized so that different implementations inter-operate.\n\n\n> For 300 (redirect and similar) status codes, is it considered safe to\n> follow redirects? I think we have to, but good to make it clear in the\n> specification.\n>\n\nReferencing whatever RFCs defines how to fetch URLs would be the best way\nto do this. Submit a pull request.\n\n\n>\n> On the merchant's side; I think it would be useful for there to be\n> guidance for handling of errors processing Payment messages. I'd suggest\n> that Payment messages should have a fixed maximum size to avoid merchant\n> systems theoretically having to accept files of any size; 10MB would\n> seem far larger than in any way practical, and therefore a good maximum\n> size?\n\n\nPaymentRequests are limited to 50,000 bytes. I can't think of a reason why\nPayment messages would need to be any bigger than that. Submit a pull\nrequest to the existing BIP.\n\n\n> A defined maximum time to wait (to avoid DDoS via connection\n> holding) might be useful too, although I'd need to do measurements to\n> find what values are tolerable.\n>\n\nImplementation detail that doesn't belong in the spec, in my humble opinion.\n\n\n> I would like to have the protocol state that merchant systems should\n> handle repeatedly receiving the same Payment message, and return an\n> equivalent (if not identical) PaymentACK to each. This is important in\n> case of a network failure while the client is sending the Payment\n> message, as outlined above.\n>\n\nI think this should be left to implementations to work out.\n\n\n> Lastly, I'm wondering about potential timing issues with transactions;\n> if a merchant system wants to see confirmation of a transaction before\n> sending a PaymentACK...\n\n\n.... not a good idea. The user should get feedback right away. Poking a\n\"pay now\" button and then waiting more than a second or three to get \"your\npayment has been received and is being processed\" is terrible UI.\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/612df373/attachment.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2014-04-26T16:45:49",
                "message_text_only": "Dear Gavin, Andreas,\n\nI'd see standardisation (or at least suggested standards) for error\nhandling as positive for consistency of user experience. I do see what\nyou mean about over-specification, however.\n\nThanks for the feedback, I've taken the main points and created two pull\nrequests:\n\nBIP-0070: https://github.com/bitcoin/bips/pull/54/\nBIP-0072: https://github.com/bitcoin/bips/pull/55/\n\nPlease tell me if these need any further work.\n\nRoss\n\nOn 26/04/14 14:23, Gavin Andresen wrote:\n>> The main area of concern is handling unexpected problems while sending\n>> the Payment message, or receiving the corresponding PaymentACK message.\n>> For example, in case of a transport layer failure or non-200 HTTP status\n>> code while sending the Payment message, what should the wallet software\n>> do next? Is it safe to re-send the Payment message? I'd propose that for\n>> any transport failure or 500 status code, the client retries after a\n>> delay (suggested at 30-60 seconds). For 400 status codes, the request\n>> should not be repeated, and as such the user should be alerted and a\n>> copy of the Payment message saved to be resent later.\n>>\n> Why does error handling have to be standardized?\n>\n> I generally think that wallet software should be free to do whatever gives\n> the user the best experience, so I'm in favor of restricting BIPs to things\n> that must be standardized so that different implementations inter-operate.\n>\n>\n>> For 300 (redirect and similar) status codes, is it considered safe to\n>> follow redirects? I think we have to, but good to make it clear in the\n>> specification.\n>>\n> Referencing whatever RFCs defines how to fetch URLs would be the best way\n> to do this. Submit a pull request.\n>\n>\n>> On the merchant's side; I think it would be useful for there to be\n>> guidance for handling of errors processing Payment messages. I'd suggest\n>> that Payment messages should have a fixed maximum size to avoid merchant\n>> systems theoretically having to accept files of any size; 10MB would\n>> seem far larger than in any way practical, and therefore a good maximum\n>> size?\n>\n> PaymentRequests are limited to 50,000 bytes. I can't think of a reason why\n> Payment messages would need to be any bigger than that. Submit a pull\n> request to the existing BIP.\n>\n>\n>> A defined maximum time to wait (to avoid DDoS via connection\n>> holding) might be useful too, although I'd need to do measurements to\n>> find what values are tolerable.\n>>\n> Implementation detail that doesn't belong in the spec, in my humble opinion.\n>\n>\n>> I would like to have the protocol state that merchant systems should\n>> handle repeatedly receiving the same Payment message, and return an\n>> equivalent (if not identical) PaymentACK to each. This is important in\n>> case of a network failure while the client is sending the Payment\n>> message, as outlined above.\n>>\n> I think this should be left to implementations to work out.\n>\n>\n>> Lastly, I'm wondering about potential timing issues with transactions;\n>> if a merchant system wants to see confirmation of a transaction before\n>> sending a PaymentACK...\n>\n> .... not a good idea. The user should get feedback right away. Poking a\n> \"pay now\" button and then waiting more than a second or three to get \"your\n> payment has been received and is being processed\" is terrible UI.\n>\n>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-26T17:36:26",
                "message_text_only": ">\n> PaymentRequests are limited to 50,000 bytes. I can't think of a reason why\n> Payment messages would need to be any bigger than that. Submit a pull\n> request to the existing BIP.\n>\n\nIn future it might be nice to have images and things in the payment\nrequests, to make UIs look prettier. But with the current version 50kb\nshould be plenty indeed.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/cd289a1c/attachment.html>"
            },
            {
                "author": "Ross Nicoll",
                "date": "2014-04-26T17:43:50",
                "message_text_only": "I'd be very cautious of security implications of embedding files into\nthe payment request. Even file formats one would presume safe, such as\nimages, have had security issues (i.e.\nhttps://technet.microsoft.com/library/security/ms11-006 )\n\nLonger term I was wondering about embedding the PaymentRequest into web\npages directly via the <object> tag, which could eliminate need for\nBIP0072 and potentially improve user interface integration that way.\nObviously this would require browser plugins, however.\n\nRoss\n\nOn 26/04/14 18:36, Mike Hearn wrote:\n>> PaymentRequests are limited to 50,000 bytes. I can't think of a reason why\n>> Payment messages would need to be any bigger than that. Submit a pull\n>> request to the existing BIP.\n>>\n> In future it might be nice to have images and things in the payment\n> requests, to make UIs look prettier. But with the current version 50kb\n> should be plenty indeed.\n>"
            },
            {
                "author": "Kevin Greene",
                "date": "2014-04-27T07:53:25",
                "message_text_only": "Keep in mind that links don't always come embedded in html. Think of native\nmobile apps.\n\n\n\nOn Sat, Apr 26, 2014 at 10:43 AM, Ross Nicoll <jrn at jrn.me.uk> wrote:\n\n> I'd be very cautious of security implications of embedding files into\n> the payment request. Even file formats one would presume safe, such as\n> images, have had security issues (i.e.\n> https://technet.microsoft.com/library/security/ms11-006 )\n>\n> Longer term I was wondering about embedding the PaymentRequest into web\n> pages directly via the <object> tag, which could eliminate need for\n> BIP0072 and potentially improve user interface integration that way.\n> Obviously this would require browser plugins, however.\n>\n> Ross\n>\n> On 26/04/14 18:36, Mike Hearn wrote:\n> >> PaymentRequests are limited to 50,000 bytes. I can't think of a reason\n> why\n> >> Payment messages would need to be any bigger than that. Submit a pull\n> >> request to the existing BIP.\n> >>\n> > In future it might be nice to have images and things in the payment\n> > requests, to make UIs look prettier. But with the current version 50kb\n> > should be plenty indeed.\n> >\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140427/8db5235d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Error handling in payment protocol (BIP-0070 and BIP-0072)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kevin Greene",
                "Andreas Schildbach",
                "Mike Hearn",
                "Ross Nicoll",
                "Gavin Andresen",
                "J Ross Nicoll"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 15718
        }
    },
    {
        "title": "[Bitcoin-development] Compatibility Bitcoin-Qt with Tails",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2014-04-25T20:27:56",
                "message_text_only": "Kristov,\n\nOn Wed, Apr 23, 2014 at 10:05 PM, Kristov Atlas <kristovatlas at gmail.com> wrote:\n> On 04/22/2014 09:30 AM, Warren Togami Jr. wrote:\n>\n> I see that the latest nightly build (thanks for that, Warren) is still not\n> compatible with Tails/Debian Squeeze. Is there still an intention to address\n> this issue? Might it be fixed by 0.9.2?\n\nI've modified the gitian build so that it builds against Qt 4.6\ninstead of Qt 4.8 in this pull request:\nhttps://github.com/bitcoin/bitcoin/pull/4094\n\nA test build of master with that pulls gitian descriptor is available:\n\nhttps://download.visucore.com/bitcoin/linux-4765b8c-gitian-2d48b96.tar.gz\nhttps://download.visucore.com/bitcoin/linux-4765b8c-gitian-2d48b96.tar.gz.sig\n\nThese bitcoin-qt executables *should* work on Debian Squeeze / Tails\nLinux. Let me know if it is the case.\n\nWladimir"
            },
            {
                "author": "Kristov Atlas",
                "date": "2014-04-26T17:29:00",
                "message_text_only": "On 04/25/2014 04:27 PM, Wladimir wrote:\n> Kristov,\n> I've modified the gitian build so that it builds against Qt 4.6\n> instead of Qt 4.8 in this pull request:\n> https://github.com/bitcoin/bitcoin/pull/4094\n>\n> A test build of master with that pulls gitian descriptor is available:\n>\n> https://download.visucore.com/bitcoin/linux-4765b8c-gitian-2d48b96.tar.gz\n> https://download.visucore.com/bitcoin/linux-4765b8c-gitian-2d48b96.tar.gz.sig\n>\n> These bitcoin-qt executables *should* work on Debian Squeeze / Tails\n> Linux. Let me know if it is the case.\n>\n>\nHey Wladimir,\n\nThanks for building this binary. The initial problem with Qt was \nresolved, and I was able to load the GUI that chooses my datadir. After \nchoosing the default datadir, however, it segfaulted.\n\nThe segfault came after the usual message that I get when running \nBitcoin Core in Tails, which is the \"sendto: Operation not permitted\" \nmessage since Core will not be able to connect to the internet without \ngoing through Tails' Tor SOCKS proxy. When I specify the SOCKS proxy \nthrough the command-line, I get a brief flash of the GUI before it \nsegfaults again.\n\nThe \"Bus::open\" and \"IBusInputContext::createInputContext\" messages are \natypical and might be related to the segfault.\n\nSample terminal output for latest Tails (0.23):\n\namnesia at amnesia:~/linux-4765b8c-gitian-2d48b96/32$ ./bitcoin-qt\nBus::open: Can not get ibus-daemon's address.\nIBusInputContext::createInputContext: no connection to ibus-daemon\nsendto: Operation not permitted\nSegmentation fault\namnesia at amnesia:~/linux-4765b8c-gitian-2d48b96/32$ ./bitcoin-qt\nSegmentation fault\namnesia at amnesia:~/linux-4765b8c-gitian-2d48b96/32$ ./bitcoin-qt -proxy=127.0.0.1:9050\nSegmentation fault\n\n\n-Kristov"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-27T06:52:38",
                "message_text_only": "> Sample terminal output for latest Tails (0.23):\n>\n> amnesia at amnesia:~/linux-4765b8c-gitian-2d48b96/32$ ./bitcoin-qt\n> Bus::open: Can not get ibus-daemon's address.\n> IBusInputContext::createInputContext: no connection to ibus-daemon\n> sendto: Operation not permitted\n> Segmentation fault\n> amnesia at amnesia:~/linux-4765b8c-gitian-2d48b96/32$ ./bitcoin-qt\n> Segmentation fault\n> amnesia at amnesia:~/linux-4765b8c-gitian-2d48b96/32$ ./bitcoin-qt -proxy=127.0.0.1:9050\n> Segmentation fault\n\nCan you get a traceback?\n\nWladimir"
            },
            {
                "author": "Wladimir",
                "date": "2014-04-30T07:02:23",
                "message_text_only": "On Sat, Apr 26, 2014 at 7:29 PM, Kristov Atlas\n<author at anonymousbitcoinbook.com> wrote:\n>>\n> Hey Wladimir,\n>\n> Thanks for building this binary. The initial problem with Qt was\n> resolved, and I was able to load the GUI that chooses my datadir. After\n> choosing the default datadir, however, it segfaulted.\n\nI've fixed the issue; at least on Debian 6 - which is a lot more\nconductive to development than tails :-). See\nhttps://github.com/bitcoin/bitcoin/pull/4094 for the gory details. New\ntest build available:\n\nhttps://download.visucore.com/bitcoin/linux-gitian-3cbabfa.tar.gz\n(sigs: https://download.visucore.com/bitcoin/linux-gitian-3cbabfa.tar.gz.sig\n)\n\nWladimir"
            }
        ],
        "thread_summary": {
            "title": "Compatibility Bitcoin-Qt with Tails",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Kristov Atlas",
                "Wladimir"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3771
        }
    },
    {
        "title": "[Bitcoin-development] New BIP32 structure for P2SH multisig wallets",
        "thread_messages": [
            {
                "author": "Manuel Araoz",
                "date": "2014-04-25T22:27:45",
                "message_text_only": "Hi, I'm part of the team building copay <https://github.com/bitpay/copay>,\na multisignature P2SH HD wallet. We've been following the discussion\nregarding standardizing the structure for branches both on this list and on\ngithub (1 <https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki>,\n2 <https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki>,\n3<https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki>,\n4 <https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki>,\n5<https://github.com/bitcoin/bips/pull/52>).\nSoon, we realized the assumptions in the discussions were not true for a\nmultisig hd wallet, so we wanted to share our current approach to that, to\nget feedback and see if we can arrive to a new standard (and possibly a new\nBIP)\n\nThese are our assumptions:\n - N parties want to share an m-of-n wallet.\n - Each party must generate their master private keys independently.\n - Use multisig P2SH for all addresses.\n - Use BIP32 to derive public keys, then create a multisig script, and use\nthe P2SH address for that.\n - The address generation process should not require communicating with\nother parties. (Thus, all parties must be able to generate all public keys)\n - Transaction creation + signing requires communication between parties,\nof course.\n\n-------------------------------------------------\n\nFollowing BIP43, we're be using:\n\n\nm / purpose' / *\n\nwhere *purpose* is the hardened derivation scheme based on the new BIP\nnumber.\nWe then define the following levels:\n\n\nm / purpose' / cosigner_index / change / address_index\n\nEach level has a special meaning detailed below:\n\n*cosigner_index* <http://en.wikipedia.org/wiki/Co-signing>: the index of\nthe party creating this address. The indices can be determined\nindependently by lexicographically sorting the master public keys of each\ncosigner.\n\n*change*: 0 for change, 1 for receive address.\n\n*address_index*: Addresses are numbered from index 0 in sequentially\nincreasing manner. We're currently syncing the max used index for each\nbranch between all parties when they connect, but we're open to considering\nremoving the index sync and doing the more elegant used-address discovery\nvia a gap limit, as discussed in\nBIP44<https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#address-gap-limit>.\nWe feel 20 might be too low though.\n\n*Wallet high-level description:*\nEach party generates their own extended master keypair and shares the\nextended purpose' public key with the others, which is stored encrypted.\nEach party can generate any of the other's derived public keys, but only\nhis own private keys.\n\n*General address generation procedure:*\nWhen generating an address, each party can independently generate the N\nneeded public keys. They do this by deriving the public key in each of the\ndifferent trees, but using the same path. They can then generate the\nmultisig script and the corresponding p2sh address. In this way, each path\ncorresponds to an address, but the public keys for that address come from\ndifferent trees.\n\n*Receive address case:*\nEach cosigner generates addresses only on his own branch. One of the n\ncosigners wants to receive a payment, and the others are offline. He knows\nthe last used index in his own branch, because only he generates addresses\nthere. Thus, he can generate the public keys for all of the others using\nthe next index, and calculate the needed script for the address.\n\n*Example: *Cosigner #2 wants to receive a payment to the shared wallet. His\nlast used index on his own branch is 4. Then, the path for the next receive\naddress is m/$purpose/2/1/5. He uses this same path in all of the cosigners\ntrees to generate a public key for each one, and from that he gets the new\np2sh address.\n\n*Change address case:*\nAgain, each cosigner generates addresses only on his own branch. One of the\nn cosigners wants to create an outgoing payment, for which he'll need a\nchange address. He generates a new address using the same procedure as\nabove, but using a separate index to track the used change addresses.\n\n*Example: *Cosigner #5 wants to send a payment from the shared wallet, for\nwhich he'll need a change address. His last used change index on his own\nbranch is 11. Then, the path for the next change address is\nm/$purpose/5/0/12. He uses this same path in all of the cosigners trees to\ngenerate a public key for each one, and from that he gets the new p2sh\naddress.\n\n\n*Transaction creation and signing:*\nWhen creating a transaction, first one of the parties creates a Transaction\nProposal. This is a transaction that spends some output stored in any of\nthe p2sh multisig addresses (corresponding to any of the copayers'\nbranches). This proposal is sent to the other parties, who decide if they\nwant to sign. If they approve the proposal, they can generate their needed\nprivate key for that specific address (using the same path that generated\nthe public key in that address, but deriving the private key instead), and\nsign it. Once the proposal reaches m signatures, any cosigner can broadcast\nit to the network, becoming final. The specifics of how this proposal is\nstructured, and the protocol to accept or reject it, belong to another BIP,\nin my opinion.\n\n*Final comments:*\n- We're currently lexicographically sorting the public keys for each\naddress separately. We've read Mike Belshe's comments about sorting the\nmaster public keys and then using the same order for all derived addresses,\nbut we couldn't think of any benefits of doing that (I mean, the benefits\nof knowing whose public key is which).\n- We originally thought we would need a non-hardened version of purpose for\nthe path, because we needed every party to be able to generate all the\npublic keys of the others. With the proposed path, is it true that the\ncosigners will be able to generate them, by knowing the extended purpose\npublic key for each copayer? (m/purpose')\n- The reason for using separate branches for each cosigner is we don't want\ntwo of them generating the same address and receiving simultaneous payments\nto it. The ideal case is that each address receives at most one payment,\nrequested by the corresponding cosigner.\n\n\nThoughts?\nManuel\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/65b0a04c/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-04-26T03:02:21",
                "message_text_only": "I will just chime in that I've been working on a similar spec for Armory\nto implement P2SH multisig and I came up with basically an identical\nscheme.  I think you covered most of what is needed.   The one thing I\ndid differently was try to match the BIP 32 structure, by keeping the\noriginal 3 levels (wallet, chain, addresses), and use 2*N chains to\nhandle the N different parties generating receiving and change\naddresses.  It's not necessary, but it follows more closely the\nthree-level scheme that BIP 32 originally envisioned.  I also concluded\nthat the chain indices are ordered by lexicographical sorting of root\npublic keys, but resorting each individual address.  There are use cases\nwhere it will be necessary for parties to know how to combine public\nkeys into a multi-sig address without knowing the root keys.\n\nAlso, for the purposes of one-off types of escrow multi-sig, we have\nincluded a \"wallet locator\" field in the transaction that must be passed\naround.  This \"wallet locator\" is stored with each key (perhaps at the\ntime public keys are collected and merged), and passed around with\ntransactions to be signed.  This allows lightweight devices like\nhardware wallets, to recognize their own keys.  It would encoded in a\nVAR_STR, and doesn't have to be meaningful to the other participants --\neach device would look at all signing slots in a transaction (either\nsinglesig or each key in a multisig) and would generate a public key\nalong each path, and see if the result matches.  If so, it can sign it. \nIf not, it must be someone else's.\n\nI bring this up, because this multisig wallet structure you're talking\nabout has a very simple \"wallet locator\" scheme -- all parties will use\nthe same locator for a given receiving address.  But that field should\nremain part of the data structure for each key, to accommodate all types\nof multisig, not just linked/parallel tree schemes. \n\n-Alan\n\n\n\n\nOn 04/25/2014 06:27 PM, Manuel Araoz wrote:\n> Hi, I'm part of the team building copay\n> <https://github.com/bitpay/copay>, a multisignature P2SH HD\n> wallet. We've been following the discussion regarding standardizing\n> the structure for branches both on this list and on github (1\n> <https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki>, 2\n> <https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki>, 3\n> <https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki>, 4\n> <https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki>, 5\n> <https://github.com/bitcoin/bips/pull/52>). Soon, we realized the\n> assumptions in the discussions were not true for a multisig hd wallet,\n> so we wanted to share our current approach to that, to get feedback\n> and see if we can arrive to a new standard (and possibly a new BIP)\n>\n> These are our assumptions: \n>  - N parties want to share an m-of-n wallet.\n>  - Each party must generate their master private keys independently.\n>  - Use multisig P2SH for all addresses.\n>  - Use BIP32 to derive public keys, then create a multisig script, and\n> use the P2SH address for that.\n>  - The address generation process should not require communicating\n> with other parties. (Thus, all parties must be able to generate all\n> public keys)\n>  - Transaction creation + signing requires communication between\n> parties, of course.\n>\n> -------------------------------------------------\n>\n> Following BIP43, we're be using:\n> m / purpose' / *\n> where /purpose/ is the hardened derivation scheme based on the new BIP\n> number.\n> We then define the following levels:\n> m / purpose' / cosigner_index / change / address_index\n> Each level has a special meaning detailed below:\n>\n> /cosigner_index/ <http://en.wikipedia.org/wiki/Co-signing>: the index\n> of the party creating this address. The indices can be determined\n> independently by lexicographically sorting the master public keys of\n> each cosigner.\n>\n> /change/: 0 for change, 1 for receive address.\n>\n> /address_index/: Addresses are numbered from index 0 in sequentially\n> increasing manner. We're currently syncing the max used index for each\n> branch between all parties when they connect, but we're open to\n> considering removing the index sync and doing the more elegant\n> used-address discovery via a gap limit, as discussed in BIP44\n> <https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#address-gap-limit>.\n> We feel 20 might be too low though. \n>\n> *Wallet high-level description:*\n> Each party generates their own extended master keypair and shares the\n> extended purpose' public key with the others, which is stored\n> encrypted. Each party can generate any of the other's derived public\n> keys, but only his own private keys. \n>\n> *General address generation procedure:*\n> When generating an address, each party can independently generate the\n> N needed public keys. They do this by deriving the public key in each\n> of the different trees, but using the same path. They can then\n> generate the multisig script and the corresponding p2sh address. In\n> this way, each path corresponds to an address, but the public keys for\n> that address come from different trees.\n>\n> *Receive address case:*\n> Each cosigner generates addresses only on his own branch. One of the n\n> cosigners wants to receive a payment, and the others are offline. He\n> knows the last used index in his own branch, because only he generates\n> addresses there. Thus, he can generate the public keys for all of the\n> others using the next index, and calculate the needed script for the\n> address. \n>\n> /Example: /Cosigner #2 wants to receive a payment to the shared\n> wallet. His last used index on his own branch is 4. Then, the path for\n> the next receive address is m/$purpose/2/1/5. He uses this same path\n> in all of the cosigners trees to generate a public key for each one,\n> and from that he gets the new p2sh address.\n>\n> *Change address case:*\n> Again, each cosigner generates addresses only on his own branch. One\n> of the n cosigners wants to create an outgoing payment, for which\n> he'll need a change address. He generates a new address using the same\n> procedure as above, but using a separate index to track the used\n> change addresses. \n> /\n> Example: /Cosigner #5 wants to send a payment from the shared wallet,\n> for which he'll need a change address. His last used change index on\n> his own branch is 11. Then, the path for the next change address is\n> m/$purpose/5/0/12. He uses this same path in all of the cosigners\n> trees to generate a public key for each one, and from that he gets the\n> new p2sh address.\n>\n>\n> *Transaction creation and signing:*\n> When creating a transaction, first one of the parties creates a\n> Transaction Proposal. This is a transaction that spends some output\n> stored in any of the p2sh multisig addresses (corresponding to any of\n> the copayers' branches). This proposal is sent to the other parties,\n> who decide if they want to sign. If they approve the proposal, they\n> can generate their needed private key for that specific address (using\n> the same path that generated the public key in that address, but\n> deriving the private key instead), and sign it. Once the proposal\n> reaches m signatures, any cosigner can broadcast it to the network,\n> becoming final. The specifics of how this proposal is structured, and\n> the protocol to accept or reject it, belong to another BIP, in my\n> opinion. \n>\n> *Final comments:*\n> - We're currently lexicographically sorting the public keys for each\n> address separately. We've read Mike Belshe's comments about sorting\n> the master public keys and then using the same order for all derived\n> addresses, but we couldn't think of any benefits of doing that (I\n> mean, the benefits of knowing whose public key is which).\n> - We originally thought we would need a non-hardened version of\n> purpose for the path, because we needed every party to be able to\n> generate all the public keys of the others. With the proposed path, is\n> it true that the cosigners will be able to generate them, by knowing\n> the extended purpose public key for each copayer? (m/purpose')\n> - The reason for using separate branches for each cosigner is we don't\n> want two of them generating the same address and receiving\n> simultaneous payments to it. The ideal case is that each address\n> receives at most one payment, requested by the corresponding cosigner. \n>\n>\n> Thoughts?\n> Manuel\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140425/c7d5c529/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-26T09:43:23",
                "message_text_only": "I'm not sure I understand why you need any special structure for this at\nall. The way I'd do it is just use regular HD wallets for everyone, of the\nregular form, and then swap the watching keys. Why do people need to be\ngiven a cosigner index at all, given that they all have unique root keys\nanyway?\n\n\nOn Sat, Apr 26, 2014 at 12:27 AM, Manuel Araoz <manu at bitpay.com> wrote:\n\n> Hi, I'm part of the team building copay <https://github.com/bitpay/copay>,\n> a multisignature P2SH HD wallet. We've been following the discussion\n> regarding standardizing the structure for branches both on this list and on\n> github (1 <https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki>,\n> 2 <https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki>, 3<https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki>,\n> 4 <https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki>, 5<https://github.com/bitcoin/bips/pull/52>).\n> Soon, we realized the assumptions in the discussions were not true for a\n> multisig hd wallet, so we wanted to share our current approach to that, to\n> get feedback and see if we can arrive to a new standard (and possibly a new\n> BIP)\n>\n> These are our assumptions:\n>  - N parties want to share an m-of-n wallet.\n>  - Each party must generate their master private keys independently.\n>  - Use multisig P2SH for all addresses.\n>  - Use BIP32 to derive public keys, then create a multisig script, and use\n> the P2SH address for that.\n>  - The address generation process should not require communicating with\n> other parties. (Thus, all parties must be able to generate all public keys)\n>  - Transaction creation + signing requires communication between parties,\n> of course.\n>\n> -------------------------------------------------\n>\n> Following BIP43, we're be using:\n>\n>\n> m / purpose' / *\n>\n> where *purpose* is the hardened derivation scheme based on the new BIP\n> number.\n> We then define the following levels:\n>\n>\n> m / purpose' / cosigner_index / change / address_index\n>\n> Each level has a special meaning detailed below:\n>\n> *cosigner_index* <http://en.wikipedia.org/wiki/Co-signing>: the index of\n> the party creating this address. The indices can be determined\n> independently by lexicographically sorting the master public keys of each\n> cosigner.\n>\n> *change*: 0 for change, 1 for receive address.\n>\n> *address_index*: Addresses are numbered from index 0 in sequentially\n> increasing manner. We're currently syncing the max used index for each\n> branch between all parties when they connect, but we're open to considering\n> removing the index sync and doing the more elegant used-address discovery\n> via a gap limit, as discussed in BIP44<https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#address-gap-limit>.\n> We feel 20 might be too low though.\n>\n> *Wallet high-level description:*\n> Each party generates their own extended master keypair and shares the\n> extended purpose' public key with the others, which is stored encrypted.\n> Each party can generate any of the other's derived public keys, but only\n> his own private keys.\n>\n> *General address generation procedure:*\n> When generating an address, each party can independently generate the N\n> needed public keys. They do this by deriving the public key in each of the\n> different trees, but using the same path. They can then generate the\n> multisig script and the corresponding p2sh address. In this way, each path\n> corresponds to an address, but the public keys for that address come from\n> different trees.\n>\n> *Receive address case:*\n> Each cosigner generates addresses only on his own branch. One of the n\n> cosigners wants to receive a payment, and the others are offline. He knows\n> the last used index in his own branch, because only he generates addresses\n> there. Thus, he can generate the public keys for all of the others using\n> the next index, and calculate the needed script for the address.\n>\n> *Example: *Cosigner #2 wants to receive a payment to the shared wallet.\n> His last used index on his own branch is 4. Then, the path for the next\n> receive address is m/$purpose/2/1/5. He uses this same path in all of the\n> cosigners trees to generate a public key for each one, and from that he\n> gets the new p2sh address.\n>\n> *Change address case:*\n> Again, each cosigner generates addresses only on his own branch. One of\n> the n cosigners wants to create an outgoing payment, for which he'll need a\n> change address. He generates a new address using the same procedure as\n> above, but using a separate index to track the used change addresses.\n>\n> *Example: *Cosigner #5 wants to send a payment from the shared wallet,\n> for which he'll need a change address. His last used change index on his\n> own branch is 11. Then, the path for the next change address is\n> m/$purpose/5/0/12. He uses this same path in all of the cosigners trees to\n> generate a public key for each one, and from that he gets the new p2sh\n> address.\n>\n>\n> *Transaction creation and signing:*\n> When creating a transaction, first one of the parties creates a\n> Transaction Proposal. This is a transaction that spends some output stored\n> in any of the p2sh multisig addresses (corresponding to any of the\n> copayers' branches). This proposal is sent to the other parties, who decide\n> if they want to sign. If they approve the proposal, they can generate their\n> needed private key for that specific address (using the same path that\n> generated the public key in that address, but deriving the private key\n> instead), and sign it. Once the proposal reaches m signatures, any cosigner\n> can broadcast it to the network, becoming final. The specifics of how this\n> proposal is structured, and the protocol to accept or reject it, belong to\n> another BIP, in my opinion.\n>\n> *Final comments:*\n> - We're currently lexicographically sorting the public keys for each\n> address separately. We've read Mike Belshe's comments about sorting the\n> master public keys and then using the same order for all derived addresses,\n> but we couldn't think of any benefits of doing that (I mean, the benefits\n> of knowing whose public key is which).\n> - We originally thought we would need a non-hardened version of purpose\n> for the path, because we needed every party to be able to generate all the\n> public keys of the others. With the proposed path, is it true that the\n> cosigners will be able to generate them, by knowing the extended purpose\n> public key for each copayer? (m/purpose')\n> - The reason for using separate branches for each cosigner is we don't\n> want two of them generating the same address and receiving simultaneous\n> payments to it. The ideal case is that each address receives at most one\n> payment, requested by the corresponding cosigner.\n>\n>\n> Thoughts?\n> Manuel\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/fbf87fbc/attachment.html>"
            },
            {
                "author": "Thomas Voegtlin",
                "date": "2014-04-26T10:08:02",
                "message_text_only": "Le 26/04/2014 11:43, Mike Hearn a \u00e9crit :\n> I'm not sure I understand why you need any special structure for this at\n> all. The way I'd do it is just use regular HD wallets for everyone, of the\n> regular form, and then swap the watching keys. Why do people need to be\n> given a cosigner index at all, given that they all have unique root keys\n> anyway?\n> \n> \n\nI agree with that.\n\nPerhaps the only thing that needs to be standardized is the order of\npublic keys in the redeem script: I think they should be sorted, so that\nthe p2sh address does not depend on the order of pubkeys."
            },
            {
                "author": "Jeff Garzik",
                "date": "2014-04-28T01:37:00",
                "message_text_only": "On Sat, Apr 26, 2014 at 6:08 AM, Thomas Voegtlin <thomasv1 at gmx.de> wrote:\n> Perhaps the only thing that needs to be standardized is the order of\n> public keys in the redeem script: I think they should be sorted, so that\n> the p2sh address does not depend on the order of pubkeys.\n\nYes.  That solution is already implemented in a few wallets.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Manuel Araoz",
                "date": "2014-04-26T11:36:30",
                "message_text_only": "On Apr 26, 2014 6:43 AM, \"Mike Hearn\" <mike at plan99.net> wrote:\n>\n> I'm not sure I understand why you need any special structure for this at\nall. The way I'd do it is just use regular HD wallets for everyone, of the\nregular form, and then swap the watching keys. Why do people need to be\ngiven a cosigner index at all, given that they all have unique root keys\nanyway?\n\nI tried to explain that here:\n\nThe reason for using separate branches for each cosigner is we don't want\ntwo of them generating the same address and receiving simultaneous payments\nto it. The ideal case is that each address receives at most one payment,\nrequested by the corresponding cosigner.\n\nTo clarify, the problem the cosigner_index is trying to solve is race\nconditions when receiving payments. Remember that we can't assume all\ncosigners to be online at all times. Let's assume we use one shared branch\nfor everyone. Then two cosigners could need a new receiving address at the\nsame time, and get the next unused address on that branch. They then each\npass the same address to their payers, and we can get two payments to the\nsame address. Monitoring balances is not enough in this case because a\ncosigner can never know when the others are generating a new address.\nSeparating branches and having each cosigner only use one branch makes this\nproblem go away.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/ef3434c6/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-26T20:33:19",
                "message_text_only": ">\n> Let's assume we use one shared branch for everyone. Then two cosigners\n> could need a new receiving address at the same time, and get the next\n> unused address on that branch.\n>\nThis is the part I struggle to understand. There is no shared branch\nbecause each user/cosigner has their own unique seed and thus unique key\nhierarchy, right? What you described above could be an issue if all\nco-signers shared the same seed but then the scheme wouldn't work.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/88fbb7de/attachment.html>"
            },
            {
                "author": "Alan Reiner",
                "date": "2014-04-26T21:01:47",
                "message_text_only": "On 04/26/2014 04:33 PM, Mike Hearn wrote:\n>\n>     Let's assume we use one shared branch for everyone. Then two\n>     cosigners could need a new receiving address at the same time, and\n>     get the next unused address on that branch.\n>\n> This is the part I struggle to understand. There is no shared branch\n> because each user/cosigner has their own unique seed and thus unique\n> key hierarchy, right? What you described above could be an issue if\n> all co-signers shared the same seed but then the scheme wouldn't work.\n>\nConsider two people with phones, using 2-of-2,  using private seeds k1\nand k2.  Every address generated by either party is:\n\n2-of-2(K1/a'/b/c, K2/a'/b/c) \n\nSo for any a, b and c you end up with a 2-of-2 address.  The\nseeds/branches will not be used for single-sig receiving... it's always\na multisig 2-of-2.  In fact it behaves much like a regular wallet, you\ngive an a, b, and c value, and you get an address -- it's just that this\nwallet always gives you a P2SH multisig address.\n\nThe problem is that if you follow BIP32 in the the most obvious way,\nboth devices will generate receiving addresses along the last index, \ni.e.   K/a'/b/0, K/a'/b/1, K/a'/b/2,...  If I am at one store and my\nwife at another, we might both give out 2-of-2(K1/a'/b/382, K2/a'/b/382)\nat the same time not realizing the other one has distributed that\naddress.  There's not a good way to coordinate the devices well enough\nto avoid it.  But we don't have to.\n\nThe solution is to use two separate branches -- both phones will\nfollow/watch both branches, but each only only distributes payment\naddresses from one such branch.\n\nThe original proposal here suggested adding a level to the tree using\nthe \"cosigner index\" as a branch point for doing this...  I recommended\nsimply having 2*N values for \"b\", so that each participant has a\nreceiving line and change line, that won't conflict with other devices. \nHowever, all devices will still watch all 2*N branches to know the total\nbalance of the wallet, and will use UTXOs from those branches when\nconstructing spending transactions/proposals.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/72bca647/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-26T21:57:58",
                "message_text_only": "Ah, I see now. Thanks. And actually now I re-read it, Manuel's explanation\nwas clear, it just didn't sink in for some reason.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/ec0b3b07/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "New BIP32 structure for P2SH multisig wallets",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Thomas Voegtlin",
                "Mike Hearn",
                "Manuel Araoz",
                "Alan Reiner"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 28784
        }
    },
    {
        "title": "[Bitcoin-development] Eliminating double-spends with two-party self-escrow for high value transactions",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-04-26T11:23:12",
                "message_text_only": "In the majority of high-value transactions the fact that funds will be\nsent is known prior to when they actually are. For instance, if Alice is\nto meet Bob in person to buy a car or sell some Bitcoins, both parties\nknow the transaction will probably happen in the near future some time\nbefore it actually does. Existing escrow solutions already take\nadvantage of this fact; for instance Localbitcoins provides sellers the\nability to escrow their funds with Localbitcoins prior to when the funds\nare released to the buyer.\n\nHowever with nLockTime a third-party escrow agent is *not* required.\nInstead prior to Alice sending the funds to the escrow address, she has\nBob sign a refund transaction that unlocks at some time in the future.\nGenerally the transaction does go through, and Alice and Bob sign a\nsecond transaction sending the funds to Bob. Sometimes it doesn't, and\nAlice either gets Bob to sign a transaction sending the funds back to\nher, or in the worst-case, just waits for the timeout to elapse.\n\nNote that this technique can be used in addition to a third-party escrow\nagent - the third-party then only plays a role in exceptional\ncircumstances.\n\n\nImplementation sketch: Mycelium Local Trader\n--------------------------------------------\n\nThe Mycelium Local Trader(1) is functionality built into the Mycelium\nAndroid wallet that helps users trade cash for bitcoins by finding\ntraders in their local area. To attempt to prevent double-spends it uses\n\"transaction confidence\", a technique that attempts to determine how\nmany nodes on the network a given transaction has propagated too. Of\ncourse this technique is fragile and vulnerable to many attacks.\n\nLocal Trader already has pre-meetup buyer to seller communication built\nin. Within the application the buyers and sellers communicate and\nnegotiate the amount and price of the Bitcoins prior to arranging a\nmeeting place. We can extend this to self-escrow as follows:\n\n1) Alice publishes her offer to sell Bitcoins for cash.\n\n2) Bob replies to the offer with an unused pubkey, B.\n\n3) Alice creates tx1 paying a CHECKMULTISIG scriptPubKey spendable by\n   the co-operation of her pubkey, A, and Bob's pubkey, B. She signs tx1\n   but does not publish it.\n\n4) Alice creates tx_refund which is nLockTime'd until some point in the\n   future and returns the output of tx1 to an address she controls. Note\n   how tx_refund depends on the signed tx1.\n\n5) Alice sends Bob the hash of tx_refund for him to sign. As Bob does\n   not have the actual transaction Bob can't selectivly target tx1 for a\n   transaction mutability attack. Bob is free to sign the hash as the\n   pubkey has never been used before. Note that the tx_refund hash\n   Bob signs should be calculated with SIGHASH_SINGLE|SIGHASH_ANYONECANPAY\n   to allow Alice to, for instance, add fees.\n\n6) Bob replies with the signature.\n\n7) Alice checks the validity of the signature, and if satisfied,\n   publishes tx1 to the network.\n\n8) Alice and/or Bob travel to actually meet in person. If this takes\n   time t the probability of a block being generated during that\n   time is P=1-e^(1/10mins*t) For instance, with a travel time of 30\n   minutes we get 95% success, 1 hour 99.75%, and 2 hours 99.999%\n   success.\n\n9a) If the cash is handed over successfully Alice signs a\n    SIGHASH_SINGLE|SIGHASH_ANYONECANPAY signature for the tx1 output\n    spending the funds to a scriptPubKey specified by Bob and gives that\n    signature to him.\n\n10a) Bob creates a transaction spending the output, adds Alice's\n     signature to it, and finally signs it himself. He broadcasts this\n     transaction to the network, completing the transfer.\n\n9b) If the cash is NOT handed over successfully Alice and Bob can either\n    co-operate to cancel the transaction immediately, sending the\n    escrowed funds back to Alice, or Alice can wait until the timeout to\n    use the signature she had Bob prepare in advance.\n\n\nWhile the above is relatively complex, from the user's point of view the\nprocess is quite similar to how Mycelium already works:\n\nAlice: Publish offer -> Accept offer  -> Travel -> Release funds\nBob:   Browse ads    -> Reserve funds -> Travel -> Accept\n\nThe chief difference being that the funds for the transaction have been\nreserved, and if the transaction does not go through, will not be\nunlocked without the co-operation of the other party, or the expiration\nof the timeout.\n\n\nTransaction Malleability\n------------------------\n\nWhile the above is fairly secure if transactions aren't being mutated\nen-mass, better protections would be desirable. First of all adding a\nthird-party escrow to the two-party escrow is a prudent last ditch\nmeasure to ensure that if malleability is an issue the third-party can\nrelease locked funds manually; note how SIGHASH_SINGLE is used as\nopposed to SIGHASH_NONE to prevent that third-party from having access\nto the funds. Secondly a future soft-fork such as Pieter Wuille's\nBIP62(2) can eliminate malleability. In particular, a soft-fork that\nenabled the creation of signatures that did *not* include the txin txid\nwould be particularly valuable; in step 4 above Bob's refund signature\nsigned over the scriptPubKey and nLockTime only would cover all possible\ncases whre a refund would be needed, such as accidental multiple\npayments and previously unknown sources of malleability.\n\n\n1) http://www.reddit.com/r/Bitcoin/comments/236k5d/mycelium_local_trader_is_now_available/\n\n2) https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000009c143a1773a5dc24477ec151689bc78ffdd00a232bd533c8\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/97b21175/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-26T18:07:58",
                "message_text_only": "What stops the buyer just always waiting to get their money back?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/9de432a1/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-26T18:31:19",
                "message_text_only": "On Sat, Apr 26, 2014 at 08:07:58PM +0200, Mike Hearn wrote:\n> What stops the buyer just always waiting to get their money back?\n\nThe seller won't hand over the goods of course until they have a valid\ntransaction signed by the buyer sending them the escrowed funds. (and\nthe nLockTime deadline is sufficiently far away that the probability of\nnot being able to get the transaction mined in time is low)\n\nNote how the mechanism I'm proposing is basically just a Jeremy\nSpilman-style micropayment channel(1) used for a single payment; I\nshould have made that clear in my original post.\n\n1) http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02028.html\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000069ea3b64f8b627bc81c8981ce80e95edf81cd356ad04e1a0\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/35b772e1/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-26T18:51:19",
                "message_text_only": ">\n> Note how the mechanism I'm proposing is basically just a Jeremy\n> Spilman-style micropayment channel(1) used for a single payment; I\n> should have made that clear in my original post.\n\n\nRight, that does make more sense. Yes, it's a good idea. The question is\nwhether wallet UI's can support it without being overly complex. We'd be\nasking users to take extra steps to work around unintuitive limitations of\nthe protocol. Products that do that too much tend to get left for something\nthat \"just works\". But there may be a slick way to present it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/d3bbc63e/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2014-04-26T19:37:59",
                "message_text_only": "On Sat, Apr 26, 2014 at 02:31:19PM -0400, Peter Todd wrote:\n> On Sat, Apr 26, 2014 at 08:07:58PM +0200, Mike Hearn wrote:\n> > What stops the buyer just always waiting to get their money back?\n> \n> The seller won't hand over the goods of course until they have a valid\n> transaction signed by the buyer sending them the escrowed funds. (and\n> the nLockTime deadline is sufficiently far away that the probability of\n> not being able to get the transaction mined in time is low)\n> \n> Note how the mechanism I'm proposing is basically just a Jeremy\n> Spilman-style micropayment channel(1) used for a single payment; I\n> should have made that clear in my original post.\n> \n> 1) http://www.mail-archive.com/bitcoin-development%40lists.sourceforge.net/msg02028.html\n\nI swear, I'm getting alzheimers or something. This and stealth addresses\nis now the second time I've totally forgotten I had just read an idea a\nweek prior:\n\nReddit user RubenSomsen, ten days ago:\n\n\"I would really like it if Mycelium allowed me to temporarily lock my\nbitcoins in a 2-of-2 transaction with a potential buyer (of course with\nnlocktime back to myself) so the network can start confirming the\ntransaction before we even meet.\"\n-http://www.reddit.com/r/Bitcoin/comments/236k5d/mycelium_local_trader_is_now_available/cgtxede\n\nBetter explanation than mine too for someone wanting a quick intro.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000038a12e1b8bc9562cddc5cfa24ba7c418f4b945f6b1677e41\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/3e819c34/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Eliminating double-spends with two-party self-escrow for high value transactions",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Peter Todd"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 9632
        }
    },
    {
        "title": "[Bitcoin-development] BIP0071 media type registration with IANA",
        "thread_messages": [
            {
                "author": "Ross Nicoll",
                "date": "2014-04-26T20:15:28",
                "message_text_only": "Dear all,\n\nStill going through the payment protocol specifications... the MIME\ntypes in BIP0071 aren't IANA registered, and honestly look unlikely to\nbe accepted if they were submitted as-is.\n\nLatest RFC on media type registration is RFC 6838, which very strictly\nrestricts what can go in the default \"application/\" namespace.\nEssentially they'd want it to be an ISO standard or similar. There are\nvendor namespaces, which look much more feasible (this is how Powerpoint\n2007 ended up as\n\"application/vnd.openxmlformats-officedocument.presentationml.presentation\"),\nbut would be quite a dramatic change to BIP0071.\n\nWhat's the general feeling on this? Personally I'm in favour of\nfollowing the registration process, so register a Bitcoin vendor\nnamespace with IANA, then allocate MIME types such as:\n\napplication/vnd.bitcoin.payment.request\napplication/vnd.bitcoin.payment.payment\napplication/vnd.bitcoin.payment.ack\n\nThoughts?\n\nRoss"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-26T20:17:58",
                "message_text_only": "Bitcoin is not a vendor, so I doubt that would work.\n\nI doubt we should spend any time on this. The chance of a string collision\nis extremely low. The current mime types are fine.\n\n\nOn Sat, Apr 26, 2014 at 10:15 PM, Ross Nicoll <jrn at jrn.me.uk> wrote:\n\n> Dear all,\n>\n> Still going through the payment protocol specifications... the MIME\n> types in BIP0071 aren't IANA registered, and honestly look unlikely to\n> be accepted if they were submitted as-is.\n>\n> Latest RFC on media type registration is RFC 6838, which very strictly\n> restricts what can go in the default \"application/\" namespace.\n> Essentially they'd want it to be an ISO standard or similar. There are\n> vendor namespaces, which look much more feasible (this is how Powerpoint\n> 2007 ended up as\n>\n> \"application/vnd.openxmlformats-officedocument.presentationml.presentation\"),\n> but would be quite a dramatic change to BIP0071.\n>\n> What's the general feeling on this? Personally I'm in favour of\n> following the registration process, so register a Bitcoin vendor\n> namespace with IANA, then allocate MIME types such as:\n>\n> application/vnd.bitcoin.payment.request\n> application/vnd.bitcoin.payment.payment\n> application/vnd.bitcoin.payment.ack\n>\n> Thoughts?\n>\n> Ross\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140426/10d25654/attachment.html>"
            },
            {
                "author": "Jannis Froese",
                "date": "2014-04-26T21:16:48",
                "message_text_only": "Am 2014-04-26 22:17, schrieb Mike Hearn:\n> Bitcoin is not a vendor, so I doubt that would work.\nBy my interpretation of RFC 6838, the Bitcoin Foundation or even Gavin \nhimself could register a vendor tree for Bitcoin. In the case of the \nfoundation registering, getting the subtree named vdn.bitcoin should be \nno problem.\n\n> I doubt we should spend any time on this. The chance of a string \n> collision is extremely low. The current mime types are fine.\nIt's mostly about the good feeling of having followed the rules and \nproper procedures, I doubt that there is a difference in practice"
            }
        ],
        "thread_summary": {
            "title": "BIP0071 media type registration with IANA",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jannis Froese",
                "Mike Hearn",
                "Ross Nicoll"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3516
        }
    },
    {
        "title": "[Bitcoin-development] About Compact SPV proofs via block header commitments",
        "thread_messages": [
            {
                "author": "Sergio Lerner",
                "date": "2014-04-27T01:08:15",
                "message_text_only": "I read the post in this threads about Compact SPV proofs via block\nheader commitments (archived e-mail in\nhttps://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04318.html).\nI was working on the same problem almost at the same time, which is\nsomething that's becoming very common nowadays..\n\nThe proposal starts with the following claim:\n\n\"In simple payment verification (SPV) proofs it is currently necessary\nthat every intervening block header be provided between two blocks in\norder to establish both connectivity and proof of work.\"\n\nI think this is false. Let's first assume that at the time of an attack\nwe're connected only to the attacker (no honest nodes). An\nnon-interactive SPV proof needs to prove that a transaction belongs to\nthe best chain because creating a counterfeit proof cost more than the\namount of money involved in the proof. Suppose that the proof consist at\nleast of a block header and a merkle branch to the claimed transaction.\n\nDo the proof need connectivity with the last checkpoint known by the\nverifier? (here checkpoint is any block known for sure to be in the best\nchain)\n\nNot much, because connectivity only proves that the proof was not\npre-computed before the checkpoint. Only if the checkpoint is very near\n(say 10 blocks back) it brings some practical evidence that the attacker\ndid not have much time to prepare an attack.\n \nDo the proof need to know the interleaving proof-of-work?\n\nNot much. If the distance between blocks is less than 2016 blocks, then\nthe difficulty may have change only by a factor of 4. Currently\ndifficult adjustments are much lower (I suppose that about 1.1 or so).\nThen one can assume that the proof block target difficulty is almost the\nsame as the last known difficulty if the block distance is less than\n2016. If the distance is more, we just load all the interleaving\nre-target blocks to detect the actual difficulty.\n\nDo the proof need to have a certain number of  confirmations?\n\nYes and no, because this is the only evidence that the prover has either\nspend money in creating the fake block or took a genuine block.\nThe cost of creating a fake block can be approximated as the minimum of:\n- The current reward of the block (since currently fees are much lower\nthan the reward)\n- The average block fees (when the reward goes to zero)\n- The minimum electricity cost of mining the block.\n\nAs time passes one could assume that the electricity cost of mining will\napproach the other two. \n\nBut there is the problem of parallel synchronized attacks: if an\nattacker can reuse the same fake SPV proof to attack several victims,\nthen the reward for cheating increases proportionally but the cost stays\nthe same.\nFor instance, if 6 confirmations are required, and each block can hold\n2000 transactions, the attacker can find 2000 victims and re-use the\nsame 6 block chain to \"prove\" payments to 2000 victims. Also the cost of\nmining 6 blocks can be amortized by mining 7, and attacking in the first\ntwo 4000 victims, etc...\n\nAny scheme than relies on non-interactive SPV proofs will fail if\nBitcoin will scale up-to a point where victims can be easily found and\nsynchronized.\nSo I think one should assume that at least one peer is honest...\n\nBut if we assume than during the attack least one peer is honest, then\nwe could directly ask every peer to give us the blocks of their\nbest-chains at the same heights of the presented proof.  No back-links\nare necessary.  If any peer shows a different block, then we should\ncarefully detect which of the two nodes is the one attacking us and ban\nit, by downloading the best-chain headers from the last checkpoint to\nthe block of the proof.  This would be rare so I don't see when the\nback-links can help.\n\nThe use case should be:\n\n==Use cases==\n\nFor SPV client that has just come online asks peers what is the last block height/time. \nIf a peer replies with an old block, then that peer is still downloading the block-chain and it's ignored.\nFor the remaining peers, the client starts asking for parents blocks until all parents agree (this is the last common parent). \nIf (U)TxO hash-tree commitments are available, then the wallet is updated using this data from the common parent block. \n\nAt the same time the client retrieves compact non-interactive proofs-of-inclusion (possibly orphan) for its transactions \nwithout having to download every intervening block header.\n\nIs there something wrong with this?\n \nBest regards,\nSergio."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-27T01:43:36",
                "message_text_only": "Sergio,\n\nFirst of all, let's define what an SPV proof is: it is a succinct\nsequence of bits which can be transmitted as part of a non-interactive\nprotocol that convincingly establishes for a client without access to\nthe block chain that for some block B, B has an ancestor A at some\nspecified height and work distance back, and the cost of creating a\nfalse proof is at least as much work as it claims to represent.\n\nThe previous email you quote demonstrates how with additional backlink\ncommitments this can be done in logarithmic space: using an average of\nlog(N) headers to construct an SPV proof from block A to block B where N\nis the height differential. It can be verified without access to the\nblock chain or other peers. Note that with back links the cost of\ncreating a fraudulent SPV proof is the same as 51% attacking bitcoin\nitself. The protocol you outlined does not have this property.\n\nOther than that, honestly I'm not really sure what you are trying to\naccomplish. An interactive proof is does not meet the above requirements\nand is not usable for the driving application of two-way pegs. Maybe you\nhad some other application in mind? I've looked at your SmartSPV\nproposal, but fail to see how it doesn't reduce to simply blind trust in\nyour view of the network from your peers. SPV proofs on the other hand\nput an economic cost to fraud.\n\nOn 04/26/2014 06:08 PM, Sergio Lerner wrote:\n> I read the post in this threads about Compact SPV proofs via block\n> header commitments (archived e-mail in\n> https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg04318.html).\n> I was working on the same problem almost at the same time, which is\n> something that's becoming very common nowadays..\n> \n> The proposal starts with the following claim:\n> \n> \"In simple payment verification (SPV) proofs it is currently necessary\n> that every intervening block header be provided between two blocks in\n> order to establish both connectivity and proof of work.\"\n> \n> I think this is false. Let's first assume that at the time of an attack\n> we're connected only to the attacker (no honest nodes). An\n> non-interactive SPV proof needs to prove that a transaction belongs to\n> the best chain because creating a counterfeit proof cost more than the\n> amount of money involved in the proof. Suppose that the proof consist at\n> least of a block header and a merkle branch to the claimed transaction.\n> \n> Do the proof need connectivity with the last checkpoint known by the\n> verifier? (here checkpoint is any block known for sure to be in the best\n> chain)\n> \n> Not much, because connectivity only proves that the proof was not\n> pre-computed before the checkpoint. Only if the checkpoint is very near\n> (say 10 blocks back) it brings some practical evidence that the attacker\n> did not have much time to prepare an attack.\n>  \n> Do the proof need to know the interleaving proof-of-work?\n> \n> Not much. If the distance between blocks is less than 2016 blocks, then\n> the difficulty may have change only by a factor of 4. Currently\n> difficult adjustments are much lower (I suppose that about 1.1 or so).\n> Then one can assume that the proof block target difficulty is almost the\n> same as the last known difficulty if the block distance is less than\n> 2016. If the distance is more, we just load all the interleaving\n> re-target blocks to detect the actual difficulty.\n> \n> Do the proof need to have a certain number of  confirmations?\n> \n> Yes and no, because this is the only evidence that the prover has either\n> spend money in creating the fake block or took a genuine block.\n> The cost of creating a fake block can be approximated as the minimum of:\n> - The current reward of the block (since currently fees are much lower\n> than the reward)\n> - The average block fees (when the reward goes to zero)\n> - The minimum electricity cost of mining the block.\n> \n> As time passes one could assume that the electricity cost of mining will\n> approach the other two. \n> \n> But there is the problem of parallel synchronized attacks: if an\n> attacker can reuse the same fake SPV proof to attack several victims,\n> then the reward for cheating increases proportionally but the cost stays\n> the same.\n> For instance, if 6 confirmations are required, and each block can hold\n> 2000 transactions, the attacker can find 2000 victims and re-use the\n> same 6 block chain to \"prove\" payments to 2000 victims. Also the cost of\n> mining 6 blocks can be amortized by mining 7, and attacking in the first\n> two 4000 victims, etc...\n> \n> Any scheme than relies on non-interactive SPV proofs will fail if\n> Bitcoin will scale up-to a point where victims can be easily found and\n> synchronized.\n> So I think one should assume that at least one peer is honest...\n> \n> But if we assume than during the attack least one peer is honest, then\n> we could directly ask every peer to give us the blocks of their\n> best-chains at the same heights of the presented proof.  No back-links\n> are necessary.  If any peer shows a different block, then we should\n> carefully detect which of the two nodes is the one attacking us and ban\n> it, by downloading the best-chain headers from the last checkpoint to\n> the block of the proof.  This would be rare so I don't see when the\n> back-links can help.\n> \n> The use case should be:\n> \n> ==Use cases==\n> \n> For SPV client that has just come online asks peers what is the last block height/time. \n> If a peer replies with an old block, then that peer is still downloading the block-chain and it's ignored.\n> For the remaining peers, the client starts asking for parents blocks until all parents agree (this is the last common parent). \n> If (U)TxO hash-tree commitments are available, then the wallet is updated using this data from the common parent block. \n> \n> At the same time the client retrieves compact non-interactive proofs-of-inclusion (possibly orphan) for its transactions \n> without having to download every intervening block header.\n> \n> Is there something wrong with this?\n>  \n> Best regards,\n> Sergio.\n> \n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-04-27T02:39:40",
                "message_text_only": "El 26/04/2014 10:43 p.m., Mark Friedenbach escribi\u00f3:\n> Sergio,\n>\n> First of all, let's define what an SPV proof is: it is a succinct\n> sequence of bits which can be transmitted as part of a non-interactive\n> protocol that convincingly establishes for a client without access to\n> the block chain that for some block B, B has an ancestor A at some\n> specified height and work distance back, and the cost of creating a\n> false proof is at least as much work as it claims to represent.\nOk. I was thinking with another definition SPV proof.\n\nFor me a SPV proof is a sequence of bits which can be transmitted as\npart of a non-interactive protocol that convincingly establishes for a\nclient without access to the block chain that a block B is part of the\nbest-chain.\n\nI understand that SPV nodes require SPV proofs as defined in my\ndefinition, but I can't realize how to prove that SPV nodes require SPV\nproofs under your definition. So your definition sounds to me like one\npossible solution, but not the need.\n \nIs your definition something well-established in the community?"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-27T06:43:46",
                "message_text_only": "I don't think there's an official definition of \"SPV proof.\" I wasn't\ntrying to make a argument \"from definition\" (that would be fallacious!).\nRather I suspected that we had different concepts in mind and wanted to\ncheck.\n\nThat said, I do think that the definition I gave matches how the term is\nused in the Satoshi whitepaper, and the way in which SPV clients like\nBitcoinJ work. \"Best chain\" is typically taken to mean the most-work,\n*valid* chain. Without invoking moon math or assumptions of honest peers\nand jamming-free networks, the only way to know a chain is valid is to\nwitness the each and every block. SPV nodes on the other hand, simply\ntrust that the most-work chain is a valid chain, based on economic\narguments about the opportunity cost of mining invalid blocks. These SPV\nnodes use block headers as proofs to determine the most-work block\nconnected to the genesis block or most recent checkpoint. So yes,\noperationally at least this is what the community seems to mean by \"SPV\nproof\".\n\nNow regarding your use case:\n\n> For the remaining peers, the client starts asking for parents blocks \n> until all parents agree (this is the last common parent).\n\nThis linear scan of block headers is what I would prefer to avoid. By\nusing back-links you make it have log(N) space usage.\n\nOn 04/26/2014 07:39 PM, Sergio Lerner wrote:\n> El 26/04/2014 10:43 p.m., Mark Friedenbach escribi\u00f3:\n>> Sergio,\n>> \n>> First of all, let's define what an SPV proof is: it is a succinct \n>> sequence of bits which can be transmitted as part of a \n>> non-interactive protocol that convincingly establishes for a\n>> client without access to the block chain that for some block B, B\n>> has an ancestor A at some specified height and work distance back,\n>> and the cost of creating a false proof is at least as much work as\n>> it claims to represent.\n> Ok. I was thinking with another definition SPV proof.\n> \n> For me a SPV proof is a sequence of bits which can be transmitted as\n>  part of a non-interactive protocol that convincingly establishes\n> for a client without access to the block chain that a block B is part\n> of the best-chain.\n> \n> I understand that SPV nodes require SPV proofs as defined in my \n> definition, but I can't realize how to prove that SPV nodes require \n> SPV proofs under your definition. So your definition sounds to me \n> like one possible solution, but not the need.\n> \n> Is your definition something well-established in the community?\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n>\n> \nStart Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software Java Based \n> Open Source Intranet - Social, Extensible, Cloud Ready Get Started \n> Now And Turn Your Intranet Into A Collaboration Platform \n> http://p.sf.net/sfu/ExoPlatform \n> _______________________________________________ Bitcoin-development \n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-04-27T12:36:11",
                "message_text_only": "El 27/04/2014 03:43 a.m., Mark Friedenbach escribi\u00f3:\n> I don't think there's an official definition of \"SPV proof.\" I wasn't\n> trying to make a argument \"from definition\" (that would be fallacious!).\n> Rather I suspected that we had different concepts in mind and wanted to\n> check.\nSo to disambiguate I define the most general definition as a NPP\n(non-interactive payment proof).\n> Without invoking moon math or assumptions of honest peers\n> and jamming-free networks, the only way to know a chain is valid is to\n> witness the each and every block. SPV nodes on the other hand, simply\n> trust that the most-work chain is a valid chain, based on economic\n> arguments about the opportunity cost of mining invalid blocks. \nI argue that you cannot talk about \"the most-work chain\" without\nactually making an assumption about honest peers.\nIf you do not make the assumption, you compute the \"economic arguments\"\nwrong.\n> Now regarding your use case:\n>\n>> For the remaining peers, the client starts asking for parents blocks \n>> until all parents agree (this is the last common parent).\n> This linear scan of block headers is what I would prefer to avoid. By\n> using back-links you make it have log(N) space usage.\nFirst this is a method that uses NPPs, not SPV proofs.\nSince the method chooses all peers that are synchronized (have the\nlatest current block) then going back means only skipping a potential\nshort fork (which I suppose has never been more than 3 blocks during\nnormal network conditions). You're looking for a common ancestor, not\nthe checkpoint.\nSo the linear scan is actually O(1).\nThe exact value can be approximated by the sum of the convergent\ninfinite geometrical sequence of forking probabilities, which it's about\n1.03 without considering selfish-mining, and probably less than 2.03\nconsidering it."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-27T17:05:45",
                "message_text_only": "On 04/27/2014 05:36 AM, Sergio Lerner wrote:\n>> Without invoking moon math or assumptions of honest peers and\n>> jamming-free networks, the only way to know a chain is valid is to \n>> witness the each and every block. SPV nodes on the other hand,\n>> simply trust that the most-work chain is a valid chain, based on\n>> economic arguments about the opportunity cost of mining invalid\n>> blocks.\n> I argue that you cannot talk about \"the most-work chain\" without \n> actually making an assumption about honest peers.\n\nI should have said \"without invoking moon math or interactive protocols\nrequiring honest peers over jamming-free networks.\" The interactive\nprotocol was more the point than the honest peers and jamming-free\nnetwork. Yes, without an honest peer and an un-jammed network, you might\nnever learn about the most-work chain in the first place. But having the\nsecurity of the proof not depend on query access to an honest full node\nis absolutely necessary for some applications and certainly desirable in\nothers.\n\nAlthough strictly speaking what I said may not be 100% true. The single\nalternative solution I've seen involves some sort of Fiat\u2013Shamir\ntransform that could give you a probabilistic proof by including random\nadditional paths through the block chain chosen based on the combined\nhash of the headers. However this is disadvantageous as it massively\nincreases the proof size and verification time, and you have to include\na lot of data to achieve assurance that more work was required to\ngenerate the fraud than an honest chain.\n\n> If you do not make the assumption, you compute the \"economic\n> arguments\" wrong.\n\nNot necessarily. By requiring connectivity you know that what you are\nreceiving is built off of the main chain, for example, and you can still\nmake assumptions about resulting opportunity costs.\n\n> First this is a method that uses NPPs, not SPV proofs. Since the\n> method chooses all peers that are synchronized (have the latest\n> current block) then going back means only skipping a potential short\n> fork (which I suppose has never been more than 3 blocks during normal\n> network conditions). You're looking for a common ancestor, not the\n> checkpoint. So the linear scan is actually O(1). The exact value can\n> be approximated by the sum of the convergent infinite geometrical\n> sequence of forking probabilities, which it's about 1.03 without\n> considering selfish-mining, and probably less than 2.03 considering\n> it.\n\nUnless you're connected to attacker nodes which are wildly divergent\nfrom each other. It's relatively easy to create a massive fake history\nof difficulty-1 blocks.\n\nIf you assume honest peers things get very easy. But that's not a safe\nassumption to be making. With back-link block-history commitments, on\nthe other hand, an interactive protocol allows you to do a binary search\nto find common ancestors, and have trust that the intermediate links\nactually exist."
            },
            {
                "author": "Sergio Lerner",
                "date": "2014-04-28T14:32:33",
                "message_text_only": "On 27/04/2014 02:05 p.m., Mark Friedenbach wrote:\n>\n> On 04/27/2014 05:36 AM, Sergio Lerner wrote:\n>>> Without invoking moon math or assumptions of honest peers and\n>>> jamming-free networks, the only way to know a chain is valid is to \n>>> witness the each and every block. SPV nodes on the other hand,\n>>> simply trust that the most-work chain is a valid chain, based on\n>>> economic arguments about the opportunity cost of mining invalid\n>>> blocks.\n>> I argue that you cannot talk about \"the most-work chain\" without \n>> actually making an assumption about honest peers.\n> I should have said \"without invoking moon math or interactive protocols\n> requiring honest peers over jamming-free networks.\" The interactive\n> protocol was more the point than the honest peers and jamming-free\n> network. Yes, without an honest peer and an un-jammed network, you might\n> never learn about the most-work chain in the first place. But having the\n> security of the proof not depend on query access to an honest full node\n> is absolutely necessary for some applications and certainly desirable in\n> others.\nThe problem is not having or not access to a honest full node. The SPV\nclient MUST have access to a honest full node sometime.\nThe problem is WHEN. One can make the security assumption that during an\nattack (someone gives you a fake block) you also loose the possibility\nto reach any honest node. Then SPV proofs come into play.\n\nHere are the security assumptions I added to my post about SmartSPV to\nclarify this:\n\n*Security Assumptions\n*\n\nFirst let\u2019s review the main security assumption of headers-only SPV:\n\n  * The attacker does not control all your communications with the\n    payment network.\n\nThis means that there is at least a single connected peer that behaves\nhonestly. This assumption is quite strong and may not hold during short\nperiods of time, such as during application power-on (when only a few\npeers have been connected), or when moving to a place where the ISP is\nuntrusted. For SmartSPV we\u2019ll require weaker security assumptions:\n\n  * The attacker cannot control all your communications with the payment\n    network for more than a fixed period of time (e.g. 2016 blocks for\n    Bitcoin or approximately 15 days)\n  * The attacker is rational: it won\u2019t spend an huge amount of money to\n    steal a much smaller amount.\n\nThis assumptions imply that the attacker may control all your Internet\nconnections while he sends you a malicious block branch containing a\nfake payment to you.\n\n\n>\n>> First this is a method that uses NPPs, not SPV proofs. Since the\n>> method chooses all peers that are synchronized (have the latest\n>> current block) then going back means only skipping a potential short\n>> fork (which I suppose has never been more than 3 blocks during normal\n>> network conditions). You're looking for a common ancestor, not the\n>> checkpoint. So the linear scan is actually O(1). The exact value can\n>> be approximated by the sum of the convergent infinite geometrical\n>> sequence of forking probabilities, which it's about 1.03 without\n>> considering selfish-mining, and probably less than 2.03 considering\n>> it.\n> Unless you're connected to attacker nodes which are wildly divergent\n> from each other. It's relatively easy to create a massive fake history\n> of difficulty-1 blocks.\nSince in my use case (SmartSPV) I proposed you start from the most\nrecent block and go backwards, the attacker must compete in PoW with the\nreal current difficulty informed.\nSuppose the SPV client looks for 6-block chains backwards starting from\nthe last current block. Suppose you know or estimate the current network\ndifficulty. Suppose a malicious peer creates a fake 6-block chain Cm and\nthe honest peer gives you the 6-block chain Ch. If Ch has not the\nexpected work it's discarded. If both has the expected work, then you\nbetter not true any of them and walk their parents until you find a\ncommon parent. That's the block you should trust. If you don't have an\nhonest node connected, then the only decide to trust or not Cm is by\nit's accumulated work (and you have already a bound for it)\n\n\n> If you assume honest peers things get very easy. But that's not a safe\n> assumption to be making. With back-link block-history commitments, on\n> the other hand, an interactive protocol allows you to do a binary search\n> to find common ancestors, and have trust that the intermediate links\n> actually exist.\nSo you agree that:  you need a periodic connection to a honest node, but\nduring an attack you may loose that connection. This is the assumption\nwe should be working on, and my use case (described in\nhttp://bitslog.wordpress.com/2014/04/25/smartspv-a-better-simplified-payment-verification-for-smartphones/)\nassumes that.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140428/aac02c8f/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-28T17:29:46",
                "message_text_only": "On 04/28/2014 07:32 AM, Sergio Lerner wrote:\n> So you agree that:  you need a periodic connection to a honest node, but\n> during an attack you may loose that connection. This is the assumption\n> we should be working on, and my use case (described in\n> http://bitslog.wordpress.com/2014/04/25/smartspv-a-better-simplified-payment-verification-for-smartphones/)\n> assumes that.\n\nNo, that's sortof tangential. What you are solving is some higher level\napplication on top of SPV proofs, compact or otherwise. SPV proofs have\nmany broad applications, such as 2-way pegs where proof-of-work is used\nto reach consensus over the most-work side-chain header, and a non-51%\nattack is detectable from observed difficulty and interblock times. Do\nyou need an honest peer to learn about the best chain? Yes. Do you need\nto *trust* that you have an honest peer? No, because a non-51% attack\nagainst you is probabilistically detectable with existing tools.\n\nMaybe SmartSPV is useful, maybe not. The application domain is not\nsomething I've been concerned with in the past. But what you describe is\na higher-level protocol that uses block headers to determine which chain\nto trust. My simple point from the start has been that you can use\nback-link commitments and compact SPV proofs to accomplish what you want\nfewer messages, less bandwidth, and equal security. The two proposals\nare not in conflict with each other."
            }
        ],
        "thread_summary": {
            "title": "About Compact SPV proofs via block header commitments",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Sergio Lerner",
                "Mark Friedenbach"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 26248
        }
    },
    {
        "title": "[Bitcoin-development] Proposal for extra nonce in block header",
        "thread_messages": [
            {
                "author": "Timo Hanke",
                "date": "2014-04-27T07:07:32",
                "message_text_only": "I'd like to put the following draft of a BIP up for discussion.\n\nTimo\n\n# Abstract\nThere are incentives for miners to find cheap, non-standard ways to generate new work, which are not necessarily in the best interest of the protocol.\nIn order to reduce these incentives this proposal re-assigns 2 bytes from the version field of the block header to a new extra nonce field. \n# Copyright\n# Specification\nThe block version number field in the block header is reduced in size from 4 to 2 bytes. \nThe third and fourth byte in the block header are assigned to the new extra nonce field inside the block header.\n# Motivation\nThe motivation of this proposal is to provide miners with a cheap constant-complexity method to create new work that does not require altering the transaction tree.\n\nFurthermore, the motivation is to protect the version and timestamp fields in the block header from abuse.\n# Rationale\nTraditionally, the extra nonce is part of the coinbase field of the generation transaction, which is always the very first transaction of a block.\nAfter incrementing the extra nonce the minimum amount of work a miner has to do to re-calculate the block header is a) to hash the coinbase transaction and b) to re-calculate the left-most branch of the merkle tree all the way to the merkle root.\nThis is necessary overhead a miner has to do besides hashing the block header itself.\nWe shall call the process that leads to a new block header from the same transaction set the _pre-hashing_.\n\nFirst it should be noted that the relative cost of pre-hashing in its traditional form depends\non the block size, which may create an unwanted incentive for miners\nto keep the block size small. However, this is not the main motivation for\nthe current proposal.\n\nWhile the block header is hashed by ASICs, pre-hashing typically happens on a CPU because of the greater flexibility required.\nConsequently, as ASIC cost per hash performance drops the relative cost of pre-hashing increases.\n\nThis creates an incentive for miners to find cheaper ways to create new work than by means of pre-hashing.\nAn example of this currently happening is the on-device rolling of the timestamp into the future.\nThese ways of creating new work are unlikely to be in the best interest of the protocol.\nFor example, rolling the timestamp faster than the real time is unwanted (more so on faster blockchains).\n\nThe version number in the block header is a possible target for alteration with the goal of cheaply creating new work.\nCurrently, blocks with arbitrarily large version numbers get relayed and accepted by the network.\nAs this is unwanted behaviour, there should not exist any incentive for a miner to abuse the version number in this way. \n\nThe solution is to reduce the range of version numbers from 2^32 to 2^16 and to declare the third and forth bytes of the block header as legitimate space for an extra nonce.\nThis will reduce the incentive for a miner to abuse the shortened version number by a factor in the order of 2^16. \n\nAs a side effect, this proposal greatly reduces the bandwidth requirements of a blind pool protocol by only submitting the block header to the miner.\n# Backwards Compatibility\nOld versions of the client will accept blocks of this kind but will throw an alert at the user to upgrade.\nThe only code change would be a cast of the version number to a short.\nBesides the upgrade alert, old and new versions of the client can co-exist and there is no need to introduce a new block version number or to phase-out old block versions.\n# Reference Implementation\n# Final implementation\n\n-- \nTimo Hanke\nPGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2014-04-27T08:17:11",
                "message_text_only": "On 27 April 2014 09:07, Timo Hanke <timo.hanke at web.de> wrote:\n\n> I'd like to put the following draft of a BIP up for discussion.\n>\n> Timo\n>\n> # Abstract\n> There are incentives for miners to find cheap, non-standard ways to\n> generate new work, which are not necessarily in the best interest of the\n> protocol.\n> In order to reduce these incentives this proposal re-assigns 2 bytes from\n> the version field of the block header to a new extra nonce field.\n> # Copyright\n> # Specification\n> The block version number field in the block header is reduced in size from\n> 4 to 2 bytes.\n> The third and fourth byte in the block header are assigned to the new\n> extra nonce field inside the block header.\n> # Motivation\n> The motivation of this proposal is to provide miners with a cheap\n> constant-complexity method to create new work that does not require\n> altering the transaction tree.\n>\n> Furthermore, the motivation is to protect the version and timestamp fields\n> in the block header from abuse.\n> # Rationale\n> Traditionally, the extra nonce is part of the coinbase field of the\n> generation transaction, which is always the very first transaction of a\n> block.\n> After incrementing the extra nonce the minimum amount of work a miner has\n> to do to re-calculate the block header is a) to hash the coinbase\n> transaction and b) to re-calculate the left-most branch of the merkle tree\n> all the way to the merkle root.\n> This is necessary overhead a miner has to do besides hashing the block\n> header itself.\n> We shall call the process that leads to a new block header from the same\n> transaction set the _pre-hashing_.\n>\n> First it should be noted that the relative cost of pre-hashing in its\n> traditional form depends\n> on the block size, which may create an unwanted incentive for miners\n> to keep the block size small. However, this is not the main motivation for\n> the current proposal.\n>\n> While the block header is hashed by ASICs, pre-hashing typically happens\n> on a CPU because of the greater flexibility required.\n> Consequently, as ASIC cost per hash performance drops the relative cost of\n> pre-hashing increases.\n>\n> This creates an incentive for miners to find cheaper ways to create new\n> work than by means of pre-hashing.\n> An example of this currently happening is the on-device rolling of the\n> timestamp into the future.\n> These ways of creating new work are unlikely to be in the best interest of\n> the protocol.\n> For example, rolling the timestamp faster than the real time is unwanted\n> (more so on faster blockchains).\n>\n> The version number in the block header is a possible target for alteration\n> with the goal of cheaply creating new work.\n> Currently, blocks with arbitrarily large version numbers get relayed and\n> accepted by the network.\n> As this is unwanted behaviour, there should not exist any incentive for a\n> miner to abuse the version number in this way.\n>\n> The solution is to reduce the range of version numbers from 2^32 to 2^16\n> and to declare the third and forth bytes of the block header as legitimate\n> space for an extra nonce.\n> This will reduce the incentive for a miner to abuse the shortened version\n> number by a factor in the order of 2^16.\n>\n> As a side effect, this proposal greatly reduces the bandwidth requirements\n> of a blind pool protocol by only submitting the block header to the miner.\n> # Backwards Compatibility\n> Old versions of the client will accept blocks of this kind but will throw\n> an alert at the user to upgrade.\n> The only code change would be a cast of the version number to a short.\n> Besides the upgrade alert, old and new versions of the client can co-exist\n> and there is no need to introduce a new block version number or to\n> phase-out old block versions.\n> # Reference Implementation\n> # Final implementation\n>\n\nIf changing the structure of the block header, wouldnt you also need to\nincrement the version number to 3?\n\n\n>\n> --\n> Timo Hanke\n> PGP 1EFF 69BC 6FB7 8744 14DB  631D 1BB5 D6E3 AB96 7DA8\n>\n>\n> ------------------------------------------------------------------------------\n> Start Your Social Network Today - Download eXo Platform\n> Build your Enterprise Intranet with eXo Platform Software\n> Java Based Open Source Intranet - Social, Extensible, Cloud Ready\n> Get Started Now And Turn Your Intranet Into A Collaboration Platform\n> http://p.sf.net/sfu/ExoPlatform\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140427/2ebc89a7/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2014-04-27T09:38:06",
                "message_text_only": "I'm not convinced of the necessity of this idea in general, but if it\nwere to be implemented I would recommend serializing the nVersion field\nas a VarInt (Pieter Wuille's multi-byte serialization format) and using\nthe remaining space of the 4 bytes as your extra nonce.\n\nThat would allow serialization of numbers up to 0x1020407f (slightly\nover 28 bits) before the 4-byte field is exhausted. For version numbers\nless than 0x204080 there will be at least one byte of padding space left\nover for extra-nonce usage (two bytes if less than 0x4080, three bytes\nif less than 0x80). For version values up to 127, the format is exactly\nidentical when the padding bytes are zero.\n\nOn 04/27/2014 12:07 AM, Timo Hanke wrote:\n> I'd like to put the following draft of a BIP up for discussion.\n> \n> Timo\n> \n> # Abstract\n> There are incentives for miners to find cheap, non-standard ways to generate new work, which are not necessarily in the best interest of the protocol.\n> In order to reduce these incentives this proposal re-assigns 2 bytes from the version field of the block header to a new extra nonce field. \n> # Copyright\n> # Specification\n> The block version number field in the block header is reduced in size from 4 to 2 bytes. \n> The third and fourth byte in the block header are assigned to the new extra nonce field inside the block header.\n> # Motivation\n> The motivation of this proposal is to provide miners with a cheap constant-complexity method to create new work that does not require altering the transaction tree.\n> \n> Furthermore, the motivation is to protect the version and timestamp fields in the block header from abuse.\n> # Rationale\n> Traditionally, the extra nonce is part of the coinbase field of the generation transaction, which is always the very first transaction of a block.\n> After incrementing the extra nonce the minimum amount of work a miner has to do to re-calculate the block header is a) to hash the coinbase transaction and b) to re-calculate the left-most branch of the merkle tree all the way to the merkle root.\n> This is necessary overhead a miner has to do besides hashing the block header itself.\n> We shall call the process that leads to a new block header from the same transaction set the _pre-hashing_.\n> \n> First it should be noted that the relative cost of pre-hashing in its traditional form depends\n> on the block size, which may create an unwanted incentive for miners\n> to keep the block size small. However, this is not the main motivation for\n> the current proposal.\n> \n> While the block header is hashed by ASICs, pre-hashing typically happens on a CPU because of the greater flexibility required.\n> Consequently, as ASIC cost per hash performance drops the relative cost of pre-hashing increases.\n> \n> This creates an incentive for miners to find cheaper ways to create new work than by means of pre-hashing.\n> An example of this currently happening is the on-device rolling of the timestamp into the future.\n> These ways of creating new work are unlikely to be in the best interest of the protocol.\n> For example, rolling the timestamp faster than the real time is unwanted (more so on faster blockchains).\n> \n> The version number in the block header is a possible target for alteration with the goal of cheaply creating new work.\n> Currently, blocks with arbitrarily large version numbers get relayed and accepted by the network.\n> As this is unwanted behaviour, there should not exist any incentive for a miner to abuse the version number in this way. \n> \n> The solution is to reduce the range of version numbers from 2^32 to 2^16 and to declare the third and forth bytes of the block header as legitimate space for an extra nonce.\n> This will reduce the incentive for a miner to abuse the shortened version number by a factor in the order of 2^16. \n> \n> As a side effect, this proposal greatly reduces the bandwidth requirements of a blind pool protocol by only submitting the block header to the miner.\n> # Backwards Compatibility\n> Old versions of the client will accept blocks of this kind but will throw an alert at the user to upgrade.\n> The only code change would be a cast of the version number to a short.\n> Besides the upgrade alert, old and new versions of the client can co-exist and there is no need to introduce a new block version number or to phase-out old block versions.\n> # Reference Implementation\n> # Final implementation\n>"
            }
        ],
        "thread_summary": {
            "title": "Proposal for extra nonce in block header",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "Timo Hanke",
                "Mark Friedenbach"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 12806
        }
    },
    {
        "title": "[Bitcoin-development] Replace-by-fee scorched-earth without child-pays-for-parent",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2014-04-28T12:02:09",
                "message_text_only": "Someone who wanted to remain anonymous sent me in this idea, which I'll\nadmit I'm kicking myself for not having thought of earlier. They sent\nme this hash so they can claim credit for it later should they choose to\nreveal their identity:\n\nbb0de552f81fa356b99fbeef65fa532bb58111184efee2cbe92f66509af8d151\n\n\nWhen Alice wants to pay Bob x bitcoins, rather than creating a single\ntransaction, tx1, that does that, she creates a pair of transactions,\nwith the second, tx2, spending the same inputs and an input provided by\nBob, but paying x*k bitcoins to fees. Should Bob detect a double-spend\nhe simply signs the extra input, making it clear that he intended for\nthe countermeasure to be deployed, and broadcasts tx2.\n\nThis mechanism has two advantages: 1) child-pays-for-parent isn't\nrequired at avoiding changes to the relaying code and letting the\ncounter-transaction propagate quickly. 2) k can be adjusted such that\nAlice is guaranteed to be worse off for attempting a double-spend even\ntaking into account the probability of getting away with it. For\ninstance, right now if just, say, Eligius adopted replace-by-fee a k\nvalue of 20 would still make double-spends unprofitable.\n\nHowever it does require payment protocol support. This lead me to\nrealize that if Alice signs all her inputs with the ANYONECANPAY sighash\nbit set Bob can get the same effect by adding his own inputs to bump the\neffective fee. While of course the funds to do so come out of his own\npocket, they are balanced out by the payment to him, with the net effect\nbeing the same as the child-pays-for-parent version. Additionally in the\ncommon case of \"Bob would like Alice's transaction to go through sooner\"\nthis also gives Bob the flexibility to add small sized inputs at will to\nbump fees. (or for that matter Alice, giving a small privacy boost)\n\nUsing ANYONECANPAY does have one disadvantage in that transactions using\nit are always malleable. However an \"attacker\" doing so is forced to\nspend funds to do that. Secondly after the recent malleability attacks\nwallet handling of malleability-related problems has greatly improved.\n\n\nFinally it's worth noting how the k-overpaying version of scorched-earth\ngives Finney attacking(1) miners - such as BitUndo - incentives to\ndefect knowing that they can earn significantly more fees by publishing\ntheir supposedly secret transactions to the p2p network. Equally even in\nthe ANYONECANPAY version merchants may decide that discouraging fraud is\nworth an overpayment.\n\n1) https://bitcointalk.org/index.php?topic=3441.msg48384#msg48384\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000000603b189f99cf2a95ce01835596b5d5fbd8c5725c11f504ee\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140428/baa6c952/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Replace-by-fee scorched-earth without child-pays-for-parent",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2929
        }
    },
    {
        "title": "[Bitcoin-development] Proposal to change payment protocol signing",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2014-04-28T12:39:36",
                "message_text_only": "There is a discussion about clarifying how BIP70 signs payment requests\nhere:\n  https://github.com/bitcoin/bips/pull/41\n\nThe issue is what to do with the signature field before signing. The code\nMike and I initially wrote does this:\n\n    request.set_signature(string(\"\"));\n\n(sets signature to the empty string)\n\nI think that is a mistake; it should be:\n\n   request.clear_signature();\n\n(clears signature field, so it is not serialized at all).\n\nSo: if you are implementing, or have implemented, the payment protocol,\nplease chime in. I'd like to change the spec and the reference\nimplementation NOW, while BIP70 is still a 'Draft'.\n\nBecause this type of \"hey, I'm implementing your standard and it doesn't\nwork the way I think it should\" mistake is exactly why BIPs take a while\nbefore being declared 'Final.'\n\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140428/6ecc6f09/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-28T16:14:37",
                "message_text_only": "Who cares what it is? Setting to an empty byte array is fine, IMO. The\npayment protocol is already rolling out. It's implemented in several\nwallets, BitPay implements it, Coinbase is implementing it, etc.\n\n-100000 for changing such a basic thing at this point. It'd cause chaos for\nthe early adopters, punishing them instead of rewarding them. It'd\nseriously hurt adoption of the payment protocol when it's at its most\nvulnerable. We should mark BIP 70 as accepted and be done with it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140428/9762e71a/attachment.html>"
            },
            {
                "author": "Ryan X. Charles",
                "date": "2014-04-28T20:53:41",
                "message_text_only": "Agreed with Mike. It doesn't really matter what the signature field is\nset to. Changing the standard now is too hard with too little benefit.\n\nOn 4/28/14, 12:14 PM, Mike Hearn wrote:\n> Who cares what it is? Setting to an empty byte array is fine, IMO. The\n> payment protocol is already rolling out. It's implemented in several\n> wallets, BitPay implements it, Coinbase is implementing it, etc.\n> \n> -100000 for changing such a basic thing at this point. It'd cause chaos\n> for the early adopters, punishing them instead of rewarding them. It'd\n> seriously hurt adoption of the payment protocol when it's at its most\n> vulnerable. We should mark BIP 70 as accepted and be done with it. \n> \n> \n> \n> ------------------------------------------------------------------------------\n> \"Accelerate Dev Cycles with Automated Cross-Browser Testing - For FREE\n> Instantly run your Selenium tests across 300+ browser/OS combos.  Get \n> unparalleled scalability from the best Selenium testing platform available.\n> Simple to use. Nothing to install. Get started now for free.\"\n> http://p.sf.net/sfu/SauceLabs\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-- \nRyan X. Charles\nSoftware Engineer, BitPay\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: 0xA11B4DDE.asc\nType: application/pgp-keys\nSize: 5627 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140428/4dded73d/attachment.bin>"
            },
            {
                "author": "Jouke Hofman",
                "date": "2014-04-29T16:44:12",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nWe have BIP70 already in use (over a hundred paid requests).\n\nCould you elaborate on why this needs changing?\n\n\n\nOn 28-04-14 14:39, Gavin Andresen wrote:\n> There is a discussion about clarifying how BIP70 signs payment\n> requests here: https://github.com/bitcoin/bips/pull/41\n> \n> The issue is what to do with the signature field before signing.\n> The code Mike and I initially wrote does this:\n> \n> request.set_signature(string(\"\"));\n> \n> (sets signature to the empty string)\n> \n> I think that is a mistake; it should be:\n> \n> request.clear_signature();\n> \n> (clears signature field, so it is not serialized at all).\n> \n> So: if you are implementing, or have implemented, the payment\n> protocol, please chime in. I'd like to change the spec and the\n> reference implementation NOW, while BIP70 is still a 'Draft'.\n> \n> Because this type of \"hey, I'm implementing your standard and it\n> doesn't work the way I think it should\" mistake is exactly why BIPs\n> take a while before being declared 'Final.'\n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \n\"Accelerate Dev Cycles with Automated Cross-Browser Testing - For FREE\n> Instantly run your Selenium tests across 300+ browser/OS combos.\n> Get unparalleled scalability from the best Selenium testing\n> platform available. Simple to use. Nothing to install. Get started\n> now for free.\" http://p.sf.net/sfu/SauceLabs\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQEcBAEBAgAGBQJTX9bcAAoJELhWickZBkAlKqcH/RVFAr6vGgDjJvYah46StMHy\nZhKwpV1oqFCslOts6MyO+bZp9uDRlmYtnAy02CTPmlico3IyK85/+CGCGEdyiGo1\nAEI2Ixr5FJs9t8uAVLyUKwOQddUFEJuZuiKXd1Wl9GqfG/z8gwdSxd08Wrq57lSH\nJdwUnWOG1xBwyhgm7stqFoXgTrrnFNcE97vwsk6QMIzJG/v0suw7Lp42q7bKYaA/\nJ9xWSQ1cRKSPdsmu4K45oxXriqUmiqz3EouaTSQqC80OO7y8sfa96DqiHR83Vy3w\nKUna5enjGqhhberWCokg3x5lCiH/IfLPrgK23iib4cg6Vm70jSQ2S2Xh/NuoDaM=\n=JA5K\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Gavin",
                "date": "2014-04-29T19:12:49",
                "message_text_only": "Consensus is the spec should be clarified to match current behavior, so it won't change.\n\n--\nGavin Andresen\n\n\n> On Apr 29, 2014, at 9:44 AM, Jouke Hofman <jouke at bitonic.nl> wrote:\n> \n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n> \n> We have BIP70 already in use (over a hundred paid requests).\n> \n> Could you elaborate on why this needs changing?\n> \n> \n> \n>> On 28-04-14 14:39, Gavin Andresen wrote:\n>> There is a discussion about clarifying how BIP70 signs payment\n>> requests here: https://github.com/bitcoin/bips/pull/41\n>> \n>> The issue is what to do with the signature field before signing.\n>> The code Mike and I initially wrote does this:\n>> \n>> request.set_signature(string(\"\"));\n>> \n>> (sets signature to the empty string)\n>> \n>> I think that is a mistake; it should be:\n>> \n>> request.clear_signature();\n>> \n>> (clears signature field, so it is not serialized at all).\n>> \n>> So: if you are implementing, or have implemented, the payment\n>> protocol, please chime in. I'd like to change the spec and the\n>> reference implementation NOW, while BIP70 is still a 'Draft'.\n>> \n>> Because this type of \"hey, I'm implementing your standard and it\n>> doesn't work the way I think it should\" mistake is exactly why BIPs\n>> take a while before being declared 'Final.'\n>> \n>> \n>> \n>> \n>> ---------------------------------------"
            }
        ],
        "thread_summary": {
            "title": "Proposal to change payment protocol signing",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Gavin",
                "Mike Hearn",
                "Ryan X. Charles",
                "Jouke Hofman",
                "Gavin Andresen"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 6866
        }
    },
    {
        "title": "[Bitcoin-development] please check my debug.log",
        "thread_messages": [
            {
                "author": "Eugen Leitl",
                "date": "2014-04-29T08:13:26",
                "message_text_only": "I've put up some bitcoind nodes after the network is\nin need of some, and would like some feedback in that\nthe nodes are fully operational and doing something\nuseful. Please check the logs and tell me whether\nI'm doing good.\n\ndebug.log from a node that has been running for a day:\n\n2014-04-29 08:06:18 ERROR: CheckTransaction() : vin empty\n2014-04-29 08:06:18 ERROR: AcceptToMemoryPool: : CheckTransaction failed\n2014-04-29 08:06:18 Misbehaving: 122.224.182.248:23159 (0 -> 10)\n2014-04-29 08:07:00 receive version message: /getaddr.bitnodes.io:0.1/: version 70001, blocks=298263, us=88.198.51.132:8333, them=0.0.0.0:0, peer=148.251.238.178:63657\n2014-04-29 08:07:19 receive version message: /bitcoinseeder:0.01/: version 60000, blocks=230000, us=[2a01:4f8:131:13ed::2]:8333, them=0.0.0.0:0, peer=[2a02:348:5e:5a29::1]:53921\n2014-04-29 08:09:37 receive version message: /Snoopy:0.1/: version 60001, blocks=0, us=88.198.51.132:8333, them=192.33.90.253:8333, peer=192.33.90.253:43104\n2014-04-29 08:09:37 socket recv error 104\n2014-04-29 08:10:26 receive version message: /getaddr.bitnodes.io:0.1/: version 70001, blocks=298263, us=[2a01:4f8:131:13ed::2]:8333, them=0.0.0.0:0, peer=[2a01:4f8:202:81b1::2]:50624\n2014-04-29 08:10:32 receive version message: /bitcoinseeder:0.01/: version 60000, blocks=230000, us=88.198.51.132:8333, them=0.0.0.0:0, peer=217.78.0.153:37275\n2014-04-29 08:10:50 receive version message: /getaddr.bitnodes.io:0.1/: version 70001, blocks=298263, us=88.198.51.132:8333, them=0.0.0.0:0, peer=148.251.238.178:50788\n\ndebug.log from a node that I just restarted:\n\n2014-04-29 08:06:16 Opening LevelDB in /home/bitcoind/.bitcoin/blocks/index\n2014-04-29 08:06:17 Opened LevelDB successfully\n2014-04-29 08:06:17 Opening LevelDB in /home/bitcoind/.bitcoin/chainstate\n2014-04-29 08:06:19 Opened LevelDB successfully\n2014-04-29 08:06:22 LoadBlockIndexDB(): last block file = 135\n2014-04-29 08:06:22 LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=631, size=128154379, heights=297633...298263, time=2014-04-25...2014-04-29)\n2014-04-29 08:06:22 LoadBlockIndexDB(): transaction index disabled\n2014-04-29 08:06:22 LoadBlockIndexDB(): hashBestChain=0000000000000000162f5f571eef4742b70204d983bda3c4b18fc1496ac27f86 height=298263 date=2014-04-29 08:00:23 progress=0.999981\n2014-04-29 08:06:22 init message: Verifying blocks...\n2014-04-29 08:06:22 Verifying last 288 blocks at level 3\n2014-04-29 08:07:42 No coin database inconsistencies in last 289 blocks (111189 transactions)\n2014-04-29 08:07:42  block index           86284ms\n2014-04-29 08:07:42 init message: Loading wallet...\n2014-04-29 08:07:42 nFileVersion = 90100\n2014-04-29 08:07:42 Keys: 101 plaintext, 0 encrypted, 101 w/ metadata, 101 total\n2014-04-29 08:07:43  wallet                  108ms\n2014-04-29 08:07:43 init message: Rescanning...\n2014-04-29 08:07:43 Rescanning last 39 blocks (from block 298224)...\n2014-04-29 08:07:43  rescan                  204ms\n2014-04-29 08:07:43 init message: Loading addresses...\n2014-04-29 08:07:43 Loaded 14015 addresses from peers.dat  84ms\n2014-04-29 08:07:43 mapBlockIndex.size() = 298264\n2014-04-29 08:07:43 nBestHeight = 298263\n2014-04-29 08:07:43 setKeyPool.size() = 100\n2014-04-29 08:07:43 mapWallet.size() = 0\n2014-04-29 08:07:43 mapAddressBook.size() = 1\n2014-04-29 08:07:43 AddLocal(213.239.218.20:8333,1)\n2014-04-29 08:07:43 IPv4 eth0: 213.239.218.20\n2014-04-29 08:07:43 AddLocal([2a01:4f8:a0:74c8::2]:8333,1)\n2014-04-29 08:07:43 IPv6 eth0: 2a01:4f8:a0:74c8::2\n2014-04-29 08:07:43 ext-ip thread start\n2014-04-29 08:07:43 dnsseed thread start\n2014-04-29 08:07:43 Loading addresses from DNS seeds (could take a while)\n2014-04-29 08:07:43 net thread start\n2014-04-29 08:07:43 upnp thread start\n2014-04-29 08:07:43 opencon thread start\n2014-04-29 08:07:43 addcon thread start\n2014-04-29 08:07:43 dumpaddr thread start\n2014-04-29 08:07:43 msghand thread start\n2014-04-29 08:07:43 init message: Done loading\n2014-04-29 08:07:43 GetMyExternalIP() received [213.239.218.20] 213.239.218.20:0\n2014-04-29 08:07:43 GetMyExternalIP() returned 213.239.218.20\n2014-04-29 08:07:43 AddLocal(213.239.218.20:8333,4)\n2014-04-29 08:07:43 ext-ip thread exit\n2014-04-29 08:07:44 receive version message: /Satoshi:0.8.6/: version 70001, blocks=298263, us=213.239.218.20:44169, them=166.78.243.104:8333, peer=166.78.243.104:8333\n2014-04-29 08:07:44 Added time data, samples 2, offset +8 (+0 minutes)\n2014-04-29 08:07:51 No valid UPnP IGDs found\n2014-04-29 08:07:51 upnp thread exit\n2014-04-29 08:07:53 connect() to 71.23.29.162:8333 failed after select(): No route to host\n2014-04-29 08:07:53 receive version message: /Satoshi:0.9.1/: version 70002, blocks=298263, us=213.239.218.20:46921, them=91.238.134.58:8333, peer=91.238.134.58:8333\n2014-04-29 08:07:53 Added time data, samples 3, offset +0 (+0 minutes)\n2014-04-29 08:07:54 106 addresses found from DNS seeds\n2014-04-29 08:07:54 dnsseed thread exit\n2014-04-29 08:08:16 receive version message: /Satoshi:0.8.6/: version 70001, blocks=298263, us=213.239.218.20:50533, them=98.218.92.212:8333, peer=98.218.92.212:8333\n2014-04-29 08:08:16 Added time data, samples 4, offset +2 (+0 minutes)\n2014-04-29 08:08:22 receive version message: /Satoshi:0.8.5/: version 70001, blocks=298263, us=213.239.218.20:35016, them=108.3.172.22:8333, peer=108.3.172.22:8333\n2014-04-29 08:08:22 Added time data, samples 5, offset +3 (+0 minutes)\n2014-04-29 08:08:22 nTimeOffset = +2  (+0 minutes)\n2014-04-29 08:08:27 receive version message: /bitcoinseeder:0.01/: version 60000, blocks=230000, us=213.239.218.20:8333, them=0.0.0.0:0, peer=178.18.90.41:52783\n2014-04-29 08:08:27 Added time data, samples 6, offset +0 (+0 minutes)\n2014-04-29 08:08:31 connect() to 24.136.254.2:8333 failed after select(): No route to host\n2014-04-29 08:08:37 connect() to 187.15.64.129:8333 failed after select(): Connection refused\n2014-04-29 08:08:38 receive version message: /Satoshi:0.8.5/: version 70001, blocks=298263, us=213.239.218.20:37793, them=209.99.52.77:8333, peer=209.99.52.77:8333\n2014-04-29 08:08:38 Added time data, samples 7, offset -1 (+0 minutes)\n2014-04-29 08:08:38 nTimeOffset = +0  (+0 minutes)\n2014-04-29 08:08:50 receive version message: /Satoshi:0.9.0/: version 70002, blocks=298263, us=213.239.218.20:54044, them=69.23.94.246:8333, peer=69.23.94.246:8333\n2014-04-29 08:08:50 Added time data, samples 8, offset -15 (+0 minutes)\n2014-04-29 08:08:50 receive version message: /Satoshi:0.8.6/: version 70001, blocks=298263, us=213.239.218.20:45277, them=84.126.227.120:8333, peer=84.126.227.120:8333\n2014-04-29 08:08:50 Added time data, samples 9, offset -1 (+0 minutes)\n2014-04-29 08:08:50 nTimeOffset = +0  (+0 minutes)\n2014-04-29 08:08:51 receive version message: /Satoshi:0.8.6/: version 70001, blocks=298263, us=213.239.218.20:55627, them=91.66.153.44:8333, peer=91.66.153.44:8333\n2014-04-29 08:08:51 Added time data, samples 10, offset -2 (+0 minutes)\n2014-04-29 08:09:05 receive version message: /bitcoinseeder:0.01/: version 60000, blocks=230000, us=[2a01:4f8:a0:74c8::2]:8333, them=0.0.0.0:0, peer=[2a02:348:5e:5a29::1]:39788\n2014-04-29 08:09:05 Added time data, samples 11, offset +0 (+0 minutes)\n2014-04-29 08:09:05 nTimeOffset = +0  (+0 minutes)\n2014-04-29 08:09:35 receive version message: Dain 0.0.1: version 70001, blocks=298263, us=213.239.218.20:8333, them=162.242.155.221:8333, peer=162.242.155.221:53878\n2014-04-29 08:09:35 Added time data, samples 12, offset +0 (+0 minutes)\n2014-04-29 08:09:38 receive version message: /Snoopy:0.1/: version 60001, blocks=0, us=213.239.218.20:8333, them=192.33.90.253:8333, peer=192.33.90.253:34143\n2014-04-29 08:09:38 Added time data, samples 13, offset +5 (+0 minutes)\n2014-04-29 08:09:38 nTimeOffset = +0  (+0 minutes)\n2014-04-29 08:10:16 receive version message: /bitcoinseeder:0.01/: version 60000, blocks=230000, us=213.239.218.20:8333, them=0.0.0.0:0, peer=192.3.11.20:49902\n2014-04-29 08:10:16 Added time data, samples 14, offset +36 (+0 minutes)\n2014-04-29 08:10:36 receive version message: /getaddr.bitnodes.io:0.1/: version 70001, blocks=298263, us=213.239.218.20:8333, them=0.0.0.0:0, peer=148.251.238.178:13436\n2014-04-29 08:10:36 Added time data, samples 15, offset +0 (+0 minutes)\n2014-04-29 08:10:36 nTimeOffset = +0  (+0 minutes)\n2014-04-29 08:11:11 receive version message: /bitcoinseeder:0.01/: version 60000, blocks=230000, us=213.239.218.20:8333, them=0.0.0.0:0, peer=108.18.18.4:46999\n2014-04-29 08:11:11 Added time data, samples 16, offset +36 (+0 minutes)\n2014-04-29 08:11:23 receive version message: /getaddr.bitnodes.io:0.1/: version 70001, blocks=298263, us=[2a01:4f8:a0:74c8::2]:8333, them=0.0.0.0:0, peer=[2a01:4f8:202:81b1::2]:54634\n2014-04-29 08:11:23 Added time data, samples 17, offset +0 (+0 minutes)\n2014-04-29 08:11:23 nTimeOffset = +0  (+0 minutes)"
            },
            {
                "author": "Mike Hearn",
                "date": "2014-04-29T14:15:10",
                "message_text_only": "Looks good to me!\n\nYou're not in the DNS seeds yet. If you leave your nodes up for a while\nthen you'll start getting traffic from bitcoinj clients too.\n\n\nOn Tue, Apr 29, 2014 at 10:13 AM, Eugen Leitl <eugen at leitl.org> wrote:\n\n> I've put up some bitcoind nodes after the network is\n> in need of some, and would like some feedback in that\n> the nodes are fully operational and doing something\n> useful. Please check the logs and tell me whether\n> I'm doing good.\n>\n> debug.log from a node that has been running for a day:\n>\n> 2014-04-29 08:06:18 ERROR: CheckTransaction() : vin empty\n> 2014-04-29 08:06:18 ERROR: AcceptToMemoryPool: : CheckTransaction failed\n> 2014-04-29 08:06:18 Misbehaving: 122.224.182.248:23159 (0 -> 10)\n> 2014-04-29 08:07:00 receive version message: /getaddr.bitnodes.io:0.1/:\n> version 70001, blocks=298263, us=88.198.51.132:8333, them=0.0.0.0:0, peer=\n> 148.251.238.178:63657\n> 2014-04-29 08:07:19 receive version message: /bitcoinseeder:0.01/: version\n> 60000, blocks=230000, us=[2a01:4f8:131:13ed::2]:8333, them=0.0.0.0:0,\n> peer=[2a02:348:5e:5a29::1]:53921\n> 2014-04-29 08:09:37 receive version message: /Snoopy:0.1/: version 60001,\n> blocks=0, us=88.198.51.132:8333, them=192.33.90.253:8333, peer=\n> 192.33.90.253:43104\n> 2014-04-29 08:09:37 socket recv error 104\n> 2014-04-29 08:10:26 receive version message: /getaddr.bitnodes.io:0.1/:\n> version 70001, blocks=298263, us=[2a01:4f8:131:13ed::2]:8333, them=\n> 0.0.0.0:0, peer=[2a01:4f8:202:81b1::2]:50624\n> 2014-04-29 08:10:32 receive version message: /bitcoinseeder:0.01/: version\n> 60000, blocks=230000, us=88.198.51.132:8333, them=0.0.0.0:0, peer=\n> 217.78.0.153:37275\n> 2014-04-29 08:10:50 receive version message: /getaddr.bitnodes.io:0.1/:\n> version 70001, blocks=298263, us=88.198.51.132:8333, them=0.0.0.0:0, peer=\n> 148.251.238.178:50788\n>\n> debug.log from a node that I just restarted:\n>\n> 2014-04-29 08:06:16 Opening LevelDB in /home/bitcoind/.bitcoin/blocks/index\n> 2014-04-29 08:06:17 Opened LevelDB successfully\n> 2014-04-29 08:06:17 Opening LevelDB in /home/bitcoind/.bitcoin/chainstate\n> 2014-04-29 08:06:19 Opened LevelDB successfully\n> 2014-04-29 08:06:22 LoadBlockIndexDB(): last block file = 135\n> 2014-04-29 08:06:22 LoadBlockIndexDB(): last block file info:\n> CBlockFileInfo(blocks=631, size=128154379, heights=297633...298263,\n> time=2014-04-25...2014-04-29)\n> 2014-04-29 08:06:22 LoadBlockIndexDB(): transaction index disabled\n> 2014-04-29 08:06:22 LoadBlockIndexDB():\n> hashBestChain=0000000000000000162f5f571eef4742b70204d983bda3c4b18fc1496ac27f86\n> height=298263 date=2014-04-29 08:00:23 progress=0.999981\n> 2014-04-29 08:06:22 init message: Verifying blocks...\n> 2014-04-29 08:06:22 Verifying last 288 blocks at level 3\n> 2014-04-29 08:07:42 No coin database inconsistencies in last 289 blocks\n> (111189 transactions)\n> 2014-04-29 08:07:42  block index           86284ms\n> 2014-04-29 08:07:42 init message: Loading wallet...\n> 2014-04-29 08:07:42 nFileVersion = 90100\n> 2014-04-29 08:07:42 Keys: 101 plaintext, 0 encrypted, 101 w/ metadata, 101\n> total\n> 2014-04-29 08:07:43  wallet                  108ms\n> 2014-04-29 08:07:43 init message: Rescanning...\n> 2014-04-29 08:07:43 Rescanning last 39 blocks (from block 298224)...\n> 2014-04-29 08:07:43  rescan                  204ms\n> 2014-04-29 08:07:43 init message: Loading addresses...\n> 2014-04-29 08:07:43 Loaded 14015 addresses from peers.dat  84ms\n> 2014-04-29 08:07:43 mapBlockIndex.size() = 298264\n> 2014-04-29 08:07:43 nBestHeight = 298263\n> 2014-04-29 08:07:43 setKeyPool.size() = 100\n> 2014-04-29 08:07:43 mapWallet.size() = 0\n> 2014-04-29 08:07:43 mapAddressBook.size() = 1\n> 2014-04-29 08:07:43 AddLocal(213.239.218.20:8333,1)\n> 2014-04-29 08:07:43 IPv4 eth0: 213.239.218.20\n> 2014-04-29 08:07:43 AddLocal([2a01:4f8:a0:74c8::2]:8333,1)\n> 2014-04-29 08:07:43 IPv6 eth0: 2a01:4f8:a0:74c8::2\n> 2014-04-29 08:07:43 ext-ip thread start\n> 2014-04-29 08:07:43 dnsseed thread start\n> 2014-04-29 08:07:43 Loading addresses from DNS seeds (could take a while)\n> 2014-04-29 08:07:43 net thread start\n> 2014-04-29 08:07:43 upnp thread start\n> 2014-04-29 08:07:43 opencon thread start\n> 2014-04-29 08:07:43 addcon thread start\n> 2014-04-29 08:07:43 dumpaddr thread start\n> 2014-04-29 08:07:43 msghand thread start\n> 2014-04-29 08:07:43 init message: Done loading\n> 2014-04-29 08:07:43 GetMyExternalIP() received [213.239.218.20]\n> 213.239.218.20:0\n> 2014-04-29 08:07:43 GetMyExternalIP() returned 213.239.218.20\n> 2014-04-29 08:07:43 AddLocal(213.239.218.20:8333,4)\n> 2014-04-29 08:07:43 ext-ip thread exit\n> 2014-04-29 08:07:44 receive version message: /Satoshi:0.8.6/: version\n> 70001, blocks=298263, us=213.239.218.20:44169, them=166.78.243.104:8333,\n> peer=166.78.243.104:8333\n> 2014-04-29 08:07:44 Added time data, samples 2, offset +8 (+0 minutes)\n> 2014-04-29 08:07:51 No valid UPnP IGDs found\n> 2014-04-29 08:07:51 upnp thread exit\n> 2014-04-29 08:07:53 connect() to 71.23.29.162:8333 failed after select():\n> No route to host\n> 2014-04-29 08:07:53 receive version message: /Satoshi:0.9.1/: version\n> 70002, blocks=298263, us=213.239.218.20:46921, them=91.238.134.58:8333,\n> peer=91.238.134.58:8333\n> 2014-04-29 08:07:53 Added time data, samples 3, offset +0 (+0 minutes)\n> 2014-04-29 08:07:54 106 addresses found from DNS seeds\n> 2014-04-29 08:07:54 dnsseed thread exit\n> 2014-04-29 08:08:16 receive version message: /Satoshi:0.8.6/: version\n> 70001, blocks=298263, us=213.239.218.20:50533, them=98.218.92.212:8333,\n> peer=98.218.92.212:8333\n> 2014-04-29 08:08:16 Added time data, samples 4, offset +2 (+0 minutes)\n> 2014-04-29 08:08:22 receive version message: /Satoshi:0.8.5/: version\n> 70001, blocks=298263, us=213.239.218.20:35016, them=108.3.172.22:8333,\n> peer=108.3.172.22:8333\n> 2014-04-29 08:08:22 Added time data, samples 5, offset +3 (+0 minutes)\n> 2014-04-29 08:08:22 nTimeOffset = +2  (+0 minutes)\n> 2014-04-29 08:08:27 receive version message: /bitcoinseeder:0.01/: version\n> 60000, blocks=230000, us=213.239.218.20:8333, them=0.0.0.0:0, peer=\n> 178.18.90.41:52783\n> 2014-04-29 08:08:27 Added time data, samples 6, offset +0 (+0 minutes)\n> 2014-04-29 08:08:31 connect() to 24.136.254.2:8333 failed after select():\n> No route to host\n> 2014-04-29 08:08:37 connect() to 187.15.64.129:8333 failed after\n> select(): Connection refused\n> 2014-04-29 08:08:38 receive version message: /Satoshi:0.8.5/: version\n> 70001, blocks=298263, us=213.239.218.20:37793, them=209.99.52.77:8333,\n> peer=209.99.52.77:8333\n> 2014-04-29 08:08:38 Added time data, samples 7, offset -1 (+0 minutes)\n> 2014-04-29 08:08:38 nTimeOffset = +0  (+0 minutes)\n> 2014-04-29 08:08:50 receive version message: /Satoshi:0.9.0/: version\n> 70002, blocks=298263, us=213.239.218.20:54044, them=69.23.94.246:8333,\n> peer=69.23.94.246:8333\n> 2014-04-29 08:08:50 Added time data, samples 8, offset -15 (+0 minutes)\n> 2014-04-29 08:08:50 receive version message: /Satoshi:0.8.6/: version\n> 70001, blocks=298263, us=213.239.218.20:45277, them=84.126.227.120:8333,\n> peer=84.126.227.120:8333\n> 2014-04-29 08:08:50 Added time data, samples 9, offset -1 (+0 minutes)\n> 2014-04-29 08:08:50 nTimeOffset = +0  (+0 minutes)\n> 2014-04-29 08:08:51 receive version message: /Satoshi:0.8.6/: version\n> 70001, blocks=298263, us=213.239.218.20:55627, them=91.66.153.44:8333,\n> peer=91.66.153.44:8333\n> 2014-04-29 08:08:51 Added time data, samples 10, offset -2 (+0 minutes)\n> 2014-04-29 08:09:05 receive version message: /bitcoinseeder:0.01/: version\n> 60000, blocks=230000, us=[2a01:4f8:a0:74c8::2]:8333, them=0.0.0.0:0,\n> peer=[2a02:348:5e:5a29::1]:39788\n> 2014-04-29 08:09:05 Added time data, samples 11, offset +0 (+0 minutes)\n> 2014-04-29 08:09:05 nTimeOffset = +0  (+0 minutes)\n> 2014-04-29 08:09:35 receive version message: Dain 0.0.1: version 70001,\n> blocks=298263, us=213.239.218.20:8333, them=162.242.155.221:8333, peer=\n> 162.242.155.221:53878\n> 2014-04-29 08:09:35 Added time data, samples 12, offset +0 (+0 minutes)\n> 2014-04-29 08:09:38 receive version message: /Snoopy:0.1/: version 60001,\n> blocks=0, us=213.239.218.20:8333, them=192.33.90.253:8333, peer=\n> 192.33.90.253:34143\n> 2014-04-29 08:09:38 Added time data, samples 13, offset +5 (+0 minutes)\n> 2014-04-29 08:09:38 nTimeOffset = +0  (+0 minutes)\n> 2014-04-29 08:10:16 receive version message: /bitcoinseeder:0.01/: version\n> 60000, blocks=230000, us=213.239.218.20:8333, them=0.0.0.0:0, peer=\n> 192.3.11.20:49902\n> 2014-04-29 08:10:16 Added time data, samples 14, offset +36 (+0 minutes)\n> 2014-04-29 08:10:36 receive version message: /getaddr.bitnodes.io:0.1/:\n> version 70001, blocks=298263, us=213.239.218.20:8333, them=0.0.0.0:0,\n> peer=148.251.238.178:13436\n> 2014-04-29 08:10:36 Added time data, samples 15, offset +0 (+0 minutes)\n> 2014-04-29 08:10:36 nTimeOffset = +0  (+0 minutes)\n> 2014-04-29 08:11:11 receive version message: /bitcoinseeder:0.01/: version\n> 60000, blocks=230000, us=213.239.218.20:8333, them=0.0.0.0:0, peer=\n> 108.18.18.4:46999\n> 2014-04-29 08:11:11 Added time data, samples 16, offset +36 (+0 minutes)\n> 2014-04-29 08:11:23 receive version message: /getaddr.bitnodes.io:0.1/:\n> version 70001, blocks=298263, us=[2a01:4f8:a0:74c8::2]:8333, them=\n> 0.0.0.0:0, peer=[2a01:4f8:202:81b1::2]:54634\n> 2014-04-29 08:11:23 Added time data, samples 17, offset +0 (+0 minutes)\n> 2014-04-29 08:11:23 nTimeOffset = +0  (+0 minutes)\n>\n>\n>\n> ------------------------------------------------------------------------------\n> \"Accelerate Dev Cycles with Automated Cross-Browser Testing - For FREE\n> Instantly run your Selenium tests across 300+ browser/OS combos.  Get\n> unparalleled scalability from the best Selenium testing platform available.\n> Simple to use. Nothing to install. Get started now for free.\"\n> http://p.sf.net/sfu/SauceLabs\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140429/21091879/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "please check my debug.log",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Eugen Leitl"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 18914
        }
    },
    {
        "title": "[Bitcoin-development] GBT 2.0 wishlist",
        "thread_messages": [
            {
                "author": "Luke-Jr",
                "date": "2014-04-29T19:14:59",
                "message_text_only": "Let's try to get GBT 2.0 off the ground finally.. :)\n\nHere's some wishlist items/ideas:\n- Extremely low bandwidth use (binary protocol, with compression support)\n- UDP-based transport protocol? (so message order need not be preserved at the\n  expense of latency)\n- Ability to instruct miners to insert (username,hash-of-username,hash-of-\n  options-array,hash-of-both,etc) in coinbase at a given position (this\n  enables cheaper proof-of-work auditing of a pool's rewards; it can just\n  save/publish shares meeting higher targets and anyone can verify the shares\n  were found by a given username/hash)\n- Always encrypted (once by the server), with optional authentication via\n  CA/namecoin/URI\n- Incrementing \"precommit id\" so miners can precommit to settings without \n  needing a new/custom coinbase\n- Multiple clients should share bandwidth on a LAN (similar to slush's stratum\n  proxy)\n- Convey prevblock as block header so we can follow blockchains securely.\n- Fee logic: pools can claim as much coinbase distribution as they require\n  (with hint from miner); miners are expected to ensure subsidy + transaction \n  fees tally up to the required total; any fees beyond requires total may be\n  distributed as the miner wishes. Potentially, pools could allow 50% (or\n  similar) participation allowing a miner to use multiple pools at the same\n  time.\n\nRather than polluting the main development mailing list with what is sure to \nhave quite a bit of discussion, I have asked kinlo (who hosts the poolowners \nmailing list) to provide a dedicated list for this purpose. Interested parties \nshould please subscribe via http://list.pfoe.be/mailman/listinfo/gbt2 and send \nreplies to gbt2 at list.pfoe.be (once a draft BIP is ready, the main dev mailing \nlist will be once again CC'd).\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "GBT 2.0 wishlist",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1786
        }
    },
    {
        "title": "[Bitcoin-development] BIP Draft: Atomic Cross Chain Transfer Protocol",
        "thread_messages": [
            {
                "author": "Tier Nolan",
                "date": "2014-04-30T18:03:59",
                "message_text_only": "Due to \"popular\" demand, I have created a BIP for cross chain atomic\ntransfers.\n\nUnlike the previous version, this version only requires hash locking.   The\nprevious version required a \"selector\" transaction based on if statements.\n\n    OP_HASH160 OP_EQUAL_VERIFY [public key] OP_CHECKSIG\n\n    OP_HASH160 OP_EQUAL_VERIFY OP_N [public key 1] ... [public key m]\nOP_M OP_CHECK_MULTISIG\n\nhttps://github.com/TierNolan/bips/blob/bip4x/bip-atom.mediawiki\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140430/b93c1f5d/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2014-04-30T18:59:07",
                "message_text_only": "On Wednesday, April 30, 2014 6:03:59 PM Tier Nolan wrote:\n> Due to \"popular\" demand, I have created a BIP for cross chain atomic\n> transfers.\n> \n> https://github.com/TierNolan/bips/blob/bip4x/bip-atom.mediawiki\n\nInstead of TX0, TX1, etc, can you put some kind of meaningful identifier for \nthese transactions?\n\nTX1 and TX2 *cannot* be signed until after TX0 is completely signed by both \nparties. After TX0 is signed, but before TX2 is signed, either party could \nwalk away or otherwise hold the funds hostage. The sequence of signing \nproposed in this BIP is *not possible to perform*. How did you implement and \ntest this? :/\n\nWhat is the purpose of the OP_EQUAL_VERIFY in TX4? I don't see a use...\n\nIMO, there should be separate BIPs for the exchange itself, and the protocol \nto negotiate the exchange. I would recommend changing the latter from JSON-RPC \nto some extension of the Payment Protocol, if possible.\n\nPerhaps it would be good to only support compressed keys, to discourage use of \nuncompressed ones..\n\nLuke"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-30T20:48:10",
                "message_text_only": "On Wed, Apr 30, 2014 at 7:59 PM, Luke Dashjr <luke at dashjr.org> wrote:\n\n> Instead of TX0, TX1, etc, can you put some kind of meaningful identifier\n> for\n> these transactions?\n>\n\nSorry, that is the names come from the original thread, where I was\noutlining the idea.  I updated the names.\n\n\n> TX1 and TX2 *cannot* be signed until after TX0 is completely signed by both\n> parties.\n\n\nThe bail in transactions are only signed by one of the parties.  They are\nkept secret until the refund/payout transactions are all properly signed.\n\nThere is a malleability risk though, hence the need for the 3rd party.\n\nIt works on the same refund principle as payment channels.\n\nAfter TX0 is signed, but before TX2 is signed, either party could\n> walk away or otherwise hold the funds hostage. The sequence of signing\n> proposed in this BIP is *not possible to perform*.\n\n\nTX0 is not broadcast until the refund transactions are complete.\n\n\n> How did you implement and test this? :/\n>\n\nThis is a draft at the moment.\n\nThere is an implementation of (almost) this system but not by me.  This\nproposal reduces the number of non-standard transaction types required.\n\nA full implement is the next step.\n\n\n> What is the purpose of the OP_EQUAL_VERIFY in TX4? I don't see a use...\n>\n\nThat is a typo, I have updated it.\n\n\n> IMO, there should be separate BIPs for the exchange itself, and the\n> protocol\n> to negotiate the exchange.\n\n\nI can do that.\n\n\n> I would recommend changing the latter from JSON-RPC\n> to some extension of the Payment Protocol, if possible.\n>\n\nI wanted it to be as simple as possible, but I guess MIME is just a\ndifferent way of doing things.\n\n>\n> Perhaps it would be good to only support compressed keys, to discourage\n> use of\n> uncompressed ones..\n>\n\nI would have no objection.\n\n\n>\n> Luke\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140430/e5b06326/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2014-04-30T23:02:41",
                "message_text_only": "I updated again.\n\nThe new version only requires non-standard transactions on one of the two\nnetworks.\n\nNext step is a simple TCP / RPC server that will implement the protocol to\ntrade between testnet and mainnet.  Timeouts of much less than 24 hours\nshould be possible now.\n\n\nOn Wed, Apr 30, 2014 at 9:48 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> On Wed, Apr 30, 2014 at 7:59 PM, Luke Dashjr <luke at dashjr.org> wrote:\n>\n>> Instead of TX0, TX1, etc, can you put some kind of meaningful identifier\n>> for\n>> these transactions?\n>>\n>\n> Sorry, that is the names come from the original thread, where I was\n> outlining the idea.  I updated the names.\n>\n>\n>> TX1 and TX2 *cannot* be signed until after TX0 is completely signed by\n>> both\n>> parties.\n>\n>\n> The bail in transactions are only signed by one of the parties.  They are\n> kept secret until the refund/payout transactions are all properly signed.\n>\n> There is a malleability risk though, hence the need for the 3rd party.\n>\n> It works on the same refund principle as payment channels.\n>\n> After TX0 is signed, but before TX2 is signed, either party could\n>> walk away or otherwise hold the funds hostage. The sequence of signing\n>> proposed in this BIP is *not possible to perform*.\n>\n>\n> TX0 is not broadcast until the refund transactions are complete.\n>\n>\n>> How did you implement and test this? :/\n>>\n>\n> This is a draft at the moment.\n>\n> There is an implementation of (almost) this system but not by me.  This\n> proposal reduces the number of non-standard transaction types required.\n>\n> A full implement is the next step.\n>\n>\n>> What is the purpose of the OP_EQUAL_VERIFY in TX4? I don't see a use...\n>>\n>\n> That is a typo, I have updated it.\n>\n>\n>> IMO, there should be separate BIPs for the exchange itself, and the\n>> protocol\n>> to negotiate the exchange.\n>\n>\n> I can do that.\n>\n>\n>> I would recommend changing the latter from JSON-RPC\n>> to some extension of the Payment Protocol, if possible.\n>>\n>\n> I wanted it to be as simple as possible, but I guess MIME is just a\n> different way of doing things.\n>\n>>\n>> Perhaps it would be good to only support compressed keys, to discourage\n>> use of\n>> uncompressed ones..\n>>\n>\n> I would have no objection.\n>\n>\n>>\n>> Luke\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20140501/861be7b5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "BIP Draft: Atomic Cross Chain Transfer Protocol",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Tier Nolan",
                "Luke Dashjr"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 6053
        }
    }
]