[{"title": "[Bitcoin-development] Deprecating \"midstate\" in getwork?", "thread_messages": [{"author": "John Smith", "date": "2011-10-02T07:52:56", "message_text_only": "On Thu, Sep 29, 2011 at 12:49 PM, solar <solar at heliacal.net> wrote:\n\n> It's just simple SHA2, you can implement the whole thing easily without\n> dragging in a huge lib like OpenSSL.  I guess I haven't looked at it\n> recently but the original CPU miner was just implemented locally in bitcoin\n> and didn't use any libs.\n>\n\nI don't get the 'dragging in' part. Bitcoin already depends on OpenSSL for\necdsa, bignum, and SSL for RPC. Please, please don't try to reimplement\nthese locally :-)\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111002/96f11142/attachment.html>", "summary": "A discussion about implementing SHA2 in Bitcoin without using OpenSSL, with a warning not to try to reimplement existing dependencies."}], "thread_summary": {"title": "Deprecating \"midstate\" in getwork?", "categories": ["Bitcoin-development"], "authors": ["John Smith"], "messages_count": 1, "total_messages_chars_count": 676}}, {"title": "[Bitcoin-development] My thoughts on DoS code", "thread_messages": [{"author": "Amir Taaki", "date": "2011-10-02T23:32:33", "message_text_only": "Hey,\n\nThe Zen of Python is relevant here: http://www.python.org/dev/peps/pep-0020/\n\n\"In the face of ambiguity, refuse the temptation to guess.\"\n\nIf a node incorrectly implements the standard then it should be shunned immediately. Not only is this more secure, but it will ensure long term compatibility between different implementations. Gavin argues that being a bit lenient makes it easier for people working on other implementations.\n\nI'd argue the opposite being the only person that's working on a full node implementation. Lucky I know my way around the code, so I don't have to guess. But if I did not things would be much harder. Imagine you're trying to interact with this protocol and then randomly it will suddenly disconnect you because of accumulated errors that have been building up.\n\nEverything should be strict, explicit, unambiguous and loud.\n\nI propose a new message type: \"error\" Payload is a uint64_t error_code and var_str reason.\n\nBefore disconnecting a node you can send it an error message. The error_code is the main class of error- i.e version_sent_twice. Reason is just an implementation specific string that can add context.\n\nOther possible fields:\nuint8_t seriousness (debug, info, warning, error, fatal)\nuint8_t action_taken (disconnect, blacklist, .etc)", "summary": "The author proposes a strict and explicit approach to implementing the standard protocol in order to ensure long-term compatibility and security. They suggest adding an \"error\" message type with specific fields."}], "thread_summary": {"title": "My thoughts on DoS code", "categories": ["Bitcoin-development"], "authors": ["Amir Taaki"], "messages_count": 1, "total_messages_chars_count": 1285}}, {"title": "[Bitcoin-development] Supermajority mining votes for valid->invalid changes.", "thread_messages": [{"author": "Gregory Maxwell", "date": "2011-10-03T04:53:51", "message_text_only": "It is possible to made changes to the distributed algorithm which make\npreviously valid txn invalid without necessarily creating any lasting\nchain splits.  This has been proposed for the addition of the eval\nopcode by using one of the existing NOPs.\n\nOne challenge is that if transactions are emitted which are invalid\nunder the new scheme but valid under the old after the block height\nthat the rule is coded to take effect and a super-majority of miners\nare not yet upgraded the upgrade may cause a long reorganization and\nserious disruption.\n\nHere I explain one possible way of avoiding this.\n\nUpgraded nodes get the following rules:\n(0) Never forward or mine a txn which would be invalid under the new rule.\n(1) Apply old behavior before height X unconditionally.\n    (X set far enough in the future to get reasonable deployment by\nlarge miners)\n(2) Begin applying the new rule only after the first point in the chain\n    after X when none of the last Y blocks have contained an invalid transaction\n    under the new rules.\n\nAfter the software has been released members of the bitcoin community then\nbegin _intentionally_ transmitting transactions which are invalid under\nthe new rules. (What would have been an attack under simplest deployment plan)\n\nBy setting Y high enough that all major miners have a chance to mine\nin the window,\nthis actually becomes an effective vote for the change by miners with\na stochastic\nsuper-majority threshold.  All nodes are able to exactly determine at what block\nthe election has completed because it is an objective fact of the chain.\n\nWith this scheme the new encoding will only become active when enough mining\ncapacity supports it (or at least helpfully refuses to mine the who class\nof transactions) so that a large reorganization will not happen due to\nincompatible blocks during deployment.\n\nThis could be further enhanced with conflicting block discouragement (e.g.\nrefusing to extend or forward a rules violating block until it is burred)\nbut I think this scheme is sufficient without that, and that this is generally\nsuperior to discouragement for this purpose.\n\nCheers.", "summary": "Changes to the distributed algorithm can make previously valid transactions invalid without causing lasting chain splits. Upgraded nodes can avoid disruption by intentionally transmitting invalid transactions as a vote for the change."}, {"author": "Luke-Jr", "date": "2011-10-03T05:32:19", "message_text_only": "On Monday, October 03, 2011 12:53:51 AM Gregory Maxwell wrote:\n> Upgraded nodes get the following rules:\n> (0) Never forward or mine a txn which would be invalid under the new rule.\n> (1) Apply old behavior before height X unconditionally.\n>     (X set far enough in the future to get reasonable deployment by\n> large miners)\n> (2) Begin applying the new rule only after the first point in the chain\n>     after X when none of the last Y blocks have contained an invalid\n> transaction under the new rules.\n\nPerhaps as a safeguard:\n(3) Before applying the new rule, require 50% of the last Y blocks contain a\n    coinbase with a \"I am upgraded\" code\n(4) Until the new rule is active, include an \"I am upgraded\" code in every\n    block; after it's active, this can be turned off\n\n> After the software has been released members of the bitcoin community then\n> begin _intentionally_ transmitting transactions which are invalid under\n> the new rules. (What would have been an attack under simplest deployment\n> plan)\n\nWhy would legitimate community members ever intentionally transmit an invalid \ntransaction? ;)", "summary": "Upgraded nodes must not forward or mine invalid transactions, apply old behavior before a certain height, and begin applying new rules after a certain point."}, {"author": "Gregory Maxwell", "date": "2011-10-03T05:39:07", "message_text_only": "On Mon, Oct 3, 2011 at 1:32 AM, Luke-Jr <luke at dashjr.org> wrote:\n> Perhaps as a safeguard:\n> (3) Before applying the new rule, require 50% of the last Y blocks contain a\n> \u00a0 \u00a0coinbase with a \"I am upgraded\" code\n> (4) Until the new rule is active, include an \"I am upgraded\" code in every\n> \u00a0 \u00a0block; after it's active, this can be turned off\n\n(4) is a nice idea.\n\nI was hoping to avoid (3) simply because for any one of these upgrades\nhopefully 95% of the network is neutral wrt the change because they\nwon't mine either form of the transactions.\n\nThe active statement has the benefit that it constitutes a proof: You\nknow with specific confidence (based on the window size) how likely a\nfork of length X will be if a newly invalid transaction is announced\nat the time of the activation.", "summary": "A proposal to require 50% of the last Y blocks to contain a \"I am upgraded\" code before applying a new rule to avoid potential forks."}], "thread_summary": {"title": "Supermajority mining votes for valid->invalid changes.", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Gregory Maxwell"], "messages_count": 3, "total_messages_chars_count": 4019, "convo_summary": "Maxwell suggests that changes to the algorithm can make valid transactions invalid, but upgraded nodes can avoid disruption by voting for the change. Luke-Jr advises upgraded nodes to apply old behavior before a certain height and new rules after a certain point. Maxwell proposes a 50% requirement of \"I am upgraded\" code before applying new rules to avoid forks."}}, {"title": "[Bitcoin-development] [PULLs] 6 branches", "thread_messages": [{"author": "Luke-Jr", "date": "2011-10-03T20:17:52", "message_text_only": "These branches are ready for merging to mainline.\n\nBranches can be viewed at:\n    http://luke.dashjr.org/programs/bitcoin/w/bitcoind/luke-jr.git/heads\n\ngit pull git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git <branchname>\n\n=\n\nminfee_modes: minor internal API change as a step toward allowing\n              user-customizable fee schedules\n\n=\n\nqmake_system_crypto++: allow building bitcoin-qt against system crypto++\n\n    This is worthless if the crypto++ dependency is removed.\n\n=\n\nsharedlibs: build bitcoind against shared libraries on 'unix'\n\n    Not sure why it's been static for so long, but most systems only have\n    shared libs.\n\n=\n\nsignal_blk_notify: -blknotifypidfile option to send SIGUSR1 to a PID when\n                   there's a new best block\n\n    Used by basically every pool now, it just sends SIGUSR1 to a poolserver.\n\n=\n\nbugfix_qt_uri_amount_parser: fix URI amount parser to accept exponents and\n                             hexadecimals\n\n    Please don't bother arguing over bugfix_qt_uri_amount_parser. It'll just\n    be a waste of time. Neither the pro- nor anti- sides have budged over\n    multiple arguments already. I can't force you guys to merge it, but I can\n    at least make it easy if you decide to tolerate it. Just keep in mind that\n    it doesn't hurt the BTC-only URIs at all, and if nobody ends up using it\n    for other units, it can always be removed later.\n        Best  case scenario: people use it and bitcoin-qt works correctly\n        Worst case scenario: people don't use it, and it can be removed\n\n=\n\nbase58_liberal_parsing: accept typos in base58 data\n\n    The same best/worst case scenario logic as the URI parser applies\n    to base58_liberal_parsing too, so long as typos aren't advertised as\n    legitimate addresses.", "summary": "Several branches are ready for merging to the mainline, including changes to the internal API, building against shared libraries, and bug fixes."}], "thread_summary": {"title": "6 branches", "categories": ["Bitcoin-development", "PULLs"], "authors": ["Luke-Jr"], "messages_count": 1, "total_messages_chars_count": 1775}}, {"title": "[Bitcoin-development] Tests for Bitcoin QT", "thread_messages": [{"author": "Brian McQueen", "date": "2011-10-03T23:04:00", "message_text_only": "The Bitcoin QT worked excellently the first time on my Mac.  I was so\nsurprised to do a pull and compile and bang the new wallet popped up\nand was running.  Its much easier than getting it all going from\nmakefile and CLI.\n\n However I no longer see the tests subdirectory.  How are the unit\ntests handled within this QT framework?\n\nB\n-- \nMake a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!", "summary": "Bitcoin QT worked well on Mac, easy to install. Missing tests subdirectory, questioning how unit tests are handled in QT framework."}, {"author": "John Smith", "date": "2011-10-04T17:35:34", "message_text_only": "Hello Brian,\n\nThere are no unit tests for the Qt GUI code itself as of this moment.\n\nThe tests for the bitcoin core are still there in src/tests >). You need to\nbuild them with the makefile, though. qmake is currently only used for the\nGUI executable.\n\nJS\n\nOn Mon, Oct 3, 2011 at 11:04 PM, Brian McQueen <mcqueenorama at gmail.com>wrote:\n\n> The Bitcoin QT worked excellently the first time on my Mac.  I was so\n> surprised to do a pull and compile and bang the new wallet popped up\n> and was running.  Its much easier than getting it all going from\n> makefile and CLI.\n>\n>  However I no longer see the tests subdirectory.  How are the unit\n> tests handled within this QT framework?\n>\n> B\n> --\n> Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!\n>\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure contains a\n> definitive record of customers, application performance, security\n> threats, fraudulent activity and more. Splunk takes this data and makes\n> sense of it. Business sense. IT sense. Common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111004/367ca48a/attachment.html>", "summary": "No unit tests for Qt GUI code, but tests for Bitcoin core are in src/tests. They need to be built with makefile. Qmake only used for GUI executable."}], "thread_summary": {"title": "Tests for Bitcoin QT", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Brian McQueen"], "messages_count": 2, "total_messages_chars_count": 1961, "convo_summary": "Bitcoin QT is easy to install on Mac, but the unit tests subdirectory is missing. John Smith confirms that there are no unit tests for Qt GUI code, but they are available for Bitcoin core in src/tests and can be built with makefile. Qmake is only used for GUI executable."}}, {"title": "[Bitcoin-development] [PULLs] 6 *more* branches", "thread_messages": [{"author": "Luke-Jr", "date": "2011-10-04T05:06:17", "message_text_only": "These branches are ready for merging to mainline. Note that these are not the \nsame ones I sent earlier today, but part of a larger batch I have just \nfinished rebasing.\n\nBranches can be viewed at:\n    http://luke.dashjr.org/programs/bitcoin/w/bitcoind/luke-jr.git/heads\n\ngit pull git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git <branchname>\n\n=\n\ncoinbaser: allow customizing what addresses are paid by generation, with\n           failover to the standard \"50 BTC to me\" behaviour; also adds the\n           \"setworkaux\" JSON-RPC call to add arbitrary data to the coinbase,\n           which can be used to implement merged-mining (has safeguards\n           against creating invalid coinbases)\n\n    Eligius has tested this quite a bit under the 0.3.23 codebase.\n\n=\n\ntxinfo: adds \"pooledtx\" (number of transactions in memory pool),\n        \"currentblocktx\" (number of txns in the last block created), and\n        \"currentblocksize\" to the output of the JSON-RPC 'getinfo' method;\n        adds \"block_hash\" and \"block_index\" to transactions shown by\n        'listtransactions' and similar JSON-RPC methods\n\n    Been using this since 0.3.21 without issues.\n\n=\n\nforce_send: disables automatically adding \"minimum\" fees for JSON-RPC\n            methods-- instead, it returns an error or, iff the user sets the\n            new second parameter \"force\" to the 'settxfee' JSON-RPC call,\n            sends the transaction with the user-specified fee\n\n    This only affects JSON-RPC users, who should be assumed to understand the\n    risk of sending with insufficient fees.\n\n=\n\neligius_relay: relay transactions that satisfy Eligius's minimum fee when it's\n               lower than the default rules\neligius_sendfee: allow sending the lower fee between default and Eligius, and\n                 adds relay.eligius.st to the DNS seed list\n\n    Merge or not, up to you guys... I don't really care.\n\n=\n\nbugfix_CreateThread_ThreadSocketHandler_errReporting: report an error in\n                                                      debug.log", "summary": "Several branches are ready for merging to mainline, including customizable coinbaser, txinfo, force_send, and Eligius relay and sendfee. A bug fix is also included."}], "thread_summary": {"title": "6 *more* branches", "categories": ["Bitcoin-development", "PULLs"], "authors": ["Luke-Jr"], "messages_count": 1, "total_messages_chars_count": 2033}}, {"title": "[Bitcoin-development] [RFCs] 13 new branches", "thread_messages": [{"author": "Luke-Jr", "date": "2011-10-04T05:15:09", "message_text_only": "These branches are NOT ready for merging to mainline, but need peer review.\n\nBranches can be viewed at:\n    http://luke.dashjr.org/programs/bitcoin/w/bitcoind/luke-jr.git/heads\n\ngit pull git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git <branchname>\n\n=\n\nmy_free_txn: accept the user's own transactions regardless of fees or\n             standardness; put credits-to-user toward covering fees required\n\n    Common-sense, really.\n\n=\n\naccept_nonstdtxn: adds a -acceptnonstdtxn option to allow miners to easily\n                  accept \"non-standard\" transactions\n\n    We probably want to amend this with a block for OP_NOP*?\n\n=\n\nfree_relay: relay transactions regardless of fees\n\n=\n\noptimize_cache_rpcauth: cache RPC username and password\n\n    Part of JoelKatz's diffN patches for a while, seems fairly well-tested on\n    (other) pools\n\n=\n\noptimize_conn_adjtime: cache AdjustedTime around a for loop\n\n    Another part of JoelKatz's diff4 patch.\n\n=\n\noptimize_ToHex: faster binary-to-hexadecimal-string function\n\n=\n\noptimize_DecodeBase64: faster base64 decoding\n\n=\n\noptimize_remove_CheckWork_delay: remove 2 second delay from CheckWork\n\n    I don't know why this is here, but apparently most pools work fine without\n    it? (from JoelKatz)\n\n=\n\noptimize_FastGetWork: optimizations for the common case of getwork\n\n    Yet another JoelKatz patch. His patch has it bundled tightly with the\n    ToHex branch, so once one is merged, the other will need rebasing.\n\n=\n\noptimize_http_status: use C instead of C++ for HTTP status reply strings\n\n=\n\nrpcclient_conn_close: \"Connection: close\" header in client mode\n\n=\n\nthreaded_rpc: use a new thread for each JSON-RPC connection, with mutexes\n              preventing actual methods from being executed concurrently\n              (except for parts of getwork)\n\n    Tested on Eligius from day 1, under older versions. A few months ago, the\n    code was merged with some of JoelKatz's patch, making it stable with SSL\n    support.\n\n=\n\nrpc_keepalive: support for HTTP 1.1 keep-alive\n\n    Depends on threaded_rpc.", "summary": "Several branches with various optimizations for Bitcoin, including accepting non-standard transactions and faster binary-to-hexadecimal-string function, need peer review before merging."}], "thread_summary": {"title": "13 new branches", "categories": ["Bitcoin-development", "RFCs"], "authors": ["Luke-Jr"], "messages_count": 1, "total_messages_chars_count": 2048}}, {"title": "[Bitcoin-development] Mac libboost_thread or thread-mt?", "thread_messages": [{"author": "Brian McQueen", "date": "2011-10-04T23:40:23", "message_text_only": "I installed boost via the mac ports.  Its got lobboost_thread-mt, but\nit doesn't have libboost_thread.a. Should I modify the makefile or get\na different version of boost?\n\n-- \nMake a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!", "summary": "Boost installed via Mac ports lacks libboost_thread.a. Should the makefile be modified or a different version of Boost be obtained?"}, {"author": "Michael Gr\u00f8nager", "date": "2011-10-05T05:35:52", "message_text_only": "Hi Brian,\n\nHad a similar issue the other day with my cmake btc buildsystem - I just changed the name to -mt, I think that is th way to go.\n\nCheers,\n\nMichael\n\nOn 05/10/2011, at 01:40, Brian McQueen wrote:\n\n> I installed boost via the mac ports.  Its got lobboost_thread-mt, but\n> it doesn't have libboost_thread.a. Should I modify the makefile or get\n> a different version of boost?\n> \n> -- \n> Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!\n> \n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure contains a\n> definitive record of customers, application performance, security\n> threats, fraudulent activity and more. Splunk takes this data and makes\n> sense of it. Business sense. IT sense. Common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Michael suggests changing the name to -mt to resolve an issue with cmake btc build system and missing libboost_thread.a."}, {"author": "Matt Corallo", "date": "2011-10-05T14:37:55", "message_text_only": "On Tue, 2011-10-04 at 16:40 -0700, Brian McQueen wrote:\n> I installed boost via the mac ports.  Its got lobboost_thread-mt, but\n> it doesn't have libboost_thread.a. Should I modify the makefile or get\n> a different version of boost?\n> \n\n(from\nhttp://stackoverflow.com/questions/2293962/boost-libraries-in-multithreading-aware-mode)\n\nThe -mt suffix means built in multithreading aware mode (what this means\nfor a threading library I have no idea), however that suffix was removed\nfrom Linux and Mac builds in 1.42.  If you are linking against 1.42+ on\nLinux/Mac, adding/removing the -mt suffix means nothing AFAICT.\n\nMatt", "summary": "Boost libraries have a -mt suffix for multithreading aware mode, but it was removed from Linux and Mac builds in 1.42+."}, {"author": "Gavin Andresen", "date": "2011-10-05T18:42:59", "message_text_only": "I updated src/makefile.osx and doc/build-osx.txt  today, assuming that\nthe MacPorts versions of dependencies will be used and the -mt boost\nlibraries will be used.\n\nI also modified makefile.unix and makefile.osx to auto-build\ndependencies using gcc's  -MMD  option.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen updated makefiles for Mac and Unix to auto-build dependencies and assume MacPorts versions of dependencies and -mt boost libraries."}, {"author": "Douglas Huff", "date": "2011-10-05T18:50:21", "message_text_only": "Bad update. Macports has a couple of boost packages. Install the newer 1.46\nones.\n\n-- \nDouglas Huff\nOn Oct 5, 2011 1:43 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n> I updated src/makefile.osx and doc/build-osx.txt today, assuming that\n> the MacPorts versions of dependencies will be used and the -mt boost\n> libraries will be used.\n>\n> I also modified makefile.unix and makefile.osx to auto-build\n> dependencies using gcc's -MMD option.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure contains a\n> definitive record of customers, application performance, security\n> threats, fraudulent activity and more. Splunk takes this data and makes\n> sense of it. Business sense. IT sense. Common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111005/7620b7df/attachment.html>", "summary": "A bad update caused issues with MacPorts boost packages. Users should install the newer 1.46 versions to fix the problem."}, {"author": "Brian McQueen", "date": "2011-10-06T22:18:57", "message_text_only": "I added -mt and it compiles, but here is a surprise.  I had to add\nlibz.a to the makefile.osx.  Sounds odd!  Its coming from the crypto\nlibs.\n\nOn Wed, Oct 5, 2011 at 11:50 AM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n> Bad update. Macports has a couple of boost packages. Install the newer 1.46\n> ones.\n>\n> --\n> Douglas Huff\n>\n> On Oct 5, 2011 1:43 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n>> I updated src/makefile.osx and doc/build-osx.txt today, assuming that\n>> the MacPorts versions of dependencies will be used and the -mt boost\n>> libraries will be used.\n>>\n>> I also modified makefile.unix and makefile.osx to auto-build\n>> dependencies using gcc's -MMD option.\n>>\n>> --\n>> --\n>> Gavin Andresen\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> All the data continuously generated in your IT infrastructure contains a\n>> definitive record of customers, application performance, security\n>> threats, fraudulent activity and more. Splunk takes this data and makes\n>> sense of it. Business sense. IT sense. Common sense.\n>> http://p.sf.net/sfu/splunk-d2dcopy1\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure contains a\n> definitive record of customers, application performance, security\n> threats, fraudulent activity and more. Splunk takes this data and makes\n> sense of it. Business sense. IT sense. Common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n\n-- \nMake a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!", "summary": "A developer updated the makefile for Bitcoin on Mac, recommending the installation of newer boost packages and adding libz.a due to crypto libs."}, {"author": "Eric Mockensturm", "date": "2011-10-06T23:35:23", "message_text_only": "Brian,\n\nYea, I vaguely remember going through all this when I first tried building it.  If I recall you can statically link libz into crypto when you compile crypto.  Or something like that.  Maybe the default MacPorts crypto install does not do this.\n\nEric\n\n-- \nEric Mockensturm, Ph.D.\nAssociate Professor\nDepartment of Mechanical & Nuclear Engineering\nThe Pennsylvania State University\n157C Hammond Building\nUniversity Park, PA  16802\nEmail:  emm10 at psu.edu\nPhone/Fax:  (814) 863-0736/7222\n\n\nOn Oct 6, 2011, at 6:18 PM, Brian McQueen wrote:\n\n> I added -mt and it compiles, but here is a surprise.  I had to add\n> libz.a to the makefile.osx.  Sounds odd!  Its coming from the crypto\n> libs.\n> \n> On Wed, Oct 5, 2011 at 11:50 AM, Douglas Huff <dhuff at jrbobdobbs.org> wrote:\n>> Bad update. Macports has a couple of boost packages. Install the newer 1.46\n>> ones.\n>> \n>> --\n>> Douglas Huff\n>> \n>> On Oct 5, 2011 1:43 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n>>> I updated src/makefile.osx and doc/build-osx.txt today, assuming that\n>>> the MacPorts versions of dependencies will be used and the -mt boost\n>>> libraries will be used.\n>>> \n>>> I also modified makefile.unix and makefile.osx to auto-build\n>>> dependencies using gcc's -MMD option.\n>>> \n>>> --\n>>> --\n>>> Gavin Andresen\n>>> \n>>> \n>>> ------------------------------------------------------------------------------\n>>> All the data continuously generated in your IT infrastructure contains a\n>>> definitive record of customers, application performance, security\n>>> threats, fraudulent activity and more. Splunk takes this data and makes\n>>> sense of it. Business sense. IT sense. Common sense.\n>>> http://p.sf.net/sfu/splunk-d2dcopy1\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> ------------------------------------------------------------------------------\n>> All the data continuously generated in your IT infrastructure contains a\n>> definitive record of customers, application performance, security\n>> threats, fraudulent activity and more. Splunk takes this data and makes\n>> sense of it. Business sense. IT sense. Common sense.\n>> http://p.sf.net/sfu/splunk-d2dcopy1\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n> \n> \n> \n> -- \n> Make a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!\n> \n> ------------------------------------------------------------------------------\n> All the data continuously generated in your IT infrastructure contains a\n> definitive record of customers, application performance, security\n> threats, fraudulent activity and more. Splunk takes this data and makes\n> sense of it. Business sense. IT sense. Common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy1\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111006/ff207632/attachment.html>", "summary": "A discussion among developers about compiling Bitcoin on Mac OS X and the need to statically link libz into crypto during compilation."}], "thread_summary": {"title": "Mac libboost_thread or thread-mt?", "categories": ["Bitcoin-development"], "authors": ["Brian McQueen", "Douglas Huff", "Michael Gr\u00f8nager", "Gavin Andresen", "Matt Corallo", "Eric Mockensturm"], "messages_count": 7, "total_messages_chars_count": 8884, "convo_summary": "Developers discussed issues with Boost libraries on MacPorts, including missing libboost_thread.a and the removal of the -mt suffix. Gavin Andresen updated makefiles for Mac and Unix to auto-build dependencies and assume MacPorts versions of dependencies and -mt boost libraries. A bad update caused issues with MacPorts boost packages, but installing newer 1.46 versions can fix the problem. The discussion also touched on the need to statically link libz into crypto during compilation."}}, {"title": "[Bitcoin-development] Transaction Delivery and Storage", "thread_messages": [{"author": "Brian McQueen", "date": "2011-10-05T05:18:01", "message_text_only": "I see the Contracts wiki page talking about,\n\n1) Transactions passed around outside the P2P network ...\n2) ... transaction ... not broadcast right away\n\nHow are transactions created, stored and transmitted?  How will they\nbe brought back into the P2P network once they are out?\n\nB\n\n-- \nMake a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!", "summary": "The Contracts wiki page discusses transactions passed outside the P2P network and how they are brought back in. Kiva.org offers small loans to make a big difference."}, {"author": "Gregory Maxwell", "date": "2011-10-05T05:23:42", "message_text_only": "On Wed, Oct 5, 2011 at 1:18 AM, Brian McQueen <mcqueenorama at gmail.com> wrote:\n> I see the Contracts wiki page talking about,\n>\n> 1) Transactions passed around outside the P2P network ...\n> 2) ... transaction ... not broadcast right away\n>\n> How are transactions created, stored and transmitted? \u00a0How will they\n> be brought back into the P2P network once they are out?\n\nHowever you want. The P2P network isn't all the essential to bitcoin.\nWith patches you can import and export transactions to text from a\nregular client.\n\nThe distributed algorithm and the block chain are far more essential\nto bitcoin than the p2p network is, you could interconnect all bitcoin\nsystems with morse code operators running spark gap transmitters with\nnary an IP packet in sight and it would still be bitcoin.", "summary": "Bitcoin transactions can be created, stored, and transmitted outside the P2P network and brought back in later, as the network is not essential to Bitcoin."}, {"author": "Mike Hearn", "date": "2011-10-05T15:17:30", "message_text_only": "I imagine a lot of the things on the contracts page will be implemented by\nspecialized software that interacts with the Bitcoin network directly.\nTransactions would then be moved around, for example, by having clients do\nHTTP POSTs of protocol buffers to servers that are listening and know how to\ninterpret the received messages.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111005/c88a5375/attachment.html>", "summary": "Specialized software will implement contract terms via Bitcoin network. Transactions will move via HTTP POSTs of protocol buffers to servers."}], "thread_summary": {"title": "Transaction Delivery and Storage", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn", "Brian McQueen", "Gregory Maxwell"], "messages_count": 3, "total_messages_chars_count": 1667, "convo_summary": "The group discussed how transactions can be passed outside the P2P network and brought back in later. They also talked about Kiva.org's small loans and how Bitcoin transactions can be created, stored, and transmitted outside the network. Specialized software will implement contract terms via the Bitcoin network using HTTP POSTs of protocol buffers to servers."}}, {"title": "[Bitcoin-development] vtxPrev", "thread_messages": [{"author": "Michael Gr\u00f8nager", "date": "2011-10-05T12:31:40", "message_text_only": "Hi !\n\nI am looking into enabling a split between thin clients holding the wallet and server(s) holding the blocks and txdb.\n\nTo that end I am considering to simplify the WalletTx a bit and I came across the vtxPrev in the code. As I see it vtxPrev is only used for keeping a list of supporting transactions to enable resubmit of these in case the transaction it self and all its supporting transactions are lost due to some blocks becoming invalid as they are part of a dead-end part of the chain. However...\n\nThe vtxPrev stores 3 transactions back, but as transactions need 7 block to maturity and respendability isn't it overkill - I mean it is highly unlikely that a transaction gets invalid after 7 confirmations and the vtxPrev are guarding against resubmission of transaction more than 21 confirmations back. Further, we cannot guarantee that the transaction owner is online at the time and the money could have been re-spent for others anyway.\n\nSo bottom line:\nDo we need the vtxPrev at all ? Or did I miss out something ?\n\nCheers,\n\nMichael", "summary": "Michael is considering simplifying the WalletTx by removing vtxPrev, which stores supporting transactions, as it may not be necessary."}, {"author": "Gregory Maxwell", "date": "2011-10-05T12:50:52", "message_text_only": "On Wed, Oct 5, 2011 at 8:31 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> The vtxPrev stores 3 transactions back, but as transactions need 7 block to maturity and respendability isn't it overkill - I mean it is highly unlikely that a transaction gets invalid after 7 confirmations and\n\nThey don't need 7 blocks to maturity and respendability. The software\nwill attempt to use older inputs when available but if not it will use\nwhat it has.  It's also prone to respending its own outputs quickly\nbecause it reasonably trusts that it won't doublespend its own\ntransactions.\n\nAnd, yes, if there is a deep split then its possible that inputs might\nhave been spent differently in the new split. But it's not especially\nlikely. Retransmitting one of your own txn's parents if its dropped\nbut not yet impossible sounds prudent to me.", "summary": "The VtxPrev stores 3 transactions back, but it's overkill as transactions don't need 7 blocks to maturity and respendability. It's unlikely for a transaction to become invalid after 7 confirmations."}, {"author": "Michael Gr\u00f8nager", "date": "2011-10-05T13:44:08", "message_text_only": "Oups - I was reading the code wrongly - going through AddSupportingTransactions carefully again...\n\nThe vtxPrev contains a list of the supporting confirmations up to 3 confirmations back. So it is only of relevance (and only gets filled) if you accept coins that are less than 3 confirmations old. In this case you would like to resend the depending transactions to the network in case of chain splits.\n\nThis makes much more sense, but also, it is only of relevance when you accept newly earned coins. And it will only be of relevance for half an hour or so.\n\nCheers,\n\nMichael\n\n\n\nOn 05/10/2011, at 14:50, Gregory Maxwell wrote:\n\n> On Wed, Oct 5, 2011 at 8:31 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>> The vtxPrev stores 3 transactions back, but as transactions need 7 block to maturity and respendability isn't it overkill - I mean it is highly unlikely that a transaction gets invalid after 7 confirmations and\n> \n> They don't need 7 blocks to maturity and respendability. The software\n> will attempt to use older inputs when available but if not it will use\n> what it has.  It's also prone to respending its own outputs quickly\n> because it reasonably trusts that it won't doublespend its own\n> transactions.\n> \n> And, yes, if there is a deep split then its possible that inputs might\n> have been spent differently in the new split. But it's not especially\n> likely. Retransmitting one of your own txn's parents if its dropped\n> but not yet impossible sounds prudent to me.\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com", "summary": "The vtxPrev contains a list of supporting confirmations up to 3 confirmations back, relevant only if accepting coins less than 3 confirmations old."}], "thread_summary": {"title": "vtxPrev", "categories": ["Bitcoin-development"], "authors": ["Michael Gr\u00f8nager", "Gregory Maxwell"], "messages_count": 3, "total_messages_chars_count": 3537, "convo_summary": "Michael Gr\u00f8nager is considering removing vtxPrev from WalletTx as it may not be necessary. Gregory Maxwell thinks it's overkill as transactions don't need 7 blocks to maturity and respendability. Michael explains that vtxPrev contains a list of supporting confirmations up to 3 confirmations back, relevant only if accepting coins less than 3 confirmations old."}}, {"title": "[Bitcoin-development] Help wanted: translations", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-10-08T21:13:28", "message_text_only": "Reposting here from the forums:\n\nGood news: I'm just about to get a Bitcoin-Qt version 0.5 Release\nCandidate 1 out, with a much-improved GUI.\n\nBad news: all the translations for the old wxWidgets Bitcoin are\nobsolete, and the process for making translations is different.\n\nIs anybody willing to write new translations?  Here's what you'll need to know:\n\nThree translations already exist: de nl and ru.\nTranslations are stored in \".ts\" files in the src/qt/locale folder\nThe 'QT Linguist' tool can be used to create translations\n... or maybe an online tool like Transifex could/should be used to\ncrowd-source the work\n\nAnd is anybody willing to take the job of coordinating translation\nefforts, figuring out if Transifex is a good tool to use, and writing\nsome documentation to make it easy for people to create and submit new\ntranslations?\n\n\nReferences:\n  https://github.com/bitcoin/bitcoin/blob/master/src/qt/locale\n  http://doc.qt.nokia.com/latest/linguist-manual.html\n  http://www.transifex.net/\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin-Qt version 0.5 Release Candidate 1 is coming with an improved GUI, but translations for the old version are obsolete and need to be rewritten."}, {"author": "Christian Decker", "date": "2011-10-08T21:25:17", "message_text_only": "Damn, german is already contributed :-)\nWell I can still do the italian one and check german then.\n\nOn Sat, Oct 8, 2011 at 11:13 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Reposting here from the forums:\n>\n> Good news: I'm just about to get a Bitcoin-Qt version 0.5 Release\n> Candidate 1 out, with a much-improved GUI.\n>\n> Bad news: all the translations for the old wxWidgets Bitcoin are\n> obsolete, and the process for making translations is different.\n>\n> Is anybody willing to write new translations?  Here's what you'll need to\n> know:\n>\n> Three translations already exist: de nl and ru.\n> Translations are stored in \".ts\" files in the src/qt/locale folder\n> The 'QT Linguist' tool can be used to create translations\n> ... or maybe an online tool like Transifex could/should be used to\n> crowd-source the work\n>\n> And is anybody willing to take the job of coordinating translation\n> efforts, figuring out if Transifex is a good tool to use, and writing\n> some documentation to make it easy for people to create and submit new\n> translations?\n>\n>\n> References:\n>  https://github.com/bitcoin/bitcoin/blob/master/src/qt/locale\n>  http://doc.qt.nokia.com/latest/linguist-manual.html\n>  http://www.transifex.net/\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> All of the data generated in your IT infrastructure is seriously valuable.\n> Why? It contains a definitive record of application performance, security\n> threats, fraudulent activity, and more. Splunk takes this data and makes\n> sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111008/1be6e70d/attachment.html>", "summary": "Bitcoin-Qt version 0.5 Release Candidate 1 is being released with an improved GUI, but new translations are needed as the old ones are obsolete."}, {"author": "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "date": "2011-10-08T23:06:53", "message_text_only": "Hi!\n\n I can translate it to Brazilian Portuguese.\n\nBest,\nThiago\n\nOn 8 October 2011 18:13, Gavin Andresen <gavinandresen at gmail.com> wrote:\n\n> Reposting here from the forums:\n>\n> Good news: I'm just about to get a Bitcoin-Qt version 0.5 Release\n> Candidate 1 out, with a much-improved GUI.\n>\n> Bad news: all the translations for the old wxWidgets Bitcoin are\n> obsolete, and the process for making translations is different.\n>\n> Is anybody willing to write new translations?  Here's what you'll need to\n> know:\n>\n> Three translations already exist: de nl and ru.\n> Translations are stored in \".ts\" files in the src/qt/locale folder\n> The 'QT Linguist' tool can be used to create translations\n> ... or maybe an online tool like Transifex could/should be used to\n> crowd-source the work\n>\n> And is anybody willing to take the job of coordinating translation\n> efforts, figuring out if Transifex is a good tool to use, and writing\n> some documentation to make it easy for people to create and submit new\n> translations?\n>\n>\n> References:\n>  https://github.com/bitcoin/bitcoin/blob/master/src/qt/locale\n>  http://doc.qt.nokia.com/latest/linguist-manual.html\n>  http://www.transifex.net/\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> All of the data generated in your IT infrastructure is seriously valuable.\n> Why? It contains a definitive record of application performance, security\n> threats, fraudulent activity, and more. Splunk takes this data and makes\n> sense of it. IT sense. And common sense.\n> http://p.sf.net/sfu/splunk-d2dcopy2\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111008/f3183ea8/attachment.html>", "summary": "Bitcoin-Qt version 0.5 Release Candidate 1 is being released with an improved GUI, but all translations for the old wxWidgets Bitcoin are obsolete. New translations are needed."}, {"author": "Luke-Jr", "date": "2011-10-08T23:12:31", "message_text_only": "Please at least get Coinbaser merged for 0.5. It has had a lot of testing on \nEligius for months, a landslide of support for the new JSON-RPC method (as \nrequested), and I have even gone to the effort to document it. As I will no \nlonger be using bitcoind for Eligius soon, I have little incentive to \nmaintain/rebase coinbaser across a 0.6 development period.", "summary": "Request to merge Coinbaser for version 0.5 due to extensive testing on Eligius, support for new JSON-RPC method, and lack of incentive for maintenance."}, {"author": "Luke-Jr", "date": "2011-10-10T04:02:38", "message_text_only": "On Saturday, October 08, 2011 7:12:31 PM Luke-Jr wrote:\n> Please at least get Coinbaser merged for 0.5. It has had a lot of testing\n> on Eligius for months, a landslide of support for the new JSON-RPC method\n> (as requested), and I have even gone to the effort to document it. As I\n> will no longer be using bitcoind for Eligius soon, I have little incentive\n> to maintain/rebase coinbaser across a 0.6 development period.\n\nFWIW, Gavin's IRC response more or less amounts to being unwilling to merge \nthis even though it was ready, tested, and even fulfilled his original request \nfor community support for the new JSON-RPC call, all long before he announced \nthe feature freeze on 0.5... hopefully it'll get merged to 0.6 git before it \nneeds a rebase. :/", "summary": "Luke-Jr requested Coinbaser to be merged for 0.5, citing extensive testing and support, but Gavin was unwilling to merge it before the feature freeze."}, {"author": "Mike Hearn", "date": "2011-10-10T09:22:28", "message_text_only": "On Sun, Oct 9, 2011 at 1:12 AM, Luke-Jr <luke at dashjr.org> wrote:\n> As I will no longer be using bitcoind for Eligius soon\n\nWhat will you be using instead? Isn't bitcoind a requirement for running a\npool?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111010/43718ec8/attachment.html>", "summary": "Luke-Jr plans to stop using bitcoind for Eligius and the person is asking what will be used instead, as bitcoind is necessary for running a pool."}, {"author": "Luke-Jr", "date": "2011-10-10T13:05:56", "message_text_only": "On Monday, October 10, 2011 5:22:28 AM Mike Hearn wrote:\n> On Sun, Oct 9, 2011 at 1:12 AM, Luke-Jr <luke at dashjr.org> wrote:\n> > As I will no longer be using bitcoind for Eligius soon\n> \n> What will you be using instead? Isn't bitcoind a requirement for running a\n> pool?\n\nWriting some custom software designed to more efficiently create work.\nTo clarify, bitcoind will still serve the purpose of peering with external \nnodes and picking out valid transactions to be accepted into blocks; it just \nwon't be involved in the primary operations of the pool.", "summary": "Luke-Jr plans to stop using bitcoind for Eligius pool and create custom software for more efficient work creation while still using bitcoind for other purposes."}, {"author": "Mike Hearn", "date": "2011-10-10T13:18:07", "message_text_only": ">\n> > > As I will no longer be using bitcoind for Eligius soon\n> >\n> > What will you be using instead? Isn't bitcoind a requirement for running\n> a\n> > pool?\n>\n> Writing some custom software designed to more efficiently create work.\n> To clarify, bitcoind will still serve the purpose of peering with external\n> nodes and picking out valid transactions to be accepted into blocks; it\n> just\n> won't be involved in the primary operations of the pool.\n>\n\nAh, I see. Sounds a bit like the direction Steve is going with poolserverj.\nSo your custom software would handle incrementing the extraNonce,\nrecalculating the merkle tree/root, and so on?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111010/c1609a96/attachment.html>", "summary": "A pool operator will no longer use bitcoind for Eligius and will instead use custom software designed to efficiently create work."}, {"author": "Luke-Jr", "date": "2011-10-10T14:11:48", "message_text_only": "On Monday, October 10, 2011 9:18:07 AM Mike Hearn wrote:\n> > > > As I will no longer be using bitcoind for Eligius soon\n> > > \n> > > What will you be using instead? Isn't bitcoind a requirement for\n> > > running\n> > \n> > a\n> > \n> > > pool?\n> > \n> > Writing some custom software designed to more efficiently create work.\n> > To clarify, bitcoind will still serve the purpose of peering with\n> > external nodes and picking out valid transactions to be accepted into\n> > blocks; it just\n> > won't be involved in the primary operations of the pool.\n> \n> Ah, I see. Sounds a bit like the direction Steve is going with poolserverj.\n> So your custom software would handle incrementing the extraNonce,\n> recalculating the merkle tree/root, and so on?\n\nYes, does that already. Hard part right now is implementing a stateless TCP/IP \n\"stack\" so it can ignore DDoS sanely.", "summary": "Mike Hearn is developing custom software to efficiently create work for his pool, which will replace the use of bitcoind."}, {"author": "Nils Schneider", "date": "2011-10-22T10:51:15", "message_text_only": "> And is anybody willing to take the job of coordinating translation\n> efforts, figuring out if Transifex is a good tool to use, and writing\n> some documentation to make it easy for people to create and submit new\n> translations?\n\nI have exported all .ts to transifex.\n\nhttps://www.transifex.net/projects/p/bitcoin/resource/tx/\n\nI'm now trying to figure out how to use it but it looks like\n\ntx pull && git add src/qt/locale/* && git commit src/qt/locale/ && git push\n\nwill be all that's needed to push translation updates from transifex to\ngithub.", "summary": "Transifex is being used to coordinate translation efforts for Bitcoin. The process involves pulling updates and pushing them to GitHub."}, {"author": "Geir Harald Hansen", "date": "2011-10-22T12:26:52", "message_text_only": "On 22.10.2011 12:51, Nils Schneider wrote:\n>> And is anybody willing to take the job of coordinating translation\n>> efforts, figuring out if Transifex is a good tool to use, and writing\n>> some documentation to make it easy for people to create and submit new\n>> translations?\n> \n> I have exported all .ts to transifex.\n> \n> https://www.transifex.net/projects/p/bitcoin/resource/tx/\n\nIf you add Norwegian Bokm\u00e5l, I can do that one. Language code \"nb\".\n\nRegards,\nGeir Harald Hansen", "summary": "Bitcoin translation coordination requested. Transifex tool suggested for easy translation submission. Norwegian Bokm\u00e5l translation requested."}, {"author": "Nils Schneider", "date": "2011-10-22T13:28:30", "message_text_only": "I think it's possible to add it yourself. Just click on \"add translation\"\n\nOn 22.10.2011 14:26, Geir Harald Hansen wrote:\n> On 22.10.2011 12:51, Nils Schneider wrote:\n>>> And is anybody willing to take the job of coordinating translation\n>>> efforts, figuring out if Transifex is a good tool to use, and writing\n>>> some documentation to make it easy for people to create and submit new\n>>> translations?\n>>\n>> I have exported all .ts to transifex.\n>>\n>> https://www.transifex.net/projects/p/bitcoin/resource/tx/\n> \n> If you add Norwegian Bokm\u00e5l, I can do that one. Language code \"nb\".\n> \n> Regards,\n> Geir Harald Hansen\n> \n> \n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn \n> about Cisco certifications, training, and career opportunities. \n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Geir Harald Hansen offers to translate Bitcoin into Norwegian Bokm\u00e5l if it is added to Transifex, a tool for coordinating translation efforts."}, {"author": "Geir Harald Hansen", "date": "2011-10-22T16:14:04", "message_text_only": "What do you know, it worked. Finished.\n\nOnce again Norway finishes ahead of Sweden. :P\n\nBy the way, I had to translate some of the exact same strings 2-3 times.\nThat's something you may want to improve on.\n\nOn 22.10.2011 15:28, Nils Schneider wrote:\n> I think it's possible to add it yourself. Just click on \"add translation\"\n> \n> On 22.10.2011 14:26, Geir Harald Hansen wrote:\n>> On 22.10.2011 12:51, Nils Schneider wrote:\n>>>> And is anybody willing to take the job of coordinating translation\n>>>> efforts, figuring out if Transifex is a good tool to use, and writing\n>>>> some documentation to make it easy for people to create and submit new\n>>>> translations?\n>>>\n>>> I have exported all .ts to transifex.\n>>>\n>>> https://www.transifex.net/projects/p/bitcoin/resource/tx/\n>>\n>> If you add Norwegian Bokm\u00e5l, I can do that one. Language code \"nb\".\n>>\n>> Regards,\n>> Geir Harald Hansen\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> The demand for IT networking professionals continues to grow, and the\n>> demand for specialized networking skills is growing even more rapidly.\n>> Take a complimentary Learning at Cisco Self-Assessment and learn \n>> about Cisco certifications, training, and career opportunities. \n>> http://p.sf.net/sfu/cisco-dev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn \n> about Cisco certifications, training, and career opportunities. \n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Norway finished ahead of Sweden in a translation project. Some strings had to be translated multiple times, which could be improved."}, {"author": "Christian Decker", "date": "2011-10-24T11:24:53", "message_text_only": "Actually no, the same string may have to be translated in different ways\ndepending on the context they appear in. That sometimes happens for italian,\nand I'm sure it happens in other cases too. Not sure whether this is the\ncause for duplicate strings for now, but it might.\n\nRegards,\nChris\n\nOn Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen\n<operator at bitminter.com>wrote:\n\n> What do you know, it worked. Finished.\n>\n> Once again Norway finishes ahead of Sweden. :P\n>\n> By the way, I had to translate some of the exact same strings 2-3 times.\n> That's something you may want to improve on.\n>\n> On 22.10.2011 15:28, Nils Schneider wrote:\n> > I think it's possible to add it yourself. Just click on \"add translation\"\n> >\n> > On 22.10.2011 14:26, Geir Harald Hansen wrote:\n> >> On 22.10.2011 12:51, Nils Schneider wrote:\n> >>>> And is anybody willing to take the job of coordinating translation\n> >>>> efforts, figuring out if Transifex is a good tool to use, and writing\n> >>>> some documentation to make it easy for people to create and submit new\n> >>>> translations?\n> >>>\n> >>> I have exported all .ts to transifex.\n> >>>\n> >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/\n> >>\n> >> If you add Norwegian Bokm\u00e5l, I can do that one. Language code \"nb\".\n> >>\n> >> Regards,\n> >> Geir Harald Hansen\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> The demand for IT networking professionals continues to grow, and the\n> >> demand for specialized networking skills is growing even more rapidly.\n> >> Take a complimentary Learning at Cisco Self-Assessment and learn\n> >> about Cisco certifications, training, and career opportunities.\n> >> http://p.sf.net/sfu/cisco-dev2dev\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >>\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > The demand for IT networking professionals continues to grow, and the\n> > demand for specialized networking skills is growing even more rapidly.\n> > Take a complimentary Learning at Cisco Self-Assessment and learn\n> > about Cisco certifications, training, and career opportunities.\n> > http://p.sf.net/sfu/cisco-dev2dev\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/eb59c4b4/attachment.html>", "summary": "Duplicate translations may occur due to the need for different translations of the same string in different contexts, as in the case of Italian."}, {"author": "John Smith", "date": "2011-10-24T18:10:54", "message_text_only": "Indeed. It could make sense. That's the reason why Qt distinguishes strings\nbased on context as well as content.\n\nBut it could also be nonsense. Can you be more specific as to which strings?\n\nJS\n\nOn Mon, Oct 24, 2011 at 1:24 PM, Christian Decker <\ndecker.christian at gmail.com> wrote:\n\n> Actually no, the same string may have to be translated in different ways\n> depending on the context they appear in. That sometimes happens for italian,\n> and I'm sure it happens in other cases too. Not sure whether this is the\n> cause for duplicate strings for now, but it might.\n>\n> Regards,\n> Chris\n>\n>\n> On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen <\n> operator at bitminter.com> wrote:\n>\n>> What do you know, it worked. Finished.\n>>\n>> Once again Norway finishes ahead of Sweden. :P\n>>\n>> By the way, I had to translate some of the exact same strings 2-3 times.\n>> That's something you may want to improve on.\n>>\n>> On 22.10.2011 15:28, Nils Schneider wrote:\n>> > I think it's possible to add it yourself. Just click on \"add\n>> translation\"\n>> >\n>> > On 22.10.2011 14:26, Geir Harald Hansen wrote:\n>> >> On 22.10.2011 12:51, Nils Schneider wrote:\n>> >>>> And is anybody willing to take the job of coordinating translation\n>> >>>> efforts, figuring out if Transifex is a good tool to use, and writing\n>> >>>> some documentation to make it easy for people to create and submit\n>> new\n>> >>>> translations?\n>> >>>\n>> >>> I have exported all .ts to transifex.\n>> >>>\n>> >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/\n>> >>\n>> >> If you add Norwegian Bokm\u00e5l, I can do that one. Language code \"nb\".\n>> >>\n>> >> Regards,\n>> >> Geir Harald Hansen\n>> >>\n>> >>\n>> >>\n>> ------------------------------------------------------------------------------\n>> >> The demand for IT networking professionals continues to grow, and the\n>> >> demand for specialized networking skills is growing even more rapidly.\n>> >> Take a complimentary Learning at Cisco Self-Assessment and learn\n>> >> about Cisco certifications, training, and career opportunities.\n>> >> http://p.sf.net/sfu/cisco-dev2dev\n>> >> _______________________________________________\n>> >> Bitcoin-development mailing list\n>> >> Bitcoin-development at lists.sourceforge.net\n>> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >>\n>> >\n>> >\n>> >\n>> ------------------------------------------------------------------------------\n>> > The demand for IT networking professionals continues to grow, and the\n>> > demand for specialized networking skills is growing even more rapidly.\n>> > Take a complimentary Learning at Cisco Self-Assessment and learn\n>> > about Cisco certifications, training, and career opportunities.\n>> > http://p.sf.net/sfu/cisco-dev2dev\n>> > _______________________________________________\n>> > Bitcoin-development mailing list\n>> > Bitcoin-development at lists.sourceforge.net\n>> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> >\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> The demand for IT networking professionals continues to grow, and the\n>> demand for specialized networking skills is growing even more rapidly.\n>> Take a complimentary Learning at Cisco Self-Assessment and learn\n>> about Cisco certifications, training, and career opportunities.\n>> http://p.sf.net/sfu/cisco-dev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/da7e1eec/attachment.html>", "summary": "Discussion on the need for translating strings in different ways depending on context, and the use of Transifex for coordinating translation efforts."}, {"author": "Geir Harald Hansen", "date": "2011-10-24T18:55:01", "message_text_only": "Three quick examples of duplicated strings. There are many more. Some of\nthe smaller ones may make sense to have duplicated several times in\nenglish as their translated versions may differ in other languages. But\nwith these below I don't see the point.\n\nTwice, with a small difference (<b> vs. none):\n\nWARNING: If you encrypt your wallet and lose your passphrase, you will\n<b>LOSE ALL OF YOUR BITCOINS</b>! Are you sure you wish to encrypt your\nwallet?\n\nWARNING: If you encrypt your wallet and lose your passphrase, you will\nLOSE ALL OF YOUR BITCOINS! Are you sure you wish to encrypt your wallet?\n\nAgain twice, with a small difference (%s vs %1):\n\nThis transaction is over the size limit. You can still send it for a fee\nof %1, which goes to the nodes that process your transaction and helps\nto support the network. Do you want to pay the fee?\n\nThis transaction is over the size limit. You can still send it for a fee\nof %s, which goes to the nodes that process your transaction and helps\nto support the network. Do you want to pay the fee?\n\nTwice, looks exactly the same:\n\nGenerated coins must wait 120 blocks before they can be spent. When you\ngenerated this block, it was broadcast to the network to be added to the\nblock chain. If it fails to get into the chain, it will change to \"not\naccepted\" and not be spendable. This may occasionally happen if another\nnode generates a block within a few seconds of yours.\n\nGenerated coins must wait 120 blocks before they can be spent. When you\ngenerated this block, it was broadcast to the network to be added to the\nblock chain. If it fails to get into the chain, it will change to \"not\naccepted\" and not be spendable. This may occasionally happen if another\nnode generates a block within a few seconds of yours.\n\nRegards,\nGeir Harald Hansen\n\nOn 24.10.2011 20:10, John Smith wrote:\n> \n> Indeed. It could make sense. That's the reason why Qt distinguishes\n> strings based on context as well as content.\n> \n> But it could also be nonsense. Can you be more specific as to which strings?\n> \n> JS\n> \n> On Mon, Oct 24, 2011 at 1:24 PM, Christian Decker\n> <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:\n> \n>     Actually no, the same string may have to be translated in different\n>     ways depending on the context they appear in. That sometimes happens\n>     for italian, and I'm sure it happens in other cases too. Not sure\n>     whether this is the cause for duplicate strings for now, but it might.\n> \n>     Regards,\n>     Chris\n> \n> \n>     On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen\n>     <operator at bitminter.com <mailto:operator at bitminter.com>> wrote:\n> \n>         What do you know, it worked. Finished.\n> \n>         Once again Norway finishes ahead of Sweden. :P\n> \n>         By the way, I had to translate some of the exact same strings\n>         2-3 times.\n>         That's something you may want to improve on.\n> \n>         On 22.10.2011 15:28, Nils Schneider wrote:\n>         > I think it's possible to add it yourself. Just click on \"add\n>         translation\"\n>         >\n>         > On 22.10.2011 14:26, Geir Harald Hansen wrote:\n>         >> On 22.10.2011 12:51, Nils Schneider wrote:\n>         >>>> And is anybody willing to take the job of coordinating\n>         translation\n>         >>>> efforts, figuring out if Transifex is a good tool to use,\n>         and writing\n>         >>>> some documentation to make it easy for people to create and\n>         submit new\n>         >>>> translations?\n>         >>>\n>         >>> I have exported all .ts to transifex.\n>         >>>\n>         >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/\n>         >>\n>         >> If you add Norwegian Bokm\u00e5l, I can do that one. Language code\n>         \"nb\".\n>         >>\n>         >> Regards,\n>         >> Geir Harald Hansen", "summary": "The text provides examples of duplicated strings in Bitcoin's wallet software, which could be improved by distinguishing strings based on context."}, {"author": "John Smith", "date": "2011-10-25T05:02:23", "message_text_only": "Those indeed seems weird... I'll take a look at it.\n\nJS\n\nOn Mon, Oct 24, 2011 at 8:55 PM, Geir Harald Hansen\n<operator at bitminter.com>wrote:\n\n> Three quick examples of duplicated strings. There are many more. Some of\n> the smaller ones may make sense to have duplicated several times in\n> english as their translated versions may differ in other languages. But\n> with these below I don't see the point.\n>\n> Twice, with a small difference (<b> vs. none):\n>\n> WARNING: If you encrypt your wallet and lose your passphrase, you will\n> <b>LOSE ALL OF YOUR BITCOINS</b>! Are you sure you wish to encrypt your\n> wallet?\n>\n> WARNING: If you encrypt your wallet and lose your passphrase, you will\n> LOSE ALL OF YOUR BITCOINS! Are you sure you wish to encrypt your wallet?\n>\n> Again twice, with a small difference (%s vs %1):\n>\n> This transaction is over the size limit. You can still send it for a fee\n> of %1, which goes to the nodes that process your transaction and helps\n> to support the network. Do you want to pay the fee?\n>\n> This transaction is over the size limit. You can still send it for a fee\n> of %s, which goes to the nodes that process your transaction and helps\n> to support the network. Do you want to pay the fee?\n>\n> Twice, looks exactly the same:\n>\n> Generated coins must wait 120 blocks before they can be spent. When you\n> generated this block, it was broadcast to the network to be added to the\n> block chain. If it fails to get into the chain, it will change to \"not\n> accepted\" and not be spendable. This may occasionally happen if another\n> node generates a block within a few seconds of yours.\n>\n> Generated coins must wait 120 blocks before they can be spent. When you\n> generated this block, it was broadcast to the network to be added to the\n> block chain. If it fails to get into the chain, it will change to \"not\n> accepted\" and not be spendable. This may occasionally happen if another\n> node generates a block within a few seconds of yours.\n>\n> Regards,\n> Geir Harald Hansen\n>\n> On 24.10.2011 20:10, John Smith wrote:\n> >\n> > Indeed. It could make sense. That's the reason why Qt distinguishes\n> > strings based on context as well as content.\n> >\n> > But it could also be nonsense. Can you be more specific as to which\n> strings?\n> >\n> > JS\n> >\n> > On Mon, Oct 24, 2011 at 1:24 PM, Christian Decker\n> > <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:\n> >\n> >     Actually no, the same string may have to be translated in different\n> >     ways depending on the context they appear in. That sometimes happens\n> >     for italian, and I'm sure it happens in other cases too. Not sure\n> >     whether this is the cause for duplicate strings for now, but it\n> might.\n> >\n> >     Regards,\n> >     Chris\n> >\n> >\n> >     On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen\n> >     <operator at bitminter.com <mailto:operator at bitminter.com>> wrote:\n> >\n> >         What do you know, it worked. Finished.\n> >\n> >         Once again Norway finishes ahead of Sweden. :P\n> >\n> >         By the way, I had to translate some of the exact same strings\n> >         2-3 times.\n> >         That's something you may want to improve on.\n> >\n> >         On 22.10.2011 15:28, Nils Schneider wrote:\n> >         > I think it's possible to add it yourself. Just click on \"add\n> >         translation\"\n> >         >\n> >         > On 22.10.2011 14:26, Geir Harald Hansen wrote:\n> >         >> On 22.10.2011 12:51, Nils Schneider wrote:\n> >         >>>> And is anybody willing to take the job of coordinating\n> >         translation\n> >         >>>> efforts, figuring out if Transifex is a good tool to use,\n> >         and writing\n> >         >>>> some documentation to make it easy for people to create and\n> >         submit new\n> >         >>>> translations?\n> >         >>>\n> >         >>> I have exported all .ts to transifex.\n> >         >>>\n> >         >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/\n> >         >>\n> >         >> If you add Norwegian Bokm\u00e5l, I can do that one. Language code\n> >         \"nb\".\n> >         >>\n> >         >> Regards,\n> >         >> Geir Harald Hansen\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111025/640af9da/attachment.html>", "summary": "Geir Harald Hansen points out duplicated strings in Bitcoin's code, suggesting they could be improved. Examples are given."}, {"author": "John Smith", "date": "2011-10-29T21:16:39", "message_text_only": "Fixed:\nhttps://github.com/bitcoin/bitcoin/commit/8d3e1becf0fa6c27c7df4a52daf181282a3d2468\n\nIt seems that somehow strings from the old Wx UI had ended up in\nbitcoinstrings.cpp. I re-ran the string extraction script and the duplicated\nmessaged should be gone.\n\nJS\n\nOn Tue, Oct 25, 2011 at 7:02 AM, John Smith <witchspace81 at gmail.com> wrote:\n\n> Those indeed seems weird... I'll take a look at it.\n>\n> JS\n>\n>\n> On Mon, Oct 24, 2011 at 8:55 PM, Geir Harald Hansen <\n> operator at bitminter.com> wrote:\n>\n>> Three quick examples of duplicated strings. There are many more. Some of\n>> the smaller ones may make sense to have duplicated several times in\n>> english as their translated versions may differ in other languages. But\n>> with these below I don't see the point.\n>>\n>> Twice, with a small difference (<b> vs. none):\n>>\n>> WARNING: If you encrypt your wallet and lose your passphrase, you will\n>> <b>LOSE ALL OF YOUR BITCOINS</b>! Are you sure you wish to encrypt your\n>> wallet?\n>>\n>> WARNING: If you encrypt your wallet and lose your passphrase, you will\n>> LOSE ALL OF YOUR BITCOINS! Are you sure you wish to encrypt your wallet?\n>>\n>> Again twice, with a small difference (%s vs %1):\n>>\n>> This transaction is over the size limit. You can still send it for a fee\n>> of %1, which goes to the nodes that process your transaction and helps\n>> to support the network. Do you want to pay the fee?\n>>\n>> This transaction is over the size limit. You can still send it for a fee\n>> of %s, which goes to the nodes that process your transaction and helps\n>> to support the network. Do you want to pay the fee?\n>>\n>> Twice, looks exactly the same:\n>>\n>> Generated coins must wait 120 blocks before they can be spent. When you\n>> generated this block, it was broadcast to the network to be added to the\n>> block chain. If it fails to get into the chain, it will change to \"not\n>> accepted\" and not be spendable. This may occasionally happen if another\n>> node generates a block within a few seconds of yours.\n>>\n>> Generated coins must wait 120 blocks before they can be spent. When you\n>> generated this block, it was broadcast to the network to be added to the\n>> block chain. If it fails to get into the chain, it will change to \"not\n>> accepted\" and not be spendable. This may occasionally happen if another\n>> node generates a block within a few seconds of yours.\n>>\n>> Regards,\n>> Geir Harald Hansen\n>>\n>> On 24.10.2011 20:10, John Smith wrote:\n>> >\n>> > Indeed. It could make sense. That's the reason why Qt distinguishes\n>> > strings based on context as well as content.\n>> >\n>> > But it could also be nonsense. Can you be more specific as to which\n>> strings?\n>> >\n>> > JS\n>> >\n>> > On Mon, Oct 24, 2011 at 1:24 PM, Christian Decker\n>> > <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:\n>> >\n>> >     Actually no, the same string may have to be translated in different\n>> >     ways depending on the context they appear in. That sometimes happens\n>> >     for italian, and I'm sure it happens in other cases too. Not sure\n>> >     whether this is the cause for duplicate strings for now, but it\n>> might.\n>> >\n>> >     Regards,\n>> >     Chris\n>> >\n>> >\n>> >     On Sat, Oct 22, 2011 at 6:14 PM, Geir Harald Hansen\n>> >     <operator at bitminter.com <mailto:operator at bitminter.com>> wrote:\n>> >\n>> >         What do you know, it worked. Finished.\n>> >\n>> >         Once again Norway finishes ahead of Sweden. :P\n>> >\n>> >         By the way, I had to translate some of the exact same strings\n>> >         2-3 times.\n>> >         That's something you may want to improve on.\n>> >\n>> >         On 22.10.2011 15:28, Nils Schneider wrote:\n>> >         > I think it's possible to add it yourself. Just click on \"add\n>> >         translation\"\n>> >         >\n>> >         > On 22.10.2011 14:26, Geir Harald Hansen wrote:\n>> >         >> On 22.10.2011 12:51, Nils Schneider wrote:\n>> >         >>>> And is anybody willing to take the job of coordinating\n>> >         translation\n>> >         >>>> efforts, figuring out if Transifex is a good tool to use,\n>> >         and writing\n>> >         >>>> some documentation to make it easy for people to create and\n>> >         submit new\n>> >         >>>> translations?\n>> >         >>>\n>> >         >>> I have exported all .ts to transifex.\n>> >         >>>\n>> >         >>> https://www.transifex.net/projects/p/bitcoin/resource/tx/\n>> >         >>\n>> >         >> If you add Norwegian Bokm\u00e5l, I can do that one. Language code\n>> >         \"nb\".\n>> >         >>\n>> >         >> Regards,\n>> >         >> Geir Harald Hansen\n>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> The demand for IT networking professionals continues to grow, and the\n>> demand for specialized networking skills is growing even more rapidly.\n>> Take a complimentary Learning at Cisco Self-Assessment and learn\n>> about Cisco certifications, training, and career opportunities.\n>> http://p.sf.net/sfu/cisco-dev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111029/584d99af/attachment.html>", "summary": "A fix was made to remove duplicated messages in bitcoinstrings.cpp by re-running the string extraction script in the old Wx UI."}], "thread_summary": {"title": "Help wanted: translations", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "Mike Hearn", "Nils Schneider", "Geir Harald Hansen", "Gavin Andresen", "Martinx - \u30b8\u30a7\u30fc\u30e0\u30ba", "Christian Decker"], "messages_count": 18, "total_messages_chars_count": 35016, "convo_summary": "Bitcoin-Qt version 0.5 Release Candidate 1 is being released with an improved GUI, but new translations are needed as the old ones are obsolete. Luke-Jr requested Coinbaser to be merged for 0.5, but Gavin was unwilling to merge it before the feature freeze. Transifex is being used to coordinate translation efforts for Bitcoin."}}, {"title": "[Bitcoin-development] BitCoin and MinorFs/AppArmor", "thread_messages": [{"author": "Rob Meijer", "date": "2011-10-08T22:51:54", "message_text_only": "I just finished the specs and design for MinorFs2.\nI hope its a good fit for bitcoin this way.\n\nhttp://minorfs.polacanthus.net/wiki/Minorfs2_id_service\n\nI think 'process-Chain granularity' or 'Worker granularity' might be\nsuitable for bitcoin. But possibly a more course granularity level would\nbe required.\n\nhttp://minorfs.polacanthus.net/wiki/Minorfs2_id_service#Executatable_persistente_granularity\n\nIf there are any potential changes any of you could think of for these\nspecs and this design that would make bitcoin and MinorFs2 a better match\nplease let me know.\n\nRob\n\n\nOn Mon, September 5, 2011 13:55, Rob Meijer wrote:\n> On Sat, September 3, 2011 00:05, Nils Schneider wrote:\n>> MinorFs sounds like an interesting concept and but wallet encryption\n>> (already being tested and close to release) is a simpler solution for\n>> end-users.\n>\n> I think the two could be considered complementary. Basicaly the existing\n> MinorFs provides to the pseudo-persistent-process that private members\n> provide to objects. 'Encapsulation of variables that still can be\n> delegated by the object that encapsulates them'. In the MinorFs2 that I\n> just started writing, I try to lower the barrier to using MinorFs by\n> providing facilities to do pick a granularity for 'object' more suitable\n> for most lines of development (where pseudo persistent processes are an\n> unnatural concept).\n>\n> Think of BitCoin running as user certain user as an object and a piece of\n> malware running as the same user as a second object. You can than think of\n> the users home directory as a global variable, while MinorFs gives a\n> private home to both the bitcoin object and the malware object. The\n> bitcoin object can delegate parts of its private state to other objects,\n> but as long as bit-coin doesn't do that, the private state won't be\n> disclosed.\n>\n> Its a good idea to have data on disk encrypted even if you use something\n> like Minorfs, if only to protect against bootable media attacks.\n>\n>> Would MinorFs help securing the wallet on a server, maybe even a\n>> (insecure) VPS?\n>\n> No.\n>\n>> Can it work without changes to Bitcoin? If not, what is the minimal\n>> amount of changes needed?\n>\n> Basically the existing MinorFs will work already with the existing BitCoin\n> due to the fact that Bitcoin seems to extract $HOME from an environment\n> variable, but there are some caveats:\n>\n> * It needs a bash script for starting up bitcoin with $HOME set to the\n>   MinorFs home.\n> * Bitcoin can be started in only one way. That is, bitcoin started from\n> the gnome menu is interpret being a completely differnt bitcoin than\n> bitcoin started from an xterm.\n> * There can only be one bitcoin started and running at once.\n> * All potential malware needs to run with at least an AppArmor profile\n> that keeps it from reading /proc/$PID for pids other than itself.\n>\n> In the new version I'm contemplating, there would I think at least be a\n> minor change to bitcoin needed:\n>\n> * bitcoin would have to use a small library that provides a\n> 'minorfs_getpwuid' function.\n>\n> This function will work like getpwuid on any system without an active\n> MinorFs2, and for any non apparmor confined process.\n> On a system with MinorFs running it should return a passwd structure with\n> the home changed to the MinorFs2 home.\n>\n>> Is there any guarantee it will never corrupt the wallet?\n>\n> All read and write operations will map directly to the underlying\n> file-system, so basically it comes with the same lack of guarantee that\n> any\n> file-system comes with once the underlying media becomes flaky.\n>\n>> What would be the proper way to do backups?\n>\n> Haven't really thought about that, what is considered the currently proper\n> way to keep backups for bitcoin?\n>\n>> On 02.09.2011 22:32, Rob Meijer wrote:\n>>> Given that there was not a single response to my post, I gather there\n>>> is\n>>> no to little interest in an updated MinorFs that could be used by\n>>> bitcoin\n>>> on systems that support AppArmor (Ubuntu and OpenSuse).\n>>>\n>>> Nevertheless I've put down the initial set of specs for a rewrite of\n>>> MinorFs for if anyone would like to comment on them to make a future\n>>> match\n>>> with Bitcoin more likely, I'm open to all sugestions:\n>>>\n>>> http://minorfs.polacanthus.net/wiki/Concepts_for_MinorFs2\n>>>\n>>> On Fri, August 26, 2011 09:48, Rob Meijer wrote:\n>>>> A few years ago I wrote a least authority based set of filesystems\n>>>> named\n>>>> MinorFs that worked closely together with AppArmor (suse/ubuntu) to\n>>>> give '\n>>>> pseudo persistent processes' their own private but decomposable and\n>>>> delegatable piece of filesystem storage:\n>>>>\n>>>> http://www.linuxjournal.com/magazine/minorfs\n>>>> http://www.capibara.com/blog/2011/05/25/taming-mutable-state-for-file-systems/\n>>>>\n>>>> Currently there is only one perfect fit for MinorFs and that's the\n>>>> stack\n>>>> AppArmor/MinorFs/E-language-persistent-application. There are some\n>>>> close\n>>>> fits like running ssh without a passphrase (\n>>>> http://minorfs.polacanthus.net/wiki/Ssh_private_keys_without_passphrase\n>>>> )\n>>>> but these require lots of manual fiddling by the user to get working.\n>>>> The\n>>>> ssh trick would probably work with bitcoin, but as you can see from\n>>>> the\n>>>> link above, it would be rather cumbersome.\n>>>>\n>>>> I am trying to get specs together for rewriting MinorFs (in Python) in\n>>>> a\n>>>> way that would make it easy and natural for application developers\n>>>> that\n>>>> want their application to be able to protect user data (like bitcoin\n>>>> wallets) from mallware running under the same uid as that user.\n>>>>\n>>>> Currently minorfs granularity is hard fixed to that of the 'pseudo\n>>>> persistent process', and that granularity is determined as described\n>>>> in\n>>>> the following link:\n>>>>\n>>>> http://minorfs.polacanthus.net/wiki/Pseudo_persistent_process\n>>>>\n>>>> When using pseudo persistent processes, you basically end up with\n>>>> file-system storage that follows almost all of the modeling principles\n>>>> of\n>>>> the object capability model. This is great when designing a least\n>>>> authority program from scratch and writing it in the (object\n>>>> capability)\n>>>> e-language using its persistence facilities.\n>>>>\n>>>> Given however that I don't expect bitcoin, openssh, chrome, firefox,\n>>>> or\n>>>> any other application that would benefit from what MinorFs provides to\n>>>> be\n>>>> rewritten in E, it seems like the next version of MinorFs should give\n>>>> up\n>>>> on the purity of its least authority model, and take an approach that\n>>>> better suits common development languages and practices.\n>>>>\n>>>> With bitcoin being a project that could benefit most from what MinorFs\n>>>> has\n>>>> to offer, I would like to ask bitcoin developers to think about what\n>>>> attributes from the current granularity level (pseudo persistent\n>>>> process)\n>>>> should be kept, what attributes should be dropped, and what properties\n>>>> should be added to arrive at an 'id' that is the best fit for\n>>>> granularity\n>>>> of persistent private storage for bitcoin.\n>>>>\n>>>> I really want to accommodate bitcoin developer needs in this, so all\n>>>> input\n>>>> that helps me help you guys to get the next MinorFs version to\n>>>> accommodate\n>>>> your needs to a level that code to use MinorFs where available can be\n>>>> added to bitcoin, would be extremely welcome.\n>>>>\n>>>> Let me know what you think,\n>>>>\n>>>> Rob\n>>>>\n>>>>\n>>>> ------------------------------------------------------------------------------\n>>>> EMC VNX: the world's simplest storage, starting under $10K\n>>>> The only unified storage solution that offers unified management\n>>>> Up to 160% more powerful than alternatives and 25% more efficient.\n>>>> Guaranteed. http://p.sf.net/sfu/emc-vnx-dev2dev\n>>>> _______________________________________________\n>>>> Bitcoin-development mailing list\n>>>> Bitcoin-development at lists.sourceforge.net\n>>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>>\n>>>>\n>>>\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> Special Offer -- Download ArcSight Logger for FREE!\n>>> Finally, a world-class log management solution at an even better\n>>> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n>>> download Logger. Secure your free ArcSight Logger TODAY!\n>>> http://p.sf.net/sfu/arcsisghtdev2dev\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Special Offer -- Download ArcSight Logger for FREE!\n>> Finally, a world-class log management solution at an even better\n>> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n>> download Logger. Secure your free ArcSight Logger TODAY!\n>> http://p.sf.net/sfu/arcsisghtdev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Special Offer -- Download ArcSight Logger for FREE!\n> Finally, a world-class log management solution at an even better\n> price-free! And you'll get a free \"Love Thy Logs\" t-shirt when you\n> download Logger. Secure your free ArcSight Logger TODAY!\n> http://p.sf.net/sfu/arcsisghtdev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>", "summary": "Rob Meijer has designed MinorFs2, which could be a good fit for Bitcoin, and is open to suggestions to make it a better match."}], "thread_summary": {"title": "BitCoin and MinorFs/AppArmor", "categories": ["Bitcoin-development"], "authors": ["Rob Meijer"], "messages_count": 1, "total_messages_chars_count": 9764}}, {"title": "[Bitcoin-development] New Project Discussion", "thread_messages": [{"author": "Brian McQueen", "date": "2011-10-09T15:58:45", "message_text_only": "I have a proposal and design for a new project built on bitcoin.\nWhere should I post my initial proposal and design to start a\ndiscussion?  Its of interest to bitcoin folks and a wide range of\nothers.  Its totally cool and a first-of-its-kind and I want to start\ndiscussing it.  I'd like to discuss it on this list if its\nappropriate.  Its entirely built on bitcoind, so I need your comments.\n\nB\n\n-- \nMake a Small Loan, Make a Big Difference - Check out Kiva.org to Learn How!", "summary": "Proposal for a new project built on bitcoin seeks discussion. Looking for appropriate platform to share design and receive feedback."}], "thread_summary": {"title": "New Project Discussion", "categories": ["Bitcoin-development"], "authors": ["Brian McQueen"], "messages_count": 1, "total_messages_chars_count": 476}}, {"title": "[Bitcoin-development] Please help test 0.5 release candidate 1", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-10-10T16:32:41", "message_text_only": "Reposting from the forums:\n  https://bitcointalk.org/index.php?topic=47586\n\nI just tagged the git tree \"v0.5.0rc1\". If you are able, please\ncompile and help test.\n\nSee the INSTALL file at the top of the source tree for instructions on\ncompiling. Binary releases for at least unix and mac should be\navailable in the next day or two (there is a show-stopper bug on\nWindows, and we could use help from people familiar with\ncross-compiling using mingw to update the Windows build process).\n\nMajor bugs you should be aware of:\n\nWallet does not relock on Win32\n\nMajor changes from version 0.4:\n\nSwitched from wxWidgets for the GUI to Qt, using Wladimir J. van der\nLaan's bitcoin-qt. Why? We didn't have any wxWidgets programmers\ncontributing fixes or improvements.\n\nNew JSON-RPC commands:\n\ngetmemorypool : alternative to 'getwork' that provides everything\nneeded to construct a block with a custom generation transaction.\nlistsinceblock : Get all transactions in blocks since block [blockid]\nsignmessage/verifymessage : sign/verify a message with a wallet\npublic/private keypair\n\nDeprecated JSON-RPC features:\n'midstate' data item from getwork requests\n\nDeprecated JSON-RPC commands that have been REMOVED:\nsetlabel\ngetlabel\ngetaddressesbylabel\ngetamountreceived\ngetallreceived\ngetreceivedbylabel\nlistreceivedbylabel\n\nRun: git shortlog --no-merges v0.4.0..\n... to get a complete list of changes, and thanks to everybody who is\ncontributing!\n\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin version 0.5.0rc1 released with major changes including switch to Qt for GUI, new JSON-RPC commands, and deprecated features. Testing and feedback requested."}, {"author": "Carlos Alberto Lopez Perez", "date": "2011-10-10T21:54:22", "message_text_only": "On 10/10/11 18:32, Gavin Andresen wrote:\n> I just tagged the git tree \"v0.5.0rc1\". If you are able, please\n> compile and help test.\n> \nCompiled on Debian and running it :) I tested to encrypt my wallet\n(coming from v0.3) and changed the password a couple of times without\nproblems.\n\n> Switched from wxWidgets for the GUI to Qt, using Wladimir J. van der\n> Laan's bitcoin-qt. Why? We didn't have any wxWidgets programmers\n> contributing fixes or improvements\n\nThe new GUI looks nicer and more stylish than previous one. I am also\nliking a lot the notifications and the system tray icon on the status bar.\n\n\nGood work!\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 262 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111010/9ff65249/attachment.sig>", "summary": "Bitcoin version 0.5.0rc1 has been released, featuring a new GUI using Qt instead of wxWidgets, and users are encouraged to test it."}, {"author": "Luke-Jr", "date": "2011-10-14T07:10:26", "message_text_only": "Since you guys probably won't notice otherwise...\nGot some 0.5 binaries here:\nhttps://bitcointalk.org/index.php?topic=47586.msg573675#msg573675", "summary": "0.5 binaries available at Bitcointalk for download."}], "thread_summary": {"title": "Please help test 0.5 release candidate 1", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Carlos Alberto Lopez Perez", "Gavin Andresen"], "messages_count": 3, "total_messages_chars_count": 2503, "convo_summary": "Bitcoin version 0.5.0rc1 has been released with significant changes, including a new GUI using Qt, new JSON-RPC commands, and deprecated features. Users are encouraged to test and provide feedback. The 0.5 binaries are available for download at Bitcointalk."}}, {"title": "[Bitcoin-development]  Please help test 0.4.1 release candidate 1", "thread_messages": [{"author": "Luke-Jr", "date": "2011-10-10T18:30:45", "message_text_only": "Reposting from the forums:\n  https://bitcointalk.org/index.php?topic=47624\n\nFollowing Gavin tagging 0.5rc1, I have tagged the stable git tree \"v0.4.1rc1\". \nIf you are able, please compile and help test.\n\nSee the doc/build-*.txt files in the source tree for instructions on \ncompiling. Binary releases for at least unix and mac will be available only if \nsomeone steps up to the task.\n\nThere are no major changes from version 0.4.0, only bugfixes.\n\nNone of the features from 0.5 are supported, only those in 0.4.\n\nRun: git shortlog --no-merges v0.4.0..\n... to get a complete list of changes, and thanks to everybody who is \ncontributing!", "summary": "Bitcoin version 0.4.1rc1 has been tagged for stable git tree with bug fixes, no major changes, and only supports features from version 0.4."}], "thread_summary": {"title": "Please help test 0.4.1 release candidate 1", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr"], "messages_count": 1, "total_messages_chars_count": 636}}, {"title": "[Bitcoin-development] State of Bitcoin Development: October Brain Dump", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-10-13T13:32:48", "message_text_only": "In the spirit of open communication, I thought I'd try doing a monthly\n\"what's up\" with bitcoin development. Here's what's on my radar:\n\n\u2022 Wladimir agreed to help pull patches, especially Qt-GUI-related\npatches, and is now part of the core dev team (Wladimir did the bulk\nof the work on the new Qt-based GUI).\n\n\u2022 Matt and Wladimir will be working on 0.5 release candidate 1\nbinaries and an updated release process to either ship the Qt\nlibraries or statically link against Qt; the goal is to have them\nready this weekend.\n\n\u2022 Network stability and wallet security are still my top concerns;\nstart-up experience for new users (the long wait to download the block\nchain) is next on my list.\n\n\u2022 Amir's Bitcoin Improvement Process proposal hasn't been getting the\nattention it deserves; I'm just as guilty as anybody, I suppose we're\nall very busy. Helping improve it and writing some BIPs is high on my\npriority list.\n\n\u2022 I've setup a public-write-only\nbitcoin-security at lists.sourceforge.net mailing list to be used as an\nofficial way to report and then discuss potential security or\ndenial-of-service vulnerabilities in the bitcoin protocol, and invited\nthe following people to participate:  Amir Taaki, Mike Hearn, Stefan\nThomas, Nils Schneider, Pieter Wuille, Jeff Garzi and myself.\n\n\nStuff I've been working on or plan to be working on soon; let me know\nif you are able to take on any of these, there are too many things on\nmy TODO list:\n\n\u2022 Implementing/experimenting: multi-signature transactions and using\nOP_EVAL and a new type of bitcoin address to create 'always secure' or\n'always backed up' wallets.\n\n\u2022 Write BIPs proposing:  OP_EVAL.  'standard' multi-signature\ntransactions. Maybe an informational BIP proposing how to roll out\nupgrades in general.\n\n\u2022 Denial-of-service detection/prevention (see the DoSorphans pull\nrequest). It would be really nice if somebody with experience\nsimulating network behavior would take this over...\n\n\u2022 Cross-platform testing infrastructure. I've made good progress on a\nTwisted-based tool, but still have a lot to do.\n\n\u2022 Tighten up block-time rules to fix the potential \"timejacking\" attack.\n\n\u2022 Work on 'discouraging' blocks/transactions to punish\nbad-for-the-common-good-but-good-for-me behaviors from miners or\nnodes.\n\n\u2022 Get back to work on headers-only-for-initial-download, so initial\nstartup experience is better for people.\n\n\nOngoing longer-term:\n\n\u2022\u00a0Rethink/rework transaction fees; give both miners and clients more\nflexibility to create a market instead of magic hard-coded constants.\n\n\u2022 Organization; many things would be much easier if there was a\nnon-profit organization like the Tor Project to pay core developers,\ntesters, a PR person, pay for the Jenkins nightly build server, etc\netc etc.\n\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin development updates: Wladimir joins core dev team, focus on network stability, security, and start-up experience. Plans for multi-signature transactions and transaction fees."}, {"author": "Luke-Jr", "date": "2011-10-13T13:38:32", "message_text_only": "On Thursday, October 13, 2011 9:32:48 AM Gavin Andresen wrote:\n> \u2022 Tighten up block-time rules to fix the potential \"timejacking\" attack.\n\nOnce again, this does not fix anything (they're already strict enough for the \n2-week window), and just creates new problems.\n\n> \u2022 Work on 'discouraging' blocks/transactions to punish\n> bad-for-the-common-good-but-good-for-me behaviors from miners or\n> nodes.\n\nFlawed concept. Only even potentially useful for extreme cases (ie, a miner \nintentionally making lots of 1 MB blocks of junk).", "summary": "Proposals to tighten block-time rules and discourage bad behavior from miners or nodes are flawed and may create new problems."}], "thread_summary": {"title": "State of Bitcoin Development: October Brain Dump", "categories": ["Bitcoin-development"], "authors": ["Luke-Jr", "Gavin Andresen"], "messages_count": 2, "total_messages_chars_count": 3296, "convo_summary": "Gavin Andresen shared updates on Bitcoin development, including Wladimir joining the core dev team, focus on network stability, security, and start-up experience. Plans for multi-signature transactions and transaction fees were discussed. However, Luke-Jr expressed concerns about proposals to tighten block-time rules and discourage bad behavior from miners or nodes, stating they may create new problems."}}, {"title": "[Bitcoin-development] Cool New Bitcoin Proj", "thread_messages": [{"author": "Brian McQueen", "date": "2011-10-16T14:01:46", "message_text_only": "Its cool, with both cryptography and bitcoin, its also an internet first.\nHere's the idea: file's that go away and then come back later.\nRealistically, the first version of this project needs to be files\nthat get encrypted, but can't be decrypted until a particular future\ndate - time-released cryptography.\n\nHere's the simple demonstration of the concept, which is known to be\ninadequate, but it demonstrates the time-released cryptography\nconcept.  The true proposed solution is a P2P architecture shown\nlater, but first this simple model demonstrates the idea.  Cryptoclock\nprovides a list of unique public keys on a calendar, one for each day\nout into the future.  Each day the hosting site releases the\nassociated private key for the current day, allowing all files\nencrypted with the associated public key to be decrypted.  In effect,\nfiles would be popping open each day when the key of the day is\nreleased.  Maybe wikileaks documents pop open, or stashed bitcoin keys\nso the stashed money can be retrieved.\n\nSimple Public Cryptoclock Model:\n\n1) Choose the public key for Jan 12, 2012\n2) Encrypt your file with that public key\n3) Erase your clear copy of file\n\nAt this point the file is locked up and nobody can get at it.  If\npeople ask for the data, you can't get it.  Ideally nobody can.  Its\nnot available.\n\n4) Wait until Jan, 12, 2012\n5) Get the key of the day from the cryptoclock - maybe it goes out via twitter\n6) Unlock your file - now you've got your data back\n\nThere are problems with this, that can be discussed separately, but\nits known to be inadequate. At a minimum, its not cool that the\nprivate key is delivered to the world, because the file should not pop\nopen to everybody who has a copy - just for the owner.  Also, the\nhosting site has a bad problem with securing the private keys, and\nactually must be able to deny having them at all, in order to be free\nof persecution and to be trusted.  The keys must be gone - they must\nbe unavailable, not just on some USB stick in a box.\n\nP2P Solution:\n\nFirst stab at a general solution.  This solves two problems, the\nsecret key will return automatically to the file owner, and the secret\nkey will truly be unavailable.\n\n* Key Sharding\n\nAssume P2P network of special cryptoclock nodes built on bitcoind, and\nthe transactions have to be of the contract variety, to eliminate the\nrisk of distributing the key.  Shards will NOT be put on the block\nchain but will be distributed via http.  Shard holders will be\ncompensated for holding the shards when the key is rebuilt.\n\n1) User1 has a file to hide.  User1 puts it into node1 of the cryptoclock.\n2) Node1 produces a public/private keypair (pb1, pv1)\n3) Node1 encrypts the file with public key 1 (pb1) and wipes out the clear file\n4) Node1 shards private key1 (pk1)\n5) Node1 encrypts and distributes the shards to the P2P network as follows\n5.1) Node1 sends a small bitcoin deposit txn to Node2 with a URL\nmessage in the script and a random number (rn1)\n5.2) Node2 issues a GET to the URL with the signed rn1 to node1\n5.4) Node1 receives the GET and verifies the signature on rn1 and\nreturns the shard and a 200 to node2\n\nThis mechanism will distribute the private key in pieces to any number\nof nodes, known only by their bitcoin addresses.  Repeat this for each\nshard of the private key.  The number of shards and copies is\nproportional to the security of the storage - the more you pay, the\nmore scattered is the key.  There should be many shards, and each\nshard should have many copies.\n\nThe transaction will have have to go from node1 to node2, triggering\nthe retrieval GET, and it must be done in a deposit style so if the\nnode is not available the bc will be returned as in the case of the\nDeposit example on the Contracts wiki page.\n\n* Rebuilding the key\n\nA future-dated transaction needs to be created to get the keys to\nreturn to the key creator on the target date, and they must be crafted\nin such a way that the shard-holders are paid at the time the keyshard\nis reclaimed, producing an incentive to stay online and keep the\nkeyshards in the network.\n\nThe general model (bitcoin txn and http request) will also make the\nkey return and reassemble itself in the owners cryptoclock client on\nthe future date, if the future transactions are triggered reliably. A\nfuture transaction must be made right at the start, with a locktime\nset to the target date.  On the target date the shard holder's\nclient's transaction script is executed, which will trigger node2 to\ntake action on the initial deposit transaction.  Node2 will have to\nnotify node1 that its ready for a GET, and node1 will issue a GET to\nreclaim the keyshard.   Another small deposit-style transaction to\nnode 1 will do this perfectly, in the same style as the first deposit\ntransaction.\n\n* Cool Features\n\n 1) Participants are paid to participate and its a natural fit - its built-in.\n 2) The key returns automatically the file owner on the desired date\n- it reassembles itself.\n 3) Pay more for more surety - more shards for more money.\n\n* Peer Discovery\n\nI think keys should be distributed to bitcoin addresses, which in\ngeneral are not available to the nodes, so peer discovery needs to be\nfleshed out.\n\nThis needs to be fleshed out considerably.  A peer discovery mechanism\nmust be produced.  Bitcoin addresses could be pulled from the block\nchain, or there can be an irc channel for address discovery, or users\ncould establish their own trusted network of associates.\n\n* Block Chain Usage\n\nThis model uses bitcoin in a legitimate way, using real bitcoin\ntransactions and putting the bitcoin engine to work and leveraging its\nfinancial engine to establish a reasonable expense/reward system.  The\nblock chain has only one extra, short message for the  initial\ntransaction.  All application data is transacted outside the block\nchain and stored outside the block chain.", "summary": "A time-released cryptography concept is proposed where files are encrypted and can only be decrypted on a specific future date, using a P2P architecture with key sharding and compensation for shard holders. The key returns automatically to the file owner on the desired date. Bitcoin is used in a legitimate way, with real bitcoin transactions and an expense/reward system."}], "thread_summary": {"title": "Cool New Bitcoin Proj", "categories": ["Bitcoin-development"], "authors": ["Brian McQueen"], "messages_count": 1, "total_messages_chars_count": 5859}}, {"title": "[Bitcoin-development] BIP process", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-10-18T19:17:43", "message_text_only": "Amir started the \"get more formal about changes to bitcoin\" ball\nrolling by creating BIP 0001, starting from the Python \"PEP\" /\nBitTorrent \"BEP\" processes:\n  https://en.bitcoin.it/w/index.php?title=BIP_0001\n\nThe idea is to use BIPs for changes that may or will affect every\nbitcoin implementation (not to use them for proposed changes to one\nparticular implementation).\n\nI'd like to propose some minor changes to the process:\n\n\u2022 I propose that BIPs be wiki pages, with a social convention that the\nAuthor gets final word if any editing wars break out.\n\n\u2022 If he's willing, I propose that Amir take the role of BIP editor.\n\n\u2022 I think bitcoin is still too small to have a specialized\n\"bitcoin-ideas\" mailing list; I propose that new potential BIPs be\ndiscussed either here or on the bitcoin-dev mailing list.\n\nWhat do y'all think?\n\n-- \n--\nGavin Andresen", "summary": "BIP 0001 was created by Amir to formalize changes to Bitcoin. Proposes minor changes to the process, including using wiki pages and Amir as BIP editor."}, {"author": "Nils Schneider", "date": "2011-10-18T21:26:22", "message_text_only": "> \u2022 I propose that BIPs be wiki pages, with a social convention that the\n> Author gets final word if any editing wars break out.\n\nThat's a good idea. What about using GitHub's Wiki feature for BIPs?\nThey support MarkDown which is easy to read in text editors so we could\nsomeday create a repo with all finalized BIPs. That's a lot easier than\nimporting a mediawiki dump. The last time en.bitcoin.it went down I\ntried to setup a static mirror and that was nearly impossible without a\nfull LAMP stack. Also, BIPs should only contain images when absolutely\nnecessary.\n\n> \u2022 If he's willing, I propose that Amir take the role of BIP editor.\n\nack\n\n> \u2022 I think bitcoin is still too small to have a specialized\n> \"bitcoin-ideas\" mailing list; I propose that new potential BIPs be\n> discussed either here or on the bitcoin-dev mailing list.\n\nack", "summary": "Proposal to use GitHub's Wiki feature for Bitcoin Improvement Proposals (BIPs) and appoint Amir as BIP editor. Discussions to be held on bitcoin-dev mailing list."}, {"author": "Alex Waters", "date": "2011-10-20T05:02:17", "message_text_only": ">\n>\n> \u2022 I propose that BIPs be wiki pages, with a social convention that the\n> Author gets final word if any editing wars break out.\n\n\nACK\n\n>\n\n\u2022 If he's willing, I propose that Amir take the role of BIP editor.\n>\n> ACK\n\n\n> \u2022 I think bitcoin is still too small to have a specialized\n> \"bitcoin-ideas\" mailing list; I propose that new potential BIPs be\n> discussed either here or on the bitcoin-dev mailing list.\n>\n\nACK\n\nAs for what Nils mentioned on using GitHub's Wiki feature, Gavin seems to\nhave started a few proposals at\nhttps://github.com/gavinandresen/bitcoin-git/wiki. I think this is the right\ndirection to head in, and a composite list of similar proposals could be\nmaintained on their own repository (to maintain separation from the core\nBitcoin repo.)\n\n-Alex\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111020/2efa61f4/attachment.html>", "summary": "Proposal to use wiki pages for Bitcoin Improvement Proposals (BIPs) with author having final word in editing wars. Amir suggested as BIP editor. Discussion on potential BIPs to be held on bitcoin-dev mailing list. Gavin started proposals on GitHub's Wiki feature."}, {"author": "Christian Decker", "date": "2011-10-20T11:27:08", "message_text_only": "On Thu, Oct 20, 2011 at 7:02 AM, Alex Waters <ampedal at gmail.com> wrote:\n\n>\n>> \u2022 I propose that BIPs be wiki pages, with a social convention that the\n>> Author gets final word if any editing wars break out.\n>\n>\n> ACK\n>\nDoes it have to be wiki pages if we're going through an editorial process\nanyway, and there will be few who can actually edit the pages directly? I'd\ngo for simple HTML documents in a repository.\n\n>\n>\n> \u2022 If he's willing, I propose that Amir take the role of BIP editor.\n>>\n>> ACK\n>\nACK\n\n>\n>\n>> \u2022 I think bitcoin is still too small to have a specialized\n>> \"bitcoin-ideas\" mailing list; I propose that new potential BIPs be\n>> discussed either here or on the bitcoin-dev mailing list.\n>>\n>\n> ACK\n>\nDefinitely. I don't think too many requests will come right away, and by\nposting them here we make sure that the most knowledgeable people are there\nto check and improve what might eventually end up in the clients.\n\n>\n> As for what Nils mentioned on using GitHub's Wiki feature, Gavin seems to\n> have started a few proposals at\n> https://github.com/gavinandresen/bitcoin-git/wiki. I think this is the\n> right direction to head in, and a composite list of similar proposals could\n> be maintained on their own repository (to maintain separation from the core\n> Bitcoin repo.)\n>\n> -Alex\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Ciosco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111020/8c338641/attachment.html>", "summary": "Alex Waters proposes that BIPs be wiki pages with the author having the final word, Amir to take the role of BIP editor, and new potential BIPs to be discussed on the bitcoin-dev mailing list."}], "thread_summary": {"title": "BIP process", "categories": ["Bitcoin-development"], "authors": ["Nils Schneider", "Christian Decker", "Gavin Andresen", "Alex Waters"], "messages_count": 4, "total_messages_chars_count": 4726, "convo_summary": "The group discussed proposals for Bitcoin Improvement Proposals (BIPs), including using wiki pages and appointing Amir as BIP editor. Discussions will be held on the bitcoin-dev mailing list. Gavin started proposals on GitHub's Wiki feature. The author would have the final word in editing wars for BIPs."}}, {"title": "[Bitcoin-development] Fwd: bitcoin scope issue in main.cpp", "thread_messages": [{"author": "John Smith", "date": "2011-10-23T09:56:00", "message_text_only": "FYI\nIt's in a disabled feature (replacement), so I'm not sure how important this\nis, but it doesn't look good.\n\n---------- Forwarded message ----------\nFrom: Dean Gores <dmgores at gmail.com>\nDate: Sun, Oct 23, 2011 at 11:15 AM\nSubject: bitcoin scope issue in main.cpp\nTo: laanwj at gmail.com\n\n\nYou have \"i\" and \"output\" declared in the same scope in \"main.cpp\",\nAcceptToMemoryPool.  Below is the offending code.\n\n           for (int i = 0; i < vin.size(); i++)\n           {\n               COutPoint outpoint = vin[i].prevout;\n               if (!mapNextTx.count(outpoint) ||\nmapNextTx[outpoint].ptx != ptxOld)\n                   return false;\n           }\n\n\nCheers,\nDean Gores\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111023/ef8e48b1/attachment.html>", "summary": "A scope issue in the Bitcoin code was reported by Dean Gores, but it is in a disabled feature and may not be significant."}, {"author": "theymos", "date": "2011-10-23T20:51:49", "message_text_only": "It's legal for a scope to define variables with names that conflict with\nthe names of variables in higher-level scopes.", "summary": "Scopes can legally define variables with conflicting names to those in higher-level scopes."}, {"author": "John Smith", "date": "2011-10-24T05:02:30", "message_text_only": "Yes, I know that. It compiles.\n\nIf we pulled all the 'This is legal in C++' tricks in the bitcoin source it\nwould be even less maintainable and readable than now. But whatever...\n\nJS\n\nOn Sun, Oct 23, 2011 at 10:51 PM, theymos <theymos at mm.st> wrote:\n\n> It's legal for a scope to define variables with names that conflict with\n> the names of variables in higher-level scopes.\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/4a0e7379/attachment.html>", "summary": "The writer acknowledges that using all the legal tricks in Bitcoin's C++ source code would make it less maintainable and readable."}, {"author": "Amir Taaki", "date": "2011-10-24T14:31:15", "message_text_only": "Hahaha you mean like unitialised variables, inheriting from containers with non-virtual dtors (CScript) and delicious copy pasta coding (PushMessage, bignum and serialize stuff).\n\n\nNo need to worry about that :)\n\n\n\n________________________________\nFrom: John Smith <witchspace81 at gmail.com>\nTo: theymos <theymos at mm.st>\nCc: bitcoin-development at lists.sourceforge.net\nSent: Monday, October 24, 2011 6:02 AM\nSubject: Re: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp\n\n\n\nYes, I know that. It compiles.\n\nIf we pulled all the 'This is legal in C++' tricks in the bitcoin source it would be even less maintainable and readable than now. But whatever...\n\nJS\n\n\nOn Sun, Oct 23, 2011 at 10:51 PM, theymos <theymos at mm.st> wrote:\n\nIt's legal for a scope to define variables with names that conflict with\n>the names of variables in higher-level scopes.\n>\n>------------------------------------------------------------------------------\n>The demand for IT networking professionals continues to grow, and the\n>demand for specialized networking skills is growing even more rapidly.\n>Take a complimentary Learning at Cisco Self-Assessment and learn\n>about Cisco certifications, training, and career opportunities.\n>http://p.sf.net/sfu/cisco-dev2dev\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n------------------------------------------------------------------------------\nThe demand for IT networking professionals continues to grow, and the\ndemand for specialized networking skills is growing even more rapidly.\nTake a complimentary Learning at Cisco Self-Assessment and learn \nabout Cisco certifications, training, and career opportunities. \nhttp://p.sf.net/sfu/cisco-dev2dev\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/e435fc5f/attachment.html>", "summary": "A developer discusses the maintainability and readability of the Bitcoin source code, mentioning potential issues with conflicting variable names and other coding practices."}, {"author": "John Smith", "date": "2011-10-24T18:11:17", "message_text_only": "Yes, you're right, there is a lot of code is in the \"fun with knives\"\ncategory.\n\nJS\n\nOn Mon, Oct 24, 2011 at 4:31 PM, Amir Taaki <zgenjix at yahoo.com> wrote:\n\n> Hahaha you mean like unitialised variables, inheriting from containers with\n> non-virtual dtors (CScript) and delicious copy pasta coding (PushMessage,\n> bignum and serialize stuff).\n>\n> No need to worry about that :)\n>\n> ------------------------------\n> *From:* John Smith <witchspace81 at gmail.com>\n> *To:* theymos <theymos at mm.st>\n> *Cc:* bitcoin-development at lists.sourceforge.net\n> *Sent:* Monday, October 24, 2011 6:02 AM\n> *Subject:* Re: [Bitcoin-development] Fwd: bitcoin scope issue in main.cpp\n>\n>\n> Yes, I know that. It compiles.\n>\n> If we pulled all the 'This is legal in C++' tricks in the bitcoin source it\n> would be even less maintainable and readable than now. But whatever...\n>\n> JS\n>\n> On Sun, Oct 23, 2011 at 10:51 PM, theymos <theymos at mm.st> wrote:\n>\n> It's legal for a scope to define variables with names that conflict with\n> the names of variables in higher-level scopes.\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/940b579a/attachment.html>", "summary": "A discussion about code quality in Bitcoin development, with one participant acknowledging the presence of \"fun with knives\" code."}], "thread_summary": {"title": "Fwd: bitcoin scope issue in main.cpp", "categories": ["Bitcoin-development"], "authors": ["John Smith", "theymos", "Amir Taaki"], "messages_count": 5, "total_messages_chars_count": 7401, "convo_summary": "The Bitcoin code has a scope issue in a disabled feature, but it may not be significant. Scopes can legally define variables with conflicting names. Using all legal tricks in the code would make it less maintainable and readable. A developer discusses the maintainability and readability of the code, mentioning potential issues with conflicting variable names. There is a discussion about code quality in Bitcoin development, with one participant acknowledging the presence of \"fun with knives\" code."}}, {"title": "[Bitcoin-development] Determine input addresses of a transaction", "thread_messages": [{"author": "Jan Vornberger", "date": "2011-10-24T08:29:57", "message_text_only": "Hi there!\n\nAs part of my green address endeavor, I'm currently trying to extend the\n'gettransaction' call to include an extra field \"inputaddresses\" which\nshould return a list of the Bitcoin addresses associated with the inputs\nof the transaction.\n\nI understand that this is not generally possible, because of the different\npossible structures enabled through the scripting language. But it would\nbe fine, if this only worked for 'regular' transactions.\n\nSo my first shot at this is to go through the inputs of a transaction and\nsee if the scriptSig field has only two opcodes. If that is the case, I\nassume that it is of the structure <sig> <pubKey> and calculate the\nBitcoin address from <pubKey>. The patch for this is here:\n\nhttps://github.com/javgh/bitcoin/compare/vps_wheezy...showinputaddresses\n\nBut then I started to wonder if this is safe. Can this be tricked somehow?\nWould it be possible to create a valid transaction which has an input that\nhas only two opcodes but with an arbitrary pubKey at the second position?\nCould someone who has a better grasp on the scripting capabilities comment\non this?\n\nOr alternatively: should I determine the input addresses of a transaction\nin a different way? if so, how?\n\nRegards!\nJan", "summary": "Jan is trying to add an \"inputaddresses\" field to the \"gettransaction\" call in Bitcoin, but is unsure if his method is safe and seeks advice."}, {"author": "Pieter Wuille", "date": "2011-10-24T11:09:56", "message_text_only": "On Mon, Oct 24, 2011 at 10:29:57AM +0200, Jan Vornberger wrote:\n> Hi there!\n> \n> As part of my green address endeavor, I'm currently trying to extend the\n> 'gettransaction' call to include an extra field \"inputaddresses\" which\n> should return a list of the Bitcoin addresses associated with the inputs\n> of the transaction.\n\nBitcoin transactions do not have input addresses - they optionally have addresses\nthe input coins were last sent to. I understand that being able to have a\n'from' address on a transaction is useful in certain cases, but it encourages\nusing such 'from' addresses to identify transactions - which is imho the wrong\nway to go.\n\nAs far as your green transactions idea is concerned, maybe we could provide an interface\nto mark certain addresses as 'trusted', and have an RPC call to request all incoming\ntransaction that originate from trusted sources?\n\n-- \nPieter", "summary": "A developer is trying to extend the 'gettransaction' call to include an extra field \"inputaddresses\" in Bitcoin transactions, but it is not encouraged."}, {"author": "Jan Vornberger", "date": "2011-10-27T14:12:19", "message_text_only": "Am Mo, 24.10.2011, 13:09, schrieb Pieter Wuille:\n> As far as your green transactions idea is concerned, maybe we could\n> provide an interface\n> to mark certain addresses as 'trusted', and have an RPC call to request\n> all incoming\n> transaction that originate from trusted sources?\n\nThat would be fine as well. Although I would prefer if one could\nquery for a specific transaction id, whether it comes from a trusted\nsource and also from which trusted source, as you might want to\nkeep track of the amount of unconfirmed funds you are currently\naccepting from a specific source (or the Bitcoin daemon could\nkeep track of that as well, either way is fine).\n\nThis sounds a little too involved though, for my level of familiarity\nwith the Bitcoin source code and C++, to implement myself.\n\nRegards,\nJan", "summary": "Jan suggests implementing an interface to mark certain addresses as \"trusted\" and an RPC call to request incoming transactions from trusted sources. He also proposes tracking unconfirmed funds from specific sources."}, {"author": "Gavin Andresen", "date": "2011-10-24T14:55:14", "message_text_only": "> So my first shot at this is to go through the inputs of a transaction and\n> see if the scriptSig field has only two opcodes. If that is the case, I\n> assume that it is of the structure <sig> <pubKey> and calculate the\n> Bitcoin address from <pubKey>.\n> But then I started to wonder if this is safe. Can this be tricked somehow?\n\nSure. There are lots of non-standard scriptPubKey scripts that will\nvalidate if given <sig> <pubKey> as input:  a simple OP_NOP would work\n(do nothing, then check the top value on the stack and validate if it\nis not zero-- and <pubKey> is not zero).\n\nIf you assume the client has all previous transactions, then you could\nget the transaction input's prevout (from the memory pool or disk) and\nthen ExtractAddress() from it. That is probably a bad idea for\nlisttransactions, since fetching all the previous inputs from disk\njust so you can check to see if they're 'green' violates the \"a\nfeature shouldn't cost anything if it is not being used\" design\nprinciple.\n\nYou know, just thinking out loud...\n\nGreen addresses could be implemented as a second signature in the\nscriptSig.  You'd have to hack your bitcoin client, but you could\ngenerate a transaction that had <greensig> <sig> <pubKey>  ... as the\ninput instead of <sig> <pubKey>.\n\nThe <greensig> will be ignored by old clients.  The transactions is\nstill considered 'standard'.  But you could teach bitcoin to look for\n<greensig> signatures in wallet transactions...\n\n-- \n--\nGavin Andresen", "summary": "The author suggests checking the scriptSig field of a transaction to calculate the Bitcoin address, but questions its safety due to non-standard scriptPubKey scripts."}, {"author": "Mike Hearn", "date": "2011-10-24T16:25:41", "message_text_only": ">\n> You know, just thinking out loud...\n>\n> Green addresses could be implemented as a second signature in the\n> scriptSig.\n\n\nI think this would solve one of the other issues I raised about the green\naddress idea .... you can have some kind of trust aggregator sign the\ntransactions. Merchants like MtGox that send would create a transaction,\nexport it, upload it to the trusted authority which can just check IP\naddress or something to verify it's really coming from MtGox, then sign it\nand broadcast it.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/3b6aaa06/attachment.html>", "summary": "Proposal to implement green addresses as a second signature in scriptSig, allowing a trusted authority to sign transactions for merchants like MtGox."}, {"author": "Simon Barber", "date": "2011-10-24T18:52:17", "message_text_only": "PKI would avoid the need for the trust aggregator to be consulted for \neach transaction. Obviously checking for revocation would be essential. \nThe CA cert can state what kind of guarantee is available.\n\nSimon\n\n\nOn 10/24/2011 09:25 AM, Mike Hearn wrote:\n>     You know, just thinking out loud...\n>\n>     Green addresses could be implemented as a second signature in the\n>     scriptSig.\n>\n>\n> I think this would solve one of the other issues I raised about the\n> green address idea .... you can have some kind of trust aggregator sign\n> the transactions. Merchants like MtGox that send would create a\n> transaction, export it, upload it to the trusted authority which can\n> just check IP address or something to verify it's really coming from\n> MtGox, then sign it and broadcast it.\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n>\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "PKI could eliminate the need for a trust aggregator to be consulted for each transaction, with CA cert stating the available guarantee."}, {"author": "Michael Hendricks", "date": "2011-10-24T17:14:09", "message_text_only": "On Mon, Oct 24, 2011 at 8:55 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> If you assume the client has all previous transactions, then you could\n> get the transaction input's prevout (from the memory pool or disk) and\n> then ExtractAddress() from it. That is probably a bad idea for\n> listtransactions, since fetching all the previous inputs from disk\n> just so you can check to see if they're 'green' violates the \"a\n> feature shouldn't cost anything if it is not being used\" design\n> principle.\n>\n\nAre there current users of gettransaction for whom the performance penalty\nwould be problematic?  If so, perhaps gettransaction could take an optional\nsecond argument includeinputaddresses which defaults to false.\n\n-- \nMichael\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111024/376c13b2/attachment.html>", "summary": "Gavin Andresen suggests a potential issue with the \"listtransactions\" feature and proposes a solution to avoid performance penalties for users."}, {"author": "Jan Vornberger", "date": "2011-10-27T13:37:43", "message_text_only": "Am Mo, 24.10.2011, 16:55, schrieb Gavin Andresen:\n> Green addresses could be implemented as a second signature in the\n> scriptSig.  You'd have to hack your bitcoin client, but you could\n> generate a transaction that had <greensig> <sig> <pubKey>  ... as the\n> input instead of <sig> <pubKey>.\n>\n> The <greensig> will be ignored by old clients.  The transactions is\n> still considered 'standard'.  But you could teach bitcoin to look for\n> <greensig> signatures in wallet transactions...\n\nI played around with this a little bit and managed to generate such\ntransactions. However, I ran into the problem that IsStandard() also\nchecks that the size of scriptSig is not above 200. Adding an extra\nsignature there triggers this limit. I guess there is no way around\nthat?\n\nRegards,\nJan", "summary": "Green addresses could be implemented as a second signature in the scriptSig, but it triggers a size limit issue."}, {"author": "Jan Vornberger", "date": "2011-10-27T14:50:16", "message_text_only": "Am Mo, 24.10.2011, 16:55, schrieb Gavin Andresen:\n> If you assume the client has all previous transactions, then you could\n> get the transaction input's prevout (from the memory pool or disk) and\n> then ExtractAddress() from it.\n\nI now created a patch based on this idea. To avoid slowing down\nlisttransactions or gettransaction, I put it in a separate RPC\ncall 'getorigins'. This is the patch:\n\nhttps://github.com/javgh/bitcoin/compare/bfa4600a93...getorigins\n\nAny obvious mistakes I made there?\n\nRegards!\nJan", "summary": "Gavin Andresen suggests using the prevout to extract the address for a transaction input. Jan creates a patch for a new RPC call 'getorigins'."}, {"author": "Jan Vornberger", "date": "2011-10-25T09:45:41", "message_text_only": "Am Mo, 24.10.2011, 16:55, schrieb Gavin Andresen:\n>> So my first shot at this is to go through the inputs of a transaction and\n>> see if the scriptSig field has only two opcodes. If that is the case, I\nassume that it is of the structure <sig> <pubKey> and calculate the\nBitcoin address from <pubKey>.\n>> But then I started to wonder if this is safe. Can this be tricked somehow?\n>\n> Sure. There are lots of non-standard scriptPubKey scripts that will\nvalidate if given <sig> <pubKey> as input:  a simple OP_NOP would work\n(do nothing, then check the top value on the stack and validate if it is\nnot zero-- and <pubKey> is not zero).\n\nAw, I see. So back to the drawing board for me.\n\nHow about this: I make sure that <sig> is a proper signature from a green\naddress key, by bringing my own scriptPubKey of just OP_CHECKSIG, complete\nthe script to be <sig> <pubKey> OP_CHECKSIG, and run it and afterwards\ncheck the address by looking at <pubKey>? Would that be safe? (Even if it\nis a hackish solution that only works for certain type of transactions):\n\n> Green addresses could be implemented as a second signature in the\nscriptSig.  You'd have to hack your bitcoin client, but you could\ngenerate a transaction that had <greensig> <sig> <pubKey>  ... as the\ninput instead of <sig> <pubKey>.\n\nInteresting suggestion! So if I understand correctly, <greensig> would be\nthe signature generated from signing the transaction with the key of a\ngreen address? Which would allow the rest of the transaction to be\ncompletely 'normal' and not require it to use specific inputs as such?\nSounds good - I guess I never thought in this direction, as I always\nassumed doing anything 'non-standard' with the scripting language would\ncreate a number of knock-on problems. But you are saying, that this would\nstill be considered standard? I guess I have to study this part of the\nsource code more.\n\nWell, I guess I'm torn a little bit between two options:\n\n1) Get something working reasonable fast to detect current green address\nstyle transactions. It's fine if it is a little bit of a hack, as long as\nit's safe, since I don't expect it to be merged with mainline anyway at\nthis point.\n\n2) Rethink how green transactions are created and verified and try to put\nsomething 'proper' together which has a chance of being merged at some\npoint.\n\nFor the moment I was going more with 1) because I got the impression, that\ngreen transactions are too controversial at this point to get them\nincluded in mainline. Criticism ranging from 'unnecessary, as\n0-confirmation transactions are fairly safe today' to 'encourages too much\ncentralization and therefore evil'. So how to people on this list feel\nabout green transactions? Would people be interested in helping me with\n2)?\n\nRegards,\nJan", "summary": "Jan is discussing the implementation of green addresses in Bitcoin transactions and considering two options: a hackish solution or a proper implementation."}, {"author": "Joel Joonatan Kaartinen", "date": "2011-10-25T10:03:04", "message_text_only": "On Tue, 2011-10-25 at 11:45 +0200, Jan Vornberger wrote:\n> 1) Get something working reasonable fast to detect current green address\n> style transactions. It's fine if it is a little bit of a hack, as long as\n> it's safe, since I don't expect it to be merged with mainline anyway at\n> this point.\n> \n> 2) Rethink how green transactions are created and verified and try to put\n> something 'proper' together which has a chance of being merged at some\n> point.\n> \n> For the moment I was going more with 1) because I got the impression, that\n> green transactions are too controversial at this point to get them\n> included in mainline. Criticism ranging from 'unnecessary, as\n> 0-confirmation transactions are fairly safe today' to 'encourages too much\n> centralization and therefore evil'. So how to people on this list feel\n> about green transactions? Would people be interested in helping me with\n> 2)?\n\nOne possibility would be to create a peer sourced green address\nimplementation. That is, each user could, individually decide to trust\ncertain addresses as \"green\" and optionally, publish this trust. Basing\nthings on the published trust, you could dynamically, as opposed to\nstatic hierarchies, evaluate the trustworthiness of each green address\nyou haven't personally decided to trust.\n\nThis would be somewhat involved implementation, though, as it would\nrequire heavy statistical calculations.\n\n- Joel", "summary": "The author proposes two options for implementing green transactions, with the first being a quick hack and the second being a more proper solution. There is controversy surrounding green transactions and a peer-sourced implementation is suggested."}, {"author": "Mike Hearn", "date": "2011-10-25T10:42:53", "message_text_only": "> Interesting suggestion! So if I understand correctly, <greensig> would be\n> the signature generated from signing the transaction with the key of a\n> green address?\n\nSure. Or just \"a key\". It wouldn't have to be an actual key used in\nthe block chain.\n\n> Sounds good - I guess I never thought in this direction, as I always\n> assumed doing anything 'non-standard' with the scripting language would\n> create a number of knock-on problems.\n\nIt won't break the IsStandard checks, if that's what you mean. You can\nput any data you like into a scriptSig. In practice only data is\nuseful, there's no purpose in having an actual script there (or at\nleast, I wasn't able to find one yet).\n\n> 1) Get something working reasonable fast to detect current green address\n> style transactions. It's fine if it is a little bit of a hack, as long as\n> it's safe, since I don't expect it to be merged with mainline anyway at\n> this point.\n\nYou could easily change the bitcoin code to detect such transactions -\njust look for scriptSigs that have 3 items instead of two, where the\n3rd item is the right size to be a signature.\n\n> Criticism ranging from 'unnecessary, as\n> 0-confirmation transactions are fairly safe today' to 'encourages too much\n> centralization and therefore evil'\n\nHeh, if that's a reference to my feedback, I definitely wouldn't\ndescribe such a feature as \"evil\", that's rather strong :-)", "summary": "A suggestion was made to use a \"green signature\" generated from signing a transaction with the key of a green address to improve transaction safety."}], "thread_summary": {"title": "Determine input addresses of a transaction", "categories": ["Bitcoin-development"], "authors": ["Jan Vornberger", "Michael Hendricks", "Mike Hearn", "Simon Barber", "Gavin Andresen", "Pieter Wuille", "Joel Joonatan Kaartinen"], "messages_count": 12, "total_messages_chars_count": 14230, "convo_summary": "Developers are discussing the implementation of \"green addresses\" in Bitcoin transactions to improve safety. Suggestions include implementing an interface to mark certain addresses as \"trusted,\" using PKI to eliminate the need for a trust aggregator, and using a \"green signature\" to sign transactions for merchants. There is controversy surrounding the implementation, with suggestions for a peer-sourced solution."}}, {"title": "[Bitcoin-development] Detecting OP_EVAL scriptPubKeys that are to you", "thread_messages": [{"author": "Mike Hearn", "date": "2011-10-25T10:49:11", "message_text_only": "scriptPubKeys that use OP_EVAL contain a hash of a script. If I\nunderstand correctly, that means to detect a transaction in a block\nthat is relevant to your wallet, that means you need to pre-calculate\nevery possible hash that might appear.\n\nFor the case of a single payment, that's not a problem. It means for\neach key you now have to check for:\n\n - raw key\n - key hash\n - hash of script that contains key hash\n - hash of script that contains raw key\n\nwhich isn't so bad.\n\nWhat is the complexity like when multi-signing comes into the picture?\nI *think* it's not an issue for the use cases currently envisioned,\nbut being unable to \"see into\" a script could complicate things later.\n\nSpecifically: for a wallet protection service, you have to make sure\nthe WPS keys are matched 1:1 with your own private keys. You must\nnever mix them up otherwise you have to check the block chain for the\ncross-product. Deterministic wallets are one way to achieve that\nwithout compromising privacy.\n\nFor escrow contracts, using OP_EVAL means you cannot detect them\nunless the sender has told you the pubkey they are going to use,\nbecause otherwise you can't recreate the hashed script. Escrow\nprotocols require some out of band communication anyway in order to\nset up the escrow key, so this isn't inherently a problem.\n\nAre there any use cases where you will want to recognize transactions\nto you, where you can't predict the full script contents?", "summary": "OP_EVAL in scriptPubKeys requires pre-calculating every possible hash that might appear, which can complicate multi-signing and recognizing transactions with unknown script contents."}, {"author": "Gavin Andresen", "date": "2011-10-25T13:21:30", "message_text_only": "On Tue, Oct 25, 2011 at 6:49 AM, Mike Hearn <mike at plan99.net> wrote:\n> scriptPubKeys that use OP_EVAL contain a hash of a script. If I\n> understand correctly, that means to detect a transaction in a block\n> that is relevant to your wallet, that means you need to pre-calculate\n> every possible hash that might appear.\n\nYou could do it that way...  but that would be inefficient.\n\nYou give the hash to whoever is paying you, and store the hash -->\nscript  mapping when you do that (assuming you're not using a\ndeterministic wallet; if you are, you probably just increment a\ncounter in the wallet).\n\nThe only use case I can think of where you'd want to check for every\npossible hash is if you lose your wallet, you have a wallet backup\nthat has your private keys in it, but DOES NOT have the hash -->\nscript mapping(s).\n\nFor use cases involving other people, that's probably not a problem--\nyou could ask them to tell you what public keys are involved, and then\nadd them back in to the wallet (the RPC interface I settled on for\nm-of-n txns is an \"addmultisigaddress\" that takes the \"m\" and an array\nof \"n\" public keys, creates the script, adds the hash-->script mapping\nto the wallet, and returns the hash).\n\nFor use cases where all the keys belong to you... either a good,\nautomatic, in-the-cloud-backup or the equivalent of \"-rescan\" is\nneeded to recover in case the mappings are lost.\n\n-- \n--\nGavin Andresen", "summary": "OP_EVAL scriptPubKeys contain a hash of a script, but pre-calculating every possible hash is inefficient. Instead, store the hash --> script mapping."}, {"author": "Gregory Maxwell", "date": "2011-10-25T14:49:45", "message_text_only": "On Tue, Oct 25, 2011 at 9:21 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> You give the hash to whoever is paying you, and store the hash -->\n> script \u00a0mapping when you do that (assuming you're not using a\n> deterministic wallet; if you are, you probably just increment a\n> counter in the wallet).\n\nIf anyone finds that solution unsatisfying, consider\u2014 It's already the\ncase that I could take one of your disclosed public keys and create an\ninfinite series of secondary keys out of it for which only you could\ndecode, and the only way for you to find them in the blockchain would\nbe to have performed the same procedure and made a note of the\naddresses you're watching for.\n\n... or really, more simply I could generate a private key on your\nbehalf and send funds there. (\"What do you mean you didn't get the\nfunds? I sent them to the private key defined by the cryptographic\nhash of the lyrics of your favorite song!\")\n\nSo it's already the case that if I didn't get your address from you\n(or through a negotiation with you), I can't expect you to receive\nthem.", "summary": "A proposed solution for storing Bitcoin addresses involves using a hash to script mapping, but there are already ways to create secondary keys and private keys."}, {"author": "Alan Reiner", "date": "2011-10-25T16:47:34", "message_text_only": "On Tue, Oct 25, 2011 at 10:49 AM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n\n> On Tue, Oct 25, 2011 at 9:21 AM, Gavin Andresen <gavinandresen at gmail.com>\n> wrote:\n> > You give the hash to whoever is paying you, and store the hash -->\n> > script  mapping when you do that (assuming you're not using a\n> > deterministic wallet; if you are, you probably just increment a\n> > counter in the wallet).\n>\n> If anyone finds that solution unsatisfying, consider\u2014 It's already the\n> case that I could take one of your disclosed public keys and create an\n> infinite series of secondary keys out of it for which only you could\n> decode, and the only way for you to find them in the blockchain would\n> be to have performed the same procedure and made a note of the\n> addresses you're watching for.\n>\n>\n(1) As I understand it, OP_EVAL is being proposed as an *optional* tool for\nmulti-signature transactions.  It sounds like to me, that you can still use\nthe regular OP_CHECKMULTISIG if you are concerned about these things.  If\nyou're dealing with too many parties with questionable reliability that they\nwill notify you of transacitons that include you, I don't see anything wrong\nwith declaring that you'd only prefer dealing with OP_CMS transactions and\nnot OP_EVAL (besides some grumbling from them that their way is \"better\").\nEither way, they're screwing themselves, too, if they want to include you on\ntransactions and don't notify you as such (kind of defeats the purpose of\nmulti-sig txs).\n\n(2) I think it's unnecessary to discuss cases where you somehow lose your\nmappings but not your private keys.  In order for OP_EVAL scripts to work,\nthe subscripts/mappings are *just as important* as your regular private\nkeys.  They should be kept in your wallet forever just like your private\nkeys--and thus you lose none of them or all of them.  The only real\ndifference is that they aren't sensitive like your private keys, so they\ndon't have to be encrypted.\n\n(3) There should most definitely be a button on the main client that allows\nyou to \"Add OP_EVAL script\" or something along those lines (maybe something\nwith a less obscure name).  We need to make it as easy as possible for\nsomeone to add such a script/mapping to their wallet.  Although, this\ninvites a breach of one of my core rules of user interfaces:  if the\nfunctionality is dependent on the user performing some regular maintenance\ntask, you better be prepared for all users to fail at doing it.  Even\ndiligent users are going to forget/mess-up sometimes.  If failure at\nperforming this task results in breaking the client or losing money, we\nshould avoid promoting that usage paradigm.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111025/e630403f/attachment.html>", "summary": "The proposed OP_EVAL tool for multi-signature transactions is optional, and regular OP_CHECKMULTISIG can still be used. It is important to keep the subscripts/mappings in the wallet forever, and there should be an easy way to add such a script/mapping to the wallet."}, {"author": "Michael Gr\u00f8nager", "date": "2011-10-26T08:58:45", "message_text_only": "I think it is a very important feature to be able to extract transaction to/from you only from your private keys. In the standard transactions this is easily accomplished - in the case you only want to find the addr to tx mapping:\n\n   vector<pair<opcodetype, vector<unsigned char> > > vSolution;\n   if (!Solver(scriptPubKey, vSolution))\n       return 0;\n\n   BOOST_FOREACH(PAIRTYPE(opcodetype, vector<unsigned char>)& item, vSolution)\n   {\n       vector<unsigned char> vchPubKey;\n       if (item.first == OP_PUBKEY)\n           // encode the pubkey into a hash160\n           return Hash160(item.second);\n       else if (item.first == OP_PUBKEYHASH)\n           return uint160(item.second);                \n   }\n\nThis possibility is used today in:\n* blockexplorer\n* bitcoin-js\n* my own tiered implementation for thin clients\n\nI agree that you can of course always construct payment schemes to hide payments (hashes from classic novels, sending the private key off line etc), but I consider those either exotic or on purpose hidden, and hence they are not really a problem, nor an argument that this feature does not really exist today.\n\nSo, if we introduce a standard (multikey) payment that hides the address (or makes it overly complicated to extract it) it will be a major problem for the projects that I listed above. \n\nI will post a more detailed technical comment reflecting directly on the BIPs, but the wiki is currently down and I need to re-read the BIPs first.\n\nCheers,\n\nMichael\n\n\nOn 25/10/2011, at 18:47, Alan Reiner wrote:\n\n> On Tue, Oct 25, 2011 at 10:49 AM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n> On Tue, Oct 25, 2011 at 9:21 AM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n>> You give the hash to whoever is paying you, and store the hash -->\n>> script  mapping when you do that (assuming you're not using a\n>> deterministic wallet; if you are, you probably just increment a\n>> counter in the wallet).\n> \n> If anyone finds that solution unsatisfying, consider\u2014 It's already the\n> case that I could take one of your disclosed public keys and create an\n> infinite series of secondary keys out of it for which only you could\n> decode, and the only way for you to find them in the blockchain would\n> be to have performed the same procedure and made a note of the\n> addresses you're watching for.\n> \n> \n> (1) As I understand it, OP_EVAL is being proposed as an *optional* tool for multi-signature transactions.  It sounds like to me, that you can still use the regular OP_CHECKMULTISIG if you are concerned about these things.  If you're dealing with too many parties with questionable reliability that they will notify you of transacitons that include you, I don't see anything wrong with declaring that you'd only prefer dealing with OP_CMS transactions and not OP_EVAL (besides some grumbling from them that their way is \"better\").   Either way, they're screwing themselves, too, if they want to include you on transactions and don't notify you as such (kind of defeats the purpose of multi-sig txs).\n> \n> (2) I think it's unnecessary to discuss cases where you somehow lose your mappings but not your private keys.  In order for OP_EVAL scripts to work, the subscripts/mappings are *just as important* as your regular private keys.  They should be kept in your wallet forever just like your private keys--and thus you lose none of them or all of them.  The only real difference is that they aren't sensitive like your private keys, so they don't have to be encrypted.\n> \n> (3) There should most definitely be a button on the main client that allows you to \"Add OP_EVAL script\" or something along those lines (maybe something with a less obscure name).  We need to make it as easy as possible for someone to add such a script/mapping to their wallet.  Although, this invites a breach of one of my core rules of user interfaces:  if the functionality is dependent on the user performing some regular maintenance task, you better be prepared for all users to fail at doing it.  Even diligent users are going to forget/mess-up sometimes.  If failure at performing this task results in breaking the client or losing money, we should avoid promoting that usage paradigm.\n> \n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn \n> about Cisco certifications, training, and career opportunities. \n> http://p.sf.net/sfu/cisco-dev2dev_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "The author discusses the importance of being able to extract transactions from private keys and how it is currently used in various projects. They also express concern about the potential impact of introducing a standard multikey payment that hides the address."}, {"author": "Gregory Maxwell", "date": "2011-10-26T14:03:20", "message_text_only": "On Wed, Oct 26, 2011 at 4:58 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> I think it is a very important feature to be able to extract transaction to/from you only from your private keys. In the standard transactions this is easily accomplished - in the case you only want to find the addr to tx mapping:\n\nThe additional material _IS_ then part of the private key. It's not\nsomething seperate. Its something you need to know in order to author\nthe address.  This was fundamentally my argument. Not that you could\nhide information, but that information was already hidden.\n\nRight now under conventional uses I can't identify all the\ntransactions that land in your wallet, because I don't know the keys\nit contains. With the proposal it's the same situation.\n\n> This possibility is used today in:\n> * blockexplorer\n> * bitcoin-js\n> * my own tiered implementation for thin clients\n[snip]\n> So, if we introduce a standard (multikey) payment that hides the address (or makes it overly complicated to extract it) it will be a major problem for the projects that I listed above.\n\nThese projects will be able to use the _same_ procedure to extract the\nidentifying information. Except now instead of\nripemd160(sha256(pubkey)) it will be more like ripemd160(sha256([some\nextra bytes generated by the wallet holder]||pubkey)) that you\nextract.  If the former is not a problem for these applications, why\nis the latter?", "summary": "The proposal to introduce a standard multikey payment that hides the address could cause problems for projects like blockexplorer, bitcoin-js, and others."}, {"author": "Gavin Andresen", "date": "2011-10-26T15:00:48", "message_text_only": "On Wed, Oct 26, 2011 at 4:58 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> I think it is a very important feature to be able to extract transaction to/from you only from your private keys.\n\nWhy? If somebody is sending me bitcoins, then they'll have to get\neither an address or one or more public keys from me. OP_EVAL just\nlets me give them a short address that represents an arbitrary number\nof keys combined in an arbitrary way.\n\nI agree with Gregory: it shouldn't matter if that address is\nHASH(public key) or HASH(op_eval_script), the issues are the same (if\nyou lose or cannot re-create the key/script then you're in trouble).\n\nMaybe I'm missing something; are you worried that blockexplorer won't\nknow that coins sent to HASH(op_eval_script) are actually a\ncomplicated transaction until the coins are spent again?  I'd consider\nthat a feature, not a bug, because only the people involved in the\ntransaction need to know the details until after the transaction is\ncomplete.\n\nFeel free to contact me about your 'tiered implementation for thin\nclients' -- I don't think OP_EVAL will make that significantly harder.\n\nI also agree with Alan: using OP_EVAL is not mandatory, I'm proposing\nthat CHECKMULTISIG becomes a standard transaction type.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen proposes that CHECKMULTISIG becomes a standard transaction type, and OP_EVAL is not mandatory."}, {"author": "Michael Gr\u00f8nager", "date": "2011-10-27T07:32:16", "message_text_only": "OK, let me try to explain what I see is the problem:\n\nSo far we the bitcoin addresses are (for all practical purposes) a one-to-one mapping between a pubkey and uint160. This mean that your wallet is defined solely by your privatekeys (from which you can extract pubkeys and then uint160 btc-addresses).\n\nThis also enables you to make a uint160 to tx mapping on a server (like on blockexplorer) and use a thin client to query for transactions just from a list of uint160 (whether it holds the private keys behind them or not).\n\nIn the case of a multisig transaction, lets say the 2of3 example, you could e.g. have all 3 corresponding uint160s but only one privkey, but still query the server and know the value of an asset of uint160s.\n\nThis, I find a nice and clean setup, where cryptographic keys can be mapped to assets.\n\nIf we now consider the OP_EVAL proposal. Here, a new use of the uint160, namely as a mapping of ripemd160(something extra and hash256(pubkey)) is introduced. This means that this clean mapping is broken. Your will have an extra \"public key\" being the \"something extra\", and there is no easy way to do the mapping from a list of private keys to public keys to uint160s that will result in the new condensed uint160, except if you also have the knowledge of the script that was used. \n\nI agree that it will work and I (and bitcoin-js and blockexplorer) can of change the concept of a wallet to also include scripts, but it breaks an intrinsic logic of uint160s and transactions that has so far been quite nice and clean.\n\nSo I also support checkmultisig to be the standard transaction type, but I do not appreciate the support of OP_EVAL.\n\nCheers,\n\nMichael\n\n\nOn 26/10/2011, at 17:00, Gavin Andresen wrote:\n\n> On Wed, Oct 26, 2011 at 4:58 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n>> I think it is a very important feature to be able to extract transaction to/from you only from your private keys.\n> \n> Why? If somebody is sending me bitcoins, then they'll have to get\n> either an address or one or more public keys from me. OP_EVAL just\n> lets me give them a short address that represents an arbitrary number\n> of keys combined in an arbitrary way.\n> \n> I agree with Gregory: it shouldn't matter if that address is\n> HASH(public key) or HASH(op_eval_script), the issues are the same (if\n> you lose or cannot re-create the key/script then you're in trouble).\n> \n> Maybe I'm missing something; are you worried that blockexplorer won't\n> know that coins sent to HASH(op_eval_script) are actually a\n> complicated transaction until the coins are spent again?  I'd consider\n> that a feature, not a bug, because only the people involved in the\n> transaction need to know the details until after the transaction is\n> complete.\n> \n> Feel free to contact me about your 'tiered implementation for thin\n> clients' -- I don't think OP_EVAL will make that significantly harder.\n> \n> I also agree with Alan: using OP_EVAL is not mandatory, I'm proposing\n> that CHECKMULTISIG becomes a standard transaction type.\n> \n> -- \n> --\n> Gavin Andresen\n\nMichael Gronager, PhD\nOwner Ceptacle / NDGF Director, NORDUnet A/S\nJens Juels Gade 33\n2100 Copenhagen E\nMobile: +45 31 62 14 01\nE-mail: gronager at ceptacle.com", "summary": "Michael Gr\u00f8nager argues that the OP_EVAL proposal breaks the clean mapping of cryptographic keys to assets in Bitcoin addresses. He supports checkmultisig as the standard transaction type."}, {"author": "Gregory Maxwell", "date": "2011-10-27T09:08:53", "message_text_only": "(taking this a bit out of order)\n\nOn Thu, Oct 27, 2011 at 3:32 AM, Michael Gr\u00f8nager <gronager at ceptacle.com> wrote:\n> OK, let me try to explain what I see is the problem:\n[snip]\n> This, I find a nice and clean setup, where cryptographic keys can be mapped to assets.\n\n>From my perspective that clean boundary remains: Functionally the\nscript is part of the cryptographic key.\n\n[snip]\n> except if you also have the knowledge of the script that was used.\n\nWhich you must.\n\nI can see no functional difference than if you said of the current\nsystem \"except if you also have knowledge of the final 32 bits of the\nECC private key\".\n\nI don't see any reason to expect clients to identify funds without\nknowing the information required\u2014 it's impossible. I mean, sure, you\n_could_ bruteforce the final 32 bits of your private key\u2014 or you could\nattempt to try the cartesian product of every key you have with every\nkey seen in the block chain for finding an op_eval script. But thats\nunworkable, unnecessary, equally bad for all client types, and not\nbeing suggested.  Under either system a coin is not yours unless you\nknow all of the right bits\u2014 knowing some is not good enough.\n\nCould you suggest how else we could gain the advantages of op_eval\nwithout it?   How can I secure my wallet under whatever scheme I like\u2014\ncreate a trust that requires multiparty signoff\u2014 and securely have\nsenders pay into it without expecting them all to handle some rare and\ncomplicated procedure for sending to me? (Or a burdensome address\nwhich serializes a script and a large amount of data into hundreds of\ncharacters, and which still may be unable to represent the rules I\nwish to have govern my account\u2014 and which the sender might mutate\u2014\ne.g. twiddling the threshold counts\u2014 and cause me great\nproblems/confusion)\n\n[snip]\n> So far we the bitcoin addresses are (for all practical purposes) a one-to-one mapping between a pubkey and uint160. This mean that your wallet is defined solely by your privatekeys (from which you can extract pubkeys and then uint160 btc-addresses).\n[snip]\n> I agree that it will work and I (and bitcoin-js and blockexplorer) can of change the concept of a wallet to also include scripts, but it breaks an intrinsic logic of uint160s and transactions that has so far been quite nice and clean.\n>\n> So I also support checkmultisig to be the standard transaction type, but I do not appreciate the support of OP_EVAL.\n\nOn the basis of the discussion here I now oppose checkmultisig as a\nstandard transaction type. (Sorry, I'm not trying to be a jerk if it\ncame off that way, I'm not opposing it simply because you support it:)\n\nThe advantage I saw of having it was faster deployment for the\nexplicit escrow cases that don't need to encode the payment rules in\nan address (as is needed for wallet security and trusts)... but it\nseems to me that there is a serious misunderstanding that there is a\nbijection between hash160s and public keys, and one between ECC\nprivate keys and spendable transactions, and that this bijection is\ndesirable or even essential to bitcoin.\n\nI'm concerned that this misunderstanding will moot the flexibility of\nthe script system because every script that doesn't look like a direct\nmapping of hash160->pubkey->payee will be regarded as _broken_\u2014 not\njust useless to one app or another which could have simply chosen not\nto generate those addresses\u2014 but actually incompatible with bitcoin,\nas is basically being argued here\u2014 or, keeping in mind that people can\nfreely mine non-standard transactions, could this result in tools\nwhich are rendered insecure by unexpected transaction types\u2014 Will a\nsystem that thinks HASH160 = IDENTITY recognize that a script which\nalso requires an additional secret key on the stack is unspendable?\n\nKeeping checkmultisig alone as a standard transaction, when it's\nfunctionally a redundant subset of OP_EVAL  (and inferior because it\nreduces the txn you can place in a block) could only further that\nmisunderstanding. :-/", "summary": "The author opposes checkmultisig as a standard transaction type due to a misunderstanding of the bijection between hash160s and public keys."}, {"author": "Michael Gr\u00f8nager", "date": "2011-10-28T10:24:21", "message_text_only": "> Could you suggest how else we could gain the advantages of op_eval\n> without it?   How can I secure my wallet under whatever scheme I like\u2014\n> create a trust that requires multiparty signoff\u2014 and securely have\n> senders pay into it without expecting them all to handle some rare and\n> complicated procedure for sending to me?\n\nYes - by the burdensome address ;) - which I am not sure I consider that much of a trouble, for practical uses... Anyway, it could just be added to the URI scheme and then it would still only be a click away.\n\n> but it\n> seems to me that there is a serious misunderstanding that there is a\n> bijection between hash160s and public keys, and one between ECC\n> private keys and spendable transactions, and that this bijection is\n> desirable or even essential to bitcoin.\n\nSo far we had by the standard transactions a nice bijection, I do however, share your concern for other and more rich scripting... And here we need to make some choices! \nDo we want to keep this notion of transactions between addresses or do we want to start unfold the richness of the scripting - I am not sure we actually gain that much from OP_EVAL and the extra scripting. And what bothers me is that you then cannot define a set of data (be that key, scripts or whatever) from which you can obtain all possible txes send to you. If I e.g. looses this argument and want to donate a beer to each of you and Gavin, that I want you to drink together. I would make a \"both of two\" btc-addresses script transaction using OP_EVAL. And post it.\nYou would then not be able to know that you actually got a beer unless I told you so in a mail.\n\nThis means that we move from a setup where transactions needs not only to be asked for but also they need to be announced by the sender. I don't like this... \n\nFurther, if you make a uint160 from a OP_EVAL script and post this as a bitcoin address - the user should then know that this was a special address - otherwise he would be sending money nowhere. I agree that this could be encoded into the bitcoin address using e.g. a 2... instead of a 3..., but as you mention yourself this is only the start of the OP_EVAL uses and hence you would need a whole series of strange numbering to define what script a specific address was referring to. \n\nAt least it challenges my esthetics...\n\nCheers,\n\nM", "summary": "OP_EVAL may not be essential to Bitcoin, and there are concerns about the complexity it adds to transactions and the lack of transparency for recipients."}, {"author": "Gavin Andresen", "date": "2011-10-29T17:01:00", "message_text_only": "RE: buying me and Gregory a shared beer:\n\n> I would make a \"both of two\" btc-addresses script transaction using OP_EVAL. And post it.\n> You would then not be able to know that you actually got a beer unless I told you so in a mail.\n\nBut that transaction won't show up in my bitcoin wallet as bitcoins I can spend.\n\nAnd even if my wallet DID show me \"transactions that involve your keys\nbut that you can't spend,\" all I would know is there are N bitcoins\nthat I can only spend if I can somehow figure out that Gregory has\npublic key XYZ.\n\nHow would I know that unless you told me?\n\nI think the right long-term solution is moving away from bitcoin\naddresses as 'pay-to entity' and create an infrastructure where we're\npaying people or organizations. But in the short term, I think there\nare lots of benefits to creating a new type of bitcoin address built\non top of OP_EVAL that will be very easy for all of our existing\ninfrastructure to support.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen suggests using a new type of bitcoin address built on top of OP_EVAL for easy support of existing infrastructure."}, {"author": "Michael Gr\u00f8nager", "date": "2011-10-31T08:50:49", "message_text_only": "> \n> How would I know that unless you told me?\n\nAt least you would have a hunch that something like that had happened as one of your addresses had been part of a transaction (at least in my setup it would pop up immediately...).\n\n> \n> I think the right long-term solution is moving away from bitcoin\n> addresses as 'pay-to entity' and create an infrastructure where we're\n> paying people or organizations.\n\nI am not sure what you mean by this - just recall that the semi anonymously feature of bitcoin is one of its key features.\n\n> But in the short term, I think there\n> are lots of benefits to creating a new type of bitcoin address built\n> on top of OP_EVAL that will be very easy for all of our existing\n> infrastructure to support.\n\nStill, how do you solve the end less expansions of bitcoin addresses that each, depending of a leading 1, 2, 3... means a quite specific script inside the OP_EVAL ??? Its not esthetic...\n\nCheers,\n\nM\n\n> \n> -- \n> --\n> Gavin Andresen", "summary": "Gavin Andresen suggests moving away from Bitcoin addresses and creating an infrastructure where people or organizations are paid, but proposes a short-term solution using a new type of Bitcoin address."}], "thread_summary": {"title": "Detecting OP_EVAL scriptPubKeys that are to you", "categories": ["Bitcoin-development"], "authors": ["Mike Hearn", "Alan Reiner", "Michael Gr\u00f8nager", "Gregory Maxwell", "Gavin Andresen"], "messages_count": 12, "total_messages_chars_count": 25707, "convo_summary": "The group discusses the proposed OP_EVAL tool for multi-signature transactions, with concerns raised about its potential impact on the clean mapping of cryptographic keys to assets in Bitcoin addresses. Gavin Andresen suggests using a new type of Bitcoin address built on top of OP_EVAL for easy support of existing infrastructure, while Michael Gr\u00f8nager proposes moving away from Bitcoin addresses altogether."}}, {"title": "[Bitcoin-development] Bitcoin Wiki", "thread_messages": [{"author": "Amir Taaki", "date": "2011-10-27T15:15:13", "message_text_only": "Anybody know how to contact MT about getting it back online? I still haven't finished copy-editing the BIPs and need access to them since there's a new one to be added.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111027/6dfec4cd/attachment.html>", "summary": "Request for help to contact MT to bring it back online as the BIPs are not yet copy-edited and a new one needs to be added."}, {"author": "Nils Schneider", "date": "2011-10-27T15:22:33", "message_text_only": "Can we use a git repo or something more redundant for BIPs? They're\nrather important and the wiki has been unreliable before.\n\nOn 27.10.2011 17:15, Amir Taaki wrote:\n> Anybody know how to contact MT about getting it back online? I still\n> haven't finished copy-editing the BIPs and need access to them since\n> there's a new one to be added.\n> \n> \n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn \n> about Cisco certifications, training, and career opportunities. \n> http://p.sf.net/sfu/cisco-dev2dev\n> \n> \n> \n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development", "summary": "Suggestion to use a more reliable platform like a git repo for Bitcoin Improvement Proposals (BIPs) due to the unreliability of the wiki."}, {"author": "Daniel F", "date": "2011-10-27T16:15:34", "message_text_only": "+1 on git. not necessarily as replacement, but at least as backup.\ncould possibly use markdown and github pages, which automagically\npushes git commits out to the website (uses markdown syntax, iirc)\n\nOn Thu, Oct 27, 2011 at 11:22 AM, Nils Schneider <nils at nilsschneider.net> wrote:\n> Can we use a git repo or something more redundant for BIPs? They're\n> rather important and the wiki has been unreliable before.\n>\n> On 27.10.2011 17:15, Amir Taaki wrote:\n>> Anybody know how to contact MT about getting it back online? I still\n>> haven't finished copy-editing the BIPs and need access to them since\n>> there's a new one to be added.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> The demand for IT networking professionals continues to grow, and the\n>> demand for specialized networking skills is growing even more rapidly.\n>> Take a complimentary Learning at Cisco Self-Assessment and learn\n>> about Cisco certifications, training, and career opportunities.\n>> http://p.sf.net/sfu/cisco-dev2dev\n>>\n>>\n>>\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "Proposal to use a git repo or something more redundant for Bitcoin Improvement Proposals (BIPs) due to the unreliability of the wiki."}, {"author": "Christian Decker", "date": "2011-10-27T17:12:20", "message_text_only": "Yup, +1 for Git.\n\nOn Thu, Oct 27, 2011 at 6:15 PM, Daniel F <nanotube at gmail.com> wrote:\n\n> +1 on git. not necessarily as replacement, but at least as backup.\n> could possibly use markdown and github pages, which automagically\n> pushes git commits out to the website (uses markdown syntax, iirc)\n>\n> On Thu, Oct 27, 2011 at 11:22 AM, Nils Schneider <nils at nilsschneider.net>\n> wrote:\n> > Can we use a git repo or something more redundant for BIPs? They're\n> > rather important and the wiki has been unreliable before.\n> >\n> > On 27.10.2011 17:15, Amir Taaki wrote:\n> >> Anybody know how to contact MT about getting it back online? I still\n> >> haven't finished copy-editing the BIPs and need access to them since\n> >> there's a new one to be added.\n> >>\n> >>\n> >>\n> ------------------------------------------------------------------------------\n> >> The demand for IT networking professionals continues to grow, and the\n> >> demand for specialized networking skills is growing even more rapidly.\n> >> Take a complimentary Learning at Cisco Self-Assessment and learn\n> >> about Cisco certifications, training, and career opportunities.\n> >> http://p.sf.net/sfu/cisco-dev2dev\n> >>\n> >>\n> >>\n> >> _______________________________________________\n> >> Bitcoin-development mailing list\n> >> Bitcoin-development at lists.sourceforge.net\n> >> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n> >\n> >\n> ------------------------------------------------------------------------------\n> > The demand for IT networking professionals continues to grow, and the\n> > demand for specialized networking skills is growing even more rapidly.\n> > Take a complimentary Learning at Cisco Self-Assessment and learn\n> > about Cisco certifications, training, and career opportunities.\n> > http://p.sf.net/sfu/cisco-dev2dev\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111027/ae5ab2c1/attachment.html>", "summary": "The Bitcoin community discusses using Git as a backup for BIPs due to the unreliability of the wiki. Markdown and Github pages are suggested."}, {"author": "Stefan Thomas", "date": "2011-10-27T17:18:02", "message_text_only": "+1 for something based on git. Github has a dedicated wiki feature that \nis git-backed:\n\nhttps://github.com/bitcoinjs/node-bitcoin-p2p/wiki/\ngit://github.com/bitcoinjs/node-bitcoin-p2p.wiki.git\n\nOn 10/27/2011 6:15 PM, Daniel F wrote:\n> +1 on git. not necessarily as replacement, but at least as backup.\n> could possibly use markdown and github pages, which automagically\n> pushes git commits out to the website (uses markdown syntax, iirc)\n>\n> On Thu, Oct 27, 2011 at 11:22 AM, Nils Schneider<nils at nilsschneider.net>  wrote:\n>> Can we use a git repo or something more redundant for BIPs? They're\n>> rather important and the wiki has been unreliable before.\n>>\n>> On 27.10.2011 17:15, Amir Taaki wrote:\n>>> Anybody know how to contact MT about getting it back online? I still\n>>> haven't finished copy-editing the BIPs and need access to them since\n>>> there's a new one to be added.\n>>>\n>>>\n>>> ------------------------------------------------------------------------------\n>>> The demand for IT networking professionals continues to grow, and the\n>>> demand for specialized networking skills is growing even more rapidly.\n>>> Take a complimentary Learning at Cisco Self-Assessment and learn\n>>> about Cisco certifications, training, and career opportunities.\n>>> http://p.sf.net/sfu/cisco-dev2dev\n>>>\n>>>\n>>>\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>> ------------------------------------------------------------------------------\n>> The demand for IT networking professionals continues to grow, and the\n>> demand for specialized networking skills is growing even more rapidly.\n>> Take a complimentary Learning at Cisco Self-Assessment and learn\n>> about Cisco certifications, training, and career opportunities.\n>> http://p.sf.net/sfu/cisco-dev2dev\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> ------------------------------------------------------------------------------\n> The demand for IT networking professionals continues to grow, and the\n> demand for specialized networking skills is growing even more rapidly.\n> Take a complimentary Learning at Cisco Self-Assessment and learn\n> about Cisco certifications, training, and career opportunities.\n> http://p.sf.net/sfu/cisco-dev2dev\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>", "summary": "The Bitcoin community discusses using Git as a backup for important information, such as BIPs, due to the unreliability of the wiki."}], "thread_summary": {"title": "Bitcoin Wiki", "categories": ["Bitcoin-development"], "authors": ["Amir Taaki", "Nils Schneider", "Daniel F", "Stefan Thomas", "Christian Decker"], "messages_count": 5, "total_messages_chars_count": 8695, "convo_summary": "The Bitcoin community discussed using Git as a backup for important information, such as BIPs, due to the unreliability of the wiki. Suggestions included using Markdown and Github pages for more redundancy. Amir Taaki requested help to contact MT to bring the wiki back online for editing."}}, {"title": "[Bitcoin-development] Multisignature scriptSigs", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-10-27T16:13:04", "message_text_only": "> However, I ran into the problem that IsStandard() also\n> checks that the size of scriptSig is not above 200. Adding an extra\n> signature there triggers this limit. I guess there is no way around\n> that?\n\nD'oh!  I forgot about that check (and should have remembered, I had to\nincrease it for my 'standard' multisig transactions branch).\n\nAssuming BIPS 11 and 12 are adopted, there will be room in the\nscriptSig for more than one signature. Once that happens, implementing\ngreen addresses as an extra signature on the first scriptSig in a\ntransaction seems like a better way to do it than generating two\nseparate transactions.\n\nSpeaking of more-than-on-signature transactions:\n\nI'm proposing a maximum 3 signatures for an IsStandard() transaction,\nwhich would be a 600-byte scriptSig.\n\nIt is tempting to just bump the maximum up to 8 or 10, but I think we\nshould stay conservative about IsStandard() transaction size until\nafter two things happen:\n\n1) bitcoin-qt gets smarter about downloading just block headers, and\nmaybe downloading transactions without scriptSigs (for transactions it\ndoesn't need/care to validate... need to think about that a little\nmore, but ByteCoin suggested that if you're not mining then the only\ntransaction signatures you need to check are not-yet-confirmed\ntransactions to you).\n\n2) Transaction priority / maximum block size / free-transaction area /\ntransaction fees is reworked.  Miners should be making the policy\ndecisions on minimum fee per kilobyte or ECDSA signature check, and\nhow many free transactions (if any) they'll include in the blocks they\ncreate.  And bitcoin clients should be smarter about looking at what\ntransactions are and are not getting into the chain so they can\nsuggest appropriate fees to users.\n\n-- \n--\nGavin Andresen", "summary": "Gavin Andresen proposes implementing green addresses as an extra signature on the first scriptSig in a transaction, allowing for more-than-one-signature transactions."}], "thread_summary": {"title": "Multisignature scriptSigs", "categories": ["Bitcoin-development"], "authors": ["Gavin Andresen"], "messages_count": 1, "total_messages_chars_count": 1777}}, {"title": "[Bitcoin-development] 0.5 release updated", "thread_messages": [{"author": "Gavin Andresen", "date": "2011-10-28T18:33:44", "message_text_only": "Quick update on why there is no final 0.5 release out yet:\n\nShort answer: because I'm really paranoid about bitcoin binary builds,\nand the switch to Qt means a change in the way the builds are done.\n\nLong answer:\n\nLinux builds should be all set; the 'gitian' trusted build process works nicely.\n\nWindows builds are being difficult; we need a gcc expert to help debug\nthe 'gitian' cross-compile (see\nhttps://github.com/bitcoin/bitcoin/pull/587 ).\n\nUnless somebody steps forward and says \"I'll support compiling\nbitcoin-qt/bitcoind with Visual Studio) I'm going to remove\nsrc/makefile.vc and make sure the readmes say that only the mingw\ntoolchain is supported.\n\nMac builds were slightly broken for the 0.4 release (they don't run on\nOSX 10.5-- you need 10.6 or greater). I'm \"recompiling the world\" to\nhopefully fix that, and hope to have mac binaries available soon (let\nme know if you can help test, especially if you have a 32-bit Intel\nmac running 10.5).\n\nOn my wish list for builds (anybody want to volunteer?):\n\nI think it'd be spiffy to have a .pro file to compile bitcoind;\nmaintaining N different makefiles is annoying and error-prone.\n\n-- \n--\nGavin Andresen", "summary": "Bitcoin 0.5 release delayed due to changes in the way builds are done, with Windows builds being particularly difficult and Mac builds being recompiled."}, {"author": "Luke-Jr", "date": "2011-10-28T23:56:01", "message_text_only": "On Friday, October 28, 2011 2:33:44 PM Gavin Andresen wrote:\n> Windows builds are being difficult; we need a gcc expert to help debug\n> the 'gitian' cross-compile (see\n> https://github.com/bitcoin/bitcoin/pull/587 ).\n\nThis is an Ubuntu issue. Can't gitian use something else?\n\n> I think it'd be spiffy to have a .pro file to compile bitcoind;\n> maintaining N different makefiles is annoying and error-prone.\n\nBetter would be a GUI=0/1 option to the bitcoin-qt.pro until a nicer (ideally \nautomake/autoconf) system is implemented...", "summary": "Bitcoin developer seeks help with debugging Windows builds using gitian cross-compile; suggests using a .pro file or GUI option for compiling."}, {"author": "John Smith", "date": "2011-10-29T08:09:06", "message_text_only": "> Better would be a GUI=0/1 option to the bitcoin-qt.pro until a nicer\n> (ideally\n> automake/autoconf) system is implemented...\n>\n\nAre you sure you want to require qmake for the daemon build?\n\nI agree having a unified build system would be nice, but qmake doesn't add\nanything for non-qt software. Better to stick with a makefile.\n\nIf the goal is 'making it easier for the user' maybe it'd be best to make a\nbash script that wraps both, that builds the daemon if possible, and the UI\nif possible, and converts command line flags.\n\nJS\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20111029/ba26ae02/attachment.html>", "summary": "A suggestion was made to add a GUI=0/1 option to bitcoin-qt.pro until a better build system is implemented, but it was questioned if qmake is necessary for non-qt software. A bash script was proposed instead."}], "thread_summary": {"title": "0.5 release updated", "categories": ["Bitcoin-development"], "authors": ["John Smith", "Luke-Jr", "Gavin Andresen"], "messages_count": 3, "total_messages_chars_count": 2413, "convo_summary": "Bitcoin 0.5 release is delayed due to changes in builds, with Windows builds being difficult. A developer seeks help with debugging Windows builds using gitian cross-compile and suggests using a .pro file or GUI option. A suggestion was made to add a GUI=0/1 option to bitcoin-qt.pro until a better build system is implemented."}}, {"title": "[Bitcoin-development] Multi-sig tx execution ideas", "thread_messages": [{"author": "Alan Reiner", "date": "2011-10-28T22:28:30", "message_text_only": "I just posted BIP 0010 to gist : https://gist.github.com/1321518\n\nThe goal is to provide a standard method for proposing how to spend \nmulti-sig TxOuts, and collect signatures without actually having to \nunderstand BTC under-the-hood.  I envision, even without any program \ninstalled, moderately-interested users could figure out this process \nwithout a third-party.  The addition of an installed program that \nautomatically detects .txdp files and intelligently presents the \ninformation to the users, could bring this functionality to even more \nusers.  Perhaps I'm too optimistic, though...\n\nThis is, of course, open for discussion/improvement.  I've talked \nbriefly with Gavin about this, and he suggested Base64 instead of hex \nfor the block-encoding.  I'd lean towards Base58 because developers \nalready have it in their codebase.  Also, the separation of fields by \nunderscore characters could be changed.  Spaces would make it easier for \nC++ to read them in using stream operators \"<<\" and \">>\".\n\n-Alan", "summary": "BIP 0010 proposes a standard method for spending multi-sig TxOuts and collecting signatures without requiring knowledge of BTC. Open for discussion and improvement."}], "thread_summary": {"title": "Multi-sig tx execution ideas", "categories": ["Bitcoin-development"], "authors": ["Alan Reiner"], "messages_count": 1, "total_messages_chars_count": 1011}}, {"title": "[Bitcoin-development] Snowstorm", "thread_messages": [{"author": "Gavin", "date": "2011-10-31T12:30:50", "message_text_only": "We've got no power, so it might be a day or two before I can help verify gitian builds or pull patches.\n\nSent from my iPhone", "summary": "Verification of gitian builds and patch pulling may be delayed due to power outage, with assistance expected to resume in a day or two."}], "thread_summary": {"title": "Snowstorm", "categories": ["Bitcoin-development"], "authors": ["Gavin"], "messages_count": 1, "total_messages_chars_count": 124}}]