[
    {
        "title": "[Bitcoin-development] Coin Control, Send crash on MacOS X",
        "thread_messages": [
            {
                "author": "Warren Togami Jr.",
                "date": "2013-12-01T11:05:28",
                "message_text_only": "https://github.com/litecoin-project/bitcoinomg/commits/0.8.5-OMG6\nhttp://download1.rpmfusion.org/~warren/bitcoin-0.8.5-OMG6/\nI've been backporting patches from master and Litecoin to make a Bitcoin\n0.8 client with more features.  It works quite well on Linux and Win32.\n\nhttp://pastebin.com/g8QqheGc\nToday we discovered a rare crash that can happen on MacOS X. toffoo and\ncoblee reproduced it on MacOS X 10.9 and I reproduced it on 10.6.8. It\nseems to be some kind of race condition involving SendCoinsEntry::clear().\n\n\n   1. 11  QtGui                               0x00e28141\n   QWidget::setFocus(Qt::FocusReason) + 289\n   2. 12  org.bitcoinfoundation.Bitcoin-Qt    0x002ca665\n   SendCoinsEntry::clear() + 101\n\n\nThis build was made with Xcode 3.2.6 on MacOS X with MacPorts qt4-mac\nqt-4.8.4, roughly meant to approximate Gavin's build environment for the\n0.8.x releases.\n\nWith this unfamiliar build environment I have been unsuccessful at building\nmaster so I am unable to confirm if this crash exists there.  I am trying\nqt-4.8.5 next ... but even if I manage to build it, it is exceedingly\ndifficult to reproduce...\n\nWarren\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/def7da00/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-12-04T01:57:00",
                "message_text_only": "On Sun, Dec 1, 2013 at 1:19 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> On Sun, Dec 1, 2013 at 12:05 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n>\n>> https://github.com/litecoin-project/bitcoinomg/commits/0.8.5-OMG6\n>> http://download1.rpmfusion.org/~warren/bitcoin-0.8.5-OMG6/\n>> I've been backporting patches from master and Litecoin to make a Bitcoin\n>> 0.8 client with more features.  It works quite well on Linux and Win32.\n>>\n>> http://pastebin.com/g8QqheGc\n>> Today we discovered a rare crash that can happen on MacOS X. toffoo and\n>> coblee reproduced it on MacOS X 10.9 and I reproduced it on 10.6.8. It\n>> seems to be some kind of race condition involving SendCoinsEntry::clear().\n>>\n>>\n>>    1. 11  QtGui                               0x00e28141\n>>    QWidget::setFocus(Qt::FocusReason) + 289\n>>    2. 12  org.bitcoinfoundation.Bitcoin-Qt    0x002ca665\n>>    SendCoinsEntry::clear() + 101\n>>\n>>\n> I don't think the setFocus should be in clear() in the first place. It\n> conflates clearing the widgets and changing the focus.\n>\n> If the automatic focus change is desirable at all it could be moved to a\n> seperate function \"focusPayTo\".\n>\n> In any case it's just a nicety and should just be removed if it causes\n> problems.\n>\n> Wladimir\n>\n>\nDid as you suggested, removed both setFocus() calls that happen after Send\nis clicked\n\nhttp://pastebin.com/j4adDpsM\nNow it crashes in something else within qt.\n\nI'm trying other things...\n\nWarren\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/182c1fb1/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-04T07:02:48",
                "message_text_only": ">\n> Did as you suggested, removed both setFocus() calls that happen after Send\n>> is clicked\n>>\n>\n> http://pastebin.com/j4adDpsM\n> Now it crashes in something else within qt.\n>\n> I'm trying other things...\n>\n\nAs I've said to you on IRC before, I think the problem is with this loop:\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/qt/sendcoinsdialog.cpp#L261\n\nThis deletes widgets, but Qt may still be referring to them internally, and\n\"Deleting a QObject while pending events are waiting to be delivered can\ncause a crash.\"\n\nCan you try replacing with ->deleteLater()?\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/e963f50d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Coin Control, Send crash on MacOS X",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Warren Togami Jr.",
                "Wladimir"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3712
        }
    },
    {
        "title": "[Bitcoin-development] Floating fees and SPV clients",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-12-01T11:51:46",
                "message_text_only": "Lately I was pondering how to make floating fees and SPV wallets work well\ntogether.\n\nI propose the following plan:\n\n1) 0.9 ships with something dead simple, like a command to query what a\nnode estimates and then clients just take the average, or cross-check a\ncentralised estimate against the P2P network. It's fast to implement and\nsimple, but not very secure or decentralised. However it will allow the\nfeature to launch on some kind of reasonable timeframe.\n\n2) We bump the protocol version and the tx message now gets an optional\nprotobuf buffer stuck on the end. The first thing put in this protobuf is a\nlist of the values of the inputs. Using this data, the fee paid by a\ntransaction can be calculated. In step 2 the data is unauthenticated.\n\n3) Some SPV wallets already set themselves up so that they sync with the\nnetwork in the background, e.g. the Android wallet syncs at least every 24\nhours. This should become more common, using scheduler capabilities built\ninto most operating systems. When the wallet syncs with the network, it\nsets a deliberately very noisy Bloom filter on its peers and waits around\nfor 30-60 seconds or so. The wallet observes some of the broadcasts taking\nplace and records the hashes and associated fees that were paid to disk.\nNext time it syncs, it includes the observed hashes into the Bloom filter\nused to download the chain, and thus learns how quickly they confirmed. It\ncan calculate its own fee estimate from that.\n\n4) Finally, when we next hard fork, we make v2 transactions include the\noutput value in the signature, same as the output script (this proposal has\nbeen on the forums for a while now). That allows the fee data added in step\n2 to be cross-checked against the signatures on the inputs, thus\nauthenticating it.\n\n\nI think this is a small and easy set of steps that would make it quite hard\nto attack - malicious nodes could make it appear that some transactions\nnever confirmed thus seeming to force the price up, but it's easy to simply\nexclude transactions which never confirm at all from the calculations. Plus\nof course you can cross-check nodes against each other to try and catch\nnodes that are failing to match transactions properly.\n\nOne obvious concern is what to do if nodes don't converge on very similar\nestimates. Wallets will always want to pay the lowest fee possible, so that\nmeans they'll always be riding the very edge of what's acceptable, opening\nup tx propagation to random flaky failures if fee estimates change whilst a\ntransaction is in progress, or if some nodes don't calculate the same\nestimates as others.\n\nIf a wallet gets a reject message for a tx that has a fee that are by its\nown estimates acceptable, what should it do? What if only some nodes report\nthat and others don't?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/d06702fb/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-12-01T12:15:04",
                "message_text_only": "On 12/01/2013 12:51 PM, Mike Hearn wrote:\n\n> I propose the following plan:\n\nThanks taking the initiative and writing this up!\n\n> If a wallet gets a reject message for a tx that has a fee that are by\n> its own estimates acceptable, what should it do? What if only some nodes\n> report that and others don't?\n\nAs long as the tx is not confirmed (by a broadcast), apps can offer to\nbump up the fee a little bit."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-01T13:41:52",
                "message_text_only": "> As long as the tx is not confirmed (by a broadcast), apps can offer to\n> bump up the fee a little bit.\n\nUnfortunately there are risks to that approach. \n\nThe most obvious one is that nodes could keep sending reject messages to get wallets to attach ridiculously high fees. If half a wallets peers do this and the other half don\u2019t, then effectively the wallet will double spend against itself. The bad nodes can keep the fat transaction and send it directly to a corrupt miner, no broadcast. If some other miner includes the original normal transaction, no problem, just take it out of the current block. If the corrupt miner finds the current block, they get to claim huge fee premiums.\n\nQuite apart from the problem of malicious nodes/miners, how would you represent this in the wallet GUI? Current wallets are designed on the assumption that 1 payment == 1 transaction == 1 paid fee. If a single payment could have several different fees, and there\u2019s no way to know which you will actually pay until later, then complexity would explode. Even the notion of balance would become even more complicated than it already is.\n\nSo I really don\u2019t like the idea of creating different transactions depending on error messages from remote nodes. The only time when it could make sense is if *all* nodes reject a transaction. Then (assuming no MITM) you can assume the first transaction can be thrown away and a new attempt made.\n\nBut if you think about what the UI flows for that would look like - it\u2019s just a mess.\n\nThere are other risks to fee estimation. Let\u2019s say wallet authors create transactions with exactly the estimated fee needed to get into the next block. But due to mempool skew, estimates vary, and so those transactions don\u2019t propagate cleanly everywhere. Now we have two problems:\n\n1) Unpredictable failure to enter the mempools can lead to double spending and slow confirmations\n\n2) Wallet authors may be tempted to ensure that doesn\u2019t happen by taking the estimate, adding 10% and using that. But then if a bunch of popular wallets all do the same thing, the estimation algorithm might get confused and decide that as everyone seems to be attaching a fee of X+10%, the correct estimate for what fee to attach is X+10%. Then wallets would immediate raise their attached fees again and you\u2019d enter into a infinite upward spiral.\n\nThe more I think about this, the more complicated it gets.\n\nIt\u2019s tempting to try and just push all the complexity onto the merchant side, but one of the best things about Bitcoin is there isn\u2019t any strong notion of \u201cmerchant\u201d - that\u2019s inherent to being peer to peer. So just hand-waving and saying sellers will deal with complicated fee processes is just a punt.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 4127 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/56554bc4/attachment.p7s>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-12-01T16:50:10",
                "message_text_only": "(my post hasn't shown up for an hour, so I'm sending it again)\n\n\nOn 12/01/2013 02:41 PM, Mike Hearn wrote:\n\n>> As long as the tx is not confirmed (by a broadcast), apps can offer to\n>> bump up the fee a little bit.\n>\n> Unfortunately there are risks to that approach.\n\nI assume you're right, since I do not have so much experience with game\ntheory.\n\nAbout the UI:\n\nGenerally, for pending tx I'd like to measure time they're not being\nbroadcast-confirmed and count blocks that they missed being included.\nBoth can be combined into adapting the current generic messages (\"This\npayment should become spendable shortly\" for incoming and \"This payment\nhas not been transmitted yet\" for outgoing transactions). Hint:\nStatistics could be offered by bitcoinj.\n\nFor outgoing transactions, if it is very clear that they're never going\nto be confirmed, I'd like to see a \"Revoke\" button. This would have\nsaved us some support hassles with the transmit bugs. It could also\noffer a \"Top up fee\" button, which would replace the tx by a new one.\nI'm aware about a possible double spend but who cares? It doesn't matter\nwhich of the two transactions gets into the chain, as long as not both\nwill be included."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-01T17:19:14",
                "message_text_only": "> Both can be combined into adapting the current generic messages (\"This\n> payment should become spendable shortly\" for incoming and \"This payment\n> has not been transmitted yet\" for outgoing transactions). \n\nWhat would the new messages say?\n\nWe need to get away from the notion of senders attaching fees anyway. This is the wrong way around because it\u2019s the recipient who cares about double spending risk, not the sender. That\u2019s why merchants keep running into issues with people attaching zero fees. Of course they attach zero fees. They know they aren\u2019t going to double spend. It\u2019s the merchant who cares about getting the security against that.\n\nThe UI for sending money should end up dead simple - no mention of fees anywhere, IMO.\n\nThe UI for receiving money could be a bit more complicated but even then - I think if ordinary people using smartphone wallets are having to think about how quickly they want their transaction to confirm and adjust fees, etc on the receiving side then we\u2019re getting dangerously close to the usability failure zone.\n\nUnfortunately we lack the protocol pieces to get the right UI here :( Someone needs to sit down and figure out what the UI *should* look like, in the ideal world, and then work backwards to figure out what needs to be done to get us there.\n\n> For outgoing transactions, if it is very clear that they're never going\n> to be confirmed, I'd like to see a \"Revoke\" button.\n\nDisagree. There should never be any cases in which a transaction doesn\u2019t confirm. Period. I know there have been bugs with bitcoinj that could cause this in the past, but they were bugs and they got fixed/will get fixed.\n\nSettlement failure is just unacceptable and building a UI around the possibility will just encourage people to think of it as normal, when it should not be so.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 4127 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/7316497c/attachment.p7s>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-12-01T17:40:55",
                "message_text_only": "On 12/01/2013 06:19 PM, Mike Hearn wrote:\n>> Both can be combined into adapting the current generic messages (\"This\n>> payment should become spendable shortly\" for incoming and \"This payment\n>> has not been transmitted yet\" for outgoing transactions).\n>\n> What would the new messages say?\n\nWell, for starters I'd suggest something like\n\n\"This payment did not become spendable since xxx minutes. Check with the\nsender if s/he paid the Bitcoin network fee. Check if your internet\nconnection is working properly.\" (incoming)\n\n\"This payment still has not been transmitted. Check if your internet\nconnection is working properly.\" (outgoing)\n\n> We need to get away from the notion of senders attaching fees anyway.\nThis is the wrong way around because it\u2019s the recipient who cares about\ndouble spending risk, not the sender. That\u2019s why merchants keep running\ninto issues with people attaching zero fees. Of course they attach zero\nfees. They know they aren\u2019t going to double spend. It\u2019s the merchant who\ncares about getting the security against that.\n\nGuess you're right. But as you said, we're not there yet.\n\n> The UI for sending money should end up dead simple - no mention of\nfees anywhere, IMO.\n\nAgreed, if the sender does not need to pay a fee any more. On the\nreceiving side it of course needs to be mentioned. (Or the other way\nround, as of today.)\n\n> Unfortunately we lack the protocol pieces to get the right UI here :(\nSomeone needs to sit down and figure out what the UI *should* look like,\nin the ideal world, and then work backwards to figure out what needs to\nbe done to get us there.\n\n(The ideal world doesn't need a UI for money.)\n\n>> For outgoing transactions, if it is very clear that they're never going\n>> to be confirmed, I'd like to see a \"Revoke\" button.\n>\n> Disagree. There should never be any cases in which a transaction\ndoesn\u2019t confirm. Period. I know there have been bugs with bitcoinj that\ncould cause this in the past, but they were bugs and they got fixed/will\nget fixed.\n>\n> Settlement failure is just unacceptable and building a UI around the\npossibility will just encourage people to think of it as normal, when it\nshould not be so.\n\nI fully understand your point of view. However, its not the reality\ncurrently. (Hopefully it is, after the fixes to bitcoinj.)"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-01T17:52:27",
                "message_text_only": "> \"This payment did not become spendable since xxx minutes. Check with the\n> sender if s/he paid the Bitcoin network fee. Check if your internet\n> connection is working properly.\" (incoming)\n\nThat seems reasonable.\n\nThe other message should be implementable today, I think? If numBroadcastPeers > 0 post 0.10.3 then you know the tx made it out to the internet.\n\nUnfortunately if nodes start to diverge a lot in terms of what they will accept, then \u201ctransmitted\u201d is no longer a clean binary yes/no thing. Guess we\u2019ll have to jump that hurdle when we come to it.\n\n> Guess you're right. But as you said, we're not there yet.\n\nThe payment protocol at least would need some notion of fee, or possibly (better?) the ability for a recipient to specify some inputs as well as some outputs.\n\nOriginally I think we were hoping for child-pays-for-parent. I guess that needs someone to sit down and focus on it for a while, assuming we still think that\u2019s a good idea.\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 4127 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/e59627ff/attachment.p7s>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-01T18:12:11",
                "message_text_only": "On Sun, Dec 01, 2013 at 06:19:14PM +0100, Mike Hearn wrote:\n> > Both can be combined into adapting the current generic messages (\"This\n> > payment should become spendable shortly\" for incoming and \"This payment\n> > has not been transmitted yet\" for outgoing transactions). \n> \n> What would the new messages say?\n> \n> We need to get away from the notion of senders attaching fees anyway. This is the wrong way around because it\u2019s the recipient who cares about double spending risk, not the sender. That\u2019s why merchants keep running into issues with people attaching zero fees. Of course they attach zero fees. They know they aren\u2019t going to double spend. It\u2019s the merchant who cares about getting the security against that.\n> \n> The UI for sending money should end up dead simple - no mention of fees anywhere, IMO.\n> \n> The UI for receiving money could be a bit more complicated but even then - I think if ordinary people using smartphone wallets are having to think about how quickly they want their transaction to confirm and adjust fees, etc on the receiving side then we\u2019re getting dangerously close to the usability failure zone.\n> \n> Unfortunately we lack the protocol pieces to get the right UI here :( Someone needs to sit down and figure out what the UI *should* look like, in the ideal world, and then work backwards to figure out what needs to be done to get us there.\n> \n> > For outgoing transactions, if it is very clear that they're never going\n> > to be confirmed, I'd like to see a \"Revoke\" button.\n> \n> Disagree. There should never be any cases in which a transaction doesn\u2019t confirm. Period. I know there have been bugs with bitcoinj that could cause this in the past, but they were bugs and they got fixed/will get fixed.\n> \n> Settlement failure is just unacceptable and building a UI around the possibility will just encourage people to think of it as normal, when it should not be so.\n\nBitcoin is and always will be limited in capacity - transactions may not\nconfirm in a reasonable about of time because of high-demand and/or DoS\nattacks. Giving senders and/or receivers the ability to increase fees\nafter the fact is the only way you'll ever be able to deal with these\nsituations. Of course, in those situations revoke isn't going to be 100%\nreliable until the txins get spent elsewhere, but that just indicates\nthe UI problem is around that kind of functionality is subtle.\n\n\nre: merchants paying tx fees, child-pays-for-parent is inefficient, and\nmicropayments direct to miners isn't implemented. (though I did write up\na rough sketch of how to do that in a decentralized fashion on\n#bitcoin-dev) Propose something concrete.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/daa712d9/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-01T18:18:07",
                "message_text_only": "> Bitcoin is and always will be limited in capacity - transactions may not\n> confirm in a reasonable about of time because of high-demand and/or DoS\n> attacks.\n\nI agree in the general case, but I was talking about the mobile wallet case specifically (i.e. people who are sending money between themselves or making small purchases of physical things). I think Bitcoin should be able to scale to handle these sorts of ordinary every-day transactions. Where I\u2019d expect to see transactions falling off the edge is in more specialised cases like very small single micropayments, or \u201coptional\u201d internal transactions like mixing/re/defragmentation of wallets that don\u2019t correspond to an actual payment. Those sorts of transactions would I guess be the first to go when faced with a sudden capacity crunch, but they wouldn\u2019t show up in a mobile wallet UI anyway.\n\n> re: merchants paying tx fees, child-pays-for-parent is inefficient\n\nI know the existing code is, but is that fundamentally the case or just how the code has been written? I haven\u2019t looked at this issue much but I know you\u2019ve worked on it, so I\u2019m curious to learn about why it\u2019s inefficient and whether there are any fixes possible.\t\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 4127 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/db6d97f7/attachment.p7s>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-01T18:37:49",
                "message_text_only": "On Sun, Dec 01, 2013 at 07:18:07PM +0100, Mike Hearn wrote:\n> > Bitcoin is and always will be limited in capacity - transactions may not\n> > confirm in a reasonable about of time because of high-demand and/or DoS\n> > attacks.\n> \n> I agree in the general case, but I was talking about the mobile wallet case specifically (i.e. people who are sending money between themselves or making small purchases of physical things). I think Bitcoin should be able to scale to handle these sorts of ordinary every-day transactions. Where I\u2019d expect to see transactions falling off the edge is in more specialised cases like very small single micropayments, or \u201coptional\u201d internal transactions like mixing/re/defragmentation of wallets that don\u2019t correspond to an actual payment. Those sorts of transactions would I guess be the first to go when faced with a sudden capacity crunch, but they wouldn\u2019t show up in a mobile wallet UI anyway.\n\nMaybe, maybe not. We have no idea what fees will be because the system's\nentire capacity is, and always will be, limited. That's just how\nfundementally unscalable systems with huge global state work. What\ndemand will be for that limited capacity is unknown.\n\n\n> > re: merchants paying tx fees, child-pays-for-parent is inefficient\n> \n> I know the existing code is, but is that fundamentally the case or just how the code has been written? I haven\u2019t looked at this issue much but I know you\u2019ve worked on it, so I\u2019m curious to learn about why it\u2019s inefficient and whether there are any fixes possible.\t\n\nNo, Luke's existing code uses good algorithms with O(n) scaling for n\ntransactions. The inefficiency is needing a second transaction, bloating\nthe blockchain and driving up fees.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131201/b55f69e4/attachment.sig>"
            },
            {
                "author": "Patrick Mead",
                "date": "2013-12-02T13:54:30",
                "message_text_only": "First time posting to this mailing list so feel free to ignore me if\nthis is a stupid idea.\n\n\nOn Mon, Dec 2, 2013 at 3:49 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n> We need to get away from the notion of senders attaching fees anyway. This is the wrong\n> way around because it\u2019s the recipient who cares about double spending risk, not the sender.\n>\n\n\nIt seems to me that a common problem currently revolves around\naccepting transactions in\nretail scenarios, such as paying for a sandwich from Subway. A\nsolution could be to give the\nvendor responsibility for setting the fee, which means they can choose\nthe trade-off that works\nbest for them in terms of fee size vs. speed of processing.\n\nIdea:\nAdd a \"fee\" parameter to the payment URI specification.\nWhen processing the transaction, the customer's UI should show only\nthe total price, including\nboth the transfer amount and the fee. The vendor only accepts the\ntransaction if the customer\nuses the right amount and fee. If the fee is too small (for example,\nthe user might be using an\nolder wallet and has selected a fee of zero), the vendor can issue a\nrefund transaction\nimmediately and tell the user to try again.\n\nPros:\n- could easily be implemented immediately\n- old wallets would still be supported by just manually entering the\nfee as users do now\n- no greater risk of double spending on either side\n- maintains the distributed nature of the system\n- relies on humans to judge the fee (who are much less likely to\nspiral infinitely upwards)\n- flexible enough to support varying sizes of transaction and varying\ndegrees of security\n\nCons\n- requires the vendor to have sufficient understanding of Bitcoin to\nmake the trade-off\n- doesn't solve the problem of selecting a fee for transactions\nbetween individuals/laymen\n- doesn't solve fee selection for automated transactions such as\nmixing/de/refragmentation\n\n\nThoughts?"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-02T14:33:46",
                "message_text_only": "Right, as I said earlier:\n\n\"The payment protocol at least would need some notion of fee, or possibly\n(better?) the ability for a recipient to specify some inputs as well as\nsome outputs.\"\n\nHaving thought about it a bit more, I think it's better to just have a fee\nfield that lets the receiver request the sender to attach the given fee.\nThe outputs would have less value associated with them, so effectively the\nseller folds the fee into the price. If the seller is charging a round\nprice like 1 mBTC, the user sees \"1 mBTC\" as the price, even if behind the\nscenes the created tx only sends 0.99999 BTC\n\nAllowing specification of inputs seems to add too much complexity in other\ncases, like when value isn't specified at all.\n\n\nOn Mon, Dec 2, 2013 at 2:54 PM, Patrick Mead <patrick at meadia.com.au> wrote:\n\n> First time posting to this mailing list so feel free to ignore me if\n> this is a stupid idea.\n>\n>\n> On Mon, Dec 2, 2013 at 3:49 AM, Mike Hearn <mike at plan99.net> wrote:\n> >\n> > We need to get away from the notion of senders attaching fees anyway.\n> This is the wrong\n> > way around because it\u2019s the recipient who cares about double spending\n> risk, not the sender.\n> >\n>\n>\n> It seems to me that a common problem currently revolves around\n> accepting transactions in\n> retail scenarios, such as paying for a sandwich from Subway. A\n> solution could be to give the\n> vendor responsibility for setting the fee, which means they can choose\n> the trade-off that works\n> best for them in terms of fee size vs. speed of processing.\n>\n> Idea:\n> Add a \"fee\" parameter to the payment URI specification.\n> When processing the transaction, the customer's UI should show only\n> the total price, including\n> both the transfer amount and the fee. The vendor only accepts the\n> transaction if the customer\n> uses the right amount and fee. If the fee is too small (for example,\n> the user might be using an\n> older wallet and has selected a fee of zero), the vendor can issue a\n> refund transaction\n> immediately and tell the user to try again.\n>\n> Pros:\n> - could easily be implemented immediately\n> - old wallets would still be supported by just manually entering the\n> fee as users do now\n> - no greater risk of double spending on either side\n> - maintains the distributed nature of the system\n> - relies on humans to judge the fee (who are much less likely to\n> spiral infinitely upwards)\n> - flexible enough to support varying sizes of transaction and varying\n> degrees of security\n>\n> Cons\n> - requires the vendor to have sufficient understanding of Bitcoin to\n> make the trade-off\n> - doesn't solve the problem of selecting a fee for transactions\n> between individuals/laymen\n> - doesn't solve fee selection for automated transactions such as\n> mixing/de/refragmentation\n>\n>\n> Thoughts?\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349351&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131202/9f1e85d6/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-12-02T14:37:45",
                "message_text_only": "On Mon, Dec 2, 2013 at 9:33 AM, Mike Hearn <mike at plan99.net> wrote:\n> \"The payment protocol at least would need some notion of fee, or possibly\n> (better?) the ability for a recipient to specify some inputs as well as some\n> outputs.\"\n\n<vendor hat: on>\n\nBitPay noticed this detail last week.  We were noticing that some\ntransactions were not even reaching our bitcoind border routers (edge\nnodes), due to low/no fees.  That led to a long discussion of all\nthings fee-related.  SPV fees are a big issue.  Getting\nchild-pays-for-parent in some form out to miners is another.  Getting\na smart, dynamic fee market Gavin mentions is a big need.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-02T14:44:50",
                "message_text_only": "PPv1 doesn't have any notion of fee unfortunately. I suppose it could be\nadded easily, but we also need to launch the existing feature set.\n\nThere's code pending review to implement PPv1 in bitcoinj, unfortunately\nit's currently not passing unit tests and the author can't figure out why.\nI didn't have time to debug it yet myself. I'm hopeful we can get it\nworking and merged by EOY.\n\nIt may be time to start talking about timelines for 0.9. I am wondering if\nfloating fees should be broken out of the 0.9 release and launched in a\nquick 0.10 followup - if that were to be done then I think 0.9 could go to\nbeta relatively soon, like early next year. There have been a lot of\nimprovements already and it'd be a shame to block them all further.\n\n\n\nOn Mon, Dec 2, 2013 at 3:37 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Mon, Dec 2, 2013 at 9:33 AM, Mike Hearn <mike at plan99.net> wrote:\n> > \"The payment protocol at least would need some notion of fee, or possibly\n> > (better?) the ability for a recipient to specify some inputs as well as\n> some\n> > outputs.\"\n>\n> <vendor hat: on>\n>\n> BitPay noticed this detail last week.  We were noticing that some\n> transactions were not even reaching our bitcoind border routers (edge\n> nodes), due to low/no fees.  That led to a long discussion of all\n> things fee-related.  SPV fees are a big issue.  Getting\n> child-pays-for-parent in some form out to miners is another.  Getting\n> a smart, dynamic fee market Gavin mentions is a big need.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131202/7981a1ce/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-12-02T14:47:41",
                "message_text_only": "Current rough timeline proposed for 0.9 was end-of-January, IIRC.\n\nOn Mon, Dec 2, 2013 at 9:44 AM, Mike Hearn <mike at plan99.net> wrote:\n> PPv1 doesn't have any notion of fee unfortunately. I suppose it could be\n> added easily, but we also need to launch the existing feature set.\n>\n> There's code pending review to implement PPv1 in bitcoinj, unfortunately\n> it's currently not passing unit tests and the author can't figure out why. I\n> didn't have time to debug it yet myself. I'm hopeful we can get it working\n> and merged by EOY.\n>\n> It may be time to start talking about timelines for 0.9. I am wondering if\n> floating fees should be broken out of the 0.9 release and launched in a\n> quick 0.10 followup - if that were to be done then I think 0.9 could go to\n> beta relatively soon, like early next year. There have been a lot of\n> improvements already and it'd be a shame to block them all further.\n>\n>\n>\n> On Mon, Dec 2, 2013 at 3:37 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n>>\n>> On Mon, Dec 2, 2013 at 9:33 AM, Mike Hearn <mike at plan99.net> wrote:\n>> > \"The payment protocol at least would need some notion of fee, or\n>> > possibly\n>> > (better?) the ability for a recipient to specify some inputs as well as\n>> > some\n>> > outputs.\"\n>>\n>> <vendor hat: on>\n>>\n>> BitPay noticed this detail last week.  We were noticing that some\n>> transactions were not even reaching our bitcoind border routers (edge\n>> nodes), due to low/no fees.  That led to a long discussion of all\n>> things fee-related.  SPV fees are a big issue.  Getting\n>> child-pays-for-parent in some form out to miners is another.  Getting\n>> a smart, dynamic fee market Gavin mentions is a big need.\n>>\n>> --\n>> Jeff Garzik\n>> Bitcoin core developer and open source evangelist\n>> BitPay, Inc.      https://bitpay.com/\n>\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-03T01:40:35",
                "message_text_only": "On Tue, Dec 3, 2013 at 12:44 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> PPv1 doesn't have any notion of fee unfortunately. I suppose it could be\n> added easily, but we also need to launch the existing feature set.\n>\n\nLets bang out a merchant-pays-fee extension.\n\nHow about:\n\nSPEC:\n\n    optional uint64 allowfee    tag number=1000\n\nAllow up to allowfee satoshis to be deducted from the amount paid to be\nused to pay Bitcoin network transaction fees. A wallet implementation must\nnot reduce the amount paid for fees more than allowfee, and transaction\nfees must be equal to or greater than the amount reduced.\n\n:ENDSPEC\n\nRationale: we don't want wallet software giving users discounts-- sending\ntransactions that are amount-allowfee without paying any fee.  We also want\nto allow users to pay MORE in fees, if they need to (fragmented wallet,\nmaybe, or big CoinJoin transaction) or decide to.\n\n\nPS: I think there was also consensus that the BIP72  request=...   should\nbe shortened to just r=... (save 6 chars in QR codes).  Unless somebody\nobjects, I'll change the BIP and the reference implementation code to make\nit so...\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/6bd7b54f/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-03T10:06:39",
                "message_text_only": "On Tue, Dec 3, 2013 at 2:40 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n>     optional uint64 allowfee    tag number=1000\n>\n\nLet's just use a normal/low tag number. The extensions mechanism is great\nfor people who want to extend the protocol outside the core development\nprocess. It'd be weird if nobody ever used the low numbers again though.\n\nTag numbers are varint encoded so using smaller ones does have a minor\nefficiency benefit, it's not just aesthetics :)\n\n\n> Allow up to allowfee satoshis to be deducted from the amount paid to be\n> used to pay Bitcoin network transaction fees. A wallet implementation must\n> not reduce the amount paid for fees more than allowfee, and transaction\n> fees must be equal to or greater than the amount reduced.\n>\n\nHmmm. Why \"allow\"? Should it not be called min_fee instead? Wallets would\nhave to attach at least that much in fees, right?\n\nAlso, why describe it as reducing the amount paid? Which output would be\nreduced in value? Why not just have it be added to the total value\ndisplayed to the user and the outputs are left alone/not reduced.\n\n\n> We also want to allow users to pay MORE in fees, if they need to\n> (fragmented wallet, maybe, or big CoinJoin transaction) or decide to.\n>\n\nI like the idea but it seems this gets us back to the original problem -\nsenders don't care about confirmations, ever, not even if they make an\nannoying set of transactions. The protocol allows users to submit\ntransactions directly to receivers, I guess, if the receiver does not like\nthe transactions they get they could potentially reject the payment. But\nI'd hope that's really rare.\n\n\n> PS: I think there was also consensus that the BIP72  request=...   should\n> be shortened to just r=... (save 6 chars in QR codes).  Unless somebody\n> objects, I'll change the BIP and the reference implementation code to make\n> it so...\n>\n\nSweet, thanks!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/26e3aaec/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-12-03T10:36:50",
                "message_text_only": "I dont like the idea of putting the min fee in the hands of the receiver.\nSeems like that will work against the best interests of senders in the long\nrun.\n\nWhy not try a different path of calculating the min fee like difficulty\nretarget. You can analyse the last 2016 blocks to find the average fee\naccepted per kb (which would include transactions that were included\nwithout fees) and then write that into the block as a soft recommendation\nthat wallets could use in the UI. This way the price can vary up and down\naccording to what people were willing to spend on fees and miners willing\nto accept.\n\nI absolutely do not trust vendors to set fees. I think it has to be based\non what senders are willing to pay and what miners are willing to accept.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/17a85798/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-03T10:45:33",
                "message_text_only": "On Tue, Dec 3, 2013 at 11:36 AM, Drak <drak at zikula.org> wrote:\n\n> I dont like the idea of putting the min fee in the hands of the receiver.\n> Seems like that will work against the best interests of senders in the long\n> run.\n>\n\nSenders have no interest in ever attaching any kind of fee, which is one\nreason we explored child-pays-for-parent for a while. It's not the sender\nwho cares about double spending risk. Left to their own devices, all\nsenders would always attach no fee at all (or rather: whatever the min was\nto get the transaction relayed to the merchant).\n\nHowever, receivers do want a fee attached, and ideally we would do this\nwithout redundant transactions. Hence, receivers asking senders to attach a\nfee and effectively folding it into the price that is paid. That is, if you\ngo into a restaurant and the menu says \"Burger: 10mBTC\" then when you come\nto pay, what you see on your phone screen is 10mBTC. The fact that actually\nthe shop with receiver 9.9mBTC and the tx fee is 0.1mBTC is hidden in the\nuser interface - creating a situation like many others, where receivers eat\na transaction cost. For instance in Europe sales taxes are included in the\nprice, not attached separately later.\n\nThere's no need to trust the vendor. If a vendor asks for a ridiculously\nhigh tx fee, it will just surface as uncompetitively priced goods/services.\nBuyers will go elsewhere.\n\n\n> Why not try a different path of calculating the min fee like difficulty\n> retarget. You can analyse the last 2016 blocks to find the average fee\n> accepted per kb (which would include transactions that were included\n> without fees) and then write that into the block as a soft recommendation\n> that wallets could use in the UI. This way the price can vary up and down\n> according to what people were willing to spend on fees and miners willing\n> to accept.\n>\n\nThat's what fee estimation does, essentially, minus the encoding into\nblocks. Once you start getting miners telling people what fees are directly\nyou run into cases where they might try to lie about their behaviour or\notherwise influence the average. Querying all nodes avoids that problem.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/ea2876a4/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-12-03T11:04:53",
                "message_text_only": "On 3 December 2013 10:45, Mike Hearn <mike at plan99.net> wrote:\n\n> On Tue, Dec 3, 2013 at 11:36 AM, Drak <drak at zikula.org> wrote:\n>\n>> I dont like the idea of putting the min fee in the hands of the receiver.\n>> Seems like that will work against the best interests of senders in the long\n>> run.\n>>\n>\n> Senders have no interest in ever attaching any kind of fee, which is one\n> reason we explored child-pays-for-parent for a while. It's not the sender\n> who cares about double spending risk. Left to their own devices, all\n> senders would always attach no fee at all (or rather: whatever the min was\n> to get the transaction relayed to the merchant).\n>\n\nI respectfully disagree. Senders need their funds to be received. The\nincentive is right there. Miners want mining fees. So if you want to pay\nfor something, you need to make sure payment arrives. Senders know that if\nthey exclude the fee it might not arrive at all. Miners increasingly ignore\nno or low fees. So those two agents together ensure there is a fee more\nthan not. If what you said was true, we would hardly see fees being paid at\nall, but on the contrary we see lots of fees, and much higher than the\nminimum 0.0001/kb rate that is currently required.\n\nMerchants will just include ridiculous fees - there are some exchanges that\ndo it already - MtGox being the famous example requires a 0.001 fee 10x\nhigher than the network rate - the CEO does it because he says \"it's\nbetter\". That's not a fee going to MtGox, that is the miner fee and they\nhave no plans to reduce it.\n\nTypically vendor software may not get updated and or lag behind with fat\nfees never decreasing or decreasing way too slowly - it's just not fluid or\ndynamic enough when it rests with the vendor.\n\nHowever, receivers do want a fee attached,\n>\n\nNo - receivers want to be paid. If they are not paid they wont dispatch the\ngoods or service. Neither party is happy in that circumstance. The\nincentive that the payment confirms is there naturally.\n\n\n> That's what fee estimation does, essentially, minus the encoding into\n> blocks. Once you start getting miners telling people what fees are directly\n> you run into cases where they might try to lie about their behaviour or\n> otherwise influence the average. Querying all nodes avoids that problem.\n>\n\nMiners cant lie about fees accepted because that's part of the transaction.\nWhen Alice sends funds to Bob it includes the fee information and that is\nincluded in the block. There is no way to fake it. The average fee paid is\nprovable - so there is no need to query nodes at all, you simply look at\nthe blockchain. You dont even need to write it into the blockchain since it\ncan be calculated from the blockchain, it would just make it simpler.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/55522461/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-03T11:07:30",
                "message_text_only": "Ok, revised spec:\n\nSPEC:\n\nmessage PaymentDeatils {\n    ...\n    optional uint64 minfee    tag number=8\n\nPay at least minfee satoshis in transaction fees. Wallet software should\nadd minfee to the amount the user authorizes and pays, and include at least\nminfee in the transaction created to pay miner's transaction fees. Wallet\nsoftware may request that the user pays more, if it must create a complex\ntransaction or judges that minfee is not sufficient for the transaction to\nbe accepted by the network..\n\n:ENDSPEC\n\nMaking it fee-per-kilobyte is a bad idea, in my opinion; users don't care\nhow many kilobytes their transactions are, and they will just be confused\nif they're paying for a 10mBTC burger and are asked to pay 10.00011 or\n9.9994 because the merchant has no idea how many kilobytes the paying\ntransaction will be.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/2e21a6a1/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-03T11:29:03",
                "message_text_only": "On Tue, Dec 3, 2013 at 12:07 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> Making it fee-per-kilobyte is a bad idea, in my opinion; users don't care\n> how many kilobytes their transactions are, and they will just be confused\n> if they're paying for a 10mBTC burger and are asked to pay 10.00011 or\n> 9.9994 because the merchant has no idea how many kilobytes the paying\n> transaction will be.\n>\n\nWouldn't the idea be that the user always sees 10mBTC no matter what, but\nthe receiver may receive less if the user decides to pay with a huge\ntransaction?\n\nIt may be acceptable that receivers don't always receive exactly what they\nrequested, at least for person-to-business transactions.  For\nperson-to-person transactions of course any fee at all is confusing because\nyou intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the\nother end. I wonder if we'll end up in a world where buying things from\nshops involves paying fees, and (more occasional?) person-to-person\ntransactions tend to be free and people just understand that the money\nisn't going to be spendable for a while. Or alternatively that wallets let\nyou override the safeguards on spending unconfirmed coins when the user is\nsure that they trust the sender.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/166be5c6/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-03T11:37:25",
                "message_text_only": "On Tue, Dec 03, 2013 at 12:29:03PM +0100, Mike Hearn wrote:\n> On Tue, Dec 3, 2013 at 12:07 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n> \n> > Making it fee-per-kilobyte is a bad idea, in my opinion; users don't care\n> > how many kilobytes their transactions are, and they will just be confused\n> > if they're paying for a 10mBTC burger and are asked to pay 10.00011 or\n> > 9.9994 because the merchant has no idea how many kilobytes the paying\n> > transaction will be.\n> >\n> \n> Wouldn't the idea be that the user always sees 10mBTC no matter what, but\n> the receiver may receive less if the user decides to pay with a huge\n> transaction?\n> \n> It may be acceptable that receivers don't always receive exactly what they\n> requested, at least for person-to-business transactions.  For\n> person-to-person transactions of course any fee at all is confusing because\n> you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the\n> other end. I wonder if we'll end up in a world where buying things from\n> shops involves paying fees, and (more occasional?) person-to-person\n> transactions tend to be free and people just understand that the money\n> isn't going to be spendable for a while. Or alternatively that wallets let\n> you override the safeguards on spending unconfirmed coins when the user is\n> sure that they trust the sender.\n\nPerson-to-person payments are an *excellent* argument for keeping fees\nvisible to end-users; people will pay other people commonly in Bitcoin\nand they will be very confused if those transactions act weirdly\ndifferently than payments to merchants.\n\n\nNAK on unconfirmed overrides - if something goes wrong even by accident\nit just makes fixing the problem much harder and less intuitive.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/23bebdf3/attachment.sig>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-03T11:41:10",
                "message_text_only": ">\n> Wouldn't the idea be that the user always sees 10mBTC no matter what, but\n> the receiver may receive less if the user decides to pay with a huge\n> transaction?\n>\n\nIf users want to pay with a huge transaction then it seems to me the user\nshould cover that cost. Allowing users to pay merchants with 100K\ntransactions full of dust and expecting them to eat the cost seems like a\ngreat way to enable bleed-the-merchant-dry attacks.\n\n\nRE: hiding or showing fees:  I pointed out to Peter that there doesn't have\nto be One True Answer.  Let wallets experiment with either hiding or\nexposing fees, and may the best user experience win.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/59fe56b9/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-03T11:46:43",
                "message_text_only": "On Tue, Dec 3, 2013 at 12:41 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n>\n> If users want to pay with a huge transaction then it seems to me the user\n> should cover that cost. Allowing users to pay merchants with 100K\n> transactions full of dust and expecting them to eat the cost seems like a\n> great way to enable bleed-the-merchant-dry attacks.\n>\n\nA merchant can always refuse the payment and refund it if that's a\npractical problem. I doubt it would be though. If a user is trying to buy\nsomething from the merchant, they will want it to work, and it'll be up to\nthe developers of the wallet they're using to ensure it never does anything\nobnoxious or unacceptable that would result in people hating to receive\nmoney from that app.\n\n\n> RE: hiding or showing fees:  I pointed out to Peter that there doesn't\n> have to be One True Answer.  Let wallets experiment with either hiding or\n> exposing fees, and may the best user experience win.\n>\n\nSure. I think there will be experimentation in this regard.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/382b9201/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-03T11:54:41",
                "message_text_only": ">\n> A merchant can always refuse the payment and refund it if that's a\n> practical problem.\n>\n\nNo, they can't, at least not in bitcoin-qt:  when the user pokes the SEND\nbutton, the transaction is broadcast on the network, and then the merchant\nis also told with the Payment/PaymentACK round-trip.\n\nAllowing merchants to cancel (e.g. having a PaymentNACK) makes\nimplementation harder, and brings up nasty issues if we want to allow\nCoinJoin or CoinJoin-like transactions as payments to merchants.\n Bitcoin-Qt ALREADY allows you to pay several PaymentRequests with one\ntransaction; handling the case where one merchant gives you a PaymentACK\nand another gives you (or wants to give you) a PaymentNACK is a nightmare.\n\n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/7df4c2e4/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-12-03T12:05:21",
                "message_text_only": "On 3 December 2013 11:46, Mike Hearn <mike at plan99.net> wrote:\n\n> On Tue, Dec 3, 2013 at 12:41 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n>>\n>> If users want to pay with a huge transaction then it seems to me the user\n>> should cover that cost. Allowing users to pay merchants with 100K\n>> transactions full of dust and expecting them to eat the cost seems like a\n>> great way to enable bleed-the-merchant-dry attacks.\n>>\n>\n> A merchant can always refuse the payment and refund it if that's a\n> practical problem. I doubt it would be though. If a user is trying to buy\n> something from the merchant, they will want it to work, and it'll be up to\n> the developers of the wallet they're using to ensure it never does anything\n> obnoxious or unacceptable that would result in people hating to receive\n> money from that app.\n>\n\nRefunds in this circumstance would be problematic because someone is going\nto lose because they have to pay the fee. If the sender's money is refunded\nminus the fee, they will be unhappy. And the merchant will be unhappy about\nhaving had an unacceptable transaction they have to send back, and eat a\nfee for the privilege.\n\nThis kind of situation needs to be avoided at all costs.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/85ad8acd/attachment.html>"
            },
            {
                "author": "Taylor Gerring",
                "date": "2013-12-03T11:57:23",
                "message_text_only": "On Dec 3, 2013, at 12:29 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> It may be acceptable that receivers don't always receive exactly what they requested, at least for person-to-business transactions.  For person-to-person transactions of course any fee at all is confusing because you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the other end. I wonder if we'll end up in a world where buying things from shops involves paying fees, and (more occasional?) person-to-person transactions tend to be free and people just understand that the money isn't going to be spendable for a while.\n\n\n> person-to-business transactions.  For person-to-person transactions\nWhy should there be two classes of transactions? Where does paying a local business at a farmer\u2019s stand lie in that realm? Transactions should work the same regardless of who is on the receiving end.\n\n> any fee at all is confusing because you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the other end\nThe paradigm of sending money has an explicit cost is not new... I think people are used to Western Union/PayPal and associated fees, no?  It\u2019s okay to have a fee if it\u2019s reasonable, so let\u2019s inform the user what the estimated cost is to send a transaction in a reasonable amount of time.\n\n>  wonder if we'll end up in a world where buying things from shops involves paying fees\nI stayed in a hotel for the first night here here in Milan, and there was an (anticipated) surcharge for the use of credit over cash. Again, nothing new here.\n\n\nFees are only confusing because existing clients do a terrible job of presenting the information to the user. In Hive Wallet, I\u2019m of the opinion that we should inform the user in an intuitive way to let them make an informed decision.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/7758e30c/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-03T12:07:34",
                "message_text_only": "On Tue, Dec 03, 2013 at 12:57:23PM +0100, Taylor Gerring wrote:\n> \n> On Dec 3, 2013, at 12:29 PM, Mike Hearn <mike at plan99.net> wrote:\n> \n> > It may be acceptable that receivers don't always receive exactly what they requested, at least for person-to-business transactions.  For person-to-person transactions of course any fee at all is confusing because you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the other end. I wonder if we'll end up in a world where buying things from shops involves paying fees, and (more occasional?) person-to-person transactions tend to be free and people just understand that the money isn't going to be spendable for a while.\n> \n> \n> > person-to-business transactions.  For person-to-person transactions\n> Why should there be two classes of transactions? Where does paying a local business at a farmer\u2019s stand lie in that realm? Transactions should work the same regardless of who is on the receiving end.\n> \n> > any fee at all is confusing because you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the other end\n> The paradigm of sending money has an explicit cost is not new... I think people are used to Western Union/PayPal and associated fees, no?  It\u2019s okay to have a fee if it\u2019s reasonable, so let\u2019s inform the user what the estimated cost is to send a transaction in a reasonable amount of time.\n\nIndeed.\n\nTransparency on fees is going to be good from a marketing point of view\nas well: fact is, Bitcoin transations have fees involved, and if we're\nup-front and honest about those fees and what they are and why, we\ndemystify the system and give people the confidence to tell others about\nthe cost-advantages of Bitcoin, and at the same time, combat fud about\nfees with accurate and honest information.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/a2ca1e26/attachment.sig>"
            },
            {
                "author": "Jamie McNaught",
                "date": "2013-12-03T13:20:11",
                "message_text_only": "Hi all, first post so go easy on me!\n\nBackground/Intro: I'm a C/C++ software engineer with a keen interest in\nBitcoin working for everyone. I've spent the last couple of months pitching\nBitcoin to merchants & end users (previously I mined),\n\nWhile I agree as Peter said, transparency with fees is good and leaving it\nto the wallet designer to decide to either show / hide these (as Gavin\nsuggested) there is no denying that users hate fees/charges. That's why in\nthe UK so many online retailers offer free delivery (again perceived as a\nzero value add charge). Infact, if you ask the average consumer, they only\nhave a mild inkling that there are fees paid by the merchants for using\ncredit cards.\n\nSo I'd agree with Gavin's proposed spec in an optional uint64 minfee which\nsenders(wallets) should deduct from the total paid to the receiver. If\nhowever the sender is doing a dust collection txn (surely hugely unusual\nfor legit users?) then the sender should pay the additional costs. Does\nthat make \"minfee\" actually \"minfeeperkb\"? Perhaps, but wallets should aim\nto not display such implementation details.\n\nAs a newb though, I have to ask, how does the receiver/requester/merchant\nenforce these fee requests are respected?\n\n\n\n\nOn 3 December 2013 12:07, Peter Todd <pete at petertodd.org> wrote:\n\n> On Tue, Dec 03, 2013 at 12:57:23PM +0100, Taylor Gerring wrote:\n> >\n> > On Dec 3, 2013, at 12:29 PM, Mike Hearn <mike at plan99.net> wrote:\n> >\n> > > It may be acceptable that receivers don't always receive exactly what\n> they requested, at least for person-to-business transactions.  For\n> person-to-person transactions of course any fee at all is confusing because\n> you intuitively expect that if you send 1 mBTC, then 1 mBTC will arrive the\n> other end. I wonder if we'll end up in a world where buying things from\n> shops involves paying fees, and (more occasional?) person-to-person\n> transactions tend to be free and people just understand that the money\n> isn't going to be spendable for a while.\n> >\n> >\n> > > person-to-business transactions.  For person-to-person transactions\n> > Why should there be two classes of transactions? Where does paying a\n> local business at a farmer\u2019s stand lie in that realm? Transactions should\n> work the same regardless of who is on the receiving end.\n> >\n> > > any fee at all is confusing because you intuitively expect that if you\n> send 1 mBTC, then 1 mBTC will arrive the other end\n> > The paradigm of sending money has an explicit cost is not new... I think\n> people are used to Western Union/PayPal and associated fees, no?  It\u2019s okay\n> to have a fee if it\u2019s reasonable, so let\u2019s inform the user what the\n> estimated cost is to send a transaction in a reasonable amount of time.\n>\n> Indeed.\n>\n> Transparency on fees is going to be good from a marketing point of view\n> as well: fact is, Bitcoin transations have fees involved, and if we're\n> up-front and honest about those fees and what they are and why, we\n> demystify the system and give people the confidence to tell others about\n> the cost-advantages of Bitcoin, and at the same time, combat fud about\n> fees with accurate and honest information.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349351&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/1cb29c19/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-03T13:20:36",
                "message_text_only": "On Tue, Dec 3, 2013 at 12:57 PM, Taylor Gerring <taylor.gerring at gmail.com>wrote:\n\n> Why should there be two classes of transactions? Where does paying a local\n> business at a farmer\u2019s stand lie in that realm? Transactions should work\n> the same regardless of who is on the receiving end.\n>\n\nLots and lots of people are psychologically trained to expect that they pay\nthe sticker price for things. Yes in recent times some places have started\nto show additional fees for using credit cards, but only as a way to try\nand push people onto cheaper forms of payment, not because customers love\nsurcharges. It's for that reason that many merchants don't do this, even\nwhen they could - I pay for things with Maestro Debit all the time and I\ndon't think I've ever seen a surcharge. That system obviously has costs,\nbut they're included.\n\nThis is just a basic cultural thing - when I buy something from a shop, the\nsocial expectation is that the seller should be grateful for receiving my\nmoney. \"The customer is always right\". When I send money to a friend, the\nsocial expectation is different. If my friend said, hey Mike, could you\nsend me that 10 bucks you owe me from last weekend and what he receives is\nless than 10 bucks, he would probably feel annoyed - if I owe him 10 bucks\nthen I owe him 10 bucks and it's my job the cover the fees. That's why\nPayPal makes sender pay fees in that case.\n\nMaybe we need new terminology for this. *Interior fees* for included in the\nprice/receiver pays and *exterior fees* for excluded from the price/sender\npays?\n\nFees are only confusing because existing clients do a terrible job of\n> presenting the information to the user. In Hive Wallet, I\u2019m of the opinion\n> that we should inform the user in an intuitive way to let them make an\n> informed decision.\n>\n\nHave you thought through the UI for that in detail? How exactly are you\ngoing to explain the fee structure? Let the user pick the number of blocks\nthey need to wait for? What's a block? Why should I care? Why shouldn't I\njust set the slider all the way to the other end and pay no fees at all? Is\nthe merchant going to refuse to take my payment? Gavin just said that's not\npossible with Bitcoin-Qt. I'm thinking for bitcoinj I might go in a\nslightly different direction and not broadcast payments submitted via the\npayment protocol (and definitely not have one wire tx pay multiple payment\nrequests simultaneously, at least not for consumer wallets).\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/de1cf793/attachment.html>"
            },
            {
                "author": "Taylor Gerring",
                "date": "2013-12-03T13:48:58",
                "message_text_only": "On Dec 3, 2013, at 2:20 PM, Mike Hearn <mike at plan99.net> wrote:\n\n> On Tue, Dec 3, 2013 at 12:57 PM, Taylor Gerring <taylor.gerring at gmail.com> wrote:\n> Why should there be two classes of transactions? Where does paying a local business at a farmer\u2019s stand lie in that realm? Transactions should work the same regardless of who is on the receiving end.\n> \n> Lots and lots of people are psychologically trained to expect that they pay the sticker price for things. Yes in recent times some places have started to show additional fees for using credit cards, but only as a way to try and push people onto cheaper forms of payment, not because customers love surcharges. It's for that reason that many merchants don't do this, even when they could - I pay for things with Maestro Debit all the time and I don't think I've ever seen a surcharge. That system obviously has costs, but they're included.\n> \n> This is just a basic cultural thing - when I buy something from a shop, the social expectation is that the seller should be grateful for receiving my money. \"The customer is always right\". When I send money to a friend, the social expectation is different. If my friend said, hey Mike, could you send me that 10 bucks you owe me from last weekend and what he receives is less than 10 bucks, he would probably feel annoyed - if I owe him 10 bucks then I owe him 10 bucks and it's my job the cover the fees. That's why PayPal makes sender pay fees in that case.\n> \n> Maybe we need new terminology for this. Interior fees for included in the price/receiver pays and exterior fees for excluded from the price/sender pays?\n> \n> Fees are only confusing because existing clients do a terrible job of presenting the information to the user. In Hive Wallet, I\u2019m of the opinion that we should inform the user in an intuitive way to let them make an informed decision.\n> \n> Have you thought through the UI for that in detail? How exactly are you going to explain the fee structure? Let the user pick the number of blocks they need to wait for? What's a block? Why should I care? Why shouldn't I just set the slider all the way to the other end and pay no fees at all? Is the merchant going to refuse to take my payment? Gavin just said that's not possible with Bitcoin-Qt. I'm thinking for bitcoinj I might go in a slightly different direction and not broadcast payments submitted via the payment protocol (and definitely not have one wire tx pay multiple payment requests simultaneously, at least not for consumer wallets).\n> \n> \n\nMost of what you mentioned is entirely culture-dependant. In the majority of North America, sales tax is calculated at the point of sale on top of the advertised price. When my local government increases sales taxes, we feel it BECAUSE we see it. Expose information in a digestible way. Just because you don\u2019t instinctively know how to implement a UI for varying sender fees doesn\u2019t mean that other wallets don\u2019t.\n\nLeave the fee structure alone. Instead, let\u2019s concentrate on how to calculate an accurate assessment of what a reasonable fee is for reliable service and let the software shake out the rest.\n\nTaylor\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/57f9e83e/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-03T13:54:26",
                "message_text_only": "Heh. People feel rises in sales tax elsewhere too. When VAT rises merchants\nall raise their prices, they don't normally swallow it (or if they do, they\nmake a big fuss over how awesome they are).\n\nThe US system is a complete pain in the ass. You never know how much money\nyou actually need to pay for anything unless you happen to know the local\nrate and do the multiplication in your head. There's a reason this system\nis not used in big chunks of the world economy.\n\n\n> Expose information in a digestible way. Just because you don\u2019t\n> instinctively know how to implement a UI for varying sender fees doesn\u2019t\n> mean that other wallets don\u2019t.\n>\n\nI would love to know how to do it. If you have an intuitive GUI in mind\nplease show us so other wallet authors can copy it :)\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/e1a1e722/attachment.html>"
            },
            {
                "author": "Quinn Harris",
                "date": "2013-12-03T14:42:35",
                "message_text_only": "The merchant wants to include a fee to ensure the transaction is \nconfirmed which is dependent on the fee per kilobyte, but they don't \nwant to pay unexpectedly high fees. So what about including a \nmin_fee_per_kilobyte and a max_fee in PaymentDetails describing what \nfees the merchant will pay.  The sender would be expected to respect the \nmin_fee_per_kilobyte but if the result exceeds max_fee the sender would \nbe agreeing to pay the extra fee (exterior fees).  The sender might also \nagree to pay fees in excess of min_fee_per_kilobyte.\n\nThe sender would deduct the interior or merchant fees from the first output.\n\nThe UI could show the payment \"price\" which would match the sum of \noriginal outputs.  It would show the merchant fees (interior) and sender \nfees (exterior) if there are any.  The UI should always show fees so \nusers learn to expect them for all transactions.\n\nThis should allow the merchant to pay fees in most cases while not \nhaving to pay excessive fees if the sender wants to use some large \ntransaction.  If max_fee is 0 the sender would be expected to pay all fees.\n\nOn 12/03/2013 10:20 AM, Mike Hearn wrote:\n> On Tue, Dec 3, 2013 at 12:57 PM, Taylor Gerring \n> <taylor.gerring at gmail.com <mailto:taylor.gerring at gmail.com>> wrote:\n>\n>     Why should there be two classes of transactions? Where does paying\n>     a local business at a farmer's stand lie in that realm?\n>     Transactions should work the same regardless of who is on the\n>     receiving end.\n>\n>\n> Lots and lots of people are psychologically trained to expect that \n> they pay the sticker price for things. Yes in recent times some places \n> have started to show additional fees for using credit cards, but only \n> as a way to try and push people onto cheaper forms of payment, not \n> because customers love surcharges. It's for that reason that many \n> merchants don't do this, even when they could - I pay for things with \n> Maestro Debit all the time and I don't think I've ever seen a \n> surcharge. That system obviously has costs, but they're included.\n>\n> This is just a basic cultural thing - when I buy something from a \n> shop, the social expectation is that the seller should be grateful for \n> receiving my money. \"The customer is always right\". When I send money \n> to a friend, the social expectation is different. If my friend said, \n> hey Mike, could you send me that 10 bucks you owe me from last weekend \n> and what he receives is less than 10 bucks, he would probably feel \n> annoyed - if I owe him 10 bucks then I owe him 10 bucks and it's my \n> job the cover the fees. That's why PayPal makes sender pay fees in \n> that case.\n>\n> Maybe we need new terminology for this. /Interior fees/ for included \n> in the price/receiver pays and /exterior fees/ for excluded from the \n> price/sender pays?\n>\n>     Fees are only confusing because existing clients do a terrible job\n>     of presenting the information to the user. In Hive Wallet, I'm of\n>     the opinion that we should inform the user in an intuitive way to\n>     let them make an informed decision.\n>\n>\n> Have you thought through the UI for that in detail? How exactly are \n> you going to explain the fee structure? Let the user pick the number \n> of blocks they need to wait for? What's a block? Why should I care? \n> Why shouldn't I just set the slider all the way to the other end and \n> pay no fees at all? Is the merchant going to refuse to take my \n> payment? Gavin just said that's not possible with Bitcoin-Qt. I'm \n> thinking for bitcoinj I might go in a slightly different direction and \n> not broadcast payments submitted via the payment protocol (and \n> definitely not have one wire tx pay multiple payment requests \n> simultaneously, at least not for consumer wallets).\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349351&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/1544d487/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-12-04T01:45:44",
                "message_text_only": "allowfee:\n\n> Allow up to allowfee satoshis to be deducted from the amount paid to be  \n> used to pay Bitcoin network transaction fees. A wallet >implementation  \n> must not reduce the amount paid for fees more than allowfee, and  \n> transaction fees must be equal to or greater than the >amount reduced.\n\nminfee:\n\n> Pay at least minfee satoshis in transaction fees. Wallet software should  \n> add minfee to the amount the user authorizes and pays, and >include at  \n> least minfee in the transaction created to pay miner's transaction fees.  \n> Wallet software may request that the user pays more, if >it must create  \n> a complex transaction or judges that minfee is not sufficient for the  \n> transaction to be accepted by the network..\n>\n\nThanks for the draft specs Gavin. Very clear and precise.\n\nPersonally I think 'allowfee' is more useful than 'minfee'. The 'allowfee'  \ntells me something very useful and definitive about what the merchant will  \nlet me do when making payment, and if the merchant chooses 'allowfee'  \nintelligently, they can provide real value to their customers without  \nexposing them to undue risk.\n\nA 'minfee' field on the other hand, is just a data point for the wallet  \nsoftware to consider, and likely to be noisy enough that wallets will tend  \nto ignore it. (e.g. like Drak's example of Gox's 0.001 fee)\n\nThe sender's wallet software will always be free to choose the fee, and  \npaying less than the 'allowfee' or 'minfee' can still get a TX included in  \nthe next block.\n\nI think of the PaymentRequest is a part of the purchase contract. If a  \npayer transmits a transaction before 'expires' but with less than  \n'minfee', which gets included in the next block, have they  failed to meet  \nthe terms of payment?\n\nIf there is some time criticality, for example to reduce exchange rate  \nrisk, then a wallet might need to choose a higher fee to ensure the  \ntransaction clears in time. Instead of 'minfee' I'm thinking it would be  \nmore appropriate to communicate this using the existing 'expires' field --  \nin other words, let the merchant express what their requirement is, not  \ntell the wallet how to achieve it.\n\nIn the case of a transaction with too-low fee, either the payer can  \ndouble-spend with a higher fee, or wait longer for the transaction to make  \nit into a block. If it hits the blockchain before the 'expires' time, then  \nthe merchant should have no standing to refute it, regardless of the  \namount of fees paid.\n\nA refund comes into play if a payer reduced the total amount in excess of  \nan agreed upon 'allowfee', or if the transaction doesn't hit the  \nblockchain until after 'expires'. It should be clear in these cases that  \npayer would end up eating the fees in both directions. But then, what if a  \nwallet pays the 'minfee' and broadcasts 1 block before 'expires' but the  \npayment DOESN'T make the block? Is the merchant liable for too-slow  \ntransactions due to their own insufficient 'minfee' value?\n\nSo I see 'allowfee' as extremely useful, but 'minfee' as somewhat  \nproblematic.\n\nThanks,\nJeremy"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-04T10:40:00",
                "message_text_only": "I think this US/other cultural issue is complicating things more than we\nappreciate.\n\nI am trying to imagine in my head how all this will work and what it will\nlook like with allow_fee, and I just can't see it. Merchants want customers\nto pay the sticker price, deviance from that social norm is extremely rare\neven after the credit card company contracts that required it have been\ninvalidated. The only time it happens to me is when buying flight tickets\nwith credit cards: but it's only for that method, other payment methods are\nstill treated as \"free\" a.k.a interior fees.\n\nIf you walk into a physical shop and try to pay a large bill with bags of\npennies, the merchant won't enter into a complicated agreement where they\nagree to split the cost of processing with you. They will just reject the\npayment out of hand and tell you to get real. It has to be that way because\notherwise the shop would carry the cost of counting all the pennies and\nhauling them around, not the buyer (who \"knows\" he put the right number of\npennies in the bags).\n\nAs a buyer, I do not care about whether my transaction will confirm. If I\ntry to pay with dust, there is no incentive for me to attach a higher fee\nthan allow_fee to make that confirm, especially if the merchant has no way\nto reject the payment. What's more, as Jeremy points out, no clean fail\nmechanism means large piles of manual work and lots of disputes due to\npayments not clearing before the exchange rate shifts and other things like\nthat.\n\nTrying to make the success of payment confirmation a two-person dance seems\nto have so many edge cases it makes my head hurt. For most pay-to-merchant\ncases, it has to be the receivers job to get a transaction confirmed, and\nif the sender doesn't follow the instructions a payment should hard fail\nand require trying again. If Bitcoin-Qt can't handle that today, that does\nseem like a problem.\n\nIn the case of a transaction with too-low fee, either the payer can\n> double-spend with a higher fee\n\n\nYou can't do that. When a tx doesn't have the right fee attached you're out\nof luck today, except for the fact that some pools run with a custom child\npays for parent patch. So respending it would bump priority for some miners\nand not others.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/21e7c3e0/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-04T10:57:48",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\n\n\nMike Hearn <mike at plan99.net> wrote:\n>I think this US/other cultural issue is complicating things more than\n>we\n>appreciate.\n>\n>I am trying to imagine in my head how all this will work and what it\n>will\n>look like with allow_fee, and I just can't see it. Merchants want\n>customers\n>to pay the sticker price, deviance from that social norm is extremely\n>rare\n>even after the credit card company contracts that required it have been\n>invalidated. The only time it happens to me is when buying flight\n>tickets\n>with credit cards: but it's only for that method, other payment methods\n>are\n>still treated as \"free\" a.k.a interior fees.\n>\n>If you walk into a physical shop and try to pay a large bill with bags\n>of\n>pennies, the merchant won't enter into a complicated agreement where\n>they\n>agree to split the cost of processing with you. They will just reject\n>the\n>payment out of hand and tell you to get real. It has to be that way\n>because\n>otherwise the shop would carry the cost of counting all the pennies and\n>hauling them around, not the buyer (who \"knows\" he put the right number\n>of\n>pennies in the bags).\n>\n>As a buyer, I do not care about whether my transaction will confirm. If\n>I\n>try to pay with dust, there is no incentive for me to attach a higher\n>fee\n>than allow_fee to make that confirm, especially if the merchant has no\n>way\n>to reject the payment. What's more, as Jeremy points out, no clean fail\n>mechanism means large piles of manual work and lots of disputes due to\n>payments not clearing before the exchange rate shifts and other things\n>like\n>that.\n>\n>Trying to make the success of payment confirmation a two-person dance\n>seems\n>to have so many edge cases it makes my head hurt. For most\n>pay-to-merchant\n>cases, it has to be the receivers job to get a transaction confirmed,\n>and\n>if the sender doesn't follow the instructions a payment should hard\n>fail\n>and require trying again. If Bitcoin-Qt can't handle that today, that\n>does\n>seem like a problem.\n>\n>In the case of a transaction with too-low fee, either the payer can\n>> double-spend with a higher fee\n>\n>\n>You can't do that. When a tx doesn't have the right fee attached you're\n>out\n>of luck today, except for the fact that some pools run with a custom\n>child\n>pays for parent patch. So respending it would bump priority for some\n>miners\n>and not others.\n\n\nHere at the dark wallet conf there seems yo be rough consensus that replacement for fee bumping is a good thing and should be supported; I was talking to Taylor from hive specifically yesterday. The code is trivial on the node side of things and doesn't need consent of anymore than a small minority, and coinjoin forces wallets to handle double spends well anyway. I haven't heard anyone caring about zeroconf safety.\n\nI'll be proposing it for \"formal\" inclusion in our wallet best practices guidelines.\n\n\nAlso fwiw apparently libbitcoin already implements a memory limited mempool and Amir is open to the idea of it using the satoshi consensus critical code for block validity. (therefor fairly safe mining) I wouldn't be surprised if libbitcoin based nodes start getting usage, and with a limited mempool it is very DoS attack safe for them to relay replacements regardless of miner support.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.9\n\niQFQBAEBCAA6BQJSnwqsMxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhR5yCAC3vaQQeoBrLdqn/rO5\nDzblqwl1B6AE1UjFj5+abQEZ2+uPy5P+7dZidpUn8Ms+tDDcCCge6HVOg+UeseaE\n8pDP3+VIHZHH+9n6Y3+4facLNpQ3dP/+Zsg4pC+QSAjVV6408+yWPLtpbC6V0apK\nT6K4qdq0Ct6V+54Ol0Thx+5cJlWLI+XbW2eXze3WjJzj3FgZUK0udBcVWa8JyWAV\nWD1tv8DpPoUvDDzdmjEyf0EdjvcmamH9mcIvtxRdVwzyY/siZoizv9X8/gXNL+fg\nJJ3Oxwrl1dOYSeENgp9VP8fU7GK7855bT1Wxd5zGNW7p/1gNxN4Lnx57XSMz2IHc\ndHbg\n=dcYz\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-04T11:09:42",
                "message_text_only": "Please don't try and drag this thread off topic. What I said is factually\ncorrect. If you want to (again) try and convince people things should work\ndifferently, start another thread for that.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/f70c5e4a/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-04T13:06:43",
                "message_text_only": "On Wed, Dec 04, 2013 at 12:09:42PM +0100, Mike Hearn wrote:\n> Please don't try and drag this thread off topic. What I said is factually\n> correct. If you want to (again) try and convince people things should work\n> differently, start another thread for that.\n\nreplace-by-fee is no less speculative than your original proposals;\nyou're also trying to convince people that things should work\ndifferently re: fees\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/2af86d51/attachment.sig>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-04T13:48:08",
                "message_text_only": "On Wed, Dec 4, 2013 at 2:06 PM, Peter Todd <pete at petertodd.org> wrote:\n\n> replace-by-fee is no less speculative than your original proposals;\n> you're also trying to convince people that things should work\n> differently re: fees\n\n\nThe original proposal I started this thread with hasn't even received\ncomments - presumably it's uncontroversial. The other discussions are about\nhow to handle fees in requests that use the payment protocol, which isn't\ncurrently used anywhere so doing things differently isn't possible.\n\nOn the other hand you have been talking about a fundamental change to the\nbehaviour of how all Bitcoin nodes operate, which is off topic for this\nthread.\n\nIf you have something specific to say about how floating fees should be\nmanaged by SPV wallets or how fees should be negotiated when the payment\nprotocol is in use, this thread is appropriate. Otherwise please take it\nelsewhere.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/c10ebe19/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-04T21:51:58",
                "message_text_only": "On Wed, Dec 04, 2013 at 02:48:08PM +0100, Mike Hearn wrote:\n> On Wed, Dec 4, 2013 at 2:06 PM, Peter Todd <pete at petertodd.org> wrote:\n> \n> > replace-by-fee is no less speculative than your original proposals;\n> > you're also trying to convince people that things should work\n> > differently re: fees\n> \n> \n> The original proposal I started this thread with hasn't even received\n> comments - presumably it's uncontroversial. The other discussions are about\n> how to handle fees in requests that use the payment protocol, which isn't\n> currently used anywhere so doing things differently isn't possible.\n> \n> On the other hand you have been talking about a fundamental change to the\n> behaviour of how all Bitcoin nodes operate, which is off topic for this\n> thread.\n> \n> If you have something specific to say about how floating fees should be\n> managed by SPV wallets or how fees should be negotiated when the payment\n> protocol is in use, this thread is appropriate. Otherwise please take it\n> elsewhere.\n\nOther than you, replacement for fee changing isn't controversial; I know\nthis because no-one other than you comments on it... just like the\nfundemental changes involving your proposed hardfork presumably. (which\nI did comment on)\n\n\nBesides, \"Happily, there does not have to be One Correct Answer here.\nLet wallets compete, and may the best user experience win...\"\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131204/3d192f45/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-03T11:03:54",
                "message_text_only": "On Tue, Dec 03, 2013 at 11:40:35AM +1000, Gavin Andresen wrote:\n> On Tue, Dec 3, 2013 at 12:44 AM, Mike Hearn <mike at plan99.net> wrote:\n> \n> > PPv1 doesn't have any notion of fee unfortunately. I suppose it could be\n> > added easily, but we also need to launch the existing feature set.\n> >\n> \n> Lets bang out a merchant-pays-fee extension.\n> \n> How about:\n> \n> SPEC:\n> \n>     optional uint64 allowfee    tag number=1000\n> \n> Allow up to allowfee satoshis to be deducted from the amount paid to be\n> used to pay Bitcoin network transaction fees. A wallet implementation must\n> not reduce the amount paid for fees more than allowfee, and transaction\n> fees must be equal to or greater than the amount reduced.\n\nFees are per byte of tx data; call it allowfeeperkb, and given that fees\nare required - the merchant would really rather not waste up to about\ntwice as much on fees for a child-pays-for-parent - it should be called\nrequirefeeperkb.\n\nBack to your point, the merchant wants to limit total fees that have\nbeen deducted - 'allowfee' is still a good idea - but only in\nconjunction with specifying fee-per-kb requirements.\n\nUI once both are implemented is to not show anything in the default\ncase, and explain to the user why they have to pay extra in the unusual\ncase where they are spending a whole bunch of dust.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/a412ca87/attachment.sig>"
            },
            {
                "author": "Drak",
                "date": "2013-12-03T11:09:51",
                "message_text_only": "On 3 December 2013 11:03, Peter Todd <pete at petertodd.org> wrote:\n\n> UI once both are implemented is to not show anything in the default\n> case, and explain to the user why they have to pay extra in the unusual\n> case where they are spending a whole bunch of dust.\n\n\nYes, that's the other problem with a merchant setting a fee - they have no\nidea how large the transaction might be. If you spend a bunch of dust the\nfee could be 2 or 3x the expected fee. Then you might get merchants\nincluding higher fees by default to account for this. That means we end up\npaying more per kb over time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/199e85e4/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-03T11:33:21",
                "message_text_only": "On Tue, Dec 03, 2013 at 11:09:51AM +0000, Drak wrote:\n> On 3 December 2013 11:03, Peter Todd <pete at petertodd.org> wrote:\n> \n> > UI once both are implemented is to not show anything in the default\n> > case, and explain to the user why they have to pay extra in the unusual\n> > case where they are spending a whole bunch of dust.\n> \n> \n> Yes, that's the other problem with a merchant setting a fee - they have no\n> idea how large the transaction might be. If you spend a bunch of dust the\n> fee could be 2 or 3x the expected fee. Then you might get merchants\n> including higher fees by default to account for this. That means we end up\n> paying more per kb over time.\n\nRight, which is solved by requiring a fee-per-kb, and only allowing up\nto a certain amount to be deducted from the amount paid to pay that\ntotal fee.\n\n\nBut really, we're better off leaving fees visible to the user in the\nfirst place: they're how Bitcoin works and it's not going to change.\n(was just talking to Taylor from Hive Wallet about that in person\nactually)\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/97c04e6f/attachment.sig>"
            },
            {
                "author": "kjj",
                "date": "2013-12-04T05:50:27",
                "message_text_only": "After reading all 99 messages in this thread, I think allowfee is just \nabout perfect.\n\nIt effectively lets merchants to give an allowance against the purchase \nprice for network fees, if they choose.  It is still up to the sender \n(and/or the sender's software) to get the fees right.  Sometimes the \nsender will need to pay more fees than allowed, and sometimes the sender \nwill need to pay less.\n\nWe can't solve the fee problem, in general.  I'm not sure that we can \neven define it properly.  But this is something that we can do, that \nwill be useful at least occasionally, and that will cause no harm the \nrest of the time.\n\nP.S.  Clever senders can use this to defrag their wallets.  Who wants to \nwrite the patch for that?\n\nGavin Andresen wrote:\n> On Tue, Dec 3, 2013 at 12:44 AM, Mike Hearn <mike at plan99.net \n> <mailto:mike at plan99.net>> wrote:\n>\n>     PPv1 doesn't have any notion of fee unfortunately. I suppose it\n>     could be added easily, but we also need to launch the existing\n>     feature set.\n>\n>\n> Lets bang out a merchant-pays-fee extension.\n>\n> How about:\n>\n> SPEC:\n>\n>     optional uint64 allowfee    tag number=1000\n>\n> Allow up to allowfee satoshis to be deducted from the amount paid to \n> be used to pay Bitcoin network transaction fees. A wallet \n> implementation must not reduce the amount paid for fees more than \n> allowfee, and transaction fees must be equal to or greater than the \n> amount reduced.\n>\n> :ENDSPEC\n>\n> Rationale: we don't want wallet software giving users discounts-- \n> sending transactions that are amount-allowfee without paying any fee. \n>  We also want to allow users to pay MORE in fees, if they need to \n> (fragmented wallet, maybe, or big CoinJoin transaction) or decide to.\n>\n>\n> PS: I think there was also consensus that the BIP72  request=...   \n> should be shortened to just r=... (save 6 chars in QR codes).  Unless \n> somebody objects, I'll change the BIP and the reference implementation \n> code to make it so...\n>\n> -- \n> --\n> Gavin Andresen\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349351&iu=/4140/ostg.clktrk\n>\n>\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/c91f052f/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-03T11:31:17",
                "message_text_only": "On Sun, Dec 01, 2013 at 12:51:46PM +0100, Mike Hearn wrote:\n> 4) Finally, when we next hard fork, we make v2 transactions include the\n> output value in the signature, same as the output script (this proposal has\n> been on the forums for a while now). That allows the fee data added in step\n> 2 to be cross-checked against the signatures on the inputs, thus\n> authenticating it.\n\nFTFY s/hard-fork/soft-fork/\n\nThe proposals on the forums with regard to a soft-fork are for a new\ntransaction format - to be done in parallel with the old one - that\ncommits to transaction inputs and outputs via a merkle tree extending\ninto the transaction. This data is then committed to via the merge-mine\nstandard.\n\n\nIn addition, all this discussion about trying to figure out transaction\nfees based on transaction is a bit irrelevant if you suppose a\nsoft-fork. We already know that we need a merkle-sum-tree of fees and\ntransaction size to be able to audit miners and create compact fraud\nproofs, and using that merkle-sum-tree you can easily calculate sum\nfees/sum size for the whole block to determine fees.\n\nWe know that we can make a good assumption that transactions in\nblocks will have been broadcast prior by the assumption you and Gavin\nare making that miners would by far prefer to mine transactions that\nhave already been broadcast so that block propagation via txid lists\nworks. That advantage is on the order of 10x to 100x (or even higher)\nlower cost per KB to the miner. (if this is not true, let us all know,\nbecause then your scalability arguments are bunk with regard to\nblocksize)\n\nIn addition faking fees via non-disclosed high-fee transactions has a\ncost of about 1% due to the risk your block gets orphaned and the tx fee\ngets mined by another miner.\n\n\nBetween those two the merkle-sum-trees for fees and size can be used for\nvarious levels of average fee for a whole block, plus statistical\ndistributions.\n\n\nNext it is also desirable for another, related, soft-fork to include a\nsorted list of txids and/or H(scriptPubKey)'s in a block. (the latter is\nexplicitly part of my TXO commitments proposal) With the txids version\nespecially it's easy and low-bandwidth for SPV nodes to get proof that a\ngiven transaction has been mined recently, by asking for proof of\ninclusion or exclusion to accompany a bloom filter match.\n\n\nFinally with various anti-sybil techniques that create long-term\nidentities it's easy to show that a peer lied about the data required\nfor fee estimates anyway.\n\n> One obvious concern is what to do if nodes don't converge on very similar\n> estimates. Wallets will always want to pay the lowest fee possible, so that\n> means they'll always be riding the very edge of what's acceptable, opening\n> up tx propagation to random flaky failures if fee estimates change whilst a\n> transaction is in progress, or if some nodes don't calculate the same\n> estimates as others.\n\nPropagation failures are not a major problem if transactions can be\nrebroadcast with new, higher, fees; propagation failures can be detected\neasily and quickly with my proof-of-tx-mining proposal.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/6556880f/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Floating fees and SPV clients",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Quinn Harris",
                "kjj",
                "Andreas Schildbach",
                "Jamie McNaught",
                "Mike Hearn",
                "Patrick Mead",
                "Taylor Gerring",
                "Peter Todd",
                "Jeremy Spilman",
                "Gavin Andresen",
                "Drak"
            ],
            "messages_count": 46,
            "total_messages_chars_count": 91446
        }
    },
    {
        "title": "[Bitcoin-development] Suggestion: easy way to restore wallet.dat backup",
        "thread_messages": [
            {
                "author": "D\u00e2niel Fraga",
                "date": "2013-12-03T19:59:10",
                "message_text_only": "I posted this on bitcoin-user, but nobody replied, so I'm\ntrying here.\n\n\tToday, when a user uses bitcoin-qt client, it can make a backup\nof wallet.dat easily through menu, but when he/she needs to restore\nthis backup, he/she must copy the file to the correct folder and\nexecute \"bitcoin-qt -rescan\".\n\n\tMy suggestion: bitcoin-qt developers could implement an easier\nway to restore. For example: a option in the File menu \"Restore Wallet\"\nor \"Recover Wallet\" where it would show a dialog asking for the backup\nfile and everything would be done automatically (no need to do it\nmanually).\n\n\tIf we want everybody to use bitcoin, these operations should\nbe as easy as possible.\n\n\tWhat do you think?\n\n-- \nLinux 3.12.0: One Giant Leap for Frogkind\nhttp://www.youtube.com/DanielFragaBR\nhttp://mcxnow.com\nBitcoin: 12H6661yoLDUZaYPdah6urZS5WiXwTAUgL"
            },
            {
                "author": "Casey Rodarmor",
                "date": "2013-12-04T05:16:18",
                "message_text_only": "On Tue, Dec 3, 2013 at 11:59 AM, D\u00e2niel Fraga <fragabr at gmail.com> wrote:\n>\n>         Today, when a user uses bitcoin-qt client, it can make a backup\n> of wallet.dat easily through menu, but when he/she needs to restore\n> this backup, he/she must copy the file to the correct folder and\n> execute \"bitcoin-qt -rescan\".\n>\n\nI actually think this is part of a larger and somewhat subtle UX problem\nwith bitcoin-qt \u2013 and, to be totally fair, a whole bunch of other wallet\nprograms.\n\nI think the issue is that bitcoin-qt should have a document-oriented\napproach to wallets. It should make you select a location to store your\nwallet, just like a word processor, when you create a new wallet. It could\nopen the most recent wallet when you run the program, or allow you to open\na wallet by double-clicking it directly in the OS.\n\nI think this would solve this particular issue nicely, just double click\nthe wallet file. Also, the menu item can just be labeled \"Open Wallet\". It\nmight also prevent those kind of heartbreaking posts which read something\nlike, \"I just wiped my hard drive and reinstalled bitcoin-qt, where are my\ncoins?\" People don't have the expectation that if they get Word on a new PC\nthat their documents will somehow magically be available, I think in part\nbecause Word forces you to deal with the documents and the save location\nyourself.\n\nI know that this would bring with it a host of other considerations: Can\nmultiple wallets be open at the same time? What happens if a wallet file is\nmoved while it's open? What happens when there are two versions of the same\nwallet? Will users understand that they need to backup their wallets\nperiodically?\n\nBut, I think it would be a big enough usability win that it should be\nconsidered. Also, if at the same time bitcoin-qt were to adopt BIP 32 style\ndeterministically derived private keys from a single seed, a bunch of the\nissues above would also go away: There are never two versions of the same\nwallet, since they're the same seed, and periodic backups are unnecessary.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131203/e19d2db8/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Suggestion: easy way to restore wallet.dat backup",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "D\u00e2niel Fraga",
                "Casey Rodarmor"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3053
        }
    },
    {
        "title": "[Bitcoin-development] ABIS protocol introduction",
        "thread_messages": [
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2013-12-04T01:46:16",
                "message_text_only": "Hello,\n\nThis concept, 'ABIS protocol,' has been many years in the making and is\npresented here as a basic concept.  It is sent to you for you review and\npossible consideration.  There will be further additions in the near\nfuture.  Looking forward to your reply and any contributions you may\nprovide.\n\nCheers\n\nhttps://github.com/ABISprotocol/ABIS#abis"
            }
        ],
        "thread_summary": {
            "title": "ABIS protocol introduction",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Odinn Cyberguerrilla"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 350
        }
    },
    {
        "title": "[Bitcoin-development] Move authorative source for BIPs to git repository",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2013-12-05T13:37:10",
                "message_text_only": "Hello all,\n\nA while ago after discussion on the mailing list a repository was set up to\nstore the BIP documents, as this is deemed a more secure solution than\nhaving them on the wiki:\n\nhttps://github.com/bitcoin/bips\n\nTo prevent confusion the next step should probably be to replace the BIPs\non the wiki with links to the github documents, with a notice that changes\nshould be proposed on github or mailed to the BIP editor (gmaxwell).\n\nAgreed?\n\nRegards,\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131205/567ebc52/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-12-05T14:27:43",
                "message_text_only": "On Thursday, December 05, 2013 1:37:10 PM Wladimir wrote:\n> Hello all,\n> \n> A while ago after discussion on the mailing list a repository was set up to\n> store the BIP documents, as this is deemed a more secure solution than\n> having them on the wiki:\n> \n> https://github.com/bitcoin/bips\n> \n> To prevent confusion the next step should probably be to replace the BIPs\n> on the wiki with links to the github documents, with a notice that changes\n> should be proposed on github or mailed to the BIP editor (gmaxwell).\n> \n> Agreed?\n\nI think this would stifle active BIP draft editing. We're already having a \nhard time getting some developers to write BIPs for their proposals - I don't \nthink we should be putting up bigger hurdles.\n\nLuke"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-05T14:38:45",
                "message_text_only": "On Thu, Dec 5, 2013 at 3:27 PM, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Thursday, December 05, 2013 1:37:10 PM Wladimir wrote:\n>\n\n\n> I think this would stifle active BIP draft editing. We're already having a\n> hard time getting some developers to write BIPs for their proposals - I\n> don't\n> think we should be putting up bigger hurdles.\n>\n\nHow is github a hurdle?\n\nIt's easy enough to create a fork and submit back the changes as a pull\nrequest.\n\nIn the case of text documents, this can be completely done through the web\ninterface.\n\nIf anything creating a github account is a smaller hurdle than having to\npay to create a wiki account and wait for it to be activated.\n\nAside: my proposal is for the BIPs that are already accepted, and should\nnot be edited without dicussion. If people want to put their drafts in the\nwiki that's a different story.\n\nRegards,\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131205/6abd02c8/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-12-05T14:43:08",
                "message_text_only": "This entire discussion is recycled.  Please review the previous\ndiscussion, before asking the same questions over again.\n\nProperly done, there are FEWER hurdles.  In the previous discussion,\nthere was outlined a process whereby the BIPS Editor would receive an\nemail, and could take it from there.  No wiki login or bitcoin payment\nrequired.  More advanced users may submit pull requests.\n\nCompared with a hash-sealed git repo as primary source, the wiki is\nsecond class.\n\n\nOn Thu, Dec 5, 2013 at 9:27 AM, Luke-Jr <luke at dashjr.org> wrote:\n> On Thursday, December 05, 2013 1:37:10 PM Wladimir wrote:\n>> Hello all,\n>>\n>> A while ago after discussion on the mailing list a repository was set up to\n>> store the BIP documents, as this is deemed a more secure solution than\n>> having them on the wiki:\n>>\n>> https://github.com/bitcoin/bips\n>>\n>> To prevent confusion the next step should probably be to replace the BIPs\n>> on the wiki with links to the github documents, with a notice that changes\n>> should be proposed on github or mailed to the BIP editor (gmaxwell).\n>>\n>> Agreed?\n>\n> I think this would stifle active BIP draft editing. We're already having a\n> hard time getting some developers to write BIPs for their proposals - I don't\n> think we should be putting up bigger hurdles.\n>\n> Luke\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gary Rowe",
                "date": "2013-12-05T20:49:56",
                "message_text_only": "Personally, I would be more inclined to submit and work on a BIP if it was\nin GitHub. It's a regular home from home for me now.\n\n\nOn 5 December 2013 14:43, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> This entire discussion is recycled.  Please review the previous\n> discussion, before asking the same questions over again.\n>\n> Properly done, there are FEWER hurdles.  In the previous discussion,\n> there was outlined a process whereby the BIPS Editor would receive an\n> email, and could take it from there.  No wiki login or bitcoin payment\n> required.  More advanced users may submit pull requests.\n>\n> Compared with a hash-sealed git repo as primary source, the wiki is\n> second class.\n>\n>\n> On Thu, Dec 5, 2013 at 9:27 AM, Luke-Jr <luke at dashjr.org> wrote:\n> > On Thursday, December 05, 2013 1:37:10 PM Wladimir wrote:\n> >> Hello all,\n> >>\n> >> A while ago after discussion on the mailing list a repository was set\n> up to\n> >> store the BIP documents, as this is deemed a more secure solution than\n> >> having them on the wiki:\n> >>\n> >> https://github.com/bitcoin/bips\n> >>\n> >> To prevent confusion the next step should probably be to replace the\n> BIPs\n> >> on the wiki with links to the github documents, with a notice that\n> changes\n> >> should be proposed on github or mailed to the BIP editor (gmaxwell).\n> >>\n> >> Agreed?\n> >\n> > I think this would stifle active BIP draft editing. We're already having\n> a\n> > hard time getting some developers to write BIPs for their proposals - I\n> don't\n> > think we should be putting up bigger hurdles.\n> >\n> > Luke\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Sponsored by Intel(R) XDK\n> > Develop, test and display web and hybrid apps with a single code base.\n> > Download it for free now!\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131205/a4e50d00/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-05T23:16:47",
                "message_text_only": "RE: replace BIPs on the wiki with links to github documents: agreed.\n\nWladimir or Gregory: can one of you update BIP 0001 to describe the Proper\nProcess for creating/editing a BIP? It doesn't mention the github repo at\nall right now.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/705c3d43/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-06T13:41:16",
                "message_text_only": "Yes, i'm updating BIP 0001 right now, will send a pull when ready.\n\n\n\nOn Fri, Dec 6, 2013 at 12:16 AM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> RE: replace BIPs on the wiki with links to github documents: agreed.\n>\n> Wladimir or Gregory: can one of you update BIP 0001 to describe the Proper\n> Process for creating/editing a BIP? It doesn't mention the github repo at\n> all right now.\n>\n> --\n> --\n> Gavin Andresen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/bab9cb89/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Move authorative source for BIPs to git repository",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Luke-Jr",
                "Wladimir",
                "Gavin Andresen",
                "Gary Rowe"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 8257
        }
    },
    {
        "title": "[Bitcoin-development] Temporary fee fix",
        "thread_messages": [
            {
                "author": "Andreas Petersson",
                "date": "2013-12-06T02:44:00",
                "message_text_only": "I know we should all be brainstorming and working on a new fee market.\nBut fact is, it will still take some time and in the meantime users will\ncontinue to shout insults at us for the high \"fixed\" fee of 0,1 mBtc.\nEven banks sometimes have less fees. (1 of 5 Play Store reviews of\nMycelium seem to mention high fees recently)\n\nMy suggestion: until the market is established let's lower the minimum\nrelay fee per kb to something less. 0,01 mBtc comes to mind. (of course\npulling this number out of thin air)"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-06T08:37:55",
                "message_text_only": "On Fri, Dec 6, 2013 at 3:44 AM, Andreas Petersson <andreas at petersson.at>wrote:\n\n> I know we should all be brainstorming and working on a new fee market.\n> But fact is, it will still take some time and in the meantime users will\n> continue to shout insults at us for the high \"fixed\" fee of 0,1 mBtc.\n> Even banks sometimes have less fees. (1 of 5 Play Store reviews of\n> Mycelium seem to mention high fees recently)\n>\n> My suggestion: until the market is established let's lower the minimum\n> relay fee per kb to something less. 0,01 mBtc comes to mind. (of course\n> pulling this number out of thin air)\n>\n\nThis was considered (see https://github.com/bitcoin/bitcoin/pull/3305) but\ndeemed to risky for 0.8.6 at the last moment, see the linked pull request\nfor details.\n\nIt will go into 0.9, at least if the full floating fee implementation isn't\nyet ready and deemed safe by then.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/17fe0237/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Temporary fee fix",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir",
                "Andreas Petersson"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1582
        }
    },
    {
        "title": "[Bitcoin-development] 0.8.6 release candidate 1",
        "thread_messages": [
            {
                "author": "Gavin Andresen",
                "date": "2013-12-06T06:52:02",
                "message_text_only": "0.8.6 release candidate 1 is available from:\n  https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/test/\n\nPlease help sanity-test, especially if you are running OSX or Windows.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/fc9c0478/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-12-08T23:07:30",
                "message_text_only": "I found a tiny error in 0.8.6rc1.  The leveldb subtree merge was done\nincorrectly leaving an errant db/ directory in the base of bitcoin instead\nof src/leveldb.  See my earlier mail on 0.8.6 for suggested subtree squash\nand merge syntax.  (On plane now...)\n\nWarren\nOn Dec 5, 2013 10:53 PM, \"Gavin Andresen\" <gavinandresen at gmail.com> wrote:\n\n> 0.8.6 release candidate 1 is available from:\n>\n> https://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/test/\n>\n> Please help sanity-test, especially if you are running OSX or Windows.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/7645b3bc/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-09T06:14:37",
                "message_text_only": "On Mon, Dec 9, 2013 at 9:07 AM, Warren Togami Jr. <wtogami at gmail.com> wrote:\n\n> I found a tiny error in 0.8.6rc1.  The leveldb subtree merge was done\n> incorrectly leaving an errant db/ directory in the base of bitcoin instead\n> of src/leveldb.\n>\n\nI see:\n  db/autocompact_test.cc\n\n... which I assume is a leveldb unit test file that should be in\nsrc/leveldb/db/\n\nNot a showstopper bug.\n\nGiven we've had hundreds of downloads and no reports of insanity, I think\nwe should tag v0.8.6 today (same commit as v0.8.6rc1) and ship it.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/830ac4b3/attachment.html>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-12-09T07:34:22",
                "message_text_only": "Our testing of the macos leveldb parts for the past 6 days has had zero\ncomplaints of new corruption from OMG and LTC users.  I agree it is time to\nrelease 0.8.6.\n\n\nOn Sun, Dec 8, 2013 at 8:14 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Mon, Dec 9, 2013 at 9:07 AM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n>\n>> I found a tiny error in 0.8.6rc1.  The leveldb subtree merge was done\n>> incorrectly leaving an errant db/ directory in the base of bitcoin instead\n>> of src/leveldb.\n>>\n>\n> I see:\n>   db/autocompact_test.cc\n>\n> ... which I assume is a leveldb unit test file that should be in\n> src/leveldb/db/\n>\n> Not a showstopper bug.\n>\n> Given we've had hundreds of downloads and no reports of insanity, I think\n> we should tag v0.8.6 today (same commit as v0.8.6rc1) and ship it.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/3d50bab6/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-12-09T13:39:51",
                "message_text_only": "Someone needs to update the bitcoin.org website, it still points downloads\nto 0.8.5\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/6891ac5b/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2013-12-09T13:52:44",
                "message_text_only": "On Mon, Dec 09, 2013 at 01:39:51PM +0000, Drak wrote:\n> Someone needs to update the bitcoin.org website, it still points downloads\n> to 0.8.5\n\nPerhaps because 0.8.6 hasn't been released yet?  Or did I miss the\nannouncement?  I think it makes sense that release candidates are not\npromoted on bitcoin.org.\n\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK \n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Drak",
                "date": "2013-12-09T14:55:02",
                "message_text_only": "On 9 December 2013 13:52, Roy Badami <roy at gnomon.org.uk> wrote:\n>\n>  On Mon, Dec 09, 2013 at 01:39:51PM +0000, Drak wrote:\n> > Someone needs to update the bitcoin.org website, it still points\n> downloads\n> > to 0.8.5\n>\n> Perhaps because 0.8.6 hasn't been released yet?  Or did I miss the\n> announcement?  I think it makes sense that release candidates are not\n> promoted on bitcoin.org.\n\n\nIt was released and it's all over bitcointalk/reddit\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/3926b3fb/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-09T15:07:35",
                "message_text_only": "On Mon, Dec 9, 2013 at 6:55 AM, Drak <drak at zikula.org> wrote:\n> It was released and it's all over bitcointalk/reddit\n\nIt has not been released. It's queued for announcement. We were\nwaiting for another independant gitian build before sending out the\nannouncement."
            },
            {
                "author": "Drak",
                "date": "2013-12-09T15:19:05",
                "message_text_only": "On 9 December 2013 15:07, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Mon, Dec 9, 2013 at 6:55 AM, Drak <drak at zikula.org> wrote:\n> > It was released and it's all over bitcointalk/reddit\n>\n> It has not been released. It's queued for announcement. We were\n> waiting for another independant gitian build before sending out the\n> announcement.\n>\n\nWhy would it be made available for download at sourceforge.net if it's not\nactually released? The files are available here:\nhttp://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.8.6/ and\npeople watch the sf rss feeds etc...\nSeems to me like there needs to be a better release workflow. As far as the\nworld is concerned, they are downloading the 0.8.6 and there is a lot of\ncommunity buzz about it already.\nIMO, to avoid that, no files should be placed online unless they are the\nofficial release.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/507c1713/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-09T15:25:25",
                "message_text_only": "On Mon, Dec 9, 2013 at 7:19 AM, Drak <drak at zikula.org> wrote:\n> Why would it be made available for download at sourceforge.net if it's not\n> actually released? The files are available here:\n\nBecause it takes time to put the files up, propagate to mirrors, check\nby multiple people that the downloads work an the signatures pass.\n\nEvery release comes with a release announcement, you'll know its out\nwhen you see the release announcement.\n\nThe alternative is that announcements go out and the files are not\ncorrect, or hide the files in the release pipeline and allow less\npublic participation in the release workflow. I think that would be\nunfortunate."
            },
            {
                "author": "Wladimir",
                "date": "2013-12-09T15:35:54",
                "message_text_only": "On Mon, Dec 9, 2013 at 4:19 PM, Drak <drak at zikula.org> wrote:\n\n>\n> IMO, to avoid that, no files should be placed online unless they are the\n> official release.\n>\n\nThey *are* the official release as soon as they're uploaded. We may wait\nfor some extra gitian builds to be more confident and make the announcement\non the forums and such, but the downloads themselves don't change anymore.\n\nIt really doesn't matter in what order the different places are updated, as\nlong as the news is propagated everywhere within a reasonable time-span of\nsay a day. Requiring a certain order would require unnecessary coordination.\n\nDon't make problems where they don't exist, we have enough actual issues.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/f8a18b88/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-12-09T15:42:43",
                "message_text_only": "On 9 December 2013 15:35, Wladimir <laanwj at gmail.com> wrote:\n>\n> On Mon, Dec 9, 2013 at 4:19 PM, Drak <drak at zikula.org> wrote:\n>\n>>\n>> IMO, to avoid that, no files should be placed online unless they are the\n>> official release.\n>>\n>\n> They *are* the official release as soon as they're uploaded. We may wait\n> for some extra gitian builds to be more confident and make the announcement\n> on the forums and such, but the downloads themselves don't change anymore.\n>\n\nThat is exactly the point and the moment they are publicly available you\ncannot stop people talking about it or noticing it, or posting official\nlooking sticky posts at bitcointalk like this one:\nhttps://bitcointalk.org/index.php?topic=364353.0. Was that an official\nannouncement?\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/9be62b4a/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-09T15:44:23",
                "message_text_only": "On Mon, Dec 9, 2013 at 4:42 PM, Drak <drak at zikula.org> wrote:\n\n> actly the point and the moment they are publicly available you cannot stop\n> people talking about it or noticing it, or posting official looking sticky\n> posts at bitcointalk like this one:\n> https://bitcointalk.org/index.php?topic=364353.0. Was that an official\n> announcement?\n>\n\nYes, it is.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/be98fed3/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-12-09T19:06:50",
                "message_text_only": "On Mon, Dec 9, 2013 at 12:42 PM, Drak <drak at zikula.org> wrote:\n> looking sticky posts at bitcointalk like this one:\n> https://bitcointalk.org/index.php?topic=364353.0. Was that an official\n> announcement?\n\nYes.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Roy Badami",
                "date": "2013-12-10T07:23:36",
                "message_text_only": "On Mon, Dec 09, 2013 at 02:55:02PM +0000, Drak wrote:\n> On 9 December 2013 13:52, Roy Badami <roy at gnomon.org.uk> wrote:\n> >\n> >  On Mon, Dec 09, 2013 at 01:39:51PM +0000, Drak wrote:\n> > > Someone needs to update the bitcoin.org website, it still points\n> > downloads\n> > > to 0.8.5\n> >\n> > Perhaps because 0.8.6 hasn't been released yet?  Or did I miss the\n> > announcement?  I think it makes sense that release candidates are not\n> > promoted on bitcoin.org.\n> \n> \n> It was released and it's all over bitcointalk/reddit\n\nOh, I see - so it was.  It wasn't announced here though - is there\nsome other list I need to be on, too?  It would be nice if\nannouncements like this were posted to a mailing list as well as\nbitcointalk.org (is there a bitcoin-announce list that I missed?  If\nnot, maybe there should be)\n\nroy"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-10T07:47:55",
                "message_text_only": "On Tue, Dec 10, 2013 at 8:23 AM, Roy Badami <roy at gnomon.org.uk> wrote:\n\n> Oh, I see - so it was.  It wasn't announced here though - is there\n> some other list I need to be on, too?  It would be nice if\n> announcements like this were posted to a mailing list as well as\n> bitcointalk.org (is there a bitcoin-announce list that I missed?  If\n> not, maybe there should be)\n>\n\nYes could have been announced here too.\nWe announced the rc1 here but not the final release.\n...maybe we should add a list of places to announce to the release process.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/9ade8195/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "0.8.6 release candidate 1",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Wladimir",
                "Warren Togami Jr.",
                "Roy Badami",
                "Gregory Maxwell",
                "Gavin Andresen",
                "Drak"
            ],
            "messages_count": 16,
            "total_messages_chars_count": 11321
        }
    },
    {
        "title": "[Bitcoin-development] Message Signing based authentication",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-12-06T10:44:32",
                "message_text_only": "On 6 November 2013 07:41, slush <slush at centrum.cz> wrote:\n\n> > But where are the private keys stored? Crypto in the browser with help,\n> but although they will expose ECC via the NSS, I dont think bitcoin's\n> particular curve will be supported, because it's not NIST approved. If the\n> use case was presented though, they may add it.\n>\n> Trezor, my friend.\n>\n\nLooking forward to the trezor release, best of luck.\n\nThis may be an interesting read too:\n\nhttps://www.grc.com/sqrl/sqrl.htm\n\n\n> Slush\n>\n> Sent from mobile phone.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/dab65908/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Message Signing based authentication",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 711
        }
    },
    {
        "title": "[Bitcoin-development] New paper: Accelerating Bitcoin's Trasaction Processing",
        "thread_messages": [
            {
                "author": "Evan Duffield",
                "date": "2013-12-06T13:55:45",
                "message_text_only": "I'm posting this here for visibility. Some researchers in Israel have\nproposed a way to increase the transaction limit to 200 transactions per\nsecond by implementing a new blockchain selection algorithm called GHOST.\n\nhttps://bitcointalk.org/index.php?topic=359582.msg3274963;boardseen#new\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131206/8b4bc4c4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "New paper: Accelerating Bitcoin's Trasaction Processing",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Evan Duffield"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 472
        }
    },
    {
        "title": "[Bitcoin-development] Dedicated server for bitcoin.org, your thoughts?",
        "thread_messages": [
            {
                "author": "Sa\u00efvann Carignan",
                "date": "2013-12-08T01:17:25",
                "message_text_only": "I would like to know what are your thoughts on moving bitcoin.org on a\ndedicated server with a SSL certificate?\n\nI am considering the idea more seriously, but I'd like some feedback\nbefore taking steps.\n\nSa\u00efvann"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2013-12-08T03:38:00",
                "message_text_only": "Hello, re. the dedicated server for bitcoin.org idea, I have a few thoughts\n\n1) I have commented in a blogpost of August 2013 at\nhttps://odinn.cyberguerrilla.org/ with some thoughts relative to possible\nissues with CA related to bitcoin.org - where I mentioned something\nrelative to the DigiCert certificate,\n\"DigiCert \u201cmay revoke a Certificate, without notice, for the reasons\nstated in the CPS, including if DigiCert reasonably believes that\u201d (\u2026)\n\u201cApplicant is added to a government list of prohibited persons or entities\nor is operating from a prohibited destination under the laws of the United\nStates\u201d (\u2026) \u201cthe Private Key associated with a Certificate was disclosed\nor Compromised\u201d\"\nIn the same post I mentioned\n\"Bitcoin.org has no certificate, no encryption \u2014 a situation which has its\nown obvious problems. Bitcoin.org currently sends users to download the\nbitcoin-qt client from sourceforge. Sourceforge is encrypted and has a\ncertificate based on GeoTrust:\nhttps://www.geotrust.com/resources/repository/legal/\"\n\n(Currently (Dec. 7, 2013) bitcoin.org shows as 'not verified' and 'not\nencrypted' examining it in a cursory fashion w/ Chrome)\n\nNot sure how this would work, but it would be nice to see the content at\nbitcoin.org encrypted, of course, but also further decentralized? how many\nmirrors are there of bitcoin.org - not sure, but a few things that come to\nmind when thinking of this are Tahoe-LAFS and also .bit stuff (namecoin). \nThere are many ways to decentralize something but that is just something\nthat comes to mind.\n\nThis has been discussed at https://bitcointalk.org/index.php?topic=16312.0\n('Is Bitcoin.org a weakness of bitcoin?) in the past and see also this\nhttps://bitcointalk.org/index.php?topic=119652.0 which discusses mirroring\nof certain content\n\nSome things to think about.\n\n> I would like to know what are your thoughts on moving bitcoin.org on a\n> dedicated server with a SSL certificate?\n>\n> I am considering the idea more seriously, but I'd like some feedback\n> before taking steps.\n>\n> Sa\u00efvann\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Sa\u00efvann Carignan",
                "date": "2013-12-08T09:03:38",
                "message_text_only": "Forward secrecy:\nI was definitively already interested in using this.\n\nBinaries:\nSourceforge is not encrypted, actually. Although binaries hosting /\nsharing could be a separate subject discussed later I think.\n\nRevocation:\nI guess we could just buy another SSL cert from another CA (I mean, if\nthat really happens). There's a few ones that are not US based.\n\nDecentralization:\nSo long as we actually use DNS, the website is centralized :( However,\nits content isn't (can be forked on GitHub), but regarding the domain\nname, there is not much we can do against this AFAIK.\n\nSa\u00efvann\n\n\n\nLe 2013-12-07 22:38, Odinn Cyberguerrilla a \u00e9crit :\n> Hello, re. the dedicated server for bitcoin.org idea, I have a few thoughts\n> \n> 1) I have commented in a blogpost of August 2013 at\n> https://odinn.cyberguerrilla.org/ with some thoughts relative to possible\n> issues with CA related to bitcoin.org - where I mentioned something\n> relative to the DigiCert certificate,\n> \"DigiCert \u201cmay revoke a Certificate, without notice, for the reasons\n> stated in the CPS, including if DigiCert reasonably believes that\u201d (\u2026)\n> \u201cApplicant is added to a government list of prohibited persons or entities\n> or is operating from a prohibited destination under the laws of the United\n> States\u201d (\u2026) \u201cthe Private Key associated with a Certificate was disclosed\n> or Compromised\u201d\"\n> In the same post I mentioned\n> \"Bitcoin.org has no certificate, no encryption \u2014 a situation which has its\n> own obvious problems. Bitcoin.org currently sends users to download the\n> bitcoin-qt client from sourceforge. Sourceforge is encrypted and has a\n> certificate based on GeoTrust:\n> https://www.geotrust.com/resources/repository/legal/\"\n> \n> (Currently (Dec. 7, 2013) bitcoin.org shows as 'not verified' and 'not\n> encrypted' examining it in a cursory fashion w/ Chrome)\n> \n> Not sure how this would work, but it would be nice to see the content at\n> bitcoin.org encrypted, of course, but also further decentralized? how many\n> mirrors are there of bitcoin.org - not sure, but a few things that come to\n> mind when thinking of this are Tahoe-LAFS and also .bit stuff (namecoin). \n> There are many ways to decentralize something but that is just something\n> that comes to mind.\n> \n> This has been discussed at https://bitcointalk.org/index.php?topic=16312.0\n> ('Is Bitcoin.org a weakness of bitcoin?) in the past and see also this\n> https://bitcointalk.org/index.php?topic=119652.0 which discusses mirroring\n> of certain content\n> \n> Some things to think about.\n> \n>> I would like to know what are your thoughts on moving bitcoin.org on a\n>> dedicated server with a SSL certificate?\n>>\n>> I am considering the idea more seriously, but I'd like some feedback\n>> before taking steps.\n>>\n>> Sa\u00efvann\n>>\n>> ------------------------------------------------------------------------------\n>> Sponsored by Intel(R) XDK\n>> Develop, test and display web and hybrid apps with a single code base.\n>> Download it for free now!\n>> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK \n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-12-08T12:37:22",
                "message_text_only": "On Sunday, December 08, 2013 9:03:38 AM Sa\u00efvann Carignan wrote:\n> Binaries:\n> Sourceforge is not encrypted, actually. Although binaries hosting /\n> sharing could be a separate subject discussed later I think.\n\nEncryption is useless here. We want everyone to be able to download Bitcoin \nclients. Binaries on sourceforge are signed by multiple parties using gitian.\n\n> Decentralization:\n> So long as we actually use DNS, the website is centralized :( However,\n> its content isn't (can be forked on GitHub), but regarding the domain\n> name, there is not much we can do against this AFAIK.\n\nSo long as someone has root (or a user that can modify it), the website is \ncentralised. To really solve this, we would need a dedicated server that \naccepts commands only when signed by N-of-M parties, inside a cage locked by \npadlocks with keys held by independent parties, with a SSL certificate issued \nby an authority that has multiple parties watch it every step of the way into \nthat server.\n\nLuke"
            },
            {
                "author": "Drak",
                "date": "2013-12-08T19:16:31",
                "message_text_only": "On 8 December 2013 12:37, Luke-Jr <luke at dashjr.org> wrote:\n\n> Encryption is useless here. We want everyone to be able to download Bitcoin\n> clients. Binaries on sourceforge are signed by multiple parties using\n> gitian.\n>\n> > Decentralization:\n> > So long as we actually use DNS, the website is centralized :( However,\n> > its content isn't (can be forked on GitHub), but regarding the domain\n> > name, there is not much we can do against this AFAIK.\n>\n> So long as someone has root (or a user that can modify it), the website is\n> centralised. To really solve this, we would need a dedicated server that\n> accepts commands only when signed by N-of-M parties, inside a cage locked\n> by\n> padlocks with keys held by independent parties, with a SSL certificate\n> issued\n> by an authority that has multiple parties watch it every step of the way\n> into\n> that server.\n\n\nMalicious actors with root access to the server is another issue entirely.\nSure it's a problem, but it is not an argument not to have a properly\nsigned SSL certificate.\n\nWith out one, the exploit can be performed on routers to redirect traffic\nthrough a third party alter the content of the site (like the links on\nbitcoin.org to various wallet projects) and then onto the correct\ndestination. SSL at least mitigates that. For example it would be trivial\nto impersonate Electrum's site or whatever, \"change\" the link on the fly\nthat appears on the trusted source bitcoin.org via BGP redirection. Now\nusers will be directed to the scammers site which could be identical except\nfor domain name and of course malicious binaries.\n\nBGP redirection is a reality and can be exploited without much\nexpense/effort. MITM is a real world threat, not some theoretical\npossibility - reports show it's happening on an unprecedented scale. SSL is\nessential - that's a no-brainer. Sure other measures are important, but\nwithout SSL there is almost no point to any of the other options.\n\nSSL is so considered so important that the *HTTP 2.0 spec might be SSL\nonly*according to recent discussions at the W3C (\nhttp://lists.w3.org/Archives/Public/ietf-http-wg/2013OctDec/0625.html).\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/c6778642/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-08T19:25:24",
                "message_text_only": "On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:\n> BGP redirection is a reality and can be exploited without much\n\nYou're managing to argue against SSL. Because it actually provides\nbasically protection against an attacker who can actively intercept\ntraffic to the server. Against that threat model SSL is clearly\u2014 based\non your comments\u2014 providing a false sense of security.\n\nWe _do_ have protection that protect against that\u2014 the pgp signature,\nbut they are far from a solution since people do not check that.\n\n(I'm not suggesting we shouldn't have it, I'm suggesting you stop\narguing SSL provides protection it doesn't before you manage to change\nmy mind!)"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-08T20:28:35",
                "message_text_only": "Issues that would need to be resolved:\n\n1) Who pays for it? Most obvious answer: Foundation. However there's\ncurrently a fairly clear line between the foundation website and the\nbitcoin.org website. I personally am fine with the bitcoin foundation\nfunding the website, it's a lot closer to the bitcoin community than\ngithub. But some people might care. So next step would be to contact the\nFoundation board and see if they're willing to fund it.\n\n2) Anti-DoS? I assume github handles this at the moment, though I doubt\nthere's anything to be gained from DoSing the informational website\n\n3) Where does the server go? Ideally, a hosting provider that accepts\nBitcoin of course!\n\n4) Who admins it?\n\n5) Who controls DNS for it?\n\nRight now I think Sirius still owns DNS for bitcoin.org which is nonsense.\nHe needs to pass it on to someone who is actually still involved with the\nproject. Again, the most obvious neutral candidate would be the Foundation.\n\nSo I think it's a good idea but there's a fair amount of work here. The\nprimary upside I see is that it opens the potential for adding\ninteractive/server-side code in future if we decide that would be useful.\n\n\n\nOn Sun, Dec 8, 2013 at 8:25 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:\n> > BGP redirection is a reality and can be exploited without much\n>\n> You're managing to argue against SSL. Because it actually provides\n> basically protection against an attacker who can actively intercept\n> traffic to the server. Against that threat model SSL is clearly\u2014 based\n> on your comments\u2014 providing a false sense of security.\n>\n> We _do_ have protection that protect against that\u2014 the pgp signature,\n> but they are far from a solution since people do not check that.\n>\n> (I'm not suggesting we shouldn't have it, I'm suggesting you stop\n> arguing SSL provides protection it doesn't before you manage to change\n> my mind!)\n>\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/69028098/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-08T20:40:12",
                "message_text_only": "On Sun, Dec 8, 2013 at 12:28 PM, Mike Hearn <mike at plan99.net> wrote:\n> Right now I think Sirius still owns DNS for bitcoin.org which is nonsense.\n> He needs to pass it on to someone who is actually still involved with the\n> project. Again, the most obvious neutral candidate would be the Foundation.\n\nI am opposed to Bitcoin Foundation having control of Bitcoin.org, and\nI think it would be foolish of the foundation to accept it were it\noffered."
            },
            {
                "author": "Drak",
                "date": "2013-12-08T20:51:07",
                "message_text_only": "On 8 December 2013 20:40, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Sun, Dec 8, 2013 at 12:28 PM, Mike Hearn <mike at plan99.net> wrote:\n> > Right now I think Sirius still owns DNS for bitcoin.org which is\n> nonsense.\n> > He needs to pass it on to someone who is actually still involved with the\n> > project. Again, the most obvious neutral candidate would be the\n> Foundation.\n>\n> I am opposed to Bitcoin Foundation having control of Bitcoin.org, and\n> I think it would be foolish of the foundation to accept it were it\n> offered.\n>\n\nWhat do you suggest though? We will need to trust someone (even in a group\neach person can act autonomously).\nThe only thing I can suggest would be to hand the keys to the bitcoin\nproject lead.\n\nOtherwise, who has admin rights to the code projects\n(github/sourceforge/this mailing list)? Those people have proven they can\nbe trusted so far.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/7513277a/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-12-08T21:01:24",
                "message_text_only": "On Sunday, December 08, 2013 8:51:07 PM Drak wrote:\n> Otherwise, who has admin rights to the code projects\n> (github/sourceforge/this mailing list)? Those people have proven they can\n> be trusted so far.\n\nCan someone explain how Sirius has proven the least bit untrustworthy?\n\nLuke"
            },
            {
                "author": "Drak",
                "date": "2013-12-08T21:11:20",
                "message_text_only": "On 8 December 2013 21:01, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Sunday, December 08, 2013 8:51:07 PM Drak wrote:\n> > Otherwise, who has admin rights to the code projects\n> > (github/sourceforge/this mailing list)? Those people have proven they can\n> > be trusted so far.\n>\n> Can someone explain how Sirius has proven the least bit untrustworthy?\n\n\nIt's not just about trust, there is the robustness factor: what if he\nbecomes sick, unavailable, hit by a bus? Others need the ability to pickup\nand run with it. The control over the domain (including ability to renew\nregistration, alter nameservers) needs to be with more than one person.\nThat's why I suggest using the same people who have control over the\nsoftware project at sf,github.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/232210d7/attachment.html>"
            },
            {
                "author": "theymos",
                "date": "2013-12-08T23:51:20",
                "message_text_only": "On Sun, Dec 8, 2013, at 03:11 PM, Drak wrote:\n\nIt's not just about trust, there is the robustness factor: what if he\nbecomes sick, unavailable, hit by a bus? Others need the ability to\npickup and run with it. The control over the domain (including ability\nto renew registration, alter nameservers) needs to be with more than\none person. That's why I suggest using the same people who have control\nover the software project at sf,github\n\n\nThe bitcoin.org domain is controlled by me, Sirius, and an anonymous\nperson. Control will not be lost if Sirius becomes unavailable.\n\nSSL is probably a good idea, and it's probably also a good idea to\nseparate bitcoin.org from Github. I don't know that I trust Github. I'm\nsure that you can find a sponsor for a dedicated server. Let us know if\nDNS changes to bitcoin.org are required.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/576e4afb/attachment.html>"
            },
            {
                "author": "Taylor Gerring",
                "date": "2013-12-09T00:06:30",
                "message_text_only": "Maybe bitcointalk.org would like to donate a few BTC from the 6,000 BTC \"new forum\" fund to sponsor hosting?\n\nOn Dec 8, 2013, at 5:51 PM, theymos <theymos at mm.st> wrote:\n\n>  I'm sure that you can find a sponsor for a dedicated server. \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/24223e3b/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-12-09T06:29:25",
                "message_text_only": "I can provide the server hardware and colocation (space, power, and  \nbandwidth) if dedicated 50Mbit in 55 S. Market, San Jose, CA data center  \nis acceptable.\n\nIf it needs more bandwidth than that, in a few months I hope to be getting  \nspace in LA with 1Gbit, but I can't commit to that now.\n\n\n> On Sun, Dec 8, 2013, at 03:11 PM, Drak wrote:\n>> It's not just about trust, there is the robustness factor: what if he  \n>> becomes sick, unavailable, hit by a bus? Others need the ability to  \n>> >>pickup and run with it. The control over the domain (including  \n>> ability to renew registration, alter nameservers) needs to be with more  \n>> than >>one person. That's why I suggest using the same people who have  \n>> control over the software project at sf,github\n>The bitcoin.org domain is controlled by me, Sirius, and an anonymous  \n> person. Control will not be lost if Sirius becomes unavailable.\n>SSL is probably a good idea, and it's probably also a good idea to  \n> separate bitcoin.org from Github. I don't know that I trust Github. I'm  \n> sure that you can >find a sponsor for a dedicated server. Let us know if  \n> DNS changes to bitcoin.org are required.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/d012ed80/attachment.html>"
            },
            {
                "author": "Roy Badami",
                "date": "2013-12-09T10:54:36",
                "message_text_only": "> The bitcoin.org domain is controlled by me, Sirius, and an anonymous\n> person. Control will not be lost if Sirius becomes unavailable.\n\nI know this will be a controversial viewpoint in some quarters, but\nI'm not a fan of anonymity, or of pseudonyms.  As far as I know\n(please correct me if I'm wrong) all the core devs go by their real\nnames with the exception of Satoshi (and I would hope he no longer has\ncommit access? - only because I would hope that no-one has\npseudonymous commit access these days).  I don't see why this should\nbe different for the domain, the DNS and the rest of the\ninfrastructure...\n\nAlthough that's separate from the question of who the registrant of\nthe domain should be (the registrant being the closest thing a domain\nhas to a recorded legal owner).  Who currently purports to be the\ncurrent legal owner of the domain?\n\nIMHO the registrant should obviously be real and not WhoisGuard -\nanonymous stuff like this always looks shady.  And surely the Bitcoin\nFoundation is the obvious candidate to own the domain (just like\nkernel.org is owned by the Linux Foundation).  But this may all be\nmoot unless the current legal owners are willing to assign the\ndomain...\n\nroy"
            },
            {
                "author": "Odinn Cyberguerrilla",
                "date": "2013-12-10T09:18:41",
                "message_text_only": "I've been lurking on this convo since it began, but I wanted to say\nthanks, theymos\n\ncheers to you all and yay for decentralization, wherever it leads.\n\n-odinn\nmuh latest: http://github.com/ABISprotocol/ABIS\n\n> On Sun, Dec 8, 2013, at 03:11 PM, Drak wrote:\n>\n> It's not just about trust, there is the robustness factor: what if he\n> becomes sick, unavailable, hit by a bus? Others need the ability to\n> pickup and run with it. The control over the domain (including ability\n> to renew registration, alter nameservers) needs to be with more than\n> one person. That's why I suggest using the same people who have control\n> over the software project at sf,github\n>\n>\n> The bitcoin.org domain is controlled by me, Sirius, and an anonymous\n> person. Control will not be lost if Sirius becomes unavailable.\n>\n> SSL is probably a good idea, and it's probably also a good idea to\n> separate bitcoin.org from Github. I don't know that I trust Github. I'm\n> sure that you can find a sponsor for a dedicated server. Let us know if\n> DNS changes to bitcoin.org are required.\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-08T21:09:21",
                "message_text_only": "On Sun, Dec 8, 2013 at 12:51 PM, Drak <drak at zikula.org> wrote:\n> What do you suggest though? We will need to trust someone (even in a group\n> each person can act autonomously).\n> The only thing I can suggest would be to hand the keys to the bitcoin\n> project lead.\n>\n> Otherwise, who has admin rights to the code projects\n> (github/sourceforge/this mailing list)? Those people have proven they can be\n> trusted so far.\n\nMy concern isn't a matter of trustworthyness, it's a matter of too\nmany eggs in one basket (especially a basket with potentially poor\njurisdictional locality).  The current control of the domain has\nproven reasonably trustworthy, and if there is a concern for funding\nour own server stuff that can be easily handled (e.g. if need be, I'd\npay for it myself, without being in control of it).\n\nAlso, in terms of effective lobbying/advocacy I worry that the\nfoundation would be unable to do an effective job if its saddled with\nthe belief that its in control of Bitcoin (\"Why don't you just make\nevery transaction {...}\": the answer is because its a decentralized\nsystem and no one can unilaterally change it in ways its users would\nhate, but it becomes complicated. It's crisper when its clear that\ndiverse and independant parties are in control of the popular\ninfrastructure)."
            },
            {
                "author": "Sa\u00efvann Carignan",
                "date": "2013-12-08T21:16:09",
                "message_text_only": "> Issues that would need to be resolved:\n> \n> 1) Who pays for it? Most obvious answer: Foundation. However there's\n> currently a fairly clear line between the foundation website and the\n> bitcoin.org <http://bitcoin.org> website. I personally am fine with the\n> bitcoin foundation funding the website, it's a lot closer to the bitcoin\n> community than github. But some people might care. So next step would be\n> to contact the Foundation board and see if they're willing to fund it.\n\nActually I might find way to fund it. But I needed to have ACK &\ncomments from developers before anything.\n\n> 2) Anti-DoS? I assume github handles this at the moment, though I doubt\n> there's anything to be gained from DoSing the informational website\n\nThat is a fair question, we will need anti-DDoS. Unless something better\n(and affordable) can be recommended, this would yet put another Bitcoin\nwebsite under CloudFlare.\n\n> 4) Who admins it?\n\nObviously, I thought it would be important that the server is owned by\nsomeone who can be trusted, with ssh access for all core developers.\n\n> 5) Who controls DNS for it?\n\nI'm not sure we'll get any change on this level. I have no idea if the\ndomain is in good hands, except for the fact that nothing bad happened\nthus far. If anything, moving it to core developers (as intended when\nthe domain was registered) would make more sense IMO. But again, is it\npossible, I don't know."
            },
            {
                "author": "Roy Badami",
                "date": "2013-12-08T21:58:50",
                "message_text_only": "> > 5) Who controls DNS for it?\n> \n> I'm not sure we'll get any change on this level. I have no idea if the\n> domain is in good hands, except for the fact that nothing bad happened\n> thus far. If anything, moving it to core developers (as intended when\n> the domain was registered) would make more sense IMO. But again, is it\n> possible, I don't know.\n\nThat's an interesting question.  The bitcoin.org domain is hiding\nbehind a WhoisGuard anonymous registration.  Why are we not allowed to\nknow who this domain belongs to?  Why are we being asked to trust some\nunidentified party?\n\nroy"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-08T23:03:50",
                "message_text_only": "> That's an interesting question.  The bitcoin.org domain is hiding\n> behind a WhoisGuard anonymous registration.  Why are we not allowed to\n> know who this domain belongs to?  Why are we being asked to trust some\n> unidentified party?\n\n\nIt's done that way because it was originally registered by Satoshi. It's\nnow controlled by Sirius, who doesn't really take part in the project\nanymore.\n\nI bring this up because of the recent bitcointalk fiasco. AFAIK the domains\nare registered and controlled in the same way. It's likely that the current\nregistrar isn't very secure.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/26229b53/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-12-09T05:32:34",
                "message_text_only": "On Sun, Dec 8, 2013 at 8:03 PM, Mike Hearn <mike at plan99.net> wrote:\n> I bring this up because of the recent bitcointalk fiasco. AFAIK the domains\n> are registered and controlled in the same way. It's likely that the current\n> registrar isn't very secure.\n\nI registered bitcointalk.org originally, then passed along control.\nIt is likely that the two domains are /not/ registered and controlled\nin the same way.\n\nThe handling of bitcointalk.org was quite disappointing.  Even after\n\"control\" passed from me to Sirius, he did not bother to change the\nregistrar credentials for months afterward, despite repeated urging.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-08T22:44:26",
                "message_text_only": ">\n> > 4) Who admins it?\n>\n> Obviously, I thought it would be important that the server is owned by\n> someone who can be trusted, with ssh access for all core developers.\n>\n\nThat is a really bad idea.  If there is not a CLEAR answer to \"who admins\nit\", there will be a bunch of \"I thought YOU were applying security\npatches... no, I thought YOU were...\" the first time it gets hacked.\n\nSo, the question is:  who wants to take responsibility for keeping\nbitcoin.org safe and secure?\n\nI am not going to do that, I've got too many other things to worry about.\nIt is exactly the type of thing the Foundation was setup to do, but if\ny'all want to create some other organization to do it, then please make it\nhappen.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/2960d236/attachment.html>"
            },
            {
                "author": "Sa\u00efvann Carignan",
                "date": "2013-12-08T23:48:12",
                "message_text_only": ">     > 4) Who admins it?\n> \n>     Obviously, I thought it would be important that the server is owned by\n>     someone who can be trusted, with ssh access for all core developers.\n> \n> \n> That is a really bad idea.  If there is not a CLEAR answer to \"who\n> admins it\", there will be a bunch of \"I thought YOU were applying\n> security patches... no, I thought YOU were...\" the first time it gets\n> hacked.\n> \n> So, the question is:  who wants to take responsibility for keeping\n> bitcoin.org <http://bitcoin.org> safe and secure?\n> \n> I am not going to do that, I've got too many other things to worry\n> about. It is exactly the type of thing the Foundation was setup to do,\n> but if y'all want to create some other organization to do it, then\n> please make it happen.\n> \n> -- \n> --\n> Gavin Andresen\n> \n\nI fully agree that someone *must* be assigned to the task, otherwise\nit's better keeping current hosting.\n\nPerhaps that was implicit, but I can take this responsibility so long as\nI can be replaced if required for any reason. On this regard, I agree\nthat the Foundation funding / owning / securing the server\ninfrastructure is a much better long term strategy.\n\nThis said, I also agree that it is a better idea to keep the domain and\nwebsite content independently owned and managed, for the reasons stated\nby Gregory Maxwell.\n\nIf there isn't a good consensus on one of the two options I suggested, I\nvote we don't lose more time on this question and keep focus with bigger\npriorities."
            },
            {
                "author": "Luke-Jr",
                "date": "2013-12-08T23:18:42",
                "message_text_only": "On Sunday, December 08, 2013 9:16:09 PM Sa\u00efvann Carignan wrote:\n> > 1) Who pays for it? Most obvious answer: Foundation. However there's\n> > currently a fairly clear line between the foundation website and the\n> > bitcoin.org <http://bitcoin.org> website. I personally am fine with the\n> > bitcoin foundation funding the website, it's a lot closer to the bitcoin\n> > community than github. But some people might care. So next step would be\n> > to contact the Foundation board and see if they're willing to fund it.\n> \n> Actually I might find way to fund it. But I needed to have ACK &\n> comments from developers before anything.\n> \n> ...\n> > 4) Who admins it?\n> \n> Obviously, I thought it would be important that the server is owned by\n> someone who can be trusted, with ssh access for all core developers.\n> \n> > 5) Who controls DNS for it?\n> \n> I'm not sure we'll get any change on this level. I have no idea if the\n> domain is in good hands, except for the fact that nothing bad happened\n> thus far. If anything, moving it to core developers (as intended when\n> the domain was registered) would make more sense IMO. But again, is it\n> possible, I don't know.\n\nI don't think \"core developers\" should be directly in control here any more \nthan the Foundation should. Developers are good for development, not \nnecessarily web or server admin tasks. Only those directly involved in the \nneeded roles should have access IMO.\n\nLuke"
            },
            {
                "author": "Patrick",
                "date": "2013-12-08T23:29:05",
                "message_text_only": "Have you considered black lotus dedicated servers?\n\nOn 12/08/2013 03:16 PM, Sa\u00efvann Carignan wrote:\n>> Issues that would need to be resolved:\n>>\n>> 1) Who pays for it? Most obvious answer: Foundation. However there's\n>> currently a fairly clear line between the foundation website and the\n>> bitcoin.org <http://bitcoin.org> website. I personally am fine with the\n>> bitcoin foundation funding the website, it's a lot closer to the bitcoin\n>> community than github. But some people might care. So next step would be\n>> to contact the Foundation board and see if they're willing to fund it.\n> Actually I might find way to fund it. But I needed to have ACK &\n> comments from developers before anything.\n>\n>> 2) Anti-DoS? I assume github handles this at the moment, though I doubt\n>> there's anything to be gained from DoSing the informational website\n> That is a fair question, we will need anti-DDoS. Unless something better\n> (and affordable) can be recommended, this would yet put another Bitcoin\n> website under CloudFlare.\n>\n>> 4) Who admins it?\n> Obviously, I thought it would be important that the server is owned by\n> someone who can be trusted, with ssh access for all core developers.\n>\n>> 5) Who controls DNS for it?\n> I'm not sure we'll get any change on this level. I have no idea if the\n> domain is in good hands, except for the fact that nothing bad happened\n> thus far. If anything, moving it to core developers (as intended when\n> the domain was registered) would make more sense IMO. But again, is it\n> possible, I don't know.\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK \n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-08T21:46:18",
                "message_text_only": "I too would be against the foundation taking control of hosting or the\ndomain. I have no reason at this time not to trust them, by checks and\nbalances are a good thing.\nOn Dec 8, 2013 12:29 PM, \"Mike Hearn\" <mike at plan99.net> wrote:\n\n> Issues that would need to be resolved:\n>\n> 1) Who pays for it? Most obvious answer: Foundation. However there's\n> currently a fairly clear line between the foundation website and the\n> bitcoin.org website. I personally am fine with the bitcoin foundation\n> funding the website, it's a lot closer to the bitcoin community than\n> github. But some people might care. So next step would be to contact the\n> Foundation board and see if they're willing to fund it.\n>\n> 2) Anti-DoS? I assume github handles this at the moment, though I doubt\n> there's anything to be gained from DoSing the informational website\n>\n> 3) Where does the server go? Ideally, a hosting provider that accepts\n> Bitcoin of course!\n>\n> 4) Who admins it?\n>\n> 5) Who controls DNS for it?\n>\n> Right now I think Sirius still owns DNS for bitcoin.org which is\n> nonsense. He needs to pass it on to someone who is actually still involved\n> with the project. Again, the most obvious neutral candidate would be the\n> Foundation.\n>\n> So I think it's a good idea but there's a fair amount of work here. The\n> primary upside I see is that it opens the potential for adding\n> interactive/server-side code in future if we decide that would be useful.\n>\n>\n>\n> On Sun, Dec 8, 2013 at 8:25 PM, Gregory Maxwell <gmaxwell at gmail.com>wrote:\n>\n>> On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:\n>> > BGP redirection is a reality and can be exploited without much\n>>\n>> You're managing to argue against SSL. Because it actually provides\n>> basically protection against an attacker who can actively intercept\n>> traffic to the server. Against that threat model SSL is clearly\u2014 based\n>> on your comments\u2014 providing a false sense of security.\n>>\n>> We _do_ have protection that protect against that\u2014 the pgp signature,\n>> but they are far from a solution since people do not check that.\n>>\n>> (I'm not suggesting we shouldn't have it, I'm suggesting you stop\n>> arguing SSL provides protection it doesn't before you manage to change\n>> my mind!)\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Sponsored by Intel(R) XDK\n>> Develop, test and display web and hybrid apps with a single code base.\n>> Download it for free now!\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/17fae2d5/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-12-08T20:40:04",
                "message_text_only": "On 8 December 2013 19:25, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:\n> > BGP redirection is a reality and can be exploited without much\n>\n> You're managing to argue against SSL. Because it actually provides\n> basically protection against an attacker who can actively intercept\n> traffic to the server. Against that threat model SSL is clearly\u2014 based\n> on your comments\u2014 providing a false sense of security.\n\n\nLet me clarify. SSL renders BGP redirection useless because the browser\nholds the signatures of CA's it trusts: an attacker cannot spoof a\ncertificate because it needs to be signed by a trusted CA: that's the point\nof SSL, it encrypts and proves identity, the latter part is what thwarts\nMITM. If there was an MITM the browser screams pretty loudly about it with\na big threat warning interstitial.\n\nRegards,\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/9e49620a/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-08T20:50:29",
                "message_text_only": "On Sun, Dec 8, 2013 at 12:40 PM, Drak <drak at zikula.org> wrote:\n> Let me clarify. SSL renders BGP redirection useless because the browser\n> holds the signatures of CA's it trusts: an attacker cannot spoof a\n> certificate because it needs to be signed by a trusted CA: that's the point\n> of SSL, it encrypts and proves identity, the latter part is what thwarts\n> MITM. If there was an MITM the browser screams pretty loudly about it with a\n> big threat warning interstitial.\n\nSadly this isn't true: There are (many) CAs which will issue a\ncertificate (apparently sometime within minutes, though last\ncertificate I obtained took a couple hours total) to anyone who can\nrespond to http (not https) requests on behalf of the domain from the\nperspective of the CA.\n\nThis means you can MITM the site, pass all traffic through except the\nHTTP request from the CA, and start intercepting once the CA has\nsigned your certificate. This works because the CA does nothing to\nverify identity except check that the requester can control the site.\n\nIf you'd like to me to demonstrate this attack for you I'd be willing\u2014\nI can provide a proxy that passes on :80 and :443, run your traffic\nthrough it and I'll get a cert with your domain name.\n\nI'm sorry for the tangent here\u2014 I think this sub-discussion is really\nunrelated to having Bitcoin.org behind SSL\u2014 but \"someone is wrong on\nthe internet\", and its important to know that SSL hardly does anything\nto reduce the need to check the offline signatures on the binaries."
            },
            {
                "author": "Drak",
                "date": "2013-12-08T21:07:54",
                "message_text_only": "On 8 December 2013 20:50, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> Sadly this isn't true: There are (many) CAs which will issue a\n>  certificate (apparently sometime within minutes, though last\n> certificate I obtained took a couple hours total) to anyone who can\n> respond to http (not https) requests on behalf of the domain from the\n> perspective of the CA.\n>\n\nSimple verification relies on being able to answer the email sent to the\nperson in the whois records, or standard admin/webmaster@ addresses to\nprove ownership of the domain. This is a good point to note -\nbitcoin.orgshould not get a simple certificate, but one that requires\nidentify\nverification for the person/org who is applying. They are more expensive.\n\n\n> This means you can MITM the site, pass all traffic through except the\n> HTTP request from the CA, and start intercepting once the CA has\n> signed your certificate. This works because the CA does nothing to\n> verify identity except check that the requester can control the site.\n>\n> If you'd like to me to demonstrate this attack for you I'd be willing\u2014\n> I can provide a proxy that passes on :80 and :443, run your traffic\n> through it and I'll get a cert with your domain name.\n>\n\nYou cannot MITM SSL connections - it will cause a browser warning.\nI do not have the means, but it has been demonstrated some people are\nperforming BGP redirections, daily, and on a massive scale... and it's a\nproblem, because BGP was designed on implicit trust.\n\n\n> I'm sorry for the tangent here\u2014 I think this sub-discussion is really\n> unrelated to having Bitcoin.org behind SSL\u2014 but \"someone is wrong on\n> the internet\", and its important to know that SSL hardly does anything\n> to reduce the need to check the offline signatures on the binaries.\n\n\nYou are right that the CA system is not full-proof, one CA was caught\nissuing a bogus certificate on purpose a while back, I forgot the name but\nit resulted in CA certificate revokation and the entire company being\nblacklisted from Firefox and Google Chrome forever - basically a summary\ncorporate execution. I personally imagine the CIA or other state actor\ncould just quietly buy up an already trusted CA and abuse them. But it's\nclear, people are watching, and if a CA is caught once, that's the end of\ntheir business forever: Firefox and Google demonstrated that. The strategy\nis possibly too expensive and risky to carry off which is maybe why they\ndon't do it.\n\nWhat has been noted with all the Snowden leaks, and with the Lavabit case,\nthe security agencies did not get bogus certificates issued, they still got\ncourt orders, or other deception to get hold of the encryption certificates\nof their targets instead of issuing their own so they could listen in.\n\nThe CA system is not full proof, but it is what we have. Similar arguments\nhave been made against the use of identity certificates for bitcoin, but\nthat hasnt stopped it's inclusion in the bitcoin payment protocol.\n\nAnyway, I take your points, but this is an area I am quite passionate about\nso it's important for me to be clear.\n\nRegards,\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/875bc5d8/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-08T21:14:44",
                "message_text_only": "On Sun, Dec 8, 2013 at 1:07 PM, Drak <drak at zikula.org> wrote:\n> Simple verification relies on being able to answer the email sent to the\n> person in the whois records, or standard admin/webmaster@ addresses to prove\n> ownership of the domain\n\nGodaddy and many other CA's are verified from nothing other than a\nhttp fetch, no email involved.\n\nAs I said, I'm willing to demonstrate if you have a domain.\n\n> You cannot MITM SSL connections\n\nYou can, once you've obtained a certificate.\n\n> Anyway, I take your points, but this is an area I am quite passionate about\n> so it's important for me to be clear.\n\nAs I warned before, you're making my reconsider my position about the\ndownloads being SSL. If people are so convinced that SSL provides\nprotection it does not that even with an explanation and and an offer\nto demonstrate then perhaps providing SSL will reduce people's\nsecurity.\n\n... the _only_ reason I don't yet hold that position now is that I\nknow objectively that almost no one tests the signatures.\n\nOn Sun, Dec 8, 2013 at 1:11 PM, Drak <drak at zikula.org> wrote:\n> It's not just about trust, there is the robustness factor: what if he\n> becomes sick, unavailable, hit by a bus? Others need the ability to pickup\n> and run with it. The control over the domain (including ability to renew\n> registration, alter nameservers) needs to be with more than one person.\n> That's why I suggest using the same people who have control over the\n> software project at sf,github.\n\nMy understanding is that the domain is already controlled by more than\none person. You're not the first person to think of these things. :)"
            },
            {
                "author": "Robert McKay",
                "date": "2013-12-08T22:27:17",
                "message_text_only": "On Sun, 8 Dec 2013 13:14:44 -0800, Gregory Maxwell wrote:\n> On Sun, Dec 8, 2013 at 1:07 PM, Drak <drak at zikula.org> wrote:\n>> Simple verification relies on being able to answer the email sent to \n>> the\n>> person in the whois records, or standard admin/webmaster@ addresses \n>> to prove\n>> ownership of the domain\n>\n> Godaddy and many other CA's are verified from nothing other than a\n> http fetch, no email involved.\n\nIt's just as easy to steal emails via a BGP or DNS redirect anyway.. \nyou could even take over the actual domain at the registry level by \nstealing a password reset via BGP or DNS redirect and actually many \nregistries will hand over control of a domain by faxing them a forged \ndriving license in the owner's name anyway so it doesn't even really \nneed to be a particularly sophisticated attacker. Once you have registry \ncontrol of the domain it's easy enough to get an SSL cert too, probably \neven an 'extended validation' one.\n\nWhen Afghanistan was taken over the entire .af TLD was probably \ntransferred using a forged fax to ICANN \n(http://web.archive.org/web/20041017031020/http://www.iana.org/cctld/af/razeeq-letter-13aug02.pdf) \nbut I guess that's a little different :p\n\nRob"
            },
            {
                "author": "Adam Back",
                "date": "2013-12-12T20:51:06",
                "message_text_only": "I think the one thing that SSL does provide is some protection against ARP\nor DNS poisoning to trick the user into downloading from a different site.\n\nThe PGP WoT surrounding bitcoin or OS related ISOs be weak - I am not sure\nif I could even check it directly myself despite spending a few hours\ntracking down keys and checking fingerprints of biz cards of core devs I met\nin person, then that is a relevant point.\n\nAdam\n\nOn Sun, Dec 08, 2013 at 11:25:24AM -0800, Gregory Maxwell wrote:\n>On Sun, Dec 8, 2013 at 11:16 AM, Drak <drak at zikula.org> wrote:\n>> BGP redirection is a reality and can be exploited without much\n>\n>You're managing to argue against SSL. Because it actually provides\n>basically protection against an attacker who can actively intercept\n>traffic to the server. Against that threat model SSL is clearly\u2014 based\n>on your comments\u2014 providing a false sense of security.\n>\n>We _do_ have protection that protect against that\u2014 the pgp signature,\n>but they are far from a solution since people do not check that.\n>\n>(I'm not suggesting we shouldn't have it, I'm suggesting you stop\n>arguing SSL provides protection it doesn't before you manage to change\n>my mind!)\n>\n>------------------------------------------------------------------------------\n>Sponsored by Intel(R) XDK\n>Develop, test and display web and hybrid apps with a single code base.\n>Download it for free now!\n>http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Drak",
                "date": "2013-12-31T13:39:30",
                "message_text_only": "Has anyone seen the talk at 30c3 on the current NSA capabilities?\nhttps://www.youtube.com/watch?v=b0w36GAyZIA\n\nSpecifically they are able to \"beat the speed of light\" between you and a\nwebsite such that if you communicate with Bob, they can sent competing\npackets that will arrive before Bob's packets. They have  realtime deep\npacket insertion able to inject arbitrary data into an TCP streams and can\nchange file downloads **on the fly**. This can be done remotely.\n\nSourceforge do not have https downloads, so this is yet another reason to\nmove downloads to somewhere that does - like github.\nThe NSA has the ability, right now to change every download of bitcoin-qt,\non the fly and the only cure is encryption.\n\nRevealed as part of the presentation is the fact that if the NSA has access\nto these capabilities, then so do others and in fact one of the things\nrevealed yesterday was independently discovered already and published.\n\nSame goes for the bitcoin.org site - why are we dragging our feet on\ninstalling an SSL certificate and redirecting all http to https? While no\nsolution is perfect, it's a lot better than zero defense.\n\nYou can see the irony of disseminating the bitcoin crypto-currency client\n in the clear.\n\nFor anyone who has not seen the video. You will be shocked by what is\nactually in the wild being used today. It goes way beyond anything\nimaginable even in science fiction.\n\nhttps://www.youtube.com/watch?v=b0w36GAyZIA\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/351419ac/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-31T13:48:06",
                "message_text_only": "On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:\n> The NSA has the ability, right now to change every download of bitcoin-qt,\n> on the fly and the only cure is encryption.\n\nPlease cut it out with the snake oil pedaling. This is really over the\ntop. You're invoking the NSA as the threat here? Okay. The NSA can\ntrivially compromise an HTTPS download site: even ignoring the CA\ninsecurity, and government run CAs certificate authorities issue CA\ncerts to random governments and corporations for dataloss prevention\npurposes. Not to mention unparalleled access to exploits.\n\nThe downloads are protected by something far stronger than SSL\nalready, which might even have a chance against the NSA. Actual\nsignatures of the downloads with offline keys.\n\nI'm all pro-SSL and all that, but you are\u2014 piece by piece\u2014 really\nconvincing me that it produces an entirely false sense of security\nwhich is entirely unjustified."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-31T13:59:47",
                "message_text_only": "Given that hardly anyone checks the signatures, it's fair to say downloads\naren't protected by anything at the moment. SSL for downloads can only\nraise the bar, never lower it, and if the NSA want to kick off the process\nof revoking some of the big CA's then I'm game (assuming anyone detects it\nof course) :)\n\nAnyway, nobody is dragging feet, the problem is right now we get what is\neffectively a huge free subsidy from github and SourceForge for site\nhosting. The cost is no SSL. So getting SSL would require that \"we\" pay for\nit ourselves, but the primary method we have for funding public\ngoods/infrastructure (the Foundation) which is the subject of various\nconspiracy theories. Jeremy has made a generous offer further up the\nthread, the issue being I guess none of us know how much traffic we\nactually get :( I remember suggesting that we whack Google Analytics or\nsome other statistics package on when the new website design was done and\nthat was rejected for similar reasons (\"organisations are bad\").\n\nSo we are in a position where we get a subsidy of large but unknown size\nfrom various existing US corporations, but moving to different ones is\ncontroversial, hence no progress :)\n\n\n\nOn Tue, Dec 31, 2013 at 1:48 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:\n> > The NSA has the ability, right now to change every download of\n> bitcoin-qt,\n> > on the fly and the only cure is encryption.\n>\n> Please cut it out with the snake oil pedaling. This is really over the\n> top. You're invoking the NSA as the threat here? Okay. The NSA can\n> trivially compromise an HTTPS download site: even ignoring the CA\n> insecurity, and government run CAs certificate authorities issue CA\n> certs to random governments and corporations for dataloss prevention\n> purposes. Not to mention unparalleled access to exploits.\n>\n> The downloads are protected by something far stronger than SSL\n> already, which might even have a chance against the NSA. Actual\n> signatures of the downloads with offline keys.\n>\n> I'm all pro-SSL and all that, but you are\u2014 piece by piece\u2014 really\n> convincing me that it produces an entirely false sense of security\n> which is entirely unjustified.\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/459ec369/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-31T14:18:45",
                "message_text_only": "On Tue, Dec 31, 2013 at 5:59 AM, Mike Hearn <mike at plan99.net> wrote:\n> but moving to different ones is\n> controversial, hence no progress :)\n\nThe site was actually moved onto a dedicated server temporarily and it\nmelted down under the load. I wouldn't call that no progress.\n\n\nPerhaps I wasn't clear on the point I was making Drak's threat model\nis not improved in the slightest by SSL. It would be improved by\nincreasing the use of signature checking, e.g. by making it easier.\nFlat out misinformation never improves security."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-31T14:23:55",
                "message_text_only": ">\n> The site was actually moved onto a dedicated server temporarily and it\n> melted down under the load. I wouldn't call that no progress.\n>\n\nOh, it did? When was that? I must have missed this excitement :)\n\nAny idea how much load it had?\n\nPerhaps I wasn't clear on the point I was making Drak's threat model\n> is not improved in the slightest by SSL. It would be improved by\n> increasing the use of signature checking, e.g. by making it easier.\n>\n\nWell, that depends. If you watch Applebaums talk he is pushing TLS pretty\nhard, and saying that based on the access to the source docs some of their\nMITM attacks can't beat TLS. It appears that they have the capability to do\nbulk MITM and rewrite of downloads as Drak says but *not* when TLS is\npresent, that would force more targeted attacks. So to me that implies that\nTLS does raise the bar and is worth doing.\n\nHowever if we can't find a server that won't melt under the load, then\nthat'd be an issue. We could consider hosting downloads on AppEngine or\nsomething else that can handle both high load and TLS.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/b669b88d/attachment.html>"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-12-31T21:25:40",
                "message_text_only": "I didn't know about the dedicated server meltdown, it wasn't any of my  \ninfra. Anyway, my previous offer still stands.\n\nOne less 'security theater' approach would be if we could provide  \nforward-validation of updates using the blockchain. It's always going to  \nbe up to the user the first time they install the wallet to verify the  \nprovenance of the binaries/source. From that point forward, we could make  \nit easier if the wallet could detect updates and prove they were valid.\n\nThis could be as simple as hard-coding a public key into the client and  \nchecking a signature on the new binaries. But it could also be more  \ninteresting...\n\nFor example, a well known address on the blockchain corresponds to  \nmulti-sig with keys controlled by developers (or whatever key policy the  \nrelease team wants to impose). A spend from that address announces a new  \nrelease, and includes the expected hash of the file.\n\nYou would probably need some way to handle the different release targets.  \nA more rigorous approach could identify all the various releases in terms  \nof a BIP32 xpubkey whose branches would correspond to the different  \nrelease trains and platform builds. Spends from a node announce the  \nrelease and the expected hash.\n\nThis provides zero benefit if the wallet software is already compromised,  \nbut I think this would allow trusted automatic update notification, and a  \ntrusted way to deliver the expected hashes. It also might resolve some of  \nthe consternation around when a release is truly \"released\", if that's  \nreally a problem.\n\nI'm not sure how far along the slope you would want to go; 1) announcing  \nupdates in the UI, 2) providing a button the user could click to verify a  \nbinary matches its expected hash, 3) click to download and verify the  \nupgrade matches the expected hash, 4) click to upgrade\n\nFormalizing the release process around a set of privkeys (or split shares  \nof keys) may raise its own set of questions.\n\nFor the download itself, I've heard the advocates of announcing  \navailability on the blockchain leading to a BitTorrent magnet link, but I  \nalso understand objections to adding an entire BitTorrent stack into a  \nwallet.\n\nOn Tue, 31 Dec 2013 06:23:55 -0800, Mike Hearn <mike at plan99.net> wrote:\n\n>> The site was actually moved onto a dedicated server temporarily and it\n>> melted down under the load. I wouldn't call that no progress.\n>\n> Oh, it did? When was that? I must have missed this excitement :)\n>Any idea how much load it had?\n>\n>> Perhaps I wasn't clear on the point I was making Drak's threat model\n>> is not improved in the slightest by SSL. It would be improved by\n>> increasing the use of signature checking, e.g. by making it easier.\n>\n> Well, that depends. If you watch Applebaums talk he is pushing TLS  \n> pretty hard, and saying that based on the access to the source docs some  \n> of >their MITM attacks can't beat TLS. It appears that they have the  \n> capability to do bulk MITM and rewrite of downloads as Drak says but  \n> *not* when >TLS is present, that would force more targeted attacks. So  \n> to me that implies that TLS does raise the bar and is worth doing.\n>\n> However if we can't find a server that won't melt under the load, then  \n> that'd be an issue. We could consider hosting downloads on AppEngine or  \n> >something else that can handle both high load and TLS.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/8348caad/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2013-12-31T21:33:54",
                "message_text_only": "We already have a wonderful system for secure updating - gitian-downloader. We just neither use it not bother making actual gitian releases so anyone can use it to verify signatures of downloads.\n\nJeremy Spilman <jeremy at taplink.co> wrote:\n>I didn't know about the dedicated server meltdown, it wasn't any of my \n>\n>infra. Anyway, my previous offer still stands.\n>\n>One less 'security theater' approach would be if we could provide  \n>forward-validation of updates using the blockchain. It's always going\n>to  \n>be up to the user the first time they install the wallet to verify the \n>\n>provenance of the binaries/source. From that point forward, we could\n>make  \n>it easier if the wallet could detect updates and prove they were valid.\n>\n>This could be as simple as hard-coding a public key into the client and\n> \n>checking a signature on the new binaries. But it could also be more  \n>interesting...\n>\n>For example, a well known address on the blockchain corresponds to  \n>multi-sig with keys controlled by developers (or whatever key policy\n>the  \n>release team wants to impose). A spend from that address announces a\n>new  \n>release, and includes the expected hash of the file.\n>\n>You would probably need some way to handle the different release\n>targets.  \n>A more rigorous approach could identify all the various releases in\n>terms  \n>of a BIP32 xpubkey whose branches would correspond to the different  \n>release trains and platform builds. Spends from a node announce the  \n>release and the expected hash.\n>\n>This provides zero benefit if the wallet software is already\n>compromised,  \n>but I think this would allow trusted automatic update notification, and\n>a  \n>trusted way to deliver the expected hashes. It also might resolve some\n>of  \n>the consternation around when a release is truly \"released\", if that's \n>\n>really a problem.\n>\n>I'm not sure how far along the slope you would want to go; 1)\n>announcing  \n>updates in the UI, 2) providing a button the user could click to verify\n>a  \n>binary matches its expected hash, 3) click to download and verify the  \n>upgrade matches the expected hash, 4) click to upgrade\n>\n>Formalizing the release process around a set of privkeys (or split\n>shares  \n>of keys) may raise its own set of questions.\n>\n>For the download itself, I've heard the advocates of announcing  \n>availability on the blockchain leading to a BitTorrent magnet link, but\n>I  \n>also understand objections to adding an entire BitTorrent stack into a \n>\n>wallet.\n>\n>On Tue, 31 Dec 2013 06:23:55 -0800, Mike Hearn <mike at plan99.net> wrote:\n>\n>>> The site was actually moved onto a dedicated server temporarily and\n>it\n>>> melted down under the load. I wouldn't call that no progress.\n>>\n>> Oh, it did? When was that? I must have missed this excitement :)\n>>Any idea how much load it had?\n>>\n>>> Perhaps I wasn't clear on the point I was making Drak's threat model\n>>> is not improved in the slightest by SSL. It would be improved by\n>>> increasing the use of signature checking, e.g. by making it easier.\n>>\n>> Well, that depends. If you watch Applebaums talk he is pushing TLS  \n>> pretty hard, and saying that based on the access to the source docs\n>some  \n>> of >their MITM attacks can't beat TLS. It appears that they have the \n>\n>> capability to do bulk MITM and rewrite of downloads as Drak says but \n>\n>> *not* when >TLS is present, that would force more targeted attacks.\n>So  \n>> to me that implies that TLS does raise the bar and is worth doing.\n>>\n>> However if we can't find a server that won't melt under the load,\n>then  \n>> that'd be an issue. We could consider hosting downloads on AppEngine\n>or  \n>> >something else that can handle both high load and TLS.\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>Rapidly troubleshoot problems before they affect your business. Most IT\n>\n>organizations don't have a clear picture of how application performance\n>\n>affects their revenue. With AppDynamics, you get 100% visibility into\n>your \n>Java,.NET, & PHP application. Start your 15-day FREE TRIAL of\n>AppDynamics Pro!\n>http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/eaa34c28/attachment.html>"
            },
            {
                "author": "Benjamin Cordes",
                "date": "2013-12-31T14:05:23",
                "message_text_only": "Interesting. I think the original BitDNS discussion was more interesting\nthat what currently is happening with namecoin, see\nhttps://bitcointalk.org/index.php?topic=1790.0\n\nSatoshi said there: \"1) IP records don't need to be in the chain, just do\nregistrar function not DNS.  And CA problem solved, neat.\"\n\nBesides, ICANN is currently selling out the global public namespace - not\nthat anybody really cares about such measly topics as the ownership of\nglobal namespaces. And so some guy on the Cayman Islands is now the largest\nholder of TLD's.\n\nOn Tue, Dec 31, 2013 at 2:48 PM, Gregory Maxwell <gmaxwell at gmail.com> wrote:\n\n> On Tue, Dec 31, 2013 at 5:39 AM, Drak <drak at zikula.org> wrote:\n> > The NSA has the ability, right now to change every download of\n> bitcoin-qt,\n> > on the fly and the only cure is encryption.\n>\n> Please cut it out with the snake oil pedaling. This is really over the\n> top. You're invoking the NSA as the threat here? Okay. The NSA can\n> trivially compromise an HTTPS download site: even ignoring the CA\n> insecurity, and government run CAs certificate authorities issue CA\n> certs to random governments and corporations for dataloss prevention\n> purposes. Not to mention unparalleled access to exploits.\n>\n> The downloads are protected by something far stronger than SSL\n> already, which might even have a chance against the NSA. Actual\n> signatures of the downloads with offline keys.\n>\n> I'm all pro-SSL and all that, but you are\u2014 piece by piece\u2014 really\n> convincing me that it produces an entirely false sense of security\n> which is entirely unjustified.\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131231/dea5bd70/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-12-08T10:00:35",
                "message_text_only": "There is really no excuse for not using an SSL certificate. Without one it\nwould be trivial for an attacker to change the contents of the page via\nMITM.\nRecent studies have shown MASSIVE abuse of the BGP routing protocol being\nused to redirect websites through a third party.\nThis is not a theoretical attack, it's happening every single day on a\nglobal scale and could be used to divert users to a rogue versions of\nsoftware.\nIt's just a matter of time... it will happen sooner or later given the\nincentives it could bring...\n\nRecent references:\nhttp://www.theregister.co.uk/2013/11/22/net_traffic_redirection_attacks/\nhttp://www.wired.com/threatlevel/2013/12/bgp-hijacking-belarus-iceland/\n\nThe only way to mitigate these MITMs is to use SSL.\n\nAlso it's about time we hosted the Bitcoin Qt software at Github. They have\na releases feature where you can upload a packaged release (see\nhttps://github.com/blog/1547-release-your-software). There are also no\nadverts (another privacy leak at the least) and many feel are more\ntrustworthy than Sourceforge: it also makes sense to have the downloads\nwhere the source is developed.\n\nRegards,\n\nDrak\n\n\n\nOn 8 December 2013 03:38, Odinn Cyberguerrilla <\nodinn.cyberguerrilla at riseup.net> wrote:\n\n> Hello, re. the dedicated server for bitcoin.org idea, I have a few\n> thoughts\n>\n> 1) I have commented in a blogpost of August 2013 at\n> https://odinn.cyberguerrilla.org/ with some thoughts relative to possible\n> issues with CA related to bitcoin.org - where I mentioned something\n> relative to the DigiCert certificate,\n> \"DigiCert \u201cmay revoke a Certificate, without notice, for the reasons\n> stated in the CPS, including if DigiCert reasonably believes that\u201d (\u2026)\n> \u201cApplicant is added to a government list of prohibited persons or entities\n> or is operating from a prohibited destination under the laws of the United\n> States\u201d (\u2026) \u201cthe Private Key associated with a Certificate was disclosed\n> or Compromised\u201d\"\n> In the same post I mentioned\n> \"Bitcoin.org has no certificate, no encryption \u2014 a situation which has its\n> own obvious problems. Bitcoin.org currently sends users to download the\n> bitcoin-qt client from sourceforge. Sourceforge is encrypted and has a\n> certificate based on GeoTrust:\n> https://www.geotrust.com/resources/repository/legal/\"\n>\n> (Currently (Dec. 7, 2013) bitcoin.org shows as 'not verified' and 'not\n> encrypted' examining it in a cursory fashion w/ Chrome)\n>\n> Not sure how this would work, but it would be nice to see the content at\n> bitcoin.org encrypted, of course, but also further decentralized? how many\n> mirrors are there of bitcoin.org - not sure, but a few things that come to\n> mind when thinking of this are Tahoe-LAFS and also .bit stuff (namecoin).\n> There are many ways to decentralize something but that is just something\n> that comes to mind.\n>\n> This has been discussed at https://bitcointalk.org/index.php?topic=16312.0\n> ('Is Bitcoin.org a weakness of bitcoin?) in the past and see also this\n> https://bitcointalk.org/index.php?topic=119652.0 which discusses mirroring\n> of certain content\n>\n> Some things to think about.\n>\n> > I would like to know what are your thoughts on moving bitcoin.org on a\n> > dedicated server with a SSL certificate?\n> >\n> > I am considering the idea more seriously, but I'd like some feedback\n> > before taking steps.\n> >\n> > Sa\u00efvann\n> >\n> >\n> ------------------------------------------------------------------------------\n> > Sponsored by Intel(R) XDK\n> > Develop, test and display web and hybrid apps with a single code base.\n> > Download it for free now!\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> >\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/5957ba7d/attachment.html>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-12-08T12:39:02",
                "message_text_only": "On Sunday, December 08, 2013 10:00:35 AM Drak wrote:\n> Also it's about time we hosted the Bitcoin Qt software at Github. They have\n> a releases feature where you can upload a packaged release (see\n> https://github.com/blog/1547-release-your-software). There are also no\n> adverts (another privacy leak at the least) and many feel are more\n> trustworthy than Sourceforge: it also makes sense to have the downloads\n> where the source is developed.\n\nI'm not aware of any rational basis for trusting GitHub more than SourceForge. \nAt least SourceForge is transparent and releases their source code.\n\nLuke"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-08T16:51:50",
                "message_text_only": "On Sun, Dec 8, 2013 at 2:00 AM, Drak <drak at zikula.org> wrote:\n> There is really no excuse for not using an SSL certificate. Without one it\n> would be trivial for an attacker to change the contents of the page via\n> MITM.\n\nHaving control of the site gives you a cert regardless, as several CAs\nwill issue a cert to anyone who can make a http page appear at a\nspecific URL at the domain when requested via the CA over http.\n\nIt really is darn near pretextual security in this kind case\u2014 only\nprotecting you against attacks near the client, not the server\u2014 but as\nWladimir says, it's expected and I don't see how it would be a harm.\n\nThe revocation argument is somewhat interesting, especially since any\nsuch site should use HSTS or otherwise a downgrade attack is trivial."
            },
            {
                "author": "Wladimir",
                "date": "2013-12-08T16:08:34",
                "message_text_only": "On Sun, Dec 8, 2013 at 2:17 AM, Sa\u00efvann Carignan <saivann at gmail.com> wrote:\n\n> I would like to know what are your thoughts on moving bitcoin.org on a\n> dedicated server with a SSL certificate?\n>\n\nGood idea.\nIf anything, these days, not using https is sort of a smell for sites that\nsecurity is not being taken seriously.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131208/24cd6f09/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Dedicated server for bitcoin.org, your thoughts?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Robert McKay",
                "Wladimir",
                "Roy Badami",
                "Sa\u00efvann Carignan",
                "Adam Back",
                "Mike Hearn",
                "Jeremy Spilman",
                "Gregory Maxwell",
                "Matt Corallo",
                "Mark Friedenbach",
                "Jeff Garzik",
                "Patrick",
                "Taylor Gerring",
                "Gavin Andresen",
                "Luke-Jr",
                "Odinn Cyberguerrilla",
                "theymos",
                "Benjamin Cordes",
                "Drak"
            ],
            "messages_count": 44,
            "total_messages_chars_count": 70331
        }
    },
    {
        "title": "[Bitcoin-development] [Patch] bitcoin for Fedora >= 20",
        "thread_messages": [
            {
                "author": "Harald Hoyer",
                "date": "2013-12-09T21:05:40",
                "message_text_only": "Interesting post: https://bitcointalk.org/index.php?topic=364877.0\n\nWould be worth a try :-)\n\nI'd like to see bitcoin running on Fedora >= 20 out of the box."
            }
        ],
        "thread_summary": {
            "title": "bitcoin for Fedora >= 20",
            "categories": [
                "Bitcoin-development",
                "Patch"
            ],
            "authors": [
                "Harald Hoyer"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 157
        }
    },
    {
        "title": "[Bitcoin-development] Monetary Authority for Bitcoin",
        "thread_messages": [
            {
                "author": "Ryan Carboni",
                "date": "2013-12-09T22:01:07",
                "message_text_only": "This is no doubt probably a very controversial Bitcoin Improvement Proposal\nand is also a very rough draft of one.\n\nBitcoin lacks a Central Bank. This is good and bad. A central bank benefits\nthose with political connections. But Bitcoin lacks price stability, this\ngenerates menu costs, and incentivizes speculation. I propose the creation\nof a monetary authority for Bitcoin that sets block reward to a new\nmathematical formula.\n\nThe velocity of the Bitcoins that are in circulation likely approaches\n100,000x per year as compared to 1x - 4x for the USD. This in itself is not\nbad. But given that only 10% to 20% of Bitcoins are circulating, this means\nthat the price of Bitcoin is decided largely through speculation. In fact\nthe price of a Bitcoin is irrelevant to those who use Bitcoins as a\ncurrency because it appears the majority of coins being used are\nimmediately being sold and repurchased in the exchanges for the sole\npurpose of buying goods.\n\nUnless Bitcoins can be used to purchase intermediate goods and have a\nclosed economic ecosystem, Bitcoin will be too vulnerable to speculation\nand would not be a viable currency. But the development of a closed\neconomic ecosystem is stymied by the uncertainty of Bitcoin prices and\nspeculation.\n\nFortunately the infrastructure for transacting Bitcoin has long been\nestablished, with many major exchanges. Nearly all major exchanges announce\nrecent prices. At the point when a block is generated, the miner will also\nadd the exchange price of bitcoin between various other currencies and\ncrypto-currencies to the blockchain. The exchanges that are kept track of\ncould be hard coded into Bitcoin or the miner could choose, how this works\nis not something I'm personally focused on.\n\nWith every new block, the miner will compare the cumulative percentage\nchange in the exchange price of Bitcoin over the previous 432 blocks. The\nstandard deviation of the percentage change in exchange rates will be\ncalculated. Outliers will be excluded, this is so that in case x-currency\nsuffers from hyperinflation, the x-currency will be ignored. It is\nextremely unlikely for all the world\u2019s currencies to be suffering from\nhyperinflation caused by monetary expansion as opposed to a supply shock.\n\nEvery 432 blocks the block reward will be reevaluated. For every 5%\nincrease in the geometric mean of Bitcoin exchange rates in relation to the\nworld\u2019s currencies would increase the block reward by 3%. A 5% decrease in\nthe geometric mean of Bitcoin exchange rates will decrease the block reward\nby 3%. Changes in the exchange rates of less than 5% will not alter the\nblock reward.\n\nThe minimum block reward will be one Bitcoin.\n\n\n\nWhy is this better then the current system? Very simple, we are still\ndependent on banks. Currently Bitcoin is poised to replace Visa and Paypal,\nnot the Federal Reserve. Bitcoin will be less efficient then Visa and\nPaypal because it takes times to transfer money out of exchanges to one's\nbank account and vice versa. In order for Bitcoin to replace the US dollar,\nit needs to not be a more complex version of a debit card. It needs to have\na closed economic ecosystem, where all transactions are done in Bitcoin\n(Consumer > Merchant > Wholesaler > Factory), and the only people who use\nthe exchanges are merchants who need to and those who wish to gamble on\nBitcoin.\n\nIn order for Bitcoin to have widespread acceptance, it needs price\nstability. My proposal won't peg the Bitcoin to any one currency, but it\nwould reduce month to month variability in relation to a basket of\ncurrencies and discourage views that it's speculative.\n\nLook at the current system, it's not healthy and it's not a currency.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/07587a31/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-09T22:06:23",
                "message_text_only": "On Tue, Dec 10, 2013 at 8:01 AM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n\n> The exchanges that are kept track of could be hard coded into Bitcoin or\n> the miner could choose, how this works is not something I'm personally\n> focused on.\n>\n>\nThat is like saying \"We need a way to travel around the world quickly.\nThere will be an anti-gravity technology; how this works is not something\nI'm personally focused on.\"\n\nOr, in other words, you are ignoring exactly the sticky, difficult problem\nthat would have to be solved for your proposal to have any chance of\nworking.\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/41833cf5/attachment.html>"
            },
            {
                "author": "Ryan Carboni",
                "date": "2013-12-10T01:19:18",
                "message_text_only": "Bitcoin is made of many parts, yes, but not all parts were developed\nsimultaneously.\n\n\nOn Mon, Dec 9, 2013 at 2:06 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Tue, Dec 10, 2013 at 8:01 AM, Ryan Carboni <ryan.jc.pc at gmail.com>wrote:\n>\n>> The exchanges that are kept track of could be hard coded into Bitcoin or\n>> the miner could choose, how this works is not something I'm personally\n>> focused on.\n>>\n>>\n> That is like saying \"We need a way to travel around the world quickly.\n> There will be an anti-gravity technology; how this works is not something\n> I'm personally focused on.\"\n>\n> Or, in other words, you are ignoring exactly the sticky, difficult problem\n> that would have to be solved for your proposal to have any chance of\n> working.\n>\n> --\n> --\n> Gavin Andresen\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/cf795cd4/attachment.html>"
            },
            {
                "author": "Rick Wesson",
                "date": "2013-12-10T04:05:30",
                "message_text_only": "+1\n\n\nOn Mon, Dec 9, 2013 at 2:06 PM, Gavin Andresen <gavinandresen at gmail.com>wrote:\n\n> On Tue, Dec 10, 2013 at 8:01 AM, Ryan Carboni <ryan.jc.pc at gmail.com>wrote:\n>\n>> The exchanges that are kept track of could be hard coded into Bitcoin or\n>> the miner could choose, how this works is not something I'm personally\n>> focused on.\n>>\n>>\n> That is like saying \"We need a way to travel around the world quickly.\n> There will be an anti-gravity technology; how this works is not something\n> I'm personally focused on.\"\n>\n> Or, in other words, you are ignoring exactly the sticky, difficult problem\n> that would have to be solved for your proposal to have any chance of\n> working.\n>\n> --\n> --\n> Gavin Andresen\n>\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/229d288d/attachment.html>"
            },
            {
                "author": "kjj",
                "date": "2013-12-10T01:22:28",
                "message_text_only": "Ryan Carboni wrote:\n>\n> Bitcoin lacks a Central Bank.\n>\nThis is a feature, not a bug.\n\nAlso, this is offtopic.  Political debate is thataway ->.\n\nbitcoin-development is for development and technical discussion.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/5af27753/attachment.html>"
            },
            {
                "author": "Ryan Carboni",
                "date": "2013-12-09T22:23:35",
                "message_text_only": "It is not a violation of the trust of those holding the currency. Many\npeople bought Bitcoin in the hopes that it's value in the relation of other\ncurrencies will increase, not because there's a fixed money supply. The\nmajority of people using Bitcoin as a currency in exchange for real goods\nare using the exchanges.\n\n My proposal will still allow for 4.9% semi-weekly variations in the price\nof Bitcoin, allowing for it to appreciate 11,800% per year.\n\n\nOn Mon, Dec 9, 2013 at 2:11 PM, Andrew Poelstra <asp11 at sfu.ca> wrote:\n\n> On Mon, Dec 09, 2013 at 02:01:07PM -0800, Ryan Carboni wrote:\n> > This is no doubt probably a very controversial Bitcoin Improvement\n> Proposal\n> > and is also a very rough draft of one.\n> >\n>\n> Ryan, you can stop there already because any change to the inflation\n> formula (supposing such a thing is even possible, which it's not)\n> would be a violation of the trust of those holding the currency, who\n> obtained it while believing that its inflation algorithm would not\n> change.\n>\n> --\n> Andrew Poelstra\n> Email: apoelstra at wpsoftware.net\n> Web:   http://www.wpsoftware.net/andrew\n>\n> \"If they had taught a class on how to be the kind of citizen Dick Cheney\n>  worries about, I would have finished high school.\"   --Edward Snowden\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/21ef75ca/attachment.html>"
            },
            {
                "author": "Mike Caldwell",
                "date": "2013-12-09T22:57:26",
                "message_text_only": "For what it's worth, once upon a time I pushed this agenda on Bitcointalk.  I'd say early 2011 or so.  The response I got was so strong and unanimous in favor of this point being absolutely non-negotiable that if the money supply were anything other than fixed, Bitcoin may as well be pretend e-dollars.  I was not just persuaded against it, I was put in my place.\n\nI believe that if there ever becomes a consensus that Bitcoin's inflation parameters were a show-stopper for the Bitcoin economy, that the power to correct it lies with merchants, who would vote for changing the rules.  I believe they would do this not by changing Bitcoin, but by accepting, in parallel, a brand new alt coin that reflects the consensus as to how the inflation should be.  I believe such an alt coin would have its genesis at around the time that consensus moved toward accepting inflation, rather than adopting the seignorage of some other alt coin out there today.\n\nMike/Casascius\n\n\nFrom: Ryan Carboni [mailto:ryan.jc.pc at gmail.com]\nSent: Monday, December 09, 2013 3:24 PM\nTo: apoelstra at wpsoftware.net\nCc: bitcoin-development at lists.sourceforge.net\nSubject: Re: [Bitcoin-development] Monetary Authority for Bitcoin\n\nIt is not a violation of the trust of those holding the currency. Many people bought Bitcoin in the hopes that it's value in the relation of other currencies will increase, not because there's a fixed money supply. The majority of people using Bitcoin as a currency in exchange for real goods are using the exchanges.\n\n My proposal will still allow for 4.9% semi-weekly variations in the price of Bitcoin, allowing for it to appreciate 11,800% per year.\n\nOn Mon, Dec 9, 2013 at 2:11 PM, Andrew Poelstra <asp11 at sfu.ca<mailto:asp11 at sfu.ca>> wrote:\nOn Mon, Dec 09, 2013 at 02:01:07PM -0800, Ryan Carboni wrote:\n> This is no doubt probably a very controversial Bitcoin Improvement Proposal\n> and is also a very rough draft of one.\n>\nRyan, you can stop there already because any change to the inflation\nformula (supposing such a thing is even possible, which it's not)\nwould be a violation of the trust of those holding the currency, who\nobtained it while believing that its inflation algorithm would not\nchange.\n\n--\nAndrew Poelstra\nEmail: apoelstra at wpsoftware.net<http://wpsoftware.net>\nWeb:   http://www.wpsoftware.net/andrew\n\n\"If they had taught a class on how to be the kind of citizen Dick Cheney\n worries about, I would have finished high school.\"   --Edward Snowden\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/a73ff496/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-10T08:19:12",
                "message_text_only": "On Mon, Dec 9, 2013 at 11:57 PM, Mike Caldwell <mcaldwell at swipeclock.com>wrote:\n\n>\n> I believe that if there ever becomes a consensus that Bitcoin\u2019s inflation\n> parameters were a show-stopper for the Bitcoin economy, that the power to\n> correct it lies with merchants, who would vote for changing the rules.  I\n> believe they would do this not by changing Bitcoin, but by accepting, in\n> parallel, a brand new alt coin that reflects the consensus as to how the\n> inflation should be.  I believe such an alt coin would have its genesis at\n> around the time that consensus moved toward accepting inflation, rather\n> than adopting the seignorage of some other alt coin out there today.\n>\n\nAgreed Mike.\n\nThe economic parameters of Bitcoin are fixed in stone forever. Adding a\nmonetary authority to Bitcoin is impossible and undesirable because the\nimplicit contract of Bitcoin is that there would finally be a currency in\nwhich no one could mess around with. It would betray all prior holders.\n\nBut these are ideas everyone is free to experiment with in new altcoins. If\nthe lack of inflation in Bitcoin ever becomes a problem in day-to-day\nusage, such a parallel chain could become the de-facto cryptocurrency for\nspending. Or just maybe fiat already works well enough there...\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/3c718388/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-12-09T23:10:36",
                "message_text_only": "On Mon, Dec 9, 2013 at 7:23 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n> It is not a violation of the trust of those holding the currency. Many\n> people bought Bitcoin in the hopes that it's value in the relation of other\n> currencies will increase, not because there's a fixed money supply. The\n> majority of people using Bitcoin as a currency in exchange for real goods\n> are using the exchanges.\n\nYour proposal has been met with widespread laughter.  Were I not ill\nwith the flu, mockery would ensue as well.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Jameson Lopp",
                "date": "2013-12-09T23:23:17",
                "message_text_only": "To piggyback on Jeff,\n\nAny proposal that is going to add reliance upon data from third parties\noutside of the Bitcoin network itself is likely going to be rejected\noutright. This opens far too many potential vulnerabilities.\n\n\"The exchanges that are kept track of could be hard coded into Bitcoin\nor the miner could choose, how this works is not something I'm\npersonally focused on.\"\n\nYeah... you can't just gloss over a little detail like that. There must\nbe consensus between the miners, otherwise a solved block will be\nrejected by a miner's peers.\n--\nJameson Lopp\nSoftware Engineer\nBronto Software, Inc\n\nOn 12/09/2013 06:10 PM, Jeff Garzik wrote:\n> On Mon, Dec 9, 2013 at 7:23 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n>> It is not a violation of the trust of those holding the currency. Many\n>> people bought Bitcoin in the hopes that it's value in the relation of other\n>> currencies will increase, not because there's a fixed money supply. The\n>> majority of people using Bitcoin as a currency in exchange for real goods\n>> are using the exchanges.\n> \n> Your proposal has been met with widespread laughter.  Were I not ill\n> with the flu, mockery would ensue as well.\n>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-12-10T01:16:18",
                "message_text_only": "I've got a better idea.  Ben Bernake needs a new job.  Let's just let him\nset the block reward.\n\n\nOn Mon, Dec 9, 2013 at 5:23 PM, Jameson Lopp <jameson.lopp at gmail.com> wrote:\n\n> To piggyback on Jeff,\n>\n> Any proposal that is going to add reliance upon data from third parties\n> outside of the Bitcoin network itself is likely going to be rejected\n> outright. This opens far too many potential vulnerabilities.\n>\n> \"The exchanges that are kept track of could be hard coded into Bitcoin\n> or the miner could choose, how this works is not something I'm\n> personally focused on.\"\n>\n> Yeah... you can't just gloss over a little detail like that. There must\n> be consensus between the miners, otherwise a solved block will be\n> rejected by a miner's peers.\n> --\n> Jameson Lopp\n> Software Engineer\n> Bronto Software, Inc\n>\n> On 12/09/2013 06:10 PM, Jeff Garzik wrote:\n> > On Mon, Dec 9, 2013 at 7:23 PM, Ryan Carboni <ryan.jc.pc at gmail.com>\n> wrote:\n> >> It is not a violation of the trust of those holding the currency. Many\n> >> people bought Bitcoin in the hopes that it's value in the relation of\n> other\n> >> currencies will increase, not because there's a fixed money supply. The\n> >> majority of people using Bitcoin as a currency in exchange for real\n> goods\n> >> are using the exchanges.\n> >\n> > Your proposal has been met with widespread laughter.  Were I not ill\n> > with the flu, mockery would ensue as well.\n> >\n>\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/2bcf7785/attachment.html>"
            },
            {
                "author": "Ryan Carboni",
                "date": "2013-12-10T01:20:59",
                "message_text_only": "You're just closed minded.\n\n\nOn Mon, Dec 9, 2013 at 3:10 PM, Jeff Garzik <jgarzik at bitpay.com> wrote:\n\n> On Mon, Dec 9, 2013 at 7:23 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n> > It is not a violation of the trust of those holding the currency. Many\n> > people bought Bitcoin in the hopes that it's value in the relation of\n> other\n> > currencies will increase, not because there's a fixed money supply. The\n> > majority of people using Bitcoin as a currency in exchange for real goods\n> > are using the exchanges.\n>\n> Your proposal has been met with widespread laughter.  Were I not ill\n> with the flu, mockery would ensue as well.\n>\n> --\n> Jeff Garzik\n> Bitcoin core developer and open source evangelist\n> BitPay, Inc.      https://bitpay.com/\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131209/c3838fb9/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-12-10T12:38:38",
                "message_text_only": "On 12/10/13, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n> You're just closed minded.\n\nNo, at least to persons have explained you why your proposal is not feasible.\nIf you wanted to learn, you would have made questions on why those\nparts of your proposal are unfeasible.\nThere have been many proposals about \"stablecoins\" in bitcointalk and\nother forums (for example, the \"initial proposals\" freicoin subforum).\nI have participated in several of them trying to find a solution and\nI'm now convinced that this is impossible to implement in a secure AND\nP2P system.\n\nThis is off-topic for this forum, specially if (as you've shown to us)\nyou are not interested in learning why this proposal is unfeasible.\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            },
            {
                "author": "Baz",
                "date": "2013-12-11T00:07:19",
                "message_text_only": "Bitcoin's volatility is not a symptom of its architecture, but a reflection\nof the collective knowledge of its future acceptance. Currently that\nknowledge is based on very volatile sources: how some senator feels about\nit this morning, which direction departments in the Chinese government are\nleaning. The issue is that proof-of-work is missing from society's end. As\ntime goes on, laws, regulations and policies will start to form, people\nwill challenge them, they will be reviewed and updated, they will be\nchallenged again on different grounds, re-reviewed, and so on. Each of\nthose confirmations will make it that much harder to change earlier\nconfirmations. It won't matter anymore what some senator thinks this\nmorning because she will have months of hard-work ahead of her before she\ncan affect any change. It also doesn't matter if the rulings are positive\nor negative, just having them will add stability to Bitcoin at some value\nbetween $0.0001 to $100,000 per coin.\n\n\n\n\nOn Tue, Dec 10, 2013 at 4:38 AM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n\n> On 12/10/13, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n> > You're just closed minded.\n>\n> No, at least to persons have explained you why your proposal is not\n> feasible.\n> If you wanted to learn, you would have made questions on why those\n> parts of your proposal are unfeasible.\n> There have been many proposals about \"stablecoins\" in bitcointalk and\n> other forums (for example, the \"initial proposals\" freicoin subforum).\n> I have participated in several of them trying to find a solution and\n> I'm now convinced that this is impossible to implement in a secure AND\n> P2P system.\n>\n> This is off-topic for this forum, specially if (as you've shown to us)\n> you are not interested in learning why this proposal is unfeasible.\n>\n> --\n> Jorge Tim\u00f3n\n>\n> http://freico.in/\n>\n>\n> ------------------------------------------------------------------------------\n> Sponsored by Intel(R) XDK\n> Develop, test and display web and hybrid apps with a single code base.\n> Download it for free now!\n>\n> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/f3a9fa83/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-12-11T01:01:52",
                "message_text_only": "It is simpler than that; simple numbers.  Bitcoin is volatile right\nnow, not for fundamental architecture reasons, but for reasons why\nmany other small issues are volatile.  Low liquidity and a small issue\nimplies that a single big player can easily the move the market.\nFurther, it is volatile because common financial tools available\nelsewhere -- shorting, futures/options, etc. -- are not widely and\neasily available.\n\nNone of these factors are special or specific to bitcoin.  See\nhttp://garzikrants.blogspot.com/2013/11/solution-to-bitcoin-volatility.html\n\nHowever, this is getting WAY off-topic for a development mailing list.\n\nRyan successfully trolled the list.  Let's not further feed the trolls.\n\n\nOn Tue, Dec 10, 2013 at 7:07 PM, Baz <bk at thinkloop.com> wrote:\n> Bitcoin's volatility is not a symptom of its architecture, but a reflection\n> of the collective knowledge of its future acceptance. Currently that\n> knowledge is based on very volatile sources: how some senator feels about it\n> this morning, which direction departments in the Chinese government are\n> leaning. The issue is that proof-of-work is missing from society's end. As\n> time goes on, laws, regulations and policies will start to form, people will\n> challenge them, they will be reviewed and updated, they will be challenged\n> again on different grounds, re-reviewed, and so on. Each of those\n> confirmations will make it that much harder to change earlier confirmations.\n> It won't matter anymore what some senator thinks this morning because she\n> will have months of hard-work ahead of her before she can affect any change.\n> It also doesn't matter if the rulings are positive or negative, just having\n> them will add stability to Bitcoin at some value between $0.0001 to $100,000\n> per coin.\n>\n>\n>\n>\n> On Tue, Dec 10, 2013 at 4:38 AM, Jorge Tim\u00f3n <jtimon at monetize.io> wrote:\n>>\n>> On 12/10/13, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n>> > You're just closed minded.\n>>\n>> No, at least to persons have explained you why your proposal is not\n>> feasible.\n>> If you wanted to learn, you would have made questions on why those\n>> parts of your proposal are unfeasible.\n>> There have been many proposals about \"stablecoins\" in bitcointalk and\n>> other forums (for example, the \"initial proposals\" freicoin subforum).\n>> I have participated in several of them trying to find a solution and\n>> I'm now convinced that this is impossible to implement in a secure AND\n>> P2P system.\n>>\n>> This is off-topic for this forum, specially if (as you've shown to us)\n>> you are not interested in learning why this proposal is unfeasible.\n>>\n>> --\n>> Jorge Tim\u00f3n\n>>\n>> http://freico.in/\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Sponsored by Intel(R) XDK\n>> Develop, test and display web and hybrid apps with a single code base.\n>> Download it for free now!\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=111408631&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n\n\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            }
        ],
        "thread_summary": {
            "title": "Monetary Authority for Bitcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Rick Wesson",
                "kjj",
                "Ryan Carboni",
                "Wladimir",
                "Jorge Tim\u00f3n",
                "Gavin Andresen",
                "Jameson Lopp",
                "Baz",
                "Allen Piscitello",
                "Mike Caldwell"
            ],
            "messages_count": 15,
            "total_messages_chars_count": 24370
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-development Digest, Vol 31, Issue 25",
        "thread_messages": [
            {
                "author": "Ryan Carboni",
                "date": "2013-12-10T09:55:53",
                "message_text_only": ">\n> I believe that if there ever becomes a consensus that Bitcoin?s inflation\n> parameters were a show-stopper for the Bitcoin economy, that the power to\n> correct it lies with merchants, who would vote for changing the rules.  I\n> believe they would do this not by changing Bitcoin, but by accepting, in\n> parallel, a brand new alt coin that reflects the consensus as to how the\n> inflation should be.  I believe such an alt coin would have its genesis at\n> around the time that consensus moved toward accepting inflation, rather\n> than adopting the seignorage of some other alt coin out there today.\n>\n\nAgreed Mike.\n\nThe economic parameters of Bitcoin are fixed in stone forever. Adding a\nmonetary authority to Bitcoin is impossible and undesirable because the\nimplicit contract of Bitcoin is that there would finally be a currency in\nwhich no one could mess around with. It would betray all prior holders.\n\nBut these are ideas everyone is free to experiment with in new altcoins. If\nthe lack of inflation in Bitcoin ever becomes a problem in day-to-day\nusage, such a parallel chain could become the de-facto cryptocurrency for\nspending. Or just maybe fiat already works well enough there...\n\nWladimir\n-------------- --------------\nHow do you propose to use Bitcoin on a week-long vacation or for life in\ngeneral, when it's value constantly swings up and down? Or for the average\nperson's paycheck to swing up and down in value every week? Awfully hard to\nbudget. There is also a catch-22, no altcoin can gain acceptance because\nthe infrastructure for Bitcoin already exists, but without infrastructure,\nno altcoin can gain acceptance. Furthermore, the average merchant or\nconsumer lacks the idealism or knowledge to bring about such changes in\nBitcoin. It's a lofty idea that the average person will bring about such\nchange when they don't bring about such change already in their own lives.\nIt is ironic considering that there's no Bitcoin \"chamber of commerce,\"\njust a few programmers in a development mailing list who direct the future\nof Bitcoin, and thus these merchants you speak of have little to no voice\nwhat so ever, with a few exceptions of merchants who do subscribe to this\nmailing list.\nWhat I am proposing makes sound economic sense. It is the only way to fix\nthe speculation crisis.\nJust ask an economist.\n\nAnd the economic parameters of bitcoin are not fixed in stone. If there\nneeds to be a change, it will be messy but it could happen.\n\nBesides, using Austrian precepts of inflation blurs the fact that deflation\nwill still be possible under my proposal. Although amusingly enough\nAustrian-defined inflation is still occurring within Bitcoin, in fact\nfaster then desired since blocks are being processed every seven minutes\nnow as opposed to ten, and it's quite likely when 28nm ASIC miners are\nreleased that blocks will be processed every five minutes before the\ndifficulty is adjusted again.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/0ed5f68f/attachment.html>"
            },
            {
                "author": "kjj",
                "date": "2013-12-10T13:18:52",
                "message_text_only": "Ryan Carboni wrote:\n> And the economic parameters of bitcoin are not fixed in stone. If \n> there needs to be a change, it will be messy but it could happen.\n\nNeed is an awfully big word.  One thing we are certain of is that some \nguy telling us all that we are wrong is nowhere near the \"need\" level.\n> Besides, using Austrian precepts of inflation blurs the fact that \n> deflation will still be possible under my proposal. Although amusingly \n> enough Austrian-defined inflation is still occurring within Bitcoin, \n> in fact faster then desired since blocks are being processed every \n> seven minutes now as opposed to ten, and it's quite likely when 28nm \n> ASIC miners are released that blocks will be processed every five \n> minutes before the difficulty is adjusted again.\nDon't take this the wrong way, but things like this make it very hard \nfor us to take you seriously.\n\nPlease read up on how the system works, then read up on why we reject \nthe argument from authority, then if you still have something to say, \nplease do so in a proper venue.  One option for this discussion is the \nbitcointalk.org forums, where you will find literally dozens of threads \nproposing the exact same thing you are proposing.\n\nThis mailing list is NOT for political discussion.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/dfa36d13/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-development Digest, Vol 31, Issue 25",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "kjj",
                "Ryan Carboni"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4549
        }
    },
    {
        "title": "[Bitcoin-development] Popularity based mining (variable block reward)",
        "thread_messages": [
            {
                "author": "Jan Ku\u010dera",
                "date": "2013-12-10T16:23:01",
                "message_text_only": "Hi there,\n\nI am not sure this wont be considered as off-topic here, but I did not find\na better place to ask. My question is - has anybody here thought about the\nidea of variable block rewards where mining would essentially be popularity\nbased? I mean in terms either improving Bitcoin's protocol or forking a\ncompletely new coin? I think elasticity of money supply could bring more\nexchange rate stability to the hypothetical new coin (say there'd be a\ndemand for such a coin). I am thinking of an alternative mining scheme\nwhere block reward would grow (or decrease) with popularity of the coin.\nThe rationale behind this idea is to make an exchange rate more stable\nsince greater interest will not result in higher coin price.\n\nEvidence clearly shows Bitcoin lacks some basic features of money and thus\nbehaves more like a commodity (read gold). I have been watching the\nexchange rate for several months and the volatility simply does not seem to\ngo away... so it seems like something has to change in order to get a more\nstable currency. I am not telling I want Bitcoin to implement this, I fully\nunderstand that a philosophy of \"one coin = never changing features\" can be\npresent that is why I also speak about a fork.\n\nBasically there would be no reliance on external data as the network itself\nwould decide on reward height and everybody node would be free to do so.\nEach network node would determine the popularity on its own depending on\nvarious factors (coin valuation/exchange rate, number of transactions and\nmany others) and basically come up with its own block reward value. It\nwould then want to see a new block being mined with such reward value. In\ncase such a block is mined, it will include it in its own chain. There'd be\nsome %s of tolerance for block reward value so that the system would not\ncollapse.\n\nI may be completely wrong with my idea but am asking it this was spoken\nbefore and what opinions do developers have.\n\nRegards,\nJan\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131210/38578826/attachment.html>"
            },
            {
                "author": "Jameson Lopp",
                "date": "2013-12-10T16:27:26",
                "message_text_only": "\"no reliance on external data\" ... \"depending on various factors (coin\nvaluation/exchange rate\"\n\n\u0ca0_\u0ca0\n--\nJameson Lopp\nSoftware Engineer\nBronto Software\n\nOn 12/10/2013 11:23 AM, Jan Ku\u010dera wrote:\n> Basically there would be no reliance on external data as the network itself\n> would decide on reward height and everybody node would be free to do so.\n> Each network node would determine the popularity on its own depending on\n> various factors (coin valuation/exchange rate, number of transactions and\n> many others) and basically come up with its own block reward value."
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2013-12-10T17:18:40",
                "message_text_only": "This has been asked very recently:\n\nhttp://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development\n\nAnd a thousand times on bitcointalk.\n\n\nOn 12/10/13, Jameson Lopp <jameson.lopp at gmail.com> wrote:\n>\n> \"no reliance on external data\" ... \"depending on various factors (coin\n> valuation/exchange rate\"\n>\n> \u0ca0_\u0ca0\n> --\n> Jameson Lopp\n> Software Engineer\n> Bronto Software\n>\n> On 12/10/2013 11:23 AM, Jan Ku\u010dera wrote:\n>> Basically there would be no reliance on external data as the network\n>> itself\n>> would decide on reward height and everybody node would be free to do so.\n>> Each network node would determine the popularity on its own depending on\n>> various factors (coin valuation/exchange rate, number of transactions and\n>> many others) and basically come up with its own block reward value.\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n-- \nJorge Tim\u00f3n\n\nhttp://freico.in/"
            }
        ],
        "thread_summary": {
            "title": "Popularity based mining (variable block reward)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jameson Lopp",
                "Jan Ku\u010dera",
                "Jorge Tim\u00f3n"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 4221
        }
    },
    {
        "title": "[Bitcoin-development] Updated BIP-0001 for github move",
        "thread_messages": [
            {
                "author": "Wladimir",
                "date": "2013-12-11T15:10:58",
                "message_text_only": "- Mention github instead of wiki\n- Add markdown as allowed format\n- Fix some weirdnesses such as \"A BIP editor must subscribe to the\ngmaxwell at gmail.com list.\". Remove the repetition and create a new section\nwhich lists the BIP editors (currently only gmaxwell).\n- Prefer discussion on mailing list to forum\n\nThis is just a cleanup and change for the github move. I have not changed\nthe process to jgarzik's new proposed process (\nhttp://sourceforge.net/mailarchive/forum.php?thread_name=CAAS2fgROsymXnXTrfLTLTQ%3DEDwaAFu%2BxrrD4Q-Gye5XWze7vFw%40mail.gmail.com&forum_name=bitcoin-development),\nthis can be done in a later separate change.\n\nSee pull request here:\nhttps://github.com/bitcoin/bips/pull/1\n\nRegards,\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131211/b8f5da36/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Updated BIP-0001 for github move",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Wladimir"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 905
        }
    },
    {
        "title": "[Bitcoin-development] This list...",
        "thread_messages": [
            {
                "author": "whiskers75",
                "date": "2013-12-11T16:51:47",
                "message_text_only": "Can we get on topic here? I feel there are too many trolls and this\nlist is becoming a lot like bitcointalk...."
            }
        ],
        "thread_summary": {
            "title": "This list...",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "whiskers75"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 111
        }
    },
    {
        "title": "[Bitcoin-development] Merge avoidance and P2P connection encryption",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-12-12T16:03:55",
                "message_text_only": "I wrote an article intended for a broad/non-developer audience on a few\nBitcoin privacy topics:\n\n- P2P connection encryption\n- Address re-use/payment protocol\n- CoinJoin and merge avoidance\n\nI don't think there's anything much new here for people who were involved\nwith the BIP70 design discussions, but it may prove a useful resource when\ntalking about privacy features in the payment protocol. Specifically the\nability to request multiple outputs and submit multiple transactions that\nsatisfy them. The article elaborates on how to use that feature to achieve\nsome useful privacy outcomes.\n\nI also analyze what using SSL for P2P connections would buy us and what it\nwouldn't.\n\nhttps://medium.com/p/7f95a386692f\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131212/a620d5e9/attachment.html>"
            },
            {
                "author": "Paul Rabahy",
                "date": "2013-12-12T17:28:32",
                "message_text_only": "First off, nice article. Very clear and informative.\n\nI don't know if this is the best place to post this, but it seems related\nto me.\n\nAs more wallets implement BIP32, I believe that bitcoin wallets should\nbegin to encourage people to use\nhttps://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#recurrent-business-to-business-transactions-mi0style\naddress instead of traditional addresses. In the end, this would\nimprove privacy because users never need to merge coin if they had one of\nthese \"super addresses\".\n\nIn addition, \"super addresses\" would fit nicely into BIP70. Right now, the\nPaymentDetails message allows the merchant to provide multiple outputs. If\ninstead the PaymentDetails provide 1 traditional output (for reverse\ncompatibility) and 1 \"super address\", the payment could be broken into as\nmany pieces as is needed to match unspent outputs already in the customers\nwallet. Finally, the refund_to address in Payment could also be upgraded to\na \"super address\" to enhance privacy there.\n\nI am not sure if there is a large memory requirement for \"super addresses\",\nbut to me, it seems that a lot of these privacy enhancing possibilities\nwill be simple to implement once BIP32 is widely deployed.\n\n\nOn Thu, Dec 12, 2013 at 11:03 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> I wrote an article intended for a broad/non-developer audience on a few\n> Bitcoin privacy topics:\n>\n> - P2P connection encryption\n> - Address re-use/payment protocol\n> - CoinJoin and merge avoidance\n>\n> I don't think there's anything much new here for people who were involved\n> with the BIP70 design discussions, but it may prove a useful resource when\n> talking about privacy features in the payment protocol. Specifically the\n> ability to request multiple outputs and submit multiple transactions that\n> satisfy them. The article elaborates on how to use that feature to achieve\n> some useful privacy outcomes.\n>\n> I also analyze what using SSL for P2P connections would buy us and what it\n> wouldn't.\n>\n> https://medium.com/p/7f95a386692f\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131212/c18d0b4c/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-12T18:24:46",
                "message_text_only": "I think the right way to integrate BIP32 and BIP70 would be to specify\noutput scripts as normal for backwards compatibility, and then allow each\noutput to have an additional xpubkey and iteration count field. The\niteration counts could be unsigned.\n\nUnfortunately to add data that isn't signed requires a backwards\nincompatible change to the protocol :( There isn't currently any area that\nisn't covered by the signature. We would have to add one, and then have a\nmatching array of iteration counts for each xpubkey that was specified in\nthe output.\n\nI wonder if we should make a last minute change to BIP70 before wallets\nhave shipped and merchant support starts, something like\n\nmessage PaymentRequest {\n  optional byte unsigned_data = 6;\n}\n\nthat would be deleted like the signature is before reserialization.\n\n\n\nOn Thu, Dec 12, 2013 at 9:28 AM, Paul Rabahy <prabahy at gmail.com> wrote:\n\n> First off, nice article. Very clear and informative.\n>\n> I don't know if this is the best place to post this, but it seems related\n> to me.\n>\n> As more wallets implement BIP32, I believe that bitcoin wallets should\n> begin to encourage people to use\n> https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki#recurrent-business-to-business-transactions-mi0style address instead of traditional addresses. In the end, this would\n> improve privacy because users never need to merge coin if they had one of\n> these \"super addresses\".\n>\n> In addition, \"super addresses\" would fit nicely into BIP70. Right now, the\n> PaymentDetails message allows the merchant to provide multiple outputs. If\n> instead the PaymentDetails provide 1 traditional output (for reverse\n> compatibility) and 1 \"super address\", the payment could be broken into as\n> many pieces as is needed to match unspent outputs already in the customers\n> wallet. Finally, the refund_to address in Payment could also be upgraded to\n> a \"super address\" to enhance privacy there.\n>\n> I am not sure if there is a large memory requirement for \"super\n> addresses\", but to me, it seems that a lot of these privacy enhancing\n> possibilities will be simple to implement once BIP32 is widely deployed.\n>\n>\n> On Thu, Dec 12, 2013 at 11:03 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> I wrote an article intended for a broad/non-developer audience on a few\n>> Bitcoin privacy topics:\n>>\n>> - P2P connection encryption\n>> - Address re-use/payment protocol\n>> - CoinJoin and merge avoidance\n>>\n>> I don't think there's anything much new here for people who were involved\n>> with the BIP70 design discussions, but it may prove a useful resource when\n>> talking about privacy features in the payment protocol. Specifically the\n>> ability to request multiple outputs and submit multiple transactions that\n>> satisfy them. The article elaborates on how to use that feature to achieve\n>> some useful privacy outcomes.\n>>\n>> I also analyze what using SSL for P2P connections would buy us and what\n>> it wouldn't.\n>>\n>> https://medium.com/p/7f95a386692f\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Rapidly troubleshoot problems before they affect your business. Most IT\n>> organizations don't have a clear picture of how application performance\n>> affects their revenue. With AppDynamics, you get 100% visibility into your\n>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n>> Pro!\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131212/c0b07754/attachment.html>"
            },
            {
                "author": "Gavin Andresen",
                "date": "2013-12-13T00:20:50",
                "message_text_only": "On Fri, Dec 13, 2013 at 4:24 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> I think the right way to integrate BIP32 and BIP70 would be to specify\n> output scripts as normal for backwards compatibility, and then allow each\n> output to have an additional xpubkey and iteration count field. The\n> iteration counts could be unsigned.\n>\n\nWhy would there be an iteration count? The payer would handle that,\nwouldn't they?\n\nIf the use case is:  I give the Foundation a \"here's where to pay my\nsalary\" PaymentRequest, maybe with several Outputs each having a different\nxpubkey, then it seems to me the Foundation's wallet software should take\ncare of iterating.\n\n(either saving state, so it knows it used xpubkey+10 last month and should\nuse xpubkey+11 this month, or maybe it knows I'm paid monthly and just uses\nxpubkey+(number_of_months_from_date_in_original_payment_request).\n\n-- \n--\nGavin Andresen\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131213/0db7c1e4/attachment.html>"
            },
            {
                "author": "Jeff Garzik",
                "date": "2013-12-13T00:26:34",
                "message_text_only": "On Thu, Dec 12, 2013 at 7:20 PM, Gavin Andresen <gavinandresen at gmail.com> wrote:\n> If the use case is:  I give the Foundation a \"here's where to pay my salary\"\n> PaymentRequest, maybe with several Outputs each having a different xpubkey,\n> then it seems to me the Foundation's wallet software should take care of\n> iterating.\n\nAbsolutely.  This is a key address-non-reuse case we really need to\nsolve.  Miner payouts, BitPay salary payouts, etc. all use a\nstatically provided, manually changed address.\n\nRotating through multiple outputs is a stopgap -- but IMO a useful\none.  HD wallets will solve this in a better way, but existing randkey\nsystems will be around for a long time.\n\n-- \nJeff Garzik\nBitcoin core developer and open source evangelist\nBitPay, Inc.      https://bitpay.com/"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-13T14:43:09",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nSo, vendors hat on, what would it take for, say, BitPay to implement merge avoidance and coinjoin together?\n\nAt the dark wallet hackathon when we were talking usability we decided that the main way to get coinjoin working well is to take advantage of non-time-critical payments to act as counterparties to time-critical payments. For instance BitPay could schedule a vendor payment to happen in full by some time in the future, say 1 day, and send the funds in one or more joins. The actual amounts sent in each tx are then picked to match the amounts desired by the counterparty who needs funds sent right now.\n\nWe expect this to be first implemented just as a \"anonymize my coins\" button for wallet software on always on machines; getting vendors on board would be gravy.\n\nWe may even allow joins to happen when one party pays less fees than the other, although this is tricky: the main Sybil resistance of coinjoin is fees so you don't want to overdo it. OTOH the idea of the NSA and Chinese equivalent wasting money completing each others joins is hilarious...\n\n\nJeff Garzik <jgarzik at bitpay.com> wrote:\n>On Thu, Dec 12, 2013 at 7:20 PM, Gavin Andresen\n><gavinandresen at gmail.com> wrote:\n>> If the use case is:  I give the Foundation a \"here's where to pay my\n>salary\"\n>> PaymentRequest, maybe with several Outputs each having a different\n>xpubkey,\n>> then it seems to me the Foundation's wallet software should take care\n>of\n>> iterating.\n>\n>Absolutely.  This is a key address-non-reuse case we really need to\n>solve.  Miner payouts, BitPay salary payouts, etc. all use a\n>statically provided, manually changed address.\n>\n>Rotating through multiple outputs is a stopgap -- but IMO a useful\n>one.  HD wallets will solve this in a better way, but existing randkey\n>systems will be around for a long time.\n-----BEGIN PGP SIGNATURE-----\nVersion: APG v1.0.9\n\niQFQBAEBCAA6BQJSqxz9MxxQZXRlciBUb2RkIChsb3cgc2VjdXJpdHkga2V5KSA8\ncGV0ZUBwZXRlcnRvZGQub3JnPgAKCRAZnIM7qOfwhTMBB/9L8h5NuSHxsC6W5ptm\ngucxg2AbCwReuWQzRzqW42TYKQ7MnAhpfLLbSQrewNoXRP4H/j6aG8uWOt+z7fZf\npJZ9K8kxmSltHm8SJcmPLTb62yazEKQXF5TDsdpgBdH14M/pFsjUR4H2hypW8k4T\ngcEAIhymZvlXev1NXDMh6rbuw0LtRTBE4NgE2buCuFzp0sEwTNTLxMU1WenMXfRQ\nPooSBn8UoAVNw7Vztnag0T0f5D45VFNJBvQ8m42ee0u3gvMCa4JNRTBM49N2U9qc\nGk6WAvDakOf7FwaJiNMYoDpGyWphx6g697j28NnfB2q2hdjUVnZF+UVuBzkjnNwD\nY40/\n=4dxZ\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-13T17:26:59",
                "message_text_only": ">\n> Why would there be an iteration count? The payer would handle that,\n> wouldn't they?\n>\n\nI'm thinking about a use case I hope will become common next year -\npastebin style hosting sites for payment requests. Like, if I as a regular\nend user wish to use the payment protocol, I could just upload a (possibly\nsigned) payment request to:\n\npayr.com/a62gahZ\n\nor whatever, and then payr.com can take care of incrementing the iteration\ncount on each download of my file. That's why it's useful for it to be\nunsigned.\n\n\n> If the use case is:  I give the Foundation a \"here's where to pay my\n> salary\" PaymentRequest, maybe with several Outputs each having a different\n> xpubkey, then it seems to me the Foundation's wallet software should take\n> care of iterating.\n>\n\nAbsolutely. The two use cases can both be supported. You could give\niteration ranges, for instance, if you want to specify expiry in terms of\nnumber of payments rather than time.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131213/b1257578/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-13T19:19:05",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 12/13/2013 09:26 AM, Mike Hearn wrote:\n> I'm thinking about a use case I hope will become common next year\n> - pastebin style hosting sites for payment requests. Like, if I as\n> a regular end user wish to use the payment protocol, I could just\n> upload a (possibly signed) payment request to:\n> \n> payr.com/a62gahZ <http://payr.com/a62gahZ>\n> \n> or whatever, and then payr.com <http://payr.com> can take care of \n> incrementing the iteration count on each download of my file.\n> That's why it's useful for it to be unsigned.\n\nOr alternatively, the user-signed payment request without iteration\ncount is enclosed within a payr.com-signed envelope that contains the\niteration count. Having fields completely unsigned by anybody leaves\nme a little nervous.\n\nMark\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSq12pAAoJEAdzVfsmodw4MC4QAI9cjmQXz8AVawwr1htFc6b+\nDVAAs1Y4hzbChPeeJCmy13m8a/BuXqc6G0WEWGSzIIa1or3IXCd01JQ2a5waD0IC\nuOjlIMD0tTT7yxwxRjxPc2df82s82traGJC2caOMYjrN4T5VPtj7erB2poNyvOF+\np0lmj+duxUZ8IoyDaih5mgNKzIVujfX7o3lPoOMDdIi6Q1LF9SZ9XbUAxHCpCLfw\nieqVIm8zqtH0NprZ7/JLbqstl1iq5jCPKbORc+9qQWESZH1hFAeS29/ptjnRR8y6\nHqrpDP236vSlrLDW4dLcW9UiQP42tSTwrLCgud08VqeKapSlMX8fjukLyNlTD7h5\nGtPHEo1/j+LmpMfwsXA2OotUIVQBeFfEoi7PwV/Jd+SRVqC6zCTPky1lfg0P7JXA\n7qD9m3u/Ey0+nk888zzff8N7AfBe7GaqFuUByXIyHh6dkcr0xUHBU4afiadFpNhg\n8dTvmP4yqY0g05uz/Cq/ZqrSb5y/yPqsysuruAjWG2GT0M8rFM9oYepVHpUJr01K\nQOHY6qSoqyX/KDCkZgpTMZFDq9gvyPyMFuCQbdecNcCeMPV5kiwPyqqH4rHliJ8I\ngsXW44re5GfdL90nCOTboYFf2CFEn+66zyJ5vBskKSyDRDcU3t5YyCtrDzXdtJMu\nMjVeMFRluY700zLBajw0\n=+MjP\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-13T21:49:23",
                "message_text_only": ">\n> Or alternatively, the user-signed payment request without iteration\n> count is enclosed within a payr.com-signed envelope that contains the\n> iteration count.\n\n\nBut how does that show up in the user interface? I don't know how you would\nexplain what the signature means or implies, or what you do if the\nsignature is broken/missing.\n\nThe only thing that a maliciously modified iteration count can do is cause\nmoney to be sent to an address that's beyond the recipients gap limit,\nmeaning they won't receive it (unless they reconfigure their software and\nrescan). But you can't steal money that way.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131213/d20e2329/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Merge avoidance and P2P connection encryption",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeff Garzik",
                "Mike Hearn",
                "Peter Todd",
                "Gavin Andresen",
                "Mark Friedenbach",
                "Paul Rabahy"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 15587
        }
    },
    {
        "title": "[Bitcoin-development] Web Crypto -- Named Curve Dictionary (adding secp256k1)",
        "thread_messages": [
            {
                "author": "Melvin Carvalho",
                "date": "2013-12-15T18:09:59",
                "message_text_only": "Harry and David suggested I send a message to this group.  I was wondering\nif the crypto group may consider adding support for *secp256k1* in the\nbrowser Named Curve dictionary.\n\nhttp://www.w3.org/TR/WebCryptoAPI/#EcKeyGenParams-dictionary\n\nenum NamedCurve {\n  // NIST recommended curve P-256, also known as secp256r1.\n  \"P-256\",\n  // NIST recommended curve P-384, also known as secp384r1.\n  \"P-384\",\n  // NIST recommended curve P-521, also known as secp521r1.\n  \"P-521\"\n};\n\nOver the last year, there has been a significant increase in deployment for\nthis curve.  It's used in bitcoin and many other crypto currencies.\nBitcoin deployment now numbers in the millions of users and hundreds of\ncompanies.  There are also free software implementations in most\nlanguages.\n\nFor more background on Koblitz curve used by bitcoin see:\n\nhttps://bitcointalk.org/?topic=2699.0\n\nI'm aware that the API tends to expose what's existing in NSS, but, imho,\nif it were possible to add support for this curve would be a great step to\nhelp to many people that already work with crypto currencies in the browser.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131215/c4e0d373/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Web Crypto -- Named Curve Dictionary (adding secp256k1)",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1274
        }
    },
    {
        "title": "[Bitcoin-development] Fees UI warning",
        "thread_messages": [
            {
                "author": "Drak",
                "date": "2013-12-16T10:13:22",
                "message_text_only": "Not sure if this is the right place, but since a few wallet authors\ncongregate here I though it might be the best place.\n\nIt seems every once in a while you see stories of people accidentally\npaying huge fees. Today I read about a man who paid a 20.14BTC fee for a\n0.05 BTC transaction[1], oops. There was another recently where someone\npaid a fee of about 200BTC which fortunately the pool operator refunded.\n\nIt just occurs to me this kind of sad story could be averted if wallets\nimplemented a confirmation box if the fee amount seems crazy - for example,\nif it's >10x what the default fee should be, or if it's greater than x% of\nthe sending amount. \"the fee seems unusually high, are you really sure you\nwant to pay X in fees?\"\n\nI realise the exact details of this might need to be fleshed out given we\nwant flexible fees, but it should be pretty simple to agree with what looks\nlike an unusually large fee according to the going rate.\n\nDrak\n\n[1]\nhttp://www.reddit.com/r/Bitcoin/comments/1syu3h/i_lost_all_my_bitcoins_in_an_erroneous/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/b82d03e2/attachment.html>"
            },
            {
                "author": "Jim",
                "date": "2013-12-16T10:46:48",
                "message_text_only": "Yes I saw that on reddit too.\n\nI think it applies mainly to custom transactions rather\nthan where fees are calculated automatically.\n\nAnother variant of not understanding change that loses\npeople's bitcoins I have encountered is:\n1) Import a private key of a brainwallet/ paper wallet.\n2) Send a small amount of bitcoin from that key.\n3) The user then secure deletes all copies of the wallet\n'for security'. If they are not careful they can delete\na change address with funds on it.\n\nIn MultiBit I have tried to reduce this possibility by:\n1) Hiding the ability to delete wallet (in the next version\nI am removing it entirely)\n2) There is always a single key in a new wallet. When\na user imports a key then that makes two. I always send\nthe change to the second address, if it is available.\n(This is bad for privacy but at least lessens the chances\nthat the funds become lost). \n\nIf users are determined to use a brain wallet and \nsecure delete every copy of the wallet after they use\nthem you cannot stop them (it is their machine after all)\nBut these two options help lessen the chance of bitcoin\nloss if they do.\n\nFor the HD version of MultiBit we are removing the import\nof individual private keys entirely and only supporting HD\naddresses, primarily for safety reasons.\n\nJim\n\nOn Mon, Dec 16, 2013, at 10:13 AM, Drak wrote:\n> Not sure if this is the right place, but since a few wallet authors\n> congregate here I though it might be the best place.\n> \n> It seems every once in a while you see stories of people accidentally\n> paying huge fees. Today I read about a man who paid a 20.14BTC fee for a\n> 0.05 BTC transaction[1], oops. There was another recently where someone\n> paid a fee of about 200BTC which fortunately the pool operator refunded.\n> \n> It just occurs to me this kind of sad story could be averted if wallets\n> implemented a confirmation box if the fee amount seems crazy - for example,\n> if it's >10x what the default fee should be, or if it's greater than x% of\n> the sending amount. \"the fee seems unusually high, are you really sure you\n> want to pay X in fees?\"\n> \n> I realise the exact details of this might need to be fleshed out given we\n> want flexible fees, but it should be pretty simple to agree with what looks\n> like an unusually large fee according to the going rate.\n> \n> Drak\n> \n> [1]\n> http://www.reddit.com/r/Bitcoin/comments/1syu3h/i_lost_all_my_bitcoins_in_an_erroneous/\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT \n> organizations don't have a clear picture of how application performance \n> affects their revenue. With AppDynamics, you get 100% visibility into your \n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\n-- \nhttp://bitcoin-solutions.co.uk"
            },
            {
                "author": "Drak",
                "date": "2013-12-16T11:08:56",
                "message_text_only": "Jim,\n\nIt's great to see the many ways wallet authors try to protect users from\neasy to make mistakes, especially against losing funds.\n\nBut this issues isn't confined to custom transaction - some wallet\nimplementations have a fee field and almost all wallets allow the fee rate\nto be configured in preferences. Sanity checking is sensible where a user\ncan override the calculated fee. Some wallets don't allow the fee to be\nadjusted at all, but quite a few do.\n\nDrak\n\n\nOn 16 December 2013 10:46, Jim <jim618 at fastmail.co.uk> wrote:\n\n> Yes I saw that on reddit too.\n>\n> I think it applies mainly to custom transactions rather\n> than where fees are calculated automatically.\n>\n> Another variant of not understanding change that loses\n> people's bitcoins I have encountered is:\n> 1) Import a private key of a brainwallet/ paper wallet.\n> 2) Send a small amount of bitcoin from that key.\n> 3) The user then secure deletes all copies of the wallet\n> 'for security'. If they are not careful they can delete\n> a change address with funds on it.\n>\n> In MultiBit I have tried to reduce this possibility by:\n> 1) Hiding the ability to delete wallet (in the next version\n> I am removing it entirely)\n> 2) There is always a single key in a new wallet. When\n> a user imports a key then that makes two. I always send\n> the change to the second address, if it is available.\n> (This is bad for privacy but at least lessens the chances\n> that the funds become lost).\n>\n> If users are determined to use a brain wallet and\n> secure delete every copy of the wallet after they use\n> them you cannot stop them (it is their machine after all)\n> But these two options help lessen the chance of bitcoin\n> loss if they do.\n>\n> For the HD version of MultiBit we are removing the import\n> of individual private keys entirely and only supporting HD\n> addresses, primarily for safety reasons.\n>\n> Jim\n>\n> On Mon, Dec 16, 2013, at 10:13 AM, Drak wrote:\n> > Not sure if this is the right place, but since a few wallet authors\n> > congregate here I though it might be the best place.\n> >\n> > It seems every once in a while you see stories of people accidentally\n> > paying huge fees. Today I read about a man who paid a 20.14BTC fee for a\n> > 0.05 BTC transaction[1], oops. There was another recently where someone\n> > paid a fee of about 200BTC which fortunately the pool operator refunded.\n> >\n> > It just occurs to me this kind of sad story could be averted if wallets\n> > implemented a confirmation box if the fee amount seems crazy - for\n> example,\n> > if it's >10x what the default fee should be, or if it's greater than x%\n> of\n> > the sending amount. \"the fee seems unusually high, are you really sure\n> you\n> > want to pay X in fees?\"\n> >\n> > I realise the exact details of this might need to be fleshed out given we\n> > want flexible fees, but it should be pretty simple to agree with what\n> looks\n> > like an unusually large fee according to the going rate.\n> >\n> > Drak\n> >\n> > [1]\n> >\n> http://www.reddit.com/r/Bitcoin/comments/1syu3h/i_lost_all_my_bitcoins_in_an_erroneous/\n> >\n> ------------------------------------------------------------------------------\n> > Rapidly troubleshoot problems before they affect your business. Most IT\n> > organizations don't have a clear picture of how application performance\n> > affects their revenue. With AppDynamics, you get 100% visibility into\n> your\n> > Java,.NET, & PHP application. Start your 15-day FREE TRIAL of\n> AppDynamics Pro!\n> >\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> > _______________________________________________\n> > Bitcoin-development mailing list\n> > Bitcoin-development at lists.sourceforge.net\n> > https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n> --\n> http://bitcoin-solutions.co.uk\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/a379b0a4/attachment.html>"
            },
            {
                "author": "Pieter Wuille",
                "date": "2013-12-16T11:31:11",
                "message_text_only": "On Mon, Dec 16, 2013 at 11:46 AM, Jim <jim618 at fastmail.co.uk> wrote:\n> For the HD version of MultiBit we are removing the import\n> of individual private keys entirely and only supporting HD\n> addresses, primarily for safety reasons.\n\nWill that also mean no longer reusing (change) addresses?\n\n-- \nPieter"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-16T18:26:10",
                "message_text_only": "On Mon, Dec 16, 2013 at 12:31 PM, Pieter Wuille <pieter.wuille at gmail.com>wrote:\n\n> Will that also mean no longer reusing (change) addresses?\n>\n\nJim seems to be planning some parallel development to what I'm doing, but\nHD wallets and stopping address re-use is the current feature I'm working\non for bitcoinj. Only code review and merging takes higher priority at the\nmoment. So I think we might be able to stop re-using addresses at least on\ndevices with sufficient memory some time in Q1\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/1596fb64/attachment.html>"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-16T11:37:04",
                "message_text_only": "On Mon, Dec 16, 2013 at 11:46 AM, Jim <jim618 at fastmail.co.uk> wrote:\n\n> For the HD version of MultiBit we are removing the import\n> of individual private keys entirely and only supporting HD\n> addresses, primarily for safety reasons.\n>\n\nI'd love to have the same in Bitcoin-Qt as well. Too many sob stories about\npeople with outdated backups that lost part or all of their coins. These\nare much more common than fee messups.\n\nWhat we should really do is:\n\n- Use deterministic wallets. Making regular backups becomes optional (to\nretain label and transaction data and such) instead of mandatory.\n\n- Don't support importing private keys. Replace the importing of private\nkeys by a \"sweep\" function.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/73f4c6a2/attachment.html>"
            },
            {
                "author": "Taylor Gerring",
                "date": "2013-12-16T17:55:11",
                "message_text_only": "Providing people with a great user experience is something that Hive Wallet is enthusiastic about, so this is stuff we\u2019re thinking about constantly. For example, how do you alert the user to abnormal activity (i.e. sending \u201ctoo much\u201d on accident[1])? The removal of extraneous UI and functionality that can be automated is a priority, which is why we (to date) still don\u2019t have a Preferences dialog. Smart defaults should be an important aspect of design decisions.\n\nThinking about stripping UI away as much as possible, consider what was done with dat.wallet[2]: no wallet file whatsoever and it doesn't even reveal the address except when explicitly necessary. For privacy\u2019s sake, the intent should be to detect the use of an address and automatically rotate it away from the user. This minimal interaction results in maximum benefit.\n\nOr take a look at the new Bitstamp app I\u2019m writing for Hive[3]. How do you cram an entire trading API into a mobile-like window? Smart use of space and making intelligent event-driven decisions is often overlooked. In the linked screenshot, imagine the user actually clicks the deposit button. A \u201csend bitcoins\" dialog is pre-populated with the deposit address and the requested amount. Copying and pasting addresses is error-prone and not user-friendly in the least.\n\nI would urge all software developers to think about UX when developing applications. What can be automated? What can we make a best guess about? In the case of fees, we will hopefully have more control over them in the coming months, but in the meantime, consider what your application tries to accomplish and how it can do that without getting in the way too much. Software should enable the user, not encumber them.\n\nLastly, I\u2019ll leave everyone with an approach we\u2019re considering once floating fees are feasible[4], something Mike Hearn asked about in a previous thread.\n\n[1] https://github.com/hivewallet/hive-osx/issues/107\n[2] https://github.com/darkwallet/dat.wallet\n[3] https://github.com/tgerring/hiveapp-bitstamptrader\n[4] https://github.com/hivewallet/hive-osx/issues/148\n\n\nTaylor\n\n\nOn Dec 16, 2013, at 5:37 AM, Wladimir <laanwj at gmail.com> wrote:\n\n> On Mon, Dec 16, 2013 at 11:46 AM, Jim <jim618 at fastmail.co.uk> wrote:\n> For the HD version of MultiBit we are removing the import\n> of individual private keys entirely and only supporting HD\n> addresses, primarily for safety reasons.\n> \n> I'd love to have the same in Bitcoin-Qt as well. Too many sob stories about people with outdated backups that lost part or all of their coins. These are much more common than fee messups.\n> \n> What we should really do is:\n> \n> - Use deterministic wallets. Making regular backups becomes optional (to retain label and transaction data and such) instead of mandatory.\n> \n> - Don't support importing private keys. Replace the importing of private keys by a \"sweep\" function.\n> \n> Wladimir\n> \n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT \n> organizations don't have a clear picture of how application performance \n> affects their revenue. With AppDynamics, you get 100% visibility into your \n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/112aa966/attachment.html>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-16T18:45:57",
                "message_text_only": "On Mon, Dec 16, 2013 at 3:37 AM, Wladimir <laanwj at gmail.com> wrote:\n> What we should really do is:\n> - Use deterministic wallets. Making regular backups becomes optional (to\n> retain label and transaction data and such) instead of mandatory.\n> - Don't support importing private keys. Replace the importing of private\n> keys by a \"sweep\" function.\n\nI'd add a third: make structured key-management possible, e.g.\n\nAt a minimum:  Users should be able to hit a \"retire keys / keys\npossibly compromised\" button, which creates a new seed, forces the\nuser to make a backup (and allows more than one), then switches to the\nnew seed and moves all their coins.\n\nOn Mon, Dec 16, 2013 at 10:28 AM, Mike Hearn <mike at plan99.net> wrote:\n> I don't know how to solve this. Badly designed software that looks appealing\n> will always be a danger.\n\n\"We didn't say it couldn't be done\u2014  We said don't do it!\"\n\nPart of the challenge here is that the service does a number of things\npeople _really_ shouldn't be doing\u2014 things so dangerous that I\ncertainly won't do them\u2014 and as a result to not use the site turn into\nbig education efforts rather than just \"use this other thing (that\nalso does the wrong headed thing you want to do)\"."
            },
            {
                "author": "Wladimir",
                "date": "2013-12-16T11:27:54",
                "message_text_only": "On Mon, Dec 16, 2013 at 11:13 AM, Drak <drak at zikula.org> wrote:\n\n> It just occurs to me this kind of sad story could be averted if wallets\n> implemented a confirmation box if the fee amount seems crazy - for example,\n> if it's >10x what the default fee should be, or if it's greater than x% of\n> the sending amount. \"the fee seems unusually high, are you really sure you\n> want to pay X in fees?\"\n>\n\nBitcoin-qt (in master) always shows the fee and total amount that is going\nto be paid in the confirmation dialog, so it is very hard to accidentally a\nvery high fee.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/7422fe45/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-16T18:28:08",
                "message_text_only": "On Mon, Dec 16, 2013 at 11:13 AM, Drak <drak at zikula.org> wrote:\n\n> It just occurs to me this kind of sad story could be averted if wallets\n> implemented a confirmation box if the fee amount seems crazy - for example,\n> if it's >10x what the default fee should be, or if it's greater than x% of\n> the sending amount.\n>\n\nMost good wallets have UI's designed to be safe. Unfortunately this guy was\nusing brainwallet.org which is by no means a \"good\" wallet in that sense\n(it's not really even a wallet app at all)\n\nI think most of us have expressed displeasure at the existence of this site\nbefore, and I once even asked the guy to stop running it, but he refused.\nIt's an extremely sharp tool which makes it easy to cut yourself, except it\ndoesn't look dangerous, it looks like ordinary software designed for\nordinary people.\n\nI don't know how to solve this. Badly designed software that looks\nappealing will always be a danger.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131216/55cc6b23/attachment.html>"
            },
            {
                "author": "Andreas Schildbach",
                "date": "2013-12-16T22:32:30",
                "message_text_only": "On 12/16/2013 07:28 PM, Mike Hearn wrote:\n\n> I don't know how to solve this. Badly designed software that looks\n> appealing will always be a danger.\n\nOne way would be to explicitly warn against some services. For example,\non the \"Choose you wallet\" page of bitcoin.org."
            }
        ],
        "thread_summary": {
            "title": "Fees UI warning",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jim",
                "Wladimir",
                "Andreas Schildbach",
                "Mike Hearn",
                "Taylor Gerring",
                "Gregory Maxwell",
                "Pieter Wuille",
                "Drak"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 17960
        }
    },
    {
        "title": "[Bitcoin-development] RFC: MERGE transaction/script/process for forked chains",
        "thread_messages": [
            {
                "author": "Troy Benjegerdes",
                "date": "2013-12-17T22:41:30",
                "message_text_only": "I want to get some feedback.. I've used distributed version control \nsystems for a long time, and the most useful feature is to be able\nto merge two different forks.\n\nSo what's the equivalent of this for Bitcoin or other crypto-currencies?\n\nLet's suppose that me and my friends get 'islanded' from the rest of\nthe internet for a week, but we still want to trade bitcoin. It would\nwork if there are local miners, until we reconnect.\n\nSuppose we have the main chain (Alice), while bob is on a boat, trading\nwith some friends, but has no network connectivity.\n\nWhen bob reconnects with Alice, a 'Merge' transaction happens where a \nminer looks at bob's forked blockchain, sees no double-spends, and \nincludes BOTH chains.\n\nNow suppose someone on bob's boat has a buggy client, or sent a \ntransaction before disconnect that results in a double-spend on the \nmerge.\n\nSo we have a merge conflict, which generally requires human interaction,\nso bob and his friends broadcast a MERGE request with a transaction fee\nsufficient to cover reconciling the double-spends, AND incentivize a \nminer to do some extra work to merge.\n\nThoughts everyone?\n\n-- Troy"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-17T22:48:14",
                "message_text_only": "On Tue, Dec 17, 2013 at 2:41 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> I want to get some feedback.. I've used distributed version control\n> systems for a long time, and the most useful feature is to be able\n> to merge two different forks.\n\nWe already automatically merge forks that we become aware of simply by\npulling in all the novel non-conflicting transactions the fork\ncontains and including them in our next blocks."
            },
            {
                "author": "Troy Benjegerdes",
                "date": "2013-12-18T06:03:53",
                "message_text_only": "On Tue, Dec 17, 2013 at 02:48:14PM -0800, Gregory Maxwell wrote:\n> On Tue, Dec 17, 2013 at 2:41 PM, Troy Benjegerdes <hozer at hozed.org> wrote:\n> > I want to get some feedback.. I've used distributed version control\n> > systems for a long time, and the most useful feature is to be able\n> > to merge two different forks.\n> \n> We already automatically merge forks that we become aware of simply by\n> pulling in all the novel non-conflicting transactions the fork\n> contains and including them in our next blocks.\n\nNow maybe this is a fatal flaw with Bitcoin's hard upper limit for number\nof coins, but any miners that with good faith tried to support an islanded\nbitcoin network now have generate transactions that get clobbered when\nthe network reconnects.\n\nI can imagine a way to do this with some freicoin-like demurrage, which\nwould only impact new coinbase based on the percentage of the hashing\npower that was on the other side of the fork. So if you are with the\n95% of hashing power, you keep 95% of the new coins when the other 5%\nshows back up from being islanded.\n\nAnd this is also way more complicated than what I had first imagined\nto do securely and reliably."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-17T22:48:46",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nTransactions != blocks. There is no need for a \"merge\" block.\n\nYou are free to trade transactions off-line, so long as you are\ncertain the other parties are not secretly double-spending coins they\nsend you on the block chain.\n\nWhen connection to the bitcoin network is re-established, you simply\ntransmit the transactions and in the regular course of things they\nmake their way into one of the next blocks.\n\nAny transactions which derive from the double-spent one are invalid.\nBut that's your problem, not the miners - chase after Bob and get him\nto give you the money he owes.\n\nOn 12/17/2013 02:41 PM, Troy Benjegerdes wrote:\n> I want to get some feedback.. I've used distributed version control\n>  systems for a long time, and the most useful feature is to be\n> able to merge two different forks.\n> \n> So what's the equivalent of this for Bitcoin or other\n> crypto-currencies?\n> \n> Let's suppose that me and my friends get 'islanded' from the rest\n> of the internet for a week, but we still want to trade bitcoin. It\n> would work if there are local miners, until we reconnect.\n> \n> Suppose we have the main chain (Alice), while bob is on a boat,\n> trading with some friends, but has no network connectivity.\n> \n> When bob reconnects with Alice, a 'Merge' transaction happens where\n> a miner looks at bob's forked blockchain, sees no double-spends,\n> and includes BOTH chains.\n> \n> Now suppose someone on bob's boat has a buggy client, or sent a \n> transaction before disconnect that results in a double-spend on the\n>  merge.\n> \n> So we have a merge conflict, which generally requires human\n> interaction, so bob and his friends broadcast a MERGE request with\n> a transaction fee sufficient to cover reconciling the\n> double-spends, AND incentivize a miner to do some extra work to\n> merge.\n> \n> Thoughts everyone?\n> \n> -- Troy\n> \n> ------------------------------------------------------------------------------\n>\n> \nRapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application\n> performance affects their revenue. With AppDynamics, you get 100%\n> visibility into your Java,.NET, & PHP application. Start your\n> 15-day FREE TRIAL of AppDynamics Pro! \n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>\n> \n_______________________________________________\n> Bitcoin-development mailing list \n> Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSsNTOAAoJEAdzVfsmodw4rBUP/jBFvPks4h0k1GQEPQPYvqNa\n3OhuSlC9EfHmjXxftj6j0lH6JO60BFIoA3P76oFycQRqzNSw3YoldQ1MttpNAAZg\nftiJJjYcuVmDYYWxfWPZN7ZsHrrhGkMn+i0PB1vXU3PB3sStb18vhbIoTZmwH7Rk\nvaUaX8EKFh6R8Y+6nqFMKu8eALaFQPJFP1aNo31ixsFFJrl02zQeIZiTbrOensEj\n6AhXm2oYRqB1aolMmy/m5zcA3IicayJ6seoCQcRhPty6G2l+/4opgATdEBjzgczW\nYhw20YkayyvPa+Fsqwad5AzgGYbm7OA0U6mO/pfeNhglNSt/TGfuSPe1oM9hWt9/\n8gP3PG4O4Fxi+gOAlNABgmoRKvQK8T3TX+eoayxPJiLxi+5l3+1CK0FK1+mKPThr\nheFrc5e9QlUIgATOpLYSs/elgAFM6N2Sez+RNiOg201M10VVKqXzBgZRQ+IYRRk6\njbaBKxsQ/ql5+2vwaUkplg/6Y6rfvRItQ+8xwXEvxazPAAh3Mp0fPbqas+F0e1Ie\nSwVTq517iV7eu+kMxOJEqaCky8ihbaUmshjeEccXdbodpygxCR2dZ0xAkvwXYtnK\n+ZjLQ7o8ySZs89Jvdx8H2fsu6m3hS/7Mm+zJVGV/hLHLoL7IrYPzTHcOHv8eT106\nIYM30Hv+vDrt+f8ZRZ80\n=09Pt\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-12-17T22:50:24",
                "message_text_only": "On Tuesday, December 17, 2013 10:41:30 PM Troy Benjegerdes wrote:\n> I want to get some feedback.. I've used distributed version control\n> systems for a long time, and the most useful feature is to be able\n> to merge two different forks.\n> \n> So what's the equivalent of this for Bitcoin or other crypto-currencies?\n> \n> Let's suppose that me and my friends get 'islanded' from the rest of\n> the internet for a week, but we still want to trade bitcoin. It would\n> work if there are local miners, until we reconnect.\n> \n> Suppose we have the main chain (Alice), while bob is on a boat, trading\n> with some friends, but has no network connectivity.\n> \n> When bob reconnects with Alice, a 'Merge' transaction happens where a\n> miner looks at bob's forked blockchain, sees no double-spends, and\n> includes BOTH chains.\n> \n> Now suppose someone on bob's boat has a buggy client, or sent a\n> transaction before disconnect that results in a double-spend on the\n> merge.\n> \n> So we have a merge conflict, which generally requires human interaction,\n> so bob and his friends broadcast a MERGE request with a transaction fee\n> sufficient to cover reconciling the double-spends, AND incentivize a\n> miner to do some extra work to merge.\n> \n> Thoughts everyone?\n\nThis is interesting, but I'm not sure it has the right incentives. First, it \nadds more reason for miners to *avoid* including transactions (they might turn \nout to be double-spends and make merging costly). Second, it gives people \nreason to double-spend (the miner might cover the cost of it). Finally, you \ndon't appear to address how to deal with the subsidy - do both miners get it?\n\nLuke"
            }
        ],
        "thread_summary": {
            "title": "RFC: MERGE transaction/script/process for forked chains",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Troy Benjegerdes",
                "Gregory Maxwell",
                "Mark Friedenbach"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 7888
        }
    },
    {
        "title": "[Bitcoin-development] DarkWallet Best Practices",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-12-19T13:17:06",
                "message_text_only": "Here's my draft. I don't claim this to be \"official\", but I think this\nshould represent the consensus we've come to at the DarkWallet\nHackathon; I'm writing it up as an email in part to preserve a record of\nthat consensus.\n\n\n* General Principles\n\nWe believe in decentralization, user-defined privacy, education as\nopposed to \"magic\", and security based on openness rather than just\ntrust. We consider users who are individuals as well as the needs of\nbusinesses such as merchants and exchanges. We recognize that often the\nmore people who use privacy protection technologies such as CoinJoin,\nthe better protected we all are.\n\n\n* Privacy\n\nBitcoin inherently makes the flow of money visible, however it does not\nrequire that flow to have real-world identities attached, or even for\nthat matter, pseudonyms. We see this as an unfortunate flaw in the\nBitcoin protocol that is to be corrected; the Satoshi whitepaper itself\nincluded one such correction by outlining how avoiding address re-use\nhelped preserve privacy.\n\n\n** Threat model\n\nWe assume a worst-case sophisticated state-level attacker with the goal\nof deanonymizing and otherwise subverting Bitcoin users. Such an\nattacker can be assumed to control up to 100% of the Bitcoin relay\nnetwork as well as have the ability to wiretap up to 100% of the\nnode-to-node traffic. (for nodes that they do not control) Such\nattackers are however constrained by politics and budget. We assume they\nuse their ability to conduct MITM attacks sparingly - for instance by\nsubverting certificate authorities - due to the risk of detection. (note\nhow such attackers may be more willing to use detectable attacks in the\nfuture now that their activities are public knowledge) We also assume\nthat while their budgets for individual targets may be very large, the\nequally large number of targets required for en-mass survailance leads\nto relatively low budgets per target. In particular note how the 51%\nassumption assumes that the overall \"economic value\" of Bitcoin to its\nparticipants is greater than the attacker's budget by some margin.\n\n\n** Address re-use\n\nWallet software SHALL avoid address re-use. New addresses will be used\nfor all change and users will be encouraged through the user-interface\nand other measures to use new addresses for every payment to the wallet.\n\n\n** CoinJoin\n\nWith CoinJoin the more users that make use of it, the larger the\nanonymity set and the better protected user privacy is. Thus we\nencourage wallet software to agressively make trade-offs between\nabsolute privacy and usability; compromise is not a dirty word.\n\nWallet software SHALL implement basic two-party mix functionality and\nMAY implement more sophisticated CoinJoin functionality such as n-party\nmixes. CoinJoin SHALL be the default way that all transactions are sent.\nWallet authors are cautioned that more sophisticated functionality may\nbe more secure in theory, but if users do not use it the functionality\nis wasted; focus on the general case first and only then try to improve.\n\n\n*** Two-Party Mixes\n\nThe most basic form of CoinJoin is for two parties to author a\ntransaction. A key distinction between a 2 party mix and an n-party mix\nis that in the two party case both parties automatically learn the\nother's inputs and outputs by simple elimination; sophisticated\ncryptographic blinding protocols are useless. To an external attacker\neach transaction doubles the size of the anonymity set: the coins may\nhave come from one party or the other and the attacker has no way of\nknowing which. (modulo value analysis, which will be discussed later)\n\n\n*** n-party Mixes and Blinding\n\nIf two parties can jointly author a transaction, n parties can too.\nWithout special effort this has the disadvantage of revealing the input\nto output mapping to all parties. Various cryptographic blinding schemes\nhave been proposed to fix this problem, either with multi-party\ncomputational techniques, or by making use of multiple communication\nchannels along with a robust anti-DoS scheme. In either case, for now we\nreject such schemes as complex and inconvenient and prioritize robust\ntwo-party mixing. However we do take the existance of such schemes into\naccount; note how a n-party mix can act as a single party in a two-party\nmix scheme.\n\n\n*** Four-stage two-party mix protocol\n\n<on the wiki>\n\n\n*** Defeating value analysis\n\nAttackers can make good guesses at the mapping of inputs to outputs\nbased on value. For instance with two inputs of 3 and 5, and fours\noutputs of 1.4, 1.6, 2.4 and 2.6 the attacker can easily map inputs to\noutputs based on what values match up, in this case 3 split into 1.6 and\n1.4, and 5 split into 2.4 and 2.6\n\n\n**** Value Matching\n\nNot all CoinJoin users need their transactions to have specific output\namounts; some users simply need to move money from one place to another\nbut do not need a specific amount moved or at a specific time. These\nusers can assist users with more stringent requirements by matching the\ninput or output values they request. As a general principle wallets\nSHOULD make these anonymity optimizations possible by allowing users to\nschedule transactions to complete by a specific time and/or allow users\nto specify that they do not wish the transaction to happen unless\nCoinJoin is used.\n\nWith four-stage two-party mixes the Alice, who advertised a desire to do\na transaction first, can easily do ths by picking the transaction output\namounts only after Bob replies with his desired inputs and outputs, and\npicking those amounts so they match Bob's. (or some combination of Bob's\noutputs)\n\n\n**** Merge Avoidance\n\nMerge avoidance is the practice of avoiding the merging of multiple\ntransaction inputs into a single new transaction output, thus implying a\ncommon relationship between those inputs. The most primitive form of\nmerge avoidance is to create multiple individual transactions, each\nmoving single transaction input to an output. (or perhaps some small\nnumber) This is of course inefficient, and appears to have only been\nproposed as a means to still allow for coin blacklists to function while\npreserving some financial privacy.\n\nCombined with CoinJoin however merge avoidance becomes much more\npowerful. For instance even in its most simple form multiple parties can\ncombine their merge-avoiding transaction sets, giving even transactions\nwithout actual counterparties a useful measure of plausible deniability.\n\nIn addition the underlyng features that make merge-avoidance possible -\nthe ability of a recipient to designate they are willing to receive\npayments made to multiple addresses - synergisticly make very\nsophisticated value matching strategies possible.\n\n\n***** Cut-thru payments\n\nRelated to merge avoidance the idea of a cut-thru payment is that if an\nintermediary is both a debitor and a creditor, with sophisticated\npayment protocols they can request incoming payments to directly pay\noutgoing liabilities, skipping them as an intermediary. While premature\nto implement this feature now, it is worth thinking about for the future.\n\n\n** Tor\n\nWhile Tor isn't perfect there is real-world evidence - specifically the\nSnowden leaks - that it works well enough to be considered a worthy\nadversary by state-level attackers. Wallets MUST suppoort the basic\nproxy options that allow the Tor proxy - or some other similar\ntechnology - to be used for privacy enhancement and SHOULD make use of\nTor-specific features such as hidden services.\n\n\n* Decentralization\n\n** Fees\n\nIn a decentralized system distinguishing DoS attackers from legitimate\nusers is at best difficult, at worst impossible. Wallets that do not\nprovide users with the ability to set fees, both when a transaction is\ncreated initially and after initial broadcast, do their users a\ndisservice by taking away a vital method of responding to an attack:\noutspending the attacker.\n\nWallets MUST give users the ability to set the fee per KB they are\nwilling to pay for their transactions. Wallets SHOULD allow users to\nchange that fee after the fact via transction replacement. Wallets MAY\nadditionally implement fee estimation techniques, such as watching what\ntransactions in the mempool are finally mined, or using estimates\nprovided by miners. However it must be recognized that such data is\ninherently unreliable, and this may become a problem in practice in the\nfuture; giving users robust ways to alter fees after the fact will make\nlying about fee data - perhaps to push fees upwards - less advantageous.\n\nNote that the current direction of the Bitcoin Foundation maintained\nreference implementation is weakly towards a pure estimation scheme;\ndeployment of full nodes supporting replacement and support from miners\nis a precondition to doing things correctly.\n\n\n*** Fees and privacy\n\nWhere there is a trade-off between fees and privacy - such as with merge\navoidance strategies - users should be given options to specify how much\nextra they are willing to pay for extra privacy. Wallets SHOULD default\nto being willing to pay some extra, perhaps 25% more over the basic fee.\n\n\n** SPV, full nodes and partial nodes\n\nWallet software SHOULD whenever possible blur the distinctions between\nfull UTXO set nodes, SPV nodes, and partial UTXO set nodes. In addition\nto those three basic categories there is also the question of whether or\nnot a node stores archival blockchain data, something that all three\ncategories of nodes can participate in.\n\nInstead how a node contributes back to the health of the network should\nbe a function of what resources it has available to it. Of course in\nsome cases, like a phone wallet, that won't be very much, but for\ndesktop or business usage the resources available can be significant in\nboth bandwidth and storage capacity.\n\n\n*** Relaying data\n\n**** Blocks and blockheaders\n\nAny node can safely relay blocks and block headers, where \"safely\" is\ndefined as SPV-level security. Our threat model implies that we don't\ntrust random peers on the network, thus we are not relying on them for\nblock validity; as a SPV node we are relying on miners to do validity\nchecking for us. In short feel free to relay data that you yourself\nwould trust.\n\n\n**** Transactions\n\nRemember that relaying transactions has a DoS-attack risk; the Bitcoin\nmodel relies entirely on mining fees and/or priority as the limited\nresource to prevent DoS attacks. Thus at present nodes SHOULD NOT relay\ntransactions if they do not have an up-to-date copy of the relevant\nparts of the UTXO set spent by the transaction. (relaying transactions\nspending only inputs in a partial UTXO set is acceptable):\n\n\n**** Block-header diversity\n\nWallet software MUST make it possible to get block-header information\nfrom a diverse set of sources. These sources SHOULD comprise more than\njust peers on a single P2P network. Remember that it is acceptable to\nuse even centralized sources in addition to decentralized ones for\nblockheader data - knowing that a miner did the work required to create\na block header is always valuable information. (for reasonable amounts\nof work) For instance the author's block headers over twitter project -\nwhile an April Fools joke - is equally a perfectly reasonable backup\nsource of blockheader data.\n\n\n** Updating wallets from blockchain data\n\nIn an ideal world wallets wouldn't need to sync their state with\nblockchain data at all: pervasive use of payment protocols would have\nsenders send txout proofs directly to recipients. But that's not the\ncase. Instead wallet implementations sync themselves from the\nblockchain, and when bandwidth limited this becomes a tradeoff between\nbandwidth and privacy: your transactions hide in the anonymity set of\nthe false positives matched by the filter.\n\n\n*** Bloom filters\n\nThe current implementation for SPV nodes is to simply give peers a bloom\nfilter; the false-positives make the anonymity set. For n peers this has\nO(n) cost when a new block comes in; Bloom filters are cheap to test\nagainst and this system works reasonably well.\n\nHowever, for archival blockchain data bloom filters are seriously\nflawed: every block has to be read from disk in full, the bloom filter\nmatched, and some (potentially very small!) subset sent to the peer. n\npeers. The result is high IO load on the node relative to the client,\nenabling easy DoS attacks.\n\nWallet software SHOULD NOT implement only Bloom filters, however using\nthem when availalbe is acceptable. Note how the Bloom filter design has\nat best O(n^2) scaling ruling it out for large-blocksize future\nscenarios.\n\n\n*** Prefix filters\n\nTXO or UTXO data can be easily indexed by in radix trees with log2(k)\nlookup cost per query. We can take advantage of the fact that the query\nkeys need not be provided in full by only providing partial keys.\nBecause scriptPubKeys are randomly distributed a prefix n bits long has\nan anonymity set of roughly 1/2^n * # of transactions in total.\n\nWallet software SHOULD implement prefix filters and SHOULD use them in\npreference to bloom filters whenever available. Wallet software that\ncurrently uses full-key filtering - e.g. Electrum - MUST be upgraded to\nsupport prefix filters in the future.\n\nWallet software MUST NOT assume that matching anyting other than\nH(scriptPubkey) is possible. This applies to bloom filter matches as\nwell.\n\nIn the future miners may commit to either the TXO set in conjunction\nwith per-block lookup trees, or possibly the full UTXO set. In either\ncase many of the leading designs may be implemented with only\nH(scriptPubKey) lookup capability for reasons of scalability.\n\n\n* Security\n\nBitcoin wallet software is unprecedented in how they provide attackers\ntargets that are highly profitable to attack and highly liquid. (note\nthe irony here!) A succesfull attack that injects malicious theft\nroutines into either sourcecode or binaries can steal thousands of\nBitcoins in one go, and the attacks target is you and your team.\nFollowing basic good practices for robust code is a start, but it's far\nfrom enough.\n\n\n** Source-code integrity\n\nSourcecode MUST be maintained using a revision control system that\nprovides strong integrity guarantees; git is recommended.\n\nSourcecode MUST be PGP signed on a regular basis. Releases MUST be\nsigned - in git this is accomplished by signing the release tag.\nIndividual commits SHOULD be signed, particularly if source-code used in\nday-to-day development is kept on an untrusted server, e.g. github.\nRecovering from a server compromise is made significantly easier if\nevery commit is securely signed.\n\n\n** Binary integrity\n\nAll things being equal it is better to use an interpreted language\nrather than a compiled one; auditing the former is significantly easier\nthan the latter. Similarly, all things being equal, do not distribute\nbinaries of your software - have end-users compile binaries themselves.\n\nOf course all things are not equal, and frequently compiled languages\nand distributing binaries is the correct choice. If that is the case\ndeterministic build systems MUST be used when possible; if using them is\nnot possible take great care with the process by which binaries are\ncreated and try to create long-term plans to move to a deterministic\nbuild system in the future.\n\n\n** PGP\n\nDevelopers of wallet software MUST make use of PGP and participate in\nthe web-of-trust. Developers MUST advertise their PGP fingerprint\nwidely, for instance on personal websites, forum profiles, business\ncards etc. simultaneously. Multiple paths by which someone can find a\nfingerprint claimed to be of some developer make subterfuge easier to\ndetect and more costly to carry out. When possible it is highly\nrecommended to attach these advertisements to real-world, physical,\nactions. For instance the author has included his PGP fingerprint in\nhighly public, videotaped, talks he has given at conferences. He has\nalso created a videotaped statement of his PGP key that was timestamped\nin the Bitcoin blockchain. While it certainly is possible for such\nartifacts to be faked, doing so convincingly is expensive, labour\nintensive, and error prone.\n\nDevelopers SHOULD sign as much communication as practical. Sourcecode is\none form; your emails to development lists and between each other are\nanother. Signing both leaves a large body of widely distributed work,\nall tied to your identity. (it's highly unfortunate that nearly all\npublicly available mail archives do not make mail accessible to the\npublic in such a way as to allow verification of PGP signatures; often\neven inline signatures are broken for various reasons)\n\n\n*** Increasing adoption of PGP\n\nKeep in mind that end-users very rarely verify PGP fingerprints at all,\nlet alone correctly - the above advice with regard to PGP is currently\nmostly useful in allowing *other developers* the tools they need to\nverify the integrity of your code. For instance, in the event of a\nsuspected compromise consistantly signed code allows anyone competent in\nthe use of PGP to quickly evaluate the situation, and if warrented,\ninform less sophisticated users through traditional measures such as the\nmedia.\n\nWhile this is somewhat out of scope for this document the \"DarkWallet\neffort\" should include work to make PGP more user-friendly and a better\nexperience. But that does *not* have to mean \"making PGP easier for\ngrama\", right now \"making PGP easier for Joe Wallet Developer\" is a\nlaudable goal. For instance understanding and using the web-of-trust\nsucks right now. How can we make that experience better for a user who\nunderstands the basics of cryptography?\n\n\n** SSL/Certificate authorties\n\nWhile certificate authorities are notoriously bad at the job they are\nsupposed to be doing the CA system is still better than nothing - use it\nwhere appropriate. For instance if you have a website advertising your\nsoftware, use https rather than http.\n\n\n** Multi-factor spend authorization, AKA multisig wallets\n\n<mainly discussed at the conference in terms of multiple individuals\ncontrolling funds, which is out of scope for this document>\n\nAssuming any individual device is uncompromised is risky; wallet\nsoftware SHOULD support some form of multi-factor protection of some or\nall wallet funds. Note that this is a weak \"should\"; mainly we want to\nensure that users have options to keep large quantities of funds secure;\naccepting higher risks for smaller quantities is an acceptable\ntrade-off.\n\nFIXME: go into more detail.\n\n\n*** P2SH\n\nWallet software MUST support paying funds to P2SH addresses.\n\n\n** Payment Integrity\n\nMulti-factor wallets protect your funds from being spent without your\nknowledge, but they provide no assurance about where those funds went; a\nBitcoin address is not an identity. A payment protocol, such as BIP70,\nis needed.\n\nWallet software SHOULD support BIP70. Yes, there are (justified)\nconcerns about its current dependence on the certificate authority\nsystem, but those concerns should be addressed by a combination of\nfixing that system, and extending BIP70 with different and better\nidentity verification options.\n\nHowever, remember that in the absense of multi-factor wallets the \"know\nwho you are paying\" protections of BIP70 are actually pretty much\nuseless; malware that defeats the payment protocol locally is not much\ndifferent than malware that silently rewrites Bitcoin addresses. There\nare other motivations for the BIP70 version of the payment protocol, but\nwhether or not they are actually interesting for users is an open\nquestion; it was not designed by user-experience experts. Thus wallet\nauthors should consider supporting a low priority for now.\n\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/7f0be874/attachment.sig>"
            },
            {
                "author": "Drak",
                "date": "2013-12-19T15:46:58",
                "message_text_only": "On 19 December 2013 13:17, Peter Todd <pete at petertodd.org> wrote:\n\n> ** Fees\n>\n> Wallets MUST give users the ability to set the fee per KB they are\n> willing to pay for their transactions. Wallets SHOULD allow users to\n> change that fee after the fact via transction replacement.\n\n\nCan you add a part about SHOULD/MUST warn users if the fee is unusually\nhigh to avoid sob-stories of people sending 20BTC fees with for the\n0.002BTC sandwich.\n\nSourcecode MUST be PGP signed on a regular basis. Releases MUST be\n> signed - in git this is accomplished by signing the release tag.\n> Individual commits SHOULD be signed, particularly if source-code used in\n>\n\n\"SHOULD be cryptographically signed\" I assume.\n\n\n> ** SSL/Certificate authorties\n>\n> While certificate authorities are notoriously bad at the job they are\n> supposed to be doing the CA system is still better than nothing - use it\n> where appropriate. For instance if you have a website advertising your\n> software, use https rather than http.\n>\n\nOnce could make efforts to publish (maybe even as signed commits in the git\nrepo etc the current valid certificate fingerprints and which CA signed\nit). This would go some way to exposing\nMITM either by CA or in workplaces where browsers are loaded with bogus CAs\nfor the purpose\nof deep packet inspection.\n\n\n> ** Multi-factor spend authorization, AKA multisig wallets\n>\n> <mainly discussed at the conference in terms of multiple individuals\n> controlling funds, which is out of scope for this document>\n>\n> Assuming any individual device is uncompromised is risky; wallet\n> software SHOULD support some form of multi-factor protection of some or\n> all wallet funds. Note that this is a weak \"should\"; mainly we want to\n>\n\nAccording to RFC 2119 <http://www.ietf.org/rfc/rfc2119.txt> language, you\nmight be better using the word RECOMMENDED or MAY over SHOULD here.\n\nAdditionally, at the beginning of the spec I would put :\n\n\"The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\ndocument are to be interpreted as described in RFC\n2119<http://www.ietf.org/rfc/rfc2119.txt>\n.\"\n\nRegards\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/0b70da93/attachment.html>"
            },
            {
                "author": "Wendell",
                "date": "2013-12-20T06:52:51",
                "message_text_only": "Amazingly thorough, Peter. Thanks so much!\n\n-wendell\n\nhivewallet.com | twitter.com/hivewallet | pgp: B7179FA88C498718\n\nOn Dec 19, 2013, at 8:17 AM, Peter Todd wrote:\n\n> Here's my draft. I don't claim this to be \"official\", but I think this\n> should represent the consensus we've come to at the DarkWallet\n> Hackathon; I'm writing it up as an email in part to preserve a record of\n> that consensus.\n> \n> \n> * General Principles\n> \n> We believe in decentralization, user-defined privacy, education as\n> opposed to \"magic\", and security based on openness rather than just\n> trust. We consider users who are individuals as well as the needs of\n> businesses such as merchants and exchanges. We recognize that often the\n> more people who use privacy protection technologies such as CoinJoin,\n> the better protected we all are.\n> \n> \n> * Privacy\n> \n> Bitcoin inherently makes the flow of money visible, however it does not\n> require that flow to have real-world identities attached, or even for\n> that matter, pseudonyms. We see this as an unfortunate flaw in the\n> Bitcoin protocol that is to be corrected; the Satoshi whitepaper itself\n> included one such correction by outlining how avoiding address re-use\n> helped preserve privacy.\n> \n> \n> ** Threat model\n> \n> We assume a worst-case sophisticated state-level attacker with the goal\n> of deanonymizing and otherwise subverting Bitcoin users. Such an\n> attacker can be assumed to control up to 100% of the Bitcoin relay\n> network as well as have the ability to wiretap up to 100% of the\n> node-to-node traffic. (for nodes that they do not control) Such\n> attackers are however constrained by politics and budget. We assume they\n> use their ability to conduct MITM attacks sparingly - for instance by\n> subverting certificate authorities - due to the risk of detection. (note\n> how such attackers may be more willing to use detectable attacks in the\n> future now that their activities are public knowledge) We also assume\n> that while their budgets for individual targets may be very large, the\n> equally large number of targets required for en-mass survailance leads\n> to relatively low budgets per target. In particular note how the 51%\n> assumption assumes that the overall \"economic value\" of Bitcoin to its\n> participants is greater than the attacker's budget by some margin.\n> \n> \n> ** Address re-use\n> \n> Wallet software SHALL avoid address re-use. New addresses will be used\n> for all change and users will be encouraged through the user-interface\n> and other measures to use new addresses for every payment to the wallet.\n> \n> \n> ** CoinJoin\n> \n> With CoinJoin the more users that make use of it, the larger the\n> anonymity set and the better protected user privacy is. Thus we\n> encourage wallet software to agressively make trade-offs between\n> absolute privacy and usability; compromise is not a dirty word.\n> \n> Wallet software SHALL implement basic two-party mix functionality and\n> MAY implement more sophisticated CoinJoin functionality such as n-party\n> mixes. CoinJoin SHALL be the default way that all transactions are sent.\n> Wallet authors are cautioned that more sophisticated functionality may\n> be more secure in theory, but if users do not use it the functionality\n> is wasted; focus on the general case first and only then try to improve.\n> \n> \n> *** Two-Party Mixes\n> \n> The most basic form of CoinJoin is for two parties to author a\n> transaction. A key distinction between a 2 party mix and an n-party mix\n> is that in the two party case both parties automatically learn the\n> other's inputs and outputs by simple elimination; sophisticated\n> cryptographic blinding protocols are useless. To an external attacker\n> each transaction doubles the size of the anonymity set: the coins may\n> have come from one party or the other and the attacker has no way of\n> knowing which. (modulo value analysis, which will be discussed later)\n> \n> \n> *** n-party Mixes and Blinding\n> \n> If two parties can jointly author a transaction, n parties can too.\n> Without special effort this has the disadvantage of revealing the input\n> to output mapping to all parties. Various cryptographic blinding schemes\n> have been proposed to fix this problem, either with multi-party\n> computational techniques, or by making use of multiple communication\n> channels along with a robust anti-DoS scheme. In either case, for now we\n> reject such schemes as complex and inconvenient and prioritize robust\n> two-party mixing. However we do take the existance of such schemes into\n> account; note how a n-party mix can act as a single party in a two-party\n> mix scheme.\n> \n> \n> *** Four-stage two-party mix protocol\n> \n> <on the wiki>\n> \n> \n> *** Defeating value analysis\n> \n> Attackers can make good guesses at the mapping of inputs to outputs\n> based on value. For instance with two inputs of 3 and 5, and fours\n> outputs of 1.4, 1.6, 2.4 and 2.6 the attacker can easily map inputs to\n> outputs based on what values match up, in this case 3 split into 1.6 and\n> 1.4, and 5 split into 2.4 and 2.6\n> \n> \n> **** Value Matching\n> \n> Not all CoinJoin users need their transactions to have specific output\n> amounts; some users simply need to move money from one place to another\n> but do not need a specific amount moved or at a specific time. These\n> users can assist users with more stringent requirements by matching the\n> input or output values they request. As a general principle wallets\n> SHOULD make these anonymity optimizations possible by allowing users to\n> schedule transactions to complete by a specific time and/or allow users\n> to specify that they do not wish the transaction to happen unless\n> CoinJoin is used.\n> \n> With four-stage two-party mixes the Alice, who advertised a desire to do\n> a transaction first, can easily do ths by picking the transaction output\n> amounts only after Bob replies with his desired inputs and outputs, and\n> picking those amounts so they match Bob's. (or some combination of Bob's\n> outputs)\n> \n> \n> **** Merge Avoidance\n> \n> Merge avoidance is the practice of avoiding the merging of multiple\n> transaction inputs into a single new transaction output, thus implying a\n> common relationship between those inputs. The most primitive form of\n> merge avoidance is to create multiple individual transactions, each\n> moving single transaction input to an output. (or perhaps some small\n> number) This is of course inefficient, and appears to have only been\n> proposed as a means to still allow for coin blacklists to function while\n> preserving some financial privacy.\n> \n> Combined with CoinJoin however merge avoidance becomes much more\n> powerful. For instance even in its most simple form multiple parties can\n> combine their merge-avoiding transaction sets, giving even transactions\n> without actual counterparties a useful measure of plausible deniability.\n> \n> In addition the underlyng features that make merge-avoidance possible -\n> the ability of a recipient to designate they are willing to receive\n> payments made to multiple addresses - synergisticly make very\n> sophisticated value matching strategies possible.\n> \n> \n> ***** Cut-thru payments\n> \n> Related to merge avoidance the idea of a cut-thru payment is that if an\n> intermediary is both a debitor and a creditor, with sophisticated\n> payment protocols they can request incoming payments to directly pay\n> outgoing liabilities, skipping them as an intermediary. While premature\n> to implement this feature now, it is worth thinking about for the future.\n> \n> \n> ** Tor\n> \n> While Tor isn't perfect there is real-world evidence - specifically the\n> Snowden leaks - that it works well enough to be considered a worthy\n> adversary by state-level attackers. Wallets MUST suppoort the basic\n> proxy options that allow the Tor proxy - or some other similar\n> technology - to be used for privacy enhancement and SHOULD make use of\n> Tor-specific features such as hidden services.\n> \n> \n> * Decentralization\n> \n> ** Fees\n> \n> In a decentralized system distinguishing DoS attackers from legitimate\n> users is at best difficult, at worst impossible. Wallets that do not\n> provide users with the ability to set fees, both when a transaction is\n> created initially and after initial broadcast, do their users a\n> disservice by taking away a vital method of responding to an attack:\n> outspending the attacker.\n> \n> Wallets MUST give users the ability to set the fee per KB they are\n> willing to pay for their transactions. Wallets SHOULD allow users to\n> change that fee after the fact via transction replacement. Wallets MAY\n> additionally implement fee estimation techniques, such as watching what\n> transactions in the mempool are finally mined, or using estimates\n> provided by miners. However it must be recognized that such data is\n> inherently unreliable, and this may become a problem in practice in the\n> future; giving users robust ways to alter fees after the fact will make\n> lying about fee data - perhaps to push fees upwards - less advantageous.\n> \n> Note that the current direction of the Bitcoin Foundation maintained\n> reference implementation is weakly towards a pure estimation scheme;\n> deployment of full nodes supporting replacement and support from miners\n> is a precondition to doing things correctly.\n> \n> \n> *** Fees and privacy\n> \n> Where there is a trade-off between fees and privacy - such as with merge\n> avoidance strategies - users should be given options to specify how much\n> extra they are willing to pay for extra privacy. Wallets SHOULD default\n> to being willing to pay some extra, perhaps 25% more over the basic fee.\n> \n> \n> ** SPV, full nodes and partial nodes\n> \n> Wallet software SHOULD whenever possible blur the distinctions between\n> full UTXO set nodes, SPV nodes, and partial UTXO set nodes. In addition\n> to those three basic categories there is also the question of whether or\n> not a node stores archival blockchain data, something that all three\n> categories of nodes can participate in.\n> \n> Instead how a node contributes back to the health of the network should\n> be a function of what resources it has available to it. Of course in\n> some cases, like a phone wallet, that won't be very much, but for\n> desktop or business usage the resources available can be significant in\n> both bandwidth and storage capacity.\n> \n> \n> *** Relaying data\n> \n> **** Blocks and blockheaders\n> \n> Any node can safely relay blocks and block headers, where \"safely\" is\n> defined as SPV-level security. Our threat model implies that we don't\n> trust random peers on the network, thus we are not relying on them for\n> block validity; as a SPV node we are relying on miners to do validity\n> checking for us. In short feel free to relay data that you yourself\n> would trust.\n> \n> \n> **** Transactions\n> \n> Remember that relaying transactions has a DoS-attack risk; the Bitcoin\n> model relies entirely on mining fees and/or priority as the limited\n> resource to prevent DoS attacks. Thus at present nodes SHOULD NOT relay\n> transactions if they do not have an up-to-date copy of the relevant\n> parts of the UTXO set spent by the transaction. (relaying transactions\n> spending only inputs in a partial UTXO set is acceptable):\n> \n> \n> **** Block-header diversity\n> \n> Wallet software MUST make it possible to get block-header information\n> from a diverse set of sources. These sources SHOULD comprise more than\n> just peers on a single P2P network. Remember that it is acceptable to\n> use even centralized sources in addition to decentralized ones for\n> blockheader data - knowing that a miner did the work required to create\n> a block header is always valuable information. (for reasonable amounts\n> of work) For instance the author's block headers over twitter project -\n> while an April Fools joke - is equally a perfectly reasonable backup\n> source of blockheader data.\n> \n> \n> ** Updating wallets from blockchain data\n> \n> In an ideal world wallets wouldn't need to sync their state with\n> blockchain data at all: pervasive use of payment protocols would have\n> senders send txout proofs directly to recipients. But that's not the\n> case. Instead wallet implementations sync themselves from the\n> blockchain, and when bandwidth limited this becomes a tradeoff between\n> bandwidth and privacy: your transactions hide in the anonymity set of\n> the false positives matched by the filter.\n> \n> \n> *** Bloom filters\n> \n> The current implementation for SPV nodes is to simply give peers a bloom\n> filter; the false-positives make the anonymity set. For n peers this has\n> O(n) cost when a new block comes in; Bloom filters are cheap to test\n> against and this system works reasonably well.\n> \n> However, for archival blockchain data bloom filters are seriously\n> flawed: every block has to be read from disk in full, the bloom filter\n> matched, and some (potentially very small!) subset sent to the peer. n\n> peers. The result is high IO load on the node relative to the client,\n> enabling easy DoS attacks.\n> \n> Wallet software SHOULD NOT implement only Bloom filters, however using\n> them when availalbe is acceptable. Note how the Bloom filter design has\n> at best O(n^2) scaling ruling it out for large-blocksize future\n> scenarios.\n> \n> \n> *** Prefix filters\n> \n> TXO or UTXO data can be easily indexed by in radix trees with log2(k)\n> lookup cost per query. We can take advantage of the fact that the query\n> keys need not be provided in full by only providing partial keys.\n> Because scriptPubKeys are randomly distributed a prefix n bits long has\n> an anonymity set of roughly 1/2^n * # of transactions in total.\n> \n> Wallet software SHOULD implement prefix filters and SHOULD use them in\n> preference to bloom filters whenever available. Wallet software that\n> currently uses full-key filtering - e.g. Electrum - MUST be upgraded to\n> support prefix filters in the future.\n> \n> Wallet software MUST NOT assume that matching anyting other than\n> H(scriptPubkey) is possible. This applies to bloom filter matches as\n> well.\n> \n> In the future miners may commit to either the TXO set in conjunction\n> with per-block lookup trees, or possibly the full UTXO set. In either\n> case many of the leading designs may be implemented with only\n> H(scriptPubKey) lookup capability for reasons of scalability.\n> \n> \n> * Security\n> \n> Bitcoin wallet software is unprecedented in how they provide attackers\n> targets that are highly profitable to attack and highly liquid. (note\n> the irony here!) A succesfull attack that injects malicious theft\n> routines into either sourcecode or binaries can steal thousands of\n> Bitcoins in one go, and the attacks target is you and your team.\n> Following basic good practices for robust code is a start, but it's far\n> from enough.\n> \n> \n> ** Source-code integrity\n> \n> Sourcecode MUST be maintained using a revision control system that\n> provides strong integrity guarantees; git is recommended.\n> \n> Sourcecode MUST be PGP signed on a regular basis. Releases MUST be\n> signed - in git this is accomplished by signing the release tag.\n> Individual commits SHOULD be signed, particularly if source-code used in\n> day-to-day development is kept on an untrusted server, e.g. github.\n> Recovering from a server compromise is made significantly easier if\n> every commit is securely signed.\n> \n> \n> ** Binary integrity\n> \n> All things being equal it is better to use an interpreted language\n> rather than a compiled one; auditing the former is significantly easier\n> than the latter. Similarly, all things being equal, do not distribute\n> binaries of your software - have end-users compile binaries themselves.\n> \n> Of course all things are not equal, and frequently compiled languages\n> and distributing binaries is the correct choice. If that is the case\n> deterministic build systems MUST be used when possible; if using them is\n> not possible take great care with the process by which binaries are\n> created and try to create long-term plans to move to a deterministic\n> build system in the future.\n> \n> \n> ** PGP\n> \n> Developers of wallet software MUST make use of PGP and participate in\n> the web-of-trust. Developers MUST advertise their PGP fingerprint\n> widely, for instance on personal websites, forum profiles, business\n> cards etc. simultaneously. Multiple paths by which someone can find a\n> fingerprint claimed to be of some developer make subterfuge easier to\n> detect and more costly to carry out. When possible it is highly\n> recommended to attach these advertisements to real-world, physical,\n> actions. For instance the author has included his PGP fingerprint in\n> highly public, videotaped, talks he has given at conferences. He has\n> also created a videotaped statement of his PGP key that was timestamped\n> in the Bitcoin blockchain. While it certainly is possible for such\n> artifacts to be faked, doing so convincingly is expensive, labour\n> intensive, and error prone.\n> \n> Developers SHOULD sign as much communication as practical. Sourcecode is\n> one form; your emails to development lists and between each other are\n> another. Signing both leaves a large body of widely distributed work,\n> all tied to your identity. (it's highly unfortunate that nearly all\n> publicly available mail archives do not make mail accessible to the\n> public in such a way as to allow verification of PGP signatures; often\n> even inline signatures are broken for various reasons)\n> \n> \n> *** Increasing adoption of PGP\n> \n> Keep in mind that end-users very rarely verify PGP fingerprints at all,\n> let alone correctly - the above advice with regard to PGP is currently\n> mostly useful in allowing *other developers* the tools they need to\n> verify the integrity of your code. For instance, in the event of a\n> suspected compromise consistantly signed code allows anyone competent in\n> the use of PGP to quickly evaluate the situation, and if warrented,\n> inform less sophisticated users through traditional measures such as the\n> media.\n> \n> While this is somewhat out of scope for this document the \"DarkWallet\n> effort\" should include work to make PGP more user-friendly and a better\n> experience. But that does *not* have to mean \"making PGP easier for\n> grama\", right now \"making PGP easier for Joe Wallet Developer\" is a\n> laudable goal. For instance understanding and using the web-of-trust\n> sucks right now. How can we make that experience better for a user who\n> understands the basics of cryptography?\n> \n> \n> ** SSL/Certificate authorties\n> \n> While certificate authorities are notoriously bad at the job they are\n> supposed to be doing the CA system is still better than nothing - use it\n> where appropriate. For instance if you have a website advertising your\n> software, use https rather than http.\n> \n> \n> ** Multi-factor spend authorization, AKA multisig wallets\n> \n> <mainly discussed at the conference in terms of multiple individuals\n> controlling funds, which is out of scope for this document>\n> \n> Assuming any individual device is uncompromised is risky; wallet\n> software SHOULD support some form of multi-factor protection of some or\n> all wallet funds. Note that this is a weak \"should\"; mainly we want to\n> ensure that users have options to keep large quantities of funds secure;\n> accepting higher risks for smaller quantities is an acceptable\n> trade-off.\n> \n> FIXME: go into more detail.\n> \n> \n> *** P2SH\n> \n> Wallet software MUST support paying funds to P2SH addresses.\n> \n> \n> ** Payment Integrity\n> \n> Multi-factor wallets protect your funds from being spent without your\n> knowledge, but they provide no assurance about where those funds went; a\n> Bitcoin address is not an identity. A payment protocol, such as BIP70,\n> is needed.\n> \n> Wallet software SHOULD support BIP70. Yes, there are (justified)\n> concerns about its current dependence on the certificate authority\n> system, but those concerns should be addressed by a combination of\n> fixing that system, and extending BIP70 with different and better\n> identity verification options.\n> \n> However, remember that in the absense of multi-factor wallets the \"know\n> who you are paying\" protections of BIP70 are actually pretty much\n> useless; malware that defeats the payment protocol locally is not much\n> different than malware that silently rewrites Bitcoin addresses. There\n> are other motivations for the BIP70 version of the payment protocol, but\n> whether or not they are actually interesting for users is an open\n> question; it was not designed by user-experience experts. Thus wallet\n> authors should consider supporting a low priority for now.\n> \n> \n> -- \n> 'peter'[:-1]@petertodd.org\n> 000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 841 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/850f36f2/attachment.sig>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-19T17:44:06",
                "message_text_only": "On Thu, Dec 19, 2013 at 04:04:17PM -0000, Amir Taaki wrote:\n\nLooks like for this to actually go to the email lists they need to be in\nthe To: field.\n\n> About signing each commit, Linus advises against it:\n> \n> http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-td2582986.html\n> \n> \"Btw, there's a final reason, and probably the really real one. Signing\n> each commit is totally stupid. It just means that you automate it, and you\n> make the signature worth less. It also doesn't add any real value, since\n> the way the git DAG-chain of SHA1's work, you only ever need _one_\n> signature to make all the commits reachable from that one be effectively\n> covered by that one. So signing each commit is simply missing the point.\"\n> \n> What do you reckon?\n\nHis point is valid, but it's valid in the context of how Linux\ndevelopment is done, not Bitcoin. The key difference being that Linus\nand other kernel developers have a model where code is passed around on\nmailing lists and between developers rather than stored on untrustworthy\nthird-parties like github.\n\nFor instance typically someone will submit a patch to the kernel\ndevelopment mailing list, example:\nhttp://www.mail-archive.com/linux-kernel@vger.kernel.org/msg558841.html\nThat patch isn't signed, and the email itself doesn't have to be PGP\nsigned either. However a trusted maintainer of the relevant subsystem\nwill (in theory) look over the patch carefully and commit it to their\npersonal tree on a secure computer. (in theory)\n\nAt some point the maintainer will create a *signed* tag on a commit with\none or more patches, often many patches, another another maintainer\nhigher in the hierarchy (maybe even Linus) will *merge* that tag into\ntheir tree, hopefully checking the signature first! Modern versions of\ngit actually include the tag signature in the merge commit, so the\nresult is signed by the original maintainer; note how this contradicts\nLinus's email with regard to the idea of separable signatures.\nEventually multiple such groups of patches build up and the result is\ntagged as a release, and that release tag is signed.\n\nAccountability in this model rests with maintainers, and source-code\nstays on a multitude of personal, secure, locations. (in theory)\n\n\nHowever since we like to use github and tend to get code directly from\nit our main risk is github (or similar) being compromised. Given that I\nthink we're much better off using per-commit signatures, and in effect\ncontinually making the statement \"Yes, this commit/merge was really\nproduced by me on my machine, although I may have made a mistake and\nmight not have looked at the code as thoroughly as I maybe should have.\"\nThe statement *is* weaker than Linus's model of \"This signature is\nReally Official and Stuff and I've carefully checked everything.\" but I\nthink we're much more interested in getting a strong guarantee on who\nmade the commit than some strong statement about its actual contents -\nhumans are fallible anyway.\n\n> Also do you approve of the other link I sent you?\n> \n> https://wiki.unsystem.net/index.php/DarkWallet/Negotiation\n\nI think you're conflating identities with the messaging layer; focus on\nthe latter and use off-the-shelf identity systems like OpenPGP and SSL\ncertificate authorities. Remember that every new identity system that\ngets involved is another way for an attacker to MITM attack you; you're\nbetter off using whatever the user is using already.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000016a442255c6d15cd6e085991c1efffc9caeff5fc6da14368a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/84d0b90a/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "DarkWallet Best Practices",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Drak",
                "Peter Todd",
                "Wendell"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 46991
        }
    },
    {
        "title": "[Bitcoin-development] [unSYSTEM] DarkWallet Best Practices",
        "thread_messages": [
            {
                "author": "Drak",
                "date": "2013-12-19T16:32:10",
                "message_text_only": "On 19 December 2013 16:04, Amir Taaki <genjix at riseup.net> wrote:\n\n> About signing each commit, Linus advises against it:\n>\n> http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-td2582986.html\n\n\nYeah, it makes no sense after reading it. Nice catch.\n\nHowever, his recommendation for signing tags with `git tag -s` should\nprobably be incorporated into the spec as a MUST.\n\nDrak\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/009ff7b0/attachment.html>"
            },
            {
                "author": "Mike Belshe",
                "date": "2013-12-19T17:23:18",
                "message_text_only": "Hey Peter -\n\nI think this is a super list.   A couple of thoughts:\n\na) In the section on multi-sig and multi-factor, I think we can split these\napart. Multi-factor user authentication is very valuable and not the same\nas multi-factor signing, which is a second level of complexity.   The\nmulti-factor auth can be off-blockchain, e.g. authenticating with SMS\nmessage to your phone or Google Authenticator challenge.  Given the state\nof malware today, I personally would propose two requirements:\n    1) wallets SHOULD use multi-factor authentication before authorizing\naccess to a wallet (e.g. view balances, addresses, transactions, etc)\n    2) wallets MUST use multi-factor auth before signing a transaction.\n[note: I recognize that MUST might be too aggressive right now, but I\nwouldn't use a wallet without it.  this can also be impractical for\nserver-side wallets]\n\nb) Multi-factor signing (e.g. P2SH) may be too early to really define.  But\nhere are some issues which have come up from my own personal development\nexperience:\n    - Wallets SHOULD NOT create two keys on a single host or device\n    - Wallets SHOULD provide a way to import external public keys which can\nbe used as part of a P2SH address\n\nSlightly off topic:  For P2SH, address creation requires the public key,\nnot the public hash of an address.  For me, this has made it difficult to\nimport keys created through out-of-band sources.  Most wallets/key\ngenerators/etc only provide the address and not the public key, and this is\na hinderance to easy P2SH creation off host.  It would be great if there\nwere a way to address this, but I don't know how.\n\nc) Small word-choice nit:  I had to go lookup the meaning of \"SHALL\" (I now\nknow it is the same as MUST).  I think most RFCs just use MUST these days.\n\n\nThanks,\nmike\n\n\n\n\n\n\n\n\nOn Thu, Dec 19, 2013 at 8:32 AM, Drak <drak at zikula.org> wrote:\n\n> On 19 December 2013 16:04, Amir Taaki <genjix at riseup.net> wrote:\n>\n>> About signing each commit, Linus advises against it:\n>>\n>> http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-td2582986.html\n>\n>\n> Yeah, it makes no sense after reading it. Nice catch.\n>\n> However, his recommendation for signing tags with `git tag -s` should\n> probably be incorporated into the spec as a MUST.\n>\n> Drak\n>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/80e6438c/attachment.html>"
            },
            {
                "author": "Drak",
                "date": "2013-12-19T18:05:51",
                "message_text_only": "How does signing the commit message itself help at all since it just signs\nthe commit message, not the content of the commit. You could commit some\ncode then I. Then I squash my commits into yours and use your commit\nmessage. You could also include the previous commit hash in your commit\nmessage.\n\nBut correct me if I am wrong, but that would be difficult (if not\nimpossible) to verify once you get into merging code since the patch can be\nmerged in at another point in history entirely.. and still doesn't work\nbecause I can still squash commits into yours. I don't see how it can work\nat all unless I am missing something obvious (which I fear I may be?).\n\nI also don't believe Linus is talking just from the perspective of how the\nkernel project works. The integrity of a git repository is maintained by\nthe hash chaining and by the distributed nature of the repository. If\nsomeone hacked github and changed the history of the tree, the next time\nyou tried to push his code up it would fail because the history had changed\n- tampering is immediately obvious in git.\n\nRegards,\n\nDrak\n\n\nOn 19 December 2013 17:44, Peter Todd <pete at petertodd.org> wrote:\n\n> On Thu, Dec 19, 2013 at 04:04:17PM -0000, Amir Taaki wrote:\n>\n> Looks like for this to actually go to the email lists they need to be in\n> the To: field.\n>\n> > About signing each commit, Linus advises against it:\n> >\n> >\n> http://git.661346.n2.nabble.com/GPG-signing-for-git-commit-td2582986.html\n> >\n> > \"Btw, there's a final reason, and probably the really real one. Signing\n> > each commit is totally stupid. It just means that you automate it, and\n> you\n> > make the signature worth less. It also doesn't add any real value, since\n> > the way the git DAG-chain of SHA1's work, you only ever need _one_\n> > signature to make all the commits reachable from that one be effectively\n> > covered by that one. So signing each commit is simply missing the point.\"\n> >\n> > What do you reckon?\n>\n> His point is valid, but it's valid in the context of how Linux\n> development is done, not Bitcoin. The key difference being that Linus\n> and other kernel developers have a model where code is passed around on\n> mailing lists and between developers rather than stored on untrustworthy\n> third-parties like github.\n>\n> For instance typically someone will submit a patch to the kernel\n> development mailing list, example:\n> http://www.mail-archive.com/linux-kernel@vger.kernel.org/msg558841.html\n> That patch isn't signed, and the email itself doesn't have to be PGP\n> signed either. However a trusted maintainer of the relevant subsystem\n> will (in theory) look over the patch carefully and commit it to their\n> personal tree on a secure computer. (in theory)\n>\n> At some point the maintainer will create a *signed* tag on a commit with\n> one or more patches, often many patches, another another maintainer\n> higher in the hierarchy (maybe even Linus) will *merge* that tag into\n> their tree, hopefully checking the signature first! Modern versions of\n> git actually include the tag signature in the merge commit, so the\n> result is signed by the original maintainer; note how this contradicts\n> Linus's email with regard to the idea of separable signatures.\n> Eventually multiple such groups of patches build up and the result is\n> tagged as a release, and that release tag is signed.\n>\n> Accountability in this model rests with maintainers, and source-code\n> stays on a multitude of personal, secure, locations. (in theory)\n>\n>\n> However since we like to use github and tend to get code directly from\n> it our main risk is github (or similar) being compromised. Given that I\n> think we're much better off using per-commit signatures, and in effect\n> continually making the statement \"Yes, this commit/merge was really\n> produced by me on my machine, although I may have made a mistake and\n> might not have looked at the code as thoroughly as I maybe should have.\"\n> The statement *is* weaker than Linus's model of \"This signature is\n> Really Official and Stuff and I've carefully checked everything.\" but I\n> think we're much more interested in getting a strong guarantee on who\n> made the commit than some strong statement about its actual contents -\n> humans are fallible anyway.\n>\n> > Also do you approve of the other link I sent you?\n> >\n> > https://wiki.unsystem.net/index.php/DarkWallet/Negotiation\n>\n> I think you're conflating identities with the messaging layer; focus on\n> the latter and use off-the-shelf identity systems like OpenPGP and SSL\n> certificate authorities. Remember that every new identity system that\n> gets involved is another way for an attacker to MITM attack you; you're\n> better off using whatever the user is using already.\n>\n> --\n> 'peter'[:-1]@petertodd.org\n> 00000000000000016a442255c6d15cd6e085991c1efffc9caeff5fc6da14368a\n>\n> _______________________________________________\n> unSYSTEM mailing list: http://unsystem.net\n> https://mailinglists.dyne.org/cgi-bin/mailman/listinfo/unsystem\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/fff6022f/attachment.html>"
            },
            {
                "author": "Taylor Gerring",
                "date": "2013-12-20T17:32:57",
                "message_text_only": "I\u2019m inclined to agree, as this was discussed on multiple occasions and seems to fix a lot of the address re-use problems. With hot topics like \u201ccoin validation\u201d, I think it\u2019s important to highlight the privacy that generating fresh addresses from public extended keys grants us.\n\nAlso thinking about implications regarding non-merchant use of Payment Protocol, encouraging the exchange of extended public keys instead of a single address could be a boon for Payment Protocol to actually be useful for users. Initially, the idea was that the merchant would generate a new address from an extended key and include that in the Payment Request. How do we handle pushing the extended public key down to the wallet itself? Do we just shoehorn the exchange of keys into the Payment Protocol itself via a special tag or would this require more substantive change? Services could develop to facilitate the exchange (acting as a sort of \u201cPP gateway\u201d) or wallet software might be able to directly communicate, perhaps by exchanging PGP-encrypted files in Payment Protocol format via Bluetooth, AirDrop, email, BitMessage, or whatever future communications channel comes into being. \n\nThanks again to Peter for putting together a consolidated list of topics!\n\nTaylor\n\n\n\nOn Dec 19, 2013, at 2:40 PM, caedes <caedes at sindominio.net> wrote:\n\n> I feel it's missing mention of using (or not) *extended public keys*\n> from bip 32 to share multiple addresses in one go, so regular payments\n> can be done without asking for further addresses. Also since whoever has\n> the extended key can generate public keys this might help P2SH where the\n> public key is also needed.\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/f86849b3/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "DarkWallet Best Practices",
            "categories": [
                "Bitcoin-development",
                "unSYSTEM"
            ],
            "authors": [
                "Taylor Gerring",
                "Drak",
                "Mike Belshe"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 10690
        }
    },
    {
        "title": "[Bitcoin-development] BIP proposal: Authenticated prefix trees",
        "thread_messages": [
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-20T01:47:52",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHello fellow bitcoin developers. Included below is the first draft of\na BIP for a new Merkle-compressed data structure. The need for this\ndata structure arose out of the misnamed \"Ultimate blockchain\ncompression\" project, but it has since been recognized to have many\nother applications.\n\nIn addition to this BIP I am preparing three additional BIPs\ndescribing the use of this data structure in stateless validation &\nmining, the UBC address index for \"SPV+\" operating modes, document\ntimestamping and merged mining.\n\nA Python implementation of this data structure is available here:\n\nhttps://github.com/monetizeio/python-bitcoin\n\nA C++ implementation is being worked on.\n\nAs per the BIP-1 procedure, I am submitting this rough draft to the\ncommunity for discussion. I welcome all comments and criticisms of\nboth form and content.\n\n- -Mark\n\n\n==Abstract==\n\nThis BIP describes a [http://en.wikipedia.org/wiki/Hash_tree Merkle\nhash tree] variant of the [http://en.wikipedia.org/wiki/Trie\nprefix-tree data structure], ideally suited for encoding key-value\nindices which support memory-efficient proofs.\n\n==Motivation==\n\nThere are a number of applications which would benefit from having a\ndata structure with the following properties:\n\n* '''Arbitrary mapping of keys to values.''' A ''key'' can be any\nbytestring, and its ''value'' any other bytestring.\n* '''Duplicate keys disallowed.''' Every key has one, and only one\nvalue associated with it. Some applications demand assurance that no\nkey value is reused, and that this constraint can be checked without\nrequiring access to the entire data structure.\n* '''Efficient look-up by key.''' The data structure should support\nsub-linear lookup operations with respect to the number of keys in the\nmapping. Logarithmic time or linear with respect to the length of the\nkey should be achievable and would be sufficient for realistic\napplications.\n* '''Merkle compression of mapping structure.''' It should be possible\nto produce a reduced description of the tree consisting of a single\nroot hash value which is deterministically calculated from the mapping\nstructure.\n* '''Efficient proofs of inclusion.''' It should be possible to\nextract a proof of key/value mapping which is limited in size and\nverification time by the length of the key in the worst case.\n* '''Computation of updates using local information.''' Given a set of\ninclusion proofs, it should be possible to calculate adjustments to\nthe local mapping structure (update or deletion of included mappings,\nor insertion between two included mappings which are adjacent in the\nglobal structure).\n\nSuch applications include committed validation indices which enable\nstateless mining nodes, committed wallet indices which enable\ntrust-less querying of the unspent transaction output set by\n<code>scriptPubKey</code>, efficient document time-stamping, and\nsecure & efficient merged mining. This BIP describes an authenticated\nprefix tree which has the above properties, but leaves the myriad\napplications to be formalized in future BIPs.\n\n==Data structure==\n\nThis BIP defines a binary prefix tree. Such a structure provides a\nmapping of bitstrings (the ''keys'') to bytestrings (the ''values'').\nIt is an acyclic binary tree which implicitly encodes keys within the\ntraversal path -- a \"left\" branch is a 0, and a \"right\" branch is a 1.\nEach node is reachable by only one unique path, and reading off the\nbranches taken (0 for each left, 1 for each right) as one follows the\npath from root to target yields the node's key.\n\nThe particular binary prefix tree defined by this BIP is a hybrid\nPATRICIA / de la Brandais tree structure.\n[http://en.wikipedia.org/wiki/Radix_tree PATRICIA trees] compress a\nlong sequence of non-branching nodes into a single interior node with\na per-branch ''skip prefix''. This achieves significant savings in\nstorage space, root hash calculation, and traversal time.\n\nA de la Brandais trie achieves compression by only storing branches\nactually taken in a node. The space savings are minimal for a binary\ntree, but place the serialized size of a non-branching interior node\nunder the SHA-256 block size, thereby reducing the number of hash\noperations required to perform updates and validate proofs.\n\nThis BIP describes the authenticated prefix tree and its many\nvariations in terms of its serialized representation. Additional BIPs\ndescribe the application of authenticated prefix trees to such\napplications as committed indices, document time-stamping, and merged\nmining.\n\n==Serialization format==\n\nAs a hierarchical structure, the serialization of an entire tree is\nthe serialization of its root node. A serialized node is the\nconcatenation of five structures:\n\n    node := flags || VARCHAR(extra) || value || left || right\n\nThe <code>flags</code> is a single byte field whose composite values\ndetermine the bytes that follow.\n\n    flags = (left_flags  << 0) |\n            (right_flags << 2) |\n            (has_value   << 4) |\n            (prune_left  << 5) |\n            (prune_right << 6) |\n            (prune_value << 7)\n\nThe <code>left_flags</code> and <code>right_flags</code> are special\n2-bit enumeration fields. A value of 0 indicates that the node does\nnot branch in this direction, and the corresponding <code>left</code>\nor <code>right</code> branch is missing (replaced with the empty\nstring in the node serialization). A value of 1 indicates a single bit\nkey prefix for this branch, implicitly 0 for <code>left</code> and 1\nfor <code>right</code>. A 2 indicates up to 7 bits of additional skip\nprefix (beyond the implicit first bit, making 8 bits total) are stored\nin a compact single-byte format. A 3 indicates a skip prefix with\ngreater than 7 additional bits, stored length-prefix encoded.\n\nThe single bit <code>has_value</code> indicates whether the node\nstores a data bytestring, the value associated with its key prefix.\nSince keys may be any value or length, including one key being a\nprefix of another, it is possible for interior nodes in addition to\nleaf nodes to have values associated with them, and therefore an\nexplicit value-existence bit is required.\n\nThe remaining three bits are used for proof extraction, and are masked\naway prior to hash operations. <code>prune_left</code> indicates that\nthe entire left branch has been pruned. <code>prune_right</code> has\nsimilar meaning for the right branch. If <code>has_value</code> is\nset, <code>prune_value</code> may be set to exclude the node's value\nfrom encoded proof. This is necessary field for interior nodes, since\nit is possible that their values may be pruned while their children\nare not.\n\nThe <code>value</code> field is only present if the bit\n<code>flags.has_value</code> is set, in which case it is a\n<code>VARCHAR</code> bytestring:\n\n    switch flags.has_value:\n      case 0:\n        value := \u03b5\n      case 1:\n        value := VARCHAR(node.value)\n\nThe <code>extra</code> field is always present, and takes on a\nbytestring value defined by the particular application. Use of the\n<code>extra</code> field is application dependent, and will not be\ncovered in this specification. It can be set to the empty bytestring\n(serialized as a single zero byte) if the application has no use for\nthe <code>extra</code> field.\n\n    value := VARCHAR(calculate_extra(node))\n\nThe <code>left</code> and <code>right</code> non-terminals are only\npresent if the corresponding <code>flags.left_flags</code> or\n<code>flags.right_flags</code> are non-zero. The format depends on the\nvalue of this flags setting:\n\n    switch branch_flags:\n      case 0:\n        branch := \u03b5\n      case 1:\n        branch := branch_node_or_hash\n      case 2:\n        prefix  = prefix >> 1\n        branch := int_to_byte(1 << len(prefix) | bits_to_int(prefix)) ||\n                  branch_node_or_hash\n      case 3:\n        prefix  = prefix >> 1\n        branch := VARINT(len(prefix) - 9) ||\n                  bits_to_string(prefix) ||\n                  branch_node_or_hash\n\n<code>branch_flags</code> is a stand-in meant to describe either\n<code>left_flags</code> or <code>right_flags</code>, and likewise\neverywhere else in the above pseudocode <code>branch</code> can be\nreplaced with either <code>left</code> or <code>right</code>.\n\n<code>prefix</code> is the key bits between the current node and the\nnext branching, terminal, and/or leaf node, including the implicit\nleading bit for the branch (0 for the left branch, 1 for the right\nbranch). In the above code, <code>len(prefix)</code> returns the\nnumber of bits in the bitstring, and <code>prefix >> 1</code> drops\nthe first bit reducing the size of the bitstring by one and\nrenumbering the indices accordingly.\n\nThe function <code>int_to_byte</code> takes an integer in the range\n[0, 255] and returns the octet representing that value. This is a NOP\nin many languages, but present in this pseudocode so as to be explicit\nabout what is going on.\n\nThe function <code>bits_to_int</code> interprets a sequence of bits as\na little-endian integer value. This is analogous to the following\npseudocode:\n\n    def bits_to_int(bits):\n        result = 0\n        for idx in 1..len(bits):\n            if bits[idx] == 1:\n                result |= 1<<idx\n\nThe function <code>bits_to_string</code> serializes a sequence of bits\ninto a binary string. It uses little-endian bit and byte order, as\ndemonstrated by the following pseudocode:\n\n    def bits_to_string(bits):\n        bytes = [0] * ceil(len(bits) / 8)\n        for idx in 1..len(bits):\n            if bits[idx] == 1:\n                bytes[idx / 8] |= 1 << idx % 8\n        return map(int_to_byte, bytes)\n\n<code>branch_node_or_hash</code> is either the serialized child node\nor its SHA-256 hash and associated meta-data. Context determines which\nvalue to use: during digest calculations, disk/database serialization,\nand when the branch is pruned the hash value is used and serialized in\nthe same way as other SHA-256 values in the bitcoin protocol (note\nhowever that it is single-SHA-256, not the double-SHA-256 more\ncommonly used in bitcoin). The number of terminal (value-containing)\nnodes and the serialized size in bytes of the fully unpruned branch\nare suffixed to the branch hash. When serializing a proof or\nsnapshotting tree state and the branch is not pruned, the serialized\nchild node is included directly and the count and size are omitted as\nthey can be derived from the serialization.\n\n    if branch_pruned or SER_HASH:\n        branch_node_or_hash := SHA-256(branch) ||\n                               count(branch) ||\n                               size(branch)\n    else:\n        branch_node_or_hash := serialize(branch)\n\nAs an example, here is the serialization of a prefix tree mapping the\nnames men and women of science to the year of their greatest publication:\n\n    >>> dict = AuthTree()\n    >>> dict['Curie'] = VARINT(1898)\n    >>> dict('Einstein') = VARINT(1905)\n    >>> dict['Fleming'] = VARINT(1928)\n    >>> dict['\u4e2d\u672c'] = VARINT(2009)\n    >>> dict.serialize()\n    # An bytestring, broken out into parts:\n\n    # . Root node:\n    0x0e # left_flags: 2, right_flags: 3, has_value: 1\n    0x00 # extra: \u03b5\n\n    # .l Inner node: 0b01000\n    0x11 # 0b01000\n    0x07 # left_flags: 3, right_flags: 1\n    0x00 # extra: \u03b5\n\n    # .l.l Inner node: 0b01000011 0b01110101 0b01110010 0b01101001\n    #                  'C'        'u'        'r'        'i'\n    #                  0b01100101\n    #                  'e'\n    0x1abb3a599a02 # 0b01101110101011100100110100101100101\n    0x10           # has_value: 1\n    0x00           # extra: \u03b5\n    0x03fd6a07     # value: VARINT(1911)\n\n    # .l.r Inner node: 0b010001\n    0x0f # left_flags: 3, right_flags: 3\n    0x00 # extra: \u03b5\n\n    # .l.r.l Inner node: 0b01000101 0b01101001 0b01101110 0b01110011\n    #                    'E'        'i'        'n'        's'\n    #                    0b01110100 0b01100101 0b01101001 0b01101110\n    #                    't'        'e'        'i'        'n'\n    0x312ded9c5d4c2ded00 # 0b1011010010110111\n                         # 0b0011100110111010\n                         # 0b0011001010110100\n                         # 0b101101110\n    0x10                 # has_value: 1\n    0x00                 # extra: \u03b5\n    0x03fd7107           # value: VARINT(1905)\n\n    # .l.r.r Inner node: 0b01000110 0b01101100 0b01100101 0b01101101\n    #                    'F'        'l'        'e'        'm'\n    #                    0b01101001 0b01101110 0b01100111\n    #                    'i'        'n'        'g'\n    0x296c4c6d2dedcc01 # 0b0011011000110010\n                       # 0b1011011010110100\n                       # 0b10110111001100111\n    0x10               # has_value: 1\n    0x00               # extra: \u03b5\n    0x03fd8807         # value: VARINT(1928)\n\n    # .r Inner node: 0b11100100 0b10111000 0b10101101\n    #                '\u4e2d'\n    #                0b11100110 0b10011100 0b10101100\n    #                '\u672c'\n    0x27938edab39c1a # 0b1100100101110001\n                     # 0b0101101111001101\n                     # 0b001110010101100\n    0x10             # has_value: 1\n    0x00             # extra: \u03b5\n    0x03fdd907       # value: VARINT(2009)\n\n==Hashing==\n\nThere are two variations of the authenticated prefix tree presented in\nthis draft BIP. They differ only in the way in which hash values of a\nnode and its left/right branches are constructed. The variations,\ndiscussed below, tradeoff computational resources for the ability to\ncompose operational proofs. Whether the performance hit is\nsignificant, and whether or not the added features are worth the\ntradeoff depends very much on the application.\n\n===Variation 1: Level-compressed hashing===\n\nIn this variation the referenced child node's hash is used in\nconstruction of an interior node's hash digest. The interior node is\nserialized just as described (using the child node's digest instead of\ninline serialization), the resulting bytestring is passed through one\nround of SHA-256, and the digest that comes out of that is the hash\nvalue of the node. This is very efficient to calculate, requiring the\nabsolute minimum number of SHA-256 hash operations, and achieving\nlevel-compression of computational resources in addition to reduction\nof space usage.\n\nFor example:\n\n    >>> dict = AuthTree()\n    >>> dict['a'] = 0xff\n    >>> dict.serialize()\n    0x0200c3100001ff\n    >>> dict.root\n    AuthTreeNode(\n        left_prefix = 0b01100001,\n        left_hash   =\n0xbafa0e2bba3396c5e9804b6cbe61be82bc442c1121aed81f8d5de36e9b20dc2f,\n        left_count  = 1,\n        left_size   = 4)\n    >>> dict.hash\n    0xb4837376022a7c9ddaa7d685ad183bcbd5d16c362b81fa293a7b9e911766cf3c\n\nAssuming uniform distribution of key values, level-compressed hashing\nhas time-complexity logarithmic with respect to the number of keys in\nthe prefix tree. The disadvantage is that it is not possible in\ngeneral to \"rebase\" an operational proof on top of a sibling,\nparticularly if that sibling deletes branches that result in\nreorganization and level compression of internal nodes used by the\nrebased proof.\n\n===Variation 2: Proof-updatable hashing===\n\nIn this variation, level-compressed branches are expanded into a\nseries of chained single-branch internal nodes, each including the\nhash of its direct child. For a brach with a prefix N bits in length,\nthis requires N chained hashes. Thanks to node-compression (excluding\nempty branches from the serialization), it is possible for each hash\noperation + padding to fit within a single SHA-256 block.\n\nNote that the serialization semantics are unchanged! The variation\nonly changes the procedure for calculating the hash values of interior\nnodes. The serialization format remains the same (modulo differing\nhash values standing in for pruned branches).\n\nUsing the above example, calling <code>dict.hash</code> causes the\nfollowing internal nodes to be constructed:\n\n    >>> node1 = AuthTreeNode(\n        right_prefix = 0b1,\n        right_hash   =\n0xbafa0e2bba3396c5e9804b6cbe61be82bc442c1121aed81f8d5de36e9b20dc2f,\n        right_count  = 1,\n        right_size   = 4)\n    >>> node2 = AuthTreeNode( left_prefix=0b0,  left_hash=node1.hash,\n left_count=1,  left_size=4)\n    >>> node3 = AuthTreeNode( left_prefix=0b0,  left_hash=node2.hash,\n left_count=1,  left_size=4)\n    >>> node4 = AuthTreeNode( left_prefix=0b0,  left_hash=node3.hash,\n left_count=1,  left_size=4)\n    >>> node5 = AuthTreeNode( left_prefix=0b0,  left_hash=node4.hash,\n left_count=1,  left_size=4)\n    >>> node6 = AuthTreeNode(right_prefix=0b1, right_hash=node5.hash,\nright_count=1, right_size=4)\n    >>> node7 = AuthTreeNode(right_prefix=0b1, right_hash=node6.hash,\nright_count=1, right_size=4)\n    >>> node8 = AuthTreeNode( left_prefix=0b0,  left_hash=node7.hash,\n left_count=1,  left_size=4,\n                              value=0xff)\n    >>> dict.hash == node8.hash\n    True\n    >>> dict.hash\n    0xc3a9328eff06662ed9ff8e82aa9cc094d05f70f0953828ea8c643c4679213895\n\nThe advantage of proof-updatable hashing is that any operational proof\nmay be \"rebased\" onto the tree resulting from a sibling proof, using\nonly the information locally available in the proofs, even in the\npresence of deletion operations that result in level-compression of\nthe serialized form. The disadvantage is performance: validating an\nupdatable proof requires a number of hash operations lower-bounded by\nthe length of the key in bits.\n\n==Inclusion proofs==\n\nAn inclusion proof is a prefix tree pruned to contain a subset of its\nkeys. The serialization of an inclusion proof takes the following form:\n\n    inclusion_proof := variant || root_hash || root_node || checksum\n\nWhere <code>variant</code> is a single-byte value indicating the\npresence of level-compression (0 for proof-updatable hashing, 1 for\nlevel-compressed hashing). <code>root_hash</code> is the Merkle\ncompression hash of the tree, the 32-byte SHA-256 hash of the root\nnode. <code>tree</code> is the possibly pruned, serialized\nrepresentation of the tree. And finally, <code>checksum</code> is the\nfirst 4 bytes of the SHA-256 checksum of <code>variant</code>,\n<code>root_hash</code>, and <code>root_node</code>.\n\nFor ease of transport, the standard envelope for display of an\ninclusion proof is internet-standard base64 encoding in the following\nformat:\n\n- -----BEGIN INCLUSION PROOF-----\nATzPZheRnns6KfqBKzZs0dXLOxithdan2p18KgJ2c4O0DgARBwAauzpZmgIQAAP9agcPADEt7Zxd\nTC3tABAAA/1xBylsTG0t7cwBEAAD/YgHJ5OO2rOcGhAAA/3ZByEg+2g=\n- -----END INCLUSION PROOF-----\n\nDecoded, it looks like this:\n\n    0x01 # Level-compressed hashing\n    # Merkle root:\n    0x3ccf6617919e7b3a29fa812b366cd1d5cb3b18ad85d6a7da9d7c2a02767383b4\n    # Serialized tree (unpruned):\n    0x0e001107001abb3a599a02100003fd6a070f00312ded9c5d4c2ded00100003fd\n    0x7107296c4c6d2dedcc01100003fd880727938edab39c1a100003fdd907\n    # Checksum:\n    0x2120fb68\n\n==Operational proofs==\n\nAn operational proof is a list of insert/update and delete operations\nsuffixed to an inclusion proof which contains the pathways necessary\nto perform the specified operations. The inclusion proof must contain\nthe key values to be updated or deleted, and the nearest adjacent key\nvalues for each insertion. The serialization of an operational proof\ntakes the following form:\n\n    operational_proof := variant || root_hash || tree ||\n                         VARLIST(delete*) || VARLIST(update*) ||\n                         new_hash || checksum\n\n    delete := VARCHAR(key)\n    update := VARCHAR(key) || VARCHAR(value)\n\nThe first three fields, <code>variant</code>, <code>root_hash</code>,\nand <code>tree</code> are the inclusion proof, and take the same\nvalues described in the previous section. <code>deletes</code> is a\nlist of key values to be deleted; each key value in this list must\nexist in the inclusion proof. <code>updates</code> is a list of key,\nvalue mappings which are to be inserted into the tree, possibly\nreplacing any mapping for the key which already exists; either the key\nitself if it exists (update), or the two lexicographically closest\nkeys on either side if it does not (insert) must be present in the\ninsertion proof. <code>new_hash</code> is the resulting Merkle root\nafter the insertion, updates, and deletes are performed, and\n<code>checksum</code> is the initial 4 bytes of the SHA-256 hash of\nthe preceding fields.\n\nJust like inclusion proofs, an operational proof is encoded in base64\nfor display and transport. Here's the same\n\n- -----BEGIN OPERATIONAL PROOF-----\nATzPZheRnns6KfqBKzZs0dXLOxithdan2p18KgJ2c4O0LgARaIsVaQi/GdhOPOgA8p4Pu4PiEfEg\nlcmy3j7bOc7hXw0DLSeTjtqznBoQAAP92QcBMOS4reacrACzuZJbyP7fqIOf5VEk4iarG4+uPoZC\noun8BztQMQBy0LHVeSY=\n- -----END OPERATIONAL PROOF-----\n\nDecoded and broken into its constituent fields:\n\n    0x01 # Level-compressed hashing\n    # Original Merkle root:\n    0x3ccf6617919e7b3a29fa812b366cd1d5cb3b18ad85d6a7da9d7c2a02767383b4\n    # Serialized tree (included keys: '\u4e2d\u672c'):\n    0x2e0011688b156908bf19d84e3ce800f29e0fbb83e211f12095c9b2de3edb39ce\n    0xe15f0d032d27938edab39c1a100003fdd907\n    # Deletion list ['\u4e2d\u672c']:\n    0x01\n    0x30e4b8ade69cac\n    # Insertion list []:\n    0x00\n    # New Merkle root:\n    0xb3b9925bc8fedfa8839fe55124e226ab1b8fae3e8642a2e9fc073b50310072d0\n    # Checksum:\n    0xb1d57926\n\n~End of File~\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSs6HIAAoJEAdzVfsmodw4gooQAJm7XNsZjgdeTSpKIvUIU38f\ntQx2FD08hQdLl48me5mDUbHJgGlYINsKAgoZ8Mqwi/kHEEYhuIlLIX1p6Ovigidb\n21BiVoOLdG1egGOwxp17DuwYaDPTppFTlN9TBjZzW6WKc7+4aNvyc1KtrbHIhtj/\n04ekFyAn4U5UH0ht7CI79j0u3Kp85p5D4PyYZB2m82mzti6OxpSM4tXlMkDW7ihg\nQJwiZSjzejqTd7WF0zr0SLeGVRSN2A0dzUCoVsI98eIa3hkw2N4ae6dRkibyStOT\nV8VEDvHArEDlvu8jiryajhsom5mvtOOclNDkVXWAf/Te4gj05iYdTIvNvDEJtqsP\nXDbmw6GgV1kBLlLo0mp//t/+wr+nIvy+sVAP+eqtM/0vjaVXBkXxkUMqqNkrtVpB\nf3whq7nFahssUMSoWE93jgob1ayAax2XUALVMAXYsJl7b2MqBGlhiTZ8FQZ+TW4A\ntIpKeUprPmDvA18rO3SCbmLMQryZqYiH0sRyvUc5kvn3qCRHrISZNkEuK591eS+x\nBO1eOluPzVqeXPPSK1jvGeY0FNJtwzbov4nI1mzOvzQHLCvkHn5PhUFCK5tL5tAe\nb0Z5qwDV+SvVs7W1R7ejYBzEj77U1zuzZ9AtikOuvy+bNGrkIlpI49EyXHijm7C3\nQ6JacTuI0PelYji2gaBJ\n=BbDs\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Jeremy Spilman",
                "date": "2013-12-20T06:48:53",
                "message_text_only": "Wow there's a lot here to think about. I'm pretty sure I haven't grasped  \nthe full implications yet.\n\nI see it proposes to also introduce additional BIPs describing the use of  \nthe data stucture for stateless validation & mining, the UBC address index  \nfor \"SPV+\" operating modes, document timestamping and merged mining.\n\nCan the BIP stand alone as a BIP without some specific changes to the  \nprotocol or end-user accessible features defined within it? It seems like  \nan extremely useful data stucture, but as I understand it the purpose of  \nBIPS is defining interoperability points, not implementation details?\n\nUnless the tree itself is becoming part of the protocol, seems like its  \nspec, test vectors, and reference implementation can live elsewhere, but I  \nwould love to read about BIPS which use this tree to accomplish some  \namazing scalability or security benefits."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-20T11:21:38",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nHi Jeremy, Let's give a preview of the application-oriented BIPs I\nmentioned:\n\nStateless validation and mining involves prefixing transaction and\nblock messages with proofs of their UTxO state changes. These are the\n\"operational proofs\" I describe in the draft, and they work on prefix\ntrees whose root hashes committed to the coinbase in a soft-fork\nupgrade of the validation rules.\n\n\"Ultimate blockchain compression\" involves consensus over an address\nindex, which can be queried over the p2p network by lightweight nodes.\nThe structure of the index is an authenticated prefix tree, and the\nresults of such a query is an an inclusion proof.\n\nDocument time-stamping and this new method of merged mining use the\nsame structure: a prefix tree whose root hash value is committed to a\npruneable output of the coinbase transaction. Document timestamp\nproofs and merged mining proof-of-works are inclusion proofs over this\ntree.\n\nI hope that shows how the BIP directly affects interoperability of the\nbitcoin protocol and clients which use these applications. I released\nthis BIP first to get some feedback on the structure itself, which\nwill be used by all of the application-specific BIPs which follow.\n\n\nStepping back and speaking generically, the purpose of a BIP as I see\nit is to standardize details which affect interoperability between\nclients. In fact, at a cursory glance only about half of the BIPs deal\nwith protocol issues directly - the rest deal with local /\nuser-interface issues like key derivation or JSON-RPC APIs. Even if\nnone of the applications involved protocol changes, I still think BIPs\nlike this would be of value in that they serve to standardize things\nwhich are or will seek to become commonly used and widely implemented.\n\nCheers,\nMark\n\nOn 12/19/2013 10:48 PM, Jeremy Spilman wrote:\n> Wow there's a lot here to think about. I'm pretty sure I haven't\n> grasped the full implications yet.\n> \n> I see it proposes to also introduce additional BIPs describing the\n> use of the data stucture for stateless validation & mining, the UBC\n> address index for \"SPV+\" operating modes, document timestamping and\n> merged mining.\n> \n> Can the BIP stand alone as a BIP without some specific changes to\n> the protocol or end-user accessible features defined within it? It\n> seems like an extremely useful data stucture, but as I understand\n> it the purpose of BIPS is defining interoperability points, not\n> implementation details?\n> \n> Unless the tree itself is becoming part of the protocol, seems like\n> its spec, test vectors, and reference implementation can live\n> elsewhere, but I would love to read about BIPS which use this tree\n> to accomplish some amazing scalability or security benefits.\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJStChCAAoJEAdzVfsmodw42DcQAIlgkukh5K/XYloIiT5pgaHS\nxCZXtOvxpNUep8x35rvEO1ePjvPvUkbUE2jRw2se1rSMkhzw3PpHHtXV/gIOGqUe\nWVKeeIM5pZX56sEcEdUQ1pTwB2rmtSNeyCuHl8fLatk8eLhcAHcpv/7esLuAjWCr\nEE840s8+q3ltuzKi3nqxK84bwIohgSMKhncfonNp5lMAtug8Itqopq3DPDoxwiK/\nqUwSz5UCEMH6oNHnywzhKGUhBErqo4q8IgAKcZYBZZ9n4BRjf4ngoCw9n5wCef8v\ntyTvwrg0nSQTQa67cg7RCsY7SisrI9gaMvCYTSvEMKdw9X0aqAX1p0yZpTbV+dIr\nQ2ZT6gJmg2sD22zKY1/58oq+PiNO+nRS81OG2znZofsIfhOVW0bIZAQ8+zZtFW40\nvXxMuHCNieCK8e7f9A6LLv/Zz7rmNxdQ6cHBEL1nIs1Y4d1FpHJVI2LHi54QmVXf\nC5PKF/e7K2eD3LZMNxS818rZaiJJ7qmpjS3rkG2owHyJHEhBJIlkYXfI1YCraT+b\nR5AzAh2Oz0Nyb5ChP2VSaecJNjGvRMo7Z6HCytmgAGOEcDDZkxSv0kkprbvchqXx\nXziFgA4iSajBKYWPiPLGMADfMPT6zd4fhDjyaN8+LPO3d3ZK1VwmQDLRQ3DxfeIP\nRgchHR/pS77XI7hCFwtN\n=ao17\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-20T13:17:31",
                "message_text_only": "On Fri, Dec 20, 2013 at 03:21:38AM -0800, Mark Friedenbach wrote:\n> Hi Jeremy, Let's give a preview of the application-oriented BIPs I\n> mentioned:\n> \n> Stateless validation and mining involves prefixing transaction and\n> block messages with proofs of their UTxO state changes. These are the\n> \"operational proofs\" I describe in the draft, and they work on prefix\n> trees whose root hashes committed to the coinbase in a soft-fork\n> upgrade of the validation rules.\n> \n> \"Ultimate blockchain compression\" involves consensus over an address\n> index, which can be queried over the p2p network by lightweight nodes.\n> The structure of the index is an authenticated prefix tree, and the\n> results of such a query is an an inclusion proof.\n\nI've thought about this for awhile and come to the conclusion that UTXO\ncommitments are a really bad idea. I myself wanted to see them\nimplemented about a year ago for fidelity bonded banks, but I've changed\nmy mind and I hope you do too.\n\nThey force miners and every full node with SPV clients to store the\nentire UTXO set in perpetuity. This is bad by itself, but then they make\nit even worse by making Bitcoin really useful and convenient to use as a\ndecentralized database; UTXO commitments make it easy and convenient to\nimplement systems like Namecoin on top of Bitcoin, yet we don't have the\nUTXO expiration that might make such uses reasonable. Right now the UTXO\nset is reasonable small - ~300MB - but that can and will change if we\nmake it an attractive way to store data. UTXO commitments do exactly\nthat.\n\nYou're also *not* giving users what they actually want: the transactions\nassociated with their wallets. Even though Electrum could easily work\nvia a pure UTXO database they implemented transaction lookup instead;\nElectrum servers cough up every transaction associated with a user's\nwallet. If you're going to do that, it's just as easy to do per-block\nlookup trees which don't force the UTXO set to be stored.\n\nThere's also a more subtle issue: the security model of UTXO commitments\nsucks. It encourages wallets to essentially trust single confirmations\nbecause it's unlikely that nodes will want to store the multiple copies\nof the UTXO set required to provide proof of multiple confirmations.\nBasically the issue is when you start your wallet you get a proof of\nUTXO set for the most recent block; that's just one confirmation. To get\nmore confirmations you have to wait for subsequent blocks, checking the\nset on each block. Per block indexes on the other hand naturally lead\nwallets to count confirmations properly.\n\n\nIMO you should take this technology to Namecoin instead. For them the\nfast lookups are probably worth the trade-offs, and they expire domains\nso the total set size doesn't grow unbounded.\n\n-- \n'peter'[:-1]@petertodd.org\n00000000000000028fd077fb1e33e942e3e875aa29cec134fed89d650242c577\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 681 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/15a33b11/attachment.sig>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-20T18:41:31",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\n(Sorry Peter, this was meant for the whole list:)\n\nOn 12/20/2013 05:17 AM, Peter Todd wrote:\n> I've thought about this for awhile and come to the conclusion that \n> UTXO commitments are a really bad idea. I myself wanted to see them\n> implemented about a year ago for fidelity bonded banks, but I've\n> changed my mind and I hope you do too.\n> \n> They force miners and every full node with SPV clients to store the\n> entire UTXO set in perpetuity.\n\nThis is incorrect. If the slower proof-updatable hashes are used, then\nmining only requires what I've called \"operational proofs\" to be\nattached to received transactions and blocks.\n\nAccess to the UTXO set is required to make new transactions, at least\nfor the outputs of the transaction, but I do not believe this is as\nsignificant a problem as you do. It is a service that can be\noutsourced for a minimal fee - include an explicit output of the\nnecessary amount to a scriptPubKey specified by the archival node, and\nthey will make sure the proper proofs are attached.\n\n> This is bad by itself, but then they make it even worse by making \n> Bitcoin really useful and convenient to use as a decentralized \n> database; UTXO commitments make it easy and convenient to\n> implement systems like Namecoin on top of Bitcoin, yet we don't\n> have the UTXO expiration that might make such uses reasonable.\n> Right now the UTXO set is reasonable small - ~300MB - but that can\n> and will change if we make it an attractive way to store data.\n> UTXO commitments do exactly that.\n\nYou might have to explain this to me, but it is not clear to me how\nthe validation index could be twisted into providing a Namecoin-like\nsystem. Or the address index either, which I presume is what you are\nreferring to. Namecoin works by assigning domains to outputs, and then\ntracking ownership and configuration of that domain through chains of\noutputs. But the UTXO set doesn't contain connecting information. At\nbest all it would be is a glorified, and expensive time-stamper,\nunattractive because there are already better solutions.\n\n> You're also *not* giving users what they actually want: the \n> transactions associated with their wallets. Even though Electrum \n> could easily work via a pure UTXO database they implemented \n> transaction lookup instead; Electrum servers cough up every \n> transaction associated with a user's wallet. If you're going to do \n> that, it's just as easy to do per-block lookup trees which don't \n> force the UTXO set to be stored.\n\nAt the cost of having the supposedly lightweight client query for each\nof its coins on every single block, to construct a negative\nproof-of-spend.\n\n> There's also a more subtle issue: the security model of UTXO \n> commitments sucks. It encourages wallets to essentially trust \n> single confirmations because it's unlikely that nodes will want to \n> store the multiple copies of the UTXO set required to provide\n> proof of multiple confirmations. Basically the issue is when you\n> start your wallet you get a proof of UTXO set for the most recent\n> block; that's just one confirmation. To get more confirmations you\n> have to wait for subsequent blocks, checking the set on each block.\n> Per block indexes on the other hand naturally lead wallets to\n> count confirmations properly.\n\nI don't think this is true, or at least you are not considering\navailable optimizations. You certainly don't need to store multiple\ncopies of the UTXO set.\n\nI'm a little confused as to the exact situation you are describing.\nWhen a key is loaded into a wallet, or a wallet comes online after a\nsignificant absence, it looks for coins in the current UTXO set. If\nany coins are found, their attached transaction record has a block\nheight field, so the confirmation count can be derived from that. As\nblocks go by that count is naturally increased. I'm not sure how this\nis different from the current situation.\n\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJStI9aAAoJEAdzVfsmodw4IooP/1uK9cvP1vxXyQRbAHf9oFXw\nAmZ8p1+t8f6MHUpjkv/Xn0poFNU8qSnNz65drQdq8ErcJnqe4V3Wt6G32/uCxvZs\n6AX6bRYQIfhHY0DBPgfacO5/ALdlnS4NdjWFCA5hHDgLd30BpbU1WK1ze985TXrd\n+ucQkzcMYEDW2lb+sFvfhpi9ZPFd34ZrNzH//oS794eYKWAmj7jXqdgxk5AKat61\nXileq5beE4xom3pChXc3PtIJKsoil5SjE20/FW52wcCdyaEFG0kwl937pEGjQnlP\nmylK/ilfZ6cvRC8MmVnl/6AC4V2hjB4Ncej03jG3JI2FdaJEOHuHg0uh8/Zl1I4A\nYVIKyrHQhQb/VGsfXtW3zokHzDeEtJwlx+PPFaLc9QurFirNjSnenhbw4Vpbg3Xt\ndH1Qd9xWcT85a19Oz8Q4rt3z7UmX9J/geZrUHCuPtr47yXU0e1Cc6ZP9zDYNtfKU\nq6MjNZiaLJ/Wp0n4IeQ/4/wqy0rM/psP9i5d6IdP96tayVM9aKj5Lh9lU/Od5wGO\n2PPB4kvhJfMbx3o+S7UK5vra7ysZzULpoVGDpUR3xRM72l//vlNhSLK5nILVO3r8\nsIC5+3WoZLUKvuNo45/BDxXHZajrWLCU84WrwHVm1u7SHfBQcoES/rhcx2zlgyx0\n/Iwxsgb7Fznl+eM2bEpZ\n=TtaV\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-20T10:48:26",
                "message_text_only": "On Thu, Dec 19, 2013 at 05:47:52PM -0800, Mark Friedenbach wrote:\n> This BIP describes the authenticated prefix tree and its many\n> variations in terms of its serialized representation. Additional BIPs\n> describe the application of authenticated prefix trees to such\n> applications as committed indices, document time-stamping, and merged\n> mining.\n\nCould you expand more on how prefix trees could be used for\ntime-stamping and merged mining?\n\n\n>     >>> dict = AuthTree()\n>     >>> dict['Curie'] = VARINT(1898)\n>     >>> dict('Einstein') = VARINT(1905)\n>     >>> dict['Fleming'] = VARINT(1928)\n>     >>> dict['\u4e2d\u672c'] = VARINT(2009)\n\nI'd be inclined to leave the unicode out of the code examples as many\neditors and shells still don't copy-and-paste it nicely. Using it in BIP\ndocuments themselves is fine and often has advantages re: typesetting,\nbut using it in crypto examples like this just makes it harder to\nreproduce the results by hand unnecessarily.\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000002d7a0c56ae2c5b2b3322d5017cfef847455d4d86a6bc12280\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/20d08a2b/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2013-12-20T19:48:23",
                "message_text_only": "On Thu, Dec 19, 2013 at 5:47 PM, Mark Friedenbach <mark at monetize.io> wrote:\n> Hello fellow bitcoin developers. Included below is the first draft of\n> a BIP for a new Merkle-compressed data structure. The need for this\n> data structure arose out of the misnamed \"Ultimate blockchain\n> compression\" project, but it has since been recognized to have many\n> other applications.\n\nA couple very early comments\u2014 I shared some of these with you on IRC\nbut I thought I'd post them to make them more likely to not get lost.\n\nWhats a VARCHAR()  A zero terminated string?  A length prefixed\nstring? How is the length encoded?  Hopefully not in a way that has\nredundancy, since things that don't survive a serialization round trip\nis a major trap.\n\nIs the 'middle' the best place for the extradata? Have you\ncontemplated the possibility that some applications might use midstate\ncompression?\n\nOn that general subject, since the structure here pretty much always\nguarantees two compression function invocations. SHA512/256 might\nactually be faster in this application.\n\nRe: using sha256 instead of sha256^2, we need to think carefully about\nthe implications of Merkle-Damgard generic length extension attacks.\nIt would be unfortunately to introduce them here, even though they're\ncurrently mostly theoretical for sha256.\n\nWRT hash function performance, hash functions are so ludicrously fast\n(and will be more so as processors get SHA2 instructions) that the\nperformance of the raw compression function would hardly ever be a\nperformance consideration unless you're using a slow interpreted\nlanguage (... and that sounds like a personal problem to me). So I\ndon't think CPU performance should be a major consideration in this\nBIP.\n\nWhat I do think should be a consideration is the cost of validating\nthe structure under a zero-knowledge proof. An example application is\na blind proof for a SIN or a proof of how much coin you control... or\neven a proof that a block was a correctly validated one, and in these\ncases additional compression function calls are indeed pretty\nexpensive. But they're not the only cost, any conditional logic in the\nhash tree evaluation is expensive, and particular, I think that any\nplace where data from children will be combined with a variable offset\n(especially if its not word aligned) would potentially be rather\nexpensive.\n\nI'm unconvinced about the prefix tree compressed applications, since\nthey break compact update proofs.  If we used them in the Bitcoin\nnetwork they could only be used for data where all verifying nodes had\nall their data under the tree. I think they add a lot of complexity to\nthe BIP (esp from people reading the wrong section), so perhaps they\nshould be split into another document?\n\nIn any case, I want to thank you for talking the time to write this\nup. You've been working on this stuff for a while and I think it will\nbe lead to useful results, even if we don't end up using how it was\noriginally envisioned."
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-20T22:04:23",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nOn 12/20/2013 11:48 AM, Gregory Maxwell wrote:\n> A couple very early comments\u2014 I shared some of these with you on\n> IRC but I thought I'd post them to make them more likely to not get\n> lost.\n\nI got the inputs from IRC, but thank you for posting to the list so\nthat others can see and review.\n\n> Whats a VARCHAR()  A zero terminated string?  A length prefixed \n> string? How is the length encoded?  Hopefully not in a way that\n> has redundancy, since things that don't survive a serialization\n> round trip is a major trap.\n\nA length-prefixed string, using the shortest representation VARINT for\nthe length. Same as how scripts are serialized in transactions.\n\n> Is the 'middle' the best place for the extradata? Have you \n> contemplated the possibility that some applications might use\n> midstate compression?\n\nYes I considered midstate compression which is why the branch hashes\ncome last, but \"extra\" was an oversight. In every application I've\nconsidered it's either not used (and therefore a single byte), or\nupdated whenever the node or its children updates.\n\nHonestly I don't expect midestate compression to offer much since in\nthe nodes that are updated frequently it is unlikely that there will\nbe enough static data at the front to fill even a 512 bit block of the\nsmaller hash function.\n\nBut it doesn't hurt to prepare just in case. I'll move it to the end.\n\n> On that general subject, since the structure here pretty much\n> always guarantees two compression function invocations. SHA512/256\n> might actually be faster in this application.\n\nYes, this is a great suggestion. Moving to SHA-512/256 will let most\ninner nodes fit inside a single block, so long as the \"extra\" field is\nnot too long. Also apparently SHA-512 is faster on 64-bit CPUs, which\nis a nice advantage. I didn't know that.\n\nI'm concerned about speed but I did not go with a faster hash function\nbecause users are more likely to have hardware acceleration for the\nSHA-2 family.\n\n> Re: using sha256 instead of sha256^2, we need to think carefully\n> about the implications of Merkle-Damgard generic length extension\n> attacks. It would be unfortunately to introduce them here, even\n> though they're currently mostly theoretical for sha256.\n\nThe serialization format encodes lengths in such a way that you cannot\nextend the data structure merely by appending bits. You would have to\nchange the prior, already hashed bits as well. I believe this makes it\nimmune to length extension attacks.\n\n> WRT hash function performance, hash functions are so ludicrously\n> fast (and will be more so as processors get SHA2 instructions) that\n> the performance of the raw compression function would hardly ever\n> be a performance consideration unless you're using a slow\n> interpreted language (... and that sounds like a personal problem\n> to me). So I don't think CPU performance should be a major\n> consideration in this BIP.\n\nWell.. the UTXO tree is big. Let's assume 5,000 transactions per\nblock, with an average of 3 inputs/outputs per transaction. This is\nclose to the worst-case scenario with the current block size. That's\n15,000 insert, update, or delete operations.\n\nThe number of hashes required when level-compression is used is log2\nthe number of items in the tree, which for bitcoin is currently about\n2.5 million transactions. So that's about ~21 hashes per input/ouput,\nor 315,000 hash operations. A CPU is able to do about 100,000 hashes\nper second per core, that'll probably take about a second on a modern\n4- or 8-core machine.\n\nFor updatable proofs, the number of hash operations is equal to the\nnumber of bits in the key, which for the validation index is always\n256. That means 3.84 million hashes, or about 10 seconds on a 4-core\nmachine.\n\nThe numbers for the wallet index are worse, as it scales with the\nnumber of outputs, which is necessarily larger, and the keys are longer.\n\nThis is not an insignificant cost in the near term, although it is the\ntype of operation that could be easily offloaded to a GPU or FPGA.\n\n> What I do think should be a consideration is the cost of\n> validating the structure under a zero-knowledge proof. An example\n> application is a blind proof for a SIN or a proof of how much coin\n> you control... or even a proof that a block was a correctly\n> validated one, and in these cases additional compression function\n> calls are indeed pretty expensive. But they're not the only cost,\n> any conditional logic in the hash tree evaluation is expensive, and\n> particular, I think that any place where data from children will be\n> combined with a variable offset (especially if its not word\n> aligned) would potentially be rather expensive.\n\nThis is something I know less about, and I welcome constructive input.\nThere is *no* reason that the hash serialization needs to have fancy\nspace-saving features. You could even make the SIG_HASH node\nserialization into fixed-size, word-aligned data structures.\n\nBut this is absolutely not my field, and I may need some hand-holding.\nDo the fields need to be at fixed offsets? With fixed widths? Should I\nput variable-length stuff like the level-compressed prefixes and value\ndata at the end (midstate be damned) to keep fixed offsets? What's\nexpected word alignment, 32-bit or 64-bit?\n\n> I'm unconvinced about the prefix tree compressed applications,\n> since they break compact update proofs.  If we used them in the\n> Bitcoin network they could only be used for data where all\n> verifying nodes had all their data under the tree. I think they add\n> a lot of complexity to the BIP (esp from people reading the wrong\n> section), so perhaps they should be split into another document?\n\nI believe what you mean by \"compact update proofs\" is what I call\n\"updatable proofs\", where level compression is only used in the disk\nand network serialization. These are what I propose to use for the\nvalidation and wallet indexes, if the computational costs can be\nbrought under control, because it allows composable proofs.\n\nUnlike a time-ordered index, it does require that someone, somewhere\nhas random access to the entire UTXO set since you can't predict in\nadvance what your txid will be. But this is a matter of tradeoffs and\nI don't believe at this time that there is a clearcut advantage of one\napproach over the other. I'm pursuing a txid-indexed UTXO set because\nit most closely matches the current operational model.\n\nThat said, you still want level-compression within the serialization\nformat itself, if for no other reason than to keep proof sizes small.\n\n> In any case, I want to thank you for talking the time to write\n> this up. You've been working on this stuff for a while and I think\n> it will be lead to useful results, even if we don't end up using\n> how it was originally envisioned.\n\nThanks,\nMark\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJStL7nAAoJEAdzVfsmodw4DQcP/ilB2LTPnbK/UoU+y0d/0CUu\n4PVo8VJt0KCUgWbEHIohm0rq4FUpb7FpjzAyQ171jzRykDEkUy7nDh/QsWGUvDvA\ngOHKEsX3E+ei8iQMkwlw5D/Lpbb8GNr3SHrU3lvVbXOoaPua9I16778hv3wBWhiN\nR70N8dQUwWD1IU0Dfmhi8v2P8OTn4OGTEwS5AQANGCroYyALF+U9EDHjWDMV+bYn\n8qrX4v05xjik5YXOv8PNDDp0S9A+KxD72OKL5xlXiE7VbKrYXKt6xNfy1xYgHH8p\nu9kWDFMkbis/HAiB5aiFTmxX5/k+yeJw8BfG+txj0xo7b7cWKB9cQLT8vUru2QuH\nlHdurxkaBQ+6jqlxYRk7nh0h+obeAXA/CGMseaDYluBg7qTkeWnLORfm7T7fUnHw\nfB5sXPUKEeYw48sfs58w/71NbCyl2yYNGlmmugk2SilD3QbUKU1xogNTHEGDuA8M\nkPsWW7vRIdI3iy9adgh3LZAvySt7/a5VXXs1li7teDgV4QqH7e2hR0KR8n115N7f\nr30LSctbc/MovE9VPb8I7ssQTB7So+1Ki6DbVeQO/8UlCSK5prM3n2sICmT/EVW7\n2hNzwbHuEJEWYE7q89buzMRdqbUYSRdG1T1mFBeZ+/n4HH6cweMl6BH4d46LAfuq\nBqzTmq5neoCKBwfMfoqg\n=YmkZ\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-20T12:47:10",
                "message_text_only": "On Fri, Dec 20, 2013 at 03:10:50AM -0800, Mark Friedenbach wrote:\n> On 12/20/2013 02:48 AM, Peter Todd wrote:\n> > On Thu, Dec 19, 2013 at 05:47:52PM -0800, Mark Friedenbach wrote:\n> >> This BIP describes the authenticated prefix tree and its many \n> >> variations in terms of its serialized representation. Additional\n> >> BIPs describe the application of authenticated prefix trees to\n> >> such applications as committed indices, document time-stamping,\n> >> and merged mining.\n> > \n> > Could you expand more on how prefix trees could be used for \n> > time-stamping and merged mining?\n> \n> The root hash of a prefix tree is placed in the coinbase at a location\n> standardized by convention.\n\nRight, last txout in an OP_RETURN like we discussed.\n\n> For document time-stamping, the key can be\n> the hash of the document.\n\nDon't you mean the value is the hash of the document and the key is\nirrelevant?\n\n> For merged mining, the key is the hash of\n> the genesis block of the altchain, and the value is the hash of the\n> aux-pow (for p2pool, the share hash).\n\nWhat's the advantage over the direction-based system I proposed before?\nSeems to me the code required to validate the proof is significantly\nmore complex in your scheme.\n\nhttp://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03149.html\n\n> In the system I have in mind this adds 43 bytes to the coinbase\n> transaction,\n\nBy 43 bytes you mean the whole op_return txout right?\n\n> >>>>> dict = AuthTree() dict['Curie'] = VARINT(1898) \n> >>>>> dict('Einstein') = VARINT(1905) dict['Fleming'] =\n> >>>>> VARINT(1928) dict['\u4e2d\u672c'] = VARINT(2009)\n> > \n> > I'd be inclined to leave the unicode out of the code examples as\n> > many editors and shells still don't copy-and-paste it nicely. Using\n> > it in BIP documents themselves is fine and often has advantages re:\n> > typesetting, but using it in crypto examples like this just makes\n> > it harder to reproduce the results by hand unnecessarily.\n> \n> Thanks for the feedback, I rather agree. When I was creating that\n> example for some reason I wanted the right branch of the root node to\n> be used, which is difficult when only 7-bit ASCII keys are used. But I\n> don't think the illustrative point I had in mind ended up being\n> particularly relevant, so I'll rework it.\n\nThat example is python, so I'd suggest just using escape sequences\nmyself. You probably also should include the \"b\" prefix to make the\nstrings explicitly binary for py3 compatibility, ie dict[b'\\xbe\\xef']\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000216e3750a9ad9584395352d728a3c543844eab3bfc9ce1073\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/267c3c6c/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "BIP proposal: Authenticated prefix trees",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeremy Spilman",
                "Gregory Maxwell",
                "Peter Todd",
                "Mark Friedenbach"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 49631
        }
    },
    {
        "title": "[Bitcoin-development] bitcoin-qt",
        "thread_messages": [
            {
                "author": "Chris Evans",
                "date": "2013-12-20T07:49:18",
                "message_text_only": "maybe make it so bitcoin.conf settings can be edited with in the app\ninstead of external editor,  and make it easier to enable rpc server mode...\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131219/028182b9/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-20T07:54:31",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nJSON-RPC is a huge security risk. It's perfectly reasonable that\nenabling it requires some technical mumbo-jumbo.\n\nAre there specific configuration settings that you would like to see\nexposed by the GUI?\n\n\nOn 12/19/2013 11:49 PM, Chris Evans wrote:\n> maybe make it so bitcoin.conf settings can be edited with in the\n> app instead of external editor,  and make it easier to enable rpc\n> server mode...\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSs/e3AAoJEAdzVfsmodw4mEkP/3XdrWMoly5t2ALN/YAj1QCv\nnviQfzcv7vQKEO1ZnLMmyo1npIMRf5UqZCD6kfWS7g4vtEHjP2KNQXdwcNkDPbdL\n7BjHGHghoGfjPosTz2HV8I79g+6o+f9KCYxUz56dRVs1eNjF/QAMKbHY5M2QD7UZ\n3BVxdEGD2UkIN89dUSq+Ljrt+ugPlOYFiehrLhOSqYTLtoG2von7JQR8q6HRKmzC\nhWSuT20aV66VL03ps5Dt/c8NVr0p0nNYRVY1vPzkcjN+1UpMBUvgn8E2d5XrchD+\nuqTeWCMv2bhmFTr0qaVQwBY5Et5q6/OBJbWcF02qFq0/hy/SuZPIp/5fZEOuSpns\n/QJRGRyMLtCpRH4iNxlhcZeiQs8MoV02AHYiSN/9Z9yZDEBZkpbKO9Ce6S0GwmEX\niXeloVaIil5dqtr8P9aWXW12jgohGy84oFGwK0Bxrk+HfT04OCSU0lqjRQVFzfdl\n/K0jqgRdrXZz2wQYOO6+GjQvb8CP/7WfRxivKqcKdQT9CrsW+DvgaAkTy3tBJcel\naGrPynsNnDdatXK0Nyhirn/gSvxSW/Z2x2CIaPCq+jw4HrnmJu+j5AXcD8yKo8+c\nFsTap1/TXeFPcDP6B7eUT+nV+hR6qXYLOuHpFwbTvt/8SJ0jAgj9Yhyq8PmL4rok\nmdrqhFHk3i/RMYqGK59Q\n=WCub\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Wladimir",
                "date": "2013-12-20T08:10:03",
                "message_text_only": "On Fri, Dec 20, 2013 at 8:49 AM, Chris Evans <aaxiomfinity at gmail.com> wrote:\n\n> maybe make it so bitcoin.conf settings can be edited with in the app\n> instead of external editor,  and make it easier to enable rpc server mode...\n>\n\nYou can help me and diapolo a lot by testing his pull request to add a few\noptions to the options dialog (and improve the dialog in general),\n\nhttps://github.com/bitcoin/bitcoin/pull/3347\n\nIt doesn't add the RPC settings though. As Mark says, it's dangerous to\nmake it too easy to shoot yourself in the foot.\n\nWladimir\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/732b97c5/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "bitcoin-qt",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Chris Evans",
                "Wladimir",
                "Mark Friedenbach"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2451
        }
    },
    {
        "title": "[Bitcoin-development] Censorship-resistance via timelock crypto for embedded consensus systems",
        "thread_messages": [
            {
                "author": "Peter Todd",
                "date": "2013-12-20T16:54:34",
                "message_text_only": "Embedded consensus systems such as Mastercoin face the risk that the\ndata they need to embed in the host consensus system will be subject to\ncensorship. This censorship can take two forms: whitelists and\nblacklists. The former we can't do anything about, however the latter\nrequires someone to identify the data-carrying transactions that are to\nbe blacklisted.\n\nEmbedding data steganographically in transactions is known to be\npossible in ways that can-not be detected. Even if P2SH^2 (1) is\nimplemented data can be hidden in pubkeys in P2SH scriptSigs, either by\nusing unused pubkeys in CHECKMULTISIG transactions with a simple\ntransform(2) to turn arbitrary data into valid-looking pubkeys, or with\nsome ECC math even usable pubkeys can have data hidden in them.(3)\n\nHowever these methods are unsuitable if the data needs to be provably\nmade public; without the encryption key the data is securely hidden.\nAlmost all consensus systems rely on proof-of-publication(4) and even if\nthe encryption keys are later made public - perhaps by broadcasting them\non a P2P network - we've only shifted the problem to proving that the\nkeys were released. Of course, if we then publish them via our host\nconsensus system, *that* act of publishing can itself be censored!\n\nTimelock cryptography offers a solution to this problem. Let S(n, k) be\na sequential-hard strengthening function that takes key k and number of\nrounds n, outputting k'. A suitable S() might be the scrypt function.\nLet E(d, k) be a symmetric encryption algorithm. Finally let H(m) be a\ncryptographic hash function.\n\nTo hide data D in a transaction we set k to some random and publicly\nknown value in the transaction and compute k'=S(n, k) and D'=E(D, k')\nThen D' is hidden in the transaction, perhaps in an unused pubkey of a\nCHECKMULTISIG scriptPubKey.\n\nOur intended audience can also calculate k' from the public data, and\nthus recover D in time ~t, thus we know that after time ~t has elapsed\nall participants in the system can reliably come to consensus.\n\nHowever miners and other parties who may wish to censor D face a\ndilemma: If they repeat the calculation for every transaction that may\nbe hiding data they delay all transactions for all users. In addition\nminers have a financial incentive to defect and mine transactions\nwithout checking for hidden data.\n\n\nPractical Considerations\n========================\n\nEfforts should be made to limit the scope of possible transactions as\nmuch as possible to reduce the computation required, e.g. by restricting\nthe search space to only transactions with scriptPubKeys starting with\nsome short prefix. This is a balance between computation and censorship\nresistance.\n\nConsideration needs to be made as to how the data will be validated as\npart of the embedded consensus system, for instance via a checksum or\ncryptographic signature.\n\nParticipates in the embedded consensus system should share k' keys among\neach other to reduce overall effort. This ties back to validation: it\nmust not be possible to distribute a fake k' undetectably.\n\nPicking n, and thus the time taken, is a balance. Also there should be\nsome mechanism to update n as technological improvements warrant. Along\nthose lines this method works best when t can be large and immediate\nconsensus is not required. A suitable use-case could be a key-value\nconsensus system for name information where mappings are infrequently\nchanged.\n\nThe source of k should be such that k' can be computed in advance,\nhowever only by the sender. For instance simply using the first txin\nhash allows the attacker to compute k' in advance themselves. A better\nchoice would be the first (real) pubkey in a scriptPubKey, a value we\ncan both compute in advance, yet is not known publicly.\n\n\nCensorship resistant voting\n===========================\n\nWith due care the scheme can be used to allow for censorship-resistant\nvoting. While previously it was believed that miners would inevitably be\nable to censor any voting scheme - with the exception of certain special\ncases(5) - provided that the financial incentive to collect fees\noutweighs the incentive to not count votes we have strong censorship\nresistance with strong consensus in a fixed amount of time.\n\n\n1) Gregory Maxwell, [Bitcoin-development] To prevent arbitrary data\n   storage in txouts \u2014 The Ultimate Solution,\n   https://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg01987.html\n\n2) Peter Todd, Re: MasterCoin: New Protocol Layer Starting From \u201cThe\n   Exodus Address\u201d,\n   https://bitcointalk.org/index.php?topic=265488.msg3377058#msg3377058\n\n3) ByteCoin, Untraceable transactions which can contain a secure message\n   are inevitable, https://bitcointalk.org/index.php?topic=5965.0\n\n4) Peter Todd, [Bitcoin-development] Disentangling Crypto-Coin Mining:\n   Timestamping, Proof-of-Publication, and Validation,\n   http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03307.html\n\n5) John Dillon, Proposal: We should vote on the blocksize limit with proof-of-stake\n   voting, https://bitcointalk.org/index.php?topic=230864.0\n\n-- \n'peter'[:-1]@petertodd.org\n0000000000000001cdaabe80320d14ab5907997ec6ad12eaaa304941c34fc8bd\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131220/75159ce0/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Censorship-resistance via timelock crypto for embedded consensus systems",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Peter Todd"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 5449
        }
    },
    {
        "title": "[Bitcoin-development] Payment processors that support testnet?",
        "thread_messages": [
            {
                "author": "Troy Benjegerdes",
                "date": "2013-12-20T17:30:00",
                "message_text_only": "Are there any bitcoin to fiat currency processors (like bitpay,\ncoinbase, etc) that allow testing using the bitcoin testnet?\n\nIt seems most of the credit card payment processor apis have \nfeatures to allow developers to do testing without 'real money',\nwhat's the equivalent of this for bitcoin when you need to do\nend-to-end testing that goes from BTC to a USD or EU denominated\nbank accound?"
            }
        ],
        "thread_summary": {
            "title": "Payment processors that support testnet?",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Troy Benjegerdes"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 393
        }
    },
    {
        "title": "[Bitcoin-development] Dual elliptic curve algorithms",
        "thread_messages": [
            {
                "author": "Ron",
                "date": "2013-12-22T21:37:41",
                "message_text_only": "________________________________\n From: \"bitcoin-development-request at lists.sourceforge.net\" <bitcoin-development-request at lists.sourceforge.net>\nTo: bitcoin-development at lists.sourceforge.net \nSent: Friday, December 20, 2013 12:33 PM\nSubject: Bitcoin-development Digest, Vol 31, Issue 37\n \n\nSend Bitcoin-development mailing list submissions to\n\u00a0\u00a0\u00a0 bitcoin-development at lists.sourceforge.net\n\nWhen replying, please edit your Subject line so it is more specific\nthan \"Re: Contents of Bitcoin-development digest...\"\n\nHello all,\n\nIs the dual elliptic curve algorithm mentioned in \nhttp://www.theguardian.com/world/2013/dec/20/nsa-internet-security-rsa-secret-10m-encryption \nfrom 2 days ago, of any concern to Bitcoin? I only ask, since I don't follow the field closely, but I see \nhttp://en.wikipedia.org/wiki/Elliptic_Curve_DSA \n\nIs this a concern for Bitcoin, or is this all \"old news\"?\n\nRon\n_____________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n\nEnd of Bitcoin-development Digest, Vol 31, Issue 37\n***************************************************\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131222/c4d3f9a4/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-22T22:46:00",
                "message_text_only": "It is irrelevant.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131222/95f41066/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Dual elliptic curve algorithms",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Ron"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1569
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin difficulty sanity check suggestion",
        "thread_messages": [
            {
                "author": "Ryan Carboni",
                "date": "2013-12-23T03:10:37",
                "message_text_only": "I think Bitcoin should have a sanity check: after three days if only four\nblocks have been mined, difficulty should be adjusted downwards.\n\nThis might become important in the near future. I project a Bitcoin mining\nbubble.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131222/bedebd25/attachment.html>"
            },
            {
                "author": "Mark Friedenbach",
                "date": "2013-12-23T03:22:46",
                "message_text_only": "-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nRyan, these sort of adjustments introduce security risks. If you were\nisolated from the main chain by a low-hashpower attacker, how would\nyou know? They'd need just three days without you noticing that\nnetwork block generation has stalled - maybe they wait for a long\nweekend - then after that the block rate is normal but completely\ncontrolled by the attacker (and isolated from mainnet).\n\nThere are fast acting alternative difficulty adjustment algorithms\nbeing explored by some alts, such as the 9-block interval, 144-block\nwindow, Parks-McClellan FIR filter used by Freicoin to recover from\njust such a mining bubble. If it were to happen to bitcoin, there\nwould be sophisticated alternative to turn to, and enough time to make\nthe change.\n\nOn 12/22/2013 07:10 PM, Ryan Carboni wrote:\n> I think Bitcoin should have a sanity check: after three days if\n> only four blocks have been mined, difficulty should be adjusted\n> downwards.\n> \n> This might become important in the near future. I project a\n> Bitcoin mining bubble.\n> \n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.14 (GNU/Linux)\nComment: GPGTools - http://gpgtools.org\nComment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n\niQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS\nqMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb\nsnz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc\noGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3\nhDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS\nto6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0\n02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE\nC+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ\n+0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8\nIKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr\nj38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN\nDOTF7jpt0ZmCm7uhG9z7\n=5Q2H\n-----END PGP SIGNATURE-----"
            },
            {
                "author": "Robin Ranjit Singh Chauhan",
                "date": "2013-12-23T20:22:49",
                "message_text_only": "Mark, thank you for a very clear explanation of why this proposal would be\ndangerous.\n\nWhat I have noted in many discussions regarding blockchain security and\nproof-or-work schemes, is there is a wide gulf between those few people who\ncan clearly reason about it, and those who have a lot trouble with it (I\nmostly fall into the later camp).\n\nI wonder if anyone can point to resources who can help \"the rest of us\"\nreason clearly about these types of proposals, prior to bringing them to\nthis list or a senior dev.\n\nIdeally it would illustrate various past proposals, explain why they would\nand wouldnt work, and build up some fundamental concepts, like a \"Newtons\nlaws of blockchain security\" that would help us evaluate such ideas on our\nown.\n\nBlockchain stuff is often counterintuitive.\n\n\n\nOn Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Ryan, these sort of adjustments introduce security risks. If you were\n> isolated from the main chain by a low-hashpower attacker, how would\n> you know? They'd need just three days without you noticing that\n> network block generation has stalled - maybe they wait for a long\n> weekend - then after that the block rate is normal but completely\n> controlled by the attacker (and isolated from mainnet).\n>\n> There are fast acting alternative difficulty adjustment algorithms\n> being explored by some alts, such as the 9-block interval, 144-block\n> window, Parks-McClellan FIR filter used by Freicoin to recover from\n> just such a mining bubble. If it were to happen to bitcoin, there\n> would be sophisticated alternative to turn to, and enough time to make\n> the change.\n>\n> On 12/22/2013 07:10 PM, Ryan Carboni wrote:\n> > I think Bitcoin should have a sanity check: after three days if\n> > only four blocks have been mined, difficulty should be adjusted\n> > downwards.\n> >\n> > This might become important in the near future. I project a\n> > Bitcoin mining bubble.\n> >\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.14 (GNU/Linux)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS\n> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb\n> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc\n> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3\n> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS\n> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0\n> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE\n> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ\n> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8\n> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr\n> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN\n> DOTF7jpt0ZmCm7uhG9z7\n> =5Q2H\n> -----END PGP SIGNATURE-----\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n\n\n\n-- \nRobin R Chauhan\nCEO, Pathway Intelligence Inc\nrobin at pathwayi.com\nOffice: 778-588-6217 Ext. 201\nCell: 604-865-0517\nFax: 778-588-1042\nhttp://pathwayi.com/\n---------------------------------------------------------------------\nThis transmission (including any attachments) may contain confidential\ninformation or constitute non-public information. Any use of this\ninformation by anyone other than the intended recipient is prohibited.\nIf you have received this transmission in error, please immediately\nreply to the sender and delete this information from your system.\nUse, dissemination, distribution, or reproduction of this transmission\nby unintended recipients is not authorized and may be unlawful.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/ad1dac6c/attachment.html>"
            },
            {
                "author": "Ryan Carboni",
                "date": "2013-12-24T01:51:41",
                "message_text_only": "I think you misunderstood my statement. If time > 3 days, and after 4\nblocks have been mined, then difficulty would be reset.\n\nIn theory, one would have to isolate roughly one percent of the Bitcoin\nnetwork's hashing power to do so. Which would indicate an attack by a state\nactor as opposed to anything else. Arguably, the safest way to run Bitcoin\nis through a proprietary dial-up network.\n\n\nOn Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Ryan, these sort of adjustments introduce security risks. If you were\n> isolated from the main chain by a low-hashpower attacker, how would\n> you know? They'd need just three days without you noticing that\n> network block generation has stalled - maybe they wait for a long\n> weekend - then after that the block rate is normal but completely\n> controlled by the attacker (and isolated from mainnet).\n>\n> There are fast acting alternative difficulty adjustment algorithms\n> being explored by some alts, such as the 9-block interval, 144-block\n> window, Parks-McClellan FIR filter used by Freicoin to recover from\n> just such a mining bubble. If it were to happen to bitcoin, there\n> would be sophisticated alternative to turn to, and enough time to make\n> the change.\n>\n> On 12/22/2013 07:10 PM, Ryan Carboni wrote:\n> > I think Bitcoin should have a sanity check: after three days if\n> > only four blocks have been mined, difficulty should be adjusted\n> > downwards.\n> >\n> > This might become important in the near future. I project a\n> > Bitcoin mining bubble.\n> >\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.14 (GNU/Linux)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS\n> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb\n> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc\n> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3\n> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS\n> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0\n> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE\n> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ\n> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8\n> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr\n> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN\n> DOTF7jpt0ZmCm7uhG9z7\n> =5Q2H\n> -----END PGP SIGNATURE-----\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/b341eca6/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-12-24T04:05:48",
                "message_text_only": "Ryan,\n\nWhy do you continue to try to correct people who clearly have put more\nthought into this than you?  Everyone understood you just fine, you just\nseem to have trouble comprehending why your ideas are terrible.\n\n\nOn Mon, Dec 23, 2013 at 7:51 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n\n> I think you misunderstood my statement. If time > 3 days, and after 4\n> blocks have been mined, then difficulty would be reset.\n>\n> In theory, one would have to isolate roughly one percent of the Bitcoin\n> network's hashing power to do so. Which would indicate an attack by a state\n> actor as opposed to anything else. Arguably, the safest way to run Bitcoin\n> is through a proprietary dial-up network.\n>\n>\n> On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io>wrote:\n>\n>> -----BEGIN PGP SIGNED MESSAGE-----\n>> Hash: SHA1\n>>\n>> Ryan, these sort of adjustments introduce security risks. If you were\n>> isolated from the main chain by a low-hashpower attacker, how would\n>> you know? They'd need just three days without you noticing that\n>> network block generation has stalled - maybe they wait for a long\n>> weekend - then after that the block rate is normal but completely\n>> controlled by the attacker (and isolated from mainnet).\n>>\n>> There are fast acting alternative difficulty adjustment algorithms\n>> being explored by some alts, such as the 9-block interval, 144-block\n>> window, Parks-McClellan FIR filter used by Freicoin to recover from\n>> just such a mining bubble. If it were to happen to bitcoin, there\n>> would be sophisticated alternative to turn to, and enough time to make\n>> the change.\n>>\n>> On 12/22/2013 07:10 PM, Ryan Carboni wrote:\n>> > I think Bitcoin should have a sanity check: after three days if\n>> > only four blocks have been mined, difficulty should be adjusted\n>> > downwards.\n>> >\n>> > This might become important in the near future. I project a\n>> > Bitcoin mining bubble.\n>> >\n>> -----BEGIN PGP SIGNATURE-----\n>> Version: GnuPG v1.4.14 (GNU/Linux)\n>> Comment: GPGTools - http://gpgtools.org\n>> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>>\n>> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS\n>> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb\n>> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc\n>> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3\n>> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS\n>> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0\n>> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE\n>> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ\n>> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8\n>> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr\n>> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN\n>> DOTF7jpt0ZmCm7uhG9z7\n>> =5Q2H\n>> -----END PGP SIGNATURE-----\n>>\n>\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/44072dc2/attachment.html>"
            },
            {
                "author": "Ryan Carboni",
                "date": "2013-12-24T07:41:08",
                "message_text_only": "Maybe it's because the arguments being presented are nonsensical and\nirrelevant to the current Bitcoin network topology, composed of a small\nnumber of mining pools, not solo miners? Furthermore I think people would\nrealize that their mining pool has gone \"off the reservation\" so to speak.\n\n\nOn Mon, Dec 23, 2013 at 8:05 PM, Allen Piscitello <\nallen.piscitello at gmail.com> wrote:\n\n> Ryan,\n>\n> Why do you continue to try to correct people who clearly have put more\n> thought into this than you?  Everyone understood you just fine, you just\n> seem to have trouble comprehending why your ideas are terrible.\n>\n>\n> On Mon, Dec 23, 2013 at 7:51 PM, Ryan Carboni <ryan.jc.pc at gmail.com>wrote:\n>\n>> I think you misunderstood my statement. If time > 3 days, and after 4\n>> blocks have been mined, then difficulty would be reset.\n>>\n>> In theory, one would have to isolate roughly one percent of the Bitcoin\n>> network's hashing power to do so. Which would indicate an attack by a state\n>> actor as opposed to anything else. Arguably, the safest way to run Bitcoin\n>> is through a proprietary dial-up network.\n>>\n>>\n>> On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io>wrote:\n>>\n>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>> Hash: SHA1\n>>>\n>>> Ryan, these sort of adjustments introduce security risks. If you were\n>>> isolated from the main chain by a low-hashpower attacker, how would\n>>> you know? They'd need just three days without you noticing that\n>>> network block generation has stalled - maybe they wait for a long\n>>> weekend - then after that the block rate is normal but completely\n>>> controlled by the attacker (and isolated from mainnet).\n>>>\n>>> There are fast acting alternative difficulty adjustment algorithms\n>>> being explored by some alts, such as the 9-block interval, 144-block\n>>> window, Parks-McClellan FIR filter used by Freicoin to recover from\n>>> just such a mining bubble. If it were to happen to bitcoin, there\n>>> would be sophisticated alternative to turn to, and enough time to make\n>>> the change.\n>>>\n>>> On 12/22/2013 07:10 PM, Ryan Carboni wrote:\n>>> > I think Bitcoin should have a sanity check: after three days if\n>>> > only four blocks have been mined, difficulty should be adjusted\n>>> > downwards.\n>>> >\n>>> > This might become important in the near future. I project a\n>>> > Bitcoin mining bubble.\n>>> >\n>>> -----BEGIN PGP SIGNATURE-----\n>>> Version: GnuPG v1.4.14 (GNU/Linux)\n>>> Comment: GPGTools - http://gpgtools.org\n>>> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>>>\n>>> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS\n>>> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb\n>>> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc\n>>> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3\n>>> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS\n>>> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0\n>>> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE\n>>> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ\n>>> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8\n>>> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr\n>>> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN\n>>> DOTF7jpt0ZmCm7uhG9z7\n>>> =5Q2H\n>>> -----END PGP SIGNATURE-----\n>>>\n>>\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Rapidly troubleshoot problems before they affect your business. Most IT\n>> organizations don't have a clear picture of how application performance\n>> affects their revenue. With AppDynamics, you get 100% visibility into your\n>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n>> Pro!\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/6a03de9a/attachment.html>"
            },
            {
                "author": "Gavin Costin",
                "date": "2013-12-24T07:53:09",
                "message_text_only": "Ryan,\n\nMaybe you could test out your ideas somewhere like bitcointalk.org and/or provide some more technical substance before engaging with this forum.\n\nDevelopers tend to prefer dealing with numbers known to be either 1 or 0, not a variable set of possible values depending on non-technical factors ...\n\nGavin\n\n> On 24/12/2013, at 15:42, \"Ryan Carboni\" <ryan.jc.pc at gmail.com> wrote:\n> \n> Maybe it's because the arguments being presented are nonsensical and irrelevant to the current Bitcoin network topology, composed of a small number of mining pools, not solo miners? Furthermore I think people would realize that their mining pool has gone \"off the reservation\" so to speak.\n> \n> \n>> On Mon, Dec 23, 2013 at 8:05 PM, Allen Piscitello <allen.piscitello at gmail.com> wrote:\n>> Ryan,\n>> \n>> Why do you continue to try to correct people who clearly have put more thought into this than you?  Everyone understood you just fine, you just seem to have trouble comprehending why your ideas are terrible.\n>> \n>> \n>>> On Mon, Dec 23, 2013 at 7:51 PM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n>>> I think you misunderstood my statement. If time > 3 days, and after 4 blocks have been mined, then difficulty would be reset.\n>>> \n>>> In theory, one would have to isolate roughly one percent of the Bitcoin network's hashing power to do so. Which would indicate an attack by a state actor as opposed to anything else. Arguably, the safest way to run Bitcoin is through a proprietary dial-up network.\n>>> \n>>> \n>>>> On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach <mark at monetize.io> wrote:\n>>> \n>>>> -----BEGIN PGP SIGNED MESSAGE-----\n>>>> Hash: SHA1\n>>>> \n>>>> Ryan, these sort of adjustments introduce security risks. If you were\n>>>> isolated from the main chain by a low-hashpower attacker, how would\n>>>> you know? They'd need just three days without you noticing that\n>>>> network block generation has stalled - maybe they wait for a long\n>>>> weekend - then after that the block rate is normal but completely\n>>>> controlled by the attacker (and isolated from mainnet).\n>>>> \n>>>> There are fast acting alternative difficulty adjustment algorithms\n>>>> being explored by some alts, such as the 9-block interval, 144-block\n>>>> window, Parks-McClellan FIR filter used by Freicoin to recover from\n>>>> just such a mining bubble. If it were to happen to bitcoin, there\n>>>> would be sophisticated alternative to turn to, and enough time to make\n>>>> the change.\n>>>> \n>>>> On 12/22/2013 07:10 PM, Ryan Carboni wrote:\n>>>> > I think Bitcoin should have a sanity check: after three days if\n>>>> > only four blocks have been mined, difficulty should be adjusted\n>>>> > downwards.\n>>>> >\n>>>> > This might become important in the near future. I project a\n>>>> > Bitcoin mining bubble.\n>>>> >\n>>>> -----BEGIN PGP SIGNATURE-----\n>>>> Version: GnuPG v1.4.14 (GNU/Linux)\n>>>> Comment: GPGTools - http://gpgtools.org\n>>>> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>>>> \n>>>> iQIcBAEBAgAGBQJSt6yGAAoJEAdzVfsmodw4SegQAIJAWW0OgSjediSWq+EpkReS\n>>>> qMvC2Y9dmVHtowYLdJVcgwFWbpU8RhA6ApQ1Ks2XF4t0hFCObYDecG6Nl3OIaLfb\n>>>> snz24v8ymdxYXKNtzHHUP0VBgsaoRghIpkbf7JMUXC22sxPoPOXFt5RevLgJHrvc\n>>>> oGFZSIcEcGgwhwZ745CgFZLwaKuSmg5+wFFcrjIihlHKJOl47Z7rzeqnD6mf2Oi3\n>>>> hDpRuVbuhlGMliYcmhk1E6oV0in2R4Purw1WtoY8C9DxrSP2za7W1oeCkmlFfJZS\n>>>> to6SzRj7nEIl0LFaPGsIdBrRdDHfvu6eP2OecI+GNLEwLY6qE5v5fkh47mcDkrN0\n>>>> 02PmepoX5PRzBqp4sx8WaFKuRbmTRRr3E4i9PGoyzTckkZzq+zFmb1y5fwOy17hE\n>>>> C+nP+DyuaPzjypjdo6V+/oGzUKtuKPtqcB1vurbm+WBl5C1jWosAXv5pR87mdCUJ\n>>>> +0e14wPra5blV6yBVqX7yx+2heDGymPKfHJ8i76Dtix7XVOJWKVY4OpIxO7YrYv8\n>>>> IKcIswoKhZdSDOJLcjm4Qp4hrzgCHAHWx6vN71r5r2T6zaJTOvp98GS04Yy7VGAr\n>>>> j38hojcwvJC1ahER3LV/vC0cqO+fxrvY8Q9rW2cUxCnzxzjjG0+Z/gjW8uh73lXN\n>>>> DOTF7jpt0ZmCm7uhG9z7\n>>>> =5Q2H\n>>>> -----END PGP SIGNATURE-----\n>>> \n>>> \n>>> ------------------------------------------------------------------------------\n>>> Rapidly troubleshoot problems before they affect your business. Most IT\n>>> organizations don't have a clear picture of how application performance\n>>> affects their revenue. With AppDynamics, you get 100% visibility into your\n>>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n>>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>>> _______________________________________________\n>>> Bitcoin-development mailing list\n>>> Bitcoin-development at lists.sourceforge.net\n>>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT \n> organizations don't have a clear picture of how application performance \n> affects their revenue. With AppDynamics, you get 100% visibility into your \n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/569be16b/attachment.html>\n-------------- next part --------------\n------------------------------------------------------------------------------\nRapidly troubleshoot problems before they affect your business. Most IT \norganizations don't have a clear picture of how application performance \naffects their revenue. With AppDynamics, you get 100% visibility into your \nJava,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\nhttp://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n-------------- next part --------------\n_______________________________________________\nBitcoin-development mailing list\nBitcoin-development at lists.sourceforge.net\nhttps://lists.sourceforge.net/lists/listinfo/bitcoin-development"
            },
            {
                "author": "Matt Corallo",
                "date": "2013-12-24T08:34:53",
                "message_text_only": "An attacker with some small hashpower isolates you (as an individual)\nfrom the network by MITMing your network. You just switch the the\nattackers chain as if nothing happened because of the network rule\nthat defines it as OK. Today, you will see that you're behind and warn\nthe user.\n\nWas it really so hard to write a three-sentence paragraph to clarify\nthe attack instead of insulting people? Still, posting ideas here\nwithout spending time to ensure you understand the Bitcoin network\nwell is frowned upon.\n\nMatt\n\nOn 12/23/13 17:51, Ryan Carboni wrote:\n> I think you misunderstood my statement. If time > 3 days, and after\n> 4 blocks have been mined, then difficulty would be reset.\n> \n> In theory, one would have to isolate roughly one percent of the\n> Bitcoin network's hashing power to do so. Which would indicate an\n> attack by a state actor as opposed to anything else. Arguably, the\n> safest way to run Bitcoin is through a proprietary dial-up\n> network.\n> \n> \n> On Sun, Dec 22, 2013 at 7:22 PM, Mark Friedenbach\n> <mark at monetize.io <mailto:mark at monetize.io>> wrote:\n> \n> Ryan, these sort of adjustments introduce security risks. If you\n> were isolated from the main chain by a low-hashpower attacker, how\n> would you know? They'd need just three days without you noticing\n> that network block generation has stalled - maybe they wait for a\n> long weekend - then after that the block rate is normal but\n> completely controlled by the attacker (and isolated from mainnet).\n> \n> There are fast acting alternative difficulty adjustment algorithms \n> being explored by some alts, such as the 9-block interval,\n> 144-block window, Parks-McClellan FIR filter used by Freicoin to\n> recover from just such a mining bubble. If it were to happen to\n> bitcoin, there would be sophisticated alternative to turn to, and\n> enough time to make the change.\n> \n> On 12/22/2013 07:10 PM, Ryan Carboni wrote:\n>> I think Bitcoin should have a sanity check: after three days if \n>> only four blocks have been mined, difficulty should be adjusted \n>> downwards.\n> \n>> This might become important in the near future. I project a \n>> Bitcoin mining bubble.\n> \n> \n> \n> \n> \n> ------------------------------------------------------------------------------\n>\n> \nRapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application\n> performance affects their revenue. With AppDynamics, you get 100%\n> visibility into your Java,.NET, & PHP application. Start your\n> 15-day FREE TRIAL of AppDynamics Pro! \n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>\n> \n> \n> \n> _______________________________________________ Bitcoin-development\n> mailing list Bitcoin-development at lists.sourceforge.net \n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            },
            {
                "author": "Ryan Carboni",
                "date": "2013-12-24T07:37:32",
                "message_text_only": "It does take a state-level actor to apparently disconnect *multiple *miners\nfrom the rest of the network.\n\nHow many Bitcoin miners hash an entire percent or more of the Bitcoin\nnetwork? What you're proposing is an attack at the highest levels of the\ninternet infrastructure.\n\n\nOn Mon, Dec 23, 2013 at 6:02 PM, Mark Friedenbach <mark at monetize.io> wrote:\n\n> -----BEGIN PGP SIGNED MESSAGE-----\n> Hash: SHA1\n>\n> Which would leave you entirely in the hands of your dialup provider.\n> Or the manufacturer of your switch. Or your ISP's backbone provider.\n> It does not take a state-level actor to do network attacks.\n>\n> BTW, what does \"difficulty would be reset\" mean? There are multiple\n> ways to interpret that statement. In the most straightforward way, my\n> objections apply.\n>\n> On 12/23/2013 05:51 PM, Ryan Carboni wrote:\n> > I think you misunderstood my statement. If time > 3 days, and after\n> > 4 blocks have been mined, then difficulty would be reset.\n> >\n> > In theory, one would have to isolate roughly one percent of the\n> > Bitcoin network's hashing power to do so. Which would indicate an\n> > attack by a state actor as opposed to anything else. Arguably, the\n> > safest way to run Bitcoin is through a proprietary dial-up\n> > network.\n> >\n> -----BEGIN PGP SIGNATURE-----\n> Version: GnuPG v1.4.14 (GNU/Linux)\n> Comment: GPGTools - http://gpgtools.org\n> Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/\n>\n> iQIcBAEBAgAGBQJSuOs3AAoJEAdzVfsmodw4BwAP/0Ynq/SxNIBFFdL7RaSiE5KM\n> zNRtlZJCYvmCXgKKtMyO+Ron+YGqY8yg8r0ifb6oqlJCG5t0msExym/CA9CYMV6V\n> UnVaGaNkFrLSF1q8Dt6X4I9OSeCiBstahQOjPaerUycLTY2W/cKPblhCC0rvXrfI\n> 3Fz3p6SHbCcNHw89w6ry3QG420+UNroFCpNu+Oa2YfWoZY2p91JLbuiUwXL5KEac\n> PDskHGsb9q1vyAkCJ6eOp3MJfFP/Dy7mASVwPql/nzf2ceSDtO4dpngo0uNsCwFo\n> QSWIRdWv4OiJk1OM6fjEj/51mebczgO0ShczRKk9QkX4FEFEqP/ARdbl8bSC4IsT\n> /3s2HHiYDahEOMiXV5ao3kmBpyUR8p4erRbtwRzdZzOgGL37yxj8VGmY93bkVQNB\n> zi2n3WCCju0a+gqREyaEFAM8kPIhx9++YNIddwQxK38njUSe2CzqM8t+28ZfseYl\n> YnQeNFUfcmvzhxTXxgyoCuGF5HbFRTn/AallkYSPxYtxGq4WuLN36BS3cTv8wCLz\n> sYTyuxWxjZ7CS8fx8MWilw72tQf9torwmrWJtjgRLFE3OvQxRjN+ppDV8cfC8UAB\n> p0CGzBgVaw5yZ5LzCawQVTGWJdzs+ZPlQu8SO53dHhEtRAmdbFa0mMD2FrS/5Ih/\n> YcwdP6Xm69HTgzCenu5F\n> =HtRS\n> -----END PGP SIGNATURE-----\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131223/19bb077d/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin difficulty sanity check suggestion",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Robin Ranjit Singh Chauhan",
                "Ryan Carboni",
                "Gavin Costin",
                "Matt Corallo",
                "Mark Friedenbach",
                "Allen Piscitello"
            ],
            "messages_count": 9,
            "total_messages_chars_count": 29122
        }
    },
    {
        "title": "[Bitcoin-development] Peer Discovery and Overlay",
        "thread_messages": [
            {
                "author": "Jeremy Spilman",
                "date": "2013-12-24T08:52:46",
                "message_text_only": "Some really nice efforts out there to map and analyze the bitcoin P2P  \nnetwork.\n\nThe current protocol apparently recommends returning up to 2500 addresses  \n from 'getaddr'. I'm not sure how much clients are expected to probe the  \naddress space in order to select 'far-apart' peers, or how much such an  \nprocess would even attempt to achieve.\n\nHow much does it matter if the ability to discover the entire network of  \npeers is fast or slow? There are probably pros and cons to both.\n\nIs there any thought to how existing bitcoin node relations, and the ease  \nat which peers can be discovered, becomes a service in itself, or even  \npossibly a vulnerability?\n\nAre there any past instances of applications hijacking or interfacing with  \nthe exiting p2p messages, or abusing 'getaddr' functionality? Are there  \nany guidelines on this, or should there be?"
            },
            {
                "author": "Tier Nolan",
                "date": "2013-12-24T10:47:26",
                "message_text_only": "On Tue, Dec 24, 2013 at 8:52 AM, Jeremy Spilman <jeremy at taplink.co> wrote:\n\n> Are there any past instances of applications hijacking or interfacing with\n> the exiting p2p messages, or abusing 'getaddr' functionality? Are there\n> any guidelines on this, or should there be?\n>\n>\nThere was a BIP by Stefan Thomas for adding custom services to the\nprotocol.  Discovery would be helpful here too.  If this was added, it\nwouldn't be intended for use in a hostile way though.\n\nThis one was the custom services BIP.  It defines a change to the version\nmessage and also custom sub-commands.\nhttps://github.com/bitcoin/bips/blob/master/bip-0036.mediawiki\n\nThis one discusses how network discovery should be handles.\nhttps://en.bitcoin.it/wiki/User:Justmoon/BIP_Draft:_Custom_Service_Discovery\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/b35e78a0/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-24T14:02:28",
                "message_text_only": "On Tue, Dec 24, 2013 at 12:52:46AM -0800, Jeremy Spilman wrote:\n> Some really nice efforts out there to map and analyze the bitcoin P2P  \n> network.\n> \n> The current protocol apparently recommends returning up to 2500 addresses  \n>  from 'getaddr'. I'm not sure how much clients are expected to probe the  \n> address space in order to select 'far-apart' peers, or how much such an  \n> process would even attempt to achieve.\n\nThe logic is that by simply connecting to peers at random you keep the\nnetwork structure as a whole randomized. You don't need to make any\nspecific attempt at connecting to \"far-apart\" peers.\n\n> How much does it matter if the ability to discover the entire network of  \n> peers is fast or slow? There are probably pros and cons to both.\n> \n> Is there any thought to how existing bitcoin node relations, and the ease  \n> at which peers can be discovered, becomes a service in itself, or even  \n> possibly a vulnerability?\n\nKeep in mind it's easy for better knowledge of the network to be a\nvulnerability; the number of full nodes is small enough that DoS\nattacking all of them is quite feasible.\n\nThe other big vulnerability is that getaddr data is best effort; we\ncurrently have no mechanism to ensure that nodes are in fact operated by\nseparate individuals. It'd be quite easy for someone to set up a\nrelatively small number of nodes that only advertise themselves in the\ngetaddr information. Over time they would get proportionally more\nincoming connections than is \"fair\"\n\nAs for node addresses being a service, that's what the DNS seeds are!\nbitcoinj clients, for instance, depend very heavily on those seeds and\ncan be easily compromised in a variety of ways by them.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000092a315c01cfc115d7f1b40dc44edbafd504b0d7498b0704a\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 685 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/318e9c4e/attachment.sig>"
            },
            {
                "author": "Warren Togami Jr.",
                "date": "2013-12-24T17:11:10",
                "message_text_only": "I was concerned about this issue so we sponsored BlueMatt to implement an\naddress database for bitcoinj.  In the future it won't be entirely reliant\non what DNS tells it.\n\nWarren\n\nOn Tue, Dec 24, 2013 at 6:02 AM, Peter Todd <pete at petertodd.org> wrote:\n\n> As for node addresses being a service, that's what the DNS seeds are!\n> bitcoinj clients, for instance, depend very heavily on those seeds and\n> can be easily compromised in a variety of ways by them.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/cb906ddb/attachment.html>"
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-24T17:15:00",
                "message_text_only": "Thanks Warren! That's great. It's also a prerequisite for chain pruning, so\nit's not only about decentralisation but also scalability.\n\nLooking forward to reviewing and merging that.\n\n\nOn Tue, Dec 24, 2013 at 6:11 PM, Warren Togami Jr. <wtogami at gmail.com>wrote:\n\n> I was concerned about this issue so we sponsored BlueMatt to implement an\n> address database for bitcoinj.  In the future it won't be entirely reliant\n> on what DNS tells it.\n>\n> Warren\n>\n>\n> On Tue, Dec 24, 2013 at 6:02 AM, Peter Todd <pete at petertodd.org> wrote:\n>\n>> As for node addresses being a service, that's what the DNS seeds are!\n>>  bitcoinj clients, for instance, depend very heavily on those seeds and\n>> can be easily compromised in a variety of ways by them.\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/92e6e132/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Peer Discovery and Overlay",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Warren Togami Jr.",
                "Mike Hearn",
                "Peter Todd",
                "Tier Nolan",
                "Jeremy Spilman"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 6143
        }
    },
    {
        "title": "[Bitcoin-development] Bitcoin-development Digest, Vol 31, Issue 41",
        "thread_messages": [
            {
                "author": "Ryan Carboni",
                "date": "2013-12-25T06:53:54",
                "message_text_only": "You just completely ignored my point. I'm not sure who's trying to insult\nwhom, or if you're attempting an argumentum ad hominem. My idea is\ncompletely valid.\n\nThe only way to man in the middle to have such a large percentage of hash\npower is to either a) attack a pool (which people would notice when their\nwithdrawals go nowhere), b) attack a large number of nodes, which must have\nenough combined hash power to mine four blocks within three days for people\nto notice (I think it is unlikely for Bitcoin point of sale nodes to have\nsignificant hash power), or c) the attacker himself has 1% of the hash\npower and is diverting it to conduct a man in the middle attack against one\nsingle person (as opposed to a major retailer who has a round the clock IT\nstaff). In order for a large number of nodes to be attacked, it must be by\nsomeone who either is a state actor or an ISP, at which point you've\nalready lost.\n\nIt's really simple math, it require on even the most optimistic estimates a\ntenth of a percent of the total network hash power to mine 4 blocks within\nthree days with good luck. Or maybe this single person is on vacation, then\nit would take a hundredth of a percent of the total hash power over two\nweeks. I think very few people even have a hundredth of a percent of the\ntotal hash power, which goes to show how secure the network is, and how\nlittle my proposal would weaken network security. I'll concede that\ndifficulty could be reduced only by 80% if only four blocks were mined in 3\ndays, which would provide sufficient margin against these proposed man in\nthe middle attacks, because block-chain growth would be noticeably reduced.\n\nBut I repeat myself. Repeatedly. I wish you would understand my points. I'm\nmaking a good faith effort to provide an original idea before it's possibly\ntoo late. But fine. I have nothing more to add, and it's the holidays.\n\n\nOn Tue, Dec 24, 2013 at 2:47 AM, <\nbitcoin-development-request at lists.sourceforge.net> wrote:\n\n> An attacker with some small hashpower isolates you (as an individual)\n> from the network by MITMing your network. You just switch the the\n> attackers chain as if nothing happened because of the network rule\n> that defines it as OK. Today, you will see that you're behind and warn\n> the user.\n>\n> Was it really so hard to write a three-sentence paragraph to clarify\n> the attack instead of insulting people? Still, posting ideas here\n> without spending time to ensure you understand the Bitcoin network\n> well is frowned upon.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131224/e30ee1d4/attachment.html>"
            },
            {
                "author": "Allen Piscitello",
                "date": "2013-12-25T20:21:36",
                "message_text_only": "No, you don't get it, and it's been explained clearly to you twice.  Take\nit to bitcointalk, this does not belong on this list.  Your cure is worse\nthan the disease.\n\n\nOn Wed, Dec 25, 2013 at 12:53 AM, Ryan Carboni <ryan.jc.pc at gmail.com> wrote:\n\n> You just completely ignored my point. I'm not sure who's trying to insult\n> whom, or if you're attempting an argumentum ad hominem. My idea is\n> completely valid.\n>\n> The only way to man in the middle to have such a large percentage of hash\n> power is to either a) attack a pool (which people would notice when their\n> withdrawals go nowhere), b) attack a large number of nodes, which must have\n> enough combined hash power to mine four blocks within three days for people\n> to notice (I think it is unlikely for Bitcoin point of sale nodes to have\n> significant hash power), or c) the attacker himself has 1% of the hash\n> power and is diverting it to conduct a man in the middle attack against one\n> single person (as opposed to a major retailer who has a round the clock IT\n> staff). In order for a large number of nodes to be attacked, it must be by\n> someone who either is a state actor or an ISP, at which point you've\n> already lost.\n>\n> It's really simple math, it require on even the most optimistic estimates\n> a tenth of a percent of the total network hash power to mine 4 blocks\n> within three days with good luck. Or maybe this single person is on\n> vacation, then it would take a hundredth of a percent of the total hash\n> power over two weeks. I think very few people even have a hundredth of a\n> percent of the total hash power, which goes to show how secure the network\n> is, and how little my proposal would weaken network security. I'll concede\n> that difficulty could be reduced only by 80% if only four blocks were mined\n> in 3 days, which would provide sufficient margin against these proposed man\n> in the middle attacks, because block-chain growth would be noticeably\n> reduced.\n>\n> But I repeat myself. Repeatedly. I wish you would understand my points.\n> I'm making a good faith effort to provide an original idea before it's\n> possibly too late. But fine. I have nothing more to add, and it's the\n> holidays.\n>\n>\n> On Tue, Dec 24, 2013 at 2:47 AM, <\n> bitcoin-development-request at lists.sourceforge.net> wrote:\n>\n>> An attacker with some small hashpower isolates you (as an individual)\n>> from the network by MITMing your network. You just switch the the\n>> attackers chain as if nothing happened because of the network rule\n>> that defines it as OK. Today, you will see that you're behind and warn\n>> the user.\n>>\n>> Was it really so hard to write a three-sentence paragraph to clarify\n>> the attack instead of insulting people? Still, posting ideas here\n>> without spending time to ensure you understand the Bitcoin network\n>> well is frowned upon.\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131225/29006e75/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Bitcoin-development Digest, Vol 31, Issue 41",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Allen Piscitello",
                "Ryan Carboni"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 6378
        }
    },
    {
        "title": "[Bitcoin-development] [RFC] Proposal: Base58 encoded HD Wallet master seed with optional encryption",
        "thread_messages": [
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-12-26T11:48:12",
                "message_text_only": "Merry Christmas everyone!\n\nI've updated the proposal.\n\nI've changed the checksum to be a double SHA256 of the private key instead of the public address string and I've added support for 3rd party KDF computation.\n\nThe full proposal with updated test vectors lives here:\n\nhttps://bitcointalk.org/index.php?topic=258678\n\nCheers,\n\nJean-Paul\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131226/59f93b93/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131226/59f93b93/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Proposal: Base58 encoded HD Wallet master seed with optional encryption",
            "categories": [
                "Bitcoin-development",
                "RFC"
            ],
            "authors": [
                "Jean-Paul Kogelman"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 821
        }
    },
    {
        "title": "[Bitcoin-development] Testnet block explorer",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-12-27T18:05:12",
                "message_text_only": "For a long time the only block explorer for testnet has been the original\nblockexplorer.com, which is unfortunately often broken / behind / slow and\nnot really maintained any more.\n\nThere is now a new one, here:\n\nhttps://www.biteasy.com/testnet/blocks\n\nThere's also a REST/JSON API for it.\n\nPlease note one curiosity of this block explorer is that the coinbase tx\ndoesn't necessarily come first in the listing (it's sorted by \"time\nreceived\", see).\n\nOther interesting thing to note: this site is built using bitcoinj. The\nauthor can be contacted on IRC sometimes using the nick damethos.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/2e246894/attachment.html>"
            },
            {
                "author": "Mike Belshe",
                "date": "2013-12-27T18:08:01",
                "message_text_only": "Great!\n\nThere is another one at http://testnet.btclook.com/ which provides a\ndifferent view as well.\n\nMike\n\n\n\nOn Fri, Dec 27, 2013 at 10:05 AM, Mike Hearn <mike at plan99.net> wrote:\n\n> For a long time the only block explorer for testnet has been the original\n> blockexplorer.com, which is unfortunately often broken / behind / slow\n> and not really maintained any more.\n>\n> There is now a new one, here:\n>\n> https://www.biteasy.com/testnet/blocks\n>\n> There's also a REST/JSON API for it.\n>\n> Please note one curiosity of this block explorer is that the coinbase tx\n> doesn't necessarily come first in the listing (it's sorted by \"time\n> received\", see).\n>\n> Other interesting thing to note: this site is built using bitcoinj. The\n> author can be contacted on IRC sometimes using the nick damethos.\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/4b8330f0/attachment.html>"
            },
            {
                "author": "Melvin Carvalho",
                "date": "2013-12-27T19:23:58",
                "message_text_only": "On 27 December 2013 19:08, Mike Belshe <mike at belshe.com> wrote:\n\n> Great!\n>\n> There is another one at http://testnet.btclook.com/ which provides a\n> different view as well.\n>\n\nAnd another at:\n\nhttp://test.webbtc.com/<http://test.webbtc.com/address/myTPjxggahXyAzuMcYp5JTkbybANyLsYBW>\n\nTestnet does not currently fully function with for creating transactions:\n\nhttp://test.webbtc.com/<http://test.webbtc.com/address/myTPjxggahXyAzuMcYp5JTkbybANyLsYBW>\n\nBecause there's no \"unspent\" API for getting the unspent values for an\naddress.  If there existed a testnet explorer which would send out those\nvalues (as blockchain.info does with the main net), that would be awesome.\n\nI'm also working on a testnet explorer with semantic web markup so that\nit's both human and machine readable.\n\n\n>\n> Mike\n>\n>\n>\n> On Fri, Dec 27, 2013 at 10:05 AM, Mike Hearn <mike at plan99.net> wrote:\n>\n>> For a long time the only block explorer for testnet has been the original\n>> blockexplorer.com, which is unfortunately often broken / behind / slow\n>> and not really maintained any more.\n>>\n>> There is now a new one, here:\n>>\n>> https://www.biteasy.com/testnet/blocks\n>>\n>> There's also a REST/JSON API for it.\n>>\n>> Please note one curiosity of this block explorer is that the coinbase tx\n>> doesn't necessarily come first in the listing (it's sorted by \"time\n>> received\", see).\n>>\n>> Other interesting thing to note: this site is built using bitcoinj. The\n>> author can be contacted on IRC sometimes using the nick damethos.\n>>\n>>\n>> ------------------------------------------------------------------------------\n>> Rapidly troubleshoot problems before they affect your business. Most IT\n>> organizations don't have a clear picture of how application performance\n>> affects their revenue. With AppDynamics, you get 100% visibility into your\n>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n>> Pro!\n>>\n>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>>\n>>\n>\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/ec348462/attachment.html>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2013-12-27T21:36:29",
                "message_text_only": "I've built a shell around the bitcoind JSON-RPC, along with a websockets server that provides realtime transaction and block feeds which can be used with bitcoin mainnet and testnet as well as any of the alt chains and formats it similar to blockchain.info with the bootstrap look-and-feel, i.e. http://altcoins.ws/dogecoin/\n\nA goal of this project was simplicity in deployment to a new server.\n\nThe JSON-RPC is missing address indexing and an \"unspent\" API, so these things are still missing from this shell.\n\n-Eric\n\nOn Dec 27, 2013, at 11:23 AM, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n\n> \n> \n> \n> On 27 December 2013 19:08, Mike Belshe <mike at belshe.com> wrote:\n> Great!\n> \n> There is another one at http://testnet.btclook.com/ which provides a different view as well.\n> \n> And another at:\n> \n> http://test.webbtc.com/\n> \n> Testnet does not currently fully function with for creating transactions:\n> \n> http://test.webbtc.com/\n> \n> Because there's no \"unspent\" API for getting the unspent values for an address.  If there existed a testnet explorer which would send out those values (as blockchain.info does with the main net), that would be awesome.\n> \n> I'm also working on a testnet explorer with semantic web markup so that it's both human and machine readable.\n>  \n> \n> Mike\n> \n> \n> \n> On Fri, Dec 27, 2013 at 10:05 AM, Mike Hearn <mike at plan99.net> wrote:\n> For a long time the only block explorer for testnet has been the original blockexplorer.com, which is unfortunately often broken / behind / slow and not really maintained any more.\n> \n> There is now a new one, here:\n> \n> https://www.biteasy.com/testnet/blocks\n> \n> There's also a REST/JSON API for it.\n> \n> Please note one curiosity of this block explorer is that the coinbase tx doesn't necessarily come first in the listing (it's sorted by \"time received\", see).\n> \n> Other interesting thing to note: this site is built using bitcoinj. The author can be contacted on IRC sometimes using the nick damethos.\n> \n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> \n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n> \n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT \n> organizations don't have a clear picture of how application performance \n> affects their revenue. With AppDynamics, you get 100% visibility into your \n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk_______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/d5aa048c/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/d5aa048c/attachment.sig>"
            },
            {
                "author": "Eric Lombrozo",
                "date": "2013-12-27T21:48:06",
                "message_text_only": "I'll add testnet to it as well - sorry, Ben, for lifting the css (I'm a programmer, not a graphic designer) - if anyone would like to help me make the styling original, I would be more than happy to collaborate.\n\n-Eric\n\nOn Dec 27, 2013, at 1:36 PM, Eric Lombrozo <elombrozo at gmail.com> wrote:\n\n> I've built a shell around the bitcoind JSON-RPC, along with a websockets server that provides realtime transaction and block feeds which can be used with bitcoin mainnet and testnet as well as any of the alt chains and formats it similar to blockchain.info with the bootstrap look-and-feel, i.e. http://altcoins.ws/dogecoin/\n> \n> A goal of this project was simplicity in deployment to a new server.\n> \n> The JSON-RPC is missing address indexing and an \"unspent\" API, so these things are still missing from this shell.\n> \n> -Eric\n> \n> On Dec 27, 2013, at 11:23 AM, Melvin Carvalho <melvincarvalho at gmail.com> wrote:\n> \n>> \n>> \n>> \n>> On 27 December 2013 19:08, Mike Belshe <mike at belshe.com> wrote:\n>> Great!\n>> \n>> There is another one at http://testnet.btclook.com/ which provides a different view as well.\n>> \n>> And another at:\n>> \n>> http://test.webbtc.com/\n>> \n>> Testnet does not currently fully function with for creating transactions:\n>> \n>> http://test.webbtc.com/\n>> \n>> Because there's no \"unspent\" API for getting the unspent values for an address.  If there existed a testnet explorer which would send out those values (as blockchain.info does with the main net), that would be awesome.\n>> \n>> I'm also working on a testnet explorer with semantic web markup so that it's both human and machine readable.\n>>  \n>> \n>> Mike\n>> \n>> \n>> \n>> On Fri, Dec 27, 2013 at 10:05 AM, Mike Hearn <mike at plan99.net> wrote:\n>> For a long time the only block explorer for testnet has been the original blockexplorer.com, which is unfortunately often broken / behind / slow and not really maintained any more.\n>> \n>> There is now a new one, here:\n>> \n>> https://www.biteasy.com/testnet/blocks\n>> \n>> There's also a REST/JSON API for it.\n>> \n>> Please note one curiosity of this block explorer is that the coinbase tx doesn't necessarily come first in the listing (it's sorted by \"time received\", see).\n>> \n>> Other interesting thing to note: this site is built using bitcoinj. The author can be contacted on IRC sometimes using the nick damethos.\n>> \n>> ------------------------------------------------------------------------------\n>> Rapidly troubleshoot problems before they affect your business. Most IT\n>> organizations don't have a clear picture of how application performance\n>> affects their revenue. With AppDynamics, you get 100% visibility into your\n>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Rapidly troubleshoot problems before they affect your business. Most IT\n>> organizations don't have a clear picture of how application performance\n>> affects their revenue. With AppDynamics, you get 100% visibility into your\n>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>> _______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>> \n>> \n>> ------------------------------------------------------------------------------\n>> Rapidly troubleshoot problems before they affect your business. Most IT \n>> organizations don't have a clear picture of how application performance \n>> affects their revenue. With AppDynamics, you get 100% visibility into your \n>> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics Pro!\n>> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk_______________________________________________\n>> Bitcoin-development mailing list\n>> Bitcoin-development at lists.sourceforge.net\n>> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n> \n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/b8b65d3b/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 801 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131227/b8b65d3b/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "Testnet block explorer",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Melvin Carvalho",
                "Eric Lombrozo",
                "Mike Hearn",
                "Mike Belshe"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 14846
        }
    },
    {
        "title": "[Bitcoin-development] Access to Mempool",
        "thread_messages": [
            {
                "author": "Jeremy Spilman",
                "date": "2013-12-28T07:29:52",
                "message_text_only": "I was reading there are some commands to access a peer's mempool state.  \nThe purpose being to allow miners to recover faster after a reboot, I  \nthink?\n\nReading peer mempool definitely allows recovering faster after a reboot.  \nSo does persisting mempool in a database locally. But what can you learn  \nabout a node from its mempool? Basically, are there distinguishing  \nfeatures in the mempool, or could there be?\n\nAre there transactions you can receive which go into your own mempool but  \nwhich you don't forward? How about 'nLockTime' transactions?\n\nIs this new feature off by default? Which clients support it?\n\nBy the way, are there recommended places to go to compare features  \nimplemented by different wallet software?\n\nSorry, so many questions..."
            },
            {
                "author": "Mike Hearn",
                "date": "2013-12-28T14:46:05",
                "message_text_only": ">\n> I was reading there are some commands to access a peer's mempool state.\n> The purpose being to allow miners to recover faster after a reboot, I\n> think?\n>\n\nThe \"mempool\" command allows nodes to request the contents of a peers\nmemory pool, yes.\n\nIt is currently used by SPV clients to find transactions that were\nbroadcast before they were started up (but not yet confirmed).\n\n\n> Reading peer mempool definitely allows recovering faster after a reboot.\n> So does persisting mempool in a database locally.\n\n\n0.9 has code to save the mempool to disk.\n\n\n> But what can you learn about a node from its mempool? Basically, are there\n> distinguishing\n> features in the mempool, or could there be?\n>\n\nEr, you mean, distinguishing features beyond the nodes IP address?\n\nThe contents of the mempool may vary depending on when the node was started\nand what it saw at what times. I guess it's distinguishing in a way, but\nnot in any important way. Nodes are not intended to be completely\nindistinguishable, just indistinguishable enough that it doesn't matter\nwhich you connect to.\n\n\n> Are there transactions you can receive which go into your own mempool but\n> which you don't forward?\n\n\nI don't think so, unless there are quirks to do with sendrawtransaction\nRPCs or strangely crafted wallet spends. Normally if a tx is in the mempool\nit will be relayed.\n\n\n> By the way, are there recommended places to go to compare features\n> implemented by different wallet software?\n>\n\nI don't know of any such place, but I'm sure people have compiled tables\nsomewhere.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131228/575ec0fd/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Access to Mempool",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn",
                "Jeremy Spilman"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 2491
        }
    },
    {
        "title": "[Bitcoin-development] Fees / prio to be confirmed within ....",
        "thread_messages": [
            {
                "author": "Mike Hearn",
                "date": "2013-12-28T18:56:28",
                "message_text_only": "(nb: Gavin is on vacation at the moment, I post this now just to give food\nfor thought over the holidays).\n\nI patched my bitcoind to use a modified version of Gavin's fee estimation\nframework. Here is what it's currently estimating. This shows number of\nsamples taken for fee-paying transactions and free transactions (where\nconfirmation requires priority), along with the median fee paid and then\nthe 10th percentile fee paid, and median priority for the free transactions\n(no 10th percentile there). -1 means missing data, of course. Max 1000\nsamples.\n\n2013-12-28 18:34:42 estimates: for confirming within 0 blocks based on\n1000/383 samples, fee=38759.7/16155.1 (10%) per kilobyte, prio=8.41811e+08\n2013-12-28 18:34:42 estimates: for confirming within 1 blocks based on\n1000/202 samples, fee=26738/16155.1 (10%) per kilobyte, prio=2.91473e+08\n2013-12-28 18:34:42 estimates: for confirming within 2 blocks based on\n298/115 samples, fee=22831.1/10341.3 (10%) per kilobyte, prio=3.18117e+08\n2013-12-28 18:34:42 estimates: for confirming within 3 blocks based on\n115/88 samples, fee=22831.1/8810.57 (10%) per kilobyte, prio=2.53442e+08\n2013-12-28 18:34:42 estimates: for confirming within 4 blocks based on\n17/26 samples, fee=14992.5/2759.38 (10%) per kilobyte, prio=2.99917e+08\n2013-12-28 18:34:42 estimates: for confirming within 5 blocks based on 1/12\nsamples, fee=7468.26/7468.26 (10%) per kilobyte, prio=4.12797e+08\n2013-12-28 18:34:42 estimates: for confirming within 6 blocks based on 1/9\nsamples, fee=8071.03/8071.03 (10%) per kilobyte, prio=1.32007e+08\n2013-12-28 18:34:42 estimates: for confirming within 7 blocks based on 5/22\nsamples, fee=3018.41/1.91939 (10%) per kilobyte, prio=9.60733e+07\n2013-12-28 18:34:42 estimates: for confirming within 8 blocks based on 0/9\nsamples, fee=-1/-1 (10%) per kilobyte, prio=1.22123e+08\n2013-12-28 18:34:42 estimates: for confirming within 9 blocks based on 0/8\nsamples, fee=-1/-1 (10%) per kilobyte, prio=6.42686e+07\n2013-12-28 18:34:42 estimates: for confirming within 10 blocks based on 0/3\nsamples, fee=-1/-1 (10%) per kilobyte, prio=6.72846e+06\n2013-12-28 18:34:42 estimates: for confirming within 11 blocks based on 0/9\nsamples, fee=-1/-1 (10%) per kilobyte, prio=5.42872e+08\n2013-12-28 18:34:42 estimates: for confirming within 12 blocks based on 0/1\nsamples, fee=-1/-1 (10%) per kilobyte, prio=1.13419e+07\n2013-12-28 18:34:42 estimates: for confirming within 13 blocks based on 0/3\nsamples, fee=-1/-1 (10%) per kilobyte, prio=4.57343e+08\n2013-12-28 18:34:42 estimates: for confirming within 18 blocks based on 0/2\nsamples, fee=-1/-1 (10%) per kilobyte, prio=5.51321e+08\n2013-12-28 18:34:42 estimates: for confirming within 20 blocks based on 0/3\nsamples, fee=-1/-1 (10%) per kilobyte, prio=4.41654e+08\n2013-12-28 18:34:42 estimates: for confirming within 22 blocks based on 0/4\nsamples, fee=-1/-1 (10%) per kilobyte, prio=4.04413e+08\n2013-12-28 18:34:42 estimates: for confirming within 23 blocks based on 0/4\nsamples, fee=-1/-1 (10%) per kilobyte, prio=5.02467e+08\n2013-12-28 18:34:42 estimates: for confirming within 24 blocks based on 0/1\nsamples, fee=-1/-1 (10%) per kilobyte, prio=2.76975e+08\n2013-12-28 18:34:42 estimates: for confirming within 25 blocks based on 0/1\nsamples, fee=-1/-1 (10%) per kilobyte, prio=2.90481e+08\n2013-12-28 18:34:42 estimates: for confirming within 27 blocks based on 0/3\nsamples, fee=-1/-1 (10%) per kilobyte, prio=3.49409e+08\n2013-12-28 18:34:42 estimates: for confirming within 28 blocks based on 0/1\nsamples, fee=-1/-1 (10%) per kilobyte, prio=1.35682e+09\n2013-12-28 18:34:42 estimates: for confirming within 31 blocks based on 0/2\nsamples, fee=-1/-1 (10%) per kilobyte, prio=2.17966e+08\n2013-12-28 18:34:42 estimates: for confirming within 36 blocks based on 1/0\nsamples, fee=8103.73/8103.73 (10%) per kilobyte, prio=-1\n2013-12-28 18:34:42 estimates: for confirming within 47 blocks based on 1/0\nsamples, fee=608.273/608.273 (10%) per kilobyte, prio=-1\n2013-12-28 18:34:42 estimates: for confirming within 48 blocks based on 1/0\nsamples, fee=11415.5/11415.5 (10%) per kilobyte, prio=-1\n2013-12-28 18:34:42 estimates: for confirming within 51 blocks based on 0/1\nsamples, fee=-1/-1 (10%) per kilobyte, prio=1.01951e+09\n2013-12-28 18:34:42 estimates: for confirming within 55 blocks based on 1/0\nsamples, fee=3891.05/3891.05 (10%) per kilobyte, prio=-1\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131228/d772d7fb/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Fees / prio to be confirmed within ....",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Mike Hearn"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4526
        }
    },
    {
        "title": "[Bitcoin-development] Looking for GREAT C++ developer for exciting opportunity in bitcoin space",
        "thread_messages": [
            {
                "author": "Evan Duffield",
                "date": "2013-12-29T18:53:19",
                "message_text_only": "Hello,\n\nWe\u2019re a startup looking for 1 or 2 really good C++ programmer that is\nfamiliar with the bitcoin internals to help with a for-profit startup.\n\nWe will be able to provide more information about the project after signing\na non-compete/non-disclosure agreement. Our coin will be one of the truly\nunique coins that are not just a clone of the original Bitcoin code. In\nshort the project will be a merge-mined altcoin that will provide a very\nuseful service to the whole crypto-coin ecosystem.\n\nIf you have added any features to Bitcoin or related technologies this is a\ndefinite bonus. Please include information about the work you\u2019re done in\nthe space.\n\nWe have detailed plans on how to implement it and the roles we are looking\nto fill. If interested please email eduffield82 at gmail.com with a\ndescription of your work experience and we\u2019ll vett the applications and\nshare our plans to see if you\u2019re interested.\n\nThanks,\n\nEvan & Kyle\nHawk Financial Group, LLC\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131229/58bf9741/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2013-12-29T19:27:52",
                "message_text_only": "I'm not sure where you got the idea that Bitcoin-development was ideal for hiring scamcoin developers, but it's not. Most of the people on this list are smart enough to realize posts like this are dumb ideas backed by greedy \"entrepreneurs\" who don't understand the system they're trying to improve 99.9% of the time.\n\n\nEvan Duffield <eduffield82 at gmail.com> wrote:\n>Hello,\n>\n>We\u2019re a startup looking for 1 or 2 really good C++ programmer that is\n>familiar with the bitcoin internals to help with a for-profit startup.\n>\n>We will be able to provide more information about the project after\n>signing\n>a non-compete/non-disclosure agreement. Our coin will be one of the\n>truly\n>unique coins that are not just a clone of the original Bitcoin code. In\n>short the project will be a merge-mined altcoin that will provide a\n>very\n>useful service to the whole crypto-coin ecosystem.\n>\n>If you have added any features to Bitcoin or related technologies this\n>is a\n>definite bonus. Please include information about the work you\u2019re done\n>in\n>the space.\n>\n>We have detailed plans on how to implement it and the roles we are\n>looking\n>to fill. If interested please email eduffield82 at gmail.com with a\n>description of your work experience and we\u2019ll vett the applications and\n>share our plans to see if you\u2019re interested.\n>\n>Thanks,\n>\n>Evan & Kyle\n>Hawk Financial Group, LLC\n>\n>\n>------------------------------------------------------------------------\n>\n>------------------------------------------------------------------------------\n>Rapidly troubleshoot problems before they affect your business. Most IT\n>\n>organizations don't have a clear picture of how application performance\n>\n>affects their revenue. With AppDynamics, you get 100% visibility into\n>your \n>Java,.NET, & PHP application. Start your 15-day FREE TRIAL of\n>AppDynamics Pro!\n>http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n>\n>------------------------------------------------------------------------\n>\n>_______________________________________________\n>Bitcoin-development mailing list\n>Bitcoin-development at lists.sourceforge.net\n>https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131229/0a81a289/attachment.html>"
            },
            {
                "author": "Peter Todd",
                "date": "2013-12-30T23:22:25",
                "message_text_only": "On Sun, Dec 29, 2013 at 11:53:19AM -0700, Evan Duffield wrote:\n> Hello,\n> \n> We\u2019re a startup looking for 1 or 2 really good C++ programmer that is\n> familiar with the bitcoin internals to help with a for-profit startup.\n> \n> We will be able to provide more information about the project after signing\n> a non-compete/non-disclosure agreement. Our coin will be one of the truly\n> unique coins that are not just a clone of the original Bitcoin code. In\n> short the project will be a merge-mined altcoin that will provide a very\n> useful service to the whole crypto-coin ecosystem.\n\nI would strongly suggest that if you have not done so already you hire\nsomeone competent to do an analysis of whether or not your idea makes\nsense at all; that you are using merge-mining is a red-flag because\nwithout majority, or at least near-majority, hashing power an attacker\ncan 51% attack your altcoin at negligible cost by re-using existing\nhashing power. If you are starting a timestamping service that may be an\nexception, but how to turn a profit doing so is non-obvious.\n\n\nI would offer that consulting myself, but it would likely be a conflict\nof interest with my employers. I'd be happy to speak informally in\nprivate, but am explicitly unwilling to agree to any\nnon-compete/non-disclosure terms.\n\n-- \n'peter'[:-1]@petertodd.org\n000000000000000f9102d27cfd61ea9e8bb324593593ca3ce6ba53153ff251b3\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 490 bytes\nDesc: Digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131230/7a5971d9/attachment.sig>"
            },
            {
                "author": "Luke-Jr",
                "date": "2013-12-31T01:14:05",
                "message_text_only": "On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:\n> that you are using merge-mining is a red-flag because without majority, or\n> at least near-majority, hashing power an attacker can 51% attack your\n> altcoin at negligible cost by re-using existing hashing power.\n\nI strongly disagree on this isolated point. Using the same logic, Bitcoin is \nvulnerable to an attacker at negligible cost by re-using existing hashing \npower from mining Namecoin. Any non-scam altcoin is pretty safe using merged \nmining, since any would-be attacker is going to have it in their interests to \ninvest in the altcoin instead of attacking it. It's only the scam ones that \nwant to pump & dump with no improvements, that are really at risk here.\n\nThe rational decision for a non-scam altcoin, is to take advantage of merged \nmining to get as much security as possible. There are also some possible \ntricks to get the full security of the bitcoin miners even when not all \nparticipate in your altcoin (but this area probably needs some studying to get \nright).\n\nLuke"
            },
            {
                "author": "J\u00e9r\u00e9mie Dubois-Lacoste",
                "date": "2013-12-29T19:10:42",
                "message_text_only": "Hey,\n\nI doubt this list is for this kind of thing. I am following\nbitcoin-development since a long time but never participated because I\nbelieve discussions should be well-focused and I never had anything\nrelevant to say.\nEvan, I am pretty sure that emails such as yours will cause the true\ndiscussions between core-dev (or those closely graviting around) to\nmove elsewhere on a less public channel, where people like me won't be\nable to follow them anymore. Thus my request: please post this kind of\nthings elsewhere, because you are hijacking a list just to target his\naudience, but not to contribute relevant content. (A definition\nusually describing spam).\n\nCheers,\n\nJeremie\n\n\n2013/12/29 Evan Duffield <eduffield82 at gmail.com>:\n> Hello,\n>\n>\n> We\u2019re a startup looking for 1 or 2 really good C++ programmer that is\n> familiar with the bitcoin internals to help with a for-profit startup.\n>\n>\n> We will be able to provide more information about the project after signing\n> a non-compete/non-disclosure agreement. Our coin will be one of the truly\n> unique coins that are not just a clone of the original Bitcoin code. In\n> short the project will be a merge-mined altcoin that will provide a very\n> useful service to the whole crypto-coin ecosystem.\n>\n>\n> If you have added any features to Bitcoin or related technologies this is a\n> definite bonus. Please include information about the work you\u2019re done in the\n> space.\n>\n>\n> We have detailed plans on how to implement it and the roles we are looking\n> to fill. If interested please email eduffield82 at gmail.com with a description\n> of your work experience and we\u2019ll vett the applications and share our plans\n> to see if you\u2019re interested.\n>\n>\n> Thanks,\n>\n>\n> Evan & Kyle\n>\n> Hawk Financial Group, LLC\n>\n> ------------------------------------------------------------------------------\n> Rapidly troubleshoot problems before they affect your business. Most IT\n> organizations don't have a clear picture of how application performance\n> affects their revenue. With AppDynamics, you get 100% visibility into your\n> Java,.NET, & PHP application. Start your 15-day FREE TRIAL of AppDynamics\n> Pro!\n> http://pubads.g.doubleclick.net/gampad/clk?id=84349831&iu=/4140/ostg.clktrk\n> _______________________________________________\n> Bitcoin-development mailing list\n> Bitcoin-development at lists.sourceforge.net\n> https://lists.sourceforge.net/lists/listinfo/bitcoin-development\n>"
            }
        ],
        "thread_summary": {
            "title": "Looking for GREAT C++ developer for exciting opportunity in bitcoin space",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Luke-Jr",
                "Peter Todd",
                "Evan Duffield",
                "Matt Corallo",
                "J\u00e9r\u00e9mie Dubois-Lacoste"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 8653
        }
    },
    {
        "title": "[Bitcoin-development] Merge mining",
        "thread_messages": [
            {
                "author": "Jeremy Spilman",
                "date": "2013-12-31T07:28:10",
                "message_text_only": "Merge mining lets Bitcoin miners support or attack an alt-coin without any  \nadditional cost for their proof-of-work.\n\nSince bitcoin miners have to install software to build and claim blocks in  \nthe alt-coin, the percentage of bitcoin hashing power reflected toward the  \nalt-coin will follow some adoption curve based on convincing bitcoin  \nminers to opt-in.\n\nDepending on where you are on that adoption curve or 'participation rate',  \nyou need [a lot] less than 51% of of total Bitcoin hashing power in order  \nto 51% attack the alt-coin.\n\nBut there's so much 'dry powder' out there (GPUs), I wonder if *not*  \nsupporting merge-mining is any better? At least the attacker has to do  \nsome unique PoW, so you hope it's costing them something. Relatively large  \namounts of hashing can definitely be deployed on target with zero startup  \ncost, and perhaps very little runtime cost (botnets).\n\nI think the absolute cost of the PoW is very likely *not* the determining  \nfactor in preventing a 51% attack on all but one or two blockchains  \ncurrently in existence.\n\nDo I understand correctly, the question here is mostly a matter a game  \ntheory?\n\nOn Mon, 30 Dec 2013 17:14:05 -0800, Luke-Jr <luke at dashjr.org> wrote:\n\n> On Monday, December 30, 2013 11:22:25 PM Peter Todd wrote:\n>> that you are using merge-mining is a red-flag because without majority,  \n>> or\n>> at least near-majority, hashing power an attacker can 51% attack your\n>> altcoin at negligible cost by re-using existing hashing power.\n>\n> I strongly disagree on this isolated point. Using the same logic,  \n> Bitcoin is\n> vulnerable to an attacker at negligible cost by re-using existing hashing\n> power from mining Namecoin. Any non-scam altcoin is pretty safe using  \n> merged\n> mining, since any would-be attacker is going to have it in their  \n> interests to\n> invest in the altcoin instead of attacking it. It's only the scam ones  \n> that want to pump & dump with no improvements, that are really at risk  \n> here.\n>\n> The rational decision for a non-scam altcoin, is to take advantage of  \n> merged mining to get as much security as possible. There are also some  \n> possible\n> tricks to get the full security of the bitcoin miners even when not all\n> participate in your altcoin (but this area probably needs some studying  \n> to get right).\n>\n> Luke\n>"
            },
            {
                "author": "rob.golding at astutium.com",
                "date": "2013-12-31T07:38:26",
                "message_text_only": "> But there's so much 'dry powder' out there (GPUs), I wonder if *not*\n> supporting merge-mining is any better? At least the attacker has to do\n> some unique PoW, so you hope it's costing them something.\n\nWith lots of people having access to 100TH+ there's not really much \n'cost' to doing a 51% attack on an alt-coin beyond a short-term \ndiversion away from 'profitable' mining.\n\nAt least by supporting merged mining, more miners are likely to \n'support' multiple coin types, thus making a 51% attack from an \nindividual/group less straightforward.\n\n>> The rational decision for a non-scam altcoin, is to take advantage of\n>> merged mining to get as much security as possible.\n\nExactly.\n\nRob"
            }
        ],
        "thread_summary": {
            "title": "Merge mining",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jeremy Spilman",
                "rob.golding at astutium.com"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3023
        }
    },
    {
        "title": "[Bitcoin-development] HD wallet import strategies",
        "thread_messages": [
            {
                "author": "Jean-Paul Kogelman",
                "date": "2013-12-29T19:24:01",
                "message_text_only": "Hi all,\n\nWe've been having a heated discussion on HD wallet import strategies on bitcointalk and I was wondering what the people on bitcoin-dev had to say about the subject. \n\nSo I have a few questions and would love to hear your thoughts on them:\n\n1) What information do you consider absolutely essential when importing an HD wallet root key?\n2) If you already have an HD wallet import function, can you give a rough description of how it works?\n3) Do you think it would be wise to set up some sort of guidelines to ensure that different HD wallet implementations will be able to import each others HD wallet root keys?\n4) Anything else on the subject you consider important?\n\nThanks in advance,\n\nJean-Paul\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 842 bytes\nDesc: Message signed with OpenPGP using GPGMail\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131229/248a1049/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "HD wallet import strategies",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Jean-Paul Kogelman"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1009
        }
    },
    {
        "title": "[Bitcoin-development] New P2P microblogging project based on Bitcoin",
        "thread_messages": [
            {
                "author": "Miguel Freitas",
                "date": "2013-12-30T19:23:17",
                "message_text_only": "Hi folks,\n\nI'd like to let you know about a new project based on Bitcoin + Libtorrent:\ntwister - a new p2p microblogging platform.\n\nFirst of all, some kudos and apologies are due. Bitcoin and libtorrent are\nboth well written, high quality C++ codebases and i'd like to thank all\ndevelopers for their work.\n\nApologies are for bastardizing those codebases and (forcibly) merging them\ntogether in order to try my P2P ideas. I wouldn't be able to have something\nworking in just a few months if i did it differently. So the least I could\ndo in retribution is offering write-access to the repository for bitcoin\nand libtorrent developers (for those who want it, of course).\n\nI won't add more details here because the site has plenty of information\nand i'm sure some people will not be interested anyway as we get offtopic.\n\ntwister main site:\n\nhttp://twister.net.co\n\nwhite-paper:\n\nhttp://arxiv.org/abs/1312.7152\n\nregards,\n\nMiguel\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/bitcoin-dev/attachments/20131230/fff7b0c4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "New P2P microblogging project based on Bitcoin",
            "categories": [
                "Bitcoin-development"
            ],
            "authors": [
                "Miguel Freitas"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1106
        }
    }
]