[
    {
        "title": "[Lightning-dev] Anchor transaction for no expiration channels without segwit",
        "thread_messages": [
            {
                "author": "Nicolas Dorier",
                "date": "2017-02-06T02:25:44",
                "message_text_only": "Alice opening channel of 1BTC\n\nInput:\n1 BTC From Alice\n1 BTC From Bob\nOutput:\n1 BTC Alice+Bob OR Bob+AliceSecret\n1 BTC Bob+Timeout OR Alice+AliceSecret (aka the bounty)\n\nIf bob is unresponsive, Alice can get the bounty.\nIf Alice unresponsive, bob can get the bounty after timeout.\nIf Alice takes the bounty, Bob can take the escrow .\n\nIf Alice responsive, bob wait for getting the bounty. The use of the\nchannel will start after bob get the bounty back.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170206/465ae0f1/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2017-02-06T10:14:00",
                "message_text_only": "I created a possible step by step protocol with checks that each step is\nsafe.\n\nI think your scheme needs a 2nd timeout, so Bob has a time between Alice\nbroadcasting AliceSecret and Alice closing the channel with TX2.\n\nTX1\n\nInput\n1 from Alice\n1 from Bob\n\nOutput\n1:  (Alice + Bob + timeout(2T)) OR (Bob + AliceSecret)\n1:  (Bob + timeout(T)) OR (Alice + AliceSecret)\n\nTX2\n\nInput\nTX1:1: signed by (Alice + Bob)\nOutput\nInitial channel paying Alice 100%\n\nProcess:\n\nStep 1\n\nAlice creates TX1, signs it and sends it to Bob.\n\nIf Alice refuses this step, then nothing has happened, so it is a safe\nabort.\n\nStep 2\n\nBob signs it and sends Alice the tx hash.\n\nBob could sign and broadcast it.  If he does that, then Alice spends her\noutput to get her money back, so it is a safe abort.\n\nIf Bob refuses to complete this step, Alice should spend her input to\nprevent Bob broadcasting the TX1 later.  This is also a safe abort.\n\nNOTE:\n*  This is an ongoing check Alice must perform.\n*  If (timeout / 2) passes before all the steps are completed, Alice should\ntry to\n**    double spend her input into TX1\n**    spend her output from TX1\n\nStep 3\n\nAlice creates TX2, signs it and sends it to Bob.\n\nIf Alice refuses to complete this step, then Bob simply discards TX1.\nAlice can't broadcast it since she does not have a fully signed version of\nTX1.\n\nStep 4\n\nBob signs TX2 and sends it to Alice.\n\nIf Bob refuses to complete this step, the Alice should spend her input or\nher output of TX1 (if Bob has broadcast TX1).  This is a safe abort.\n\nStep 5\n\nBob broadcasts TX1\n\nIf Bob refuses to complete this step, the Alice should spend her input.\nThis is a safe abort.\n\nStep 6\n\nAlice should make sure TX1 is included in the chain without mutation.\n\nIf it is ok, then Alice does nothing.\n\nIf it is mutated, then Alice should spend her output immediately.\n\nIf Alice refuses to complete this step, then Bob can reclaim his money\nafter the timeout and Alice loses access to her money.  Alice has an\nincentive to complete this step.\n\nStep 7 (mutated TX only)\n\nBob can spend his output using AliceSecret.\n\nIf Bob refuses to complete this step, then he doesn't get his money, but\nAlice is not harmed.\n\nStep 7 (valid setup)\n\nBob spends his output after the timeout.  Once he has spent his output,\nthen the channel is setup.\n\nThere is a potential race condition here.\n\nAfter the timeout has expired, Alice could broadcast 2 transactions\n- TX2 (to close the channel paying Alice 100%)\n- transaction to spend TX1/1 (i.e. Alice + Alice secret)\n\nBob would be broadcasting his transaction to claim TX1/1 at around the same\ntime.\n\nThe network might accept Alice's 2 transactions, before Bob has a chance to\nclaim TX1/0 (with Bob + AliceSecret).\n\nAdding an extra timeout with the later expiry to TX1/0 means that Alice\ncannot broadcast TX2 until Bob has a chance to claim his output.\n\n\nOn Mon, Feb 6, 2017 at 2:25 AM, Nicolas Dorier <nicolas.dorier at gmail.com>\nwrote:\n\n> Alice opening channel of 1BTC\n>\n> Input:\n> 1 BTC From Alice\n> 1 BTC From Bob\n> Output:\n> 1 BTC Alice+Bob OR Bob+AliceSecret\n> 1 BTC Bob+Timeout OR Alice+AliceSecret (aka the bounty)\n>\n> If bob is unresponsive, Alice can get the bounty.\n> If Alice unresponsive, bob can get the bounty after timeout.\n> If Alice takes the bounty, Bob can take the escrow .\n>\n> If Alice responsive, bob wait for getting the bounty. The use of the\n> channel will start after bob get the bounty back.\n>\n>\n>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170206/ea7b8785/attachment.html>"
            },
            {
                "author": "Nicolas Dorier",
                "date": "2017-02-06T16:32:31",
                "message_text_only": "I think you do not need the second timeout.\n\nTX2 would be signed by Bob only once he could get back the second Output of\n TX1.\nSo Bob does not have to worry about Alice closing the channel with TX2.\n\nNicolas,\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170207/29b9367f/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2017-02-06T20:02:03",
                "message_text_only": "On Mon, Feb 6, 2017 at 4:32 PM, Nicolas Dorier <nicolas.dorier at gmail.com>\nwrote:\n\n> I think you do not need the second timeout.\n>\n> TX2 would be signed by Bob only once he could get back the second Output\n> of  TX1.\n>\n\nAlice must have a fully signed version of TX2 before the timeout finishes.\n\nIf she doesn't, then Bob can reclaim TX1/1 once the timeout expires and\nthen refuse to sign TX2.\n\nIf Alice has a signed version of TX2, then she can broadcast it and\nimmediately close the channel (claiming TX1/0).\n\nOnce that has been accepted, she can then claim TX1/1.\n\n\n\n> So Bob does not have to worry about Alice closing the channel with TX2.\n>\n> Nicolas,\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170206/8a33414e/attachment.html>"
            },
            {
                "author": "Nicolas Dorier",
                "date": "2017-02-07T02:39:53",
                "message_text_only": "Good point, actually, a simpler way to do it, is for TX2 to be nTimelocked\nafter bounty's expiration.\nIf Alice see bob not signing it, she can reclaim the bounty fast.\nIf bob sign it, Alice can't broadcast it immediately.\n\nOn Tue, Feb 7, 2017 at 5:02 AM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n>\n>\n> On Mon, Feb 6, 2017 at 4:32 PM, Nicolas Dorier <nicolas.dorier at gmail.com>\n> wrote:\n>\n>> I think you do not need the second timeout.\n>>\n>> TX2 would be signed by Bob only once he could get back the second Output\n>> of  TX1.\n>>\n>\n> Alice must have a fully signed version of TX2 before the timeout finishes.\n>\n> If she doesn't, then Bob can reclaim TX1/1 once the timeout expires and\n> then refuse to sign TX2.\n>\n> If Alice has a signed version of TX2, then she can broadcast it and\n> immediately close the channel (claiming TX1/0).\n>\n> Once that has been accepted, she can then claim TX1/1.\n>\n>\n>\n>> So Bob does not have to worry about Alice closing the channel with TX2.\n>>\n>> Nicolas,\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170207/d4f959a1/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2017-02-07T12:02:34",
                "message_text_only": "On Tue, Feb 7, 2017 at 2:39 AM, Nicolas Dorier <nicolas.dorier at gmail.com>\nwrote:\n\n> Good point, actually, a simpler way to do it, is for TX2 to be nTimelocked\n> after bounty's expiration.\n>\n\nThat works too and keeps the transaction smaller.\n\nI think a symmetrically funded channel needs 4 1BTC outputs, so it is\npretty much two single funded channels.  It would be slightly smaller than\n2 transactions to open the channel.\n\nTX1\n\nInput\n2 from Alice\n2 from Bob\n\nOutput\n1:  (Alice + Bob) OR (Bob + AliceSecret)\n1:  (Alice + Bob) OR (Alice + BobSecret)\n1:  (Bob + timeout(now + T)) OR (Alice + AliceSecret)\n1:  (Alice + timeout(now + T)) OR (Bob + BobSecret)\n\nTX2\nlocktime:  now + 2T\n\nInput\nTX1/0: signed by (Alice + Bob)\nTX1/1: signed by (Alice + Bob)\nOutput\nInitial channel paying Alice & Bob 1BTC each\n\n---------------------------------------\n\nAlice and Bob create TX1, sign it and share the result.\n\nAlice and Bob create TX2, sign it and share the result.\n\nAbort for those 2 steps:\n*  If one signs and the other doesn't then the signer should spend their\ninputs to be safe.\n*  If TX1 is broadcast, then they can both spend their timeouts to recover\ntheir funds, so it is safe.\n\nOnce they both have signed versions of TX1 and TX2, they should broadcast\nTX1.  This initializes the channel.\n\nIf TX1 is mutated, then they should both abort and spend their timeouts and\nrecover their funds.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170207/7d562bed/attachment.html>"
            },
            {
                "author": "Nicolas Dorier",
                "date": "2017-02-08T04:16:25",
                "message_text_only": "With this solution, is there any problem left without Segwit outside no\nthird party channel monitoring and channel establishment which need to wait\nBob bounty expiration ?\n\nOn Tue, Feb 7, 2017 at 9:02 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> On Tue, Feb 7, 2017 at 2:39 AM, Nicolas Dorier <nicolas.dorier at gmail.com>\n> wrote:\n>\n>> Good point, actually, a simpler way to do it, is for TX2 to be\n>> nTimelocked after bounty's expiration.\n>>\n>\n> That works too and keeps the transaction smaller.\n>\n> I think a symmetrically funded channel needs 4 1BTC outputs, so it is\n> pretty much two single funded channels.  It would be slightly smaller than\n> 2 transactions to open the channel.\n>\n> TX1\n>\n> Input\n> 2 from Alice\n> 2 from Bob\n>\n> Output\n> 1:  (Alice + Bob) OR (Bob + AliceSecret)\n> 1:  (Alice + Bob) OR (Alice + BobSecret)\n> 1:  (Bob + timeout(now + T)) OR (Alice + AliceSecret)\n> 1:  (Alice + timeout(now + T)) OR (Bob + BobSecret)\n>\n> TX2\n> locktime:  now + 2T\n>\n> Input\n> TX1/0: signed by (Alice + Bob)\n> TX1/1: signed by (Alice + Bob)\n> Output\n> Initial channel paying Alice & Bob 1BTC each\n>\n> ---------------------------------------\n>\n> Alice and Bob create TX1, sign it and share the result.\n>\n> Alice and Bob create TX2, sign it and share the result.\n>\n> Abort for those 2 steps:\n> *  If one signs and the other doesn't then the signer should spend their\n> inputs to be safe.\n> *  If TX1 is broadcast, then they can both spend their timeouts to recover\n> their funds, so it is safe.\n>\n> Once they both have signed versions of TX1 and TX2, they should broadcast\n> TX1.  This initializes the channel.\n>\n> If TX1 is mutated, then they should both abort and spend their timeouts\n> and recover their funds.\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170208/7de2d4d4/attachment.html>"
            },
            {
                "author": "Nicolas Dorier",
                "date": "2017-02-08T09:32:53",
                "message_text_only": "Tadge had an idea so we do not need any nTimeLock:\n\nTX1\n\nInput:\n1 BTC From Alice\n1 BTC From Bob\nOutput:\n1 BTC Alice+Bob OR Bob+AliceSecret1\n1 BTC Bob+Timeout OR Alice+AliceSecret1 OR Bob+AliceSecret2 (aka the\nbounty)\n\nTX2\n\nInput:\nTX1:0 using Alice+Bob\nOutput:\n1 BTC Alice+Bob+100 CSV OR Bob+AliceSecret1\n\nSo basically, if Alice try to broadcast TX2 and claim TX1:1 with\nAlice+AliceSecret1, Bob can claim TX2:0 with Bob+AliceSecret1.\nThe condition Bob+AliceSecret2 in TX1:1 is useful such that Bob can claim\nthe bounty without having to wait the Timeout.\n\nChannel establishment will basically take twice more time than a normal\nchannel with expiration.\n\n\n\n\nOn Wed, Feb 8, 2017 at 1:16 PM, Nicolas Dorier <nicolas.dorier at gmail.com>\nwrote:\n\n> With this solution, is there any problem left without Segwit outside no\n> third party channel monitoring and channel establishment which need to wait\n> Bob bounty expiration ?\n>\n> On Tue, Feb 7, 2017 at 9:02 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>\n>> On Tue, Feb 7, 2017 at 2:39 AM, Nicolas Dorier <nicolas.dorier at gmail.com>\n>> wrote:\n>>\n>>> Good point, actually, a simpler way to do it, is for TX2 to be\n>>> nTimelocked after bounty's expiration.\n>>>\n>>\n>> That works too and keeps the transaction smaller.\n>>\n>> I think a symmetrically funded channel needs 4 1BTC outputs, so it is\n>> pretty much two single funded channels.  It would be slightly smaller than\n>> 2 transactions to open the channel.\n>>\n>> TX1\n>>\n>> Input\n>> 2 from Alice\n>> 2 from Bob\n>>\n>> Output\n>> 1:  (Alice + Bob) OR (Bob + AliceSecret)\n>> 1:  (Alice + Bob) OR (Alice + BobSecret)\n>> 1:  (Bob + timeout(now + T)) OR (Alice + AliceSecret)\n>> 1:  (Alice + timeout(now + T)) OR (Bob + BobSecret)\n>>\n>> TX2\n>> locktime:  now + 2T\n>>\n>> Input\n>> TX1/0: signed by (Alice + Bob)\n>> TX1/1: signed by (Alice + Bob)\n>> Output\n>> Initial channel paying Alice & Bob 1BTC each\n>>\n>> ---------------------------------------\n>>\n>> Alice and Bob create TX1, sign it and share the result.\n>>\n>> Alice and Bob create TX2, sign it and share the result.\n>>\n>> Abort for those 2 steps:\n>> *  If one signs and the other doesn't then the signer should spend their\n>> inputs to be safe.\n>> *  If TX1 is broadcast, then they can both spend their timeouts to\n>> recover their funds, so it is safe.\n>>\n>> Once they both have signed versions of TX1 and TX2, they should broadcast\n>> TX1.  This initializes the channel.\n>>\n>> If TX1 is mutated, then they should both abort and spend their timeouts\n>> and recover their funds.\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170208/16bdb873/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2017-02-08T10:25:51",
                "message_text_only": "On Wed, Feb 8, 2017 at 9:32 AM, Nicolas Dorier <nicolas.dorier at gmail.com>\nwrote:\n\n> Tadge had an idea so we do not need any nTimeLock:\n>\n\nI think the nLocktime for TX2 is basically costless.  It just prevents\nchannel fast initial channel close.\n\nOnce an unchanged version of TX1 is in the blockchain, all further updates\nof the channel can exclude the nLocktime..\n\n> 1 BTC Bob+Timeout OR Alice+AliceSecret1 OR Bob+AliceSecret2 (aka the\nbounty)\n\nThis is so that Alice can unlock the bounty once the channel is setup, as a\ncourtesy?\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170208/67b0efe0/attachment-0001.html>"
            },
            {
                "author": "Nicolas Dorier",
                "date": "2017-02-08T11:20:01",
                "message_text_only": "The locktime is basically useless.\nThe reason for the locktime was to give bob time to reclaim the bounty\nbefore Alice can broadcast TX2.\nBut with AliceSecret1 in TX2, if alice ever broadcast and take the bounty,\nBob can confiscate TX2:0.\n\nAliceSecret2 is courtesy of Alice, so bob can get the bouncy back. It is\nunsafe to Bob to start using the channel before he could reclaim the bounty\nwith some confirmation.\n\nOn Wed, Feb 8, 2017 at 7:25 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n\n> On Wed, Feb 8, 2017 at 9:32 AM, Nicolas Dorier <nicolas.dorier at gmail.com>\n> wrote:\n>\n>> Tadge had an idea so we do not need any nTimeLock:\n>>\n>\n> I think the nLocktime for TX2 is basically costless.  It just prevents\n> channel fast initial channel close.\n>\n> Once an unchanged version of TX1 is in the blockchain, all further updates\n> of the channel can exclude the nLocktime..\n>\n> > 1 BTC Bob+Timeout OR Alice+AliceSecret1 OR Bob+AliceSecret2 (aka the\n> bounty)\n>\n> This is so that Alice can unlock the bounty once the channel is setup, as\n> a courtesy?\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170208/e7ea62f6/attachment.html>"
            },
            {
                "author": "Tier Nolan",
                "date": "2017-02-08T11:35:31",
                "message_text_only": "On Wed, Feb 8, 2017 at 11:20 AM, Nicolas Dorier <nicolas.dorier at gmail.com>\nwrote:\n\n> The locktime is basically useless.\n>\n\nIt solves the problem at (almost) zero cost.  The disadvantage is that it\nsets a minimum delay for a forced channel close, but using CSV also does\nthat, and is slightly larger.\n\nHaving a way to cooperatively reclaim the deposit is a good idea.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170208/94b23981/attachment.html>"
            },
            {
                "author": "\"Christopher J\u00e4mthagen\"",
                "date": "2017-02-09T17:51:59",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170209/7047f954/attachment.html>"
            },
            {
                "author": "Nicolas Dorier",
                "date": "2017-02-10T05:13:50",
                "message_text_only": "Well two transactions to be confirmed is not too bad. Approximately 30\nminutes. Compare that to the time it takes to apply for a prepaid debit\ncard.\n\nSo we have two possibilities so far without segwit: one transaction to be\nconfirmed but definite channel lifetime.\nOr two transactions to be confirmed but indefinite channel lifetime.\n\nNot sure yet what is the best from user perspective as channel renewal can\nbe done in the background.\n\nOn Fri, Feb 10, 2017 at 2:51 AM, \"Christopher J\u00e4mthagen\" <cjamthagen at gmx.com\n> wrote:\n\n> Two-layer HTLCs still need a malleability fix or some other workaround to\n> avoid excessive timeouts.\n>\n> /Christopher\n>\n> *Sent:* Wednesday, February 08, 2017 at 5:16 AM\n> *From:* \"Nicolas Dorier\" <nicolas.dorier at gmail.com>\n> *To:* \"Tier Nolan\" <tier.nolan at gmail.com>\n> *Cc:* lightning-dev at lists.linuxfoundation.org\n> *Subject:* Re: [Lightning-dev] Anchor transaction for no expiration\n> channels without segwit\n> With this solution, is there any problem left without Segwit outside no\n> third party channel monitoring and channel establishment which need to wait\n> Bob bounty expiration ?\n>\n> On Tue, Feb 7, 2017 at 9:02 PM, Tier Nolan <tier.nolan at gmail.com> wrote:\n>>\n>> On Tue, Feb 7, 2017 at 2:39 AM, Nicolas Dorier <nicolas.dorier at gmail.com>\n>> wrote:\n>>\n>>> Good point, actually, a simpler way to do it, is for TX2 to be\n>>> nTimelocked after bounty's expiration.\n>>>\n>>\n>> That works too and keeps the transaction smaller.\n>>\n>> I think a symmetrically funded channel needs 4 1BTC outputs, so it is\n>> pretty much two single funded channels.  It would be slightly smaller than\n>> 2 transactions to open the channel.\n>>\n>> TX1\n>>\n>> Input\n>> 2 from Alice\n>> 2 from Bob\n>>\n>> Output\n>> 1:  (Alice + Bob) OR (Bob + AliceSecret)\n>> 1:  (Alice + Bob) OR (Alice + BobSecret)\n>> 1:  (Bob + timeout(now + T)) OR (Alice + AliceSecret)\n>> 1:  (Alice + timeout(now + T)) OR (Bob + BobSecret)\n>>\n>> TX2\n>> locktime:  now + 2T\n>>\n>> Input\n>> TX1/0: signed by (Alice + Bob)\n>> TX1/1: signed by (Alice + Bob)\n>> Output\n>> Initial channel paying Alice & Bob 1BTC each\n>>\n>> ---------------------------------------\n>>\n>> Alice and Bob create TX1, sign it and share the result.\n>>\n>> Alice and Bob create TX2, sign it and share the result.\n>>\n>> Abort for those 2 steps:\n>> *  If one signs and the other doesn't then the signer should spend their\n>> inputs to be safe.\n>> *  If TX1 is broadcast, then they can both spend their timeouts to\n>> recover their funds, so it is safe.\n>>\n>> Once they both have signed versions of TX1 and TX2, they should broadcast\n>> TX1.  This initializes the channel.\n>>\n>> If TX1 is mutated, then they should both abort and spend their timeouts\n>> and recover their funds.\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\n> _______________________________________________ Lightning-dev mailing\n> list Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170210/a5c4bb17/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Anchor transaction for no expiration channels without segwit",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "\"Christopher J\u00e4mthagen\"",
                "Tier Nolan",
                "Nicolas Dorier"
            ],
            "messages_count": 13,
            "total_messages_chars_count": 20015
        }
    }
]