[
    {
        "title": "[Lightning-dev] LN without SegWit: less efficient or less secure?",
        "thread_messages": [
            {
                "author": "Andr\u00e9s G. Aragoneses",
                "date": "2017-01-14T10:17:40",
                "message_text_only": "Hi there,\n\nSeems like the list is a bit dormant these days.\n\nIs it because of the low chances of SegWit activation given that it stalled\nat ~26%?\n\nOn this topic, I would like to ask about the feasibility of LN without\nSegWit, given these circumstances.\n\nSome has been said in the past, I've been reading through the archives. But\nin them, everybody seemed overly enthusiastic about the activation of\nSegWit (maybe given that OP_CLTV and OP_CSV activated without hassle).\n\nI also stumbled across some notes about a talk on this topic (\"BIPs\nnecessary for lightning\"):\nhttps://diyhpl.us/wiki/transcripts/scalingbitcoin/hong-kong/overview-of-bips-necessary-for-lightning/\nIn it, the 3-levels of LN are explained, level 1 with OP_CLTV, level 2 with\nOP_CVS and level 3 with SegWit+SigHash new opcodes.\n\nThat link, the level I'm interested in (2), seems to only highlight about\nhow inefficient would be compared to level3. However, Joseph Poon has been\nquoted also mentioning \"security\" problems involved in level2 vs level3:\nhttp://www.bitcoinisle.com/2016/11/12/whats-left-before-bitcoins-lightning-network-goes-live/:\n\n\n\"...while aspects of Lightning are possible without the fix, the technology\nwould be far less secure without it\"\n\nThis contrasts to what is said in this other article:\nhttps://bitcoinmagazine.com/articles/lightning-network-one-step-closer-to-reality-as-lightning-labs-announces-alpha-release-1484333955\n:\n\n\"[level3] would allow users to outsource channel monitoring, which means\nthey won\u2019t have to constantly keep an eye on the Bitcoin blockchain.\nMeanwhile channels could be kept open longer and closed quicker. It would\noffer a better user experience overall\u201d.\n\nWhich one is more accurate? Is the security problems only related to having\nto watch the blockchain? If yes, why cannot one outsource this job to a\nserver (e.g. the hypothetical server of your light-wallet) in level2?\n\nThanks in advance for any clarifications,\n\n  Andres\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170114/37e0e421/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-01-16T02:30:48",
                "message_text_only": "\"Andr\u00e9s G. Aragoneses \" <knocte at gmail.com> writes:\n> Hi there,\n>\n> Seems like the list is a bit dormant these days.\n\nYes, most of the activity has been on the github repository:\n\n        https://github.com/lightningnetwork/lightning-rfc\n\n> Is it because of the low chances of SegWit activation given that it stalled\n> at ~26%?\n>\n> On this topic, I would like to ask about the feasibility of LN without\n> SegWit, given these circumstances.\n>\n> Some has been said in the past, I've been reading through the archives. But\n> in them, everybody seemed overly enthusiastic about the activation of\n> SegWit (maybe given that OP_CLTV and OP_CSV activated without hassle).\n\nIf segwit doesn't activate, something is badly broken in Bitcoin.  This\nis not really a lightning issue; there's been no significant technical\nobjection to segwit, and it really does make Bitcoin work better.\n\nI'm glad that miners are cautious with their upgrades, and segwit\nadoption will take time to roll out across products anyway.  Let's look\nagain in 6 months.\n\n> Which one is more accurate? Is the security problems only related to having\n> to watch the blockchain? If yes, why cannot one outsource this job to a\n> server (e.g. the hypothetical server of your light-wallet) in level2?\n\nYes, the problem is outsourcing.  You can't hand the outsourcer a\npenalty transaction signature if you don't know what the bad transaction\nwill look like.  And if the signatures are part of the transaction ID,\nyou don't.\n\nHope that helps,\nRusty."
            },
            {
                "author": "Matt Corallo",
                "date": "2017-01-16T03:06:02",
                "message_text_only": "On January 15, 2017 9:30:48 PM EST, Rusty Russell <rusty at rustcorp.com.au> wrote:\n>If segwit doesn't activate, something is badly broken in Bitcoin.  This\n>is not really a lightning issue; there's been no significant technical\n>objection to segwit, and it really does make Bitcoin work better.\n\nDepends on your point of view.... If you want a digital gold and don't care too much about payments, segwit not activating may be a good thing. It is a strong indication of how hard it is to change Bitcoin, and may even be an indication Bitcoin will never change in a major way again - a strong confirmation of exactly what you'd want from Bitcoin."
            },
            {
                "author": "Stefano Pepe",
                "date": "2017-01-16T03:06:07",
                "message_text_only": "Rusty,I'm on the side that has given nothing to the code but is following with a lot of attention the evolution of LN and Segwit.We are ready to help.\u00a0\nWhat can be done in your opinion?\n\nStefano Pepe\nCEO, UniquID Inc.\nhttp://uniquid.com\n\n\n\n\nOn Sun, Jan 15, 2017 at 6:39 PM -0800, \"Rusty Russell\" <rusty at rustcorp.com.au> wrote:\n\n\n\n\n\n\n\n\n\n\n\"Andr\u00e9s G. Aragoneses \"  writes:\n> Hi there,\n>\n> Seems like the list is a bit dormant these days.\n\nYes, most of the activity has been on the github repository:\n\n        https://github.com/lightningnetwork/lightning-rfc\n\n> Is it because of the low chances of SegWit activation given that it stalled\n> at ~26%?\n>\n> On this topic, I would like to ask about the feasibility of LN without\n> SegWit, given these circumstances.\n>\n> Some has been said in the past, I've been reading through the archives. But\n> in them, everybody seemed overly enthusiastic about the activation of\n> SegWit (maybe given that OP_CLTV and OP_CSV activated without hassle).\n\nIf segwit doesn't activate, something is badly broken in Bitcoin.  This\nis not really a lightning issue; there's been no significant technical\nobjection to segwit, and it really does make Bitcoin work better.\n\nI'm glad that miners are cautious with their upgrades, and segwit\nadoption will take time to roll out across products anyway.  Let's look\nagain in 6 months.\n\n> Which one is more accurate? Is the security problems only related to having\n> to watch the blockchain? If yes, why cannot one outsource this job to a\n> server (e.g. the hypothetical server of your light-wallet) in level2?\n\nYes, the problem is outsourcing.  You can't hand the outsourcer a\npenalty transaction signature if you don't know what the bad transaction\nwill look like.  And if the signatures are part of the transaction ID,\nyou don't.\n\nHope that helps,\nRusty.\n_______________________________________________\nLightning-dev mailing list\nLightning-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n\n\n\n\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170116/49354ae5/attachment.html>"
            },
            {
                "author": "Andr\u00e9s G. Aragoneses",
                "date": "2017-01-16T04:57:49",
                "message_text_only": "On 16 January 2017 at 10:30, Rusty Russell <rusty at rustcorp.com.au> wrote:\n\n> \"Andr\u00e9s G. Aragoneses \" <knocte at gmail.com> writes:\n> > Hi there,\n> >\n> > Seems like the list is a bit dormant these days.\n>\n> Yes, most of the activity has been on the github repository:\n>\n>         https://github.com/lightningnetwork/lightning-rfc\n>\n>\nThat's good! I will ask some question about that, bu in a different\nthread...\n\n\n\n> > Is it because of the low chances of SegWit activation given that it\n> stalled\n> > at ~26%?\n> >\n> > On this topic, I would like to ask about the feasibility of LN without\n> > SegWit, given these circumstances.\n> >\n> > Some has been said in the past, I've been reading through the archives.\n> But\n> > in them, everybody seemed overly enthusiastic about the activation of\n> > SegWit (maybe given that OP_CLTV and OP_CSV activated without hassle).\n>\n> If segwit doesn't activate, something is badly broken in Bitcoin.  This\n> is not really a lightning issue; there's been no significant technical\n> objection to segwit, and it really does make Bitcoin work better.\n>\n\nTrue.\n\nBut I guess we're learning that it can happen that technical improvements\nget non-technical impediments. In this case, my rough guess is that miners\nare afraid of losing their fee-gathering monopoly for moving money to\nlayer2-actors (payment hubs), given that it will be much easier to spawn\npaymenthub nodes than mining nodes.\n\nGiven this, IMHO the only way to move forward would be to start running\nlayer2 solutions in production in spite of the technical difficulties that\nSegWit non-activation implies. Then, when miners realize they cannot halt\nprogress on layer2 development, they will probably start assuming they need\nto give up blocking, for the sake of not stagnating the currency (which\nwould lead to the rise of usage of other chains I suppose).\n\n\n\n>\n> I'm glad that miners are cautious with their upgrades, and segwit\n> adoption will take time to roll out across products anyway.  Let's look\n> again in 6 months.\n>\n> > Which one is more accurate? Is the security problems only related to\n> having\n> > to watch the blockchain? If yes, why cannot one outsource this job to a\n> > server (e.g. the hypothetical server of your light-wallet) in level2?\n>\n> Yes, the problem is outsourcing.  You can't hand the outsourcer a\n> penalty transaction signature if you don't know what the bad transaction\n> will look like.  And if the signatures are part of the transaction ID,\n> you don't.\n>\n\n\nCan you elaborate on this? From my limited understanding, I guess you're\nreferring to detecting a broadcast of a transaction of a previous state of\nthe payment channel. In this case, the HTLC-clock of the revocation\ntransaction starts ticking, and the transaction to revoke this malicious\nmove would need the ID of the transaction used to broadcast the bad state.\nRight?\n\nIf my assumption was correct, wouldn't it be possible to have an\nalternative Lightning-Level2? That is: without SegWit, but still with CSV.\nAnd, instead of using revocation, use shorter locktimes like the\nSpillman-style payment channels do (everytime there's a need to change\ndirection)? I know that Spillman-style channels use nLockTime, which is\nvulnerable to malleability; so my question is: is there a way to create\nOP_CLTV/OP_CSV-style channels (instead of nLockTime-based, so malleability\nresistant) without using revocation methods?\n\nThanks\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170116/13603bc4/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2017-01-16T12:46:06",
                "message_text_only": "On Mon, Jan 16, 2017 at 12:57:49PM +0800, Andr\u00e9s G. Aragoneses  wrote:\n> But I guess we're learning that it can happen that technical improvements\n> get non-technical impediments. In this case, my rough guess is that miners\n> are afraid of losing their fee-gathering monopoly for moving money to\n> layer2-actors (payment hubs), given that it will be much easier to spawn\n> paymenthub nodes than mining nodes.\n\nThis is a very common misconception among people. Lightning does not\nreduce the fees that the miners may collect, it increases their reach\ninto transactions that they could not otherwise serve.\n\nThink of it like this, there are nowadays many applications that are\ncompletely unfeasible in Bitcoin due to the high transaction fees. The\ntransaction fees are high because an on-chain payment requires a lot\nof resources, i.e., storage, processing and bandwidth. These\napplications suddenly become possible with L2 protocols, so this adds\nto the reach of Bitcoin itself.\n\nOn the other hand Lightning requires strong guarantees that the\ntransactions will be settled in a certain timeframe, for its\nsecurity. Hence, Lightning will always attach higher than average fees\nto the on-chain transactions for setup and settlement of its\nchannels. This is okay since coins on these channels may have been\ntransferred hundreds if not millions of times back and forth, so the\nthese high on-chain fees have been amortized over time, and we happily\npay them.\n\nWith the (1) extension of Bitcoin's reach and (2) the higher than\nusual fees for setup and settlement, I'm absolutely convinced that\nminers will have a net gain when Lightning rolls out. Lightning is not\ncutting into the miner's profit, it opens up new possibilities.\n\n> Given this, IMHO the only way to move forward would be to start running\n> layer2 solutions in production in spite of the technical difficulties that\n> SegWit non-activation implies. Then, when miners realize they cannot halt\n> progress on layer2 development, they will probably start assuming they need\n> to give up blocking, for the sake of not stagnating the currency (which\n> would lead to the rise of usage of other chains I suppose).\n\nThat may not all that easy since it'd require a major overhaul of some\nparts of the current protocol and would add a lot of complexity that\nsegwit'd allow us to sidestep.\n\n> If my assumption was correct, wouldn't it be possible to have an\n> alternative Lightning-Level2? That is: without SegWit, but still with CSV.\n> And, instead of using revocation, use shorter locktimes like the\n> Spillman-style payment channels do (everytime there's a need to change\n> direction)? I know that Spillman-style channels use nLockTime, which is\n> vulnerable to malleability; so my question is: is there a way to create\n> OP_CLTV/OP_CSV-style channels (instead of nLockTime-based, so malleability\n> resistant) without using revocation methods?\n\nWe actually have a protocol that does just that: my Duplex\nMicropayment Channels, but it has been neglected a bit lately and\nsimply is not at the same development level as Lightning\nis. Furthermore it assumes that we have a malleability fix, otherwise\nthe invalidation tree construction does not work.\n\n> Thanks\n\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Anthony Towns",
                "date": "2017-01-16T06:31:38",
                "message_text_only": "On Mon, Jan 16, 2017 at 01:00:48PM +1030, Rusty Russell wrote:\n> > Which one is more accurate? Is the security problems only related to having\n> > to watch the blockchain? If yes, why cannot one outsource this job to a\n> > server (e.g. the hypothetical server of your light-wallet) in level2?\n> Yes, the problem is outsourcing.\n\nI thought the big problem was setup; you can't setup a new channel with a\nstranger on the internet if they can coordinate with a miner to prevent\nyou from being able to reclaim your funds. (I didn't think outsourcing\nwas anywhere near ready, let alone already being blocked by miners :)\n\nI have an idea on that though, I think... The idea when we were looking at\nBIP 62 as a solution (which would have still left signature malleability\nas a problem) was to have only one side pay into the funding transaction,\nso that the other side couldn't malleate it and prevent the inital\nrefund. ie:\n\n - Alice pays $X into an output redeemable by 2-of-2 multisig, Alice and Bob,\n   signs it, works out the txid, but doesn't publish yet.\n - Alice asks Bob to sign a refund tx that spends that transaction giving $X\n   back to Alice, with the usual HTLC behaviour so that it becomes unusable\n   once the channel starts being used.\n - Once Bob does this and Alice is satisfied, Alice publishes the original\n   $X tx and once it is in the blockchain the channel is open.\n\nThe problem is that if any third party malleability is possible, and\nhappens to Alice's original tx, then Bob's signature on the refund tx is\nno longer useful, and unless Bob is kind enough to sign a new refund tx,\nAlice has lost her money.\n\nGiven there's no cost to Bob doing this, and potentially some profit if\nBob can convince Alice to pay a 10% fee to get her money back (or even\njust the joy of vandalism if you're a troll or hate the idea of lightning\nor whatever), there could be lots of people filling the role of \"Bob\"\nand it could be hard to find someone safe to open a channel with, and,\nin effect, lightning isn't usable at all except with people you already\nknow and trust, which isn't very decentralised.\n\nAnyway my idea on avoiding this scenario: rather than have the funding\ntransaction just have a single output and a fee, have two outputs and\nzero fee, the first being the funding output, and the second just being\na P2PKH to yourself.  In a second transaction, pay the entire second\noutput as a fee, which will allow the unmalleated funding transaction to\nbe propagated and mined via CPFP.  Any malleated version of the first\ntransaction will then be highly unlikely to get mined (or propogated),\nbecause it won't include any fees, and the second transaction won't be\nvalid anymore, and nobody else will be able to generate a transaction\nthat spends either output to help it get propogated.\n\nFor this to fail, your channel partner would need to conspire with\na miner, and the miner would have to be lucky enough to beat all the\nhonest miners, assuming you included a competitive fee.  That seems\npretty unlikely to me -- the miner would be giving up fee income now\nfor the hope of a blackmail payment later. You could mitigate that\nfurther by giving channels an expiry time (ie, pay to (Alice and Bob) OR\n(CLTV 2 months, Alice)) so that you'd be guaranteed to get your funds\nback eventually. That makes blackmail and vandalism both hard and not\nprofitable, which I think should be enough to make it vanishingly rare.\n\nSo I /think/ that's actually sufficient to get lightning working reliably\non *today's* bitcoin blockchain, even prior to segwit activating?\n\n(If you wanted to partner with a couple of miners and submit transactions\ndirectly, paying for them out of band, you could avoid the CPFP step too,\nbut that wouldn't be at all decentralised)\n\n(If both Alice and Bob separately setup funding transactions, once they're\nin the blockchain, they can be combined to fund a single channel as far\nas I can see)\n\n(I might be mistaken, but I don't see \"ancestor feerate\" mentioned in the\nBitcoin Unlimited git history and CPFP was a 0.13.0 feature, so I think\nthat means that Bitcoin Unlimited miners won't mine CPFP transactions,\nand thus, with the approach outlined above, wouldn't mine transactions\nfor people setting up lightning channels. So I think this gives everyone\nwhat they want? :)\n\nCheers,\naj"
            },
            {
                "author": "Andr\u00e9s G. Aragoneses",
                "date": "2017-01-16T06:44:43",
                "message_text_only": "On 16 January 2017 at 14:31, Anthony Towns <aj at erisian.com.au> wrote:\n\n> On Mon, Jan 16, 2017 at 01:00:48PM +1030, Rusty Russell wrote:\n> > > Which one is more accurate? Is the security problems only related to\n> having\n> > > to watch the blockchain? If yes, why cannot one outsource this job to a\n> > > server (e.g. the hypothetical server of your light-wallet) in level2?\n> > Yes, the problem is outsourcing.\n>\n> I thought the big problem was setup; you can't setup a new channel with a\n> stranger on the internet if they can coordinate with a miner to prevent\n> you from being able to reclaim your funds. (I didn't think outsourcing\n> was anywhere near ready, let alone already being blocked by miners :)\n>\n> I have an idea on that though, I think... The idea when we were looking at\n> BIP 62 as a solution (which would have still left signature malleability\n> as a problem) was to have only one side pay into the funding transaction,\n> so that the other side couldn't malleate it and prevent the inital\n> refund. ie:\n>\n>  - Alice pays $X into an output redeemable by 2-of-2 multisig, Alice and\n> Bob,\n>    signs it, works out the txid, but doesn't publish yet.\n>  - Alice asks Bob to sign a refund tx that spends that transaction giving\n> $X\n>    back to Alice, with the usual HTLC behaviour so that it becomes unusable\n>    once the channel starts being used.\n>  - Once Bob does this and Alice is satisfied, Alice publishes the original\n>    $X tx and once it is in the blockchain the channel is open.\n>\n> The problem is that if any third party malleability is possible, and\n> happens to Alice's original tx, then Bob's signature on the refund tx is\n> no longer useful, and unless Bob is kind enough to sign a new refund tx,\n> Alice has lost her money.\n>\n> Given there's no cost to Bob doing this, and potentially some profit if\n> Bob can convince Alice to pay a 10% fee to get her money back (or even\n> just the joy of vandalism if you're a troll or hate the idea of lightning\n> or whatever), there could be lots of people filling the role of \"Bob\"\n> and it could be hard to find someone safe to open a channel with, and,\n> in effect, lightning isn't usable at all except with people you already\n> know and trust, which isn't very decentralised.\n>\n\nBut I thought this problem was already solved by using OP_CLTV/OP_CSV\n-style channels instead of Spillman-style ones?\n\nSee:\nhttp://bitcoin.stackexchange.com/a/48546/2751\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170116/ac47140c/attachment-0001.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2017-01-16T07:32:43",
                "message_text_only": "On Mon, Jan 16, 2017 at 02:44:43PM +0800, Andr\u00e9s G. Aragoneses  wrote:\n> But I thought this problem was already solved by using OP_CLTV/OP_CSV -style\n> channels instead of Spillman-style ones?\n> See:\n> http://bitcoin.stackexchange.com/a/48546/2751\n\nThe approach described there is to have a channel timeout (adding the\n\"customer signs, but locktime greater than refund time\" alternative to\nthe P2SH address). The lightning spec doesn't currently do that (see the\n\"Funding Transaction Output\" section of [0]). Lightning uses CLTV and CSV\nto make the HTLC steps work, that is to make the channel bidirectional,\nrather than being limited to having one end take the role of customer\nsending money to the merchant on the other end.\n\n[0] https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md\n\nIt's not a 100% solution on its own though -- the \"merchant\" in this\nscenario can choose not to provide the second signature back to the\ncustomer ever, in which case the customer can't access their funds\nagain until the refund time arrives. Better than being never able to\naccess their funds again, of course, which is what you get if you use\nthe current method, without segwit, and get malleated.\n\nCheers,\naj"
            },
            {
                "author": "Andr\u00e9s G. Aragoneses",
                "date": "2017-01-16T08:26:15",
                "message_text_only": "On 16 January 2017 at 15:32, Anthony Towns <aj at erisian.com.au> wrote:\n\n> On Mon, Jan 16, 2017 at 02:44:43PM +0800, Andr\u00e9s G. Aragoneses  wrote:\n> > But I thought this problem was already solved by using OP_CLTV/OP_CSV\n> -style\n> > channels instead of Spillman-style ones?\n> > See:\n> > http://bitcoin.stackexchange.com/a/48546/2751\n>\n> The approach described there is to have a channel timeout (adding the\n> \"customer signs, but locktime greater than refund time\" alternative to\n> the P2SH address). The lightning spec doesn't currently do that (see the\n> \"Funding Transaction Output\" section of [0]). Lightning uses CLTV and CSV\n> to make the HTLC steps work, that is to make the channel bidirectional,\n> rather than being limited to having one end take the role of customer\n> sending money to the merchant on the other end.\n>\n\nOk but I also read the last paragraph of the last version of the Lightning\npaper which I quote:\n\n\"A further stop-gap solution using OP CHECKSEQUENCEVERIFY\n57or a less-optimal use of OP CHECKLOCKTIMEVERIFY will be described\nin a future paper by Rusty Russell. An updated version of this paper will\nalso include these constructions.\"\n\nSo I guess I was confused by thinking that Lightning Level1 and Level2 was\nreferring to this, and maybe someone forgot to update the paper to include\nL1&L2.\n\nBut no, we're talking about using CLTV (or CSV, I guess?) for the refund\ntransaction instead of for the HTLC. Would we be able to call this an\nhypothetical Level2.5 of LN? (Level 3 being the one requiring SeqWit).\n\n\n\n>\n> [0] https://github.com/lightningnetwork/lightning-rfc/blob/master/03-\n> transactions.md\n>\n> It's not a 100% solution on its own though -- the \"merchant\" in this\n> scenario can choose not to provide the second signature back to the\n> customer ever, in which case the customer can't access their funds\n> again until the refund time arrives. Better than being never able to\n> access their funds again, of course, which is what you get if you use\n> the current method, without segwit, and get malleated.\n>\n\nExactly, that's why I think L2.5 would be the only feasible solution in\nlack of L3.\n\n\n\n>\n> Cheers,\n> aj\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20170116/44b73efd/attachment.html>"
            },
            {
                "author": "Anthony Towns",
                "date": "2017-01-16T22:12:25",
                "message_text_only": "On Mon, Jan 16, 2017 at 04:26:15PM +0800, Andr\u00e9s G. Aragoneses  wrote:\n> Ok but I also read the last paragraph of the last version of the Lightning\n> paper which I quote:\n> \"A further stop-gap solution using OP CHECKSEQUENCEVERIFY\n> 57or a less-optimal use of OP CHECKLOCKTIMEVERIFY will be described\n> in a future paper by Rusty Russell. An updated version of this paper will\n> also include these constructions.\"\n> \n> So I guess I was confused by thinking that Lightning Level1 and Level2 was\n> referring to this, and maybe someone forgot to update the paper to include L1&\n> L2.\n\nThe three levels from the Scaling Bitcoin Hong Kong talk aren't really\ntightly defined/analysed; it's not worth reading *too* much into them. The\nthird level in particular conflates segwit and the SIGHASH_NOINPUT idea;\nthe former fixes malleability, but the latter would fix malleability and\nallow much better trustless outsourcing.\n\nSo:\n\n level 1 -- CLTV only, no CSV; channels have a fixed end date, and every\n   commitment has a fixed must-spend/obsolete-by date as well. no longer\n   relevant.\n\n level 2 -- CLTV and CSV, but second and third party malleability still\n   possible. the current state of affairs. can only fund channels on one\n   side or second party malleability messes you over, and may need to\n   do something clever to avoid third party malleability (like introduce\n   a time limit on the channel), but otherwise works great.\n\n level 3(a) -- CLTV, CSV and segwit -- malleability isn't relevant.\n   outsourcing of channel monitoring is inelegant (effectively\n   infeasible?), because you need to provide whoever does the monitor\n   with signed penalty txns for every possible transaction\n\n level 3(b) -- CLTV, CSV and SIGHASH_NOINPUT (with or without segwit) --\n   all the benefits of 3(a) and you can cheaply get someone else to monitor\n   the blockchain for you, making a \"lite\" lightning node feasible\n\nThe lightning paper itself is mostly designed around \"level 0\" when\nthere wasn't even an OP_CLTV and you had to have intermediate layers of\ntransactions using nLockTime to enforce the delay. (No doubt there will\nbe \"level 4\" down the line when MAST/signature aggregation or something\nthat makes things even more amazing)\n\n> But no, we're talking about using CLTV (or CSV, I guess?) for the refund\n> transaction instead of for the HTLC. Would we be able to call this an\n> hypothetical Level2.5 of LN? (Level 3 being the one requiring SeqWit).\n\nI think everyone's been focussed on 3(a) because getting rid of\nmalleability is obviously a great thing for everyone in bitcoin, and\nsegwit makes that actually possible. I'm not sure if there are actually\nvariations of level 2 to justify a 2(a)/2(b) or 2.5 or similar.\n\nCheers,\naj"
            }
        ],
        "thread_summary": {
            "title": "LN without SegWit: less efficient or less secure?",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Anthony Towns",
                "Matt Corallo",
                "Stefano Pepe",
                "Andr\u00e9s G. Aragoneses",
                "Rusty Russell",
                "Christian Decker"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 26691
        }
    },
    {
        "title": "[Lightning-dev] Commitment transaction format suggestions/proposals.",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2017-01-25T00:53:24",
                "message_text_only": "Hi all,\n\n        There are a couple of changes which are being proposed for\ncommitment transactions, and I wanted to bring the conversation outside\ngithub to a wider audience:\n\n1. To-remote output is currently P2PKH: should we make it P2WPKH and\n   save some bytes?\n\n2. Fabrice proposed we make commitment transaction outputs directly\n   spendable by the penalty transaction; currently can only use the\n   revocation key with the HTLC-success or HTLC-timeout transactions.\n  \n        https://github.com/lightningnetwork/lightning-rfc/issues/88\n\nI've included my reply to that PR here, for further discussion:\n\nFabrice Drouin <notifications at github.com> writes:\n> We would like to propose a small modification of the commiment\n> transaction HTLC scripts, which would make it possible, when the other\n> party publishes a revoked commit transaction, to create penalty\n> transactions that spend the HTLC outputs. With  the current design the\n> penalty transaction spends the second-stage HLTC-timeout and\n> HTLC-success transactions.\n\nInteresting!  Tadge pointed out we could eliminate that, and we did\nwithout actually measuring the complexity cost.\n\n> This does not change the way external channel monitors would work, but for node which do their own monitoring this has several advantages:\n> - for htlcs offered by the counterparty: we don't need to know the counterparty's HTLC-timeout signature, which simplifies BOLT2 and saves the burden of storing the signatures\n\nMore importantly, it relieves us of having to generate and send those\nsignatures, which is a potential bottleneck.  Especially for Tadge's\nRaspberry Pi!\n\n> - for htlcs received we don't need to wait for the htlc timeout refund to claim the funds and we don't need to watch for HTLC-success transactions.\n\nFor offered htlcs we still need to handle both the HTLC-success and\ncommit tx cases though, since it can race with the other side.\nSimilarly with received htlcs and HTLC-timeout transactions.\n\nSo I think most of the complexity is still there, though the penalty\ndoesn't need to wait.\n\n> ## Changes to the Offered HTLC Output script:\n>\n> The solution we propose is to use a multisig 2-of-3 with `localkey`, `remotekey` and `revocationkey` for the Offered HTLC Output script:\n> ```\n> <remotekey> OP_SWAP\n>     OP_SIZE 32 OP_EQUAL\n> OP_NOTIF\n>     # To me via HTLC-timeout transaction (timelocked) or to you with revocation key.\n>     OP_DROP 2 OP_SWAP <localkey> <revocationkey> 3 OP_CHECKMULTISIG\n> OP_ELSE\n>     # To you with preimage.\n>     OP_HASH160 <ripemd-of-payment-hash> OP_EQUALVERIFY\n>     OP_CHECKSIG\n> OP_ENDIF\n> ```\n>\n> This output can be spent, as before, with the remote key and payment preimage, or with the remote key and local key, \n> but it can be spent also be spent with the remote key and revocation key, with the following witness script: \n\nClever abuse of multisig :) It can also be spent with the local and\nrevocation keys, but that should never happen.  OK.\n\n> ## Changes to the Received HTLC Output script\n> We use  additonal IF branch  (there is probably a better way to do this?):\n>\n> ```\n> <remotekey> OP_SWAP\n>     OP_SIZE 32 OP_EQUAL\n> OP_IF\n>     # To me via HTLC-success transaction.\n>     OP_HASH160 <ripemd-of-payment-hash> OP_EQUALVERIFY\n>     2 OP_SWAP <localkey> 2 OP_CHECKMULTISIG\n> OP_ELSE\n>     OP_SIZE 0 OP_EQUAL\n>     OP_IF\n\nWould OP_SIZE OP_NOTIF work here as an optimization?\n\n>         # To you after timeout.\n>         OP_DROP <locktime> OP_CHECKLOCKTIMEVERIFY OP_DROP\n>         OP_CHECKSIG\n>     OP_ELSE\n>         # To you if you have the revocation key  \n>         OP_SWAP 2 OP_SWAP <revocationkey> 2 OP_CHECKMULTISIG\n>     OP_ENDIF\n> OP_ENDIF\n> ```\n>\n> This output can be spent, as before, with the payment preimage and the remote and local keys, with the remote key after a delay,\n> but it can also be spent with the remote key and revocation key, with the following witness script:\n>\n> ```\n> 0 <remote-sig> <revocation-sig>\n> ``` \n\nI did a quick recalculate the weights of the commitment tx in Appendix\nA.  offered_htlc_script goes from 104 bytes to 138 bytes,\naccepted_htlc_script from 109 bytes to 152 bytes (assuming OP_SIZE\nOP_NOTIF works).\n\nHTLC-timeout weight goes from 634 to 668, HTLC-success from 671 to 714.\nThat's about 6%, which is pretty small.\n\nTadge was optimizing for the smallest possible on-chain footprint, which\nI think is a valid concern.  But let's please discuss the tradeoffs...\n\nThanks!\nRusty."
            },
            {
                "author": "Fabrice Drouin",
                "date": "2017-01-25T21:27:52",
                "message_text_only": "On 25 January 2017 at 01:53, Rusty Russell <rusty at rustcorp.com.au> wrote:\n>> - for htlcs received we don't need to wait for the htlc timeout refund to claim the funds and we don't need to watch for HTLC-success transactions.\n>\n> For offered htlcs we still need to handle both the HTLC-success and\n> commit tx cases though, since it can race with the other side.\n> Similarly with received htlcs and HTLC-timeout transactions.\n\nThat's right, I removed the last part about not watching for HTLC\nsuccess transactions from the issue description\n\n>> ## Changes to the Offered HTLC Output script:\n>>\n>> The solution we propose is to use a multisig 2-of-3 with `localkey`, `remotekey` and `revocationkey` for the Offered HTLC Output script:\n>> ```\n>> <remotekey> OP_SWAP\n>>     OP_SIZE 32 OP_EQUAL\n>> OP_NOTIF\n>>     # To me via HTLC-timeout transaction (timelocked) or to you with revocation key.\n>>     OP_DROP 2 OP_SWAP <localkey> <revocationkey> 3 OP_CHECKMULTISIG\n>> OP_ELSE\n>>     # To you with preimage.\n>>     OP_HASH160 <ripemd-of-payment-hash> OP_EQUALVERIFY\n>>     OP_CHECKSIG\n>> OP_ENDIF\n>> ```\n>>\n>> This output can be spent, as before, with the remote key and payment preimage, or with the remote key and local key,\n>> but it can be spent also be spent with the remote key and revocation key, with the following witness script:\n>\n> Clever abuse of multisig :) It can also be spent with the local and\n> revocation keys, but that should never happen.  OK.\n\nYes, because of the very clever way revocation keys are computed: you\ndon't know the revocation key that can be used to take all your funds\nif you publish a revoked commit tx. This is one of the many\nimprovements in the new specs :)\n\n>> <remotekey> OP_SWAP\n>>     OP_SIZE 32 OP_EQUAL\n>> OP_IF\n>>     # To me via HTLC-success transaction.\n>>     OP_HASH160 <ripemd-of-payment-hash> OP_EQUALVERIFY\n>>     2 OP_SWAP <localkey> 2 OP_CHECKMULTISIG\n>> OP_ELSE\n>>     OP_SIZE 0 OP_EQUAL\n>>     OP_IF\n>\n> Would OP_SIZE OP_NOTIF work here as an optimization?\n\nNot any more because of the \"minimal IF constraints\" which was added a\nfew months ago (see\nhttps://github.com/bitcoin/bitcoin/commit/c72c5b1e3bd42e84465677e94aa83316ff3d9a14)\n\n>>         # To you after timeout.\n>>         OP_DROP <locktime> OP_CHECKLOCKTIMEVERIFY OP_DROP\n>>         OP_CHECKSIG\n>>     OP_ELSE\n>>         # To you if you have the revocation key\n>>         OP_SWAP 2 OP_SWAP <revocationkey> 2 OP_CHECKMULTISIG\n>>     OP_ENDIF\n>> OP_ENDIF\n>> ```\n>>\n>> This output can be spent, as before, with the payment preimage and the remote and local keys, with the remote key after a delay,\n>> but it can also be spent with the remote key and revocation key, with the following witness script:\n>>\n>> ```\n>> 0 <remote-sig> <revocation-sig>\n\nI can be improved like this:\n\n    <remotePubkey> OP_SWAP\n    OP_SIZE 32 OP_EQUAL\n    OP_IF\n      OP_HASH160 paymentHash) <ripemd-of-payment-hash> OP_EQUALVERIFY\n      OP_2 OP_SWAP <localKey> OP_2 OP_CHECKMULTISIG\n    OP_ELSE\n      OP_SIZE OP_0 OP_EQUAL\n      OP_IF\n        OP_DROP <lockTime> OP_CHECKLOCKTIMEVERIFY OP_DROP OP_CHECKSIG\n      OP_ELSE\n        OP_SWAP OP_DROP <revocationPubKey> OP_CHECKSIG\n      OP_ENDIF\n    OP_ENDIF\n\nIt can now be spent with: <revocation-sig>\n\nCheers,\n\nFabrice"
            }
        ],
        "thread_summary": {
            "title": "Commitment transaction format suggestions/proposals.",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Fabrice Drouin"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7697
        }
    }
]