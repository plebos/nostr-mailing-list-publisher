[
    {
        "title": "[Lightning-dev] W3C Web Payments Working Group / Payment Request API",
        "thread_messages": [
            {
                "author": "Sjors Provoost",
                "date": "2018-09-10T11:21:40",
                "message_text_only": "I tend to agree it\u2019s just a matter of proposing a Payment Method. However there are various ways to go about it, e.g. what you suggest, but browsers might also get built-in wallets or there might a multi-currency abstraction on top of everything. It\u2019s probably not ideal if we end up with multiple Payment Methods or one that pushes a single approach.\n\nI left a few comments on the working group Github: https://github.com/w3c/webpayments/issues/232 <https://github.com/w3c/webpayments/issues/232>\n\nSjors\n\n> Op 30 aug. 2018, om 16:15 heeft Christian Decker <decker.christian at gmail.com> het volgende geschreven:\n> \n> Just a quick followup on this: yes, I am indeed a member of the W3C Web\n> Payments Working Group, though not a very active one. I am following the\n> discussion as best I can, and try to figure out what changes and special\n> considerations, if any, are needed for both Bitcoin and Lightning to\n> work correctly, when the spec is finalized and deployed.\n> \n> As it stands today the spec should be Bitcoin and Lightning compatible,\n> with the following considerations:\n> \n> - A special Payment Method ID [1] must be assigned to Bitcoin and\n>   Lightning since we cannot rely on a centralized URL to act as a\n>   payment method for these decentralized networks. Currently only the\n>   `basic-card` identifier has been assigned, but we can apply for one\n>   eventually;\n> - As far as I see a local handler can be specified as Payment Handler\n>   [2] allowing us to have a Bitcoin or Lightning daemon running locally\n>   that is invoked for payment requests;\n> - The Payment Request API [3] even mentions XBT as a supported\n>   currency, in addition to ISO4217 codes, so if a vendor publishes a\n>   Bitcoin amount and a matching Payment Method, we should be able to\n>   perform the payment;\n> - Since we require special handling for Bitcoin and Lightning\n>   w.r.t. the Payment Method, the Payment Method Manifest [4] doesn't\n>   apply to us.\n> \n> So all in all, we should be able to get Bitcoin and Lightning working\n> with the spec without any major roadblocks. Notice that this is based\n> solely on my current understanding of the spec, and I'd love for others\n> to chime in and point out anything that I might have missed.\n> \n> Cheers,\n> Christian\n> \n> [1] https://www.w3.org/TR/payment-method-id/\n> [2] https://www.w3.org/TR/payment-handler/\n> [3] https://www.w3.org/TR/payment-request/\n> [4] https://www.w3.org/TR/payment-method-manifest/\n> \n> Ren\u00e9 Pickhardt via Lightning-dev <lightning-dev at lists.linuxfoundation.org> writes:\n> \n>> Hey lightning devs,\n>> \n>> I was wondering if any of the companies here are members of W3C  and if\n>> anyone here could be member of the W3C Web Payments Working Group (c.f.:\n>> https://www.w3.org/Payments/WG/ )? According to this mail\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-March.txt\n>> Christian Decker is a member. Which I think would be awesome!\n>> \n>> They have just released their candidate recommendation for a payment API\n>> at: https://www.w3.org/TR/payment-request/ According to their site the\n>> proposed recommendation will be published not earlier than October 31st\n>> 2018. They are currently looking for feedback in their github repository\n>> at: https://github.com/w3c/payment-request/\n>> \n>> I can see that they have bitcoin somewhat on their mind. But I guess it\n>> would be even cooler if we could make sure that lightning payments will\n>> also be compatible with their recommendation.\n>> \n>> Christian - if you really are a member -  could you give us an update on\n>> that work? How relevant is it for us?\n>> \n>> best Rene\n>> \n>> --\n>> https://www.rene-pickhardt.de\n>> \n>> Skype: rene.pickhardt\n>> \n>> mobile: +49 (0)176 5762 3618\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180910/0cf084c6/attachment.html>\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: Message signed with OpenPGP\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180910/0cf084c6/attachment.sig>"
            }
        ],
        "thread_summary": {
            "title": "W3C Web Payments Working Group / Payment Request API",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Sjors Provoost"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4593
        }
    },
    {
        "title": "[Lightning-dev] Both-side funded channels",
        "thread_messages": [
            {
                "author": "Cezary Dziemian",
                "date": "2018-09-10T18:30:18",
                "message_text_only": "Hi,\n\nAbout weak ago I talked with Christian Decker, and he told me, that there\nis plan to implement possibility of both-side funding channels. He told me,\nthat I will be able (for example) to pay 100 sat for peer if he agreed to\nput some of his funds to channel. Everything in single, trustless\ntransaction.\n\nDo I understand this correctly? And if so, do you have any predictions when\nit could be implemented?\n\nCezary\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180910/9bd44c19/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-09-11T07:06:18",
                "message_text_only": "Good morning Cezary,\n\nAn issue is that this potentially leaks private information.  If I request you to fund 1BTC and you accept, then I close the channel, then I request you to fund 2BTC and you decline, then I have a good guess, that your funds are between 1 BTC to 2 BTC.\n\nThere are ways to mitigate this but are not perfect.\n\nIn addition, it is important always, that the initiator of the action should be the one to pay for fees onchain, for both the opening transaction and the unilateral close transactions.\n\nAn obvious attack vector is to launch several hundred Lightning nodes, tie up your onchain funds into channels, then permanently take my hundred nodes offline.  The victim would then have to wait for some time (the `to_self_delay` parameter that I specified) to access  the funds.\n\nThe above attack is greatly mitigated by requiring that the initiator of the dual-sided channel pay a fee, based on the capacity requested from the initiatee, and the `to_self_delay` the initiator requests, to the initiatee, via the `push_msat` or similar mechanism.  So, the first state of the new channel would not equal what each participant puts in, but is skewed to the initiatee, in order to reduce the above tie-up attack.  Any node that wishes to *accept* dual-funding requests (i.e. potential initiatees) would have to set some feerate in terms of millisatoshi per satoshi-block, which is multiplied with the initiator `to_self_delay` and the capacity requested from the initiatee, then divided by 1000 to get the fee required for the initiator to pay the initiatee to perform dual-funding (and the initiator will also still be the one paying for all the onchain fees on top of that).\n\nThe privacy leakage can be mitigated by requiring that the initiator always put up greater than or equal capacity it requests from the initiatee.  The initiator would be required to provide proof that it owns some onchain UTXOs that in total equal or exceed the capacity it will put in, and those UTXOs are the only ones that can be used by the initiator, to fund the channel (even in single-funding the opening side has to provide the transaction that will fund the channel, and the UTXOs it owns can be found by looking up the funding transaction on the blockchain, so this is not a worse privacy loss for the initiator).  This mitigation is imperfect as a rich entity could still probe a much-less-rich entity for how much it owns onchain (and so, I am uncertain how valuable this mitigation will be in practice; in addition some might not particularly care if their financial information is thus exposed, preferring to earn from routing fees and dual-funding fees).\n\nSo, roughly speaking, I think the implementation will be that the channel will have a starting state that will put a little more money into the initiatee side, and the initiator always has to put up some amount of funds (and more likely will be required to put up greater than or equal to what it requests from the initiatee).\n\nThe details might be hashed out in November lightning-dev summit, and then implementation will take perhaps a year or more after that.\n\n--\n\nFor myself, I think dual-funded channel, is not so important.\n\nConsider that the initiator may need to put up funds at least equal to the capacity it requests to the other side, in order to mitigate the privacy leakage above, and pay fees anyway, in order to get incoming capacity.  Now consider instead an alternate solution: off-to-onchain swap.  Create a single channel to anywhere on the network, then use an off-to-onchain swap service (which will charge fees for the service that are slightly more than onchain fees involved) to move the funds on that channel back onchain.  You can then repeat this process with \"the same\" funds to get more incoming capacity, paying fees each time.\n\nThis alternate solution, has the advantage that (1) it can in theory be implemented today, although I am unaware of any good trustless off-to-onchain swap services today, and (2) you can keep repeating it with \"the same\" onchain funds, getting incoming capacity from multiple points on the network, until the service runs out of onchain funds to swap with you or you believe you have enough incoming capacity.\n\nIn short: the common complaint, that you can only easily get incoming capacity equal to what you spend, can be taken advantage of, by spending your (offchain) Bitcoin to buy (onchain) Bitcoin.\n\nRegards,\nZmnSCPxj\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn Monday, 10 September 2018 20:30, Cezary Dziemian <cezary.dziemian at gmail.com> wrote:\n\n> Hi,\n>\n> About weak ago I talked with Christian Decker, and he told me, that there is plan to implement possibility of both-side funding channels. He told me, that I will be able (for example) to pay 100 sat for peer if he agreed to put some of his funds to channel. Everything in single, trustless transaction.\n>\n> Do I understand this correctly? And if so, do you have any predictions when it could be implemented?\n>\n> Cezary\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180911/6e05846f/attachment.html>"
            },
            {
                "author": "Cezary Dziemian",
                "date": "2018-09-11T18:55:41",
                "message_text_only": "Thanks for answer,\n\nDo I understand what you described correctly? If some merchant would like\nto just start using ln by receiving funds, he need to:\n\n1. Fund channel with amount he would like to be able to receive +\ndust_limit*2\n2. Wait for confirmations to channel opening\n3. Buy onchain bitcoins for ln bitcoins\n\nWeaknesses are:\n- he need to posses all funds he would like to receive + dust_limit*2\n- process takes longer\n- process requires 2 on-chain transactions\n- point 3 should be implemented in trustless way, so it also requires some\ndevelopment\n\nDon't you agree with me, that right now there is no good way to initiate\nsuch receiving channel? Don't you think this is quite high weakness of LN?\nBTW Maybe there is someone who is working on this trustless swap between\non-chain and on-channel funds?\n\nRegards,\nCD\n\nwt., 11 wrz 2018 o 09:06 ZmnSCPxj <ZmnSCPxj at protonmail.com> napisa\u0142(a):\n\n> Good morning Cezary,\n>\n> An issue is that this potentially leaks private information.  If I request\n> you to fund 1BTC and you accept, then I close the channel, then I request\n> you to fund 2BTC and you decline, then I have a good guess, that your funds\n> are between 1 BTC to 2 BTC.\n>\n> There are ways to mitigate this but are not perfect.\n>\n> In addition, it is important always, that the initiator of the action\n> should be the one to pay for fees onchain, for both the opening transaction\n> and the unilateral close transactions.\n>\n> An obvious attack vector is to launch several hundred Lightning nodes, tie\n> up your onchain funds into channels, then permanently take my hundred nodes\n> offline.  The victim would then have to wait for some time (the\n> `to_self_delay` parameter that I specified) to access  the funds.\n>\n> The above attack is greatly mitigated by requiring that the initiator of\n> the dual-sided channel pay a fee, based on the capacity requested from the\n> initiatee, and the `to_self_delay` the initiator requests, to the\n> initiatee, via the `push_msat` or similar mechanism.  So, the first state\n> of the new channel would not equal what each participant puts in, but is\n> skewed to the initiatee, in order to reduce the above tie-up attack.  Any\n> node that wishes to *accept* dual-funding requests (i.e. potential\n> initiatees) would have to set some feerate in terms of millisatoshi per\n> satoshi-block, which is multiplied with the initiator `to_self_delay` and\n> the capacity requested from the initiatee, then divided by 1000 to get the\n> fee required for the initiator to pay the initiatee to perform dual-funding\n> (and the initiator will also still be the one paying for all the onchain\n> fees on top of that).\n>\n> The privacy leakage can be mitigated by requiring that the initiator\n> always put up greater than or equal capacity it requests from the\n> initiatee.  The initiator would be required to provide proof that it owns\n> some onchain UTXOs that in total equal or exceed the capacity it will put\n> in, and those UTXOs are the only ones that can be used by the initiator, to\n> fund the channel (even in single-funding the opening side has to provide\n> the transaction that will fund the channel, and the UTXOs it owns can be\n> found by looking up the funding transaction on the blockchain, so this is\n> not a worse privacy loss for the initiator).  This mitigation is imperfect\n> as a rich entity could still probe a much-less-rich entity for how much it\n> owns onchain (and so, I am uncertain how valuable this mitigation will be\n> in practice; in addition some might not particularly care if their\n> financial information is thus exposed, preferring to earn from routing fees\n> and dual-funding fees).\n>\n> So, roughly speaking, I think the implementation will be that the channel\n> will have a starting state that will put a little more money into the\n> initiatee side, and the initiator always has to put up some amount of funds\n> (and more likely will be required to put up greater than or equal to what\n> it requests from the initiatee).\n>\n> The details might be hashed out in November lightning-dev summit, and then\n> implementation will take perhaps a year or more after that.\n>\n> --\n>\n> For myself, I think dual-funded channel, is not so important.\n>\n> Consider that the initiator may need to put up funds at least equal to the\n> capacity it requests to the other side, in order to mitigate the privacy\n> leakage above, and pay fees anyway, in order to get incoming capacity.  Now\n> consider instead an alternate solution: off-to-onchain swap.  Create a\n> single channel to anywhere on the network, then use an off-to-onchain swap\n> service (which will charge fees for the service that are slightly more than\n> onchain fees involved) to move the funds on that channel back onchain.  You\n> can then repeat this process with \"the same\" funds to get more incoming\n> capacity, paying fees each time.\n>\n> This alternate solution, has the advantage that (1) it can in theory be\n> implemented today, although I am unaware of any good trustless\n> off-to-onchain swap services today, and (2) you can keep repeating it with\n> \"the same\" onchain funds, getting incoming capacity from multiple points on\n> the network, until the service runs out of onchain funds to swap with you\n> or you believe you have enough incoming capacity.\n>\n> In short: the common complaint, that you can only easily get incoming\n> capacity equal to what you spend, can be taken advantage of, by spending\n> your (offchain) Bitcoin to buy (onchain) Bitcoin.\n>\n> Regards,\n> ZmnSCPxj\n>\n>\n>\n> Sent with ProtonMail <https://protonmail.com> Secure Email.\n>\n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On Monday, 10 September 2018 20:30, Cezary Dziemian <\n> cezary.dziemian at gmail.com> wrote:\n>\n> Hi,\n>\n> About weak ago I talked with Christian Decker, and he told me, that there\n> is plan to implement possibility of both-side funding channels. He told me,\n> that I will be able (for example) to pay 100 sat for peer if he agreed to\n> put some of his funds to channel. Everything in single, trustless\n> transaction.\n>\n> Do I understand this correctly? And if so, do you have any predictions\n> when it could be implemented?\n>\n> Cezary\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180911/924bb6e0/attachment.html>"
            },
            {
                "author": "Giovanni P",
                "date": "2018-09-11T20:40:25",
                "message_text_only": "I agree with you, Cezary, and was in tears of joy when read about that\n\"plan to implement possibility of both-side funding channels\", as it\nwould be immensely beneficial for the growth of network.\n\nI think ZmnSCPxj is misreading that as something mandatory, or\nsomething that would be integrated into the protocol and performed\nautomatically by all nodes. Only interpreting it in that way his\nconcerns about privacy and locked funds would make sense. As as I\ncould understand it, however, it would be something that nodes would\nnegotiate beforehand and only materialize if they decided it was\nmutually beneficial.\n\nRegarding trustless swaps between on-chain and lightning funds,\nthere's the work on https://submarineswaps.org/ (googling may be\nbetter for information on the topic:\nhttps://www.google.com/search?q=submarine+swaps)\n\nOn 9/11/18, Cezary Dziemian <cezary.dziemian at gmail.com> wrote:\n> Thanks for answer,\n>\n> Do I understand what you described correctly? If some merchant would like\n> to just start using ln by receiving funds, he need to:\n>\n> 1. Fund channel with amount he would like to be able to receive +\n> dust_limit*2\n> 2. Wait for confirmations to channel opening\n> 3. Buy onchain bitcoins for ln bitcoins\n>\n> Weaknesses are:\n> - he need to posses all funds he would like to receive + dust_limit*2\n> - process takes longer\n> - process requires 2 on-chain transactions\n> - point 3 should be implemented in trustless way, so it also requires some\n> development\n>\n> Don't you agree with me, that right now there is no good way to initiate\n> such receiving channel? Don't you think this is quite high weakness of LN?\n> BTW Maybe there is someone who is working on this trustless swap between\n> on-chain and on-channel funds?\n>\n> Regards,\n> CD\n>\n> wt., 11 wrz 2018 o 09:06 ZmnSCPxj <ZmnSCPxj at protonmail.com> napisa\u0142(a):\n>\n>> Good morning Cezary,\n>>\n>> An issue is that this potentially leaks private information.  If I\n>> request\n>> you to fund 1BTC and you accept, then I close the channel, then I request\n>> you to fund 2BTC and you decline, then I have a good guess, that your\n>> funds\n>> are between 1 BTC to 2 BTC.\n>>\n>> There are ways to mitigate this but are not perfect.\n>>\n>> In addition, it is important always, that the initiator of the action\n>> should be the one to pay for fees onchain, for both the opening\n>> transaction\n>> and the unilateral close transactions.\n>>\n>> An obvious attack vector is to launch several hundred Lightning nodes,\n>> tie\n>> up your onchain funds into channels, then permanently take my hundred\n>> nodes\n>> offline.  The victim would then have to wait for some time (the\n>> `to_self_delay` parameter that I specified) to access  the funds.\n>>\n>> The above attack is greatly mitigated by requiring that the initiator of\n>> the dual-sided channel pay a fee, based on the capacity requested from\n>> the\n>> initiatee, and the `to_self_delay` the initiator requests, to the\n>> initiatee, via the `push_msat` or similar mechanism.  So, the first state\n>> of the new channel would not equal what each participant puts in, but is\n>> skewed to the initiatee, in order to reduce the above tie-up attack.  Any\n>> node that wishes to *accept* dual-funding requests (i.e. potential\n>> initiatees) would have to set some feerate in terms of millisatoshi per\n>> satoshi-block, which is multiplied with the initiator `to_self_delay` and\n>> the capacity requested from the initiatee, then divided by 1000 to get\n>> the\n>> fee required for the initiator to pay the initiatee to perform\n>> dual-funding\n>> (and the initiator will also still be the one paying for all the onchain\n>> fees on top of that).\n>>\n>> The privacy leakage can be mitigated by requiring that the initiator\n>> always put up greater than or equal capacity it requests from the\n>> initiatee.  The initiator would be required to provide proof that it owns\n>> some onchain UTXOs that in total equal or exceed the capacity it will put\n>> in, and those UTXOs are the only ones that can be used by the initiator,\n>> to\n>> fund the channel (even in single-funding the opening side has to provide\n>> the transaction that will fund the channel, and the UTXOs it owns can be\n>> found by looking up the funding transaction on the blockchain, so this is\n>> not a worse privacy loss for the initiator).  This mitigation is\n>> imperfect\n>> as a rich entity could still probe a much-less-rich entity for how much\n>> it\n>> owns onchain (and so, I am uncertain how valuable this mitigation will be\n>> in practice; in addition some might not particularly care if their\n>> financial information is thus exposed, preferring to earn from routing\n>> fees\n>> and dual-funding fees).\n>>\n>> So, roughly speaking, I think the implementation will be that the channel\n>> will have a starting state that will put a little more money into the\n>> initiatee side, and the initiator always has to put up some amount of\n>> funds\n>> (and more likely will be required to put up greater than or equal to what\n>> it requests from the initiatee).\n>>\n>> The details might be hashed out in November lightning-dev summit, and\n>> then\n>> implementation will take perhaps a year or more after that.\n>>\n>> --\n>>\n>> For myself, I think dual-funded channel, is not so important.\n>>\n>> Consider that the initiator may need to put up funds at least equal to\n>> the\n>> capacity it requests to the other side, in order to mitigate the privacy\n>> leakage above, and pay fees anyway, in order to get incoming capacity.\n>> Now\n>> consider instead an alternate solution: off-to-onchain swap.  Create a\n>> single channel to anywhere on the network, then use an off-to-onchain\n>> swap\n>> service (which will charge fees for the service that are slightly more\n>> than\n>> onchain fees involved) to move the funds on that channel back onchain.\n>> You\n>> can then repeat this process with \"the same\" funds to get more incoming\n>> capacity, paying fees each time.\n>>\n>> This alternate solution, has the advantage that (1) it can in theory be\n>> implemented today, although I am unaware of any good trustless\n>> off-to-onchain swap services today, and (2) you can keep repeating it\n>> with\n>> \"the same\" onchain funds, getting incoming capacity from multiple points\n>> on\n>> the network, until the service runs out of onchain funds to swap with you\n>> or you believe you have enough incoming capacity.\n>>\n>> In short: the common complaint, that you can only easily get incoming\n>> capacity equal to what you spend, can be taken advantage of, by spending\n>> your (offchain) Bitcoin to buy (onchain) Bitcoin.\n>>\n>> Regards,\n>> ZmnSCPxj\n>>\n>>\n>>\n>> Sent with ProtonMail <https://protonmail.com> Secure Email.\n>>\n>> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n>> On Monday, 10 September 2018 20:30, Cezary Dziemian <\n>> cezary.dziemian at gmail.com> wrote:\n>>\n>> Hi,\n>>\n>> About weak ago I talked with Christian Decker, and he told me, that there\n>> is plan to implement possibility of both-side funding channels. He told\n>> me,\n>> that I will be able (for example) to pay 100 sat for peer if he agreed to\n>> put some of his funds to channel. Everything in single, trustless\n>> transaction.\n>>\n>> Do I understand this correctly? And if so, do you have any predictions\n>> when it could be implemented?\n>>\n>> Cezary\n>>\n>>\n>>\n>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-09-12T04:57:08",
                "message_text_only": "Good morning Giovanni,\n\n\n> I agree with you, Cezary, and was in tears of joy when read about that\n> \"plan to implement possibility of both-side funding channels\", as it\n> would be immensely beneficial for the growth of network.\n>\n> I think ZmnSCPxj is misreading that as something mandatory, or\n> something that would be integrated into the protocol and performed\n> automatically by all nodes. Only interpreting it in that way his\n> concerns about privacy and locked funds would make sense.\n\nIf it is not integrated into the protocol as an optional extension at least, then it would be difficult to coordinate between the 4 or 5 extant implementations.  Interoperability is a bit iffy already as-is for functionality that is already in the protocol (e.g. onchain fee disagreements when fees change rapidly on mainnet, unrecognized gossip types, etc).\n\nFurther, if not supported by default on most nodes, it runs the risk that only a few nodes will enable incoming requests for outgoing capacity, potentially creating a centralization risk (although I believe laolu (and possibly others?) considers centralization in LN to be benign; I have not investigated this argument in detail, and can only provide a knee-jerk reaction to centralization).\n\n> As as I\n> could understand it, however, it would be something that nodes would\n> negotiate beforehand and only materialize if they decided it was\n> mutually beneficial.\n\nYou may imagine negotiation between sapient intelligences, but it is often better to have this automated and supported at a much lower intelligence level, in much the same way that channel construction is often best left to autopilots.  If so, then it is best to support it widely to ease the job of autopilots who have been instructed by sapient-level policy to find X BTC incoming capacity for up to N% in fees.\n\nI imagine an extension to `node_announcement` would advertise that a node supports dual-funding, and also contain the limits to that dual-funding.\n\nThus I still see the potential privacy leak as a concern, since ideally every node should eventually support incoming dual-funding requests if it happens to have onchain capacity, to homogenize the network (improving decentralization and privacy).\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-09-12T04:40:27",
                "message_text_only": "Good morning Cezary,\n\n> Thanks for answer,\n>\n> Do I understand what you described correctly? If some merchant would like to just start using ln by receiving funds, he need to:\n>\n> 1. Fund channel with amount he would like to be able to receive + dust_limit*2\n> 2. Wait for confirmations to channel opening\n> 3. Buy onchain bitcoins for ln bitcoins\n>\n> Weaknesses are:\n> - he need to posses all funds he would like to receive + dust_limit*2\n\nNo.  Like I mentioned, the entire process can be repeated using \"the same\" onchain bitcoins.  The bitcoin you bought back may be used to open another channel with slightly smaller capacity (since fees will be deducted from it).  The process can be repeated, until your total capacity need is fulfilled or the swap service runs out of onchain funds.\n\nPresumably you would require, say, a few dozen times the cost of the item you are selling for each channel.  You create a channel, reverse its direction (by buying onchain bitcoin), create a new channel again using the onchain bitcoin you bought back, and so on, getting several times of your initial funds as incoming capacity.  Depending on how much you open each time, the fees will be small compared to the channel size, and you can open one last channel (and *not* reverse it) to pay any employees, suppliers, and stockholders you have.\n\n> - process takes longer\n> - process requires 2 on-chain transactions\n> - point 3 should be implemented in trustless way, so it also requires some development\n\nIndeed, the number of onchain transactions is an issue.  Lightning could offer some kind of transactional cut-through, which would be a generalization of both splicing and dual-funding.\n\n> Don't you agree with me, that right now there is no good way to initiate such receiving channel? Don't you think this is quite high weakness of LN?\n\nNo.  People who have kept their node consistently online for a few months generally find that they get incoming capacity anyway; you can simply trade off between time and money in this case.\n\n> BTW Maybe there is someone who is working on this trustless swap between on-chain and on-channel funds?\n\nAs mentioned in another mail, submarine swaps. I have not looked into it in detail so cannot recommend yet, but others may know better.\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180912/07949b41/attachment-0001.html>"
            },
            {
                "author": "Gregorio Guidi",
                "date": "2018-09-12T07:15:48",
                "message_text_only": "Il 12 settembre 2018 06:40:27 CEST, ZmnSCPxj via Lightning-dev <lightning-dev at lists.linuxfoundation.org> ha scritto:\n>\n>> Don't you agree with me, that right now there is no good way to\n>initiate such receiving channel? Don't you think this is quite high\n>weakness of LN?\n>\n>No.  People who have kept their node consistently online for a few\n>months generally find that they get incoming capacity anyway; you can\n>simply trade off between time and money in this case.\n\nHello, if I may add another perspective on this issue: from the point of view of a routing node, it is advantageous to be as close as possible to as much merchants as possibile, to capture part of the flow of funds to them.\n\nTherefore, when a new merchant appears, I actually see the possibility of some competition between routing nodes to fund stable channels with them. This could turn the incoming capacity issue perhaps into a non-issue in the steady state.\n\nRegards,\nGregorio"
            }
        ],
        "thread_summary": {
            "title": "Both-side funded channels",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Cezary Dziemian",
                "Gregorio Guidi",
                "Giovanni P",
                "ZmnSCPxj"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 25106
        }
    },
    {
        "title": "[Lightning-dev] Measuring centrality of nodes in LN graph",
        "thread_messages": [
            {
                "author": "Kulpreet Singh",
                "date": "2018-09-13T12:55:17",
                "message_text_only": "Hi Elias,\n\nThanks for the pointer to your excellent paper. I really enjoyed\nreading the idea of using locked flows to allow for a distributed\nexecution for finding valid flows, which will enable discovering\nroutes for payments. Pretty neat idea indeed.\n\nI just have few questions. My understanding might be incorrect and\ntherefore I ask.\n\n1. The distributed execution as proposed in the Goldberg paper\nrequires a number of nodes to communicate with each other, essentially\nnodes are talking to their neighbours, but I imagine this results in a\nwaterfall eventually as nodes talk their neighbours and so on. How do\nyou see this working practically? Do you envision periodic route\ncalculation phases, where all routing nodes collaborate even x seconds\nto help find routes for all the payments in that phase? This might\nresult in the \"instant payment\" property of LN suffering a bit. I hope\nI understood the Goldberg approach and my question isn't completely\noff the hook.\n\n2. If we leave the distributed execution aside for a moment and try\nthe \"feasible flow\" approach from your paper and compare that to the\ncurrent implementation in LN for route calculation, it might make for\nan interesting result. So the question is, do you have an\nimplementation of the push-relable algorithm in Go that could be tried\nout in LN? Or have you see one as part of another lib?\n\nAbout my work to observe LN metrics, I was hoping to see if there were\nany metrics from the network flow literature that might be relevant to\nLN. Do you think any specific one might be interesting to track?\n\nThanks again for sharing your paper\n\nKulpreet\nOn Wed, 29 Aug 2018 at 11:45, Elias Rohrer <elias.rohrer at tu-berlin.de> wrote:\n>\n> Hello Kulpreet,\n>\n> thank you a lot for your work, your post highlights some really interesting results.\n>\n> I'm looking forward to your future work measuring the network's structure and decentralization. Moreover, I find thinking about the LN as a flow network to be a real interesting perspective. In fact, as an initial entry towards this direction, we did some work on a multi-path routing algorithm based on the push-relabel algorithm (cf. 1). However, I think there is much room for improvement and other flow algorithms could turn out to be promising candidates for routing in the LN.\n>\n> As far as I understood, you would be using flow algorithms for a more in-depth analysis of the networks graph structure?\n>\n> Kind Regards,\n>\n> Elias\n>\n> On 29 Aug 2018, at 8:40, Kulpreet Singh wrote:\n>\n> Hi Ren\u00e9,\n>\n> Thanks for sharing the links to the issues and the excellent work you are doing.\n>\n> I see that you are quite interested in helping autopilot create a\n> graph such that is provides certain characteristics. It is quite a\n> challenging task, and I admire your courage to take it on. I saw your\n> lib-autopilot too, though I didn't take a closer look at the code yet.\n>\n> I am focussing on a much simpler task of figuring out which metrics\n> the community will find useful and then trying to determine which\n> algorithms we could quickly run to get some initial results while we\n> try to develop more pertinent analysis algorithms.\n>\n> I focussed on betweeness centrality and articulation points as\n> personally I was most curious about those. Next I want to try and\n> figure out which max-flow algorithm might suit LN the best. Have you\n> looked at this? I might have missed something you might have already\n> pointed to.\n>\n> I noticed your concern about tracking articulation points. I agree,\n> that once central point dominance goes down the dependence on some\n> important articulation points will go down too. But as I noticed in my\n> results, some nodes are high in the list of articulation points sorted\n> by the number of atleast 5 node biconnected components they connect\n> to. But their centrality is not that high. For example,\n> mainnet.lightningconductor.net is in the list of top articulation\n> points but does not make it to the list of top 20 nodes by centrality.\n>\n> I am still curious about articulation points and want to keep tracking\n> it, who knows we might learn something interesting by tracking the\n> information.\n>\n> I am curious how are you running your graph evaluations. Are you using\n> python binding to BGL or python networkx?\n>\n> I imagine we got slightly different results also because we used data\n> from different times. I intend to publish the json output I got from\n> LND when I get around to plotting my results on a chart so we can\n> verify I am not making an error somewhere.\n>\n> Thanks and regards\n> Kulpreet\n>\n>\n> On Tue, 28 Aug 2018 at 00:31, Ren\u00e9 Pickhardt <r.pickhardt at googlemail.com> wrote:\n>\n> Hey Kulpreet,\n>\n> thanks for this nice overview article! I have just today implemented a first draft for the c-lightning autopilot [0]. I have implemented 4 heuristics to select nodes to which one could connect. On of those [1] samples from the nodes that contribute to the high diameter. This heuristic was included not to increase the utility of the node that is running the autopilot but to improve the network properties. I believe that this heuristic should also reduce the articulation points and biconnected components that you mention in your article. As endpoints of longest shortest paths will most likely be in two different biconnectivity components (at least if those exist and have a certain size).\n>\n> Regarding the centrality. I also calculated the betweeness centrality and have similar results [2] to yours. I guess the difference will be due to the fact that we don't work on the exact same snapshot. My autopilot implementation also connects to a few rather central nodes. I doubt this is useful for the network but I guess it is good for the node running the autopilot since it gains access to many nodes. ( Actually I think - but don't know - that in combination with [1] it even helps the network).\n>\n> Regarding your 200 Articulation points I would guess that many of those are just nodes that only have one channel with the node that acts as an articulation point. I guess this is not something that we would need to take care of so much since it is also in the responsibility of those nodes to have more than one channel. for larger biconnectivity components the problem would probably be resolved with the above mentioned heuristic. Therefor I believe looking at the articulation points should not be our main focus.\n>\n> Something that (regarding the autopilot) I am currently missing in your article is how much funds should be allocated for the suggested channels. I am currently experimenting with a probability density function that is proportional to the average capacity of each node in the candidate set. I smooth this with a uniform distribution. However simulations at this point are quite expensive (if done primitively since the centralities have to be recomputed) I guess this would be a nice future work. I will probably tomorrow publish the rest of the code for the lib-autopilot that uses this heuristic for channel balances since I am currently still working on it.\n>\n> If you consider working more on the autopilot but also on research related to this I would also suggest the following resources [3],[4] and [5]\n>\n> [0] https://github.com/ElementsProject/lightning/pull/1888\n> [1] https://github.com/renepickhardt/lightning/blob/8c91f57490b51f772513a274d679d3ab62e7201a/contrib/lib-autopilot.py#L205\n> [2] https://twitter.com/renepickhardt/status/1034066602273193985\n> [3] https://github.com/lightningnetwork/lnd/issues/677\n> [4] https://github.com/renepickhardt/Automatically-Generating-a-Robust-Topology-for-the-Lightning-Network-on-top-of-Bitcoin\n> [5] https://www.rene-pickhardt.de/improve-the-autopilot-of-bitcoins-lightning-network-summary-of-the-bar-camp-session-at-the-2nd-lightninghackday-in-berlin/\n>\n> best regards Rene\n>\n>\n> On Mon, Aug 27, 2018 at 11:59 PM Kulpreet Singh <zapfmann at gmail.com> wrote:\n>\n> Hi all,\n>\n> I have been thinking about how we could measure the centrality of\n> various nodes in the LN graph and the dependence on some nodes to\n> route payments and to prevent network partitions. I think measuring\n> and tracking the changes in key metrics could help the community\n> decide on which nodes to open new channels with.\n>\n> I measured the centrality of nodes and the central point dominance as\n> defined in the seminal paper by Lindon C. Freeman, \"A Set of Measures\n> of Centrality Based on Betweenness\", Sociometry 40, pp. 35-41, 1977.\n>\n> I also measured the number of articulation points in the network as\n> per Robert E. Tarjan, \"Depth first search and linear graph algorithms\"\n> SIAM Journal on Computing, 1(2):146-160, 1972.\n>\n> I want to add, that this is just a start, I understand that we should\n> probably look at treating LN as a directed graph and that we should do\n> some work in trying to do some analysis based on treating LN as a flow\n> network.\n>\n> However, I am eager to share my early results and would welcome any\n> feedback or suggestions on the way forward.\n>\n> I wrote a medium post describing the approach and show my results\n> there. I also elaborate on the choice of the two metrics and what they\n> mean for LN. The post is available here:\n> https://medium.com/@jungly/measuring-node-centrality-in-lightning-network-8102a59999f0\n>\n> Looking forward to your suggestions and feedback.\n>\n> Thanks\n> Kulpreet\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n> --\n> https://www.rene-pickhardt.de\n>\n> Skype: rene.pickhardt\n>\n> mobile: +49 (0)176 5762 3618\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Elias Rohrer",
                "date": "2018-09-14T13:44:34",
                "message_text_only": "Hello Kulpreet,\n\nThank you for the interest in our work!\n\nwrt. 1.: You are correct, message complexity could be one of the main challenges in the distributed case (~ O(n^3) in the asynchronous model, according to Goldberg et al.). While this is clearly unfeasible to run for every single payment, ideas like introducing rounds or batching payments could help with that. However, you are absolutely right that a lot more work would be needed to find an optimized distributed solution with feasible overhead.\n\nwrt. 2.: Yes, replacing the route selection algorithm of the current source routing scheme with a flow-based approach should be possible and would be interesting to see. In particular, I would find it especially promising to combine such a flow-based approach with the atomic multi-path payment (AMP) scheme that was proposed in the beginning of this year.\nSo far, I have not looked into possible library candidates for a prototype implementation in the Go client. But maybe I should, as it seems exiting (now that I'm thinking about it ;)).\n\nAh, nice! I think, as a first idea, it could be enlightening (no pun intended) to even have a look at (average) maximum flows between all or random nodes. This could help to understand how much payment capacity can be unlocked by implementing a multi-path approach, such as AMP.\n\nThanks & Best Regards,\n\nElias\n\n\n\n\nOn 13 Sep 2018, at 14:55, Kulpreet Singh wrote:\n\n> Hi Elias,\n>\n> Thanks for the pointer to your excellent paper. I really enjoyed\n> reading the idea of using locked flows to allow for a distributed\n> execution for finding valid flows, which will enable discovering\n> routes for payments. Pretty neat idea indeed.\n>\n> I just have few questions. My understanding might be incorrect and\n> therefore I ask.\n>\n> 1. The distributed execution as proposed in the Goldberg paper\n> requires a number of nodes to communicate with each other, essentially\n> nodes are talking to their neighbours, but I imagine this results in a\n> waterfall eventually as nodes talk their neighbours and so on. How do\n> you see this working practically? Do you envision periodic route\n> calculation phases, where all routing nodes collaborate even x seconds\n> to help find routes for all the payments in that phase? This might\n> result in the \"instant payment\" property of LN suffering a bit. I hope\n> I understood the Goldberg approach and my question isn't completely\n> off the hook.\n>\n> 2. If we leave the distributed execution aside for a moment and try\n> the \"feasible flow\" approach from your paper and compare that to the\n> current implementation in LN for route calculation, it might make for\n> an interesting result. So the question is, do you have an\n> implementation of the push-relable algorithm in Go that could be tried\n> out in LN? Or have you see one as part of another lib?\n>\n> About my work to observe LN metrics, I was hoping to see if there were\n> any metrics from the network flow literature that might be relevant to\n> LN. Do you think any specific one might be interesting to track?\n>\n> Thanks again for sharing your paper\n>\n> Kulpreet\n> On Wed, 29 Aug 2018 at 11:45, Elias Rohrer <elias.rohrer at tu-berlin.de> wrote:\n>>\n>> Hello Kulpreet,\n>>\n>> thank you a lot for your work, your post highlights some really interesting results.\n>>\n>> I'm looking forward to your future work measuring the network's structure and decentralization. Moreover, I find thinking about the LN as a flow network to be a real interesting perspective. In fact, as an initial entry towards this direction, we did some work on a multi-path routing algorithm based on the push-relabel algorithm (cf. 1). However, I think there is much room for improvement and other flow algorithms could turn out to be promising candidates for routing in the LN.\n>>\n>> As far as I understood, you would be using flow algorithms for a more in-depth analysis of the networks graph structure?\n>>\n>> Kind Regards,\n>>\n>> Elias\n>>\n>> On 29 Aug 2018, at 8:40, Kulpreet Singh wrote:\n>>\n>> Hi Ren\u00e9,\n>>\n>> Thanks for sharing the links to the issues and the excellent work you are doing.\n>>\n>> I see that you are quite interested in helping autopilot create a\n>> graph such that is provides certain characteristics. It is quite a\n>> challenging task, and I admire your courage to take it on. I saw your\n>> lib-autopilot too, though I didn't take a closer look at the code yet.\n>>\n>> I am focussing on a much simpler task of figuring out which metrics\n>> the community will find useful and then trying to determine which\n>> algorithms we could quickly run to get some initial results while we\n>> try to develop more pertinent analysis algorithms.\n>>\n>> I focussed on betweeness centrality and articulation points as\n>> personally I was most curious about those. Next I want to try and\n>> figure out which max-flow algorithm might suit LN the best. Have you\n>> looked at this? I might have missed something you might have already\n>> pointed to.\n>>\n>> I noticed your concern about tracking articulation points. I agree,\n>> that once central point dominance goes down the dependence on some\n>> important articulation points will go down too. But as I noticed in my\n>> results, some nodes are high in the list of articulation points sorted\n>> by the number of atleast 5 node biconnected components they connect\n>> to. But their centrality is not that high. For example,\n>> mainnet.lightningconductor.net is in the list of top articulation\n>> points but does not make it to the list of top 20 nodes by centrality.\n>>\n>> I am still curious about articulation points and want to keep tracking\n>> it, who knows we might learn something interesting by tracking the\n>> information.\n>>\n>> I am curious how are you running your graph evaluations. Are you using\n>> python binding to BGL or python networkx?\n>>\n>> I imagine we got slightly different results also because we used data\n>> from different times. I intend to publish the json output I got from\n>> LND when I get around to plotting my results on a chart so we can\n>> verify I am not making an error somewhere.\n>>\n>> Thanks and regards\n>> Kulpreet\n>>\n>>\n>> On Tue, 28 Aug 2018 at 00:31, Ren\u00e9 Pickhardt <r.pickhardt at googlemail.com> wrote:\n>>\n>> Hey Kulpreet,\n>>\n>> thanks for this nice overview article! I have just today implemented a first draft for the c-lightning autopilot [0]. I have implemented 4 heuristics to select nodes to which one could connect. On of those [1] samples from the nodes that contribute to the high diameter. This heuristic was included not to increase the utility of the node that is running the autopilot but to improve the network properties. I believe that this heuristic should also reduce the articulation points and biconnected components that you mention in your article. As endpoints of longest shortest paths will most likely be in two different biconnectivity components (at least if those exist and have a certain size).\n>>\n>> Regarding the centrality. I also calculated the betweeness centrality and have similar results [2] to yours. I guess the difference will be due to the fact that we don't work on the exact same snapshot. My autopilot implementation also connects to a few rather central nodes. I doubt this is useful for the network but I guess it is good for the node running the autopilot since it gains access to many nodes. ( Actually I think - but don't know - that in combination with [1] it even helps the network).\n>>\n>> Regarding your 200 Articulation points I would guess that many of those are just nodes that only have one channel with the node that acts as an articulation point. I guess this is not something that we would need to take care of so much since it is also in the responsibility of those nodes to have more than one channel. for larger biconnectivity components the problem would probably be resolved with the above mentioned heuristic. Therefor I believe looking at the articulation points should not be our main focus.\n>>\n>> Something that (regarding the autopilot) I am currently missing in your article is how much funds should be allocated for the suggested channels. I am currently experimenting with a probability density function that is proportional to the average capacity of each node in the candidate set. I smooth this with a uniform distribution. However simulations at this point are quite expensive (if done primitively since the centralities have to be recomputed) I guess this would be a nice future work. I will probably tomorrow publish the rest of the code for the lib-autopilot that uses this heuristic for channel balances since I am currently still working on it.\n>>\n>> If you consider working more on the autopilot but also on research related to this I would also suggest the following resources [3],[4] and [5]\n>>\n>> [0] https://github.com/ElementsProject/lightning/pull/1888\n>> [1] https://github.com/renepickhardt/lightning/blob/8c91f57490b51f772513a274d679d3ab62e7201a/contrib/lib-autopilot.py#L205\n>> [2] https://twitter.com/renepickhardt/status/1034066602273193985\n>> [3] https://github.com/lightningnetwork/lnd/issues/677\n>> [4] https://github.com/renepickhardt/Automatically-Generating-a-Robust-Topology-for-the-Lightning-Network-on-top-of-Bitcoin\n>> [5] https://www.rene-pickhardt.de/improve-the-autopilot-of-bitcoins-lightning-network-summary-of-the-bar-camp-session-at-the-2nd-lightninghackday-in-berlin/\n>>\n>> best regards Rene\n>>\n>>\n>> On Mon, Aug 27, 2018 at 11:59 PM Kulpreet Singh <zapfmann at gmail.com> wrote:\n>>\n>> Hi all,\n>>\n>> I have been thinking about how we could measure the centrality of\n>> various nodes in the LN graph and the dependence on some nodes to\n>> route payments and to prevent network partitions. I think measuring\n>> and tracking the changes in key metrics could help the community\n>> decide on which nodes to open new channels with.\n>>\n>> I measured the centrality of nodes and the central point dominance as\n>> defined in the seminal paper by Lindon C. Freeman, \"A Set of Measures\n>> of Centrality Based on Betweenness\", Sociometry 40, pp. 35-41, 1977.\n>>\n>> I also measured the number of articulation points in the network as\n>> per Robert E. Tarjan, \"Depth first search and linear graph algorithms\"\n>> SIAM Journal on Computing, 1(2):146-160, 1972.\n>>\n>> I want to add, that this is just a start, I understand that we should\n>> probably look at treating LN as a directed graph and that we should do\n>> some work in trying to do some analysis based on treating LN as a flow\n>> network.\n>>\n>> However, I am eager to share my early results and would welcome any\n>> feedback or suggestions on the way forward.\n>>\n>> I wrote a medium post describing the approach and show my results\n>> there. I also elaborate on the choice of the two metrics and what they\n>> mean for LN. The post is available here:\n>> https://medium.com/@jungly/measuring-node-centrality-in-lightning-network-8102a59999f0\n>>\n>> Looking forward to your suggestions and feedback.\n>>\n>> Thanks\n>> Kulpreet\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>> --\n>> https://www.rene-pickhardt.de\n>>\n>> Skype: rene.pickhardt\n>>\n>> mobile: +49 (0)176 5762 3618\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: smime.p7s\nType: application/pkcs7-signature\nSize: 4970 bytes\nDesc: S/MIME digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180914/cabf7fde/attachment.p7s>"
            }
        ],
        "thread_summary": {
            "title": "Measuring centrality of nodes in LN graph",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Elias Rohrer",
                "Kulpreet Singh"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 21591
        }
    },
    {
        "title": "[Lightning-dev] c-lightning 0.6.1 release, aka \"Principled Opposition to SegWit\"",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2018-09-14T07:54:58",
                "message_text_only": "We're pleased to announce c-lightning 0.6.1, named by co-maintainer ZmnSCPxj.\n\nHighlights for c-lightning users\n\n * Less stuck payments: Liveness ping test before locking up funds with peers.\n * Better routing: now considers size of channels.\n * Fewer spurious closes: fee estimate improvements, and new feerates command\n * Several annoying bugs fixed.\n * Ubuntu PPA at https://launchpad.net/~lightningnetwork/+archive/ubuntu/ppa\n\nHighlights for the network:\n\n * Gossipd now less spammy with channel_update.\n * option_data_loss_protect to protect peers against being out-of-date.\n * Payment errors now refer to the correct channel.\n\nInternal Improvements\n\n * Simplified client flow; after init message exchange by connectd, each\n   is isolated in its own daemon.\n * JSON parameter handling vastly simplfied.\n * Python testing framework now uses proper fixtures, and split into\n   separate files.\n * Many other cleanups and clarifications.\n * We keepachangelog.com!\n\nThe details can be found in the CHANGELOG:\n        https://github.com/ElementsProject/lightning/blob/v0.6.1/CHANGELOG.md\n\nContributions:\n\nWe're grateful for all the bug reports and suggestions and your patience as we sometimes struggled to address them: please keep them coming!\n\nSince 0.6 we've had 517 commits from 31 different authors, 15 of whom\nwere first-time c-lightning contributors:\n\nBertrand Marlier\nCryptcoin Junkey\nFabian Raetz\nHiroki Gondo\nJonathan Zernik\nJordan Baczuk\nRonald Mannak\nSimon Vrouwe\nStephanie Stroka\ngallizoltan\nlisa neigut\nlucash-dev\nmikhaelsantos\ntock203\nwintercooled\n\nCheers,\nRusty, Christian and ZmnSCPxj."
            }
        ],
        "thread_summary": {
            "title": "c-lightning 0.6.1 release, aka \"Principled Opposition to SegWit\"",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 1602
        }
    },
    {
        "title": "[Lightning-dev] Reproducing Flare routing results",
        "thread_messages": [
            {
                "author": "Shruti Hiray",
                "date": "2018-09-19T09:06:42",
                "message_text_only": "Hi everyone,\n\nI am a final year undergraduate student at IIT Bombay, working on initial\nsteps of exploring routing in Lightning Network.\nThe following repository aims to reproduce results of the Flare Routing\nPaper\n<https://bitfury.com/content/downloads/whitepaper_flare_an_approach_to_routing_in_lightning_network_7_7_2016.pdf>\n[1] using\nHaskell: Github repository <https://github.com/shrutihiray/lightning-flare>\n [2]\n\nThe results for Reachability in LN graph after varying number of beacons\n(B) and number of queried nodes (Q)  for Graph order = 2000 and Seed for\nRandom Generator = 212, are as follows:\n\n==========================================\n                            Reachability in Graph\n==========================================\n                   Q = 0         Q = 1          Q > 1         Total\n==========================================\n    B = 2      0.95%       10.19%      41.02%      52.17%\n==========================================\n    B = 4      3.31%        64.56%      31.21%     99.16%\n==========================================\n\n\n\nIn Figure 6 (a) of Flare Routing Paper\n<https://bitfury.com/content/downloads/whitepaper_flare_an_approach_to_routing_in_lightning_network_7_7_2016.pdf>\n[1]\nthe results for Graph order = 2000 are (the numbers are estimated\napproximately from the figure):\n\n==========================================\n                            Reachability in Graph\n==========================================\n                  Q = 0        Q = 1            Q > 1         Total\n==========================================\n    B = 2       0%             4%              56%           60%\n==========================================\n    B = 4       1%            79%             18%           98%\n==========================================\n\nAs we can see the reachability with zero queried nodes is more than\nexpected.\nThe reachability with one queried node is more than expected for 2 beacons\nand lesser than expected for 4 beacons.\nThe reachability with more than one queried nodes is lesser than expected\nfor 2 beacons and is more than expected for 4 beacons.\nAs a result, the total reachability is lesser by around 8% for 2 beacons\nand is almost equal for 4 beacons.\n\nPlease help by providing suggestions to overcome the discrepancies in\nreproducing the results.\nAlso, suggestions are welcome to help improve the design of algorithm.\n\n[1]\nhttps://bitfury.com/content/downloads/whitepaper_flare_an_approach_to_routing_in_lightning_network_7_7_2016.pdf\n[2] https://github.com/shrutihiray/lightning-flare\n\nThanks and Regards,\nShruti\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180919/ed4250f4/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Reproducing Flare routing results",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Shruti Hiray"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2756
        }
    },
    {
        "title": "[Lightning-dev] RouteBoost: Adding 'r=' fields to BOLT 11 invoices to flag capacity",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2018-09-20T02:10:41",
                "message_text_only": "Hi all,\n\n        I'm considering a change to c-lightning, where `invoice` would\nautomatically append an 'r' field for a channel which has sufficient\n*incoming* capacity for the amount (using a weighted probability across\nour peers).\n\n         This isn't quite what 'r' was for, but it would be a useful\nhint for payment routing and also potentially for establishing an\ninitial channel.  This is an issue for the Blockstream Store which\ndeliberately doesn't advertize an address any more to avoid\ncentralization.\n\nThoughts welcome!\nRusty."
            },
            {
                "author": "Johan Tor\u00e5s Halseth",
                "date": "2018-09-20T07:18:03",
                "message_text_only": "Any reason not to include _all_ (up to a limit) incoming channels with\nsufficient capacity?\n\nCheers,\nJohan\n\nOn Thu, Sep 20, 2018 at 4:12 AM Rusty Russell <rusty at blockstream.com> wrote:\n\n> Hi all,\n>\n>         I'm considering a change to c-lightning, where `invoice` would\n> automatically append an 'r' field for a channel which has sufficient\n> *incoming* capacity for the amount (using a weighted probability across\n> our peers).\n>\n>          This isn't quite what 'r' was for, but it would be a useful\n> hint for payment routing and also potentially for establishing an\n> initial channel.  This is an issue for the Blockstream Store which\n> deliberately doesn't advertize an address any more to avoid\n> centralization.\n>\n> Thoughts welcome!\n> Rusty.\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180920/83c90ab3/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2018-09-20T07:25:54",
                "message_text_only": "That might not be so desirable, since it leaks the current channel\ncapacity to the user. Depending on how fine grained the amount in the\ninvoice is and how the user can control it, he could do a binary search\nover capacities and very reliably tell how much capacity you have and\ntrack it over time. That is still the case for a single channel, but if\nyou always chose the same channel it reduces how much info is leaked.\n\nCheers,\nChristian\n\nJohan Tor\u00e5s Halseth <johanth at gmail.com> writes:\n> Any reason not to include _all_ (up to a limit) incoming channels with\n> sufficient capacity?\n>\n> Cheers,\n> Johan\n>\n> On Thu, Sep 20, 2018 at 4:12 AM Rusty Russell <rusty at blockstream.com> wrote:\n>\n>> Hi all,\n>>\n>>         I'm considering a change to c-lightning, where `invoice` would\n>> automatically append an 'r' field for a channel which has sufficient\n>> *incoming* capacity for the amount (using a weighted probability across\n>> our peers).\n>>\n>>          This isn't quite what 'r' was for, but it would be a useful\n>> hint for payment routing and also potentially for establishing an\n>> initial channel.  This is an issue for the Blockstream Store which\n>> deliberately doesn't advertize an address any more to avoid\n>> centralization.\n>>\n>> Thoughts welcome!\n>> Rusty.\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Johan Tor\u00e5s Halseth",
                "date": "2018-09-20T08:28:52",
                "message_text_only": "I was thinking you could just make many requests to get the same\ninformation, but if you always choose the same channel as long as its\ncapacity meets the requirement, then not much is learnt :)\n\n\n\nOn Thu, Sep 20, 2018 at 9:26 AM Christian Decker <decker.christian at gmail.com>\nwrote:\n\n> That might not be so desirable, since it leaks the current channel\n> capacity to the user. Depending on how fine grained the amount in the\n> invoice is and how the user can control it, he could do a binary search\n> over capacities and very reliably tell how much capacity you have and\n> track it over time. That is still the case for a single channel, but if\n> you always chose the same channel it reduces how much info is leaked.\n>\n> Cheers,\n> Christian\n>\n> Johan Tor\u00e5s Halseth <johanth at gmail.com> writes:\n> > Any reason not to include _all_ (up to a limit) incoming channels with\n> > sufficient capacity?\n> >\n> > Cheers,\n> > Johan\n> >\n> > On Thu, Sep 20, 2018 at 4:12 AM Rusty Russell <rusty at blockstream.com>\n> wrote:\n> >\n> >> Hi all,\n> >>\n> >>         I'm considering a change to c-lightning, where `invoice` would\n> >> automatically append an 'r' field for a channel which has sufficient\n> >> *incoming* capacity for the amount (using a weighted probability across\n> >> our peers).\n> >>\n> >>          This isn't quite what 'r' was for, but it would be a useful\n> >> hint for payment routing and also potentially for establishing an\n> >> initial channel.  This is an issue for the Blockstream Store which\n> >> deliberately doesn't advertize an address any more to avoid\n> >> centralization.\n> >>\n> >> Thoughts welcome!\n> >> Rusty.\n> >> _______________________________________________\n> >> Lightning-dev mailing list\n> >> Lightning-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> >>\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180920/114dfd18/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-09-21T23:16:44",
                "message_text_only": "> That might not be so desirable, since it leaks the current channel\n> capacity to the user\n\n>From my PoV, the only way a node can protect the _instantaneous_ available\nbandwidth in their channel is to randomly reject packets, even if they have\nthe bandwidth to actually accept and forward them.\n\nObserve that if a \"prober\" learns that you've _accepted_  a packet, then\nthey know you have at least that amount as available bandwidth. As a result,\nI can simply send varying sat packet sizes over to you, either with the\nwrong timelock, or an unknown payment hash. Since we don't yet have the\n\"unadd\" feature in the protocol, you _must_ accept the HTLC before you can\ncancel it. This is mitigated a bit by the max_htlc value in the channel\nupdate (basically our version of an MTU), but I can still just send\n_multiple_ HTLC's rather than one big one to attempt to ascertain your\navailable bandwidth.\n\n-- Laolu\n\n\nOn Thu, Sep 20, 2018 at 1:31 AM Johan Tor\u00e5s Halseth <johanth at gmail.com>\nwrote:\n\n> I was thinking you could just make many requests to get the same\n> information, but if you always choose the same channel as long as its\n> capacity meets the requirement, then not much is learnt :)\n>\n>\n>\n> On Thu, Sep 20, 2018 at 9:26 AM Christian Decker <\n> decker.christian at gmail.com> wrote:\n>\n>> That might not be so desirable, since it leaks the current channel\n>> capacity to the user. Depending on how fine grained the amount in the\n>> invoice is and how the user can control it, he could do a binary search\n>> over capacities and very reliably tell how much capacity you have and\n>> track it over time. That is still the case for a single channel, but if\n>> you always chose the same channel it reduces how much info is leaked.\n>>\n>> Cheers,\n>> Christian\n>>\n>> Johan Tor\u00e5s Halseth <johanth at gmail.com> writes:\n>> > Any reason not to include _all_ (up to a limit) incoming channels with\n>> > sufficient capacity?\n>> >\n>> > Cheers,\n>> > Johan\n>> >\n>> > On Thu, Sep 20, 2018 at 4:12 AM Rusty Russell <rusty at blockstream.com>\n>> wrote:\n>> >\n>> >> Hi all,\n>> >>\n>> >>         I'm considering a change to c-lightning, where `invoice` would\n>> >> automatically append an 'r' field for a channel which has sufficient\n>> >> *incoming* capacity for the amount (using a weighted probability across\n>> >> our peers).\n>> >>\n>> >>          This isn't quite what 'r' was for, but it would be a useful\n>> >> hint for payment routing and also potentially for establishing an\n>> >> initial channel.  This is an issue for the Blockstream Store which\n>> >> deliberately doesn't advertize an address any more to avoid\n>> >> centralization.\n>> >>\n>> >> Thoughts welcome!\n>> >> Rusty.\n>> >> _______________________________________________\n>> >> Lightning-dev mailing list\n>> >> Lightning-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>> >>\n>> > _______________________________________________\n>> > Lightning-dev mailing list\n>> > Lightning-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180921/034910ba/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2018-09-26T23:03:33",
                "message_text_only": "Olaoluwa Osuntokun <laolu32 at gmail.com> writes:\n>> That might not be so desirable, since it leaks the current channel\n>> capacity to the user\n>\n>>From my PoV, the only way a node can protect the _instantaneous_ available\n> bandwidth in their channel is to randomly reject packets, even if they have\n> the bandwidth to actually accept and forward them.\n>\n> Observe that if a \"prober\" learns that you've _accepted_  a packet, then\n> they know you have at least that amount as available bandwidth. As a result,\n> I can simply send varying sat packet sizes over to you, either with the\n> wrong timelock, or an unknown payment hash.\n\nYes.  You have to have a false capacity floor, which must vary\nperiodically, to protect against this kind of probing (randomly failing\nattempts as you get close to zero capaicty is also subject to probing,\nAFAICT).\n\n> Since we don't yet have the\n> \"unadd\" feature in the protocol, you _must_ accept the HTLC before you can\n> cancel it. This is mitigated a bit by the max_htlc value in the channel\n> update (basically our version of an MTU), but I can still just send\n> _multiple_ HTLC's rather than one big one to attempt to ascertain your\n> available bandwidth.\n\nThis is orothogonal.  There's no point probing your own channel, you're\npresumably probing someone else's.\n\nCheers,\nRusty."
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-09-29T01:48:34",
                "message_text_only": "> This is orothogonal.  There's no point probing your own channel, you're\n> presumably probing someone else's.\n\nIn my scenario, you're receiving a new HTLC, from some remote party\nunbeknownst to you. I was replying to cdecker's reply to johan that one\nwouldn't always add this new type of routing hint for all channels since it\nleaks available bandwidth information. Without something like an \"unadd\" you\ncan't do anything against an individual attempting to prob you other than\ndrop packets (drop as in don't even add to your commit, resulting in an HTLC\ntimeout), as if you cancel back, then they know that you had enough\nbandwidth to _accept_ the HTLC in the first place.\n\n-- Laolu\n\n\nOn Wed, Sep 26, 2018 at 5:54 PM Rusty Russell <rusty at blockstream.com> wrote:\n\n> Olaoluwa Osuntokun <laolu32 at gmail.com> writes:\n> >> That might not be so desirable, since it leaks the current channel\n> >> capacity to the user\n> >\n> >>From my PoV, the only way a node can protect the _instantaneous_\n> available\n> > bandwidth in their channel is to randomly reject packets, even if they\n> have\n> > the bandwidth to actually accept and forward them.\n> >\n> > Observe that if a \"prober\" learns that you've _accepted_  a packet, then\n> > they know you have at least that amount as available bandwidth. As a\n> result,\n> > I can simply send varying sat packet sizes over to you, either with the\n> > wrong timelock, or an unknown payment hash.\n>\n> Yes.  You have to have a false capacity floor, which must vary\n> periodically, to protect against this kind of probing (randomly failing\n> attempts as you get close to zero capaicty is also subject to probing,\n> AFAICT).\n>\n> > Since we don't yet have the\n> > \"unadd\" feature in the protocol, you _must_ accept the HTLC before you\n> can\n> > cancel it. This is mitigated a bit by the max_htlc value in the channel\n> > update (basically our version of an MTU), but I can still just send\n> > _multiple_ HTLC's rather than one big one to attempt to ascertain your\n> > available bandwidth.\n>\n> This is orothogonal.  There's no point probing your own channel, you're\n> presumably probing someone else's.\n>\n> Cheers,\n> Rusty.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180928/3fae8786/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2018-09-29T01:36:15",
                "message_text_only": "This is now implemented (server side) in c-lightning/master:\n        https://github.com/ElementsProject/lightning/pull/1982\n\n(Note that c-lightning doesn't yet *use* the r= information:\n implementations should start doing that now though!)\n\nYou can test against both my mainnet and testnet nodes:\n\nmainnet:\n id: 024b9a1fa8e006f1e3937f65f66c408e6da8e1ca728ea43222a7381df1cc449605\n alias: BLUEIRON-v0.6.1rc2-81-g3ce53ab\n addresses: 128.199.202.168, 2400:6180:0:d0::5cd2:a001, vww5i3z3fvfkxylz.onion\n\ntestnet:\n id: 031a3478d481b92e3c28810228252898c5f0d82fc4d07f5210c4f34d4aba56b769\n alias: SLICKERMASTER-\n addresses: 165.227.30.200, 2604:a880:2:d0::2065:5001\n\nYou can autogenerate an invoice for testnet with:\n        http://165.227.30.200:8000/cgi-bin/payreq.sh\n\nIf there's insufficient incoming capacity, this *won't* produce an 'r'\nhint, but will issue a warning.\n\nCheers,\nRusty.\n\nRusty Russell <rusty at blockstream.com> writes:\n> Hi all,\n>\n>         I'm considering a change to c-lightning, where `invoice` would\n> automatically append an 'r' field for a channel which has sufficient\n> *incoming* capacity for the amount (using a weighted probability across\n> our peers).\n>\n>          This isn't quite what 'r' was for, but it would be a useful\n> hint for payment routing and also potentially for establishing an\n> initial channel.  This is an issue for the Blockstream Store which\n> deliberately doesn't advertize an address any more to avoid\n> centralization.\n>\n> Thoughts welcome!\n> Rusty."
            }
        ],
        "thread_summary": {
            "title": "RouteBoost: Adding 'r=' fields to BOLT 11 invoices to flag capacity",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Christian Decker",
                "Olaoluwa Osuntokun",
                "Johan Tor\u00e5s Halseth"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 14165
        }
    }
]