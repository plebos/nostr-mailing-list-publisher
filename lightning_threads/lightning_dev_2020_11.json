[
    {
        "title": "[Lightning-dev] Hold fees: 402 Payment Required for Lightning itself",
        "thread_messages": [
            {
                "author": "Bastien TEINTURIER",
                "date": "2020-11-02T14:33:48",
                "message_text_only": "Good morning Joost and Z,\n\nSo in your proposal, an htlc that is received by a routing node has the\n> following properties:\n> * htlc amount\n> * forward up-front payment (anti-spam)\n> * backward up-front payment (anti-hold)\n> * grace period\n> The routing node forwards this to the next hop with\n> * lower htlc amount (to earn routing fees when the htlc settles)\n> * lower forward up-front payment (to make sure that an attacker at the\n> other end loses money when failing quickly)\n> * higher backward up-front payment (to make sure that an attacker at the\n> other end loses money when holding)\n> * shorter grace period (so that there is time to fail back and not lose\n> the backward up-front payment)\n\n\nThat's exactly it, this is a good summary.\n\nAn issue with the bidirectional upfront/hold fees is related to trustless\n> offchain-to-onchain swaps, like Boltz and Lightning Loop.\n> As the claiming of the offchain side is dependent on claiming of the\n> onchain side of the trustless swap mechanism, which is *definitely* slow,\n> the swap service will in general be forced to pay up the hold fees.\n\n\nYes, that is a good observation.\nBut shouldn't the swap service take that into account in the fee it\ncollects to\nperform the swap? That way it is in fact the user who pays for that fee.\n\nCheers,\nBastien\n\nLe mer. 28 oct. 2020 \u00e0 02:13, ZmnSCPxj <ZmnSCPxj at protonmail.com> a \u00e9crit :\n\n> Good morning Bastien, Joost, and all,\n>\n> An issue with the bidirectional upfront/hold fees is related to trustless\n> offchain-to-onchain swaps, like Boltz and Lightning Loop.\n>\n> As the claiming of the offchain side is dependent on claiming of the\n> onchain side of the trustless swap mechanism, which is *definitely* slow,\n> the swap service will in general be forced to pay up the hold fees.\n>\n> It seems to me that the hold-fees mechanism cannot be ported over in the\n> onchain side, so even if you set a \"reasonable\" grace period at the swap\n> service of say 1 hour (and assuming forwarding nodes are OK with that\n> humongous grace period!), the onchain side of the swap can delay the\n> release of onchain.\n>\n> To mitigate against this, the swap service would need to issue a separate\n> invoice to pay for the hold fee for the \"real\" swap payment.\n> The Boltz protocol supports a separate mining-fee invoice (disabled on the\n> Boltz production servers) that is issued after the invoice is \"locked in\"\n> at the swap service, but I think that in view of the use of hold fee, a\n> combined mining-fee+hold-fee invoice would have to be issued at the same\n> time as the \"real\" swap invoice.\n>\n> Regards,\n> ZmnSCPxj\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201102/35e0cd03/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2020-11-02T23:10:39",
                "message_text_only": "Good morning t-bast,\n\n> > An issue with the bidirectional upfront/hold fees is related to trustless offchain-to-onchain swaps, like Boltz and Lightning Loop.\n> > As the claiming of the offchain side is dependent on claiming of the onchain side of the trustless swap mechanism, which is *definitely* slow, the swap service will in general be forced to pay up the hold fees.\n>\n> Yes, that is a good observation.\n> But shouldn't the swap service take that into account in the fee it collects to\n> perform the swap? That way it is in fact the user who pays for that fee.\n\nThe user can wait for the swap service to put an onchain HTLC and then time it out.\nThus, the offchain/onchain swap service will pay for both the onchain HTLC and the hold fee.\n\nThis is fixed in e.g. Boltz by having a separate mining-fee invoice as well that must be paid before the offchain/onchain swap service will create the onchain HTLC.\nThis is why I thought it would be better to include the hold fee in the mining-fee invoice as well.\n\nRegards,\nZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "Hold fees: 402 Payment Required for Lightning itself",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Bastien TEINTURIER",
                "ZmnSCPxj"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 3814
        }
    },
    {
        "title": "[Lightning-dev] Lightning Pool: A Non-Custodial Channel Lease Marketplace",
        "thread_messages": [
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2020-11-02T16:56:09",
                "message_text_only": "Hi y'all,\n\nWe've recently released a new system which may be of interest to this list,\nLightning Pool [1]. Alongside a working client [2], we've also released a\nwhite paper which goes deeper into the architecture of the system.\n\nPool builds on some earlier ideas that were tossed around the ML concerning\ncreating a market for dual-funding channels for the network (though the\nconcept\nitself pre-dates those posts). Rather than target dual-funded channels, we\nfocus on the current uni-directional channels, and allow users to buy+sell\nwhat\nwe call a \"channel lease\" that packages up inbound (and also potentially\noutbound via side-car channels!) liquidity paying out a premium for a fixed\nduration.\n\nLive testnet+mainnet markets were also released today, giving routing nodes\na\nnew stable revenue source, and allowing those that need inbound to bootstrap\ntheir new Lightning Service a new automated way to do so.\n\nThis is just our first alpha release which contains some\nlimits/simplifications\nin the system itself. We plan to continue to iterate on the system to\nimplement\nnew things like streaming interest payments, and the version of side-car\nchannels (buy a channel for a 3rd party) described in the paper amongst many\nother things.\n\n[1]: https://lightning.engineering/posts/2020-11-02-pool-deep-dive/\n[2]: https://github.com/lightninglabs/pool\n[3]: https://lightning.engineering/lightning-pool-whitepaper.pdf\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201102/eef148b7/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2020-11-05T05:14:20",
                "message_text_only": "Good morning laolu,\n\nThank you for your hard work!\n\nIs there a documentation for the client/server intercommunications protocol?\nHow stable is this protocol?\n\n\nA thought occurs to me:\n\n* The payment of the lease effectively shifts risk from established forwarding nodes to those purchasing incoming liquidity (i.e. new forwarding nodes, and merchants).\n  * The merchant/new forwarding node speculatively pays for the incoming channel lease, in the hope that it will recoup the loss in the future.\n    There exists the risk that it cannot actually utilize the incoming capacity it purchased.\n  * I believe this improves risk-sharing and improves the system health overall.\n\n\nA random, possibly-dumb idea is that a leased channel should charge 0 fees initially.\nOr, to be more specific:\n\n* The advertisement for the channel lease should include a channel feerate.\n  * At channel setup the *published* channel feerate should be 0.\n  * Both participants keep track of how much \"should\" have been paid in fee using the agreed-upon lease feerate.\n  * Once the \"should\" fee matches the original lease cost, the lessor is now free to set the channel feerate to nonzero.\n\nEnforcing that is a problem, however, since channel updates are unilateral, and of course the lessee cannot afford to close the channel it leased in case the lessor sets a nonzero feerate ahead of time.\n\nThis effectively makes the lease rate (cost per unit time per satoshi-in-channel) reflect the expected low-risk rate of return, which may be useful for market discovery.\n\n\nSecondarily to the Shadowchain discussion, it should be noted that if all onchain UTXOs were signed with n-of-n, there would not be a need for a fixed orchestrator; all n participants would cooperatively act as an orchestrator.\nOn the other hand, that requires cooperation (a single non-cooperating party is enough to disrupt the entire construction and require expensive onchain resolution), as well as a broadcast medium, and the simplest implementation of a broadcast medium over IP is to elect a participant to receive all messages and broadcast all the messages to the other participants, which is basically what the orchestrator is **also** doing.\nThus the tradeoff may be acceptable.\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2020-11-06T02:53:09",
                "message_text_only": "Hi Z,\n\nThanks for such kind words!\n\n> Is there a documentation for the client/server intercommunications\n> protocol?\n\nLong form documentation on the client/server protocol hasn't yet been\nwritten. However, just like Loop, the Pool client uses a fully-featured gRPC\nprotocol to communicate with the server. The set of protobufs describing the\ncurrent client <-> server protocol can be found here [1].\n\n> How stable is this protocol?\n\nI'd say it isn't yet to be considered \"stable\". We've branded the current\nrelease as an \"alpha\" release, as we want to leave open the possibility of\nbreaking changes in the API itself (in addition to the usual disclaimers),\nthough it's also possible to use proper upgrade mechanisms to never really\n_have_ to break the current protocol as is.\n\n> A random, possibly-dumb idea is that a leased channel should charge 0\nfees initially.\n> Enforcing that is a problem, however, since channel updates are\n> unilateral, and of course the lessee cannot afford to close the channel it\n> leased in case the lessor sets a nonzero feerate ahead of time.\n\nAgreed that the purchaser of a lease should be able to also receive a fee\nrate guarantee along with the channel lifetime enforcement. As you point\nout, in order to be able to express something like this, the protocol may\nneed to be extended to allow nodes to advertise certain pair-wise channel\nupdates, that are only valid if _both_ sides sign off on each other's\nadvertisements, similar to the initial announcement signatures message. On\nlookers in the network would possibly be able to recognize these new\nmodified channel update requirements via interpreting the bits in the\nchannel announcement itself, which requires both sides cooperating to\nproduce. It's also possible to dictate in the order of the channel lease\nitself that the channel be unadvertised, though I know how you feel about\nunadvertised channels :).\n\nIn the context of Lighting Pool itself, the employed node rating system can\nbe used to protect lease buyers from nodes that ramp up their fees after\nselling a lease, using a punitive mechanism. From the PoV of the incentives\nthough, they should find the \"smoothed\" out revenue attractive enough to set\nreasonable fees within sold channel leases.\n\nOne other thing that the purchaser of a lease needs to consider is effective\nutilization of the leased capital. As an example, they should ensure they're\nable to fully utilize the purchased bandwidth by using \"htlc acceptor\" type\nhooks to disallow forward through the channel (as they could be used to\nrebalance away the funds) to clamp down on \"lease leak\".\n\nI plan to significantly extend the current \"security analysis\" section to\ncover these aspects as well as some other considerations w.r.t the\ninteraction of Lifted UTXOs timeouts and batch confirmation/proposal in the\ncontext of Shadowchains. There'll also eventually be a more fleshed out\nimplementation section once we ship some features like adding additional\nduration buckets. The git repo of the LaTeX itself (which is embedded in the\nrendered PDF) can be found here [2].\n\n> Secondarily to the Shadowchain discussion, it should be noted that if all\n> onchain UTXOs were signed with n-of-n, there would not be a need for a\n> fixed orchestrator; all n participants would cooperatively act as an\n> orchestrator.\n\nThis is correct, and as you point out moving to an n-of-n structure between\nall participants runs into a number of scalability/coordination/availability\nissues. The existence of the orchestrator also serves to reduce the\navailability requirements of the participants, as the only need to be online\nto accept/validate a shadowchain block that contains any of its lifted\nUTXOs. With an addition of a merkle-tree/MMR/SMT over all chain state that's\ncommitted to in each block (say P2CH-style within the orchestrator's\noutput), an offline participant would still be able to \"fully validate\" all\noperations that happened while they were away. This structure could also be\nused to allow _new_ participants to audit the past history of the chain as\nwell, and can also be used to _authenticate_ lease rate data in the context\nof CLM/Pool (so an authenticated+verifiable price feed of sorts).\n\nIn the context of the Pool shadowchain, the existence of the orchestrator\nallows the participants to make other tradeoffs given it's slightly elevated\nsigning position. Consider that it may be \"safe\" for participants to\ninstantly (zero conf chans) start using any channels created via a lease as\ndouble spending the channel output itself requires coordination of _all_ the\nparticipants as well as the orchestrator as all accounts are time lock\nencumbered. Examining the dynamic more closely: as the auctioneer's account\nin the context of Pool/CLM isn't encumbered, then they'd be the only one\nable to spend their output unilaterally. However, they have an incentive to\nnot do so as they'd forfeit any paid execution fees in the chain. If we want\nto strengthen the incentives to make \"safe zero conf channel lease usage\"\nwork, then an on-chain bond can be created that's threaded through with each\nexecution auction batch. The auctioneer would then be required to sign its\naccount output with a \"single show signature\" allowing some/all the\nparticipants of the Pool to collect a security deposit as the auctioneer\nviolated the zero conf agreement.\n\n\n[1]:\nhttps://github.com/lightninglabs/pool/blob/master/poolrpc/auctioneer.proto\n[2]: https://github.com/lightninglabs/pool-paper\n\n-- Laolu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201105/d927920d/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2020-11-17T05:23:55",
                "message_text_only": "Good morning laolu,\n\nSorry for the late reply.\n\n\n> > A random, possibly-dumb idea is that a leased channel should charge 0 fees initially.\n> > Enforcing that is a problem, however, since channel updates are\n> > unilateral, and of course the lessee cannot afford to close the channel it\n> > leased in case the lessor sets a nonzero feerate ahead of time.\n>\n> Agreed that the purchaser of a lease should be able to also receive a fee\n> rate guarantee along with the channel lifetime enforcement. As you point\n> out, in order to be able to express something like this, the protocol may\n> need to be extended to allow nodes to advertise certain pair-wise channel\n> updates, that are only valid if _both_ sides sign off on each other's\n> advertisements, similar to the initial announcement signatures message. On\n> lookers in the network would possibly be able to recognize these new\n> modified channel update requirements via interpreting the bits in the\n> channel announcement itself, which requires both sides cooperating to\n> produce. It's also possible to dictate in the order of the channel lease\n> itself that the channel be unadvertised, though I know how you feel about\n> unadvertised channels :).\n>\n> In the context of Lighting Pool itself, the employed node rating system can\n> be used to protect lease buyers from nodes that ramp up their fees after\n> selling a lease, using a punitive mechanism. From the PoV of the incentives\n> though, they should find the \"smoothed\" out revenue attractive enough to set\n> reasonable fees within sold channel leases.\n>\n> One other thing that the purchaser of a lease needs to consider is effective\n> utilization of the leased capital. As an example, they should ensure they're\n> able to fully utilize the purchased bandwidth by using \"htlc acceptor\" type\n> hooks to disallow forward through the channel (as they could be used to\n> rebalance away the funds) to clamp down on \"lease leak\".\n\nOn the one hand, one possible use-case for this would be for a new forwarding node to come online.\nAs forwarding nodes must first *receive* a forwarding request before they can actually forward, incoming capacity is necessary as well in such a deployment.\n\nBut restricting forwards as you propose would make this exercise pointless, at least for forwarding nodes; to a forwarding node, getting forwards *is* the intended model and restricting those would just reduce its potential earnings.\n\nNow, in rebalancing away the incoming capacity, the channel lessor not only pays to the lessee the forwarding fee, but as well, also creates incoming capacity on *another* channel of the lessee.\nIf the lessee is a forwarding node, then it has still achieved what it wants, that is, it retains incoming capacity still.\n\nEven if the lessee is primarily a receiving merchant, if the lessor is able to successfully rebalance at all, then, again, *some* incoming capacity will appear on a different channel of the lessee.\n\nSo this is only really problematic if we are giving some kind of feerate assurance, since the incoming capacity never really disappears (unless the lessor actively overpays the forwarding fee to the lessee, and such an outright gift is likely more valuable than purchasing more incoming capacity), it just moves elsewhere.\nIt *could* move to a channel where reaching the lessee costs more for most nodes on the network, so I believe this is potentially an actual loss.\n\n\nIn a sense, a rebalance is an aggregation of multiple smaller payments.\nSuppose I am a forwarding node that is lucky enough to be channeled to a popular merchant.\nThe channel to the merchant gets a lot of little payments and eventually saturates.\nIf I have funds elsewhere, I can aggregate those multiple smaller payments into a single large payment from one of my other channels, and transfer to the popular channel to the popular node, so that more smaller payments can come into my channel with the popular merchant.\n\nSo I think rebalancing is good for the network in general, and should be supported well.\n\nRegards,\nZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "Lightning Pool: A Non-Custodial Channel Lease Marketplace",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Olaoluwa Osuntokun",
                "ZmnSCPxj"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 13565
        }
    },
    {
        "title": "[Lightning-dev] Minor tweaks to blinded path proposal",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2020-11-18T05:17:58",
                "message_text_only": "See:\n        https://github.com/lightningnetwork/lightning-rfc/blob/route-blinding/proposals/route-blinding.md\n\n1. Can we use additive tweaks instead of multiplicative?\n   They're slightly faster, and supported by the x-only secp API.\n2. Can we use x-only pubkeys?  It's generally trivial, and a byte\n   shorter.  I'm using them in offers to great effect.\n\nThanks!\nRusty."
            },
            {
                "author": "Bastien TEINTURIER",
                "date": "2020-11-19T13:57:11",
                "message_text_only": "Hey Rusty,\n\nGood questions.\n\nI think we could use additive tweaks, and they are indeed faster so it can\nbe worth doing.\nWe would replace `B(i) = HMAC256(\"blinded_node_id\", ss(i)) * P(i)` by `B(i)\n= HMAC256(\"blinded_node_id\", ss(i)) * G + P(i)`.\nIntuitively since the private key of the tweak comes from a hash function,\nit should offer the same security.\nBut there may be dragons lurking there, I don't know how to properly\nevaluate whether it's as secure (whereas the multiplicative\nversion is really just Sphinx, so we know it should be secure).\n\nIf we're able to use additive tweaks, we can probably indeed use x-only\npubkeys.\nEven though we're not storing these on-chain, so the 1 byte saved isn't\nworth much.\nI'd say that if it's trivial to use them, let's do it, otherwise it's not\nworth any additional effort.\n\nCheers,\nBastien\n\nLe mer. 18 nov. 2020 \u00e0 06:18, Rusty Russell <rusty at rustcorp.com.au> a\n\u00e9crit :\n\n>\n> See:\n>\n> https://github.com/lightningnetwork/lightning-rfc/blob/route-blinding/proposals/route-blinding.md\n>\n> 1. Can we use additive tweaks instead of multiplicative?\n>    They're slightly faster, and supported by the x-only secp API.\n> 2. Can we use x-only pubkeys?  It's generally trivial, and a byte\n>    shorter.  I'm using them in offers to great effect.\n>\n> Thanks!\n> Rusty.\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201119/90ab3153/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2020-11-21T23:26:10",
                "message_text_only": "Bastien TEINTURIER <bastien at acinq.fr> writes:\n> Hey Rusty,\n>\n> Good questions.\n>\n> I think we could use additive tweaks, and they are indeed faster so it can\n> be worth doing.\n> We would replace `B(i) = HMAC256(\"blinded_node_id\", ss(i)) * P(i)` by `B(i)\n> = HMAC256(\"blinded_node_id\", ss(i)) * G + P(i)`.\n> Intuitively since the private key of the tweak comes from a hash function,\n> it should offer the same security.\n> But there may be dragons lurking there, I don't know how to properly\n> evaluate whether it's as secure (whereas the multiplicative\n> version is really just Sphinx, so we know it should be secure).\n\nI agree.  I'll ask a real crypto person to review it, though.\n\n> If we're able to use additive tweaks, we can probably indeed use x-only\n> pubkeys.\n> Even though we're not storing these on-chain, so the 1 byte saved isn't\n> worth much.\n> I'd say that if it's trivial to use them, let's do it, otherwise it's not\n> worth any additional effort.\n\nI'll try and report back; I think it's trivial (I converted offers, and\nindeed it was trivial except needing a way to lookup a x-only node_id,\nwhich simply required two lookups).\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Minor tweaks to blinded path proposal",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Bastien TEINTURIER"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 3020
        }
    },
    {
        "title": "[Lightning-dev] SIGHASH_SINGLE + update_fee Considered Harmful",
        "thread_messages": [
            {
                "author": "Johan Tor\u00e5s Halseth",
                "date": "2020-11-23T15:11:52",
                "message_text_only": "Hi,\n\nPosting an update to this thread, as we are inching closer to an\nimplementation in lnd that handles this scenario.\n\nI put up a proposed PR today that attempts to solve this in a\nbackwards compatible manner:\nhttps://github.com/lightningnetwork/lnd/pull/4795\n\nThe gist is that in every state we check that the \"worst case fee\nleak\" is at most the channel reserve. The idea is that there should be\nno incentive to perform the attack as described, as the cheating party\nwill gain at most the channel reserve, but at the same time lose its\nchannel reserve.\n\nSince this makes small channels unusable at high fee rates (the leaked\nfee would exceed the channel reserve for just a few, even a single\nHTLC) we also clamp the maximum update_fee we'll send at 10 sat/b (a\nconfigurable value). As an example a 1,000,000 sat channel with a 1%\nchannel reserve would have space for 6 HTLCs at this fee rate.\n\n> Completely adhering to the bring-your-own-fee model for HTLC-txn sounds better as it splits more fairly fees burden between channel participants.\n\nI totally agree that this sounds like the best solution! AFAICT this\nwould require a (simple) spec change, but would definitely be a big\nwin and a simple implementation change when we are doing BYOF on the\nHTLC transactions anyway :)\n\n- Johan\n\nOn Mon, Sep 14, 2020 at 1:30 AM Antoine Riard <antoine.riard at gmail.com> wrote:\n>\n> Hi Johan,\n>\n> > I would be open to patching the spec to disallow update_fee for anchor\n> > channels, but maybe we can just add a warning and discourage it.\n>\n> My initial thinking was just to restrain it for the commitment-level only.\n>\n> Completely adhering to the bring-your-own-fee model for HTLC-txn sounds better as it splits more fairly fees burden between channel participants. The initiator won't have to pay for the remote's HTLC-txn, especially in periods of high-congestion. A participant shouldn't have to bear the cost of the counterparty choosing to go onchain, as it's mostly a client security parameter (\"how many blocks it will take me to confirm ?\")  or an economic decision (\"is this HTLC worthy to claim/expire ?\").\n>\n> One could argue it's increasing the blockspace footprint as you will use one more pair of input-output but if you're paying the feerate that's lawful usage.\n>\n> Antoine\n>\n> Le ven. 11 sept. 2020 \u00e0 04:15, Johan Tor\u00e5s Halseth <johanth at gmail.com> a \u00e9crit :\n>>\n>> Hi,\n>>\n>> Very good observation, most definitely not a type of attack I forseen!\n>>\n>> Luckily, it was the plan to phase out update_fee all along, in favor\n>> of only accepting the minimum relay fee (zero fee if/when package\n>> relay is a reality). If I understand the scenario correctly, that\n>> should mitigate this attack completely, as the attacker cannot impact\n>> the intended miner fees on the HTLCs, and could only siphon off the\n>> minimal miner fee if anything at all.\n>>\n>> I would be open to patching the spec to disallow update_fee for anchor\n>> channels, but maybe we can just add a warning and discourage it.\n>>\n>> Johan\n>>\n>>\n>> On Thu, Sep 10, 2020 at 8:13 PM Olaoluwa Osuntokun <laolu32 at gmail.com> wrote:\n>> >\n>> > Hi Antoine,\n>> >\n>> > Great findings!\n>> >\n>> > I think an even simpler mitigation is just for the non-initiator to _reject_\n>> > update_fee proposals that are \"unreasonable\". The non-initiator can run a\n>> > \"fee leak calculation\" to compute the worst-case leakage of fees in the\n>> > revocation case. This can be done to day without any significant updates to\n>> > implementations, and some implementations may already be doing this.\n>> >\n>> > One issue is that we don't have a way to do a \"soft reject\" of an update_fee\n>> > as is. However, depending on the implementations, it may be possible to just\n>> > reconnect and issue a co-op close if there're no HTLCs on the commitment\n>> > transaction.\n>> >\n>> > As you mentioned by setting proper values for max allowed htlcs, max in\n>> > flight, reserve, etc, nodes are able to quantify this fee leak risk ahead of\n>> > time, and set reasonable parameters based on their security model. One issue\n>> > is that these values are set in stone rn when the channel is opened, but\n>> > future iterations of dynamic commitments may allow us to update them on the\n>> > fly.\n>> >\n>> > In the mid-term, implementations can start to phase out usage of update_fee\n>> > by setting a minimal commitment fee when the channel is first opened, then\n>> > relying on CPFP to bump up the commitment and any HTLCs if needed. This\n>> > discovery might very well hasten the demise of update_fee in the protocol\n>> > all together as well.  I don't think we need to depend entirely on a\n>> > theoretical package relay Bitcoin p2p upgrade assuming implementations are\n>> > willing to make an assumption that say 20 sat/byte or w/e has a good chance\n>> > of widespread propagation into mempools.\n>> >\n>> > From the perspective of channel safety, and variations of attacks like\n>> > \"flood & loot\", imo it's absolutely critical that nodes are able to update\n>> > the fees on their second-level HTLC transactions. As this is where the real\n>> > danger lies: if nodes aren't able to get 2nd level HTLCs in the chain in\n>> > time, then the incoming HTLC expiry will expire, creating a race condition\n>> > across both commitments which can potentially cascade.\n>> >\n>> > In lnd today, anchors is still behind a build flag, but we plan to enable\n>> > it by default for our upcoming 0.12 release. The blockers on our end were to\n>> > add support for towers, and add basic deadline aware bumping, both of which\n>> > are currently on track. We'll now also look into setting clamps on the\n>> > receiver end to just not accept unreasonable values for the fee rate of a\n>> > commitment, as this ends up eating into the true HTLC values for both sides.\n>> >\n>> > -- Laolu\n>> >\n>> >\n>> > On Thu, Sep 10, 2020 at 9:28 AM Antoine Riard <antoine.riard at gmail.com> wrote:\n>> >>\n>> >> Hi,\n>> >>\n>> >> In this post, I would like to expose a potential vulnerability introduced by the recent anchor output spec update related to the new usage of SIGHASH_SINGLE for HTLC transactions. This new malleability combined with the currently deployed mechanism of `update_fee` is likely harmful for funds safety.\n>> >>\n>> >> This has been previously shared with deployed implementations devs, as anchor channels are flagged as experimental it's better to discuss and solve this publicly. That said, if you're currently running experimental anchor channels with non-trusted parties on mainnet, you might prefer to close them.\n>> >>\n>> >> # SIGHASH_SINGLE and `update_fee` (skip it if you're familiar)\n>> >>\n>> >> First, let's get started by a quick reminder of the data set committed by signature digest algorithm of Segwit transactions (BIP 143):\n>> >> * nVersion\n>> >> * hashPrevouts\n>> >> * hashSequence\n>> >> * outpoint\n>> >> * scriptCode of the input\n>> >> * value of the output spent by this input\n>> >> * nSequence of the input\n>> >> * hashOutputs\n>> >> * nLocktime\n>> >> * sighash type of the signature\n>> >>\n>> >> Anchor output switched the sighash type from SIGHASH_ALL to SIGHASH_SINGLE | SIGHASH_ANYONECANPAY for HTLC signatures sent to your counterparty. Thus it can spend non-cooperatively its HTLC outputs on its commitment transactions. I.e when Alice broadcasts her commitment transaction, every Bob's signatures on Alice's HTLC-Success/Timeout transactions are now flagging the new sighash type.\n>> >>\n>> >> Thus `hashPrevouts`, `hashSequence` (ANYONECANPAY) and `hashOutputs` (SINGLE) aren't committed anymore. SINGLE only enforces commitment to the output scriptpubkey/amount at the same index that\n>> >> the spending input. Alice is free to attach additional inputs/outputs to her HTLC transaction. This change is aiming to let a single-party bump the feerate of 2nd-stage HTLC transactions in case of mempool-congestion, without counterparty cooperation and thus make HTLC funds safer.\n>> >>\n>> >> The attached outputs are _not_ encumbered by a revokeable redeemscript for a potential punishment.\n>> >>\n>> >> That said, anchor ouput spec didn't change disable the current fee mechanism already covering HTLC transactions. Pre/post-anchor channels are negotiating a feerate through `update_fee` exchange, initiated by the channel funder. This `update_fee` can be rejected by the receiver if it's deemed unreasonable compared to your local fee estimator view, but as of today implementations are pretty liberal in their acceptance, admitting a divergence from a scale of 1 to no-bound at all.\n>> >>\n>> >> This negotiated feerate (`feerate_per_kw`) is used by channel participants to compute effective fees which have to be deduced either from the funder balance output for commitment transactions or from HTLC output value for HTLC transactions.\n>> >>\n>> >> # The Vulnerability : a Penalty Escape Vector\n>> >>\n>> >> By increasing the feerate thanks to `update_fee`, a malicious party can inflate fees committed on HTLC input/output pairs and redirect this inflated fee to a single-controlled output attached to these malleable pairs. This won't be punishable by an honest party in case of revoked state broadcast and thus enable to partially escape the penalty.\n>> >>\n>> >> As an example, Alice and Bob have a 100_000 sats channel. `feerate_per_kw` is 10000 sats.\n>> >>\n>> >> At state N, Alice balance is all on her side. She announces 10 outgoing HTLCs of value 7000 sats.\n>> >>\n>> >> As Commitment tx weight with 10 outputs is 2844 (post-anchor), the absolute fee committed is 28440 sats.\n>> >>\n>> >> As HTLC-timeout weight is 666 (post-anchor), the absolute fee committed is of 6660 sat, the HTLC tx output as counter-signed by Bob is of 340 sat. This absolute fee aims to pay the miner fee in case Alice needs to timeout HTLC onchain.\n>> >>\n>> >> Her remaining balance is 1560 sat, above both dust_limit_satoshi and the channel reserve as constrained by Bob (likely 1%).\n>> >>\n>> >> Alice waits for HTLCs to expire and advances state to N+1. Then she empties her balance minus reserve by sending a HTLC relayed by Bob either to a colluding channel on the rest of network or back to an onchain address thanks to a swap service.\n>> >>\n>> >> At state N+2, Alice finalizes HTLC-timeout of state N by capturing almost all of the absolute fee to a new P2WPKH output only controlled by her. She broadcasts the revoked commitment tx N and burns 28440 sats in commitment fee.\n>> >>\n>> >> Her balance of 1560 sats is punished by Bob's justice transaction.\n>> >>\n>> >> After confirmation and thus maturing of the CSV of 1 on her HTLC output Alice broadcasts her 10 HTLC-timeout sending back to her 6660 sat - 660 to pay a low-fee. Bob punishes the 10 HTLC-timeout outputs of 340 sats.\n>> >>\n>> >> Alice gain =  99_000 (swap spend) + 66_660 (HTLCs escape) - 1560 (commitment balance punishment) - 28440 (commitment fee) - 660*10 (HTLCs fees) - 340*10 (HTLCs output) = 125600 sats.\n>> >>\n>> >> Alice's gain is superior at channel value as it has been partially double-spend by bypassing the revocation punishment.\n>> >>\n>> >> # Limitations of Attacker Success\n>> >>\n>> >> A first limitation of attack success which can be point of is the fact that post-anchor HTLC outputs are CSV'ed by 1, which means in theory a honest party can punish this output before the malicious spend them with the revoked HTLC txn. In practice a malicious party can attach a branch of descendants to its anchor output and that way only allowing one more mempool victim's transaction on the revoked commitment. The victim must spend all outputs at once or otherwise they're going to obstrucate each other at mempool acceptance.\n>> >>\n>> >> Secondly, other limitations  are the per-implementation channel policy `max_accepted_htlcs`, `max_htlc_value_in_flight`, `channel_reserve` and acceptance bound of `update_fee`. A quick look at default policies, even if they vary between deploy implementations, let it think there is room to escape a substantial part of channel value.\n>> >>\n>> >> Lastly, after the revoked commitment transaction is confirmed, both attacker and victim are in a feerate race to confirm either a justice transaction or a malicious HTLC-timeout. As fee estimator logic of the victim's implementation is a public piece of knowledge, it shouldn't be hard for the attacker to know the range of the first fee bid and override it by a bit to confirm it before the victim RBF at next block. Currently, not all implementations have RBF of justice transactions.\n>> >>\n>> >> As of today, if anchor output is deployed and given how LN implementations are managing fees/rebroadcast of onchain transactions, the chance of attack success sounds high in my opinion.\n>> >>\n>> >> # Countermeasures\n>> >>\n>> >> Channel policies could be tighter, like bounded further down `max_accepted_htlcs` or restraining acceptance of `update_fee`. For the latter, it's pretty hard as a) fee estimators diverge on mempool views b) an attacker can craft escape HTLC-txn in a period of high-fee and patiently waits a low-fee period to launch the exploitation.\n>> >>\n>> >> Justice transactions can adopt a scorched earth approach binding their feerate to the max to increase odds of winning the feerate race and thus deter attackers. But this sounds like introducing a griefing attack vector. Your counterparty can burn more of your lawful balance in fees than you'll punish its revoked balance.\n>> >>\n>> >> A workable option would be to patch current anchor spec to remove `feerate_per_kw` appliance on 2nd-stage transactions, maybe just committing a minimal relay fee.\n>> >>\n>> >> Thoughts of further countermeasures ?\n>> >>\n>> >> I think the vulnerability described is mostly right but please point any missing details.\n>> >>\n>> >> Cheers,\n>> >>\n>> >> Antoine\n>> >> _______________________________________________\n>> >> Lightning-dev mailing list\n>> >> Lightning-dev at lists.linuxfoundation.org\n>> >> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>> >\n>> > _______________________________________________\n>> > Lightning-dev mailing list\n>> > Lightning-dev at lists.linuxfoundation.org\n>> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            }
        ],
        "thread_summary": {
            "title": "SIGHASH_SINGLE + update_fee Considered Harmful",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Johan Tor\u00e5s Halseth"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 14161
        }
    },
    {
        "title": "[Lightning-dev] [c-lightning] v0.9.2 \"Now with 0-of-N Multisig\" Released",
        "thread_messages": [
            {
                "author": "lisa neigut",
                "date": "2020-11-23T18:09:20",
                "message_text_only": "We're pleased to announce the 0.9.2 release\n<https://github.com/ElementsProject/lightning/releases/tag/v0.9.2> of\nc-lightning, named by Sergi Delgado.\n\nThis is a significant release with new CLI-level notifications, better\nchannel state reporting, and stable plugin-hook call ordering.\n\nNote that as of this release c-lightning-generated **PSBTs** are only\nconsidered valid by bitcoind **v0.20.1** and above.\n\n**Did you know**: c-lightning deprecates features with 6 months warning,\nand you can set `allow-deprecated-apis=false` to test?\n\n## Highlights for Users\n\n * We now keep track of channel closure rationales. Wonder \"why did my\nchannel close\" no more. All channel state changes are now listed in\n`listpeers`'s `state_changes`.\n * *NEW* CLI/RPC notifications! Tired of waiting for `close` to finish\nwithout getting any updates? With notifications, the `close` command will\npublish notifications (think CLI status updates) for slow closes. Must have\n`allow-deprecated-apis` set to false for these to work.\n * New optional argument `commitment_feerate` on the `multifundchannel`\ncommand. This is useful for setting one feerate for the funding transaction\nand another for the channel commitment transactions.\n * Two new commands added to `hsmtool`!\n    * `generatehsm` allows you to create an HSM `hsm_secret` from a BIP39\npass phrase. (Note that due to c-lightning's current seed derivation\nprocess, wallet addresses aren't standard 'BIP39 to BIP32' compliant. Which\nis a fancy way of saying your pass phrase isn't portable to other,\nnon-clightning wallets.)\n    * `dumponchaindescriptors` will output the xpub for the HD wallet\nmaster key. This will let you track _swept_ c-lightning wallet funds --\nanchor outputs and unswept channel outputs won't be visible until swept.\n * The starting feerate for mutual closes has been reduced to 'slow', to\navoid overpayment.\n * In-memory log buffer now is 10MB, down from 100MB.\n\n\n## Highlights for the Network\n\n * We no longer support receiving full gossip from ancient LND nodes\n * Fixed re-transmission order of multiple new HTLCS. This was causing\nchannel closures with LND.\n\n\n## Highlights for Developers\n\n * Plugin hook call ordering. Hooks can now specify that they must be\ncalled 'before' or 'after' other plugins.\n * pyln-client will handle and send RPC command notifications.\n * pyln-proto now includes a pure python implementation of the sphinx onion\ncreation and processing.\n * PostgresSQL key-value DSNs now supported.\n * Plugin hook `htlc_accepted` can now return a custom `failure_onion`.\n\n\nMore details can be found at\nhttps://github.com/ElementsProject/lightning/blob/v0.9.2/CHANGELOG.md\n\nThanks to everyone for their contributions and bug reports; please keep\nthem coming.\n\nSince 0.9.1, we've had 321 commits from 15 different authors over ~58 days,\nan average commit rate of 5.5344 commits per day.\n\nA special thanks goes to the 4 first time contributors:\n\n * YOSHIDA Masanori @siburu\n * @grubles\n * Jordi Montes @positiveblue\n * @lakshit24\n\nCheers,\nLisa, Christian, Rusty, ZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201123/48d91ce7/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "v0.9.2 \"Now with 0-of-N Multisig\" Released",
            "categories": [
                "Lightning-dev",
                "c-lightning"
            ],
            "authors": [
                "lisa neigut"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3231
        }
    },
    {
        "title": "[Lightning-dev] Mitigating Channel Jamming with Stake Certificates",
        "thread_messages": [
            {
                "author": "Gleb Naumenko",
                "date": "2020-11-26T21:40:46",
                "message_text_only": "Hello list,\n\nIn this post, we explore a different approach to channel jamming mitigation.\nWe won\u2019t talk about the background here, for the problem description as well as some proposed solutions (mainly upfront payment schemes), see [1].\n\nWe\u2019re suggesting using UTXO ownership proofs (a.k.a. Stake Certificates) to solve this problem. Previously, these proofs were only used in the Lightning Network at channel announcement time to prevent malicious actors from announcing channels they don\u2019t control. One can think of it as a \u201cfidelity bond\u201d (as a scarce resource) as a requirement for sending HTLCs.\n\nWe start by overviewing issues with other solutions, and then present a naive, privacy-broken Stake Certificates. Then we examine designing a privacy-preserving version, evaluating them. At the end, we talk about non-trivial design decisions and open questions.\n\n## Issues with other proposals\n\nWe find unsatisfying that upfront payment schemes come at a cost of new fees (forward and/or backward), thus inflating payment cost for *any* payment.\nIn the future, the upfront base fee might even make \u201cmicropayments\u201d economically infeasible by exceeding the value they transfer. Thus, a good solution should not inflate payment cost while still requiring \u201cburning\u201d a scarce resource (so that the attack is not free).\n\nAnother issue with upfront payments is a circular trust dependency. Ideally, we shouldn\u2019t introduce anything less trust-minimized than the Lightning Network itself.\nUpfront payment schemes are not like that, because they in one way or another rely on the honest behavior of route participants.\n\nWe believe Stake Certificates we are going to introduce are satisfactory in both of these directions: they don\u2019t inflate payment costs for honest users and don\u2019t require trust. The main disadvantage of Stake Certificates seems to be the novel cryptography required.\nSee more details in the \u201cEvaluation\u201d section.\n\n## Channel Ownership Proofs as Routing Credit Balance\n\nLet\u2019s say Alice wants to relay an HTLC to Carol through Bob. Per the Stake Certificates scheme, she has to commit to a particular channel UTXO by embedding an ownership proof in the onion packet while sending an HTLC to Bob.\n\nBob then unwraps the onion and verifies:\n1) the channel identifier is pointing unambiguously to an on-chain UTXO;\n2) the ownership proof (e.g., a signature) is valid against the previously disclosed UTXO witness script.\n\nIf all those checks succeed, Bob should see if Alice hasn\u2019t exceeded her credit balance. In case she hasn\u2019t, Bob has to \u201cdecrement Alice\u2019s credit balance\u201d and relay the HTLC to Carol.\nDecrementing credit balance unconditionally of packet success or failure bounds liquidity abuse by malicious HTLC senders.\nSince there is no credit assigned initially, \u201cdecrementing the credit balance\u201d means just remembering that \u201cAlice spent X out of Y of the credit she received for her Stake Certificates\u201d.\n\nUnfortunately, this naive protocol is a privacy nightmare, because routing nodes can now easily assign every HTLC they forward to the sender\u2019s UTXO.\n\nLet\u2019s first define the terms here one more time, and then proceed to the non-naive, private Stake Certificates.\n\n- Stake Certificate. Either means a solution we\u2019re proposing or the primitive it is based on, namely proof of UTXO ownership. As we will argue later, it actually makes sense to use proof of LN channel UTXO ownership specifically rather than any funds ownership.\n- Stake Certificate value. An amount of the corresponding UTXO or a ballpark this amount provably \u00a0belongs to.\n- Credit balance. When Alice provides a routing node Bob with a Stake Certificate, Bob should increase Alice\u2019s routing credit balance. Alice is then limited in her payments by this balance, and this rule is enforced by routing nodes to prevent free channel jamming in the network. Note that ideally \u201cAlice\u2019s credit balance\u201c should be virtual and only known to Alice, while routing nodes should only observe per-UTXO credit balance. We currently assume that each routing node keeps track of per-UTXO credit balance separately, see \u201cDesign decisions\u201d for more details.\n- Stake-to-credit function defines how much credit balance is given per a Stake Certificate of a given value. This function is a policy of a routing node, and it should be announced.\n- Credit-to-value-transferred function defines how much value a sender can transfer along a given channel considering how much credit they might claim. The function may also consider different factors (e.g., the available capacity of a channel being used) to provide extra robustness.\n\n## Privacy-preserving Stake Certificates\n\nThe presented scheme could preserve privacy if it relied on zero-knowledge proofs of UTXO ownership by avoiding pointing to a particular UTXO.\nMore specifically, the verifier should be able to check that:\na) The staked UTXO is an element of the current UTXO set\nb) The prover knows the witness script committed by the UTXO witness program\nc) The prover knows a valid witness for the witness script\nd) The staked UTXO was not used to produce a different Stake Certificate which is currently in use as well.\n\nThe verifier should also have a way to see a Stake Certificate value to properly account for the credit. This can be achieved by restricting the UTXO set being proved upon to only those UTXOs with a specific range of values: \u201cI will prove that I own a UTXO among all UTXOs between 0.5 BTC and 1 BTC\u201d.\n\nUnfortunately, steps (b) and (c) require zero-knowledge protocols for general statements, which are more experimental primitives than most of the stuff we have in Bitcoin protocols,\nalthough we assume it\u2019s feasible to consider them for non-consensus stuff.\n\n## Evaluation\n\nStake Certificates, upfront payment schemes, and other potential solutions (given a particular configuration) may be compared along the following axis:\n1) Economic feasibility\n1a) What is the cost of overcoming the protection for an attacker? Likely a non-linear function: sats_spent =f(channels_to_jam, [\u2026])\n1b) How does this solution limit honest users?\n2) How sophisticated is this solution in terms of integration and making good UX?\n3) How complex is this solution in terms of protocol design/implementation?\n\nWhen it comes to (1a), both Stake Certificates and upfront payments are probably equal, in a way that they\u2019re just best-effort ideas to increase the attack cost. Unfortunately, we currently don\u2019t know how to design something as economically powerful as PoW in Bitcoin [3].\nThis aspect can be properly evaluated by applying these ideas to different hypothetical kinds of LN in a simulation and observing the resulting trade-off between (1a) and (1b) considering different attack strategies.\n\nIn the previous sections of this post, we have argued that Stake Certificates may provide a much better (1b) for the cost of (3) because it relies on zero-knowledge.\nWhen it comes to (2), the design of Stake Certificates may vary in terms of UX burden, from completely automatic to requiring custom actions with private keys from users.\n\nSome of these trade-offs along with other interesting questions are discussed in the following section.\n\n## Design decisions and questions\n\n#### Should the credit spending be gossipped across the entire network, or should only the routing nodes involved in the payment know?\n\nEconomically, these two approaches are likely to be equivalent, and it\u2019s just a matter of stake-to-credit ratio.\nHowever, announcing credit spending to the network results in a privacy leak. It also imposes bandwidth and CPU overhead on the routing nodes.\n\n#### Which zero-knowledge system should be used for Stake Certificates?\n\nChoosing a ZK system boils down to picking the right trade-offs of proving and verifying time, and assumptions. As we mentioned previously, we would need proving general statements.\nAt the same time, we need something cheap in both proving and verification, because Lightning is supposed to be fast.\nAt the same time, the setup probably doesn\u2019t matter, because proofs are supposed to be verified only by one participant, a routing node this proof is generated for.\nPerhaps we can also pick any cryptographic assumptions we want since this stuff is not mission-critical and can be easily updated if someone breaks a cryptographic assumption and we observe an attack.\n\n#### Should we allow holding *any* Bitcoins (not just LN channels) for Stake Certificates?\n\nThis idea might make sense if we\u2019re worried that some LN users might want to send more payments than they can afford per their credit. However, we believe that allowing any UTXO would give an attacker more opportunities to use their cold funds for this attack, or even have a secondary market where holders sell their proofs (they have nothing to loose).\nInstead, we should a) design the credit-to-stake-functions better; b) encourage users send payments across different routing nodes (since credits are not tracked globally) [4].\n\n#### What\u2019s the best credit-to-value-transferred function?\n\nWe reckon that this function should be not just linear to provide maximum security against malicious channel jammers. For example, we can charge more credit for the last 20% of the capacity of the *channel used for routing*. Alternatively, we could discourage making too many payments from the same UTXO within a short period of time by charging more credit in this case.\n\n#### What about the interactivity and lifetime of Stake Certificates?\n\nInteractive proofs mean that they are constructed on demand of a routing node, non-interactive means constructed by a payment sender ahead of time.\nBoth interactivity and lifetime have something to do with the ease of producing proof and accessing keys.\nWe will omit the details of the trade-off we consider, but it remains an open question.\n\n#### If Stake Certificates are valid for N blocks after proof generation, does it mean that if the UTXO is spent during those N blocks, new proof can be generated from the same coins without invalidating the old proof?\n\nYes, but an attacker would, first of all, have to pay an on-chain fee for this. If we\u2019re still worried about this problem, there are workaround ideas.\nFor example, we could have epochs of 100 blocks (every epoch starts at #XYZXYZ00 block). If at the start of an epoch, a channel wasn\u2019t in the UTXO set, it provides very little credit.\nAlternatively, we could expand the zero-knowledge part to proving that the coins were not yet spent.\n\n#### Should spending a UTXO reveal all Stake Certificates generated from it?\n\nThis would also solve the problem in the previous question, but it would mean a retrospective privacy leak again. To avoid a privacy leak, we should prevent this.\n\n#### What if malicious Sybil *routing* nodes failing payments causing other honest routing nodes to reduce the credit of an honest payment sender?\n\nBoth Stake Certificates and upfront payment schemes suffer from malicious routing nodes failing the payments and \u201cwasting\u201d the sender\u2019s credit or fees. This problem even applies out of the channel jamming context, when considering payment failure rate.\nThis problem can be addressed by reducing the reputation of faulty links and routing nodes on the payment sender node. When payment routing becomes a for-profit activity, this would encourage routing nodes to sanitize their links.\nThe mitigation can be even stronger by using \u201cprovable blaming\u201d introduced in [2].\n\n## Conclusion\n\nWe propose Stake Certificates, a new solution to channel jamming. Perhaps, it might not be the best near-term solution due to the complexity, but the zero satoshi overhead for honest payments is an appealing argument to switch to it in the future.\nThis proposal also illustrates how stake-based protocols can solve Sybil challenges in the Bitcoin ecosystem. Since this might be useful in other contexts (Sybil-resistance of many kinds, proof-of-ownership), discussing Stake Certificates is even more useful.\nThe next step is a discussion of Stake Certificates. If the community finds it interesting, then we should discuss the design questions mentioned above, and choose a cryptosystem.\n\nCheers,\nGleb Naumenko and Antoine Riard\n\n\u2014\u2014\u2014\n\nReferences and footnotes:\n1. https://github.com/t-bast/lightning-docs/blob/master/spam-prevention.md\n2. https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000135.html\n3. We don\u2019t actually suggest PoW to solve these issues, because a) the trade-off between honest user cost and attacker cost is misaligned due to specialized hardware and b) smartphones would die too fast if they have to compute PoW; PoW is just an unreachable example of system robustness due to well-aligned game theory.\n4. Secondary markets are still possible even if we restrict acceptable proofs to only LN channels, but supply would be much smaller, and markets would work much worse for an attacker.\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201126/618274fa/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2020-11-27T00:16:13",
                "message_text_only": "Good morning Gleb and Antoine,\n\nThis is certainly interesting!\n\nQuick question: if I am a routing node and receive a valid stake certificate, can I reuse this stake certificate on my own outgoing payments?\n\nIt seems to me that the proof-of-stake-certificate should also somehow integrate a detail of the current payment (such as payment hash/point) so it cannot be reused by routing nodes for their own outgoing payments.\n\nFor example, looking only at your naive privacy-broken proposal, the signature must use a `sign-to-contract` where the `R` in the signature is actually `R' + h(R' | payment_hash)` with the `R'` also revealed.\n\nRegards,\nZmnSCPxj\n\n> Hello list,\n>\n> In this post, we explore a different approach to channel jamming mitigation.\n> We won\u2019t talk about the background here, for the problem description as well as some proposed solutions (mainly upfront payment schemes), see [1].\n>\n> We\u2019re suggesting using UTXO ownership proofs (a.k.a. Stake Certificates) to solve this problem. Previously, these proofs were only used in the Lightning Network at channel announcement time to prevent malicious actors from announcing channels they don\u2019t control. One can think of it as a \u201cfidelity bond\u201d (as a scarce resource) as a requirement for sending HTLCs.\u00a0\n>\n> We start by overviewing issues with other solutions, and then present a naive, privacy-broken Stake Certificates. Then we examine designing a privacy-preserving version, evaluating them. At the end, we talk about non-trivial design decisions and open questions.\n>\n> ## Issues with other proposals\n>\n> We find unsatisfying that upfront payment schemes come at a cost of new fees (forward and/or backward), thus inflating payment cost for *any* payment.\n> In the future, the upfront base fee might even make \u201cmicropayments\u201d economically infeasible by exceeding the value they transfer. Thus, a good solution should not inflate payment cost while still requiring \u201cburning\u201d a scarce resource (so that the attack is not free).\n>\n> Another issue with upfront payments is a circular trust dependency. Ideally, we shouldn\u2019t introduce anything less trust-minimized than the Lightning Network itself.\n> Upfront payment schemes are not like that, because they in one way or another rely on the honest behavior of route participants.\n>\n> We believe Stake Certificates we are going to introduce are satisfactory in both of these directions: they don\u2019t inflate payment costs for honest users and don\u2019t require trust. The main disadvantage of Stake Certificates seems to be the novel cryptography required.\n> See more details in the \u201cEvaluation\u201d section.\n>\n> ## Channel Ownership Proofs as Routing Credit Balance\n>\n> Let\u2019s say Alice wants to relay an HTLC to Carol through Bob. Per the Stake Certificates scheme, she has to commit to a particular channel UTXO by embedding an ownership proof in the onion packet while sending an HTLC to Bob.\n>\n> Bob then unwraps the onion and verifies:\n> 1) the channel identifier is pointing unambiguously to an on-chain UTXO;\n> 2) the ownership proof (e.g., a signature) is valid against the previously disclosed UTXO witness script.\n>\n> If all those checks succeed, Bob should see if Alice hasn\u2019t exceeded her credit balance. In case she hasn\u2019t, Bob has to \u201cdecrement Alice\u2019s credit balance\u201d and relay the HTLC to Carol.\n> Decrementing credit balance unconditionally of packet success or failure bounds liquidity abuse by malicious HTLC senders.\n> Since there is no credit assigned initially, \u201cdecrementing the credit balance\u201d means just remembering that \u201cAlice spent X out of Y of the credit she received for her Stake Certificates\u201d.\n>\n> Unfortunately, this naive protocol is a privacy nightmare, because routing nodes can now easily assign every HTLC they forward to the sender\u2019s UTXO.\n>\n> Let\u2019s first define the terms here one more time, and then proceed to the non-naive, private Stake Certificates.\n>\n> - Stake Certificate. Either means a solution we\u2019re proposing or the primitive it is based on, namely proof of UTXO ownership. As we will argue later, it actually makes sense to use proof of LN channel UTXO ownership specifically rather than any funds ownership.\n> - Stake Certificate value. An amount of the corresponding UTXO or a ballpark this amount provably \u00a0belongs to.\n> - Credit balance. When Alice provides a routing node Bob with a Stake Certificate, Bob should increase Alice\u2019s routing credit balance. Alice is then limited in her payments by this balance, and this rule is enforced by routing nodes to prevent free channel jamming in the network. Note that ideally \u201cAlice\u2019s credit balance\u201c should be virtual and only known to Alice, while routing nodes should only observe per-UTXO credit balance. We currently assume that each routing node keeps track of per-UTXO credit balance separately, see \u201cDesign decisions\u201d for more details.\u00a0\n> - Stake-to-credit function defines how much credit balance is given per a Stake Certificate of a given value. This function is a policy of a routing node, and it should be announced.\n> - Credit-to-value-transferred function defines how much value a sender can transfer along a given channel considering how much credit they might claim. The function may also consider different factors (e.g., the available capacity of a channel being used) to provide extra robustness.\n>\n> ## Privacy-preserving Stake Certificates\n>\n> The presented scheme could preserve privacy if it relied on zero-knowledge proofs of UTXO ownership by avoiding pointing to a particular UTXO.\n> More specifically, the verifier should be able to check that:\n> a) The staked UTXO is an element of the current UTXO set\n> b) The prover knows the witness script committed by the UTXO witness program\n> c) The prover knows a valid witness for the witness script\n> d) The staked UTXO was not used to produce a different Stake Certificate which is currently in use as well.\n>\n> The verifier should also have a way to see a Stake Certificate value to properly account for the credit. This can be achieved by restricting the UTXO set being proved upon to only those UTXOs with a specific range of values: \u201cI will prove that I own a UTXO among all UTXOs between 0.5 BTC and 1 BTC\u201d.\n>\n> Unfortunately, steps (b) and (c) require zero-knowledge protocols for general statements, which are more experimental primitives than most of the stuff we have in Bitcoin protocols,\n> although we assume it\u2019s feasible to consider them for non-consensus stuff.\n>\n> ## Evaluation\n>\n> Stake Certificates, upfront payment schemes, and other potential solutions (given a particular configuration) may be compared along the following axis:\n> 1) Economic feasibility\n> 1a) What is the cost of overcoming the protection for an attacker? Likely a non-linear function: sats_spent =f(channels_to_jam, [\u2026])\n> 1b) How does this solution limit honest users?\n> 2) How sophisticated is this solution in terms of integration and making good UX?\n> 3) How complex is this solution in terms of protocol design/implementation?\n>\n> When it comes to (1a), both Stake Certificates and upfront payments are probably equal, in a way that they\u2019re just best-effort ideas to increase the attack cost. Unfortunately, we currently don\u2019t know how to design something as economically powerful as PoW in Bitcoin [3].\n> This aspect can be properly evaluated by applying these ideas to different hypothetical kinds of LN in a simulation and observing the resulting trade-off between (1a) and (1b) considering different attack strategies.\n>\n> In the previous sections of this post, we have argued that Stake Certificates may provide a much better (1b) for the cost of (3) because it relies on zero-knowledge.\n> When it comes to (2), the design of Stake Certificates may vary in terms of UX burden, from completely automatic to requiring custom actions with private keys from users.\n>\n> Some of these trade-offs along with other interesting questions are discussed in the following section.\n>\n> ## Design decisions and questions\n>\n> #### Should the credit spending be gossipped across the entire network, or should only the routing nodes involved in the payment know?\n>\n> Economically, these two approaches are likely to be equivalent, and it\u2019s just a matter of stake-to-credit ratio.\n> However, announcing credit spending to the network results in a privacy leak. It also imposes bandwidth and CPU overhead on the routing nodes.\n>\n> #### Which zero-knowledge system should be used for Stake Certificates?\n>\n> Choosing a ZK system boils down to picking the right trade-offs of proving and verifying time, and assumptions. As we mentioned previously, we would need proving general statements.\n> At the same time, we need something cheap in both proving and verification, because Lightning is supposed to be fast.\n> At the same time, the setup probably doesn\u2019t matter, because proofs are supposed to be verified only by one participant, a routing node this proof is generated for.\n> Perhaps we can also pick any cryptographic assumptions we want since this stuff is not mission-critical and can be easily updated if someone breaks a cryptographic assumption and we observe an attack.\n>\n> #### Should we allow holding *any* Bitcoins (not just LN channels) for Stake Certificates?\n>\n> This idea might make sense if we\u2019re worried that some LN users might want to send more payments than they can afford per their credit. However, we believe that allowing any UTXO would give an attacker more opportunities to use their cold funds for this attack, or even have a secondary market where holders sell their proofs (they have nothing to loose).\n> Instead, we should a) design the credit-to-stake-functions better; b) encourage users send payments across different routing nodes (since credits are not tracked globally) [4].\n>\n> #### What\u2019s the best credit-to-value-transferred function?\n>\n> We reckon that this function should be not just linear to provide maximum security against malicious channel jammers. For example, we can charge more credit for the last 20% of the capacity of the *channel used for routing*. Alternatively, we could discourage making too many payments from the same UTXO within a short period of time by charging more credit in this case.\n>\n> #### What about the interactivity and lifetime of Stake Certificates?\n>\n> Interactive proofs mean that they are constructed on demand of a routing node, non-interactive means constructed by a payment sender ahead of time.\n> Both interactivity and lifetime have something to do with the ease of producing proof and accessing keys.\n> We will omit the details of the trade-off we consider, but it remains an open question.\n>\n> #### If Stake Certificates are valid for N blocks after proof generation, does it mean that if the UTXO is spent during those N blocks, new proof can be generated from the same coins without invalidating the old proof?\n>\n> Yes, but an attacker would, first of all, have to pay an on-chain fee for this. If we\u2019re still worried about this problem, there are workaround ideas.\n> For example, we could have epochs of 100 blocks (every epoch starts at #XYZXYZ00 block). If at the start of an epoch, a channel wasn\u2019t in the UTXO set, it provides very little credit.\n> Alternatively, we could expand the zero-knowledge part to proving that the coins were not yet spent.\n>\n> #### Should spending a UTXO reveal all Stake Certificates generated from it?\n>\n> This would also solve the problem in the previous question, but it would mean a retrospective privacy leak again. To avoid a privacy leak, we should prevent this.\n>\n> #### What if malicious Sybil *routing* nodes failing payments causing other honest routing nodes to reduce the credit of an honest payment sender?\n>\n> Both Stake Certificates and upfront payment schemes suffer from malicious routing nodes failing the payments and \u201cwasting\u201d the sender\u2019s credit or fees. This problem even applies out of the channel jamming context, when considering payment failure rate.\n> This problem can be addressed by reducing the reputation of faulty links and routing nodes on the payment sender node. When payment routing becomes a for-profit activity, this would encourage routing nodes to sanitize their links.\n> The mitigation can be even stronger by using \u201cprovable blaming\u201d introduced in [2].\n>\n> ## Conclusion\n>\n> We propose Stake Certificates, a new solution to channel jamming. Perhaps, it might not be the best near-term solution due to the complexity, but the zero satoshi overhead for honest payments is an appealing argument to switch to it in the future.\n> This proposal also illustrates how stake-based protocols can solve Sybil challenges in the Bitcoin ecosystem. Since this might be useful in other contexts (Sybil-resistance of many kinds, proof-of-ownership), discussing Stake Certificates is even more useful.\n> The next step is a discussion of Stake Certificates. If the community finds it interesting, then we should discuss the design questions mentioned above, and choose a cryptosystem.\n>\n> Cheers,\n> Gleb Naumenko and Antoine Riard\n>\n> \u2014\u2014\u2014\n>\n> References and footnotes:\n> 1. https://github.com/t-bast/lightning-docs/blob/master/spam-prevention.md\n> 2. https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000135.html\n> 3. We don\u2019t actually suggest PoW to solve these issues, because a) the trade-off between honest user cost and attacker cost is misaligned due to specialized hardware and b) smartphones would die too fast if they have to compute PoW; PoW is just an unreachable example of system robustness due to well-aligned game theory.\n> 4. Secondary markets are still possible even if we restrict acceptable proofs to only LN channels, but supply would be much smaller, and markets would work much worse for an attacker."
            },
            {
                "author": "Gleb Naumenko",
                "date": "2020-11-27T05:57:53",
                "message_text_only": "Thank you for your interest :)\n\n> Quick question: if I am a routing node and receive a valid stake certificate, can I reuse this stake certificate on my own outgoing payments?\n\nThat probably should be avoided, otherwise a mediocre routing node gets a lot of jamming opportunities for no good.\n\nYou are right, that\u2019s a strong argument for proof \u201cinteractivity\u201d: every Certificate should probably commit to *at least* public key of the routing node it is generated for.\n\n\u2013 gleb\nOn Nov 27, 2020, 2:16 AM +0200, ZmnSCPxj <ZmnSCPxj at protonmail.com>, wrote:\n> Good morning Gleb and Antoine,\n>\n> This is certainly interesting!\n>\n> Quick question: if I am a routing node and receive a valid stake certificate, can I reuse this stake certificate on my own outgoing payments?\n>\n> It seems to me that the proof-of-stake-certificate should also somehow integrate a detail of the current payment (such as payment hash/point) so it cannot be reused by routing nodes for their own outgoing payments.\n>\n> For example, looking only at your naive privacy-broken proposal, the signature must use a `sign-to-contract` where the `R` in the signature is actually `R' + h(R' | payment_hash)` with the `R'` also revealed.\n>\n> Regards,\n> ZmnSCPxj\n>\n> > Hello list,\n> >\n> > In this post, we explore a different approach to channel jamming mitigation.\n> > We won\u2019t talk about the background here, for the problem description as well as some proposed solutions (mainly upfront payment schemes), see [1].\n> >\n> > We\u2019re suggesting using UTXO ownership proofs (a.k.a. Stake Certificates) to solve this problem. Previously, these proofs were only used in the Lightning Network at channel announcement time to prevent malicious actors from announcing channels they don\u2019t control. One can think of it as a \u201cfidelity bond\u201d (as a scarce resource) as a requirement for sending HTLCs.\n> >\n> > We start by overviewing issues with other solutions, and then present a naive, privacy-broken Stake Certificates. Then we examine designing a privacy-preserving version, evaluating them. At the end, we talk about non-trivial design decisions and open questions.\n> >\n> > ## Issues with other proposals\n> >\n> > We find unsatisfying that upfront payment schemes come at a cost of new fees (forward and/or backward), thus inflating payment cost for *any* payment.\n> > In the future, the upfront base fee might even make \u201cmicropayments\u201d economically infeasible by exceeding the value they transfer. Thus, a good solution should not inflate payment cost while still requiring \u201cburning\u201d a scarce resource (so that the attack is not free).\n> >\n> > Another issue with upfront payments is a circular trust dependency. Ideally, we shouldn\u2019t introduce anything less trust-minimized than the Lightning Network itself.\n> > Upfront payment schemes are not like that, because they in one way or another rely on the honest behavior of route participants.\n> >\n> > We believe Stake Certificates we are going to introduce are satisfactory in both of these directions: they don\u2019t inflate payment costs for honest users and don\u2019t require trust. The main disadvantage of Stake Certificates seems to be the novel cryptography required.\n> > See more details in the \u201cEvaluation\u201d section.\n> >\n> > ## Channel Ownership Proofs as Routing Credit Balance\n> >\n> > Let\u2019s say Alice wants to relay an HTLC to Carol through Bob. Per the Stake Certificates scheme, she has to commit to a particular channel UTXO by embedding an ownership proof in the onion packet while sending an HTLC to Bob.\n> >\n> > Bob then unwraps the onion and verifies:\n> > 1) the channel identifier is pointing unambiguously to an on-chain UTXO;\n> > 2) the ownership proof (e.g., a signature) is valid against the previously disclosed UTXO witness script.\n> >\n> > If all those checks succeed, Bob should see if Alice hasn\u2019t exceeded her credit balance. In case she hasn\u2019t, Bob has to \u201cdecrement Alice\u2019s credit balance\u201d and relay the HTLC to Carol.\n> > Decrementing credit balance unconditionally of packet success or failure bounds liquidity abuse by malicious HTLC senders.\n> > Since there is no credit assigned initially, \u201cdecrementing the credit balance\u201d means just remembering that \u201cAlice spent X out of Y of the credit she received for her Stake Certificates\u201d.\n> >\n> > Unfortunately, this naive protocol is a privacy nightmare, because routing nodes can now easily assign every HTLC they forward to the sender\u2019s UTXO.\n> >\n> > Let\u2019s first define the terms here one more time, and then proceed to the non-naive, private Stake Certificates.\n> >\n> > - Stake Certificate. Either means a solution we\u2019re proposing or the primitive it is based on, namely proof of UTXO ownership. As we will argue later, it actually makes sense to use proof of LN channel UTXO ownership specifically rather than any funds ownership.\n> > - Stake Certificate value. An amount of the corresponding UTXO or a ballpark this amount provably \u00a0belongs to.\n> > - Credit balance. When Alice provides a routing node Bob with a Stake Certificate, Bob should increase Alice\u2019s routing credit balance. Alice is then limited in her payments by this balance, and this rule is enforced by routing nodes to prevent free channel jamming in the network. Note that ideally \u201cAlice\u2019s credit balance\u201c should be virtual and only known to Alice, while routing nodes should only observe per-UTXO credit balance. We currently assume that each routing node keeps track of per-UTXO credit balance separately, see \u201cDesign decisions\u201d for more details.\n> > - Stake-to-credit function defines how much credit balance is given per a Stake Certificate of a given value. This function is a policy of a routing node, and it should be announced.\n> > - Credit-to-value-transferred function defines how much value a sender can transfer along a given channel considering how much credit they might claim. The function may also consider different factors (e.g., the available capacity of a channel being used) to provide extra robustness.\n> >\n> > ## Privacy-preserving Stake Certificates\n> >\n> > The presented scheme could preserve privacy if it relied on zero-knowledge proofs of UTXO ownership by avoiding pointing to a particular UTXO.\n> > More specifically, the verifier should be able to check that:\n> > a) The staked UTXO is an element of the current UTXO set\n> > b) The prover knows the witness script committed by the UTXO witness program\n> > c) The prover knows a valid witness for the witness script\n> > d) The staked UTXO was not used to produce a different Stake Certificate which is currently in use as well.\n> >\n> > The verifier should also have a way to see a Stake Certificate value to properly account for the credit. This can be achieved by restricting the UTXO set being proved upon to only those UTXOs with a specific range of values: \u201cI will prove that I own a UTXO among all UTXOs between 0.5 BTC and 1 BTC\u201d.\n> >\n> > Unfortunately, steps (b) and (c) require zero-knowledge protocols for general statements, which are more experimental primitives than most of the stuff we have in Bitcoin protocols,\n> > although we assume it\u2019s feasible to consider them for non-consensus stuff.\n> >\n> > ## Evaluation\n> >\n> > Stake Certificates, upfront payment schemes, and other potential solutions (given a particular configuration) may be compared along the following axis:\n> > 1) Economic feasibility\n> > 1a) What is the cost of overcoming the protection for an attacker? Likely a non-linear function: sats_spent =f(channels_to_jam, [\u2026])\n> > 1b) How does this solution limit honest users?\n> > 2) How sophisticated is this solution in terms of integration and making good UX?\n> > 3) How complex is this solution in terms of protocol design/implementation?\n> >\n> > When it comes to (1a), both Stake Certificates and upfront payments are probably equal, in a way that they\u2019re just best-effort ideas to increase the attack cost. Unfortunately, we currently don\u2019t know how to design something as economically powerful as PoW in Bitcoin [3].\n> > This aspect can be properly evaluated by applying these ideas to different hypothetical kinds of LN in a simulation and observing the resulting trade-off between (1a) and (1b) considering different attack strategies.\n> >\n> > In the previous sections of this post, we have argued that Stake Certificates may provide a much better (1b) for the cost of (3) because it relies on zero-knowledge.\n> > When it comes to (2), the design of Stake Certificates may vary in terms of UX burden, from completely automatic to requiring custom actions with private keys from users.\n> >\n> > Some of these trade-offs along with other interesting questions are discussed in the following section.\n> >\n> > ## Design decisions and questions\n> >\n> > #### Should the credit spending be gossipped across the entire network, or should only the routing nodes involved in the payment know?\n> >\n> > Economically, these two approaches are likely to be equivalent, and it\u2019s just a matter of stake-to-credit ratio.\n> > However, announcing credit spending to the network results in a privacy leak. It also imposes bandwidth and CPU overhead on the routing nodes.\n> >\n> > #### Which zero-knowledge system should be used for Stake Certificates?\n> >\n> > Choosing a ZK system boils down to picking the right trade-offs of proving and verifying time, and assumptions. As we mentioned previously, we would need proving general statements.\n> > At the same time, we need something cheap in both proving and verification, because Lightning is supposed to be fast.\n> > At the same time, the setup probably doesn\u2019t matter, because proofs are supposed to be verified only by one participant, a routing node this proof is generated for.\n> > Perhaps we can also pick any cryptographic assumptions we want since this stuff is not mission-critical and can be easily updated if someone breaks a cryptographic assumption and we observe an attack.\n> >\n> > #### Should we allow holding *any* Bitcoins (not just LN channels) for Stake Certificates?\n> >\n> > This idea might make sense if we\u2019re worried that some LN users might want to send more payments than they can afford per their credit. However, we believe that allowing any UTXO would give an attacker more opportunities to use their cold funds for this attack, or even have a secondary market where holders sell their proofs (they have nothing to loose).\n> > Instead, we should a) design the credit-to-stake-functions better; b) encourage users send payments across different routing nodes (since credits are not tracked globally) [4].\n> >\n> > #### What\u2019s the best credit-to-value-transferred function?\n> >\n> > We reckon that this function should be not just linear to provide maximum security against malicious channel jammers. For example, we can charge more credit for the last 20% of the capacity of the *channel used for routing*. Alternatively, we could discourage making too many payments from the same UTXO within a short period of time by charging more credit in this case.\n> >\n> > #### What about the interactivity and lifetime of Stake Certificates?\n> >\n> > Interactive proofs mean that they are constructed on demand of a routing node, non-interactive means constructed by a payment sender ahead of time.\n> > Both interactivity and lifetime have something to do with the ease of producing proof and accessing keys.\n> > We will omit the details of the trade-off we consider, but it remains an open question.\n> >\n> > #### If Stake Certificates are valid for N blocks after proof generation, does it mean that if the UTXO is spent during those N blocks, new proof can be generated from the same coins without invalidating the old proof?\n> >\n> > Yes, but an attacker would, first of all, have to pay an on-chain fee for this. If we\u2019re still worried about this problem, there are workaround ideas.\n> > For example, we could have epochs of 100 blocks (every epoch starts at #XYZXYZ00 block). If at the start of an epoch, a channel wasn\u2019t in the UTXO set, it provides very little credit.\n> > Alternatively, we could expand the zero-knowledge part to proving that the coins were not yet spent.\n> >\n> > #### Should spending a UTXO reveal all Stake Certificates generated from it?\n> >\n> > This would also solve the problem in the previous question, but it would mean a retrospective privacy leak again. To avoid a privacy leak, we should prevent this.\n> >\n> > #### What if malicious Sybil *routing* nodes failing payments causing other honest routing nodes to reduce the credit of an honest payment sender?\n> >\n> > Both Stake Certificates and upfront payment schemes suffer from malicious routing nodes failing the payments and \u201cwasting\u201d the sender\u2019s credit or fees. This problem even applies out of the channel jamming context, when considering payment failure rate.\n> > This problem can be addressed by reducing the reputation of faulty links and routing nodes on the payment sender node. When payment routing becomes a for-profit activity, this would encourage routing nodes to sanitize their links.\n> > The mitigation can be even stronger by using \u201cprovable blaming\u201d introduced in [2].\n> >\n> > ## Conclusion\n> >\n> > We propose Stake Certificates, a new solution to channel jamming. Perhaps, it might not be the best near-term solution due to the complexity, but the zero satoshi overhead for honest payments is an appealing argument to switch to it in the future.\n> > This proposal also illustrates how stake-based protocols can solve Sybil challenges in the Bitcoin ecosystem. Since this might be useful in other contexts (Sybil-resistance of many kinds, proof-of-ownership), discussing Stake Certificates is even more useful.\n> > The next step is a discussion of Stake Certificates. If the community finds it interesting, then we should discuss the design questions mentioned above, and choose a cryptosystem.\n> >\n> > Cheers,\n> > Gleb Naumenko and Antoine Riard\n> >\n> > \u2014\u2014\u2014\n> >\n> > References and footnotes:\n> > 1. https://github.com/t-bast/lightning-docs/blob/master/spam-prevention.md\n> > 2. https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000135.html\n> > 3. We don\u2019t actually suggest PoW to solve these issues, because a) the trade-off between honest user cost and attacker cost is misaligned due to specialized hardware and b) smartphones would die too fast if they have to compute PoW; PoW is just an unreachable example of system robustness due to well-aligned game theory.\n> > 4. Secondary markets are still possible even if we restrict acceptable proofs to only LN channels, but supply would be much smaller, and markets would work much worse for an attacker.\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201127/b8659b5f/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2020-11-27T06:45:59",
                "message_text_only": "Good morning Gleb,\n\n> Thank you for your interest :)\n>\n> > Quick question: if I am a routing node and receive a valid stake certificate, can I reuse this stake certificate on my own outgoing payments?\n>\n> That probably should be avoided, otherwise a mediocre routing node gets a lot of jamming opportunities for no good.\n>\n> You are right, that\u2019s a strong argument for proof \u201cinteractivity\u201d: every Certificate should probably commit to *at least* public key of the routing node it is generated for.\n\nRight, it would be better to have the certificate commit to a specific routing node rather than the payment hash/point as I proposed.\nCommitting to a payment hash/point allows a random forwarding node to probe the rest of the network using the same certificate, lowering the score for that certificate on much of the network.\n\nAnother constraint is that the proof has to be small, since we have to fit it all in a small onion...\n\nPresumably we also want the score to eventually \"settle to 0\" over time.\n\nRegards,\nZmnSCPxj\n\n>\n> \u2013 gleb\n> On Nov 27, 2020, 2:16 AM +0200, ZmnSCPxj <ZmnSCPxj at protonmail.com>, wrote:\n>\n> > Good morning Gleb and Antoine,\n> >\n> > This is certainly interesting!\n> >\n> > Quick question: if I am a routing node and receive a valid stake certificate, can I reuse this stake certificate on my own outgoing payments?\n> >\n> > It seems to me that the proof-of-stake-certificate should also somehow integrate a detail of the current payment (such as payment hash/point) so it cannot be reused by routing nodes for their own outgoing payments.\n> >\n> > For example, looking only at your naive privacy-broken proposal, the signature must use a `sign-to-contract` where the `R` in the signature is actually `R' + h(R' | payment_hash)` with the `R'` also revealed.\n> >\n> > Regards,\n> > ZmnSCPxj\n> >\n> > > Hello list,\n> > >\n> > > In this post, we explore a different approach to channel jamming mitigation.\n> > > We won\u2019t talk about the background here, for the problem description as well as some proposed solutions (mainly upfront payment schemes), see [1].\n> > >\n> > > We\u2019re suggesting using UTXO ownership proofs (a.k.a. Stake Certificates) to solve this problem. Previously, these proofs were only used in the Lightning Network at channel announcement time to prevent malicious actors from announcing channels they don\u2019t control. One can think of it as a \u201cfidelity bond\u201d (as a scarce resource) as a requirement for sending HTLCs.\u00a0\n> > >\n> > > We start by overviewing issues with other solutions, and then present a naive, privacy-broken Stake Certificates. Then we examine designing a privacy-preserving version, evaluating them. At the end, we talk about non-trivial design decisions and open questions.\n> > >\n> > > ## Issues with other proposals\n> > >\n> > > We find unsatisfying that upfront payment schemes come at a cost of new fees (forward and/or backward), thus inflating payment cost for *any* payment.\n> > > In the future, the upfront base fee might even make \u201cmicropayments\u201d economically infeasible by exceeding the value they transfer. Thus, a good solution should not inflate payment cost while still requiring \u201cburning\u201d a scarce resource (so that the attack is not free).\n> > >\n> > > Another issue with upfront payments is a circular trust dependency. Ideally, we shouldn\u2019t introduce anything less trust-minimized than the Lightning Network itself.\n> > > Upfront payment schemes are not like that, because they in one way or another rely on the honest behavior of route participants.\n> > >\n> > > We believe Stake Certificates we are going to introduce are satisfactory in both of these directions: they don\u2019t inflate payment costs for honest users and don\u2019t require trust. The main disadvantage of Stake Certificates seems to be the novel cryptography required.\n> > > See more details in the \u201cEvaluation\u201d section.\n> > >\n> > > ## Channel Ownership Proofs as Routing Credit Balance\n> > >\n> > > Let\u2019s say Alice wants to relay an HTLC to Carol through Bob. Per the Stake Certificates scheme, she has to commit to a particular channel UTXO by embedding an ownership proof in the onion packet while sending an HTLC to Bob.\n> > >\n> > > Bob then unwraps the onion and verifies:\n> > > 1) the channel identifier is pointing unambiguously to an on-chain UTXO;\n> > > 2) the ownership proof (e.g., a signature) is valid against the previously disclosed UTXO witness script.\n> > >\n> > > If all those checks succeed, Bob should see if Alice hasn\u2019t exceeded her credit balance. In case she hasn\u2019t, Bob has to \u201cdecrement Alice\u2019s credit balance\u201d and relay the HTLC to Carol.\n> > > Decrementing credit balance unconditionally of packet success or failure bounds liquidity abuse by malicious HTLC senders.\n> > > Since there is no credit assigned initially, \u201cdecrementing the credit balance\u201d means just remembering that \u201cAlice spent X out of Y of the credit she received for her Stake Certificates\u201d.\n> > >\n> > > Unfortunately, this naive protocol is a privacy nightmare, because routing nodes can now easily assign every HTLC they forward to the sender\u2019s UTXO.\n> > >\n> > > Let\u2019s first define the terms here one more time, and then proceed to the non-naive, private Stake Certificates.\n> > >\n> > > - Stake Certificate. Either means a solution we\u2019re proposing or the primitive it is based on, namely proof of UTXO ownership. As we will argue later, it actually makes sense to use proof of LN channel UTXO ownership specifically rather than any funds ownership.\n> > > - Stake Certificate value. An amount of the corresponding UTXO or a ballpark this amount provably \u00a0belongs to.\n> > > - Credit balance. When Alice provides a routing node Bob with a Stake Certificate, Bob should increase Alice\u2019s routing credit balance. Alice is then limited in her payments by this balance, and this rule is enforced by routing nodes to prevent free channel jamming in the network. Note that ideally \u201cAlice\u2019s credit balance\u201c should be virtual and only known to Alice, while routing nodes should only observe per-UTXO credit balance. We currently assume that each routing node keeps track of per-UTXO credit balance separately, see \u201cDesign decisions\u201d for more details.\u00a0\n> > > - Stake-to-credit function defines how much credit balance is given per a Stake Certificate of a given value. This function is a policy of a routing node, and it should be announced.\n> > > - Credit-to-value-transferred function defines how much value a sender can transfer along a given channel considering how much credit they might claim. The function may also consider different factors (e.g., the available capacity of a channel being used) to provide extra robustness.\n> > >\n> > > ## Privacy-preserving Stake Certificates\n> > >\n> > > The presented scheme could preserve privacy if it relied on zero-knowledge proofs of UTXO ownership by avoiding pointing to a particular UTXO.\n> > > More specifically, the verifier should be able to check that:\n> > > a) The staked UTXO is an element of the current UTXO set\n> > > b) The prover knows the witness script committed by the UTXO witness program\n> > > c) The prover knows a valid witness for the witness script\n> > > d) The staked UTXO was not used to produce a different Stake Certificate which is currently in use as well.\n> > >\n> > > The verifier should also have a way to see a Stake Certificate value to properly account for the credit. This can be achieved by restricting the UTXO set being proved upon to only those UTXOs with a specific range of values: \u201cI will prove that I own a UTXO among all UTXOs between 0.5 BTC and 1 BTC\u201d.\n> > >\n> > > Unfortunately, steps (b) and (c) require zero-knowledge protocols for general statements, which are more experimental primitives than most of the stuff we have in Bitcoin protocols,\n> > > although we assume it\u2019s feasible to consider them for non-consensus stuff.\n> > >\n> > > ## Evaluation\n> > >\n> > > Stake Certificates, upfront payment schemes, and other potential solutions (given a particular configuration) may be compared along the following axis:\n> > > 1) Economic feasibility\n> > > 1a) What is the cost of overcoming the protection for an attacker? Likely a non-linear function: sats_spent =f(channels_to_jam, [\u2026])\n> > > 1b) How does this solution limit honest users?\n> > > 2) How sophisticated is this solution in terms of integration and making good UX?\n> > > 3) How complex is this solution in terms of protocol design/implementation?\n> > >\n> > > When it comes to (1a), both Stake Certificates and upfront payments are probably equal, in a way that they\u2019re just best-effort ideas to increase the attack cost. Unfortunately, we currently don\u2019t know how to design something as economically powerful as PoW in Bitcoin [3].\n> > > This aspect can be properly evaluated by applying these ideas to different hypothetical kinds of LN in a simulation and observing the resulting trade-off between (1a) and (1b) considering different attack strategies.\n> > >\n> > > In the previous sections of this post, we have argued that Stake Certificates may provide a much better (1b) for the cost of (3) because it relies on zero-knowledge.\n> > > When it comes to (2), the design of Stake Certificates may vary in terms of UX burden, from completely automatic to requiring custom actions with private keys from users.\n> > >\n> > > Some of these trade-offs along with other interesting questions are discussed in the following section.\n> > >\n> > > ## Design decisions and questions\n> > >\n> > > #### Should the credit spending be gossipped across the entire network, or should only the routing nodes involved in the payment know?\n> > >\n> > > Economically, these two approaches are likely to be equivalent, and it\u2019s just a matter of stake-to-credit ratio.\n> > > However, announcing credit spending to the network results in a privacy leak. It also imposes bandwidth and CPU overhead on the routing nodes.\n> > >\n> > > #### Which zero-knowledge system should be used for Stake Certificates?\n> > >\n> > > Choosing a ZK system boils down to picking the right trade-offs of proving and verifying time, and assumptions. As we mentioned previously, we would need proving general statements.\n> > > At the same time, we need something cheap in both proving and verification, because Lightning is supposed to be fast.\n> > > At the same time, the setup probably doesn\u2019t matter, because proofs are supposed to be verified only by one participant, a routing node this proof is generated for.\n> > > Perhaps we can also pick any cryptographic assumptions we want since this stuff is not mission-critical and can be easily updated if someone breaks a cryptographic assumption and we observe an attack.\n> > >\n> > > #### Should we allow holding *any* Bitcoins (not just LN channels) for Stake Certificates?\n> > >\n> > > This idea might make sense if we\u2019re worried that some LN users might want to send more payments than they can afford per their credit. However, we believe that allowing any UTXO would give an attacker more opportunities to use their cold funds for this attack, or even have a secondary market where holders sell their proofs (they have nothing to loose).\n> > > Instead, we should a) design the credit-to-stake-functions better; b) encourage users send payments across different routing nodes (since credits are not tracked globally) [4].\n> > >\n> > > #### What\u2019s the best credit-to-value-transferred function?\n> > >\n> > > We reckon that this function should be not just linear to provide maximum security against malicious channel jammers. For example, we can charge more credit for the last 20% of the capacity of the *channel used for routing*. Alternatively, we could discourage making too many payments from the same UTXO within a short period of time by charging more credit in this case.\n> > >\n> > > #### What about the interactivity and lifetime of Stake Certificates?\n> > >\n> > > Interactive proofs mean that they are constructed on demand of a routing node, non-interactive means constructed by a payment sender ahead of time.\n> > > Both interactivity and lifetime have something to do with the ease of producing proof and accessing keys.\n> > > We will omit the details of the trade-off we consider, but it remains an open question.\n> > >\n> > > #### If Stake Certificates are valid for N blocks after proof generation, does it mean that if the UTXO is spent during those N blocks, new proof can be generated from the same coins without invalidating the old proof?\n> > >\n> > > Yes, but an attacker would, first of all, have to pay an on-chain fee for this. If we\u2019re still worried about this problem, there are workaround ideas.\n> > > For example, we could have epochs of 100 blocks (every epoch starts at #XYZXYZ00 block). If at the start of an epoch, a channel wasn\u2019t in the UTXO set, it provides very little credit.\n> > > Alternatively, we could expand the zero-knowledge part to proving that the coins were not yet spent.\n> > >\n> > > #### Should spending a UTXO reveal all Stake Certificates generated from it?\n> > >\n> > > This would also solve the problem in the previous question, but it would mean a retrospective privacy leak again. To avoid a privacy leak, we should prevent this.\n> > >\n> > > #### What if malicious Sybil *routing* nodes failing payments causing other honest routing nodes to reduce the credit of an honest payment sender?\n> > >\n> > > Both Stake Certificates and upfront payment schemes suffer from malicious routing nodes failing the payments and \u201cwasting\u201d the sender\u2019s credit or fees. This problem even applies out of the channel jamming context, when considering payment failure rate.\n> > > This problem can be addressed by reducing the reputation of faulty links and routing nodes on the payment sender node. When payment routing becomes a for-profit activity, this would encourage routing nodes to sanitize their links.\n> > > The mitigation can be even stronger by using \u201cprovable blaming\u201d introduced in [2].\n> > >\n> > > ## Conclusion\n> > >\n> > > We propose Stake Certificates, a new solution to channel jamming. Perhaps, it might not be the best near-term solution due to the complexity, but the zero satoshi overhead for honest payments is an appealing argument to switch to it in the future.\n> > > This proposal also illustrates how stake-based protocols can solve Sybil challenges in the Bitcoin ecosystem. Since this might be useful in other contexts (Sybil-resistance of many kinds, proof-of-ownership), discussing Stake Certificates is even more useful.\n> > > The next step is a discussion of Stake Certificates. If the community finds it interesting, then we should discuss the design questions mentioned above, and choose a cryptosystem.\n> > >\n> > > Cheers,\n> > > Gleb Naumenko and Antoine Riard\n> > >\n> > > \u2014\u2014\u2014\n> > >\n> > > References and footnotes:\n> > > 1. https://github.com/t-bast/lightning-docs/blob/master/spam-prevention.md\n> > > 2. https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000135.html\n> > > 3. We don\u2019t actually suggest PoW to solve these issues, because a) the trade-off between honest user cost and attacker cost is misaligned due to specialized hardware and b) smartphones would die too fast if they have to compute PoW; PoW is just an unreachable example of system robustness due to well-aligned game theory.\n> > > 4. Secondary markets are still possible even if we restrict acceptable proofs to only LN channels, but supply would be much smaller, and markets would work much worse for an attacker."
            },
            {
                "author": "Bastien TEINTURIER",
                "date": "2020-11-27T11:18:23",
                "message_text_only": "Good morning list,\n\nThis is an interesting approach to solve this problem, I really like the\nidea.\nIt definitely deserves digging more into it: the fact that it doesn't add\nan additional\npayment makes it largely superior to upfront payment schemes in terms of UX.\n\nIf we restrict these stake certificates to LN funding txs, which have a\nvery specific format\n(multisig 2-of-2) there are probably smart ways to achieve this.\nIf for example we're able to do it easily with Schnorr-based funding txs,\nit may be worth\nwaiting for that to happen.\nI'm a bit afraid of having to use ZKPs for general statements, I'd prefer\nsomething tailored\nto that specific case (it would likely be more efficient and have less new\nassumptions - even\nthough you're right to point out that this is a non-critical system, so\nwe're freer to experiment\nwith hot new stuff).\n\nI completely agree with Z that it should be added to the requirements that\na node cannot\nreuse a stake certificate from another node for himself.\n\nAnother constraint is that the proof has to be small, since we have to fit\n> it all in a small onion...\n>\n\nI'm not sure that's necessary. If I understand correctly, you're saying\nthat because in your\nmodel, the sender (Alice) creates one stake certificate for each node in\nthe route (Bob, Carol)\nand puts them in the onion.\n\nBut instead it could be a point-to-point property: each node provides its\nown stake certificate\nto the next node (and only to that node). Alice provides a stake\ncertificate to Bob, then Bob\nprovides a stake certificate to Carol, and so on. If that's the case, it\ncan be in a tlv field in the\n`update_add_htlc` message and doesn't need to be inside the onion. This\nalso makes it less\nlikely that Alice is exposing herself to remote nodes in the route (payer\nprivacy).\n\nOf course, this depends on the implementation details we choose, but I\nthink it's worth stressing\nthat these two models exist and are quite different.\n\nThanks,\nBastien\n\nLe ven. 27 nov. 2020 \u00e0 07:46, ZmnSCPxj via Lightning-dev <\nlightning-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n> Good morning Gleb,\n>\n> > Thank you for your interest :)\n> >\n> > > Quick question: if I am a routing node and receive a valid stake\n> certificate, can I reuse this stake certificate on my own outgoing payments?\n> >\n> > That probably should be avoided, otherwise a mediocre routing node gets\n> a lot of jamming opportunities for no good.\n> >\n> > You are right, that\u2019s a strong argument for proof \u201cinteractivity\u201d: every\n> Certificate should probably commit to *at least* public key of the routing\n> node it is generated for.\n>\n> Right, it would be better to have the certificate commit to a specific\n> routing node rather than the payment hash/point as I proposed.\n> Committing to a payment hash/point allows a random forwarding node to\n> probe the rest of the network using the same certificate, lowering the\n> score for that certificate on much of the network.\n>\n> Another constraint is that the proof has to be small, since we have to fit\n> it all in a small onion...\n>\n> Presumably we also want the score to eventually \"settle to 0\" over time.\n>\n> Regards,\n> ZmnSCPxj\n>\n> >\n> > \u2013 gleb\n> > On Nov 27, 2020, 2:16 AM +0200, ZmnSCPxj <ZmnSCPxj at protonmail.com>,\n> wrote:\n> >\n> > > Good morning Gleb and Antoine,\n> > >\n> > > This is certainly interesting!\n> > >\n> > > Quick question: if I am a routing node and receive a valid stake\n> certificate, can I reuse this stake certificate on my own outgoing payments?\n> > >\n> > > It seems to me that the proof-of-stake-certificate should also somehow\n> integrate a detail of the current payment (such as payment hash/point) so\n> it cannot be reused by routing nodes for their own outgoing payments.\n> > >\n> > > For example, looking only at your naive privacy-broken proposal, the\n> signature must use a `sign-to-contract` where the `R` in the signature is\n> actually `R' + h(R' | payment_hash)` with the `R'` also revealed.\n> > >\n> > > Regards,\n> > > ZmnSCPxj\n> > >\n> > > > Hello list,\n> > > >\n> > > > In this post, we explore a different approach to channel jamming\n> mitigation.\n> > > > We won\u2019t talk about the background here, for the problem description\n> as well as some proposed solutions (mainly upfront payment schemes), see\n> [1].\n> > > >\n> > > > We\u2019re suggesting using UTXO ownership proofs (a.k.a. Stake\n> Certificates) to solve this problem. Previously, these proofs were only\n> used in the Lightning Network at channel announcement time to prevent\n> malicious actors from announcing channels they don\u2019t control. One can think\n> of it as a \u201cfidelity bond\u201d (as a scarce resource) as a requirement for\n> sending HTLCs.\n> > > >\n> > > > We start by overviewing issues with other solutions, and then\n> present a naive, privacy-broken Stake Certificates. Then we examine\n> designing a privacy-preserving version, evaluating them. At the end, we\n> talk about non-trivial design decisions and open questions.\n> > > >\n> > > > ## Issues with other proposals\n> > > >\n> > > > We find unsatisfying that upfront payment schemes come at a cost of\n> new fees (forward and/or backward), thus inflating payment cost for *any*\n> payment.\n> > > > In the future, the upfront base fee might even make \u201cmicropayments\u201d\n> economically infeasible by exceeding the value they transfer. Thus, a good\n> solution should not inflate payment cost while still requiring \u201cburning\u201d a\n> scarce resource (so that the attack is not free).\n> > > >\n> > > > Another issue with upfront payments is a circular trust dependency.\n> Ideally, we shouldn\u2019t introduce anything less trust-minimized than the\n> Lightning Network itself.\n> > > > Upfront payment schemes are not like that, because they in one way\n> or another rely on the honest behavior of route participants.\n> > > >\n> > > > We believe Stake Certificates we are going to introduce are\n> satisfactory in both of these directions: they don\u2019t inflate payment costs\n> for honest users and don\u2019t require trust. The main disadvantage of Stake\n> Certificates seems to be the novel cryptography required.\n> > > > See more details in the \u201cEvaluation\u201d section.\n> > > >\n> > > > ## Channel Ownership Proofs as Routing Credit Balance\n> > > >\n> > > > Let\u2019s say Alice wants to relay an HTLC to Carol through Bob. Per the\n> Stake Certificates scheme, she has to commit to a particular channel UTXO\n> by embedding an ownership proof in the onion packet while sending an HTLC\n> to Bob.\n> > > >\n> > > > Bob then unwraps the onion and verifies:\n> > > > 1) the channel identifier is pointing unambiguously to an on-chain\n> UTXO;\n> > > > 2) the ownership proof (e.g., a signature) is valid against the\n> previously disclosed UTXO witness script.\n> > > >\n> > > > If all those checks succeed, Bob should see if Alice hasn\u2019t exceeded\n> her credit balance. In case she hasn\u2019t, Bob has to \u201cdecrement Alice\u2019s\n> credit balance\u201d and relay the HTLC to Carol.\n> > > > Decrementing credit balance unconditionally of packet success or\n> failure bounds liquidity abuse by malicious HTLC senders.\n> > > > Since there is no credit assigned initially, \u201cdecrementing the\n> credit balance\u201d means just remembering that \u201cAlice spent X out of Y of the\n> credit she received for her Stake Certificates\u201d.\n> > > >\n> > > > Unfortunately, this naive protocol is a privacy nightmare, because\n> routing nodes can now easily assign every HTLC they forward to the sender\u2019s\n> UTXO.\n> > > >\n> > > > Let\u2019s first define the terms here one more time, and then proceed to\n> the non-naive, private Stake Certificates.\n> > > >\n> > > > - Stake Certificate. Either means a solution we\u2019re proposing or the\n> primitive it is based on, namely proof of UTXO ownership. As we will argue\n> later, it actually makes sense to use proof of LN channel UTXO ownership\n> specifically rather than any funds ownership.\n> > > > - Stake Certificate value. An amount of the corresponding UTXO or a\n> ballpark this amount provably  belongs to.\n> > > > - Credit balance. When Alice provides a routing node Bob with a\n> Stake Certificate, Bob should increase Alice\u2019s routing credit balance.\n> Alice is then limited in her payments by this balance, and this rule is\n> enforced by routing nodes to prevent free channel jamming in the network.\n> Note that ideally \u201cAlice\u2019s credit balance\u201c should be virtual and only known\n> to Alice, while routing nodes should only observe per-UTXO credit balance.\n> We currently assume that each routing node keeps track of per-UTXO credit\n> balance separately, see \u201cDesign decisions\u201d for more details.\n> > > > - Stake-to-credit function defines how much credit balance is given\n> per a Stake Certificate of a given value. This function is a policy of a\n> routing node, and it should be announced.\n> > > > - Credit-to-value-transferred function defines how much value a\n> sender can transfer along a given channel considering how much credit they\n> might claim. The function may also consider different factors (e.g., the\n> available capacity of a channel being used) to provide extra robustness.\n> > > >\n> > > > ## Privacy-preserving Stake Certificates\n> > > >\n> > > > The presented scheme could preserve privacy if it relied on\n> zero-knowledge proofs of UTXO ownership by avoiding pointing to a\n> particular UTXO.\n> > > > More specifically, the verifier should be able to check that:\n> > > > a) The staked UTXO is an element of the current UTXO set\n> > > > b) The prover knows the witness script committed by the UTXO witness\n> program\n> > > > c) The prover knows a valid witness for the witness script\n> > > > d) The staked UTXO was not used to produce a different Stake\n> Certificate which is currently in use as well.\n> > > >\n> > > > The verifier should also have a way to see a Stake Certificate value\n> to properly account for the credit. This can be achieved by restricting the\n> UTXO set being proved upon to only those UTXOs with a specific range of\n> values: \u201cI will prove that I own a UTXO among all UTXOs between 0.5 BTC and\n> 1 BTC\u201d.\n> > > >\n> > > > Unfortunately, steps (b) and (c) require zero-knowledge protocols\n> for general statements, which are more experimental primitives than most of\n> the stuff we have in Bitcoin protocols,\n> > > > although we assume it\u2019s feasible to consider them for non-consensus\n> stuff.\n> > > >\n> > > > ## Evaluation\n> > > >\n> > > > Stake Certificates, upfront payment schemes, and other potential\n> solutions (given a particular configuration) may be compared along the\n> following axis:\n> > > > 1) Economic feasibility\n> > > > 1a) What is the cost of overcoming the protection for an attacker?\n> Likely a non-linear function: sats_spent =f(channels_to_jam, [\u2026])\n> > > > 1b) How does this solution limit honest users?\n> > > > 2) How sophisticated is this solution in terms of integration and\n> making good UX?\n> > > > 3) How complex is this solution in terms of protocol\n> design/implementation?\n> > > >\n> > > > When it comes to (1a), both Stake Certificates and upfront payments\n> are probably equal, in a way that they\u2019re just best-effort ideas to\n> increase the attack cost. Unfortunately, we currently don\u2019t know how to\n> design something as economically powerful as PoW in Bitcoin [3].\n> > > > This aspect can be properly evaluated by applying these ideas to\n> different hypothetical kinds of LN in a simulation and observing the\n> resulting trade-off between (1a) and (1b) considering different attack\n> strategies.\n> > > >\n> > > > In the previous sections of this post, we have argued that Stake\n> Certificates may provide a much better (1b) for the cost of (3) because it\n> relies on zero-knowledge.\n> > > > When it comes to (2), the design of Stake Certificates may vary in\n> terms of UX burden, from completely automatic to requiring custom actions\n> with private keys from users.\n> > > >\n> > > > Some of these trade-offs along with other interesting questions are\n> discussed in the following section.\n> > > >\n> > > > ## Design decisions and questions\n> > > >\n> > > > #### Should the credit spending be gossipped across the entire\n> network, or should only the routing nodes involved in the payment know?\n> > > >\n> > > > Economically, these two approaches are likely to be equivalent, and\n> it\u2019s just a matter of stake-to-credit ratio.\n> > > > However, announcing credit spending to the network results in a\n> privacy leak. It also imposes bandwidth and CPU overhead on the routing\n> nodes.\n> > > >\n> > > > #### Which zero-knowledge system should be used for Stake\n> Certificates?\n> > > >\n> > > > Choosing a ZK system boils down to picking the right trade-offs of\n> proving and verifying time, and assumptions. As we mentioned previously, we\n> would need proving general statements.\n> > > > At the same time, we need something cheap in both proving and\n> verification, because Lightning is supposed to be fast.\n> > > > At the same time, the setup probably doesn\u2019t matter, because proofs\n> are supposed to be verified only by one participant, a routing node this\n> proof is generated for.\n> > > > Perhaps we can also pick any cryptographic assumptions we want since\n> this stuff is not mission-critical and can be easily updated if someone\n> breaks a cryptographic assumption and we observe an attack.\n> > > >\n> > > > #### Should we allow holding *any* Bitcoins (not just LN channels)\n> for Stake Certificates?\n> > > >\n> > > > This idea might make sense if we\u2019re worried that some LN users might\n> want to send more payments than they can afford per their credit. However,\n> we believe that allowing any UTXO would give an attacker more opportunities\n> to use their cold funds for this attack, or even have a secondary market\n> where holders sell their proofs (they have nothing to loose).\n> > > > Instead, we should a) design the credit-to-stake-functions better;\n> b) encourage users send payments across different routing nodes (since\n> credits are not tracked globally) [4].\n> > > >\n> > > > #### What\u2019s the best credit-to-value-transferred function?\n> > > >\n> > > > We reckon that this function should be not just linear to provide\n> maximum security against malicious channel jammers. For example, we can\n> charge more credit for the last 20% of the capacity of the *channel used\n> for routing*. Alternatively, we could discourage making too many payments\n> from the same UTXO within a short period of time by charging more credit in\n> this case.\n> > > >\n> > > > #### What about the interactivity and lifetime of Stake Certificates?\n> > > >\n> > > > Interactive proofs mean that they are constructed on demand of a\n> routing node, non-interactive means constructed by a payment sender ahead\n> of time.\n> > > > Both interactivity and lifetime have something to do with the ease\n> of producing proof and accessing keys.\n> > > > We will omit the details of the trade-off we consider, but it\n> remains an open question.\n> > > >\n> > > > #### If Stake Certificates are valid for N blocks after proof\n> generation, does it mean that if the UTXO is spent during those N blocks,\n> new proof can be generated from the same coins without invalidating the old\n> proof?\n> > > >\n> > > > Yes, but an attacker would, first of all, have to pay an on-chain\n> fee for this. If we\u2019re still worried about this problem, there are\n> workaround ideas.\n> > > > For example, we could have epochs of 100 blocks (every epoch starts\n> at #XYZXYZ00 block). If at the start of an epoch, a channel wasn\u2019t in the\n> UTXO set, it provides very little credit.\n> > > > Alternatively, we could expand the zero-knowledge part to proving\n> that the coins were not yet spent.\n> > > >\n> > > > #### Should spending a UTXO reveal all Stake Certificates generated\n> from it?\n> > > >\n> > > > This would also solve the problem in the previous question, but it\n> would mean a retrospective privacy leak again. To avoid a privacy leak, we\n> should prevent this.\n> > > >\n> > > > #### What if malicious Sybil *routing* nodes failing payments\n> causing other honest routing nodes to reduce the credit of an honest\n> payment sender?\n> > > >\n> > > > Both Stake Certificates and upfront payment schemes suffer from\n> malicious routing nodes failing the payments and \u201cwasting\u201d the sender\u2019s\n> credit or fees. This problem even applies out of the channel jamming\n> context, when considering payment failure rate.\n> > > > This problem can be addressed by reducing the reputation of faulty\n> links and routing nodes on the payment sender node. When payment routing\n> becomes a for-profit activity, this would encourage routing nodes to\n> sanitize their links.\n> > > > The mitigation can be even stronger by using \u201cprovable blaming\u201d\n> introduced in [2].\n> > > >\n> > > > ## Conclusion\n> > > >\n> > > > We propose Stake Certificates, a new solution to channel jamming.\n> Perhaps, it might not be the best near-term solution due to the complexity,\n> but the zero satoshi overhead for honest payments is an appealing argument\n> to switch to it in the future.\n> > > > This proposal also illustrates how stake-based protocols can solve\n> Sybil challenges in the Bitcoin ecosystem. Since this might be useful in\n> other contexts (Sybil-resistance of many kinds, proof-of-ownership),\n> discussing Stake Certificates is even more useful.\n> > > > The next step is a discussion of Stake Certificates. If the\n> community finds it interesting, then we should discuss the design questions\n> mentioned above, and choose a cryptosystem.\n> > > >\n> > > > Cheers,\n> > > > Gleb Naumenko and Antoine Riard\n> > > >\n> > > > \u2014\u2014\u2014\n> > > >\n> > > > References and footnotes:\n> > > > 1.\n> https://github.com/t-bast/lightning-docs/blob/master/spam-prevention.md\n> > > > 2.\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000135.html\n> > > > 3. We don\u2019t actually suggest PoW to solve these issues, because a)\n> the trade-off between honest user cost and attacker cost is misaligned due\n> to specialized hardware and b) smartphones would die too fast if they have\n> to compute PoW; PoW is just an unreachable example of system robustness due\n> to well-aligned game theory.\n> > > > 4. Secondary markets are still possible even if we restrict\n> acceptable proofs to only LN channels, but supply would be much smaller,\n> and markets would work much worse for an attacker.\n>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201127/89af90d4/attachment-0001.html>"
            },
            {
                "author": "Andr\u00e9s G. Aragoneses",
                "date": "2020-11-27T12:04:30",
                "message_text_only": "Hey,\n\nOn Fri, 27 Nov 2020 at 19:18, Bastien TEINTURIER <bastien at acinq.fr> wrote:\n\n> Good morning list,\n>\n> This is an interesting approach to solve this problem, I really like the\n> idea.\n> It definitely deserves digging more into it: the fact that it doesn't add\n> an additional\n> payment makes it largely superior to upfront payment schemes in terms of\n> UX.\n>\n> If we restrict these stake certificates to LN funding txs, which have a\n> very specific format\n> (multisig 2-of-2) there are probably smart ways to achieve this.\n> If for example we're able to do it easily with Schnorr-based funding txs,\n> it may be worth\n> waiting for that to happen.\n> I'm a bit afraid of having to use ZKPs for general statements, I'd prefer\n> something tailored\n> to that specific case (it would likely be more efficient and have less new\n> assumptions - even\n> though you're right to point out that this is a non-critical system, so\n> we're freer to experiment\n> with hot new stuff).\n>\n> I completely agree with Z that it should be added to the requirements that\n> a node cannot\n> reuse a stake certificate from another node for himself.\n>\n> Another constraint is that the proof has to be small, since we have to fit\n>> it all in a small onion...\n>>\n>\n> I'm not sure that's necessary. If I understand correctly, you're saying\n> that because in your\n> model, the sender (Alice) creates one stake certificate for each node in\n> the route (Bob, Carol)\n> and puts them in the onion.\n>\n> But instead it could be a point-to-point property: each node provides its\n> own stake certificate\n> to the next node (and only to that node). Alice provides a stake\n> certificate to Bob, then Bob\n> provides a stake certificate to Carol, and so on. If that's the case, it\n> can be in a tlv field in the\n> `update_add_htlc` message and doesn't need to be inside the onion. This\n> also makes it less\n> likely that Alice is exposing herself to remote nodes in the route (payer\n> privacy).\n>\n\nIf the above paragraph is confirmed, then does this mean StakeCertificates\nwith privacy are possible without ZK proofs?\nOr did I miss something?\n\n\n\n>\n> Of course, this depends on the implementation details we choose, but I\n> think it's worth stressing\n> that these two models exist and are quite different.\n>\n> Thanks,\n> Bastien\n>\n> Le ven. 27 nov. 2020 \u00e0 07:46, ZmnSCPxj via Lightning-dev <\n> lightning-dev at lists.linuxfoundation.org> a \u00e9crit :\n>\n>> Good morning Gleb,\n>>\n>> > Thank you for your interest :)\n>> >\n>> > > Quick question: if I am a routing node and receive a valid stake\n>> certificate, can I reuse this stake certificate on my own outgoing payments?\n>> >\n>> > That probably should be avoided, otherwise a mediocre routing node gets\n>> a lot of jamming opportunities for no good.\n>> >\n>> > You are right, that\u2019s a strong argument for proof \u201cinteractivity\u201d:\n>> every Certificate should probably commit to *at least* public key of the\n>> routing node it is generated for.\n>>\n>> Right, it would be better to have the certificate commit to a specific\n>> routing node rather than the payment hash/point as I proposed.\n>> Committing to a payment hash/point allows a random forwarding node to\n>> probe the rest of the network using the same certificate, lowering the\n>> score for that certificate on much of the network.\n>>\n>> Another constraint is that the proof has to be small, since we have to\n>> fit it all in a small onion...\n>>\n>> Presumably we also want the score to eventually \"settle to 0\" over time.\n>>\n>> Regards,\n>> ZmnSCPxj\n>>\n>> >\n>> > \u2013 gleb\n>> > On Nov 27, 2020, 2:16 AM +0200, ZmnSCPxj <ZmnSCPxj at protonmail.com>,\n>> wrote:\n>> >\n>> > > Good morning Gleb and Antoine,\n>> > >\n>> > > This is certainly interesting!\n>> > >\n>> > > Quick question: if I am a routing node and receive a valid stake\n>> certificate, can I reuse this stake certificate on my own outgoing payments?\n>> > >\n>> > > It seems to me that the proof-of-stake-certificate should also\n>> somehow integrate a detail of the current payment (such as payment\n>> hash/point) so it cannot be reused by routing nodes for their own outgoing\n>> payments.\n>> > >\n>> > > For example, looking only at your naive privacy-broken proposal, the\n>> signature must use a `sign-to-contract` where the `R` in the signature is\n>> actually `R' + h(R' | payment_hash)` with the `R'` also revealed.\n>> > >\n>> > > Regards,\n>> > > ZmnSCPxj\n>> > >\n>> > > > Hello list,\n>> > > >\n>> > > > In this post, we explore a different approach to channel jamming\n>> mitigation.\n>> > > > We won\u2019t talk about the background here, for the problem\n>> description as well as some proposed solutions (mainly upfront payment\n>> schemes), see [1].\n>> > > >\n>> > > > We\u2019re suggesting using UTXO ownership proofs (a.k.a. Stake\n>> Certificates) to solve this problem. Previously, these proofs were only\n>> used in the Lightning Network at channel announcement time to prevent\n>> malicious actors from announcing channels they don\u2019t control. One can think\n>> of it as a \u201cfidelity bond\u201d (as a scarce resource) as a requirement for\n>> sending HTLCs.\n>> > > >\n>> > > > We start by overviewing issues with other solutions, and then\n>> present a naive, privacy-broken Stake Certificates. Then we examine\n>> designing a privacy-preserving version, evaluating them. At the end, we\n>> talk about non-trivial design decisions and open questions.\n>> > > >\n>> > > > ## Issues with other proposals\n>> > > >\n>> > > > We find unsatisfying that upfront payment schemes come at a cost of\n>> new fees (forward and/or backward), thus inflating payment cost for *any*\n>> payment.\n>> > > > In the future, the upfront base fee might even make \u201cmicropayments\u201d\n>> economically infeasible by exceeding the value they transfer. Thus, a good\n>> solution should not inflate payment cost while still requiring \u201cburning\u201d a\n>> scarce resource (so that the attack is not free).\n>> > > >\n>> > > > Another issue with upfront payments is a circular trust dependency.\n>> Ideally, we shouldn\u2019t introduce anything less trust-minimized than the\n>> Lightning Network itself.\n>> > > > Upfront payment schemes are not like that, because they in one way\n>> or another rely on the honest behavior of route participants.\n>> > > >\n>> > > > We believe Stake Certificates we are going to introduce are\n>> satisfactory in both of these directions: they don\u2019t inflate payment costs\n>> for honest users and don\u2019t require trust. The main disadvantage of Stake\n>> Certificates seems to be the novel cryptography required.\n>> > > > See more details in the \u201cEvaluation\u201d section.\n>> > > >\n>> > > > ## Channel Ownership Proofs as Routing Credit Balance\n>> > > >\n>> > > > Let\u2019s say Alice wants to relay an HTLC to Carol through Bob. Per\n>> the Stake Certificates scheme, she has to commit to a particular channel\n>> UTXO by embedding an ownership proof in the onion packet while sending an\n>> HTLC to Bob.\n>> > > >\n>> > > > Bob then unwraps the onion and verifies:\n>> > > > 1) the channel identifier is pointing unambiguously to an on-chain\n>> UTXO;\n>> > > > 2) the ownership proof (e.g., a signature) is valid against the\n>> previously disclosed UTXO witness script.\n>> > > >\n>> > > > If all those checks succeed, Bob should see if Alice hasn\u2019t\n>> exceeded her credit balance. In case she hasn\u2019t, Bob has to \u201cdecrement\n>> Alice\u2019s credit balance\u201d and relay the HTLC to Carol.\n>> > > > Decrementing credit balance unconditionally of packet success or\n>> failure bounds liquidity abuse by malicious HTLC senders.\n>> > > > Since there is no credit assigned initially, \u201cdecrementing the\n>> credit balance\u201d means just remembering that \u201cAlice spent X out of Y of the\n>> credit she received for her Stake Certificates\u201d.\n>> > > >\n>> > > > Unfortunately, this naive protocol is a privacy nightmare, because\n>> routing nodes can now easily assign every HTLC they forward to the sender\u2019s\n>> UTXO.\n>> > > >\n>> > > > Let\u2019s first define the terms here one more time, and then proceed\n>> to the non-naive, private Stake Certificates.\n>> > > >\n>> > > > - Stake Certificate. Either means a solution we\u2019re proposing or the\n>> primitive it is based on, namely proof of UTXO ownership. As we will argue\n>> later, it actually makes sense to use proof of LN channel UTXO ownership\n>> specifically rather than any funds ownership.\n>> > > > - Stake Certificate value. An amount of the corresponding UTXO or a\n>> ballpark this amount provably  belongs to.\n>> > > > - Credit balance. When Alice provides a routing node Bob with a\n>> Stake Certificate, Bob should increase Alice\u2019s routing credit balance.\n>> Alice is then limited in her payments by this balance, and this rule is\n>> enforced by routing nodes to prevent free channel jamming in the network.\n>> Note that ideally \u201cAlice\u2019s credit balance\u201c should be virtual and only known\n>> to Alice, while routing nodes should only observe per-UTXO credit balance.\n>> We currently assume that each routing node keeps track of per-UTXO credit\n>> balance separately, see \u201cDesign decisions\u201d for more details.\n>> > > > - Stake-to-credit function defines how much credit balance is given\n>> per a Stake Certificate of a given value. This function is a policy of a\n>> routing node, and it should be announced.\n>> > > > - Credit-to-value-transferred function defines how much value a\n>> sender can transfer along a given channel considering how much credit they\n>> might claim. The function may also consider different factors (e.g., the\n>> available capacity of a channel being used) to provide extra robustness.\n>> > > >\n>> > > > ## Privacy-preserving Stake Certificates\n>> > > >\n>> > > > The presented scheme could preserve privacy if it relied on\n>> zero-knowledge proofs of UTXO ownership by avoiding pointing to a\n>> particular UTXO.\n>> > > > More specifically, the verifier should be able to check that:\n>> > > > a) The staked UTXO is an element of the current UTXO set\n>> > > > b) The prover knows the witness script committed by the UTXO\n>> witness program\n>> > > > c) The prover knows a valid witness for the witness script\n>> > > > d) The staked UTXO was not used to produce a different Stake\n>> Certificate which is currently in use as well.\n>> > > >\n>> > > > The verifier should also have a way to see a Stake Certificate\n>> value to properly account for the credit. This can be achieved by\n>> restricting the UTXO set being proved upon to only those UTXOs with a\n>> specific range of values: \u201cI will prove that I own a UTXO among all UTXOs\n>> between 0.5 BTC and 1 BTC\u201d.\n>> > > >\n>> > > > Unfortunately, steps (b) and (c) require zero-knowledge protocols\n>> for general statements, which are more experimental primitives than most of\n>> the stuff we have in Bitcoin protocols,\n>> > > > although we assume it\u2019s feasible to consider them for non-consensus\n>> stuff.\n>> > > >\n>> > > > ## Evaluation\n>> > > >\n>> > > > Stake Certificates, upfront payment schemes, and other potential\n>> solutions (given a particular configuration) may be compared along the\n>> following axis:\n>> > > > 1) Economic feasibility\n>> > > > 1a) What is the cost of overcoming the protection for an attacker?\n>> Likely a non-linear function: sats_spent =f(channels_to_jam, [\u2026])\n>> > > > 1b) How does this solution limit honest users?\n>> > > > 2) How sophisticated is this solution in terms of integration and\n>> making good UX?\n>> > > > 3) How complex is this solution in terms of protocol\n>> design/implementation?\n>> > > >\n>> > > > When it comes to (1a), both Stake Certificates and upfront payments\n>> are probably equal, in a way that they\u2019re just best-effort ideas to\n>> increase the attack cost. Unfortunately, we currently don\u2019t know how to\n>> design something as economically powerful as PoW in Bitcoin [3].\n>> > > > This aspect can be properly evaluated by applying these ideas to\n>> different hypothetical kinds of LN in a simulation and observing the\n>> resulting trade-off between (1a) and (1b) considering different attack\n>> strategies.\n>> > > >\n>> > > > In the previous sections of this post, we have argued that Stake\n>> Certificates may provide a much better (1b) for the cost of (3) because it\n>> relies on zero-knowledge.\n>> > > > When it comes to (2), the design of Stake Certificates may vary in\n>> terms of UX burden, from completely automatic to requiring custom actions\n>> with private keys from users.\n>> > > >\n>> > > > Some of these trade-offs along with other interesting questions are\n>> discussed in the following section.\n>> > > >\n>> > > > ## Design decisions and questions\n>> > > >\n>> > > > #### Should the credit spending be gossipped across the entire\n>> network, or should only the routing nodes involved in the payment know?\n>> > > >\n>> > > > Economically, these two approaches are likely to be equivalent, and\n>> it\u2019s just a matter of stake-to-credit ratio.\n>> > > > However, announcing credit spending to the network results in a\n>> privacy leak. It also imposes bandwidth and CPU overhead on the routing\n>> nodes.\n>> > > >\n>> > > > #### Which zero-knowledge system should be used for Stake\n>> Certificates?\n>> > > >\n>> > > > Choosing a ZK system boils down to picking the right trade-offs of\n>> proving and verifying time, and assumptions. As we mentioned previously, we\n>> would need proving general statements.\n>> > > > At the same time, we need something cheap in both proving and\n>> verification, because Lightning is supposed to be fast.\n>> > > > At the same time, the setup probably doesn\u2019t matter, because proofs\n>> are supposed to be verified only by one participant, a routing node this\n>> proof is generated for.\n>> > > > Perhaps we can also pick any cryptographic assumptions we want\n>> since this stuff is not mission-critical and can be easily updated if\n>> someone breaks a cryptographic assumption and we observe an attack.\n>> > > >\n>> > > > #### Should we allow holding *any* Bitcoins (not just LN channels)\n>> for Stake Certificates?\n>> > > >\n>> > > > This idea might make sense if we\u2019re worried that some LN users\n>> might want to send more payments than they can afford per their credit.\n>> However, we believe that allowing any UTXO would give an attacker more\n>> opportunities to use their cold funds for this attack, or even have a\n>> secondary market where holders sell their proofs (they have nothing to\n>> loose).\n>> > > > Instead, we should a) design the credit-to-stake-functions better;\n>> b) encourage users send payments across different routing nodes (since\n>> credits are not tracked globally) [4].\n>> > > >\n>> > > > #### What\u2019s the best credit-to-value-transferred function?\n>> > > >\n>> > > > We reckon that this function should be not just linear to provide\n>> maximum security against malicious channel jammers. For example, we can\n>> charge more credit for the last 20% of the capacity of the *channel used\n>> for routing*. Alternatively, we could discourage making too many payments\n>> from the same UTXO within a short period of time by charging more credit in\n>> this case.\n>> > > >\n>> > > > #### What about the interactivity and lifetime of Stake\n>> Certificates?\n>> > > >\n>> > > > Interactive proofs mean that they are constructed on demand of a\n>> routing node, non-interactive means constructed by a payment sender ahead\n>> of time.\n>> > > > Both interactivity and lifetime have something to do with the ease\n>> of producing proof and accessing keys.\n>> > > > We will omit the details of the trade-off we consider, but it\n>> remains an open question.\n>> > > >\n>> > > > #### If Stake Certificates are valid for N blocks after proof\n>> generation, does it mean that if the UTXO is spent during those N blocks,\n>> new proof can be generated from the same coins without invalidating the old\n>> proof?\n>> > > >\n>> > > > Yes, but an attacker would, first of all, have to pay an on-chain\n>> fee for this. If we\u2019re still worried about this problem, there are\n>> workaround ideas.\n>> > > > For example, we could have epochs of 100 blocks (every epoch starts\n>> at #XYZXYZ00 block). If at the start of an epoch, a channel wasn\u2019t in the\n>> UTXO set, it provides very little credit.\n>> > > > Alternatively, we could expand the zero-knowledge part to proving\n>> that the coins were not yet spent.\n>> > > >\n>> > > > #### Should spending a UTXO reveal all Stake Certificates generated\n>> from it?\n>> > > >\n>> > > > This would also solve the problem in the previous question, but it\n>> would mean a retrospective privacy leak again. To avoid a privacy leak, we\n>> should prevent this.\n>> > > >\n>> > > > #### What if malicious Sybil *routing* nodes failing payments\n>> causing other honest routing nodes to reduce the credit of an honest\n>> payment sender?\n>> > > >\n>> > > > Both Stake Certificates and upfront payment schemes suffer from\n>> malicious routing nodes failing the payments and \u201cwasting\u201d the sender\u2019s\n>> credit or fees. This problem even applies out of the channel jamming\n>> context, when considering payment failure rate.\n>> > > > This problem can be addressed by reducing the reputation of faulty\n>> links and routing nodes on the payment sender node. When payment routing\n>> becomes a for-profit activity, this would encourage routing nodes to\n>> sanitize their links.\n>> > > > The mitigation can be even stronger by using \u201cprovable blaming\u201d\n>> introduced in [2].\n>> > > >\n>> > > > ## Conclusion\n>> > > >\n>> > > > We propose Stake Certificates, a new solution to channel jamming.\n>> Perhaps, it might not be the best near-term solution due to the complexity,\n>> but the zero satoshi overhead for honest payments is an appealing argument\n>> to switch to it in the future.\n>> > > > This proposal also illustrates how stake-based protocols can solve\n>> Sybil challenges in the Bitcoin ecosystem. Since this might be useful in\n>> other contexts (Sybil-resistance of many kinds, proof-of-ownership),\n>> discussing Stake Certificates is even more useful.\n>> > > > The next step is a discussion of Stake Certificates. If the\n>> community finds it interesting, then we should discuss the design questions\n>> mentioned above, and choose a cryptosystem.\n>> > > >\n>> > > > Cheers,\n>> > > > Gleb Naumenko and Antoine Riard\n>> > > >\n>> > > > \u2014\u2014\u2014\n>> > > >\n>> > > > References and footnotes:\n>> > > > 1.\n>> https://github.com/t-bast/lightning-docs/blob/master/spam-prevention.md\n>> > > > 2.\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000135.html\n>> > > > 3. We don\u2019t actually suggest PoW to solve these issues, because a)\n>> the trade-off between honest user cost and attacker cost is misaligned due\n>> to specialized hardware and b) smartphones would die too fast if they have\n>> to compute PoW; PoW is just an unreachable example of system robustness due\n>> to well-aligned game theory.\n>> > > > 4. Secondary markets are still possible even if we restrict\n>> acceptable proofs to only LN channels, but supply would be much smaller,\n>> and markets would work much worse for an attacker.\n>>\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201127/ca1ded55/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2020-11-27T12:26:36",
                "message_text_only": "Good morning Andres, t-bast, Gleb, et al,\n\n\n> > But instead it\u00a0could be a point-to-point property: each node provides its own stake certificate\n> > to the next node (and only to that node). Alice provides a stake certificate to Bob, then Bob\n> > provides a stake certificate to Carol, and so on. If that's the case, it can be in a tlv field in the\n> > `update_add_htlc` message and doesn't need to be inside the onion. This also makes it less\n> > likely that Alice is exposing herself to remote nodes in the route (payer privacy).\n>\n> If the above paragraph is confirmed, then does this mean StakeCertificates with privacy are possible without ZK proofs?\n> Or did I miss something?\n\nLogically speaking, for this model, a proof is unnecessary --- the node offering the HTLC already has a channel that contains funds that is locked.\n\nSpecifically, it is the channel itself where the HTLC is being instantiated, that contains funds owned by the offerer, and which are locked for use in the Lightning Network.\n\nSince the receiver of the HTLC offer is already aware of this channel and its existence, it requires no proof at all.\n\n\n\nThus, I have my doubts on this model --- it seems to me that the current Lightning Network is already equivalent to this model, and the current Lightning Network is (supposedly) attackable by these \"griefing\" attacks.\n\nAnother example is that, if the offerring node has a number of published channels, that is sufficient proof as well, without requiring any privacy-preserving proofs.\nThis is precisely the current Lightning Network, yet we consider the current Lightning Network attackable by griefing.\n\n\nInstead, payers, or payees (i.e. by providing the proof in an invoice) must set aside separate non-trivial stake, not tied to channels, but provably tied only to this stake certificate mechanism, in order to assuage the fear of forwarding nodes that the HTLCs will not be claimed immediately.\n\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "David A. Harding",
                "date": "2020-11-28T18:24:45",
                "message_text_only": "On Thu, Nov 26, 2020 at 11:40:46PM +0200, Gleb Naumenko wrote:\n> \n> Hello list,\n\nGleb and Antoine,\n\nThis is an interesting idea!  Thank you for working on it.\n\nI had difficulty with one part of the proposal:\n\n> #### Should we allow holding *any* Bitcoins (not just LN channels) for Stake Certificates?\n> \n> [...] we believe that allowing any UTXO would give an attacker more\n> opportunities to use their cold funds for this attack, or even have a\n> secondary market where holders sell their proofs (they have nothing to\n> loose).\n\nCan't a malicious user get around this restriction by opening channels\nwith themself?  (Also, aren't current channel open outputs just P2WSH\n2-of-2 multisigs, and in the future won't they be generic P2TR outputs?\nHow would a stake certificate prove that the UTXO was generated for LN\nrather than just belonging to a user with a 2-of-2 multisig wallet or\nany key-path-spendable taproot wallet?)\n\nAccording to some random website, the current total channel balance of\nthe public LN is about 1,000 BTC.  Although I'm sure this will grow with\ntime, it seems to me that an attacker who can rent access to stake\ncertificates for a one-week attack at, say, a 5% annual interest rate\nwould only need to pay 1 BTC to acquire stake certificates equal to all\nhonest users at present.  That cost doesn't seem high enough to me to\neffectively prevent attacks.  Am I missing something?\n\nThanks,\n\n-Dave\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201128/9e9c7884/attachment.sig>"
            },
            {
                "author": "Lloyd Fournier",
                "date": "2020-11-30T04:38:39",
                "message_text_only": "Hi Gleb et al,\n\nI really appreciate the out-of-the-box thinking of this proposal.\nI will put to the side the very difficult task of creating a cryptosystem\nthat efficiently achieves what's necessary for this to work because that\nseems not to be the main concern.\n\nI agree with Z that this proposal is missing a strong argument as to why\nthis is a better \"proof-of-stake\" than channel balances themselves.\nIn order to send a jamming HTLC you have to have to lock up funds to do it\n(they need outgoing balance for the sender and incoming balance for the\nreceiver).\nWhy would stake certificates be more powerful than this? I get that you\ndecrement the UTXO's credit even if they fail. This increases the cost of\nsending spam (but it also increases the cost of sending normal payments\nsince you now may be honest but have all your UTXOs run out of credit.)\nDoes this increased cost (it was not zero before) actually prevent the\nattack without inhibiting normal usage?\n\nIn general there seems to be an open question about whether these channel\njamming attacks are actually economic.\nIf I want to get more payments routed through me would it really be optimal\nto do channel jamming?\nSuppose that the nodes react to the jamming by adding extra capacity by\nsplicing out from somewhere else. Then I have jammed up my own coins and\ngot nothing for it.\nWhat if instead of attacking I allocated the coins instead to creating more\nvaluable channels. Couldn't this be more profitable?\nI just posed this question in [1].\n\nIf we are talking about non-economic adversaries who simply wish to destroy\nLN then that's another game altogether.\nFor example if the CCP with its 1% of all Bitcoin it seized from the\nplustoken scam were to try and attack lightning they would likely succeed\neven if we had this system in place simply because they have a lot of\n\"stake\".\nAs David points out I don't think you can make a distinction between real\nLN outputs and fake ones.\nIt seems unavoidable that any coins you own could be used to produce a\ncertificate to give you spam bandwidth (especially if you actually manage\nto guarantee privacy through ZKPs).\n\n[1] https://github.com/t-bast/lightning-docs/issues/7\n\nCheers,\n\nLL\n\n\nOn Sun, Nov 29, 2020 at 5:25 AM David A. Harding <dave at dtrt.org> wrote:\n\n> On Thu, Nov 26, 2020 at 11:40:46PM +0200, Gleb Naumenko wrote:\n> >\n> > Hello list,\n>\n> Gleb and Antoine,\n>\n> This is an interesting idea!  Thank you for working on it.\n>\n> I had difficulty with one part of the proposal:\n>\n> > #### Should we allow holding *any* Bitcoins (not just LN channels) for\n> Stake Certificates?\n> >\n> > [...] we believe that allowing any UTXO would give an attacker more\n> > opportunities to use their cold funds for this attack, or even have a\n> > secondary market where holders sell their proofs (they have nothing to\n> > loose).\n>\n> Can't a malicious user get around this restriction by opening channels\n> with themself?  (Also, aren't current channel open outputs just P2WSH\n> 2-of-2 multisigs, and in the future won't they be generic P2TR outputs?\n> How would a stake certificate prove that the UTXO was generated for LN\n> rather than just belonging to a user with a 2-of-2 multisig wallet or\n> any key-path-spendable taproot wallet?)\n>\n> According to some random website, the current total channel balance of\n> the public LN is about 1,000 BTC.  Although I'm sure this will grow with\n> time, it seems to me that an attacker who can rent access to stake\n> certificates for a one-week attack at, say, a 5% annual interest rate\n> would only need to pay 1 BTC to acquire stake certificates equal to all\n> honest users at present.  That cost doesn't seem high enough to me to\n> effectively prevent attacks.  Am I missing something?\n>\n> Thanks,\n>\n> -Dave\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201130/a4049932/attachment.html>"
            },
            {
                "author": "Gleb Naumenko",
                "date": "2020-11-30T08:34:35",
                "message_text_only": "Hi Lloyd,\n\n> I agree with Z that this proposal is missing a strong argument as to why this is a better \u201cproof-of-stake\u201d than channel balances themselves.\n\nI think Z\u2019s consideration is about the alternative Stake Certificates proposed by t-bast, where every link in the route proves something to the next hop.\nFor the context see this post, specifically \u201cpoint-to-point property\u201d:\u00a0https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-November/002888.html\n\nI think you managed to apply the same argument to our original proposal as well :)\n\n> In order to send a jamming HTLC you have to have to lock up funds to do it (they need outgoing balance for the sender and incoming balance for the receiver).\n\nI think the issue here is with loop attacks (https://lists.linuxfoundation.org/pipermail/lightning-dev/2015-August/000135.html)? This restriction with locking funds doesn\u2019t really work\u2026\nAfter getting past their intermediate hop, an attacker can make arbitrary loops and lock 100 BTC channels even by just having 1 BTC locked in the initial hop.\n\nStake Certificates allow for a node in the middle of the route to distinguish where the payment is coming from (in a privacy-preserving manner of course), to distinguish heavy channel users from normal.\nThey also allow to force an attacker to distribute jamming in time and across many channels.\n\nPerhaps, alternative restrictions may take place by restricting based on from which immediate channel/node they are coming (one-hop). But that sounds like a mess, as a payment sender doesn\u2019t have any control, and gossiping that would probably be a privacy leak, also it still allows free jamming I think (just a bit different).\nThe big deal here is to distinguish the flows, to better control them.\nWe can discuss this separately.\n\nIt\u2019s true that any token might achieve the same goal here, but how to make it Sybil-resistant and prevent generating new tokens? Stake Certificates, I don\u2019t know what else we can commit to.\n\n> If we are talking about non-economic adversaries who simply wish to destroy LN then that\u2019s another game altogether.\n\nI was thinking about this scenario all the way, but maybe I should think about the other one as well.\n\n> As David points out I don\u2019t think you can make a distinction between real LN outputs and fake ones.\n\nResponding here:\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2020-November/002894.html\n\n\u2013 gleb\nOn Nov 30, 2020, 6:39 AM +0200, Lloyd Fournier <lloyd.fourn at gmail.com>, wrote:\n> Hi Gleb et al,\n>\n> I really appreciate the out-of-the-box thinking of this proposal.\n> I will put to the side the very difficult task of creating a cryptosystem that efficiently achieves what's necessary for this to work because that seems not to be the main concern.\n>\n> I agree with Z that this proposal is missing a strong argument as to why this is a better \"proof-of-stake\" than channel balances themselves.\n> In order to send a jamming HTLC you have to have to lock up funds to do it (they need outgoing balance for the sender and incoming balance for the receiver).\n> Why would stake certificates be more powerful than this? I get that you decrement the UTXO's credit even if they fail. This increases the cost of sending spam (but it also increases the cost of sending normal payments since you now may be honest but have all your UTXOs run out of credit.)\n> Does this increased cost (it was not zero before) actually prevent the attack without inhibiting normal usage?\n>\n> In general there seems to be an open question about whether these channel jamming attacks are actually economic.\n> If I want to get more payments routed through me would it really be optimal to do channel jamming?\n> Suppose that the nodes react to the jamming by adding extra capacity by splicing out from somewhere else. Then I have jammed up my own coins and got nothing for it.\n> What if instead of attacking I allocated the coins instead to creating more valuable channels. Couldn't this be more profitable?\n> I just posed this question in [1].\n>\n> If we are talking about non-economic adversaries who simply wish to destroy LN then that's another game altogether.\n> For example if the CCP with its 1% of all Bitcoin it seized from the plustoken scam were to try and attack lightning they would likely succeed even if we had this system in place simply because they have a lot of \"stake\".\n> As David points out I don't think you can make a distinction between real LN outputs and fake ones.\n> It seems unavoidable that any coins you own could be used to produce a certificate to give you spam bandwidth (especially if you actually manage to guarantee privacy through ZKPs).\n>\n> [1] https://github.com/t-bast/lightning-docs/issues/7\n>\n> Cheers,\n>\n> LL\n>\n>\n> > On Sun, Nov 29, 2020 at 5:25 AM David A. Harding <dave at dtrt.org> wrote:\n> > > On Thu, Nov 26, 2020 at 11:40:46PM +0200, Gleb Naumenko wrote:\n> > > >\n> > > > Hello list,\n> > >\n> > > Gleb and Antoine,\n> > >\n> > > This is an interesting idea!\u00a0 Thank you for working on it.\n> > >\n> > > I had difficulty with one part of the proposal:\n> > >\n> > > > #### Should we allow holding *any* Bitcoins (not just LN channels) for Stake Certificates?\n> > > >\n> > > > [...] we believe that allowing any UTXO would give an attacker more\n> > > > opportunities to use their cold funds for this attack, or even have a\n> > > > secondary market where holders sell their proofs (they have nothing to\n> > > > loose).\n> > >\n> > > Can't a malicious user get around this restriction by opening channels\n> > > with themself?\u00a0 (Also, aren't current channel open outputs just P2WSH\n> > > 2-of-2 multisigs, and in the future won't they be generic P2TR outputs?\n> > > How would a stake certificate prove that the UTXO was generated for LN\n> > > rather than just belonging to a user with a 2-of-2 multisig wallet or\n> > > any key-path-spendable taproot wallet?)\n> > >\n> > > According to some random website, the current total channel balance of\n> > > the public LN is about 1,000 BTC.\u00a0 Although I'm sure this will grow with\n> > > time, it seems to me that an attacker who can rent access to stake\n> > > certificates for a one-week attack at, say, a 5% annual interest rate\n> > > would only need to pay 1 BTC to acquire stake certificates equal to all\n> > > honest users at present.\u00a0 That cost doesn't seem high enough to me to\n> > > effectively prevent attacks.\u00a0 Am I missing something?\n> > >\n> > > Thanks,\n> > >\n> > > -Dave\n> > > _______________________________________________\n> > > Lightning-dev mailing list\n> > > Lightning-dev at lists.linuxfoundation.org\n> > > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201130/6eb06798/attachment-0001.html>"
            },
            {
                "author": "Gleb Naumenko",
                "date": "2020-11-30T08:24:56",
                "message_text_only": "Hi Dave,\n\nThanks for the hard questions.\n\n>Can\u2019t a malicious user get around this restriction by opening channels\nwith themself?\n\nYou are right, preventing this kind of Sybil attack is challenging, but I don\u2019t think it\u2019s a no-go.\n\nThree separate observations which make me positive about are:\n1. This still requires locking funds by an attacker\n2. We might start with a low credit for just random valid Stake Certificates, but increase if they showed good activity: e.g., they we route through them a lot, or they paid us a lot of fees previously. Both ideas would require some extra work of linking Stake Certificates to these activities in a private matter. The paid-fees one should be easier.\n3. We might give more credit if they or their channel counterparty is just a known good actor. This can be achieved by a routing node have this second list of trustworthy UTXOs payment sender may prove inclusion for.\n\n(2) and (3) may be just a part of routing node Stake Certificate acceptance policy, I think if we like the ideas, new can make them work in a desirable private/scalable way.\n\nWe might also have senders proving that they paid fees to *other* (real) non-Sybil routing nodes, although it adds even more complexity.\n\nAlso, now that I\u2019m thinking, maybe payment receiver could also contribute to the Stake Certificate\u2026\n\n>How would a stake certificate prove that the UTXO was generated for LN rather than just belonging to a user with a 2-of-2 multisig wallet or any key-path-spendable taproot wallet?)\n\nYou are right, we can only get so close to proving that it\u2019s indeed a payment channel. I think the problem of channels-with-themselves (see a beginning of this response) includes this one, so if we solve that, this won\u2019t be a big deal.\n\n>That cost doesn\u2019t seem high enough to me to effectively prevent attacks.\n\nPerhaps having 1000 BTC staked should not allow them to send 1000 BTC over Lightning, but maybe, with Stake Certificates, this could be restricted to say 100 BTC per 0.1 hour?\nThis, of course, requires hypothesizing about honest economic activity in the Lightning Network.\nThe exact economics of Stake Certificates still has to be worked out, I\u2019m just suggesting that we probably have a lot flexibility with restrictions, since we\u2019re very permissive towards users to begin with.\n\n\u2013 gleb\nOn Nov 28, 2020, 8:25 PM +0200, David A. Harding <dave at dtrt.org>, wrote:\n> On Thu, Nov 26, 2020 at 11:40:46PM +0200, Gleb Naumenko wrote:\n> >\n> > Hello list,\n>\n> Gleb and Antoine,\n>\n> This is an interesting idea! Thank you for working on it.\n>\n> I had difficulty with one part of the proposal:\n>\n> > #### Should we allow holding *any* Bitcoins (not just LN channels) for Stake Certificates?\n> >\n> > [...] we believe that allowing any UTXO would give an attacker more\n> > opportunities to use their cold funds for this attack, or even have a\n> > secondary market where holders sell their proofs (they have nothing to\n> > loose).\n>\n> Can't a malicious user get around this restriction by opening channels\n> with themself? (Also, aren't current channel open outputs just P2WSH\n> 2-of-2 multisigs, and in the future won't they be generic P2TR outputs?\n> How would a stake certificate prove that the UTXO was generated for LN\n> rather than just belonging to a user with a 2-of-2 multisig wallet or\n> any key-path-spendable taproot wallet?)\n>\n> According to some random website, the current total channel balance of\n> the public LN is about 1,000 BTC. Although I'm sure this will grow with\n> time, it seems to me that an attacker who can rent access to stake\n> certificates for a one-week attack at, say, a 5% annual interest rate\n> would only need to pay 1 BTC to acquire stake certificates equal to all\n> honest users at present. That cost doesn't seem high enough to me to\n> effectively prevent attacks. Am I missing something?\n>\n> Thanks,\n>\n> -Dave\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201130/1155fb80/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Mitigating Channel Jamming with Stake Certificates",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Gleb Naumenko",
                "Andr\u00e9s G. Aragoneses",
                "Bastien TEINTURIER",
                "David A. Harding",
                "Lloyd Fournier",
                "ZmnSCPxj"
            ],
            "messages_count": 11,
            "total_messages_chars_count": 113607
        }
    },
    {
        "title": "[Lightning-dev] Lightning Distributed Routing",
        "thread_messages": [
            {
                "author": "Jo\u00e3o Valente",
                "date": "2020-11-28T23:46:16",
                "message_text_only": "Hey!\n\nI've been working on this new concept for routing in the lightning network.\nIt leverages the use of the information nodes have on the distribution of\nfunds in their channels to try and maximize the probability of success for\na payment.\nEach node shares with his neighbours the information it has about the\ndistribution of funds in its own neighbourhood through the form of a\nrouting table. As nodes receive new tables they'll be updating their own\nlocally maintained tables with the new information, periodically sharing\nthem with their neighbours.\nRouting tables associate destination addresses (representing nodes in the\nnetwork) to the next hop in the maximum capacity path to these nodes.\nIf a new payment is to be made a payment probe is forwarded by the payer\nand through every node in the path, collects the path information along the\nway, and reaches the payee who returns it to the payer. The payer can then\nuse this knowledge and confidently use the discovered path to route LN\npayments through.\n\nI wrote a 10 page paper about the subject and would love to get some\nfeedback:\nhttps://drive.google.com/file/d/1dahW0X-N59138ZbY-4odpXjpDnX4Gb7Z/view?usp=sharing\n\nCheers,\nJo\u00e3o Valente\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201128/bb51a60f/attachment.html>"
            },
            {
                "author": "Bastien TEINTURIER",
                "date": "2020-11-30T08:36:45",
                "message_text_only": "Hi Joao,\n\nThanks for the time you spent on this, the paper is clear on the trade-offs\n(sacrificing some privacy for\nefficiency).\n\nMy main negative feedback here is that you seem to assume that nodes will\nhonestly cooperate.\nIt feels to me that nodes can cheat and gossip biased or invalid\ninformation to their peers in order to\nattract more payments through their nodes (and collect more fees or put\nhonest routing nodes out of\nbusiness).\n\nIs that something you've thought about?\n\nCheers,\nBastien\n\nLe dim. 29 nov. 2020 \u00e0 00:46, Jo\u00e3o Valente <jvalente96 at gmail.com> a \u00e9crit :\n\n> Hey!\n>\n> I've been working on this new concept for routing in the lightning\n> network. It leverages the use of the information nodes have on the\n> distribution of funds in their channels to try and maximize the probability\n> of success for a payment.\n> Each node shares with his neighbours the information it has about the\n> distribution of funds in its own neighbourhood through the form of a\n> routing table. As nodes receive new tables they'll be updating their own\n> locally maintained tables with the new information, periodically sharing\n> them with their neighbours.\n> Routing tables associate destination addresses (representing nodes in the\n> network) to the next hop in the maximum capacity path to these nodes.\n> If a new payment is to be made a payment probe is forwarded by the payer\n> and through every node in the path, collects the path information along the\n> way, and reaches the payee who returns it to the payer. The payer can then\n> use this knowledge and confidently use the discovered path to route LN\n> payments through.\n>\n> I wrote a 10 page paper about the subject and would love to get some\n> feedback:\n>\n> https://drive.google.com/file/d/1dahW0X-N59138ZbY-4odpXjpDnX4Gb7Z/view?usp=sharing\n>\n> Cheers,\n> Jo\u00e3o Valente\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201130/83c558c8/attachment.html>"
            },
            {
                "author": "Jo\u00e3o Valente",
                "date": "2020-11-30T17:13:20",
                "message_text_only": "Hello Bastien!\n\nFirstly I'd like to thank you for the time you took to read the paper, it's\nbeen hard to get some quality reviews.\nYour feedback made me think and reach the following conclusions:\nLet's assume node A is sending information to its peer, node B, with the\ngoal of attracting more business (increasing the number of payments that\nare routed through it). In LDR this would mean A would want to announce to\nB that it belongs to larger volume routes than the ones it actually does.\nLet's say A and B shared channel state is (A: 1, B: 4).\nA shares a channel with C, state (A: 2, C: 3).\nB also shares a channel with C, state (B: 3, C: 6).\nA could dishonestly share with B knowing a path to C with capacity 4 BTC\nalthough it only has 2 currently available. By doing this A would\neffectively change B's routing preferences for payments to C, making B's\nrouting table go from:\n\nDestination | Next Hop | Capacity\n       C                A                 2\n       C                C                 3\n\n...to:\n\nDestination | Next Hop | Capacity\n       C                A                 4\n       C                C                 3\n\nMeaning B now thinks payments to C with volume in the [3, 4] BTC range can\nonly be routed through A and payments to C in the [0, 3] BTC range can be\nrouted to A or directly to C. What does this information change and how\ndoes it affect honest nodes?\nLarger [3, 4] BTC payments are not within the capacity provided by the path\nthat goes directly to C and would immediately fail when the payment is made\nin the LN layer using the path that goes through A. This breaks the\nincentive to, at least for payments in this volume range, share the invalid\ninformation. The cheating nodes would not be putting honest nodes out of\nbusiness nor increasing the number of payments that go through them.\nThe problem starts when the cheating node fakes directly competing for\nroutes within the capacity range provided by honest nodes and not by them\n([2, 3] BTC range for the example). Although this could not be used to\ncollect more fees because payments would eventually fail in the LN layer\nand the fees wouldn't be able to be collected, it could certainly be used\nto \"put honest nodes out of work\", stealing routing paths that would\notherwise belong to them.\nI think the solution lies in the way in which a node chooses the next best\nhop for a certain destination. I started by proposing the following\n(section 3.1.2):\n\n>The \u201dbest next hop\u201d for a certain payment destination is defined as being\nthe hop with the lowest fee from the group of next hops for that\ndestination where the maximum volume allowed is bigger than the payment\u2019s\nvolume.\n\nI propose changing it to:\n\n>The \u201dbest next hop\u201d for a certain payment destination is defined as being\na random hop taken from the group of next hops for that destination\nwhere the maximum volume allowed is higher than the payment\u2019s volume.\n\nWhich would diminish the incentive attacking nodes have to share fake\ngossip by not allowing them to set themselves as first in line to be chosen\nas next hop. A maximum fee that a node is willing to pay would also need to\nbe set,\nAlso, keep in mind that the capacity the maximum path capacity can lie\nabout is limited by the capacity of his biggest channel, available in the\nblockchain.\n\nPS: I adapted Figure 5 from your trampoline routing presentation, hope\nthat's ok!\n\nKind regards,\nJo\u00e3o Valente\n\nOn Mon, 30 Nov 2020 at 08:36, Bastien TEINTURIER <bastien at acinq.fr> wrote:\n\n> Hi Joao,\n>\n> Thanks for the time you spent on this, the paper is clear on the\n> trade-offs (sacrificing some privacy for\n> efficiency).\n>\n> My main negative feedback here is that you seem to assume that nodes will\n> honestly cooperate.\n> It feels to me that nodes can cheat and gossip biased or invalid\n> information to their peers in order to\n> attract more payments through their nodes (and collect more fees or put\n> honest routing nodes out of\n> business).\n>\n> Is that something you've thought about?\n>\n> Cheers,\n> Bastien\n>\n> Le dim. 29 nov. 2020 \u00e0 00:46, Jo\u00e3o Valente <jvalente96 at gmail.com> a\n> \u00e9crit :\n>\n>> Hey!\n>>\n>> I've been working on this new concept for routing in the lightning\n>> network. It leverages the use of the information nodes have on the\n>> distribution of funds in their channels to try and maximize the probability\n>> of success for a payment.\n>> Each node shares with his neighbours the information it has about the\n>> distribution of funds in its own neighbourhood through the form of a\n>> routing table. As nodes receive new tables they'll be updating their own\n>> locally maintained tables with the new information, periodically sharing\n>> them with their neighbours.\n>> Routing tables associate destination addresses (representing nodes in the\n>> network) to the next hop in the maximum capacity path to these nodes.\n>> If a new payment is to be made a payment probe is forwarded by the payer\n>> and through every node in the path, collects the path information along the\n>> way, and reaches the payee who returns it to the payer. The payer can then\n>> use this knowledge and confidently use the discovered path to route LN\n>> payments through.\n>>\n>> I wrote a 10 page paper about the subject and would love to get some\n>> feedback:\n>>\n>> https://drive.google.com/file/d/1dahW0X-N59138ZbY-4odpXjpDnX4Gb7Z/view?usp=sharing\n>>\n>> Cheers,\n>> Jo\u00e3o Valente\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20201130/39249949/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Lightning Distributed Routing",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Bastien TEINTURIER",
                "Jo\u00e3o Valente"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 9339
        }
    }
]