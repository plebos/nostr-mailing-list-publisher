[
    {
        "title": "[Lightning-dev] A Note on Public Communication",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2023-05-02T12:53:20",
                "message_text_only": "Can you clarify which \"recent mails that were posted to this list\" are you\nreferring to?\n\n\nOn Sun, Apr 30, 2023 at 3:57\u202fAM niftynei <niftynei at gmail.com> wrote:\n\n> Hi all,\n>\n> When I joined the lightning community a few years ago, I was relatively\n> new to open source software and specification work. Rusty really impressed\n> on me on the importance of holding conversations, as much as possible in\n> public.\n>\n> Practically speaking, this encompasses IRC, this mailing list, and github\n> issues/PRs.\n>\n> The reason for this is twofold.  It helps document the range of options\n> considered for technical decisions and it provides an interface point for\n> new participants to contribute to the discussion.\n>\n> Given some recent mails that were posted to this list, now seems like a\n> good time to reiterate the importance and preference of public\n> communication whenever possible, especially for specification or technical\n> discussions.\n>\n>\n> ~ nifty\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230502/6488a9c4/attachment-0001.html>"
            },
            {
                "author": "Tony Giorgio",
                "date": "2023-05-06T03:37:30",
                "message_text_only": "Is there a better place to have public communication? Unfortunately since one off topic email was sent here, it's been a ghost town. It appears that there's many emails being held and only one moderator that checks them once a week.\n\nWould hate to see this list die but wondering if there's a better place for discussions?\n\nTony\n\n-------- Original Message --------\nOn Apr 29, 2023, 9:57 PM, niftynei wrote:\n\n> Hi all,\n>\n> When I joined the lightning community a few years ago, I was relatively new to open source software and specification work. Rusty really impressed on me on the importance of holding conversations, as much as possible in public.\n>\n> Practically speaking, this encompasses IRC, this mailing list, and github issues/PRs.\n>\n> The reason for this is twofold. It helps document the range of options considered for technical decisions and it provides an interface point for new participants to contribute to the discussion.\n>\n> Given some recent mails that were posted to this list, now seems like a good time to reiterate the importance and preference of public communication whenever possible, especially for specification or technical discussions.\n>\n> ~ nifty\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230506/5bcba216/attachment.html>"
            },
            {
                "author": "Bryan Bishop",
                "date": "2023-05-08T20:39:45",
                "message_text_only": "Well, you could always send to bitcoin-dev at lists.linuxfoundation.org -- we\nare usually pretty fast with email modqueue.\n\nOn Mon, May 8, 2023 at 3:26\u202fPM Tony Giorgio via Lightning-dev <\nlightning-dev at lists.linuxfoundation.org> wrote:\n\n> Is there a better place to have public communication? Unfortunately since\n> one off topic email was sent here, it's been a ghost town. It appears that\n> there's many emails being held and only one moderator that checks them once\n> a week.\n>\n> Would hate to see this list die but wondering if there's a better place\n> for discussions?\n>\n> Tony\n>\n>\n>\n>\n>\n>\n> -------- Original Message --------\n> On Apr 29, 2023, 9:57 PM, niftynei < niftynei at gmail.com> wrote:\n>\n>\n> Hi all,\n>\n> When I joined the lightning community a few years ago, I was relatively\n> new to open source software and specification work. Rusty really impressed\n> on me on the importance of holding conversations, as much as possible in\n> public.\n>\n> Practically speaking, this encompasses IRC, this mailing list, and github\n> issues/PRs.\n>\n> The reason for this is twofold.  It helps document the range of options\n> considered for technical decisions and it provides an interface point for\n> new participants to contribute to the discussion.\n>\n> Given some recent mails that were posted to this list, now seems like a\n> good time to reiterate the importance and preference of public\n> communication whenever possible, especially for specification or technical\n> discussions.\n>\n>\n> ~ nifty\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n\n-- \n- Bryan\nhttps://twitter.com/kanzure\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230508/bae066c7/attachment-0001.html>"
            },
            {
                "author": "Vincenzo Palazzo",
                "date": "2023-05-08T21:07:37",
                "message_text_only": "> Is there a better place to have public communication? Unfortunately since one off topic email was sent here, it's been a ghost town. It appears that there's many emails being held and only one moderator that checks them once a week.\n>\n> Would hate to see this list die but wondering if there's a better place for discussions?\n\nI think currently the list is the most accessible way that we have.\n\nI am not aware of any other tools that are as accessible as the list archive\nto search for some history, and also to allow people in 10 years from now to\nimplement some of the ideas proposed these days.\n\nBut I would agree to change communication tools if we do not lose these\ntwo properties.\n\nCheers.\n\nVincent."
            },
            {
                "author": "Michael Folkson",
                "date": "2023-05-08T21:47:20",
                "message_text_only": "Perhaps we need another moderator or two for the lightning-dev mailing list? There are already a lot of emails on the bitcoin-dev mailing list and so despite my views on the trend of Bitcoin and Lightning discussion becoming increasingly intertwined it probably makes sense to keep both bitcoin-dev and lightning-dev lists and just bump the number of moderators on lightning-dev.\n\nThanks\nMichael\n\n--\nMichael Folkson\nEmail: michaelfolkson at protonmail.com\nGPG: A2CF5D71603C92010659818D2A75D601B23FEE0F\n\n\nLearn about Bitcoin: https://www.youtube.com/@portofbitcoin\n\n\n------- Original Message -------\nOn Monday, May 8th, 2023 at 22:07, Vincenzo Palazzo <vincenzopalazzodev at gmail.com> wrote:\n\n\n> > Is there a better place to have public communication? Unfortunately since one off topic email was sent here, it's been a ghost town. It appears that there's many emails being held and only one moderator that checks them once a week.\n> > \n> > Would hate to see this list die but wondering if there's a better place for discussions?\n> \n> \n> I think currently the list is the most accessible way that we have.\n> \n> I am not aware of any other tools that are as accessible as the list archive\n> to search for some history, and also to allow people in 10 years from now to\n> implement some of the ideas proposed these days.\n> \n> But I would agree to change communication tools if we do not lose these\n> two properties.\n> \n> Cheers.\n> \n> Vincent.\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Vincenzo Palazzo",
                "date": "2023-05-09T08:52:31",
                "message_text_only": "Hi Micheal (and all),\n\n> Perhaps we need another moderator or two for the lightning-dev mailing list? There are already a lot of emails on the bitcoin-dev mailing list and so despite my views on the trend of Bitcoin and Lightning discussion becoming increasingly intertwined it probably makes sense to keep both bitcoin-dev and lightning-dev lists and just bump the number of moderators on lightning-dev.\nThis was discussed yesterday during the open meeting,\nnow there are two more people that are pretty active\non the list.\n\nSo, should be not much delay here anymore.\n\nCheers!\n\nVincent."
            },
            {
                "author": "Antoine Riard",
                "date": "2023-05-10T16:57:01",
                "message_text_only": "Hi Tony,\n\n> Is there a better place to have public communication? Unfortunately since\none off topic email was sent here, it's been a ghost town. It appears that\nthere's many emails being held and only one moderator that checks them once\na week.\n\nAs I think you're referring to my post of March 21th and as the author of\nthis post, I'll politely refuse the qualification of \"off-topic\". I had and\nI still have the concerns of \"frivolous legal claims\" being used between\nbitcoin developers/organizations provoking a distortion of the neutrality\nof the development and a chilling effect of the technical discussions (i.e\ncode we compile and spec we implement). For those reasons, it was my legal\nright and moral duty to inform the community of what is happening between\nChaincode and myself. And here I'm following the recommendation of one of\nthe moderators of the Lightning mailing list himself \"If this worries you\ntoo, let's make sure we keep each other honest, OK?\" [0].\n\nWhen you think a group of people with open-source responsibilities are in a\nsituation of conflict of interests or \"moral hazards\", or even the\nappearance of them, you have the right to expose the wrongdoing, including\nthe _proportional_ revelation of private elements. People have done the\n\"free choice\" to conduct a career in open-source, for some even declaring\nin some context to maintain integrity and accept their actions to be\nsubmitted to external accountability [1]. While the exposure of private\nelements of public personalities might break common courtesy, it's a\nmorally valid practice if you're familiar with the public institutions of\nUS and Europe, and I think this practice has found validity in the history\nof open-source commons or IETF's protocol development [1].\n\nBeyond, the Bitcoin and Lightning development communication channels\nconstitute a public forum, where by nature the participants are exchanging\nideas and defending competing interests. In consequence, the participants'\nrights and capabilities to contribute and speak their minds in those\ncommunication channels should be protected. Those communication channels\nare not your usual corporate workplace, and in case of conflicting\nprinciples, the maintainers of those communication channels should ensure a\nbalance of rights and a proportionality in any restraining measure.\n\nAnd this new post is not to exonerate myself of any legal responsibility\nfor personal matters that could be recognized as the outcome of a judicial\nprocess, respective of both rights of the accusation and rights of the\ndefense. Rather to enlighten the Bitcoin community that the formal\nseparation between private matters and open-source responsibilities, and\nthe adequate check-and-balances to guarantee this separation is somehow\nwhat are the underlying stakes for this feud between Chaincode and myself,\nfrom my perspective. I can say missing an open-source engineering meeting\nor being revoked a few Github permissions matters far less than the clear\naffirmation and respect of the freedom of expression, the presumption of\ninnocence and due process in the Bitcoin common space, all proportions\nconserved.\n\nI don't blame any party involved in this issue, nor assign \"bad\nintentions''. One position is really a function of your life experiences,\nknowledge of the legal and cultural framework and access to the factual\nelements. As all human conflicts it is not binary rather \"grey\". People can\nbe top executives at a billion-dollar company, having successful ventures\nwith hundreds of folks under management, or have a lot of responsibilities\nfor their relative young age, and still disagree on the set of legal and\nmoral principles to apply in the present case.\n\nFinally, thanks to the Bitcoin friends who have reached out to call for\nlevel-headedness and cool-mindness in the public discussion of this complex\ntopic. Like I said to them, in the lack of more suspected wrongdoing from\nthe other side, I won't communicate further on this subject on the Bitcoin\nand Lightning technical channels. However I still firmly believe the\ndiscussion on the principles, abstract in the maximum from its private\nelements, should still be pursued on other channels. Independently, there\nis a legal channel opened between Chaincode and myself and good progress is\nmade to find a serene and long-standing resolution to this issue.\n\nBest,\nAntoine\n\n[0]\nhttps://rusty-lightning.medium.com/the-corrosion-of-ethics-in-cryptocurrencies-f7ba77e9dfc3\n[1]\nhttps://github.com/btrustteam/board-book/blob/main/vision/genesis_principles.md\n[2]\nhttps://www.ietf.org/about/administration/policies-procedures/conflict-interest/\n\nLe lun. 8 mai 2023 \u00e0 21:26, Tony Giorgio via Lightning-dev <\nlightning-dev at lists.linuxfoundation.org> a \u00e9crit :\n\n> Is there a better place to have public communication? Unfortunately since\n> one off topic email was sent here, it's been a ghost town. It appears that\n> there's many emails being held and only one moderator that checks them once\n> a week.\n>\n> Would hate to see this list die but wondering if there's a better place\n> for discussions?\n>\n> Tony\n>\n>\n>\n>\n>\n>\n> -------- Original Message --------\n> On Apr 29, 2023, 9:57 PM, niftynei < niftynei at gmail.com> wrote:\n>\n>\n> Hi all,\n>\n> When I joined the lightning community a few years ago, I was relatively\n> new to open source software and specification work. Rusty really impressed\n> on me on the importance of holding conversations, as much as possible in\n> public.\n>\n> Practically speaking, this encompasses IRC, this mailing list, and github\n> issues/PRs.\n>\n> The reason for this is twofold.  It helps document the range of options\n> considered for technical decisions and it provides an interface point for\n> new participants to contribute to the discussion.\n>\n> Given some recent mails that were posted to this list, now seems like a\n> good time to reiterate the importance and preference of public\n> communication whenever possible, especially for specification or technical\n> discussions.\n>\n>\n> ~ nifty\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230510/1f0f9268/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2023-05-11T08:55:57",
                "message_text_only": "Pressumption of innocence?\nRight to defend yourself?\n\nWow, that sounds amazing, but, for example, wouldn't me defendibg myself\nfrom jeremy rubin be offtopic like...pretty much everywhere?\nNot sure you're familiar with that story, certainly you didn't hear my side\nof the story, did you?\nWhere would it be fine for me to defend myself?\nI don't want to keep cosing bitcoin anymore, novody would review my PRs\nanyway once jeremy made sure everyone thought I am evil. Or perhaps I'm\nparanoid. Anyway, I would juat like to find the right venue to clean my\nname or at least be allowed to try. If that venue exists at all, that is.\n\nPersonally, I feel extremely censored.\nI also feel I've been judged unfairly and margibalized by many.\nIf it was because of my mistakes and not because jeremy and others lied\nabout me behind my back, well, I would like to know at least.\n\nAm I really asking that much?\nI'm surprised at how very few people are in favor of the american first\namendment, btw.\n\nI know, I know. Offtopic. Everywhere. Every time.\nIf something it's offtopic everywhere, that's a censored taboo, I think.\n\nTherefore I challenge to a public debate somewhere. For me to defend myself\nand for him to defend himself too (if that's possible).\nI know it's never going to happen, but I want to make sure it is known that\nit is because of him, I'm more than ready to defend myself against him. Is\nhe?\n\nHe can call me a nazi and even though I'm not one (I'm not even racist), it\nis not so easy to sue for defamation in international jurisdictions.\nImagine if I called him a pederast (kethuboth 11b, sanhesrin 69b) or a\ncannibal (samhedrin 64a) without giving him a chance to defend himself.\nWouldn't that be nasty?\nI want him to be able to defend himself too, or at least try it.\n\nNow, moderators, censor this email for being offtopic and prove my point.\nJeremy will still get the email and I bet he won't want a public debate.\nBut I'm biased because I think he is guilty. Just like jeffrey epstein.\nIs jeremy rubin a mossad agent?\nIs there any reason to think so?\nOr are these just rummors?\nHe should have a chance to try to clean his name, in my opinion. Again,\njust like jeffrey epstein.\n\nOn Wed, May 10, 2023, 17:57 Antoine Riard <antoine.riard at gmail.com> wrote:\n\n> Hi Tony,\n>\n> > Is there a better place to have public communication? Unfortunately\n> since one off topic email was sent here, it's been a ghost town. It appears\n> that there's many emails being held and only one moderator that checks them\n> once a week.\n>\n> As I think you're referring to my post of March 21th and as the author of\n> this post, I'll politely refuse the qualification of \"off-topic\". I had and\n> I still have the concerns of \"frivolous legal claims\" being used between\n> bitcoin developers/organizations provoking a distortion of the neutrality\n> of the development and a chilling effect of the technical discussions (i.e\n> code we compile and spec we implement). For those reasons, it was my legal\n> right and moral duty to inform the community of what is happening between\n> Chaincode and myself. And here I'm following the recommendation of one of\n> the moderators of the Lightning mailing list himself \"If this worries you\n> too, let's make sure we keep each other honest, OK?\" [0].\n>\n> When you think a group of people with open-source responsibilities are in\n> a situation of conflict of interests or \"moral hazards\", or even the\n> appearance of them, you have the right to expose the wrongdoing, including\n> the _proportional_ revelation of private elements. People have done the\n> \"free choice\" to conduct a career in open-source, for some even declaring\n> in some context to maintain integrity and accept their actions to be\n> submitted to external accountability [1]. While the exposure of private\n> elements of public personalities might break common courtesy, it's a\n> morally valid practice if you're familiar with the public institutions of\n> US and Europe, and I think this practice has found validity in the history\n> of open-source commons or IETF's protocol development [1].\n>\n> Beyond, the Bitcoin and Lightning development communication channels\n> constitute a public forum, where by nature the participants are exchanging\n> ideas and defending competing interests. In consequence, the participants'\n> rights and capabilities to contribute and speak their minds in those\n> communication channels should be protected. Those communication channels\n> are not your usual corporate workplace, and in case of conflicting\n> principles, the maintainers of those communication channels should ensure a\n> balance of rights and a proportionality in any restraining measure.\n>\n> And this new post is not to exonerate myself of any legal responsibility\n> for personal matters that could be recognized as the outcome of a judicial\n> process, respective of both rights of the accusation and rights of the\n> defense. Rather to enlighten the Bitcoin community that the formal\n> separation between private matters and open-source responsibilities, and\n> the adequate check-and-balances to guarantee this separation is somehow\n> what are the underlying stakes for this feud between Chaincode and myself,\n> from my perspective. I can say missing an open-source engineering meeting\n> or being revoked a few Github permissions matters far less than the clear\n> affirmation and respect of the freedom of expression, the presumption of\n> innocence and due process in the Bitcoin common space, all proportions\n> conserved.\n>\n> I don't blame any party involved in this issue, nor assign \"bad\n> intentions''. One position is really a function of your life experiences,\n> knowledge of the legal and cultural framework and access to the factual\n> elements. As all human conflicts it is not binary rather \"grey\". People can\n> be top executives at a billion-dollar company, having successful ventures\n> with hundreds of folks under management, or have a lot of responsibilities\n> for their relative young age, and still disagree on the set of legal and\n> moral principles to apply in the present case.\n>\n> Finally, thanks to the Bitcoin friends who have reached out to call for\n> level-headedness and cool-mindness in the public discussion of this complex\n> topic. Like I said to them, in the lack of more suspected wrongdoing from\n> the other side, I won't communicate further on this subject on the Bitcoin\n> and Lightning technical channels. However I still firmly believe the\n> discussion on the principles, abstract in the maximum from its private\n> elements, should still be pursued on other channels. Independently, there\n> is a legal channel opened between Chaincode and myself and good progress is\n> made to find a serene and long-standing resolution to this issue.\n>\n> Best,\n> Antoine\n>\n> [0]\n> https://rusty-lightning.medium.com/the-corrosion-of-ethics-in-cryptocurrencies-f7ba77e9dfc3\n> [1]\n> https://github.com/btrustteam/board-book/blob/main/vision/genesis_principles.md\n> [2]\n> https://www.ietf.org/about/administration/policies-procedures/conflict-interest/\n>\n> Le lun. 8 mai 2023 \u00e0 21:26, Tony Giorgio via Lightning-dev <\n> lightning-dev at lists.linuxfoundation.org> a \u00e9crit :\n>\n>> Is there a better place to have public communication? Unfortunately since\n>> one off topic email was sent here, it's been a ghost town. It appears that\n>> there's many emails being held and only one moderator that checks them once\n>> a week.\n>>\n>> Would hate to see this list die but wondering if there's a better place\n>> for discussions?\n>>\n>> Tony\n>>\n>>\n>>\n>>\n>>\n>>\n>> -------- Original Message --------\n>> On Apr 29, 2023, 9:57 PM, niftynei < niftynei at gmail.com> wrote:\n>>\n>>\n>> Hi all,\n>>\n>> When I joined the lightning community a few years ago, I was relatively\n>> new to open source software and specification work. Rusty really impressed\n>> on me on the importance of holding conversations, as much as possible in\n>> public.\n>>\n>> Practically speaking, this encompasses IRC, this mailing list, and github\n>> issues/PRs.\n>>\n>> The reason for this is twofold.  It helps document the range of options\n>> considered for technical decisions and it provides an interface point for\n>> new participants to contribute to the discussion.\n>>\n>> Given some recent mails that were posted to this list, now seems like a\n>> good time to reiterate the importance and preference of public\n>> communication whenever possible, especially for specification or technical\n>> discussions.\n>>\n>>\n>> ~ nifty\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230511/8bc90abd/attachment.html>"
            },
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2023-05-11T08:59:56",
                "message_text_only": "I challenge jeremy to a public debate somewhere. I forgot to say the name\non that sentence. Just to clarify.\nIf he believes he is on the right and I am on the wrong and \"clearly\ndelusional\" (or whatever he accuses me of), then he shouldn't be scared of\nthe debate, no?\nOh, let me guess...\"I don't want to give him a platform, he is worse than\nkanye west\"?\nYeah, I bet the excuses are going to be along those lines.\n\nGood bye, guys, I guess this will get me kicked out from another forum.\nI lost count, but it feels like more than 109 forums, just saying.\nFor no reason at all, of course.\n\nOn Thu, May 11, 2023, 09:55 Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n> Pressumption of innocence?\n> Right to defend yourself?\n>\n> Wow, that sounds amazing, but, for example, wouldn't me defendibg myself\n> from jeremy rubin be offtopic like...pretty much everywhere?\n> Not sure you're familiar with that story, certainly you didn't hear my\n> side of the story, did you?\n> Where would it be fine for me to defend myself?\n> I don't want to keep cosing bitcoin anymore, novody would review my PRs\n> anyway once jeremy made sure everyone thought I am evil. Or perhaps I'm\n> paranoid. Anyway, I would juat like to find the right venue to clean my\n> name or at least be allowed to try. If that venue exists at all, that is.\n>\n> Personally, I feel extremely censored.\n> I also feel I've been judged unfairly and margibalized by many.\n> If it was because of my mistakes and not because jeremy and others lied\n> about me behind my back, well, I would like to know at least.\n>\n> Am I really asking that much?\n> I'm surprised at how very few people are in favor of the american first\n> amendment, btw.\n>\n> I know, I know. Offtopic. Everywhere. Every time.\n> If something it's offtopic everywhere, that's a censored taboo, I think.\n>\n> Therefore I challenge to a public debate somewhere. For me to defend\n> myself and for him to defend himself too (if that's possible).\n> I know it's never going to happen, but I want to make sure it is known\n> that it is because of him, I'm more than ready to defend myself against\n> him. Is he?\n>\n> He can call me a nazi and even though I'm not one (I'm not even racist),\n> it is not so easy to sue for defamation in international jurisdictions.\n> Imagine if I called him a pederast (kethuboth 11b, sanhesrin 69b) or a\n> cannibal (samhedrin 64a) without giving him a chance to defend himself.\n> Wouldn't that be nasty?\n> I want him to be able to defend himself too, or at least try it.\n>\n> Now, moderators, censor this email for being offtopic and prove my point.\n> Jeremy will still get the email and I bet he won't want a public debate.\n> But I'm biased because I think he is guilty. Just like jeffrey epstein.\n> Is jeremy rubin a mossad agent?\n> Is there any reason to think so?\n> Or are these just rummors?\n> He should have a chance to try to clean his name, in my opinion. Again,\n> just like jeffrey epstein.\n>\n> On Wed, May 10, 2023, 17:57 Antoine Riard <antoine.riard at gmail.com> wrote:\n>\n>> Hi Tony,\n>>\n>> > Is there a better place to have public communication? Unfortunately\n>> since one off topic email was sent here, it's been a ghost town. It appears\n>> that there's many emails being held and only one moderator that checks them\n>> once a week.\n>>\n>> As I think you're referring to my post of March 21th and as the author of\n>> this post, I'll politely refuse the qualification of \"off-topic\". I had and\n>> I still have the concerns of \"frivolous legal claims\" being used between\n>> bitcoin developers/organizations provoking a distortion of the neutrality\n>> of the development and a chilling effect of the technical discussions (i.e\n>> code we compile and spec we implement). For those reasons, it was my legal\n>> right and moral duty to inform the community of what is happening between\n>> Chaincode and myself. And here I'm following the recommendation of one of\n>> the moderators of the Lightning mailing list himself \"If this worries you\n>> too, let's make sure we keep each other honest, OK?\" [0].\n>>\n>> When you think a group of people with open-source responsibilities are in\n>> a situation of conflict of interests or \"moral hazards\", or even the\n>> appearance of them, you have the right to expose the wrongdoing, including\n>> the _proportional_ revelation of private elements. People have done the\n>> \"free choice\" to conduct a career in open-source, for some even declaring\n>> in some context to maintain integrity and accept their actions to be\n>> submitted to external accountability [1]. While the exposure of private\n>> elements of public personalities might break common courtesy, it's a\n>> morally valid practice if you're familiar with the public institutions of\n>> US and Europe, and I think this practice has found validity in the history\n>> of open-source commons or IETF's protocol development [1].\n>>\n>> Beyond, the Bitcoin and Lightning development communication channels\n>> constitute a public forum, where by nature the participants are exchanging\n>> ideas and defending competing interests. In consequence, the participants'\n>> rights and capabilities to contribute and speak their minds in those\n>> communication channels should be protected. Those communication channels\n>> are not your usual corporate workplace, and in case of conflicting\n>> principles, the maintainers of those communication channels should ensure a\n>> balance of rights and a proportionality in any restraining measure.\n>>\n>> And this new post is not to exonerate myself of any legal responsibility\n>> for personal matters that could be recognized as the outcome of a judicial\n>> process, respective of both rights of the accusation and rights of the\n>> defense. Rather to enlighten the Bitcoin community that the formal\n>> separation between private matters and open-source responsibilities, and\n>> the adequate check-and-balances to guarantee this separation is somehow\n>> what are the underlying stakes for this feud between Chaincode and myself,\n>> from my perspective. I can say missing an open-source engineering meeting\n>> or being revoked a few Github permissions matters far less than the clear\n>> affirmation and respect of the freedom of expression, the presumption of\n>> innocence and due process in the Bitcoin common space, all proportions\n>> conserved.\n>>\n>> I don't blame any party involved in this issue, nor assign \"bad\n>> intentions''. One position is really a function of your life experiences,\n>> knowledge of the legal and cultural framework and access to the factual\n>> elements. As all human conflicts it is not binary rather \"grey\". People can\n>> be top executives at a billion-dollar company, having successful ventures\n>> with hundreds of folks under management, or have a lot of responsibilities\n>> for their relative young age, and still disagree on the set of legal and\n>> moral principles to apply in the present case.\n>>\n>> Finally, thanks to the Bitcoin friends who have reached out to call for\n>> level-headedness and cool-mindness in the public discussion of this complex\n>> topic. Like I said to them, in the lack of more suspected wrongdoing from\n>> the other side, I won't communicate further on this subject on the Bitcoin\n>> and Lightning technical channels. However I still firmly believe the\n>> discussion on the principles, abstract in the maximum from its private\n>> elements, should still be pursued on other channels. Independently, there\n>> is a legal channel opened between Chaincode and myself and good progress is\n>> made to find a serene and long-standing resolution to this issue.\n>>\n>> Best,\n>> Antoine\n>>\n>> [0]\n>> https://rusty-lightning.medium.com/the-corrosion-of-ethics-in-cryptocurrencies-f7ba77e9dfc3\n>> [1]\n>> https://github.com/btrustteam/board-book/blob/main/vision/genesis_principles.md\n>> [2]\n>> https://www.ietf.org/about/administration/policies-procedures/conflict-interest/\n>>\n>> Le lun. 8 mai 2023 \u00e0 21:26, Tony Giorgio via Lightning-dev <\n>> lightning-dev at lists.linuxfoundation.org> a \u00e9crit :\n>>\n>>> Is there a better place to have public communication? Unfortunately\n>>> since one off topic email was sent here, it's been a ghost town. It appears\n>>> that there's many emails being held and only one moderator that checks them\n>>> once a week.\n>>>\n>>> Would hate to see this list die but wondering if there's a better place\n>>> for discussions?\n>>>\n>>> Tony\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>> -------- Original Message --------\n>>> On Apr 29, 2023, 9:57 PM, niftynei < niftynei at gmail.com> wrote:\n>>>\n>>>\n>>> Hi all,\n>>>\n>>> When I joined the lightning community a few years ago, I was relatively\n>>> new to open source software and specification work. Rusty really impressed\n>>> on me on the importance of holding conversations, as much as possible in\n>>> public.\n>>>\n>>> Practically speaking, this encompasses IRC, this mailing list, and\n>>> github issues/PRs.\n>>>\n>>> The reason for this is twofold.  It helps document the range of options\n>>> considered for technical decisions and it provides an interface point for\n>>> new participants to contribute to the discussion.\n>>>\n>>> Given some recent mails that were posted to this list, now seems like a\n>>> good time to reiterate the importance and preference of public\n>>> communication whenever possible, especially for specification or technical\n>>> discussions.\n>>>\n>>>\n>>> ~ nifty\n>>>\n>>> _______________________________________________\n>>> Lightning-dev mailing list\n>>> Lightning-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>>\n>>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230511/7f6c0cd5/attachment-0001.html>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2023-05-11T18:41:02",
                "message_text_only": "Jorge,\n\nI invite you to consider reading your emails before you send them. During\nthis reread, I specifically encourage you to do so with the frame of mind\nof how your words will be read and understood by others on this mailing\nlist.\n\nThe people on this list may have varying levels of familiarity with the\ndrama you are referencing. If we consider the technical dispositions and\nthe critical thinking capacity of the typical reader of this list, it is\noverwhelmingly probable that someone reading your note is going to be\nsuspicious of your purely case due to the overt antagonism that is embedded\nin every line. After reading your note, I am hard pressed to imagine that\nanyone would come away from reading it with more sympathy for your\ncase, which I believe is the opposite of the intended outcome. If you wish\nto affect change, should communicate in a way that recruits allies, seeks\ncommon ground, and demonstrates good faith. Without that you will only\ncreate more enemies, and feel like you are being \"unfairly\" victimized by\neveryone you interact with here.\n\nI am generally assuming that you are interested in getting people to see\nthings from your point of view and it pains me to see you further entrench\nyourself in a situation that you clearly do not wish to be in. Realize that\nyou have the power to change this and elicit greater sympathy and\ncooperation simply by taking greater care in seeing how your words get\nunderstood by others.\n\nKeags\n\nOn Thu, May 11, 2023 at 4:53\u202fAM Jorge Tim\u00f3n <jtimon at jtimon.cc> wrote:\n\n> Pressumption of innocence?\n> Right to defend yourself?\n>\n> Wow, that sounds amazing, but, for example, wouldn't me defendibg myself\n> from jeremy rubin be offtopic like...pretty much everywhere?\n> Not sure you're familiar with that story, certainly you didn't hear my\n> side of the story, did you?\n> Where would it be fine for me to defend myself?\n> I don't want to keep cosing bitcoin anymore, novody would review my PRs\n> anyway once jeremy made sure everyone thought I am evil. Or perhaps I'm\n> paranoid. Anyway, I would juat like to find the right venue to clean my\n> name or at least be allowed to try. If that venue exists at all, that is.\n>\n> Personally, I feel extremely censored.\n> I also feel I've been judged unfairly and margibalized by many.\n> If it was because of my mistakes and not because jeremy and others lied\n> about me behind my back, well, I would like to know at least.\n>\n> Am I really asking that much?\n> I'm surprised at how very few people are in favor of the american first\n> amendment, btw.\n>\n> I know, I know. Offtopic. Everywhere. Every time.\n> If something it's offtopic everywhere, that's a censored taboo, I think.\n>\n> Therefore I challenge to a public debate somewhere. For me to defend\n> myself and for him to defend himself too (if that's possible).\n> I know it's never going to happen, but I want to make sure it is known\n> that it is because of him, I'm more than ready to defend myself against\n> him. Is he?\n>\n> He can call me a nazi and even though I'm not one (I'm not even racist),\n> it is not so easy to sue for defamation in international jurisdictions.\n> Imagine if I called him a pederast (kethuboth 11b, sanhesrin 69b) or a\n> cannibal (samhedrin 64a) without giving him a chance to defend himself.\n> Wouldn't that be nasty?\n> I want him to be able to defend himself too, or at least try it.\n>\n> Now, moderators, censor this email for being offtopic and prove my point.\n> Jeremy will still get the email and I bet he won't want a public debate.\n> But I'm biased because I think he is guilty. Just like jeffrey epstein.\n> Is jeremy rubin a mossad agent?\n> Is there any reason to think so?\n> Or are these just rummors?\n> He should have a chance to try to clean his name, in my opinion. Again,\n> just like jeffrey epstein.\n>\n> On Wed, May 10, 2023, 17:57 Antoine Riard <antoine.riard at gmail.com> wrote:\n>\n>> Hi Tony,\n>>\n>> > Is there a better place to have public communication? Unfortunately\n>> since one off topic email was sent here, it's been a ghost town. It appears\n>> that there's many emails being held and only one moderator that checks them\n>> once a week.\n>>\n>> As I think you're referring to my post of March 21th and as the author of\n>> this post, I'll politely refuse the qualification of \"off-topic\". I had and\n>> I still have the concerns of \"frivolous legal claims\" being used between\n>> bitcoin developers/organizations provoking a distortion of the neutrality\n>> of the development and a chilling effect of the technical discussions (i.e\n>> code we compile and spec we implement). For those reasons, it was my legal\n>> right and moral duty to inform the community of what is happening between\n>> Chaincode and myself. And here I'm following the recommendation of one of\n>> the moderators of the Lightning mailing list himself \"If this worries you\n>> too, let's make sure we keep each other honest, OK?\" [0].\n>>\n>> When you think a group of people with open-source responsibilities are in\n>> a situation of conflict of interests or \"moral hazards\", or even the\n>> appearance of them, you have the right to expose the wrongdoing, including\n>> the _proportional_ revelation of private elements. People have done the\n>> \"free choice\" to conduct a career in open-source, for some even declaring\n>> in some context to maintain integrity and accept their actions to be\n>> submitted to external accountability [1]. While the exposure of private\n>> elements of public personalities might break common courtesy, it's a\n>> morally valid practice if you're familiar with the public institutions of\n>> US and Europe, and I think this practice has found validity in the history\n>> of open-source commons or IETF's protocol development [1].\n>>\n>> Beyond, the Bitcoin and Lightning development communication channels\n>> constitute a public forum, where by nature the participants are exchanging\n>> ideas and defending competing interests. In consequence, the participants'\n>> rights and capabilities to contribute and speak their minds in those\n>> communication channels should be protected. Those communication channels\n>> are not your usual corporate workplace, and in case of conflicting\n>> principles, the maintainers of those communication channels should ensure a\n>> balance of rights and a proportionality in any restraining measure.\n>>\n>> And this new post is not to exonerate myself of any legal responsibility\n>> for personal matters that could be recognized as the outcome of a judicial\n>> process, respective of both rights of the accusation and rights of the\n>> defense. Rather to enlighten the Bitcoin community that the formal\n>> separation between private matters and open-source responsibilities, and\n>> the adequate check-and-balances to guarantee this separation is somehow\n>> what are the underlying stakes for this feud between Chaincode and myself,\n>> from my perspective. I can say missing an open-source engineering meeting\n>> or being revoked a few Github permissions matters far less than the clear\n>> affirmation and respect of the freedom of expression, the presumption of\n>> innocence and due process in the Bitcoin common space, all proportions\n>> conserved.\n>>\n>> I don't blame any party involved in this issue, nor assign \"bad\n>> intentions''. One position is really a function of your life experiences,\n>> knowledge of the legal and cultural framework and access to the factual\n>> elements. As all human conflicts it is not binary rather \"grey\". People can\n>> be top executives at a billion-dollar company, having successful ventures\n>> with hundreds of folks under management, or have a lot of responsibilities\n>> for their relative young age, and still disagree on the set of legal and\n>> moral principles to apply in the present case.\n>>\n>> Finally, thanks to the Bitcoin friends who have reached out to call for\n>> level-headedness and cool-mindness in the public discussion of this complex\n>> topic. Like I said to them, in the lack of more suspected wrongdoing from\n>> the other side, I won't communicate further on this subject on the Bitcoin\n>> and Lightning technical channels. However I still firmly believe the\n>> discussion on the principles, abstract in the maximum from its private\n>> elements, should still be pursued on other channels. Independently, there\n>> is a legal channel opened between Chaincode and myself and good progress is\n>> made to find a serene and long-standing resolution to this issue.\n>>\n>> Best,\n>> Antoine\n>>\n>> [0]\n>> https://rusty-lightning.medium.com/the-corrosion-of-ethics-in-cryptocurrencies-f7ba77e9dfc3\n>> [1]\n>> https://github.com/btrustteam/board-book/blob/main/vision/genesis_principles.md\n>> [2]\n>> https://www.ietf.org/about/administration/policies-procedures/conflict-interest/\n>>\n>> Le lun. 8 mai 2023 \u00e0 21:26, Tony Giorgio via Lightning-dev <\n>> lightning-dev at lists.linuxfoundation.org> a \u00e9crit :\n>>\n>>> Is there a better place to have public communication? Unfortunately\n>>> since one off topic email was sent here, it's been a ghost town. It appears\n>>> that there's many emails being held and only one moderator that checks them\n>>> once a week.\n>>>\n>>> Would hate to see this list die but wondering if there's a better place\n>>> for discussions?\n>>>\n>>> Tony\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>> -------- Original Message --------\n>>> On Apr 29, 2023, 9:57 PM, niftynei < niftynei at gmail.com> wrote:\n>>>\n>>>\n>>> Hi all,\n>>>\n>>> When I joined the lightning community a few years ago, I was relatively\n>>> new to open source software and specification work. Rusty really impressed\n>>> on me on the importance of holding conversations, as much as possible in\n>>> public.\n>>>\n>>> Practically speaking, this encompasses IRC, this mailing list, and\n>>> github issues/PRs.\n>>>\n>>> The reason for this is twofold.  It helps document the range of options\n>>> considered for technical decisions and it provides an interface point for\n>>> new participants to contribute to the discussion.\n>>>\n>>> Given some recent mails that were posted to this list, now seems like a\n>>> good time to reiterate the importance and preference of public\n>>> communication whenever possible, especially for specification or technical\n>>> discussions.\n>>>\n>>>\n>>> ~ nifty\n>>>\n>>> _______________________________________________\n>>> Lightning-dev mailing list\n>>> Lightning-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>>\n>>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230511/c3c983e8/attachment-0001.html>"
            },
            {
                "author": "alicexbt",
                "date": "2023-05-11T17:48:19",
                "message_text_only": "Hi Antoine,\n\n> I can say missing an open-source engineering meeting or being revoked a few Github permissions matters far less than the clear affirmation and respect of the freedom of expression, the presumption of innocence and due process in the Bitcoin common space, all proportions conserved.\n\nThis is not acceptable. I will fight with you. Never feel alone.\n\n/devfd0\nfloppy disk guy\n\nSent with [Proton Mail](https://proton.me/) secure email.\n\n------- Original Message -------\nOn Wednesday, May 10th, 2023 at 10:27 PM, Antoine Riard <antoine.riard at gmail.com> wrote:\n\n> Hi Tony,\n>\n>> Is there a better place to havepubliccommunication? Unfortunately since one off topic email was sent here, it's been a ghost town. It appears that there's many emails being held and only one moderator that checks them once a week.\n>\n> As I think you're referring to my post of March 21th and as the author of this post, I'll politely refuse the qualification of \"off-topic\". I had and I still have the concerns of \"frivolous legal claims\" being used between bitcoin developers/organizations provoking a distortion of the neutrality of the development and a chilling effect of the technical discussions (i.e code we compile and spec we implement). For those reasons, it was my legal right and moral duty to inform the community of what is happening between Chaincode and myself. And here I'm following the recommendation of one of the moderators of the Lightning mailing list himself \"If this worries you too, let's make sure we keep each other honest, OK?\" [0].\n>\n> When you think a group of people with open-source responsibilities are in a situation of conflict of interests or \"moral hazards\", or even the appearance of them, you have the right to expose the wrongdoing, including the _proportional_ revelation of private elements. People have done the \"free choice\" to conduct a career in open-source, for some even declaring in some context to maintain integrity and accept their actions to be submitted to external accountability [1]. While the exposure of private elements of public personalities might break common courtesy, it's a morally valid practice if you're familiar with the public institutions of US and Europe, and I think this practice has found validity in the history of open-source commons or IETF's protocol development [1].\n>\n> Beyond, the Bitcoin and Lightning development communication channels constitute a public forum, where by nature the participants are exchanging ideas and defending competing interests. In consequence, the participants' rights and capabilities to contribute and speak their minds in those communication channels should be protected. Those communication channels are not your usual corporate workplace, and in case of conflicting principles, the maintainers of those communication channels should ensure a balance of rights and a proportionality in any restraining measure.\n>\n> And this new post is not to exonerate myself of any legal responsibility for personal matters that could be recognized as the outcome of a judicial process, respective of both rights of the accusation and rights of the defense. Rather to enlighten the Bitcoin community that the formal separation between private matters and open-source responsibilities, and the adequate check-and-balances to guarantee this separation is somehow what are the underlying stakes for this feud between Chaincode and myself, from my perspective. I can say missing an open-source engineering meeting or being revoked a few Github permissions matters far less than the clear affirmation and respect of the freedom of expression, the presumption of innocence and due process in the Bitcoin common space, all proportions conserved.\n>\n> I don't blame any party involved in this issue, nor assign \"bad intentions''. One position is really a function of your life experiences, knowledge of the legal and cultural framework and access to the factual elements. As all human conflicts it is not binary rather \"grey\". People can be top executives at a billion-dollar company, having successful ventures with hundreds of folks under management, or have a lot of responsibilities for their relative young age, and still disagree on the set of legal and moral principles to apply in the present case.\n>\n> Finally, thanks to the Bitcoin friends who have reached out to call for level-headedness and cool-mindness in the public discussion of this complex topic. Like I said to them, in the lack of more suspected wrongdoing from the other side, I won't communicate further on this subject on the Bitcoin and Lightning technical channels. However I still firmly believe the discussion on the principles, abstract in the maximum from its private elements, should still be pursued on other channels. Independently, there is a legal channel opened between Chaincode and myself and good progress is made to find a serene and long-standing resolution to this issue.\n>\n> Best,\n> Antoine\n>\n> [0] https://rusty-lightning.medium.com/the-corrosion-of-ethics-in-cryptocurrencies-f7ba77e9dfc3\n> [1] https://github.com/btrustteam/board-book/blob/main/vision/genesis_principles.md\n> [2] https://www.ietf.org/about/administration/policies-procedures/conflict-interest/\n>\n> Le lun. 8 mai 2023 \u00e0 21:26, Tony Giorgio via Lightning-dev <lightning-dev at lists.linuxfoundation.org> a \u00e9crit :\n>\n>> Is there a better place to have public communication? Unfortunately since one off topic email was sent here, it's been a ghost town. It appears that there's many emails being held and only one moderator that checks them once a week.\n>>\n>> Would hate to see this list die but wondering if there's a better place for discussions?\n>>\n>> Tony\n>>\n>> -------- Original Message --------\n>> On Apr 29, 2023, 9:57 PM, niftynei < niftynei at gmail.com> wrote:\n>>\n>>> Hi all,\n>>>\n>>> When I joined the lightning community a few years ago, I was relatively new to open source software and specification work. Rusty really impressed on me on the importance of holding conversations, as much as possible in public.\n>>>\n>>> Practically speaking, this encompasses IRC, this mailing list, and github issues/PRs.\n>>>\n>>> The reason for this is twofold. It helps document the range of options considered for technical decisions and it provides an interface point for new participants to contribute to the discussion.\n>>>\n>>> Given some recent mails that were posted to this list, now seems like a good time to reiterate the importance and preference of public communication whenever possible, especially for specification or technical discussions.\n>>>\n>>> ~ nifty\n>>>\n>>> _______________________________________________\n>>> Lightning-dev mailing list\n>>> Lightning-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230511/a2cad51d/attachment.html>"
            },
            {
                "author": "Aymeric Vitte",
                "date": "2023-05-12T11:47:48",
                "message_text_only": "Lightning list, I really think that you should stop this mess and\nreconcentrate on technical topics\n\nThe very same did destroy the Tor-talk mailing list\n\nBased on false assumptions as we saw later\n\nReading bulls all the day, everybody escaped\n\nResult: the Tor community can't discuss any longer\n\nDon't do the same\n\n\nLe 11/05/2023 \u00e0 19:48, alicexbt via Lightning-dev a \u00e9crit :\n> Hi Antoine,\n>\n>>  I can say missing an open-source engineering meeting or being\n>> revoked a few Github permissions matters far less than the clear\n>> affirmation and respect of the freedom of expression, the presumption\n>> of innocence and due process in the Bitcoin common space, all\n>> proportions conserved.\n>\n> This is not acceptable. I will fight with you. Never feel alone.\n>\n> /devfd0\n> floppy disk guy\n>\n> Sent with Proton Mail <https://proton.me/> secure email.\n>\n> ------- Original Message -------\n> On Wednesday, May 10th, 2023 at 10:27 PM, Antoine Riard\n> <antoine.riard at gmail.com> wrote:\n>\n>> Hi Tony,\n>>\n>> > Is there a better place to havepubliccommunication? Unfortunately\n>> since one off topic email was sent here, it's been a ghost town. It\n>> appears that there's many emails being held and only one moderator\n>> that checks them once a week.\n>>\n>> As I think you're referring to my post of March 21th and as the\n>> author of this post, I'll politely refuse the qualification of\n>> \"off-topic\". I had and I still have the concerns of \"frivolous legal\n>> claims\" being used between bitcoin developers/organizations provoking\n>> a distortion of the neutrality of the development and a chilling\n>> effect of the technical discussions (i.e code we compile and spec we\n>> implement). For those reasons, it was my legal right and moral duty\n>> to inform the community of what is happening between Chaincode and\n>> myself. And here I'm following the recommendation of one of the\n>> moderators of the Lightning mailing list himself \"If this worries you\n>> too, let's make sure we keep each other honest, OK?\" [0].\n>>\n>> When you think a group of people with open-source responsibilities\n>> are in a situation of conflict of interests or \"moral hazards\", or\n>> even the appearance of them, you have the right to expose the\n>> wrongdoing, including the _proportional_ revelation of private\n>> elements. People have done the \"free choice\" to conduct a career in\n>> open-source, for some even declaring in some context to maintain\n>> integrity and accept their actions to be submitted to external\n>> accountability [1]. While the exposure of private elements of public\n>> personalities might break common courtesy, it's a morally valid\n>> practice if you're familiar with the public institutions of US and\n>> Europe, and I think this practice has found validity in the history\n>> of open-source commons or IETF's protocol development [1].\n>>\n>> Beyond, the Bitcoin and Lightning development communication channels\n>> constitute a public forum, where by nature the participants are\n>> exchanging ideas and defending competing interests. In consequence,\n>> the participants' rights and capabilities to contribute and speak\n>> their minds in those communication channels should be protected.\n>> Those communication channels are not your usual corporate workplace,\n>> and in case of conflicting principles, the maintainers of those\n>> communication channels should ensure a balance of rights and a\n>> proportionality in any restraining measure.\n>>\n>> And this new post is not to exonerate myself of any legal\n>> responsibility for personal matters that could be recognized as the\n>> outcome of a judicial process, respective of both rights of the\n>> accusation and rights of the defense. Rather to enlighten the Bitcoin\n>> community that the formal separation between private matters and\n>> open-source responsibilities, and the adequate check-and-balances to\n>> guarantee this separation is somehow what are the underlying stakes\n>> for this feud between Chaincode and myself, from my perspective. I\n>> can say missing an open-source engineering meeting or being revoked a\n>> few Github permissions matters far less than the clear affirmation\n>> and respect of the freedom of expression, the presumption of\n>> innocence and due process in the Bitcoin common space, all\n>> proportions conserved.\n>>\n>> I don't blame any party involved in this issue, nor assign \"bad\n>> intentions''. One position is really a function of your life\n>> experiences, knowledge of the legal and cultural framework and access\n>> to the factual elements. As all human conflicts it is not binary\n>> rather \"grey\". People can be top executives at a billion-dollar\n>> company, having successful ventures with hundreds of folks under\n>> management, or have a lot of responsibilities for their relative\n>> young age, and still disagree on the set of legal and moral\n>> principles to apply in the present case.\n>>\n>> Finally, thanks to the Bitcoin friends who have reached out to call\n>> for level-headedness and cool-mindness in the public discussion of\n>> this complex topic. Like I said to them, in the lack of more\n>> suspected wrongdoing from the other side, I won't communicate further\n>> on this subject on the Bitcoin and Lightning technical channels.\n>> However I still firmly believe the discussion on the principles,\n>> abstract in the maximum from its private elements, should still be\n>> pursued on other channels. Independently, there is a legal channel\n>> opened between Chaincode and myself and good progress is made to find\n>> a serene and long-standing resolution to this issue.\n>>\n>> Best,\n>> Antoine\n>>\n>> [0]\n>> https://rusty-lightning.medium.com/the-corrosion-of-ethics-in-cryptocurrencies-f7ba77e9dfc3\n>> [1]\n>> https://github.com/btrustteam/board-book/blob/main/vision/genesis_principles.md\n>> [2]\n>> https://www.ietf.org/about/administration/policies-procedures/conflict-interest/\n>>\n>> Le lun. 8 mai 2023 \u00e0 21:26, Tony Giorgio via Lightning-dev\n>> <lightning-dev at lists.linuxfoundation.org\n>> <mailto:lightning-dev at lists.linuxfoundation.org>> a \u00e9crit :\n>>\n>>     Is there a better place to have public communication?\n>>     Unfortunately since one off topic email was sent here, it's been\n>>     a ghost town. It appears that there's many emails being held and\n>>     only one moderator that checks them once a week.\n>>\n>>     Would hate to see this list die but wondering if there's a better\n>>     place for discussions?\n>>\n>>     Tony\n>>\n>>\n>>\n>>\n>>\n>>\n>>     -------- Original Message --------\n>>     On Apr 29, 2023, 9:57 PM, niftynei < niftynei at gmail.com\n>>     <mailto:niftynei at gmail.com>> wrote:\n>>\n>>\n>>         Hi all,\n>>\n>>         When I joined the lightning community a few years ago, I was\n>>         relatively new to open source software and specification\n>>         work. Rusty really impressed on me on the importance of\n>>         holding conversations, as much as possible in public.\n>>\n>>         Practically speaking, this encompasses IRC, this mailing\n>>         list, and github issues/PRs.\n>>\n>>         The reason for this is twofold. It helps document the range\n>>         of options considered for technical decisions and it provides\n>>         an interface point for new participants to contribute to the\n>>         discussion.\n>>\n>>         Given some recent mails that were posted to this list, now\n>>         seems like a good time to reiterate the importance and\n>>         preference of public communication whenever possible,\n>>         especially for specification or technical discussions.\n>>\n>>\n>>         ~ nifty\n>>\n>>         _______________________________________________\n>>         Lightning-dev mailing list\n>>         Lightning-dev at lists.linuxfoundation.org\n>>         <mailto:Lightning-dev at lists.linuxfoundation.org>\n>>         https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\n>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n\n-- \nSophia-Antipolis, France\nCV: https://www.peersm.com/CVAV.pdf\nLinkedIn: https://fr.linkedin.com/in/aymeric-vitte-05855b26\nGitHub : https://www.github.com/Ayms\nA Universal Coin Swap system based on Bitcoin: https://gist.github.com/Ayms/029125db2583e1cf9c3209769eb2cdd7\nA bitcoin NFT system: https://gist.github.com/Ayms/01dbfebf219965054b4a3beed1bfeba7\nBitcoin, Ethereum, smart contracts, lightning, sidechains, Defi, DApps, NFTs, DEX, DAO explained - Centralization vs Decentralization https://gist.github.com/Ayms/04b3084a14ee202e707b3faec57ed26e\nDiscover and Move your coins by yourself (browser version): https://peersm.com/wallet\nBitcoin transactions made simple: https://github.com/Ayms/bitcoin-transactions\ntorrent-live: https://github.com/Ayms/torrent-live\nnode-Tor : https://www.github.com/Ayms/node-Tor\nAnti-spies and private torrents, dynamic blocklist: http://torrent-live.peersm.com\nPeersm : http://www.peersm.com\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230512/446a64e4/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "A Note on Public Communication",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Tony Giorgio",
                "Antoine Riard",
                "Vincenzo Palazzo",
                "Keagan McClelland",
                "Michael Folkson",
                "Aymeric Vitte",
                "alicexbt",
                "Jorge Tim\u00f3n",
                "Bryan Bishop"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 60062
        }
    },
    {
        "title": "[Lightning-dev] A new Bitcoin implementation integrated with Core Lightning",
        "thread_messages": [
            {
                "author": "Jorge Tim\u00f3n",
                "date": "2023-05-02T13:34:58",
                "message_text_only": "I'm not familiar with libbitcoinkernel, but sounds similar to what I wanted\nlibconsensus to do (different from what matt corallo wanted). What would be\nthe differences?\n\nRegarding node policy, I also wanted to make it polymorphic and let the\nuser chose RBF or the default of the time.\nI can't remember the arguments against it.\n\nWhy do you call the default signet \"bitcoin-inquisition\" ?\n\nI'm sorry if some of my inquires are offtopic for this mailing list, but I\nno longer follow the main bitcoin mailing list for reasons that are\ndefinitely offtopic to this mailing list (and apparently offtopic for\ntwitter and youtube too).\n\nI'm all in favor of public communication, but I don't want to be kicked out\nfrom this list.\nSo I'm happy to follow up this discussion privately too if it gets too\nofftopic.\n\nI know this is not the appropriate forum to publicly defend myself from\npublic attacks against me. Is there any forum appropriate for that?\nI'm afraid not, nostr perhaps.\n\nAnyway, sorry for the offtopic.\nKeep up the good work, everyone.\n\n\nOn Sun, Apr 30, 2023 at 3:57\u202fAM niftynei <niftynei at gmail.com> wrote:\n\n> Hi Michael,\n>\n> CLN as implemented is currently nicely decoupled from the block source; as\n> a project we assume that the node runner will choose a block backend that\n> fits their self-sovereignty goals.\n>\n> This provides us with a nice separation of concerns. The block source is\n> responsible for ensuring that only consensus valid data is delivered to the\n> node, which in turn allows us to focus on processing and reacting to that\n> data, as necessary.\n>\n> Bitcoin core as a project implements a broad swath of functionality\n> (wallet, consensus, peering, rpc server, coin selection, key management,\n> etc); breaking out the validation and peering functions into more\n> composable parts would def open up more opportunities for building block\n> sources for a wide variety of projects, not just CLN.\n>\n> There\u2019s probably a real opportunity to \u201ccomingle\u201d the peering of LN gossip\n> + block data networks, this has been suggested a few times but never\n> seriously pursued from the LN side. Having the peering functions of\n> bitcoin-core broken out into a more composable/reusable piece may be a good\n> first step here, and as a project would largely be on the bitcoin core\n> side. Maybe this work is already in progress? I havent been keeping up with\n> developments there.\n>\n> Thanks for the email, it\u2019s definitely a good question.\n>\n> Lisa\n>\n>\n> On Mon, Apr 24, 2023 at 02:09 Michael Folkson via Lightning-dev <\n> lightning-dev at lists.linuxfoundation.org> wrote:\n>\n>> Any thoughts on this from the Core Lightning contributors? The way I see\n>> it with upcoming proposed changes to default policy (primarily though not\n>> exclusively for Lightning) and a soft fork activation attempt of APO/APOAS\n>> (primarily though not exclusively for Lightning) that a tighter coupling\n>> between the full node and the Lightning node could eventually make sense.\n>> In a world where transaction fees were much higher you'd think almost every\n>> full node would also want to be a Lightning node and so the separation of\n>> concerns would make less sense. Having two separate P2P networks and two\n>> separate P2P protocols also wouldn't make much sense in this scenario. You\n>> could obviously still opt out of Lightning P2P messages if you weren't\n>> interested in Lightning.\n>>\n>> The alternative would be just to focus on Knots style consensus\n>> compatible forks of Core with limited additional functionality. But I think\n>> we've reached the point of no return on Core dominance and not having\n>> widely used \"distros\". As the ecosystem scales systems and processes should\n>> be constantly evolving and improving and to me if anything Core's seem to\n>> be going backwards.\n>>\n>> Thanks\n>> Michael\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at protonmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>> ------- Original Message -------\n>>\n>> On Saturday, January 14th, 2023 at 20:26, Michael Folkson <\n>> michaelfolkson at protonmail.com> wrote:\n>>\n>> I tweeted this [0] back in November 2022.\n>>\n>> \"With the btcd bugs and the analysis paralysis on a RBF policy option in\n>> Core increasingly thinking @BitcoinKnots and consensus compatible forks of\n>> Core are the future. Gonna chalk that one up to another thing @LukeDashjr\n>> was right about all along.\"\n>>\n>> A new bare bones Knots style Bitcoin implementation (in C++/C) integrated\n>> with Core Lightning was a long term idea I had (and presumably many others\n>> have had) but the dysfunction on the Bitcoin Core project this week (if\n>> anything it has been getting worse over time, not better) has made me start\n>> to take the idea more seriously. It is clear to me that the current way the\n>> Bitcoin Core project is being managed is not how I would like an open\n>> source project to be managed. Very little discussion is public anymore and\n>> decisions seem to be increasingly made behind closed doors or in private\n>> IRC channels (to the extent that decisions are made at all). Core Lightning\n>> seems to have the opposite problem. It is managed effectively in the open\n>> (admittedly with fewer contributors) but doesn't have the eyeballs or the\n>> usage that Bitcoin Core does. Regardless, selfishly I at some point would\n>> like a bare bones Bitcoin and Lightning implementation integrated in one\n>> codebase. The Bitcoin Core codebase has collected a lot of cruft over time\n>> and the ultra conservatism that is needed when treating (potential)\n>> consensus code seems to permeate into parts of the codebase that no one is\n>> using, definitely isn't consensus code and should probably just be removed.\n>>\n>> The libbitcoinkernel project was (is?) an attempt to extract the\n>> consensus engine out of Core but it seems like it won't achieve that as\n>> consensus is just too slippery a concept and Knots style consensus\n>> compatible codebase forks of Bitcoin Core seem to still the model. To what\n>> extent you can safely chop off this cruft and effectively maintain this\n>> less crufty fork of Bitcoin Core also isn't clear to me yet.\n>>\n>> Then there is the question of whether it makes sense to mix C and C++\n>> code that people have different views on. C++ is obviously a superset of C\n>> but assuming this merging of Bitcoin Core and Core Lightning is/was the\n>> optimal final destination it surely would have been better if Core\n>> Lightning was written in the same language (i.e. with classes) as Bitcoin\n>> Core.\n>>\n>> I'm just floating the idea to (hopefully) hear from people who are much\n>> more familiar with the entirety of the Bitcoin Core and Core Lightning\n>> codebases. It would be an ambitious long term project but it would be nice\n>> to focus on some ambitious project(s) (even if just conceptually) for a\n>> while given (thankfully) there seems to be a lull in soft fork activation\n>> chaos.\n>>\n>> Thanks\n>> Michael\n>>\n>> [0]:\n>> https://twitter.com/michaelfolkson/status/1589220155006910464?s=20&t=GbPm7w5BqS7rS3kiVFTNcw\n>>\n>> --\n>> Michael Folkson\n>> Email: michaelfolkson at protonmail.com\n>> Keybase: michaelfolkson\n>> PGP: 43ED C999 9F85 1D40 EAF4 9835 92D6 0159 214C FEE3\n>>\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230502/66c578d7/attachment-0001.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2023-05-06T05:58:55",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230505/2a696346/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "A new Bitcoin implementation integrated with Core Lightning",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Jorge Tim\u00f3n",
                "Matt Corallo"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7966
        }
    },
    {
        "title": "[Lightning-dev] Spending `to_local` output of commitment",
        "thread_messages": [
            {
                "author": "Benjamin Weintraub",
                "date": "2023-05-02T22:00:44",
                "message_text_only": "Thank you, Ken. I have a follow up question as well.\n\nContext: I\u2019m playing around with some failure scenarios in LND. Say Alice is paying Bob, before Bob is able to send the fulfillment (which includes the HTLC preimage), Alice\u2019s node dies and becomes unreachable.\n\nBob has already received the commitment for the updated balance and already has the preimage, so he force closes the channel.\n\nMy understanding is that he will submit the updated commitment to the blockchain as well as the channel closing transaction (after the CSV timeout) which spends his to_local and the HTLC output.\n\nHere is my problem. After using `lncli closechannel --force ...` , I only see the commitment transaction in the mempool, not the subsequent HTLC/to_local spend. How can I generate the transaction that spends the to_local and HTLC output? If there's a way to generate it with lnd, that would be ideal.\n\nThanks in advance!\n\nBen\n________________________________\nFrom: Ken Sedgwick <ksedgwic at bonsai.com>\nSent: Sunday, April 30, 2023 14:30\nTo: Benjamin Weintraub <weintraub.b at northeastern.edu>\nCc: Lightning-dev at lists.linuxfoundation.org <lightning-dev at lists.linuxfoundation.org>\nSubject: Re: [Lightning-dev] Spending `to_local` output of commitment\n\nBen,\n\nThe necessary witness is described here:\nhttps://github.com/lightning/bolts/blob/master/03-transactions.md#to_local-output\n\nRegards,\n\nKen\n\nOn Sat, Apr 29, 2023 at 7:57\u202fPM Benjamin Weintraub via Lightning-dev <lightning-dev at lists.linuxfoundation.org<mailto:lightning-dev at lists.linuxfoundation.org>> wrote:\nHi all,\n\nI have a question about commitments. If a peer force closes a channel by sending a commitment to the blockchain, what kind of witness script is needed to redeem the `to_local` funds? (assuming the `to_self_delay` has elapsed.) It seems that the transaction described here is for cooperative closures: https://github.com/lightning/bolts/blob/c74a3bbcf890799d343c62cb05fcbcdc952a1cf3/03-transactions.md#closing-transaction. But for force closures, I would think that the txin would need to be the `to_local` txout of the commitment.\n\nConcretely, I have commited the following transaction on a local simnet bitcoin blockchain and mined 500 blocks on top of it. I want to spend vout[2], how can I generate such a transaction?\n\n\n{\n  \"hash\": \"47d15337bb3c29c7c2881dd7cd912604b401ed221c66ea6f781b456d4983d451\",\n  \"size\": 444,\n  \"vsize\": 279,\n  \"weight\": 1113,\n  \"version\": 2,\n  \"locktime\": 551351761,\n  \"vin\": [\n    {\n      \"txid\": \"0248025b9447df8267d02d14c34ab9b269f52cd827132c70159a55cbf27ab3c1\",\n      \"vout\": 0,\n      \"scriptSig\": {\n        \"asm\": \"\",\n        \"hex\": \"\"\n      },\n      \"txinwitness\": [\n        \"\",\n        \"3045022100d3f52ca04d6a71587c29592931e542b16a47f3e9e577f1869b416547d00c62dd0220485da35ad31ff71b4263b1a25f0ba9f35990e1c8d5ac848365bbd588c3ce83d701\",\n        \"3044022057fc3878e17a865c12d57b7885ed48f0d6122bd9e00511c8eac150180d1508d502205fd1d0674a41b3c0118d0b6c19b1c77d35fc95bb89f929da6478f22e94dbf5ce01\",\n        \"5221038acdafe305edd06e91706ee687a091be306f0f29bcbda52dadde084bbaa36c902103d8fd53b9b43638c2255e1abd6f134a0232d2fba65527252c4eb81f926ddf50ad52ae\"\n      ],\n      \"sequence\": 2161061453\n    }\n  ],\n  \"vout\": [\n    {\n      \"value\": 0.0000033,\n      \"n\": 0,\n      \"scriptPubKey\": {\n        \"asm\": \"0 45ec86244376d47000ca6592783ba26f6b2ae619a24c8f5fad249b8c716955d6\",\n        \"hex\": \"002045ec86244376d47000ca6592783ba26f6b2ae619a24c8f5fad249b8c716955d6\",\n        \"reqSigs\": 1,\n        \"type\": \"witness_v0_scripthash\",\n        \"addresses\": [\n          \"sb1qghkgvfzrwm28qqx2vkf8swazda4j4ese5fxg7hadyjdccutf2htqysq3qz\"\n        ]\n      }\n    },\n    {\n      \"value\": 0.0000033,\n      \"n\": 1,\n      \"scriptPubKey\": {\n        \"asm\": \"0 502a17644b334482d0a3f589d9861af6e2105a9b7afd3f5c258efc98bb6aeeed\",\n        \"hex\": \"0020502a17644b334482d0a3f589d9861af6e2105a9b7afd3f5c258efc98bb6aeeed\",\n        \"reqSigs\": 1,\n        \"type\": \"witness_v0_scripthash\",\n        \"addresses\": [\n          \"sb1q2q4pweztxdzg959r7kyanps67m3pqk5m0t7n7hp93m7f3wm2amksa0fysc\"\n        ]\n      }\n    },\n    {\n      \"value\": 0.0002,\n      \"n\": 2,\n      \"scriptPubKey\": {\n        \"asm\": \"0 045553fc789494f16eff4cfa221d0294e140fb79772efeb7d8397d0ac1c4cf85\",\n        \"hex\": \"0020045553fc789494f16eff4cfa221d0294e140fb79772efeb7d8397d0ac1c4cf85\",\n        \"reqSigs\": 1,\n        \"type\": \"witness_v0_scripthash\",\n        \"addresses\": [\n          \"sb1qq3248lrcjj20zmhlfnazy8gzjns5p7mewuh0ad7c897s4swye7zsyrm5pc\"\n        ]\n      }\n    },\n    {\n      \"value\": 0.009761,\n      \"n\": 3,\n      \"scriptPubKey\": {\n        \"asm\": \"0 2d51ca420d0b6ab56c97ca2631d7304c9ad9025252ea71f3af8f97361679042e\",\n        \"hex\": \"00202d51ca420d0b6ab56c97ca2631d7304c9ad9025252ea71f3af8f97361679042e\",\n        \"reqSigs\": 1,\n        \"type\": \"witness_v0_scripthash\",\n        \"addresses\": [\n          \"sb1q94gu5ssdpd4t2myhegnrr4esfjddjqjj2t48rua037tnv9neqshqm4z7yr\"\n        ]\n      }\n    }\n  ],\n  \"blockhash\": \"0fa78bc7e9f6e0a60be71bb5fb2eaaf42a97895bb057f09d7cbb2c49120fa61d\",\n  \"confirmations\": 500,\n  \"time\": 1682451410,\n  \"blocktime\": 1682451410\n}\n\n\n\nThanks in advance,\n\nBen\n_______________________________________________\nLightning-dev mailing list\nLightning-dev at lists.linuxfoundation.org<mailto:Lightning-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n\n\n--\nKen Sedgwick\nBonsai Software, Inc.\nhttp://www.bonsai.com/ken/\n(510) 269-7334\nken at bonsai.com<mailto:ken at bonsai.com>\nPublic Key: http://www.bonsai.com/ken/ken.asc\nGPG Fingerprint: 4695 E5B8 F781 BF85 4326  9639 BBFC E515 8602 5550\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230502/4f68b6f7/attachment-0001.html>"
            },
            {
                "author": "Keagan McClelland",
                "date": "2023-05-19T21:46:26",
                "message_text_only": "Hi Benjamin,\n\nKeep in mind that the to_local output is only spendable after the delay\nperiod which means it is not a valid transaction (and won't show up in the\nmempool) until the output becomes spendable. This is also true for HTLC\noutputs if the channel type has anchors. The delay period for HTLCs is only\none block if you are trying to redeem an HTLC (instead of timing it out).\nLND normally automatically handles the submission of these transactions\nwhen they become viable. Submitting them prior will do nothing.\n\nI will let others comment on how to actually generate this with lncli or\nchantools or the like, since I'm unsure of how to do so off the top of my\nhead.\n\nStay Inspired,\nKeags\n\nOn Fri, May 5, 2023 at 9:19\u202fPM Benjamin Weintraub via Lightning-dev <\nlightning-dev at lists.linuxfoundation.org> wrote:\n\n> Thank you, Ken. I have a follow up question as well.\n>\n> Context: I\u2019m playing around with some failure scenarios in LND. Say Alice\n> is paying Bob, before Bob is able to send the fulfillment (which includes\n> the HTLC preimage), Alice\u2019s node dies and becomes unreachable.\n>\n> Bob has already received the commitment for the updated balance and\n> already has the preimage, so he force closes the channel.\n>\n> My understanding is that he will submit the updated commitment to the\n> blockchain as well as the channel closing transaction (after the CSV\n> timeout) which spends his to_local and the HTLC output.\n>\n> Here is my problem. After using `lncli closechannel --force ...` , I only\n> see the commitment transaction in the mempool, not the subsequent\n> HTLC/to_local spend. How can I generate the transaction that spends the\n> to_local and HTLC output? If there's a way to generate it with lnd, that\n> would be ideal.\n>\n> Thanks in advance!\n>\n> Ben\n> ------------------------------\n> *From:* Ken Sedgwick <ksedgwic at bonsai.com>\n> *Sent:* Sunday, April 30, 2023 14:30\n> *To:* Benjamin Weintraub <weintraub.b at northeastern.edu>\n> *Cc:* Lightning-dev at lists.linuxfoundation.org <\n> lightning-dev at lists.linuxfoundation.org>\n> *Subject:* Re: [Lightning-dev] Spending `to_local` output of commitment\n>\n> Ben,\n>\n> The necessary witness is described here:\n>\n> https://github.com/lightning/bolts/blob/master/03-transactions.md#to_local-output\n>\n> Regards,\n>\n> Ken\n>\n> On Sat, Apr 29, 2023 at 7:57\u202fPM Benjamin Weintraub via Lightning-dev <\n> lightning-dev at lists.linuxfoundation.org> wrote:\n>\n> Hi all,\n>\n> I have a question about commitments. If a peer force closes a channel by\n> sending a commitment to the blockchain, what kind of witness script is\n> needed to redeem the `to_local` funds? (assuming the `to_self_delay` has\n> elapsed.) It seems that the transaction described here is for cooperative\n> closures:\n> https://github.com/lightning/bolts/blob/c74a3bbcf890799d343c62cb05fcbcdc952a1cf3/03-transactions.md#closing-transaction\n> . But for force closures, I would think that the txin would need to be\n> the `to_local` txout of the commitment.\n>\n> Concretely, I have commited the following transaction on a local simnet\n> bitcoin blockchain and mined 500 blocks on top of it. I want to spend\n> vout[2], how can I generate such a transaction?\n>\n>\n> {\n>   \"hash\":\n> \"47d15337bb3c29c7c2881dd7cd912604b401ed221c66ea6f781b456d4983d451\",\n>   \"size\": 444,\n>   \"vsize\": 279,\n>   \"weight\": 1113,\n>   \"version\": 2,\n>   \"locktime\": 551351761,\n>   \"vin\": [\n>     {\n>       \"txid\":\n> \"0248025b9447df8267d02d14c34ab9b269f52cd827132c70159a55cbf27ab3c1\",\n>       \"vout\": 0,\n>       \"scriptSig\": {\n>         \"asm\": \"\",\n>         \"hex\": \"\"\n>       },\n>       \"txinwitness\": [\n>         \"\",\n>\n> \"3045022100d3f52ca04d6a71587c29592931e542b16a47f3e9e577f1869b416547d00c62dd0220485da35ad31ff71b4263b1a25f0ba9f35990e1c8d5ac848365bbd588c3ce83d701\",\n>\n> \"3044022057fc3878e17a865c12d57b7885ed48f0d6122bd9e00511c8eac150180d1508d502205fd1d0674a41b3c0118d0b6c19b1c77d35fc95bb89f929da6478f22e94dbf5ce01\",\n>\n> \"5221038acdafe305edd06e91706ee687a091be306f0f29bcbda52dadde084bbaa36c902103d8fd53b9b43638c2255e1abd6f134a0232d2fba65527252c4eb81f926ddf50ad52ae\"\n>       ],\n>       \"sequence\": 2161061453\n>     }\n>   ],\n>   \"vout\": [\n>     {\n>       \"value\": 0.0000033,\n>       \"n\": 0,\n>       \"scriptPubKey\": {\n>         \"asm\": \"0\n> 45ec86244376d47000ca6592783ba26f6b2ae619a24c8f5fad249b8c716955d6\",\n>         \"hex\":\n> \"002045ec86244376d47000ca6592783ba26f6b2ae619a24c8f5fad249b8c716955d6\",\n>         \"reqSigs\": 1,\n>         \"type\": \"witness_v0_scripthash\",\n>         \"addresses\": [\n>           \"sb1qghkgvfzrwm28qqx2vkf8swazda4j4ese5fxg7hadyjdccutf2htqysq3qz\"\n>         ]\n>       }\n>     },\n>     {\n>       \"value\": 0.0000033,\n>       \"n\": 1,\n>       \"scriptPubKey\": {\n>         \"asm\": \"0\n> 502a17644b334482d0a3f589d9861af6e2105a9b7afd3f5c258efc98bb6aeeed\",\n>         \"hex\":\n> \"0020502a17644b334482d0a3f589d9861af6e2105a9b7afd3f5c258efc98bb6aeeed\",\n>         \"reqSigs\": 1,\n>         \"type\": \"witness_v0_scripthash\",\n>         \"addresses\": [\n>           \"sb1q2q4pweztxdzg959r7kyanps67m3pqk5m0t7n7hp93m7f3wm2amksa0fysc\"\n>         ]\n>       }\n>     },\n>     {\n>       \"value\": 0.0002,\n>       \"n\": 2,\n>       \"scriptPubKey\": {\n>         \"asm\": \"0\n> 045553fc789494f16eff4cfa221d0294e140fb79772efeb7d8397d0ac1c4cf85\",\n>         \"hex\":\n> \"0020045553fc789494f16eff4cfa221d0294e140fb79772efeb7d8397d0ac1c4cf85\",\n>         \"reqSigs\": 1,\n>         \"type\": \"witness_v0_scripthash\",\n>         \"addresses\": [\n>           \"sb1qq3248lrcjj20zmhlfnazy8gzjns5p7mewuh0ad7c897s4swye7zsyrm5pc\"\n>         ]\n>       }\n>     },\n>     {\n>       \"value\": 0.009761,\n>       \"n\": 3,\n>       \"scriptPubKey\": {\n>         \"asm\": \"0\n> 2d51ca420d0b6ab56c97ca2631d7304c9ad9025252ea71f3af8f97361679042e\",\n>         \"hex\":\n> \"00202d51ca420d0b6ab56c97ca2631d7304c9ad9025252ea71f3af8f97361679042e\",\n>         \"reqSigs\": 1,\n>         \"type\": \"witness_v0_scripthash\",\n>         \"addresses\": [\n>           \"sb1q94gu5ssdpd4t2myhegnrr4esfjddjqjj2t48rua037tnv9neqshqm4z7yr\"\n>         ]\n>       }\n>     }\n>   ],\n>   \"blockhash\":\n> \"0fa78bc7e9f6e0a60be71bb5fb2eaaf42a97895bb057f09d7cbb2c49120fa61d\",\n>   \"confirmations\": 500,\n>   \"time\": 1682451410,\n>   \"blocktime\": 1682451410\n> }\n>\n>\n>\n> Thanks in advance,\n>\n> Ben\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n>\n> --\n> Ken Sedgwick\n> Bonsai Software, Inc.\n> http://www.bonsai.com/ken/\n> (510) 269-7334\n> ken at bonsai.com\n> Public Key: http://www.bonsai.com/ken/ken.asc\n> GPG Fingerprint: 4695 E5B8 F781 BF85 4326  9639 BBFC E515 8602 5550\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230519/7c2a9e2b/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Spending `to_local` output of commitment",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Keagan McClelland",
                "Benjamin Weintraub"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 12737
        }
    },
    {
        "title": "[Lightning-dev] Call For Review - LSPSpec LSPS1 LSPS2",
        "thread_messages": [
            {
                "author": "Severin B\u00fchler",
                "date": "2023-05-05T05:02:19",
                "message_text_only": "Hello Lightning Devs,\n\nI am writing on behalf of the LSPSpec group to inform you that we have been working on specifications for Lightning Service Providers (LSP) with the aim of creating interoperability between Lightning wallets and LSPs by standardizing how they communicate. We have two specs that are now mature, although they are not yet 100% complete, and we would like to invite everyone to review them.\n\nThe specs are as follows:\n\nLSPS1 - Channel Request: An API to purchasing channels from an LSP. (https://github.com/BitcoinAndLightningLayerSpecs/lsp/pull/20)\n\nLSPS2 - JIT Channels: An API for Just-In-Time Channels, which allows for 0conf channel opening on payment arrival (https://github.com/BitcoinAndLightningLayerSpecs/lsp/pull/22)\n\nWe hold biweekly calls to discuss the current state of the spec on Wednesdays at 11am UTC. The next call is scheduled for May 17th. If you would like to receive a calendar invite for the call, please join our Telegram group (https://t.me/LSPstandards) and message Pav your email address.\n\nBest regards\nSev"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2023-05-07T22:35:06",
                "message_text_only": "Good morning list,\n\nI would like to point out that one of the main issues with LSPs is that most of them are designed to lock in their customers to their platform.\n\nHopefully, with a common open specification like this, it becomes significantly more feasible for Lightning end-user clients to be able to switch across different LSPs.\n\nIn particular, I have always pointed out that unpublished channels leak information about your sends and receives to the published node end of the channel.\nThus, if you are locked to a particular single LSP, your data belongs to them.\n\nYou might trust your LSP today to not leak your data.\n\nBut you might not want to trust your LSP tomorrow.\n\nLSPs can be bought out, their operators can change their minds, their servers can be hacked and your data stolen, many things can be done to take your data.\nAnd if one end is published while the other end is completely unpublished, an unpublished channel will always leak the sends and receives of the unpublished end, and not even PTLCs can hide that information.\n\nIf you, as a client, are capable of using multiple LSPs simultaneously (which would be greatly assisted if multiple LSPs implemented this common specification) then you are able to spread out your information across multiple LSPs.\nThat way, only part of your data is at risk of being leaked if one LSP goes rogue and sells your data.\nWallet clients might also want to use different node IDs for each LSP (if you have your privkey always online --- which is likely since Lightning really wants online signing --- you can use an HMAC of the LSP node ID with your privkey to generate your per-LSP node ID) to further improve their privacy across LSPs.\n\nThus, I strongly suggest that wallet implementors in particular look at the LSPS specifications and start planning to implement the client-side interfaces.\n\nThe best Lightning Network, if we must have any unpublished channels at all (in my opinion, unpublished channels delenda est), is one where every published node is an LSP.\n\n--\n\nI observe that there have been many new innovations in Lightning, such as \"Lightning addresses\", which are not even vaguely alluded to in lightning-dev.\n\nThus, I would like to point out this post once again: https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-April/003915.html\n\nI would like to continue this post with a short discussion of the so-called \"LSPS0\", which underlies the LSPS1 and LSPS2 we are asking review for.\n\nLSPS0 describes how a client makes requests to an LSP.\nIn brief, it uses a single BOLT8 message ID, 37913, for all LSPS client and LSP intercommnications.\n\nThe rationale for this is:\n\n* Every client needs to somehow talk the BOLT8 protocol to an LSP just to do normal channel opens, HTLC sends, HTLC receives, etc.; using the BOLT8 protocol means you do not have to add more dependencies just to be LSPS-compliant.\n* Using a single BOLT8 message ID, 37913, makes it more likely that new protocols will not conflict with LSPS.\n  The message ID space is a common public good, and it is best to reduce its use as much as possible.\n  All LSPS specification, no matter how many there will be in the future (and I have a fair number lined up after LSPS2....), will only use exactly this single BOLT8 message ID.\n\nFurther, inside the LSPS0 37913 message is a JSON object.\nThis use of JSON inside a BOLT8 message has been described as \"disgusting\" by at least one engineer, and has been controversial even among LSPS participants.\n\nThe rationale for this requires a bit of philosophical information theory.\n\nIn principle, a binary encoding is \"just\" a compressed encoding of some human-readable format.\nFor example, if we assign some offset within the message as `minimum_depth`, we could consider that the offset is actually a magic number, and that magic number is really inside a compression dictionary, with that magic number expanding to the human-readable text `minimum_depth`.\n\nNow compressed encodings like this are fairly fine for computers to process, but humans trying to actually implement LSPS specifications would benefit more from the human-readable text.\n\nThus, I argued that it is better to use a JSON encoding, as any binary encoding would just be equivalent to expanding to an equivalent JSON encoding where the offset of a particular binary-formatted field is really just a compression dictionary entry, mapping out to the text `\"minimum_depth\": `, and that the \"real\" uncompressed text would be a JSON encoding.\n\nThis remains true even if you consider TLVs, as the type number is, again, just a magic number that is mapped, in a static compression dictionary (usually written down in some BOLT spec), to some human-readable label.\n\nNow compression is useful if you are doing something like designing a payment onion format.\nYou want to fit a single onion with multiple hops into as few lower-level MTUs as you can, ideally fitting an entire multi-hop onion into a single 1500-byte MTU.\nThis is why the onion format has been very stringent and tight; an onion is only 1366 bytes so that with various messaging overheads it can fit into a single 1500-byte MTU.\nIt pays to have a binary format for the payment onion you are using to inform new HTLCs to your peers, as (1) you want payment to be fast and (2) onions need to be forwarded across multiple nodes (and thus need lots of data, each hop needs some bytes for it).\n\nHowever, for most LSPS requests and responses between a single hop --- between the client and the LSP --- even in uncompressed JSON, are less than 1000 byte.\nAdding compression --- i.e., forcing a binary format --- does not really improve the latency, as a 100-byte MTU takes as much time round-tripping as a 1000-byte MTU.\nAnd at least you can easily put the raw JSON from LSPS0 messages in your logs and then if something weird happens, you can copy-paste the JSON into a pretty-printer and get some nicely-formatted JSON you can analyze in detail; if you had to do that with binary formats, you would need to decide how to print it out yourself, and probably need to make your own pretty-printer for the data.\n\nThis is why LSPS0 was designed the way it was: a JSON text inside a BOLT8 message, with all LSPS API calls sharing the same single BOLT8 message (keyed by a particular key in the JSON text).\n\nRegards,\nZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "Call For Review - LSPSpec LSPS1 LSPS2",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Severin B\u00fchler"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 7377
        }
    },
    {
        "title": "[Lightning-dev] Liquidity griefing for 0-conf dual-funded txs",
        "thread_messages": [
            {
                "author": "Bastien TEINTURIER",
                "date": "2023-05-05T16:21:50",
                "message_text_only": "Good morning list,\n\nOne of the challenges created by the introduction of dual funded\ntransactions [1] in lightning is how to protect against liquidity\ngriefing attacks from malicious peers [2].\n\nLet's start by reviewing this liquidity griefing issue. The dual funding\nprotocol starts by exchanging data about the utxos each peer adds to the\nshared transaction, then exchange signatures and broadcast the resulting\ntransaction. If peers lock their utxos as soon as they've decided to add\nthem to the shared transaction, the remote node may go silent. If that\nhappens, the honest node has some liquidity that is locked and unusable.\n\nThis cannot easily be fixed by simply unlocking utxos *after* detecting\nthat the remote node is fishy, because the remote node would still have\nsucceeded at locking your liquidity for a (small) duration, and could\nstart other instances of that attack with different node_ids.\n\nAn elegant solution to this issue is to never lock utxos used in dual\nfunded transactions. If a remote node goes silent in the middle of an\ninstance of the protocol, your utxos will automatically be re-used in\nanother instance of the protocol. The only drawback with that approach\nis that when you have multiple concurrent instances of dual funding with\nhonest peers, some of them may fail because they are double-spent by one\nof the concurrent instances. This is acceptable, since the protocol\nshould complete fairly quickly when peers are honest, and at worst, it\ncan simply be restarted when failure is detected.\n\nBut that solution falls short when using 0-conf, because accidentally\ndouble-spending a 0-conf channel (because of concurrent instances) can\nresult in loss of funds for one of the peers (if payments were made on\nthat channel before detecting the double-spend). It seems like using\n0-conf forces us to lock utxos to avoid this issue, which means that\nnodes offering 0-conf services expose themselves to liquidity griefing.\n\nAnother related issue is that nodes that want to offer 0-conf channels\nmust ensure that the utxos they use for 0-conf are isolated from the\nutxos they use for non 0-conf, otherwise it is not possible to properly\nlock utxos, because of the following race scenario:\n\n- utxoA is selected for a non 0-conf funding attempt and not locked\n  (to protect against liquidity griefing)\n- utxoA is also selected for a 0-conf funding attempt (because it is\n  found unlocked in the wallet) and then locked\n- the funding transaction for the 0-conf channel is successfully\n  published first and that channel is instantly used for payments\n- the funding transaction for the non 0-conf channel is then published\n  and confirms, accidentally double-spending the 0-conf channel\n\nThis can be fixed by using a \"soft lock\" when selecting utxos for a non\n0-conf funding attempt. 0-conf funding attempts must ignore soft locked\nutxos while non 0-conf funding attempts can (should) reuse soft locked\nutxos.\n\nIn eclair, we are currently doing \"opportunistic\" 0-conf:\n\n- if we receive `channel_ready` immediately (which means that our peer\n  trusts us to use 0-conf)\n- and we're the only contributor to the funding transaction (our peer\n  doesn't have any input that they could use to double-spend)\n- and the transaction hasn't been RBF-ed yet\n\nThen we immediately send `channel_ready` as well and start using that\nchannel (because we know we won't double spend ourselves). This is nice\nbecause it lets us use 0-conf in a way where only one side of the\nchannel needs to trust the other side (instead of both sides trusting\neach other).\n\nUnfortunately, we cannot do that anymore when mixing 0-conf and non\n0-conf funding attempts, because the utxos may be soft locked,\npreventing us from \"upgrading\" to 0-conf.\n\nYou have successfully reached the end of this quite technical post,\ncongrats! My goal with this post is to gather ideas on how we could\nimprove that situation and offer good enough protections against\nliquidity griefing for nodes offering 0-conf services. Please share\nyour ideas! And yes, I know, 0-conf is a massive implementation pain\npoint that we would all like to remove from our codebases, but hey,\nusers like it \u00af\\_(\u30c4)_/\u00af\n\nCheers,\nBastien\n\n[1] https://github.com/lightning/bolts/pull/851\n[2] https://github.com/lightning/bolts/pull/851#discussion_r997537630\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230505/9638cc46/attachment-0001.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2023-05-07T22:54:50",
                "message_text_only": "Good morning t-bast, and list,\n\nDual-funded 0-conf can be made safe in the following case:\n\n* If the initiator uses swap-in-potentiam addresses (with initiator as Alice, acceptor as Bob).\n\nIf the initiator stalls, then the acceptor can retaliate by refusing to sign the swap-in-potentiam UTXOs forever after that, thus also locking their funds until the swap-in-potentiam times out, thus preventing this liquidity griefing from being cost-free.\n\nThe expected use-case is that a user expects onchain operations to be slow and take multiple confirmations to receive.\nOnce there is deep confirmation that a swap-in-potentiam address has been funded, then it can be transferred immediately to a 0-conf Lightning channel.\n\nThe initiator still needs to trust that the acceptor does not double-spend out from under the initiator, but see LSPS3 Promise To Unconditionally Fund 0-conf.\nAlso, it looks like you are allowing for the initiator to trust the acceptor in that case, as I believe you are taking the point of view of the acceptor of the dual-funding flow.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Matt Morehouse",
                "date": "2023-05-09T17:38:55",
                "message_text_only": "Hi Bastien,\n\nIn general, 0-conf is only safe when WE are the only contributor to\nthe channel, otherwise the peer could double spend us.\n\nThe problem you seem to be describing is that we might double-spend\nourselves if we don't lock our 0-conf UTXOs at some point.  I propose\nthat we DO lock our UTXOs after tx_completes have been exchanged IF we\nare the only contributor.  We don't have to worry about liquidity\ngriefing in this case, since the peer has no tx_signatures to withhold\nfrom us.  Of course, the opportunistic upgrade of a regular channel to\n0-conf won't work -- we need a way to differentiate 0-conf channels\nprior to UTXO selection, so that we don't reuse soft-locked UTXOs.\n\nAll together, what I propose is:\n\n1) If the channel type has option_zeroconf, select UTXOs that are not\nsoft locked.\n2) If the peer adds any inputs to the funding transaction, abort\n(0-conf is unsafe for us in this case).\n3) After tx_complete exchange, TryLock() our UTXO inputs and abort if\nalready locked.\n4) Broadcast funding transaction and begin using the 0-conf channel.\n\nI think this at least enables the common use case for 0-conf: LSPs can\nuse their own funds to open 0-conf channels for clients.\n\n- Matt\n\n\n\n\nOn Sat, May 6, 2023 at 3:16\u202fAM Bastien TEINTURIER <bastien at acinq.fr> wrote:\n>\n> Good morning list,\n>\n> One of the challenges created by the introduction of dual funded\n> transactions [1] in lightning is how to protect against liquidity\n> griefing attacks from malicious peers [2].\n>\n> Let's start by reviewing this liquidity griefing issue. The dual funding\n> protocol starts by exchanging data about the utxos each peer adds to the\n> shared transaction, then exchange signatures and broadcast the resulting\n> transaction. If peers lock their utxos as soon as they've decided to add\n> them to the shared transaction, the remote node may go silent. If that\n> happens, the honest node has some liquidity that is locked and unusable.\n>\n> This cannot easily be fixed by simply unlocking utxos *after* detecting\n> that the remote node is fishy, because the remote node would still have\n> succeeded at locking your liquidity for a (small) duration, and could\n> start other instances of that attack with different node_ids.\n>\n> An elegant solution to this issue is to never lock utxos used in dual\n> funded transactions. If a remote node goes silent in the middle of an\n> instance of the protocol, your utxos will automatically be re-used in\n> another instance of the protocol. The only drawback with that approach\n> is that when you have multiple concurrent instances of dual funding with\n> honest peers, some of them may fail because they are double-spent by one\n> of the concurrent instances. This is acceptable, since the protocol\n> should complete fairly quickly when peers are honest, and at worst, it\n> can simply be restarted when failure is detected.\n>\n> But that solution falls short when using 0-conf, because accidentally\n> double-spending a 0-conf channel (because of concurrent instances) can\n> result in loss of funds for one of the peers (if payments were made on\n> that channel before detecting the double-spend). It seems like using\n> 0-conf forces us to lock utxos to avoid this issue, which means that\n> nodes offering 0-conf services expose themselves to liquidity griefing.\n>\n> Another related issue is that nodes that want to offer 0-conf channels\n> must ensure that the utxos they use for 0-conf are isolated from the\n> utxos they use for non 0-conf, otherwise it is not possible to properly\n> lock utxos, because of the following race scenario:\n>\n> - utxoA is selected for a non 0-conf funding attempt and not locked\n>   (to protect against liquidity griefing)\n> - utxoA is also selected for a 0-conf funding attempt (because it is\n>   found unlocked in the wallet) and then locked\n> - the funding transaction for the 0-conf channel is successfully\n>   published first and that channel is instantly used for payments\n> - the funding transaction for the non 0-conf channel is then published\n>   and confirms, accidentally double-spending the 0-conf channel\n>\n> This can be fixed by using a \"soft lock\" when selecting utxos for a non\n> 0-conf funding attempt. 0-conf funding attempts must ignore soft locked\n> utxos while non 0-conf funding attempts can (should) reuse soft locked\n> utxos.\n>\n> In eclair, we are currently doing \"opportunistic\" 0-conf:\n>\n> - if we receive `channel_ready` immediately (which means that our peer\n>   trusts us to use 0-conf)\n> - and we're the only contributor to the funding transaction (our peer\n>   doesn't have any input that they could use to double-spend)\n> - and the transaction hasn't been RBF-ed yet\n>\n> Then we immediately send `channel_ready` as well and start using that\n> channel (because we know we won't double spend ourselves). This is nice\n> because it lets us use 0-conf in a way where only one side of the\n> channel needs to trust the other side (instead of both sides trusting\n> each other).\n>\n> Unfortunately, we cannot do that anymore when mixing 0-conf and non\n> 0-conf funding attempts, because the utxos may be soft locked,\n> preventing us from \"upgrading\" to 0-conf.\n>\n> You have successfully reached the end of this quite technical post,\n> congrats! My goal with this post is to gather ideas on how we could\n> improve that situation and offer good enough protections against\n> liquidity griefing for nodes offering 0-conf services. Please share\n> your ideas! And yes, I know, 0-conf is a massive implementation pain\n> point that we would all like to remove from our codebases, but hey,\n> users like it \u00af\\_(\u30c4)_/\u00af\n>\n> Cheers,\n> Bastien\n>\n> [1] https://github.com/lightning/bolts/pull/851\n> [2] https://github.com/lightning/bolts/pull/851#discussion_r997537630\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2023-05-10T00:07:06",
                "message_text_only": "Good morning Matt, and t-bast,\n\nYour proposal basically means \"do not dual-fund 0-conf\".\nYou might as well use the much simpler openv1 flow in that case, just because it is simpler.\n\nRegards,\nZmnSCPxj\n\n\n\n\nSent with Proton Mail secure email.\n\n------- Original Message -------\nOn Tuesday, May 9th, 2023 at 5:38 PM, Matt Morehouse <mattmorehouse at gmail.com> wrote:\n\n\n> Hi Bastien,\n> \n> In general, 0-conf is only safe when WE are the only contributor to\n> the channel, otherwise the peer could double spend us.\n> \n> The problem you seem to be describing is that we might double-spend\n> ourselves if we don't lock our 0-conf UTXOs at some point. I propose\n> that we DO lock our UTXOs after tx_completes have been exchanged IF we\n> are the only contributor. We don't have to worry about liquidity\n> griefing in this case, since the peer has no tx_signatures to withhold\n> from us. Of course, the opportunistic upgrade of a regular channel to\n> 0-conf won't work -- we need a way to differentiate 0-conf channels\n> prior to UTXO selection, so that we don't reuse soft-locked UTXOs.\n> \n> All together, what I propose is:\n> \n> 1) If the channel type has option_zeroconf, select UTXOs that are not\n> soft locked.\n> 2) If the peer adds any inputs to the funding transaction, abort\n> (0-conf is unsafe for us in this case).\n> 3) After tx_complete exchange, TryLock() our UTXO inputs and abort if\n> already locked.\n> 4) Broadcast funding transaction and begin using the 0-conf channel.\n> \n> I think this at least enables the common use case for 0-conf: LSPs can\n> use their own funds to open 0-conf channels for clients.\n> \n> - Matt\n> \n> \n> \n> \n> On Sat, May 6, 2023 at 3:16\u202fAM Bastien TEINTURIER bastien at acinq.fr wrote:\n> \n> > Good morning list,\n> > \n> > One of the challenges created by the introduction of dual funded\n> > transactions [1] in lightning is how to protect against liquidity\n> > griefing attacks from malicious peers [2].\n> > \n> > Let's start by reviewing this liquidity griefing issue. The dual funding\n> > protocol starts by exchanging data about the utxos each peer adds to the\n> > shared transaction, then exchange signatures and broadcast the resulting\n> > transaction. If peers lock their utxos as soon as they've decided to add\n> > them to the shared transaction, the remote node may go silent. If that\n> > happens, the honest node has some liquidity that is locked and unusable.\n> > \n> > This cannot easily be fixed by simply unlocking utxos after detecting\n> > that the remote node is fishy, because the remote node would still have\n> > succeeded at locking your liquidity for a (small) duration, and could\n> > start other instances of that attack with different node_ids.\n> > \n> > An elegant solution to this issue is to never lock utxos used in dual\n> > funded transactions. If a remote node goes silent in the middle of an\n> > instance of the protocol, your utxos will automatically be re-used in\n> > another instance of the protocol. The only drawback with that approach\n> > is that when you have multiple concurrent instances of dual funding with\n> > honest peers, some of them may fail because they are double-spent by one\n> > of the concurrent instances. This is acceptable, since the protocol\n> > should complete fairly quickly when peers are honest, and at worst, it\n> > can simply be restarted when failure is detected.\n> > \n> > But that solution falls short when using 0-conf, because accidentally\n> > double-spending a 0-conf channel (because of concurrent instances) can\n> > result in loss of funds for one of the peers (if payments were made on\n> > that channel before detecting the double-spend). It seems like using\n> > 0-conf forces us to lock utxos to avoid this issue, which means that\n> > nodes offering 0-conf services expose themselves to liquidity griefing.\n> > \n> > Another related issue is that nodes that want to offer 0-conf channels\n> > must ensure that the utxos they use for 0-conf are isolated from the\n> > utxos they use for non 0-conf, otherwise it is not possible to properly\n> > lock utxos, because of the following race scenario:\n> > \n> > - utxoA is selected for a non 0-conf funding attempt and not locked\n> > (to protect against liquidity griefing)\n> > - utxoA is also selected for a 0-conf funding attempt (because it is\n> > found unlocked in the wallet) and then locked\n> > - the funding transaction for the 0-conf channel is successfully\n> > published first and that channel is instantly used for payments\n> > - the funding transaction for the non 0-conf channel is then published\n> > and confirms, accidentally double-spending the 0-conf channel\n> > \n> > This can be fixed by using a \"soft lock\" when selecting utxos for a non\n> > 0-conf funding attempt. 0-conf funding attempts must ignore soft locked\n> > utxos while non 0-conf funding attempts can (should) reuse soft locked\n> > utxos.\n> > \n> > In eclair, we are currently doing \"opportunistic\" 0-conf:\n> > \n> > - if we receive `channel_ready` immediately (which means that our peer\n> > trusts us to use 0-conf)\n> > - and we're the only contributor to the funding transaction (our peer\n> > doesn't have any input that they could use to double-spend)\n> > - and the transaction hasn't been RBF-ed yet\n> > \n> > Then we immediately send `channel_ready` as well and start using that\n> > channel (because we know we won't double spend ourselves). This is nice\n> > because it lets us use 0-conf in a way where only one side of the\n> > channel needs to trust the other side (instead of both sides trusting\n> > each other).\n> > \n> > Unfortunately, we cannot do that anymore when mixing 0-conf and non\n> > 0-conf funding attempts, because the utxos may be soft locked,\n> > preventing us from \"upgrading\" to 0-conf.\n> > \n> > You have successfully reached the end of this quite technical post,\n> > congrats! My goal with this post is to gather ideas on how we could\n> > improve that situation and offer good enough protections against\n> > liquidity griefing for nodes offering 0-conf services. Please share\n> > your ideas! And yes, I know, 0-conf is a massive implementation pain\n> > point that we would all like to remove from our codebases, but hey,\n> > users like it \u00af\\(\u30c4)/\u00af\n> > \n> > Cheers,\n> > Bastien\n> > \n> > [1] https://github.com/lightning/bolts/pull/851\n> > [2] https://github.com/lightning/bolts/pull/851#discussion_r997537630\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> \n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Bastien TEINTURIER",
                "date": "2023-05-10T09:15:25",
                "message_text_only": "Hey Matt, Zman,\n\n> I propose that we DO lock our UTXOs after tx_completes have been\n> exchanged IF we are the only contributor.  We don't have to worry\n> about liquidity griefing in this case, since the peer has no\n> tx_signatures to withhold from us.\n\nWhile this is true for dual funding, this isn't true for splicing, where\nwe need the remote `tx_signatures` to spend the channel's current\nfunding output. But it's not an issue, the untrusted peer will send\ntheir `tx_signatures` first (since they're not contributing to the\ntransaction) and we can `TryLock()` once we receive that.\n\n> Your proposal basically means \"do not dual-fund 0-conf\".\n> You might as well use the much simpler openv1 flow in that case, just\n> because it is simpler.\n\nI also thought that this was the easy way out, but I was hoping we could\ndo better. The issue with that option (using v1 with locks for 0-conf,\nand v2 with soft locks for non 0-conf) is that we need to implement that\nsoft lock mechanism (we cannot simply rely on bitcoin core, which only\nsupports hard locks) or use separate bitcoin core wallets for 0-conf and\nnon 0-conf.\n\nBut there is probably no free lunch here! And anyway, this post was also\nmade to raise awareness for implementers to make sure they don't end up\naccidentally double-spending 0-conf channels when implementing dual\nfunding.\n\nThanks,\nBastien\n\nLe mer. 10 mai 2023 \u00e0 02:07, ZmnSCPxj <ZmnSCPxj at protonmail.com> a \u00e9crit :\n\n> Good morning Matt, and t-bast,\n>\n> Your proposal basically means \"do not dual-fund 0-conf\".\n> You might as well use the much simpler openv1 flow in that case, just\n> because it is simpler.\n>\n> Regards,\n> ZmnSCPxj\n>\n>\n>\n>\n> Sent with Proton Mail secure email.\n>\n> ------- Original Message -------\n> On Tuesday, May 9th, 2023 at 5:38 PM, Matt Morehouse <\n> mattmorehouse at gmail.com> wrote:\n>\n>\n> > Hi Bastien,\n> >\n> > In general, 0-conf is only safe when WE are the only contributor to\n> > the channel, otherwise the peer could double spend us.\n> >\n> > The problem you seem to be describing is that we might double-spend\n> > ourselves if we don't lock our 0-conf UTXOs at some point. I propose\n> > that we DO lock our UTXOs after tx_completes have been exchanged IF we\n> > are the only contributor. We don't have to worry about liquidity\n> > griefing in this case, since the peer has no tx_signatures to withhold\n> > from us. Of course, the opportunistic upgrade of a regular channel to\n> > 0-conf won't work -- we need a way to differentiate 0-conf channels\n> > prior to UTXO selection, so that we don't reuse soft-locked UTXOs.\n> >\n> > All together, what I propose is:\n> >\n> > 1) If the channel type has option_zeroconf, select UTXOs that are not\n> > soft locked.\n> > 2) If the peer adds any inputs to the funding transaction, abort\n> > (0-conf is unsafe for us in this case).\n> > 3) After tx_complete exchange, TryLock() our UTXO inputs and abort if\n> > already locked.\n> > 4) Broadcast funding transaction and begin using the 0-conf channel.\n> >\n> > I think this at least enables the common use case for 0-conf: LSPs can\n> > use their own funds to open 0-conf channels for clients.\n> >\n> > - Matt\n> >\n> >\n> >\n> >\n> > On Sat, May 6, 2023 at 3:16\u202fAM Bastien TEINTURIER bastien at acinq.fr\n> wrote:\n> >\n> > > Good morning list,\n> > >\n> > > One of the challenges created by the introduction of dual funded\n> > > transactions [1] in lightning is how to protect against liquidity\n> > > griefing attacks from malicious peers [2].\n> > >\n> > > Let's start by reviewing this liquidity griefing issue. The dual\n> funding\n> > > protocol starts by exchanging data about the utxos each peer adds to\n> the\n> > > shared transaction, then exchange signatures and broadcast the\n> resulting\n> > > transaction. If peers lock their utxos as soon as they've decided to\n> add\n> > > them to the shared transaction, the remote node may go silent. If that\n> > > happens, the honest node has some liquidity that is locked and\n> unusable.\n> > >\n> > > This cannot easily be fixed by simply unlocking utxos after detecting\n> > > that the remote node is fishy, because the remote node would still have\n> > > succeeded at locking your liquidity for a (small) duration, and could\n> > > start other instances of that attack with different node_ids.\n> > >\n> > > An elegant solution to this issue is to never lock utxos used in dual\n> > > funded transactions. If a remote node goes silent in the middle of an\n> > > instance of the protocol, your utxos will automatically be re-used in\n> > > another instance of the protocol. The only drawback with that approach\n> > > is that when you have multiple concurrent instances of dual funding\n> with\n> > > honest peers, some of them may fail because they are double-spent by\n> one\n> > > of the concurrent instances. This is acceptable, since the protocol\n> > > should complete fairly quickly when peers are honest, and at worst, it\n> > > can simply be restarted when failure is detected.\n> > >\n> > > But that solution falls short when using 0-conf, because accidentally\n> > > double-spending a 0-conf channel (because of concurrent instances) can\n> > > result in loss of funds for one of the peers (if payments were made on\n> > > that channel before detecting the double-spend). It seems like using\n> > > 0-conf forces us to lock utxos to avoid this issue, which means that\n> > > nodes offering 0-conf services expose themselves to liquidity griefing.\n> > >\n> > > Another related issue is that nodes that want to offer 0-conf channels\n> > > must ensure that the utxos they use for 0-conf are isolated from the\n> > > utxos they use for non 0-conf, otherwise it is not possible to properly\n> > > lock utxos, because of the following race scenario:\n> > >\n> > > - utxoA is selected for a non 0-conf funding attempt and not locked\n> > > (to protect against liquidity griefing)\n> > > - utxoA is also selected for a 0-conf funding attempt (because it is\n> > > found unlocked in the wallet) and then locked\n> > > - the funding transaction for the 0-conf channel is successfully\n> > > published first and that channel is instantly used for payments\n> > > - the funding transaction for the non 0-conf channel is then published\n> > > and confirms, accidentally double-spending the 0-conf channel\n> > >\n> > > This can be fixed by using a \"soft lock\" when selecting utxos for a non\n> > > 0-conf funding attempt. 0-conf funding attempts must ignore soft locked\n> > > utxos while non 0-conf funding attempts can (should) reuse soft locked\n> > > utxos.\n> > >\n> > > In eclair, we are currently doing \"opportunistic\" 0-conf:\n> > >\n> > > - if we receive `channel_ready` immediately (which means that our peer\n> > > trusts us to use 0-conf)\n> > > - and we're the only contributor to the funding transaction (our peer\n> > > doesn't have any input that they could use to double-spend)\n> > > - and the transaction hasn't been RBF-ed yet\n> > >\n> > > Then we immediately send `channel_ready` as well and start using that\n> > > channel (because we know we won't double spend ourselves). This is nice\n> > > because it lets us use 0-conf in a way where only one side of the\n> > > channel needs to trust the other side (instead of both sides trusting\n> > > each other).\n> > >\n> > > Unfortunately, we cannot do that anymore when mixing 0-conf and non\n> > > 0-conf funding attempts, because the utxos may be soft locked,\n> > > preventing us from \"upgrading\" to 0-conf.\n> > >\n> > > You have successfully reached the end of this quite technical post,\n> > > congrats! My goal with this post is to gather ideas on how we could\n> > > improve that situation and offer good enough protections against\n> > > liquidity griefing for nodes offering 0-conf services. Please share\n> > > your ideas! And yes, I know, 0-conf is a massive implementation pain\n> > > point that we would all like to remove from our codebases, but hey,\n> > > users like it \u00af\\(\u30c4)/\u00af\n> > >\n> > > Cheers,\n> > > Bastien\n> > >\n> > > [1] https://github.com/lightning/bolts/pull/851\n> > > [2] https://github.com/lightning/bolts/pull/851#discussion_r997537630\n> > > _______________________________________________\n> > > Lightning-dev mailing list\n> > > Lightning-dev at lists.linuxfoundation.org\n> > > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> >\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230510/1e7a1a83/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Liquidity griefing for 0-conf dual-funded txs",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "Bastien TEINTURIER",
                "Matt Morehouse"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 26852
        }
    },
    {
        "title": "[Lightning-dev] HTLC Endorsement for Jamming Mitigation",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2023-05-06T20:54:17",
                "message_text_only": "Hi *,\n\n> Our suggestion is to start simple with a binary endorsement field. As\n> we learn more, we will be better equipped to understand whether a\n> more expressive value is required.\n\nI think the HTLC endorsement scheme as proposed is still suffering from a\nvulnerability as local reputation can be built up during periods of low\nrouting fees, endorsement gained and then abused during periods of high\nrouting fees. Therefore, it sounds to me this scheme should aim for some\nreputational transitivity between incoming traffic and outgoing traffic.\nNamely, the acquisition cost of the local reputation should be equal to the\nmax timevalue damage that one can inflict on a routing node channel\naccessible from its local counterparty granting this high-level of\nreputation.\n\nI don't know if this can be fixed by ensuring permanent link-level \"gossip\"\nwhere counterparties along a payment path expose their reputation\nheuristics to guarantee this transitivity, or it's a fundamental issue with\na point-to-point approach like HTLC endorsement.\n\nOpened an issue on the repository to converge on a threat model:\nhttps://github.com/ClaraShk/LNJamming/pull/13\n\nI still think building data gathering infrastructure for Lightning is\nvaluable as ultimately any jamming mitigation will have to adapt its\nupfront fees or reputation acquisition cost in function of HTLC traffic and\nmarket forces.\n\nLooking forward to giving an update on Staking Credentials [0], an\nend-to-end approach to mitigate channel jamming.\n\nBest,\nAntoine\n\n[0]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2022-November/003754.html\n\nLe dim. 30 avr. 2023 \u00e0 03:57, Carla Kirk-Cohen <kirkcohenc at gmail.com> a\n\u00e9crit :\n\n> Hi list,\n>\n> Some updates on channel jamming!\n>\n> # Next Call\n> - Monday 01 May @ 15:00 UTC\n> - https://meet.jit.si/UnjammingLN\n> - Agenda: https://github.com/ClaraShk/LNJamming/issues/12\n>\n> # Data Gathering\n> During these weekly calls, we've come to agreement that we would like\n> to gather data about the use of HTLC endorsement and local reputation\n> tracking for jamming mitigation. A reminder of the full scheme is\n> included at the end of this email, and covered more verbosely in [1].\n>\n> We have a few goals in mind:\n> - Observe the effect of endorsement in the steady state with\n>   logging-only implementation.\n> - Gather real-world data for use in future simulation work.\n> - Experiment with different algorithms for tracking local reputation.\n>\n> The minimal changes required to add HTLC endorsement are outlined in [2].\n> Our suggestion is to start simple with a binary endorsement field. As\n> we learn more, we will be better equipped to understand whether a\n> more expressive value is required.\n>\n> With this infrastructure in place, we can start to experiment with\n> various local reputation schemes and data gathering, possibly even\n> externally to LN implementations in projects like circuitbreaker [3].\n> We'd be interested to hear whether there's any appetite to deploy using\n> an experimental TLV value?\n>\n> # Reputation Scheme\n> - Each node locally tracks the reputation of its direct neighbors.\n> - Each node allocates, per its risk tolerance:\n>   - A number of slots reserved for endorsed HTLCs from high reputation\n>     peers.\n>   - A portion of liquidity reserved for endorsed HTLCs from high\n>     reputation peers.\n> - Forwarding of HTLCs:\n>   - If a HTLC is endorsed by a high reputation peer, it is forwarded\n>     as usual with endorsed = 1.\n>   - Otherwise, it is forwarded with endorsed = 0 if there are slots and\n>     liquidity available for unknown HTLCs.\n>\n> Endorsement and reputation are proposed as the first step in a two part\n> scheme for mitigating channel jamming:\n> - Reputation for slow jams which are easily detected as misbehavior.\n> - Unconditional fees for quick jams that are difficult to detect, as\n>   they can always fall under a target threshold.\n>\n> Looking forward to discussing further in the upcoming call!\n>\n> Best,\n> Carla and Clara\n>\n> [1] https://gist.github.com/carlaKC/be820bb638624253f3ae7b39dbd0e343\n> [2] https://github.com/lightning/bolts/pull/1071\n> [3] https://github.com/lightningequipment/circuitbreaker\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230506/40daccce/attachment.html>"
            },
            {
                "author": "Clara Shikhelman",
                "date": "2023-05-08T20:46:08",
                "message_text_only": "Hi,\n\nI think the HTLC endorsement scheme as proposed is still suffering from a\n> vulnerability as local reputation can be built up during periods of low\n> routing fees, endorsement gained and then abused during periods of high\n> routing fees. Therefore, it sounds to me this scheme should aim for some\n> reputational transitivity between incoming traffic and outgoing traffic.\n> Namely, the acquisition cost of the local reputation should be equal to the\n> max timevalue damage that one can inflict on a routing node channel\n> accessible from its local counterparty granting this high-level of\n> reputation.\n>\n\nThis is the reason we have a moving window for the calculation.\nNote that if there is a channel between Alice and Bob, then the reputation\nof Alice from Bob's point of view is a function of Bob's total revenue in\nthe latest time period. If Bob experiences a spike in routing fees, nodes\nmight lose their reputation, but it would not work the other way around.\nThat is, one cannot gain reputation during low fee times and use it when\nfees are high.\n\nSee further details in this email [0]\n\nBest,\nClara\n\n[0]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2023-February/003857.html\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230508/abc0a16c/attachment-0001.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2023-05-10T11:57:34",
                "message_text_only": "Hi Antoine,\n\nthis is an intrinsic issue with reputation systems, and the main\nreason I'm sceptical w.r.t. their usefulness in lightning.\nFundamentally any reputation system bases their expectations for the\nfuture on experiences they made in the past, and they are thus always\nsusceptible to sudden behavioral changes (going rogue from a prior\nclean record) and whitewashing attacks (switching identity, abusing\nany builtin bootstrapping method for new users to gain a good or\nneutral reputation before turning rogue repeatedly).\n\nThis gets compounded as soon as we start gossiping about reputations,\nsince now our decisions are no longer based just on information we can\nwitness ourselves, or at least verify its correctness, and as such an\nattacker can most likely \"earn\" a positive reputation in some other\npart of the world, and then turn around and attack the nodes that\ntrusted the reputation shared from those other parts.\n\nI'd be very interested in how many repeat interactions nodes get from\nindividual senders, since that also tells us how much use we can get\nout of local-only reputation based systems, and I wouldn't be\nsurprised if, for large routing nodes, we have sufficient data for\nthem to make an informed decision, while the edges may be more\nvulnerable, but they'd also be used by way fewer senders, and the\nimpact of an attack would also be proportionally smaller.\n\nCheers,\nChristian\n\nOn Mon, May 8, 2023 at 10:26\u202fPM Antoine Riard <antoine.riard at gmail.com> wrote:\n>\n> Hi *,\n>\n> > Our suggestion is to start simple with a binary endorsement field. As\n> > we learn more, we will be better equipped to understand whether a\n> > more expressive value is required.\n>\n> I think the HTLC endorsement scheme as proposed is still suffering from a vulnerability as local reputation can be built up during periods of low routing fees, endorsement gained and then abused during periods of high routing fees. Therefore, it sounds to me this scheme should aim for some reputational transitivity between incoming traffic and outgoing traffic. Namely, the acquisition cost of the local reputation should be equal to the max timevalue damage that one can inflict on a routing node channel accessible from its local counterparty granting this high-level of reputation.\n>\n> I don't know if this can be fixed by ensuring permanent link-level \"gossip\" where counterparties along a payment path expose their reputation heuristics to guarantee this transitivity, or it's a fundamental issue with a point-to-point approach like HTLC endorsement.\n>\n> Opened an issue on the repository to converge on a threat model:\n> https://github.com/ClaraShk/LNJamming/pull/13\n>\n> I still think building data gathering infrastructure for Lightning is valuable as ultimately any jamming mitigation will have to adapt its upfront fees or reputation acquisition cost in function of HTLC traffic and market forces.\n>\n> Looking forward to giving an update on Staking Credentials [0], an end-to-end approach to mitigate channel jamming.\n>\n> Best,\n> Antoine\n>\n> [0] https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-November/003754.html\n>\n> Le dim. 30 avr. 2023 \u00e0 03:57, Carla Kirk-Cohen <kirkcohenc at gmail.com> a \u00e9crit :\n>>\n>> Hi list,\n>>\n>> Some updates on channel jamming!\n>>\n>> # Next Call\n>> - Monday 01 May @ 15:00 UTC\n>> - https://meet.jit.si/UnjammingLN\n>> - Agenda: https://github.com/ClaraShk/LNJamming/issues/12\n>>\n>> # Data Gathering\n>> During these weekly calls, we've come to agreement that we would like\n>> to gather data about the use of HTLC endorsement and local reputation\n>> tracking for jamming mitigation. A reminder of the full scheme is\n>> included at the end of this email, and covered more verbosely in [1].\n>>\n>> We have a few goals in mind:\n>> - Observe the effect of endorsement in the steady state with\n>>   logging-only implementation.\n>> - Gather real-world data for use in future simulation work.\n>> - Experiment with different algorithms for tracking local reputation.\n>>\n>> The minimal changes required to add HTLC endorsement are outlined in [2].\n>> Our suggestion is to start simple with a binary endorsement field. As\n>> we learn more, we will be better equipped to understand whether a\n>> more expressive value is required.\n>>\n>> With this infrastructure in place, we can start to experiment with\n>> various local reputation schemes and data gathering, possibly even\n>> externally to LN implementations in projects like circuitbreaker [3].\n>> We'd be interested to hear whether there's any appetite to deploy using\n>> an experimental TLV value?\n>>\n>> # Reputation Scheme\n>> - Each node locally tracks the reputation of its direct neighbors.\n>> - Each node allocates, per its risk tolerance:\n>>   - A number of slots reserved for endorsed HTLCs from high reputation\n>>     peers.\n>>   - A portion of liquidity reserved for endorsed HTLCs from high\n>>     reputation peers.\n>> - Forwarding of HTLCs:\n>>   - If a HTLC is endorsed by a high reputation peer, it is forwarded\n>>     as usual with endorsed = 1.\n>>   - Otherwise, it is forwarded with endorsed = 0 if there are slots and\n>>     liquidity available for unknown HTLCs.\n>>\n>> Endorsement and reputation are proposed as the first step in a two part\n>> scheme for mitigating channel jamming:\n>> - Reputation for slow jams which are easily detected as misbehavior.\n>> - Unconditional fees for quick jams that are difficult to detect, as\n>>   they can always fall under a target threshold.\n>>\n>> Looking forward to discussing further in the upcoming call!\n>>\n>> Best,\n>> Carla and Clara\n>>\n>> [1] https://gist.github.com/carlaKC/be820bb638624253f3ae7b39dbd0e343\n>> [2] https://github.com/lightning/bolts/pull/1071\n>> [3] https://github.com/lightningequipment/circuitbreaker\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Michael Folkson",
                "date": "2023-05-10T12:57:19",
                "message_text_only": ">From my perspective it really comes down to whether you want security *guarantees* or data to assist you in making probabilistic judgments about future behavior. Reputation data or reputation systems will never give you guarantees for the reasons Christian explains. But reputation data is better than nothing and depending on the quality and granularity of the data could be considerably better than nothing. In the most basic case of deciding on a potential channel counterparty I would much rather choose a counterparty who has demonstrated competence and reliability over a number of years than a channel counterparty who has just joined the network and who I know nothing about. Similarly a Lightning node that hasn't carried a jamming attack for multiple years despite having the opportunity to is a much better bet than a Lightning node of which I know nothing.\n\nNow where it sits on the software stack assuming a user opts into such a reputation \"service\" (plugin maybe or more likely an API) is I think what in essence this discussion is about. As I've already stated previously and which I agree with Christian on is that it isn't/shouldn't be a protocol or a P2P gossiping issue. In the same way as we have multiple Lightning explorers (1ML, Amboss etc) that aren't part of the Lightning protocol or part of the \"core\" of a Lightning node you can expect there would be competing reputation data providers and services. Also many users for privacy and/or other reasons won't be interested in using or participating in (to the extent they can opt out if the data is public) a reputation service.\n\nSo yeah I think I'm somewhere in between Christian's and Antoine's perspectives here. I do think there are interesting projects, services or even businesses in this area of reputation but it isn't a protocol/P2P gossiping issue or a \"core\" of a Lightning node issue.\n\nThanks\nMichael\n\n[0]: https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-November/003766.html\n\n--\nMichael Folkson\nEmail: michaelfolkson at protonmail.com\nGPG: A2CF5D71603C92010659818D2A75D601B23FEE0F\nLearn about Bitcoin: https://www.youtube.com/@portofbitcoin\n\n\n------- Original Message -------\nOn Wednesday, May 10th, 2023 at 12:57, Christian Decker <decker.christian at gmail.com> wrote:\n\n\n> Hi Antoine,\n> \n> this is an intrinsic issue with reputation systems, and the main\n> reason I'm sceptical w.r.t. their usefulness in lightning.\n> Fundamentally any reputation system bases their expectations for the\n> future on experiences they made in the past, and they are thus always\n> susceptible to sudden behavioral changes (going rogue from a prior\n> clean record) and whitewashing attacks (switching identity, abusing\n> any builtin bootstrapping method for new users to gain a good or\n> neutral reputation before turning rogue repeatedly).\n> \n> This gets compounded as soon as we start gossiping about reputations,\n> since now our decisions are no longer based just on information we can\n> witness ourselves, or at least verify its correctness, and as such an\n> attacker can most likely \"earn\" a positive reputation in some other\n> part of the world, and then turn around and attack the nodes that\n> trusted the reputation shared from those other parts.\n> \n> I'd be very interested in how many repeat interactions nodes get from\n> individual senders, since that also tells us how much use we can get\n> out of local-only reputation based systems, and I wouldn't be\n> surprised if, for large routing nodes, we have sufficient data for\n> them to make an informed decision, while the edges may be more\n> vulnerable, but they'd also be used by way fewer senders, and the\n> impact of an attack would also be proportionally smaller.\n> \n> Cheers,\n> Christian\n> \n> On Mon, May 8, 2023 at 10:26\u202fPM Antoine Riard antoine.riard at gmail.com wrote:\n> \n> > Hi *,\n> > \n> > > Our suggestion is to start simple with a binary endorsement field. As\n> > > we learn more, we will be better equipped to understand whether a\n> > > more expressive value is required.\n> > \n> > I think the HTLC endorsement scheme as proposed is still suffering from a vulnerability as local reputation can be built up during periods of low routing fees, endorsement gained and then abused during periods of high routing fees. Therefore, it sounds to me this scheme should aim for some reputational transitivity between incoming traffic and outgoing traffic. Namely, the acquisition cost of the local reputation should be equal to the max timevalue damage that one can inflict on a routing node channel accessible from its local counterparty granting this high-level of reputation.\n> > \n> > I don't know if this can be fixed by ensuring permanent link-level \"gossip\" where counterparties along a payment path expose their reputation heuristics to guarantee this transitivity, or it's a fundamental issue with a point-to-point approach like HTLC endorsement.\n> > \n> > Opened an issue on the repository to converge on a threat model:\n> > https://github.com/ClaraShk/LNJamming/pull/13\n> > \n> > I still think building data gathering infrastructure for Lightning is valuable as ultimately any jamming mitigation will have to adapt its upfront fees or reputation acquisition cost in function of HTLC traffic and market forces.\n> > \n> > Looking forward to giving an update on Staking Credentials [0], an end-to-end approach to mitigate channel jamming.\n> > \n> > Best,\n> > Antoine\n> > \n> > [0] https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-November/003754.html\n> > \n> > Le dim. 30 avr. 2023 \u00e0 03:57, Carla Kirk-Cohen kirkcohenc at gmail.com a \u00e9crit :\n> > \n> > > Hi list,\n> > > \n> > > Some updates on channel jamming!\n> > > \n> > > # Next Call\n> > > - Monday 01 May @ 15:00 UTC\n> > > - https://meet.jit.si/UnjammingLN\n> > > - Agenda: https://github.com/ClaraShk/LNJamming/issues/12\n> > > \n> > > # Data Gathering\n> > > During these weekly calls, we've come to agreement that we would like\n> > > to gather data about the use of HTLC endorsement and local reputation\n> > > tracking for jamming mitigation. A reminder of the full scheme is\n> > > included at the end of this email, and covered more verbosely in [1].\n> > > \n> > > We have a few goals in mind:\n> > > - Observe the effect of endorsement in the steady state with\n> > > logging-only implementation.\n> > > - Gather real-world data for use in future simulation work.\n> > > - Experiment with different algorithms for tracking local reputation.\n> > > \n> > > The minimal changes required to add HTLC endorsement are outlined in [2].\n> > > Our suggestion is to start simple with a binary endorsement field. As\n> > > we learn more, we will be better equipped to understand whether a\n> > > more expressive value is required.\n> > > \n> > > With this infrastructure in place, we can start to experiment with\n> > > various local reputation schemes and data gathering, possibly even\n> > > externally to LN implementations in projects like circuitbreaker [3].\n> > > We'd be interested to hear whether there's any appetite to deploy using\n> > > an experimental TLV value?\n> > > \n> > > # Reputation Scheme\n> > > - Each node locally tracks the reputation of its direct neighbors.\n> > > - Each node allocates, per its risk tolerance:\n> > > - A number of slots reserved for endorsed HTLCs from high reputation\n> > > peers.\n> > > - A portion of liquidity reserved for endorsed HTLCs from high\n> > > reputation peers.\n> > > - Forwarding of HTLCs:\n> > > - If a HTLC is endorsed by a high reputation peer, it is forwarded\n> > > as usual with endorsed = 1.\n> > > - Otherwise, it is forwarded with endorsed = 0 if there are slots and\n> > > liquidity available for unknown HTLCs.\n> > > \n> > > Endorsement and reputation are proposed as the first step in a two part\n> > > scheme for mitigating channel jamming:\n> > > - Reputation for slow jams which are easily detected as misbehavior.\n> > > - Unconditional fees for quick jams that are difficult to detect, as\n> > > they can always fall under a target threshold.\n> > > \n> > > Looking forward to discussing further in the upcoming call!\n> > > \n> > > Best,\n> > > Carla and Clara\n> > > \n> > > [1] https://gist.github.com/carlaKC/be820bb638624253f3ae7b39dbd0e343\n> > > [2] https://github.com/lightning/bolts/pull/1071\n> > > [3] https://github.com/lightningequipment/circuitbreaker\n> > > _______________________________________________\n> > > Lightning-dev mailing list\n> > > Lightning-dev at lists.linuxfoundation.org\n> > > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> > \n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> \n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Clara Shikhelman",
                "date": "2023-05-10T15:59:13",
                "message_text_only": "Hi Christian,\n\nThanks for your comments! We will discuss this further in the upcoming call\non the 15th, would be great to see you there!\n\n\n> this is an intrinsic issue with reputation systems, and the main\n> reason I'm sceptical w.r.t. their usefulness in lightning.\n> Fundamentally any reputation system bases their expectations for the\n> future on experiences they made in the past, and they are thus always\n> susceptible to sudden behavioral changes (going rogue from a prior\n> clean record) and whitewashing attacks (switching identity, abusing\n> any builtin bootstrapping method for new users to gain a good or\n> neutral reputation before turning rogue repeatedly).\n>\n\nIn the Lightning Network, fees are a native way to put a price on having a\ngood reputation (see details here [0]). In the design that we suggest, the\nreputation gained today cannot be used in the distant future, and funds\nneed to be invested continuously to keep a good reputation. Good reputation\nis also a function of the general environment, and so if there is a fee\nspike, reputation will change. It is true that nodes can go rogue, but this\nis why we aim for the price of a good reputation to be similar to the\namount of damage they can create.\n\n\n> This gets compounded as soon as we start gossiping about reputations,\n> since now our decisions are no longer based just on information we can\n> witness ourselves, or at least verify its correctness, and as such an\n> attacker can most likely \"earn\" a positive reputation in some other\n> part of the world, and then turn around and attack the nodes that\n> trusted the reputation shared from those other parts.\n>\n\nNotice that we are not gossiping about our peer's reputation. The only\nthing that a node communicates to its neighbor is whether they see an HTLC\nas endorsed or just neutral, that is, should this HTLC be granted access to\nall of the resources or just the restricted part.\n\n\n> I'd be very interested in how many repeat interactions nodes get from\n> individual senders, since that also tells us how much use we can get\n> out of local-only reputation based systems, and I wouldn't be\n> surprised if, for large routing nodes, we have sufficient data for\n> them to make an informed decision, while the edges may be more\n> vulnerable, but they'd also be used by way fewer senders, and the\n> impact of an attack would also be proportionally smaller.\n>\n\nThis is something we hope to learn once we'll start collecting data from\nour brave volunteers :)\n\nCheers,\nClara\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230510/e8f3be68/attachment-0001.html>"
            },
            {
                "author": "Vincenzo Palazzo",
                "date": "2023-05-11T07:28:56",
                "message_text_only": "Hi all,\n\n> > This gets compounded as soon as we start gossiping about reputations,\n> > since now our decisions are no longer based just on information we can\n> > witness ourselves, or at least verify its correctness, and as such an\n> > attacker can most likely \"earn\" a positive reputation in some other\n> > part of the world, and then turn around and attack the nodes that\n> > trusted the reputation shared from those other parts.\n> >\n>\n> Notice that we are not gossiping about our peer's reputation. The only\n> thing that a node communicates to its neighbor is whether they see an HTLC\n> as endorsed or just neutral, that is, should this HTLC be granted access to\n\nYeah, this is a good point. If we gossip this information, we may see \ndifferent values for the same node, and I'm sure someone will propose a \n\"proof who is telling the true\" for this. I don't want the reputation we \nend up with to be gossiped to our peers.\n\nIn my last research on this, I noted that some nodes with Tor have a completely\nunrealistic vision of the network. They believe that other nodes are \noffline, but the problem is actually the overloaded Tor network.\n\nCheers!\n\nVincent"
            },
            {
                "author": "Antoine Riard",
                "date": "2023-05-17T18:52:22",
                "message_text_only": "Hi all,\n\n> That is, one cannot gain reputation during low fee times and use it when\nfees are high.\n\n> Good reputation is also a function of the general environment, and so if\nthere is a fee spike, reputation will change. It is true that nodes can go\nrogue, but this is why we aim > for the price of a good reputation to be\nsimilar to the amount of damage they can create.\n\nThe lack of transitivity of the reputation acquisition cost (e.g based on\nhistorical fees earned from forwards originating from the peer) between the\nhops of the payment path still raises a vulnerability issue for the\nendorsement scheme, I think.\n\nNamely, let's say you have Alice, Bob and Caroll where endorsement has been\nobtained by Alice on the Bob incoming link by paying fees for an amount of\n1000 sats for the last 100 blocks. Caroll offers a far higher pricing on\nher incoming link from Bob, 10000 sats as `fee_base_msat` on her endorsed\nslots. It sounds to me there is nothing preventing Alice from sacrificing\nher earned reputation to inflict a loss of routing fees damage on Caroll\nincoming link ?\n\nGenerally, I think the endorsement scheme assumes some synchronicity in the\nsetting of routing fees by the hops. In practice, it's expected there will\nbe variations based on their own pricing of liquidity, their accumulated\ndata sets (e.g historical view of LN gossips) and downstream link topology.\nAnd this is the same between building a mitigation on concepts like\n\"peace/war\" time, sophisticated attackers might be able to mask their\ntraffic as some spontaneous congestion.\n\nThere is an independent new observation on the effect of dynamic reputation\nwindows on payment reliability, as those windows are not announced to the\nrest of the network, sudden changes in the links throughput based on HTLC\nresolution might break the historical liquidity buckets of routing scoring\nalgorithms (at least in the way we're doing it for LDK), I think ?\n\nBest,\nAntoine\n\n\nLe mer. 10 mai 2023 \u00e0 16:59, Clara Shikhelman <clara.shikhelman at gmail.com>\na \u00e9crit :\n\n> Hi Christian,\n>\n> Thanks for your comments! We will discuss this further in the upcoming\n> call on the 15th, would be great to see you there!\n>\n>\n>> this is an intrinsic issue with reputation systems, and the main\n>> reason I'm sceptical w.r.t. their usefulness in lightning.\n>> Fundamentally any reputation system bases their expectations for the\n>> future on experiences they made in the past, and they are thus always\n>> susceptible to sudden behavioral changes (going rogue from a prior\n>> clean record) and whitewashing attacks (switching identity, abusing\n>> any builtin bootstrapping method for new users to gain a good or\n>> neutral reputation before turning rogue repeatedly).\n>>\n>\n> In the Lightning Network, fees are a native way to put a price on having a\n> good reputation (see details here [0]). In the design that we suggest, the\n> reputation gained today cannot be used in the distant future, and funds\n> need to be invested continuously to keep a good reputation. Good reputation\n> is also a function of the general environment, and so if there is a fee\n> spike, reputation will change. It is true that nodes can go rogue, but this\n> is why we aim for the price of a good reputation to be similar to the\n> amount of damage they can create.\n>\n>\n>> This gets compounded as soon as we start gossiping about reputations,\n>> since now our decisions are no longer based just on information we can\n>> witness ourselves, or at least verify its correctness, and as such an\n>> attacker can most likely \"earn\" a positive reputation in some other\n>> part of the world, and then turn around and attack the nodes that\n>> trusted the reputation shared from those other parts.\n>>\n>\n> Notice that we are not gossiping about our peer's reputation. The only\n> thing that a node communicates to its neighbor is whether they see an HTLC\n> as endorsed or just neutral, that is, should this HTLC be granted access to\n> all of the resources or just the restricted part.\n>\n>\n>> I'd be very interested in how many repeat interactions nodes get from\n>> individual senders, since that also tells us how much use we can get\n>> out of local-only reputation based systems, and I wouldn't be\n>> surprised if, for large routing nodes, we have sufficient data for\n>> them to make an informed decision, while the edges may be more\n>> vulnerable, but they'd also be used by way fewer senders, and the\n>> impact of an attack would also be proportionally smaller.\n>>\n>\n> This is something we hope to learn once we'll start collecting data from\n> our brave volunteers :)\n>\n> Cheers,\n> Clara\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230517/9cd075a3/attachment.html>"
            },
            {
                "author": "Clara Shikhelman",
                "date": "2023-05-17T20:49:02",
                "message_text_only": "Hi,\n\n\n> The lack of transitivity of the reputation acquisition cost (e.g based on\n> historical fees earned from forwards originating from the peer) between the\n> hops of the payment path still raises a vulnerability issue for the\n> endorsement scheme, I think.\n>\n> Namely, let's say you have Alice, Bob and Caroll where endorsement has\n> been obtained by Alice on the Bob incoming link by paying fees for an\n> amount of 1000 sats for the last 100 blocks. Caroll offers a far higher\n> pricing on her incoming link from Bob, 10000 sats as `fee_base_msat` on her\n> endorsed slots. It sounds to me there is nothing preventing Alice from\n> sacrificing her earned reputation to inflict a loss of routing fees damage\n> on Caroll incoming link ?\n>\n\nI think it's important to differentiate between fees a node charges and\n*reputation_revenue*. Reputation is determined as a function of the latter.\nIf Caroll has a very high *reputation_revenue* and Bob has a very low one,\nthen Bob probably won't have a high reputation with Caroll, as the amount\nof fees he forwards to Caroll is smaller than the damage he can create.\nThat is, if Caroll is a huge node and Bob is a raspberry pi, then Bob will\nnever have a good reputation with Caroll. If they have similar\n*reputation_revenue*, then getting a good reputation with Bob is as\ndifficult as getting a good reputation with Caroll.\n\nIn your example (if I got it correctly) Bob's *reputation_revenue* = 1,000,\n*reputation_window*=100 and *routing_window*=10. Could you explain what are\nCaroll's parameters are in your example? The *fee_base_msat* does not\nindicate Carolls *reputation_revenue* (unless Alice is the only one\ntransacting on the Bob-Caroll channel, and then she is the one paying for\nBob's reputation).\n\nThat being said, we use *reputation_revenue *to estimate the damage an\nattacker can create. If there is a chain of nodes that have high reputation\nwith each other, and they are jammed, they would be compensated for the\nrevenue lost during the attack. If Bob finds that having a high reputation\nwith Caroll is crucial and 1,000 sats will not compensate him for loosing\nit, then he should either never endorse anything on that channel, or at\nleast put a higher bar than *reputation_revenue*.\n\nThere is an independent new observation on the effect of dynamic reputation\n> windows on payment reliability, as those windows are not announced to the\n> rest of the network, sudden changes in the links throughput based on HTLC\n> resolution might break the historical liquidity buckets of routing scoring\n> algorithms (at least in the way we're doing it for LDK), I think ?\n>\n\nNot sure what you mean by that.\n\nBest,\nClara\n\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230517/d00db6ae/attachment.html>"
            },
            {
                "author": "Antoine Riard",
                "date": "2023-05-31T16:38:08",
                "message_text_only": "> I think it's important to differentiate between fees a node charges and\n> *reputation_revenue*. Reputation is determined as a function of the latter.\n> If Caroll has a very high *reputation_revenue* and Bob has a very low one,\n> then Bob probably won't have a high reputation with Caroll, as the amount\n> of fees he forwards to Caroll is smaller than the damage he can create.\n> That is, if Caroll is a huge node and Bob is a raspberry pi, then Bob will\n> never have a good reputation with Caroll. If they have similar\n> *reputation_revenue*, then getting a good reputation with Bob is as\n> difficult as getting a good reputation with Caroll.\n>\n> In your example (if I got it correctly) Bob's *reputation_revenue* = 1,000,\n> *reputation_window*=100 and *routing_window*=10. Could you explain what are\n> Caroll's parameters are in your example? The *fee_base_msat* does not\n> indicate Carolls *reputation_revenue* (unless Alice is the only one\n> transacting on the Bob-Caroll channel, and then she is the one paying for\n> Bob's reputation).\n>\n> That being said, we use *reputation_revenue *to estimate the damage an\n> attacker can create. If there is a chain of nodes that have high reputation\n> with each other, and they are jammed, they would be compensated for the\n> revenue lost during the attack. If Bob finds that having a high reputation\n> with Caroll is crucial and 1,000 sats will not compensate him for loosing\n> it, then he should either never endorse anything on that channel, or at\n> least put a higher bar than *reputation_revenue*.\n\nI think the distinction you're proposing between routing fees and\nreputation revenue matters in the HTLC endorsement model. For the\nexample I'm using let's say Caroll and Bob share the same exact\nparameters, *reputation_revenue* = 1,000, *routing_window*=100 and\n*routing_window*=10, where the reputation revenue of Bob towards\nCaroll is made from multiple incoming links.\n\nFor each HTLC forwarding request issued from Alice, Bob has to make\nthe decision between refusing Alice HTLC forward over the Caroll\nincoming link, and lose an opportunity of fee income, or accept the\nHTLC and suffers from a damage if Alice reveals a posteriori as a\njamming attacker.\n\nThis is unclear to me how the compensation mechanism works in the\nchain of nodes that have high reputation with each other, and I still\nthink the HTLC endorsement mitigation suffers from the classic issues\nof reputation systems (i.e whitewashing).\n\n> Not sure what you mean by that.\n\nI think there is a coupling effec introduced between the historical\nliquidity buckets of routing scoring algorithms and the introduction\nof endorsment scheme with adjustement of the channel liquidity and\nslots in function of local topology reputation.\n\nSee the LDK scoring engine comments here :\nhttps://github.com/lightningdevkit/rust-lightning/blob/eec5ec6b50720144fc23503c3ee9c1c8850517ac/lightning/src/routing/scoring.rs#L336\n\nBest,\nAntoine\n\n\nLe mer. 17 mai 2023 \u00e0 21:49, Clara Shikhelman <clara.shikhelman at gmail.com>\na \u00e9crit :\n\n> Hi,\n>\n>\n>> The lack of transitivity of the reputation acquisition cost (e.g based on\n>> historical fees earned from forwards originating from the peer) between the\n>> hops of the payment path still raises a vulnerability issue for the\n>> endorsement scheme, I think.\n>>\n>> Namely, let's say you have Alice, Bob and Caroll where endorsement has\n>> been obtained by Alice on the Bob incoming link by paying fees for an\n>> amount of 1000 sats for the last 100 blocks. Caroll offers a far higher\n>> pricing on her incoming link from Bob, 10000 sats as `fee_base_msat` on her\n>> endorsed slots. It sounds to me there is nothing preventing Alice from\n>> sacrificing her earned reputation to inflict a loss of routing fees damage\n>> on Caroll incoming link ?\n>>\n>\n> I think it's important to differentiate between fees a node charges and\n> *reputation_revenue*. Reputation is determined as a function of the\n> latter. If Caroll has a very high *reputation_revenue* and Bob has a very\n> low one, then Bob probably won't have a high reputation with Caroll, as the\n> amount of fees he forwards to Caroll is smaller than the damage he can\n> create. That is, if Caroll is a huge node and Bob is a raspberry pi, then\n> Bob will never have a good reputation with Caroll. If they have similar\n> *reputation_revenue*, then getting a good reputation with Bob is as\n> difficult as getting a good reputation with Caroll.\n>\n> In your example (if I got it correctly) Bob's *reputation_revenue* =\n> 1,000, *reputation_window*=100 and *routing_window*=10. Could you explain\n> what are Caroll's parameters are in your example? The *fee_base_msat*\n> does not indicate Carolls *reputation_revenue* (unless Alice is the only\n> one transacting on the Bob-Caroll channel, and then she is the one paying\n> for Bob's reputation).\n>\n> That being said, we use *reputation_revenue *to estimate the damage an\n> attacker can create. If there is a chain of nodes that have high reputation\n> with each other, and they are jammed, they would be compensated for the\n> revenue lost during the attack. If Bob finds that having a high reputation\n> with Caroll is crucial and 1,000 sats will not compensate him for loosing\n> it, then he should either never endorse anything on that channel, or at\n> least put a higher bar than *reputation_revenue*.\n>\n> There is an independent new observation on the effect of dynamic\n>> reputation windows on payment reliability, as those windows are not\n>> announced to the rest of the network, sudden changes in the links\n>> throughput based on HTLC resolution might break the historical liquidity\n>> buckets of routing scoring algorithms (at least in the way we're doing it\n>> for LDK), I think ?\n>>\n>\n> Not sure what you mean by that.\n>\n> Best,\n> Clara\n>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230531/5017e472/attachment.html>"
            },
            {
                "author": "Clara Shikhelman",
                "date": "2023-05-31T20:20:22",
                "message_text_only": "Hi,\n\n> I think the distinction you're proposing between routing fees and reputation revenue matters in the HTLC endorsement model. For the example I'm using let's say Caroll and Bob share the same exact parameters, *reputation_revenue* = 1,000, *routing_window*=100 and *routing_window*=10, where the reputation revenue of Bob towards Caroll is made from multiple incoming links.\n>\n> For each HTLC forwarding request issued from Alice, Bob has to make the decision between refusing Alice HTLC forward over the Caroll incoming link, and lose an opportunity of fee income, or accept the HTLC and suffers from a damage if Alice reveals a posteriori as a jamming attacker.\n>\n> Bob can also forward but not endorse Alice's HTLC. All of this is a\nfunction of how much credit Bob gives to Alice's judgment. In case of\njamming, the damage that Alice inflicts should be proportional to the\nrevenue she recently created for Bob, and so the more damage, the higher\nthe threshold.\n\n>\n> This is unclear to me how the compensation mechanism works in the chain of nodes that have high reputation with each other, and I still think the HTLC endorsement mitigation suffers from the classic issues of reputation systems (i.e whitewashing).\n>\n> This system guarantees that if a node was jammed, it was paid a\nsignificant some prior to the attack happening. There is no claim about who\nis paying or the cost of the attack.\n\nI think there is a coupling effec introduced between the historical\nliquidity buckets of routing scoring algorithms and the introduction\nof endorsment scheme with adjustement of the channel liquidity and\nslots in function of local topology reputation.\n>\n>\n> See the LDK scoring engine comments here : https://github.com/lightningdevkit/rust-lightning/blob/eec5ec6b50720144fc23503c3ee9c1c8850517ac/lightning/src/routing/scoring.rs#L336\n>\n>\nThe reading on the channel liquidity can change for different users using\ndifferent routes, but the information a node gets is what liquidity is\navailable for them (and not the state of the channel in general). This\nindeed can fluctuate more than it does now, but so is the liquidity\navailable for a specific node.\n\nBest,\nClara\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230531/adab622d/attachment-0001.html>"
            },
            {
                "author": "Carla Kirk-Cohen",
                "date": "2023-05-16T19:42:50",
                "message_text_only": "Hi all,\n\nPulling together a few conversation threads here. I\u2019ve also updated\nthe draft spec PR [1] with a full write up of the reputation scheme\nwe\u2019re proposing to help clarify open questions.\n\nTL;DR\n1. Reputation is tracked locally for each of a node\u2019s peers, there\n  is *no gossip component*.\n2. During a jamming attack, the less active edges of the network will\n  experience gradually degraded quality of service, but they will be\n  unaffected in times of peace.\n3. Reputation is slow and expensive to build (accumulated through\n  payment of fees) and fast to degrade, so sudden changes in behavior\n  are short-lived.\n4. Good reputation is always examined relative to a node\u2019s recent\n  routing activity, so reputation gained cheaply in the past during\n  low-activity periods can\u2019t be exploited in busier times.\n\nRe [2]\n> I'd be very interested in how many repeat interactions nodes get from\nindividual senders, since that also tells us how much use we can get\nout of local-only reputation based systems, and I wouldn't be\nsurprised if, for large routing nodes, we have sufficient data for\nthem to make an informed decision, while the edges may be more\nvulnerable, but they'd also be used by way fewer senders, and the\nimpact of an attack would also be proportionally smaller.\n\nI\u2019m unclear on what you mean by \u201cindividual senders\u201d here? In our\nscheme, nodes only track local reputation for their direct peers so\nwhat matters is their history with all HTLCs a peer has forwarded to\nthem (not whether they come from repeat senders).\n\nIt\u2019s true that nodes that forward fewer HTLCs are less likely to be\nable to build a good reputation with very active routing nodes. In the\nregular operation of the network, this should have low to no impact on\ntheir activity - they don\u2019t require much from their peers anyway.\nDuring an attack, small and low activity nodes will temporarily be in\ncompetition for large routing nodes\u2019 scarce liquidity and slots, but\nwill still be able to interact with similar nodes where they have\nbetter chances of building a good reputation.\n\nRe [3]\n> I think with some implementation like cln we can write an extension\n> an deploy  in some nodes, I need to go deeper into it but I can help\n> with this. But I would love to discuss how I can help with some\n> implementation details.\n\nAn experimental data gathering mechanism for CLN would be great! Seems\nlike lnmetrics would be a good home for it - I\u2019ll follow up with you\nwhen we start working on data collection.\n\n\nCheers,\nCarla + Clara\n\n[1] https://github.com/lightning/bolts/pull/1071\n[2]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003944.html\n[3]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2023-May/003949.html\n\nOn Wed, May 10, 2023 at 7:58\u202fAM Christian Decker <decker.christian at gmail.com>\nwrote:\n\n> Hi Antoine,\n>\n> this is an intrinsic issue with reputation systems, and the main\n> reason I'm sceptical w.r.t. their usefulness in lightning.\n> Fundamentally any reputation system bases their expectations for the\n> future on experiences they made in the past, and they are thus always\n> susceptible to sudden behavioral changes (going rogue from a prior\n> clean record) and whitewashing attacks (switching identity, abusing\n> any builtin bootstrapping method for new users to gain a good or\n> neutral reputation before turning rogue repeatedly).\n>\n> This gets compounded as soon as we start gossiping about reputations,\n> since now our decisions are no longer based just on information we can\n> witness ourselves, or at least verify its correctness, and as such an\n> attacker can most likely \"earn\" a positive reputation in some other\n> part of the world, and then turn around and attack the nodes that\n> trusted the reputation shared from those other parts.\n>\n> I'd be very interested in how many repeat interactions nodes get from\n> individual senders, since that also tells us how much use we can get\n> out of local-only reputation based systems, and I wouldn't be\n> surprised if, for large routing nodes, we have sufficient data for\n> them to make an informed decision, while the edges may be more\n> vulnerable, but they'd also be used by way fewer senders, and the\n> impact of an attack would also be proportionally smaller.\n>\n> Cheers,\n> Christian\n>\n> On Mon, May 8, 2023 at 10:26\u202fPM Antoine Riard <antoine.riard at gmail.com>\n> wrote:\n> >\n> > Hi *,\n> >\n> > > Our suggestion is to start simple with a binary endorsement field. As\n> > > we learn more, we will be better equipped to understand whether a\n> > > more expressive value is required.\n> >\n> > I think the HTLC endorsement scheme as proposed is still suffering from\n> a vulnerability as local reputation can be built up during periods of low\n> routing fees, endorsement gained and then abused during periods of high\n> routing fees. Therefore, it sounds to me this scheme should aim for some\n> reputational transitivity between incoming traffic and outgoing traffic.\n> Namely, the acquisition cost of the local reputation should be equal to the\n> max timevalue damage that one can inflict on a routing node channel\n> accessible from its local counterparty granting this high-level of\n> reputation.\n> >\n> > I don't know if this can be fixed by ensuring permanent link-level\n> \"gossip\" where counterparties along a payment path expose their reputation\n> heuristics to guarantee this transitivity, or it's a fundamental issue with\n> a point-to-point approach like HTLC endorsement.\n> >\n> > Opened an issue on the repository to converge on a threat model:\n> > https://github.com/ClaraShk/LNJamming/pull/13\n> >\n> > I still think building data gathering infrastructure for Lightning is\n> valuable as ultimately any jamming mitigation will have to adapt its\n> upfront fees or reputation acquisition cost in function of HTLC traffic and\n> market forces.\n> >\n> > Looking forward to giving an update on Staking Credentials [0], an\n> end-to-end approach to mitigate channel jamming.\n> >\n> > Best,\n> > Antoine\n> >\n> > [0]\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2022-November/003754.html\n> >\n> > Le dim. 30 avr. 2023 \u00e0 03:57, Carla Kirk-Cohen <kirkcohenc at gmail.com> a\n> \u00e9crit :\n> >>\n> >> Hi list,\n> >>\n> >> Some updates on channel jamming!\n> >>\n> >> # Next Call\n> >> - Monday 01 May @ 15:00 UTC\n> >> - https://meet.jit.si/UnjammingLN\n> >> - Agenda: https://github.com/ClaraShk/LNJamming/issues/12\n> >>\n> >> # Data Gathering\n> >> During these weekly calls, we've come to agreement that we would like\n> >> to gather data about the use of HTLC endorsement and local reputation\n> >> tracking for jamming mitigation. A reminder of the full scheme is\n> >> included at the end of this email, and covered more verbosely in [1].\n> >>\n> >> We have a few goals in mind:\n> >> - Observe the effect of endorsement in the steady state with\n> >>   logging-only implementation.\n> >> - Gather real-world data for use in future simulation work.\n> >> - Experiment with different algorithms for tracking local reputation.\n> >>\n> >> The minimal changes required to add HTLC endorsement are outlined in\n> [2].\n> >> Our suggestion is to start simple with a binary endorsement field. As\n> >> we learn more, we will be better equipped to understand whether a\n> >> more expressive value is required.\n> >>\n> >> With this infrastructure in place, we can start to experiment with\n> >> various local reputation schemes and data gathering, possibly even\n> >> externally to LN implementations in projects like circuitbreaker [3].\n> >> We'd be interested to hear whether there's any appetite to deploy using\n> >> an experimental TLV value?\n> >>\n> >> # Reputation Scheme\n> >> - Each node locally tracks the reputation of its direct neighbors.\n> >> - Each node allocates, per its risk tolerance:\n> >>   - A number of slots reserved for endorsed HTLCs from high reputation\n> >>     peers.\n> >>   - A portion of liquidity reserved for endorsed HTLCs from high\n> >>     reputation peers.\n> >> - Forwarding of HTLCs:\n> >>   - If a HTLC is endorsed by a high reputation peer, it is forwarded\n> >>     as usual with endorsed = 1.\n> >>   - Otherwise, it is forwarded with endorsed = 0 if there are slots and\n> >>     liquidity available for unknown HTLCs.\n> >>\n> >> Endorsement and reputation are proposed as the first step in a two part\n> >> scheme for mitigating channel jamming:\n> >> - Reputation for slow jams which are easily detected as misbehavior.\n> >> - Unconditional fees for quick jams that are difficult to detect, as\n> >>   they can always fall under a target threshold.\n> >>\n> >> Looking forward to discussing further in the upcoming call!\n> >>\n> >> Best,\n> >> Carla and Clara\n> >>\n> >> [1] https://gist.github.com/carlaKC/be820bb638624253f3ae7b39dbd0e343\n> >> [2] https://github.com/lightning/bolts/pull/1071\n> >> [3] https://github.com/lightningequipment/circuitbreaker\n> >> _______________________________________________\n> >> Lightning-dev mailing list\n> >> Lightning-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> >\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230516/90159528/attachment.html>"
            },
            {
                "author": "Vincenzo Palazzo",
                "date": "2023-05-17T03:13:58",
                "message_text_only": "> Re [3]\n> > I think with some implementation like cln we can write an extension\n> > an deploy  in some nodes, I need to go deeper into it but I can help\n> > with this. But I would love to discuss how I can help with some\n> > implementation details.\n>\n> An experimental data gathering mechanism for CLN would be great! Seems\n> like lnmetrics would be a good home for it - I\u2019ll follow up with you\n> when we start working on data collection.\n\nI am also planning to make a ML post regarding lnmetrics, but I \nwill happy to talk more about the data that we need to get some useful\ndata from the network.\n\nCheers.\n\nVincent."
            },
            {
                "author": "Christian Decker",
                "date": "2023-05-20T11:28:14",
                "message_text_only": "> > I'd be very interested in how many repeat interactions nodes get from\n> individual senders, since that also tells us how much use we can get\n> out of local-only reputation based systems, and I wouldn't be\n> surprised if, for large routing nodes, we have sufficient data for\n> them to make an informed decision, while the edges may be more\n> vulnerable, but they'd also be used by way fewer senders, and the\n> impact of an attack would also be proportionally smaller.\n>\n> I\u2019m unclear on what you mean by \u201cindividual senders\u201d here? In our\n> scheme, nodes only track local reputation for their direct peers so\n> what matters is their history with all HTLCs a peer has forwarded to\n> them (not whether they come from repeat senders).\n\nApologies, upon rethinking this I realized I had been mixing two different\nproposals in my mind. The criticism of sender-based reputation does\nnot apply if all we do is track our immediate neighbors. Sorry for the\nconfusion.\n\n> It\u2019s true that nodes that forward fewer HTLCs are less likely to be\n> able to build a good reputation with very active routing nodes. In the\n> regular operation of the network, this should have low to no impact on\n> their activity - they don\u2019t require much from their peers anyway.\n> During an attack, small and low activity nodes will temporarily be in\n> competition for large routing nodes\u2019 scarce liquidity and slots, but\n> will still be able to interact with similar nodes where they have\n> better chances of building a good reputation.\n\nThat matches my own interpretation very well, thanks.\n\nCheers,\nChristian"
            },
            {
                "author": "Vincenzo Palazzo",
                "date": "2023-05-11T07:15:12",
                "message_text_only": "Hi all,\n\n> Some updates on channel jamming!\n>\n> # Next Call\n> - Monday 01 May @ 15:00 UTC\n> - https://meet.jit.si/UnjammingLN\n> - Agenda: https://github.com/ClaraShk/LNJamming/issues/12\n>\n> # Data Gathering\n> During these weekly calls, we've come to agreement that we would like\n> to gather data about the use of HTLC endorsement and local reputation\n> tracking for jamming mitigation. A reminder of the full scheme is\n> included at the end of this email, and covered more verbosely in [1].\n>\n> We have a few goals in mind:\n> - Observe the effect of endorsement in the steady state with\n>   logging-only implementation.\n> - Gather real-world data for use in future simulation work.\n\nThere is anything that I can do to help here with lnmetrics tools?\nWith some guidance (because i lost the track of the situation here) I\ncan be able to deploy a metrics collector in production by the end of\nMay.\n\n> - Experiment with different algorithms for tracking local reputation.\n>\n> The minimal changes required to add HTLC endorsement are outlined in [2].\n> Our suggestion is to start simple with a binary endorsement field. As\n> we learn more, we will be better equipped to understand whether a\n> more expressive value is required.\n>\n\n> We'd be interested to hear whether there's any appetite to deploy using\n> an experimental TLV value?\n>\n> # Reputation Scheme\n> - Each node locally tracks the reputation of its direct neighbors.\n> - Each node allocates, per its risk tolerance:\n>   - A number of slots reserved for endorsed HTLCs from high reputation\n>     peers.\n>   - A portion of liquidity reserved for endorsed HTLCs from high\n>     reputation peers.\n> - Forwarding of HTLCs:\n>   - If a HTLC is endorsed by a high reputation peer, it is forwarded\n>     as usual with endorsed = 1.\n>   - Otherwise, it is forwarded with endorsed = 0 if there are slots and\n>     liquidity available for unknown HTLCs.\n>\n> Endorsement and reputation are proposed as the first step in a two part\n> scheme for mitigating channel jamming:\n> - Reputation for slow jams which are easily detected as misbehavior.\n> - Unconditional fees for quick jams that are difficult to detect, as\n>   they can always fall under a target threshold.\n\nWhy not? I think this deserve a round on the real network also because\nit is hard to simulat the real network imho, and I think\nwith some implementation like cln we can write an extention an deploy \nit in some nodes, I need to go deeper into it but I can help with this.\n\n> Looking forward to discussing further in the upcoming call!\n\nUnfortunatlly I ran out of routing here :) but I would love to discuss\nhow I can help with some implementation details.\n\nThanks to update in a very compact way what it is going on in the\nJamming mitigating meetins, it is helping a lot.\n\nCheers!\n\nVincent."
            }
        ],
        "thread_summary": {
            "title": "HTLC Endorsement for Jamming Mitigation",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Antoine Riard",
                "Vincenzo Palazzo",
                "Michael Folkson",
                "Carla Kirk-Cohen",
                "Christian Decker",
                "Clara Shikhelman"
            ],
            "messages_count": 14,
            "total_messages_chars_count": 55227
        }
    },
    {
        "title": "[Lightning-dev] [Proposal][Payment Route Reservation] PTLC/HTLC with Reusable Static Invoices",
        "thread_messages": [
            {
                "author": "g0b1el",
                "date": "2023-05-09T12:12:18",
                "message_text_only": "Proposal Summary\n================\n\nThe following proposal is intended to adapt the existing PTLC protocol into Payment Route Reservation[1] flow. Modifying the original PTLC protocol slightly, we get support for reusable static invoices with atomic proof of payment and payer proofs, that don't require previous communications between sender and receiver. By doing so, we will also reduce the number of cryptographic calculations the sender needs to perform for each PTCL payment. Then a similar approach is also applied to HTLC, with the same benefits.\n\nTo best understand the proposal, let's first start by presenting the original PTLC protocol and then proceed to describe the iterative changes made to it.\n\nPTLC protocol\n=============\n\nLet's use Alice, Bob, Carol, and Dave example from this page: https://github.com/BlockstreamResearch/scriptless-scripts/blob/master/md/multi-hop-locks.md\n\n        Z  <--------------------------------------------------------------------- Z = z*G\n\n      Alice  --------------->   Bob  --------------->  Carol  ------------------> Dave\n        |                        |                       |                         |\n        y0                       y1                      y2                        z\n              tab=z+y0                tbc=z+y0+y1                tcd=z+y0+y1+y2\n             Tab=Z+y0*G             Tbc=Z+y0*G+y1*G            Tcd=Z+y0*G+y1*G+y2*G         \n\n * y0, y1, y2 - decorrelation secrets\n * z - proof of payment\n * tij - adaptor secret for the adaptor point between nodes i and j\n * Tij = tij*G adaptor lock point between nodes i and j\n * sig(m,Tij) := psig(i,m,Tij) + psig(j,m,Tij) + tij - is the complete Schnorr signature for the transaction between i and j.\n\n\nA brief summary of the PTLC protocol:\n\n1. The receiver, Dave, shares proof of payment point Z(=z*G) with the sender, Alice. This is typically done by publishing a QR code.\n2. Alice generates random decorrelation secrets (y0, y1, y2). \n3. For each hop in the route, Alice calculates a tuple (Li,yi,Ri) using the formula:\n\n     Ri <- Li + yi*G and Lj <- Ri.\n\n * Li -  left adaptor point \n * Ri - right adaptor point\n * yi - decorrelation secret \n\n4. Alice generates a payment onion that includes the previously calculated lock information for each hop on the route. For Dave, Alice includes (y0+y1+y2) decorrelation secret sum(we ignore stuckless payment for now).\n5. Forwarding nodes use the lock information to construct a partial 2-of-2 MuSig2 signature.\n6. When Dave signs the transaction with Carol, he reveals the adaptor secret `tcd` to Carol.   \n7. Carol then calculates adaptor `tbc` secret using the formula `tbc = tcd - y2`, which allows her to sign the transaction with Bob.\n8. Bob calculates the adaptor secret `tab` using the similar formula `tab = tbc - y1`.\n9. Eventually, when Bob signs his transactions with Alice, Alice can calculate the proof of payment `z = tab - y0`.\n\nNote that Alice does a lot of work here, especially in step 3, which requires a lot of elliptic curve additions and multiplications. This workload increases with the length of the route, resulting in more work for the sender. While this is not typically problematic, it can become an issue if the sender is a mobile wallet with limited computational resources.\n\n\nPTLC with reusable static invoices\n==================================\n\nWe gonna make two modifications to the vanilla PTLC flow:\n\n1) To alleviate Alice of heavy elliptic curve calculations, we will let routing nodes calculate their decorations secrets and adaptor points independently. But in such a way that the sender (Alice) and routing nodes get to the same shared decorrelation secret. This can be easily done because sphinx onion routing already establishes one shared secret with each hop, from which we can calculate as much as new shared secrets as we want.\nFor instance, we can use this formula:\n\n  yi = hmac(\"decorrelation secret\", sharedSecret(i))\n\n2) The second change we gonna make is how the tuple (Li,yi,Ri) is calculated for each hop. \nCurrently is made using this formula:\n\n  Ri <- Li + yi*G,  Lj <- Ri.\n\nand we gonna change it into:\n\n  Ri + yi*G <- Li and Lj <- Ri.\n\n\nAfter applying this formula to the previous example, we get the following:\n\n\n      Alice  --------------->   Bob  --------------->  Carol  ---------------->  Dave\n        |                        |                       |                         |\n                                 y1                      y2                      y3, z\n           tab=(z+y1+y2+y3)            tbc=(z+y2+y3)               tcd=(z+y3)\n\n\nDuring the PTLC resolve phase, everything remains the same, with the exception that intermediate hops will now add their decorrelation secrets instead of subtracting them:\n\n  tbc = tcd + y2\n  tab = tbc + y1.\n\nIn addition, Alice calculates the proof of payment (z) slightly differently:\n\n  z = tab - (y1 + y2 + y3)  // tab will get when bob signs the transactionAB, (y1, y2 and y3) she has already calculated using shared secrets.\n\n\nWe will now apply the new PTLC protocol to the Payment Route Reservation flow[1]:\n\n\n        add_res(amount,onion,...)      add_res(amount,onion,...)        add_res(amount,onion,...)\n    Alice -----------------------> Bob  -----------------------> Carol  ------------------------> Dave\n      |                             |                              |                               |\n      |                             y1                             y2                            y3, z\n      |                             |                              |                               |\n      |  res_succes(Z+Y3+Y2+Y1,...) |       res_succes(Z+Y3+Y2,...)|      res_succes(Z+Y3,...)     |\n      | <--------------------------    <---------------------------   <----------------------------|  \n      <---------------------------------------- Z -------------------------------------------------|\nZ+(y1+y2+y3)*G =? Tab\n      |                                                                                            |\n      |      sign_commitment              sign_commitment                 sign_commitment          |\n      |       revoke_and_ack               revoke_and_ack                  revoke_and_ack          |\n      | <-------------------------> | <-------------------------> | <----------------------------->|\n\n\nDuring `res_success` call, each intermediate hop gets to the expected upstream and downstream adaptor lock point, thereby obtaining all the necessary information to proceed to the commitment phase.\n\nWith just this change, PTLC protocol would NOT be safe. Bob can send Alice a lock point for which he is the one with knowledge of the secret. To prevent this, Dave needs to \"send\" Z point to Alice. However, Dave cannot include Z as part of the res_success response because the same Z would appear on every node, reintroducing payment correlation. The proposal on how the sender and receiver can exchange messages is left for another proposal because this got too big. This action will be denoted just as \"send\" in this proposal.\n\nThere are two benefits of doing PTLC this way:\n\n 1) Smaller hop onion and less work to be done by the sender. Alice has delegated all the heavy curve multiplications work to the routing nodes. Alice still has to calculate shared decorations secrets(simple hashing operation) and do one curve multiplications (y1+y2+y3)*G. As a result, this protocol should have an overall positive impact on mobile clients.\n 2) The biggest improvement is how Alice gets to proof of payment point Z. Now, new unique proof of payment z can be generated with every payment reservation. As a result, we can generate a single static invoice that can be paid simultaneously by multiple parties multiple times without any previous communication between the sender and receiver.\n\n\nPTLC with reusable static invoices and stuckless payments[2]\n============================================================\n\nNote that the adaptor lock between Carol and Dave is built solely by Dave. This means stuckless payments would not work in such a PTLC protocol. We can already think of reservations as a weaker form of stuckless payment. When Dave sends `resservation_success` it can be seen as `ACK`(from the original stuckless payment proposal), and when Alice signs and revokes commitment with the first hop(Bob) it can be seen as `key` send. But there is still a chance for payment to get stuck during `sign_commitment` phase.\n\nIf we want to add support for stuckless payments, or if we want to increase the safety of the new PTLC protocol, we can create a third PTLC protocol by combining the previous two.\n\nEach hop will now generate two decorrelation secrets, `fi` and `bi`:\n\n  fi = hmac(\"forward decorrelation secret\", sharedSecret(i))   - used during add_reservation\n  bi = hmac(\"backward decorrelation secret\", sharedSecret(i))  - used during res_success\n\nLock adaptor points are now calculated using this formula:\n\nRi + bi*G <- Li + fi*G,  Lj <- Ri.\n\n\n         add_res(amount,F0,onion,...)      add_res(amount,F0+F1,onion,...)     add_res(amount,F0+F1+F2,onion,...)  \n    Alice ---------------------------> Bob  --------------------------> Carol  ----------------------------------> Dave\n      |                                 |                                 |                                      |\n      f0                              f1,b1                             f2,b2                                 f3,b3,z\n      |                                 |                                 |                                      |\n      |  res_succes(Z+B3+B2+B1,...)     |       res_succes(Z+B3+B2,...)   |      res_succes(Z+B3,...)            |\n      | <-----------------------------    <------------------------------   <------------------------------------|\n      |     Tab=(F0)+(Z+B3+B2+B1)               Tbc=(F0+F1)+(Z+B3+B2)             Tcd=(F0+F1+F2)+(Z+B3)          | \n      |<------------------------------------------- Z -----------------------------------------------------------|\n Z+(f0+b1+b2+b3)*G =? Tab \n\n\nAlice will pass (f0+f1+f2)*G point inside the onion to Dave as a precautionary measure, just to make sure routing nodes don't do anything out of order. Dave will check if `add_res` call from Carol contains the expected forward decorrelation point sum. \n\nDuring the PTLC resolve phase, routing nodes would calculate the upstream lock secret by subtracting fi and adding bi:\n\nli = ri - fi + bi\n\nAlice will calculate proof of payment z, using this formula:\n\nz = tab - (y1 + y2 + y3) - (f0)\n\nThis PTLC protocol now supports both reusable static invoices and stuckless payments.\n\n\nPTLC with atomic Proof of Payment and Payer Proof\n=================================================\n\nThe issue with the above construct is that proof of payment is known by Alice and Dave. Dave can give z, for instance, to Oscar, and if Alice comes for a refund, Dave can say that she wasn't the one that paid. Dave now can claim it was Oscar because Oscar knows proof of payment as well.\n\nTo fix this, we will borrow the idea of a `payer` key from bolt12[3] and pay for the signature[4] proposals. Alice will generate a unique `payer` secret, and then pass `payer_id`(=payer*G) point to Dave as part of the onion. This time Dave will not generate proof of payment z randomly but calculates z as Schnor's signature of the message.\n\n z = r + h(m|R)*d    \n \n  d - Dave's private key\n  r - random secret, R = r*G\n  m - the message. \n\nThe signature message can be \"`payer_id` send Dave `amount` satoshis\", or it can be a hash of a Merkle Tree as described in Bolt12[3]. To avoid passing the message between the payer and the sender, the message format should be defined on the protocol level. Alice can use this `payer` secret later to sign some message to prove she is the payer. \n\nAs described above, Alice will find out Z(=z*G) when `res_success` reaches her node. But she still can't validate that this public key commits to the signature of the message \"`payer_id` send Dave `amount` satoshis\", because she doesn't know R. To fix this Dave will \"send\" R instead Z to Alice. There is no need to send Z anymore because Z can be calculated.\n\nAssuming the payment reservation was successful, and Dave has \"send\" R to Alice, Alice can now validate:\n\n Z =? R + h(m|R)D, where Z = Tab-(f0+b1+b2+b3)*G.\n  \n  * D - Dave's public key\n\nIf the equation holds, Alice can safely sign and revoke commitment with first hop Bob(and then \"send\" the stuckless key in case of stuckless payments to Dave), knowing she'll get both proofs if the receiver accepts the payment by revealing z secret.\n\nAtomic Multipath Payments\n-------------------------\nEverything remains the same as in the original PTLC proposal.\n\n\nHTLC with reusable static invoices with payment and payer proof \n===============================================================\n\nA similar procedure can be implemented for HTLC payments. Now `add_res` will not contain the payment hash. Payment hash H will be generated by the receiver(Dave) upon `add_reservaion` call and sent back to the sender and forwarding nodes as part of `res_success` response. Dave will also need to \"send\" the payment hash to Alice, to make sure routing nodes don't replace the payment hash with their hash value.\n\n\n         add_res(amount,onion,...)      add_res(amount,onion,...)      add_res(amount,onion,...)\n    Alice -----------------------> Bob  -----------------------> Carol  --------------------> Dave\n      |                             |                              |                            |\n      |                             |                              |                            |\n      |  res_succes(H,...) |        |         res_succes(H,...)|   |         res_succes(H,...)  |\n      | <--------------------------    <---------------------------   <-------------------------|  \n      <-------------------------------------- H,z,R --------------------------------------------|\n\nThis construction gives us support for reusable invoices with atomic proof of payment. For payer proof, Alice sends `payer_id` in the onion, and Dave can \"send\" back a signed proof message (z, R), where a message can be \"`payer_id` paid Dave `amount` satoshis only if `payer_id` knows primage of `H`. This way, we effectively link the atomic proof of payment with the payer proof in a cryptographically secure manner.\n\nAs it is currently, stuckles payments are not possible with HTLC unless a second hash is added into HTLC.\n\n\nDifferent Types of Payments\n===========================\n\nUsing the new PTLC/HTLC protocol, we can do a quick sketch of how different payment types will work. Here we will cover some basic use cases, though there may be many more:\n\n1. Donations/Transfer/Key send/Spontaneous Payments/AMP...\n-----------------------------------------------------------\n\nThere are multiple names for this payment type in circulation, such as donations, transfers, spontaneous payments, key sends, AMP, etc. \nAn example would be Alice wants to donate or transfer a certain amount of BTC to Dave. Alice also wants to receive proof of payment and payer proof. \n\nDave will share his `node_id` public key, either by publishing a static QR or plain text invoice. Dave can post some additional information in the invoice, but the only mandatory element is his public key. Alice scans the QR code and finds Dave's public key, picks the amount, and makes the payment. Payment proceeds as described above for PTLC/HTLC payments.\n\nSide note for wallet developers, payer proof, might be undesirable for some donations. For instance, if we want to donate to Wikileaks, and our government is not a fan of Wikileaks, the last thing we want to have incriminating cryptographic proof saying we \"paid x amount to Wikileaks\". If payer proof is undesirable, the sender can omit `payer_id`, and the receiver will generate proof z randomly. Alternatively, the payer wallet can generate a random `payer_id` point. In either case, the donation transaction shouldn't appear in the payment history. \n\n2. Purchases denominated in BTC\n--------------------------------\n\n1) One static invoice per article\n  \nAn example would be a vending machine. Each article in the vending machine would have a small static QR code invoice next to it. The payer scans the invoice and then picks the quantity on his phone. If the vending machine supports multi-article purchases, the payer repeats this process for each article. Upon completion, click \"send\" to pay for the entire cart. If the payment succeeds, the vending machine dispenses the selected articles through a slot. \n\nThe mandatory fields in each static invoice are now `node_id`, `article_id`, and `price`. QR invoices can contain additional information like article name, article picture, etc..., which can be presented to the user on his mobile wallet.\nThe payment flow is similar to donations, with the exception that the buyer must provide additional information to the vending machine LN node so that the sender and receiver nodes can calculate the same proof message. The sender generates a new unique 'shopping_id` and includes this id with an array of tuples (`article_id`, `count`) as shopping information for Dave. Note that in this case maximum size of the article list is limited by the unused payment onion space. For very large purchases wallet can split the shopping cart into multiple sub-carts with different payments. Receiver Dave will now check that a payment amount matches the article price sum. The signed proof of payment message now has to contain `payer_id`, `shopping_id`, and a list of tuples (`article_id`, `count`, `price_per_article`).\n\nGiven the volatility of BTC prices, the article price on a static invoice may require frequent updates by vending machine operators. Even if prices are denominated in fiat currency, these invoices would require periodic updates. To address this issue, we can remove the article price from the invoice.\nWhen the user scans the first article in the vending machine, the wallet informs the user that they need to retrieve the articles' prices to proceed.\nThis can be implemented as a new service, or a vending machine LN could be configured to \"send\" prices. Once the user receives the pricing information, the user can proceed with the purchase as before. This way, vending machine merchants would be able to update all article prices on their vending machines dynamically.\n\nLightning-based vending machines would be more cost-effective as they will not require a front-facing LCD, touch screen, or physical buttons. Furthermore, multiple customers would be able to make purchases simultaneously, though a single dispensing slot might result in conflicts about who bought which item. To address this issue, the vending machine could serialize item dispensing by delaying the dispensing of new shopping carts until the previous one is collected.\n\n2) One dynamic invoice per shopping cart\n\nAn example would be web shopping. The user adds articles one by one into the shopping cart, clicks checkout, and then sends the payment for the whole cart. \n\nShopping chart invoices are dynamically created after each checkout and will contain information like a `shopping_id`, and an array of tuples (`article_id`, `count`, `price_per_article`). The payment flow is similar to single article purchases, except we are now sending just `payer_id` and `shopping_id` to the merchant node. We assume the merchant LN node can contact some other merchant service to get hashed signature message using `shopping_id`. The signed proof of payment message needs to contain `payer_id`, `shopping_id`, and a list of tuples (`article_id`, `count`, `price_per_article`). A merchant service will check if payment for this `shopping_id` hasn't been paid yet and if the payment amount corresponds to the whole cart amount. \n\nVery large shopping carts might not fit into QR code invoices, which are limited in size. Also, larger QR code phones with weaker cameras could have difficulties scanning the code. This is an issue because the customer's wallet needs a whole shopping cart so he can validate that payer proof includes every item bought. For situations like this, merchants' QR can contain a link to the API call, which will return the whole shopping cart. Or the whole shopping chart can be \"send\" later during the settlement phase before the stuckless key is sent to the receiver. \n\n3. Purchases denominated in fiat\n--------------------------------\n\nPurchases denominated in fiat can be seen as extensions of Purchases denominated in BTC, with potentially one more additional step. \n\nInvoice now contains amounts denominated in some of the fiat currencies. Upon scanning the QR invoice, the sender will first convert the fiat amount into the BTC amount. The sender's wallet needs to track the BTC price, which most wallets already do today. Then the sender makes a payment as it is denominated in BTC using the converted amount. Onion information for the receiver should also contain the `original amount` and `original fiat currency`. Receiver checks if the reservation amount is greater or equal to his expected conversion amount. If it is, everything continues as before. The signed proof of payment message should now include `original amount`, `original currency`, and `BTC amount`.\n\nIf the amount is less than what the receiver expected, the receiver will accept payment reservation, but will also \"send\" a message to a sender with information about BTC missing amount for payment. The sender can decide if the receiver conversion is fair. If it is not, the sender can cancel the payment reservation. If additional payment is acceptable, the sender will create a new route with a missing amount. Unless the Bitcoin price drops significantly in the meantime, the receiver will accept a new reservation route, and payment will continue as before, but this time over one additional payment route.\n\n4. Refund/ Partial Refund\n-------------------------\n\nLeft out of this proposal, as refund requires additional constructs from Randevouz routing. \n\n\nConclusion\n==========\n\nThis proposal extends the payment route reservation protocol, enabling the dynamic agreement of not only route fees, prepayment fees, and cltv deltas but also proof of payment and payer proof between the sender and receiver. Compared to Bolt12 offers proposal, there is no need for an additional round trip between sender and receiver to fetch the invoice, resulting in lower latency.\n\n\nBest Regards,\ng0b1el\n\n\n[1] Payment Route Reservation: \n      Original proposal - https://lists.linuxfoundation.org/pipermail/lightning-dev/2023-February/003867.html\n      Updated version - https://github.com/g0b1el/ln-design/blob/main/Payment%20Route%20Reservation.md\n[2] Stuckless Payments - https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-June/002029.html\n[3] Bolt12 - https://github.com/rustyrussell/lightning-rfc/blob/guilt/offers/12-offer-encoding.md\n[4] Selling Signatures - https://lists.linuxfoundation.org/pipermail/lightning-dev/2019-July/002077.html"
            }
        ],
        "thread_summary": {
            "title": "PTLC/HTLC with Reusable Static Invoices",
            "categories": [
                "Lightning-dev",
                "Proposal",
                "Payment Route Reservation"
            ],
            "authors": [
                "g0b1el"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 23074
        }
    },
    {
        "title": "[Lightning-dev] Fixing a griefing attack on JIT Channels using PTLCs",
        "thread_messages": [
            {
                "author": "Ben Carman",
                "date": "2023-05-09T19:07:09",
                "message_text_only": "Hi everyone,\n\nI was chatting with Tony Giorgio the other day and he made me aware of a potential griefing attack that is possible today on LSPs that provide Just-In-Time channels.\n\nThe attack is very simple, when the LSP receives the payment and then opens a 0-conf channel to the client, the client could not claim the payment thus resulting in the LSP not getting paid and the client getting a free inbound lightning channel. The LSP could double spend the transaction but they still would lose the miner fees and as we are seeing today, that can be very expensive.\n\nI am not sure if this has been proposed before but we can fix this with PTLCs!\n\nInstead of having the LSP just broadcasting the funding transaction to the mempool, they can sign the funding transaction using adaptor signatures locked to the same secret as the invoice. Then when the client wants to claim the funds they can get the funding txid from the LSP, and then do the PTLC dance with the LSP based on using that funding transaction. If it all goes as planned the LSP can give the funding transaction signed using adaptor sigs to the client and the client can then decrypt the signatures and broadcast the transaction. Then the LSP can find the transaction in the mempool and extract the secret they need to claim the payment, thus making claiming the payment and opening the channel atomic so the client can't grief the LSP.\n\nNot sure if this has been talked about before, if not I think we can throw it in the ever-growing pile of \"PTLCs fixes this\".\n\nBest,\nbenthecarman\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230509/c7926ee7/attachment.html>"
            },
            {
                "author": "SomberNight",
                "date": "2023-05-09T21:10:18",
                "message_text_only": "Hi benthecarman,\n\n> the LSP can give the funding transaction signed using adaptor sigs to the client and the client can then decrypt the signatures and broadcast the transaction. Then the LSP can find the transaction in the mempool and extract the secret they need to claim the payment\n\nWhat if, after the client has the funding transaction locally, it waits for the PTLC held by the LSP to time out, i.e. days, and then (the client) broadcasts the funding transaction? The LSP could then no longer claim the PTLC, and it would have paid for the channel-open.\n\nTo prevent this, the LSP would have to actively double-spend the channel funding tx given to the client when the PTLC is close to expiring, and only after getting the conflict mined can the PTLC be failed. This double-spending would cost mining fees of course (arguably the ~same amount as not doing anything and just letting the channel open). Although perhaps the LSP has enough users and high enough traffic that the conflicting tx itself can be something useful, e.g. another channel-open to another user.\n\nghost43 / SomberNight\n\n\n------- Original Message -------\nOn Tuesday, May 9th, 2023 at 19:07, Ben Carman <benthecarman at live.com> wrote:\n\n\n> Hi everyone,\n> \n> I was chatting with Tony Giorgio the other\u00a0day and he made me aware of a potential griefing attack that is possible today on LSPs that provide Just-In-Time channels.\n> \n> The attack is very simple, when the LSP receives the payment and then opens a 0-conf channel to the client, the client could not claim the payment thus resulting in the LSP not getting paid and the client getting a free inbound lightning channel. The LSP could double spend the transaction but they still would lose the miner fees and as we are seeing today, that can be very expensive.\n> \n> I am not sure if this has been proposed before but we can fix this with PTLCs!\n> \n> Instead of having the LSP just broadcasting the funding transaction to the mempool, they can sign the funding transaction using adaptor signatures locked to the same secret as the invoice. Then when the client wants to claim the funds they can get the funding txid from the LSP, and then do the PTLC dance with the LSP based on using that funding transaction. If it all goes as planned the LSP can give the funding transaction signed using adaptor sigs to the client and the client can then decrypt the signatures and broadcast the transaction. Then the LSP can find the transaction in the mempool and extract the secret they need to claim the payment, thus making claiming the payment and opening the channel atomic so the client can't grief the LSP.\n> \n> Not sure if this has been talked about before, if not I think we can throw it in the ever-growing pile of \"PTLCs fixes this\".\n> \n> Best,\n> benthecarman"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2023-05-10T00:00:27",
                "message_text_only": "Good morning benthecarman and SomberNight,\n\nAs noted by SomberNight, PTLCs does not quite fix this, as the client can still wait out the inbound PTLC of the LSP and force the LSP to perform an onchain action to ensure it does not give a channel for free.\n\nAnother wrinkle here is that the LSP can attempt to coordinate with a miner (via e.g. full-RBF) to double-spend the funding transaction after the client has broadcasted the signed funding transaction on the mempool (i.e. lets the LSP learn the scalar that unlocks the inbound HTLC).\nAssuming the LSP uses one large UTXO to fund a smaller channel, the funding transaction has one input, two outputs.\nThe clawback transaction (spending the same UTXO but returning it back to the LSP control) that the LSP coordinates with a miner would be one input, one output, thus having a size advantage.\nAs the funding transaction pays some fixed fee --- whose value presumably is paid for in the JIT channel open via the inbound PTLC that arrives at the LSP --- the clawback transaction can pay the exact same fixed fee, but being smaller by one output, has a better feerate and thus a miner would prefer it.\n\nEither client or the LSP has to move first.\nThe only way they can assure that the other will actually do what they promised is if there is some arbiter who can ensure that the second mover actually performs their move.\nThe default arbiter is the blockchain layer itself, but 0-conf just wants to avoid the blockchain layer for being too slow.\n\nRegards,\nZmnSCPxj\n\nSent with Proton Mail secure email.\n\n------- Original Message -------\nOn Tuesday, May 9th, 2023 at 9:10 PM, SomberNight via Lightning-dev <lightning-dev at lists.linuxfoundation.org> wrote:\n\n\n> Hi benthecarman,\n> \n> > the LSP can give the funding transaction signed using adaptor sigs to the client and the client can then decrypt the signatures and broadcast the transaction. Then the LSP can find the transaction in the mempool and extract the secret they need to claim the payment\n> \n> \n> What if, after the client has the funding transaction locally, it waits for the PTLC held by the LSP to time out, i.e. days, and then (the client) broadcasts the funding transaction? The LSP could then no longer claim the PTLC, and it would have paid for the channel-open.\n> \n> To prevent this, the LSP would have to actively double-spend the channel funding tx given to the client when the PTLC is close to expiring, and only after getting the conflict mined can the PTLC be failed. This double-spending would cost mining fees of course (arguably the ~same amount as not doing anything and just letting the channel open). Although perhaps the LSP has enough users and high enough traffic that the conflicting tx itself can be something useful, e.g. another channel-open to another user.\n> \n> ghost43 / SomberNight\n> \n> \n> ------- Original Message -------\n> On Tuesday, May 9th, 2023 at 19:07, Ben Carman benthecarman at live.com wrote:\n> \n> \n> \n> > Hi everyone,\n> > \n> > I was chatting with Tony Giorgio the other day and he made me aware of a potential griefing attack that is possible today on LSPs that provide Just-In-Time channels.\n> > \n> > The attack is very simple, when the LSP receives the payment and then opens a 0-conf channel to the client, the client could not claim the payment thus resulting in the LSP not getting paid and the client getting a free inbound lightning channel. The LSP could double spend the transaction but they still would lose the miner fees and as we are seeing today, that can be very expensive.\n> > \n> > I am not sure if this has been proposed before but we can fix this with PTLCs!\n> > \n> > Instead of having the LSP just broadcasting the funding transaction to the mempool, they can sign the funding transaction using adaptor signatures locked to the same secret as the invoice. Then when the client wants to claim the funds they can get the funding txid from the LSP, and then do the PTLC dance with the LSP based on using that funding transaction. If it all goes as planned the LSP can give the funding transaction signed using adaptor sigs to the client and the client can then decrypt the signatures and broadcast the transaction. Then the LSP can find the transaction in the mempool and extract the secret they need to claim the payment, thus making claiming the payment and opening the channel atomic so the client can't grief the LSP.\n> > \n> > Not sure if this has been talked about before, if not I think we can throw it in the ever-growing pile of \"PTLCs fixes this\".\n> > \n> > Best,\n> > benthecarman\n> \n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2023-05-10T12:52:56",
                "message_text_only": "Good morning mailing list, et al.,\n\nLet me explain the various possible mitigations and their drawbacks.\n\nMany of these are either \"LSP trusts client\" or \"client trusts LSP\", in the sense that it is possible for the second mover (client in \"LSP trusts client\"; LSP in \"client trusts LSP\") to impose costs on, or outright steal from, the first mover.\n\nIf you want a trust-minimized solution, you need some kind of third party that both LSP and client agree will actually enforce that the second mover does not cheat or otherwise impose costs on the first mover.\nThis \"third party\" SHOULD really be the blockchain, meaning you should really be using at least 1-conf and probably 3-conf to avoid reorgs, but *shrug*.\n(You *could* use Liquid as a third party --- but Liquid is custodial, it just has a federation as a custodian instead of a single entity, you have to trust that the federation does not collude to steal all your funds, or that Blockstream has not installed Something Else (TM) in the HSMs they sold to the federation members.)\n\nWithout a trusted third party (with the blockchain, being a decentralized open-source project with strong incentives against censorship, being your standard for trustworthiness), your choices are:\n\n* LSP issues a promise --- a signature committing to a funding output on a funding transaction --- that it will definitely make a 0-conf funding transaction get confirmed before some future target blockheight.\n  https://github.com/BitcoinAndLightningLayerSpecs/lsp/pull/24\n  If the funding transaction is not confirmed by then, or the output is not the correct `scriptPubKey` and amount, the client reports it publicly and starts a boycott of the LSP.\n  * The client refuses to send `channel_ready` (and therefore the HTLC cannot reach the client) until after the LSP issues this promise.\n    \"LSP trusts client\".\n  * How often have boycotts actually worked anyway?\n* Client waits for the funding transaction to appear on its local mempool before sending `channel_ready`.\n  * \"LSP trusts client\", somewhat, but far weaker than the above; you can argue this is actually \"client trusts LSP\" and I would agree with you.\n  * The LSP can still double-spend the funding transaction with coordination with a miner, as I noted in my critique of benthecarman proposal.\n    Mere broadcast is not an assurance of confirmation, we have been saying that about 0-conf for a long time.\n  * Not all clients naturally have access to a mempool --- BIP157/158 clients do not necessarily maintain their own mempool, though an Electrum SPV client can query the mempool of the Electrum server.\n* benthecarman proposal, as noted in previous post.\n  * \"client trusts LSP\".\n* LSP waits for the client to hand over the preimage before broadcasting the funding tx.\n  * \"client trusts LSP\".\n  * LSP can skip actual funding tx broadcast once the client has handed over the preimage.\n  * Can be implemented in multiple ways that are all equivalent:\n    * Outright give the preimage in some bespoke API call.\n    * LSP sends the `open_channel` blah blah dance until `channel_ready` exchange, does `update_add_htlc` and irrevocably committed dance, then waits until `update_fulfill_htlc` before broadcasting the funding tx.\n  * A client can implement the \"client waits for funding tx in its own mempool before preimage\" while the LSP implements this \"LSP waits for preimage before funding tx broadcast\", and both of them will stall waiting for each other LOL ^.^ wahahahahaha deadlock is fun.\n    This is why LSPS has to pick one or the other, otherwise we will get incompatibilities between LSPs and clients.\n\nLSPS (Open LSP Specifications group) participants have indicated a desire to prefer \"LSP trusts client\", because the LSP is a big target for various kinds of out-of-LSPS attacks.\nFor example, a hacker could potentially modify the behavior of an LSP so that the LSP attacks the client, if the \"client trusts LSP\" model is used.\nWorse, somebody can ***accuse*** the LSP of actually attacking *some* client, and it can be hard for the LSP to provide substantial evidence that it is NOT attacking the client.\n(This is why the \"promise\" scheme I listed first above is valuable --- it is definite proof that the LSP is not attacking the client, if the client is unable to provide the promise as a proof-of-misbehaviour, then the client is just bullshitting and its claim of being cheated can be ignored, assuming of course that people actually believe in the strong cryptographic provisions of the signature scheme (which I might add is the same signature scheme used to secure Bitcoin itself, so... but humans are stupid, which is why AI should replace humans with something better).\nBy the way have I mentioned I am human today?)\n\nHowever, the only truly \"LSP trusts client\" scheme that I have figured out is that first scheme where the LSP issues a cryptographically third-party-verifiable promise to get the funding tx confirmed by some later blockheight.\nThis scheme has been controversial even among LSPS participants, however.\n\n\n\nRegards,\nZmnSCPxj"
            }
        ],
        "thread_summary": {
            "title": "Fixing a griefing attack on JIT Channels using PTLCs",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "ZmnSCPxj",
                "SomberNight",
                "Ben Carman"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 14336
        }
    },
    {
        "title": "[Lightning-dev] Jamming call May 15th",
        "thread_messages": [
            {
                "author": "Clara Shikhelman",
                "date": "2023-05-11T20:41:48",
                "message_text_only": "Hi List,\n\n\nA reminder that we've got another jamming call coming up next week.\n\n\nMonday 15 May\n\n5 pm UTC\n\nhttps://meet.jit.si/UnjammingLN\n\n\nIn this meeting, we\u2019d like to discuss HTLC endorsement and local reputation\n[1]. We\u2019ve updated the draft spec PR with some details on what we think\nreputation tracking should look like, and would like to get some early\nfeedback.\n\n\nFeel free to add agenda items [2].\n\n\nSee you there,\n\nCarla and Clara\n\n\n[1] https://github.com/lightning/bolts/pull/1071\n\n[2] https://github.com/ClaraShk/LNJamming/issues/14\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230511/438ac3c1/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Jamming call May 15th",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Clara Shikhelman"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 728
        }
    },
    {
        "title": "[Lightning-dev] Release Announcement v23.05: Austin Texas Agreement(ATXA)",
        "thread_messages": [
            {
                "author": "Shahana Farooqui",
                "date": "2023-05-12T04:34:46",
                "message_text_only": "Hello Everyone,\n\nWe're pleased to announce the 23.05 release of Core Lightning, named by\n@instagibbs.\n\nFor a list of all changes, please see the changelog\n<https://github.com/ElementsProject/lightning/blob/v23.05/CHANGELOG.md>.\n\nHighlights for Users\n\n   - NEW `commando-blacklist` and `commando-listrunes` RPCs for\n   blacklisting and listing stored runes.\n   - NEW `feerates` added 2 new options as \"minimum\" and NN\"blocks\". Use\n   explicit block counts or slow/normal/urgent/minimum.\n   - `listclosedchannels` RPC to show old, dead channels.\n   - `reckless` added support for node.js plugin installation and for\n   networks beyond bitcoin and regtest.\n   - Spending unilateral close transactions now use dynamic fees based on\n   deadlines (and RBF), instead of fixed fees.\n   - More bug fixes and improved logging.\n\n\nHighlights for the Network\n\n   - Blinded payments are now supported by default.\n   - Now always double-check bitcoin addresses are correct (no memory\n   errors!) before issuing them.\n   - Allow slight overpaying, even with MPP, as spec now recommends.\n\n\nHighlights for Developers\n\n   - Removed `msat` suffix from all millisatoshi fields, as deprecated in\n   v0.12.0.\n   - PSBTv2 support; all APIs now support both v0 & v2.\n   - NEW methods `listpeerchannels`, `listclosedchannels`, `decode` and\n   `decodepay` from RPC to `grpc` mapping.\n   - Improvements on the  python gossmap implementation.\n   - The mTLS private keys are no longer group-readable.\n   - Added NEW command `makerune` in hsmtool to make a master rune for the\n   node.\n   - NEW `setpsbtversion` command to aid debugging and compatibility.\n   - `cln-rpc` anc `cln-grpc` can now work with a range of versions.\n\n\nSince 23.02.2, we've had 265 commits by 17 authors over 59 days.\n\nA special thanks to the 2 first time contributors:\n\nShahana Farooqui @ShahanaFarooqui\nAnmol Agrawal @anmode\n\n~ @ShahanaFarooqui :), @EndothermicDev, @cdecker, @niftynei and\n@RustyRussell\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230511/429cd12a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Release Announcement v23.05: Austin Texas Agreement(ATXA)",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Shahana Farooqui"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 2133
        }
    },
    {
        "title": "[Lightning-dev] Solving Lightning Jamming and beyond with Staking Credentials: a Protocol Walkthrough",
        "thread_messages": [
            {
                "author": "Antoine Riard",
                "date": "2023-05-24T22:57:23",
                "message_text_only": "Hi list,\n\nAs it has been discussed before, a solution to mitigate jamming\nattacks over the Lightning Network consists in the introduction of\ncredentials that must be acquired by HTLC senders to lock each hop\nliquidity along the forwarding path. Those credentials can be\nprivacy-preserving to mask the identity of the HTLC senders towards\nthe routing hops. They serve as a monetary hedge in case of default of\nthe HTLC sender on the payment of the routing fees.\n\nAs additional advantages, this credentials framework, dubbed \"Staking\nCredentials\", can be deployed to mitigate other liquidity timevalue\nDoS in the Lightning landscape, e.g collaborative transaction\nconstruction or even beyond as an enhanced paywall to access Nostr\nrelay services [0].\n\nThis post gives an overview of the framework by detailing the key\nconcepts, laying out the protocol phases, showing concrete examples\nand presenting the upsides and downsides of this mitigation approach\nfor jamming.\n\n## Protocol Abstractions\n\nThe protocol relies on basic mechanisms of the Lightning Network such\nas the onion messages, blinded paths where the sender doesn't know who\nis the recipient and gossips, an information dissemination protocol\nnot relying on third-party.\n\nBeyond, new abstractions are introduced:\n- credentials: unique keys establishing attributes of the bearer,\nthose keys can be blinded [1].\n- scarce assets: e.g a Bitcoin transaction, a Lightning payment,\nchaumian ecash, UTXO ownership proofs.\n- Requester/Issuer entities: the Requester requires from the Issuer\nauthentication of credentials in exchange for submitting scarce\nassets.\n- Client/Provider entities: the Client requires from the Provider a\nservice in exchange of submitting a credential.\n\n## Protocol Phases\n\nThe first phase of the protocol is the discovery by a user of the\n`credentials_policy` and `service_policy` gossips originating\nrespectively from Issuers and Providers. By reading the\n`service_policy`, a user can discover the list of credentials Issuer a\ntarget service Provider is relying on.\n\nThe user in the role of the Requester starts by committing a scarce\nasset as announced by the Issuer's `credentials_policy`. E.g the\nRequester sends a Bitcoin on-chain to a destination scriptPubkey\npreviously announced by the gossip mechanism. The user attaches the\nscarce asset proof with a set of blinded credentials, finds an onion\npath to the Issuer and sends the whole inside an onion message.\n\nWhen the Issuer receives the scarce asset proofs and the set of\ncredentials, the proof is first verified e.g the on-chain payment must\nbe confirmed to a destination scriptPubkey controlled by the Issuer.\nIf the proof is correct and the scarce asset cost matches the quantity\nof credentials as announced by `credentials_policy`, the blinded\ncredentials are countersigned by the Issuer and the signatures replied\nback to the Requester by using a blinded path.\n\nThe Requester receives the Issuer signature and should verify they're\ncorrect under the announced issuance public key in\n`credentials_policy`. If they are valid, the credentials can be\nunblinded and consumed for the satisfaction of a service or correct\nthe transactional asymmetries of a Bitcoin financial contract (e.g the\nsignature release for a dual-funding transaction).\n\nAlternatively, the credentials usage can be delegated to another user\nunder the warning than for the second-user, there is no guarantee the\ncredential transfer is not double-spend.\n\nThe user in the role of the Client forwards the unblinded credentials\nand the corresponding Issuer signatures to a target service Provider.\nThe service request can be protocol-specific and linked with the\ncredentials submission with a simple pair of identifiers (e.g a\n32-byte random value). At reception by the Provider, the signatures on\nthe unblinded credentials must be verified against the corresponding\nIssuance public key. The quantity of credentials must be equal to the\nservice units requested as announced by `service_policy`.\n\nIf those checks are correct, the Provider is satisfying the Client\nservice request, and additionally can provide back authentication\nsignatures for a new set of blinded credentials (optionally attached\nin the service request issued by the Client).\n\n## Example: Lightning jamming\n\nAlice, the routing hop, cumulates in this deployment both the role of\nIssuer and Provider. As an Issuer, she announces how much Lightning\nsatoshis she wishes to be paid to countersign a quantity of N\ncredentials in `credentials_policy`. As a Provider, she announces how\nmuch credentials she wishes to allow a lockup of her 10_000 sats\nLightning channels for 100 blocks in `service_policy`.\n\nBob the HTLC sender discovers Alice's `credentials_policy`, sends a\nLightning payment to Alice and then collects a quantity of N signed\nblinded credentials during a issuance dance with Alice. After this,\nBob can build a payment path going through Alice, where her hop's\nonion `payload` includes an identifier Z. Bob transfers the signed\nunblinded credentials with the same identifier Z through onion routing\nto Alice node.\n\nAlice node verifies the credentials with respect to her\n`service_policy` for the forwarding of HTLC. If this is correct, the\nHTLC is forward over her 10_000 sats Lightning channel. If the HTLC\nsettlement is successful, a new quantity of blinded credentials is\ncountersigned by Alice to reward Bob for the efficient usage of her\nliquidity.\n\n## Protocol Upsides\n\nThe credentials allows a service Provider to establish a dynamic\nrisk-management policy, where the submission of credentials is\ndisabled during the \"peaceful\" state and where credentials must bind\nto 100% of the timevalue of the liquidity service in case of \"war\"\nstate. E.g for jamming, the cost of the credentials can match 100% of\nthe routing fees announced in `channel_update.\n\nThe blinding of the credentials should preserve the privacy of the\nHTLC senders, therefore preventing deanonymization of the payments, or\nselective censorship of the HTLC forward by a specific HTLC sender.\n\nThe credentials enable an emergent discount effect, where in case of\n\"honest\" behavior of the Client in the usage of the service, they can\nbe rewarded by fresh credentials, therefore reducing the operational\ncost of their future service usage.\n\nThe credentials framework should be generic enough to adapt to\nmultiple Bitcoin flows beyond HTLC forwarding, and the Lightning\njamming issue. Other flows of interest can be to cover the asymmetries\nin collaborative transaction construction, e.g the order of the\nrelease of the contributed UTXOs signatures. Qualitative credentials\ncould be deployed enabling bounded routing fees or SLA of liquidity\nduring periods of Lightning network congestion.\n\nThere is a Rust implementation in early progress, with a short-term\ngoal to have the full Staking Credential flow working in its\nnon-blinded version for a 1-hop payment path.\n\nCheers,\nAntoine\n\n[0] https://github.com/civkit/staking-credentials-spec\n[1] https://sceweb.sce.uhcl.edu/yang/teaching/csci5234WebSecurityFall2011/Chaum-blind-signatures.PDF\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20230524/35f6e341/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Solving Lightning Jamming and beyond with Staking Credentials: a Protocol Walkthrough",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Antoine Riard"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 7272
        }
    }
]