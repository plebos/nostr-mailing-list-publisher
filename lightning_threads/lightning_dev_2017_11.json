[
    {
        "title": "[Lightning-dev] Question: Invoice",
        "thread_messages": [
            {
                "author": "Cezary Dziemian",
                "date": "2017-11-02T00:01:48",
                "message_text_only": "Hello,\n\nI'm a big fan of LN technology for over than one year. I have few questions\nand I thing this group is the best place to ask them. Would be great if\nsome of you could find few minutes to answer them.\n\n1. After LN starts, some group of users will use it, other not. If for\nexample, I would like to receive payment for coffee from some user, I don't\nknow if user uses LN or not. So, when someone buy something from me, do I\nneed to ask him what kind of payment he would like to use (LN or on-chain)?\nThe best would be, if I show him some qr code contains both public address\nand LN invoice and his wallet could choose how to pay. But this cannot be\ndone this way, right?\n\n2. Lets imagine, that someone send me invoice. I send payment and someone\nin the middle doesn't cooperate fast. My payment is waiting and until time\nlock period lapse I don't know if my payment will be processed or not. What\nto do then?\n\n3. Am I right that this decremental time lock is strongly related with\nblock confirmation time? If there would be currency that have very fast\nconfirmation time (like 5 seconds) then time lock period could be short\nwhat can potentially solve problem described in paragraph 2?\n\nBest Regards,\nCezary Dziemian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171102/235e9dd9/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-11-03T01:20:19",
                "message_text_only": "Hi Cezary,\n\n        This is indeed the right place for such questions at the moment.\n\nCezary Dziemian <cezary.dziemian at gmail.com> writes:\n> 1. After LN starts, some group of users will use it, other not. If for\n> example, I would like to receive payment for coffee from some user, I don't\n> know if user uses LN or not. So, when someone buy something from me, do I\n> need to ask him what kind of payment he would like to use (LN or on-chain)?\n> The best would be, if I show him some qr code contains both public address\n> and LN invoice and his wallet could choose how to pay. But this cannot be\n> done this way, right?\n\nYes, the transition is kind of painful.  You can use a BOLT 11 QR code,\nwhich can contain a fallback address, but that still requires their app\nunderstand BOLT11 enough to extract it.\n\nIf they understand the BIP70 payment protocol, it could include an\nalternate payment mechanism, but it seems nobody actually uses this.\n\n> 2. Lets imagine, that someone send me invoice. I send payment and someone\n> in the middle doesn't cooperate fast. My payment is waiting and until time\n> lock period lapse I don't know if my payment will be processed or not. What\n> to do then?\n\nThis is the worst case, yes.  It's actually two cases: one where the\npayment has failed, and one where it has succeeded and you don't know\nyet.\n\nIf it's succeeded you'll get your goods (the recipient sees nothing\nwrong), so you don't care that you have to wait for the money to be\ndeducted.\n\nIf it hasn't, it's almost certainly going to fail, and you can either\nwait or try again with a new invoice (your wallet won't let to pay the\nsame one twice unless it's definitely failed).  For 1.1 you'd be able to\nreuse the same invoice safely, as long as the merchant was honest if it\nreceived two payments and rejects the second.\n\n> 3. Am I right that this decremental time lock is strongly related with\n> block confirmation time? If there would be currency that have very fast\n> confirmation time (like 5 seconds) then time lock period could be short\n> what can potentially solve problem described in paragraph 2?\n\nSomewhat, but not that low, because you still need a margin to turn\naround payments.  In practice, if payments are so unreliable that you\nhave to worry about this case, then something's horribly wrong!\n\nCheers,\nRusty."
            },
            {
                "author": "Johan Tor\u00e5s Halseth",
                "date": "2017-11-03T11:25:46",
                "message_text_only": "I think this might have been discussed somewhere, sometime before: couldn\u2019t we add an lightning parameter to the bitcoin: url, making the QR codes backwards compatible?\n- Johan\n\nOn Fri, Nov 3, 2017 at 2:20, Rusty Russell <rusty at rustcorp.com.au> wrote:\nHi Cezary,\n\nThis is indeed the right place for such questions at the moment.\n\nCezary Dziemian <cezary.dziemian at gmail.com> writes:\n> 1. After LN starts, some group of users will use it, other not. If for\n> example, I would like to receive payment for coffee from some user, I don't\n> know if user uses LN or not. So, when someone buy something from me, do I\n> need to ask him what kind of payment he would like to use (LN or on-chain)?\n> The best would be, if I show him some qr code contains both public address\n> and LN invoice and his wallet could choose how to pay. But this cannot be\n> done this way, right?\n\nYes, the transition is kind of painful. You can use a BOLT 11 QR code,\nwhich can contain a fallback address, but that still requires their app\nunderstand BOLT11 enough to extract it.\n\nIf they understand the BIP70 payment protocol, it could include an\nalternate payment mechanism, but it seems nobody actually uses this.\n\n> 2. Lets imagine, that someone send me invoice. I send payment and someone\n> in the middle doesn't cooperate fast. My payment is waiting and until time\n> lock period lapse I don't know if my payment will be processed or not. What\n> to do then?\n\nThis is the worst case, yes. It's actually two cases: one where the\npayment has failed, and one where it has succeeded and you don't know\nyet.\n\nIf it's succeeded you'll get your goods (the recipient sees nothing\nwrong), so you don't care that you have to wait for the money to be\ndeducted.\n\nIf it hasn't, it's almost certainly going to fail, and you can either\nwait or try again with a new invoice (your wallet won't let to pay the\nsame one twice unless it's definitely failed). For 1.1 you'd be able to\nreuse the same invoice safely, as long as the merchant was honest if it\nreceived two payments and rejects the second.\n\n> 3. Am I right that this decremental time lock is strongly related with\n> block confirmation time? If there would be currency that have very fast\n> confirmation time (like 5 seconds) then time lock period could be short\n> what can potentially solve problem described in paragraph 2?\n\nSomewhat, but not that low, because you still need a margin to turn\naround payments. In practice, if payments are so unreliable that you\nhave to worry about this case, then something's horribly wrong!\n\nCheers,\nRusty.\n_______________________________________________\nLightning-dev mailing list\nLightning-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171103/381678d3/attachment.html>"
            },
            {
                "author": "Cezary Dziemian",
                "date": "2017-11-04T01:02:12",
                "message_text_only": "Thank you very much for answers. It is honor that you answered and it is\nalso very important for us in Poland. My friend is building Bitcoin ATMs\nand off-course plan to use LN. BTW: In Poland a lot of people believe that\nLN is the next big thing. We have huge pro-LN community and even have LN\nwhitepaper translated to polish.\n\nSo for 1.1 such scenario will not be possible?:\n\nWe have such network with such payment channel opened:\n\n           Hub A\n          /           \\\nPayer              Merchant\n          \\           /\n           Hub B\n\nHub A and Hub B belong to the same person, who will try to cheat us. Now\nPayer try to send payment through Hub A to Merchant. Hub A updates HTLC\ncontract with Payer for this payment but never updates HTLC contract to\nMerchant so payment cannot be processed and is \"pending\". Because payer see\nthat payment is pending, tries to make payment using Hub B based on the\nsame invoice. After Marchant reveals secret number to Hub B, Hub A also can\nuse it to steal funds from first pending payment.\n\n2017-11-03 2:20 GMT+01:00 Rusty Russell <rusty at rustcorp.com.au>:\n\n> Somewhat, but not that low, because you still need a margin to turn\n> around payments.\n>\n\nHow big this margin would be? If we have crypto with 5 seconds block\nconfirmation time, how big such timelocks could be? I quess it is hard to\nanswer precisely, but could you give at least estimated value?\n\nBest Regards,\nCezary\n\n2017-11-03 12:25 GMT+01:00 Johan Tor\u00e5s Halseth <johanth at gmail.com>:\n\n> I think this might have been discussed somewhere, sometime before:\n> couldn\u2019t we add an lightning parameter to the bitcoin: url, making the QR\n> codes backwards compatible?\n>\n> - Johan\n>\n> On Fri, Nov 3, 2017 at 2:20, Rusty Russell <rusty at rustcorp.com.au> wrote:\n>\n> Hi Cezary,\n>\n> This is indeed the right place for such questions at the moment.\n>\n> Cezary Dziemian <cezary.dziemian at gmail.com> writes:\n> > 1. After LN starts, some group of users will use it, other not. If for\n> > example, I would like to receive payment for coffee from some user, I\n> don't\n> > know if user uses LN or not. So, when someone buy something from me, do I\n> > need to ask him what kind of payment he would like to use (LN or\n> on-chain)?\n> > The best would be, if I show him some qr code contains both public\n> address\n> > and LN invoice and his wallet could choose how to pay. But this cannot be\n> > done this way, right?\n>\n> Yes, the transition is kind of painful. You can use a BOLT 11 QR code,\n> which can contain a fallback address, but that still requires their app\n> understand BOLT11 enough to extract it.\n>\n> If they understand the BIP70 payment protocol, it could include an\n> alternate payment mechanism, but it seems nobody actually uses this.\n>\n> > 2. Lets imagine, that someone send me invoice. I send payment and someone\n> > in the middle doesn't cooperate fast. My payment is waiting and until\n> time\n> > lock period lapse I don't know if my payment will be processed or not.\n> What\n> > to do then?\n>\n> This is the worst case, yes. It's actually two cases: one where the\n> payment has failed, and one where it has succeeded and you don't know\n> yet.\n>\n> If it's succeeded you'll get your goods (the recipient sees nothing\n> wrong), so you don't care that you have to wait for the money to be\n> deducted.\n>\n> If it hasn't, it's almost certainly going to fail, and you can either\n> wait or try again with a new invoice (your wallet won't let to pay the\n> same one twice unless it's definitely failed). For 1.1 you'd be able to\n> reuse the same invoice safely, as long as the merchant was honest if it\n> received two payments and rejects the second.\n>\n> > 3. Am I right that this decremental time lock is strongly related with\n> > block confirmation time? If there would be currency that have very fast\n> > confirmation time (like 5 seconds) then time lock period could be short\n> > what can potentially solve problem described in paragraph 2?\n>\n> Somewhat, but not that low, because you still need a margin to turn\n> around payments. In practice, if payments are so unreliable that you\n> have to worry about this case, then something's horribly wrong!\n>\n> Cheers,\n> Rusty.\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171104/141ab6d5/attachment-0001.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-11-07T22:21:41",
                "message_text_only": "Cezary Dziemian <cezary.dziemian at gmail.com> writes:\n> Thank you very much for answers. It is honor that you answered and it is\n> also very important for us in Poland. My friend is building Bitcoin ATMs\n> and off-course plan to use LN. BTW: In Poland a lot of people believe that\n> LN is the next big thing. We have huge pro-LN community and even have LN\n> whitepaper translated to polish.\n>\n> So for 1.1 such scenario will not be possible?:\n>\n> We have such network with such payment channel opened:\n>\n>            Hub A\n>           /           \\\n> Payer              Merchant\n>           \\           /\n>            Hub B\n>\n> Hub A and Hub B belong to the same person, who will try to cheat us. Now\n> Payer try to send payment through Hub A to Merchant. Hub A updates HTLC\n> contract with Payer for this payment but never updates HTLC contract to\n> Merchant so payment cannot be processed and is \"pending\". Because payer see\n> that payment is pending, tries to make payment using Hub B based on the\n> same invoice. After Marchant reveals secret number to Hub B, Hub A also can\n> use it to steal funds from first pending payment.\n\nExactly.  This is why the payer's wallet will *refuse* to make two\npayments to the same payment_hash (until one has failed).\n\nYou need to ask the merchant for another invoice for now.\n\nThanks!\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Question: Invoice",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Cezary Dziemian",
                "Johan Tor\u00e5s Halseth"
            ],
            "messages_count": 5,
            "total_messages_chars_count": 12546
        }
    },
    {
        "title": "[Lightning-dev] Lightning-dev Digest, Vol 27, Issue 2",
        "thread_messages": [
            {
                "author": "Louis Willcock",
                "date": "2017-11-03T22:18:23",
                "message_text_only": "Rusty, your comments on BIP70 have me interested. Do you have a belief as\nto why it is not used? And I assume you are largely referring to the BIP\n70-72 collection? Is it a case of App devs just not incorporating the\nfunctionality in?\n\nOn Fri, Nov 3, 2017 at 5:00 AM, <\nlightning-dev-request at lists.linuxfoundation.org> wrote:\n\n> Send Lightning-dev mailing list submissions to\n>         lightning-dev at lists.linuxfoundation.org\n>\n> To subscribe or unsubscribe via the World Wide Web, visit\n>         https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> or, via email, send a message with subject or body 'help' to\n>         lightning-dev-request at lists.linuxfoundation.org\n>\n> You can reach the person managing the list at\n>         lightning-dev-owner at lists.linuxfoundation.org\n>\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of Lightning-dev digest...\"\n>\n>\n> Today's Topics:\n>\n>    1. Re: Question: Invoice (Rusty Russell)\n>    2. Re: Question: Invoice (Johan Tor?s Halseth)\n>\n>\n> ----------------------------------------------------------------------\n>\n> Message: 1\n> Date: Fri, 03 Nov 2017 11:50:19 +1030\n> From: Rusty Russell <rusty at rustcorp.com.au>\n> To: Cezary Dziemian <cezary.dziemian at gmail.com>,\n>         lightning-dev at lists.linuxfoundation.org\n> Subject: Re: [Lightning-dev] Question: Invoice\n> Message-ID: <87bmkknooc.fsf at rustcorp.com.au>\n> Content-Type: text/plain\n>\n> Hi Cezary,\n>\n>         This is indeed the right place for such questions at the moment.\n>\n> Cezary Dziemian <cezary.dziemian at gmail.com> writes:\n> > 1. After LN starts, some group of users will use it, other not. If for\n> > example, I would like to receive payment for coffee from some user, I\n> don't\n> > know if user uses LN or not. So, when someone buy something from me, do I\n> > need to ask him what kind of payment he would like to use (LN or\n> on-chain)?\n> > The best would be, if I show him some qr code contains both public\n> address\n> > and LN invoice and his wallet could choose how to pay. But this cannot be\n> > done this way, right?\n>\n> Yes, the transition is kind of painful.  You can use a BOLT 11 QR code,\n> which can contain a fallback address, but that still requires their app\n> understand BOLT11 enough to extract it.\n>\n> If they understand the BIP70 payment protocol, it could include an\n> alternate payment mechanism, but it seems nobody actually uses this.\n>\n> > 2. Lets imagine, that someone send me invoice. I send payment and someone\n> > in the middle doesn't cooperate fast. My payment is waiting and until\n> time\n> > lock period lapse I don't know if my payment will be processed or not.\n> What\n> > to do then?\n>\n> This is the worst case, yes.  It's actually two cases: one where the\n> payment has failed, and one where it has succeeded and you don't know\n> yet.\n>\n> If it's succeeded you'll get your goods (the recipient sees nothing\n> wrong), so you don't care that you have to wait for the money to be\n> deducted.\n>\n> If it hasn't, it's almost certainly going to fail, and you can either\n> wait or try again with a new invoice (your wallet won't let to pay the\n> same one twice unless it's definitely failed).  For 1.1 you'd be able to\n> reuse the same invoice safely, as long as the merchant was honest if it\n> received two payments and rejects the second.\n>\n> > 3. Am I right that this decremental time lock is strongly related with\n> > block confirmation time? If there would be currency that have very fast\n> > confirmation time (like 5 seconds) then time lock period could be short\n> > what can potentially solve problem described in paragraph 2?\n>\n> Somewhat, but not that low, because you still need a margin to turn\n> around payments.  In practice, if payments are so unreliable that you\n> have to worry about this case, then something's horribly wrong!\n>\n> Cheers,\n> Rusty.\n>\n>\n> ------------------------------\n>\n> Message: 2\n> Date: Fri, 03 Nov 2017 12:25:46 +0100\n> From: Johan Tor?s Halseth <johanth at gmail.com>\n> To: Rusty Russell <rusty at rustcorp.com.au>\n> Cc: lightning-dev at lists.linuxfoundation.org\n> Subject: Re: [Lightning-dev] Question: Invoice\n> Message-ID: <d8b4dcd1-23e5-4dfa-9fd1-5249eaa410a4 at gmail.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> I think this might have been discussed somewhere, sometime before:\n> couldn?t we add an lightning parameter to the bitcoin: url, making the QR\n> codes backwards compatible?\n> - Johan\n>\n> On Fri, Nov 3, 2017 at 2:20, Rusty Russell <rusty at rustcorp.com.au> wrote:\n> Hi Cezary,\n>\n> This is indeed the right place for such questions at the moment.\n>\n> Cezary Dziemian <cezary.dziemian at gmail.com> writes:\n> > 1. After LN starts, some group of users will use it, other not. If for\n> > example, I would like to receive payment for coffee from some user, I\n> don't\n> > know if user uses LN or not. So, when someone buy something from me, do I\n> > need to ask him what kind of payment he would like to use (LN or\n> on-chain)?\n> > The best would be, if I show him some qr code contains both public\n> address\n> > and LN invoice and his wallet could choose how to pay. But this cannot be\n> > done this way, right?\n>\n> Yes, the transition is kind of painful. You can use a BOLT 11 QR code,\n> which can contain a fallback address, but that still requires their app\n> understand BOLT11 enough to extract it.\n>\n> If they understand the BIP70 payment protocol, it could include an\n> alternate payment mechanism, but it seems nobody actually uses this.\n>\n> > 2. Lets imagine, that someone send me invoice. I send payment and someone\n> > in the middle doesn't cooperate fast. My payment is waiting and until\n> time\n> > lock period lapse I don't know if my payment will be processed or not.\n> What\n> > to do then?\n>\n> This is the worst case, yes. It's actually two cases: one where the\n> payment has failed, and one where it has succeeded and you don't know\n> yet.\n>\n> If it's succeeded you'll get your goods (the recipient sees nothing\n> wrong), so you don't care that you have to wait for the money to be\n> deducted.\n>\n> If it hasn't, it's almost certainly going to fail, and you can either\n> wait or try again with a new invoice (your wallet won't let to pay the\n> same one twice unless it's definitely failed). For 1.1 you'd be able to\n> reuse the same invoice safely, as long as the merchant was honest if it\n> received two payments and rejects the second.\n>\n> > 3. Am I right that this decremental time lock is strongly related with\n> > block confirmation time? If there would be currency that have very fast\n> > confirmation time (like 5 seconds) then time lock period could be short\n> > what can potentially solve problem described in paragraph 2?\n>\n> Somewhat, but not that low, because you still need a margin to turn\n> around payments. In practice, if payments are so unreliable that you\n> have to worry about this case, then something's horribly wrong!\n>\n> Cheers,\n> Rusty.\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> URL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/\n> attachments/20171103/381678d3/attachment-0001.html>\n>\n> ------------------------------\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n> End of Lightning-dev Digest, Vol 27, Issue 2\n> ********************************************\n>\n\n\n\n-- \nLouis Willcock\nSoftware Developer\nPhone: 0422984471\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171103/044720ea/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-11-09T23:29:52",
                "message_text_only": "Louis Willcock <louiswillcock at gmail.com> writes:\n> Rusty, your comments on BIP70 have me interested. Do you have a belief as\n> to why it is not used? And I assume you are largely referring to the BIP\n> 70-72 collection? Is it a case of App devs just not incorporating the\n> functionality in?\n\nI think the lack of adoption is because it doesn't offer sufficient\nadvantages over bitcoin:1RustyRX2oai4EYYDpQGWvEL62BBGqN9T, which already\nexists.\n\nFor lightning there was no existing format, and its needs are unique\nenough that a dedicated format makes sense.\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Lightning-dev Digest, Vol 27, Issue 2",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Louis Willcock"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 8488
        }
    },
    {
        "title": "[Lightning-dev] (no subject)",
        "thread_messages": [
            {
                "author": "Mark Botley",
                "date": "2017-11-09T08:22:10",
                "message_text_only": "Sent from Mail for Windows 10\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171109/3374ffda/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "(no subject)",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Mark Botley"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 215
        }
    },
    {
        "title": "[Lightning-dev] Questions on SIGHASH_NOINPUT",
        "thread_messages": [
            {
                "author": "Tomas",
                "date": "2017-11-10T12:27:35",
                "message_text_only": "HI,\n\nI have some questions regarding the proposal to use  SIGHASH_NOINPUT on\nthe bitcoin-dev mailing list. [1]\n\n1. If I understand correctly, the problem of malleated transactions for\nLN is limited to the punishment transaction which is the only one that\nspends an unconfirmed transaction. Does that mean that with\nSIGHASH_NOINPUT, no other malleability fix would have been needed for LN\nto work? Am I correct that LN could function with (roughly) the same\ndesign without SegWit if SIGHASH_NOINPUT would be in place?\n\n2. On the mailing list, it was argued that SIGHASH_NOINPUT is important\nto prevent excessive recreation and routing of punishment transaction to\n3rd party monitoring services. Is this still important or have other\nsolutions presented itself? Is work in this area still being done?\n\nThanks,\nTomas van der Wansem\nbitcrust\n\n[1]\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-February/012460.html"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-11-12T03:04:55",
                "message_text_only": "Tomas <tomas at bitcrust.org> writes:\n> HI,\n>\n> I have some questions regarding the proposal to use  SIGHASH_NOINPUT on\n> the bitcoin-dev mailing list. [1]\n>\n> 1. If I understand correctly, the problem of malleated transactions for\n> LN is limited to the punishment transaction which is the only one that\n> spends an unconfirmed transaction. Does that mean that with\n> SIGHASH_NOINPUT, no other malleability fix would have been needed for LN\n> to work? Am I correct that LN could function with (roughly) the same\n> design without SegWit if SIGHASH_NOINPUT would be in place?\n\nMalleation is a problem for every commitment transaction: we use HTLC\ntransactions which depend on it.  Now, in theory SIGHASH_NOINPUT could\nbe used to work around malleation here too, by allowing you to update\nthe dependent transaction, but you need separate keys on every output to\nensure that transactions can't be connected to the wrong outputs.\n\n> 2. On the mailing list, it was argued that SIGHASH_NOINPUT is important\n> to prevent excessive recreation and routing of punishment transaction to\n> 3rd party monitoring services. Is this still important or have other\n> solutions presented itself? Is work in this area still being done?\n\nIIRC it cuts the number of updates down by about a factor of 2 under\ntypical use, more under weird conditions.  Basically you can re-attach\nthe HTLC transaction instead of needing a new one.\n\nIMHO SIGHASH_NOINPUT is a generally nice thing to have, though it's\nextremely dangerous if you reuse keys at all.  So, don't do that :)\n\nCheers,\nRusty."
            },
            {
                "author": "Tomas",
                "date": "2017-11-13T09:38:41",
                "message_text_only": "Thank you for your feedback, \n\nOn Sun, Nov 12, 2017, at 04:04, Rusty Russell wrote:\n> Malleation is a problem for every commitment transaction: we use HTLC\n> transactions which depend on it.  Now, in theory SIGHASH_NOINPUT could\n> be used to work around malleation here too, by allowing you to update\n> the dependent transaction, but you need separate keys on every output to\n> ensure that transactions can't be connected to the wrong outputs.\n\nBut doesn't the current specification already ensure that every key is\nonly used once? At least that is what I am understanding from the key\nderivation rules at:\n\nhttps://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md\n\n> \n> IIRC it cuts the number of updates down by about a factor of 2 under\n> typical use, more under weird conditions.  Basically you can re-attach\n> the HTLC transaction instead of needing a new one.\n> \n> IMHO SIGHASH_NOINPUT is a generally nice thing to have, though it's\n> extremely dangerous if you reuse keys at all.  So, don't do that :)\n\nIf the prescribed key derivation algorithm ensures uniqueness, under\nwhat circumstances could the keys be reused? Is it just a faulty \nimplementation here that is the risk?\n\nThank you,\nTomas"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-11-15T10:37:22",
                "message_text_only": "Tomas <tomas at bitcrust.org> writes:\n> Thank you for your feedback, \n>\n> On Sun, Nov 12, 2017, at 04:04, Rusty Russell wrote:\n>> Malleation is a problem for every commitment transaction: we use HTLC\n>> transactions which depend on it.  Now, in theory SIGHASH_NOINPUT could\n>> be used to work around malleation here too, by allowing you to update\n>> the dependent transaction, but you need separate keys on every output to\n>> ensure that transactions can't be connected to the wrong outputs.\n>\n> But doesn't the current specification already ensure that every key is\n> only used once? At least that is what I am understanding from the key\n> derivation rules at:\n>\n> https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md\n\nIt's different for different commitment transactions, not not for\ndifferent HTLC outputs attached to the same transaction.\n\n>> IIRC it cuts the number of updates down by about a factor of 2 under\n>> typical use, more under weird conditions.  Basically you can re-attach\n>> the HTLC transaction instead of needing a new one.\n>> \n>> IMHO SIGHASH_NOINPUT is a generally nice thing to have, though it's\n>> extremely dangerous if you reuse keys at all.  So, don't do that :)\n>\n> If the prescribed key derivation algorithm ensures uniqueness, under\n> what circumstances could the keys be reused? Is it just a faulty \n> implementation here that is the risk?\n\nYes, if you reuse addresses, a signed SIGHASH_NOINPUT input can be\nattached to either one.  This may (or may not) be a problem, depending\non the exact usage.\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Questions on SIGHASH_NOINPUT",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Tomas"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 5281
        }
    },
    {
        "title": "[Lightning-dev] Use it on mainnet",
        "thread_messages": [
            {
                "author": "Cezary Dziemian",
                "date": "2017-11-10T21:49:39",
                "message_text_only": "Hello everybody,\n\nDo you thing some of your LN implementation could be used in mainnet right\nnow? Are there some important issues to solve? Or maybe just more tests\nneeded?\n\nBest Regards,\nCezary Dziemian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171110/5fd035fc/attachment.html>"
            },
            {
                "author": "Cezary Dziemian",
                "date": "2017-11-11T10:03:04",
                "message_text_only": "Thanks Mark,\n\nI'm asking rather because I'm really worry about what is going on with\nbitcoin right now. Bitcoin as payment system is not working with such high\nfees and a lot of unconfirmed transactions. From my point of view LN is the\nbest way to solve this problem. In my opinion this is really urgent to\nstart using LN as fast as possible.\n\n\n2017-11-10 23:12 GMT+01:00 Mark Friedenbach <mark at friedenbach.org>:\n\n> Can it, yes. The teams are holding off on announcing until cross\n> implementation comparability is demonstrated, which should be soon. I\n> wouldn\u2019t deploy systems to customers until that is done, but you wouldn\u2019t\n> be in excessive danger of losing your money or anything.\n>\n> Sent from my iPhone\n>\n> > On Nov 10, 2017, at 11:49 AM, Cezary Dziemian <cezary.dziemian at gmail.com>\n> wrote:\n> >\n> > Hello everybody,\n> >\n> > Do you thing some of your LN implementation could be used in mainnet\n> right now? Are there some important issues to solve? Or maybe just more\n> tests needed?\n> >\n> > Best Regards,\n> > Cezary Dziemian\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171111/ba61ad08/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Use it on mainnet",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Cezary Dziemian"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 1814
        }
    },
    {
        "title": "[Lightning-dev] Hello every ones ! A message from an unknown traveller.",
        "thread_messages": [
            {
                "author": "Satoshi Nakamoto",
                "date": "2017-11-15T03:16:56",
                "message_text_only": "An HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171115/9ac73bbb/attachment.html>"
            },
            {
                "author": "Matt Corallo",
                "date": "2017-11-15T03:41:58",
                "message_text_only": "+1\n\nKeep Bitcoin Weird.\n\nOn November 14, 2017 10:16:56 PM EST, Satoshi Nakamoto <satoshinjp at gmx.com> wrote:\n>_______________________________________________\n>Lightning-dev mailing list\n>Lightning-dev at lists.linuxfoundation.org\n>https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171115/8eea265c/attachment.html>"
            },
            {
                "author": "Marcel Jamin",
                "date": "2017-11-15T07:47:42",
                "message_text_only": "... and Matt blue!\n\nYour hair color related hard fork did not have consensus.\n\nOn 15 November 2017 at 04:41, Matt Corallo <lf-lists at mattcorallo.com> wrote:\n> +1\n>\n> Keep Bitcoin Weird.\n>\n> On November 14, 2017 10:16:56 PM EST, Satoshi Nakamoto <satoshinjp at gmx.com>\n> wrote:\n>>\n>> Hello Every Ones,\n>>\n>>\n>>\n>> I was travelling all around the cyberspace to find my twin brother, who\n>> has been lost in the unknown since 2007. By chance I was passing by, so I\n>> thought it would be good to stop over my Intergalactic Cyberspace Craft as I\n>> have noticed something lightning here; I think you all are here trying to do\n>> something to achieve something greater than others which is more transparent\n>> and efficient. It is always good to try and expect far greater success.\n>> There is nothing wrong being optimistic and expecting something very large\n>> if it is measureable by quantum mechanism no matter what others may think or\n>> they may say ?\n>>\n>>\n>>\n>> Try your best but plan ahead with systemitic strategic capacity. I used to\n>> hear from the older folks two and a half decades ago \u2018something must emerge,\n>> something must emerge\u2019 they used to say it day and night but when something\n>> has emerged they cannot see it, some of them are day blind and the rest have\n>> gone out of their own mind; I think you all will find, what you are looking\n>> forward to find but please be kind to each other no matter what the\n>> backbiter say distressful things behind your back ?  Be determined and try;\n>> try and try again and again until you find a perfect algorithm to complete\n>> your mission.\n>>\n>>\n>>\n>> Satoshi Nakamoto\n>>\n>>\n>>\n>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>"
            }
        ],
        "thread_summary": {
            "title": "Hello every ones ! A message from an unknown traveller.",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Matt Corallo",
                "Marcel Jamin",
                "Satoshi Nakamoto"
            ],
            "messages_count": 3,
            "total_messages_chars_count": 2466
        }
    },
    {
        "title": "[Lightning-dev] [MINUTES] Dev Meeting 2017-11-13",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2017-11-15T06:31:19",
                "message_text_only": "Hi!\n\n        Sorry I've been slack posting previous minutes, but the good\nnews is we've put them all in one place:\n\n        https://docs.google.com/document/d/1oU4wxzGsYd0T084rTXJbedb7Gvdtj4ax638nMkYUmco/edit#heading=h.8iu8f3dcmgj2\n\nHighlights from 2017-11-13:\n        - Integration tests looking good.\n        - But we broke freeze by unanimous agreement, to include ACINQ's\n          brilliant htlckey separation proposal.\n        - Integration tests will add reconnect tests.\n        - c-lightning needs to handle update_fee for bitcoin fee updates (WIP)\n\nOld highlights from 2017-10-30:\n        - lnd has Tor addressing support!\n        - Our first optional feature was voted into spec (option-data-loss-protect)\n\nOld highlights from 2017-10-16:\n        - Turns out there's a thinko in CTLV calculation across routes.\n          Long collaboration, simple spec changes to fix.\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Dev Meeting 2017-11-13",
            "categories": [
                "Lightning-dev",
                "MINUTES"
            ],
            "authors": [
                "Rusty Russell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 895
        }
    },
    {
        "title": "[Lightning-dev] Unsubscribe",
        "thread_messages": [
            {
                "author": "Jonathan C. Frei",
                "date": "2017-11-15T15:40:05",
                "message_text_only": "On Wed, Nov 15, 2017 at 1:00 PM, <\nlightning-dev-request at lists.linuxfoundation.org> wrote:\n\n> Send Lightning-dev mailing list submissions to\n>         lightning-dev at lists.linuxfoundation.org\n>\n> To subscribe or unsubscribe via the World Wide Web, visit\n>         https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> or, via email, send a message with subject or body 'help' to\n>         lightning-dev-request at lists.linuxfoundation.org\n>\n> You can reach the person managing the list at\n>         lightning-dev-owner at lists.linuxfoundation.org\n>\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of Lightning-dev digest...\"\n>\n>\n> Today's Topics:\n>\n>    1. Hello every ones ! A message from an unknown      traveller.\n>       (Satoshi Nakamoto)\n>    2. Re: Hello every ones ! A message from an  unknown traveller.\n>       (Matt Corallo)\n>    3. [MINUTES] Dev Meeting 2017-11-13 (Rusty Russell)\n>    4. Re: Hello every ones ! A message from an unknown  traveller.\n>       (Marcel Jamin)\n>    5. Re: Questions on SIGHASH_NOINPUT (Rusty Russell)\n>\n>\n> ----------------------------------------------------------------------\n>\n> Message: 1\n> Date: Wed, 15 Nov 2017 04:16:56 +0100\n> From: \"Satoshi Nakamoto\" <satoshinjp at gmx.com>\n> To: lightning-dev at lists.linuxfoundation.org\n> Subject: [Lightning-dev] Hello every ones ! A message from an unknown\n>         traveller.\n> Message-ID:\n>         <trinity-93fe4b16-df67-4dc4-8109-4e7e69be2d3b-\n> 1510715816437 at 3c-app-mailcom-bs16>\n>\n> Content-Type: text/plain; charset=\"us-ascii\"\n>\n> An HTML attachment was scrubbed...\n> URL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/\n> attachments/20171115/9ac73bbb/attachment-0001.html>\n>\n> ------------------------------\n>\n> Message: 2\n> Date: Wed, 15 Nov 2017 03:41:58 +0000\n> From: Matt Corallo <lf-lists at mattcorallo.com>\n> To: lightning-dev at lists.linuxfoundation.org,    Satoshi Nakamoto\n>         <satoshinjp at gmx.com>\n> Subject: Re: [Lightning-dev] Hello every ones ! A message from an\n>         unknown traveller.\n> Message-ID: <48AF1A9D-E418-40AF-A5A4-36423EF22C34 at mattcorallo.com>\n> Content-Type: text/plain; charset=\"utf-8\"\n>\n> +1\n>\n> Keep Bitcoin Weird.\n>\n> On November 14, 2017 10:16:56 PM EST, Satoshi Nakamoto <satoshinjp at gmx.com>\n> wrote:\n> >_______________________________________________\n> >Lightning-dev mailing list\n> >Lightning-dev at lists.linuxfoundation.org\n> >https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> -------------- next part --------------\n> An HTML attachment was scrubbed...\n> URL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/\n> attachments/20171115/8eea265c/attachment-0001.html>\n>\n> ------------------------------\n>\n> Message: 3\n> Date: Wed, 15 Nov 2017 17:01:19 +1030\n> From: Rusty Russell <rusty at rustcorp.com.au>\n> To: <lightning-dev at lists.linuxfoundation.org>\n> Subject: [Lightning-dev] [MINUTES] Dev Meeting 2017-11-13\n> Message-ID: <877eus59zc.fsf at rustcorp.com.au>\n> Content-Type: text/plain\n>\n> Hi!\n>\n>         Sorry I've been slack posting previous minutes, but the good\n> news is we've put them all in one place:\n>\n>         https://docs.google.com/document/d/1oU4wxzGsYd0T084rTXJbedb7Gvdtj\n> 4ax638nMkYUmco/edit#heading=h.8iu8f3dcmgj2\n>\n> Highlights from 2017-11-13:\n>         - Integration tests looking good.\n>         - But we broke freeze by unanimous agreement, to include ACINQ's\n>           brilliant htlckey separation proposal.\n>         - Integration tests will add reconnect tests.\n>         - c-lightning needs to handle update_fee for bitcoin fee updates\n> (WIP)\n>\n> Old highlights from 2017-10-30:\n>         - lnd has Tor addressing support!\n>         - Our first optional feature was voted into spec\n> (option-data-loss-protect)\n>\n> Old highlights from 2017-10-16:\n>         - Turns out there's a thinko in CTLV calculation across routes.\n>           Long collaboration, simple spec changes to fix.\n>\n> Cheers,\n> Rusty.\n>\n>\n> ------------------------------\n>\n> Message: 4\n> Date: Wed, 15 Nov 2017 08:47:42 +0100\n> From: Marcel Jamin <marcel at jamin.net>\n> To: Matt Corallo <lf-lists at mattcorallo.com>\n> Cc: Satoshi Nakamoto <satoshinjp at gmx.com>,\n>         lightning-dev at lists.linuxfoundation.org\n> Subject: Re: [Lightning-dev] Hello every ones ! A message from an\n>         unknown traveller.\n> Message-ID:\n>         <CAAUq485TpsEA_9cgiWcjb1v8hS7fw2-jZQfOsKM9skC+bmN4WQ at mail.\n> gmail.com>\n> Content-Type: text/plain; charset=\"UTF-8\"\n>\n> ... and Matt blue!\n>\n> Your hair color related hard fork did not have consensus.\n>\n> On 15 November 2017 at 04:41, Matt Corallo <lf-lists at mattcorallo.com>\n> wrote:\n> > +1\n> >\n> > Keep Bitcoin Weird.\n> >\n> > On November 14, 2017 10:16:56 PM EST, Satoshi Nakamoto <\n> satoshinjp at gmx.com>\n> > wrote:\n> >>\n> >> Hello Every Ones,\n> >>\n> >>\n> >>\n> >> I was travelling all around the cyberspace to find my twin brother, who\n> >> has been lost in the unknown since 2007. By chance I was passing by, so\n> I\n> >> thought it would be good to stop over my Intergalactic Cyberspace Craft\n> as I\n> >> have noticed something lightning here; I think you all are here trying\n> to do\n> >> something to achieve something greater than others which is more\n> transparent\n> >> and efficient. It is always good to try and expect far greater success.\n> >> There is nothing wrong being optimistic and expecting something very\n> large\n> >> if it is measureable by quantum mechanism no matter what others may\n> think or\n> >> they may say ?\n> >>\n> >>\n> >>\n> >> Try your best but plan ahead with systemitic strategic capacity. I used\n> to\n> >> hear from the older folks two and a half decades ago ?something must\n> emerge,\n> >> something must emerge? they used to say it day and night but when\n> something\n> >> has emerged they cannot see it, some of them are day blind and the rest\n> have\n> >> gone out of their own mind; I think you all will find, what you are\n> looking\n> >> forward to find but please be kind to each other no matter what the\n> >> backbiter say distressful things behind your back ?  Be determined and\n> try;\n> >> try and try again and again until you find a perfect algorithm to\n> complete\n> >> your mission.\n> >>\n> >>\n> >>\n> >> Satoshi Nakamoto\n> >>\n> >>\n> >>\n> >\n> >\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> >\n>\n>\n> ------------------------------\n>\n> Message: 5\n> Date: Wed, 15 Nov 2017 21:07:22 +1030\n> From: Rusty Russell <rusty at rustcorp.com.au>\n> To: Tomas <tomas at bitcrust.org>,\n>         lightning-dev at lists.linuxfoundation.org\n> Subject: Re: [Lightning-dev] Questions on SIGHASH_NOINPUT\n> Message-ID: <87shdf4yl9.fsf at rustcorp.com.au>\n> Content-Type: text/plain\n>\n> Tomas <tomas at bitcrust.org> writes:\n> > Thank you for your feedback,\n> >\n> > On Sun, Nov 12, 2017, at 04:04, Rusty Russell wrote:\n> >> Malleation is a problem for every commitment transaction: we use HTLC\n> >> transactions which depend on it.  Now, in theory SIGHASH_NOINPUT could\n> >> be used to work around malleation here too, by allowing you to update\n> >> the dependent transaction, but you need separate keys on every output to\n> >> ensure that transactions can't be connected to the wrong outputs.\n> >\n> > But doesn't the current specification already ensure that every key is\n> > only used once? At least that is what I am understanding from the key\n> > derivation rules at:\n> >\n> > https://github.com/lightningnetwork/lightning-rfc/blob/master/03-\n> transactions.md\n>\n> It's different for different commitment transactions, not not for\n> different HTLC outputs attached to the same transaction.\n>\n> >> IIRC it cuts the number of updates down by about a factor of 2 under\n> >> typical use, more under weird conditions.  Basically you can re-attach\n> >> the HTLC transaction instead of needing a new one.\n> >>\n> >> IMHO SIGHASH_NOINPUT is a generally nice thing to have, though it's\n> >> extremely dangerous if you reuse keys at all.  So, don't do that :)\n> >\n> > If the prescribed key derivation algorithm ensures uniqueness, under\n> > what circumstances could the keys be reused? Is it just a faulty\n> > implementation here that is the risk?\n>\n> Yes, if you reuse addresses, a signed SIGHASH_NOINPUT input can be\n> attached to either one.  This may (or may not) be a problem, depending\n> on the exact usage.\n>\n> Cheers,\n> Rusty.\n>\n>\n> ------------------------------\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n> End of Lightning-dev Digest, Vol 27, Issue 9\n> ********************************************\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171115/e9a5a39a/attachment.html>"
            }
        ],
        "thread_summary": {
            "title": "Unsubscribe",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Jonathan C. Frei"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 9024
        }
    },
    {
        "title": "[Lightning-dev] General question on routing difficulties",
        "thread_messages": [
            {
                "author": "Ivan Raszl",
                "date": "2017-11-16T14:26:02",
                "message_text_only": "I came across a thread discussing lightning network on reddit. A comment\nwas stating there is an unresolvable issue with the concept of lightning\nnetwork, related to routing. Quoting the comment:\n\n\"The problem is, actually scaling and preventing decentralization requires\nfar more than a nice UX that lets you shoot tx from alpha-tester-A to\nalpha-tester-B, and Lightning currently utterly fails at both of them. It\ncan't scale to 100,000 users due to routing difficulties; nor does it has\nany plan of bootstrapping to \"everyone using it\" without the hubs\nhypercentralizing to a few \"liquidity providers\" (read:banks); nor does it\nhave any plans to have actual security on a congested blockchain with high\nfees. As a scaling solution, Lightning is a lot worse than the blockchain\nitself right now.\"\n\nCan somebody comment on this? Thanks!\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171116/e5eb6914/attachment.html>"
            },
            {
                "author": "Benjamin Mord",
                "date": "2017-11-16T16:01:18",
                "message_text_only": "Ivan,\n\nThat is mostly false, but with bits of truth sprinkled in. Contact me at\nben at mord.io for further discussion so we tread lightly on the lists' email\ninboxes. But briefly: scale-capable routing protocols are possible as\ndemonstrated by IP and thus by the internet itself. As for centralizing\nflow through small number of liquidity providers, yes that does seem\neconomically probable, at least unless / until off-chain channel\nrebalancing mechanism (like the recently proposed \"revive\" protocol) come\nabout. Bitcoin script is not currently revive-capable but Ethereum is, so\neither Bitcoin revive could be enabled via two-way pegged sidechain\nprotocol with Ethereum, or even better, by a purpose-built (yet still not\nTuring-complete) extension to Bitcoin script itself in the future. In\neither case the lightning network seems a key first step, and even were\noff-chain payment rebalancing not possible for some odd reason, the\nlightning network seems extremely valuable and scaleable - regardless\nbecause the centralization you speak is not one that affects safety of the\nmoney supply itself, and these centralized hubs would be more dispensable /\nswappable versus the mining centralization risk that people more often talk\nabout in Bitcoin. Lightning network centralization, even if it persisted\nsomehow despite revive and future concepts, would not be an existential\nrisk. As for transaction fees, the idea is only channel setup / tear down\nare required greatly reducing fees. Yes if txin fees were millions of\ndollars then people could not practically penalize fraud, but that is\nunlikely. Even if txin fees made fraud claims marginally unprofitable (yet\npractical) that would still be ok - the judicial systems of most countries\nprove that people go beyond self-interest when sufficiently ticked, a fact\nof human psychology which in turn creates the incentives that support\nhonest business. (Also please be aware I'm not a lightning code\ncontributor, so that team might also be doing more to address already than\nI thought to mention above.)\n\nI'll post more about this on http://ben.mord.io\n\nThanks,\nBen\n\n\nOn Thu, Nov 16, 2017 at 9:26 AM, Ivan Raszl <iraszl at gmail.com> wrote:\n\n> I came across a thread discussing lightning network on reddit. A comment\n> was stating there is an unresolvable issue with the concept of lightning\n> network, related to routing. Quoting the comment:\n>\n> \"The problem is, actually scaling and preventing decentralization requires\n> far more than a nice UX that lets you shoot tx from alpha-tester-A to\n> alpha-tester-B, and Lightning currently utterly fails at both of them. It\n> can't scale to 100,000 users due to routing difficulties; nor does it has\n> any plan of bootstrapping to \"everyone using it\" without the hubs\n> hypercentralizing to a few \"liquidity providers\" (read:banks); nor does it\n> have any plans to have actual security on a congested blockchain with high\n> fees. As a scaling solution, Lightning is a lot worse than the blockchain\n> itself right now.\"\n>\n> Can somebody comment on this? Thanks!\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171116/d24b925d/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2017-11-17T13:04:21",
                "message_text_only": "On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io> wrote:\n\n> Ivan,\n>\n> That is mostly false, but with bits of truth sprinkled in. Contact me at\n> ben at mord.io for further discussion so we tread lightly on the lists'\n> email inboxes.\n>\n\nI think this is exactly the right venue to discuss these kinds of issue,\nso please don't move the conversation somewhere else :-)\n\nRouting is still very much in flux, we have a minimally viable routing\nprotocol in the spec [1]. It is minimal in the sense that we just push\nthe entire network's topology to the edges, which can then locally\ncompute routes. This is effectively a source-routed network, which\nmatches the requirements of the onion routing protocol we use for\nprivact as well. But this does not mean that this is protocol is set in\nstone. We are actively working on finding better solutions to the\nproblem of finding routes across a vast network of millions if not\nbillions of nodes. Distance vector routing such as BGP uses may be one\noption like Ben suggested.\n\nFor now the network can easily scale to about 1 million channels [2]\neven on very limited devices, Upgrading to another protocol at a later\npoint in time is trivial, since none of the routing information is\nconsensus critical. We have all the extension points built in to allow\nfuture extensibility.\n\n\n> But briefly: scale-capable routing protocols are possible as demonstrated\n> by IP and thus by the internet itself. As for centralizing flow through\n> small number of liquidity providers, yes that does seem economically\n> probable, at least unless / until off-chain channel rebalancing mechanism\n> (like the recently proposed \"revive\" protocol) come about. Bitcoin script\n> is not currently revive-capable but Ethereum is, so either Bitcoin revive\n> could be enabled via two-way pegged sidechain protocol with Ethereum, or\n> even better, by a purpose-built (yet still not Turing-complete) extension\n> to Bitcoin script itself in the future.\n>\n\nAs a matter of fact, Conrad and I just published a similar technique for\noff-chain channel rebalancing and fund re-allocation based solely on\nBitcoin [3] (major props to Conrad for the excellent writeup!). The\nflexibility in Bitcoin exists.\n\nAs for the hubs everybody is assuming will form, I don't think they're\nas likely to form. Creating such a hub is extremely costly since it'll\nhave to allocate sufficient funds to cover the maximum imbalance of all\nof its channels ahead of time. Then the fees must cover the opportunity\ncost of allocating all of those funds to channels instead of investing\nthem somewhere else. On top of that the funds will not be moved alot\nsince they serve only a small number of endpoints connected through\nthose channels, this compounds the problem of having high fees. The high\nfees make the hub channels a really bad choice for your payments, after\nall you were looking for small fees for your payments, right? It opens\nup an opportunity for nodes to open bypasses that grab some of the\ntraffic and associated fees from the expensive hub.\n\nAll of that being said, we should be careful about our predictions on\nhow the topology will look, I added some counter arguments to a\nhub-and-spoke network forming, but nobody can really be sure about\nwhat'll happen.\n\n\n> In either case the lightning network seems a key first step, and even were\n> off-chain payment rebalancing not possible for some odd reason, the\n> lightning network seems extremely valuable and scaleable - regardless\n> because the centralization you speak is not one that affects safety of the\n> money supply itself, and these centralized hubs would be more dispensable /\n> swappable versus the mining centralization risk that people more often talk\n> about in Bitcoin. Lightning network centralization, even if it persisted\n> somehow despite revive and future concepts, would not be an existential\n> risk.\n>\n\nRebalancing is definitely possible, even without [3], you can\ndisincentivize the use of a channel until they have been rebalanced. For\nlong term imbalance, opening another channel may be the best option\n\n\n> As for transaction fees, the idea is only channel setup / tear down are\n> required greatly reducing fees. Yes if txin fees were millions of dollars\n> then people could not practically penalize fraud, but that is unlikely.\n> Even if txin fees made fraud claims marginally unprofitable (yet practical)\n> that would still be ok - the judicial systems of most countries prove that\n> people go beyond self-interest when sufficiently ticked, a fact of human\n> psychology which in turn creates the incentives that support honest\n> business. (Also please be aware I'm not a lightning code contributor, so\n> that team might also be doing more to address already than I thought to\n> mention above.)\n>\n\nThis is open to speculation as well. We hope to reduce the load on the\non-chain network sufficiently to allow timely on-chain settlements. By\naggregating payments off-chain we can also aggregate the fees and then\nuse them to pay on-chain fees. So don't consider the on-chain fees for\nyour channels as your sole loss, they are paid for by payments you\nforward. Ultimately this should encourage participants to open channels\nthat support the network as a whole, not just themselves. We are\nbuilding automations that should take care of this, the user won't have\nto do anything to improve the network topology.\n\nCheers,\nChristian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171117/fc10ae83/attachment.html>"
            },
            {
                "author": "Benjamin Mord",
                "date": "2017-11-17T14:10:48",
                "message_text_only": "\"I think this is exactly the right venue to discuss these kinds of\nissue...\" - you are probably right! My bad.\n\nChristian, thank you for your knowledgable reply. The footnotes did not\ncome through on my end, I am especially interested in [3]. Do you have a\nlink? I am thrilled to hear of a Bitcoin-compatible revive alternative! :)\n\nAre we keeping an inventory somewhere of the cryptographic primitives being\nused in lightning and the specific assumptions being made about them (e.g.\npreimage resistance vs collision resistance and such)? One project I have\nnot yet found but believe we need across the entire cryptocurrency\ncommunity, is a (wiki-style?) inventory of unproven mathematical\nassumptions (e.g. hardness of discrete logarithm) and/or cryptographic\nprimitives, cataloged in terms of the cryptocurrency technologies which\nrequire them. Such a resource could help the community respond more\nquickly, comprehensively, and transparently to the inevitable cryptanalytic\nsurprises that will pop up over time (especially from the quantum\ncryptanalytic area, but even the classical cryptanalytic community as well).\n\nRelated, I believe the ideal end state would be to only assume existence of\na preimage-resistant hash function, and to code such that one function\ncould be quickly swapped with another and thus update entire system. I'm\nnot sure if that is a realistic goal, but here is my first attempt to move\nin that direction in case it is of interest to lightning. It is hard to\nimagine it would be a new idea, although I have not yet found the precedent:\nhttp://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n\nThanks,\nBen\n\nOn Nov 17, 2017 8:04 AM, \"Christian Decker\" <decker.christian at gmail.com>\nwrote:\n\nOn Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io> wrote:\n\n> Ivan,\n>\n> That is mostly false, but with bits of truth sprinkled in. Contact me at\n> ben at mord.io for further discussion so we tread lightly on the lists'\n> email inboxes.\n>\n\nI think this is exactly the right venue to discuss these kinds of issue,\nso please don't move the conversation somewhere else :-)\n\nRouting is still very much in flux, we have a minimally viable routing\nprotocol in the spec [1]. It is minimal in the sense that we just push\nthe entire network's topology to the edges, which can then locally\ncompute routes. This is effectively a source-routed network, which\nmatches the requirements of the onion routing protocol we use for\nprivact as well. But this does not mean that this is protocol is set in\nstone. We are actively working on finding better solutions to the\nproblem of finding routes across a vast network of millions if not\nbillions of nodes. Distance vector routing such as BGP uses may be one\noption like Ben suggested.\n\nFor now the network can easily scale to about 1 million channels [2]\neven on very limited devices, Upgrading to another protocol at a later\npoint in time is trivial, since none of the routing information is\nconsensus critical. We have all the extension points built in to allow\nfuture extensibility.\n\n\n> But briefly: scale-capable routing protocols are possible as demonstrated\n> by IP and thus by the internet itself. As for centralizing flow through\n> small number of liquidity providers, yes that does seem economically\n> probable, at least unless / until off-chain channel rebalancing mechanism\n> (like the recently proposed \"revive\" protocol) come about. Bitcoin script\n> is not currently revive-capable but Ethereum is, so either Bitcoin revive\n> could be enabled via two-way pegged sidechain protocol with Ethereum, or\n> even better, by a purpose-built (yet still not Turing-complete) extension\n> to Bitcoin script itself in the future.\n>\n\nAs a matter of fact, Conrad and I just published a similar technique for\noff-chain channel rebalancing and fund re-allocation based solely on\nBitcoin [3] (major props to Conrad for the excellent writeup!). The\nflexibility in Bitcoin exists.\n\nAs for the hubs everybody is assuming will form, I don't think they're\nas likely to form. Creating such a hub is extremely costly since it'll\nhave to allocate sufficient funds to cover the maximum imbalance of all\nof its channels ahead of time. Then the fees must cover the opportunity\ncost of allocating all of those funds to channels instead of investing\nthem somewhere else. On top of that the funds will not be moved alot\nsince they serve only a small number of endpoints connected through\nthose channels, this compounds the problem of having high fees. The high\nfees make the hub channels a really bad choice for your payments, after\nall you were looking for small fees for your payments, right? It opens\nup an opportunity for nodes to open bypasses that grab some of the\ntraffic and associated fees from the expensive hub.\n\nAll of that being said, we should be careful about our predictions on\nhow the topology will look, I added some counter arguments to a\nhub-and-spoke network forming, but nobody can really be sure about\nwhat'll happen.\n\n\n> In either case the lightning network seems a key first step, and even were\n> off-chain payment rebalancing not possible for some odd reason, the\n> lightning network seems extremely valuable and scaleable - regardless\n> because the centralization you speak is not one that affects safety of the\n> money supply itself, and these centralized hubs would be more dispensable /\n> swappable versus the mining centralization risk that people more often talk\n> about in Bitcoin. Lightning network centralization, even if it persisted\n> somehow despite revive and future concepts, would not be an existential\n> risk.\n>\n\nRebalancing is definitely possible, even without [3], you can\ndisincentivize the use of a channel until they have been rebalanced. For\nlong term imbalance, opening another channel may be the best option\n\n\n> As for transaction fees, the idea is only channel setup / tear down are\n> required greatly reducing fees. Yes if txin fees were millions of dollars\n> then people could not practically penalize fraud, but that is unlikely.\n> Even if txin fees made fraud claims marginally unprofitable (yet practical)\n> that would still be ok - the judicial systems of most countries prove that\n> people go beyond self-interest when sufficiently ticked, a fact of human\n> psychology which in turn creates the incentives that support honest\n> business. (Also please be aware I'm not a lightning code contributor, so\n> that team might also be doing more to address already than I thought to\n> mention above.)\n>\n\nThis is open to speculation as well. We hope to reduce the load on the\non-chain network sufficiently to allow timely on-chain settlements. By\naggregating payments off-chain we can also aggregate the fees and then\nuse them to pay on-chain fees. So don't consider the on-chain fees for\nyour channels as your sole loss, they are paid for by payments you\nforward. Ultimately this should encourage participants to open channels\nthat support the network as a whole, not just themselves. We are\nbuilding automations that should take care of this, the user won't have\nto do anything to improve the network topology.\n\nCheers,\nChristian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171117/e5c6d7af/attachment-0001.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2017-11-17T14:30:14",
                "message_text_only": "Oh yeah, my mail tool destroyed that mail quite expertly :-)\n\nThe footnotes were\n[1]\nhttps://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md\n[2]\nhttps://medium.com/@rusty_lightning/lightning-routing-rough-background-dbac930abbad\n[3]\nhttps://www.tik.ee.ethz.ch/file/a20a865ce40d40c8f942cf206a7cba96/Scalable_Funding_Of_Blockchain_Micropayment_Networks%20(1).pdf\n\nWe will eventually move away from the hash function based approach in favor\nof something that allows us to decorrelate hops in a route. We have indeed\nstarted writing down some of the ideas at least for Lightning in the\nproject's wiki [4], but they're definitely not fleshed out.\n\n[4] https://github.com/lightningnetwork/lightning-rfc/wiki/Brainstorming\n\n\nOn Fri, Nov 17, 2017 at 3:10 PM Benjamin Mord <ben at mord.io> wrote:\n\n> \"I think this is exactly the right venue to discuss these kinds of\n> issue...\" - you are probably right! My bad.\n>\n> Christian, thank you for your knowledgable reply. The footnotes did not\n> come through on my end, I am especially interested in [3]. Do you have a\n> link? I am thrilled to hear of a Bitcoin-compatible revive alternative! :)\n>\n> Are we keeping an inventory somewhere of the cryptographic primitives\n> being used in lightning and the specific assumptions being made about them\n> (e.g. preimage resistance vs collision resistance and such)? One project I\n> have not yet found but believe we need across the entire cryptocurrency\n> community, is a (wiki-style?) inventory of unproven mathematical\n> assumptions (e.g. hardness of discrete logarithm) and/or cryptographic\n> primitives, cataloged in terms of the cryptocurrency technologies which\n> require them. Such a resource could help the community respond more\n> quickly, comprehensively, and transparently to the inevitable cryptanalytic\n> surprises that will pop up over time (especially from the quantum\n> cryptanalytic area, but even the classical cryptanalytic community as well).\n>\n> Related, I believe the ideal end state would be to only assume existence\n> of a preimage-resistant hash function, and to code such that one function\n> could be quickly swapped with another and thus update entire system. I'm\n> not sure if that is a realistic goal, but here is my first attempt to move\n> in that direction in case it is of interest to lightning. It is hard to\n> imagine it would be a new idea, although I have not yet found the precedent:\n> http://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n>\n> Thanks,\n> Ben\n>\n>\n> On Nov 17, 2017 8:04 AM, \"Christian Decker\" <decker.christian at gmail.com>\n> wrote:\n>\n> On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io> wrote:\n>\n>> Ivan,\n>>\n>> That is mostly false, but with bits of truth sprinkled in. Contact me at\n>> ben at mord.io for further discussion so we tread lightly on the lists'\n>> email inboxes.\n>>\n>\n> I think this is exactly the right venue to discuss these kinds of issue,\n> so please don't move the conversation somewhere else :-)\n>\n> Routing is still very much in flux, we have a minimally viable routing\n> protocol in the spec [1]. It is minimal in the sense that we just push\n> the entire network's topology to the edges, which can then locally\n> compute routes. This is effectively a source-routed network, which\n> matches the requirements of the onion routing protocol we use for\n> privact as well. But this does not mean that this is protocol is set in\n> stone. We are actively working on finding better solutions to the\n> problem of finding routes across a vast network of millions if not\n> billions of nodes. Distance vector routing such as BGP uses may be one\n> option like Ben suggested.\n>\n> For now the network can easily scale to about 1 million channels [2]\n> even on very limited devices, Upgrading to another protocol at a later\n> point in time is trivial, since none of the routing information is\n> consensus critical. We have all the extension points built in to allow\n> future extensibility.\n>\n>\n>> But briefly: scale-capable routing protocols are possible as demonstrated\n>> by IP and thus by the internet itself. As for centralizing flow through\n>> small number of liquidity providers, yes that does seem economically\n>> probable, at least unless / until off-chain channel rebalancing mechanism\n>> (like the recently proposed \"revive\" protocol) come about. Bitcoin script\n>> is not currently revive-capable but Ethereum is, so either Bitcoin revive\n>> could be enabled via two-way pegged sidechain protocol with Ethereum, or\n>> even better, by a purpose-built (yet still not Turing-complete) extension\n>> to Bitcoin script itself in the future.\n>>\n>\n> As a matter of fact, Conrad and I just published a similar technique for\n> off-chain channel rebalancing and fund re-allocation based solely on\n> Bitcoin [3] (major props to Conrad for the excellent writeup!). The\n> flexibility in Bitcoin exists.\n>\n> As for the hubs everybody is assuming will form, I don't think they're\n> as likely to form. Creating such a hub is extremely costly since it'll\n> have to allocate sufficient funds to cover the maximum imbalance of all\n> of its channels ahead of time. Then the fees must cover the opportunity\n> cost of allocating all of those funds to channels instead of investing\n> them somewhere else. On top of that the funds will not be moved alot\n> since they serve only a small number of endpoints connected through\n> those channels, this compounds the problem of having high fees. The high\n> fees make the hub channels a really bad choice for your payments, after\n> all you were looking for small fees for your payments, right? It opens\n> up an opportunity for nodes to open bypasses that grab some of the\n> traffic and associated fees from the expensive hub.\n>\n> All of that being said, we should be careful about our predictions on\n> how the topology will look, I added some counter arguments to a\n> hub-and-spoke network forming, but nobody can really be sure about\n> what'll happen.\n>\n>\n>> In either case the lightning network seems a key first step, and even\n>> were off-chain payment rebalancing not possible for some odd reason, the\n>> lightning network seems extremely valuable and scaleable - regardless\n>> because the centralization you speak is not one that affects safety of the\n>> money supply itself, and these centralized hubs would be more dispensable /\n>> swappable versus the mining centralization risk that people more often talk\n>> about in Bitcoin. Lightning network centralization, even if it persisted\n>> somehow despite revive and future concepts, would not be an existential\n>> risk.\n>>\n>\n> Rebalancing is definitely possible, even without [3], you can\n> disincentivize the use of a channel until they have been rebalanced. For\n> long term imbalance, opening another channel may be the best option\n>\n>\n>> As for transaction fees, the idea is only channel setup / tear down are\n>> required greatly reducing fees. Yes if txin fees were millions of dollars\n>> then people could not practically penalize fraud, but that is unlikely.\n>> Even if txin fees made fraud claims marginally unprofitable (yet practical)\n>> that would still be ok - the judicial systems of most countries prove that\n>> people go beyond self-interest when sufficiently ticked, a fact of human\n>> psychology which in turn creates the incentives that support honest\n>> business. (Also please be aware I'm not a lightning code contributor, so\n>> that team might also be doing more to address already than I thought to\n>> mention above.)\n>>\n>\n> This is open to speculation as well. We hope to reduce the load on the\n> on-chain network sufficiently to allow timely on-chain settlements. By\n> aggregating payments off-chain we can also aggregate the fees and then\n> use them to pay on-chain fees. So don't consider the on-chain fees for\n> your channels as your sole loss, they are paid for by payments you\n> forward. Ultimately this should encourage participants to open channels\n> that support the network as a whole, not just themselves. We are\n> building automations that should take care of this, the user won't have\n> to do anything to improve the network topology.\n>\n> Cheers,\n> Christian\n>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171117/c2d279ff/attachment.html>"
            },
            {
                "author": "Benjamin Mord",
                "date": "2017-11-17T15:25:16",
                "message_text_only": "Thanks for the links!\n\nAnd just to clarify, my other comments relate to cryptographic conservatism\nin general, and not specifically to routing. I switched topics, sorry for\nthe confusion.\n\nOn Nov 17, 2017 9:30 AM, \"Christian Decker\" <decker.christian at gmail.com>\nwrote:\n\n> Oh yeah, my mail tool destroyed that mail quite expertly :-)\n>\n> The footnotes were\n> [1] https://github.com/lightningnetwork/lightning-\n> rfc/blob/master/07-routing-gossip.md\n> [2] https://medium.com/@rusty_lightning/lightning-routing-\n> rough-background-dbac930abbad\n> [3] https://www.tik.ee.ethz.ch/file/a20a865ce40d40c8f942cf206a7cba\n> 96/Scalable_Funding_Of_Blockchain_Micropayment_Networks%20(1).pdf\n>\n> We will eventually move away from the hash function based approach in\n> favor of something that allows us to decorrelate hops in a route. We have\n> indeed started writing down some of the ideas at least for Lightning in the\n> project's wiki [4], but they're definitely not fleshed out.\n>\n> [4] https://github.com/lightningnetwork/lightning-rfc/wiki/Brainstorming\n>\n>\n> On Fri, Nov 17, 2017 at 3:10 PM Benjamin Mord <ben at mord.io> wrote:\n>\n>> \"I think this is exactly the right venue to discuss these kinds of\n>> issue...\" - you are probably right! My bad.\n>>\n>> Christian, thank you for your knowledgable reply. The footnotes did not\n>> come through on my end, I am especially interested in [3]. Do you have a\n>> link? I am thrilled to hear of a Bitcoin-compatible revive alternative! :)\n>>\n>> Are we keeping an inventory somewhere of the cryptographic primitives\n>> being used in lightning and the specific assumptions being made about them\n>> (e.g. preimage resistance vs collision resistance and such)? One project I\n>> have not yet found but believe we need across the entire cryptocurrency\n>> community, is a (wiki-style?) inventory of unproven mathematical\n>> assumptions (e.g. hardness of discrete logarithm) and/or cryptographic\n>> primitives, cataloged in terms of the cryptocurrency technologies which\n>> require them. Such a resource could help the community respond more\n>> quickly, comprehensively, and transparently to the inevitable cryptanalytic\n>> surprises that will pop up over time (especially from the quantum\n>> cryptanalytic area, but even the classical cryptanalytic community as well).\n>>\n>> Related, I believe the ideal end state would be to only assume existence\n>> of a preimage-resistant hash function, and to code such that one function\n>> could be quickly swapped with another and thus update entire system. I'm\n>> not sure if that is a realistic goal, but here is my first attempt to move\n>> in that direction in case it is of interest to lightning. It is hard to\n>> imagine it would be a new idea, although I have not yet found the precedent:\n>> http://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n>>\n>> Thanks,\n>> Ben\n>>\n>>\n>> On Nov 17, 2017 8:04 AM, \"Christian Decker\" <decker.christian at gmail.com>\n>> wrote:\n>>\n>> On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io> wrote:\n>>\n>>> Ivan,\n>>>\n>>> That is mostly false, but with bits of truth sprinkled in. Contact me at\n>>> ben at mord.io for further discussion so we tread lightly on the lists'\n>>> email inboxes.\n>>>\n>>\n>> I think this is exactly the right venue to discuss these kinds of issue,\n>> so please don't move the conversation somewhere else :-)\n>>\n>> Routing is still very much in flux, we have a minimally viable routing\n>> protocol in the spec [1]. It is minimal in the sense that we just push\n>> the entire network's topology to the edges, which can then locally\n>> compute routes. This is effectively a source-routed network, which\n>> matches the requirements of the onion routing protocol we use for\n>> privact as well. But this does not mean that this is protocol is set in\n>> stone. We are actively working on finding better solutions to the\n>> problem of finding routes across a vast network of millions if not\n>> billions of nodes. Distance vector routing such as BGP uses may be one\n>> option like Ben suggested.\n>>\n>> For now the network can easily scale to about 1 million channels [2]\n>> even on very limited devices, Upgrading to another protocol at a later\n>> point in time is trivial, since none of the routing information is\n>> consensus critical. We have all the extension points built in to allow\n>> future extensibility.\n>>\n>>\n>>> But briefly: scale-capable routing protocols are possible as\n>>> demonstrated by IP and thus by the internet itself. As for centralizing\n>>> flow through small number of liquidity providers, yes that does seem\n>>> economically probable, at least unless / until off-chain channel\n>>> rebalancing mechanism (like the recently proposed \"revive\" protocol) come\n>>> about. Bitcoin script is not currently revive-capable but Ethereum is, so\n>>> either Bitcoin revive could be enabled via two-way pegged sidechain\n>>> protocol with Ethereum, or even better, by a purpose-built (yet still not\n>>> Turing-complete) extension to Bitcoin script itself in the future.\n>>>\n>>\n>> As a matter of fact, Conrad and I just published a similar technique for\n>> off-chain channel rebalancing and fund re-allocation based solely on\n>> Bitcoin [3] (major props to Conrad for the excellent writeup!). The\n>> flexibility in Bitcoin exists.\n>>\n>> As for the hubs everybody is assuming will form, I don't think they're\n>> as likely to form. Creating such a hub is extremely costly since it'll\n>> have to allocate sufficient funds to cover the maximum imbalance of all\n>> of its channels ahead of time. Then the fees must cover the opportunity\n>> cost of allocating all of those funds to channels instead of investing\n>> them somewhere else. On top of that the funds will not be moved alot\n>> since they serve only a small number of endpoints connected through\n>> those channels, this compounds the problem of having high fees. The high\n>> fees make the hub channels a really bad choice for your payments, after\n>> all you were looking for small fees for your payments, right? It opens\n>> up an opportunity for nodes to open bypasses that grab some of the\n>> traffic and associated fees from the expensive hub.\n>>\n>> All of that being said, we should be careful about our predictions on\n>> how the topology will look, I added some counter arguments to a\n>> hub-and-spoke network forming, but nobody can really be sure about\n>> what'll happen.\n>>\n>>\n>>> In either case the lightning network seems a key first step, and even\n>>> were off-chain payment rebalancing not possible for some odd reason, the\n>>> lightning network seems extremely valuable and scaleable - regardless\n>>> because the centralization you speak is not one that affects safety of the\n>>> money supply itself, and these centralized hubs would be more dispensable /\n>>> swappable versus the mining centralization risk that people more often talk\n>>> about in Bitcoin. Lightning network centralization, even if it persisted\n>>> somehow despite revive and future concepts, would not be an existential\n>>> risk.\n>>>\n>>\n>> Rebalancing is definitely possible, even without [3], you can\n>> disincentivize the use of a channel until they have been rebalanced. For\n>> long term imbalance, opening another channel may be the best option\n>>\n>>\n>>> As for transaction fees, the idea is only channel setup / tear down are\n>>> required greatly reducing fees. Yes if txin fees were millions of dollars\n>>> then people could not practically penalize fraud, but that is unlikely.\n>>> Even if txin fees made fraud claims marginally unprofitable (yet practical)\n>>> that would still be ok - the judicial systems of most countries prove that\n>>> people go beyond self-interest when sufficiently ticked, a fact of human\n>>> psychology which in turn creates the incentives that support honest\n>>> business. (Also please be aware I'm not a lightning code contributor, so\n>>> that team might also be doing more to address already than I thought to\n>>> mention above.)\n>>>\n>>\n>> This is open to speculation as well. We hope to reduce the load on the\n>> on-chain network sufficiently to allow timely on-chain settlements. By\n>> aggregating payments off-chain we can also aggregate the fees and then\n>> use them to pay on-chain fees. So don't consider the on-chain fees for\n>> your channels as your sole loss, they are paid for by payments you\n>> forward. Ultimately this should encourage participants to open channels\n>> that support the network as a whole, not just themselves. We are\n>> building automations that should take care of this, the user won't have\n>> to do anything to improve the network topology.\n>>\n>> Cheers,\n>> Christian\n>>\n>>\n>>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171117/68bb665c/attachment-0001.html>"
            },
            {
                "author": "Saravanan Vijayakumaran",
                "date": "2017-11-18T01:09:40",
                "message_text_only": "Hi Christian,\n\nAre there any open source simulators available for trying different routing\nstrategies? Or even a simulator for the Lightning network as a whole?\n\nRegards\nsarva\n\n\nOn Fri, Nov 17, 2017 at 8:00 PM, Christian Decker <\ndecker.christian at gmail.com> wrote:\n\n> Oh yeah, my mail tool destroyed that mail quite expertly :-)\n>\n> The footnotes were\n> [1] https://github.com/lightningnetwork/lightning-\n> rfc/blob/master/07-routing-gossip.md\n> [2] https://medium.com/@rusty_lightning/lightning-routing-\n> rough-background-dbac930abbad\n> [3] https://www.tik.ee.ethz.ch/file/a20a865ce40d40c8f942cf206a7cba\n> 96/Scalable_Funding_Of_Blockchain_Micropayment_Networks%20(1).pdf\n>\n> We will eventually move away from the hash function based approach in\n> favor of something that allows us to decorrelate hops in a route. We have\n> indeed started writing down some of the ideas at least for Lightning in the\n> project's wiki [4], but they're definitely not fleshed out.\n>\n> [4] https://github.com/lightningnetwork/lightning-rfc/wiki/Brainstorming\n>\n>\n> On Fri, Nov 17, 2017 at 3:10 PM Benjamin Mord <ben at mord.io> wrote:\n>\n>> \"I think this is exactly the right venue to discuss these kinds of\n>> issue...\" - you are probably right! My bad.\n>>\n>> Christian, thank you for your knowledgable reply. The footnotes did not\n>> come through on my end, I am especially interested in [3]. Do you have a\n>> link? I am thrilled to hear of a Bitcoin-compatible revive alternative! :)\n>>\n>> Are we keeping an inventory somewhere of the cryptographic primitives\n>> being used in lightning and the specific assumptions being made about them\n>> (e.g. preimage resistance vs collision resistance and such)? One project I\n>> have not yet found but believe we need across the entire cryptocurrency\n>> community, is a (wiki-style?) inventory of unproven mathematical\n>> assumptions (e.g. hardness of discrete logarithm) and/or cryptographic\n>> primitives, cataloged in terms of the cryptocurrency technologies which\n>> require them. Such a resource could help the community respond more\n>> quickly, comprehensively, and transparently to the inevitable cryptanalytic\n>> surprises that will pop up over time (especially from the quantum\n>> cryptanalytic area, but even the classical cryptanalytic community as well).\n>>\n>> Related, I believe the ideal end state would be to only assume existence\n>> of a preimage-resistant hash function, and to code such that one function\n>> could be quickly swapped with another and thus update entire system. I'm\n>> not sure if that is a realistic goal, but here is my first attempt to move\n>> in that direction in case it is of interest to lightning. It is hard to\n>> imagine it would be a new idea, although I have not yet found the precedent:\n>> http://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n>>\n>> Thanks,\n>> Ben\n>>\n>>\n>> On Nov 17, 2017 8:04 AM, \"Christian Decker\" <decker.christian at gmail.com>\n>> wrote:\n>>\n>> On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io> wrote:\n>>\n>>> Ivan,\n>>>\n>>> That is mostly false, but with bits of truth sprinkled in. Contact me at\n>>> ben at mord.io for further discussion so we tread lightly on the lists'\n>>> email inboxes.\n>>>\n>>\n>> I think this is exactly the right venue to discuss these kinds of issue,\n>> so please don't move the conversation somewhere else :-)\n>>\n>> Routing is still very much in flux, we have a minimally viable routing\n>> protocol in the spec [1]. It is minimal in the sense that we just push\n>> the entire network's topology to the edges, which can then locally\n>> compute routes. This is effectively a source-routed network, which\n>> matches the requirements of the onion routing protocol we use for\n>> privact as well. But this does not mean that this is protocol is set in\n>> stone. We are actively working on finding better solutions to the\n>> problem of finding routes across a vast network of millions if not\n>> billions of nodes. Distance vector routing such as BGP uses may be one\n>> option like Ben suggested.\n>>\n>> For now the network can easily scale to about 1 million channels [2]\n>> even on very limited devices, Upgrading to another protocol at a later\n>> point in time is trivial, since none of the routing information is\n>> consensus critical. We have all the extension points built in to allow\n>> future extensibility.\n>>\n>>\n>>> But briefly: scale-capable routing protocols are possible as\n>>> demonstrated by IP and thus by the internet itself. As for centralizing\n>>> flow through small number of liquidity providers, yes that does seem\n>>> economically probable, at least unless / until off-chain channel\n>>> rebalancing mechanism (like the recently proposed \"revive\" protocol) come\n>>> about. Bitcoin script is not currently revive-capable but Ethereum is, so\n>>> either Bitcoin revive could be enabled via two-way pegged sidechain\n>>> protocol with Ethereum, or even better, by a purpose-built (yet still not\n>>> Turing-complete) extension to Bitcoin script itself in the future.\n>>>\n>>\n>> As a matter of fact, Conrad and I just published a similar technique for\n>> off-chain channel rebalancing and fund re-allocation based solely on\n>> Bitcoin [3] (major props to Conrad for the excellent writeup!). The\n>> flexibility in Bitcoin exists.\n>>\n>> As for the hubs everybody is assuming will form, I don't think they're\n>> as likely to form. Creating such a hub is extremely costly since it'll\n>> have to allocate sufficient funds to cover the maximum imbalance of all\n>> of its channels ahead of time. Then the fees must cover the opportunity\n>> cost of allocating all of those funds to channels instead of investing\n>> them somewhere else. On top of that the funds will not be moved alot\n>> since they serve only a small number of endpoints connected through\n>> those channels, this compounds the problem of having high fees. The high\n>> fees make the hub channels a really bad choice for your payments, after\n>> all you were looking for small fees for your payments, right? It opens\n>> up an opportunity for nodes to open bypasses that grab some of the\n>> traffic and associated fees from the expensive hub.\n>>\n>> All of that being said, we should be careful about our predictions on\n>> how the topology will look, I added some counter arguments to a\n>> hub-and-spoke network forming, but nobody can really be sure about\n>> what'll happen.\n>>\n>>\n>>> In either case the lightning network seems a key first step, and even\n>>> were off-chain payment rebalancing not possible for some odd reason, the\n>>> lightning network seems extremely valuable and scaleable - regardless\n>>> because the centralization you speak is not one that affects safety of the\n>>> money supply itself, and these centralized hubs would be more dispensable /\n>>> swappable versus the mining centralization risk that people more often talk\n>>> about in Bitcoin. Lightning network centralization, even if it persisted\n>>> somehow despite revive and future concepts, would not be an existential\n>>> risk.\n>>>\n>>\n>> Rebalancing is definitely possible, even without [3], you can\n>> disincentivize the use of a channel until they have been rebalanced. For\n>> long term imbalance, opening another channel may be the best option\n>>\n>>\n>>> As for transaction fees, the idea is only channel setup / tear down are\n>>> required greatly reducing fees. Yes if txin fees were millions of dollars\n>>> then people could not practically penalize fraud, but that is unlikely.\n>>> Even if txin fees made fraud claims marginally unprofitable (yet practical)\n>>> that would still be ok - the judicial systems of most countries prove that\n>>> people go beyond self-interest when sufficiently ticked, a fact of human\n>>> psychology which in turn creates the incentives that support honest\n>>> business. (Also please be aware I'm not a lightning code contributor, so\n>>> that team might also be doing more to address already than I thought to\n>>> mention above.)\n>>>\n>>\n>> This is open to speculation as well. We hope to reduce the load on the\n>> on-chain network sufficiently to allow timely on-chain settlements. By\n>> aggregating payments off-chain we can also aggregate the fees and then\n>> use them to pay on-chain fees. So don't consider the on-chain fees for\n>> your channels as your sole loss, they are paid for by payments you\n>> forward. Ultimately this should encourage participants to open channels\n>> that support the network as a whole, not just themselves. We are\n>> building automations that should take care of this, the user won't have\n>> to do anything to improve the network topology.\n>>\n>> Cheers,\n>> Christian\n>>\n>>\n>>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171118/06640a3d/attachment.html>"
            },
            {
                "author": "Pedro Moreno Sanchez",
                "date": "2017-11-21T15:37:48",
                "message_text_only": "Hello,\n\nmy name is Pedro Moreno-Sanchez and I am a PhD student at the computer\nscience department at Purdue. I would like to bring to your attention a\nnovel routing algorithm suitable for the Lightning Network (LN) that I\nhave been working on with my supervisor Prof. Aniket Kate (Purdue\nUniversity) and my co-workers Stefanie Roos and Prof. Ian Goldberg\n(University of Waterloo).\n\nOur approach is called SpeedyMurmurs, a routing algorithm for\ndecentralized payment networks such as the LN. SpeedyMurmurs uses an\nembedding-based approach, meaning that the algorithm assigns meaningful\ncoordinates to nodes that enable efficient and effective discovery of\npayment paths.  In a nutshell, SpeedyMurmurs creates a spanning tree by\nmeans of a Breadth-First Search and then associates a coordinate to each\nnode depending on its position in the tree. A path from the sender to\nthe receiver is then calculated in a flexible manner, with each\nintermediate node choosing the next node in the path as a function of\nits neighbors' coordinates, available funds and closeness to the\nreceiver. To account for topology changes (e.g., a new channel is\ncreated), the routing information is locally updated by only those\naffected nodes in the network.\n\nWe have simulated several configurations of SpeedyMurmurs using real\ndata from the Ripple network and compared it with other routing\nalgorithms available in the literature. Our simulation results show that\nSpeedyMurmurs is able to find paths at about twice faster, reduces the\ncommunication overhead by at least a factor of 2 and maintains a similar\nor higher payment success ratio. Our simulation framework is open source\nand we believe that it might be of independent interest for this\ncommunity to test this and any other alternative protocols that you\nmight have in mind. If you are interested, we are happy to extend on this.\n\nFinally, we also show that SpeedyMurmurs achieves the privacy notions of\ninterest in the LN. In particular, SpeedyMurmurs achieves value privacy,\ni.e., the total value of a transaction remains hidden, as well as sender\nand receiver privacy, i.e., the identities of the two transacting nodes\nremain hidden from the adversary.\n\n\nYou can find all the details in the draft of our paper [1]. The final\nversion of this work will appear at NDSS 2018 conference [2]. We would\nbe glad to hear any question and feedback from you and are open to carry\nout further collaborations if this line of work is of interest for you.\n\nBest regards,\nPedro, Stef, Aniket and Ian.\n\n[1] https://arxiv.org/abs/1709.05748\n[2] https://www.ndss-symposium.org/\n\nOn 11/17/17 8:09 PM, Saravanan Vijayakumaran wrote:\n> Hi Christian,\n> \n> Are there any open source simulators available for trying different\n> routing strategies? Or even a simulator for the Lightning network as a\n> whole?\n> \n> Regards\n> sarva\n> \n> \n> On Fri, Nov 17, 2017 at 8:00 PM, Christian Decker\n> <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:\n> \n>     Oh yeah, my mail tool destroyed that mail quite expertly :-)\n> \n>     The footnotes were\u00a0\n>     [1]\n>     https://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md\n>     <https://secure-web.cisco.com/1wkWGu7k6qIvsw8KxbTL8XXIpbTYjcgzOohVSUjpLJpNW0_r00YaFlguhX0pSCEAg2qU5kztXF4bxEpLbMz-RLAz9KTBvE0lh3kFGUjL5qke6yx8EcYvhHQQSttWjRX5HOt69vu8suXd7AhjEweVxeBFhvptINqjBarDx7woqCa14ZgWZdMk0dAt45Lnu_w1wjgn3j5sD7tBo187MGXR94eapimiMFjXySj70GeP1yiEA8rP0NUQ5CSXme2wQy-spVW_SLQpvkAQ01NlXUjK-ufQw_APez6C73Qx0bFh_9F-CPhKhhvM3tSs6IGNEM63aXMVeti2Ci0R5Xc15tvcT9gxpC32bNetja5ber6wbIHLbI9FWviQ63cWaNwhedQRN/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fblob%2Fmaster%2F07-routing-gossip.md>\n>     [2]\n>     https://medium.com/@rusty_lightning/lightning-routing-rough-background-dbac930abbad\n>     <https://secure-web.cisco.com/1UG1OaEI1KFpQ4prjxrhN1Wsxs0P1Tco0MXQz0xltJZQjwI-sNi98eXMz-gW4qOQd2jJ4i0uktvL8CH-9RrmEg3GkxHfcxjnjxY_hlLP-ctXOYMSk4BFbySy7vD5xWivimHIfMHtr13ffgEoFLItUgoajxUe7tnkchPN_P5OZ_FOzYdpqW_UDdgWW0_VOsccR5yt1vh0MRyVxO2B2ua8k4NmbFgTmht6hxUlXDsXOsOSGDHm1WO5VNrRbUcGeTPpdBMx0xeyZ9FTMTBCIAMOZ6UEb_eAX3X1iVIFkP_MPtuJcp0q8t9Tk_UBs-dHVRjyYcCsnetXYNI_mEsdtyg63aLXuJE1pMLb8-eamWaFfklVo-w9N9F0XTbmbkgGfcWU4/https%3A%2F%2Fmedium.com%2F%40rusty_lightning%2Flightning-routing-rough-background-dbac930abbad>\n>     [3]\n>     https://www.tik.ee.ethz.ch/file/a20a865ce40d40c8f942cf206a7cba96/Scalable_Funding_Of_Blockchain_Micropayment_Networks%20(1).pdf\n>     <https://secure-web.cisco.com/1XOlJdRo0gtzmPhNfVlEpMsrVBAI6BSjdDawPogEDIwYDdva2BSx4H8F9B3E6bkVIqA7ByFEF85qVjJ775leFwE54p5G6-wHH4Cio0p9sYLJ14-NHwcwvYQ--zdI8hdAyjGQbcLltVFAmorMaTlHq4FGI1CmxlwiUYgH1tjZn3UAHOu5xm5pLVi6KTb9WsJvuJsOBJhLfRLWGcAhVbjRXuV8b3x_G4ybOg1CQYC9ZVq3RJCPnNgQ3BN3a5ZuzW4veOE_dgi80FEy1x7a8spH-TV-cb_fey6ud-S25AWQ1PbctVS5zgQ4Ki4XYkR5igotNGGbWhACevBJfU1Hxqk90_g-DgQtS9_e_UX_FsY-yAjw/https%3A%2F%2Fwww.tik.ee.ethz.ch%2Ffile%2Fa20a865ce40d40c8f942cf206a7cba96%2FScalable_Funding_Of_Blockchain_Micropayment_Networks%2520%281%29.pdf>\n> \n>     We will eventually move away from the hash function based approach\n>     in favor of something that allows us to decorrelate hops in a route.\n>     We have indeed started writing down some of the ideas at least for\n>     Lightning in the project's wiki [4], but they're definitely not\n>     fleshed out.\n> \n>     [4]\u00a0https://github.com/lightningnetwork/lightning-rfc/wiki/Brainstorming\n>     <https://secure-web.cisco.com/1XqVZXht8sW8tdbLxwEMjoU-hxxV6OJwpKqc2OudZy26Le21yvOIBPwqizepwLi9TBeEV2BMDc-nCiKpj3eryi59jqvoZcBRrSQSVt9Qrq8pIxNSvhIMlG4cRd3lnj17JT9mDRRt0lS51C_9gpryV6qFqdiROdyJeTKfqUGmnvPo3isfeUbC_TOOfWLDV16jYA38ytCfTOryyDvJgJdYw7ArAUEMg10jNv8lV9aTARBOcOmgLjqJt0ktecsUpUCfIVAQlJEvtAAbWAUKwMoXg6MpIQEA4NE1ATntmwjLGl4IqQEqRAGxkGxWI8yQDL74yPPTIQmGTxs_JXE6YYMrhuD93GR1kyUJkOAH3Z_5nL1bsr3ifW31PJtUckQNnwY8e/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fwiki%2FBrainstorming>\n> \n> \n>     On Fri, Nov 17, 2017 at 3:10 PM Benjamin Mord <ben at mord.io\n>     <mailto:ben at mord.io>> wrote:\n> \n>         \"I think this is exactly the right venue to discuss these kinds\n>         of issue...\" - you are probably right! My bad.\n> \n>         Christian, thank you for your knowledgable reply. The footnotes\n>         did not come through on my end, I am especially interested in\n>         [3]. Do you have a link? I am thrilled to hear of a\n>         Bitcoin-compatible revive alternative! :)\n> \n>         Are we keeping an inventory somewhere of the cryptographic\n>         primitives being used in lightning and the specific assumptions\n>         being made about them (e.g. preimage resistance vs collision\n>         resistance and such)? One project I have not yet found but\n>         believe we need across the entire cryptocurrency community, is a\n>         (wiki-style?) inventory of unproven mathematical assumptions\n>         (e.g. hardness of discrete logarithm) and/or cryptographic\n>         primitives, cataloged in terms of the cryptocurrency\n>         technologies which require them. Such a resource could help the\n>         community respond more quickly, comprehensively, and\n>         transparently to the inevitable cryptanalytic surprises that\n>         will pop up over time (especially from the quantum cryptanalytic\n>         area, but even the classical cryptanalytic community as well).\n> \n>         Related, I believe the ideal end state would be to only assume\n>         existence of a preimage-resistant hash function, and to code\n>         such that one function could be quickly swapped with another and\n>         thus update entire system. I'm not sure if that is a realistic\n>         goal, but here is my first attempt to move in that direction in\n>         case it is of interest to lightning. It is hard to imagine it\n>         would be a new idea, although I have not yet found the precedent:\n>         http://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n>         <http://secure-web.cisco.com/1ewGQFfIxw1QZwneD3sDbhSSWP-YTmBwOYe529E7_zeYZZADnASbspvBAftPFXX6ZxJI2l2-8-xEqdpkmFg3fEIfkfRBYN8oZ8Z0HpeHh73MnT3Zi3M8GUs8SGMww38ZPnzsc7xlt7H5KFlLMcCsTWIgEtq4roZHDkYasanNeViP_UA3DIod7A281fNvWnQ1mnLs6d8WN_uFx1diU_xr-EoMab3wyANozirDj1gZ2_yPBn6S8tePYMkTkhIZlLz_BlvIfk9_KCOOiUcWxDTtCq9KdvoqEzStC04Z6q8xS5rtSnmK9GZZxv30yrgT8eWA4eOzce6AA3m0WEClNzbzANgi11GXBVde9pNiUIRcLDNw/http%3A%2F%2Fben.mord.io%2Fp%2Fdelayed-chained-key-revelation-dckr.html>\n> \n>         Thanks,\n>         Ben\n> \n> \n>         On Nov 17, 2017 8:04 AM, \"Christian Decker\"\n>         <decker.christian at gmail.com <mailto:decker.christian at gmail.com>>\n>         wrote:\n> \n>             On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io\n>             <mailto:ben at mord.io>> wrote:\n> \n>                 Ivan,\n> \n>                 That is mostly false, but with bits of truth sprinkled\n>                 in. Contact me at ben at mord.io <mailto:ben at mord.io> for\n>                 further discussion so we tread lightly on the lists'\n>                 email inboxes. \n> \n> \n>             I think this is exactly the right venue to discuss these\n>             kinds of issue,\n>             so please don't move the conversation somewhere else :-)\n> \n>             Routing is still very much in flux, we have a minimally\n>             viable routing\n>             protocol in the spec [1]. It is minimal in the sense that we\n>             just push\n>             the entire network's topology to the edges, which can then\n>             locally\n>             compute routes. This is effectively a source-routed network,\n>             which\n>             matches the requirements of the onion routing protocol we\n>             use for\n>             privact as well. But this does not mean that this is\n>             protocol is set in\n>             stone. We are actively working on finding better solutions\n>             to the\n>             problem of finding routes across a vast network of millions\n>             if not\n>             billions of nodes. Distance vector routing such as BGP uses\n>             may be one\n>             option like Ben suggested.\n> \n>             For now the network can easily scale to about 1 million\n>             channels [2]\n>             even on very limited devices, Upgrading to another protocol\n>             at a later\n>             point in time is trivial, since none of the routing\n>             information is\n>             consensus critical. We have all the extension points built\n>             in to allow\n>             future extensibility.\n>             \u00a0\n> \n>                 But briefly: scale-capable routing protocols are\n>                 possible as demonstrated by IP and thus by the internet\n>                 itself. As for centralizing flow through small number of\n>                 liquidity providers, yes that does seem economically\n>                 probable, at least unless / until off-chain channel\n>                 rebalancing mechanism (like the recently proposed\n>                 \"revive\" protocol) come about. Bitcoin script is not\n>                 currently revive-capable but Ethereum is, so either\n>                 Bitcoin revive could be enabled via two-way pegged\n>                 sidechain protocol with Ethereum, or even better, by a\n>                 purpose-built (yet still not Turing-complete) extension\n>                 to Bitcoin script itself in the future.\n> \n> \n>             As a matter of fact, Conrad and I just published a similar\n>             technique for\n>             off-chain channel rebalancing and fund re-allocation based\n>             solely on\n>             Bitcoin [3] (major props to Conrad for the excellent\n>             writeup!). The\n>             flexibility in Bitcoin exists.\n> \n>             As for the hubs everybody is assuming will form, I don't\n>             think they're\n>             as likely to form. Creating such a hub is extremely costly\n>             since it'll\n>             have to allocate sufficient funds to cover the maximum\n>             imbalance of all\n>             of its channels ahead of time. Then the fees must cover the\n>             opportunity\n>             cost of allocating all of those funds to channels instead of\n>             investing\n>             them somewhere else. On top of that the funds will not be\n>             moved alot\n>             since they serve only a small number of endpoints connected\n>             through\n>             those channels, this compounds the problem of having high\n>             fees. The high\n>             fees make the hub channels a really bad choice for your\n>             payments, after\n>             all you were looking for small fees for your payments,\n>             right? It opens\n>             up an opportunity for nodes to open bypasses that grab some\n>             of the\n>             traffic and associated fees from the expensive hub.\n> \n>             All of that being said, we should be careful about our\n>             predictions on\n>             how the topology will look, I added some counter arguments to a\n>             hub-and-spoke network forming, but nobody can really be sure\n>             about\n>             what'll happen.\n>             \u00a0\n> \n>                 In either case the lightning network seems a key first\n>                 step, and even were off-chain payment rebalancing not\n>                 possible for some odd reason, the lightning network\n>                 seems extremely valuable and scaleable - regardless\n>                 because the centralization you speak is not one that\n>                 affects safety of the money supply itself, and these\n>                 centralized hubs would be more dispensable / swappable\n>                 versus the mining centralization risk that people more\n>                 often talk about in Bitcoin. Lightning network\n>                 centralization, even if it persisted somehow despite\n>                 revive and future concepts, would not be an existential\n>                 risk.\n> \n>             \u00a0\n>             Rebalancing is definitely possible, even without [3], you can\n>             disincentivize the use of a channel until they have been\n>             rebalanced. For\n>             long term imbalance, opening another channel may be the best\n>             option\n>             \u00a0\n> \n>                 As for transaction fees, the idea is only channel setup\n>                 / tear down are required greatly reducing fees. Yes if\n>                 txin fees were millions of dollars then people could not\n>                 practically penalize fraud, but that is unlikely. Even\n>                 if txin fees made fraud claims marginally unprofitable\n>                 (yet practical) that would still be ok - the judicial\n>                 systems of most countries prove that people go beyond\n>                 self-interest when sufficiently ticked, a fact of human\n>                 psychology which in turn creates the incentives that\n>                 support honest business. (Also please be aware I'm not a\n>                 lightning code contributor, so that team might also be\n>                 doing more to address already than I thought to mention\n>                 above.)\n> \n> \n>             This is open to speculation as well. We hope to reduce the\n>             load on the\n>             on-chain network sufficiently to allow timely on-chain\n>             settlements. By\n>             aggregating payments off-chain we can also aggregate the\n>             fees and then\n>             use them to pay on-chain fees. So don't consider the\n>             on-chain fees for\n>             your channels as your sole loss, they are paid for by\n>             payments you\n>             forward. Ultimately this should encourage participants to\n>             open channels\n>             that support the network as a whole, not just themselves. We are\n>             building automations that should take care of this, the user\n>             won't have\n>             to do anything to improve the network topology.\n> \n>             Cheers,\n>             Christian\n> \n> \n> \n>     _______________________________________________\n>     Lightning-dev mailing list\n>     Lightning-dev at lists.linuxfoundation.org\n>     <mailto:Lightning-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>     <https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev>\n> \n> \n> \n> \n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev\n>"
            },
            {
                "author": "Giovanni Di Stasi",
                "date": "2017-11-22T14:11:45",
                "message_text_only": "Hello,\n\nI am in the process of studying your routing approach and a doubt arised\nrelated to the privacy of payments.\nThe current LN accomplishes payments thorugh onion-like packets which do\nnot reveil the path, but just previous and next hops.\nYour approach also aims at obfuscating the path. What is that your approach\nprovides more that is not currently provided in the current LN\nimplementations?\n\nThanks,\nGiovanni\n\nOn Tue, Nov 21, 2017 at 4:37 PM, Pedro Moreno Sanchez <pmorenos at purdue.edu>\nwrote:\n\n> Hello,\n>\n> my name is Pedro Moreno-Sanchez and I am a PhD student at the computer\n> science department at Purdue. I would like to bring to your attention a\n> novel routing algorithm suitable for the Lightning Network (LN) that I\n> have been working on with my supervisor Prof. Aniket Kate (Purdue\n> University) and my co-workers Stefanie Roos and Prof. Ian Goldberg\n> (University of Waterloo).\n>\n> Our approach is called SpeedyMurmurs, a routing algorithm for\n> decentralized payment networks such as the LN. SpeedyMurmurs uses an\n> embedding-based approach, meaning that the algorithm assigns meaningful\n> coordinates to nodes that enable efficient and effective discovery of\n> payment paths.  In a nutshell, SpeedyMurmurs creates a spanning tree by\n> means of a Breadth-First Search and then associates a coordinate to each\n> node depending on its position in the tree. A path from the sender to\n> the receiver is then calculated in a flexible manner, with each\n> intermediate node choosing the next node in the path as a function of\n> its neighbors' coordinates, available funds and closeness to the\n> receiver. To account for topology changes (e.g., a new channel is\n> created), the routing information is locally updated by only those\n> affected nodes in the network.\n>\n> We have simulated several configurations of SpeedyMurmurs using real\n> data from the Ripple network and compared it with other routing\n> algorithms available in the literature. Our simulation results show that\n> SpeedyMurmurs is able to find paths at about twice faster, reduces the\n> communication overhead by at least a factor of 2 and maintains a similar\n> or higher payment success ratio. Our simulation framework is open source\n> and we believe that it might be of independent interest for this\n> community to test this and any other alternative protocols that you\n> might have in mind. If you are interested, we are happy to extend on this.\n>\n> Finally, we also show that SpeedyMurmurs achieves the privacy notions of\n> interest in the LN. In particular, SpeedyMurmurs achieves value privacy,\n> i.e., the total value of a transaction remains hidden, as well as sender\n> and receiver privacy, i.e., the identities of the two transacting nodes\n> remain hidden from the adversary.\n>\n>\n> You can find all the details in the draft of our paper [1]. The final\n> version of this work will appear at NDSS 2018 conference [2]. We would\n> be glad to hear any question and feedback from you and are open to carry\n> out further collaborations if this line of work is of interest for you.\n>\n> Best regards,\n> Pedro, Stef, Aniket and Ian.\n>\n> [1] https://arxiv.org/abs/1709.05748\n> [2] https://www.ndss-symposium.org/\n>\n> On 11/17/17 8:09 PM, Saravanan Vijayakumaran wrote:\n> > Hi Christian,\n> >\n> > Are there any open source simulators available for trying different\n> > routing strategies? Or even a simulator for the Lightning network as a\n> > whole?\n> >\n> > Regards\n> > sarva\n> >\n> >\n> > On Fri, Nov 17, 2017 at 8:00 PM, Christian Decker\n> > <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:\n> >\n> >     Oh yeah, my mail tool destroyed that mail quite expertly :-)\n> >\n> >     The footnotes were\n> >     [1]\n> >     https://github.com/lightningnetwork/lightning-\n> rfc/blob/master/07-routing-gossip.md\n> >     <https://secure-web.cisco.com/1wkWGu7k6qIvsw8KxbTL8XXIpbTYjc\n> gzOohVSUjpLJpNW0_r00YaFlguhX0pSCEAg2qU5kztXF4bxEpLbMz-\n> RLAz9KTBvE0lh3kFGUjL5qke6yx8EcYvhHQQSttWjRX5HOt69vu8suXd7Ahj\n> EweVxeBFhvptINqjBarDx7woqCa14ZgWZdMk0dAt45Lnu_\n> w1wjgn3j5sD7tBo187MGXR94eapimiMFjXySj70GeP1yiEA8rP0NUQ5CSXme\n> 2wQy-spVW_SLQpvkAQ01NlXUjK-ufQw_APez6C73Qx0bFh_9F-\n> CPhKhhvM3tSs6IGNEM63aXMVeti2Ci0R5Xc15tvcT9gxpC32bNetja5ber6w\n> bIHLbI9FWviQ63cWaNwhedQRN/https%3A%2F%2Fgithub.com%2Flightningnetwork%\n> 2Flightning-rfc%2Fblob%2Fmaster%2F07-routing-gossip.md>\n> >     [2]\n> >     https://medium.com/@rusty_lightning/lightning-routing-\n> rough-background-dbac930abbad\n> >     <https://secure-web.cisco.com/1UG1OaEI1KFpQ4prjxrhN1Wsxs0P1T\n> co0MXQz0xltJZQjwI-sNi98eXMz-gW4qOQd2jJ4i0uktvL8CH-\n> 9RrmEg3GkxHfcxjnjxY_hlLP-ctXOYMSk4BFbySy7vD5xWivimHIfMH\n> tr13ffgEoFLItUgoajxUe7tnkchPN_P5OZ_FOzYdpqW_UDdgWW0_\n> VOsccR5yt1vh0MRyVxO2B2ua8k4NmbFgTmht6hxUlXDsXOsOSGDHm1WO5VNr\n> RbUcGeTPpdBMx0xeyZ9FTMTBCIAMOZ6UEb_eAX3X1iVIFkP_MPtuJcp0q8t9Tk_UBs-\n> dHVRjyYcCsnetXYNI_mEsdtyg63aLXuJE1pMLb8-eamWaFfklVo-\n> w9N9F0XTbmbkgGfcWU4/https%3A%2F%2Fmedium.com%2F%40rusty_\n> lightning%2Flightning-routing-rough-background-dbac930abbad>\n> >     [3]\n> >     https://www.tik.ee.ethz.ch/file/a20a865ce40d40c8f942cf206a7cba\n> 96/Scalable_Funding_Of_Blockchain_Micropayment_Networks%20(1).pdf\n> >     <https://secure-web.cisco.com/1XOlJdRo0gtzmPhNfVlEpMsrVBAI6B\n> SjdDawPogEDIwYDdva2BSx4H8F9B3E6bkVIqA7ByFEF85qVjJ775leFwE54p\n> 5G6-wHH4Cio0p9sYLJ14-NHwcwvYQ--zdI8hdAyjGQbcLltVFAmorMaTlHq4F\n> GI1CmxlwiUYgH1tjZn3UAHOu5xm5pLVi6KTb9WsJvuJsOBJhLfRLWGcAhVbjRXuV8b3x_\n> G4ybOg1CQYC9ZVq3RJCPnNgQ3BN3a5ZuzW4veOE_dgi80FEy1x7a8spH-TV-cb_fey6ud-\n> S25AWQ1PbctVS5zgQ4Ki4XYkR5igotNGGbWhACevBJfU1Hxqk90_g-\n> DgQtS9_e_UX_FsY-yAjw/https%3A%2F%2Fwww.tik.ee.ethz.ch%2Ffile%\n> 2Fa20a865ce40d40c8f942cf206a7cba96%2FScalable_Funding_Of_\n> Blockchain_Micropayment_Networks%2520%281%29.pdf>\n> >\n> >     We will eventually move away from the hash function based approach\n> >     in favor of something that allows us to decorrelate hops in a route.\n> >     We have indeed started writing down some of the ideas at least for\n> >     Lightning in the project's wiki [4], but they're definitely not\n> >     fleshed out.\n> >\n> >     [4] https://github.com/lightningnetwork/lightning-\n> rfc/wiki/Brainstorming\n> >     <https://secure-web.cisco.com/1XqVZXht8sW8tdbLxwEMjoU-\n> hxxV6OJwpKqc2OudZy26Le21yvOIBPwqizepwLi9TBeEV2BMDc-\n> nCiKpj3eryi59jqvoZcBRrSQSVt9Qrq8pIxNSvhIMlG4cRd3lnj17JT9mDRRt0lS51C_\n> 9gpryV6qFqdiROdyJeTKfqUGmnvPo3isfeUbC_TOOfWLDV16jYA38ytCfTOryyDvJgJd\n> Yw7ArAUEMg10jNv8lV9aTARBOcOmgLjqJt0ktecsUpUCfIVAQlJEvtAAbWAU\n> KwMoXg6MpIQEA4NE1ATntmwjLGl4IqQEqRAGxkGxWI8yQDL74yPPTIQmGTxs\n> _JXE6YYMrhuD93GR1kyUJkOAH3Z_5nL1bsr3ifW31PJtUckQNnwY8e/\n> https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fwiki%\n> 2FBrainstorming>\n> >\n> >\n> >     On Fri, Nov 17, 2017 at 3:10 PM Benjamin Mord <ben at mord.io\n> >     <mailto:ben at mord.io>> wrote:\n> >\n> >         \"I think this is exactly the right venue to discuss these kinds\n> >         of issue...\" - you are probably right! My bad.\n> >\n> >         Christian, thank you for your knowledgable reply. The footnotes\n> >         did not come through on my end, I am especially interested in\n> >         [3]. Do you have a link? I am thrilled to hear of a\n> >         Bitcoin-compatible revive alternative! :)\n> >\n> >         Are we keeping an inventory somewhere of the cryptographic\n> >         primitives being used in lightning and the specific assumptions\n> >         being made about them (e.g. preimage resistance vs collision\n> >         resistance and such)? One project I have not yet found but\n> >         believe we need across the entire cryptocurrency community, is a\n> >         (wiki-style?) inventory of unproven mathematical assumptions\n> >         (e.g. hardness of discrete logarithm) and/or cryptographic\n> >         primitives, cataloged in terms of the cryptocurrency\n> >         technologies which require them. Such a resource could help the\n> >         community respond more quickly, comprehensively, and\n> >         transparently to the inevitable cryptanalytic surprises that\n> >         will pop up over time (especially from the quantum cryptanalytic\n> >         area, but even the classical cryptanalytic community as well).\n> >\n> >         Related, I believe the ideal end state would be to only assume\n> >         existence of a preimage-resistant hash function, and to code\n> >         such that one function could be quickly swapped with another and\n> >         thus update entire system. I'm not sure if that is a realistic\n> >         goal, but here is my first attempt to move in that direction in\n> >         case it is of interest to lightning. It is hard to imagine it\n> >         would be a new idea, although I have not yet found the precedent:\n> >         http://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n> >         <http://secure-web.cisco.com/1ewGQFfIxw1QZwneD3sDbhSSWP-\n> YTmBwOYe529E7_zeYZZADnASbspvBAftPFXX6ZxJI2l2-8-\n> xEqdpkmFg3fEIfkfRBYN8oZ8Z0HpeHh73MnT3Zi3M8GUs8SGMww38ZPnzsc7\n> xlt7H5KFlLMcCsTWIgEtq4roZHDkYasanNeViP_UA3DIod7A281fNvWnQ1mnLs6d8WN_\n> uFx1diU_xr-EoMab3wyANozirDj1gZ2_yPBn6S8tePYMkTkhIZlLz_BlvIfk9_\n> KCOOiUcWxDTtCq9KdvoqEzStC04Z6q8xS5rtSnmK9GZZxv30yrgT8eWA4eOz\n> ce6AA3m0WEClNzbzANgi11GXBVde9pNiUIRcLDNw/http%3A%2F%2Fben.\n> mord.io%2Fp%2Fdelayed-chained-key-revelation-dckr.html>\n> >\n> >         Thanks,\n> >         Ben\n> >\n> >\n> >         On Nov 17, 2017 8:04 AM, \"Christian Decker\"\n> >         <decker.christian at gmail.com <mailto:decker.christian at gmail.com>>\n> >         wrote:\n> >\n> >             On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io\n> >             <mailto:ben at mord.io>> wrote:\n> >\n> >                 Ivan,\n> >\n> >                 That is mostly false, but with bits of truth sprinkled\n> >                 in. Contact me at ben at mord.io <mailto:ben at mord.io> for\n> >                 further discussion so we tread lightly on the lists'\n> >                 email inboxes.\n> >\n> >\n> >             I think this is exactly the right venue to discuss these\n> >             kinds of issue,\n> >             so please don't move the conversation somewhere else :-)\n> >\n> >             Routing is still very much in flux, we have a minimally\n> >             viable routing\n> >             protocol in the spec [1]. It is minimal in the sense that we\n> >             just push\n> >             the entire network's topology to the edges, which can then\n> >             locally\n> >             compute routes. This is effectively a source-routed network,\n> >             which\n> >             matches the requirements of the onion routing protocol we\n> >             use for\n> >             privact as well. But this does not mean that this is\n> >             protocol is set in\n> >             stone. We are actively working on finding better solutions\n> >             to the\n> >             problem of finding routes across a vast network of millions\n> >             if not\n> >             billions of nodes. Distance vector routing such as BGP uses\n> >             may be one\n> >             option like Ben suggested.\n> >\n> >             For now the network can easily scale to about 1 million\n> >             channels [2]\n> >             even on very limited devices, Upgrading to another protocol\n> >             at a later\n> >             point in time is trivial, since none of the routing\n> >             information is\n> >             consensus critical. We have all the extension points built\n> >             in to allow\n> >             future extensibility.\n> >\n> >\n> >                 But briefly: scale-capable routing protocols are\n> >                 possible as demonstrated by IP and thus by the internet\n> >                 itself. As for centralizing flow through small number of\n> >                 liquidity providers, yes that does seem economically\n> >                 probable, at least unless / until off-chain channel\n> >                 rebalancing mechanism (like the recently proposed\n> >                 \"revive\" protocol) come about. Bitcoin script is not\n> >                 currently revive-capable but Ethereum is, so either\n> >                 Bitcoin revive could be enabled via two-way pegged\n> >                 sidechain protocol with Ethereum, or even better, by a\n> >                 purpose-built (yet still not Turing-complete) extension\n> >                 to Bitcoin script itself in the future.\n> >\n> >\n> >             As a matter of fact, Conrad and I just published a similar\n> >             technique for\n> >             off-chain channel rebalancing and fund re-allocation based\n> >             solely on\n> >             Bitcoin [3] (major props to Conrad for the excellent\n> >             writeup!). The\n> >             flexibility in Bitcoin exists.\n> >\n> >             As for the hubs everybody is assuming will form, I don't\n> >             think they're\n> >             as likely to form. Creating such a hub is extremely costly\n> >             since it'll\n> >             have to allocate sufficient funds to cover the maximum\n> >             imbalance of all\n> >             of its channels ahead of time. Then the fees must cover the\n> >             opportunity\n> >             cost of allocating all of those funds to channels instead of\n> >             investing\n> >             them somewhere else. On top of that the funds will not be\n> >             moved alot\n> >             since they serve only a small number of endpoints connected\n> >             through\n> >             those channels, this compounds the problem of having high\n> >             fees. The high\n> >             fees make the hub channels a really bad choice for your\n> >             payments, after\n> >             all you were looking for small fees for your payments,\n> >             right? It opens\n> >             up an opportunity for nodes to open bypasses that grab some\n> >             of the\n> >             traffic and associated fees from the expensive hub.\n> >\n> >             All of that being said, we should be careful about our\n> >             predictions on\n> >             how the topology will look, I added some counter arguments\n> to a\n> >             hub-and-spoke network forming, but nobody can really be sure\n> >             about\n> >             what'll happen.\n> >\n> >\n> >                 In either case the lightning network seems a key first\n> >                 step, and even were off-chain payment rebalancing not\n> >                 possible for some odd reason, the lightning network\n> >                 seems extremely valuable and scaleable - regardless\n> >                 because the centralization you speak is not one that\n> >                 affects safety of the money supply itself, and these\n> >                 centralized hubs would be more dispensable / swappable\n> >                 versus the mining centralization risk that people more\n> >                 often talk about in Bitcoin. Lightning network\n> >                 centralization, even if it persisted somehow despite\n> >                 revive and future concepts, would not be an existential\n> >                 risk.\n> >\n> >\n> >             Rebalancing is definitely possible, even without [3], you can\n> >             disincentivize the use of a channel until they have been\n> >             rebalanced. For\n> >             long term imbalance, opening another channel may be the best\n> >             option\n> >\n> >\n> >                 As for transaction fees, the idea is only channel setup\n> >                 / tear down are required greatly reducing fees. Yes if\n> >                 txin fees were millions of dollars then people could not\n> >                 practically penalize fraud, but that is unlikely. Even\n> >                 if txin fees made fraud claims marginally unprofitable\n> >                 (yet practical) that would still be ok - the judicial\n> >                 systems of most countries prove that people go beyond\n> >                 self-interest when sufficiently ticked, a fact of human\n> >                 psychology which in turn creates the incentives that\n> >                 support honest business. (Also please be aware I'm not a\n> >                 lightning code contributor, so that team might also be\n> >                 doing more to address already than I thought to mention\n> >                 above.)\n> >\n> >\n> >             This is open to speculation as well. We hope to reduce the\n> >             load on the\n> >             on-chain network sufficiently to allow timely on-chain\n> >             settlements. By\n> >             aggregating payments off-chain we can also aggregate the\n> >             fees and then\n> >             use them to pay on-chain fees. So don't consider the\n> >             on-chain fees for\n> >             your channels as your sole loss, they are paid for by\n> >             payments you\n> >             forward. Ultimately this should encourage participants to\n> >             open channels\n> >             that support the network as a whole, not just themselves. We\n> are\n> >             building automations that should take care of this, the user\n> >             won't have\n> >             to do anything to improve the network topology.\n> >\n> >             Cheers,\n> >             Christian\n> >\n> >\n> >\n> >     _______________________________________________\n> >     Lightning-dev mailing list\n> >     Lightning-dev at lists.linuxfoundation.org\n> >     <mailto:Lightning-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> >     <https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOf\n> bibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539\n> Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx\n> 2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCd\n> UehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-\n> otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9\n> Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0Di\n> Iz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%\n> 2Fmailman%2Flistinfo%2Flightning-dev>\n> >\n> >\n> >\n> >\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> > https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOf\n> bibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539\n> Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx\n> 2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCd\n> UehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-\n> otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9\n> Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0Di\n> Iz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%\n> 2Fmailman%2Flistinfo%2Flightning-dev\n> >\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171122/da630d88/attachment-0001.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-11-25T19:05:08",
                "message_text_only": "Hi Pedro,\n\nI came across this paper a few weeks ago, skimmed it lightly, and noted a\nfew interesting aspects I wanted to dig into later. Your email reminded me\nto re-read the paper, so thanks for that! Before reading the paper, I\nwasn't aware of the concept of coordinate embedding, nor how that could be\nleveraged in order to provide sender+receiver privacy in a payment network\nusing a distance-vector-like routing system. Very cool technique!\n\n\nAfter reading the paper again, my current conclusion is that while the\nprotocol presents some novel traits in the design a routing system for\npayment channel based networks, it lends much better to a\nclosed-membership, credit network, such as Ripple (which is the focus of\nthe paper).\n\n\nIn Ripple, there are only a handful of gateways, and clients that seek to\ninteract with the network must chose their gateways *very* carefully,\notherwise consensus faults can occur, violating safety properties of the\nnetwork. It would appear that this gateway model nicely translates well to\nthe concept of landmarks that the protocol is strongly dependant on.\nIdeally, each gateway would be a landmark, and as there are a very small\nnumber of gateways within Ripple (as you must be admitted to be a verified\ngateway in the network), then parameter L (the total number of landmarks)\nis kept small which minimizes routing overhead, the average path-length,\netc.\n\n\nWhen we compare Ripple to LN, we find that the two networks are nearly\npolar opposites of each other. LN is an open-membership network that\nrequires zero initial configuration by central administrators(s). It more\nclosely resembles *debit* network (a series of tubes of money), as the\nfunds within channels must be pre-committed in order to establish a link\nbetween two nodes, and cannot be increased without an additional on-chain\ncontrol transaction (to add or remove funds). Additionally, AFAIK (I'm no\nexpert on Ripple of course), there's no concept of fees within the\nnetwork. While within LN, the fee structure is a critical component of the\ninventive for node operators to lift their coins onto this new layer to\nprovider payment routing services.  Finally, in LN we rely on time-locks\nin order to ensure that all transactions are atomic which adds another set\nof constraints. Ripple has no such constraint as transfers are based on\nbi-lateral trust.\n\n\nWith that said, the primary difference between this protocol is that\ncurrently we utilize a source-routed system which requires the sender to\nknow \"most\" of the path to the destination. I say \"most\" as currently,\nit's possible for the receiver of a payment to use a poor man's rendezvous\nsystem to provide the sender with a set of suffix paths form what one can\nconsider ad-hoc landmarks. The sender can then concatenate these with\ntheir own paths, and construct the Sphinx routing package which encodes\nthe full route. This itself only gives sender privacy, and the receiver\ndoesn't know the identity of the sender, but the sender learns the\nidentity of the receiver.\n\n\nWe have plans to achieve proper sender/receiver privacy by extending our\nSphinx usage to leverage HORNET, such that the payment descriptor (payment\nrequest containing details of the payment) also includes several paths\nfrom rendezvous nodes (Rodrigo's) to the receiver. The rendezvous route\nitself will be nested as a further Anonymous Header (AHDR) which includes\nthe information necessary to complete the onion circuit from Rodrigo to\nthe receiver. As onion routing is used, only Rodrigo can decrypt the\npayload and finalize the route. With such a structure, the only nodes that\nneed to advertise their channels are nodes which seek to actively serve as\nchannel routers. All other nodes (phones, laptops, etc), don't need to\nadvertise their channels to the greater network, reducing the size of the\nvisible network, and also the storage and validation overhead. This serves\nto extend the \"scale ceiling\" a bit.\n\n\nMy first question is: is it possible to adapt the protocol to allow each\nintermediate node to communicate their time lock and fee references to the\nsender? Currently, as the full path isn't known ahead of time, the sender\nis unable to properly craft the timelocks to ensure safety+atomicity of\nthe payment. This would mean they don't know what the total timelock\nshould be on the first outgoing link. Additionally, as they don't know the\ntotal path and the fee schedule of each intermediate node, then once\nagain, they don't know how much to send on the first out going link. It\nwould seem that one could extend the probing phase to allow backwards\ncommunication by each intermediate node back to the sender, such that they\ncan properly craft a valid HTLC. This would increase the set up costs of\nthe protocol however, and may also increase routing failures as it's\npossible incompatibilities arise at run-time between the preferences of\nintermediate nodes. Additionally, routes may fail as an intermediate node\nconsumes too many funds as their fee, causing the funds to be insufficient\nwhen it reaches the destination. One countermeasure would maybe: the\nsender always sends waaay more than necessary, and gives the receiver a\none-time payment identifier, requiring that they route the remainder of\nthe funds *back* to them.\n\n\nTo solve this issue presently, we extend the header in Sphinx to include a\nper-hop payload which allows the sender to precisely dictate the\nstructure of the route, allows the intermediate nodes to authenticate the\ninformation given to it, and also allow the intermediate node to verify\nthat their policies have properly been respected. These payloads can also\nbe utilized by applications to communicate a small-ish amount of data to\nconstruct higher-level protocols on top of the system. Examples include:\ncross-chain swaps, chance payment games, higher-level B2B protocols,\nflavors of ZKCP's, media streaming, internet access proxying, etc.\n\n\n>From my point-of-view, when extended to LN, the core component of the\nprotocol (landmarks), becomes the weakest component. From my reading,\n*all* nodes need to be ware of an *identical* set of landmarks (more or\nless similar to the desired homogeneity of Gateways), otherwise the\ncoordinate embedding scheme breaks down. Currently, there's no requirement\nthat all nodes have a globally consistent view of the network. So then an\nimportant questions arises: who choose the landmarks? A desirable property\nof a routing system for LN (IMO) is that is has close to zero required\ninitial set up by a central administrator. With this protocol, it would\nseem that all nodes much ship with a hard coded set of global landmarks\nfor the path finding to succeed.  This itself pins a hard coordination\nrequirement amongst implementers to have something like this deployed.\nEven ignoring this requirement for a minute, I see several other\ndownsides:\n\n   * As *all* payments must flow through landmarks (since nodes break up\n     their payment into L sub-flows), the landmarks must be very, very\n     well capitalized. This would cause strong consolidation of the\n     selection of landmarks, as they need extremely large channels in\n     order to facilitate transfer within the network.\n\n   * As landmarks must be globally known, this it seems this would\n     introduce fragility in the network. If most of the landmarks go down\n     (fails stop crashes) due to hardware issues, DoS, exploited bugs,\n     etc, then the network's throughput instantly becomes crippled.\n\n   * If all payment flow *must* go through landmarks, and the transfers\n     within the network are relatively uni-directional (all payment going\n     to Candy Crush Ultra: Lighting Strikes Twice), then their\n     channels would become unbalanced very quickly.\n\n\nThe last point there invokes another component of the network: passive\nchannel rebalancing. With source routing, it's possible for nodes to\npassive rebalance their channels, in order to keep the in equilibrium,\nsuch that on average they'll be able to handle a payment flow coming from\nany direction. This is possible as with source routing, it's easy for a\nnode to simply send a payment to himself incoming/outgoing from the pair\nof channels they wish to adjust the available flow of. With\ndistance-vector-like protocols, this doesn't seem possible, as the node\ndoesn't have any control of the incoming channel that the payment will\narrive on.\n\n\nFinally, the notion of value privacy within the scheme seems a bit weak.\n>From this definition, any protocol that didn't broadcast intents to send\npayments to the world would achieve this trait. The base Bitcoin\nblockchain doesn't mask the values of transfers (yet), but even if it did\nunconditionally maintaining value privacy of channel doesn't seem\ncompatible with multi-hop payment networks (nodes can simply perform\nprobing/tagging attacks to ascertain a range of the size of a channel). A\npossible mitigation would be for nodes to probabilistically drop incoming\npayments, with all nodes sampling from the same distribution. However,\nthis would dramatically increase routing failures by senders, removing the\n\"low-latency\" trait of payment networks that many find desirable.\n\n\nPersonally, I've very excited to see additional research on the front of\nrouting within the network! Excellent work by all authors.\n\n\nIn the end, I don't think it'll be a one-size fits all solution, as each\nrouting protocol delivers with it a set of tradeoffs that should be\nweighed depending on target characteristics, and use-cases. There's no\nstrong requirement that the network as a whole uses a *single* routing\nprotocol. Instead several distinct protocols can be deployed based on\nuse-case requirements, as we only need to share a single end-to-end\nconstruct: the HTLC. I could see a future in a few years where we have\nseveral deployed protocols, similar to the wide array of existing routing\nprotocols deployed on the Internet. What we have currently gets us from\nZero to One. We'll definitely need to experiment with additional\napproaches as the size of the network grows, and the true economic flow\npatterns emerge after we all deploy to mainnet.\n\n\n-- Laolu\n\n\nOn Tue, Nov 21, 2017 at 9:38 AM Pedro Moreno Sanchez <pmorenos at purdue.edu>\nwrote:\n\n> Hello,\n>\n> my name is Pedro Moreno-Sanchez and I am a PhD student at the computer\n> science department at Purdue. I would like to bring to your attention a\n> novel routing algorithm suitable for the Lightning Network (LN) that I\n> have been working on with my supervisor Prof. Aniket Kate (Purdue\n> University) and my co-workers Stefanie Roos and Prof. Ian Goldberg\n> (University of Waterloo).\n>\n> Our approach is called SpeedyMurmurs, a routing algorithm for\n> decentralized payment networks such as the LN. SpeedyMurmurs uses an\n> embedding-based approach, meaning that the algorithm assigns meaningful\n> coordinates to nodes that enable efficient and effective discovery of\n> payment paths.  In a nutshell, SpeedyMurmurs creates a spanning tree by\n> means of a Breadth-First Search and then associates a coordinate to each\n> node depending on its position in the tree. A path from the sender to\n> the receiver is then calculated in a flexible manner, with each\n> intermediate node choosing the next node in the path as a function of\n> its neighbors' coordinates, available funds and closeness to the\n> receiver. To account for topology changes (e.g., a new channel is\n> created), the routing information is locally updated by only those\n> affected nodes in the network.\n>\n> We have simulated several configurations of SpeedyMurmurs using real\n> data from the Ripple network and compared it with other routing\n> algorithms available in the literature. Our simulation results show that\n> SpeedyMurmurs is able to find paths at about twice faster, reduces the\n> communication overhead by at least a factor of 2 and maintains a similar\n> or higher payment success ratio. Our simulation framework is open source\n> and we believe that it might be of independent interest for this\n> community to test this and any other alternative protocols that you\n> might have in mind. If you are interested, we are happy to extend on this.\n>\n> Finally, we also show that SpeedyMurmurs achieves the privacy notions of\n> interest in the LN. In particular, SpeedyMurmurs achieves value privacy,\n> i.e., the total value of a transaction remains hidden, as well as sender\n> and receiver privacy, i.e., the identities of the two transacting nodes\n> remain hidden from the adversary.\n>\n>\n> You can find all the details in the draft of our paper [1]. The final\n> version of this work will appear at NDSS 2018 conference [2]. We would\n> be glad to hear any question and feedback from you and are open to carry\n> out further collaborations if this line of work is of interest for you.\n>\n> Best regards,\n> Pedro, Stef, Aniket and Ian.\n>\n> [1] https://arxiv.org/abs/1709.05748\n> [2] https://www.ndss-symposium.org/\n>\n> On 11/17/17 8:09 PM, Saravanan Vijayakumaran wrote:\n> > Hi Christian,\n> >\n> > Are there any open source simulators available for trying different\n> > routing strategies? Or even a simulator for the Lightning network as a\n> > whole?\n> >\n> > Regards\n> > sarva\n> >\n> >\n> > On Fri, Nov 17, 2017 at 8:00 PM, Christian Decker\n> > <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:\n> >\n> >     Oh yeah, my mail tool destroyed that mail quite expertly :-)\n> >\n> >     The footnotes were\n> >     [1]\n> >\n> https://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md\n> >     <\n> https://secure-web.cisco.com/1wkWGu7k6qIvsw8KxbTL8XXIpbTYjcgzOohVSUjpLJpNW0_r00YaFlguhX0pSCEAg2qU5kztXF4bxEpLbMz-RLAz9KTBvE0lh3kFGUjL5qke6yx8EcYvhHQQSttWjRX5HOt69vu8suXd7AhjEweVxeBFhvptINqjBarDx7woqCa14ZgWZdMk0dAt45Lnu_w1wjgn3j5sD7tBo187MGXR94eapimiMFjXySj70GeP1yiEA8rP0NUQ5CSXme2wQy-spVW_SLQpvkAQ01NlXUjK-ufQw_APez6C73Qx0bFh_9F-CPhKhhvM3tSs6IGNEM63aXMVeti2Ci0R5Xc15tvcT9gxpC32bNetja5ber6wbIHLbI9FWviQ63cWaNwhedQRN/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fblob%2Fmaster%2F07-routing-gossip.md\n> >\n> >     [2]\n> >\n> https://medium.com/@rusty_lightning/lightning-routing-rough-background-dbac930abbad\n> >     <\n> https://secure-web.cisco.com/1UG1OaEI1KFpQ4prjxrhN1Wsxs0P1Tco0MXQz0xltJZQjwI-sNi98eXMz-gW4qOQd2jJ4i0uktvL8CH-9RrmEg3GkxHfcxjnjxY_hlLP-ctXOYMSk4BFbySy7vD5xWivimHIfMHtr13ffgEoFLItUgoajxUe7tnkchPN_P5OZ_FOzYdpqW_UDdgWW0_VOsccR5yt1vh0MRyVxO2B2ua8k4NmbFgTmht6hxUlXDsXOsOSGDHm1WO5VNrRbUcGeTPpdBMx0xeyZ9FTMTBCIAMOZ6UEb_eAX3X1iVIFkP_MPtuJcp0q8t9Tk_UBs-dHVRjyYcCsnetXYNI_mEsdtyg63aLXuJE1pMLb8-eamWaFfklVo-w9N9F0XTbmbkgGfcWU4/https%3A%2F%2Fmedium.com%2F%40rusty_lightning%2Flightning-routing-rough-background-dbac930abbad\n> >\n> >     [3]\n> >\n> https://www.tik.ee.ethz.ch/file/a20a865ce40d40c8f942cf206a7cba96/Scalable_Funding_Of_Blockchain_Micropayment_Networks%20(1).pdf\n> >     <\n> https://secure-web.cisco.com/1XOlJdRo0gtzmPhNfVlEpMsrVBAI6BSjdDawPogEDIwYDdva2BSx4H8F9B3E6bkVIqA7ByFEF85qVjJ775leFwE54p5G6-wHH4Cio0p9sYLJ14-NHwcwvYQ--zdI8hdAyjGQbcLltVFAmorMaTlHq4FGI1CmxlwiUYgH1tjZn3UAHOu5xm5pLVi6KTb9WsJvuJsOBJhLfRLWGcAhVbjRXuV8b3x_G4ybOg1CQYC9ZVq3RJCPnNgQ3BN3a5ZuzW4veOE_dgi80FEy1x7a8spH-TV-cb_fey6ud-S25AWQ1PbctVS5zgQ4Ki4XYkR5igotNGGbWhACevBJfU1Hxqk90_g-DgQtS9_e_UX_FsY-yAjw/https%3A%2F%2Fwww.tik.ee.ethz.ch%2Ffile%2Fa20a865ce40d40c8f942cf206a7cba96%2FScalable_Funding_Of_Blockchain_Micropayment_Networks%2520%281%29.pdf\n> >\n> >\n> >     We will eventually move away from the hash function based approach\n> >     in favor of something that allows us to decorrelate hops in a route.\n> >     We have indeed started writing down some of the ideas at least for\n> >     Lightning in the project's wiki [4], but they're definitely not\n> >     fleshed out.\n> >\n> >     [4]\n> https://github.com/lightningnetwork/lightning-rfc/wiki/Brainstorming\n> >     <\n> https://secure-web.cisco.com/1XqVZXht8sW8tdbLxwEMjoU-hxxV6OJwpKqc2OudZy26Le21yvOIBPwqizepwLi9TBeEV2BMDc-nCiKpj3eryi59jqvoZcBRrSQSVt9Qrq8pIxNSvhIMlG4cRd3lnj17JT9mDRRt0lS51C_9gpryV6qFqdiROdyJeTKfqUGmnvPo3isfeUbC_TOOfWLDV16jYA38ytCfTOryyDvJgJdYw7ArAUEMg10jNv8lV9aTARBOcOmgLjqJt0ktecsUpUCfIVAQlJEvtAAbWAUKwMoXg6MpIQEA4NE1ATntmwjLGl4IqQEqRAGxkGxWI8yQDL74yPPTIQmGTxs_JXE6YYMrhuD93GR1kyUJkOAH3Z_5nL1bsr3ifW31PJtUckQNnwY8e/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fwiki%2FBrainstorming\n> >\n> >\n> >\n> >     On Fri, Nov 17, 2017 at 3:10 PM Benjamin Mord <ben at mord.io\n> >     <mailto:ben at mord.io>> wrote:\n> >\n> >         \"I think this is exactly the right venue to discuss these kinds\n> >         of issue...\" - you are probably right! My bad.\n> >\n> >         Christian, thank you for your knowledgable reply. The footnotes\n> >         did not come through on my end, I am especially interested in\n> >         [3]. Do you have a link? I am thrilled to hear of a\n> >         Bitcoin-compatible revive alternative! :)\n> >\n> >         Are we keeping an inventory somewhere of the cryptographic\n> >         primitives being used in lightning and the specific assumptions\n> >         being made about them (e.g. preimage resistance vs collision\n> >         resistance and such)? One project I have not yet found but\n> >         believe we need across the entire cryptocurrency community, is a\n> >         (wiki-style?) inventory of unproven mathematical assumptions\n> >         (e.g. hardness of discrete logarithm) and/or cryptographic\n> >         primitives, cataloged in terms of the cryptocurrency\n> >         technologies which require them. Such a resource could help the\n> >         community respond more quickly, comprehensively, and\n> >         transparently to the inevitable cryptanalytic surprises that\n> >         will pop up over time (especially from the quantum cryptanalytic\n> >         area, but even the classical cryptanalytic community as well).\n> >\n> >         Related, I believe the ideal end state would be to only assume\n> >         existence of a preimage-resistant hash function, and to code\n> >         such that one function could be quickly swapped with another and\n> >         thus update entire system. I'm not sure if that is a realistic\n> >         goal, but here is my first attempt to move in that direction in\n> >         case it is of interest to lightning. It is hard to imagine it\n> >         would be a new idea, although I have not yet found the precedent:\n> >         http://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n> >         <\n> http://secure-web.cisco.com/1ewGQFfIxw1QZwneD3sDbhSSWP-YTmBwOYe529E7_zeYZZADnASbspvBAftPFXX6ZxJI2l2-8-xEqdpkmFg3fEIfkfRBYN8oZ8Z0HpeHh73MnT3Zi3M8GUs8SGMww38ZPnzsc7xlt7H5KFlLMcCsTWIgEtq4roZHDkYasanNeViP_UA3DIod7A281fNvWnQ1mnLs6d8WN_uFx1diU_xr-EoMab3wyANozirDj1gZ2_yPBn6S8tePYMkTkhIZlLz_BlvIfk9_KCOOiUcWxDTtCq9KdvoqEzStC04Z6q8xS5rtSnmK9GZZxv30yrgT8eWA4eOzce6AA3m0WEClNzbzANgi11GXBVde9pNiUIRcLDNw/http%3A%2F%2Fben.mord.io%2Fp%2Fdelayed-chained-key-revelation-dckr.html\n> >\n> >\n> >         Thanks,\n> >         Ben\n> >\n> >\n> >         On Nov 17, 2017 8:04 AM, \"Christian Decker\"\n> >         <decker.christian at gmail.com <mailto:decker.christian at gmail.com>>\n> >         wrote:\n> >\n> >             On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io\n> >             <mailto:ben at mord.io>> wrote:\n> >\n> >                 Ivan,\n> >\n> >                 That is mostly false, but with bits of truth sprinkled\n> >                 in. Contact me at ben at mord.io <mailto:ben at mord.io> for\n> >                 further discussion so we tread lightly on the lists'\n> >                 email inboxes.\n> >\n> >\n> >             I think this is exactly the right venue to discuss these\n> >             kinds of issue,\n> >             so please don't move the conversation somewhere else :-)\n> >\n> >             Routing is still very much in flux, we have a minimally\n> >             viable routing\n> >             protocol in the spec [1]. It is minimal in the sense that we\n> >             just push\n> >             the entire network's topology to the edges, which can then\n> >             locally\n> >             compute routes. This is effectively a source-routed network,\n> >             which\n> >             matches the requirements of the onion routing protocol we\n> >             use for\n> >             privact as well. But this does not mean that this is\n> >             protocol is set in\n> >             stone. We are actively working on finding better solutions\n> >             to the\n> >             problem of finding routes across a vast network of millions\n> >             if not\n> >             billions of nodes. Distance vector routing such as BGP uses\n> >             may be one\n> >             option like Ben suggested.\n> >\n> >             For now the network can easily scale to about 1 million\n> >             channels [2]\n> >             even on very limited devices, Upgrading to another protocol\n> >             at a later\n> >             point in time is trivial, since none of the routing\n> >             information is\n> >             consensus critical. We have all the extension points built\n> >             in to allow\n> >             future extensibility.\n> >\n> >\n> >                 But briefly: scale-capable routing protocols are\n> >                 possible as demonstrated by IP and thus by the internet\n> >                 itself. As for centralizing flow through small number of\n> >                 liquidity providers, yes that does seem economically\n> >                 probable, at least unless / until off-chain channel\n> >                 rebalancing mechanism (like the recently proposed\n> >                 \"revive\" protocol) come about. Bitcoin script is not\n> >                 currently revive-capable but Ethereum is, so either\n> >                 Bitcoin revive could be enabled via two-way pegged\n> >                 sidechain protocol with Ethereum, or even better, by a\n> >                 purpose-built (yet still not Turing-complete) extension\n> >                 to Bitcoin script itself in the future.\n> >\n> >\n> >             As a matter of fact, Conrad and I just published a similar\n> >             technique for\n> >             off-chain channel rebalancing and fund re-allocation based\n> >             solely on\n> >             Bitcoin [3] (major props to Conrad for the excellent\n> >             writeup!). The\n> >             flexibility in Bitcoin exists.\n> >\n> >             As for the hubs everybody is assuming will form, I don't\n> >             think they're\n> >             as likely to form. Creating such a hub is extremely costly\n> >             since it'll\n> >             have to allocate sufficient funds to cover the maximum\n> >             imbalance of all\n> >             of its channels ahead of time. Then the fees must cover the\n> >             opportunity\n> >             cost of allocating all of those funds to channels instead of\n> >             investing\n> >             them somewhere else. On top of that the funds will not be\n> >             moved alot\n> >             since they serve only a small number of endpoints connected\n> >             through\n> >             those channels, this compounds the problem of having high\n> >             fees. The high\n> >             fees make the hub channels a really bad choice for your\n> >             payments, after\n> >             all you were looking for small fees for your payments,\n> >             right? It opens\n> >             up an opportunity for nodes to open bypasses that grab some\n> >             of the\n> >             traffic and associated fees from the expensive hub.\n> >\n> >             All of that being said, we should be careful about our\n> >             predictions on\n> >             how the topology will look, I added some counter arguments\n> to a\n> >             hub-and-spoke network forming, but nobody can really be sure\n> >             about\n> >             what'll happen.\n> >\n> >\n> >                 In either case the lightning network seems a key first\n> >                 step, and even were off-chain payment rebalancing not\n> >                 possible for some odd reason, the lightning network\n> >                 seems extremely valuable and scaleable - regardless\n> >                 because the centralization you speak is not one that\n> >                 affects safety of the money supply itself, and these\n> >                 centralized hubs would be more dispensable / swappable\n> >                 versus the mining centralization risk that people more\n> >                 often talk about in Bitcoin. Lightning network\n> >                 centralization, even if it persisted somehow despite\n> >                 revive and future concepts, would not be an existential\n> >                 risk.\n> >\n> >\n> >             Rebalancing is definitely possible, even without [3], you can\n> >             disincentivize the use of a channel until they have been\n> >             rebalanced. For\n> >             long term imbalance, opening another channel may be the best\n> >             option\n> >\n> >\n> >                 As for transaction fees, the idea is only channel setup\n> >                 / tear down are required greatly reducing fees. Yes if\n> >                 txin fees were millions of dollars then people could not\n> >                 practically penalize fraud, but that is unlikely. Even\n> >                 if txin fees made fraud claims marginally unprofitable\n> >                 (yet practical) that would still be ok - the judicial\n> >                 systems of most countries prove that people go beyond\n> >                 self-interest when sufficiently ticked, a fact of human\n> >                 psychology which in turn creates the incentives that\n> >                 support honest business. (Also please be aware I'm not a\n> >                 lightning code contributor, so that team might also be\n> >                 doing more to address already than I thought to mention\n> >                 above.)\n> >\n> >\n> >             This is open to speculation as well. We hope to reduce the\n> >             load on the\n> >             on-chain network sufficiently to allow timely on-chain\n> >             settlements. By\n> >             aggregating payments off-chain we can also aggregate the\n> >             fees and then\n> >             use them to pay on-chain fees. So don't consider the\n> >             on-chain fees for\n> >             your channels as your sole loss, they are paid for by\n> >             payments you\n> >             forward. Ultimately this should encourage participants to\n> >             open channels\n> >             that support the network as a whole, not just themselves. We\n> are\n> >             building automations that should take care of this, the user\n> >             won't have\n> >             to do anything to improve the network topology.\n> >\n> >             Cheers,\n> >             Christian\n> >\n> >\n> >\n> >     _______________________________________________\n> >     Lightning-dev mailing list\n> >     Lightning-dev at lists.linuxfoundation.org\n> >     <mailto:Lightning-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> >     <\n> https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev\n> >\n> >\n> >\n> >\n> >\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> >\n> https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev\n> >\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171125/fd3fb6d4/attachment-0001.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-11-25T19:13:15",
                "message_text_only": "(re-sending as doesn't look like my original mail went through to the list?)\n\nHi Pedro,\n\nI came across this paper a few weeks ago, skimmed it lightly, and noted a\nfew interesting aspects I wanted to dig into later. Your email reminded me\nto re-read the paper, so thanks for that! Before reading the paper, I\nwasn't aware of the concept of coordinate embedding, nor how that could be\nleveraged in order to provide sender+receiver privacy in a payment network\nusing a distance-vector-like routing system. Very cool technique!\n\n\nAfter reading the paper again, my current conclusion is that while the\nprotocol presents some novel traits in the design a routing system for\npayment channel based networks, it lends much better to a\nclosed-membership, credit network, such as Ripple (which is the focus of\nthe paper).\n\n\nIn Ripple, there are only a handful of gateways, and clients that seek to\ninteract with the network must chose their gateways *very* carefully,\notherwise consensus faults can occur, violating safety properties of the\nnetwork. It would appear that this gateway model nicely translates well to\nthe concept of landmarks that the protocol is strongly dependant on.\nIdeally, each gateway would be a landmark, and as there are a very small\nnumber of gateways within Ripple (as you must be admitted to be a verified\ngateway in the network), then parameter L (the total number of landmarks)\nis kept small which minimizes routing overhead, the average path-length,\netc.\n\n\nWhen we compare Ripple to LN, we find that the two networks are nearly\npolar opposites of each other. LN is an open-membership network that\nrequires zero initial configuration by central administrators(s). It more\nclosely resembles *debit* network (a series of tubes of money), as the\nfunds within channels must be pre-committed in order to establish a link\nbetween two nodes, and cannot be increased without an additional on-chain\ncontrol transaction (to add or remove funds). Additionally, AFAIK (I'm no\nexpert on Ripple of course), there's no concept of fees within the\nnetwork. While within LN, the fee structure is a critical component of the\ninventive for node operators to lift their coins onto this new layer to\nprovider payment routing services.  Finally, in LN we rely on time-locks\nin order to ensure that all transactions are atomic which adds another set\nof constraints. Ripple has no such constraint as transfers are based on\nbi-lateral trust.\n\n\nWith that said, the primary difference between this protocol is that\ncurrently we utilize a source-routed system which requires the sender to\nknow \"most\" of the path to the destination. I say \"most\" as currently,\nit's possible for the receiver of a payment to use a poor man's rendezvous\nsystem to provide the sender with a set of suffix paths form what one can\nconsider ad-hoc landmarks. The sender can then concatenate these with\ntheir own paths, and construct the Sphinx routing package which encodes\nthe full route. This itself only gives sender privacy, and the receiver\ndoesn't know the identity of the sender, but the sender learns the\nidentity of the receiver.\n\nWe have plans to achieve proper sender/receiver privacy by extending our\nSphinx usage to leverage HORNET, such that the payment descriptor (payment\nrequest containing details of the payment) also includes several paths\nfrom rendezvous nodes (Rodrigo's) to the receiver. The rendezvous route\nitself will be nested as a further Anonymous Header (AHDR) which includes\nthe information necessary to complete the onion circuit from Rodrigo to\nthe receiver. As onion routing is used, only Rodrigo can decrypt the\npayload and finalize the route. With such a structure, the only nodes that\nneed to advertise their channels are nodes which seek to actively serve as\nchannel routers. All other nodes (phones, laptops, etc), don't need to\nadvertise their channels to the greater network, reducing the size of the\nvisible network, and also the storage and validation overhead. This serves\nto extend the \"scale ceiling\" a bit.\n\n\nMy first question is: is it possible to adapt the protocol to allow each\nintermediate node to communicate their time lock and fee references to the\nsender? Currently, as the full path isn't known ahead of time, the sender\nis unable to properly craft the timelocks to ensure safety+atomicity of\nthe payment. This would mean they don't know what the total timelock\nshould be on the first outgoing link. Additionally, as they don't know the\ntotal path and the fee schedule of each intermediate node, then once\nagain, they don't know how much to send on the first out going link. It\nwould seem that one could extend the probing phase to allow backwards\ncommunication by each intermediate node back to the sender, such that they\ncan properly craft a valid HTLC. This would increase the set up costs of\nthe protocol however, and may also increase routing failures as it's\npossible incompatibilities arise at run-time between the preferences of\nintermediate nodes. Additionally, routes may fail as an intermediate node\nconsumes too many funds as their fee, causing the funds to be insufficient\nwhen it reaches the destination. One countermeasure would maybe: the\nsender always sends waaay more than necessary, and gives the receiver a\none-time payment identifier, requiring that they route the remainder of\nthe funds *back* to them.\n\n\nTo solve this issue presently, we extend the header in Sphinx to include a\nper-hop payload which allows the sender to precisely dictate the\nstructure of the route, allows the intermediate nodes to authenticate the\ninformation given to it, and also allow the intermediate node to verify\nthat their policies have properly been respected. These payloads can also\nbe utilized by applications to communicate a small-ish amount of data to\nconstruct higher-level protocols on top of the system. Examples include:\ncross-chain swaps, chance payment games, higher-level B2B protocols,\nflavors of ZKCP's, media streaming, internet access proxying, etc.\n\n\n>From my point-of-view, when extended to LN, the core component of the\nprotocol (landmarks), becomes the weakest component. From my reading,\n*all* nodes need to be ware of an *identical* set of landmarks (more or\nless similar to the desired homogeneity of Gateways), otherwise the\ncoordinate embedding scheme breaks down. Currently, there's no requirement\nthat all nodes have a globally consistent view of the network. So then an\nimportant questions arises: who choose the landmarks? A desirable property\nof a routing system for LN (IMO) is that is has close to zero required\ninitial set up by a central administrator. With this protocol, it would\nseem that all nodes much ship with a hard coded set of global landmarks\nfor the path finding to succeed.  This itself pins a hard coordination\nrequirement amongst implementers to have something like this deployed.\nEven ignoring this requirement for a minute, I see several other\ndownsides:\n\n   * As *all* payments must flow through landmarks (since nodes break up\n     their payment into L sub-flows), the landmarks must be very, very\n     well capitalized. This would cause strong consolidation of the\n     selection of landmarks, as they need extremely large channels in\n     order to facilitate transfer within the network.\n\n   * As landmarks must be globally known, this it seems this would\n     introduce fragility in the network. If most of the landmarks go down\n     (fails stop crashes) due to hardware issues, DoS, exploited bugs,\n     etc, then the network's throughput instantly becomes crippled.\n\n   * If all payment flow *must* go through landmarks, and the transfers\n     within the network are relatively uni-directional (all payment going\n     to Candy Crush Ultra: Lighting Strikes Twice), then their\n     channels would become unbalanced very quickly.\n\n\nThe last point there invokes another component of the network: passive\nchannel rebalancing. With source routing, it's possible for nodes to\npassive rebalance their channels, in order to keep the in equilibrium,\nsuch that on average they'll be able to handle a payment flow coming from\nany direction. This is possible as with source routing, it's easy for a\nnode to simply send a payment to himself incoming/outgoing from the pair\nof channels they wish to adjust the available flow of. With\ndistance-vector-like protocols, this doesn't seem possible, as the node\ndoesn't have any control of the incoming channel that the payment will\narrive on.\n\n\nFinally, the notion of value privacy within the scheme seems a bit weak.\n>From this definition, any protocol that didn't broadcast intents to send\npayments to the world would achieve this trait. The base Bitcoin\nblockchain doesn't mask the values of transfers (yet), but even if it did\nunconditionally maintaining value privacy of channel doesn't seem\ncompatible with multi-hop payment networks (nodes can simply perform\nprobing/tagging attacks to ascertain a range of the size of a channel). A\npossible mitigation would be for nodes to probabilistically drop incoming\npayments, with all nodes sampling from the same distribution. However,\nthis would dramatically increase routing failures by senders, removing the\n\"low-latency\" trait of payment networks that many find desirable.\n\n\nPersonally, I've very excited to see additional research on the front of\nrouting within the network! Excellent work by all authors.\n\n\nIn the end, I don't think it'll be a one-size fits all solution, as each\nrouting protocol delivers with it a set of tradeoffs that should be\nweighed depending on target characteristics, and use-cases. There's no\nstrong requirement that the network as a whole uses a *single* routing\nprotocol. Instead several distinct protocols can be deployed based on\nuse-case requirements, as we only need to share a single end-to-end\nconstruct: the HTLC. I could see a future in a few years where we have\nseveral deployed protocols, similar to the wide array of existing routing\nprotocols deployed on the Internet. What we have currently gets us from\nZero to One. We'll definitely need to experiment with additional\napproaches as the size of the network grows, and the true economic flow\npatterns emerge after we all deploy to mainnet.\n\n\n-- Laolu\n\nOn Tue, Nov 21, 2017 at 9:38 AM Pedro Moreno Sanchez <pmorenos at purdue.edu>\nwrote:\n\n> Hello,\n>\n> my name is Pedro Moreno-Sanchez and I am a PhD student at the computer\n> science department at Purdue. I would like to bring to your attention a\n> novel routing algorithm suitable for the Lightning Network (LN) that I\n> have been working on with my supervisor Prof. Aniket Kate (Purdue\n> University) and my co-workers Stefanie Roos and Prof. Ian Goldberg\n> (University of Waterloo).\n>\n> Our approach is called SpeedyMurmurs, a routing algorithm for\n> decentralized payment networks such as the LN. SpeedyMurmurs uses an\n> embedding-based approach, meaning that the algorithm assigns meaningful\n> coordinates to nodes that enable efficient and effective discovery of\n> payment paths.  In a nutshell, SpeedyMurmurs creates a spanning tree by\n> means of a Breadth-First Search and then associates a coordinate to each\n> node depending on its position in the tree. A path from the sender to\n> the receiver is then calculated in a flexible manner, with each\n> intermediate node choosing the next node in the path as a function of\n> its neighbors' coordinates, available funds and closeness to the\n> receiver. To account for topology changes (e.g., a new channel is\n> created), the routing information is locally updated by only those\n> affected nodes in the network.\n>\n> We have simulated several configurations of SpeedyMurmurs using real\n> data from the Ripple network and compared it with other routing\n> algorithms available in the literature. Our simulation results show that\n> SpeedyMurmurs is able to find paths at about twice faster, reduces the\n> communication overhead by at least a factor of 2 and maintains a similar\n> or higher payment success ratio. Our simulation framework is open source\n> and we believe that it might be of independent interest for this\n> community to test this and any other alternative protocols that you\n> might have in mind. If you are interested, we are happy to extend on this.\n>\n> Finally, we also show that SpeedyMurmurs achieves the privacy notions of\n> interest in the LN. In particular, SpeedyMurmurs achieves value privacy,\n> i.e., the total value of a transaction remains hidden, as well as sender\n> and receiver privacy, i.e., the identities of the two transacting nodes\n> remain hidden from the adversary.\n>\n>\n> You can find all the details in the draft of our paper [1]. The final\n> version of this work will appear at NDSS 2018 conference [2]. We would\n> be glad to hear any question and feedback from you and are open to carry\n> out further collaborations if this line of work is of interest for you.\n>\n> Best regards,\n> Pedro, Stef, Aniket and Ian.\n>\n> [1] https://arxiv.org/abs/1709.05748\n> [2] https://www.ndss-symposium.org/\n>\n> On 11/17/17 8:09 PM, Saravanan Vijayakumaran wrote:\n> > Hi Christian,\n> >\n> > Are there any open source simulators available for trying different\n> > routing strategies? Or even a simulator for the Lightning network as a\n> > whole?\n> >\n> > Regards\n> > sarva\n> >\n> >\n> > On Fri, Nov 17, 2017 at 8:00 PM, Christian Decker\n> > <decker.christian at gmail.com <mailto:decker.christian at gmail.com>> wrote:\n> >\n> >     Oh yeah, my mail tool destroyed that mail quite expertly :-)\n> >\n> >     The footnotes were\n> >     [1]\n> >\n> https://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md\n> >     <\n> https://secure-web.cisco.com/1wkWGu7k6qIvsw8KxbTL8XXIpbTYjcgzOohVSUjpLJpNW0_r00YaFlguhX0pSCEAg2qU5kztXF4bxEpLbMz-RLAz9KTBvE0lh3kFGUjL5qke6yx8EcYvhHQQSttWjRX5HOt69vu8suXd7AhjEweVxeBFhvptINqjBarDx7woqCa14ZgWZdMk0dAt45Lnu_w1wjgn3j5sD7tBo187MGXR94eapimiMFjXySj70GeP1yiEA8rP0NUQ5CSXme2wQy-spVW_SLQpvkAQ01NlXUjK-ufQw_APez6C73Qx0bFh_9F-CPhKhhvM3tSs6IGNEM63aXMVeti2Ci0R5Xc15tvcT9gxpC32bNetja5ber6wbIHLbI9FWviQ63cWaNwhedQRN/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fblob%2Fmaster%2F07-routing-gossip.md\n> >\n> >     [2]\n> >\n> https://medium.com/@rusty_lightning/lightning-routing-rough-background-dbac930abbad\n> >     <\n> https://secure-web.cisco.com/1UG1OaEI1KFpQ4prjxrhN1Wsxs0P1Tco0MXQz0xltJZQjwI-sNi98eXMz-gW4qOQd2jJ4i0uktvL8CH-9RrmEg3GkxHfcxjnjxY_hlLP-ctXOYMSk4BFbySy7vD5xWivimHIfMHtr13ffgEoFLItUgoajxUe7tnkchPN_P5OZ_FOzYdpqW_UDdgWW0_VOsccR5yt1vh0MRyVxO2B2ua8k4NmbFgTmht6hxUlXDsXOsOSGDHm1WO5VNrRbUcGeTPpdBMx0xeyZ9FTMTBCIAMOZ6UEb_eAX3X1iVIFkP_MPtuJcp0q8t9Tk_UBs-dHVRjyYcCsnetXYNI_mEsdtyg63aLXuJE1pMLb8-eamWaFfklVo-w9N9F0XTbmbkgGfcWU4/https%3A%2F%2Fmedium.com%2F%40rusty_lightning%2Flightning-routing-rough-background-dbac930abbad\n> >\n> >     [3]\n> >\n> https://www.tik.ee.ethz.ch/file/a20a865ce40d40c8f942cf206a7cba96/Scalable_Funding_Of_Blockchain_Micropayment_Networks%20(1).pdf\n> >     <\n> https://secure-web.cisco.com/1XOlJdRo0gtzmPhNfVlEpMsrVBAI6BSjdDawPogEDIwYDdva2BSx4H8F9B3E6bkVIqA7ByFEF85qVjJ775leFwE54p5G6-wHH4Cio0p9sYLJ14-NHwcwvYQ--zdI8hdAyjGQbcLltVFAmorMaTlHq4FGI1CmxlwiUYgH1tjZn3UAHOu5xm5pLVi6KTb9WsJvuJsOBJhLfRLWGcAhVbjRXuV8b3x_G4ybOg1CQYC9ZVq3RJCPnNgQ3BN3a5ZuzW4veOE_dgi80FEy1x7a8spH-TV-cb_fey6ud-S25AWQ1PbctVS5zgQ4Ki4XYkR5igotNGGbWhACevBJfU1Hxqk90_g-DgQtS9_e_UX_FsY-yAjw/https%3A%2F%2Fwww.tik.ee.ethz.ch%2Ffile%2Fa20a865ce40d40c8f942cf206a7cba96%2FScalable_Funding_Of_Blockchain_Micropayment_Networks%2520%281%29.pdf\n> >\n> >\n> >     We will eventually move away from the hash function based approach\n> >     in favor of something that allows us to decorrelate hops in a route.\n> >     We have indeed started writing down some of the ideas at least for\n> >     Lightning in the project's wiki [4], but they're definitely not\n> >     fleshed out.\n> >\n> >     [4]\n> https://github.com/lightningnetwork/lightning-rfc/wiki/Brainstorming\n> >     <\n> https://secure-web.cisco.com/1XqVZXht8sW8tdbLxwEMjoU-hxxV6OJwpKqc2OudZy26Le21yvOIBPwqizepwLi9TBeEV2BMDc-nCiKpj3eryi59jqvoZcBRrSQSVt9Qrq8pIxNSvhIMlG4cRd3lnj17JT9mDRRt0lS51C_9gpryV6qFqdiROdyJeTKfqUGmnvPo3isfeUbC_TOOfWLDV16jYA38ytCfTOryyDvJgJdYw7ArAUEMg10jNv8lV9aTARBOcOmgLjqJt0ktecsUpUCfIVAQlJEvtAAbWAUKwMoXg6MpIQEA4NE1ATntmwjLGl4IqQEqRAGxkGxWI8yQDL74yPPTIQmGTxs_JXE6YYMrhuD93GR1kyUJkOAH3Z_5nL1bsr3ifW31PJtUckQNnwY8e/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fwiki%2FBrainstorming\n> >\n> >\n> >\n> >     On Fri, Nov 17, 2017 at 3:10 PM Benjamin Mord <ben at mord.io\n> >     <mailto:ben at mord.io>> wrote:\n> >\n> >         \"I think this is exactly the right venue to discuss these kinds\n> >         of issue...\" - you are probably right! My bad.\n> >\n> >         Christian, thank you for your knowledgable reply. The footnotes\n> >         did not come through on my end, I am especially interested in\n> >         [3]. Do you have a link? I am thrilled to hear of a\n> >         Bitcoin-compatible revive alternative! :)\n> >\n> >         Are we keeping an inventory somewhere of the cryptographic\n> >         primitives being used in lightning and the specific assumptions\n> >         being made about them (e.g. preimage resistance vs collision\n> >         resistance and such)? One project I have not yet found but\n> >         believe we need across the entire cryptocurrency community, is a\n> >         (wiki-style?) inventory of unproven mathematical assumptions\n> >         (e.g. hardness of discrete logarithm) and/or cryptographic\n> >         primitives, cataloged in terms of the cryptocurrency\n> >         technologies which require them. Such a resource could help the\n> >         community respond more quickly, comprehensively, and\n> >         transparently to the inevitable cryptanalytic surprises that\n> >         will pop up over time (especially from the quantum cryptanalytic\n> >         area, but even the classical cryptanalytic community as well).\n> >\n> >         Related, I believe the ideal end state would be to only assume\n> >         existence of a preimage-resistant hash function, and to code\n> >         such that one function could be quickly swapped with another and\n> >         thus update entire system. I'm not sure if that is a realistic\n> >         goal, but here is my first attempt to move in that direction in\n> >         case it is of interest to lightning. It is hard to imagine it\n> >         would be a new idea, although I have not yet found the precedent:\n> >         http://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n> >         <\n> http://secure-web.cisco.com/1ewGQFfIxw1QZwneD3sDbhSSWP-YTmBwOYe529E7_zeYZZADnASbspvBAftPFXX6ZxJI2l2-8-xEqdpkmFg3fEIfkfRBYN8oZ8Z0HpeHh73MnT3Zi3M8GUs8SGMww38ZPnzsc7xlt7H5KFlLMcCsTWIgEtq4roZHDkYasanNeViP_UA3DIod7A281fNvWnQ1mnLs6d8WN_uFx1diU_xr-EoMab3wyANozirDj1gZ2_yPBn6S8tePYMkTkhIZlLz_BlvIfk9_KCOOiUcWxDTtCq9KdvoqEzStC04Z6q8xS5rtSnmK9GZZxv30yrgT8eWA4eOzce6AA3m0WEClNzbzANgi11GXBVde9pNiUIRcLDNw/http%3A%2F%2Fben.mord.io%2Fp%2Fdelayed-chained-key-revelation-dckr.html\n> >\n> >\n> >         Thanks,\n> >         Ben\n> >\n> >\n> >         On Nov 17, 2017 8:04 AM, \"Christian Decker\"\n> >         <decker.christian at gmail.com <mailto:decker.christian at gmail.com>>\n> >         wrote:\n> >\n> >             On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io\n> >             <mailto:ben at mord.io>> wrote:\n> >\n> >                 Ivan,\n> >\n> >                 That is mostly false, but with bits of truth sprinkled\n> >                 in. Contact me at ben at mord.io <mailto:ben at mord.io> for\n> >                 further discussion so we tread lightly on the lists'\n> >                 email inboxes.\n> >\n> >\n> >             I think this is exactly the right venue to discuss these\n> >             kinds of issue,\n> >             so please don't move the conversation somewhere else :-)\n> >\n> >             Routing is still very much in flux, we have a minimally\n> >             viable routing\n> >             protocol in the spec [1]. It is minimal in the sense that we\n> >             just push\n> >             the entire network's topology to the edges, which can then\n> >             locally\n> >             compute routes. This is effectively a source-routed network,\n> >             which\n> >             matches the requirements of the onion routing protocol we\n> >             use for\n> >             privact as well. But this does not mean that this is\n> >             protocol is set in\n> >             stone. We are actively working on finding better solutions\n> >             to the\n> >             problem of finding routes across a vast network of millions\n> >             if not\n> >             billions of nodes. Distance vector routing such as BGP uses\n> >             may be one\n> >             option like Ben suggested.\n> >\n> >             For now the network can easily scale to about 1 million\n> >             channels [2]\n> >             even on very limited devices, Upgrading to another protocol\n> >             at a later\n> >             point in time is trivial, since none of the routing\n> >             information is\n> >             consensus critical. We have all the extension points built\n> >             in to allow\n> >             future extensibility.\n> >\n> >\n> >                 But briefly: scale-capable routing protocols are\n> >                 possible as demonstrated by IP and thus by the internet\n> >                 itself. As for centralizing flow through small number of\n> >                 liquidity providers, yes that does seem economically\n> >                 probable, at least unless / until off-chain channel\n> >                 rebalancing mechanism (like the recently proposed\n> >                 \"revive\" protocol) come about. Bitcoin script is not\n> >                 currently revive-capable but Ethereum is, so either\n> >                 Bitcoin revive could be enabled via two-way pegged\n> >                 sidechain protocol with Ethereum, or even better, by a\n> >                 purpose-built (yet still not Turing-complete) extension\n> >                 to Bitcoin script itself in the future.\n> >\n> >\n> >             As a matter of fact, Conrad and I just published a similar\n> >             technique for\n> >             off-chain channel rebalancing and fund re-allocation based\n> >             solely on\n> >             Bitcoin [3] (major props to Conrad for the excellent\n> >             writeup!). The\n> >             flexibility in Bitcoin exists.\n> >\n> >             As for the hubs everybody is assuming will form, I don't\n> >             think they're\n> >             as likely to form. Creating such a hub is extremely costly\n> >             since it'll\n> >             have to allocate sufficient funds to cover the maximum\n> >             imbalance of all\n> >             of its channels ahead of time. Then the fees must cover the\n> >             opportunity\n> >             cost of allocating all of those funds to channels instead of\n> >             investing\n> >             them somewhere else. On top of that the funds will not be\n> >             moved alot\n> >             since they serve only a small number of endpoints connected\n> >             through\n> >             those channels, this compounds the problem of having high\n> >             fees. The high\n> >             fees make the hub channels a really bad choice for your\n> >             payments, after\n> >             all you were looking for small fees for your payments,\n> >             right? It opens\n> >             up an opportunity for nodes to open bypasses that grab some\n> >             of the\n> >             traffic and associated fees from the expensive hub.\n> >\n> >             All of that being said, we should be careful about our\n> >             predictions on\n> >             how the topology will look, I added some counter arguments\n> to a\n> >             hub-and-spoke network forming, but nobody can really be sure\n> >             about\n> >             what'll happen.\n> >\n> >\n> >                 In either case the lightning network seems a key first\n> >                 step, and even were off-chain payment rebalancing not\n> >                 possible for some odd reason, the lightning network\n> >                 seems extremely valuable and scaleable - regardless\n> >                 because the centralization you speak is not one that\n> >                 affects safety of the money supply itself, and these\n> >                 centralized hubs would be more dispensable / swappable\n> >                 versus the mining centralization risk that people more\n> >                 often talk about in Bitcoin. Lightning network\n> >                 centralization, even if it persisted somehow despite\n> >                 revive and future concepts, would not be an existential\n> >                 risk.\n> >\n> >\n> >             Rebalancing is definitely possible, even without [3], you can\n> >             disincentivize the use of a channel until they have been\n> >             rebalanced. For\n> >             long term imbalance, opening another channel may be the best\n> >             option\n> >\n> >\n> >                 As for transaction fees, the idea is only channel setup\n> >                 / tear down are required greatly reducing fees. Yes if\n> >                 txin fees were millions of dollars then people could not\n> >                 practically penalize fraud, but that is unlikely. Even\n> >                 if txin fees made fraud claims marginally unprofitable\n> >                 (yet practical) that would still be ok - the judicial\n> >                 systems of most countries prove that people go beyond\n> >                 self-interest when sufficiently ticked, a fact of human\n> >                 psychology which in turn creates the incentives that\n> >                 support honest business. (Also please be aware I'm not a\n> >                 lightning code contributor, so that team might also be\n> >                 doing more to address already than I thought to mention\n> >                 above.)\n> >\n> >\n> >             This is open to speculation as well. We hope to reduce the\n> >             load on the\n> >             on-chain network sufficiently to allow timely on-chain\n> >             settlements. By\n> >             aggregating payments off-chain we can also aggregate the\n> >             fees and then\n> >             use them to pay on-chain fees. So don't consider the\n> >             on-chain fees for\n> >             your channels as your sole loss, they are paid for by\n> >             payments you\n> >             forward. Ultimately this should encourage participants to\n> >             open channels\n> >             that support the network as a whole, not just themselves. We\n> are\n> >             building automations that should take care of this, the user\n> >             won't have\n> >             to do anything to improve the network topology.\n> >\n> >             Cheers,\n> >             Christian\n> >\n> >\n> >\n> >     _______________________________________________\n> >     Lightning-dev mailing list\n> >     Lightning-dev at lists.linuxfoundation.org\n> >     <mailto:Lightning-dev at lists.linuxfoundation.org>\n> >     https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> >     <\n> https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev\n> >\n> >\n> >\n> >\n> >\n> > _______________________________________________\n> > Lightning-dev mailing list\n> > Lightning-dev at lists.linuxfoundation.org\n> >\n> https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev\n> >\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171125/ae4972f1/attachment-0001.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-11-28T22:42:44",
                "message_text_only": "Olaoluwa Osuntokun <laolu32 at gmail.com> writes:\n> (re-sending as doesn't look like my original mail went through to the list?)\n\nI increased the limit to 80k now.\n\nCheers,\nRusty."
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-11-25T19:16:12",
                "message_text_only": "(final try as the prior mail hit the size limit, sorry for the spam!)\n\nHi Pedro,\n\nI came across this paper a few weeks ago, skimmed it lightly, and noted a\nfew interesting aspects I wanted to dig into later. Your email reminded me\nto re-read the paper, so thanks for that! Before reading the paper, I\nwasn't aware of the concept of coordinate embedding, nor how that could be\nleveraged in order to provide sender+receiver privacy in a payment network\nusing a distance-vector-like routing system. Very cool technique!\n\n\nAfter reading the paper again, my current conclusion is that while the\nprotocol presents some novel traits in the design a routing system for\npayment channel based networks, it lends much better to a\nclosed-membership, credit network, such as Ripple (which is the focus of\nthe paper).\n\n\nIn Ripple, there are only a handful of gateways, and clients that seek to\ninteract with the network must chose their gateways *very* carefully,\notherwise consensus faults can occur, violating safety properties of the\nnetwork. It would appear that this gateway model nicely translates well to\nthe concept of landmarks that the protocol is strongly dependant on.\nIdeally, each gateway would be a landmark, and as there are a very small\nnumber of gateways within Ripple (as you must be admitted to be a verified\ngateway in the network), then parameter L (the total number of landmarks)\nis kept small which minimizes routing overhead, the average path-length,\netc.\n\n\nWhen we compare Ripple to LN, we find that the two networks are nearly\npolar opposites of each other. LN is an open-membership network that\nrequires zero initial configuration by central administrators(s). It more\nclosely resembles *debit* network (a series of tubes of money), as the\nfunds within channels must be pre-committed in order to establish a link\nbetween two nodes, and cannot be increased without an additional on-chain\ncontrol transaction (to add or remove funds). Additionally, AFAIK (I'm no\nexpert on Ripple of course), there's no concept of fees within the\nnetwork. While within LN, the fee structure is a critical component of the\ninventive for node operators to lift their coins onto this new layer to\nprovider payment routing services.  Finally, in LN we rely on time-locks\nin order to ensure that all transactions are atomic which adds another set\nof constraints. Ripple has no such constraint as transfers are based on\nbi-lateral trust.\n\n\nWith that said, the primary difference between this protocol is that\ncurrently we utilize a source-routed system which requires the sender to\nknow \"most\" of the path to the destination. I say \"most\" as currently,\nit's possible for the receiver of a payment to use a poor man's rendezvous\nsystem to provide the sender with a set of suffix paths form what one can\nconsider ad-hoc landmarks. The sender can then concatenate these with\ntheir own paths, and construct the Sphinx routing package which encodes\nthe full route. This itself only gives sender privacy, and the receiver\ndoesn't know the identity of the sender, but the sender learns the\nidentity of the receiver.\n\nWe have plans to achieve proper sender/receiver privacy by extending our\nSphinx usage to leverage HORNET, such that the payment descriptor (payment\nrequest containing details of the payment) also includes several paths\nfrom rendezvous nodes (Rodrigo's) to the receiver. The rendezvous route\nitself will be nested as a further Anonymous Header (AHDR) which includes\nthe information necessary to complete the onion circuit from Rodrigo to\nthe receiver. As onion routing is used, only Rodrigo can decrypt the\npayload and finalize the route. With such a structure, the only nodes that\nneed to advertise their channels are nodes which seek to actively serve as\nchannel routers. All other nodes (phones, laptops, etc), don't need to\nadvertise their channels to the greater network, reducing the size of the\nvisible network, and also the storage and validation overhead. This serves\nto extend the \"scale ceiling\" a bit.\n\n\nMy first question is: is it possible to adapt the protocol to allow each\nintermediate node to communicate their time lock and fee references to the\nsender? Currently, as the full path isn't known ahead of time, the sender\nis unable to properly craft the timelocks to ensure safety+atomicity of\nthe payment. This would mean they don't know what the total timelock\nshould be on the first outgoing link. Additionally, as they don't know the\ntotal path and the fee schedule of each intermediate node, then once\nagain, they don't know how much to send on the first out going link. It\nwould seem that one could extend the probing phase to allow backwards\ncommunication by each intermediate node back to the sender, such that they\ncan properly craft a valid HTLC. This would increase the set up costs of\nthe protocol however, and may also increase routing failures as it's\npossible incompatibilities arise at run-time between the preferences of\nintermediate nodes. Additionally, routes may fail as an intermediate node\nconsumes too many funds as their fee, causing the funds to be insufficient\nwhen it reaches the destination. One countermeasure would maybe: the\nsender always sends waaay more than necessary, and gives the receiver a\none-time payment identifier, requiring that they route the remainder of\nthe funds *back* to them.\n\n\nTo solve this issue presently, we extend the header in Sphinx to include a\nper-hop payload which allows the sender to precisely dictate the\nstructure of the route, allows the intermediate nodes to authenticate the\ninformation given to it, and also allow the intermediate node to verify\nthat their policies have properly been respected. These payloads can also\nbe utilized by applications to communicate a small-ish amount of data to\nconstruct higher-level protocols on top of the system. Examples include:\ncross-chain swaps, chance payment games, higher-level B2B protocols,\nflavors of ZKCP's, media streaming, internet access proxying, etc.\n\n\n>From my point-of-view, when extended to LN, the core component of the\nprotocol (landmarks), becomes the weakest component. From my reading,\n*all* nodes need to be ware of an *identical* set of landmarks (more or\nless similar to the desired homogeneity of Gateways), otherwise the\ncoordinate embedding scheme breaks down. Currently, there's no requirement\nthat all nodes have a globally consistent view of the network. So then an\nimportant questions arises: who choose the landmarks? A desirable property\nof a routing system for LN (IMO) is that is has close to zero required\ninitial set up by a central administrator. With this protocol, it would\nseem that all nodes much ship with a hard coded set of global landmarks\nfor the path finding to succeed.  This itself pins a hard coordination\nrequirement amongst implementers to have something like this deployed.\nEven ignoring this requirement for a minute, I see several other\ndownsides:\n\n   * As *all* payments must flow through landmarks (since nodes break up\n     their payment into L sub-flows), the landmarks must be very, very\n     well capitalized. This would cause strong consolidation of the\n     selection of landmarks, as they need extremely large channels in\n     order to facilitate transfer within the network.\n\n   * As landmarks must be globally known, this it seems this would\n     introduce fragility in the network. If most of the landmarks go down\n     (fails stop crashes) due to hardware issues, DoS, exploited bugs,\n     etc, then the network's throughput instantly becomes crippled.\n\n   * If all payment flow *must* go through landmarks, and the transfers\n     within the network are relatively uni-directional (all payment going\n     to Candy Crush Ultra: Lighting Strikes Twice), then their\n     channels would become unbalanced very quickly.\n\n\nThe last point there invokes another component of the network: passive\nchannel rebalancing. With source routing, it's possible for nodes to\npassive rebalance their channels, in order to keep the in equilibrium,\nsuch that on average they'll be able to handle a payment flow coming from\nany direction. This is possible as with source routing, it's easy for a\nnode to simply send a payment to himself incoming/outgoing from the pair\nof channels they wish to adjust the available flow of. With\ndistance-vector-like protocols, this doesn't seem possible, as the node\ndoesn't have any control of the incoming channel that the payment will\narrive on.\n\n\nFinally, the notion of value privacy within the scheme seems a bit weak.\n>From this definition, any protocol that didn't broadcast intents to send\npayments to the world would achieve this trait. The base Bitcoin\nblockchain doesn't mask the values of transfers (yet), but even if it did\nunconditionally maintaining value privacy of channel doesn't seem\ncompatible with multi-hop payment networks (nodes can simply perform\nprobing/tagging attacks to ascertain a range of the size of a channel). A\npossible mitigation would be for nodes to probabilistically drop incoming\npayments, with all nodes sampling from the same distribution. However,\nthis would dramatically increase routing failures by senders, removing the\n\"low-latency\" trait of payment networks that many find desirable.\n\n\nPersonally, I've very excited to see additional research on the front of\nrouting within the network! Excellent work by all authors.\n\n\nIn the end, I don't think it'll be a one-size fits all solution, as each\nrouting protocol delivers with it a set of tradeoffs that should be\nweighed depending on target characteristics, and use-cases. There's no\nstrong requirement that the network as a whole uses a *single* routing\nprotocol. Instead several distinct protocols can be deployed based on\nuse-case requirements, as we only need to share a single end-to-end\nconstruct: the HTLC. I could see a future in a few years where we have\nseveral deployed protocols, similar to the wide array of existing routing\nprotocols deployed on the Internet. What we have currently gets us from\nZero to One. We'll definitely need to experiment with additional\napproaches as the size of the network grows, and the true economic flow\npatterns emerge after we all deploy to mainnet.\n\n\n-- Laolu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171125/d57bbed0/attachment-0001.html>"
            },
            {
                "author": "Pedro Moreno Sanchez",
                "date": "2017-11-30T16:59:35",
                "message_text_only": "Hi Laolu,\nThanks for your detailed and interesting reply. Please see below some\npoints I would like to make in some of your comments and the answers to\nyour questions in the last email. And of course, I would be happy to\nfurther discuss with you.\n\n\nOn 11/25/17 2:16 PM, Olaoluwa Osuntokun wrote:\n> (final try as the prior mail hit the size limit, sorry for the spam!)\n> \n> Hi Pedro,\u00a0\n> \n> I came across this paper a few weeks ago, skimmed it lightly, and noted a\n> few interesting aspects I wanted to dig into later. Your email reminded me\n> to re-read the paper, so thanks for that! Before reading the paper, I\n> wasn't aware of the concept of coordinate embedding, nor how that could be\n> leveraged in order to provide sender+receiver privacy in a payment network\n> using a distance-vector-like routing system. Very cool technique!\n> \n> \n> After reading the paper again, my current conclusion is that while the\n> protocol presents some novel traits in the design a routing system for\n> payment channel based networks, it lends much better to a\n> closed-membership, credit network, such as Ripple (which is the focus of\n> the paper).\u00a0\n> \nI personally do not agree with this conclusion. The Ripple network uses\na global ledger that contains all the nodes, all the credit links among\nthem and the weight of each credit link at all points in time.\nTherefore, as such, every user can simply check such public information\nand decide a route with enough credit on its own. There is no need for a\ndecentralized routing algorithm on Ripple as all the information is\nbeing continuously updated in the ledger.\n\nIn the work we present in this paper, we focus instead on a\ndecentralized payment network, where the links\u2019 states (e.g., bitcoin\nbalances in the payment channels within LN) are not continuously logged\nin the blockchain but instead, every link is locally maintained by the\ncorresponding pair of users. With such setting in mind, we have designed\nour routing algorithm (SpeedyMurmurs) and we believe it has potential to\nbe used in the Lightning network as well.\n> \n> In Ripple, there are only a handful of gateways, and clients that seek to\n> interact with the network must chose their gateways *very* carefully,\n> otherwise consensus faults can occur, violating safety properties of the\n> network. It would appear that this gateway model nicely translates well to\n> the concept of landmarks that the protocol is strongly dependant on.\n> Ideally, each gateway would be a landmark, and as there are a very small\n> number of gateways within Ripple (as you must be admitted to be a verified\n> gateway in the network), then parameter L (the total number of landmarks)\n> is kept small which minimizes routing overhead, the average path-length,\n> etc.\n> \nI think this description confuses the terms: gateway, validator and\nlandmark. A gateway is an online exchange service that is trusted to\ncorrectly create a credit link with a new user in the Ripple network. If\nAlice has a Ripple wallet but no credit link yet in the Ripple network,\nshe can get her first issued credits on a link with a gateway.\nSimilarly, Alice can use such online exchange service to get her first\nbitcoins by paying fiat currency, for instance. Importantly, a gateway\ndoes not take part in the Ripple Consensus Algorithm, and therefore a\ngateway cannot provoke consensus failures and violate safety properties.\n\nThe Ripple consensus algorithm is run among a set of validators. A\nvalidator is the one that can provoke consensus failures. Note that a\nvalidator is a participant in the consensus protocol that might not even\nhave a wallet in the Ripple network and therefore might not even be a\ngateway. For example, MIT and Microsoft have run a validator and are not\ngateways in the Ripple network.\n\nFinally, a landmark as used in SpeedyMurmurs, the routing algorithm we\npropose in this paper,  is simply a node in the network that it is\n*only* used to bootstrap the routing algorithm, and any node in the\nnetwork can do so. In the very specific case of a decentralized version\nof the Ripple network such as SilentWhispers\n(https://eprint.iacr.org/2016/1054), gateways become good candidates to\nbe such landmarks. However, the routing algorithm that we propose in\nSpeedyMurmurs is by no means tied to gateways and in particular,\nlandmarks can be simply nodes chosen at random from the complete set of\nnodes in the network, as we show in the paper. Therefore, we believe\nthat SpeedyMurmurs might be suitable for different payment networks, and\nin particular for the LN.\n> \n> When we compare Ripple to LN, we find that the two networks are nearly\n> polar opposites of each other. LN is an open-membership network that\n> requires zero initial configuration by central administrators(s). It more\n> closely resembles *debit* network (a series of tubes of money), as the\n> funds within channels must be pre-committed in order to establish a link\n> between two nodes, and cannot be increased without an additional on-chain\n> control transaction (to add or remove funds). Additionally, AFAIK (I'm no\n> expert on Ripple of course), there's no concept of fees within the\n> network. While within LN, the fee structure is a critical component of the\n> inventive for node operators to lift their coins onto this new layer to\n> provider payment routing services.\u00a0 Finally, in LN we rely on time-locks\n> in order to ensure that all transactions are atomic which adds another set\n> of constraints. Ripple has no such constraint as transfers are based on\n> bi-lateral trust.\n> \nI agree that comparing Ripple and LN is like comparing apples and\noranges. For starters, Ripple is a \u201cblockchain-focussed\u201d payment network\nas *all* the operations in the network are registered in the blockchain\nwhile the LN only uses the blockchain for opening and closing a payment\nchannel. Ripple is a credit network while the LN is a debit network. And\nmany other differences.\n\nThere are some similarities though. In Ripple *there is* also the\nconcept of fee being charged for forwarding a payment and for currency\nexchange. This fee structure has a similar motivation as in the LN:\ncreate an incentive for users to be used as intermediate hops in\npayments. Both networks face/will have to face similar challenges:\nbootstrapping, i.e., how to create the first credit link/payment channel\nfor a new user in the network and with whom so that one can transact\nwith the rest of the network; liquidity: i.e., what should be the\nnetwork topology and how much credit/debit there should be in the\nlinks/channels so that every user can transact to any other user in the\nnetwork; and many others.\n\nBut again, in SpeedyMurmurs we are not presenting a routing algorithm\nfor a \u201cblockchain-centered\u201d payment network like Ripple but rather a\nrouting algorithm for a decentralized payment network such as\nSilentWhispers, LN, Raiden Network or Interledger.\n> \n> With that said, the primary difference between this protocol is that\n> currently we utilize a source-routed system which requires the sender to\n> know \"most\" of the path to the destination. I say \"most\" as currently,\n> it's possible for the receiver of a payment to use a poor man's rendezvous\n> system to provide the sender with a set of suffix paths form what one can\n> consider ad-hoc landmarks. The sender can then concatenate these with\n> their own paths, and construct the Sphinx routing package which encodes\n> the full route. This itself only gives sender privacy, and the receiver\n> doesn't know the identity of the sender, but the sender learns the\n> identity of the receiver.\u00a0\n> \n> We have plans to achieve proper sender/receiver privacy by extending our\n> Sphinx usage to leverage HORNET, such that the payment descriptor (payment\n> request containing details of the payment) also includes several paths\n> from rendezvous nodes (Rodrigo's) to the receiver. The rendezvous route\n> itself will be nested as a further Anonymous Header (AHDR) which includes\n> the information necessary to complete the onion circuit from Rodrigo to\n> the receiver. As onion routing is used, only Rodrigo can decrypt the\n> payload and finalize the route. With such a structure, the only nodes that\n> need to advertise their channels are nodes which seek to actively serve as\n> channel routers. All other nodes (phones, laptops, etc), don't need to\n> advertise their channels to the greater network, reducing the size of the\n> visible network, and also the storage and validation overhead. This serves\n> to extend the \"scale ceiling\" a bit.\n> \nTwo comments here:\n * As Christian Decker indicated in a previous email, this routing\ntechnique assumes that the routing layer and the onion layer are\ntogether by default. This is obviously an interesting alternative worth\nexploring and investigating what advantages/disadvantages it has and\nwhat are the inherent tradeoffs.\n\n * Nevertheless, it is obviously not the only alternative. We could\nseparate the routing layer from the onion layer and study what\nadvantages/disadvantages we can get from there. For instance, in\nSpeedyMurmurs, nodes only need to announce their channels to their\nneighbors and yet they are able to reconstruct a path from sender to the\nreceiver.  Our current experiments show that this simplicity has\nenormous benefits in terms of performance.\n\nIn my opinion, it is interesting to look at tradeoffs and the\nnecessary/sufficient guarantees for the routing algorithm in a\ndecentralized payment network such as the LN before we stick to a solution.\n\n> \n> My first question is: is it possible to adapt the protocol to allow each\n> intermediate node to communicate their time lock and fee references to the\n> sender? Currently, as the full path isn't known ahead of time, the sender\n> is unable to properly craft the timelocks to ensure safety+atomicity of\n> the payment. This would mean they don't know what the total timelock\n> should be on the first outgoing link. Additionally, as they don't know the\n> total path and the fee schedule of each intermediate node, then once\n> again, they don't know how much to send on the first out going link. It\n> would seem that one could extend the probing phase to allow backwards\n> communication by each intermediate node back to the sender, such that they\n> can properly craft a valid HTLC. This would increase the set up costs of\n> the protocol however, and may also increase routing failures as it's\n> possible incompatibilities arise at run-time between the preferences of\n> intermediate nodes. Additionally, routes may fail as an intermediate node\n> consumes too many funds as their fee, causing the funds to be insufficient\n> when it reaches the destination. One countermeasure would maybe: the\n> sender always sends waaay more than necessary, and gives the receiver a\n> one-time payment identifier, requiring that they route the remainder of\n> the funds *back* to them.\n> \n> \n> To solve this issue presently, we extend the header in Sphinx to include a\n> per-hop payload which allows the sender to precisely dictate the\n> structure of the route, allows the intermediate nodes to authenticate the\n> information given to it, and also allow the intermediate node to verify\n> that their policies have properly been respected. These payloads can also\n> be utilized by applications to communicate a small-ish amount of data to\n> construct higher-level protocols on top of the system. Examples include:\n> cross-chain swaps, chance payment games, higher-level B2B protocols,\n> flavors of ZKCP's, media streaming, internet access proxying, etc.\n> \nFor what I understand, what you are asking/proposing is a mixture of the\nrouting layer (route from sender to receiver) + onion layer (using\n\u201cadapted\u201d/\u201doptimized\u201d sphinx)+ payment layer (HTLCs). Even in this mixed\nalternative, we might want to investigate what are the guarantees and\ntradeoffs provided. For instance, in another recent work from us\n(https://eprint.iacr.org/2017/820), we proposed multi-hop HTLC: A\nmodification of the HTLC contract so that the condition of the\nconditional payment does not lead to privacy issues.\n\nHowever, I rather prefer the approach of looking at one layer/component\nat a time and see what optimizations we can perform there and what are\nthe inherent impossibilities. Therefore, we have not thoroughly studied\nyet how to integrate the routing algorithm we propose in SpeedyMurmurs\nwith a possible payment operation. Having said that, some variation of\nwhat you sketched might work. Another proposal might consist on a\npayment operation that does not assume source-routing to start with.\nThere are many possibilities to investigate and think about.\n> \n> From my point-of-view, when extended to LN, the core component of the\n> protocol (landmarks), becomes the weakest component. From my reading,\n> *all* nodes need to be ware of an *identical* set of landmarks (more or\n> less similar to the desired homogeneity of Gateways), otherwise the\n> coordinate embedding scheme breaks down. Currently, there's no requirement\n> that all nodes have a globally consistent view of the network. So then an\n> important questions arises: who choose the landmarks? A desirable property\n> of a routing system for LN (IMO) is that is has close to zero required\n> initial set up by a central administrator. With this protocol, it would\n> seem that all nodes much ship with a hard coded set of global landmarks\n> for the path finding to succeed.\u00a0 This itself pins a hard coordination\n> requirement amongst implementers to have something like this deployed.\n\nI think your description here might not be accurate for what I\nunderstand. What you describe here is indeed a problem inherent to the\noriginal landmark routing mechanism. However, it is no longer an issue\nin SpeedyMurmurs. In particular, any node could be a landmark or two\nusers could have a different view of what set of nodes constitute the\nset of  landmarks. As soon as sender and receiver have a non-empty\nintersection of their set of landmark-nodes, SpeedyMurmurs provides a\nroute among them.\n\nIn the approach we present in SpeedyMurmurs, the landmark is just a node\nthat declares himself a landmark by triggering to his neighbors the\nchain of messages required to construct the embeddings in the whole\nnetwork. Any node in the network can do this. Moreover, in\nSpeedyMurmurs, this is a one-time thing. Once a set of embedding are\ncreated, the landmark is not used again. Changes in the network topology\nare locally handled by the neighbors of the newly connected/disconnected\nnode.\n\n> Even ignoring this requirement for a minute, I see several other\n> downsides:\n> \n> \u00a0 \u00a0* As *all* payments must flow through landmarks (since nodes break up\n> \u00a0 \u00a0 \u00a0their payment into L sub-flows), the landmarks must be very, very\n> \u00a0 \u00a0 \u00a0well capitalized. This would cause strong consolidation of the\n> \u00a0 \u00a0 \u00a0selection of landmarks, as they need extremely large channels in\n> \u00a0 \u00a0 \u00a0order to facilitate transfer within the network.\n\nThis is true in the original landmark routing. However, this is no\nlonger the case in SpeedyMurmurs. Paths no longer require to have the\nlandmark as intermediate user. Even further, a path from a sender to the\nreceiver might use links that are not even part of the spanning tree. We\ncall them \u201cshortcuts\u201d in the paper. We designed it like this having the\ncapitalization problem you mentioned in mind.\n\n> \n> \u00a0 \u00a0* As landmarks must be globally known, this it seems this would\n> \u00a0 \u00a0 \u00a0introduce fragility in the network. If most of the landmarks go down\n> \u00a0 \u00a0 \u00a0(fails stop crashes) due to hardware issues, DoS, exploited bugs,\n> \u00a0 \u00a0 \u00a0etc, then the network's throughput instantly becomes crippled.\n\nAgain, this is true in the original landmark routing, not the case in\nSpeedyMurmurs. We use the landmarks as a one-time setup and any node\ncould be a landmark.  In particular, every node in the network could be\nthe landmark if it is really DoS-sensitive. We just require that a\nsender and a receiver have a non-empty intersection of the landmarks\nthat they have seen so far.\n\n\n> \n> \u00a0 \u00a0* If all payment flow *must* go through landmarks, and the transfers\n> \u00a0 \u00a0 \u00a0within the network are relatively uni-directional (all payment going\n> \u00a0 \u00a0 \u00a0to Candy Crush Ultra: Lighting Strikes Twice), then their\n> \u00a0 \u00a0 \u00a0channels would become unbalanced very quickly.\n\nAgain, this is true in the original landmark routing, not the case in\nSpeedyMurmurs. Payments *must not* go through landmarks any longer with\nour approach. Moreover, unbalanced payment channels are an issue to\nconsider independently of the routing algorithm that is in use.\n\nAll in all, it seems that there might be some misconceptions and/or\naspects in the current draft of the paper that might need clarifications\nso that the approach is well understood. We are more than happy to\nfurther talk about it and answer questions, doubts or concerns that\nmight arise.\n\n\n> \n> \n> The last point there invokes another component of the network: passive\n> channel rebalancing. With source routing, it's possible for nodes to\n> passive rebalance their channels, in order to keep the in equilibrium,\n> such that on average they'll be able to handle a payment flow coming from\n> any direction. This is possible as with source routing, it's easy for a\n> node to simply send a payment to himself incoming/outgoing from the pair\n> of channels they wish to adjust the available flow of. With\n> distance-vector-like protocols, this doesn't seem possible, as the node\n> doesn't have any control of the incoming channel that the payment will\n> arrive on.\n> \nI think this is another case of mixing functionalities at different\nlayers. I do agree that unbalanced channels is an interesting problem to\ndeal with. I, however, do not agree that we should choose one routing\napproach or another based on how unbalanced channels are handled.\n\nIn my understanding, what you propose requires several assumptions: (i)\nthe node should be aware of \u201cenough\u201d network topology so that it is\naware of those \u201cspecial topology shapes\u201d. However, if opening channel\noperations are indistinguishable from other payments in the Bitcoin\nblockchain, this is not trivial. However, company X might not want to\nreveal its channel with company Y to its competitors; (ii) such\ncircular/suitable paths actually exist. However, this might just not be\nthe case. (iii) The chosen path(s) has enough liquidity for the\n\u201cequilibrium\u201d. As the node is not aware of the current capacity of each\nof the channels, it might be the case that several payments are required\nfor the equilibrium to happen.\n\nIn any case, my point is not to discuss whether the problem of\nunbalanced channels is interesting. My point is that I think we should\nnot stick to one routing algorithm depending on how another\nalgorithm/functionality at another layer is handled, at least not before\nwe explore and fully understand the tradeoffs, benefits and\nimpossibilities that we will have to face here.\n\n> \n> Finally, the notion of value privacy within the scheme seems a bit weak.\n> From this definition, any protocol that didn't broadcast intents to send\n> payments to the world would achieve this trait. The base Bitcoin\n> blockchain doesn't mask the values of transfers (yet), but even if it did\n> unconditionally maintaining value privacy of channel doesn't seem\n> compatible with multi-hop payment networks (nodes can simply perform\n> probing/tagging attacks to ascertain a range of the size of a channel). A\n> possible mitigation would be for nodes to probabilistically drop incoming\n> payments, with all nodes sampling from the same distribution. However,\n> this would dramatically increase routing failures by senders, removing the\n> \"low-latency\" trait of payment networks that many find desirable.\u00a0\n> \nI totally agree with you here. I believe that having stronger notions of\nvalue privacy is conceptually hard. Imagine that the payment value must\nbe routed through the path from sender to the receiver. In particular,\nany intermediate node must know what value is receiving from its\npredecessor to forward the corresponding value to the successor node in\nthe path.\n> \n> Personally, I've very excited to see additional research on the front of\n> routing within the network! Excellent work by all authors.\n\nThanks. Really looking forward for further conversations and discussions.\n\n> \n> \n> In the end, I don't think it'll be a one-size fits all solution, as each\n> routing protocol delivers with it a set of tradeoffs that should be\n> weighed depending on target characteristics, and use-cases. There's no\n> strong requirement that the network as a whole uses a *single* routing\n> protocol. Instead several distinct protocols can be deployed based on\n> use-case requirements, as we only need to share a single end-to-end\n> construct: the HTLC. I could see a future in a few years where we have\n> several deployed protocols, similar to the wide array of existing routing\n> protocols deployed on the Internet. What we have currently gets us from\n> Zero to One. We'll definitely need to experiment with additional\n> approaches as the size of the network grows, and the true economic flow\n> patterns emerge after we all deploy to mainnet.\n> \nI also agree with you here. I also think that there might be several\nrouting approaches at the routing layer, the same way we have BGP, OSPF,\nRIP protocols for routing in IP today. I also believe that we might have\nmore than just HTLC-based payments in the LN, but this is the topic for\nanother long email :)\n\nMany thanks again for the feedback and looking forward for more\nconversations,\nPedro.\n\n> \n> -- Laolu\n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171130/9fc27a52/attachment-0001.sig>"
            },
            {
                "author": "Pedro Moreno Sanchez",
                "date": "2017-11-23T00:47:44",
                "message_text_only": "Hello Giovanni,\n\nthanks for you interest in our work.\n\nThe onion-like packets used for *payments* in the current LN\nimplementations inevitably assume that the sender knows the complete\npath from the sender to the intended receiver. The question/challenge\nthat we are solving in this work is: how does the sender gets to know\nsuch path in the first place?\n\nOne approach is that each user in the LN locally stores the complete set\nof opened channels either by looking at open channel transactions in the\nblockchain or by a gossip protocol. However, this approach has trivial\nprivacy issues and it is not scalable for a growing number of users and\nchannels between them. Moreover, this approach is no longer possible if\nopen channel transactions can be modified such that they are\nindistinguishable from other Bitcoin transactions.\n\nInstead, we assume a decentralized setting where each user only needs to\nknow her own open channels and a small set of well connected users (that\nwe called landmarks). In this decentralized setting, our approach still\nallows a user to route a payment to the intended receiver while\npreserving scalability and privacy.\n\nCheers,\nPedro.\n\n\nOn 11/22/17 9:11 AM, Giovanni Di Stasi wrote:\n> Hello,\n> \n> I am in the process of studying your routing approach and a doubt arised\n> related to the privacy of payments.\n> The current LN accomplishes payments thorugh onion-like packets which do\n> not reveil the path, but just previous and next hops.\u00a0\n> Your approach also aims at obfuscating the path. What is that your\n> approach provides more that is not currently provided in the current LN\n> implementations?\n> \n> Thanks,\n> Giovanni\n> \n> On Tue, Nov 21, 2017 at 4:37 PM, Pedro Moreno Sanchez\n> <pmorenos at purdue.edu <mailto:pmorenos at purdue.edu>> wrote:\n> \n>     Hello,\n> \n>     my name is Pedro Moreno-Sanchez and I am a PhD student at the computer\n>     science department at Purdue. I would like to bring to your attention a\n>     novel routing algorithm suitable for the Lightning Network (LN) that I\n>     have been working on with my supervisor Prof. Aniket Kate (Purdue\n>     University) and my co-workers Stefanie Roos and Prof. Ian Goldberg\n>     (University of Waterloo).\n> \n>     Our approach is called SpeedyMurmurs, a routing algorithm for\n>     decentralized payment networks such as the LN. SpeedyMurmurs uses an\n>     embedding-based approach, meaning that the algorithm assigns meaningful\n>     coordinates to nodes that enable efficient and effective discovery of\n>     payment paths.\u00a0 In a nutshell, SpeedyMurmurs creates a spanning tree by\n>     means of a Breadth-First Search and then associates a coordinate to each\n>     node depending on its position in the tree. A path from the sender to\n>     the receiver is then calculated in a flexible manner, with each\n>     intermediate node choosing the next node in the path as a function of\n>     its neighbors' coordinates, available funds and closeness to the\n>     receiver. To account for topology changes (e.g., a new channel is\n>     created), the routing information is locally updated by only those\n>     affected nodes in the network.\n> \n>     We have simulated several configurations of SpeedyMurmurs using real\n>     data from the Ripple network and compared it with other routing\n>     algorithms available in the literature. Our simulation results show that\n>     SpeedyMurmurs is able to find paths at about twice faster, reduces the\n>     communication overhead by at least a factor of 2 and maintains a similar\n>     or higher payment success ratio. Our simulation framework is open source\n>     and we believe that it might be of independent interest for this\n>     community to test this and any other alternative protocols that you\n>     might have in mind. If you are interested, we are happy to extend on\n>     this.\n> \n>     Finally, we also show that SpeedyMurmurs achieves the privacy notions of\n>     interest in the LN. In particular, SpeedyMurmurs achieves value privacy,\n>     i.e., the total value of a transaction remains hidden, as well as sender\n>     and receiver privacy, i.e., the identities of the two transacting nodes\n>     remain hidden from the adversary.\n> \n> \n>     You can find all the details in the draft of our paper [1]. The final\n>     version of this work will appear at NDSS 2018 conference [2]. We would\n>     be glad to hear any question and feedback from you and are open to carry\n>     out further collaborations if this line of work is of interest for you.\n> \n>     Best regards,\n>     Pedro, Stef, Aniket and Ian.\n> \n>     [1] https://arxiv.org/abs/1709.05748\n>     <https://secure-web.cisco.com/1hKUYOfcuq4S8a9TIKcLHGL9DClggwCNIawUq93hdeDE96Iwqy58ZYdtuXM7Gdlsa7Jrf2OSRaN8bCSA5A74crC3YMfDDYBFzdPzGLddtPHiwfricnMNkNn1ckmgnLM9PZgTRN8pb6zsMwR4nOpoDV7iA0ADp6e_ai5Xvb5KYV7eIT7uRjN97oObGzTHtgOqrvq4QOxNfIJPm0qFFlSaDjnYrwhzLI8ztEKvLkjYqtUiDUN87Uk-vfS3Fr4z-UfP3TXAQAXxMnjFgU0RGtbUP6EPL3Aq8e1hDo-EH4puHV5s7yrTp3FqszUcVLENKMB41mcbQ7FiMVGyLKjdBj3zl9_mpOKPT0Btoda9HkUkOQvegEfkEU5Egi-i1PU64R8Hwl8h0Kw2PQvNp_pivjXHyyg/https%3A%2F%2Farxiv.org%2Fabs%2F1709.05748>\n>     [2] https://www.ndss-symposium.org/\n>     <https://secure-web.cisco.com/1nggVVGPi7xPxGDgQEilIAwDXM7YLFtoex67MSrW44z8RuhhcveLKqA2oIqsnabgrBe15G6j0f9vgW1bEbCRP2OCVp_VxnY7NxW8_KegfsFJ-UIL56M33Y3G-FLqnj8MPI-5Ik2yef5hW3NJyplwQLjdR-9qJ6HhVv-gtcwxr_pTaymYQ7Z3ghG6eMS8Yn4-uMik8eXkyuRp3EtJF3r-9xJbJrA97MdUSXtrLA0oWCqQ442ADPSP1ksXQmw9Bk-sk26Un4PNoiWNyQcst0VO2BgMS0QSHB0d25C0X8G0cToaTF0-NBoeN9cJiRktO3rXgOPwSUVb-GmdkK4iYmOpDoRbUj4UEyU72u2DrUYIvNH1PtWMMTmpDGA0GR3L3hriruRpB3GcieDB-BJ1SFC31gA/https%3A%2F%2Fwww.ndss-symposium.org%2F>\n> \n>     On 11/17/17 8:09 PM, Saravanan Vijayakumaran wrote:\n>     > Hi Christian,\n>     >\n>     > Are there any open source simulators available for trying different\n>     > routing strategies? Or even a simulator for the Lightning network as a\n>     > whole?\n>     >\n>     > Regards\n>     > sarva\n>     >\n>     >\n>     > On Fri, Nov 17, 2017 at 8:00 PM, Christian Decker\n>     > <decker.christian at gmail.com <mailto:decker.christian at gmail.com>\n>     <mailto:decker.christian at gmail.com\n>     <mailto:decker.christian at gmail.com>>> wrote:\n>     >\n>     >\u00a0 \u00a0 \u00a0Oh yeah, my mail tool destroyed that mail quite expertly :-)\n>     >\n>     >\u00a0 \u00a0 \u00a0The footnotes were\u00a0\n>     >\u00a0 \u00a0 \u00a0[1]\n>     >\u00a0 \u00a0 \u00a0https://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md\n>     <https://secure-web.cisco.com/1QCSVb9BsMDqtEKFYVGufBky5ZVyP5f-3BY6BU8hx8o5B_AQk9o3bMUIXLEwycuzAbZY9slXFGwMN1G6RxiejW-WZ0cZbKqEvug8fwvQsatOiuQ0okPQ-hLPmLR_AoupYFwgQBAKrMGJ0ShV7lcmrC2Iks3wVwfZIUphx3-6pWfrawTevAfoHjvhJ10t231HSKgWOAqorvonX-SSNdHq7hCkrTrsKJ_ktylzczPRI_VYVNuhX6pWUcRbizufYj8zvrcIMxbRpPBHxE4pMZDtnaYWUnZ0RvekRAOF41AXozQT1P3O332N4b5x65xgxg2HUmmyJGTGlsqQxXdfC2xcxyEop3UL6RxpLRrce7hMBrzM9L9N4VMdSLKvx5gfaQMfyh8MHUT7w7PVJPcwIq_eoTg/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fblob%2Fmaster%2F07-routing-gossip.md>\n>     >\u00a0 \u00a0\n>     \u00a0<https://secure-web.cisco.com/1wkWGu7k6qIvsw8KxbTL8XXIpbTYjcgzOohVSUjpLJpNW0_r00YaFlguhX0pSCEAg2qU5kztXF4bxEpLbMz-RLAz9KTBvE0lh3kFGUjL5qke6yx8EcYvhHQQSttWjRX5HOt69vu8suXd7AhjEweVxeBFhvptINqjBarDx7woqCa14ZgWZdMk0dAt45Lnu_w1wjgn3j5sD7tBo187MGXR94eapimiMFjXySj70GeP1yiEA8rP0NUQ5CSXme2wQy-spVW_SLQpvkAQ01NlXUjK-ufQw_APez6C73Qx0bFh_9F-CPhKhhvM3tSs6IGNEM63aXMVeti2Ci0R5Xc15tvcT9gxpC32bNetja5ber6wbIHLbI9FWviQ63cWaNwhedQRN/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fblob%2Fmaster%2F07-routing-gossip.md\n>     <https://secure-web.cisco.com/1wkWGu7k6qIvsw8KxbTL8XXIpbTYjcgzOohVSUjpLJpNW0_r00YaFlguhX0pSCEAg2qU5kztXF4bxEpLbMz-RLAz9KTBvE0lh3kFGUjL5qke6yx8EcYvhHQQSttWjRX5HOt69vu8suXd7AhjEweVxeBFhvptINqjBarDx7woqCa14ZgWZdMk0dAt45Lnu_w1wjgn3j5sD7tBo187MGXR94eapimiMFjXySj70GeP1yiEA8rP0NUQ5CSXme2wQy-spVW_SLQpvkAQ01NlXUjK-ufQw_APez6C73Qx0bFh_9F-CPhKhhvM3tSs6IGNEM63aXMVeti2Ci0R5Xc15tvcT9gxpC32bNetja5ber6wbIHLbI9FWviQ63cWaNwhedQRN/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fblob%2Fmaster%2F07-routing-gossip.md>>\n>     >\u00a0 \u00a0 \u00a0[2]\n>     >\u00a0 \u00a0\n>     \u00a0https://medium.com/@rusty_lightning/lightning-routing-rough-background-dbac930abbad\n>     <https://secure-web.cisco.com/1QlQABw_J2zOgEv2OwHqW_kAUUOtsbAeDZOTrd5Poo978Dahqri_ejNF_Llc8OqZa8NUUUnVcF6XvNoQl5wDYCzCMe74Loa3XitswCBI7Q3jtwlZ4amZqFA3cxnHs5uRckoeKTv9UF0_kGySCJM1mxEZTH5mCbaHagy0rIrvfQ1W12-zkt6L2Id1qWHkG8lcdkiwcpscqHZbwnVXGYPBH7dGq1RT7_8S7zRJ74L9AAFHjCW_67HUAJ1xKuaboo2teXFAOH2lCtlgfMv6HBo8IRKmcp6SdM9n2niHbGu3xDQWDETzO1tjuuD9lDCWn26YQnZMp1QmFJR1Q9d01pvg0WSrcHqT8uM0UnOyDhGTd1MjCxD0MU_vbrdmmbJGNVFVJhiRMMinvo1Rb0DaQ8ffxHl9wVLc7mzVbwOGc9kKv6t4/https%3A%2F%2Fmedium.com%2F%40rusty_lightning%2Flightning-routing-rough-background-dbac930abbad>\n>     >\u00a0 \u00a0\n>     \u00a0<https://secure-web.cisco.com/1UG1OaEI1KFpQ4prjxrhN1Wsxs0P1Tco0MXQz0xltJZQjwI-sNi98eXMz-gW4qOQd2jJ4i0uktvL8CH-9RrmEg3GkxHfcxjnjxY_hlLP-ctXOYMSk4BFbySy7vD5xWivimHIfMHtr13ffgEoFLItUgoajxUe7tnkchPN_P5OZ_FOzYdpqW_UDdgWW0_VOsccR5yt1vh0MRyVxO2B2ua8k4NmbFgTmht6hxUlXDsXOsOSGDHm1WO5VNrRbUcGeTPpdBMx0xeyZ9FTMTBCIAMOZ6UEb_eAX3X1iVIFkP_MPtuJcp0q8t9Tk_UBs-dHVRjyYcCsnetXYNI_mEsdtyg63aLXuJE1pMLb8-eamWaFfklVo-w9N9F0XTbmbkgGfcWU4/https%3A%2F%2Fmedium.com%2F%40rusty_lightning%2Flightning-routing-rough-background-dbac930abbad\n>     <https://secure-web.cisco.com/1UG1OaEI1KFpQ4prjxrhN1Wsxs0P1Tco0MXQz0xltJZQjwI-sNi98eXMz-gW4qOQd2jJ4i0uktvL8CH-9RrmEg3GkxHfcxjnjxY_hlLP-ctXOYMSk4BFbySy7vD5xWivimHIfMHtr13ffgEoFLItUgoajxUe7tnkchPN_P5OZ_FOzYdpqW_UDdgWW0_VOsccR5yt1vh0MRyVxO2B2ua8k4NmbFgTmht6hxUlXDsXOsOSGDHm1WO5VNrRbUcGeTPpdBMx0xeyZ9FTMTBCIAMOZ6UEb_eAX3X1iVIFkP_MPtuJcp0q8t9Tk_UBs-dHVRjyYcCsnetXYNI_mEsdtyg63aLXuJE1pMLb8-eamWaFfklVo-w9N9F0XTbmbkgGfcWU4/https%3A%2F%2Fmedium.com%2F%40rusty_lightning%2Flightning-routing-rough-background-dbac930abbad>>\n>     >\u00a0 \u00a0 \u00a0[3]\n>     >\u00a0 \u00a0\n>     \u00a0https://www.tik.ee.ethz.ch/file/a20a865ce40d40c8f942cf206a7cba96/Scalable_Funding_Of_Blockchain_Micropayment_Networks%20(1).pdf\n>     <https://secure-web.cisco.com/1c8JC4qI_MTxxHa-DGbFUNMw7VCvn-g4WzxWywl1i76GVih6Yk55MJMteiwwVEYeSf-S8cU5PQph7ztH1w5wGyqdWj8CH0ZboAbqRSs6Pwk_N1TwpagW0kT9naYq-KR_Cd5n1FP8H-EhCg-fSuXXoqYQZe0yolQboLx1zFK_CGOrSUKxjPhtE-Bk7paKRi2NbVtN9LB61UUIgnUR0Vt_dR8WtRulNvRDX1XOs7z6x8EybbgKEN6hxjSwDI2tplvFZnExAn_qDKTAZ8GM2SzfpGMSSh15VDlXYjZNP1hxwAyx3k4I3tpR23X9jx_VJUh2hFUZC8gjFo3FcM9VLEhMOSKzvxS8GzmyN0PforQgtO6U0X3fBHbY-FpipsYXSfZK9-v1IPKtORDWxTPrJCN1PHg/https%3A%2F%2Fwww.tik.ee.ethz.ch%2Ffile%2Fa20a865ce40d40c8f942cf206a7cba96%2FScalable_Funding_Of_Blockchain_Micropayment_Networks%2520%281%29.pdf>\n>     >\u00a0 \u00a0\n>     \u00a0<https://secure-web.cisco.com/1XOlJdRo0gtzmPhNfVlEpMsrVBAI6BSjdDawPogEDIwYDdva2BSx4H8F9B3E6bkVIqA7ByFEF85qVjJ775leFwE54p5G6-wHH4Cio0p9sYLJ14-NHwcwvYQ--zdI8hdAyjGQbcLltVFAmorMaTlHq4FGI1CmxlwiUYgH1tjZn3UAHOu5xm5pLVi6KTb9WsJvuJsOBJhLfRLWGcAhVbjRXuV8b3x_G4ybOg1CQYC9ZVq3RJCPnNgQ3BN3a5ZuzW4veOE_dgi80FEy1x7a8spH-TV-cb_fey6ud-S25AWQ1PbctVS5zgQ4Ki4XYkR5igotNGGbWhACevBJfU1Hxqk90_g-DgQtS9_e_UX_FsY-yAjw/https%3A%2F%2Fwww.tik.ee.ethz.ch%2Ffile%2Fa20a865ce40d40c8f942cf206a7cba96%2FScalable_Funding_Of_Blockchain_Micropayment_Networks%2520%281%29.pdf\n>     <https://secure-web.cisco.com/1XOlJdRo0gtzmPhNfVlEpMsrVBAI6BSjdDawPogEDIwYDdva2BSx4H8F9B3E6bkVIqA7ByFEF85qVjJ775leFwE54p5G6-wHH4Cio0p9sYLJ14-NHwcwvYQ--zdI8hdAyjGQbcLltVFAmorMaTlHq4FGI1CmxlwiUYgH1tjZn3UAHOu5xm5pLVi6KTb9WsJvuJsOBJhLfRLWGcAhVbjRXuV8b3x_G4ybOg1CQYC9ZVq3RJCPnNgQ3BN3a5ZuzW4veOE_dgi80FEy1x7a8spH-TV-cb_fey6ud-S25AWQ1PbctVS5zgQ4Ki4XYkR5igotNGGbWhACevBJfU1Hxqk90_g-DgQtS9_e_UX_FsY-yAjw/https%3A%2F%2Fwww.tik.ee.ethz.ch%2Ffile%2Fa20a865ce40d40c8f942cf206a7cba96%2FScalable_Funding_Of_Blockchain_Micropayment_Networks%2520%281%29.pdf>>\n>     >\n>     >\u00a0 \u00a0 \u00a0We will eventually move away from the hash function based approach\n>     >\u00a0 \u00a0 \u00a0in favor of something that allows us to decorrelate hops in a route.\n>     >\u00a0 \u00a0 \u00a0We have indeed started writing down some of the ideas at least for\n>     >\u00a0 \u00a0 \u00a0Lightning in the project's wiki [4], but they're definitely not\n>     >\u00a0 \u00a0 \u00a0fleshed out.\n>     >\n>     >\u00a0 \u00a0 \u00a0[4]\u00a0https://github.com/lightningnetwork/lightning-rfc/wiki/Brainstorming\n>     <https://secure-web.cisco.com/1VcbQX_unqZTCQECFjDEGAiKvOG66QPSZlFe-mWT7utsCj88ZllcLwEhj6IDZ4Sa2xTt3w9awwz4kO0XcaEIBvF0pwUr0f-vqdNjHyEFYJjbAwFk0sszCLpq9OR8jL7RkFRButNBcRcFBWHG3PWf0NxWFldrO9SOY_DnhrktT7H7_1RjPUn-tBBJ_Ewy5K_J8bZyWgWqTclnXJ-EnqVx_2YRC-oXQLXP0uplqQb0grFs5H_FD7s9GKfyF0IkF59o_Q-RvIDuxSkxjcIsdwkMEYpl7avwm3xCTfiIe-l1pCPBsusQE8hlhADYbHHu-oLMoJeKbMK21GjoXe2xAFNwlE4EMFGrmJmOuyP373kNiUwNfPugYAnLlTeGHtVGNbROgxMnJRejdAVxRLMYmbUVzrw/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fwiki%2FBrainstorming>\n>     >\u00a0 \u00a0\n>     \u00a0<https://secure-web.cisco.com/1XqVZXht8sW8tdbLxwEMjoU-hxxV6OJwpKqc2OudZy26Le21yvOIBPwqizepwLi9TBeEV2BMDc-nCiKpj3eryi59jqvoZcBRrSQSVt9Qrq8pIxNSvhIMlG4cRd3lnj17JT9mDRRt0lS51C_9gpryV6qFqdiROdyJeTKfqUGmnvPo3isfeUbC_TOOfWLDV16jYA38ytCfTOryyDvJgJdYw7ArAUEMg10jNv8lV9aTARBOcOmgLjqJt0ktecsUpUCfIVAQlJEvtAAbWAUKwMoXg6MpIQEA4NE1ATntmwjLGl4IqQEqRAGxkGxWI8yQDL74yPPTIQmGTxs_JXE6YYMrhuD93GR1kyUJkOAH3Z_5nL1bsr3ifW31PJtUckQNnwY8e/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fwiki%2FBrainstorming\n>     <https://secure-web.cisco.com/1XqVZXht8sW8tdbLxwEMjoU-hxxV6OJwpKqc2OudZy26Le21yvOIBPwqizepwLi9TBeEV2BMDc-nCiKpj3eryi59jqvoZcBRrSQSVt9Qrq8pIxNSvhIMlG4cRd3lnj17JT9mDRRt0lS51C_9gpryV6qFqdiROdyJeTKfqUGmnvPo3isfeUbC_TOOfWLDV16jYA38ytCfTOryyDvJgJdYw7ArAUEMg10jNv8lV9aTARBOcOmgLjqJt0ktecsUpUCfIVAQlJEvtAAbWAUKwMoXg6MpIQEA4NE1ATntmwjLGl4IqQEqRAGxkGxWI8yQDL74yPPTIQmGTxs_JXE6YYMrhuD93GR1kyUJkOAH3Z_5nL1bsr3ifW31PJtUckQNnwY8e/https%3A%2F%2Fgithub.com%2Flightningnetwork%2Flightning-rfc%2Fwiki%2FBrainstorming>>\n>     >\n>     >\n>     >\u00a0 \u00a0 \u00a0On Fri, Nov 17, 2017 at 3:10 PM Benjamin Mord <ben at mord.io <mailto:ben at mord.io>\n>     >\u00a0 \u00a0 \u00a0<mailto:ben at mord.io <mailto:ben at mord.io>>> wrote:\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"I think this is exactly the right venue to discuss these\n>     kinds\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0of issue...\" - you are probably right! My bad.\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Christian, thank you for your knowledgable reply. The\n>     footnotes\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0did not come through on my end, I am especially interested in\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0[3]. Do you have a link? I am thrilled to hear of a\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Bitcoin-compatible revive alternative! :)\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Are we keeping an inventory somewhere of the cryptographic\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0primitives being used in lightning and the specific\n>     assumptions\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0being made about them (e.g. preimage resistance vs collision\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0resistance and such)? One project I have not yet found but\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0believe we need across the entire cryptocurrency\n>     community, is a\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0(wiki-style?) inventory of unproven mathematical assumptions\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0(e.g. hardness of discrete logarithm) and/or cryptographic\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0primitives, cataloged in terms of the cryptocurrency\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0technologies which require them. Such a resource could\n>     help the\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0community respond more quickly, comprehensively, and\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0transparently to the inevitable cryptanalytic surprises that\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0will pop up over time (especially from the quantum\n>     cryptanalytic\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0area, but even the classical cryptanalytic community as well).\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Related, I believe the ideal end state would be to only assume\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0existence of a preimage-resistant hash function, and to code\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0such that one function could be quickly swapped with\n>     another and\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0thus update entire system. I'm not sure if that is a realistic\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0goal, but here is my first attempt to move in that\n>     direction in\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0case it is of interest to lightning. It is hard to imagine it\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0would be a new idea, although I have not yet found the\n>     precedent:\n>     >\u00a0 \u00a0 \u00a0 \u00a0\n>     \u00a0http://ben.mord.io/p/delayed-chained-key-revelation-dckr.html\n>     <http://secure-web.cisco.com/1iHjjTtGT6OdOsOVAVj_MWbK7ZgkVPaS5cpYQ9uRNiujQk2TIf9vY4NAwhVQFwPLGsl0H9FaZYFlyOCo16Ivd9gIGVUo5XIrrwOuHEUKBSj3yFKfKKefRHtCQPZ2HEZi-1MO86cmNRtwnQYDm_i9Go6BJDpctCrNWnxv189sncNPgGLmZcKcl2830X-tmJy0zBPyglQyd2B24vG46VuOIobRt3iHz7oPLoWDn17Oj4U1GyDo6PhG-vkYn9j3pkSoU5QtEkJSpjzFEF1XJpIG_oxr1p3MEtIQZ1Cce7Rp4oe3qTkENaHR4K-8yQQOicT-wRruCad-xALJddFq__z75v4ufN86TW19Tg3epmhdQrD9R_Uuw04aLihzPbi5twLfUfZJ54MRptQ1e80d5OiXVLA/http%3A%2F%2Fben.mord.io%2Fp%2Fdelayed-chained-key-revelation-dckr.html>\n>     >\u00a0 \u00a0 \u00a0 \u00a0\n>     \u00a0<http://secure-web.cisco.com/1ewGQFfIxw1QZwneD3sDbhSSWP-YTmBwOYe529E7_zeYZZADnASbspvBAftPFXX6ZxJI2l2-8-xEqdpkmFg3fEIfkfRBYN8oZ8Z0HpeHh73MnT3Zi3M8GUs8SGMww38ZPnzsc7xlt7H5KFlLMcCsTWIgEtq4roZHDkYasanNeViP_UA3DIod7A281fNvWnQ1mnLs6d8WN_uFx1diU_xr-EoMab3wyANozirDj1gZ2_yPBn6S8tePYMkTkhIZlLz_BlvIfk9_KCOOiUcWxDTtCq9KdvoqEzStC04Z6q8xS5rtSnmK9GZZxv30yrgT8eWA4eOzce6AA3m0WEClNzbzANgi11GXBVde9pNiUIRcLDNw/http%3A%2F%2Fben.mord.io%2Fp%2Fdelayed-chained-key-revelation-dckr.html\n>     <http://secure-web.cisco.com/1ewGQFfIxw1QZwneD3sDbhSSWP-YTmBwOYe529E7_zeYZZADnASbspvBAftPFXX6ZxJI2l2-8-xEqdpkmFg3fEIfkfRBYN8oZ8Z0HpeHh73MnT3Zi3M8GUs8SGMww38ZPnzsc7xlt7H5KFlLMcCsTWIgEtq4roZHDkYasanNeViP_UA3DIod7A281fNvWnQ1mnLs6d8WN_uFx1diU_xr-EoMab3wyANozirDj1gZ2_yPBn6S8tePYMkTkhIZlLz_BlvIfk9_KCOOiUcWxDTtCq9KdvoqEzStC04Z6q8xS5rtSnmK9GZZxv30yrgT8eWA4eOzce6AA3m0WEClNzbzANgi11GXBVde9pNiUIRcLDNw/http%3A%2F%2Fben.mord.io%2Fp%2Fdelayed-chained-key-revelation-dckr.html>>\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Thanks,\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0Ben\n>     >\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0On Nov 17, 2017 8:04 AM, \"Christian Decker\"\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0<decker.christian at gmail.com\n>     <mailto:decker.christian at gmail.com>\n>     <mailto:decker.christian at gmail.com <mailto:decker.christian at gmail.com>>>\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0wrote:\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0On Thu, Nov 16, 2017 at 5:01 PM Benjamin Mord <ben at mord.io <mailto:ben at mord.io>\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0<mailto:ben at mord.io <mailto:ben at mord.io>>> wrote:\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Ivan,\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0That is mostly false, but with bits of truth sprinkled\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0in. Contact me at ben at mord.io <mailto:ben at mord.io>\n>     <mailto:ben at mord.io <mailto:ben at mord.io>> for\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0further discussion so we tread lightly on the lists'\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0email inboxes.\n>     >\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0I think this is exactly the right venue to discuss these\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0kinds of issue,\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0so please don't move the conversation somewhere else :-)\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Routing is still very much in flux, we have a minimally\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0viable routing\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0protocol in the spec [1]. It is minimal in the sense\n>     that we\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0just push\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0the entire network's topology to the edges, which can then\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0locally\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0compute routes. This is effectively a source-routed\n>     network,\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0which\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0matches the requirements of the onion routing protocol we\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0use for\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0privact as well. But this does not mean that this is\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0protocol is set in\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0stone. We are actively working on finding better solutions\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0to the\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0problem of finding routes across a vast network of\n>     millions\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if not\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0billions of nodes. Distance vector routing such as BGP\n>     uses\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0may be one\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0option like Ben suggested.\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0For now the network can easily scale to about 1 million\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0channels [2]\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0even on very limited devices, Upgrading to another\n>     protocol\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0at a later\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0point in time is trivial, since none of the routing\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0information is\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0consensus critical. We have all the extension points built\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0in to allow\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0future extensibility.\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0But briefly: scale-capable routing protocols are\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0possible as demonstrated by IP and thus by the\n>     internet\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0itself. As for centralizing flow through small\n>     number of\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0liquidity providers, yes that does seem economically\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0probable, at least unless / until off-chain channel\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0rebalancing mechanism (like the recently proposed\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"revive\" protocol) come about. Bitcoin script is not\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0currently revive-capable but Ethereum is, so either\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Bitcoin revive could be enabled via two-way pegged\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0sidechain protocol with Ethereum, or even better, by a\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0purpose-built (yet still not Turing-complete)\n>     extension\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0to Bitcoin script itself in the future.\n>     >\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0As a matter of fact, Conrad and I just published a similar\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0technique for\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0off-chain channel rebalancing and fund re-allocation based\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0solely on\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Bitcoin [3] (major props to Conrad for the excellent\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0writeup!). The\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0flexibility in Bitcoin exists.\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0As for the hubs everybody is assuming will form, I don't\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0think they're\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0as likely to form. Creating such a hub is extremely costly\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0since it'll\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0have to allocate sufficient funds to cover the maximum\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0imbalance of all\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0of its channels ahead of time. Then the fees must\n>     cover the\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0opportunity\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0cost of allocating all of those funds to channels\n>     instead of\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0investing\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0them somewhere else. On top of that the funds will not be\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0moved alot\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0since they serve only a small number of endpoints\n>     connected\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0through\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0those channels, this compounds the problem of having high\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0fees. The high\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0fees make the hub channels a really bad choice for your\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0payments, after\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0all you were looking for small fees for your payments,\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0right? It opens\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0up an opportunity for nodes to open bypasses that grab\n>     some\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0of the\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0traffic and associated fees from the expensive hub.\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0All of that being said, we should be careful about our\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0predictions on\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0how the topology will look, I added some counter\n>     arguments to a\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0hub-and-spoke network forming, but nobody can really\n>     be sure\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0about\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0what'll happen.\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0In either case the lightning network seems a key first\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0step, and even were off-chain payment rebalancing not\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0possible for some odd reason, the lightning network\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0seems extremely valuable and scaleable - regardless\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0because the centralization you speak is not one that\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0affects safety of the money supply itself, and these\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0centralized hubs would be more dispensable / swappable\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0versus the mining centralization risk that people more\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0often talk about in Bitcoin. Lightning network\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0centralization, even if it persisted somehow despite\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0revive and future concepts, would not be an\n>     existential\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0risk.\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Rebalancing is definitely possible, even without [3],\n>     you can\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0disincentivize the use of a channel until they have been\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0rebalanced. For\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0long term imbalance, opening another channel may be\n>     the best\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0option\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0As for transaction fees, the idea is only channel\n>     setup\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0/ tear down are required greatly reducing fees. Yes if\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0txin fees were millions of dollars then people\n>     could not\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0practically penalize fraud, but that is unlikely. Even\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0if txin fees made fraud claims marginally unprofitable\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0(yet practical) that would still be ok - the judicial\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0systems of most countries prove that people go beyond\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0self-interest when sufficiently ticked, a fact of\n>     human\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0psychology which in turn creates the incentives that\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0support honest business. (Also please be aware I'm\n>     not a\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0lightning code contributor, so that team might also be\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0doing more to address already than I thought to\n>     mention\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0above.)\n>     >\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0This is open to speculation as well. We hope to reduce the\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0load on the\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0on-chain network sufficiently to allow timely on-chain\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0settlements. By\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0aggregating payments off-chain we can also aggregate the\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0fees and then\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0use them to pay on-chain fees. So don't consider the\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0on-chain fees for\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0your channels as your sole loss, they are paid for by\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0payments you\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0forward. Ultimately this should encourage participants to\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0open channels\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0that support the network as a whole, not just\n>     themselves. We are\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0building automations that should take care of this,\n>     the user\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0won't have\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0to do anything to improve the network topology.\n>     >\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Cheers,\n>     >\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0Christian\n>     >\n>     >\n>     >\n>     >\u00a0 \u00a0 \u00a0_______________________________________________\n>     >\u00a0 \u00a0 \u00a0Lightning-dev mailing list\n>     >\u00a0 \u00a0 \u00a0Lightning-dev at lists.linuxfoundation.org\n>     <mailto:Lightning-dev at lists.linuxfoundation.org>\n>     >\u00a0 \u00a0 \u00a0<mailto:Lightning-dev at lists.linuxfoundation.org\n>     <mailto:Lightning-dev at lists.linuxfoundation.org>>\n>     >\u00a0 \u00a0\n>     \u00a0https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>     <https://secure-web.cisco.com/1Z80ybEZtSxMFvIVLI91NzX8bnd-dcAxFAcjmztkHu2A5AIto_cmfcpa6XKnhGzOC25Isf717_ZKWYqMl4P9PhE2nUCOq8pAwcM6y6d7M2RtxKz0m67F-yoYBLiCGtIV7x9jSuQOjZOHP3HVOUWY6znvyVPmV0pSLklLGd82v4EpKikFAOEsPGht5jZ0Iy3JkMe457t3HRMJHlFPyhb_bxDbNXlgZEZyWZxI_HGxBqwI8dS1Ul4LoM2HR-AdrJtFYQQmzD3UZe32pxFpQ4auJCX_2w8bVJL0q4k6mHAI5aU73F-Ln1ah_LspgtJpxOBs1YW3iF6fAbxiRmmevGoa7tg_m1Gh12ek82m8K_-VWKV5zSMd2NHmi54tAFaYh3DAmxuo7pk_1usffGiTSb84-Z4Fis4U22PvkbHyAUgC6XLs/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev>\n>     >\u00a0 \u00a0\n>     \u00a0<https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev\n>     <https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev>>\n>     >\n>     >\n>     >\n>     >\n>     > _______________________________________________\n>     > Lightning-dev mailing list\n>     > Lightning-dev at lists.linuxfoundation.org\n>     <mailto:Lightning-dev at lists.linuxfoundation.org>\n>     >\n>     https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev\n>     <https://secure-web.cisco.com/1rKvOL6YDFMOjqgsWHIPJzPSwJMPOfbibptuquR_1TsVdIQrLf1NxCVE-s5WE1ZYrdP24xdimGxHK9mO5lyt539Tkw2lzYa9rwS9--thSiY_hjklJDMsHrV19nNF8fOU35MvLMeISx2brsJSH0K4MNQpctvdWWImDsvS4rwweaXJRgtUfd1uSxbqCGdjJ7KTTOlWCdUehIfdcJtlBoiUGIy2yKJMqn7uLJT4tXQQWbGZAou9uWgwGJmHnUk4oW05-otW_6u-nrcT1jhnhPGcP6x6_k8EMv1PaCs5w0baDgHhZ09GvGpSFr9Wmk8cd69ob8sEcl6xXHuFHTt1GHMh6KfMOc11pAXgM6FsY6B35bjHVVOw0DiIz7n_a8w-RLxc-/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev>\n>     >\n>     _______________________________________________\n>     Lightning-dev mailing list\n>     Lightning-dev at lists.linuxfoundation.org\n>     <mailto:Lightning-dev at lists.linuxfoundation.org>\n>     https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>     <https://secure-web.cisco.com/1Z80ybEZtSxMFvIVLI91NzX8bnd-dcAxFAcjmztkHu2A5AIto_cmfcpa6XKnhGzOC25Isf717_ZKWYqMl4P9PhE2nUCOq8pAwcM6y6d7M2RtxKz0m67F-yoYBLiCGtIV7x9jSuQOjZOHP3HVOUWY6znvyVPmV0pSLklLGd82v4EpKikFAOEsPGht5jZ0Iy3JkMe457t3HRMJHlFPyhb_bxDbNXlgZEZyWZxI_HGxBqwI8dS1Ul4LoM2HR-AdrJtFYQQmzD3UZe32pxFpQ4auJCX_2w8bVJL0q4k6mHAI5aU73F-Ln1ah_LspgtJpxOBs1YW3iF6fAbxiRmmevGoa7tg_m1Gh12ek82m8K_-VWKV5zSMd2NHmi54tAFaYh3DAmxuo7pk_1usffGiTSb84-Z4Fis4U22PvkbHyAUgC6XLs/https%3A%2F%2Flists.linuxfoundation.org%2Fmailman%2Flistinfo%2Flightning-dev>\n> \n> \n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171122/18196616/attachment-0001.sig>"
            },
            {
                "author": "Christian Decker",
                "date": "2017-11-23T12:50:44",
                "message_text_only": "Thanks Pedro for the paper, I'll read through it as soon as possible and\nadd more feedback :-) I just have some minor points to add regarding\nyour last mail.\n\n> The onion-like packets used for *payments* in the current LN\n> implementations inevitably assume that the sender knows the complete\n> path from the sender to the intended receiver. The question/challenge\n> that we are solving in this work is: how does the sender gets to know\n> such path in the first place?\n\nThe current implementation requires the node to compute the entire\nroute, yes. However we have mechanisms in place for the two endpoints of a\nroute to collaboratively find such a route. This includes telling the\nrecipient ginving the sender hints as how best to reach the recipient,\ne.g., adding channel information in the invoice. In the long-term we\nalso plan to add landmarks.\n\nPersonally I'd like to separate the base routing layer and the onion\nrouting layer eventually. The base layer would provide end-to-end\nconnectivity between any two nodes and the onion layer would then simply\nchose some random nodes in the network and not be bound to the networks\ntopology. The same way IP and TOR are not mixed.\n\n> One approach is that each user in the LN locally stores the complete set\n> of opened channels either by looking at open channel transactions in the\n> blockchain or by a gossip protocol. However, this approach has trivial\n> privacy issues and it is not scalable for a growing number of users and\n> channels between them. Moreover, this approach is no longer possible if\n> open channel transactions can be modified such that they are\n> indistinguishable from other Bitcoin transactions.\n\nThe funding transactions are currently indistinguishable from any other\nP2SH transaction. We currently only rely on being able to reveal the\nscript behind the P2SH hash in order to prove that indeed the two\nendpoints have setup a channel. The gossip protocol does not require the\ninformation to be identifiable on-chain, only that we can verify some\ncommitment to what we are claiming.\n\nCheers,\nChristian\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171123/d163a160/attachment.html>"
            },
            {
                "author": "Pedro Moreno Sanchez",
                "date": "2017-11-25T17:13:25",
                "message_text_only": "Hello Christian,\n\nThanks for your prompt reply. Please, see my minor comments and\nquestions below.\n\nOn 11/23/17 7:50 AM, Christian Decker wrote:\n> Thanks Pedro for the paper, I'll read through it as soon as possible and\n> add more feedback :-) I just have some minor points to add regarding\n> your last mail.\n> \n>> The onion-like packets used for *payments* in the current LN\n>> implementations inevitably assume that the sender knows the complete\n>> path from the sender to the intended receiver. The question/challenge\n>> that we are solving in this work is: how does the sender gets to know\n>> such path in the first place?\n> \n> The current implementation requires the node to compute the entire\n> route, yes. However we have mechanisms in place for the two endpoints of a\n> route to collaboratively find such a route. This includes telling the\n> recipient ginving the sender hints as how best to reach the recipient,\n> e.g., adding channel information in the invoice. In the long-term we\n> also plan to add landmarks.\nWhen you say \"we have mechanisms in place\", you refer to the\ndescriptions available in\nhttps://github.com/lightningnetwork/lightning-rfc?\n\nInteresting to know that you have landmark-based routing in your plans.\nGiven the time, I would be obviously interested to talk to you more\nabout it and possibly collaborate on that if you find it suitable.\n\n> \n> Personally I'd like to separate the base routing layer and the onion\n> routing layer eventually. The base layer would provide end-to-end\n> connectivity between any two nodes and the onion layer would then simply\n> chose some random nodes in the network and not be bound to the networks\n> topology. The same way IP and TOR are not mixed.\n\nYes, I totally agree. I also think that this separation would help us to\nbetter understand what are the necessary and/or sufficient guarantees\nrequired in both layers for the LN to work.\n\n> \n>> One approach is that each user in the LN locally stores the complete set\n>> of opened channels either by looking at open channel transactions in the\n>> blockchain or by a gossip protocol. However, this approach has trivial\n>> privacy issues and it is not scalable for a growing number of users and\n>> channels between them. Moreover, this approach is no longer possible if\n>> open channel transactions can be modified such that they are\n>> indistinguishable from other Bitcoin transactions.\n> \n> The funding transactions are currently indistinguishable from any other\n> P2SH transaction. We currently only rely on being able to reveal the\n> script behind the P2SH hash in order to prove that indeed the two\n> endpoints have setup a channel. The gossip protocol does not require the\n> information to be identifiable on-chain, only that we can verify some\n> commitment to what we are claiming.\n\nCould you please point me to where this mechanism is described? I have\nbeen thinking about this, but the solution is not completely clear in my\nmind yet.\n> \n> Cheers,\n> Christian\n\nThanks again,\nPedro.\n\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 819 bytes\nDesc: OpenPGP digital signature\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171125/578defda/attachment.sig>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-11-25T19:09:15",
                "message_text_only": "On Sat, Nov 25, 2017 at 11:13 AM Pedro Moreno Sanchez <pmorenos at purdue.edu>\nwrote:\n\n> When you say \"we have mechanisms in place\", you refer to the\n> descriptions available in\n> https://github.com/lightningnetwork/lightning-rfc?\n>\n\nI think he's referring to the ability to add \"routing\" hints to the BOLT 11\npayment requests.\n\n>\n> > Personally I'd like to separate the base routing layer and the onion\n> > routing layer eventually. The base layer would provide end-to-end\n> > connectivity between any two nodes and the onion layer would then simply\n> > chose some random nodes in the network and not be bound to the networks\n> > topology. The same way IP and TOR are not mixed.\n>\n> Yes, I totally agree. I also think that this separation would help us to\n> better understand what are the necessary and/or sufficient guarantees\n> required in both layers for the LN to work.\n>\n>\nNot quite sure what y'all mean by this. If there doesn't exist a direct\npath,\nthen how can one use onion routing to complete the transfer?\n\n\n>\n> Could you please point me to where this mechanism is described? I have\n> been thinking about this, but the solution is not completely clear in my\n> mind yet.\n>\n>\nAt my talk at Scaling Bitcoin, I outlined two possible paths:\n\n  1.  Assuming a schnorr-like signature protocol eventually gets into\n      Bitcoin, nodes would use a cooperative signature in lieu of\nmulit-sig.\n  2. Or today, use a 2-party ECDSA protocol to generate a joint key, and\n      sign using that to update the channel.\n\n-- Laolu\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171125/891c0bb9/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2017-11-25T19:33:07",
                "message_text_only": "Olaoluwa Osuntokun <laolu32 at gmail.com> writes:\n> On Sat, Nov 25, 2017 at 11:13 AM Pedro Moreno Sanchez <pmorenos at purdue.edu>\n> wrote:\n>\n>> When you say \"we have mechanisms in place\", you refer to the\n>> descriptions available in\n>> https://github.com/lightningnetwork/lightning-rfc?\n>>\n>\n> I think he's referring to the ability to add \"routing\" hints to the BOLT 11\n> payment requests.\n\nExactly, that's the first instance, but there may be others in the\nfuture. Collaboratively constructing the route is necessary in cases in\nwhich parts of the network are not public (private channels), and\nhelpful in the case of landmark based routing algorithms.\n\n>> > Personally I'd like to separate the base routing layer and the onion\n>> > routing layer eventually. The base layer would provide end-to-end\n>> > connectivity between any two nodes and the onion layer would then simply\n>> > chose some random nodes in the network and not be bound to the networks\n>> > topology. The same way IP and TOR are not mixed.\n>>\n>> Yes, I totally agree. I also think that this separation would help us to\n>> better understand what are the necessary and/or sufficient guarantees\n>> required in both layers for the LN to work.\n>>\n>>\n> Not quite sure what y'all mean by this. If there doesn't exist a direct\n> path,\n> then how can one use onion routing to complete the transfer?\n\nIt's a separation of concerns: the base routing layer does not include\nany privacy whatsoever, and takes care of routing a payment from any\npoint to any other point in the network (think IP). Once we have\nthat base routing layer, we can then simply pick a number of nodes in\nthe network that are used for the onion protocol. Since we have the\nguarantee from the base layer that we can reach any node in the network,\nwe can actually select random nodes. This is similar to how TOR makes\nuse of the underlying IP protocol in order not to be constricted to\nphysically connected machines, but circuits are built by randomly\nselecting nodes in the public network.\n\nConflating base layer and OR is what gets us the routing problem in the\nfirst place. If I could be reasonably sure that the network takes care\nof connecting my onion hops somehow I wouldn't need to know about the\nentire network, just a few nodes.\n\nI should also point out that the current system was chosen in order to\nhave privacy by default, and not just have it an opt-in option, which\npeople might disable to \"optimize\".\n\n>> Could you please point me to where this mechanism is described? I have\n>> been thinking about this, but the solution is not completely clear in my\n>> mind yet.\n>>\n>>\n> At my talk at Scaling Bitcoin, I outlined two possible paths:\n>\n>   1.  Assuming a schnorr-like signature protocol eventually gets into\n>       Bitcoin, nodes would use a cooperative signature in lieu of\n> mulit-sig.\n>   2. Or today, use a 2-party ECDSA protocol to generate a joint key, and\n>       sign using that to update the channel.\n\nBOLT03 [1] specifies the exact P2WSH committed script. The channel\nannouncement specifies which public keys were used in order to establish\nthe channel. So a verifying node can look up the transaction, specified\nby the channel ID, and verify that it really creates a channel between\nthe two parties, without the funding transaction itself being\nidentifiable as such. With a cooperative close all the network will ever\nsee is a 2-of-2 multisig, wrapped in a P2WSH, being spent. \n\n[1] https://github.com/lightningnetwork/lightning-rfc/blob/master/03-transactions.md#funding-transaction-output"
            }
        ],
        "thread_summary": {
            "title": "General question on routing difficulties",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Saravanan Vijayakumaran",
                "Giovanni Di Stasi",
                "Pedro Moreno Sanchez",
                "Benjamin Mord",
                "Rusty Russell",
                "Olaoluwa Osuntokun",
                "Ivan Raszl",
                "Christian Decker"
            ],
            "messages_count": 19,
            "total_messages_chars_count": 211524
        }
    },
    {
        "title": "[Lightning-dev] Bi-directional or uni-directional?",
        "thread_messages": [
            {
                "author": "Alan Carbery",
                "date": "2017-11-20T17:54:02",
                "message_text_only": "Hi,\n\nAll the tutorials that I've read about Lightning describe bi-directional\nchannels.  However, reading through the draft RFC I'm wondering if it's\nuni-directional only.  Can anyone clarify if this is the case and if so then\nis there a reason for not doing bi-directional channels in the first\nrelease?\n\nCheers,\n\nAlan\n\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171120/03aba16b/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-11-21T03:05:11",
                "message_text_only": "Alan Carbery via Lightning-dev <lightning-dev at lists.linuxfoundation.org>\nwrites:\n> Hi,\n>\n> All the tutorials that I've read about Lightning describe bi-directional\n> channels.  However, reading through the draft RFC I'm wondering if it's\n> uni-directional only.  Can anyone clarify if this is the case and if so then\n> is there a reason for not doing bi-directional channels in the first\n> release?\n\nNo, they're bidirectional!  It's just that each side sends a batch of\nupdates followed by a commitment, then the other side replies with an\nack.  Both sides can do that independently and it all works out.\n\nHope that helps!\nRusty."
            },
            {
                "author": "Alan Carbery",
                "date": "2017-11-21T09:07:05",
                "message_text_only": "Thanks for the response Rusty. \n\nI think what's confusing me is that the tutorials all show an example where\nAlice and Bob each put 5BTC into the funding transaction.  However, in the\nspec open_channel has the funding_satoshis attribute for this purpose while\naccept_channel does not.  Does this mean that each channel is funded by one\nparty only but they can make payments in both directions (assuming that some\ninitial payments are made by the party funding the channel)?  Any idea about\nthe rationale for one-sided channel funding?\n\nRegards,\nAlan\n\n-----Original Message-----\nFrom: Rusty Russell [mailto:rusty at rustcorp.com.au] \nSent: 21 November 2017 03:05\nTo: Alan Carbery <alancarb at googlemail.com>;\nlightning-dev at lists.linuxfoundation.org\nSubject: Re: [Lightning-dev] Bi-directional or uni-directional?\n\nAlan Carbery via Lightning-dev <lightning-dev at lists.linuxfoundation.org>\nwrites:\n> Hi,\n>\n> All the tutorials that I've read about Lightning describe \n> bi-directional channels.  However, reading through the draft RFC I'm \n> wondering if it's uni-directional only.  Can anyone clarify if this is \n> the case and if so then is there a reason for not doing bi-directional \n> channels in the first release?\n\nNo, they're bidirectional!  It's just that each side sends a batch of\nupdates followed by a commitment, then the other side replies with an ack.\nBoth sides can do that independently and it all works out.\n\nHope that helps!\nRusty."
            },
            {
                "author": "Pierre",
                "date": "2017-11-21T09:44:50",
                "message_text_only": "Hi,\n\n> Does this mean that each channel is funded by one\nparty only but they can make payments in both directions (assuming that some\ninitial payments are made by the party funding the channel)?\n\nYes. Note that the field `push_msat` allows that initial payment to be\nmade as part of the channel opening.\n\n> Any idea about the rationale for one-sided channel funding?\n\nIt is just simpler for v1.0, but there already is a PR [1] for dual\nfunding in the works.\n\nCheers\n\nPierre\n\n[1] https://github.com/lightningnetwork/lightning-rfc/pull/184"
            }
        ],
        "thread_summary": {
            "title": "Bi-directional or uni-directional?",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Alan Carbery",
                "Pierre"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3126
        }
    },
    {
        "title": "[Lightning-dev] BOLT3: Commitment Transaction Outputs is weak to malleability",
        "thread_messages": [
            {
                "author": "Nicolas Dorier",
                "date": "2017-11-29T07:11:33",
                "message_text_only": "I noticed the Commitment Transaction Output script is weak to malleability,\nthis can be used to delay confirmation of the revocation.\nLuckily, fixing the situation does not require lots of development.\n\n```\nOP_IF\n    # Penalty transaction\n    <revocationkey>\nOP_ELSE\n    `to_self_delay`\n    OP_CSV\n    OP_DROP\n    <local_delayedkey>\nOP_ENDIF\nOP_CHECKSIG\n```\n\nAn attacker can delay the Penalty Transaction by malleating it. Which can\nlead to very bad outcome as Lightning dependant on time locks.\n\nThe penalty transaction would have.\n\n```\n<revocation_sig> 1\n```\n\nProblem is that Eve could malleate OP_1 into a positive, huge number. This\nwould have for effect to fill the mempool of nodes/miners with the\nmalleated version which will have an higher fee rate, delaying the\nconfirmation of the penalty transaction.\n\nNow, there is a policy rule called SCRIPT_VERIFY_MINIMALIF by jl2012 which\nwas merged into v0.15.1. (\nhttps://github.com/bitcoin/bitcoin/commit/c72c5b1e3bd42e84465677e94aa83316ff3d9a14\n)\n\nI guess that by the time LN is ready, 0.15.1 will be spread enough among\nminers, but still I think a 2 bytes overhead is well worth the fix.\n\n```\n1 OP_EQUAL OP_IF\n    # Penalty transaction\n    <revocationkey>\nOP_ELSE\n    `to_self_delay`\n    OP_CSV\n    OP_DROP\n    <local_delayedkey>\nOP_ENDIF\nOP_CHECKSIG\n```\n\nNicolas,\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171129/50ea31fc/attachment.html>"
            },
            {
                "author": "Nicolas Dorier",
                "date": "2017-11-29T07:40:13",
                "message_text_only": "Actually this was merged as policy rules in 0.14, not 0.15.1.\nNot as bad as I thought, but still a bit uneasy about someone malleating my\ntransaction.\n\nAnother way to fix the situation which would not require the BOLT to change\nis to enable RBF of the Penalty transaction so Eve transaction would be\nreplaced by the initial one.\n\nNicolas,\n\nOn Wed, Nov 29, 2017 at 4:11 PM, Nicolas Dorier <nicolas.dorier at gmail.com>\nwrote:\n\n> I noticed the Commitment Transaction Output script is weak to\n> malleability, this can be used to delay confirmation of the revocation.\n> Luckily, fixing the situation does not require lots of development.\n>\n> ```\n> OP_IF\n>     # Penalty transaction\n>     <revocationkey>\n> OP_ELSE\n>     `to_self_delay`\n>     OP_CSV\n>     OP_DROP\n>     <local_delayedkey>\n> OP_ENDIF\n> OP_CHECKSIG\n> ```\n>\n> An attacker can delay the Penalty Transaction by malleating it. Which can\n> lead to very bad outcome as Lightning dependant on time locks.\n>\n> The penalty transaction would have.\n>\n> ```\n> <revocation_sig> 1\n> ```\n>\n> Problem is that Eve could malleate OP_1 into a positive, huge number. This\n> would have for effect to fill the mempool of nodes/miners with the\n> malleated version which will have an higher fee rate, delaying the\n> confirmation of the penalty transaction.\n>\n> Now, there is a policy rule called SCRIPT_VERIFY_MINIMALIF by jl2012 which\n> was merged into v0.15.1. (https://github.com/bitcoin/bi\n> tcoin/commit/c72c5b1e3bd42e84465677e94aa83316ff3d9a14)\n>\n> I guess that by the time LN is ready, 0.15.1 will be spread enough among\n> miners, but still I think a 2 bytes overhead is well worth the fix.\n>\n> ```\n> 1 OP_EQUAL OP_IF\n>     # Penalty transaction\n>     <revocationkey>\n> OP_ELSE\n>     `to_self_delay`\n>     OP_CSV\n>     OP_DROP\n>     <local_delayedkey>\n> OP_ENDIF\n> OP_CHECKSIG\n> ```\n>\n> Nicolas,\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171129/b09e1ce1/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2017-11-29T09:22:22",
                "message_text_only": "FWIW, going by the bitnodes tracker [1], most upgraded nodes are currently\nrunning a bitcoind version >= 0.14. With segwit widely deployed, I'd safe\nsay it's a safe bet to assume that most miners are already running with\nthe standard malleability reducing policy that shipped in that version.\n\nHowever, as you point out there's still the possibility that the Eve's\nfirst element of Eve's witness stack would pushes the fee rate of Alice's\njustice transaction to an \"insufficient\" range. If the justice transaction\nis delayed excessively, then there's a chance that the commitment output\nof the peer breaching the transaction matures before Alice's justice\ntransaction is confirmed. In this case, Eve may successfully breach the\ncontract.\n\nIn lnd, we have plans to implement a scorched earth policy when responding\nto on-chain contract breach event. With this policy, once our justice\ntransaction punishing the violator of the contract has been broadcast, for\neach block it doesn't confirm in, we'll gradually bump of the fee on the\ntransaction (with RBF). The additional fee would be drawn from from the\n*violator's* settled balance in that state. With each iteration (block, no\nconfirmation, fee bump) we gradually bleed away the funds of the violator,\nsupplementing the fee already present on that commitment state. Assuming\nthat rational miners accept the higher fee transaction (and the violator\nisn't colluding with miners), then our justice transaction will make it\ninto the block before the transaction breaching the contract. In an\nattempt to counter act this, the violator may try to use CPFP to anchor\nthe transaction into the chain with a more attractive fee package.\nHowever, in order to beat us in, they must spend a total amount of fees\nthat is greater than the current cumulative fee rate on our justice\ntransaction. If they do so, they'll either end up net negative, or fail to\nprofit (as they'll also bleed away all their funds).\n\n\nThe vindication strategy described requires the justice transaction to\nsignal RBF. This serves as another reason to signal RBF in justice\ntransactions. I recommend that all implementations adopt the scorched\nearth vindication strategy when handling breached contracts. It addresses\nDorier's malleability concern, and also further stack the incentives\nagainst attempting a contract breach.\n\n\n[1]: https://bitnodes.earn.com/nodes/\n\n-- Laolu\n\nOn Tue, Nov 28, 2017 at 11:40 PM Nicolas Dorier <nicolas.dorier at gmail.com>\nwrote:\n\n> Actually this was merged as policy rules in 0.14, not 0.15.1.\n> Not as bad as I thought, but still a bit uneasy about someone malleating\n> my transaction.\n>\n> Another way to fix the situation which would not require the BOLT to\n> change is to enable RBF of the Penalty transaction so Eve transaction would\n> be replaced by the initial one.\n>\n> Nicolas,\n>\n> On Wed, Nov 29, 2017 at 4:11 PM, Nicolas Dorier <nicolas.dorier at gmail.com>\n> wrote:\n>\n>> I noticed the Commitment Transaction Output script is weak to\n>> malleability, this can be used to delay confirmation of the revocation.\n>> Luckily, fixing the situation does not require lots of development.\n>>\n>> ```\n>> OP_IF\n>>     # Penalty transaction\n>>     <revocationkey>\n>> OP_ELSE\n>>     `to_self_delay`\n>>     OP_CSV\n>>     OP_DROP\n>>     <local_delayedkey>\n>> OP_ENDIF\n>> OP_CHECKSIG\n>> ```\n>>\n>> An attacker can delay the Penalty Transaction by malleating it. Which can\n>> lead to very bad outcome as Lightning dependant on time locks.\n>>\n>> The penalty transaction would have.\n>>\n>> ```\n>> <revocation_sig> 1\n>> ```\n>>\n>> Problem is that Eve could malleate OP_1 into a positive, huge number.\n>> This would have for effect to fill the mempool of nodes/miners with the\n>> malleated version which will have an higher fee rate, delaying the\n>> confirmation of the penalty transaction.\n>>\n>> Now, there is a policy rule called SCRIPT_VERIFY_MINIMALIF by jl2012\n>> which was merged into v0.15.1. (\n>> https://github.com/bitcoin/bitcoin/commit/c72c5b1e3bd42e84465677e94aa83316ff3d9a14\n>> )\n>>\n>> I guess that by the time LN is ready, 0.15.1 will be spread enough among\n>> miners, but still I think a 2 bytes overhead is well worth the fix.\n>>\n>> ```\n>> 1 OP_EQUAL OP_IF\n>>     # Penalty transaction\n>>     <revocationkey>\n>> OP_ELSE\n>>     `to_self_delay`\n>>     OP_CSV\n>>     OP_DROP\n>>     <local_delayedkey>\n>> OP_ENDIF\n>> OP_CHECKSIG\n>> ```\n>>\n>> Nicolas,\n>>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20171129/ab719344/attachment-0001.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2017-11-30T01:10:31",
                "message_text_only": "Nicolas Dorier <nicolas.dorier at gmail.com> writes:\n> I noticed the Commitment Transaction Output script is weak to malleability,\n> this can be used to delay confirmation of the revocation.\n> Luckily, fixing the situation does not require lots of development.\n\nOh, wow!  FWIW I'm a bit mindblown by your level of adversarial\nthinking.\n\nI've filed bug https://github.com/lightningnetwork/lightning-rfc/issues/295\n\nWe use this pattern in 3 places: elsewhere we use 0-or-valid-sig which\ndoesn't have this issue.\n\n> ```\n> OP_IF\n>     # Penalty transaction\n>     <revocationkey>\n> OP_ELSE\n>     `to_self_delay`\n>     OP_CSV\n>     OP_DROP\n>     <local_delayedkey>\n> OP_ENDIF\n> OP_CHECKSIG\n> ```\n>\n> An attacker can delay the Penalty Transaction by malleating it. Which can\n> lead to very bad outcome as Lightning dependant on time locks.\n>\n> The penalty transaction would have.\n>\n> ```\n> <revocation_sig> 1\n> ```\n>\n> Problem is that Eve could malleate OP_1 into a positive, huge number. This\n> would have for effect to fill the mempool of nodes/miners with the\n> malleated version which will have an higher fee rate, delaying the\n> confirmation of the penalty transaction.\n\nYou mean lower fee rate, right?\n\nThey could replace 1 byte with 80 bytes, AFAICT.  That would increase\nweight by 79 Sipa[1], which worst-case is almost 15% feerate drop.\n\n> Now, there is a policy rule called SCRIPT_VERIFY_MINIMALIF by jl2012 which\n> was merged into v0.15.1. (\n> https://github.com/bitcoin/bitcoin/commit/c72c5b1e3bd42e84465677e94aa83316ff3d9a14\n> )\n>\n> I guess that by the time LN is ready, 0.15.1 will be spread enough among\n> miners, but still I think a 2 bytes overhead is well worth the fix.\n\nWe should probably strongly suggest RBF in the spec; you can easily\nunderguess fees by 15% anyway and should deal with it appropriately.\n\nSince spec is frozen and issue is probably moot, I'm tempted to leave it\nas is.\n\nThanks!\nRusty."
            }
        ],
        "thread_summary": {
            "title": "BOLT3: Commitment Transaction Outputs is weak to malleability",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Olaoluwa Osuntokun",
                "Nicolas Dorier"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 10223
        }
    }
]