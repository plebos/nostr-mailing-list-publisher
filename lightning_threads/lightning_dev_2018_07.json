[
    {
        "title": "[Lightning-dev] Rebalancing argument",
        "thread_messages": [
            {
                "author": "Dmytro Piatkivskyi",
                "date": "2018-07-01T10:14:50",
                "message_text_only": "Hi everyone,\n\nI have been working academically on the Lightning network for a while now. I didn't not participate in the list to form my own vision of what it should be. So please, bear with me if I'll be saying nonsense sometimes.\n\nThere has been a lot of discussion on sending cycle transactions to oneself to 're-balance' the network. On LN mailing list<https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html> [1] or numerous places elsewhere. There has been even a paper suggesting a smart mechanism to do the re-balancing (see Revive or Liquidity network [2]). My question is what do we actually get from it? [3] states that the distribution of funds in channels does not really affect the network liquidity. I can see cheaper fees or shorter paths if the network is kept balanced. But don't you think that a smart fee strategy will do the job?\n\nTo save your time, [4] explains the gist from [3].\n\n[1] https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html\n[2] https://www.reddit.com/r/ethereum/comments/7bse33/were_very_happy_to_announce_the_liquiditynetwork/\n[3] https://arxiv.org/abs/1007.0515\n[4] https://medium.com/@dimapiatkivskyi/why-would-you-re-balance-a-payment-network-796756ad4f31\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180701/a6e53371/attachment.html>"
            },
            {
                "author": "Ren\u00e9 Pickhardt",
                "date": "2018-07-01T10:59:32",
                "message_text_only": "Hey Dmytro,\n\nthank your for your solid input to the discussion. I think we need to\nconsider that the setting in the lightning network is not exactly\ncomparable to the one described in the 2010 paper.\n\n1st: the paper states in section 5.2: \"It appears that a mathematical\nanalysis of a transaction routing model where intermediate nodes charged a\nrouting fee would require an entirely new approach since it would\ninvalidate the cycle-reachability relation that forms the basis of our\nresults.\"\nSince we have routing fees in the lightning network to my understanding the\ntheorem and lemma you quoted in your medium post won't hold.\n\n2nd: Even if we neglect the routing fees and assume the theorem still holds\ntrue we have two conditions that make the problem way more dynamic:\n A) In the lightning network we do not know the weights of the directed\nedges. (only the sum of two opposing edges) So while theoretically the flow\nin the network will only depend on the liquidity of the nodes I guess in\npractice well balanced channels will increase the probability to actually\nfind a working route.\nB) I believe the HTLCs create a situation where funds are being locked up\nwhile routing takes place and thus have an impact to the entire flow of the\nnetwork. While Alice searches for a route for her payment a proper route\ncould be blocked do to the fact that Bob is using it currently. Since the\nfunds of Bob have not arrived Alice might also not be able to find a\ndifferent route.\n\nHowever those scientific results are a strong call for Atomic Multipath\nPayments. I personally think they are also a strong call for splicing since\nthis allows to easilly increase the flow of the network by updating a\nchannel (athough you might argue that following the paper this could be\nachieved by just creating a new channel)\n\nbest Rene\n\nOn Sun, Jul 1, 2018 at 12:21 PM Dmytro Piatkivskyi <\ndmytro.piatkivskyi at ntnu.no> wrote:\n\n> Hi everyone,\n>\n> I have been working academically on the Lightning network for a while now.\n> I didn\u2019t not participate in the list to form my own vision of what it\n> should be. So please, bear with me if I\u2019ll be saying nonsense sometimes.\n>\n> There has been a lot of discussion on sending cycle transactions to\n> oneself to \u2018re-balance\u2019 the network. On LN mailing list\n> <https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html> [1] or\n> numerous places elsewhere. There has been even a paper suggesting a smart\n> mechanism to do the re-balancing (see Revive or Liquidity network [2]). My\n> question is what do we actually get from it? [3] states that the\n> distribution of funds in channels does not really affect the network\n> liquidity. I can see cheaper fees or shorter paths if the network is kept\n> balanced. But don\u2019t you think that a smart fee strategy will do the job?\n>\n> To save your time, [4] explains the gist from [3].\n>\n> [1]\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html\n> [2]\n> https://www.reddit.com/r/ethereum/comments/7bse33/were_very_happy_to_announce_the_liquiditynetwork/\n> [3] https://arxiv.org/abs/1007.0515\n> [4]\n> https://medium.com/@dimapiatkivskyi/why-would-you-re-balance-a-payment-network-796756ad4f31\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n\n\n-- \nwww.rene-pickhardt.de\n<http://www.beijing-china-blog.com/>\n\nSkype: rene.pickhardt\n\nmobile: +49 (0)176 5762 3618\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180701/288b5422/attachment.html>"
            },
            {
                "author": "Dmytro Piatkivskyi",
                "date": "2018-07-01T13:38:41",
                "message_text_only": "Hi Rene,\n\nThanks for your answer!\n\n1. The Lightning network operates under different assumptions, that is true. However, the difference is minor in terms of the issue posed. The premise for the quoted statement is that taking fees changes the nodes\u2019 balances, therefore selected paths affect the liquidity. In the Lightning network fees are very small, so the change in liquidity may be negligible. Moreover, intermediate nodes gain in fees, which only increases the liquidity.\n\n2.A. It is too early to speculate where the privacy requirements will settle down. Flare suggests a mechanism of sharing the infrastructure view between nodes, possibly sharing weights. As the network grows routing will become more difficult, however we don\u2019t know yet to which extent. It may organise itself in \u2018domains\u2019, so when we send a payment we know to which domain we are sending to, knowing the path to it beforehand. The point is we don\u2019t know yet, so we can\u2019t speculate.\n\n2.B. That is surely an interesting aspect. HTLC locks temporarily downgrade the network liquidity. Now the question is how it changes the order of transactions and how that order change affects the transaction feasibility. Does it render some transactions infeasible or just defers them? It definitely needs a closer look.\n\nYet the question remains \u2014 are there obvious advantages of cycle transactions over a smart fee/routing system? In any sense. Path lengths, for example. To answer that I am going to run a simulation, but also would appreciate your opinions.\n\nBest,\nDmytro\n\nFrom: Ren\u00e9 Pickhardt <r.pickhardt at googlemail.com<mailto:r.pickhardt at googlemail.com>>\nDate: Sunday, 1 July 2018 at 13:59\nTo: Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no<mailto:dmytro.piatkivskyi at ntnu.no>>\nCc: lightning-dev <lightning-dev at lists.linuxfoundation.org<mailto:lightning-dev at lists.linuxfoundation.org>>\nSubject: Re: [Lightning-dev] Rebalancing argument\n\nHey Dmytro,\n\nthank your for your solid input to the discussion. I think we need to consider that the setting in the lightning network is not exactly comparable to the one described in the 2010 paper.\n\n1st: the paper states in section 5.2: \"It appears that a mathematical analysis of a transaction routing model where intermediate nodes charged a routing fee would require an entirely new approach since it would invalidate the cycle-reachability relation that forms the basis of our results.\"\nSince we have routing fees in the lightning network to my understanding the theorem and lemma you quoted in your medium post won't hold.\n\n2nd: Even if we neglect the routing fees and assume the theorem still holds true we have two conditions that make the problem way more dynamic:\n A) In the lightning network we do not know the weights of the directed edges. (only the sum of two opposing edges) So while theoretically the flow in the network will only depend on the liquidity of the nodes I guess in practice well balanced channels will increase the probability to actually find a working route.\nB) I believe the HTLCs create a situation where funds are being locked up while routing takes place and thus have an impact to the entire flow of the network. While Alice searches for a route for her payment a proper route could be blocked do to the fact that Bob is using it currently. Since the funds of Bob have not arrived Alice might also not be able to find a different route.\n\nHowever those scientific results are a strong call for Atomic Multipath Payments. I personally think they are also a strong call for splicing since this allows to easilly increase the flow of the network by updating a channel (athough you might argue that following the paper this could be achieved by just creating a new channel)\n\nbest Rene\n\nOn Sun, Jul 1, 2018 at 12:21 PM Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no<mailto:dmytro.piatkivskyi at ntnu.no>> wrote:\nHi everyone,\n\nI have been working academically on the Lightning network for a while now. I didn\u2019t not participate in the list to form my own vision of what it should be. So please, bear with me if I\u2019ll be saying nonsense sometimes.\n\nThere has been a lot of discussion on sending cycle transactions to oneself to \u2018re-balance\u2019 the network. On LN mailing list<https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html> [1] or numerous places elsewhere. There has been even a paper suggesting a smart mechanism to do the re-balancing (see Revive or Liquidity network [2]). My question is what do we actually get from it? [3] states that the distribution of funds in channels does not really affect the network liquidity. I can see cheaper fees or shorter paths if the network is kept balanced. But don\u2019t you think that a smart fee strategy will do the job?\n\nTo save your time, [4] explains the gist from [3].\n\n[1] https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html\n[2] https://www.reddit.com/r/ethereum/comments/7bse33/were_very_happy_to_announce_the_liquiditynetwork/\n[3] https://arxiv.org/abs/1007.0515\n[4] https://medium.com/@dimapiatkivskyi/why-would-you-re-balance-a-payment-network-796756ad4f31\n_______________________________________________\nLightning-dev mailing list\nLightning-dev at lists.linuxfoundation.org<mailto:Lightning-dev at lists.linuxfoundation.org>\nhttps://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n\n\n--\nwww.rene-pickhardt.de<http://www.rene-pickhardt.de/>\n<http://www.beijing-china-blog.com/>\n\nSkype: rene.pickhardt\n\nmobile: +49 (0)176 5762 3618\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180701/aeb60ce9/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-07-03T19:33:22",
                "message_text_only": "Dmytro wrote:\n> Yet the question remains \u2014 are there obvious advantages of cycle\n> transactions over a smart fee/routing system?\n\nThat's a good question, it may be the case that by modifying the fee\nstructure to punish flows that unbalance channels further, then this can\nsimplify the problem as the heuristics can target solely the fee rate. The\nearliest suggestion of this I can recall was from Tadge way back in like\n2015 or so. The goal here is for a node to ideally maintain relatively\nbalanced channels, but then charge a payment an amount that scales super\nlinearly when flows consume most of their available balance.\n\nThe current fee schedule is essentially:\n\n  base_fee + amt*rate\n\nclighting and lnd (borrowed from c-lightning) currently use a \"risk factor\"\nto factor in the impact of the time lock on the \"weight\" of an edge when\npath finding. With this, the fee schedule looks like:\n\n  (base_fee + amt*rate) + (cltv_delta * risk_factor / 1,000,0000)\n\nIn the future, we may want to allow nodes to also signal how they wish the\nfee to scale with the absolute CLTV of the HTLC extend to this. This would\nallow them to more naturally factor in their conception of the time value of\ntheir BTC.\n\nFinally, if we factor in an \"balance disruption\" factor, the fee schedule\nmay look something like this:\n\n  (base_fee + amt*rate) + (cltv_delta * risk_factor / 1,000,0000) +\n  gamma*f(capacity, amt)\n\nHere f is a function whose output is proportional to the distance the\npayment flow (assuming full capacity at that instance) puts the channel away\nfrom being fully balanced, and gamma is a coefficient that allows nodes to\nexpress the degree of penalty for unbalancing a channel. f itself is either\nagreed upon by the network completely, or resembles a certain polynomial,\nallowing nodes to select coefficients as they wish.\n\nWe may want to consider moving to something like this for BOLT 1.x+ as it\nallows nodes to quantify their apprehension to time locks and also\nchannel balance equilibrium affinity.\n\nAlternatively, if we move to something like HORNET, then during the set up\nphase, nodes can ask for an initial \"quote\" for a set of payment ranges,\nthen just use that quote for all payments sent. This allows nodes to keep\ntheir fee schedules private (for w/e reason) and also change them at a whim\nif they wish.\n\n-- Laolu\n\n\nOn Sun, Jul 1, 2018 at 8:39 AM Dmytro Piatkivskyi <\ndmytro.piatkivskyi at ntnu.no> wrote:\n\n> Hi Rene,\n>\n> Thanks for your answer!\n>\n> 1. The Lightning network operates under different assumptions, that is\n> true. However, the difference is minor in terms of the issue posed. The\n> premise for the quoted statement is that taking fees changes the nodes\u2019\n> balances, therefore selected paths affect the liquidity. In the Lightning\n> network fees are very small, so the change in liquidity may be negligible.\n> Moreover, intermediate nodes gain in fees, which only increases the\n> liquidity.\n>\n> 2.A. It is too early to speculate where the privacy requirements will\n> settle down. Flare suggests a mechanism of sharing the infrastructure view\n> between nodes, possibly sharing weights. As the network grows routing will\n> become more difficult, however we don\u2019t know yet to which extent. It may\n> organise itself in \u2018domains\u2019, so when we send a payment we know to which\n> domain we are sending to, knowing the path to it beforehand. The point is\n> we don\u2019t know yet, so we can\u2019t speculate.\n>\n> 2.B. That is surely an interesting aspect. HTLC locks\n> temporarily downgrade the network liquidity. Now the question is how it\n> changes the order of transactions and how that order change affects the\n> transaction feasibility. Does it render some transactions infeasible or\n> just defers them? It definitely needs a closer look.\n>\n> Yet the question remains \u2014 are there obvious advantages of cycle\n> transactions over a smart fee/routing system? In any sense. Path lengths,\n> for example. To answer that I am going to run a simulation, but also would\n> appreciate your opinions.\n>\n> Best,\n> Dmytro\n>\n> From: Ren\u00e9 Pickhardt <r.pickhardt at googlemail.com>\n> Date: Sunday, 1 July 2018 at 13:59\n> To: Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no>\n> Cc: lightning-dev <lightning-dev at lists.linuxfoundation.org>\n> Subject: Re: [Lightning-dev] Rebalancing argument\n>\n> Hey Dmytro,\n>\n> thank your for your solid input to the discussion. I think we need to\n> consider that the setting in the lightning network is not exactly\n> comparable to the one described in the 2010 paper.\n>\n> 1st: the paper states in section 5.2: \"It appears that a mathematical\n> analysis of a transaction routing model where intermediate nodes charged a\n> routing fee would require an entirely new approach since it would\n> invalidate the cycle-reachability relation that forms the basis of our\n> results.\"\n> Since we have routing fees in the lightning network to my understanding\n> the theorem and lemma you quoted in your medium post won't hold.\n>\n> 2nd: Even if we neglect the routing fees and assume the theorem still\n> holds true we have two conditions that make the problem way more dynamic:\n>  A) In the lightning network we do not know the weights of the directed\n> edges. (only the sum of two opposing edges) So while theoretically the flow\n> in the network will only depend on the liquidity of the nodes I guess in\n> practice well balanced channels will increase the probability to actually\n> find a working route.\n> B) I believe the HTLCs create a situation where funds are being locked up\n> while routing takes place and thus have an impact to the entire flow of the\n> network. While Alice searches for a route for her payment a proper route\n> could be blocked do to the fact that Bob is using it currently. Since the\n> funds of Bob have not arrived Alice might also not be able to find a\n> different route.\n>\n> However those scientific results are a strong call for Atomic Multipath\n> Payments. I personally think they are also a strong call for splicing since\n> this allows to easilly increase the flow of the network by updating a\n> channel (athough you might argue that following the paper this could be\n> achieved by just creating a new channel)\n>\n> best Rene\n>\n> On Sun, Jul 1, 2018 at 12:21 PM Dmytro Piatkivskyi <\n> dmytro.piatkivskyi at ntnu.no> wrote:\n>\n>> Hi everyone,\n>>\n>> I have been working academically on the Lightning network for a while\n>> now. I didn\u2019t not participate in the list to form my own vision of what it\n>> should be. So please, bear with me if I\u2019ll be saying nonsense sometimes.\n>>\n>> There has been a lot of discussion on sending cycle transactions to\n>> oneself to \u2018re-balance\u2019 the network. On LN mailing list\n>> <https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html> [1] or\n>> numerous places elsewhere. There has been even a paper suggesting a smart\n>> mechanism to do the re-balancing (see Revive or Liquidity network [2]). My\n>> question is what do we actually get from it? [3] states that the\n>> distribution of funds in channels does not really affect the network\n>> liquidity. I can see cheaper fees or shorter paths if the network is kept\n>> balanced. But don\u2019t you think that a smart fee strategy will do the job?\n>>\n>> To save your time, [4] explains the gist from [3].\n>>\n>> [1]\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html\n>> [2]\n>> https://www.reddit.com/r/ethereum/comments/7bse33/were_very_happy_to_announce_the_liquiditynetwork/\n>> [3] https://arxiv.org/abs/1007.0515\n>> [4]\n>> https://medium.com/@dimapiatkivskyi/why-would-you-re-balance-a-payment-network-796756ad4f31\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\n>\n> --\n> www.rene-pickhardt.de\n> <http://www.beijing-china-blog.com/>\n>\n> Skype: rene.pickhardt\n>\n> mobile: +49 (0)176 5762 3618 <+49%20176%2057623618>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180703/d412a8b5/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-07-03T19:13:55",
                "message_text_only": "Hi Dmytro,\n\nThanks for bringing this up! Sometime last year when I was at a developer\nmeetup that cdecker also attended, we briefly discussed a similar question.\nWe\nwe're discussing if \"active rebalancing\" was actually ever really necessary.\n>From my PoV, active rebalancing is rebalancing done for the purpose of being\nable to send/recv a particular payment. On white board, cdecer sketched out\na\nsimilar argument as to Lemma 2 in that paper you linked: namely that there\nwill\nexist an alternative path, therefore active rebalancing isn't necessary.\n\nIMO, in a world pre-AMP, it is indeed necessary. Consider a node Bob that\nwishes to receive a payment of 0.5 BTC. Bob has two channels, one with 2 BTC\nmax capacity, and the other with 1 BTC max capacity. If channel 1 only has\n0.2\navailable for him to receive, and channel 2 only has 0.3 available for him\nto\nreceive, then without active rebalancing, he's unable to receive the\npayment.\nHowever, if he completes a circular payment from channel 1 to channel 2 (or\nthe\nother way around), then he's able to receive the payment (under ideal\nconditions).\n\nIn a world post-AMP, then this would seem to no longer apply. Alice the\nsender\nmay be able to utilize the aggregate bandwidth of the network to send\nminimally\ntwo payment flows (one 0.2 and one 0.3) to satisfy the payment. As a result,\nactive rebalancing isn't needed as payments can be split up to fully utilize\nthe payment bandwidth at both the sender and the receiver.\n\n> total balances of nodes in the network define the feasibility of a\nparticular\n> transaction, not the distribution of balances.\n\nWith multi-path payments this is precisely the case!\n\nHowever, there might be an argument in favor of \"passive rebalancing\". I\ndefine\npassive rebalancing as rebalancing a node carries out independent of\nneeding to\nsend/receive payments themselves, in order to ensure an equilibrium state\namongst the available balances of their channels. In this case, equilibrium\nmeans being able to recv as much as you can send on all your channels. The\nargument here is that by maintaining this balance, one is likely to reduce\nthe\nnumber of routing failures from failed HTLC forwarding, as the channel is\nequally likely to be able to carry an HTLC in either direction.\n\nOne relevant detail w.r.t to the necessity of active rebalancing is the\ndirectionality of payment flows in the network. If payment flows are more or\nless balanced (kinda like the ideal world Byran Vu describes in the post\n[1]),\nmeaning people are sending out as much as they receive (so they get their\npaycheck streamed to them over LN, then stream BitFlix w/ that), then it's\npossible passive rebalancing isn't really necessary. However if a few\nsources/sinks dominate, then channels may regularly become biased requiring\nmore maintenance.\n\nAlso thanks for bringing this paper to my attention! Haven't yet read it in\nfull yet, but happy to discover that this isn't completes new territory and\nis\na problem that's been explored in the existing literature.\n\n[1]: https://blog.lightning.engineering/posts/2018/05/30/routing.html\n\n-- Laolu\n\n\nOn Sun, Jul 1, 2018 at 5:21 AM Dmytro Piatkivskyi <\ndmytro.piatkivskyi at ntnu.no> wrote:\n\n> Hi everyone,\n>\n> I have been working academically on the Lightning network for a while now.\n> I didn\u2019t not participate in the list to form my own vision of what it\n> should be. So please, bear with me if I\u2019ll be saying nonsense sometimes.\n>\n> There has been a lot of discussion on sending cycle transactions to\n> oneself to \u2018re-balance\u2019 the network. On LN mailing list\n> <https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html> [1] or\n> numerous places elsewhere. There has been even a paper suggesting a smart\n> mechanism to do the re-balancing (see Revive or Liquidity network [2]). My\n> question is what do we actually get from it? [3] states that the\n> distribution of funds in channels does not really affect the network\n> liquidity. I can see cheaper fees or shorter paths if the network is kept\n> balanced. But don\u2019t you think that a smart fee strategy will do the job?\n>\n> To save your time, [4] explains the gist from [3].\n>\n> [1]\n> https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001005.html\n> [2]\n> https://www.reddit.com/r/ethereum/comments/7bse33/were_very_happy_to_announce_the_liquiditynetwork/\n> [3] https://arxiv.org/abs/1007.0515\n> [4]\n> https://medium.com/@dimapiatkivskyi/why-would-you-re-balance-a-payment-network-796756ad4f31\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180703/29d80ad3/attachment-0001.html>"
            },
            {
                "author": "Dmytro Piatkivskyi",
                "date": "2018-07-05T10:06:41",
                "message_text_only": "Hi Olaoluwa,\n\nI\u00b9m glad we\u00b9re thinking the same direction.\n\nGenerally, I think we (the community) worry too much about equilibrium.\nThere is no really proof that it improves the network. On the other hand,\nmoney being locked in channel is of major issue. Some nodes may be used\nmostly for sending payments, whereas others mostly receiving. Therefore,\nthe distribution of funds in channels should be dictated not by\nequilibrium but by nodes' plans to send and receive.\n\n> In this case, equilibrium means being able to recv as much as you can\n>send on all your channels.\n\nNow it seems there are two ways to define equilibrium. You have described\none where each node is trying to keep the ability to send and receive at\nthe same level. I\u00b9ll repeat the above argument, some nodes may be used\nmostly for sending payments, whereas others mostly receiving. Therefore,\nsuch definition is unjustified from the individual viewpoint. Another\ndefinition of equilibrium is when a node distributes equally the available\nbalance amongst the channels it has. Your argument still stands here as\nsuch equilibrium minimises the number of depleted channels.\n\n> The argument here is that by maintaining this balance, one is likely to\n>reduce the number of routing failures from failed HTLC forwarding, as the\n>channel is equally likely to be able to carry an HTLC in either direction.\n\nIf a node has no balance, its channels are depleted. There is nothing we\ncan do with this. Such nodes are bad for topology and should be\ndiscouraged. Possibly by the autopilot.\n\n> However if a few sources/sinks dominate, then channels may regularly\n>become biased requiring more maintenance.\n\nNow you\u00b9re bringing up even more important question. If we had balanced\npayments, LN could function without touching blockchain ever again\nindefinitely. Skewed traffic is a big problem. Re-balancing won\u00b9t be of\nuse here because having a fixed nodes\u00b9 balances, there is only a limited\nmax flow that can be pushed in a particular direction. I believe autopilot\ncould mitigate the problem. Please, find my argument at the bottom of [1].\n\n[1] https://github.com/lightningnetwork/lnd/issues/677\n\n\nBest,\nDmytro\n\nFrom:  Olaoluwa Osuntokun <laolu32 at gmail.com>\nDate:  Tuesday, 3 July 2018 at 22:13\nTo:  Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no>\nCc:  \"lightning-dev at lists.linuxfoundation.org\"\n<lightning-dev at lists.linuxfoundation.org>\nSubject:  Re: [Lightning-dev] Rebalancing argument\n\n\nHi Dmytro, \n\nThanks for bringing this up! Sometime last year when I was at a developer\nmeetup that cdecker also attended, we briefly discussed a similar\nquestion. We\nwe're discussing if \"active rebalancing\" was actually ever really\nnecessary.\n>From my PoV, active rebalancing is rebalancing done for the purpose of\nbeing\nable to send/recv a particular payment. On white board, cdecer sketched\nout a\nsimilar argument as to Lemma 2 in that paper you linked: namely that there\nwill\nexist an alternative path, therefore active rebalancing isn't necessary.\n\nIMO, in a world pre-AMP, it is indeed necessary. Consider a node Bob that\nwishes to receive a payment of 0.5 BTC. Bob has two channels, one with 2\nBTC\nmax capacity, and the other with 1 BTC max capacity. If channel 1 only has\n0.2\navailable for him to receive, and channel 2 only has 0.3 available for him\nto\nreceive, then without active rebalancing, he's unable to receive the\npayment.\nHowever, if he completes a circular payment from channel 1 to channel 2\n(or the\nother way around), then he's able to receive the payment (under ideal\nconditions).\n\nIn a world post-AMP, then this would seem to no longer apply. Alice the\nsender\nmay be able to utilize the aggregate bandwidth of the network to send\nminimally\ntwo payment flows (one 0.2 and one 0.3) to satisfy the payment. As a\nresult,\nactive rebalancing isn't needed as payments can be split up to fully\nutilize\nthe payment bandwidth at both the sender and the receiver.\n\n> total balances of nodes in the network define the feasibility of a\n>particular\n> transaction, not the distribution of balances.\n\nWith multi-path payments this is precisely the case!\n\nHowever, there might be an argument in favor of \"passive rebalancing\". I\ndefine\npassive rebalancing as rebalancing a node carries out independent of\nneeding to\nsend/receive payments themselves, in order to ensure an equilibrium state\namongst the available balances of their channels. In this case, equilibrium\nmeans being able to recv as much as you can send on all your channels. The\nargument here is that by maintaining this balance, one is likely to reduce\nthe\nnumber of routing failures from failed HTLC forwarding, as the channel is\nequally likely to be able to carry an HTLC in either direction.\n\nOne relevant detail w.r.t to the necessity of active rebalancing is the\ndirectionality of payment flows in the network. If payment flows are more\nor\nless balanced (kinda like the ideal world Byran Vu describes in the post\n[1]),\nmeaning people are sending out as much as they receive (so they get their\npaycheck streamed to them over LN, then stream BitFlix w/ that), then it's\npossible passive rebalancing isn't really necessary. However if a few\nsources/sinks dominate, then channels may regularly become biased requiring\nmore maintenance.\n\nAlso thanks for bringing this paper to my attention! Haven't yet read it in\nfull yet, but happy to discover that this isn't completes new territory\nand is\na problem that's been explored in the existing literature.\n\n[1]: \nhttps://blog.lightning.engineering/posts/2018/05/30/routing.html\n<https://blog.lightning.engineering/posts/2018/05/30/routing.html>\n\n-- Laolu\n\n\nOn Sun, Jul 1, 2018 at 5:21 AM Dmytro Piatkivskyi\n<dmytro.piatkivskyi at ntnu.no> wrote:\n\n\nHi everyone,\n\nI have been working academically on the Lightning network for a while now.\nI didn\u00b9t not participate in the list to form my own vision of what it\nshould be. So please, bear with me if I\u00b9ll be saying nonsense sometimes.\n\nThere has been a lot of discussion on sending cycle transactions to\noneself to \u0152re-balance\u00b9 the network. On LN mailing list\n<https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/00\n1005.html> [1] or numerous\n places elsewhere. There has been even a paper suggesting a smart\nmechanism to do the re-balancing (see Revive or Liquidity network [2]). My\nquestion is what do we actually get from it? [3] states that the\ndistribution of funds in channels does not really affect\n the network liquidity. I can see cheaper fees or shorter paths if the\nnetwork is kept balanced. But don\u00b9t you think that a smart fee strategy\nwill do the job?\n\nTo save your time, [4] explains the gist from [3].\n\n[1] \nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001\n005.html\n[2] \nhttps://www.reddit.com/r/ethereum/comments/7bse33/were_very_happy_to_announ\nce_the_liquiditynetwork/\n[3] https://arxiv.org/abs/1007.0515\n[4] \nhttps://medium.com/@dimapiatkivskyi/why-would-you-re-balance-a-payment-netw\nork-796756ad4f31\n\n\n_______________________________________________\nLightning-dev mailing list\nLightning-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Johan Tor\u00e5s Halseth",
                "date": "2018-07-10T10:23:59",
                "message_text_only": "A simple way to see how rebalancing could be beneficial, is to observe that you only know the channel capacity (not the balance!) of the channels you don\u2019t belong to.\nIf everybody is being good stewards and are rebalancing their channels, then picking a route to send a payment over is more likely to succeed than if everybody only has channels depleted in one direction (extreme case).\n\nOn Thu, Jul 5, 2018 at 12:06, Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no> wrote:\nHi Olaoluwa,\n\nI\u00b9m glad we\u00b9re thinking the same direction.\n\nGenerally, I think we (the community) worry too much about equilibrium.\nThere is no really proof that it improves the network. On the other hand,\nmoney being locked in channel is of major issue. Some nodes may be used\nmostly for sending payments, whereas others mostly receiving. Therefore,\nthe distribution of funds in channels should be dictated not by\nequilibrium but by nodes' plans to send and receive.\n\n> In this case, equilibrium means being able to recv as much as you can\n>send on all your channels.\n\nNow it seems there are two ways to define equilibrium. You have described\none where each node is trying to keep the ability to send and receive at\nthe same level. I\u00b9ll repeat the above argument, some nodes may be used\nmostly for sending payments, whereas others mostly receiving. Therefore,\nsuch definition is unjustified from the individual viewpoint. Another\ndefinition of equilibrium is when a node distributes equally the available\nbalance amongst the channels it has. Your argument still stands here as\nsuch equilibrium minimises the number of depleted channels.\n\n> The argument here is that by maintaining this balance, one is likely to\n>reduce the number of routing failures from failed HTLC forwarding, as the\n>channel is equally likely to be able to carry an HTLC in either direction.\n\nIf a node has no balance, its channels are depleted. There is nothing we\ncan do with this. Such nodes are bad for topology and should be\ndiscouraged. Possibly by the autopilot.\n\n> However if a few sources/sinks dominate, then channels may regularly\n>become biased requiring more maintenance.\n\nNow you\u00b9re bringing up even more important question. If we had balanced\npayments, LN could function without touching blockchain ever again\nindefinitely. Skewed traffic is a big problem. Re-balancing won\u00b9t be of\nuse here because having a fixed nodes\u00b9 balances, there is only a limited\nmax flow that can be pushed in a particular direction. I believe autopilot\ncould mitigate the problem. Please, find my argument at the bottom of [1].\n\n[1] https://github.com/lightningnetwork/lnd/issues/677\n\n\nBest,\nDmytro\n\nFrom: Olaoluwa Osuntokun <laolu32 at gmail.com>\nDate: Tuesday, 3 July 2018 at 22:13\nTo: Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no>\nCc: \"lightning-dev at lists.linuxfoundation.org\"\n<lightning-dev at lists.linuxfoundation.org>\nSubject: Re: [Lightning-dev] Rebalancing argument\n\n\nHi Dmytro,\n\nThanks for bringing this up! Sometime last year when I was at a developer\nmeetup that cdecker also attended, we briefly discussed a similar\nquestion. We\nwe're discussing if \"active rebalancing\" was actually ever really\nnecessary.\n>From my PoV, active rebalancing is rebalancing done for the purpose of\nbeing\nable to send/recv a particular payment. On white board, cdecer sketched\nout a\nsimilar argument as to Lemma 2 in that paper you linked: namely that there\nwill\nexist an alternative path, therefore active rebalancing isn't necessary.\n\nIMO, in a world pre-AMP, it is indeed necessary. Consider a node Bob that\nwishes to receive a payment of 0.5 BTC. Bob has two channels, one with 2\nBTC\nmax capacity, and the other with 1 BTC max capacity. If channel 1 only has\n0.2\navailable for him to receive, and channel 2 only has 0.3 available for him\nto\nreceive, then without active rebalancing, he's unable to receive the\npayment.\nHowever, if he completes a circular payment from channel 1 to channel 2\n(or the\nother way around), then he's able to receive the payment (under ideal\nconditions).\n\nIn a world post-AMP, then this would seem to no longer apply. Alice the\nsender\nmay be able to utilize the aggregate bandwidth of the network to send\nminimally\ntwo payment flows (one 0.2 and one 0.3) to satisfy the payment. As a\nresult,\nactive rebalancing isn't needed as payments can be split up to fully\nutilize\nthe payment bandwidth at both the sender and the receiver.\n\n> total balances of nodes in the network define the feasibility of a\n>particular\n> transaction, not the distribution of balances.\n\nWith multi-path payments this is precisely the case!\n\nHowever, there might be an argument in favor of \"passive rebalancing\". I\ndefine\npassive rebalancing as rebalancing a node carries out independent of\nneeding to\nsend/receive payments themselves, in order to ensure an equilibrium state\namongst the available balances of their channels. In this case, equilibrium\nmeans being able to recv as much as you can send on all your channels. The\nargument here is that by maintaining this balance, one is likely to reduce\nthe\nnumber of routing failures from failed HTLC forwarding, as the channel is\nequally likely to be able to carry an HTLC in either direction.\n\nOne relevant detail w.r.t to the necessity of active rebalancing is the\ndirectionality of payment flows in the network. If payment flows are more\nor\nless balanced (kinda like the ideal world Byran Vu describes in the post\n[1]),\nmeaning people are sending out as much as they receive (so they get their\npaycheck streamed to them over LN, then stream BitFlix w/ that), then it's\npossible passive rebalancing isn't really necessary. However if a few\nsources/sinks dominate, then channels may regularly become biased requiring\nmore maintenance.\n\nAlso thanks for bringing this paper to my attention! Haven't yet read it in\nfull yet, but happy to discover that this isn't completes new territory\nand is\na problem that's been explored in the existing literature.\n\n[1]:\nhttps://blog.lightning.engineering/posts/2018/05/30/routing.html\n<https://blog.lightning.engineering/posts/2018/05/30/routing.html>\n\n-- Laolu\n\n\nOn Sun, Jul 1, 2018 at 5:21 AM Dmytro Piatkivskyi\n<dmytro.piatkivskyi at ntnu.no> wrote:\n\n\nHi everyone,\n\nI have been working academically on the Lightning network for a while now.\nI didn\u00b9t not participate in the list to form my own vision of what it\nshould be. So please, bear with me if I\u00b9ll be saying nonsense sometimes.\n\nThere has been a lot of discussion on sending cycle transactions to\noneself to \u0152re-balance\u00b9 the network. On LN mailing list\n<https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/00\n1005.html> [1] or numerous\nplaces elsewhere. There has been even a paper suggesting a smart\nmechanism to do the re-balancing (see Revive or Liquidity network [2]). My\nquestion is what do we actually get from it? [3] states that the\ndistribution of funds in channels does not really affect\nthe network liquidity. I can see cheaper fees or shorter paths if the\nnetwork is kept balanced. But don\u00b9t you think that a smart fee strategy\nwill do the job?\n\nTo save your time, [4] explains the gist from [3].\n\n[1]\nhttps://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001\n005.html\n[2]\nhttps://www.reddit.com/r/ethereum/comments/7bse33/were_very_happy_to_announ\nce_the_liquiditynetwork/\n[3] https://arxiv.org/abs/1007.0515\n[4]\nhttps://medium.com/@dimapiatkivskyi/why-would-you-re-balance-a-payment-netw\nork-796756ad4f31\n\n\n_______________________________________________\nLightning-dev mailing list\nLightning-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n\n_______________________________________________\nLightning-dev mailing list\nLightning-dev at lists.linuxfoundation.org\nhttps://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180710/aa9097bd/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-07-11T07:56:20",
                "message_text_only": "Good morning,\n\nI believe care must be taken for automatic rebalancing.\n\nSuppose we start in this state:\n\n      A\n   1.0|\\1.0\n      | \\\n   1.0|  \\1.0\n      B---C\n     1.0 1.0\n\nThen A pays to B 1.0 BTC:\n\n      A\n   0.0|\\1.0\n      | \\\n   2.0|  \\1.0\n      B---C\n     1.0 1.0\n\nIn an effort to balance, B moves 0.5 from A-B to B-C:\n\n      A\n   0.5|\\0.5\n      | \\\n   1.5|  \\1.5\n      B---C\n     1.5 0.5\n\nIn an effort to balance, C moves 0.5 from A-C to C-B:\n\n      A\n   0.0|\\1.0\n      | \\\n   2.0|  \\1.0\n      B---C\n     1.0 1.0\n\nWhich again triggers B to balance, setting both of them up to fight each other while A just charges them fees on the payments both ways.\n\nEventually it settles with A recouping the entire 1.0 it paid to B from the fees of both B and C fighting things out between them about keeping their channels balanced.\n\nRegards,\nZmnSCPxj\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn July 10, 2018 6:23 PM, Johan Tor\u00e5s Halseth <johanth at gmail.com> wrote:\n\n> A simple way to see how rebalancing could be beneficial, is to observe that you only know the channel capacity (not the balance!) of the channels you don\u2019t belong to.\n>\n> If everybody is being good stewards and are rebalancing their channels, then picking a route to send a payment over is more likely to succeed than if everybody only has channels depleted in one direction (extreme case).\n>\n> On Thu, Jul 5, 2018 at 12:06, Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no> wrote:\n>\n>> Hi Olaoluwa,\n>>\n>> I\u00b9m glad we\u00b9re thinking the same direction.\n>>\n>> Generally, I think we (the community) worry too much about equilibrium.\n>> There is no really proof that it improves the network. On the other hand,\n>> money being locked in channel is of major issue. Some nodes may be used\n>> mostly for sending payments, whereas others mostly receiving. Therefore,\n>> the distribution of funds in channels should be dictated not by\n>> equilibrium but by nodes' plans to send and receive.\n>>\n>>> In this case, equilibrium means being able to recv as much as you can\n>>>send on all your channels.\n>>\n>> Now it seems there are two ways to define equilibrium. You have described\n>> one where each node is trying to keep the ability to send and receive at\n>> the same level. I\u00b9ll repeat the above argument, some nodes may be used\n>> mostly for sending payments, whereas others mostly receiving. Therefore,\n>> such definition is unjustified from the individual viewpoint. Another\n>> definition of equilibrium is when a node distributes equally the available\n>> balance amongst the channels it has. Your argument still stands here as\n>> such equilibrium minimises the number of depleted channels.\n>>\n>>> The argument here is that by maintaining this balance, one is likely to\n>>>reduce the number of routing failures from failed HTLC forwarding, as the\n>>>channel is equally likely to be able to carry an HTLC in either direction.\n>>\n>> If a node has no balance, its channels are depleted. There is nothing we\n>> can do with this. Such nodes are bad for topology and should be\n>> discouraged. Possibly by the autopilot.\n>>\n>>> However if a few sources/sinks dominate, then channels may regularly\n>>>become biased requiring more maintenance.\n>>\n>> Now you\u00b9re bringing up even more important question. If we had balanced\n>> payments, LN could function without touching blockchain ever again\n>> indefinitely. Skewed traffic is a big problem. Re-balancing won\u00b9t be of\n>> use here because having a fixed nodes\u00b9 balances, there is only a limited\n>> max flow that can be pushed in a particular direction. I believe autopilot\n>> could mitigate the problem. Please, find my argument at the bottom of [1].\n>>\n>> [1] https://github.com/lightningnetwork/lnd/issues/677\n>>\n>> Best,\n>> Dmytro\n>>\n>> From: Olaoluwa Osuntokun <laolu32 at gmail.com>\n>> Date: Tuesday, 3 July 2018 at 22:13\n>> To: Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no>\n>> Cc: \"lightning-dev at lists.linuxfoundation.org\"\n>> <lightning-dev at lists.linuxfoundation.org>\n>> Subject: Re: [Lightning-dev] Rebalancing argument\n>>\n>> Hi Dmytro,\n>>\n>> Thanks for bringing this up! Sometime last year when I was at a developer\n>> meetup that cdecker also attended, we briefly discussed a similar\n>> question. We\n>> we're discussing if \"active rebalancing\" was actually ever really\n>> necessary.\n>> From my PoV, active rebalancing is rebalancing done for the purpose of\n>> being\n>> able to send/recv a particular payment. On white board, cdecer sketched\n>> out a\n>> similar argument as to Lemma 2 in that paper you linked: namely that there\n>> will\n>> exist an alternative path, therefore active rebalancing isn't necessary.\n>>\n>> IMO, in a world pre-AMP, it is indeed necessary. Consider a node Bob that\n>> wishes to receive a payment of 0.5 BTC. Bob has two channels, one with 2\n>> BTC\n>> max capacity, and the other with 1 BTC max capacity. If channel 1 only has\n>> 0.2\n>> available for him to receive, and channel 2 only has 0.3 available for him\n>> to\n>> receive, then without active rebalancing, he's unable to receive the\n>> payment.\n>> However, if he completes a circular payment from channel 1 to channel 2\n>> (or the\n>> other way around), then he's able to receive the payment (under ideal\n>> conditions).\n>>\n>> In a world post-AMP, then this would seem to no longer apply. Alice the\n>> sender\n>> may be able to utilize the aggregate bandwidth of the network to send\n>> minimally\n>> two payment flows (one 0.2 and one 0.3) to satisfy the payment. As a\n>> result,\n>> active rebalancing isn't needed as payments can be split up to fully\n>> utilize\n>> the payment bandwidth at both the sender and the receiver.\n>>\n>>> total balances of nodes in the network define the feasibility of a\n>>>particular\n>>> transaction, not the distribution of balances.\n>>\n>> With multi-path payments this is precisely the case!\n>>\n>> However, there might be an argument in favor of \"passive rebalancing\". I\n>> define\n>> passive rebalancing as rebalancing a node carries out independent of\n>> needing to\n>> send/receive payments themselves, in order to ensure an equilibrium state\n>> amongst the available balances of their channels. In this case, equilibrium\n>> means being able to recv as much as you can send on all your channels. The\n>> argument here is that by maintaining this balance, one is likely to reduce\n>> the\n>> number of routing failures from failed HTLC forwarding, as the channel is\n>> equally likely to be able to carry an HTLC in either direction.\n>>\n>> One relevant detail w.r.t to the necessity of active rebalancing is the\n>> directionality of payment flows in the network. If payment flows are more\n>> or\n>> less balanced (kinda like the ideal world Byran Vu describes in the post\n>> [1]),\n>> meaning people are sending out as much as they receive (so they get their\n>> paycheck streamed to them over LN, then stream BitFlix w/ that), then it's\n>> possible passive rebalancing isn't really necessary. However if a few\n>> sources/sinks dominate, then channels may regularly become biased requiring\n>> more maintenance.\n>>\n>> Also thanks for bringing this paper to my attention! Haven't yet read it in\n>> full yet, but happy to discover that this isn't completes new territory\n>> and is\n>> a problem that's been explored in the existing literature.\n>>\n>> [1]:\n>> https://blog.lightning.engineering/posts/2018/05/30/routing.html\n>> <https://blog.lightning.engineering/posts/2018/05/30/routing.html>\n>>\n>> -- Laolu\n>>\n>> On Sun, Jul 1, 2018 at 5:21 AM Dmytro Piatkivskyi\n>> <dmytro.piatkivskyi at ntnu.no> wrote:\n>>\n>> Hi everyone,\n>>\n>> I have been working academically on the Lightning network for a while now.\n>> I didn\u00b9t not participate in the list to form my own vision of what it\n>> should be. So please, bear with me if I\u00b9ll be saying nonsense sometimes.\n>>\n>> There has been a lot of discussion on sending cycle transactions to\n>> oneself to \u0152re-balance\u00b9 the network. On LN mailing list\n>> <https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/00\n>> 1005.html> [1] or numerous\n>> places elsewhere. There has been even a paper suggesting a smart\n>> mechanism to do the re-balancing (see Revive or Liquidity network [2]). My\n>> question is what do we actually get from it? [3] states that the\n>> distribution of funds in channels does not really affect\n>> the network liquidity. I can see cheaper fees or shorter paths if the\n>> network is kept balanced. But don\u00b9t you think that a smart fee strategy\n>> will do the job?\n>>\n>> To save your time, [4] explains the gist from [3].\n>>\n>> [1]\n>> https://lists.linuxfoundation.org/pipermail/lightning-dev/2018-February/001\n>> 005.html\n>> [2]\n>> https://www.reddit.com/r/ethereum/comments/7bse33/were_very_happy_to_announ\n>> ce_the_liquiditynetwork/\n>> [3] https://arxiv.org/abs/1007.0515\n>> [4]\n>> https://medium.com/@dimapiatkivskyi/why-would-you-re-balance-a-payment-netw\n>> ork-796756ad4f31\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180711/0b25058a/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Rebalancing argument",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Ren\u00e9 Pickhardt",
                "Dmytro Piatkivskyi",
                "Johan Tor\u00e5s Halseth",
                "Olaoluwa Osuntokun",
                "ZmnSCPxj"
            ],
            "messages_count": 8,
            "total_messages_chars_count": 48726
        }
    },
    {
        "title": "[Lightning-dev] Including a Protocol for splicing to BOLT",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2018-07-01T23:55:48",
                "message_text_only": "I'm delighted someone is fleshing this out!\n\nSplice-out is easy, splice-in is harder.\n\nNote that there are two ways:\n\n1. Broadcast a spend which joins with one or more random outputs and\n   then maintain both the old and new channels (ie. both sets of\n   signatures) until it confirms deeply enough.  This is the original\n   plan, as detailed in [0].\n2. Pre-commit. You either set up what is basically another funding tx,\n   then join the channels together once it's deep enough.\n\nThe second is simpler, but requires two onchain txs, thus I prefer\nthe original model despite the complexity.\n\nI think for 1.1 it's OK to limit this to one concurrent change at a\ntime (ie. for the 6 blocks or whatever, you can't organize *another*\nsplice in/out).\n\nThe gossip extension is difficult:\n\n1. If we extend channel_announce that won't propagate through old nodes\n   until the new channel is 6 deep, and it's wasted space (sigs + old-chanid)\n   once the splice is old news.\n2. If we extend channel_update it won't propagate once the new spend is seen\n   on the bitcoin network.\n3. A new message type won't propagate at all through old nodes: maybe it\n   could be made so that the \"splice information\" sigs + old-chanid is\n   discardable though.\n\nHmm...\nRusty.\n\nZmnSCPxj via Lightning-dev <lightning-dev at lists.linuxfoundation.org> writes:\n\n> Good morning Laolu,\n>\n>>> but even though it seems technically straight forward t\n>>\n>> Well the full async implementation may be a bit involved, depending on the\n>> architecture of the implementation (see the second point below).\n>>\n>> In the abstract, I'd say a splicing proposal should include the following:\n>>\n>>   * a generic message for both splice in/out\n>>     * this allows both sides to schedule/queue up possible changes,\n>>       opportunistically piggy-backing then on top of the other sides\n>>       initiation\n>>     * most of the channel params can also be re-negotiated as this point,\n>>       another upside is this effectively allows garbage collecting old\n>>       revocation state\n>>   * fully async splice in/out\n>>      * async is ideal as we don't need to block channel operation for\n>>        confirmations, this greatly improves the UX of the process\n>>      * async splice in should use a technique similar to what Conner has\n>>        suggested in the past [0], otherwise it would need to block :(\n>\n> It increases complexity. I suppose it would be OK to limit splice-in so that if a splice-in has not been buried deeply in the chain yet, you cannot splice-in even more, to limit the number of parallel updates you need to keep track of to only 2.\n>\n>>   * a sort of pre-announcement gossip messages\n>>      * purpose of this is to signal to other nodes \"hey this channel is\n>>        about to change outpoints, but you can keep routing through it\"\n>>      * otherwise, if this doesn't exist, then nodes would interpret the\n>>        action as a close then open of a channel, rather than a re-allocation\n>\n> At first it seems benign to me -- after all, the channel is simply \"reopened\" and what does it matter whether other nodes know if the new channel is the same as the old channel? -- but then there will be a time of a few blocks where other nodes consider the channel closed but the replacement channel is not yet deep enough onchain to be reannounced.  So I suppose it enables routing across the channel during those few blocks.\n>\n> Regards,\n> ZmnSCPxj\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-07-03T05:15:40",
                "message_text_only": "Good morning all,\n\n>     The gossip extension is difficult:\n>     \n> 3.  If we extend channel_announce that won't propagate through old nodes\n>     \n>     until the new channel is 6 deep, and it's wasted space (sigs + old-chanid)\n>     \n>     once the splice is old news.\n>     \n> 4.  If we extend channel_update it won't propagate once the new spend is seen\n>     \n>     on the bitcoin network.\n>     \n> 5.  A new message type won't propagate at all through old nodes: maybe it\n>     \n>     could be made so that the \"splice information\" sigs + old-chanid is\n>     \n>     discardable though.\n\nFor myself, I think, for old nodes, it should just appear as a \"normal\" close followed by a \"normal\" open.\n\nSo, instead, maybe a new `channel_announce_reopen` which informs everyone that an old scid will eventually become a new scid, and that the nodes involved will still consider routes via the old scid to be valid regardless.\n\nThen an ordinary `channel_announce` once the announce depth of the new scid is reached.\n\n>From point of view of old nodes, the channel is closed for some blocks, but a new channel between the two nodes is then announced.\n\n>From point of view of new nodes, the channel is referred to using the previous scid, until an ordinary `channel_announce` is received, and then the channel is referred to using the new scid.\n\n---\n\nFor myself, I think splice is less priority than AMP. But I prefer an AMP which retains proper ZKCP (i.e. receipt of preimage at payer implies receipt of payment at payee, to facilitate trustless on-to-offchain and off-to-onchain bridges).\n\nWith AMP, size of channels is less important, and many small channels will work almost as well as a few large channels.\n\nOn-to-offchain and off-to-onchain bridges form a different layer and moves complexity from Lightning protocol to a different \"bridge\" layer.  These bridges also make dual-funding channels less necessary (the main reason for dual-funding is to get incoming capacity, and incoming capacity can be easily had with some spare BTC and an off-to-onchain bridge (use onchain funds to make channel to anywhere, pay off-to-onchain bridge to give you back onchain funds, et voila you have incoming channel), and providing the bridge service is properly incentivized, too, so we do not need to worry about proper incentives for dual-funding).\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Christian Decker",
                "date": "2018-07-03T13:45:30",
                "message_text_only": "ZmnSCPxj via Lightning-dev <lightning-dev at lists.linuxfoundation.org>\nwrites:\n> For myself, I think, for old nodes, it should just appear as a\n> \"normal\" close followed by a \"normal\" open.\n\nThat's exactly what they should look like, since the channel is being\nclosed with the existing protocol and opened (possibly with a slightly\ndifferent value).\n\n> So, instead, maybe a new `channel_announce_reopen` which informs\n> everyone that an old scid will eventually become a new scid, and that\n> the nodes involved will still consider routes via the old scid to be\n> valid regardless.\n\nI thought of it more as a new alias for the old channel, so that the\nupdate in the network view is just switching names after the announce\ndepth is reached.\n\n> Then an ordinary `channel_announce` once the announce depth of the new\n> scid is reached.\n>\n> From point of view of old nodes, the channel is closed for some\n> blocks, but a new channel between the two nodes is then announced.\n>\n> From point of view of new nodes, the channel is referred to using the\n> previous scid, until an ordinary `channel_announce` is received, and\n> then the channel is referred to using the new scid.\n\nThe message announcing the reopen or the alias should probably preceed\nthe actual close, otherwise nodes may prune the channel from their view\nupon seeing the close. The message then simply has the effect of saying\n\"ignore the close, let it linger for 6 more blocks before really\nremoving from your network view\".\n\n\n> For myself, I think splice is less priority than AMP. But I prefer an\n> AMP which retains proper ZKCP (i.e. receipt of preimage at payer\n> implies receipt of payment at payee, to facilitate trustless\n> on-to-offchain and off-to-onchain bridges).\n\nAgreed, multipath routing is a priority, but I think splicing is just as\nmuch a key piece to a better UX, since it allows to ignore differences\nbetween on-chain and off-chain funds, showing just a single balance for\nall use-cases.\n\n> With AMP, size of channels is less important, and many small channels\n> will work almost as well as a few large channels.\n\nWell, capacities are still very much important, and if there is a\nsmaller min-cut separating source and destination than the total amount\nof the payment, then the payment will still fail. We now simply no\nlonger require a single channel with sufficient capacity to exist."
            },
            {
                "author": "Rusty Russell",
                "date": "2018-07-04T05:47:23",
                "message_text_only": "Christian Decker <decker.christian at gmail.com> writes:\n\n> ZmnSCPxj via Lightning-dev <lightning-dev at lists.linuxfoundation.org> writes:\n>> For myself, I think splice is less priority than AMP. But I prefer an\n>> AMP which retains proper ZKCP (i.e. receipt of preimage at payer\n>> implies receipt of payment at payee, to facilitate trustless\n>> on-to-offchain and off-to-onchain bridges).\n>\n> Agreed, multipath routing is a priority, but I think splicing is just as\n> much a key piece to a better UX, since it allows to ignore differences\n> between on-chain and off-chain funds, showing just a single balance for\n> all use-cases.\n\nAgreed, we need both.  Multi-channel was a hack because splicing doesn't\nexist, and I'd rather not ever have to implement multi-channel :)\n\nAMP is important, but it's a nasty compromise with the current\nlimitations.  I want to have my cake and eat it too, and I'm pretty sure\nit's possible once the Scnorr-Eltoonicorn arrives.\n\nCheers,\nRusty."
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-07-04T21:28:13",
                "message_text_only": "What's the nasty compromise?\n\nLet's also not underestimate how big of an update switching to dlog based\nHTLCs will be.\n\nOn Wed, Jul 4, 2018, 4:21 PM Rusty Russell <rusty at rustcorp.com.au> wrote:\n\n> Christian Decker <decker.christian at gmail.com> writes:\n>\n> > ZmnSCPxj via Lightning-dev <lightning-dev at lists.linuxfoundation.org>\n> writes:\n> >> For myself, I think splice is less priority than AMP. But I prefer an\n> >> AMP which retains proper ZKCP (i.e. receipt of preimage at payer\n> >> implies receipt of payment at payee, to facilitate trustless\n> >> on-to-offchain and off-to-onchain bridges).\n> >\n> > Agreed, multipath routing is a priority, but I think splicing is just as\n> > much a key piece to a better UX, since it allows to ignore differences\n> > between on-chain and off-chain funds, showing just a single balance for\n> > all use-cases.\n>\n> Agreed, we need both.  Multi-channel was a hack because splicing doesn't\n> exist, and I'd rather not ever have to implement multi-channel :)\n>\n> AMP is important, but it's a nasty compromise with the current\n> limitations.  I want to have my cake and eat it too, and I'm pretty sure\n> it's possible once the Scnorr-Eltoonicorn arrives.\n>\n> Cheers,\n> Rusty.\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180704/f422b9e3/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2018-07-05T00:07:44",
                "message_text_only": "Olaoluwa Osuntokun <laolu32 at gmail.com> writes:\n> What's the nasty compromise?\n>\n> Let's also not underestimate how big of an update switching to dlog based\n> HTLCs will be.\n\nWas referring to losing proof-of-payment; that's vital in a system\nwithout intermediaries.  We have to decide what the lesser evil is.\n\nAnd yeah, I called it Schnorr-Eltoonicorn not only because it's sooooo\npretty, but because actually capturing it will be a saga.\n\nCheers,\nRusty.\n\n> On Wed, Jul 4, 2018, 4:21 PM Rusty Russell <rusty at rustcorp.com.au> wrote:\n>\n>> Christian Decker <decker.christian at gmail.com> writes:\n>>\n>> > ZmnSCPxj via Lightning-dev <lightning-dev at lists.linuxfoundation.org>\n>> writes:\n>> >> For myself, I think splice is less priority than AMP. But I prefer an\n>> >> AMP which retains proper ZKCP (i.e. receipt of preimage at payer\n>> >> implies receipt of payment at payee, to facilitate trustless\n>> >> on-to-offchain and off-to-onchain bridges).\n>> >\n>> > Agreed, multipath routing is a priority, but I think splicing is just as\n>> > much a key piece to a better UX, since it allows to ignore differences\n>> > between on-chain and off-chain funds, showing just a single balance for\n>> > all use-cases.\n>>\n>> Agreed, we need both.  Multi-channel was a hack because splicing doesn't\n>> exist, and I'd rather not ever have to implement multi-channel :)\n>>\n>> AMP is important, but it's a nasty compromise with the current\n>> limitations.  I want to have my cake and eat it too, and I'm pretty sure\n>> it's possible once the Scnorr-Eltoonicorn arrives.\n>>\n>> Cheers,\n>> Rusty.\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-07-05T03:36:29",
                "message_text_only": "Good morning all,\n\n> > What's the nasty compromise?\n> > \n> > Let's also not underestimate how big of an update switching to dlog based\n> > \n> > HTLCs will be.\n> \n> Was referring to losing proof-of-payment; that's vital in a system\n> \n> without intermediaries. We have to decide what the lesser evil is.\n\nWithout the inherent ZKCP, it becomes impossible to build a trustless off-to-on/on-to-offchain bridge, since a trustless swap outside of Lightning becomes impossible.  To my mind, ZKCP is an important building block in cryptocurrency: it is what we use in Lightning for routing.  Further, ZKCP can be composed together to form a larger ZKCP, which again is what we use in Lightning for routing.\n\nThe ZKCP here is what lets LN endpoint to interact with the chain and lets off-to-on/on-to-offchain bridges to be trustless.\n\noff/onchain bridges are important as they provide:\n\n1.  Incoming channels: Get some onchain funds from cold storage (or borrowed), create an outgoing channel (likely to the bridge for best chance of working), then ask bridge for an invoice to send money to an address you control onchain. The outgoing channel capacity becomes incoming capacity, you get (most of) your money back (minus fees) onchain.\n2.  Reloading spent channels.  Give bridge an invoice and pay to the bridge to trigger it reloading your channel.\n3.  Unloading full channels. If you earn so much money (minus what you spend on expenses, subcontractors, employees, suppliers, etc.) you can use the bridge to send directly to your cold storage.\n\n#1 lets us leave out double-funded channels.  #2 and #3 lets us leave out splice.\n\nThe interaction between bridge and Lightning is simply via BOLT11 invoices.  Those provide the ZKCP necessary to make the bridge trustless.\n\nAMP enhances such a Lightning+bridge network, since the importance of maximum channel capacity is reduced if a ZKCP-providing AMP is available.  For myself, I would rather leave out AMP and double-funding and splicing than remove ZKCP.\n\nOne could imagine a semi-trusted ZKCP service for real-world items.  Some semi-trusted institution provides special safeboxes for rent that can be unlocked either by seller private key after 1008 blocks, or by the recipient key and a proof-of-payment preimage (and records the preimage in some publicly-accessible website).  To sell a real-world item, make a BOLT11 invoice, bring item to a safebox, lock it with appropriate keys and the invoice payment hash, give BOLT11 invoice to buyer.  Buyer pays and gets proof-of-payment preimage, goes to safebox and gets item.  Multi-way trades (A wants item from B, B wants item from C, C wants item from A) are just compositions of ZKCP.\n\n> \n> And yeah, I called it Schnorr-Eltoonicorn not only because it's sooooo\n> \n> pretty, but because actually capturing it will be a saga.\n\nBards shall sing about The Hunt for Schnorr-Eltoonicorn for ages, until Satoshi himself is but a vague memory of a myth long forgotten.\n\nRegards,\nZmnSCPxj"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-07-05T04:47:11",
                "message_text_only": "> #1 lets us leave out double-funded channels.  #2 and #3 lets us leave out\n> splice.\n\n> For myself, I would rather leave out AMP and double-funding and splicing\n> than remove ZKCP.\n\nIt isn't one or the other. ZKCPs are compatible with various flavors of AMP.\nAll of these technologies can be rolled out, some with less coordination\nthan others. Please stop presenting these upgrades as if they're opposing\nand fundamental constrains only allow a handful of them to be deployed.\n\nDual funded channels allow for immediate bi-directional transfers between\nendpoints. Splicing allows channels to contract or grow, as well as: pay out\nto on chain addresses, fund new channel on the fly, close into old channels,\nconsolidate change addresses, create fee inputs for eltoo, orchestrate\nclosing/opening coin-joins, etc, etc.\n\n-- Laolu\n\nOn Wed, Jul 4, 2018 at 10:36 PM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning all,\n>\n> > > What's the nasty compromise?\n> > >\n> > > Let's also not underestimate how big of an update switching to dlog\n> based\n> > >\n> > > HTLCs will be.\n> >\n> > Was referring to losing proof-of-payment; that's vital in a system\n> >\n> > without intermediaries. We have to decide what the lesser evil is.\n>\n> Without the inherent ZKCP, it becomes impossible to build a trustless\n> off-to-on/on-to-offchain bridge, since a trustless swap outside of\n> Lightning becomes impossible.  To my mind, ZKCP is an important building\n> block in cryptocurrency: it is what we use in Lightning for routing.\n> Further, ZKCP can be composed together to form a larger ZKCP, which again\n> is what we use in Lightning for routing.\n>\n> The ZKCP here is what lets LN endpoint to interact with the chain and lets\n> off-to-on/on-to-offchain bridges to be trustless.\n>\n> off/onchain bridges are important as they provide:\n>\n> 1.  Incoming channels: Get some onchain funds from cold storage (or\n> borrowed), create an outgoing channel (likely to the bridge for best chance\n> of working), then ask bridge for an invoice to send money to an address you\n> control onchain. The outgoing channel capacity becomes incoming capacity,\n> you get (most of) your money back (minus fees) onchain.\n> 2.  Reloading spent channels.  Give bridge an invoice and pay to the\n> bridge to trigger it reloading your channel.\n> 3.  Unloading full channels. If you earn so much money (minus what you\n> spend on expenses, subcontractors, employees, suppliers, etc.) you can use\n> the bridge to send directly to your cold storage.\n>\n> #1 lets us leave out double-funded channels.  #2 and #3 lets us leave out\n> splice.\n>\n> The interaction between bridge and Lightning is simply via BOLT11\n> invoices.  Those provide the ZKCP necessary to make the bridge trustless.\n>\n> AMP enhances such a Lightning+bridge network, since the importance of\n> maximum channel capacity is reduced if a ZKCP-providing AMP is available.\n> For myself, I would rather leave out AMP and double-funding and splicing\n> than remove ZKCP.\n>\n> One could imagine a semi-trusted ZKCP service for real-world items.  Some\n> semi-trusted institution provides special safeboxes for rent that can be\n> unlocked either by seller private key after 1008 blocks, or by the\n> recipient key and a proof-of-payment preimage (and records the preimage in\n> some publicly-accessible website).  To sell a real-world item, make a\n> BOLT11 invoice, bring item to a safebox, lock it with appropriate keys and\n> the invoice payment hash, give BOLT11 invoice to buyer.  Buyer pays and\n> gets proof-of-payment preimage, goes to safebox and gets item.  Multi-way\n> trades (A wants item from B, B wants item from C, C wants item from A) are\n> just compositions of ZKCP.\n>\n> >\n> > And yeah, I called it Schnorr-Eltoonicorn not only because it's sooooo\n> >\n> > pretty, but because actually capturing it will be a saga.\n>\n> Bards shall sing about The Hunt for Schnorr-Eltoonicorn for ages, until\n> Satoshi himself is but a vague memory of a myth long forgotten.\n>\n> Regards,\n> ZmnSCPxj\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180704/40862c92/attachment.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-07-05T04:30:22",
                "message_text_only": "> Was referring to losing proof-of-payment; that's vital in a system without\n> intermediaries.  We have to decide what the lesser evil is.\n\nAs is now, we don't have a proper proof of payment. We have a \"proof that\nsomeone paid\". A proper proof of payment would be: \"proof that bob paid\ncarol\".\nAside from that, spontaneous payments is amongst the most request feature\nrequest I get from users and developers.\n\nThere're a few ways to achieve this with dlog based AMPs.\n\nAs far hash based AMPs, with a bit more interaction, and something like\nzkboo,\none can achieve stronger binding. However, we'd lose the nice \"one shot\"\nproperty that dlog based AMPs allow.\n\n> And yeah, I called it Schnorr-Eltoonicorn not only because it's sooooo\n> pretty, but because actually capturing it will be a saga.\n\neltoo won't be the end-all-be-all as it comes along with several tradeoffs,\nlike everything else does.\n\nAlso, everything we can do with Schnorr, we can also do with ECDSA, but\ntoday.\n\n-- Laolu\n\n\nOn Wed, Jul 4, 2018 at 7:12 PM Rusty Russell <rusty at rustcorp.com.au> wrote:\n\n> Olaoluwa Osuntokun <laolu32 at gmail.com> writes:\n> > What's the nasty compromise?\n> >\n> > Let's also not underestimate how big of an update switching to dlog based\n> > HTLCs will be.\n>\n> Was referring to losing proof-of-payment; that's vital in a system\n> without intermediaries.  We have to decide what the lesser evil is.\n>\n> And yeah, I called it Schnorr-Eltoonicorn not only because it's sooooo\n> pretty, but because actually capturing it will be a saga.\n>\n> Cheers,\n> Rusty.\n>\n> > On Wed, Jul 4, 2018, 4:21 PM Rusty Russell <rusty at rustcorp.com.au>\n> wrote:\n> >\n> >> Christian Decker <decker.christian at gmail.com> writes:\n> >>\n> >> > ZmnSCPxj via Lightning-dev <lightning-dev at lists.linuxfoundation.org>\n> >> writes:\n> >> >> For myself, I think splice is less priority than AMP. But I prefer an\n> >> >> AMP which retains proper ZKCP (i.e. receipt of preimage at payer\n> >> >> implies receipt of payment at payee, to facilitate trustless\n> >> >> on-to-offchain and off-to-onchain bridges).\n> >> >\n> >> > Agreed, multipath routing is a priority, but I think splicing is just\n> as\n> >> > much a key piece to a better UX, since it allows to ignore differences\n> >> > between on-chain and off-chain funds, showing just a single balance\n> for\n> >> > all use-cases.\n> >>\n> >> Agreed, we need both.  Multi-channel was a hack because splicing doesn't\n> >> exist, and I'd rather not ever have to implement multi-channel :)\n> >>\n> >> AMP is important, but it's a nasty compromise with the current\n> >> limitations.  I want to have my cake and eat it too, and I'm pretty sure\n> >> it's possible once the Scnorr-Eltoonicorn arrives.\n> >>\n> >> Cheers,\n> >> Rusty.\n> >> _______________________________________________\n> >> Lightning-dev mailing list\n> >> Lightning-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> >>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180704/27c23619/attachment-0001.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2018-07-08T06:38:38",
                "message_text_only": "Olaoluwa Osuntokun <laolu32 at gmail.com> writes:\n>> Was referring to losing proof-of-payment; that's vital in a system without\n>> intermediaries.  We have to decide what the lesser evil is.\n>\n> As is now, we don't have a proper proof of payment. We have a \"proof that\n> someone paid\". A proper proof of payment would be: \"proof that bob paid\n> carol\".\n\nHi Laolu!\n\n        I consider that proof-of-payer, which would be great.\nproof-of-payment (though ours is trivially forgable by the payee) is\nuseful for the common case of \"I paid, and you never shipped me my\nwidget!\" arguments (assuming description is invoice is useful, such as\ncontaining shipping address).\n\nOur network of early adopters with no significant malicious players will\nnot last, regrettably.\n\n> Aside from that, spontaneous payments is amongst the most request feature\n> request I get from users and developers.\n\nBut they're terrible for anything but donations.  Businesses do *not*\nwant people to get into the habit of resuing old invoices (even if we\nused dlog methods so it wasn't massively broken).\n\npush-payments was one of the first support headaches we had at the\nBlockstream Store, and I'm not eager to repeat it.  At least in that\ncase we knew where to return the funds!\n\nTo be clear: (opt-in) reusable invoices are vital.  But it's still part\nof an 'invoice -> pay' flow (though with the pay step repeated).\n\n>> And yeah, I called it Schnorr-Eltoonicorn not only because it's sooooo\n>> pretty, but because actually capturing it will be a saga.\n>\n> eltoo won't be the end-all-be-all as it comes along with several tradeoffs,\n> like everything else does.\n\nI somewhat agree that it has caveats, but it'll improve things\nsignificantly against what we have today.\n\n> Also, everything we can do with Schnorr, we can also do with ECDSA, but\n> today.\n\nTrue.  But it should be much easier...\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Including a Protocol for splicing to BOLT",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Christian Decker",
                "Olaoluwa Osuntokun",
                "ZmnSCPxj"
            ],
            "messages_count": 10,
            "total_messages_chars_count": 24853
        }
    },
    {
        "title": "[Lightning-dev] [bitcoin-dev] BIP sighash_noinput",
        "thread_messages": [
            {
                "author": "Gregory Maxwell",
                "date": "2018-07-02T18:11:54",
                "message_text_only": "On Mon, Apr 30, 2018 at 4:29 PM, Christian Decker via bitcoin-dev\n<bitcoin-dev at lists.linuxfoundation.org> wrote:\n> Hi all,\n>\n> I'd like to pick up the discussion from a few months ago, and propose a new\n> sighash flag, `SIGHASH_NOINPUT`, that removes the commitment to the previous\n\nI know it seems kind of silly, but I think it's somewhat important\nthat the formal name of this flag is something like\n\"SIGHASH_REPLAY_VULNERABLE\" or likewise or at least\n\"SIGHASH_WEAK_REPLAYABLE\". This is because noinput is materially\ninsecure for traditional applications where a third party might pay to\nan address a second time, and should only be used in special protocols\nwhich make that kind of mistake unlikely.   Otherwise, I'm worried\nthat wallets might start using this sighash because it simplifies\nhandling malleability without realizing that when a third party reuses\na script pubkey, completely outside of control of the wallet that uses\nthe flag, funds will be lost as soon as a troublemaker shows up (but\nnot, sadly, in testing).  This sort of risk is magnified because the\nthird party address reuser has no way to know that this sighash flag\nhas (or will) be used with a particular scriptpubkey.\n\nSo, one could even argue that the possibility that someone might use\nthis flag means that it's generally unsafe to reuse a scriptpubkey.  I\ndon't think the same argument applies for NONE or the single-bug\nbecause they render even a single use insecure...  The best mitigation\nI can think of is defence in depth to ensure that anyone who uses this\nsighash flag understands the consequences."
            },
            {
                "author": "Rusty Russell",
                "date": "2018-07-03T04:56:53",
                "message_text_only": "Gregory Maxwell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n> On Mon, Apr 30, 2018 at 4:29 PM, Christian Decker via bitcoin-dev\n> <bitcoin-dev at lists.linuxfoundation.org> wrote:\n>> Hi all,\n>>\n>> I'd like to pick up the discussion from a few months ago, and propose a new\n>> sighash flag, `SIGHASH_NOINPUT`, that removes the commitment to the previous\n>\n> I know it seems kind of silly, but I think it's somewhat important\n> that the formal name of this flag is something like\n> \"SIGHASH_REPLAY_VULNERABLE\" or likewise or at least\n> \"SIGHASH_WEAK_REPLAYABLE\".\n\nI agree with the DO_NOT_WANT-style naming.  REUSE_VULNERABLE seems to\ncapture it: the word VULNERABLE should scare people away (or at least\ncause them to google further).\n\nThanks,\nRusty."
            },
            {
                "author": "Peter Todd",
                "date": "2018-07-03T05:21:00",
                "message_text_only": "On Tue, Jul 03, 2018 at 02:26:53PM +0930, Rusty Russell via bitcoin-dev wrote:\n> Gregory Maxwell via bitcoin-dev <bitcoin-dev at lists.linuxfoundation.org> writes:\n> > On Mon, Apr 30, 2018 at 4:29 PM, Christian Decker via bitcoin-dev\n> > <bitcoin-dev at lists.linuxfoundation.org> wrote:\n> >> Hi all,\n> >>\n> >> I'd like to pick up the discussion from a few months ago, and propose a new\n> >> sighash flag, `SIGHASH_NOINPUT`, that removes the commitment to the previous\n> >\n> > I know it seems kind of silly, but I think it's somewhat important\n> > that the formal name of this flag is something like\n> > \"SIGHASH_REPLAY_VULNERABLE\" or likewise or at least\n> > \"SIGHASH_WEAK_REPLAYABLE\".\n> \n> I agree with the DO_NOT_WANT-style naming.  REUSE_VULNERABLE seems to\n> capture it: the word VULNERABLE should scare people away (or at least\n> cause them to google further).\n\nThe problem with that name is `SIGHASH_REUSE_VULNERABLE` tells you nothing\nabout what the flag actually does.\n\nWhat name are we going to give a future flag that does something different, but\nis also replay vulnerable?\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180703/5fb58689/attachment.sig>"
            },
            {
                "author": "Gregory Maxwell",
                "date": "2018-07-03T23:45:22",
                "message_text_only": "On Tue, Jul 3, 2018 at 5:21 AM, Peter Todd <pete at petertodd.org> wrote:\n> The problem with that name is `SIGHASH_REUSE_VULNERABLE` tells you nothing\n> about what the flag actually does.\n\nI believe that making the signature replayable is 1:1 with omitting\nthe identification of the specific coin being spent from it."
            },
            {
                "author": "Peter Todd",
                "date": "2018-07-09T09:41:39",
                "message_text_only": "On Tue, Jul 03, 2018 at 11:45:22PM +0000, Gregory Maxwell wrote:\n> On Tue, Jul 3, 2018 at 5:21 AM, Peter Todd <pete at petertodd.org> wrote:\n> > The problem with that name is `SIGHASH_REUSE_VULNERABLE` tells you nothing\n> > about what the flag actually does.\n> \n> I believe that making the signature replayable is 1:1 with omitting\n> the identification of the specific coin being spent from it.\n\nI think you have a good point there. But that's not the only way that reuse\ncould be a vulnerability: consider hash-based signatures.\n\nI'm happy with adding a suffix or prefix to the term SIGHASH_NOINPUT, e.g.\nSIGHASH_NOINPUT_UNSAFE to re-use Rust terminology.\n\n-- \nhttps://petertodd.org 'peter'[:-1]@petertodd.org\n-------------- next part --------------\nA non-text attachment was scrubbed...\nName: signature.asc\nType: application/pgp-signature\nSize: 833 bytes\nDesc: not available\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180709/28ee2dde/attachment.sig>"
            },
            {
                "author": "Christian Decker",
                "date": "2018-07-03T12:05:09",
                "message_text_only": "Gregory Maxwell <greg at xiph.org> writes:\n> I know it seems kind of silly, but I think it's somewhat important\n> that the formal name of this flag is something like\n> \"SIGHASH_REPLAY_VULNERABLE\" or likewise or at least\n> \"SIGHASH_WEAK_REPLAYABLE\". This is because noinput is materially\n> insecure for traditional applications where a third party might pay to\n> an address a second time, and should only be used in special protocols\n> which make that kind of mistake unlikely.   Otherwise, I'm worried\n> that wallets might start using this sighash because it simplifies\n> handling malleability without realizing that when a third party reuses\n> a script pubkey, completely outside of control of the wallet that uses\n> the flag, funds will be lost as soon as a troublemaker shows up (but\n> not, sadly, in testing).  This sort of risk is magnified because the\n> third party address reuser has no way to know that this sighash flag\n> has (or will) be used with a particular scriptpubkey.\n\nAbsolutely agree that we should be signaling the danger of using noinput\nas clearly as possible to developers, and I'm more than happy to adopt\nthe _unsafe suffix suggested by jb55. I think using non-sighash_all\nsighashes is always a huge danger, as you have correctly pointed out, so\nmaybe we should be marking all of them as being unsafe, or make sure to\ncommunicate that danger on a higher level (docs)."
            },
            {
                "author": "Luke Dashjr",
                "date": "2018-07-03T12:13:44",
                "message_text_only": "On Monday 02 July 2018 18:11:54 Gregory Maxwell wrote:\n> I know it seems kind of silly, but I think it's somewhat important\n> that the formal name of this flag is something like\n> \"SIGHASH_REPLAY_VULNERABLE\" or likewise or at least\n> \"SIGHASH_WEAK_REPLAYABLE\". This is because noinput is materially\n> insecure for traditional applications where a third party might pay to\n> an address a second time, and should only be used in special protocols\n> which make that kind of mistake unlikely. \n\nI don't agree. Address reuse is undefined behaviour. Nobody should assume it \nis safe or works.\n\nI intend to possibly use SIGHASH_NOINPUT for ordinary Bitcoin transactions in \na wallet I am writing, which explicitly does not support address reuse.\n\nLuke"
            },
            {
                "author": "DING FENG",
                "date": "2018-07-11T04:37:27",
                "message_text_only": "Hi,\n\nI'm a junior developer and a bitcoin user.\nAnd I have read this thread carefully.\n\nI'm very worried about \"SIGHASH_NOINPUT\".\n\nBecause \"SIGHASH_NOINPUT\" looks will be widely used, and it makes reuse\naddress more dangerous.\nNow, most donate addresses (even bitcointalk.org and bitcoin.org) used as\nreuse addresss, and fans continually send bitcoins to these addresses.\nSo, if user import his address (keys, seeds) to one of the\n\"SIGHASH_NOINPUT\" enabled Bitcoin/LN wallet and sign a Tx, this will make\nhis donate address disabled immediately and will continue loss coins\nfuture(although the input amount is included by the SIGHASH_NOINPUT\nsignature).\n\n\n\"SIGHASH_NONE\" only influence the current coin in the single Tx, and may be\nno wallet implement it.\n\"SIGHASH_NOINPUT\" influence the whole wallet and future coins, and\n\"SIGHASH_NOINPUT\" intent to be widely used in Bitcoin/LN wallet.\n\n\"SIGHASH_NOINPUT\" look more like give away my signature right (as release\nmy private key, I know that there is an exchange of private keys operation\nin LN).\nOther SIGHASH flag just giveaway my designated coins.\n\n\nAlthough address reuse is not perfect safe, but it can be used and widely\nused in fact,\nSo, I think \"SIGHASH_NOINPUT\" may let a lot of users at risk.\n\n\n\n2018-07-03 20:13 GMT+08:00 Luke Dashjr <luke at dashjr.org>:\n\n> On Monday 02 July 2018 18:11:54 Gregory Maxwell wrote:\n> > I know it seems kind of silly, but I think it's somewhat important\n> > that the formal name of this flag is something like\n> > \"SIGHASH_REPLAY_VULNERABLE\" or likewise or at least\n> > \"SIGHASH_WEAK_REPLAYABLE\". This is because noinput is materially\n> > insecure for traditional applications where a third party might pay to\n> > an address a second time, and should only be used in special protocols\n> > which make that kind of mistake unlikely.\n>\n> I don't agree. Address reuse is undefined behaviour. Nobody should assume\n> it\n> is safe or works.\n>\n> I intend to possibly use SIGHASH_NOINPUT for ordinary Bitcoin transactions\n> in\n> a wallet I am writing, which explicitly does not support address reuse.\n>\n> Luke\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n\n\n\n-- \n\n\nMob: +86-18667916176\nEmail:dingfeng12345 at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180711/28043dfe/attachment.html>"
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-07-11T07:43:49",
                "message_text_only": "Good morning DING FENG,\n\nWhile your concern is valid, the general intent is the below:\n\n1.  We will use a scary name like SIGHASH_NOINPUT_UNSAFE to explicitly inform to wallet and Bitcoin software developers that the flag is potentially unsafe.\n2.  SIGHASH_NOINPUT_UNSAFE is intended to be used for specialty protocols like LN, CoinSwap, etc. and not for general-purpose user wallets (except for Luke Dash Jr wallet which explicitly rejects address reuse).  By default, this flag is not set and address reuse is still slightly safe for common usage, modulo other bugs in the implementation such as weak generation of random R (which are already existing concerns for SIGHASH_ALL).\n2.1.  Even for LN/CoinSwap/etc., SIGHASH_NOINPUT_UNSAFE will be used only in the exact specialty protocol, and not e.g. for general wallet usage.\n\nRegards,\nZmnSCPxj\n\nSent with [ProtonMail](https://protonmail.com) Secure Email.\n\n\u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\nOn July 11, 2018 12:37 PM, DING FENG <dingfeng12345 at gmail.com> wrote:\n\n> Hi,\n>\n> I'm a junior developer and a bitcoin user.\n> And I have read this thread carefully.\n>\n> I'm very worried about \"SIGHASH_NOINPUT\".\n>\n> Because \"SIGHASH_NOINPUT\" looks will be widely used, and it makes reuse address more dangerous.\n> Now, most donate addresses (even bitcointalk.org and bitcoin.org) used as reuse addresss, and fans continually send bitcoins to these addresses.\n> So, if user import his address (keys, seeds) to one of the \"SIGHASH_NOINPUT\" enabled Bitcoin/LN wallet and sign a Tx, this will make his donate address disabled immediately and will continue loss coins future(although the input amount is included by the SIGHASH_NOINPUT signature).\n>\n> \"SIGHASH_NONE\" only influence the current coin in the single Tx, and may be no wallet implement it.\n> \"SIGHASH_NOINPUT\" influence the whole wallet and future coins, and \"SIGHASH_NOINPUT\" intent to be widely used in Bitcoin/LN wallet.\n>\n> \"SIGHASH_NOINPUT\" look more like give away my signature right (as release my private key, I know that there is an exchange of private keys operation in LN).\n> Other SIGHASH flag just giveaway my designated coins.\n>\n> Although address reuse is not perfect safe, but it can be used and widely used in fact,\n> So, I think \"SIGHASH_NOINPUT\" may let a lot of users at risk.\n>\n> 2018-07-03 20:13 GMT+08:00 Luke Dashjr <luke at dashjr.org>:\n>\n>> On Monday 02 July 2018 18:11:54 Gregory Maxwell wrote:\n>>> I know it seems kind of silly, but I think it's somewhat important\n>>> that the formal name of this flag is something like\n>>> \"SIGHASH_REPLAY_VULNERABLE\" or likewise or at least\n>>> \"SIGHASH_WEAK_REPLAYABLE\". This is because noinput is materially\n>>> insecure for traditional applications where a third party might pay to\n>>> an address a second time, and should only be used in special protocols\n>>> which make that kind of mistake unlikely.\n>>\n>> I don't agree. Address reuse is undefined behaviour. Nobody should assume it\n>> is safe or works.\n>>\n>> I intend to possibly use SIGHASH_NOINPUT for ordinary Bitcoin transactions in\n>> a wallet I am writing, which explicitly does not support address reuse.\n>>\n>> Luke\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n> --\n>\n> Mob: +86-18667916176\n>\n> Email:dingfeng12345 at gmail.com\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180711/89cee71e/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2018-07-13T00:04:14",
                "message_text_only": "DING FENG <dingfeng12345 at gmail.com> writes:\n> Hi,\n>\n> I'm a junior developer and a bitcoin user.\n> And I have read this thread carefully.\n>\n> I'm very worried about \"SIGHASH_NOINPUT\".\n>\n> Because \"SIGHASH_NOINPUT\" looks will be widely used, and it makes reuse\n> address more dangerous.\n\nNo.\n\nA wallet should *never* create a SIGHASH_NOINPUT to spend its own UTXOs.\nSIGHASH_NOINPUT is useful for smart contracts which have unique\nconditions, such as a pair of peers rotating keys according to an agreed\nschedule (eg. lightning).\n\nCheers,\nRusty."
            },
            {
                "author": "ZmnSCPxj",
                "date": "2018-07-03T06:58:36",
                "message_text_only": "Good morning,\n\n>The problem with that name is `SIGHASH_REUSE_VULNERABLE` tells you nothing\n>about what the flag actually does.\n\nSIGHASH_NOINPUT_REUSE_VULNERABLE?\n\nSIGHASH_NOINPUT_VULNERABLE?\n\nRegards,\nZmnSCPxj\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180703/3b401352/attachment.html>"
            },
            {
                "author": "William Casarin",
                "date": "2018-07-03T11:54:37",
                "message_text_only": "A convention in Haskell libraries is to use an \"unsafe\" prefix to any function that may have side effects (here be dragons, etc)\n\nI'm happy with a _VULNERABLE or _UNSAFE postfix as a standard way to signal this."
            }
        ],
        "thread_summary": {
            "title": "BIP sighash_noinput",
            "categories": [
                "Lightning-dev",
                "bitcoin-dev"
            ],
            "authors": [
                "Peter Todd",
                "DING FENG",
                "Luke Dashjr",
                "William Casarin",
                "Rusty Russell",
                "Gregory Maxwell",
                "ZmnSCPxj",
                "Christian Decker"
            ],
            "messages_count": 12,
            "total_messages_chars_count": 14489
        }
    },
    {
        "title": "[Lightning-dev] Second Level Protocols - Lightning - Patents",
        "thread_messages": [
            {
                "author": "Praveen Baratam",
                "date": "2018-07-03T06:05:54",
                "message_text_only": "Thank you for the detailed explanation! \u263a\n\n\n\u1427\n\nOn Fri, Jun 29, 2018 at 8:25 AM ZmnSCPxj <ZmnSCPxj at protonmail.com> wrote:\n\n> Good morning Praveen,\n>\n> The patent system, has intent, that the inventor will completely reveal\n> the design of the invention, in exchange for a (time-bound) state monopoly\n> on the construction and sale of the invention.  The intent, is that the\n> inventor is compensated for the toil in creating the invention, while the\n> revealed design may help future inventors to consider, an improved\n> designed, after the granted monopoly has ended.\n>\n> Thus, the patent system, has the concept, \"prior art\".\n>\n> If the item being patented, is in the past (\"prior\") already known among\n> practitioners (\"art\"), then there is no need for the state to \"pay for\"\n> revealing the design by granting a monopoly.  Already, the design is\n> revealed and known, so why should the state pay the inventor with a\n> state-enforced monopoly?\n>\n> Importantly, any evidence, that the design of the invention is known, is\n> prior art. This includes publications made by the inventor himself or\n> herself.  It is prior art since the fact of publication indicates that\n> other practitioners now know of the art of the new design.\n>\n> Another consideration, is the \"grace period\".\n>\n> An inventor may publish, the design of the invention, at some past point,\n> and then file for a patent afterward.  However, the fact of the\n> publication, even initiated by the inventor, is itself prior art, and is\n> evidence that the invention is known (and that the state must, logically,\n> not pay for it by enforcing a patent-backed monopoly).\n>\n> Of course, an inventor may publish an invention with intent to patent it\n> later. Thus, the state allows, a grace period, after the inventor publishes\n> the design, to patent the design. Importantly, this grace period is not of\n> unlimited duration.  The de facto global state government, the USA,\n> provides a grace period of 1 year only.\n>\n> For reference, the Poon-Dryja whitepaper for Lightning was published in\n> 2016, and the current year is now known to be 2018.\n>\n> As the current Lightning design is designed publicly and continuously\n> published in the lightning-rfc (thus a continuous evidence that the design\n> of Lightning is already known), and is in any case based on the prior-art\n> Poon-Dryja paper, and neither Poon nor Dryja have applied for patents of\n> the Lightning design within a year of publication of the Poon-Dryja paper,\n> then the state will not bother to grant a patent to the inventors of\n> Lightning.\n>\n> (the above describes the ideal operation of patent systems. it should be\n> noted, that agents operating patent systems are known to run on cognitive\n> substrates that are highly amenable to external corrupting influences, and\n> thus non-ideal operation may occur in practice.)\n>\n> Regards,\n> ZmnSCPxj\n>\n>\n> Sent with ProtonMail <https://protonmail.com> Secure Email.\n>\n> \u2010\u2010\u2010\u2010\u2010\u2010\u2010 Original Message \u2010\u2010\u2010\u2010\u2010\u2010\u2010\n> On June 22, 2018 11:21 PM, Praveen Baratam <praveen.baratam at gmail.com>\n> wrote:\n>\n> Hello everybody,\n>\n> I just heard from a friend that Second Level Protocols such as Lightening\n> Network can be patented if the author/inventor chooses to!\n>\n> Is it possible? Am I missing something?\n>\n> Best,\n>\n> Praveen Baratam\n>\n> about.me <http://about.me/praveen.baratam>\n> \u1427\n>\n>\n>\n\n-- \nDr. Praveen Baratam\n\nabout.me <http://about.me/praveen.baratam>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180703/6dbe7fe7/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "Second Level Protocols - Lightning - Patents",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Praveen Baratam"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 3613
        }
    },
    {
        "title": "[Lightning-dev] Lightning-dev Digest, Vol 35, Issue 13 (sighash_noinput & watchtowers)",
        "thread_messages": [
            {
                "author": "James Chiang",
                "date": "2018-07-13T14:54:18",
                "message_text_only": "Hello everyone,\n I understand sighash_noinput allows us to reduce the number of stored\nsignatures, as it can spend any uxto with the respective one-use pub key\nscript.\nIn the case of watchtowers, are we not trading off privacy, as we are\nrevealing which states are related, right?\n\nI'm trying to catch up my understanding on the various models here. The\ntxid_half + encrypted blob guarantees nothing is learned about each state\nand how they relate unless a revocation must happen (but doesn't scale, one\nblob per outsourced state). Once signatures are reused for multiple states\nwith sighash_noinput, how do we minimise information being disclosed to 3rd\nparty?\n\nMany thanks in advance!\n\nJames\n\n\nOn Fri, Jul 13, 2018 at 2:00 PM, <\nlightning-dev-request at lists.linuxfoundation.org> wrote:\n\n> Send Lightning-dev mailing list submissions to\n>         lightning-dev at lists.linuxfoundation.org\n>\n> To subscribe or unsubscribe via the World Wide Web, visit\n>         https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> or, via email, send a message with subject or body 'help' to\n>         lightning-dev-request at lists.linuxfoundation.org\n>\n> You can reach the person managing the list at\n>         lightning-dev-owner at lists.linuxfoundation.org\n>\n> When replying, please edit your Subject line so it is more specific\n> than \"Re: Contents of Lightning-dev digest...\"\n>\n>\n> Today's Topics:\n>\n>    1. Re: [bitcoin-dev] BIP sighash_noinput (Rusty Russell)\n>\n>\n> ----------------------------------------------------------------------\n>\n> Message: 1\n> Date: Fri, 13 Jul 2018 09:34:14 +0930\n> From: Rusty Russell <rusty at rustcorp.com.au>\n> To: DING FENG <dingfeng12345 at gmail.com>, Luke Dashjr <luke at dashjr.org>\n> Cc: Bitcoin Protocol Discussion\n>         <bitcoin-dev at lists.linuxfoundation.org>,\n>         lightning-dev at lists.linuxfoundation.org, Gregory Maxwell\n>         <greg at xiph.org>\n> Subject: Re: [Lightning-dev] [bitcoin-dev] BIP sighash_noinput\n> Message-ID: <878t6gxapt.fsf at rustcorp.com.au>\n> Content-Type: text/plain\n>\n> DING FENG <dingfeng12345 at gmail.com> writes:\n> > Hi,\n> >\n> > I'm a junior developer and a bitcoin user.\n> > And I have read this thread carefully.\n> >\n> > I'm very worried about \"SIGHASH_NOINPUT\".\n> >\n> > Because \"SIGHASH_NOINPUT\" looks will be widely used, and it makes reuse\n> > address more dangerous.\n>\n> No.\n>\n> A wallet should *never* create a SIGHASH_NOINPUT to spend its own UTXOs.\n> SIGHASH_NOINPUT is useful for smart contracts which have unique\n> conditions, such as a pair of peers rotating keys according to an agreed\n> schedule (eg. lightning).\n>\n> Cheers,\n> Rusty.\n>\n>\n> ------------------------------\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n> End of Lightning-dev Digest, Vol 35, Issue 13\n> *********************************************\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180713/05cab0db/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2018-07-14T00:48:15",
                "message_text_only": "James Chiang <james.chiangwu at gmail.com> writes:\n> Hello everyone,\n>  I understand sighash_noinput allows us to reduce the number of stored\n> signatures, as it can spend any uxto with the respective one-use pub key\n> script.\n> In the case of watchtowers, are we not trading off privacy, as we are\n> revealing which states are related, right?\n\nIndeed.  Eltoo (which needs SIGHASH_NOINPUT) means you only need the\nlatest transaction, not a penalty tx for every state change.\n\n> I'm trying to catch up my understanding on the various models here. The\n> txid_half + encrypted blob guarantees nothing is learned about each state\n> and how they relate unless a revocation must happen (but doesn't scale, one\n> blob per outsourced state). Once signatures are reused for multiple states\n> with sighash_noinput, how do we minimise information being disclosed to 3rd\n> party?\n\nI don't think anyone's done the full design, but my guess would be that\nwe'd use the same trick of encrypting using the txid.\n\nThe twist is that the watchtower may need to consider txs which already\nhave been spent by one (or a chain of) SIGHASH_NOINPUT transactions.\nThat's pretty easy though.\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Lightning-dev Digest, Vol 35, Issue 13 (sighash_noinput & watchtowers)",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "James Chiang"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4340
        }
    },
    {
        "title": "[Lightning-dev] 2018 Lightning Developer Summit: Invitation Applications",
        "thread_messages": [
            {
                "author": "Rusty Russell",
                "date": "2018-07-16T22:02:26",
                "message_text_only": "Hi all,\n\nThose of us involved in the BOLT process for the last two years are\norganizing another Summit, this time in Adelaide, Australia on November 8-9.\nThis meeting will set priorities and evaluate concrete proposals for the\n1.1 version of the spec.\n\nTo keep things fair, in addition to a handful of representatives from the\nlnd, c-lightning, and Eclair projects, we're asking anyone else who would\nlike to participate to apply here:\n\n        https://goo.gl/forms/h6Eg1coHp5BWYcrn1\n\nWe're aiming for less than 20 participants, as our goal is to keep it small\nand focus on moving the spec forward. Note that this is a highly technical\nevent focused solely on protocol design; there will be many other\nopportunities for people looking to build applications or contribute to\nLightning-related projects.\n\nThe Lightning Summit Disorganization Committee:\n  Elizabeth Stark, Pierre-Marie Padiou, Rusty Russell."
            }
        ],
        "thread_summary": {
            "title": "2018 Lightning Developer Summit: Invitation Applications",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 905
        }
    },
    {
        "title": "[Lightning-dev] eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts",
        "thread_messages": [
            {
                "author": "Anthony Towns",
                "date": "2018-07-18T10:02:38",
                "message_text_only": "(bitcoin-dev dropped from cc)\n\nOn Mon, Apr 30, 2018 at 05:41:38PM +0200, Christian Decker wrote:\n> eltoo is a drop-in replacement for the penalty based invalidation\n> mechanism that is used today in the Lightning specification. [...]\n\nI think you can simplify eltoo further, both in the way the transactions\nwork and in the game theory ensuring people play fair.\n\nIn essence: rather than having a funding transaction spending to address\n\"X\", and a set of ratcheting states that spend from-and-to the same\naddress \"X\", I think it's feasible to have a simpler ratchet mechanism:\n\n  (1) funding address: multisig by A and B as usual\n\n  (2) commit to state >=N by A\n\n  (3a) commit to state N by A after delay D; or\n  (3b) commit to state M (M>=N) by B\n\nI believe those transactions (while partially signed, before posting to\nthe blockchain) would look like:\n\n  (1) pay to \"2 A1 B1 2 OP_CHECKMULTISIG\"\n\n  (2) signed by B1, nlocktime set to (N+E)\n      pay to \"(N+E) OP_CLTV OP_DROP 2 A2a B2a 2 OP_CHECKMULTISIG\"\n\n  (3a) signed by B2a, nSequence set to the channel pay to self delay,\n       nlocktime set to (N+E)\n       pays to the channel balances / HTLCs, with no delays or\n       revocation clauses\n\n  (3b) signed by A2a with SIGHASH_NOINPUT_UNSAFE, nlocktime set to (M+E)\n       pays to the channel balances / HTLCs, with no delays or\n       revocation clauses\n\nYou spend (2)+delay+(3a)+[claim balance/HTLC] if your counterparty\ngoes away.  You spend (2) and your counterparty spends (3b) if you're\nboth monitoring the blockchain. (3a) and (3b) should have the same tx\nsize, fee rate and outputs.\n\n(A1, A2a are keys held by A; B1, B2a are keys held by B; E is\nLOCKTIME_THRESHOLD; N is the current state number)\n\nThat seems like it has a few nice features:\n\n - txes at (3a) and (3b) can both pay current market fees with minimal\n   risk, and can be CPFPed by a tx spending your own channel balance\n\n - txes at (2) can pay a non-zero fee, provided it's constant for the\n   lifetime of the channel (to conform with the NOINPUT rules)\n\n - if both parties are monitoring the blockchain, then the channel\n   can be fully closed in a single block, by (2)+(3b)+[balance/HTLC\n   claims], and the later txes can do CPFP for tx (2).\n\n - both parties can claim their funds as soon as the other can, no\n   matter who initiates the close\n\n - you only need 3 pre-signed txes for the current state; the txes\n   for claiming HTLCs/balances don't need to be half-signed (unless\n   you're doing them via schnorr scriptless scripts etc)\n\nThe game theory looks fine to me. If you're posting transaction (2), then\nyou can choose between a final state F, paying you f and your counterparty\nb-f, or some earlier state N, paying you n, and your counterparty b-n. If\nf>n, it makes sense for you to choose F, in which case your counterparty\nis also forced to choose state F for (3b) and you're forced to choose F\nfor (3a). If n>f, then if you choose N, your counterparty will either\nchoose state F because b-f>b-n and you will receive f as before, or\nwill choose some other state M>N, where b-m>b-f, and you will receive\nm<f<n, which is a worse result. So the rational strategy seems to me\nto be to choose either F all the time, or at worst an earlier state N\nwhere every payment since then went from you towards your counterparty,\non the off-chance they're not watching the blockchain and you can get\nthat money back.\n\nNote that unlike eltoo, dealing with attempted cheating in this scenario\nhas no extra cost over a completely fair/honest close. Always attempting\nto cheat by trying to reclaim the last few payments if they were towards\nyour counterparty might help ensure implementations handle cheating well?\n\n> eltoo addresses some of the issues we encountered while speficying and\n> implementing the Lightning Network. For example outsourcing becomes very\n> simple since old states becoming public can't hurt us anymore.\n\nThe scheme above isn't great for (untrusted) outsourcing, because if\nyou reveal enough for an adversary to post tx (3b) for state N, then\nthey can then collaborate with your channel counterparty to roll you\nback from state N+1000 back to state N.\n\nWith eltoo if they do the same, then you have the opportunity to catch\nthem at it, and play state N+1000 to the blockchain -- but if you're\nmonitoring the blockchain carefully enough to catch that, why are you\noutsourcing in the first place? If you're relying on multiple outsourcers\nto keep each other honest, then I think you run into challenges paying\nthem to publish the txes for you.\n\nThoughts? Apart from still requiring NOINPUT and not working with\nadversarial outsourcing, this seems like it works nicely to me, but\nmaybe I missed something...\n\nCheers,\naj"
            }
        ],
        "thread_summary": {
            "title": "eltoo: A Simplified update Mechanism for Lightning and Off-Chain Contracts",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Anthony Towns"
            ],
            "messages_count": 1,
            "total_messages_chars_count": 4711
        }
    },
    {
        "title": "[Lightning-dev] proposal for Lightning Network improvement proposals",
        "thread_messages": [
            {
                "author": "Ren\u00e9 Pickhardt",
                "date": "2018-07-22T13:45:21",
                "message_text_only": "Hey everyone,\n\nin the grand tradition of BIPs I propose that we also start to have our own\nLIPs (Lightning Network Improvement proposals)\n\nI think they should be placed on the github.com/lightning account in a repo\ncalled lips (or within the lightning rfc repo) until that will happen I\ncreated a draft for LIP-0001 (which is describing the process and is 95%\ninfluenced by BIP-0002) in my github repo:\n\nhttps://github.com/renepickhardt/lips  (There are some open Todos and\nQuestions in this LIP)\n\nThe background for this Idea: I just came home from the bitcoin munich\nmeetup where I held a talk examining BOLT. As I was asked to also talk\nabout the future plans of the developers for BOLT 1.1 I realized while\npreparing the talk that many ideas are distributed within the community but\nit seems we don't have a central place where we collect future enhancements\nfor BOLT1.1. Having this in mind I think also for the meeting in Australia\nit would be nice if already a list of LIPs would be in place so that the\ndiscussion can be more focused.\npotential LIPs could include:\n* Watchtowers\n* Autopilot\n* AMP\n* Splicing\n* Routing Protcols\n* Broadcasting past Routing statistics\n* eltoo\n* ...\n\nAs said before I would volunteer to work on a LIP for Splicing (actually I\nalready started)\n\nbest Rene\n\n\n-- \nhttps://www.rene-pickhardt.de\n\nSkype: rene.pickhardt\n\nmobile: +49 (0)176 5762 3618\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180722/a4d1ce8b/attachment.html>"
            },
            {
                "author": "Luke Dashjr",
                "date": "2018-07-22T18:30:21",
                "message_text_only": "Lightning is covered by BIPs already. There's no need for a separate \nrepository, and the existing BOLTs should be submitted to the BIPs repository \ntoo.\n\nOn Sunday 22 July 2018 13:45:21 Ren\u00e9 Pickhardt via Lightning-dev wrote:\n> Hey everyone,\n>\n> in the grand tradition of BIPs I propose that we also start to have our own\n> LIPs (Lightning Network Improvement proposals)\n>\n> I think they should be placed on the github.com/lightning account in a repo\n> called lips (or within the lightning rfc repo) until that will happen I\n> created a draft for LIP-0001 (which is describing the process and is 95%\n> influenced by BIP-0002) in my github repo:\n>\n> https://github.com/renepickhardt/lips  (There are some open Todos and\n> Questions in this LIP)\n>\n> The background for this Idea: I just came home from the bitcoin munich\n> meetup where I held a talk examining BOLT. As I was asked to also talk\n> about the future plans of the developers for BOLT 1.1 I realized while\n> preparing the talk that many ideas are distributed within the community but\n> it seems we don't have a central place where we collect future enhancements\n> for BOLT1.1. Having this in mind I think also for the meeting in Australia\n> it would be nice if already a list of LIPs would be in place so that the\n> discussion can be more focused.\n> potential LIPs could include:\n> * Watchtowers\n> * Autopilot\n> * AMP\n> * Splicing\n> * Routing Protcols\n> * Broadcasting past Routing statistics\n> * eltoo\n> * ...\n>\n> As said before I would volunteer to work on a LIP for Splicing (actually I\n> already started)\n>\n> best Rene"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-07-22T18:59:09",
                "message_text_only": "We already have the equiv of improvement proposals: BOLTs. Historically new\nstandardization documents are proposed initially as issues or PR's when\nultimately accepted. Why do we need another repo?\n\nOn Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\nlightning-dev at lists.linuxfoundation.org> wrote:\n\n> Hey everyone,\n>\n> in the grand tradition of BIPs I propose that we also start to have our\n> own LIPs (Lightning Network Improvement proposals)\n>\n> I think they should be placed on the github.com/lightning account in a\n> repo called lips (or within the lightning rfc repo) until that will happen\n> I created a draft for LIP-0001 (which is describing the process and is 95%\n> influenced by BIP-0002) in my github repo:\n>\n> https://github.com/renepickhardt/lips  (There are some open Todos and\n> Questions in this LIP)\n>\n> The background for this Idea: I just came home from the bitcoin munich\n> meetup where I held a talk examining BOLT. As I was asked to also talk\n> about the future plans of the developers for BOLT 1.1 I realized while\n> preparing the talk that many ideas are distributed within the community but\n> it seems we don't have a central place where we collect future enhancements\n> for BOLT1.1. Having this in mind I think also for the meeting in Australia\n> it would be nice if already a list of LIPs would be in place so that the\n> discussion can be more focused.\n> potential LIPs could include:\n> * Watchtowers\n> * Autopilot\n> * AMP\n> * Splicing\n> * Routing Protcols\n> * Broadcasting past Routing statistics\n> * eltoo\n> * ...\n>\n> As said before I would volunteer to work on a LIP for Splicing (actually I\n> already started)\n>\n> best Rene\n>\n>\n> --\n> https://www.rene-pickhardt.de\n>\n> Skype: rene.pickhardt\n>\n> mobile: +49 (0)176 5762 3618\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180722/3c9c305d/attachment.html>"
            },
            {
                "author": "Ren\u00e9 Pickhardt",
                "date": "2018-07-22T19:56:53",
                "message_text_only": "Sorry did not realized that BOLTs are the equivalent - and aparently many\npeople I spoke to also didn't realize that.\n\nI thought BOLT is the protocol specification and the bolts are just the\nsections. And the BOLT should be updated to a new version.\n\nAlso I suggested that this should take place for example within the\nlightning rfc repo. So my suggestion was not about creating another place\nbut more about making the process more transparent or kind of filling the\ngap that I felt was there.\n\nI am sorry for spaming mailboxes with my suggestion just because I didn't\nunderstand the current process.\n\n\nOlaoluwa Osuntokun <laolu32 at gmail.com> schrieb am So., 22. Juli 2018 20:59:\n\n> We already have the equiv of improvement proposals: BOLTs. Historically\n> new standardization documents are proposed initially as issues or PR's when\n> ultimately accepted. Why do we need another repo?\n>\n> On Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\n> lightning-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hey everyone,\n>>\n>> in the grand tradition of BIPs I propose that we also start to have our\n>> own LIPs (Lightning Network Improvement proposals)\n>>\n>> I think they should be placed on the github.com/lightning account in a\n>> repo called lips (or within the lightning rfc repo) until that will happen\n>> I created a draft for LIP-0001 (which is describing the process and is 95%\n>> influenced by BIP-0002) in my github repo:\n>>\n>> https://github.com/renepickhardt/lips  (There are some open Todos and\n>> Questions in this LIP)\n>>\n>> The background for this Idea: I just came home from the bitcoin munich\n>> meetup where I held a talk examining BOLT. As I was asked to also talk\n>> about the future plans of the developers for BOLT 1.1 I realized while\n>> preparing the talk that many ideas are distributed within the community but\n>> it seems we don't have a central place where we collect future enhancements\n>> for BOLT1.1. Having this in mind I think also for the meeting in Australia\n>> it would be nice if already a list of LIPs would be in place so that the\n>> discussion can be more focused.\n>> potential LIPs could include:\n>> * Watchtowers\n>> * Autopilot\n>> * AMP\n>> * Splicing\n>> * Routing Protcols\n>> * Broadcasting past Routing statistics\n>> * eltoo\n>> * ...\n>>\n>> As said before I would volunteer to work on a LIP for Splicing (actually\n>> I already started)\n>>\n>> best Rene\n>>\n>>\n>> --\n>> https://www.rene-pickhardt.de\n>>\n>> Skype: rene.pickhardt\n>>\n>> mobile: +49 (0)176 5762 3618\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\nAm 22.07.2018 20:59 schrieb \"Olaoluwa Osuntokun\" <laolu32 at gmail.com>:\n\nWe already have the equiv of improvement proposals: BOLTs. Historically new\nstandardization documents are proposed initially as issues or PR's when\nultimately accepted. Why do we need another repo?\n\nOn Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\nlightning-dev at lists.linuxfoundation.org> wrote:\n\n> Hey everyone,\n>\n> in the grand tradition of BIPs I propose that we also start to have our\n> own LIPs (Lightning Network Improvement proposals)\n>\n> I think they should be placed on the github.com/lightning account in a\n> repo called lips (or within the lightning rfc repo) until that will happen\n> I created a draft for LIP-0001 (which is describing the process and is 95%\n> influenced by BIP-0002) in my github repo:\n>\n> https://github.com/renepickhardt/lips  (There are some open Todos and\n> Questions in this LIP)\n>\n> The background for this Idea: I just came home from the bitcoin munich\n> meetup where I held a talk examining BOLT. As I was asked to also talk\n> about the future plans of the developers for BOLT 1.1 I realized while\n> preparing the talk that many ideas are distributed within the community but\n> it seems we don't have a central place where we collect future enhancements\n> for BOLT1.1. Having this in mind I think also for the meeting in Australia\n> it would be nice if already a list of LIPs would be in place so that the\n> discussion can be more focused.\n> potential LIPs could include:\n> * Watchtowers\n> * Autopilot\n> * AMP\n> * Splicing\n> * Routing Protcols\n> * Broadcasting past Routing statistics\n> * eltoo\n> * ...\n>\n> As said before I would volunteer to work on a LIP for Splicing (actually I\n> already started)\n>\n> best Rene\n>\n>\n> --\n> https://www.rene-pickhardt.de\n>\n> Skype: rene.pickhardt\n>\n> mobile: +49 (0)176 5762 3618\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180722/fe61dca7/attachment-0001.html>"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-07-22T20:32:02",
                "message_text_only": "No need to apologize! Perhaps this confusion shows that the current process\nsurrounding creating/modifying/drafting BOLT documents does indeed need to\nbe better documented. We've more or less been rolling along with a pretty\nminimal process among the various implementations which I'd say has worked\npretty well so far. However as more contributors get involved we may need\nto add a bit more structure to ensure things are transparent for newcomers.\n\nOn Sun, Jul 22, 2018, 12:57 PM Ren\u00e9 Pickhardt <r.pickhardt at googlemail.com>\nwrote:\n\n> Sorry did not realized that BOLTs are the equivalent - and aparently many\n> people I spoke to also didn't realize that.\n>\n> I thought BOLT is the protocol specification and the bolts are just the\n> sections. And the BOLT should be updated to a new version.\n>\n> Also I suggested that this should take place for example within the\n> lightning rfc repo. So my suggestion was not about creating another place\n> but more about making the process more transparent or kind of filling the\n> gap that I felt was there.\n>\n> I am sorry for spaming mailboxes with my suggestion just because I didn't\n> understand the current process.\n>\n>\n> Olaoluwa Osuntokun <laolu32 at gmail.com> schrieb am So., 22. Juli 2018\n> 20:59:\n>\n>> We already have the equiv of improvement proposals: BOLTs. Historically\n>> new standardization documents are proposed initially as issues or PR's when\n>> ultimately accepted. Why do we need another repo?\n>>\n>> On Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\n>> lightning-dev at lists.linuxfoundation.org> wrote:\n>>\n>>> Hey everyone,\n>>>\n>>> in the grand tradition of BIPs I propose that we also start to have our\n>>> own LIPs (Lightning Network Improvement proposals)\n>>>\n>>> I think they should be placed on the github.com/lightning account in a\n>>> repo called lips (or within the lightning rfc repo) until that will happen\n>>> I created a draft for LIP-0001 (which is describing the process and is 95%\n>>> influenced by BIP-0002) in my github repo:\n>>>\n>>> https://github.com/renepickhardt/lips  (There are some open Todos and\n>>> Questions in this LIP)\n>>>\n>>> The background for this Idea: I just came home from the bitcoin munich\n>>> meetup where I held a talk examining BOLT. As I was asked to also talk\n>>> about the future plans of the developers for BOLT 1.1 I realized while\n>>> preparing the talk that many ideas are distributed within the community but\n>>> it seems we don't have a central place where we collect future enhancements\n>>> for BOLT1.1. Having this in mind I think also for the meeting in Australia\n>>> it would be nice if already a list of LIPs would be in place so that the\n>>> discussion can be more focused.\n>>> potential LIPs could include:\n>>> * Watchtowers\n>>> * Autopilot\n>>> * AMP\n>>> * Splicing\n>>> * Routing Protcols\n>>> * Broadcasting past Routing statistics\n>>> * eltoo\n>>> * ...\n>>>\n>>> As said before I would volunteer to work on a LIP for Splicing (actually\n>>> I already started)\n>>>\n>>> best Rene\n>>>\n>>>\n>>> --\n>>> https://www.rene-pickhardt.de\n>>>\n>>> Skype: rene.pickhardt\n>>>\n>>> mobile: +49 (0)176 5762 3618\n>>> _______________________________________________\n>>> Lightning-dev mailing list\n>>> Lightning-dev at lists.linuxfoundation.org\n>>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>>\n>>\n> Am 22.07.2018 20:59 schrieb \"Olaoluwa Osuntokun\" <laolu32 at gmail.com>:\n>\n> We already have the equiv of improvement proposals: BOLTs. Historically\n> new standardization documents are proposed initially as issues or PR's when\n> ultimately accepted. Why do we need another repo?\n>\n> On Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\n> lightning-dev at lists.linuxfoundation.org> wrote:\n>\n>> Hey everyone,\n>>\n>> in the grand tradition of BIPs I propose that we also start to have our\n>> own LIPs (Lightning Network Improvement proposals)\n>>\n>> I think they should be placed on the github.com/lightning account in a\n>> repo called lips (or within the lightning rfc repo) until that will happen\n>> I created a draft for LIP-0001 (which is describing the process and is 95%\n>> influenced by BIP-0002) in my github repo:\n>>\n>> https://github.com/renepickhardt/lips  (There are some open Todos and\n>> Questions in this LIP)\n>>\n>> The background for this Idea: I just came home from the bitcoin munich\n>> meetup where I held a talk examining BOLT. As I was asked to also talk\n>> about the future plans of the developers for BOLT 1.1 I realized while\n>> preparing the talk that many ideas are distributed within the community but\n>> it seems we don't have a central place where we collect future enhancements\n>> for BOLT1.1. Having this in mind I think also for the meeting in Australia\n>> it would be nice if already a list of LIPs would be in place so that the\n>> discussion can be more focused.\n>> potential LIPs could include:\n>> * Watchtowers\n>> * Autopilot\n>> * AMP\n>> * Splicing\n>> * Routing Protcols\n>> * Broadcasting past Routing statistics\n>> * eltoo\n>> * ...\n>>\n>> As said before I would volunteer to work on a LIP for Splicing (actually\n>> I already started)\n>>\n>> best Rene\n>>\n>>\n>> --\n>> https://www.rene-pickhardt.de\n>>\n>> Skype: rene.pickhardt\n>>\n>> mobile: +49 (0)176 5762 3618\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180722/fad0a2fa/attachment.html>"
            },
            {
                "author": "Mr Hodlen",
                "date": "2018-07-23T19:15:28",
                "message_text_only": "Hi, new guy here. I've also been a bit confused about the process from just \nreading the BOLTs.\n\nI'm working on an implementation of the BOLTs with the intention of \nexperimenting with new features.\nMy concerns are mainly about assignment of values for types and feature bits, \nand how we can test new features without conflicting with other developers. \n\nFor example, looking at the current BOLT#9, it appears bits 8/9 are the next \nfree bits available for use, so if I were implementing a new optional feature, \nI would pick the next available bits, \nhowever, I find that other developers have also opted to use the same bits: \nhttps://github.com/rgb-org/spec/blob/master/04-lightning-network.md\n\nI think issue of requiring centralized number assignment can be easily avoided \nfor experimental features by using a unique identifier for the feature instead, \nsuch as a hash of the feature name. \nThis should make it simpler for independent developers to try new features \nbefore creating new pull requests for a BOLT assignment.\n\nHere's an extremely rough draft of the idea. The intent is that once an \nexperiment has been tested and is succesful, it can move towards being \nstandardized as a BOLT. Is it worth adding something like this?\n\n--- BOLT #(-1): Experimental Features  [tentatively named]\n\nOverview\n\nThe experimental features protocol is intended for testing protocol features \nwhich are not necessarily intended to become standard BOLTs.\n\n* Lightning base protocol messages:\n\n** experiment\n\nA message for arbitrary protocol implementaion with a unique ID for each \nfeature supported.\n\n  type: <??>\n  data:\n    [32: experiment_name_hash]\n    [2: payloadlen]\n    [payloadlen: payload]\n\n`experiment_name_hash` is be a SHA256 of the feature name, in ASCII, \nconcatenated with a good source of randomness to avoid any conflict if any two \ndevelopers chose the same name.\n\n`payloadlen` is the length of the remaining message, which MUST equal the \nlength of the outer message -34 bytes.\n\n`payload` is the payload of the experiment message, which should have the same \nformat as a regular Lightning message described in BOLT #1.\n\nA sending node:\n    - MUST send the `init_experiments` message with `experiment_name_hash` set \nto 0 before any other `experiment` message is sent.\n    - MUST NOT send an experiment message with any non-zero \n`experiment_name_hash` if the receiver has not already declared support for \nthe feature_hash.\n\nA receiving node:\n    - If experiment_name_hash is zero:\n        - Treat the payload as the same format of lightning message, ie, a 16-\nbit big endian experiment_type followed by the data.\n    - If the experiment_name_hash is not recognized or disabled, MUST ignore \nthe message. (SHOULD also fail the channels?)\n\nRationale:\n\nThe base lightning layer allows extension through feature bits and new odd \nmessage types, but these require centralized assignment by the Lightning \ncommunity. \nThis creates a chicken and egg problem for developers testing experimental \nfeatures: In order to be assigned numbers, we need to standarize our feature \nthrough the BOLT process,\nbut we might not wish to attempt standardization until our experimental \nfeatures have been tested. \nWithout standardization, different teams working on different experimental \nfeatures may cause conflicts if different clients are treating feature bits or \nmessage types differently.\n\nBy moving all experimental features to a new message where they are wrapped in \na unique feature name, this eradicates chance of conflicting implementations.\n\nAdditionally, this message can serve as a generic transport mechanism between \nany two lightning nodes who have agreed to support the expierment_name_hash, \nas there is no restriction on the format of the payload. This may make it \npossible to serve e.g: HTTP over Lightning.\n\n\n* General experiment messages:\n\nIf `experiment_name_hash` in the experiment message is 0, treat its payload as \non of the following messages:\n\n** init_experiments message\n\nInforms a peer of features supported by the client.\n\n  1. experiment_type: 16\n  2. data:\n      * [2: eflen]\n      * [eflen*32: experiment_name_hashes]\n\nA sending node:\n   * MUST send the `init_experiments` message before any other `experiment` \nmessage for each connection.\n   * SHOULD send the `experiment_name_hash` for any features supported and set \nto enabled in their software client.\n\nA receiving node:\n   * For each experiment_name_hash:\n      * If the hash is unknown or 0: Ignore the feature\n      * If the hash is known: SHOULD enable the feature for communication with \nthis peer.\n\n** experiment_error message\n\n experiment_type: 17\n data:\n    [32: channel_id]\n    [32: experiment_name_hash]\n    [2: len]\n    [len: data]\n\nFor all messages before funding_created: Must use temporary_channel_id in lieu \nof channel_id.\n\nA sending node:\n   * If error is critical, should also send the regular lightning `error` \nmessage from BOLT #1\n   * If the error is not specific to any channel: set channel_id to 0.\n\nA receiving node\n   * If experiment_name_hash is unknown:\n      - MUST fail the channel.\n   * If channel_id is 0\n      - MUST fail all the channels\n\nRationale\n\nThis message is not intended to replace `error` for criticial errors, but is \nprovided for additional debugging information\nrelated to the experimental feature being used. \nA client may decide whether or not it can recover from such errors \nindividually per experimental feature, which may include aborting channels and \nthe connection.\n\nTODO: Define gossip/query messages related to nodes/channels which support \nfeatures by experiment_hash_name.\n\n---EOF\n\n\nOn Sunday, 22 July 2018 13:32:02 BST Olaoluwa Osuntokun wrote:\n> No need to apologize! Perhaps this confusion shows that the current process\n> surrounding creating/modifying/drafting BOLT documents does indeed need to\n> be better documented. We've more or less been rolling along with a pretty\n> minimal process among the various implementations which I'd say has worked\n> pretty well so far. However as more contributors get involved we may need\n> to add a bit more structure to ensure things are transparent for newcomers.\n> \n> On Sun, Jul 22, 2018, 12:57 PM Ren\u00e9 Pickhardt <r.pickhardt at googlemail.com>\n> \n> wrote:\n> > Sorry did not realized that BOLTs are the equivalent - and aparently many\n> > people I spoke to also didn't realize that.\n> > \n> > I thought BOLT is the protocol specification and the bolts are just the\n> > sections. And the BOLT should be updated to a new version.\n> > \n> > Also I suggested that this should take place for example within the\n> > lightning rfc repo. So my suggestion was not about creating another place\n> > but more about making the process more transparent or kind of filling the\n> > gap that I felt was there.\n> > \n> > I am sorry for spaming mailboxes with my suggestion just because I didn't\n> > understand the current process.\n> > \n> > \n> > Olaoluwa Osuntokun <laolu32 at gmail.com> schrieb am So., 22. Juli 2018\n> > \n> > 20:59:\n> >> We already have the equiv of improvement proposals: BOLTs. Historically\n> >> new standardization documents are proposed initially as issues or PR's\n> >> when\n> >> ultimately accepted. Why do we need another repo?\n> >> \n> >> On Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\n> >> \n> >> lightning-dev at lists.linuxfoundation.org> wrote:\n> >>> Hey everyone,\n> >>> \n> >>> in the grand tradition of BIPs I propose that we also start to have our\n> >>> own LIPs (Lightning Network Improvement proposals)\n> >>> \n> >>> I think they should be placed on the github.com/lightning account in a\n> >>> repo called lips (or within the lightning rfc repo) until that will\n> >>> happen\n> >>> I created a draft for LIP-0001 (which is describing the process and is\n> >>> 95%\n> >>> influenced by BIP-0002) in my github repo:\n> >>> \n> >>> https://github.com/renepickhardt/lips  (There are some open Todos and\n> >>> Questions in this LIP)\n> >>> \n> >>> The background for this Idea: I just came home from the bitcoin munich\n> >>> meetup where I held a talk examining BOLT. As I was asked to also talk\n> >>> about the future plans of the developers for BOLT 1.1 I realized while\n> >>> preparing the talk that many ideas are distributed within the community\n> >>> but\n> >>> it seems we don't have a central place where we collect future\n> >>> enhancements\n> >>> for BOLT1.1. Having this in mind I think also for the meeting in\n> >>> Australia\n> >>> it would be nice if already a list of LIPs would be in place so that the\n> >>> discussion can be more focused.\n> >>> potential LIPs could include:\n> >>> * Watchtowers\n> >>> * Autopilot\n> >>> * AMP\n> >>> * Splicing\n> >>> * Routing Protcols\n> >>> * Broadcasting past Routing statistics\n> >>> * eltoo\n> >>> * ...\n> >>> \n> >>> As said before I would volunteer to work on a LIP for Splicing (actually\n> >>> I already started)\n> >>> \n> >>> best Rene\n> >>> \n> >>> \n> >>> --\n> >>> https://www.rene-pickhardt.de\n> >>> \n> >>> Skype: rene.pickhardt\n> >>> \n> >>> mobile: +49 (0)176 5762 3618\n> >>> _______________________________________________\n> >>> Lightning-dev mailing list\n> >>> Lightning-dev at lists.linuxfoundation.org\n> >>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> > \n> > Am 22.07.2018 20:59 schrieb \"Olaoluwa Osuntokun\" <laolu32 at gmail.com>:\n> > \n> > We already have the equiv of improvement proposals: BOLTs. Historically\n> > new standardization documents are proposed initially as issues or PR's\n> > when\n> > ultimately accepted. Why do we need another repo?\n> > \n> > On Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\n> > \n> > lightning-dev at lists.linuxfoundation.org> wrote:\n> >> Hey everyone,\n> >> \n> >> in the grand tradition of BIPs I propose that we also start to have our\n> >> own LIPs (Lightning Network Improvement proposals)\n> >> \n> >> I think they should be placed on the github.com/lightning account in a\n> >> repo called lips (or within the lightning rfc repo) until that will\n> >> happen\n> >> I created a draft for LIP-0001 (which is describing the process and is\n> >> 95%\n> >> influenced by BIP-0002) in my github repo:\n> >> \n> >> https://github.com/renepickhardt/lips  (There are some open Todos and\n> >> Questions in this LIP)\n> >> \n> >> The background for this Idea: I just came home from the bitcoin munich\n> >> meetup where I held a talk examining BOLT. As I was asked to also talk\n> >> about the future plans of the developers for BOLT 1.1 I realized while\n> >> preparing the talk that many ideas are distributed within the community\n> >> but\n> >> it seems we don't have a central place where we collect future\n> >> enhancements\n> >> for BOLT1.1. Having this in mind I think also for the meeting in\n> >> Australia\n> >> it would be nice if already a list of LIPs would be in place so that the\n> >> discussion can be more focused.\n> >> potential LIPs could include:\n> >> * Watchtowers\n> >> * Autopilot\n> >> * AMP\n> >> * Splicing\n> >> * Routing Protcols\n> >> * Broadcasting past Routing statistics\n> >> * eltoo\n> >> * ...\n> >> \n> >> As said before I would volunteer to work on a LIP for Splicing (actually\n> >> I already started)\n> >> \n> >> best Rene\n> >> \n> >> \n> >> --\n> >> https://www.rene-pickhardt.de\n> >> \n> >> Skype: rene.pickhardt\n> >> \n> >> mobile: +49 (0)176 5762 3618\n> >> _______________________________________________\n> >> Lightning-dev mailing list\n> >> Lightning-dev at lists.linuxfoundation.org\n> >> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Olaoluwa Osuntokun",
                "date": "2018-07-23T19:41:36",
                "message_text_only": "> My concerns are mainly about assignment of values for types and feature\n> bits, and how we can test new features without conflicting with other\n> developers.\n\nThere're enough feature bits that one can likely just pick a random high\nnumber, and start to roll out their experiment in the wild. If a collision\n_does_ happen, then your new feature/protocol will likely detect the\nincompatibility (example invalid message from your PoV), disconnect, and\nmove on. Local feature bits of course, are much more lax than say, global\nfeature bits.\n\n> For example, looking at the current BOLT#9, it appears bits 8/9 are the\nnext\n> free bits available for use,\n\nThere's no strict requirement that feature bits be assigned in order.\nThey've been assigned in this order so far, as there really haven't been\nmany new additions, or experiments in the wild.\n\n> however, I find that other developers have also opted to use the same\nbits:\n> https://github.com/rgb-org/spec/blob/master/04-lightning-network.md\n\nA simple courtesy to other developers would simply be to announce on the\nlist that one is running an experiment with a new feature bit (bit 1493 or\nw/e) such that collisions in the wild are less likely. The authors of \"RGB\"\nto my knowledge have never posted on the list to \"claim\" their experimental\nfeature bit. Also looking at the spec, their LN integration is more or less\na hand wave over the actual implementations details, so really just a high\nlevel design sketch.\n\n-- Laolu\n\n\nOn Mon, Jul 23, 2018 at 12:15 PM Mr Hodlen <hodlen at outlook.com> wrote:\n\n> Hi, new guy here. I've also been a bit confused about the process from\n> just\n> reading the BOLTs.\n>\n> I'm working on an implementation of the BOLTs with the intention of\n> experimenting with new features.\n> My concerns are mainly about assignment of values for types and feature\n> bits,\n> and how we can test new features without conflicting with other\n> developers.\n>\n> For example, looking at the current BOLT#9, it appears bits 8/9 are the\n> next\n> free bits available for use, so if I were implementing a new optional\n> feature,\n> I would pick the next available bits,\n> however, I find that other developers have also opted to use the same\n> bits:\n> https://github.com/rgb-org/spec/blob/master/04-lightning-network.md\n>\n> I think issue of requiring centralized number assignment can be easily\n> avoided\n> for experimental features by using a unique identifier for the feature\n> instead,\n> such as a hash of the feature name.\n> This should make it simpler for independent developers to try new features\n> before creating new pull requests for a BOLT assignment.\n>\n> Here's an extremely rough draft of the idea. The intent is that once an\n> experiment has been tested and is succesful, it can move towards being\n> standardized as a BOLT. Is it worth adding something like this?\n>\n> --- BOLT #(-1): Experimental Features  [tentatively named]\n>\n> Overview\n>\n> The experimental features protocol is intended for testing protocol\n> features\n> which are not necessarily intended to become standard BOLTs.\n>\n> * Lightning base protocol messages:\n>\n> ** experiment\n>\n> A message for arbitrary protocol implementaion with a unique ID for each\n> feature supported.\n>\n>   type: <??>\n>   data:\n>     [32: experiment_name_hash]\n>     [2: payloadlen]\n>     [payloadlen: payload]\n>\n> `experiment_name_hash` is be a SHA256 of the feature name, in ASCII,\n> concatenated with a good source of randomness to avoid any conflict if any\n> two\n> developers chose the same name.\n>\n> `payloadlen` is the length of the remaining message, which MUST equal the\n> length of the outer message -34 bytes.\n>\n> `payload` is the payload of the experiment message, which should have the\n> same\n> format as a regular Lightning message described in BOLT #1.\n>\n> A sending node:\n>     - MUST send the `init_experiments` message with `experiment_name_hash`\n> set\n> to 0 before any other `experiment` message is sent.\n>     - MUST NOT send an experiment message with any non-zero\n> `experiment_name_hash` if the receiver has not already declared support\n> for\n> the feature_hash.\n>\n> A receiving node:\n>     - If experiment_name_hash is zero:\n>         - Treat the payload as the same format of lightning message, ie, a\n> 16-\n> bit big endian experiment_type followed by the data.\n>     - If the experiment_name_hash is not recognized or disabled, MUST\n> ignore\n> the message. (SHOULD also fail the channels?)\n>\n> Rationale:\n>\n> The base lightning layer allows extension through feature bits and new odd\n> message types, but these require centralized assignment by the Lightning\n> community.\n> This creates a chicken and egg problem for developers testing experimental\n> features: In order to be assigned numbers, we need to standarize our\n> feature\n> through the BOLT process,\n> but we might not wish to attempt standardization until our experimental\n> features have been tested.\n> Without standardization, different teams working on different experimental\n> features may cause conflicts if different clients are treating feature\n> bits or\n> message types differently.\n>\n> By moving all experimental features to a new message where they are\n> wrapped in\n> a unique feature name, this eradicates chance of conflicting\n> implementations.\n>\n> Additionally, this message can serve as a generic transport mechanism\n> between\n> any two lightning nodes who have agreed to support the\n> expierment_name_hash,\n> as there is no restriction on the format of the payload. This may make it\n> possible to serve e.g: HTTP over Lightning.\n>\n>\n> * General experiment messages:\n>\n> If `experiment_name_hash` in the experiment message is 0, treat its\n> payload as\n> on of the following messages:\n>\n> ** init_experiments message\n>\n> Informs a peer of features supported by the client.\n>\n>   1. experiment_type: 16\n>   2. data:\n>       * [2: eflen]\n>       * [eflen*32: experiment_name_hashes]\n>\n> A sending node:\n>    * MUST send the `init_experiments` message before any other\n> `experiment`\n> message for each connection.\n>    * SHOULD send the `experiment_name_hash` for any features supported and\n> set\n> to enabled in their software client.\n>\n> A receiving node:\n>    * For each experiment_name_hash:\n>       * If the hash is unknown or 0: Ignore the feature\n>       * If the hash is known: SHOULD enable the feature for communication\n> with\n> this peer.\n>\n> ** experiment_error message\n>\n>  experiment_type: 17\n>  data:\n>     [32: channel_id]\n>     [32: experiment_name_hash]\n>     [2: len]\n>     [len: data]\n>\n> For all messages before funding_created: Must use temporary_channel_id in\n> lieu\n> of channel_id.\n>\n> A sending node:\n>    * If error is critical, should also send the regular lightning `error`\n> message from BOLT #1\n>    * If the error is not specific to any channel: set channel_id to 0.\n>\n> A receiving node\n>    * If experiment_name_hash is unknown:\n>       - MUST fail the channel.\n>    * If channel_id is 0\n>       - MUST fail all the channels\n>\n> Rationale\n>\n> This message is not intended to replace `error` for criticial errors, but\n> is\n> provided for additional debugging information\n> related to the experimental feature being used.\n> A client may decide whether or not it can recover from such errors\n> individually per experimental feature, which may include aborting channels\n> and\n> the connection.\n>\n> TODO: Define gossip/query messages related to nodes/channels which support\n> features by experiment_hash_name.\n>\n> ---EOF\n>\n>\n> On Sunday, 22 July 2018 13:32:02 BST Olaoluwa Osuntokun wrote:\n> > No need to apologize! Perhaps this confusion shows that the current\n> process\n> > surrounding creating/modifying/drafting BOLT documents does indeed need\n> to\n> > be better documented. We've more or less been rolling along with a pretty\n> > minimal process among the various implementations which I'd say has\n> worked\n> > pretty well so far. However as more contributors get involved we may need\n> > to add a bit more structure to ensure things are transparent for\n> newcomers.\n> >\n> > On Sun, Jul 22, 2018, 12:57 PM Ren\u00e9 Pickhardt <\n> r.pickhardt at googlemail.com>\n> >\n> > wrote:\n> > > Sorry did not realized that BOLTs are the equivalent - and aparently\n> many\n> > > people I spoke to also didn't realize that.\n> > >\n> > > I thought BOLT is the protocol specification and the bolts are just the\n> > > sections. And the BOLT should be updated to a new version.\n> > >\n> > > Also I suggested that this should take place for example within the\n> > > lightning rfc repo. So my suggestion was not about creating another\n> place\n> > > but more about making the process more transparent or kind of filling\n> the\n> > > gap that I felt was there.\n> > >\n> > > I am sorry for spaming mailboxes with my suggestion just because I\n> didn't\n> > > understand the current process.\n> > >\n> > >\n> > > Olaoluwa Osuntokun <laolu32 at gmail.com> schrieb am So., 22. Juli 2018\n> > >\n> > > 20:59:\n> > >> We already have the equiv of improvement proposals: BOLTs.\n> Historically\n> > >> new standardization documents are proposed initially as issues or PR's\n> > >> when\n> > >> ultimately accepted. Why do we need another repo?\n> > >>\n> > >> On Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\n> > >>\n> > >> lightning-dev at lists.linuxfoundation.org> wrote:\n> > >>> Hey everyone,\n> > >>>\n> > >>> in the grand tradition of BIPs I propose that we also start to have\n> our\n> > >>> own LIPs (Lightning Network Improvement proposals)\n> > >>>\n> > >>> I think they should be placed on the github.com/lightning account\n> in a\n> > >>> repo called lips (or within the lightning rfc repo) until that will\n> > >>> happen\n> > >>> I created a draft for LIP-0001 (which is describing the process and\n> is\n> > >>> 95%\n> > >>> influenced by BIP-0002) in my github repo:\n> > >>>\n> > >>> https://github.com/renepickhardt/lips  (There are some open Todos\n> and\n> > >>> Questions in this LIP)\n> > >>>\n> > >>> The background for this Idea: I just came home from the bitcoin\n> munich\n> > >>> meetup where I held a talk examining BOLT. As I was asked to also\n> talk\n> > >>> about the future plans of the developers for BOLT 1.1 I realized\n> while\n> > >>> preparing the talk that many ideas are distributed within the\n> community\n> > >>> but\n> > >>> it seems we don't have a central place where we collect future\n> > >>> enhancements\n> > >>> for BOLT1.1. Having this in mind I think also for the meeting in\n> > >>> Australia\n> > >>> it would be nice if already a list of LIPs would be in place so that\n> the\n> > >>> discussion can be more focused.\n> > >>> potential LIPs could include:\n> > >>> * Watchtowers\n> > >>> * Autopilot\n> > >>> * AMP\n> > >>> * Splicing\n> > >>> * Routing Protcols\n> > >>> * Broadcasting past Routing statistics\n> > >>> * eltoo\n> > >>> * ...\n> > >>>\n> > >>> As said before I would volunteer to work on a LIP for Splicing\n> (actually\n> > >>> I already started)\n> > >>>\n> > >>> best Rene\n> > >>>\n> > >>>\n> > >>> --\n> > >>> https://www.rene-pickhardt.de\n> > >>>\n> > >>> Skype: rene.pickhardt\n> > >>>\n> > >>> mobile: +49 (0)176 5762 3618 <+49%20176%2057623618>\n> > >>> _______________________________________________\n> > >>> Lightning-dev mailing list\n> > >>> Lightning-dev at lists.linuxfoundation.org\n> > >>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n> > >\n> > > Am 22.07.2018 20:59 schrieb \"Olaoluwa Osuntokun\" <laolu32 at gmail.com>:\n> > >\n> > > We already have the equiv of improvement proposals: BOLTs. Historically\n> > > new standardization documents are proposed initially as issues or PR's\n> > > when\n> > > ultimately accepted. Why do we need another repo?\n> > >\n> > > On Sun, Jul 22, 2018, 6:45 AM Ren\u00e9 Pickhardt via Lightning-dev <\n> > >\n> > > lightning-dev at lists.linuxfoundation.org> wrote:\n> > >> Hey everyone,\n> > >>\n> > >> in the grand tradition of BIPs I propose that we also start to have\n> our\n> > >> own LIPs (Lightning Network Improvement proposals)\n> > >>\n> > >> I think they should be placed on the github.com/lightning account in\n> a\n> > >> repo called lips (or within the lightning rfc repo) until that will\n> > >> happen\n> > >> I created a draft for LIP-0001 (which is describing the process and is\n> > >> 95%\n> > >> influenced by BIP-0002) in my github repo:\n> > >>\n> > >> https://github.com/renepickhardt/lips  (There are some open Todos and\n> > >> Questions in this LIP)\n> > >>\n> > >> The background for this Idea: I just came home from the bitcoin munich\n> > >> meetup where I held a talk examining BOLT. As I was asked to also talk\n> > >> about the future plans of the developers for BOLT 1.1 I realized while\n> > >> preparing the talk that many ideas are distributed within the\n> community\n> > >> but\n> > >> it seems we don't have a central place where we collect future\n> > >> enhancements\n> > >> for BOLT1.1. Having this in mind I think also for the meeting in\n> > >> Australia\n> > >> it would be nice if already a list of LIPs would be in place so that\n> the\n> > >> discussion can be more focused.\n> > >> potential LIPs could include:\n> > >> * Watchtowers\n> > >> * Autopilot\n> > >> * AMP\n> > >> * Splicing\n> > >> * Routing Protcols\n> > >> * Broadcasting past Routing statistics\n> > >> * eltoo\n> > >> * ...\n> > >>\n> > >> As said before I would volunteer to work on a LIP for Splicing\n> (actually\n> > >> I already started)\n> > >>\n> > >> best Rene\n> > >>\n> > >>\n> > >> --\n> > >> https://www.rene-pickhardt.de\n> > >>\n> > >> Skype: rene.pickhardt\n> > >>\n> > >> mobile: +49 (0)176 5762 3618 <+49%20176%2057623618>\n> > >> _______________________________________________\n> > >> Lightning-dev mailing list\n> > >> Lightning-dev at lists.linuxfoundation.org\n> > >> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180723/9524b234/attachment-0001.html>"
            }
        ],
        "thread_summary": {
            "title": "proposal for Lightning Network improvement proposals",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Mr Hodlen",
                "Ren\u00e9 Pickhardt",
                "Olaoluwa Osuntokun",
                "Luke Dashjr"
            ],
            "messages_count": 7,
            "total_messages_chars_count": 41433
        }
    },
    {
        "title": "[Lightning-dev] Virtual channels",
        "thread_messages": [
            {
                "author": "Dmytro Piatkivskyi",
                "date": "2018-07-24T11:00:26",
                "message_text_only": "Dear list, pardon me that I haven't investigated the Lightning implementations in depth yet, but one discussion has made me wonder how you approach the below described situation.\n\nRene was talking about virtual channels in his article [1]. His motivation was that a company running multiple nodes has to open channels between its own nodes in order to transact between them.\nMy vision of LN was to allow for much heterogeneity. Not only a company should be able to transact between its own nodes, but also with other entities it has a trust relationship with. Let me give you an example.\n\nSay I trust you unconditionally. Alice asks me to send a satoshi to Bob. I don't have a channel with him, but you do. No channel between us. I receive HTLC from Alice, give you the image. You create HTLC with Bob, using that image. Bob checks - everything is OK. Bob executes.\n\nThe problem is source routing. Alice creates the whole payment chain, so she should be aware of our relationship. A solution could be advertising our trust as being a single node or introducing virtual channels as Rene suggests, constantly figuring out our respective balances. Is there a way to do so or do you see any other solution?\n\nI understand the word 'trust' is repulsive, but think of the case with a single company running multiple nodes for whatever reason.\n\nThanks,\nDima\n\n[1] https://www.rene-pickhardt.de/virtual-payment-channels-for-the-lightning-network-a-lightning-network-improvement-proposal-draft/\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180724/b6bbe1ca/attachment.html>"
            },
            {
                "author": "Rusty Russell",
                "date": "2018-07-28T02:16:34",
                "message_text_only": "Dmytro Piatkivskyi <dmytro.piatkivskyi at ntnu.no> writes:\n\n> Dear list, pardon me that I haven't investigated the Lightning implementations in depth yet, but one discussion has made me wonder how you approach the below described situation.\n>\n> Rene was talking about virtual channels in his article [1]. His motivation was that a company running multiple nodes has to open channels between its own nodes in order to transact between them.\n\nRene CC'd.\n\nThe issue with virtual channels is that we rely on proving that funding\ntransactions exist as a simple spam-prevention mechanism.  However,\nthat's just for gossip messages which advertize a public channel.\n\nTwo things to note:\n\n1.  You can advertize anything you want in BOLT-11 `r` fields; this is\n    the correct place for virtual channels, or private channels.  We\n    might also allow some kind of local channel advertisements in the\n    future.\n\n2.  The advertisement of existence of a channel doesn't require its use.\n    If you have a trust relationship you can just say \"please send this\"\n    etc.\n\nHope that helps!\nRusty.\n\n> My vision of LN was to allow for much heterogeneity. Not only a company should be able to transact between its own nodes, but also with other entities it has a trust relationship with. Let me give you an example.\n>\n> Say I trust you unconditionally. Alice asks me to send a satoshi to Bob. I don't have a channel with him, but you do. No channel between us. I receive HTLC from Alice, give you the image. You create HTLC with Bob, using that image. Bob checks - everything is OK. Bob executes.\n>\n> The problem is source routing. Alice creates the whole payment chain, so she should be aware of our relationship. A solution could be advertising our trust as being a single node or introducing virtual channels as Rene suggests, constantly figuring out our respective balances. Is there a way to do so or do you see any other solution?\n>\n> I understand the word 'trust' is repulsive, but think of the case with a single company running multiple nodes for whatever reason.\n>\n> Thanks,\n> Dima\n>\n> [1] https://www.rene-pickhardt.de/virtual-payment-channels-for-the-lightning-network-a-lightning-network-improvement-proposal-draft/\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            }
        ],
        "thread_summary": {
            "title": "Virtual channels",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "Dmytro Piatkivskyi"
            ],
            "messages_count": 2,
            "total_messages_chars_count": 4071
        }
    },
    {
        "title": "[Lightning-dev] Lack of capacity field in channel_announcement makes life difficult. Why is it not there?",
        "thread_messages": [
            {
                "author": "\u0410\u0440\u0442\u0451\u043c \u041b\u0438\u0442\u0432\u0438\u043d\u043e\u0432\u0438\u0447",
                "date": "2018-07-29T12:59:09",
                "message_text_only": "Greetings.\n\nWhat was the rationale for not including channel capacity into the\nchannel_announcement message?\n\nAs things stand now, the only way to determine it is to check the\nblockchain, which is hard for mobile and/or light wallets.\nEven worse, the data is only there in the form of short_channel_id, which\nis incompatible with most block explorer APIs.\n\nIn other words, having to have access to the blockchain turns a\nroute-finding tool from a simple program into a thing laden with many\ndependencies in order to fetch and parse the transactions.\nNot knowing the capacity of the channels drops routing success rates\ndramatically, especially for larger payments.\n\nIs there a good reason to force us to do so that i'm missing?\n\n\n-Artem\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180729/dd98d6a7/attachment.html>"
            },
            {
                "author": "Robert Olsson",
                "date": "2018-07-29T13:43:14",
                "message_text_only": "I agree that having to look in the blockchain should not be a requirement\nfor light wallets.\n\nI think however it would be much better and flexible to append a max to\nchannel_update. We already have htlc_minimum_msat there and could add\nhtlc_maximum_msat to show capacity (minus fees)\nLike this:\n\n\n   1. type: 258 (channel_update)\n   2. data:\n      - [64:signature]\n      - [32:chain_hash]\n      - [8:short_channel_id]\n      - [4:timestamp]\n      - [2:flags]\n      - [2:cltv_expiry_delta]\n      - [8:htlc_minimum_msat]\n      - [4:fee_base_msat]\n      - [4:fee_proportional_millionths]\n\n      - [8:htlc_maximum_msat]\n\n\nIt shouldn't be an issue for older implementations to handle an added 8\nbytes, they simply won't read the last 8 bytes.\nNew implementations can easily read old ones, and setting\nhtlc_maxmimum_msat internally to a default value.\n\nImplementations that do lookup in blockchain can easily check that\nhtlc_maximum_msat doesn't exceed the real capacity, and discard those\nmessages if they see fit.\n\nBy simply adding 8 bytes at the end it should be an easy fix that is/should\nbe compatible with current implementations (devs:please verify your parsing\ncode, i haven't).\n\nWe also have flexibility to adjust these values just as we adjust the\ndisable flag or fees.\nThat means we could optionally perodically announce this value to reflect\nthe average local balance, and thereby make it much easier for\nimplementations to avoid for instance channels with low or 0 balance.\n\nEven if not periodically gossiped it would help in many cases.\n\nConsider an AMP payment of 100k going thru a channel which only has 50k\nlocal balance. The node already responds with an error with an attached\ntype258 message.\nLet it reflect the current local balance in htlc_maximum_msat, so the AMP\nimplementation can directly try 50k instead.\nWithout that info in the error, the AMP implementation would have to try\n90k, 80k, 70k, 60k, 50k before getting through, taking up time and\nresources.\n\nOther implementations of it would be to set it in order to traffic control\nwithout having to signal it as disabled, and thereby passively balance\nchannels, or making sure most funds end up on whatever desired side before\nclosing on-chain. And there are other things you can do once we have this.\n\nI think it would be a simple 8-byte fix with huge advantages and\npossibilities.\n\nRegarding abuse:\nNodes checking blockchain can discard erroneous messages. If the messages\nslip thru to a wallet that doesn't verify, how much could this possibly\nhurt and where? Today for instance Eclair assumes all channels are wide\nenough anyhows.\n\nRegarding bandwidth:\nNodes should not broadcast updates after every packet, but do it wisely.\nAnd optionally. You could just announce the original capacity.\n\nRegarding privacy concerns:\nUse cases such as revealing local balances are of course totally optional\nand does not need to be activated for those node owners that prefer ppl to\ninstead use repeated trial-and-error probing to discover the local balance.\nI'm currently working on a tool for that, but if this proposal is adopted\ni'll obviously scrap that project.\n\nBest regards\nRobert Olsson\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOn Sun, Jul 29, 2018 at 3:59 PM, \u0410\u0440\u0442\u0451\u043c \u041b\u0438\u0442\u0432\u0438\u043d\u043e\u0432\u0438\u0447 <theartlav at gmail.com>\nwrote:\n\n> Greetings.\n>\n> What was the rationale for not including channel capacity into the\n> channel_announcement message?\n>\n> As things stand now, the only way to determine it is to check the\n> blockchain, which is hard for mobile and/or light wallets.\n> Even worse, the data is only there in the form of short_channel_id, which\n> is incompatible with most block explorer APIs.\n>\n> In other words, having to have access to the blockchain turns a\n> route-finding tool from a simple program into a thing laden with many\n> dependencies in order to fetch and parse the transactions.\n> Not knowing the capacity of the channels drops routing success rates\n> dramatically, especially for larger payments.\n>\n> Is there a good reason to force us to do so that i'm missing?\n>\n>\n> -Artem\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180729/c4e825c7/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2018-07-29T13:59:03",
                "message_text_only": "Robert Olsson <robban at robtex.com> writes:\n> I think however it would be much better and flexible to append a max to\n> channel_update. We already have htlc_minimum_msat there and could add\n> htlc_maximum_msat to show capacity (minus fees)\n> Like this:\n>\n>\n>    1. type: 258 (channel_update)\n>    2. data:\n>       - [64:signature]\n>       - [32:chain_hash]\n>       - [8:short_channel_id]\n>       - [4:timestamp]\n>       - [2:flags]\n>       - [2:cltv_expiry_delta]\n>       - [8:htlc_minimum_msat]\n>       - [4:fee_base_msat]\n>       - [4:fee_proportional_millionths]\n>\n>       - [8:htlc_maximum_msat]\n\nThis isn't about maximum HTLC value, rather \u0410\u0440\u0442\u0451\u043c is talking about\nadding the total channel capacity to the channel_announcement. That is a\nperfectly reasonable idea, as it allows us to safe an on-chain lookup\n(incidentally that is the main reason we started tracking an internal\nUTXO set so we can stop asking bitcoind for full blocks just to check a\nchannel's capacity).\n\nThe channel's capacity is also fixed for the existence of that channel\n(splice-in and splice-out will result in new short channel IDs), so the\nannouncement is exactly the right place to put this.\n\nCheers,\nChristian"
            },
            {
                "author": "Robert Olsson",
                "date": "2018-07-29T14:16:09",
                "message_text_only": "Christian,\n\nOk, it definitely makes sense to include the exact fixed capacity in\nchannel_announcement for the reason you mentioned, and more.\n\nHowever, can we do both while we are at it? The ideas are not mutually\nexclusive, and for successful routing, i think the channel_update-approach\nis much more of a boost.\n\nRegards,\nRobert\n\n\nOn Sun, Jul 29, 2018 at 4:59 PM, Christian Decker <\ndecker.christian at gmail.com> wrote:\n\n> Robert Olsson <robban at robtex.com> writes:\n> > I think however it would be much better and flexible to append a max to\n> > channel_update. We already have htlc_minimum_msat there and could add\n> > htlc_maximum_msat to show capacity (minus fees)\n> > Like this:\n> >\n> >\n> >    1. type: 258 (channel_update)\n> >    2. data:\n> >       - [64:signature]\n> >       - [32:chain_hash]\n> >       - [8:short_channel_id]\n> >       - [4:timestamp]\n> >       - [2:flags]\n> >       - [2:cltv_expiry_delta]\n> >       - [8:htlc_minimum_msat]\n> >       - [4:fee_base_msat]\n> >       - [4:fee_proportional_millionths]\n> >\n> >       - [8:htlc_maximum_msat]\n>\n> This isn't about maximum HTLC value, rather \u0410\u0440\u0442\u0451\u043c is talking about\n> adding the total channel capacity to the channel_announcement. That is a\n> perfectly reasonable idea, as it allows us to safe an on-chain lookup\n> (incidentally that is the main reason we started tracking an internal\n> UTXO set so we can stop asking bitcoind for full blocks just to check a\n> channel's capacity).\n>\n> The channel's capacity is also fixed for the existence of that channel\n> (splice-in and splice-out will result in new short channel IDs), so the\n> announcement is exactly the right place to put this.\n>\n> Cheers,\n> Christian\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180729/6612244b/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2018-07-29T14:38:30",
                "message_text_only": "They are orthogonal, I agree, but we should judge their merits\nindependently, and not batch the discussions out of convenience.\nIn the case of the htlc_maximum_msat I think it will not be\ncontroversial, but it should get its own proposal and discussion.\n\nCheers,\nChristian\nOn Sun, Jul 29, 2018 at 4:17 PM Robert Olsson <robban at robtex.com> wrote:\n>\n> Christian,\n>\n> Ok, it definitely makes sense to include the exact fixed capacity in channel_announcement for the reason you mentioned, and more.\n>\n> However, can we do both while we are at it? The ideas are not mutually exclusive, and for successful routing, i think the channel_update-approach is much more of a boost.\n>\n> Regards,\n> Robert\n>\n>\n> On Sun, Jul 29, 2018 at 4:59 PM, Christian Decker <decker.christian at gmail.com> wrote:\n>>\n>> Robert Olsson <robban at robtex.com> writes:\n>> > I think however it would be much better and flexible to append a max to\n>> > channel_update. We already have htlc_minimum_msat there and could add\n>> > htlc_maximum_msat to show capacity (minus fees)\n>> > Like this:\n>> >\n>> >\n>> >    1. type: 258 (channel_update)\n>> >    2. data:\n>> >       - [64:signature]\n>> >       - [32:chain_hash]\n>> >       - [8:short_channel_id]\n>> >       - [4:timestamp]\n>> >       - [2:flags]\n>> >       - [2:cltv_expiry_delta]\n>> >       - [8:htlc_minimum_msat]\n>> >       - [4:fee_base_msat]\n>> >       - [4:fee_proportional_millionths]\n>> >\n>> >       - [8:htlc_maximum_msat]\n>>\n>> This isn't about maximum HTLC value, rather \u0410\u0440\u0442\u0451\u043c is talking about\n>> adding the total channel capacity to the channel_announcement. That is a\n>> perfectly reasonable idea, as it allows us to safe an on-chain lookup\n>> (incidentally that is the main reason we started tracking an internal\n>> UTXO set so we can stop asking bitcoind for full blocks just to check a\n>> channel's capacity).\n>>\n>> The channel's capacity is also fixed for the existence of that channel\n>> (splice-in and splice-out will result in new short channel IDs), so the\n>> announcement is exactly the right place to put this.\n>>\n>> Cheers,\n>> Christian\n>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "Rusty Russell",
                "date": "2018-07-30T00:05:41",
                "message_text_only": "Christian Decker <decker.christian at gmail.com> writes:\n> They are orthogonal, I agree, but we should judge their merits\n> independently, and not batch the discussions out of convenience.\n> In the case of the htlc_maximum_msat I think it will not be\n> controversial, but it should get its own proposal and discussion.\n\nBTW, my thinking was that we should add an optional funding tx + merkle\nproof to channel_announce (or maybe a new channel_announce_with_proof\nmsg).  A node would use a feature bit to indicate it wants this.  Or we\ncould have a req/response for specific proofs.\n\nWe could also tunnel bitcoin block headers through the network, which\nwould also help lite nodes.\n\nCheers,\nRusty."
            }
        ],
        "thread_summary": {
            "title": "Lack of capacity field in channel_announcement makes life difficult. Why is it not there?",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "Rusty Russell",
                "\u0410\u0440\u0442\u0451\u043c \u041b\u0438\u0442\u0432\u0438\u043d\u043e\u0432\u0438\u0447",
                "Robert Olsson",
                "Christian Decker"
            ],
            "messages_count": 6,
            "total_messages_chars_count": 11362
        }
    },
    {
        "title": "[Lightning-dev] Measuring Lightning Nodes",
        "thread_messages": [
            {
                "author": "Alex Evanovic",
                "date": "2018-07-29T14:21:59",
                "message_text_only": "Hi all,\n\nHope you are well.\n\nCan you please suggest how can I measure lightning nodes, in its current\nstate?\n\nBest,\nAlex\n\u1427\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180729/e7757d65/attachment.html>"
            },
            {
                "author": "Christian Decker",
                "date": "2018-07-29T14:35:09",
                "message_text_only": "Hi Alex,\n\ncould you elaborate what you mean by measuring lightning nodes? For\nexample are you interested in the network topology, or monitoring a\nsingle node?  Or maybe you are interested in the successrate of payments\nperformed on the network? There are a lot of things one can\nmonitor/measure :-)\n\nCheers,\nChristian\n\nAlex Evanovic <alex.evanovic.151 at gmail.com> writes:\n> Hi all,\n>\n> Hope you are well.\n>\n> Can you please suggest how can I measure lightning nodes, in its current\n> state?\n>\n> Best,\n> Alex\n> \u1427\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            },
            {
                "author": "\u0410\u0440\u0442\u0451\u043c \u041b\u0438\u0442\u0432\u0438\u043d\u043e\u0432\u0438\u0447",
                "date": "2018-07-29T15:36:45",
                "message_text_only": "Define \"measure\".\n\nIf you want to know how many nodes and channels are there, you need to\nconnect to any LN node and set initial_routing_sync flag in init message.\nThis will prompt the peer to send you the whole gossip dump, containing\nnode and channel info of every public node/channel (sans channel\ncapacities).\n\nIf you don't want to make stuff but just to query your c-lightning node,\nthen use listnodes and listchannels commands with lightning-cli.\n\nIf you want to just get the information without doing anything or running a\nnode, then you can look it up on explorer sites, like 1ml dot org.\n\n\n-Artem\n\n2018-07-29 17:21 GMT+03:00 Alex Evanovic <alex.evanovic.151 at gmail.com>:\n\n> Hi all,\n>\n> Hope you are well.\n>\n> Can you please suggest how can I measure lightning nodes, in its current\n> state?\n>\n> Best,\n> Alex\n> \u1427\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>\n>\n-------------- next part --------------\nAn HTML attachment was scrubbed...\nURL: <http://lists.linuxfoundation.org/pipermail/lightning-dev/attachments/20180729/55d1ce9e/attachment.html>"
            },
            {
                "author": "Davison",
                "date": "2018-07-29T17:34:20",
                "message_text_only": ">>If you want to just get the information without doing anything or running a node, then you can look it up on explorer sites, like **1ml dot org.**\n\nI believe Artem meant 1ml dot com.\n\nOn Sun, Jul 29, 2018 at 11:37 AM \u0410\u0440\u0442\u0451\u043c \u041b\u0438\u0442\u0432\u0438\u043d\u043e\u0432\u0438\u0447 <theartlav at gmail.com> wrote:\n>\n> Define \"measure\".\n>\n> If you want to know how many nodes and channels are there, you need to connect to any LN node and set initial_routing_sync flag in init message. This will prompt the peer to send you the whole gossip dump, containing node and channel info of every public node/channel (sans channel capacities).\n>\n> If you don't want to make stuff but just to query your c-lightning node, then use listnodes and listchannels commands with lightning-cli.\n>\n> If you want to just get the information without doing anything or running a node, then you can look it up on explorer sites, like 1ml dot org.\n>\n>\n> -Artem\n>\n> 2018-07-29 17:21 GMT+03:00 Alex Evanovic <alex.evanovic.151 at gmail.com>:\n>>\n>> Hi all,\n>>\n>> Hope you are well.\n>>\n>> Can you please suggest how can I measure lightning nodes, in its current state?\n>>\n>> Best,\n>> Alex\n>> \u1427\n>>\n>> _______________________________________________\n>> Lightning-dev mailing list\n>> Lightning-dev at lists.linuxfoundation.org\n>> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev\n>>\n>\n> _______________________________________________\n> Lightning-dev mailing list\n> Lightning-dev at lists.linuxfoundation.org\n> https://lists.linuxfoundation.org/mailman/listinfo/lightning-dev"
            }
        ],
        "thread_summary": {
            "title": "Measuring Lightning Nodes",
            "categories": [
                "Lightning-dev"
            ],
            "authors": [
                "\u0410\u0440\u0442\u0451\u043c \u041b\u0438\u0442\u0432\u0438\u043d\u043e\u0432\u0438\u0447",
                "Alex Evanovic",
                "Davison",
                "Christian Decker"
            ],
            "messages_count": 4,
            "total_messages_chars_count": 3728
        }
    }
]